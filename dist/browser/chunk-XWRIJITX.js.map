{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/course-group/course-group.component.ts", "src/main/webapp/app/shared/course-group/course-group.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, OnDestroy, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { Observable, Subject, of } from 'rxjs';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { Course, CourseGroup } from 'app/entities/course.model';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { DataTableComponent } from 'app/shared/data-table/data-table.component';\r\nimport { iconsAsHTML } from 'app/utils/icons.utils';\r\nimport { download, generateCsv, mkConfig } from 'export-to-csv';\r\nimport { faDownload, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { EMAIL_KEY, NAME_KEY, REGISTRATION_NUMBER_KEY, USERNAME_KEY } from 'app/shared/export/export-constants';\r\nimport { UsersImportButtonComponent } from '../user-import/users-import-button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { RouterLink } from '@angular/router';\r\nimport { ProfilePictureComponent } from '../profile-picture/profile-picture.component';\r\nimport { DeleteButtonDirective } from '../delete-dialog/delete-button.directive';\r\n\r\nconst cssClasses = {\r\n    alreadyMember: 'already-member',\r\n    newlyAddedMember: 'newly-added-member',\r\n};\r\n\r\nexport type GroupUserInformationRow = {\r\n    [NAME_KEY]: string;\r\n    [USERNAME_KEY]: string;\r\n    [EMAIL_KEY]: string;\r\n    [REGISTRATION_NUMBER_KEY]: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-course-group',\r\n    templateUrl: './course-group.component.html',\r\n    styleUrls: ['./course-group.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [UsersImportButtonComponent, FaIconComponent, TranslateDirective, DataTableComponent, NgxDatatableModule, RouterLink, ProfilePictureComponent, DeleteButtonDirective],\r\n})\r\nexport class CourseGroupComponent implements OnDestroy {\r\n    @ViewChild(DataTableComponent) dataTable: DataTableComponent;\r\n\r\n    @Input() allGroupUsers: User[] = [];\r\n    @Input() isLoadingAllGroupUsers = false;\r\n    @Input() isAdmin = false;\r\n    @Input() course: Course;\r\n    @Input() tutorialGroup: TutorialGroup | undefined = undefined;\r\n    @Input() courseGroup: CourseGroup;\r\n    @Input() exportFileName: string;\r\n\r\n    @Input() userSearch: (loginOrName: string) => Observable<HttpResponse<User[]>> = () => of(new HttpResponse<User[]>({ body: [] }));\r\n    @Input() addUserToGroup: (login: string) => Observable<HttpResponse<void>> = () => of(new HttpResponse<void>());\r\n    @Input() removeUserFromGroup: (login: string) => Observable<HttpResponse<void>> = () => of(new HttpResponse<void>());\r\n    @Input() handleUsersSizeChange: (filteredUsersSize: number) => void = () => {};\r\n\r\n    @Output() importFinish: EventEmitter<void> = new EventEmitter();\r\n\r\n    readonly ActionType = ActionType;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    isSearching = false;\r\n    searchFailed = false;\r\n    searchNoResults = false;\r\n    isTransitioning = false;\r\n    rowClass: string | undefined = undefined;\r\n\r\n    // Icons\r\n    faDownload = faDownload;\r\n    faUserSlash = faUserSlash;\r\n\r\n    /**\r\n     * Unsubscribe dialog error source on component destruction.\r\n     */\r\n    ngOnDestroy() {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Receives the search text and filter results from DataTableComponent, modifies them and returns the result which will be used by ngbTypeahead.\r\n     *\r\n     * 1. Perform server-side search using the search text\r\n     * 2. Return results from server query that contain all users (instead of only the client-side users who are group members already)\r\n     *\r\n     * @param stream$ stream of searches of the format {text, entities} where entities are the results\r\n     * @return stream of users for the autocomplete\r\n     */\r\n    searchAllUsers = (stream$: Observable<{ text: string; entities: User[] }>): Observable<User[]> => {\r\n        return stream$.pipe(\r\n            switchMap(({ text: loginOrName }) => {\r\n                this.searchFailed = false;\r\n                this.searchNoResults = false;\r\n                if (loginOrName.length < 3) {\r\n                    return of([]);\r\n                }\r\n                this.isSearching = true;\r\n                return this.userSearch(loginOrName)\r\n                    .pipe(map((usersResponse) => usersResponse.body!))\r\n                    .pipe(\r\n                        tap((users) => {\r\n                            if (users.length === 0) {\r\n                                this.searchNoResults = true;\r\n                            }\r\n                        }),\r\n                        catchError(() => {\r\n                            this.searchFailed = true;\r\n                            return of([]);\r\n                        }),\r\n                    );\r\n            }),\r\n            tap(() => {\r\n                this.isSearching = false;\r\n            }),\r\n            tap((users) => {\r\n                setTimeout(() => {\r\n                    for (let i = 0; i < this.dataTable.typeaheadButtons.length; i++) {\r\n                        const button = this.dataTable.typeaheadButtons[i];\r\n                        const isAlreadyInGroup = this.allGroupUsers.map((user) => user.id).includes(users[i].id);\r\n                        const hasIcon = button.querySelector('fa-icon');\r\n                        if (!hasIcon) {\r\n                            button.insertAdjacentHTML('beforeend', iconsAsHTML[isAlreadyInGroup ? 'users' : 'users-plus']);\r\n                        }\r\n                        if (isAlreadyInGroup) {\r\n                            button.classList.add(cssClasses.alreadyMember);\r\n                        }\r\n                    }\r\n                });\r\n            }),\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Receives the user that was selected in the autocomplete and the callback from DataTableComponent.\r\n     * The callback inserts the search term of the selected entity into the search field and updates the displayed users.\r\n     *\r\n     * @param user The selected user from the autocomplete suggestions\r\n     * @param callback Function that can be called with the selected user to trigger the DataTableComponent default behavior\r\n     */\r\n    onAutocompleteSelect = (user: User, callback: (user: User) => void): void => {\r\n        // If the user is not part of this course group yet, perform the server call to add them\r\n        if (!this.allGroupUsers.map((u) => u.id).includes(user.id) && user.login) {\r\n            this.isTransitioning = true;\r\n            this.addUserToGroup(user.login).subscribe({\r\n                next: () => {\r\n                    this.isTransitioning = false;\r\n\r\n                    // Add newly added user to the list of all users in the course group\r\n                    this.allGroupUsers.push(user);\r\n\r\n                    // Hand back over to the data table for updating\r\n                    callback(user);\r\n\r\n                    // Flash green background color to signal to the user that this record was added\r\n                    this.flashRowClass(cssClasses.newlyAddedMember);\r\n                },\r\n                error: () => {\r\n                    this.isTransitioning = false;\r\n                },\r\n            });\r\n        } else {\r\n            // Hand back over to the data table\r\n            callback(user);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Remove user from course group\r\n     *\r\n     * @param user User that should be removed from the currently viewed course group\r\n     */\r\n    removeFromGroup(user: User) {\r\n        if (user.login) {\r\n            this.removeUserFromGroup(user.login).subscribe({\r\n                next: () => {\r\n                    this.allGroupUsers = this.allGroupUsers.filter((u) => u.login !== user.login);\r\n                    this.dialogErrorSource.next('');\r\n                },\r\n                error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats the results in the autocomplete overlay.\r\n     *\r\n     * @param user\r\n     */\r\n    searchResultFormatter = (user: User) => {\r\n        const { name, login } = user;\r\n        return `${name} (${login})`;\r\n    };\r\n\r\n    /**\r\n     * Converts a user object to a string that can be searched for. This is\r\n     * used by the autocomplete select inside the data table.\r\n     *\r\n     * @param user User\r\n     */\r\n    searchTextFromUser = (user: User): string => {\r\n        return user.login || '';\r\n    };\r\n\r\n    /**\r\n     * Computes the row class that is being added to all rows of the datatable\r\n     */\r\n    dataTableRowClass = () => {\r\n        return this.rowClass;\r\n    };\r\n\r\n    /**\r\n     * Can be used to highlight rows temporarily by flashing a certain css class\r\n     *\r\n     * @param className Name of the class to be applied to all rows\r\n     */\r\n    flashRowClass = (className: string) => {\r\n        this.rowClass = className;\r\n        setTimeout(() => (this.rowClass = undefined));\r\n    };\r\n\r\n    /**\r\n     * Method for exporting the csv with the needed data\r\n     */\r\n    exportUserInformation = () => {\r\n        if (this.allGroupUsers.length > 0) {\r\n            const rows: any[] = this.allGroupUsers.map((user: User): GroupUserInformationRow => {\r\n                return {\r\n                    [NAME_KEY]: user.name?.trim() ?? '',\r\n                    [USERNAME_KEY]: user.login?.trim() ?? '',\r\n                    [EMAIL_KEY]: user.email?.trim() ?? '',\r\n                    [REGISTRATION_NUMBER_KEY]: user.visibleRegistrationNumber?.trim() ?? '',\r\n                };\r\n            });\r\n            const keys = [NAME_KEY, USERNAME_KEY, EMAIL_KEY, REGISTRATION_NUMBER_KEY];\r\n            this.exportAsCsv(rows, keys);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method for generating the csv file containing the user information\r\n     *\r\n     * @param rows the data to export\r\n     * @param keys the keys of the data\r\n     */\r\n    exportAsCsv = (rows: any[], keys: string[]) => {\r\n        const options = {\r\n            fieldSeparator: ';',\r\n            quoteStrings: true,\r\n            quoteCharacter: '\"',\r\n            showLabels: true,\r\n            showTitle: false,\r\n            filename: this.exportFileName,\r\n            useTextFile: false,\r\n            useBom: true,\r\n            columnHeaders: keys,\r\n        };\r\n        const csvExportConfig = mkConfig(options);\r\n        const csvData = generateCsv(csvExportConfig)(rows);\r\n        download(csvExportConfig)(csvData);\r\n    };\r\n}\r\n", "<div>\r\n    <div class=\"d-flex flex-wrap justify-content-between align-items-center mb-1\">\r\n        <h2 class=\"mb-1\">\r\n            <!-- Additional Header NG-Content-->\r\n            <ng-content />\r\n        </h2>\r\n        <div class=\"d-flex mt-1 mb-1 gap-1\">\r\n            @if (course?.isAtLeastInstructor) {\r\n                <jhi-user-import-button [courseId]=\"course.id!\" [courseGroup]=\"courseGroup!\" (importDone)=\"importFinish.emit()\" [tutorialGroup]=\"tutorialGroup\" />\r\n            }\r\n            @if (course?.isAtLeastInstructor && allGroupUsers.length > 0) {\r\n                <button class=\"btn btn-primary btn-sm\" (click)=\"exportUserInformation()\">\r\n                    <fa-icon [icon]=\"faDownload\" [fixedWidth]=\"true\" />\r\n                    <span jhiTranslate=\"artemisApp.instructorDashboard.exportCSV\"></span>\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n    <jhi-data-table\r\n        id=\"registered-students\"\r\n        [isLoading]=\"isLoadingAllGroupUsers\"\r\n        [isSearching]=\"isSearching\"\r\n        [searchFailed]=\"searchFailed\"\r\n        [searchNoResults]=\"searchNoResults\"\r\n        [isTransitioning]=\"isTransitioning\"\r\n        entityType=\"user\"\r\n        [allEntities]=\"allGroupUsers\"\r\n        entitiesPerPageTranslation=\"artemisApp.course.courseGroup.usersPerPage\"\r\n        showAllEntitiesTranslation=\"artemisApp.course.courseGroup.showAllUsers\"\r\n        searchNoResultsTranslation=\"artemisApp.course.courseGroup.searchNoResults\"\r\n        searchPlaceholderTranslation=\"artemisApp.course.courseGroup.searchForUsers\"\r\n        [searchFields]=\"['login', 'name']\"\r\n        [searchTextFromEntity]=\"searchTextFromUser\"\r\n        [searchResultFormatter]=\"searchResultFormatter\"\r\n        [onSearchWrapper]=\"searchAllUsers\"\r\n        [onAutocompleteSelectWrapper]=\"onAutocompleteSelect\"\r\n        (entitiesSizeChange)=\"handleUsersSizeChange($event)\"\r\n    >\r\n        <ng-template let-settings=\"settings\" let-controls=\"controls\">\r\n            <ngx-datatable\r\n                class=\"bootstrap\"\r\n                [limit]=\"settings.limit\"\r\n                [sortType]=\"settings.sortType\"\r\n                [columnMode]=\"settings.columnMode\"\r\n                [headerHeight]=\"settings.headerHeight\"\r\n                [footerHeight]=\"settings.footerHeight\"\r\n                [rowHeight]=\"settings.rowHeight\"\r\n                [rows]=\"settings.rows\"\r\n                [rowClass]=\"dataTableRowClass\"\r\n                [scrollbarH]=\"settings.scrollbarH\"\r\n            >\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"60\" [width]=\"80\" [maxWidth]=\"100\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('id')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"global.field.id\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('id')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (isAdmin) {\r\n                            <a routerLink=\"/admin/user-management/{{ value?.login }}\"> {{ value.id }} </a>\r\n                        } @else {\r\n                            {{ value?.id }}\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"100\" [width]=\"120\" [maxWidth]=\"120\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.course.courseGroup.profilePicture\"></span>\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <jhi-profile-picture\r\n                            imageSizeInRem=\"1.5\"\r\n                            fontSizeInRem=\"0.6\"\r\n                            imageId=\"user-profile-picture\"\r\n                            defaultPictureId=\"user-default-profile-picture\"\r\n                            [authorId]=\"value.id\"\r\n                            [authorName]=\"value.name\"\r\n                            [imageUrl]=\"value.imageUrl\"\r\n                        />\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"login\" [minWidth]=\"150\" [width]=\"200\" [maxWidth]=\"200\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('login')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.course.courseGroup.login\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('login')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"visibleRegistrationNumber\" [minWidth]=\"150\" [width]=\"200\" [maxWidth]=\"200\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('visibleRegistrationNumber')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.course.courseGroup.registrationNumber\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('visibleRegistrationNumber')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"name\" [minWidth]=\"150\" [width]=\"250\" [maxWidth]=\"250\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('name')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.course.courseGroup.name\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('name')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"email\" [minWidth]=\"150\" [width]=\"250\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('email')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.course.courseGroup.email\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('email')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"150\" [width]=\"200\">\r\n                    <ng-template ngx-datatable-header-template />\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <div class=\"w-100 text-end\">\r\n                            <button\r\n                                jhiDeleteButton\r\n                                [actionType]=\"ActionType.Remove\"\r\n                                [entityTitle]=\"value.login\"\r\n                                deleteQuestion=\"artemisApp.course.courseGroup.removeFromGroup.modalQuestion\"\r\n                                (delete)=\"removeFromGroup(value)\"\r\n                                [dialogError]=\"dialogError$\"\r\n                            >\r\n                                <fa-icon [icon]=\"faUserSlash\" class=\"me-1\" />\r\n                            </button>\r\n                        </div>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n            </ngx-datatable>\r\n        </ng-template>\r\n    </jhi-data-table>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "importFinish", "emit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "course", "id", "courseGroup", "tutorialGroup", "_r3", "exportUserInformation", "\u0275\u0275element", "faDownload", "_r4", "controls_r5", "controls", "onSort", "iconForSortPropField", "\u0275\u0275propertyInterpolate1", "value_r6", "login", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "CourseGroupComponent_ng_template_18_ng_template_7_Conditional_1_Template", "CourseGroupComponent_ng_template_18_ng_template_7_Conditional_2_Template", "\u0275\u0275conditional", "isAdmin", "value_r7", "name", "imageUrl", "_r8", "\u0275\u0275textInterpolate", "value_r9", "_r10", "value_r11", "_r12", "value_r13", "_r14", "value_r15", "value_r17", "_r16", "value", "removeFromGroup", "ActionType", "Remove", "dialogError$", "faUserSlash", "CourseGroupComponent_ng_template_18_ng_template_5_Template", "CourseGroupComponent_ng_template_18_ng_template_7_Template", "CourseGroupComponent_ng_template_18_ng_template_12_Template", "CourseGroupComponent_ng_template_18_ng_template_14_Template", "CourseGroupComponent_ng_template_18_ng_template_19_Template", "CourseGroupComponent_ng_template_18_ng_template_21_Template", "CourseGroupComponent_ng_template_18_ng_template_26_Template", "CourseGroupComponent_ng_template_18_ng_template_28_Template", "CourseGroupComponent_ng_template_18_ng_template_33_Template", "CourseGroupComponent_ng_template_18_ng_template_35_Template", "CourseGroupComponent_ng_template_18_ng_template_40_Template", "CourseGroupComponent_ng_template_18_ng_template_42_Template", "CourseGroupComponent_ng_template_18_ng_template_47_Template", "CourseGroupComponent_ng_template_18_ng_template_49_Template", "settings_r18", "limit", "sortType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "rows", "dataTableRowClass", "scrollbarH", "cssClasses", "alreadyMember", "newlyAddedMember", "CourseGroupComponent", "dataTable", "allGroupUsers", "isLoadingAllGroupUsers", "undefined", "exportFileName", "userSearch", "of", "HttpResponse", "body", "addUserToGroup", "removeUserFromGroup", "handleUsersSizeChange", "EventEmitter", "dialogErrorSource", "Subject", "asObservable", "isSearching", "searchFailed", "searchNoResults", "isTransitioning", "rowClass", "ngOnDestroy", "unsubscribe", "searchAllUsers", "stream$", "pipe", "switchMap", "text", "loginOrName", "length", "map", "usersResponse", "tap", "users", "catchError", "setTimeout", "i", "typeaheadButtons", "button", "isAlreadyInGroup", "user", "includes", "querySelector", "insertAdjacentHTML", "iconsAsHTML", "classList", "add", "onAutocompleteSelect", "callback", "u", "subscribe", "next", "push", "flashRowClass", "error", "filter", "message", "searchResultFormatter", "searchTextFromUser", "className", "NAME_KEY", "trim", "USERNAME_KEY", "EMAIL_KEY", "email", "REGISTRATION_NUMBER_KEY", "visibleRegistrationNumber", "keys", "exportAsCsv", "options", "fieldSeparator", "quoteStrings", "quoteCharacter", "showLabels", "showTitle", "filename", "useTextFile", "useBom", "columnHeaders", "csvExportConfig", "mkConfig", "csvData", "generateCsv", "download", "selectors", "viewQuery", "rf", "ctx", "DataTableComponent", "\u0275\u0275projection", "CourseGroupComponent_Conditional_12_Template", "CourseGroupComponent_Conditional_13_Template", "$event", "CourseGroupComponent_ng_template_18_Template", "isAtLeastInstructor", "\u0275\u0275pureFunction0", "_c1", "UsersImportButtonComponent", "FaIconComponent", "TranslateDirective", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "RouterLink", "ProfilePictureComponent", "DeleteButtonDirective", "styles", "encapsulation"]
}
