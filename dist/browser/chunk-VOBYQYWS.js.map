{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/rating/rating.component.ts", "src/main/webapp/app/exercises/shared/rating/rating.component.html", "src/main/webapp/app/entities/complaint-request-dto.model.ts", "src/main/webapp/app/complaints/form/complaints-form.component.ts", "src/main/webapp/app/complaints/form/complaints-form.component.html", "src/main/webapp/app/complaints/request/complaint-request.component.ts", "src/main/webapp/app/complaints/request/complaint-request.component.html", "src/main/webapp/app/complaints/response/complaint-response.component.ts", "src/main/webapp/app/complaints/response/complaint-response.component.html", "src/main/webapp/app/complaints/complaints-for-students/complaints-student-view.component.ts", "src/main/webapp/app/complaints/complaints-for-students/complaints-student-view.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges, OnInit, SimpleChanges, inject } from '@angular/core';\r\nimport { RatingService } from 'app/exercises/shared/rating/rating.service';\r\nimport { StarRatingComponent } from 'app/exercises/shared/rating/star-rating/star-rating.component';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Observable } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-rating',\r\n    templateUrl: './rating.component.html',\r\n    styleUrls: ['./rating.component.scss'],\r\n    imports: [TranslateDirective, StarRatingComponent],\r\n})\r\nexport class RatingComponent implements OnInit, OnChanges {\r\n    private ratingService = inject(RatingService);\r\n    private accountService = inject(AccountService);\r\n\r\n    public rating: number;\r\n    public disableRating = false;\r\n    private previousResultId?: number;\r\n\r\n    @Input() result?: Result;\r\n\r\n    ngOnInit(): void {\r\n        this.loadRating();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['result'] && changes['result'].currentValue?.id !== this.previousResultId) {\r\n            this.previousResultId = changes['result'].currentValue?.id;\r\n            this.loadRating();\r\n        }\r\n    }\r\n\r\n    loadRating() {\r\n        if (!this.result?.id || !this.result.participation || !this.accountService.isOwnerOfParticipation(this.result.participation as StudentParticipation)) {\r\n            return;\r\n        }\r\n        this.ratingService.getRating(this.result.id).subscribe((rating) => {\r\n            this.rating = rating ?? 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update/Create new Rating for the result\r\n     * @param event - starRating component that holds new rating value\r\n     */\r\n    onRate(event: { oldValue: number; newValue: number; starRating: StarRatingComponent }) {\r\n        // block rating to prevent double sending of post request\r\n        if (this.disableRating || !this.result) {\r\n            return;\r\n        }\r\n\r\n        const oldRating = this.rating;\r\n        this.rating = event.newValue;\r\n\r\n        this.disableRating = true;\r\n        let observable: Observable<number>;\r\n        // set/update feedback on the server\r\n        if (oldRating) {\r\n            observable = this.ratingService.updateRating(this.rating, this.result.id!);\r\n        } else {\r\n            observable = this.ratingService.createRating(this.rating, this.result.id!);\r\n        }\r\n\r\n        observable.subscribe((rating) => (this.rating = rating)).add(() => (this.disableRating = false));\r\n    }\r\n}\r\n", "<div [class.non-clickable]=\"disableRating\" [id]=\"'rating'\">\r\n    <b>\r\n        <span jhiTranslate=\"artemisApp.rating.label\"></span>\r\n    </b>\r\n    <star-rating checkedColor=\"gold\" uncheckedColor=\"grey\" [value]=\"rating || 0\" [size]=\"'24'\" [readOnly]=\"false\" [totalStars]=\"5\" (rate)=\"onRate($event)\" />\r\n</div>\r\n", "import { ComplaintType } from 'app/entities/complaint.model';\r\n\r\nexport class ComplaintRequestDTO {\r\n    public resultId?: number;\r\n    public complaintText?: string;\r\n    public complaintType?: ComplaintType;\r\n    public examId?: number;\r\n}\r\n", "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ComplaintType } from 'app/entities/complaint.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exercise, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ComplaintRequestDTO } from 'app/entities/complaint-request-dto.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TextareaCounterComponent } from 'app/shared/textarea/textarea-counter.component';\r\n\r\n@Component({\r\n    selector: 'jhi-complaint-form',\r\n    templateUrl: './complaints-form.component.html',\r\n    styleUrls: ['../complaints.scss'],\r\n    imports: [TranslateDirective, FormsModule, ArtemisTranslatePipe, TextareaCounterComponent],\r\n})\r\nexport class ComplaintsFormComponent implements OnInit {\r\n    private complaintService = inject(ComplaintService);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() resultId: number;\r\n    @Input() examId?: number;\r\n    @Input() complaintType: ComplaintType;\r\n    @Input() isCurrentUserSubmissionAuthor = false;\r\n    @Output() onSubmit: EventEmitter<void> = new EventEmitter();\r\n    maxComplaintsPerCourse = 1;\r\n    maxComplaintTextLimit: number;\r\n    complaintText?: string;\r\n    course?: Course;\r\n\r\n    readonly ComplaintType = ComplaintType;\r\n\r\n    ngOnInit(): void {\r\n        this.course = getCourseFromExercise(this.exercise);\r\n        this.maxComplaintTextLimit = this.course?.maxComplaintTextLimit ?? 0;\r\n        if (this.exercise.course) {\r\n            // only set the complaint limit for course exercises, there are unlimited complaints for exams\r\n            this.maxComplaintsPerCourse = this.exercise.teamMode ? this.exercise.course.maxTeamComplaints! : this.exercise.course.maxComplaints!;\r\n        } else {\r\n            // Complaints for exams should always allow at least 2000 characters. If the course limit is higher, the custom limit gets used.\r\n            this.maxComplaintTextLimit = Math.max(2000, this.maxComplaintTextLimit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new complaint on the provided result with the entered text and notifies the output emitter on success.\r\n     */\r\n    createComplaint(): void {\r\n        const complaintRequest = new ComplaintRequestDTO();\r\n        complaintRequest.resultId = this.resultId;\r\n        complaintRequest.complaintType = this.complaintType;\r\n        complaintRequest.complaintText = this.complaintText;\r\n        complaintRequest.examId = this.examId;\r\n\r\n        // TODO: Rethink global client error handling and adapt this line accordingly\r\n        if (complaintRequest.complaintText !== undefined && this.maxComplaintTextLimit < complaintRequest.complaintText!.length) {\r\n            this.alertService.error('artemisApp.complaint.exceededComplaintTextLimit', { maxComplaintTextLimit: this.maxComplaintTextLimit! });\r\n            return;\r\n        }\r\n\r\n        this.complaintService.create(complaintRequest).subscribe({\r\n            next: () => {\r\n                this.onSubmit.emit();\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                if (err?.error?.errorKey === 'tooManyComplaints') {\r\n                    this.alertService.error('artemisApp.complaint.tooManyComplaints', { maxComplaintNumber: this.maxComplaintsPerCourse });\r\n                } else {\r\n                    onError(this.alertService, err);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the length of the entered text.\r\n     */\r\n    complaintTextLength(): number {\r\n        const textArea: HTMLTextAreaElement = document.querySelector('#complainTextArea') as HTMLTextAreaElement;\r\n        return textArea.value.length;\r\n    }\r\n}\r\n", "@if (isCurrentUserSubmissionAuthor) {\r\n    <div class=\"col-12 mt-4\">\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-md-6\">\r\n                <h3 [jhiTranslate]=\"complaintType === ComplaintType.COMPLAINT ? 'artemisApp.complaint.title' : 'artemisApp.moreFeedback.title'\"></h3>\r\n                @if (complaintType !== ComplaintType.COMPLAINT) {\r\n                    <p>\r\n                        {{ (exercise.teamMode ? 'artemisApp.moreFeedback.descriptionTeam' : 'artemisApp.moreFeedback.description') | artemisTranslate }}\r\n                        {{ 'artemisApp.moreFeedback.info' | artemisTranslate }}\r\n                    </p>\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-md-6\">\r\n                <p>\r\n                    @if (exercise.teamMode) {\r\n                        <span\r\n                            [jhiTranslate]=\"complaintType === ComplaintType.MORE_FEEDBACK ? 'artemisApp.moreFeedback.beDescriptiveTeam' : 'artemisApp.complaint.beDescriptiveTeam'\"\r\n                        ></span>\r\n                    }\r\n                    @if (!exercise.teamMode) {\r\n                        <span\r\n                            [jhiTranslate]=\"complaintType === ComplaintType.MORE_FEEDBACK ? 'artemisApp.moreFeedback.beDescriptive' : 'artemisApp.complaint.beDescriptive'\"\r\n                        ></span>\r\n                    }\r\n                </p>\r\n                @if (!examId) {\r\n                    <p jhiTranslate=\"artemisApp.complaint.exclusivityDisclaimer\"></p>\r\n                }\r\n                <div class=\"d-flex flex-column\">\r\n                    <textarea id=\"complainTextArea\" class=\"col-12 px-1\" rows=\"4\" [maxLength]=\"this.maxComplaintTextLimit\" [(ngModel)]=\"complaintText\"> </textarea>\r\n                    <jhi-textarea-counter [maxLength]=\"this.maxComplaintTextLimit\" [content]=\"complaintText\" [visible]=\"true\" />\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-6\">\r\n                        <button\r\n                            id=\"submit-complaint\"\r\n                            class=\"btn btn-primary\"\r\n                            [disabled]=\"!complaintText || complaintTextLength() > this.maxComplaintTextLimit\"\r\n                            (click)=\"createComplaint()\"\r\n                        >\r\n                            {{\r\n                                complaintType === ComplaintType.COMPLAINT\r\n                                    ? ('artemisApp.complaint.submit' | artemisTranslate)\r\n                                    : ('artemisApp.moreFeedback.button' | artemisTranslate)\r\n                            }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTimeAgoPipe } from 'app/shared/pipes/artemis-time-ago.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-complaint-request',\r\n    templateUrl: './complaint-request.component.html',\r\n    imports: [NgbTooltip, TranslateDirective, FormsModule, ArtemisTranslatePipe, ArtemisDatePipe, ArtemisTimeAgoPipe],\r\n})\r\nexport class ComplaintRequestComponent {\r\n    @Input() complaint: Complaint;\r\n    @Input() maxComplaintTextLimit: number;\r\n    readonly ComplaintType = ComplaintType;\r\n}\r\n", "<div>\r\n    <p class=\"mt-4\">\r\n        {{\r\n            complaint.complaintType === ComplaintType.COMPLAINT\r\n                ? ('artemisApp.complaint.alreadySubmittedSubmissionAuthor' | artemisTranslate)\r\n                : ('artemisApp.moreFeedback.alreadySubmittedSubmissionAuthor' | artemisTranslate)\r\n        }}\r\n        <span [ngbTooltip]=\"complaint.submittedTime | artemisDate\">{{ complaint.submittedTime | artemisTimeAgo }}</span>\r\n        @if (complaint.accepted === true) {\r\n            <span\r\n                class=\"badge bg-success\"\r\n                [jhiTranslate]=\"complaint.complaintType === ComplaintType.COMPLAINT ? 'artemisApp.complaint.acceptedLong' : 'artemisApp.moreFeedback.acceptedLong'\"\r\n            ></span>\r\n        }\r\n        @if (complaint.accepted === false) {\r\n            <span class=\"badge bg-danger\" jhiTranslate=\"artemisApp.complaint.rejectedLong\"></span>\r\n        }\r\n    </p>\r\n    <textarea\r\n        id=\"complainTextArea\"\r\n        class=\"col-12 px-1\"\r\n        rows=\"4\"\r\n        [maxLength]=\"maxComplaintTextLimit\"\r\n        [(ngModel)]=\"complaint.complaintText\"\r\n        [readOnly]=\"true\"\r\n        [disabled]=\"true\"\r\n    ></textarea>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTimeAgoPipe } from 'app/shared/pipes/artemis-time-ago.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-complaint-response',\r\n    templateUrl: './complaint-response.component.html',\r\n    imports: [NgbTooltip, FormsModule, ArtemisTranslatePipe, ArtemisDatePipe, ArtemisTimeAgoPipe],\r\n})\r\nexport class ComplaintResponseComponent {\r\n    @Input() complaint: Complaint;\r\n    @Input() maxComplaintResponseTextLimit: number;\r\n    readonly ComplaintType = ComplaintType;\r\n}\r\n", "@if (complaint.accepted !== undefined && complaint.complaintResponse) {\r\n    <div>\r\n        <p class=\"col-12 mt-4\">\r\n            {{\r\n                complaint.complaintType === ComplaintType.COMPLAINT\r\n                    ? ('artemisApp.complaint.responseExists' | artemisTranslate)\r\n                    : ('artemisApp.moreFeedback.responseExists' | artemisTranslate)\r\n            }}\r\n            <span [ngbTooltip]=\"complaint.complaintResponse.submittedTime | artemisDate\">{{ complaint.complaintResponse.submittedTime | artemisTimeAgo }}</span\r\n            >:\r\n        </p>\r\n        <textarea\r\n            id=\"complainResponseTextArea\"\r\n            class=\"col-12 px-1\"\r\n            rows=\"4\"\r\n            [(ngModel)]=\"complaint.complaintResponse.responseText\"\r\n            [readOnly]=\"true\"\r\n            [disabled]=\"true\"\r\n            [maxLength]=\"maxComplaintResponseTextLimit\"\r\n        ></textarea>\r\n    </div>\r\n}\r\n", "import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { Exercise, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { filter } from 'rxjs/operators';\r\nimport dayjs from 'dayjs/esm';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ComplaintsFormComponent } from 'app/complaints/form/complaints-form.component';\r\nimport { ComplaintRequestComponent } from 'app/complaints/request/complaint-request.component';\r\nimport { ComplaintResponseComponent } from 'app/complaints/response/complaint-response.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-complaint-student-view',\r\n    templateUrl: './complaints-student-view.component.html',\r\n    styleUrls: ['../complaints.scss'],\r\n    imports: [TranslateDirective, FaIconComponent, ComplaintsFormComponent, ComplaintRequestComponent, ComplaintResponseComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ComplaintsStudentViewComponent implements OnInit {\r\n    private cdr = inject(ChangeDetectorRef);\r\n    private complaintService = inject(ComplaintService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n    private accountService = inject(AccountService);\r\n    private courseService = inject(CourseManagementService);\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() participation: StudentParticipation;\r\n    @Input() result?: Result;\r\n    @Input() exam: Exam;\r\n    // flag to indicate exam test run. Default set to false.\r\n    @Input() testRun = false;\r\n\r\n    @ViewChild('complaintScrollpoint') complaintScrollpoint: ElementRef;\r\n\r\n    submission: Submission;\r\n    complaint: Complaint;\r\n    course?: Course;\r\n    // Indicates what type of complaint is currently created by the student. Undefined if the student didn't click on a button yet.\r\n    formComplaintType?: ComplaintType;\r\n    // The number of complaints that the student is still allowed to submit in the course.\r\n    remainingNumberOfComplaints = 0;\r\n    isCorrectUserToFileAction = false;\r\n    isExamMode: boolean;\r\n    showSection = false;\r\n    timeOfFeedbackRequestValid = false;\r\n    timeOfComplaintValid = false;\r\n\r\n    ComplaintType = ComplaintType;\r\n\r\n    // Icons\r\n    faInfoCircle = faInfoCircle;\r\n\r\n    /**\r\n     * Loads the number of allowed complaints and feedback requests\r\n     */\r\n    ngOnInit(): void {\r\n        this.course = getCourseFromExercise(this.exercise);\r\n        this.isExamMode = this.exam != undefined;\r\n        if (this.participation && this.result?.completionDate) {\r\n            // Make sure results and participation are connected\r\n            this.result.participation = this.participation;\r\n\r\n            if (this.participation.submissions && this.participation.submissions.length > 0) {\r\n                this.submission = this.participation.submissions.sort((a, b) => b.id! - a.id!)[0];\r\n            }\r\n            // for course exercises we track the number of allowed complaints\r\n            if (this.course?.complaintsEnabled) {\r\n                this.courseService.getNumberOfAllowedComplaintsInCourse(this.course!.id!, this.exercise.teamMode).subscribe((allowedComplaints: number) => {\r\n                    this.remainingNumberOfComplaints = allowedComplaints;\r\n                });\r\n            }\r\n            this.loadPotentialComplaint();\r\n            this.accountService.identity().then((user) => {\r\n                if (user?.id) {\r\n                    if (this.participation?.student) {\r\n                        this.isCorrectUserToFileAction = this.participation.student.id === user.id;\r\n                    } else if (this.participation.team?.students) {\r\n                        this.isCorrectUserToFileAction = !!this.participation.team.students.find((student) => student.id === user.id);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.timeOfFeedbackRequestValid = this.isTimeOfFeedbackRequestValid();\r\n            this.timeOfComplaintValid = this.isTimeOfComplaintValid();\r\n            this.showSection = this.getSectionVisibility();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the complaint if a complaint and a valid result exists\r\n     */\r\n    loadPotentialComplaint(): void {\r\n        this.complaintService\r\n            .findBySubmissionId(this.submission.id!)\r\n            .pipe(filter((res) => !!res.body))\r\n            .subscribe((res: HttpResponse<Complaint>) => {\r\n                this.complaint = res.body!;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Determines whether to show the section\r\n     */\r\n    private getSectionVisibility(): boolean {\r\n        if (this.isExamMode) {\r\n            return this.isWithinExamReviewPeriod();\r\n        } else {\r\n            return !!(this.course?.complaintsEnabled || this.course?.requestMoreFeedbackEnabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the student is allowed to submit a complaint or not for exam and course exercises.\r\n     */\r\n    private isTimeOfComplaintValid(): boolean {\r\n        if (!this.isExamMode) {\r\n            if (this.course?.maxComplaintTimeDays) {\r\n                const dueDate = ComplaintService.getIndividualComplaintDueDate(this.exercise, this.course.maxComplaintTimeDays, this.result, this.participation);\r\n                return !!dueDate && dayjs().isBefore(dueDate);\r\n            }\r\n            return false;\r\n        }\r\n        return this.isWithinExamReviewPeriod();\r\n    }\r\n\r\n    /**\r\n     * Checks whether the student is allowed to submit a more feedback request. This is only possible for course exercises.\r\n     */\r\n    private isTimeOfFeedbackRequestValid(): boolean {\r\n        if (!this.isExamMode && this.course?.maxRequestMoreFeedbackTimeDays) {\r\n            const dueDate = ComplaintService.getIndividualComplaintDueDate(this.exercise, this.course.maxRequestMoreFeedbackTimeDays, this.result, this.participation);\r\n            return !!dueDate && dayjs().isBefore(dueDate);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A guard function used to indicate whether complaint submissions are valid.\r\n     * These are only allowed if they are submitted within the student review period.\r\n     */\r\n    private isWithinExamReviewPeriod(): boolean {\r\n        if (this.testRun) {\r\n            return true;\r\n        } else if (this.exam.examStudentReviewStart && this.exam.examStudentReviewEnd) {\r\n            return this.serverDateService.now().isBetween(dayjs(this.exam.examStudentReviewStart), dayjs(this.exam.examStudentReviewEnd));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Function to set complaint type (which opens the complaint form) and scrolls to the complaint form\r\n     */\r\n    openComplaintForm(complainType: ComplaintType): void {\r\n        this.formComplaintType = complainType;\r\n        this.cdr.detectChanges(); // Wait for the view to update\r\n        this.scrollToComplaint();\r\n    }\r\n\r\n    /**\r\n     * Function to scroll to the complaint form\r\n     */\r\n    private scrollToComplaint(): void {\r\n        this.complaintScrollpoint?.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'end' });\r\n    }\r\n}\r\n", "@if (complaint || showSection) {\r\n    <div>\r\n        @if (course?.complaintsEnabled ?? false) {\r\n            <p>\r\n                @if (!isExamMode && remainingNumberOfComplaints >= 0) {\r\n                    <span\r\n                        [jhiTranslate]=\"'artemisApp.complaint.' + (exercise.teamMode ? 'descriptionTeamExtended' : 'descriptionExtended')\"\r\n                        [translateValues]=\"{ maxComplaintNumber: course?.maxComplaints ?? 0, allowedComplaints: remainingNumberOfComplaints }\"\r\n                    ></span>\r\n                }\r\n                @if (isExamMode) {\r\n                    <span [jhiTranslate]=\"'artemisApp.complaint.descriptionExam'\"></span>\r\n                }\r\n                @if (!isExamMode) {\r\n                    <fa-icon [icon]=\"faInfoCircle\" title=\"{{ 'artemisApp.complaint.info' | artemisTranslate }}\" class=\"info-icon\" />\r\n                }\r\n            </p>\r\n        }\r\n\r\n        @if (isCorrectUserToFileAction && !complaint) {\r\n            <div class=\"mt-4\">\r\n                @if (isExamMode || (course?.maxComplaints && course!.maxComplaints! > 0)) {\r\n                    <button\r\n                        id=\"complain\"\r\n                        class=\"btn btn-primary\"\r\n                        [class.not-allowed]=\"(!isExamMode && remainingNumberOfComplaints === 0) || !timeOfComplaintValid\"\r\n                        (click)=\"openComplaintForm(ComplaintType.COMPLAINT)\"\r\n                        [disabled]=\"(!isExamMode && remainingNumberOfComplaints === 0) || !timeOfComplaintValid\"\r\n                        title=\"{{\r\n                            (!isExamMode && remainingNumberOfComplaints === 0) || !timeOfComplaintValid\r\n                                ? ('artemisApp.complaint.complaintNotAllowedTooltip' | artemisTranslate)\r\n                                : ''\r\n                        }}\"\r\n                        jhiTranslate=\"artemisApp.complaint.moreInfo\"\r\n                    ></button>\r\n                }\r\n                @if (!isExamMode && course?.requestMoreFeedbackEnabled) {\r\n                    <button\r\n                        id=\"more-feedback\"\r\n                        class=\"btn btn-primary ms-1\"\r\n                        [class.not-allowed]=\"!timeOfFeedbackRequestValid\"\r\n                        (click)=\"openComplaintForm(ComplaintType.MORE_FEEDBACK)\"\r\n                        [disabled]=\"!timeOfFeedbackRequestValid\"\r\n                        title=\"{{ !timeOfFeedbackRequestValid ? ('artemisApp.moreFeedback.notAllowedTooltip' | artemisTranslate) : '' }}\"\r\n                        jhiTranslate=\"artemisApp.moreFeedback.button\"\r\n                    ></button>\r\n                }\r\n            </div>\r\n        }\r\n        @if (!complaint && formComplaintType) {\r\n            <div class=\"row\">\r\n                <jhi-complaint-form\r\n                    class=\"flex-grow-1\"\r\n                    [exercise]=\"exercise\"\r\n                    [resultId]=\"result!.id!\"\r\n                    [examId]=\"exam?.id!\"\r\n                    [complaintType]=\"formComplaintType\"\r\n                    [isCurrentUserSubmissionAuthor]=\"isCorrectUserToFileAction\"\r\n                    (onSubmit)=\"loadPotentialComplaint()\"\r\n                />\r\n            </div>\r\n        }\r\n        <div #complaintScrollpoint></div>\r\n        @if (complaint) {\r\n            <div class=\"row\">\r\n                <jhi-complaint-request class=\"col-12 col-md-6\" [complaint]=\"complaint\" [maxComplaintTextLimit]=\"course?.maxComplaintTextLimit!\" />\r\n                <jhi-complaint-response class=\"col-12 col-md-6\" [complaint]=\"complaint\" [maxComplaintResponseTextLimit]=\"course?.maxComplaintResponseTextLimit!\" />\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["RatingComponent", "ratingService", "inject", "RatingService", "accountService", "AccountService", "rating", "disableRating", "previousResultId", "result", "ngOnInit", "loadRating", "ngOnChanges", "changes", "currentValue", "id", "participation", "isOwnerOfParticipation", "getRating", "subscribe", "onRate", "event", "oldRating", "newValue", "observable", "updateRating", "createRating", "add", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275classProp", "\u0275\u0275property", "\u0275\u0275advance", "TranslateDirective", "StarRatingComponent", "styles", "ComplaintRequestDTO", "resultId", "complaintText", "complaintType", "examId", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "ctx_r1", "exercise", "teamMode", "\u0275\u0275element", "\u0275\u0275property", "complaintType", "ComplaintType", "MORE_FEEDBACK", "\u0275\u0275template", "ComplaintsFormComponent_Conditional_0_Conditional_9_Template", "ComplaintsFormComponent_Conditional_0_Conditional_18_Template", "ComplaintsFormComponent_Conditional_0_Conditional_19_Template", "ComplaintsFormComponent_Conditional_0_Conditional_21_Template", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "complaintText", "\u0275\u0275resetView", "\u0275\u0275listener", "createComplaint", "COMPLAINT", "\u0275\u0275conditional", "examId", "maxComplaintTextLimit", "\u0275\u0275twoWayProperty", "complaintTextLength", "\u0275\u0275textInterpolate1", "ComplaintsFormComponent", "complaintService", "inject", "ComplaintService", "alertService", "AlertService", "resultId", "isCurrentUserSubmissionAuthor", "onSubmit", "EventEmitter", "maxComplaintsPerCourse", "course", "ngOnInit", "getCourseFromExercise", "maxTeamComplaints", "maxComplaints", "Math", "max", "complaintRequest", "ComplaintRequestDTO", "undefined", "length", "error", "create", "subscribe", "next", "emit", "err", "errorKey", "maxComplaintNumber", "onError", "document", "querySelector", "value", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ComplaintsFormComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ArtemisTranslatePipe", "TextareaCounterComponent", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "complaint", "complaintType", "ComplaintType", "COMPLAINT", "ComplaintRequestComponent", "maxComplaintTextLimit", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "ComplaintRequestComponent_Conditional_11_Template", "ComplaintRequestComponent_Conditional_12_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "complaintText", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "submittedTime", "\u0275\u0275textInterpolate", "\u0275\u0275conditional", "accepted", "\u0275\u0275twoWayProperty", "NgbTooltip", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ArtemisTranslatePipe", "ArtemisDatePipe", "ArtemisTimeAgoPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "complaint", "complaintResponse", "responseText", "\u0275\u0275resetView", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "complaintType", "ComplaintType", "COMPLAINT", "\u0275\u0275pipeBind1", "\u0275\u0275property", "submittedTime", "\u0275\u0275textInterpolate", "\u0275\u0275twoWayProperty", "maxComplaintResponseTextLimit", "ComplaintResponseComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ComplaintResponseComponent_Conditional_0_Template", "\u0275\u0275conditional", "accepted", "undefined", "NgbTooltip", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ArtemisTranslatePipe", "ArtemisDatePipe", "ArtemisTimeAgoPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "teamMode", "\u0275\u0275pureFunction2", "_c1", "tmp_5_0", "course", "maxComplaints", "undefined", "remainingNumberOfComplaints", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faInfoCircle", "\u0275\u0275elementStart", "\u0275\u0275template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_3_Conditional_3_Template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_3_Conditional_4_Template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_3_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "isExamMode", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openComplaintForm", "ComplaintType", "COMPLAINT", "\u0275\u0275classProp", "timeOfComplaintValid", "_r3", "MORE_FEEDBACK", "timeOfFeedbackRequestValid", "ComplaintsStudentViewComponent_Conditional_0_Conditional_4_Conditional_3_Template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_4_Conditional_4_Template", "requestMoreFeedbackEnabled", "_r4", "loadPotentialComplaint", "result", "id", "exam", "formComplaintType", "isCorrectUserToFileAction", "complaint", "maxComplaintTextLimit", "maxComplaintResponseTextLimit", "ComplaintsStudentViewComponent_Conditional_0_Conditional_3_Template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_4_Template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_5_Template", "ComplaintsStudentViewComponent_Conditional_0_Conditional_9_Template", "tmp_2_0", "complaintsEnabled", "ComplaintsStudentViewComponent", "cdr", "inject", "ChangeDetectorRef", "complaintService", "ComplaintService", "serverDateService", "ArtemisServerDateService", "accountService", "AccountService", "courseService", "CourseManagementService", "participation", "testRun", "complaintScrollpoint", "submission", "showSection", "ngOnInit", "getCourseFromExercise", "completionDate", "submissions", "length", "sort", "a", "b", "getNumberOfAllowedComplaintsInCourse", "subscribe", "allowedComplaints", "identity", "then", "user", "student", "team", "students", "find", "isTimeOfFeedbackRequestValid", "isTimeOfComplaintValid", "getSectionVisibility", "findBySubmissionId", "pipe", "filter", "res", "body", "isWithinExamReviewPeriod", "maxComplaintTimeDays", "dueDate", "getIndividualComplaintDueDate", "dayjs", "isBefore", "maxRequestMoreFeedbackTimeDays", "examStudentReviewStart", "examStudentReviewEnd", "now", "isBetween", "complainType", "detectChanges", "scrollToComplaint", "nativeElement", "scrollIntoView", "behavior", "block", "selectors", "viewQuery", "rf", "ctx", "ComplaintsStudentViewComponent_Conditional_0_Template", "TranslateDirective", "FaIconComponent", "ComplaintsFormComponent", "ComplaintRequestComponent", "ComplaintResponseComponent", "ArtemisTranslatePipe", "styles"]
}
