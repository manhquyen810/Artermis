{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/competency.model.ts"],
  "sourcesContent": ["import dayjs from 'dayjs/esm';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { LectureUnit } from 'app/entities/lecture-unit/lectureUnit.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faBrain, faComments, faCubesStacked, faMagnifyingGlass, faPenFancy, faPlusMinus, faQuestion } from '@fortawesome/free-solid-svg-icons';\r\nimport { StandardizedCompetency } from 'app/entities/competency/standardized-competency.model';\r\n\r\n/**\r\n * The available competency types (based on Bloom's Taxonomy)\r\n */\r\nexport enum CompetencyTaxonomy {\r\n    REMEMBER = 'REMEMBER',\r\n    UNDERSTAND = 'UNDERSTAND',\r\n    APPLY = 'APPLY',\r\n    ANALYZE = 'ANALYZE',\r\n    EVALUATE = 'EVALUATE',\r\n    CREATE = 'CREATE',\r\n}\r\n\r\nexport enum CompetencyRelationType {\r\n    ASSUMES = 'ASSUMES',\r\n    EXTENDS = 'EXTENDS',\r\n    MATCHES = 'MATCHES',\r\n}\r\n\r\nexport enum CompetencyRelationError {\r\n    CIRCULAR = 'CIRCULAR',\r\n    SELF = 'SELF',\r\n    EXISTING = 'EXISTING',\r\n}\r\n\r\nexport enum CourseCompetencyValidators {\r\n    TITLE_MAX = 255,\r\n    DESCRIPTION_MAX = 10000,\r\n    MASTERY_THRESHOLD_MIN = 0,\r\n    MASTERY_THRESHOLD_MAX = 100,\r\n}\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with the ones defined in CourseCompetency.java\r\nexport enum CourseCompetencyType {\r\n    COMPETENCY = 'competency',\r\n    PREREQUISITE = 'prerequisite',\r\n}\r\n\r\nexport const DEFAULT_MASTERY_THRESHOLD = 100;\r\n\r\nexport const HIGH_COMPETENCY_LINK_WEIGHT = 1;\r\nexport const MEDIUM_COMPETENCY_LINK_WEIGHT = 0.5;\r\nexport const LOW_COMPETENCY_LINK_WEIGHT = 0.25;\r\nexport const LOW_COMPETENCY_LINK_WEIGHT_CUT_OFF = 0.375; // halfway between low and medium\r\nexport const MEDIUM_COMPETENCY_LINK_WEIGHT_CUT_OFF = 0.75; // halfway between medium and high\r\n\r\nexport abstract class BaseCompetency implements BaseEntity {\r\n    id?: number;\r\n    title?: string;\r\n    description?: string;\r\n    taxonomy?: CompetencyTaxonomy;\r\n}\r\n\r\nexport interface UpdateCourseCompetencyRelationDTO {\r\n    newRelationType: CompetencyRelationType;\r\n}\r\n\r\nexport abstract class CourseCompetency extends BaseCompetency {\r\n    softDueDate?: dayjs.Dayjs;\r\n    masteryThreshold?: number;\r\n    optional?: boolean;\r\n    linkedStandardizedCompetency?: StandardizedCompetency;\r\n    exerciseLinks?: CompetencyExerciseLink[];\r\n    lectureUnitLinks?: CompetencyLectureUnitLink[];\r\n    userProgress?: CompetencyProgress[];\r\n    courseProgress?: CourseCompetencyProgress;\r\n    course?: Course;\r\n    linkedCourseCompetency?: CourseCompetency;\r\n\r\n    public type?: CourseCompetencyType;\r\n\r\n    protected constructor(type: CourseCompetencyType) {\r\n        super();\r\n        this.type = type;\r\n        this.masteryThreshold = DEFAULT_MASTERY_THRESHOLD;\r\n    }\r\n}\r\n\r\nexport class Competency extends CourseCompetency {\r\n    constructor() {\r\n        super(CourseCompetencyType.COMPETENCY);\r\n    }\r\n}\r\n\r\nexport class CompetencyLearningObjectLink {\r\n    competency?: CourseCompetency;\r\n    weight: number;\r\n\r\n    constructor(competency: CourseCompetency | undefined, weight: number) {\r\n        this.competency = competency;\r\n        this.weight = weight;\r\n    }\r\n}\r\n\r\nexport class CompetencyExerciseLink extends CompetencyLearningObjectLink {\r\n    exercise?: Exercise;\r\n\r\n    constructor(competency: CourseCompetency | undefined, exercise: Exercise | undefined, weight: number) {\r\n        super(competency, weight);\r\n        this.exercise = exercise;\r\n    }\r\n}\r\n\r\nexport class CompetencyLectureUnitLink extends CompetencyLearningObjectLink {\r\n    lectureUnit?: LectureUnit;\r\n\r\n    constructor(competency: CourseCompetency | undefined, lectureUnit: LectureUnit | undefined, weight: number) {\r\n        super(competency, weight);\r\n        this.lectureUnit = lectureUnit;\r\n    }\r\n}\r\n\r\nexport class CompetencyJol {\r\n    competencyId: number;\r\n    jolValue: number;\r\n    judgementTime: string;\r\n    competencyProgress: number;\r\n    competencyConfidence: number;\r\n\r\n    static shouldPromptForJol(competency: Competency, progress: CompetencyProgress | undefined, courseCompetencies: Competency[]): boolean {\r\n        const currentDate = dayjs();\r\n        const softDueDateMinusOneDay = competency.softDueDate?.subtract(1, 'day');\r\n        const competencyProgress = progress?.progress ?? 0;\r\n\r\n        // Precondition: Student has at least some progress on the competency\r\n        if (competencyProgress === undefined || competencyProgress === 0) {\r\n            return false;\r\n        }\r\n\r\n        // Condition 1: Current Date >= Competency Soft Due Date - 1 Days && Competency Progress >= 20%\r\n        if (softDueDateMinusOneDay && currentDate.isAfter(softDueDateMinusOneDay) && competencyProgress >= 20) {\r\n            return true;\r\n        }\r\n\r\n        // Filter previous competencies (those with soft due date in the past)\r\n        const previousCompetencies = courseCompetencies.filter((c) => c.softDueDate && c.softDueDate.isBefore(currentDate));\r\n        if (previousCompetencies.length === 0) {\r\n            if (softDueDateMinusOneDay) {\r\n                return false;\r\n            } else {\r\n                return competencyProgress >= 20;\r\n            }\r\n        }\r\n\r\n        // Calculate the average progress of all previous competencies\r\n        const totalPreviousProgress = previousCompetencies.reduce((sum, c) => {\r\n            const progress = c.userProgress?.first()?.progress ?? 0;\r\n            return sum + progress;\r\n        }, 0);\r\n        const avgPreviousProgress = totalPreviousProgress / previousCompetencies.length;\r\n\r\n        // Condition 2: Competency Progress >= 0.8 * Avg. Progress of all previous competencies\r\n        return competencyProgress >= 0.8 * avgPreviousProgress;\r\n    }\r\n}\r\n\r\nexport interface CompetencyImportResponseDTO extends BaseEntity {\r\n    title?: string;\r\n    description?: string;\r\n    softDueDate?: dayjs.Dayjs;\r\n    taxonomy?: CompetencyTaxonomy;\r\n    masteryThreshold?: number;\r\n    optional?: boolean;\r\n    courseId?: number;\r\n    linkedStandardizedCompetencyId?: number;\r\n}\r\n\r\nexport enum ConfidenceReason {\r\n    NO_REASON = 'NO_REASON',\r\n    RECENT_SCORES_LOWER = 'RECENT_SCORES_LOWER',\r\n    RECENT_SCORES_HIGHER = 'RECENT_SCORES_HIGHER',\r\n    MORE_EASY_POINTS = 'MORE_EASY_POINTS',\r\n    MORE_HARD_POINTS = 'MORE_HARD_POINTS',\r\n    QUICKLY_SOLVED_EXERCISES = 'QUICKLY_SOLVED_EXERCISES',\r\n    MORE_LOW_WEIGHTED_EXERCISES = 'MORE_LOW_WEIGHTED_EXERCISES',\r\n    MORE_HIGH_WEIGHTED_EXERCISES = 'MORE_HIGH_WEIGHTED_EXERCISES',\r\n}\r\n\r\nexport class CompetencyProgress {\r\n    public progress?: number;\r\n    public confidence?: number;\r\n    public confidenceReason?: ConfidenceReason;\r\n}\r\n\r\nexport class CourseCompetencyProgress {\r\n    competencyId?: number;\r\n    numberOfStudents?: number;\r\n    numberOfMasteredStudents?: number;\r\n    averageStudentScore?: number;\r\n}\r\n\r\nexport class CompetencyRelation implements BaseEntity {\r\n    public id?: number;\r\n    public tailCompetency?: CourseCompetency;\r\n    public headCompetency?: CourseCompetency;\r\n    public type?: CompetencyRelationType;\r\n}\r\n\r\nexport interface CourseCompetencyImportOptionsDTO {\r\n    competencyIds: number[];\r\n    sourceCourseId?: number;\r\n    importRelations: boolean;\r\n    importExercises: boolean;\r\n    importLectures: boolean;\r\n    referenceDate?: dayjs.Dayjs;\r\n    isReleaseDate?: boolean;\r\n}\r\n\r\nexport class CompetencyRelationDTO implements BaseEntity {\r\n    id?: number;\r\n    tailCompetencyId?: number;\r\n    headCompetencyId?: number;\r\n    relationType?: CompetencyRelationType;\r\n}\r\n\r\n/**\r\n * Converts a CompetencyRelationDTO to a CompetencyRelation\r\n * @param competencyRelationDTO\r\n */\r\nexport function dtoToCompetencyRelation(competencyRelationDTO: CompetencyRelationDTO) {\r\n    const relation: CompetencyRelation = {\r\n        id: competencyRelationDTO.id,\r\n        tailCompetency: { id: competencyRelationDTO.tailCompetencyId },\r\n        headCompetency: { id: competencyRelationDTO.headCompetencyId },\r\n        type: competencyRelationDTO.relationType,\r\n    };\r\n    return relation;\r\n}\r\n\r\nexport class CompetencyWithTailRelationDTO {\r\n    competency?: CourseCompetency;\r\n    tailRelations?: CompetencyRelationDTO[];\r\n}\r\n\r\nexport function getIcon(competencyTaxonomy?: CompetencyTaxonomy): IconProp {\r\n    if (!competencyTaxonomy) {\r\n        return faQuestion as IconProp;\r\n    }\r\n\r\n    const icons = {\r\n        [CompetencyTaxonomy.REMEMBER]: faBrain,\r\n        [CompetencyTaxonomy.UNDERSTAND]: faComments,\r\n        [CompetencyTaxonomy.APPLY]: faPenFancy,\r\n        [CompetencyTaxonomy.ANALYZE]: faMagnifyingGlass,\r\n        [CompetencyTaxonomy.EVALUATE]: faPlusMinus,\r\n        [CompetencyTaxonomy.CREATE]: faCubesStacked,\r\n    };\r\n\r\n    return icons[competencyTaxonomy] as IconProp;\r\n}\r\n\r\n/**\r\n * The progress depends on the amount of completed lecture units and the achieved scores in the exercises.\r\n * @param competencyProgress The progress in the competency\r\n */\r\nexport function getProgress(competencyProgress: CompetencyProgress | undefined): number {\r\n    return Math.round(competencyProgress?.progress ?? 0);\r\n}\r\n\r\n/**\r\n * The confidence is a factor for the progress, normally near 1. It depends on different heuristics and determines if the mastery is lower/higher than the progress.\r\n * @param competencyProgress The progress in the competency\r\n */\r\nexport function getConfidence(competencyProgress: CompetencyProgress | undefined): number {\r\n    return competencyProgress?.confidence ?? 1;\r\n}\r\n\r\n/**\r\n * The mastery is the final value that is shown to the user. It is the product of the progress and the confidence.\r\n * @param competencyProgress The progress in the competency\r\n */\r\nexport function getMastery(competencyProgress: CompetencyProgress | undefined): number {\r\n    // clamp the value between 0 and 100\r\n    return Math.min(100, Math.max(0, Math.round(getProgress(competencyProgress) * getConfidence(competencyProgress))));\r\n}\r\n\r\n/**\r\n * Simple comparator for sorting competencies by their soft due date\r\n * @param a The first competency\r\n * @param b The second competency\r\n */\r\nexport function compareSoftDueDate(a: CourseCompetency, b: CourseCompetency): number {\r\n    if (a.softDueDate) {\r\n        if (b.softDueDate) {\r\n            if (a.softDueDate.isSame(b.softDueDate)) {\r\n                return 0;\r\n            }\r\n            return a.softDueDate.isBefore(b.softDueDate) ? -1 : 1;\r\n        }\r\n        return -1;\r\n    }\r\n    if (b.softDueDate) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n"],
  "mappings": "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",
  "names": ["CompetencyTaxonomy", "CompetencyRelationType", "CourseCompetencyValidators", "CourseCompetencyType", "DEFAULT_MASTERY_THRESHOLD", "HIGH_COMPETENCY_LINK_WEIGHT", "MEDIUM_COMPETENCY_LINK_WEIGHT", "LOW_COMPETENCY_LINK_WEIGHT", "LOW_COMPETENCY_LINK_WEIGHT_CUT_OFF", "MEDIUM_COMPETENCY_LINK_WEIGHT_CUT_OFF", "BaseCompetency", "id", "title", "description", "taxonomy", "CourseCompetency", "softDueDate", "masteryThreshold", "optional", "linkedStandardizedCompetency", "exerciseLinks", "lectureUnitLinks", "userProgress", "courseProgress", "course", "linkedCourseCompetency", "type", "constructor", "Competency", "COMPETENCY", "CompetencyLearningObjectLink", "competency", "weight", "CompetencyLectureUnitLink", "CompetencyLearningObjectLink", "lectureUnit", "constructor", "competency", "weight", "CompetencyJol", "competencyId", "jolValue", "judgementTime", "competencyProgress", "competencyConfidence", "shouldPromptForJol", "progress", "courseCompetencies", "currentDate", "dayjs", "softDueDateMinusOneDay", "softDueDate", "subtract", "undefined", "isAfter", "previousCompetencies", "filter", "c", "isBefore", "length", "avgPreviousProgress", "reduce", "sum", "userProgress", "first", "ConfidenceReason", "getIcon", "competencyTaxonomy", "CompetencyTaxonomy", "REMEMBER", "faBrain", "UNDERSTAND", "faComments", "APPLY", "faPenFancy", "ANALYZE", "faMagnifyingGlass", "EVALUATE", "faPlusMinus", "CREATE", "faCubesStacked", "faQuestion", "getProgress", "competencyProgress", "Math", "round", "progress", "getConfidence", "confidence", "getMastery", "min", "max", "compareSoftDueDate", "a", "b", "softDueDate", "isSame", "isBefore"]
}
