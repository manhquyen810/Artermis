{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise-update.component.ts", "src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise-update.component.html"],
  "sourcesContent": ["import { AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { DifficultyPickerComponent } from 'app/exercises/shared/difficulty-picker/difficulty-picker.component';\r\nimport { ExerciseFeedbackSuggestionOptionsComponent } from 'app/exercises/shared/feedback-suggestion/exercise-feedback-suggestion-options.component';\r\nimport { IncludedInOverallScorePickerComponent } from 'app/exercises/shared/included-in-overall-score-picker/included-in-overall-score-picker.component';\r\nimport { PresentationScoreComponent } from 'app/exercises/shared/presentation-score/presentation-score.component';\r\nimport { GradingInstructionsDetailsComponent } from 'app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component';\r\nimport { TextExerciseService } from './text-exercise.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { ExerciseMode, IncludedInOverallScore, resetForImport } from 'app/entities/exercise.model';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\nimport { FormsModule, NgForm, NgModel } from '@angular/forms';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { ExerciseUpdateWarningService } from 'app/exercises/shared/exercise-update-warning/exercise-update-warning.service';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { EditType, SaveExerciseCommand } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { AthenaService } from 'app/assessment/athena.service';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { scrollToTopOfPage } from 'app/shared/util/utils';\r\nimport { loadCourseExerciseCategories } from 'app/exercises/shared/course-exercises/course-utils';\r\nimport { ExerciseTitleChannelNameComponent } from 'app/exercises/shared/exercise-title-channel-name/exercise-title-channel-name.component';\r\nimport { FormSectionStatus, FormStatusBarComponent } from 'app/forms/form-status-bar/form-status-bar.component';\r\nimport { ExerciseUpdatePlagiarismComponent } from 'app/exercises/shared/plagiarism/exercise-update-plagiarism/exercise-update-plagiarism.component';\r\nimport { TeamConfigFormGroupComponent } from 'app/exercises/shared/team-config-form-group/team-config-form-group.component';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { FormulaAction } from 'app/shared/monaco-editor/model/actions/formula.action';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { CategorySelectorComponent } from 'app/shared/category-selector/category-selector.component';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { CompetencySelectionComponent } from 'app/shared/competency-selection/competency-selection.component';\r\nimport { CustomMinDirective } from 'app/shared/validators/custom-min-validator.directive';\r\nimport { CustomMaxDirective } from 'app/shared/validators/custom-max-validator.directive';\r\nimport { FormFooterComponent } from 'app/forms/form-footer/form-footer.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-text-exercise-update',\r\n    templateUrl: './text-exercise-update.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        FormsModule,\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        FormStatusBarComponent,\r\n        ExerciseTitleChannelNameComponent,\r\n        HelpIconComponent,\r\n        CategorySelectorComponent,\r\n        DifficultyPickerComponent,\r\n        TeamConfigFormGroupComponent,\r\n        MarkdownEditorMonacoComponent,\r\n        CompetencySelectionComponent,\r\n        FormDateTimePickerComponent,\r\n        IncludedInOverallScorePickerComponent,\r\n        CustomMinDirective,\r\n        CustomMaxDirective,\r\n        ExerciseFeedbackSuggestionOptionsComponent,\r\n        ExerciseUpdatePlagiarismComponent,\r\n        PresentationScoreComponent,\r\n        GradingInstructionsDetailsComponent,\r\n        FormFooterComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class TextExerciseUpdateComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private textExerciseService = inject(TextExerciseService);\r\n    private modalService = inject(NgbModal);\r\n    private popupService = inject(ExerciseUpdateWarningService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n    private courseService = inject(CourseManagementService);\r\n    private eventManager = inject(EventManager);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private athenaService = inject(AthenaService);\r\n\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    readonly documentationType: DocumentationType = 'Text';\r\n\r\n    @ViewChild('editForm') editForm: NgForm;\r\n    @ViewChild('bonusPoints') bonusPoints: NgModel;\r\n    @ViewChild('points') points: NgModel;\r\n    @ViewChild('solutionPublicationDate') solutionPublicationDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('releaseDate') releaseDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('startDate') startDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('dueDate') dueDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('assessmentDueDate') assessmentDateField?: FormDateTimePickerComponent;\r\n    @ViewChild(ExerciseTitleChannelNameComponent) exerciseTitleChannelNameComponent: ExerciseTitleChannelNameComponent;\r\n    @ViewChild(ExerciseUpdatePlagiarismComponent) exerciseUpdatePlagiarismComponent?: ExerciseUpdatePlagiarismComponent;\r\n    @ViewChild(TeamConfigFormGroupComponent) teamConfigFormGroupComponent: TeamConfigFormGroupComponent;\r\n\r\n    examCourseId?: number;\r\n    isExamMode: boolean;\r\n    isImport = false;\r\n    AssessmentType = AssessmentType;\r\n    isAthenaEnabled$: Observable<boolean> | undefined;\r\n\r\n    textExercise: TextExercise;\r\n    backupExercise: TextExercise;\r\n    isSaving: boolean;\r\n    exerciseCategories: ExerciseCategory[];\r\n    existingCategories: ExerciseCategory[];\r\n    notificationText?: string;\r\n\r\n    domainActionsProblemStatement = [new FormulaAction()];\r\n    domainActionsExampleSolution = [new FormulaAction()];\r\n\r\n    formSectionStatus: FormSectionStatus[];\r\n\r\n    // subcriptions\r\n    titleChannelNameComponentSubscription?: Subscription;\r\n    pointsSubscription?: Subscription;\r\n    bonusPointsSubscription?: Subscription;\r\n    plagiarismSubscription?: Subscription;\r\n    teamSubscription?: Subscription;\r\n\r\n    get editType(): EditType {\r\n        if (this.isImport) {\r\n            return EditType.IMPORT;\r\n        }\r\n\r\n        return this.textExercise.id == undefined ? EditType.CREATE : EditType.UPDATE;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.titleChannelNameComponentSubscription = this.exerciseTitleChannelNameComponent.titleChannelNameComponent.formValidChanges.subscribe(() =>\r\n            this.calculateFormSectionStatus(),\r\n        );\r\n        this.pointsSubscription = this.points?.valueChanges?.subscribe(() => this.calculateFormSectionStatus());\r\n        this.bonusPointsSubscription = this.bonusPoints?.valueChanges?.subscribe(() => this.calculateFormSectionStatus());\r\n        this.plagiarismSubscription = this.exerciseUpdatePlagiarismComponent?.formValidChanges.subscribe(() => this.calculateFormSectionStatus());\r\n        this.teamSubscription = this.teamConfigFormGroupComponent.formValidChanges.subscribe(() => this.calculateFormSectionStatus());\r\n    }\r\n\r\n    /**\r\n     * Initializes all relevant data for creating or editing text exercise\r\n     */\r\n    ngOnInit() {\r\n        scrollToTopOfPage();\r\n\r\n        // Get the textExercise\r\n        this.activatedRoute.data.subscribe(({ textExercise }) => {\r\n            this.textExercise = textExercise;\r\n\r\n            this.backupExercise = cloneDeep(this.textExercise);\r\n            this.examCourseId = this.textExercise.course?.id || this.textExercise.exerciseGroup?.exam?.course?.id;\r\n        });\r\n\r\n        this.activatedRoute.url\r\n            .pipe(\r\n                tap(\r\n                    (segments) =>\r\n                        (this.isImport = segments.some((segment) => segment.path === 'import', (this.isExamMode = segments.some((segment) => segment.path === 'exercise-groups')))),\r\n                ),\r\n                switchMap(() => this.activatedRoute.params),\r\n                tap((params) => {\r\n                    if (!this.isExamMode) {\r\n                        this.exerciseCategories = this.textExercise.categories || [];\r\n                        if (this.examCourseId) {\r\n                            this.loadCourseExerciseCategories(this.examCourseId);\r\n                        }\r\n                    } else {\r\n                        // Lock individual mode for exam exercises\r\n                        this.textExercise.mode = ExerciseMode.INDIVIDUAL;\r\n                        this.textExercise.teamAssignmentConfig = undefined;\r\n                        this.textExercise.teamMode = false;\r\n                        // Exam exercises cannot be not included into the total score\r\n                        if (this.textExercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED) {\r\n                            this.textExercise.includedInOverallScore = IncludedInOverallScore.INCLUDED_COMPLETELY;\r\n                        }\r\n                    }\r\n                    if (this.isImport) {\r\n                        const courseId = params['courseId'];\r\n\r\n                        if (this.isExamMode) {\r\n                            // The target exerciseId where we want to import into\r\n                            const exerciseGroupId = params['exerciseGroupId'];\r\n                            const examId = params['examId'];\r\n\r\n                            this.exerciseGroupService.find(courseId, examId, exerciseGroupId).subscribe((res) => (this.textExercise.exerciseGroup = res.body!));\r\n                            // We reference exam exercises by their exercise group, not their course. Having both would lead to conflicts on the server\r\n                            this.textExercise.course = undefined;\r\n                        } else {\r\n                            // The target course where we want to import into\r\n                            this.courseService.find(courseId).subscribe((res) => (this.textExercise.course = res.body!));\r\n                            // We reference normal exercises by their course, having both would lead to conflicts on the server\r\n                            this.textExercise.exerciseGroup = undefined;\r\n                        }\r\n\r\n                        this.loadCourseExerciseCategories(courseId);\r\n                        resetForImport(this.textExercise);\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe();\r\n\r\n        this.isAthenaEnabled$ = this.athenaService.isEnabled();\r\n\r\n        this.isSaving = false;\r\n        this.notificationText = undefined;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.titleChannelNameComponentSubscription?.unsubscribe();\r\n        this.pointsSubscription?.unsubscribe();\r\n        this.bonusPointsSubscription?.unsubscribe();\r\n        this.plagiarismSubscription?.unsubscribe();\r\n    }\r\n\r\n    calculateFormSectionStatus() {\r\n        if (this.textExercise) {\r\n            this.formSectionStatus = [\r\n                {\r\n                    title: 'artemisApp.exercise.sections.general',\r\n                    valid: this.exerciseTitleChannelNameComponent.titleChannelNameComponent.formValid,\r\n                },\r\n                { title: 'artemisApp.exercise.sections.mode', valid: this.teamConfigFormGroupComponent.formValid },\r\n                { title: 'artemisApp.exercise.sections.problem', valid: true, empty: !this.textExercise.problemStatement },\r\n                {\r\n                    title: 'artemisApp.exercise.sections.solution',\r\n                    valid: Boolean(this.isExamMode || (!this.textExercise.exampleSolutionPublicationDateError && this.solutionPublicationDateField?.dateInput.valid)),\r\n                    empty: !this.textExercise.exampleSolution || (!this.isExamMode && !this.textExercise.exampleSolutionPublicationDate),\r\n                },\r\n                {\r\n                    title: 'artemisApp.exercise.sections.grading',\r\n                    valid: Boolean(\r\n                        this.points.valid &&\r\n                            this.bonusPoints.valid &&\r\n                            (this.isExamMode ||\r\n                                (this.exerciseUpdatePlagiarismComponent?.formValid &&\r\n                                    !this.textExercise.startDateError &&\r\n                                    !this.textExercise.dueDateError &&\r\n                                    !this.textExercise.assessmentDueDateError &&\r\n                                    this.releaseDateField?.dateInput.valid &&\r\n                                    this.startDateField?.dateInput.valid &&\r\n                                    this.dueDateField?.dateInput.valid &&\r\n                                    this.assessmentDateField?.dateInput.valid)),\r\n                    ),\r\n                    empty:\r\n                        !this.isExamMode &&\r\n                        // if a dayjs object contains an empty date, it is considered \"invalid\"\r\n                        (!this.textExercise.startDate?.isValid() ||\r\n                            !this.textExercise.dueDate?.isValid() ||\r\n                            !this.textExercise.assessmentDueDate?.isValid() ||\r\n                            !this.textExercise.releaseDate?.isValid()),\r\n                },\r\n            ];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return to the exercise overview page\r\n     */\r\n    previousState() {\r\n        this.navigationUtilService.navigateBackFromExerciseUpdate(this.textExercise);\r\n    }\r\n\r\n    /**\r\n     * Validates if the date is correct\r\n     */\r\n    validateDate() {\r\n        this.exerciseService.validateDate(this.textExercise);\r\n        this.calculateFormSectionStatus();\r\n    }\r\n\r\n    /**\r\n     * Updates the exercise categories\r\n     * @param categories list of exercise categories\r\n     */\r\n    updateCategories(categories: ExerciseCategory[]) {\r\n        this.textExercise.categories = categories;\r\n        this.exerciseCategories = categories;\r\n    }\r\n\r\n    save() {\r\n        this.isSaving = true;\r\n\r\n        new SaveExerciseCommand(this.modalService, this.popupService, this.textExerciseService, this.backupExercise, this.editType, this.alertService)\r\n            .save(this.textExercise, this.isExamMode, this.notificationText)\r\n            .subscribe({\r\n                next: (exercise: TextExercise) => this.onSaveSuccess(exercise),\r\n                error: (error: HttpErrorResponse) => this.onSaveError(error),\r\n                complete: () => {\r\n                    this.isSaving = false;\r\n                },\r\n            });\r\n    }\r\n\r\n    private loadCourseExerciseCategories(courseId: number) {\r\n        loadCourseExerciseCategories(courseId, this.courseService, this.exerciseService, this.alertService).subscribe((existingCategories) => {\r\n            this.existingCategories = existingCategories;\r\n        });\r\n    }\r\n\r\n    private onSaveSuccess(exercise: TextExercise) {\r\n        this.eventManager.broadcast({ name: 'textExerciseListModification', content: 'OK' });\r\n        this.isSaving = false;\r\n\r\n        this.navigationUtilService.navigateForwardFromExerciseUpdateOrCreation(exercise);\r\n    }\r\n\r\n    private onSaveError(errorRes: HttpErrorResponse) {\r\n        if (errorRes.error && errorRes.error.title) {\r\n            this.alertService.addErrorAlert(errorRes.error.title, errorRes.error.message, errorRes.error.params);\r\n        } else {\r\n            onError(this.alertService, errorRes);\r\n        }\r\n        this.isSaving = false;\r\n    }\r\n}\r\n", "<form name=\"editForm\" role=\"form\" novalidate #editForm=\"ngForm\">\r\n    <div class=\"d-flex align-items-center gap-2\">\r\n        @if (!textExercise.id) {\r\n            <h2 id=\"jhi-text-exercise-heading-create\" jhiTranslate=\"artemisApp.textExercise.home.createLabel\"></h2>\r\n        } @else if (!isImport && textExercise.id) {\r\n            <h2 id=\"jhi-text-exercise-heading-edit\" jhiTranslate=\"artemisApp.textExercise.home.editLabel\"></h2>\r\n        } @else if (isImport) {\r\n            <h2 id=\"jhi-text-exercise-heading-import\" jhiTranslate=\"artemisApp.textExercise.home.importLabel\"></h2>\r\n        }\r\n        <jhi-documentation-button [type]=\"documentationType\" />\r\n    </div>\r\n    <jhi-form-status-bar [formStatusSections]=\"formSectionStatus\" />\r\n    <div>\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.general\" id=\"artemisApp.exercise.sections.general\"></h3>\r\n        <jhi-exercise-title-channel-name [exercise]=\"textExercise\" [course]=\"textExercise.course\" [minTitleLength]=\"3\" [isImport]=\"isImport\" [isExamMode]=\"isExamMode\" />\r\n        @if (!isExamMode) {\r\n            <div class=\"form-group position-relative\">\r\n                <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.categories\"></label>\r\n                <jhi-help-icon text=\"artemisApp.exercise.categoriesTooltip\" />\r\n                <jhi-category-selector [categories]=\"exerciseCategories\" [existingCategories]=\"existingCategories\" (selectedCategories)=\"updateCategories($event)\" />\r\n            </div>\r\n        }\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.mode\" id=\"artemisApp.exercise.sections.mode\"></h3>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.difficulty\"></label>\r\n            <div>\r\n                <jhi-difficulty-picker [exercise]=\"textExercise\" />\r\n            </div>\r\n        </div>\r\n        <jhi-team-config-form-group class=\"form-element\" [exercise]=\"textExercise\" [isImport]=\"isImport\" />\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.problem\" id=\"artemisApp.exercise.sections.problem\"></h3>\r\n        <div class=\"form-group\">\r\n            <label jhiTranslate=\"artemisApp.exercise.problemStatement\" for=\"problemStatement\"></label>\r\n            <jhi-markdown-editor-monaco\r\n                id=\"problemStatement\"\r\n                class=\"markdown-editor\"\r\n                [domainActions]=\"domainActionsProblemStatement\"\r\n                [(markdown)]=\"textExercise.problemStatement\"\r\n                (markdownChange)=\"calculateFormSectionStatus()\"\r\n            />\r\n        </div>\r\n        @if (!isExamMode) {\r\n            <div class=\"form-group\">\r\n                <jhi-competency-selection\r\n                    id=\"competencies\"\r\n                    [labelName]=\"'artemisApp.competency.link.title' | artemisTranslate\"\r\n                    [labelTooltip]=\"'artemisApp.competency.link.exercise' | artemisTranslate\"\r\n                    [(ngModel)]=\"textExercise.competencyLinks\"\r\n                    name=\"competencyLinks\"\r\n                />\r\n            </div>\r\n        }\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.solution\" id=\"artemisApp.exercise.sections.solution\"></h3>\r\n        <div class=\"form-group\">\r\n            <label jhiTranslate=\"artemisApp.exercise.exampleSolution\" for=\"exampleSolution\"></label>\r\n            <jhi-markdown-editor-monaco\r\n                id=\"exampleSolution\"\r\n                class=\"markdown-editor\"\r\n                [domainActions]=\"domainActionsExampleSolution\"\r\n                [(markdown)]=\"textExercise.exampleSolution\"\r\n                (markdownChange)=\"calculateFormSectionStatus()\"\r\n            />\r\n        </div>\r\n        @if (!isExamMode) {\r\n            <div class=\"form-group\">\r\n                <jhi-date-time-picker\r\n                    #solutionPublicationDate\r\n                    class=\"form-element\"\r\n                    name=\"exampleSolutionPublicationDate\"\r\n                    labelName=\"{{ 'artemisApp.exercise.exampleSolutionPublicationDate' | artemisTranslate }}\"\r\n                    [(ngModel)]=\"textExercise.exampleSolutionPublicationDate\"\r\n                    [error]=\"textExercise.exampleSolutionPublicationDateError!\"\r\n                    (valueChange)=\"validateDate()\"\r\n                />\r\n                @if (textExercise.exampleSolutionPublicationDateError) {\r\n                    <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.exampleSolutionPublicationDateError\"></span>\r\n                }\r\n            </div>\r\n        }\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.grading\" id=\"artemisApp.exercise.sections.grading\"></h3>\r\n        @if (!isExamMode) {\r\n            <div class=\"d-flex\">\r\n                <div class=\"form-group flex-grow-1\">\r\n                    <jhi-date-time-picker\r\n                        #releaseDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-releaseDate\"\r\n                        labelName=\"{{ 'artemisApp.exercise.releaseDate' | artemisTranslate }}\"\r\n                        [(ngModel)]=\"textExercise.releaseDate\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [error]=\"false\"\r\n                        name=\"releaseDate\"\r\n                    />\r\n                </div>\r\n                <div class=\"form-group flex-grow-1 ms-3\">\r\n                    <jhi-date-time-picker\r\n                        #startDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-startDate\"\r\n                        name=\"startDate\"\r\n                        [startAt]=\"textExercise.releaseDate\"\r\n                        [min]=\"textExercise.releaseDate\"\r\n                        [error]=\"!!textExercise.startDateError\"\r\n                        labelName=\"{{ 'artemisApp.exercise.startDate' | artemisTranslate }}\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [(ngModel)]=\"textExercise.startDate\"\r\n                    />\r\n                    @if (textExercise.startDateError) {\r\n                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.startDateError\"></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div class=\"d-flex\">\r\n                <div class=\"form-group flex-grow-1\">\r\n                    <jhi-date-time-picker\r\n                        #dueDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-dueDate\"\r\n                        name=\"dueDate\"\r\n                        [startAt]=\"textExercise.startDate\"\r\n                        [min]=\"textExercise.startDate\"\r\n                        [error]=\"!!textExercise.dueDateError\"\r\n                        labelName=\"{{ 'artemisApp.exercise.dueDate' | artemisTranslate }}\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [(ngModel)]=\"textExercise.dueDate\"\r\n                    />\r\n                    @if (textExercise.dueDateError) {\r\n                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.dueDateError\"></span>\r\n                    }\r\n                </div>\r\n                <div class=\"form-group flex-grow-1 ms-3\">\r\n                    <jhi-date-time-picker\r\n                        #assessmentDueDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-assessmentDueDate\"\r\n                        name=\"assessmentDueDate\"\r\n                        [startAt]=\"textExercise.dueDate\"\r\n                        [min]=\"textExercise.dueDate\"\r\n                        [error]=\"!!textExercise.assessmentDueDateError\"\r\n                        labelName=\"{{ 'artemisApp.exercise.assessmentDueDate' | artemisTranslate }}\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [(ngModel)]=\"textExercise.assessmentDueDate\"\r\n                    />\r\n                    @if (textExercise.assessmentDueDateError) {\r\n                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.assessmentDueDateError\"></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.includedInOverallScore{{ textExercise.course ? 'Course' : 'Exam' }}Label\"></label>\r\n            <div>\r\n                <jhi-included-in-overall-score-picker\r\n                    [(includedInOverallScore)]=\"textExercise.includedInOverallScore\"\r\n                    (includedInOverallScoreChange)=\"validateDate()\"\r\n                    [allowNotIncluded]=\"!isExamMode\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.points\" for=\"field_points\"></label>\r\n                    <input\r\n                        required\r\n                        type=\"number\"\r\n                        class=\"form-control\"\r\n                        [customMin]=\"1\"\r\n                        [customMax]=\"9999\"\r\n                        name=\"points\"\r\n                        #points=\"ngModel\"\r\n                        id=\"field_points\"\r\n                        [(ngModel)]=\"textExercise.maxPoints\"\r\n                    />\r\n                    @if (points?.invalid && (points?.dirty || points?.touched) && points?.errors) {\r\n                        <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.exercise.pointsError\"></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"form-group\" [hidden]=\"textExercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.bonusPoints\" for=\"field_bonusPoints\"></label>\r\n                    <input\r\n                        type=\"number\"\r\n                        [required]=\"textExercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_COMPLETELY\"\r\n                        class=\"form-control\"\r\n                        [customMin]=\"0\"\r\n                        [customMax]=\"9999\"\r\n                        name=\"bonusPoints\"\r\n                        id=\"field_bonusPoints\"\r\n                        [(ngModel)]=\"textExercise.bonusPoints\"\r\n                        #bonusPoints=\"ngModel\"\r\n                    />\r\n                    @if (bonusPoints?.invalid && (bonusPoints?.dirty || bonusPoints?.touched) && bonusPoints?.errors) {\r\n                        <div\r\n                            class=\"alert alert-danger\"\r\n                            [hidden]=\"textExercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY\"\r\n                            jhiTranslate=\"artemisApp.exercise.bonusPointsError\"\r\n                        ></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        @if (!isExamMode) {\r\n            <jhi-exercise-feedback-suggestion-options [exercise]=\"textExercise\" [dueDate]=\"textExercise.dueDate\" />\r\n            <jhi-exercise-update-plagiarism [exercise]=\"textExercise\" />\r\n        }\r\n        <jhi-presentation-score-checkbox [exercise]=\"textExercise\" />\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.assessmentInstructions\" for=\"gradingInstructions\"></label>\r\n            <jhi-grading-instructions-details id=\"gradingInstructions\" [exercise]=\"textExercise\" />\r\n        </div>\r\n    </div>\r\n    <jhi-form-footer\r\n        [isCreation]=\"!textExercise.id\"\r\n        [isImport]=\"isImport\"\r\n        [isSaving]=\"isSaving\"\r\n        [isDisabled]=\"!!(editForm.form.invalid || textExercise.dueDateError || textExercise.assessmentDueDateError || textExercise.exampleSolutionPublicationDateError)\"\r\n        (onCancel)=\"previousState()\"\r\n        (save)=\"save()\"\r\n        [(notificationText)]=\"notificationText\"\r\n    />\r\n</form>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateCategories", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "exerciseCategories", "existingCategories", "\u0275\u0275twoWayListener", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "textExercise", "competencyLinks", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "_r5", "exampleSolutionPublicationDate", "validateDate", "\u0275\u0275template", "TextExerciseUpdateComponent_Conditional_59_Conditional_7_Template", "\u0275\u0275propertyInterpolate", "exampleSolutionPublicationDateError", "\u0275\u0275conditional", "_r6", "releaseDate", "startDate", "TextExerciseUpdateComponent_Conditional_64_Conditional_16_Template", "dueDate", "TextExerciseUpdateComponent_Conditional_64_Conditional_27_Template", "assessmentDueDate", "TextExerciseUpdateComponent_Conditional_64_Conditional_35_Template", "startDateError", "dueDateError", "assessmentDueDateError", "includedInOverallScore", "IncludedInOverallScore", "INCLUDED_COMPLETELY", "TextExerciseUpdateComponent", "activatedRoute", "inject", "ActivatedRoute", "alertService", "AlertService", "textExerciseService", "TextExerciseService", "modalService", "NgbModal", "popupService", "ExerciseUpdateWarningService", "exerciseService", "ExerciseService", "exerciseGroupService", "ExerciseGroupService", "courseService", "CourseManagementService", "eventManager", "EventManager", "navigationUtilService", "ArtemisNavigationUtilService", "athenaService", "AthenaService", "documentationType", "editForm", "bonusPoints", "points", "solutionPublicationDateField", "releaseDateField", "startDateField", "dueDateField", "assessmentDateField", "exerciseTitleChannelNameComponent", "exerciseUpdatePlagiarismComponent", "teamConfigFormGroupComponent", "examCourseId", "isExamMode", "isImport", "AssessmentType", "isAthenaEnabled$", "backupExercise", "isSaving", "notificationText", "domainActionsProblemStatement", "FormulaAction", "domainActionsExampleSolution", "formSectionStatus", "titleChannelNameComponentSubscription", "pointsSubscription", "bonusPointsSubscription", "plagiarismSubscription", "teamSubscription", "editType", "EditType", "IMPORT", "id", "undefined", "CREATE", "UPDATE", "ngAfterViewInit", "titleChannelNameComponent", "formValidChanges", "subscribe", "calculateFormSectionStatus", "valueChanges", "ngOnInit", "scrollToTopOfPage", "data", "cloneDeep", "course", "exerciseGroup", "exam", "url", "pipe", "tap", "segments", "some", "segment", "path", "switchMap", "params", "mode", "ExerciseMode", "INDIVIDUAL", "teamAssignmentConfig", "teamMode", "NOT_INCLUDED", "categories", "loadCourseExerciseCategories", "courseId", "exerciseGroupId", "examId", "find", "res", "body", "resetForImport", "isEnabled", "ngOnDestroy", "unsubscribe", "title", "valid", "formValid", "empty", "problemStatement", "Boolean", "dateInput", "exampleSolution", "isValid", "previousState", "navigateBackFromExerciseUpdate", "save", "SaveExerciseCommand", "next", "exercise", "onSaveSuccess", "error", "onSaveError", "complete", "broadcast", "name", "content", "navigateForwardFromExerciseUpdateOrCreation", "errorRes", "addErrorAlert", "message", "onError", "selectors", "viewQuery", "rf", "ctx", "ExerciseTitleChannelNameComponent", "ExerciseUpdatePlagiarismComponent", "TeamConfigFormGroupComponent", "TextExerciseUpdateComponent_Conditional_5_Template", "TextExerciseUpdateComponent_Conditional_6_Template", "TextExerciseUpdateComponent_Conditional_7_Template", "TextExerciseUpdateComponent_Conditional_19_Template", "_r1", "TextExerciseUpdateComponent_Conditional_47_Template", "TextExerciseUpdateComponent_Conditional_59_Template", "TextExerciseUpdateComponent_Conditional_64_Template", "maxPoints", "TextExerciseUpdateComponent_Conditional_86_Template", "TextExerciseUpdateComponent_Conditional_98_Template", "TextExerciseUpdateComponent_Conditional_102_Template", "\u0275\u0275propertyInterpolate1", "points_r8", "invalid", "dirty", "touched", "errors", "bonusPoints_r9", "editForm_r7", "form", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "NgModel", "NgForm", "TranslateDirective", "DocumentationButtonComponent", "FormStatusBarComponent", "HelpIconComponent", "CategorySelectorComponent", "DifficultyPickerComponent", "MarkdownEditorMonacoComponent", "CompetencySelectionComponent", "FormDateTimePickerComponent", "IncludedInOverallScorePickerComponent", "CustomMinDirective", "CustomMaxDirective", "ExerciseFeedbackSuggestionOptionsComponent", "PresentationScoreComponent", "GradingInstructionsDetailsComponent", "FormFooterComponent", "ArtemisTranslatePipe", "encapsulation", "changeDetection"]
}
