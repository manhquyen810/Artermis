{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/quiz/answer-option.model.ts", "src/main/webapp/app/entities/quiz/short-answer-question.model.ts", "src/main/webapp/app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-visual-question.component.ts", "src/main/webapp/app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-visual-question.component.html", "src/main/webapp/app/exercises/quiz/manage/multiple-choice-question/multiple-choice-question-edit.component.ts", "src/main/webapp/app/exercises/quiz/manage/multiple-choice-question/multiple-choice-question-edit.component.html", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-create-form.component.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-create-form.component.html", "src/main/webapp/app/entities/apollon-diagram.model.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-list.component.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-list.component.html", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-detail.component.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-detail.component.html", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-import-dialog.component.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-import-dialog.component.html", "src/main/webapp/app/exercises/quiz/manage/quiz-confirm-import-invalid-questions-modal.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-confirm-import-invalid-questions-modal.component.html", "src/main/webapp/app/exercises/quiz/manage/quiz-question-list-edit-existing.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-question-list-edit-existing.component.html", "src/main/webapp/app/exercises/quiz/manage/quiz-question-list-edit.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-question-list-edit.component.html"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { ExerciseHintExplanationInterface } from 'app/entities/quiz/quiz-question.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { CanBecomeInvalid } from 'app/entities/quiz/drop-location.model';\r\n\r\nexport class AnswerOption implements BaseEntity, CanBecomeInvalid, ExerciseHintExplanationInterface {\r\n    public id?: number;\r\n    public text?: string;\r\n    public hint?: string;\r\n    public explanation?: string;\r\n    public isCorrect?: boolean;\r\n    public question?: MultipleChoiceQuestion;\r\n    public invalid = false; // default value\r\n\r\n    constructor() {\r\n        this.isCorrect = false; // default value\r\n        this.text = ''; // default value\r\n    }\r\n}\r\n", "import { ShortAnswerMapping } from 'app/entities/quiz/short-answer-mapping.model';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { ShortAnswerSpot } from 'app/entities/quiz/short-answer-spot.model';\r\nimport { ShortAnswerSolution } from 'app/entities/quiz/short-answer-solution.model';\r\n\r\nexport class ShortAnswerQuestion extends QuizQuestion {\r\n    public spots?: ShortAnswerSpot[];\r\n    public solutions?: ShortAnswerSolution[];\r\n    public correctMappings?: ShortAnswerMapping[];\r\n    public matchLetterCase = false;\r\n    public similarityValue = 85;\r\n\r\n    constructor() {\r\n        super(QuizQuestionType.SHORT_ANSWER);\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { faCheck, faExclamationCircle, faExclamationTriangle, faPlus, faQuestionCircle, faTrash, faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-multiple-choice-visual-question',\r\n    templateUrl: './multiple-choice-visual-question.component.html',\r\n    styleUrls: ['./multiple-choice-question.component.scss', '../../../participate/quiz-participation.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [TranslateDirective, FormsModule, FaIconComponent, NgbTooltip, NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class MultipleChoiceVisualQuestionComponent {\r\n    _question: MultipleChoiceQuestion;\r\n\r\n    @Input()\r\n    set question(question: MultipleChoiceQuestion) {\r\n        this._question = question;\r\n    }\r\n    get question(): MultipleChoiceQuestion {\r\n        return this._question;\r\n    }\r\n\r\n    @Output() questionChanged = new EventEmitter();\r\n\r\n    // Icons\r\n    faQuestionCircle = faQuestionCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faExclamationCircle = faExclamationCircle;\r\n    faCheck = faCheck;\r\n    faCircle = faCircle;\r\n    faPlus = faPlus;\r\n    faTrash = faTrash;\r\n    faXmark = faXmark;\r\n\r\n    parseQuestion() {\r\n        let markdown = this.question.text ?? '';\r\n\r\n        if (this.question.hint) {\r\n            markdown += '\\n\\t[hint] ' + this.question.hint;\r\n        }\r\n        if (this.question.explanation) {\r\n            markdown += '\\n\\t[exp] ' + this.question.explanation;\r\n        }\r\n\r\n        if (this.question.answerOptions && this.question.answerOptions.length > 0) {\r\n            markdown += '\\n';\r\n\r\n            this.question.answerOptions.forEach((answerOption) => {\r\n                markdown += '\\n' + (answerOption.isCorrect ? '[correct] ' : '[wrong] ') + answerOption.text;\r\n\r\n                if (answerOption.hint) {\r\n                    markdown += '\\n\\t[hint] ' + answerOption.hint;\r\n                }\r\n                if (answerOption.explanation) {\r\n                    markdown += '\\n\\t[exp] ' + answerOption.explanation;\r\n                }\r\n            });\r\n        }\r\n\r\n        return markdown;\r\n    }\r\n\r\n    deleteAnswer(index: number) {\r\n        this.question.answerOptions?.splice(index, 1);\r\n\r\n        this.questionChanged.emit();\r\n    }\r\n\r\n    toggleIsCorrect(answerOption: AnswerOption) {\r\n        if (this.correctToggleDisabled() && !answerOption.isCorrect) {\r\n            return;\r\n        }\r\n\r\n        answerOption.isCorrect = !answerOption.isCorrect;\r\n\r\n        this.questionChanged.emit();\r\n    }\r\n\r\n    correctToggleDisabled() {\r\n        return this.question.singleChoice && this.question.answerOptions?.some((option) => option.isCorrect);\r\n    }\r\n\r\n    addNewAnswer() {\r\n        if (this.question.answerOptions === undefined) {\r\n            this.question.answerOptions = [];\r\n        }\r\n\r\n        this.question.answerOptions?.push(new AnswerOption());\r\n\r\n        this.questionChanged.emit();\r\n    }\r\n}\r\n", "<div class=\"markdown-preview visual-mode\">\r\n    <h4 jhiTranslate=\"artemisApp.multipleChoiceQuestion.visualEditor.questionTitle\"></h4>\r\n    <textarea\r\n        id=\"mc-question\"\r\n        class=\"form-control form-group-narrow\"\r\n        [(ngModel)]=\"this.question.text\"\r\n        rows=\"5\"\r\n        (input)=\"this.questionChanged.emit()\"\r\n        placeholder=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.textPlaceholder' | artemisTranslate }}\"\r\n    ></textarea>\r\n    <div class=\"form-group-narrow visual-question-hint\">\r\n        <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary me-1\" ngbTooltip=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.hintTooltip' | artemisTranslate }}\" />\r\n        <input\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"question.hint\"\r\n            (input)=\"this.questionChanged.emit()\"\r\n            placeholder=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.hintPlaceholder' | artemisTranslate }}\"\r\n        />\r\n    </div>\r\n    <div class=\"form-group visual-question-hint\">\r\n        <fa-icon\r\n            [icon]=\"faExclamationCircle\"\r\n            class=\"text-secondary me-1\"\r\n            ngbTooltip=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.explanationTooltip' | artemisTranslate }}\"\r\n        />\r\n        <input\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"question.explanation\"\r\n            (input)=\"this.questionChanged.emit()\"\r\n            placeholder=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.explanationPlaceholder' | artemisTranslate }}\"\r\n        />\r\n    </div>\r\n    <h4 jhiTranslate=\"artemisApp.multipleChoiceQuestion.visualEditor.answersTitle\"></h4>\r\n    @for (answerOption of question.answerOptions; track answerOption; let i = $index) {\r\n        <div id=\"answer-option-{{ i }}\" class=\"visual-answer-option form-group-narrow\">\r\n            <div class=\"form-group-narrow visual-answer-question-container\">\r\n                <div\r\n                    class=\"visual-answer\"\r\n                    [ngClass]=\"answerOption.isCorrect ? 'visual-answer-correct-container' : 'visual-answer-wrong-container'\"\r\n                    (click)=\"toggleIsCorrect(answerOption)\"\r\n                >\r\n                    <fa-icon [icon]=\"answerOption.isCorrect ? faCheck : faXmark\" />\r\n                </div>\r\n                <input\r\n                    id=\"answer-option-{{ i }}-text\"\r\n                    class=\"form-control\"\r\n                    [(ngModel)]=\"answerOption.text\"\r\n                    (input)=\"this.questionChanged.emit()\"\r\n                    placeholder=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.textPlaceholder' | artemisTranslate }}\"\r\n                />\r\n                <div id=\"answer-option-{{ i }}-delete\" class=\"visual-answer-delete-container\" (click)=\"deleteAnswer(i)\">\r\n                    <fa-icon [icon]=\"faTrash\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group-narrow visual-question-hint\">\r\n                <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary me-1\" ngbTooltip=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.hintTooltip' | artemisTranslate }}\" />\r\n                <input\r\n                    class=\"form-control\"\r\n                    [(ngModel)]=\"answerOption.hint\"\r\n                    (input)=\"this.questionChanged.emit()\"\r\n                    placeholder=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.hintPlaceholder' | artemisTranslate }}\"\r\n                />\r\n            </div>\r\n            <div class=\"visual-question-hint\">\r\n                <fa-icon\r\n                    [icon]=\"faExclamationCircle\"\r\n                    class=\"text-secondary me-1\"\r\n                    ngbTooltip=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.explanationTooltip' | artemisTranslate }}\"\r\n                />\r\n                <input\r\n                    class=\"form-control\"\r\n                    [(ngModel)]=\"answerOption.explanation\"\r\n                    (input)=\"this.questionChanged.emit()\"\r\n                    placeholder=\"{{ 'artemisApp.multipleChoiceQuestion.visualEditor.explanationPlaceholder' | artemisTranslate }}\"\r\n                />\r\n            </div>\r\n        </div>\r\n    }\r\n    <button id=\"add-mc-answer-option\" class=\"btn btn-block btn-success mt-2\" (click)=\"addNewAnswer()\">\r\n        <fa-icon [icon]=\"faPlus\" />\r\n        <span jhiTranslate=\"artemisApp.multipleChoiceQuestion.visualEditor.newAnswerTitle\"></span>\r\n    </button>\r\n</div>\r\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { NgbCollapse, NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { QuizQuestionEdit } from 'app/exercises/quiz/manage/quiz-question-edit.interface';\r\nimport { MultipleChoiceQuestionComponent } from 'app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-question.component';\r\nimport { generateExerciseHintExplanation } from 'app/shared/util/markdown.util';\r\nimport { faAngleDown, faAngleRight, faQuestionCircle, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { ScoringType } from 'app/entities/quiz/quiz-question.model';\r\nimport { MAX_QUIZ_QUESTION_POINTS } from 'app/shared/constants/input.constants';\r\nimport { QuizHintAction } from 'app/shared/monaco-editor/model/actions/quiz/quiz-hint.action';\r\nimport { WrongMultipleChoiceAnswerAction } from 'app/shared/monaco-editor/model/actions/quiz/wrong-multiple-choice-answer.action';\r\nimport { CorrectMultipleChoiceAnswerAction } from 'app/shared/monaco-editor/model/actions/quiz/correct-multiple-choice-answer.action';\r\nimport { QuizExplanationAction } from 'app/shared/monaco-editor/model/actions/quiz/quiz-explanation.action';\r\nimport { MarkdownEditorMonacoComponent, TextWithDomainAction } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { MultipleChoiceVisualQuestionComponent } from 'app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-visual-question.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { QuizScoringInfoModalComponent } from '../quiz-scoring-info-modal/quiz-scoring-info-modal.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-multiple-choice-question-edit',\r\n    templateUrl: './multiple-choice-question-edit.component.html',\r\n    styleUrls: ['../quiz-exercise.scss', '../../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        FaIconComponent,\r\n        FormsModule,\r\n        TranslateDirective,\r\n        NgbCollapse,\r\n        QuizScoringInfoModalComponent,\r\n        NgbTooltip,\r\n        MarkdownEditorMonacoComponent,\r\n        MultipleChoiceQuestionComponent,\r\n        MultipleChoiceVisualQuestionComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class MultipleChoiceQuestionEditComponent implements OnInit, QuizQuestionEdit {\r\n    private modalService = inject(NgbModal);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    @ViewChild('markdownEditor', { static: false })\r\n    private markdownEditor: MarkdownEditorMonacoComponent;\r\n\r\n    @ViewChild('visual', { static: false })\r\n    visualChild: MultipleChoiceVisualQuestionComponent;\r\n\r\n    @Input()\r\n    question: MultipleChoiceQuestion;\r\n    @Input()\r\n    questionIndex: number;\r\n\r\n    @Output()\r\n    questionUpdated = new EventEmitter();\r\n    @Output()\r\n    questionDeleted = new EventEmitter();\r\n\r\n    questionEditorText = '';\r\n    isQuestionCollapsed: boolean;\r\n\r\n    /** Set default preview of the markdown editor as preview for the multiple choice question **/\r\n    get showPreview(): boolean {\r\n        return this.markdownEditor && this.markdownEditor.inPreviewMode;\r\n    }\r\n    showMultipleChoiceQuestionPreview = true;\r\n    showMultipleChoiceQuestionVisual = true;\r\n\r\n    correctAction = new CorrectMultipleChoiceAnswerAction();\r\n    wrongAction = new WrongMultipleChoiceAnswerAction();\r\n    explanationAction = new QuizExplanationAction();\r\n    hintAction = new QuizHintAction();\r\n\r\n    multipleChoiceActions = [this.correctAction, this.wrongAction, this.explanationAction, this.hintAction];\r\n\r\n    // Icons\r\n    faTrash = faTrash;\r\n    faAngleRight = faAngleRight;\r\n    faAngleDown = faAngleDown;\r\n    faQuestionCircle = faQuestionCircle;\r\n\r\n    readonly MAX_POINTS = MAX_QUIZ_QUESTION_POINTS;\r\n\r\n    /**\r\n     * Init the question editor text by parsing the markdown.\r\n     */\r\n    ngOnInit(): void {\r\n        this.questionEditorText = this.generateMarkdown();\r\n    }\r\n\r\n    /**\r\n     * Generate the markdown text for this question\r\n     * 1. First the question text, hint, and explanation are added using ArtemisMarkdown\r\n     * 2. After an empty line, the answer options are added\r\n     * 3. For each answer option: text, hint and explanation are added using ArtemisMarkdown\r\n     */\r\n    generateMarkdown(): string {\r\n        const markdownText =\r\n            generateExerciseHintExplanation(this.question) +\r\n            '\\n\\n' +\r\n            this.question.answerOptions!.map((answerOption) => (answerOption.isCorrect ? '[correct]' : '[wrong]') + ' ' + generateExerciseHintExplanation(answerOption)).join('\\n');\r\n        return markdownText;\r\n    }\r\n\r\n    onSingleChoiceChanged(): void {\r\n        if (this.question.singleChoice) {\r\n            this.question.scoringType = ScoringType.ALL_OR_NOTHING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * open the modal for the help dialog\r\n     * @param content\r\n     */\r\n    open(content: any) {\r\n        this.modalService.open(content, { size: 'lg' });\r\n    }\r\n\r\n    /**\r\n     * Detect of text changes in the markdown editor\r\n     * 1. Parse the text in the editor to get the newest values\r\n     * 2. Notify the parent component to check the validity of the text\r\n     */\r\n    changesInMarkdown(): void {\r\n        this.prepareForSave();\r\n        this.questionUpdated.emit();\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Detect of changes in the visual editor\r\n     * 1. Parse the text in the editor to get the newest values\r\n     * 2. Notify the parent component to check the validity of the text\r\n     */\r\n    changesInVisualMode(): void {\r\n        this.questionUpdated.emit();\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Triggers the saving process by cleaning up the question and calling the markdown parse function\r\n     * to get the newest values in the editor to update the question attributes\r\n     */\r\n    prepareForSave(): void {\r\n        if (this.markdownEditor.inVisualMode) {\r\n            /*\r\n             * In the visual mode, the latest question values come from the visual tab, not the markdown editor.\r\n             * We update the markdown editor, which triggers the parsing of the visual tab content.\r\n             */\r\n            this.markdownEditor.markdown = this.visualChild.parseQuestion();\r\n        } else {\r\n            this.cleanupQuestion();\r\n            this.markdownEditor.parseMarkdown();\r\n        }\r\n    }\r\n\r\n    onLeaveVisualTab(): void {\r\n        this.markdownEditor.markdown = this.visualChild.parseQuestion();\r\n        this.prepareForSave();\r\n    }\r\n\r\n    /**\r\n     * @function cleanupQuestion\r\n     * @desc Clear the question to avoid double assignments of one attribute\r\n     */\r\n    private cleanupQuestion() {\r\n        // Reset Question Object\r\n        this.question.answerOptions = [];\r\n        this.question.text = undefined;\r\n        this.question.explanation = undefined;\r\n        this.question.hint = undefined;\r\n        this.question.hasCorrectOption = undefined;\r\n    }\r\n\r\n    /**\r\n     * 1. Gets a tuple of text and domain action identifiers and assigns text values according to the domain actions a\r\n     *    multiple choice question the to the multiple choice question attributes.\r\n     *   (question text, explanation, hint, answerOption (correct/wrong)\r\n     * 2. The tuple order is the same as the order of the actions in the markdown text inserted by the user\r\n     * 3. resetMultipleChoicePreview() is triggered to notify the parent component\r\n     *    about the changes within the question and to cacheValidation() since the assigned values have changed\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    domainActionsFound(textWithDomainActions: TextWithDomainAction[]): void {\r\n        this.cleanupQuestion();\r\n        let currentAnswerOption;\r\n\r\n        for (const { text, action } of textWithDomainActions) {\r\n            if (action === undefined && text.length > 0) {\r\n                this.question.text = text;\r\n            }\r\n            if (action instanceof CorrectMultipleChoiceAnswerAction || action instanceof WrongMultipleChoiceAnswerAction) {\r\n                currentAnswerOption = new AnswerOption();\r\n                currentAnswerOption.isCorrect = action instanceof CorrectMultipleChoiceAnswerAction;\r\n                currentAnswerOption.text = text;\r\n                this.question.answerOptions!.push(currentAnswerOption);\r\n            } else if (action instanceof QuizExplanationAction) {\r\n                if (currentAnswerOption) {\r\n                    currentAnswerOption.explanation = text;\r\n                } else {\r\n                    this.question.explanation = text;\r\n                }\r\n            } else if (action instanceof QuizHintAction) {\r\n                if (currentAnswerOption) {\r\n                    currentAnswerOption.hint = text;\r\n                } else {\r\n                    this.question.hint = text;\r\n                }\r\n            }\r\n        }\r\n        this.resetMultipleChoicePreview();\r\n        this.resetMultipleChoiceVisual();\r\n    }\r\n\r\n    /**\r\n     * @function resetMultipleChoicePreview\r\n     * @desc  Reset the preview function of the multiple choice question in order to cause a change\r\n     *        so the parent component is notified\r\n     *        and the check for the question validity is triggered\r\n     */\r\n    private resetMultipleChoicePreview() {\r\n        this.showMultipleChoiceQuestionPreview = false;\r\n        this.changeDetector.detectChanges();\r\n        this.showMultipleChoiceQuestionPreview = true;\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    private resetMultipleChoiceVisual() {\r\n        this.showMultipleChoiceQuestionVisual = false;\r\n        this.changeDetector.detectChanges();\r\n        this.showMultipleChoiceQuestionVisual = true;\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Delete this question from the quiz\r\n     */\r\n    deleteQuestion(): void {\r\n        this.questionDeleted.emit();\r\n    }\r\n}\r\n", "<div class=\"edit-mc-question\">\r\n    <div class=\"question-options card-header question-card-header\" [hidden]=\"showPreview\">\r\n        <button\r\n            class=\"btn question-collapse\"\r\n            (click)=\"isQuestionCollapsed = !isQuestionCollapsed\"\r\n            [attr.aria-expanded]=\"!isQuestionCollapsed\"\r\n            [attr.aria-controls]=\"'collapseQuestion' + questionIndex\"\r\n        >\r\n            <fa-icon size=\"3x\" [icon]=\"isQuestionCollapsed ? faAngleRight : faAngleDown\" />\r\n        </button>\r\n        <div class=\"form-group question-title\">\r\n            <input\r\n                id=\"mc-question-title\"\r\n                class=\"form-control\"\r\n                [(ngModel)]=\"question.title\"\r\n                (ngModelChange)=\"questionUpdated.emit()\"\r\n                placeholder=\"{{ 'artemisApp.quizExercise.placeholder.shortQuestionTitle' | artemisTranslate }}\"\r\n            />\r\n        </div>\r\n        <div class=\"question-card-header-inputs\">\r\n            <div class=\"form-group question-score\">\r\n                <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n                <input\r\n                    id=\"score\"\r\n                    class=\"form-control\"\r\n                    title=\"score\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    [max]=\"MAX_POINTS\"\r\n                    [(ngModel)]=\"question.points\"\r\n                    (ngModelChange)=\"questionUpdated.emit()\"\r\n                />\r\n            </div>\r\n            <div class=\"question-type\">\r\n                <h3 class=\"mb-0\"><span class=\"badge bg-info align-text-top\">MC</span></h3>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-body question-card-body\" [ngbCollapse]=\"isQuestionCollapsed\" id=\"collapseQuestion{{ questionIndex }}\">\r\n        <div class=\"question-options\" [hidden]=\"showPreview\">\r\n            <div class=\"form-group\">\r\n                <span jhiTranslate=\"artemisApp.quizQuestion.scoringType\" class=\"colon-suffix no-flex-shrink\"></span>\r\n                <select\r\n                    class=\"form-select\"\r\n                    [(ngModel)]=\"question.scoringType\"\r\n                    (ngModelChange)=\"questionUpdated.emit()\"\r\n                    [disabled]=\"question.singleChoice ?? false\"\r\n                    title=\"scoring type\"\r\n                >\r\n                    <option value=\"ALL_OR_NOTHING\" jhiTranslate=\"artemisApp.quizExercise.scoringType.all_or_nothing\"></option>\r\n                    <option value=\"PROPORTIONAL_WITH_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_with_penalty\"></option>\r\n                    <option value=\"PROPORTIONAL_WITHOUT_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_without_penalty\"></option>\r\n                </select>\r\n                <jhi-quiz-scoring-info-modal />\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"form-check custom-control custom-checkbox\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"{{ 'cbRandomizeOrderMC' + questionIndex }}\"\r\n                        [(ngModel)]=\"question.randomizeOrder\"\r\n                        (ngModelChange)=\"questionUpdated.emit()\"\r\n                        class=\"form-check-input custom-control-input\"\r\n                    />\r\n                    <label\r\n                        class=\"form-check-label custom-control-label\"\r\n                        for=\"{{ 'cbRandomizeOrderMC' + questionIndex }}\"\r\n                        jhiTranslate=\"artemisApp.multipleChoiceQuestion.randomizeOrder\"\r\n                    ></label>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"form-check custom-control custom-checkbox\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"{{ 'cbSingleChoiceMC' + questionIndex }}\"\r\n                        [(ngModel)]=\"question.singleChoice\"\r\n                        (ngModelChange)=\"onSingleChoiceChanged(); questionUpdated.emit()\"\r\n                        class=\"form-check-input custom-control-input\"\r\n                    />\r\n                    <label\r\n                        class=\"form-check-label custom-control-label\"\r\n                        for=\"{{ 'cbSingleChoiceMC' + questionIndex }}\"\r\n                        jhiTranslate=\"artemisApp.multipleChoiceQuestion.singleChoice\"\r\n                    ></label>\r\n                    <fa-icon [icon]=\"faQuestionCircle\" [ngbTooltip]=\"'artemisApp.multipleChoiceQuestion.singleChoiceInfo' | artemisTranslate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"delete-button\" (click)=\"deleteQuestion()\">\r\n                    <fa-icon [icon]=\"faTrash\" size=\"2x\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"markupEditorArea\">\r\n            <div class=\"question-content\">\r\n                <jhi-markdown-editor-monaco\r\n                    #markdownEditor\r\n                    [markdown]=\"questionEditorText\"\r\n                    [showPreviewButton]=\"true\"\r\n                    [showVisualButton]=\"true\"\r\n                    [domainActions]=\"multipleChoiceActions\"\r\n                    (markdownChange)=\"changesInMarkdown()\"\r\n                    (textWithDomainActionsFound)=\"domainActionsFound($event)\"\r\n                    (onLeaveVisualTab)=\"onLeaveVisualTab()\"\r\n                    [showDefaultPreview]=\"false\"\r\n                    class=\"h-auto\"\r\n                >\r\n                    <!-- Preview -->\r\n                    <ng-container id=\"previewMonaco\">\r\n                        @if (showMultipleChoiceQuestionPreview) {\r\n                            <jhi-multiple-choice-question [question]=\"question\" [selectedAnswerOptions]=\"[]\" [questionIndex]=\"questionIndex\" />\r\n                        }\r\n                        <hr />\r\n                    </ng-container>\r\n                    <!-- End of Preview-->\r\n                    <!-- Visual -->\r\n                    <ng-container id=\"visual\">\r\n                        @if (showMultipleChoiceQuestionVisual) {\r\n                            <jhi-multiple-choice-visual-question #visual [question]=\"question\" (questionChanged)=\"changesInVisualMode()\" />\r\n                        }\r\n                    </ng-container>\r\n                    <!-- End of Visual -->\r\n                </jhi-markdown-editor-monaco>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\nimport { ApollonDiagram } from 'app/entities/apollon-diagram.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\n\r\nexport type EntityResponseType = HttpResponse<ApollonDiagram>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApollonDiagramService {\r\n    private http = inject(HttpClient);\r\n    private entityTitleService = inject(EntityTitleService);\r\n\r\n    private resourceUrl = 'api/modeling';\r\n\r\n    /**\r\n     * Creates diagram.\r\n     * @param apollonDiagram - apollonDiagram to be created.\r\n     * @param courseId - id of the course.\r\n     */\r\n    create(apollonDiagram: ApollonDiagram, courseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convert(apollonDiagram);\r\n        return this.http.post<ApollonDiagram>(`${this.resourceUrl}/course/${courseId}/apollon-diagrams`, copy, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Updates diagram.\r\n     * @param apollonDiagram - apollonDiagram to be updated.\r\n     * @param courseId - id of the course.\r\n     */\r\n    update(apollonDiagram: ApollonDiagram, courseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convert(apollonDiagram);\r\n        return this.http.put<ApollonDiagram>(`${this.resourceUrl}/course/${courseId}/apollon-diagrams`, copy, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Finds diagram.\r\n     * @param diagramId - id of diagram to be found.\r\n     * @param courseId - id of the course.\r\n     */\r\n    find(diagramId: number, courseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ApollonDiagram>(`${this.resourceUrl}/course/${courseId}/apollon-diagrams/${diagramId}`, { observe: 'response' })\r\n            .pipe(tap((res) => this.sendTitlesToEntityTitleService(res?.body)));\r\n    }\r\n\r\n    /**\r\n     * Deletes diagram with that id.\r\n     * @param diagramId - id of diagram to be deleted.\r\n     * @param courseId - id of the course.\r\n     */\r\n    delete(diagramId: number, courseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/course/${courseId}/apollon-diagrams/${diagramId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Gets all apollon diagrams that belong to the course with the id courseId.\r\n     */\r\n    getDiagramsByCourse(courseId: number): Observable<HttpResponse<ApollonDiagram[]>> {\r\n        const options = createRequestOption(courseId);\r\n        return this.http\r\n            .get<ApollonDiagram[]>(`${this.resourceUrl}/course/${courseId}/apollon-diagrams`, { params: options, observe: 'response' })\r\n            .pipe(tap((res) => res?.body?.forEach(this.sendTitlesToEntityTitleService.bind(this))));\r\n    }\r\n\r\n    private convert(apollonDiagram: ApollonDiagram): ApollonDiagram {\r\n        return Object.assign({}, apollonDiagram);\r\n    }\r\n\r\n    private sendTitlesToEntityTitleService(diagram: ApollonDiagram | undefined | null) {\r\n        this.entityTitleService.setTitle(EntityType.DIAGRAM, [diagram?.id], diagram?.title);\r\n    }\r\n}\r\n", "import { AfterViewInit, Component, ElementRef, ViewChild, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ApollonDiagramService } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service';\r\nimport { ApollonDiagram } from 'app/entities/apollon-diagram.model';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-apollon-diagram-create-form',\r\n    templateUrl: './apollon-diagram-create-form.component.html',\r\n    providers: [ApollonDiagramService],\r\n    imports: [FormsModule, TranslateDirective, FaIconComponent],\r\n})\r\nexport class ApollonDiagramCreateFormComponent implements AfterViewInit {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private apollonDiagramService = inject(ApollonDiagramService);\r\n    private alertService = inject(AlertService);\r\n\r\n    apollonDiagram: ApollonDiagram;\r\n    isSaving: boolean;\r\n    @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n\r\n    /**\r\n     * Adds focus on the title input field\r\n     */\r\n    ngAfterViewInit() {\r\n        this.titleInput.nativeElement.focus();\r\n    }\r\n\r\n    /**\r\n     * Saves the diagram\r\n     */\r\n    save() {\r\n        this.isSaving = true;\r\n        this.apollonDiagramService.create(this.apollonDiagram, this.apollonDiagram.courseId!).subscribe({\r\n            next: ({ body }) => {\r\n                if (body) {\r\n                    this.isSaving = false;\r\n                    this.activeModal.close(body);\r\n                }\r\n            },\r\n            error: () => {\r\n                this.alertService.error('artemisApp.apollonDiagram.create.error');\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Cancels the modal\r\n     */\r\n    dismiss() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n}\r\n", "<form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" #editForm=\"ngForm\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"myApollonDiagramLabel\" jhiTranslate=\"artemisApp.apollonDiagram.home.createLabel\"></h4>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"form-group-narrow\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.apollonDiagram.title\" for=\"field_diagram_title\"></label>\r\n            <input #titleInput required type=\"text\" class=\"form-control\" name=\"title\" id=\"field_diagram_title\" [(ngModel)]=\"apollonDiagram.title\" />\r\n        </div>\r\n        <div class=\"form-group-narrow\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.modelingExercise.diagramType\" for=\"field_diagramType\"></label>\r\n            <select class=\"form-select\" name=\"diagramType\" [(ngModel)]=\"apollonDiagram.diagramType\" id=\"field_diagramType\">\r\n                <option value=\"ClassDiagram\" jhiTranslate=\"artemisApp.DiagramType.ClassDiagram\"></option>\r\n                <option value=\"ActivityDiagram\" jhiTranslate=\"artemisApp.DiagramType.ActivityDiagram\"></option>\r\n                <option value=\"ObjectDiagram\" jhiTranslate=\"artemisApp.DiagramType.ObjectDiagram\"></option>\r\n                <option value=\"UseCaseDiagram\" jhiTranslate=\"artemisApp.DiagramType.UseCaseDiagram\"></option>\r\n                <option value=\"CommunicationDiagram\" jhiTranslate=\"artemisApp.DiagramType.CommunicationDiagram\"></option>\r\n                <option value=\"ComponentDiagram\" jhiTranslate=\"artemisApp.DiagramType.ComponentDiagram\"></option>\r\n                <option value=\"DeploymentDiagram\" jhiTranslate=\"artemisApp.DiagramType.DeploymentDiagram\"></option>\r\n                <option value=\"PetriNet\" jhiTranslate=\"artemisApp.DiagramType.PetriNet\"></option>\r\n                <option value=\"SyntaxTree\" jhiTranslate=\"artemisApp.DiagramType.SyntaxTree\"></option>\r\n                <option value=\"Flowchart\" jhiTranslate=\"artemisApp.DiagramType.Flowchart\"></option>\r\n                <option value=\"BPMN\" jhiTranslate=\"artemisApp.DiagramType.BPMN\"></option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline-primary\" data-dismiss=\"modal\" (click)=\"dismiss()\">\r\n            <span jhiTranslate=\"entity.action.cancel\"></span>\r\n        </button>\r\n        <button id=\"save-dnd-quiz\" type=\"submit\" [disabled]=\"editForm.form.invalid || isSaving\" class=\"btn btn-primary\">\r\n            <fa-icon [icon]=\"faSave\" />&nbsp;\r\n            <span jhiTranslate=\"global.generic.create\"></span>\r\n        </button>\r\n    </div>\r\n</form>\r\n", "import { UMLDiagramType } from '@ls1intum/apollon';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\n\r\nexport class ApollonDiagram implements BaseEntity {\r\n    public id?: number;\r\n    public title?: string;\r\n    public jsonRepresentation?: string;\r\n    public diagramType?: UMLDiagramType;\r\n    public courseId?: number;\r\n\r\n    constructor(diagramType: UMLDiagramType, courseId: number) {\r\n        this.diagramType = diagramType;\r\n        this.courseId = courseId;\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Subject } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ApollonDiagramCreateFormComponent } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-create-form.component';\r\nimport { ApollonDiagramService } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service';\r\nimport { ApollonDiagram } from 'app/entities/apollon-diagram.model';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { faPlus, faSort, faTimes, faX } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { UMLDiagramType } from '@ls1intum/apollon';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-apollon-diagram-list',\r\n    templateUrl: './apollon-diagram-list.component.html',\r\n    providers: [ApollonDiagramService],\r\n    imports: [TranslateDirective, FaIconComponent, SortDirective, SortByDirective, DeleteButtonDirective],\r\n})\r\nexport class ApollonDiagramListComponent implements OnInit {\r\n    private apollonDiagramsService = inject(ApollonDiagramService);\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n    private sortService = inject(SortService);\r\n    private route = inject(ActivatedRoute);\r\n    private courseService = inject(CourseManagementService);\r\n\r\n    apollonDiagrams: ApollonDiagram[] = [];\r\n    predicate = 'id';\r\n    reverse = true;\r\n\r\n    @Input() courseId: number;\r\n\r\n    @Output() openDiagram = new EventEmitter<number>();\r\n    @Output() closeDialog = new EventEmitter();\r\n\r\n    course: Course;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faPlus = faPlus;\r\n    faX = faX;\r\n    faTimes = faTimes;\r\n\r\n    ButtonSize = ButtonSize;\r\n\r\n    /**\r\n     * Initializes Apollon diagrams from the server\r\n     */\r\n    ngOnInit() {\r\n        this.courseId ??= Number(this.route.snapshot.paramMap.get('courseId'));\r\n\r\n        this.courseService.find(this.courseId).subscribe((courseResponse: HttpResponse<Course>) => {\r\n            this.course = courseResponse.body!;\r\n        });\r\n        this.loadDiagrams();\r\n    }\r\n\r\n    /**\r\n     * Loads the Apollon diagrams of this course which will be shown\r\n     */\r\n    loadDiagrams() {\r\n        this.apollonDiagramsService.getDiagramsByCourse(this.courseId).subscribe({\r\n            next: (response) => {\r\n                this.apollonDiagrams = response.body!;\r\n            },\r\n            error: () => {\r\n                this.alertService.error('artemisApp.apollonDiagram.home.error.loading');\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes specified Apollon diagram\r\n     * @param apollonDiagram\r\n     */\r\n    delete(apollonDiagram: ApollonDiagram) {\r\n        this.apollonDiagramsService.delete(apollonDiagram.id!, this.courseId).subscribe({\r\n            next: () => {\r\n                this.alertService.success('artemisApp.apollonDiagram.delete.success', { title: apollonDiagram.title });\r\n                this.apollonDiagrams = this.apollonDiagrams.filter((diagram) => {\r\n                    return diagram.id !== apollonDiagram.id;\r\n                });\r\n                this.dialogErrorSource.next('');\r\n            },\r\n            error: () => {\r\n                this.alertService.error('artemisApp.apollonDiagram.delete.error', { title: apollonDiagram.title });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the title for Apollon diagram\r\n     * @param diagram\r\n     */\r\n    getTitleForApollonDiagram(diagram: ApollonDiagram): string {\r\n        return diagram.title && diagram.title.trim().length ? diagram.title.trim() : `#${diagram.id}`;\r\n    }\r\n\r\n    /**\r\n     * Opens dialog for creating a new diagram\r\n     */\r\n    openCreateDiagramDialog(courseId: number) {\r\n        const modalRef = this.modalService.open(ApollonDiagramCreateFormComponent, { size: 'lg', backdrop: 'static' });\r\n        const formComponentInstance = modalRef.componentInstance as ApollonDiagramCreateFormComponent;\r\n        // class diagram is the default value and can be changed by the user in the creation dialog\r\n        formComponentInstance.apollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, courseId);\r\n        modalRef.result.then((diagram) => this.handleOpenDialogClick(diagram.id));\r\n    }\r\n\r\n    handleOpenDialogClick(apollonDiagramId: number) {\r\n        this.openDiagram.emit(apollonDiagramId);\r\n    }\r\n\r\n    handleCloseDiagramClick() {\r\n        this.closeDialog.emit();\r\n    }\r\n\r\n    /**\r\n     * Returns the unique identifier for items in the collection\r\n     * @param _index of a diagram in the collection\r\n     * @param item current diagram\r\n     */\r\n    trackId(_index: number, item: ApollonDiagram) {\r\n        return item.id;\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.apollonDiagrams, this.predicate, this.reverse);\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.apollonDiagram.home.title\"></h4>\r\n    <button type=\"button\" class=\"btn ms-auto text-secondary\" (click)=\"handleCloseDiagramClick()\"><fa-icon [icon]=\"faX\" size=\"lg\" /></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"row mb-2\">\r\n        <div class=\"col\">\r\n            <button (click)=\"openCreateDiagramDialog(courseId)\" id=\"create-apollon-diagram\" class=\"btn btn-primary\">\r\n                <fa-icon [icon]=\"faPlus\" />\r\n                <span jhiTranslate=\"artemisApp.apollonDiagram.home.createLabel\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    @if (apollonDiagrams && apollonDiagrams.length > 0) {\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"reverse\" (sortChange)=\"sortRows()\">\r\n                        <th jhiSortBy=\"id\"><span jhiTranslate=\"global.field.id\"></span>&nbsp;<fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"courseId\"><span jhiTranslate=\"artemisApp.apollonDiagram.courseId\"></span>&nbsp;<fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"title\"><span jhiTranslate=\"artemisApp.exercise.title\"></span>&nbsp;<fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"diagramType\"><span jhiTranslate=\"artemisApp.modelingExercise.diagramType\"></span>&nbsp;<fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiTranslate=\"artemisApp.exercise.actions\"></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (apollonDiagram of apollonDiagrams; track trackId($index, apollonDiagram)) {\r\n                        <tr>\r\n                            <td>\r\n                                <span>{{ apollonDiagram.id }}</span>\r\n                            </td>\r\n                            <td>\r\n                                <span>{{ apollonDiagram.courseId }}</span>\r\n                            </td>\r\n                            <td>{{ getTitleForApollonDiagram(apollonDiagram) }}</td>\r\n                            <td jhiTranslate=\"{{ 'artemisApp.DiagramType.' + apollonDiagram.diagramType }}\">{{ apollonDiagram.diagramType }}</td>\r\n                            <td>\r\n                                <button\r\n                                    class=\"btn btn-primary me-1\"\r\n                                    (click)=\"handleOpenDialogClick(apollonDiagram.id!)\"\r\n                                    jhiTranslate=\"entity.action.open\"\r\n                                    id=\"open-diagram\"\r\n                                ></button>\r\n                                @if (course && course.isAtLeastInstructor) {\r\n                                    <button\r\n                                        class=\"me-1\"\r\n                                        (delete)=\"delete(apollonDiagram)\"\r\n                                        [buttonSize]=\"ButtonSize.MEDIUM\"\r\n                                        [deleteQuestion]=\"'artemisApp.apollonDiagram.delete.question'\"\r\n                                        [entityTitle]=\"apollonDiagram.title\"\r\n                                        [dialogError]=\"dialogError$\"\r\n                                        jhiDeleteButton\r\n                                    >\r\n                                        <fa-icon [icon]=\"faTimes\" />\r\n                                    </button>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    }\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button class=\"btn btn-outline-primary me-auto\" (click)=\"handleCloseDiagramClick()\">Close</button>\r\n</div>\r\n", "import { Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ApollonEditor, ApollonMode, Locale, UMLModel } from '@ls1intum/apollon';\r\nimport { NgbModal, NgbModalRef, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { JhiLanguageHelper } from 'app/core/language/language.helper';\r\nimport { convertRenderedSVGToPNG } from './exercise-generation/svg-renderer';\r\nimport { ApollonDiagramService } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service';\r\nimport { ApollonDiagram } from 'app/entities/apollon-diagram.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { AUTOSAVE_CHECK_INTERVAL, AUTOSAVE_EXERCISE_INTERVAL } from 'app/shared/constants/exercise-exam-constants';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { faArrowLeft, faDownload, faQuestionCircle, faX } from '@fortawesome/free-solid-svg-icons';\r\nimport { generateDragAndDropQuizExercise } from 'app/exercises/quiz/manage/apollon-diagrams/exercise-generation/quiz-exercise-generator';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-apollon-diagram-detail',\r\n    templateUrl: './apollon-diagram-detail.component.html',\r\n    providers: [ApollonDiagramService],\r\n    imports: [TranslateDirective, FaIconComponent, FormsModule, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class ApollonDiagramDetailComponent implements OnInit, OnDestroy {\r\n    private apollonDiagramService = inject(ApollonDiagramService);\r\n    private courseService = inject(CourseManagementService);\r\n    private alertService = inject(AlertService);\r\n    private translateService = inject(TranslateService);\r\n    private languageHelper = inject(JhiLanguageHelper);\r\n    private modalService = inject(NgbModal);\r\n    private route = inject(ActivatedRoute);\r\n\r\n    @ViewChild('editorContainer', { static: false }) editorContainer: ElementRef;\r\n    @ViewChild('titleField') titleField?: NgModel;\r\n\r\n    @Input() courseId: number;\r\n    @Input() apollonDiagramId: number;\r\n\r\n    @Output() closeEdit = new EventEmitter<DragAndDropQuestion | undefined>();\r\n    @Output() closeModal = new EventEmitter();\r\n\r\n    course: Course;\r\n\r\n    apollonDiagram?: ApollonDiagram;\r\n    apollonEditor?: ApollonEditor;\r\n\r\n    isSaved = true;\r\n\r\n    /**  */\r\n    autoSaveInterval: number;\r\n    autoSaveTimer: number;\r\n\r\n    /** Whether to crop the downloaded image to the selection. */\r\n    crop = true;\r\n\r\n    /** Whether some elements are interactive in the apollon editor. */\r\n    get hasInteractive(): boolean {\r\n        return (\r\n            !!this.apollonEditor &&\r\n            (Object.entries(this.apollonEditor.model.interactive.elements).some(([, selected]) => selected) ||\r\n                Object.entries(this.apollonEditor.model.interactive.relationships).some(([, selected]) => selected))\r\n        );\r\n    }\r\n\r\n    /** Whether some elements are selected in the apollon editor. */\r\n    get hasSelection(): boolean {\r\n        return (\r\n            !!this.apollonEditor &&\r\n            (Object.entries(this.apollonEditor.selection.elements).some(([, selected]) => selected) ||\r\n                Object.entries(this.apollonEditor.selection.relationships).some(([, selected]) => selected))\r\n        );\r\n    }\r\n\r\n    // Icons\r\n    faDownload = faDownload;\r\n    faQuestionCircle = faQuestionCircle;\r\n    faArrow = faArrowLeft;\r\n    faX = faX;\r\n\r\n    /**\r\n     * Initializes Apollon Editor and sets auto save timer\r\n     */\r\n    ngOnInit() {\r\n        this.route.params.subscribe((params) => {\r\n            this.apollonDiagramId ??= Number(params['id']);\r\n            this.courseId ??= Number(params['courseId']);\r\n\r\n            this.courseService.find(this.courseId).subscribe({\r\n                next: (response) => {\r\n                    this.course = response.body!;\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.apollonDiagram.detail.error.loading');\r\n                },\r\n            });\r\n\r\n            this.apollonDiagramService.find(this.apollonDiagramId, this.courseId).subscribe({\r\n                next: (response) => {\r\n                    const diagram = response.body!;\r\n\r\n                    this.apollonDiagram = diagram;\r\n\r\n                    const model: UMLModel = diagram.jsonRepresentation && JSON.parse(diagram.jsonRepresentation);\r\n                    this.initializeApollonEditor(model);\r\n                    this.setAutoSaveTimer();\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.apollonDiagram.detail.error.loading');\r\n                },\r\n            });\r\n\r\n            this.languageHelper.language.subscribe(async (languageKey: string) => {\r\n                if (this.apollonEditor) {\r\n                    await this.apollonEditor.nextRender;\r\n                    this.apollonEditor.locale = languageKey as Locale;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears auto save interval and destroys Apollon Editor\r\n     */\r\n    ngOnDestroy() {\r\n        clearInterval(this.autoSaveInterval);\r\n        if (this.apollonEditor) {\r\n            this.apollonEditor.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes Apollon Editor with UML Model\r\n     * @param initialModel\r\n     */\r\n    initializeApollonEditor(initialModel: UMLModel) {\r\n        if (this.apollonEditor) {\r\n            this.apollonEditor.destroy();\r\n        }\r\n\r\n        this.apollonEditor = new ApollonEditor(this.editorContainer.nativeElement, {\r\n            mode: ApollonMode.Exporting,\r\n            model: initialModel,\r\n            type: this.apollonDiagram!.diagramType,\r\n            locale: this.translateService.currentLang as Locale,\r\n        });\r\n        this.apollonEditor.subscribeToModelChange((newModel) => {\r\n            this.isSaved = JSON.stringify(newModel) === this.apollonDiagram?.jsonRepresentation;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the diagram\r\n     */\r\n    async saveDiagram(): Promise<boolean> {\r\n        if (!this.apollonDiagram) {\r\n            return false;\r\n        }\r\n        const umlModel = this.apollonEditor!.model;\r\n        const updatedDiagram: ApollonDiagram = {\r\n            ...this.apollonDiagram,\r\n            jsonRepresentation: JSON.stringify(umlModel),\r\n        };\r\n\r\n        const result = await lastValueFrom(this.apollonDiagramService.update(updatedDiagram, this.courseId));\r\n        if (result?.ok) {\r\n            this.alertService.success('artemisApp.apollonDiagram.updated', { title: this.apollonDiagram?.title });\r\n            this.isSaved = true;\r\n            this.setAutoSaveTimer();\r\n            return true;\r\n        } else {\r\n            this.alertService.error('artemisApp.apollonDiagram.update.error');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the Detail View of an Apollon Diagram\r\n     * If there are unsaved changes ask to confirm exit\r\n     * @param closeModal: If the modal should be closed, or only the editor\r\n     */\r\n    confirmExitDetailView(closeModal: boolean) {\r\n        if (!this.isSaved) {\r\n            const modalRef: NgbModalRef = this.modalService.open(ConfirmAutofocusModalComponent, {\r\n                size: 'lg',\r\n                backdrop: 'static',\r\n            });\r\n            modalRef.componentInstance.title = 'artemisApp.apollonDiagram.detail.exitConfirm.title';\r\n            modalRef.componentInstance.text = 'artemisApp.apollonDiagram.detail.exitConfirm.question';\r\n            modalRef.componentInstance.textIsMarkdown = false;\r\n            modalRef.componentInstance.translateText = true;\r\n            modalRef.result.then(() => this.exitDetailView(closeModal));\r\n        } else {\r\n            this.exitDetailView(closeModal);\r\n        }\r\n    }\r\n\r\n    exitDetailView(closeModal: boolean) {\r\n        if (closeModal) {\r\n            this.closeModal.emit();\r\n        } else {\r\n            this.closeEdit.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function sets and starts an auto-save timer that automatically saves changes\r\n     * to the model after 30 seconds.\r\n     */\r\n    private setAutoSaveTimer(): void {\r\n        this.autoSaveInterval = window.setInterval(() => {\r\n            this.autoSaveTimer++;\r\n            if (this.autoSaveTimer >= AUTOSAVE_EXERCISE_INTERVAL) {\r\n                this.autoSaveTimer = 0;\r\n                this.saveDiagram();\r\n            }\r\n        }, AUTOSAVE_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Generates the Drag and Drop Model Quiz question.\r\n     *\r\n     * @async\r\n     */\r\n    async generateExercise() {\r\n        if (!this.hasInteractive) {\r\n            this.alertService.error('artemisApp.apollonDiagram.create.validationError');\r\n            return;\r\n        }\r\n\r\n        if (this.apollonEditor && this.apollonDiagram) {\r\n            const isSaved = await this.saveDiagram();\r\n            if (isSaved) {\r\n                const question = await generateDragAndDropQuizExercise(this.course, this.apollonDiagram.title!, this.apollonEditor.model!);\r\n                this.closeEdit.emit(question);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Download the current selection of the diagram as a PNG image.\r\n     *\r\n     * @async\r\n     */\r\n    async downloadSelection() {\r\n        if (!this.hasSelection) {\r\n            return;\r\n        }\r\n\r\n        const selection = [\r\n            ...Object.entries(this.apollonEditor!.selection.elements)\r\n                .filter(([, selected]) => selected)\r\n                .map(([id]) => id),\r\n            ...Object.entries(this.apollonEditor!.selection.relationships)\r\n                .filter(([, selected]) => selected)\r\n                .map(([id]) => id),\r\n        ];\r\n        const svg = await this.apollonEditor!.exportAsSVG({\r\n            keepOriginalSize: !this.crop,\r\n            include: selection,\r\n        });\r\n        const png = await convertRenderedSVGToPNG(svg);\r\n        this.download(png);\r\n    }\r\n\r\n    /**\r\n     * Automatically trigger the download of a file.\r\n     *\r\n     * @param {Blob | File} file A `Blob` or `File` object which should be downloaded.\r\n     */\r\n    private download(file: Blob | File) {\r\n        const anchor = document.createElement('a');\r\n        document.body.appendChild(anchor);\r\n        const url = window.URL.createObjectURL(file);\r\n        anchor.href = url;\r\n        anchor.download = `${this.apollonDiagram!.title}.png`;\r\n        anchor.click();\r\n\r\n        // Async revoke of ObjectURL to prevent failure on larger files.\r\n        setTimeout(() => {\r\n            window.URL.revokeObjectURL(url);\r\n            document.body.removeChild(anchor);\r\n        }, 0);\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.apollonDiagram.detail.title\" [translateValues]=\"{ title: this.apollonDiagram?.title }\"></h4>\r\n    <button type=\"button\" class=\"btn ms-auto text-secondary\" (click)=\"confirmExitDetailView(true)\"><fa-icon [icon]=\"faX\" size=\"lg\" /></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"row\">\r\n        <div class=\"d-flex align-items-center text-end mb-1\">\r\n            <button class=\"btn me-auto\" (click)=\"confirmExitDetailView(false)\">\r\n                <fa-icon [icon]=\"faArrow\" size=\"lg\" />\r\n                <span class=\"ms-1\" jhiTranslate=\"artemisApp.apollonDiagram.back\"></span>\r\n            </button>\r\n            <label class=\"me-1\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" name=\"keepOriginalSize\" [(ngModel)]=\"crop\" />&nbsp;\r\n                <span jhiTranslate=\"artemisApp.apollonDiagram.detail.crop\"></span>\r\n            </label>\r\n            <fa-icon class=\"me-1\" [icon]=\"faQuestionCircle\" ngbTooltip=\"{{ 'artemisApp.apollonDiagram.detail.help' | artemisTranslate }}\" />\r\n            <button class=\"btn btn-info me-1\" (click)=\"downloadSelection()\" [hidden]=\"!apollonDiagram\">\r\n                <fa-icon [icon]=\"faDownload\" />&nbsp;<span jhiTranslate=\"entity.action.download\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    @if (apollonDiagram) {\r\n        <div class=\"form-group mb-3\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.apollonDiagram.title\" for=\"field_title\"></label>\r\n            <input #titleField=\"ngModel\" required type=\"text\" class=\"form-control\" name=\"title\" id=\"field_title\" [(ngModel)]=\"apollonDiagram.title\" />\r\n        </div>\r\n    }\r\n    <div #editorContainer style=\"width: 100%; height: calc(100vh - 400px)\"></div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button class=\"btn btn-outline-primary me-auto\" (click)=\"confirmExitDetailView(true)\">Close</button>\r\n    <button\r\n        class=\"btn btn-outline-primary\"\r\n        (click)=\"saveDiagram()\"\r\n        [hidden]=\"!apollonDiagram\"\r\n        [disabled]=\"isSaved || (titleField && titleField?.invalid)\"\r\n        jhiTranslate=\"artemisApp.apollonDiagram.detail.save\"\r\n    ></button>\r\n    <div [ngbTooltip]=\"!hasInteractive ? ('artemisApp.apollonDiagram.create.validationError' | artemisTranslate) : undefined\">\r\n        <button\r\n            id=\"generate-quiz-exercise\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"generateExercise()\"\r\n            [hidden]=\"!apollonDiagram\"\r\n            [disabled]=\"!hasInteractive\"\r\n            jhiTranslate=\"artemisApp.apollonDiagram.detail.createLabel\"\r\n        ></button>\r\n    </div>\r\n</div>\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ApollonDiagramService } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { ApollonDiagramListComponent } from './apollon-diagram-list.component';\r\nimport { ApollonDiagramDetailComponent } from './apollon-diagram-detail.component';\r\n\r\n@Component({\r\n    selector: 'jhi-apollon-diagram-import-dialog',\r\n    templateUrl: './apollon-diagram-import-dialog.component.html',\r\n    providers: [ApollonDiagramService],\r\n    imports: [ApollonDiagramListComponent, ApollonDiagramDetailComponent],\r\n})\r\nexport class ApollonDiagramImportDialogComponent {\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    @Input()\r\n    courseId: number;\r\n\r\n    isInEditView = false;\r\n    apollonDiagramDetailId: number;\r\n\r\n    handleDetailOpen(id: number) {\r\n        this.isInEditView = true;\r\n        this.apollonDiagramDetailId = id;\r\n    }\r\n\r\n    handleDetailClose(dndQuestion?: DragAndDropQuestion) {\r\n        if (dndQuestion) {\r\n            this.activeModal.close(dndQuestion);\r\n        } else {\r\n            this.isInEditView = false;\r\n        }\r\n    }\r\n\r\n    closeModal() {\r\n        this.activeModal.dismiss();\r\n    }\r\n}\r\n", "<div>\r\n    @if (!this.isInEditView) {\r\n        <jhi-apollon-diagram-list [courseId]=\"this.courseId\" (openDiagram)=\"handleDetailOpen($event)\" (closeDialog)=\"closeModal()\" />\r\n    } @else {\r\n        <jhi-apollon-diagram-detail\r\n            [courseId]=\"this.courseId\"\r\n            [apollonDiagramId]=\"this.apollonDiagramDetailId\"\r\n            (closeEdit)=\"handleDetailClose($event)\"\r\n            (closeModal)=\"closeModal()\"\r\n        />\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, inject } from '@angular/core';\r\nimport { faBan, faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ValidationReason } from 'app/entities/exercise.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { JsonPipe } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-confirm-import-invalid-questions-modal',\r\n    templateUrl: './quiz-confirm-import-invalid-questions-modal.component.html',\r\n    styleUrls: ['./quiz-confirm-import-invalid-questions-modal.scss'],\r\n    imports: [FormsModule, TranslateDirective, FaIconComponent, JsonPipe],\r\n})\r\nexport class QuizConfirmImportInvalidQuestionsModalComponent {\r\n    activeModal = inject(NgbActiveModal);\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faTimes = faTimes;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    invalidFlaggedQuestions: ValidationReason[];\r\n    shouldImport: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    /**\r\n     * Reset the git repository.\r\n     *\r\n     * @function resetRepository\r\n     */\r\n    importQuestions() {\r\n        this.activeModal.close();\r\n        this.shouldImport.emit();\r\n    }\r\n\r\n    closeModal() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n}\r\n", "<form class=\"conflict-modal\" #confirmForm=\"ngForm\" name=\"confirmForm\" (ngSubmit)=\"importQuestions()\">\r\n    <div class=\"conflict-modal__header\">\r\n        <h4 class=\"fw-medium\" jhiTranslate=\"artemisApp.quizExercise.importWarningShort\"></h4>\r\n    </div>\r\n    <div class=\"conflict-modal__body\">\r\n        <span class=\"conflict-modal__body__warning\">\r\n            <fa-icon [icon]=\"faExclamationTriangle\" />\r\n            <div jhiTranslate=\"artemisApp.quizExercise.importWarningLong\"></div>\r\n            <p></p>\r\n            @for (reason of invalidFlaggedQuestions; track reason) {\r\n                <div>\r\n                    @if ((reason.translateValues | json) !== '{}') {\r\n                        <p jhiTranslate=\"{{ reason.translateKey }}\" [translateValues]=\"{ index: reason.translateValues.index }\"></p>\r\n                    }\r\n                    @if ((reason.translateValues | json) === '{}') {\r\n                        <p jhiTranslate=\"{{ reason.translateKey }}\"></p>\r\n                    }\r\n                </div>\r\n            }\r\n        </span>\r\n    </div>\r\n    <div class=\"conflict-modal__footer\">\r\n        <button class=\"conflict-modal__footer__cancel\" type=\"button\" data-dismiss=\"modal\" (click)=\"closeModal()\">\r\n            <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n        </button>\r\n        <button type=\"submit\" class=\"conflict-modal__footer__submit\" [disabled]=\"!confirmForm.valid\">\r\n            <fa-icon [icon]=\"faTimes\" /><span jhiTranslate=\"artemisApp.quizExercise.confirmImport\"></span>\r\n        </button>\r\n    </div>\r\n</form>\r\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation, inject } from '@angular/core';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { QuizConfirmImportInvalidQuestionsModalComponent } from 'app/exercises/quiz/manage/quiz-confirm-import-invalid-questions-modal.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { checkForInvalidFlaggedQuestions } from 'app/exercises/quiz/shared/quiz-manage-util.service';\r\nimport { FileService } from 'app/shared/http/file.service';\r\nimport JSZip from 'jszip';\r\nimport { KeyValuePipe, NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nexport enum State {\r\n    COURSE = 'Course',\r\n    EXAM = 'Exam',\r\n    FILE = 'File',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-question-list-edit-existing',\r\n    templateUrl: './quiz-question-list-edit-existing.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styleUrls: ['../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [NgClass, TranslateDirective, FormsModule, KeyValuePipe],\r\n})\r\nexport class QuizQuestionListEditExistingComponent implements OnChanges {\r\n    private modalService = inject(NgbModal);\r\n    private fileService = inject(FileService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private alertService = inject(AlertService);\r\n    private changeDetectorRef = inject(ChangeDetectorRef);\r\n\r\n    @Input() show: boolean;\r\n    @Input() courseId: number;\r\n    @Input() filePool: Map<string, { path?: string; file: File }>;\r\n\r\n    @Output() onQuestionsAdded = new EventEmitter<Array<QuizQuestion>>();\r\n    @Output() onFilesAdded = new EventEmitter<Map<string, { path: string; file: File }>>();\r\n\r\n    readonly MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n    readonly State = State;\r\n    readonly stateTexts = ['artemisApp.quizExercise.fromACourse', 'artemisApp.quizExercise.fromAnExam', 'artemisApp.quizExercise.fromAFile'];\r\n\r\n    currentState: State = State.COURSE;\r\n    selectedCourseId?: number;\r\n    selectedExamId?: number;\r\n    courses: Course[] = [];\r\n    exams: Exam[] = [];\r\n    allExistingQuestions: QuizQuestion[] = [];\r\n    existingQuestions: QuizQuestion[] = [];\r\n    searchQueryText: string;\r\n    dndFilterEnabled = true;\r\n    mcqFilterEnabled = true;\r\n    shortAnswerFilterEnabled = true;\r\n    importFile?: File;\r\n    importFileName: string;\r\n\r\n    ngOnChanges() {\r\n        if (this.show) {\r\n            this.courseManagementService.getAllCoursesWithQuizExercises().subscribe((res: HttpResponse<Course[]>) => {\r\n                this.courses = res.body!;\r\n                this.changeDetectorRef.detectChanges();\r\n            });\r\n            this.examManagementService.findAllExamsAccessibleToUser(this.courseId!).subscribe((res: HttpResponse<Exam[]>) => {\r\n                this.exams = res.body!;\r\n                this.changeDetectorRef.detectChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    setCurrentState(state: State) {\r\n        this.currentState = state;\r\n    }\r\n\r\n    /**\r\n     * Callback function for when a user selected a Course from the Dropdown list from 'Add existing questions'\r\n     * Populates list of quiz exercises for the selected course\r\n     */\r\n    onCourseSelect() {\r\n        this.allExistingQuestions = this.existingQuestions = [];\r\n        if (!this.selectedCourseId) {\r\n            return;\r\n        }\r\n        const selectedCourse = this.courses.find((course) => course.id === Number(this.selectedCourseId))!;\r\n        this.quizExerciseService.findForCourse(selectedCourse.id!).subscribe({\r\n            next: (quizExercisesResponse: HttpResponse<QuizExercise[]>) => {\r\n                if (quizExercisesResponse.body) {\r\n                    this.applyQuestionsAndFilter(quizExercisesResponse.body!);\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback function for when a user selected an Exam from the Dropdown list from 'Add existing questions'\r\n     * Populates list of quiz exercises for the selected exam\r\n     */\r\n    onExamSelect(): void {\r\n        this.allExistingQuestions = this.existingQuestions = [];\r\n        if (!this.selectedExamId) {\r\n            return;\r\n        }\r\n\r\n        /** Search the selected exam by id in all available exams **/\r\n        const selectedExam = this.exams.find((exam) => exam.id === Number(this.selectedExamId))!;\r\n\r\n        // For the given exam, get list of all quiz exercises. And for all quiz exercises, get list of all questions in a quiz exercise\r\n        this.quizExerciseService.findForExam(selectedExam.id!).subscribe({\r\n            next: (quizExercisesResponse: HttpResponse<QuizExercise[]>) => {\r\n                if (quizExercisesResponse.body) {\r\n                    this.applyQuestionsAndFilter(quizExercisesResponse.body!);\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Applies filter on questions shown in add existing questions view.\r\n     */\r\n    applyFilter() {\r\n        this.existingQuestions = [];\r\n        for (const question of this.allExistingQuestions) {\r\n            if (!this.searchQueryText || this.searchQueryText === '' || question.title!.toLowerCase().indexOf(this.searchQueryText.toLowerCase()) !== -1) {\r\n                if (this.mcqFilterEnabled && question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n                    this.existingQuestions.push(question);\r\n                }\r\n                if (this.dndFilterEnabled && question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n                    this.existingQuestions.push(question);\r\n                }\r\n                if (this.shortAnswerFilterEnabled && question.type === QuizQuestionType.SHORT_ANSWER) {\r\n                    this.existingQuestions.push(question);\r\n                }\r\n            }\r\n        }\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Assigns the uploaded import file\r\n     * @param event object containing the uploaded file\r\n     */\r\n    setImportFile(event: any): void {\r\n        if (event.target.files.length) {\r\n            const fileList: FileList = event.target.files;\r\n            this.importFile = fileList[0];\r\n            this.importFileName = this.importFile.name;\r\n        }\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Imports a json quiz file and adds questions to current quiz exercise.\r\n     */\r\n    async importQuiz() {\r\n        if (!this.importFile) {\r\n            return;\r\n        }\r\n\r\n        const fileName = this.importFile.name;\r\n        const fileExtension = fileName.split('.').last()?.toLowerCase();\r\n\r\n        if (fileExtension === 'zip') {\r\n            await this.handleZipFile();\r\n        } else {\r\n            this.handleJsonFile();\r\n        }\r\n    }\r\n    handleJsonFile() {\r\n        const fileReader = this.generateFileReader();\r\n        fileReader.onload = () => this.onFileLoadImport(fileReader);\r\n        fileReader.readAsText(this.importFile!);\r\n    }\r\n\r\n    async handleZipFile() {\r\n        const jszip = new JSZip();\r\n\r\n        try {\r\n            const zipContent = await jszip.loadAsync(this.importFile!);\r\n            const jsonFiles = Object.keys(zipContent.files).filter((fileName) => fileName.endsWith('.json'));\r\n\r\n            const images = await this.extractImagesFromZip(zipContent);\r\n            const jsonFile = zipContent.files[jsonFiles[0]];\r\n            const jsonContent = await jsonFile.async('string');\r\n            await this.processJsonContent(jsonContent, images);\r\n        } catch (error) {\r\n            alert('Import Quiz Failed! Invalid zip file.');\r\n            return;\r\n        }\r\n    }\r\n    async extractImagesFromZip(zipContent: JSZip) {\r\n        const images: Map<string, File> = new Map();\r\n        for (const [fileName, zipEntry] of Object.entries(zipContent.files)) {\r\n            if (!fileName.endsWith('.json')) {\r\n                const lastDotIndex = fileName.lastIndexOf('.');\r\n                const fileNameNoExtension = fileName.substring(0, lastDotIndex);\r\n                const imageData = await zipEntry.async('blob');\r\n                const imageFile = new File([imageData], fileName);\r\n                images.set(fileNameNoExtension, imageFile);\r\n            }\r\n        }\r\n        return images;\r\n    }\r\n\r\n    async processJsonContent(jsonContent: string, images: Map<string, File> = new Map()) {\r\n        try {\r\n            const questions = JSON.parse(jsonContent) as QuizQuestion[];\r\n            await this.addQuestions(questions, images);\r\n            // Clearing html elements\r\n            this.importFile = undefined;\r\n            this.importFileName = '';\r\n            const control = document.getElementById('importFileInput') as HTMLInputElement;\r\n            if (control) {\r\n                control.value = '';\r\n            }\r\n        } catch (e) {\r\n            alert('Import Quiz Failed! Invalid quiz file.');\r\n            return;\r\n        }\r\n    }\r\n\r\n    async onFileLoadImport(fileReader: FileReader) {\r\n        await this.processJsonContent(fileReader.result as string);\r\n    }\r\n    /**\r\n     * Move file reader creation to separate function to be able to mock\r\n     * https://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript/\r\n     */\r\n    generateFileReader() {\r\n        return new FileReader();\r\n    }\r\n\r\n    /**\r\n     * Adds selected quizzes to current quiz exercise\r\n     */\r\n    async addExistingQuestions() {\r\n        const quizQuestions: QuizQuestion[] = [];\r\n        for (const question of this.existingQuestions) {\r\n            if (question.exportQuiz) {\r\n                quizQuestions.push(question);\r\n            }\r\n        }\r\n        this.selectedCourseId = undefined;\r\n        this.selectedExamId = undefined;\r\n        this.allExistingQuestions = this.existingQuestions = [];\r\n        await this.addQuestions(quizQuestions);\r\n    }\r\n\r\n    /**\r\n     * Adds given questions to current quiz exercise.\r\n     * Ids are removed from new questions so that new id is assigned upon saving the quiz exercise.\r\n     * Caution: All \"invalid\" flags are also removed.\r\n     * Images are duplicated for drag and drop questions.\r\n     * @param quizQuestions questions to be added to currently edited quiz exercise\r\n     */\r\n    async addQuestions(quizQuestions: Array<QuizQuestion>, images: Map<string, File> = new Map()) {\r\n        const invalidQuizQuestionMap = checkForInvalidFlaggedQuestions(quizQuestions);\r\n        const validQuizQuestions = quizQuestions.filter((quizQuestion) => !invalidQuizQuestionMap[quizQuestion.id!]);\r\n        const invalidQuizQuestions = quizQuestions.filter((quizQuestion) => invalidQuizQuestionMap[quizQuestion.id!]);\r\n        if (invalidQuizQuestions.length > 0) {\r\n            const modal = this.modalService.open(QuizConfirmImportInvalidQuestionsModalComponent, {\r\n                keyboard: true,\r\n                size: 'lg',\r\n            });\r\n            modal.componentInstance.invalidFlaggedQuestions = invalidQuizQuestions.map((question, index) => {\r\n                return {\r\n                    translateKey: 'artemisApp.quizExercise.invalidReasons.questionHasInvalidFlaggedElements',\r\n                    translateValues: { index: index + 1 },\r\n                };\r\n            });\r\n            modal.componentInstance.shouldImport.subscribe(async () => {\r\n                const newQuizQuestions = validQuizQuestions.concat(invalidQuizQuestions);\r\n                return this.handleConversionOfExistingQuestions(newQuizQuestions, images);\r\n            });\r\n        } else {\r\n            return this.handleConversionOfExistingQuestions(validQuizQuestions, images);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find all QuizQuestions that belong to the given list of QuizExercise and add them to allExistingQuestions. Then, call applyFilter\r\n     *\r\n     * @param quizExercises the list of QuizExercise of which the QuizQuestions are to be retrieved and added\r\n     */\r\n    private applyQuestionsAndFilter(quizExercises: QuizExercise[]) {\r\n        for (const quizExercise of quizExercises) {\r\n            this.quizExerciseService.find(quizExercise.id!).subscribe((response: HttpResponse<QuizExercise>) => {\r\n                const quizExerciseResponse = response.body!;\r\n                if (quizExerciseResponse.quizQuestions && quizExerciseResponse.quizQuestions.length > 0) {\r\n                    for (const question of quizExerciseResponse.quizQuestions) {\r\n                        question.exercise = quizExercise;\r\n                        this.allExistingQuestions.push(question);\r\n                    }\r\n                }\r\n                this.applyFilter();\r\n            });\r\n        }\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Convert the given list of existing QuizQuestions to a list of new QuizQuestions\r\n     *\r\n     * @param existingQuizQuestions the list of existing QuizQuestions to be converted\r\n     * @param images if a zip file was provided, the images exported will be used to create the Dnd\r\n     * @return the list of new QuizQuestions\r\n     */\r\n    private async handleConversionOfExistingQuestions(existingQuizQuestions: Array<QuizQuestion>, images: Map<string, File> = new Map()) {\r\n        const newQuizQuestions = new Array<QuizQuestion>();\r\n        const files: Map<string, { path: string; file: File }> = new Map<string, { path: string; file: File }>();\r\n        // To make sure all questions are duplicated (new resources are created), we need to remove some fields from the input questions,\r\n        // This contains removing all ids, duplicating images in case of dnd questions, the question statistic and the exercise\r\n        let questionIndex = 0;\r\n        for (const question of existingQuizQuestions) {\r\n            // do not set question.exercise = this.quizExercise, because it will cause a cycle when converting to json\r\n            question.exercise = undefined;\r\n            question.quizQuestionStatistic = undefined;\r\n            question.invalid = false;\r\n            question.id = undefined;\r\n            if (question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n                const mcQuestion = question as MultipleChoiceQuestion;\r\n                mcQuestion.answerOptions!.forEach((answerOption) => {\r\n                    answerOption.id = undefined;\r\n                    answerOption.invalid = false;\r\n                });\r\n            } else if (question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n                const dndQuestion = question as DragAndDropQuestion;\r\n                // Get image from the old question and duplicate it on the server and then save new image to the question,\r\n                const backgroundImageFile: File | undefined = images.get(`q${questionIndex}_background`);\r\n                if (backgroundImageFile) {\r\n                    const backgroundFile = backgroundImageFile;\r\n                    files.set(backgroundFile.name, { path: dndQuestion.backgroundFilePath!, file: backgroundFile });\r\n                    dndQuestion.backgroundFilePath = backgroundFile.name;\r\n                } else {\r\n                    const backgroundFile = await this.fileService.getFile(dndQuestion.backgroundFilePath!, this.filePool);\r\n                    files.set(backgroundFile.name, { path: dndQuestion.backgroundFilePath!, file: backgroundFile });\r\n                    dndQuestion.backgroundFilePath = backgroundFile.name;\r\n                }\r\n\r\n                // For DropLocations, DragItems and CorrectMappings we need to provide tempID,\r\n                // This tempID is used for keep tracking of mappings by server. The server removes tempID and generated a new id,\r\n                dndQuestion.dropLocations!.forEach((dropLocation) => {\r\n                    dropLocation.tempID = dropLocation.id;\r\n                    dropLocation.id = undefined;\r\n                    dropLocation.invalid = false;\r\n                });\r\n                let dragItemCounter = 0;\r\n                for (const dragItem of dndQuestion.dragItems || []) {\r\n                    // Duplicating image on server. This is only valid for image drag items. For text drag items, pictureFilePath is undefined,\r\n                    if (dragItem.pictureFilePath) {\r\n                        const exportedDragItemFile: File | undefined = images.get(`q${questionIndex}_dragItem-${dragItemCounter}`);\r\n                        if (exportedDragItemFile) {\r\n                            files.set(exportedDragItemFile.name, { path: dragItem.pictureFilePath, file: exportedDragItemFile });\r\n                            dragItem.pictureFilePath = exportedDragItemFile.name;\r\n                        } else {\r\n                            const dragItemFile = await this.fileService.getFile(dragItem.pictureFilePath, this.filePool);\r\n                            files.set(dragItemFile.name, { path: dragItem.pictureFilePath, file: dragItemFile });\r\n                            dragItem.pictureFilePath = dragItemFile.name;\r\n                        }\r\n                    }\r\n                    dragItemCounter += 1;\r\n                    dragItem.tempID = dragItem.id;\r\n                    dragItem.id = undefined;\r\n                    dragItem.invalid = false;\r\n                }\r\n                for (const correctMapping of dndQuestion.correctMappings || []) {\r\n                    // Following fields are not required for dnd question. They will be generated by the server,\r\n                    correctMapping.id = undefined;\r\n                    correctMapping.dragItemIndex = undefined;\r\n                    correctMapping.dropLocationIndex = undefined;\r\n                    correctMapping.invalid = false;\r\n\r\n                    // Duplicating image on server. This is only valid for image drag items. For text drag items, pictureFilePath is undefined,\r\n                    const correctMappingDragItem = correctMapping.dragItem!;\r\n                    if (correctMappingDragItem.pictureFilePath) {\r\n                        correctMappingDragItem.pictureFilePath = dndQuestion.dragItems?.filter((dragItem) => dragItem.tempID === correctMappingDragItem.id)?.[0].pictureFilePath;\r\n                    }\r\n                    correctMappingDragItem.tempID = correctMappingDragItem?.id;\r\n                    correctMapping.dragItem!.id = undefined;\r\n                    correctMapping.dropLocation!.tempID = correctMapping.dropLocation!.id;\r\n                    correctMapping.dropLocation!.id = undefined;\r\n                }\r\n            } else if (question.type === QuizQuestionType.SHORT_ANSWER) {\r\n                const shortAnswerQuestion = question as ShortAnswerQuestion;\r\n\r\n                // For Spots, Solutions and CorrectMappings we need to provide tempID,\r\n                // This tempID is used for keep tracking of mappings by server. The server removes tempID and generated a new id,\r\n                shortAnswerQuestion.spots!.forEach((spot) => {\r\n                    spot.tempID = spot.id;\r\n                    spot.id = undefined;\r\n                    spot.invalid = false;\r\n                });\r\n                shortAnswerQuestion.solutions!.forEach((solution) => {\r\n                    solution.tempID = solution.id;\r\n                    solution.id = undefined;\r\n                    solution.invalid = false;\r\n                });\r\n                shortAnswerQuestion.correctMappings!.forEach((correctMapping) => {\r\n                    // Following fields are not required for short answer question. They will be generated by the server,\r\n                    correctMapping.id = undefined;\r\n                    correctMapping.shortAnswerSolutionIndex = undefined;\r\n                    correctMapping.shortAnswerSpotIndex = undefined;\r\n                    correctMapping.invalid = false;\r\n\r\n                    correctMapping.solution!.tempID = correctMapping.solution!.id;\r\n                    correctMapping.solution!.id = undefined;\r\n                    correctMapping.spot!.tempID = correctMapping.spot!.id;\r\n                    correctMapping.spot!.id = undefined;\r\n                });\r\n            }\r\n            newQuizQuestions.push(question);\r\n            questionIndex += 1;\r\n        }\r\n        if (files.size > 0) {\r\n            this.onFilesAdded.emit(files);\r\n        }\r\n        this.onQuestionsAdded.emit(newQuizQuestions);\r\n    }\r\n}\r\n", "@if (show) {\r\n    <div>\r\n        <div class=\"w100 row justify-content-center card-header\">\r\n            <div class=\"btn-group\">\r\n                @for (state of State | keyvalue; track state; let i = $index) {\r\n                    <div\r\n                        class=\"btn\"\r\n                        [ngClass]=\"{ 'btn-primary': currentState === state.value, 'btn-default': currentState !== state.value }\"\r\n                        (click)=\"setCurrentState(state.value)\"\r\n                    >\r\n                        <span [jhiTranslate]=\"stateTexts[i]\"></span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n        <hr />\r\n        <div class=\"form-group question-options existing-question-container\">\r\n            @if (currentState === State.COURSE) {\r\n                <div class=\"existing-question-select-course w-100\">\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.selectCourse\" class=\"font-weight-bold align-middle\"></span>\r\n                    <select class=\"form-select ms-5\" [(ngModel)]=\"selectedCourseId\" (change)=\"onCourseSelect()\" style=\"flex: 1\">\r\n                        @for (course of courses; track course) {\r\n                            <option [value]=\"course.id\">{{ course.title }}</option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n            }\r\n            @if (currentState === State.EXAM) {\r\n                <div class=\"existing-question-select-course w-100\">\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.selectExam\" class=\"font-weight-bold align-middle\"></span>\r\n                    <select class=\"form-select ms-5\" [(ngModel)]=\"selectedExamId\" (change)=\"onExamSelect()\" style=\"flex: 1\">\r\n                        @for (exam of exams; track exam) {\r\n                            <option [value]=\"exam.id\">{{ exam.title }}</option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n            }\r\n            @if (currentState === State.FILE) {\r\n                <div class=\"question-options row d-flex justify-content-start\">\r\n                    <div class=\"me-2 col flex-grow-0\" style=\"white-space: nowrap\">\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.importJSON\" class=\"font-weight-bold colon-suffix no-flex-shrink\"></span>\r\n                    </div>\r\n                    <div class=\"input-group flex-grow-1 col\">\r\n                        <input id=\"importFileInput\" type=\"file\" accept=\".json,.zip\" class=\"form-control\" (change)=\"setImportFile($event)\" placeholder=\"Upload file...\" />\r\n                        <button class=\"btn btn-outline-primary\" (click)=\"importQuiz()\" jhiTranslate=\"entity.action.import\" [ngClass]=\"{ disabled: !importFile }\"></button>\r\n                    </div>\r\n                </div>\r\n            }\r\n            @if (currentState !== State.FILE) {\r\n                @if (allExistingQuestions.length !== 0) {\r\n                    <div class=\"existing-question-filter w-100\">\r\n                        <input class=\"form-control search-query\" [(ngModel)]=\"searchQueryText\" placeholder=\"Search Query\" />\r\n                        <div class=\"checkboxes\">\r\n                            <div class=\"form-check\">\r\n                                <input type=\"checkbox\" id=\"cbDnDFilter\" class=\"form-check-input\" [(ngModel)]=\"dndFilterEnabled\" />\r\n                                <label class=\"form-check-label\" for=\"cbDnDFilter\" jhiTranslate=\"artemisApp.quizExercise.filter.dnd\"></label>\r\n                            </div>\r\n                            <div class=\"form-check\">\r\n                                <input type=\"checkbox\" id=\"cbMCFilter\" class=\"form-check-input\" [(ngModel)]=\"mcqFilterEnabled\" />\r\n                                <label class=\"form-check-label\" for=\"cbMCFilter\" jhiTranslate=\"artemisApp.quizExercise.filter.mcq\"></label>\r\n                            </div>\r\n                            <div class=\"form-check\">\r\n                                <input type=\"checkbox\" id=\"cbShortAnswerFilter\" class=\"form-check-input\" [(ngModel)]=\"shortAnswerFilterEnabled\" />\r\n                                <label class=\"form-check-label\" for=\"cbShortAnswerFilter\" jhiTranslate=\"artemisApp.quizExercise.filter.sa\"></label>\r\n                            </div>\r\n                        </div>\r\n                        <button class=\"btn btn-outline-secondary\" (click)=\"applyFilter()\" jhiTranslate=\"artemisApp.quizExercise.filter.applyFilter\"></button>\r\n                    </div>\r\n                }\r\n                @if (allExistingQuestions.length === 0 && selectedCourseId !== undefined) {\r\n                    <div>\r\n                        <div>&nbsp;</div>\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.noQuestionsFoundCourse\"></span>\r\n                    </div>\r\n                }\r\n                @if (existingQuestions.length !== 0) {\r\n                    <div class=\"table-responsive existing-question-table\">\r\n                        <table class=\"table table-striped\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th width=\"55%\">\r\n                                        <span jhiTranslate=\"artemisApp.quizExercise.export.questionTitle\"></span>\r\n                                    </th>\r\n                                    <th width=\"30%\">\r\n                                        <span jhiTranslate=\"artemisApp.quizExercise.export.quizExerciseTitle\"></span>\r\n                                    </th>\r\n                                    <th width=\"10%\">\r\n                                        <span jhiTranslate=\"artemisApp.exercise.type\"></span>\r\n                                    </th>\r\n                                    <th width=\"5%\">\r\n                                        <span jhiTranslate=\"entity.action.add\"></span>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                @for (question of existingQuestions; track question) {\r\n                                    <tr>\r\n                                        <td width=\"55%\">{{ question.title }}</td>\r\n                                        <td width=\"30%\">{{ question.exercise?.title }}</td>\r\n                                        <td width=\"10%\" class=\"mb-0\">\r\n                                            <h5>\r\n                                                @if (question.type === MULTIPLE_CHOICE) {\r\n                                                    <span class=\"badge bg-info align-text-top\">MC</span>\r\n                                                }\r\n                                            </h5>\r\n                                            <h5>\r\n                                                @if (question.type === DRAG_AND_DROP) {\r\n                                                    <span class=\"badge bg-warning align-text-top\">DnD</span>\r\n                                                }\r\n                                            </h5>\r\n                                            <h5>\r\n                                                @if (question.type === SHORT_ANSWER) {\r\n                                                    <span class=\"badge bg-success align-text-top\">SA</span>\r\n                                                }\r\n                                            </h5>\r\n                                        </td>\r\n                                        <td width=\"5%\">\r\n                                            <div class=\"form-check\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    id=\"cbExportQuizQuestion{{ question.id }}\"\r\n                                                    class=\"form-check-input\"\r\n                                                    [(ngModel)]=\"question.exportQuiz\"\r\n                                                    style=\"margin-left: 0\"\r\n                                                />\r\n                                                <label class=\"form-check-label\" for=\"cbExportQuizQuestion{{ question.id }}\">&nbsp;</label>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                }\r\n                @if (allExistingQuestions.length !== 0 && existingQuestions.length === 0 && selectedCourseId !== undefined) {\r\n                    <div jhiTranslate=\"artemisApp.quizExercise.noMatchingQuestionsFound\" class=\"ms-3\"></div>\r\n                }\r\n                @if (existingQuestions.length !== 0) {\r\n                    <button class=\"btn btn-outline-primary\" (click)=\"addExistingQuestions()\" jhiTranslate=\"artemisApp.quizExercise.addSelectedQuestions\"></button>\r\n                }\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n", "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, QueryList, ViewChildren, ViewEncapsulation, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { QuizQuestion, QuizQuestionType, ScoringType } from 'app/entities/quiz/quiz-question.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { QuizQuestionEdit } from 'app/exercises/quiz/manage/quiz-question-edit.interface';\r\nimport { MultipleChoiceQuestionEditComponent } from 'app/exercises/quiz/manage/multiple-choice-question/multiple-choice-question-edit.component';\r\nimport { DragAndDropQuestionEditComponent } from 'app/exercises/quiz/manage/drag-and-drop-question/drag-and-drop-question-edit.component';\r\nimport { ShortAnswerQuestionEditComponent } from 'app/exercises/quiz/manage/short-answer-question/short-answer-question-edit.component';\r\nimport { ApollonDiagramImportDialogComponent } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-import-dialog.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass } from '@angular/common';\r\nimport { QuizQuestionListEditExistingComponent } from './quiz-question-list-edit-existing.component';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-question-list-edit',\r\n    templateUrl: './quiz-question-list-edit.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styleUrls: ['./quiz-question-list-edit.component.scss', '../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        TranslateDirective,\r\n        MultipleChoiceQuestionEditComponent,\r\n        DragAndDropQuestionEditComponent,\r\n        ShortAnswerQuestionEditComponent,\r\n        FaIconComponent,\r\n        NgClass,\r\n        QuizQuestionListEditExistingComponent,\r\n    ],\r\n})\r\nexport class QuizQuestionListEditComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    @Input() courseId: number;\r\n    @Input() quizQuestions: QuizQuestion[] = [];\r\n    @Input() disabled = false;\r\n\r\n    @Output() onQuestionAdded = new EventEmitter<QuizQuestion>();\r\n    @Output() onQuestionUpdated = new EventEmitter();\r\n    @Output() onQuestionDeleted = new EventEmitter<QuizQuestion>();\r\n\r\n    @ViewChildren('editMultipleChoice')\r\n    editMultipleChoiceQuestionComponents: QueryList<MultipleChoiceQuestionEditComponent> = new QueryList<MultipleChoiceQuestionEditComponent>();\r\n\r\n    @ViewChildren('editDragAndDrop')\r\n    editDragAndDropQuestionComponents: QueryList<DragAndDropQuestionEditComponent> = new QueryList<DragAndDropQuestionEditComponent>();\r\n\r\n    @ViewChildren('editShortAnswer')\r\n    editShortAnswerQuestionComponents: QueryList<ShortAnswerQuestionEditComponent> = new QueryList<ShortAnswerQuestionEditComponent>();\r\n\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n\r\n    faPlus = faPlus;\r\n\r\n    showExistingQuestions = false;\r\n\r\n    fileMap = new Map<string, { path?: string; file: File }>();\r\n\r\n    /**\r\n     * Emit onQuestionUpdated if there is an update of the question.\r\n     */\r\n    handleQuestionUpdated() {\r\n        this.onQuestionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Remove the QuizQuestion from the quizQuestions list according to the given index.\r\n     *\r\n     * @param index the index of QuizQuestion to be deleted\r\n     */\r\n    handleQuestionDeleted(index: number) {\r\n        const quizQuestion = this.quizQuestions[index];\r\n        this.quizQuestions.splice(index, 1);\r\n        this.onQuestionDeleted.emit(quizQuestion);\r\n    }\r\n\r\n    /**\r\n     * Toggle showExistingQuestions flag and add the newly added quiz questions to the quizQuestions list.\r\n     * Then, emit onQuestionAdded.\r\n     *\r\n     * @param quizQuestions the list of newly added QuizQuestions\r\n     */\r\n    handleExistingQuestionsAdded(quizQuestions: Array<QuizQuestion>) {\r\n        this.showExistingQuestions = !this.showExistingQuestions;\r\n        for (const quizQuestion of quizQuestions) {\r\n            this.addQuestion(quizQuestion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given file to the fileMap for later upload.\r\n     * @param event the event containing the file and its name. The name provided may be different from the actual file name but has to correspond to the name set in the entity object.\r\n     */\r\n    handleFileAdded(event: { fileName: string; path?: string; file: File }) {\r\n        this.fileMap.set(event.fileName, { file: event.file, path: event.path });\r\n    }\r\n\r\n    /**\r\n     * Remove the given file from the fileMap.\r\n     * @param fileName the name of the file to be removed\r\n     */\r\n    handleFileRemoved(fileName: string) {\r\n        this.fileMap.delete(fileName);\r\n    }\r\n\r\n    /**\r\n     * Add all files from the given map to the fileMap.\r\n     * @param filesMap the map of files to be added\r\n     */\r\n    handleFilesAdded(filesMap: Map<string, { path: string; file: File }>) {\r\n        filesMap.forEach((value, fileName) => {\r\n            this.fileMap.set(fileName, value);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add an empty multiple choice question to the quiz\r\n     */\r\n    addMultipleChoiceQuestion() {\r\n        const mcQuestion = new MultipleChoiceQuestion();\r\n        mcQuestion.title = '';\r\n        mcQuestion.text = 'Enter your long question if needed';\r\n        mcQuestion.hint = 'Add a hint here (visible during the quiz via ?-Button)';\r\n        mcQuestion.scoringType = ScoringType.ALL_OR_NOTHING; // explicit default value for multiple questions\r\n        mcQuestion.randomizeOrder = true;\r\n        mcQuestion.points = 1;\r\n\r\n        const correctSampleAnswerOption = new AnswerOption();\r\n        correctSampleAnswerOption.isCorrect = true;\r\n        correctSampleAnswerOption.text = 'Enter a correct answer option here';\r\n        correctSampleAnswerOption.hint = 'Add a hint here (visible during the quiz via ?-Button)';\r\n        correctSampleAnswerOption.explanation = 'Add an explanation here (only visible in feedback after quiz has ended)';\r\n\r\n        const incorrectSampleAnswerOption = new AnswerOption();\r\n        incorrectSampleAnswerOption.isCorrect = false;\r\n        incorrectSampleAnswerOption.text = 'Enter a wrong answer option here';\r\n\r\n        mcQuestion.answerOptions = [correctSampleAnswerOption, incorrectSampleAnswerOption];\r\n        this.addQuestion(mcQuestion);\r\n    }\r\n\r\n    /**\r\n     * Add an empty drag and drop question to the quiz\r\n     */\r\n    addDragAndDropQuestion() {\r\n        const dndQuestion = new DragAndDropQuestion();\r\n        dndQuestion.title = '';\r\n        dndQuestion.text = 'Enter your long question if needed';\r\n        dndQuestion.hint = 'Add a hint here (visible during the quiz via ?-Button)';\r\n        dndQuestion.scoringType = ScoringType.PROPORTIONAL_WITH_PENALTY; // explicit default value for drag and drop questions\r\n        dndQuestion.randomizeOrder = true;\r\n        dndQuestion.points = 1;\r\n        dndQuestion.dropLocations = [];\r\n        dndQuestion.dragItems = [];\r\n        dndQuestion.correctMappings = [];\r\n        this.addQuestion(dndQuestion);\r\n    }\r\n\r\n    async importApollonDragAndDropQuestion() {\r\n        const modalRef: NgbModalRef = this.modalService.open(ApollonDiagramImportDialogComponent as Component, { size: 'xl', backdrop: 'static' });\r\n        modalRef.componentInstance.courseId = this.courseId;\r\n\r\n        const question = await modalRef.result;\r\n        if (question) {\r\n            this.addQuestion(question);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an empty short answer question to the quiz\r\n     */\r\n    addShortAnswerQuestion(): void {\r\n        const shortAnswerQuestion = new ShortAnswerQuestion();\r\n        shortAnswerQuestion.title = '';\r\n        shortAnswerQuestion.text =\r\n            'Enter your long question if needed\\n\\n' +\r\n            'Select a part of the text and click on Add Spot to automatically create an input field and the corresponding mapping\\n\\n' +\r\n            'You can define a input field like this: This [-spot 1] an [-spot 2] field.\\n\\n' +\r\n            'To define the solution for the input fields you need to create a mapping (multiple mapping also possible):\\n\\n\\n' +\r\n            '[-option 1] is\\n' +\r\n            '[-option 2] input\\n' +\r\n            '[-option 1,2] correctInBothFields';\r\n        shortAnswerQuestion.scoringType = ScoringType.PROPORTIONAL_WITHOUT_PENALTY; // explicit default value for short answer questions\r\n        shortAnswerQuestion.randomizeOrder = true;\r\n        shortAnswerQuestion.points = 1;\r\n        shortAnswerQuestion.spots = [];\r\n        shortAnswerQuestion.solutions = [];\r\n        shortAnswerQuestion.correctMappings = [];\r\n        this.addQuestion(shortAnswerQuestion);\r\n    }\r\n\r\n    /**\r\n     * Toggles existing questions view\r\n     */\r\n    showHideExistingQuestions() {\r\n        this.showExistingQuestions = !this.showExistingQuestions;\r\n    }\r\n\r\n    /**\r\n     * triggers the parsing of the editor content in the designated edit component\r\n     */\r\n    parseAllQuestions() {\r\n        const editQuestionComponents: Array<QuizQuestionEdit> = [\r\n            ...this.editMultipleChoiceQuestionComponents.toArray(),\r\n            ...this.editDragAndDropQuestionComponents.toArray(),\r\n            ...this.editShortAnswerQuestionComponents.toArray(),\r\n        ];\r\n        editQuestionComponents.forEach((component) => component.prepareForSave());\r\n    }\r\n\r\n    /**\r\n     * Add the given QuizQuestion to the quizQuestions list. Then, emit onQuestionAdded event.\r\n     *\r\n     * @param quizQuestion the QuizQuestion to be added.\r\n     */\r\n    private addQuestion(quizQuestion: QuizQuestion) {\r\n        this.quizQuestions!.push(quizQuestion);\r\n        this.onQuestionAdded.emit(quizQuestion);\r\n    }\r\n}\r\n", "<div class=\"edit-quiz\">\r\n    <div class=\"row text-start\">\r\n        <h4>\r\n            <span jhiTranslate=\"artemisApp.quizExercise.questions\"></span>\r\n        </h4>\r\n    </div>\r\n    <div class=\"row mt-1\">\r\n        @for (quizQuestion of quizQuestions; track quizQuestion; let i = $index) {\r\n            <div class=\"question card\">\r\n                @if (quizQuestion.type === MULTIPLE_CHOICE) {\r\n                    <div>\r\n                        <jhi-multiple-choice-question-edit\r\n                            #editMultipleChoice\r\n                            [question]=\"quizQuestion\"\r\n                            [questionIndex]=\"i + 1\"\r\n                            (questionUpdated)=\"handleQuestionUpdated()\"\r\n                            (questionDeleted)=\"handleQuestionDeleted(i)\"\r\n                        />\r\n                    </div>\r\n                }\r\n                @if (quizQuestion.type === DRAG_AND_DROP) {\r\n                    <div>\r\n                        <jhi-drag-and-drop-question-edit\r\n                            #editDragAndDrop\r\n                            [question]=\"quizQuestion\"\r\n                            [questionIndex]=\"i + 1\"\r\n                            [filePool]=\"fileMap\"\r\n                            (questionUpdated)=\"handleQuestionUpdated()\"\r\n                            (questionDeleted)=\"handleQuestionDeleted(i)\"\r\n                            (addNewFile)=\"handleFileAdded($event)\"\r\n                            (removeFile)=\"handleFileRemoved($event)\"\r\n                        />\r\n                    </div>\r\n                }\r\n                @if (quizQuestion.type === SHORT_ANSWER) {\r\n                    <div>\r\n                        <jhi-short-answer-question-edit\r\n                            #editShortAnswer\r\n                            [question]=\"quizQuestion\"\r\n                            [questionIndex]=\"i + 1\"\r\n                            (questionUpdated)=\"handleQuestionUpdated()\"\r\n                            (questionDeleted)=\"handleQuestionDeleted(i)\"\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (!disabled) {\r\n        <div class=\"row mt-2\">\r\n            <div class=\"col-12 col-sm-6 col-xl mb-1\">\r\n                <button id=\"quiz-add-mc-question\" class=\"btn btn-block btn-success\" (click)=\"addMultipleChoiceQuestion()\">\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.addMultipleChoiceQuestion\"></span>\r\n                </button>\r\n            </div>\r\n            <div class=\"col-12 col-sm-6 col-xl mb-1\">\r\n                <button id=\"quiz-add-dnd-question\" class=\"btn btn-block btn-success\" (click)=\"addDragAndDropQuestion()\">\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.addDragAndDropQuestion\"></span>\r\n                </button>\r\n            </div>\r\n            <div class=\"col-12 col-sm-6 col-xl mb-1\">\r\n                <button id=\"quiz-import-apollon-dnd-question\" class=\"btn btn-block btn-success\" (click)=\"importApollonDragAndDropQuestion()\">\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.addApollonDragAndDropQuestion\"></span>\r\n                </button>\r\n            </div>\r\n            <div class=\"col-12 col-sm-6 col-xl mb-1\">\r\n                <button id=\"quiz-add-short-answer-question\" class=\"btn btn-block btn-success\" (click)=\"addShortAnswerQuestion()\">\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.addShortAnswerQuestion\"></span>\r\n                </button>\r\n            </div>\r\n            <div class=\"col-12 col-sm-6 col-xl mb-1\">\r\n                <button class=\"btn btn-block\" (click)=\"showHideExistingQuestions()\" [ngClass]=\"{ 'btn-primary': showExistingQuestions, 'btn-success': !showExistingQuestions }\">\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.addExistingQuestions\"></span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (!disabled) {\r\n        <div class=\"row mt-2 mb-5\">\r\n            <jhi-quiz-question-list-edit-existing\r\n                [show]=\"showExistingQuestions\"\r\n                [courseId]=\"courseId\"\r\n                [filePool]=\"fileMap\"\r\n                (onQuestionsAdded)=\"handleExistingQuestionsAdded($event)\"\r\n                (onFilesAdded)=\"handleFilesAdded($event)\"\r\n            />\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["AnswerOption", "id", "text", "hint", "explanation", "isCorrect", "question", "invalid", "constructor", "ShortAnswerQuestion", "QuizQuestion", "spots", "solutions", "correctMappings", "matchLetterCase", "similarityValue", "constructor", "QuizQuestionType", "SHORT_ANSWER", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "answerOption_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleIsCorrect", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "text", "questionChanged", "emit", "\u0275$index_38_r4", "$index", "deleteAnswer", "hint", "explanation", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "\u0275\u0275property", "isCorrect", "faCheck", "faXmark", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "faTrash", "faQuestionCircle", "faExclamationCircle", "MultipleChoiceVisualQuestionComponent", "_question", "question", "EventEmitter", "faExclamationTriangle", "faCircle", "faPlus", "parseQuestion", "markdown", "answerOptions", "length", "forEach", "answerOption", "index", "splice", "correctToggleDisabled", "singleChoice", "some", "option", "addNewAnswer", "undefined", "push", "AnswerOption", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "MultipleChoiceVisualQuestionComponent_For_28_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "NgbTooltip", "NgClass", "ArtemisTranslatePipe", "styles", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "question", "\u0275\u0275pureFunction0", "_c2", "questionIndex", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "changesInVisualMode", "\u0275\u0275elementEnd", "MultipleChoiceQuestionEditComponent", "modalService", "inject", "NgbModal", "changeDetector", "ChangeDetectorRef", "markdownEditor", "visualChild", "questionUpdated", "EventEmitter", "questionDeleted", "questionEditorText", "isQuestionCollapsed", "showPreview", "inPreviewMode", "showMultipleChoiceQuestionPreview", "showMultipleChoiceQuestionVisual", "correctAction", "CorrectMultipleChoiceAnswerAction", "wrongAction", "WrongMultipleChoiceAnswerAction", "explanationAction", "QuizExplanationAction", "hintAction", "QuizHintAction", "multipleChoiceActions", "faTrash", "faAngleRight", "faAngleDown", "faQuestionCircle", "MAX_POINTS", "MAX_QUIZ_QUESTION_POINTS", "ngOnInit", "generateMarkdown", "generateExerciseHintExplanation", "answerOptions", "map", "answerOption", "isCorrect", "join", "onSingleChoiceChanged", "singleChoice", "scoringType", "ScoringType", "ALL_OR_NOTHING", "open", "content", "size", "changesInMarkdown", "prepareForSave", "emit", "detectChanges", "inVisualMode", "markdown", "parseQuestion", "cleanupQuestion", "parseMarkdown", "onLeaveVisualTab", "text", "undefined", "explanation", "hint", "hasCorrectOption", "domainActionsFound", "textWithDomainActions", "currentAnswerOption", "action", "length", "AnswerOption", "push", "resetMultipleChoicePreview", "resetMultipleChoiceVisual", "deleteQuestion", "selectors", "viewQuery", "rf", "ctx", "i0", "_r1", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275twoWayBindingSet", "title", "points", "randomizeOrder", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "MultipleChoiceQuestionEditComponent_Conditional_95_Template", "MultipleChoiceQuestionEditComponent_Conditional_103_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "\u0275\u0275propertyInterpolate1", "tmp_13_0", "\u0275\u0275conditional", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "MinValidator", "MaxValidator", "NgModel", "TranslateDirective", "NgbCollapse", "QuizScoringInfoModalComponent", "NgbTooltip", "MarkdownEditorMonacoComponent", "MultipleChoiceQuestionComponent", "MultipleChoiceVisualQuestionComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "changeDetection", "ApollonDiagramService", "http", "inject", "HttpClient", "entityTitleService", "EntityTitleService", "resourceUrl", "create", "apollonDiagram", "courseId", "copy", "convert", "post", "observe", "update", "put", "find", "diagramId", "get", "pipe", "tap", "res", "sendTitlesToEntityTitleService", "body", "delete", "getDiagramsByCourse", "options", "createRequestOption", "params", "forEach", "bind", "Object", "assign", "diagram", "setTitle", "EntityType", "DIAGRAM", "id", "title", "factory", "\u0275fac", "providedIn", "ApollonDiagramCreateFormComponent", "activeModal", "inject", "NgbActiveModal", "apollonDiagramService", "ApollonDiagramService", "alertService", "AlertService", "apollonDiagram", "isSaving", "titleInput", "faSave", "ngAfterViewInit", "nativeElement", "focus", "save", "create", "courseId", "subscribe", "next", "body", "close", "error", "dismiss", "selectors", "viewQuery", "rf", "ctx", "decls", "vars", "consts", "template", "\u0275\u0275elementStart", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275twoWayBindingSet", "title", "diagramType", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "editForm_r2", "form", "invalid", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "NgModel", "NgForm", "TranslateDirective", "FaIconComponent", "encapsulation", "ApollonDiagram", "id", "title", "jsonRepresentation", "diagramType", "courseId", "constructor", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r5", "apollonDiagram_r4", "\u0275\u0275nextContext", "$implicit", "ctx_r1", "\u0275\u0275resetView", "delete", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ButtonSize", "MEDIUM", "title", "dialogError$", "faTimes", "_r3", "handleOpenDialogClick", "id", "\u0275\u0275template", "ApollonDiagramListComponent_Conditional_23_For_36_Conditional_25_Template", "\u0275\u0275textInterpolate", "courseId", "getTitleForApollonDiagram", "\u0275\u0275propertyInterpolate", "diagramType", "\u0275\u0275conditional", "course", "isAtLeastInstructor", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "reverse", "sortRows", "\u0275\u0275repeaterCreate", "ApollonDiagramListComponent_Conditional_23_For_36_Template", "\u0275\u0275componentInstance", "trackId", "\u0275\u0275twoWayProperty", "faSort", "\u0275\u0275repeater", "apollonDiagrams", "ApollonDiagramListComponent", "apollonDiagramsService", "inject", "ApollonDiagramService", "alertService", "AlertService", "modalService", "NgbModal", "sortService", "SortService", "route", "ActivatedRoute", "courseService", "CourseManagementService", "openDiagram", "EventEmitter", "closeDialog", "dialogErrorSource", "Subject", "asObservable", "faPlus", "faX", "ngOnInit", "Number", "snapshot", "paramMap", "get", "find", "subscribe", "courseResponse", "body", "loadDiagrams", "getDiagramsByCourse", "next", "response", "error", "apollonDiagram", "success", "filter", "diagram", "trim", "length", "openCreateDiagramDialog", "modalRef", "open", "ApollonDiagramCreateFormComponent", "size", "backdrop", "formComponentInstance", "componentInstance", "ApollonDiagram", "UMLDiagramType", "ClassDiagram", "result", "then", "apollonDiagramId", "emit", "handleCloseDiagramClick", "_index", "item", "sortByProperty", "selectors", "inputs", "outputs", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ApollonDiagramListComponent_Conditional_23_Template", "TranslateDirective", "FaIconComponent", "SortDirective", "SortByDirective", "DeleteButtonDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "apollonDiagram", "title", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "ApollonDiagramDetailComponent", "apollonDiagramService", "inject", "ApollonDiagramService", "courseService", "CourseManagementService", "alertService", "AlertService", "translateService", "TranslateService", "languageHelper", "JhiLanguageHelper", "modalService", "NgbModal", "route", "ActivatedRoute", "editorContainer", "titleField", "courseId", "apollonDiagramId", "closeEdit", "EventEmitter", "closeModal", "course", "apollonEditor", "isSaved", "autoSaveInterval", "autoSaveTimer", "crop", "hasInteractive", "Object", "entries", "model", "interactive", "elements", "some", "selected", "relationships", "hasSelection", "selection", "faDownload", "faQuestionCircle", "faArrow", "faArrowLeft", "faX", "ngOnInit", "params", "subscribe", "Number", "find", "next", "response", "body", "error", "diagram", "jsonRepresentation", "JSON", "parse", "initializeApollonEditor", "setAutoSaveTimer", "language", "languageKey", "__async", "nextRender", "locale", "ngOnDestroy", "clearInterval", "destroy", "initialModel", "ApollonEditor", "nativeElement", "mode", "ApollonMode", "Exporting", "type", "diagramType", "currentLang", "subscribeToModelChange", "newModel", "stringify", "saveDiagram", "umlModel", "updatedDiagram", "__spreadProps", "__spreadValues", "lastValueFrom", "update", "ok", "success", "confirmExitDetailView", "exitDetailView", "modalRef", "open", "ConfirmAutofocusModalComponent", "size", "backdrop", "componentInstance", "text", "textIsMarkdown", "translateText", "result", "then", "emit", "window", "setInterval", "AUTOSAVE_EXERCISE_INTERVAL", "AUTOSAVE_CHECK_INTERVAL", "generateExercise", "question", "generateDragAndDropQuizExercise", "downloadSelection", "filter", "map", "id", "svg", "exportAsSVG", "keepOriginalSize", "include", "png", "convertRenderedSVGToPNG", "download", "file", "anchor", "document", "createElement", "appendChild", "url", "URL", "createObjectURL", "href", "click", "setTimeout", "revokeObjectURL", "removeChild", "selectors", "viewQuery", "rf", "ctx", "decls", "vars", "consts", "template", "\u0275\u0275listener", "_r1", "\u0275\u0275template", "ApollonDiagramDetailComponent_Conditional_40_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c2", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "invalid", "undefined", "TranslateDirective", "FaIconComponent", "FormsModule", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "RequiredValidator", "NgModel", "NgbTooltip", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleDetailOpen", "closeModal", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "courseId", "_r3", "handleDetailClose", "apollonDiagramDetailId", "ApollonDiagramImportDialogComponent", "activeModal", "inject", "NgbActiveModal", "isInEditView", "id", "dndQuestion", "close", "dismiss", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "ApollonDiagramService", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ApollonDiagramImportDialogComponent_Conditional_2_Template", "ApollonDiagramImportDialogComponent_Conditional_3_Template", "\u0275\u0275conditional", "ApollonDiagramListComponent", "ApollonDiagramDetailComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "reason_r2", "translateKey", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "translateValues", "index", "\u0275\u0275elementStart", "\u0275\u0275template", "QuizConfirmImportInvalidQuestionsModalComponent_For_19_Conditional_3_Template", "QuizConfirmImportInvalidQuestionsModalComponent_For_19_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "\u0275\u0275pipeBind1", "QuizConfirmImportInvalidQuestionsModalComponent", "activeModal", "inject", "NgbActiveModal", "faBan", "faTimes", "faExclamationTriangle", "invalidFlaggedQuestions", "shouldImport", "EventEmitter", "importQuestions", "close", "emit", "closeModal", "dismiss", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275repeaterCreate", "QuizConfirmImportInvalidQuestionsModalComponent_For_19_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "confirmForm_r3", "valid", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "NgForm", "TranslateDirective", "FaIconComponent", "JsonPipe", "styles", "import_jszip", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "state_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setCurrentState", "value", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "currentState", "stateTexts", "\u0275$index_12_r4", "course_r6", "id", "\u0275\u0275textInterpolate", "title", "\u0275\u0275twoWayListener", "$event", "_r5", "i0", "\u0275\u0275twoWayBindingSet", "selectedCourseId", "onCourseSelect", "\u0275\u0275repeaterCreate", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_16_For_8_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "courses", "exam_r8", "_r7", "selectedExamId", "onExamSelect", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_17_For_8_Template", "exams", "_r9", "setImportFile", "importQuiz", "\u0275\u0275pureFunction1", "_c1", "importFile", "_r10", "searchQueryText", "dndFilterEnabled", "mcqFilterEnabled", "shortAnswerFilterEnabled", "applyFilter", "\u0275\u0275template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_3_For_34_Conditional_13_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_3_For_34_Conditional_17_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_3_For_34_Conditional_21_Template", "question_r12", "_r11", "exportQuiz", "exercise", "\u0275\u0275conditional", "type", "MULTIPLE_CHOICE", "DRAG_AND_DROP", "SHORT_ANSWER", "\u0275\u0275propertyInterpolate1", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_3_For_34_Template", "existingQuestions", "_r13", "addExistingQuestions", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_1_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_2_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_3_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_4_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Conditional_5_Template", "allExistingQuestions", "length", "undefined", "QuizQuestionListEditExistingComponent_Conditional_0_For_8_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_16_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_17_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_18_Template", "QuizQuestionListEditExistingComponent_Conditional_0_Conditional_19_Template", "\u0275\u0275pipeBind1", "State", "COURSE", "EXAM", "FILE", "QuizQuestionListEditExistingComponent", "modalService", "inject", "NgbModal", "fileService", "FileService", "courseManagementService", "CourseManagementService", "examManagementService", "ExamManagementService", "quizExerciseService", "QuizExerciseService", "alertService", "AlertService", "changeDetectorRef", "ChangeDetectorRef", "show", "courseId", "filePool", "onQuestionsAdded", "EventEmitter", "onFilesAdded", "QuizQuestionType", "importFileName", "ngOnChanges", "getAllCoursesWithQuizExercises", "subscribe", "res", "body", "detectChanges", "findAllExamsAccessibleToUser", "state", "selectedCourse", "find", "course", "Number", "findForCourse", "next", "quizExercisesResponse", "applyQuestionsAndFilter", "error", "onError", "selectedExam", "exam", "findForExam", "question", "toLowerCase", "indexOf", "push", "event", "target", "files", "fileList", "name", "__async", "split", "last", "handleZipFile", "handleJsonFile", "fileReader", "generateFileReader", "onload", "onFileLoadImport", "readAsText", "jszip", "JSZip", "zipContent", "loadAsync", "jsonFiles", "Object", "keys", "filter", "fileName", "endsWith", "images", "extractImagesFromZip", "jsonContent", "async", "processJsonContent", "alert", "Map", "zipEntry", "entries", "lastDotIndex", "lastIndexOf", "fileNameNoExtension", "substring", "imageData", "imageFile", "File", "set", "questions", "JSON", "parse", "addQuestions", "control", "document", "getElementById", "result", "FileReader", "quizQuestions", "invalidQuizQuestionMap", "checkForInvalidFlaggedQuestions", "validQuizQuestions", "quizQuestion", "invalidQuizQuestions", "modal", "open", "QuizConfirmImportInvalidQuestionsModalComponent", "keyboard", "size", "componentInstance", "invalidFlaggedQuestions", "map", "index", "translateKey", "translateValues", "shouldImport", "newQuizQuestions", "concat", "handleConversionOfExistingQuestions", "quizExercises", "quizExercise", "response", "quizExerciseResponse", "existingQuizQuestions", "Array", "questionIndex", "quizQuestionStatistic", "invalid", "answerOptions", "forEach", "answerOption", "dndQuestion", "backgroundImageFile", "get", "backgroundFile", "path", "backgroundFilePath", "file", "getFile", "dropLocations", "dropLocation", "tempID", "dragItemCounter", "dragItem", "dragItems", "pictureFilePath", "exportedDragItemFile", "dragItemFile", "correctMapping", "correctMappings", "dragItemIndex", "dropLocationIndex", "correctMappingDragItem", "shortAnswerQuestion", "spots", "spot", "solutions", "solution", "shortAnswerSolutionIndex", "shortAnswerSpotIndex", "emit", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "QuizQuestionListEditExistingComponent_Conditional_0_Template", "NgClass", "TranslateDirective", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "KeyValuePipe", "styles", "encapsulation", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleQuestionUpdated", "\u0275$index_18_r3", "$index", "handleQuestionDeleted", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "quizQuestion_r5", "_r6", "$event", "handleFileAdded", "handleFileRemoved", "fileMap", "_r7", "\u0275\u0275template", "QuizQuestionListEditComponent_For_13_Conditional_3_Template", "QuizQuestionListEditComponent_For_13_Conditional_4_Template", "QuizQuestionListEditComponent_For_13_Conditional_5_Template", "\u0275\u0275conditional", "type", "MULTIPLE_CHOICE", "DRAG_AND_DROP", "SHORT_ANSWER", "_r8", "addMultipleChoiceQuestion", "\u0275\u0275element", "addDragAndDropQuestion", "importApollonDragAndDropQuestion", "addShortAnswerQuestion", "showHideExistingQuestions", "faPlus", "\u0275\u0275pureFunction2", "_c3", "showExistingQuestions", "_r9", "handleExistingQuestionsAdded", "handleFilesAdded", "courseId", "QuizQuestionListEditComponent", "modalService", "inject", "NgbModal", "quizQuestions", "disabled", "onQuestionAdded", "EventEmitter", "onQuestionUpdated", "onQuestionDeleted", "editMultipleChoiceQuestionComponents", "QueryList", "editDragAndDropQuestionComponents", "editShortAnswerQuestionComponents", "QuizQuestionType", "Map", "emit", "index", "quizQuestion", "splice", "addQuestion", "event", "set", "fileName", "file", "path", "delete", "filesMap", "forEach", "value", "mcQuestion", "MultipleChoiceQuestion", "title", "text", "hint", "scoringType", "ScoringType", "ALL_OR_NOTHING", "randomizeOrder", "points", "correctSampleAnswerOption", "AnswerOption", "isCorrect", "explanation", "incorrectSampleAnswerOption", "answerOptions", "dndQuestion", "DragAndDropQuestion", "PROPORTIONAL_WITH_PENALTY", "dropLocations", "dragItems", "correctMappings", "__async", "modalRef", "open", "ApollonDiagramImportDialogComponent", "size", "backdrop", "componentInstance", "question", "result", "shortAnswerQuestion", "ShortAnswerQuestion", "PROPORTIONAL_WITHOUT_PENALTY", "spots", "solutions", "parseAllQuestions", "toArray", "component", "prepareForSave", "push", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275repeaterCreate", "QuizQuestionListEditComponent_For_13_Template", "\u0275\u0275repeaterTrackByIdentity", "QuizQuestionListEditComponent_Conditional_15_Template", "QuizQuestionListEditComponent_Conditional_16_Template", "\u0275\u0275repeater", "TranslateDirective", "MultipleChoiceQuestionEditComponent", "DragAndDropQuestionEditComponent", "ShortAnswerQuestionEditComponent", "FaIconComponent", "NgClass", "QuizQuestionListEditExistingComponent", "styles", "encapsulation", "changeDetection"]
}
