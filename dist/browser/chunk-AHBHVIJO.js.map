{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise-resolver.service.ts"],
  "sourcesContent": ["import { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\n\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { TextExerciseService } from 'app/exercises/text/manage/text-exercise/text-exercise.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { of } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TextExerciseResolver implements Resolve<TextExercise> {\r\n    private textExerciseService = inject(TextExerciseService);\r\n    private courseService = inject(CourseManagementService);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n\r\n    /**\r\n     * Resolves the route and initializes text exercise\r\n     * @param route\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot) {\r\n        if (route.params['exerciseId']) {\r\n            return this.textExerciseService.find(route.params['exerciseId'], true).pipe(\r\n                filter((res) => !!res.body),\r\n                map((textExercise: HttpResponse<TextExercise>) => textExercise.body!),\r\n            );\r\n        } else if (route.params['courseId']) {\r\n            if (route.params['examId'] && route.params['exerciseGroupId']) {\r\n                return this.exerciseGroupService.find(route.params['courseId'], route.params['examId'], route.params['exerciseGroupId']).pipe(\r\n                    filter((res) => !!res.body),\r\n                    map((exerciseGroup: HttpResponse<ExerciseGroup>) => new TextExercise(undefined, exerciseGroup.body || undefined)),\r\n                );\r\n            } else {\r\n                return this.courseService.find(route.params['courseId']).pipe(\r\n                    filter((res) => !!res.body),\r\n                    map((course: HttpResponse<Course>) => new TextExercise(course.body || undefined, undefined)),\r\n                );\r\n            }\r\n        }\r\n        return of(new TextExercise(undefined, undefined));\r\n    }\r\n}\r\n"],
  "mappings": "sOAcA,IAAaA,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,oBAAsBC,EAAOC,CAAmB,EAChDC,cAAgBF,EAAOG,CAAuB,EAC9CC,qBAAuBJ,EAAOK,CAAoB,EAM1DC,QAAQC,EAA6B,CACjC,OAAIA,EAAMC,OAAO,WACN,KAAKT,oBAAoBU,KAAKF,EAAMC,OAAO,WAAe,EAAI,EAAEE,KACnEC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKC,GAA6CA,EAAaF,IAAK,CAAC,EAElEN,EAAMC,OAAO,SAChBD,EAAMC,OAAO,QAAaD,EAAMC,OAAO,gBAChC,KAAKJ,qBAAqBK,KAAKF,EAAMC,OAAO,SAAaD,EAAMC,OAAO,OAAWD,EAAMC,OAAO,eAAkB,EAAEE,KACrHC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKE,GAA+C,IAAIC,EAAaC,OAAWF,EAAcH,MAAQK,MAAS,CAAC,CAAC,EAG9G,KAAKhB,cAAcO,KAAKF,EAAMC,OAAO,QAAW,EAAEE,KACrDC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKK,GAAiC,IAAIF,EAAaE,EAAON,MAAQK,OAAWA,MAAS,CAAC,CAAC,EAIjGE,EAAG,IAAIH,EAAaC,OAAWA,MAAS,CAAC,CACpD,4CA7BSpB,EAAoB,6BAApBA,EAAoBuB,QAApBvB,EAAoBwB,UAAAC,WADP,MAAM,CAAA,SACnBzB,CAAoB,GAAA",
  "names": ["TextExerciseResolver", "textExerciseService", "inject", "TextExerciseService", "courseService", "CourseManagementService", "exerciseGroupService", "ExerciseGroupService", "resolve", "route", "params", "find", "pipe", "filter", "res", "body", "map", "textExercise", "exerciseGroup", "TextExercise", "undefined", "course", "of", "factory", "\u0275fac", "providedIn"]
}
