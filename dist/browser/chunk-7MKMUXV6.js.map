{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/course-competency.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n    Competency,\r\n    CompetencyExerciseLink,\r\n    CompetencyJol,\r\n    CompetencyProgress,\r\n    CompetencyRelation,\r\n    CompetencyRelationDTO,\r\n    CompetencyWithTailRelationDTO,\r\n    CourseCompetency,\r\n    CourseCompetencyProgress,\r\n} from 'app/entities/competency.model';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { CompetencyPageableSearch, SearchResult } from 'app/shared/table/pageable-table';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { CompetencyRecommendation } from 'app/course/competencies/generate-competencies/generate-competencies.component';\r\n\r\ntype EntityResponseType = HttpResponse<CourseCompetency>;\r\ntype EntityArrayResponseType = HttpResponse<CourseCompetency[]>;\r\n\r\ntype CompetencyJolResponseType = HttpResponse<{\r\n    current: CompetencyJol;\r\n    prior?: CompetencyJol;\r\n}>;\r\ntype CompetencyJolMapResponseType = HttpResponse<{\r\n    [key: number]: {\r\n        current: CompetencyJol;\r\n        prior?: CompetencyJol;\r\n    };\r\n}>;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CourseCompetencyService {\r\n    protected httpClient = inject(HttpClient);\r\n    protected entityTitleService = inject(EntityTitleService);\r\n    protected lectureUnitService = inject(LectureUnitService);\r\n    protected accountService = inject(AccountService);\r\n\r\n    protected resourceURL = 'api/atlas';\r\n\r\n    getForImport(pageable: CompetencyPageableSearch) {\r\n        const params = this.createCompetencySearchHttpParams(pageable);\r\n        return this.httpClient\r\n            .get(`${this.resourceURL}/course-competencies/for-import`, { params, observe: 'response' })\r\n            .pipe(map((resp: HttpResponse<SearchResult<CourseCompetency>>) => resp && resp.body!));\r\n    }\r\n\r\n    /**\r\n     * Creates HttpParams for each field of the given pageable element.\r\n     *\r\n     * @param pageable the CompetencyPageableSearch to create HttpParams for\r\n     * @return the HttpParams\r\n     */\r\n    private createCompetencySearchHttpParams(pageable: CompetencyPageableSearch) {\r\n        return new HttpParams()\r\n            .set('pageSize', String(pageable.pageSize))\r\n            .set('page', String(pageable.page))\r\n            .set('sortingOrder', pageable.sortingOrder)\r\n            .set('sortedColumn', pageable.sortedColumn)\r\n            .set('title', pageable.title)\r\n            .set('description', pageable.description)\r\n            .set('courseTitle', pageable.courseTitle)\r\n            .set('semester', pageable.semester);\r\n    }\r\n\r\n    getAllForCourse(courseId: number, filtered = false): Observable<EntityArrayResponseType> {\r\n        return this.httpClient\r\n            .get<CourseCompetency[]>(`${this.resourceURL}/courses/${courseId}/course-competencies${filtered ? '?filter=true' : ''}`, { observe: 'response' })\r\n            .pipe(\r\n                map((res: EntityArrayResponseType) => this.convertArrayResponseDatesFromServer(res)),\r\n                tap((res: EntityArrayResponseType) => res?.body?.forEach(this.sendTitlesToEntityTitleService.bind(this))),\r\n            );\r\n    }\r\n\r\n    getProgress(competencyId: number, courseId: number, refresh = false) {\r\n        let params = new HttpParams();\r\n        params = params.set('refresh', refresh.toString());\r\n        return this.httpClient.get<CompetencyProgress>(`${this.resourceURL}/courses/${courseId}/course-competencies/${competencyId}/student-progress`, {\r\n            params,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getCourseProgress(competencyId: number, courseId: number) {\r\n        return this.httpClient.get<CourseCompetencyProgress>(`${this.resourceURL}/courses/${courseId}/course-competencies/${competencyId}/course-progress`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    findById(competencyId: number, courseId: number) {\r\n        return this.httpClient.get<Competency>(`${this.resourceURL}/courses/${courseId}/course-competencies/${competencyId}`, { observe: 'response' }).pipe(\r\n            map((res: EntityResponseType) => {\r\n                this.convertCompetencyResponseFromServer(res);\r\n                this.sendTitlesToEntityTitleService(res?.body);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    // triggers the generation of competencies from the given course description\r\n    // the generated competencies are returned asynchronously over the websocket on the topic /topic/iris/competencies/{courseId}\r\n    generateCompetenciesFromCourseDescription(courseId: number, courseDescription: string, currentCompetencies: CompetencyRecommendation[]): Observable<HttpResponse<void>> {\r\n        const params = {\r\n            courseDescription: courseDescription,\r\n            currentCompetencies: currentCompetencies,\r\n        };\r\n        return this.httpClient.post<void>(`${this.resourceURL}/courses/${courseId}/course-competencies/generate-from-description`, params, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getCourseCompetencyTitles(courseId: number) {\r\n        return this.httpClient.get<string[]>(`${this.resourceURL}/courses/${courseId}/course-competencies/titles`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    importAll(courseId: number, sourceCourseId: number, importRelations: boolean) {\r\n        const params = new HttpParams().set('importRelations', importRelations);\r\n        return this.httpClient.post<Array<CompetencyWithTailRelationDTO>>(`${this.resourceURL}/courses/${courseId}/course-competencies/import-all/${sourceCourseId}`, null, {\r\n            params: params,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    createCompetencyRelation(relation: CompetencyRelation, courseId: number) {\r\n        const relationDTO: CompetencyRelationDTO = { tailCompetencyId: relation.tailCompetency?.id, headCompetencyId: relation.headCompetency?.id, relationType: relation.type };\r\n        return this.httpClient.post<CompetencyRelationDTO>(`${this.resourceURL}/courses/${courseId}/course-competencies/relations`, relationDTO, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getCompetencyRelations(courseId: number) {\r\n        return this.httpClient.get<CompetencyRelationDTO[]>(`${this.resourceURL}/courses/${courseId}/course-competencies/relations`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    removeCompetencyRelation(competencyRelationId: number, courseId: number) {\r\n        return this.httpClient.delete(`${this.resourceURL}/courses/${courseId}/course-competencies/relations/${competencyRelationId}`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the judgement of learning (JoL) value for a specific competency in a course.\r\n     *\r\n     * @param courseId the id of the course for which the competency belongs\r\n     * @param competencyId the id of the competency for which to get the JoL value\r\n     * @return an Observable of HttpResponse containing the current (and prior) JoL value or null if not set\r\n     */\r\n    getJoL(courseId: number, competencyId: number): Observable<CompetencyJolResponseType> {\r\n        return this.httpClient\r\n            .get<{ current: CompetencyJol; prior?: CompetencyJol }>(`${this.resourceURL}/courses/${courseId}/course-competencies/${competencyId}/jol`, { observe: 'response' })\r\n            .pipe(map((res: CompetencyJolResponseType) => res));\r\n    }\r\n\r\n    /**\r\n     * Sets the judgment of learning for a competency.\r\n     *\r\n     * @param courseId The ID of the course.\r\n     * @param competencyId The ID of the competency.\r\n     * @param jolValue The judgment of learning value.\r\n     * @returns An Observable of the HTTP response.\r\n     */\r\n    setJudgementOfLearning(courseId: number, competencyId: number, jolValue: number): Observable<HttpResponse<void>> {\r\n        return this.httpClient.put<void>(`${this.resourceURL}/courses/${courseId}/course-competencies/${competencyId}/jol/${jolValue}`, null, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the judgement of learning (JoL) values for all competencies of a specified course.\r\n     *\r\n     * @param courseId the id of the course for which the JoL values should be fetched\r\n     * @return an Observable of HttpResponse containing a map from competency id to current (and prior) JoL value\r\n     */\r\n    getJoLAllForCourse(courseId: number): Observable<CompetencyJolMapResponseType> {\r\n        return this.httpClient\r\n            .get<{ [key: number]: { current: CompetencyJol; prior?: CompetencyJol } }>(`${this.resourceURL}/courses/${courseId}/course-competencies/jol`, { observe: 'response' })\r\n            .pipe(map((res: CompetencyJolMapResponseType) => res));\r\n    }\r\n\r\n    protected convertCompetencyResponseFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body?.softDueDate) {\r\n            res.body.softDueDate = convertDateFromServer(res.body.softDueDate);\r\n        }\r\n        res.body?.lectureUnitLinks?.forEach((lectureUnitLink) => {\r\n            if (lectureUnitLink.lectureUnit) {\r\n                lectureUnitLink.lectureUnit = this.lectureUnitService.convertLectureUnitDateFromServer(lectureUnitLink.lectureUnit);\r\n            }\r\n        });\r\n        if (res.body?.course) {\r\n            this.accountService.setAccessRightsForCourse(res.body.course);\r\n        }\r\n        this.convertExerciseLinksFromServer(res.body?.exerciseLinks);\r\n\r\n        return res;\r\n    }\r\n\r\n    private convertExerciseLinksFromServer(exerciseLinks: CompetencyExerciseLink[] | undefined) {\r\n        exerciseLinks?.forEach((exerciseLink) => {\r\n            exerciseLink.exercise = ExerciseService.convertExerciseDatesFromServer(exerciseLink.exercise);\r\n            ExerciseService.parseExerciseCategories(exerciseLink.exercise);\r\n            if (exerciseLink.exercise) {\r\n                this.accountService.setAccessRightsForExercise(exerciseLink.exercise);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected convertCompetencyFromClient(courseCompetency: CourseCompetency): CourseCompetency {\r\n        const copy = Object.assign({}, courseCompetency, {\r\n            softDueDate: convertDateFromClient(courseCompetency.softDueDate),\r\n        });\r\n\r\n        this.convertCompetencyLinksFromClient(copy);\r\n\r\n        return copy;\r\n    }\r\n\r\n    private convertCompetencyLinksFromClient(courseCompetency: CourseCompetency) {\r\n        courseCompetency.lectureUnitLinks?.forEach((lectureUnitLink) => {\r\n            if (lectureUnitLink.lectureUnit) {\r\n                lectureUnitLink.lectureUnit = this.lectureUnitService.convertLectureUnitDatesFromClient(lectureUnitLink.lectureUnit);\r\n            }\r\n        });\r\n        courseCompetency.exerciseLinks?.forEach((exerciseLink) => {\r\n            if (exerciseLink.exercise) {\r\n                exerciseLink.exercise = ExerciseService.convertExerciseFromClient(exerciseLink.exercise);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper methods for date conversion from server and client\r\n     */\r\n    protected convertArrayResponseDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.map((competency: CourseCompetency) => (competency.softDueDate = convertDateFromServer(competency.softDueDate)));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected sendTitlesToEntityTitleService(competency: CourseCompetency | undefined | null) {\r\n        this.entityTitleService.setTitle(EntityType.COMPETENCY, [competency?.id], competency?.title);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["CourseCompetencyService", "httpClient", "inject", "HttpClient", "entityTitleService", "EntityTitleService", "lectureUnitService", "LectureUnitService", "accountService", "AccountService", "resourceURL", "getForImport", "pageable", "params", "createCompetencySearchHttpParams", "get", "observe", "pipe", "map", "resp", "body", "HttpParams", "set", "String", "pageSize", "page", "sortingOrder", "sortedColumn", "title", "description", "courseTitle", "semester", "getAllForCourse", "courseId", "filtered", "res", "convertArrayResponseDatesFromServer", "tap", "forEach", "sendTitlesToEntityTitleService", "bind", "getProgress", "competencyId", "refresh", "toString", "getCourseProgress", "findById", "convertCompetencyResponseFromServer", "generateCompetenciesFromCourseDescription", "courseDescription", "currentCompetencies", "post", "getCourseCompetencyTitles", "importAll", "sourceCourseId", "importRelations", "createCompetencyRelation", "relation", "relationDTO", "tailCompetencyId", "tailCompetency", "id", "headCompetencyId", "headCompetency", "relationType", "type", "getCompetencyRelations", "removeCompetencyRelation", "competencyRelationId", "delete", "getJoL", "setJudgementOfLearning", "jolValue", "put", "getJoLAllForCourse", "softDueDate", "convertDateFromServer", "lectureUnitLinks", "lectureUnitLink", "lectureUnit", "convertLectureUnitDateFromServer", "course", "setAccessRightsForCourse", "convertExerciseLinksFromServer", "exerciseLinks", "exerciseLink", "exercise", "ExerciseService", "convertExerciseDatesFromServer", "parseExerciseCategories", "setAccessRightsForExercise", "convertCompetencyFromClient", "courseCompetency", "copy", "Object", "assign", "convertDateFromClient", "convertCompetencyLinksFromClient", "convertLectureUnitDatesFromClient", "convertExerciseFromClient", "competency", "setTitle", "EntityType", "COMPETENCY", "factory", "\u0275fac", "providedIn"]
}
