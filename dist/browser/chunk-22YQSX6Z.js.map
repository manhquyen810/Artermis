{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/feedback/feedback.utils.ts", "src/main/webapp/app/exercises/shared/result/result-progress-bar/result-progress-bar.component.ts", "src/main/webapp/app/exercises/shared/result/result-progress-bar/result-progress-bar.component.html", "src/main/webapp/app/exercises/shared/result/result.component.ts", "src/main/webapp/app/exercises/shared/result/result.component.html"],
  "sourcesContent": ["import { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ResultTemplateStatus } from 'app/exercises/shared/result/result.utils';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { hasExerciseDueDatePassed } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ExerciseCacheService } from 'app/exercises/shared/exercise/exercise-cache.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\n\r\nexport type FeedbackComponentPreparedParams = {\r\n    exercise: Exercise | undefined;\r\n    result: Result;\r\n    exerciseType?: ExerciseType;\r\n    showScoreChart?: boolean;\r\n    messageKey?: string;\r\n    latestDueDate?: dayjs.Dayjs;\r\n    showMissingAutomaticFeedbackInformation?: boolean;\r\n};\r\n\r\n/**\r\n * Prepares the parameters for the feedback component {@link FeedbackComponent}\r\n */\r\nexport function prepareFeedbackComponentParameters(\r\n    exercise: Exercise | undefined,\r\n    result: Result,\r\n    participation: Participation,\r\n    templateStatus: ResultTemplateStatus,\r\n    latestDueDate: dayjs.Dayjs | undefined,\r\n    exerciseService: ExerciseCacheService | ExerciseService,\r\n) {\r\n    const preparedParameters: FeedbackComponentPreparedParams = {\r\n        exercise: exercise,\r\n        result: result,\r\n    };\r\n\r\n    if (!result.participation) {\r\n        result.participation = participation;\r\n    }\r\n\r\n    if (exercise) {\r\n        preparedParameters.exerciseType = exercise.type!;\r\n        preparedParameters.showScoreChart = true;\r\n    }\r\n\r\n    if (templateStatus === ResultTemplateStatus.MISSING) {\r\n        preparedParameters.messageKey = 'artemisApp.result.notLatestSubmission';\r\n    }\r\n\r\n    if (result?.assessmentType === AssessmentType.AUTOMATIC && exercise?.type === ExerciseType.PROGRAMMING && hasExerciseDueDatePassed(exercise, participation)) {\r\n        determineShowMissingAutomaticFeedbackInformation(latestDueDate, exerciseService, preparedParameters, exercise);\r\n    }\r\n\r\n    return preparedParameters;\r\n}\r\n\r\n/**\r\n * Determines if some information about testcases could still be hidden because of later individual due dates\r\n */\r\nfunction determineShowMissingAutomaticFeedbackInformation(\r\n    latestDueDate: dayjs.Dayjs | undefined,\r\n    exerciseService: ExerciseCacheService | ExerciseService,\r\n    preparedParameters: FeedbackComponentPreparedParams,\r\n    exercise: Exercise,\r\n) {\r\n    if (latestDueDate) {\r\n        setShowMissingAutomaticFeedbackInformation(latestDueDate, preparedParameters);\r\n    } else {\r\n        exerciseService.getLatestDueDate(exercise!.id!).subscribe((latestDueDate) => {\r\n            if (latestDueDate) {\r\n                setShowMissingAutomaticFeedbackInformation(latestDueDate, preparedParameters);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction setShowMissingAutomaticFeedbackInformation(latestDueDate: dayjs.Dayjs, preparedParameters: FeedbackComponentPreparedParams) {\r\n    preparedParameters.latestDueDate = latestDueDate;\r\n    preparedParameters.showMissingAutomaticFeedbackInformation = dayjs().isBefore(latestDueDate);\r\n}\r\n", "import { Component, OnDestroy, effect, input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'jhi-result-progress-bar',\r\n    imports: [CommonModule, TranslateDirective, ArtemisTranslatePipe, ArtemisDurationFromSecondsPipe, FontAwesomeModule, NgbTooltipModule],\r\n    templateUrl: './result-progress-bar.component.html',\r\n    styleUrl: './result-progress-bar.component.scss',\r\n})\r\nexport class ResultProgressBarComponent implements OnDestroy {\r\n    estimatedRemaining = input<number>(0);\r\n    estimatedDuration = input<number>(0);\r\n    isBuilding = input.required<boolean>();\r\n    isQueued = input.required<boolean>();\r\n    showBorder = input<boolean>(false);\r\n\r\n    isQueueProgressBarAnimated: boolean;\r\n    queueProgressBarOpacity: number;\r\n    queueProgressBarValue: number;\r\n\r\n    isBuildProgressBarAnimated: boolean;\r\n    buildProgressBarOpacity: number;\r\n    buildProgressBarValue: number;\r\n\r\n    estimatedDurationInterval: ReturnType<typeof setInterval> | undefined;\r\n\r\n    protected readonly faCircleNotch = faCircleNotch;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const isBuildingOrQueued = this.cleanUpIfNotBuildingOrQueued();\r\n            if (!isBuildingOrQueued) {\r\n                return;\r\n            }\r\n\r\n            clearInterval(this.estimatedDurationInterval);\r\n            this.updateProgressBarState();\r\n        });\r\n    }\r\n\r\n    private updateProgressBarState() {\r\n        if (this.estimatedDuration() && this.estimatedRemaining()) {\r\n            if (this.isBuilding()) {\r\n                this.setupQueueProgressBarForBuild();\r\n                this.updateBuildProgressBar();\r\n            } else if (this.isQueued()) {\r\n                this.setupBuildProgressBarForQueued();\r\n                this.updateQueueProgressBar();\r\n            }\r\n        } else {\r\n            if (this.isBuilding()) {\r\n                this.setupQueueProgressBarForBuild();\r\n                this.isBuildProgressBarAnimated = false;\r\n                this.buildProgressBarValue = 100;\r\n            } else if (this.isQueued()) {\r\n                this.setupBuildProgressBarForQueued();\r\n                this.isQueueProgressBarAnimated = false;\r\n                this.queueProgressBarValue = 100;\r\n            }\r\n            this.estimatedDurationInterval = setInterval(() => {\r\n                this.alternateOpacity(this.isQueued());\r\n            }, 1000); // 1 second\r\n        }\r\n    }\r\n\r\n    private cleanUpIfNotBuildingOrQueued() {\r\n        const isBuildingOrQueued = true;\r\n        if (!this.isBuilding() && !this.isQueued()) {\r\n            if (this.estimatedDurationInterval) {\r\n                clearInterval(this.estimatedDurationInterval);\r\n                this.estimatedDurationInterval = undefined;\r\n            }\r\n            this.isQueueProgressBarAnimated = false;\r\n        }\r\n        return isBuildingOrQueued;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.estimatedDurationInterval) {\r\n            clearInterval(this.estimatedDurationInterval);\r\n        }\r\n    }\r\n\r\n    private setupBuildProgressBarForQueued() {\r\n        this.isBuildProgressBarAnimated = true;\r\n        this.buildProgressBarOpacity = 1;\r\n        this.buildProgressBarValue = 0;\r\n    }\r\n\r\n    private setupQueueProgressBarForBuild() {\r\n        this.isQueueProgressBarAnimated = true;\r\n        this.queueProgressBarOpacity = 1;\r\n        this.queueProgressBarValue = 100;\r\n    }\r\n\r\n    private updateQueueProgressBar() {\r\n        this.isQueueProgressBarAnimated = true;\r\n        this.queueProgressBarOpacity = 1;\r\n        if (this.estimatedDuration() === 0) {\r\n            this.queueProgressBarValue = 100;\r\n            return;\r\n        }\r\n        this.queueProgressBarValue = Math.round((1 - this.estimatedRemaining() / this.estimatedDuration()) * 100);\r\n    }\r\n\r\n    private updateBuildProgressBar() {\r\n        this.isBuildProgressBarAnimated = true;\r\n        this.buildProgressBarOpacity = 1;\r\n        if (this.estimatedDuration() === 0) {\r\n            this.buildProgressBarValue = 100;\r\n            return;\r\n        }\r\n        this.buildProgressBarValue = Math.round((1 - this.estimatedRemaining() / this.estimatedDuration()) * 100);\r\n    }\r\n\r\n    private alternateOpacity(isQueue?: boolean) {\r\n        if (isQueue) {\r\n            this.queueProgressBarOpacity = this.queueProgressBarOpacity === 1 ? 0 : 1;\r\n        } else {\r\n            this.buildProgressBarOpacity = this.buildProgressBarOpacity === 1 ? 0 : 1;\r\n        }\r\n    }\r\n}\r\n", "<div\r\n    class=\"mw-custom text-nowrap\"\r\n    [ngClass]=\"{ 'rounded-3 p-1 border border-1 bg-module fw-semibold': showBorder() }\"\r\n    [ngbTooltip]=\"'artemisApp.editor.toolTip' | artemisTranslate\"\r\n>\r\n    <div class=\"mb-1 progress-bar-status-text\">\r\n        <fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" class=\"me-1\" />\r\n        @if (isQueued()) {\r\n            <span jhiTranslate=\"artemisApp.editor.queued\"></span>\r\n        } @else {\r\n            <span jhiTranslate=\"artemisApp.editor.building\"></span>\r\n        }\r\n        @if (estimatedRemaining() && estimatedRemaining() > 0) {\r\n            <span> {{ estimatedRemaining() | artemisDurationFromSeconds }}</span>\r\n        }\r\n    </div>\r\n    <div class=\"d-flex justify-content-center align-items-center gap-2 w-100\">\r\n        <div class=\"progress w-25\" role=\"progressbar\" [style.height.px]=\"3\">\r\n            <div\r\n                class=\"progress-bar progress-bar-striped bg-warning\"\r\n                [ngClass]=\"{ 'no-transition': !isQueueProgressBarAnimated }\"\r\n                [style.opacity]=\"queueProgressBarOpacity\"\r\n                [style.width.%]=\"queueProgressBarValue\"\r\n            ></div>\r\n        </div>\r\n        <div class=\"progress w-75\" role=\"progressbar\" [style.height.px]=\"3\">\r\n            <div\r\n                class=\"progress-bar progress-bar-striped progress-bar-animated\"\r\n                [ngClass]=\"{ 'no-transition': !isBuildProgressBarAnimated }\"\r\n                [style.opacity]=\"buildProgressBarOpacity\"\r\n                [style.width.%]=\"buildProgressBarValue\"\r\n            ></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, inject } from '@angular/core';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport {\r\n    MissingResultInformation,\r\n    ResultTemplateStatus,\r\n    evaluateTemplateStatus,\r\n    getResultIconClass,\r\n    getTextColorClass,\r\n    isAthenaAIResult,\r\n} from 'app/exercises/shared/result/result.utils';\r\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Router } from '@angular/router';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { isProgrammingExerciseStudentParticipation, isResultPreliminary } from 'app/exercises/programming/shared/utils/programming-exercise.utils';\r\nimport { Participation, ParticipationType, getExercise } from 'app/entities/participation/participation.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { Submission, SubmissionExerciseType } from 'app/entities/submission.model';\r\nimport { Exercise, ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { FeedbackComponent } from 'app/exercises/shared/feedback/feedback.component';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { captureException } from '@sentry/angular';\r\nimport { faCircleNotch, faExclamationCircle, faExclamationTriangle, faFile } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { Badge, ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { ExerciseCacheService } from 'app/exercises/shared/exercise/exercise-cache.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { isPracticeMode } from 'app/entities/participation/student-participation.model';\r\nimport { prepareFeedbackComponentParameters } from 'app/exercises/shared/feedback/feedback.utils';\r\nimport { CsvDownloadService } from 'app/shared/util/CsvDownloadService';\r\nimport { ResultProgressBarComponent } from './result-progress-bar/result-progress-bar.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass, UpperCasePipe } from '@angular/common';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisTimeAgoPipe } from 'app/shared/pipes/artemis-time-ago.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-result',\r\n    templateUrl: './result.component.html',\r\n    styleUrls: ['./result.component.scss'],\r\n    imports: [\r\n        ResultProgressBarComponent,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgClass,\r\n        NgbTooltip,\r\n        UpperCasePipe,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n        ArtemisTimeAgoPipe,\r\n        ArtemisDurationFromSecondsPipe,\r\n    ],\r\n})\r\n\r\n/**\r\n * When using the result component make sure that the reference to the participation input is changed if the result changes\r\n * e.g. by using Object.assign to trigger ngOnChanges which makes sure that the result is updated\r\n */\r\nexport class ResultComponent implements OnInit, OnChanges, OnDestroy {\r\n    private participationService = inject(ParticipationService);\r\n    private translateService = inject(TranslateService);\r\n    private modalService = inject(NgbModal);\r\n    private exerciseService = inject(ExerciseService);\r\n    private exerciseCacheService = inject(ExerciseCacheService, { optional: true });\r\n    private resultService = inject(ResultService);\r\n    private csvDownloadService = inject(CsvDownloadService);\r\n    private router = inject(Router);\r\n\r\n    // make constants available to html\r\n    readonly ResultTemplateStatus = ResultTemplateStatus;\r\n    readonly MissingResultInfo = MissingResultInformation;\r\n    readonly ParticipationType = ParticipationType;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly roundScoreSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly getCourseFromExercise = getCourseFromExercise;\r\n    protected readonly AssessmentType = AssessmentType;\r\n\r\n    @Input() participation: Participation;\r\n    @Input() isBuilding: boolean;\r\n    @Input() isQueued = false;\r\n    @Input() short = true;\r\n    @Input() result?: Result;\r\n    @Input() showUngradedResults = false;\r\n    @Input() showBadge = false;\r\n    @Input() showIcon = true;\r\n    @Input() isInSidebarCard = false;\r\n    @Input() showCompletion = true;\r\n    @Input() missingResultInfo = MissingResultInformation.NONE;\r\n    @Input() exercise?: Exercise;\r\n    @Input() estimatedCompletionDate?: dayjs.Dayjs;\r\n    @Input() buildStartDate?: dayjs.Dayjs;\r\n    @Input() showProgressBar = false;\r\n    @Input() showProgressBarBorder = false;\r\n\r\n    textColorClass: string;\r\n    resultIconClass: IconProp;\r\n    resultString: string;\r\n    templateStatus: ResultTemplateStatus;\r\n    submission?: Submission;\r\n    badge: Badge;\r\n    resultTooltip?: string;\r\n    latestDueDate: dayjs.Dayjs | undefined;\r\n\r\n    estimatedDurationInterval?: ReturnType<typeof setInterval>;\r\n    estimatedRemaining: number = 0;\r\n    estimatedDuration: number = 0;\r\n\r\n    // Icons\r\n    readonly faCircleNotch = faCircleNotch;\r\n    readonly faFile = faFile;\r\n    readonly farCircle = faCircle;\r\n    readonly faExclamationCircle = faExclamationCircle;\r\n    readonly faExclamationTriangle = faExclamationTriangle;\r\n\r\n    private resultUpdateSubscription?: ReturnType<typeof setTimeout>;\r\n\r\n    /**\r\n     * Executed on initialization. It retrieves the results of a given\r\n     * participation and displays the corresponding message.\r\n     */\r\n    ngOnInit(): void {\r\n        if (!this.result && this.participation) {\r\n            this.exercise = this.exercise ?? getExercise(this.participation);\r\n            this.participation.exercise = this.exercise;\r\n\r\n            if (this.participation.results?.length) {\r\n                if (this.exercise && this.exercise.type === ExerciseType.MODELING) {\r\n                    // sort results by completionDate descending to ensure the newest result is shown\r\n                    // this is important for modeling exercises since students can have multiple tries\r\n                    // think about if this should be used for all types of exercises\r\n                    this.participation.results.sort((r1: Result, r2: Result) => {\r\n                        if (r1.completionDate! > r2.completionDate!) {\r\n                            return -1;\r\n                        }\r\n                        if (r1.completionDate! < r2.completionDate!) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n                }\r\n                // Make sure result and participation are connected\r\n                if (!this.showUngradedResults) {\r\n                    const firstRatedResult = this.participation.results.find((result) => result?.rated);\r\n                    if (firstRatedResult) {\r\n                        this.result = firstRatedResult;\r\n                        this.result.participation = this.participation;\r\n                    }\r\n                } else {\r\n                    this.result = this.participation.results[0];\r\n                    this.result.participation = this.participation;\r\n                }\r\n            }\r\n        } else if (!this.participation && this.result && this.result.participation) {\r\n            // make sure this.participation is initialized in case it was not passed\r\n            this.participation = this.result.participation;\r\n            this.exercise = this.exercise ?? getExercise(this.participation);\r\n            this.participation.exercise = this.exercise;\r\n        } else if (this.participation) {\r\n            this.exercise = this.exercise ?? getExercise(this.participation);\r\n            this.participation.exercise = this.exercise;\r\n        } else if (!this.result?.exampleResult) {\r\n            // result of example submission does not have participation\r\n            captureException(new Error('The result component did not get a participation or result as parameter and can therefore not display the score'));\r\n            return;\r\n        }\r\n        // Note: it can still happen here that this.result is undefined, e.g. when this.participation.results.length == 0\r\n        this.submission = this.result?.submission;\r\n\r\n        this.evaluate();\r\n\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            if (this.resultString) {\r\n                this.resultString = this.resultService.getResultString(this.result, this.exercise, this.short);\r\n            }\r\n        });\r\n\r\n        if (this.showBadge && this.result) {\r\n            this.badge = ResultService.evaluateBadge(this.participation, this.result);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.resultUpdateSubscription) {\r\n            clearTimeout(this.resultUpdateSubscription);\r\n        }\r\n        if (this.estimatedDurationInterval) {\r\n            clearInterval(this.estimatedDurationInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executed when changes happen sets the corresponding template status to display a message.\r\n     * @param changes The hashtable of the occurred changes as SimpleChanges object.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.participation || changes.result) {\r\n            // If the participation or result changes, we need to re-initialize the component.\r\n            this.ngOnInit();\r\n        }\r\n\r\n        if (changes.isBuilding?.currentValue && changes.isBuilding?.currentValue === true) {\r\n            // If it's building, we change the templateStatus to building regardless of any other settings.\r\n            this.templateStatus = ResultTemplateStatus.IS_BUILDING;\r\n        } else if (changes.isQueued?.currentValue && changes.isQueued?.currentValue === true) {\r\n            // If it's queued, we change the templateStatus to queued regardless of any other settings.\r\n            this.templateStatus = ResultTemplateStatus.IS_QUEUED;\r\n        } else if (changes.missingResultInfo || changes.isBuilding?.previousValue) {\r\n            // If ...\r\n            // ... the result was building and is not building anymore, or\r\n            // ... the missingResultInfo changed\r\n            // we evaluate the result status.\r\n            this.evaluate();\r\n        }\r\n\r\n        clearInterval(this.estimatedDurationInterval);\r\n        if (this.estimatedCompletionDate && this.buildStartDate) {\r\n            this.estimatedDurationInterval = setInterval(() => {\r\n                this.estimatedRemaining = Math.max(0, dayjs(this.estimatedCompletionDate).diff(dayjs(), 'seconds'));\r\n                this.estimatedDuration = dayjs(this.estimatedCompletionDate).diff(dayjs(this.buildStartDate), 'seconds');\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding icon, styling and message to display results.\r\n     */\r\n    evaluate() {\r\n        this.templateStatus = evaluateTemplateStatus(this.exercise, this.participation, this.result, this.isBuilding, this.missingResultInfo, this.isQueued);\r\n        if (this.templateStatus === ResultTemplateStatus.LATE) {\r\n            this.textColorClass = getTextColorClass(this.result, this.templateStatus);\r\n            this.resultIconClass = getResultIconClass(this.result, this.templateStatus);\r\n            this.resultString = this.resultService.getResultString(this.result, this.exercise, this.short);\r\n        } else if (\r\n            this.result &&\r\n            ((this.result.score !== undefined && (this.result.rated || this.result.rated == undefined || this.showUngradedResults)) || isAthenaAIResult(this.result))\r\n        ) {\r\n            this.textColorClass = getTextColorClass(this.result, this.templateStatus);\r\n            this.resultIconClass = getResultIconClass(this.result, this.templateStatus);\r\n            this.resultString = this.resultService.getResultString(this.result, this.exercise, this.short);\r\n            this.resultTooltip = this.buildResultTooltip();\r\n        } else if (this.templateStatus !== ResultTemplateStatus.MISSING) {\r\n            // make sure that we do not display results that are 'rated=false' or that do not have a score\r\n            // this state is only possible if no rated results are available at all, so we show the info that no graded result is available\r\n            this.templateStatus = ResultTemplateStatus.NO_RESULT;\r\n            this.result = undefined;\r\n            this.resultString = '';\r\n        }\r\n\r\n        if (this.templateStatus === ResultTemplateStatus.IS_GENERATING_FEEDBACK && this.result?.completionDate) {\r\n            const dueTime = -dayjs().diff(this.result.completionDate, 'milliseconds');\r\n            this.resultUpdateSubscription = setTimeout(() => {\r\n                this.evaluate();\r\n                if (this.resultUpdateSubscription) {\r\n                    clearTimeout(this.resultUpdateSubscription);\r\n                }\r\n            }, dueTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the tooltip text that should be displayed next to the result string. Not required.\r\n     */\r\n    buildResultTooltip(): string | undefined {\r\n        // Only show the 'preliminary' tooltip for programming student participation results and if the buildAndTestAfterDueDate has not passed.\r\n        const programmingExercise = this.exercise as ProgrammingExercise;\r\n\r\n        // Automatically generated feedback section\r\n        if (this.result) {\r\n            if (this.templateStatus === ResultTemplateStatus.FEEDBACK_GENERATION_FAILED) {\r\n                return 'artemisApp.result.resultString.automaticAIFeedbackFailedTooltip';\r\n            } else if (this.templateStatus === ResultTemplateStatus.FEEDBACK_GENERATION_TIMED_OUT) {\r\n                return 'artemisApp.result.resultString.automaticAIFeedbackTimedOutTooltip';\r\n            } else if (this.templateStatus === ResultTemplateStatus.IS_GENERATING_FEEDBACK) {\r\n                return 'artemisApp.result.resultString.automaticAIFeedbackInProgressTooltip';\r\n            } else if (this.templateStatus === ResultTemplateStatus.HAS_RESULT && isAthenaAIResult(this.result)) {\r\n                return 'artemisApp.result.resultString.automaticAIFeedbackSuccessfulTooltip';\r\n            }\r\n        }\r\n        if (\r\n            this.participation &&\r\n            isProgrammingExerciseStudentParticipation(this.participation) &&\r\n            !isPracticeMode(this.participation) &&\r\n            isResultPreliminary(this.result!, programmingExercise)\r\n        ) {\r\n            if (programmingExercise?.assessmentType !== AssessmentType.AUTOMATIC) {\r\n                return 'artemisApp.result.preliminaryTooltipSemiAutomatic';\r\n            }\r\n            return 'artemisApp.result.preliminaryTooltip';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show details of a result.\r\n     * @param result Result object whose details will be displayed.\r\n     */\r\n    showDetails(result: Result) {\r\n        const exerciseService = this.exerciseCacheService ?? this.exerciseService;\r\n        if (this.exercise?.type === ExerciseType.TEXT || this.exercise?.type === ExerciseType.MODELING) {\r\n            const courseId = getCourseFromExercise(this.exercise)?.id;\r\n            let submissionId = result.submission?.id;\r\n            // In case of undefined result submission try the latest submission as this can happen before reloading the component\r\n            if (!submissionId) {\r\n                submissionId = result.participation?.submissions?.last()?.id;\r\n            }\r\n\r\n            const exerciseTypePath = this.exercise?.type === ExerciseType.TEXT ? 'text-exercises' : 'modeling-exercises';\r\n\r\n            this.router.navigate(['/courses', courseId, 'exercises', exerciseTypePath, this.exercise?.id, 'participate', result.participation?.id, 'submission', submissionId]);\r\n            return undefined;\r\n        }\r\n\r\n        const feedbackComponentParameters = prepareFeedbackComponentParameters(this.exercise, result, this.participation, this.templateStatus, this.latestDueDate, exerciseService);\r\n\r\n        if (this.exercise?.type === ExerciseType.QUIZ) {\r\n            // There is no feedback for quiz exercises.\r\n            // Instead, the scoring is showed next to the different questions\r\n            return undefined;\r\n        }\r\n\r\n        const modalRef = this.modalService.open(FeedbackComponent, { keyboard: true, size: 'xl' });\r\n        const modalComponentInstance: FeedbackComponent = modalRef.componentInstance;\r\n\r\n        modalComponentInstance.exercise = this.exercise;\r\n        modalComponentInstance.result = result;\r\n        if (feedbackComponentParameters.exerciseType) {\r\n            modalComponentInstance.exerciseType = feedbackComponentParameters.exerciseType;\r\n        }\r\n        if (feedbackComponentParameters.showScoreChart) {\r\n            modalComponentInstance.showScoreChart = feedbackComponentParameters.showScoreChart;\r\n        }\r\n        if (feedbackComponentParameters.messageKey) {\r\n            modalComponentInstance.messageKey = feedbackComponentParameters.messageKey;\r\n        }\r\n        if (feedbackComponentParameters.latestDueDate) {\r\n            this.latestDueDate = feedbackComponentParameters.latestDueDate;\r\n            modalComponentInstance.latestDueDate = feedbackComponentParameters.latestDueDate;\r\n        }\r\n        if (feedbackComponentParameters.showMissingAutomaticFeedbackInformation) {\r\n            modalComponentInstance.showMissingAutomaticFeedbackInformation = feedbackComponentParameters.showMissingAutomaticFeedbackInformation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a build artifact exists for a submission.\r\n     */\r\n    hasBuildArtifact() {\r\n        if (this.result && this.submission && this.submission.submissionExerciseType === SubmissionExerciseType.PROGRAMMING) {\r\n            const submission = this.submission as ProgrammingSubmission;\r\n            return submission.buildArtifact;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Download the build results of a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     */\r\n    downloadBuildResult(participationId?: number) {\r\n        if (participationId) {\r\n            this.participationService.downloadArtifact(participationId).subscribe((artifact) => {\r\n                this.csvDownloadService.downloadArtifact(artifact.fileContent, artifact.fileName);\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<!--\r\n-- When using the result component make sure that the reference to the participation input is changed if the result changes\r\n-- e.g. by using Object.assign to trigger ngOnChanges which makes sure that the result is updated\r\n-->\r\n<ng-container id=\"result\">\r\n    @switch (templateStatus) {\r\n        @case (ResultTemplateStatus.IS_QUEUED) {\r\n            @if (showProgressBar) {\r\n                <jhi-result-progress-bar\r\n                    [estimatedDuration]=\"estimatedDuration\"\r\n                    [estimatedRemaining]=\"estimatedRemaining\"\r\n                    [isBuilding]=\"isBuilding\"\r\n                    [isQueued]=\"isQueued\"\r\n                    [showBorder]=\"showProgressBarBorder\"\r\n                />\r\n            } @else {\r\n                <span class=\"text-primary\">\r\n                    <fa-icon [icon]=\"faCircleNotch\" size=\"lg\" animation=\"spin\" class=\"me-2\" />\r\n                    <span id=\"test-queued\" jhiTranslate=\"artemisApp.editor.queued\"></span>\r\n                    @if (estimatedRemaining) {\r\n                        <span> {{ estimatedRemaining | artemisDurationFromSeconds }} </span>\r\n                    }\r\n                </span>\r\n            }\r\n        }\r\n        @case (ResultTemplateStatus.IS_BUILDING) {\r\n            @if (showProgressBar) {\r\n                <jhi-result-progress-bar\r\n                    [estimatedDuration]=\"estimatedDuration\"\r\n                    [estimatedRemaining]=\"estimatedRemaining\"\r\n                    [isBuilding]=\"isBuilding\"\r\n                    [isQueued]=\"isQueued\"\r\n                    [showBorder]=\"showProgressBarBorder\"\r\n                />\r\n            } @else {\r\n                <span class=\"text-primary\">\r\n                    <fa-icon [icon]=\"faCircleNotch\" size=\"lg\" animation=\"spin\" class=\"me-2\" />\r\n                    <span id=\"test-building\" jhiTranslate=\"artemisApp.editor.building\"></span>\r\n                    @if (estimatedRemaining) {\r\n                        <span> {{ estimatedRemaining | artemisDurationFromSeconds }} </span>\r\n                    }\r\n                </span>\r\n            }\r\n        }\r\n        @case (ResultTemplateStatus.FEEDBACK_GENERATION_FAILED) {\r\n            @if (result) {\r\n                @if (showIcon) {\r\n                    <fa-icon class=\"result-score-icon\" [class]=\"textColorClass\" [icon]=\"resultIconClass\" size=\"lg\" />\r\n                }\r\n                <span [ngClass]=\"textColorClass\" class=\"guided-tour result\" [class.clickable-result]=\"false\" id=\"result-score\">\r\n                    <span [ngbTooltip]=\"resultTooltip | artemisTranslate\">\r\n                        {{ resultString }}\r\n                    </span>\r\n                </span>\r\n            }\r\n        }\r\n        @case (ResultTemplateStatus.IS_GENERATING_FEEDBACK) {\r\n            <span class=\"text-primary\">\r\n                <fa-icon [icon]=\"faCircleNotch\" size=\"lg\" animation=\"spin\" class=\"me-2\" />\r\n                <span id=\"preliminary-feedback-generating\" jhiTranslate=\"artemisApp.result.resultString.automaticAIFeedbackInProgressTooltip\"></span>\r\n            </span>\r\n        }\r\n        @case (ResultTemplateStatus.FEEDBACK_GENERATION_TIMED_OUT) {\r\n            @if (result) {\r\n                @if (showIcon) {\r\n                    <fa-icon class=\"result-score-icon\" [class]=\"textColorClass\" [icon]=\"resultIconClass\" size=\"lg\" />\r\n                }\r\n                <span [ngClass]=\"textColorClass\" class=\"guided-tour result\" [class.clickable-result]=\"false\" id=\"result-score\">\r\n                    <span [ngbTooltip]=\"resultTooltip | artemisTranslate\">\r\n                        {{ resultString }}\r\n                    </span>\r\n                </span>\r\n            }\r\n        }\r\n        @case (ResultTemplateStatus.HAS_RESULT) {\r\n            @if (result) {\r\n                @if (showIcon) {\r\n                    <fa-icon class=\"result-score-icon\" [class]=\"textColorClass\" [icon]=\"resultIconClass\" size=\"lg\" />\r\n                }\r\n                <span\r\n                    [class]=\"textColorClass\"\r\n                    class=\"guided-tour result\"\r\n                    [ngClass]=\"{ 'clickable-result': !isInSidebarCard && exercise?.type !== ExerciseType.QUIZ }\"\r\n                    id=\"result-score\"\r\n                    (click)=\"!isInSidebarCard ? showDetails(result!) : ''\"\r\n                >\r\n                    <span [ngbTooltip]=\"resultTooltip | artemisTranslate\">\r\n                        {{ resultString }}\r\n                    </span>\r\n                    @if (short && result?.codeIssueCount) {\r\n                        <span ngbTooltip=\"{{ 'artemisApp.result.codeIssuesTooltip' | artemisTranslate }}\">\r\n                            <fa-icon id=\"code-issue-warnings-icon\" class=\"result-orange\" [icon]=\"faExclamationTriangle\" />\r\n                        </span>\r\n                    }\r\n                    @if (!isInSidebarCard && showCompletion) {\r\n                        <span [ngbTooltip]=\"result!.completionDate | artemisDate\"> ({{ result!.completionDate | artemisTimeAgo }}) </span>\r\n                    }\r\n                </span>\r\n                @if (hasBuildArtifact() && participation.type === ParticipationType.PROGRAMMING) {\r\n                    <span>\r\n                        <a (click)=\"downloadBuildResult(participation.id)\">\r\n                            &nbsp; <fa-icon [icon]=\"faFile\" />\r\n                            <span jhiTranslate=\"artemisApp.editor.downloadBuildResult\"></span>\r\n                        </a>\r\n                    </span>\r\n                }\r\n                @if (showBadge) {\r\n                    <span class=\"badge\" [ngClass]=\"badge.class\" id=\"result-score-badge\" ngbTooltip=\"{{ badge.tooltip | artemisTranslate }}\">\r\n                        {{ badge.text | artemisTranslate | uppercase }}\r\n                    </span>\r\n                }\r\n            }\r\n        }\r\n        @case (ResultTemplateStatus.LATE) {\r\n            <span [class]=\"textColorClass\" id=\"test-late\">\r\n                <fa-icon [icon]=\"resultIconClass\" size=\"lg\" />\r\n                <span class=\"score\"> {{ resultString }}, </span>\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.exerciseLateFeedback\"></span>\r\n            </span>\r\n        }\r\n        @case (ResultTemplateStatus.SUBMITTED) {\r\n            <span id=\"test-submitted\" class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.exerciseSubmitted\"></span>\r\n        }\r\n        @case (ResultTemplateStatus.SUBMITTED_WAITING_FOR_GRADING) {\r\n            <span id=\"test-submitted-waiting-grading\" class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.exerciseSubmittedWaitingForGrading\"></span>\r\n        }\r\n        @case (ResultTemplateStatus.LATE_NO_FEEDBACK) {\r\n            <span id=\"test-late-no-feedback\" class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.exerciseLateSubmission\"></span>\r\n        }\r\n        @case (ResultTemplateStatus.MISSING) {\r\n            <span class=\"text-danger\">\r\n                <fa-icon class=\"me-1\" [icon]=\"faExclamationCircle\" size=\"lg\" />\r\n                @switch (missingResultInfo) {\r\n                    @case (MissingResultInfo.FAILED_PROGRAMMING_SUBMISSION_ONLINE_IDE) {\r\n                        <span\r\n                            [ngbTooltip]=\"'artemisApp.result.missing.programmingFailedSubmission.tooltipOnlineIde' | artemisTranslate\"\r\n                            jhiTranslate=\"artemisApp.result.missing.programmingFailedSubmission.message\"\r\n                        ></span>\r\n                    }\r\n                    @case (MissingResultInfo.FAILED_PROGRAMMING_SUBMISSION_OFFLINE_IDE) {\r\n                        <span\r\n                            [ngbTooltip]=\"'artemisApp.result.missing.programmingFailedSubmission.tooltipOfflineIde' | artemisTranslate\"\r\n                            jhiTranslate=\"artemisApp.result.missing.programmingFailedSubmission.message\"\r\n                        ></span>\r\n                    }\r\n                }\r\n                @if (result && exercise?.type !== ExerciseType.QUIZ) {\r\n                    <span\r\n                        [ngClass]=\"{ 'clickable-result': !isInSidebarCard }\"\r\n                        class=\"result\"\r\n                        (click)=\"showDetails(result)\"\r\n                        jhiTranslate=\"artemisApp.result.missing.viewPrevious\"\r\n                    ></span>\r\n                }\r\n            </span>\r\n        }\r\n        @default {\r\n            <span class=\"text-body-secondary\">\r\n                <span jhiTranslate=\"{{ showUngradedResults ? 'artemisApp.result.noResult' : 'artemisApp.result.noGradedResult' }}\"></span>\r\n            </span>\r\n        }\r\n    }\r\n</ng-container>\r\n"],
  "mappings": "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",
  "names": ["prepareFeedbackComponentParameters", "exercise", "result", "participation", "templateStatus", "latestDueDate", "exerciseService", "preparedParameters", "exerciseType", "type", "showScoreChart", "ResultTemplateStatus", "MISSING", "messageKey", "assessmentType", "AssessmentType", "AUTOMATIC", "ExerciseType", "PROGRAMMING", "hasExerciseDueDatePassed", "determineShowMissingAutomaticFeedbackInformation", "setShowMissingAutomaticFeedbackInformation", "getLatestDueDate", "id", "subscribe", "showMissingAutomaticFeedbackInformation", "dayjs", "isBefore", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "ctx_r0", "estimatedRemaining", "ResultProgressBarComponent", "input", "estimatedDuration", "isBuilding", "required", "isQueued", "showBorder", "isQueueProgressBarAnimated", "queueProgressBarOpacity", "queueProgressBarValue", "isBuildProgressBarAnimated", "buildProgressBarOpacity", "buildProgressBarValue", "estimatedDurationInterval", "faCircleNotch", "constructor", "effect", "cleanUpIfNotBuildingOrQueued", "clearInterval", "updateProgressBarState", "setupQueueProgressBarForBuild", "updateBuildProgressBar", "setupBuildProgressBarForQueued", "updateQueueProgressBar", "setInterval", "alternateOpacity", "undefined", "isBuildingOrQueued", "ngOnDestroy", "Math", "round", "isQueue", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ResultProgressBarComponent_Conditional_7_Template", "ResultProgressBarComponent_Conditional_8_Template", "ResultProgressBarComponent_Conditional_9_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275conditional", "\u0275\u0275styleProp", "_c1", "CommonModule", "NgClass", "TranslateDirective", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "FontAwesomeModule", "FaIconComponent", "NgbTooltipModule", "NgbTooltip", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "estimatedDuration", "estimatedRemaining", "isBuilding", "isQueued", "showProgressBarBorder", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275template", "ResultComponent_Case_3_Conditional_2_Conditional_7_Template", "faCircleNotch", "\u0275\u0275conditional", "ResultComponent_Case_3_Conditional_1_Template", "ResultComponent_Case_3_Conditional_2_Template", "showProgressBar", "ResultComponent_Case_4_Conditional_2_Conditional_7_Template", "ResultComponent_Case_4_Conditional_1_Template", "ResultComponent_Case_4_Conditional_2_Template", "\u0275\u0275classMap", "textColorClass", "resultIconClass", "ResultComponent_Case_5_Conditional_1_Conditional_1_Template", "showIcon", "\u0275\u0275classProp", "resultTooltip", "resultString", "ResultComponent_Case_5_Conditional_1_Template", "result", "ResultComponent_Case_7_Conditional_1_Conditional_1_Template", "ResultComponent_Case_7_Conditional_1_Template", "\u0275\u0275propertyInterpolate", "faExclamationTriangle", "completionDate", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "downloadBuildResult", "participation", "id", "faFile", "badge", "tooltip", "class", "text", "ResultComponent_Case_8_Conditional_1_Conditional_1_Template", "_r2", "isInSidebarCard", "showDetails", "ResultComponent_Case_8_Conditional_1_Conditional_8_Template", "ResultComponent_Case_8_Conditional_1_Conditional_9_Template", "ResultComponent_Case_8_Conditional_1_Conditional_11_Template", "ResultComponent_Case_8_Conditional_1_Conditional_12_Template", "\u0275\u0275pureFunction1", "_c0", "exercise", "type", "ExerciseType", "QUIZ", "short", "codeIssueCount", "showCompletion", "hasBuildArtifact", "ParticipationType", "PROGRAMMING", "showBadge", "ResultComponent_Case_8_Conditional_1_Template", "_r4", "ResultComponent_Case_13_Case_5_Template", "ResultComponent_Case_13_Case_6_Template", "ResultComponent_Case_13_Conditional_8_Template", "faExclamationCircle", "tmp_2_0", "missingResultInfo", "MissingResultInfo", "FAILED_PROGRAMMING_SUBMISSION_ONLINE_IDE", "FAILED_PROGRAMMING_SUBMISSION_OFFLINE_IDE", "showUngradedResults", "ResultComponent", "participationService", "inject", "ParticipationService", "translateService", "TranslateService", "modalService", "NgbModal", "exerciseService", "ExerciseService", "exerciseCacheService", "ExerciseCacheService", "optional", "resultService", "ResultService", "csvDownloadService", "CsvDownloadService", "router", "Router", "ResultTemplateStatus", "MissingResultInformation", "roundScoreSpecifiedByCourseSettings", "roundValueSpecifiedByCourseSettings", "getCourseFromExercise", "AssessmentType", "NONE", "estimatedCompletionDate", "buildStartDate", "templateStatus", "submission", "latestDueDate", "estimatedDurationInterval", "farCircle", "faCircle", "resultUpdateSubscription", "ngOnInit", "getExercise", "results", "length", "MODELING", "sort", "r1", "r2", "firstRatedResult", "find", "rated", "exampleResult", "captureException", "Error", "evaluate", "onLangChange", "subscribe", "getResultString", "evaluateBadge", "ngOnDestroy", "clearTimeout", "clearInterval", "ngOnChanges", "changes", "currentValue", "IS_BUILDING", "IS_QUEUED", "previousValue", "setInterval", "Math", "max", "dayjs", "diff", "evaluateTemplateStatus", "LATE", "getTextColorClass", "getResultIconClass", "score", "undefined", "isAthenaAIResult", "buildResultTooltip", "MISSING", "NO_RESULT", "IS_GENERATING_FEEDBACK", "dueTime", "setTimeout", "programmingExercise", "FEEDBACK_GENERATION_FAILED", "FEEDBACK_GENERATION_TIMED_OUT", "HAS_RESULT", "isProgrammingExerciseStudentParticipation", "isPracticeMode", "isResultPreliminary", "assessmentType", "AUTOMATIC", "TEXT", "courseId", "submissionId", "submissions", "last", "exerciseTypePath", "navigate", "feedbackComponentParameters", "prepareFeedbackComponentParameters", "modalComponentInstance", "open", "FeedbackComponent", "keyboard", "size", "componentInstance", "exerciseType", "showScoreChart", "messageKey", "showMissingAutomaticFeedbackInformation", "submissionExerciseType", "buildArtifact", "participationId", "downloadArtifact", "artifact", "fileContent", "fileName", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "ResultComponent_Case_3_Template", "ResultComponent_Case_4_Template", "ResultComponent_Case_5_Template", "ResultComponent_Case_6_Template", "ResultComponent_Case_7_Template", "ResultComponent_Case_8_Template", "ResultComponent_Case_9_Template", "ResultComponent_Case_10_Template", "ResultComponent_Case_11_Template", "ResultComponent_Case_12_Template", "ResultComponent_Case_13_Template", "ResultComponent_Case_14_Template", "tmp_0_0", "SUBMITTED", "SUBMITTED_WAITING_FOR_GRADING", "LATE_NO_FEEDBACK", "ResultProgressBarComponent", "FaIconComponent", "TranslateDirective", "NgClass", "NgbTooltip", "UpperCasePipe", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisTimeAgoPipe", "ArtemisDurationFromSecondsPipe", "styles"]
}
