{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/assess/manual-result/programming-assessment-manual-result.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { ComplaintResponse } from 'app/entities/complaint-response.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { EntityResponseType, ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingAssessmentManualResultService {\r\n    private http = inject(HttpClient);\r\n    private resultService = inject(ResultService);\r\n\r\n    private resourceUrl = 'api/programming';\r\n\r\n    // TODO: It would be good to refactor the convertDate methods into a separate service, so that we don't have to import the result service here.\r\n\r\n    /**\r\n     * Saves a new manual result and stores it in the server\r\n     * @param {number} participationId - Id of the participation\r\n     * @param {Result} result - The result to be created and sent to the server\r\n     * @param {submit} submit - Indicates whether submit or save is called\r\n     */\r\n    // TODO: make consistent with other *.assessment.service.ts file\r\n    saveAssessment(participationId: number, result: Result, submit = false): Observable<EntityResponseType> {\r\n        let params = new HttpParams();\r\n        if (submit) {\r\n            params = params.set('submit', 'true');\r\n        }\r\n\r\n        const url = `${this.resourceUrl}/participations/${participationId}/manual-results`;\r\n        const copy = this.resultService.convertResultDatesFromClient(result);\r\n        return this.http\r\n            .put<Result>(url, copy, { params, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.resultService.convertResultResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Send the request to update the assessment after the complaint (only done once per complaint). The result score, string\r\n     * and feedbacks will be updated. Original result will be stored as a string on complaint.\r\n     * @param feedbacks list of feedback items (the score is not evaluated from them, as we pass score directly from the result)\r\n     * @param complaintResponse contains main information about the complaint response (time, responseText, reviewer)\r\n     * @param submissionId the id of the submission\r\n     * @param assessmentNote the assessment note of the submission, if one exists\r\n     * @return updated result with updated feedbacks and score\r\n     */\r\n    updateAfterComplaint(feedbacks: Feedback[], complaintResponse: ComplaintResponse, submissionId: number, assessmentNote?: string): Observable<Result> {\r\n        const url = `${this.resourceUrl}/programming-submissions/${submissionId}/assessment-after-complaint`;\r\n        const assessmentUpdate = {\r\n            feedbacks,\r\n            complaintResponse,\r\n            assessmentNote,\r\n        };\r\n        return this.http.put<Result>(url, assessmentUpdate);\r\n    }\r\n\r\n    cancelAssessment(submissionId: number): Observable<void> {\r\n        return this.http.put<void>(`${this.resourceUrl}/programming-submissions/${submissionId}/cancel-assessment`, null);\r\n    }\r\n\r\n    /**\r\n     * Deletes an assessment.\r\n     * @param participationId id of the participation, to which the assessment and the submission belong to\r\n     * @param submissionId id of the submission, to which the assessment belongs to\r\n     * @param resultId     id of the result which is deleted\r\n     */\r\n    deleteAssessment(participationId: number, submissionId: number, resultId: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/participations/${participationId}/programming-submissions/${submissionId}/results/${resultId}`);\r\n    }\r\n}\r\n"],
  "mappings": "+IAUA,IAAaA,GAAwC,IAAA,CAA/C,MAAOA,CAAwC,CACzCC,KAAOC,EAAOC,CAAU,EACxBC,cAAgBF,EAAOG,CAAa,EAEpCC,YAAc,kBAWtBC,eAAeC,EAAyBC,EAAgBC,EAAS,GAAK,CAClE,IAAIC,EAAS,IAAIC,EACbF,IACAC,EAASA,EAAOE,IAAI,SAAU,MAAM,GAGxC,IAAMC,EAAM,GAAG,KAAKR,WAAW,mBAAmBE,CAAe,kBAC3DO,EAAO,KAAKX,cAAcY,6BAA6BP,CAAM,EACnE,OAAO,KAAKR,KACPgB,IAAYH,EAAKC,EAAM,CAAEJ,OAAAA,EAAQO,QAAS,UAAU,CAAE,EACtDC,KAAKC,EAAKC,GAA4B,KAAKjB,cAAckB,qCAAqCD,CAAG,CAAC,CAAC,CAC5G,CAWAE,qBAAqBC,EAAuBC,EAAsCC,EAAsBC,EAAuB,CAC3H,IAAMb,EAAM,GAAG,KAAKR,WAAW,4BAA4BoB,CAAY,8BACjEE,EAAmB,CACrBJ,UAAAA,EACAC,kBAAAA,EACAE,eAAAA,GAEJ,OAAO,KAAK1B,KAAKgB,IAAYH,EAAKc,CAAgB,CACtD,CAEAC,iBAAiBH,EAAoB,CACjC,OAAO,KAAKzB,KAAKgB,IAAU,GAAG,KAAKX,WAAW,4BAA4BoB,CAAY,qBAAsB,IAAI,CACpH,CAQAI,iBAAiBtB,EAAyBkB,EAAsBK,EAAgB,CAC5E,OAAO,KAAK9B,KAAK+B,OAAa,GAAG,KAAK1B,WAAW,mBAAmBE,CAAe,4BAA4BkB,CAAY,YAAYK,CAAQ,EAAE,CACrJ,4CA3DS/B,EAAwC,6BAAxCA,EAAwCiC,QAAxCjC,EAAwCkC,UAAAC,WAD3B,MAAM,CAAA,SACnBnC,CAAwC,GAAA",
  "names": ["ProgrammingAssessmentManualResultService", "http", "inject", "HttpClient", "resultService", "ResultService", "resourceUrl", "saveAssessment", "participationId", "result", "submit", "params", "HttpParams", "set", "url", "copy", "convertResultDatesFromClient", "put", "observe", "pipe", "map", "res", "convertResultResponseDatesFromServer", "updateAfterComplaint", "feedbacks", "complaintResponse", "submissionId", "assessmentNote", "assessmentUpdate", "cancelAssessment", "deleteAssessment", "resultId", "delete", "factory", "\u0275fac", "providedIn"]
}
