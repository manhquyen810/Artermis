{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/confirm-entity-name/confirm-entity-name.component.ts", "src/main/webapp/app/shared/confirm-entity-name/confirm-entity-name.component.html"],
  "sourcesContent": ["import { Component, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport {\r\n    ControlValueAccessor,\r\n    FormBuilder,\r\n    FormControl,\r\n    FormsModule,\r\n    NG_VALIDATORS,\r\n    NG_VALUE_ACCESSOR,\r\n    ReactiveFormsModule,\r\n    ValidationErrors,\r\n    Validator,\r\n    Validators,\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-confirm-entity-name',\r\n    templateUrl: './confirm-entity-name.component.html',\r\n    styleUrls: ['./confirm-entity-name.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            multi: true,\r\n            useExisting: ConfirmEntityNameComponent,\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            multi: true,\r\n            useExisting: ConfirmEntityNameComponent,\r\n        },\r\n    ],\r\n    imports: [NgClass, TranslateDirective, FormsModule, ReactiveFormsModule],\r\n})\r\nexport class ConfirmEntityNameComponent implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n    private fb = inject(FormBuilder);\r\n\r\n    @Input() warningTextColor: string;\r\n    @Input() confirmationText: string;\r\n\r\n    @Input()\r\n    set entityName(entityName: string) {\r\n        this.currentEntityName = entityName;\r\n        this.onValidatorChange?.();\r\n    }\r\n\r\n    get entityName(): string {\r\n        return this.currentEntityName;\r\n    }\r\n\r\n    control: FormControl<string>;\r\n\r\n    onTouched = () => {};\r\n\r\n    private currentEntityName: string;\r\n    private onChangeSubs: Subscription[] = [];\r\n    private onValidatorChange?: () => void;\r\n\r\n    ngOnInit() {\r\n        this.control = this.fb.control('', {\r\n            nonNullable: true,\r\n            validators: [Validators.required, this.compareWithEntityName.bind(this)],\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        for (const sub of this.onChangeSubs) {\r\n            sub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    writeValue(entityName: string | undefined | null) {\r\n        if (typeof entityName === 'string') {\r\n            this.control.setValue(entityName, { emitEvent: false });\r\n        }\r\n    }\r\n\r\n    registerOnChange(onChange: (_: string) => void) {\r\n        this.onChangeSubs.push(this.control.valueChanges.subscribe(onChange));\r\n    }\r\n\r\n    registerOnTouched(fn: () => void) {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        if (isDisabled) {\r\n            this.control.disable();\r\n        } else {\r\n            this.control.enable();\r\n        }\r\n    }\r\n\r\n    validate(): ValidationErrors | null {\r\n        if (this.control.valid) {\r\n            return null;\r\n        }\r\n\r\n        return this.control.errors;\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void) {\r\n        this.onValidatorChange = fn;\r\n    }\r\n\r\n    private compareWithEntityName(control: FormControl): ValidationErrors | null {\r\n        if (control.value !== this.entityName) {\r\n            return { invalidName: true };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n", "<div class=\"form-group d-flex flex-column gap-1\">\r\n    <label for=\"confirm-entity-name\" [ngClass]=\"warningTextColor\" [jhiTranslate]=\"confirmationText\">Please type in the name to confirm</label>\r\n    <input id=\"confirm-entity-name\" type=\"text\" class=\"form-control\" name=\"confirmEntityName\" [formControl]=\"control\" (blur)=\"onTouched()\" />\r\n</div>\r\n"],
  "mappings": "yRAmCA,IAAaA,GAA0B,IAAA,CAAjC,MAAOA,CAA0B,CAC3BC,GAAKC,EAAOC,CAAW,EAEtBC,iBACAC,iBAET,IACIC,WAAWA,EAAkB,CAC7B,KAAKC,kBAAoBD,EACzB,KAAKE,oBAAmB,CAC5B,CAEA,IAAIF,YAAU,CACV,OAAO,KAAKC,iBAChB,CAEAE,QAEAC,UAAYA,IAAK,CAAE,EAEXH,kBACAI,aAA+B,CAAA,EAC/BH,kBAERI,UAAQ,CACJ,KAAKH,QAAU,KAAKR,GAAGQ,QAAQ,GAAI,CAC/BI,YAAa,GACbC,WAAY,CAACC,EAAWC,SAAU,KAAKC,sBAAsBC,KAAK,IAAI,CAAC,EAC1E,CACL,CAEAC,aAAW,CACP,QAAWC,KAAO,KAAKT,aACnBS,EAAIC,YAAW,CAEvB,CAEAC,WAAWhB,EAAqC,CACxC,OAAOA,GAAe,UACtB,KAAKG,QAAQc,SAASjB,EAAY,CAAEkB,UAAW,EAAK,CAAE,CAE9D,CAEAC,iBAAiBC,EAA6B,CAC1C,KAAKf,aAAagB,KAAK,KAAKlB,QAAQmB,aAAaC,UAAUH,CAAQ,CAAC,CACxE,CAEAI,kBAAkBC,EAAc,CAC5B,KAAKrB,UAAYqB,CACrB,CAEAC,iBAAiBC,EAAmB,CAC5BA,EACA,KAAKxB,QAAQyB,QAAO,EAEpB,KAAKzB,QAAQ0B,OAAM,CAE3B,CAEAC,UAAQ,CACJ,OAAI,KAAK3B,QAAQ4B,MACN,KAGJ,KAAK5B,QAAQ6B,MACxB,CAEAC,0BAA0BR,EAAc,CACpC,KAAKvB,kBAAoBuB,CAC7B,CAEQd,sBAAsBR,EAAoB,CAC9C,OAAIA,EAAQ+B,QAAU,KAAKlC,WAChB,CAAEmC,YAAa,EAAI,EAEvB,IACX,4CA5ESzC,EAA0B,2BAA1BA,EAA0B0C,UAAA,CAAA,CAAA,yBAAA,CAAA,EAAAC,OAAA,CAAAvC,iBAAA,mBAAAC,iBAAA,mBAAAC,WAAA,YAAA,EAAAsC,SAAA,CAAAC,EAdxB,CACP,CACIC,QAASC,EACTC,MAAO,GACPC,YAAajD,GAEjB,CACI8C,QAASI,EACTF,MAAO,GACPC,YAAajD,EAChB,CACJ,CAAA,EAAAmD,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,aAAA,SAAA,cAAA,OAAA,EAAA,CAAA,MAAA,sBAAA,EAAA,UAAA,cAAA,EAAA,CAAA,KAAA,sBAAA,OAAA,OAAA,OAAA,oBAAA,EAAA,eAAA,EAAA,OAAA,aAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IChCLE,EAAA,EAAA,MAAA,CAAA,EACIC,EAAA,EAAA;KAAA,EAAAD,EAAA,EAAA,QAAA,CAAA,EAAgGC,EAAA,EAAA,oCAAA,EAAkCC,EAAA,EAClID,EAAA,EAAA;KAAA,EAAAD,EAAA,EAAA,QAAA,CAAA,EAAkHG,EAAA,OAAA,UAAA,CAAA,OAAQJ,EAAA9C,UAAA,CAAW,CAAA,EAArIiD,EAAA,EACJD,EAAA,EAAA;CAAA,EAAAC,EAAA,EACAD,EAAA,EAAA;CAAA,SAHqCG,EAAA,CAAA,EAAAC,EAAA,UAAAN,EAAApD,gBAAA,EAA4B,eAAAoD,EAAAnD,gBAAA,EAC6BwD,EAAA,CAAA,EAAAC,EAAA,cAAAN,EAAA/C,OAAA,kBD+BhFsD,EAASC,EAAoBC,EAAWC,EAAAC,EAAEC,EAAmBC,CAAA,EAAAC,OAAA,CAAA,yCAAA,CAAA,CAAA,SAE9DtE,CAA0B,GAAA",
  "names": ["ConfirmEntityNameComponent", "fb", "inject", "FormBuilder", "warningTextColor", "confirmationText", "entityName", "currentEntityName", "onValidatorChange", "control", "onTouched", "onChangeSubs", "ngOnInit", "nonNullable", "validators", "Validators", "required", "compareWithEntityName", "bind", "ngOnDestroy", "sub", "unsubscribe", "writeValue", "setValue", "emitEvent", "registerOnChange", "onChange", "push", "valueChanges", "subscribe", "registerOnTouched", "fn", "setDisabledState", "isDisabled", "disable", "enable", "validate", "valid", "errors", "registerOnValidatorChange", "value", "invalidName", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "provide", "NG_VALUE_ACCESSOR", "multi", "useExisting", "NG_VALIDATORS", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275advance", "\u0275\u0275property", "NgClass", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "ReactiveFormsModule", "FormControlDirective", "styles"]
}
