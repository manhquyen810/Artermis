{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-import/users-import-dialog.component.ts", "src/main/webapp/app/shared/user-import/users-import-dialog.component.html", "src/main/webapp/app/shared/user-import/users-import-button.component.ts"],
  "sourcesContent": ["import { Component, Input, OnDestroy, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { ExamUserDTO } from 'app/entities/exam/exam-user-dto.model';\r\nimport { cleanString } from 'app/shared/util/utils';\r\nimport { Subject } from 'rxjs';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { StudentDTO } from 'app/entities/student-dto.model';\r\nimport { parse } from 'papaparse';\r\nimport { faArrowRight, faBan, faCheck, faCircleNotch, faSpinner, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { TutorialGroupsService } from 'app/course/tutorial-groups/services/tutorial-groups.service';\r\nimport { AdminUserService } from 'app/core/user/admin-user.service';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { HelpIconComponent } from '../components/help-icon.component';\r\n\r\nconst POSSIBLE_REGISTRATION_NUMBER_HEADERS = ['registrationnumber', 'matriculationnumber', 'matrikelnummer', 'number'];\r\nconst POSSIBLE_LOGIN_HEADERS = ['login', 'user', 'username', 'benutzer', 'benutzername'];\r\nconst POSSIBLE_EMAIL_HEADERS = ['email', 'e-mail', 'mail'];\r\nconst POSSIBLE_FIRST_NAME_HEADERS = ['firstname', 'firstnameofstudent', 'givenname', 'forename', 'vorname'];\r\nconst POSSIBLE_LAST_NAME_HEADERS = ['familyname', 'lastname', 'familynameofstudent', 'surname', 'nachname', 'familienname', 'name'];\r\nconst POSSIBLE_ROOM_HEADERS = ['actualroom', 'actualRoom', 'raum', 'room', 'Room'];\r\nconst POSSIBLE_SEAT_HEADERS = ['actualseat', 'actualSeat', 'sitzplatz', 'sitz', 'seat', 'Seat'];\r\n\r\ninterface CsvUser {\r\n    [key: string]: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-users-import-dialog',\r\n    templateUrl: './users-import-dialog.component.html',\r\n    styleUrls: ['./users-import-dialog.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [FormsModule, TranslateDirective, FaIconComponent, HelpIconComponent],\r\n})\r\nexport class UsersImportDialogComponent implements OnDestroy {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private adminUserService = inject(AdminUserService);\r\n    private tutorialGroupService = inject(TutorialGroupsService);\r\n\r\n    readonly ActionType = ActionType;\r\n\r\n    @ViewChild('importForm', { static: false }) importForm: NgForm;\r\n\r\n    @Input() courseId: number;\r\n    @Input() courseGroup: string;\r\n    @Input() exam: Exam | undefined;\r\n    @Input() tutorialGroup: TutorialGroup | undefined;\r\n    @Input() examUserMode: boolean;\r\n    @Input() adminUserMode: boolean;\r\n\r\n    usersToImport: StudentDTO[] = [];\r\n    examUsersToImport: ExamUserDTO[] = [];\r\n    notFoundUsers: Partial<StudentDTO>[] = [];\r\n\r\n    isParsing = false;\r\n    validationError?: string;\r\n    noUsersFoundError?: boolean;\r\n    isImporting = false;\r\n    hasImported = false;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faSpinner = faSpinner;\r\n    faCheck = faCheck;\r\n    faCircleNotch = faCircleNotch;\r\n    faUpload = faUpload;\r\n    faArrowRight = faArrowRight;\r\n\r\n    ngOnDestroy(): void {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    private resetDialog() {\r\n        this.usersToImport = [];\r\n        this.examUsersToImport = [];\r\n        this.notFoundUsers = [];\r\n        this.hasImported = false;\r\n    }\r\n\r\n    async onCSVFileSelect(event: any) {\r\n        if (event.target.files.length > 0) {\r\n            this.resetDialog();\r\n            if (this.examUserMode) {\r\n                this.examUsersToImport = await this.readUsersFromCSVFile(event, event.target.files[0]);\r\n            } else {\r\n                this.usersToImport = await this.readUsersFromCSVFile(event, event.target.files[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads users from a csv file into a list of StudentDTOs or ExamUserDTO if examUserMode is true\r\n     * The column \"registrationNumber\" is mandatory since the import requires it as an identifier\r\n     * @param event File change event from the HTML input of type file\r\n     * @param csvFile File that contains one user per row and has at least the columns specified in csvColumns\r\n     */\r\n    private async readUsersFromCSVFile(event: any, csvFile: File): Promise<StudentDTO[] | ExamUserDTO[]> {\r\n        let csvUsers: CsvUser[] = [];\r\n        try {\r\n            this.isParsing = true;\r\n            this.validationError = undefined;\r\n            csvUsers = await this.parseCSVFile(csvFile);\r\n        } catch (error) {\r\n            this.validationError = error.message;\r\n        } finally {\r\n            this.isParsing = false;\r\n        }\r\n        if (csvUsers.length > 0) {\r\n            this.performExtraValidations(csvUsers);\r\n        } else if (csvUsers.length === 0) {\r\n            this.noUsersFoundError = true;\r\n        }\r\n        if (this.validationError || csvUsers.length === 0) {\r\n            event.target.value = ''; // remove selected file so user can fix the file and select it again\r\n            return [];\r\n        }\r\n\r\n        const usedHeaders = Object.keys(csvUsers.first() || []);\r\n\r\n        const registrationNumberHeader = usedHeaders.find((value) => POSSIBLE_REGISTRATION_NUMBER_HEADERS.includes(value)) || '';\r\n        const loginHeader = usedHeaders.find((value) => POSSIBLE_LOGIN_HEADERS.includes(value)) || '';\r\n        const emailHeader = usedHeaders.find((value) => POSSIBLE_EMAIL_HEADERS.includes(value)) || '';\r\n        const firstNameHeader = usedHeaders.find((value) => POSSIBLE_FIRST_NAME_HEADERS.includes(value)) || '';\r\n        const lastNameHeader = usedHeaders.find((value) => POSSIBLE_LAST_NAME_HEADERS.includes(value)) || '';\r\n\r\n        const roomHeader = usedHeaders.find((value) => POSSIBLE_ROOM_HEADERS.includes(value)) || '';\r\n        const seatHeader = usedHeaders.find((value) => POSSIBLE_SEAT_HEADERS.includes(value)) || '';\r\n\r\n        if (this.examUserMode) {\r\n            return csvUsers.map(\r\n                (user: CsvUser) =>\r\n                    ({\r\n                        registrationNumber: user[registrationNumberHeader]?.trim() || '',\r\n                        login: user[loginHeader]?.trim() || '',\r\n                        email: user[emailHeader]?.trim() || '',\r\n                        firstName: user[firstNameHeader]?.trim() || '',\r\n                        lastName: user[lastNameHeader]?.trim() || '',\r\n                        room: user[roomHeader]?.trim() || '',\r\n                        seat: user[seatHeader]?.trim() || '',\r\n                    }) as ExamUserDTO,\r\n            );\r\n        } else {\r\n            return csvUsers.map(\r\n                (user: CsvUser) =>\r\n                    ({\r\n                        registrationNumber: user[registrationNumberHeader]?.trim() || '',\r\n                        login: user[loginHeader]?.trim() || '',\r\n                        email: user[emailHeader]?.trim() || '',\r\n                        firstName: user[firstNameHeader]?.trim() || '',\r\n                        lastName: user[lastNameHeader]?.trim() || '',\r\n                    }) as StudentDTO,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs validations on the parsed users\r\n     * - checks if values for the required column {csvColumns.registrationNumber} are present\r\n     *\r\n     * @param csvUsers Parsed list of users\r\n     */\r\n    performExtraValidations(csvUsers: CsvUser[]) {\r\n        const invalidUserEntries = this.computeInvalidUserEntries(csvUsers);\r\n        if (invalidUserEntries) {\r\n            const maxLength = 30;\r\n            this.validationError = invalidUserEntries.length <= maxLength ? invalidUserEntries : invalidUserEntries.slice(0, maxLength) + '...';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the csv entry contains one of the supplied keys.\r\n     * @param entry which should be checked if it contains one of the keys.\r\n     * @param keys that should be checked for in the entry.\r\n     */\r\n    checkIfEntryContainsKey(entry: CsvUser, keys: string[]): boolean {\r\n        return keys.some((key) => entry[key] !== undefined && entry[key] !== '');\r\n    }\r\n\r\n    /**\r\n     * Returns a comma separated list of row numbers that contains invalid student entries\r\n     * @param csvUsers Parsed list of users\r\n     */\r\n    computeInvalidUserEntries(csvUsers: CsvUser[]): string | undefined {\r\n        const invalidList: number[] = [];\r\n        for (const [i, user] of csvUsers.entries()) {\r\n            const hasLogin = this.checkIfEntryContainsKey(user, POSSIBLE_LOGIN_HEADERS);\r\n            const hasRegistrationNumber = this.checkIfEntryContainsKey(user, POSSIBLE_REGISTRATION_NUMBER_HEADERS);\r\n            const hasEmail = this.checkIfEntryContainsKey(user, POSSIBLE_EMAIL_HEADERS);\r\n\r\n            if (!hasLogin && !hasRegistrationNumber && !hasEmail) {\r\n                // '+ 2' instead of '+ 1' due to the header column in the csv file\r\n                invalidList.push(i + 2);\r\n            }\r\n        }\r\n        return invalidList.length === 0 ? undefined : invalidList.join(', ');\r\n    }\r\n\r\n    /**\r\n     * Parses a csv file and returns a promise with a list of rows\r\n     * @param csvFile File that should be parsed\r\n     */\r\n    private parseCSVFile(csvFile: File): Promise<CsvUser[]> {\r\n        return new Promise((resolve, reject) => {\r\n            parse<CsvUser>(csvFile, {\r\n                header: true,\r\n                transformHeader: (header: string) => cleanString(header),\r\n                skipEmptyLines: true,\r\n                complete: (results) => resolve(results.data),\r\n                error: (error) => reject(error),\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends the import request to the server with the list of users to be imported\r\n     */\r\n    importUsers() {\r\n        this.isImporting = true;\r\n        if (this.tutorialGroup) {\r\n            this.tutorialGroupService.registerMultipleStudents(this.courseId, this.tutorialGroup.id!, this.usersToImport).subscribe({\r\n                next: (res) => this.onSaveSuccess(res),\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else if (this.courseGroup && !this.exam) {\r\n            this.courseManagementService.addUsersToGroupInCourse(this.courseId, this.usersToImport, this.courseGroup).subscribe({\r\n                next: (res) => this.onSaveSuccess(res),\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else if (!this.courseGroup && this.exam) {\r\n            this.examManagementService.addStudentsToExam(this.courseId, this.exam.id!, this.examUsersToImport).subscribe({\r\n                next: (res) => this.onSaveSuccess(res),\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else if (this.adminUserMode) {\r\n            // convert StudentDTO to User\r\n            const artemisUsers = this.usersToImport.map((student) => ({ ...student, visibleRegistrationNumber: student.registrationNumber }));\r\n            this.adminUserService.importAll(artemisUsers).subscribe({\r\n                next: (res) => {\r\n                    const convertedRes = new HttpResponse({\r\n                        body: res.body?.map((user) => ({\r\n                            ...user,\r\n                            registrationNumber: user.visibleRegistrationNumber,\r\n                        })),\r\n                    });\r\n                    this.onSaveSuccess(convertedRes);\r\n                },\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else {\r\n            this.alertService.error('artemisApp.importUsers.genericErrorMessage');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * True if this user was successfully imported, false otherwise\r\n     * @param user The user to be checked\r\n     */\r\n    wasImported(user: StudentDTO): boolean {\r\n        return this.hasImported && !this.wasNotImported(user);\r\n    }\r\n\r\n    /**\r\n     * True if this user could not be imported, false otherwise\r\n     * @param user The user to be checked\r\n     */\r\n    wasNotImported(user: StudentDTO): boolean {\r\n        if (this.hasImported && this.notFoundUsers?.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        for (const notFound of this.notFoundUsers) {\r\n            if (\r\n                (notFound.registrationNumber?.length && notFound.registrationNumber === user.registrationNumber) ||\r\n                (notFound.login?.length && notFound.login === user.login) ||\r\n                (notFound.email?.length && notFound.email === user.email)\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Number of Users that were successfully imported\r\n     */\r\n    get numberOfUsersImported(): number {\r\n        return !this.hasImported\r\n            ? 0\r\n            : this.examUserMode\r\n              ? this.examUsersToImport.length - this.numberOfUsersNotImported\r\n              : this.usersToImport.length - this.numberOfUsersNotImported;\r\n    }\r\n\r\n    /**\r\n     * Number of users which could not be imported\r\n     */\r\n    get numberOfUsersNotImported(): number {\r\n        return !this.hasImported ? 0 : this.notFoundUsers.length;\r\n    }\r\n\r\n    get isSubmitDisabled(): boolean {\r\n        return this.examUserMode ? this.isImporting || !this.examUsersToImport?.length : this.isImporting || !this.usersToImport?.length;\r\n    }\r\n\r\n    /**\r\n     * Callback method that is called when the import request was successful\r\n     * @param {HttpResponse<StudentDTO[]>} notFoundUsers - List of users that could NOT be imported since they were not found\r\n     */\r\n    onSaveSuccess(notFoundUsers: HttpResponse<Partial<StudentDTO>[]>) {\r\n        this.isImporting = false;\r\n        this.hasImported = true;\r\n        this.notFoundUsers = notFoundUsers.body! || [];\r\n    }\r\n\r\n    /**\r\n     * Callback method that is called when the import request failed\r\n     */\r\n    onSaveError() {\r\n        this.alertService.error('artemisApp.importUsers.genericErrorMessage');\r\n        this.isImporting = false;\r\n    }\r\n\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    onFinish() {\r\n        this.activeModal.close();\r\n    }\r\n}\r\n", "<form id=\"userImportDialogForm\" name=\"importForm\" role=\"form\" novalidate>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <span [jhiTranslate]=\"'artemisApp.importUsers.dialogTitle'\"> Import users into: </span>\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"form-group\">\r\n            <p class=\"intro-text\" jhiTranslate=\"artemisApp.importUsers.introText\"></p>\r\n            <p class=\"intro-text\" jhiTranslate=\"artemisApp.importUsers.dialogText\"></p>\r\n            <p class=\"intro-text\" jhiTranslate=\"artemisApp.importUsers.csvExampleText\"></p>\r\n        </div>\r\n        @if (!examUserMode) {\r\n            <div class=\"d-flex justify-content-center align-items-center\">\r\n                <table class=\"table table-bordered w-auto\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Login</th>\r\n                            <th [jhiTranslate]=\"'artemisApp.importUsers.email'\">Email</th>\r\n                            <th [jhiTranslate]=\"'artemisApp.importUsers.registrationNumber'\">Matriculation Number</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>user_1</td>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>user_2&#64;artemis.org</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td>11712345</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <fa-icon [icon]=\"faArrowRight\" class=\"mx-2\" />\r\n                <span>user_1, user_2, user_3</span>\r\n            </div>\r\n        }\r\n        @if (examUserMode) {\r\n            <div class=\"d-flex justify-content-center align-items-center\">\r\n                <table class=\"table table-bordered w-auto\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Login</th>\r\n                            <th [jhiTranslate]=\"'artemisApp.importUsers.email'\">Email</th>\r\n                            <th [jhiTranslate]=\"'artemisApp.importUsers.registrationNumber'\">Matriculation Number</th>\r\n                            <th [jhiTranslate]=\"'artemisApp.importUsers.room'\">Room</th>\r\n                            <th [jhiTranslate]=\"'artemisApp.importUsers.seat'\">Seat</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>user_1</td>\r\n                            <td>user_2&#64;artemis.org</td>\r\n                            <td>11712345</td>\r\n                            <td>10.101</td>\r\n                            <td>25F</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <fa-icon [icon]=\"faArrowRight\" class=\"mx-2\" />\r\n                <span>user_1</span>\r\n            </div>\r\n        }\r\n        <div class=\"form-group\">\r\n            <div class=\"d-flex align-items-end\">\r\n                <div>\r\n                    <label for=\"importCSV\" class=\"label-narrow font-weight-bold\" jhiTranslate=\"artemisApp.importUsers.csvFile.label\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.importUsers.csvFile.tooltip\" class=\"me-1\" />\r\n                </div>\r\n                @if (isParsing) {\r\n                    <fa-icon class=\"loading-spinner ms-1\" [icon]=\"faSpinner\" animation=\"spin\" />\r\n                }\r\n            </div>\r\n            <div class=\"mt-2\">\r\n                <input id=\"importCSV\" type=\"file\" accept=\".csv\" (change)=\"onCSVFileSelect($event)\" />\r\n                @if (validationError || noUsersFoundError) {\r\n                    <div class=\"mt-4 mb-2 text-danger\">\r\n                        <div [jhiTranslate]=\"'artemisApp.importUsers.usersForImport.importFailed'\"></div>\r\n                        <ul class=\"mt-1\">\r\n                            @if (validationError) {\r\n                                <li>\r\n                                    <b [jhiTranslate]=\"'artemisApp.importUsers.usersForImport.failedRows'\"></b>\r\n                                    <b [innerHTML]=\"validationError\"> </b>\r\n                                </li>\r\n                            }\r\n                            @if (noUsersFoundError) {\r\n                                <li>\r\n                                    <b [jhiTranslate]=\"'artemisApp.importUsers.usersForImport.noUsersFound'\"></b>\r\n                                </li>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n        @if (usersToImport && usersToImport.length > 0 && !examUserMode) {\r\n            <div class=\"form-group mt-4\">\r\n                <div>\r\n                    <label class=\"label-narrow font-weight-bold\" jhiTranslate=\"artemisApp.importUsers.usersForImport.label\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.importUsers.usersForImport.tooltip\" class=\"me-1\" />\r\n                </div>\r\n                <table class=\"table table-striped table-sm header-fixed mt-2\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\" style=\"width: 300px\" [jhiTranslate]=\"'artemisApp.importUsers.registrationNumber'\">Matriculation number</th>\r\n                            <th scope=\"col\">Login</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.importUsers.email'\">Email</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.importUsers.firstName'\">First name</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.importUsers.lastName'\">Last name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody class=\"table-body--students\">\r\n                        @for (user of usersToImport; track user; let i = $index) {\r\n                            <tr [class.import-success]=\"wasImported(user)\" [class.import-fail]=\"wasNotImported(user)\">\r\n                                <th scope=\"row\">{{ i + 1 }}</th>\r\n                                <td style=\"width: 300px\">{{ user.registrationNumber }}</td>\r\n                                <td>{{ user.login }}</td>\r\n                                <td>{{ user.email }}</td>\r\n                                <td>{{ user.firstName }}</td>\r\n                                <td>{{ user.lastName }}</td>\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        }\r\n        @if (examUsersToImport && examUsersToImport.length > 0 && examUserMode) {\r\n            <div class=\"form-group mt-4 table-responsive\">\r\n                <div>\r\n                    <label class=\"label-narrow font-weight-bold\" jhiTranslate=\"artemisApp.importUsers.usersForImport.label\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.importUsers.usersForImport.tooltip\" class=\"me-1\" />\r\n                </div>\r\n                <table class=\"table table-striped table-sm header-fixed mt-2\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\" style=\"width: 350px\" [jhiTranslate]=\"'artemisApp.importUsers.registrationNumber'\">Matriculation number</th>\r\n                            <th scope=\"col\">Login</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.importUsers.email'\">Email</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.importUsers.firstName'\">First name</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.importUsers.lastName'\">Last name</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.exam.examUsers.room'\">Room</th>\r\n                            <th scope=\"col\" [jhiTranslate]=\"'artemisApp.exam.examUsers.seat'\">Seat</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody class=\"table-body--students\">\r\n                        @for (user of examUsersToImport; track user; let i = $index) {\r\n                            <tr [class.import-success]=\"wasImported(user)\" [class.import-fail]=\"wasNotImported(user)\">\r\n                                <th scope=\"row\">{{ i + 1 }}</th>\r\n                                <td style=\"width: 350px\">{{ user.registrationNumber }}</td>\r\n                                <td>{{ user.login }}</td>\r\n                                <td>{{ user.email }}</td>\r\n                                <td>{{ user.firstName }}</td>\r\n                                <td>{{ user.lastName }}</td>\r\n                                <td>{{ user.room }}</td>\r\n                                <td>{{ user.seat }}</td>\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"modal-footer justify-content-between\">\r\n        @if (usersToImport && usersToImport.length > 0) {\r\n            <div class=\"flex-shrink-0 me-2 d-flex\">\r\n                @if (!hasImported) {\r\n                    <div>\r\n                        <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsers\"></strong>\r\n                        <span>&nbsp;{{ usersToImport.length }}</span>\r\n                    </div>\r\n                } @else {\r\n                    <div>\r\n                        <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsersImported\"></strong>\r\n                        <span>{{ numberOfUsersImported }}</span>\r\n                    </div>\r\n                    <div class=\"ms-2\">\r\n                        <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsersNotImported\"></strong>\r\n                        <span\r\n                            ><b style=\"color: red\">{{ numberOfUsersNotImported }}</b></span\r\n                        >\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        @if (examUsersToImport && examUsersToImport.length > 0) {\r\n            <div class=\"flex-shrink-0 me-2 d-flex\">\r\n                @if (!hasImported) {\r\n                    <div>\r\n                        <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsers\"></strong>\r\n                        <span>&nbsp;{{ examUsersToImport.length }}</span>\r\n                    </div>\r\n                } @else {\r\n                    <div>\r\n                        <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsersImported\"></strong>\r\n                        <span>{{ numberOfUsersImported }}</span>\r\n                    </div>\r\n                    <div class=\"ms-2\">\r\n                        <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsersNotImported\"></strong>\r\n                        <span\r\n                            ><b style=\"color: red\">{{ numberOfUsersNotImported }}</b></span\r\n                        >\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"flex-grow-1 d-flex justify-content-end\">\r\n            @if (!hasImported) {\r\n                <button type=\"button\" class=\"btn btn-secondary cancel me-2\" data-dismiss=\"modal\" (click)=\"clear()\">\r\n                    <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n                </button>\r\n                <button type=\"submit\" id=\"import\" name=\"importButton\" class=\"btn btn-primary\" [disabled]=\"isSubmitDisabled\" (click)=\"importUsers()\">\r\n                    <fa-icon [icon]=\"faUpload\" class=\"me-2\" />\r\n                    <span jhiTranslate=\"entity.action.to-import\"></span>\r\n                    <fa-icon class=\"ms-1\" [hidden]=\"!isImporting\" animation=\"spin\" [icon]=\"faCircleNotch\" />\r\n                </button>\r\n            } @else {\r\n                <button class=\"btn btn-success\" id=\"finish-button\" (click)=\"onFinish()\">\r\n                    <fa-icon [icon]=\"faCheck\" class=\"me-2\" />\r\n                    <span jhiTranslate=\"entity.action.finish\"></span>\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { UsersImportDialogComponent } from 'app/shared/user-import/users-import-dialog.component';\r\nimport { CourseGroup } from 'app/entities/course.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { faFileImport } from '@fortawesome/free-solid-svg-icons';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { ButtonComponent } from '../components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-user-import-button',\r\n    template: `\r\n        <jhi-button [btnType]=\"buttonType\" [btnSize]=\"buttonSize\" [icon]=\"faFileImport\" [title]=\"'artemisApp.importUsers.buttonLabel'\" (onClick)=\"openUsersImportDialog($event)\" />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class UsersImportButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n\r\n    @Input() tutorialGroup: TutorialGroup | undefined = undefined;\r\n    @Input() examUserMode: boolean;\r\n    @Input() adminUserMode: boolean;\r\n    @Input() courseGroup: CourseGroup;\r\n    @Input() courseId: number;\r\n    @Input() buttonSize: ButtonSize = ButtonSize.MEDIUM;\r\n    @Input() buttonType: ButtonType = ButtonType.PRIMARY;\r\n    @Input() exam: Exam;\r\n\r\n    @Output() importDone: EventEmitter<void> = new EventEmitter();\r\n\r\n    // Icons\r\n    faFileImport = faFileImport;\r\n\r\n    /**\r\n     * Open up import dialog for users\r\n     * @param {Event} event - Mouse Event which invoked the opening\r\n     */\r\n    openUsersImportDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(UsersImportDialogComponent, { keyboard: true, size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.courseId = this.courseId;\r\n        modalRef.componentInstance.courseGroup = this.courseGroup;\r\n        modalRef.componentInstance.exam = this.exam;\r\n        modalRef.componentInstance.tutorialGroup = this.tutorialGroup;\r\n        modalRef.componentInstance.examUserMode = this.examUserMode;\r\n        modalRef.componentInstance.adminUserMode = this.adminUserMode;\r\n        modalRef.result.then(\r\n            () => this.importDone.emit(),\r\n            () => {},\r\n        );\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_papaparse", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faArrowRight", "faSpinner", "validationError", "\u0275\u0275sanitizeHtml", "\u0275\u0275template", "UsersImportDialogComponent_Conditional_43_Conditional_7_Template", "UsersImportDialogComponent_Conditional_43_Conditional_8_Template", "\u0275\u0275conditional", "noUsersFoundError", "\u0275\u0275classProp", "wasImported", "user_r2", "wasNotImported", "\u0275\u0275textInterpolate", "\u0275$index_309_r3", "registrationNumber", "login", "email", "firstName", "lastName", "\u0275\u0275repeaterCreate", "UsersImportDialogComponent_Conditional_46_For_39_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "usersToImport", "user_r4", "\u0275$index_403_r5", "room", "seat", "UsersImportDialogComponent_Conditional_47_For_45_Template", "examUsersToImport", "\u0275\u0275textInterpolate1", "length", "numberOfUsersImported", "numberOfUsersNotImported", "UsersImportDialogComponent_Conditional_51_Conditional_3_Template", "UsersImportDialogComponent_Conditional_51_Conditional_4_Template", "hasImported", "UsersImportDialogComponent_Conditional_52_Conditional_3_Template", "UsersImportDialogComponent_Conditional_52_Conditional_4_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r6", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clear", "importUsers", "faBan", "isSubmitDisabled", "faUpload", "isImporting", "faCircleNotch", "_r7", "onFinish", "faCheck", "POSSIBLE_REGISTRATION_NUMBER_HEADERS", "POSSIBLE_LOGIN_HEADERS", "POSSIBLE_EMAIL_HEADERS", "POSSIBLE_FIRST_NAME_HEADERS", "POSSIBLE_LAST_NAME_HEADERS", "POSSIBLE_ROOM_HEADERS", "POSSIBLE_SEAT_HEADERS", "UsersImportDialogComponent", "activeModal", "inject", "NgbActiveModal", "alertService", "AlertService", "examManagementService", "ExamManagementService", "courseManagementService", "CourseManagementService", "adminUserService", "AdminUserService", "tutorialGroupService", "TutorialGroupsService", "ActionType", "importForm", "courseId", "courseGroup", "exam", "tutorialGroup", "examUserMode", "adminUserMode", "notFoundUsers", "isParsing", "dialogErrorSource", "Subject", "dialogError$", "asObservable", "ngOnDestroy", "unsubscribe", "resetDialog", "onCSVFileSelect", "event", "__async", "target", "files", "readUsersFromCSVFile", "csvFile", "csvUsers", "undefined", "parseCSVFile", "error", "message", "performExtraValidations", "value", "usedHeaders", "Object", "keys", "first", "registrationNumberHeader", "find", "includes", "loginHeader", "emailHeader", "firstNameHeader", "lastNameHeader", "roomHeader", "seatHeader", "map", "user", "trim", "invalidUserEntries", "computeInvalidUserEntries", "maxLength", "slice", "checkIfEntryContainsKey", "entry", "some", "key", "invalidList", "i", "entries", "hasLogin", "hasRegistrationNumber", "hasEmail", "push", "join", "Promise", "resolve", "reject", "parse", "header", "transformHeader", "cleanString", "skipEmptyLines", "complete", "results", "data", "registerMultipleStudents", "id", "subscribe", "next", "res", "onSaveSuccess", "onSaveError", "addUsersToGroupInCourse", "addStudentsToExam", "artemisUsers", "student", "__spreadProps", "__spreadValues", "visibleRegistrationNumber", "importAll", "convertedRes", "HttpResponse", "body", "notFound", "dismiss", "close", "selectors", "viewQuery", "rf", "ctx", "UsersImportDialogComponent_Conditional_24_Template", "UsersImportDialogComponent_Conditional_25_Template", "UsersImportDialogComponent_Conditional_37_Template", "$event", "UsersImportDialogComponent_Conditional_43_Template", "UsersImportDialogComponent_Conditional_46_Template", "UsersImportDialogComponent_Conditional_47_Template", "UsersImportDialogComponent_Conditional_51_Template", "UsersImportDialogComponent_Conditional_52_Template", "UsersImportDialogComponent_Conditional_55_Template", "UsersImportDialogComponent_Conditional_56_Template", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "NgForm", "TranslateDirective", "FaIconComponent", "HelpIconComponent", "styles", "encapsulation", "UsersImportButtonComponent", "modalService", "inject", "NgbModal", "ButtonType", "ButtonSize", "tutorialGroup", "undefined", "examUserMode", "adminUserMode", "courseGroup", "courseId", "buttonSize", "MEDIUM", "buttonType", "PRIMARY", "exam", "importDone", "EventEmitter", "faFileImport", "openUsersImportDialog", "event", "stopPropagation", "modalRef", "open", "UsersImportDialogComponent", "keyboard", "size", "backdrop", "componentInstance", "result", "then", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ButtonComponent", "encapsulation"]
}
