{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/participate/quiz-participation.component.ts", "src/main/webapp/app/exercises/quiz/participate/quiz-participation.component.html", "src/main/webapp/app/exercises/quiz/participate/quiz-participation.service.ts"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, QueryList, ViewChildren, inject } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport isMobile from 'ismobilejs-es5';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Subscription, combineLatest, of, take } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService, AlertType } from 'app/core/util/alert.service';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { MultipleChoiceQuestionComponent } from 'app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-question.component';\r\nimport { DragAndDropQuestionComponent } from 'app/exercises/quiz/shared/questions/drag-and-drop-question/drag-and-drop-question.component';\r\nimport { ShortAnswerQuestionComponent } from 'app/exercises/quiz/shared/questions/short-answer-question/short-answer-question.component';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport * as smoothscroll from 'smoothscroll-polyfill';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { ShortAnswerSubmittedAnswer } from 'app/entities/quiz/short-answer-submitted-answer.model';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { ShortAnswerSubmittedText } from 'app/entities/quiz/short-answer-submitted-text.model';\r\nimport { QuizParticipationService } from 'app/exercises/quiz/participate/quiz-participation.service';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { QuizBatch, QuizExercise, QuizMode } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { DragAndDropSubmittedAnswer } from 'app/entities/quiz/drag-and-drop-submitted-answer.model';\r\nimport { QuizSubmission } from 'app/entities/quiz/quiz-submission.model';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { MultipleChoiceSubmittedAnswer } from 'app/entities/quiz/multiple-choice-submitted-answer.model';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { ArtemisQuizService } from 'app/shared/quiz/quiz.service';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AUTOSAVE_CHECK_INTERVAL, AUTOSAVE_EXERCISE_INTERVAL, UI_RELOAD_TIME } from 'app/shared/constants/exercise-exam-constants';\r\nimport { debounce } from 'lodash-es';\r\nimport { captureException } from '@sentry/angular';\r\nimport { getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { faCircleNotch, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { JhiConnectionStatusComponent } from 'app/shared/connection-status/connection-status.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz',\r\n    templateUrl: './quiz-participation.component.html',\r\n    providers: [ParticipationService],\r\n    styleUrls: ['./quiz-participation.component.scss'],\r\n    imports: [\r\n        NgClass,\r\n        NgTemplateOutlet,\r\n        TranslateDirective,\r\n        ButtonComponent,\r\n        NgbTooltip,\r\n        MultipleChoiceQuestionComponent,\r\n        DragAndDropQuestionComponent,\r\n        ShortAnswerQuestionComponent,\r\n        JhiConnectionStatusComponent,\r\n        FormsModule,\r\n        FaIconComponent,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class QuizParticipationComponent implements OnInit, OnDestroy {\r\n    private websocketService = inject(WebsocketService);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private participationService = inject(ParticipationService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private alertService = inject(AlertService);\r\n    private quizParticipationService = inject(QuizParticipationService);\r\n    private translateService = inject(TranslateService);\r\n    private quizService = inject(ArtemisQuizService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    // make constants available to html for comparison\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly ButtonType = ButtonType;\r\n    readonly QuizMode = QuizMode;\r\n    readonly roundScoreSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly getCourseFromExercise = getCourseFromExercise;\r\n\r\n    @ViewChildren(MultipleChoiceQuestionComponent)\r\n    mcQuestionComponents: QueryList<MultipleChoiceQuestionComponent>;\r\n\r\n    @ViewChildren(DragAndDropQuestionComponent)\r\n    dndQuestionComponents: QueryList<DragAndDropQuestionComponent>;\r\n\r\n    @ViewChildren(ShortAnswerQuestionComponent)\r\n    shortAnswerQuestionComponents: QueryList<ShortAnswerQuestionComponent>;\r\n\r\n    private routeAndDataSubscription: Subscription;\r\n\r\n    runningTimeouts = new Array<any>(); // actually the function type setTimeout(): (handler: any, timeout?: any, ...args: any[]): number\r\n\r\n    isSubmitting = false;\r\n    // isSaving = false;\r\n    lastSavedTimeText = '';\r\n    justSaved = false;\r\n    waitingForQuizStart = false;\r\n    refreshingQuiz = false;\r\n\r\n    remainingTimeText = '?';\r\n    remainingTimeSeconds = 0;\r\n    timeUntilStart = '0';\r\n    disconnected = false;\r\n    unsavedChanges = false;\r\n\r\n    showingResult = false;\r\n    userScore: number;\r\n\r\n    mode: string;\r\n    submission = new QuizSubmission();\r\n    quizExercise: QuizExercise;\r\n    quizBatch?: QuizBatch;\r\n    totalScore: number;\r\n    selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n    dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n    shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n    result: Result;\r\n    questionScores: { [id: number]: number } = {};\r\n    quizId: number;\r\n    courseId: number;\r\n    interval?: number;\r\n    autoSaveInterval?: number;\r\n    autoSaveTimer = 0;\r\n    quizStarted = false;\r\n    startDate: dayjs.Dayjs | undefined;\r\n    endDate: dayjs.Dayjs | undefined;\r\n    password = '';\r\n    previousRunning = false;\r\n    isMobile = false;\r\n    isManagementView = false;\r\n\r\n    /**\r\n     * Websocket channels\r\n     */\r\n    participationChannel: string;\r\n    quizExerciseChannel: string;\r\n    quizBatchChannel: string;\r\n    websocketSubscription?: Subscription;\r\n\r\n    /**\r\n     * debounced function to reset 'justSubmitted', so that time since last submission is displayed again when no submission has been made for at least 2 seconds\r\n     */\r\n    timeoutJustSaved = debounce(() => {\r\n        this.justSaved = false;\r\n    }, 2000);\r\n\r\n    // Icons\r\n    faSync = faSync;\r\n    faCircleNotch = faCircleNotch;\r\n\r\n    constructor() {\r\n        smoothscroll.polyfill();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isMobile = isMobile(window.navigator.userAgent).any;\r\n        // set correct mode\r\n        this.routeAndDataSubscription = combineLatest([this.route.data, this.route.params, this.route.parent?.parent?.params ?? of({ courseId: undefined })]).subscribe(\r\n            ([data, params, parentParams]) => {\r\n                this.mode = data.mode;\r\n                this.quizId = Number(params['exerciseId']);\r\n                this.courseId = Number(parentParams['courseId']);\r\n                // init according to mode\r\n                switch (this.mode) {\r\n                    case 'practice':\r\n                        this.initPracticeMode();\r\n                        break;\r\n                    case 'preview':\r\n                        this.initPreview();\r\n                        break;\r\n                    case 'solution':\r\n                        this.initShowSolution();\r\n                        break;\r\n                    case 'live':\r\n                        this.initLiveMode();\r\n                        break;\r\n                }\r\n            },\r\n        );\r\n        // update displayed times in UI regularly\r\n        this.interval = window.setInterval(() => {\r\n            this.updateDisplayedTimes();\r\n            this.checkForQuizEnd();\r\n        }, UI_RELOAD_TIME);\r\n        this.isManagementView = this.router.url.startsWith('/course-management');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        window.clearInterval(this.interval);\r\n        window.clearInterval(this.autoSaveInterval);\r\n        /**\r\n         * unsubscribe from all subscribed websocket channels when page is closed\r\n         */\r\n        this.runningTimeouts.forEach((timeout) => {\r\n            clearTimeout(timeout);\r\n        });\r\n\r\n        if (this.participationChannel) {\r\n            this.websocketService.unsubscribe(this.participationChannel);\r\n        }\r\n        if (this.quizExerciseChannel) {\r\n            this.websocketService.unsubscribe(this.quizExerciseChannel);\r\n        }\r\n        this.websocketSubscription?.unsubscribe();\r\n        this.routeAndDataSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * loads latest submission from server and sets up socket connection\r\n     */\r\n    initLiveMode() {\r\n        // listen to connect / disconnect events\r\n        this.websocketSubscription = this.websocketService.connectionState.subscribe((status) => {\r\n            if (status.connected && this.disconnected) {\r\n                // if the disconnect happened during the live quiz and there are unsaved changes, we save the submission on the server\r\n                this.triggerSave(false);\r\n                // if the quiz was not yet started, we might have missed the quiz start => refresh\r\n                if (this.quizBatch && !this.quizBatch.started) {\r\n                    this.refreshQuiz(true);\r\n                } else if (this.quizBatch && this.endDate && this.endDate.isBefore(this.serverDateService.now())) {\r\n                    // if the quiz has ended, we might have missed to load the results => refresh\r\n                    this.refreshQuiz(true);\r\n                }\r\n            }\r\n            this.disconnected = !status.connected;\r\n        });\r\n\r\n        this.subscribeToWebsocketChannels();\r\n        this.setupAutoSave();\r\n\r\n        // load the quiz (and existing submission if quiz has started)\r\n        this.participationService.startQuizParticipation(this.quizId).subscribe({\r\n            next: (response: HttpResponse<StudentParticipation>) => {\r\n                this.updateParticipationFromServer(response.body!);\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * loads quizExercise and starts practice mode\r\n     */\r\n    initPracticeMode() {\r\n        this.quizExerciseService.findForStudent(this.quizId).subscribe({\r\n            next: (res: HttpResponse<QuizExercise>) => {\r\n                if (res.body && res.body.isOpenForPractice) {\r\n                    this.startQuizPreviewOrPractice(res.body);\r\n                } else {\r\n                    alert('Error: This quiz is not open for practice!');\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * loads quiz exercise and starts preview mode\r\n     */\r\n    initPreview() {\r\n        this.quizExerciseService.find(this.quizId).subscribe({\r\n            next: (res: HttpResponse<QuizExercise>) => {\r\n                this.startQuizPreviewOrPractice(res.body!);\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    initShowSolution() {\r\n        this.quizExerciseService.find(this.quizId).subscribe({\r\n            next: (res: HttpResponse<QuizExercise>) => {\r\n                this.quizExercise = res.body!;\r\n                this.initQuiz();\r\n                this.showingResult = true;\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the given quiz in practice or preview mode\r\n     *\r\n     * @param quizExercise {object} the quizExercise to start\r\n     */\r\n    startQuizPreviewOrPractice(quizExercise: QuizExercise) {\r\n        // init quiz\r\n        this.quizExercise = quizExercise;\r\n        this.initQuiz();\r\n\r\n        // randomize order\r\n        this.quizService.randomizeOrder(this.quizExercise.quizQuestions, this.quizExercise.randomizeQuestionOrder);\r\n\r\n        // init empty submission\r\n        this.submission = new QuizSubmission();\r\n\r\n        // adjust end date\r\n        this.endDate = dayjs().add(this.quizExercise.duration!, 'seconds');\r\n\r\n        // auto submit when time is up\r\n        this.runningTimeouts.push(\r\n            setTimeout(() => {\r\n                this.onSubmit();\r\n            }, quizExercise.duration! * 1000),\r\n        );\r\n    }\r\n\r\n    setupAutoSave(): void {\r\n        // Clear existing autosaves - only one may run at a time\r\n        this.stopAutoSave();\r\n        this.autoSaveInterval = window.setInterval(() => {\r\n            if (this.waitingForQuizStart) {\r\n                // The quiz has not started. No need to autosave yet.\r\n                return;\r\n            }\r\n            if (this.remainingTimeSeconds < 0 || this.submission.submitted) {\r\n                this.stopAutoSave();\r\n                return;\r\n            }\r\n            this.autoSaveTimer++;\r\n            if (this.autoSaveTimer >= AUTOSAVE_EXERCISE_INTERVAL) {\r\n                this.triggerSave();\r\n            }\r\n        }, AUTOSAVE_CHECK_INTERVAL);\r\n    }\r\n\r\n    stopAutoSave(): void {\r\n        window.clearInterval(this.autoSaveInterval);\r\n        this.autoSaveInterval = undefined;\r\n    }\r\n\r\n    /**\r\n     * subscribe to any outstanding websocket channels\r\n     */\r\n    subscribeToWebsocketChannels() {\r\n        if (!this.participationChannel) {\r\n            this.participationChannel = '/user/topic/exercise/' + this.quizId + '/participation';\r\n            // TODO: subscribe for new results instead if this is what we are actually interested in\r\n            // participation channel => react to new results\r\n            this.websocketService.subscribe(this.participationChannel);\r\n            this.websocketService.receive(this.participationChannel).subscribe((changedParticipation: StudentParticipation) => {\r\n                if (changedParticipation && this.quizExercise && changedParticipation.exercise!.id === this.quizExercise.id) {\r\n                    if (this.waitingForQuizStart) {\r\n                        // only apply completely if quiz hasn't started to prevent jumping ui during participation\r\n                        this.updateParticipationFromServer(changedParticipation);\r\n                    } else {\r\n                        // update quizExercise and results / submission\r\n                        this.showQuizResultAfterQuizEnd(changedParticipation);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!this.quizExerciseChannel) {\r\n            this.quizExerciseChannel = '/topic/courses/' + this.courseId + '/quizExercises';\r\n            // quizExercise channel => react to changes made to quizExercise (e.g. start date)\r\n            this.websocketService.subscribe(this.quizExerciseChannel);\r\n            this.websocketService.receive(this.quizExerciseChannel).subscribe((quiz) => {\r\n                if (this.waitingForQuizStart && this.quizId === quiz.id) {\r\n                    this.applyQuizFull(quiz);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.quizBatch && !this.quizBatch.started) {\r\n            const batchChannel = this.quizExerciseChannel + '/' + this.quizBatch.id;\r\n            if (this.quizBatchChannel !== batchChannel) {\r\n                this.quizBatchChannel = batchChannel;\r\n                this.websocketService.subscribe(this.quizBatchChannel);\r\n                this.websocketService.receive(this.quizBatchChannel).subscribe((quiz) => {\r\n                    this.applyQuizFull(quiz);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * updates all displayed (relative) times in the UI\r\n     */\r\n    updateDisplayedTimes() {\r\n        const translationBasePath = 'artemisApp.showStatistic.';\r\n        // update remaining time\r\n        if (this.endDate) {\r\n            const endDate = this.endDate;\r\n            if (endDate.isAfter(this.serverDateService.now())) {\r\n                // quiz is still running => calculate remaining seconds and generate text based on that\r\n                // Get the diff as a floating point number in seconds\r\n                this.remainingTimeSeconds = endDate.diff(this.serverDateService.now(), 'seconds');\r\n                this.remainingTimeText = this.relativeTimeText(this.remainingTimeSeconds);\r\n            } else {\r\n                // quiz is over => set remaining seconds to negative, to deactivate 'Submit' button\r\n                this.remainingTimeSeconds = -1;\r\n                this.remainingTimeText = this.translateService.instant(translationBasePath + 'quizHasEnded');\r\n            }\r\n        } else {\r\n            // remaining time is unknown => Set remaining seconds to 0, to keep 'Submit' button enabled\r\n            this.remainingTimeSeconds = 0;\r\n            this.remainingTimeText = '?';\r\n        }\r\n\r\n        // update submission time\r\n        if (this.submission && this.submission.submissionDate) {\r\n            // exact value is not important => use default relative time from dayjs for better readability and less distraction\r\n            this.lastSavedTimeText = dayjs(this.submission.submissionDate).fromNow();\r\n        }\r\n\r\n        // update time until start\r\n        if (this.quizBatch && this.startDate) {\r\n            if (this.startDate.isAfter(this.serverDateService.now())) {\r\n                this.timeUntilStart = this.relativeTimeText(this.startDate.diff(this.serverDateService.now(), 'seconds'));\r\n            } else {\r\n                this.timeUntilStart = this.translateService.instant(translationBasePath + 'now');\r\n                // Check if websocket has updated the quiz exercise and check that following block is only executed once\r\n                if (!this.quizBatch.started && !this.quizStarted) {\r\n                    this.quizStarted = true;\r\n                    if (this.quizExercise.quizMode === QuizMode.INDIVIDUAL) {\r\n                        // there is not websocket notification for INDIVIDUAL mode so just load the quiz\r\n                        this.refreshQuiz(true);\r\n                    } else {\r\n                        // Refresh quiz after 5 seconds when client did not receive websocket message to start the quiz\r\n                        setTimeout(() => {\r\n                            // Check again if websocket has updated the quiz exercise within the 5 seconds\r\n                            if (!this.quizBatch || !this.quizBatch.started) {\r\n                                this.refreshQuiz(true);\r\n                            }\r\n                        }, 5000);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.timeUntilStart = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Express the given timespan as humanized text\r\n     *\r\n     * @param remainingTimeSeconds the amount of seconds to display\r\n     * @return humanized text for the given amount of seconds\r\n     */\r\n    relativeTimeText(remainingTimeSeconds: number) {\r\n        if (remainingTimeSeconds > 210) {\r\n            return Math.ceil(remainingTimeSeconds / 60) + ' min';\r\n        } else if (remainingTimeSeconds > 59) {\r\n            return Math.floor(remainingTimeSeconds / 60) + ' min ' + (remainingTimeSeconds % 60) + ' s';\r\n        } else {\r\n            return remainingTimeSeconds + ' s';\r\n        }\r\n    }\r\n\r\n    checkForQuizEnd() {\r\n        const running = this.mode === 'live' && !!this.quizBatch && this.remainingTimeSeconds >= 0;\r\n        if (!running && this.previousRunning) {\r\n            // Rely on the grace period to store any unsaved changes at the end of the quiz\r\n            if (!this.submission.submitted) {\r\n                this.stopAutoSave();\r\n                this.triggerSave();\r\n            }\r\n        }\r\n        this.previousRunning = running;\r\n    }\r\n\r\n    /**\r\n     * Initialize the selections / mappings for each question with an empty array\r\n     */\r\n    initQuiz() {\r\n        // calculate score\r\n        this.totalScore = this.quizExercise.quizQuestions\r\n            ? this.quizExercise.quizQuestions.reduce((score, question) => {\r\n                  return score + question.points!;\r\n              }, 0)\r\n            : 0;\r\n\r\n        // prepare selection arrays for each question\r\n        this.selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n        this.dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n        this.shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n        if (this.quizExercise.quizQuestions) {\r\n            this.quizExercise.quizQuestions.forEach((question) => {\r\n                switch (question.type) {\r\n                    case QuizQuestionType.MULTIPLE_CHOICE:\r\n                        // add the array of selected options to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.selectedAnswerOptions.set(question.id!, []);\r\n                        break;\r\n                    case QuizQuestionType.DRAG_AND_DROP:\r\n                        // add the array of mappings to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.dragAndDropMappings.set(question.id!, []);\r\n                        break;\r\n                    case QuizQuestionType.SHORT_ANSWER:\r\n                        // add the array of submitted texts to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.shortAnswerSubmittedTexts.set(question.id!, []);\r\n                        break;\r\n                    default:\r\n                        captureException('Unknown question type: ' + question);\r\n                        break;\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * applies the data from the model to the UI (reverse of applySelection):\r\n     *\r\n     * Sets the checkmarks (selected answers) for all questions according to the submission data\r\n     * this needs to be done when we get new submission data, e.g. through the websocket connection\r\n     */\r\n    applySubmission() {\r\n        // create dictionaries (key: questionID, value: Array of selected answerOptions / mappings)\r\n        // for the submittedAnswers to hand the selected options / mappings in individual arrays to the question components\r\n        this.selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n        this.dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n        this.shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n        if (this.quizExercise.quizQuestions) {\r\n            // iterate through all questions of this quiz\r\n            this.quizExercise.quizQuestions.forEach((question) => {\r\n                // find the submitted answer that belongs to this question, only when submitted answers already exist\r\n                const submittedAnswer = this.submission.submittedAnswers?.find((answer) => {\r\n                    return answer.quizQuestion!.id === question.id;\r\n                });\r\n\r\n                switch (question.type) {\r\n                    case QuizQuestionType.MULTIPLE_CHOICE:\r\n                        // add the array of selected options to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.selectedAnswerOptions.set(question.id!, (submittedAnswer as MultipleChoiceSubmittedAnswer)?.selectedOptions || []);\r\n                        break;\r\n                    case QuizQuestionType.DRAG_AND_DROP:\r\n                        // add the array of mappings to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.dragAndDropMappings.set(question.id!, (submittedAnswer as DragAndDropSubmittedAnswer)?.mappings || []);\r\n                        break;\r\n                    case QuizQuestionType.SHORT_ANSWER:\r\n                        // add the array of submitted texts to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.shortAnswerSubmittedTexts.set(question.id!, (submittedAnswer as ShortAnswerSubmittedAnswer)?.submittedTexts || []);\r\n                        break;\r\n                    default:\r\n                        captureException('Unknown question type: ' + question);\r\n                        break;\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * updates the model according to UI state (reverse of applySubmission):\r\n     * Creates the submission from the user's selection\r\n     * this needs to be done when we want to send the submission either for saving (through websocket) or for submitting (through REST call)\r\n     */\r\n    applySelection() {\r\n        // convert the selection dictionary (key: questionID, value: Array of selected answerOptions / mappings)\r\n        // into an array of submittedAnswer objects and save it as the submittedAnswers of the submission\r\n        this.submission.submittedAnswers = [];\r\n\r\n        // for multiple-choice questions\r\n        this.selectedAnswerOptions.forEach((answerOptions, questionId) => {\r\n            // find the question object for the given question id\r\n            const question = this.quizExercise.quizQuestions?.find((selectedQuestion) => {\r\n                return selectedQuestion.id === questionId;\r\n            });\r\n            if (!question) {\r\n                captureException('question not found for ID: ' + questionId);\r\n                return;\r\n            }\r\n            // generate the submittedAnswer object\r\n            const mcSubmittedAnswer = new MultipleChoiceSubmittedAnswer();\r\n            mcSubmittedAnswer.quizQuestion = question;\r\n            mcSubmittedAnswer.selectedOptions = answerOptions;\r\n            this.submission.submittedAnswers!.push(mcSubmittedAnswer);\r\n        }, this);\r\n\r\n        // for drag-and-drop questions\r\n        this.dragAndDropMappings.forEach((mappings, questionId) => {\r\n            // find the question object for the given question id\r\n            const question = this.quizExercise.quizQuestions?.find((localQuestion) => {\r\n                return localQuestion.id === questionId;\r\n            });\r\n            if (!question) {\r\n                captureException('question not found for ID: ' + questionId);\r\n                return;\r\n            }\r\n            // generate the submittedAnswer object\r\n            const dndSubmittedAnswer = new DragAndDropSubmittedAnswer();\r\n            dndSubmittedAnswer.quizQuestion = question;\r\n            dndSubmittedAnswer.mappings = mappings;\r\n            this.submission.submittedAnswers!.push(dndSubmittedAnswer);\r\n        }, this);\r\n        // for short-answer questions\r\n        this.shortAnswerSubmittedTexts.forEach((submittedTexts, questionId) => {\r\n            // find the question object for the given question id\r\n            const question = this.quizExercise.quizQuestions?.find((localQuestion) => {\r\n                return localQuestion.id === questionId;\r\n            });\r\n            if (!question) {\r\n                captureException('question not found for ID: ' + questionId);\r\n                return;\r\n            }\r\n            // generate the submittedAnswer object\r\n            const shortAnswerSubmittedAnswer = new ShortAnswerSubmittedAnswer();\r\n            shortAnswerSubmittedAnswer.quizQuestion = question;\r\n            shortAnswerSubmittedAnswer.submittedTexts = submittedTexts;\r\n            this.submission.submittedAnswers!.push(shortAnswerSubmittedAnswer);\r\n        }, this);\r\n    }\r\n\r\n    /**\r\n     * Apply the data of the participation, replacing all old data\r\n     */\r\n    updateParticipationFromServer(participation: StudentParticipation) {\r\n        if (participation) {\r\n            this.applyQuizFull(participation.exercise as QuizExercise);\r\n        }\r\n\r\n        // apply submission if it exists\r\n        if (participation?.results?.length) {\r\n            this.submission = participation.results[0].submission as QuizSubmission;\r\n\r\n            // update submission time\r\n            this.updateSubmissionTime();\r\n\r\n            // show submission answers in UI\r\n            this.applySubmission();\r\n\r\n            if (participation.results[0].score !== undefined && this.quizExercise.quizEnded) {\r\n                // quiz has ended and results are available\r\n                this.showResult(participation.results[0]);\r\n            }\r\n        } else {\r\n            this.submission = new QuizSubmission();\r\n            this.initQuiz();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * apply the data of the quiz, replacing all old data and enabling reconnect if necessary\r\n     * @param quizExercise\r\n     */\r\n    applyQuizFull(quizExercise: QuizExercise) {\r\n        this.quizExercise = quizExercise;\r\n        this.initQuiz();\r\n\r\n        this.quizBatch = this.quizExercise.quizBatches?.[0];\r\n        if (this.quizExercise.quizEnded) {\r\n            // quiz is done\r\n            this.waitingForQuizStart = false;\r\n        } else if (!this.quizBatch || !this.quizBatch.started) {\r\n            // quiz hasn't started yet\r\n            this.waitingForQuizStart = true;\r\n\r\n            // enable automatic websocket reconnect\r\n            this.websocketService.enableReconnect();\r\n\r\n            if (this.quizBatch && this.quizBatch.startTime) {\r\n                // synchronize time with server\r\n                this.startDate = dayjs(this.quizBatch.startTime ?? this.serverDateService.now());\r\n            }\r\n        } else {\r\n            // quiz has started\r\n            this.waitingForQuizStart = false;\r\n\r\n            // update timeDifference\r\n            this.startDate = dayjs(this.quizBatch.startTime ?? this.serverDateService.now());\r\n            this.endDate = this.startDate.add(this.quizExercise.duration!, 'seconds');\r\n\r\n            // check if quiz hasn't ended\r\n            if (!this.quizBatch.ended) {\r\n                // enable automatic websocket reconnect\r\n                this.websocketService.enableReconnect();\r\n\r\n                // apply randomized order where necessary\r\n                this.quizService.randomizeOrder(this.quizExercise.quizQuestions, this.quizExercise.randomizeQuestionOrder);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * This method only handles the update of the quiz after the quiz has ended\r\n     */\r\n    showQuizResultAfterQuizEnd(participation: StudentParticipation) {\r\n        const quizExercise = participation.exercise as QuizExercise;\r\n        if (participation.results?.first()?.submission !== undefined && quizExercise.quizEnded) {\r\n            // quiz has ended and results are available\r\n            this.submission = participation.results[0].submission as QuizSubmission;\r\n\r\n            // update submission time\r\n            this.updateSubmissionTime();\r\n            this.transferInformationToQuizExercise(quizExercise);\r\n            this.applySubmission();\r\n            this.showResult(participation.results[0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer additional information (explanations, correct answers) from the given full quiz exercise to quizExercise.\r\n     * This method is typically invoked after the quiz has ended and makes sure that the (random) order of the quiz\r\n     * questions and answer options for the particular user is respected\r\n     *\r\n     * @param fullQuizExerciseFromServer {object} the quizExercise containing additional information\r\n     */\r\n    transferInformationToQuizExercise(fullQuizExerciseFromServer: QuizExercise) {\r\n        this.quizExercise.quizQuestions!.forEach((clientQuestion) => {\r\n            // find updated question\r\n            const fullQuestionFromServer = fullQuizExerciseFromServer.quizQuestions?.find((fullQuestion) => {\r\n                return clientQuestion.id === fullQuestion.id;\r\n            });\r\n            if (fullQuestionFromServer) {\r\n                clientQuestion.explanation = fullQuestionFromServer.explanation;\r\n\r\n                switch (clientQuestion.type) {\r\n                    case QuizQuestionType.MULTIPLE_CHOICE:\r\n                        const mcClientQuestion = clientQuestion as MultipleChoiceQuestion;\r\n                        const mcFullQuestionFromServer = fullQuestionFromServer as MultipleChoiceQuestion;\r\n\r\n                        const answerOptions = mcClientQuestion.answerOptions!;\r\n                        answerOptions.forEach((clientAnswerOption) => {\r\n                            // find updated answerOption\r\n                            const fullAnswerOptionFromServer = mcFullQuestionFromServer.answerOptions!.find((option) => {\r\n                                return clientAnswerOption.id === option.id;\r\n                            });\r\n                            if (fullAnswerOptionFromServer) {\r\n                                clientAnswerOption.explanation = fullAnswerOptionFromServer.explanation;\r\n                                clientAnswerOption.isCorrect = fullAnswerOptionFromServer.isCorrect;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case QuizQuestionType.DRAG_AND_DROP:\r\n                        const dndClientQuestion = clientQuestion as DragAndDropQuestion;\r\n                        const dndFullQuestionFromServer = fullQuestionFromServer as DragAndDropQuestion;\r\n                        dndClientQuestion.correctMappings = dndFullQuestionFromServer.correctMappings;\r\n                        break;\r\n                    case QuizQuestionType.SHORT_ANSWER:\r\n                        const shortAnswerClientQuestion = clientQuestion as ShortAnswerQuestion;\r\n                        const shortAnswerFullQuestionFromServer = fullQuestionFromServer as ShortAnswerQuestion;\r\n                        shortAnswerClientQuestion.correctMappings = shortAnswerFullQuestionFromServer.correctMappings;\r\n                        break;\r\n                    default:\r\n                        captureException(new Error('Unknown question type: ' + clientQuestion));\r\n                        break;\r\n                }\r\n            }\r\n        }, this);\r\n\r\n        // make sure that a possible explanation is updated correctly in all sub components\r\n        this.mcQuestionComponents.forEach((mcQuestionComponent) => {\r\n            mcQuestionComponent.watchCollection();\r\n        });\r\n        this.dndQuestionComponents.forEach((dndQuestionComponent) => {\r\n            dndQuestionComponent.watchCollection();\r\n        });\r\n        this.shortAnswerQuestionComponents.forEach((shortAnswerQuestionComponent) => {\r\n            shortAnswerQuestionComponent.watchCollection();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Display results of the quiz for the user\r\n     * @param result\r\n     */\r\n    showResult(result: Result) {\r\n        this.result = result;\r\n        if (this.result) {\r\n            this.showingResult = true;\r\n            const course = this.quizExercise.course || this.quizExercise?.exerciseGroup?.exam?.course;\r\n\r\n            // assign user score (limit decimal places to 2)\r\n            this.userScore = this.submission.scoreInPoints ? roundValueSpecifiedByCourseSettings(this.submission.scoreInPoints, course) : 0;\r\n\r\n            // create dictionary with scores for each question\r\n            this.questionScores = {};\r\n            this.submission.submittedAnswers?.forEach((submittedAnswer) => {\r\n                // limit decimal places\r\n                this.questionScores[submittedAnswer.quizQuestion!.id!] = roundValueSpecifiedByCourseSettings(submittedAnswer.scoreInPoints!, course);\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback method to be triggered when the user changes any of the answers in the quiz (in sub components based on the question type)\r\n     */\r\n    onSelectionChanged() {\r\n        this.unsavedChanges = true;\r\n    }\r\n\r\n    triggerSave(resetAutoSaveTimer = true): void {\r\n        if (resetAutoSaveTimer) {\r\n            this.autoSaveTimer = 0;\r\n        }\r\n        if (this.unsavedChanges && !this.isSubmitting) {\r\n            this.applySelection();\r\n            this.submission.submissionDate = this.serverDateService.now();\r\n            this.quizParticipationService\r\n                .saveOrSubmitForLiveMode(this.submission, this.quizId, false)\r\n                .pipe(take(1))\r\n                .subscribe({\r\n                    next: () => {\r\n                        this.unsavedChanges = false;\r\n                        this.updateSubmissionTime();\r\n                    },\r\n                    error: (error: HttpErrorResponse) => this.onSaveError(error.message),\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update the value for adjustedSubmissionDate in submission\r\n     */\r\n    updateSubmissionTime() {\r\n        if (this.submission.submissionDate) {\r\n            if (Math.abs(dayjs(this.submission.submissionDate).diff(this.serverDateService.now(), 'seconds')) < 2) {\r\n                this.justSaved = true;\r\n                this.timeoutJustSaved();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function for handling quiz submission after saving submission to server\r\n     * @param error a potential error during save\r\n     */\r\n    onSaveError(error: string) {\r\n        if (error) {\r\n            const errorMessage = 'Saving answers failed: ' + error;\r\n            this.alertService.addAlert({\r\n                type: AlertType.DANGER,\r\n                message: errorMessage,\r\n                disableTranslation: true,\r\n            });\r\n            this.unsavedChanges = true;\r\n            this.isSubmitting = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the student has interacted with each question of the quiz:\r\n     * - for a Multiple Choice Questions it checks if an answer option was selected\r\n     * - for a Drag and Drop Questions it checks if at least one mapping has been made\r\n     * - for a Short Answer Questions it checks if at least one field has been clicked in\r\n     * @return {boolean} true when student interacted with every question, false when not with every questions has an interaction\r\n     */\r\n    areAllQuestionsAnswered(): boolean {\r\n        if (!this.quizExercise.quizQuestions) {\r\n            return true;\r\n        }\r\n\r\n        for (const question of this.quizExercise.quizQuestions) {\r\n            switch (question.type) {\r\n                case QuizQuestionType.MULTIPLE_CHOICE:\r\n                    const options = this.selectedAnswerOptions.get(question.id!);\r\n                    if (options && options.length === 0) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case QuizQuestionType.DRAG_AND_DROP:\r\n                    const mappings = this.dragAndDropMappings.get(question.id!);\r\n                    if (mappings && mappings.length === 0) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case QuizQuestionType.SHORT_ANSWER:\r\n                    const submittedTexts = this.shortAnswerSubmittedTexts.get(question.id!);\r\n                    if (submittedTexts && submittedTexts.length === 0) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This function is called when the user clicks the 'Submit' button\r\n     */\r\n    onSubmit() {\r\n        const translationBasePath = 'artemisApp.quizExercise.';\r\n        this.applySelection();\r\n        let confirmSubmit = true;\r\n\r\n        if (this.remainingTimeSeconds > 15 && !this.areAllQuestionsAnswered()) {\r\n            const warningText = this.translateService.instant(translationBasePath + 'submissionWarning');\r\n            confirmSubmit = window.confirm(warningText);\r\n        }\r\n        if (confirmSubmit) {\r\n            this.isSubmitting = true;\r\n            switch (this.mode) {\r\n                case 'practice':\r\n                    if (!this.submission.id) {\r\n                        this.quizParticipationService.submitForPractice(this.submission, this.quizId).subscribe({\r\n                            next: (response: HttpResponse<Result>) => {\r\n                                this.onSubmitPracticeOrPreviewSuccess(response.body!);\r\n                            },\r\n                            error: (error: HttpErrorResponse) => this.onSubmitError(error),\r\n                        });\r\n                    }\r\n                    break;\r\n                case 'preview':\r\n                    if (!this.submission.id) {\r\n                        this.quizParticipationService.submitForPreview(this.submission, this.quizId).subscribe({\r\n                            next: (response: HttpResponse<Result>) => {\r\n                                this.onSubmitPracticeOrPreviewSuccess(response.body!);\r\n                            },\r\n                            error: (error: HttpErrorResponse) => this.onSubmitError(error),\r\n                        });\r\n                    }\r\n                    break;\r\n                case 'live':\r\n                    // copy submission and send it through websocket with 'submitted = true'\r\n                    const quizSubmission = new QuizSubmission();\r\n                    quizSubmission.submittedAnswers = this.submission.submittedAnswers;\r\n                    this.quizParticipationService.saveOrSubmitForLiveMode(quizSubmission, this.quizId, true).subscribe({\r\n                        next: (response: HttpResponse<QuizSubmission>) => {\r\n                            this.submission = response.body!;\r\n                            this.isSubmitting = false;\r\n                            this.unsavedChanges = false;\r\n                            this.updateSubmissionTime();\r\n                            this.applySubmission();\r\n                            if (this.quizExercise.quizMode !== QuizMode.SYNCHRONIZED) {\r\n                                this.alertService.success('artemisApp.quizExercise.submitSuccess');\r\n                            }\r\n                        },\r\n                        error: (error: HttpErrorResponse) => this.onSubmitError(error),\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function for handling response after submitting for practice or preview\r\n     * @param result\r\n     */\r\n    onSubmitPracticeOrPreviewSuccess(result: Result) {\r\n        this.isSubmitting = false;\r\n        this.submission = result.submission as QuizSubmission;\r\n        // make sure the additional information (explanations, correct answers) is available\r\n        const quizExercise = (result.participation! as StudentParticipation).exercise as QuizExercise;\r\n        this.transferInformationToQuizExercise(quizExercise);\r\n        this.applySubmission();\r\n        this.showResult(result);\r\n    }\r\n\r\n    /**\r\n     * Callback function for handling error when submitting\r\n     * @param error\r\n     */\r\n    onSubmitError(error: HttpErrorResponse) {\r\n        const errorMessage = 'Submitting the quiz was not possible. ' + error.headers?.get('X-artemisApp-message') || error.message;\r\n        this.alertService.addAlert({\r\n            type: AlertType.DANGER,\r\n            message: errorMessage,\r\n            disableTranslation: true,\r\n        });\r\n        this.isSubmitting = false;\r\n    }\r\n\r\n    /**\r\n     * By clicking on the bubble of the progress navigation towards the corresponding question of the quiz is triggered\r\n     * @param questionIndex\r\n     */\r\n    navigateToQuestion(questionIndex: number): void {\r\n        document.getElementById('question' + questionIndex)!.scrollIntoView({\r\n            behavior: 'smooth',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh quiz\r\n     */\r\n    refreshQuiz(refresh = false) {\r\n        this.refreshingQuiz = refresh;\r\n        this.quizExerciseService.findForStudent(this.quizId).subscribe({\r\n            next: (res: HttpResponse<QuizExercise>) => {\r\n                const quizExercise = res.body!;\r\n                if (quizExercise.quizStarted) {\r\n                    if (quizExercise.quizEnded) {\r\n                        this.waitingForQuizStart = false;\r\n                        this.endDate = dayjs();\r\n                    }\r\n                    this.quizExercise = quizExercise;\r\n                    this.initQuiz();\r\n                    this.initLiveMode();\r\n                }\r\n                setTimeout(() => (this.refreshingQuiz = false), 500); // ensure min animation duration\r\n            },\r\n            error: () => {\r\n                setTimeout(() => (this.refreshingQuiz = false), 500); // ensure min animation duration\r\n            },\r\n        });\r\n    }\r\n\r\n    joinBatch() {\r\n        this.quizExerciseService.join(this.quizId, this.password).subscribe({\r\n            next: (res: HttpResponse<QuizBatch>) => {\r\n                if (res.body) {\r\n                    this.quizBatch = res.body;\r\n                    if (this.quizBatch?.started) {\r\n                        this.refreshQuiz();\r\n                    } else {\r\n                        this.subscribeToWebsocketChannels();\r\n                    }\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                const errorMessage = 'Joining the quiz was not possible: ' + error.headers?.get('X-artemisApp-message') || error.message;\r\n                this.alertService.addAlert({\r\n                    type: AlertType.DANGER,\r\n                    message: errorMessage,\r\n                    disableTranslation: true,\r\n                });\r\n            },\r\n        });\r\n    }\r\n}\r\n", "<div [id]=\"'exercise-' + quizExercise?.id\" class=\"position-relative min-h-100 d-flex flex-column\">\r\n    @if (quizExercise) {\r\n        <div class=\"row sticky-top module-bg\">\r\n            <div class=\"d-flex justify-content-between align-items-center module-bg gap-2\" [ngClass]=\"isManagementView ? 'mt-2' : 'pt-2 mt-n3'\">\r\n                <h5 class=\"mb-0 d-flex gap-2 align-items-center\">\r\n                    {{ quizExercise.course?.title ? quizExercise.course?.title : quizExercise.exerciseGroup?.exam?.course?.title }}\r\n                    - {{ quizExercise.title }}\r\n                    @switch (mode) {\r\n                        @case ('practice') {\r\n                            <ng-template [ngTemplateOutlet]=\"modeBadge\" [ngTemplateOutletContext]=\"{ $implicit: 'practiceMode' }\" />\r\n                        }\r\n                        @case ('preview') {\r\n                            <ng-template [ngTemplateOutlet]=\"modeBadge\" [ngTemplateOutletContext]=\"{ $implicit: 'previewMode' }\" />\r\n                        }\r\n                        @case ('solution') {\r\n                            <ng-template [ngTemplateOutlet]=\"modeBadge\" [ngTemplateOutletContext]=\"{ $implicit: 'solution' }\" />\r\n                        }\r\n                    }\r\n                    <ng-template #modeBadge let-modeTranslation>\r\n                        <span class=\"small\">\r\n                            <span class=\"badge bg-secondary\" [jhiTranslate]=\"'artemisApp.quizExercise.' + modeTranslation\"></span>\r\n                        </span>\r\n                    </ng-template>\r\n                </h5>\r\n                <div>\r\n                    @if (!showingResult) {\r\n                        <div class=\"d-flex gap-2 align-items-center\">\r\n                            @if (!waitingForQuizStart) {\r\n                                <div class=\"align-content-center\">\r\n                                    <span jhiTranslate=\"artemisApp.quizExercise.remainingTime\" class=\"colon-suffix\"></span>\r\n                                    <span\r\n                                        id=\"remaining-time-value\"\r\n                                        [ngClass]=\"{\r\n                                            'time-critical': remainingTimeSeconds < 60 || remainingTimeSeconds < quizExercise.duration! / 4,\r\n                                            'time-warning': remainingTimeSeconds < 120 || remainingTimeSeconds < quizExercise.duration! / 2,\r\n                                        }\"\r\n                                    >\r\n                                        {{ remainingTimeText }}\r\n                                    </span>\r\n                                </div>\r\n                            }\r\n                            <jhi-button\r\n                                id=\"submit-quiz\"\r\n                                (onClick)=\"onSubmit()\"\r\n                                [btnSize]=\"ButtonSize.SMALL\"\r\n                                [btnType]=\"ButtonType.PRIMARY\"\r\n                                [title]=\"submission.submitted ? 'artemisApp.quizExercise.submitted' : 'entity.action.submit'\"\r\n                                [disabled]=\"submission.submitted || isSubmitting || waitingForQuizStart || remainingTimeSeconds < 0\"\r\n                            />\r\n                        </div>\r\n                    } @else if (mode !== 'solution') {\r\n                        <div class=\"text-center\">\r\n                            <div id=\"quiz-score\" [ngClass]=\"{ incorrect: userScore < totalScore }\">\r\n                                <span class=\"colon-suffix\" jhiTranslate=\"artemisApp.quizExercise.totalScore\"></span>\r\n                                <span id=\"quiz-score-result\"\r\n                                    >{{ userScore }}/{{ totalScore }} ({{\r\n                                        roundScoreSpecifiedByCourseSettings(result.score, quizExercise.course || quizExercise.exerciseGroup?.exam?.course)\r\n                                    }}\r\n                                    %)</span\r\n                                >\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <hr class=\"mt-2\" />\r\n        </div>\r\n        <!-- STEPWIZARD SECTION -->\r\n        <!-- TODO for a follow-up: Much of this template relies on method calls in the template. We should avoid this for performance reasons -->\r\n        <div class=\"row m-0\">\r\n            <div class=\"col-md-auto ps-0\">\r\n                <div class=\"p-0 col-md-auto quiz-navigation stepwizardquiz sticky-top-stepwizard\" [ngClass]=\"{ 'sticky-top-quiz': mode === 'preview' }\">\r\n                    @for (question of quizExercise.quizQuestions; track question; let index = $index) {\r\n                        <div class=\"stepwizardquiz__step mb-3\" [class.mb-3]=\"!$last\">\r\n                            @switch (question.type) {\r\n                                @case (DRAG_AND_DROP) {\r\n                                    <ng-template\r\n                                        [ngTemplateOutlet]=\"stepwizardCircle\"\r\n                                        [ngTemplateOutletContext]=\"{ questionAnswers: dragAndDropMappings, abbreviation: 'DD', questionColorClass: 'draganddropcolor-question' }\"\r\n                                    />\r\n                                }\r\n                                @case (MULTIPLE_CHOICE) {\r\n                                    <ng-template\r\n                                        [ngTemplateOutlet]=\"stepwizardCircle\"\r\n                                        [ngTemplateOutletContext]=\"{\r\n                                            questionAnswers: selectedAnswerOptions,\r\n                                            abbreviation: 'MC',\r\n                                            questionColorClass: 'multiplechoicecolor-question',\r\n                                        }\"\r\n                                    />\r\n                                }\r\n                                @case (SHORT_ANSWER) {\r\n                                    <ng-template\r\n                                        [ngTemplateOutlet]=\"stepwizardCircle\"\r\n                                        [ngTemplateOutletContext]=\"{\r\n                                            questionAnswers: shortAnswerSubmittedTexts,\r\n                                            abbreviation: 'SA',\r\n                                            questionColorClass: 'shortanswercolor-question',\r\n                                        }\"\r\n                                    />\r\n                                }\r\n                            }\r\n                            <ng-template #tooltipExplanationTranslate>{{ 'artemisApp.quizExercise.explanationAnswered' | artemisTranslate }} </ng-template>\r\n                            <ng-template #tooltipNotExplanationTranslate>{{ 'artemisApp.quizExercise.explanationNotAnswered' | artemisTranslate }} </ng-template>\r\n                            <ng-template #stepwizardCircle let-questionAnswers=\"questionAnswers\" let-abbreviation=\"abbreviation\" let-questionColorClass=\"questionColorClass\">\r\n                                <span\r\n                                    class=\"btn btn-light btn-circle\"\r\n                                    [class]=\"questionColorClass\"\r\n                                    (click)=\"navigateToQuestion(index)\"\r\n                                    [ngbTooltip]=\"!!questionAnswers.get(question.id!)?.length ? tooltipExplanationTranslate : tooltipNotExplanationTranslate\"\r\n                                    [ngClass]=\"!!questionAnswers.get(question.id!)?.length ? 'changed-question' : ''\"\r\n                                >\r\n                                    <b class=\"fa\">{{ abbreviation }}</b>\r\n                                </span>\r\n                            </ng-template>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <!-- END STEPWIZARD SECTION -->\r\n            <!-- QUESTION CONTENT SECTION -->\r\n            <div class=\"col p-0 quiz-content mb-3\">\r\n                @if (!waitingForQuizStart) {\r\n                    @if (!submission.submitted && !showingResult && remainingTimeSeconds >= 0) {\r\n                        <p jhiTranslate=\"artemisApp.quizExercise.quizInstructions.live\"></p>\r\n                    }\r\n                    @if (submission.submitted && !showingResult) {\r\n                        <p jhiTranslate=\"artemisApp.quizExercise.quizInstructions.wait\"></p>\r\n                    }\r\n                    @if (showingResult && mode !== 'solution') {\r\n                        <p\r\n                            jhiTranslate=\"artemisApp.quizExercise.quizInstructions.result\"\r\n                            [translateValues]=\"{\r\n                                userScore: userScore,\r\n                                maxScore: totalScore,\r\n                                percentage: roundScoreSpecifiedByCourseSettings(result.score, getCourseFromExercise(quizExercise)),\r\n                            }\"\r\n                        ></p>\r\n                    }\r\n                }\r\n                @for (question of quizExercise.quizQuestions; track question; let index = $index) {\r\n                    <div>\r\n                        <!-- TODO: Map vs Array consistency -->\r\n                        @if (question.type === MULTIPLE_CHOICE) {\r\n                            <jhi-multiple-choice-question\r\n                                id=\"question{{ index }}\"\r\n                                [question]=\"question\"\r\n                                [selectedAnswerOptions]=\"selectedAnswerOptions.get(question.id!)!\"\r\n                                (selectedAnswerOptionsChange)=\"selectedAnswerOptions.set(question.id!, $event)\"\r\n                                [fnOnSelection]=\"onSelectionChanged.bind(this)\"\r\n                                [clickDisabled]=\"submission.submitted || remainingTimeSeconds < 0\"\r\n                                [showResult]=\"showingResult\"\r\n                                [submittedResult]=\"result\"\r\n                                [quizQuestions]=\"quizExercise.quizQuestions\"\r\n                                [forceSampleSolution]=\"mode === 'solution'\"\r\n                                [questionIndex]=\"index + 1\"\r\n                                [score]=\"questionScores[question.id!]\"\r\n                            />\r\n                        }\r\n                        <!-- TODO: Map vs Array consistency -->\r\n                        @if (question.type === DRAG_AND_DROP) {\r\n                            <jhi-drag-and-drop-question\r\n                                id=\"question{{ index }}\"\r\n                                [question]=\"question\"\r\n                                [mappings]=\"dragAndDropMappings.get(question.id!)!\"\r\n                                (mappingsChange)=\"dragAndDropMappings.set(question.id!, $event)\"\r\n                                [onMappingUpdate]=\"onSelectionChanged.bind(this)\"\r\n                                [clickDisabled]=\"submission.submitted || remainingTimeSeconds < 0\"\r\n                                [showResult]=\"showingResult\"\r\n                                [forceSampleSolution]=\"mode === 'solution'\"\r\n                                [questionIndex]=\"index + 1\"\r\n                                [score]=\"questionScores[question.id!]\"\r\n                            />\r\n                        }\r\n                        <!-- TODO: Map vs Array consistency -->\r\n                        @if (question.type === SHORT_ANSWER) {\r\n                            <jhi-short-answer-question\r\n                                id=\"question{{ index }}\"\r\n                                [question]=\"question\"\r\n                                [submittedTexts]=\"shortAnswerSubmittedTexts.get(question.id!)!\"\r\n                                (submittedTextsChange)=\"shortAnswerSubmittedTexts.set(question.id!, $event)\"\r\n                                [fnOnSubmittedTextUpdate]=\"onSelectionChanged.bind(this)\"\r\n                                [clickDisabled]=\"submission.submitted || remainingTimeSeconds < 0\"\r\n                                [showResult]=\"showingResult\"\r\n                                [forceSampleSolution]=\"mode === 'solution'\"\r\n                                [questionIndex]=\"index + 1\"\r\n                                [score]=\"questionScores[question.id!]\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n            <!-- END QUESTION SECTION -->\r\n        </div>\r\n        <div class=\"row sticky-bottom mb-0 mt-auto\">\r\n            @if (mode === 'live') {\r\n                <hr class=\"mb-0\" />\r\n                <div class=\"container d-flex fs-small align-items-center justify-content-between module-bg mb-n3 py-2\">\r\n                    @if (!showingResult) {\r\n                        @if (!waitingForQuizStart) {\r\n                            <div>\r\n                                <span ngbTooltip=\"{{ submission.submissionDate | artemisDate: 'long' : true }}\" placement=\"right auto\">\r\n                                    @if (submission.submitted) {\r\n                                        <span jhiTranslate=\"artemisApp.quizExercise.submitted\" [ngClass]=\"{ 'colon-suffix': !isMobile }\"></span>\r\n                                    } @else {\r\n                                        <span jhiTranslate=\"artemisApp.quizExercise.lastSaved\" [ngClass]=\"{ 'colon-suffix': !isMobile }\"></span>\r\n                                    }\r\n                                    <!-- Only display save and submission hint without time stamps for mobile -->\r\n                                    @if (!isMobile) {\r\n                                        @if (justSaved) {\r\n                                            <span jhiTranslate=\"justNow\"></span>\r\n                                        } @else {\r\n                                            <span>{{ lastSavedTimeText !== '' ? lastSavedTimeText : ('artemisApp.quizExercise.lastSavedTimeNever' | artemisTranslate) }}</span>\r\n                                        }\r\n                                    }\r\n                                </span>\r\n                            </div>\r\n                        } @else if (quizExercise.remainingNumberOfAttempts !== 0) {\r\n                            <div>\r\n                                <span jhiTranslate=\"artemisApp.quizExercise.waitingForStart\"></span>\r\n                            </div>\r\n                        }\r\n                        <!-- CONNECTION STATUS -->\r\n                        <div class=\"d-flex justify-content-end align-items-center flex-grow-1 gap-2\">\r\n                            <div jhiTranslate=\"artemisApp.quizExercise.quizInstructions.autoSave\"></div>\r\n                            @if (unsavedChanges) {\r\n                                <span class=\"badge bg-warning fs-x-small\" jhiTranslate=\"artemisApp.quizExercise.unsavedChanges\"></span>\r\n                            }\r\n                            <jhi-connection-status class=\"connection-status-quiz\" />\r\n                        </div>\r\n                    }\r\n                    <!-- REFRESH BUTTON -->\r\n                    @if (!quizBatch?.started && !quizBatch?.startTime) {\r\n                        <jhi-button\r\n                            class=\"ms-2\"\r\n                            id=\"refresh-quiz\"\r\n                            (onClick)=\"refreshQuiz(true)\"\r\n                            [btnSize]=\"ButtonSize.SMALL\"\r\n                            [btnType]=\"ButtonType.PRIMARY\"\r\n                            [title]=\"'artemisApp.exercise.refresh'\"\r\n                            [disabled]=\"refreshingQuiz\"\r\n                            [icon]=\"faSync\"\r\n                        />\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div>\r\n            <!-- OVERLAY SECTION -->\r\n            @if (!waitingForQuizStart && !showingResult) {\r\n                @if (!submission.submitted && remainingTimeSeconds < 0) {\r\n                    <div class=\"quiz-is-over-overlay alert alert-info\">\r\n                        @if (submission.submissionDate) {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.quizIsOverText\"></span>\r\n                        } @else {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.notParticipatedText\"></span>\r\n                        }\r\n                    </div>\r\n                }\r\n                @if (submission.submitted && quizExercise?.quizMode === QuizMode.SYNCHRONIZED) {\r\n                    <div class=\"quiz-submitted-overlay alert alert-success\">\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.successfullySubmittedText\"></span>\r\n                    </div>\r\n                }\r\n            }\r\n        </div>\r\n        @if (waitingForQuizStart) {\r\n            <div class=\"quiz-waiting-for-start-overlay alert alert-info\">\r\n                @if (quizBatch || quizExercise.quizMode === QuizMode.SYNCHRONIZED) {\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.quizInstructions.waitForStart\"></span>\r\n                    @if (startDate) {\r\n                        <div>\r\n                            <hr />\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.quizInstructions.timeUntilPlannedStart\"></span>\r\n                            <span class=\"text-bold\">{{ timeUntilStart }}</span>\r\n                            <br />\r\n                            <span>({{ quizExercise.releaseDate!.format('LT') }})</span>\r\n                        </div>\r\n                    }\r\n                }\r\n                @if (!quizBatch) {\r\n                    @if (quizExercise.quizMode === QuizMode.BATCHED && (quizExercise.remainingNumberOfAttempts ?? 1) > 0) {\r\n                        <div jhiTranslate=\"artemisApp.quizExercise.quizInstructions.enterPassword\"></div>\r\n                        <input id=\"join-patch-password\" [(ngModel)]=\"password\" />\r\n                        <jhi-button id=\"join-batch\" [title]=\"'artemisApp.quizExercise.join'\" [btnType]=\"ButtonType.SUCCESS\" (onClick)=\"joinBatch()\" />\r\n                    }\r\n                    @if (quizExercise.quizMode === QuizMode.INDIVIDUAL && (quizExercise.remainingNumberOfAttempts ?? 1) > 0) {\r\n                        <div jhiTranslate=\"artemisApp.quizExercise.quizInstructions.startNow\"></div>\r\n                        <jhi-button id=\"start-batch\" [title]=\"'artemisApp.quizExercise.startBatch'\" [btnType]=\"ButtonType.SUCCESS\" (onClick)=\"joinBatch()\" />\r\n                    }\r\n                    @if (quizExercise.quizMode !== QuizMode.SYNCHRONIZED && quizExercise.remainingNumberOfAttempts === 0) {\r\n                        @if ((quizExercise.allowedNumberOfAttempts ?? 0) > 1) {\r\n                            <div jhiTranslate=\"artemisApp.quizExercise.quizInstructions.noMoreAttempts\"></div>\r\n                        }\r\n                        @if (quizExercise.allowedNumberOfAttempts === 1) {\r\n                            <div jhiTranslate=\"artemisApp.quizExercise.quizInstructions.alreadyAttempted\"></div>\r\n                        }\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"quiz-refresh-overlay\" [class.active]=\"refreshingQuiz\">\r\n            <fa-icon size=\"lg\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n        </div>\r\n        <!-- END OVERLAY SECTION -->\r\n    }\r\n</div>\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { QuizSubmission } from 'app/entities/quiz/quiz-submission.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\n\r\nexport type EntityResponseType = HttpResponse<QuizSubmission>;\r\nexport type ResultResponseType = HttpResponse<Result>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuizParticipationService {\r\n    private http = inject(HttpClient);\r\n    private submissionService = inject(SubmissionService);\r\n\r\n    submitForPractice(quizSubmission: QuizSubmission, exerciseId: number): Observable<ResultResponseType> {\r\n        const copy = this.submissionService.convert(quizSubmission);\r\n        return this.http\r\n            .post<Result>(`api/exercise/exercises/${exerciseId}/submissions/practice`, copy, { observe: 'response' })\r\n            .pipe(map((res: ResultResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n\r\n    submitForPreview(quizSubmission: QuizSubmission, exerciseId: number): Observable<ResultResponseType> {\r\n        const copy = this.submissionService.convert(quizSubmission);\r\n        return this.http\r\n            .post<Result>(`api/quiz/exercises/${exerciseId}/submissions/preview`, copy, { observe: 'response' })\r\n            .pipe(map((res: ResultResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n\r\n    saveOrSubmitForLiveMode(quizSubmission: QuizSubmission, exerciseId: number, submit: boolean): Observable<EntityResponseType> {\r\n        const copy = this.submissionService.convert(quizSubmission);\r\n        return this.http\r\n            .post<QuizSubmission>(`api/quiz/exercises/${exerciseId}/submissions/live`, copy, { observe: 'response', params: { submit } })\r\n            .pipe(map((res: EntityResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["smoothscroll", "QuizParticipationService", "http", "inject", "HttpClient", "submissionService", "SubmissionService", "submitForPractice", "quizSubmission", "exerciseId", "copy", "convert", "post", "observe", "pipe", "map", "res", "convertResponse", "submitForPreview", "saveOrSubmitForLiveMode", "submit", "params", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275template", "QuizParticipationComponent_Conditional_2_Case_7_ng_template_1_Template", "\u0275\u0275advance", "\u0275\u0275property", "modeBadge_r1", "\u0275\u0275pureFunction0", "_c1", "QuizParticipationComponent_Conditional_2_Case_8_ng_template_1_Template", "_c2", "QuizParticipationComponent_Conditional_2_Case_9_ng_template_1_Template", "_c3", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "modeTranslation_r2", "\u0275\u0275pureFunction2", "_c4", "ctx_r3", "remainingTimeSeconds", "quizExercise", "duration", "\u0275\u0275textInterpolate1", "remainingTimeText", "QuizParticipationComponent_Conditional_2_Conditional_17_Conditional_3_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSubmit", "\u0275\u0275conditional", "waitingForQuizStart", "ButtonSize", "SMALL", "ButtonType", "PRIMARY", "submission", "submitted", "isSubmitting", "\u0275\u0275pureFunction1", "_c5", "userScore", "totalScore", "\u0275\u0275textInterpolate3", "roundScoreSpecifiedByCourseSettings", "result", "score", "course", "exerciseGroup", "exam", "QuizParticipationComponent_Conditional_2_For_33_Case_3_ng_template_1_Template", "stepwizardCircle_r5", "_c6", "dragAndDropMappings", "QuizParticipationComponent_Conditional_2_For_33_Case_4_ng_template_1_Template", "_c7", "selectedAnswerOptions", "QuizParticipationComponent_Conditional_2_For_33_Case_5_ng_template_1_Template", "_c8", "shortAnswerSubmittedTexts", "\u0275\u0275pipeBind1", "_r6", "\u0275$index_102_r7", "$index", "navigateToQuestion", "\u0275\u0275classMap", "questionColorClass_r10", "tmp_21_0", "questionAnswers_r8", "get", "question_r11", "id", "length", "tooltipExplanationTranslate_r12", "tooltipNotExplanationTranslate_r13", "tmp_22_0", "\u0275\u0275textInterpolate", "abbreviation_r9", "QuizParticipationComponent_Conditional_2_For_33_Case_3_Template", "QuizParticipationComponent_Conditional_2_For_33_Case_4_Template", "QuizParticipationComponent_Conditional_2_For_33_Case_5_Template", "QuizParticipationComponent_Conditional_2_For_33_ng_template_7_Template", "\u0275\u0275templateRefExtractor", "QuizParticipationComponent_Conditional_2_For_33_ng_template_10_Template", "QuizParticipationComponent_Conditional_2_For_33_ng_template_13_Template", "\u0275\u0275classProp", "\u0275$count_102_r14", "tmp_17_0", "type", "DRAG_AND_DROP", "MULTIPLE_CHOICE", "SHORT_ANSWER", "\u0275\u0275pureFunction3", "_c9", "getCourseFromExercise", "QuizParticipationComponent_Conditional_2_Conditional_40_Conditional_1_Template", "QuizParticipationComponent_Conditional_2_Conditional_40_Conditional_2_Template", "QuizParticipationComponent_Conditional_2_Conditional_40_Conditional_3_Template", "showingResult", "mode", "$event", "_r15", "question_r16", "$implicit", "set", "\u0275\u0275propertyInterpolate1", "\u0275$index_170_r18", "onSelectionChanged", "bind", "quizQuestions", "questionScores", "_r19", "_r20", "QuizParticipationComponent_Conditional_2_For_42_Conditional_4_Template", "QuizParticipationComponent_Conditional_2_For_42_Conditional_5_Template", "QuizParticipationComponent_Conditional_2_For_42_Conditional_6_Template", "_c10", "isMobile", "lastSavedTimeText", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_1_Conditional_8_Conditional_1_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_1_Conditional_8_Conditional_2_Template", "justSaved", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_1_Conditional_6_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_1_Conditional_7_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_1_Conditional_8_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind3", "submissionDate", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_1_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_2_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Conditional_7_Template", "remainingNumberOfAttempts", "unsavedChanges", "_r21", "refreshQuiz", "refreshingQuiz", "faSync", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_5_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Conditional_6_Template", "quizBatch", "started", "startTime", "QuizParticipationComponent_Conditional_2_Conditional_53_Conditional_1_Conditional_3_Template", "QuizParticipationComponent_Conditional_2_Conditional_53_Conditional_1_Conditional_4_Template", "QuizParticipationComponent_Conditional_2_Conditional_53_Conditional_1_Template", "QuizParticipationComponent_Conditional_2_Conditional_53_Conditional_2_Template", "quizMode", "QuizMode", "SYNCHRONIZED", "timeUntilStart", "releaseDate", "format", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_3_Conditional_3_Template", "startDate", "\u0275\u0275twoWayListener", "_r22", "i0", "\u0275\u0275twoWayBindingSet", "password", "joinBatch", "\u0275\u0275twoWayProperty", "SUCCESS", "_r23", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_4_Conditional_3_Conditional_1_Template", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_4_Conditional_3_Conditional_2_Template", "tmp_5_0", "allowedNumberOfAttempts", "undefined", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_4_Conditional_1_Template", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_4_Conditional_2_Template", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_4_Conditional_3_Template", "BATCHED", "tmp_4_0", "INDIVIDUAL", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_3_Template", "QuizParticipationComponent_Conditional_2_Conditional_55_Conditional_4_Template", "QuizParticipationComponent_Conditional_2_Case_7_Template", "QuizParticipationComponent_Conditional_2_Case_8_Template", "QuizParticipationComponent_Conditional_2_Case_9_Template", "QuizParticipationComponent_Conditional_2_ng_template_11_Template", "QuizParticipationComponent_Conditional_2_Conditional_17_Template", "QuizParticipationComponent_Conditional_2_Conditional_18_Template", "\u0275\u0275repeaterCreate", "QuizParticipationComponent_Conditional_2_For_33_Template", "\u0275\u0275repeaterTrackByIdentity", "QuizParticipationComponent_Conditional_2_Conditional_40_Template", "QuizParticipationComponent_Conditional_2_For_42_Template", "QuizParticipationComponent_Conditional_2_Conditional_48_Template", "QuizParticipationComponent_Conditional_2_Conditional_53_Template", "QuizParticipationComponent_Conditional_2_Conditional_55_Template", "isManagementView", "\u0275\u0275textInterpolate2", "title", "_c0", "\u0275\u0275repeater", "faCircleNotch", "QuizParticipationComponent", "websocketService", "inject", "WebsocketService", "quizExerciseService", "QuizExerciseService", "participationService", "ParticipationService", "route", "ActivatedRoute", "router", "Router", "alertService", "AlertService", "quizParticipationService", "QuizParticipationService", "translateService", "TranslateService", "quizService", "ArtemisQuizService", "serverDateService", "ArtemisServerDateService", "QuizQuestionType", "roundValueSpecifiedByCourseSettings", "mcQuestionComponents", "dndQuestionComponents", "shortAnswerQuestionComponents", "routeAndDataSubscription", "runningTimeouts", "Array", "disconnected", "QuizSubmission", "Map", "quizId", "courseId", "interval", "autoSaveInterval", "autoSaveTimer", "quizStarted", "endDate", "previousRunning", "participationChannel", "quizExerciseChannel", "quizBatchChannel", "websocketSubscription", "timeoutJustSaved", "debounce", "constructor", "polyfill", "ngOnInit", "window", "navigator", "userAgent", "any", "combineLatest", "data", "params", "parent", "of", "subscribe", "parentParams", "Number", "initPracticeMode", "initPreview", "initShowSolution", "initLiveMode", "setInterval", "updateDisplayedTimes", "checkForQuizEnd", "UI_RELOAD_TIME", "url", "startsWith", "ngOnDestroy", "clearInterval", "forEach", "timeout", "clearTimeout", "unsubscribe", "connectionState", "status", "connected", "triggerSave", "isBefore", "now", "subscribeToWebsocketChannels", "setupAutoSave", "startQuizParticipation", "next", "response", "updateParticipationFromServer", "body", "error", "onError", "findForStudent", "res", "isOpenForPractice", "startQuizPreviewOrPractice", "alert", "find", "initQuiz", "randomizeOrder", "randomizeQuestionOrder", "dayjs", "add", "push", "setTimeout", "stopAutoSave", "AUTOSAVE_EXERCISE_INTERVAL", "AUTOSAVE_CHECK_INTERVAL", "receive", "changedParticipation", "exercise", "showQuizResultAfterQuizEnd", "quiz", "applyQuizFull", "batchChannel", "translationBasePath", "isAfter", "diff", "relativeTimeText", "instant", "fromNow", "Math", "ceil", "floor", "running", "reduce", "question", "points", "captureException", "applySubmission", "submittedAnswer", "submittedAnswers", "answer", "quizQuestion", "selectedOptions", "mappings", "submittedTexts", "applySelection", "answerOptions", "questionId", "selectedQuestion", "mcSubmittedAnswer", "MultipleChoiceSubmittedAnswer", "localQuestion", "dndSubmittedAnswer", "DragAndDropSubmittedAnswer", "shortAnswerSubmittedAnswer", "ShortAnswerSubmittedAnswer", "participation", "results", "updateSubmissionTime", "quizEnded", "showResult", "quizBatches", "enableReconnect", "ended", "first", "transferInformationToQuizExercise", "fullQuizExerciseFromServer", "clientQuestion", "fullQuestionFromServer", "fullQuestion", "explanation", "mcClientQuestion", "mcFullQuestionFromServer", "clientAnswerOption", "fullAnswerOptionFromServer", "option", "isCorrect", "dndClientQuestion", "dndFullQuestionFromServer", "correctMappings", "shortAnswerClientQuestion", "shortAnswerFullQuestionFromServer", "Error", "mcQuestionComponent", "watchCollection", "dndQuestionComponent", "shortAnswerQuestionComponent", "scoreInPoints", "resetAutoSaveTimer", "saveOrSubmitForLiveMode", "pipe", "take", "onSaveError", "message", "abs", "errorMessage", "addAlert", "AlertType", "DANGER", "disableTranslation", "areAllQuestionsAnswered", "options", "confirmSubmit", "warningText", "confirm", "submitForPractice", "onSubmitPracticeOrPreviewSuccess", "onSubmitError", "submitForPreview", "quizSubmission", "success", "headers", "questionIndex", "document", "getElementById", "scrollIntoView", "behavior", "refresh", "join", "selectors", "viewQuery", "rf", "ctx", "MultipleChoiceQuestionComponent", "DragAndDropQuestionComponent", "ShortAnswerQuestionComponent", "decls", "vars", "consts", "template", "QuizParticipationComponent_Conditional_2_Template", "NgClass", "NgTemplateOutlet", "TranslateDirective", "ButtonComponent", "NgbTooltip", "JhiConnectionStatusComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "styles"]
}
