{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/user-management/user-management-update.component.ts", "src/main/webapp/app/admin/user-management/user-management-update.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { JhiLanguageHelper } from 'app/core/language/language.helper';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { OrganizationManagementService } from 'app/admin/organization-management/organization-management.service';\r\nimport { OrganizationSelectorComponent } from 'app/shared/organization-selector/organization-selector.component';\r\nimport { Organization } from 'app/entities/organization.model';\r\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH, USERNAME_MAX_LENGTH, USERNAME_MIN_LENGTH } from 'app/app.constants';\r\nimport { faBan, faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { COMMA, ENTER, TAB } from '@angular/cdk/keycodes';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatChipGrid, MatChipInput, MatChipInputEvent, MatChipRemove, MatChipRow } from '@angular/material/chips';\r\nimport { MatAutocomplete, MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\nimport { AlertService, AlertType } from 'app/core/util/alert.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { AdminUserService } from 'app/core/user/admin-user.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { CourseAdminService } from 'app/course/manage/course-admin.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { FindLanguageFromKeyPipe } from 'app/shared/language/find-language-from-key.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-user-management-update',\r\n    templateUrl: './user-management-update.component.html',\r\n    styleUrls: ['./user-management-update.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        HelpIconComponent,\r\n        MatFormField,\r\n        MatChipGrid,\r\n        MatChipRow,\r\n        MatChipRemove,\r\n        FaIconComponent,\r\n        MatAutocompleteTrigger,\r\n        MatChipInput,\r\n        MatAutocomplete,\r\n        MatOption,\r\n        AsyncPipe,\r\n        FindLanguageFromKeyPipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class UserManagementUpdateComponent implements OnInit {\r\n    private languageHelper = inject(JhiLanguageHelper);\r\n    private userService = inject(AdminUserService);\r\n    private courseAdminService = inject(CourseAdminService);\r\n    private route = inject(ActivatedRoute);\r\n    private organizationService = inject(OrganizationManagementService);\r\n    private modalService = inject(NgbModal);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private alertService = inject(AlertService);\r\n    private profileService = inject(ProfileService);\r\n    private fb = inject(FormBuilder);\r\n\r\n    readonly USERNAME_MIN_LENGTH = USERNAME_MIN_LENGTH;\r\n    readonly USERNAME_MAX_LENGTH = USERNAME_MAX_LENGTH;\r\n    readonly PASSWORD_MIN_LENGTH = PASSWORD_MIN_LENGTH;\r\n    readonly PASSWORD_MAX_LENGTH = PASSWORD_MAX_LENGTH;\r\n\r\n    readonly EMAIL_MIN_LENGTH = 5;\r\n    readonly EMAIL_MAX_LENGTH = 100;\r\n    readonly REGISTRATION_NUMBER_MAX_LENGTH = 20;\r\n\r\n    user: User;\r\n    languages: string[];\r\n    authorities: string[];\r\n    isSaving: boolean;\r\n    allGroups: string[];\r\n    filteredGroups: Observable<string[]>;\r\n\r\n    separatorKeysCodes = [ENTER, COMMA, TAB];\r\n\r\n    groupCtrl = new FormControl();\r\n\r\n    // Icons\r\n    faTimes = faTimes;\r\n    faBan = faBan;\r\n    faSave = faSave;\r\n    editForm: FormGroup;\r\n\r\n    private oldLogin?: string;\r\n    private isJenkins: boolean;\r\n\r\n    /**\r\n     * Enable subscriptions to retrieve the user based on the activated route, all authorities and all languages on init\r\n     */\r\n    ngOnInit() {\r\n        this.isSaving = false;\r\n\r\n        // create a new user, and only overwrite it if we fetch a user to edit\r\n        this.user = new User();\r\n        this.route.parent!.data.subscribe(({ user }) => {\r\n            if (user) {\r\n                this.user = user.body ? user.body : user;\r\n                this.oldLogin = this.user.login;\r\n                this.organizationService.getOrganizationsByUser(this.user.id!).subscribe((organizations) => {\r\n                    this.user.organizations = organizations;\r\n                });\r\n            }\r\n        });\r\n        this.courseAdminService.getAllGroupsForAllCourses().subscribe((groups) => {\r\n            this.allGroups = [];\r\n            if (groups.body) {\r\n                groups.body.forEach((group) => {\r\n                    this.allGroups.push(group);\r\n                });\r\n            }\r\n            this.filteredGroups = this.groupCtrl.valueChanges.pipe(\r\n                startWith(null),\r\n                map((value) => (value ? this.filter(value) : this.allGroups.slice())),\r\n            );\r\n        });\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.isJenkins = profileInfo.activeProfiles.includes('jenkins');\r\n        });\r\n        this.authorities = [];\r\n        this.userService.authorities().subscribe((authorities) => {\r\n            this.authorities = authorities;\r\n        });\r\n        this.languages = this.languageHelper.getAll();\r\n        // Empty array for new user\r\n        if (!this.user.id) {\r\n            this.user.groups = [];\r\n        }\r\n        // Set password to undefined. ==> If it still is undefined on save, it won't be changed for existing users. It will be random for new users\r\n        this.user.password = undefined;\r\n        this.initializeForm();\r\n    }\r\n\r\n    /**\r\n     * Navigate to the previous page when the user cancels the update process\r\n     * Returns to the detail page if there is no previous state, and we edited an existing user\r\n     * Returns to the overview page if there is no previous state, and we created a new user\r\n     */\r\n    previousState() {\r\n        if (this.user.id) {\r\n            this.navigationUtilService.navigateBack(['admin', 'user-management', this.user.login!.toString()]);\r\n        } else {\r\n            this.navigationUtilService.navigateBack(['admin', 'user-management']);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update or create user in the user management component\r\n     */\r\n    save() {\r\n        this.isSaving = true;\r\n        if (this.user.id) {\r\n            this.userService.update(this.user).subscribe({\r\n                next: () => {\r\n                    if (this.isJenkins && this.user.login !== this.oldLogin && !this.user.password) {\r\n                        this.alertService.addAlert({\r\n                            type: AlertType.WARNING,\r\n                            message: 'artemisApp.userManagement.jenkinsChange',\r\n                            timeout: 0,\r\n                            translationParams: { oldLogin: this.oldLogin, newLogin: this.user.login },\r\n                        });\r\n                    }\r\n                    this.onSaveSuccess();\r\n                },\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else {\r\n            this.userService.create(this.user).subscribe({\r\n                next: () => this.onSaveSuccess(),\r\n                error: () => this.onSaveError(),\r\n            });\r\n        }\r\n    }\r\n\r\n    shouldRandomizePassword(useRandomPassword: any) {\r\n        if (useRandomPassword) {\r\n            this.user.password = undefined;\r\n        } else {\r\n            this.user.password = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens the organizations modal used to select an organization to add\r\n     */\r\n    openOrganizationsModal() {\r\n        const modalRef = this.modalService.open(OrganizationSelectorComponent, { size: 'xl', backdrop: 'static' });\r\n        modalRef.componentInstance.organizations = this.user.organizations;\r\n        modalRef.closed.subscribe((organization) => {\r\n            if (organization !== undefined) {\r\n                if (this.user.organizations === undefined) {\r\n                    this.user.organizations = [];\r\n                }\r\n                this.user.organizations!.push(organization);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes an organization from the user\r\n     * @param organization to remove\r\n     */\r\n    removeOrganizationFromUser(organization: Organization) {\r\n        this.user.organizations = this.user.organizations!.filter((userOrganization) => userOrganization.id !== organization.id);\r\n    }\r\n\r\n    /**\r\n     * Adds a group to the user\r\n     * @param user to add the group to\r\n     * @param event chip input event\r\n     */\r\n    onGroupAdd(user: User, event: MatChipInputEvent) {\r\n        const groupString = (event.value || '').trim();\r\n        this.addGroup(user, groupString);\r\n        this.groupCtrl.setValue('');\r\n        event.chipInput!.clear();\r\n    }\r\n\r\n    /**\r\n     * Removes a group from the user\r\n     * @param user to remove the group from\r\n     * @param group to remove\r\n     */\r\n    onGroupRemove(user: User, group: string) {\r\n        user.groups = user.groups?.filter((userGroup) => userGroup !== group);\r\n    }\r\n\r\n    /**\r\n     * Adds the selected group from panel to the user\r\n     * @param event autocomplete event\r\n     */\r\n    onSelected(event: MatAutocompleteSelectedEvent): void {\r\n        const groupString = (event.option.viewValue || '').trim();\r\n        this.addGroup(this.user, groupString);\r\n        this.groupCtrl.setValue('');\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.editForm) {\r\n            return;\r\n        }\r\n        this.editForm = this.fb.group({\r\n            idInput: ['', []],\r\n            loginInput: ['', [Validators.required, Validators.minLength(USERNAME_MIN_LENGTH), Validators.maxLength(USERNAME_MAX_LENGTH)]],\r\n            firstNameInput: ['', [Validators.required, Validators.maxLength(USERNAME_MAX_LENGTH)]],\r\n            lastNameInput: ['', [Validators.required, Validators.maxLength(USERNAME_MAX_LENGTH)]],\r\n            passwordInput: ['', [Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n            emailInput: ['', [Validators.required, Validators.minLength(this.EMAIL_MIN_LENGTH), Validators.maxLength(this.EMAIL_MAX_LENGTH)]],\r\n            registrationNumberInput: ['', [Validators.maxLength(this.REGISTRATION_NUMBER_MAX_LENGTH)]],\r\n            activatedInput: [{ value: this.user.activated }],\r\n            langKeyInput: ['', []],\r\n            authorityInput: ['', []],\r\n            internalInput: [{ value: this.user.internal, disabled: true }], // initially disabled, will be enabled if user.id is undefined\r\n        });\r\n        // Conditionally enable or disable 'internalInput' based on user.id\r\n        if (this.user.id !== undefined) {\r\n            this.editForm.get('internalInput')?.disable(); // Artemis does not support to edit the internal flag for existing users\r\n        } else {\r\n            this.editForm.get('internalInput')?.enable(); // New users can either be internal or external\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set isSaving to false and navigate to previous page\r\n     */\r\n    private onSaveSuccess() {\r\n        this.isSaving = false;\r\n        this.previousState();\r\n    }\r\n\r\n    /**\r\n     * Set isSaving to false\r\n     */\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n    }\r\n\r\n    /**\r\n     * Filter the groups based on the input value\r\n     * @param value input value\r\n     */\r\n    private filter(value: string): string[] {\r\n        const filterValue = value.toLowerCase();\r\n        return this.allGroups.filter((group) => group.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n    /**\r\n     * Adds a group to the user if it is valid\r\n     * @param user to add the group to\r\n     * @param groupString group to add\r\n     */\r\n    private addGroup(user: User, groupString: string) {\r\n        if (groupString && this.allGroups.includes(groupString) && !user.groups?.includes(groupString)) {\r\n            if (!user.groups) {\r\n                user.groups = [];\r\n            }\r\n            user.groups.push(groupString);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        <form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" [formGroup]=\"editForm\">\r\n            @if (user.id === undefined) {\r\n                <h2 id=\"createUser\" jhiTranslate=\"artemisApp.userManagement.home.createLabel\"></h2>\r\n            } @else {\r\n                <h2 id=\"editUser\" jhiTranslate=\"artemisApp.userManagement.home.editLabel\"></h2>\r\n            }\r\n            <div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login\" class=\"form-control-label\" jhiTranslate=\"artemisApp.userManagement.login\"></label>\r\n                    <input\r\n                        id=\"login\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        name=\"login\"\r\n                        [(ngModel)]=\"user.login\"\r\n                        required\r\n                        [maxLength]=\"USERNAME_MAX_LENGTH\"\r\n                        pattern=\"^[_.@A-Za-z0-9-]*$\"\r\n                        formControlName=\"loginInput\"\r\n                    />\r\n                    @if (editForm.get('loginInput')!.dirty && editForm.get('loginInput')!.invalid) {\r\n                        <div>\r\n                            @if (editForm.get('loginInput')!.errors?.required) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"entity.validation.required\"></small>\r\n                            }\r\n                            @if (editForm.get('loginInput')!.errors?.maxlength) {\r\n                                <small\r\n                                    class=\"form-text text-danger\"\r\n                                    jhiTranslate=\"artemisApp.userManagement.inputConstraints\"\r\n                                    [translateValues]=\"{ min: USERNAME_MIN_LENGTH, max: USERNAME_MAX_LENGTH }\"\r\n                                ></small>\r\n                            }\r\n                            @if (editForm.get('loginInput')!.errors?.pattern) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"entity.validation.patternLogin\"></small>\r\n                            }\r\n                            @if (editForm.get('loginInput')!.errors?.minlength) {\r\n                                <small\r\n                                    class=\"form-text text-danger\"\r\n                                    jhiTranslate=\"artemisApp.userManagement.inputConstraints\"\r\n                                    [translateValues]=\"{ min: USERNAME_MIN_LENGTH, max: USERNAME_MAX_LENGTH }\"\r\n                                ></small>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"firstName\" class=\"form-control-label\" jhiTranslate=\"artemisApp.userManagement.firstName\"></label>\r\n                    <input\r\n                        id=\"firstName\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        name=\"firstName\"\r\n                        [(ngModel)]=\"user.firstName\"\r\n                        formControlName=\"firstNameInput\"\r\n                        [maxlength]=\"USERNAME_MAX_LENGTH\"\r\n                        required\r\n                    />\r\n                    @if (editForm.get('firstNameInput')!.dirty && editForm.get('firstNameInput')!.invalid) {\r\n                        <div>\r\n                            @if (editForm.get('firstNameInput')!.errors?.maxlength) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"entity.validation.maxlength\" [translateValues]=\"{ max: USERNAME_MAX_LENGTH }\"></small>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"lastName\" jhiTranslate=\"artemisApp.userManagement.lastName\"></label>\r\n                    <input\r\n                        id=\"lastName\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        name=\"lastName\"\r\n                        [(ngModel)]=\"user.lastName\"\r\n                        formControlName=\"lastNameInput\"\r\n                        [maxlength]=\"USERNAME_MAX_LENGTH\"\r\n                        required\r\n                    />\r\n                    @if (editForm.get('lastNameInput')!.dirty && editForm.get('lastNameInput')!.invalid) {\r\n                        <div>\r\n                            @if (editForm.get('lastNameInput')!.errors?.maxlength) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"entity.validation.maxlength\" [translateValues]=\"{ max: USERNAME_MAX_LENGTH }\"></small>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div class=\"form-check\">\r\n                    <label for=\"internal\" class=\"form-check-label\" ngbTooltip=\"{{ 'artemisApp.userManagement.passwordTooltip' | artemisTranslate }}\">\r\n                        <input class=\"form-check-input\" type=\"checkbox\" id=\"internal\" name=\"internal\" formControlName=\"internalInput\" />\r\n                        <span jhiTranslate=\"artemisApp.userManagement.internal\"></span>\r\n                    </label>\r\n                    <jhi-help-icon text=\"artemisApp.userManagement.passwordTooltip\" />\r\n                </div>\r\n                @if (user.internal) {\r\n                    <div class=\"form-check mb-2\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            class=\"form-check-input\"\r\n                            name=\"randomPassword\"\r\n                            id=\"randomPassword\"\r\n                            (change)=\"shouldRandomizePassword($event)\"\r\n                            checked\r\n                            #editPassword\r\n                        />\r\n                        <label\r\n                            class=\"form-check-label\"\r\n                            for=\"randomPassword\"\r\n                            [jhiTranslate]=\"user.id ? 'artemisApp.userManagement.keepPassword' : 'artemisApp.userManagement.randomPassword'\"\r\n                            >Random password / Keep old password</label\r\n                        >\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" [hidden]=\"editPassword.checked\">\r\n                        <input\r\n                            type=\"password\"\r\n                            class=\"form-control\"\r\n                            name=\"password\"\r\n                            id=\"password\"\r\n                            placeholder=\"{{ 'global.menu.account.password' | artemisTranslate }}\"\r\n                            [minLength]=\"PASSWORD_MIN_LENGTH\"\r\n                            [maxLength]=\"PASSWORD_MAX_LENGTH\"\r\n                            [(ngModel)]=\"user.password\"\r\n                            formControlName=\"passwordInput\"\r\n                            [required]=\"!editPassword.checked\"\r\n                        />\r\n                        @if (editForm.get('passwordInput')!.dirty && editForm.get('passwordInput')!.invalid) {\r\n                            <div>\r\n                                @if (editForm.get('passwordInput')!.errors?.maxlength) {\r\n                                    <small\r\n                                        class=\"form-text text-danger\"\r\n                                        jhiTranslate=\"artemisApp.userManagement.inputConstraints\"\r\n                                        [translateValues]=\"{ min: PASSWORD_MIN_LENGTH, max: PASSWORD_MAX_LENGTH }\"\r\n                                    ></small>\r\n                                }\r\n                                @if (editForm.get('passwordInput')!.errors?.minlength) {\r\n                                    <small\r\n                                        class=\"form-text text-danger\"\r\n                                        jhiTranslate=\"artemisApp.userManagement.inputConstraints\"\r\n                                        [translateValues]=\"{ min: PASSWORD_MIN_LENGTH, max: PASSWORD_MAX_LENGTH }\"\r\n                                    ></small>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n                <div class=\"form-group\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.userManagement.groups\"></label>\r\n                    <mat-form-field appearance=\"outline\" class=\"group-tag-list\">\r\n                        <mat-chip-grid #groupList aria-label=\"Group selection\">\r\n                            @for (group of user.groups; track group) {\r\n                                <mat-chip-row (removed)=\"onGroupRemove(user, group)\" class=\"group-tag\">\r\n                                    <div class=\"custom-tag\">\r\n                                        {{ group }}\r\n                                        <button matChipRemove>\r\n                                            <fa-icon [icon]=\"faTimes\" class=\"group-tag-remove\" />\r\n                                        </button>\r\n                                    </div>\r\n                                </mat-chip-row>\r\n                            }\r\n                            <input\r\n                                #groupInput\r\n                                (matChipInputTokenEnd)=\"onGroupAdd(user, $event)\"\r\n                                [formControl]=\"groupCtrl\"\r\n                                [matAutocomplete]=\"auto\"\r\n                                [matChipInputFor]=\"groupList\"\r\n                                [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                                [placeholder]=\"'artemisApp.userManagement.addGroup' | artemisTranslate\"\r\n                                class=\"group-tag-input\"\r\n                            />\r\n                        </mat-chip-grid>\r\n                        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onSelected($event); groupInput.value = ''\" class=\"group-panel\" classlist=\"group-panel\">\r\n                            @for (group of filteredGroups | async; track group) {\r\n                                @if (!user.groups?.includes(group)) {\r\n                                    <mat-option [value]=\"group\">\r\n                                        {{ group }}\r\n                                    </mat-option>\r\n                                }\r\n                            }\r\n                        </mat-autocomplete>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.userManagement.organizations\"></label>\r\n                    <div class=\"btn-group d-flex flex-wrap\">\r\n                        @for (organization of user.organizations; track organization) {\r\n                            <div>\r\n                                <h5>\r\n                                    <span class=\"badge bg-primary font-weight-normal m-1 ps-3\"\r\n                                        >{{ organization.name\r\n                                        }}<button type=\"button\" class=\"btn text-light\" (click)=\"removeOrganizationFromUser(organization)\">\r\n                                            <fa-icon [icon]=\"faTimes\" /></button\r\n                                    ></span>\r\n                                </h5>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"openOrganizationsModal()\">Add</button>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"email\" class=\"form-control-label\" jhiTranslate=\"artemisApp.userManagement.email\"></label>\r\n                    <input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        class=\"form-control\"\r\n                        name=\"email\"\r\n                        [(ngModel)]=\"user.email\"\r\n                        formControlName=\"emailInput\"\r\n                        [minlength]=\"EMAIL_MIN_LENGTH\"\r\n                        required\r\n                        [maxlength]=\"EMAIL_MAX_LENGTH\"\r\n                        email\r\n                    />\r\n                    @if (editForm.get('emailInput')!.dirty && editForm.get('emailInput')!.invalid) {\r\n                        <div>\r\n                            @if (editForm.get('emailInput')!.errors?.required) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"entity.validation.required\"></small>\r\n                            }\r\n                            @if (editForm.get('emailInput')!.errors?.maxlength) {\r\n                                <small\r\n                                    class=\"form-text text-danger\"\r\n                                    jhiTranslate=\"artemisApp.userManagement.inputConstraints\"\r\n                                    [translateValues]=\"{ min: EMAIL_MIN_LENGTH, max: EMAIL_MAX_LENGTH }\"\r\n                                ></small>\r\n                            }\r\n                            @if (editForm.get('emailInput')!.errors?.minlength) {\r\n                                <small\r\n                                    class=\"form-text text-danger\"\r\n                                    jhiTranslate=\"entity.validation.minlength\"\r\n                                    jhiTranslate=\"artemisApp.userManagement.inputConstraints\"\r\n                                    [translateValues]=\"{ min: EMAIL_MIN_LENGTH, max: EMAIL_MAX_LENGTH }\"\r\n                                ></small>\r\n                            }\r\n                            @if (editForm.get('emailInput')!.errors?.email) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.invalid\"></small>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"registrationNumber\" class=\"form-control-label\" jhiTranslate=\"artemisApp.userManagement.registrationNumber\"></label>\r\n                    <input\r\n                        id=\"registrationNumber\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        name=\"registrationNumber\"\r\n                        [(ngModel)]=\"user.visibleRegistrationNumber\"\r\n                        formControlName=\"registrationNumberInput\"\r\n                        maxlength=\"20\"\r\n                        registrationNumber\r\n                    />\r\n                    @if (editForm.get('registrationNumberInput')!.invalid) {\r\n                        <div>\r\n                            @if (editForm.get('registrationNumberInput')!.errors?.maxlength) {\r\n                                <small class=\"form-text text-danger\" jhiTranslate=\"entity.validation.maxlength\" [translateValues]=\"{ max: REGISTRATION_NUMBER_MAX_LENGTH }\"></small>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div class=\"form-check\">\r\n                    <label for=\"activated\" class=\"form-check-label\">\r\n                        <input class=\"form-check-input\" type=\"checkbox\" id=\"activated\" name=\"activated\" [(ngModel)]=\"user.activated\" />\r\n                        <span jhiTranslate=\"artemisApp.userManagement.activated\"></span>\r\n                    </label>\r\n                </div>\r\n                @if (languages && languages.length > 0) {\r\n                    <div class=\"form-group\">\r\n                        <label for=\"langKey\" jhiTranslate=\"artemisApp.userManagement.langKey\"></label>\r\n                        <select class=\"form-select\" id=\"langKey\" name=\"langKey\" formControlName=\"langKeyInput\" [(ngModel)]=\"user.langKey\">\r\n                            @for (language of languages; track language) {\r\n                                <option [value]=\"language\">{{ language | findLanguageFromKey }}</option>\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                }\r\n                <div class=\"form-group\">\r\n                    <label for=\"authority\" jhiTranslate=\"artemisApp.userManagement.profiles\"></label>\r\n                    <select id=\"authority\" class=\"form-select\" multiple name=\"authority\" formControlName=\"authorityInput\" [(ngModel)]=\"user.authorities\">\r\n                        @for (authority of authorities; track authority) {\r\n                            <option [value]=\"authority\">{{ authority }}</option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"previousState()\"><fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span></button>\r\n                <button type=\"submit\" [disabled]=\"editForm.invalid || isSaving\" class=\"btn btn-primary\">\r\n                    <fa-icon [icon]=\"faSave\" />&nbsp;<span jhiTranslate=\"entity.action.save\"></span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "ctx_r1", "USERNAME_MIN_LENGTH", "USERNAME_MAX_LENGTH", "\u0275\u0275elementStart", "\u0275\u0275template", "UserManagementUpdateComponent_Conditional_16_Conditional_3_Template", "UserManagementUpdateComponent_Conditional_16_Conditional_4_Template", "UserManagementUpdateComponent_Conditional_16_Conditional_5_Template", "UserManagementUpdateComponent_Conditional_16_Conditional_6_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "tmp_4_0", "editForm", "get", "errors", "required", "tmp_5_0", "maxlength", "tmp_6_0", "pattern", "tmp_7_0", "minlength", "\u0275\u0275pureFunction1", "_c1", "UserManagementUpdateComponent_Conditional_24_Conditional_3_Template", "UserManagementUpdateComponent_Conditional_32_Conditional_3_Template", "PASSWORD_MIN_LENGTH", "PASSWORD_MAX_LENGTH", "UserManagementUpdateComponent_Conditional_47_Conditional_15_Conditional_3_Template", "UserManagementUpdateComponent_Conditional_47_Conditional_15_Conditional_4_Template", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "shouldRandomizePassword", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "user", "password", "UserManagementUpdateComponent_Conditional_47_Conditional_15_Template", "id", "editPassword_r4", "checked", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "dirty", "invalid", "group_r6", "_r5", "$implicit", "onGroupRemove", "\u0275\u0275textInterpolate1", "faTimes", "group_r8", "UserManagementUpdateComponent_For_68_Conditional_1_Template", "groups", "includes", "organization_r10", "_r9", "removeOrganizationFromUser", "\u0275\u0275textInterpolate", "name", "EMAIL_MIN_LENGTH", "EMAIL_MAX_LENGTH", "UserManagementUpdateComponent_Conditional_92_Conditional_3_Template", "UserManagementUpdateComponent_Conditional_92_Conditional_4_Template", "UserManagementUpdateComponent_Conditional_92_Conditional_5_Template", "UserManagementUpdateComponent_Conditional_92_Conditional_6_Template", "email", "REGISTRATION_NUMBER_MAX_LENGTH", "UserManagementUpdateComponent_Conditional_100_Conditional_3_Template", "language_r12", "_r11", "langKey", "\u0275\u0275repeaterCreate", "UserManagementUpdateComponent_Conditional_112_For_8_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "languages", "authority_r13", "UserManagementUpdateComponent", "languageHelper", "inject", "JhiLanguageHelper", "userService", "AdminUserService", "courseAdminService", "CourseAdminService", "route", "ActivatedRoute", "organizationService", "OrganizationManagementService", "modalService", "NgbModal", "navigationUtilService", "ArtemisNavigationUtilService", "alertService", "AlertService", "profileService", "ProfileService", "fb", "FormBuilder", "authorities", "isSaving", "allGroups", "filteredGroups", "separatorKeysCodes", "ENTER", "COMMA", "TAB", "groupCtrl", "FormControl", "faBan", "faSave", "oldLogin", "isJenkins", "ngOnInit", "User", "parent", "data", "subscribe", "body", "login", "getOrganizationsByUser", "organizations", "getAllGroupsForAllCourses", "forEach", "group", "push", "valueChanges", "pipe", "startWith", "map", "value", "filter", "slice", "getProfileInfo", "profileInfo", "activeProfiles", "getAll", "undefined", "initializeForm", "previousState", "navigateBack", "toString", "save", "update", "next", "addAlert", "type", "AlertType", "WARNING", "message", "timeout", "translationParams", "newLogin", "onSaveSuccess", "error", "onSaveError", "create", "useRandomPassword", "openOrganizationsModal", "modalRef", "open", "OrganizationSelectorComponent", "size", "backdrop", "componentInstance", "closed", "organization", "userOrganization", "onGroupAdd", "event", "groupString", "trim", "addGroup", "setValue", "chipInput", "clear", "userGroup", "onSelected", "option", "viewValue", "idInput", "loginInput", "Validators", "minLength", "maxLength", "firstNameInput", "lastNameInput", "passwordInput", "emailInput", "registrationNumberInput", "activatedInput", "activated", "langKeyInput", "authorityInput", "internalInput", "internal", "disabled", "disable", "enable", "filterValue", "toLowerCase", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "UserManagementUpdateComponent_Conditional_6_Template", "UserManagementUpdateComponent_Conditional_7_Template", "UserManagementUpdateComponent_Conditional_16_Template", "firstName", "UserManagementUpdateComponent_Conditional_24_Template", "lastName", "UserManagementUpdateComponent_Conditional_32_Template", "UserManagementUpdateComponent_Conditional_47_Template", "UserManagementUpdateComponent_For_58_Template", "groupInput_r7", "\u0275\u0275reference", "UserManagementUpdateComponent_For_68_Template", "UserManagementUpdateComponent_For_80_Template", "UserManagementUpdateComponent_Conditional_92_Template", "visibleRegistrationNumber", "UserManagementUpdateComponent_Conditional_100_Template", "UserManagementUpdateComponent_Conditional_112_Template", "UserManagementUpdateComponent_For_120_Template", "auto_r15", "groupList_r14", "length", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "SelectMultipleControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "MinLengthValidator", "MaxLengthValidator", "PatternValidator", "EmailValidator", "NgModel", "ReactiveFormsModule", "FormControlDirective", "FormGroupDirective", "FormControlName", "TranslateDirective", "NgbTooltip", "HelpIconComponent", "MatFormField", "MatChipGrid", "MatChipRow", "MatChipRemove", "FaIconComponent", "MatAutocompleteTrigger", "MatChipInput", "MatAutocomplete", "MatOption", "AsyncPipe", "FindLanguageFromKeyPipe", "ArtemisTranslatePipe", "styles"]
}
