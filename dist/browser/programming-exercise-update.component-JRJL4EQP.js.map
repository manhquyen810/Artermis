{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/shared/build-details/programming-exercise-edit-checkout-directories/programming-exercise-edit-checkout-directories.component.ts", "src/main/webapp/app/exercises/programming/shared/build-details/programming-exercise-edit-checkout-directories/programming-exercise-edit-checkout-directories.component.html", "src/main/webapp/app/entities/programming/programming-exercise-auxiliary-repository-model.ts", "src/main/webapp/app/exercises/programming/manage/update/remove-auxiliary-repository-button.component.ts", "src/main/webapp/app/exercises/programming/manage/update/add-auxiliary-repository-button.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/difficulty/programming-exercise-difficulty.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/difficulty/programming-exercise-difficulty.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/information/programming-exercise-information.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/information/programming-exercise-information.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/mode/programming-exercise-mode.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/mode/programming-exercise-mode.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-build-configuration/programming-exercise-build-configuration.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-build-configuration/programming-exercise-build-configuration.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-custom-aeolus-build-plan.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-custom-aeolus-build-plan.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-custom-build-plan.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-custom-build-plan.component.html", "src/main/webapp/app/exercises/programming/shared/service/theia.service.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/theia/programming-exercise-theia.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/theia/programming-exercise-theia.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/language/programming-exercise-language.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/language/programming-exercise-language.component.html", "src/main/webapp/app/exercises/programming/manage/update/update-components/grading/programming-exercise-grading.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/grading/programming-exercise-grading.component.html", "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.helper.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/problem/programming-exercise-problem.component.ts", "src/main/webapp/app/exercises/programming/manage/update/update-components/problem/programming-exercise-problem.component.html", "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html"],
  "sourcesContent": ["import { Component, effect, input, output, viewChild } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\n\r\nimport { BuildPlanCheckoutDirectoriesDTO } from 'app/entities/programming/build-plan-checkout-directories-dto';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-edit-checkout-directories',\r\n    imports: [HelpIconComponent, TranslateDirective, FormsModule],\r\n    templateUrl: './programming-exercise-edit-checkout-directories.component.html',\r\n    styleUrls: ['../../../manage/programming-exercise-form.scss'],\r\n})\r\nexport class ProgrammingExerciseEditCheckoutDirectoriesComponent {\r\n    programmingExercise = input.required<ProgrammingExercise>();\r\n    pattern = input.required<RegExp>();\r\n    submissionBuildPlanCheckoutRepositories = input.required<BuildPlanCheckoutDirectoriesDTO>();\r\n    assignmentCheckoutPathEvent = output<string>();\r\n    testCheckoutPathEvent = output<string>();\r\n    solutionCheckoutPathEvent = output<string>();\r\n\r\n    assignmentCheckoutPath: string;\r\n    testCheckoutPath: string;\r\n    solutionCheckoutPath: string;\r\n\r\n    isAssigmentRepositoryEditable = false;\r\n    isTestRepositoryEditable = false;\r\n    isSolutionRepositoryEditable = false;\r\n\r\n    formValid = true;\r\n    formValidChanges = new Subject();\r\n\r\n    field_assignmentRepositoryCheckoutPath = viewChild<NgModel>('field_assignmentRepositoryCheckoutPath');\r\n    field_testRepositoryCheckoutPath = viewChild<NgModel>('field_testRepositoryCheckoutPath');\r\n    field_solutionRepositoryCheckoutPath = viewChild<NgModel>('field_solutionRepositoryCheckoutPath');\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.reset();\r\n        });\r\n    }\r\n\r\n    reset() {\r\n        const submissionBuildPlan = this.submissionBuildPlanCheckoutRepositories();\r\n        this.isAssigmentRepositoryEditable =\r\n            !!submissionBuildPlan?.exerciseCheckoutDirectory &&\r\n            submissionBuildPlan?.exerciseCheckoutDirectory.trim() !== '' &&\r\n            submissionBuildPlan?.exerciseCheckoutDirectory !== '/';\r\n        if (this.isAssigmentRepositoryEditable) {\r\n            this.assignmentCheckoutPath =\r\n                this.programmingExercise().buildConfig?.assignmentCheckoutPath || this.removeLeadingSlash(submissionBuildPlan?.exerciseCheckoutDirectory) || '';\r\n        } else {\r\n            this.assignmentCheckoutPath = '';\r\n        }\r\n        this.isTestRepositoryEditable =\r\n            !!submissionBuildPlan?.testCheckoutDirectory && submissionBuildPlan?.testCheckoutDirectory.trim() !== '' && submissionBuildPlan?.testCheckoutDirectory !== '/';\r\n        if (this.isTestRepositoryEditable) {\r\n            this.testCheckoutPath = this.programmingExercise().buildConfig?.testCheckoutPath || this.removeLeadingSlash(submissionBuildPlan?.testCheckoutDirectory) || '';\r\n        } else {\r\n            this.testCheckoutPath = '/';\r\n        }\r\n        this.isSolutionRepositoryEditable =\r\n            !!submissionBuildPlan?.solutionCheckoutDirectory &&\r\n            submissionBuildPlan?.solutionCheckoutDirectory.trim() !== '' &&\r\n            submissionBuildPlan?.solutionCheckoutDirectory !== '/';\r\n        if (this.isSolutionRepositoryEditable) {\r\n            this.solutionCheckoutPath =\r\n                this.programmingExercise().buildConfig?.solutionCheckoutPath || this.removeLeadingSlash(submissionBuildPlan?.solutionCheckoutDirectory) || '';\r\n        } else {\r\n            this.solutionCheckoutPath = '';\r\n        }\r\n    }\r\n\r\n    onAssigmentRepositoryCheckoutPathChange(event: string) {\r\n        this.assignmentCheckoutPath = event;\r\n        this.assignmentCheckoutPathEvent.emit(this.assignmentCheckoutPath);\r\n        this.calculateFormValid();\r\n    }\r\n\r\n    onTestRepositoryCheckoutPathChange(event: string) {\r\n        this.testCheckoutPath = event;\r\n        this.testCheckoutPathEvent.emit(this.testCheckoutPath);\r\n        this.calculateFormValid();\r\n    }\r\n\r\n    onSolutionRepositoryCheckoutPathChange(event: string) {\r\n        this.solutionCheckoutPath = event;\r\n        this.solutionCheckoutPathEvent.emit(this.solutionCheckoutPath);\r\n        this.calculateFormValid();\r\n    }\r\n\r\n    private removeLeadingSlash(path?: string): string | undefined {\r\n        return path?.replace(/^\\//, '');\r\n    }\r\n\r\n    calculateFormValid(): void {\r\n        const isFormValid = Boolean(\r\n            (!this.field_assignmentRepositoryCheckoutPath() || this.field_assignmentRepositoryCheckoutPath()?.valid) &&\r\n                (!this.field_testRepositoryCheckoutPath() || this.field_testRepositoryCheckoutPath()?.valid) &&\r\n                (!this.field_solutionRepositoryCheckoutPath() || this.field_solutionRepositoryCheckoutPath()?.valid),\r\n        );\r\n        this.formValid = isFormValid && this.areValuesUnique([this.assignmentCheckoutPath, this.testCheckoutPath, this.solutionCheckoutPath]);\r\n        this.formValidChanges.next(this.formValid);\r\n    }\r\n\r\n    areValuesUnique(values: (string | undefined)[]): boolean {\r\n        const filteredValues = values.filter((value): value is string => value !== undefined && value.trim() !== '');\r\n        const uniqueValues = new Set(filteredValues);\r\n        return filteredValues.length === uniqueValues.size;\r\n    }\r\n}\r\n", "<div class=\"form-group\">\r\n    @if (isAssigmentRepositoryEditable) {\r\n        <label jhiTranslate=\"artemisApp.programmingExercise.checkoutPath.assignment\"></label>\r\n        <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.checkoutPath.customize\" />\r\n        <input\r\n            #field_assignmentRepositoryCheckoutPath=\"ngModel\"\r\n            required\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            name=\"assignmentRepositoryCheckoutPath\"\r\n            id=\"field_assignmentRepositoryCheckoutPath\"\r\n            [pattern]=\"pattern()\"\r\n            [(ngModel)]=\"assignmentCheckoutPath\"\r\n            (ngModelChange)=\"onAssigmentRepositoryCheckoutPathChange($event)\"\r\n        />\r\n    }\r\n    @if (isTestRepositoryEditable) {\r\n        <label jhiTranslate=\"artemisApp.programmingExercise.checkoutPath.tests\"></label>\r\n        <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.checkoutPath.customize\" />\r\n        <input\r\n            #field_testRepositoryCheckoutPath=\"ngModel\"\r\n            required\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            name=\"testRepositoryCheckoutPath\"\r\n            id=\"field_testRepositoryCheckoutPath\"\r\n            [(ngModel)]=\"testCheckoutPath\"\r\n            (ngModelChange)=\"onTestRepositoryCheckoutPathChange($event)\"\r\n            [pattern]=\"pattern()\"\r\n        />\r\n    }\r\n    @if (isSolutionRepositoryEditable) {\r\n        <label jhiTranslate=\"artemisApp.programmingExercise.checkoutPath.solution\"></label>\r\n        <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.checkoutPath.customize\" />\r\n        <input\r\n            #field_solutionRepositoryCheckoutPath=\"ngModel\"\r\n            required\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            name=\"solutionRepositoryCheckoutPath\"\r\n            id=\"field_solutionRepositoryCheckoutPath\"\r\n            [(ngModel)]=\"solutionCheckoutPath\"\r\n            (ngModelChange)=\"onSolutionRepositoryCheckoutPathChange($event)\"\r\n            [pattern]=\"pattern()\"\r\n        />\r\n    }\r\n    @if (!formValid) {\r\n        <div class=\"alert alert-danger mt-2\" role=\"alert\">\r\n            <strong jhiTranslate=\"artemisApp.programmingExercise.checkoutPath.alert\"></strong>\r\n        </div>\r\n    }\r\n    <div class=\"warning alert-warning mt-2\" role=\"alert\">\r\n        <strong jhiTranslate=\"artemisApp.programmingExercise.checkoutPath.warning\"></strong>\r\n    </div>\r\n    <div class=\"warning alert-warning mt-1\" role=\"alert\">\r\n        <strong jhiTranslate=\"artemisApp.programmingExercise.checkoutPath.warningBuildScript\"></strong>\r\n    </div>\r\n</div>\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\n\r\nexport class AuxiliaryRepository implements BaseEntity {\r\n    public id?: number;\r\n    public name?: string;\r\n    public checkoutDirectory?: string;\r\n    public repositoryUri?: string;\r\n    public description?: string;\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { AuxiliaryRepository } from 'app/entities/programming/programming-exercise-auxiliary-repository-model';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-remove-auxiliary-repository-button',\r\n    template: `\r\n        <jhi-button [btnType]=\"ButtonType.ERROR\" [btnSize]=\"ButtonSize.SMALL\" [icon]=\"faTrash\" [title]=\"'entity.action.remove'\" (onClick)=\"removeAuxiliaryRepository()\" />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class RemoveAuxiliaryRepositoryButtonComponent {\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n\r\n    @Input() row: AuxiliaryRepository;\r\n\r\n    @Output() onRefresh: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    // Icons\r\n    faTrash = faTrash;\r\n\r\n    /**\r\n     * Removes the auxiliary repository of the selected row from the respective programming exercise.\r\n     */\r\n    removeAuxiliaryRepository() {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n        const auxRepoIndex = this.programmingExercise.auxiliaryRepositories?.indexOf(this.row)!;\r\n        this.programmingExercise.auxiliaryRepositories?.splice(auxRepoIndex, 1); // Note: splice changes the array auxiliaryRepositories in place\r\n        this.onRefresh.emit();\r\n        // This activates the angular change detection\r\n        this.programmingExercise.auxiliaryRepositories = [...this.programmingExercise.auxiliaryRepositories!];\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { AuxiliaryRepository } from 'app/entities/programming/programming-exercise-auxiliary-repository-model';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-add-auxiliary-repository-button',\r\n    template: `\r\n        <jhi-button\r\n            [btnType]=\"ButtonType.SUCCESS\"\r\n            [btnSize]=\"ButtonSize.SMALL\"\r\n            [icon]=\"faPlus\"\r\n            [title]=\"'entity.action.addAuxiliaryRepository'\"\r\n            (onClick)=\"addAuxiliaryRepositoryRow()\"\r\n        />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class AddAuxiliaryRepositoryButtonComponent {\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly faPlus = faPlus;\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n\r\n    @Output() onRefresh: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Adds a new auxiliary repository, which is displayed as a new row, to the respective programming exercise and activates the angular change detection.\r\n     */\r\n    addAuxiliaryRepositoryRow() {\r\n        if (this.programmingExercise.auxiliaryRepositories === undefined) {\r\n            this.programmingExercise.auxiliaryRepositories = [];\r\n        }\r\n        const newAuxiliaryRepository = new AuxiliaryRepository();\r\n        newAuxiliaryRepository.name = '';\r\n        newAuxiliaryRepository.checkoutDirectory = '';\r\n        this.programmingExercise.auxiliaryRepositories?.push(newAuxiliaryRepository);\r\n        this.onRefresh.emit();\r\n        this.programmingExercise.auxiliaryRepositories = [...this.programmingExercise.auxiliaryRepositories];\r\n    }\r\n}\r\n", "import { Component, input } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DifficultyPickerComponent } from 'app/exercises/shared/difficulty-picker/difficulty-picker.component';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-difficulty',\r\n    templateUrl: './programming-exercise-difficulty.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [TranslateDirective, DifficultyPickerComponent],\r\n})\r\nexport class ProgrammingExerciseDifficultyComponent {\r\n    programmingExercise = input.required<ProgrammingExercise>();\r\n}\r\n", "<div class=\"form-group\">\r\n    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.difficulty\"></label>\r\n    <div>\r\n        <jhi-difficulty-picker [exercise]=\"programmingExercise()\" />\r\n    </div>\r\n</div>\r\n", "import {\r\n    AfterViewInit,\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewChildren,\r\n    effect,\r\n    inject,\r\n    input,\r\n    model,\r\n    signal,\r\n    viewChild,\r\n} from '@angular/core';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { ProgrammingExercise, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { ProgrammingExerciseRepositoryAndBuildPlanDetailsComponent } from 'app/exercises/programming/shared/build-details/programming-exercise-repository-and-build-plan-details.component';\r\nimport { ExerciseTitleChannelNameComponent } from 'app/exercises/shared/exercise-title-channel-name/exercise-title-channel-name.component';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { TableEditableFieldComponent } from 'app/shared/table/table-editable-field.component';\r\nimport { every } from 'lodash-es';\r\nimport { ImportOptions } from 'app/types/programming-exercises';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { removeSpecialCharacters } from 'app/shared/util/utils';\r\nimport { CourseExistingExerciseDetailsType, ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseEditCheckoutDirectoriesComponent } from 'app/exercises/programming/shared/build-details/programming-exercise-edit-checkout-directories/programming-exercise-edit-checkout-directories.component';\r\nimport { BuildPlanCheckoutDirectoriesDTO } from 'app/entities/programming/build-plan-checkout-directories-dto';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { CustomNotIncludedInValidatorDirective } from 'app/shared/validators/custom-not-included-in-validator.directive';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { RemoveAuxiliaryRepositoryButtonComponent } from '../../remove-auxiliary-repository-button.component';\r\nimport { NgbAlert } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { AddAuxiliaryRepositoryButtonComponent } from '../../add-auxiliary-repository-button.component';\r\nimport { CategorySelectorComponent } from 'app/shared/category-selector/category-selector.component';\r\nimport { ProgrammingExerciseDifficultyComponent } from '../difficulty/programming-exercise-difficulty.component';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { RemoveKeysPipe } from 'app/shared/pipes/remove-keys.pipe';\r\n\r\nconst MAXIMUM_TRIES_TO_GENERATE_UNIQUE_SHORT_NAME = 200;\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-info',\r\n    templateUrl: './programming-exercise-information.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss', 'programming-exercise-information.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        HelpIconComponent,\r\n        ExerciseTitleChannelNameComponent,\r\n        FormsModule,\r\n        CustomNotIncludedInValidatorDirective,\r\n        ProgrammingExerciseRepositoryAndBuildPlanDetailsComponent,\r\n        ProgrammingExerciseEditCheckoutDirectoriesComponent,\r\n        NgxDatatableModule,\r\n        TableEditableFieldComponent,\r\n        RemoveAuxiliaryRepositoryButtonComponent,\r\n        NgbAlert,\r\n        ButtonComponent,\r\n        AddAuxiliaryRepositoryButtonComponent,\r\n        CategorySelectorComponent,\r\n        ProgrammingExerciseDifficultyComponent,\r\n        KeyValuePipe,\r\n        ArtemisTranslatePipe,\r\n        RemoveKeysPipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseInformationComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n    protected readonly ProjectType = ProjectType;\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly faPlus = faPlus;\r\n\r\n    @Input({ required: true }) programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n    isImport = input.required<boolean>();\r\n    isExamMode = input.required<boolean>();\r\n    programmingExercise = input.required<ProgrammingExercise>();\r\n    isLocal = input.required<boolean>();\r\n    importOptions = input.required<ImportOptions>();\r\n    isSimpleMode = input.required<boolean>();\r\n    isEditFieldDisplayedRecord = input.required<Record<ProgrammingExerciseInputField, boolean>>();\r\n    courseId = input<number>();\r\n    isAuxiliaryRepositoryInputValid = model.required<boolean>();\r\n\r\n    exerciseTitleChannelComponent = viewChild<ExerciseTitleChannelNameComponent>('titleChannelNameComponent');\r\n    @ViewChildren(TableEditableFieldComponent) tableEditableFields?: QueryList<TableEditableFieldComponent>;\r\n\r\n    shortNameField = viewChild<NgModel>('shortName');\r\n    @ViewChild('checkoutSolutionRepository') checkoutSolutionRepositoryField?: NgModel;\r\n    @ViewChild('recreateBuildPlans') recreateBuildPlansField?: NgModel;\r\n    @ViewChild('updateTemplateFiles') updateTemplateFilesField?: NgModel;\r\n    @ViewChild('titleChannelNameComponent') titleComponent?: ExerciseTitleChannelNameComponent;\r\n    @ViewChild(ProgrammingExerciseEditCheckoutDirectoriesComponent) programmingExerciseEditCheckoutDirectories?: ProgrammingExerciseEditCheckoutDirectoriesComponent;\r\n\r\n    private readonly exerciseService: ExerciseService = inject(ExerciseService);\r\n    private readonly alertService: AlertService = inject(AlertService);\r\n\r\n    isShortNameFieldValid = signal<boolean>(false);\r\n    isShortNameFromAdvancedMode = signal<boolean>(false);\r\n\r\n    formValid: boolean;\r\n    formValidChanges = new Subject<boolean>();\r\n\r\n    inputFieldSubscriptions: (Subscription | undefined)[] = [];\r\n\r\n    alreadyUsedExerciseNames = signal<Set<string>>(new Set());\r\n    alreadyUsedShortNames = signal<Set<string>>(new Set());\r\n\r\n    exerciseTitle = signal<string | undefined>(undefined);\r\n\r\n    editRepositoryCheckoutPath = false;\r\n    submissionBuildPlanCheckoutRepositories: BuildPlanCheckoutDirectoriesDTO;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.defineShortNameOnEditModeChangeIfNotDefinedInAdvancedMode();\r\n        });\r\n\r\n        effect(() => {\r\n            this.generateShortNameWhenInSimpleMode();\r\n        });\r\n\r\n        effect(() => {\r\n            this.registerInputFieldsWhenChildComponentsAreReady();\r\n        });\r\n\r\n        effect(() => {\r\n            this.fetchAndInitializeTakenTitlesAndShortNames();\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.registerInputFields();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.programmingExercise) {\r\n            this.exerciseTitle.set(this.programmingExercise().title);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        for (const subscription of this.inputFieldSubscriptions) {\r\n            subscription?.unsubscribe();\r\n        }\r\n    }\r\n\r\n    registerInputFields() {\r\n        this.inputFieldSubscriptions.forEach((subscription) => subscription?.unsubscribe());\r\n\r\n        this.inputFieldSubscriptions.push(this.exerciseTitleChannelComponent()?.titleChannelNameComponent?.formValidChanges.subscribe(() => this.calculateFormValid()));\r\n        this.inputFieldSubscriptions.push(this.shortNameField()?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        this.inputFieldSubscriptions.push(this.checkoutSolutionRepositoryField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        this.inputFieldSubscriptions.push(this.recreateBuildPlansField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        this.inputFieldSubscriptions.push(this.updateTemplateFilesField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        this.inputFieldSubscriptions.push(this.programmingExerciseEditCheckoutDirectories?.formValidChanges.subscribe(() => this.calculateFormValid()));\r\n        this.tableEditableFields?.changes.subscribe((fields: QueryList<TableEditableFieldComponent>) => {\r\n            fields.toArray().forEach((field) => this.inputFieldSubscriptions.push(field.editingInput.valueChanges?.subscribe(() => this.calculateFormValid())));\r\n        });\r\n\r\n        this.titleComponent?.titleChannelNameComponent?.field_title?.valueChanges?.subscribe((newTitle: string) => {\r\n            if (this.isSimpleMode()) {\r\n                this.updateShortName(newTitle);\r\n            }\r\n        });\r\n\r\n        this.shortNameField()?.valueChanges?.subscribe(() => {\r\n            this.updateIsShortNameValid();\r\n        });\r\n    }\r\n\r\n    updateShortName(newTitle: string) {\r\n        this.exerciseTitle.set(newTitle);\r\n    }\r\n\r\n    calculateFormValid() {\r\n        const isCheckoutSolutionRepositoryValid = this.isCheckoutSolutionRepositoryValid();\r\n        const isRecreateBuildPlansValid = this.isRecreateBuildPlansValid();\r\n        const isUpdateTemplateFilesValid = this.isUpdateTemplateFilesValid();\r\n        const areAuxiliaryRepositoriesValid = this.areAuxiliaryRepositoriesValid();\r\n        const areCheckoutPathsValid = this.areCheckoutPathsValid();\r\n        this.formValid = Boolean(\r\n            this.exerciseTitleChannelComponent()?.titleChannelNameComponent?.isFormValidSignal() &&\r\n                this.getIsShortNameFieldValid() &&\r\n                isCheckoutSolutionRepositoryValid &&\r\n                isRecreateBuildPlansValid &&\r\n                isUpdateTemplateFilesValid &&\r\n                areAuxiliaryRepositoriesValid &&\r\n                areCheckoutPathsValid,\r\n        );\r\n        this.formValidChanges.next(this.formValid);\r\n    }\r\n\r\n    areAuxiliaryRepositoriesValid(): boolean {\r\n        const areAuxiliaryRepositoriesValid =\r\n            (every(\r\n                this.tableEditableFields?.map((field) => field.editingInput.valid),\r\n                Boolean,\r\n            ) &&\r\n                !this.programmingExerciseCreationConfig.auxiliaryRepositoryDuplicateDirectories &&\r\n                !this.programmingExerciseCreationConfig.auxiliaryRepositoryDuplicateNames) ||\r\n            !this.programmingExercise().auxiliaryRepositories?.length;\r\n\r\n        const isAuxRepoEditingPossibleInCurrentEditMode = !this.isSimpleMode() || this.isEditFieldDisplayedRecord().addAuxiliaryRepository;\r\n        if (isAuxRepoEditingPossibleInCurrentEditMode) {\r\n            // if editing is not possible the field will not be displayed and validity checks will evaluate to true,\r\n            // even if the actual current setting is invalid\r\n            this.isAuxiliaryRepositoryInputValid.set(areAuxiliaryRepositoriesValid);\r\n        }\r\n        return areAuxiliaryRepositoriesValid;\r\n    }\r\n\r\n    isUpdateTemplateFilesValid(): boolean {\r\n        return (\r\n            this.updateTemplateFilesField?.valid ||\r\n            !this.programmingExerciseCreationConfig.isImportFromExistingExercise ||\r\n            this.programmingExercise().projectType === ProjectType.PLAIN_GRADLE ||\r\n            this.programmingExercise().projectType === ProjectType.GRADLE_GRADLE\r\n        );\r\n    }\r\n\r\n    isRecreateBuildPlansValid(): boolean {\r\n        return this.recreateBuildPlansField?.valid || !this.programmingExerciseCreationConfig.isImportFromExistingExercise;\r\n    }\r\n\r\n    isCheckoutSolutionRepositoryValid(): boolean {\r\n        return Boolean(\r\n            this.checkoutSolutionRepositoryField?.valid ||\r\n                this.programmingExercise().id ||\r\n                !this.programmingExercise().programmingLanguage ||\r\n                !this.programmingExerciseCreationConfig.checkoutSolutionRepositoryAllowed,\r\n        );\r\n    }\r\n\r\n    areCheckoutPathsValid(): boolean {\r\n        return Boolean(\r\n            !this.programmingExerciseEditCheckoutDirectories ||\r\n                (this.programmingExerciseEditCheckoutDirectories.formValid &&\r\n                    this.programmingExerciseEditCheckoutDirectories.areValuesUnique([\r\n                        this.programmingExercise().buildConfig?.assignmentCheckoutPath,\r\n                        this.programmingExercise().buildConfig?.testCheckoutPath,\r\n                        this.programmingExercise().buildConfig?.solutionCheckoutPath,\r\n                    ])),\r\n        );\r\n    }\r\n\r\n    toggleEditRepositoryCheckoutPath() {\r\n        this.editRepositoryCheckoutPath = !this.editRepositoryCheckoutPath;\r\n    }\r\n\r\n    updateSubmissionBuildPlanCheckoutDirectories(buildPlanCheckoutDirectoriesDTO: BuildPlanCheckoutDirectoriesDTO) {\r\n        this.submissionBuildPlanCheckoutRepositories = buildPlanCheckoutDirectoriesDTO;\r\n    }\r\n\r\n    onAssigmentRepositoryCheckoutPathChange(event: string) {\r\n        this.programmingExercise().buildConfig!.assignmentCheckoutPath = event;\r\n        // We need to create a new object to trigger the change detection\r\n        this.programmingExercise().buildConfig = { ...this.programmingExercise().buildConfig };\r\n    }\r\n\r\n    onTestRepositoryCheckoutPathChange(event: string) {\r\n        this.programmingExercise().buildConfig!.testCheckoutPath = event;\r\n        // We need to create a new object to trigger the change detection\r\n        this.programmingExercise().buildConfig = { ...this.programmingExercise().buildConfig };\r\n    }\r\n\r\n    onSolutionRepositoryCheckoutPathChange(event: string) {\r\n        this.programmingExercise().buildConfig!.solutionCheckoutPath = event;\r\n        // We need to create a new object to trigger the change detection\r\n        this.programmingExercise().buildConfig = { ...this.programmingExercise().buildConfig };\r\n    }\r\n\r\n    private registerInputFieldsWhenChildComponentsAreReady() {\r\n        this.shortNameField(); // triggers effect\r\n        this.registerInputFields();\r\n    }\r\n\r\n    private fetchAndInitializeTakenTitlesAndShortNames() {\r\n        const courseId = this.courseId() ?? this.programmingExercise().course?.id;\r\n        if (courseId) {\r\n            this.exerciseService.getExistingExerciseDetailsInCourse(courseId, ExerciseType.PROGRAMMING).subscribe((exerciseDetails: CourseExistingExerciseDetailsType) => {\r\n                this.alreadyUsedExerciseNames.set(exerciseDetails.exerciseTitles ?? new Set());\r\n                this.alreadyUsedShortNames.set(exerciseDetails.shortNames ?? new Set());\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateShortNameWhenInSimpleMode() {\r\n        const shouldNotGenerateShortName = !this.isSimpleMode() || this.programmingExerciseCreationConfig.isEdit;\r\n        if (shouldNotGenerateShortName) {\r\n            this.isShortNameFromAdvancedMode.set(this.isShortNameFieldValid());\r\n            return;\r\n        }\r\n        let newShortName = this.exerciseTitle() ?? this.programmingExercise().title;\r\n        if (this.isImport() || this.isShortNameFromAdvancedMode()) {\r\n            newShortName = this.programmingExercise().shortName;\r\n        }\r\n\r\n        if (newShortName && newShortName.length > 3) {\r\n            const sanitizedShortName = removeSpecialCharacters(newShortName ?? '');\r\n            // noinspection UnnecessaryLocalVariableJS: not inlined because the variable name improves readability\r\n            const uniqueShortName = this.ensureShortNameIsUnique(sanitizedShortName);\r\n            this.programmingExercise().shortName = uniqueShortName;\r\n        }\r\n\r\n        this.updateIsShortNameValid();\r\n    }\r\n\r\n    private defineShortNameOnEditModeChangeIfNotDefinedInAdvancedMode() {\r\n        if (this.isSimpleMode()) {\r\n            this.updateIsShortNameValid();\r\n            this.calculateFormValid();\r\n        }\r\n    }\r\n\r\n    private updateIsShortNameValid() {\r\n        this.isShortNameFieldValid.set(this.getIsShortNameFieldValid());\r\n    }\r\n\r\n    private getIsShortNameFieldValid() {\r\n        return this.shortNameField() === undefined || this.shortNameField()?.control?.status === 'VALID' || this.shortNameField()?.control?.status === 'DISABLED';\r\n    }\r\n\r\n    private ensureShortNameIsUnique(shortName: string): string {\r\n        let newShortName = shortName;\r\n        let counter = 1;\r\n        while (this.alreadyUsedShortNames().has(newShortName)) {\r\n            if (counter > MAXIMUM_TRIES_TO_GENERATE_UNIQUE_SHORT_NAME) {\r\n                this.alertService.error('artemisApp.error.shortNameGenerationFailed');\r\n                break;\r\n            }\r\n            newShortName = `${shortName}${counter}`;\r\n            counter++;\r\n        }\r\n        return newShortName;\r\n    }\r\n}\r\n", "<section>\r\n    <h3\r\n        jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.generalInfoStepTitle\"\r\n        id=\"artemisApp.programmingExercise.wizardMode.detailedSteps.generalInfoStepTitle\"\r\n    ></h3>\r\n    <p jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.generalInfoStepMessage\"></p>\r\n    <div class=\"form-group\">\r\n        <div>\r\n            <label jhiTranslate=\"artemisApp.exercise.title\"></label>\r\n            <jhi-help-icon text=\"artemisApp.programmingExercise.titleTooltip\" />\r\n        </div>\r\n        <jhi-exercise-title-channel-name\r\n            #titleChannelNameComponent\r\n            [exercise]=\"programmingExercise()\"\r\n            [course]=\"programmingExercise().course\"\r\n            [minTitleLength]=\"3\"\r\n            [titlePattern]=\"programmingExerciseCreationConfig.titleNamePattern\"\r\n            [hideTitleLabel]=\"true\"\r\n            [isExamMode]=\"isExamMode()\"\r\n            [isImport]=\"isImport()\"\r\n            [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n            [courseId]=\"courseId()\"\r\n        />\r\n    </div>\r\n    @if (isEditFieldDisplayedRecord().shortName) {\r\n        <div class=\"form-group\">\r\n            <div>\r\n                <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.shortName\" for=\"field_shortName\"></label>\r\n                <jhi-help-icon text=\"artemisApp.programmingExercise.shortNameTooltip\" />\r\n            </div>\r\n            <input\r\n                required\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"shortName\"\r\n                id=\"field_shortName\"\r\n                minlength=\"3\"\r\n                [pattern]=\"programmingExerciseCreationConfig.shortNamePattern\"\r\n                [(ngModel)]=\"programmingExercise().shortName\"\r\n                [readOnly]=\"!programmingExerciseCreationConfig.isImportFromExistingExercise && !!programmingExercise().id\"\r\n                [disabled]=\"!programmingExerciseCreationConfig.isImportFromExistingExercise && !!programmingExercise().id\"\r\n                notIncludedIn\r\n                [disallowedValues]=\"alreadyUsedShortNames()\"\r\n                #shortName=\"ngModel\"\r\n            />\r\n            @for (error of shortName.errors! | keyvalue | removekeys: ['required']; track error.key) {\r\n                @if (shortName.invalid && (shortName.dirty || shortName.touched)) {\r\n                    <div class=\"alert alert-danger\">\r\n                        <div [jhiTranslate]=\"'artemisApp.exercise.form.shortName' + '.' + error.key\"></div>\r\n                    </div>\r\n                }\r\n            }\r\n        </div>\r\n    }\r\n    @if (programmingExercise().shortName && isShortNameFieldValid()) {\r\n        <div class=\"form-group\">\r\n            <div>\r\n                <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.preview.label\"></label>\r\n                <jhi-help-icon [text]=\"isLocal() ? 'artemisApp.programmingExercise.preview.tooltipLocalVC' : 'artemisApp.programmingExercise.preview.tooltip'\" />\r\n            </div>\r\n            <jhi-programming-exercise-repository-and-build-plan-details\r\n                [programmingExercise]=\"programmingExercise()\"\r\n                [programmingLanguage]=\"programmingExerciseCreationConfig.selectedProgrammingLanguage\"\r\n                [isLocal]=\"isLocal()\"\r\n                [checkoutSolutionRepository]=\"programmingExercise().buildConfig?.checkoutSolutionRepository || false\"\r\n                (submissionBuildPlanEvent)=\"updateSubmissionBuildPlanCheckoutDirectories($event)\"\r\n                [isCreateOrEdit]=\"true\"\r\n                [isEditMode]=\"programmingExerciseCreationConfig.isEdit\"\r\n                [programmingExerciseBuildConfig]=\"programmingExercise().buildConfig\"\r\n            />\r\n            @if (editRepositoryCheckoutPath && isLocal() && !isImport() && !programmingExerciseCreationConfig.isEdit && isEditFieldDisplayedRecord().editRepositoriesCheckoutPath) {\r\n                <jhi-programming-exercise-edit-checkout-directories\r\n                    [programmingExercise]=\"programmingExercise()\"\r\n                    [submissionBuildPlanCheckoutRepositories]=\"submissionBuildPlanCheckoutRepositories\"\r\n                    (assignmentCheckoutPathEvent)=\"onAssigmentRepositoryCheckoutPathChange($event)\"\r\n                    (testCheckoutPathEvent)=\"onTestRepositoryCheckoutPathChange($event)\"\r\n                    (solutionCheckoutPathEvent)=\"onSolutionRepositoryCheckoutPathChange($event)\"\r\n                    [pattern]=\"programmingExerciseCreationConfig.invalidDirectoryNamePattern\"\r\n                />\r\n            }\r\n            @if (!programmingExerciseCreationConfig.isImportFromExistingExercise && programmingExerciseCreationConfig.auxiliaryRepositoriesSupported) {\r\n                <div class=\"form-group\">\r\n                    @if (\r\n                        programmingExercise().auxiliaryRepositories &&\r\n                        programmingExercise().auxiliaryRepositories!.length > 0 &&\r\n                        isEditFieldDisplayedRecord().addAuxiliaryRepository\r\n                    ) {\r\n                        <ngx-datatable\r\n                            id=\"auxiliaryRepositoryTable\"\r\n                            class=\"bootstrap\"\r\n                            trackByProp=\"id\"\r\n                            [headerHeight]=\"50\"\r\n                            [limit]=\"20\"\r\n                            [columnMode]=\"'force'\"\r\n                            [rowHeight]=\"'auto'\"\r\n                            [rows]=\"programmingExercise().auxiliaryRepositories\"\r\n                        >\r\n                            <ngx-datatable-column [name]=\"'artemisApp.programmingExercise.auxiliaryRepository.repositoryName' | artemisTranslate\" prop=\"repositoryName\">\r\n                                <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                                    <jhi-table-editable-field\r\n                                        [id]=\"row.id + '-repositoryName'\"\r\n                                        [value]=\"row.name || ''\"\r\n                                        [onValueUpdate]=\"programmingExerciseCreationConfig.updateRepositoryName(row)\"\r\n                                        [pattern]=\"programmingExerciseCreationConfig.invalidRepositoryNamePattern\"\r\n                                        [isRequired]=\"true\"\r\n                                        [translationBase]=\"'artemisApp.programmingExercise.auxiliaryRepository.repositoryNameRequired'\"\r\n                                    />\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [name]=\"'artemisApp.programmingExercise.auxiliaryRepository.checkoutDirectory' | artemisTranslate\" prop=\"checkoutDirectory\">\r\n                                <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                                    <jhi-table-editable-field\r\n                                        [id]=\"row.id + '-checkoutDirectory'\"\r\n                                        [value]=\"row.checkoutDirectory || ''\"\r\n                                        [onValueUpdate]=\"programmingExerciseCreationConfig.updateCheckoutDirectory(row)\"\r\n                                        [pattern]=\"programmingExerciseCreationConfig.invalidDirectoryNamePattern\"\r\n                                        [translationBase]=\"'artemisApp.programmingExercise.auxiliaryRepository.invalidDirectoryName'\"\r\n                                    />\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [name]=\"'artemisApp.programmingExercise.auxiliaryRepository.description' | artemisTranslate\" prop=\"description\">\r\n                                <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                                    <textarea class=\"form-control table-editable-field__input me-2\" [id]=\"row.id + '-description'\" [(ngModel)]=\"row.description\" name=\"description\">\r\n                                    </textarea>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name=\"\" prop=\"removeButton\">\r\n                                <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                                    <jhi-remove-auxiliary-repository-button\r\n                                        placement=\"right auto\"\r\n                                        [programmingExercise]=\"programmingExercise()\"\r\n                                        (onRefresh)=\"programmingExerciseCreationConfig.refreshAuxiliaryRepositoryChecks()\"\r\n                                        [row]=\"row\"\r\n                                        class=\"ml-2\"\r\n                                    />\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                        </ngx-datatable>\r\n                    }\r\n                    @if (programmingExerciseCreationConfig.auxiliaryRepositoryDuplicateNames || programmingExerciseCreationConfig.auxiliaryRepositoryDuplicateDirectories) {\r\n                        <ngb-alert [dismissible]=\"false\" [type]=\"'danger'\">\r\n                            @if (programmingExerciseCreationConfig.auxiliaryRepositoryDuplicateNames) {\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.auxiliaryRepository.duplicateRepositoryNames\"></span>\r\n                            }\r\n                            @if (programmingExerciseCreationConfig.auxiliaryRepositoryDuplicateDirectories) {\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.auxiliaryRepository.duplicateDirectoryNames\"></span>\r\n                            }\r\n                        </ngb-alert>\r\n                    }\r\n                    @if (programmingExerciseCreationConfig && !isLocal()) {\r\n                        <ngb-alert [dismissible]=\"false\" [type]=\"'info'\">\r\n                            <span jhiTranslate=\"artemisApp.programmingExercise.auxiliaryRepository.warning\"></span>\r\n                        </ngb-alert>\r\n                    }\r\n                    @if (isLocal() && !isImport() && !programmingExerciseCreationConfig.isEdit && isEditFieldDisplayedRecord().editRepositoriesCheckoutPath) {\r\n                        <jhi-button\r\n                            [btnType]=\"ButtonType.WARNING\"\r\n                            [btnSize]=\"ButtonSize.SMALL\"\r\n                            [icon]=\"faPlus\"\r\n                            [title]=\"'artemisApp.programmingExercise.checkoutPath.edit'\"\r\n                            (onClick)=\"toggleEditRepositoryCheckoutPath()\"\r\n                        />\r\n                    }\r\n                    @if (isEditFieldDisplayedRecord().addAuxiliaryRepository) {\r\n                        <jhi-add-auxiliary-repository-button\r\n                            [programmingExercise]=\"programmingExercise()\"\r\n                            (onRefresh)=\"programmingExerciseCreationConfig.refreshAuxiliaryRepositoryChecks()\"\r\n                            class=\"ml-2\"\r\n                        />\r\n                        <jhi-help-icon text=\"artemisApp.programmingExercise.auxiliaryRepository.usageDescription\" />\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    <div class=\"form-group\">\r\n        @if (programmingExerciseCreationConfig.isImportFromExistingExercise) {\r\n            <div class=\"form-check\">\r\n                <label class=\"form-check-label\" for=\"field_recreateBuildPlans\">\r\n                    <input\r\n                        #recreateBuildPlans=\"ngModel\"\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"recreateBuildPlans\"\r\n                        id=\"field_recreateBuildPlans\"\r\n                        [(ngModel)]=\"importOptions().recreateBuildPlans\"\r\n                        (change)=\"programmingExerciseCreationConfig.recreateBuildPlanOrUpdateTemplateChange()\"\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.recreateBuildPlans.title\"></span>\r\n                    <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.recreateBuildPlans.description\" />\r\n                </label>\r\n            </div>\r\n        }\r\n        @if (\r\n            programmingExerciseCreationConfig.isImportFromExistingExercise &&\r\n            programmingExercise().projectType !== ProjectType.PLAIN_GRADLE &&\r\n            programmingExercise().projectType !== ProjectType.GRADLE_GRADLE\r\n        ) {\r\n            <div class=\"form-check\">\r\n                <label class=\"form-check-label\" for=\"field_updateTemplateFiles\">\r\n                    <input\r\n                        #updateTemplateFiles=\"ngModel\"\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"updateTemplateFiles\"\r\n                        id=\"field_updateTemplateFiles\"\r\n                        [(ngModel)]=\"importOptions().updateTemplate\"\r\n                        (change)=\"programmingExerciseCreationConfig.recreateBuildPlanOrUpdateTemplateChange()\"\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.updateTemplate.title\"></span>\r\n                    <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.updateTemplate.description\" />\r\n                </label>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (!programmingExerciseCreationConfig.isExamMode && isEditFieldDisplayedRecord().categories) {\r\n        <div id=\"creation-config-selector\">\r\n            <div>\r\n                <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.categories\"></label>\r\n                <jhi-help-icon text=\"artemisApp.exercise.categoriesTooltip\" />\r\n            </div>\r\n            <jhi-category-selector\r\n                [categories]=\"programmingExerciseCreationConfig.exerciseCategories\"\r\n                [existingCategories]=\"programmingExerciseCreationConfig.existingCategories\"\r\n                (selectedCategories)=\"programmingExerciseCreationConfig.updateCategories($event)\"\r\n            />\r\n        </div>\r\n    }\r\n    @if (isSimpleMode()) {\r\n        <jhi-programming-exercise-difficulty [programmingExercise]=\"programmingExercise()\" />\r\n    }\r\n</section>\r\n", "import { Component, EventEmitter, Input, OnInit, Output, ViewChild, inject, input } from '@angular/core';\r\nimport { ProgrammingExercise, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { TeamConfigFormGroupComponent } from 'app/exercises/shared/team-config-form-group/team-config-form-group.component';\r\nimport { PROFILE_THEIA } from 'app/app.constants';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ProgrammingExerciseDifficultyComponent } from '../difficulty/programming-exercise-difficulty.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-mode',\r\n    templateUrl: './programming-exercise-mode.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        ProgrammingExerciseDifficultyComponent,\r\n        TeamConfigFormGroupComponent,\r\n        FormsModule,\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        HelpIconComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseModeComponent implements OnInit {\r\n    private profileService = inject(ProfileService);\r\n\r\n    protected readonly ProjectType = ProjectType;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    @Input({ required: true }) programmingExercise: ProgrammingExercise;\r\n    @Input({ required: true }) programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n    isEditFieldDisplayedRecord = input.required<Record<ProgrammingExerciseInputField, boolean>>();\r\n\r\n    @ViewChild(TeamConfigFormGroupComponent) teamConfigComponent: TeamConfigFormGroupComponent;\r\n\r\n    @Output() triggerValidation = new EventEmitter<void>();\r\n\r\n    theiaEnabled = false;\r\n\r\n    ngOnInit(): void {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.theiaEnabled = profileInfo.activeProfiles?.includes(PROFILE_THEIA);\r\n        });\r\n    }\r\n}\r\n", "<section>\r\n    <h3\r\n        jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.difficultyStepTitle\"\r\n        id=\"artemisApp.programmingExercise.wizardMode.detailedSteps.difficultyStepTitle\"\r\n    ></h3>\r\n    <p jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.difficultyStepMessage\"></p>\r\n    @if (isEditFieldDisplayedRecord().difficulty) {\r\n        <jhi-programming-exercise-difficulty [programmingExercise]=\"programmingExercise\" />\r\n    }\r\n    @if (isEditFieldDisplayedRecord().participationMode) {\r\n        <div class=\"form-group\">\r\n            <jhi-team-config-form-group class=\"form-element\" [exercise]=\"programmingExercise\" [isImport]=\"programmingExerciseCreationConfig.isImportFromExistingExercise\" />\r\n        </div>\r\n    }\r\n    <div class=\"form-group\">\r\n        @if (isEditFieldDisplayedRecord().allowOfflineIde) {\r\n            <div class=\"form-check\">\r\n                <label [class]=\"!programmingExerciseCreationConfig.validIdeSelection() ? 'form-check-label text-danger' : 'form-check-label'\" for=\"field_allowOfflineIde\">\r\n                    <input\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"allowOfflineIde\"\r\n                        id=\"field_allowOfflineIde\"\r\n                        [(ngModel)]=\"programmingExercise.allowOfflineIde\"\r\n                        checked\r\n                        (ngModelChange)=\"triggerValidation.emit()\"\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.allowOfflineIde.title\"></span>\r\n                    @if (!programmingExerciseCreationConfig.validIdeSelection()) {\r\n                        @if (theiaEnabled) {\r\n                            <fa-icon\r\n                                [icon]=\"faQuestionCircle\"\r\n                                class=\"text-danger\"\r\n                                [placement]=\"'top'\"\r\n                                ngbTooltip=\"{{ 'artemisApp.programmingExercise.allowOfflineIde.alert' | artemisTranslate }}\"\r\n                            />\r\n                        } @else {\r\n                            <fa-icon\r\n                                [icon]=\"faQuestionCircle\"\r\n                                class=\"text-danger\"\r\n                                [placement]=\"'top'\"\r\n                                ngbTooltip=\"{{ 'artemisApp.programmingExercise.allowOfflineIde.alertNoTheia' | artemisTranslate }}\"\r\n                            />\r\n                        }\r\n                    } @else {\r\n                        <jhi-help-icon text=\"artemisApp.programmingExercise.allowOfflineIde.description\" />\r\n                    }\r\n                </label>\r\n            </div>\r\n        }\r\n        @if (ProjectType.XCODE !== programmingExerciseCreationConfig.selectedProjectType && isEditFieldDisplayedRecord().allowOnlineCodeEditor) {\r\n            <div class=\"form-check\">\r\n                <label [class]=\"!programmingExerciseCreationConfig.validIdeSelection() ? 'form-check-label text-danger' : 'form-check-label'\" for=\"field_allowOnlineEditor\">\r\n                    <input\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"allowOnlineEditor\"\r\n                        id=\"field_allowOnlineEditor\"\r\n                        [(ngModel)]=\"programmingExercise.allowOnlineEditor\"\r\n                        checked\r\n                        (ngModelChange)=\"triggerValidation.emit()\"\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.allowOnlineEditor.title\"></span>\r\n                    @if (!programmingExerciseCreationConfig.validIdeSelection()) {\r\n                        @if (theiaEnabled) {\r\n                            <fa-icon\r\n                                [icon]=\"faQuestionCircle\"\r\n                                class=\"text-danger\"\r\n                                [placement]=\"'top'\"\r\n                                ngbTooltip=\"{{ 'artemisApp.programmingExercise.allowOnlineEditor.alert' | artemisTranslate }}\"\r\n                            />\r\n                        } @else {\r\n                            <fa-icon\r\n                                [icon]=\"faQuestionCircle\"\r\n                                class=\"text-danger\"\r\n                                [placement]=\"'top'\"\r\n                                ngbTooltip=\"{{ 'artemisApp.programmingExercise.allowOnlineEditor.alertNoTheia' | artemisTranslate }}\"\r\n                            />\r\n                        }\r\n                    } @else {\r\n                        <jhi-help-icon text=\"artemisApp.programmingExercise.allowOnlineEditor.description\" />\r\n                    }\r\n                </label>\r\n            </div>\r\n        }\r\n        <!-- only show this for non-exam exercises -->\r\n        @if (!programmingExercise.exerciseGroup && theiaEnabled && isEditFieldDisplayedRecord().allowOnlineIde) {\r\n            <div class=\"form-check\">\r\n                <label [class]=\"!programmingExerciseCreationConfig.validIdeSelection() ? 'form-check-label text-danger' : 'form-check-label'\" for=\"field_allowOnlineIde\">\r\n                    <input\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"allowOnlineIde\"\r\n                        id=\"field_allowOnlineIde\"\r\n                        [(ngModel)]=\"programmingExercise.allowOnlineIde\"\r\n                        checked\r\n                        (ngModelChange)=\"triggerValidation.emit()\"\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.allowOnlineIde.title\"></span>\r\n                    @if (!programmingExerciseCreationConfig.validIdeSelection()) {\r\n                        <fa-icon\r\n                            [icon]=\"faQuestionCircle\"\r\n                            class=\"text-danger\"\r\n                            [placement]=\"'top'\"\r\n                            ngbTooltip=\"{{ 'artemisApp.programmingExercise.allowOnlineIde.alert' | artemisTranslate }}\"\r\n                        />\r\n                    } @else {\r\n                        <jhi-help-icon text=\"artemisApp.programmingExercise.allowOnlineIde.description\" />\r\n                    }\r\n                </label>\r\n            </div>\r\n        }\r\n    </div>\r\n</section>\r\n", "import { Component, OnInit, effect, inject, input, output, viewChild } from '@angular/core';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { ProgrammingExercise, ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { TableEditableFieldComponent } from 'app/shared/table/table-editable-field.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\nconst NOT_SUPPORTED_NETWORK_DISABLED_LANGUAGES = [ProgrammingLanguage.EMPTY];\r\n\r\ninterface DockerFlags {\r\n    network?: string;\r\n    env?: { [key: string]: string };\r\n    cpuCount?: number;\r\n    memory?: number;\r\n    memorySwap?: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-build-configuration',\r\n    templateUrl: './programming-exercise-build-configuration.component.html',\r\n    styleUrls: ['../../../../programming-exercise-form.scss'],\r\n    imports: [TranslateDirective, HelpIconComponent, FormsModule, NgxDatatableModule, TableEditableFieldComponent, FaIconComponent],\r\n})\r\nexport class ProgrammingExerciseBuildConfigurationComponent implements OnInit {\r\n    private profileService = inject(ProfileService);\r\n\r\n    programmingExercise = input<ProgrammingExercise>();\r\n    dockerImage = input.required<string>();\r\n    dockerImageChange = output<string>();\r\n\r\n    timeout = input<number>();\r\n    timeoutChange = output<number>();\r\n\r\n    envVars: [string, string][] = [];\r\n    isNetworkDisabled = false;\r\n    cpuCount: number | undefined;\r\n    memory: number | undefined;\r\n    memorySwap: number | undefined;\r\n    dockerFlags: DockerFlags = {};\r\n\r\n    isAeolus = input.required<boolean>();\r\n\r\n    dockerImageField = viewChild<NgModel>('dockerImageField');\r\n    timeoutField = viewChild<NgModel>('timeoutField');\r\n\r\n    timeoutMinValue?: number;\r\n    timeoutMaxValue?: number;\r\n    timeoutDefaultValue?: number;\r\n\r\n    isLanguageSupported = false;\r\n\r\n    faPlus = faPlus;\r\n    faTrash = faTrash;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.setIsLanguageSupported();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.timeoutMinValue = profileInfo.buildTimeoutMin ?? 10;\r\n\r\n                // Set the maximum timeout value to 240 if it is not set in the profile or if it is less than the minimum value\r\n                this.timeoutMaxValue = profileInfo.buildTimeoutMax && profileInfo.buildTimeoutMax > this.timeoutMinValue ? profileInfo.buildTimeoutMax : 240;\r\n\r\n                // Set the default timeout value to 120 if it is not set in the profile or if it is not in the valid range\r\n                this.timeoutDefaultValue = 120;\r\n                if (profileInfo.buildTimeoutDefault && profileInfo.buildTimeoutDefault >= this.timeoutMinValue && profileInfo.buildTimeoutDefault <= this.timeoutMaxValue) {\r\n                    this.timeoutDefaultValue = profileInfo.buildTimeoutDefault;\r\n                }\r\n\r\n                if (!this.timeout) {\r\n                    this.timeoutChange.emit(this.timeoutDefaultValue);\r\n                }\r\n\r\n                if (!this.cpuCount) {\r\n                    this.cpuCount = profileInfo.defaultContainerCpuCount;\r\n                }\r\n                if (!this.memory) {\r\n                    this.memory = profileInfo.defaultContainerMemoryLimitInMB;\r\n                }\r\n                if (!this.memorySwap) {\r\n                    this.memorySwap = profileInfo.defaultContainerMemorySwapLimitInMB;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.programmingExercise()?.buildConfig?.dockerFlags) {\r\n            this.initDockerFlags();\r\n        }\r\n    }\r\n\r\n    initDockerFlags() {\r\n        this.dockerFlags = JSON.parse(this.programmingExercise()?.buildConfig?.dockerFlags ?? '') as DockerFlags;\r\n        this.isNetworkDisabled = this.dockerFlags.network === 'none';\r\n        if (this.dockerFlags.cpuCount) {\r\n            this.cpuCount = this.dockerFlags.cpuCount;\r\n        }\r\n        if (this.dockerFlags.memory) {\r\n            this.memory = this.dockerFlags.memory;\r\n        }\r\n        if (this.dockerFlags.memorySwap) {\r\n            this.memorySwap = this.dockerFlags.memorySwap;\r\n        }\r\n        this.envVars = [];\r\n        if (this.dockerFlags.env) {\r\n            for (const key in this.dockerFlags.env) {\r\n                this.envVars.push([key, this.dockerFlags.env?.[key] ?? '']);\r\n            }\r\n        }\r\n    }\r\n\r\n    onDisableNetworkAccessChange(event: any) {\r\n        this.isNetworkDisabled = event.target.checked;\r\n        this.parseDockerFlagsToString();\r\n    }\r\n\r\n    onCpuCountChange(event: any) {\r\n        this.cpuCount = event.target.value;\r\n        this.parseDockerFlagsToString();\r\n    }\r\n\r\n    onMemoryChange(event: any) {\r\n        this.memory = event.target.value;\r\n        this.parseDockerFlagsToString();\r\n    }\r\n\r\n    onMemorySwapChange(event: any) {\r\n        this.memorySwap = event.target.value;\r\n        this.parseDockerFlagsToString();\r\n    }\r\n\r\n    onEnvVarsKeyChange(row: [string, string]) {\r\n        return (newValue: string) => {\r\n            row[0] = newValue;\r\n            this.parseDockerFlagsToString();\r\n            return row[0];\r\n        };\r\n    }\r\n\r\n    onEnvVarsValueChange(row: [string, string]) {\r\n        return (newValue: string) => {\r\n            row[1] = newValue;\r\n            this.parseDockerFlagsToString();\r\n            return row[1];\r\n        };\r\n    }\r\n\r\n    addEnvVar() {\r\n        this.envVars.push(['', '']);\r\n    }\r\n\r\n    removeEnvVar(index: number) {\r\n        this.envVars.splice(index, 1);\r\n        this.parseDockerFlagsToString();\r\n    }\r\n\r\n    parseDockerFlagsToString() {\r\n        const newEnv = {} as { [key: string]: string } | undefined;\r\n        this.envVars.forEach(([key, value]) => {\r\n            if (key.trim()) {\r\n                newEnv![key] = value;\r\n            }\r\n        });\r\n        this.dockerFlags = { network: this.isNetworkDisabled ? 'none' : undefined, env: newEnv, cpuCount: this.cpuCount, memory: this.memory, memorySwap: this.memorySwap };\r\n        this.programmingExercise()!.buildConfig!.dockerFlags = JSON.stringify(this.dockerFlags);\r\n    }\r\n\r\n    setIsLanguageSupported() {\r\n        this.isLanguageSupported = !NOT_SUPPORTED_NETWORK_DISABLED_LANGUAGES.includes(this.programmingExercise()?.programmingLanguage || ProgrammingLanguage.EMPTY);\r\n    }\r\n}\r\n", "<div class=\"mb-2\">\r\n    <div class=\"mb-2\">\r\n        <label>\r\n            <span jhiTranslate=\"artemisApp.programmingExercise.dockerImage\"></span>\r\n        </label>\r\n        <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.customizeDockerImage\" />\r\n        <input\r\n            #dockerImageField=\"ngModel\"\r\n            required\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            name=\"dockerImage\"\r\n            id=\"field_dockerImage\"\r\n            [ngModel]=\"dockerImage()\"\r\n            (ngModelChange)=\"dockerImageChange.emit($event)\"\r\n        />\r\n    </div>\r\n    @if (!isAeolus()) {\r\n        @if (isLanguageSupported) {\r\n            <div class=\"form-check mb-2\">\r\n                <label class=\"form-check-label\" for=\"field_disableNetworkAccess\">\r\n                    <input\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"disableNetworkAccess\"\r\n                        id=\"field_disableNetworkAccess\"\r\n                        [checked]=\"isNetworkDisabled\"\r\n                        (change)=\"onDisableNetworkAccessChange($event)\"\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.disableNetworkAccess.title\"></span>\r\n                    <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.dockerFlags.disableNetworkAccess.description\" />\r\n                </label>\r\n            </div>\r\n            @if (isNetworkDisabled) {\r\n                <div class=\"warning alert-warning mb-2\" role=\"alert\">\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.disableNetworkAccess.warning\"></span>\r\n                </div>\r\n            }\r\n        }\r\n\r\n        <div class=\"mb-2\">\r\n            <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.envVars.title\"></span>\r\n            <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.dockerFlags.envVars.description\" />\r\n            <ngx-datatable id=\"envVarsTable\" class=\"bootstrap\" trackByProp=\"id\" [headerHeight]=\"50\" [columnMode]=\"'force'\" [rowHeight]=\"'auto'\" [rows]=\"envVars\">\r\n                <ngx-datatable-column [name]=\"'Key'\" [maxWidth]=\"200\">\r\n                    <ng-template ngx-datatable-cell-template let-row=\"row\" let-rowIndex=\"rowIndex\">\r\n                        <jhi-table-editable-field [id]=\"'key' + rowIndex\" [value]=\"row[0] || ''\" [onValueUpdate]=\"this.onEnvVarsKeyChange(row)\" [isRequired]=\"true\" />\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column [name]=\"'Value'\">\r\n                    <ng-template ngx-datatable-cell-template let-row=\"row\" let-rowIndex=\"rowIndex\">\r\n                        <jhi-table-editable-field [id]=\"'value' + rowIndex\" [value]=\"row[1] || ''\" [onValueUpdate]=\"this.onEnvVarsValueChange(row)\" [isRequired]=\"true\" />\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column [maxWidth]=\"150\">\r\n                    <ng-template ngx-datatable-cell-template let-row=\"row\" let-rowIndex=\"rowIndex\">\r\n                        <button class=\"btn btn-sm btn-danger\" (click)=\"removeEnvVar(rowIndex)\">\r\n                            <fa-icon [icon]=\"faTrash\" />\r\n                            <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.envVars.removeEnvVar\"></span>\r\n                        </button>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n            </ngx-datatable>\r\n            <button class=\"btn btn-sm btn-primary mb-2\" (click)=\"addEnvVar()\">\r\n                <fa-icon [icon]=\"faPlus\" />\r\n                <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.envVars.addEnvVar\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"d-flex align-items-center justify-content-start gap-4 mb-2\">\r\n            <div>\r\n                <label>\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.timeout.title\"></span>\r\n                </label>\r\n                <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.timeout.customize\" />\r\n            </div>\r\n            <div class=\"w-50\">\r\n                <input\r\n                    class=\"w-100 mt-1\"\r\n                    #timeoutField=\"ngModel\"\r\n                    type=\"range\"\r\n                    min=\"{{ timeoutMinValue }}\"\r\n                    max=\"{{ timeoutMaxValue }}\"\r\n                    step=\"1\"\r\n                    value=\"{{ timeoutDefaultValue }}\"\r\n                    id=\"field_timeout\"\r\n                    [ngModel]=\"timeout()\"\r\n                    (ngModelChange)=\"timeoutChange!.emit($event)\"\r\n                />\r\n            </div>\r\n            <span class=\"slider-label\">\r\n                <span class=\"slider-value\">{{ timeout() }} s</span>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"mb-2\">\r\n            <label>\r\n                <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.cpuCount.label\"></span>\r\n            </label>\r\n            <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.dockerFlags.cpuCount.help\" />\r\n            <input type=\"text\" class=\"form-control\" name=\"cpuCount\" id=\"field_dockerCpuCount\" [value]=\"cpuCount\" (input)=\"onCpuCountChange($event)\" />\r\n        </div>\r\n\r\n        <div class=\"mb-2\">\r\n            <label>\r\n                <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.memory.label\"></span>\r\n            </label>\r\n            <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.dockerFlags.memory.help\" />\r\n            <input type=\"text\" class=\"form-control\" name=\"memory\" id=\"field_memory\" [value]=\"memory\" (input)=\"onMemoryChange($event)\" />\r\n        </div>\r\n\r\n        <div class=\"mb-2\">\r\n            <label>\r\n                <span jhiTranslate=\"artemisApp.programmingExercise.dockerFlags.memorySwap.label\"></span>\r\n            </label>\r\n            <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.dockerFlags.memorySwap.help\" />\r\n            <input type=\"text\" class=\"form-control\" name=\"memorySwap\" id=\"field_memorySwap\" [value]=\"memorySwap\" (input)=\"onMemorySwapChange($event)\" />\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnChanges, SimpleChanges, ViewChild, inject } from '@angular/core';\r\nimport { BuildAction, ScriptAction } from 'app/entities/programming/build.action';\r\nimport { ProgrammingExercise, ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { AeolusService } from 'app/exercises/programming/shared/service/aeolus.service';\r\nimport { ProgrammingExerciseBuildConfigurationComponent } from 'app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-build-configuration/programming-exercise-build-configuration.component';\r\nimport { MonacoEditorComponent } from 'app/shared/monaco-editor/monaco-editor.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-custom-aeolus-build-plan',\r\n    templateUrl: './programming-exercise-custom-aeolus-build-plan.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [FormsModule, TranslateDirective, HelpIconComponent, ProgrammingExerciseBuildConfigurationComponent, NgClass, MonacoEditorComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ProgrammingExerciseCustomAeolusBuildPlanComponent implements OnChanges {\r\n    private aeolusService = inject(AeolusService);\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n    @Input() programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n\r\n    @ViewChild(ProgrammingExerciseBuildConfigurationComponent) programmingExerciseDockerImageComponent?: ProgrammingExerciseBuildConfigurationComponent;\r\n\r\n    programmingLanguage?: ProgrammingLanguage;\r\n    projectType?: ProjectType;\r\n    staticCodeAnalysisEnabled?: boolean;\r\n    sequentialTestRuns?: boolean;\r\n\r\n    code: string = '#!/bin/bash\\n\\n# Add your custom build plan action here';\r\n    active?: BuildAction = undefined;\r\n    isScriptAction = false;\r\n\r\n    private _editor?: MonacoEditorComponent;\r\n\r\n    @ViewChild('editor', { static: false }) set editor(value: MonacoEditorComponent) {\r\n        this._editor = value;\r\n        if (this._editor) {\r\n            this.setupEditor();\r\n            this._editor.setText(this.code);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.programmingExerciseCreationConfig || changes.programmingExercise) {\r\n            if (this.shouldReloadTemplate()) {\r\n                const isImportFromFile = changes.programmingExerciseCreationConfig?.currentValue?.isImportFromFile ?? false;\r\n                this.loadAeolusTemplate(isImportFromFile);\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldReloadTemplate(): boolean {\r\n        return (\r\n            this.programmingExercise.programmingLanguage !== this.programmingLanguage ||\r\n            this.programmingExercise.projectType !== this.projectType ||\r\n            this.programmingExercise.staticCodeAnalysisEnabled !== this.staticCodeAnalysisEnabled ||\r\n            this.programmingExercise.buildConfig?.sequentialTestRuns !== this.sequentialTestRuns\r\n        );\r\n    }\r\n\r\n    /**\r\n     * In case the programming language or project type changes, we need to reset the template and the build plan\r\n     * @private\r\n     */\r\n    resetCustomBuildPlan() {\r\n        this.programmingExercise.buildConfig!.windfile = undefined;\r\n        this.programmingExercise.buildConfig!.buildPlanConfiguration = undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads the predefined template for the selected programming language and project type\r\n     * if there is one available.\r\n     * @param isImportFromFile whether the exercise is imported from a file\r\n     * @private\r\n     */\r\n    loadAeolusTemplate(isImportFromFile: boolean = false) {\r\n        if (this.programmingExercise?.id || isImportFromFile) {\r\n            if (!this.programmingExerciseCreationConfig.buildPlanLoaded && !this.programmingExercise.buildConfig?.windfile) {\r\n                if (this.programmingExercise.buildConfig?.buildPlanConfiguration) {\r\n                    this.programmingExercise.buildConfig!.windfile = this.aeolusService.parseWindFile(this.programmingExercise.buildConfig?.buildPlanConfiguration);\r\n                }\r\n                this.programmingExerciseCreationConfig.buildPlanLoaded = true;\r\n            }\r\n            return;\r\n        }\r\n        this.resetCustomBuildPlan();\r\n        if (!this.programmingExercise.programmingLanguage) {\r\n            return;\r\n        }\r\n        this.programmingLanguage = this.programmingExercise.programmingLanguage;\r\n        this.projectType = this.programmingExercise.projectType;\r\n        this.staticCodeAnalysisEnabled = this.programmingExercise.staticCodeAnalysisEnabled;\r\n        this.sequentialTestRuns = this.programmingExercise.buildConfig?.sequentialTestRuns;\r\n        if (!isImportFromFile || !this.programmingExercise.buildConfig?.windfile) {\r\n            this.aeolusService.getAeolusTemplateFile(this.programmingLanguage, this.projectType, this.staticCodeAnalysisEnabled, this.sequentialTestRuns).subscribe({\r\n                next: (file) => {\r\n                    this.programmingExercise.buildConfig!.windfile = this.aeolusService.parseWindFile(file);\r\n                },\r\n                error: () => {\r\n                    this.programmingExercise.buildConfig!.windfile = undefined;\r\n                },\r\n            });\r\n        }\r\n        this.programmingExerciseCreationConfig.buildPlanLoaded = true;\r\n    }\r\n\r\n    get editor(): MonacoEditorComponent | undefined {\r\n        return this._editor;\r\n    }\r\n\r\n    faQuestionCircle = faQuestionCircle;\r\n\r\n    protected getActionScript(action: string): string {\r\n        const foundAction: BuildAction | undefined = this.programmingExercise.buildConfig?.windfile?.actions.find((a) => a.name === action);\r\n        if (foundAction && foundAction instanceof ScriptAction) {\r\n            return (foundAction as ScriptAction).script;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    changeActiveAction(action: string): void {\r\n        if (!this.programmingExercise.buildConfig?.windfile) {\r\n            return;\r\n        }\r\n\r\n        this.code = this.getActionScript(action);\r\n        this.active = this.programmingExercise.buildConfig?.windfile.actions.find((a) => a.name === action);\r\n        this.isScriptAction = this.active instanceof ScriptAction;\r\n        if (this.isScriptAction && this.editor) {\r\n            this.editor.setText(this.code);\r\n        }\r\n    }\r\n\r\n    deleteAction(action: string): void {\r\n        if (this.programmingExercise.buildConfig?.windfile) {\r\n            this.programmingExercise.buildConfig!.windfile.actions = this.programmingExercise.buildConfig?.windfile.actions.filter((a) => a.name !== action);\r\n            if (this.active?.name === action) {\r\n                this.active = undefined;\r\n                this.code = '';\r\n            }\r\n        }\r\n    }\r\n\r\n    addAction(action: string): void {\r\n        if (this.programmingExercise.buildConfig?.windfile) {\r\n            const newAction = new ScriptAction();\r\n            newAction.script = '#!/bin/bash\\n\\n# Add your custom build plan action here\\n\\nexit 0';\r\n            newAction.name = action;\r\n            newAction.runAlways = false;\r\n            this.programmingExercise.buildConfig?.windfile.actions.push(newAction);\r\n            this.changeActiveAction(action);\r\n        }\r\n    }\r\n\r\n    addParameter(): void {\r\n        if (this.active) {\r\n            if (!this.active.parameters) {\r\n                this.active.parameters = new Map<string, string | boolean | number>();\r\n            }\r\n            this.active.parameters.set('newParameter' + this.active.parameters.size, 'newValue');\r\n        }\r\n    }\r\n\r\n    deleteParameter(key: string): void {\r\n        if (this.active && this.active.parameters) {\r\n            this.active.parameters.delete(key);\r\n        }\r\n    }\r\n\r\n    codeChanged(code: string): void {\r\n        if (this.active instanceof ScriptAction) {\r\n            (this.active as ScriptAction).script = code;\r\n        }\r\n    }\r\n\r\n    getParameterKeys(): string[] {\r\n        if (this.active && this.active.parameters) {\r\n            return Array.from(this.active.parameters.keys());\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getParameter(key: string): string | number | boolean {\r\n        return this.active?.parameters?.get(key) ?? '';\r\n    }\r\n\r\n    /**\r\n     * Sets up a monaco editor for the template or solution file.\r\n     */\r\n    setupEditor(): void {\r\n        if (!this._editor) {\r\n            return;\r\n        }\r\n        this._editor.changeModel('build-script.sh', '');\r\n    }\r\n\r\n    setDockerImage(dockerImage: string) {\r\n        if (!this.programmingExercise.buildConfig?.windfile || !this.programmingExercise.buildConfig?.windfile.metadata.docker) {\r\n            return;\r\n        }\r\n        this.programmingExercise.buildConfig!.windfile.metadata.docker.image = dockerImage.trim();\r\n    }\r\n}\r\n", "<div class=\"form-group\">\r\n    <div class=\"form-check custom-checkbox\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" name=\"customizeBuildPlan\" id=\"field_customizeBuildPlan\" [(ngModel)]=\"programmingExercise.customizeBuildPlanWithAeolus\" />\r\n        <label class=\"form-check-label custom-control-label\" for=\"field_customizeBuildPlan\" jhiTranslate=\"artemisApp.programmingExercise.customizeBuildPlanWithAeolus\"></label>\r\n        <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.customizeBuildPlansWithAeolusTooltip\" />\r\n    </div>\r\n    @if (programmingExercise.customizeBuildPlanWithAeolus) {\r\n        <div class=\"row m-1\">\r\n            @if (programmingExercise.buildConfig?.windfile && programmingExercise.buildConfig?.windfile?.metadata && programmingExercise.buildConfig?.windfile?.metadata?.docker) {\r\n                <jhi-programming-exercise-build-configuration\r\n                    [dockerImage]=\"programmingExercise.buildConfig!.windfile!.metadata.docker.image\"\r\n                    (dockerImageChange)=\"setDockerImage($event)\"\r\n                    [isAeolus]=\"true\"\r\n                />\r\n            }\r\n            <div class=\"col-3 col-md-3\">\r\n                <div class=\"d-flex flex-column h-100 justify-content-between\">\r\n                    <div class=\"list-group\">\r\n                        @for (action of this.programmingExercise.buildConfig?.windfile?.actions; track action) {\r\n                            <div class=\"list-group-item mb-1\" [ngClass]=\"{ active: active?.name === action.name }\" (click)=\"changeActiveAction(action.name)\">\r\n                                <div class=\"d-flex w-100 justify-content-between\">\r\n                                    <p class=\"mb-0\">{{ action.name }}</p>\r\n                                    <div>\r\n                                        <button type=\"button\" class=\"btn-close\" (click)=\"deleteAction(action.name)\" aria-label=\"Remove\"></button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" class=\"btn btn-primary\" (click)=\"addAction('new action')\">Add Action</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            @if (active) {\r\n                <div class=\"card p-0 col-9 col-md-9\">\r\n                    <div class=\"card-header\">\r\n                        <div class=\"form-group\">\r\n                            <input required type=\"text\" class=\"form-control\" name=\"actionName\" id=\"field_actionName\" [(ngModel)]=\"active.name\" />\r\n                            <input\r\n                                class=\"form-control mt-2\"\r\n                                type=\"text\"\r\n                                name=\"workdir\"\r\n                                id=\"field_workdir\"\r\n                                [placeholder]=\"'artemisApp.programmingExercise.workdir' | artemisTranslate\"\r\n                                [(ngModel)]=\"active.workdir\"\r\n                            />\r\n                            <div class=\"form-check mt-2\">\r\n                                @if (active) {\r\n                                    <label class=\"form-check-label\" for=\"field_alwaysrun\">\r\n                                        <input class=\"form-check-input\" type=\"checkbox\" name=\"runAlways\" id=\"field_alwaysrun\" [(ngModel)]=\"active.runAlways\" />\r\n                                        <label\r\n                                            class=\"form-check-label custom-control-label\"\r\n                                            for=\"field_alwaysrun\"\r\n                                            jhiTranslate=\"artemisApp.programmingExercise.runActionAlways\"\r\n                                        ></label>\r\n                                    </label>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <label jhiTranslate=\"artemisApp.programmingExercise.script\" class=\"m-2\"></label>\r\n                    <div class=\"card-text d-flex flex-column\" [style.height.vh]=\"40\">\r\n                        <div class=\"flex-grow-1 flex-shrink-1 mb-1 mh-100\">\r\n                            @if (isScriptAction) {\r\n                                <jhi-monaco-editor #editor [stickyScroll]=\"false\" [shrinkToFit]=\"false\" (textChanged)=\"codeChanged($event)\" />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnChanges, SimpleChanges, ViewChild, inject } from '@angular/core';\r\nimport { ProgrammingExercise, ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { AeolusService } from 'app/exercises/programming/shared/service/aeolus.service';\r\nimport { ProgrammingExerciseBuildConfigurationComponent } from 'app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-build-configuration/programming-exercise-build-configuration.component';\r\nimport { MonacoEditorComponent } from 'app/shared/monaco-editor/monaco-editor.component';\r\nimport { ASSIGNMENT_REPO_NAME, TEST_REPO_NAME } from 'app/shared/constants/input.constants';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-custom-build-plan',\r\n    templateUrl: './programming-exercise-custom-build-plan.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [FormsModule, TranslateDirective, HelpIconComponent, ProgrammingExerciseBuildConfigurationComponent, MonacoEditorComponent],\r\n})\r\nexport class ProgrammingExerciseCustomBuildPlanComponent implements OnChanges {\r\n    private aeolusService = inject(AeolusService);\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n    @Input() programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n\r\n    @ViewChild(ProgrammingExerciseBuildConfigurationComponent) programmingExerciseDockerImageComponent?: ProgrammingExerciseBuildConfigurationComponent;\r\n\r\n    programmingLanguage?: ProgrammingLanguage;\r\n    projectType?: ProjectType;\r\n    staticCodeAnalysisEnabled?: boolean;\r\n    sequentialTestRuns?: boolean;\r\n    isImportFromFile = false;\r\n\r\n    code: string = '#!/bin/bash\\n\\n# Add your custom build plan action here';\r\n    private _editor?: MonacoEditorComponent;\r\n\r\n    @ViewChild('editor', { static: false }) set editor(value: MonacoEditorComponent) {\r\n        this._editor = value;\r\n        if (this._editor) {\r\n            this.setupEditor();\r\n            if (this.programmingExercise.id || this.isImportFromFile) {\r\n                this.code = this.programmingExercise.buildConfig?.buildScript || '';\r\n            }\r\n            this._editor.setText(this.code);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.programmingExerciseCreationConfig || changes.programmingExercise) {\r\n            if (this.shouldReloadTemplate()) {\r\n                const isImportFromFile = changes.programmingExerciseCreationConfig?.currentValue?.isImportFromFile ?? false;\r\n                this.loadAeolusTemplate(isImportFromFile);\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldReloadTemplate(): boolean {\r\n        return (\r\n            !this.programmingExercise.id &&\r\n            (this.programmingExercise.programmingLanguage !== this.programmingLanguage ||\r\n                this.programmingExercise.projectType !== this.projectType ||\r\n                this.programmingExercise.staticCodeAnalysisEnabled !== this.staticCodeAnalysisEnabled ||\r\n                this.programmingExercise.buildConfig!.sequentialTestRuns !== this.sequentialTestRuns)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * In case the programming language or project type changes, we need to reset the template and the build plan\r\n     * @private\r\n     */\r\n    resetCustomBuildPlan() {\r\n        this.programmingExercise.buildConfig!.windfile = undefined;\r\n        this.programmingExercise.buildConfig!.buildPlanConfiguration = undefined;\r\n        this.programmingExercise.buildConfig!.buildScript = undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads the predefined template for the selected programming language and project type\r\n     * if there is one available.\r\n     * @param isImportFromFile whether the exercise is imported from a file\r\n     * @private\r\n     */\r\n    loadAeolusTemplate(isImportFromFile: boolean = false) {\r\n        if (!this.programmingExercise.programmingLanguage) {\r\n            return;\r\n        }\r\n        this.programmingLanguage = this.programmingExercise.programmingLanguage;\r\n        this.projectType = this.programmingExercise.projectType;\r\n        this.staticCodeAnalysisEnabled = this.programmingExercise.staticCodeAnalysisEnabled;\r\n        this.sequentialTestRuns = this.programmingExercise.buildConfig?.sequentialTestRuns;\r\n        this.isImportFromFile = isImportFromFile;\r\n        if (!isImportFromFile || !this.programmingExercise.buildConfig?.windfile) {\r\n            this.aeolusService.getAeolusTemplateFile(this.programmingLanguage, this.projectType, this.staticCodeAnalysisEnabled, this.sequentialTestRuns).subscribe({\r\n                next: (file) => {\r\n                    this.programmingExercise.buildConfig!.windfile = this.aeolusService.parseWindFile(file);\r\n                },\r\n                error: () => {\r\n                    this.programmingExercise.buildConfig!.windfile = undefined;\r\n                },\r\n            });\r\n        }\r\n        this.programmingExerciseCreationConfig.buildPlanLoaded = true;\r\n        if (!this.programmingExercise.buildConfig?.windfile) {\r\n            this.resetCustomBuildPlan();\r\n        }\r\n        if (!isImportFromFile || !this.programmingExercise.buildConfig?.buildScript) {\r\n            this.aeolusService.getAeolusTemplateScript(this.programmingLanguage, this.projectType, this.staticCodeAnalysisEnabled, this.sequentialTestRuns).subscribe({\r\n                next: (file: string) => {\r\n                    file = this.replacePlaceholders(file);\r\n                    this.codeChanged(file);\r\n                    this.editor?.setText(file);\r\n                },\r\n                error: () => {\r\n                    this.programmingExercise.buildConfig!.buildScript = undefined;\r\n                },\r\n            });\r\n        }\r\n        if (!this.programmingExercise.buildConfig?.buildScript) {\r\n            this.resetCustomBuildPlan();\r\n        }\r\n        if (!this.programmingExercise.buildConfig?.timeoutSeconds) {\r\n            this.programmingExercise.buildConfig!.timeoutSeconds = 0;\r\n        }\r\n    }\r\n\r\n    get editor(): MonacoEditorComponent | undefined {\r\n        return this._editor;\r\n    }\r\n\r\n    faQuestionCircle = faQuestionCircle;\r\n\r\n    codeChanged(code: string): void {\r\n        this.code = code;\r\n        this.editor?.setText(code);\r\n        this.programmingExercise.buildConfig!.buildScript = code;\r\n    }\r\n\r\n    /**\r\n     * Sets up the Monaco editor for the build plan script\r\n     */\r\n    setupEditor(): void {\r\n        if (!this._editor) {\r\n            return;\r\n        }\r\n        this._editor.changeModel('build-plan.sh', '');\r\n    }\r\n\r\n    setDockerImage(dockerImage: string) {\r\n        if (!this.programmingExercise.buildConfig?.windfile || !this.programmingExercise.buildConfig?.windfile.metadata.docker) {\r\n            return;\r\n        }\r\n        this.programmingExercise.buildConfig!.windfile.metadata.docker.image = dockerImage.trim();\r\n    }\r\n\r\n    setTimeout(timeout: number) {\r\n        this.programmingExercise.buildConfig!.timeoutSeconds = timeout;\r\n    }\r\n\r\n    replacePlaceholders(buildScript: string): string {\r\n        const assignmentRepoName = this.programmingExercise.buildConfig?.assignmentCheckoutPath || ASSIGNMENT_REPO_NAME;\r\n        const testRepoName = this.programmingExercise.buildConfig?.testCheckoutPath || TEST_REPO_NAME;\r\n        buildScript = buildScript.replaceAll('${studentParentWorkingDirectoryName}', assignmentRepoName);\r\n        buildScript = buildScript.replaceAll('${testWorkingDirectory}', testRepoName);\r\n        return buildScript;\r\n    }\r\n}\r\n", "<div class=\"form-group\">\r\n    <div class=\"form-check custom-checkbox\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" name=\"customizeBuildPlan\" id=\"field_customizeBuildPlan\" [(ngModel)]=\"programmingExercise.customizeBuildPlanWithAeolus\" />\r\n        <label class=\"form-check-label custom-control-label\" for=\"field_customizeBuildPlan\" jhiTranslate=\"artemisApp.programmingExercise.customizeBuildPlan\"></label>\r\n        <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.customizeBuildPlansWithAeolusTooltip\" />\r\n    </div>\r\n    @if (programmingExercise.customizeBuildPlanWithAeolus) {\r\n        <div class=\"row m-1\">\r\n            @if (programmingExercise.buildConfig?.windfile && programmingExercise.buildConfig?.windfile?.metadata && programmingExercise.buildConfig?.windfile?.metadata?.docker) {\r\n                <jhi-programming-exercise-build-configuration\r\n                    [programmingExercise]=\"programmingExercise\"\r\n                    [dockerImage]=\"programmingExercise.buildConfig!.windfile!.metadata.docker.image\"\r\n                    (dockerImageChange)=\"setDockerImage($event)\"\r\n                    [timeout]=\"programmingExercise.buildConfig!.timeoutSeconds === 0 ? 120 : programmingExercise.buildConfig!.timeoutSeconds!\"\r\n                    (timeoutChange)=\"setTimeout($event)\"\r\n                    [isAeolus]=\"false\"\r\n                />\r\n            }\r\n            <label jhiTranslate=\"artemisApp.programmingExercise.script\" class=\"mb-2\"></label>\r\n            <div class=\"ms-1 p-0 card col-12 col-md-12\">\r\n                <div class=\"card-text d-flex flex-column\" [style.height.vh]=\"40\">\r\n                    <div class=\"mh-100 flex-shrink-1 flex-grow-1\">\r\n                        <jhi-monaco-editor #editor [stickyScroll]=\"false\" [shrinkToFit]=\"false\" (textChanged)=\"codeChanged($event)\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TheiaService {\r\n    private http = inject(HttpClient);\r\n\r\n    private resourceUrl = 'api/programming/theia';\r\n\r\n    /**\r\n     * Fetches the theia images for the given programming language\r\n     * @param {ProgrammingLanguage} language\r\n     * @returns the theia images or undefined if no images are available for this language\r\n     */\r\n    getTheiaImages(language: ProgrammingLanguage): Observable<{ [key: string]: string } | undefined> {\r\n        return this.http.get<{ [key: string]: string }>(`${this.resourceUrl}/images`, {\r\n            params: {\r\n                language: language,\r\n            },\r\n        });\r\n    }\r\n}\r\n", "import { KeyValuePipe } from '@angular/common';\r\nimport { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ProgrammingExercise, ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { TheiaService } from 'app/exercises/programming/shared/service/theia.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-theia',\r\n    templateUrl: './programming-exercise-theia.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [FormsModule, KeyValuePipe, TranslateDirective],\r\n})\r\nexport class ProgrammingExerciseTheiaComponent implements OnChanges {\r\n    private theiaService = inject(TheiaService);\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n    @Input() programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n\r\n    programmingLanguage?: ProgrammingLanguage;\r\n    theiaImages = {};\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ((changes.programmingExerciseCreationConfig || changes.programmingExercise) && this.shouldReloadTemplate()) {\r\n            this.loadTheiaImages();\r\n        }\r\n    }\r\n\r\n    onTheiaImageChange(theiaImage: string) {\r\n        if (this.programmingExercise.buildConfig) {\r\n            this.programmingExercise.buildConfig.theiaImage = theiaImage;\r\n        }\r\n    }\r\n\r\n    shouldReloadTemplate(): boolean {\r\n        return this.programmingExercise.programmingLanguage !== this.programmingLanguage;\r\n    }\r\n\r\n    /**\r\n     * In case the programming language or project type changes, we need to reset the template and the build plan\r\n     * @private\r\n     */\r\n    resetImageSelection() {\r\n        if (this.programmingExercise.buildConfig) {\r\n            this.programmingExercise.buildConfig.theiaImage = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the predefined template for the selected programming language if there is one available.\r\n     * @private\r\n     */\r\n    loadTheiaImages() {\r\n        if (!this.programmingExercise || !this.programmingExercise.programmingLanguage) {\r\n            return;\r\n        }\r\n\r\n        this.programmingLanguage = this.programmingExercise.programmingLanguage;\r\n\r\n        this.theiaService.getTheiaImages(this.programmingLanguage).subscribe({\r\n            next: (images) => {\r\n                if (!images) {\r\n                    // Remove selection if no image is available\r\n                    this.theiaImages = {};\r\n                    this.resetImageSelection();\r\n                    return;\r\n                }\r\n\r\n                this.theiaImages = images;\r\n\r\n                // Set the first image as default if none is selected\r\n                if (this.programmingExercise && this.programmingExercise.buildConfig && !this.programmingExercise.buildConfig.theiaImage && Object.values(images).length > 0) {\r\n                    this.programmingExercise.buildConfig.theiaImage = Object.values(images).first() as string;\r\n                }\r\n            },\r\n            error: () => {\r\n                this.theiaImages = {};\r\n                this.resetImageSelection();\r\n            },\r\n        });\r\n    }\r\n}\r\n", "<div class=\"form-group\">\r\n    <select\r\n        #select=\"ngModel\"\r\n        required\r\n        class=\"form-select\"\r\n        [ngModel]=\"programmingExercise.buildConfig?.theiaImage\"\r\n        (ngModelChange)=\"onTheiaImageChange($event)\"\r\n        name=\"theiaImage\"\r\n        id=\"field_theiaImage\"\r\n    >\r\n        @for (item of theiaImages! | keyvalue; track item) {\r\n            <option [value]=\"item.value\">\r\n                {{ item.key }}\r\n            </option>\r\n        } @empty {\r\n            <option [value]=\"undefined\" disabled>\r\n                <div jhiTranslate=\"artemisApp.programmingExercise.theiaImage.noImageAvailable\"></div>\r\n            </option>\r\n        }\r\n    </select>\r\n</div>\r\n", "import { AfterViewChecked, AfterViewInit, Component, EventEmitter, Input, OnDestroy, ViewChild, input } from '@angular/core';\r\nimport { ProgrammingExercise, ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { PROFILE_AEOLUS, PROFILE_LOCALCI } from 'app/app.constants';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { ModePickerComponent } from 'app/exercises/shared/mode-picker/mode-picker.component';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { ProgrammingExerciseCustomAeolusBuildPlanComponent } from 'app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-custom-aeolus-build-plan.component';\r\nimport { ProgrammingExerciseCustomBuildPlanComponent } from 'app/exercises/programming/manage/update/update-components/custom-build-plans/programming-exercise-custom-build-plan.component';\r\nimport { ProgrammingExerciseTheiaComponent } from 'app/exercises/programming/manage/update/update-components/theia/programming-exercise-theia.component';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { APP_NAME_PATTERN_FOR_SWIFT } from 'app/shared/constants/input.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { RemoveKeysPipe } from 'app/shared/pipes/remove-keys.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-language',\r\n    templateUrl: './programming-exercise-language.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        FormsModule,\r\n        ModePickerComponent,\r\n        HelpIconComponent,\r\n        FaIconComponent,\r\n        ProgrammingExerciseTheiaComponent,\r\n        ProgrammingExerciseCustomBuildPlanComponent,\r\n        ProgrammingExerciseCustomAeolusBuildPlanComponent,\r\n        KeyValuePipe,\r\n        RemoveKeysPipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseLanguageComponent implements AfterViewChecked, AfterViewInit, OnDestroy {\r\n    readonly ProgrammingLanguage = ProgrammingLanguage;\r\n    readonly ProjectType = ProjectType;\r\n\r\n    @Input({ required: true }) programmingExercise: ProgrammingExercise;\r\n    @Input({ required: true }) programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n    isEditFieldDisplayedRecord = input.required<Record<ProgrammingExerciseInputField, boolean>>();\r\n\r\n    @ViewChild('select') selectLanguageField: NgModel;\r\n    @ViewChild('packageName') packageNameField?: NgModel;\r\n    @ViewChild(ProgrammingExerciseCustomAeolusBuildPlanComponent) programmingExerciseCustomAeolusBuildPlanComponent?: ProgrammingExerciseCustomAeolusBuildPlanComponent;\r\n    @ViewChild(ProgrammingExerciseCustomBuildPlanComponent) programmingExerciseCustomBuildPlanComponent?: ProgrammingExerciseCustomBuildPlanComponent;\r\n    @ViewChild(ProgrammingExerciseTheiaComponent) programmingExerciseTheiaComponent?: ProgrammingExerciseTheiaComponent;\r\n\r\n    formValid: boolean;\r\n    formValidChanges = new Subject<boolean>();\r\n\r\n    fieldSubscriptions: (Subscription | undefined)[] = [];\r\n\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    protected readonly PROFILE_LOCALCI = PROFILE_LOCALCI;\r\n    protected readonly PROFILE_AEOLUS = PROFILE_AEOLUS;\r\n\r\n    readonly DOCKER_REGISTRY_LINKS = {\r\n        ghcrLink: 'https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry',\r\n        dockerhubLink: 'https://hub.docker.com/',\r\n    };\r\n    readonly DOCUMENTATION_LINK = 'https://docs.artemis.cit.tum.de/user/exercises/programming.html';\r\n\r\n    protected readonly APP_NAME_PATTERN_FOR_SWIFT = APP_NAME_PATTERN_FOR_SWIFT;\r\n\r\n    ngAfterViewInit() {\r\n        this.fieldSubscriptions.push(this.selectLanguageField.valueChanges?.subscribe(() => setTimeout(() => this.calculateFormValid())));\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (!(this.packageNameField?.valueChanges as EventEmitter<string>)?.observed) {\r\n            this.fieldSubscriptions.push(this.packageNameField?.valueChanges?.subscribe(() => setTimeout(() => this.calculateFormValid())));\r\n        }\r\n\r\n        const dockerImageField =\r\n            this.programmingExerciseCustomBuildPlanComponent?.programmingExerciseDockerImageComponent?.dockerImageField() ??\r\n            this.programmingExerciseCustomAeolusBuildPlanComponent?.programmingExerciseDockerImageComponent?.dockerImageField();\r\n        if (!(dockerImageField?.valueChanges as EventEmitter<string>)?.observed) {\r\n            this.fieldSubscriptions.push(dockerImageField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        }\r\n\r\n        const timeoutField =\r\n            this.programmingExerciseCustomBuildPlanComponent?.programmingExerciseDockerImageComponent?.timeoutField() ??\r\n            this.programmingExerciseCustomAeolusBuildPlanComponent?.programmingExerciseDockerImageComponent?.timeoutField();\r\n        if (!(timeoutField?.valueChanges as EventEmitter<number>)?.observed) {\r\n            this.fieldSubscriptions.push(timeoutField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        for (const subscription of this.fieldSubscriptions) {\r\n            subscription?.unsubscribe();\r\n        }\r\n    }\r\n\r\n    calculateFormValid() {\r\n        const isPackageNameValid = this.isPackageNameValid();\r\n        const isCustomBuildPlanValid = this.isCustomBuildPlanValid();\r\n        this.formValid = Boolean((this.selectLanguageField.isDisabled || this.selectLanguageField.valid) && isPackageNameValid && isCustomBuildPlanValid);\r\n        this.formValidChanges.next(this.formValid);\r\n    }\r\n\r\n    isPackageNameValid(): boolean {\r\n        return Boolean(\r\n            !this.programmingExercise.programmingLanguage ||\r\n                !this.programmingExerciseCreationConfig.packageNameRequired ||\r\n                this.programmingExercise.projectType === ProjectType.XCODE ||\r\n                this.packageNameField?.isDisabled ||\r\n                this.packageNameField?.valid,\r\n        );\r\n    }\r\n\r\n    isCustomBuildPlanValid(): boolean {\r\n        if (!this.programmingExercise.customizeBuildPlanWithAeolus) {\r\n            return true;\r\n        }\r\n\r\n        if (this.programmingExerciseCreationConfig.customBuildPlansSupported === PROFILE_LOCALCI) {\r\n            return (\r\n                (this.programmingExerciseCustomBuildPlanComponent?.programmingExerciseDockerImageComponent?.dockerImageField()?.valid ?? false) &&\r\n                (this.programmingExerciseCustomBuildPlanComponent?.programmingExerciseDockerImageComponent?.timeoutField()?.valid ?? false)\r\n            );\r\n        }\r\n\r\n        if (this.programmingExerciseCreationConfig.customBuildPlansSupported === PROFILE_AEOLUS) {\r\n            return (\r\n                (this.programmingExerciseCustomAeolusBuildPlanComponent?.programmingExerciseDockerImageComponent?.dockerImageField()?.valid ?? false) &&\r\n                (this.programmingExerciseCustomAeolusBuildPlanComponent?.programmingExerciseDockerImageComponent?.timeoutField()?.valid ?? false)\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "<section>\r\n    <h3\r\n        jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.languageStepTitle\"\r\n        id=\"artemisApp.programmingExercise.wizardMode.detailedSteps.languageStepTitle\"\r\n    ></h3>\r\n    <p jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.languageStepMessage\"></p>\r\n    @if (isEditFieldDisplayedRecord().programmingLanguage) {\r\n        <div class=\"form-group\">\r\n            <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.programmingLanguage\" for=\"field_programmingLanguage\"></label>\r\n            <select\r\n                #select=\"ngModel\"\r\n                required\r\n                class=\"form-select\"\r\n                [ngModel]=\"programmingExerciseCreationConfig.selectedProgrammingLanguage\"\r\n                (ngModelChange)=\"select.model = programmingExerciseCreationConfig.onProgrammingLanguageChange($event)\"\r\n                name=\"programmingLanguage\"\r\n                id=\"field_programmingLanguage\"\r\n                [disabled]=\"programmingExerciseCreationConfig.isImportFromExistingExercise || !!programmingExercise.id || programmingExerciseCreationConfig.isImportFromFile\"\r\n            >\r\n                @for (supportedLanguage of programmingExerciseCreationConfig.supportedLanguages; track supportedLanguage) {\r\n                    <option [value]=\"supportedLanguage\" [jhiTranslate]=\"'artemisApp.ProgrammingLanguage.' + supportedLanguage\"></option>\r\n                }\r\n            </select>\r\n        </div>\r\n    }\r\n    @if (programmingExercise.programmingLanguage && programmingExerciseCreationConfig.projectTypes?.length && programmingExerciseCreationConfig.modePickerOptions) {\r\n        <div class=\"form-group mt-2\">\r\n            @if (isEditFieldDisplayedRecord().projectType) {\r\n                <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.projectType\" for=\"field_projectType\"> </label>\r\n                <jhi-mode-picker\r\n                    required\r\n                    [options]=\"programmingExerciseCreationConfig.modePickerOptions\"\r\n                    [value]=\"programmingExerciseCreationConfig.selectedProjectType\"\r\n                    (valueChange)=\"programmingExerciseCreationConfig.onProjectTypeChange($event!)\"\r\n                    [disabled]=\"programmingExerciseCreationConfig.isImportFromExistingExercise || programmingExerciseCreationConfig.isImportFromFile || !!programmingExercise.id\"\r\n                    name=\"projectType\"\r\n                    id=\"field_projectType\"\r\n                />\r\n            }\r\n            @if (\r\n                isEditFieldDisplayedRecord().withExemplaryDependency &&\r\n                !programmingExerciseCreationConfig.isImportFromExistingExercise &&\r\n                !programmingExerciseCreationConfig.isImportFromFile &&\r\n                !programmingExercise.id &&\r\n                programmingExercise.programmingLanguage === ProgrammingLanguage.JAVA &&\r\n                programmingExercise.projectType !== ProjectType.MAVEN_BLACKBOX\r\n            ) {\r\n                <div class=\"form-check mt-2\">\r\n                    <input\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        name=\"withDependencies\"\r\n                        id=\"field_with_dependencies\"\r\n                        [(ngModel)]=\"programmingExerciseCreationConfig.withDependencies\"\r\n                        (ngModelChange)=\"programmingExerciseCreationConfig.onWithDependenciesChanged($event)\"\r\n                        checked\r\n                    />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.withDependencies\"></span>\r\n                    <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.withDependenciesTooltip\" />\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().packageName) {\r\n        @if (programmingExercise.programmingLanguage === ProgrammingLanguage.EMPTY) {\r\n            <div>\r\n                <p>\r\n                    <fa-icon [icon]=\"faExclamationTriangle\" size=\"xl\" class=\"text-warning\" />\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.title\" [translateValues]=\"{ documentationLink: DOCUMENTATION_LINK }\"></span>\r\n                </p>\r\n                <ol>\r\n                    <li jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.setImage\" [translateValues]=\"DOCKER_REGISTRY_LINKS\"></li>\r\n                    <li>\r\n                        <p jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.buildScript.title\" class=\"mb-0\"></p>\r\n                        <ol>\r\n                            <li jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.buildScript.dependencies\"></li>\r\n                            <li jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.buildScript.runTests\"></li>\r\n                            <li\r\n                                jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.buildScript.moveResults\"\r\n                                [translateValues]=\"{ resultsDirectory: './results/' }\"\r\n                            ></li>\r\n                        </ol>\r\n                    </li>\r\n                    <li jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.pushExercise\" [translateValues]=\"{ checkoutDirectory: './assignment/' }\"></li>\r\n                    <li jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.pushSolution\"></li>\r\n                    <li jhiTranslate=\"artemisApp.programmingExercise.otherLanguageHints.pushTest\" [translateValues]=\"{ checkoutDirectory: './' }\"></li>\r\n                </ol>\r\n            </div>\r\n        }\r\n        @if (programmingExercise.programmingLanguage && programmingExerciseCreationConfig.packageNameRequired && programmingExercise.projectType !== ProjectType.XCODE) {\r\n            <div class=\"form-group\">\r\n                <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.packageName\" for=\"field_packageName\"></label>\r\n                <input\r\n                    required\r\n                    type=\"text\"\r\n                    [pattern]=\"programmingExerciseCreationConfig.packageNamePattern\"\r\n                    class=\"form-control\"\r\n                    name=\"packageName\"\r\n                    id=\"field_packageName\"\r\n                    [(ngModel)]=\"programmingExercise.packageName\"\r\n                    [readonly]=\"programmingExercise.id\"\r\n                    #packageName=\"ngModel\"\r\n                    [disabled]=\"programmingExerciseCreationConfig.isImportFromExistingExercise || !!programmingExercise.id || programmingExerciseCreationConfig.isImportFromFile\"\r\n                />\r\n                @for (e of packageName.errors! | keyvalue | removekeys: ['required']; track e) {\r\n                    @if (packageName.invalid && (packageName.dirty || packageName.touched)) {\r\n                        <div class=\"alert alert-danger\">\r\n                            @if (programmingExercise.projectType === ProjectType.MAVEN_BLACKBOX) {\r\n                                <div [jhiTranslate]=\"'artemisApp.exercise.form.packageName' + '.' + e.key + '.' + programmingExercise.programmingLanguage + '_BLACKBOX'\"></div>\r\n                            }\r\n                            @if (programmingExercise.projectType !== ProjectType.MAVEN_BLACKBOX) {\r\n                                <div [jhiTranslate]=\"'artemisApp.exercise.form.packageName' + '.' + e.key + '.' + programmingExercise.programmingLanguage\"></div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n        @if (programmingExercise.programmingLanguage === ProgrammingLanguage.SWIFT && programmingExercise.projectType === ProjectType.XCODE) {\r\n            <div class=\"form-group\">\r\n                <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.appName\" for=\"field_packageName\"></label>\r\n                <input\r\n                    required\r\n                    type=\"text\"\r\n                    [pattern]=\"APP_NAME_PATTERN_FOR_SWIFT\"\r\n                    class=\"form-control\"\r\n                    name=\"packageName\"\r\n                    id=\"field_appName\"\r\n                    [(ngModel)]=\"programmingExercise.packageName\"\r\n                    [readonly]=\"programmingExercise.id\"\r\n                    #packageName=\"ngModel\"\r\n                    [disabled]=\"programmingExerciseCreationConfig.isImportFromExistingExercise || !!programmingExercise.id || programmingExerciseCreationConfig.isImportFromFile\"\r\n                />\r\n                @for (e of packageName.errors! | keyvalue | removekeys: ['required']; track e) {\r\n                    @if (packageName.invalid && (packageName.dirty || packageName.touched)) {\r\n                        <div class=\"alert alert-danger\">\r\n                            <div [jhiTranslate]=\"'artemisApp.exercise.form.packageName' + '.' + e.key + '.' + programmingExercise.programmingLanguage\"></div>\r\n                        </div>\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n    }\r\n\r\n    <!-- Theia Image Selection -->\r\n    @if (programmingExercise.allowOnlineIde && programmingExercise.programmingLanguage) {\r\n        <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.theiaImage.title\"></label>\r\n        <jhi-programming-exercise-theia [programmingExercise]=\"programmingExercise\" [programmingExerciseCreationConfig]=\"programmingExerciseCreationConfig\" />\r\n    }\r\n\r\n    <!-- Static code analysis checkbox -->\r\n    @if (isEditFieldDisplayedRecord().enableStaticCodeAnalysis && programmingExercise.programmingLanguage && programmingExerciseCreationConfig.staticCodeAnalysisAllowed) {\r\n        <div>\r\n            <div class=\"form-check custom-control custom-checkbox\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    class=\"form-check-input custom-control-input\"\r\n                    id=\"field_staticCodeAnalysisEnabled\"\r\n                    name=\"staticCodeAnalysisEnabled\"\r\n                    [disabled]=\"\r\n                        !!programmingExercise.buildConfig?.sequentialTestRuns || (!programmingExerciseCreationConfig.isImportFromExistingExercise && !!programmingExercise.id)\r\n                    \"\r\n                    [(ngModel)]=\"programmingExercise.staticCodeAnalysisEnabled\"\r\n                    (change)=\"programmingExerciseCreationConfig.onStaticCodeAnalysisChanged()\"\r\n                />\r\n                <label\r\n                    class=\"form-check-label custom-control-label\"\r\n                    for=\"field_staticCodeAnalysisEnabled\"\r\n                    jhiTranslate=\"artemisApp.programmingExercise.enableStaticCodeAnalysis.title\"\r\n                >\r\n                    Enable Static Code Analysis</label\r\n                >\r\n                <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.enableStaticCodeAnalysis.description\" />\r\n            </div>\r\n        </div>\r\n    }\r\n    <!-- Sequential Test Runs checkbox\r\n    It would be very complicated to change the sequential test run feature after an exercise is created, which is why it can only be activated if the exercise was not yet created.-->\r\n    @if (isEditFieldDisplayedRecord().sequentialTestRuns && programmingExerciseCreationConfig.sequentialTestRunsAllowed) {\r\n        <div>\r\n            <div class=\"form-check custom-control custom-checkbox\">\r\n                <input\r\n                    class=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    name=\"sequentialTestRuns\"\r\n                    id=\"field_sequentialTestRuns\"\r\n                    [disabled]=\"!!programmingExercise.id || !!programmingExercise.staticCodeAnalysisEnabled\"\r\n                    [(ngModel)]=\"programmingExercise.buildConfig!.sequentialTestRuns\"\r\n                    checked\r\n                />\r\n                <label class=\"form-check-label custom-control-label\" for=\"field_sequentialTestRuns\" jhiTranslate=\"artemisApp.programmingExercise.sequentialTestRuns.title\">\r\n                    >Sequential Test Runs</label\r\n                >\r\n                <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.sequentialTestRuns.description\" />\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (!programmingExercise.id && programmingExercise.programmingLanguage && programmingExerciseCreationConfig.checkoutSolutionRepositoryAllowed) {\r\n        <div class=\"form-check\">\r\n            <label class=\"form-check-label\" for=\"field_checkoutSolutionRepository\">\r\n                <input\r\n                    #checkoutSolutionRepository=\"ngModel\"\r\n                    class=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    name=\"checkoutSolutionRepository\"\r\n                    id=\"field_checkoutSolutionRepository\"\r\n                    [(ngModel)]=\"programmingExercise.buildConfig!.checkoutSolutionRepository\"\r\n                />\r\n                <span jhiTranslate=\"artemisApp.programmingExercise.checkoutSolutionRepository.title\"></span>\r\n                <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.checkoutSolutionRepository.description\" />\r\n            </label>\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().customizeBuildScript) {\r\n        @if (programmingExerciseCreationConfig.customBuildPlansSupported === PROFILE_LOCALCI) {\r\n            <jhi-programming-exercise-custom-build-plan [programmingExercise]=\"programmingExercise\" [programmingExerciseCreationConfig]=\"this.programmingExerciseCreationConfig\" />\r\n        } @else if (programmingExerciseCreationConfig.customBuildPlansSupported === PROFILE_AEOLUS) {\r\n            <jhi-programming-exercise-custom-aeolus-build-plan\r\n                [programmingExercise]=\"programmingExercise\"\r\n                [programmingExerciseCreationConfig]=\"this.programmingExerciseCreationConfig\"\r\n            />\r\n        }\r\n    }\r\n</section>\r\n", "import { AfterContentInit, Component, Input, OnDestroy, ViewChild, inject, input, signal } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IncludedInOverallScore, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { IncludedInOverallScorePickerComponent } from 'app/exercises/shared/included-in-overall-score-picker/included-in-overall-score-picker.component';\r\nimport { PresentationScoreComponent } from 'app/exercises/shared/presentation-score/presentation-score.component';\r\nimport { GradingInstructionsDetailsComponent } from 'app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { SubmissionPolicyUpdateComponent } from 'app/exercises/shared/submission-policy/submission-policy-update.component';\r\nimport { ProgrammingExerciseLifecycleComponent } from 'app/exercises/programming/shared/lifecycle/programming-exercise-lifecycle.component';\r\nimport { ImportOptions } from 'app/types/programming-exercises';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CustomMinDirective } from 'app/shared/validators/custom-min-validator.directive';\r\nimport { CustomMaxDirective } from 'app/shared/validators/custom-max-validator.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbAlert, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-grading',\r\n    templateUrl: './programming-exercise-grading.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        IncludedInOverallScorePickerComponent,\r\n        FormsModule,\r\n        CustomMinDirective,\r\n        CustomMaxDirective,\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        SubmissionPolicyUpdateComponent,\r\n        NgbAlert,\r\n        HelpIconComponent,\r\n        ProgrammingExerciseLifecycleComponent,\r\n        GradingInstructionsDetailsComponent,\r\n        PresentationScoreComponent,\r\n        KeyValuePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseGradingComponent implements AfterContentInit, OnDestroy {\r\n    private translateService = inject(TranslateService);\r\n\r\n    protected readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    protected readonly AssessmentType = AssessmentType;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    private translationBasePath = 'artemisApp.programmingExercise.wizardMode.gradingLabels.';\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n    @Input() programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n    @Input() importOptions: ImportOptions;\r\n    isEditFieldDisplayedRecord = input.required<Record<ProgrammingExerciseInputField, boolean>>();\r\n\r\n    @ViewChild(SubmissionPolicyUpdateComponent) submissionPolicyUpdateComponent?: SubmissionPolicyUpdateComponent;\r\n    @ViewChild(ProgrammingExerciseLifecycleComponent) lifecycleComponent?: ProgrammingExerciseLifecycleComponent;\r\n    @ViewChild('maxScore') maxScoreField?: NgModel;\r\n    @ViewChild('bonusPoints') bonusPointsField?: NgModel;\r\n    @ViewChild('maxPenalty') maxPenaltyField?: NgModel;\r\n\r\n    formValidSignal = signal<boolean>(false);\r\n\r\n    formValid: boolean;\r\n    formEmpty: boolean;\r\n    formValidChanges = new Subject<boolean>();\r\n\r\n    inputFieldSubscriptions: (Subscription | undefined)[] = [];\r\n\r\n    editPolicyUrl: string;\r\n\r\n    ngAfterContentInit(): void {\r\n        this.inputFieldSubscriptions.push(this.maxScoreField?.valueChanges?.subscribe(() => this.calculateFormStatus()));\r\n        this.inputFieldSubscriptions.push(this.bonusPointsField?.valueChanges?.subscribe(() => this.calculateFormStatus()));\r\n        this.inputFieldSubscriptions.push(this.maxPenaltyField?.valueChanges?.subscribe(() => this.calculateFormStatus()));\r\n        this.inputFieldSubscriptions.push(this.submissionPolicyUpdateComponent?.form?.valueChanges?.subscribe(() => this.calculateFormStatus()));\r\n        this.inputFieldSubscriptions.push(this.lifecycleComponent?.formValidChanges?.subscribe(() => this.calculateFormStatus()));\r\n        this.setEditPolicyPageLink();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        for (const subscription of this.inputFieldSubscriptions) {\r\n            subscription?.unsubscribe();\r\n        }\r\n    }\r\n\r\n    calculateFormStatus() {\r\n        const newFormValidValue = Boolean(\r\n            this.maxScoreField?.valid &&\r\n                this.bonusPointsField?.valid &&\r\n                (this.maxPenaltyField?.valid || !this.programmingExercise.staticCodeAnalysisEnabled) &&\r\n                !this.submissionPolicyUpdateComponent?.invalid &&\r\n                this.lifecycleComponent?.formValid,\r\n        );\r\n\r\n        this.formValidSignal.set(newFormValidValue);\r\n        this.formValid = newFormValidValue;\r\n        this.formEmpty = this.lifecycleComponent?.formEmpty ?? false;\r\n        this.formValidChanges.next(this.formValid);\r\n    }\r\n\r\n    getGradingSummary() {\r\n        const summary = [];\r\n\r\n        if (!this.programmingExercise.maxPoints) {\r\n            return '';\r\n        }\r\n\r\n        const exerciseType = this.programmingExercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_AS_BONUS ? 'bonusExercise' : 'normalExercise';\r\n        const assessmentType = this.programmingExercise.assessmentType === AssessmentType.AUTOMATIC ? 'assessmentAutomatic' : 'assessmentSemiautomatic';\r\n        const replacements = {\r\n            exerciseType: this.translateService.instant(this.translationBasePath + exerciseType),\r\n            maxPoints: this.programmingExercise.maxPoints.toString(),\r\n            bonusPoints: (this.programmingExercise.bonusPoints ?? 0).toString(),\r\n            assessmentType: this.translateService.instant(this.translationBasePath + assessmentType),\r\n            submissionLimit: this.programmingExercise.submissionPolicy?.submissionLimit,\r\n            exceedingPenalty: this.programmingExercise.submissionPolicy?.exceedingPenalty,\r\n            maxPenalty: ((this.programmingExercise.maxPoints * (this.programmingExercise.maxStaticCodeAnalysisPenalty ?? 100)) / 100).toString(),\r\n        };\r\n\r\n        summary.push(this.translateService.instant(this.translationBasePath + 'points'));\r\n\r\n        if (this.programmingExercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED) {\r\n            summary.push(this.translateService.instant(this.translationBasePath + 'noBonus'));\r\n        } else if (this.programmingExercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n            summary.push(this.translateService.instant(this.translationBasePath + 'bonus'));\r\n        }\r\n\r\n        if (this.programmingExercise.assessmentType) {\r\n            summary.push(this.translateService.instant(this.translationBasePath + 'assessment'));\r\n        }\r\n\r\n        if (this.programmingExercise.submissionPolicy?.type === SubmissionPolicyType.LOCK_REPOSITORY) {\r\n            if (this.programmingExercise.submissionPolicy.submissionLimit) {\r\n                summary.push(this.translateService.instant(this.translationBasePath + 'lockedSubmission'));\r\n            }\r\n        } else if (this.programmingExercise.submissionPolicy?.type === SubmissionPolicyType.SUBMISSION_PENALTY) {\r\n            if (this.programmingExercise.submissionPolicy.submissionLimit && this.programmingExercise.submissionPolicy.exceedingPenalty) {\r\n                summary.push(this.translateService.instant(this.translationBasePath + 'penaltySubmission'));\r\n            }\r\n        } else {\r\n            summary.push(this.translateService.instant(this.translationBasePath + 'unrestrictedSubmission'));\r\n        }\r\n\r\n        if (this.programmingExercise.staticCodeAnalysisEnabled) {\r\n            summary.push(this.translateService.instant(this.translationBasePath + 'staticAnalysisEnabled'));\r\n        } else {\r\n            summary.push(this.translateService.instant(this.translationBasePath + 'staticAnalysisDisabled'));\r\n        }\r\n\r\n        return summary.map((s) => this.replacePlaceholders(s, replacements)).join(' ');\r\n    }\r\n\r\n    replacePlaceholders(stringWithPlaceholders: string, replacements: any) {\r\n        return stringWithPlaceholders.replace(/{(\\w+)}/g, (placeholderWithDelimiters, placeholderWithoutDelimiters) =>\r\n            this.replacePlaceholder(placeholderWithDelimiters, placeholderWithoutDelimiters, replacements),\r\n        );\r\n    }\r\n\r\n    replacePlaceholder(placeholderWithDelimiters: string, placeholderWithoutDelimiters: any, replacements: any) {\r\n        return Object.prototype.hasOwnProperty.call(replacements, placeholderWithoutDelimiters) ? replacements[placeholderWithoutDelimiters] : placeholderWithDelimiters;\r\n    }\r\n\r\n    private setEditPolicyPageLink(): void {\r\n        const linkParts = [\r\n            'course-management',\r\n            getCourseFromExercise(this.programmingExercise)?.id,\r\n            ...(this.programmingExercise?.exerciseGroup?.exam ? ['exams', this.programmingExercise.exerciseGroup.exam.id] : []),\r\n            'programming-exercises',\r\n            this.programmingExercise.id,\r\n            'grading',\r\n            'submission-policy',\r\n        ];\r\n        this.editPolicyUrl = linkParts.join('/');\r\n    }\r\n} /* istanbul ignore next */\r\n", "<section class=\"mb-5\">\r\n    <h3 jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.gradingStepTitle\" id=\"artemisApp.programmingExercise.wizardMode.detailedSteps.gradingStepTitle\"></h3>\r\n    <p jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.gradingStepMessage\"></p>\r\n    @if (isEditFieldDisplayedRecord().includeExerciseInCourseScoreCalculation) {\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.includedInOverallScore{{ programmingExercise.course ? 'Course' : 'Exam' }}Label\"></label>\r\n            <div>\r\n                <jhi-included-in-overall-score-picker [(includedInOverallScore)]=\"programmingExercise.includedInOverallScore\" [allowNotIncluded]=\"true\" />\r\n            </div>\r\n        </div>\r\n    }\r\n    <div class=\"row\">\r\n        @if (isEditFieldDisplayedRecord().points) {\r\n            <div class=\"col\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.points\" for=\"field_points\"></label>\r\n                    <input\r\n                        required\r\n                        type=\"number\"\r\n                        class=\"form-control\"\r\n                        [customMin]=\"1\"\r\n                        [customMax]=\"9999\"\r\n                        name=\"points\"\r\n                        id=\"field_points\"\r\n                        [(ngModel)]=\"programmingExercise.maxPoints\"\r\n                        #maxScore=\"ngModel\"\r\n                    />\r\n                    @if (maxScore?.invalid && (maxScore?.dirty || maxScore?.touched) && maxScore?.errors) {\r\n                        <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.exercise.pointsError\"></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (isEditFieldDisplayedRecord().bonusPoints) {\r\n            <div class=\"col\">\r\n                <div class=\"form-group\" [hidden]=\"programmingExercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY\">\r\n                    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.bonusPoints\" for=\"field_bonusPoints\"></label>\r\n                    <input\r\n                        type=\"number\"\r\n                        [required]=\"programmingExercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_COMPLETELY\"\r\n                        class=\"form-control\"\r\n                        [customMin]=\"0\"\r\n                        [customMax]=\"9999\"\r\n                        name=\"bonusPoints\"\r\n                        id=\"field_bonusPoints\"\r\n                        [(ngModel)]=\"programmingExercise.bonusPoints\"\r\n                        #bonusPoints=\"ngModel\"\r\n                    />\r\n                    @if (bonusPoints?.invalid && (bonusPoints?.dirty || bonusPoints?.touched) && bonusPoints?.errors) {\r\n                        <div\r\n                            class=\"alert alert-danger\"\r\n                            [hidden]=\"programmingExercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY\"\r\n                            jhiTranslate=\"artemisApp.exercise.bonusPointsError\"\r\n                        ></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (programmingExercise.staticCodeAnalysisEnabled) {\r\n        <div class=\"mt-2 mb-4\">\r\n            <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.maxStaticCodeAnalysisPenalty.title\" for=\"field_maxPenalty\"\r\n                >Max Static Code Analysis Penalty</label\r\n            >\r\n            <fa-icon\r\n                [icon]=\"faQuestionCircle\"\r\n                class=\"text-secondary\"\r\n                placement=\"auto\"\r\n                ngbTooltip=\"{{ 'artemisApp.programmingExercise.maxStaticCodeAnalysisPenalty.description' | artemisTranslate }}\"\r\n            />\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text\">%</span>\r\n                </div>\r\n                <input\r\n                    type=\"number\"\r\n                    [pattern]=\"programmingExerciseCreationConfig.maxPenaltyPattern\"\r\n                    class=\"form-control\"\r\n                    name=\"maxPenalty\"\r\n                    id=\"field_maxPenalty\"\r\n                    [(ngModel)]=\"programmingExercise.maxStaticCodeAnalysisPenalty\"\r\n                    #maxPenalty=\"ngModel\"\r\n                />\r\n            </div>\r\n            @for (error of maxPenalty.errors! | keyvalue; track error) {\r\n                @if (maxPenalty.invalid && (maxPenalty.dirty || maxPenalty.touched)) {\r\n                    <div class=\"alert alert-danger\">\r\n                        <div [jhiTranslate]=\"'artemisApp.exercise.form.maxPenalty' + '.' + error.key\"></div>\r\n                    </div>\r\n                }\r\n            }\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().submissionPolicy) {\r\n        <div class=\"form-group\">\r\n            <jhi-submission-policy-update\r\n                [editable]=\"!programmingExerciseCreationConfig.isEdit\"\r\n                [programmingExercise]=\"programmingExercise\"\r\n                (submissionPolicyTypeChange)=\"calculateFormStatus()\"\r\n            />\r\n            @if (programmingExerciseCreationConfig.isEdit) {\r\n                <ngb-alert [dismissible]=\"false\" [type]=\"'info'\">\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.editInGradingInformation\"></span>\r\n                    <a [href]=\"editPolicyUrl\">\r\n                        <span jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.goToGradingToEditInformation\"></span>\r\n                    </a>\r\n                </ngb-alert>\r\n            }\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().timeline) {\r\n        <div class=\"form-group\">\r\n            <div>\r\n                <label jhiTranslate=\"artemisApp.programmingExercise.timeline.timelineLabel\" for=\"timeline\"></label>\r\n                <jhi-help-icon placement=\"auto\" text=\"artemisApp.programmingExercise.timeline.timelineTooltip\" />\r\n            </div>\r\n            <jhi-programming-exercise-lifecycle\r\n                id=\"timeline\"\r\n                [exercise]=\"programmingExercise\"\r\n                [isExamMode]=\"programmingExerciseCreationConfig.isExamMode\"\r\n                [readOnly]=\"false\"\r\n                [importOptions]=\"importOptions\"\r\n                [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n            />\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().assessmentInstructions && programmingExercise.assessmentType === AssessmentType.SEMI_AUTOMATIC) {\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.assessmentInstructions\" for=\"gradingInstructions\"></label>\r\n            <jhi-grading-instructions-details id=\"gradingInstructions\" [exercise]=\"programmingExercise\" />\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().presentationScore) {\r\n        <jhi-presentation-score-checkbox [exercise]=\"programmingExercise\" />\r\n    }\r\n    @if (programmingExerciseCreationConfig.showSummary) {\r\n        <h6>{{ getGradingSummary() }}</h6>\r\n    }\r\n</section>\r\n", "export enum ProgrammingExerciseInputField {\r\n    // General section\r\n    TITLE = 'title',\r\n    CHANNEL_NAME = 'channelName',\r\n    SHORT_NAME = 'shortName',\r\n    EDIT_REPOSITORIES_CHECKOUT_PATH = 'editRepositoriesCheckoutPath',\r\n    ADD_AUXILIARY_REPOSITORY = 'addAuxiliaryRepository',\r\n    CATEGORIES = 'categories',\r\n\r\n    // Mode section\r\n    DIFFICULTY = 'difficulty',\r\n    PARTICIPATION_MODE = 'participationMode',\r\n    ALLOW_OFFLINE_IDE = 'allowOfflineIde',\r\n    ALLOW_ONLINE_CODE_EDITOR = 'allowOnlineCodeEditor',\r\n    ALLOW_ONLINE_IDE = 'allowOnlineIde',\r\n\r\n    // Language section\r\n    PROGRAMMING_LANGUAGE = 'programmingLanguage',\r\n    PROJECT_TYPE = 'projectType',\r\n    WITH_EXEMPLARY_DEPENDENCY = 'withExemplaryDependency',\r\n    PACKAGE_NAME = 'packageName',\r\n    ENABLE_STATIC_CODE_ANALYSIS = 'enableStaticCodeAnalysis',\r\n    SEQUENTIAL_TEST_RUNS = 'sequentialTestRuns',\r\n    CUSTOMIZE_BUILD_SCRIPT = 'customizeBuildScript',\r\n\r\n    // Problem section\r\n    PROBLEM_STATEMENT = 'problemStatement',\r\n    LINKED_COMPETENCIES = 'linkedCompetencies',\r\n\r\n    // Grading section\r\n    INCLUDE_EXERCISE_IN_COURSE_SCORE_CALCULATION = 'includeExerciseInCourseScoreCalculation',\r\n    POINTS = 'points',\r\n    BONUS_POINTS = 'bonusPoints',\r\n    SUBMISSION_POLICY = 'submissionPolicy',\r\n    TIMELINE = 'timeline',\r\n    RELEASE_DATE = 'releaseDate',\r\n    START_DATE = 'startDate',\r\n    DUE_DATE = 'dueDate',\r\n    RUN_TESTS_AFTER_DUE_DATE = 'runTestsAfterDueDate',\r\n    ASSESSMENT_DUE_DATE = 'assessmentDueDate',\r\n    EXAMPLE_SOLUTION_PUBLICATION_DATE = 'exampleSolutionPublicationDate',\r\n    COMPLAINT_ON_AUTOMATIC_ASSESSMENT = 'complaintOnAutomaticAssessment',\r\n    MANUAL_FEEDBACK_REQUESTS = 'manualFeedbackRequests',\r\n    SHOW_TEST_NAMES_TO_STUDENTS = 'showTestNamesToStudents',\r\n    INCLUDE_TESTS_INTO_EXAMPLE_SOLUTION = 'includeTestsIntoExampleSolution',\r\n    ASSESSMENT_INSTRUCTIONS = 'assessmentInstructions',\r\n    PRESENTATION_SCORE = 'presentationScore',\r\n    PLAGIARISM_CONTROL = 'plagiarismControl',\r\n}\r\n\r\nexport type InputFieldEditModeMapping = Record<ProgrammingExerciseInputField, boolean>;\r\n\r\nexport const IS_DISPLAYED_IN_SIMPLE_MODE: InputFieldEditModeMapping = {\r\n    // General section\r\n    title: true,\r\n    channelName: false,\r\n    shortName: false,\r\n    editRepositoriesCheckoutPath: false,\r\n    addAuxiliaryRepository: false,\r\n    categories: true,\r\n    // Mode section\r\n    difficulty: true,\r\n    participationMode: false,\r\n    allowOfflineIde: false,\r\n    allowOnlineCodeEditor: false,\r\n    allowOnlineIde: false, // refers to theia\r\n    // Language section\r\n    programmingLanguage: true,\r\n    projectType: false,\r\n    withExemplaryDependency: false,\r\n    packageName: true,\r\n    enableStaticCodeAnalysis: false,\r\n    sequentialTestRuns: false,\r\n    customizeBuildScript: false,\r\n    // Problem section\r\n    problemStatement: true,\r\n    linkedCompetencies: false,\r\n    // Grading section\r\n    includeExerciseInCourseScoreCalculation: true,\r\n    points: true,\r\n    bonusPoints: true,\r\n    submissionPolicy: false,\r\n    timeline: true,\r\n    releaseDate: true,\r\n    startDate: false,\r\n    dueDate: true,\r\n    runTestsAfterDueDate: false,\r\n    assessmentDueDate: true,\r\n    exampleSolutionPublicationDate: false,\r\n    complaintOnAutomaticAssessment: false,\r\n    manualFeedbackRequests: false,\r\n    showTestNamesToStudents: false,\r\n    includeTestsIntoExampleSolution: false,\r\n    assessmentInstructions: true,\r\n    presentationScore: false,\r\n    plagiarismControl: false,\r\n};\r\n", "import { Component, EventEmitter, Input, Output, input } from '@angular/core';\r\nimport { ProgrammingExercise, ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseEditableInstructionComponent } from 'app/exercises/programming/manage/instructions-editor/programming-exercise-editable-instruction.component';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { ProgrammingExerciseInstructionComponent } from 'app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component';\r\nimport { MarkdownEditorHeight } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbAlert } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompetencySelectionComponent } from 'app/shared/competency-selection/competency-selection.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-problem',\r\n    templateUrl: './programming-exercise-problem.component.html',\r\n    styleUrls: ['../../../programming-exercise-form.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        NgbAlert,\r\n        ProgrammingExerciseInstructionComponent,\r\n        ProgrammingExerciseEditableInstructionComponent,\r\n        CompetencySelectionComponent,\r\n        FormsModule,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseProblemComponent {\r\n    protected readonly ProgrammingLanguage = ProgrammingLanguage;\r\n    protected readonly ProjectType = ProjectType;\r\n    protected readonly AssessmentType = AssessmentType;\r\n    protected readonly MarkdownEditorHeight = MarkdownEditorHeight;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    @Input({ required: true }) programmingExerciseCreationConfig: ProgrammingExerciseCreationConfig;\r\n    isEditFieldDisplayedRecord = input.required<Record<ProgrammingExerciseInputField, boolean>>();\r\n\r\n    @Output() exerciseChange = new EventEmitter<ProgrammingExercise>();\r\n    @Output() problemStatementChange = new EventEmitter<string>();\r\n\r\n    programmingExercise: ProgrammingExercise;\r\n\r\n    @Input()\r\n    get exercise() {\r\n        return this.programmingExercise;\r\n    }\r\n\r\n    set exercise(exercise: ProgrammingExercise) {\r\n        this.programmingExercise = exercise;\r\n        this.exerciseChange.emit(this.programmingExercise);\r\n    }\r\n}\r\n", "<section>\r\n    <h3 jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.problemStepTitle\" id=\"artemisApp.programmingExercise.wizardMode.detailedSteps.problemStepTitle\"></h3>\r\n    <p jhiTranslate=\"artemisApp.programmingExercise.wizardMode.detailedSteps.problemStepMessage\"></p>\r\n    @if (isEditFieldDisplayedRecord().problemStatement) {\r\n        <div class=\"form-group\" id=\"field_problemStatement\" name=\"problemStatement\">\r\n            <label class=\"form-control-label\" for=\"field_problemStatement\" jhiTranslate=\"artemisApp.programmingExercise.problemStatement.title\"></label>\r\n            @if (programmingExerciseCreationConfig.isImportFromExistingExercise || programmingExerciseCreationConfig.isImportFromFile) {\r\n                <ngb-alert [dismissible]=\"false\">\r\n                    <span class=\"font-weight-bold\">\r\n                        {{ 'artemisApp.exercise.import.attention' | artemisTranslate }}\r\n                    </span>\r\n                    <span\r\n                        jhiTranslate=\"{{\r\n                            programmingExerciseCreationConfig.isImportFromExistingExercise\r\n                                ? 'artemisApp.exercise.import.markdownWarning'\r\n                                : 'artemisApp.exercise.import.embeddedFilesWarning'\r\n                        }}\"\r\n                    ></span>\r\n                </ngb-alert>\r\n            }\r\n            @if (programmingExerciseCreationConfig.isImportFromExistingExercise) {\r\n                <jhi-programming-exercise-instructions\r\n                    [exercise]=\"programmingExercise\"\r\n                    [participation]=\"programmingExercise.templateParticipation!\"\r\n                    [personalParticipation]=\"false\"\r\n                />\r\n            }\r\n            @if (\r\n                programmingExerciseCreationConfig.problemStatementLoaded &&\r\n                programmingExerciseCreationConfig.templateParticipationResultLoaded &&\r\n                !programmingExerciseCreationConfig.isImportFromExistingExercise\r\n            ) {\r\n                <jhi-programming-exercise-editable-instructions\r\n                    [participation]=\"programmingExercise.templateParticipation!\"\r\n                    [(exercise)]=\"exercise\"\r\n                    [initialEditorHeight]=\"MarkdownEditorHeight.MEDIUM\"\r\n                    [showStatus]=\"!!programmingExercise?.id\"\r\n                    [editMode]=\"!!programmingExercise?.id\"\r\n                    (hasUnsavedChanges)=\"programmingExerciseCreationConfig.hasUnsavedChanges = $event\"\r\n                    (instructionChange)=\"problemStatementChange.emit($event)\"\r\n                    [forceRender]=\"programmingExerciseCreationConfig.rerenderSubject\"\r\n                    class=\"form__editable-instructions\"\r\n                />\r\n            }\r\n        </div>\r\n    }\r\n    @if (isEditFieldDisplayedRecord().linkedCompetencies && !programmingExerciseCreationConfig.isExamMode) {\r\n        <div class=\"form-group\">\r\n            <jhi-competency-selection\r\n                id=\"competencies\"\r\n                [labelName]=\"'artemisApp.competency.link.title' | artemisTranslate\"\r\n                [labelTooltip]=\"'artemisApp.competency.link.exercise' | artemisTranslate\"\r\n                [(ngModel)]=\"programmingExercise.competencyLinks\"\r\n                name=\"competencyLinks\"\r\n            />\r\n        </div>\r\n    }\r\n</section>\r\n", "import { ActivatedRoute, Params } from '@angular/router';\r\nimport { AfterViewInit, Component, OnDestroy, OnInit, ViewChild, computed, effect, inject, signal } from '@angular/core';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { AlertService, AlertType } from 'app/core/util/alert.service';\r\nimport { ProgrammingExerciseBuildConfig } from 'app/entities/programming/programming-exercise-build.config';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ProgrammingExercise, ProgrammingLanguage, ProjectType, resetProgrammingForImport } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseService } from '../services/programming-exercise.service';\r\nimport { FileService } from 'app/shared/http/file.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { Exercise, IncludedInOverallScore, ValidationReason } from 'app/entities/exercise.model';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\nimport { ProgrammingLanguageFeatureService } from 'app/exercises/programming/shared/service/programming-language-feature/programming-language-feature.service';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport {\r\n    APP_NAME_PATTERN_FOR_SWIFT,\r\n    EXERCISE_TITLE_NAME_PATTERN,\r\n    EXERCISE_TITLE_NAME_REGEX,\r\n    INVALID_DIRECTORY_NAME_PATTERN,\r\n    INVALID_REPOSITORY_NAME_PATTERN,\r\n    MAX_PENALTY_PATTERN,\r\n    PACKAGE_NAME_PATTERN_FOR_DART,\r\n    PACKAGE_NAME_PATTERN_FOR_GO,\r\n    PACKAGE_NAME_PATTERN_FOR_JAVA_BLACKBOX,\r\n    PACKAGE_NAME_PATTERN_FOR_JAVA_KOTLIN,\r\n    PROGRAMMING_EXERCISE_SHORT_NAME_PATTERN,\r\n} from 'app/shared/constants/input.constants';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { ExerciseUpdateWarningService } from 'app/exercises/shared/exercise-update-warning/exercise-update-warning.service';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AuxiliaryRepository } from 'app/entities/programming/programming-exercise-auxiliary-repository-model';\r\nimport { SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport { ModePickerOption } from 'app/exercises/shared/mode-picker/mode-picker.component';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { ProgrammingExerciseCreationConfig } from 'app/exercises/programming/manage/update/programming-exercise-creation-config';\r\nimport { loadCourseExerciseCategories } from 'app/exercises/shared/course-exercises/course-utils';\r\nimport { PROFILE_AEOLUS, PROFILE_LOCALCI, PROFILE_THEIA } from 'app/app.constants';\r\nimport { AeolusService } from 'app/exercises/programming/shared/service/aeolus.service';\r\nimport { FormSectionStatus } from 'app/forms/form-status-bar/form-status-bar.component';\r\nimport { ProgrammingExerciseInformationComponent } from 'app/exercises/programming/manage/update/update-components/information/programming-exercise-information.component';\r\nimport { ProgrammingExerciseModeComponent } from 'app/exercises/programming/manage/update/update-components/mode/programming-exercise-mode.component';\r\nimport { ProgrammingExerciseLanguageComponent } from 'app/exercises/programming/manage/update/update-components/language/programming-exercise-language.component';\r\nimport { ProgrammingExerciseGradingComponent } from 'app/exercises/programming/manage/update/update-components/grading/programming-exercise-grading.component';\r\nimport { ExerciseUpdatePlagiarismComponent } from 'app/exercises/shared/plagiarism/exercise-update-plagiarism/exercise-update-plagiarism.component';\r\nimport { ImportOptions } from 'app/types/programming-exercises';\r\nimport { IS_DISPLAYED_IN_SIMPLE_MODE, ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { FormStatusBarComponent } from 'app/forms/form-status-bar/form-status-bar.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ProgrammingExerciseProblemComponent } from './update-components/problem/programming-exercise-problem.component';\r\nimport { FormFooterComponent } from 'app/forms/form-footer/form-footer.component';\r\n\r\nexport const LOCAL_STORAGE_KEY_IS_SIMPLE_MODE = 'isSimpleMode';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-update',\r\n    templateUrl: './programming-exercise-update.component.html',\r\n    styleUrls: ['../programming-exercise-form.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        FormStatusBarComponent,\r\n        FormsModule,\r\n        ProgrammingExerciseInformationComponent,\r\n        ProgrammingExerciseModeComponent,\r\n        ProgrammingExerciseLanguageComponent,\r\n        ProgrammingExerciseProblemComponent,\r\n        ProgrammingExerciseGradingComponent,\r\n        ExerciseUpdatePlagiarismComponent,\r\n        FormFooterComponent,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseUpdateComponent implements AfterViewInit, OnDestroy, OnInit {\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private modalService = inject(NgbModal);\r\n    private popupService = inject(ExerciseUpdateWarningService);\r\n    private courseService = inject(CourseManagementService);\r\n    private alertService = inject(AlertService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private fileService = inject(FileService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private translateService = inject(TranslateService);\r\n    private profileService = inject(ProfileService);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n    private programmingLanguageFeatureService = inject(ProgrammingLanguageFeatureService);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private aeolusService = inject(AeolusService);\r\n\r\n    protected readonly documentationType: DocumentationType = 'Programming';\r\n    protected readonly maxPenaltyPattern = MAX_PENALTY_PATTERN;\r\n    protected readonly invalidRepositoryNamePattern = INVALID_REPOSITORY_NAME_PATTERN;\r\n    protected readonly invalidDirectoryNamePattern = INVALID_DIRECTORY_NAME_PATTERN;\r\n    protected readonly shortNamePattern = PROGRAMMING_EXERCISE_SHORT_NAME_PATTERN;\r\n    private readonly packageNameRegexForJavaKotlin = RegExp(PACKAGE_NAME_PATTERN_FOR_JAVA_KOTLIN);\r\n    private readonly packageNameRegexForJavaBlackbox = RegExp(PACKAGE_NAME_PATTERN_FOR_JAVA_BLACKBOX);\r\n    private readonly appNameRegexForSwift = RegExp(APP_NAME_PATTERN_FOR_SWIFT);\r\n    private readonly packageNameRegexForGo = RegExp(PACKAGE_NAME_PATTERN_FOR_GO);\r\n    private readonly packageNameRegexForDart = RegExp(PACKAGE_NAME_PATTERN_FOR_DART);\r\n\r\n    @ViewChild(ProgrammingExerciseInformationComponent) exerciseInfoComponent?: ProgrammingExerciseInformationComponent;\r\n    @ViewChild(ProgrammingExerciseModeComponent) exerciseDifficultyComponent?: ProgrammingExerciseModeComponent;\r\n    @ViewChild(ProgrammingExerciseLanguageComponent) exerciseLanguageComponent?: ProgrammingExerciseLanguageComponent;\r\n    @ViewChild(ProgrammingExerciseGradingComponent) exerciseGradingComponent?: ProgrammingExerciseGradingComponent;\r\n    @ViewChild(ExerciseUpdatePlagiarismComponent) exercisePlagiarismComponent?: ExerciseUpdatePlagiarismComponent;\r\n\r\n    packageNamePattern = '';\r\n    isSimpleMode = signal<boolean>(true);\r\n    isAuxiliaryRepositoryInputValid = signal<boolean>(true);\r\n\r\n    isEditFieldDisplayedRecord = computed(() => {\r\n        const inputFieldEditModeMapping = IS_DISPLAYED_IN_SIMPLE_MODE;\r\n\r\n        const isEditFieldDisplayedMapping: Record<ProgrammingExerciseInputField, boolean> = {} as Record<ProgrammingExerciseInputField, boolean>;\r\n        Object.keys(inputFieldEditModeMapping).forEach((key) => {\r\n            let isDisplayed = true;\r\n            if (this.isSimpleMode() && !(this.isImportFromFile || this.isImportFromExistingExercise)) {\r\n                isDisplayed = inputFieldEditModeMapping[key as ProgrammingExerciseInputField];\r\n            }\r\n\r\n            isEditFieldDisplayedMapping[key as ProgrammingExerciseInputField] = isDisplayed;\r\n        });\r\n\r\n        return isEditFieldDisplayedMapping;\r\n    });\r\n\r\n    private translationBasePath = 'artemisApp.programmingExercise.';\r\n\r\n    programmingLanguageChanged = (language: ProgrammingLanguage) => this.onProgrammingLanguageChange(language);\r\n    withDependenciesChanged = (withDependencies: boolean) => this.onWithDependenciesChanged(withDependencies);\r\n    categoriesChanged = (categories: ExerciseCategory[]) => this.updateCategories(categories);\r\n    projectTypeChanged = (projectType: ProjectType) => this.onProjectTypeChange(projectType);\r\n    staticCodeAnalysisChanged = () => this.onStaticCodeAnalysisChanged();\r\n\r\n    auxiliaryRepositoryDuplicateNames: boolean;\r\n    auxiliaryRepositoryDuplicateDirectories: boolean;\r\n    auxiliaryRepositoryNamedCorrectly: boolean;\r\n    isImportFromExistingExercise: boolean;\r\n    isImportFromFile: boolean;\r\n    isEdit: boolean;\r\n    isCreate: boolean;\r\n    isExamMode: boolean;\r\n    isLocal: boolean;\r\n    hasUnsavedChanges = false;\r\n    programmingExercise: ProgrammingExercise;\r\n    backupExercise: ProgrammingExercise;\r\n    isSaving: boolean;\r\n    goBackAfterSaving = false;\r\n    problemStatementLoaded = false;\r\n    buildPlanLoaded = false;\r\n    templateParticipationResultLoaded = true;\r\n    notificationText?: string;\r\n    courseId: number;\r\n\r\n    rerenderSubject = new Subject<void>();\r\n    // This is used to revert the select if the user cancels to override the new selected programming language.\r\n    private selectedProgrammingLanguageValue: ProgrammingLanguage;\r\n    // This is used to revert the select if the user cancels to override the new selected project type.\r\n    private selectedProjectTypeValue?: ProjectType;\r\n\r\n    exerciseCategories: ExerciseCategory[];\r\n    existingCategories: ExerciseCategory[];\r\n\r\n    formStatusSections = signal<FormSectionStatus[]>([]);\r\n\r\n    inputFieldSubscriptions: (Subscription | undefined)[] = [];\r\n\r\n    public inProductionEnvironment: boolean;\r\n\r\n    public supportedLanguages = ['java'];\r\n\r\n    public packageNameRequired = true;\r\n    public staticCodeAnalysisAllowed = false;\r\n    public checkoutSolutionRepositoryAllowed = false;\r\n    public customizeBuildPlanWithAeolus = false;\r\n    public sequentialTestRunsAllowed = false;\r\n    public auxiliaryRepositoriesSupported = false;\r\n    auxiliaryRepositoriesValid = signal<boolean>(true);\r\n    public customBuildPlansSupported: string = '';\r\n    public theiaEnabled = false;\r\n\r\n    // Additional options for import\r\n    // This is a wrapper to allow modifications from the other subcomponents\r\n    public readonly importOptions: ImportOptions = {\r\n        recreateBuildPlans: false,\r\n        updateTemplate: false,\r\n        setTestCaseVisibilityToAfterDueDate: false,\r\n    };\r\n    public originalStaticCodeAnalysisEnabled: boolean | undefined;\r\n\r\n    public projectTypes?: ProjectType[] = [];\r\n    // flag describing if the template and solution projects should include a dependency\r\n    public withDependenciesValue = false;\r\n\r\n    public modePickerOptions?: ModePickerOption<ProjectType>[] = [];\r\n\r\n    constructor() {\r\n        effect(\r\n            function updateStatusBarSectionsWhenEditModeChanges() {\r\n                if (this.isSimpleMode()) {\r\n                    this.calculateFormStatusSections();\r\n                }\r\n            }.bind(this),\r\n        );\r\n\r\n        effect(\r\n            function initializeEditMode() {\r\n                const editModeRetrievedFromLocalStorage = localStorage.getItem(LOCAL_STORAGE_KEY_IS_SIMPLE_MODE);\r\n                if (editModeRetrievedFromLocalStorage) {\r\n                    this.isSimpleMode.set(editModeRetrievedFromLocalStorage === 'true');\r\n                } else {\r\n                    const DEFAULT_EDIT_MODE_IS_SIMPLE_MODE = true;\r\n                    this.isSimpleMode.set(DEFAULT_EDIT_MODE_IS_SIMPLE_MODE);\r\n                }\r\n            }.bind(this),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Updates the name of the editedAuxiliaryRepository.\r\n     *\r\n     * @param editedAuxiliaryRepository\r\n     */\r\n    updateRepositoryName(editedAuxiliaryRepository: AuxiliaryRepository) {\r\n        return (newValue: any) => {\r\n            editedAuxiliaryRepository.name = newValue;\r\n            this.refreshAuxiliaryRepositoryChecks();\r\n            return editedAuxiliaryRepository.name;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the checkoutDirectory name of the editedAuxiliaryRepository.\r\n     *\r\n     * @param editedAuxiliaryRepository\r\n     */\r\n    updateCheckoutDirectory(editedAuxiliaryRepository: AuxiliaryRepository) {\r\n        return (newValue: any) => {\r\n            editedAuxiliaryRepository.checkoutDirectory = newValue;\r\n            this.refreshAuxiliaryRepositoryChecks();\r\n            return editedAuxiliaryRepository.checkoutDirectory;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Refreshes auxiliary variables for auxiliary repository checks. Those variables are\r\n     * used in the template to display warnings.\r\n     */\r\n    refreshAuxiliaryRepositoryChecks() {\r\n        if (!this.programmingExercise?.auxiliaryRepositories) {\r\n            return;\r\n        }\r\n\r\n        let legalNameAndDirs = false;\r\n        // Check that there are no duplicate names.\r\n        const names = new Set<string | undefined>();\r\n        const auxReposWithName = this.programmingExercise.auxiliaryRepositories?.filter((auxiliaryRepository) => auxiliaryRepository.name);\r\n        auxReposWithName?.forEach((auxiliaryRepository) => {\r\n            names.add(auxiliaryRepository.name);\r\n            legalNameAndDirs ||= !this.invalidRepositoryNamePattern.test(auxiliaryRepository.name!);\r\n        });\r\n        this.auxiliaryRepositoryDuplicateNames = names.size !== auxReposWithName?.length;\r\n\r\n        // Check that there are no duplicate checkout directories\r\n        const directories = new Set<string | undefined>();\r\n        const auxReposWithDirectory = this.programmingExercise.auxiliaryRepositories!.filter((auxiliaryRepository) => auxiliaryRepository.checkoutDirectory);\r\n        auxReposWithDirectory.forEach((auxiliaryRepository) => {\r\n            directories.add(auxiliaryRepository.checkoutDirectory);\r\n            legalNameAndDirs ||= !this.invalidDirectoryNamePattern.test(auxiliaryRepository.checkoutDirectory!);\r\n        });\r\n        this.auxiliaryRepositoryDuplicateDirectories = directories.size !== auxReposWithDirectory.length;\r\n\r\n        // Check that there are no empty/incorrect repository names and directories\r\n        this.auxiliaryRepositoryNamedCorrectly = this.programmingExercise.auxiliaryRepositories!.length === auxReposWithName?.length && !legalNameAndDirs;\r\n\r\n        // Combining auxiliary variables to one to keep the template readable\r\n        this.auxiliaryRepositoriesValid.set(this.auxiliaryRepositoryNamedCorrectly && !this.auxiliaryRepositoryDuplicateNames && !this.auxiliaryRepositoryDuplicateDirectories);\r\n    }\r\n\r\n    /**\r\n     * Will also trigger loading the corresponding programming exercise language template.\r\n     *\r\n     * @param language to change to.\r\n     */\r\n    set selectedProgrammingLanguage(language: ProgrammingLanguage) {\r\n        const languageChanged = this.selectedProgrammingLanguageValue !== language;\r\n        this.selectedProgrammingLanguageValue = language;\r\n\r\n        const programmingLanguageFeature = this.programmingLanguageFeatureService.getProgrammingLanguageFeature(language)!;\r\n        this.packageNameRequired = programmingLanguageFeature?.packageNameRequired;\r\n        this.staticCodeAnalysisAllowed = programmingLanguageFeature.staticCodeAnalysis;\r\n        this.checkoutSolutionRepositoryAllowed = programmingLanguageFeature.checkoutSolutionRepositoryAllowed;\r\n        this.sequentialTestRunsAllowed = programmingLanguageFeature.sequentialTestRuns;\r\n        this.auxiliaryRepositoriesSupported = programmingLanguageFeature.auxiliaryRepositoriesSupported;\r\n        // filter out MAVEN_MAVEN and GRADLE_GRADLE because they are not directly selectable but only via a checkbox\r\n        this.projectTypes = programmingLanguageFeature.projectTypes?.filter((projectType) => projectType !== ProjectType.MAVEN_MAVEN && projectType !== ProjectType.GRADLE_GRADLE);\r\n        this.modePickerOptions = this.projectTypes?.map((projectType) => ({\r\n            value: projectType,\r\n            labelKey: 'artemisApp.programmingExercise.projectTypes.' + projectType.toString(),\r\n            btnClass: 'btn-secondary',\r\n        }));\r\n\r\n        if (languageChanged) {\r\n            // Reset project type when changing programming language as not all programming languages support (the same) project types\r\n            this.programmingExercise.projectType = this.projectTypes?.[0];\r\n            this.selectedProjectTypeValue = this.projectTypes?.[0];\r\n            this.withDependenciesValue = false;\r\n            this.buildPlanLoaded = false;\r\n            if (this.programmingExercise.buildConfig) {\r\n                this.programmingExercise.buildConfig.windfile = undefined;\r\n                this.programmingExercise.buildConfig.buildPlanConfiguration = undefined;\r\n            } else {\r\n                this.programmingExercise.buildConfig = new ProgrammingExerciseBuildConfig();\r\n            }\r\n            this.programmingExercise.customizeBuildPlanWithAeolus = language === ProgrammingLanguage.EMPTY;\r\n        }\r\n\r\n        // If we switch to another language which does not support static code analysis we need to reset options related to static code analysis\r\n        if (!this.staticCodeAnalysisAllowed) {\r\n            this.programmingExercise.staticCodeAnalysisEnabled = false;\r\n            this.programmingExercise.maxStaticCodeAnalysisPenalty = undefined;\r\n        }\r\n\r\n        if (language == ProgrammingLanguage.HASKELL || language == ProgrammingLanguage.OCAML) {\r\n            // Instructors typically test against the example solution for Haskell and OCAML exercises.\r\n            // If supported by the current CI configuration, this line activates the option per default.\r\n            this.programmingExercise.buildConfig!.checkoutSolutionRepository = this.checkoutSolutionRepositoryAllowed;\r\n        }\r\n        if (!this.checkoutSolutionRepositoryAllowed) {\r\n            this.programmingExercise.buildConfig!.checkoutSolutionRepository = false;\r\n        }\r\n\r\n        // Only load problem statement template when creating a new exercise and not when importing an existing exercise\r\n        if (this.programmingExercise.id === undefined && !this.isImportFromFile) {\r\n            this.loadProgrammingLanguageTemplate(language);\r\n            // Rerender the instructions as the template has changed.\r\n            this.rerenderSubject.next();\r\n        }\r\n    }\r\n\r\n    get selectedProgrammingLanguage() {\r\n        return this.selectedProgrammingLanguageValue;\r\n    }\r\n\r\n    /**\r\n     * Will also trigger loading the corresponding project type template.\r\n     *\r\n     * @param type to change to.\r\n     */\r\n    set selectedProjectType(type: ProjectType) {\r\n        // update the (selected) project type\r\n        this.updateProjectTypeSettings(type);\r\n\r\n        // Only load problem statement template when creating a new exercise and not when importing an existing exercise\r\n        if (this.programmingExercise.id === undefined && !this.isImportFromFile) {\r\n            this.loadProgrammingLanguageTemplate(this.programmingExercise.programmingLanguage!);\r\n            // Rerender the instructions as the template has changed.\r\n            this.rerenderSubject.next();\r\n        }\r\n    }\r\n\r\n    get selectedProjectType(): ProjectType | undefined {\r\n        return this.selectedProjectTypeValue;\r\n    }\r\n\r\n    private updateProjectTypeSettings(type: ProjectType) {\r\n        if (ProjectType.XCODE === type) {\r\n            // Disable Online Editor\r\n            this.programmingExercise.allowOnlineEditor = false;\r\n        } else if (ProjectType.FACT === type) {\r\n            // Disallow SCA for C (FACT)\r\n            this.disableStaticCodeAnalysis();\r\n        }\r\n\r\n        // update the project types for java programming exercises according to whether dependencies should be included\r\n        if (this.programmingExercise.programmingLanguage === ProgrammingLanguage.JAVA) {\r\n            const programmingLanguageFeature = this.programmingLanguageFeatureService.getProgrammingLanguageFeature(ProgrammingLanguage.JAVA)!;\r\n            if (type == ProjectType.MAVEN_BLACKBOX) {\r\n                this.selectedProjectTypeValue = ProjectType.MAVEN_BLACKBOX;\r\n                this.programmingExercise.projectType = ProjectType.MAVEN_BLACKBOX;\r\n                this.sequentialTestRunsAllowed = false;\r\n            } else if (type === ProjectType.PLAIN_MAVEN || type === ProjectType.MAVEN_MAVEN) {\r\n                this.selectedProjectTypeValue = ProjectType.PLAIN_MAVEN;\r\n                this.sequentialTestRunsAllowed = programmingLanguageFeature.sequentialTestRuns;\r\n                if (this.withDependenciesValue) {\r\n                    this.programmingExercise.projectType = ProjectType.MAVEN_MAVEN;\r\n                } else {\r\n                    this.programmingExercise.projectType = ProjectType.PLAIN_MAVEN;\r\n                }\r\n            } else {\r\n                this.selectedProjectTypeValue = ProjectType.PLAIN_GRADLE;\r\n                this.sequentialTestRunsAllowed = programmingLanguageFeature.sequentialTestRuns;\r\n                if (this.withDependenciesValue) {\r\n                    this.programmingExercise.projectType = ProjectType.GRADLE_GRADLE;\r\n                } else {\r\n                    this.programmingExercise.projectType = ProjectType.PLAIN_GRADLE;\r\n                }\r\n            }\r\n        } else {\r\n            this.selectedProjectTypeValue = type;\r\n            this.programmingExercise.projectType = type;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Only applies to Java programming exercises.\r\n     * Will also trigger loading the corresponding project type template.\r\n     * @param withDependencies whether the project should include a dependency\r\n     */\r\n    set withDependencies(withDependencies: boolean) {\r\n        this.withDependenciesValue = withDependencies;\r\n        this.selectedProjectType = this.programmingExercise.projectType!;\r\n    }\r\n\r\n    get withDependencies() {\r\n        return this.withDependenciesValue;\r\n    }\r\n\r\n    private disableStaticCodeAnalysis() {\r\n        this.programmingExercise.staticCodeAnalysisEnabled = false;\r\n        this.programmingExercise.maxStaticCodeAnalysisPenalty = undefined;\r\n    }\r\n\r\n    /**\r\n     * Sets the values for the creation/update of a programming exercise\r\n     */\r\n    ngOnInit() {\r\n        this.isSaving = false;\r\n        this.notificationText = undefined;\r\n        this.activatedRoute.data.subscribe(({ programmingExercise }) => {\r\n            this.programmingExercise = programmingExercise;\r\n            if (this.programmingExercise.buildConfig?.buildPlanConfiguration) {\r\n                this.programmingExercise.buildConfig!.windfile = this.aeolusService.parseWindFile(this.programmingExercise.buildConfig!.buildPlanConfiguration);\r\n            }\r\n            this.backupExercise = cloneDeep(this.programmingExercise);\r\n            this.selectedProgrammingLanguageValue = this.programmingExercise.programmingLanguage!;\r\n            if (this.programmingExercise.projectType === ProjectType.MAVEN_MAVEN) {\r\n                this.selectedProjectTypeValue = ProjectType.PLAIN_MAVEN;\r\n            } else if (this.programmingExercise.projectType === ProjectType.GRADLE_GRADLE) {\r\n                this.selectedProjectTypeValue = ProjectType.PLAIN_GRADLE;\r\n            } else {\r\n                this.selectedProjectTypeValue = this.programmingExercise.projectType!;\r\n            }\r\n        });\r\n\r\n        // If it is an import from this instance, just get the course, otherwise handle the edit and new cases\r\n        if (this.activatedRoute && this.activatedRoute.url) {\r\n            this.activatedRoute.url\r\n                .pipe(\r\n                    tap((segments) => {\r\n                        this.isImportFromExistingExercise = segments.some((segment) => segment.path === 'import');\r\n                        this.isImportFromFile = segments.some((segment) => segment.path === 'import-from-file');\r\n                        this.isEdit = segments.some((segment) => segment.path === 'edit');\r\n                        this.isCreate = segments.some((segment) => segment.path === 'new');\r\n                    }),\r\n                    switchMap(() => this.activatedRoute.params),\r\n                    tap((params) => {\r\n                        if (this.isImportFromFile) {\r\n                            this.createProgrammingExerciseForImportFromFile();\r\n                        }\r\n                        if (this.isImportFromExistingExercise) {\r\n                            this.createProgrammingExerciseForImport(params);\r\n                        } else {\r\n                            if (params['courseId'] && params['examId'] && params['exerciseGroupId']) {\r\n                                this.isExamMode = true;\r\n                                this.exerciseGroupService.find(params['courseId'], params['examId'], params['exerciseGroupId']).subscribe((res) => {\r\n                                    this.programmingExercise.exerciseGroup = res.body!;\r\n                                    if (!params['exerciseId'] && this.programmingExercise.exerciseGroup.exam?.course?.defaultProgrammingLanguage && !this.isImportFromFile) {\r\n                                        this.selectedProgrammingLanguage = this.programmingExercise.exerciseGroup.exam.course.defaultProgrammingLanguage;\r\n                                    }\r\n                                });\r\n                                // we need the course id  to make the request to the server if it's an import from file\r\n                                if (this.isImportFromFile) {\r\n                                    this.courseId = params['courseId'];\r\n                                    this.loadCourseExerciseCategories(params['courseId']);\r\n                                }\r\n                            } else if (params['courseId']) {\r\n                                this.courseId = params['courseId'];\r\n                                this.isExamMode = false;\r\n                                this.courseService.find(this.courseId).subscribe((res) => {\r\n                                    this.programmingExercise.course = res.body!;\r\n                                    if (!params['exerciseId'] && this.programmingExercise.course?.defaultProgrammingLanguage && !this.isImportFromFile) {\r\n                                        this.selectedProgrammingLanguage = this.programmingExercise.course.defaultProgrammingLanguage!;\r\n                                    }\r\n                                    this.exerciseCategories = this.programmingExercise.categories || [];\r\n\r\n                                    this.loadCourseExerciseCategories(this.programmingExercise.course!.id!);\r\n                                });\r\n                            }\r\n                        }\r\n                    }),\r\n                )\r\n                .subscribe();\r\n        }\r\n\r\n        // If an exercise is created, load our readme template so the problemStatement is not empty\r\n        this.selectedProgrammingLanguage = this.programmingExercise.programmingLanguage!;\r\n        if (this.programmingExercise.id || this.isImportFromFile) {\r\n            this.problemStatementLoaded = true;\r\n        }\r\n        // Select the correct pattern\r\n        this.setPackageNamePattern(this.selectedProgrammingLanguage);\r\n\r\n        // Checks if the current environment is production\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.inProductionEnvironment = profileInfo.inProduction;\r\n            }\r\n        });\r\n\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo?.activeProfiles.includes(PROFILE_LOCALCI)) {\r\n                this.customBuildPlansSupported = PROFILE_LOCALCI;\r\n                this.isLocal = true;\r\n            }\r\n            if (profileInfo?.activeProfiles.includes(PROFILE_AEOLUS)) {\r\n                this.customBuildPlansSupported = PROFILE_AEOLUS;\r\n            }\r\n            if (profileInfo?.activeProfiles.includes(PROFILE_THEIA)) {\r\n                this.theiaEnabled = true;\r\n            }\r\n        });\r\n        this.defineSupportedProgrammingLanguages();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.inputFieldSubscriptions.push(this.exerciseInfoComponent?.formValidChanges?.subscribe(() => this.calculateFormStatusSections()));\r\n        this.inputFieldSubscriptions.push(this.exerciseDifficultyComponent?.teamConfigComponent?.formValidChanges?.subscribe(() => this.calculateFormStatusSections()));\r\n        this.inputFieldSubscriptions.push(this.exerciseLanguageComponent?.formValidChanges?.subscribe(() => this.calculateFormStatusSections()));\r\n        this.inputFieldSubscriptions.push(this.exerciseGradingComponent?.formValidChanges?.subscribe(() => this.calculateFormStatusSections()));\r\n        this.inputFieldSubscriptions.push(this.exercisePlagiarismComponent?.formValidChanges?.subscribe(() => this.calculateFormStatusSections()));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        for (const subscription of this.inputFieldSubscriptions) {\r\n            subscription?.unsubscribe();\r\n        }\r\n    }\r\n\r\n    calculateFormStatusSections() {\r\n        const updatedFormStatusSections = [\r\n            {\r\n                title: 'artemisApp.programmingExercise.wizardMode.detailedSteps.generalInfoStepTitle',\r\n                valid: this.exerciseInfoComponent?.formValid ?? false,\r\n            },\r\n            {\r\n                title: 'artemisApp.programmingExercise.wizardMode.detailedSteps.difficultyStepTitle',\r\n                valid: (this.exerciseDifficultyComponent?.teamConfigComponent?.formValid && this.validIdeSelection()) ?? false,\r\n            },\r\n            {\r\n                title: 'artemisApp.programmingExercise.wizardMode.detailedSteps.languageStepTitle',\r\n                valid: (this.exerciseLanguageComponent?.formValid && this.validOnlineIdeSelection()) ?? false,\r\n            },\r\n            {\r\n                title: 'artemisApp.programmingExercise.wizardMode.detailedSteps.problemStepTitle',\r\n                valid: true,\r\n                empty: !this.programmingExercise.problemStatement,\r\n            },\r\n            {\r\n                title: 'artemisApp.programmingExercise.wizardMode.detailedSteps.gradingStepTitle',\r\n                valid: Boolean(\r\n                    this.exerciseGradingComponent?.formValid &&\r\n                        (this.isExamMode || !this.isEditFieldDisplayedRecord().plagiarismControl || this.exercisePlagiarismComponent?.formValid),\r\n                ),\r\n                empty: this.exerciseGradingComponent?.formEmpty,\r\n            },\r\n        ];\r\n\r\n        if (this.isSimpleMode()) {\r\n            // the mode section would only contain the difficulty in the simple mode,\r\n            // which is why the difficulty is moved to the general section instead\r\n            const MODE_SECTION_INDEX = 1;\r\n            updatedFormStatusSections.splice(MODE_SECTION_INDEX, MODE_SECTION_INDEX);\r\n        }\r\n\r\n        this.formStatusSections.set(updatedFormStatusSections);\r\n    }\r\n\r\n    /**\r\n     * Depending on the build environment not all project types might be supported. Per default the project type is currently set to {@link ProjectType.GRADLE_GRADLE}.\r\n     * This is also the case, even if {@link ProjectType.GRADLE_GRADLE} is not supported by the build environment.\r\n     *\r\n     * This method is called to ensure that a valid project type is selected from the simple mode, if the project type cannot be determined automatically, an error message is\r\n     * displayed to the user that indicates that the advanced mode should be used to define the project type.\r\n     */\r\n    private determineProjectTypeIfNotSelectedAndInSimpleMode() {\r\n        if (this.isSimpleMode() && this.isCreate && this.projectTypes) {\r\n            const selectedProjectType = this.programmingExercise.projectType;\r\n            const isInvalidProjectTypeSelected = selectedProjectType === undefined || !this.projectTypes.includes(selectedProjectType);\r\n            if (isInvalidProjectTypeSelected) {\r\n                if (this.projectTypes.includes(ProjectType.PLAIN_GRADLE)) {\r\n                    this.programmingExercise.projectType = ProjectType.PLAIN_GRADLE;\r\n                } else if (this.projectTypes.includes(ProjectType.PLAIN_MAVEN)) {\r\n                    this.programmingExercise.projectType = ProjectType.PLAIN_MAVEN;\r\n                } else {\r\n                    this.alertService.addErrorAlert('Could not automatically determine project type', 'artemisApp.exercise.errors.projectTypeCouldNotBeDetermined');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private defineSupportedProgrammingLanguages() {\r\n        this.supportedLanguages = [];\r\n\r\n        for (const programmingLanguage of Object.values(ProgrammingLanguage)) {\r\n            if (this.programmingLanguageFeatureService.supportsProgrammingLanguage(programmingLanguage)) {\r\n                this.supportedLanguages.push(programmingLanguage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadCourseExerciseCategories(courseId?: number) {\r\n        loadCourseExerciseCategories(courseId, this.courseService, this.exerciseService, this.alertService).subscribe((existingCategories) => {\r\n            this.existingCategories = existingCategories;\r\n        });\r\n\r\n        if (this.exerciseCategories === undefined) {\r\n            this.exerciseCategories = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups the programming exercise for import. The route determine whether the new exercise will be imported as an exam\r\n     * or a normal exercise.\r\n     *\r\n     * @param params given by ActivatedRoute\r\n     */\r\n    private createProgrammingExerciseForImport(params: Params) {\r\n        this.isImportFromExistingExercise = true;\r\n        this.originalStaticCodeAnalysisEnabled = this.programmingExercise.staticCodeAnalysisEnabled;\r\n        // The source exercise is injected via the Resolver. The route parameters determine the target exerciseGroup or course\r\n        const courseId = params['courseId'];\r\n        if (courseId && params['examId'] && params['exerciseGroupId']) {\r\n            this.exerciseGroupService.find(params['courseId'], params['examId'], params['exerciseGroupId']).subscribe((res) => {\r\n                this.programmingExercise.exerciseGroup = res.body!;\r\n                // Set course to undefined if a normal exercise is imported\r\n                this.programmingExercise.course = undefined;\r\n            });\r\n            this.isExamMode = true;\r\n        } else if (courseId) {\r\n            this.courseService.find(courseId).subscribe((res) => {\r\n                this.programmingExercise.course = res.body!;\r\n                // Set exerciseGroup to undefined if an exam exercise is imported\r\n                this.programmingExercise.exerciseGroup = undefined;\r\n            });\r\n            this.isExamMode = false;\r\n        }\r\n        this.loadCourseExerciseCategories(courseId);\r\n        resetProgrammingForImport(this.programmingExercise);\r\n\r\n        this.programmingExercise.projectKey = undefined;\r\n        if (this.programmingExercise.submissionPolicy) {\r\n            this.programmingExercise.submissionPolicy.id = undefined;\r\n        }\r\n        if (this.isExamMode && this.programmingExercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED) {\r\n            // Exam exercises cannot be not included into the total score. NOT_INCLUDED exercises will be converted to INCLUDED ones\r\n            this.programmingExercise.includedInOverallScore = IncludedInOverallScore.INCLUDED_COMPLETELY;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return to the exercise overview page\r\n     */\r\n    previousState() {\r\n        this.navigationUtilService.navigateBackFromExerciseUpdate(this.programmingExercise);\r\n    }\r\n\r\n    /**\r\n     * Updates the categories\r\n     * @param categories which should be set\r\n     */\r\n    updateCategories(categories: ExerciseCategory[]) {\r\n        this.programmingExercise.categories = categories;\r\n        this.exerciseCategories = categories;\r\n    }\r\n\r\n    save() {\r\n        const ref = this.popupService.checkExerciseBeforeUpdate(this.programmingExercise, this.backupExercise, this.isExamMode);\r\n        this.determineProjectTypeIfNotSelectedAndInSimpleMode();\r\n\r\n        if (!this.modalService.hasOpenModals()) {\r\n            this.saveExercise();\r\n        } else {\r\n            ref.then((reference) => {\r\n                reference.componentInstance.confirmed.subscribe(() => {\r\n                    this.saveExercise();\r\n                });\r\n                reference.componentInstance.reEvaluated.subscribe(() => {\r\n                    const requestOptions = {} as any;\r\n                    requestOptions.deleteFeedback = reference.componentInstance.deleteFeedback;\r\n                    this.subscribeToSaveResponse(this.programmingExerciseService.reevaluateAndUpdate(this.programmingExercise, requestOptions));\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the programming exercise with the provided input\r\n     */\r\n    saveExercise() {\r\n        // trim potential whitespaces that can lead to issues\r\n        if (this.programmingExercise.buildConfig!.windfile?.metadata?.docker?.image) {\r\n            this.programmingExercise.buildConfig!.windfile.metadata.docker.image = this.programmingExercise.buildConfig!.windfile.metadata.docker.image.trim();\r\n        }\r\n\r\n        if (this.programmingExercise.customizeBuildPlanWithAeolus || this.isImportFromFile) {\r\n            this.programmingExercise.buildConfig!.buildPlanConfiguration = this.aeolusService.serializeWindFile(this.programmingExercise.buildConfig!.windfile!);\r\n        } else {\r\n            this.programmingExercise.buildConfig!.buildPlanConfiguration = undefined;\r\n            this.programmingExercise.buildConfig!.windfile = undefined;\r\n        }\r\n\r\n        if (this.programmingExercise.buildConfig?.timeoutSeconds && this.programmingExercise.buildConfig?.timeoutSeconds < 1) {\r\n            this.programmingExercise.buildConfig!.timeoutSeconds = 0;\r\n        }\r\n\r\n        // If the programming exercise has a submission policy with a NONE type, the policy is removed altogether\r\n        if (this.programmingExercise.submissionPolicy && this.programmingExercise.submissionPolicy.type === SubmissionPolicyType.NONE) {\r\n            this.programmingExercise.submissionPolicy = undefined;\r\n        }\r\n\r\n        Exercise.sanitize(this.programmingExercise);\r\n\r\n        this.isSaving = true;\r\n\r\n        if (this.exerciseService.hasExampleSolutionPublicationDateWarning(this.programmingExercise)) {\r\n            this.alertService.addAlert({\r\n                type: AlertType.WARNING,\r\n                message: 'artemisApp.exercise.exampleSolutionPublicationDateWarning',\r\n            });\r\n        }\r\n\r\n        /*\r\n         If properties for an auxiliary repository were edited, the changes have to be done manually in the VCS and CIS.\r\n         Creating or deleting new auxiliary repositories works automatically and does not throw a warning.\r\n         We check that by verifying all \"current\" repositories with an ID (meaning they are not new) with their backup.\r\n         */\r\n        const changedAuxiliaryRepositoryProperties = this.programmingExercise.auxiliaryRepositories?.some((auxRepo) => {\r\n            // Ignore new auxiliary repositories\r\n            if (!auxRepo.id) return false;\r\n\r\n            // Verify unchanged properties for all existing auxiliary repositories\r\n            return this.backupExercise?.auxiliaryRepositories?.some((backupAuxRepo) => {\r\n                return backupAuxRepo.id === auxRepo.id && (backupAuxRepo.name !== auxRepo.name || backupAuxRepo.checkoutDirectory !== auxRepo.checkoutDirectory);\r\n            });\r\n        });\r\n        if (changedAuxiliaryRepositoryProperties && this.programmingExercise.id) {\r\n            this.alertService.addAlert({\r\n                type: AlertType.WARNING,\r\n                message: 'artemisApp.programmingExercise.auxiliaryRepository.editedWarning',\r\n            });\r\n        }\r\n        if (this.isImportFromFile) {\r\n            this.subscribeToSaveResponse(this.programmingExerciseService.importFromFile(this.programmingExercise, this.courseId));\r\n        } else if (this.isImportFromExistingExercise) {\r\n            this.subscribeToSaveResponse(this.programmingExerciseService.importExercise(this.programmingExercise, this.importOptions));\r\n        } else if (this.programmingExercise.id !== undefined) {\r\n            const requestOptions = {} as any;\r\n            if (this.notificationText) {\r\n                requestOptions.notificationText = this.notificationText;\r\n            }\r\n            this.subscribeToSaveResponse(this.programmingExerciseService.update(this.programmingExercise, requestOptions));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.programmingExerciseService.automaticSetup(this.programmingExercise));\r\n        }\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<ProgrammingExercise>>) {\r\n        result.subscribe({\r\n            next: (response: HttpResponse<ProgrammingExercise>) => {\r\n                this.onSaveSuccess(response.body!);\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.onSaveError(error);\r\n            },\r\n        });\r\n    }\r\n\r\n    private onSaveSuccess(exercise: ProgrammingExercise) {\r\n        this.isSaving = false;\r\n\r\n        if (this.goBackAfterSaving) {\r\n            this.navigationUtilService.navigateBack();\r\n\r\n            return;\r\n        }\r\n\r\n        this.navigationUtilService.navigateForwardFromExerciseUpdateOrCreation(exercise);\r\n    }\r\n\r\n    private onSaveError(error: HttpErrorResponse) {\r\n        let errorMessage;\r\n        let disableTranslation;\r\n        // Workaround for conflict error, since conflict errors do not have the 'X-artemisApp-alert' header\r\n        if (error.status === 409 && error.error && error.error['X-artemisApp-error'] === 'error.sourceExerciseInconsistent') {\r\n            errorMessage = 'artemisApp.consistencyCheck.error.programmingExerciseImportFailed';\r\n            disableTranslation = false;\r\n        } else {\r\n            errorMessage = error.headers.get('X-artemisApp-alert')!;\r\n            disableTranslation = true;\r\n        }\r\n        this.alertService.addAlert({\r\n            type: AlertType.DANGER,\r\n            message: errorMessage,\r\n            disableTranslation: disableTranslation,\r\n        });\r\n        this.isSaving = false;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    /**\r\n     * When setting the programming language, a change guard is triggered.\r\n     * This is because we want to reload the instructions template for a different language, but don't want the user to lose unsaved changes.\r\n     * If the user cancels the language will not be changed.\r\n     *\r\n     * @param language to switch to.\r\n     */\r\n    onProgrammingLanguageChange(language: ProgrammingLanguage) {\r\n        // If there are unsaved changes and the user does not confirm, the language doesn't get changed\r\n        if (this.hasUnsavedChanges) {\r\n            const confirmLanguageChangeText = this.translateService.instant(this.translationBasePath + 'unsavedChangesLanguageChange');\r\n            if (!window.confirm(confirmLanguageChangeText)) {\r\n                return this.selectedProgrammingLanguage;\r\n            }\r\n        }\r\n        // Select the correct pattern\r\n        this.setPackageNamePattern(language);\r\n        this.selectedProgrammingLanguage = language;\r\n        return language;\r\n    }\r\n\r\n    /**\r\n     * Sets the regex pattern for the package name for the selected programming language.\r\n     *\r\n     * @param language to choose from\r\n     * @param useBlackboxPattern whether to allow points in the regex\r\n     */\r\n    setPackageNamePattern(language: ProgrammingLanguage, useBlackboxPattern = false) {\r\n        switch (language) {\r\n            case ProgrammingLanguage.SWIFT:\r\n                this.packageNamePattern = APP_NAME_PATTERN_FOR_SWIFT;\r\n                break;\r\n            case ProgrammingLanguage.JAVA:\r\n            case ProgrammingLanguage.KOTLIN:\r\n                this.packageNamePattern = useBlackboxPattern ? PACKAGE_NAME_PATTERN_FOR_JAVA_BLACKBOX : PACKAGE_NAME_PATTERN_FOR_JAVA_KOTLIN;\r\n                break;\r\n            case ProgrammingLanguage.GO:\r\n                this.packageNamePattern = PACKAGE_NAME_PATTERN_FOR_GO;\r\n                break;\r\n            case ProgrammingLanguage.DART:\r\n                this.packageNamePattern = PACKAGE_NAME_PATTERN_FOR_DART;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When setting the project type, a change guard is triggered.\r\n     * This is because we want to reload the instructions template for a project type, but don't want the user to lose unsaved changes.\r\n     * If the user cancels the project type will not be changed.\r\n     *\r\n     * @param projectType to switch to.\r\n     */\r\n    onProjectTypeChange(projectType: ProjectType) {\r\n        // If there are unsaved changes and the user does not confirm, the language doesn't get changed\r\n        if (this.hasUnsavedChanges) {\r\n            const confirmLanguageChangeText = this.translateService.instant(this.translationBasePath + 'unsavedChangesProjectTypeChange');\r\n            if (!window.confirm(confirmLanguageChangeText)) {\r\n                return this.selectedProjectType;\r\n            }\r\n        }\r\n        this.selectedProjectType = projectType;\r\n        const useBlackboxPattern = projectType === ProjectType.MAVEN_BLACKBOX;\r\n        this.setPackageNamePattern(this.programmingExercise.programmingLanguage!, useBlackboxPattern);\r\n        return projectType;\r\n    }\r\n\r\n    onWithDependenciesChanged(withDependencies: boolean) {\r\n        this.withDependenciesValue = withDependencies;\r\n\r\n        return withDependencies;\r\n    }\r\n\r\n    onStaticCodeAnalysisChanged() {\r\n        // On import: If SCA mode changed, activate recreation of build plans and update of the template\r\n        if (this.isImportFromExistingExercise && this.programmingExercise.staticCodeAnalysisEnabled !== this.originalStaticCodeAnalysisEnabled) {\r\n            this.importOptions.recreateBuildPlans = true;\r\n            this.importOptions.updateTemplate = true;\r\n        }\r\n\r\n        if (!this.programmingExercise.staticCodeAnalysisEnabled) {\r\n            this.programmingExercise.maxStaticCodeAnalysisPenalty = undefined;\r\n        }\r\n    }\r\n\r\n    onRecreateBuildPlanOrUpdateTemplateChange() {\r\n        if (!this.importOptions.recreateBuildPlans || !this.importOptions.updateTemplate) {\r\n            this.programmingExercise.staticCodeAnalysisEnabled = this.originalStaticCodeAnalysisEnabled;\r\n        }\r\n\r\n        if (!this.programmingExercise.staticCodeAnalysisEnabled) {\r\n            this.programmingExercise.maxStaticCodeAnalysisPenalty = undefined;\r\n        }\r\n    }\r\n\r\n    switchEditMode = () => {\r\n        this.isSimpleMode.update((isSimpleMode) => !isSimpleMode);\r\n        localStorage.setItem(LOCAL_STORAGE_KEY_IS_SIMPLE_MODE, JSON.stringify(this.isSimpleMode()));\r\n    };\r\n\r\n    /**\r\n     * Change the selected programming language for the current exercise. If there are unsaved changes, the user\r\n     * will see a confirmation dialog about switching to a new template\r\n     *\r\n     * @param language The new programming language\r\n     */\r\n    private loadProgrammingLanguageTemplate(language: ProgrammingLanguage) {\r\n        // Otherwise, just change the language and load the new template\r\n        this.hasUnsavedChanges = false;\r\n        this.problemStatementLoaded = false;\r\n        this.programmingExercise.programmingLanguage = language;\r\n        this.fileService.getTemplateFile(this.programmingExercise.programmingLanguage, this.programmingExercise.projectType).subscribe({\r\n            next: (file) => {\r\n                this.programmingExercise.problemStatement = file;\r\n                this.problemStatementLoaded = true;\r\n            },\r\n            error: () => {\r\n                this.programmingExercise.problemStatement = '';\r\n                this.problemStatementLoaded = true;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * checking if at least one of Online Editor, Offline Ide, or Online Ide is selected\r\n     */\r\n    validIdeSelection = () => {\r\n        if (this.theiaEnabled) {\r\n            return this.programmingExercise?.allowOnlineEditor || this.programmingExercise?.allowOfflineIde || this.programmingExercise?.allowOnlineIde;\r\n        } else {\r\n            return this.programmingExercise?.allowOnlineEditor || this.programmingExercise?.allowOfflineIde;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checking if the online IDE is selected and a valid image is selected\r\n     */\r\n    validOnlineIdeSelection = () => {\r\n        return !this.programmingExercise?.allowOnlineIde || this.programmingExercise?.buildConfig!.theiaImage !== undefined;\r\n    };\r\n\r\n    isEventInsideTextArea(event: Event): boolean {\r\n        if (event.target instanceof Element) {\r\n            return event.target.tagName === 'TEXTAREA';\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get a list of all reasons that describe why the current input to update is invalid\r\n     */\r\n    getInvalidReasons(): ValidationReason[] {\r\n        const validationErrorReasons: ValidationReason[] = [];\r\n\r\n        this.validateExerciseTitle(validationErrorReasons);\r\n        this.validateExerciseChannelName(validationErrorReasons);\r\n        this.validateExerciseShortName(validationErrorReasons);\r\n        this.validateExerciseAuxiliaryRepositories(validationErrorReasons);\r\n        this.validateExercisePackageName(validationErrorReasons);\r\n        this.validateExerciseIdeSelection(validationErrorReasons);\r\n        this.validateExerciseOnlineIdeSelection(validationErrorReasons);\r\n        this.validateExercisePoints(validationErrorReasons);\r\n        this.validateExerciseBonusPoints(validationErrorReasons);\r\n        this.validateExerciseSCAMaxPenalty(validationErrorReasons);\r\n        this.validateExerciseSubmissionLimit(validationErrorReasons);\r\n        this.validateTimeout(validationErrorReasons);\r\n        this.validateCheckoutPaths(validationErrorReasons);\r\n\r\n        return validationErrorReasons;\r\n    }\r\n\r\n    private validateExerciseTitle(validationErrorReasons: ValidationReason[]): void {\r\n        if (this.programmingExercise.title === undefined || this.programmingExercise.title === '') {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.title.undefined',\r\n                translateValues: {},\r\n            });\r\n        } else if (!EXERCISE_TITLE_NAME_REGEX.test(this.programmingExercise.title)) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.title.pattern',\r\n                translateValues: {},\r\n            });\r\n        } else if (this.exerciseInfoComponent?.titleComponent?.titleChannelNameComponent?.field_title?.control?.errors?.disallowedValue) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.title.disallowedValue',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseChannelName(validationErrorReasons: ValidationReason[]): void {\r\n        if (this.programmingExercise.channelName === '') {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.channelName.empty',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseShortName(validationErrorReasons: ValidationReason[]): void {\r\n        if (this.programmingExercise.shortName === undefined || this.programmingExercise.shortName === '') {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.shortName.undefined',\r\n                translateValues: {},\r\n            });\r\n        } else if (this.exerciseInfoComponent?.shortNameField()?.control?.errors?.disallowedValue) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.title.disallowedValue',\r\n                translateValues: {},\r\n            });\r\n        } else {\r\n            if (this.programmingExercise.shortName.length < 3) {\r\n                validationErrorReasons.push({\r\n                    translateKey: 'artemisApp.exercise.form.shortName.minlength',\r\n                    translateValues: {},\r\n                });\r\n            }\r\n            const shortNamePatternMatch = this.programmingExercise.shortName.match(this.shortNamePattern);\r\n            if (shortNamePatternMatch === null || shortNamePatternMatch.length === 0) {\r\n                validationErrorReasons.push({\r\n                    translateKey: 'artemisApp.exercise.form.shortName.pattern',\r\n                    translateValues: {},\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private validateExercisePoints(validationErrorReasons: ValidationReason[]): void {\r\n        if (this.programmingExercise.maxPoints === undefined) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.points.undefined',\r\n                translateValues: {},\r\n            });\r\n        } else if (this.programmingExercise.maxPoints < 1) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.points.customMin',\r\n                translateValues: {},\r\n            });\r\n        } else if (this.programmingExercise.maxPoints > 9999) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.points.customMax',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseBonusPoints(validationErrorReasons: ValidationReason[]) {\r\n        if (this.programmingExercise.bonusPoints === undefined || typeof this.programmingExercise.bonusPoints !== 'number') {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.bonusPoints.undefined',\r\n                translateValues: {},\r\n            });\r\n        } else if (this.programmingExercise.bonusPoints! < 0) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.bonusPoints.customMin',\r\n                translateValues: {},\r\n            });\r\n        } else if (this.programmingExercise.bonusPoints! > 9999) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.bonusPoints.customMax',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseSCAMaxPenalty(validationErrorReasons: ValidationReason[]) {\r\n        const maxStaticCodeAnalysisPenaltyPatternMatch = this.programmingExercise.maxStaticCodeAnalysisPenalty?.toString().match(this.maxPenaltyPattern);\r\n        if (maxStaticCodeAnalysisPenaltyPatternMatch === null || maxStaticCodeAnalysisPenaltyPatternMatch?.length === 0) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.maxPenalty.pattern',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExercisePackageName(validationErrorReasons: ValidationReason[]): void {\r\n        let regex;\r\n        switch (this.programmingExercise.programmingLanguage) {\r\n            case ProgrammingLanguage.JAVA:\r\n                if (this.programmingExercise.projectType === ProjectType.MAVEN_BLACKBOX) {\r\n                    regex = this.packageNameRegexForJavaBlackbox;\r\n                } else {\r\n                    regex = this.packageNameRegexForJavaKotlin;\r\n                }\r\n                break;\r\n            case ProgrammingLanguage.KOTLIN:\r\n                regex = this.packageNameRegexForJavaKotlin;\r\n                break;\r\n            case ProgrammingLanguage.SWIFT:\r\n                regex = this.appNameRegexForSwift;\r\n                break;\r\n            case ProgrammingLanguage.GO:\r\n                regex = this.packageNameRegexForGo;\r\n                break;\r\n            case ProgrammingLanguage.DART:\r\n                regex = this.packageNameRegexForDart;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        if (this.programmingExercise.packageName === undefined || this.programmingExercise.packageName === '') {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.exercise.form.packageName.undefined',\r\n                translateValues: {},\r\n            });\r\n            return;\r\n        }\r\n\r\n        const packageNameDoesMatch = regex.test(this.programmingExercise.packageName);\r\n        if (!packageNameDoesMatch) {\r\n            const translateKey =\r\n                this.programmingExercise.projectType === ProjectType.MAVEN_BLACKBOX\r\n                    ? `artemisApp.exercise.form.packageName.pattern.${this.programmingExercise.programmingLanguage}_BLACKBOX`\r\n                    : `artemisApp.exercise.form.packageName.pattern.${this.programmingExercise.programmingLanguage}`;\r\n            validationErrorReasons.push({\r\n                translateKey,\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseSubmissionLimit(validationErrorReasons: ValidationReason[]): void {\r\n        // verifying submission limit value\r\n        if (this.programmingExercise.submissionPolicy !== undefined && this.programmingExercise.submissionPolicy.type !== SubmissionPolicyType.NONE) {\r\n            const submissionLimit = this.programmingExercise.submissionPolicy?.submissionLimit;\r\n            if (submissionLimit === undefined || typeof submissionLimit !== 'number') {\r\n                validationErrorReasons.push({\r\n                    translateKey: 'artemisApp.programmingExercise.submissionPolicy.submissionLimitWarning.required',\r\n                    translateValues: {},\r\n                });\r\n            } else if (submissionLimit < 1 || submissionLimit > 500 || submissionLimit % 1 !== 0) {\r\n                validationErrorReasons.push({\r\n                    translateKey: 'artemisApp.programmingExercise.submissionPolicy.submissionLimitWarning.pattern',\r\n                    translateValues: {},\r\n                });\r\n            }\r\n        }\r\n\r\n        // verifying exceeding submission limit penalty\r\n        if (this.programmingExercise.submissionPolicy?.type === SubmissionPolicyType.SUBMISSION_PENALTY) {\r\n            const exceedingPenalty = this.programmingExercise.submissionPolicy?.exceedingPenalty;\r\n            if (exceedingPenalty === undefined || typeof exceedingPenalty !== 'number') {\r\n                validationErrorReasons.push({\r\n                    translateKey: 'artemisApp.programmingExercise.submissionPolicy.submissionPenalty.penaltyInputFieldValidationWarning.required',\r\n                    translateValues: {},\r\n                });\r\n            } else if (exceedingPenalty <= 0) {\r\n                validationErrorReasons.push({\r\n                    translateKey: 'artemisApp.programmingExercise.submissionPolicy.submissionPenalty.penaltyInputFieldValidationWarning.pattern',\r\n                    translateValues: {},\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private validateExerciseAuxiliaryRepositories(validationErrorReasons: ValidationReason[]): void {\r\n        if (!this.auxiliaryRepositoriesValid()) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.programmingExercise.auxiliaryRepository.error',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseIdeSelection(validationErrorReasons: ValidationReason[]): void {\r\n        if (!this.validIdeSelection()) {\r\n            const translateKey = this.theiaEnabled ? 'artemisApp.programmingExercise.allowOnlineEditor.alert' : 'artemisApp.programmingExercise.allowOnlineEditor.alertNoTheia';\r\n            validationErrorReasons.push({\r\n                translateKey: translateKey,\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateExerciseOnlineIdeSelection(validationErrorReasons: ValidationReason[]): void {\r\n        if (!this.validOnlineIdeSelection()) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.programmingExercise.theiaImage.alert',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateTimeout(validationErrorReasons: ValidationReason[]): void {\r\n        if (this.programmingExercise.buildConfig?.timeoutSeconds && this.programmingExercise.buildConfig.timeoutSeconds < 0) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.programmingExercise.timeout.alert',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateCheckoutPaths(validationErrorReasons: ValidationReason[]): void {\r\n        const checkoutPaths = [\r\n            this.programmingExercise.buildConfig?.assignmentCheckoutPath,\r\n            this.programmingExercise.buildConfig?.solutionCheckoutPath,\r\n            this.programmingExercise.buildConfig?.testCheckoutPath,\r\n        ];\r\n        if (!this.areValuesUnique(checkoutPaths) || !this.testCheckoutPathsPattern(checkoutPaths)) {\r\n            validationErrorReasons.push({\r\n                translateKey: 'artemisApp.programmingExercise.checkoutPath.invalid',\r\n                translateValues: {},\r\n            });\r\n        }\r\n    }\r\n\r\n    private areValuesUnique(values: (string | undefined)[]): boolean {\r\n        const filteredValues = values.filter((value): value is string => value !== undefined && value !== '');\r\n        const uniqueValues = new Set(filteredValues);\r\n        return filteredValues.length === uniqueValues.size;\r\n    }\r\n\r\n    private testCheckoutPathsPattern(checkoutPath: (string | undefined)[]): boolean {\r\n        return checkoutPath.every((path) => path === undefined || path.trim() === '' || this.invalidDirectoryNamePattern.test(path));\r\n    }\r\n\r\n    private createProgrammingExerciseForImportFromFile() {\r\n        this.programmingExercise = cloneDeep(history.state.programmingExerciseForImportFromFile);\r\n        this.programmingExercise.id = undefined;\r\n        this.programmingExercise.exerciseGroup = undefined;\r\n        this.programmingExercise.course = undefined;\r\n        this.programmingExercise.projectKey = undefined;\r\n\r\n        resetProgrammingForImport(this.programmingExercise);\r\n\r\n        this.selectedProgrammingLanguage = this.programmingExercise.programmingLanguage!;\r\n        // we need to get it from the history object as setting the programming language\r\n        // sets the project type of the programming exercise to the default value for the programming language.\r\n        this.selectedProjectType = history.state.programmingExerciseForImportFromFile.projectType;\r\n    }\r\n\r\n    getProgrammingExerciseCreationConfig(): ProgrammingExerciseCreationConfig {\r\n        return {\r\n            isImportFromFile: this.isImportFromFile,\r\n            isImportFromExistingExercise: this.isImportFromExistingExercise,\r\n            showSummary: false,\r\n            isEdit: this.isEdit,\r\n            isExamMode: this.isExamMode,\r\n            auxiliaryRepositoriesSupported: this.auxiliaryRepositoriesSupported,\r\n            auxiliaryRepositoryDuplicateDirectories: this.auxiliaryRepositoryDuplicateDirectories,\r\n            auxiliaryRepositoryDuplicateNames: this.auxiliaryRepositoryDuplicateNames,\r\n            checkoutSolutionRepositoryAllowed: this.checkoutSolutionRepositoryAllowed,\r\n            customBuildPlansSupported: this.customBuildPlansSupported,\r\n            invalidDirectoryNamePattern: this.invalidDirectoryNamePattern,\r\n            invalidRepositoryNamePattern: this.invalidRepositoryNamePattern,\r\n            titleNamePattern: EXERCISE_TITLE_NAME_PATTERN,\r\n            shortNamePattern: this.shortNamePattern,\r\n            updateRepositoryName: this.updateRepositoryName,\r\n            updateCheckoutDirectory: this.updateCheckoutDirectory,\r\n            refreshAuxiliaryRepositoryChecks: this.refreshAuxiliaryRepositoryChecks,\r\n            exerciseCategories: this.exerciseCategories,\r\n            existingCategories: this.existingCategories,\r\n            updateCategories: this.categoriesChanged,\r\n            modePickerOptions: this.modePickerOptions,\r\n            withDependencies: this.withDependencies,\r\n            onWithDependenciesChanged: this.withDependenciesChanged,\r\n            packageNameRequired: this.packageNameRequired,\r\n            packageNamePattern: this.packageNamePattern,\r\n            supportedLanguages: this.supportedLanguages,\r\n            selectedProgrammingLanguage: this.selectedProgrammingLanguage,\r\n            onProgrammingLanguageChange: this.programmingLanguageChanged,\r\n            projectTypes: this.projectTypes,\r\n            selectedProjectType: this.selectedProjectType,\r\n            onProjectTypeChange: this.projectTypeChanged,\r\n            sequentialTestRunsAllowed: this.sequentialTestRunsAllowed,\r\n            staticCodeAnalysisAllowed: this.staticCodeAnalysisAllowed,\r\n            onStaticCodeAnalysisChanged: this.staticCodeAnalysisChanged,\r\n            maxPenaltyPattern: this.maxPenaltyPattern,\r\n            problemStatementLoaded: this.problemStatementLoaded,\r\n            templateParticipationResultLoaded: this.templateParticipationResultLoaded,\r\n            hasUnsavedChanges: this.hasUnsavedChanges,\r\n            rerenderSubject: this.rerenderSubject.asObservable(),\r\n            validIdeSelection: this.validIdeSelection,\r\n            validOnlineIdeSelection: this.validOnlineIdeSelection,\r\n            inProductionEnvironment: this.inProductionEnvironment,\r\n            recreateBuildPlans: this.importOptions.recreateBuildPlans,\r\n            onRecreateBuildPlanOrUpdateTemplateChange: this.onRecreateBuildPlanOrUpdateTemplateChange,\r\n            updateTemplate: this.importOptions.updateTemplate,\r\n            recreateBuildPlanOrUpdateTemplateChange: this.onRecreateBuildPlanOrUpdateTemplateChange,\r\n            buildPlanLoaded: this.buildPlanLoaded,\r\n        };\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex align-items-center gap-2\">\r\n        @if (!isImportFromExistingExercise && !isImportFromFile && !programmingExercise.id) {\r\n            <h2 id=\"jhi-programming-exercise-heading-create\" jhiTranslate=\"artemisApp.programmingExercise.home.createLabel\"></h2>\r\n        } @else if (!isImportFromExistingExercise && programmingExercise.id) {\r\n            <h2 id=\"jhi-programming-exercise-heading-edit\" jhiTranslate=\"artemisApp.programmingExercise.home.editLabel\"></h2>\r\n        } @else if (isImportFromExistingExercise || isImportFromFile) {\r\n            <h2 id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"artemisApp.programmingExercise.home.importLabel\"></h2>\r\n        }\r\n        <jhi-documentation-button [type]=\"documentationType\" />\r\n    </div>\r\n    <jhi-form-status-bar [formStatusSections]=\"formStatusSections()\" />\r\n    <form name=\"editForm\" role=\"form\" novalidate #editForm=\"ngForm\" (keydown.enter)=\"isEventInsideTextArea($event)\">\r\n        <div class=\"update-programming-exercise\">\r\n            <jhi-programming-exercise-info\r\n                [programmingExercise]=\"programmingExercise\"\r\n                [programmingExerciseCreationConfig]=\"getProgrammingExerciseCreationConfig()\"\r\n                [isExamMode]=\"isExamMode\"\r\n                [isImport]=\"isImportFromExistingExercise || isImportFromFile\"\r\n                [isLocal]=\"isLocal\"\r\n                [importOptions]=\"importOptions\"\r\n                [isSimpleMode]=\"isSimpleMode()\"\r\n                [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n                [courseId]=\"courseId\"\r\n                [(isAuxiliaryRepositoryInputValid)]=\"isAuxiliaryRepositoryInputValid\"\r\n            />\r\n            <hr class=\"mb-5\" />\r\n            @if (!isSimpleMode()) {\r\n                <!-- The mode section would only contain the difficulty in the simple mode,\r\n                in the simple mode the difficulty will be part of the general section -->\r\n                <jhi-programming-exercise-mode\r\n                    [programmingExercise]=\"programmingExercise\"\r\n                    [programmingExerciseCreationConfig]=\"getProgrammingExerciseCreationConfig()\"\r\n                    [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n                    (triggerValidation)=\"calculateFormStatusSections()\"\r\n                />\r\n                <hr class=\"mb-5\" />\r\n            }\r\n            <jhi-programming-exercise-language\r\n                [programmingExercise]=\"programmingExercise\"\r\n                [programmingExerciseCreationConfig]=\"getProgrammingExerciseCreationConfig()\"\r\n                [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n            />\r\n            <hr class=\"mb-5\" />\r\n            <jhi-programming-exercise-problem\r\n                [(exercise)]=\"programmingExercise\"\r\n                [programmingExerciseCreationConfig]=\"getProgrammingExerciseCreationConfig()\"\r\n                [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n                (problemStatementChange)=\"calculateFormStatusSections()\"\r\n            />\r\n            <hr class=\"mb-5\" />\r\n            <jhi-programming-exercise-grading\r\n                class=\"form-step\"\r\n                [programmingExercise]=\"programmingExercise\"\r\n                [programmingExerciseCreationConfig]=\"getProgrammingExerciseCreationConfig()\"\r\n                [importOptions]=\"importOptions\"\r\n                [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n            />\r\n            @if (isEditFieldDisplayedRecord().plagiarismControl && !isExamMode) {\r\n                <jhi-exercise-update-plagiarism [exercise]=\"programmingExercise\" />\r\n            }\r\n            <jhi-form-footer\r\n                [isCreation]=\"!programmingExercise.id\"\r\n                [isImport]=\"isImportFromExistingExercise || isImportFromFile\"\r\n                [isSaving]=\"isSaving\"\r\n                [(notificationText)]=\"notificationText\"\r\n                [isSimpleMode]=\"isSimpleMode()\"\r\n                [switchEditMode]=\"switchEditMode\"\r\n                [areAuxiliaryRepositoriesValid]=\"isAuxiliaryRepositoryInputValid()\"\r\n                [invalidReasons]=\"getInvalidReasons()\"\r\n                (save)=\"save()\"\r\n                (onCancel)=\"previousState()\"\r\n            />\r\n        </div>\r\n    </form>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "assignmentCheckoutPath", "\u0275\u0275resetView", "\u0275\u0275listener", "onAssigmentRepositoryCheckoutPathChange", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "pattern", "\u0275\u0275twoWayProperty", "_r3", "testCheckoutPath", "onTestRepositoryCheckoutPathChange", "_r4", "solutionCheckoutPath", "onSolutionRepositoryCheckoutPathChange", "ProgrammingExerciseEditCheckoutDirectoriesComponent", "programmingExercise", "input", "required", "submissionBuildPlanCheckoutRepositories", "assignmentCheckoutPathEvent", "output", "testCheckoutPathEvent", "solutionCheckoutPathEvent", "isAssigmentRepositoryEditable", "isTestRepositoryEditable", "isSolutionRepositoryEditable", "formValid", "formValidChanges", "Subject", "field_assignmentRepositoryCheckoutPath", "viewChild", "field_testRepositoryCheckoutPath", "field_solutionRepositoryCheckoutPath", "constructor", "effect", "reset", "submissionBuildPlan", "exerciseCheckoutDirectory", "trim", "buildConfig", "removeLeadingSlash", "testCheckoutDirectory", "solutionCheckoutDirectory", "event", "emit", "calculateFormValid", "path", "replace", "isFormValid", "Boolean", "valid", "areValuesUnique", "next", "values", "filteredValues", "filter", "value", "undefined", "uniqueValues", "Set", "length", "size", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseEditCheckoutDirectoriesComponent_Conditional_2_Template", "ProgrammingExerciseEditCheckoutDirectoriesComponent_Conditional_3_Template", "ProgrammingExerciseEditCheckoutDirectoriesComponent_Conditional_4_Template", "ProgrammingExerciseEditCheckoutDirectoriesComponent_Conditional_5_Template", "\u0275\u0275conditional", "HelpIconComponent", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "RequiredValidator", "PatternValidator", "NgModel", "styles", "AuxiliaryRepository", "id", "name", "checkoutDirectory", "repositoryUri", "description", "RemoveAuxiliaryRepositoryButtonComponent", "ButtonType", "ButtonSize", "programmingExercise", "row", "onRefresh", "EventEmitter", "faTrash", "removeAuxiliaryRepository", "auxRepoIndex", "auxiliaryRepositories", "indexOf", "splice", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ERROR", "SMALL", "ButtonComponent", "encapsulation", "AddAuxiliaryRepositoryButtonComponent", "ButtonType", "ButtonSize", "faPlus", "programmingExercise", "onRefresh", "EventEmitter", "addAuxiliaryRepositoryRow", "auxiliaryRepositories", "undefined", "newAuxiliaryRepository", "AuxiliaryRepository", "name", "checkoutDirectory", "push", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "SUCCESS", "SMALL", "ButtonComponent", "encapsulation", "ProgrammingExerciseDifficultyComponent", "programmingExercise", "input", "required", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "TranslateDirective", "DifficultyPickerComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "error_r3", "key", "\u0275\u0275template", "ProgrammingExerciseInformationComponent_Conditional_19_For_14_Conditional_1_Template", "\u0275\u0275conditional", "shortName_r4", "invalid", "dirty", "touched", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "programmingExercise", "shortName", "\u0275\u0275resetView", "\u0275\u0275repeaterCreate", "ProgrammingExerciseInformationComponent_Conditional_19_For_14_Template", "_forTrack0", "programmingExerciseCreationConfig", "shortNamePattern", "\u0275\u0275twoWayProperty", "isImportFromExistingExercise", "id", "alreadyUsedShortNames", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "\u0275\u0275pipeBind1", "errors", "\u0275\u0275pureFunction0", "_c5", "\u0275\u0275listener", "_r6", "onAssigmentRepositoryCheckoutPathChange", "onTestRepositoryCheckoutPathChange", "onSolutionRepositoryCheckoutPathChange", "submissionBuildPlanCheckoutRepositories", "invalidDirectoryNamePattern", "row_r7", "name", "updateRepositoryName", "invalidRepositoryNamePattern", "row_r8", "checkoutDirectory", "updateCheckoutDirectory", "row_r10", "_r9", "row", "description", "_r11", "refreshAuxiliaryRepositoryChecks", "row_r12", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_3_ng_template_6_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_3_ng_template_12_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_3_ng_template_18_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_3_ng_template_23_Template", "auxiliaryRepositories", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_4_Conditional_3_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_4_Conditional_4_Template", "auxiliaryRepositoryDuplicateNames", "auxiliaryRepositoryDuplicateDirectories", "_r13", "toggleEditRepositoryCheckoutPath", "ButtonType", "WARNING", "ButtonSize", "SMALL", "faPlus", "_r14", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_3_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_4_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_5_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_6_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Conditional_7_Template", "length", "isEditFieldDisplayedRecord", "addAuxiliaryRepository", "isLocal", "isImport", "isEdit", "editRepositoriesCheckoutPath", "_r5", "updateSubmissionBuildPlanCheckoutDirectories", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_12_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Conditional_13_Template", "selectedProgrammingLanguage", "tmp_6_0", "buildConfig", "checkoutSolutionRepository", "editRepositoryCheckoutPath", "auxiliaryRepositoriesSupported", "_r15", "importOptions", "recreateBuildPlans", "recreateBuildPlanOrUpdateTemplateChange", "_r16", "updateTemplate", "_r17", "updateCategories", "exerciseCategories", "existingCategories", "MAXIMUM_TRIES_TO_GENERATE_UNIQUE_SHORT_NAME", "ProgrammingExerciseInformationComponent", "ProjectType", "input", "required", "isExamMode", "isSimpleMode", "courseId", "isAuxiliaryRepositoryInputValid", "model", "exerciseTitleChannelComponent", "viewChild", "tableEditableFields", "shortNameField", "checkoutSolutionRepositoryField", "recreateBuildPlansField", "updateTemplateFilesField", "titleComponent", "programmingExerciseEditCheckoutDirectories", "exerciseService", "inject", "ExerciseService", "alertService", "AlertService", "isShortNameFieldValid", "signal", "isShortNameFromAdvancedMode", "formValid", "formValidChanges", "Subject", "inputFieldSubscriptions", "alreadyUsedExerciseNames", "Set", "exerciseTitle", "undefined", "constructor", "effect", "defineShortNameOnEditModeChangeIfNotDefinedInAdvancedMode", "generateShortNameWhenInSimpleMode", "registerInputFieldsWhenChildComponentsAreReady", "fetchAndInitializeTakenTitlesAndShortNames", "ngAfterViewInit", "registerInputFields", "ngOnChanges", "changes", "set", "title", "ngOnDestroy", "subscription", "unsubscribe", "forEach", "push", "titleChannelNameComponent", "subscribe", "calculateFormValid", "valueChanges", "fields", "toArray", "field", "editingInput", "field_title", "newTitle", "updateShortName", "updateIsShortNameValid", "isCheckoutSolutionRepositoryValid", "isRecreateBuildPlansValid", "isUpdateTemplateFilesValid", "areAuxiliaryRepositoriesValid", "areCheckoutPathsValid", "Boolean", "isFormValidSignal", "getIsShortNameFieldValid", "next", "every", "map", "valid", "projectType", "PLAIN_GRADLE", "GRADLE_GRADLE", "programmingLanguage", "checkoutSolutionRepositoryAllowed", "areValuesUnique", "assignmentCheckoutPath", "testCheckoutPath", "solutionCheckoutPath", "buildPlanCheckoutDirectoriesDTO", "event", "__spreadValues", "course", "getExistingExerciseDetailsInCourse", "ExerciseType", "PROGRAMMING", "exerciseDetails", "exerciseTitles", "shortNames", "newShortName", "sanitizedShortName", "removeSpecialCharacters", "uniqueShortName", "ensureShortNameIsUnique", "control", "status", "counter", "has", "error", "selectors", "viewQuery", "rf", "ctx", "ProgrammingExerciseEditCheckoutDirectoriesComponent", "TableEditableFieldComponent", "ProgrammingExerciseInformationComponent_Conditional_19_Template", "ProgrammingExerciseInformationComponent_Conditional_20_Template", "ProgrammingExerciseInformationComponent_Conditional_23_Template", "ProgrammingExerciseInformationComponent_Conditional_24_Template", "ProgrammingExerciseInformationComponent_Conditional_26_Template", "ProgrammingExerciseInformationComponent_Conditional_27_Template", "titleNamePattern", "categories", "TranslateDirective", "HelpIconComponent", "ExerciseTitleChannelNameComponent", "FormsModule", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "RequiredValidator", "MinLengthValidator", "PatternValidator", "NgModel", "CustomNotIncludedInValidatorDirective", "ProgrammingExerciseRepositoryAndBuildPlanDetailsComponent", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnCellDirective", "RemoveAuxiliaryRepositoryButtonComponent", "NgbAlert", "ButtonComponent", "AddAuxiliaryRepositoryButtonComponent", "CategorySelectorComponent", "ProgrammingExerciseDifficultyComponent", "KeyValuePipe", "ArtemisTranslatePipe", "RemoveKeysPipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "programmingExercise", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "programmingExerciseCreationConfig", "isImportFromExistingExercise", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faQuestionCircle", "\u0275\u0275template", "ProgrammingExerciseModeComponent_Conditional_10_Conditional_9_Conditional_1_Template", "ProgrammingExerciseModeComponent_Conditional_10_Conditional_9_Conditional_2_Template", "\u0275\u0275conditional", "theiaEnabled", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "allowOfflineIde", "\u0275\u0275resetView", "\u0275\u0275listener", "triggerValidation", "emit", "ProgrammingExerciseModeComponent_Conditional_10_Conditional_9_Template", "ProgrammingExerciseModeComponent_Conditional_10_Conditional_10_Template", "\u0275\u0275classMap", "validIdeSelection", "\u0275\u0275twoWayProperty", "ProgrammingExerciseModeComponent_Conditional_11_Conditional_9_Conditional_1_Template", "ProgrammingExerciseModeComponent_Conditional_11_Conditional_9_Conditional_2_Template", "_r3", "allowOnlineEditor", "ProgrammingExerciseModeComponent_Conditional_11_Conditional_9_Template", "ProgrammingExerciseModeComponent_Conditional_11_Conditional_10_Template", "_r4", "allowOnlineIde", "ProgrammingExerciseModeComponent_Conditional_12_Conditional_9_Template", "ProgrammingExerciseModeComponent_Conditional_12_Conditional_10_Template", "ProgrammingExerciseModeComponent", "profileService", "inject", "ProfileService", "ProjectType", "isEditFieldDisplayedRecord", "input", "required", "teamConfigComponent", "EventEmitter", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "activeProfiles", "includes", "PROFILE_THEIA", "selectors", "viewQuery", "rf", "ctx", "TeamConfigFormGroupComponent", "ProgrammingExerciseModeComponent_Conditional_6_Template", "ProgrammingExerciseModeComponent_Conditional_7_Template", "ProgrammingExerciseModeComponent_Conditional_10_Template", "ProgrammingExerciseModeComponent_Conditional_11_Template", "ProgrammingExerciseModeComponent_Conditional_12_Template", "difficulty", "participationMode", "XCODE", "selectedProjectType", "allowOnlineCodeEditor", "exerciseGroup", "TranslateDirective", "ProgrammingExerciseDifficultyComponent", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "NgbTooltip", "HelpIconComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onDisableNetworkAccessChange", "\u0275\u0275template", "ProgrammingExerciseBuildConfigurationComponent_Conditional_15_Conditional_1_Conditional_13_Template", "\u0275\u0275advance", "\u0275\u0275property", "isNetworkDisabled", "\u0275\u0275conditional", "rowIndex_r6", "row_r5", "onEnvVarsKeyChange", "rowIndex_r8", "row_r7", "onEnvVarsValueChange", "rowIndex_r10", "_r9", "rowIndex", "removeEnvVar", "faTrash", "ProgrammingExerciseBuildConfigurationComponent_Conditional_15_Conditional_1_Template", "ProgrammingExerciseBuildConfigurationComponent_Conditional_15_ng_template_12_Template", "ProgrammingExerciseBuildConfigurationComponent_Conditional_15_ng_template_17_Template", "ProgrammingExerciseBuildConfigurationComponent_Conditional_15_ng_template_22_Template", "_r2", "addEnvVar", "timeoutChange", "emit", "onCpuCountChange", "onMemoryChange", "onMemorySwapChange", "isLanguageSupported", "envVars", "faPlus", "\u0275\u0275propertyInterpolate", "timeoutMinValue", "timeoutMaxValue", "timeoutDefaultValue", "timeout", "\u0275\u0275textInterpolate1", "cpuCount", "memory", "memorySwap", "NOT_SUPPORTED_NETWORK_DISABLED_LANGUAGES", "ProgrammingLanguage", "EMPTY", "ProgrammingExerciseBuildConfigurationComponent", "profileService", "inject", "ProfileService", "programmingExercise", "input", "dockerImage", "required", "dockerImageChange", "output", "dockerFlags", "isAeolus", "dockerImageField", "viewChild", "timeoutField", "constructor", "effect", "setIsLanguageSupported", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "buildTimeoutMin", "buildTimeoutMax", "buildTimeoutDefault", "defaultContainerCpuCount", "defaultContainerMemoryLimitInMB", "defaultContainerMemorySwapLimitInMB", "buildConfig", "initDockerFlags", "JSON", "parse", "network", "env", "key", "push", "event", "target", "checked", "parseDockerFlagsToString", "value", "row", "newValue", "index", "splice", "newEnv", "forEach", "trim", "undefined", "stringify", "includes", "programmingLanguage", "selectors", "viewQuery", "rf", "ctx", "i0", "_r1", "ProgrammingExerciseBuildConfigurationComponent_Conditional_15_Template", "TranslateDirective", "HelpIconComponent", "FormsModule", "DefaultValueAccessor", "RangeValueAccessor", "NgControlStatus", "RequiredValidator", "NgModel", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnCellDirective", "TableEditableFieldComponent", "FaIconComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setDockerImage", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "programmingExercise", "buildConfig", "windfile", "metadata", "docker", "image", "action_r5", "_r4", "$implicit", "changeActiveAction", "name", "deleteAction", "\u0275\u0275pureFunction1", "_c1", "active", "\u0275\u0275textInterpolate", "\u0275\u0275twoWayListener", "_r7", "i0", "\u0275\u0275twoWayBindingSet", "runAlways", "\u0275\u0275element", "\u0275\u0275twoWayProperty", "_r8", "codeChanged", "_r6", "workdir", "\u0275\u0275template", "ProgrammingExerciseCustomAeolusBuildPlanComponent_Conditional_11_Conditional_21_Conditional_14_Template", "ProgrammingExerciseCustomAeolusBuildPlanComponent_Conditional_11_Conditional_21_Conditional_24_Template", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "\u0275\u0275styleProp", "isScriptAction", "ProgrammingExerciseCustomAeolusBuildPlanComponent_Conditional_11_Conditional_3_Template", "\u0275\u0275repeaterCreate", "ProgrammingExerciseCustomAeolusBuildPlanComponent_Conditional_11_For_11_Template", "\u0275\u0275repeaterTrackByIdentity", "_r1", "addAction", "ProgrammingExerciseCustomAeolusBuildPlanComponent_Conditional_11_Conditional_21_Template", "\u0275\u0275repeater", "actions", "ProgrammingExerciseCustomAeolusBuildPlanComponent", "aeolusService", "inject", "AeolusService", "programmingExerciseCreationConfig", "programmingExerciseDockerImageComponent", "programmingLanguage", "projectType", "staticCodeAnalysisEnabled", "sequentialTestRuns", "code", "undefined", "_editor", "editor", "value", "setupEditor", "setText", "ngOnChanges", "changes", "shouldReloadTemplate", "isImportFromFile", "currentValue", "loadAeolusTemplate", "resetCustomBuildPlan", "buildPlanConfiguration", "id", "buildPlanLoaded", "parseWindFile", "getAeolusTemplateFile", "subscribe", "next", "file", "error", "faQuestionCircle", "getActionScript", "action", "foundAction", "find", "a", "ScriptAction", "script", "filter", "newAction", "push", "addParameter", "parameters", "Map", "set", "size", "deleteParameter", "key", "delete", "getParameterKeys", "Array", "from", "keys", "getParameter", "get", "changeModel", "dockerImage", "trim", "selectors", "viewQuery", "rf", "ctx", "ProgrammingExerciseBuildConfigurationComponent", "customizeBuildPlanWithAeolus", "ProgrammingExerciseCustomAeolusBuildPlanComponent_Conditional_11_Template", "FormsModule", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "RequiredValidator", "NgModel", "TranslateDirective", "HelpIconComponent", "NgClass", "MonacoEditorComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setDockerImage", "setTimeout", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "programmingExercise", "buildConfig", "windfile", "metadata", "docker", "image", "timeoutSeconds", "\u0275\u0275template", "ProgrammingExerciseCustomBuildPlanComponent_Conditional_11_Conditional_3_Template", "\u0275\u0275element", "_r1", "codeChanged", "\u0275\u0275conditional", "\u0275\u0275styleProp", "ProgrammingExerciseCustomBuildPlanComponent", "aeolusService", "inject", "AeolusService", "programmingExerciseCreationConfig", "programmingExerciseDockerImageComponent", "programmingLanguage", "projectType", "staticCodeAnalysisEnabled", "sequentialTestRuns", "isImportFromFile", "code", "_editor", "editor", "value", "setupEditor", "id", "buildScript", "setText", "ngOnChanges", "changes", "shouldReloadTemplate", "currentValue", "loadAeolusTemplate", "resetCustomBuildPlan", "undefined", "buildPlanConfiguration", "getAeolusTemplateFile", "subscribe", "next", "file", "parseWindFile", "error", "buildPlanLoaded", "getAeolusTemplateScript", "replacePlaceholders", "faQuestionCircle", "changeModel", "dockerImage", "trim", "timeout", "assignmentRepoName", "assignmentCheckoutPath", "ASSIGNMENT_REPO_NAME", "testRepoName", "testCheckoutPath", "TEST_REPO_NAME", "replaceAll", "selectors", "viewQuery", "rf", "ctx", "ProgrammingExerciseBuildConfigurationComponent", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "customizeBuildPlanWithAeolus", "ProgrammingExerciseCustomBuildPlanComponent_Conditional_11_Template", "\u0275\u0275twoWayProperty", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "TranslateDirective", "HelpIconComponent", "MonacoEditorComponent", "styles", "TheiaService", "http", "inject", "HttpClient", "resourceUrl", "getTheiaImages", "language", "get", "params", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "item_r2", "value", "\u0275\u0275textInterpolate1", "key", "\u0275\u0275element", "undefined", "ProgrammingExerciseTheiaComponent", "theiaService", "inject", "TheiaService", "programmingExercise", "programmingExerciseCreationConfig", "programmingLanguage", "theiaImages", "ngOnChanges", "changes", "shouldReloadTemplate", "loadTheiaImages", "onTheiaImageChange", "theiaImage", "buildConfig", "resetImageSelection", "getTheiaImages", "subscribe", "next", "images", "Object", "values", "length", "first", "error", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275repeaterCreate", "ProgrammingExerciseTheiaComponent_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "ProgrammingExerciseTheiaComponent_ForEmpty_7_Template", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "SelectControlValueAccessor", "NgControlStatus", "RequiredValidator", "NgModel", "KeyValuePipe", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "supportedLanguage_r4", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "select_r2", "\u0275\u0275reference", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "model", "programmingExerciseCreationConfig", "onProgrammingLanguageChange", "\u0275\u0275repeaterCreate", "ProgrammingExerciseLanguageComponent_Conditional_6_For_9_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275elementEnd", "selectedProgrammingLanguage", "isImportFromExistingExercise", "programmingExercise", "id", "isImportFromFile", "\u0275\u0275repeater", "supportedLanguages", "_r5", "onProjectTypeChange", "modePickerOptions", "selectedProjectType", "\u0275\u0275twoWayListener", "_r6", "i0", "\u0275\u0275twoWayBindingSet", "withDependencies", "onWithDependenciesChanged", "\u0275\u0275twoWayProperty", "\u0275\u0275template", "ProgrammingExerciseLanguageComponent_Conditional_7_Conditional_3_Template", "ProgrammingExerciseLanguageComponent_Conditional_7_Conditional_4_Template", "\u0275\u0275conditional", "isEditFieldDisplayedRecord", "projectType", "withExemplaryDependency", "programmingLanguage", "ProgrammingLanguage", "JAVA", "ProjectType", "MAVEN_BLACKBOX", "faExclamationTriangle", "\u0275\u0275pureFunction1", "_c2", "DOCUMENTATION_LINK", "DOCKER_REGISTRY_LINKS", "\u0275\u0275pureFunction0", "_c3", "_c4", "_c5", "e_r8", "key", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_2_For_9_Conditional_1_Conditional_3_Template", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_2_For_9_Conditional_1_Conditional_4_Template", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_2_For_9_Conditional_1_Template", "packageName_r9", "invalid", "dirty", "touched", "_r7", "packageName", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_2_For_9_Template", "packageNamePattern", "\u0275\u0275pipeBind2", "\u0275\u0275pipeBind1", "errors", "_c6", "e_r11", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_3_For_9_Conditional_1_Template", "packageName_r12", "_r10", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_3_For_9_Template", "APP_NAME_PATTERN_FOR_SWIFT", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_1_Template", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_2_Template", "ProgrammingExerciseLanguageComponent_Conditional_8_Conditional_3_Template", "EMPTY", "packageNameRequired", "XCODE", "SWIFT", "_r13", "staticCodeAnalysisEnabled", "onStaticCodeAnalysisChanged", "buildConfig", "sequentialTestRuns", "_r14", "_r15", "checkoutSolutionRepository", "ProgrammingExerciseLanguageComponent_Conditional_13_Conditional_1_Template", "ProgrammingExerciseLanguageComponent_Conditional_13_Conditional_2_Template", "customBuildPlansSupported", "PROFILE_LOCALCI", "PROFILE_AEOLUS", "ProgrammingExerciseLanguageComponent", "input", "required", "selectLanguageField", "packageNameField", "programmingExerciseCustomAeolusBuildPlanComponent", "programmingExerciseCustomBuildPlanComponent", "programmingExerciseTheiaComponent", "formValid", "formValidChanges", "Subject", "fieldSubscriptions", "ghcrLink", "dockerhubLink", "ngAfterViewInit", "push", "valueChanges", "subscribe", "setTimeout", "calculateFormValid", "ngAfterViewChecked", "observed", "dockerImageField", "programmingExerciseDockerImageComponent", "timeoutField", "ngOnDestroy", "subscription", "unsubscribe", "isPackageNameValid", "isCustomBuildPlanValid", "Boolean", "isDisabled", "valid", "next", "customizeBuildPlanWithAeolus", "selectors", "viewQuery", "rf", "ctx", "ProgrammingExerciseCustomAeolusBuildPlanComponent", "ProgrammingExerciseCustomBuildPlanComponent", "ProgrammingExerciseTheiaComponent", "ProgrammingExerciseLanguageComponent_Conditional_6_Template", "ProgrammingExerciseLanguageComponent_Conditional_7_Template", "ProgrammingExerciseLanguageComponent_Conditional_8_Template", "ProgrammingExerciseLanguageComponent_Conditional_9_Template", "ProgrammingExerciseLanguageComponent_Conditional_10_Template", "ProgrammingExerciseLanguageComponent_Conditional_11_Template", "ProgrammingExerciseLanguageComponent_Conditional_12_Template", "ProgrammingExerciseLanguageComponent_Conditional_13_Template", "projectTypes", "length", "allowOnlineIde", "enableStaticCodeAnalysis", "staticCodeAnalysisAllowed", "sequentialTestRunsAllowed", "checkoutSolutionRepositoryAllowed", "customizeBuildScript", "TranslateDirective", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "RequiredValidator", "PatternValidator", "NgModel", "ModePickerComponent", "HelpIconComponent", "FaIconComponent", "KeyValuePipe", "RemoveKeysPipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "programmingExercise", "includedInOverallScore", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "course", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "_r3", "maxPoints", "\u0275\u0275template", "ProgrammingExerciseGradingComponent_Conditional_9_Conditional_10_Template", "\u0275\u0275conditional", "maxScore_r4", "invalid", "dirty", "touched", "errors", "IncludedInOverallScore", "INCLUDED_COMPLETELY", "_r5", "bonusPoints", "ProgrammingExerciseGradingComponent_Conditional_10_Conditional_10_Template", "bonusPoints_r6", "error_r8", "key", "ProgrammingExerciseGradingComponent_Conditional_12_For_22_Conditional_1_Template", "maxPenalty_r9", "_r7", "maxStaticCodeAnalysisPenalty", "\u0275\u0275repeaterCreate", "ProgrammingExerciseGradingComponent_Conditional_12_For_22_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faQuestionCircle", "programmingExerciseCreationConfig", "maxPenaltyPattern", "\u0275\u0275repeater", "editPolicyUrl", "\u0275\u0275sanitizeUrl", "\u0275\u0275listener", "_r10", "calculateFormStatus", "ProgrammingExerciseGradingComponent_Conditional_13_Conditional_5_Template", "isEdit", "isExamMode", "importOptions", "isEditFieldDisplayedRecord", "\u0275\u0275textInterpolate", "getGradingSummary", "ProgrammingExerciseGradingComponent", "translateService", "inject", "TranslateService", "AssessmentType", "translationBasePath", "input", "required", "submissionPolicyUpdateComponent", "lifecycleComponent", "maxScoreField", "bonusPointsField", "maxPenaltyField", "formValidSignal", "signal", "formValid", "formEmpty", "formValidChanges", "Subject", "inputFieldSubscriptions", "ngAfterContentInit", "push", "valueChanges", "subscribe", "form", "setEditPolicyPageLink", "ngOnDestroy", "subscription", "unsubscribe", "newFormValidValue", "Boolean", "valid", "staticCodeAnalysisEnabled", "set", "next", "summary", "exerciseType", "INCLUDED_AS_BONUS", "assessmentType", "AUTOMATIC", "replacements", "instant", "toString", "submissionLimit", "submissionPolicy", "exceedingPenalty", "maxPenalty", "NOT_INCLUDED", "type", "SubmissionPolicyType", "LOCK_REPOSITORY", "SUBMISSION_PENALTY", "map", "s", "replacePlaceholders", "join", "stringWithPlaceholders", "replace", "placeholderWithDelimiters", "placeholderWithoutDelimiters", "replacePlaceholder", "Object", "prototype", "hasOwnProperty", "call", "linkParts", "getCourseFromExercise", "id", "exerciseGroup", "exam", "selectors", "viewQuery", "rf", "ctx", "SubmissionPolicyUpdateComponent", "ProgrammingExerciseLifecycleComponent", "ProgrammingExerciseGradingComponent_Conditional_6_Template", "ProgrammingExerciseGradingComponent_Conditional_9_Template", "ProgrammingExerciseGradingComponent_Conditional_10_Template", "ProgrammingExerciseGradingComponent_Conditional_12_Template", "ProgrammingExerciseGradingComponent_Conditional_13_Template", "ProgrammingExerciseGradingComponent_Conditional_14_Template", "ProgrammingExerciseGradingComponent_Conditional_15_Template", "ProgrammingExerciseGradingComponent_Conditional_16_Template", "ProgrammingExerciseGradingComponent_Conditional_17_Template", "includeExerciseInCourseScoreCalculation", "points", "timeline", "assessmentInstructions", "SEMI_AUTOMATIC", "presentationScore", "showSummary", "TranslateDirective", "IncludedInOverallScorePickerComponent", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "RequiredValidator", "PatternValidator", "NgModel", "CustomMinDirective", "CustomMaxDirective", "FaIconComponent", "NgbTooltip", "NgbAlert", "HelpIconComponent", "GradingInstructionsDetailsComponent", "PresentationScoreComponent", "KeyValuePipe", "ArtemisTranslatePipe", "styles", "IS_DISPLAYED_IN_SIMPLE_MODE", "title", "channelName", "shortName", "editRepositoriesCheckoutPath", "addAuxiliaryRepository", "categories", "difficulty", "participationMode", "allowOfflineIde", "allowOnlineCodeEditor", "allowOnlineIde", "programmingLanguage", "projectType", "withExemplaryDependency", "packageName", "enableStaticCodeAnalysis", "sequentialTestRuns", "customizeBuildScript", "problemStatement", "linkedCompetencies", "includeExerciseInCourseScoreCalculation", "points", "bonusPoints", "submissionPolicy", "timeline", "releaseDate", "startDate", "dueDate", "runTestsAfterDueDate", "assessmentDueDate", "exampleSolutionPublicationDate", "complaintOnAutomaticAssessment", "manualFeedbackRequests", "showTestNamesToStudents", "includeTestsIntoExampleSolution", "assessmentInstructions", "presentationScore", "plagiarismControl", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275propertyInterpolate", "ctx_r0", "programmingExerciseCreationConfig", "isImportFromExistingExercise", "programmingExercise", "templateParticipation", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "exercise", "\u0275\u0275resetView", "\u0275\u0275listener", "hasUnsavedChanges", "problemStatementChange", "emit", "\u0275\u0275twoWayProperty", "MarkdownEditorHeight", "MEDIUM", "id", "rerenderSubject", "\u0275\u0275template", "ProgrammingExerciseProblemComponent_Conditional_6_Conditional_5_Template", "ProgrammingExerciseProblemComponent_Conditional_6_Conditional_6_Template", "ProgrammingExerciseProblemComponent_Conditional_6_Conditional_7_Template", "\u0275\u0275conditional", "isImportFromFile", "problemStatementLoaded", "templateParticipationResultLoaded", "_r3", "competencyLinks", "ProgrammingExerciseProblemComponent", "ProgrammingLanguage", "ProjectType", "AssessmentType", "faQuestionCircle", "isEditFieldDisplayedRecord", "input", "required", "exerciseChange", "EventEmitter", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseProblemComponent_Conditional_6_Template", "ProgrammingExerciseProblemComponent_Conditional_7_Template", "problemStatement", "linkedCompetencies", "isExamMode", "TranslateDirective", "NgbAlert", "ProgrammingExerciseInstructionComponent", "ProgrammingExerciseEditableInstructionComponent", "CompetencySelectionComponent", "FormsModule", "NgControlStatus", "NgModel", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "calculateFormStatusSections", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "programmingExercise", "getProgrammingExerciseCreationConfig", "isEditFieldDisplayedRecord", "LOCAL_STORAGE_KEY_IS_SIMPLE_MODE", "ProgrammingExerciseUpdateComponent", "programmingExerciseService", "inject", "ProgrammingExerciseService", "modalService", "NgbModal", "popupService", "ExerciseUpdateWarningService", "courseService", "CourseManagementService", "alertService", "AlertService", "exerciseService", "ExerciseService", "fileService", "FileService", "activatedRoute", "ActivatedRoute", "translateService", "TranslateService", "profileService", "ProfileService", "exerciseGroupService", "ExerciseGroupService", "programmingLanguageFeatureService", "ProgrammingLanguageFeatureService", "navigationUtilService", "ArtemisNavigationUtilService", "aeolusService", "AeolusService", "documentationType", "maxPenaltyPattern", "MAX_PENALTY_PATTERN", "invalidRepositoryNamePattern", "INVALID_REPOSITORY_NAME_PATTERN", "invalidDirectoryNamePattern", "INVALID_DIRECTORY_NAME_PATTERN", "shortNamePattern", "PROGRAMMING_EXERCISE_SHORT_NAME_PATTERN", "packageNameRegexForJavaKotlin", "RegExp", "PACKAGE_NAME_PATTERN_FOR_JAVA_KOTLIN", "packageNameRegexForJavaBlackbox", "PACKAGE_NAME_PATTERN_FOR_JAVA_BLACKBOX", "appNameRegexForSwift", "APP_NAME_PATTERN_FOR_SWIFT", "packageNameRegexForGo", "PACKAGE_NAME_PATTERN_FOR_GO", "packageNameRegexForDart", "PACKAGE_NAME_PATTERN_FOR_DART", "exerciseInfoComponent", "exerciseDifficultyComponent", "exerciseLanguageComponent", "exerciseGradingComponent", "exercisePlagiarismComponent", "packageNamePattern", "isSimpleMode", "signal", "isAuxiliaryRepositoryInputValid", "computed", "inputFieldEditModeMapping", "IS_DISPLAYED_IN_SIMPLE_MODE", "isEditFieldDisplayedMapping", "Object", "keys", "forEach", "key", "isDisplayed", "isImportFromFile", "isImportFromExistingExercise", "translationBasePath", "programmingLanguageChanged", "language", "onProgrammingLanguageChange", "withDependenciesChanged", "withDependencies", "onWithDependenciesChanged", "categoriesChanged", "categories", "updateCategories", "projectTypeChanged", "projectType", "onProjectTypeChange", "staticCodeAnalysisChanged", "onStaticCodeAnalysisChanged", "auxiliaryRepositoryDuplicateNames", "auxiliaryRepositoryDuplicateDirectories", "auxiliaryRepositoryNamedCorrectly", "isEdit", "isCreate", "isExamMode", "isLocal", "hasUnsavedChanges", "backupExercise", "isSaving", "goBackAfterSaving", "problemStatementLoaded", "buildPlanLoaded", "templateParticipationResultLoaded", "notificationText", "courseId", "rerenderSubject", "Subject", "selectedProgrammingLanguageValue", "selectedProjectTypeValue", "exerciseCategories", "existingCategories", "formStatusSections", "inputFieldSubscriptions", "inProductionEnvironment", "supportedLanguages", "packageNameRequired", "staticCodeAnalysisAllowed", "checkoutSolutionRepositoryAllowed", "customizeBuildPlanWithAeolus", "sequentialTestRunsAllowed", "auxiliaryRepositoriesSupported", "auxiliaryRepositoriesValid", "customBuildPlansSupported", "theiaEnabled", "importOptions", "recreateBuildPlans", "updateTemplate", "setTestCaseVisibilityToAfterDueDate", "originalStaticCodeAnalysisEnabled", "projectTypes", "withDependenciesValue", "modePickerOptions", "constructor", "effect", "bind", "editModeRetrievedFromLocalStorage", "localStorage", "getItem", "set", "DEFAULT_EDIT_MODE_IS_SIMPLE_MODE", "updateRepositoryName", "editedAuxiliaryRepository", "newValue", "name", "refreshAuxiliaryRepositoryChecks", "updateCheckoutDirectory", "checkoutDirectory", "auxiliaryRepositories", "legalNameAndDirs", "names", "Set", "auxReposWithName", "filter", "auxiliaryRepository", "add", "test", "size", "length", "directories", "auxReposWithDirectory", "selectedProgrammingLanguage", "languageChanged", "programmingLanguageFeature", "getProgrammingLanguageFeature", "staticCodeAnalysis", "sequentialTestRuns", "ProjectType", "MAVEN_MAVEN", "GRADLE_GRADLE", "map", "value", "labelKey", "toString", "btnClass", "buildConfig", "windfile", "undefined", "buildPlanConfiguration", "ProgrammingExerciseBuildConfig", "ProgrammingLanguage", "EMPTY", "staticCodeAnalysisEnabled", "maxStaticCodeAnalysisPenalty", "HASKELL", "OCAML", "checkoutSolutionRepository", "id", "loadProgrammingLanguageTemplate", "next", "selectedProjectType", "type", "updateProjectTypeSettings", "programmingLanguage", "XCODE", "allowOnlineEditor", "FACT", "disableStaticCodeAnalysis", "JAVA", "MAVEN_BLACKBOX", "PLAIN_MAVEN", "PLAIN_GRADLE", "ngOnInit", "data", "subscribe", "parseWindFile", "cloneDeep", "url", "pipe", "tap", "segments", "some", "segment", "path", "switchMap", "params", "createProgrammingExerciseForImportFromFile", "createProgrammingExerciseForImport", "find", "res", "exerciseGroup", "body", "exam", "course", "defaultProgrammingLanguage", "loadCourseExerciseCategories", "setPackageNamePattern", "getProfileInfo", "profileInfo", "inProduction", "activeProfiles", "includes", "PROFILE_LOCALCI", "PROFILE_AEOLUS", "PROFILE_THEIA", "defineSupportedProgrammingLanguages", "ngAfterViewInit", "push", "formValidChanges", "teamConfigComponent", "ngOnDestroy", "subscription", "unsubscribe", "updatedFormStatusSections", "title", "valid", "formValid", "validIdeSelection", "validOnlineIdeSelection", "empty", "problemStatement", "Boolean", "plagiarismControl", "formEmpty", "splice", "MODE_SECTION_INDEX", "determineProjectTypeIfNotSelectedAndInSimpleMode", "addErrorAlert", "values", "supportsProgrammingLanguage", "resetProgrammingForImport", "projectKey", "submissionPolicy", "includedInOverallScore", "IncludedInOverallScore", "NOT_INCLUDED", "INCLUDED_COMPLETELY", "previousState", "navigateBackFromExerciseUpdate", "save", "ref", "checkExerciseBeforeUpdate", "hasOpenModals", "then", "reference", "componentInstance", "confirmed", "saveExercise", "reEvaluated", "requestOptions", "deleteFeedback", "subscribeToSaveResponse", "reevaluateAndUpdate", "metadata", "docker", "image", "trim", "serializeWindFile", "timeoutSeconds", "SubmissionPolicyType", "NONE", "Exercise", "sanitize", "hasExampleSolutionPublicationDateWarning", "addAlert", "AlertType", "WARNING", "message", "auxRepo", "backupAuxRepo", "importFromFile", "importExercise", "update", "automaticSetup", "result", "response", "onSaveSuccess", "error", "onSaveError", "exercise", "navigateBack", "navigateForwardFromExerciseUpdateOrCreation", "errorMessage", "disableTranslation", "status", "headers", "get", "DANGER", "window", "scrollTo", "confirmLanguageChangeText", "instant", "confirm", "useBlackboxPattern", "SWIFT", "KOTLIN", "GO", "DART", "onRecreateBuildPlanOrUpdateTemplateChange", "switchEditMode", "setItem", "JSON", "stringify", "getTemplateFile", "file", "allowOfflineIde", "allowOnlineIde", "theiaImage", "isEventInsideTextArea", "event", "target", "Element", "tagName", "getInvalidReasons", "validationErrorReasons", "validateExerciseTitle", "validateExerciseChannelName", "validateExerciseShortName", "validateExerciseAuxiliaryRepositories", "validateExercisePackageName", "validateExerciseIdeSelection", "validateExerciseOnlineIdeSelection", "validateExercisePoints", "validateExerciseBonusPoints", "validateExerciseSCAMaxPenalty", "validateExerciseSubmissionLimit", "validateTimeout", "validateCheckoutPaths", "translateKey", "translateValues", "EXERCISE_TITLE_NAME_REGEX", "titleComponent", "titleChannelNameComponent", "field_title", "control", "errors", "disallowedValue", "channelName", "shortName", "shortNameField", "shortNamePatternMatch", "match", "maxPoints", "bonusPoints", "maxStaticCodeAnalysisPenaltyPatternMatch", "regex", "packageName", "submissionLimit", "SUBMISSION_PENALTY", "exceedingPenalty", "checkoutPaths", "assignmentCheckoutPath", "solutionCheckoutPath", "testCheckoutPath", "areValuesUnique", "testCheckoutPathsPattern", "filteredValues", "uniqueValues", "checkoutPath", "every", "history", "state", "programmingExerciseForImportFromFile", "showSummary", "titleNamePattern", "EXERCISE_TITLE_NAME_PATTERN", "asObservable", "recreateBuildPlanOrUpdateTemplateChange", "selectors", "viewQuery", "rf", "ctx", "ProgrammingExerciseInformationComponent", "ProgrammingExerciseModeComponent", "ProgrammingExerciseLanguageComponent", "ProgrammingExerciseGradingComponent", "ExerciseUpdatePlagiarismComponent", "\u0275\u0275template", "ProgrammingExerciseUpdateComponent_Conditional_4_Template", "ProgrammingExerciseUpdateComponent_Conditional_5_Template", "ProgrammingExerciseUpdateComponent_Conditional_6_Template", "$event", "i0", "_r1", "\u0275\u0275twoWayListener", "\u0275\u0275twoWayBindingSet", "ProgrammingExerciseUpdateComponent_Conditional_21_Template", "ProgrammingExerciseUpdateComponent_Conditional_32_Template", "\u0275\u0275conditional", "\u0275\u0275twoWayProperty", "TranslateDirective", "DocumentationButtonComponent", "FormStatusBarComponent", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "NgForm", "ProgrammingExerciseProblemComponent", "FormFooterComponent", "styles"]
}
