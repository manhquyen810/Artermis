{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/submission-result-status.component.ts", "src/main/webapp/app/overview/submission-result-status.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges } from '@angular/core';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { ArtemisQuizService } from 'app/shared/quiz/quiz.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { UpdatingResultComponent } from '../exercises/shared/result/updating-result.component';\r\nimport { TranslateDirective } from '../shared/language/translate.directive';\r\nimport { ProgrammingExerciseStudentTriggerBuildButtonComponent } from '../exercises/programming/shared/actions/programming-exercise-student-trigger-build-button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-submission-result-status',\r\n    templateUrl: './submission-result-status.component.html',\r\n    imports: [UpdatingResultComponent, TranslateDirective, ProgrammingExerciseStudentTriggerBuildButtonComponent],\r\n})\r\nexport class SubmissionResultStatusComponent implements OnChanges {\r\n    private readonly initializationStatesToShowProgrammingResult = [InitializationState.INITIALIZED, InitializationState.INACTIVE, InitializationState.FINISHED];\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly InitializationState = InitializationState;\r\n    readonly dayjs = dayjs;\r\n\r\n    /**\r\n     * @property exercise Exercise to which the submission's participation belongs\r\n     * @property studentParticipation Participation to which the submission belongs\r\n     * @property updatingResultClass Class(es) that will be applied to the updating-result component\r\n     * @property showBadge Flag whether a colored badge (saying e.g. \"Graded\") should be shown\r\n     * @property showUngradedResults Flag whether ungraded results should also be shown\r\n     * @property short Flag whether the short version of the result text should be used\r\n     */\r\n    @Input() exercise: Exercise;\r\n    @Input() studentParticipation?: StudentParticipation;\r\n    @Input() updatingResultClass: string;\r\n    @Input() showBadge = false;\r\n    @Input() showUngradedResults = false;\r\n    @Input() showIcon = true;\r\n    @Input() isInSidebarCard = false;\r\n    @Input() showCompletion = true;\r\n    @Input() short = true;\r\n    @Input() triggerLastGraded = true;\r\n    @Input() showProgressBar = false;\r\n\r\n    quizNotStarted: boolean;\r\n    exerciseMissedDueDate: boolean;\r\n    uninitialized: boolean;\r\n    notSubmitted: boolean;\r\n    shouldShowResult: boolean;\r\n\r\n    ngOnChanges() {\r\n        // It's enough to look at the normal due date as students with time extension cannot start after the regular due date\r\n        const afterDueDate = !!this.exercise.dueDate && this.exercise.dueDate.isBefore(dayjs());\r\n        this.exerciseMissedDueDate = afterDueDate && !this.studentParticipation;\r\n\r\n        if (this.exercise.type === ExerciseType.QUIZ) {\r\n            const quizExercise = this.exercise as QuizExercise;\r\n            this.uninitialized = ArtemisQuizService.isUninitialized(quizExercise);\r\n            this.quizNotStarted = ArtemisQuizService.notStarted(quizExercise);\r\n        } else {\r\n            this.uninitialized = !afterDueDate && !this.studentParticipation;\r\n            this.notSubmitted = afterDueDate && !!this.studentParticipation && !this.studentParticipation.submissions?.length;\r\n        }\r\n\r\n        this.setShouldShowResult(afterDueDate);\r\n    }\r\n\r\n    private setShouldShowResult(afterDueDate: boolean) {\r\n        if (this.exercise.type === ExerciseType.QUIZ) {\r\n            this.shouldShowResult = !!this.studentParticipation?.results?.length;\r\n        } else if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n            this.shouldShowResult =\r\n                (!!this.studentParticipation?.results?.length || !afterDueDate) &&\r\n                !!this.studentParticipation?.initializationState &&\r\n                this.initializationStatesToShowProgrammingResult.includes(this.studentParticipation.initializationState);\r\n        } else {\r\n            this.shouldShowResult = this.studentParticipation?.initializationState === InitializationState.FINISHED;\r\n        }\r\n    }\r\n}\r\n", "<div class=\"col-auto\">\r\n    @if (shouldShowResult) {\r\n        <!-- Updating result -->\r\n        <span>\r\n            <jhi-updating-result\r\n                id=\"submission-result-graded\"\r\n                [exercise]=\"exercise\"\r\n                [participation]=\"studentParticipation!\"\r\n                [class]=\"updatingResultClass\"\r\n                [showUngradedResults]=\"showUngradedResults\"\r\n                [showBadge]=\"showBadge\"\r\n                [showIcon]=\"showIcon\"\r\n                [isInSidebarCard]=\"isInSidebarCard\"\r\n                [showCompletion]=\"showCompletion\"\r\n                [short]=\"short\"\r\n                [personalParticipation]=\"true\"\r\n                [showProgressBar]=\"showProgressBar\"\r\n            />\r\n        </span>\r\n    } @else {\r\n        <div>\r\n            @if (exercise.teamMode && exercise.studentAssignedTeamIdComputed && !exercise.studentAssignedTeamId) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.userNotAssignedToTeamShort\"></span>\r\n            } @else if (uninitialized) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.userNotStartedExerciseShort\"></span>\r\n            } @else if (exerciseMissedDueDate) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.exerciseMissedDueDateShort\"></span>\r\n            } @else if (notSubmitted) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.exerciseNotSubmittedShort\"></span>\r\n            } @else if (!notSubmitted && studentParticipation?.initializationState === InitializationState.FINISHED) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.userSubmittedShort\"></span>\r\n            } @else if (studentParticipation?.initializationState === InitializationState.INITIALIZED && exercise.type === ExerciseType.QUIZ) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.userParticipatingShort\"></span>\r\n            } @else if (quizNotStarted) {\r\n                <span class=\"text-body-secondary\" jhiTranslate=\"artemisApp.courseOverview.exerciseList.quizNotStartedShort\"></span>\r\n            } @else {\r\n                <span class=\"text-body-secondary\">-</span>\r\n            }\r\n        </div>\r\n    }\r\n    <!-- For programming exercises -->\r\n    @if (exercise.type === ExerciseType.PROGRAMMING && studentParticipation) {\r\n        <jhi-programming-exercise-student-trigger-build-button [exercise]=\"exercise\" [participation]=\"studentParticipation\" [triggerLastGraded]=\"triggerLastGraded\" />\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classMap", "ctx_r0", "updatingResultClass", "\u0275\u0275property", "exercise", "studentParticipation", "showUngradedResults", "showBadge", "showIcon", "isInSidebarCard", "showCompletion", "short", "showProgressBar", "\u0275\u0275template", "SubmissionResultStatusComponent_Conditional_3_Conditional_3_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_4_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_5_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_6_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_7_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_8_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_9_Template", "SubmissionResultStatusComponent_Conditional_3_Conditional_10_Template", "\u0275\u0275conditional", "teamMode", "studentAssignedTeamIdComputed", "studentAssignedTeamId", "uninitialized", "exerciseMissedDueDate", "notSubmitted", "initializationState", "InitializationState", "FINISHED", "INITIALIZED", "type", "ExerciseType", "QUIZ", "quizNotStarted", "triggerLastGraded", "SubmissionResultStatusComponent", "initializationStatesToShowProgrammingResult", "INACTIVE", "dayjs", "shouldShowResult", "ngOnChanges", "afterDueDate", "dueDate", "isBefore", "quizExercise", "ArtemisQuizService", "isUninitialized", "notStarted", "submissions", "length", "setShouldShowResult", "results", "PROGRAMMING", "includes", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "SubmissionResultStatusComponent_Conditional_2_Template", "SubmissionResultStatusComponent_Conditional_3_Template", "SubmissionResultStatusComponent_Conditional_4_Template", "UpdatingResultComponent", "TranslateDirective", "ProgrammingExerciseStudentTriggerBuildButtonComponent", "encapsulation"]
}
