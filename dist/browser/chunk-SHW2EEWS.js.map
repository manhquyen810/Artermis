{
  "version": 3,
  "sources": ["src/main/webapp/app/complaints/list-of-complaints/list-of-complaints.component.ts", "src/main/webapp/app/complaints/list-of-complaints/list-of-complaints.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Observable, combineLatestWith } from 'rxjs';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { getLinkToSubmissionAssessment } from 'app/utils/navigation.utils';\r\nimport { faExclamationTriangle, faFolderOpen, faSort } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-complaint-list',\r\n    templateUrl: './list-of-complaints.component.html',\r\n    imports: [TranslateDirective, FormsModule, FaIconComponent, NgbTooltip, ArtemisTranslatePipe, ArtemisDatePipe, ArtemisDurationFromSecondsPipe, SortDirective, SortByDirective],\r\n    providers: [ArtemisDatePipe],\r\n})\r\nexport class ListOfComplaintsComponent implements OnInit {\r\n    complaintService = inject(ComplaintService);\r\n    private alertService = inject(AlertService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private sortService = inject(SortService);\r\n    private translateService = inject(TranslateService);\r\n    private artemisDatePipe = inject(ArtemisDatePipe);\r\n    private courseManagementService = inject(CourseManagementService);\r\n\r\n    readonly ComplaintType = ComplaintType;\r\n\r\n    public complaints: Complaint[] = [];\r\n    public complaintType: ComplaintType;\r\n\r\n    private courseId: number;\r\n    private exerciseId: number;\r\n    private tutorId: number;\r\n    private examId?: number;\r\n    course?: Course;\r\n    correctionRound?: number;\r\n    complaintsSortingPredicate = 'id';\r\n    complaintsReverseOrder = false;\r\n    complaintsToShow: Complaint[] = [];\r\n    showAddressedComplaints = false;\r\n    allComplaintsForTutorLoaded = false;\r\n    isLoadingAllComplaints = false;\r\n    filterOption?: number;\r\n\r\n    loading = true;\r\n    // Icons\r\n    faSort = faSort;\r\n    faFolderOpen = faFolderOpen;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    readonly FILTER_OPTION_ADDRESSED_COMPLAINTS = 4; // the number passed by the chart through the route indicating that only addressed complaints should be shown\r\n\r\n    ngOnInit(): void {\r\n        this.route.params.pipe(combineLatestWith(this.route.queryParams, this.route.data)).subscribe((result) => {\r\n            const params = result[0];\r\n            const queryParams = result[1];\r\n            const data = result[2];\r\n\r\n            this.courseId = Number(params['courseId']);\r\n            this.exerciseId = Number(params['exerciseId']);\r\n            this.examId = Number(params['examId']);\r\n\r\n            this.tutorId = Number(queryParams['tutorId']);\r\n            this.correctionRound = Number(queryParams['correctionRound']);\r\n            if (queryParams['filterOption']) {\r\n                this.filterOption = Number(queryParams['filterOption']);\r\n            }\r\n\r\n            this.complaintType = data.complaintType;\r\n\r\n            this.loadComplaints();\r\n        });\r\n    }\r\n\r\n    loadComplaints() {\r\n        let complaintResponse: Observable<HttpResponse<Complaint[]>>;\r\n\r\n        if (this.tutorId) {\r\n            if (this.exerciseId) {\r\n                complaintResponse = this.complaintService.findAllByTutorIdForExerciseId(this.tutorId, this.exerciseId, this.complaintType);\r\n            } else if (this.examId) {\r\n                // TODO make exam complaints visible for tutors too\r\n                complaintResponse = this.complaintService.findAllByTutorIdForCourseId(this.tutorId, this.courseId, this.complaintType);\r\n            } else {\r\n                complaintResponse = this.complaintService.findAllByTutorIdForCourseId(this.tutorId, this.courseId, this.complaintType);\r\n            }\r\n        } else {\r\n            if (this.exerciseId) {\r\n                complaintResponse = this.complaintService.findAllByExerciseId(this.exerciseId, this.complaintType);\r\n            } else if (this.examId) {\r\n                complaintResponse = this.complaintService.findAllByCourseIdAndExamId(this.courseId, this.examId);\r\n            } else {\r\n                complaintResponse = this.complaintService.findAllByCourseId(this.courseId, this.complaintType);\r\n            }\r\n        }\r\n        this.subscribeToComplaintResponse(complaintResponse);\r\n        this.courseManagementService.find(this.courseId).subscribe((response) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            this.course = response?.body!;\r\n        });\r\n    }\r\n\r\n    subscribeToComplaintResponse(complaintResponse: Observable<HttpResponse<Complaint[]>>) {\r\n        complaintResponse.subscribe({\r\n            next: (res) => {\r\n                this.complaints = res.body!;\r\n                if (this.filterOption === this.FILTER_OPTION_ADDRESSED_COMPLAINTS) {\r\n                    this.showAddressedComplaints = true;\r\n                }\r\n\r\n                if (!this.showAddressedComplaints) {\r\n                    this.complaintsToShow = this.complaints.filter((complaint) => complaint.accepted === undefined);\r\n                } else if (this.filterOption === this.FILTER_OPTION_ADDRESSED_COMPLAINTS) {\r\n                    this.complaintsToShow = this.complaints.filter((complaint) => complaint.accepted !== undefined);\r\n                } else {\r\n                    this.complaintsToShow = this.complaints;\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            complete: () => (this.loading = false),\r\n        });\r\n    }\r\n\r\n    openAssessmentEditor(complaint: Complaint) {\r\n        if (!complaint || !complaint.result || !complaint.result.participation || !complaint.result.submission) {\r\n            return;\r\n        }\r\n\r\n        const studentParticipation = complaint.result.participation as StudentParticipation;\r\n        const exercise = studentParticipation.exercise;\r\n        const submissionId = complaint.result.submission.id;\r\n        if (!exercise || !exercise.type || !submissionId) {\r\n            return;\r\n        }\r\n        this.correctionRound = this.correctionRound || 0;\r\n        if (this.complaintType == ComplaintType.COMPLAINT && complaint.accepted) {\r\n            this.correctionRound += 1;\r\n        }\r\n        const url = getLinkToSubmissionAssessment(\r\n            exercise.type,\r\n            this.courseId,\r\n            exercise.id!,\r\n            studentParticipation.id,\r\n            submissionId,\r\n            undefined, // even if the list of complaints are part of an exam, the assessment of non-exam exercises gets executed\r\n            undefined,\r\n            complaint.result.id,\r\n        );\r\n        this.router.navigate(url, { queryParams: { 'correction-round': this.correctionRound } });\r\n    }\r\n\r\n    sortRows() {\r\n        switch (this.complaintsSortingPredicate) {\r\n            case 'responseTime':\r\n                this.sortService.sortByFunction(this.complaintsToShow, (complaint) => this.complaintService.getResponseTimeInSeconds(complaint), this.complaintsReverseOrder);\r\n                break;\r\n            case 'lockStatus':\r\n                this.sortService.sortByFunction(this.complaintsToShow, (complaint) => this.calculateComplaintLockStatus(complaint), this.complaintsReverseOrder);\r\n                break;\r\n            default:\r\n                this.sortService.sortByProperty(this.complaintsToShow, this.complaintsSortingPredicate, this.complaintsReverseOrder);\r\n        }\r\n    }\r\n\r\n    triggerAddressedComplaints() {\r\n        this.showAddressedComplaints = !this.showAddressedComplaints;\r\n\r\n        if (this.showAddressedComplaints) {\r\n            this.complaintsToShow = this.complaints;\r\n        } else {\r\n            this.resetFilterOptions();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to lazy-load all complaints from the server for a tutor or editor.\r\n     */\r\n    triggerShowAllComplaints() {\r\n        this.isLoadingAllComplaints = true;\r\n        const complaintResponse = this.complaintService.findAllWithoutStudentInformationForCourseId(this.courseId, this.complaintType);\r\n        this.subscribeToComplaintResponse(complaintResponse);\r\n        this.isLoadingAllComplaints = false;\r\n        this.allComplaintsForTutorLoaded = true;\r\n    }\r\n\r\n    calculateComplaintLockStatus(complaint: Complaint) {\r\n        if (complaint.complaintResponse && this.complaintService.isComplaintLocked(complaint)) {\r\n            if (this.complaintService.isComplaintLockedByLoggedInUser(complaint)) {\r\n                const endDate = this.artemisDatePipe.transform(complaint.complaintResponse?.lockEndDate);\r\n                return this.translateService.instant('artemisApp.locks.lockInformationYou', {\r\n                    endDate,\r\n                });\r\n            } else {\r\n                const endDate = this.artemisDatePipe.transform(complaint.complaintResponse?.lockEndDate);\r\n                const user = complaint.complaintResponse?.reviewer?.login;\r\n\r\n                return this.translateService.instant('artemisApp.locks.lockInformation', {\r\n                    endDate,\r\n                    user,\r\n                });\r\n            }\r\n        } else {\r\n            return this.translateService.instant('artemisApp.locks.notUnlocked');\r\n        }\r\n    }\r\n\r\n    updateFilteredComplaints(complaints: Complaint[]) {\r\n        this.complaintsToShow = complaints.filter((complaint) => complaint.accepted === undefined);\r\n    }\r\n\r\n    resetFilterOptions(): void {\r\n        this.updateFilteredComplaints(this.complaints);\r\n        this.showAddressedComplaints = false;\r\n        this.filterOption = undefined;\r\n    }\r\n}\r\n", "<div class=\"course-info-bar\">\r\n    <div class=\"row justify-content-between\">\r\n        <div class=\"col-md-8\">\r\n            <h2>\r\n                @if (complaintType === ComplaintType.COMPLAINT) {\r\n                    <span jhiTranslate=\"artemisApp.complaint.listOfComplaints.title\"></span>\r\n                }\r\n                @if (complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                    <span jhiTranslate=\"artemisApp.moreFeedback.list.title\"></span>\r\n                }\r\n            </h2>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"col-12 mt-4\">\r\n    <div class=\"alert alert-info\" [hidden]=\"!course || course.isAtLeastInstructor\">\r\n        @if (!allComplaintsForTutorLoaded && complaintType === ComplaintType.COMPLAINT) {\r\n            <span jhiTranslate=\"artemisApp.complaint.listOfComplaints.loadAllComplaintsExplanation\"></span>\r\n        }\r\n        @if (!allComplaintsForTutorLoaded && complaintType === ComplaintType.MORE_FEEDBACK) {\r\n            <span jhiTranslate=\"artemisApp.moreFeedback.list.loadAllRequestsExplanation\"></span>\r\n        }\r\n        @if (allComplaintsForTutorLoaded && complaintType === ComplaintType.COMPLAINT) {\r\n            <span jhiTranslate=\"artemisApp.complaint.listOfComplaints.allComplaintsLoaded\"></span>\r\n        }\r\n        @if (allComplaintsForTutorLoaded && complaintType === ComplaintType.MORE_FEEDBACK) {\r\n            <span jhiTranslate=\"artemisApp.moreFeedback.list.allRequestsLoaded\"></span>\r\n        }\r\n        @if (!allComplaintsForTutorLoaded) {\r\n            <button\r\n                class=\"btn btn-outline-info m-1\"\r\n                (click)=\"triggerShowAllComplaints()\"\r\n                [disabled]=\"allComplaintsForTutorLoaded\"\r\n                name=\"loadAllComplaintsForTutor\"\r\n                id=\"button_loadAllComplaintsForTutor\"\r\n            >\r\n                @if (isLoadingAllComplaints) {\r\n                    <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                }\r\n                @if (complaintType === ComplaintType.COMPLAINT) {\r\n                    <span jhiTranslate=\"artemisApp.complaint.listOfComplaints.loadAllComplaints\"></span>\r\n                }\r\n                @if (complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                    <span jhiTranslate=\"artemisApp.moreFeedback.list.loadAllRequests\"></span>\r\n                }\r\n            </button>\r\n        }\r\n    </div>\r\n    <div class=\"row table-responsive\">\r\n        @if (!loading) {\r\n            <div class=\"form-check col-6 align-baseline\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    class=\"form-check-input\"\r\n                    name=\"showAddressedComplaint\"\r\n                    id=\"field_showAddressedComplaint\"\r\n                    [ngModel]=\"showAddressedComplaints\"\r\n                    (ngModelChange)=\"triggerAddressedComplaints()\"\r\n                />\r\n                <label class=\"form-check-label\" for=\"field_showAddressedComplaint\">\r\n                    @if (complaintType === ComplaintType.COMPLAINT) {\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.complaint.listOfComplaints.show{{ filterOption === FILTER_OPTION_ADDRESSED_COMPLAINTS ? 'Only' : '' }}AddressedComplaints\"\r\n                        ></span>\r\n                    }\r\n                    @if (complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                        <span jhiTranslate=\"artemisApp.moreFeedback.list.showAnsweredRequests\"></span>\r\n                    }\r\n                </label>\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"row table-responsive pt-3\">\r\n        <table class=\"table\" [hidden]=\"complaintsToShow.length === 0\">\r\n            <thead>\r\n                <tr jhiSort [(predicate)]=\"complaintsSortingPredicate\" [(ascending)]=\"complaintsReverseOrder\" (sortChange)=\"sortRows()\">\r\n                    <th jhiSortBy=\"id\">\r\n                        <a class=\"th-link\">#</a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiSortBy=\"result.participation.exercise.title\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.exercise\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiSortBy=\"result.submission.id\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.submissionId\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiSortBy=\"result.assessor.name\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.assessorName\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    @if (course?.isAtLeastInstructor) {\r\n                        <th jhiSortBy=\"student.login\">\r\n                            <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.studentLogin\"></a>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"student.name\">\r\n                            <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.studentName\"></a>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"complaintResponse.reviewer.name\">\r\n                            <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.reviewerName\"></a>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                    }\r\n                    <th jhiSortBy=\"submittedTime\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.dateAndTime\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiSortBy=\"responseTime\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.responseTime\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiSortBy=\"accepted\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.status\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiSortBy=\"lockStatus\">\r\n                        <a class=\"th-link\" jhiTranslate=\"artemisApp.locks.lockStatus\"></a>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    <th jhiTranslate=\"artemisApp.complaint.listOfComplaints.actions\"></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (complaint of complaintsToShow; track complaint) {\r\n                    <tr>\r\n                        <td>\r\n                            {{ complaint.id }}\r\n                        </td>\r\n                        <td>\r\n                            <span>{{ complaint.result?.participation?.exercise?.title }}</span>\r\n                        </td>\r\n                        <td>\r\n                            <span>{{ complaint.result?.submission?.id }}</span>\r\n                        </td>\r\n                        <td>\r\n                            <span>{{ complaint.result?.assessor?.name }}</span>\r\n                        </td>\r\n                        @if (course?.isAtLeastInstructor) {\r\n                            <td>\r\n                                <span>{{ complaint.student?.login }}</span>\r\n                            </td>\r\n                            <td>\r\n                                <span>{{ complaint.student?.name }}</span>\r\n                            </td>\r\n                            <td>\r\n                                <span>{{ complaint.complaintResponse?.reviewer?.name }}</span>\r\n                            </td>\r\n                        }\r\n                        <td>\r\n                            <span>{{ complaint.submittedTime | artemisDate }}</span>\r\n                        </td>\r\n                        <td>\r\n                            <span>\r\n                                @if (complaint.accepted === undefined) {\r\n                                    &gt;=\r\n                                }\r\n                                {{ complaintService.getResponseTimeInSeconds(complaint) | artemisDurationFromSeconds: true }}\r\n                                @if (complaintService.shouldHighlightComplaint(complaint)) {\r\n                                    <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning\" ngbTooltip=\"{{ 'artemisApp.complaint.oneWeekUnanswered' | artemisTranslate }}\" />\r\n                                }\r\n                            </span>\r\n                        </td>\r\n                        <td>\r\n                            @if (complaint.accepted === undefined) {\r\n                                <span class=\"text-warning\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.noReply\"></span>\r\n                            }\r\n                            @if (complaint.accepted === true && complaintType === ComplaintType.COMPLAINT) {\r\n                                <span class=\"text-success\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.accepted\"></span>\r\n                            }\r\n                            @if (complaint.accepted === true && complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                                <span class=\"text-success\" jhiTranslate=\"artemisApp.moreFeedback.accepted\"></span>\r\n                            }\r\n                            @if (complaint.accepted === false) {\r\n                                <span class=\"text-danger\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.rejected\"></span>\r\n                            }\r\n                        </td>\r\n                        <td>\r\n                            {{ calculateComplaintLockStatus(complaint) }}\r\n                        </td>\r\n                        <td class=\"text-center\">\r\n                            <button class=\"btn btn-primary btn-sm\" (click)=\"openAssessmentEditor(complaint)\" id=\"show-complaint\">\r\n                                <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                @if (complaintType === ComplaintType.COMPLAINT) {\r\n                                    <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.showComplaint\"></span>\r\n                                }\r\n                                @if (complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                                    <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.showMoreFeedbackRequests\"></span>\r\n                                }\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"alert alert-info\" [hidden]=\"complaints.length !== 0\">\r\n        @if (complaintType === ComplaintType.COMPLAINT) {\r\n            <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noComplaints\"></span>\r\n        }\r\n        @if (complaintType === ComplaintType.MORE_FEEDBACK) {\r\n            <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noMoreFeedbackRequests\"></span>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "triggerShowAllComplaints", "\u0275\u0275template", "ListOfComplaintsComponent_Conditional_22_Conditional_3_Template", "ListOfComplaintsComponent_Conditional_22_Conditional_4_Template", "ListOfComplaintsComponent_Conditional_22_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "allComplaintsForTutorLoaded", "\u0275\u0275conditional", "isLoadingAllComplaints", "complaintType", "ComplaintType", "COMPLAINT", "MORE_FEEDBACK", "\u0275\u0275propertyInterpolate1", "filterOption", "FILTER_OPTION_ADDRESSED_COMPLAINTS", "_r3", "triggerAddressedComplaints", "ListOfComplaintsComponent_Conditional_26_Conditional_7_Template", "ListOfComplaintsComponent_Conditional_26_Conditional_8_Template", "showAddressedComplaints", "faSort", "\u0275\u0275textInterpolate", "complaint_r5", "student", "login", "name", "complaintResponse", "reviewer", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faExclamationTriangle", "ListOfComplaintsComponent_For_101_Conditional_24_Template", "ListOfComplaintsComponent_For_101_Conditional_36_Template", "ListOfComplaintsComponent_For_101_Conditional_39_Template", "ListOfComplaintsComponent_For_101_Conditional_44_Template", "ListOfComplaintsComponent_For_101_Conditional_45_Template", "ListOfComplaintsComponent_For_101_Conditional_46_Template", "ListOfComplaintsComponent_For_101_Conditional_47_Template", "_r4", "$implicit", "openAssessmentEditor", "ListOfComplaintsComponent_For_101_Conditional_58_Template", "ListOfComplaintsComponent_For_101_Conditional_59_Template", "\u0275\u0275textInterpolate1", "id", "result", "participation", "exercise", "title", "submission", "assessor", "course", "isAtLeastInstructor", "submittedTime", "accepted", "undefined", "\u0275\u0275pipeBind2", "complaintService", "getResponseTimeInSeconds", "shouldHighlightComplaint", "calculateComplaintLockStatus", "faFolderOpen", "ListOfComplaintsComponent", "inject", "ComplaintService", "alertService", "AlertService", "route", "ActivatedRoute", "router", "Router", "sortService", "SortService", "translateService", "TranslateService", "artemisDatePipe", "ArtemisDatePipe", "courseManagementService", "CourseManagementService", "complaints", "courseId", "exerciseId", "tutorId", "examId", "correctionRound", "complaintsSortingPredicate", "complaintsReverseOrder", "complaintsToShow", "loading", "ngOnInit", "params", "pipe", "combineLatestWith", "queryParams", "data", "subscribe", "Number", "loadComplaints", "findAllByTutorIdForExerciseId", "findAllByTutorIdForCourseId", "findAllByExerciseId", "findAllByCourseIdAndExamId", "findAllByCourseId", "subscribeToComplaintResponse", "find", "response", "body", "next", "res", "filter", "complaint", "error", "onError", "complete", "studentParticipation", "submissionId", "type", "url", "getLinkToSubmissionAssessment", "navigate", "sortRows", "sortByFunction", "sortByProperty", "resetFilterOptions", "findAllWithoutStudentInformationForCourseId", "isComplaintLocked", "isComplaintLockedByLoggedInUser", "endDate", "transform", "lockEndDate", "instant", "user", "updateFilteredComplaints", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ListOfComplaintsComponent_Conditional_8_Template", "ListOfComplaintsComponent_Conditional_9_Template", "ListOfComplaintsComponent_Conditional_18_Template", "ListOfComplaintsComponent_Conditional_19_Template", "ListOfComplaintsComponent_Conditional_20_Template", "ListOfComplaintsComponent_Conditional_21_Template", "ListOfComplaintsComponent_Conditional_22_Template", "ListOfComplaintsComponent_Conditional_26_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "ListOfComplaintsComponent_Conditional_65_Template", "\u0275\u0275repeaterCreate", "ListOfComplaintsComponent_For_101_Template", "\u0275\u0275repeaterTrackByIdentity", "ListOfComplaintsComponent_Conditional_107_Template", "ListOfComplaintsComponent_Conditional_108_Template", "length", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "TranslateDirective", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "NgbTooltip", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "SortDirective", "SortByDirective", "encapsulation"]
}
