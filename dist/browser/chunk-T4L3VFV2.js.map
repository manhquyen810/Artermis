{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/shared/service/external-cloning.service.ts", "src/main/webapp/app/shared/pipes/safe-url.pipe.ts", "src/main/webapp/app/shared/components/code-button/code-button.component.ts", "src/main/webapp/app/shared/components/code-button/code-button.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { Ide } from 'app/shared/user-settings/ide-preferences/ide.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExternalCloningService {\r\n    /**\r\n     * Build source tree url.\r\n     * @param baseUrl - the base url of the version control system\r\n     * @param cloneUrl - url of the target.\r\n     */\r\n    buildSourceTreeUrl(baseUrl: string, cloneUrl: string | undefined): string | undefined {\r\n        return cloneUrl ? `sourcetree://cloneRepo?type=stash&cloneUrl=${encodeURI(cloneUrl)}&baseWebUrl=${baseUrl}` : undefined;\r\n    }\r\n\r\n    /**\r\n     * Builds the url to clone a repository in the corresponding ide\r\n     * @param cloneUrl the url of the repository to clone\r\n     * @param ide the ide with the deeplink to build the url for\r\n     */\r\n    buildIdeUrl(cloneUrl: string | undefined, ide: Ide): string | undefined {\r\n        if (!cloneUrl) {\r\n            return undefined;\r\n        }\r\n        if (!ide.deepLink.includes('{cloneUrl}')) {\r\n            return undefined;\r\n        }\r\n\r\n        return ide.deepLink.replace('{cloneUrl}', encodeURIComponent(cloneUrl));\r\n    }\r\n}\r\n", "import { Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeUrl' })\r\nexport class SafeUrlPipe implements PipeTransform {\r\n    private sanitizer = inject(DomSanitizer);\r\n\r\n    /**\r\n     * Bypasses the security checks for a specified URL.\r\n     * @param value The URL that is considered safe.\r\n     */\r\n    transform(value: any) {\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n    }\r\n}\r\n", "import { Component, OnInit, effect, inject, input, signal } from '@angular/core';\r\nimport { ProgrammingExercise, ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ExternalCloningService } from 'app/exercises/programming/shared/service/external-cloning.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { PROFILE_GITLAB, PROFILE_LOCALVC } from 'app/app.constants';\r\nimport dayjs from 'dayjs/esm';\r\nimport { isPracticeMode } from 'app/entities/participation/student-participation.model';\r\nimport { faCode, faExternalLink } from '@fortawesome/free-solid-svg-icons';\r\nimport { IdeSettingsService } from 'app/shared/user-settings/ide-preferences/ide-settings.service';\r\nimport { Ide } from 'app/shared/user-settings/ide-preferences/ide.model';\r\nimport { SshUserSettingsService } from 'app/shared/user-settings/ssh-settings/ssh-user-settings.service';\r\nimport { UserSshPublicKey } from 'app/entities/programming/user-ssh-public-key.model';\r\nimport { ExerciseActionButtonComponent } from '../exercise-action-button.component';\r\nimport { FeatureToggleDirective } from '../../feature-toggle/feature-toggle.directive';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CdkCopyToClipboard } from '@angular/cdk/clipboard';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { HelpIconComponent } from '../help-icon.component';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\nimport { SafeUrlPipe } from 'app/shared/pipes/safe-url.pipe';\r\nimport { ProfileInfo } from 'app/shared/layouts/profiles/profile-info.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\nexport enum RepositoryAuthenticationMethod {\r\n    Password = 'password',\r\n    Token = 'token',\r\n    SSH = 'ssh',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-code-button',\r\n    templateUrl: './code-button.component.html',\r\n    styleUrls: ['./code-button.component.scss'],\r\n    imports: [\r\n        ExerciseActionButtonComponent,\r\n        FeatureToggleDirective,\r\n        NgbPopover,\r\n        TranslateDirective,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        CdkCopyToClipboard,\r\n        FaIconComponent,\r\n        RouterLink,\r\n        HelpIconComponent,\r\n        ArtemisTranslatePipe,\r\n        SafeUrlPipe,\r\n    ],\r\n})\r\nexport class CodeButtonComponent implements OnInit {\r\n    private translateService = inject(TranslateService);\r\n    private externalCloningService = inject(ExternalCloningService);\r\n    private sshUserSettingsService = inject(SshUserSettingsService);\r\n    private accountService = inject(AccountService);\r\n    private profileService = inject(ProfileService);\r\n    private localStorage = inject(LocalStorageService);\r\n    private participationService = inject(ParticipationService);\r\n    private ideSettingsService = inject(IdeSettingsService);\r\n    private alertService = inject(AlertService);\r\n    private router = inject(Router);\r\n\r\n    protected readonly FeatureToggle = FeatureToggle;\r\n    protected readonly ProgrammingLanguage = ProgrammingLanguage;\r\n    protected readonly RepositoryAuthenticationMethod = RepositoryAuthenticationMethod;\r\n\r\n    loading = input<boolean>(false);\r\n\r\n    // either use the participation token (true) OR the user token (false)\r\n    smallButtons = input.required<boolean>();\r\n    repositoryUri = input.required<string>();\r\n    routerLinkForRepositoryView = input.required<(string | number)[]>();\r\n    participations = input<ProgrammingExerciseStudentParticipation[]>([]);\r\n    exercise = input<ProgrammingExercise>();\r\n    hideLabelMobile = input<boolean>(false);\r\n\r\n    // this is the fallback with a default order in case the server does not specify this as part of the profile info endpoint\r\n    authenticationMechanisms = [RepositoryAuthenticationMethod.Password, RepositoryAuthenticationMethod.Token, RepositoryAuthenticationMethod.SSH];\r\n    selectedAuthenticationMechanism = RepositoryAuthenticationMethod.Password;\r\n\r\n    userTokenStillValid = false;\r\n    userTokenPresent = false;\r\n\r\n    sshEnabled = false;\r\n    sshTemplateUrl?: string;\r\n    versionControlUrl: string;\r\n\r\n    localVCEnabled = signal<boolean>(false);\r\n    gitlabVCEnabled = false;\r\n\r\n    copyEnabled = false;\r\n    doesUserHaveSSHkeys = false;\r\n    areAnySshKeysExpired = false;\r\n    isInCourseManagement = false;\r\n\r\n    sshSettingsUrl: string;\r\n    vcsTokenSettingsUrl: string;\r\n    sshKeyMissingTip: string;\r\n    sshKeysExpiredTip: string;\r\n    tokenMissingTip: string;\r\n    tokenExpiredTip: string;\r\n    user: User;\r\n    sshKeys?: UserSshPublicKey[];\r\n    cloneHeadline: string;\r\n    wasCopied = false;\r\n    isTeamParticipation: boolean;\r\n    activeParticipation?: ProgrammingExerciseStudentParticipation;\r\n    isPracticeMode: boolean | undefined;\r\n\r\n    vscodeFallback: Ide = { name: 'VS Code', deepLink: 'vscode://vscode.git/clone?url={cloneUrl}' };\r\n    programmingLanguageToIde: Map<ProgrammingLanguage, Ide> = new Map([[ProgrammingLanguage.EMPTY, this.vscodeFallback]]);\r\n\r\n    // Icons\r\n    readonly faCode = faCode;\r\n    readonly faExternalLink = faExternalLink;\r\n    ideName: string;\r\n\r\n    constructor() {\r\n        this.isInCourseManagement = this.router.url.includes('course-management');\r\n\r\n        effect(async () => {\r\n            if (this.participations().length) {\r\n                const shouldPreferPractice = this.participationService.shouldPreferPractice(this.exercise());\r\n                this.activeParticipation = this.participationService.getSpecificStudentParticipation(this.participations(), shouldPreferPractice) ?? this.participations()[0];\r\n                this.isPracticeMode = isPracticeMode(this.activeParticipation);\r\n                this.isTeamParticipation = !!this.activeParticipation?.team;\r\n            }\r\n\r\n            this.cloneHeadline = this.getCloneHeadline();\r\n        });\r\n\r\n        effect(() => {\r\n            if (!this.isInCourseManagement && this.localVCEnabled()) {\r\n                this.loadVcsAccessTokensForAllParticipations();\r\n            }\r\n        });\r\n    }\r\n\r\n    async ngOnInit() {\r\n        const user = await this.accountService.identity();\r\n        if (!user) {\r\n            return;\r\n        }\r\n        this.user = user;\r\n\r\n        await this.checkForSshKeys();\r\n\r\n        // Get ssh information from the user\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.sshSettingsUrl = profileInfo.sshKeysURL;\r\n            this.sshTemplateUrl = profileInfo.sshCloneURLTemplate;\r\n\r\n            if (profileInfo.repositoryAuthenticationMechanisms?.length) {\r\n                this.authenticationMechanisms = profileInfo.repositoryAuthenticationMechanisms.filter((method): method is RepositoryAuthenticationMethod =>\r\n                    Object.values(RepositoryAuthenticationMethod).includes(method as RepositoryAuthenticationMethod),\r\n                );\r\n            }\r\n            if (profileInfo.versionControlUrl) {\r\n                this.versionControlUrl = profileInfo.versionControlUrl;\r\n            }\r\n\r\n            this.localVCEnabled.set(profileInfo.activeProfiles.includes(PROFILE_LOCALVC));\r\n            this.gitlabVCEnabled = profileInfo.activeProfiles.includes(PROFILE_GITLAB);\r\n\r\n            this.configureTooltips(profileInfo);\r\n        });\r\n\r\n        this.ideSettingsService.loadIdePreferences().then((programmingLanguageToIde) => {\r\n            if (programmingLanguageToIde.size) {\r\n                this.programmingLanguageToIde = programmingLanguageToIde;\r\n            }\r\n            this.ideName = this.getIde().name;\r\n        });\r\n    }\r\n\r\n    public useSshUrl() {\r\n        this.selectedAuthenticationMechanism = RepositoryAuthenticationMethod.SSH;\r\n\r\n        this.copyEnabled = this.doesUserHaveSSHkeys || this.gitlabVCEnabled;\r\n        this.storeToLocalStorage();\r\n    }\r\n\r\n    public useHttpsToken() {\r\n        this.selectedAuthenticationMechanism = RepositoryAuthenticationMethod.Token;\r\n\r\n        if (this.isInCourseManagement) {\r\n            this.userTokenStillValid = dayjs().isBefore(dayjs(this.user.vcsAccessTokenExpiryDate));\r\n            this.userTokenPresent = !!this.user.vcsAccessToken?.startsWith('vcpat');\r\n            this.copyEnabled = this.userTokenPresent && this.userTokenStillValid;\r\n        } else {\r\n            this.copyEnabled = !!this.activeParticipation?.vcsAccessToken;\r\n        }\r\n        this.storeToLocalStorage();\r\n    }\r\n\r\n    public useHttpsPassword() {\r\n        this.selectedAuthenticationMechanism = RepositoryAuthenticationMethod.Password;\r\n\r\n        this.copyEnabled = true;\r\n        this.storeToLocalStorage();\r\n    }\r\n\r\n    private storeToLocalStorage() {\r\n        this.localStorage.store('code-button-state', this.selectedAuthenticationMechanism);\r\n    }\r\n\r\n    public formatTip(translationKey: string, url: string): string {\r\n        return this.translateService.instant(translationKey).replace(/{link:(.*)}/, `<a href=\"${url}\" target=\"_blank\">$1</a>`);\r\n    }\r\n\r\n    private getRepositoryUri() {\r\n        return this.activeParticipation?.repositoryUri ?? this.repositoryUri();\r\n    }\r\n\r\n    onClick() {\r\n        this.selectedAuthenticationMechanism = this.authenticationMechanisms.includes(this.localStorage.retrieve('code-button-state'))\r\n            ? this.localStorage.retrieve('code-button-state')\r\n            : this.authenticationMechanisms[0];\r\n\r\n        if (this.useSsh) {\r\n            this.useSshUrl();\r\n        }\r\n        if (this.useToken) {\r\n            this.useHttpsToken();\r\n        }\r\n        if (this.usePassword) {\r\n            this.useHttpsPassword();\r\n        }\r\n    }\r\n    /**\r\n     * Add the credentials to the http url, if a token should be used.\r\n     *\r\n     * @param insertPlaceholder if true, instead of the actual token, '**********' is used (e.g. to prevent leaking the token during a screen-share)\r\n     */\r\n    getHttpOrSshRepositoryUri(insertPlaceholder = true): string {\r\n        if (this.useSsh && this.sshTemplateUrl) {\r\n            return this.getSshCloneUrl(this.getRepositoryUri());\r\n        }\r\n        const url = this.getRepositoryUri();\r\n        const token = insertPlaceholder ? '**********' : this.getUsedToken();\r\n\r\n        const credentials = `://${this.user.login}${this.useToken ? `:${token}` : ''}@`;\r\n\r\n        if (!url.includes('@')) {\r\n            // the url has the format https://vcs-server.com\r\n            return url.replace('://', credentials);\r\n        } else {\r\n            // the url has the format https://username@vcs-server.com -> replace ://username@\r\n            return url.replace(/:\\/\\/.*@/, credentials);\r\n        }\r\n    }\r\n\r\n    loadVcsAccessTokensForAllParticipations() {\r\n        this.participations().forEach((participation) => {\r\n            if (participation.id && !participation.vcsAccessToken) {\r\n                this.loadParticipationVcsAccessToken(participation);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads the vcsAccessToken for a participation from the server. If none exists, sends a request to create one\r\n     * (Usually the token exists, as it is created when the server creates the participation)\r\n     */\r\n    loadParticipationVcsAccessToken(participation: ProgrammingExerciseStudentParticipation) {\r\n        this.accountService.getVcsAccessToken(participation!.id!).subscribe({\r\n            next: (res: HttpResponse<string>) => {\r\n                if (res.body) {\r\n                    participation.vcsAccessToken = res.body;\r\n                    this.copyEnabled = this.useToken;\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                if (error.status == 404) {\r\n                    this.createNewParticipationVcsAccessToken(participation);\r\n                }\r\n                if (error.status == 403) {\r\n                    this.alertService.warning('403 Forbidden');\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends the request to create a new participation VCS access token\r\n     */\r\n    createNewParticipationVcsAccessToken(participation: ProgrammingExerciseStudentParticipation) {\r\n        this.accountService.createVcsAccessToken(participation!.id!).subscribe({\r\n            next: (res: HttpResponse<string>) => {\r\n                if (res.body) {\r\n                    participation.vcsAccessToken = res.body;\r\n                    this.copyEnabled = this.useToken;\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                if (error.status == 403) {\r\n                    this.alertService.warning('403 Forbidden');\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    private getUsedToken(): string | undefined {\r\n        if (this.useToken) {\r\n            if (this.isInCourseManagement) {\r\n                return this.user.vcsAccessToken;\r\n            } else {\r\n                return this.activeParticipation?.vcsAccessToken;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Gets the external link of the repository. For LocalVC, undefined is returned.\r\n     */\r\n    getHttpRepositoryUri(): string {\r\n        return this.isTeamParticipation ? this.repositoryUriForTeam(this.getRepositoryUri()) : this.getRepositoryUri();\r\n    }\r\n\r\n    /**\r\n     * The user info part of the repository uri of a team participation has to be added with the current user's login.\r\n     *\r\n     * @return repository uri with username of current user inserted\r\n     */\r\n    private repositoryUriForTeam(url: string) {\r\n        // (https://)(gitlab.ase.in.tum.de/...-team1.git)  =>  (https://)ga12abc@(gitlab.ase.in.tum.de/...-team1.git)\r\n        return url.replace(/^(\\w*:\\/\\/)(.*)$/, `$1${this.user.login}@$2`);\r\n    }\r\n\r\n    /**\r\n     * Transforms the repository uri to an ssh clone url\r\n     */\r\n    private getSshCloneUrl(url: string) {\r\n        return url.replace(/^\\w*:\\/\\/[^/]*?\\/(scm\\/)?(.*)$/, this.sshTemplateUrl + '$2');\r\n    }\r\n\r\n    /**\r\n     * set wasCopied for 3 seconds on success\r\n     */\r\n    onCopyFinished(successful: boolean) {\r\n        if (successful) {\r\n            this.wasCopied = true;\r\n            setTimeout(() => {\r\n                this.wasCopied = false;\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * build the sourceTreeUrl from the repository uri\r\n     * @return sourceTreeUrl\r\n     */\r\n    buildSourceTreeUrl(): string | undefined {\r\n        return this.externalCloningService.buildSourceTreeUrl(this.versionControlUrl, this.getHttpOrSshRepositoryUri(false));\r\n    }\r\n\r\n    buildIdeUrl(): string | undefined {\r\n        return this.externalCloningService.buildIdeUrl(this.getHttpOrSshRepositoryUri(false), this.getIde());\r\n    }\r\n\r\n    getIde(): Ide {\r\n        return (\r\n            this.programmingLanguageToIde.get(this.exercise()?.programmingLanguage ?? ProgrammingLanguage.EMPTY) ??\r\n            this.programmingLanguageToIde.get(ProgrammingLanguage.EMPTY) ??\r\n            this.vscodeFallback\r\n        );\r\n    }\r\n\r\n    switchPracticeMode() {\r\n        this.isPracticeMode = !this.isPracticeMode;\r\n        this.activeParticipation = this.participationService.getSpecificStudentParticipation(this.participations(), this.isPracticeMode)!;\r\n        this.cloneHeadline = this.isPracticeMode ? 'artemisApp.exerciseActions.clonePracticeRepository' : 'artemisApp.exerciseActions.cloneRatedRepository';\r\n        if (this.activeParticipation.vcsAccessToken) {\r\n            this.user.vcsAccessToken = this.activeParticipation.vcsAccessToken;\r\n        }\r\n    }\r\n\r\n    get useToken() {\r\n        return this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Token;\r\n    }\r\n\r\n    get useSsh() {\r\n        return this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.SSH;\r\n    }\r\n\r\n    get usePassword() {\r\n        return this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Password;\r\n    }\r\n    /**\r\n     * Checks whether the user owns any SSH keys, and checks if any of them is expired\r\n     */\r\n    private async checkForSshKeys() {\r\n        this.sshKeys = await this.sshUserSettingsService.getCachedSshKeys();\r\n        if (this.sshKeys) {\r\n            const now = dayjs();\r\n            this.doesUserHaveSSHkeys = this.sshKeys.length > 0;\r\n            this.areAnySshKeysExpired = this.sshKeys.some((key) => {\r\n                if (key.expiryDate) {\r\n                    return dayjs(key.expiryDate).isBefore(now);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private configureTooltips(profileInfo: ProfileInfo) {\r\n        if (this.localVCEnabled()) {\r\n            this.vcsTokenSettingsUrl = `${window.location.origin}/user-settings/vcs-token`;\r\n            this.sshSettingsUrl = `${window.location.origin}/user-settings/ssh`;\r\n        } else {\r\n            this.sshSettingsUrl = profileInfo.sshKeysURL;\r\n        }\r\n        this.tokenMissingTip = this.formatTip('artemisApp.exerciseActions.vcsTokenTip', this.vcsTokenSettingsUrl);\r\n        this.tokenExpiredTip = this.formatTip('artemisApp.exerciseActions.vcsTokenExpiredTip', this.vcsTokenSettingsUrl);\r\n        this.sshKeyMissingTip = this.formatTip('artemisApp.exerciseActions.sshKeyTip', this.sshSettingsUrl);\r\n        this.sshKeysExpiredTip = this.formatTip('artemisApp.exerciseActions.sshKeyExpiredTip', this.sshSettingsUrl);\r\n    }\r\n\r\n    private getCloneHeadline() {\r\n        if (this.participations().length) {\r\n            this.isPracticeMode = isPracticeMode(this.activeParticipation);\r\n            return this.isPracticeMode && !this.exercise()?.exerciseGroup\r\n                ? 'artemisApp.exerciseActions.clonePracticeRepository'\r\n                : 'artemisApp.exerciseActions.cloneRatedRepository';\r\n        } else {\r\n            return 'artemisApp.exerciseActions.cloneExerciseRepository';\r\n        }\r\n    }\r\n}\r\n", "<ng-container>\r\n    <button\r\n        jhi-exercise-action-button\r\n        [buttonIcon]=\"faCode\"\r\n        class=\"code-button\"\r\n        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n        [buttonLabel]=\"'artemisApp.exerciseActions.code' | artemisTranslate\"\r\n        [buttonLoading]=\"loading()\"\r\n        [smallButton]=\"smallButtons()\"\r\n        [hideLabelMobile]=\"hideLabelMobile()\"\r\n        [ngbPopover]=\"popContent\"\r\n        [autoClose]=\"'outside'\"\r\n        (click)=\"onClick()\"\r\n        placement=\"right auto\"\r\n        container=\"body\"\r\n    ></button>\r\n    <ng-template #popContent>\r\n        @if (this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.SSH && !doesUserHaveSSHkeys) {\r\n            <div class=\"alert alert-warning\" [innerHTML]=\"sshKeyMissingTip\"></div>\r\n        }\r\n        @if (this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.SSH && areAnySshKeysExpired) {\r\n            <div class=\"alert alert-warning\" [innerHTML]=\"sshKeysExpiredTip\"></div>\r\n        }\r\n        @if (this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Token && isInCourseManagement && !userTokenPresent) {\r\n            <div class=\"alert alert-warning\" [innerHTML]=\"tokenMissingTip\"></div>\r\n        }\r\n        @if (this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Token && isInCourseManagement && userTokenPresent && !userTokenStillValid) {\r\n            <div class=\"alert alert-warning\" [innerHTML]=\"tokenExpiredTip\"></div>\r\n        }\r\n        @if (participations().length > 1) {\r\n            <div class=\"form-check form-switch\">\r\n                <input mdbCheckbox id=\"switch-practice\" class=\"form-check-input\" type=\"checkbox\" [checked]=\"isPracticeMode\" (click)=\"switchPracticeMode()\" />\r\n                <label class=\"form-check-label\" for=\"switch-practice\" jhiTranslate=\"artemisApp.exerciseActions.practiceMode.title\"></label>\r\n            </div>\r\n        }\r\n        <h5 [jhiTranslate]=\"cloneHeadline\"></h5>\r\n\r\n        <div class=\"d-flex\" style=\"margin: 0; max-width: 100%\">\r\n            <div aria-label=\"Button group with nested dropdown\" class=\"btn-group\" ngbDropdown role=\"group\" style=\"margin-bottom: 10px\">\r\n                <button class=\"btn btn-primary btn-sm dropdown-toggle https-or-ssh-button\" ngbDropdownToggle type=\"button\">\r\n                    {{\r\n                        this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.SSH\r\n                            ? 'SSH'\r\n                            : this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Token\r\n                              ? 'Token'\r\n                              : 'HTTPS'\r\n                    }}\r\n                </button>\r\n                <div class=\"dropdown-menu\" ngbDropdownMenu style=\"min-width: 100%\">\r\n                    @for (mechanism of authenticationMechanisms; track mechanism) {\r\n                        @if (mechanism === RepositoryAuthenticationMethod.Password) {\r\n                            <a\r\n                                (click)=\"useHttpsPassword()\"\r\n                                class=\"dropdown-item {{ this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Password ? 'active' : '' }}\"\r\n                                id=\"useHTTPSButton\"\r\n                                >HTTPS</a\r\n                            >\r\n                        }\r\n                        @if (mechanism === RepositoryAuthenticationMethod.Token) {\r\n                            <a\r\n                                (click)=\"useHttpsToken()\"\r\n                                class=\"dropdown-item {{ this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.Token ? 'active' : '' }}\"\r\n                                id=\"useHTTPSWithTokenButton\"\r\n                                >Token</a\r\n                            >\r\n                        }\r\n                        @if (mechanism === RepositoryAuthenticationMethod.SSH) {\r\n                            <a\r\n                                (click)=\"useSshUrl()\"\r\n                                class=\"dropdown-item {{ this.selectedAuthenticationMechanism === RepositoryAuthenticationMethod.SSH ? 'active' : '' }}\"\r\n                                id=\"useSSHButton\"\r\n                                >SSH</a\r\n                            >\r\n                        }\r\n                    }\r\n                </div>\r\n            </div>\r\n            <pre\r\n                class=\"clone-url url-box-remove-line-left url-box-remove-line-right\"\r\n                [cdkCopyToClipboard]=\"getHttpOrSshRepositoryUri(false)\"\r\n                (cdkCopyToClipboardCopied)=\"copyEnabled ? onCopyFinished($event) : null\"\r\n                >{{ getHttpOrSshRepositoryUri() }} </pre\r\n            >\r\n            <div class=\"d-flex align-items-center\">\r\n                @if (!localVCEnabled()) {\r\n                    <a\r\n                        [style.flex]=\"1\"\r\n                        class=\"btn btn-secondary btn-sm me-2 open-repository-button\"\r\n                        [href]=\"getHttpRepositoryUri() | safeUrl\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        <fa-icon [icon]=\"faExternalLink\" />\r\n                    </a>\r\n                } @else {\r\n                    <a\r\n                        [style.flex]=\"1\"\r\n                        class=\"btn btn-secondary btn-sm me-2 open-repository-button\"\r\n                        [routerLink]=\"routerLinkForRepositoryView()\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        <fa-icon [icon]=\"faExternalLink\" />\r\n                    </a>\r\n                }\r\n            </div>\r\n        </div>\r\n        <button\r\n            [cdkCopyToClipboard]=\"getHttpOrSshRepositoryUri(false)\"\r\n            (cdkCopyToClipboardCopied)=\"onCopyFinished($event)\"\r\n            [disabled]=\"!copyEnabled\"\r\n            [class.btn-success]=\"wasCopied\"\r\n            class=\"btn btn-primary btn-sm me-2\"\r\n            data-testid=\"copyRepoUrlButton\"\r\n            type=\"button\"\r\n            style=\"min-width: 100px\"\r\n            jhiTranslate=\"{{ wasCopied ? 'artemisApp.exerciseActions.copiedUrl' : 'artemisApp.exerciseActions.copyUrl' }}\"\r\n        ></button>\r\n        <a\r\n            class=\"btn btn-primary btn-sm\"\r\n            target=\"hidden-iframe\"\r\n            [href]=\"buildIdeUrl() | safeUrl\"\r\n            jhiTranslate=\"artemisApp.exerciseActions.ideButton.openIn\"\r\n            [translateValues]=\"{ ideName: ideName }\"\r\n        >\r\n        </a>\r\n        <jhi-help-icon placement=\"right auto\" text=\"artemisApp.exerciseActions.ideButton.helpIcon\" />\r\n        <a class=\"btn btn-primary btn-sm\" target=\"hidden-iframe\" [href]=\"buildSourceTreeUrl() | safeUrl\" jhiTranslate=\"artemisApp.exerciseActions.cloneSourceTree.button\"> </a>\r\n        <!-- This hidden iframe is used to avoid \"Do you want to leave the site\" messages in the exam mode -->\r\n        <iframe name=\"hidden-iframe\" style=\"visibility: hidden; position: absolute\"></iframe>\r\n        <jhi-help-icon placement=\"right auto\" text=\"artemisApp.exerciseActions.cloneSourceTree.helpIcon\" />\r\n    </ng-template>\r\n</ng-container>\r\n"],
  "mappings": "i1CAIA,IAAaA,IAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAM/BC,mBAAmBC,EAAiBC,EAA4B,CAC5D,OAAOA,EAAW,8CAA8CC,UAAUD,CAAQ,CAAC,eAAeD,CAAO,GAAKG,MAClH,CAOAC,YAAYH,EAA8BI,EAAQ,CAC9C,GAAKJ,GAGAI,EAAIC,SAASC,SAAS,YAAY,EAIvC,OAAOF,EAAIC,SAASE,QAAQ,aAAcC,mBAAmBR,CAAQ,CAAC,CAC1E,4CAxBSH,EAAsB,6BAAtBA,EAAsBY,QAAtBZ,EAAsBa,UAAAC,WADT,MAAM,CAAA,SACnBd,CAAsB,GAAA,ECAnC,IAAae,IAAW,IAAA,CAAlB,MAAOA,CAAW,CACZC,UAAYC,EAAOC,CAAY,EAMvCC,UAAUC,EAAU,CAChB,OAAO,KAAKJ,UAAUK,uBAAuBD,CAAK,CACtD,4CATSL,EAAW,2CAAXA,EAAWO,KAAA,EAAA,CAAA,SAAXP,CAAW,GAAA,oDEcZQ,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;SAAA,mBADqCE,EAAA,EAAAC,EAAA,YAAAC,EAAAC,iBAAAC,CAAA,6BAGjCN,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;SAAA,mBADqCE,EAAA,EAAAC,EAAA,YAAAC,EAAAG,kBAAAD,CAAA,6BAGjCN,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;SAAA,mBADqCE,EAAA,EAAAC,EAAA,YAAAC,EAAAI,gBAAAF,CAAA,6BAGjCN,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;SAAA,mBADqCE,EAAA,EAAAC,EAAA,YAAAC,EAAAK,gBAAAH,CAAA,sCAGjCN,EAAA,EAAA;aAAA,EAAAU,EAAA,EAAA,MAAA,EAAA,EACIV,EAAA,EAAA;iBAAA,EAAAU,EAAA,EAAA,QAAA,EAAA,EAA4GC,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAT,EAAAU,EAAA,CAAA,EAAA,OAAAC,EAASX,EAAAY,mBAAA,CAAoB,CAAA,CAAA,EAAzIC,EAAA,EACAjB,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,QAAA,EAAA,EACJD,EAAA,EAAA;aAAA,EAAAiB,EAAA,EACJjB,EAAA,EAAA;SAAA,qBAHyFE,EAAA,CAAA,EAAAC,EAAA,UAAAC,EAAAc,cAAA,sCAoBrElB,EAAA,EAAA;6BAAA,EAAAU,EAAA,EAAA,IAAA,EAAA,EACIC,EAAA,QAAA,UAAA,CAAAC,EAAAO,CAAA,EAAA,IAAAf,EAAAU,EAAA,CAAA,EAAA,OAAAC,EAASX,EAAAgB,iBAAA,CAAkB,CAAA,CAAA,EAG1BpB,EAAA,EAAA,OAAA,EAAKiB,EAAA,EAEdjB,EAAA,EAAA;yBAAA,qBAJQE,EAAA,EAAAmB,EAAA,iBAAAjB,EAAAkB,kCAAAlB,EAAAmB,+BAAAC,SAAA,SAAA,GAAA,EAAA,sCAMJxB,EAAA,EAAA;6BAAA,EAAAU,EAAA,EAAA,IAAA,EAAA,EACIC,EAAA,QAAA,UAAA,CAAAC,EAAAa,CAAA,EAAA,IAAArB,EAAAU,EAAA,CAAA,EAAA,OAAAC,EAASX,EAAAsB,cAAA,CAAe,CAAA,CAAA,EAGvB1B,EAAA,EAAA,OAAA,EAAKiB,EAAA,EAEdjB,EAAA,EAAA;yBAAA,qBAJQE,EAAA,EAAAmB,EAAA,iBAAAjB,EAAAkB,kCAAAlB,EAAAmB,+BAAAI,MAAA,SAAA,GAAA,EAAA,sCAMJ3B,EAAA,EAAA;6BAAA,EAAAU,EAAA,EAAA,IAAA,EAAA,EACIC,EAAA,QAAA,UAAA,CAAAC,EAAAgB,CAAA,EAAA,IAAAxB,EAAAU,EAAA,CAAA,EAAA,OAAAC,EAASX,EAAAyB,UAAA,CAAW,CAAA,CAAA,EAGnB7B,EAAA,EAAA,KAAA,EAAGiB,EAAA,EAEZjB,EAAA,EAAA;yBAAA,qBAJQE,EAAA,EAAAmB,EAAA,iBAAAjB,EAAAkB,kCAAAlB,EAAAmB,+BAAAO,IAAA,SAAA,GAAA,EAAA,6BAnBR9B,EAAA,EAAA;yBAAA,EAAA+B,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA6D,EAAAC,GAAA,EAAA,CAAA,EAQH,EAAAC,GAAA,EAAA,CAAA,iCAR1DhC,EAAA,EAAAiC,EAAAC,IAAAhC,EAAAmB,+BAAAC,SAAA,EAAA,EAAA,EAQAtB,EAAA,EAAAiC,EAAAC,IAAAhC,EAAAmB,+BAAAI,MAAA,EAAA,EAAA,EAQAzB,EAAA,EAAAiC,EAAAC,IAAAhC,EAAAmB,+BAAAO,IAAA,EAAA,EAAA,6BAmBJ9B,EAAA,EAAA;qBAAA,EAAAU,EAAA,EAAA,IAAA,EAAA,iBAOIV,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,EAAAiB,EAAA,EACJjB,EAAA,EAAA;iBAAA,mBARQE,EAAA,EAAAmC,EAAA,OAAA,CAAA,EAEAlC,EAAA,OAAAmC,EAAA,EAAA,EAAAlC,EAAAmC,qBAAA,CAAA,EAAAC,CAAA,EAIStC,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAqC,cAAA,6BAGbzC,EAAA,EAAA;qBAAA,EAAAU,EAAA,EAAA,IAAA,EAAA,EAOIV,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,EAAAiB,EAAA,EACJjB,EAAA,EAAA;iBAAA,mBARQE,EAAA,EAAAmC,EAAA,OAAA,CAAA,EAEAlC,EAAA,aAAAC,EAAAsC,4BAAA,CAAA,EAISxC,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAqC,cAAA,sCArFzBzC,EAAA,EAAA;SAAA,EAAA+B,EAAA,EAAAY,GAAA,EAAA,CAAA,EAA2G,EAAAC,GAAA,EAAA,CAAA,EAGA,EAAAC,GAAA,EAAA,CAAA,EAGuB,EAAAC,GAAA,EAAA,CAAA,EAGuB,EAAAC,GAAA,EAAA,CAAA,EASzJ9C,EAAA,EAAA,KAAA,CAAA,EAEAD,EAAA,EAAA;;SAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EACIV,EAAA,EAAA;aAAA,EAAAU,EAAA,GAAA,MAAA,CAAA,EACIV,EAAA,GAAA;iBAAA,EAAAU,EAAA,GAAA,SAAA,CAAA,EACIV,EAAA,EAAA,EAOJiB,EAAA,EACAjB,EAAA,GAAA;iBAAA,EAAAU,EAAA,GAAA,MAAA,CAAA,EACIV,EAAA,GAAA;qBAAA,EAAAgD,EAAA,GAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,EA0BJjC,EAAA,EACJjB,EAAA,GAAA;aAAA,EAAAiB,EAAA,EACAjB,EAAA,GAAA;aAAA,EAAAU,EAAA,GAAA,MAAA,CAAA,EAGIC,EAAA,2BAAA,SAAAwC,EAAA,CAAAvC,EAAAwC,CAAA,EAAA,IAAAhD,EAAAU,EAAA,EAAA,OAAAC,EAAAX,EAAAiD,YAA0CjD,EAAAkD,eAAAH,CAAA,EAAyB,IAAI,CAAA,CAAA,EACtEnD,EAAA,EAAA,EAAkCiB,EAAA,EAEvCjB,EAAA,GAAA;aAAA,EAAAU,EAAA,GAAA,MAAA,CAAA,EACIV,EAAA,GAAA;iBAAA,EAAA+B,EAAA,GAAAwB,GAAA,EAAA,CAAA,EAAyB,GAAAC,GAAA,EAAA,CAAA,EAqB7BvC,EAAA,EACJjB,EAAA,GAAA;SAAA,EAAAiB,EAAA,EACAjB,EAAA,GAAA;SAAA,EAAAU,EAAA,GAAA,SAAA,CAAA,EAEIC,EAAA,2BAAA,SAAAwC,EAAA,CAAAvC,EAAAwC,CAAA,EAAA,IAAAhD,EAAAU,EAAA,EAAA,OAAAC,EAA4BX,EAAAkD,eAAAH,CAAA,CAAsB,CAAA,CAAA,EAQrDlC,EAAA,EACDjB,EAAA,GAAA;SAAA,EAAAU,EAAA,GAAA,IAAA,EAAA,kBAOAV,EAAA,GAAA;SAAA,EAAAiB,EAAA,EACAjB,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,gBAAA,EAAA,EACAD,EAAA,GAAA;SAAA,EAAAU,EAAA,GAAA,IAAA,EAAA,kBAAmKV,EAAA,GAAA,GAAA,EAAAiB,EAAA,EACnKjB,EAAA,GAAA;SAAA,EACAA,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,SAAA,EAAA,EACAD,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,gBAAA,EAAA,EACJD,EAAA,GAAA;KAAA,oBAlHIE,EAAA,EAAAiC,EAAA/B,EAAAkB,kCAAAlB,EAAAmB,+BAAAO,KAAA,CAAA1B,EAAAqD,oBAAA,EAAA,EAAA,EAGAvD,EAAA,EAAAiC,EAAA/B,EAAAkB,kCAAAlB,EAAAmB,+BAAAO,KAAA1B,EAAAsD,qBAAA,EAAA,EAAA,EAGAxD,EAAA,EAAAiC,EAAA/B,EAAAkB,kCAAAlB,EAAAmB,+BAAAI,OAAAvB,EAAAuD,sBAAA,CAAAvD,EAAAwD,iBAAA,EAAA,EAAA,EAGA1D,EAAA,EAAAiC,EAAA/B,EAAAkB,kCAAAlB,EAAAmB,+BAAAI,OAAAvB,EAAAuD,sBAAAvD,EAAAwD,kBAAA,CAAAxD,EAAAyD,oBAAA,EAAA,EAAA,EAGA3D,EAAA,EAAAiC,EAAA/B,EAAA0D,eAAA,EAAAC,OAAA,EAAA,EAAA,EAAA,EAMI7D,EAAA,EAAAC,EAAA,eAAAC,EAAA4D,aAAA,EAKQ9D,EAAA,CAAA,EAAA+D,EAAA;sBAAA7D,EAAAkB,kCAAAlB,EAAAmB,+BAAAO,IAAA,MAAA1B,EAAAkB,kCAAAlB,EAAAmB,+BAAAI,MAAA,QAAA,QAAA;iBAAA,EASAzB,EAAA,CAAA,EAAAgE,EAAA9D,EAAA+D,wBAAA,EA8BJjE,EAAA,CAAA,EAAAC,EAAA,qBAAAC,EAAAgE,0BAAA,EAAA,CAAA,EAEClE,EAAA,EAAA+D,EAAA,GAAA7D,EAAAgE,0BAAA,EAAA,GAAA,EAGDlE,EAAA,CAAA,EAAAiC,EAAA/B,EAAAiE,eAAA,EAAA,GAAA,EAAA,EA2BJnE,EAAA,CAAA,EAAAoE,EAAA,cAAAlE,EAAAmE,SAAA,EAKAC,EAAA,eAAApE,EAAAmE,UAAA,uCAAA,oCAAA,EARApE,EAAA,qBAAAC,EAAAgE,0BAAA,EAAA,CAAA,EAAuD,WAAA,CAAAhE,EAAAiD,WAAA,EAavDnD,EAAA,CAAA,EAAAC,EAAA,OAAAmC,EAAA,GAAA,GAAAlC,EAAAqE,YAAA,CAAA,EAAAjC,CAAA,EAAgC,kBAAAkC,EAAA,GAAAC,GAAAvE,EAAAwE,OAAA,CAAA,EAMqB1E,EAAA,CAAA,EAAAC,EAAA,OAAAmC,EAAA,GAAA,GAAAlC,EAAAyE,mBAAA,CAAA,EAAArC,CAAA,GD9FjE,IAAYjB,EAAZ,SAAYA,EAA8B,CACtCA,OAAAA,EAAA,SAAA,WACAA,EAAA,MAAA,QACAA,EAAA,IAAA,MAHQA,CAIZ,EAJYA,GAA8B,CAAA,CAAA,EA0B7BuD,IAAmB,IAAA,CAA1B,MAAOA,CAAmB,CACpBC,iBAAmBC,EAAOC,EAAgB,EAC1CC,uBAAyBF,EAAOG,EAAsB,EACtDC,uBAAyBJ,EAAOK,EAAsB,EACtDC,eAAiBN,EAAOO,EAAc,EACtCC,eAAiBR,EAAOS,EAAc,EACtCC,aAAeV,EAAOW,EAAmB,EACzCC,qBAAuBZ,EAAOa,EAAoB,EAClDC,mBAAqBd,EAAOe,EAAkB,EAC9CC,aAAehB,EAAOiB,EAAY,EAClCC,OAASlB,EAAOmB,CAAM,EAEXC,cAAgBA,GAChBC,oBAAsBA,EACtB9E,+BAAiCA,EAEpD+E,QAAUC,EAAe,EAAK,EAG9BC,aAAeD,EAAME,SAAQ,EAC7BC,cAAgBH,EAAME,SAAQ,EAC9B/D,4BAA8B6D,EAAME,SAAQ,EAC5C3C,eAAiByC,EAAiD,CAAA,CAAE,EACpEI,SAAWJ,EAAK,EAChBK,gBAAkBL,EAAe,EAAK,EAGtCpC,yBAA2B,CAAC5C,EAA+BC,SAAUD,EAA+BI,MAAOJ,EAA+BO,GAAG,EAC7IR,gCAAkCC,EAA+BC,SAEjEqC,oBAAsB,GACtBD,iBAAmB,GAEnBiD,WAAa,GACbC,eACAC,kBAEA1C,eAAiB2C,EAAgB,EAAK,EACtCC,gBAAkB,GAElB5D,YAAc,GACdI,oBAAsB,GACtBC,qBAAuB,GACvBC,qBAAuB,GAEvBuD,eACAC,oBACA9G,iBACAE,kBACAC,gBACAC,gBACA2G,KACAC,QACArD,cACAO,UAAY,GACZ+C,oBACAC,oBACArG,eAEAsG,eAAsB,CAAEC,KAAM,UAAWC,SAAU,0CAA0C,EAC7FC,yBAA0D,IAAIC,IAAI,CAAC,CAACvB,EAAoBwB,MAAO,KAAKL,cAAc,CAAC,CAAC,EAG3GM,OAASA,GACTrF,eAAiBA,GAC1BmC,QAEAmD,aAAA,CACI,KAAKpE,qBAAuB,KAAKuC,OAAO8B,IAAIC,SAAS,mBAAmB,EAExEC,EAAO,IAAWC,EAAA,sBACd,GAAI,KAAKrE,eAAc,EAAGC,OAAQ,CAC9B,IAAMqE,EAAuB,KAAKxC,qBAAqBwC,qBAAqB,KAAKzB,SAAQ,CAAE,EAC3F,KAAKY,oBAAsB,KAAK3B,qBAAqByC,gCAAgC,KAAKvE,eAAc,EAAIsE,CAAoB,GAAK,KAAKtE,eAAc,EAAG,CAAC,EAC5J,KAAK5C,eAAiBA,EAAe,KAAKqG,mBAAmB,EAC7D,KAAKD,oBAAsB,CAAC,CAAC,KAAKC,qBAAqBe,IAC3D,CAEA,KAAKtE,cAAgB,KAAKuE,iBAAgB,CAC9C,EAAC,EAEDL,EAAO,IAAK,CACJ,CAAC,KAAKvE,sBAAwB,KAAKU,eAAc,GACjD,KAAKmE,wCAAuC,CAEpD,CAAC,CACL,CAEMC,UAAQ,QAAAN,EAAA,sBACV,IAAMf,EAAO,MAAM,KAAK9B,eAAeoD,SAAQ,EAC1CtB,IAGL,KAAKA,KAAOA,EAEZ,MAAM,KAAKuB,gBAAe,EAG1B,KAAKnD,eAAeoD,eAAc,EAAGC,UAAWC,GAAe,CAC3D,KAAK5B,eAAiB4B,EAAYC,WAClC,KAAKjC,eAAiBgC,EAAYE,oBAE9BF,EAAYG,oCAAoClF,SAChD,KAAKI,yBAA2B2E,EAAYG,mCAAmCC,OAAQC,GACnFC,OAAOC,OAAO9H,CAA8B,EAAE0G,SAASkB,CAAwC,CAAC,GAGpGL,EAAY/B,oBACZ,KAAKA,kBAAoB+B,EAAY/B,mBAGzC,KAAK1C,eAAeiF,IAAIR,EAAYS,eAAetB,SAASuB,EAAe,CAAC,EAC5E,KAAKvC,gBAAkB6B,EAAYS,eAAetB,SAASwB,EAAc,EAEzE,KAAKC,kBAAkBZ,CAAW,CACtC,CAAC,EAED,KAAKhD,mBAAmB6D,mBAAkB,EAAGC,KAAMjC,GAA4B,CACvEA,EAAyBkC,OACzB,KAAKlC,yBAA2BA,GAEpC,KAAK/C,QAAU,KAAKkF,OAAM,EAAGrC,IACjC,CAAC,EACL,GAEO5F,WAAS,CACZ,KAAKP,gCAAkCC,EAA+BO,IAEtE,KAAKuB,YAAc,KAAKI,qBAAuB,KAAKwD,gBACpD,KAAK8C,oBAAmB,CAC5B,CAEOrI,eAAa,CAChB,KAAKJ,gCAAkCC,EAA+BI,MAElE,KAAKgC,sBACL,KAAKE,oBAAsBmG,EAAK,EAAGC,SAASD,EAAM,KAAK5C,KAAK8C,wBAAwB,CAAC,EACrF,KAAKtG,iBAAmB,CAAC,CAAC,KAAKwD,KAAK+C,gBAAgBC,WAAW,OAAO,EACtE,KAAK/G,YAAc,KAAKO,kBAAoB,KAAKC,qBAEjD,KAAKR,YAAc,CAAC,CAAC,KAAKkE,qBAAqB4C,eAEnD,KAAKJ,oBAAmB,CAC5B,CAEO3I,kBAAgB,CACnB,KAAKE,gCAAkCC,EAA+BC,SAEtE,KAAK6B,YAAc,GACnB,KAAK0G,oBAAmB,CAC5B,CAEQA,qBAAmB,CACvB,KAAKrE,aAAa2E,MAAM,oBAAqB,KAAK/I,+BAA+B,CACrF,CAEOgJ,UAAUC,EAAwBvC,EAAW,CAChD,OAAO,KAAKjD,iBAAiByF,QAAQD,CAAc,EAAEE,QAAQ,cAAe,YAAYzC,CAAG,0BAA0B,CACzH,CAEQ0C,kBAAgB,CACpB,OAAO,KAAKnD,qBAAqBb,eAAiB,KAAKA,cAAa,CACxE,CAEAiE,SAAO,CACH,KAAKrJ,gCAAkC,KAAK6C,yBAAyB8D,SAAS,KAAKvC,aAAakF,SAAS,mBAAmB,CAAC,EACvH,KAAKlF,aAAakF,SAAS,mBAAmB,EAC9C,KAAKzG,yBAAyB,CAAC,EAEjC,KAAK0G,QACL,KAAKhJ,UAAS,EAEd,KAAKiJ,UACL,KAAKpJ,cAAa,EAElB,KAAKqJ,aACL,KAAK3J,iBAAgB,CAE7B,CAMAgD,0BAA0B4G,EAAoB,GAAI,CAC9C,GAAI,KAAKH,QAAU,KAAK/D,eACpB,OAAO,KAAKmE,eAAe,KAAKP,iBAAgB,CAAE,EAEtD,IAAM1C,EAAM,KAAK0C,iBAAgB,EAC3BQ,EAAQF,EAAoB,aAAe,KAAKG,aAAY,EAE5DC,EAAc,MAAM,KAAKhE,KAAKiE,KAAK,GAAG,KAAKP,SAAW,IAAII,CAAK,GAAK,EAAE,IAE5E,OAAKlD,EAAIC,SAAS,GAAG,EAKVD,EAAIyC,QAAQ,WAAYW,CAAW,EAHnCpD,EAAIyC,QAAQ,MAAOW,CAAW,CAK7C,CAEA5C,yCAAuC,CACnC,KAAK1E,eAAc,EAAGwH,QAASC,GAAiB,CACxCA,EAAcC,IAAM,CAACD,EAAcpB,gBACnC,KAAKsB,gCAAgCF,CAAa,CAE1D,CAAC,CACL,CAMAE,gCAAgCF,EAAsD,CAClF,KAAKjG,eAAeoG,kBAAkBH,EAAeC,EAAG,EAAE3C,UAAU,CAChE8C,KAAOC,GAA6B,CAC5BA,EAAIC,OACJN,EAAcpB,eAAiByB,EAAIC,KACnC,KAAKxI,YAAc,KAAKyH,SAEhC,EACAgB,MAAQA,GAA4B,CAC5BA,EAAMC,QAAU,KAChB,KAAKC,qCAAqCT,CAAa,EAEvDO,EAAMC,QAAU,KAChB,KAAK/F,aAAaiG,QAAQ,eAAe,CAEjD,EACH,CACL,CAKAD,qCAAqCT,EAAsD,CACvF,KAAKjG,eAAe4G,qBAAqBX,EAAeC,EAAG,EAAE3C,UAAU,CACnE8C,KAAOC,GAA6B,CAC5BA,EAAIC,OACJN,EAAcpB,eAAiByB,EAAIC,KACnC,KAAKxI,YAAc,KAAKyH,SAEhC,EACAgB,MAAQA,GAA4B,CAC5BA,EAAMC,QAAU,KAChB,KAAK/F,aAAaiG,QAAQ,eAAe,CAEjD,EACH,CACL,CAEQd,cAAY,CAChB,OAAI,KAAKL,SACD,KAAKnH,qBACE,KAAKyD,KAAK+C,eAEV,KAAK5C,qBAAqB4C,eAGlC,EACX,CAKA5H,sBAAoB,CAChB,OAAO,KAAK+E,oBAAsB,KAAK6E,qBAAqB,KAAKzB,iBAAgB,CAAE,EAAI,KAAKA,iBAAgB,CAChH,CAOQyB,qBAAqBnE,EAAW,CAEpC,OAAOA,EAAIyC,QAAQ,mBAAoB,KAAK,KAAKrD,KAAKiE,KAAK,KAAK,CACpE,CAKQJ,eAAejD,EAAW,CAC9B,OAAOA,EAAIyC,QAAQ,iCAAkC,KAAK3D,eAAiB,IAAI,CACnF,CAKAxD,eAAe8I,EAAmB,CAC1BA,IACA,KAAK7H,UAAY,GACjB8H,WAAW,IAAK,CACZ,KAAK9H,UAAY,EACrB,EAAG,GAAI,EAEf,CAMAM,oBAAkB,CACd,OAAO,KAAKK,uBAAuBL,mBAAmB,KAAKkC,kBAAmB,KAAK3C,0BAA0B,EAAK,CAAC,CACvH,CAEAK,aAAW,CACP,OAAO,KAAKS,uBAAuBT,YAAY,KAAKL,0BAA0B,EAAK,EAAG,KAAK0F,OAAM,CAAE,CACvG,CAEAA,QAAM,CACF,OACI,KAAKnC,yBAAyB2E,IAAI,KAAK3F,SAAQ,GAAI4F,qBAAuBlG,EAAoBwB,KAAK,GACnG,KAAKF,yBAAyB2E,IAAIjG,EAAoBwB,KAAK,GAC3D,KAAKL,cAEb,CAEAxG,oBAAkB,CACd,KAAKE,eAAiB,CAAC,KAAKA,eAC5B,KAAKqG,oBAAsB,KAAK3B,qBAAqByC,gCAAgC,KAAKvE,eAAc,EAAI,KAAK5C,cAAc,EAC/H,KAAK8C,cAAgB,KAAK9C,eAAiB,qDAAuD,kDAC9F,KAAKqG,oBAAoB4C,iBACzB,KAAK/C,KAAK+C,eAAiB,KAAK5C,oBAAoB4C,eAE5D,CAEA,IAAIW,UAAQ,CACR,OAAO,KAAKxJ,kCAAoCC,EAA+BI,KACnF,CAEA,IAAIkJ,QAAM,CACN,OAAO,KAAKvJ,kCAAoCC,EAA+BO,GACnF,CAEA,IAAIiJ,aAAW,CACX,OAAO,KAAKzJ,kCAAoCC,EAA+BC,QACnF,CAIcmH,iBAAe,QAAAR,EAAA,sBAEzB,GADA,KAAKd,QAAU,MAAM,KAAKjC,uBAAuBoH,iBAAgB,EAC7D,KAAKnF,QAAS,CACd,IAAMoF,EAAMzC,EAAK,EACjB,KAAKvG,oBAAsB,KAAK4D,QAAQtD,OAAS,EACjD,KAAKL,qBAAuB,KAAK2D,QAAQqF,KAAMC,GAAO,CAClD,GAAIA,EAAIC,WACJ,OAAO5C,EAAM2C,EAAIC,UAAU,EAAE3C,SAASwC,CAAG,CAEjD,CAAC,CACL,CACJ,GAEQ/C,kBAAkBZ,EAAwB,CAC1C,KAAKzE,eAAc,GACnB,KAAK8C,oBAAsB,GAAG0F,OAAOC,SAASC,MAAM,2BACpD,KAAK7F,eAAiB,GAAG2F,OAAOC,SAASC,MAAM,sBAE/C,KAAK7F,eAAiB4B,EAAYC,WAEtC,KAAKvI,gBAAkB,KAAK8J,UAAU,yCAA0C,KAAKnD,mBAAmB,EACxG,KAAK1G,gBAAkB,KAAK6J,UAAU,gDAAiD,KAAKnD,mBAAmB,EAC/G,KAAK9G,iBAAmB,KAAKiK,UAAU,uCAAwC,KAAKpD,cAAc,EAClG,KAAK3G,kBAAoB,KAAK+J,UAAU,8CAA+C,KAAKpD,cAAc,CAC9G,CAEQqB,kBAAgB,CACpB,OAAI,KAAKzE,eAAc,EAAGC,QACtB,KAAK7C,eAAiBA,EAAe,KAAKqG,mBAAmB,EACtD,KAAKrG,gBAAkB,CAAC,KAAKyF,SAAQ,GAAIqG,cAC1C,qDACA,mDAEC,oDAEf,4CAzXSlI,EAAmB,2BAAnBA,EAAmBmI,UAAA,CAAA,CAAA,iBAAA,CAAA,EAAAC,OAAA,CAAA5G,QAAA,CAAA,EAAA,SAAA,EAAAE,aAAA,CAAA,EAAA,cAAA,EAAAE,cAAA,CAAA,EAAA,eAAA,EAAAhE,4BAAA,CAAA,EAAA,6BAAA,EAAAoB,eAAA,CAAA,EAAA,gBAAA,EAAA6C,SAAA,CAAA,EAAA,UAAA,EAAAC,gBAAA,CAAA,EAAA,iBAAA,CAAA,EAAAuG,MAAA,EAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,aAAA,EAAA,EAAA,CAAA,6BAAA,GAAA,YAAA,aAAA,YAAA,OAAA,EAAA,cAAA,EAAA,QAAA,aAAA,mBAAA,cAAA,gBAAA,cAAA,kBAAA,aAAA,WAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,SAAA,EAAA,SAAA,IAAA,YAAA,MAAA,EAAA,CAAA,aAAA,oCAAA,cAAA,GAAA,OAAA,QAAA,EAAA,YAAA,EAAA,gBAAA,MAAA,EAAA,CAAA,oBAAA,GAAA,OAAA,SAAA,EAAA,MAAA,cAAA,SAAA,kBAAA,qBAAA,EAAA,CAAA,kBAAA,GAAA,EAAA,gBAAA,EAAA,YAAA,MAAA,EAAA,CAAA,EAAA,YAAA,2BAAA,4BAAA,EAAA,2BAAA,oBAAA,EAAA,CAAA,EAAA,SAAA,oBAAA,EAAA,CAAA,cAAA,oBAAA,OAAA,SAAA,EAAA,MAAA,cAAA,SAAA,OAAA,EAAA,YAAA,QAAA,EAAA,2BAAA,qBAAA,WAAA,cAAA,EAAA,CAAA,SAAA,gBAAA,eAAA,8CAAA,EAAA,MAAA,cAAA,SAAA,EAAA,OAAA,iBAAA,EAAA,CAAA,YAAA,aAAA,OAAA,+CAAA,EAAA,CAAA,SAAA,gBAAA,eAAA,oDAAA,EAAA,MAAA,cAAA,SAAA,EAAA,MAAA,EAAA,CAAA,OAAA,gBAAA,EAAA,aAAA,SAAA,WAAA,UAAA,EAAA,CAAA,YAAA,aAAA,OAAA,qDAAA,EAAA,CAAA,EAAA,QAAA,gBAAA,EAAA,WAAA,EAAA,CAAA,EAAA,aAAA,aAAA,EAAA,CAAA,cAAA,GAAA,KAAA,kBAAA,OAAA,WAAA,EAAA,mBAAA,EAAA,QAAA,SAAA,EAAA,CAAA,MAAA,kBAAA,eAAA,gDAAA,EAAA,kBAAA,EAAA,CAAA,KAAA,iBAAA,EAAA,OAAA,EAAA,CAAA,KAAA,0BAAA,EAAA,OAAA,EAAA,CAAA,KAAA,eAAA,EAAA,OAAA,EAAA,CAAA,SAAA,SAAA,MAAA,sBAAA,EAAA,MAAA,gBAAA,SAAA,OAAA,yBAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,SAAA,SAAA,MAAA,sBAAA,EAAA,MAAA,gBAAA,SAAA,OAAA,yBAAA,EAAA,YAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAA,GAAAD,EAAA,EAAA,WC3DhCE,EAAA,CAAA,EACIzN,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,SAAA,CAAA,0BAWIC,EAAA,QAAA,UAAA,CAAA+M,OAAA9M,EAAA+M,CAAA,EAAA5M,EAASyM,EAAA7C,QAAA,CAAS,CAAA,CAAA,EAGrB1J,EAAA,EACDjB,EAAA,EAAA;KAAA,EAAA+B,EAAA,EAAA6L,GAAA,GAAA,GAAA,cAAA,KAAA,EAAAC,CAAA,EAoHJ7N,EAAA,EAAA;CAAA,MACAA,EAAA,EAAA;CAAA,qBAlIQE,EAAA,CAAA,EAAAC,EAAA,aAAAqN,EAAA1F,MAAA,EAAqB,mBAAA0F,EAAApH,cAAA0H,oBAAA,EAEkC,cAAAxL,EAAA,EAAA,EAAA,iCAAA,CAAA,EACa,gBAAAkL,EAAAlH,QAAA,CAAA,EACzC,cAAAkH,EAAAhH,aAAA,CAAA,EACG,kBAAAgH,EAAA5G,gBAAA,CAAA,EACO,aAAAmH,CAAA,EACZ,YAAA,SAAA,kBDkCzBC,GACAC,GACAC,GACAC,GACAC,EACAC,EACAC,EACAC,GACAC,GACAC,EACAC,GACAC,GACAC,EAAW,EAAAC,OAAA,CAAA,0jBAAA,CAAA,CAAA,SAGN/J,CAAmB,GAAA",
  "names": ["ExternalCloningService", "buildSourceTreeUrl", "baseUrl", "cloneUrl", "encodeURI", "undefined", "buildIdeUrl", "ide", "deepLink", "includes", "replace", "encodeURIComponent", "factory", "\u0275fac", "providedIn", "SafeUrlPipe", "sanitizer", "inject", "DomSanitizer", "transform", "value", "bypassSecurityTrustUrl", "pure", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "sshKeyMissingTip", "\u0275\u0275sanitizeHtml", "sshKeysExpiredTip", "tokenMissingTip", "tokenExpiredTip", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "switchPracticeMode", "\u0275\u0275elementEnd", "isPracticeMode", "_r5", "useHttpsPassword", "\u0275\u0275classMapInterpolate1", "selectedAuthenticationMechanism", "RepositoryAuthenticationMethod", "Password", "_r6", "useHttpsToken", "Token", "_r7", "useSshUrl", "SSH", "\u0275\u0275template", "CodeButtonComponent_ng_template_5_For_18_Conditional_1_Template", "CodeButtonComponent_ng_template_5_For_18_Conditional_2_Template", "CodeButtonComponent_ng_template_5_For_18_Conditional_3_Template", "\u0275\u0275conditional", "mechanism_r8", "\u0275\u0275styleProp", "\u0275\u0275pipeBind1", "getHttpRepositoryUri", "\u0275\u0275sanitizeUrl", "faExternalLink", "routerLinkForRepositoryView", "CodeButtonComponent_ng_template_5_Conditional_1_Template", "CodeButtonComponent_ng_template_5_Conditional_2_Template", "CodeButtonComponent_ng_template_5_Conditional_3_Template", "CodeButtonComponent_ng_template_5_Conditional_4_Template", "CodeButtonComponent_ng_template_5_Conditional_5_Template", "\u0275\u0275repeaterCreate", "CodeButtonComponent_ng_template_5_For_18_Template", "\u0275\u0275repeaterTrackByIdentity", "$event", "_r2", "copyEnabled", "onCopyFinished", "CodeButtonComponent_ng_template_5_Conditional_26_Template", "CodeButtonComponent_ng_template_5_Conditional_27_Template", "doesUserHaveSSHkeys", "areAnySshKeysExpired", "isInCourseManagement", "userTokenPresent", "userTokenStillValid", "participations", "length", "cloneHeadline", "\u0275\u0275textInterpolate1", "\u0275\u0275repeater", "authenticationMechanisms", "getHttpOrSshRepositoryUri", "localVCEnabled", "\u0275\u0275classProp", "wasCopied", "\u0275\u0275propertyInterpolate", "buildIdeUrl", "\u0275\u0275pureFunction1", "_c0", "ideName", "buildSourceTreeUrl", "CodeButtonComponent", "translateService", "inject", "TranslateService", "externalCloningService", "ExternalCloningService", "sshUserSettingsService", "SshUserSettingsService", "accountService", "AccountService", "profileService", "ProfileService", "localStorage", "LocalStorageService", "participationService", "ParticipationService", "ideSettingsService", "IdeSettingsService", "alertService", "AlertService", "router", "Router", "FeatureToggle", "ProgrammingLanguage", "loading", "input", "smallButtons", "required", "repositoryUri", "exercise", "hideLabelMobile", "sshEnabled", "sshTemplateUrl", "versionControlUrl", "signal", "gitlabVCEnabled", "sshSettingsUrl", "vcsTokenSettingsUrl", "user", "sshKeys", "isTeamParticipation", "activeParticipation", "vscodeFallback", "name", "deepLink", "programmingLanguageToIde", "Map", "EMPTY", "faCode", "constructor", "url", "includes", "effect", "__async", "shouldPreferPractice", "getSpecificStudentParticipation", "team", "getCloneHeadline", "loadVcsAccessTokensForAllParticipations", "ngOnInit", "identity", "checkForSshKeys", "getProfileInfo", "subscribe", "profileInfo", "sshKeysURL", "sshCloneURLTemplate", "repositoryAuthenticationMechanisms", "filter", "method", "Object", "values", "set", "activeProfiles", "PROFILE_LOCALVC", "PROFILE_GITLAB", "configureTooltips", "loadIdePreferences", "then", "size", "getIde", "storeToLocalStorage", "dayjs", "isBefore", "vcsAccessTokenExpiryDate", "vcsAccessToken", "startsWith", "store", "formatTip", "translationKey", "instant", "replace", "getRepositoryUri", "onClick", "retrieve", "useSsh", "useToken", "usePassword", "insertPlaceholder", "getSshCloneUrl", "token", "getUsedToken", "credentials", "login", "forEach", "participation", "id", "loadParticipationVcsAccessToken", "getVcsAccessToken", "next", "res", "body", "error", "status", "createNewParticipationVcsAccessToken", "warning", "createVcsAccessToken", "repositoryUriForTeam", "successful", "setTimeout", "get", "programmingLanguage", "getCachedSshKeys", "now", "some", "key", "expiryDate", "window", "location", "origin", "exerciseGroup", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "i0", "_r1", "CodeButtonComponent_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "ProgrammingExercises", "popContent_r9", "ExerciseActionButtonComponent", "FeatureToggleDirective", "NgbPopover", "TranslateDirective", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "CdkCopyToClipboard", "FaIconComponent", "RouterLink", "HelpIconComponent", "ArtemisTranslatePipe", "SafeUrlPipe", "styles"]
}
