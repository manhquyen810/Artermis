{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/notification-settings/notification-settings.component.ts", "src/main/webapp/app/shared/user-settings/notification-settings/notification-settings.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { UserSettingsDirective } from 'app/shared/user-settings/user-settings.directive';\r\nimport { UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { NotificationSetting } from 'app/shared/user-settings/notification-settings/notification-settings-structure';\r\nimport { UserSettingsStructure } from 'app/shared/user-settings/user-settings.model';\r\nimport { faInfoCircle, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { NotificationSettingsService, reloadNotificationSideBarMessage } from 'app/shared/user-settings/notification-settings/notification-settings.service';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { HasAnyAuthorityDirective } from '../../auth/has-any-authority.directive';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\nexport enum NotificationSettingsCommunicationChannel {\r\n    WEBAPP,\r\n    EMAIL,\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-notification-settings',\r\n    templateUrl: 'notification-settings.component.html',\r\n    styleUrls: ['../user-settings.scss'],\r\n    imports: [\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        // NOTE: this is actually used in the html template, otherwise *jhiHasAnyAuthority would not work\r\n        HasAnyAuthorityDirective,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class NotificationSettingsComponent extends UserSettingsDirective implements OnInit {\r\n    private notificationSettingsService = inject(NotificationSettingsService);\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faInfoCircle = faInfoCircle;\r\n\r\n    declare userSettings: UserSettingsStructure<NotificationSetting>;\r\n    declare settings: Array<NotificationSetting>;\r\n\r\n    // needed for HTML access\r\n    readonly communicationChannel = NotificationSettingsCommunicationChannel;\r\n\r\n    ngOnInit(): void {\r\n        this.userSettingsCategory = UserSettingsCategory.NOTIFICATION_SETTINGS;\r\n        this.changeEventMessage = reloadNotificationSideBarMessage;\r\n\r\n        // check if settings are already loaded\r\n        const newestNotificationSettings: NotificationSetting[] = this.notificationSettingsService.getNotificationSettings();\r\n        if (newestNotificationSettings.length === 0) {\r\n            // if no settings are already available load them from the server\r\n            super.ngOnInit();\r\n        } else {\r\n            // else reuse the already available/loaded ones\r\n            this.userSettings = this.userSettingsService.loadSettingsSuccessAsSettingsStructure(newestNotificationSettings, this.userSettingsCategory);\r\n            this.settings = this.userSettingsService.extractIndividualSettingsFromSettingsStructure(this.userSettings);\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Catches the toggle event from a user click\r\n     * Toggles the respective setting and mark it as changed (only changed settings will be send to the server for saving)\r\n     */\r\n    toggleSetting(event: any, communicationChannel: NotificationSettingsCommunicationChannel) {\r\n        this.settingsChanged = true;\r\n        let settingId = event.currentTarget.id;\r\n        // optionId String could have an appended (e.g.( \" email\" or \" webapp\" to specify which option to toggle\r\n        if (settingId.indexOf(' ') !== -1) {\r\n            settingId = settingId.slice(0, settingId.indexOf(' '));\r\n        }\r\n        const settingToUpdate = this.settings.find((setting) => setting.settingId === settingId);\r\n        if (!settingToUpdate) {\r\n            return;\r\n        }\r\n        // toggle/inverts previous setting\r\n        switch (communicationChannel) {\r\n            case NotificationSettingsCommunicationChannel.WEBAPP: {\r\n                settingToUpdate!.webapp = !settingToUpdate!.webapp;\r\n                break;\r\n            }\r\n            case NotificationSettingsCommunicationChannel.EMAIL: {\r\n                settingToUpdate!.email = !settingToUpdate!.email;\r\n                break;\r\n            }\r\n        }\r\n        settingToUpdate.changed = true;\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between\">\r\n    <div>\r\n        <h1>\r\n            <!--UserSettingsCategory-->\r\n            {{ 'artemisApp.userSettings.categories.' + userSettingsCategory | artemisTranslate }}\r\n        </h1>\r\n        <div class=\"d-inline-flex userSettings-info\">\r\n            <fa-icon class=\"ng-fa-icon\" [icon]=\"faInfoCircle\" />\r\n            <span class=\"ps-1\" jhiTranslate=\"artemisApp.userSettings.notificationSettingsFilterInfo\"></span>\r\n        </div>\r\n    </div>\r\n    @if (settingsChanged) {\r\n        <button type=\"button\" class=\"btn btn-primary\" id=\"apply-changes-button\" (click)=\"this.saveSettings()\">\r\n            <fa-icon class=\"ng\" [icon]=\"faSave\" />\r\n            {{ 'artemisApp.userSettings.saveChanges' | artemisTranslate }}\r\n        </button>\r\n    }\r\n</div>\r\n@if (userSettings) {\r\n    <div class=\"list-group d-block\">\r\n        @for (settingGroup of userSettings.groups; track settingGroup) {\r\n            <div>\r\n                <div *jhiHasAnyAuthority=\"settingGroup.restrictionLevels\" class=\"list-group-item\">\r\n                    <h3>\r\n                        <!--GroupName-->\r\n                        <!-- please look at the README.md file to understand how the translation works -->\r\n                        {{ 'artemisApp.userSettings.settingGroupNames.' + settingGroup.key | artemisTranslate }}\r\n                    </h3>\r\n                    @for (setting of settingGroup.settings; track setting) {\r\n                        <div>\r\n                            <dt>\r\n                                <!--SettingName-->\r\n                                {{ 'artemisApp.userSettings.settingNames.' + setting.key | artemisTranslate }}\r\n                            </dt>\r\n                            <span>\r\n                                <!--SettingDescription-->\r\n                                {{ 'artemisApp.userSettings.settingDescriptions.' + setting.descriptionKey | artemisTranslate }}\r\n                            </span>\r\n                            <!--Setting Specific Properties-->\r\n                            <div class=\"d-flex\">\r\n                                @if (setting.webapp !== undefined && (setting.webappSupport === undefined || setting.webappSupport)) {\r\n                                    <div class=\"form-check pe-3\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            class=\"form-check-input\"\r\n                                            [checked]=\"setting.webapp\"\r\n                                            id=\"{{ setting.settingId }}\"\r\n                                            value=\"{{ setting.webapp }}\"\r\n                                            (click)=\"toggleSetting($event, communicationChannel.WEBAPP)\"\r\n                                        />\r\n                                        <label class=\"form-check-label\" for=\"{{ setting.settingId }}\">WebApp</label>\r\n                                    </div>\r\n                                }\r\n                                @if (setting.email !== undefined && setting.emailSupport) {\r\n                                    <div class=\"form-check\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            class=\"form-check-input\"\r\n                                            [checked]=\"setting.email\"\r\n                                            id=\"{{ setting.settingId }} email\"\r\n                                            value=\"{{ setting.email }}\"\r\n                                            (click)=\"toggleSetting($event, communicationChannel.EMAIL)\"\r\n                                        />\r\n                                        <label class=\"form-check-label\" for=\"{{ setting.settingId }} email\">Email</label>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "saveSettings", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faSave", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "$event", "_r3", "toggleSetting", "communicationChannel", "WEBAPP", "\u0275\u0275propertyInterpolate", "setting_r4", "settingId", "webapp", "_r5", "EMAIL", "\u0275\u0275propertyInterpolate1", "email", "\u0275\u0275template", "NotificationSettingsComponent_Conditional_19_For_4_div_3_For_9_Conditional_16_Template", "NotificationSettingsComponent_Conditional_19_For_4_div_3_For_9_Conditional_17_Template", "key", "descriptionKey", "\u0275\u0275conditional", "undefined", "webappSupport", "emailSupport", "\u0275\u0275repeaterCreate", "NotificationSettingsComponent_Conditional_19_For_4_div_3_For_9_Template", "\u0275\u0275repeaterTrackByIdentity", "settingGroup_r6", "\u0275\u0275repeater", "settings", "NotificationSettingsComponent_Conditional_19_For_4_div_3_Template", "restrictionLevels", "NotificationSettingsComponent_Conditional_19_For_4_Template", "userSettings", "groups", "NotificationSettingsCommunicationChannel", "NotificationSettingsComponent", "UserSettingsDirective", "notificationSettingsService", "inject", "NotificationSettingsService", "faInfoCircle", "ngOnInit", "userSettingsCategory", "UserSettingsCategory", "NOTIFICATION_SETTINGS", "changeEventMessage", "reloadNotificationSideBarMessage", "newestNotificationSettings", "getNotificationSettings", "length", "userSettingsService", "loadSettingsSuccessAsSettingsStructure", "extractIndividualSettingsFromSettingsStructure", "changeDetector", "detectChanges", "event", "settingsChanged", "currentTarget", "id", "indexOf", "slice", "settingToUpdate", "find", "setting", "changed", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "NotificationSettingsComponent_Conditional_17_Template", "NotificationSettingsComponent_Conditional_19_Template", "FaIconComponent", "TranslateDirective", "HasAnyAuthorityDirective", "ArtemisTranslatePipe", "styles"]
}
