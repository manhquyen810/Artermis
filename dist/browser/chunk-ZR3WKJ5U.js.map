{
  "version": 3,
  "sources": ["src/main/webapp/app/grading-system/base-grading-system/base-grading-system.component.ts"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { GradeType, GradingScale } from 'app/entities/grading-scale.model';\r\nimport { GradeStep } from 'app/entities/grade-step.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { EntityResponseType, GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { Observable, Subject, of } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { download, generateCsv, mkConfig } from 'export-to-csv';\r\nimport { faExclamationTriangle, faInfo, faPlus, faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { PresentationType, PresentationsConfig } from 'app/grading-system/grading-system-presentations/grading-system-presentations.component';\r\n\r\nconst csvColumnsGrade = Object.freeze({\r\n    gradeName: 'gradeName',\r\n    lowerBoundPercentage: 'lowerBoundPercentage',\r\n    upperBoundPercentage: 'upperBoundPercentage',\r\n    isPassingGrade: 'isPassingGrade',\r\n});\r\n\r\nconst csvColumnsBonus = Object.freeze({\r\n    bonusPoints: 'bonusPoints',\r\n    lowerBoundPercentage: 'lowerBoundPercentage',\r\n    upperBoundPercentage: 'upperBoundPercentage',\r\n});\r\n\r\n// needed to map from csv object to grade step\r\nexport type CsvGradeStep = object;\r\n\r\nexport enum GradeEditMode {\r\n    POINTS,\r\n    PERCENTAGE,\r\n}\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class BaseGradingSystemComponent implements OnInit {\r\n    protected gradingSystemService = inject(GradingSystemService);\r\n    private route = inject(ActivatedRoute);\r\n    private translateService = inject(TranslateService);\r\n    private courseService = inject(CourseManagementService);\r\n    private examService = inject(ExamManagementService);\r\n\r\n    GradeType = GradeType;\r\n    ButtonSize = ButtonSize;\r\n    GradingScale = GradingScale;\r\n\r\n    gradingScale = new GradingScale();\r\n    lowerBoundInclusivity = true;\r\n    existingGradingScale = false;\r\n    firstPassingGrade?: string;\r\n    courseId?: number;\r\n    examId?: number;\r\n    isExam = false;\r\n    dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n    isLoading = false;\r\n    invalidGradeStepsMessage?: string;\r\n\r\n    course?: Course;\r\n    exam?: Exam;\r\n    maxPoints?: number;\r\n    presentationsConfig: PresentationsConfig = { presentationType: PresentationType.NONE };\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faPlus = faPlus;\r\n    faTimes = faTimes;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faInfo = faInfo;\r\n\r\n    ngOnInit(): void {\r\n        this.route.parent?.params.subscribe((params) => {\r\n            this.isLoading = true;\r\n            this.courseId = Number(params['courseId']);\r\n            if (params['examId']) {\r\n                this.examId = Number(params['examId']);\r\n                this.isExam = true;\r\n            }\r\n            if (this.isExam) {\r\n                this.handleFindObservable(this.gradingSystemService.findGradingScaleForExam(this.courseId!, this.examId!));\r\n            } else {\r\n                this.handleFindObservable(this.gradingSystemService.findGradingScaleForCourse(this.courseId!));\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleFindObservable(findObservable: Observable<EntityResponseType>) {\r\n        findObservable\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((gradingSystemResponse) => {\r\n                if (gradingSystemResponse.body) {\r\n                    this.handleFindResponse(gradingSystemResponse.body);\r\n                }\r\n                if (this.isExam) {\r\n                    this.examService.find(this.courseId!, this.examId!).subscribe((examResponse) => {\r\n                        this.exam = examResponse.body!;\r\n                        this.maxPoints = this.exam?.examMaxPoints;\r\n                        this.onChangeMaxPoints(this.exam?.examMaxPoints);\r\n                    });\r\n                } else {\r\n                    this.courseService.find(this.courseId!).subscribe((courseResponse) => {\r\n                        this.course = courseResponse.body!;\r\n                        this.gradingScale.course = this.course;\r\n                        this.maxPoints = this.course?.maxPoints;\r\n                        this.onChangeMaxPoints(this.course?.maxPoints);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * If the grading scale exists, sorts its grade steps,\r\n     * and sets the inclusivity and first passing grade properties\r\n     *\r\n     * @param gradingScale the grading scale retrieved from the get request\r\n     */\r\n    handleFindResponse(gradingScale?: GradingScale): void {\r\n        if (gradingScale) {\r\n            gradingScale.gradeSteps = this.gradingSystemService.sortGradeSteps(gradingScale.gradeSteps);\r\n            this.gradingScale = gradingScale;\r\n            this.existingGradingScale = true;\r\n            this.setBoundInclusivity();\r\n            this.determineFirstPassingGrade();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the grade steps by lower bound percentage, sets their inclusivity\r\n     * and passing grade properties and saves the grading scale via the service\r\n     */\r\n    save(): void {\r\n        this.isLoading = true;\r\n        this.gradingScale.gradeSteps = this.gradingSystemService.sortGradeSteps(this.gradingScale.gradeSteps);\r\n        this.setInclusivity();\r\n        this.gradingScale.gradeSteps = this.setPassingGrades(this.gradingScale.gradeSteps);\r\n        // new grade steps shouldn't have ids set\r\n        this.gradingScale.gradeSteps.forEach((gradeStep) => {\r\n            gradeStep.id = undefined;\r\n        });\r\n        if (this.isExam) {\r\n            this.gradingScale.exam = this.exam;\r\n            this.gradingScale.exam!.examMaxPoints = this.maxPoints;\r\n        } else {\r\n            this.gradingScale.course = this.course;\r\n            this.gradingScale.course!.maxPoints = this.maxPoints;\r\n            this.gradingScale.course!.presentationScore = this.presentationsConfig.presentationScore;\r\n        }\r\n        if (this.existingGradingScale) {\r\n            if (this.isExam) {\r\n                this.handleSaveObservable(this.gradingSystemService.updateGradingScaleForExam(this.courseId!, this.examId!, this.gradingScale));\r\n            } else {\r\n                this.handleSaveObservable(this.gradingSystemService.updateGradingScaleForCourse(this.courseId!, this.gradingScale));\r\n            }\r\n        } else {\r\n            if (this.isExam) {\r\n                this.handleSaveObservable(this.gradingSystemService.createGradingScaleForExam(this.courseId!, this.examId!, this.gradingScale));\r\n            } else {\r\n                this.handleSaveObservable(this.gradingSystemService.createGradingScaleForCourse(this.courseId!, this.gradingScale));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the currently entered grade steps are valid based on multiple criteria:\r\n     * - there must be at least one grade step\r\n     * - if max points are defined, they should be at least 0\r\n     * - all fields must be filled out\r\n     * - the percentage values must be at least 0\r\n     * - if max points are defined, all points values must be at least 0\r\n     * - all grade names must be unique\r\n     * - the first passing must be set if the scale is of GRADE type\r\n     * - the bonus points are at least 0 if the scale is of BONUS type\r\n     * - the bonus points must be strictly ascending in values\r\n     * - the max and min % of adjacent grade steps overlap\r\n     * - the first grade step begins at 0%\r\n     */\r\n    validGradeSteps(): boolean {\r\n        if (!this.gradingScale || this.gradingScale.gradeSteps.length === 0) {\r\n            this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.empty');\r\n            return false;\r\n        }\r\n        // check if max points are at least 0, if they are defined\r\n        if (this.maxPoints != undefined && this.maxPoints! < 0) {\r\n            this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.negativeMaxPoints');\r\n            return false;\r\n        }\r\n        // check if any of the fields are empty\r\n        for (const gradeStep of this.gradingScale.gradeSteps) {\r\n            if (gradeStep.gradeName === '' || gradeStep.gradeName === null || gradeStep.lowerBoundPercentage === null || gradeStep.upperBoundPercentage === null) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.emptyFields');\r\n                return false;\r\n            }\r\n            if (this.maxPointsValid() && (gradeStep.lowerBoundPoints == undefined || gradeStep.upperBoundPoints == undefined)) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.emptyFields');\r\n                return false;\r\n            }\r\n        }\r\n        // check if any of the fields have invalid percentages\r\n        for (const gradeStep of this.gradingScale.gradeSteps) {\r\n            if (gradeStep.lowerBoundPercentage! < 0 || gradeStep.lowerBoundPercentage! >= gradeStep.upperBoundPercentage!) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidMinMaxPercentages');\r\n                return false;\r\n            }\r\n        }\r\n        // check if any of the fields have invalid points\r\n        if (this.maxPointsValid()) {\r\n            for (const gradeStep of this.gradingScale.gradeSteps) {\r\n                if (gradeStep.lowerBoundPoints! < 0 || gradeStep.lowerBoundPoints! >= gradeStep.upperBoundPoints!) {\r\n                    this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidMinMaxPoints');\r\n                    return false;\r\n                }\r\n            }\r\n        } else {\r\n            // ensures that all updated have taken place before the grading key can be saved, not really an error, therefore no message is necessary\r\n            for (const gradeStep of this.gradingScale.gradeSteps) {\r\n                if (gradeStep.lowerBoundPoints != undefined || gradeStep.upperBoundPoints != undefined) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        if (this.gradingScale.gradeType === GradeType.GRADE) {\r\n            // check if all grade names are unique if the grading scale is of type GRADE\r\n            if (!this.gradingScale.gradeSteps.map((gradeStep) => gradeStep.gradeName).every((gradeName, index, gradeNames) => gradeNames.indexOf(gradeName) === index)) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.nonUniqueGradeNames');\r\n                return false;\r\n            }\r\n            // check if the first passing grade is set if the grading scale is of type GRADE\r\n            if (this.firstPassingGrade === undefined || this.firstPassingGrade === '') {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.unsetFirstPassingGrade');\r\n                return false;\r\n            }\r\n        }\r\n        // copy the grade steps in a separate array, so they don't get dynamically updated when sorting\r\n        let sortedGradeSteps: GradeStep[] = [];\r\n        this.gradingScale.gradeSteps.forEach((gradeStep) => sortedGradeSteps.push(Object.assign({}, gradeStep)));\r\n        sortedGradeSteps = this.gradingSystemService.sortGradeSteps(sortedGradeSteps);\r\n        if (this.gradingScale.gradeType === GradeType.BONUS) {\r\n            // check if when the grade type is BONUS the bonus points are at least 0\r\n            for (const gradeStep of sortedGradeSteps) {\r\n                if (isNaN(Number(gradeStep.gradeName)) || Number(gradeStep.gradeName) < 0) {\r\n                    this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidBonusPoints');\r\n                    return false;\r\n                }\r\n            }\r\n            // check if when the grade type is BONUS the bonus points have strictly ascending values\r\n            if (\r\n                !sortedGradeSteps\r\n                    .map((gradeStep) => Number(gradeStep.gradeName))\r\n                    .every((bonusPoints, index, bonusPointsArray) => index === 0 || bonusPoints > bonusPointsArray[index - 1])\r\n            ) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.nonStrictlyIncreasingBonusPoints');\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // check if grade steps have valid adjacency\r\n        for (let i = 0; i < sortedGradeSteps.length - 1; i++) {\r\n            if (sortedGradeSteps[i].upperBoundPercentage !== sortedGradeSteps[i + 1].lowerBoundPercentage) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidAdjacency');\r\n                return false;\r\n            }\r\n        }\r\n        // check if first and last grade step are valid\r\n        if (sortedGradeSteps[0].lowerBoundPercentage !== 0 || sortedGradeSteps.last()!.upperBoundPercentage < 100) {\r\n            this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidFirstAndLastStep');\r\n            return false;\r\n        }\r\n        this.invalidGradeStepsMessage = undefined;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the currently entered presentation settings correspond to a valid presentation type based on multiple criteria:\r\n     * - if the presentationType is NONE:\r\n     * -- the presentationsNumber and presentationsWeight must be undefined\r\n     * -- the presentationScore must be 0 or undefined\r\n     * - if the presentationType is BASIC:\r\n     * -- the presentationsNumber and presentationsWeight must be undefined\r\n     * -- the presentationScore must be above 0\r\n     * - if the presentationType is GRADED:\r\n     * -- the presentationsNumber must be a whole number above 0\r\n     * -- the presentationsWeight must be between 0 and 99\r\n     * -- the presentationScore must be 0 or undefined\r\n     */\r\n    validPresentationsConfig(): boolean {\r\n        if (this.presentationsConfig.presentationType === PresentationType.NONE) {\r\n            // The presentationsNumber and presentationsWeight must be undefined\r\n            if (this.presentationsConfig.presentationsNumber !== undefined || this.presentationsConfig.presentationsWeight !== undefined) {\r\n                return false;\r\n            }\r\n            // The presentationScore must be 0 or undefined\r\n            if (this.presentationsConfig.presentationScore !== undefined) {\r\n                return false;\r\n            }\r\n        }\r\n        if (this.presentationsConfig.presentationType === PresentationType.BASIC) {\r\n            // The presentationsNumber and presentationsWeight must be undefined\r\n            if (this.presentationsConfig.presentationsNumber !== undefined || this.presentationsConfig.presentationsWeight !== undefined) {\r\n                return false;\r\n            }\r\n            // The presentationScore must be above 0\r\n            if ((this.course?.presentationScore ?? 0) <= 0) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidPresentationsNumber');\r\n                return false;\r\n            }\r\n        }\r\n        if (this.presentationsConfig.presentationType === PresentationType.GRADED) {\r\n            // The presentationsNumber must be a whole number above 0\r\n            if (\r\n                this.presentationsConfig.presentationsNumber === undefined ||\r\n                !Number.isInteger(this.presentationsConfig.presentationsNumber) ||\r\n                this.presentationsConfig.presentationsNumber < 1\r\n            ) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidPresentationsNumber');\r\n                return false;\r\n            }\r\n            // The presentationsWeight must be between 0 and 100\r\n            if (\r\n                this.presentationsConfig.presentationsWeight === undefined ||\r\n                this.presentationsConfig.presentationsWeight < 0 ||\r\n                this.presentationsConfig.presentationsWeight > 99\r\n            ) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidPresentationsWeight');\r\n                return false;\r\n            }\r\n            // The presentationScore must be 0 or undefined\r\n            if ((this.course?.presentationScore ?? 0) > 0) {\r\n                this.invalidGradeStepsMessage = this.translateService.instant('artemisApp.gradingSystem.error.invalidBasicPresentationIsEnabled');\r\n                return false;\r\n            }\r\n        }\r\n        this.invalidGradeStepsMessage = undefined;\r\n        return true;\r\n    }\r\n\r\n    private handleSaveObservable(saveObservable: Observable<EntityResponseType>) {\r\n        saveObservable\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n                catchError(() => of(new HttpResponse<GradingScale>({ status: 400 }))),\r\n            )\r\n            .subscribe((gradingSystemResponse) => {\r\n                this.handleSaveResponse(gradingSystemResponse.body!);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sorts the grading scale's grade steps after it has been saved\r\n     * and sets the existingGradingScale property\r\n     *\r\n     * @param newGradingScale the grading scale that was just saved\r\n     */\r\n    private handleSaveResponse(newGradingScale?: GradingScale): void {\r\n        if (newGradingScale) {\r\n            newGradingScale.gradeSteps = this.gradingSystemService.sortGradeSteps(newGradingScale.gradeSteps);\r\n            this.existingGradingScale = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the max points for the course/exam are valid\r\n     */\r\n    maxPointsValid(): boolean {\r\n        return this.maxPoints != undefined && this.maxPoints! > 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the percentage value of a grade step for one of its bounds\r\n     *\r\n     * @param gradeStep the grade step\r\n     * @param lowerBound the bound\r\n     */\r\n    setPercentage(gradeStep: GradeStep, lowerBound: boolean) {\r\n        if (lowerBound) {\r\n            gradeStep.lowerBoundPercentage = (gradeStep.lowerBoundPoints! / this.maxPoints!) * 100;\r\n        } else {\r\n            gradeStep.upperBoundPercentage = (gradeStep.upperBoundPoints! / this.maxPoints!) * 100;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the absolute points value of a grade step for one of its bounds.\r\n     * Sets the value only if the course/exam has max points set\r\n     *\r\n     * @param gradeStep the grade step\r\n     * @param lowerBound the bound\r\n     */\r\n    setPoints(gradeStep: GradeStep, lowerBound: boolean): void {\r\n        if (!this.maxPoints) {\r\n            return;\r\n        } else {\r\n            if (lowerBound) {\r\n                gradeStep.lowerBoundPoints = (this.maxPoints! * gradeStep.lowerBoundPercentage) / 100;\r\n            } else {\r\n                gradeStep.upperBoundPoints = (this.maxPoints! * gradeStep.upperBoundPercentage) / 100;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recalculates both point bounds of all grade steps in the grading scale based on the new max points value\r\n     *\r\n     * @param maxPoints\r\n     */\r\n    onChangeMaxPoints(maxPoints?: number): void {\r\n        // if max points aren't defined, the grade step point bounds should also be undefined\r\n        if (maxPoints == undefined || maxPoints < 0) {\r\n            for (const gradeStep of this.gradingScale.gradeSteps) {\r\n                gradeStep.lowerBoundPoints = undefined;\r\n                gradeStep.upperBoundPoints = undefined;\r\n            }\r\n        } else {\r\n            for (const gradeStep of this.gradingScale.gradeSteps) {\r\n                this.setPoints(gradeStep, true);\r\n                this.setPoints(gradeStep, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a grading scale for the given course/exam via the service\r\n     */\r\n    delete(): void {\r\n        if (!this.existingGradingScale) {\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        if (this.isExam) {\r\n            this.handleDeleteObservable(this.gradingSystemService.deleteGradingScaleForExam(this.courseId!, this.examId!));\r\n        } else {\r\n            this.handleDeleteObservable(this.gradingSystemService.deleteGradingScaleForCourse(this.courseId!));\r\n        }\r\n        this.gradingScale = new GradingScale();\r\n        this.gradingScale.course = this.course;\r\n    }\r\n\r\n    handleDeleteObservable(deleteObservable: Observable<EntityResponseType>) {\r\n        deleteObservable\r\n            .pipe(\r\n                catchError(() => of(new HttpResponse<GradingScale>({ status: 400 }))),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.existingGradingScale = false;\r\n                this.dialogErrorSource.next('');\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets the lowerBoundInclusivity property based on grade steps based on the grade steps\r\n     * Called on initialization\r\n     */\r\n    setBoundInclusivity(): void {\r\n        const lastStepId = this.gradingScale.gradeSteps.last()?.id;\r\n        this.lowerBoundInclusivity = this.gradingScale.gradeSteps.every((gradeStep) => {\r\n            if (gradeStep.id === lastStepId) {\r\n                // ignore the last grade step since its inclusivity gets set differently.\r\n                return true;\r\n            }\r\n            return gradeStep.lowerBoundInclusive || gradeStep.lowerBoundPercentage === 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the inclusivity for all grade steps based on the lowerBoundInclusivity property\r\n     * Called before a post/put request\r\n     *\r\n     * @abstract\r\n     */\r\n    abstract setInclusivity(): void;\r\n\r\n    /**\r\n     * Sets the firstPassingGrade property based on the grade steps\r\n     * Called on initialization\r\n     */\r\n    determineFirstPassingGrade(): void {\r\n        this.firstPassingGrade = this.gradingScale.gradeSteps.find((gradeStep) => {\r\n            return gradeStep.isPassingGrade;\r\n        })?.gradeName;\r\n    }\r\n\r\n    /**\r\n     * Sets the isPassingGrade property for all grade steps based on the lowerBoundInclusive property\r\n     * Called before a post/put request\r\n     *\r\n     * @param gradeSteps the grade steps which will be adjusted\r\n     */\r\n    setPassingGrades(gradeSteps: GradeStep[]): GradeStep[] {\r\n        let passingGrade = false;\r\n        gradeSteps.forEach((gradeStep) => {\r\n            if (gradeStep.gradeName === this.firstPassingGrade) {\r\n                passingGrade = true;\r\n            }\r\n            gradeStep.isPassingGrade = passingGrade;\r\n        });\r\n        return gradeSteps;\r\n    }\r\n\r\n    deleteGradeNames(): void {\r\n        this.gradingScale.gradeSteps.forEach((gradeStep) => {\r\n            gradeStep.gradeName = '';\r\n        });\r\n    }\r\n\r\n    gradeStepsWithNonemptyNames(): GradeStep[] {\r\n        if (this.gradingScale.gradeSteps) {\r\n            return this.gradingScale.gradeSteps.filter((gradeStep) => {\r\n                return gradeStep.gradeName !== '';\r\n            });\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new grade step add the end of the current grade step set\r\n     */\r\n    createGradeStep(): void {\r\n        if (!this.gradingScale) {\r\n            this.gradingScale = new GradingScale();\r\n        }\r\n        if (!this.gradingScale.gradeSteps) {\r\n            this.gradingScale.gradeSteps = [];\r\n        }\r\n        const gradeStepsArrayLength = this.gradingScale.gradeSteps.length;\r\n        const lowerBound = gradeStepsArrayLength === 0 ? 0 : this.gradingScale.gradeSteps.last()!.upperBoundPercentage;\r\n        const gradeStep: GradeStep = {\r\n            gradeName: '',\r\n            lowerBoundPercentage: lowerBound,\r\n            upperBoundPercentage: 100,\r\n            isPassingGrade: true,\r\n            lowerBoundInclusive: this.lowerBoundInclusivity,\r\n            upperBoundInclusive: !this.lowerBoundInclusivity,\r\n        };\r\n        this.setPoints(gradeStep, true);\r\n        this.setPoints(gradeStep, false);\r\n        this.gradingScale.gradeSteps.push(gradeStep);\r\n    }\r\n\r\n    /**\r\n     * Delete grade step at given index\r\n     *\r\n     * @param index the index of the grade step\r\n     */\r\n    deleteGradeStep(index: number): void {\r\n        this.gradingScale.gradeSteps.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Generates a default grading scale to be used as template\r\n     */\r\n    generateDefaultGradingScale(): void {\r\n        this.gradingScale = this.getDefaultGradingScale();\r\n        this.firstPassingGrade = this.gradingScale.gradeSteps[3].gradeName;\r\n        this.lowerBoundInclusivity = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the mock grading scale from the university course PSE\r\n     */\r\n    getDefaultGradingScale(): GradingScale {\r\n        const gradeStep1: GradeStep = {\r\n            gradeName: '5.0',\r\n            lowerBoundPercentage: 0,\r\n            upperBoundPercentage: 40,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: false,\r\n        };\r\n        const gradeStep2: GradeStep = {\r\n            gradeName: '4.7',\r\n            lowerBoundPercentage: 40,\r\n            upperBoundPercentage: 45,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: false,\r\n        };\r\n        const gradeStep3: GradeStep = {\r\n            gradeName: '4.3',\r\n            lowerBoundPercentage: 45,\r\n            upperBoundPercentage: 50,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: false,\r\n        };\r\n        const gradeStep4: GradeStep = {\r\n            gradeName: '4.0',\r\n            lowerBoundPercentage: 50,\r\n            upperBoundPercentage: 55,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep5: GradeStep = {\r\n            gradeName: '3.7',\r\n            lowerBoundPercentage: 55,\r\n            upperBoundPercentage: 60,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep6: GradeStep = {\r\n            gradeName: '3.3',\r\n            lowerBoundPercentage: 60,\r\n            upperBoundPercentage: 65,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep7: GradeStep = {\r\n            gradeName: '3.0',\r\n            lowerBoundPercentage: 65,\r\n            upperBoundPercentage: 70,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep8: GradeStep = {\r\n            gradeName: '2.7',\r\n            lowerBoundPercentage: 70,\r\n            upperBoundPercentage: 75,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep9: GradeStep = {\r\n            gradeName: '2.3',\r\n            lowerBoundPercentage: 75,\r\n            upperBoundPercentage: 80,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep10: GradeStep = {\r\n            gradeName: '2.0',\r\n            lowerBoundPercentage: 80,\r\n            upperBoundPercentage: 85,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep11: GradeStep = {\r\n            gradeName: '1.7',\r\n            lowerBoundPercentage: 85,\r\n            upperBoundPercentage: 90,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep12: GradeStep = {\r\n            gradeName: '1.3',\r\n            lowerBoundPercentage: 90,\r\n            upperBoundPercentage: 95,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: false,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeStep13: GradeStep = {\r\n            gradeName: '1.0',\r\n            lowerBoundPercentage: 95,\r\n            upperBoundPercentage: 100,\r\n            lowerBoundInclusive: true,\r\n            upperBoundInclusive: true,\r\n            isPassingGrade: true,\r\n        };\r\n        const gradeSteps = [\r\n            gradeStep1,\r\n            gradeStep2,\r\n            gradeStep3,\r\n            gradeStep4,\r\n            gradeStep5,\r\n            gradeStep6,\r\n            gradeStep7,\r\n            gradeStep8,\r\n            gradeStep9,\r\n            gradeStep10,\r\n            gradeStep11,\r\n            gradeStep12,\r\n            gradeStep13,\r\n        ];\r\n        for (const gradeStep of gradeSteps) {\r\n            this.setPoints(gradeStep, true);\r\n            this.setPoints(gradeStep, false);\r\n        }\r\n        return {\r\n            gradeSteps,\r\n            gradeType: GradeType.GRADE,\r\n            course: this.course,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Triggered when csv file is uploaded\r\n     * @param event file read event\r\n     */\r\n    async onCSVFileSelect(event: any) {\r\n        if (event.target.files.length > 0) {\r\n            await this.readGradingStepsFromCSVFile(event.target.files[0]);\r\n            this.lowerBoundInclusivity = true;\r\n            this.setInclusivity();\r\n            this.maxPoints = 100;\r\n            this.onChangeMaxPoints(this.maxPoints);\r\n            this.determineFirstPassingGrade();\r\n            this.gradingScale.gradeSteps.sort((a, b) => a.lowerBoundPercentage - b.lowerBoundPercentage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import grade steps from csv file\r\n     * @param csvFile the csv file\r\n     */\r\n    private async readGradingStepsFromCSVFile(csvFile: File) {\r\n        let csvGradeSteps: CsvGradeStep[] = [];\r\n        try {\r\n            csvGradeSteps = await this.parseCSVFile(csvFile);\r\n        } catch (error) {\r\n            return [];\r\n        }\r\n\r\n        if (csvGradeSteps.length === 0 || csvGradeSteps.length > 100) {\r\n            this.gradingScale.gradeSteps = [];\r\n            return;\r\n        }\r\n\r\n        // parse and set the grade type\r\n        const gradeType = csvGradeSteps[0]['bonusPoints' as keyof CsvGradeStep] === undefined ? GradeType.GRADE : GradeType.BONUS;\r\n        if (gradeType === GradeType.BONUS) {\r\n            this.gradingScale.gradeType = GradeType.BONUS;\r\n        } else {\r\n            this.gradingScale.gradeType = GradeType.GRADE;\r\n        }\r\n\r\n        this.gradingScale.gradeSteps = this.mapCsvGradeStepsToGradeSteps(csvGradeSteps, gradeType);\r\n    }\r\n\r\n    /**\r\n     * Map the imported csv objects to GradeStep object\r\n     * In case that the grade type of the imported file is bonus, attribute gradeName will be set with the bonusPoints attribute\r\n     * @param csvGradeSteps Imported grade steps as csv objects\r\n     * @param gradeType Implicit Grade Type of imported csv file\r\n     */\r\n    mapCsvGradeStepsToGradeSteps(csvGradeSteps: CsvGradeStep[], gradeType: GradeType): GradeStep[] {\r\n        return csvGradeSteps.map(\r\n            (csvGradeStep: CsvGradeStep) =>\r\n                ({\r\n                    gradeName:\r\n                        gradeType === GradeType.GRADE\r\n                            ? String(csvGradeStep[csvColumnsGrade.gradeName as keyof CsvGradeStep] ?? '')\r\n                            : String(csvGradeStep[csvColumnsBonus.bonusPoints as keyof CsvGradeStep] ?? ''),\r\n                    lowerBoundPercentage: csvGradeStep[csvColumnsGrade.lowerBoundPercentage as keyof CsvGradeStep]\r\n                        ? Number(csvGradeStep[csvColumnsGrade.lowerBoundPercentage as keyof CsvGradeStep])\r\n                        : undefined,\r\n                    upperBoundPercentage: csvGradeStep[csvColumnsGrade.upperBoundPercentage as keyof CsvGradeStep]\r\n                        ? Number(csvGradeStep[csvColumnsGrade.upperBoundPercentage as keyof CsvGradeStep])\r\n                        : undefined,\r\n                    ...(gradeType === GradeType.GRADE && { isPassingGrade: csvGradeStep[csvColumnsGrade.isPassingGrade as keyof CsvGradeStep] === 'TRUE' }),\r\n                }) as GradeStep,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Parse CSV file to a list of CsvGradeStep objects\r\n     * This method uses the 'papaparse' dependency, but Angular can not lazy load it in an abstract class.\r\n     * Therefore, the implementation is moved to the concrete classes (code duplication for the benefit of reducing main bundle size).\r\n     * @param csvFile the read csv file\r\n     * @abstract\r\n     */\r\n    abstract parseCSVFile(csvFile: File): Promise<CsvGradeStep[]>;\r\n\r\n    /**\r\n     * Download the current grade steps to a csv file to the client\r\n     */\r\n    exportGradingStepsToCsv(): void {\r\n        const headers = this.gradingScale.gradeType === GradeType.GRADE ? Object.keys(csvColumnsGrade) : Object.keys(csvColumnsBonus);\r\n\r\n        const rows = this.gradingScale.gradeSteps.map((gradeStep) => this.convertToCsvRow(gradeStep));\r\n\r\n        this.exportAsCSV(rows, headers);\r\n    }\r\n\r\n    /**\r\n     * Convert a grade step to a csv row. Undefined values are mapped to empty strings\r\n     * @param gradeStep\r\n     */\r\n    convertToCsvRow(gradeStep: GradeStep): any {\r\n        return {\r\n            ...(this.gradingScale.gradeType === GradeType.GRADE && { gradeName: gradeStep.gradeName ?? '' }),\r\n            ...(this.gradingScale.gradeType === GradeType.BONUS && { bonusPoints: gradeStep.gradeName ?? '' }),\r\n            lowerBoundPercentage: gradeStep.lowerBoundPercentage ?? '',\r\n            upperBoundPercentage: gradeStep.upperBoundPercentage ?? '',\r\n            ...(this.gradingScale.gradeType === GradeType.GRADE && { isPassingGrade: gradeStep.isPassingGrade }),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start the user download for the csv file\r\n     * @param rows rows representing each a grade step in csv structure\r\n     * @param headers names of the csv columns\r\n     */\r\n    exportAsCSV(rows: any[], headers: string[]): void {\r\n        const options = {\r\n            fieldSeparator: ',',\r\n            quoteStrings: false,\r\n            decimalSeparator: 'locale',\r\n            showLabels: true,\r\n            filename: 'grading_key' + (this.gradingScale.course?.shortName ? '_' + this.gradingScale.course?.shortName : ''),\r\n            useTextFile: false,\r\n            useBom: true,\r\n            columnHeaders: headers,\r\n        };\r\n\r\n        const csvExportConfig = mkConfig(options);\r\n        const csvData = generateCsv(csvExportConfig)(rows);\r\n        download(csvExportConfig)(csvData);\r\n    }\r\n\r\n    /**\r\n     * Returns true if grading scale goes above the maxPoints.\r\n     */\r\n    abstract shouldShowGradingStepsAboveMaxPointsWarning(): boolean;\r\n\r\n    protected isAnyGradingStepAboveMaxPoints(steps: GradeStep[]): boolean {\r\n        for (const step of steps) {\r\n            if (step.upperBoundInclusive && step.upperBoundPercentage > 100) {\r\n                return true;\r\n            }\r\n            if (!step.upperBoundInclusive && step.upperBoundPercentage >= 100) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["csvColumnsGrade", "Object", "freeze", "gradeName", "lowerBoundPercentage", "upperBoundPercentage", "isPassingGrade", "csvColumnsBonus", "bonusPoints", "GradeEditMode", "BaseGradingSystemComponent", "gradingSystemService", "inject", "GradingSystemService", "route", "ActivatedRoute", "translateService", "TranslateService", "courseService", "CourseManagementService", "examService", "ExamManagementService", "GradeType", "ButtonSize", "GradingScale", "gradingScale", "lowerBoundInclusivity", "existingGradingScale", "firstPassingGrade", "courseId", "examId", "isExam", "dialogErrorSource", "Subject", "dialogError$", "asObservable", "isLoading", "invalidGradeStepsMessage", "course", "exam", "maxPoints", "presentationsConfig", "presentationType", "PresentationType", "NONE", "faSave", "faPlus", "faTimes", "faExclamationTriangle", "faInfo", "ngOnInit", "parent", "params", "subscribe", "Number", "handleFindObservable", "findGradingScaleForExam", "findGradingScaleForCourse", "findObservable", "pipe", "finalize", "gradingSystemResponse", "body", "handleFindResponse", "find", "examResponse", "examMaxPoints", "onChangeMaxPoints", "courseResponse", "gradeSteps", "sortGradeSteps", "setBoundInclusivity", "determineFirstPassingGrade", "save", "setInclusivity", "setPassingGrades", "forEach", "gradeStep", "id", "undefined", "presentationScore", "handleSaveObservable", "updateGradingScaleForExam", "updateGradingScaleForCourse", "createGradingScaleForExam", "createGradingScaleForCourse", "validGradeSteps", "length", "instant", "maxPointsValid", "lowerBoundPoints", "upperBoundPoints", "gradeType", "GRADE", "map", "every", "index", "gradeNames", "indexOf", "sortedGradeSteps", "push", "assign", "BONUS", "isNaN", "bonusPointsArray", "i", "last", "validPresentationsConfig", "presentationsNumber", "presentationsWeight", "BASIC", "GRADED", "isInteger", "saveObservable", "catchError", "of", "HttpResponse", "status", "handleSaveResponse", "newGradingScale", "setPercentage", "lowerBound", "setPoints", "delete", "handleDeleteObservable", "deleteGradingScaleForExam", "deleteGradingScaleForCourse", "deleteObservable", "next", "lastStepId", "lowerBoundInclusive", "passingGrade", "deleteGradeNames", "gradeStepsWithNonemptyNames", "filter", "createGradeStep", "upperBoundInclusive", "deleteGradeStep", "splice", "generateDefaultGradingScale", "getDefaultGradingScale", "onCSVFileSelect", "event", "__async", "target", "files", "readGradingStepsFromCSVFile", "sort", "a", "b", "csvFile", "csvGradeSteps", "parseCSVFile", "mapCsvGradeStepsToGradeSteps", "csvGradeStep", "__spreadValues", "String", "exportGradingStepsToCsv", "headers", "keys", "rows", "convertToCsvRow", "exportAsCSV", "__spreadProps", "options", "fieldSeparator", "quoteStrings", "decimalSeparator", "showLabels", "filename", "shortName", "useTextFile", "useBom", "columnHeaders", "csvExportConfig", "mkConfig", "csvData", "generateCsv", "download", "isAnyGradingStepAboveMaxPoints", "steps", "step", "selectors", "decls", "vars", "template", "rf", "ctx", "encapsulation"]
}
