{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ExerciseDetailStatisticsComponent } from 'app/exercises/shared/statistics/exercise-detail-statistics.component';\r\nimport dayjs from 'dayjs/esm';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { getExerciseGeneralDetailsSection, getExerciseGradingDefaultDetails, getExerciseModeDetailSection } from 'app/exercises/shared/utils';\r\nimport { DetailOverviewSection, DetailType } from 'app/detail-overview-list/detail-overview-list.component';\r\nimport { isQuizEditable } from 'app/exercises/quiz/shared/quiz-manage-util.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { ExerciseManagementStatisticsDto } from 'app/exercises/shared/statistics/exercise-management-statistics-dto';\r\nimport { StatisticsService } from 'app/shared/statistics-graph/statistics.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { QuizExerciseManageButtonsComponent } from './quiz-exercise-manage-buttons.component';\r\nimport { QuizExerciseLifecycleButtonsComponent } from './quiz-exercise-lifecycle-buttons.component';\r\nimport { DetailOverviewListComponent } from 'app/detail-overview-list/detail-overview-list.component';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-exercise-detail',\r\n    templateUrl: './quiz-exercise-detail.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        QuizExerciseManageButtonsComponent,\r\n        QuizExerciseLifecycleButtonsComponent,\r\n        ExerciseDetailStatisticsComponent,\r\n        DetailOverviewListComponent,\r\n    ],\r\n})\r\nexport class QuizExerciseDetailComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private statisticsService = inject(StatisticsService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    readonly documentationType: DocumentationType = 'Quiz';\r\n    readonly dayjs = dayjs;\r\n\r\n    courseId: number;\r\n    examId: number;\r\n    quizId: number;\r\n    isExamMode: boolean;\r\n    showStatistics: boolean;\r\n\r\n    quizExercise: QuizExercise;\r\n    statistics: ExerciseManagementStatisticsDto;\r\n\r\n    detailOverviewSections: DetailOverviewSection[];\r\n\r\n    /**\r\n     * Load the quizzes of the course for export on init.\r\n     */\r\n    ngOnInit() {\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        this.quizId = Number(this.route.snapshot.paramMap.get('exerciseId'));\r\n        const groupId = Number(this.route.snapshot.paramMap.get('exerciseGroupId'));\r\n        if (this.examId && groupId) {\r\n            this.isExamMode = true;\r\n        }\r\n        this.load();\r\n    }\r\n\r\n    load() {\r\n        this.quizExerciseService.find(this.quizId).subscribe(async (response: HttpResponse<QuizExercise>) => {\r\n            this.quizExercise = response.body!;\r\n            this.quizExercise.quizBatches = this.quizExercise.quizBatches?.sort((a, b) => (a.id ?? 0) - (b.id ?? 0));\r\n            this.quizExercise.isEditable = isQuizEditable(this.quizExercise);\r\n            this.quizExercise.status = this.quizExerciseService.getStatus(this.quizExercise);\r\n            this.quizExercise.startDate = this.quizExercise.dueDate && dayjs(this.quizExercise.dueDate).subtract(this.quizExercise.duration ?? 0, 'second');\r\n            this.showStatistics = !this.quizExercise.releaseDate || dayjs(this.quizExercise.releaseDate).isBefore(dayjs());\r\n            if (this.showStatistics) {\r\n                this.statistics = await firstValueFrom(this.statisticsService.getExerciseStatistics(this.quizId));\r\n            }\r\n            this.detailOverviewSections = this.getExerciseDetailSections();\r\n        });\r\n    }\r\n\r\n    getExerciseDetailSections(): DetailOverviewSection[] {\r\n        const exercise = this.quizExercise;\r\n        const mcCount = this.quizExercise.quizQuestions?.filter((question) => question.type === QuizQuestionType.MULTIPLE_CHOICE)?.length ?? 0;\r\n        const dndCount = this.quizExercise.quizQuestions?.filter((question) => question.type === QuizQuestionType.DRAG_AND_DROP)?.length ?? 0;\r\n        const shortCount = this.quizExercise.quizQuestions?.filter((question) => question.type === QuizQuestionType.SHORT_ANSWER)?.length ?? 0;\r\n        const generalSection = getExerciseGeneralDetailsSection(exercise);\r\n        const modeSection = getExerciseModeDetailSection(exercise);\r\n        const defaultGradingDetails = getExerciseGradingDefaultDetails(exercise);\r\n\r\n        if (exercise.competencyLinks?.length) {\r\n            modeSection.details.push({\r\n                title: 'artemisApp.competency.link.title',\r\n                type: DetailType.Text,\r\n                data: { text: exercise.competencyLinks?.map((competencyLink) => competencyLink.competency?.title).join(', ') },\r\n            });\r\n        }\r\n        return [\r\n            generalSection,\r\n            {\r\n                ...modeSection,\r\n                details: [\r\n                    ...modeSection.details,\r\n                    { type: DetailType.Boolean, title: 'artemisApp.quizExercise.randomizeQuestionOrder', data: { boolean: exercise.randomizeQuestionOrder } },\r\n                    {\r\n                        type: DetailType.Text,\r\n                        title: 'artemisApp.quizExercise.quizMode.title',\r\n                        data: { text: this.translateService.instant('artemisApp.quizExercise.quizMode.' + exercise.quizMode?.toLowerCase()).toUpperCase() },\r\n                    },\r\n                    {\r\n                        type: DetailType.Text,\r\n                        title: 'artemisApp.quizExercise.detail.questionCount.title',\r\n                        data: { text: this.translateService.instant('artemisApp.quizExercise.detail.questionCount.value', { mcCount, dndCount, shortCount }) },\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                headline: 'artemisApp.exercise.sections.grading',\r\n                details: defaultGradingDetails,\r\n            },\r\n        ];\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        @if (quizExercise) {\r\n            <div>\r\n                <div class=\"d-flex align-items-center\">\r\n                    <h2><span jhiTranslate=\"artemisApp.quizExercise.detail.title\"></span> {{ quizExercise.id }}</h2>\r\n                    <jhi-documentation-button [type]=\"documentationType\" />\r\n                </div>\r\n                <hr />\r\n                <jhi-quiz-exercise-manage-buttons [quizExercise]=\"quizExercise\" [isDetailPage]=\"true\" (loadQuizExercises)=\"load()\" />\r\n                <hr />\r\n                @if (!isExamMode) {\r\n                    <jhi-quiz-exercise-lifecycle-buttons [quizExercise]=\"quizExercise\" (loadOne)=\"load()\" (handleNewQuizExercise)=\"load()\" />\r\n                }\r\n                @if (showStatistics) {\r\n                    <div class=\"mt-3\">\r\n                        <jhi-exercise-detail-statistics\r\n                            [exercise]=\"quizExercise\"\r\n                            [doughnutStats]=\"statistics\"\r\n                            [exerciseType]=\"quizExercise.type!\"\r\n                            class=\"d-flex justify-content-around\"\r\n                        />\r\n                    </div>\r\n                }\r\n                @if (detailOverviewSections) {\r\n                    <jhi-detail-overview-list [sections]=\"detailOverviewSections\" />\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "load", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "quizExercise", "\u0275\u0275element", "statistics", "type", "detailOverviewSections", "_r1", "\u0275\u0275template", "QuizExerciseDetailComponent_Conditional_4_Conditional_18_Template", "QuizExerciseDetailComponent_Conditional_4_Conditional_19_Template", "QuizExerciseDetailComponent_Conditional_4_Conditional_20_Template", "\u0275\u0275textInterpolate1", "id", "documentationType", "\u0275\u0275conditional", "isExamMode", "showStatistics", "QuizExerciseDetailComponent", "route", "inject", "ActivatedRoute", "quizExerciseService", "QuizExerciseService", "statisticsService", "StatisticsService", "translateService", "TranslateService", "dayjs", "courseId", "examId", "quizId", "ngOnInit", "Number", "snapshot", "paramMap", "get", "groupId", "find", "subscribe", "response", "__async", "body", "quizBatches", "sort", "a", "b", "isEditable", "isQuizEditable", "status", "getStatus", "startDate", "dueDate", "subtract", "duration", "releaseDate", "isBefore", "firstValueFrom", "getExerciseStatistics", "getExerciseDetailSections", "exercise", "mcCount", "quizQuestions", "filter", "question", "QuizQuestionType", "MULTIPLE_CHOICE", "length", "dndCount", "DRAG_AND_DROP", "shortCount", "SHORT_ANSWER", "generalSection", "getExerciseGeneralDetailsSection", "modeSection", "getExerciseModeDetailSection", "defaultGradingDetails", "getExerciseGradingDefaultDetails", "competencyLinks", "details", "push", "title", "DetailType", "Text", "data", "text", "map", "competencyLink", "competency", "join", "__spreadProps", "__spreadValues", "Boolean", "boolean", "randomizeQuestionOrder", "instant", "quizMode", "toLowerCase", "toUpperCase", "headline", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "QuizExerciseDetailComponent_Conditional_4_Template", "TranslateDirective", "DocumentationButtonComponent", "QuizExerciseManageButtonsComponent", "QuizExerciseLifecycleButtonsComponent", "ExerciseDetailStatisticsComponent", "DetailOverviewListComponent", "encapsulation"]
}
