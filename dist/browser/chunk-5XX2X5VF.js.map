{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/iris/iris-message.model.ts", "src/main/webapp/app/entities/iris/iris-errors.model.ts", "src/main/webapp/app/iris/iris-chat-http.service.ts", "src/main/webapp/app/iris/iris-websocket.service.ts", "src/main/webapp/app/entities/iris/iris-chat-websocket-dto.model.ts", "src/main/webapp/app/entities/iris/iris-ratelimit-info.model.ts", "src/main/webapp/app/iris/iris-status.service.ts", "src/main/webapp/app/entities/iris/iris-content-type.model.ts", "src/main/webapp/app/iris/iris-chat.service.ts", "src/main/webapp/app/iris/base-chatbot/chat-status-bar/chat-status-bar.component.ts", "src/main/webapp/app/iris/base-chatbot/chat-status-bar/chat-status-bar.component.html", "src/main/webapp/app/shared/pipes/as.pipe.ts", "src/main/webapp/app/iris/base-chatbot/iris-base-chatbot.component.ts", "src/main/webapp/app/iris/base-chatbot/iris-base-chatbot.component.html"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { IrisMessageContent, IrisTextMessageContent } from 'app/entities/iris/iris-content-type.model';\r\nimport dayjs from 'dayjs/esm';\r\n\r\nexport enum IrisSender {\r\n    LLM = 'LLM',\r\n    USER = 'USER',\r\n}\r\n\r\nexport class IrisAssistantMessage implements BaseEntity {\r\n    id: number;\r\n    content: IrisMessageContent[];\r\n    sentAt: dayjs.Dayjs;\r\n    sender: IrisSender.LLM;\r\n    helpful?: boolean;\r\n}\r\n\r\nexport class IrisUserMessage implements BaseEntity {\r\n    id?: number;\r\n    content: IrisTextMessageContent[];\r\n    sentAt?: dayjs.Dayjs;\r\n    sender: IrisSender.USER;\r\n    messageDifferentiator?: number;\r\n}\r\n\r\nexport type IrisMessage = IrisAssistantMessage | IrisUserMessage;\r\n", "export enum IrisErrorMessageKey {\r\n    SESSION_LOAD_FAILED = 'artemisApp.exerciseChatbot.errors.sessionLoadFailed',\r\n    SEND_MESSAGE_FAILED = 'artemisApp.exerciseChatbot.errors.sendMessageFailed',\r\n    HISTORY_LOAD_FAILED = 'artemisApp.exerciseChatbot.errors.historyLoadFailed',\r\n    INVALID_SESSION_STATE = 'artemisApp.exerciseChatbot.errors.invalidSessionState',\r\n    SESSION_CREATION_FAILED = 'artemisApp.exerciseChatbot.errors.sessionCreationFailed',\r\n    RATE_MESSAGE_FAILED = 'artemisApp.exerciseChatbot.errors.rateMessageFailed',\r\n    IRIS_DISABLED = 'artemisApp.exerciseChatbot.errors.irisDisabled',\r\n    IRIS_SERVER_RESPONSE_TIMEOUT = 'artemisApp.exerciseChatbot.errors.timeout',\r\n    EMPTY_MESSAGE = 'artemisApp.exerciseChatbot.errors.emptyMessage',\r\n    FORBIDDEN = 'artemisApp.exerciseChatbot.errors.forbidden',\r\n    INTERNAL_PYRIS_ERROR = 'artemisApp.exerciseChatbot.errors.internalPyrisError',\r\n    INVALID_TEMPLATE = 'artemisApp.exerciseChatbot.errors.invalidTemplate',\r\n    NO_MODEL_AVAILABLE = 'artemisApp.exerciseChatbot.errors.noModelAvailable',\r\n    NO_RESPONSE = 'artemisApp.exerciseChatbot.errors.noResponse',\r\n    PARSE_RESPONSE = 'artemisApp.exerciseChatbot.errors.parseResponse',\r\n    TECHNICAL_ERROR_RESPONSE = 'artemisApp.exerciseChatbot.errors.technicalError',\r\n    IRIS_NOT_AVAILABLE = 'artemisApp.exerciseChatbot.errors.irisNotAvailable',\r\n    RATE_LIMIT_EXCEEDED = 'artemisApp.exerciseChatbot.errors.rateLimitExceeded',\r\n}\r\n\r\nexport interface IrisErrorType {\r\n    key: IrisErrorMessageKey;\r\n    fatal: boolean;\r\n    paramsMap?: Map<string, any>;\r\n}\r\n\r\nconst IrisErrors: IrisErrorType[] = [\r\n    { key: IrisErrorMessageKey.SESSION_LOAD_FAILED, fatal: true },\r\n    { key: IrisErrorMessageKey.SEND_MESSAGE_FAILED, fatal: false },\r\n    { key: IrisErrorMessageKey.HISTORY_LOAD_FAILED, fatal: true },\r\n    { key: IrisErrorMessageKey.INVALID_SESSION_STATE, fatal: true },\r\n    { key: IrisErrorMessageKey.SESSION_CREATION_FAILED, fatal: true },\r\n    { key: IrisErrorMessageKey.RATE_MESSAGE_FAILED, fatal: false },\r\n    { key: IrisErrorMessageKey.IRIS_DISABLED, fatal: true },\r\n    { key: IrisErrorMessageKey.IRIS_SERVER_RESPONSE_TIMEOUT, fatal: false },\r\n    { key: IrisErrorMessageKey.EMPTY_MESSAGE, fatal: false },\r\n    { key: IrisErrorMessageKey.INTERNAL_PYRIS_ERROR, fatal: true },\r\n    { key: IrisErrorMessageKey.INVALID_TEMPLATE, fatal: true },\r\n    { key: IrisErrorMessageKey.NO_MODEL_AVAILABLE, fatal: true },\r\n    { key: IrisErrorMessageKey.NO_RESPONSE, fatal: true },\r\n    { key: IrisErrorMessageKey.PARSE_RESPONSE, fatal: true },\r\n    { key: IrisErrorMessageKey.FORBIDDEN, fatal: true },\r\n    { key: IrisErrorMessageKey.TECHNICAL_ERROR_RESPONSE, fatal: true },\r\n    { key: IrisErrorMessageKey.IRIS_NOT_AVAILABLE, fatal: true },\r\n    { key: IrisErrorMessageKey.RATE_LIMIT_EXCEEDED, fatal: true },\r\n];\r\n\r\nexport const errorMessages: Readonly<{ [key in IrisErrorMessageKey]: IrisErrorType }> = Object.freeze(\r\n    IrisErrors.reduce(\r\n        (map, obj) => {\r\n            map[obj.key] = obj;\r\n            return map;\r\n        },\r\n        {} as { [key in IrisErrorMessageKey]: IrisErrorType },\r\n    ),\r\n);\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IrisAssistantMessage, IrisMessage, IrisUserMessage } from 'app/entities/iris/iris-message.model';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { IrisSession } from 'app/entities/iris/iris-session.model';\r\n\r\nexport type Response<T> = Observable<HttpResponse<T>>;\r\n\r\n/**\r\n * Provides a set of methods to perform CRUD operations on messages\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class IrisChatHttpService {\r\n    protected httpClient = inject(HttpClient);\r\n\r\n    protected apiPrefix: string = 'api/iris';\r\n\r\n    protected randomInt(): number {\r\n        const maxIntJava = 2147483647;\r\n        return Math.floor(Math.random() * maxIntJava);\r\n    }\r\n\r\n    /**\r\n     * gets all messages for a session by its id\r\n     * @param {number} sessionId\r\n     * @return {Observable<EntityArrayResponseType>}\r\n     */\r\n    getMessages(sessionId: number): Response<IrisMessage[]> {\r\n        return this.httpClient.get<IrisMessage[]>(`${this.apiPrefix}/sessions/${sessionId}/messages`, { observe: 'response' }).pipe(\r\n            map((response) => {\r\n                const messages = response.body;\r\n                if (!messages) return response;\r\n\r\n                const modifiedMessages = messages.map((message) => {\r\n                    return Object.assign({}, message, {\r\n                        sentAt: convertDateFromServer(message.sentAt),\r\n                    });\r\n                });\r\n\r\n                modifiedMessages.sort((a, b) => {\r\n                    if (a.sentAt && b.sentAt) {\r\n                        if (a.sentAt === b.sentAt) return 0;\r\n                        return a.sentAt.isBefore(b.sentAt) ? -1 : 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n\r\n                return Object.assign({}, response, {\r\n                    body: modifiedMessages,\r\n                });\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * creates a new message in a session\r\n     * @param sessionId of the session\r\n     * @param message  to be created\r\n     */\r\n    createMessage(sessionId: number, message: IrisUserMessage): Response<IrisUserMessage> {\r\n        message.messageDifferentiator = this.randomInt();\r\n        return this.httpClient.post<IrisUserMessage>(\r\n            `${this.apiPrefix}/sessions/${sessionId}/messages`,\r\n            Object.assign({}, message, {\r\n                sentAt: convertDateFromClient(message.sentAt),\r\n            }),\r\n            { observe: 'response' },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * resends a message in a session\r\n     * @param {number} sessionId\r\n     * @param {IrisUserMessage} message\r\n     * @return {Response<IrisMessage>}\r\n     */\r\n    resendMessage(sessionId: number, message: IrisUserMessage): Response<IrisMessage> {\r\n        message.messageDifferentiator = message.messageDifferentiator ?? this.randomInt();\r\n        return this.httpClient.post<IrisAssistantMessage>(`${this.apiPrefix}/sessions/${sessionId}/messages/${message.id}/resend`, null, { observe: 'response' }).pipe(\r\n            tap((response) => {\r\n                if (response.body && response.body.id) {\r\n                    message.id = response.body.id;\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets a helpfulness rating for a message\r\n     * @param {number} sessionId of the session of the message that should be rated\r\n     * @param {number} messageId of the message that should be rated\r\n     * @param {boolean} helpful rating of the message\r\n     * @return {Observable<EntityResponseType>} an Observable of the HTTP responses\r\n     */\r\n    rateMessage(sessionId: number, messageId: number, helpful: boolean): Response<IrisMessage> {\r\n        return this.httpClient.put<IrisMessage>(`${this.apiPrefix}/sessions/${sessionId}/messages/${messageId}/helpful`, helpful, { observe: 'response' });\r\n    }\r\n\r\n    getCurrentSessionOrCreateIfNotExists<T extends IrisSession>(identifier: string): Response<T> {\r\n        return this.httpClient.post<T>(`${this.apiPrefix}/${identifier}/sessions/current`, null, { observe: 'response' });\r\n    }\r\n\r\n    createSession<T extends IrisSession>(identifier: string): Response<T> {\r\n        return this.httpClient.post<T>(`${this.apiPrefix}/${identifier}/sessions`, null, { observe: 'response' });\r\n    }\r\n}\r\n", "import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\n\r\ntype SubscribedChannel = { wsSubscription: Subscription; subject: Subject<any> };\r\n\r\n/**\r\n * The IrisWebsocketService handles the websocket communication for receiving messages in dedicated channels.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class IrisWebsocketService implements OnDestroy {\r\n    protected websocketService = inject(WebsocketService);\r\n\r\n    private subscribedChannels: Map<number, SubscribedChannel> = new Map();\r\n\r\n    /**\r\n     * Cleans up resources before the service is destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.subscribedChannels.forEach((subscription, sessionId) => {\r\n            subscription.wsSubscription.unsubscribe();\r\n            this.websocketService.unsubscribe(this.getChannelFromSessionId(sessionId));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Subscribes to a session.\r\n     * @param sessionId The session ID to subscribe to.\r\n     */\r\n    public subscribeToSession(sessionId: number): Observable<any> {\r\n        if (!sessionId) {\r\n            throw new Error('Session ID is required');\r\n        }\r\n\r\n        const subscribedChannel = this.subscribedChannels.computeIfAbsent(sessionId, () => {\r\n            const channel = this.getChannelFromSessionId(sessionId);\r\n            const subject = new Subject<any>();\r\n            const wsSubscription = this.websocketService\r\n                .subscribe(channel)\r\n                .receive(channel)\r\n                .subscribe((response: any) => {\r\n                    subject.next(response);\r\n                });\r\n            return { wsSubscription, subject };\r\n        });\r\n\r\n        return subscribedChannel.subject.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes from a session.\r\n     * @param sessionId The session ID to unsubscribe from.\r\n     * @return true if the session was successfully unsubscribed, false otherwise.\r\n     */\r\n    public unsubscribeFromSession(sessionId: number): boolean {\r\n        const subscribedChannel = this.subscribedChannels.get(sessionId);\r\n        if (subscribedChannel) {\r\n            subscribedChannel.wsSubscription.unsubscribe();\r\n            this.subscribedChannels.delete(sessionId);\r\n\r\n            const channel = this.getChannelFromSessionId(sessionId);\r\n            this.websocketService.unsubscribe(channel);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getChannelFromSessionId(sessionId: number) {\r\n        return '/user/topic/iris/' + sessionId;\r\n    }\r\n}\r\n", "import { IrisRateLimitInformation } from 'app/entities/iris/iris-ratelimit-info.model';\r\nimport { IrisMessage } from 'app/entities/iris/iris-message.model';\r\nimport { IrisStageDTO } from 'app/entities/iris/iris-stage-dto.model';\r\n\r\n/**\r\n * The IrisChatWebsocketDTO is the data transfer object for messages and status updates sent over the iris chat websocket.\r\n */\r\nexport class IrisChatWebsocketDTO {\r\n    type: IrisChatWebsocketPayloadType;\r\n    message?: IrisMessage;\r\n    stages?: IrisStageDTO[];\r\n    rateLimitInfo?: IrisRateLimitInformation;\r\n    suggestions?: string[];\r\n}\r\n\r\nexport enum IrisChatWebsocketPayloadType {\r\n    MESSAGE = 'MESSAGE',\r\n    STATUS = 'STATUS',\r\n}\r\n", "export class IrisRateLimitInformation {\r\n    constructor(\r\n        public currentMessageCount: number,\r\n        public rateLimit: number,\r\n        public rateLimitTimeframeHours: number,\r\n    ) {}\r\n}\r\n", "import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, Subscription, firstValueFrom } from 'rxjs';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { Response } from 'app/iris/iris-chat-http.service';\r\nimport { IrisStatusDTO } from 'app/entities/iris/iris-health.model';\r\nimport { IrisRateLimitInformation } from 'app/entities/iris/iris-ratelimit-info.model';\r\n\r\n/**\r\n * The `IrisHeartbeatService` is responsible for monitoring the health status of Iris.\r\n * It periodically sends HTTP requests to check if the system is available.\r\n * The availability status is distributed to other services.\r\n * It also manages the current ratelimts.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class IrisStatusService implements OnDestroy {\r\n    private websocketService = inject(WebsocketService);\r\n    private httpClient = inject(HttpClient);\r\n\r\n    intervalId: ReturnType<typeof setInterval> | undefined;\r\n    websocketStatusSubscription: Subscription;\r\n    disconnected = false;\r\n\r\n    active = true;\r\n    activeSubject = new BehaviorSubject<boolean>(this.active);\r\n\r\n    currentRatelimitInfoSubject = new BehaviorSubject<IrisRateLimitInformation>(new IrisRateLimitInformation(0, 0, 0));\r\n\r\n    /**\r\n     * Creates an instance of IrisHeartbeatService.\r\n     * @param websocketService The JhiWebsocketService for managing the websocket connection.\r\n     * @param httpSessionService The IrisHttpChatSessionService for HTTP operations related to sessions.\r\n     */\r\n    constructor() {\r\n        this.checkHeartbeat();\r\n        this.intervalId = setInterval(() => {\r\n            this.checkHeartbeat();\r\n        }, 60000);\r\n\r\n        this.websocketStatusSubscription = this.websocketService.connectionState.subscribe((status) => {\r\n            this.disconnected = !status.connected && !status.intendedDisconnect && status.wasEverConnectedBefore;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an Observable of the current Iris availability status.\r\n     * @return An Observable of the current Iris availability status.\r\n     */\r\n    getActiveStatus(): Observable<boolean> {\r\n        return this.activeSubject.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Returns an Observable of the current Iris ratelimit information.\r\n     * @return An Observable of the current Iris ratelimit information.\r\n     */\r\n    currentRatelimitInfo(): Observable<IrisRateLimitInformation> {\r\n        return this.currentRatelimitInfoSubject.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Handles the ratelimit information received through other means, such as the websocket.\r\n     * @param rateLimitInfo The ratelimit information\r\n     */\r\n    handleRateLimitInfo(rateLimitInfo: IrisRateLimitInformation): void {\r\n        this.currentRatelimitInfoSubject.next(rateLimitInfo);\r\n    }\r\n\r\n    /**\r\n     * Checks the availability of Iris by sending a heartbeat request.\r\n     */\r\n    private checkHeartbeat(): void {\r\n        if (this.disconnected) return;\r\n        firstValueFrom(this.getIrisStatus()).then((response: HttpResponse<IrisStatusDTO>) => {\r\n            if (response.body) {\r\n                this.active = Boolean(response.body.active);\r\n\r\n                if (response.body.rateLimitInfo) {\r\n                    this.currentRatelimitInfoSubject.next(response.body.rateLimitInfo);\r\n                }\r\n            } else {\r\n                this.active = false;\r\n            }\r\n            this.activeSubject.next(this.active);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs cleanup when the service is destroyed.\r\n     * Clears the interval and unsubscribes from observables.\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.intervalId !== undefined) clearInterval(this.intervalId);\r\n        this.websocketStatusSubscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Checks whether Iris is active.\r\n     * @return An Observable of the HTTP response containing a boolean value indicating the status.\r\n     */\r\n    private getIrisStatus(): Response<IrisStatusDTO> {\r\n        return this.httpClient.get<IrisStatusDTO>(`api/iris/status`, { observe: 'response' });\r\n    }\r\n}\r\n", "export enum IrisMessageContentType {\r\n    TEXT = 'text',\r\n}\r\n\r\nexport abstract class IrisMessageContent {\r\n    id?: number;\r\n    messageId?: number;\r\n\r\n    protected constructor(public type: IrisMessageContentType) {}\r\n}\r\n\r\nexport class IrisTextMessageContent extends IrisMessageContent {\r\n    constructor(public textContent: string) {\r\n        super(IrisMessageContentType.TEXT);\r\n    }\r\n}\r\n\r\nexport function isTextContent(content: IrisMessageContent): content is IrisTextMessageContent {\r\n    return content.type === IrisMessageContentType.TEXT;\r\n}\r\n\r\nexport function getTextContent(content: IrisMessageContent) {\r\n    if (isTextContent(content)) {\r\n        const irisMessageTextContent = content as IrisTextMessageContent;\r\n        return irisMessageTextContent.textContent;\r\n    }\r\n}\r\n", "import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { IrisAssistantMessage, IrisMessage, IrisSender, IrisUserMessage } from 'app/entities/iris/iris-message.model';\r\nimport { IrisErrorMessageKey } from 'app/entities/iris/iris-errors.model';\r\nimport { BehaviorSubject, Observable, Subscription, catchError, map, of, tap, throwError } from 'rxjs';\r\nimport { IrisChatHttpService } from 'app/iris/iris-chat-http.service';\r\nimport { IrisExerciseChatSession } from 'app/entities/iris/iris-exercise-chat-session.model';\r\nimport { IrisStageDTO } from 'app/entities/iris/iris-stage-dto.model';\r\nimport { IrisWebsocketService } from 'app/iris/iris-websocket.service';\r\nimport { IrisChatWebsocketDTO, IrisChatWebsocketPayloadType } from 'app/entities/iris/iris-chat-websocket-dto.model';\r\nimport { IrisStatusService } from 'app/iris/iris-status.service';\r\nimport { IrisTextMessageContent } from 'app/entities/iris/iris-content-type.model';\r\nimport { IrisRateLimitInformation } from 'app/entities/iris/iris-ratelimit-info.model';\r\nimport { IrisSession } from 'app/entities/iris/iris-session.model';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\n\r\nexport enum ChatServiceMode {\r\n    TEXT_EXERCISE = 'text-exercise-chat',\r\n    EXERCISE = 'exercise-chat', // TODO: Rename to PROGRAMMING_EXERCISE\r\n    COURSE = 'course-chat',\r\n    LECTURE = 'lecture-chat',\r\n}\r\n\r\n/**\r\n * The IrisSessionService is responsible for managing Iris sessions and retrieving their associated messages.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class IrisChatService implements OnDestroy {\r\n    http = inject(IrisChatHttpService);\r\n    ws = inject(IrisWebsocketService);\r\n    status = inject(IrisStatusService);\r\n    private userService = inject(UserService);\r\n    private accountService = inject(AccountService);\r\n\r\n    sessionId?: number;\r\n    messages: BehaviorSubject<IrisMessage[]> = new BehaviorSubject([]);\r\n    newIrisMessage: BehaviorSubject<IrisMessage | undefined> = new BehaviorSubject(undefined);\r\n    numNewMessages: BehaviorSubject<number> = new BehaviorSubject(0);\r\n    stages: BehaviorSubject<IrisStageDTO[]> = new BehaviorSubject([]);\r\n    suggestions: BehaviorSubject<string[]> = new BehaviorSubject([]);\r\n    error: BehaviorSubject<IrisErrorMessageKey | undefined> = new BehaviorSubject(undefined);\r\n\r\n    rateLimitInfo?: IrisRateLimitInformation;\r\n    rateLimitSubscription: Subscription;\r\n    private acceptSubscription?: Subscription;\r\n\r\n    private sessionCreationIdentifier?: string;\r\n\r\n    hasJustAcceptedExternalLLMUsage = false;\r\n\r\n    protected constructor() {\r\n        this.rateLimitSubscription = this.status.currentRatelimitInfo().subscribe((info) => (this.rateLimitInfo = info));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.rateLimitSubscription.unsubscribe();\r\n        this.acceptSubscription?.unsubscribe();\r\n    }\r\n\r\n    protected start() {\r\n        if (this.accountService.userIdentity?.externalLLMUsageAccepted || this.hasJustAcceptedExternalLLMUsage) {\r\n            this.getCurrentSessionOrCreate().subscribe(this.handleNewSession());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the server and returns the created message.\r\n     * @param message to be created\r\n     */\r\n    public sendMessage(message: string): Observable<undefined> {\r\n        if (!this.sessionId) {\r\n            return throwError(() => new Error('Not initialized'));\r\n        }\r\n        this.suggestions.next([]);\r\n\r\n        // Trim messages (Spaces, newlines)\r\n        message = message.trim();\r\n\r\n        const newMessage = new IrisUserMessage();\r\n        newMessage.content = [new IrisTextMessageContent(message)];\r\n        return this.http.createMessage(this.sessionId, newMessage).pipe(\r\n            tap((m) => {\r\n                this.replaceOrAddMessage(m.body!);\r\n            }),\r\n            map(() => undefined),\r\n            catchError((error: HttpErrorResponse) => {\r\n                this.handleSendHttpError(error);\r\n                return of();\r\n            }),\r\n        );\r\n    }\r\n\r\n    private replaceOrAddMessage(message: IrisMessage) {\r\n        const messageWasReplaced = this.replaceMessage(message);\r\n        if (!messageWasReplaced) {\r\n            if (message.sender === IrisSender.LLM) {\r\n                this.newIrisMessage.next(message);\r\n            }\r\n            this.messages.next([...this.messages.getValue(), message]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resends a message to the server and returns the created message.\r\n     * @param message to be created\r\n     */\r\n    resendMessage(message: IrisUserMessage): Observable<undefined> {\r\n        if (!this.sessionId) {\r\n            return throwError(() => new Error('Not initialized'));\r\n        }\r\n\r\n        return this.http.resendMessage(this.sessionId, message).pipe(\r\n            map((r: HttpResponse<IrisUserMessage>) => r.body!),\r\n            tap((m) => this.replaceMessage(m)),\r\n            map(() => undefined),\r\n            catchError((error: HttpErrorResponse) => {\r\n                this.handleSendHttpError(error);\r\n                return of();\r\n            }),\r\n        );\r\n    }\r\n\r\n    private handleSendHttpError(error: HttpErrorResponse): void {\r\n        if (error.status === 403) {\r\n            this.error.next(IrisErrorMessageKey.IRIS_DISABLED);\r\n        } else if (error.status === 429) {\r\n            const map = new Map<string, any>();\r\n            map.set('hours', this.rateLimitInfo?.rateLimitTimeframeHours);\r\n            this.error.next(IrisErrorMessageKey.RATE_LIMIT_EXCEEDED);\r\n        } else {\r\n            this.error.next(IrisErrorMessageKey.SEND_MESSAGE_FAILED);\r\n        }\r\n    }\r\n\r\n    rateMessage(message: IrisAssistantMessage, helpful?: boolean): Observable<undefined> {\r\n        if (!this.sessionId) {\r\n            return throwError(() => new Error('Not initialized'));\r\n        }\r\n\r\n        return this.http.rateMessage(this.sessionId, message.id!, !!helpful).pipe(\r\n            map((r: HttpResponse<IrisAssistantMessage>) => r.body!),\r\n            tap((m) => this.replaceMessage(m)),\r\n            map(() => undefined),\r\n            catchError(() => {\r\n                this.error.next(IrisErrorMessageKey.RATE_MESSAGE_FAILED);\r\n                return of();\r\n            }),\r\n        );\r\n    }\r\n\r\n    public messagesRead(): void {\r\n        this.numNewMessages.next(0);\r\n        this.newIrisMessage.next(undefined);\r\n    }\r\n\r\n    public setUserAccepted(): void {\r\n        this.acceptSubscription?.unsubscribe();\r\n        this.acceptSubscription = this.userService.acceptExternalLLMUsage().subscribe(() => {\r\n            this.hasJustAcceptedExternalLLMUsage = true;\r\n            this.accountService.setUserAcceptedExternalLLMUsage();\r\n            this.closeAndStart();\r\n        });\r\n    }\r\n\r\n    private replaceMessage(message: IrisMessage): boolean {\r\n        const messages = [...this.messages.getValue()];\r\n        const index = messages.findIndex((m) => m.id === message.id);\r\n        if (index >= 0) {\r\n            messages[index] = message;\r\n            this.messages.next(messages);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private handleNewSession() {\r\n        return {\r\n            next: (r: IrisSession) => {\r\n                this.sessionId = r.id;\r\n                this.messages.next(r.messages || []);\r\n                this.parseLatestSuggestions(r.latestSuggestions);\r\n                this.ws.subscribeToSession(this.sessionId).subscribe((m) => this.handleWebsocketMessage(m));\r\n            },\r\n            error: (e: IrisErrorMessageKey) => {\r\n                this.error.next(e as IrisErrorMessageKey);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parses the latest suggestions string and updates the suggestions subject.\r\n     * @param s: The latest suggestions string\r\n     * @private\r\n     */\r\n    private parseLatestSuggestions(s?: string) {\r\n        if (!s) {\r\n            this.suggestions.next([]);\r\n            return;\r\n        }\r\n\r\n        const suggestions = JSON.parse(s);\r\n        this.suggestions.next(suggestions);\r\n    }\r\n\r\n    public clearChat(): void {\r\n        this.close();\r\n        this.createNewSession().subscribe(this.handleNewSession());\r\n    }\r\n\r\n    private handleWebsocketMessage(payload: IrisChatWebsocketDTO) {\r\n        if (payload.rateLimitInfo) {\r\n            this.status.handleRateLimitInfo(payload.rateLimitInfo);\r\n        }\r\n        switch (payload.type) {\r\n            case IrisChatWebsocketPayloadType.MESSAGE:\r\n                if (payload.message?.sender === IrisSender.LLM) {\r\n                    this.numNewMessages.next(this.numNewMessages.getValue() + 1);\r\n                }\r\n                if (payload.message?.id) {\r\n                    this.replaceOrAddMessage(payload.message);\r\n                }\r\n                if (payload.stages) {\r\n                    this.stages.next(payload.stages);\r\n                }\r\n                break;\r\n            case IrisChatWebsocketPayloadType.STATUS:\r\n                this.stages.next(payload.stages || []);\r\n                if (payload.suggestions) {\r\n                    this.suggestions.next(payload.suggestions);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected close(): void {\r\n        if (this.sessionId) {\r\n            this.ws.unsubscribeFromSession(this.sessionId);\r\n            this.sessionId = undefined;\r\n            this.messages.next([]);\r\n            this.stages.next([]);\r\n            this.suggestions.next([]);\r\n            this.numNewMessages.next(0);\r\n            this.newIrisMessage.next(undefined);\r\n        }\r\n        this.error.next(undefined);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current session or creates a new one if it doesn't exist.\r\n     */\r\n    private getCurrentSessionOrCreate(): Observable<IrisExerciseChatSession> {\r\n        if (!this.sessionCreationIdentifier) {\r\n            throw new Error('Session creation identifier not set');\r\n        }\r\n\r\n        return this.http.getCurrentSessionOrCreateIfNotExists(this.sessionCreationIdentifier).pipe(\r\n            map((response: HttpResponse<IrisExerciseChatSession>) => {\r\n                if (response.body) {\r\n                    return response.body;\r\n                } else {\r\n                    throw new Error(IrisErrorMessageKey.SESSION_LOAD_FAILED);\r\n                }\r\n            }),\r\n            catchError(() => throwError(() => new Error(IrisErrorMessageKey.SESSION_LOAD_FAILED))),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new session\r\n     */\r\n    private createNewSession(): Observable<IrisExerciseChatSession> {\r\n        if (!this.sessionCreationIdentifier) {\r\n            throw new Error('Session creation identifier not set');\r\n        }\r\n        return this.http.createSession(this.sessionCreationIdentifier).pipe(\r\n            map((response: HttpResponse<IrisExerciseChatSession>) => {\r\n                if (response.body) {\r\n                    return response.body;\r\n                } else {\r\n                    throw new Error(IrisErrorMessageKey.SESSION_CREATION_FAILED);\r\n                }\r\n            }),\r\n            catchError(() => throwError(() => new Error(IrisErrorMessageKey.SESSION_CREATION_FAILED))),\r\n        );\r\n    }\r\n\r\n    switchTo(mode: ChatServiceMode, id?: number): void {\r\n        const newIdentifier = mode && id ? mode + '/' + id : undefined;\r\n        const isDifferent = this.sessionCreationIdentifier !== newIdentifier;\r\n        this.sessionCreationIdentifier = newIdentifier;\r\n        if (isDifferent) {\r\n            this.closeAndStart();\r\n        }\r\n    }\r\n\r\n    private closeAndStart() {\r\n        this.close();\r\n        if (this.sessionCreationIdentifier) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    public currentMessages(): Observable<IrisMessage[]> {\r\n        return this.messages.asObservable();\r\n    }\r\n\r\n    public currentStages(): Observable<IrisStageDTO[]> {\r\n        return this.stages.asObservable();\r\n    }\r\n\r\n    public currentError(): Observable<IrisErrorMessageKey | undefined> {\r\n        return this.error.asObservable();\r\n    }\r\n\r\n    public currentNumNewMessages(): Observable<number> {\r\n        return this.numNewMessages.asObservable();\r\n    }\r\n\r\n    public currentSuggestions(): Observable<string[]> {\r\n        return this.suggestions.asObservable();\r\n    }\r\n}\r\n", "import { Component, Input, OnChanges } from '@angular/core';\r\nimport { faArrowsRotate, faCircleXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { IrisStageDTO, IrisStageStateDTO } from 'app/entities/iris/iris-stage-dto.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-chat-status-bar',\r\n    templateUrl: './chat-status-bar.component.html',\r\n    styleUrl: './chat-status-bar.component.scss',\r\n    imports: [FaIconComponent, NgClass],\r\n})\r\nexport class ChatStatusBarComponent implements OnChanges {\r\n    open = false;\r\n    openTimeout: ReturnType<typeof setTimeout>;\r\n    styleTimeout: ReturnType<typeof setTimeout>;\r\n    activeStage?: IrisStageDTO;\r\n    displayedText?: string;\r\n    displayedSubText?: string;\r\n    style?: string;\r\n\r\n    @Input() stages?: IrisStageDTO[] = [];\r\n\r\n    faArrowsRotate = faArrowsRotate;\r\n    faCircleXmark = faCircleXmark;\r\n\r\n    protected readonly JSON = JSON;\r\n    protected readonly IrisStageStateDTO = IrisStageStateDTO;\r\n\r\n    ngOnChanges() {\r\n        // Lower case state for scss classes, avoid function calling in template\r\n        this.stages?.forEach((stage) => (stage.lowerCaseState = stage.state?.toLowerCase()));\r\n        const firstUnfinished = this.stages?.find((stage) => !this.isStageFinished(stage));\r\n        if (firstUnfinished) {\r\n            clearTimeout(this.openTimeout);\r\n            clearTimeout(this.styleTimeout);\r\n            this.open = true;\r\n            // Only update style tag if the active stage changed; otherwise the animations are reset on each change\r\n            if (firstUnfinished.name !== this.activeStage?.name) {\r\n                this.style = undefined;\r\n                // Use a timeout to let the bar of this stage autofill until 5% in 500ms (using scss)\r\n                // This makes it more clear that the stage has started\r\n                // After that, change it to 90% to let it slowly fill up using css transition\r\n                // Stopping at 90% makes it more clear that the stage is not yet finished\r\n                this.styleTimeout = setTimeout(() => (this.style = 'transform: scaleX(0.9)'), 500);\r\n            }\r\n            this.activeStage = firstUnfinished;\r\n            this.displayedText = firstUnfinished.name;\r\n            this.displayedSubText = firstUnfinished.message || undefined;\r\n        } else {\r\n            this.activeStage = undefined;\r\n            if (this.open) {\r\n                this.openTimeout = setTimeout(() => {\r\n                    this.open = false;\r\n                    this.displayedText = undefined;\r\n                    this.displayedSubText = undefined;\r\n                }, 5000);\r\n            }\r\n        }\r\n    }\r\n\r\n    isStageFinished(stage: IrisStageDTO) {\r\n        return stage.state === 'DONE' || stage.state === 'SKIPPED';\r\n    }\r\n}\r\n", "<div class=\"chat-status-bar\" [class.open]=\"open\">\r\n    <div class=\"display\" [class.active]=\"activeStage\" [class.has-message]=\"displayedSubText\" [class.error]=\"activeStage?.state === IrisStageStateDTO.ERROR\">\r\n        @if (displayedText) {\r\n            @switch (activeStage?.state) {\r\n                @case (IrisStageStateDTO.ERROR) {\r\n                    <fa-icon [icon]=\"faCircleXmark\" />\r\n                }\r\n                @default {\r\n                    <fa-icon [icon]=\"faArrowsRotate\" animation=\"spin\" />\r\n                }\r\n            }\r\n\r\n            <div>\r\n                {{ displayedText }}\r\n                @if (displayedSubText) {\r\n                    <div class=\"message\">{{ displayedSubText }}</div>\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"progress-bar\">\r\n        @for (stage of stages; track $index) {\r\n            <div class=\"part\" [style.flex-grow]=\"stage.weight\" [style]=\"stage.state === IrisStageStateDTO.IN_PROGRESS ? style : undefined\" [ngClass]=\"stage.lowerCaseState\"></div>\r\n        }\r\n    </div>\r\n</div>\r\n", "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'as',\r\n    pure: true,\r\n})\r\nexport class AsPipe implements PipeTransform {\r\n    transform<T>(value: any, _type: (new (...args: any[]) => T) | T): T {\r\n        return value as T;\r\n    }\r\n}\r\n", "import { faArrowDown, faCircle, faCircleInfo, faCompress, faExpand, faPaperPlane, faRedo, faThumbsDown, faThumbsUp, faTrash, faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, inject } from '@angular/core';\r\nimport { IrisAssistantMessage, IrisMessage, IrisSender } from 'app/entities/iris/iris-message.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { IrisErrorMessageKey } from 'app/entities/iris/iris-errors.model';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IrisLogoSize } from 'app/iris/iris-logo/iris-logo.component';\r\nimport { IrisStageDTO, IrisStageStateDTO } from 'app/entities/iris/iris-stage-dto.model';\r\nimport { IrisRateLimitInformation } from 'app/entities/iris/iris-ratelimit-info.model';\r\nimport { IrisStatusService } from 'app/iris/iris-status.service';\r\nimport { IrisMessageContentType, IrisTextMessageContent } from 'app/entities/iris/iris-content-type.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { animate, group, style, transition, trigger } from '@angular/animations';\r\nimport { IrisChatService } from 'app/iris/iris-chat.service';\r\nimport * as _ from 'lodash-es';\r\nimport { IrisLogoComponent } from '../iris-logo/iris-logo.component';\r\nimport { RouterLink } from '@angular/router';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ChatStatusBarComponent } from './chat-status-bar/chat-status-bar.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { AsPipe } from 'app/shared/pipes/as.pipe';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-iris-base-chatbot',\r\n    templateUrl: './iris-base-chatbot.component.html',\r\n    styleUrls: ['./iris-base-chatbot.component.scss'],\r\n    animations: [\r\n        trigger('messageAnimation', [\r\n            transition(':enter', [\r\n                style({\r\n                    height: '0',\r\n                    transform: 'scale(0)',\r\n                }),\r\n                group([\r\n                    animate(\r\n                        '0.3s ease-in-out',\r\n                        style({\r\n                            height: '*',\r\n                        }),\r\n                    ),\r\n                    animate(\r\n                        '0.3s 0.1s cubic-bezier(.2,1.22,.64,1)',\r\n                        style({\r\n                            transform: 'scale(1)',\r\n                        }),\r\n                    ),\r\n                ]),\r\n            ]),\r\n        ]),\r\n        trigger('suggestionAnimation', [\r\n            transition(':enter', [\r\n                style({ height: 0, opacity: 0 }),\r\n                group([\r\n                    animate(\r\n                        '0.3s 0.5s ease-in-out',\r\n                        style({\r\n                            height: '*',\r\n                            opacity: 1,\r\n                        }),\r\n                    ),\r\n                ]),\r\n            ]),\r\n            transition(':leave', [\r\n                style({ height: '*', opacity: 1 }),\r\n                group([\r\n                    animate(\r\n                        '0.3s ease-in-out',\r\n                        style({\r\n                            height: 0,\r\n                            opacity: 0,\r\n                        }),\r\n                    ),\r\n                ]),\r\n            ]),\r\n        ]),\r\n    ],\r\n    imports: [\r\n        IrisLogoComponent,\r\n        RouterLink,\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        TranslateDirective,\r\n        ChatStatusBarComponent,\r\n        FormsModule,\r\n        ButtonComponent,\r\n        ArtemisTranslatePipe,\r\n        AsPipe,\r\n        HtmlForMarkdownPipe,\r\n    ],\r\n})\r\nexport class IrisBaseChatbotComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    protected accountService = inject(AccountService);\r\n    protected modalService = inject(NgbModal);\r\n    protected translateService = inject(TranslateService);\r\n    protected statusService = inject(IrisStatusService);\r\n    protected chatService = inject(IrisChatService);\r\n\r\n    // Icons\r\n    faTrash = faTrash;\r\n    faCircle = faCircle;\r\n    faPaperPlane = faPaperPlane;\r\n    faExpand = faExpand;\r\n    faXmark = faXmark;\r\n    faArrowDown = faArrowDown;\r\n    faCircleInfo = faCircleInfo;\r\n    faCompress = faCompress;\r\n    faThumbsUp = faThumbsUp;\r\n    faThumbsDown = faThumbsDown;\r\n    faRedo = faRedo;\r\n\r\n    // State variables\r\n    messagesSubscription: Subscription;\r\n    stagesSubscription: Subscription;\r\n    errorSubscription: Subscription;\r\n    numNewMessageSubscription: Subscription;\r\n    rateLimitSubscription: Subscription;\r\n    activeStatusSubscription: Subscription;\r\n    suggestionsSubscription: Subscription;\r\n\r\n    messages: IrisMessage[] = [];\r\n    stages?: IrisStageDTO[] = [];\r\n    suggestions?: string[] = [];\r\n    error?: IrisErrorMessageKey;\r\n    numNewMessages: number = 0;\r\n    rateLimitInfo: IrisRateLimitInformation;\r\n    active = true;\r\n\r\n    newMessageTextContent = '';\r\n    isLoading: boolean;\r\n    shouldAnimate = false;\r\n    hasActiveStage = false;\r\n\r\n    // User preferences\r\n    userAccepted: boolean;\r\n    isScrolledToBottom = true;\r\n    rows = 1;\r\n    resendAnimationActive: boolean;\r\n    public ButtonType = ButtonType;\r\n\r\n    @Input() fullSize: boolean | undefined;\r\n    @Input() showCloseButton = false;\r\n    @Input() isChatGptWrapper = false;\r\n    @Output() fullSizeToggle = new EventEmitter<void>();\r\n    @Output() closeClicked = new EventEmitter<void>();\r\n\r\n    // ViewChilds\r\n    @ViewChild('messagesElement') messagesElement!: ElementRef;\r\n    @ViewChild('scrollArrow') scrollArrow!: ElementRef;\r\n    @ViewChild('messageTextarea') messageTextarea: ElementRef<HTMLTextAreaElement>;\r\n    @ViewChild('acceptButton') acceptButton: ElementRef<HTMLButtonElement>;\r\n\r\n    // Types\r\n    protected readonly IrisLogoSize = IrisLogoSize;\r\n    protected readonly IrisMessageContentType = IrisMessageContentType;\r\n    protected readonly IrisAssistantMessage = IrisAssistantMessage;\r\n    protected readonly IrisTextMessageContent = IrisTextMessageContent;\r\n    protected readonly IrisSender = IrisSender;\r\n    protected readonly IrisErrorMessageKey = IrisErrorMessageKey;\r\n\r\n    ngOnInit() {\r\n        this.messagesSubscription = this.chatService.currentMessages().subscribe((messages) => {\r\n            if (messages.length !== this.messages?.length) {\r\n                this.scrollToBottom('auto');\r\n                setTimeout(() => this.messageTextarea?.nativeElement?.focus(), 10);\r\n            }\r\n            this.messages = _.cloneDeep(messages).reverse();\r\n            this.messages.forEach((message) => {\r\n                // @ts-expect-error - TS doesn't get that I'm checking for the type\r\n                if (message.content?.[0]?.textContent) {\r\n                    // Double all \\n\r\n                    const cnt = message.content[0] as IrisTextMessageContent;\r\n                    cnt.textContent = cnt.textContent.replace(/\\n\\n/g, '\\n\\u00A0\\n');\r\n                    cnt.textContent = cnt.textContent.replace(/\\n/g, '\\n\\n');\r\n                }\r\n            });\r\n        });\r\n        this.stagesSubscription = this.chatService.currentStages().subscribe((stages) => {\r\n            this.stages = stages;\r\n            this.hasActiveStage = stages?.some((stage) => [IrisStageStateDTO.IN_PROGRESS, IrisStageStateDTO.NOT_STARTED].includes(stage.state));\r\n        });\r\n        this.errorSubscription = this.chatService.currentError().subscribe((error) => (this.error = error));\r\n        this.numNewMessageSubscription = this.chatService.currentNumNewMessages().subscribe((num) => {\r\n            this.numNewMessages = num;\r\n            this.checkUnreadMessageScroll();\r\n        });\r\n        this.rateLimitSubscription = this.statusService.currentRatelimitInfo().subscribe((info) => (this.rateLimitInfo = info));\r\n        this.activeStatusSubscription = this.statusService.getActiveStatus().subscribe((active) => {\r\n            if (!active) {\r\n                this.isLoading = false;\r\n                this.resendAnimationActive = false;\r\n            }\r\n            this.active = active;\r\n        });\r\n        this.suggestionsSubscription = this.chatService.currentSuggestions().subscribe((suggestions) => {\r\n            this.suggestions = suggestions;\r\n        });\r\n\r\n        this.checkIfUserAcceptedExternalLLMUsage();\r\n\r\n        // Focus on message textarea\r\n        setTimeout(() => {\r\n            if (this.messageTextarea) {\r\n                this.messageTextarea.nativeElement.focus();\r\n            } else {\r\n                this.acceptButton.nativeElement.focus();\r\n            }\r\n        }, 150);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.checkUnreadMessageScroll();\r\n        setTimeout(() => (this.shouldAnimate = true));\r\n    }\r\n\r\n    checkUnreadMessageScroll() {\r\n        if (this.numNewMessages > 0) {\r\n            this.scrollToBottom('smooth');\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.messagesSubscription.unsubscribe();\r\n        this.stagesSubscription.unsubscribe();\r\n        this.errorSubscription.unsubscribe();\r\n        this.numNewMessageSubscription.unsubscribe();\r\n        this.rateLimitSubscription.unsubscribe();\r\n        this.activeStatusSubscription.unsubscribe();\r\n        this.suggestionsSubscription.unsubscribe();\r\n    }\r\n\r\n    checkIfUserAcceptedExternalLLMUsage(): void {\r\n        this.userAccepted = !!this.accountService.userIdentity?.externalLLMUsageAccepted;\r\n        setTimeout(() => this.adjustTextareaRows(), 0);\r\n    }\r\n\r\n    /**\r\n     * Handles the send button click event and sends the user's message.\r\n     */\r\n    onSend(): void {\r\n        this.chatService.messagesRead();\r\n        if (this.newMessageTextContent) {\r\n            this.isLoading = true;\r\n            this.chatService.sendMessage(this.newMessageTextContent).subscribe(() => {\r\n                this.isLoading = false;\r\n            });\r\n            this.newMessageTextContent = '';\r\n        }\r\n        this.resetChatBodyHeight();\r\n    }\r\n\r\n    resendMessage(message: IrisMessage) {\r\n        if (message.sender !== IrisSender.USER) {\r\n            return;\r\n        }\r\n        let observable;\r\n        if (message.id) {\r\n            observable = this.chatService.resendMessage(message);\r\n            this.resendAnimationActive = true;\r\n        } else if (message.content?.[0]?.textContent) {\r\n            observable = this.chatService.sendMessage(message.content[0].textContent);\r\n        } else {\r\n            this.resendAnimationActive = false;\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n\r\n        observable.subscribe(() => {\r\n            this.resendAnimationActive = false;\r\n            this.isLoading = false;\r\n            this.chatService.messagesRead();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rates a message as helpful or unhelpful.\r\n     * @param message The message to rate.\r\n     * @param helpful A boolean indicating if the message is helpful or not.\r\n     */\r\n    rateMessage(message: IrisMessage, helpful?: boolean) {\r\n        if (message.sender !== IrisSender.LLM) {\r\n            return;\r\n        }\r\n        message.helpful = !!helpful;\r\n        this.chatService.rateMessage(message, helpful).subscribe();\r\n    }\r\n\r\n    /**\r\n     * Scrolls the chat body to the bottom.\r\n     * @param behavior - The scroll behavior.\r\n     */\r\n    scrollToBottom(behavior: ScrollBehavior) {\r\n        setTimeout(() => {\r\n            const messagesElement: HTMLElement = this.messagesElement.nativeElement;\r\n            messagesElement.scrollTo({\r\n                top: 0,\r\n                behavior: behavior,\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear session and start a new conversation.\r\n     */\r\n    onClearSession(content: any) {\r\n        this.modalService.open(content).result.then((result: string) => {\r\n            if (result === 'confirm') {\r\n                this.isLoading = false;\r\n                this.chatService.clearChat();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Accepts the permission to use the chat widget.\r\n     */\r\n    acceptPermission() {\r\n        this.chatService.setUserAccepted();\r\n        this.userAccepted = true;\r\n    }\r\n\r\n    /**\r\n     * This method is intended to handle the closing of the chat interface.\r\n     * It emits a close event which should be handled by the parent component.\r\n     */\r\n    closeChat() {\r\n        this.chatService.messagesRead();\r\n        this.closeClicked.emit();\r\n    }\r\n\r\n    /**\r\n     * Handles the key events in the message textarea.\r\n     * @param event - The keyboard event.\r\n     */\r\n    handleKey(event: KeyboardEvent): void {\r\n        if (event.key === 'Enter') {\r\n            if (!this.isLoading && this.active) {\r\n                if (!event.shiftKey) {\r\n                    event.preventDefault();\r\n                    this.onSend();\r\n                } else {\r\n                    const textArea = event.target as HTMLTextAreaElement;\r\n                    const { selectionStart, selectionEnd } = textArea;\r\n                    const value = textArea.value;\r\n                    textArea.value = value.slice(0, selectionStart) + value.slice(selectionEnd);\r\n                    textArea.selectionStart = textArea.selectionEnd = selectionStart + 1;\r\n                }\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the input event in the message textarea.\r\n     */\r\n    onInput() {\r\n        this.adjustTextareaRows();\r\n    }\r\n\r\n    /**\r\n     * Handles the paste event in the message textarea.\r\n     */\r\n    onPaste() {\r\n        setTimeout(() => {\r\n            this.adjustTextareaRows();\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * Adjusts the height of the message textarea based on its content.\r\n     */\r\n    adjustTextareaRows() {\r\n        const textarea: HTMLTextAreaElement = this.messageTextarea.nativeElement;\r\n        textarea.style.height = 'auto'; // Reset the height to auto\r\n        const bufferForSpaceBetweenLines = 4;\r\n        const lineHeight = parseInt(getComputedStyle(textarea).lineHeight, 10) + bufferForSpaceBetweenLines;\r\n        const maxRows = 3;\r\n        const maxHeight = lineHeight * maxRows;\r\n\r\n        textarea.style.height = `${Math.min(textarea.scrollHeight, maxHeight)}px`;\r\n\r\n        this.adjustScrollButtonPosition(Math.min(textarea.scrollHeight, maxHeight) / lineHeight);\r\n    }\r\n\r\n    /**\r\n     * Handles the row change event in the message textarea.\r\n     */\r\n    onModelChange() {\r\n        const textarea: HTMLTextAreaElement = this.messageTextarea.nativeElement;\r\n        const newRows = textarea.value.split('\\n').length;\r\n        if (newRows != this.rows) {\r\n            if (newRows <= 3) {\r\n                textarea.rows = newRows;\r\n                this.adjustScrollButtonPosition(newRows);\r\n                this.rows = newRows;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adjusts the position of the scroll button based on the number of rows in the message textarea.\r\n     * @param newRows - The new number of rows.\r\n     */\r\n    adjustScrollButtonPosition(newRows: number) {\r\n        const textarea: HTMLTextAreaElement = this.messageTextarea.nativeElement;\r\n        const scrollArrow: HTMLElement = this.scrollArrow.nativeElement;\r\n        const lineHeight = parseInt(window.getComputedStyle(textarea).lineHeight);\r\n        const rowHeight = lineHeight * newRows - lineHeight;\r\n        setTimeout(() => {\r\n            scrollArrow.style.bottom = `calc(11% + ${rowHeight}px)`;\r\n        }, 10);\r\n    }\r\n\r\n    /**\r\n     * Resets the height of the chat body.\r\n     */\r\n    resetChatBodyHeight() {\r\n        const textarea: HTMLTextAreaElement = this.messageTextarea.nativeElement;\r\n        const scrollArrow: HTMLElement = this.scrollArrow.nativeElement;\r\n        textarea.rows = 1;\r\n        textarea.style.height = '';\r\n        scrollArrow.style.bottom = '';\r\n    }\r\n\r\n    checkChatScroll() {\r\n        const messagesElement = this.messagesElement.nativeElement;\r\n        const scrollTop = messagesElement.scrollTop;\r\n        this.isScrolledToBottom = scrollTop < 50;\r\n    }\r\n\r\n    onSuggestionClick(suggestion: string) {\r\n        this.newMessageTextContent = suggestion;\r\n        this.onSend();\r\n    }\r\n}\r\n", "<!-- client -->\r\n<div class=\"chat-header\">\r\n    <div class=\"header-start\">\r\n        @if (!isChatGptWrapper) {\r\n            <jhi-iris-logo [size]=\"IrisLogoSize.FLUID\" />\r\n        } @else {\r\n            <!-- TODO TW: This \"feature\" is only temporary for a paper. -->\r\n            <img src=\"public/images/chatgpt-temp/ChatGPT_logo.svg\" alt=\"Iris Logo\" style=\"height: 27px\" class=\"iris-logo\" />\r\n        }\r\n\r\n        <div class=\"word-iris\">{{ isChatGptWrapper ? 'ChatGPT' : 'Iris' }}</div>\r\n        @if (!isChatGptWrapper) {\r\n            <a [routerLink]=\"'/about-iris'\" target=\"_blank\">\r\n                <fa-icon [icon]=\"faCircleInfo\" class=\"info-button\" />\r\n            </a>\r\n        }\r\n    </div>\r\n    <div class=\"d-flex gap-2\">\r\n        @if (rateLimitInfo.rateLimit > 0) {\r\n            <div class=\"toolbox\">\r\n                <span class=\"rate-limit\" [ngbTooltip]=\"'artemisApp.exerciseChatbot.rateLimitTooltip' | artemisTranslate: { hours: rateLimitInfo.rateLimitTimeframeHours }\">\r\n                    {{ rateLimitInfo.currentMessageCount }} / {{ rateLimitInfo.rateLimit }}\r\n                </span>\r\n            </div>\r\n        }\r\n        <div class=\"toolbox\">\r\n            @if (this.messages.length >= 1) {\r\n                <button id=\"clear-chat-button\" (click)=\"onClearSession(clearConfirmModal)\" class=\"header-icon\">\r\n                    <fa-icon [icon]=\"faTrash\" />\r\n                </button>\r\n            }\r\n\r\n            @if (fullSize !== undefined) {\r\n                <button (click)=\"fullSizeToggle.next()\" class=\"header-icon\">\r\n                    @if (!fullSize) {\r\n                        <fa-icon [icon]=\"faExpand\" />\r\n                    } @else {\r\n                        <fa-icon [icon]=\"faCompress\" />\r\n                    }\r\n                </button>\r\n            }\r\n\r\n            @if (showCloseButton) {\r\n                <button (click)=\"closeChat()\" class=\"header-icon\">\r\n                    <fa-icon [icon]=\"faXmark\" />\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #clearConfirmModal let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <span jhiTranslate=\"artemisApp.exerciseChatbot.clearSession.title\"></span>\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <p jhiTranslate=\"artemisApp.exerciseChatbot.clearSession.text\"></p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger\" (click)=\"modal.close('confirm')\">\r\n            <span jhiTranslate=\"artemisApp.exerciseChatbot.clearSession.submit\"></span>\r\n        </button>\r\n    </div>\r\n</ng-template>\r\n<!-- main chat section -->\r\n<div class=\"chat-body\" [class.not-accepted]=\"!userAccepted\" #chatBody>\r\n    @if (messages?.length) {\r\n        <div class=\"messages\" #messagesElement (scroll)=\"checkChatScroll()\">\r\n            @if (\r\n                suggestions?.length &&\r\n                userAccepted &&\r\n                !this.isLoading &&\r\n                this.active &&\r\n                (!this.rateLimitInfo?.rateLimit || this.rateLimitInfo?.currentMessageCount !== this.rateLimitInfo?.rateLimit) &&\r\n                !this.hasActiveStage\r\n            ) {\r\n                <div @suggestionAnimation class=\"suggestions-container\">\r\n                    @for (suggestion of suggestions; track suggestion) {\r\n                        <button class=\"suggestion-button\" (click)=\"onSuggestionClick(suggestion)\" [innerHTML]=\"suggestion\"></button>\r\n                    }\r\n                </div>\r\n            }\r\n            @for (message of messages; track message.id; let i = $index) {\r\n                <div @messageAnimation [@.disabled]=\"!shouldAnimate\" [style.transform-origin]=\"message.sender === IrisSender.USER ? 'bottom right' : 'bottom left'\">\r\n                    @for (content of message.content; track content) {\r\n                        <div>\r\n                            @if (message.sender === IrisSender.USER) {\r\n                                <div class=\"d-flex justify-content-end align-items-center\">\r\n                                    @if (content.type === IrisMessageContentType.TEXT) {\r\n                                        <span class=\"bubble-right\">\r\n                                            @for (line of (content | as: IrisTextMessageContent).textContent.split('\\n'); track line) {\r\n                                                <div [innerHTML]=\"line\"></div>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            @if (message.sender === IrisSender.LLM) {\r\n                                <div style=\"width: fit-content; position: relative\">\r\n                                    @if (content.type === IrisMessageContentType.TEXT) {\r\n                                        <div class=\"bubble-left\">\r\n                                            <span [innerHTML]=\"(content | as: IrisTextMessageContent).textContent! | htmlForMarkdown\"></span>\r\n                                        </div>\r\n\r\n                                        <div class=\"rate-message-buttons toolbox\">\r\n                                            <button\r\n                                                class=\"btn btn-sm\"\r\n                                                [class.thumbs-up-clicked]=\"(message | as: IrisAssistantMessage).helpful\"\r\n                                                [class.clickable]=\"!(message | as: IrisAssistantMessage).helpful\"\r\n                                                [class.rate-button-not-clicked]=\"!(message | as: IrisAssistantMessage).helpful\"\r\n                                                (click)=\"rateMessage(message, true)\"\r\n                                                [disabled]=\"(message | as: IrisAssistantMessage).helpful\"\r\n                                            >\r\n                                                <fa-icon [icon]=\"faThumbsUp\" />\r\n                                            </button>\r\n                                            <button\r\n                                                class=\"btn btn-sm\"\r\n                                                [class.thumbs-down-clicked]=\"(message | as: IrisAssistantMessage).helpful === false\"\r\n                                                [class.clickable]=\"(message | as: IrisAssistantMessage).helpful !== false\"\r\n                                                [class.rate-button-not-clicked]=\"(message | as: IrisAssistantMessage).helpful !== false\"\r\n                                                (click)=\"rateMessage(message, false)\"\r\n                                                [disabled]=\"(message | as: IrisAssistantMessage).helpful === false\"\r\n                                            >\r\n                                                <fa-icon [icon]=\"faThumbsDown\" />\r\n                                            </button>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (!messages?.length) {\r\n        <div class=\"empty-chat-message\">\r\n            @if (!isChatGptWrapper) {\r\n                <jhi-iris-logo [size]=\"IrisLogoSize.SMALL\" />\r\n            } @else {\r\n                <!-- TODO TW: This \"feature\" is only temporary for a paper. -->\r\n                <img src=\"public/images/chatgpt-temp/ChatGPT_logo.svg\" alt=\"Iris Logo\" style=\"height: 35px\" class=\"iris-logo\" />\r\n            }\r\n            <h3 jhiTranslate=\"artemisApp.iris.chat.helpOffer\"></h3>\r\n        </div>\r\n    }\r\n    <jhi-chat-status-bar [stages]=\"stages\" />\r\n    @if (!userAccepted) {\r\n        <div class=\"p-chat\">\r\n            <div class=\"message-text\" jhiTranslate=\"artemisApp.exerciseActions.externalLLMUsage.popUpMessage\"></div>\r\n            <div class=\"button-container\">\r\n                <button type=\"button\" class=\"btn btn-primary\" #acceptButton (click)=\"acceptPermission()\" jhiTranslate=\"artemisApp.exerciseChatbot.accept\"></button>\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeChat()\" jhiTranslate=\"artemisApp.exerciseChatbot.decline\"></button>\r\n            </div>\r\n        </div>\r\n    }\r\n    <div class=\"scroll-to-bottom\" [hidden]=\"isScrolledToBottom\" (click)=\"scrollToBottom('smooth')\" #scrollArrow>\r\n        <fa-icon [icon]=\"faArrowDown\" />\r\n    </div>\r\n    @if (error) {\r\n        <div class=\"client-chat-error\">\r\n            {{ error | artemisTranslate }}\r\n        </div>\r\n    }\r\n    @if (!active) {\r\n        <div class=\"client-chat-error\" [jhiTranslate]=\"IrisErrorMessageKey.IRIS_NOT_AVAILABLE\"></div>\r\n    }\r\n    @if (userAccepted) {\r\n        <div class=\"chat-input\">\r\n            <textarea\r\n                [(ngModel)]=\"newMessageTextContent\"\r\n                rows=\"1\"\r\n                class=\"form-control\"\r\n                (ngModelChange)=\"onModelChange()\"\r\n                (input)=\"onInput()\"\r\n                (paste)=\"onPaste()\"\r\n                type=\"text\"\r\n                [disabled]=\"\r\n                    this.isLoading ||\r\n                    !this.active ||\r\n                    (this.rateLimitInfo?.rateLimit && this.rateLimitInfo?.currentMessageCount === this.rateLimitInfo?.rateLimit) ||\r\n                    this.hasActiveStage\r\n                \"\r\n                (keydown)=\"handleKey($event)\"\r\n                placeholder=\"{{ 'artemisApp.exerciseChatbot.inputMessage' | artemisTranslate }}\"\r\n                #messageTextarea\r\n            ></textarea>\r\n            <jhi-button\r\n                id=\"irisSendButton\"\r\n                (onClick)=\"onSend()\"\r\n                [btnType]=\"ButtonType.SUCCESS_OUTLINE\"\r\n                [icon]=\"faPaperPlane\"\r\n                [disabled]=\"\r\n                    this.isLoading ||\r\n                    !this.active ||\r\n                    (this.rateLimitInfo?.rateLimit && this.rateLimitInfo?.currentMessageCount === this.rateLimitInfo?.rateLimit) ||\r\n                    this.hasActiveStage\r\n                \"\r\n            />\r\n            @if (!isChatGptWrapper) {\r\n                <span class=\"disclaimer-message\" jhiTranslate=\"artemisApp.exerciseChatbot.disclaimer\"></span>\r\n            } @else {\r\n                <span class=\"disclaimer-message\" jhiTranslate=\"artemisApp.exerciseChatbot.disclaimerGPT\"></span>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "k5CAIA,IAAYA,EAAZ,SAAYA,EAAU,CAClBA,OAAAA,EAAA,IAAA,MACAA,EAAA,KAAA,OAFQA,CAGZ,EAHYA,GAAU,CAAA,CAAA,EAKTC,GAAP,KAA2B,CAC7BC,GACAC,QACAC,OACAC,OACAC,SAGSC,GAAP,KAAsB,CACxBL,GACAC,QACAC,OACAC,OACAG,uBCtBJ,IAAYC,EAAZ,SAAYA,EAAmB,CAC3BA,OAAAA,EAAA,oBAAA,sDACAA,EAAA,oBAAA,sDACAA,EAAA,oBAAA,sDACAA,EAAA,sBAAA,wDACAA,EAAA,wBAAA,0DACAA,EAAA,oBAAA,sDACAA,EAAA,cAAA,iDACAA,EAAA,6BAAA,4CACAA,EAAA,cAAA,iDACAA,EAAA,UAAA,8CACAA,EAAA,qBAAA,uDACAA,EAAA,iBAAA,oDACAA,EAAA,mBAAA,qDACAA,EAAA,YAAA,+CACAA,EAAA,eAAA,kDACAA,EAAA,yBAAA,mDACAA,EAAA,mBAAA,qDACAA,EAAA,oBAAA,sDAlBQA,CAmBZ,EAnBYA,GAAmB,CAAA,CAAA,EA2BzBC,GAA8B,CAChC,CAAEC,IAAKF,EAAoBG,oBAAqBC,MAAO,EAAI,EAC3D,CAAEF,IAAKF,EAAoBK,oBAAqBD,MAAO,EAAK,EAC5D,CAAEF,IAAKF,EAAoBM,oBAAqBF,MAAO,EAAI,EAC3D,CAAEF,IAAKF,EAAoBO,sBAAuBH,MAAO,EAAI,EAC7D,CAAEF,IAAKF,EAAoBQ,wBAAyBJ,MAAO,EAAI,EAC/D,CAAEF,IAAKF,EAAoBS,oBAAqBL,MAAO,EAAK,EAC5D,CAAEF,IAAKF,EAAoBU,cAAeN,MAAO,EAAI,EACrD,CAAEF,IAAKF,EAAoBW,6BAA8BP,MAAO,EAAK,EACrE,CAAEF,IAAKF,EAAoBY,cAAeR,MAAO,EAAK,EACtD,CAAEF,IAAKF,EAAoBa,qBAAsBT,MAAO,EAAI,EAC5D,CAAEF,IAAKF,EAAoBc,iBAAkBV,MAAO,EAAI,EACxD,CAAEF,IAAKF,EAAoBe,mBAAoBX,MAAO,EAAI,EAC1D,CAAEF,IAAKF,EAAoBgB,YAAaZ,MAAO,EAAI,EACnD,CAAEF,IAAKF,EAAoBiB,eAAgBb,MAAO,EAAI,EACtD,CAAEF,IAAKF,EAAoBkB,UAAWd,MAAO,EAAI,EACjD,CAAEF,IAAKF,EAAoBmB,yBAA0Bf,MAAO,EAAI,EAChE,CAAEF,IAAKF,EAAoBoB,mBAAoBhB,MAAO,EAAI,EAC1D,CAAEF,IAAKF,EAAoBqB,oBAAqBjB,MAAO,EAAI,CAAE,EAGpDkB,GAA2EC,OAAOC,OAC3FvB,GAAWwB,OACP,CAACC,EAAKC,KACFD,EAAIC,EAAIzB,GAAG,EAAIyB,EACRD,GAEX,CAAA,CAAqD,CACxD,ECzCL,IAAaE,IAAmB,IAAA,CAA1B,MAAOA,CAAmB,CAClBC,WAAaC,EAAOC,CAAU,EAE9BC,UAAoB,WAEpBC,WAAS,CAEf,OAAOC,KAAKC,MAAMD,KAAKE,OAAM,EAAKC,UAAU,CAChD,CAOAC,YAAYC,EAAiB,CACzB,OAAO,KAAKV,WAAWW,IAAmB,GAAG,KAAKR,SAAS,aAAaO,CAAS,YAAa,CAAEE,QAAS,UAAU,CAAE,EAAEC,KACnHC,EAAKC,GAAY,CACb,IAAMC,EAAWD,EAASE,KAC1B,GAAI,CAACD,EAAU,OAAOD,EAEtB,IAAMG,EAAmBF,EAASF,IAAKK,GAC5BC,OAAOC,OAAO,CAAA,EAAIF,EAAS,CAC9BG,OAAQC,GAAsBJ,EAAQG,MAAM,EAC/C,CACJ,EAEDJ,OAAAA,EAAiBM,KAAK,CAACC,EAAGC,IAClBD,EAAEH,QAAUI,EAAEJ,OACVG,EAAEH,SAAWI,EAAEJ,OAAe,EAC3BG,EAAEH,OAAOK,SAASD,EAAEJ,MAAM,EAAI,GAAK,EAEvC,CACV,EAEMF,OAAOC,OAAO,CAAA,EAAIN,EAAU,CAC/BE,KAAMC,EACT,CACL,CAAC,CAAC,CAEV,CAOAU,cAAclB,EAAmBS,EAAwB,CACrDA,OAAAA,EAAQU,sBAAwB,KAAKzB,UAAS,EACvC,KAAKJ,WAAW8B,KACnB,GAAG,KAAK3B,SAAS,aAAaO,CAAS,YACvCU,OAAOC,OAAO,CAAA,EAAIF,EAAS,CACvBG,OAAQS,GAAsBZ,EAAQG,MAAM,EAC/C,EACD,CAAEV,QAAS,UAAU,CAAE,CAE/B,CAQAoB,cAActB,EAAmBS,EAAwB,CACrDA,OAAAA,EAAQU,sBAAwBV,EAAQU,uBAAyB,KAAKzB,UAAS,EACxE,KAAKJ,WAAW8B,KAA2B,GAAG,KAAK3B,SAAS,aAAaO,CAAS,aAAaS,EAAQc,EAAE,UAAW,KAAM,CAAErB,QAAS,UAAU,CAAE,EAAEC,KACtJqB,EAAKnB,GAAY,CACTA,EAASE,MAAQF,EAASE,KAAKgB,KAC/Bd,EAAQc,GAAKlB,EAASE,KAAKgB,GAEnC,CAAC,CAAC,CAEV,CASAE,YAAYzB,EAAmB0B,EAAmBC,EAAgB,CAC9D,OAAO,KAAKrC,WAAWsC,IAAiB,GAAG,KAAKnC,SAAS,aAAaO,CAAS,aAAa0B,CAAS,WAAYC,EAAS,CAAEzB,QAAS,UAAU,CAAE,CACrJ,CAEA2B,qCAA4DC,EAAkB,CAC1E,OAAO,KAAKxC,WAAW8B,KAAQ,GAAG,KAAK3B,SAAS,IAAIqC,CAAU,oBAAqB,KAAM,CAAE5B,QAAS,UAAU,CAAE,CACpH,CAEA6B,cAAqCD,EAAkB,CACnD,OAAO,KAAKxC,WAAW8B,KAAQ,GAAG,KAAK3B,SAAS,IAAIqC,CAAU,YAAa,KAAM,CAAE5B,QAAS,UAAU,CAAE,CAC5G,4CA5FSb,EAAmB,6BAAnBA,EAAmB2C,QAAnB3C,EAAmB4C,UAAAC,WADN,MAAM,CAAA,SACnB7C,CAAmB,GAAA,ECJhC,IAAa8C,IAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACnBC,iBAAmBC,EAAOC,EAAgB,EAE5CC,mBAAqD,IAAIC,IAKjEC,aAAW,CACP,KAAKF,mBAAmBG,QAAQ,CAACC,EAAcC,IAAa,CACxDD,EAAaE,eAAeC,YAAW,EACvC,KAAKV,iBAAiBU,YAAY,KAAKC,wBAAwBH,CAAS,CAAC,CAC7E,CAAC,CACL,CAMOI,mBAAmBJ,EAAiB,CACvC,GAAI,CAACA,EACD,MAAM,IAAIK,MAAM,wBAAwB,EAe5C,OAZ0B,KAAKV,mBAAmBW,gBAAgBN,EAAW,IAAK,CAC9E,IAAMO,EAAU,KAAKJ,wBAAwBH,CAAS,EAChDQ,EAAU,IAAIC,GAOpB,MAAO,CAAER,eANc,KAAKT,iBACvBkB,UAAUH,CAAO,EACjBI,QAAQJ,CAAO,EACfG,UAAWE,GAAiB,CACzBJ,EAAQK,KAAKD,CAAQ,CACzB,CAAC,EACoBJ,QAAAA,CAAO,CACpC,CAAC,EAEwBA,QAAQM,aAAY,CACjD,CAOOC,uBAAuBf,EAAiB,CAC3C,IAAMgB,EAAoB,KAAKrB,mBAAmBsB,IAAIjB,CAAS,EAC/D,GAAIgB,EAAmB,CACnBA,EAAkBf,eAAeC,YAAW,EAC5C,KAAKP,mBAAmBuB,OAAOlB,CAAS,EAExC,IAAMO,EAAU,KAAKJ,wBAAwBH,CAAS,EACtD,YAAKR,iBAAiBU,YAAYK,CAAO,EAClC,EACX,CACA,MAAO,EACX,CAEQJ,wBAAwBH,EAAiB,CAC7C,MAAO,oBAAsBA,CACjC,4CA3DST,EAAoB,6BAApBA,EAAoB4B,QAApB5B,EAAoB6B,UAAAC,WADP,MAAM,CAAA,SACnB9B,CAAoB,GAAA,ECKjC,IAAY+B,GAAZ,SAAYA,EAA4B,CACpCA,OAAAA,EAAA,QAAA,UACAA,EAAA,OAAA,SAFQA,CAGZ,EAHYA,IAA4B,CAAA,CAAA,ECflC,IAAOC,GAAP,KAA+B,CAEtBC,oBACAC,UACAC,wBAHXC,YACWH,EACAC,EACAC,EAA+B,CAF/B,KAAAF,oBAAAA,EACA,KAAAC,UAAAA,EACA,KAAAC,wBAAAA,CACR,GCUP,IAAaE,IAAiB,IAAA,CAAxB,MAAOA,CAAiB,CAClBC,iBAAmBC,EAAOC,EAAgB,EAC1CC,WAAaF,EAAOG,CAAU,EAEtCC,WACAC,4BACAC,aAAe,GAEfC,OAAS,GACTC,cAAgB,IAAIC,EAAyB,KAAKF,MAAM,EAExDG,4BAA8B,IAAID,EAA0C,IAAIE,GAAyB,EAAG,EAAG,CAAC,CAAC,EAOjHC,aAAA,CACI,KAAKC,eAAc,EACnB,KAAKT,WAAaU,YAAY,IAAK,CAC/B,KAAKD,eAAc,CACvB,EAAG,GAAK,EAER,KAAKR,4BAA8B,KAAKN,iBAAiBgB,gBAAgBC,UAAWC,GAAU,CAC1F,KAAKX,aAAe,CAACW,EAAOC,WAAa,CAACD,EAAOE,oBAAsBF,EAAOG,sBAClF,CAAC,CACL,CAMAC,iBAAe,CACX,OAAO,KAAKb,cAAcc,aAAY,CAC1C,CAMAC,sBAAoB,CAChB,OAAO,KAAKb,4BAA4BY,aAAY,CACxD,CAMAE,oBAAoBC,EAAuC,CACvD,KAAKf,4BAA4BgB,KAAKD,CAAa,CACvD,CAKQZ,gBAAc,CACd,KAAKP,cACTqB,GAAe,KAAKC,cAAa,CAAE,EAAEC,KAAMC,GAAyC,CAC5EA,EAASC,MACT,KAAKxB,OAASyB,EAAQF,EAASC,KAAKxB,OAEhCuB,EAASC,KAAKN,eACd,KAAKf,4BAA4BgB,KAAKI,EAASC,KAAKN,aAAa,GAGrE,KAAKlB,OAAS,GAElB,KAAKC,cAAckB,KAAK,KAAKnB,MAAM,CACvC,CAAC,CACL,CAMA0B,aAAW,CACH,KAAK7B,aAAe8B,QAAWC,cAAc,KAAK/B,UAAU,EAChE,KAAKC,4BAA4B+B,YAAW,CAChD,CAMQR,eAAa,CACjB,OAAO,KAAK1B,WAAWmC,IAAmB,kBAAmB,CAAEC,QAAS,UAAU,CAAE,CACxF,4CAvFSxC,EAAiB,6BAAjBA,EAAiByC,QAAjBzC,EAAiB0C,UAAAC,WADJ,MAAM,CAAA,SACnB3C,CAAiB,GAAA,ECf9B,IAAY4C,GAAZ,SAAYA,EAAsB,CAC9BA,OAAAA,EAAA,KAAA,OADQA,CAEZ,EAFYA,IAAsB,CAAA,CAAA,EAIZC,GAAhB,KAAkC,CAIPC,KAH7BC,GACAC,UAEAC,YAA6BH,EAA4B,CAA5B,KAAAA,KAAAA,CAA+B,GAGnDI,EAAP,cAAsCL,EAAkB,CACvCM,YAAnBF,YAAmBE,EAAmB,CAClC,MAAMP,GAAuBQ,IAAI,EADlB,KAAAD,YAAAA,CAEnB,GCGJ,IAAYE,GAAZ,SAAYA,EAAe,CACvBA,OAAAA,EAAA,cAAA,qBACAA,EAAA,SAAA,gBACAA,EAAA,OAAA,cACAA,EAAA,QAAA,eAJQA,CAKZ,EALYA,IAAe,CAAA,CAAA,EAWdC,IAAe,IAAA,CAAtB,MAAOA,CAAe,CACxBC,KAAOC,EAAOC,EAAmB,EACjCC,GAAKF,EAAOG,EAAoB,EAChCC,OAASJ,EAAOK,EAAiB,EACzBC,YAAcN,EAAOO,EAAW,EAChCC,eAAiBR,EAAOS,EAAc,EAE9CC,UACAC,SAA2C,IAAIC,EAAgB,CAAA,CAAE,EACjEC,eAA2D,IAAID,EAAgBE,MAAS,EACxFC,eAA0C,IAAIH,EAAgB,CAAC,EAC/DI,OAA0C,IAAIJ,EAAgB,CAAA,CAAE,EAChEK,YAAyC,IAAIL,EAAgB,CAAA,CAAE,EAC/DM,MAA0D,IAAIN,EAAgBE,MAAS,EAEvFK,cACAC,sBACQC,mBAEAC,0BAERC,gCAAkC,GAElCC,aAAA,CACI,KAAKJ,sBAAwB,KAAKhB,OAAOqB,qBAAoB,EAAGC,UAAWC,GAAU,KAAKR,cAAgBQ,CAAK,CACnH,CAEAC,aAAW,CACP,KAAKR,sBAAsBS,YAAW,EACtC,KAAKR,oBAAoBQ,YAAW,CACxC,CAEUC,OAAK,EACP,KAAKtB,eAAeuB,cAAcC,0BAA4B,KAAKT,kCACnE,KAAKU,0BAAyB,EAAGP,UAAU,KAAKQ,iBAAgB,CAAE,CAE1E,CAMOC,YAAYC,EAAe,CAC9B,GAAI,CAAC,KAAK1B,UACN,OAAO2B,EAAW,IAAM,IAAIC,MAAM,iBAAiB,CAAC,EAExD,KAAKrB,YAAYsB,KAAK,CAAA,CAAE,EAGxBH,EAAUA,EAAQI,KAAI,EAEtB,IAAMC,EAAa,IAAIC,GACvBD,OAAAA,EAAWE,QAAU,CAAC,IAAIC,EAAuBR,CAAO,CAAC,EAClD,KAAKrC,KAAK8C,cAAc,KAAKnC,UAAW+B,CAAU,EAAEK,KACvDC,EAAKC,GAAK,CACN,KAAKC,oBAAoBD,EAAEE,IAAK,CACpC,CAAC,EACDC,EAAI,IAAA,EAAe,EACnBC,EAAYlC,IACR,KAAKmC,oBAAoBnC,CAAK,EACvBoC,EAAE,EACZ,CAAC,CAEV,CAEQL,oBAAoBb,EAAoB,CACjB,KAAKmB,eAAenB,CAAO,IAE9CA,EAAQoB,SAAWC,EAAWC,KAC9B,KAAK7C,eAAe0B,KAAKH,CAAO,EAEpC,KAAKzB,SAAS4B,KAAK,CAAC,GAAG,KAAK5B,SAASgD,SAAQ,EAAIvB,CAAO,CAAC,EAEjE,CAMAwB,cAAcxB,EAAwB,CAClC,OAAK,KAAK1B,UAIH,KAAKX,KAAK6D,cAAc,KAAKlD,UAAW0B,CAAO,EAAEU,KACpDK,EAAKU,GAAqCA,EAAEX,IAAK,EACjDH,EAAKC,GAAM,KAAKO,eAAeP,CAAC,CAAC,EACjCG,EAAI,IAAA,EAAe,EACnBC,EAAYlC,IACR,KAAKmC,oBAAoBnC,CAAK,EACvBoC,EAAE,EACZ,CAAC,EAVKjB,EAAW,IAAM,IAAIC,MAAM,iBAAiB,CAAC,CAY5D,CAEQe,oBAAoBnC,EAAwB,CAC5CA,EAAMd,SAAW,IACjB,KAAKc,MAAMqB,KAAKuB,EAAoBC,aAAa,EAC1C7C,EAAMd,SAAW,KACZ,IAAI4D,IAAG,EACfC,IAAI,QAAS,KAAK9C,eAAe+C,uBAAuB,EAC5D,KAAKhD,MAAMqB,KAAKuB,EAAoBK,mBAAmB,GAEvD,KAAKjD,MAAMqB,KAAKuB,EAAoBM,mBAAmB,CAE/D,CAEAC,YAAYjC,EAA+BkC,EAAiB,CACxD,OAAK,KAAK5D,UAIH,KAAKX,KAAKsE,YAAY,KAAK3D,UAAW0B,EAAQmC,GAAK,CAAC,CAACD,CAAO,EAAExB,KACjEK,EAAKU,GAA0CA,EAAEX,IAAK,EACtDH,EAAKC,GAAM,KAAKO,eAAeP,CAAC,CAAC,EACjCG,EAAI,IAAA,EAAe,EACnBC,EAAW,KACP,KAAKlC,MAAMqB,KAAKuB,EAAoBU,mBAAmB,EAChDlB,EAAE,EACZ,CAAC,EAVKjB,EAAW,IAAM,IAAIC,MAAM,iBAAiB,CAAC,CAY5D,CAEOmC,cAAY,CACf,KAAK1D,eAAewB,KAAK,CAAC,EAC1B,KAAK1B,eAAe0B,KAAKzB,MAAS,CACtC,CAEO4D,iBAAe,CAClB,KAAKrD,oBAAoBQ,YAAW,EACpC,KAAKR,mBAAqB,KAAKf,YAAYqE,uBAAsB,EAAGjD,UAAU,IAAK,CAC/E,KAAKH,gCAAkC,GACvC,KAAKf,eAAeoE,gCAA+B,EACnD,KAAKC,cAAa,CACtB,CAAC,CACL,CAEQtB,eAAenB,EAAoB,CACvC,IAAMzB,EAAW,CAAC,GAAG,KAAKA,SAASgD,SAAQ,CAAE,EACvCmB,EAAQnE,EAASoE,UAAW/B,GAAMA,EAAEuB,KAAOnC,EAAQmC,EAAE,EAC3D,OAAIO,GAAS,GACTnE,EAASmE,CAAK,EAAI1C,EAClB,KAAKzB,SAAS4B,KAAK5B,CAAQ,EACpB,IAEJ,EACX,CAEQuB,kBAAgB,CACpB,MAAO,CACHK,KAAOsB,GAAkB,CACrB,KAAKnD,UAAYmD,EAAEU,GACnB,KAAK5D,SAAS4B,KAAKsB,EAAElD,UAAY,CAAA,CAAE,EACnC,KAAKqE,uBAAuBnB,EAAEoB,iBAAiB,EAC/C,KAAK/E,GAAGgF,mBAAmB,KAAKxE,SAAS,EAAEgB,UAAWsB,GAAM,KAAKmC,uBAAuBnC,CAAC,CAAC,CAC9F,EACA9B,MAAQkE,GAA0B,CAC9B,KAAKlE,MAAMqB,KAAK6C,CAAwB,CAC5C,EAER,CAOQJ,uBAAuBK,EAAU,CACrC,GAAI,CAACA,EAAG,CACJ,KAAKpE,YAAYsB,KAAK,CAAA,CAAE,EACxB,MACJ,CAEA,IAAMtB,EAAcqE,KAAKC,MAAMF,CAAC,EAChC,KAAKpE,YAAYsB,KAAKtB,CAAW,CACrC,CAEOuE,WAAS,CACZ,KAAKC,MAAK,EACV,KAAKC,iBAAgB,EAAGhE,UAAU,KAAKQ,iBAAgB,CAAE,CAC7D,CAEQiD,uBAAuBQ,EAA6B,CAIxD,OAHIA,EAAQxE,eACR,KAAKf,OAAOwF,oBAAoBD,EAAQxE,aAAa,EAEjDwE,EAAQE,KAAI,CAChB,KAAKC,GAA6BC,QAC1BJ,EAAQvD,SAASoB,SAAWC,EAAWC,KACvC,KAAK3C,eAAewB,KAAK,KAAKxB,eAAe4C,SAAQ,EAAK,CAAC,EAE3DgC,EAAQvD,SAASmC,IACjB,KAAKtB,oBAAoB0C,EAAQvD,OAAO,EAExCuD,EAAQ3E,QACR,KAAKA,OAAOuB,KAAKoD,EAAQ3E,MAAM,EAEnC,MACJ,KAAK8E,GAA6BE,OAC9B,KAAKhF,OAAOuB,KAAKoD,EAAQ3E,QAAU,CAAA,CAAE,EACjC2E,EAAQ1E,aACR,KAAKA,YAAYsB,KAAKoD,EAAQ1E,WAAW,EAE7C,KACR,CACJ,CAEUwE,OAAK,CACP,KAAK/E,YACL,KAAKR,GAAG+F,uBAAuB,KAAKvF,SAAS,EAC7C,KAAKA,UAAYI,OACjB,KAAKH,SAAS4B,KAAK,CAAA,CAAE,EACrB,KAAKvB,OAAOuB,KAAK,CAAA,CAAE,EACnB,KAAKtB,YAAYsB,KAAK,CAAA,CAAE,EACxB,KAAKxB,eAAewB,KAAK,CAAC,EAC1B,KAAK1B,eAAe0B,KAAKzB,MAAS,GAEtC,KAAKI,MAAMqB,KAAKzB,MAAS,CAC7B,CAKQmB,2BAAyB,CAC7B,GAAI,CAAC,KAAKX,0BACN,MAAM,IAAIgB,MAAM,qCAAqC,EAGzD,OAAO,KAAKvC,KAAKmG,qCAAqC,KAAK5E,yBAAyB,EAAEwB,KAClFK,EAAKgD,GAAmD,CACpD,GAAIA,EAASjD,KACT,OAAOiD,EAASjD,KAEhB,MAAM,IAAIZ,MAAMwB,EAAoBsC,mBAAmB,CAE/D,CAAC,EACDhD,EAAW,IAAMf,EAAW,IAAM,IAAIC,MAAMwB,EAAoBsC,mBAAmB,CAAC,CAAC,CAAC,CAE9F,CAKQV,kBAAgB,CACpB,GAAI,CAAC,KAAKpE,0BACN,MAAM,IAAIgB,MAAM,qCAAqC,EAEzD,OAAO,KAAKvC,KAAKsG,cAAc,KAAK/E,yBAAyB,EAAEwB,KAC3DK,EAAKgD,GAAmD,CACpD,GAAIA,EAASjD,KACT,OAAOiD,EAASjD,KAEhB,MAAM,IAAIZ,MAAMwB,EAAoBwC,uBAAuB,CAEnE,CAAC,EACDlD,EAAW,IAAMf,EAAW,IAAM,IAAIC,MAAMwB,EAAoBwC,uBAAuB,CAAC,CAAC,CAAC,CAElG,CAEAC,SAASC,EAAuBjC,EAAW,CACvC,IAAMkC,EAAgBD,GAAQjC,EAAKiC,EAAO,IAAMjC,EAAKzD,OAC/C4F,EAAc,KAAKpF,4BAA8BmF,EACvD,KAAKnF,0BAA4BmF,EAC7BC,GACA,KAAK7B,cAAa,CAE1B,CAEQA,eAAa,CACjB,KAAKY,MAAK,EACN,KAAKnE,2BACL,KAAKQ,MAAK,CAElB,CAEO6E,iBAAe,CAClB,OAAO,KAAKhG,SAASiG,aAAY,CACrC,CAEOC,eAAa,CAChB,OAAO,KAAK7F,OAAO4F,aAAY,CACnC,CAEOE,cAAY,CACf,OAAO,KAAK5F,MAAM0F,aAAY,CAClC,CAEOG,uBAAqB,CACxB,OAAO,KAAKhG,eAAe6F,aAAY,CAC3C,CAEOI,oBAAkB,CACrB,OAAO,KAAK/F,YAAY2F,aAAY,CACxC,4CArSS9G,EAAe,6BAAfA,EAAemH,QAAfnH,EAAeoH,UAAAC,WADF,MAAM,CAAA,SACnBrH,CAAe,GAAA,4BEvBRsH,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EACJD,EAAA,EAAA;iBAAA,mBADaE,EAAA,EAAAC,EAAA,OAAAC,EAAAC,aAAA,6BAGTL,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EACJD,EAAA,EAAA;iBAAA,mBADaE,EAAA,EAAAC,EAAA,OAAAC,EAAAE,cAAA,6BAOTN,EAAA,EAAA;qBAAA,EAAAO,EAAA,EAAA,MAAA,CAAA,EAAqBP,EAAA,CAAA,EAAsBQ,EAAA,EAC/CR,EAAA,EAAA;iBAAA,mBADyBE,EAAA,CAAA,EAAAO,EAAAL,EAAAM,gBAAA,6BAZ7BV,EAAA,EAAA;aAAA,EACIW,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAiC,EAAAC,GAAA,EAAA,CAAA,EAQrCb,EAAA,EAAA;;aAAA,EAAAO,EAAA,EAAA,KAAA,EACIP,EAAA,CAAA,EACAW,EAAA,EAAAG,GAAA,EAAA,CAAA,EAGJN,EAAA,EACJR,EAAA,EAAA;SAAA,oBAfIE,EAAA,EAAAa,GAAAC,EAAAZ,EAAAa,aAAA,KAAA,KAAAb,EAAAa,YAAAC,SAAAd,EAAAe,kBAAAC,MAAA,EAAA,CAAA,EAUIlB,EAAA,CAAA,EAAAmB,EAAA;kBAAAjB,EAAAkB,cAAA;iBAAA,EACApB,EAAA,EAAAa,EAAAX,EAAAM,iBAAA,EAAA,EAAA,6BAQJV,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;SAAA,gCADuDE,EAAA,EAAAqB,GAAAC,EAAAN,QAAAd,EAAAe,kBAAAM,YAAArB,EAAAsB,MAAAC,MAAA,EAAjCC,EAAA,YAAAJ,EAAAK,MAAA,EAA6G1B,EAAA,UAAAqB,EAAAM,cAAA,GDV3I,IAAaC,IAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAC/BC,KAAO,GACPC,YACAC,aACAjB,YACAK,cACAZ,iBACAgB,MAESS,OAA0B,CAAA,EAEnC7B,eAAiBA,GACjBD,cAAgBA,GAEG+B,KAAOA,KACPjB,kBAAoBA,EAEvCkB,aAAW,CAEP,KAAKF,QAAQG,QAASC,GAAWA,EAAMT,eAAiBS,EAAMrB,OAAOsB,YAAW,CAAG,EACnF,IAAMC,EAAkB,KAAKN,QAAQO,KAAMH,GAAU,CAAC,KAAKI,gBAAgBJ,CAAK,CAAC,EAC7EE,GACAG,aAAa,KAAKX,WAAW,EAC7BW,aAAa,KAAKV,YAAY,EAC9B,KAAKF,KAAO,GAERS,EAAgBI,OAAS,KAAK5B,aAAa4B,OAC3C,KAAKnB,MAAQC,OAKb,KAAKO,aAAeY,WAAW,IAAO,KAAKpB,MAAQ,yBAA2B,GAAG,GAErF,KAAKT,YAAcwB,EACnB,KAAKnB,cAAgBmB,EAAgBI,KACrC,KAAKnC,iBAAmB+B,EAAgBM,SAAWpB,SAEnD,KAAKV,YAAcU,OACf,KAAKK,OACL,KAAKC,YAAca,WAAW,IAAK,CAC/B,KAAKd,KAAO,GACZ,KAAKV,cAAgBK,OACrB,KAAKjB,iBAAmBiB,MAC5B,EAAG,GAAI,GAGnB,CAEAgB,gBAAgBJ,EAAmB,CAC/B,OAAOA,EAAMrB,QAAU,QAAUqB,EAAMrB,QAAU,SACrD,4CAnDSa,EAAsB,2BAAtBA,EAAsBiB,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,OAAA,CAAAd,OAAA,QAAA,EAAAe,SAAA,CAAAC,EAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,YAAA,OAAA,EAAA,MAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICZnCjD,EAAA,EAAA,MAAA,CAAA,EACIP,EAAA,EAAA;KAAA,EAAAO,EAAA,EAAA,MAAA,CAAA,EACIP,EAAA,EAAA;SAAA,EAAAW,EAAA,EAAA+C,GAAA,EAAA,CAAA,EAiBJlD,EAAA,EACAR,EAAA,EAAA;KAAA,EAAAO,EAAA,EAAA,MAAA,CAAA,EACIP,EAAA,EAAA;SAAA,EAAA2D,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,EAAA,EAGJrD,EAAA,EACJR,EAAA,GAAA;CAAA,EAAAQ,EAAA,EACAR,EAAA,GAAA;CAAA,SA1B6B8D,EAAA,OAAAL,EAAAzB,IAAA,EACJ9B,EAAA,CAAA,EAAA4D,EAAA,SAAAL,EAAAxC,WAAA,EAA4B,cAAAwC,EAAA/C,gBAAA,EAAuC,SAAA+C,EAAAxC,aAAA,KAAA,KAAAwC,EAAAxC,YAAAC,SAAAuC,EAAAtC,kBAAAC,KAAA,EACpFlB,EAAA,CAAA,EAAAa,EAAA0C,EAAAnC,cAAA,EAAA,EAAA,EAmBApB,EAAA,CAAA,EAAA6D,EAAAN,EAAAtB,MAAA,kBDXM6B,GAAiBC,EAAO,EAAAC,OAAA,CAAA,wnEAAA,CAAA,CAAA,SAEzBnC,CAAsB,GAAA,EENnC,IAAaoC,IAAM,IAAA,CAAb,MAAOA,CAAM,CACfC,UAAaC,EAAYC,EAAsC,CAC3D,OAAOD,CACX,4CAHSF,EAAM,uCAANA,EAAMI,KAAA,EAAA,CAAA,SAANJ,CAAM,GAAA,sJEFPK,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,gBAAA,EAAA,EACJD,EAAA,EAAA;SAAA,kBADmBE,EAAA,EAAAC,EAAA,OAAAC,EAAAC,aAAAC,KAAA,0BAEfN,EAAA,EAAA;aAAA,EACAA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;SAAA,6BAIIA,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAA,IAAA,EAAA,EACIP,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;aAAA,EAAAQ,EAAA,EACJR,EAAA,EAAA;SAAA,kBAHOE,EAAA,EAAAC,EAAA,aAAA,aAAA,EACUD,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAK,YAAA,6BAMbT,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,OAAA,EAAA,0BACIP,EAAA,CAAA,EACJQ,EAAA,EACJR,EAAA,EAAA;aAAA,EAAAQ,EAAA,EACJR,EAAA,EAAA;SAAA,kBAJiCE,EAAA,CAAA,EAAAC,EAAA,aAAAO,EAAA,EAAA,EAAA,8CAAAC,GAAA,EAAAC,GAAAR,EAAAS,cAAAC,uBAAA,CAAA,CAAA,EACrBZ,EAAA,CAAA,EAAAa,GAAA;sBAAAX,EAAAS,cAAAG,oBAAA,MAAAZ,EAAAS,cAAAI,UAAA;iBAAA,sCAMJjB,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,SAAA,EAAA,EAA+BW,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAhB,EAAAiB,EAAA,EAAAC,EAAAC,GAAA,EAAA,EAAA,OAAAC,EAASpB,EAAAqB,eAAAH,CAAA,CAAiC,CAAA,CAAA,EACrEtB,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;iBAAA,EAAAQ,EAAA,EACJR,EAAA,EAAA;aAAA,oBAFiBE,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAsB,OAAA,6BAOL1B,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,mBADaE,EAAA,EAAAC,EAAA,OAAAC,EAAAuB,QAAA,6BAET3B,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,mBADaE,EAAA,EAAAC,EAAA,OAAAC,EAAAwB,UAAA,sCAJjB5B,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,SAAA,EAAA,EAAQW,EAAA,QAAA,UAAA,CAAAC,EAAAU,CAAA,EAAA,IAAAzB,EAAAiB,EAAA,EAAA,OAAAG,EAASpB,EAAA0B,eAAAC,KAAA,CAAqB,CAAA,CAAA,EAClC/B,EAAA,EAAA;qBAAA,EAAAgC,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAiB,EAAAC,GAAA,EAAA,CAAA,EAKrB1B,EAAA,EACJR,EAAA,EAAA;aAAA,oBANQE,EAAA,CAAA,EAAAiC,EAAA/B,EAAAgC,SAAA,EAAA,CAAA,sCASJpC,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,SAAA,EAAA,EAAQW,EAAA,QAAA,UAAA,CAAAC,EAAAkB,CAAA,EAAA,IAAAjC,EAAAiB,EAAA,EAAA,OAAAG,EAASpB,EAAAkC,UAAA,CAAW,CAAA,CAAA,EACxBtC,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;iBAAA,EAAAQ,EAAA,EACJR,EAAA,EAAA;aAAA,oBAFiBE,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAmC,OAAA,sCAOzBvC,EAAA,EAAA;KAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,KAAA,EAAA,EACIP,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;SAAA,EAAAQ,EAAA,EACAR,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,SAAA,EAAA,EAA2DW,EAAA,QAAA,UAAA,CAAA,IAAAsB,EAAArB,EAAAsB,CAAA,EAAAC,UAAA,OAAAlB,EAASgB,EAAAG,QAAA,CAAe,CAAA,CAAA,EAAEnC,EAAA,EACzFR,EAAA,EAAA;KAAA,EAAAQ,EAAA,EACAR,EAAA,GAAA;KAAA,EAAAO,EAAA,GAAA,MAAA,EAAA,EACIP,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,IAAA,EAAA,EACJD,EAAA,GAAA;KAAA,EAAAQ,EAAA,EACAR,EAAA,GAAA;KAAA,EAAAO,EAAA,GAAA,MAAA,EAAA,EACIP,EAAA,GAAA;SAAA,EAAAO,EAAA,GAAA,SAAA,EAAA,EAA6CW,EAAA,QAAA,UAAA,CAAA,IAAAsB,EAAArB,EAAAsB,CAAA,EAAAC,UAAA,OAAAlB,EAASgB,EAAAI,MAAY,SAAS,CAAC,CAAA,CAAA,EACxE5C,EAAA,GAAA;aAAA,EAAAC,EAAA,GAAA,OAAA,EAAA,EACJD,EAAA,GAAA;SAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;KAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;CAAA,sCAewBA,EAAA,EAAA;yBAAA,EAAAO,EAAA,EAAA,SAAA,EAAA,EAAkCW,EAAA,QAAA,UAAA,CAAA,IAAA2B,EAAA1B,EAAA2B,CAAA,EAAAJ,UAAAtC,EAAAiB,EAAA,CAAA,EAAA,OAAAG,EAASpB,EAAA2C,kBAAAF,CAAA,CAA6B,CAAA,CAAA,EAA2BrC,EAAA,EACvGR,EAAA,EAAA;qBAAA,4BAD8EE,EAAA,EAAAC,EAAA,YAAA0C,EAAAG,CAAA,6BAFlFhD,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;qBAAA,EAAAiD,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,EAGJ3C,EAAA,EACJR,EAAA,EAAA;aAAA,mBALSE,EAAA,EAAAC,EAAA,uBAAAiD,MAAA,EACDlD,EAAA,CAAA,EAAAmD,EAAAjD,EAAAkD,WAAA,6BAc4BtD,EAAA,EAAA;iDAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;6CAAA,0BADSE,EAAA,EAAAC,EAAA,YAAAoD,EAAAP,CAAA,6BAFbhD,EAAA,EAAA;yCAAA,EAAAO,EAAA,EAAA,OAAA,EAAA,EACIP,EAAA,EAAA;6CAAA,EAAAiD,EAAA,EAAAO,GAAA,EAAA,EAAA,KAAA,KAAAL,CAAA,YAGJ3C,EAAA,EACJR,EAAA,EAAA;qCAAA,oCAJQE,EAAA,CAAA,EAAAmD,EAAA3C,EAAA,EAAA,EAAA+C,EAAArD,EAAAsD,sBAAA,EAAAC,YAAAC,MAAyD;CAAI,CAAC,6BAH1E5D,EAAA,EAAA;iCAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;qCAAA,EAAAgC,EAAA,EAAA6B,GAAA,EAAA,CAAA,EAOJrD,EAAA,EACJR,EAAA,EAAA;6BAAA,mCARQE,EAAA,CAAA,EAAAiC,EAAAsB,EAAAK,OAAA1D,EAAA2D,uBAAAC,KAAA,EAAA,EAAA,sCAYIhE,EAAA,EAAA;yCAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;6CAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,mCACJD,EAAA,EAAA;yCAAA,EAAAQ,EAAA,EAEAR,EAAA,EAAA;;yCAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;6CAAA,EAAAO,EAAA,GAAA,SAAA,EAAA,8CAKIW,EAAA,QAAA,UAAA,CAAAC,EAAA8C,CAAA,EAAA,IAAAC,EAAA7C,EAAA,CAAA,EAAAqB,UAAAtC,EAAAiB,EAAA,CAAA,EAAA,OAAAG,EAASpB,EAAA+D,YAAAD,EAAqB,EAAI,CAAC,CAAA,CAAA,EAGnClE,EAAA,GAAA;iDAAA,EAAAC,EAAA,GAAA,UAAA,EAAA,EACJD,EAAA,GAAA;6CAAA,EAAAQ,EAAA,EACAR,EAAA,GAAA;6CAAA,EAAAO,EAAA,GAAA,SAAA,EAAA,8CAKIW,EAAA,QAAA,UAAA,CAAAC,EAAA8C,CAAA,EAAA,IAAAC,EAAA7C,EAAA,CAAA,EAAAqB,UAAAtC,EAAAiB,EAAA,CAAA,EAAA,OAAAG,EAASpB,EAAA+D,YAAAD,EAAqB,EAAK,CAAC,CAAA,CAAA,EAGpClE,EAAA,GAAA;iDAAA,EAAAC,EAAA,GAAA,UAAA,EAAA,EACJD,EAAA,GAAA;6CAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;yCAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;qCAAA,sDAzBcE,EAAA,CAAA,EAAAC,EAAA,YAAAiE,EAAA,EAAA,GAAA1D,EAAA,EAAA,GAAA+C,EAAArD,EAAAsD,sBAAA,EAAAC,WAAA,EAAAX,CAAA,EAMF9C,EAAA,CAAA,EAAAmE,EAAA,oBAAA3D,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,OAAA,EAAwE,YAAA,CAAA7D,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,OAAA,EACP,0BAAA,CAAA7D,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,OAAA,EAGjEpE,EAAA,WAAAO,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,OAAA,EAESrE,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAoE,UAAA,EAITtE,EAAA,CAAA,EAAAmE,EAAA,sBAAA3D,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,UAAA,EAAA,EAAoF,YAAA7D,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,UAAA,EAAA,EACV,0BAAA7D,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,UAAA,EAAA,EAG1EpE,EAAA,WAAAO,EAAA,GAAA,GAAAwD,EAAA9D,EAAAkE,oBAAA,EAAAC,UAAA,EAAA,EAESrE,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAqE,YAAA,6BAzBzBzE,EAAA,EAAA;iCAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;qCAAA,EAAAgC,EAAA,EAAA0C,GAAA,GAAA,EAAA,EA4BJlE,EAAA,EACJR,EAAA,EAAA;6BAAA,mCA7BQE,EAAA,CAAA,EAAAiC,EAAAsB,EAAAK,OAAA1D,EAAA2D,uBAAAC,KAAA,EAAA,EAAA,6BAdZhE,EAAA,EAAA;yBAAA,EAAAO,EAAA,EAAA,KAAA,EACIP,EAAA,EAAA;6BAAA,EAAAgC,EAAA,EAAA2C,GAAA,EAAA,CAAA,EAA0C,EAAAC,GAAA,EAAA,CAAA,EA2C9CpE,EAAA,EACJR,EAAA,EAAA;qBAAA,mCA5CQE,EAAA,CAAA,EAAAiC,EAAA+B,EAAAW,SAAAzE,EAAA0E,WAAAC,KAAA,EAAA,EAAA,EAWA7E,EAAA,EAAAiC,EAAA+B,EAAAW,SAAAzE,EAAA0E,WAAAE,IAAA,EAAA,EAAA,6BAdZhF,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,KAAA,EACIP,EAAA,EAAA;qBAAA,EAAAiD,EAAA,EAAAgC,GAAA,EAAA,EAAA,KAAA,KAAA9B,CAAA,EA+CJ3C,EAAA,EACJR,EAAA,EAAA;aAAA,iCAjDyDE,EAAA,EAAAgF,EAAA,mBAAAhB,EAAAW,SAAAzE,EAAA0E,WAAAC,KAAA,eAAA,aAAA,EAAhD5E,EAAA,oBAAAiD,MAAA,EAAiB,aAAA,CAAAhD,EAAA+E,aAAA,EAClBjF,EAAA,CAAA,EAAAmD,EAAAa,EAAAkB,OAAA,sCAjBZpF,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,MAAA,GAAA,CAAA,EAAuCW,EAAA,SAAA,UAAA,CAAAC,EAAAkE,CAAA,EAAA,IAAAjF,EAAAiB,EAAA,EAAA,OAAAG,EAAUpB,EAAAkF,gBAAA,CAAiB,CAAA,CAAA,EAC9DtF,EAAA,EAAA;aAAA,EAAAgC,EAAA,EAAAuD,GAAA,EAAA,CAAA,EAcAtC,EAAA,EAAAuC,GAAA,EAAA,EAAA,KAAA,KAAAC,EAAA,EAmDJjF,EAAA,EACJR,EAAA,EAAA;KAAA,oBAlEQE,EAAA,CAAA,EAAAiC,EAAA/B,EAAAkD,aAAA,MAAAlD,EAAAkD,YAAAoC,QAAAtF,EAAAuF,cAAA,CAAAvF,EAAAwF,WAAAxF,EAAAyF,SAAA,EAAAzF,EAAAS,eAAA,MAAAT,EAAAS,cAAAI,aAAAb,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAG,wBAAAZ,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAI,aAAA,CAAAb,EAAA0F,eAAA,EAAA,EAAA,EAcA5F,EAAA,EAAAmD,EAAAjD,EAAA2F,QAAA,6BAwDI/F,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,gBAAA,EAAA,EACJD,EAAA,EAAA;aAAA,mBADmBE,EAAA,EAAAC,EAAA,OAAAC,EAAAC,aAAA2F,KAAA,0BAEfhG,EAAA,EAAA;iBAAA,EACAA,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;aAAA,6BANJA,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;aAAA,EAAAgC,EAAA,EAAAiE,GAAA,EAAA,CAAA,EAAyB,EAAAC,GAAA,EAAA,CAAA,EAMzBjG,EAAA,EAAA,KAAA,EAAA,EACJD,EAAA,EAAA;SAAA,EAAAQ,EAAA,EACJR,EAAA,EAAA;KAAA,kBARQE,EAAA,CAAA,EAAAiC,EAAA/B,EAAA+F,iBAAA,EAAA,CAAA,sCAWJnG,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;iBAAA,EAAAO,EAAA,EAAA,SAAA,GAAA,CAAA,EAA4DW,EAAA,QAAA,UAAA,CAAAC,EAAAiF,CAAA,EAAA,IAAAhG,EAAAiB,EAAA,EAAA,OAAAG,EAASpB,EAAAiG,iBAAA,CAAkB,CAAA,CAAA,EAAmD7F,EAAA,EAC1IR,EAAA,EAAA;iBAAA,EAAAO,EAAA,GAAA,SAAA,EAAA,EAAgDW,EAAA,QAAA,UAAA,CAAAC,EAAAiF,CAAA,EAAA,IAAAhG,EAAAiB,EAAA,EAAA,OAAAG,EAASpB,EAAAkC,UAAA,CAAW,CAAA,CAAA,EAAoD9B,EAAA,EAC5HR,EAAA,GAAA;aAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;SAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;KAAA,6BAKIA,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,CAAA,0BACJQ,EAAA,EACJR,EAAA,EAAA;KAAA,kBAFQE,EAAA,CAAA,EAAAoG,EAAA;cAAAlC,EAAA,EAAA,EAAAhE,EAAAmG,KAAA,EAAA;SAAA,6BAIJvG,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;KAAA,kBADmCE,EAAA,EAAAC,EAAA,eAAAC,EAAAoG,oBAAAC,kBAAA,0BAmCvBzG,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;aAAA,0BACIA,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;aAAA,sCAnCJA,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACIP,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAA,WAAA,GAAA,CAAA,0BACImG,GAAA,gBAAA,SAAAC,EAAA,CAAAxF,EAAAyF,CAAA,EAAA,IAAAxG,EAAAiB,EAAA,EAAAwF,OAAAC,GAAA1G,EAAA2G,sBAAAJ,CAAA,IAAAvG,EAAA2G,sBAAAJ,GAAAnF,EAAAmF,CAAA,CAAA,CAAA,EAGAzF,EAAA,gBAAA,UAAA,CAAAC,EAAAyF,CAAA,EAAA,IAAAxG,EAAAiB,EAAA,EAAA,OAAAG,EAAiBpB,EAAA4G,cAAA,CAAe,CAAA,CAAA,EAAC,QAAA,UAAA,CAAA7F,EAAAyF,CAAA,EAAA,IAAAxG,EAAAiB,EAAA,EAAA,OAAAG,EACxBpB,EAAA6G,QAAA,CAAS,CAAA,CAAA,EAAC,QAAA,UAAA,CAAA9F,EAAAyF,CAAA,EAAA,IAAAxG,EAAAiB,EAAA,EAAA,OAAAG,EACVpB,EAAA8G,QAAA,CAAS,CAAA,CAAA,EAAC,UAAA,SAAAP,EAAA,CAAAxF,EAAAyF,CAAA,EAAA,IAAAxG,EAAAiB,EAAA,EAAA,OAAAG,EAQRpB,EAAA+G,UAAAR,CAAA,CAAiB,CAAA,CAAA,EAG/BnG,EAAA,EACDR,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAA,aAAA,EAAA,EAEIW,EAAA,UAAA,UAAA,CAAAC,EAAAyF,CAAA,EAAA,IAAAxG,EAAAiB,EAAA,EAAA,OAAAG,EAAWpB,EAAAgH,OAAA,CAAQ,CAAA,CAAA,EAFvB5G,EAAA,EAYAR,EAAA,EAAA;aAAA,EAAAgC,EAAA,EAAAqF,GAAA,EAAA,CAAA,EAAyB,GAAAC,GAAA,EAAA,CAAA,EAK7B9G,EAAA,EACJR,EAAA,GAAA;KAAA,oBArBYE,EAAA,CAAA,EAAAqH,GAAA,cAAAnD,EAAA,EAAA,EAAA,yCAAA,CAAA,EAdAoD,GAAA,UAAApH,EAAA2G,qBAAA,EAOA5G,EAAA,WAAAC,EAAAwF,WAAA,CAAAxF,EAAAyF,SAAAzF,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAI,aAAAb,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAG,wBAAAZ,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAI,YAAAb,EAAA0F,cAAA,EAaA5F,EAAA,CAAA,EAAAC,EAAA,UAAAC,EAAAqH,WAAAC,eAAA,EAAsC,OAAAtH,EAAAuH,YAAA,EACjB,WAAAvH,EAAAwF,WAAA,CAAAxF,EAAAyF,SAAAzF,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAI,aAAAb,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAG,wBAAAZ,EAAAS,eAAA,KAAA,KAAAT,EAAAS,cAAAI,YAAAb,EAAA0F,cAAA,EAQzB5F,EAAA,CAAA,EAAAiC,EAAA/B,EAAA+F,iBAAA,GAAA,CAAA,GDzGZ,IAAayB,IAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACvBC,eAAiBC,EAAOC,EAAc,EACtCC,aAAeF,EAAOG,EAAQ,EAC9BC,iBAAmBJ,EAAOK,EAAgB,EAC1CC,cAAgBN,EAAOO,EAAiB,EACxCC,YAAcR,EAAOS,EAAe,EAG9C7G,QAAUA,GACV8G,SAAWA,GACXb,aAAeA,GACfhG,SAAWA,GACXY,QAAUA,GACVkG,YAAcA,GACdhI,aAAeA,GACfmB,WAAaA,GACb4C,WAAaA,GACbC,aAAeA,GACfiE,OAASA,GAGTC,qBACAC,mBACAC,kBACAC,0BACAC,sBACAC,yBACAC,wBAEAlD,SAA0B,CAAA,EAC1BmD,OAA0B,CAAA,EAC1B5F,YAAyB,CAAA,EACzBiD,MACA4C,eAAyB,EACzBtI,cACAgF,OAAS,GAETkB,sBAAwB,GACxBnB,UACAT,cAAgB,GAChBW,eAAiB,GAGjBH,aACAyD,mBAAqB,GACrBC,KAAO,EACPC,sBACO7B,WAAaA,GAEXrF,SACAmH,gBAAkB,GAClBpD,iBAAmB,GAClBrE,eAAiB,IAAI0H,GACrBC,aAAe,IAAID,GAGCE,gBACJC,YACIC,gBACHC,aAGRxJ,aAAeA,GACf0D,uBAAyBA,GACzBO,qBAAuBA,GACvBZ,uBAAyBA,EACzBoB,WAAaA,EACb0B,oBAAsBA,EAEzCsD,UAAQ,CACJ,KAAKnB,qBAAuB,KAAKL,YAAYyB,gBAAe,EAAGC,UAAWjE,GAAY,CAC9EA,EAASL,SAAW,KAAKK,UAAUL,SACnC,KAAKuE,eAAe,MAAM,EAC1BC,WAAW,IAAM,KAAKN,iBAAiBO,eAAeC,MAAK,EAAI,EAAE,GAErE,KAAKrE,SAAasE,GAAUtE,CAAQ,EAAEuE,QAAO,EAC7C,KAAKvE,SAASwE,QAASC,GAAW,CAE9B,GAAIA,EAAQpF,UAAU,CAAC,GAAGzB,YAAa,CAEnC,IAAM8G,EAAMD,EAAQpF,QAAQ,CAAC,EAC7BqF,EAAI9G,YAAc8G,EAAI9G,YAAY+G,QAAQ,QAAS;;CAAY,EAC/DD,EAAI9G,YAAc8G,EAAI9G,YAAY+G,QAAQ,MAAO;;CAAM,CAC3D,CACJ,CAAC,CACL,CAAC,EACD,KAAK9B,mBAAqB,KAAKN,YAAYqC,cAAa,EAAGX,UAAWd,GAAU,CAC5E,KAAKA,OAASA,EACd,KAAKpD,eAAiBoD,GAAQ0B,KAAMC,GAAU,CAACC,EAAkBC,YAAaD,EAAkBE,WAAW,EAAEC,SAASJ,EAAMK,KAAK,CAAC,CACtI,CAAC,EACD,KAAKrC,kBAAoB,KAAKP,YAAY6C,aAAY,EAAGnB,UAAWzD,GAAW,KAAKA,MAAQA,CAAM,EAClG,KAAKuC,0BAA4B,KAAKR,YAAY8C,sBAAqB,EAAGpB,UAAWqB,GAAO,CACxF,KAAKlC,eAAiBkC,EACtB,KAAKC,yBAAwB,CACjC,CAAC,EACD,KAAKvC,sBAAwB,KAAKX,cAAcmD,qBAAoB,EAAGvB,UAAWwB,GAAU,KAAK3K,cAAgB2K,CAAK,EACtH,KAAKxC,yBAA2B,KAAKZ,cAAcqD,gBAAe,EAAGzB,UAAWnE,GAAU,CACjFA,IACD,KAAKD,UAAY,GACjB,KAAK0D,sBAAwB,IAEjC,KAAKzD,OAASA,CAClB,CAAC,EACD,KAAKoD,wBAA0B,KAAKX,YAAYoD,mBAAkB,EAAG1B,UAAW1G,GAAe,CAC3F,KAAKA,YAAcA,CACvB,CAAC,EAED,KAAKqI,oCAAmC,EAGxCzB,WAAW,IAAK,CACR,KAAKN,gBACL,KAAKA,gBAAgBO,cAAcC,MAAK,EAExC,KAAKP,aAAaM,cAAcC,MAAK,CAE7C,EAAG,GAAG,CACV,CAEAwB,iBAAe,CACX,KAAKN,yBAAwB,EAC7BpB,WAAW,IAAO,KAAK/E,cAAgB,EAAK,CAChD,CAEAmG,0BAAwB,CAChB,KAAKnC,eAAiB,GACtB,KAAKc,eAAe,QAAQ,CAEpC,CAEA4B,aAAW,CACP,KAAKlD,qBAAqBmD,YAAW,EACrC,KAAKlD,mBAAmBkD,YAAW,EACnC,KAAKjD,kBAAkBiD,YAAW,EAClC,KAAKhD,0BAA0BgD,YAAW,EAC1C,KAAK/C,sBAAsB+C,YAAW,EACtC,KAAK9C,yBAAyB8C,YAAW,EACzC,KAAK7C,wBAAwB6C,YAAW,CAC5C,CAEAH,qCAAmC,CAC/B,KAAKhG,aAAe,CAAC,CAAC,KAAKkC,eAAekE,cAAcC,yBACxD9B,WAAW,IAAM,KAAK+B,mBAAkB,EAAI,CAAC,CACjD,CAKA7E,QAAM,CACF,KAAKkB,YAAY4D,aAAY,EACzB,KAAKnF,wBACL,KAAKnB,UAAY,GACjB,KAAK0C,YAAY6D,YAAY,KAAKpF,qBAAqB,EAAEiD,UAAU,IAAK,CACpE,KAAKpE,UAAY,EACrB,CAAC,EACD,KAAKmB,sBAAwB,IAEjC,KAAKqF,oBAAmB,CAC5B,CAEAC,cAAc7B,EAAoB,CAC9B,GAAIA,EAAQ3F,SAAWC,EAAWC,KAC9B,OAEJ,IAAIuH,EACJ,GAAI9B,EAAQ+B,GACRD,EAAa,KAAKhE,YAAY+D,cAAc7B,CAAO,EACnD,KAAKlB,sBAAwB,WACtBkB,EAAQpF,UAAU,CAAC,GAAGzB,YAC7B2I,EAAa,KAAKhE,YAAY6D,YAAY3B,EAAQpF,QAAQ,CAAC,EAAEzB,WAAW,MACrE,CACH,KAAK2F,sBAAwB,GAC7B,MACJ,CACA,KAAK1D,UAAY,GAEjB0G,EAAWtC,UAAU,IAAK,CACtB,KAAKV,sBAAwB,GAC7B,KAAK1D,UAAY,GACjB,KAAK0C,YAAY4D,aAAY,CACjC,CAAC,CACL,CAOA/H,YAAYqG,EAAsBjG,EAAiB,CAC3CiG,EAAQ3F,SAAWC,EAAWE,MAGlCwF,EAAQjG,QAAU,CAAC,CAACA,EACpB,KAAK+D,YAAYnE,YAAYqG,EAASjG,CAAO,EAAEyF,UAAS,EAC5D,CAMAC,eAAeuC,EAAwB,CACnCtC,WAAW,IAAK,CACyB,KAAKR,gBAAgBS,cAC1CsC,SAAS,CACrBC,IAAK,EACLF,SAAUA,EACb,CACL,CAAC,CACL,CAKA/K,eAAe2D,EAAY,CACvB,KAAK4C,aAAa2E,KAAKvH,CAAO,EAAEwH,OAAOC,KAAMD,GAAkB,CACvDA,IAAW,YACX,KAAKhH,UAAY,GACjB,KAAK0C,YAAYwE,UAAS,EAElC,CAAC,CACL,CAKAzG,kBAAgB,CACZ,KAAKiC,YAAYyE,gBAAe,EAChC,KAAKpH,aAAe,EACxB,CAMArD,WAAS,CACL,KAAKgG,YAAY4D,aAAY,EAC7B,KAAKzC,aAAauD,KAAI,CAC1B,CAMA7F,UAAU8F,EAAoB,CAC1B,GAAIA,EAAMC,MAAQ,QACd,GAAI,CAAC,KAAKtH,WAAa,KAAKC,OACxB,GAAI,CAACoH,EAAME,SACPF,EAAMG,eAAc,EACpB,KAAKhG,OAAM,MACR,CACH,IAAMiG,EAAWJ,EAAMK,OACjB,CAAEC,eAAAA,EAAgBC,aAAAA,CAAY,EAAKH,EACnCI,EAAQJ,EAASI,MACvBJ,EAASI,MAAQA,EAAMC,MAAM,EAAGH,CAAc,EAAIE,EAAMC,MAAMF,CAAY,EAC1EH,EAASE,eAAiBF,EAASG,aAAeD,EAAiB,CACvE,MAEAN,EAAMG,eAAc,CAGhC,CAKAnG,SAAO,CACH,KAAKgF,mBAAkB,CAC3B,CAKA/E,SAAO,CACHgD,WAAW,IAAK,CACZ,KAAK+B,mBAAkB,CAC3B,EAAG,CAAC,CACR,CAKAA,oBAAkB,CACd,IAAM0B,EAAgC,KAAK/D,gBAAgBO,cAC3DwD,EAASC,MAAMC,OAAS,OAExB,IAAMC,EAAaC,SAASC,iBAAiBL,CAAQ,EAAEG,WAAY,EAAE,EADlC,EAG7BG,EAAYH,EADF,EAGhBH,EAASC,MAAMC,OAAS,GAAGK,KAAKC,IAAIR,EAASS,aAAcH,CAAS,CAAC,KAErE,KAAKI,2BAA2BH,KAAKC,IAAIR,EAASS,aAAcH,CAAS,EAAIH,CAAU,CAC3F,CAKA9G,eAAa,CACT,IAAM2G,EAAgC,KAAK/D,gBAAgBO,cACrDmE,EAAUX,EAASF,MAAM7J,MAAM;CAAI,EAAE8B,OACvC4I,GAAW,KAAKjF,MACZiF,GAAW,IACXX,EAAStE,KAAOiF,EAChB,KAAKD,2BAA2BC,CAAO,EACvC,KAAKjF,KAAOiF,EAGxB,CAMAD,2BAA2BC,EAAe,CACtC,IAAMX,EAAgC,KAAK/D,gBAAgBO,cACrDR,EAA2B,KAAKA,YAAYQ,cAC5C2D,EAAaC,SAASQ,OAAOP,iBAAiBL,CAAQ,EAAEG,UAAU,EAClEU,EAAYV,EAAaQ,EAAUR,EACzC5D,WAAW,IAAK,CACZP,EAAYiE,MAAMa,OAAS,cAAcD,CAAS,KACtD,EAAG,EAAE,CACT,CAKApC,qBAAmB,CACf,IAAMuB,EAAgC,KAAK/D,gBAAgBO,cACrDR,EAA2B,KAAKA,YAAYQ,cAClDwD,EAAStE,KAAO,EAChBsE,EAASC,MAAMC,OAAS,GACxBlE,EAAYiE,MAAMa,OAAS,EAC/B,CAEAnJ,iBAAe,CAEX,IAAMoJ,EADkB,KAAKhF,gBAAgBS,cACXuE,UAClC,KAAKtF,mBAAqBsF,EAAY,EAC1C,CAEA3L,kBAAkB4L,EAAkB,CAChC,KAAK5H,sBAAwB4H,EAC7B,KAAKvH,OAAM,CACf,4CAvVSQ,EAAwB,2BAAxBA,EAAwBgH,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,onFC/FrC9O,EAAA,EAAA;CAAA,EAAAO,EAAA,EAAA,MAAA,CAAA,EACIP,EAAA,EAAA;KAAA,EAAAO,EAAA,EAAA,MAAA,CAAA,EACIP,EAAA,EAAA;SAAA,EAAAgC,EAAA,EAAAgN,GAAA,EAAA,CAAA,EAAyB,EAAAC,GAAA,EAAA,CAAA,EAOzB1O,EAAA,EAAA,MAAA,CAAA,EAAuBP,EAAA,CAAA,EAA2CQ,EAAA,EAClER,EAAA,EAAA;SAAA,EAAAgC,EAAA,GAAAkN,GAAA,EAAA,CAAA,EAKJ1O,EAAA,EACAR,EAAA,GAAA;KAAA,EAAAO,EAAA,GAAA,MAAA,CAAA,EACIP,EAAA,GAAA;SAAA,EAAAgC,EAAA,GAAAmN,GAAA,EAAA,CAAA,EAOA5O,EAAA,GAAA,MAAA,EAAA,EACIP,EAAA,GAAA;aAAA,EAAAgC,EAAA,GAAAoN,GAAA,EAAA,CAAA,EAAiC,GAAAC,GAAA,EAAA,CAAA,EAMH,GAAAC,GAAA,EAAA,CAAA,EAelC9O,EAAA,EACJR,EAAA,GAAA;KAAA,EAAAQ,EAAA,EACJR,EAAA,GAAA;CAAA,EAAAQ,EAAA,EACAR,EAAA,GAAA;CAAA,EAAAgC,EAAA,GAAAuN,GAAA,GAAA,EAAA,cAAA,KAAA,EAAAC,EAAA,EAgBAxP,EAAA,GAAA;CAAA,EACAA,EAAA,GAAA;CAAA,EAAAO,EAAA,GAAA,MAAA,GAAA,CAAA,EACIP,EAAA,GAAA;KAAA,EAAAgC,EAAA,GAAAyN,GAAA,EAAA,CAAA,EAAwB,GAAAC,GAAA,EAAA,CAAA,EAgFxBzP,EAAA,GAAA,sBAAA,EAAA,EACAD,EAAA,GAAA;KAAA,EAAAgC,EAAA,GAAA2N,GAAA,GAAA,CAAA,EASApP,EAAA,GAAA,MAAA,GAAA,CAAA,EAA4DW,EAAA,QAAA,UAAA,CAAA2F,OAAA1F,EAAAyO,CAAA,EAAApO,EAASuN,EAAA9E,eAAe,QAAQ,CAAC,CAAA,CAAA,EACzFjK,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,UAAA,EAAA,EACJD,EAAA,GAAA;KAAA,EAAAQ,EAAA,EACAR,EAAA,GAAA;KAAA,EAAAgC,EAAA,GAAA6N,GAAA,EAAA,CAAA,EAAa,GAAAC,GAAA,EAAA,CAAA,EAKE,GAAAC,GAAA,GAAA,CAAA,EA0CnBvP,EAAA,EACAR,EAAA,GAAA;CAAA,QA9MQE,EAAA,CAAA,EAAAiC,EAAA4M,EAAA5I,iBAAA,EAAA,CAAA,EAOuBjG,EAAA,CAAA,EAAA8P,EAAAjB,EAAA5I,iBAAA,UAAA,MAAA,EACvBjG,EAAA,CAAA,EAAAiC,EAAA4M,EAAA5I,iBAAA,GAAA,EAAA,EAOAjG,EAAA,CAAA,EAAAiC,EAAA4M,EAAAlO,cAAAI,UAAA,EAAA,GAAA,EAAA,EAQIf,EAAA,CAAA,EAAAiC,EAAA4M,EAAAhJ,SAAAL,QAAA,EAAA,GAAA,EAAA,EAMAxF,EAAA,EAAAiC,EAAA4M,EAAA3M,WAAAgB,OAAA,GAAA,EAAA,EAUAlD,EAAA,EAAAiC,EAAA4M,EAAAxF,gBAAA,GAAA,EAAA,EAyBWrJ,EAAA,CAAA,EAAAmE,EAAA,eAAA,CAAA0K,EAAApJ,YAAA,EACnBzF,EAAA,CAAA,EAAAiC,EAAA4M,EAAAhJ,UAAA,MAAAgJ,EAAAhJ,SAAAL,OAAA,GAAA,EAAA,EAqEAxF,EAAA,EAAAiC,EAAA4M,EAAAhJ,UAAA,MAAAgJ,EAAAhJ,SAAAL,OAAA,GAAA,EAAA,EAWqBxF,EAAA,EAAAC,EAAA,SAAA4O,EAAA7F,MAAA,EACrBhJ,EAAA,CAAA,EAAAiC,EAAA4M,EAAApJ,aAAA,GAAA,EAAA,EAS8BzF,EAAA,EAAAC,EAAA,SAAA4O,EAAA3F,kBAAA,EACjBlJ,EAAA,CAAA,EAAAC,EAAA,OAAA4O,EAAAtG,WAAA,EAEbvI,EAAA,CAAA,EAAAiC,EAAA4M,EAAAxI,MAAA,GAAA,EAAA,EAKArG,EAAA,EAAAiC,EAAA4M,EAAAlJ,OAAA,GAAA,EAAA,EAGA3F,EAAA,EAAAiC,EAAA4M,EAAApJ,aAAA,GAAA,EAAA,kBDtFIsK,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAAWC,GAAAC,GAAAC,GACXC,GACAC,GACAC,GACAC,EAAmB,EAAAC,OAAA,CAAA,k7NAAA,EAAAC,KAAA,CAAAC,UA7DX,CACRC,GAAQ,mBAAoB,CACxBC,EAAW,SAAU,CACjBvD,EAAM,CACFC,OAAQ,IACRuD,UAAW,WACd,EACDC,EAAM,CACFC,EACI,mBACA1D,EAAM,CACFC,OAAQ,IACX,CAAC,EAENyD,EACI,wCACA1D,EAAM,CACFwD,UAAW,WACd,CAAC,CACL,CACJ,CAAC,CACL,CAAC,CACL,EACDF,GAAQ,sBAAuB,CAC3BC,EAAW,SAAU,CACjBvD,EAAM,CAAEC,OAAQ,EAAG0D,QAAS,CAAC,CAAE,EAC/BF,EAAM,CACFC,EACI,wBACA1D,EAAM,CACFC,OAAQ,IACR0D,QAAS,EACZ,CAAC,CACL,CACJ,CAAC,CACL,EACDJ,EAAW,SAAU,CACjBvD,EAAM,CAAEC,OAAQ,IAAK0D,QAAS,CAAC,CAAE,EACjCF,EAAM,CACFC,EACI,mBACA1D,EAAM,CACFC,OAAQ,EACR0D,QAAS,EACZ,CAAC,CACL,CACJ,CAAC,CACL,CAAC,CACL,CAAC,CACL,CAAA,CAAA,SAeQ3J,CAAwB,GAAA",
  "names": ["IrisSender", "IrisAssistantMessage", "id", "content", "sentAt", "sender", "helpful", "IrisUserMessage", "messageDifferentiator", "IrisErrorMessageKey", "IrisErrors", "key", "SESSION_LOAD_FAILED", "fatal", "SEND_MESSAGE_FAILED", "HISTORY_LOAD_FAILED", "INVALID_SESSION_STATE", "SESSION_CREATION_FAILED", "RATE_MESSAGE_FAILED", "IRIS_DISABLED", "IRIS_SERVER_RESPONSE_TIMEOUT", "EMPTY_MESSAGE", "INTERNAL_PYRIS_ERROR", "INVALID_TEMPLATE", "NO_MODEL_AVAILABLE", "NO_RESPONSE", "PARSE_RESPONSE", "FORBIDDEN", "TECHNICAL_ERROR_RESPONSE", "IRIS_NOT_AVAILABLE", "RATE_LIMIT_EXCEEDED", "errorMessages", "Object", "freeze", "reduce", "map", "obj", "IrisChatHttpService", "httpClient", "inject", "HttpClient", "apiPrefix", "randomInt", "Math", "floor", "random", "maxIntJava", "getMessages", "sessionId", "get", "observe", "pipe", "map", "response", "messages", "body", "modifiedMessages", "message", "Object", "assign", "sentAt", "convertDateFromServer", "sort", "a", "b", "isBefore", "createMessage", "messageDifferentiator", "post", "convertDateFromClient", "resendMessage", "id", "tap", "rateMessage", "messageId", "helpful", "put", "getCurrentSessionOrCreateIfNotExists", "identifier", "createSession", "factory", "\u0275fac", "providedIn", "IrisWebsocketService", "websocketService", "inject", "WebsocketService", "subscribedChannels", "Map", "ngOnDestroy", "forEach", "subscription", "sessionId", "wsSubscription", "unsubscribe", "getChannelFromSessionId", "subscribeToSession", "Error", "computeIfAbsent", "channel", "subject", "Subject", "subscribe", "receive", "response", "next", "asObservable", "unsubscribeFromSession", "subscribedChannel", "get", "delete", "factory", "\u0275fac", "providedIn", "IrisChatWebsocketPayloadType", "IrisRateLimitInformation", "currentMessageCount", "rateLimit", "rateLimitTimeframeHours", "constructor", "IrisStatusService", "websocketService", "inject", "WebsocketService", "httpClient", "HttpClient", "intervalId", "websocketStatusSubscription", "disconnected", "active", "activeSubject", "BehaviorSubject", "currentRatelimitInfoSubject", "IrisRateLimitInformation", "constructor", "checkHeartbeat", "setInterval", "connectionState", "subscribe", "status", "connected", "intendedDisconnect", "wasEverConnectedBefore", "getActiveStatus", "asObservable", "currentRatelimitInfo", "handleRateLimitInfo", "rateLimitInfo", "next", "firstValueFrom", "getIrisStatus", "then", "response", "body", "Boolean", "ngOnDestroy", "undefined", "clearInterval", "unsubscribe", "get", "observe", "factory", "\u0275fac", "providedIn", "IrisMessageContentType", "IrisMessageContent", "type", "id", "messageId", "constructor", "IrisTextMessageContent", "textContent", "TEXT", "ChatServiceMode", "IrisChatService", "http", "inject", "IrisChatHttpService", "ws", "IrisWebsocketService", "status", "IrisStatusService", "userService", "UserService", "accountService", "AccountService", "sessionId", "messages", "BehaviorSubject", "newIrisMessage", "undefined", "numNewMessages", "stages", "suggestions", "error", "rateLimitInfo", "rateLimitSubscription", "acceptSubscription", "sessionCreationIdentifier", "hasJustAcceptedExternalLLMUsage", "constructor", "currentRatelimitInfo", "subscribe", "info", "ngOnDestroy", "unsubscribe", "start", "userIdentity", "externalLLMUsageAccepted", "getCurrentSessionOrCreate", "handleNewSession", "sendMessage", "message", "throwError", "Error", "next", "trim", "newMessage", "IrisUserMessage", "content", "IrisTextMessageContent", "createMessage", "pipe", "tap", "m", "replaceOrAddMessage", "body", "map", "catchError", "handleSendHttpError", "of", "replaceMessage", "sender", "IrisSender", "LLM", "getValue", "resendMessage", "r", "IrisErrorMessageKey", "IRIS_DISABLED", "Map", "set", "rateLimitTimeframeHours", "RATE_LIMIT_EXCEEDED", "SEND_MESSAGE_FAILED", "rateMessage", "helpful", "id", "RATE_MESSAGE_FAILED", "messagesRead", "setUserAccepted", "acceptExternalLLMUsage", "setUserAcceptedExternalLLMUsage", "closeAndStart", "index", "findIndex", "parseLatestSuggestions", "latestSuggestions", "subscribeToSession", "handleWebsocketMessage", "e", "s", "JSON", "parse", "clearChat", "close", "createNewSession", "payload", "handleRateLimitInfo", "type", "IrisChatWebsocketPayloadType", "MESSAGE", "STATUS", "unsubscribeFromSession", "getCurrentSessionOrCreateIfNotExists", "response", "SESSION_LOAD_FAILED", "createSession", "SESSION_CREATION_FAILED", "switchTo", "mode", "newIdentifier", "isDifferent", "currentMessages", "asObservable", "currentStages", "currentError", "currentNumNewMessages", "currentSuggestions", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faCircleXmark", "faArrowsRotate", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate", "displayedSubText", "\u0275\u0275template", "ChatStatusBarComponent_Conditional_4_Case_1_Template", "ChatStatusBarComponent_Conditional_4_Case_2_Template", "ChatStatusBarComponent_Conditional_4_Conditional_6_Template", "\u0275\u0275conditional", "tmp_1_0", "activeStage", "state", "IrisStageStateDTO", "ERROR", "\u0275\u0275textInterpolate1", "displayedText", "\u0275\u0275styleMap", "stage_r2", "IN_PROGRESS", "style", "undefined", "\u0275\u0275styleProp", "weight", "lowerCaseState", "ChatStatusBarComponent", "open", "openTimeout", "styleTimeout", "stages", "JSON", "ngOnChanges", "forEach", "stage", "toLowerCase", "firstUnfinished", "find", "isStageFinished", "clearTimeout", "name", "setTimeout", "message", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ChatStatusBarComponent_Conditional_4_Template", "\u0275\u0275repeaterCreate", "ChatStatusBarComponent_For_9_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275classProp", "\u0275\u0275repeater", "FaIconComponent", "NgClass", "styles", "AsPipe", "transform", "value", "_type", "pure", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "IrisLogoSize", "FLUID", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "faCircleInfo", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c4", "rateLimitInfo", "rateLimitTimeframeHours", "\u0275\u0275textInterpolate2", "currentMessageCount", "rateLimit", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "clearConfirmModal_r4", "\u0275\u0275reference", "\u0275\u0275resetView", "onClearSession", "faTrash", "faExpand", "faCompress", "_r5", "fullSizeToggle", "next", "\u0275\u0275template", "IrisBaseChatbotComponent_Conditional_18_Conditional_3_Template", "IrisBaseChatbotComponent_Conditional_18_Conditional_4_Template", "\u0275\u0275conditional", "fullSize", "_r6", "closeChat", "faXmark", "modal_r8", "_r7", "$implicit", "dismiss", "close", "suggestion_r11", "_r10", "onSuggestionClick", "\u0275\u0275sanitizeHtml", "\u0275\u0275repeaterCreate", "IrisBaseChatbotComponent_Conditional_30_Conditional_4_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "undefined", "\u0275\u0275repeater", "suggestions", "line_r12", "IrisBaseChatbotComponent_Conditional_30_For_6_For_4_Conditional_3_Conditional_3_For_4_Template", "content_r13", "IrisTextMessageContent", "textContent", "split", "IrisBaseChatbotComponent_Conditional_30_For_6_For_4_Conditional_3_Conditional_3_Template", "type", "IrisMessageContentType", "TEXT", "_r14", "message_r15", "rateMessage", "\u0275\u0275pipeBind1", "\u0275\u0275classProp", "IrisAssistantMessage", "helpful", "faThumbsUp", "faThumbsDown", "IrisBaseChatbotComponent_Conditional_30_For_6_For_4_Conditional_4_Conditional_3_Template", "IrisBaseChatbotComponent_Conditional_30_For_6_For_4_Conditional_3_Template", "IrisBaseChatbotComponent_Conditional_30_For_6_For_4_Conditional_4_Template", "sender", "IrisSender", "USER", "LLM", "IrisBaseChatbotComponent_Conditional_30_For_6_For_4_Template", "\u0275\u0275styleProp", "shouldAnimate", "content", "_r9", "checkChatScroll", "IrisBaseChatbotComponent_Conditional_30_Conditional_4_Template", "IrisBaseChatbotComponent_Conditional_30_For_6_Template", "_forTrack0", "length", "userAccepted", "isLoading", "active", "hasActiveStage", "messages", "SMALL", "IrisBaseChatbotComponent_Conditional_31_Conditional_3_Template", "IrisBaseChatbotComponent_Conditional_31_Conditional_4_Template", "isChatGptWrapper", "_r16", "acceptPermission", "\u0275\u0275textInterpolate1", "error", "IrisErrorMessageKey", "IRIS_NOT_AVAILABLE", "\u0275\u0275twoWayListener", "$event", "_r17", "i0", "\u0275\u0275twoWayBindingSet", "newMessageTextContent", "onModelChange", "onInput", "onPaste", "handleKey", "onSend", "IrisBaseChatbotComponent_Conditional_43_Conditional_9_Template", "IrisBaseChatbotComponent_Conditional_43_Conditional_10_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275twoWayProperty", "ButtonType", "SUCCESS_OUTLINE", "faPaperPlane", "IrisBaseChatbotComponent", "accountService", "inject", "AccountService", "modalService", "NgbModal", "translateService", "TranslateService", "statusService", "IrisStatusService", "chatService", "IrisChatService", "faCircle", "faArrowDown", "faRedo", "messagesSubscription", "stagesSubscription", "errorSubscription", "numNewMessageSubscription", "rateLimitSubscription", "activeStatusSubscription", "suggestionsSubscription", "stages", "numNewMessages", "isScrolledToBottom", "rows", "resendAnimationActive", "showCloseButton", "EventEmitter", "closeClicked", "messagesElement", "scrollArrow", "messageTextarea", "acceptButton", "ngOnInit", "currentMessages", "subscribe", "scrollToBottom", "setTimeout", "nativeElement", "focus", "cloneDeep", "reverse", "forEach", "message", "cnt", "replace", "currentStages", "some", "stage", "IrisStageStateDTO", "IN_PROGRESS", "NOT_STARTED", "includes", "state", "currentError", "currentNumNewMessages", "num", "checkUnreadMessageScroll", "currentRatelimitInfo", "info", "getActiveStatus", "currentSuggestions", "checkIfUserAcceptedExternalLLMUsage", "ngAfterViewInit", "ngOnDestroy", "unsubscribe", "userIdentity", "externalLLMUsageAccepted", "adjustTextareaRows", "messagesRead", "sendMessage", "resetChatBodyHeight", "resendMessage", "observable", "id", "behavior", "scrollTo", "top", "open", "result", "then", "clearChat", "setUserAccepted", "emit", "event", "key", "shiftKey", "preventDefault", "textArea", "target", "selectionStart", "selectionEnd", "value", "slice", "textarea", "style", "height", "lineHeight", "parseInt", "getComputedStyle", "maxHeight", "Math", "min", "scrollHeight", "adjustScrollButtonPosition", "newRows", "window", "rowHeight", "bottom", "scrollTop", "suggestion", "selectors", "viewQuery", "rf", "ctx", "IrisBaseChatbotComponent_Conditional_5_Template", "IrisBaseChatbotComponent_Conditional_6_Template", "IrisBaseChatbotComponent_Conditional_10_Template", "IrisBaseChatbotComponent_Conditional_14_Template", "IrisBaseChatbotComponent_Conditional_17_Template", "IrisBaseChatbotComponent_Conditional_18_Template", "IrisBaseChatbotComponent_Conditional_19_Template", "IrisBaseChatbotComponent_ng_template_23_Template", "\u0275\u0275templateRefExtractor", "IrisBaseChatbotComponent_Conditional_30_Template", "IrisBaseChatbotComponent_Conditional_31_Template", "IrisBaseChatbotComponent_Conditional_34_Template", "_r1", "IrisBaseChatbotComponent_Conditional_41_Template", "IrisBaseChatbotComponent_Conditional_42_Template", "IrisBaseChatbotComponent_Conditional_43_Template", "\u0275\u0275textInterpolate", "IrisLogoComponent", "RouterLink", "FaIconComponent", "NgbTooltip", "TranslateDirective", "ChatStatusBarComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ButtonComponent", "ArtemisTranslatePipe", "AsPipe", "HtmlForMarkdownPipe", "styles", "data", "animation", "trigger", "transition", "transform", "group", "animate", "opacity"]
}
