{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/quiz/short-answer-submitted-text.model.ts", "src/main/webapp/app/exercises/quiz/shared/questions/short-answer-question/short-answer-question.component.ts", "src/main/webapp/app/exercises/quiz/shared/questions/short-answer-question/short-answer-question.component.html"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { ShortAnswerSubmittedAnswer } from 'app/entities/quiz/short-answer-submitted-answer.model';\r\nimport { ShortAnswerSpot } from 'app/entities/quiz/short-answer-spot.model';\r\n\r\nexport class ShortAnswerSubmittedText implements BaseEntity {\r\n    public id?: number;\r\n    public text?: string;\r\n    public isCorrect?: boolean;\r\n    public spot?: ShortAnswerSpot;\r\n    public submittedAnswer?: ShortAnswerSubmittedAnswer;\r\n}\r\n", "import { Component, EventEmitter, Input, Output, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { ShortAnswerQuestionUtil } from 'app/exercises/quiz/shared/short-answer-question-util.service';\r\nimport { ShortAnswerSolution } from 'app/entities/quiz/short-answer-solution.model';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { ShortAnswerSubmittedText } from 'app/entities/quiz/short-answer-submitted-text.model';\r\nimport { QuizQuestion, RenderedQuizQuestionMarkDownElement } from 'app/entities/quiz/quiz-question.model';\r\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { MAX_QUIZ_SHORT_ANSWER_TEXT_LENGTH } from 'app/shared/constants/input.constants';\r\nimport { NgClass } from '@angular/common';\r\nimport { NgbPopover, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { QuizScoringInfoStudentModalComponent } from '../quiz-scoring-infostudent-modal/quiz-scoring-info-student-modal.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-short-answer-question',\r\n    templateUrl: './short-answer-question.component.html',\r\n    providers: [ShortAnswerQuestionUtil],\r\n    styleUrls: ['./short-answer-question.component.scss', '../../../participate/quiz-participation.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [NgClass, NgbTooltip, TranslateDirective, NgbPopover, FaIconComponent, QuizScoringInfoStudentModalComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ShortAnswerQuestionComponent {\r\n    private artemisMarkdown = inject(ArtemisMarkdownService);\r\n    shortAnswerQuestionUtil = inject(ShortAnswerQuestionUtil);\r\n\r\n    shortAnswerQuestion: ShortAnswerQuestion;\r\n    _forceSampleSolution: boolean;\r\n\r\n    @Input()\r\n    set question(question: QuizQuestion) {\r\n        this.shortAnswerQuestion = question as ShortAnswerQuestion;\r\n        this.watchCollection();\r\n    }\r\n\r\n    // TODO: Map vs. Array --> consistency\r\n    @Input()\r\n    submittedTexts: ShortAnswerSubmittedText[];\r\n    @Input()\r\n    clickDisabled: boolean;\r\n    @Input()\r\n    showResult: boolean;\r\n    @Input()\r\n    questionIndex: number;\r\n    @Input()\r\n    score: number;\r\n    @Input()\r\n    set forceSampleSolution(forceSampleSolution) {\r\n        this._forceSampleSolution = forceSampleSolution;\r\n        if (this.forceSampleSolution) {\r\n            this.showSampleSolution();\r\n        }\r\n    }\r\n\r\n    get forceSampleSolution() {\r\n        return this._forceSampleSolution;\r\n    }\r\n    @Input()\r\n    fnOnSubmittedTextUpdate: any;\r\n\r\n    @Output()\r\n    submittedTextsChange = new EventEmitter<ShortAnswerSubmittedText[]>();\r\n\r\n    readonly MAX_CHARACTER_COUNT = MAX_QUIZ_SHORT_ANSWER_TEXT_LENGTH;\r\n\r\n    showingSampleSolution = false;\r\n    renderedQuestion: RenderedQuizQuestionMarkDownElement;\r\n    sampleSolutions: ShortAnswerSolution[] = [];\r\n    textParts: string[][];\r\n\r\n    // Icons\r\n    faExclamationCircle = faExclamationCircle;\r\n    farQuestionCircle = faQuestionCircle;\r\n\r\n    /**\r\n     * Update html for text, hint and explanation for the question and every answer option\r\n     */\r\n    watchCollection() {\r\n        this.renderedQuestion = new RenderedQuizQuestionMarkDownElement();\r\n\r\n        const textParts = this.shortAnswerQuestionUtil.divideQuestionTextIntoTextParts(this.shortAnswerQuestion.text!);\r\n        this.textParts = this.shortAnswerQuestionUtil.transformTextPartsIntoHTML(textParts);\r\n\r\n        this.renderedQuestion.text = this.artemisMarkdown.safeHtmlForMarkdown(this.shortAnswerQuestion.text);\r\n        this.renderedQuestion.hint = this.artemisMarkdown.safeHtmlForMarkdown(this.shortAnswerQuestion.hint);\r\n        this.renderedQuestion.explanation = this.artemisMarkdown.safeHtmlForMarkdown(this.shortAnswerQuestion.explanation);\r\n    }\r\n\r\n    /**\r\n     * When students type in their answers and the focus gets away from the input spot, the answers are\r\n     * set as submitted texts\r\n     */\r\n    setSubmittedText() {\r\n        this.submittedTexts = [];\r\n        let i = 0;\r\n        for (const textpart of this.textParts) {\r\n            let j = 0;\r\n            for (const element of textpart) {\r\n                if (this.shortAnswerQuestionUtil.isInputField(element!)) {\r\n                    const submittedText = new ShortAnswerSubmittedText();\r\n                    submittedText.text = (<HTMLInputElement>document.getElementById('solution-' + i + '-' + j + '-' + this.shortAnswerQuestion.id)).value;\r\n                    submittedText.spot = this.shortAnswerQuestionUtil.getSpot(this.shortAnswerQuestionUtil.getSpotNr(element!), this.shortAnswerQuestion);\r\n                    this.submittedTexts.push(submittedText);\r\n                }\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n        this.submittedTextsChange.emit(this.submittedTexts);\r\n        /** Only execute the onMappingUpdate function if we received such input **/\r\n        if (this.fnOnSubmittedTextUpdate) {\r\n            this.fnOnSubmittedTextUpdate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Display a sample solution instead of the student's answer\r\n     */\r\n    showSampleSolution() {\r\n        // TODO: the question is not yet available\r\n        this.sampleSolutions = this.shortAnswerQuestionUtil.getSampleSolutions(this.shortAnswerQuestion);\r\n        this.showingSampleSolution = true;\r\n    }\r\n\r\n    /**\r\n     * Display the student's answer again\r\n     */\r\n    hideSampleSolution() {\r\n        this.showingSampleSolution = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the submitted text for a short answer for the given spot tag\r\n     * @param spotTag Spot tag for which to get the submitted text\r\n     */\r\n    getSubmittedTextForSpot(spotTag: string): ShortAnswerSubmittedText {\r\n        return this.submittedTexts.filter((submittedText) => submittedText.spot!.spotNr === this.shortAnswerQuestionUtil.getSpotNr(spotTag))[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the submitted text as string for a short answer for the given spot tag\r\n     * @param spotTag Spot tag for which to get the submitted text\r\n     */\r\n    getSubmittedTextForSpotAsString(spotTag: string): string {\r\n        const submittedText = this.getSubmittedTextForSpot(spotTag);\r\n        return submittedText?.text ?? '';\r\n    }\r\n\r\n    /**\r\n     * Returns the size for a submitted text for a short answer for the given spot tag\r\n     * @param spotTag Spot tag for which to get the submitted text\r\n     */\r\n    getSubmittedTextSizeForSpot(spotTag: string): number {\r\n        const submittedText = this.getSubmittedTextForSpotAsString(spotTag);\r\n        return submittedText !== '' ? submittedText.length + 2 : 5;\r\n    }\r\n\r\n    /**\r\n     * Returns the sample solution for a short answer for the given spot tag\r\n     * @param spotTag Spot tag for which to get the sample solution\r\n     */\r\n    getSampleSolutionForSpot(spotTag: string): ShortAnswerSolution {\r\n        const index = this.shortAnswerQuestion.spots!.findIndex((spot) => spot.spotNr === this.shortAnswerQuestionUtil.getSpotNr(spotTag));\r\n        return this.sampleSolutions[index];\r\n    }\r\n\r\n    /**\r\n     * Returns the sample solution as text for a short answer for the given spot tag\r\n     * @param spotTag Spot tag for which to get the sample solution\r\n     */\r\n    getSampleSolutionForSpotAsString(spotTag: string): string {\r\n        const sampleSolution = this.getSampleSolutionForSpot(spotTag);\r\n        return sampleSolution?.text ?? '';\r\n    }\r\n\r\n    /**\r\n     * Returns the size for a sample solution for a short answer for the given spot tag\r\n     * @param spotTag Spot tag for which to get the submitted text\r\n     */\r\n    getSampleSolutionSizeForSpot(spotTag: string): number {\r\n        const sampleSolution = this.getSampleSolutionForSpotAsString(spotTag);\r\n        return sampleSolution !== '' ? sampleSolution.length + 2 : 5;\r\n    }\r\n\r\n    /**\r\n     * Returns the text that should be shown for the given spot tag\r\n     * @param spotTag Spot tag for which to get the text\r\n     */\r\n    getTextForSpotAsString(spotTag: string): string {\r\n        if (this.showingSampleSolution) {\r\n            return this.getSampleSolutionForSpotAsString(spotTag);\r\n        }\r\n        return this.getSubmittedTextForSpotAsString(spotTag);\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the input for the given spot tag\r\n     * @param spotTag Spot tag for which to get the size\r\n     */\r\n    getSizeForSpot(spotTag: string): number {\r\n        if (this.showingSampleSolution) {\r\n            return this.getSampleSolutionSizeForSpot(spotTag);\r\n        }\r\n        return this.getSubmittedTextSizeForSpot(spotTag);\r\n    }\r\n\r\n    /**\r\n     * Returns the class for the input field of the given spot tag\r\n     * @param spotTag Spot tag for which to return the input field's class\r\n     */\r\n    classifyInputField(spotTag: string): string {\r\n        if (this.shortAnswerQuestion.invalid) {\r\n            return 'invalid';\r\n        }\r\n        const spot = this.shortAnswerQuestionUtil.getSpot(this.shortAnswerQuestionUtil.getSpotNr(spotTag), this.shortAnswerQuestion);\r\n        if (spot.invalid) {\r\n            return 'invalid';\r\n        }\r\n        if (this.showingSampleSolution) {\r\n            return 'completely-correct';\r\n        }\r\n        const submittedTextForSpot = this.getSubmittedTextForSpot(spotTag);\r\n        if (submittedTextForSpot?.isCorrect !== true) {\r\n            return 'wrong';\r\n        }\r\n        if (this.isSubmittedTextCompletelyCorrect(spotTag)) {\r\n            return 'completely-correct';\r\n        }\r\n        return 'correct';\r\n    }\r\n\r\n    /**\r\n     * Returns whether the submitted text for the answer regarding the given spot tag is completely correct\r\n     * @param spotTag Spot tag for which to evaluate\r\n     */\r\n    isSubmittedTextCompletelyCorrect(spotTag: string): boolean {\r\n        let isTextCorrect = false;\r\n        const solutionsForSpot = this.shortAnswerQuestionUtil.getAllSolutionsForSpot(\r\n            this.shortAnswerQuestion.correctMappings,\r\n            this.shortAnswerQuestionUtil.getSpot(this.shortAnswerQuestionUtil.getSpotNr(spotTag), this.shortAnswerQuestion),\r\n        );\r\n        const solutions = solutionsForSpot?.filter((solution) => solution.text?.trim() === this.getSubmittedTextForSpot(spotTag)?.text?.trim());\r\n        if (solutions && solutions.length > 0) {\r\n            isTextCorrect = true;\r\n        }\r\n        return isTextCorrect;\r\n    }\r\n}\r\n", "<div\r\n    class=\"sa-question\"\r\n    [ngClass]=\"{\r\n        disabled: clickDisabled && !showResult,\r\n        result: showResult && !forceSampleSolution,\r\n        incorrect: (score || 0) < shortAnswerQuestion.points! && !forceSampleSolution,\r\n    }\"\r\n>\r\n    <h4 class=\"question-title-display\">\r\n        <span>{{ questionIndex }})</span> {{ shortAnswerQuestion.title }}\r\n    </h4>\r\n    @if (!showResult) {\r\n        <div>\r\n            @for (textPart of textParts; track textPart; let i = $index) {\r\n                <div class=\"short-answer-question-display\">\r\n                    @for (element of textPart; track element; let j = $index) {\r\n                        <div class=\"short-answer-question-display__element\">\r\n                            @if (!shortAnswerQuestionUtil.isInputField(element)) {\r\n                                <div [innerHTML]=\"element\"></div>\r\n                            }\r\n                            @if (shortAnswerQuestionUtil.isInputField(element)) {\r\n                                <div class=\"short-answer-question-container\" id=\"sa-question-container-A\">\r\n                                    <input\r\n                                        class=\"short-answer-question-container__input\"\r\n                                        type=\"text\"\r\n                                        [maxLength]=\"MAX_CHARACTER_COUNT\"\r\n                                        [disabled]=\"clickDisabled\"\r\n                                        value=\"{{ getSubmittedTextForSpotAsString(element) }}\"\r\n                                        id=\"solution-{{ i }}-{{ j }}-{{ shortAnswerQuestion.id }}\"\r\n                                        (change)=\"setSubmittedText()\"\r\n                                    />\r\n                                </div>\r\n                            }\r\n                            &nbsp;\r\n                        </div>\r\n                    }\r\n                    <br />\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (showResult) {\r\n        <div>\r\n            @for (textPart of textParts; track textPart) {\r\n                <div class=\"short-answer-question-display\">\r\n                    @for (element of textPart; track element) {\r\n                        <div class=\"short-answer-question-display__element\">\r\n                            @if (!shortAnswerQuestionUtil.isInputField(element)) {\r\n                                <div [innerHTML]=\"element\"></div>\r\n                            }\r\n                            @if (shortAnswerQuestionUtil.isInputField(element)) {\r\n                                <div\r\n                                    class=\"short-answer-question-container\"\r\n                                    [ngbTooltip]=\"classifyInputField(element) === 'invalid' ? ('artemisApp.shortAnswerSpot.invalidSpot' | artemisTranslate) : undefined\"\r\n                                >\r\n                                    <input\r\n                                        class=\"short-answer-question-container__input {{ classifyInputField(element) }}\"\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        [maxLength]=\"MAX_CHARACTER_COUNT\"\r\n                                        value=\"{{ getTextForSpotAsString(element) }}\"\r\n                                        size=\"{{ getSizeForSpot(element) }}\"\r\n                                    />\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <br />\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (shortAnswerQuestion.invalid) {\r\n        <span style=\"color: red\" jhiTranslate=\"artemisApp.quizQuestion.invalidText\"></span>\r\n    }\r\n    @if (shortAnswerQuestion.hint || (shortAnswerQuestion.explanation && showResult)) {\r\n        <div class=\"hint\">\r\n            <ng-template #renderedHint>\r\n                <div [innerHTML]=\"renderedQuestion.hint\"></div>\r\n            </ng-template>\r\n            @if (shortAnswerQuestion.hint) {\r\n                <span class=\"label label-info\" [ngbPopover]=\"renderedHint\" placement=\"right auto\" triggers=\"mouseenter:mouseleave\">\r\n                    <fa-icon [icon]=\"farQuestionCircle\" />\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.hint\"></span>\r\n                </span>\r\n            }\r\n            <br />\r\n            <ng-template #renderedExplanation>\r\n                <div [innerHTML]=\"renderedQuestion.explanation\"></div>\r\n            </ng-template>\r\n            @if (shortAnswerQuestion.explanation && showResult) {\r\n                <span class=\"label label-primary\" [ngbPopover]=\"renderedExplanation\" placement=\"right auto\" triggers=\"mouseenter:mouseleave\">\r\n                    <fa-icon [icon]=\"faExclamationCircle\" />\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.explanation\"></span>\r\n                </span>\r\n            }\r\n        </div>\r\n    }\r\n    @if (!showResult || forceSampleSolution) {\r\n        <div class=\"question-score\">\r\n            <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n            <span>{{ shortAnswerQuestion.points }}</span>\r\n        </div>\r\n    }\r\n    @if (showResult && !forceSampleSolution) {\r\n        <div class=\"question-score result\" [ngClass]=\"{ incorrect: (score || 0) < shortAnswerQuestion.points! }\">\r\n            <span jhiTranslate=\"artemisApp.quizQuestion.yourScore\" class=\"colon-suffix\"></span>\r\n            <span class=\"show-explanation\">{{ score || 0 }}/{{ shortAnswerQuestion.points }}</span>\r\n            <span class=\"show-explanation\">\r\n                <jhi-quiz-scoring-infostudent-modal [score]=\"score\" [question]=\"shortAnswerQuestion\" [shortAnswerText]=\"submittedTexts\" [questionIndex]=\"questionIndex\" />\r\n            </span>\r\n        </div>\r\n    }\r\n    <br />\r\n    <br />\r\n    @if (showResult && !forceSampleSolution) {\r\n        <div>\r\n            @if (!showingSampleSolution) {\r\n                <div class=\"btn btn-outline-primary\" (click)=\"showSampleSolution()\" jhiTranslate=\"artemisApp.quizQuestion.showSampleSolution\"></div>\r\n            }\r\n            @if (showingSampleSolution) {\r\n                <div class=\"btn btn-outline-primary\" (click)=\"hideSampleSolution()\" jhiTranslate=\"artemisApp.quizQuestion.hideSampleSolution\"></div>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["ShortAnswerSubmittedText", "id", "text", "isCorrect", "spot", "submittedAnswer", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "element_r1", "\u0275\u0275sanitizeHtml", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setSubmittedText", "\u0275\u0275elementEnd", "\u0275\u0275propertyInterpolate", "getSubmittedTextForSpotAsString", "\u0275\u0275propertyInterpolate3", "\u0275$index_17_r6", "\u0275$index_22_r5", "shortAnswerQuestion", "id", "MAX_CHARACTER_COUNT", "clickDisabled", "\u0275\u0275template", "ShortAnswerQuestionComponent_Conditional_8_For_4_For_4_Conditional_3_Template", "ShortAnswerQuestionComponent_Conditional_8_For_4_For_4_Conditional_4_Template", "\u0275\u0275conditional", "shortAnswerQuestionUtil", "isInputField", "\u0275\u0275repeaterCreate", "ShortAnswerQuestionComponent_Conditional_8_For_4_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "textPart_r7", "ShortAnswerQuestionComponent_Conditional_8_For_4_Template", "textParts", "element_r8", "classifyInputField", "\u0275\u0275pipeBind1", "undefined", "\u0275\u0275classMapInterpolate1", "getTextForSpotAsString", "getSizeForSpot", "ShortAnswerQuestionComponent_Conditional_9_For_4_For_4_Conditional_3_Template", "ShortAnswerQuestionComponent_Conditional_9_For_4_For_4_Conditional_4_Template", "ShortAnswerQuestionComponent_Conditional_9_For_4_For_4_Template", "textPart_r9", "ShortAnswerQuestionComponent_Conditional_9_For_4_Template", "renderedQuestion", "hint", "renderedHint_r10", "farQuestionCircle", "explanation", "renderedExplanation_r11", "faExclamationCircle", "ShortAnswerQuestionComponent_Conditional_11_ng_template_3_Template", "\u0275\u0275templateRefExtractor", "ShortAnswerQuestionComponent_Conditional_11_Conditional_6_Template", "ShortAnswerQuestionComponent_Conditional_11_ng_template_9_Template", "ShortAnswerQuestionComponent_Conditional_11_Conditional_12_Template", "showResult", "\u0275\u0275textInterpolate", "points", "\u0275\u0275pureFunction1", "_c1", "score", "\u0275\u0275textInterpolate2", "submittedTexts", "questionIndex", "_r12", "showSampleSolution", "_r13", "hideSampleSolution", "ShortAnswerQuestionComponent_Conditional_18_Conditional_3_Template", "ShortAnswerQuestionComponent_Conditional_18_Conditional_4_Template", "showingSampleSolution", "ShortAnswerQuestionComponent", "artemisMarkdown", "inject", "ArtemisMarkdownService", "ShortAnswerQuestionUtil", "_forceSampleSolution", "question", "watchCollection", "forceSampleSolution", "fnOnSubmittedTextUpdate", "submittedTextsChange", "EventEmitter", "MAX_QUIZ_SHORT_ANSWER_TEXT_LENGTH", "sampleSolutions", "faQuestionCircle", "RenderedQuizQuestionMarkDownElement", "divideQuestionTextIntoTextParts", "text", "transformTextPartsIntoHTML", "safeHtmlForMarkdown", "i", "textpart", "j", "element", "submittedText", "ShortAnswerSubmittedText", "document", "getElementById", "value", "spot", "getSpot", "getSpotNr", "push", "emit", "getSampleSolutions", "getSubmittedTextForSpot", "spotTag", "filter", "spotNr", "getSubmittedTextSizeForSpot", "length", "getSampleSolutionForSpot", "index", "spots", "findIndex", "getSampleSolutionForSpotAsString", "getSampleSolutionSizeForSpot", "sampleSolution", "invalid", "isCorrect", "isSubmittedTextCompletelyCorrect", "isTextCorrect", "solutions", "getAllSolutionsForSpot", "correctMappings", "solution", "trim", "selectors", "inputs", "outputs", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ShortAnswerQuestionComponent_Conditional_8_Template", "ShortAnswerQuestionComponent_Conditional_9_Template", "ShortAnswerQuestionComponent_Conditional_10_Template", "ShortAnswerQuestionComponent_Conditional_11_Template", "ShortAnswerQuestionComponent_Conditional_12_Template", "ShortAnswerQuestionComponent_Conditional_13_Template", "ShortAnswerQuestionComponent_Conditional_18_Template", "\u0275\u0275pureFunction3", "_c0", "\u0275\u0275textInterpolate1", "title", "NgClass", "NgbTooltip", "TranslateDirective", "NgbPopover", "FaIconComponent", "QuizScoringInfoStudentModalComponent", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
