{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/file-upload/assess/file-upload-assessment.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ComplaintResponse } from 'app/entities/complaint-response.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\nexport type EntityResponseType = HttpResponse<Result>;\r\ntype FileUploadAssessmentDTO = { feedbacks: Feedback[]; assessmentNote?: string };\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FileUploadAssessmentService {\r\n    private http = inject(HttpClient);\r\n\r\n    private resourceUrl = 'api/fileupload';\r\n\r\n    saveAssessment(feedbacks: Feedback[], submissionId: number, assessmentNote: string | undefined, submit = false): Observable<Result> {\r\n        let params = new HttpParams();\r\n        if (submit) {\r\n            params = params.set('submit', 'true');\r\n        }\r\n        const body: FileUploadAssessmentDTO = { feedbacks, assessmentNote };\r\n        const url = `${this.resourceUrl}/file-upload-submissions/${submissionId}/feedback`;\r\n        return this.http.put<Result>(url, body, { params });\r\n    }\r\n\r\n    updateAssessmentAfterComplaint(feedbacks: Feedback[], complaintResponse: ComplaintResponse, submissionId: number, assessmentNote?: string): Observable<EntityResponseType> {\r\n        const url = `${this.resourceUrl}/file-upload-submissions/${submissionId}/assessment-after-complaint`;\r\n        const assessmentUpdate = {\r\n            feedbacks,\r\n            complaintResponse,\r\n            assessmentNote,\r\n        };\r\n        return this.http.put<Result>(url, assessmentUpdate, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.convertResultEntityResponseTypeFromServer(res)));\r\n    }\r\n\r\n    // TODO refactor all asssessment.service getAssessment calls to make similar REST calls\r\n    getAssessment(submissionId: number): Observable<Result> {\r\n        return this.http.get<Result>(`${this.resourceUrl}/file-upload-submissions/${submissionId}/result`);\r\n    }\r\n\r\n    cancelAssessment(submissionId: number): Observable<void> {\r\n        return this.http.put<void>(`${this.resourceUrl}/file-upload-submissions/${submissionId}/cancel-assessment`, null);\r\n    }\r\n\r\n    /**\r\n     * Deletes an assessment.\r\n     * @param participationId id of the participation, to which the assessment and the submission belong to\r\n     * @param submissionId id of the submission, to which the assessment belongs to\r\n     * @param resultId     id of the result which is deleted\r\n     */\r\n    deleteAssessment(participationId: number, submissionId: number, resultId: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/participations/${participationId}/file-upload-submissions/${submissionId}/results/${resultId}`);\r\n    }\r\n\r\n    private convertResultEntityResponseTypeFromServer(res: EntityResponseType): EntityResponseType {\r\n        const result = this.convertItemFromServer(res.body!);\r\n        result.completionDate = convertDateFromServer(result.completionDate);\r\n        if (result.submission) {\r\n            result.submission.submissionDate = convertDateFromServer(result.submission.submissionDate);\r\n        }\r\n        if (result.participation) {\r\n            result.participation.initializationDate = convertDateFromServer(result.participation.initializationDate);\r\n        }\r\n\r\n        return res.clone({ body: result });\r\n    }\r\n\r\n    private convertItemFromServer(result: Result): Result {\r\n        return Object.assign({}, result);\r\n    }\r\n}\r\n"],
  "mappings": "+IAeA,IAAaA,GAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAC5BC,KAAOC,EAAOC,CAAU,EAExBC,YAAc,iBAEtBC,eAAeC,EAAuBC,EAAsBC,EAAoCC,EAAS,GAAK,CAC1G,IAAIC,EAAS,IAAIC,EACbF,IACAC,EAASA,EAAOE,IAAI,SAAU,MAAM,GAExC,IAAMC,EAAgC,CAAEP,UAAAA,EAAWE,eAAAA,CAAc,EAC3DM,EAAM,GAAG,KAAKV,WAAW,4BAA4BG,CAAY,YACvE,OAAO,KAAKN,KAAKc,IAAYD,EAAKD,EAAM,CAAEH,OAAAA,CAAM,CAAE,CACtD,CAEAM,+BAA+BV,EAAuBW,EAAsCV,EAAsBC,EAAuB,CACrI,IAAMM,EAAM,GAAG,KAAKV,WAAW,4BAA4BG,CAAY,8BACjEW,EAAmB,CACrBZ,UAAAA,EACAW,kBAAAA,EACAT,eAAAA,GAEJ,OAAO,KAAKP,KAAKc,IAAYD,EAAKI,EAAkB,CAAEC,QAAS,UAAU,CAAE,EAAEC,KAAKC,EAAKC,GAA4B,KAAKC,0CAA0CD,CAAG,CAAC,CAAC,CAC3K,CAGAE,cAAcjB,EAAoB,CAC9B,OAAO,KAAKN,KAAKwB,IAAY,GAAG,KAAKrB,WAAW,4BAA4BG,CAAY,SAAS,CACrG,CAEAmB,iBAAiBnB,EAAoB,CACjC,OAAO,KAAKN,KAAKc,IAAU,GAAG,KAAKX,WAAW,4BAA4BG,CAAY,qBAAsB,IAAI,CACpH,CAQAoB,iBAAiBC,EAAyBrB,EAAsBsB,EAAgB,CAC5E,OAAO,KAAK5B,KAAK6B,OAAa,GAAG,KAAK1B,WAAW,mBAAmBwB,CAAe,4BAA4BrB,CAAY,YAAYsB,CAAQ,EAAE,CACrJ,CAEQN,0CAA0CD,EAAuB,CACrE,IAAMS,EAAS,KAAKC,sBAAsBV,EAAIT,IAAK,EACnDkB,OAAAA,EAAOE,eAAiBC,EAAsBH,EAAOE,cAAc,EAC/DF,EAAOI,aACPJ,EAAOI,WAAWC,eAAiBF,EAAsBH,EAAOI,WAAWC,cAAc,GAEzFL,EAAOM,gBACPN,EAAOM,cAAcC,mBAAqBJ,EAAsBH,EAAOM,cAAcC,kBAAkB,GAGpGhB,EAAIiB,MAAM,CAAE1B,KAAMkB,CAAM,CAAE,CACrC,CAEQC,sBAAsBD,EAAc,CACxC,OAAOS,OAAOC,OAAO,CAAA,EAAIV,CAAM,CACnC,4CA3DS/B,EAA2B,6BAA3BA,EAA2B0C,QAA3B1C,EAA2B2C,UAAAC,WAFxB,MAAM,CAAA,SAET5C,CAA2B,GAAA",
  "names": ["FileUploadAssessmentService", "http", "inject", "HttpClient", "resourceUrl", "saveAssessment", "feedbacks", "submissionId", "assessmentNote", "submit", "params", "HttpParams", "set", "body", "url", "put", "updateAssessmentAfterComplaint", "complaintResponse", "assessmentUpdate", "observe", "pipe", "map", "res", "convertResultEntityResponseTypeFromServer", "getAssessment", "get", "cancelAssessment", "deleteAssessment", "participationId", "resultId", "delete", "result", "convertItemFromServer", "completionDate", "convertDateFromServer", "submission", "submissionDate", "participation", "initializationDate", "clone", "Object", "assign", "factory", "\u0275fac", "providedIn"]
}
