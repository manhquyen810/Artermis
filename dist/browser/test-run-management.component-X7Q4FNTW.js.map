{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/test-runs/create-test-run-modal.component.ts", "src/main/webapp/app/exam/manage/test-runs/create-test-run-modal.component.html", "src/main/webapp/app/exam/manage/test-runs/test-run-management.component.ts", "src/main/webapp/app/exam/manage/test-runs/test-run-management.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-create-test-run-modal',\r\n    templateUrl: './create-test-run-modal.component.html',\r\n    providers: [ArtemisDurationFromSecondsPipe],\r\n    styles: ['.table tr.active td { background-color:#3e8acc; color: white; }'],\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule],\r\n})\r\nexport class CreateTestRunModalComponent implements OnInit {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private artemisDurationFromSecondsPipe = inject(ArtemisDurationFromSecondsPipe);\r\n\r\n    exam: Exam;\r\n    workingTimeForm: FormGroup;\r\n    testRunConfiguration: { [id: number]: Exercise } = {};\r\n\r\n    ngOnInit(): void {\r\n        this.initWorkingTimeForm();\r\n        this.ignoreEmptyExerciseGroups();\r\n        for (const exerciseGroup of this.exam.exerciseGroups!) {\r\n            if (exerciseGroup.exercises?.length === 1) {\r\n                this.onSelectExercise(exerciseGroup.exercises[0], exerciseGroup);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a test run student exam based on the test run configuration, {@link testRunConfiguration}.\r\n     * To maintain the order of the exercises we must insert them into the testRun configuration in an orderly fashion\r\n     * Closes the modal and returns the configured testRun.\r\n     */\r\n    createTestRun() {\r\n        if (this.testRunConfigured) {\r\n            const testRun = new StudentExam();\r\n            testRun.exam = this.exam;\r\n            testRun.exercises = [];\r\n            // add exercises one by one to maintain exerciseGroup order\r\n            for (const exerciseGroup of this.exam.exerciseGroups!) {\r\n                testRun.exercises.push(this.testRunConfiguration[exerciseGroup.id!]);\r\n            }\r\n            testRun.workingTime = this.workingTimeForm.controls.minutes.value * 60 + this.workingTimeForm.controls.seconds.value;\r\n            this.activeModal.close(testRun);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the selected exercise for an exercise group in the testRunConfiguration dictionary, {@link testRunConfiguration}.\r\n     * There, the exerciseGroups' id is used as a key to track the selected exercises for this test run.\r\n     * @param exercise The selected exercise\r\n     * @param exerciseGroup The exercise group for which the user selected an exercise\r\n     */\r\n    onSelectExercise(exercise: Exercise, exerciseGroup: ExerciseGroup) {\r\n        this.testRunConfiguration[exerciseGroup.id!] = exercise;\r\n    }\r\n\r\n    /**\r\n     * Returns true if an exercise has been selected for every exercise group\r\n     */\r\n    get testRunConfigured(): boolean {\r\n        return Object.keys(this.testRunConfiguration).length === this.exam.exerciseGroups?.length;\r\n    }\r\n\r\n    /**\r\n     * Closes the modal by dismissing it\r\n     */\r\n    cancel() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    /**\r\n     * Removes the exerciseGroups from the exam which do not contain exercises\r\n     */\r\n    private ignoreEmptyExerciseGroups() {\r\n        const exerciseGroupWithExercises: ExerciseGroup[] = [];\r\n        for (const exerciseGroup of this.exam.exerciseGroups!) {\r\n            if (!!exerciseGroup.exercises && exerciseGroup.exercises.length > 0) {\r\n                exerciseGroupWithExercises.push(exerciseGroup);\r\n            }\r\n        }\r\n        this.exam.exerciseGroups = exerciseGroupWithExercises;\r\n    }\r\n\r\n    /**\r\n     * Sets up the working time form to display the default working time based on the exam dates\r\n     */\r\n    private initWorkingTimeForm() {\r\n        const defaultWorkingTime = this.exam.endDate?.diff(this.exam.startDate, 'seconds');\r\n        const workingTime = this.artemisDurationFromSecondsPipe.transform(defaultWorkingTime ?? 0);\r\n        const workingTimeParts = workingTime.split(':');\r\n        this.workingTimeForm = new FormGroup({\r\n            minutes: new FormControl({ value: parseInt(workingTimeParts[0] ? workingTimeParts[0] : '0', 10), disabled: !!this.exam.visible }, [\r\n                Validators.min(0),\r\n                Validators.required,\r\n            ]),\r\n            seconds: new FormControl({ value: parseInt(workingTimeParts[1] ? workingTimeParts[1] : '0', 10), disabled: !!this.exam.visible }, [\r\n                Validators.min(0),\r\n                Validators.max(59),\r\n                Validators.required,\r\n            ]),\r\n        });\r\n    }\r\n}\r\n", "<div class=\"modal-content\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"createTestRunModal\" jhiTranslate=\"artemisApp.examManagement.testRun.setup\"></h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"cancel()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"mb-3\">\r\n            <h5><span jhiTranslate=\"artemisApp.studentExams.workingTime\"></span></h5>\r\n            <p jhiTranslate=\"artemisApp.examManagement.testRun.setWorkingTime\"></p>\r\n            <form class=\"d-flex gap-1 align-items-center\" [formGroup]=\"workingTimeForm\">\r\n                <input formControlName=\"minutes\" id=\"workingTimeMinutes\" type=\"number\" style=\"width: 70px; height: 35px\" class=\"form-control\" min=\"0\" step=\"1\" required />\r\n                :\r\n                <input formControlName=\"seconds\" id=\"workingTimeSeconds\" type=\"number\" style=\"width: 70px; height: 35px\" class=\"form-control\" min=\"0\" max=\"59\" step=\"1\" required />\r\n            </form>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <h5 jhiTranslate=\"artemisApp.exam.exercises\"></h5>\r\n            <p jhiTranslate=\"artemisApp.examManagement.testRun.setupHint\"></p>\r\n            <table class=\"table table-striped\">\r\n                <thead class=\"thead-dark\">\r\n                    <tr>\r\n                        <th jhiTranslate=\"artemisApp.examScores.titleExerciseGroupColumn\"></th>\r\n                        <th jhiTranslate=\"artemisApp.examScores.titleExerciseColumn\"></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (exerciseGroup of exam.exerciseGroups; track exerciseGroup) {\r\n                        <tr>\r\n                            <td>\r\n                                <b> {{ exerciseGroup.title }} </b>\r\n                            </td>\r\n                            <td>\r\n                                <table class=\"table table-hover table-striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>#</th>\r\n                                            <th jhiTranslate=\"artemisApp.exercise.title\"></th>\r\n                                            <th jhiTranslate=\"artemisApp.exercise.difficulty\"></th>\r\n                                            <th jhiTranslate=\"artemisApp.exercise.type\"></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        @for (exercise of exerciseGroup.exercises; track exercise) {\r\n                                            <tr\r\n                                                (click)=\"onSelectExercise(exercise, exerciseGroup)\"\r\n                                                [class.active]=\"exerciseGroup.id && exercise.id === testRunConfiguration[exerciseGroup.id]?.id\"\r\n                                                [id]=\"'exercise-' + exercise.id\"\r\n                                            >\r\n                                                <td>{{ exercise.id }}</td>\r\n                                                <td>{{ exercise.title }}</td>\r\n                                                <td>{{ exercise.difficulty }}</td>\r\n                                                <td>{{ exercise.type }}</td>\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\" jhiTranslate=\"global.form.cancel\"></button>\r\n            <button\r\n                id=\"createTestRunButton\"\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                data-dismiss=\"modal\"\r\n                [disabled]=\"!testRunConfigured\"\r\n                (click)=\"createTestRun()\"\r\n                jhiTranslate=\"artemisApp.examManagement.testRun.setup\"\r\n            ></button>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, OnInit, computed, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { NgbModal, NgbModalRef, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CreateTestRunModalComponent } from 'app/exam/manage/test-runs/create-test-run-modal.component';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Subject } from 'rxjs';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { faSort, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-test-run-management',\r\n    templateUrl: './test-run-management.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        RouterLink,\r\n        SortDirective,\r\n        SortByDirective,\r\n        FaIconComponent,\r\n        DeleteButtonDirective,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n        ArtemisDurationFromSecondsPipe,\r\n    ],\r\n})\r\nexport class TestRunManagementComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private accountService = inject(AccountService);\r\n    private sortService = inject(SortService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    course = signal<Course | undefined>(undefined);\r\n    exam = signal<Exam | undefined>(undefined);\r\n    isLoading = signal(false);\r\n    isExamStarted = computed(() => this.exam()?.started || false);\r\n    testRuns = signal<StudentExam[]>([]);\r\n    instructor = signal<User | undefined>(undefined);\r\n    predicate = signal<string>('id');\r\n    ascending = signal<boolean>(true);\r\n    // Determines if a test run has been submitted. Used to enable the assess test run button.\r\n    testRunCanBeAssessed = computed(() => {\r\n        const runs = this.testRuns();\r\n        const instructor = this.instructor();\r\n        return runs.some((testRun) => testRun.user?.id === instructor?.id && testRun.submitted);\r\n    });\r\n    // Determines if at least one exercise has been configured for the exam\r\n    examContainsExercises = computed(() => {\r\n        const exam = this.exam();\r\n        return !!exam?.exerciseGroups && exam.exerciseGroups.some((exerciseGroup) => exerciseGroup.exercises && exerciseGroup.exercises.length > 0);\r\n    });\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faTimes = faTimes;\r\n\r\n    ngOnInit(): void {\r\n        this.examManagementService.find(Number(this.route.snapshot.paramMap.get('courseId')), Number(this.route.snapshot.paramMap.get('examId')), false, true).subscribe({\r\n            next: (response: HttpResponse<Exam>) => {\r\n                this.exam.set(response.body!);\r\n                this.course.set(this.exam()!.course!);\r\n                const course = this.course()!;\r\n                course.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(course);\r\n                this.examManagementService.findAllTestRunsForExam(course.id!, this.exam()!.id!).subscribe({\r\n                    next: (res: HttpResponse<StudentExam[]>) => {\r\n                        this.testRuns.set(res.body!);\r\n                    },\r\n                    error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n                });\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n        this.accountService.identity().then((user) => {\r\n            if (user) {\r\n                this.instructor.set(user);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open modal to configure a new test run\r\n     */\r\n    openCreateTestRunModal() {\r\n        const modalRef: NgbModalRef = this.modalService.open(CreateTestRunModalComponent as Component, { size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.exam = this.exam();\r\n        modalRef.result\r\n            .then((testRunConfiguration: StudentExam) => {\r\n                this.examManagementService.createTestRun(this.course()!.id!, this.exam()!.id!, testRunConfiguration).subscribe({\r\n                    next: (response: HttpResponse<StudentExam>) => {\r\n                        if (response.body != undefined) {\r\n                            this.testRuns.update((current) => [...current, response.body!]);\r\n                        }\r\n                    },\r\n                    error: (error: HttpErrorResponse) => {\r\n                        onError(this.alertService, error);\r\n                    },\r\n                });\r\n            })\r\n            .catch(() => {});\r\n    }\r\n\r\n    /**\r\n     * Delete the test run with the given id.\r\n     * @param testRunId\r\n     */\r\n    deleteTestRun(testRunId: number) {\r\n        this.examManagementService.deleteTestRun(this.course()!.id!, this.exam()!.id!, testRunId).subscribe({\r\n            next: () => {\r\n                this.testRuns.update((currentTestRuns) => currentTestRuns.filter((testRun) => testRun.id !== testRunId));\r\n                this.dialogErrorSource.next('');\r\n            },\r\n            error: (error) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track the items on the testruns Table\r\n     * @param _index\r\n     * @param item\r\n     */\r\n    trackId(_index: number, item: StudentExam) {\r\n        return item.id;\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.testRuns(), this.predicate(), this.ascending());\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex\">\r\n        <div class=\"mb-3\">\r\n            <h2><span jhiTranslate=\"artemisApp.examManagement.testRun.title\"></span>{{ exam()?.title }}</h2>\r\n        </div>\r\n        <div class=\"ms-auto\">\r\n            <div class=\"d-flex mb-1\">\r\n                <div [ngbTooltip]=\"'artemisApp.examManagement.testRun.createTestRunDisabled' | artemisTranslate\" [disableTooltip]=\"examContainsExercises()\">\r\n                    @if (course()?.isAtLeastInstructor) {\r\n                        <button\r\n                            id=\"createTestRunButton\"\r\n                            class=\"btn btn-primary btn-sm me-1 mb-1\"\r\n                            style=\"height: 40px\"\r\n                            (click)=\"openCreateTestRunModal()\"\r\n                            [disabled]=\"isLoading() || !examContainsExercises()\"\r\n                        >\r\n                            @if (isLoading()) {\r\n                                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                            }\r\n                            <span jhiTranslate=\"artemisApp.examManagement.testRun.setup\"></span>\r\n                        </button>\r\n                    }\r\n                </div>\r\n                @if (exam() && !exam()?.testExam) {\r\n                    <div [ngbTooltip]=\"'artemisApp.examManagement.testRun.assessTestRunDisabled' | artemisTranslate\" [disableTooltip]=\"testRunCanBeAssessed()\">\r\n                        @if (course()?.isAtLeastInstructor) {\r\n                            <a\r\n                                class=\"btn btn-primary btn-sm me-1 mb-1\"\r\n                                style=\"height: 40px; display: inline-flex; align-items: center\"\r\n                                [routerLink]=\"['/course-management', course()?.id, 'exams', exam()?.id, 'test-runs', 'assess']\"\r\n                                [class.disabled]=\"isLoading() || !testRunCanBeAssessed()\"\r\n                            >\r\n                                <span jhiTranslate=\"artemisApp.examManagement.testRun.assess\"></span>\r\n                            </a>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div style=\"padding-bottom: 10px\">\r\n        <span jhiTranslate=\"artemisApp.examManagement.testRun.text\"></span>\r\n    </div>\r\n    <div class=\"alert alert-warning\" jhiTranslate=\"artemisApp.examManagement.testRun.reminderToDelete\"></div>\r\n    @if (testRuns()) {\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"sortRows()\">\r\n                        <th class=\"d-none d-md-table-cell\" jhiSortBy=\"id\">\r\n                            <span jhiTranslate=\"global.field.id\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th class=\"d-none d-md-table-cell\" jhiSortBy=\"id\">\r\n                            <span jhiTranslate=\"artemisApp.examManagement.testRun.author\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"workingTime\">\r\n                            <span jhiTranslate=\"artemisApp.studentExams.workingTime\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th class=\"d-none d-md-table-cell\" jhiSortBy=\"started\">\r\n                            <span jhiTranslate=\"artemisApp.studentExams.started\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th class=\"d-none d-md-table-cell\" jhiSortBy=\"submitted\">\r\n                            <span jhiTranslate=\"artemisApp.studentExams.submitted\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th class=\"d-none d-md-table-cell\" jhiSortBy=\"submissionDate\">\r\n                            <span jhiTranslate=\"artemisApp.studentExams.submissionDate\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (testRun of testRuns(); track trackId($index, testRun)) {\r\n                        <tr [id]=\"'testrun-' + testRun.id\">\r\n                            <td class=\"testrun-id d-none d-md-table-cell\">\r\n                                <a [routerLink]=\"[testRun.id]\">{{ testRun.id }}</a>\r\n                            </td>\r\n                            <td>\r\n                                <a> {{ testRun.user?.name || '--' }}</a>\r\n                            </td>\r\n                            <td class=\"working-time\">{{ testRun.workingTime || 0 | artemisDurationFromSeconds }}</td>\r\n                            <td class=\"started\" jhiTranslate=\"{{ testRun.started ? 'global.generic.yes' : 'global.generic.no' }}\"></td>\r\n                            <td class=\"submitted\" jhiTranslate=\"{{ testRun.submitted ? 'global.generic.yes' : 'global.generic.no' }}\"></td>\r\n                            <td>{{ testRun.submissionDate | artemisDate }}</td>\r\n                            <td [width]=\"350\">\r\n                                <div class=\"w-100 text-end\">\r\n                                    @if (course()?.isAtLeastInstructor) {\r\n                                        <div class=\"btn-group\">\r\n                                            @if (testRun.user?.id === instructor()?.id) {\r\n                                                @if (!testRun.submitted) {\r\n                                                    <a class=\"start-testrun btn btn-primary btn-sm me-1 mb-1\" [routerLink]=\"['../test-runs/' + testRun.id + '/conduction']\">\r\n                                                        @if (!testRun.started) {\r\n                                                            <span jhiTranslate=\"artemisApp.course.startDate\"></span>\r\n                                                        }\r\n                                                        @if (testRun.started) {\r\n                                                            <span jhiTranslate=\"artemisApp.examParticipation.continueAfterHandInEarly\"></span>\r\n                                                        }\r\n                                                    </a>\r\n                                                } @else {\r\n                                                    <a class=\"btn btn-primary btn-sm me-1 mb-1\" [routerLink]=\"'../test-runs/' + testRun.id + '/summary'\">\r\n                                                        <span jhiTranslate=\"artemisApp.exam.summary\"></span>\r\n                                                    </a>\r\n                                                }\r\n                                            } @else {\r\n                                                <a class=\"btn btn-primary btn-sm me-1 mb-1\" [routerLink]=\"'../test-runs/' + testRun.id + '/summary'\">\r\n                                                    <span jhiTranslate=\"artemisApp.exam.summary\"></span>\r\n                                                </a>\r\n                                            }\r\n                                            <a\r\n                                                class=\"manage-worktime btn btn-primary btn-sm me-1 mb-1\"\r\n                                                [routerLink]=\"['/course-management', course()!.id, 'exams', exam()!.id, 'test-runs', testRun.id]\"\r\n                                                [class.disabled]=\"testRun.started\"\r\n                                            >\r\n                                                <span jhiTranslate=\"artemisApp.examManagement.testRun.manage\"></span>\r\n                                            </a>\r\n                                            @if (testRun.id) {\r\n                                                <button\r\n                                                    jhiDeleteButton\r\n                                                    [entityTitle]=\"'artemisApp.examManagement.testRun.testRun' | artemisTranslate\"\r\n                                                    deleteQuestion=\"artemisApp.examManagement.testRun.delete.question\"\r\n                                                    deleteConfirmationText=\"artemisApp.examManagement.testRun.delete.typeNameToConfirm\"\r\n                                                    (delete)=\"deleteTestRun(testRun.id)\"\r\n                                                    [dialogError]=\"dialogError$\"\r\n                                                    class=\"delete-testrun btn btn-primary btn-sm me-1 mb-1\"\r\n                                                >\r\n                                                    <fa-icon [icon]=\"faTimes\" />\r\n                                                </button>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "exercise_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "exerciseGroup_r3", "\u0275\u0275nextContext", "ctx_r3", "\u0275\u0275resetView", "onSelectExercise", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classProp", "id", "testRunConfiguration", "\u0275\u0275property", "\u0275\u0275textInterpolate", "title", "difficulty", "type", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "CreateTestRunModalComponent_For_47_For_31_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275textInterpolate1", "\u0275\u0275repeater", "exercises", "CreateTestRunModalComponent", "activeModal", "inject", "NgbActiveModal", "artemisDurationFromSecondsPipe", "ArtemisDurationFromSecondsPipe", "exam", "workingTimeForm", "ngOnInit", "initWorkingTimeForm", "ignoreEmptyExerciseGroups", "exerciseGroup", "exerciseGroups", "length", "createTestRun", "testRunConfigured", "testRun", "StudentExam", "push", "workingTime", "controls", "minutes", "value", "seconds", "close", "exercise", "Object", "keys", "cancel", "dismiss", "exerciseGroupWithExercises", "defaultWorkingTime", "endDate", "diff", "startDate", "workingTimeParts", "transform", "split", "FormGroup", "FormControl", "parseInt", "disabled", "visible", "Validators", "min", "required", "max", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "CreateTestRunModalComponent_For_47_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "MinValidator", "MaxValidator", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openCreateTestRunModal", "\u0275\u0275template", "TestRunManagementComponent_Conditional_18_Conditional_3_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "isLoading", "examContainsExercises", "\u0275\u0275conditional", "\u0275\u0275classProp", "testRunCanBeAssessed", "\u0275\u0275pureFunction2", "_c0", "tmp_3_0", "course", "id", "exam", "TestRunManagementComponent_Conditional_20_Conditional_4_Template", "\u0275\u0275pipeBind1", "isAtLeastInstructor", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_3_Conditional_1_Conditional_3_Template", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_3_Conditional_1_Conditional_4_Template", "\u0275\u0275pureFunction1", "_c1", "testRun_r4", "started", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_3_Conditional_1_Template", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_3_Conditional_2_Template", "submitted", "_r5", "$implicit", "deleteTestRun", "dialogError$", "faTimes", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_3_Template", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_4_Template", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Conditional_10_Template", "user", "tmp_12_0", "instructor", "\u0275\u0275pureFunction3", "_c2", "TestRunManagementComponent_Conditional_31_For_58_Conditional_31_Template", "\u0275\u0275textInterpolate", "\u0275\u0275textInterpolate1", "name", "workingTime", "\u0275\u0275propertyInterpolate", "submissionDate", "tmp_20_0", "\u0275\u0275twoWayListener", "$event", "_r3", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "ascending", "sortRows", "\u0275\u0275repeaterCreate", "TestRunManagementComponent_Conditional_31_For_58_Template", "\u0275\u0275componentInstance", "trackId", "\u0275\u0275twoWayProperty", "faSort", "\u0275\u0275repeater", "testRuns", "TestRunManagementComponent", "route", "inject", "ActivatedRoute", "alertService", "AlertService", "examManagementService", "ExamManagementService", "accountService", "AccountService", "sortService", "SortService", "modalService", "NgbModal", "signal", "undefined", "isExamStarted", "computed", "runs", "some", "testRun", "exerciseGroups", "exerciseGroup", "exercises", "length", "dialogErrorSource", "Subject", "asObservable", "ngOnInit", "find", "Number", "snapshot", "paramMap", "get", "subscribe", "next", "response", "set", "body", "isAtLeastInstructorInCourse", "findAllTestRunsForExam", "res", "error", "onError", "identity", "then", "modalRef", "open", "CreateTestRunModalComponent", "size", "backdrop", "componentInstance", "result", "testRunConfiguration", "createTestRun", "update", "current", "catch", "testRunId", "currentTestRuns", "filter", "message", "_index", "item", "sortByProperty", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "TestRunManagementComponent_Conditional_18_Template", "TestRunManagementComponent_Conditional_20_Template", "TestRunManagementComponent_Conditional_31_Template", "tmp_0_0", "title", "tmp_4_0", "testExam", "TranslateDirective", "NgbTooltip", "RouterLink", "SortDirective", "SortByDirective", "FaIconComponent", "DeleteButtonDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "encapsulation"]
}
