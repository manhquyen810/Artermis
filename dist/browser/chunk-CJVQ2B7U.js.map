{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-overview.service.ts", "src/main/webapp/app/shared/metis/conversations/conversation-permissions.utils.ts", "src/main/webapp/app/shared/sidebar/sidebar.helper.ts", "src/main/webapp/app/shared/exercise-filter/exercise-filter-modal.helper.ts", "src/main/webapp/app/shared/exercise-filter/exercise-filter-modal.component.ts", "src/main/webapp/app/shared/exercise-filter/exercise-filter-modal.component.html", "src/main/webapp/app/shared/sidebar/sidebar-card-item/sidebar-card-item.component.ts", "src/main/webapp/app/shared/sidebar/sidebar-card-item/sidebar-card-item.component.html", "src/main/webapp/app/overview/course-conversations/other/channel-icon/channel-icon.component.ts", "src/main/webapp/app/overview/course-conversations/other/channel-icon/channel-icon.component.html", "src/main/webapp/app/shared/course-users-selector/course-users-selector.component.ts", "src/main/webapp/app/shared/course-users-selector/course-users-selector.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-add-users-dialog/add-users-form/conversation-add-users-form.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-add-users-dialog/add-users-form/conversation-add-users-form.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-add-users-dialog/conversation-add-users-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-add-users-dialog/conversation-add-users-dialog.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-members/conversation-member-row/conversation-member-row.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-members/conversation-member-row/conversation-member-row.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-members/conversation-members.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-members/conversation-members.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/generic-update-text-property-dialog/generic-update-text-property-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/generic-update-text-property-dialog/generic-update-text-property-dialog.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/channels-create-dialog/channel-form/channel-form.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/channels-create-dialog/channel-form/channel-form.component.html", "src/main/webapp/app/entities/metis/conversation/conversation-user-dto.model.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-info/conversation-info.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-info/conversation-info.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-settings/conversation-settings.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/tabs/conversation-settings/conversation-settings.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/conversation-detail-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/conversation-detail-dialog/conversation-detail-dialog.component.html", "src/main/webapp/app/shared/sidebar/conversation-options/conversation-options.component.ts", "src/main/webapp/app/shared/sidebar/conversation-options/conversation-options.component.html", "src/main/webapp/app/shared/sidebar/sidebar-card-small/sidebar-card-small.component.ts", "src/main/webapp/app/shared/sidebar/sidebar-card-small/sidebar-card-small.component.html", "src/main/webapp/app/shared/sidebar/sidebar-card-medium/sidebar-card-medium.component.ts", "src/main/webapp/app/shared/sidebar/sidebar-card-medium/sidebar-card-medium.component.html", "src/main/webapp/app/shared/sidebar/sidebar-card-large/sidebar-card-large.component.ts", "src/main/webapp/app/shared/sidebar/sidebar-card-large/sidebar-card-large.component.html", "src/main/webapp/app/shared/sidebar/sidebar-card.directive.ts", "src/main/webapp/app/shared/sidebar/sidebar-accordion/sidebar-accordion.component.ts", "src/main/webapp/app/shared/sidebar/sidebar-accordion/sidebar-accordion.component.html", "src/main/webapp/app/shared/sidebar/sidebar.component.ts", "src/main/webapp/app/shared/sidebar/sidebar.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Exercise, getIcon } from 'app/entities/exercise.model';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { getExerciseDueDate } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { AccordionGroups, ChannelGroupCategory, SidebarCardElement, TimeGroupCategory } from 'app/types/sidebar';\r\nimport dayjs from 'dayjs/esm';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\nimport { ConversationDTO, ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ChannelSubType, getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\r\nimport { faBookmark, faBoxArchive, faBullhorn, faHashtag, faLock, faSquareCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { isOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { SavedPostStatusMap } from 'app/entities/metis/posting.model';\r\nimport { Course } from 'app/entities/course.model';\r\n\r\nconst DEFAULT_UNIT_GROUPS: AccordionGroups = {\r\n    future: { entityData: [] },\r\n    dueSoon: { entityData: [] },\r\n    current: { entityData: [] },\r\n    past: { entityData: [] },\r\n    noDate: { entityData: [] },\r\n};\r\n\r\ntype StartDateGroup = 'none' | 'past' | 'future';\r\ntype EndDateGroup = StartDateGroup | 'soon';\r\n\r\n/**\r\n * Decides which time category group an exercise should be put into based on its start and end dates.\r\n */\r\nconst GROUP_DECISION_MATRIX: Record<StartDateGroup, Record<EndDateGroup, TimeGroupCategory>> = {\r\n    none: {\r\n        none: 'noDate',\r\n        past: 'past',\r\n        soon: 'dueSoon',\r\n        future: 'current',\r\n    },\r\n    past: {\r\n        none: 'noDate',\r\n        past: 'past',\r\n        soon: 'dueSoon',\r\n        future: 'current',\r\n    },\r\n    future: {\r\n        none: 'future',\r\n        past: 'future',\r\n        soon: 'future',\r\n        future: 'future',\r\n    },\r\n};\r\n\r\nconst DEFAULT_CHANNEL_GROUPS: AccordionGroups = {\r\n    favoriteChannels: { entityData: [] },\r\n    recents: { entityData: [] },\r\n    generalChannels: { entityData: [] },\r\n    exerciseChannels: { entityData: [] },\r\n    lectureChannels: { entityData: [] },\r\n    examChannels: { entityData: [] },\r\n    feedbackDiscussion: { entityData: [] },\r\n    archivedChannels: { entityData: [] },\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CourseOverviewService {\r\n    private participationService = inject(ParticipationService);\r\n    private translate = inject(TranslateService);\r\n    private conversationService = inject(ConversationService);\r\n\r\n    readonly faBullhorn = faBullhorn;\r\n    readonly faHashtag = faHashtag;\r\n    readonly faLock = faLock;\r\n\r\n    getUpcomingTutorialGroup(tutorialGroups: TutorialGroup[] | undefined): TutorialGroup | undefined {\r\n        if (tutorialGroups && tutorialGroups.length) {\r\n            const upcomingTutorialGroup = tutorialGroups?.reduce((a, b) => ((a?.nextSession?.start?.valueOf() ?? 0) > (b?.nextSession?.start?.valueOf() ?? 0) ? a : b));\r\n            return upcomingTutorialGroup;\r\n        }\r\n    }\r\n    getUpcomingLecture(lectures: Lecture[] | undefined): Lecture | undefined {\r\n        if (lectures && lectures.length) {\r\n            const upcomingLecture = lectures?.reduce((a, b) => ((a?.startDate?.valueOf() ?? 0) > (b?.startDate?.valueOf() ?? 0) ? a : b));\r\n            return upcomingLecture;\r\n        }\r\n    }\r\n\r\n    getUpcomingExam(exams: Exam[] | undefined): Exam | undefined {\r\n        if (exams && exams.length) {\r\n            const upcomingExam = exams?.reduce((a, b) => ((a?.startDate?.valueOf() ?? 0) > (b?.startDate?.valueOf() ?? 0) ? a : b));\r\n            return upcomingExam;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getUpcomingExercise(exercises: Exercise[] | undefined): Exercise | undefined {\r\n        if (exercises && exercises.length) {\r\n            const upcomingLecture = exercises?.reduce((a, b) => ((a?.dueDate?.valueOf() ?? 0) > (b?.dueDate?.valueOf() ?? 0) ? a : b));\r\n            return upcomingLecture;\r\n        }\r\n    }\r\n\r\n    getCorrespondingExerciseGroupByDate(exercise: Exercise): TimeGroupCategory {\r\n        const now = dayjs();\r\n\r\n        const startGroup = this.getStartDateGroup(exercise, now);\r\n        const endGroup = this.getEndDateGroup(exercise, now);\r\n\r\n        return GROUP_DECISION_MATRIX[startGroup][endGroup];\r\n    }\r\n\r\n    private getStartDateGroup(exercise: Exercise, now: dayjs.Dayjs): StartDateGroup {\r\n        const start = exercise.startDate ?? exercise.releaseDate;\r\n\r\n        if (start === undefined) {\r\n            return 'none';\r\n        }\r\n\r\n        if (now.isAfter(dayjs(start))) {\r\n            return 'past';\r\n        }\r\n\r\n        return 'future';\r\n    }\r\n\r\n    private getEndDateGroup(exercise: Exercise, now: dayjs.Dayjs): EndDateGroup {\r\n        const dueDate = exercise.dueDate ? dayjs(exercise.dueDate) : undefined;\r\n\r\n        if (dueDate === undefined) {\r\n            return 'none';\r\n        }\r\n\r\n        if (now.isAfter(dueDate)) {\r\n            return 'past';\r\n        }\r\n\r\n        const dueDateIsSoon = dueDate.isBefore(now.add(3, 'days'));\r\n        if (dueDateIsSoon) {\r\n            return 'soon';\r\n        }\r\n\r\n        return 'future';\r\n    }\r\n\r\n    getCorrespondingLectureGroupByDate(startDate: dayjs.Dayjs | undefined, endDate?: dayjs.Dayjs | undefined): TimeGroupCategory {\r\n        if (!startDate) {\r\n            return 'noDate';\r\n        }\r\n\r\n        const now = dayjs();\r\n        const isStartDateWithinLastWeek = startDate.isBetween(now.subtract(1, 'week'), now);\r\n        const isDateInThePast = endDate ? endDate.isBefore(now) : startDate.isBefore(now.subtract(1, 'week'));\r\n\r\n        if (isDateInThePast) {\r\n            return 'past';\r\n        }\r\n\r\n        const isDateCurrent = endDate ? now.isBetween(startDate, endDate, undefined, '[]') : isStartDateWithinLastWeek;\r\n        if (isDateCurrent) {\r\n            return 'current';\r\n        }\r\n        return 'future';\r\n    }\r\n\r\n    getConversationGroup(conversation: ConversationDTO): ChannelGroupCategory[] {\r\n        const groups: ChannelGroupCategory[] = [];\r\n\r\n        if (conversation.isHidden) {\r\n            groups.push('archivedChannels');\r\n            return groups;\r\n        }\r\n\r\n        if (conversation.isFavorite) {\r\n            groups.push('favoriteChannels');\r\n        }\r\n\r\n        if (isGroupChatDTO(conversation)) {\r\n            groups.push('groupChats');\r\n        } else if (isOneToOneChatDTO(conversation)) {\r\n            groups.push('directMessages');\r\n        } else {\r\n            const subTypeGroup = this.getCorrespondingChannelSubType(getAsChannelDTO(conversation)?.subType);\r\n            groups.push(subTypeGroup);\r\n        }\r\n\r\n        return groups;\r\n    }\r\n\r\n    getCorrespondingChannelSubType(channelSubType: ChannelSubType | undefined): ChannelGroupCategory {\r\n        const channelSubTypeMap: { [key in ChannelSubType]: ChannelGroupCategory } = {\r\n            [ChannelSubType.EXERCISE]: 'exerciseChannels',\r\n            [ChannelSubType.GENERAL]: 'generalChannels',\r\n            [ChannelSubType.LECTURE]: 'lectureChannels',\r\n            [ChannelSubType.EXAM]: 'examChannels',\r\n            [ChannelSubType.FEEDBACK_DISCUSSION]: 'feedbackDiscussion',\r\n        };\r\n        return channelSubType ? channelSubTypeMap[channelSubType] : 'generalChannels';\r\n    }\r\n\r\n    groupExercisesByDueDate(sortedExercises: Exercise[]): AccordionGroups {\r\n        const groupedExerciseGroups = cloneDeep(DEFAULT_UNIT_GROUPS) as AccordionGroups;\r\n\r\n        for (const exercise of sortedExercises) {\r\n            const exerciseGroup = this.getCorrespondingExerciseGroupByDate(exercise);\r\n            const exerciseCardItem = this.mapExerciseToSidebarCardElement(exercise);\r\n            groupedExerciseGroups[exerciseGroup].entityData.push(exerciseCardItem);\r\n        }\r\n\r\n        return groupedExerciseGroups;\r\n    }\r\n\r\n    groupLecturesByStartDate(sortedLectures: Lecture[]): AccordionGroups {\r\n        const groupedLectureGroups = cloneDeep(DEFAULT_UNIT_GROUPS) as AccordionGroups;\r\n\r\n        for (const lecture of sortedLectures) {\r\n            const lectureGroup = this.getCorrespondingLectureGroupByDate(lecture.startDate, lecture?.endDate);\r\n            const lectureCardItem = this.mapLectureToSidebarCardElement(lecture);\r\n            groupedLectureGroups[lectureGroup].entityData.push(lectureCardItem);\r\n        }\r\n\r\n        return groupedLectureGroups;\r\n    }\r\n\r\n    groupConversationsByChannelType(course: Course, conversations: ConversationDTO[], messagingEnabled: boolean): AccordionGroups {\r\n        const channelGroups = messagingEnabled ? { ...DEFAULT_CHANNEL_GROUPS, groupChats: { entityData: [] }, directMessages: { entityData: [] } } : DEFAULT_CHANNEL_GROUPS;\r\n        const groupedConversationGroups = cloneDeep(channelGroups) as AccordionGroups;\r\n\r\n        groupedConversationGroups.savedPosts = {\r\n            isHideCount: true,\r\n            entityData: [\r\n                {\r\n                    title: this.translate.instant('artemisApp.courseOverview.sidebar.progress'),\r\n                    id: SavedPostStatusMap.PROGRESS.toString(),\r\n                    type: ConversationType.CHANNEL,\r\n                    icon: faBookmark,\r\n                    size: 'S',\r\n                },\r\n                {\r\n                    title: this.translate.instant('artemisApp.courseOverview.sidebar.completed'),\r\n                    id: SavedPostStatusMap.COMPLETED.toString(),\r\n                    type: ConversationType.CHANNEL,\r\n                    icon: faSquareCheck,\r\n                    size: 'S',\r\n                },\r\n                {\r\n                    title: this.translate.instant('artemisApp.courseOverview.sidebar.archived'),\r\n                    id: SavedPostStatusMap.ARCHIVED.toString(),\r\n                    type: ConversationType.CHANNEL,\r\n                    icon: faBoxArchive,\r\n                    size: 'S',\r\n                },\r\n            ],\r\n        };\r\n\r\n        for (const conversation of conversations) {\r\n            const conversationGroups = this.getConversationGroup(conversation);\r\n            const conversationCardItem = this.mapConversationToSidebarCardElement(course, conversation);\r\n\r\n            for (const group of conversationGroups) {\r\n                groupedConversationGroups[group].entityData.push(conversationCardItem);\r\n            }\r\n        }\r\n\r\n        for (const group in groupedConversationGroups) {\r\n            groupedConversationGroups[group].entityData.sort((a, b) => {\r\n                const aIsFavorite = a.conversation?.isFavorite ? 1 : 0;\r\n                const bIsFavorite = b.conversation?.isFavorite ? 1 : 0;\r\n                return bIsFavorite - aIsFavorite;\r\n            });\r\n        }\r\n        return groupedConversationGroups;\r\n    }\r\n\r\n    mapLecturesToSidebarCardElements(lectures: Lecture[]) {\r\n        return lectures.map((lecture) => this.mapLectureToSidebarCardElement(lecture));\r\n    }\r\n    mapTutorialGroupsToSidebarCardElements(tutorialGroups: TutorialGroup[]) {\r\n        return tutorialGroups.map((tutorialGroup) => this.mapTutorialGroupToSidebarCardElement(tutorialGroup));\r\n    }\r\n\r\n    mapExercisesToSidebarCardElements(exercises: Exercise[]) {\r\n        return exercises.map((exercise) => this.mapExerciseToSidebarCardElement(exercise));\r\n    }\r\n    mapExamsToSidebarCardElements(exams: Exam[], studentExams?: StudentExam[]) {\r\n        return exams.map((exam, index) => this.mapExamToSidebarCardElement(exam, studentExams?.[index]));\r\n    }\r\n\r\n    mapConversationsToSidebarCardElements(course: Course, conversations: ConversationDTO[]) {\r\n        return conversations.map((conversation) => this.mapConversationToSidebarCardElement(course, conversation));\r\n    }\r\n\r\n    mapLectureToSidebarCardElement(lecture: Lecture): SidebarCardElement {\r\n        const lectureCardItem: SidebarCardElement = {\r\n            title: lecture.title ?? '',\r\n            id: lecture.id ?? '',\r\n            subtitleLeft: lecture.startDate?.format('MMM DD, YYYY') ?? this.translate.instant('artemisApp.courseOverview.sidebar.noDate'),\r\n            size: 'M',\r\n        };\r\n        return lectureCardItem;\r\n    }\r\n    mapTutorialGroupToSidebarCardElement(tutorialGroup: TutorialGroup): SidebarCardElement {\r\n        const tutorialGroupCardItem: SidebarCardElement = {\r\n            title: tutorialGroup.title ?? '',\r\n            id: tutorialGroup.id ?? '',\r\n            size: 'M',\r\n            subtitleLeft: tutorialGroup.nextSession?.start?.format('MMM DD, YYYY') ?? this.translate.instant('artemisApp.courseOverview.sidebar.noUpcomingSession'),\r\n            subtitleRight: this.getUtilization(tutorialGroup),\r\n        };\r\n        return tutorialGroupCardItem;\r\n    }\r\n\r\n    getUtilization(tutorialGroup: TutorialGroup): string {\r\n        if (tutorialGroup.capacity && tutorialGroup.averageAttendance) {\r\n            const utilization = Math.round((tutorialGroup.averageAttendance / tutorialGroup.capacity) * 100);\r\n            return this.translate.instant('artemisApp.entities.tutorialGroup.utilization') + ': ' + utilization + '%';\r\n        } else {\r\n            return tutorialGroup?.averageAttendance ? 'Ø ' + this.translate.instant('artemisApp.entities.tutorialGroup.attendance') + ': ' + tutorialGroup.averageAttendance : '';\r\n        }\r\n    }\r\n\r\n    mapExerciseToSidebarCardElement(exercise: Exercise): SidebarCardElement {\r\n        const exerciseCardItem: SidebarCardElement = {\r\n            title: exercise.title ?? '',\r\n            id: exercise.id ?? '',\r\n            subtitleLeft: exercise.dueDate?.format('MMM DD, YYYY') ?? this.translate.instant('artemisApp.courseOverview.sidebar.noDueDate'),\r\n            type: exercise.type,\r\n            icon: getIcon(exercise.type),\r\n            difficulty: exercise.difficulty,\r\n            exercise: exercise,\r\n            studentParticipation: exercise?.studentParticipations?.length\r\n                ? this.participationService.getSpecificStudentParticipation(exercise.studentParticipations, false)\r\n                : undefined,\r\n            size: 'M',\r\n        };\r\n        return exerciseCardItem;\r\n    }\r\n\r\n    mapExamToSidebarCardElement(exam: Exam, studentExam?: StudentExam): SidebarCardElement {\r\n        const examCardItem: SidebarCardElement = {\r\n            title: exam.title ?? '',\r\n            id: exam.id ?? '',\r\n            icon: faGraduationCap,\r\n            subtitleLeft: exam.moduleNumber ?? '',\r\n            startDateWithTime: exam.startDate,\r\n            workingTime: exam.workingTime,\r\n            studentExam: studentExam,\r\n            attainablePoints: exam.examMaxPoints ?? 0,\r\n            size: 'L',\r\n        };\r\n        return examCardItem;\r\n    }\r\n\r\n    getChannelIcon(conversation: ConversationDTO): IconDefinition {\r\n        const channelDTO = getAsChannelDTO(conversation);\r\n        if (channelDTO?.isAnnouncementChannel) {\r\n            return this.faBullhorn;\r\n        } else if (channelDTO?.isPublic) {\r\n            return this.faHashtag;\r\n        } else {\r\n            return this.faLock;\r\n        }\r\n    }\r\n\r\n    mapConversationToSidebarCardElement(course: Course, conversation: ConversationDTO): SidebarCardElement {\r\n        let isCurrent = false;\r\n        const channelDTO = getAsChannelDTO(conversation);\r\n        const subTypeRefId = channelDTO?.subTypeReferenceId;\r\n        const now = dayjs();\r\n        const oneAndHalfWeekBefore = now.subtract(1.5, 'week');\r\n        const oneAndHalfWeekLater = now.add(1.5, 'week');\r\n        let relevantDate = null;\r\n        if (subTypeRefId && course.exercises && channelDTO?.subType === 'exercise') {\r\n            const exercise = course.exercises.find((exercise) => exercise.id === subTypeRefId);\r\n            const relevantDates = [exercise?.releaseDate, exercise?.dueDate].filter(Boolean);\r\n            isCurrent = relevantDates.some((date) => dayjs(date).isBetween(oneAndHalfWeekBefore, oneAndHalfWeekLater, 'day', '[]'));\r\n        } else if (subTypeRefId && course.lectures && channelDTO?.subType === 'lecture') {\r\n            const lecture = course.lectures.find((lecture) => lecture.id === subTypeRefId);\r\n            relevantDate = lecture?.startDate || null;\r\n            isCurrent = relevantDate ? dayjs(relevantDate).isBetween(oneAndHalfWeekBefore, oneAndHalfWeekLater, 'day', '[]') : false;\r\n        } else if (subTypeRefId && course.exams && channelDTO?.subType === 'exam') {\r\n            const exam = course.exams.find((exam) => exam.id === subTypeRefId);\r\n            relevantDate = exam?.startDate || null;\r\n            isCurrent = relevantDate ? dayjs(relevantDate).isBetween(oneAndHalfWeekBefore, oneAndHalfWeekLater, 'day', '[]') : false;\r\n        }\r\n\r\n        const conversationCardItem: SidebarCardElement = {\r\n            title: this.conversationService.getConversationName(conversation) ?? '',\r\n            id: conversation.id ?? '',\r\n            type: conversation.type,\r\n            icon: this.getChannelIcon(conversation),\r\n            conversation: conversation,\r\n            size: 'S',\r\n            isCurrent: isCurrent,\r\n        };\r\n        return conversationCardItem;\r\n    }\r\n\r\n    sortLectures(lectures: Lecture[]): Lecture[] {\r\n        const sortedLecturesByStartDate = lectures.sort((a, b) => {\r\n            const startDateA = a.startDate ? a.startDate.valueOf() : dayjs().valueOf();\r\n            const startDateB = b.startDate ? b.startDate.valueOf() : dayjs().valueOf();\r\n            // If Due Date is identical or undefined sort by title\r\n            return startDateB - startDateA !== 0 ? startDateB - startDateA : this.sortByTitle(a, b);\r\n        });\r\n\r\n        return sortedLecturesByStartDate;\r\n    }\r\n\r\n    sortExercises(exercises: Exercise[]): Exercise[] {\r\n        const sortedExercisesByDueDate = exercises?.sort((a, b) => {\r\n            const dueDateA = getExerciseDueDate(a, this.studentParticipation(a))?.valueOf() ?? 0;\r\n            const dueDateB = getExerciseDueDate(b, this.studentParticipation(b))?.valueOf() ?? 0;\r\n            // If Due Date is identical or undefined sort by title\r\n            return dueDateB - dueDateA !== 0 ? dueDateB - dueDateA : this.sortByTitle(a, b);\r\n        });\r\n\r\n        return sortedExercisesByDueDate;\r\n    }\r\n    studentParticipation(exercise: Exercise): StudentParticipation | undefined {\r\n        return exercise.studentParticipations?.length ? exercise.studentParticipations[0] : undefined;\r\n    }\r\n\r\n    sortByTitle(a: Exercise | Lecture | Exam, b: Exercise | Lecture | Exam): number {\r\n        return a.title && b.title ? a.title.localeCompare(b.title) : 0;\r\n    }\r\n\r\n    getSidebarCollapseStateFromStorage(storageId: string): boolean {\r\n        const storedCollapseState: string | null = localStorage.getItem('sidebar.collapseState.' + storageId);\r\n        return storedCollapseState ? JSON.parse(storedCollapseState) : false;\r\n    }\r\n\r\n    setSidebarCollapseState(storageId: string, isCollapsed: boolean) {\r\n        localStorage.setItem('sidebar.collapseState.' + storageId, JSON.stringify(isCollapsed));\r\n    }\r\n}\r\n", "import { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { GroupChatDTO, isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { isOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\n\r\nexport function canAddUsersToConversation(conversation: ConversationDTO): boolean {\r\n    if (!conversation) {\r\n        return false;\r\n    }\r\n    const groupChatCheck = (groupChat: GroupChatDTO): boolean => !!groupChat.isMember;\r\n    const channelCheck = (channel: ChannelDTO): boolean => !channel.isCourseWide && hasChannelModerationRights(channel);\r\n\r\n    if (isChannelDTO(conversation)) {\r\n        return channelCheck(conversation);\r\n    } else if (isGroupChatDTO(conversation)) {\r\n        return groupChatCheck(conversation);\r\n    } else if (isOneToOneChatDTO(conversation)) {\r\n        return false;\r\n    } else {\r\n        throw new Error('Conversation type not supported');\r\n    }\r\n}\r\n\r\nexport function canCreateNewMessageInConversation(conversation: ConversationDTO): boolean {\r\n    if (!conversation) {\r\n        return false;\r\n    }\r\n    const groupChatCheck = (groupChat: GroupChatDTO): boolean => !!groupChat.isMember;\r\n    const oneToOneChatCheck = (oneToOneChat: ConversationDTO): boolean => {\r\n        return !!oneToOneChat.isMember;\r\n    };\r\n    const channelCheck = (channel: ChannelDTO): boolean =>\r\n        !!channel.isMember && !channel.isArchived && (!channel.isAnnouncementChannel || (channel.isAnnouncementChannel && !!channel.hasChannelModerationRights));\r\n\r\n    if (isChannelDTO(conversation)) {\r\n        return channelCheck(conversation);\r\n    } else if (isGroupChatDTO(conversation)) {\r\n        return groupChatCheck(conversation);\r\n    } else if (isOneToOneChatDTO(conversation)) {\r\n        return oneToOneChatCheck(conversation);\r\n    } else {\r\n        throw new Error('Conversation type not supported');\r\n    }\r\n}\r\n\r\nexport function canGrantChannelModeratorRole(channel: ChannelDTO): boolean {\r\n    return hasChannelModerationRights(channel);\r\n}\r\n\r\nexport function canRevokeChannelModeratorRole(channel: ChannelDTO): boolean {\r\n    return hasChannelModerationRights(channel);\r\n}\r\n\r\nexport function canRemoveUsersFromConversation(conversation: ConversationDTO): boolean {\r\n    if (!conversation) {\r\n        return false;\r\n    }\r\n    const groupChatCheck = (groupChat: GroupChatDTO): boolean => !!groupChat.isMember;\r\n    const channelCheck = (channel: ChannelDTO): boolean => !!channel.hasChannelModerationRights;\r\n\r\n    if (isChannelDTO(conversation)) {\r\n        return channelCheck(conversation);\r\n    } else if (isGroupChatDTO(conversation)) {\r\n        return groupChatCheck(conversation);\r\n    } else if (isOneToOneChatDTO(conversation)) {\r\n        return false;\r\n    } else {\r\n        throw new Error('Conversation type not supported');\r\n    }\r\n}\r\n\r\nexport function canLeaveConversation(conversation: ConversationDTO): boolean {\r\n    if (!conversation) {\r\n        return false;\r\n    }\r\n    // not possible to leave a conversation as not a member\r\n    if (!conversation.isMember) {\r\n        return false;\r\n    }\r\n    // the creator of a channel can not leave it\r\n    // if the channel is course-wide, you also cannot leave it\r\n    if (isChannelDTO(conversation) && (conversation?.isCreator || conversation?.isCourseWide)) {\r\n        return false;\r\n    }\r\n    if (isOneToOneChatDTO(conversation)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function canJoinChannel(channel: ChannelDTO): boolean {\r\n    if (!channel) {\r\n        return false;\r\n    }\r\n    // already joined channel\r\n    if (channel.isMember) {\r\n        return false;\r\n    }\r\n    // private channels only be self-joined by instructors which are the only non members who have channel moderation rights\r\n    if (hasChannelModerationRights(channel)) {\r\n        return true;\r\n    }\r\n    return !!channel.isPublic;\r\n}\r\n\r\nexport function canChangeChannelArchivalState(channel: ChannelDTO): boolean {\r\n    return hasChannelModerationRights(channel);\r\n}\r\n\r\nexport function canChangeChannelPrivacyState(channel: ChannelDTO): boolean {\r\n    return hasChannelModerationRights(channel);\r\n}\r\n\r\nexport function canDeleteChannel(course: Course, channelDTO: ChannelDTO): boolean {\r\n    const isCreator = channelDTO.isCreator;\r\n    const isInstructor = course.isAtLeastInstructor;\r\n    const isChannelModerator = channelDTO.isChannelModerator;\r\n    // tutorial group channels can not be deleted by a user\r\n    const isTutorialGroupChannel = !!channelDTO.tutorialGroupId || !!channelDTO.tutorialGroupTitle;\r\n\r\n    return !isTutorialGroupChannel && (!!isInstructor || !!(isChannelModerator && isCreator));\r\n}\r\n\r\nexport function canCreateChannel(course: Course): boolean {\r\n    return course?.isAtLeastTutor ?? false;\r\n}\r\n\r\nexport function canChangeChannelProperties(channel: ChannelDTO): boolean {\r\n    if (!channel) {\r\n        return false;\r\n    }\r\n    return !!channel.hasChannelModerationRights;\r\n}\r\n\r\nexport function canChangeGroupChatProperties(groupChat: GroupChatDTO): boolean {\r\n    if (!groupChat) {\r\n        return false;\r\n    }\r\n    return !!groupChat.isMember;\r\n}\r\n\r\nconst hasChannelModerationRights = (channel: ChannelDTO) => {\r\n    if (!channel) {\r\n        return false;\r\n    }\r\n    return !!channel.hasChannelModerationRights;\r\n};\r\n", "import { DifficultyFilterOption, ExerciseCategoryFilterOption, ExerciseFilterOptions, ExerciseTypeFilterOption, FilterOption, RangeFilter } from 'app/types/exercise-filter';\r\nimport { SidebarCardElement, SidebarData } from 'app/types/sidebar';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { DifficultyLevel, ExerciseType, getIcon } from 'app/entities/exercise.model';\r\nimport { getLatestResultOfStudentParticipation } from 'app/exercises/shared/participation/participation.utils';\r\nimport { roundToNextMultiple } from 'app/shared/util/utils';\r\n\r\nconst POINTS_STEP = 1;\r\nconst SCORE_THRESHOLD_TO_INCREASE_STEP = 20;\r\nconst SMALL_SCORE_STEP = 1;\r\nconst SCORE_STEP = 5;\r\n\r\nconst DEFAULT_DIFFICULTIES_FILTER: DifficultyFilterOption[] = [\r\n    { name: 'artemisApp.exercise.easy', value: DifficultyLevel.EASY, checked: false },\r\n    { name: 'artemisApp.exercise.medium', value: DifficultyLevel.MEDIUM, checked: false },\r\n    { name: 'artemisApp.exercise.hard', value: DifficultyLevel.HARD, checked: false },\r\n];\r\n\r\nconst DEFAULT_EXERCISE_TYPES_FILTER: ExerciseTypeFilterOption[] = [\r\n    { name: 'artemisApp.courseStatistics.programming', value: ExerciseType.PROGRAMMING, checked: false, icon: getIcon(ExerciseType.PROGRAMMING) },\r\n    { name: 'artemisApp.courseStatistics.quiz', value: ExerciseType.QUIZ, checked: false, icon: getIcon(ExerciseType.QUIZ) },\r\n    { name: 'artemisApp.courseStatistics.modeling', value: ExerciseType.MODELING, checked: false, icon: getIcon(ExerciseType.MODELING) },\r\n    { name: 'artemisApp.courseStatistics.text', value: ExerciseType.TEXT, checked: false, icon: getIcon(ExerciseType.TEXT) },\r\n    { name: 'artemisApp.courseStatistics.file-upload', value: ExerciseType.FILE_UPLOAD, checked: false, icon: getIcon(ExerciseType.FILE_UPLOAD) },\r\n];\r\n\r\nfunction getAvailableCategoriesAsFilterOptions(sidebarData?: SidebarData): ExerciseCategoryFilterOption[] | undefined {\r\n    const sidebarElementsWithExerciseCategory: SidebarCardElement[] | undefined = sidebarData?.ungroupedData?.filter(\r\n        (sidebarElement: SidebarCardElement) => sidebarElement.exercise?.categories !== undefined,\r\n    );\r\n    const availableCategories: ExerciseCategory[] | undefined = sidebarElementsWithExerciseCategory?.flatMap(\r\n        (sidebarElement: SidebarCardElement) => sidebarElement.exercise?.categories || [],\r\n    );\r\n\r\n    // noinspection UnnecessaryLocalVariableJS: not inlined because the variable name improves readability\r\n    const availableCategoriesAsFilterOptions: ExerciseCategoryFilterOption[] | undefined = availableCategories?.map((category: ExerciseCategory) => ({\r\n        category: category,\r\n        searched: false,\r\n    }));\r\n    return availableCategoriesAsFilterOptions;\r\n}\r\n\r\nfunction getExerciseCategoryFilterOptionsWithoutDuplicates(exerciseCategoryFilterOptions?: ExerciseCategoryFilterOption[]): ExerciseCategoryFilterOption[] | undefined {\r\n    return exerciseCategoryFilterOptions?.reduce((unique: ExerciseCategoryFilterOption[], item: ExerciseCategoryFilterOption) => {\r\n        if (!unique.some((uniqueItem) => uniqueItem.category.equals(item.category))) {\r\n            unique.push(item);\r\n        }\r\n        return unique;\r\n    }, []);\r\n}\r\n\r\nfunction sortExerciseCategoryFilterOptionsSortedByName(exerciseCategoryFilterOptions?: ExerciseCategoryFilterOption[]): ExerciseCategoryFilterOption[] {\r\n    return exerciseCategoryFilterOptions?.sort((categoryFilterOptionsA, categoryFilterOptionB) => categoryFilterOptionsA.category.compare(categoryFilterOptionB.category)) ?? [];\r\n}\r\n\r\n/**\r\n * @param exerciseFilters that might already be defined for the course sidebar\r\n * @param sidebarData that contains the exercises of a course and their information\r\n *\r\n * @returns already defined category filter options if they exist, otherwise the category filter options based on the sidebar data\r\n */\r\nexport function getExerciseCategoryFilterOptions(sidebarData?: SidebarData, exerciseFilters?: ExerciseFilterOptions): FilterOption<ExerciseCategoryFilterOption> {\r\n    if (exerciseFilters?.categoryFilter) {\r\n        return exerciseFilters?.categoryFilter;\r\n    }\r\n\r\n    const availableCategoriesAsFilterOptions = getAvailableCategoriesAsFilterOptions(sidebarData);\r\n    const selectableCategoryFilterOptions = getExerciseCategoryFilterOptionsWithoutDuplicates(availableCategoriesAsFilterOptions);\r\n    const sortedCategoryFilterOptions = sortExerciseCategoryFilterOptionsSortedByName(selectableCategoryFilterOptions);\r\n\r\n    const isDisplayed = !!sortedCategoryFilterOptions.length;\r\n    return { isDisplayed: isDisplayed, options: selectableCategoryFilterOptions ?? [] };\r\n}\r\n\r\n/**\r\n * @param exerciseFilters that might already be defined for the course sidebar\r\n * @param sidebarData that contains the exercises of a course and their information\r\n *\r\n * @returns already defined exercise type filter options if they exist, otherwise the exercise type filter options based on the sidebar data\r\n */\r\nexport function getExerciseTypeFilterOptions(sidebarData?: SidebarData, exerciseFilters?: ExerciseFilterOptions): FilterOption<ExerciseTypeFilterOption> {\r\n    if (exerciseFilters?.exerciseTypesFilter) {\r\n        return exerciseFilters?.exerciseTypesFilter;\r\n    }\r\n\r\n    const existingExerciseTypes = sidebarData?.ungroupedData\r\n        ?.filter((sidebarElement: SidebarCardElement) => sidebarElement.type !== undefined)\r\n        .map((sidebarElement: SidebarCardElement) => sidebarElement.type);\r\n\r\n    const availableTypeFilters = DEFAULT_EXERCISE_TYPES_FILTER?.filter((exerciseType) => existingExerciseTypes?.includes(exerciseType.value));\r\n\r\n    return { isDisplayed: availableTypeFilters.length > 1, options: availableTypeFilters };\r\n}\r\n\r\n/**\r\n * @param exerciseFilters that might already be defined for the course sidebar\r\n * @param sidebarData that contains the exercises of a course and their information\r\n *\r\n * @returns already defined difficulty filter options if they exist, otherwise the difficulty filter options based on the sidebar data\r\n */\r\nexport function getExerciseDifficultyFilterOptions(sidebarData?: SidebarData, exerciseFilters?: ExerciseFilterOptions): FilterOption<DifficultyFilterOption> {\r\n    if (exerciseFilters?.difficultyFilter) {\r\n        return exerciseFilters.difficultyFilter;\r\n    }\r\n\r\n    const existingDifficulties = sidebarData?.ungroupedData\r\n        ?.filter((sidebarElement: SidebarCardElement) => sidebarElement.difficulty !== undefined)\r\n        .map((sidebarElement: SidebarCardElement) => sidebarElement.difficulty);\r\n\r\n    const availableDifficultyFilters = DEFAULT_DIFFICULTIES_FILTER?.filter((difficulty) => existingDifficulties?.includes(difficulty.value));\r\n\r\n    return { isDisplayed: !!availableDifficultyFilters.length, options: availableDifficultyFilters };\r\n}\r\n\r\nexport function isRangeFilterApplied(rangeFilter?: RangeFilter): boolean {\r\n    if (!rangeFilter?.filter) {\r\n        return false;\r\n    }\r\n\r\n    const filter = rangeFilter.filter;\r\n    const isExcludingMinValues = filter.selectedMin !== filter.generalMin;\r\n    const isExcludingMaxValues = filter.selectedMax !== filter.generalMax;\r\n    return isExcludingMinValues || isExcludingMaxValues;\r\n}\r\n\r\nfunction getUpdatedMinAndMaxValues(minValue: number, maxValue: number, currentMaxValue: number) {\r\n    let updatedMinValue = minValue;\r\n    let updatedMaxValue = maxValue;\r\n\r\n    if (currentMaxValue < minValue) {\r\n        updatedMinValue = currentMaxValue;\r\n    }\r\n    if (currentMaxValue > maxValue) {\r\n        updatedMaxValue = currentMaxValue;\r\n    }\r\n\r\n    return { updatedMinValue, updatedMaxValue };\r\n}\r\n\r\n/**\r\n * The calculation for points and score are intentionally mixed into one method to reduce the number of iterations over the sidebar data.\r\n * @param sidebarData\r\n */\r\nfunction calculateMinAndMaxForPointsAndScore(sidebarData: SidebarData) {\r\n    let minAchievablePoints = Infinity;\r\n    let maxAchievablePoints = -Infinity;\r\n\r\n    let minAchievedScore = Infinity;\r\n    let maxAchievedScore = -Infinity;\r\n\r\n    sidebarData.ungroupedData?.forEach((sidebarElement: SidebarCardElement) => {\r\n        if (sidebarElement.exercise?.maxPoints) {\r\n            const currentExerciseMaxPoints = sidebarElement.exercise.maxPoints;\r\n\r\n            const { updatedMinValue, updatedMaxValue } = getUpdatedMinAndMaxValues(minAchievablePoints, maxAchievablePoints, currentExerciseMaxPoints);\r\n            minAchievablePoints = updatedMinValue;\r\n            maxAchievablePoints = updatedMaxValue;\r\n\r\n            if (sidebarElement.studentParticipation) {\r\n                const currentExerciseAchievedScore = getLatestResultOfStudentParticipation(sidebarElement.studentParticipation, true)?.score;\r\n\r\n                if (currentExerciseAchievedScore !== undefined) {\r\n                    const { updatedMinValue, updatedMaxValue } = getUpdatedMinAndMaxValues(minAchievedScore, maxAchievedScore, currentExerciseAchievedScore);\r\n                    minAchievedScore = updatedMinValue;\r\n                    maxAchievedScore = updatedMaxValue;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return { minAchievablePoints, maxAchievablePoints, minAchievedScore, maxAchievedScore };\r\n}\r\n\r\n/**\r\n * **Rounds the min and max values for achievable points and achieved score to the next multiple of the step.\r\n * The step {@link POINTS_STEP}, and {@link SCORE_STEP} or {@link SMALL_SCORE_STEP} are the selectable values for the range filter.**\r\n * <br>\r\n * <i>For the **score filter**, the step is increased if we have more than 20 values between the min and max value,\r\n * as up to 100 values are theoretically possible.<br>\r\n * For the **achievable points filter**, the step is always 1 as exercises usually have between 1 and 15 points,\r\n * so we do not need to increase the step and thereby limit accuracy of filter options.</i>\r\n *\r\n * @param minAchievablePoints\r\n * @param maxAchievablePoints\r\n * @param minAchievedScore\r\n * @param maxAchievedScore\r\n */\r\nfunction roundRangeFilterMinAndMaxValues(minAchievablePoints: number, maxAchievablePoints: number, minAchievedScore: number, maxAchievedScore: number) {\r\n    const roundUp = true;\r\n    const roundDown = false;\r\n    const minAchievablePointsRounded = roundToNextMultiple(minAchievablePoints, POINTS_STEP, roundDown);\r\n    const maxAchievablePointsRounded = roundToNextMultiple(maxAchievablePoints, POINTS_STEP, roundUp);\r\n\r\n    let minAchievedScoreRounded;\r\n    let maxAchievedScoreRounded;\r\n\r\n    if (maxAchievedScore > SCORE_THRESHOLD_TO_INCREASE_STEP) {\r\n        minAchievedScoreRounded = roundToNextMultiple(minAchievedScore, SCORE_STEP, roundDown);\r\n        maxAchievedScoreRounded = roundToNextMultiple(maxAchievedScore, SCORE_STEP, roundUp);\r\n    } else {\r\n        minAchievedScoreRounded = roundToNextMultiple(minAchievedScore, SMALL_SCORE_STEP, roundDown);\r\n        maxAchievedScoreRounded = roundToNextMultiple(maxAchievedScore, SMALL_SCORE_STEP, roundUp);\r\n    }\r\n\r\n    return { minAchievablePointsRounded, maxAchievablePointsRounded, minAchievedScoreRounded, maxAchievedScoreRounded };\r\n}\r\n\r\nfunction calculateAchievablePointsFilterOptions(sidebarData: SidebarData): { achievablePoints?: RangeFilter; achievedScore?: RangeFilter } {\r\n    const { minAchievablePoints, maxAchievablePoints, minAchievedScore, maxAchievedScore } = calculateMinAndMaxForPointsAndScore(sidebarData);\r\n\r\n    const { minAchievablePointsRounded, maxAchievablePointsRounded, minAchievedScoreRounded, maxAchievedScoreRounded } = roundRangeFilterMinAndMaxValues(\r\n        minAchievablePoints,\r\n        maxAchievablePoints,\r\n        minAchievedScore,\r\n        maxAchievedScore,\r\n    );\r\n\r\n    return {\r\n        achievablePoints: {\r\n            isDisplayed: minAchievablePointsRounded < maxAchievablePointsRounded,\r\n            filter: {\r\n                generalMin: minAchievablePointsRounded,\r\n                generalMax: maxAchievablePointsRounded,\r\n                selectedMin: minAchievablePointsRounded,\r\n                selectedMax: maxAchievablePointsRounded,\r\n                step: POINTS_STEP,\r\n            },\r\n        },\r\n        achievedScore: {\r\n            isDisplayed: minAchievedScoreRounded < maxAchievedScoreRounded && minAchievedScoreRounded !== Infinity,\r\n            filter: {\r\n                generalMin: minAchievedScoreRounded,\r\n                generalMax: maxAchievedScoreRounded,\r\n                selectedMin: minAchievedScoreRounded,\r\n                selectedMax: maxAchievedScoreRounded,\r\n                step: maxAchievedScoreRounded <= SCORE_THRESHOLD_TO_INCREASE_STEP ? SMALL_SCORE_STEP : SCORE_STEP,\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\n/**\r\n * @param exerciseFilters that might already be defined for the course sidebar\r\n * @param sidebarData that contains the exercises of a course and their information\r\n *\r\n * @returns already defined achievable points and achieved score filter options if they exist, otherwise the achievable points and achieved score filter options based on the sidebar data\r\n */\r\nexport function getAchievablePointsAndAchievedScoreFilterOptions(\r\n    sidebarData?: SidebarData,\r\n    exerciseFilters?: ExerciseFilterOptions,\r\n): {\r\n    achievablePoints?: RangeFilter;\r\n    achievedScore?: RangeFilter;\r\n} {\r\n    if (!sidebarData?.ungroupedData) {\r\n        return { achievablePoints: undefined, achievedScore: undefined };\r\n    }\r\n\r\n    const isPointsFilterApplied = isRangeFilterApplied(exerciseFilters?.achievablePoints);\r\n    const isScoreFilterApplied = isRangeFilterApplied(exerciseFilters?.achievedScore);\r\n\r\n    const isRecalculatingFilterOptionsRequired = isPointsFilterApplied || isScoreFilterApplied || !exerciseFilters?.achievablePoints || !exerciseFilters?.achievedScore;\r\n    if (!isRecalculatingFilterOptionsRequired) {\r\n        // the scores might change when we work on exercises, so we re-calculate the filter options (but only if the filter is actually applied)\r\n        return { achievablePoints: exerciseFilters?.achievablePoints, achievedScore: exerciseFilters?.achievedScore };\r\n    }\r\n\r\n    return calculateAchievablePointsFilterOptions(sidebarData);\r\n}\r\n", "import { SidebarCardElement } from 'app/types/sidebar';\r\nimport { DifficultyLevel, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { FilterDetails, RangeFilter } from 'app/types/exercise-filter';\r\nimport { getLatestResultOfStudentParticipation } from 'app/exercises/shared/participation/participation.utils';\r\n\r\nexport function satisfiesDifficultyFilter(sidebarElement: SidebarCardElement, searchedDifficulties?: DifficultyLevel[]): boolean {\r\n    if (!searchedDifficulties?.length) {\r\n        return true;\r\n    }\r\n    if (!sidebarElement.difficulty) {\r\n        return false;\r\n    }\r\n\r\n    return searchedDifficulties.includes(sidebarElement.difficulty);\r\n}\r\n\r\nexport function satisfiesTypeFilter(sidebarElement: SidebarCardElement, searchedTypes?: ExerciseType[]): boolean {\r\n    if (!searchedTypes?.length) {\r\n        return true;\r\n    }\r\n    if (!sidebarElement.exercise?.type) {\r\n        return false;\r\n    }\r\n\r\n    return searchedTypes.includes(sidebarElement.exercise.type);\r\n}\r\n\r\nexport function satisfiesCategoryFilter(sidebarElement: SidebarCardElement, selectedCategories: ExerciseCategory[]): boolean {\r\n    if (!selectedCategories.length) {\r\n        return true;\r\n    }\r\n    if (!sidebarElement?.exercise?.categories) {\r\n        return false;\r\n    }\r\n\r\n    // noinspection UnnecessaryLocalVariableJS: not inlined because the variable name improves readability\r\n    const isAnyExerciseCategoryMatchingASelectedCategory = sidebarElement.exercise.categories.some((category) =>\r\n        selectedCategories.some((selectedCategory) => selectedCategory.equals(category)),\r\n    );\r\n    return isAnyExerciseCategoryMatchingASelectedCategory;\r\n}\r\n\r\nexport function satisfiesScoreFilter(sidebarElement: SidebarCardElement, isFilterApplied: boolean, achievedScoreFilter?: RangeFilter): boolean {\r\n    if (!isFilterApplied || !achievedScoreFilter) {\r\n        return true;\r\n    }\r\n\r\n    const latestResult = getLatestResultOfStudentParticipation(sidebarElement.studentParticipation, true);\r\n    if (!latestResult?.score) {\r\n        return achievedScoreFilter.filter.selectedMin === 0;\r\n    }\r\n\r\n    const isScoreInSelectedMinRange = latestResult.score >= achievedScoreFilter.filter.selectedMin;\r\n    const isScoreInSelectedMaxRange = latestResult.score <= achievedScoreFilter.filter.selectedMax;\r\n\r\n    return isScoreInSelectedMinRange && isScoreInSelectedMaxRange;\r\n}\r\n\r\nexport function satisfiesPointsFilter(sidebarElement: SidebarCardElement, isPointsFilterApplied: boolean, achievablePointsFilter?: RangeFilter): boolean {\r\n    if (!isPointsFilterApplied || !achievablePointsFilter) {\r\n        return true;\r\n    }\r\n\r\n    /** {@link Exercise.maxPoints} must be in the range 1 - 9999 */\r\n    if (!sidebarElement.exercise?.maxPoints) {\r\n        return false;\r\n    }\r\n\r\n    const isAchievablePointsInSelectedMinRange = sidebarElement.exercise.maxPoints >= achievablePointsFilter.filter.selectedMin;\r\n    const isAchievablePointsInSelectedMaxRange = sidebarElement.exercise.maxPoints <= achievablePointsFilter.filter.selectedMax;\r\n\r\n    return isAchievablePointsInSelectedMinRange && isAchievablePointsInSelectedMaxRange;\r\n}\r\n\r\nexport function satisfiesFilters(sidebarElement: SidebarCardElement, filterDetails: FilterDetails) {\r\n    return (\r\n        satisfiesCategoryFilter(sidebarElement, filterDetails.selectedCategories) &&\r\n        satisfiesDifficultyFilter(sidebarElement, filterDetails.searchedDifficulties) &&\r\n        satisfiesTypeFilter(sidebarElement, filterDetails.searchedTypes) &&\r\n        satisfiesScoreFilter(sidebarElement, filterDetails.isScoreFilterApplied, filterDetails.achievedScore) &&\r\n        satisfiesPointsFilter(sidebarElement, filterDetails.isPointsFilterApplied, filterDetails.achievablePoints)\r\n    );\r\n}\r\n", "import { Component, EventEmitter, OnInit, Output, ViewChild, inject } from '@angular/core';\r\nimport { NgbActiveModal, NgbModule, NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\r\nimport { faBackward, faFilter } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SidebarCardElement, SidebarData } from 'app/types/sidebar';\r\nimport { Observable, OperatorFunction, Subject, merge } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\r\nimport { CustomExerciseCategoryBadgeComponent } from 'app/shared/exercise-categories/custom-exercise-category-badge/custom-exercise-category-badge.component';\r\nimport { RangeSliderComponent } from 'app/shared/range-slider/range-slider.component';\r\nimport {\r\n    DifficultyFilterOption,\r\n    ExerciseCategoryFilterOption,\r\n    ExerciseFilterOptions,\r\n    ExerciseFilterResults,\r\n    ExerciseTypeFilterOption,\r\n    FilterDetails,\r\n    FilterOption,\r\n    RangeFilter,\r\n} from 'app/types/exercise-filter';\r\nimport { satisfiesFilters } from 'app/shared/exercise-filter/exercise-filter-modal.helper';\r\nimport { DifficultyLevel, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { isRangeFilterApplied } from 'app/shared/sidebar/sidebar.helper';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-filter-modal',\r\n    templateUrl: './exercise-filter-modal.component.html',\r\n    styleUrls: ['./exercise-filter-modal.component.scss'],\r\n    imports: [FormsModule, ReactiveFormsModule, FontAwesomeModule, CustomExerciseCategoryBadgeComponent, RangeSliderComponent, NgbModule, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class ExerciseFilterModalComponent implements OnInit {\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    readonly faFilter = faFilter;\r\n    readonly faBackward = faBackward;\r\n\r\n    @Output() filterApplied = new EventEmitter<ExerciseFilterResults>();\r\n\r\n    @ViewChild('categoriesFilterSelection', { static: false }) instance: NgbTypeahead;\r\n\r\n    selectedCategoryOptions: ExerciseCategoryFilterOption[] = [];\r\n    selectableCategoryOptions: ExerciseCategoryFilterOption[] = [];\r\n\r\n    noFiltersAvailable = false;\r\n\r\n    focus$ = new Subject<string>();\r\n    click$ = new Subject<string>();\r\n\r\n    form: FormGroup;\r\n\r\n    model?: string;\r\n\r\n    sidebarData?: SidebarData;\r\n\r\n    categoryFilter?: FilterOption<ExerciseCategoryFilterOption>;\r\n    typeFilter?: FilterOption<ExerciseTypeFilterOption>;\r\n    difficultyFilter?: FilterOption<DifficultyFilterOption>;\r\n    achievablePoints?: RangeFilter;\r\n    achievedScore?: RangeFilter;\r\n\r\n    exerciseFilters?: ExerciseFilterOptions;\r\n\r\n    ngOnInit() {\r\n        this.categoryFilter = this.exerciseFilters?.categoryFilter;\r\n        this.typeFilter = this.exerciseFilters?.exerciseTypesFilter;\r\n        this.difficultyFilter = this.exerciseFilters?.difficultyFilter;\r\n        this.achievablePoints = this.exerciseFilters?.achievablePoints;\r\n        this.achievedScore = this.exerciseFilters?.achievedScore;\r\n\r\n        this.noFiltersAvailable = !(\r\n            this.categoryFilter?.isDisplayed ||\r\n            this.typeFilter?.isDisplayed ||\r\n            this.difficultyFilter?.isDisplayed ||\r\n            this.achievedScore?.isDisplayed ||\r\n            this.achievablePoints?.isDisplayed\r\n        );\r\n\r\n        this.updateCategoryOptionsStates();\r\n    }\r\n\r\n    closeModal(): void {\r\n        this.activeModal.close();\r\n    }\r\n\r\n    search: OperatorFunction<string, readonly ExerciseCategoryFilterOption[]> = (text$: Observable<string>) => {\r\n        const debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());\r\n        const clicksWithClosedPopup$ = this.click$.pipe(filter(() => !this.instance.isPopupOpen()));\r\n        const inputFocus$ = this.focus$;\r\n\r\n        return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(\r\n            map((term) =>\r\n                term === ''\r\n                    ? this.selectableCategoryOptions\r\n                    : this.selectableCategoryOptions.filter((categoryFilter: ExerciseCategoryFilterOption) => {\r\n                          if (categoryFilter.category.category !== undefined) {\r\n                              return categoryFilter.category.category?.toLowerCase().indexOf(term.toLowerCase()) > -1;\r\n                          }\r\n\r\n                          return false;\r\n                      }),\r\n            ),\r\n        );\r\n    };\r\n    resultFormatter = (exerciseCategory: ExerciseCategoryFilterOption) => exerciseCategory.category.category ?? '';\r\n\r\n    onSelectItem(event: any) {\r\n        const isEnterPressedForNotExistingItem = !event.item;\r\n        if (isEnterPressedForNotExistingItem) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n\r\n        event.preventDefault(); // otherwise clearing the input field will not work https://stackoverflow.com/questions/39783936/how-to-clear-the-typeahead-input-after-a-result-is-selected\r\n        const filterOption: ExerciseCategoryFilterOption = event.item;\r\n        filterOption.searched = true;\r\n        this.updateCategoryOptionsStates();\r\n        this.model = undefined; // Clear the input field after selection\r\n    }\r\n\r\n    removeItem(item: ExerciseCategoryFilterOption): () => void {\r\n        return () => {\r\n            item.searched = false;\r\n            this.updateCategoryOptionsStates();\r\n        };\r\n    }\r\n\r\n    applyFilter(): void {\r\n        if (!this.sidebarData?.groupedData) {\r\n            return;\r\n        }\r\n\r\n        const appliedFilterDetails = this.getAppliedFilterDetails();\r\n        for (const groupedDataKey in this.sidebarData.groupedData) {\r\n            this.sidebarData.groupedData[groupedDataKey].entityData = this.sidebarData.groupedData[groupedDataKey].entityData.filter((sidebarElement) =>\r\n                satisfiesFilters(sidebarElement, appliedFilterDetails),\r\n            );\r\n        }\r\n        this.sidebarData.ungroupedData = this.sidebarData.ungroupedData?.filter((sidebarElement: SidebarCardElement) => satisfiesFilters(sidebarElement, appliedFilterDetails));\r\n\r\n        this.filterApplied.emit({\r\n            filteredSidebarData: this.sidebarData,\r\n            appliedExerciseFilters: this.exerciseFilters,\r\n            isFilterActive: this.isFilterActive(appliedFilterDetails),\r\n        });\r\n\r\n        this.closeModal();\r\n    }\r\n\r\n    private getAppliedFilterDetails(): FilterDetails {\r\n        return {\r\n            searchedTypes: this.getSearchedTypes(),\r\n            selectedCategories: this.getSelectedCategories(),\r\n            searchedDifficulties: this.getSearchedDifficulties(),\r\n            isScoreFilterApplied: isRangeFilterApplied(this.achievedScore),\r\n            isPointsFilterApplied: isRangeFilterApplied(this.achievablePoints),\r\n            achievedScore: this.achievedScore,\r\n            achievablePoints: this.achievablePoints,\r\n        };\r\n    }\r\n\r\n    private getSearchedTypes(): ExerciseType[] | undefined {\r\n        return this.typeFilter?.options.filter((type) => type.checked).map((type) => type.value);\r\n    }\r\n\r\n    private getSelectedCategories(): ExerciseCategory[] {\r\n        return this.selectedCategoryOptions\r\n            .filter((categoryOption: ExerciseCategoryFilterOption) => categoryOption.searched)\r\n            .map((categoryOption: ExerciseCategoryFilterOption) => categoryOption.category);\r\n    }\r\n\r\n    private getSearchedDifficulties(): DifficultyLevel[] | undefined {\r\n        return this.difficultyFilter?.options.filter((difficulty) => difficulty.checked).map((difficulty) => difficulty.value);\r\n    }\r\n\r\n    private isFilterActive(filterDetails: FilterDetails): boolean {\r\n        return (\r\n            !!filterDetails.selectedCategories.length ||\r\n            !!filterDetails.searchedTypes?.length ||\r\n            !!filterDetails.searchedDifficulties?.length ||\r\n            filterDetails.isScoreFilterApplied ||\r\n            filterDetails.isPointsFilterApplied\r\n        );\r\n    }\r\n\r\n    clearFilter() {\r\n        this.categoryFilter?.options.forEach((categoryOption) => (categoryOption.searched = false));\r\n        this.typeFilter?.options.forEach((typeOption) => (typeOption.checked = false));\r\n        this.difficultyFilter?.options.forEach((difficultyOption) => (difficultyOption.checked = false));\r\n\r\n        this.resetRangeFilter(this.achievedScore);\r\n        this.resetRangeFilter(this.achievablePoints);\r\n\r\n        this.applyFilter();\r\n    }\r\n\r\n    private resetRangeFilter(rangeFilter?: RangeFilter) {\r\n        if (!rangeFilter?.filter) {\r\n            return;\r\n        }\r\n\r\n        const filter = rangeFilter.filter;\r\n        filter.selectedMin = filter.generalMin;\r\n        filter.selectedMax = filter.generalMax;\r\n    }\r\n\r\n    private updateCategoryOptionsStates() {\r\n        this.selectedCategoryOptions = this.getUpdatedSelectedCategoryOptions();\r\n        this.selectableCategoryOptions = this.getSelectableCategoryOptions();\r\n    }\r\n\r\n    private getUpdatedSelectedCategoryOptions(): ExerciseCategoryFilterOption[] {\r\n        return this.categoryFilter?.options.filter((categoryFilter) => categoryFilter.searched) ?? [];\r\n    }\r\n\r\n    private getSelectableCategoryOptions(): ExerciseCategoryFilterOption[] {\r\n        return this.categoryFilter?.options.filter((categoryFilter) => !categoryFilter.searched) ?? [];\r\n    }\r\n}\r\n", "<form name=\"exerciseFilterForm\" (ngSubmit)=\"applyFilter()\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <fa-icon [icon]=\"faFilter\" />\r\n            <span jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.modalTitle\"></span>\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"closeModal()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"form-group\">\r\n            @if (noFiltersAvailable) {\r\n                <div>\r\n                    <span jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.noFilterAvailable\"></span>\r\n                </div>\r\n            }\r\n\r\n            @if (selectableCategoryOptions.length || selectedCategoryOptions.length) {\r\n                <label for=\"exercise-categories-filter-selection\" class=\"form-control-label h6\" jhiTranslate=\"artemisApp.exercise.categories\"></label>\r\n\r\n                <input\r\n                    id=\"exercise-categories-filter-selection\"\r\n                    type=\"text\"\r\n                    class=\"form-control mb-2\"\r\n                    name=\"category-filter-selection\"\r\n                    [(ngModel)]=\"model\"\r\n                    [ngbTypeahead]=\"search\"\r\n                    [placeholder]=\"\r\n                        (!selectableCategoryOptions.length ? 'artemisApp.courseOverview.exerciseFilter.noMoreOptions' : 'artemisApp.exercise.selectCategories') | artemisTranslate\r\n                    \"\r\n                    (focus)=\"focus$.next($any($event).target.value)\"\r\n                    (click)=\"click$.next($any($event).target.value)\"\r\n                    #categoriesFilterSelection=\"ngbTypeahead\"\r\n                    (selectItem)=\"onSelectItem($event)\"\r\n                    [resultFormatter]=\"resultFormatter\"\r\n                    (keydown.enter)=\"onSelectItem($event)\"\r\n                    [disabled]=\"!selectableCategoryOptions.length\"\r\n                />\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"d-flex flex-row flex-wrap\">\r\n                        @for (categoryFilterOption of selectedCategoryOptions; track categoryFilterOption) {\r\n                            <div class=\"p-1\">\r\n                                <jhi-custom-exercise-category-badge\r\n                                    [category]=\"categoryFilterOption.category\"\r\n                                    [displayRemoveButton]=\"true\"\r\n                                    [onClick]=\"removeItem(categoryFilterOption)\"\r\n                                    [fontSize]=\"'small'\"\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n        @if (typeFilter?.isDisplayed) {\r\n            <div class=\"form-group\">\r\n                <label for=\"exercise-type-filter-selection\" class=\"form-control-label h6\" jhiTranslate=\"artemisApp.ratingList.exerciseType\"></label>\r\n                <div id=\"exercise-type-filter-selection\">\r\n                    @for (typeFilter of typeFilter!.options; track typeFilter) {\r\n                        <div class=\"form-check form-check-inline no-left-margin-padding\">\r\n                            <label class=\"pointer\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"typeFilter.checked\" [name]=\"typeFilter.value\" class=\"pointer\" />\r\n                                <fa-icon [icon]=\"typeFilter.icon\" class=\"ms-2\" />\r\n                                <span [jhiTranslate]=\"typeFilter.name\" class=\"ms-1\"></span>\r\n                            </label>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n\r\n        <!--    On typescript version 5.5.4 the explicit check for difficultyFilter is needed,\r\n        as otherwise typescript thinks it could be undefined in the loop (the client would not start in this case) -->\r\n        @if (difficultyFilter?.isDisplayed && difficultyFilter) {\r\n            <div class=\"form-group\">\r\n                <label for=\"difficulty-filter-selection\" class=\"form-control-label h6\" jhiTranslate=\"artemisApp.exercise.difficulty\"></label>\r\n                <div id=\"difficulty-filter-selection\">\r\n                    @for (difficultyFilterOption of difficultyFilter.options; track difficultyFilterOption) {\r\n                        <div class=\"form-check form-check-inline no-left-margin-padding\">\r\n                            <label class=\"pointer\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"difficultyFilterOption.checked\" [name]=\"difficultyFilterOption.value\" class=\"pointer\" />\r\n                                <span [jhiTranslate]=\"difficultyFilterOption.name\" class=\"ms-1\"></span>\r\n                            </label>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n\r\n        <!--    On typescript version 5.5.4 the explicit check for achievedScore is needed,\r\n        as otherwise typescript thinks achievedScore could be undefined (the client would not start in this case) -->\r\n        @if (achievedScore && achievedScore?.isDisplayed) {\r\n            <div class=\"form-group\">\r\n                <label class=\"form-control-label h6\" for=\"achieved-score-range-slider\" jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.achievedScore\"></label>\r\n                <jhi-range-slider\r\n                    id=\"achieved-score-range-slider\"\r\n                    [generalMinValue]=\"achievedScore.filter.generalMin\"\r\n                    [generalMaxValue]=\"achievedScore.filter.generalMax\"\r\n                    [(selectedMinValue)]=\"achievedScore.filter.selectedMin\"\r\n                    [(selectedMaxValue)]=\"achievedScore.filter.selectedMax\"\r\n                    [step]=\"achievedScore.filter.step\"\r\n                    [labelSymbol]=\"'%'\"\r\n                />\r\n            </div>\r\n        }\r\n\r\n        <!--    On typescript version 5.5.4 the explicit check for achievablePoints is needed,\r\n        as otherwise typescript thinks achievablePoints could be undefined (the client would not start in this case) -->\r\n        @if (achievablePoints && achievablePoints.isDisplayed) {\r\n            <div class=\"form-group\">\r\n                <label class=\"form-control-label h6\" for=\"achieved-points-range-slider\" jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.achievablePoints\"></label>\r\n                <jhi-range-slider\r\n                    id=\"achieved-points-range-slider\"\r\n                    [generalMinValue]=\"achievablePoints.filter.generalMin\"\r\n                    [generalMaxValue]=\"achievablePoints.filter.generalMax\"\r\n                    [(selectedMinValue)]=\"achievablePoints.filter.selectedMin\"\r\n                    [(selectedMaxValue)]=\"achievablePoints.filter.selectedMax\"\r\n                    [step]=\"achievablePoints.filter.step\"\r\n                />\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"clearFilter()\">\r\n            <span jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.clearFilter\"></span>\r\n        </button>\r\n\r\n        <div class=\"ms-auto\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeModal()\" jhiTranslate=\"entity.action.cancel\" aria-label=\"Close\"></button>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"applyFilter()\"\r\n                jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.applyFilter\"\r\n                [disabled]=\"noFiltersAvailable\"\r\n            ></button>\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { Component, Input, OnChanges, OnInit, SimpleChanges, input } from '@angular/core';\r\nimport { SidebarCardElement, SidebarTypes } from 'app/types/sidebar';\r\nimport { OneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { faPeopleGroup } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { StudentExamWorkingTimeComponent } from 'app/exam/shared/student-exam-working-time/student-exam-working-time.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { ProfilePictureComponent } from '../../profile-picture/profile-picture.component';\r\nimport { SubmissionResultStatusComponent } from 'app/overview/submission-result-status.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-sidebar-card-item',\r\n    templateUrl: './sidebar-card-item.component.html',\r\n    styleUrls: ['./sidebar-card-item.component.scss', '../sidebar.component.scss'],\r\n    imports: [\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        StudentExamWorkingTimeComponent,\r\n        NgClass,\r\n        ProfilePictureComponent,\r\n        SubmissionResultStatusComponent,\r\n        ArtemisDatePipe,\r\n        ArtemisDurationFromSecondsPipe,\r\n    ],\r\n})\r\nexport class SidebarCardItemComponent implements OnInit, OnChanges {\r\n    @Input() sidebarItem: SidebarCardElement;\r\n    @Input() sidebarType?: SidebarTypes;\r\n    @Input() groupKey?: string;\r\n    unreadCount = input<number>(0);\r\n    otherUser: any;\r\n\r\n    readonly faPeopleGroup = faPeopleGroup;\r\n\r\n    formattedUnreadCount: string = '';\r\n\r\n    ngOnInit(): void {\r\n        this.formattedUnreadCount = this.getFormattedUnreadCount();\r\n        this.extractMessageUser();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['unreadCount']) {\r\n            this.formattedUnreadCount = this.getFormattedUnreadCount();\r\n        }\r\n    }\r\n\r\n    private getFormattedUnreadCount(): string {\r\n        if (this.unreadCount() > 99) {\r\n            return '99+';\r\n        }\r\n        return this.unreadCount().toString() || '';\r\n    }\r\n\r\n    extractMessageUser(): void {\r\n        if (this.sidebarItem.type === 'oneToOneChat' && (this.sidebarItem.conversation as OneToOneChatDTO)?.members) {\r\n            this.otherUser = (this.sidebarItem.conversation as OneToOneChatDTO).members!.find((user) => !user.isRequestingUser);\r\n        } else {\r\n            this.otherUser = null;\r\n        }\r\n\r\n        if (this.sidebarItem.type === 'groupChat') {\r\n            this.sidebarItem.icon = this.faPeopleGroup;\r\n        }\r\n    }\r\n}\r\n", "<!-- TODO: Refactor Special Case 'Exercise' -->\r\n@if (sidebarItem) {\r\n    <div class=\"mx-1\">\r\n        @if (sidebarType === 'exam') {\r\n            <div class=\"d-flex justify-content-between align-items-baseline\">\r\n                <span id=\"test-sidebar-card-title\" class=\"me-2 mb-2\" [title]=\"sidebarItem.title\">\r\n                    @if (sidebarItem.icon) {\r\n                        <fa-icon [fixedWidth]=\"true\" [icon]=\"sidebarItem.icon\" />\r\n                    }\r\n                    {{ sidebarItem.title }}\r\n                </span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between mb-1 align-items-baseline\">\r\n                <div class=\"me-2 text-truncate\">\r\n                    {{ sidebarItem.subtitleLeft }}\r\n                </div>\r\n            </div>\r\n            <div class=\"d-flex flex-column align-items-baseline\">\r\n                <small class=\"me-2 text-truncate fw-semibold small-title-color\" jhiTranslate=\"artemisApp.courseOverview.sidebar.start\"></small>\r\n                <small class=\"me-2 text-truncate fw-semibold\">\r\n                    @if (sidebarItem.startDateWithTime) {\r\n                        {{ sidebarItem.startDateWithTime | artemisDate: 'long-date' }}\r\n                        -\r\n                        {{ sidebarItem.startDateWithTime | artemisDate: 'time' }}\r\n                    }\r\n                </small>\r\n            </div>\r\n            <hr class=\"my-1 mx-0\" />\r\n            <div class=\"d-flex flex-column align-items-baseline\">\r\n                <small class=\"me-2 text-truncate fw-semibold small-title-color\" jhiTranslate=\"artemisApp.courseOverview.sidebar.workingTime\"></small>\r\n                <small class=\"me-2 text-truncate fw-semibold\">\r\n                    @if (sidebarItem.studentExam) {\r\n                        <jhi-student-exam-working-time [studentExam]=\"sidebarItem.studentExam\" />\r\n                    } @else if (sidebarItem.workingTime) {\r\n                        {{ sidebarItem.workingTime | artemisDurationFromSeconds }}\r\n                    }\r\n                </small>\r\n            </div>\r\n            <hr class=\"my-1 mx-0\" />\r\n            <div class=\"d-flex flex-column align-items-baseline\">\r\n                <small class=\"me-2 text-truncate fw-semibold small-title-color\" jhiTranslate=\"artemisApp.courseOverview.sidebar.attainablePoints\"></small>\r\n                <small class=\"me-2 text-truncate fw-semibold\">\r\n                    @if (sidebarItem.attainablePoints) {\r\n                        {{ sidebarItem.attainablePoints }}\r\n                    }\r\n                </small>\r\n            </div>\r\n        } @else {\r\n            <div class=\"d-flex justify-content-between align-items-baseline\">\r\n                <span\r\n                    id=\"test-sidebar-card-title\"\r\n                    class=\"small text-truncate me-2\"\r\n                    [title]=\"sidebarItem.title\"\r\n                    [class.muted]=\"sidebarItem.conversation?.isMuted\"\r\n                    [ngClass]=\"unreadCount() > 0 ? 'fw-bold' : 'fw-normal'\"\r\n                >\r\n                    @if (otherUser) {\r\n                        <jhi-profile-picture\r\n                            [imageSizeInRem]=\"'1.1'\"\r\n                            [fontSizeInRem]=\"'0.5'\"\r\n                            [imageId]=\"'sidebar-profile-picture'\"\r\n                            [defaultPictureId]=\"'sidebar-default-profile-picture'\"\r\n                            [isGray]=\"false\"\r\n                            [authorId]=\"otherUser.id\"\r\n                            [authorName]=\"otherUser.name\"\r\n                            [imageUrl]=\"otherUser.imageUrl\"\r\n                            [isEditable]=\"false\"\r\n                        />\r\n                    } @else if (sidebarItem.icon) {\r\n                        <fa-icon [fixedWidth]=\"true\" [icon]=\"sidebarItem.icon\" />\r\n                    }\r\n                    {{ sidebarItem.title }}</span\r\n                >\r\n                <span>\r\n                    @if (sidebarItem.rightIcon) {\r\n                        <fa-icon [fixedWidth]=\"true\" [icon]=\"sidebarItem.rightIcon\" />\r\n                    }\r\n                </span>\r\n                @if (unreadCount() > 0) {\r\n                    <span class=\"unread-count me-n2\">{{ formattedUnreadCount }}</span>\r\n                }\r\n            </div>\r\n            <div class=\"d-flex justify-content-between align-items-baseline small\" [ngClass]=\"{ 'mt-1': sidebarItem.subtitleLeft }\">\r\n                <small class=\"me-2 text-truncate\">\r\n                    {{ sidebarItem.subtitleLeft }}\r\n                </small>\r\n                <small class=\"text-truncate d-inline\">\r\n                    @if (sidebarType === 'exercise' && sidebarItem.exercise) {\r\n                        <jhi-submission-result-status\r\n                            class=\"text-truncate result\"\r\n                            [exercise]=\"sidebarItem.exercise\"\r\n                            [studentParticipation]=\"sidebarItem.studentParticipation\"\r\n                            [triggerLastGraded]=\"false\"\r\n                            [isInSidebarCard]=\"true\"\r\n                        />\r\n                    } @else {\r\n                        {{ sidebarItem.subtitleRight }}\r\n                    }\r\n                </small>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, input } from '@angular/core';\r\nimport { faBullhorn, faHashtag, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-channel-icon',\r\n    templateUrl: './channel-icon.component.html',\r\n    imports: [FaIconComponent],\r\n})\r\nexport class ChannelIconComponent {\r\n    isPublic = input<boolean>(true);\r\n    isAnnouncementChannel = input<boolean>(false);\r\n\r\n    // icons\r\n    readonly faHashtag = faHashtag;\r\n    readonly faLock = faLock;\r\n    readonly faBullhorn = faBullhorn;\r\n\r\n    getIcon() {\r\n        if (this.isAnnouncementChannel()) {\r\n            return this.faBullhorn;\r\n        }\r\n        return this.isPublic() ? this.faHashtag : this.faLock;\r\n    }\r\n}\r\n", "<ng-container>\r\n    <fa-icon [icon]=\"getIcon()\" size=\"xs\" />\r\n</ng-container>\r\n", "import { ChangeDetectorRef, Component, ElementRef, HostBinding, Input, OnDestroy, OnInit, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, OperatorFunction, Subject, catchError, map, of } from 'rxjs';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { debounceTime, distinctUntilChanged, filter, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { User, UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { NgbTypeahead, NgbTypeaheadSelectItemEvent } from '@ng-bootstrap/ng-bootstrap';\r\nimport { faX } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProfilePictureComponent } from '../profile-picture/profile-picture.component';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\nlet selectorId = 0;\r\n\r\n// Note: Searching for tutors also searches for editors\r\nexport type SearchRoleGroup = 'tutors' | 'students' | 'instructors';\r\n\r\n/**\r\n * Generic Input Component for searching and selecting one or more users from a course.\r\n * - Implements ControlValueAccessor to be used in reactive forms.\r\n * - Uses ng-bootstrap typeahead to provide a search input.\r\n * - Uses server side search to efficiently search for users.\r\n * - Uses a custom formatter to display the user's name and login.\r\n * - Search requires at least 3 characters.\r\n * - Always returns an array of users. In single mode the array will contain only one user.\r\n */\r\n@Component({\r\n    selector: 'jhi-course-users-selector',\r\n    templateUrl: './course-users-selector.component.html',\r\n    styleUrls: ['./course-users-selector.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: CourseUsersSelectorComponent,\r\n            multi: true,\r\n        },\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [NgbTypeahead, ProfilePictureComponent, TranslateDirective, FaIconComponent, ArtemisTranslatePipe],\r\n})\r\nexport class CourseUsersSelectorComponent implements ControlValueAccessor, OnInit, OnDestroy {\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private cdr = inject(ChangeDetectorRef);\r\n\r\n    @HostBinding('class.course-users-selector') hostClass = true;\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    @ViewChild('instance', { static: true }) typeAheadInstance: NgbTypeahead;\r\n    @Input() disabled = false;\r\n    @ViewChild('searchInput') searchInput: ElementRef;\r\n    @Input()\r\n    courseId: number;\r\n    @Input()\r\n    @HostBinding('attr.id')\r\n    id = 'users-selector' + selectorId++;\r\n    @Input()\r\n    label?: string;\r\n    @Input()\r\n    rolesToAllowSearchingIn: SearchRoleGroup[] = ['tutors', 'students', 'instructors'];\r\n    @Input()\r\n    multiSelect = true;\r\n\r\n    @Input()\r\n    showUserList = true;\r\n\r\n    searchStudents = true;\r\n    searchTutors = true;\r\n    searchInstructors = true;\r\n\r\n    // icons\r\n    faX = faX;\r\n\r\n    selectedUsers: UserPublicInfoDTO[] = [];\r\n    isSearching = false;\r\n    searchFailed = false;\r\n\r\n    ngOnInit(): void {\r\n        if (this.rolesToAllowSearchingIn.includes('students')) {\r\n            this.searchStudents = true;\r\n        }\r\n        if (this.rolesToAllowSearchingIn.includes('tutors')) {\r\n            this.searchTutors = true;\r\n        }\r\n        if (this.rolesToAllowSearchingIn.includes('instructors')) {\r\n            this.searchInstructors = true;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    usersFormatter = (user: UserPublicInfoDTO) => this.getUserLabel(user);\r\n\r\n    trackIdentity(_index: number, item: UserPublicInfoDTO) {\r\n        return item.id;\r\n    }\r\n\r\n    getUserLabel(user: UserPublicInfoDTO) {\r\n        let label = '';\r\n        if (user.firstName) {\r\n            label += user.firstName + ' ';\r\n        }\r\n        if (user.lastName) {\r\n            label += user.lastName + ' ';\r\n        }\r\n        if (user.login) {\r\n            label += '(' + user.login + ')';\r\n        }\r\n        return label.trim();\r\n    }\r\n\r\n    onSelectItem($event: NgbTypeaheadSelectItemEvent<User>) {\r\n        this.onUserSelected($event.item);\r\n        $event.preventDefault();\r\n        this.resetSearchInput();\r\n    }\r\n\r\n    onDelete(index: number) {\r\n        this.selectedUsers.splice(index, 1);\r\n        this.onChange(this.selectedUsers);\r\n    }\r\n\r\n    onInputChange(event: Event): void {\r\n        const value = (event.target as HTMLInputElement).value;\r\n        // If the input value has fewer than 3 characters, close the suggestion popup\r\n        if (value.length < 3) {\r\n            this.typeAheadInstance.dismissPopup();\r\n        }\r\n    }\r\n\r\n    onFilterChange() {\r\n        this.typeAheadInstance?.dismissPopup();\r\n        this.searchInput.nativeElement.dispatchEvent(new Event('input'));\r\n    }\r\n\r\n    search: OperatorFunction<string, readonly UserPublicInfoDTO[]> = (text$: Observable<string>) =>\r\n        text$.pipe(\r\n            debounceTime(200),\r\n            distinctUntilChanged(),\r\n            map((term) => (term ? term.trim().toLowerCase() : '')),\r\n            // the three letter minimum is enforced by the server only for searching for students as they are so many\r\n            filter((term) => term.length >= 3 || !this.searchStudents),\r\n            switchMap((term) => {\r\n                const rolesToSearchIn: SearchRoleGroup[] = [];\r\n                if (this.searchStudents) {\r\n                    rolesToSearchIn.push('students');\r\n                }\r\n                if (this.searchTutors) {\r\n                    rolesToSearchIn.push('tutors');\r\n                }\r\n                if (this.searchInstructors) {\r\n                    rolesToSearchIn.push('instructors');\r\n                }\r\n                if (rolesToSearchIn.length === 0) {\r\n                    this.searchFailed = false;\r\n                    return of([]);\r\n                } else {\r\n                    this.isSearching = true;\r\n                    return this.courseManagementService.searchUsers(this.courseId, term, rolesToSearchIn).pipe(\r\n                        map((users) => users.body!),\r\n                        map((users) => users.filter((user) => !this.selectedUsers.find((selectedUser) => selectedUser.id === user.id))),\r\n                        tap(() => {\r\n                            this.isSearching = false;\r\n                            this.searchFailed = false;\r\n                        }),\r\n                        catchError(() => {\r\n                            this.searchFailed = true;\r\n                            this.isSearching = false;\r\n                            return of([]);\r\n                        }),\r\n                        takeUntil(this.ngUnsubscribe),\r\n                    );\r\n                }\r\n            }),\r\n            takeUntil(this.ngUnsubscribe),\r\n        );\r\n\r\n    // === START CONTROL VALUE ACCESSOR ===\r\n    onChange = (_selectedUsers: UserPublicInfoDTO[]) => {};\r\n\r\n    onTouched = () => {};\r\n\r\n    registerOnChange(fn: (selectedUsers: UserPublicInfoDTO[]) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    writeValue(selectedUsers: UserPublicInfoDTO[]): void {\r\n        if (!selectedUsers) {\r\n            this.selectedUsers = [];\r\n            this.cdr.detectChanges();\r\n            return;\r\n        }\r\n\r\n        if (this.multiSelect) {\r\n            this.selectedUsers = selectedUsers ?? [];\r\n        } else {\r\n            this.selectedUsers = selectedUsers?.length ? [selectedUsers[0]] : [];\r\n        }\r\n        this.cdr.detectChanges();\r\n    }\r\n    // === END CONTROL VALUE ACCESSOR ===\r\n\r\n    private onUserSelected(selectedUser: UserPublicInfoDTO) {\r\n        if (selectedUser) {\r\n            if (!this.selectedUsers.find((user) => user.id === selectedUser.id)) {\r\n                if (this.multiSelect) {\r\n                    this.selectedUsers = [...this.selectedUsers, selectedUser];\r\n                } else {\r\n                    this.selectedUsers = [selectedUser];\r\n                }\r\n                this.onChange(this.selectedUsers);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resetSearchInput() {\r\n        if (this.searchInput) {\r\n            this.searchInput.nativeElement.value = '';\r\n        }\r\n    }\r\n}\r\n", "<div (focusout)=\"onTouched()\">\r\n    <div class=\"form-group\">\r\n        @if (label) {\r\n            <label [for]=\"id + '-user-input'\">{{ label }}</label>\r\n        }\r\n        <input\r\n            #searchInput\r\n            [disabled]=\"disabled\"\r\n            (selectItem)=\"onSelectItem($event)\"\r\n            [id]=\"id + '-user-input'\"\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            [placeholder]=\"'artemisApp.userSelector.placeholderText' | artemisTranslate\"\r\n            [ngbTypeahead]=\"search\"\r\n            [inputFormatter]=\"usersFormatter\"\r\n            [resultTemplate]=\"resultTemplate\"\r\n            [editable]=\"false\"\r\n            [focusFirst]=\"false\"\r\n            (input)=\"onInputChange($event)\"\r\n            placement=\"bottom-start\"\r\n            #instance=\"ngbTypeahead\"\r\n        />\r\n        <ng-template #resultTemplate let-user=\"result\">\r\n            <div class=\"d-flex align-items-center\">\r\n                <jhi-profile-picture\r\n                    [imageSizeInRem]=\"'1.1'\"\r\n                    [fontSizeInRem]=\"'0.5'\"\r\n                    [imageId]=\"'sidebar-profile-picture'\"\r\n                    [defaultPictureId]=\"'sidebar-default-profile-picture'\"\r\n                    [isGray]=\"false\"\r\n                    [authorId]=\"user.id\"\r\n                    [authorName]=\"user.name\"\r\n                    [imageUrl]=\"user.imageUrl\"\r\n                    [isEditable]=\"false\"\r\n                    class=\"me-2\"\r\n                />\r\n                <span>{{ getUserLabel(user) }}</span>\r\n            </div>\r\n        </ng-template>\r\n        @if (isSearching) {\r\n            <small class=\"form-text text-body-secondary\" jhiTranslate=\"artemisApp.userSelector.searchingText\"></small>\r\n            <br />\r\n        }\r\n        @if (searchFailed) {\r\n            <small jhiTranslate=\"artemisApp.userSelector.searchFailedText\"></small>\r\n            <br />\r\n        }\r\n        @if (searchStudents) {\r\n            <small class=\"form-text text-body-secondary\" jhiTranslate=\"artemisApp.userSelector.helpText\"></small>\r\n        }\r\n    </div>\r\n    <div class=\"text-end\">\r\n        @if (rolesToAllowSearchingIn.includes('students')) {\r\n            <div class=\"form-check form-check-inline\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"students\" [checked]=\"searchStudents\" (change)=\"searchStudents = !searchStudents; onFilterChange()\" />\r\n                <label class=\"form-check-label\" for=\"students\" jhiTranslate=\"artemisApp.course.students\"></label>\r\n            </div>\r\n        }\r\n        @if (rolesToAllowSearchingIn.includes('tutors')) {\r\n            <div class=\"form-check form-check-inline\">\r\n                <input type=\"checkbox\" class=\"form-check-input\" id=\"tutors\" [checked]=\"searchTutors\" (change)=\"searchTutors = !searchTutors; onFilterChange()\" />\r\n                <label class=\"form-check-label\" for=\"tutors\" jhiTranslate=\"artemisApp.course.tutors\"></label>\r\n            </div>\r\n        }\r\n        @if (rolesToAllowSearchingIn.includes('instructors')) {\r\n            <div class=\"form-check form-check-inline\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    class=\"form-check-input\"\r\n                    id=\"instructors\"\r\n                    [checked]=\"searchInstructors\"\r\n                    (change)=\"searchInstructors = !searchInstructors; onFilterChange()\"\r\n                />\r\n                <label class=\"form-check-label\" for=\"instructors\" jhiTranslate=\"artemisApp.course.instructors\"></label>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (showUserList) {\r\n        <ul class=\"list-group\">\r\n            @for (user of selectedUsers; track trackIdentity(i, user); let i = $index) {\r\n                <li class=\"selected-user list-group-item d-flex justify-content-between align-items-center\">\r\n                    <span class=\"d-inline-block\">{{ getUserLabel(user) }}</span>\r\n                    @if (!disabled) {\r\n                        <button class=\"delete-user btn btn-outline-secondary d-inline-block\" type=\"button\" (click)=\"onDelete(i)\">\r\n                            <fa-icon [icon]=\"faX\" />\r\n                        </button>\r\n                    }\r\n                </li>\r\n            }\r\n        </ul>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, inject, input } from '@angular/core';\r\nimport { UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CourseUsersSelectorComponent } from 'app/shared/course-users-selector/course-users-selector.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface AddUsersFormData {\r\n    selectedUsers?: UserPublicInfoDTO[];\r\n    addAllStudents: boolean;\r\n    // all tutors also includes editors\r\n    addAllTutors: boolean;\r\n    addAllInstructors: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-add-users-form',\r\n    templateUrl: './conversation-add-users-form.component.html',\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule, CourseUsersSelectorComponent, FaIconComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ConversationAddUsersFormComponent implements OnInit, OnChanges {\r\n    private fb = inject(FormBuilder);\r\n\r\n    @Output() formSubmitted: EventEmitter<AddUsersFormData> = new EventEmitter<AddUsersFormData>();\r\n\r\n    @Input() courseId: number;\r\n    @Input() maxSelectable?: number = undefined;\r\n    @Input() activeConversation: ConversationDTO;\r\n\r\n    isLoading = input<boolean>(false);\r\n\r\n    form: FormGroup;\r\n\r\n    // Icons\r\n    protected readonly faSpinner = faSpinner;\r\n\r\n    getAsChannel = getAsChannelDTO;\r\n\r\n    mode: 'individual' | 'group' = 'individual';\r\n\r\n    get selectedUsersControl() {\r\n        return this.form.get('selectedUsers');\r\n    }\r\n\r\n    get isSubmitPossible() {\r\n        return (\r\n            !this.isLoading() &&\r\n            ((this.mode === 'individual' && !this.form.invalid) ||\r\n                (this.mode === 'group' && (this.form.value?.addAllStudents || this.form.value?.addAllTutors || this.form.value?.addAllInstructors)))\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initializeForm();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.initializeForm();\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.form) {\r\n            return;\r\n        }\r\n        const validators = this.maxSelectable ? [Validators.required, Validators.maxLength(this.maxSelectable)] : [Validators.required];\r\n\r\n        this.form = this.fb.group({\r\n            selectedUsers: [[], validators],\r\n            addAllStudents: [false],\r\n            addAllTutors: [false],\r\n            addAllInstructors: [false],\r\n        });\r\n    }\r\n\r\n    submitForm() {\r\n        this.formSubmitted.emit({ ...this.form.value });\r\n    }\r\n}\r\n", "@if (activeConversation && courseId) {\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            @if (maxSelectable !== undefined) {\r\n                <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.maxUsersNote\" [translateValues]=\"{ max: maxSelectable }\"></div>\r\n            }\r\n            <div [hidden]=\"maxSelectable === 0\">\r\n                <div class=\"mode-switch\" [hidden]=\"!getAsChannel(activeConversation)\">\r\n                    <div class=\"form-group\">\r\n                        <div class=\"btn-group\" role=\"group\">\r\n                            <input\r\n                                [(ngModel)]=\"mode\"\r\n                                type=\"radio\"\r\n                                class=\"btn-check\"\r\n                                id=\"individual\"\r\n                                autocomplete=\"off\"\r\n                                [value]=\"'individual'\"\r\n                                [ngModelOptions]=\"{ standalone: true }\"\r\n                            />\r\n                            <label class=\"btn btn-secondary\" for=\"individual\" jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.addIndividualUsers\"></label>\r\n                            <input [(ngModel)]=\"mode\" type=\"radio\" class=\"btn-check\" id=\"group\" autocomplete=\"off\" [value]=\"'group'\" [ngModelOptions]=\"{ standalone: true }\" />\r\n                            <label class=\"btn btn-secondary\" for=\"group\" jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.addWholeGroups\"></label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <form (ngSubmit)=\"submitForm()\" [formGroup]=\"form\">\r\n                    <div class=\"row individual-select\" [hidden]=\"mode !== 'individual'\">\r\n                        <div class=\"col-12\">\r\n                            <jhi-course-users-selector\r\n                                formControlName=\"selectedUsers\"\r\n                                [courseId]=\"courseId\"\r\n                                [label]=\"'artemisApp.dialogs.addUsers.addUsersForm.addUserLabel' | artemisTranslate\"\r\n                            />\r\n                            @if (selectedUsersControl?.invalid && (selectedUsersControl?.dirty || selectedUsersControl?.touched)) {\r\n                                <div class=\"alert alert-danger\">\r\n                                    @if (selectedUsersControl?.errors?.required) {\r\n                                        <div jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.requiredError\"></div>\r\n                                    }\r\n                                    @if (selectedUsersControl?.errors?.maxlength) {\r\n                                        <div jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.maxError\" [translateValues]=\"{ max: maxSelectable }\"></div>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row group-select\" [hidden]=\"mode !== 'group'\">\r\n                        <div class=\"col-12\">\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" id=\"allStudents\" formControlName=\"addAllStudents\" />\r\n                                <label class=\"form-check-label\" for=\"allStudents\" jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.addAllStudents\"></label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" id=\"allTutors\" formControlName=\"addAllTutors\" />\r\n                                <label class=\"form-check-label\" for=\"allTutors\" jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.addAllTutors\"></label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" id=\"allInstructors\" formControlName=\"addAllInstructors\" />\r\n                                <label class=\"form-check-label\" for=\"allInstructors\" jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.addAllInstructors\"></label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 text-end\">\r\n                            <button type=\"submit\" id=\"submitButton\" [disabled]=\"!isSubmitPossible\" class=\"btn btn-primary\">\r\n                                <span jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersForm.addUsersButton\"></span>\r\n                                @if (isLoading()) {\r\n                                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" class=\"ms-2\" />\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, Input, OnDestroy, inject } from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { AddUsersFormData } from 'app/overview/course-conversations/dialogs/conversation-add-users-dialog/add-users-form/conversation-add-users-form.component';\r\nimport { UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { getAsGroupChatDTO, isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { MAX_GROUP_CHAT_PARTICIPANTS } from 'app/shared/metis/conversations/conversation-settings';\r\nimport { GroupChatService } from 'app/shared/metis/conversations/group-chat.service';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { ChannelIconComponent } from '../../other/channel-icon/channel-icon.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ConversationAddUsersFormComponent } from './add-users-form/conversation-add-users-form.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-add-users-dialog',\r\n    templateUrl: './conversation-add-users-dialog.component.html',\r\n    imports: [ChannelIconComponent, TranslateDirective, ConversationAddUsersFormComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ConversationAddUsersDialogComponent extends AbstractDialogComponent implements OnDestroy {\r\n    private alertService = inject(AlertService);\r\n    channelService = inject(ChannelService);\r\n    conversationService = inject(ConversationService);\r\n    groupChatService = inject(GroupChatService);\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    @Input() course: Course;\r\n    @Input() activeConversation: ConversationDTO;\r\n\r\n    isInitialized = false;\r\n    maxSelectable: number | undefined;\r\n    protected isLoading = false;\r\n\r\n    initialize() {\r\n        super.initialize(['course', 'activeConversation']);\r\n        if (this.isInitialized) {\r\n            if (isGroupChatDTO(this.activeConversation)) {\r\n                this.maxSelectable = MAX_GROUP_CHAT_PARTICIPANTS - (this.activeConversation?.numberOfMembers ?? 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    onFormSubmitted({ selectedUsers, addAllStudents, addAllTutors, addAllInstructors }: AddUsersFormData) {\r\n        this.addUsers(selectedUsers ?? [], addAllStudents, addAllTutors, addAllInstructors);\r\n    }\r\n\r\n    getAsChannel = getAsChannelDTO;\r\n    getAsGroupChat = getAsGroupChatDTO;\r\n\r\n    private addUsers(usersToAdd: UserPublicInfoDTO[], addAllStudents: boolean, addAllTutors: boolean, addAllInstructors: boolean) {\r\n        const userLogins = usersToAdd.map((user) => user.login!);\r\n\r\n        this.isLoading = true;\r\n\r\n        if (isChannelDTO(this.activeConversation)) {\r\n            this.channelService\r\n                .registerUsersToChannel(this.course.id!, this.activeConversation.id!, addAllStudents, addAllTutors, addAllInstructors, userLogins)\r\n                .pipe(\r\n                    finalize(() => this.close()),\r\n                    takeUntil(this.ngUnsubscribe),\r\n                )\r\n                .subscribe({\r\n                    next: () => {},\r\n                    error: (errorResponse: HttpErrorResponse) => {\r\n                        onError(this.alertService, errorResponse);\r\n                    },\r\n                    complete: () => {\r\n                        this.isLoading = false;\r\n                    },\r\n                });\r\n        } else if (isGroupChatDTO(this.activeConversation)) {\r\n            this.groupChatService\r\n                .addUsersToGroupChat(this.course.id!, this.activeConversation.id!, userLogins)\r\n                .pipe(\r\n                    finalize(() => this.close()),\r\n                    takeUntil(this.ngUnsubscribe),\r\n                )\r\n                .subscribe({\r\n                    next: () => {},\r\n                    error: (errorResponse: HttpErrorResponse) => {\r\n                        onError(this.alertService, errorResponse);\r\n                    },\r\n                    complete: () => {\r\n                        this.isLoading = false;\r\n                    },\r\n                });\r\n        } else {\r\n            throw new Error('Conversation type not supported');\r\n        }\r\n    }\r\n}\r\n", "@if (isInitialized) {\r\n    <div>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">\r\n                @if (getAsChannel(activeConversation); as channel) {\r\n                    <span>\r\n                        {{ 'artemisApp.dialogs.addUsers.addUsersToChannel' | artemisTranslate }}\r\n                        <jhi-channel-icon [isPublic]=\"channel.isPublic!\" [isAnnouncementChannel]=\"channel.isAnnouncementChannel!\" />\r\n                        {{ conversationService.getConversationName(channel) }}\r\n                    </span>\r\n                }\r\n                @if (getAsGroupChat(activeConversation)) {\r\n                    <span jhiTranslate=\"artemisApp.dialogs.addUsers.addUsersToGroupChat\"></span>\r\n                }\r\n            </h4>\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"dismiss()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <jhi-conversation-add-users-form\r\n                [isLoading]=\"isLoading\"\r\n                [maxSelectable]=\"maxSelectable\"\r\n                [courseId]=\"course.id!\"\r\n                (formSubmitted)=\"onFormSubmitted($event)\"\r\n                [activeConversation]=\"activeConversation\"\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, HostBinding, OnDestroy, OnInit, inject, input, output } from '@angular/core';\r\nimport { faEllipsis, faUser, faUserCheck, faUserGear, faUserGraduate } from '@fortawesome/free-solid-svg-icons';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbModal, NgbModalRef, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { EMPTY, Observable, Subject, from, takeUntil } from 'rxjs';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { canGrantChannelModeratorRole, canRemoveUsersFromConversation, canRevokeChannelModeratorRole } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { defaultSecondLayerDialogOptions, getUserLabel } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { ChannelDTO, getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { GenericConfirmationDialogComponent } from 'app/overview/course-conversations/dialogs/generic-confirmation-dialog/generic-confirmation-dialog.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { getAsGroupChatDTO, isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { GroupChatService } from 'app/shared/metis/conversations/group-chat.service';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { ProfilePictureComponent } from 'app/shared/profile-picture/profile-picture.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: '[jhi-conversation-member-row]',\r\n    templateUrl: './conversation-member-row.component.html',\r\n    styleUrls: ['./conversation-member-row.component.scss'],\r\n    imports: [\r\n        ProfilePictureComponent,\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        NgbDropdownButtonItem,\r\n        NgbDropdownItem,\r\n        TranslateDirective,\r\n        ArtemisTranslatePipe,\r\n        NgClass,\r\n    ],\r\n})\r\nexport class ConversationMemberRowComponent implements OnInit, OnDestroy {\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    activeConversation = input.required<ConversationDTO>();\r\n    course = input<Course>();\r\n    changePerformed = output<void>();\r\n    conversationMember = input<ConversationUserDTO>();\r\n    readonly onUserNameClicked = output<number>();\r\n\r\n    idOfLoggedInUser: number;\r\n\r\n    @HostBinding('class.active')\r\n    isCurrentUser = false;\r\n\r\n    isCreator = false;\r\n\r\n    canBeRemovedFromConversation = false;\r\n\r\n    canBeGrantedChannelModeratorRole = false;\r\n\r\n    canBeRevokedChannelModeratorRole = false;\r\n\r\n    userLabel: string;\r\n    userName: string | undefined;\r\n    userId: number | undefined;\r\n    userImageUrl: string | undefined;\r\n    // icons\r\n    userIcon: IconProp = faUser;\r\n    userTooltip = '';\r\n\r\n    faEllipsis = faEllipsis;\r\n    faUserGear = faUserGear;\r\n\r\n    isChannel = isChannelDTO;\r\n\r\n    canGrantChannelModeratorRole = canGrantChannelModeratorRole;\r\n    canRevokeChannelModeratorRole = canRevokeChannelModeratorRole;\r\n    canRemoveUsersFromConversation = canRemoveUsersFromConversation;\r\n\r\n    private accountService = inject(AccountService);\r\n    private modalService = inject(NgbModal);\r\n    private translateService = inject(TranslateService);\r\n    private channelService = inject(ChannelService);\r\n    private groupChatService = inject(GroupChatService);\r\n    private alertService = inject(AlertService);\r\n\r\n    ngOnInit(): void {\r\n        if (this.conversationMember() && this.activeConversation()) {\r\n            this.accountService.identity().then((loggedInUser: User) => {\r\n                this.idOfLoggedInUser = loggedInUser.id!;\r\n                if (this.conversationMember()?.id === this.idOfLoggedInUser) {\r\n                    this.isCurrentUser = true;\r\n                }\r\n                if (this.conversationMember()?.id === this.activeConversation()?.creator?.id) {\r\n                    this.isCreator = true;\r\n                }\r\n\r\n                this.userImageUrl = this.conversationMember()?.imageUrl;\r\n                this.userId = this.conversationMember()?.id;\r\n                this.userName = this.conversationMember()?.name;\r\n                this.userLabel = getUserLabel(this.conversationMember()!);\r\n                this.setUserAuthorityIconAndTooltip();\r\n                // the creator of a channel can not be removed from the channel\r\n                this.canBeRemovedFromConversation = !this.isCurrentUser && this.canRemoveUsersFromConversation(this.activeConversation()!);\r\n                if (isChannelDTO(this.activeConversation())) {\r\n                    // the creator of a channel can not be removed from the channel\r\n                    const channelDTO = this.activeConversation() as ChannelDTO;\r\n                    this.canBeRemovedFromConversation = this.canBeRemovedFromConversation && !this.isCreator && !channelDTO.isCourseWide;\r\n                    this.canBeGrantedChannelModeratorRole = this.canGrantChannelModeratorRole(channelDTO) && !this.conversationMember()?.isChannelModerator;\r\n                    // the creator of a channel cannot be revoked the channel moderator role\r\n                    this.canBeRevokedChannelModeratorRole = this.canRevokeChannelModeratorRole(channelDTO) && !this.isCreator && !!this.conversationMember()?.isChannelModerator;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    openGrantChannelModeratorRoleDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const channel = getAsChannelDTO(this.activeConversation()!);\r\n        if (!channel) {\r\n            return;\r\n        }\r\n        const translationKeys = {\r\n            titleKey: 'artemisApp.dialogs.grantChannelModerator.title',\r\n            questionKey: 'artemisApp.dialogs.grantChannelModerator.question',\r\n            descriptionKey: 'artemisApp.dialogs.grantChannelModerator.description',\r\n            confirmButtonKey: 'artemisApp.dialogs.grantChannelModerator.confirmButton',\r\n        };\r\n        const translationParams = {\r\n            channelName: channel.name!,\r\n            userName: this.userLabel,\r\n        };\r\n        const confirmedCallback = () => {\r\n            const courseId = this.course?.()?.id;\r\n            const channelId = channel?.id;\r\n            const memberLogin = this.conversationMember?.()?.login;\r\n            if (!courseId || !channelId || !memberLogin) {\r\n                throw new Error('Required parameters are missing');\r\n            }\r\n            return this.channelService.grantChannelModeratorRole(courseId, channelId, [memberLogin]);\r\n        };\r\n        this.openConfirmationDialog(translationKeys, translationParams, confirmedCallback);\r\n    }\r\n\r\n    openRevokeChannelModeratorRoleDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const channel = getAsChannelDTO(this.activeConversation()!);\r\n        if (!channel) {\r\n            return;\r\n        }\r\n        const translationKeys = {\r\n            titleKey: 'artemisApp.dialogs.revokeChannelModerator.title',\r\n            questionKey: 'artemisApp.dialogs.revokeChannelModerator.question',\r\n            descriptionKey: 'artemisApp.dialogs.revokeChannelModerator.description',\r\n            confirmButtonKey: 'artemisApp.dialogs.revokeChannelModerator.confirmButton',\r\n        };\r\n        const translationParams = {\r\n            channelName: channel.name!,\r\n            userName: this.userLabel,\r\n        };\r\n        const confirmedCallback = () => {\r\n            const courseId = this.course?.()?.id;\r\n            const channelId = channel?.id;\r\n            const memberLogin = this.conversationMember?.()?.login;\r\n            if (!courseId || !channelId || !memberLogin) {\r\n                throw new Error('Required parameters are missing');\r\n            }\r\n            return this.channelService.revokeChannelModeratorRole(courseId, channelId, [memberLogin]);\r\n        };\r\n        this.openConfirmationDialog(translationKeys, translationParams, confirmedCallback);\r\n    }\r\n\r\n    openRemoveFromChannelDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const channel = getAsChannelDTO(this.activeConversation()!);\r\n        if (!channel) {\r\n            return;\r\n        }\r\n        let translationKeys: { titleKey: string; questionKey: string; descriptionKey: string; confirmButtonKey: string };\r\n        if (channel.isPublic) {\r\n            translationKeys = {\r\n                titleKey: 'artemisApp.dialogs.removeUserPublicChannel.title',\r\n                questionKey: 'artemisApp.dialogs.removeUserPublicChannel.question',\r\n                descriptionKey: 'artemisApp.dialogs.removeUserPublicChannel.warning',\r\n                confirmButtonKey: 'artemisApp.dialogs.removeUserPublicChannel.remove',\r\n            };\r\n        } else {\r\n            translationKeys = {\r\n                titleKey: 'artemisApp.dialogs.removeUserPrivateChannel.title',\r\n                questionKey: 'artemisApp.dialogs.removeUserPrivateChannel.question',\r\n                descriptionKey: 'artemisApp.dialogs.removeUserPrivateChannel.warning',\r\n                confirmButtonKey: 'artemisApp.dialogs.removeUserPrivateChannel.remove',\r\n            };\r\n        }\r\n\r\n        const translationParams = {\r\n            userName: this.userLabel,\r\n            channelName: channel.name!,\r\n        };\r\n        const confirmedCallback = () => {\r\n            const courseId = this.course?.()?.id;\r\n            const activeConversationId = this.activeConversation()?.id;\r\n            const memberLogin = this.conversationMember?.()?.login;\r\n            if (!courseId || !activeConversationId || !memberLogin) {\r\n                throw new Error('Required parameters are missing');\r\n            }\r\n            return this.channelService.deregisterUsersFromChannel(courseId, activeConversationId, [memberLogin]);\r\n        };\r\n        this.openConfirmationDialog(translationKeys, translationParams, confirmedCallback);\r\n    }\r\n\r\n    openRemoveFromGroupChatDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const groupChat = getAsGroupChatDTO(this.activeConversation()!);\r\n        if (!groupChat) {\r\n            return;\r\n        }\r\n        const translationKeys = {\r\n            titleKey: 'artemisApp.dialogs.removeUserGroupChat.title',\r\n            questionKey: 'artemisApp.dialogs.removeUserGroupChat.question',\r\n            descriptionKey: 'artemisApp.dialogs.removeUserGroupChat.warning',\r\n            confirmButtonKey: 'artemisApp.dialogs.removeUserGroupChat.remove',\r\n        };\r\n        const translationParams = {\r\n            userName: this.userLabel,\r\n        };\r\n        const confirmedCallback = () => {\r\n            const courseId = this.course?.()?.id;\r\n            const activeConversationId = this.activeConversation()?.id;\r\n            const memberLogin = this.conversationMember?.()?.login;\r\n            if (!courseId || !activeConversationId || !memberLogin) {\r\n                throw new Error('Required parameters are missing');\r\n            }\r\n            return this.groupChatService.removeUsersFromGroupChat(courseId, activeConversationId, [memberLogin]);\r\n        };\r\n        this.openConfirmationDialog(translationKeys, translationParams, confirmedCallback);\r\n    }\r\n\r\n    private openConfirmationDialog(\r\n        translationKeys: { titleKey: string; questionKey: string; descriptionKey: string; confirmButtonKey: string },\r\n        translationParams: { [key: string]: string },\r\n        confirmedCallback: () => Observable<HttpResponse<void>>,\r\n    ) {\r\n        const modalRef: NgbModalRef = this.modalService.open(GenericConfirmationDialogComponent, defaultSecondLayerDialogOptions);\r\n        modalRef.componentInstance.translationParameters = translationParams;\r\n        modalRef.componentInstance.translationKeys = translationKeys;\r\n        modalRef.componentInstance.canBeUndone = true;\r\n        modalRef.componentInstance.isDangerousAction = true;\r\n        modalRef.componentInstance.initialize();\r\n\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe(() => {\r\n                confirmedCallback()\r\n                    .pipe(takeUntil(this.ngUnsubscribe))\r\n                    .subscribe({\r\n                        next: () => {\r\n                            this.changePerformed.emit();\r\n                        },\r\n                        error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n                    });\r\n            });\r\n    }\r\n\r\n    openRemoveFromConversationDialog(event: MouseEvent) {\r\n        if (isChannelDTO(this.activeConversation()!)) {\r\n            this.openRemoveFromChannelDialog(event);\r\n        } else if (isGroupChatDTO(this.activeConversation()!)) {\r\n            this.openRemoveFromGroupChatDialog(event);\r\n        } else {\r\n            throw new Error('Unsupported conversation type');\r\n        }\r\n    }\r\n\r\n    setUserAuthorityIconAndTooltip(): void {\r\n        const toolTipTranslationPath = 'artemisApp.metis.userAuthorityTooltips.';\r\n        // highest authority is displayed\r\n        if (this.conversationMember()?.isInstructor) {\r\n            this.userIcon = faUserGraduate;\r\n            this.userTooltip = this.translateService.instant(toolTipTranslationPath + 'instructor');\r\n        } else if (this.conversationMember()?.isEditor || this.conversationMember()?.isTeachingAssistant) {\r\n            this.userIcon = faUserCheck;\r\n            this.userTooltip = this.translateService.instant(toolTipTranslationPath + 'tutor');\r\n        } else {\r\n            this.userIcon = faUser;\r\n            this.userTooltip = this.translateService.instant(toolTipTranslationPath + 'student');\r\n        }\r\n    }\r\n\r\n    userNameClicked() {\r\n        const memberId = this.conversationMember()?.id;\r\n        if (memberId) {\r\n            this.onUserNameClicked.emit(memberId);\r\n        }\r\n    }\r\n}\r\n", "@if (activeConversation() && course()) {\r\n    <div class=\"d-flex justify-content-between align-items-center conversation-member-row\" (mouseleave)=\"$event.stopPropagation(); userDropdown.close()\">\r\n        <span class=\"d-inline-block\">\r\n            <jhi-profile-picture\r\n                imageSizeInRem=\"2\"\r\n                fontSizeInRem=\"0.8\"\r\n                imageId=\"user-profile-picture\"\r\n                defaultPictureId=\"user-default-profile-picture\"\r\n                [authorId]=\"userId\"\r\n                [authorName]=\"userName\"\r\n                [imageUrl]=\"userImageUrl\"\r\n            />\r\n            @if (isChannel(activeConversation()!) && conversationMember()?.isChannelModerator) {\r\n                <fa-icon [icon]=\"faUserGear\" [ngbTooltip]=\"'artemisApp.dialogs.conversationDetail.memberTab.memberRow.channelModeratorTooltip' | artemisTranslate\" />\r\n            }\r\n            <a (click)=\"userNameClicked()\" class=\"bs-body-color\" [ngClass]=\"{ disabled: isCurrentUser }\"> {{ userLabel }} </a>\r\n            @if (!conversationMember()?.isStudent) {\r\n                <fa-icon class=\"ms-1 text-secondary\" [icon]=\"userIcon\" [ngbTooltip]=\"userTooltip\" />\r\n            }\r\n        </span>\r\n        <div ngbDropdown class=\"d-inline-block\" #userDropdown=\"ngbDropdown\">\r\n            @if (canBeRemovedFromConversation || canBeGrantedChannelModeratorRole || canBeRevokedChannelModeratorRole) {\r\n                <button class=\"btn btn-outline-secondary dropdown-toggle interaction\" type=\"button\" ngbDropdownToggle>\r\n                    <fa-icon [icon]=\"faEllipsis\" size=\"xs\" />\r\n                </button>\r\n            }\r\n            <div ngbDropdownMenu>\r\n                @if (canBeRemovedFromConversation) {\r\n                    <button\r\n                        ngbDropdownItem\r\n                        class=\"text-danger remove-member\"\r\n                        (click)=\"openRemoveFromConversationDialog($event)\"\r\n                        jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.memberRow.removeUser\"\r\n                    ></button>\r\n                }\r\n                @if (canBeGrantedChannelModeratorRole) {\r\n                    <button\r\n                        ngbDropdownItem\r\n                        class=\"text-danger grant-moderator\"\r\n                        (click)=\"openGrantChannelModeratorRoleDialog($event)\"\r\n                        jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.memberRow.grantModeratorRole\"\r\n                    ></button>\r\n                }\r\n                @if (canBeRevokedChannelModeratorRole) {\r\n                    <button\r\n                        ngbDropdownItem\r\n                        class=\"text-danger revoke-moderator\"\r\n                        (click)=\"openRevokeChannelModeratorRoleDialog($event)\"\r\n                        jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.memberRow.revokeModeratorRole\"\r\n                    ></button>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { ChangeDetectorRef, Component, OnDestroy, OnInit, inject, input, output, signal } from '@angular/core';\r\nimport { ConversationMemberSearchFilter, ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { catchError, debounceTime, distinctUntilChanged, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { EMPTY, Subject, from, map } from 'rxjs';\r\nimport { faMagnifyingGlass, faUserPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal, NgbModalRef, NgbPagination } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ConversationAddUsersDialogComponent } from 'app/overview/course-conversations/dialogs/conversation-add-users-dialog/conversation-add-users-dialog.component';\r\nimport { getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { canAddUsersToConversation } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\nimport { defaultSecondLayerDialogOptions } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ConversationMemberRowComponent } from './conversation-member-row/conversation-member-row.component';\r\nimport { ItemCountComponent } from 'app/shared/pagination/item-count.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ninterface SearchQuery {\r\n    searchTerm: string;\r\n    force: boolean;\r\n}\r\n@Component({\r\n    selector: 'jhi-conversation-members',\r\n    templateUrl: './conversation-members.component.html',\r\n    imports: [FaIconComponent, TranslateDirective, FormsModule, ConversationMemberRowComponent, ItemCountComponent, NgbPagination, ArtemisTranslatePipe],\r\n})\r\nexport class ConversationMembersComponent implements OnInit, OnDestroy {\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    private readonly search$ = new Subject<SearchQuery>();\r\n\r\n    course = input.required<Course>();\r\n    activeConversationInput = input.required<ConversationDTO>();\r\n    activeConversation = signal<ConversationDTO | undefined>(undefined);\r\n    changesPerformed = output<void>();\r\n    readonly userNameClicked = output<number>();\r\n\r\n    canAddUsersToConversation = canAddUsersToConversation;\r\n    getAsChannel = getAsChannelDTO;\r\n    isChannel = isChannelDTO;\r\n\r\n    members: ConversationUserDTO[] = [];\r\n    // page information\r\n    page = 1;\r\n    itemsPerPage = 10;\r\n    totalItems = 0;\r\n    isSearching = true;\r\n    searchTerm = '';\r\n\r\n    // icons\r\n    faMagnifyingGlass = faMagnifyingGlass;\r\n    faUserPlus = faUserPlus;\r\n\r\n    selectedFilter: ConversationMemberSearchFilter = ConversationMemberSearchFilter.ALL;\r\n\r\n    ALL = ConversationMemberSearchFilter.ALL;\r\n    INSTRUCTOR_FILTER_OPTION = ConversationMemberSearchFilter.INSTRUCTOR;\r\n\r\n    // note: tutors searches for Editors and Tutors\r\n    TUTOR_FILTER_OPTION = ConversationMemberSearchFilter.TUTOR;\r\n    STUDENT_FILTER_OPTION = ConversationMemberSearchFilter.STUDENT;\r\n    CHANNEL_MODERATOR_FILTER_OPTION = ConversationMemberSearchFilter.CHANNEL_MODERATOR;\r\n\r\n    public conversationService = inject(ConversationService);\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n    private cdr = inject(ChangeDetectorRef);\r\n\r\n    trackIdentity(index: number, item: ConversationUserDTO) {\r\n        return item.id;\r\n    }\r\n\r\n    openAddUsersDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(ConversationAddUsersDialogComponent, defaultSecondLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course();\r\n        modalRef.componentInstance.activeConversation = this.activeConversation();\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe(() => {\r\n                this.onChangePerformed();\r\n            });\r\n    }\r\n\r\n    onChangePerformed() {\r\n        this.search$.next({\r\n            searchTerm: this.searchTerm,\r\n            force: true,\r\n        });\r\n        this.changesPerformed.emit();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.search$\r\n            .pipe(\r\n                debounceTime(300),\r\n                distinctUntilChanged((prev, curr) => {\r\n                    if (curr.force === true) {\r\n                        return false;\r\n                    } else {\r\n                        return prev === curr;\r\n                    }\r\n                }),\r\n                tap(() => (this.members = [])),\r\n                map((query) => {\r\n                    const searchTerm = query.searchTerm !== null && query.searchTerm !== undefined ? query.searchTerm : '';\r\n                    return searchTerm.trim().toLowerCase();\r\n                }),\r\n                tap((searchTerm) => {\r\n                    this.isSearching = true;\r\n                    this.searchTerm = searchTerm;\r\n                }),\r\n                switchMap(() => {\r\n                    if (this.course()?.id && this.activeConversation()?.id) {\r\n                        return this.conversationService.searchMembersOfConversation(\r\n                            this.course().id!,\r\n                            this.activeConversation()!.id!,\r\n                            this.searchTerm,\r\n                            this.page - 1,\r\n                            this.itemsPerPage,\r\n                            Number(this.selectedFilter),\r\n                        );\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (res: HttpResponse<ConversationUserDTO[]>) => {\r\n                    this.isSearching = false;\r\n                    this.onSuccess(res.body, res.headers);\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => {\r\n                    this.isSearching = false;\r\n                    onError(this.alertService, errorResponse);\r\n                },\r\n            });\r\n        this.search$.next({\r\n            searchTerm: '',\r\n            force: true,\r\n        });\r\n\r\n        const inputValue = this.activeConversationInput();\r\n        if (inputValue) {\r\n            this.activeConversation.set(inputValue);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    onFilterChange(newFilterValue: ConversationMemberSearchFilter) {\r\n        this.selectedFilter = newFilterValue;\r\n        this.page = 1;\r\n        this.search$.next({\r\n            searchTerm: this.searchTerm,\r\n            force: true,\r\n        });\r\n    }\r\n\r\n    transition() {\r\n        this.search$.next({\r\n            searchTerm: this.searchTerm,\r\n            force: true,\r\n        });\r\n    }\r\n\r\n    onSearchQueryInput($event: Event) {\r\n        this.page = 1;\r\n        const searchTerm = ($event.target as HTMLInputElement).value?.trim().toLowerCase() ?? '';\r\n        this.search$.next({\r\n            searchTerm,\r\n            force: false,\r\n        });\r\n    }\r\n\r\n    private onSuccess(members: ConversationUserDTO[] | null, headers: HttpHeaders): void {\r\n        this.totalItems = Number(headers.get('X-Total-Count'));\r\n        if (this.activeConversation) {\r\n            // might have changed because of user deletion or addition\r\n            this.activeConversation.update((current) => {\r\n                if (current) {\r\n                    return {\r\n                        ...current,\r\n                        numberOfMembers: this.totalItems,\r\n                    };\r\n                }\r\n                return current;\r\n            });\r\n        }\r\n        this.members = members || [];\r\n        this.cdr.detectChanges();\r\n    }\r\n}\r\n", "@if (course() && activeConversation()) {\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-auto\">\r\n                @if (canAddUsersToConversation(activeConversation()!)) {\r\n                    <button type=\"button\" class=\"btn btn-outline-secondary addUsers\" (click)=\"openAddUsersDialog($event)\">\r\n                        <fa-icon [icon]=\"faUserPlus\" />\r\n                        {{ 'artemisApp.dialogs.conversationDetail.memberTab.addUsers' | artemisTranslate }}\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-2\">\r\n            <div class=\"col-8\">\r\n                <div class=\"input-group\">\r\n                    <span class=\"input-group-text\">\r\n                        <fa-icon [icon]=\"faMagnifyingGlass\" size=\"xs\" />\r\n                    </span>\r\n                    <input\r\n                        (input)=\"onSearchQueryInput($event)\"\r\n                        [placeholder]=\"'artemisApp.dialogs.conversationDetail.memberTab.findMembers' | artemisTranslate\"\r\n                        class=\"form-control\"\r\n                        id=\"searchQuery\"\r\n                        type=\"text\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div class=\"col-4\">\r\n                <div class=\"input-group\">\r\n                    <label class=\"input-group-text\" for=\"searchFilter\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.filter\"></label>\r\n                    <select (ngModelChange)=\"onFilterChange($event)\" [ngModel]=\"selectedFilter\" class=\"form-select form-select\" id=\"searchFilter\">\r\n                        <option id=\"allFilter\" [value]=\"ALL\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.allFilter\"></option>\r\n                        <option id=\"instructorFilter\" [value]=\"INSTRUCTOR_FILTER_OPTION\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.instructorFilter\"></option>\r\n                        <option id=\"tutorFilter\" [value]=\"TUTOR_FILTER_OPTION\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.tutorFilter\"></option>\r\n                        <option id=\"studentFilter\" [value]=\"STUDENT_FILTER_OPTION\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.studentFilter\"></option>\r\n                        @if (isChannel(activeConversation()!)) {\r\n                            <option [value]=\"CHANNEL_MODERATOR_FILTER_OPTION\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.channelModeratorFilter\"></option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            @if (isSearching) {\r\n                <div class=\"col-12\">\r\n                    <small class=\"form-text text-body-secondary d-inline-block\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.memberTab.searching\"></small>\r\n                </div>\r\n            }\r\n        </div>\r\n        @if (members && members.length > 0) {\r\n            <div class=\"row mt-2\">\r\n                <div class=\"col-12\">\r\n                    <ul class=\"list-group\">\r\n                        @for (user of members; track trackIdentity(i, user); let i = $index) {\r\n                            <li\r\n                                class=\"list-group-item\"\r\n                                [id]=\"'user-' + user.id\"\r\n                                jhi-conversation-member-row\r\n                                [conversationMember]=\"user\"\r\n                                [activeConversation]=\"activeConversation()!\"\r\n                                [course]=\"course()\"\r\n                                (changePerformed)=\"onChangePerformed()\"\r\n                                (onUserNameClicked)=\"userNameClicked.emit($event)\"\r\n                            ></li>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div class=\"col-12\">\r\n                    <div class=\"d-flex justify-content-center\">\r\n                        <jhi-item-count [params]=\"{ page: page, totalItems: totalItems, itemsPerPage: itemsPerPage }\" />\r\n                    </div>\r\n                    <div class=\"d-flex justify-content-center\">\r\n                        <ngb-pagination\r\n                            [collectionSize]=\"totalItems\"\r\n                            [(page)]=\"page\"\r\n                            [pageSize]=\"itemsPerPage\"\r\n                            [maxSize]=\"5\"\r\n                            [rotate]=\"true\"\r\n                            [boundaryLinks]=\"true\"\r\n                            (pageChange)=\"transition()\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface GenericUpdateTextPropertyTranslationKeys {\r\n    labelKey: string;\r\n    titleKey: string;\r\n\r\n    helpKey: string;\r\n\r\n    maxLengthErrorKey: string;\r\n\r\n    requiredErrorKey: string;\r\n\r\n    regexErrorKey: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-generic-update-text-property-dialog',\r\n    templateUrl: './generic-update-text-property-dialog.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class GenericUpdateTextPropertyDialogComponent extends AbstractDialogComponent {\r\n    private fb = inject(FormBuilder);\r\n\r\n    @Input() propertyName: string;\r\n    @Input() isRequired = false;\r\n    @Input() regexPattern: RegExp | undefined;\r\n    @Input() maxPropertyLength: number;\r\n    @Input() initialValue: string | undefined;\r\n    @Input() translationKeys: GenericUpdateTextPropertyTranslationKeys;\r\n\r\n    form: FormGroup;\r\n\r\n    initialize() {\r\n        super.initialize(['propertyName', 'maxPropertyLength', 'translationKeys']);\r\n        if (this.isInitialized) {\r\n            this.initializeForm();\r\n        }\r\n    }\r\n\r\n    get isSubmitPossible() {\r\n        return !this.form.invalid;\r\n    }\r\n\r\n    get control() {\r\n        return this.form.get(this.propertyName);\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.form) {\r\n            return;\r\n        }\r\n\r\n        const validators = [];\r\n        if (this.isRequired) {\r\n            validators.push(Validators.required);\r\n        }\r\n        if (this.regexPattern) {\r\n            validators.push(Validators.pattern(this.regexPattern));\r\n        }\r\n        if (this.maxPropertyLength) {\r\n            validators.push(Validators.maxLength(this.maxPropertyLength));\r\n        }\r\n\r\n        this.form = this.fb.group({\r\n            [this.propertyName]: [this.initialValue, validators],\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        this.dismiss();\r\n    }\r\n\r\n    submitForm() {\r\n        this.close(this.control!.value);\r\n    }\r\n}\r\n", "@if (isInitialized) {\r\n    <div class=\"channels-overview\">\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">\r\n                {{ translationKeys.titleKey | artemisTranslate }}\r\n            </h4>\r\n            <button type=\"button\" class=\"btn-close dismiss\" (click)=\"clear()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form class=\"row\">\r\n                <div class=\"col-12\">\r\n                    @if (form) {\r\n                        <form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\r\n                            <div class=\"form-group\">\r\n                                <label [for]=\"propertyName\">{{ translationKeys.labelKey | artemisTranslate }}</label>\r\n                                <input type=\"text\" class=\"form-control\" [id]=\"propertyName\" [formControlName]=\"propertyName\" />\r\n                                <small [id]=\"propertyName + '-help'\" class=\"form-text text-body-secondary\">{{ translationKeys.helpKey | artemisTranslate }}</small>\r\n                                @if (control?.invalid && (control?.dirty || control?.touched)) {\r\n                                    <div class=\"alert alert-danger\">\r\n                                        @if (control?.errors?.required) {\r\n                                            <div>\r\n                                                {{ translationKeys.requiredErrorKey | artemisTranslate }}\r\n                                            </div>\r\n                                        }\r\n                                        @if (control?.errors?.maxlength) {\r\n                                            <div>\r\n                                                {{ translationKeys.maxLengthErrorKey | artemisTranslate: { max: this.maxPropertyLength } }}\r\n                                            </div>\r\n                                        }\r\n                                        @if (!control?.errors?.required && !control?.errors?.maxlength && control?.errors?.pattern) {\r\n                                            <div>\r\n                                                {{ translationKeys.regexErrorKey | artemisTranslate }}\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-12 text-end\">\r\n                                    <button type=\"submit\" id=\"submitButton\" [disabled]=\"!isSubmitPossible\" class=\"btn btn-primary\">\r\n                                        <span jhiTranslate=\"entity.action.save\"></span>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    }\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, EventEmitter, OnChanges, OnDestroy, OnInit, Output, inject, output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ChannelIconComponent } from 'app/overview/course-conversations/other/channel-icon/channel-icon.component';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface ChannelFormData {\r\n    name?: string;\r\n    description?: string;\r\n    isPublic?: boolean;\r\n    isAnnouncementChannel?: boolean;\r\n    isCourseWideChannel?: boolean;\r\n}\r\n\r\nexport type ChannelType = 'PUBLIC' | 'PRIVATE';\r\n\r\nexport const channelRegex = new RegExp('^[a-z0-9-]{1}[a-z0-9-]{0,30}$');\r\n\r\n@Component({\r\n    selector: 'jhi-channel-form',\r\n    templateUrl: './channel-form.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective, ChannelIconComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ChannelFormComponent implements OnInit, OnChanges, OnDestroy {\r\n    private fb = inject(FormBuilder);\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    formData: ChannelFormData = {\r\n        name: undefined,\r\n        description: undefined,\r\n        isPublic: undefined,\r\n        isAnnouncementChannel: undefined,\r\n        isCourseWideChannel: undefined,\r\n    };\r\n    @Output() formSubmitted: EventEmitter<ChannelFormData> = new EventEmitter<ChannelFormData>();\r\n    @Output() channelTypeChanged: EventEmitter<ChannelType> = new EventEmitter<ChannelType>();\r\n    @Output() isAnnouncementChannelChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n    isCourseWideChannelChanged = output<boolean>();\r\n\r\n    form: FormGroup;\r\n\r\n    get nameControl() {\r\n        return this.form.get('name');\r\n    }\r\n\r\n    get descriptionControl() {\r\n        return this.form.get('description');\r\n    }\r\n\r\n    get isPublicControl() {\r\n        return this.form.get('isPublic');\r\n    }\r\n\r\n    get isisAnnouncementChannelControl() {\r\n        return this.form.get('isAnnouncementChannel');\r\n    }\r\n\r\n    get isCourseWideChannelControl() {\r\n        return this.form.get('isCourseWideChannel');\r\n    }\r\n\r\n    get isSubmitPossible() {\r\n        return !this.form.invalid;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initializeForm();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.initializeForm();\r\n    }\r\n\r\n    submitForm() {\r\n        this.formSubmitted.emit({ ...this.form.value } as ChannelFormData);\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.form) {\r\n            return;\r\n        }\r\n\r\n        this.form = this.fb.group({\r\n            name: [undefined, [Validators.required, Validators.maxLength(20), Validators.pattern(channelRegex)]],\r\n            description: [undefined, [Validators.maxLength(250)]],\r\n            isPublic: [true, [Validators.required]],\r\n            isAnnouncementChannel: [false, [Validators.required]],\r\n            isCourseWideChannel: [false, [Validators.required]],\r\n        });\r\n\r\n        if (this.isPublicControl) {\r\n            this.isPublicControl.valueChanges.pipe(takeUntil(this.ngUnsubscribe)).subscribe((value) => {\r\n                this.channelTypeChanged.emit(value ? 'PUBLIC' : 'PRIVATE');\r\n            });\r\n        }\r\n\r\n        if (this.isisAnnouncementChannelControl) {\r\n            this.isisAnnouncementChannelControl.valueChanges.pipe(takeUntil(this.ngUnsubscribe)).subscribe((value) => {\r\n                this.isAnnouncementChannelChanged.emit(value);\r\n            });\r\n        }\r\n\r\n        if (this.isCourseWideChannelControl) {\r\n            this.isCourseWideChannelControl.valueChanges.pipe(takeUntil(this.ngUnsubscribe)).subscribe((value) => {\r\n                this.isCourseWideChannelChanged.emit(value);\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<form class=\"row\">\r\n    <div class=\"col-12\">\r\n        @if (form) {\r\n            <form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\r\n                <!-- CHANNEL NAME -->\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\" for=\"name\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.nameInput.label\"></label>\r\n                    <div class=\"input-group\">\r\n                        <span class=\"input-group-text\">\r\n                            <jhi-channel-icon [isPublic]=\"isPublicControl?.value\" [isAnnouncementChannel]=\"isisAnnouncementChannelControl?.value\" />\r\n                        </span>\r\n                        <input\r\n                            type=\"text\"\r\n                            class=\"form-control\"\r\n                            id=\"name\"\r\n                            formControlName=\"name\"\r\n                            [placeholder]=\"'artemisApp.dialogs.createChannel.channelForm.nameInput.placeholder' | artemisTranslate\"\r\n                        />\r\n                    </div>\r\n                    @if (nameControl?.invalid && (nameControl?.dirty || nameControl?.touched)) {\r\n                        <div class=\"alert alert-danger\">\r\n                            @if (nameControl?.errors?.required) {\r\n                                <div jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.nameInput.requiredValidationError\"></div>\r\n                            }\r\n                            @if (nameControl?.errors?.maxlength) {\r\n                                <div jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.nameInput.maxLengthValidationError\" [translateValues]=\"{ max: '30' }\"></div>\r\n                            }\r\n                            @if (!nameControl?.errors?.required && !nameControl?.errors?.maxlength && nameControl?.errors?.pattern) {\r\n                                <div jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.nameInput.regexValidationError\"></div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <!-- DESCRIPTION -->\r\n                <div class=\"form-group\">\r\n                    <label for=\"description\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.descriptionInput.label\"></label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"description\" formControlName=\"description\" />\r\n                    <small\r\n                        id=\"descriptionHelp\"\r\n                        class=\"form-text text-body-secondary\"\r\n                        jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.descriptionInput.descriptionHelp\"\r\n                    ></small>\r\n                    @if (descriptionControl?.invalid && (descriptionControl?.dirty || descriptionControl?.touched)) {\r\n                        <div class=\"alert alert-danger\">\r\n                            @if (descriptionControl?.errors?.maxlength) {\r\n                                <div jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.descriptionInput.maxLengthValidationError\" [translateValues]=\"{ max: '250' }\"></div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <!--Public Channel / Private Channel -->\r\n                <div>\r\n                    <div class=\"form-group\">\r\n                        <label class=\"d-block\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isPublicInput.label\"></label>\r\n                        <div class=\"btn-group\" role=\"group\">\r\n                            <input formControlName=\"isPublic\" type=\"radio\" class=\"btn-check\" id=\"public\" autocomplete=\"off\" checked [value]=\"true\" />\r\n                            <label class=\"btn btn-outline-secondary\" for=\"public\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isPublicInput.public\"></label>\r\n                            <input formControlName=\"isPublic\" type=\"radio\" class=\"btn-check\" id=\"private\" autocomplete=\"off\" [value]=\"false\" />\r\n                            <label class=\"btn btn-outline-secondary\" for=\"private\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isPublicInput.private\"></label>\r\n                        </div>\r\n                        <small\r\n                            id=\"isPublicHelp\"\r\n                            class=\"form-text text-body-secondary d-block\"\r\n                            jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isPublicInput.explanation\"\r\n                        ></small>\r\n                    </div>\r\n                </div>\r\n                <!-- Course-Wide Channel -->\r\n                <div>\r\n                    <div class=\"form-group\">\r\n                        <label class=\"d-block\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isCourseWideChannelInput.label\"></label>\r\n                        <div class=\"btn-group\" role=\"group\">\r\n                            <input formControlName=\"isCourseWideChannel\" type=\"radio\" class=\"btn-check\" id=\"isCourseWideChannel\" autocomplete=\"off\" checked [value]=\"true\" />\r\n                            <label\r\n                                class=\"btn btn-outline-secondary\"\r\n                                for=\"isCourseWideChannel\"\r\n                                jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isCourseWideChannelInput.true\"\r\n                            ></label>\r\n                            <input formControlName=\"isCourseWideChannel\" type=\"radio\" class=\"btn-check\" id=\"isNotCourseWideChannel\" autocomplete=\"off\" [value]=\"false\" />\r\n                            <label\r\n                                class=\"btn btn-outline-secondary\"\r\n                                for=\"isNotCourseWideChannel\"\r\n                                jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isCourseWideChannelInput.false\"\r\n                            ></label>\r\n                        </div>\r\n                        <small\r\n                            id=\"isCourseWideChannelHelp\"\r\n                            class=\"form-text text-body-secondary d-block\"\r\n                            jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isCourseWideChannelInput.explanation\"\r\n                        ></small>\r\n                    </div>\r\n                </div>\r\n                <!--Announcement Channel -->\r\n                <div>\r\n                    <div class=\"form-group\">\r\n                        <label class=\"d-block\" jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isAnnouncementChannelInput.label\"></label>\r\n                        <div class=\"btn-group\" role=\"group\">\r\n                            <input formControlName=\"isAnnouncementChannel\" type=\"radio\" class=\"btn-check\" id=\"isAnnouncementChannel\" autocomplete=\"off\" checked [value]=\"true\" />\r\n                            <label\r\n                                class=\"btn btn-outline-secondary\"\r\n                                for=\"isAnnouncementChannel\"\r\n                                jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isAnnouncementChannelInput.true\"\r\n                            ></label>\r\n                            <input formControlName=\"isAnnouncementChannel\" type=\"radio\" class=\"btn-check\" id=\"isNotAnnouncementChannel\" autocomplete=\"off\" [value]=\"false\" />\r\n                            <label\r\n                                class=\"btn btn-outline-secondary\"\r\n                                for=\"isNotAnnouncementChannel\"\r\n                                jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isAnnouncementChannelInput.false\"\r\n                            ></label>\r\n                        </div>\r\n                        <small\r\n                            id=\"isAnnouncementChannelHelp\"\r\n                            class=\"form-text text-body-secondary d-block\"\r\n                            jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.isAnnouncementChannelInput.explanation\"\r\n                        ></small>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 text-end\">\r\n                        <button type=\"submit\" id=\"submitButton\" [disabled]=\"!isSubmitPossible\" class=\"btn btn-primary\">\r\n                            <span jhiTranslate=\"artemisApp.dialogs.createChannel.channelForm.createButton\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        }\r\n    </div>\r\n</form>\r\n", "import { UserPublicInfoDTO } from 'app/core/user/user.model';\r\n\r\nexport class ConversationUserDTO extends UserPublicInfoDTO {\r\n    public isChannelModerator?: boolean;\r\n    public isRequestingUser?: boolean;\r\n}\r\n", "import { Component, OnDestroy, OnInit, inject, input, output } from '@angular/core';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ChannelDTO, getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { defaultSecondLayerDialogOptions, getUserLabel } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { get } from 'lodash-es';\r\nimport {\r\n    GenericUpdateTextPropertyDialogComponent,\r\n    GenericUpdateTextPropertyTranslationKeys,\r\n} from 'app/overview/course-conversations/dialogs/generic-update-text-property-dialog/generic-update-text-property-dialog.component';\r\nimport { EMPTY, Subject, from, map, takeUntil } from 'rxjs';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { channelRegex } from 'app/overview/course-conversations/dialogs/channels-create-dialog/channel-form/channel-form.component';\r\nimport { canChangeChannelProperties, canChangeGroupChatProperties } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { GroupChatDTO, getAsGroupChatDTO, isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { GroupChatService } from 'app/shared/metis/conversations/group-chat.service';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-info',\r\n    templateUrl: './conversation-info.component.html',\r\n    styleUrls: ['./conversation-info.component.scss'],\r\n    imports: [TranslateDirective, ArtemisDatePipe, ArtemisTranslatePipe],\r\n})\r\nexport class ConversationInfoComponent implements OnInit, OnDestroy {\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    isGroupChat = isGroupChatDTO;\r\n    isChannel = isChannelDTO;\r\n    getAsChannel = getAsChannelDTO;\r\n    getUserLabel = getUserLabel;\r\n    canChangeChannelProperties = canChangeChannelProperties;\r\n    canChangeGroupChatProperties = canChangeGroupChatProperties;\r\n\r\n    getAsChannelOrGroupChat(conversation: ConversationDTO): ChannelDTO | GroupChatDTO | undefined {\r\n        return getAsChannelDTO(conversation) || getAsGroupChatDTO(conversation);\r\n    }\r\n\r\n    getCreator(): ConversationUserDTO | null {\r\n        return this.activeConversation()?.creator as ConversationUserDTO | null;\r\n    }\r\n\r\n    activeConversation = input.required<ConversationDTO>();\r\n    course = input<Course>();\r\n    changesPerformed = output<void>();\r\n\r\n    private channelService = inject(ChannelService);\r\n    private groupChatService = inject(GroupChatService);\r\n    private modalService = inject(NgbModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    readOnlyMode = false;\r\n\r\n    ngOnInit(): void {\r\n        if (this.activeConversation()) {\r\n            if (getAsChannelDTO(this.activeConversation())) {\r\n                this.readOnlyMode = !!getAsChannelDTO(this.activeConversation())?.isArchived;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    onChangePerformed() {\r\n        this.changesPerformed.emit();\r\n    }\r\n\r\n    openEditNameModal(event: MouseEvent) {\r\n        const channelOrGroupChat = this.getAsChannelOrGroupChat(this.activeConversation()!);\r\n        if (!channelOrGroupChat) {\r\n            return;\r\n        }\r\n\r\n        const keys = {\r\n            labelKey: 'artemisApp.dialogs.createChannel.channelForm.nameInput.label',\r\n            titleKey: 'artemisApp.dialogs.createChannel.channelForm.nameInput.label',\r\n            helpKey: '',\r\n            maxLengthErrorKey: 'artemisApp.dialogs.createChannel.channelForm.nameInput.maxLengthValidationError',\r\n            requiredErrorKey: 'artemisApp.dialogs.createChannel.channelForm.nameInput.requiredValidationError',\r\n            regexErrorKey: 'artemisApp.dialogs.createChannel.channelForm.nameInput.regexValidationError',\r\n        };\r\n\r\n        event.stopPropagation();\r\n        this.openEditPropertyDialog(channelOrGroupChat, 'name', 30, true, channelRegex, keys);\r\n    }\r\n\r\n    openEditTopicModal(event: MouseEvent) {\r\n        const channel = getAsChannelDTO(this.activeConversation());\r\n        if (!channel) {\r\n            return;\r\n        }\r\n\r\n        const keys = {\r\n            labelKey: 'artemisApp.dialogs.editChannelTopic.topicInput.label',\r\n            titleKey: 'artemisApp.dialogs.editChannelTopic.topicInput.topicHelp',\r\n            helpKey: 'artemisApp.dialogs.editChannelTopic.topicInput.topicHelp',\r\n            maxLengthErrorKey: 'artemisApp.dialogs.editChannelTopic.topicInput.maxLengthValidationError',\r\n            requiredErrorKey: '',\r\n            regexErrorKey: '',\r\n        };\r\n\r\n        event.stopPropagation();\r\n        this.openEditPropertyDialog(channel, 'topic', 250, false, undefined, keys);\r\n    }\r\n\r\n    openDescriptionTopicModal(event: MouseEvent) {\r\n        const channel = getAsChannelDTO(this.activeConversation());\r\n        if (!channel) {\r\n            return;\r\n        }\r\n\r\n        const keys = {\r\n            labelKey: 'artemisApp.dialogs.createChannel.channelForm.descriptionInput.label',\r\n            titleKey: 'artemisApp.dialogs.createChannel.channelForm.descriptionInput.label',\r\n            helpKey: 'artemisApp.dialogs.createChannel.channelForm.descriptionInput.descriptionHelp',\r\n            maxLengthErrorKey: 'artemisApp.dialogs.createChannel.channelForm.descriptionInput.maxLengthValidationError',\r\n            requiredErrorKey: '',\r\n            regexErrorKey: '',\r\n        };\r\n\r\n        event.stopPropagation();\r\n        this.openEditPropertyDialog(channel, 'description', 250, false, undefined, keys);\r\n    }\r\n\r\n    private openEditPropertyDialog(\r\n        channelOrGroupChat: ChannelDTO | GroupChatDTO,\r\n        propertyName: string,\r\n        maxLength: number,\r\n        isRequired: boolean,\r\n        regexPattern: RegExp | undefined,\r\n        translationKeys: GenericUpdateTextPropertyTranslationKeys,\r\n    ) {\r\n        const modalRef: NgbModalRef = this.modalService.open(GenericUpdateTextPropertyDialogComponent, defaultSecondLayerDialogOptions);\r\n        modalRef.componentInstance.propertyName = propertyName;\r\n        modalRef.componentInstance.maxPropertyLength = maxLength;\r\n        modalRef.componentInstance.translationKeys = translationKeys;\r\n        modalRef.componentInstance.isRequired = isRequired;\r\n        modalRef.componentInstance.regexPattern = regexPattern;\r\n        const property = get(channelOrGroupChat, propertyName);\r\n        if (property && typeof property === 'string' && property.length > 0) {\r\n            modalRef.componentInstance.initialValue = property;\r\n        }\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe((newValue: string) => {\r\n                let updateValue = null;\r\n                if (newValue && newValue.trim().length > 0) {\r\n                    updateValue = newValue.trim();\r\n                } else {\r\n                    updateValue = '';\r\n                }\r\n                if (isChannelDTO(channelOrGroupChat)) {\r\n                    this.updateChannel(channelOrGroupChat, propertyName as keyof ChannelDTO, updateValue);\r\n                } else {\r\n                    this.updateGroupChat(channelOrGroupChat, propertyName as keyof GroupChatDTO, updateValue);\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateGroupChat<K extends keyof GroupChatDTO>(groupChat: GroupChatDTO, propertyName: K, updateValue: GroupChatDTO[K]) {\r\n        const courseId = this.course()?.id;\r\n        if (!courseId) {\r\n            return;\r\n        }\r\n        const updateDTO = new GroupChatDTO();\r\n        updateDTO[propertyName] = updateValue;\r\n\r\n        this.groupChatService\r\n            .update(courseId, groupChat.id!, updateDTO)\r\n            .pipe(\r\n                map((res: HttpResponse<GroupChatDTO>) => res.body),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (updatedGroupChat: GroupChatDTO) => {\r\n                    groupChat[propertyName] = updatedGroupChat[propertyName];\r\n                    this.onChangePerformed();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n    }\r\n\r\n    private updateChannel<K extends keyof ChannelDTO>(channel: ChannelDTO, propertyName: K, updateValue: ChannelDTO[K]) {\r\n        const courseId = this.course()?.id;\r\n        if (!courseId) {\r\n            return;\r\n        }\r\n        const updateDTO = new ChannelDTO();\r\n        updateDTO[propertyName] = updateValue;\r\n        this.channelService\r\n            .update(courseId, channel.id!, updateDTO)\r\n            .pipe(\r\n                map((res: HttpResponse<ChannelDTO>) => res.body),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (updatedChannel: ChannelDTO) => {\r\n                    channel[propertyName] = updatedChannel[propertyName];\r\n                    this.onChangePerformed();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => {\r\n                    if (errorResponse.error?.skipAlert) {\r\n                        onError(this.alertService, errorResponse);\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    protected readonly ConversationDTO = ConversationDTO;\r\n    protected readonly ConversationUserDTO = ConversationUserDTO;\r\n}\r\n", "@if (activeConversation() && course()) {\r\n    <div class=\"container-fluid conversation-info\">\r\n        <div class=\"row info-container\">\r\n            <!-- Name (Only for Channels and Group Chats)-->\r\n            @if (getAsChannelOrGroupChat(activeConversation()); as channelOrGroupChat) {\r\n                <div id=\"name-section\" class=\"col-12 info-section\" [class.interactive]=\"!readOnlyMode\">\r\n                    <div class=\"form-floating\">\r\n                        <textarea\r\n                            class=\"form-control\"\r\n                            readonly\r\n                            disabled\r\n                            placeholder=\"dummyPlaceholder\"\r\n                            id=\"name\"\r\n                            value=\"{{ channelOrGroupChat.name ?? ('artemisApp.dialogs.conversationDetail.infoTab.noName' | artemisTranslate) }}\"\r\n                        >\r\n                        </textarea>\r\n                        <label for=\"name\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.name\"></label>\r\n                        @if (\r\n                            (isChannel(channelOrGroupChat) && canChangeChannelProperties(channelOrGroupChat)) ||\r\n                            (isGroupChat(channelOrGroupChat) && canChangeGroupChatProperties(channelOrGroupChat))\r\n                        ) {\r\n                            <button\r\n                                class=\"action-button right btn btn-link btn-sm\"\r\n                                (click)=\"openEditNameModal($event)\"\r\n                                jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.editName\"\r\n                            ></button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            <!-- Topic (Only for Channels)-->\r\n            @if (getAsChannel(activeConversation()); as channel) {\r\n                <div id=\"topic-section\" class=\"col-12 info-section\" [class.interactive]=\"!readOnlyMode\">\r\n                    <div class=\"form-floating\">\r\n                        <textarea\r\n                            class=\"form-control large\"\r\n                            readonly\r\n                            disabled\r\n                            placeholder=\"dummyPlaceholder\"\r\n                            id=\"topic\"\r\n                            value=\"{{ channel.topic ?? ('artemisApp.dialogs.conversationDetail.infoTab.noTopic' | artemisTranslate) }}\"\r\n                        >\r\n                        </textarea>\r\n                        <label for=\"topic\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.topic\"></label>\r\n                        @if (canChangeChannelProperties(channel)) {\r\n                            <button\r\n                                class=\"action-button right btn btn-link btn-sm\"\r\n                                (click)=\"openEditTopicModal($event)\"\r\n                                jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.editTopic\"\r\n                            ></button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            <!-- Description (Only for Channels)-->\r\n            @if (getAsChannel(activeConversation()); as channel) {\r\n                <div id=\"description-section\" class=\"col-12 info-section\" [class.interactive]=\"!readOnlyMode\">\r\n                    <div class=\"form-floating\">\r\n                        <textarea\r\n                            class=\"form-control large\"\r\n                            readonly\r\n                            disabled\r\n                            placeholder=\"dummyPlaceholder\"\r\n                            id=\"description\"\r\n                            value=\"{{ channel.description ?? ('artemisApp.dialogs.conversationDetail.infoTab.noDescription' | artemisTranslate) }}\"\r\n                        >\r\n                        </textarea>\r\n                        <label for=\"description\" jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.description\"></label>\r\n                        @if (canChangeChannelProperties(channel)) {\r\n                            <button\r\n                                class=\"action-button right btn btn-link btn-sm\"\r\n                                (click)=\"openDescriptionTopicModal($event)\"\r\n                                jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.editDescription\"\r\n                            ></button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            <!-- More Info -->\r\n            <div id=\"moreinfo-section\" class=\"col-12 info-section\">\r\n                <div>\r\n                    <h6 jhiTranslate=\"artemisApp.dialogs.conversationDetail.infoTab.moreInfo\"></h6>\r\n                </div>\r\n                <ul>\r\n                    @if (activeConversation()?.creator) {\r\n                        <li>\r\n                            {{ 'artemisApp.dialogs.conversationDetail.infoTab.createdBy' | artemisTranslate }}:\r\n                            {{ getCreator() ? getUserLabel(getCreator()!) : '' }}\r\n                        </li>\r\n                    }\r\n                    <li>\r\n                        {{ 'artemisApp.dialogs.conversationDetail.infoTab.createdOn' | artemisTranslate }}:\r\n                        {{ activeConversation()!.creationDate ? (activeConversation()!.creationDate | artemisDate) : '' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, OnDestroy, OnInit, inject, input, output } from '@angular/core';\r\nimport { ChannelDTO, getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { GenericConfirmationDialogComponent } from 'app/overview/course-conversations/dialogs/generic-confirmation-dialog/generic-confirmation-dialog.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { EMPTY, Subject, from, takeUntil } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faBoxArchive, faBoxOpen, faHashtag, faLock, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { canChangeChannelArchivalState, canChangeChannelPrivacyState, canDeleteChannel, canLeaveConversation } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { GroupChatService } from 'app/shared/metis/conversations/group-chat.service';\r\nimport { isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { defaultSecondLayerDialogOptions } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-settings',\r\n    templateUrl: './conversation-settings.component.html',\r\n    styleUrls: ['./conversation-settings.component.scss'],\r\n    imports: [TranslateDirective, DeleteButtonDirective, FaIconComponent],\r\n})\r\nexport class ConversationSettingsComponent implements OnInit, OnDestroy {\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    activeConversation = input.required<ConversationDTO>();\r\n    course = input.required<Course>();\r\n\r\n    channelArchivalChange = output<void>();\r\n    channelPrivacyChange = output<void>();\r\n    channelDeleted = output<void>();\r\n    conversationLeave = output<void>();\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    readonly faTrash = faTrash;\r\n    readonly faBoxArchive = faBoxArchive;\r\n    readonly faBoxOpen = faBoxOpen;\r\n    readonly faHashtag = faHashtag;\r\n    readonly faLock = faLock;\r\n\r\n    conversationAsChannel: ChannelDTO | undefined;\r\n    canLeaveConversation: boolean;\r\n    canChangeChannelArchivalState: boolean;\r\n    canChangeChannelPrivacyState: boolean;\r\n    canDeleteChannel: boolean;\r\n\r\n    private modalService = inject(NgbModal);\r\n    private channelService = inject(ChannelService);\r\n    private groupChatService = inject(GroupChatService);\r\n    private alertService = inject(AlertService);\r\n\r\n    ngOnInit(): void {\r\n        const conversation = this.activeConversation();\r\n        if (!conversation) {\r\n            return;\r\n        }\r\n        this.canLeaveConversation = canLeaveConversation(conversation);\r\n        this.conversationAsChannel = getAsChannelDTO(conversation);\r\n        this.canChangeChannelArchivalState = this.conversationAsChannel ? canChangeChannelArchivalState(this.conversationAsChannel) : false;\r\n        this.canChangeChannelPrivacyState = this.conversationAsChannel ? canChangeChannelPrivacyState(this.conversationAsChannel) : false;\r\n        this.canDeleteChannel = this.conversationAsChannel ? canDeleteChannel(this.course(), this.conversationAsChannel) : false;\r\n    }\r\n\r\n    leaveConversation($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (isGroupChatDTO(this.activeConversation()!)) {\r\n            this.groupChatService\r\n                .removeUsersFromGroupChat(this.course().id!, this.activeConversation().id!)\r\n                .pipe(takeUntil(this.ngUnsubscribe))\r\n                .subscribe(() => {\r\n                    this.conversationLeave.emit();\r\n                });\r\n            return;\r\n        } else if (isChannelDTO(this.activeConversation()!)) {\r\n            this.channelService\r\n                .deregisterUsersFromChannel(this.course().id!, this.activeConversation().id!)\r\n                .pipe(takeUntil(this.ngUnsubscribe))\r\n                .subscribe(() => {\r\n                    this.conversationLeave.emit();\r\n                });\r\n            return;\r\n        }\r\n        throw new Error('The conversation type is not supported');\r\n    }\r\n\r\n    toggleChannelArchivalState(event: Event): void {\r\n        const channel = getAsChannelDTO(this.activeConversation()!);\r\n        if (!channel) {\r\n            return;\r\n        }\r\n        if (channel.isArchived) {\r\n            this.openUnArchivalModal(channel);\r\n        } else {\r\n            this.openArchivalModal(channel);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    openArchivalModal(channel: ChannelDTO) {\r\n        const keys = {\r\n            titleKey: 'artemisApp.dialogs.archiveChannel.title',\r\n            questionKey: 'artemisApp.dialogs.archiveChannel.question',\r\n            descriptionKey: 'artemisApp.dialogs.archiveChannel.description',\r\n            confirmButtonKey: 'artemisApp.dialogs.archiveChannel.confirmButton',\r\n        };\r\n\r\n        const modalRef = this.createModal(channel, keys);\r\n\r\n        this.openModal(modalRef, () => {\r\n            this.channelService.archive(this.course().id!, channel.id!).subscribe({\r\n                next: () => {\r\n                    this.channelArchivalChange.emit();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n        });\r\n    }\r\n\r\n    openUnArchivalModal(channel: ChannelDTO) {\r\n        const keys = {\r\n            titleKey: 'artemisApp.dialogs.unArchiveChannel.title',\r\n            questionKey: 'artemisApp.dialogs.unArchiveChannel.question',\r\n            descriptionKey: 'artemisApp.dialogs.unArchiveChannel.description',\r\n            confirmButtonKey: 'artemisApp.dialogs.unArchiveChannel.confirmButton',\r\n        };\r\n        const modalRef = this.createModal(channel, keys);\r\n\r\n        this.openModal(modalRef, () => {\r\n            this.channelService\r\n                .unarchive(this.course().id!, channel.id!)\r\n                .pipe(takeUntil(this.ngUnsubscribe))\r\n                .subscribe({\r\n                    next: () => {\r\n                        this.channelArchivalChange.emit();\r\n                    },\r\n                    error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n                });\r\n        });\r\n    }\r\n\r\n    private openModal(modalRef: NgbModalRef, unArchiveObservable: () => void) {\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe(unArchiveObservable);\r\n    }\r\n\r\n    private createModal(channel: ChannelDTO, keys: { titleKey: string; questionKey: string; descriptionKey: string; confirmButtonKey: string }): NgbModalRef {\r\n        const modalRef: NgbModalRef = this.modalService.open(GenericConfirmationDialogComponent, defaultSecondLayerDialogOptions);\r\n        modalRef.componentInstance.translationParameters = { channelName: channel.name };\r\n        modalRef.componentInstance.translationKeys = keys;\r\n        modalRef.componentInstance.canBeUndone = true;\r\n        modalRef.componentInstance.initialize();\r\n        return modalRef;\r\n    }\r\n\r\n    deleteChannel() {\r\n        const channel = getAsChannelDTO(this.activeConversation()!);\r\n        if (!channel) {\r\n            return;\r\n        }\r\n        this.channelService\r\n            .delete(this.course().id!, channel.id!)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe({\r\n                next: () => {\r\n                    this.dialogErrorSource.next('');\r\n                    this.channelDeleted.emit();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => this.dialogErrorSource.next(errorResponse.message),\r\n            });\r\n    }\r\n\r\n    openPublicChannelModal(channel: ChannelDTO) {\r\n        const keys = {\r\n            titleKey: 'artemisApp.dialogs.publicChannel.title',\r\n            questionKey: 'artemisApp.dialogs.publicChannel.question',\r\n            descriptionKey: 'artemisApp.dialogs.publicChannel.description',\r\n            confirmButtonKey: 'artemisApp.dialogs.publicChannel.confirmButton',\r\n        };\r\n        this.openPrivacyChangeModal(channel, keys);\r\n    }\r\n\r\n    openPrivateChannelModal(channel: ChannelDTO) {\r\n        const keys = {\r\n            titleKey: 'artemisApp.dialogs.privateChannel.title',\r\n            questionKey: 'artemisApp.dialogs.privateChannel.question',\r\n            descriptionKey: 'artemisApp.dialogs.privateChannel.description',\r\n            confirmButtonKey: 'artemisApp.dialogs.privateChannel.confirmButton',\r\n        };\r\n        this.openPrivacyChangeModal(channel, keys);\r\n    }\r\n\r\n    private openPrivacyChangeModal(channel: ChannelDTO, keys: { titleKey: string; questionKey: string; descriptionKey: string; confirmButtonKey: string }) {\r\n        const modalRef = this.createModal(channel, keys);\r\n        this.openModal(modalRef, () => {\r\n            this.channelService\r\n                .toggleChannelPrivacy(this.course().id!, channel.id!)\r\n                .pipe(takeUntil(this.ngUnsubscribe))\r\n                .subscribe({\r\n                    next: (res) => {\r\n                        const updatedChannel = res.body;\r\n                        if (updatedChannel) {\r\n                            this.conversationAsChannel = updatedChannel;\r\n                            this.channelPrivacyChange.emit();\r\n                        }\r\n                    },\r\n                    error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n                });\r\n        });\r\n    }\r\n\r\n    toggleChannelPrivacy() {\r\n        const channel = getAsChannelDTO(this.activeConversation()!);\r\n        if (!channel) {\r\n            return;\r\n        }\r\n\r\n        if (!channel.isPublic) {\r\n            this.openPublicChannelModal(channel);\r\n        } else {\r\n            this.openPrivateChannelModal(channel);\r\n        }\r\n    }\r\n}\r\n", "@if (activeConversation() && course()) {\r\n    <div class=\"container-fluid conversation-settings\">\r\n        @if (canLeaveConversation || canChangeChannelArchivalState || canDeleteChannel) {\r\n            <div class=\"row settings-container\">\r\n                <div class=\"col-12 settings-section text-center\">\r\n                    @if (canLeaveConversation) {\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"btn btn-danger leave-conversation\"\r\n                            (click)=\"leaveConversation($event)\"\r\n                            jhiTranslate=\"artemisApp.dialogs.conversationSettings.actions.leave\"\r\n                        ></button>\r\n                    }\r\n                </div>\r\n                @if (conversationAsChannel; as channel) {\r\n                    @if (canChangeChannelPrivacyState) {\r\n                        <div class=\"col-12 settings-section text-center\">\r\n                            <button type=\"button\" class=\"btn btn-danger privacy-toggle\" (click)=\"toggleChannelPrivacy()\">\r\n                                <fa-icon [icon]=\"channel.isPublic ? faLock : faHashtag\" class=\"me-2\" />\r\n                                <span\r\n                                    jhiTranslate=\"{{\r\n                                        channel.isPublic\r\n                                            ? 'artemisApp.dialogs.conversationSettings.actions.privateChannel'\r\n                                            : 'artemisApp.dialogs.conversationSettings.actions.publicChannel'\r\n                                    }}\"\r\n                                ></span>\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                    @if (canChangeChannelArchivalState) {\r\n                        <div class=\"col-12 settings-section text-center\">\r\n                            <button type=\"button\" class=\"btn btn-danger archive-toggle\" (click)=\"toggleChannelArchivalState($event)\">\r\n                                <fa-icon [icon]=\"channel.isArchived ? faBoxOpen : faBoxArchive\" class=\"me-2\" />\r\n                                <span\r\n                                    jhiTranslate=\"{{\r\n                                        channel.isArchived\r\n                                            ? 'artemisApp.dialogs.conversationSettings.actions.unarchiveChannel'\r\n                                            : 'artemisApp.dialogs.conversationSettings.actions.archiveChannel'\r\n                                    }}\"\r\n                                ></span>\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                    @if (canDeleteChannel) {\r\n                        <div class=\"col-12 settings-section text-center\">\r\n                            <button\r\n                                class=\"btn btn-danger delete\"\r\n                                [id]=\"'delete-' + channel.id\"\r\n                                jhiDeleteButton\r\n                                [renderButtonStyle]=\"false\"\r\n                                [renderButtonText]=\"false\"\r\n                                [entityTitle]=\"channel.name || ''\"\r\n                                deleteQuestion=\"artemisApp.dialogs.deleteChannel.question\"\r\n                                deleteConfirmationText=\"artemisApp.dialogs.deleteChannel.confirm\"\r\n                                (delete)=\"deleteChannel()\"\r\n                                [dialogError]=\"dialogError$\"\r\n                            >\r\n                                <fa-icon [icon]=\"faTrash\" />\r\n                                <span class=\"ms-2\" jhiTranslate=\"artemisApp.dialogs.conversationSettings.actions.deleteChannel\"></span>\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                }\r\n            </div>\r\n        } @else {\r\n            <div class=\"col-12 settings-section text-center\" jhiTranslate=\"artemisApp.dialogs.conversationSettings.settingsUnavailable\"></div>\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, Input, inject, output } from '@angular/core';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { getAsOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { getAsGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { faPeopleGroup } from '@fortawesome/free-solid-svg-icons';\r\nimport { ChannelIconComponent } from '../../other/channel-icon/channel-icon.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { ConversationMembersComponent } from './tabs/conversation-members/conversation-members.component';\r\nimport { ConversationInfoComponent } from './tabs/conversation-info/conversation-info.component';\r\nimport { ConversationSettingsComponent } from './tabs/conversation-settings/conversation-settings.component';\r\nimport { ProfilePictureComponent } from 'app/shared/profile-picture/profile-picture.component';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\n\r\nexport enum ConversationDetailTabs {\r\n    MEMBERS = 'members',\r\n    INFO = 'info',\r\n    SETTINGS = 'settings',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-detail-dialog',\r\n    templateUrl: './conversation-detail-dialog.component.html',\r\n    imports: [\r\n        ChannelIconComponent,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        RouterLink,\r\n        ConversationMembersComponent,\r\n        ConversationInfoComponent,\r\n        ConversationSettingsComponent,\r\n        ProfilePictureComponent,\r\n    ],\r\n})\r\nexport class ConversationDetailDialogComponent extends AbstractDialogComponent {\r\n    conversationService = inject(ConversationService);\r\n\r\n    @Input() public activeConversation: ConversationDTO;\r\n    @Input() course: Course;\r\n    @Input() selectedTab: ConversationDetailTabs = ConversationDetailTabs.MEMBERS;\r\n\r\n    isInitialized = false;\r\n    isOneToOneChat = false;\r\n    otherUser?: ConversationUserDTO;\r\n    readonly faPeopleGroup = faPeopleGroup;\r\n    readonly userNameClicked = output<number>();\r\n\r\n    initialize() {\r\n        super.initialize(['course', 'activeConversation', 'selectedTab']);\r\n        if (this.activeConversation) {\r\n            const conversation = getAsOneToOneChatDTO(this.activeConversation);\r\n            if (conversation) {\r\n                this.isOneToOneChat = true;\r\n                this.otherUser = conversation.members?.find((user) => !user.isRequestingUser);\r\n            }\r\n        }\r\n    }\r\n\r\n    getAsChannel = getAsChannelDTO;\r\n    getAsGroupChat = getAsGroupChatDTO;\r\n\r\n    changesWerePerformed = false;\r\n\r\n    Tabs = ConversationDetailTabs;\r\n\r\n    clear() {\r\n        if (this.changesWerePerformed) {\r\n            this.close();\r\n        } else {\r\n            this.dismiss();\r\n        }\r\n    }\r\n\r\n    onConversationLeave() {\r\n        this.markAsChangedAndClose();\r\n    }\r\n\r\n    onArchivalChange() {\r\n        this.markAsChangedAndClose();\r\n    }\r\n\r\n    onPrivacyChange() {\r\n        this.markAsChangedAndClose();\r\n    }\r\n\r\n    onChannelDeleted() {\r\n        this.markAsChangedAndClose();\r\n    }\r\n\r\n    private markAsChangedAndClose() {\r\n        this.changesWerePerformed = true;\r\n        this.clear();\r\n    }\r\n\r\n    onUserNameClicked(userId: number) {\r\n        this.userNameClicked.emit(userId);\r\n    }\r\n}\r\n", "@if (isInitialized) {\r\n    <div class=\"conversation-detail-dialog\">\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">\r\n                <span>\r\n                    @if (getAsChannel(activeConversation); as channel) {\r\n                        <jhi-channel-icon [isPublic]=\"channel.isPublic!\" [isAnnouncementChannel]=\"channel.isAnnouncementChannel!\" />\r\n                    } @else if (getAsGroupChat(activeConversation)) {\r\n                        <fa-icon [icon]=\"faPeopleGroup\" size=\"xs\" />\r\n                    } @else {\r\n                        <jhi-profile-picture\r\n                            imageSizeInRem=\"2\"\r\n                            fontSizeInRem=\"0.8\"\r\n                            imageId=\"user-profile-picture\"\r\n                            defaultPictureId=\"user-default-profile-picture\"\r\n                            [authorId]=\"otherUser?.id\"\r\n                            [authorName]=\"otherUser?.name\"\r\n                            [imageUrl]=\"otherUser?.imageUrl\"\r\n                        />\r\n                    }\r\n                    {{ conversationService.getConversationName(activeConversation, true) }}\r\n                </span>\r\n                @if (getAsChannel(activeConversation); as channel) {\r\n                    @if (channel.tutorialGroupId && channel.tutorialGroupTitle) {\r\n                        <a\r\n                            (click)=\"clear()\"\r\n                            class=\"btn btn-info btn-sm ms-2\"\r\n                            [routerLink]=\"['/courses', course.id, 'tutorial-groups', channel.tutorialGroupId]\"\r\n                            role=\"button\"\r\n                            jhiTranslate=\"artemisApp.entities.tutorialGroup.channelReverse\"\r\n                            [translateValues]=\"{ title: channel.tutorialGroupTitle }\"\r\n                        ></a>\r\n                    }\r\n                }\r\n            </h4>\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"clear()\"></button>\r\n        </div>\r\n        <div>\r\n            <ul class=\"nav nav-tabs\">\r\n                <li class=\"nav-item\">\r\n                    <a\r\n                        class=\"nav-link info-tab\"\r\n                        [class.active]=\"selectedTab === Tabs.INFO\"\r\n                        role=\"button\"\r\n                        (click)=\"selectedTab = Tabs.INFO\"\r\n                        jhiTranslate=\"artemisApp.dialogs.conversationDetail.tabs.info\"\r\n                    ></a>\r\n                </li>\r\n                @if (!isOneToOneChat) {\r\n                    <li class=\"nav-item members-tab\">\r\n                        <a\r\n                            class=\"nav-link\"\r\n                            [class.active]=\"selectedTab === Tabs.MEMBERS\"\r\n                            role=\"button\"\r\n                            (click)=\"selectedTab = Tabs.MEMBERS\"\r\n                            jhiTranslate=\"artemisApp.dialogs.conversationDetail.tabs.members\"\r\n                        ></a>\r\n                    </li>\r\n                    <li class=\"nav-item settings-tab\">\r\n                        <a\r\n                            class=\"nav-link\"\r\n                            [class.active]=\"selectedTab === Tabs.SETTINGS\"\r\n                            role=\"button\"\r\n                            (click)=\"selectedTab = Tabs.SETTINGS\"\r\n                            jhiTranslate=\"artemisApp.dialogs.conversationDetail.tabs.settings\"\r\n                        ></a>\r\n                    </li>\r\n                }\r\n            </ul>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            @switch (selectedTab) {\r\n                @case (Tabs.MEMBERS) {\r\n                    <jhi-conversation-members\r\n                        [course]=\"course\"\r\n                        [activeConversationInput]=\"activeConversation\"\r\n                        (changesPerformed)=\"changesWerePerformed = true\"\r\n                        (userNameClicked)=\"onUserNameClicked($event)\"\r\n                    />\r\n                }\r\n                @case (Tabs.INFO) {\r\n                    <jhi-conversation-info [activeConversation]=\"activeConversation\" [course]=\"course\" (changesPerformed)=\"changesWerePerformed = true\" />\r\n                }\r\n                @case (Tabs.SETTINGS) {\r\n                    <jhi-conversation-settings\r\n                        [activeConversation]=\"activeConversation\"\r\n                        [course]=\"course\"\r\n                        (channelArchivalChange)=\"onArchivalChange()\"\r\n                        (channelPrivacyChange)=\"onPrivacyChange()\"\r\n                        (channelDeleted)=\"onChannelDeleted()\"\r\n                        (conversationLeave)=\"onConversationLeave()\"\r\n                    />\r\n                }\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n", "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ConversationDTO, shouldNotifyRecipient } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ChannelDTO, getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { faBoxArchive, faBoxOpen, faEllipsisVertical, faGear, faHeart as faHearthSolid, faVolumeUp, faVolumeXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHeart as faHeartRegular } from '@fortawesome/free-regular-svg-icons';\r\nimport { EMPTY, Subject, debounceTime, distinctUntilChanged, from, takeUntil } from 'rxjs';\r\nimport { catchError, mergeWith } from 'rxjs/operators';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { getAsGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport {\r\n    ConversationDetailDialogComponent,\r\n    ConversationDetailTabs,\r\n} from 'app/overview/course-conversations/dialogs/conversation-detail-dialog/conversation-detail-dialog.component';\r\nimport { isOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { defaultFirstLayerDialogOptions, getChannelSubTypeReferenceTranslationKey } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { NotificationService } from 'app/shared/notification/notification.service';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { RouterLink } from '@angular/router';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-options',\r\n    templateUrl: './conversation-options.component.html',\r\n    styleUrls: ['./conversation-options.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [FaIconComponent, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, RouterLink, NgbDropdownButtonItem, ArtemisTranslatePipe],\r\n})\r\nexport class ConversationOptionsComponent implements OnInit, OnDestroy {\r\n    conversationService = inject(ConversationService);\r\n    private metisService = inject(MetisService);\r\n    private notificationService = inject(NotificationService);\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    favorite$ = new Subject<boolean>();\r\n    hide$ = new Subject<boolean>();\r\n    mute$ = new Subject<boolean>();\r\n\r\n    course: Course;\r\n\r\n    @Input() conversation: ConversationDTO;\r\n\r\n    @Output() onUpdateSidebar = new EventEmitter<void>();\r\n\r\n    conversationAsChannel?: ChannelDTO;\r\n    channelSubTypeReferenceTranslationKey?: string;\r\n    channelSubTypeReferenceRouterLink?: string;\r\n\r\n    faEllipsisVertical = faEllipsisVertical;\r\n    faHeartSolid = faHearthSolid;\r\n    faHeartRegular = faHeartRegular;\r\n    faBoxArchive = faBoxArchive;\r\n    faBoxOpen = faBoxOpen;\r\n    faVolumeXmark = faVolumeXmark;\r\n    faVolumeUp = faVolumeUp;\r\n    faGear = faGear;\r\n\r\n    getAsGroupChat = getAsGroupChatDTO;\r\n\r\n    isOneToOneChat = isOneToOneChatDTO;\r\n\r\n    ngOnInit(): void {\r\n        this.course = this.metisService.getCourse();\r\n        this.updateConversationIsFavorite();\r\n        this.updateConversationIsHidden();\r\n        this.updateConversationIsMuted();\r\n        this.updateConversationShouldNotifyRecipient();\r\n        this.conversationAsChannel = getAsChannelDTO(this.conversation);\r\n        this.channelSubTypeReferenceTranslationKey = getChannelSubTypeReferenceTranslationKey(this.conversationAsChannel?.subType);\r\n        this.channelSubTypeReferenceRouterLink = this.metisService.getLinkForChannelSubType(this.conversationAsChannel);\r\n    }\r\n\r\n    onArchiveClicked(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        if (!this.course.id || !this.conversation.id) {\r\n            return;\r\n        }\r\n\r\n        if (!this.conversation.isHidden && this.conversation.isFavorite) {\r\n            this.conversationService.updateIsFavorite(this.course.id, this.conversation.id, false).subscribe({\r\n                next: () => {\r\n                    this.conversation.isFavorite = false;\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n        }\r\n        this.hide$.next(!this.conversation.isHidden);\r\n    }\r\n\r\n    onFavoriteClicked($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (!this.course.id || !this.conversation.id) {\r\n            return;\r\n        }\r\n\r\n        if (this.conversation.isHidden && !this.conversation.isFavorite) {\r\n            this.conversationService.updateIsHidden(this.course.id, this.conversation.id, false).subscribe({\r\n                next: () => {\r\n                    this.conversation.isHidden = false;\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n        }\r\n        this.favorite$.next(!this.conversation.isFavorite);\r\n    }\r\n\r\n    onMuteClicked($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.mute$.next(!this.conversation.isMuted);\r\n    }\r\n\r\n    openConversationDetailDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(ConversationDetailDialogComponent, defaultFirstLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.activeConversation = this.conversation;\r\n        modalRef.componentInstance.selectedTab = ConversationDetailTabs.SETTINGS;\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe(() => {\r\n                this.onUpdateSidebar.emit();\r\n            });\r\n    }\r\n\r\n    private updateConversationIsFavorite() {\r\n        this.favorite$.pipe(debounceTime(100), distinctUntilChanged(), takeUntil(this.ngUnsubscribe)).subscribe((isFavorite) => {\r\n            if (!this.course.id || !this.conversation.id) return;\r\n\r\n            this.conversationService.updateIsFavorite(this.course.id, this.conversation.id, isFavorite).subscribe({\r\n                next: () => {\r\n                    this.conversation.isFavorite = isFavorite;\r\n                    this.onUpdateSidebar.emit();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateConversationIsHidden() {\r\n        this.hide$.pipe(debounceTime(100), distinctUntilChanged(), takeUntil(this.ngUnsubscribe)).subscribe((isHidden) => {\r\n            if (!this.course.id || !this.conversation.id) return;\r\n\r\n            this.conversationService.updateIsHidden(this.course.id, this.conversation.id, isHidden).subscribe({\r\n                next: () => {\r\n                    this.conversation.isHidden = isHidden;\r\n                    this.onUpdateSidebar.emit();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateConversationIsMuted() {\r\n        this.mute$.pipe(debounceTime(100), distinctUntilChanged(), takeUntil(this.ngUnsubscribe)).subscribe((isMuted) => {\r\n            if (!this.course.id || !this.conversation.id) return;\r\n\r\n            this.conversationService.updateIsMuted(this.course.id, this.conversation.id, isMuted).subscribe({\r\n                next: () => {\r\n                    this.conversation.isMuted = isMuted;\r\n                    this.onUpdateSidebar.emit();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateConversationShouldNotifyRecipient() {\r\n        this.onUpdateSidebar.pipe(mergeWith(this.onUpdateSidebar), takeUntil(this.ngUnsubscribe)).subscribe(() => {\r\n            if (!this.conversation.id) return;\r\n\r\n            if (shouldNotifyRecipient(this.conversation)) {\r\n                this.notificationService.unmuteNotificationsForConversation(this.conversation.id);\r\n            } else {\r\n                this.notificationService.muteNotificationsForConversation(this.conversation.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n", "<div class=\"option-buttons\" (click)=\"$event.stopPropagation()\">\r\n    <button class=\"favorite btn btn-outline-secondary sidebar-button p-0\" (click)=\"onFavoriteClicked($event)\" type=\"button\">\r\n        <fa-icon [icon]=\"conversation.isFavorite ? faHeartSolid : faHeartRegular\" size=\"sm\" />\r\n    </button>\r\n    <div ngbDropdown container=\"body\" class=\"d-inline-block\">\r\n        <button class=\"btn btn-outline-secondary dropdown-toggle sidebar-button py-0 px-2\" type=\"button\" ngbDropdownToggle>\r\n            <fa-icon [icon]=\"faEllipsisVertical\" size=\"sm\" />\r\n        </button>\r\n        <div ngbDropdownMenu>\r\n            @if (conversationAsChannel?.subTypeReferenceId) {\r\n                <a class=\"sub-type-reference\" ngbDropdownItem [routerLink]=\"channelSubTypeReferenceRouterLink\">\r\n                    {{ channelSubTypeReferenceTranslationKey | artemisTranslate }}\r\n                </a>\r\n            }\r\n            @if (!isOneToOneChat(conversation)) {\r\n                <button class=\"setting\" ngbDropdownItem (click)=\"openConversationDetailDialog($event)\">\r\n                    <fa-icon [icon]=\"faGear\" size=\"sm\" class=\"me-1\" />\r\n                    {{ 'artemisApp.conversationsLayout.conversationSelectionSideBar.sideBarSection.settings' | artemisTranslate }}\r\n                </button>\r\n            }\r\n            <button class=\"mute\" ngbDropdownItem (click)=\"onMuteClicked($event)\">\r\n                <fa-icon [icon]=\"conversation.isMuted ? faVolumeUp : faVolumeXmark\" size=\"sm\" class=\"me-1\" />\r\n                {{\r\n                    conversation.isMuted\r\n                        ? ('artemisApp.conversationsLayout.conversationSelectionSideBar.sideBarSection.unmute' | artemisTranslate)\r\n                        : ('artemisApp.conversationsLayout.conversationSelectionSideBar.sideBarSection.mute' | artemisTranslate)\r\n                }}\r\n            </button>\r\n            <button class=\"hide\" ngbDropdownItem (click)=\"onArchiveClicked($event)\">\r\n                <fa-icon [icon]=\"conversation.isHidden ? faBoxOpen : faBoxArchive\" size=\"sm\" class=\"me-1\" />\r\n                {{\r\n                    conversation.isHidden\r\n                        ? ('artemisApp.conversationsLayout.conversationSelectionSideBar.sideBarSection.show' | artemisTranslate)\r\n                        : ('artemisApp.conversationsLayout.conversationSelectionSideBar.sideBarSection.hide' | artemisTranslate)\r\n                }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { DifficultyLevel } from 'app/entities/exercise.model';\r\nimport { SidebarCardElement, SidebarTypes } from 'app/types/sidebar';\r\nimport { SidebarEventService } from '../sidebar-event.service';\r\nimport { ActivatedRoute, Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { Location, NgClass } from '@angular/common';\r\nimport { SidebarCardItemComponent } from '../sidebar-card-item/sidebar-card-item.component';\r\nimport { ConversationOptionsComponent } from '../conversation-options/conversation-options.component';\r\n\r\n@Component({\r\n    selector: 'jhi-small-sidebar-card',\r\n    templateUrl: './sidebar-card-small.component.html',\r\n    styleUrls: ['./sidebar-card-small.component.scss'],\r\n    imports: [NgClass, RouterLink, RouterLinkActive, SidebarCardItemComponent, ConversationOptionsComponent],\r\n})\r\nexport class SidebarCardSmallComponent {\r\n    private sidebarEventService = inject(SidebarEventService);\r\n    private router = inject(Router);\r\n    private route = inject(ActivatedRoute);\r\n    private location = inject(Location);\r\n\r\n    DifficultyLevel = DifficultyLevel;\r\n    @Output() onUpdateSidebar = new EventEmitter<void>();\r\n    @Input({ required: true }) sidebarItem: SidebarCardElement;\r\n    @Input() sidebarType?: SidebarTypes;\r\n    @Input() itemSelected?: boolean;\r\n    /** Key used for grouping or categorizing sidebar items */\r\n    @Input() groupKey?: string;\r\n\r\n    emitStoreAndRefresh(itemId: number | string) {\r\n        this.sidebarEventService.emitSidebarCardEvent(itemId);\r\n        if (this.sidebarType !== 'conversation') {\r\n            this.refreshChildComponent();\r\n        }\r\n    }\r\n\r\n    refreshChildComponent(): void {\r\n        this.router.navigate(['../'], { skipLocationChange: true, relativeTo: this.route.firstChild }).then(() => {\r\n            if (this.itemSelected) {\r\n                this.router.navigate(['./' + this.sidebarItem?.id], { relativeTo: this.route });\r\n            } else {\r\n                this.router.navigate([this.location.path(), this.sidebarItem?.id], { replaceUrl: true });\r\n            }\r\n        });\r\n    }\r\n}\r\n", "<!-- Explicitly implemented query parameters for the messages module as a workaround, since routing in the messages module\r\n operates differently over the MetisConversations service, it will get adjusted in a followup PR -->\r\n<div\r\n    id=\"test-sidebar-card-small\"\r\n    class=\"d-flex justify-content-between rounded-3 border-start border-5 highlight-card bg-module align-items-end py-1\"\r\n    [ngClass]=\"!!this.sidebarItem.conversation?.hasUnreadMessage ? 'border-primary' : 'border-module'\"\r\n    [routerLink]=\"itemSelected ? '../communication' : './communication'\"\r\n    [queryParams]=\"{ conversationId: sidebarItem?.id }\"\r\n    (click)=\"emitStoreAndRefresh(sidebarItem.id)\"\r\n    [routerLinkActive]=\"'bg-selected border-selected'\"\r\n>\r\n    <div class=\"w-75 align-self-center\">\r\n        <jhi-sidebar-card-item\r\n            [unreadCount]=\"this.sidebarItem.conversation?.unreadMessagesCount ?? 0\"\r\n            [groupKey]=\"groupKey\"\r\n            [sidebarType]=\"sidebarType\"\r\n            [sidebarItem]=\"sidebarItem\"\r\n        />\r\n    </div>\r\n    @if (sidebarItem.conversation) {\r\n        <div>\r\n            <jhi-conversation-options [conversation]=\"sidebarItem.conversation!\" (onUpdateSidebar)=\"onUpdateSidebar.emit()\" />\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { DifficultyLevel } from 'app/entities/exercise.model';\r\nimport { SidebarCardElement, SidebarTypes } from 'app/types/sidebar';\r\nimport { SidebarEventService } from '../sidebar-event.service';\r\nimport { ActivatedRoute, Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { Location, NgClass } from '@angular/common';\r\nimport { SidebarCardItemComponent } from '../sidebar-card-item/sidebar-card-item.component';\r\n\r\n@Component({\r\n    selector: 'jhi-medium-sidebar-card',\r\n    templateUrl: './sidebar-card-medium.component.html',\r\n    styleUrls: ['./sidebar-card-medium.component.scss'],\r\n    imports: [NgClass, SidebarCardItemComponent, RouterLink, RouterLinkActive],\r\n})\r\nexport class SidebarCardMediumComponent {\r\n    private sidebarEventService = inject(SidebarEventService);\r\n    private router = inject(Router);\r\n    private route = inject(ActivatedRoute);\r\n    private location = inject(Location);\r\n\r\n    DifficultyLevel = DifficultyLevel;\r\n    @Input({ required: true }) sidebarItem: SidebarCardElement;\r\n    @Input() sidebarType?: SidebarTypes;\r\n    @Input() itemSelected?: boolean;\r\n    @Output() pageChange = new EventEmitter<number>();\r\n    /** Key used for grouping or categorizing sidebar items */\r\n    @Input() groupKey?: string;\r\n\r\n    emitStoreAndRefresh(itemId: number | string) {\r\n        this.sidebarEventService.emitSidebarCardEvent(itemId);\r\n        this.refreshChildComponent();\r\n    }\r\n\r\n    emitPageChangeForExam() {\r\n        this.pageChange.emit();\r\n    }\r\n\r\n    refreshChildComponent(): void {\r\n        this.router.navigate(['../'], { skipLocationChange: true, relativeTo: this.route.firstChild }).then(() => {\r\n            if (this.itemSelected) {\r\n                this.router.navigate(['./' + this.sidebarItem?.id], { relativeTo: this.route });\r\n            } else {\r\n                this.router.navigate([this.location.path(), this.sidebarItem?.id], { replaceUrl: true });\r\n            }\r\n        });\r\n    }\r\n}\r\n", "@if (sidebarType === 'inExam') {\r\n    <div\r\n        id=\"test-sidebar-card-medium\"\r\n        class=\"pointer rounded-3 col-12 px-1 pt-2 pb-1 border-5 highlight-card bg-module hover-effect\"\r\n        [ngClass]=\"{ 'bg-selected border-selected': itemSelected }\"\r\n        (click)=\"emitPageChangeForExam()\"\r\n    >\r\n        <jhi-sidebar-card-item [groupKey]=\"groupKey\" [sidebarType]=\"sidebarType\" [sidebarItem]=\"sidebarItem\" />\r\n    </div>\r\n} @else {\r\n    <div\r\n        id=\"test-sidebar-card-medium\"\r\n        class=\"pointer rounded-3 col-12 px-1 py-2 border-start border-5 highlight-card bg-module hover-effect\"\r\n        [ngClass]=\"{\r\n            'border-success': sidebarItem?.difficulty === DifficultyLevel.EASY,\r\n            'border-warning': sidebarItem?.difficulty === DifficultyLevel.MEDIUM,\r\n            'border-danger': sidebarItem?.difficulty === DifficultyLevel.HARD,\r\n            'border-module': !sidebarItem?.difficulty,\r\n        }\"\r\n        [routerLink]=\"'./' + sidebarItem?.id\"\r\n        (click)=\"emitStoreAndRefresh(sidebarItem.id)\"\r\n        [routerLinkActive]=\"'bg-selected border-selected'\"\r\n    >\r\n        <jhi-sidebar-card-item\r\n            [unreadCount]=\"this.sidebarItem.conversation?.unreadMessagesCount ?? 0\"\r\n            [groupKey]=\"groupKey\"\r\n            [sidebarType]=\"sidebarType\"\r\n            [sidebarItem]=\"sidebarItem\"\r\n        />\r\n    </div>\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { SidebarCardElement, SidebarTypes } from 'app/types/sidebar';\r\nimport { SidebarEventService } from '../sidebar-event.service';\r\nimport { ActivatedRoute, Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { SidebarCardItemComponent } from '../sidebar-card-item/sidebar-card-item.component';\r\n\r\n@Component({\r\n    selector: 'jhi-large-sidebar-card',\r\n    templateUrl: './sidebar-card-large.component.html',\r\n    styleUrls: ['./sidebar-card-large.component.scss'],\r\n    imports: [RouterLink, RouterLinkActive, SidebarCardItemComponent],\r\n})\r\nexport class SidebarCardLargeComponent {\r\n    private sidebarEventService = inject(SidebarEventService);\r\n    private router = inject(Router);\r\n    private route = inject(ActivatedRoute);\r\n    private location = inject(Location);\r\n\r\n    @Input({ required: true }) sidebarItem: SidebarCardElement;\r\n    @Input() sidebarType?: SidebarTypes;\r\n    @Input() itemSelected?: boolean;\r\n    /** Key used for grouping or categorizing sidebar items */\r\n    @Input() groupKey?: string;\r\n\r\n    emitStoreAndRefresh(itemId: number | string) {\r\n        this.sidebarEventService.emitSidebarCardEvent(itemId);\r\n        this.refreshChildComponent();\r\n    }\r\n\r\n    refreshChildComponent(): void {\r\n        this.router.navigate(['../'], { skipLocationChange: true, relativeTo: this.route.firstChild }).then(() => {\r\n            if (this.itemSelected) {\r\n                this.router.navigate(['./' + this.sidebarItem?.id], { relativeTo: this.route });\r\n            } else {\r\n                this.router.navigate([this.location.path(), this.sidebarItem?.id], { replaceUrl: true });\r\n            }\r\n        });\r\n    }\r\n}\r\n", "<div\r\n    id=\"test-sidebar-card-large\"\r\n    class=\"pointer rounded-3 col-12 px-1 py-2 border-5 highlight-card bg-module\"\r\n    [routerLink]=\"'./' + sidebarItem?.id\"\r\n    (click)=\"emitStoreAndRefresh(sidebarItem.id)\"\r\n    [routerLinkActive]=\"'bg-selected border-selected'\"\r\n>\r\n    <!-- groupKey is used to determine the display format of channel names in different sidebar sections -->\r\n    <jhi-sidebar-card-item [groupKey]=\"groupKey\" [sidebarType]=\"sidebarType\" [sidebarItem]=\"sidebarItem\" />\r\n</div>\r\n", "import { ComponentRef, Directive, EventEmitter, Input, OnDestroy, OnInit, Output, Type, ViewContainerRef, inject } from '@angular/core';\r\nimport { SidebarCardSmallComponent } from 'app/shared/sidebar/sidebar-card-small/sidebar-card-small.component';\r\nimport { SidebarCardMediumComponent } from 'app/shared/sidebar/sidebar-card-medium/sidebar-card-medium.component';\r\nimport { SidebarCardLargeComponent } from 'app/shared/sidebar/sidebar-card-large/sidebar-card-large.component';\r\nimport { SidebarCardElement, SidebarTypes } from 'app/types/sidebar';\r\n\r\n@Directive({\r\n    selector: '[jhiSidebarCard]',\r\n})\r\nexport class SidebarCardDirective implements OnInit, OnDestroy {\r\n    viewContainerRef = inject(ViewContainerRef);\r\n\r\n    @Input() size = 'M';\r\n    @Input() sidebarItem: SidebarCardElement;\r\n    @Input() sidebarType?: SidebarTypes;\r\n    @Input() itemSelected?: boolean;\r\n    @Input() groupKey?: string;\r\n\r\n    @Output() onUpdateSidebar = new EventEmitter<void>();\r\n\r\n    private componentRef: ComponentRef<any>;\r\n\r\n    ngOnInit() {\r\n        const cards: { [key: string]: Type<SidebarCardSmallComponent | SidebarCardMediumComponent | SidebarCardLargeComponent> } = {\r\n            S: SidebarCardSmallComponent,\r\n            M: SidebarCardMediumComponent,\r\n            L: SidebarCardLargeComponent,\r\n        };\r\n\r\n        const cardType = cards[this.size];\r\n        if (cardType) {\r\n            this.componentRef = this.viewContainerRef.createComponent(cardType);\r\n            this.assignAttributes();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.componentRef) {\r\n            this.componentRef.destroy();\r\n        }\r\n    }\r\n\r\n    private assignAttributes() {\r\n        if (this.componentRef) {\r\n            if (this.groupKey !== undefined) {\r\n                this.componentRef.instance.groupKey = this.groupKey;\r\n            }\r\n\r\n            this.componentRef.instance.itemSelected = this.itemSelected;\r\n            this.componentRef.instance.sidebarType = this.sidebarType;\r\n            this.componentRef.instance.sidebarItem = this.sidebarItem;\r\n            this.componentRef.instance.sidebarItem.title = this.removeChannelPrefix(this.sidebarItem.title);\r\n\r\n            if (this.size == 'S') {\r\n                this.componentRef.instance.onUpdateSidebar = this.onUpdateSidebar;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeChannelPrefix(name: string): string {\r\n        const prefixes = ['exercise-', 'lecture-', 'exam-'];\r\n        const channelTypes = ['exerciseChannels', 'lectureChannels', 'examChannels'];\r\n\r\n        if (channelTypes.includes(<string>this.groupKey)) {\r\n            prefixes.forEach((prefix) => {\r\n                if (name?.startsWith(prefix)) {\r\n                    name = name.substring(prefix.length);\r\n                }\r\n            });\r\n        }\r\n        return name;\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, input } from '@angular/core';\r\nimport { faChevronRight, faFile } from '@fortawesome/free-solid-svg-icons';\r\nimport { AccordionGroups, ChannelTypeIcons, CollapseState, SidebarCardElement, SidebarItemShowAlways, SidebarTypes } from 'app/types/sidebar';\r\nimport { Params } from '@angular/router';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass, TitleCasePipe } from '@angular/common';\r\nimport { SidebarCardDirective } from '../sidebar-card.directive';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\nimport { SearchFilterPipe } from 'app/shared/pipes/search-filter.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-sidebar-accordion',\r\n    templateUrl: './sidebar-accordion.component.html',\r\n    styleUrls: ['./sidebar-accordion.component.scss'],\r\n    imports: [FaIconComponent, NgbCollapse, NgClass, SidebarCardDirective, TitleCasePipe, ArtemisTranslatePipe, SearchFilterPipe],\r\n})\r\nexport class SidebarAccordionComponent implements OnChanges, OnInit {\r\n    protected readonly Object = Object;\r\n\r\n    @Output() onUpdateSidebar = new EventEmitter<void>();\r\n    @Input() searchValue: string;\r\n    @Input() routeParams: Params;\r\n    @Input() groupedData: AccordionGroups;\r\n    @Input() sidebarType?: SidebarTypes;\r\n    @Input() storageId?: string = '';\r\n    @Input() courseId?: number;\r\n    @Input() itemSelected?: boolean;\r\n    @Input() showLeadingIcon = false;\r\n    @Input() channelTypeIcon?: ChannelTypeIcons;\r\n    sidebarItemAlwaysShow = input.required<SidebarItemShowAlways>();\r\n    @Input() collapseState: CollapseState;\r\n    @Input() isFilterActive = false;\r\n\r\n    readonly faChevronRight = faChevronRight;\r\n    readonly faFile = faFile;\r\n    totalUnreadMessagesPerGroup: { [key: string]: number } = {};\r\n\r\n    ngOnInit() {\r\n        this.expandGroupWithSelectedItem();\r\n        this.setStoredCollapseState();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.searchValue || this.isFilterActive) {\r\n            this.expandAll();\r\n        } else {\r\n            this.setStoredCollapseState();\r\n        }\r\n        this.calculateUnreadMessagesOfGroup();\r\n    }\r\n\r\n    setStoredCollapseState() {\r\n        const storedCollapseState: string | null = localStorage.getItem('sidebar.accordion.collapseState.' + this.storageId + '.byCourse.' + this.courseId);\r\n        if (storedCollapseState) this.collapseState = JSON.parse(storedCollapseState);\r\n    }\r\n\r\n    expandAll() {\r\n        Object.keys(this.collapseState).forEach((key) => {\r\n            this.collapseState[key] = false;\r\n        });\r\n    }\r\n\r\n    expandGroupWithSelectedItem() {\r\n        if (this.routeParams) {\r\n            const routeParamKey = Object.keys(this.routeParams)[0];\r\n            if (this.routeParams[routeParamKey] && this.groupedData) {\r\n                const groupWithSelectedItem = Object.entries(this.groupedData).find((groupedItem) =>\r\n                    groupedItem[1].entityData.some((entityItem: SidebarCardElement) => entityItem.id === Number(this.routeParams[routeParamKey])),\r\n                );\r\n                if (groupWithSelectedItem) {\r\n                    const groupName = groupWithSelectedItem[0];\r\n                    this.collapseState[groupName] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateUnreadMessagesOfGroup(): void {\r\n        if (!this.groupedData) {\r\n            this.totalUnreadMessagesPerGroup = {};\r\n            return;\r\n        }\r\n\r\n        Object.keys(this.groupedData).forEach((groupKey) => {\r\n            this.totalUnreadMessagesPerGroup[groupKey] = this.groupedData[groupKey].entityData\r\n                .filter((item: SidebarCardElement) => item.conversation?.unreadMessagesCount)\r\n                .reduce((sum, item) => sum + (item.conversation?.unreadMessagesCount || 0), 0);\r\n        });\r\n    }\r\n\r\n    toggleGroupCategoryCollapse(groupCategoryKey: string) {\r\n        this.collapseState[groupCategoryKey] = !this.collapseState[groupCategoryKey];\r\n        localStorage.setItem('sidebar.accordion.collapseState.' + this.storageId + '.byCourse.' + this.courseId, JSON.stringify(this.collapseState));\r\n    }\r\n}\r\n", "@for (groupKey of Object.keys(groupedData); track groupKey; let i = $index) {\r\n    @if ((groupedData[groupKey].entityData | searchFilter: ['title', 'type'] : searchValue)?.length || sidebarItemAlwaysShow()[groupKey]) {\r\n        <div id=\"test-accordion-item-container-{{ i }}\" class=\"pointer\">\r\n            <div\r\n                [id]=\"'test-accordion-item-header-' + groupKey\"\r\n                class=\"control-label d-flex align-items-center justify-content-between py-2 bg-module\"\r\n                (click)=\"toggleGroupCategoryCollapse(groupKey)\"\r\n            >\r\n                <div class=\"my-2\">\r\n                    @if (showLeadingIcon) {\r\n                        <fa-icon [fixedWidth]=\"true\" [icon]=\"$any(channelTypeIcon)?.[groupKey]\" />\r\n                    }\r\n                    {{ 'artemisApp.courseOverview.sidebar.' + groupKey | artemisTranslate | titlecase }}\r\n                    @if (!groupedData[groupKey].isHideCount) {\r\n                        ({{ (groupedData[groupKey].entityData | searchFilter: ['title', 'type'] : searchValue)?.length }})\r\n                    }\r\n                </div>\r\n                <div class=\"icon-container pe-3\">\r\n                    @if (totalUnreadMessagesPerGroup[groupKey] > 0 && collapseState[groupKey]) {\r\n                        <span class=\"unread-count me-2\">{{ totalUnreadMessagesPerGroup[groupKey] }}</span>\r\n                    }\r\n                    <fa-icon [icon]=\"faChevronRight\" class=\"rotate-icon chevron-position\" [class.rotated]=\"!collapseState[groupKey]\" />\r\n                </div>\r\n            </div>\r\n            @if ((groupedData[groupKey].entityData | searchFilter: ['title', 'type'] : searchValue)?.length) {\r\n                <hr class=\"my-0\" />\r\n                <div id=\"test-accordion-item-content\" [ngbCollapse]=\"collapseState[groupKey]\" class=\"p-2 bg-body\">\r\n                    @for (sidebarItem of groupedData[groupKey].entityData | searchFilter: ['title', 'type'] : searchValue; let last = $last; track sidebarItem) {\r\n                        <div [ngClass]=\"{ 'mb-2': !last }\">\r\n                            <!-- loading sidebarCard with help of a directive depending on its size input-->\r\n                            <div\r\n                                jhiSidebarCard\r\n                                [size]=\"sidebarItem.size\"\r\n                                [itemSelected]=\"itemSelected\"\r\n                                [sidebarType]=\"sidebarType\"\r\n                                [sidebarItem]=\"sidebarItem\"\r\n                                [groupKey]=\"groupKey\"\r\n                                (onUpdateSidebar)=\"onUpdateSidebar.emit()\"\r\n                            ></div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                @if (!collapseState[groupKey]) {\r\n                    <hr class=\"my-0\" />\r\n                }\r\n            }\r\n        </div>\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, effect, inject, input, output } from '@angular/core';\r\nimport { faCheckDouble, faFilter, faFilterCircleXmark, faHashtag, faPeopleGroup, faPlusCircle, faSearch, faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Subscription, distinctUntilChanged } from 'rxjs';\r\nimport { ProfileService } from '../layouts/profiles/profile.service';\r\nimport { ChannelTypeIcons, CollapseState, SidebarCardSize, SidebarData, SidebarItemShowAlways, SidebarTypes } from 'app/types/sidebar';\r\nimport { SidebarEventService } from './sidebar-event.service';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { ExerciseFilterOptions, ExerciseFilterResults } from 'app/types/exercise-filter';\r\nimport {\r\n    getAchievablePointsAndAchievedScoreFilterOptions,\r\n    getExerciseCategoryFilterOptions,\r\n    getExerciseDifficultyFilterOptions,\r\n    getExerciseTypeFilterOptions,\r\n} from 'app/shared/sidebar/sidebar.helper';\r\nimport { ExerciseFilterModalComponent } from 'app/shared/exercise-filter/exercise-filter-modal.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { SearchFilterComponent } from '../search-filter/search-filter.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { SidebarAccordionComponent } from './sidebar-accordion/sidebar-accordion.component';\r\nimport { SidebarCardDirective } from './sidebar-card.directive';\r\nimport { SearchFilterPipe } from 'app/shared/pipes/search-filter.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-sidebar',\r\n    templateUrl: './sidebar.component.html',\r\n    styleUrls: ['./sidebar.component.scss'],\r\n    imports: [\r\n        NgClass,\r\n        SearchFilterComponent,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        NgbDropdownButtonItem,\r\n        NgbDropdownItem,\r\n        SidebarAccordionComponent,\r\n        SidebarCardDirective,\r\n        SearchFilterPipe,\r\n    ],\r\n})\r\nexport class SidebarComponent implements OnDestroy, OnChanges, OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private profileService = inject(ProfileService);\r\n    private sidebarEventService = inject(SidebarEventService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    @Output() onSelectConversation = new EventEmitter<number | string>();\r\n    @Output() onUpdateSidebar = new EventEmitter<void>();\r\n    onDirectChatPressed = output<void>();\r\n    onGroupChatPressed = output<void>();\r\n    onBrowsePressed = output<void>();\r\n    onCreateChannelPressed = output<void>();\r\n    onMarkAllChannelsAsRead = output<void>();\r\n    @Input() searchFieldEnabled = true;\r\n    @Input() sidebarData: SidebarData;\r\n    @Input() courseId?: number;\r\n    @Input() itemSelected?: boolean;\r\n    @Input() channelTypeIcon?: ChannelTypeIcons;\r\n    @Input() collapseState: CollapseState;\r\n    sidebarItemAlwaysShow = input.required<SidebarItemShowAlways>();\r\n    @Input() showFilter = false;\r\n    inCommunication = input<boolean>(false);\r\n    searchValue = '';\r\n    isCollapsed = false;\r\n    readonly reEmitNonDistinctSidebarEvents = input<boolean>(false);\r\n\r\n    exerciseId: string;\r\n\r\n    paramSubscription?: Subscription;\r\n    profileSubscription?: Subscription;\r\n    sidebarEventSubscription?: Subscription;\r\n\r\n    routeParams: Params;\r\n    isProduction = true;\r\n    isTestServer = false;\r\n\r\n    private modalRef?: NgbModalRef;\r\n\r\n    readonly faFilter = faFilter;\r\n    readonly faFilterCurrentlyApplied = faFilterCircleXmark;\r\n    readonly faUser = faUser;\r\n    readonly faPeopleGroup = faPeopleGroup;\r\n    readonly faPlusCircle = faPlusCircle;\r\n    readonly faSearch = faSearch;\r\n    readonly faHashtag = faHashtag;\r\n    readonly faCheckDouble = faCheckDouble;\r\n\r\n    sidebarDataBeforeFiltering: SidebarData;\r\n\r\n    exerciseFilters?: ExerciseFilterOptions;\r\n    isFilterActive = false;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.subscribeToSidebarEvents();\r\n        });\r\n    }\r\n\r\n    createNewChannel() {\r\n        this.onCreateChannelPressed.emit();\r\n    }\r\n\r\n    browseChannels() {\r\n        this.onBrowsePressed.emit();\r\n    }\r\n\r\n    createDirectChat() {\r\n        this.onDirectChatPressed.emit();\r\n    }\r\n\r\n    createGroupChat() {\r\n        this.onGroupChatPressed.emit();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.profileSubscription = this.profileService.getProfileInfo()?.subscribe((profileInfo) => {\r\n            this.isProduction = profileInfo?.inProduction;\r\n            this.isTestServer = profileInfo?.testServer ?? false;\r\n        });\r\n    }\r\n\r\n    private subscribeToSidebarEvents() {\r\n        this.sidebarEventSubscription?.unsubscribe();\r\n        const listener = this.sidebarEventService.sidebarCardEventListener();\r\n        let pipe;\r\n        if (this.reEmitNonDistinctSidebarEvents()) {\r\n            pipe = listener;\r\n        } else {\r\n            pipe = listener.pipe(\r\n                distinctUntilChanged(),\r\n                // switchMap(sidebarCardEvent => sidebarCardEvent.onEvent),\r\n            );\r\n        }\r\n        this.sidebarEventSubscription = pipe.subscribe((itemId) => {\r\n            if (itemId) {\r\n                this.storeLastSelectedItem(itemId);\r\n                if (this.sidebarData.sidebarType == 'conversation') {\r\n                    this.onSelectConversation.emit(itemId);\r\n                    this.onUpdateSidebar.emit();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.paramSubscription?.unsubscribe();\r\n        this.paramSubscription = this.route.params?.subscribe((params) => {\r\n            this.routeParams = params;\r\n        });\r\n    }\r\n\r\n    setSearchValue(searchValue: string) {\r\n        this.searchValue = searchValue;\r\n    }\r\n\r\n    storeLastSelectedItem(itemId: number | string) {\r\n        sessionStorage.setItem('sidebar.lastSelectedItem.' + this.sidebarData.storageId + '.byCourse.' + this.courseId, JSON.stringify(itemId));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.paramSubscription?.unsubscribe();\r\n        this.profileSubscription?.unsubscribe();\r\n        this.sidebarEventSubscription?.unsubscribe();\r\n        this.sidebarEventService.emitResetValue();\r\n    }\r\n\r\n    getSize() {\r\n        const size: Record<SidebarTypes, SidebarCardSize> = {\r\n            ['exercise']: 'M',\r\n            ['default']: 'M',\r\n            ['conversation']: 'S',\r\n            ['exam']: 'L',\r\n            ['inExam']: 'M',\r\n        };\r\n        return this.sidebarData.sidebarType ? size[this.sidebarData.sidebarType] : 'M';\r\n    }\r\n\r\n    openFilterExercisesDialog() {\r\n        this.initializeFilterOptions();\r\n\r\n        if (!this.sidebarDataBeforeFiltering) {\r\n            this.sidebarDataBeforeFiltering = cloneDeep(this.sidebarData);\r\n        }\r\n\r\n        this.modalRef = this.modalService.open(ExerciseFilterModalComponent, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n            animation: true,\r\n        });\r\n\r\n        this.modalRef.componentInstance.sidebarData = cloneDeep(this.sidebarDataBeforeFiltering);\r\n        this.modalRef.componentInstance.exerciseFilters = cloneDeep(this.exerciseFilters);\r\n\r\n        this.modalRef.componentInstance.filterApplied.subscribe((exerciseFilterResults: ExerciseFilterResults) => {\r\n            this.sidebarData = exerciseFilterResults.filteredSidebarData!;\r\n            this.exerciseFilters = exerciseFilterResults.appliedExerciseFilters;\r\n            this.isFilterActive = exerciseFilterResults.isFilterActive;\r\n        });\r\n    }\r\n\r\n    initializeFilterOptions() {\r\n        if (this.exerciseFilters) {\r\n            return;\r\n        }\r\n\r\n        const scoreAndPointsFilterOptions = getAchievablePointsAndAchievedScoreFilterOptions(this.sidebarData, this.exerciseFilters);\r\n\r\n        this.exerciseFilters = {\r\n            categoryFilter: getExerciseCategoryFilterOptions(this.sidebarData, this.exerciseFilters),\r\n            exerciseTypesFilter: getExerciseTypeFilterOptions(this.sidebarData, this.exerciseFilters),\r\n            difficultyFilter: getExerciseDifficultyFilterOptions(this.sidebarData, this.exerciseFilters),\r\n            achievedScore: scoreAndPointsFilterOptions?.achievedScore,\r\n            achievablePoints: scoreAndPointsFilterOptions?.achievablePoints,\r\n        };\r\n    }\r\n\r\n    markAllMessagesAsChecked() {\r\n        this.onMarkAllChannelsAsRead.emit();\r\n    }\r\n}\r\n", "<div class=\"sidebar-wrap\">\r\n    <div class=\"d-flex sidebar rounded-3 px-2 sidebar-width hide-on_print\" [ngClass]=\"{ 'sidebar-height-dev': !isProduction || isTestServer, collapsed: isCollapsed }\">\r\n        <div class=\"w-100 bg-module\">\r\n            <div class=\"sidebar-content\" [ngClass]=\"{ collapsed: isCollapsed }\">\r\n                @if (searchFieldEnabled) {\r\n                    <div class=\"mt-2 mb-1\" [ngClass]=\"{ 'd-flex align-items-center': inCommunication() }\">\r\n                        <jhi-search-filter (newSearchEvent)=\"setSearchValue($event)\" class=\"mb-1 flex-grow-1 search-filter\" />\r\n                        @if (showFilter) {\r\n                            <div class=\"ms-2 mt-2 text-primary\">\r\n                                <a (click)=\"openFilterExercisesDialog()\">\r\n                                    @if (isFilterActive) {\r\n                                        <fa-icon [icon]=\"faFilterCurrentlyApplied\" />\r\n                                    } @else {\r\n                                        <fa-icon [icon]=\"faFilter\" />\r\n                                    }\r\n                                    <span jhiTranslate=\"artemisApp.courseOverview.exerciseFilter.filter\"></span>\r\n                                </a>\r\n                            </div>\r\n                        }\r\n\r\n                        @if (inCommunication()) {\r\n                            <div class=\"ms-2 mb-1\" ngbDropdown>\r\n                                <button type=\"button\" class=\"btn btn-primary btn-sm square-button\" ngbDropdownToggle>\r\n                                    <fa-icon [icon]=\"faPlusCircle\" class=\"item-icon\" />\r\n                                </button>\r\n\r\n                                <div ngbDropdownMenu>\r\n                                    @if (sidebarData?.messagingEnabled) {\r\n                                        <button (click)=\"createDirectChat()\" class=\"p-2\" ngbDropdownItem>\r\n                                            <fa-icon [icon]=\"faUser\" class=\"item-icon\" [fixedWidth]=\"true\" />\r\n                                            <span jhiTranslate=\"artemisApp.courseOverview.sidebar.createDirectChat\"></span>\r\n                                        </button>\r\n                                        <button (click)=\"createGroupChat()\" class=\"p-2\" ngbDropdownItem>\r\n                                            <fa-icon [icon]=\"faPeopleGroup\" class=\"item-icon\" [fixedWidth]=\"true\" />\r\n                                            <span jhiTranslate=\"artemisApp.courseOverview.sidebar.createGroupChat\"></span>\r\n                                        </button>\r\n                                    }\r\n                                    @if (sidebarData?.canCreateChannel) {\r\n                                        <button (click)=\"createNewChannel()\" class=\"p-2 createChannel\" ngbDropdownItem>\r\n                                            <fa-icon [icon]=\"faHashtag\" class=\"item-icon\" />\r\n                                            <span jhiTranslate=\"artemisApp.courseOverview.sidebar.createChannel\"></span>\r\n                                        </button>\r\n                                    }\r\n                                    <button (click)=\"browseChannels()\" class=\"p-2\" ngbDropdownItem>\r\n                                        <fa-icon [icon]=\"faSearch\" class=\"item-icon\" />\r\n                                        <span jhiTranslate=\"artemisApp.courseOverview.sidebar.browseChannels\"></span>\r\n                                    </button>\r\n                                    <button (click)=\"markAllMessagesAsChecked()\" class=\"p-2\" ngbDropdownItem>\r\n                                        <fa-icon [icon]=\"faCheckDouble\" class=\"item-icon\" />\r\n                                        <span jhiTranslate=\"artemisApp.courseOverview.sidebar.setChannelAsRead\"></span>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n                @if (!sidebarData?.ungroupedData || !(sidebarData?.ungroupedData | searchFilter: ['title', 'type'] : searchValue)?.length) {\r\n                    <div\r\n                        [ngClass]=\"{ 'content-height-dev': !isProduction || isTestServer }\"\r\n                        [jhiTranslate]=\"\r\n                            (sidebarDataBeforeFiltering?.ungroupedData?.length ?? 0) > 0 && sidebarData.ungroupedData?.length === 0\r\n                                ? 'artemisApp.courseOverview.general.noElementFoundWithAppliedFilter'\r\n                                : 'artemisApp.courseOverview.general.noDataFound'\r\n                        \"\r\n                        class=\"mt-2 text-center scrollable-item-content\"\r\n                    ></div>\r\n                } @else {\r\n                    <div\r\n                        class=\"scrollable-item-content my-2\"\r\n                        [ngClass]=\"{\r\n                            'content-height-dev': !isProduction || isTestServer,\r\n                            'search-height-conversations': sidebarData?.sidebarType === 'conversation',\r\n                            'search-height-normal': sidebarData?.sidebarType !== 'conversation',\r\n                        }\"\r\n                    >\r\n                        @if (sidebarData?.groupByCategory && sidebarData.groupedData) {\r\n                            <jhi-sidebar-accordion\r\n                                [searchValue]=\"searchValue\"\r\n                                [groupedData]=\"sidebarData.groupedData\"\r\n                                [sidebarType]=\"sidebarData.sidebarType\"\r\n                                [storageId]=\"sidebarData.storageId\"\r\n                                [routeParams]=\"routeParams\"\r\n                                [courseId]=\"courseId\"\r\n                                [itemSelected]=\"itemSelected\"\r\n                                [showLeadingIcon]=\"sidebarData.showAccordionLeadingIcon ?? false\"\r\n                                [channelTypeIcon]=\"channelTypeIcon\"\r\n                                [sidebarItemAlwaysShow]=\"sidebarItemAlwaysShow()\"\r\n                                [collapseState]=\"collapseState\"\r\n                                (onUpdateSidebar)=\"onUpdateSidebar.emit()\"\r\n                                [isFilterActive]=\"isFilterActive\"\r\n                            />\r\n                        } @else {\r\n                            @for (sidebarItem of sidebarData?.ungroupedData | searchFilter: ['title', 'type'] : searchValue; track sidebarItem; let last = $last) {\r\n                                <div [ngClass]=\"{ 'mb-2': !last }\">\r\n                                    <div\r\n                                        jhiSidebarCard\r\n                                        [size]=\"sidebarItem.size\"\r\n                                        [itemSelected]=\"itemSelected\"\r\n                                        [sidebarType]=\"sidebarData.sidebarType\"\r\n                                        [sidebarItem]=\"sidebarItem\"\r\n                                    ></div>\r\n                                </div>\r\n                            }\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["DEFAULT_UNIT_GROUPS", "future", "entityData", "dueSoon", "current", "past", "noDate", "GROUP_DECISION_MATRIX", "none", "soon", "DEFAULT_CHANNEL_GROUPS", "favoriteChannels", "recents", "generalChannels", "exerciseChannels", "lectureChannels", "examChannels", "feedbackDiscussion", "archivedChannels", "CourseOverviewService", "participationService", "inject", "ParticipationService", "translate", "TranslateService", "conversationService", "ConversationService", "faBullhorn", "faHashtag", "faLock", "getUpcomingTutorialGroup", "tutorialGroups", "length", "reduce", "a", "b", "nextSession", "start", "valueOf", "getUpcomingLecture", "lectures", "startDate", "getUpcomingExam", "exams", "getUpcomingExercise", "exercises", "dueDate", "getCorrespondingExerciseGroupByDate", "exercise", "now", "dayjs", "startGroup", "getStartDateGroup", "endGroup", "getEndDateGroup", "releaseDate", "undefined", "isAfter", "isBefore", "add", "getCorrespondingLectureGroupByDate", "endDate", "isStartDateWithinLastWeek", "isBetween", "subtract", "getConversationGroup", "conversation", "groups", "isHidden", "push", "isFavorite", "isGroupChatDTO", "isOneToOneChatDTO", "subTypeGroup", "getCorrespondingChannelSubType", "getAsChannelDTO", "subType", "channelSubType", "channelSubTypeMap", "ChannelSubType", "EXERCISE", "GENERAL", "LECTURE", "EXAM", "FEEDBACK_DISCUSSION", "groupExercisesByDueDate", "sortedExercises", "groupedExerciseGroups", "cloneDeep", "exerciseGroup", "exerciseCardItem", "mapExerciseToSidebarCardElement", "groupLecturesByStartDate", "sortedLectures", "groupedLectureGroups", "lecture", "lectureGroup", "lectureCardItem", "mapLectureToSidebarCardElement", "groupConversationsByChannelType", "course", "conversations", "messagingEnabled", "channelGroups", "__spreadProps", "__spreadValues", "groupChats", "directMessages", "groupedConversationGroups", "savedPosts", "isHideCount", "title", "instant", "id", "SavedPostStatusMap", "PROGRESS", "toString", "type", "ConversationType", "CHANNEL", "icon", "faBookmark", "size", "COMPLETED", "faSquareCheck", "ARCHIVED", "faBoxArchive", "conversationGroups", "conversationCardItem", "mapConversationToSidebarCardElement", "group", "sort", "aIsFavorite", "mapLecturesToSidebarCardElements", "map", "mapTutorialGroupsToSidebarCardElements", "tutorialGroup", "mapTutorialGroupToSidebarCardElement", "mapExercisesToSidebarCardElements", "mapExamsToSidebarCardElements", "studentExams", "exam", "index", "mapExamToSidebarCardElement", "mapConversationsToSidebarCardElements", "subtitleLeft", "format", "subtitleRight", "getUtilization", "capacity", "averageAttendance", "utilization", "Math", "round", "getIcon", "difficulty", "studentParticipation", "studentParticipations", "getSpecificStudentParticipation", "studentExam", "faGraduationCap", "moduleNumber", "startDateWithTime", "workingTime", "attainablePoints", "examMaxPoints", "getChannelIcon", "channelDTO", "isAnnouncementChannel", "isPublic", "isCurrent", "subTypeRefId", "subTypeReferenceId", "oneAndHalfWeekBefore", "oneAndHalfWeekLater", "relevantDate", "find", "filter", "Boolean", "some", "date", "getConversationName", "sortLectures", "startDateA", "startDateB", "sortByTitle", "sortExercises", "dueDateA", "getExerciseDueDate", "dueDateB", "localeCompare", "getSidebarCollapseStateFromStorage", "storageId", "storedCollapseState", "localStorage", "getItem", "JSON", "parse", "setSidebarCollapseState", "isCollapsed", "setItem", "stringify", "factory", "\u0275fac", "providedIn", "canAddUsersToConversation", "conversation", "groupChatCheck", "groupChat", "isMember", "channelCheck", "channel", "isCourseWide", "hasChannelModerationRights", "isChannelDTO", "isGroupChatDTO", "isOneToOneChatDTO", "Error", "canCreateNewMessageInConversation", "oneToOneChatCheck", "oneToOneChat", "isArchived", "isAnnouncementChannel", "canGrantChannelModeratorRole", "canRevokeChannelModeratorRole", "canRemoveUsersFromConversation", "canLeaveConversation", "isCreator", "canJoinChannel", "isPublic", "canChangeChannelArchivalState", "canChangeChannelPrivacyState", "canDeleteChannel", "course", "channelDTO", "isInstructor", "isAtLeastInstructor", "isChannelModerator", "tutorialGroupId", "tutorialGroupTitle", "canCreateChannel", "isAtLeastTutor", "canChangeChannelProperties", "canChangeGroupChatProperties", "POINTS_STEP", "SCORE_THRESHOLD_TO_INCREASE_STEP", "SMALL_SCORE_STEP", "SCORE_STEP", "DEFAULT_DIFFICULTIES_FILTER", "name", "value", "DifficultyLevel", "EASY", "checked", "MEDIUM", "HARD", "DEFAULT_EXERCISE_TYPES_FILTER", "ExerciseType", "PROGRAMMING", "icon", "getIcon", "QUIZ", "MODELING", "TEXT", "FILE_UPLOAD", "getAvailableCategoriesAsFilterOptions", "sidebarData", "ungroupedData", "filter", "sidebarElement", "exercise", "categories", "undefined", "flatMap", "map", "category", "searched", "getExerciseCategoryFilterOptionsWithoutDuplicates", "exerciseCategoryFilterOptions", "reduce", "unique", "item", "some", "uniqueItem", "equals", "push", "sortExerciseCategoryFilterOptionsSortedByName", "sort", "categoryFilterOptionsA", "categoryFilterOptionB", "compare", "getExerciseCategoryFilterOptions", "exerciseFilters", "categoryFilter", "availableCategoriesAsFilterOptions", "selectableCategoryFilterOptions", "isDisplayed", "length", "options", "getExerciseTypeFilterOptions", "exerciseTypesFilter", "existingExerciseTypes", "type", "availableTypeFilters", "exerciseType", "includes", "getExerciseDifficultyFilterOptions", "difficultyFilter", "existingDifficulties", "difficulty", "availableDifficultyFilters", "isRangeFilterApplied", "rangeFilter", "isExcludingMinValues", "selectedMin", "generalMin", "isExcludingMaxValues", "selectedMax", "generalMax", "getUpdatedMinAndMaxValues", "minValue", "maxValue", "currentMaxValue", "updatedMinValue", "updatedMaxValue", "calculateMinAndMaxForPointsAndScore", "minAchievablePoints", "Infinity", "maxAchievablePoints", "minAchievedScore", "maxAchievedScore", "forEach", "maxPoints", "currentExerciseMaxPoints", "studentParticipation", "currentExerciseAchievedScore", "getLatestResultOfStudentParticipation", "score", "roundRangeFilterMinAndMaxValues", "minAchievablePointsRounded", "roundToNextMultiple", "roundDown", "maxAchievablePointsRounded", "roundUp", "minAchievedScoreRounded", "maxAchievedScoreRounded", "calculateAchievablePointsFilterOptions", "achievablePoints", "step", "achievedScore", "getAchievablePointsAndAchievedScoreFilterOptions", "isPointsFilterApplied", "isScoreFilterApplied", "satisfiesDifficultyFilter", "sidebarElement", "searchedDifficulties", "length", "difficulty", "includes", "satisfiesTypeFilter", "searchedTypes", "exercise", "type", "satisfiesCategoryFilter", "selectedCategories", "categories", "some", "category", "selectedCategory", "equals", "satisfiesScoreFilter", "isFilterApplied", "achievedScoreFilter", "latestResult", "getLatestResultOfStudentParticipation", "studentParticipation", "score", "filter", "selectedMin", "isScoreInSelectedMinRange", "isScoreInSelectedMaxRange", "selectedMax", "satisfiesPointsFilter", "isPointsFilterApplied", "achievablePointsFilter", "maxPoints", "isAchievablePointsInSelectedMinRange", "isAchievablePointsInSelectedMaxRange", "satisfiesFilters", "filterDetails", "isScoreFilterApplied", "achievedScore", "achievablePoints", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "categoryFilterOption_r3", "category", "ctx_r1", "removeItem", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "model", "\u0275\u0275resetView", "\u0275\u0275listener", "focus$", "next", "target", "value", "click$", "onSelectItem", "\u0275\u0275repeaterCreate", "ExerciseFilterModalComponent_Conditional_19_For_12_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275twoWayProperty", "search", "\u0275\u0275pipeBind1", "selectableCategoryOptions", "length", "resultFormatter", "\u0275\u0275repeater", "selectedCategoryOptions", "typeFilter_r5", "_r4", "$implicit", "checked", "icon", "name", "ExerciseFilterModalComponent_Conditional_21_For_8_Template", "typeFilter", "options", "difficultyFilterOption_r7", "_r6", "ExerciseFilterModalComponent_Conditional_22_For_8_Template", "difficultyFilter", "_r8", "achievedScore", "filter", "selectedMin", "selectedMax", "generalMin", "generalMax", "step", "_r9", "achievablePoints", "ExerciseFilterModalComponent", "activeModal", "inject", "NgbActiveModal", "faFilter", "faBackward", "filterApplied", "EventEmitter", "instance", "noFiltersAvailable", "Subject", "form", "sidebarData", "categoryFilter", "exerciseFilters", "ngOnInit", "exerciseTypesFilter", "isDisplayed", "updateCategoryOptionsStates", "closeModal", "close", "text$", "debouncedText$", "pipe", "debounceTime", "distinctUntilChanged", "clicksWithClosedPopup$", "isPopupOpen", "inputFocus$", "merge", "map", "term", "undefined", "toLowerCase", "indexOf", "exerciseCategory", "event", "item", "preventDefault", "stopPropagation", "filterOption", "searched", "applyFilter", "groupedData", "appliedFilterDetails", "getAppliedFilterDetails", "groupedDataKey", "entityData", "sidebarElement", "satisfiesFilters", "ungroupedData", "emit", "filteredSidebarData", "appliedExerciseFilters", "isFilterActive", "searchedTypes", "getSearchedTypes", "selectedCategories", "getSelectedCategories", "searchedDifficulties", "getSearchedDifficulties", "isScoreFilterApplied", "isRangeFilterApplied", "isPointsFilterApplied", "type", "categoryOption", "difficulty", "filterDetails", "clearFilter", "forEach", "typeOption", "difficultyOption", "resetRangeFilter", "rangeFilter", "getUpdatedSelectedCategoryOptions", "getSelectableCategoryOptions", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "ExerciseFilterModalComponent_Conditional_18_Template", "ExerciseFilterModalComponent_Conditional_19_Template", "ExerciseFilterModalComponent_Conditional_21_Template", "ExerciseFilterModalComponent_Conditional_22_Template", "ExerciseFilterModalComponent_Conditional_23_Template", "ExerciseFilterModalComponent_Conditional_24_Template", "\u0275\u0275conditional", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "ReactiveFormsModule", "FontAwesomeModule", "FaIconComponent", "CustomExerciseCategoryBadgeComponent", "RangeSliderComponent", "NgbModule", "NgbTypeahead", "TranslateDirective", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "sidebarItem", "icon", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind2", "startDateWithTime", "studentExam", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "workingTime", "attainablePoints", "\u0275\u0275elementStart", "\u0275\u0275template", "SidebarCardItemComponent_Conditional_1_Conditional_3_Conditional_5_Template", "\u0275\u0275elementEnd", "SidebarCardItemComponent_Conditional_1_Conditional_3_Conditional_21_Template", "SidebarCardItemComponent_Conditional_1_Conditional_3_Conditional_32_Template", "SidebarCardItemComponent_Conditional_1_Conditional_3_Conditional_33_Template", "SidebarCardItemComponent_Conditional_1_Conditional_3_Conditional_44_Template", "title", "\u0275\u0275conditional", "subtitleLeft", "otherUser", "id", "name", "imageUrl", "rightIcon", "\u0275\u0275textInterpolate", "formattedUnreadCount", "exercise", "studentParticipation", "subtitleRight", "SidebarCardItemComponent_Conditional_1_Conditional_4_Conditional_5_Template", "SidebarCardItemComponent_Conditional_1_Conditional_4_Conditional_6_Template", "SidebarCardItemComponent_Conditional_1_Conditional_4_Conditional_11_Template", "SidebarCardItemComponent_Conditional_1_Conditional_4_Conditional_13_Template", "SidebarCardItemComponent_Conditional_1_Conditional_4_Conditional_22_Template", "SidebarCardItemComponent_Conditional_1_Conditional_4_Conditional_23_Template", "\u0275\u0275classProp", "conversation", "isMuted", "unreadCount", "\u0275\u0275pureFunction1", "_c0", "sidebarType", "SidebarCardItemComponent_Conditional_1_Conditional_3_Template", "SidebarCardItemComponent_Conditional_1_Conditional_4_Template", "SidebarCardItemComponent", "groupKey", "input", "faPeopleGroup", "ngOnInit", "getFormattedUnreadCount", "extractMessageUser", "ngOnChanges", "changes", "toString", "type", "members", "find", "user", "isRequestingUser", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "SidebarCardItemComponent_Conditional_1_Template", "FaIconComponent", "TranslateDirective", "StudentExamWorkingTimeComponent", "NgClass", "ProfilePictureComponent", "SubmissionResultStatusComponent", "ArtemisDatePipe", "ArtemisDurationFromSecondsPipe", "styles", "ChannelIconComponent", "isPublic", "input", "isAnnouncementChannel", "faHashtag", "faLock", "faBullhorn", "getIcon", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "FaIconComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "id", "\u0275\u0275textInterpolate", "label", "\u0275\u0275element", "user_r3", "name", "imageUrl", "getUserLabel", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "searchStudents", "\u0275\u0275resetView", "onFilterChange", "_r5", "searchTutors", "_r6", "searchInstructors", "_r7", "\u0275$index_99_r8", "$index", "onDelete", "faX", "\u0275\u0275template", "CourseUsersSelectorComponent_Conditional_23_For_4_Conditional_6_Template", "user_r9", "\u0275\u0275conditional", "disabled", "\u0275\u0275repeaterCreate", "CourseUsersSelectorComponent_Conditional_23_For_4_Template", "\u0275\u0275componentInstance", "trackIdentity", "\u0275\u0275repeater", "selectedUsers", "selectorId", "CourseUsersSelectorComponent", "courseManagementService", "inject", "CourseManagementService", "cdr", "ChangeDetectorRef", "hostClass", "ngUnsubscribe", "Subject", "typeAheadInstance", "searchInput", "courseId", "rolesToAllowSearchingIn", "multiSelect", "showUserList", "isSearching", "searchFailed", "ngOnInit", "includes", "ngOnDestroy", "next", "complete", "usersFormatter", "user", "_index", "item", "firstName", "lastName", "login", "trim", "onSelectItem", "$event", "onUserSelected", "preventDefault", "resetSearchInput", "index", "splice", "onChange", "onInputChange", "event", "target", "value", "length", "dismissPopup", "nativeElement", "dispatchEvent", "Event", "search", "text$", "pipe", "debounceTime", "distinctUntilChanged", "map", "term", "toLowerCase", "filter", "switchMap", "rolesToSearchIn", "push", "of", "searchUsers", "users", "body", "find", "selectedUser", "tap", "catchError", "takeUntil", "_selectedUsers", "onTouched", "registerOnChange", "fn", "registerOnTouched", "setDisabledState", "isDisabled", "writeValue", "detectChanges", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275classProp", "provide", "NG_VALUE_ACCESSOR", "useExisting", "multi", "decls", "vars", "consts", "template", "i0", "_r1", "CourseUsersSelectorComponent_Conditional_4_Template", "CourseUsersSelectorComponent_ng_template_10_Template", "\u0275\u0275templateRefExtractor", "CourseUsersSelectorComponent_Conditional_13_Template", "CourseUsersSelectorComponent_Conditional_14_Template", "CourseUsersSelectorComponent_Conditional_15_Template", "CourseUsersSelectorComponent_Conditional_19_Template", "CourseUsersSelectorComponent_Conditional_20_Template", "CourseUsersSelectorComponent_Conditional_21_Template", "CourseUsersSelectorComponent_Conditional_23_Template", "\u0275\u0275pipeBind1", "resultTemplate_r10", "NgbTypeahead", "ProfilePictureComponent", "TranslateDirective", "FaIconComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "ctx_r1", "maxSelectable", "\u0275\u0275elementStart", "\u0275\u0275template", "ConversationAddUsersFormComponent_Conditional_0_Conditional_34_Conditional_3_Template", "ConversationAddUsersFormComponent_Conditional_0_Conditional_34_Conditional_4_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "selectedUsersControl", "errors", "required", "maxlength", "faSpinner", "ConversationAddUsersFormComponent_Conditional_0_Conditional_5_Template", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "mode", "\u0275\u0275resetView", "\u0275\u0275listener", "submitForm", "ConversationAddUsersFormComponent_Conditional_0_Conditional_34_Template", "ConversationAddUsersFormComponent_Conditional_0_Conditional_72_Template", "undefined", "getAsChannel", "activeConversation", "\u0275\u0275twoWayProperty", "\u0275\u0275pureFunction0", "_c0", "form", "courseId", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "isSubmitPossible", "isLoading", "ConversationAddUsersFormComponent", "fb", "inject", "FormBuilder", "formSubmitted", "EventEmitter", "input", "getAsChannelDTO", "get", "value", "addAllStudents", "addAllTutors", "addAllInstructors", "ngOnInit", "initializeForm", "ngOnChanges", "validators", "Validators", "maxLength", "group", "selectedUsers", "emit", "__spreadValues", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationAddUsersFormComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "CheckboxControlValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "CourseUsersSelectorComponent", "FaIconComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275property", "channel_r2", "isPublic", "isAnnouncementChannel", "ctx_r2", "conversationService", "getConversationName", "\u0275\u0275template", "ConversationAddUsersDialogComponent_Conditional_0_Conditional_7_Template", "ConversationAddUsersDialogComponent_Conditional_0_Conditional_8_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "dismiss", "$event", "onFormSubmitted", "\u0275\u0275conditional", "tmp_1_0", "getAsChannel", "activeConversation", "getAsGroupChat", "isLoading", "maxSelectable", "course", "id", "ConversationAddUsersDialogComponent", "AbstractDialogComponent", "alertService", "inject", "AlertService", "channelService", "ChannelService", "ConversationService", "groupChatService", "GroupChatService", "ngUnsubscribe", "Subject", "isInitialized", "initialize", "isGroupChatDTO", "MAX_GROUP_CHAT_PARTICIPANTS", "numberOfMembers", "ngOnDestroy", "next", "complete", "selectedUsers", "addAllStudents", "addAllTutors", "addAllInstructors", "addUsers", "getAsChannelDTO", "getAsGroupChatDTO", "usersToAdd", "userLogins", "map", "user", "login", "isChannelDTO", "registerUsersToChannel", "pipe", "finalize", "close", "takeUntil", "subscribe", "error", "errorResponse", "onError", "addUsersToGroupChat", "Error", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationAddUsersDialogComponent_Conditional_0_Template", "ChannelIconComponent", "TranslateDirective", "ConversationAddUsersFormComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "faUserGear", "\u0275\u0275pipeBind1", "userIcon", "userTooltip", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "faEllipsis", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openRemoveFromConversationDialog", "_r5", "openGrantChannelModeratorRoleDialog", "_r6", "openRevokeChannelModeratorRoleDialog", "_r1", "userDropdown_r2", "\u0275\u0275reference", "stopPropagation", "close", "\u0275\u0275template", "ConversationMemberRowComponent_Conditional_0_Conditional_7_Template", "userNameClicked", "ConversationMemberRowComponent_Conditional_0_Conditional_11_Template", "ConversationMemberRowComponent_Conditional_0_Conditional_16_Template", "ConversationMemberRowComponent_Conditional_0_Conditional_19_Template", "ConversationMemberRowComponent_Conditional_0_Conditional_20_Template", "ConversationMemberRowComponent_Conditional_0_Conditional_21_Template", "userId", "userName", "userImageUrl", "\u0275\u0275conditional", "isChannel", "activeConversation", "tmp_5_0", "conversationMember", "isChannelModerator", "\u0275\u0275pureFunction1", "_c1", "isCurrentUser", "\u0275\u0275textInterpolate1", "userLabel", "tmp_8_0", "isStudent", "canBeRemovedFromConversation", "canBeGrantedChannelModeratorRole", "canBeRevokedChannelModeratorRole", "ConversationMemberRowComponent", "ngUnsubscribe", "Subject", "input", "required", "course", "changePerformed", "output", "onUserNameClicked", "idOfLoggedInUser", "isCreator", "faUser", "isChannelDTO", "canGrantChannelModeratorRole", "canRevokeChannelModeratorRole", "canRemoveUsersFromConversation", "accountService", "inject", "AccountService", "modalService", "NgbModal", "translateService", "TranslateService", "channelService", "ChannelService", "groupChatService", "GroupChatService", "alertService", "AlertService", "ngOnInit", "identity", "then", "loggedInUser", "id", "creator", "imageUrl", "name", "getUserLabel", "setUserAuthorityIconAndTooltip", "channelDTO", "isCourseWide", "ngOnDestroy", "next", "complete", "event", "channel", "getAsChannelDTO", "translationKeys", "titleKey", "questionKey", "descriptionKey", "confirmButtonKey", "translationParams", "channelName", "confirmedCallback", "courseId", "channelId", "memberLogin", "login", "Error", "grantChannelModeratorRole", "openConfirmationDialog", "revokeChannelModeratorRole", "openRemoveFromChannelDialog", "isPublic", "activeConversationId", "deregisterUsersFromChannel", "openRemoveFromGroupChatDialog", "getAsGroupChatDTO", "removeUsersFromGroupChat", "modalRef", "open", "GenericConfirmationDialogComponent", "defaultSecondLayerDialogOptions", "componentInstance", "translationParameters", "canBeUndone", "isDangerousAction", "initialize", "from", "result", "pipe", "catchError", "EMPTY", "takeUntil", "subscribe", "emit", "error", "errorResponse", "onError", "isGroupChatDTO", "toolTipTranslationPath", "isInstructor", "faUserGraduate", "instant", "isEditor", "isTeachingAssistant", "faUserCheck", "memberId", "selectors", "hostVars", "hostBindings", "rf", "ctx", "\u0275\u0275classProp", "ConversationMemberRowComponent_Conditional_0_Template", "ProfilePictureComponent", "FaIconComponent", "NgbTooltip", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbDropdownButtonItem", "NgbDropdownItem", "TranslateDirective", "ArtemisTranslatePipe", "NgClass", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openAddUsersDialog", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faUserPlus", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "CHANNEL_MODERATOR_FILTER_OPTION", "_r5", "onChangePerformed", "userNameClicked", "emit", "user_r6", "id", "activeConversation", "course", "\u0275\u0275repeaterCreate", "ConversationMembersComponent_Conditional_0_Conditional_48_For_8_Template", "\u0275\u0275componentInstance", "trackIdentity", "\u0275\u0275twoWayListener", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "page", "transition", "\u0275\u0275repeater", "members", "\u0275\u0275pureFunction3", "_c0", "totalItems", "itemsPerPage", "\u0275\u0275twoWayProperty", "\u0275\u0275template", "ConversationMembersComponent_Conditional_0_Conditional_7_Template", "_r1", "onSearchQueryInput", "onFilterChange", "ConversationMembersComponent_Conditional_0_Conditional_42_Template", "ConversationMembersComponent_Conditional_0_Conditional_46_Template", "ConversationMembersComponent_Conditional_0_Conditional_48_Template", "\u0275\u0275conditional", "canAddUsersToConversation", "faMagnifyingGlass", "selectedFilter", "ALL", "INSTRUCTOR_FILTER_OPTION", "TUTOR_FILTER_OPTION", "STUDENT_FILTER_OPTION", "isChannel", "isSearching", "length", "ConversationMembersComponent", "ngUnsubscribe", "Subject", "search$", "input", "required", "activeConversationInput", "signal", "undefined", "changesPerformed", "output", "getAsChannel", "getAsChannelDTO", "isChannelDTO", "searchTerm", "ConversationMemberSearchFilter", "INSTRUCTOR", "TUTOR", "STUDENT", "CHANNEL_MODERATOR", "conversationService", "inject", "ConversationService", "alertService", "AlertService", "modalService", "NgbModal", "cdr", "ChangeDetectorRef", "index", "item", "event", "stopPropagation", "modalRef", "open", "ConversationAddUsersDialogComponent", "defaultSecondLayerDialogOptions", "componentInstance", "initialize", "from", "result", "pipe", "catchError", "EMPTY", "takeUntil", "subscribe", "next", "force", "ngOnInit", "debounceTime", "distinctUntilChanged", "prev", "curr", "tap", "map", "query", "trim", "toLowerCase", "switchMap", "searchMembersOfConversation", "Number", "res", "onSuccess", "body", "headers", "error", "errorResponse", "onError", "inputValue", "set", "ngOnDestroy", "complete", "newFilterValue", "target", "value", "get", "update", "current", "__spreadProps", "__spreadValues", "numberOfMembers", "detectChanges", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationMembersComponent_Conditional_0_Template", "FaIconComponent", "TranslateDirective", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "ConversationMemberRowComponent", "ItemCountComponent", "NgbPagination", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "ctx_r1", "translationKeys", "requiredErrorKey", "\u0275\u0275pipeBind2", "maxLengthErrorKey", "\u0275\u0275pureFunction1", "_c0", "maxPropertyLength", "regexErrorKey", "\u0275\u0275template", "GenericUpdateTextPropertyDialogComponent_Conditional_0_Conditional_18_Conditional_15_Conditional_3_Template", "GenericUpdateTextPropertyDialogComponent_Conditional_0_Conditional_18_Conditional_15_Conditional_4_Template", "GenericUpdateTextPropertyDialogComponent_Conditional_0_Conditional_18_Conditional_15_Conditional_5_Template", "\u0275\u0275conditional", "control", "errors", "required", "maxlength", "pattern", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submitForm", "\u0275\u0275element", "GenericUpdateTextPropertyDialogComponent_Conditional_0_Conditional_18_Conditional_15_Template", "\u0275\u0275property", "form", "propertyName", "\u0275\u0275textInterpolate", "labelKey", "helpKey", "invalid", "dirty", "touched", "isSubmitPossible", "_r1", "clear", "GenericUpdateTextPropertyDialogComponent_Conditional_0_Conditional_18_Template", "titleKey", "GenericUpdateTextPropertyDialogComponent", "AbstractDialogComponent", "fb", "inject", "FormBuilder", "isRequired", "regexPattern", "initialValue", "initialize", "isInitialized", "initializeForm", "get", "validators", "push", "Validators", "maxLength", "group", "dismiss", "close", "value", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "GenericUpdateTextPropertyDialogComponent_Conditional_0_Template", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgForm", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275elementStart", "\u0275\u0275template", "ChannelFormComponent_Conditional_4_Conditional_19_Conditional_3_Template", "ChannelFormComponent_Conditional_4_Conditional_19_Conditional_4_Template", "ChannelFormComponent_Conditional_4_Conditional_19_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "ctx_r1", "nameControl", "errors", "required", "maxlength", "pattern", "_c1", "ChannelFormComponent_Conditional_4_Conditional_30_Conditional_3_Template", "descriptionControl", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submitForm", "ChannelFormComponent_Conditional_4_Conditional_19_Template", "ChannelFormComponent_Conditional_4_Conditional_30_Template", "form", "isPublicControl", "value", "isisAnnouncementChannelControl", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "isSubmitPossible", "channelRegex", "RegExp", "ChannelFormComponent", "fb", "inject", "FormBuilder", "ngUnsubscribe", "Subject", "formData", "name", "undefined", "description", "isPublic", "isAnnouncementChannel", "isCourseWideChannel", "formSubmitted", "EventEmitter", "channelTypeChanged", "isAnnouncementChannelChanged", "isCourseWideChannelChanged", "output", "get", "isCourseWideChannelControl", "ngOnInit", "initializeForm", "ngOnDestroy", "next", "complete", "ngOnChanges", "emit", "__spreadValues", "group", "Validators", "maxLength", "valueChanges", "pipe", "takeUntil", "subscribe", "selectors", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ChannelFormComponent_Conditional_4_Template", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgForm", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "ChannelIconComponent", "ArtemisTranslatePipe", "encapsulation", "ConversationUserDTO", "UserPublicInfoDTO", "isChannelModerator", "isRequestingUser", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openEditNameModal", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275template", "ConversationInfoComponent_Conditional_0_Conditional_6_Conditional_11_Template", "\u0275\u0275advance", "\u0275\u0275classProp", "readOnlyMode", "\u0275\u0275propertyInterpolate", "tmp_4_0", "channelOrGroupChat_r3", "name", "undefined", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "isChannel", "canChangeChannelProperties", "isGroupChat", "canChangeGroupChatProperties", "_r4", "openEditTopicModal", "ConversationInfoComponent_Conditional_0_Conditional_7_Conditional_11_Template", "channel_r5", "topic", "_r6", "openDescriptionTopicModal", "ConversationInfoComponent_Conditional_0_Conditional_8_Conditional_11_Template", "channel_r7", "description", "\u0275\u0275textInterpolate2", "getCreator", "getUserLabel", "ConversationInfoComponent_Conditional_0_Conditional_6_Template", "ConversationInfoComponent_Conditional_0_Conditional_7_Template", "ConversationInfoComponent_Conditional_0_Conditional_8_Template", "ConversationInfoComponent_Conditional_0_Conditional_18_Template", "tmp_1_0", "getAsChannelOrGroupChat", "activeConversation", "tmp_2_0", "getAsChannel", "tmp_3_0", "creator", "creationDate", "ConversationInfoComponent", "ngUnsubscribe", "Subject", "isGroupChatDTO", "isChannelDTO", "getAsChannelDTO", "conversation", "getAsGroupChatDTO", "input", "required", "course", "changesPerformed", "output", "channelService", "inject", "ChannelService", "groupChatService", "GroupChatService", "modalService", "NgbModal", "alertService", "AlertService", "ngOnInit", "isArchived", "ngOnDestroy", "next", "complete", "onChangePerformed", "emit", "event", "channelOrGroupChat", "keys", "labelKey", "titleKey", "helpKey", "maxLengthErrorKey", "requiredErrorKey", "regexErrorKey", "stopPropagation", "openEditPropertyDialog", "channelRegex", "channel", "propertyName", "maxLength", "isRequired", "regexPattern", "translationKeys", "modalRef", "open", "GenericUpdateTextPropertyDialogComponent", "defaultSecondLayerDialogOptions", "componentInstance", "maxPropertyLength", "property", "get", "length", "initialValue", "initialize", "from", "result", "pipe", "catchError", "EMPTY", "takeUntil", "subscribe", "newValue", "updateValue", "trim", "updateChannel", "updateGroupChat", "groupChat", "courseId", "id", "updateDTO", "GroupChatDTO", "update", "map", "res", "body", "updatedGroupChat", "error", "errorResponse", "onError", "ChannelDTO", "updatedChannel", "skipAlert", "ConversationDTO", "ConversationUserDTO", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationInfoComponent_Conditional_0_Template", "TranslateDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "leaveConversation", "\u0275\u0275elementEnd", "_r3", "toggleChannelPrivacy", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "channel_r4", "isPublic", "faLock", "faHashtag", "\u0275\u0275propertyInterpolate", "_r5", "toggleChannelArchivalState", "isArchived", "faBoxOpen", "faBoxArchive", "_r6", "deleteChannel", "id", "name", "dialogError$", "faTrash", "\u0275\u0275template", "ConversationSettingsComponent_Conditional_0_Conditional_3_Conditional_7_Conditional_1_Template", "ConversationSettingsComponent_Conditional_0_Conditional_3_Conditional_7_Conditional_2_Template", "ConversationSettingsComponent_Conditional_0_Conditional_3_Conditional_7_Conditional_3_Template", "\u0275\u0275conditional", "canChangeChannelPrivacyState", "canChangeChannelArchivalState", "canDeleteChannel", "ConversationSettingsComponent_Conditional_0_Conditional_3_Conditional_5_Template", "ConversationSettingsComponent_Conditional_0_Conditional_3_Conditional_7_Template", "canLeaveConversation", "tmp_3_0", "conversationAsChannel", "ConversationSettingsComponent_Conditional_0_Conditional_3_Template", "ConversationSettingsComponent_Conditional_0_Conditional_4_Template", "ConversationSettingsComponent", "ngUnsubscribe", "Subject", "activeConversation", "input", "required", "course", "channelArchivalChange", "output", "channelPrivacyChange", "channelDeleted", "conversationLeave", "dialogErrorSource", "asObservable", "modalService", "inject", "NgbModal", "channelService", "ChannelService", "groupChatService", "GroupChatService", "alertService", "AlertService", "ngOnInit", "conversation", "getAsChannelDTO", "stopPropagation", "isGroupChatDTO", "removeUsersFromGroupChat", "pipe", "takeUntil", "subscribe", "emit", "isChannelDTO", "deregisterUsersFromChannel", "Error", "event", "channel", "openUnArchivalModal", "openArchivalModal", "ngOnDestroy", "next", "complete", "keys", "titleKey", "questionKey", "descriptionKey", "confirmButtonKey", "modalRef", "createModal", "openModal", "archive", "error", "errorResponse", "onError", "unarchive", "unArchiveObservable", "from", "result", "catchError", "EMPTY", "open", "GenericConfirmationDialogComponent", "defaultSecondLayerDialogOptions", "componentInstance", "translationParameters", "channelName", "translationKeys", "canBeUndone", "initialize", "delete", "message", "openPublicChannelModal", "openPrivacyChangeModal", "openPrivateChannelModal", "res", "updatedChannel", "body", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationSettingsComponent_Conditional_0_Template", "TranslateDirective", "DeleteButtonDirective", "FaIconComponent", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "channel_r2", "isPublic", "isAnnouncementChannel", "ctx_r2", "faPeopleGroup", "otherUser", "id", "name", "imageUrl", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clear", "\u0275\u0275elementEnd", "\u0275\u0275pureFunction2", "_c0", "course", "channel_r5", "tutorialGroupId", "\u0275\u0275pureFunction1", "_c1", "tutorialGroupTitle", "\u0275\u0275template", "ConversationDetailDialogComponent_Conditional_0_Conditional_14_Conditional_1_Template", "\u0275\u0275conditional", "_r6", "selectedTab", "Tabs", "MEMBERS", "SETTINGS", "\u0275\u0275classProp", "_r7", "changesWerePerformed", "$event", "onUserNameClicked", "activeConversation", "_r8", "_r9", "onArchivalChange", "onPrivacyChange", "onChannelDeleted", "onConversationLeave", "ConversationDetailDialogComponent_Conditional_0_Conditional_9_Template", "ConversationDetailDialogComponent_Conditional_0_Conditional_10_Template", "ConversationDetailDialogComponent_Conditional_0_Conditional_11_Template", "ConversationDetailDialogComponent_Conditional_0_Conditional_14_Template", "_r1", "INFO", "ConversationDetailDialogComponent_Conditional_0_Conditional_28_Template", "ConversationDetailDialogComponent_Conditional_0_Case_33_Template", "ConversationDetailDialogComponent_Conditional_0_Case_34_Template", "ConversationDetailDialogComponent_Conditional_0_Case_35_Template", "tmp_1_0", "getAsChannel", "getAsGroupChat", "\u0275\u0275textInterpolate1", "conversationService", "getConversationName", "tmp_3_0", "isOneToOneChat", "tmp_6_0", "ConversationDetailTabs", "ConversationDetailDialogComponent", "AbstractDialogComponent", "inject", "ConversationService", "isInitialized", "userNameClicked", "output", "initialize", "conversation", "getAsOneToOneChatDTO", "members", "find", "user", "isRequestingUser", "getAsChannelDTO", "getAsGroupChatDTO", "close", "dismiss", "markAsChangedAndClose", "userId", "emit", "__ngFactoryType__", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationDetailDialogComponent_Conditional_0_Template", "ChannelIconComponent", "FaIconComponent", "TranslateDirective", "RouterLink", "ConversationMembersComponent", "ConversationInfoComponent", "ConversationSettingsComponent", "ProfilePictureComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "channelSubTypeReferenceRouterLink", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "channelSubTypeReferenceTranslationKey", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openConversationDetailDialog", "\u0275\u0275element", "faGear", "ConversationOptionsComponent", "conversationService", "inject", "ConversationService", "metisService", "MetisService", "notificationService", "NotificationService", "alertService", "AlertService", "modalService", "NgbModal", "ngUnsubscribe", "Subject", "favorite$", "hide$", "mute$", "course", "conversation", "onUpdateSidebar", "EventEmitter", "conversationAsChannel", "faEllipsisVertical", "faHeartSolid", "faHearthSolid", "faHeartRegular", "faBoxArchive", "faBoxOpen", "faVolumeXmark", "faVolumeUp", "getAsGroupChat", "getAsGroupChatDTO", "isOneToOneChat", "isOneToOneChatDTO", "ngOnInit", "getCourse", "updateConversationIsFavorite", "updateConversationIsHidden", "updateConversationIsMuted", "updateConversationShouldNotifyRecipient", "getAsChannelDTO", "getChannelSubTypeReferenceTranslationKey", "subType", "getLinkForChannelSubType", "onArchiveClicked", "event", "stopPropagation", "id", "isHidden", "isFavorite", "updateIsFavorite", "subscribe", "next", "error", "errorResponse", "onError", "onFavoriteClicked", "updateIsHidden", "onMuteClicked", "isMuted", "modalRef", "open", "ConversationDetailDialogComponent", "defaultFirstLayerDialogOptions", "componentInstance", "activeConversation", "selectedTab", "ConversationDetailTabs", "SETTINGS", "initialize", "from", "result", "pipe", "catchError", "EMPTY", "takeUntil", "emit", "debounceTime", "distinctUntilChanged", "updateIsMuted", "mergeWith", "shouldNotifyRecipient", "unmuteNotificationsForConversation", "muteNotificationsForConversation", "ngOnDestroy", "complete", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ConversationOptionsComponent_Conditional_16_Template", "ConversationOptionsComponent_Conditional_17_Template", "\u0275\u0275conditional", "subTypeReferenceId", "FaIconComponent", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbDropdownItem", "RouterLink", "NgbDropdownButtonItem", "ArtemisTranslatePipe", "styles", "encapsulation", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onUpdateSidebar", "emit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "sidebarItem", "conversation", "SidebarCardSmallComponent", "sidebarEventService", "inject", "SidebarEventService", "router", "Router", "route", "ActivatedRoute", "location", "Location", "DifficultyLevel", "EventEmitter", "sidebarType", "itemSelected", "groupKey", "emitStoreAndRefresh", "itemId", "emitSidebarCardEvent", "refreshChildComponent", "navigate", "skipLocationChange", "relativeTo", "firstChild", "then", "id", "path", "replaceUrl", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275template", "SidebarCardSmallComponent_Conditional_8_Template", "hasUnreadMessage", "\u0275\u0275pureFunction1", "_c0", "tmp_4_0", "unreadMessagesCount", "undefined", "\u0275\u0275conditional", "NgClass", "RouterLink", "RouterLinkActive", "SidebarCardItemComponent", "ConversationOptionsComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "emitPageChangeForExam", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "itemSelected", "groupKey", "sidebarType", "sidebarItem", "_r3", "emitStoreAndRefresh", "id", "\u0275\u0275pureFunction4", "_c1", "difficulty", "DifficultyLevel", "EASY", "MEDIUM", "HARD", "tmp_4_0", "conversation", "unreadMessagesCount", "undefined", "SidebarCardMediumComponent", "sidebarEventService", "inject", "SidebarEventService", "router", "Router", "route", "ActivatedRoute", "location", "Location", "pageChange", "EventEmitter", "itemId", "emitSidebarCardEvent", "refreshChildComponent", "emit", "navigate", "skipLocationChange", "relativeTo", "firstChild", "then", "path", "replaceUrl", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "SidebarCardMediumComponent_Conditional_0_Template", "SidebarCardMediumComponent_Conditional_1_Template", "\u0275\u0275conditional", "NgClass", "SidebarCardItemComponent", "RouterLink", "RouterLinkActive", "styles", "SidebarCardLargeComponent", "sidebarEventService", "inject", "SidebarEventService", "router", "Router", "route", "ActivatedRoute", "location", "Location", "sidebarItem", "sidebarType", "itemSelected", "groupKey", "emitStoreAndRefresh", "itemId", "emitSidebarCardEvent", "refreshChildComponent", "navigate", "skipLocationChange", "relativeTo", "firstChild", "then", "id", "path", "replaceUrl", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275advance", "RouterLink", "RouterLinkActive", "SidebarCardItemComponent", "styles", "SidebarCardDirective", "viewContainerRef", "inject", "ViewContainerRef", "size", "sidebarItem", "sidebarType", "itemSelected", "groupKey", "onUpdateSidebar", "EventEmitter", "componentRef", "ngOnInit", "cardType", "S", "SidebarCardSmallComponent", "M", "SidebarCardMediumComponent", "L", "SidebarCardLargeComponent", "createComponent", "assignAttributes", "ngOnDestroy", "destroy", "undefined", "instance", "title", "removeChannelPrefix", "name", "prefixes", "includes", "forEach", "prefix", "startsWith", "substring", "length", "selectors", "inputs", "outputs", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "channelTypeIcon", "groupKey_r2", "\u0275\u0275textInterpolate1", "tmp_13_0", "\u0275\u0275pipeBind3", "groupedData", "entityData", "\u0275\u0275pureFunction0", "_c0", "searchValue", "length", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate", "totalUnreadMessagesPerGroup", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onUpdateSidebar", "emit", "\u0275\u0275pureFunction1", "_c1", "\u0275$index_50_r6", "\u0275$count_50_r7", "sidebarItem_r5", "size", "itemSelected", "sidebarType", "\u0275\u0275repeaterCreate", "SidebarAccordionComponent_For_1_Conditional_1_Conditional_20_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275template", "SidebarAccordionComponent_For_1_Conditional_1_Conditional_20_Conditional_9_Template", "collapseState", "\u0275\u0275repeater", "\u0275\u0275conditional", "_r1", "$implicit", "toggleGroupCategoryCollapse", "SidebarAccordionComponent_For_1_Conditional_1_Conditional_7_Template", "SidebarAccordionComponent_For_1_Conditional_1_Conditional_11_Template", "SidebarAccordionComponent_For_1_Conditional_1_Conditional_15_Template", "SidebarAccordionComponent_For_1_Conditional_1_Conditional_20_Template", "\u0275\u0275propertyInterpolate1", "\u0275$index_1_r9", "showLeadingIcon", "\u0275\u0275pipeBind1", "isHideCount", "\u0275\u0275classProp", "faChevronRight", "tmp_20_0", "SidebarAccordionComponent_For_1_Conditional_1_Template", "tmp_11_0", "sidebarItemAlwaysShow", "SidebarAccordionComponent", "Object", "EventEmitter", "routeParams", "storageId", "courseId", "input", "required", "isFilterActive", "faFile", "ngOnInit", "expandGroupWithSelectedItem", "setStoredCollapseState", "ngOnChanges", "expandAll", "calculateUnreadMessagesOfGroup", "storedCollapseState", "localStorage", "getItem", "JSON", "parse", "keys", "forEach", "key", "routeParamKey", "groupWithSelectedItem", "entries", "find", "groupedItem", "some", "entityItem", "id", "Number", "groupName", "groupKey", "filter", "item", "conversation", "unreadMessagesCount", "reduce", "sum", "groupCategoryKey", "setItem", "stringify", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "SidebarAccordionComponent_For_1_Template", "FaIconComponent", "NgbCollapse", "NgClass", "SidebarCardDirective", "TitleCasePipe", "ArtemisTranslatePipe", "SearchFilterPipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "faFilterCurrentlyApplied", "faFilter", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openFilterExercisesDialog", "\u0275\u0275template", "SidebarComponent_Conditional_8_Conditional_5_Conditional_5_Template", "SidebarComponent_Conditional_8_Conditional_5_Conditional_6_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "isFilterActive", "_r5", "createDirectChat", "createGroupChat", "faUser", "faPeopleGroup", "_r6", "createNewChannel", "faHashtag", "SidebarComponent_Conditional_8_Conditional_6_Conditional_10_Template", "SidebarComponent_Conditional_8_Conditional_6_Conditional_11_Template", "_r4", "browseChannels", "markAllMessagesAsChecked", "faPlusCircle", "sidebarData", "messagingEnabled", "canCreateChannel", "faSearch", "faCheckDouble", "$event", "_r1", "setSearchValue", "SidebarComponent_Conditional_8_Conditional_5_Template", "SidebarComponent_Conditional_8_Conditional_6_Template", "\u0275\u0275pureFunction1", "_c3", "inCommunication", "showFilter", "_c4", "isProduction", "isTestServer", "tmp_2_0", "sidebarDataBeforeFiltering", "ungroupedData", "length", "undefined", "_r7", "onUpdateSidebar", "emit", "searchValue", "groupedData", "sidebarType", "storageId", "routeParams", "courseId", "itemSelected", "tmp_9_0", "showAccordionLeadingIcon", "channelTypeIcon", "sidebarItemAlwaysShow", "collapseState", "_c6", "\u0275$index_134_r9", "\u0275$count_134_r10", "sidebarItem_r8", "size", "\u0275\u0275repeaterCreate", "SidebarComponent_Conditional_11_Conditional_4_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "\u0275\u0275pipeBind3", "\u0275\u0275pureFunction0", "_c2", "SidebarComponent_Conditional_11_Conditional_3_Template", "SidebarComponent_Conditional_11_Conditional_4_Template", "\u0275\u0275pureFunction3", "_c5", "groupByCategory", "SidebarComponent", "route", "inject", "ActivatedRoute", "profileService", "ProfileService", "sidebarEventService", "SidebarEventService", "modalService", "NgbModal", "onSelectConversation", "EventEmitter", "onDirectChatPressed", "output", "onGroupChatPressed", "onBrowsePressed", "onCreateChannelPressed", "onMarkAllChannelsAsRead", "searchFieldEnabled", "input", "required", "isCollapsed", "reEmitNonDistinctSidebarEvents", "exerciseId", "paramSubscription", "profileSubscription", "sidebarEventSubscription", "modalRef", "faFilterCircleXmark", "exerciseFilters", "constructor", "effect", "subscribeToSidebarEvents", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "inProduction", "testServer", "unsubscribe", "listener", "sidebarCardEventListener", "pipe", "distinctUntilChanged", "itemId", "storeLastSelectedItem", "ngOnChanges", "params", "sessionStorage", "setItem", "JSON", "stringify", "ngOnDestroy", "emitResetValue", "getSize", "initializeFilterOptions", "cloneDeep", "open", "ExerciseFilterModalComponent", "backdrop", "animation", "componentInstance", "filterApplied", "exerciseFilterResults", "filteredSidebarData", "appliedExerciseFilters", "scoreAndPointsFilterOptions", "getAchievablePointsAndAchievedScoreFilterOptions", "categoryFilter", "getExerciseCategoryFilterOptions", "exerciseTypesFilter", "getExerciseTypeFilterOptions", "difficultyFilter", "getExerciseDifficultyFilterOptions", "achievedScore", "achievablePoints", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "SidebarComponent_Conditional_8_Template", "SidebarComponent_Conditional_9_Template", "SidebarComponent_Conditional_11_Template", "\u0275\u0275pureFunction2", "_c0", "_c1", "tmp_3_0", "NgClass", "SearchFilterComponent", "FaIconComponent", "TranslateDirective", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbDropdownButtonItem", "NgbDropdownItem", "SidebarAccordionComponent", "SidebarCardDirective", "SearchFilterPipe", "styles"]
}
