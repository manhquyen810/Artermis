{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/orion/modal-confirm-autofocus/modal-confirm-autofocus.component.ts", "src/main/webapp/app/shared/orion/modal-confirm-autofocus/modal-confirm-autofocus.component.html", "src/main/webapp/app/home/saml2-login/saml2-login.component.ts", "src/main/webapp/app/home/saml2-login/saml2-login.component.html", "src/main/webapp/app/home/home.component.ts", "src/main/webapp/app/home/home.component.html"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-modal-confirm-autofocus',\r\n    templateUrl: './modal-confirm-autofocus.component.html',\r\n    imports: [ArtemisTranslatePipe],\r\n})\r\nexport class ModalConfirmAutofocusComponent {\r\n    modal = inject(NgbActiveModal);\r\n\r\n    title: string;\r\n    text: string;\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">{{ title | artemisTranslate }}</h4>\r\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close button\" aria-describedby=\"modal-title\" (click)=\"modal.dismiss('Cross click')\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <p>{{ text | artemisTranslate }}</p>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"modal.dismiss('cancel click')\">Cancel</button>\r\n    <button type=\"button\" ngbAutofocus class=\"btn btn-danger\" (click)=\"modal.close('Ok click')\">Ok</button>\r\n</div>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { LoginService } from 'app/core/login/login.service';\r\nimport { Saml2Config } from 'app/home/saml2-login/saml2.config';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\n@Component({\r\n    selector: 'jhi-saml2-login',\r\n    templateUrl: './saml2-login.component.html',\r\n    imports: [],\r\n})\r\nexport class Saml2LoginComponent implements OnInit {\r\n    private loginService = inject(LoginService);\r\n    private eventManager = inject(EventManager);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() rememberMe = true;\r\n    @Input() acceptedTerms = false;\r\n    @Input() saml2Profile: Saml2Config;\r\n\r\n    ngOnInit(): void {\r\n        // If SAML2 flow was started, retry login.\r\n        if (document.cookie.indexOf('SAML2flow=') >= 0) {\r\n            // remove cookie\r\n            document.cookie = 'SAML2flow=; expires=Thu, 01 Jan 1970 00:00:00 UTC; ; SameSite=Lax;';\r\n            this.loginSAML2();\r\n        }\r\n    }\r\n\r\n    loginSAML2() {\r\n        this.loginService\r\n            .loginSAML2(this.rememberMe)\r\n            .then(() => {\r\n                this.eventManager.broadcast({\r\n                    name: 'authenticationSuccess',\r\n                    content: 'Sending Authentication Success',\r\n                });\r\n            })\r\n            .catch((error: HttpErrorResponse) => {\r\n                if (error.status === 401) {\r\n                    // (re)set cookie\r\n                    document.cookie = 'SAML2flow=true; max-age=120; SameSite=Lax;';\r\n                    // arbitrary by SAML2 HTTP Filter Chain secured URL\r\n                    window.location.replace('/saml2/authenticate');\r\n                } else if (error.status === 403) {\r\n                    // for example if user was disabled\r\n                    let message = 'Forbidden';\r\n                    const details = error.headers.get('X-artemisApp-error');\r\n                    if (details) {\r\n                        message += ': ' + details;\r\n                    }\r\n                    this.alertService.warning(message);\r\n                }\r\n            });\r\n    }\r\n}\r\n", "<button type=\"button\" id=\"saml2Button\" class=\"btn btn-primary btn-lg\" [disabled]=\"!acceptedTerms\" (click)=\"loginSAML2()\">\r\n    <span>{{ saml2Profile.buttonLabel || 'SAML2 Login' }}</span>\r\n</button>\r\n", "import { AfterViewChecked, Component, OnInit, Renderer2, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { Credentials } from 'app/core/auth/auth-jwt.service';\r\nimport { OrionConnectorService } from 'app/shared/orion/orion-connector.service';\r\nimport { isOrion } from 'app/shared/orion/orion';\r\nimport { ModalConfirmAutofocusComponent } from 'app/shared/orion/modal-confirm-autofocus/modal-confirm-autofocus.component';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { LoginService } from 'app/core/login/login.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { ProfileInfo } from 'app/shared/layouts/profiles/profile-info.model';\r\nimport { PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH, USERNAME_MAX_LENGTH, USERNAME_MIN_LENGTH } from 'app/app.constants';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { TranslateDirective } from '../shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { Saml2LoginComponent } from './saml2-login/saml2-login.component';\r\n\r\n@Component({\r\n    selector: 'jhi-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['home.scss'],\r\n    imports: [TranslateDirective, FormsModule, RouterLink, FaIconComponent, Saml2LoginComponent],\r\n})\r\nexport class HomeComponent implements OnInit, AfterViewChecked {\r\n    private router = inject(Router);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private accountService = inject(AccountService);\r\n    private loginService = inject(LoginService);\r\n    private stateStorageService = inject(StateStorageService);\r\n    private renderer = inject(Renderer2);\r\n    private eventManager = inject(EventManager);\r\n    private orionConnectorService = inject(OrionConnectorService);\r\n    private modalService = inject(NgbModal);\r\n    private profileService = inject(ProfileService);\r\n    private alertService = inject(AlertService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    USERNAME_MIN_LENGTH = USERNAME_MIN_LENGTH;\r\n    USERNAME_MAX_LENGTH = USERNAME_MAX_LENGTH;\r\n    PASSWORD_MIN_LENGTH = PASSWORD_MIN_LENGTH;\r\n    PASSWORD_MAX_LENGTH = PASSWORD_MAX_LENGTH;\r\n    authenticationError = false;\r\n    account: User;\r\n    modalRef: NgbModalRef;\r\n    password: string;\r\n    rememberMe = true;\r\n    // in case this is activated (see application-artemis.yml), users have to actively click into it\r\n    needsToAcceptTerms = false;\r\n    userAcceptedTerms = false;\r\n    username: string;\r\n    credentials: Credentials;\r\n    isRegistrationEnabled = false;\r\n    isPasswordLoginDisabled = false;\r\n    loading = true;\r\n    mainElementFocused = false;\r\n\r\n    usernamePlaceholder = 'global.form.username.placeholder'; // default, might be overridden\r\n    usernamePlaceholderTranslated = 'Login or email'; // default, might be overridden\r\n    // if the server is not connected to an external user management, we accept all valid username patterns\r\n    usernameRegexPattern = /^[a-zA-Z0-9.@_-]{4,50}$/; // default (at least 4, at most 50 characters), might be overridden\r\n    errorMessageUsername = 'home.errors.usernameIncorrect'; // default, might be overridden\r\n    accountName?: string; // additional information in the welcome message\r\n\r\n    externalUserManagementActive = true;\r\n\r\n    isFormValid = false;\r\n    isSubmittingLogin = false;\r\n\r\n    profileInfo: ProfileInfo | undefined = undefined;\r\n\r\n    // Icons\r\n    faCircleNotch = faCircleNotch;\r\n    usernameTouched = false;\r\n    passwordTouched = false;\r\n\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.initializeWithProfileInfo(profileInfo);\r\n            }\r\n        });\r\n        this.accountService.identity().then((user) => {\r\n            this.currentUserCallback(user!);\r\n\r\n            // Once this has loaded and the user is not defined, we know we need the user to log in\r\n            if (!user) {\r\n                this.loading = false;\r\n            }\r\n        });\r\n        this.registerAuthenticationSuccess();\r\n\r\n        const prefilledUsername = this.accountService.getAndClearPrefilledUsername();\r\n        if (prefilledUsername) {\r\n            this.username = prefilledUsername;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the component with the required information received from the server.\r\n     * @param profileInfo The information from the server how logins should be handled.\r\n     */\r\n    private initializeWithProfileInfo(profileInfo: ProfileInfo) {\r\n        this.profileInfo = profileInfo;\r\n        this.externalUserManagementActive = false;\r\n\r\n        this.accountName = profileInfo.accountName;\r\n        if (profileInfo.allowedLdapUsernamePattern) {\r\n            this.usernameRegexPattern = new RegExp(profileInfo.allowedLdapUsernamePattern);\r\n        }\r\n        if (this.accountName === 'TUM') {\r\n            this.usernamePlaceholder = 'global.form.username.tumPlaceholder';\r\n            this.errorMessageUsername = 'home.errors.tumWarning';\r\n            // Temporary workaround: Do not show a warning when TUM users login with an email address with a specific ending\r\n            // allow emails with exactly one @ and usernames between 7 and 50 characters (shorter TUM usernames are not possible)\r\n            this.usernameRegexPattern = new RegExp(/^(?!.*@.*@)[a-zA-Z0-9.@_-]{7,50}$/);\r\n        }\r\n        this.usernamePlaceholderTranslated = this.translateService.instant(this.usernamePlaceholder);\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.usernamePlaceholderTranslated = this.translateService.instant(this.usernamePlaceholder);\r\n        });\r\n\r\n        this.isRegistrationEnabled = !!profileInfo.registrationEnabled;\r\n        this.needsToAcceptTerms = !!profileInfo.needsToAcceptTerms;\r\n        this.activatedRoute.queryParams.subscribe((params) => {\r\n            const loginFormOverride = params.hasOwnProperty('showLoginForm');\r\n            this.isPasswordLoginDisabled = !!this.profileInfo?.saml2 && this.profileInfo.saml2.passwordLoginDisabled && !loginFormOverride;\r\n        });\r\n    }\r\n\r\n    registerAuthenticationSuccess() {\r\n        const subscription = this.eventManager.subscribe('authenticationSuccess', () => {\r\n            // We only need to authenticate once, make sure we don't run this subscription multiple times\r\n            this.eventManager.destroy(subscription);\r\n\r\n            this.accountService.identity().then((user) => {\r\n                this.currentUserCallback(user!);\r\n            });\r\n        });\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // Only focus the username input once, not on every update\r\n        if (this.mainElementFocused || this.loading) {\r\n            return;\r\n        }\r\n\r\n        // Focus on the main element as soon as it is visible\r\n        const mainElement = this.renderer.selectRootElement(this.isPasswordLoginDisabled ? '#saml2Button' : '#username', true);\r\n        if (mainElement) {\r\n            mainElement.focus();\r\n            this.mainElementFocused = true;\r\n        }\r\n\r\n        // If the session expired or similar display a warning\r\n        if (this.loginService.lastLogoutWasForceful()) {\r\n            this.alertService.error('home.errors.sessionExpired');\r\n        }\r\n    }\r\n\r\n    login() {\r\n        this.isSubmittingLogin = true;\r\n        this.loginService\r\n            .login({\r\n                username: this.username,\r\n                password: this.password,\r\n                rememberMe: this.rememberMe,\r\n            })\r\n            .then(() => this.handleLoginSuccess())\r\n            .catch(() => {\r\n                this.authenticationError = true;\r\n            })\r\n            .finally(() => (this.isSubmittingLogin = false));\r\n    }\r\n\r\n    /**\r\n     * Handle a successful user login.\r\n     */\r\n    private handleLoginSuccess() {\r\n        this.authenticationError = false;\r\n\r\n        if (this.router.url === '/register' || /^\\/activate\\//.test(this.router.url) || /^\\/reset\\//.test(this.router.url)) {\r\n            this.router.navigate(['']);\r\n        }\r\n\r\n        this.eventManager.broadcast({\r\n            name: 'authenticationSuccess',\r\n            content: 'Sending Authentication Success',\r\n        });\r\n\r\n        this.handleOrionLogin();\r\n    }\r\n\r\n    /**\r\n     * Handle special login procedures when inside the Orion plugin.\r\n     */\r\n    private handleOrionLogin() {\r\n        if (!isOrion) {\r\n            return;\r\n        }\r\n\r\n        const modalRef: NgbModalRef = this.modalService.open(ModalConfirmAutofocusComponent as Component, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n        });\r\n        modalRef.componentInstance.text = 'login.ide.confirmation';\r\n        modalRef.componentInstance.title = 'login.ide.title';\r\n        modalRef.result.then(\r\n            () => this.orionConnectorService.login(this.username, this.password),\r\n            () => {},\r\n        );\r\n    }\r\n\r\n    currentUserCallback(account: User) {\r\n        this.account = account;\r\n        if (account) {\r\n            // previousState was set in the authExpiredInterceptor before being redirected to the login modal.\r\n            // since login is successful, go to stored previousState and clear previousState\r\n            const redirect = this.stateStorageService.getUrl();\r\n            if (redirect && redirect !== '') {\r\n                this.stateStorageService.storeUrl('');\r\n                this.router.navigateByUrl(redirect);\r\n            } else {\r\n                this.router.navigate(['courses']);\r\n            }\r\n        }\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return this.accountService.isAuthenticated();\r\n    }\r\n\r\n    inputChange(event: any) {\r\n        if (event.target && event.target.name === 'username') {\r\n            this.username = event.target.value;\r\n        }\r\n        if (event.target && event.target.name === 'password') {\r\n            this.password = event.target.value;\r\n        }\r\n    }\r\n\r\n    checkFormValidity() {\r\n        this.isFormValid =\r\n            this.username !== undefined &&\r\n            this.username.length >= this.USERNAME_MIN_LENGTH &&\r\n            this.username.length <= this.USERNAME_MAX_LENGTH &&\r\n            this.password !== undefined &&\r\n            this.password.length >= this.PASSWORD_MIN_LENGTH &&\r\n            this.password.length <= this.PASSWORD_MAX_LENGTH;\r\n    }\r\n}\r\n", "<div [hidden]=\"loading || account\" class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-8 offset-md-2 text-center\">\r\n            <h1 jhiTranslate=\"home.title\"></h1>\r\n            <p class=\"lead\" jhiTranslate=\"home.subtitle\"></p>\r\n        </div>\r\n    </div>\r\n    <div class=\"row row-divided my-4 justify-content-center\">\r\n        @if (!isPasswordLoginDisabled) {\r\n            <div class=\"login-col col-12 col-xl-5 h-100\">\r\n                <!-- Traditional Authentication -->\r\n                @if (!accountName) {\r\n                    <div [jhiTranslate]=\"'home.login.traditional.pleaseSignIn'\" class=\"lead text-center\">Please sign in with your account.</div>\r\n                }\r\n                @if (accountName) {\r\n                    <div [jhiTranslate]=\"'home.login.traditional.pleaseSignInAccount'\" [translateValues]=\"{ account: accountName }\" class=\"lead text-center mb-4\">\r\n                        Sign in with your account.\r\n                    </div>\r\n                }\r\n                <div class=\"login-form\">\r\n                    <form (change)=\"inputChange($event)\" (ngSubmit)=\"login()\" class=\"mb-5\" name=\"loginForm\" role=\"form\">\r\n                        <div class=\"form-group\">\r\n                            @if (authenticationError) {\r\n                                <div class=\"alert alert-danger my-3\" jhiTranslate=\"home.errors.failedToLogin\">\r\n                                    <span class=\"bold\">Failed to sign in!</span> Please check your login and password and try again.\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group pb-2\">\r\n                            <label class=\"mb-2\" for=\"username\" jhiTranslate=\"global.form.username\"></label>\r\n                            <input\r\n                                #usernameForm=\"ngModel\"\r\n                                [(ngModel)]=\"username\"\r\n                                [ngModelOptions]=\"{ updateOn: 'change' }\"\r\n                                [pattern]=\"usernameRegexPattern\"\r\n                                autocomplete=\"username\"\r\n                                class=\"form-control\"\r\n                                id=\"username\"\r\n                                name=\"username\"\r\n                                [placeholder]=\"usernamePlaceholderTranslated\"\r\n                                [minlength]=\"USERNAME_MIN_LENGTH\"\r\n                                [maxLength]=\"USERNAME_MAX_LENGTH\"\r\n                                (ngModelChange)=\"checkFormValidity()\"\r\n                                (blur)=\"usernameTouched = true\"\r\n                                type=\"text\"\r\n                                tabindex=\"1\"\r\n                            />\r\n                            @if (usernameForm.errors && (usernameForm.dirty || usernameForm.touched) && usernameTouched) {\r\n                                <span class=\"mt-1 text-danger small\" [jhiTranslate]=\"errorMessageUsername\"></span>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <div class=\"d-flex mb-2\">\r\n                                <label for=\"password\" jhiTranslate=\"login.form.password\"></label>\r\n                                <div class=\"ms-auto\">\r\n                                    <a class=\"text-primary small\" jhiTranslate=\"login.password.forgot\" routerLink=\"account/reset/request\" tabindex=\"4\"></a>\r\n                                </div>\r\n                            </div>\r\n                            <input\r\n                                #passwordForm=\"ngModel\"\r\n                                [(ngModel)]=\"password\"\r\n                                [ngModelOptions]=\"{ updateOn: 'change' }\"\r\n                                autocomplete=\"current-password\"\r\n                                class=\"form-control\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                [minlength]=\"PASSWORD_MIN_LENGTH\"\r\n                                [maxLength]=\"PASSWORD_MAX_LENGTH\"\r\n                                (ngModelChange)=\"checkFormValidity()\"\r\n                                (blur)=\"passwordTouched = true\"\r\n                                tabindex=\"2\"\r\n                            />\r\n                            @if (passwordForm.errors && (passwordForm.dirty || passwordForm.touched) && passwordTouched) {\r\n                                <span class=\"mt-1 text-danger small\" jhiTranslate=\"home.errors.passwordIncorrect\"></span>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <div class=\"form-check\">\r\n                                <label class=\"form-check-label\" for=\"rememberMe\">\r\n                                    <input [(ngModel)]=\"rememberMe\" checked class=\"form-check-input\" id=\"rememberMe\" name=\"rememberMe\" type=\"checkbox\" />\r\n                                    <span jhiTranslate=\"login.form.rememberme\"></span>\r\n                                </label>\r\n                            </div>\r\n                            @if (needsToAcceptTerms) {\r\n                                <div class=\"form-check\">\r\n                                    <label class=\"form-check-label\" for=\"acceptTerms\">\r\n                                        <input [(ngModel)]=\"userAcceptedTerms\" checked class=\"form-check-input\" id=\"acceptTerms\" name=\"acceptTerms\" type=\"checkbox\" />\r\n                                        <a [routerLink]=\"['privacy']\" jhiTranslate=\"login.form.acceptTerms\"></a>\r\n                                    </label>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"btn-toolbar\">\r\n                            <button\r\n                                [disabled]=\"isSubmittingLogin || (!userAcceptedTerms && needsToAcceptTerms) || !isFormValid\"\r\n                                class=\"btn btn-primary w-100\"\r\n                                id=\"login-button\"\r\n                                type=\"submit\"\r\n                                tabindex=\"3\"\r\n                            >\r\n                                @if (isSubmittingLogin) {\r\n                                    <span class=\"me-1\"><fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" /></span>\r\n                                }\r\n                                <span jhiTranslate=\"login.form.button\"></span>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                    <div class=\"text-center\">\r\n                        @if (isRegistrationEnabled) {\r\n                            <div>\r\n                                <span jhiTranslate=\"global.messages.info.register.noaccount\"></span>&nbsp;\r\n                                <a class=\"text-primary\" jhiTranslate=\"global.messages.info.register.link\" routerLink=\"account/register\"></a>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (!isPasswordLoginDisabled && !!profileInfo?.saml2) {\r\n            <div class=\"col-12 col-xl-2 py-5 h-100\">\r\n                <div class=\"d-none d-xl-block vertical-divider\" jhiTranslate=\"login.divider\"></div>\r\n                <div class=\"d-xl-none horizontal-divider\" jhiTranslate=\"login.divider\"></div>\r\n            </div>\r\n        }\r\n        @if (!!profileInfo?.saml2) {\r\n            <div class=\"login-col col-12 col-xl-5\">\r\n                <!-- SAML2 Authentication -->\r\n                <div class=\"h-100 d-flex flex-column align-items-center justify-content-center\">\r\n                    @if (!profileInfo!.saml2!.identityProviderName) {\r\n                        <div [jhiTranslate]=\"'home.login.saml2.pleaseSignIn'\" class=\"lead text-center\">Please sign in via Single Sign-on.</div>\r\n                    }\r\n                    @if (profileInfo!.saml2!.identityProviderName) {\r\n                        <div\r\n                            [jhiTranslate]=\"'home.login.saml2.pleaseSignInProvider'\"\r\n                            [translateValues]=\"{ provider: profileInfo!.saml2!.identityProviderName }\"\r\n                            class=\"lead text-center\"\r\n                        >\r\n                            Please sign in.\r\n                        </div>\r\n                    }\r\n                    <div class=\"saml2-center d-flex flex-column align-items-center justify-content-center flex-grow-1\">\r\n                        <div class=\"form-group\">\r\n                            @if (needsToAcceptTerms) {\r\n                                <div class=\"form-check\">\r\n                                    <label class=\"form-check-label\" for=\"acceptTerms\">\r\n                                        <input [(ngModel)]=\"userAcceptedTerms\" class=\"form-check-input\" type=\"checkbox\" />\r\n                                        <a [routerLink]=\"['privacy']\" jhiTranslate=\"login.form.acceptTerms\"></a>\r\n                                    </label>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <jhi-saml2-login\r\n                            [acceptedTerms]=\"!needsToAcceptTerms || userAcceptedTerms\"\r\n                            [rememberMe]=\"rememberMe\"\r\n                            [saml2Profile]=\"profileInfo!.saml2!\"\r\n                            class=\"d-block text-center\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["ModalConfirmAutofocusComponent", "modal", "inject", "NgbActiveModal", "title", "text", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "dismiss", "close", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "ArtemisTranslatePipe", "encapsulation", "Saml2LoginComponent", "loginService", "inject", "LoginService", "eventManager", "EventManager", "alertService", "AlertService", "rememberMe", "acceptedTerms", "saml2Profile", "ngOnInit", "document", "cookie", "indexOf", "loginSAML2", "then", "broadcast", "name", "content", "catch", "error", "status", "window", "location", "replace", "message", "details", "headers", "get", "warning", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "buttonLabel", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "ctx_r1", "accountName", "\u0275\u0275element", "errorMessageUsername", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "userAcceptedTerms", "\u0275\u0275resetView", "\u0275\u0275twoWayProperty", "\u0275\u0275pureFunction0", "_c2", "faCircleNotch", "\u0275\u0275template", "HomeComponent_Conditional_14_Conditional_4_Template", "HomeComponent_Conditional_14_Conditional_5_Template", "\u0275\u0275listener", "_r1", "inputChange", "login", "HomeComponent_Conditional_14_Conditional_12_Template", "username", "checkFormValidity", "usernameTouched", "HomeComponent_Conditional_14_Conditional_21_Template", "password", "passwordTouched", "HomeComponent_Conditional_14_Conditional_38_Template", "rememberMe", "HomeComponent_Conditional_14_Conditional_52_Template", "HomeComponent_Conditional_14_Conditional_58_Template", "HomeComponent_Conditional_14_Conditional_66_Template", "\u0275\u0275conditional", "authenticationError", "_c0", "usernameRegexPattern", "usernamePlaceholderTranslated", "USERNAME_MIN_LENGTH", "USERNAME_MAX_LENGTH", "usernameForm_r4", "errors", "dirty", "touched", "PASSWORD_MIN_LENGTH", "PASSWORD_MAX_LENGTH", "passwordForm_r5", "needsToAcceptTerms", "isSubmittingLogin", "isFormValid", "isRegistrationEnabled", "_c3", "profileInfo", "saml2", "identityProviderName", "_r6", "HomeComponent_Conditional_16_Conditional_6_Template", "HomeComponent_Conditional_16_Conditional_7_Template", "HomeComponent_Conditional_16_Conditional_12_Template", "HomeComponent", "router", "inject", "Router", "activatedRoute", "ActivatedRoute", "accountService", "AccountService", "loginService", "LoginService", "stateStorageService", "StateStorageService", "renderer", "Renderer2", "eventManager", "EventManager", "orionConnectorService", "OrionConnectorService", "modalService", "NgbModal", "profileService", "ProfileService", "alertService", "AlertService", "translateService", "TranslateService", "account", "modalRef", "credentials", "isPasswordLoginDisabled", "loading", "mainElementFocused", "usernamePlaceholder", "externalUserManagementActive", "undefined", "ngOnInit", "getProfileInfo", "subscribe", "initializeWithProfileInfo", "identity", "then", "user", "currentUserCallback", "registerAuthenticationSuccess", "prefilledUsername", "getAndClearPrefilledUsername", "allowedLdapUsernamePattern", "RegExp", "instant", "onLangChange", "registrationEnabled", "queryParams", "params", "loginFormOverride", "hasOwnProperty", "passwordLoginDisabled", "subscription", "destroy", "ngAfterViewChecked", "mainElement", "selectRootElement", "focus", "lastLogoutWasForceful", "error", "handleLoginSuccess", "catch", "finally", "url", "test", "navigate", "broadcast", "name", "content", "handleOrionLogin", "isOrion", "open", "ModalConfirmAutofocusComponent", "size", "backdrop", "componentInstance", "text", "title", "result", "redirect", "getUrl", "storeUrl", "navigateByUrl", "isAuthenticated", "event", "target", "value", "length", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "HomeComponent_Conditional_14_Template", "HomeComponent_Conditional_15_Template", "HomeComponent_Conditional_16_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MinLengthValidator", "PatternValidator", "NgModel", "NgForm", "RouterLink", "FaIconComponent", "Saml2LoginComponent", "styles"]
}
