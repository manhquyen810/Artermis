{
  "version": 3,
  "sources": ["src/main/webapp/app/localvc/commit-details-view/commit-details-view.component.ts", "src/main/webapp/app/localvc/commit-details-view/commit-details-view.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ProgrammingExerciseGitDiffReport } from 'app/entities/programming-exercise-git-diff-report.model';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { Subscription, throwError } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CommitInfo } from 'app/entities/programming/programming-submission.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { GitDiffReportComponent } from 'app/exercises/programming/git-diff-report/git-diff-report.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\n@Component({\r\n    selector: 'jhi-commit-details-view',\r\n    templateUrl: './commit-details-view.component.html',\r\n    imports: [GitDiffReportComponent, ArtemisDatePipe, ArtemisTranslatePipe],\r\n})\r\nexport class CommitDetailsViewComponent implements OnDestroy, OnInit {\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private route = inject(ActivatedRoute);\r\n\r\n    report: ProgrammingExerciseGitDiffReport;\r\n    exerciseId: number;\r\n    repositoryId?: number; // acts as both participationId (USER repositories) and repositoryId (AUXILIARY repositories), undefined for TEMPLATE, SOLUTION and TEST\r\n    commitHash: string;\r\n    isTemplate = false;\r\n\r\n    errorWhileFetching = false;\r\n    leftCommitFileContentByPath: Map<string, string>;\r\n    rightCommitFileContentByPath: Map<string, string>;\r\n    commits: CommitInfo[] = [];\r\n    currentCommit: CommitInfo;\r\n    previousCommit: CommitInfo;\r\n    repositoryType: RepositoryType;\r\n\r\n    repoFilesSubscription: Subscription;\r\n    participationRepoFilesAtLeftCommitSubscription: Subscription;\r\n    participationRepoFilesAtRightCommitSubscription: Subscription;\r\n\r\n    paramSub: Subscription;\r\n    participationSub: Subscription;\r\n\r\n    ngOnDestroy(): void {\r\n        this.repoFilesSubscription?.unsubscribe();\r\n        this.participationRepoFilesAtLeftCommitSubscription?.unsubscribe();\r\n        this.participationRepoFilesAtRightCommitSubscription?.unsubscribe();\r\n        this.paramSub?.unsubscribe();\r\n        this.participationSub?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * On init, subscribe to the route params to get the exercise id, participation id and commit hash.\r\n     * Then, retrieve the student participation with all results and handle the commits.\r\n     * After that, retrieve and handle the commits.\r\n     */\r\n    ngOnInit(): void {\r\n        this.paramSub = this.route.params.subscribe((params) => {\r\n            this.exerciseId = Number(params['exerciseId']);\r\n            this.repositoryId = Number(params['repositoryId']);\r\n            this.commitHash = params['commitHash'];\r\n            this.repositoryType = params['repositoryType'] ?? 'USER';\r\n            this.retrieveAndHandleCommits();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the commits for the participation and sets the current and previous commit.\r\n     * If there is no previous commit, the template commit is chosen.\r\n     * Finally the diff report is fetched.\r\n     * @private\r\n     */\r\n    private retrieveAndHandleCommits() {\r\n        let commitInfoSubscription;\r\n\r\n        if (this.repositoryType === RepositoryType.TEMPLATE || this.repositoryType === RepositoryType.SOLUTION || this.repositoryType === RepositoryType.TESTS) {\r\n            commitInfoSubscription = this.programmingExerciseParticipationService.retrieveCommitHistoryForTemplateSolutionOrTests(this.exerciseId, this.repositoryType);\r\n        }\r\n        if (this.repositoryType === RepositoryType.AUXILIARY) {\r\n            commitInfoSubscription = this.programmingExerciseParticipationService.retrieveCommitHistoryForAuxiliaryRepository(this.exerciseId, this.repositoryId!);\r\n        }\r\n        if (this.repositoryType === RepositoryType.USER) {\r\n            commitInfoSubscription = this.programmingExerciseParticipationService.retrieveCommitHistoryForParticipation(this.repositoryId!);\r\n        }\r\n        if (!commitInfoSubscription) {\r\n            return;\r\n        }\r\n\r\n        commitInfoSubscription\r\n            .pipe(\r\n                map((commits) => commits.sort((a, b) => (dayjs(b.timestamp).isAfter(dayjs(a.timestamp)) ? 1 : -1))),\r\n                tap((sortedCommits) => {\r\n                    this.commits = sortedCommits;\r\n                    const foundIndex = this.commits.findIndex((commit) => commit.hash === this.commitHash);\r\n                    if (foundIndex !== -1) {\r\n                        this.currentCommit = this.commits[foundIndex];\r\n                        this.previousCommit = foundIndex < this.commits.length - 1 ? this.commits[foundIndex + 1] : this.commits[this.commits.length - 1];\r\n                        this.isTemplate = foundIndex === this.commits.length - 1;\r\n                    }\r\n                }),\r\n                catchError(() => {\r\n                    return throwError(() => new Error('Error processing commits'));\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => this.getDiffReport(),\r\n                error: () => {\r\n                    this.errorWhileFetching = true;\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets the diff report for the current and previous commit or the template commit and an empty file.\r\n     * @private\r\n     */\r\n    private getDiffReport() {\r\n        this.repoFilesSubscription = this.programmingExerciseService\r\n            .getDiffReportForCommits(this.exerciseId, this.repositoryId, this.previousCommit.hash!, this.currentCommit.hash!, this.repositoryType)\r\n            .subscribe((report) => {\r\n                this.handleNewReport(report!);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles the new report and sets the report, the left and right commit hash and the participation ids for the left and right commit.\r\n     * @param report the new report\r\n     * @private\r\n     */\r\n    private handleNewReport(report: ProgrammingExerciseGitDiffReport) {\r\n        this.report = report;\r\n        this.report.leftCommitHash = this.previousCommit.hash;\r\n        this.report.rightCommitHash = this.currentCommit.hash;\r\n        this.report.participationIdForLeftCommit = this.repositoryId;\r\n        this.report.participationIdForRightCommit = this.repositoryId;\r\n        this.fetchParticipationRepoFiles();\r\n    }\r\n\r\n    /**\r\n     * Fetches the participation repository files for the left and right commit.\r\n     * @private\r\n     */\r\n    private fetchParticipationRepoFiles() {\r\n        if (this.isTemplate) {\r\n            this.leftCommitFileContentByPath = new Map<string, string>();\r\n            this.fetchParticipationRepoFilesAtRightCommit();\r\n        } else {\r\n            this.participationRepoFilesAtLeftCommitSubscription = this.programmingExerciseParticipationService\r\n                .getParticipationRepositoryFilesWithContentAtCommitForCommitDetailsView(\r\n                    this.exerciseId,\r\n                    this.report.participationIdForLeftCommit!,\r\n                    this.report.leftCommitHash!,\r\n                    this.repositoryType,\r\n                )\r\n                .subscribe({\r\n                    next: (filesWithContent: Map<string, string>) => {\r\n                        this.leftCommitFileContentByPath = filesWithContent;\r\n                        this.fetchParticipationRepoFilesAtRightCommit();\r\n                    },\r\n                    error: () => {\r\n                        this.errorWhileFetching = true;\r\n                    },\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches the participation repository files for the right commit.\r\n     * @private\r\n     */\r\n    private fetchParticipationRepoFilesAtRightCommit() {\r\n        this.participationRepoFilesAtRightCommitSubscription = this.programmingExerciseParticipationService\r\n            .getParticipationRepositoryFilesWithContentAtCommitForCommitDetailsView(\r\n                this.exerciseId,\r\n                this.report.participationIdForRightCommit!,\r\n                this.report.rightCommitHash!,\r\n                this.repositoryType,\r\n            )\r\n            .subscribe({\r\n                next: (filesWithContent: Map<string, string>) => {\r\n                    this.rightCommitFileContentByPath = filesWithContent;\r\n                },\r\n                error: () => {\r\n                    this.errorWhileFetching = true;\r\n                },\r\n            });\r\n    }\r\n}\r\n", "@if (currentCommit) {\r\n    <h3>\r\n        {{ 'artemisApp.repository.commitHistory.commitDetails.commit' | artemisTranslate }} <span class=\"text-primary\">{{ currentCommit.hash }} </span>\r\n    </h3>\r\n\r\n    <div>\r\n        <p>\r\n            <span\r\n                ><strong>{{ 'artemisApp.repository.commitHistory.commitDetails.author' | artemisTranslate }}</strong\r\n                >: {{ currentCommit.author }}, <span class=\"text-primary\">{{ currentCommit.authorEmail }}</span></span\r\n            >\r\n            <span style=\"margin-left: 40px\"\r\n                ><strong>{{ 'artemisApp.repository.commitHistory.commitDetails.date' | artemisTranslate }}</strong\r\n                >: {{ currentCommit.timestamp | artemisDate: 'long' : true }}</span\r\n            >\r\n            <span style=\"margin-left: 40px\"\r\n                ><strong>{{ 'artemisApp.repository.commitHistory.commitDetails.commitMessage' | artemisTranslate }}</strong\r\n                >: {{ currentCommit.message }}</span\r\n            >\r\n        </p>\r\n    </div>\r\n    <br />\r\n\r\n    @if (report && leftCommitFileContentByPath && rightCommitFileContentByPath) {\r\n        <jhi-git-diff-report\r\n            [report]=\"report\"\r\n            [diffForTemplateAndSolution]=\"false\"\r\n            [templateFileContentByPath]=\"leftCommitFileContentByPath\"\r\n            [solutionFileContentByPath]=\"rightCommitFileContentByPath\"\r\n            [isRepositoryView]=\"true\"\r\n            [diffForTemplateAndEmptyRepository]=\"isTemplate\"\r\n        />\r\n    }\r\n}\r\n"],
  "mappings": "ugDCwBQA,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,sBAAA,CAAA,EAQJD,EAAA,EAAA;KAAA,mBAPQE,EAAA,EAAAC,EAAA,SAAAC,EAAAC,MAAA,EAAiB,6BAAA,EAAA,EACmB,4BAAAD,EAAAE,2BAAA,EACqB,4BAAAF,EAAAG,4BAAA,EACC,mBAAA,EAAA,EACjC,oCAAAH,EAAAI,UAAA,4BA5BjCR,EAAA,EAAA;KAAA,EAAAS,EAAA,EAAA,IAAA,EACIT,EAAA,CAAA,0BAAoFS,EAAA,EAAA,OAAA,CAAA,EAA2BT,EAAA,CAAA,EAAyBU,EAAA,EAC5IV,EAAA,EAAA;KAAA,EAAAU,EAAA,EAEAV,EAAA,EAAA;;KAAA,EAAAS,EAAA,EAAA,KAAA,EACIT,EAAA,EAAA;SAAA,EAAAS,EAAA,GAAA,GAAA,EACIT,EAAA,GAAA;aAAA,EAAAS,EAAA,GAAA,MAAA,EACK,GAAA,QAAA,EAAQT,EAAA,EAAA,2BAAmFU,EAAA,EAC3FV,EAAA,EAAA,EAA8BS,EAAA,GAAA,OAAA,CAAA,EAA2BT,EAAA,EAAA,EAA+BU,EAAA,EAAO,EAEpGV,EAAA,GAAA;aAAA,EAAAS,EAAA,GAAA,OAAA,CAAA,EACK,GAAA,QAAA,EAAQT,EAAA,EAAA,2BAAiFU,EAAA,EACzFV,EAAA,EAAA,sBAA4DU,EAAA,EAEjEV,EAAA,GAAA;aAAA,EAAAS,EAAA,GAAA,OAAA,CAAA,EACK,GAAA,QAAA,EAAQT,EAAA,EAAA,2BAA0FU,EAAA,EAClGV,EAAA,EAAA,EAA6BU,EAAA,EAEtCV,EAAA,GAAA;SAAA,EAAAU,EAAA,EACJV,EAAA,GAAA;KAAA,EAAAU,EAAA,EACAV,EAAA,GAAA;KAAA,EAAAC,EAAA,GAAA,IAAA,EAEAD,EAAA,GAAA;;KAAA,EAAAW,EAAA,GAAAC,EAAA,EAAA,CAAA,kBArBIV,EAAA,CAAA,EAAAW,EAAA;UAAAC,EAAA,EAAA,GAAA,0DAAA,EAAA,GAAA,EAA+GZ,EAAA,CAAA,EAAAW,EAAA,GAAAT,EAAAW,cAAAC,KAAA,GAAA,EAM9Fd,EAAA,CAAA,EAAAe,EAAAH,EAAA,GAAA,GAAA,0DAAA,CAAA,EACRZ,EAAA,CAAA,EAAAW,EAAA,KAAAT,EAAAW,cAAAG,OAAA,IAAA,EAAyDhB,EAAA,CAAA,EAAAe,EAAAb,EAAAW,cAAAI,WAAA,EAGjDjB,EAAA,CAAA,EAAAe,EAAAH,EAAA,GAAA,GAAA,wDAAA,CAAA,EACRZ,EAAA,CAAA,EAAAW,EAAA,KAAAO,EAAA,GAAA,GAAAhB,EAAAW,cAAAM,UAAA,OAAA,EAAA,EAAA,EAAA,EAGQnB,EAAA,CAAA,EAAAe,EAAAH,EAAA,GAAA,GAAA,iEAAA,CAAA,EACRZ,EAAA,CAAA,EAAAW,EAAA,KAAAT,EAAAW,cAAAO,QAAA,EAAA,EAMbpB,EAAA,CAAA,EAAAqB,EAAAnB,EAAAC,QAAAD,EAAAE,6BAAAF,EAAAG,6BAAA,GAAA,EAAA,GDJJ,IAAaiB,GAA0B,IAAA,CAAjC,MAAOA,CAA0B,CAC3BC,2BAA6BC,EAAOC,CAA0B,EAC9DC,wCAA0CF,EAAOG,CAAuC,EACxFC,MAAQJ,EAAOK,CAAc,EAErC1B,OACA2B,WACAC,aACAC,WACA1B,WAAa,GAEb2B,mBAAqB,GACrB7B,4BACAC,6BACA6B,QAAwB,CAAA,EACxBrB,cACAsB,eACAC,eAEAC,sBACAC,+CACAC,gDAEAC,SACAC,iBAEAC,aAAW,CACP,KAAKL,uBAAuBM,YAAW,EACvC,KAAKL,gDAAgDK,YAAW,EAChE,KAAKJ,iDAAiDI,YAAW,EACjE,KAAKH,UAAUG,YAAW,EAC1B,KAAKF,kBAAkBE,YAAW,CACtC,CAOAC,UAAQ,CACJ,KAAKJ,SAAW,KAAKZ,MAAMiB,OAAOC,UAAWD,GAAU,CACnD,KAAKf,WAAaiB,OAAOF,EAAO,UAAa,EAC7C,KAAKd,aAAegB,OAAOF,EAAO,YAAe,EACjD,KAAKb,WAAaa,EAAO,WACzB,KAAKT,eAAiBS,EAAO,gBAAqB,OAClD,KAAKG,yBAAwB,CACjC,CAAC,CACL,CAQQA,0BAAwB,CAC5B,IAAIC,GAEA,KAAKb,iBAAmBc,EAAeC,UAAY,KAAKf,iBAAmBc,EAAeE,UAAY,KAAKhB,iBAAmBc,EAAeG,SAC7IJ,EAAyB,KAAKvB,wCAAwC4B,gDAAgD,KAAKxB,WAAY,KAAKM,cAAc,GAE1J,KAAKA,iBAAmBc,EAAeK,YACvCN,EAAyB,KAAKvB,wCAAwC8B,4CAA4C,KAAK1B,WAAY,KAAKC,YAAa,GAErJ,KAAKK,iBAAmBc,EAAeO,OACvCR,EAAyB,KAAKvB,wCAAwCgC,sCAAsC,KAAK3B,YAAa,GAE7HkB,GAILA,EACKU,KACGC,EAAK1B,GAAYA,EAAQ2B,KAAK,CAACC,EAAGC,IAAOC,EAAMD,EAAE5C,SAAS,EAAE8C,QAAQD,EAAMF,EAAE3C,SAAS,CAAC,EAAI,EAAI,EAAG,CAAC,EAClG+C,EAAKC,GAAiB,CAClB,KAAKjC,QAAUiC,EACf,IAAMC,EAAa,KAAKlC,QAAQmC,UAAWC,GAAWA,EAAOxD,OAAS,KAAKkB,UAAU,EACjFoC,IAAe,KACf,KAAKvD,cAAgB,KAAKqB,QAAQkC,CAAU,EAC5C,KAAKjC,eAAiBiC,EAAa,KAAKlC,QAAQqC,OAAS,EAAI,KAAKrC,QAAQkC,EAAa,CAAC,EAAI,KAAKlC,QAAQ,KAAKA,QAAQqC,OAAS,CAAC,EAChI,KAAKjE,WAAa8D,IAAe,KAAKlC,QAAQqC,OAAS,EAE/D,CAAC,EACDC,EAAW,IACAC,EAAW,IAAM,IAAIC,MAAM,0BAA0B,CAAC,CAChE,CAAC,EAEL5B,UAAU,CACP6B,KAAMA,IAAM,KAAKC,cAAa,EAC9BC,MAAOA,IAAK,CACR,KAAK5C,mBAAqB,EAC9B,EACH,CACT,CAMQ2C,eAAa,CACjB,KAAKvC,sBAAwB,KAAKd,2BAC7BuD,wBAAwB,KAAKhD,WAAY,KAAKC,aAAc,KAAKI,eAAerB,KAAO,KAAKD,cAAcC,KAAO,KAAKsB,cAAc,EACpIU,UAAW3C,GAAU,CAClB,KAAK4E,gBAAgB5E,CAAO,CAChC,CAAC,CACT,CAOQ4E,gBAAgB5E,EAAwC,CAC5D,KAAKA,OAASA,EACd,KAAKA,OAAO6E,eAAiB,KAAK7C,eAAerB,KACjD,KAAKX,OAAO8E,gBAAkB,KAAKpE,cAAcC,KACjD,KAAKX,OAAO+E,6BAA+B,KAAKnD,aAChD,KAAK5B,OAAOgF,8BAAgC,KAAKpD,aACjD,KAAKqD,4BAA2B,CACpC,CAMQA,6BAA2B,CAC3B,KAAK9E,YACL,KAAKF,4BAA8B,IAAIiF,IACvC,KAAKC,yCAAwC,GAE7C,KAAKhD,+CAAiD,KAAKZ,wCACtD6D,uEACG,KAAKzD,WACL,KAAK3B,OAAO+E,6BACZ,KAAK/E,OAAO6E,eACZ,KAAK5C,cAAc,EAEtBU,UAAU,CACP6B,KAAOa,GAAyC,CAC5C,KAAKpF,4BAA8BoF,EACnC,KAAKF,yCAAwC,CACjD,EACAT,MAAOA,IAAK,CACR,KAAK5C,mBAAqB,EAC9B,EACH,CAEb,CAMQqD,0CAAwC,CAC5C,KAAK/C,gDAAkD,KAAKb,wCACvD6D,uEACG,KAAKzD,WACL,KAAK3B,OAAOgF,8BACZ,KAAKhF,OAAO8E,gBACZ,KAAK7C,cAAc,EAEtBU,UAAU,CACP6B,KAAOa,GAAyC,CAC5C,KAAKnF,6BAA+BmF,CACxC,EACAX,MAAOA,IAAK,CACR,KAAK5C,mBAAqB,EAC9B,EACH,CACT,4CAzKSX,EAA0B,2BAA1BA,EAA0BmE,UAAA,CAAA,CAAA,yBAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,cAAA,MAAA,EAAA,CAAA,EAAA,SAAA,6BAAA,4BAAA,4BAAA,mBAAA,mCAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCnBvCrF,EAAA,EAAAuF,EAAA,GAAA,EAAA,OAAA3E,EAAA0E,EAAAlF,cAAA,EAAA,EAAA,iBDiBcoF,EAAwBC,EAAiBC,CAAoB,EAAAC,cAAA,CAAA,CAAA,SAE9D9E,CAA0B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "report", "leftCommitFileContentByPath", "rightCommitFileContentByPath", "isTemplate", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "CommitDetailsViewComponent_Conditional_0_Conditional_37_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "currentCommit", "hash", "\u0275\u0275textInterpolate", "author", "authorEmail", "\u0275\u0275pipeBind3", "timestamp", "message", "\u0275\u0275conditional", "CommitDetailsViewComponent", "programmingExerciseService", "inject", "ProgrammingExerciseService", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "route", "ActivatedRoute", "exerciseId", "repositoryId", "commitHash", "errorWhileFetching", "commits", "previousCommit", "repositoryType", "repoFilesSubscription", "participationRepoFilesAtLeftCommitSubscription", "participationRepoFilesAtRightCommitSubscription", "paramSub", "participationSub", "ngOnDestroy", "unsubscribe", "ngOnInit", "params", "subscribe", "Number", "retrieveAndHandleCommits", "commitInfoSubscription", "RepositoryType", "TEMPLATE", "SOLUTION", "TESTS", "retrieveCommitHistoryForTemplateSolutionOrTests", "AUXILIARY", "retrieveCommitHistoryForAuxiliaryRepository", "USER", "retrieveCommitHistoryForParticipation", "pipe", "map", "sort", "a", "b", "dayjs", "isAfter", "tap", "sortedCommits", "foundIndex", "findIndex", "commit", "length", "catchError", "throwError", "Error", "next", "getDiffReport", "error", "getDiffReportForCommits", "handleNewReport", "leftCommitHash", "rightCommitHash", "participationIdForLeftCommit", "participationIdForRightCommit", "fetchParticipationRepoFiles", "Map", "fetchParticipationRepoFilesAtRightCommit", "getParticipationRepositoryFilesWithContentAtCommitForCommitDetailsView", "filesWithContent", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "CommitDetailsViewComponent_Conditional_0_Template", "GitDiffReportComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "encapsulation"]
}
