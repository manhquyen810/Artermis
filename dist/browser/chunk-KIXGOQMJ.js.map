{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/science/science.model.ts", "src/main/webapp/app/shared/science/science.service.ts", "src/main/webapp/app/shared/science/science.component.ts"],
  "sourcesContent": ["/**\r\n * Types of events that can be logged for scientific purposes.\r\n *\r\n * Important: Please follow the naming convention <category>__<detailed event name>\r\n */\r\nexport enum ScienceEventType {\r\n    LECTURE__OPEN = 'LECTURE__OPEN',\r\n    LECTURE__OPEN_UNIT = 'LECTURE__OPEN_UNIT',\r\n    EXERCISE__OPEN = 'EXERCISE__OPEN',\r\n}\r\n\r\nexport class ScienceEventDTO {\r\n    type?: ScienceEventType;\r\n    resourceId?: number;\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ScienceEventDTO, ScienceEventType } from 'app/shared/science/science.model';\r\nimport { ScienceSettingsService } from 'app/shared/user-settings/science-settings/science-settings.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { FeatureToggle, FeatureToggleService } from 'app/shared/feature-toggle/feature-toggle.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ScienceService {\r\n    private httpClient = inject(HttpClient);\r\n    private featureToggleService = inject(FeatureToggleService);\r\n    private scienceSettingsService = inject(ScienceSettingsService);\r\n    private accountService = inject(AccountService);\r\n\r\n    private resourceURL = 'api/atlas';\r\n\r\n    private featureToggleActive = false;\r\n\r\n    constructor() {\r\n        this.scienceSettingsService.getScienceSettingsUpdates();\r\n        this.accountService.getAuthenticationState().subscribe((user) => this.onUserIdentityChange(user));\r\n        this.featureToggleService.getFeatureToggleActive(FeatureToggle.Science).subscribe((active) => {\r\n            this.featureToggleActive = active;\r\n        });\r\n    }\r\n\r\n    private onUserIdentityChange(user: any): void {\r\n        if (user) {\r\n            this.scienceSettingsService.refreshScienceSettings();\r\n        }\r\n    }\r\n\r\n    eventLoggingActive() {\r\n        return this.featureToggleActive && this.scienceSettingsService.eventLoggingAllowed();\r\n    }\r\n\r\n    logEvent(type: ScienceEventType, resourceId?: number): void {\r\n        if (!this.eventLoggingActive()) {\r\n            return;\r\n        }\r\n        const event = new ScienceEventDTO();\r\n        event.type = type;\r\n        if (resourceId) {\r\n            event.resourceId = resourceId;\r\n        }\r\n        this.httpClient.put<void>(`${this.resourceURL}/science`, event, { observe: 'response' }).subscribe();\r\n    }\r\n}\r\n", "import { ScienceService } from 'app/shared/science/science.service';\r\nimport { ScienceEventType } from 'app/shared/science/science.model';\r\nimport { Directive, inject } from '@angular/core';\r\n\r\n@Directive()\r\nexport abstract class AbstractScienceComponent {\r\n    scienceService = inject(ScienceService);\r\n\r\n    protected constructor(\r\n        private type: ScienceEventType,\r\n        private resourceId?: number,\r\n    ) {}\r\n\r\n    protected setResourceId(resourceId: number) {\r\n        this.resourceId = resourceId;\r\n    }\r\n\r\n    protected logEvent() {\r\n        this.scienceService.logEvent(this.type, this.resourceId);\r\n    }\r\n}\r\n"],
  "mappings": "wOAKA,IAAYA,EAAZ,SAAYA,EAAgB,CACxBA,OAAAA,EAAA,cAAA,gBACAA,EAAA,mBAAA,qBACAA,EAAA,eAAA,iBAHQA,CAIZ,EAJYA,GAAgB,CAAA,CAAA,EAMfC,EAAP,KAAsB,CACxBC,KACAC,YCLJ,IAAaC,GAAc,IAAA,CAArB,MAAOA,CAAc,CACfC,WAAaC,EAAOC,CAAU,EAC9BC,qBAAuBF,EAAOG,CAAoB,EAClDC,uBAAyBJ,EAAOK,CAAsB,EACtDC,eAAiBN,EAAOO,CAAc,EAEtCC,YAAc,YAEdC,oBAAsB,GAE9BC,aAAA,CACI,KAAKN,uBAAuBO,0BAAyB,EACrD,KAAKL,eAAeM,uBAAsB,EAAGC,UAAWC,GAAS,KAAKC,qBAAqBD,CAAI,CAAC,EAChG,KAAKZ,qBAAqBc,uBAAuBC,EAAcC,OAAO,EAAEL,UAAWM,GAAU,CACzF,KAAKV,oBAAsBU,CAC/B,CAAC,CACL,CAEQJ,qBAAqBD,EAAS,CAC9BA,GACA,KAAKV,uBAAuBgB,uBAAsB,CAE1D,CAEAC,oBAAkB,CACd,OAAO,KAAKZ,qBAAuB,KAAKL,uBAAuBkB,oBAAmB,CACtF,CAEAC,SAASC,EAAwBC,EAAmB,CAChD,GAAI,CAAC,KAAKJ,mBAAkB,EACxB,OAEJ,IAAMK,EAAQ,IAAIC,EAClBD,EAAMF,KAAOA,EACTC,IACAC,EAAMD,WAAaA,GAEvB,KAAK1B,WAAW6B,IAAU,GAAG,KAAKpB,WAAW,WAAYkB,EAAO,CAAEG,QAAS,UAAU,CAAE,EAAEhB,UAAS,CACtG,4CAtCSf,EAAc,6BAAdA,EAAcgC,QAAdhC,EAAciC,UAAAC,WADD,MAAM,CAAA,SACnBlC,CAAc,GAAA,ECH3B,IAAsBmC,GAAwB,IAAA,CAAxC,MAAgBA,CAAwB,CAI9BC,KACAC,WAJZC,eAAiBC,EAAOC,CAAc,EAEtCC,YACYL,EACAC,EAAmB,CADnB,KAAAD,KAAAA,EACA,KAAAC,WAAAA,CACT,CAEOK,cAAcL,EAAkB,CACtC,KAAKA,WAAaA,CACtB,CAEUM,UAAQ,CACd,KAAKL,eAAeK,SAAS,KAAKP,KAAM,KAAKC,UAAU,CAC3D,4DAdkBF,CAAwB,CAAA,SAAxBA,CAAwB,GAAA",
  "names": ["ScienceEventType", "ScienceEventDTO", "type", "resourceId", "ScienceService", "httpClient", "inject", "HttpClient", "featureToggleService", "FeatureToggleService", "scienceSettingsService", "ScienceSettingsService", "accountService", "AccountService", "resourceURL", "featureToggleActive", "constructor", "getScienceSettingsUpdates", "getAuthenticationState", "subscribe", "user", "onUserIdentityChange", "getFeatureToggleActive", "FeatureToggle", "Science", "active", "refreshScienceSettings", "eventLoggingActive", "eventLoggingAllowed", "logEvent", "type", "resourceId", "event", "ScienceEventDTO", "put", "observe", "factory", "\u0275fac", "providedIn", "AbstractScienceComponent", "type", "resourceId", "scienceService", "inject", "ScienceService", "constructor", "setResourceId", "logEvent"]
}
