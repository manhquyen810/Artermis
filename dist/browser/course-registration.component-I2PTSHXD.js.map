{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-registration/course-registration.component.ts", "src/main/webapp/app/overview/course-registration/course-registration.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { faCheckCircle, faSort } from '@fortawesome/free-solid-svg-icons';\r\nimport { ASC, DESC, SORT } from 'app/shared/constants/pagination.constants';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { combineLatest } from 'rxjs';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { CoursePrerequisitesButtonComponent } from './course-prerequisites-button/course-prerequisites-button.component';\r\nimport { CourseRegistrationButtonComponent } from './course-registration-button/course-registration-button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-registration-selector',\r\n    templateUrl: './course-registration.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        FormsModule,\r\n        SortDirective,\r\n        SortByDirective,\r\n        FaIconComponent,\r\n        CoursePrerequisitesButtonComponent,\r\n        CourseRegistrationButtonComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class CourseRegistrationComponent implements OnInit {\r\n    private courseService = inject(CourseManagementService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private sortService = inject(SortService);\r\n\r\n    coursesToSelect: Course[] = [];\r\n    loading = false;\r\n    predicate!: string;\r\n    ascending!: boolean;\r\n    searchTermString = '';\r\n    filteredCoursesToSelect: Course[] = [];\r\n    // Icons\r\n    faCheckCircle = faCheckCircle;\r\n    faSort = faSort;\r\n\r\n    ngOnInit(): void {\r\n        this.handleNavigation();\r\n    }\r\n\r\n    /**\r\n     * Loads all courses that are available for self-registration by the logged-in user.\r\n     * It sorts the courses based on the current value of the predicate and ascending properties.\r\n     * It also initializes the filteredCoursesToSelect array with the sorted courses.\r\n     */\r\n    loadRegistrableCourses() {\r\n        this.loading = true;\r\n        this.courseService.findAllForRegistration().subscribe((res) => {\r\n            const courses = res.body!;\r\n            if (this.predicate === 'defaultSort' || !this.predicate) {\r\n                this.coursesToSelect = this.sortService.sortByProperty(courses, 'title', true);\r\n            } else {\r\n                this.coursesToSelect = this.sortService.sortByProperty(courses, this.predicate, this.ascending);\r\n            }\r\n            this.applySearch(); // Call this here to re-apply the search term after sorting\r\n            this.loading = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes a course from the list of courses that the user can register for\r\n     * after the user has registered for the course\r\n     * @param courseId the id of the course that the user has registered for\r\n     */\r\n    removeCourseFromList(courseId: number) {\r\n        this.coursesToSelect = this.coursesToSelect.filter((course) => course.id !== courseId);\r\n    }\r\n\r\n    /**\r\n     * Triggers a route transition, updating the URL with the current sorting parameters.\r\n     */\r\n    transition(): void {\r\n        this.router.navigate(['/courses/enroll'], {\r\n            relativeTo: this.activatedRoute.parent,\r\n            queryParams: {\r\n                sort: `${this.predicate},${this.ascending ? ASC : DESC}`,\r\n                search: this.searchTermString, // Add the search term to the query parameters\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles navigation-related changes. It listens to route data and query parameters.\r\n     * Based on the sort parameters in the URL, it updates the predicate and ascending properties\r\n     * and then loads the registrable courses accordingly.\r\n     */\r\n    private handleNavigation(): void {\r\n        combineLatest({\r\n            data: this.activatedRoute.data,\r\n            params: this.activatedRoute.queryParamMap,\r\n        }).subscribe(({ data, params }) => {\r\n            const sortParam = params.get(SORT) ?? data['defaultSort'] ?? 'title,asc';\r\n            if (sortParam && typeof sortParam === 'string') {\r\n                const sort = sortParam.split(',');\r\n                if (sort.length === 2) {\r\n                    this.predicate = sort[0];\r\n                    this.ascending = sort[1] === ASC;\r\n                }\r\n            } else {\r\n                this.predicate = 'title';\r\n                this.ascending = true;\r\n            }\r\n            this.searchTermString = params.get('search') || '';\r\n            this.loadRegistrableCourses();\r\n        });\r\n    }\r\n    /**\r\n     * Filters the list of registrable courses based on the user's search term.\r\n     * It updates the filteredCoursesToSelect array to only include courses\r\n     * that match the search term entered by the user.\r\n     */\r\n    applySearch() {\r\n        if (!this.searchTermString) {\r\n            this.filteredCoursesToSelect = [...this.coursesToSelect];\r\n        } else {\r\n            this.filteredCoursesToSelect = this.coursesToSelect.filter((course) =>\r\n                course.title ? course.title.toLowerCase().includes(this.searchTermString.toLowerCase()) : false,\r\n            );\r\n        }\r\n    }\r\n}\r\n", "<div>\r\n    <h3 jhiTranslate=\"artemisApp.studentDashboard.enroll.title\"></h3>\r\n    <div class=\"col-12 mb-3\">\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchTermString\" (input)=\"applySearch()\" [placeholder]=\"'artemisApp.course.searchForCourse' | artemisTranslate\" />\r\n    </div>\r\n    @if (coursesToSelect) {\r\n        <div class=\"col-12 col-sm-auto\">\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"transition()\">\r\n                        <th jhiSortBy=\"title\">\r\n                            <span jhiTranslate=\"artemisApp.studentDashboard.course\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"semester\">\r\n                            <span jhiTranslate=\"artemisApp.course.semester\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th>\r\n                            <span jhiTranslate=\"artemisApp.course.description\"></span>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (course of filteredCoursesToSelect; track course) {\r\n                        <tr>\r\n                            <td>\r\n                                <span>{{ course.title }}</span>\r\n                            </td>\r\n                            <td>\r\n                                <span>{{ course.semester }}</span>\r\n                            </td>\r\n                            <td>\r\n                                <span>{{ course.description }}</span>\r\n                            </td>\r\n                            <td class=\"text-end\">\r\n                                <jhi-course-prerequisites-button [course]=\"course\" />\r\n                            </td>\r\n                            <td class=\"text-end\">\r\n                                <jhi-course-registration-button [course]=\"course\" (onRegistration)=\"removeCourseFromList(course.id!)\" />\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    }\r\n    @if (!loading && !coursesToSelect) {\r\n        <div class=\"col-12 col-sm-auto\" jhiTranslate=\"artemisApp.studentDashboard.enroll.noCourse\"></div>\r\n    }\r\n    @if (loading && !coursesToSelect) {\r\n        <div class=\"col-12 col-sm-auto d-flex justify-content-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"artemisApp.studentDashboard.enroll.coursesLoading\"></span>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275listener", "course_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "removeCourseFromList", "id", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "title", "semester", "description", "\u0275\u0275property", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "ascending", "transition", "\u0275\u0275repeaterCreate", "CourseRegistrationComponent_Conditional_10_For_33_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275twoWayProperty", "faSort", "\u0275\u0275repeater", "filteredCoursesToSelect", "CourseRegistrationComponent", "courseService", "inject", "CourseManagementService", "activatedRoute", "ActivatedRoute", "router", "Router", "sortService", "SortService", "coursesToSelect", "loading", "searchTermString", "faCheckCircle", "ngOnInit", "handleNavigation", "loadRegistrableCourses", "findAllForRegistration", "subscribe", "res", "courses", "body", "sortByProperty", "applySearch", "courseId", "filter", "course", "navigate", "relativeTo", "parent", "queryParams", "sort", "ASC", "DESC", "search", "combineLatest", "data", "params", "queryParamMap", "sortParam", "get", "SORT", "split", "length", "toLowerCase", "includes", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CourseRegistrationComponent_Conditional_10_Template", "CourseRegistrationComponent_Conditional_11_Template", "CourseRegistrationComponent_Conditional_12_Template", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "SortDirective", "SortByDirective", "FaIconComponent", "CoursePrerequisitesButtonComponent", "CourseRegistrationButtonComponent", "ArtemisTranslatePipe", "encapsulation"]
}
