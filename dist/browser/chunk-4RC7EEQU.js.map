{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/notification/system-notification/system-notification.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { SystemNotification } from 'app/entities/system-notification.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\ntype EntityResponseType = HttpResponse<SystemNotification>;\r\ntype EntityArrayResponseType = HttpResponse<SystemNotification[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SystemNotificationService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/communication/system-notifications';\r\n    public publicResourceUrl = 'api/core/public/system-notifications';\r\n\r\n    /**\r\n     * Find a notification on the server using a GET request.\r\n     * @param systemNotificationId The id of the notification to get.\r\n     */\r\n    find(systemNotificationId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<SystemNotification>(`${this.resourceUrl}/${systemNotificationId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertSystemNotificationResponseDatesFromServer(res)));\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<SystemNotification[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertSystemNotificationArrayResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Fetch active and future notifications from the server.\r\n     */\r\n    getActiveNotifications(): Observable<SystemNotification[]> {\r\n        return this.http\r\n            .get<SystemNotification[]>(`${this.publicResourceUrl}/active`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertSystemNotificationArrayResponseDatesFromServer(res)))\r\n            .pipe(map((res) => res.body || []));\r\n    }\r\n\r\n    /**\r\n     * Convert notification dates from client format to ISO format.\r\n     * @param {SystemNotification} notification The notification to format.\r\n     * @return {SystemNotification} A copy of notification with formatted dates.\r\n     */\r\n    convertSystemNotificationDatesFromClient(notification: SystemNotification): SystemNotification {\r\n        return Object.assign({}, notification, {\r\n            notificationDate: convertDateFromClient(notification.notificationDate),\r\n            expireDate: convertDateFromClient(notification.expireDate),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert server response dates from server format to ISO format.\r\n     * @param {EntityResponseType} res The server response to format.\r\n     * @return {EntityResponseType} The server response with formatted dates.\r\n     */\r\n    convertSystemNotificationResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.notificationDate = convertDateFromServer(res.body.notificationDate);\r\n            res.body.expireDate = convertDateFromServer(res.body.expireDate);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Convert server response dates from server format to ISO format for an array of responses.\r\n     * @param {EntityResponseType} res The array of server responses to format.\r\n     * @return {EntityResponseType} The array of server responses with formatted dates.\r\n     */\r\n    convertSystemNotificationArrayResponseDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((notification: SystemNotification) => {\r\n                notification.notificationDate = convertDateFromServer(notification.notificationDate);\r\n                notification.expireDate = convertDateFromServer(notification.expireDate);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"],
  "mappings": "uLAYA,IAAaA,GAAyB,IAAA,CAAhC,MAAOA,CAAyB,CAC1BC,KAAOC,EAAOC,CAAU,EAEzBC,YAAc,yCACdC,kBAAoB,uCAM3BC,KAAKC,EAA4B,CAC7B,OAAO,KAAKN,KACPO,IAAwB,GAAG,KAAKJ,WAAW,IAAIG,CAAoB,GAAI,CAAEE,QAAS,UAAU,CAAE,EAC9FC,KAAKC,EAAKC,GAA4B,KAAKC,iDAAiDD,CAAG,CAAC,CAAC,CAC1G,CAEAE,MAAMC,EAAS,CACX,IAAMC,EAAUC,EAAoBF,CAAG,EACvC,OAAO,KAAKd,KACPO,IAA0B,KAAKJ,YAAa,CAAEc,OAAQF,EAASP,QAAS,UAAU,CAAE,EACpFC,KAAKC,EAAKC,GAAiC,KAAKO,sDAAsDP,CAAG,CAAC,CAAC,CACpH,CAKAQ,wBAAsB,CAClB,OAAO,KAAKnB,KACPO,IAA0B,GAAG,KAAKH,iBAAiB,UAAW,CAAEI,QAAS,UAAU,CAAE,EACrFC,KAAKC,EAAKC,GAAiC,KAAKO,sDAAsDP,CAAG,CAAC,CAAC,EAC3GF,KAAKC,EAAKC,GAAQA,EAAIS,MAAQ,CAAA,CAAE,CAAC,CAC1C,CAOAC,yCAAyCC,EAAgC,CACrE,OAAOC,OAAOC,OAAO,CAAA,EAAIF,EAAc,CACnCG,iBAAkBC,EAAsBJ,EAAaG,gBAAgB,EACrEE,WAAYD,EAAsBJ,EAAaK,UAAU,EAC5D,CACL,CAOAf,iDAAiDD,EAAuB,CACpE,OAAIA,EAAIS,OACJT,EAAIS,KAAKK,iBAAmBG,EAAsBjB,EAAIS,KAAKK,gBAAgB,EAC3Ed,EAAIS,KAAKO,WAAaC,EAAsBjB,EAAIS,KAAKO,UAAU,GAE5DhB,CACX,CAOAO,sDAAsDP,EAA4B,CAC9E,OAAIA,EAAIS,MACJT,EAAIS,KAAKS,QAASP,GAAoC,CAClDA,EAAaG,iBAAmBG,EAAsBN,EAAaG,gBAAgB,EACnFH,EAAaK,WAAaC,EAAsBN,EAAaK,UAAU,CAC3E,CAAC,EAEEhB,CACX,4CAvESZ,EAAyB,6BAAzBA,EAAyB+B,QAAzB/B,EAAyBgC,UAAAC,WADZ,MAAM,CAAA,SACnBjC,CAAyB,GAAA",
  "names": ["SystemNotificationService", "http", "inject", "HttpClient", "resourceUrl", "publicResourceUrl", "find", "systemNotificationId", "get", "observe", "pipe", "map", "res", "convertSystemNotificationResponseDatesFromServer", "query", "req", "options", "createRequestOption", "params", "convertSystemNotificationArrayResponseDatesFromServer", "getActiveNotifications", "body", "convertSystemNotificationDatesFromClient", "notification", "Object", "assign", "notificationDate", "convertDateFromClient", "expireDate", "convertDateFromServer", "forEach", "factory", "\u0275fac", "providedIn"]
}
