{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-tutorial-groups/course-tutorial-groups.component.ts", "src/main/webapp/app/overview/course-tutorial-groups/course-tutorial-groups.component.html"],
  "sourcesContent": ["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Subject, finalize } from 'rxjs';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { TutorialGroupsService } from 'app/course/tutorial-groups/services/tutorial-groups.service';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { TutorialGroupFreePeriod } from 'app/entities/tutorial-group/tutorial-group-free-day.model';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { TutorialGroupsConfiguration } from 'app/entities/tutorial-group/tutorial-groups-configuration.model';\r\nimport { AccordionGroups, CollapseState, SidebarCardElement, SidebarData, SidebarItemShowAlways, TutorialGroupCategory } from 'app/types/sidebar';\r\nimport { CourseOverviewService } from '../course-overview.service';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { NgClass } from '@angular/common';\r\nimport { SidebarComponent } from 'app/shared/sidebar/sidebar.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nconst TUTORIAL_UNIT_GROUPS: AccordionGroups = {\r\n    registered: { entityData: [] },\r\n    further: { entityData: [] },\r\n    all: { entityData: [] },\r\n};\r\n\r\nconst DEFAULT_COLLAPSE_STATE: CollapseState = {\r\n    registered: false,\r\n    all: true,\r\n    further: true,\r\n};\r\n\r\nconst DEFAULT_SHOW_ALWAYS: SidebarItemShowAlways = {\r\n    registered: false,\r\n    all: false,\r\n    further: false,\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-course-tutorial-groups',\r\n    templateUrl: './course-tutorial-groups.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [NgClass, SidebarComponent, RouterOutlet, TranslateDirective],\r\n})\r\nexport class CourseTutorialGroupsComponent implements OnInit, OnDestroy {\r\n    private router = inject(Router);\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private tutorialGroupService = inject(TutorialGroupsService);\r\n    private route = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private cdr = inject(ChangeDetectorRef);\r\n    private courseOverviewService = inject(CourseOverviewService);\r\n\r\n    ngUnsubscribe = new Subject<void>();\r\n\r\n    tutorialGroups: TutorialGroup[] = [];\r\n    courseId: number;\r\n    course?: Course;\r\n    configuration?: TutorialGroupsConfiguration;\r\n    isLoading = false;\r\n    tutorialGroupFreeDays: TutorialGroupFreePeriod[] = [];\r\n    isCollapsed = false;\r\n\r\n    tutorialGroupSelected = true;\r\n    sidebarData: SidebarData;\r\n    sortedTutorialGroups: TutorialGroup[] = [];\r\n    accordionTutorialGroupsGroups: AccordionGroups = TUTORIAL_UNIT_GROUPS;\r\n    readonly DEFAULT_COLLAPSE_STATE = DEFAULT_COLLAPSE_STATE;\r\n    protected readonly DEFAULT_SHOW_ALWAYS = DEFAULT_SHOW_ALWAYS;\r\n    sidebarTutorialGroups: SidebarCardElement[] = [];\r\n\r\n    get registeredTutorialGroups() {\r\n        if (this.course?.isAtLeastTutor) {\r\n            return this.tutorialGroups.filter((tutorialGroup) => tutorialGroup.isUserTutor);\r\n        } else {\r\n            return this.tutorialGroups.filter((tutorialGroup) => tutorialGroup.isUserRegistered);\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isCollapsed = this.courseOverviewService.getSidebarCollapseStateFromStorage('tutorialGroup');\r\n\r\n        this.route.parent?.paramMap\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe((parentParams) => {\r\n                this.courseId = Number(parentParams.get('courseId'));\r\n                if (this.courseId) {\r\n                    this.setCourse();\r\n                    this.setTutorialGroups();\r\n                    this.prepareSidebarData();\r\n                    this.subscribeToCourseUpdates();\r\n                }\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n\r\n    navigateToTutorialGroup() {\r\n        const upcomingTutorialGroup = this.courseOverviewService.getUpcomingTutorialGroup(this.tutorialGroups);\r\n        const lastSelectedTutorialGroup = this.getLastSelectedTutorialGroup();\r\n        const tutorialGroupId = this.route.firstChild?.snapshot.params.tutorialGroupId;\r\n        if (!tutorialGroupId && lastSelectedTutorialGroup) {\r\n            this.router.navigate([lastSelectedTutorialGroup], { relativeTo: this.route, replaceUrl: true });\r\n            this.tutorialGroupSelected = true;\r\n        } else if (!tutorialGroupId && upcomingTutorialGroup) {\r\n            this.router.navigate([upcomingTutorialGroup.id], { relativeTo: this.route, replaceUrl: true });\r\n            this.tutorialGroupSelected = true;\r\n        } else {\r\n            this.tutorialGroupSelected = tutorialGroupId ? true : false;\r\n        }\r\n    }\r\n\r\n    subscribeToCourseUpdates() {\r\n        this.courseStorageService\r\n            .subscribeToCourseUpdates(this.courseId)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe((course) => {\r\n                this.course = course;\r\n                this.configuration = course?.tutorialGroupsConfiguration;\r\n                this.setFreeDays();\r\n                this.setTutorialGroups();\r\n                this.prepareSidebarData();\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n\r\n    prepareSidebarData() {\r\n        if (!this.course?.tutorialGroups) {\r\n            return;\r\n        }\r\n        this.sidebarTutorialGroups = this.courseOverviewService.mapTutorialGroupsToSidebarCardElements(this.tutorialGroups);\r\n        this.accordionTutorialGroupsGroups = this.groupTutorialGroupsByRegistration();\r\n        this.updateSidebarData();\r\n    }\r\n\r\n    groupTutorialGroupsByRegistration(): AccordionGroups {\r\n        const groupedTutorialGroupGroups = cloneDeep(TUTORIAL_UNIT_GROUPS) as AccordionGroups;\r\n        let tutorialGroupCategory: TutorialGroupCategory;\r\n\r\n        const hasUserAtLeastOneTutorialGroup = this.tutorialGroups.some((tutorialGroup) => tutorialGroup.isUserRegistered || tutorialGroup.isUserTutor);\r\n        this.tutorialGroups.forEach((tutorialGroup) => {\r\n            const tutorialGroupCardItem = this.courseOverviewService.mapTutorialGroupToSidebarCardElement(tutorialGroup);\r\n            if (!hasUserAtLeastOneTutorialGroup) {\r\n                tutorialGroupCategory = 'all';\r\n            } else {\r\n                tutorialGroupCategory = tutorialGroup.isUserTutor || tutorialGroup.isUserRegistered ? 'registered' : 'further';\r\n            }\r\n            groupedTutorialGroupGroups[tutorialGroupCategory].entityData.push(tutorialGroupCardItem);\r\n        });\r\n        return groupedTutorialGroupGroups;\r\n    }\r\n\r\n    updateSidebarData() {\r\n        this.sidebarData = {\r\n            groupByCategory: true,\r\n            storageId: 'tutorialGroup',\r\n            groupedData: this.accordionTutorialGroupsGroups,\r\n            ungroupedData: this.sidebarTutorialGroups,\r\n        };\r\n    }\r\n\r\n    toggleSidebar() {\r\n        this.isCollapsed = !this.isCollapsed;\r\n        this.courseOverviewService.setSidebarCollapseState('tutorialGroup', this.isCollapsed);\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    getLastSelectedTutorialGroup(): string | null {\r\n        return sessionStorage.getItem('sidebar.lastSelectedItem.tutorialGroup.byCourse.' + this.courseId);\r\n    }\r\n\r\n    private setFreeDays() {\r\n        if (this.course?.tutorialGroupsConfiguration?.tutorialGroupFreePeriods) {\r\n            this.tutorialGroupFreeDays = this.course.tutorialGroupsConfiguration.tutorialGroupFreePeriods;\r\n        } else {\r\n            this.tutorialGroupFreeDays = [];\r\n        }\r\n    }\r\n\r\n    setTutorialGroups() {\r\n        const tutorialGroupsLoadedFromCache = this.loadTutorialGroupsFromCache();\r\n        if (!tutorialGroupsLoadedFromCache) {\r\n            this.loadTutorialGroupsFromServer();\r\n        }\r\n        this.navigateToTutorialGroup();\r\n    }\r\n\r\n    setCourse() {\r\n        const courseLoadedFromCache = this.loadCourseFromCache();\r\n        if (!courseLoadedFromCache) {\r\n            this.loadCourseFromServer();\r\n        }\r\n    }\r\n\r\n    loadCourseFromCache() {\r\n        const cachedCourse = this.courseStorageService.getCourse(this.courseId);\r\n        if (cachedCourse === undefined) {\r\n            return false;\r\n        } else {\r\n            this.course = cachedCourse;\r\n            this.configuration = this.course?.tutorialGroupsConfiguration;\r\n            this.setFreeDays();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    loadTutorialGroupsFromCache(): boolean {\r\n        const cachedTutorialGroups = this.courseStorageService.getCourse(this.courseId)?.tutorialGroups;\r\n        if (cachedTutorialGroups === undefined) {\r\n            return false;\r\n        } else {\r\n            this.tutorialGroups = cachedTutorialGroups;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    updateCachedTutorialGroups() {\r\n        const course = this.courseStorageService.getCourse(this.courseId);\r\n        if (course) {\r\n            course.tutorialGroups = this.tutorialGroups;\r\n            this.courseStorageService.updateCourse(course);\r\n        }\r\n    }\r\n\r\n    loadTutorialGroupsFromServer() {\r\n        this.isLoading = true;\r\n        this.tutorialGroupService\r\n            .getAllForCourse(this.courseId)\r\n            .pipe(\r\n                map((res: HttpResponse<TutorialGroup[]>) => res.body),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (tutorialGroups: TutorialGroup[]) => {\r\n                    this.tutorialGroups = tutorialGroups ?? [];\r\n                    this.updateCachedTutorialGroups();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n\r\n    loadCourseFromServer() {\r\n        this.isLoading = true;\r\n        this.courseManagementService\r\n            .find(this.courseId)\r\n            .pipe(\r\n                map((res: HttpResponse<Course>) => res.body),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (course: Course) => {\r\n                    this.course = course;\r\n                    this.configuration = this.course?.tutorialGroupsConfiguration;\r\n                    this.setFreeDays();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n\r\n    onSubRouteDeactivate() {\r\n        if (this.route.firstChild) {\r\n            return;\r\n        }\r\n        this.navigateToTutorialGroup();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between\">\r\n    @if (course) {\r\n        <div [ngClass]=\"{ 'sidebar-collapsed': isCollapsed }\">\r\n            <jhi-sidebar\r\n                [itemSelected]=\"tutorialGroupSelected\"\r\n                [courseId]=\"courseId\"\r\n                [sidebarData]=\"sidebarData\"\r\n                [collapseState]=\"DEFAULT_COLLAPSE_STATE\"\r\n                [sidebarItemAlwaysShow]=\"DEFAULT_SHOW_ALWAYS\"\r\n            />\r\n        </div>\r\n\r\n        @if (tutorialGroupSelected) {\r\n            <div class=\"vw-100 module-bg rounded-3\">\r\n                <router-outlet (deactivate)=\"onSubRouteDeactivate()\" />\r\n            </div>\r\n        } @else {\r\n            <div class=\"vw-100 module-bg rounded-3 p-3 d-flex justify-content-between\">\r\n                <div class=\"col-12 text-center my-auto\" jhiTranslate=\"artemisApp.courseOverview.tutorialGroups.selectTutorialGroup\"></div>\r\n            </div>\r\n        }\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSubRouteDeactivate", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275template", "CourseTutorialGroupsComponent_Conditional_2_Conditional_6_Template", "CourseTutorialGroupsComponent_Conditional_2_Conditional_7_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "isCollapsed", "tutorialGroupSelected", "courseId", "sidebarData", "DEFAULT_COLLAPSE_STATE", "DEFAULT_SHOW_ALWAYS", "\u0275\u0275conditional", "TUTORIAL_UNIT_GROUPS", "registered", "entityData", "further", "all", "CourseTutorialGroupsComponent", "router", "inject", "Router", "courseStorageService", "CourseStorageService", "courseManagementService", "CourseManagementService", "tutorialGroupService", "TutorialGroupsService", "route", "ActivatedRoute", "alertService", "AlertService", "cdr", "ChangeDetectorRef", "courseOverviewService", "CourseOverviewService", "ngUnsubscribe", "Subject", "tutorialGroups", "course", "configuration", "isLoading", "tutorialGroupFreeDays", "sortedTutorialGroups", "accordionTutorialGroupsGroups", "sidebarTutorialGroups", "registeredTutorialGroups", "isAtLeastTutor", "filter", "tutorialGroup", "isUserTutor", "isUserRegistered", "ngOnInit", "getSidebarCollapseStateFromStorage", "parent", "paramMap", "pipe", "takeUntil", "subscribe", "parentParams", "Number", "get", "setCourse", "setTutorialGroups", "prepareSidebarData", "subscribeToCourseUpdates", "add", "detectChanges", "navigateToTutorialGroup", "upcomingTutorialGroup", "getUpcomingTutorialGroup", "lastSelectedTutorialGroup", "getLastSelectedTutorialGroup", "tutorialGroupId", "firstChild", "snapshot", "params", "navigate", "relativeTo", "replaceUrl", "id", "tutorialGroupsConfiguration", "setFreeDays", "mapTutorialGroupsToSidebarCardElements", "groupTutorialGroupsByRegistration", "updateSidebarData", "groupedTutorialGroupGroups", "cloneDeep", "tutorialGroupCategory", "hasUserAtLeastOneTutorialGroup", "some", "forEach", "tutorialGroupCardItem", "mapTutorialGroupToSidebarCardElement", "push", "groupByCategory", "storageId", "groupedData", "ungroupedData", "toggleSidebar", "setSidebarCollapseState", "sessionStorage", "getItem", "tutorialGroupFreePeriods", "loadTutorialGroupsFromCache", "loadTutorialGroupsFromServer", "loadCourseFromCache", "loadCourseFromServer", "cachedCourse", "getCourse", "undefined", "cachedTutorialGroups", "updateCachedTutorialGroups", "updateCourse", "getAllForCourse", "map", "res", "body", "finalize", "next", "error", "errorResponse", "onError", "find", "ngOnDestroy", "complete", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "CourseTutorialGroupsComponent_Conditional_2_Template", "NgClass", "SidebarComponent", "RouterOutlet", "TranslateDirective", "encapsulation", "changeDetection"]
}
