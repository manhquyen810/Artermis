{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/quiz/quiz-pool.model.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-pool.service.ts", "src/main/webapp/app/entities/quiz/quiz-group.model.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-pool-mapping-question-list.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-pool-mapping-question-list.component.html", "src/main/webapp/app/exercises/quiz/manage/quiz-pool-mapping.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-pool-mapping.component.html", "src/main/webapp/app/exercises/quiz/manage/quiz-pool.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-pool.component.html"],
  "sourcesContent": ["import { QuizGroup } from 'app/entities/quiz/quiz-group.model';\r\nimport { QuizQuestion } from 'app/entities/quiz/quiz-question.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\n\r\nexport class QuizPool implements BaseEntity {\r\n    id?: number;\r\n    exam: Exam;\r\n    quizGroups: QuizGroup[] = [];\r\n    quizQuestions: QuizQuestion[] = [];\r\n    maxPoints = 0;\r\n    randomizeQuestionOrder = false;\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { QuizPool } from 'app/entities/quiz/quiz-pool.model';\r\n\r\nexport type EntityResponseType = HttpResponse<QuizExercise>;\r\nexport type EntityArrayResponseType = HttpResponse<QuizExercise[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuizPoolService {\r\n    private http = inject(HttpClient);\r\n\r\n    /**\r\n     * Update the given quiz pool that belongs to the given course id and exam id\r\n     *\r\n     * @param courseId the course id of which the exam belongs to\r\n     * @param examId the exam id of which the quiz pool belongs to\r\n     * @param quizPool the quiz pool to be updated\r\n     * @param req request options\r\n     * @return the updated quiz pool\r\n     */\r\n    update(courseId: number, examId: number, quizPool: QuizPool, req?: any): Observable<HttpResponse<QuizPool>> {\r\n        const options = createRequestOption(req);\r\n        return this.http.put<QuizPool>(`api/quiz/courses/${courseId}/exams/${examId}/quiz-pools`, quizPool, { params: options, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find the quiz pool that belongs to the given course id and exam id\r\n     *\r\n     * @param courseId the course id of which the exam belongs to\r\n     * @param examId the exam id of which the quiz pool belongs to\r\n     * @return the quiz pool that belongs to the given course id and exam id\r\n     */\r\n    find(courseId: number, examId: number): Observable<HttpResponse<QuizPool>> {\r\n        return this.http.get<QuizPool>(`api/quiz/courses/${courseId}/exams/${examId}/quiz-pools`, { observe: 'response' });\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\n\r\nexport class QuizGroup implements BaseEntity {\r\n    id?: number;\r\n    name: string;\r\n}\r\n", "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { QuizQuestion } from 'app/entities/quiz/quiz-question.model';\r\nimport { QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-pool-mapping-question-list',\r\n    templateUrl: './quiz-pool-mapping-question-list.component.html',\r\n    styleUrls: ['./quiz-pool-mapping-question-list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [CdkDropList, CdkDrag],\r\n})\r\nexport class QuizPoolMappingQuestionListComponent {\r\n    @Input() quizQuestions: Array<QuizQuestion>;\r\n    @Input() disabled = false;\r\n\r\n    @Output() onQuizQuestionDropped: EventEmitter<QuizQuestion> = new EventEmitter<QuizQuestion>();\r\n\r\n    MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n\r\n    /**\r\n     * If the quiz question is dropped to the same group, move the index. Otherwise, move the quiz question to the new group.\r\n     * Then emit onQuizQuestionDropped of the newly dropped QuizQuestion.\r\n     *\r\n     * @param event the onDropListDropped event\r\n     */\r\n    handleOnDropQuestion(event: CdkDragDrop<QuizQuestion[]>) {\r\n        if (event.previousContainer === event.container) {\r\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n        } else {\r\n            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\r\n        }\r\n        const quizQuestion = event.container.data[event.currentIndex];\r\n        this.onQuizQuestionDropped.emit(quizQuestion);\r\n    }\r\n}\r\n", "<div\r\n    class=\"question-list d-flex flex-row flex-wrap\"\r\n    cdkDropList\r\n    cdkDropListOrientation=\"horizontal\"\r\n    [cdkDropListData]=\"quizQuestions\"\r\n    (cdkDropListDropped)=\"handleOnDropQuestion($event)\"\r\n>\r\n    @for (question of quizQuestions; track question) {\r\n        <div class=\"text-center mx-1 my-1\" cdkDrag [cdkDragDisabled]=\"disabled\">\r\n            @switch (question.type) {\r\n                @case (MULTIPLE_CHOICE) {\r\n                    <div class=\"d-flex flex-wrap\">\r\n                        <div class=\"question px-2 my-0 border-info\">\r\n                            {{ question.title }}\r\n                        </div>\r\n                        <div class=\"question-type bg-info text-white\">MC</div>\r\n                        <div class=\"question-points border-info\">{{ question.points }}</div>\r\n                    </div>\r\n                }\r\n                @case (DRAG_AND_DROP) {\r\n                    <div class=\"d-flex flex-wrap\">\r\n                        <div class=\"question px-2 my-0 border-warning\">\r\n                            {{ question.title }}\r\n                        </div>\r\n                        <div class=\"question-type bg-warning text-white\">DnD</div>\r\n                        <div class=\"question-points border-warning\">{{ question.points }}</div>\r\n                    </div>\r\n                }\r\n                @case (SHORT_ANSWER) {\r\n                    <div class=\"d-flex flex-wrap\">\r\n                        <div class=\"question px-2 my-0 border-success\">\r\n                            {{ question.title }}\r\n                        </div>\r\n                        <div class=\"question-type bg-success text-white\">SA</div>\r\n                        <div class=\"question-points border-success\">{{ question.points }}</div>\r\n                    </div>\r\n                }\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, inject } from '@angular/core';\r\nimport { faExclamationCircle, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { QuizGroup } from 'app/entities/quiz/quiz-group.model';\r\nimport { Subject } from 'rxjs';\r\nimport { QuizQuestion } from 'app/entities/quiz/quiz-question.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CdkDropListGroup } from '@angular/cdk/drag-drop';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { QuizPoolMappingQuestionListComponent } from './quiz-pool-mapping-question-list.component';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { NgStyle } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-pool-mapping',\r\n    templateUrl: './quiz-pool-mapping.component.html',\r\n    styleUrls: ['./quiz-pool-mapping.component.scss'],\r\n    imports: [CdkDropListGroup, FaIconComponent, TranslateDirective, QuizPoolMappingQuestionListComponent, DeleteButtonDirective, NgStyle],\r\n})\r\nexport class QuizPoolMappingComponent implements OnInit, OnChanges, OnDestroy {\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() quizGroups: QuizGroup[] = [];\r\n    @Input() quizQuestions: QuizQuestion[] = [];\r\n    @Input() disabled = false;\r\n\r\n    @Output() onQuizGroupUpdated = new EventEmitter();\r\n    @Output() onQuizQuestionDropped = new EventEmitter();\r\n\r\n    quizGroupNameQuestionsMap: Map<string, Array<QuizQuestion>> = new Map();\r\n    unmappedQuizQuestions: QuizQuestion[] = [];\r\n\r\n    faPlus = faPlus;\r\n    faTimes = faTimes;\r\n    faExclamationCircle = faExclamationCircle;\r\n\r\n    protected dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    ngOnInit(): void {\r\n        this.handleUpdate();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.handleUpdate();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Set the given quizGroup to the given quizQuestion and emit onQuizQuestionDropped.\r\n     *\r\n     * @param quizQuestion the quiz question that is dropped\r\n     * @param quizGroup the quiz question to which the quiz question is dropped\r\n     */\r\n    handleOnQuizQuestionDropped(quizQuestion: QuizQuestion, quizGroup?: QuizGroup) {\r\n        quizQuestion.quizGroup = quizGroup;\r\n        this.onQuizQuestionDropped.emit();\r\n    }\r\n\r\n    /**\r\n     * If QuizGroup with the same name does not exist, create a new QuizGroup object and push to the quizGroups list.\r\n     * Additionally, initialize the quizGroupNameQuestionsMap of the name of the new QuizGroup\r\n     *\r\n     * @param name the name of the new quiz group\r\n     */\r\n    addGroup(name: string) {\r\n        if (name.length == 0) {\r\n            this.alertService.error('artemisApp.quizPool.invalidReasons.groupNameEmpty');\r\n        } else if (name.length > 100) {\r\n            this.alertService.error('artemisApp.quizPool.invalidReasons.groupNameLength');\r\n        } else if (this.quizGroupNameQuestionsMap.has(name)) {\r\n            this.alertService.error('artemisApp.quizPool.invalidReasons.groupSameName');\r\n        } else {\r\n            const quizGroup = new QuizGroup();\r\n            quizGroup.name = name;\r\n            this.quizGroups.push(quizGroup);\r\n            this.quizGroupNameQuestionsMap.set(quizGroup.name, new Array<QuizQuestion>());\r\n            this.onQuizGroupUpdated.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move all quiz questions of the to be deleted quiz group to unmappedQuizQuestions, then remove the quiz group from the quizGroups list and from quizGroupNameQuestionsMap.\r\n     *\r\n     * @param index the index of the quiz group that is going to be deleted\r\n     */\r\n    deleteGroup(index: number) {\r\n        const quizGroup = this.quizGroups[index];\r\n        for (const quizQuestion of this.quizGroupNameQuestionsMap.get(quizGroup.name)!) {\r\n            this.addQuestion(quizQuestion);\r\n            quizQuestion.quizGroup = undefined;\r\n        }\r\n        this.quizGroups.splice(index, 1);\r\n        this.quizGroupNameQuestionsMap.delete(quizGroup.name);\r\n        this.dialogErrorSource.next('');\r\n        this.onQuizGroupUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Add given quizQuestion to the unmappedQuizQuestions list.\r\n     *\r\n     * @param quizQuestion the quizQuestion to be added\r\n     */\r\n    addQuestion(quizQuestion: QuizQuestion) {\r\n        this.unmappedQuizQuestions.push(quizQuestion);\r\n    }\r\n\r\n    /**\r\n     * If the to be deleted QuizQuestion has a group, update the list of QuizQuestion that belongs to the group.\r\n     * Otherwise, update the unmappedQuizQuestions list.\r\n     *\r\n     * @param quizQuestionToBeDeleted\r\n     */\r\n    deleteQuestion(quizQuestionToBeDeleted: QuizQuestion) {\r\n        const groupName = quizQuestionToBeDeleted.quizGroup?.name;\r\n        if (groupName) {\r\n            const quizQuestions = this.quizGroupNameQuestionsMap.get(groupName);\r\n            const updatedQuizQuestions = quizQuestions!.filter((quizQuestion) => quizQuestion !== quizQuestionToBeDeleted);\r\n            this.quizGroupNameQuestionsMap.set(groupName, updatedQuizQuestions);\r\n        } else {\r\n            this.unmappedQuizQuestions! = this.unmappedQuizQuestions!.filter((quizQuestion) => quizQuestion !== quizQuestionToBeDeleted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find list of name of the groups that do not have any questions mapped to it.\r\n     *\r\n     * @returns the list of group name\r\n     */\r\n    getGroupNamesWithNoQuestion(): Array<string> {\r\n        const results = new Array<string>();\r\n        for (const [name, quizQuestions] of this.quizGroupNameQuestionsMap) {\r\n            if (quizQuestions.length == 0) {\r\n                results.push(name);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Check if there is a group with no questions mapped to it.\r\n     *\r\n     * @return true if such group exists or false otherwise\r\n     */\r\n    hasGroupsWithNoQuestion(): boolean {\r\n        return this.getGroupNamesWithNoQuestion().length > 0;\r\n    }\r\n\r\n    /**\r\n     * Find list of name of the groups that have questions with different points.\r\n     *\r\n     * @returns the list of group name\r\n     */\r\n    getGroupNamesWithDifferentQuestionPoints(): Array<string> {\r\n        const results = new Array<string>();\r\n        for (const [name, quizQuestions] of this.quizGroupNameQuestionsMap) {\r\n            if (!quizQuestions.every((quizQuestion) => quizQuestion.points === quizQuestions[0].points)) {\r\n                results.push(name);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Check if there is a group with questions that have different points mapped to it.\r\n     *\r\n     * @return true if such group exists or false otherwise\r\n     */\r\n    hasGroupsWithDifferentQuestionPoints() {\r\n        return this.getGroupNamesWithDifferentQuestionPoints().length > 0;\r\n    }\r\n\r\n    /**\r\n     * Calculate the maximum points of quiz questions by summing the points of first question from each group and the points of questions from unmappedQuizQuestions.\r\n     *\r\n     * @return the maximum point\r\n     */\r\n    getMaxPoints(): number {\r\n        let maxPoints = 0;\r\n        for (const quizQuestions of this.quizGroupNameQuestionsMap.values()) {\r\n            if (quizQuestions.length > 0) {\r\n                maxPoints += quizQuestions[0].points ?? 0;\r\n            }\r\n        }\r\n        maxPoints += this.unmappedQuizQuestions.reduce((sum: number, quizQuestion: QuizQuestion) => sum + (quizQuestion.points ?? 0), 0);\r\n        return maxPoints;\r\n    }\r\n\r\n    /**\r\n     * Set the quizGroupNameQuestionsMap of each quiz group according to the current quizQuestions.\r\n     */\r\n    handleUpdate() {\r\n        this.quizGroupNameQuestionsMap = new Map<string, Array<QuizQuestion>>();\r\n        for (const quizGroup of this.quizGroups) {\r\n            this.quizGroupNameQuestionsMap.set(quizGroup.name, []);\r\n        }\r\n        this.unmappedQuizQuestions = [];\r\n        for (const quizQuestion of this.quizQuestions) {\r\n            if (quizQuestion.quizGroup) {\r\n                this.quizGroupNameQuestionsMap.get(quizQuestion.quizGroup.name)!.push(quizQuestion);\r\n            } else {\r\n                this.unmappedQuizQuestions.push(quizQuestion);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "<div cdkDropListGroup>\r\n    <div class=\"form-group row\">\r\n        <div class=\"mb-2\">\r\n            <fa-icon [icon]=\"faExclamationCircle\" />\r\n            <span jhiTranslate=\"artemisApp.quizPool.groupExplanation\"></span>\r\n        </div>\r\n        @if (!disabled) {\r\n            <div class=\"col-12 col-lg-10\">\r\n                <label for=\"groupName\" jhiTranslate=\"artemisApp.quizPool.groupName\"></label>\r\n                <input required #groupName id=\"groupName\" name=\"groupName\" class=\"form-control\" />\r\n            </div>\r\n            <div class=\"col-12 col-lg-2 d-flex align-items-end mt-2 mt-lg-0\">\r\n                <a class=\"btn btn-primary text-truncate w-100\" (click)=\"addGroup(groupName.value); groupName.value = ''\">\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                    <span jhiTranslate=\"artemisApp.quizPool.addGroup\"></span>\r\n                </a>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (quizGroups.length > 0) {\r\n        <div class=\"table-wrapper table-responsive\">\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <span jhiTranslate=\"artemisApp.quizPool.group\"></span>\r\n                        </th>\r\n                        <th class=\"w-75\">\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.questions\"></span>\r\n                        </th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (quizGroup of quizGroups; track quizGroup; let i = $index) {\r\n                        <tr>\r\n                            <td>{{ quizGroup.name }}</td>\r\n                            <td>\r\n                                <jhi-quiz-pool-mapping-question-list\r\n                                    [disabled]=\"disabled\"\r\n                                    [quizQuestions]=\"quizGroupNameQuestionsMap.get(quizGroup.name)!\"\r\n                                    (onQuizQuestionDropped)=\"handleOnQuizQuestionDropped($event, quizGroup)\"\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                @if (!disabled) {\r\n                                    <button\r\n                                        jhiDeleteButton\r\n                                        [entityTitle]=\"quizGroup.name\"\r\n                                        deleteQuestion=\"artemisApp.quizPool.delete.question\"\r\n                                        (delete)=\"deleteGroup(i)\"\r\n                                        [dialogError]=\"dialogError$\"\r\n                                        class=\"delete-group mb-0\"\r\n                                    >\r\n                                        <fa-icon [icon]=\"faTimes\" />\r\n                                    </button>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    }\r\n    <div class=\"mt-3 mb-5\" [ngStyle]=\"{ display: quizQuestions.length > 0 ? 'block' : 'none' }\">\r\n        @if (!disabled) {\r\n            <div>\r\n                <fa-icon [icon]=\"faExclamationCircle\" />\r\n                <span jhiTranslate=\"artemisApp.quizPool.dragExplanation\"></span>\r\n            </div>\r\n        }\r\n        <div class=\"question-list-container px-3 py-3\">\r\n            <jhi-quiz-pool-mapping-question-list [disabled]=\"disabled\" [quizQuestions]=\"unmappedQuizQuestions\" (onQuizQuestionDropped)=\"handleOnQuizQuestionDropped($event)\" />\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { QuizPool } from 'app/entities/quiz/quiz-pool.model';\r\nimport { QuizPoolService } from 'app/exercises/quiz/manage/quiz-pool.service';\r\nimport { QuizPoolMappingComponent } from 'app/exercises/quiz/manage/quiz-pool-mapping.component';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { DragAndDropQuestionUtil } from 'app/exercises/quiz/shared/drag-and-drop-question-util.service';\r\nimport { ShortAnswerQuestionUtil } from 'app/exercises/quiz/shared/short-answer-question-util.service';\r\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ValidationReason } from 'app/entities/exercise.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { QuizQuestionListEditComponent } from 'app/exercises/quiz/manage/quiz-question-list-edit.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { computeQuizQuestionInvalidReason, isQuizQuestionValid } from 'app/exercises/quiz/shared/quiz-manage-util.service';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { JsonPipe } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-pool',\r\n    templateUrl: './quiz-pool.component.html',\r\n    providers: [DragAndDropQuestionUtil, ShortAnswerQuestionUtil],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styleUrls: ['./quiz-pool.component.scss', '../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [TranslateDirective, QuizPoolMappingComponent, FormsModule, QuizQuestionListEditComponent, NgbTooltip, FaIconComponent, JsonPipe],\r\n})\r\nexport class QuizPoolComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private quizPoolService = inject(QuizPoolService);\r\n    private examService = inject(ExamManagementService);\r\n    private changeDetectorRef = inject(ChangeDetectorRef);\r\n    private dragAndDropQuestionUtil = inject(DragAndDropQuestionUtil);\r\n    private shortAnswerQuestionUtil = inject(ShortAnswerQuestionUtil);\r\n    private alertService = inject(AlertService);\r\n\r\n    @ViewChild('quizPoolQuestionMapping')\r\n    quizPoolMappingComponent: QuizPoolMappingComponent;\r\n    @ViewChild('quizQuestionsEdit')\r\n    quizQuestionsEditComponent: QuizQuestionListEditComponent;\r\n\r\n    faExclamationCircle = faExclamationCircle;\r\n\r\n    quizPool: QuizPool;\r\n    savedQuizPool: string;\r\n    isSaving: boolean;\r\n    isValid: boolean;\r\n    hasPendingChanges: boolean;\r\n    invalidReasons: ValidationReason[] = [];\r\n    warningReasons: ValidationReason[] = [];\r\n\r\n    courseId: number;\r\n    examId: number;\r\n    isExamStarted: boolean;\r\n\r\n    ngOnInit(): void {\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        this.checkIfExamStarted();\r\n        this.initializeQuizPool();\r\n    }\r\n\r\n    /**\r\n     * Add question to the quiz pool mapping component\r\n     *\r\n     * @param quizQuestion the quiz question to be added\r\n     */\r\n    handleQuestionAdded(quizQuestion: QuizQuestion) {\r\n        this.quizPoolMappingComponent.addQuestion(quizQuestion);\r\n        this.handleUpdate();\r\n    }\r\n\r\n    /**\r\n     * Delete question from the quiz pool mapping component\r\n     *\r\n     * @param quizQuestion the quiz question to be deleted\r\n     */\r\n    handleQuestionDeleted(quizQuestion: QuizQuestion) {\r\n        this.quizPoolMappingComponent.deleteQuestion(quizQuestion);\r\n        this.handleUpdate();\r\n    }\r\n\r\n    /**\r\n     * Save the quiz pool if there is pending changes and the configuration is valid\r\n     */\r\n    save() {\r\n        if (!this.hasPendingChanges || !this.isValid) {\r\n            return;\r\n        }\r\n\r\n        this.isSaving = true;\r\n        this.quizQuestionsEditComponent.parseAllQuestions();\r\n        const requestOptions = {} as any;\r\n        this.quizPool.maxPoints = this.quizPoolMappingComponent.getMaxPoints();\r\n        this.quizPoolService.update(this.courseId, this.examId, this.quizPool, requestOptions).subscribe({\r\n            next: (quizPoolResponse: HttpResponse<QuizPool>) => {\r\n                if (quizPoolResponse.body) {\r\n                    this.onSaveSuccess(quizPoolResponse.body);\r\n                } else {\r\n                    this.onSaveError();\r\n                }\r\n            },\r\n            error: () => this.onSaveError(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set isExamStarted to true if exam has been started or false otherwise\r\n     */\r\n    private checkIfExamStarted() {\r\n        this.examService.find(this.courseId, this.examId).subscribe({\r\n            next: (response: HttpResponse<Exam>) => {\r\n                const exam = response.body!;\r\n                this.isExamStarted = exam.startDate ? exam.startDate.isBefore(dayjs()) : false;\r\n                this.changeDetectorRef.detectChanges();\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                onError(this.alertService, error);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set quizPool if already exists or create a new object otherwise\r\n     */\r\n    private initializeQuizPool() {\r\n        this.quizPoolService.find(this.courseId, this.examId).subscribe({\r\n            next: (response: HttpResponse<QuizPool>) => {\r\n                const quizPool = response.body;\r\n                if (!quizPool) {\r\n                    this.quizPool = new QuizPool();\r\n                    this.quizPool.quizGroups = [];\r\n                    this.quizPool.quizQuestions = [];\r\n                    this.hasPendingChanges = false;\r\n                    this.isValid = true;\r\n                    this.changeDetectorRef.detectChanges();\r\n                } else {\r\n                    this.quizPool = quizPool;\r\n                    this.savedQuizPool = JSON.stringify(this.quizPool);\r\n                    this.isValid = true;\r\n                    this.computeReasons();\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                onError(this.alertService, error);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set pending changes to true if there is a change from the last saved quiz pool and set is valid to true if the configuration is valid\r\n     */\r\n    handleUpdate() {\r\n        this.hasPendingChanges = JSON.stringify(this.quizPool) !== this.savedQuizPool;\r\n        this.isValid = this.isConfigurationValid();\r\n        this.computeReasons();\r\n    }\r\n\r\n    /**\r\n     * Set invalidReasons and warningReasons\r\n     */\r\n    private computeReasons() {\r\n        this.changeDetectorRef.detectChanges();\r\n        this.invalidReasons = this.getInvalidReasons();\r\n        this.warningReasons = this.getWarningReasons();\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Check if the quiz questions and groups are all valid.\r\n     * @return true if the configuration is valid or false otherwise\r\n     */\r\n    private isConfigurationValid(): boolean {\r\n        const quizQuestionsValid = this.quizPool.quizQuestions.every((question) => isQuizQuestionValid(question, this.dragAndDropQuestionUtil, this.shortAnswerQuestionUtil));\r\n        const totalPoints = this.quizPool.quizQuestions?.map((quizQuestion) => quizQuestion.points ?? 0).reduce((accumulator, points) => accumulator + points, 0);\r\n        return (\r\n            (this.quizPool.quizQuestions.length === 0 || (quizQuestionsValid && totalPoints > 0)) &&\r\n            !this.quizPoolMappingComponent.hasGroupsWithNoQuestion() &&\r\n            !this.quizPoolMappingComponent.hasGroupsWithDifferentQuestionPoints()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Compute invalid reasons of the configurations\r\n     * @return an array of ValidationReason.\r\n     */\r\n    private getInvalidReasons(): Array<ValidationReason> {\r\n        const invalidReasons = new Array<ValidationReason>();\r\n        this.quizPool.quizQuestions!.forEach((question: QuizQuestion, index: number) => {\r\n            computeQuizQuestionInvalidReason(invalidReasons, question, index, this.dragAndDropQuestionUtil, this.shortAnswerQuestionUtil);\r\n        });\r\n\r\n        if (this.quizPoolMappingComponent.hasGroupsWithNoQuestion()) {\r\n            const names = this.quizPoolMappingComponent.getGroupNamesWithNoQuestion();\r\n            for (const name of names) {\r\n                invalidReasons.push({\r\n                    translateKey: 'artemisApp.quizPool.invalidReasons.groupNoQuestion',\r\n                    translateValues: {\r\n                        name,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.quizPoolMappingComponent.hasGroupsWithDifferentQuestionPoints()) {\r\n            const names = this.quizPoolMappingComponent.getGroupNamesWithDifferentQuestionPoints();\r\n            for (const name of names) {\r\n                invalidReasons.push({\r\n                    translateKey: 'artemisApp.quizPool.invalidReasons.groupHasDifferentQuestionPoints',\r\n                    translateValues: {\r\n                        name,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        return invalidReasons;\r\n    }\r\n\r\n    /**\r\n     * Compute warning reasons of the configurations\r\n     * @return an array of ValidationReason.\r\n     */\r\n    private getWarningReasons(): Array<ValidationReason> {\r\n        const warningReasons = new Array<ValidationReason>();\r\n        this.quizPool.quizQuestions.forEach((quizQuestion: QuizQuestion, index: number) => {\r\n            if (quizQuestion.type === QuizQuestionType.MULTIPLE_CHOICE && (<MultipleChoiceQuestion>quizQuestion).answerOptions!.some((option) => !option.explanation)) {\r\n                warningReasons.push({\r\n                    translateKey: 'artemisApp.quizExercise.invalidReasons.explanationIsMissing',\r\n                    translateValues: { index: index + 1 },\r\n                });\r\n            }\r\n        });\r\n        return warningReasons;\r\n    }\r\n\r\n    /**\r\n     * Callback if the save is successful. Set isSaving & hasPendingchanges to false and update quizPool and savedQuizPool.\r\n     *\r\n     * @param quizPool the saved quiz pool\r\n     */\r\n    private onSaveSuccess(quizPool: QuizPool): void {\r\n        this.isSaving = false;\r\n        this.hasPendingChanges = false;\r\n        this.quizPool = quizPool;\r\n        this.savedQuizPool = JSON.stringify(quizPool);\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Callback if the save is unsuccessful. Set isSaving to false and display alert.\r\n     */\r\n    private onSaveError = (): void => {\r\n        this.alertService.error('artemisApp.quizExercise.saveError');\r\n        this.isSaving = false;\r\n        this.changeDetectorRef.detectChanges();\r\n    };\r\n}\r\n", "@if (quizPool) {\r\n    <div class=\"row\">\r\n        <div>\r\n            <h4 class=\"title-container\" jhiTranslate=\"artemisApp.quizPool.editTitle\"></h4>\r\n            <h4 class=\"max-score-container\">\r\n                <span class=\"badge bg-info align-text-top float-end\">\r\n                    <span jhiTranslate=\"artemisApp.quizExercise.maxScore\"></span>&nbsp;\r\n                    <span class=\"badge max-score\">{{ quizPool.maxPoints }}</span>\r\n                    <span class=\"sr-only\" jhiTranslate=\"artemisApp.quizExercise.maxScore\"></span>\r\n                </span>\r\n            </h4>\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n            <jhi-quiz-pool-mapping\r\n                [quizGroups]=\"quizPool.quizGroups\"\r\n                [quizQuestions]=\"quizPool.quizQuestions\"\r\n                [disabled]=\"isExamStarted\"\r\n                #quizPoolQuestionMapping\r\n                (onQuizGroupUpdated)=\"handleUpdate()\"\r\n                (onQuizQuestionDropped)=\"handleUpdate()\"\r\n            />\r\n        </div>\r\n        <div class=\"row px-3\">\r\n            <div class=\"form-check custom-control custom-checkbox\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id=\"cbRandomizeOrder\"\r\n                    class=\"form-check-input custom-control-input\"\r\n                    [(ngModel)]=\"quizPool.randomizeQuestionOrder\"\r\n                    (ngModelChange)=\"handleUpdate()\"\r\n                />\r\n                <label class=\"form-check-label custom-control-label\" for=\"cbRandomizeOrder\" jhiTranslate=\"artemisApp.quizExercise.randomizeQuestionOrder\"></label>\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n            <div class=\"edit-quiz\">\r\n                <jhi-quiz-question-list-edit\r\n                    #quizQuestionsEdit\r\n                    [courseId]=\"courseId\"\r\n                    [quizQuestions]=\"quizPool.quizQuestions\"\r\n                    [disabled]=\"isExamStarted\"\r\n                    (onQuestionAdded)=\"handleQuestionAdded($event)\"\r\n                    (onQuestionDeleted)=\"handleQuestionDeleted($event)\"\r\n                    (onQuestionUpdated)=\"handleUpdate()\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div class=\"edit-quiz-footer\">\r\n            <div class=\"container\">\r\n                <div class=\"edit-quiz-footer-content\">\r\n                    <div class=\"form-group\">\r\n                        @if (hasPendingChanges && isValid && !isSaving) {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.edit.pendingChanges\" class=\"badge bg-secondary\"></span>\r\n                        }\r\n                        @if (isSaving) {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.edit.saving\" class=\"badge bg-secondary\"></span>\r\n                        }\r\n                        <ng-template #tooltipTranslate>\r\n                            @for (reason of invalidReasons; track reason) {\r\n                                <div>\r\n                                    @if ((reason.translateValues | json) !== '{}') {\r\n                                        <p\r\n                                            jhiTranslate=\"{{ reason.translateKey }}\"\r\n                                            [translateValues]=\"{\r\n                                                index: reason.translateValues.index,\r\n                                                threshold: reason.translateValues.threshold,\r\n                                                name: reason.translateValues.name,\r\n                                            }\"\r\n                                        ></p>\r\n                                    }\r\n                                    @if ((reason.translateValues | json) === '{}') {\r\n                                        <p jhiTranslate=\"{{ reason.translateKey }}\"></p>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </ng-template>\r\n                        <ng-template #warningTranslate>\r\n                            @for (warning of warningReasons; track warning) {\r\n                                <div>\r\n                                    @if ((warning.translateValues | json) !== '{}') {\r\n                                        <p\r\n                                            jhiTranslate=\"{{ warning.translateKey }}\"\r\n                                            [translateValues]=\"{ index: warning.translateValues.index, name: warning.translateValues.name }\"\r\n                                        ></p>\r\n                                    }\r\n                                    @if ((warning.translateValues | json) === '{}') {\r\n                                        <p jhiTranslate=\"{{ warning.translateKey }}\"></p>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </ng-template>\r\n                        @if (!isValid) {\r\n                            <span class=\"badge bg-danger\" [ngbTooltip]=\"tooltipTranslate\" tooltip-placement=\"top-right auto\">\r\n                                <fa-icon [icon]=\"faExclamationCircle\" />\r\n                                <span jhiTranslate=\"artemisApp.quizExercise.edit.invalidInput\"></span>\r\n                                <span>({{ invalidReasons.length }})</span>\r\n                            </span>\r\n                        }\r\n                        @if (warningReasons.length > 0) {\r\n                            <span class=\"badge bg-warning\" [ngbTooltip]=\"warningTranslate\" tooltip-placement=\"top-right auto\">\r\n                                <span jhiTranslate=\"artemisApp.quizExercise.edit.warning\"></span>\r\n                                <span>({{ warningReasons.length }})</span>\r\n                            </span>\r\n                        }\r\n                        <button\r\n                            id=\"quiz-save\"\r\n                            class=\"btn btn-success\"\r\n                            [disabled]=\"isSaving || !hasPendingChanges || !this.isValid || isExamStarted\"\r\n                            [ngbTooltip]=\"isValid ? '' : tooltipTranslate\"\r\n                            jhiTranslate=\"entity.action.save\"\r\n                            tooltip-placement=\"top-right auto\"\r\n                            tooltip-class=\"invalid-reasons-tooltip\"\r\n                            (click)=\"save()\"\r\n                        ></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["QuizPool", "id", "exam", "quizGroups", "quizQuestions", "maxPoints", "randomizeQuestionOrder", "QuizPoolService", "http", "inject", "HttpClient", "update", "courseId", "examId", "quizPool", "req", "options", "createRequestOption", "put", "params", "observe", "find", "get", "factory", "\u0275fac", "providedIn", "QuizGroup", "id", "name", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "question_r1", "title", "\u0275\u0275textInterpolate", "points", "\u0275\u0275template", "QuizPoolMappingQuestionListComponent_For_3_Case_3_Template", "QuizPoolMappingQuestionListComponent_For_3_Case_4_Template", "QuizPoolMappingQuestionListComponent_For_3_Case_5_Template", "\u0275\u0275property", "ctx_r1", "disabled", "\u0275\u0275conditional", "tmp_11_0", "type", "MULTIPLE_CHOICE", "DRAG_AND_DROP", "SHORT_ANSWER", "QuizPoolMappingQuestionListComponent", "quizQuestions", "onQuizQuestionDropped", "EventEmitter", "QuizQuestionType", "handleOnDropQuestion", "event", "previousContainer", "container", "moveItemInArray", "data", "previousIndex", "currentIndex", "transferArrayItem", "quizQuestion", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275repeaterCreate", "QuizPoolMappingQuestionListComponent_For_3_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "CdkDropList", "CdkDrag", "styles", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "groupName_r2", "\u0275\u0275reference", "ctx_r2", "\u0275\u0275nextContext", "addGroup", "value", "\u0275\u0275resetView", "\u0275\u0275advance", "\u0275\u0275property", "faPlus", "_r6", "\u0275$index_80_r7", "$index", "deleteGroup", "quizGroup_r5", "name", "dialogError$", "faTimes", "$event", "_r4", "$implicit", "handleOnQuizQuestionDropped", "\u0275\u0275template", "QuizPoolMappingComponent_Conditional_13_For_26_Conditional_13_Template", "\u0275\u0275textInterpolate", "disabled", "quizGroupNameQuestionsMap", "get", "\u0275\u0275conditional", "\u0275\u0275repeaterCreate", "QuizPoolMappingComponent_Conditional_13_For_26_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "quizGroups", "faExclamationCircle", "QuizPoolMappingComponent", "alertService", "inject", "AlertService", "quizQuestions", "onQuizGroupUpdated", "EventEmitter", "onQuizQuestionDropped", "Map", "unmappedQuizQuestions", "dialogErrorSource", "Subject", "asObservable", "ngOnInit", "handleUpdate", "ngOnChanges", "ngOnDestroy", "unsubscribe", "quizQuestion", "quizGroup", "emit", "length", "error", "has", "QuizGroup", "push", "set", "Array", "index", "addQuestion", "undefined", "splice", "delete", "next", "deleteQuestion", "quizQuestionToBeDeleted", "groupName", "updatedQuizQuestions", "filter", "getGroupNamesWithNoQuestion", "results", "hasGroupsWithNoQuestion", "getGroupNamesWithDifferentQuestionPoints", "every", "points", "hasGroupsWithDifferentQuestionPoints", "getMaxPoints", "maxPoints", "values", "reduce", "sum", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "QuizPoolMappingComponent_Conditional_11_Template", "QuizPoolMappingComponent_Conditional_13_Template", "QuizPoolMappingComponent_Conditional_16_Template", "\u0275\u0275pureFunction1", "_c0", "CdkDropListGroup", "FaIconComponent", "TranslateDirective", "QuizPoolMappingQuestionListComponent", "DeleteButtonDirective", "NgStyle", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "reason_r3", "translateKey", "\u0275\u0275property", "\u0275\u0275pureFunction3", "_c2", "translateValues", "index", "threshold", "name", "\u0275\u0275elementStart", "\u0275\u0275template", "QuizPoolComponent_Conditional_0_ng_template_56_For_2_Conditional_3_Template", "QuizPoolComponent_Conditional_0_ng_template_56_For_2_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "\u0275\u0275pipeBind1", "\u0275\u0275repeaterCreate", "QuizPoolComponent_Conditional_0_ng_template_56_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "ctx_r1", "invalidReasons", "warning_r4", "\u0275\u0275pureFunction2", "_c3", "QuizPoolComponent_Conditional_0_ng_template_59_For_2_Conditional_3_Template", "QuizPoolComponent_Conditional_0_ng_template_59_For_2_Conditional_5_Template", "QuizPoolComponent_Conditional_0_ng_template_59_For_2_Template", "warningReasons", "tooltipTranslate_r5", "faExclamationCircle", "\u0275\u0275textInterpolate1", "length", "warningTranslate_r6", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleUpdate", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "quizPool", "randomizeQuestionOrder", "handleQuestionAdded", "handleQuestionDeleted", "QuizPoolComponent_Conditional_0_Conditional_54_Template", "QuizPoolComponent_Conditional_0_Conditional_55_Template", "QuizPoolComponent_Conditional_0_ng_template_56_Template", "\u0275\u0275templateRefExtractor", "QuizPoolComponent_Conditional_0_ng_template_59_Template", "QuizPoolComponent_Conditional_0_Conditional_62_Template", "QuizPoolComponent_Conditional_0_Conditional_63_Template", "save", "\u0275\u0275textInterpolate", "maxPoints", "quizGroups", "quizQuestions", "isExamStarted", "\u0275\u0275twoWayProperty", "courseId", "hasPendingChanges", "isValid", "isSaving", "QuizPoolComponent", "route", "inject", "ActivatedRoute", "quizPoolService", "QuizPoolService", "examService", "ExamManagementService", "changeDetectorRef", "ChangeDetectorRef", "dragAndDropQuestionUtil", "DragAndDropQuestionUtil", "shortAnswerQuestionUtil", "ShortAnswerQuestionUtil", "alertService", "AlertService", "quizPoolMappingComponent", "quizQuestionsEditComponent", "savedQuizPool", "examId", "ngOnInit", "Number", "snapshot", "paramMap", "get", "checkIfExamStarted", "initializeQuizPool", "quizQuestion", "addQuestion", "deleteQuestion", "parseAllQuestions", "requestOptions", "getMaxPoints", "update", "subscribe", "next", "quizPoolResponse", "body", "onSaveSuccess", "onSaveError", "error", "find", "response", "exam", "startDate", "isBefore", "dayjs", "detectChanges", "onError", "JSON", "stringify", "computeReasons", "QuizPool", "isConfigurationValid", "getInvalidReasons", "getWarningReasons", "quizQuestionsValid", "every", "question", "isQuizQuestionValid", "totalPoints", "map", "points", "reduce", "accumulator", "hasGroupsWithNoQuestion", "hasGroupsWithDifferentQuestionPoints", "Array", "forEach", "computeQuizQuestionInvalidReason", "names", "getGroupNamesWithNoQuestion", "push", "getGroupNamesWithDifferentQuestionPoints", "type", "QuizQuestionType", "MULTIPLE_CHOICE", "answerOptions", "some", "option", "explanation", "selectors", "viewQuery", "rf", "ctx", "decls", "vars", "consts", "template", "QuizPoolComponent_Conditional_0_Template", "TranslateDirective", "QuizPoolMappingComponent", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "QuizQuestionListEditComponent", "NgbTooltip", "FaIconComponent", "JsonPipe", "styles", "encapsulation", "changeDetection"]
}
