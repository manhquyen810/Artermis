{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/pipes/grade-step-bounds.pipe.ts"],
  "sourcesContent": ["import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GradeStep } from 'app/entities/grade-step.model';\r\nimport { GradeEditMode } from 'app/grading-system/base-grading-system/base-grading-system.component';\r\nimport { round } from 'app/shared/util/utils';\r\n\r\n@Pipe({\r\n    name: 'gradeStepBounds',\r\n    pure: false,\r\n})\r\nexport class GradeStepBoundsPipe implements PipeTransform {\r\n    /**\r\n     * Rounds a number to two decimal places\r\n     *\r\n     * @param num the number to be rounded\r\n     */\r\n    static round(num?: number) {\r\n        if (num == undefined) {\r\n            return;\r\n        }\r\n        return round(num, 2);\r\n    }\r\n\r\n    /**\r\n     * Returns the interval representation of the given grade step indicating which ends are open and which ones are closed\r\n     * by '(', ')' and '[', ']' respectively.\r\n     *\r\n     * @param gradeStep for which the interval should be defined\r\n     * @param gradeEditMode selects whether points or percentages are shown\r\n     * @param isLast true for last (sticky) grade step in a grading scale to cover infinity\r\n     * @returns interval representation of the grade step\r\n     */\r\n    transform(gradeStep: GradeStep, gradeEditMode: GradeEditMode, isLast = false): string {\r\n        let lowerBound: number;\r\n        let upperBound: number;\r\n        switch (gradeEditMode) {\r\n            case GradeEditMode.PERCENTAGE:\r\n                lowerBound = gradeStep.lowerBoundPercentage;\r\n                upperBound = gradeStep.upperBoundPercentage;\r\n                break;\r\n            case GradeEditMode.POINTS:\r\n                if (gradeStep.lowerBoundPoints == undefined || gradeStep.upperBoundPoints == undefined) {\r\n                    return '-';\r\n                }\r\n                lowerBound = gradeStep.lowerBoundPoints;\r\n                upperBound = gradeStep.upperBoundPoints;\r\n                break;\r\n        }\r\n        const roundFunc = GradeStepBoundsPipe.round;\r\n        const lowerBoundText = `${gradeStep.lowerBoundInclusive ? '[' : '('}${roundFunc(lowerBound)}`;\r\n\r\n        let upperBoundText: string;\r\n        if (isLast) {\r\n            // This is the last (sticky) step so handle infinity case.\r\n            upperBoundText = '&infin;)';\r\n        } else {\r\n            upperBoundText = `${roundFunc(upperBound)}${gradeStep.upperBoundInclusive ? ']' : ')'}`;\r\n        }\r\n\r\n        return `${lowerBoundText} - ${upperBoundText}`;\r\n    }\r\n}\r\n"],
  "mappings": "yHASA,IAAaA,GAAmB,IAAA,CAA1B,MAAOA,CAAmB,CAM5B,OAAOC,MAAMC,EAAY,CACrB,GAAIA,GAAOC,KAGX,OAAOF,EAAMC,EAAK,CAAC,CACvB,CAWAE,UAAUC,EAAsBC,EAA8BC,EAAS,GAAK,CACxE,IAAIC,EACAC,EACJ,OAAQH,EAAa,CACjB,KAAKI,EAAcC,WACfH,EAAaH,EAAUO,qBACvBH,EAAaJ,EAAUQ,qBACvB,MACJ,KAAKH,EAAcI,OACf,GAAIT,EAAUU,kBAAoBZ,MAAaE,EAAUW,kBAAoBb,KACzE,MAAO,IAEXK,EAAaH,EAAUU,iBACvBN,EAAaJ,EAAUW,iBACvB,KACR,CACA,IAAMC,EAAYjB,EAAoBC,MAChCiB,EAAiB,GAAGb,EAAUc,oBAAsB,IAAM,GAAG,GAAGF,EAAUT,CAAU,CAAC,GAEvFY,EACJ,OAAIb,EAEAa,EAAiB,WAEjBA,EAAiB,GAAGH,EAAUR,CAAU,CAAC,GAAGJ,EAAUgB,oBAAsB,IAAM,GAAG,GAGlF,GAAGH,CAAc,MAAME,CAAc,EAChD,4CAlDSpB,EAAmB,mDAAnBA,EAAmBsB,KAAA,EAAA,CAAA,SAAnBtB,CAAmB,GAAA",
  "names": ["GradeStepBoundsPipe", "round", "num", "undefined", "transform", "gradeStep", "gradeEditMode", "isLast", "lowerBound", "upperBound", "GradeEditMode", "PERCENTAGE", "lowerBoundPercentage", "upperBoundPercentage", "POINTS", "lowerBoundPoints", "upperBoundPoints", "roundFunc", "lowerBoundText", "lowerBoundInclusive", "upperBoundText", "upperBoundInclusive", "pure"]
}
