{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/chart/active-students-chart.ts"],
  "sourcesContent": ["import { Course } from 'app/entities/course.model';\r\nimport dayjs from 'dayjs/esm';\r\n\r\nexport abstract class ActiveStudentsChart {\r\n    startDateAlreadyPassed = true;\r\n    currentOffsetToEndDate = 0; // the number of weeks between the end date of the course and the current date\r\n    currentSpanSize: number;\r\n\r\n    /**\r\n     * sets values for the offset attributes of this directive\r\n     * @param course the corresponding course\r\n     * @param normalTimeSpan the amount of weeks a view of a chart normally contains\r\n     */\r\n    protected determineDisplayedPeriod(course: Course, normalTimeSpan: number): void {\r\n        const now = dayjs();\r\n        this.currentSpanSize = normalTimeSpan;\r\n        if (course.startDate) {\r\n            this.handleCourseStartDate(dayjs(course.startDate), now, normalTimeSpan);\r\n        }\r\n        if (course.endDate && now.isAfter(course.endDate)) {\r\n            this.handleCourseEndDate(course, now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper method that handles the existence of a course start date\r\n     * @param courseStartDate the start date of a course\r\n     * @param currentDate the current date\r\n     * @param normalTimeSpan the normal time span an active students line chart displays\r\n     */\r\n    private handleCourseStartDate(courseStartDate: dayjs.Dayjs, currentDate: dayjs.Dayjs, normalTimeSpan: number): void {\r\n        if (currentDate.isBefore(courseStartDate)) {\r\n            this.startDateAlreadyPassed = false;\r\n        } else {\r\n            this.currentSpanSize = Math.min(this.determineDifferenceBetweenIsoWeeks(courseStartDate, currentDate) + 1, normalTimeSpan);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper method that handles the existence of a course end date and its side effects if a start date exists as well\r\n     * @param course the corresponding course\r\n     * @param currentDate the current date\r\n     */\r\n    private handleCourseEndDate(course: Course, currentDate: dayjs.Dayjs): void {\r\n        this.currentOffsetToEndDate = this.determineDifferenceBetweenIsoWeeks(dayjs(course.endDate), currentDate);\r\n        if (course.startDate) {\r\n            this.currentSpanSize = Math.min(this.determineDifferenceBetweenIsoWeeks(dayjs(course.startDate), dayjs(course.endDate)) + 1, this.currentSpanSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method returning the number of weeks between two dates.\r\n     * Note: The week of the most recent date is not included, e.g. date1: 01.05.22, date2: 9.05.22 returns 1\r\n     * @param date1 the date that is assumed to be before date 2\r\n     * @param date2 the date that is assumed to be the most recent date\r\n     */\r\n    protected determineDifferenceBetweenIsoWeeks(date1: dayjs.Dayjs, date2: dayjs.Dayjs): number {\r\n        const normalizedDate1 = date1.isoWeekday(1).hour(2).minute(0).second(0).millisecond(0);\r\n        const normalizedDate2 = date2.isoWeekday(1).hour(2).minute(0).second(0).millisecond(0);\r\n        return normalizedDate2.diff(normalizedDate1, 'week');\r\n    }\r\n}\r\n"],
  "mappings": "wCAGM,IAAgBA,EAAhB,KAAmC,CACrCC,uBAAyB,GACzBC,uBAAyB,EACzBC,gBAOUC,yBAAyBC,EAAgBC,EAAsB,CACrE,IAAMC,EAAMC,EAAK,EACjB,KAAKL,gBAAkBG,EACnBD,EAAOI,WACP,KAAKC,sBAAsBF,EAAMH,EAAOI,SAAS,EAAGF,EAAKD,CAAc,EAEvED,EAAOM,SAAWJ,EAAIK,QAAQP,EAAOM,OAAO,GAC5C,KAAKE,oBAAoBR,EAAQE,CAAG,CAE5C,CAQQG,sBAAsBI,EAA8BC,EAA0BT,EAAsB,CACpGS,EAAYC,SAASF,CAAe,EACpC,KAAKb,uBAAyB,GAE9B,KAAKE,gBAAkBc,KAAKC,IAAI,KAAKC,mCAAmCL,EAAiBC,CAAW,EAAI,EAAGT,CAAc,CAEjI,CAOQO,oBAAoBR,EAAgBU,EAAwB,CAChE,KAAKb,uBAAyB,KAAKiB,mCAAmCX,EAAMH,EAAOM,OAAO,EAAGI,CAAW,EACpGV,EAAOI,YACP,KAAKN,gBAAkBc,KAAKC,IAAI,KAAKC,mCAAmCX,EAAMH,EAAOI,SAAS,EAAGD,EAAMH,EAAOM,OAAO,CAAC,EAAI,EAAG,KAAKR,eAAe,EAEzJ,CAQUgB,mCAAmCC,EAAoBC,EAAkB,CAC/E,IAAMC,EAAkBF,EAAMG,WAAW,CAAC,EAAEC,KAAK,CAAC,EAAEC,OAAO,CAAC,EAAEC,OAAO,CAAC,EAAEC,YAAY,CAAC,EAErF,OADwBN,EAAME,WAAW,CAAC,EAAEC,KAAK,CAAC,EAAEC,OAAO,CAAC,EAAEC,OAAO,CAAC,EAAEC,YAAY,CAAC,EAC9DC,KAAKN,EAAiB,MAAM,CACvD",
  "names": ["ActiveStudentsChart", "startDateAlreadyPassed", "currentOffsetToEndDate", "currentSpanSize", "determineDisplayedPeriod", "course", "normalTimeSpan", "now", "dayjs", "startDate", "handleCourseStartDate", "endDate", "isAfter", "handleCourseEndDate", "courseStartDate", "currentDate", "isBefore", "Math", "min", "determineDifferenceBetweenIsoWeeks", "date1", "date2", "normalizedDate1", "isoWeekday", "hour", "minute", "second", "millisecond", "diff"]
}
