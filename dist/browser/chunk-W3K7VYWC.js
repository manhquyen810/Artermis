import{a as Q}from"./chunk-QU4DXSXD.js";import{a as y}from"./chunk-JHBUBEY6.js";import{e as M}from"./chunk-CK7FH6VF.js";import{b as F,e as x}from"./chunk-PUNMJFMR.js";import{a as A}from"./chunk-G3JOQOSD.js";import{h as k}from"./chunk-CT44YL7Q.js";import{n as w}from"./chunk-VK7JPHFE.js";import{c as j}from"./chunk-BNDLMKXK.js";import{p as O}from"./chunk-DID2YGL7.js";import{c as C}from"./chunk-CXQURQM5.js";import{a as D}from"./chunk-5ZXXURLP.js";import{L as P,O as I}from"./chunk-IOA4DPXY.js";import{Ea as E,H as _,J as L,L as p,P as g,Q as N,_ as B,f as R,g as d,oa as f,r as v,ra as h,s as a,ya as U,z as T}from"./chunk-5LC5EQRR.js";import{a as m,b as l}from"./chunk-3E746U5Y.js";var S=function(o){return o.HAS_NO_PENDING_SUBMISSION="HAS_NO_PENDING_SUBMISSION",o.IS_BUILDING_PENDING_SUBMISSION="IS_BUILDING_PENDING_SUBMISSION",o.HAS_FAILED_SUBMISSION="HAS_FAILED_SUBMISSION",o.IS_QUEUED="IS_QUEUED",o}(S||{}),W=o=>!!o.error,oe=(()=>{class o{websocketService=E(D);http=E(I);participationWebsocketService=E(y);participationService=E(Q);profileService=E(j);SUBMISSION_RESOURCE_URL="api/programming/programming-submissions/";PROGRAMMING_EXERCISE_RESOURCE_URL="api/programming/programming-exercises/";DEFAULT_EXPECTED_RESULT_ETA=2*60*1e3;DEFAULT_EXPECTED_QUEUE_ESTIMATE=60*1e3;SUBMISSION_TEMPLATE_TOPIC="/topic/exercise/%exerciseId%/newSubmissions";SUBMISSION_PROCESSING_TEMPLATE_TOPIC="/topic/exercise/%exerciseId%/submissionProcessing";resultSubscriptions={};submissionTopicsSubscribed=new Map;submissionProcessingTopicsSubscribed=new Map;participationIdToExerciseId=new Map;submissionSubjects={};exerciseBuildStateSubjects=new Map;resultTimerSubjects=new Map;resultTimerSubscriptions={};resultEtaSubject=new d(this.DEFAULT_EXPECTED_RESULT_ETA);queueEstimateTimerSubscriptions={};exerciseBuildStateValue={};currentExpectedResultETA=this.DEFAULT_EXPECTED_RESULT_ETA;currentExpectedQueueEstimate=this.DEFAULT_EXPECTED_QUEUE_ESTIMATE;startedProcessingCache=new Map;isLocalCIProfile=void 0;profileServiceSubscription;constructor(){this.profileServiceSubscription=this.profileService.getProfileInfo().subscribe(e=>{this.setLocalCIProfile(!!e?.activeProfiles.includes(w))})}ngOnDestroy(){Object.values(this.resultSubscriptions).forEach(e=>e.unsubscribe()),Object.values(this.resultTimerSubscriptions).forEach(e=>e.unsubscribe()),Object.values(this.queueEstimateTimerSubscriptions).forEach(e=>e.unsubscribe()),this.submissionTopicsSubscribed.forEach(e=>this.websocketService.unsubscribe(e)),this.submissionProcessingTopicsSubscribed.forEach(e=>this.websocketService.unsubscribe(e)),this.profileServiceSubscription.unsubscribe()}get exerciseBuildState(){return this.exerciseBuildStateValue}set exerciseBuildState(e){this.exerciseBuildStateValue=e,this.updateResultEta()}updateResultEta(){let e=Object.values(this.exerciseBuildStateValue).reduce((s,i)=>{let t=i?Object.values(i).filter(({submissionState:r})=>r===S.IS_BUILDING_PENDING_SUBMISSION).length:0;return s+t},0);this.currentExpectedResultETA=this.DEFAULT_EXPECTED_RESULT_ETA+Math.floor(e/100)*1e3*60,this.resultEtaSubject?.next(this.currentExpectedResultETA)}fetchLatestPendingSubmissionByParticipationId(e){return this.http.get("api/programming/programming-exercise-participations/"+e+"/latest-pending-submission").pipe(g(()=>a(void 0)))}fetchLatestPendingSubmissionsByExerciseId(e){return this.http.get(`api/programming/programming-exercises/${e}/latest-pending-submissions`).pipe(g(()=>a([])))}fetchQueueReleaseDateEstimationByParticipationId(e){return this.http.get("api/programming/queued-jobs/queue-duration-estimation",{params:{participationId:e}}).pipe(g(()=>a(void 0)))}startResultWaitingTimer(e,s=this.currentExpectedResultETA){this.resetResultWaitingTimer(e),this.resultTimerSubscriptions[e]=_(s).pipe(h(()=>{let i=this.resultTimerSubjects.get(e);i&&i.next(void 0)})).subscribe()}resetResultWaitingTimer(e){this.resultTimerSubscriptions[e]&&this.resultTimerSubscriptions[e].unsubscribe()}startQueueEstimateTimer(e,s,i,t=this.currentExpectedQueueEstimate){this.resetQueueEstimateTimer(e),this.queueEstimateTimerSubscriptions[e]=_(t).subscribe(()=>{let r=this.getExpectedRemainingTimeForBuild(i);r>0?(this.emitBuildingSubmission(e,s,i),this.startResultWaitingTimer(e,r)):this.emitFailedSubmission(e,s),this.resetQueueEstimateTimer(e)})}resetQueueEstimateTimer(e){this.queueEstimateTimerSubscriptions[e]?.unsubscribe()}setupWebsocketSubscriptionForLatestPendingSubmission(e,s,i){if(!this.submissionTopicsSubscribed.get(e)){let t;i?t="/user/topic/newSubmissions":t=this.SUBMISSION_TEMPLATE_TOPIC.replace("%exerciseId%",s.toString()),this.resultTimerSubjects.set(e,new R),this.participationIdToExerciseId.set(e,s),Array.from(this.submissionTopicsSubscribed.values()).includes(t)||(this.websocketService.subscribe(t),this.websocketService.receive(t).pipe(h(r=>{if(W(r)){let b=r;this.emitFailedSubmission(b.participationId,s);return}let u=r,n=u.participation.id,c;if(this.isLocalCIProfile){if(this.handleQueuedProgrammingSubmissions(u,n))return;c=this.startedProcessingCache.get(u.commitHash),this.removeSubmissionFromProcessingCache(u.commitHash)}this.emitBuildingSubmission(n,this.participationIdToExerciseId.get(n),r,c),this.startResultWaitingTimer(n)})).subscribe()),this.submissionTopicsSubscribed.set(e,t)}}handleQueuedProgrammingSubmissions(e,s){let i=!1;if(!e.isProcessing&&!this.didSubmissionStartProcessing(e.commitHash)){let t=this.getExpectedRemainingTimeForQueue(e);t>0&&(this.emitQueuedSubmission(s,this.participationIdToExerciseId.get(s),e),this.startQueueEstimateTimer(s,this.participationIdToExerciseId.get(s),e,t),i=!0)}return i}setupWebsocketSubscriptionForSubmissionProcessing(e,s,i){if(!this.submissionProcessingTopicsSubscribed.get(e)){let t;i?t="/user/topic/submissionProcessing":t=this.SUBMISSION_PROCESSING_TEMPLATE_TOPIC.replace("%exerciseId%",s.toString()),Array.from(this.submissionProcessingTopicsSubscribed.values()).includes(t)||(this.websocketService.subscribe(t),this.websocketService.receive(t).pipe(h(u=>{let n=u.participationId,c=this.participationIdToExerciseId.get(n);if(!this.isNewestSubmission(u,c,n))return;let b=this.getSubmissionByCommitHash(u);if(!b){this.startedProcessingCache.set(u.commitHash,{estimatedCompletionDate:u.estimatedCompletionDate,buildStartDate:u.buildStartDate});return}b.isProcessing=!0;let G={estimatedCompletionDate:u.estimatedCompletionDate,buildStartDate:u.buildStartDate};this.removeSubmissionFromProcessingCache(b.commitHash),this.resetQueueEstimateTimer(n),this.emitBuildingSubmission(n,c,b,G),this.startResultWaitingTimer(n)})).subscribe()),this.submissionProcessingTopicsSubscribed.set(e,t)}}isNewestSubmission(e,s,i){let t=this.exerciseBuildState[s]?.[i]?.submission;return t?.submissionDate?e?.submissionDate?O(e.submissionDate).isSameOrAfter(O(t.submissionDate)):!1:!0}getSubmissionByCommitHash(e){if(e.exerciseId&&e.participationId&&e.commitHash){let s=this.exerciseBuildState[e.exerciseId]?.[e.participationId]?.submission;if(s&&s.commitHash===e.commitHash)return s}}subscribeForNewResult(e,s,i){if(this.resultSubscriptions[e])return;let t=this.participationWebsocketService.subscribeForLatestResultOfParticipation(e,i,s).pipe(p(u=>this.isResultOfLatestSubmission(u,s,e)),B(),h(()=>{this.emitNoPendingSubmission(e,s)})),r=this.resultTimerSubjects.get(e).pipe(f(()=>this.participationService.getLatestResultWithFeedback(e,!0)),h(u=>{this.isResultOfLatestSubmission(u,s,e)?this.participationWebsocketService.notifyAllResultSubscribers(l(m({},u),{participation:{id:e}})):this.emitFailedSubmission(e,s)}),g(()=>(this.emitFailedSubmission(e,s),a(void 0))));this.resultSubscriptions[e]=L(r,t).pipe(p(()=>!!this.exerciseBuildState[s][e]),h(()=>{this.resetQueueEstimateTimer(e),this.resetResultWaitingTimer(e)})).subscribe()}isResultOfLatestSubmission(e,s,i){if(!e||!e.submission)return!1;let{submission:t}=this.exerciseBuildState[s][i];return!!t&&e.submission.id===t.id}emitNoPendingSubmission(e,s){let i={participationId:e,submissionState:S.HAS_NO_PENDING_SUBMISSION,submission:void 0};this.notifySubscribers(e,s,i)}emitBuildingSubmission(e,s,i,t){let r={participationId:e,submissionState:S.IS_BUILDING_PENDING_SUBMISSION,submission:i,buildTimingInfo:t};this.notifySubscribers(e,s,r)}emitQueuedSubmission(e,s,i){let t={participationId:e,submissionState:S.IS_QUEUED,submission:i};this.notifySubscribers(e,s,t)}emitFailedSubmission(e,s){let i=this.exerciseBuildState[s]&&this.exerciseBuildState[s][e],t={participationId:e,submissionState:S.HAS_FAILED_SUBMISSION,submission:i?i.submission:void 0};this.notifySubscribers(e,s,t)}notifySubscribers(e,s,i){let t=this.submissionSubjects[e];t&&t.next(i),this.exerciseBuildState=l(m({},this.exerciseBuildState),{[s]:l(m({},this.exerciseBuildState[s]||{}),{[e]:i})});let r=this.exerciseBuildStateSubjects.get(s);r&&r.next(this.exerciseBuildState[s])}getExpectedRemainingTimeForBuild(e){return this.currentExpectedResultETA-(Date.now()-Date.parse(e.submissionDate))}getExpectedRemainingTimeForQueue(e){return this.currentExpectedQueueEstimate-(Date.now()-Date.parse(e.submissionDate))}initializeCacheForStudent(e,s=!1){e&&e.filter(i=>i.type!==C.PROGRAMMING||!i.studentParticipations||!i.studentParticipations.length||!s&&this.submissionSubjects[i.studentParticipations[0].id]?!1:!!i.studentParticipations[0].submissions&&!!i.studentParticipations[0].submissions.length).forEach(i=>{let t=i.studentParticipations[0],r=t.submissions.reduce((c,b)=>c.id>b.id?c:b),u=k(t.results),n=!!r&&(!u||u.submission&&u.submission.id!==r.id);this.submissionSubjects[t.id]=new d(void 0),this.processPendingSubmission(n?r:void 0,t.id,i.id,!0).subscribe()})}getLatestPendingSubmissionByParticipationId(e,s,i,t=!1,r=!0){let u=this.submissionSubjects[e];if(!t&&u)return u.asObservable().pipe(p(c=>c!==void 0));let n=this.exerciseBuildStateSubjects.get(s);return n?n.asObservable().pipe(p(c=>!!c),f(c=>{let b=c?.[e];return b?a(b):this.loadLatestPendingSubmissionByParticipationId(e,s,i,r)})):this.loadLatestPendingSubmissionByParticipationId(e,s,i,r)}loadLatestPendingSubmissionByParticipationId(e,s,i,t){return this.submissionSubjects[e]=new d(void 0),t?this.fetchLatestPendingSubmissionByParticipationId(e).pipe(f(r=>this.processPendingSubmission(r,e,s,i))).subscribe():this.processPendingSubmission(void 0,e,s,i).subscribe(),this.submissionSubjects[e].asObservable().pipe(p(r=>r!==void 0))}getSubmissionStateOfExercise(e){let s=this.exerciseBuildStateSubjects.get(e);return s?s.asObservable().pipe(p(i=>i!==void 0)):(this.exerciseBuildStateSubjects.set(e,new d(void 0)),this.fetchLatestPendingSubmissionsByExerciseId(e).pipe(T(Object.entries),T(this.mapParticipationIdToNumber),f(i=>i.length?v(i).pipe(f(([t,r])=>(this.submissionSubjects[t]=new d(void 0),this.processPendingSubmission(r,t,e,!1)))):a([])),N(this.mapToExerciseBuildState,{}),g(()=>a({}))).subscribe(i=>{this.exerciseBuildState=l(m({},this.exerciseBuildState),{[e]:i}),this.exerciseBuildStateSubjects.get(e)?.next(i)}),this.exerciseBuildStateSubjects.get(e).asObservable().pipe(p(i=>i!==void 0)))}getResultEtaInMs(){return this.resultEtaSubject.asObservable().pipe(B())}triggerBuild(e,s="MANUAL"){return this.http.post(this.SUBMISSION_RESOURCE_URL+e+`/trigger-build?submissionType=${s}`,{})}triggerFailedBuild(e,s){let i=new P().set("lastGraded",s.toString());return this.http.post(this.SUBMISSION_RESOURCE_URL+e+"/trigger-failed-build",{},{params:i,observe:"response"})}triggerInstructorBuildForAllParticipationsOfExercise(e){return this.http.post(this.PROGRAMMING_EXERCISE_RESOURCE_URL+e+"/trigger-instructor-build-all",{})}triggerInstructorBuildForParticipationsOfExercise(e,s){return this.http.post(this.PROGRAMMING_EXERCISE_RESOURCE_URL+e+"/trigger-instructor-build",s)}getSubmissionCountByType(e,s){let i=this.exerciseBuildState[e];return Object.entries(i).filter(([,t])=>{let{submissionState:r}=t;return r===s}).map(([t])=>parseInt(t,10))}processPendingSubmission(e,s,i,t){return a(e).pipe(h(()=>{this.setupWebsocketSubscriptionForLatestPendingSubmission(s,i,t),this.isLocalCIProfile&&this.setupWebsocketSubscriptionForSubmissionProcessing(s,i,t)}),T(r=>{if(r){if(this.isLocalCIProfile&&r.isProcessing===!1&&!this.didSubmissionStartProcessing(r.commitHash)){let u=this.getExpectedRemainingTimeForQueue(r);if(u>0)return this.emitQueuedSubmission(s,i,r),this.startQueueEstimateTimer(s,i,r,u),{participationId:s,submission:e,submissionState:S.IS_QUEUED}}else{let u={estimatedCompletionDate:r.estimatedCompletionDate,buildStartDate:r.buildStartDate};u=u??this.startedProcessingCache.get(r.commitHash),this.removeSubmissionFromProcessingCache(r.commitHash);let n=this.getExpectedRemainingTimeForBuild(r);if(n>0)return this.emitBuildingSubmission(s,i,r,u),this.startResultWaitingTimer(s,n),{participationId:s,submission:e,submissionState:S.IS_BUILDING_PENDING_SUBMISSION}}return this.emitFailedSubmission(s,i),{participationId:s,submission:e,submissionState:S.HAS_FAILED_SUBMISSION}}return this.emitNoPendingSubmission(s,i),{participationId:s,submission:void 0,submissionState:S.HAS_NO_PENDING_SUBMISSION}}),h(r=>{let u=l(m({},this.exerciseBuildState[i]||{}),{[s]:r});this.exerciseBuildState=l(m({},this.exerciseBuildState),{[i]:u}),this.subscribeForNewResult(s,i,t)}))}mapParticipationIdToNumber(e){return e.map(([s,i])=>[parseInt(s,10),i])}mapToExerciseBuildState(e,s){if(!Object.keys(s).length)return{};let{participationId:i,submission:t,submissionState:r}=s;return l(m({},e),{[i]:{participationId:i,submissionState:r,submission:t}})}didSubmissionStartProcessing(e){return!!this.startedProcessingCache.get(e)}removeSubmissionFromProcessingCache(e){this.startedProcessingCache.has(e)&&this.startedProcessingCache.delete(e)}getSubmissions(e,s,i=0){let t=`api/programming/exercises/${e}/programming-submissions`,r=A(s);return i!==0&&(r=r.set("correction-round",i.toString())),this.http.get(t,{params:r,observe:"response"}).pipe(T(u=>o.convertArrayResponse(u)))}getSubmissionWithoutAssessment(e,s=!1,i=0){let t=`api/programming/exercises/${e}/programming-submission-without-assessment`,r=new P;return i!==0&&(r=r.set("correction-round",i.toString())),s&&(r=r.set("lock","true")),this.http.get(t,{params:r})}lockAndGetProgrammingSubmissionParticipation(e,s=0){let i=new P;return s>0&&(i=i.set("correction-round",s.toString())),this.http.get(`api/programming/programming-submissions/${e}/lock`,{params:i})}static convertArrayResponse(e){let s=e.body,i=[];for(let t of s)this.convertItemWithLatestSubmissionResultFromServer(t),i.push(m({},t));return e.clone({body:i})}static convertItemWithLatestSubmissionResultFromServer(e){let s=Object.assign({},e);return x(s,F(s)),s.participation=M.convertParticipationDatesFromServer(e.participation),s}unsubscribeAllWebsocketTopics(e){Object.values(this.resultSubscriptions).forEach(s=>s.unsubscribe()),this.resultSubscriptions={},Object.values(this.resultTimerSubscriptions).forEach(s=>s.unsubscribe()),this.resultTimerSubscriptions={},Object.values(this.queueEstimateTimerSubscriptions).forEach(s=>s.unsubscribe()),this.queueEstimateTimerSubscriptions={},this.submissionTopicsSubscribed.forEach(s=>this.websocketService.unsubscribe(s)),this.submissionTopicsSubscribed.forEach((s,i)=>this.participationWebsocketService.unsubscribeForLatestResultOfParticipation(i,e)),this.submissionTopicsSubscribed.clear(),this.submissionProcessingTopicsSubscribed.forEach(s=>this.websocketService.unsubscribe(s)),this.submissionProcessingTopicsSubscribed.clear(),this.submissionSubjects={},this.exerciseBuildStateSubjects.delete(e.id)}unsubscribeForLatestSubmissionOfParticipation(e){let s=this.submissionTopicsSubscribed.get(e);s&&(this.submissionTopicsSubscribed.delete(e),this.resultTimerSubjects.delete(e),delete this.submissionSubjects[e],[...this.submissionTopicsSubscribed.values()].filter(r=>r===s).length===0&&this.websocketService.unsubscribe(s));let i=this.submissionProcessingTopicsSubscribed.get(e);i&&(this.submissionProcessingTopicsSubscribed.delete(e),[...this.submissionProcessingTopicsSubscribed.values()].filter(u=>u===i).length!==0||this.websocketService.unsubscribe(i))}setLocalCIProfile(e){this.isLocalCIProfile=e}getIsLocalCIProfile(){return this.isLocalCIProfile}static \u0275fac=function(s){return new(s||o)};static \u0275prov=U({token:o,factory:o.\u0275fac,providedIn:"root"})}return o})();export{S as a,oe as b};
//# sourceMappingURL=chunk-W3K7VYWC.js.map
