{
  "version": 3,
  "sources": ["src/main/webapp/app/lti/lti13-exercise-launch.component.ts", "src/main/webapp/app/lti/lti13-exercise-launch.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { captureException } from '@sentry/angular';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\nimport { LtiService } from 'app/shared/service/lti.service';\r\nimport { Theme, ThemeService } from 'app/core/theme/theme.service';\r\nimport { TranslateDirective } from '../shared/language/translate.directive';\r\n\r\ntype LtiLaunchResponse = {\r\n    targetLinkUri: string;\r\n    ltiIdToken: string;\r\n    clientRegistrationId: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-lti-exercise-launch',\r\n    templateUrl: './lti13-exercise-launch.component.html',\r\n    imports: [TranslateDirective],\r\n})\r\nexport class Lti13ExerciseLaunchComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n    private router = inject(Router);\r\n    private sessionStorageService = inject(SessionStorageService);\r\n    private ltiService = inject(LtiService);\r\n    private themeService = inject(ThemeService);\r\n\r\n    isLaunching: boolean;\r\n\r\n    constructor() {\r\n        this.isLaunching = true;\r\n    }\r\n\r\n    /**\r\n     * perform an LTI launch with state and id_token query parameters\r\n     */\r\n    ngOnInit(): void {\r\n        this.sendRequest();\r\n    }\r\n\r\n    sendRequest(): void {\r\n        const state = this.route.snapshot.queryParamMap.get('state');\r\n        const idToken = this.route.snapshot.queryParamMap.get('id_token');\r\n\r\n        if (!state || !idToken) {\r\n            captureException('Required parameter for LTI launch missing');\r\n            this.isLaunching = false;\r\n            return;\r\n        }\r\n\r\n        const requestBody = new HttpParams().set('state', state).set('id_token', idToken);\r\n\r\n        this.http\r\n            .post<LtiLaunchResponse>('api/lti/public/lti13/auth-login', requestBody.toString(), {\r\n                headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded'),\r\n            })\r\n            .subscribe({\r\n                next: (data) => {\r\n                    this.handleLtiLaunchSuccess(data);\r\n                },\r\n                error: (error) => {\r\n                    if (error.status === 401) {\r\n                        this.authenticateUserThenRedirect(error);\r\n                    } else {\r\n                        this.handleLtiLaunchError();\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    authenticateUserThenRedirect(error: any): void {\r\n        const loginName = error.headers.get('ltiSuccessLoginRequired');\r\n        this.accountService.identity().then((user) => {\r\n            if (user) {\r\n                this.redirectUserToTargetLink(error);\r\n            } else {\r\n                if (loginName) {\r\n                    this.accountService.setPrefilledUsername(loginName);\r\n                }\r\n                this.redirectUserToLoginThenTargetLink(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    redirectUserToTargetLink(data: any): void {\r\n        const ltiIdToken = data.error['ltiIdToken'];\r\n        const clientRegistrationId = data.error['clientRegistrationId'];\r\n\r\n        this.storeLtiSessionData(ltiIdToken, clientRegistrationId);\r\n\r\n        // Redirect to target link since the user is already logged in\r\n        this.replaceWindowLocationWrapper(data.error['targetLinkUri'].toString());\r\n    }\r\n\r\n    redirectUserToLoginThenTargetLink(error: any): void {\r\n        // Redirect the user to the login page\r\n        this.router.navigate(['/']).then(() => {\r\n            // After navigating to the login page, set up a listener for when the user logs in\r\n            this.accountService.getAuthenticationState().subscribe((user) => {\r\n                if (user) {\r\n                    this.redirectUserToTargetLink(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    handleLtiLaunchSuccess(data: LtiLaunchResponse): void {\r\n        const targetLinkUri = data.targetLinkUri;\r\n        const ltiIdToken = data.ltiIdToken;\r\n        const clientRegistrationId = data.clientRegistrationId;\r\n\r\n        window.sessionStorage.removeItem('state');\r\n        this.storeLtiSessionData(ltiIdToken, clientRegistrationId);\r\n\r\n        if (targetLinkUri) {\r\n            this.replaceWindowLocationWrapper(targetLinkUri);\r\n        } else {\r\n            this.isLaunching = false;\r\n            captureException('No LTI targetLinkUri received for a successful launch');\r\n        }\r\n    }\r\n\r\n    handleLtiLaunchError(): void {\r\n        window.sessionStorage.removeItem('state');\r\n        this.isLaunching = false;\r\n    }\r\n\r\n    storeLtiSessionData(ltiIdToken: string, clientRegistrationId: string): void {\r\n        if (!ltiIdToken) {\r\n            captureException(new Error('LTI ID token required to store session data.'));\r\n            return;\r\n        }\r\n\r\n        if (!clientRegistrationId) {\r\n            captureException(new Error('LTI client registration ID required to store session data.'));\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.sessionStorageService.store('ltiIdToken', ltiIdToken);\r\n            this.sessionStorageService.store('clientRegistrationId', clientRegistrationId);\r\n        } catch (error) {\r\n            captureException('Failed to store session data: ' + error);\r\n        }\r\n    }\r\n\r\n    replaceWindowLocationWrapper(url: string): void {\r\n        this.ltiService.setShownViaLti(true);\r\n        this.themeService.applyThemePreference(Theme.LIGHT);\r\n        let path;\r\n        if (url === '/lti/select-course') {\r\n            path = url;\r\n        } else {\r\n            path = new URL(url).pathname;\r\n        }\r\n\r\n        this.router.navigate([path], { replaceUrl: true });\r\n    }\r\n}\r\n", "<h1 [hidden]=\"!isLaunching\" jhiTranslate=\"artemisApp.lti13.launch.launching\"></h1>\r\n<h2 [hidden]=\"isLaunching\" jhiTranslate=\"artemisApp.lti13.launch.launchFailed\"></h2>\r\n"],
  "mappings": "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",
  "names": ["Lti13ExerciseLaunchComponent", "route", "inject", "ActivatedRoute", "http", "HttpClient", "accountService", "AccountService", "router", "Router", "sessionStorageService", "SessionStorageService", "ltiService", "LtiService", "themeService", "ThemeService", "isLaunching", "constructor", "ngOnInit", "sendRequest", "state", "snapshot", "queryParamMap", "get", "idToken", "captureException", "requestBody", "HttpParams", "set", "post", "toString", "headers", "HttpHeaders", "subscribe", "next", "data", "handleLtiLaunchSuccess", "error", "status", "authenticateUserThenRedirect", "handleLtiLaunchError", "loginName", "identity", "then", "user", "redirectUserToTargetLink", "setPrefilledUsername", "redirectUserToLoginThenTargetLink", "ltiIdToken", "clientRegistrationId", "storeLtiSessionData", "replaceWindowLocationWrapper", "navigate", "getAuthenticationState", "targetLinkUri", "window", "sessionStorage", "removeItem", "Error", "store", "url", "setShownViaLti", "applyThemePreference", "Theme", "LIGHT", "path", "URL", "pathname", "replaceUrl", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275property", "\u0275\u0275advance", "TranslateDirective", "encapsulation"]
}
