{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/monaco-editor/model/actions/task.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/test-case.action.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.model.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.service.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/analysis/task-count-warning/task-count-warning.component.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/analysis/task-count-warning/task-count-warning.component.html", "src/main/webapp/app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.component.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.component.html", "src/main/webapp/app/shared/monaco-editor/model/actions/artemis-intelligence/consistency-check.action.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/programming-exercise-editable-instruction.component.ts", "src/main/webapp/app/exercises/programming/manage/instructions-editor/programming-exercise-editable-instruction.component.html"],
  "sourcesContent": ["import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { escapeStringForUseInRegex } from 'app/shared/util/global.utils';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\n/**\r\n * Action to insert a task into the editor. They follow the format [task][Task Short Description](testCaseName).\r\n */\r\nexport class TaskAction extends TextEditorDomainAction {\r\n    static readonly ID = 'task.action';\r\n    static readonly TEXT = '[Task Short Description](testCaseName)\\n';\r\n    static readonly IDENTIFIER = '[task]';\r\n    static readonly GLOBAL_TASK_REGEX = new RegExp(`${escapeStringForUseInRegex(TaskAction.IDENTIFIER)}(.*)`, 'g');\r\n\r\n    constructor() {\r\n        super(TaskAction.ID, 'artemisApp.programmingExercise.problemStatement.taskCommand', undefined, undefined);\r\n    }\r\n\r\n    /**\r\n     * Inserts, at the current selection, the markdown task.\r\n     * @param editor The editor in which to insert the task.\r\n     */\r\n    run(editor: TextEditor): void {\r\n        this.replaceTextAtCurrentSelection(editor, `${this.getOpeningIdentifier()}${TaskAction.TEXT}`);\r\n        editor.focus();\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return TaskAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TranslateService } from '@ngx-translate/core';\r\nimport { DomainActionWithOptionsArguments, TextEditorDomainActionWithOptions } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action-with-options.model';\r\nimport { Disposable } from 'app/shared/monaco-editor/model/actions/monaco-editor.util';\r\nimport { ValueItem } from 'app/shared/markdown-editor/value-item.model';\r\nimport { TextEditor } from './adapter/text-editor.interface';\r\nimport { TextEditorRange } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-range.model';\r\nimport { TextEditorCompletionItem, TextEditorCompletionItemKind } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-completion-item.model';\r\n\r\n/**\r\n * Action to insert a test case into the editor. It also registers a completion item provider offers all possible test cases as completion items to the user.\r\n */\r\nexport class TestCaseAction extends TextEditorDomainActionWithOptions {\r\n    disposableCompletionProvider?: Disposable;\r\n\r\n    static readonly ID = 'test-case.action';\r\n    static readonly DEFAULT_INSERT_TEXT = 'testCaseName()';\r\n\r\n    constructor() {\r\n        super(TestCaseAction.ID, 'artemisApp.programmingExercise.problemStatement.testCaseCommand', undefined, undefined);\r\n    }\r\n\r\n    /**\r\n     * Registers the action with the given editor and sets up the completion provider that offers all possible test cases to the user as they type.\r\n     * @param editor The editor to register the action in.\r\n     * @param translateService The translation service to use for translating the action label.\r\n     * @throws error If the action is already registered with an editor or no model is attached to the editor.\r\n     */\r\n    register(editor: TextEditor, translateService: TranslateService) {\r\n        super.register(editor, translateService);\r\n        this.disposableCompletionProvider = this.registerCompletionProviderForCurrentModel<ValueItem>(\r\n            editor,\r\n            () => Promise.resolve(this.values),\r\n            (item: ValueItem, range: TextEditorRange) => new TextEditorCompletionItem(item.value, 'Test', item.value, TextEditorCompletionItemKind.Default, range),\r\n        );\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n        this.disposableCompletionProvider?.dispose();\r\n    }\r\n\r\n    /**\r\n     * Executes the action in the current editor with the given arguments (selected item).\r\n     * @param args\r\n     */\r\n    executeInCurrentEditor(args?: DomainActionWithOptionsArguments): void {\r\n        super.executeInCurrentEditor(args);\r\n    }\r\n\r\n    run(editor: TextEditor, args?: DomainActionWithOptionsArguments) {\r\n        this.replaceTextAtCurrentSelection(editor, args?.selectedItem?.value ?? TestCaseAction.DEFAULT_INSERT_TEXT);\r\n        editor.focus();\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return '(';\r\n    }\r\n}\r\n", "export type ProblemStatementAnalysis = Map<\r\n    number,\r\n    {\r\n        lineNumber: number;\r\n        invalidTestCases?: string[];\r\n        repeatedTestCases?: string[];\r\n    }\r\n>;\r\n\r\nexport enum ProblemStatementIssue {\r\n    INVALID_TEST_CASES = 'invalidTestCases',\r\n    REPEATED_TEST_CASES = 'repeatedTestCases',\r\n}\r\n\r\n// [line number, issues, issue type]\r\nexport type AnalysisItem = [number, string[], ProblemStatementIssue];\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { uniq } from 'lodash-es';\r\nimport { RegExpLineNumberMatchArray, matchRegexWithLineNumbers } from 'app/shared/util/global.utils';\r\nimport {\r\n    AnalysisItem,\r\n    ProblemStatementAnalysis,\r\n    ProblemStatementIssue,\r\n} from 'app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.model';\r\n\r\nconst TEST_CASE_REGEX = /\\[[^[\\]]+]\\(((?:[^(),]+(?:\\([^()]*\\)[^(),]*)?(?:,[^(),]+(?:\\([^()]*\\)[^(),]*)?)*)?)\\)/;\r\nconst INVALID_TEST_CASE_TRANSLATION = 'artemisApp.programmingExercise.testCaseAnalysis.invalidTestCase';\r\nconst REPEATED_TEST_CASE_TRANSLATION = 'artemisApp.programmingExercise.testCaseAnalysis.repeatedTestCase';\r\n\r\n/**\r\n * Analyzes the problem statement of a programming-exercise and provides information support concerning potential issues.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExerciseInstructionAnalysisService {\r\n    private translateService = inject(TranslateService);\r\n\r\n    /**\r\n     * Given a programming exercise's problem statement, analyze the test cases contained (or not contained!) in it.\r\n     * Will give out a mixed object that contains singular analysis for test cases and an accumulated analysis object.\r\n     *\r\n     * @param problemStatement  multiline string.\r\n     * @param taskRegex         identifies tasks in a problem statement.\r\n     * @param exerciseTestCases used to check if a test case is valid / missing.\r\n     */\r\n    public analyzeProblemStatement = (problemStatement: string, taskRegex: RegExp, exerciseTestCases: string[]) => {\r\n        // Look for task regex matches in the problem statement including their line numbers.\r\n        const tasksFromProblemStatement = matchRegexWithLineNumbers(problemStatement, taskRegex);\r\n\r\n        const { invalidTestCases, missingTestCases, repeatedTestCases, invalidTestCaseAnalysis } = this.analyzeTestCases(tasksFromProblemStatement, exerciseTestCases);\r\n\r\n        const completeAnalysis: ProblemStatementAnalysis = this.mergeAnalysis(invalidTestCaseAnalysis);\r\n        return { invalidTestCases, missingTestCases, repeatedTestCases, completeAnalysis, numOfTasks: tasksFromProblemStatement.length };\r\n    };\r\n\r\n    /**\r\n     * Analyze the test cases for the following criteria:\r\n     * - Are test cases in the problem statement that don't exist for the exercise?\r\n     * - Do test cases exist for this exercise that are not part of the problem statement?\r\n     * - Are any test cases in the problem statement repeated?\r\n     *\r\n     * Will also set the invalidTestCases & missingTestCases & repeatedTestCases attributes of the component.\r\n     *\r\n     * @param tasksFromProblemStatement to analyze.\r\n     * @param exerciseTestCases to double check the test cases found in the problem statement.\r\n     */\r\n    private analyzeTestCases = (tasksFromProblemStatement: RegExpLineNumberMatchArray, exerciseTestCases: string[]) => {\r\n        // Extract the testCase list from the task matches.\r\n        const testCasesInMarkdown = this.extractRegexFromTasks(tasksFromProblemStatement, TEST_CASE_REGEX);\r\n        // Look for test cases that are not part of the test repository. Could, e.g., be typos.\r\n        const invalidTestCaseAnalysis = testCasesInMarkdown\r\n            .map(\r\n                ([lineNumber, testCases]) =>\r\n                    [\r\n                        lineNumber,\r\n                        uniq(testCases.filter((testCase) => !exerciseTestCases.map((exTestcase) => exTestcase.toLowerCase()).includes(testCase.toLowerCase()))),\r\n                        ProblemStatementIssue.INVALID_TEST_CASES,\r\n                    ] as AnalysisItem,\r\n            )\r\n            .filter(([, testCases]) => testCases.length);\r\n        // Look for test cases that are part of the test repository but not in the problem statement. Probably forgotten to insert.\r\n        const missingTestCases = exerciseTestCases.filter(\r\n            (testCase) => !testCasesInMarkdown.some(([, foundTestCases]) => foundTestCases.map((foundTestCase) => foundTestCase.toLowerCase()).includes(testCase.toLowerCase())),\r\n        );\r\n\r\n        const invalidTestCases = invalidTestCaseAnalysis.flatMap(([, testCases]) => testCases);\r\n\r\n        const testCaseOccurrences = testCasesInMarkdown.reduce((acc, [lineNumber, testCases]) => {\r\n            testCases.forEach((testCase) => {\r\n                acc.set(testCase, (acc.get(testCase) || []).concat(lineNumber));\r\n            });\r\n            return acc;\r\n        }, new Map<string, number[]>());\r\n\r\n        const repeatedTestCaseAnalysis = [...testCaseOccurrences.entries()]\r\n            .filter(([, lineNumbers]) => lineNumbers.length > 1)\r\n            .flatMap(([testCase, lineNumbers]) => uniq(lineNumbers).map((lineNumber) => [lineNumber, [testCase], ProblemStatementIssue.REPEATED_TEST_CASES] as AnalysisItem));\r\n\r\n        const repeatedTestCases = uniq(repeatedTestCaseAnalysis.flatMap(([, testCases]) => testCases));\r\n\r\n        invalidTestCaseAnalysis.push(...repeatedTestCaseAnalysis);\r\n\r\n        return { missingTestCases, invalidTestCases, repeatedTestCases, invalidTestCaseAnalysis };\r\n    };\r\n\r\n    /**\r\n     * Merges multiple AnalyseItem[] into one accumulated ProblemStatementAnalysis.\r\n     *\r\n     * @param analysis arbitrary number of analysis objects to be merged into one.\r\n     */\r\n    private mergeAnalysis = (...analysis: Array<AnalysisItem[]>): ProblemStatementAnalysis => {\r\n        const reducer = (acc: ProblemStatementAnalysis, [lineNumber, values, issueType]: AnalysisItem): ProblemStatementAnalysis => {\r\n            const lineNumberValues = acc.get(lineNumber);\r\n            const issueValues = lineNumberValues?.[issueType] ?? [];\r\n            acc.set(lineNumber, { lineNumber, ...lineNumberValues, [issueType]: [...issueValues, ...values] });\r\n            return acc;\r\n        };\r\n\r\n        return analysis\r\n            .flat()\r\n            .map(([lineNumber, values, issueType]: AnalysisItem) => [\r\n                lineNumber,\r\n                values.map((id) => this.translateService.instant(this.getTranslationByIssueType(issueType), { id })),\r\n                issueType,\r\n            ])\r\n            .reduce(reducer, new Map());\r\n    };\r\n\r\n    /**\r\n     * Matches the issueType to a translation. A given translation should have {{id}} as a parameter.\r\n     *\r\n     * @param issueType for which to retrieve the fitting translation.\r\n     */\r\n    private getTranslationByIssueType = (issueType: ProblemStatementIssue): string => {\r\n        switch (issueType) {\r\n            case ProblemStatementIssue.INVALID_TEST_CASES:\r\n                return INVALID_TEST_CASE_TRANSLATION;\r\n            case ProblemStatementIssue.REPEATED_TEST_CASES:\r\n                return REPEATED_TEST_CASE_TRANSLATION;\r\n        }\r\n        // no default value, please add a new translation when adding new issue types\r\n    };\r\n\r\n    /**\r\n     * Extracts the given regex from the task.\r\n     * Value will be null if no match is found!\r\n     *\r\n     * @param tasks that contain the given regex.\r\n     * @param regex to search for in the tasks.\r\n     */\r\n    private extractRegexFromTasks(tasks: [number, string][], regex: RegExp): [number, string[]][] {\r\n        const cleanMatches = (matches: string[]) => matches.flat().filter(Boolean);\r\n\r\n        return tasks\r\n            .filter(([, task]) => !!task)\r\n            .map(([lineNumber, task]) => {\r\n                const extractedValue = task.match(regex);\r\n                return extractedValue && extractedValue.length > 1 ? [lineNumber, extractedValue[1]] : [lineNumber, undefined];\r\n            })\r\n            .filter(([, testCases]) => !!testCases)\r\n            .map(([lineNumber, match]: [number, string]) => {\r\n                const cleanedMatches = cleanMatches(match!.split(/,(?![^(]*?\\))/).map((m: string) => m.trim()));\r\n                return [lineNumber, cleanedMatches];\r\n            }) as [number, string[]][];\r\n    }\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { faCheckCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-task-count-warning',\r\n    templateUrl: './task-count-warning.component.html',\r\n    imports: [FaIconComponent, NgbTooltip, TranslateDirective],\r\n})\r\nexport class TaskCountWarningComponent {\r\n    readonly faExclamationTriangle = faExclamationTriangle;\r\n    readonly faCheckCircle = faCheckCircle;\r\n    @Input() advisedMaxNumOfTasks = 15;\r\n    @Input() numOfTasks: number;\r\n}\r\n", "@if (numOfTasks > advisedMaxNumOfTasks) {\r\n    <div id=\"instruction_analysis_num-of-tasks-issues\" class=\"editable-instruction-container__status__item\">\r\n        <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning me-1\" [ngbTooltip]=\"tasksTooltipContent\" />\r\n        <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.tasksAnalysis.issues\"></span>\r\n    </div>\r\n} @else {\r\n    <div id=\"instruction_analysis_num-of-tasks-ok\" class=\"editable-instruction-container__status__item\">\r\n        <fa-icon [icon]=\"faCheckCircle\" class=\"text-success me-1\" />\r\n        <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.tasksAnalysis.ok\"></span>\r\n    </div>\r\n}\r\n<ng-template #tasksTooltipContent>\r\n    <div class=\"text-start w-100\">\r\n        @if (numOfTasks > advisedMaxNumOfTasks) {\r\n            <div class=\"text-start\">\r\n                <span jhiTranslate=\"artemisApp.programmingExercise.tasksAnalysis.numOfTasks\" [translateValues]=\"{ number: numOfTasks, limit: advisedMaxNumOfTasks }\"></span>\r\n            </div>\r\n        }\r\n    </div>\r\n</ng-template>\r\n", "import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, inject } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, map, tap } from 'rxjs/operators';\r\nimport { ProgrammingExerciseInstructionAnalysisService } from 'app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.service';\r\nimport { ProblemStatementAnalysis } from 'app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.model';\r\nimport { faCheckCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { TaskCountWarningComponent } from './task-count-warning/task-count-warning.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instruction-instructor-analysis',\r\n    templateUrl: './programming-exercise-instruction-analysis.component.html',\r\n    imports: [FaIconComponent, NgbTooltip, TranslateDirective, TaskCountWarningComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ProgrammingExerciseInstructionAnalysisComponent implements OnInit, OnChanges, OnDestroy {\r\n    private analysisService = inject(ProgrammingExerciseInstructionAnalysisService);\r\n\r\n    @Input() exerciseTestCases: string[];\r\n    @Input() problemStatement: string;\r\n    @Input() taskRegex: RegExp;\r\n\r\n    @Output() problemStatementAnalysis = new EventEmitter<ProblemStatementAnalysis>();\r\n    delayedAnalysisSubject = new Subject<void>();\r\n    analysisSubscription: Subscription;\r\n\r\n    invalidTestCases: string[] = [];\r\n    missingTestCases: string[] = [];\r\n    repeatedTestCases: string[] = [];\r\n    numOfTasks = 0;\r\n\r\n    // Icons\r\n    faCheckCircle = faCheckCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    ngOnInit(): void {\r\n        this.analysisSubscription = this.delayedAnalysisSubject\r\n            .pipe(\r\n                debounceTime(500),\r\n                map(() => {\r\n                    const { completeAnalysis, missingTestCases, invalidTestCases, repeatedTestCases, numOfTasks } = this.analysisService.analyzeProblemStatement(\r\n                        this.problemStatement,\r\n                        this.taskRegex,\r\n                        this.exerciseTestCases,\r\n                    );\r\n                    this.missingTestCases = missingTestCases;\r\n                    this.invalidTestCases = invalidTestCases;\r\n                    this.repeatedTestCases = repeatedTestCases;\r\n                    this.numOfTasks = numOfTasks;\r\n                    return completeAnalysis;\r\n                }),\r\n                tap((analysis: ProblemStatementAnalysis) => this.emitAnalysis(analysis)),\r\n            )\r\n            .subscribe();\r\n        this.analyzeTasks();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.problemStatement || changes.exerciseTestCases) {\r\n            this.analyzeTasks();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.analysisSubscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Checks if test cases are used in the right way in the problem statement.\r\n     * This includes three possible errors:\r\n     * - having invalid test cases (that are not part of the test files)\r\n     * - not using existing test cases in the markup\r\n     * - having repeated test cases\r\n     * The method makes sure to filter out duplicates in the test case list.\r\n     */\r\n    analyzeTasks() {\r\n        if (this.exerciseTestCases && this.problemStatement && this.taskRegex) {\r\n            this.delayedAnalysisSubject.next();\r\n        }\r\n    }\r\n\r\n    private emitAnalysis(analysis: ProblemStatementAnalysis) {\r\n        this.problemStatementAnalysis.emit(analysis);\r\n    }\r\n}\r\n", "<div class=\"editable-instruction-container__status__container\">\r\n    @if (invalidTestCases.length + missingTestCases.length + repeatedTestCases.length > 0) {\r\n        <div id=\"instruction_analysis_test-case-issues\" class=\"editable-instruction-container__status__item\">\r\n            <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning me-1\" [ngbTooltip]=\"testCasesTooltipContent\" />\r\n            <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.testCaseAnalysis.issues\"></span>\r\n        </div>\r\n    } @else {\r\n        <div id=\"instruction_analysis_test-case-ok\" class=\"editable-instruction-container__status__item\">\r\n            <fa-icon [icon]=\"faCheckCircle\" class=\"text-success me-1\" />\r\n            <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.testCaseAnalysis.ok\"></span>\r\n        </div>\r\n    }\r\n    <ng-template #testCasesTooltipContent>\r\n        <div class=\"text-start w-100\">\r\n            @if (invalidTestCases.length) {\r\n                <div>\r\n                    <span [innerHTML]=\"'artemisApp.programmingExercise.testCaseAnalysis.invalidTestCases' | artemisTranslate: { number: invalidTestCases.length }\"\r\n                        >There are {{ invalidTestCases.length }} test cases that are part of the problem statement but can't be found in your test repository:</span\r\n                    >\r\n                    <ul>\r\n                        @for (test of invalidTestCases; track test) {\r\n                            <li>{{ test }}</li>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            }\r\n            @if (missingTestCases.length) {\r\n                <div class=\"text-start\">\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.testCaseAnalysis.missingTestCases\" [translateValues]=\"{ number: missingTestCases.length }\"></span>\r\n                    <ul>\r\n                        @for (test of missingTestCases; track test) {\r\n                            <li>{{ test }}</li>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            }\r\n\r\n            @if (repeatedTestCases.length) {\r\n                <div class=\"text-start\">\r\n                    <span jhiTranslate=\"artemisApp.programmingExercise.testCaseAnalysis.repeatedTestCases\" [translateValues]=\"{ number: repeatedTestCases.length }\"></span>\r\n                    <ul>\r\n                        @for (test of repeatedTestCases; track test) {\r\n                            <li>{{ test }}</li>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    </ng-template>\r\n    <jhi-task-count-warning [numOfTasks]=\"numOfTasks\" />\r\n</div>\r\n", "import { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\nimport { ArtemisIntelligenceService } from 'app/shared/monaco-editor/model/actions/artemis-intelligence/artemis-intelligence.service';\r\nimport { WritableSignal } from '@angular/core';\r\n\r\n/**\r\n * Artemis Intelligence action for consistency checking exercises\r\n */\r\nexport class ConsistencyCheckAction extends TextEditorAction {\r\n    static readonly ID = 'artemisIntelligence.consistencyCheck.action';\r\n\r\n    element?: HTMLElement;\r\n\r\n    constructor(\r\n        private readonly artemisIntelligenceService: ArtemisIntelligenceService,\r\n        private readonly exerciseId: number,\r\n        private readonly resultSignal: WritableSignal<string>,\r\n    ) {\r\n        super(ConsistencyCheckAction.ID, 'artemisApp.markdownEditor.artemisIntelligence.commands.consistencyCheck');\r\n    }\r\n\r\n    /**\r\n     * Runs the consistency check on the exercise.\r\n     *\r\n     * @param editor The editor in which to rewrite the markdown.\r\n     * @param artemisIntelligenceService The service to use for rewriting the markdown.\r\n     * @param exerciseId The id of the exercise to check.\r\n     * @param resultSignal The signal to write the result of the consistency check to.\r\n     */\r\n    run(editor: TextEditor): void {\r\n        this.consistencyCheck(editor, this.artemisIntelligenceService, this.exerciseId, this.resultSignal);\r\n    }\r\n}\r\n", "import {\r\n    AfterViewInit,\r\n    Component,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    computed,\r\n    inject,\r\n    signal,\r\n} from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ProgrammingExerciseInstructionComponent } from 'app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component';\r\nimport { Observable, Subject, Subscription, of, throwError } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { ProgrammingExerciseTestCase } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ProblemStatementAnalysis } from 'app/exercises/programming/manage/instructions-editor/analysis/programming-exercise-instruction-analysis.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { hasExerciseChanged } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { ProgrammingExerciseGradingService } from 'app/exercises/programming/manage/services/programming-exercise-grading.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { faCheckCircle, faCircleNotch, faExclamationTriangle, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { MarkdownEditorHeight, MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { Annotation } from 'app/exercises/programming/shared/code-editor/monaco/code-editor-monaco.component';\r\nimport { FormulaAction } from 'app/shared/monaco-editor/model/actions/formula.action';\r\nimport { TaskAction } from 'app/shared/monaco-editor/model/actions/task.action';\r\nimport { TestCaseAction } from 'app/shared/monaco-editor/model/actions/test-case.action';\r\nimport { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ProgrammingExerciseInstructionAnalysisComponent } from './analysis/programming-exercise-instruction-analysis.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { RewriteAction } from 'app/shared/monaco-editor/model/actions/artemis-intelligence/rewrite.action';\r\nimport { PROFILE_IRIS } from 'app/app.constants';\r\nimport RewritingVariant from 'app/shared/monaco-editor/model/actions/artemis-intelligence/rewriting-variant';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { ArtemisIntelligenceService } from 'app/shared/monaco-editor/model/actions/artemis-intelligence/artemis-intelligence.service';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConsistencyCheckAction } from 'app/shared/monaco-editor/model/actions/artemis-intelligence/consistency-check.action';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-editable-instructions',\r\n    templateUrl: './programming-exercise-editable-instruction.component.html',\r\n    styleUrls: ['./programming-exercise-editable-instruction.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        MarkdownEditorMonacoComponent,\r\n        ProgrammingExerciseInstructionComponent,\r\n        NgClass,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        ProgrammingExerciseInstructionAnalysisComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseEditableInstructionComponent implements AfterViewInit, OnChanges, OnDestroy, OnInit {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private alertService = inject(AlertService);\r\n    private programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private testCaseService = inject(ProgrammingExerciseGradingService);\r\n    private profileService = inject(ProfileService);\r\n    private artemisIntelligenceService = inject(ArtemisIntelligenceService);\r\n\r\n    participationValue: Participation;\r\n    programmingExercise: ProgrammingExercise;\r\n\r\n    exerciseTestCases: string[] = [];\r\n\r\n    taskRegex = TaskAction.GLOBAL_TASK_REGEX;\r\n    testCaseAction = new TestCaseAction();\r\n    domainActions: TextEditorDomainAction[] = [new FormulaAction(), new TaskAction(), this.testCaseAction];\r\n\r\n    courseId: number;\r\n    exerciseId: number;\r\n    irisEnabled = toSignal(this.profileService.getProfileInfo().pipe(map((profileInfo) => profileInfo.activeProfiles.includes(PROFILE_IRIS))), { initialValue: false });\r\n    artemisIntelligenceActions = computed(() =>\r\n        this.irisEnabled()\r\n            ? [\r\n                  new RewriteAction(this.artemisIntelligenceService, RewritingVariant.PROBLEM_STATEMENT, this.courseId),\r\n                  ...(this.exerciseId ? [new ConsistencyCheckAction(this.artemisIntelligenceService, this.exerciseId, this.renderedConsistencyCheckResultMarkdown)] : []),\r\n              ]\r\n            : [],\r\n    );\r\n\r\n    savingInstructions = false;\r\n    unsavedChangesValue = false;\r\n\r\n    renderedConsistencyCheckResultMarkdown = signal<string>('');\r\n    showConsistencyCheck = computed(() => !!this.renderedConsistencyCheckResultMarkdown());\r\n\r\n    testCaseSubscription: Subscription;\r\n    forceRenderSubscription: Subscription;\r\n\r\n    @ViewChild(MarkdownEditorMonacoComponent, { static: false }) markdownEditorMonaco?: MarkdownEditorMonacoComponent;\r\n\r\n    @Input() showStatus = true;\r\n    // If the programming exercise is being created, some features have to be disabled (saving the problemStatement & querying test cases).\r\n    @Input() editMode = true;\r\n    @Input() enableResize = true;\r\n    @Input({ required: true }) initialEditorHeight: MarkdownEditorHeight | 'external';\r\n    @Input() showSaveButton = false;\r\n    @Input() templateParticipation: Participation;\r\n    @Input() forceRender: Observable<void>;\r\n    @Input()\r\n    get exercise() {\r\n        return this.programmingExercise;\r\n    }\r\n    @Input()\r\n    get participation() {\r\n        return this.participationValue;\r\n    }\r\n\r\n    @Output() participationChange = new EventEmitter<Participation>();\r\n    @Output() hasUnsavedChanges = new EventEmitter<boolean>();\r\n    @Output() exerciseChange = new EventEmitter<ProgrammingExercise>();\r\n    @Output() instructionChange = new EventEmitter<string>();\r\n    generateHtmlSubject: Subject<void> = new Subject<void>();\r\n\r\n    set participation(participation: Participation) {\r\n        this.participationValue = participation;\r\n        this.participationChange.emit(this.participationValue);\r\n    }\r\n\r\n    set exercise(exercise: ProgrammingExercise) {\r\n        if (this.programmingExercise && exercise.problemStatement !== this.programmingExercise.problemStatement) {\r\n            this.unsavedChanges = true;\r\n        }\r\n        this.programmingExercise = exercise;\r\n        this.exerciseChange.emit(this.programmingExercise);\r\n    }\r\n\r\n    set unsavedChanges(hasChanges: boolean) {\r\n        this.unsavedChangesValue = hasChanges;\r\n        if (hasChanges) {\r\n            this.hasUnsavedChanges.emit(hasChanges);\r\n        }\r\n    }\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faCheckCircle = faCheckCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faCircleNotch = faCircleNotch;\r\n\r\n    protected readonly MarkdownEditorHeight = MarkdownEditorHeight;\r\n\r\n    ngOnInit() {\r\n        this.courseId = Number(this.activatedRoute.snapshot.paramMap.get('courseId'));\r\n        this.exerciseId = Number(this.activatedRoute.snapshot.paramMap.get('exerciseId'));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (hasExerciseChanged(changes)) {\r\n            this.setupTestCaseSubscription();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.testCaseSubscription) {\r\n            this.testCaseSubscription.unsubscribe();\r\n        }\r\n        if (this.forceRenderSubscription) {\r\n            this.forceRenderSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // If forced to render, generate the instruction HTML.\r\n        if (this.forceRender) {\r\n            this.forceRenderSubscription = this.forceRender.subscribe(() => this.generateHtml());\r\n        }\r\n    }\r\n\r\n    /** Save the problem statement on the server.\r\n     * @param event\r\n     **/\r\n    saveInstructions(event: any) {\r\n        event.stopPropagation();\r\n        this.savingInstructions = true;\r\n        return this.programmingExerciseService\r\n            .updateProblemStatement(this.exercise.id!, this.exercise.problemStatement!)\r\n            .pipe(\r\n                tap(() => {\r\n                    this.unsavedChanges = false;\r\n                }),\r\n                catchError(() => {\r\n                    // TODO: move to programming exercise translations\r\n                    this.alertService.error(`artemisApp.editor.errors.problemStatementCouldNotBeUpdated`);\r\n                    return of(undefined);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.savingInstructions = false;\r\n            });\r\n    }\r\n\r\n    @HostListener('document:keydown.control.s', ['$event'])\r\n    saveOnControlAndS(event: KeyboardEvent) {\r\n        if (!navigator.userAgent.includes('Mac')) {\r\n            event.preventDefault();\r\n            this.saveInstructions(event);\r\n        }\r\n    }\r\n\r\n    @HostListener('document:keydown.meta.s', ['$event'])\r\n    saveOnCommandAndS(event: KeyboardEvent) {\r\n        if (navigator.userAgent.includes('Mac')) {\r\n            event.preventDefault();\r\n            this.saveInstructions(event);\r\n        }\r\n    }\r\n\r\n    updateProblemStatement(problemStatement: string) {\r\n        if (this.exercise.problemStatement !== problemStatement) {\r\n            this.exercise = { ...this.exercise, problemStatement };\r\n            this.unsavedChanges = true;\r\n        }\r\n        this.instructionChange.emit(problemStatement);\r\n    }\r\n\r\n    dismissConsistencyCheck() {\r\n        this.renderedConsistencyCheckResultMarkdown.set('');\r\n    }\r\n\r\n    /**\r\n     * Signal that the markdown should be rendered into html.\r\n     */\r\n    generateHtml() {\r\n        this.generateHtmlSubject.next();\r\n    }\r\n\r\n    private setupTestCaseSubscription() {\r\n        if (this.testCaseSubscription) {\r\n            this.testCaseSubscription.unsubscribe();\r\n        }\r\n\r\n        // Only set up a subscription for test cases if the exercise already exists.\r\n        if (this.editMode) {\r\n            this.testCaseSubscription = this.testCaseService\r\n                .subscribeForTestCases(this.exercise.id!)\r\n                .pipe(\r\n                    switchMap((testCases: ProgrammingExerciseTestCase[] | undefined) => {\r\n                        // If there are test cases, map them to their names, sort them and use them for the markdown editor.\r\n                        if (testCases) {\r\n                            const sortedTestCaseNames = testCases\r\n                                .filter((testCase) => testCase.active)\r\n                                .map((testCase) => testCase.testName!)\r\n                                .sort();\r\n                            return of(sortedTestCaseNames);\r\n                        } else if (this.exercise.templateParticipation) {\r\n                            // Legacy case: If there are no test cases, but a template participation, use its feedbacks for generating test names.\r\n                            return this.loadTestCasesFromTemplateParticipationResult(this.exercise.templateParticipation!.id!);\r\n                        }\r\n                        return of();\r\n                    }),\r\n                    tap((testCaseNames: string[]) => {\r\n                        this.exerciseTestCases = testCaseNames;\r\n                        const cases = this.exerciseTestCases.map((value) => ({ value, id: value }));\r\n                        this.testCaseAction.setValues(cases);\r\n                    }),\r\n                    catchError(() => of()),\r\n                )\r\n                .subscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate test case names from the feedback of the exercise's templateParticipation.\r\n     * This is the fallback for older programming exercises without test cases in the database.\r\n     * @param templateParticipationId\r\n     */\r\n    loadTestCasesFromTemplateParticipationResult = (templateParticipationId: number): Observable<Array<string | undefined>> => {\r\n        // Fallback for exercises that don't have test cases yet.\r\n        return this.programmingExerciseParticipationService.getLatestResultWithFeedback(templateParticipationId).pipe(\r\n            map((result) => (!result?.feedbacks ? throwError(() => new Error('no result available')) : result)),\r\n            // use the text (legacy case) or the name of the provided test case attribute\r\n            map(({ feedbacks }: Result) => feedbacks!.map((feedback) => feedback.text ?? feedback.testCase?.testName).sort()),\r\n            catchError(() => of([])),\r\n        );\r\n    };\r\n\r\n    /**\r\n     * On every update of the problem statement analysis, update the appropriate line numbers of the editor with the results of the analysis.\r\n     * Will show warning symbols for every item.\r\n     *\r\n     * @param analysis that contains the resulting issues of the problem statement.\r\n     */\r\n    onAnalysisUpdate = (analysis: ProblemStatementAnalysis) => {\r\n        const lineWarnings = this.mapAnalysisToWarnings(analysis);\r\n        this.markdownEditorMonaco?.monacoEditor?.setAnnotations(lineWarnings as Annotation[]);\r\n    };\r\n\r\n    private mapAnalysisToWarnings = (analysis: ProblemStatementAnalysis) => {\r\n        return Array.from(analysis.values()).flatMap(({ lineNumber, invalidTestCases, repeatedTestCases }) =>\r\n            this.mapIssuesToAnnotations(lineNumber, invalidTestCases, repeatedTestCases),\r\n        );\r\n    };\r\n\r\n    private mapIssuesToAnnotations = (lineNumber: number, invalidTestCases?: string[], repeatedTestCases?: string[]) => {\r\n        const mapIssues = (issues: string[]) => ({ row: lineNumber, column: 0, text: ' - ' + issues.join('\\n - '), type: 'warning' });\r\n\r\n        const annotations = [];\r\n        if (invalidTestCases) {\r\n            annotations.push(mapIssues(invalidTestCases));\r\n        }\r\n\r\n        if (repeatedTestCases) {\r\n            annotations.push(mapIssues(repeatedTestCases));\r\n        }\r\n\r\n        return annotations;\r\n    };\r\n}\r\n", "<div class=\"editable-instruction-container\">\r\n    <!-- The position of the markdown-editor in the html should not be changed, as it is used for resizing!-->\r\n    @if (exercise) {\r\n        <jhi-markdown-editor-monaco\r\n            class=\"overflow-hidden flex-grow-1\"\r\n            [domainActions]=\"domainActions\"\r\n            [artemisIntelligenceActions]=\"artemisIntelligenceActions()\"\r\n            [initialEditorHeight]=\"initialEditorHeight\"\r\n            [useDefaultMarkdownEditorOptions]=\"false\"\r\n            [enableResize]=\"enableResize\"\r\n            [markdown]=\"exercise.problemStatement\"\r\n            [showDefaultPreview]=\"false\"\r\n            (onPreviewSelect)=\"generateHtml()\"\r\n            (markdownChange)=\"updateProblemStatement($event)\"\r\n        >\r\n            <jhi-programming-exercise-instructions\r\n                id=\"previewMonaco\"\r\n                class=\"editable-instruction-container__instructions\"\r\n                [participation]=\"participation\"\r\n                [exercise]=\"exercise\"\r\n                [generateHtmlEvents]=\"generateHtmlSubject.asObservable()\"\r\n                [personalParticipation]=\"false\"\r\n            />\r\n        </jhi-markdown-editor-monaco>\r\n    }\r\n    @if (editMode) {\r\n        <button\r\n            id=\"save-instructions-button\"\r\n            [disabled]=\"savingInstructions || !unsavedChangesValue\"\r\n            (click)=\"saveInstructions($event)\"\r\n            class=\"btn editable-instruction-container__save\"\r\n            [ngClass]=\"savingInstructions || !unsavedChangesValue ? 'btn-light' : 'btn-primary'\"\r\n        >\r\n            @if (!savingInstructions) {\r\n                <fa-icon [icon]=\"faSave\" class=\"me-2\" />\r\n            }\r\n            @if (savingInstructions) {\r\n                <fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" class=\"me-2\" />\r\n            }\r\n            <span jhiTranslate=\"entity.action.save\"></span>\r\n        </button>\r\n    }\r\n    @if (showStatus) {\r\n        <div class=\"card-footer text-nowrap editable-instruction-container__status\">\r\n            <div class=\"instructions-status\">\r\n                @if (!unsavedChangesValue && !savingInstructions) {\r\n                    <div>\r\n                        <fa-icon [icon]=\"faCheckCircle\" class=\"text-success me-1\" ngbTooltip=\"{{ 'artemisApp.programmingExercise.editable.savedTooltip' | artemisTranslate }}\" />\r\n                        <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.editable.saved\"></span>\r\n                    </div>\r\n                }\r\n                @if (unsavedChangesValue && !savingInstructions) {\r\n                    <div>\r\n                        <fa-icon\r\n                            [icon]=\"faExclamationTriangle\"\r\n                            class=\"text-warning me-1\"\r\n                            ngbTooltip=\"{{ 'artemisApp.programmingExercise.editable.unsavedTooltip' | artemisTranslate }}\"\r\n                        />\r\n                        <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.editable.unsaved\"></span>\r\n                    </div>\r\n                }\r\n                @if (savingInstructions) {\r\n                    <div>\r\n                        <fa-icon [icon]=\"faCircleNotch\" class=\"me-1\" ngbTooltip=\"{{ 'artemisApp.programmingExercise.editable.savingTooltip' | artemisTranslate }}\" />\r\n                        <span class=\"text-info\" jhiTranslate=\"artemisApp.programmingExercise.editable.saving\"></span>\r\n                    </div>\r\n                }\r\n            </div>\r\n            @if (exercise?.id) {\r\n                <jhi-programming-exercise-instruction-instructor-analysis\r\n                    [exerciseTestCases]=\"exerciseTestCases\"\r\n                    [problemStatement]=\"exercise.problemStatement || ''\"\r\n                    [taskRegex]=\"taskRegex\"\r\n                    (problemStatementAnalysis)=\"onAnalysisUpdate($event)\"\r\n                    class=\"editable-instruction-container__status__testcase\"\r\n                />\r\n            }\r\n        </div>\r\n    }\r\n    @if (showConsistencyCheck()) {\r\n        <div class=\"alert alert-warning alert-dismissible text-start fade show mt-4\" role=\"alert\">\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"dismissConsistencyCheck()\" aria-label=\"Close\"></button>\r\n            <h4 class=\"alert-heading\" jhiTranslate=\"artemisApp.programmingExercise.artemisIntelligence.consistencyCheckAlert.title\"></h4>\r\n            <div [innerHtml]=\"renderedConsistencyCheckResultMarkdown()\"></div>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["TaskAction", "TextEditorDomainAction", "ID", "TEXT", "IDENTIFIER", "GLOBAL_TASK_REGEX", "RegExp", "escapeStringForUseInRegex", "constructor", "undefined", "run", "editor", "replaceTextAtCurrentSelection", "getOpeningIdentifier", "focus", "TestCaseAction", "TextEditorDomainActionWithOptions", "disposableCompletionProvider", "ID", "DEFAULT_INSERT_TEXT", "constructor", "undefined", "register", "editor", "translateService", "registerCompletionProviderForCurrentModel", "Promise", "resolve", "values", "item", "range", "TextEditorCompletionItem", "value", "TextEditorCompletionItemKind", "Default", "dispose", "executeInCurrentEditor", "args", "run", "replaceTextAtCurrentSelection", "selectedItem", "focus", "getOpeningIdentifier", "ProblemStatementIssue", "TEST_CASE_REGEX", "INVALID_TEST_CASE_TRANSLATION", "REPEATED_TEST_CASE_TRANSLATION", "ProgrammingExerciseInstructionAnalysisService", "translateService", "inject", "TranslateService", "analyzeProblemStatement", "problemStatement", "taskRegex", "exerciseTestCases", "tasksFromProblemStatement", "matchRegexWithLineNumbers", "invalidTestCases", "missingTestCases", "repeatedTestCases", "invalidTestCaseAnalysis", "analyzeTestCases", "completeAnalysis", "mergeAnalysis", "numOfTasks", "length", "testCasesInMarkdown", "extractRegexFromTasks", "map", "lineNumber", "testCases", "uniq", "filter", "testCase", "exTestcase", "toLowerCase", "includes", "ProblemStatementIssue", "INVALID_TEST_CASES", "some", "foundTestCases", "foundTestCase", "flatMap", "repeatedTestCaseAnalysis", "reduce", "acc", "forEach", "set", "get", "concat", "Map", "entries", "lineNumbers", "REPEATED_TEST_CASES", "push", "analysis", "reducer", "values", "issueType", "lineNumberValues", "issueValues", "__spreadProps", "__spreadValues", "flat", "id", "instant", "getTranslationByIssueType", "tasks", "regex", "cleanMatches", "matches", "Boolean", "task", "extractedValue", "match", "undefined", "cleanedMatches", "split", "m", "trim", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "tasksTooltipContent_r2", "faCheckCircle", "\u0275\u0275pureFunction2", "_c0", "numOfTasks", "advisedMaxNumOfTasks", "\u0275\u0275template", "TaskCountWarningComponent_ng_template_2_Conditional_3_Template", "\u0275\u0275conditional", "TaskCountWarningComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "TaskCountWarningComponent_Conditional_0_Template", "TaskCountWarningComponent_Conditional_1_Template", "TaskCountWarningComponent_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "FaIconComponent", "NgbTooltip", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "testCasesTooltipContent_r2", "faCheckCircle", "\u0275\u0275textInterpolate", "test_r3", "\u0275\u0275repeaterCreate", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Conditional_3_For_10_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "invalidTestCases", "length", "\u0275\u0275sanitizeHtml", "\u0275\u0275textInterpolate1", "\u0275\u0275repeater", "test_r4", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Conditional_4_For_8_Template", "missingTestCases", "test_r5", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Conditional_5_For_8_Template", "repeatedTestCases", "\u0275\u0275template", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Conditional_3_Template", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Conditional_4_Template", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Conditional_5_Template", "\u0275\u0275conditional", "ProgrammingExerciseInstructionAnalysisComponent", "analysisService", "inject", "ProgrammingExerciseInstructionAnalysisService", "exerciseTestCases", "problemStatement", "taskRegex", "problemStatementAnalysis", "EventEmitter", "delayedAnalysisSubject", "Subject", "analysisSubscription", "numOfTasks", "ngOnInit", "pipe", "debounceTime", "map", "completeAnalysis", "analyzeProblemStatement", "tap", "analysis", "emitAnalysis", "subscribe", "analyzeTasks", "ngOnChanges", "changes", "ngOnDestroy", "unsubscribe", "next", "emit", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseInstructionAnalysisComponent_Conditional_2_Template", "ProgrammingExerciseInstructionAnalysisComponent_Conditional_3_Template", "ProgrammingExerciseInstructionAnalysisComponent_ng_template_4_Template", "\u0275\u0275templateRefExtractor", "FaIconComponent", "NgbTooltip", "TranslateDirective", "TaskCountWarningComponent", "ArtemisTranslatePipe", "encapsulation", "ConsistencyCheckAction", "TextEditorAction", "artemisIntelligenceService", "exerciseId", "resultSignal", "ID", "element", "constructor", "run", "editor", "consistencyCheck", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "generateHtml", "$event", "updateProblemStatement", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "domainActions", "artemisIntelligenceActions", "initialEditorHeight", "enableResize", "exercise", "problemStatement", "participation", "generateHtmlSubject", "asObservable", "faSave", "faCircleNotch", "_r3", "saveInstructions", "\u0275\u0275template", "ProgrammingExerciseEditableInstructionComponent_Conditional_4_Conditional_3_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_4_Conditional_4_Template", "savingInstructions", "unsavedChangesValue", "\u0275\u0275conditional", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faCheckCircle", "faExclamationTriangle", "_r4", "onAnalysisUpdate", "exerciseTestCases", "taskRegex", "ProgrammingExerciseEditableInstructionComponent_Conditional_5_Conditional_5_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_5_Conditional_6_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_5_Conditional_7_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_5_Conditional_9_Template", "id", "_r5", "dismissConsistencyCheck", "renderedConsistencyCheckResultMarkdown", "\u0275\u0275sanitizeHtml", "ProgrammingExerciseEditableInstructionComponent", "activatedRoute", "inject", "ActivatedRoute", "programmingExerciseService", "ProgrammingExerciseService", "alertService", "AlertService", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "testCaseService", "ProgrammingExerciseGradingService", "profileService", "ProfileService", "artemisIntelligenceService", "ArtemisIntelligenceService", "participationValue", "programmingExercise", "TaskAction", "GLOBAL_TASK_REGEX", "testCaseAction", "TestCaseAction", "FormulaAction", "courseId", "exerciseId", "irisEnabled", "toSignal", "getProfileInfo", "pipe", "map", "profileInfo", "activeProfiles", "includes", "PROFILE_IRIS", "initialValue", "computed", "RewriteAction", "RewritingVariant", "PROBLEM_STATEMENT", "ConsistencyCheckAction", "signal", "showConsistencyCheck", "testCaseSubscription", "forceRenderSubscription", "markdownEditorMonaco", "showStatus", "editMode", "showSaveButton", "templateParticipation", "forceRender", "participationChange", "EventEmitter", "hasUnsavedChanges", "exerciseChange", "instructionChange", "Subject", "emit", "unsavedChanges", "hasChanges", "MarkdownEditorHeight", "ngOnInit", "Number", "snapshot", "paramMap", "get", "ngOnChanges", "changes", "hasExerciseChanged", "setupTestCaseSubscription", "ngOnDestroy", "unsubscribe", "ngAfterViewInit", "subscribe", "event", "stopPropagation", "tap", "catchError", "error", "of", "undefined", "saveOnControlAndS", "navigator", "userAgent", "preventDefault", "saveOnCommandAndS", "__spreadProps", "__spreadValues", "set", "next", "subscribeForTestCases", "switchMap", "testCases", "sortedTestCaseNames", "filter", "testCase", "active", "testName", "sort", "loadTestCasesFromTemplateParticipationResult", "testCaseNames", "cases", "value", "setValues", "templateParticipationId", "getLatestResultWithFeedback", "result", "feedbacks", "throwError", "Error", "feedback", "text", "analysis", "lineWarnings", "mapAnalysisToWarnings", "monacoEditor", "setAnnotations", "Array", "from", "values", "flatMap", "lineNumber", "invalidTestCases", "repeatedTestCases", "mapIssuesToAnnotations", "mapIssues", "issues", "row", "column", "join", "type", "annotations", "push", "selectors", "viewQuery", "rf", "ctx", "MarkdownEditorMonacoComponent", "\u0275\u0275resolveDocument", "ProgrammingExerciseEditableInstructionComponent_Conditional_3_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_4_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_5_Template", "ProgrammingExerciseEditableInstructionComponent_Conditional_6_Template", "ProgrammingExerciseInstructionComponent", "NgClass", "FaIconComponent", "TranslateDirective", "NgbTooltip", "ProgrammingExerciseInstructionAnalysisComponent", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
