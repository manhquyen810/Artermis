{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/table/table-editable-field.component.ts", "src/main/webapp/app/shared/table/table-editable-field.component.html", "src/main/webapp/app/exercises/shared/submission-policy/submission-policy-update.component.ts"],
  "sourcesContent": ["import { Component, Input, ViewChild } from '@angular/core';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { RemoveKeysPipe } from 'app/shared/pipes/remove-keys.pipe';\r\n\r\n/**\r\n * An inline editing field to use for tables.\r\n */\r\n@Component({\r\n    selector: 'jhi-table-editable-field',\r\n    styles: ['.table-editable-field {display: flex; align-items: center}', '.table-editable-field__input {flex: 2 1 auto; margin-left: 0.25rem}'],\r\n    templateUrl: './table-editable-field.component.html',\r\n    imports: [FormsModule, TranslateDirective, KeyValuePipe, RemoveKeysPipe],\r\n})\r\nexport class TableEditableFieldComponent {\r\n    @ViewChild('editingInput') editingInput: NgModel;\r\n\r\n    @Input() id: string;\r\n    @Input() pattern?: RegExp;\r\n    @Input() isRequired: boolean;\r\n    @Input() translationBase: string;\r\n\r\n    @Input() set value(value: any) {\r\n        this.inputValue = value;\r\n    }\r\n    @Input() onValueUpdate: (value: any) => any;\r\n\r\n    inputValue: any;\r\n\r\n    /**\r\n     * Triggers a value update signal and delegates the task to method specified in the Output decorator,\r\n     * sending in also the updated value of the object.\r\n     * @param event The event that occurred.\r\n     */\r\n    sendValueUpdate(event: any) {\r\n        this.inputValue = this.onValueUpdate(event.target.value);\r\n    }\r\n}\r\n", "<div class=\"table-editable-field row\">\r\n    <input\r\n        [id]=\"id\"\r\n        class=\"table-editable-field__input form-control me-2\"\r\n        (blur)=\"sendValueUpdate($event)\"\r\n        (keyup.enter)=\"sendValueUpdate($event)\"\r\n        [required]=\"isRequired\"\r\n        [pattern]=\"pattern ?? '.*'\"\r\n        [(ngModel)]=\"inputValue\"\r\n        type=\"text\"\r\n        #editingInput=\"ngModel\"\r\n    />\r\n    @for (error of editingInput.errors! | keyvalue | removekeys: ['required']; track error) {\r\n        @if (editingInput.invalid && (editingInput.dirty || editingInput.touched)) {\r\n            <div class=\"alert alert-danger\">\r\n                <div [jhiTranslate]=\"translationBase + '.' + error.key\"></div>\r\n            </div>\r\n        }\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { LockRepositoryPolicy, SubmissionPenaltyPolicy, SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { KeyValuePipe } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-submission-policy-update',\r\n    template: `\r\n        <div class=\"form-group-narrow mb-3\">\r\n            <label class=\"label-narrow\" jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.title\" for=\"field_submissionPolicy\">Submission Policy</label>\r\n            <select\r\n                #policy=\"ngModel\"\r\n                required\r\n                class=\"form-select\"\r\n                [ngModel]=\"selectedSubmissionPolicyType\"\r\n                (ngModelChange)=\"onSubmissionPolicyTypeChanged($event)\"\r\n                name=\"submissionPolicyType\"\r\n                id=\"field_submissionPolicy\"\r\n                [disabled]=\"!editable\"\r\n            >\r\n                <option value=\"none\" jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.none.optionLabel\"></option>\r\n                <option value=\"lock_repository\" jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.lockRepository.optionLabel\"></option>\r\n                <option value=\"submission_penalty\" jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.submissionPenalty.optionLabel\"></option>\r\n            </select>\r\n        </div>\r\n        @if (!isNonePolicy) {\r\n            <form [formGroup]=\"form\">\r\n                <div class=\"row mb-3\">\r\n                    <div class=\"col\">\r\n                        <ng-container>\r\n                            <label\r\n                                class=\"label-narrow\"\r\n                                jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.submissionLimitTitle\"\r\n                                for=\"field_submissionLimitExceededPenalty\"\r\n                                >Submission limit</label\r\n                            >\r\n                            <jhi-help-icon text=\"artemisApp.programmingExercise.submissionPolicy.submissionLimitDescription\" />\r\n                            <div class=\"input-group\">\r\n                                <input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    formControlName=\"submissionLimit\"\r\n                                    class=\"form-control\"\r\n                                    step=\"1\"\r\n                                    name=\"submissionLimit\"\r\n                                    id=\"field_submissionLimit\"\r\n                                    (input)=\"updateSubmissionLimit()\"\r\n                                />\r\n                            </div>\r\n                            @for (e of submissionLimitControl.errors! | keyvalue; track e) {\r\n                                @if (submissionLimitControl.invalid && (submissionLimitControl.dirty || submissionLimitControl.touched)) {\r\n                                    <div class=\"alert alert-danger\">\r\n                                        <div [jhiTranslate]=\"'artemisApp.programmingExercise.submissionPolicy.submissionLimitWarning' + '.' + e.key\"></div>\r\n                                    </div>\r\n                                }\r\n                            }\r\n                        </ng-container>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        @if (this.isSubmissionPenaltyPolicy) {\r\n                            <label\r\n                                class=\"label-narrow\"\r\n                                jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.submissionPenalty.penaltyInputFieldTitle\"\r\n                                for=\"field_submissionLimitExceededPenalty\"\r\n                                >Penalty after Exceeding Submission limit</label\r\n                            >\r\n                            <jhi-help-icon text=\"artemisApp.programmingExercise.submissionPolicy.submissionPenalty.exceedingLimitDescription\" />\r\n                            <div class=\"input-group\">\r\n                                <input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    class=\"form-control\"\r\n                                    formControlName=\"exceedingPenalty\"\r\n                                    name=\"submissionLimitExceededPenalty\"\r\n                                    id=\"field_submissionLimitExceededPenalty\"\r\n                                    (input)=\"updateExceedingPenalty()\"\r\n                                />\r\n                            </div>\r\n                            @for (e of exceedingPenaltyControl.errors! | keyvalue; track e) {\r\n                                @if (exceedingPenaltyControl.invalid && (exceedingPenaltyControl.dirty || exceedingPenaltyControl.touched)) {\r\n                                    <div class=\"alert alert-danger\">\r\n                                        <div\r\n                                            [jhiTranslate]=\"'artemisApp.programmingExercise.submissionPolicy.submissionPenalty.penaltyInputFieldValidationWarning' + '.' + e.key\"\r\n                                        ></div>\r\n                                    </div>\r\n                                }\r\n                            }\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        }\r\n    `,\r\n    styleUrls: ['../../programming/manage/programming-exercise-form.scss'],\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule, HelpIconComponent, KeyValuePipe],\r\n})\r\nexport class SubmissionPolicyUpdateComponent implements OnInit {\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n    @Input() editable: boolean;\r\n\r\n    @Output() submissionPolicyTypeChange = new EventEmitter<void>();\r\n\r\n    form: FormGroup;\r\n\r\n    selectedSubmissionPolicyType: SubmissionPolicyType;\r\n\r\n    isSubmissionPenaltyPolicy: boolean;\r\n    isLockRepositoryPolicy: boolean;\r\n    isNonePolicy: boolean;\r\n\r\n    // This is used to ensure that only integers [1-500] can be used as input for the submission limit.\r\n    submissionLimitPattern = '^([1-9]|([1-9][0-9])|([1-4][0-9][0-9])|500)$';\r\n\r\n    submissionLimitControl: FormControl;\r\n    exceedingPenaltyControl: FormControl;\r\n\r\n    // penalty can be any (point) number greater than 0\r\n    exceedingPenaltyPattern = RegExp('^0*[1-9][0-9]*(\\\\.[0-9]+)?|0+\\\\.[0-9]*[1-9][0-9]*$');\r\n\r\n    ngOnInit(): void {\r\n        this.onSubmissionPolicyTypeChanged(this.programmingExercise.submissionPolicy?.type ?? SubmissionPolicyType.NONE);\r\n        this.form = new FormGroup({\r\n            submissionLimit: new FormControl({ value: this.programmingExercise.submissionPolicy?.submissionLimit, disabled: !this.editable }, [\r\n                Validators.pattern(this.submissionLimitPattern),\r\n                Validators.required,\r\n            ]),\r\n            exceedingPenalty: new FormControl({ value: this.programmingExercise.submissionPolicy?.exceedingPenalty, disabled: !this.editable }, [\r\n                Validators.pattern(this.exceedingPenaltyPattern),\r\n                Validators.required,\r\n            ]),\r\n        });\r\n        this.submissionLimitControl = this.form.get('submissionLimit')! as FormControl;\r\n        this.exceedingPenaltyControl = this.form.get('exceedingPenalty')! as FormControl;\r\n    }\r\n\r\n    private setAuxiliaryBooleansOnSubmissionPolicyChange(submissionPolicyType: SubmissionPolicyType) {\r\n        this.isNonePolicy = this.isLockRepositoryPolicy = this.isSubmissionPenaltyPolicy = false;\r\n        switch (submissionPolicyType) {\r\n            case SubmissionPolicyType.NONE:\r\n                this.isNonePolicy = true;\r\n                break;\r\n            case SubmissionPolicyType.LOCK_REPOSITORY:\r\n                this.isLockRepositoryPolicy = true;\r\n                break;\r\n            case SubmissionPolicyType.SUBMISSION_PENALTY:\r\n                this.isSubmissionPenaltyPolicy = true;\r\n                break;\r\n        }\r\n        this.selectedSubmissionPolicyType = submissionPolicyType;\r\n    }\r\n\r\n    onSubmissionPolicyTypeChanged(submissionPolicyType: SubmissionPolicyType) {\r\n        const previousSubmissionPolicyType = this.programmingExercise?.submissionPolicy?.type ?? SubmissionPolicyType.NONE;\r\n        if (submissionPolicyType === SubmissionPolicyType.NONE) {\r\n            if (previousSubmissionPolicyType !== SubmissionPolicyType.NONE) {\r\n                this.programmingExercise.submissionPolicy!.type = SubmissionPolicyType.NONE;\r\n            } else {\r\n                this.programmingExercise.submissionPolicy = undefined;\r\n            }\r\n        } else if (submissionPolicyType === SubmissionPolicyType.LOCK_REPOSITORY) {\r\n            const newPolicy = new LockRepositoryPolicy();\r\n            if (this.programmingExercise.submissionPolicy) {\r\n                newPolicy.id = this.programmingExercise.submissionPolicy.id;\r\n                newPolicy.active = this.programmingExercise.submissionPolicy.active;\r\n                newPolicy.submissionLimit = this.programmingExercise.submissionPolicy.submissionLimit;\r\n            }\r\n            this.programmingExercise.submissionPolicy = newPolicy;\r\n        } else if (submissionPolicyType === SubmissionPolicyType.SUBMISSION_PENALTY) {\r\n            const newPolicy = new SubmissionPenaltyPolicy();\r\n            if (this.programmingExercise.submissionPolicy) {\r\n                newPolicy.id = this.programmingExercise.submissionPolicy.id;\r\n                newPolicy.active = this.programmingExercise.submissionPolicy.active;\r\n                newPolicy.submissionLimit = this.programmingExercise.submissionPolicy!.submissionLimit;\r\n\r\n                if (this.programmingExercise.submissionPolicy?.exceedingPenalty) {\r\n                    newPolicy.exceedingPenalty = this.programmingExercise.submissionPolicy?.exceedingPenalty;\r\n                } else if (this.exceedingPenaltyControl) {\r\n                    // restore value when penalty has been set previously and was valid\r\n                    if (this.exceedingPenaltyControl.invalid) {\r\n                        this.exceedingPenaltyControl.setValue(undefined);\r\n                    } else {\r\n                        newPolicy.exceedingPenalty = this.exceedingPenaltyControl.value as number;\r\n                    }\r\n                }\r\n            }\r\n            this.programmingExercise.submissionPolicy = newPolicy;\r\n        }\r\n        this.setAuxiliaryBooleansOnSubmissionPolicyChange(submissionPolicyType);\r\n        this.submissionPolicyTypeChange.emit();\r\n        return submissionPolicyType!;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the submission policy form is invalid.\r\n     *\r\n     * @returns {boolean} true if the form is invalid, false if the form is valid\r\n     */\r\n    get invalid(): boolean {\r\n        const type = this.programmingExercise?.submissionPolicy?.type;\r\n        if (!this.form || !type || type === SubmissionPolicyType.NONE) {\r\n            return false;\r\n        }\r\n        return this.submissionLimitControl.invalid || (type === SubmissionPolicyType.SUBMISSION_PENALTY && this.exceedingPenaltyControl.invalid);\r\n    }\r\n\r\n    /**\r\n     * Ensures synchronization between the submission policy model and the input controller, since\r\n     * using ngModel with reactive forms has been deprecated in Angular v6\r\n     */\r\n    updateSubmissionLimit() {\r\n        this.programmingExercise!.submissionPolicy!.submissionLimit = this.submissionLimitControl.value as number;\r\n    }\r\n\r\n    /**\r\n     * Ensures synchronization between the submission policy model and the input controller, since\r\n     * using ngModel with reactive forms has been deprecated in Angular v6\r\n     */\r\n    updateExceedingPenalty() {\r\n        this.programmingExercise!.submissionPolicy!.exceedingPenalty = this.exceedingPenaltyControl.value as number;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "translationBase", "error_r2", "key", "\u0275\u0275template", "TableEditableFieldComponent_For_6_Conditional_1_Template", "\u0275\u0275conditional", "editingInput_r4", "invalid", "dirty", "touched", "TableEditableFieldComponent", "editingInput", "id", "pattern", "isRequired", "value", "inputValue", "onValueUpdate", "sendValueUpdate", "event", "target", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275twoWayListener", "\u0275\u0275twoWayBindingSet", "\u0275\u0275repeaterCreate", "TableEditableFieldComponent_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "tmp_3_0", "undefined", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "\u0275\u0275pipeBind1", "errors", "\u0275\u0275pureFunction0", "_c1", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "RequiredValidator", "PatternValidator", "NgModel", "TranslateDirective", "KeyValuePipe", "RemoveKeysPipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "e_r4", "key", "\u0275\u0275template", "SubmissionPolicyUpdateComponent_Conditional_17_For_20_Conditional_1_Template", "\u0275\u0275conditional", "ctx_r2", "submissionLimitControl", "invalid", "dirty", "touched", "e_r6", "SubmissionPolicyUpdateComponent_Conditional_17_Conditional_26_For_12_Conditional_1_Template", "exceedingPenaltyControl", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r5", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateExceedingPenalty", "\u0275\u0275repeaterCreate", "SubmissionPolicyUpdateComponent_Conditional_17_Conditional_26_For_12_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "errors", "\u0275\u0275elementContainerStart", "_r2", "updateSubmissionLimit", "SubmissionPolicyUpdateComponent_Conditional_17_For_20_Template", "SubmissionPolicyUpdateComponent_Conditional_17_Conditional_26_Template", "form", "isSubmissionPenaltyPolicy", "SubmissionPolicyUpdateComponent", "programmingExercise", "editable", "submissionPolicyTypeChange", "EventEmitter", "selectedSubmissionPolicyType", "isLockRepositoryPolicy", "isNonePolicy", "submissionLimitPattern", "exceedingPenaltyPattern", "RegExp", "ngOnInit", "onSubmissionPolicyTypeChanged", "submissionPolicy", "type", "SubmissionPolicyType", "NONE", "FormGroup", "submissionLimit", "FormControl", "value", "disabled", "Validators", "pattern", "required", "exceedingPenalty", "get", "setAuxiliaryBooleansOnSubmissionPolicyChange", "submissionPolicyType", "LOCK_REPOSITORY", "SUBMISSION_PENALTY", "previousSubmissionPolicyType", "undefined", "newPolicy", "LockRepositoryPolicy", "id", "active", "SubmissionPenaltyPolicy", "setValue", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "$event", "i0", "_r1", "SubmissionPolicyUpdateComponent_Conditional_17_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "NgModel", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "HelpIconComponent", "KeyValuePipe", "styles"]
}
