{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/import-standardized-competencies/course-import-standardized-course-competencies.component.ts"],
  "sourcesContent": ["import { getIcon } from 'app/entities/competency.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport {\r\n    KnowledgeAreaDTO,\r\n    KnowledgeAreaForTree,\r\n    Source,\r\n    StandardizedCompetencyDTO,\r\n    StandardizedCompetencyForTree,\r\n    sourceToString,\r\n} from 'app/entities/competency/standardized-competency.model';\r\nimport { faBan, faDownLeftAndUpRightToCenter, faFileImport, faSort, faTrash, faUpRightAndDownLeftFromCenter } from '@fortawesome/free-solid-svg-icons';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Component, HostListener, OnInit, inject } from '@angular/core';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { forkJoin, map } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { StandardizedCompetencyFilterPageComponent } from 'app/shared/standardized-competencies/standardized-competency-filter-page.component';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { StandardizedCompetencyService } from 'app/shared/standardized-competencies/standardized-competency.service';\r\nimport { CompetencyService } from 'app/course/competencies/competency.service';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { PrerequisiteService } from 'app/course/competencies/prerequisite.service';\r\n\r\ninterface StandardizedCompetencyForImport extends StandardizedCompetencyForTree {\r\n    selected?: boolean;\r\n    knowledgeAreaTitle?: string;\r\n}\r\n\r\ninterface KnowledgeAreaForImport extends KnowledgeAreaForTree {\r\n    children?: KnowledgeAreaForImport[];\r\n    competencies?: StandardizedCompetencyForImport[];\r\n}\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class CourseImportStandardizedCourseCompetenciesComponent extends StandardizedCompetencyFilterPageComponent implements OnInit, ComponentCanDeactivate {\r\n    protected router = inject(Router);\r\n    protected activatedRoute = inject(ActivatedRoute);\r\n    protected standardizedCompetencyService = inject(StandardizedCompetencyService);\r\n    protected alertService = inject(AlertService);\r\n    protected translateService = inject(TranslateService);\r\n    protected sortService = inject(SortService);\r\n\r\n    protected selectedCompetencies: StandardizedCompetencyForImport[] = [];\r\n    protected selectedCompetency?: StandardizedCompetencyForImport;\r\n    protected sourceString = '';\r\n    protected courseId: number;\r\n    protected sources: Source[] = [];\r\n    protected isLoading = false;\r\n    protected isSubmitted = false;\r\n\r\n    // constants\r\n    protected readonly getIcon = getIcon;\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly ButtonSize = ButtonSize;\r\n    readonly documentationType: DocumentationType = 'StandardizedCompetencies';\r\n    // icons\r\n    protected readonly faBan = faBan;\r\n    protected readonly faFileImport = faFileImport;\r\n    protected readonly faMinimize = faDownLeftAndUpRightToCenter;\r\n    protected readonly faMaximize = faUpRightAndDownLeftFromCenter;\r\n    protected readonly faTrash = faTrash;\r\n    protected readonly faSort = faSort;\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        const getKnowledgeAreasObservable = this.standardizedCompetencyService.getAllForTreeView();\r\n        const getSourcesObservable = this.standardizedCompetencyService.getSources();\r\n        forkJoin([getKnowledgeAreasObservable, getSourcesObservable]).subscribe({\r\n            next: ([knowledgeAreasResponse, sourcesResponse]) => {\r\n                const knowledgeAreas = knowledgeAreasResponse.body!;\r\n                const knowledgeAreasForImport = knowledgeAreas.map((knowledgeArea) => this.convertToKnowledgeAreaForImport(knowledgeArea));\r\n                this.dataSource.data = knowledgeAreasForImport;\r\n                this.treeControl.dataNodes = knowledgeAreasForImport;\r\n                knowledgeAreasForImport.forEach((knowledgeArea) => {\r\n                    this.addSelfAndDescendantsToMap(knowledgeArea);\r\n                    this.addSelfAndDescendantsToSelectArray(knowledgeArea);\r\n                });\r\n\r\n                this.sources = sourcesResponse.body!;\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            complete: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n        this.courseId = Number(this.activatedRoute.snapshot.paramMap.get('courseId'));\r\n    }\r\n\r\n    protected openCompetencyDetails(competency: StandardizedCompetencyForImport) {\r\n        const source = this.sources.find((source) => source.id === competency.sourceId);\r\n        this.sourceString = source ? sourceToString(source) : '';\r\n        this.selectedCompetency = competency;\r\n    }\r\n\r\n    protected closeCompetencyDetails() {\r\n        this.sourceString = '';\r\n        this.selectedCompetency = undefined;\r\n    }\r\n\r\n    protected toggleSelect(selectedCompetency: StandardizedCompetencyForImport) {\r\n        if (selectedCompetency.selected) {\r\n            this.selectedCompetencies.push(selectedCompetency);\r\n        } else {\r\n            this.selectedCompetencies = this.selectedCompetencies.filter((competency) => competency.id !== selectedCompetency.id);\r\n        }\r\n    }\r\n\r\n    protected deselectCompetency(selectedCompetency: StandardizedCompetencyForImport) {\r\n        selectedCompetency.selected = false;\r\n        if (!selectedCompetency.id) {\r\n            return;\r\n        }\r\n        this.selectedCompetencies = this.selectedCompetencies.filter((competency) => competency.id !== selectedCompetency.id);\r\n    }\r\n\r\n    protected importCompetencies(service: CompetencyService | PrerequisiteService) {\r\n        if (!this.selectedCompetencies.length) {\r\n            return;\r\n        }\r\n\r\n        const idsToImport = this.selectedCompetencies.map((competency) => competency.id!);\r\n\r\n        this.isLoading = true;\r\n        service\r\n            .importStandardizedCompetencies(idsToImport, this.courseId)\r\n            .pipe(map((response) => response.body!.length))\r\n            .subscribe({\r\n                next: (countImportedCompetencies) => {\r\n                    this.isSubmitted = true;\r\n                    this.alertService.success('artemisApp.standardizedCompetency.courseImport.success', { count: countImportedCompetencies });\r\n                    this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n                complete: () => {\r\n                    this.isLoading = false;\r\n                },\r\n            });\r\n    }\r\n\r\n    protected cancel() {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    /**\r\n     * Callback that sorts the selected competencies\r\n     *\r\n     * @param sort the search object with the updated search predicate and sorting direction\r\n     */\r\n    sortSelected(sort: { predicate: string; ascending: boolean }) {\r\n        this.selectedCompetencies = this.sortService.sortByProperty(this.selectedCompetencies, sort.predicate, sort.ascending);\r\n    }\r\n\r\n    /**\r\n     * Only allow to leave page after submitting or if no pending changes exist\r\n     */\r\n    canDeactivate() {\r\n        return this.isSubmitted || (!this.isLoading && this.selectedCompetencies.length === 0);\r\n    }\r\n\r\n    get canDeactivateWarning(): string {\r\n        return this.translateService.instant('pendingChanges');\r\n    }\r\n\r\n    private convertToKnowledgeAreaForImport(knowledgeAreaDTO: KnowledgeAreaDTO, isVisible = true, level = 0, selected = false): KnowledgeAreaForImport {\r\n        const children = knowledgeAreaDTO.children?.map((child) => this.convertToKnowledgeAreaForImport(child, isVisible, level + 1));\r\n        const competencies = knowledgeAreaDTO.competencies?.map((competency) =>\r\n            this.convertToStandardizedCompetencyForImport(competency, knowledgeAreaDTO.title, isVisible, selected),\r\n        );\r\n        return { ...knowledgeAreaDTO, children: children, competencies: competencies, level: level, isVisible: isVisible };\r\n    }\r\n\r\n    private convertToStandardizedCompetencyForImport(competencyDTO: StandardizedCompetencyDTO, knowledgeAreaTitle?: string, isVisible = true, selected = false) {\r\n        const competencyForTree: StandardizedCompetencyForImport = { ...competencyDTO, isVisible: isVisible, knowledgeAreaTitle: knowledgeAreaTitle, selected: selected };\r\n        return competencyForTree;\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.canDeactivateWarning;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["CourseImportStandardizedCourseCompetenciesComponent", "StandardizedCompetencyFilterPageComponent", "router", "inject", "Router", "activatedRoute", "ActivatedRoute", "standardizedCompetencyService", "StandardizedCompetencyService", "alertService", "AlertService", "translateService", "TranslateService", "sortService", "SortService", "selectedCompetencies", "selectedCompetency", "sourceString", "courseId", "sources", "isLoading", "isSubmitted", "getIcon", "ButtonType", "ButtonSize", "documentationType", "faBan", "faFileImport", "faMinimize", "faDownLeftAndUpRightToCenter", "faMaximize", "faUpRightAndDownLeftFromCenter", "faTrash", "faSort", "ngOnInit", "getKnowledgeAreasObservable", "getAllForTreeView", "getSourcesObservable", "getSources", "forkJoin", "subscribe", "next", "knowledgeAreasResponse", "sourcesResponse", "knowledgeAreasForImport", "body", "map", "knowledgeArea", "convertToKnowledgeAreaForImport", "dataSource", "data", "treeControl", "dataNodes", "forEach", "addSelfAndDescendantsToMap", "addSelfAndDescendantsToSelectArray", "error", "errorResponse", "onError", "complete", "Number", "snapshot", "paramMap", "get", "openCompetencyDetails", "competency", "source", "find", "id", "sourceId", "sourceToString", "closeCompetencyDetails", "undefined", "toggleSelect", "selected", "push", "filter", "deselectCompetency", "importCompetencies", "service", "length", "idsToImport", "importStandardizedCompetencies", "pipe", "response", "countImportedCompetencies", "success", "count", "navigate", "relativeTo", "cancel", "sortSelected", "sort", "sortByProperty", "predicate", "ascending", "canDeactivate", "canDeactivateWarning", "instant", "knowledgeAreaDTO", "isVisible", "level", "children", "child", "competencies", "convertToStandardizedCompetencyForImport", "title", "__spreadProps", "__spreadValues", "competencyDTO", "knowledgeAreaTitle", "unloadNotification", "event", "preventDefault", "__ngFactoryType__", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275resolveWindow"]
}
