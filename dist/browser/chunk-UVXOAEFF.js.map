{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/example-submission/example-submission.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ExampleSubmission } from 'app/entities/example-submission.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { StringCountService } from 'app/exercises/text/participate/string-count.service';\r\n\r\nexport type EntityResponseType = HttpResponse<ExampleSubmission>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExampleSubmissionService {\r\n    private http = inject(HttpClient);\r\n    private stringCountService = inject(StringCountService);\r\n\r\n    private resourceUrl = 'api/assessment';\r\n\r\n    /**\r\n     * Creates an example submission\r\n     * @param exampleSubmission Example submission to create\r\n     * @param exerciseId Id of the exercise to which it belongs\r\n     */\r\n    create(exampleSubmission: ExampleSubmission, exerciseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convert(exampleSubmission);\r\n        return this.http\r\n            .post<ExampleSubmission>(`${this.resourceUrl}/exercises/${exerciseId}/example-submissions`, copy, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Updates an example submission\r\n     * @param exampleSubmission Example submission to update\r\n     * @param exerciseId Id of the exercise to which it belongs\r\n     */\r\n    update(exampleSubmission: ExampleSubmission, exerciseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convert(exampleSubmission);\r\n        return this.http\r\n            .put<ExampleSubmission>(`${this.resourceUrl}/exercises/${exerciseId}/example-submissions`, copy, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Prepare an example submission for assessment\r\n     * @param exerciseId Id of the exercise to which it belongs\r\n     * @param exampleSubmissionId Id of the example submission to prepare\r\n     */\r\n    prepareForAssessment(exerciseId: number, exampleSubmissionId: number): Observable<HttpResponse<void>> {\r\n        return this.http.post<void>(`${this.resourceUrl}/exercises/${exerciseId}/example-submissions/${exampleSubmissionId}/prepare-assessment`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Gets an example submission\r\n     * @param exampleSubmissionId Id of example submission to get\r\n     */\r\n    get(exampleSubmissionId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ExampleSubmission>(`${this.resourceUrl}/example-submissions/${exampleSubmissionId}`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<ExampleSubmission>) => this.convertResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Deletes an example submission\r\n     * @param exampleSubmissionId Id of example submission to delete\r\n     */\r\n    delete(exampleSubmissionId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/example-submissions/${exampleSubmissionId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Imports an example submission\r\n     * @param submissionId the id od the submission to be imported as an example submission\r\n     * @param exerciseId the id of the corresponding exercise\r\n     */\r\n    import(submissionId: number, exerciseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .post<ExampleSubmission>(\r\n                `${this.resourceUrl}/exercises/${exerciseId}/example-submissions/import/${submissionId}`,\r\n                {},\r\n                {\r\n                    observe: 'response',\r\n                },\r\n            )\r\n            .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n    }\r\n\r\n    private convertResponse(res: EntityResponseType): EntityResponseType {\r\n        const body: ExampleSubmission = this.convertItemFromServer(res.body!);\r\n        return res.clone({ body });\r\n    }\r\n\r\n    /**\r\n     * Convert a returned JSON object to ExampleSubmission.\r\n     */\r\n    private convertItemFromServer(exampleSubmission: ExampleSubmission): ExampleSubmission {\r\n        return Object.assign({}, exampleSubmission);\r\n    }\r\n\r\n    /**\r\n     * Convert a ExampleSubmission to a JSON which can be sent to the server.\r\n     */\r\n    private convert(exampleSubmission: ExampleSubmission): ExampleSubmission {\r\n        const jsonCopy = Object.assign({}, exampleSubmission);\r\n        if (jsonCopy.exercise) {\r\n            jsonCopy.exercise = ExerciseService.convertExerciseDatesFromClient(jsonCopy.exercise);\r\n            jsonCopy.exercise = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(jsonCopy.exercise!);\r\n            jsonCopy.exercise.categories = ExerciseService.stringifyExerciseCategories(jsonCopy.exercise);\r\n        }\r\n        return jsonCopy;\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of elements for the example submission\r\n     *\r\n     * @param submission associated with the example submission\r\n     * @param exercise   needed to decide submission type\r\n     * @returns number of words for text submission, or number of element for the modeling submission\r\n     */\r\n    getSubmissionSize(submission?: Submission, exercise?: Exercise): number {\r\n        if (submission && exercise && exercise.type === ExerciseType.TEXT) {\r\n            return this.stringCountService.countWords((submission as TextSubmission).text);\r\n        } else if (submission && exercise && exercise.type === ExerciseType.MODELING) {\r\n            const umlModel = JSON.parse((submission as ModelingSubmission).model!);\r\n            return umlModel ? umlModel.elements?.length + umlModel.relationships?.length : 0;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n"],
  "mappings": "8MAeA,IAAaA,GAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACzBC,KAAOC,EAAOC,CAAU,EACxBC,mBAAqBF,EAAOG,CAAkB,EAE9CC,YAAc,iBAOtBC,OAAOC,EAAsCC,EAAkB,CAC3D,IAAMC,EAAO,KAAKC,QAAQH,CAAiB,EAC3C,OAAO,KAAKP,KACPW,KAAwB,GAAG,KAAKN,WAAW,cAAcG,CAAU,uBAAwBC,EAAM,CAC9FG,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA4B,KAAKC,gBAAgBD,CAAG,CAAC,CAAC,CACzE,CAOAE,OAAOV,EAAsCC,EAAkB,CAC3D,IAAMC,EAAO,KAAKC,QAAQH,CAAiB,EAC3C,OAAO,KAAKP,KACPkB,IAAuB,GAAG,KAAKb,WAAW,cAAcG,CAAU,uBAAwBC,EAAM,CAC7FG,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA4B,KAAKC,gBAAgBD,CAAG,CAAC,CAAC,CACzE,CAOAI,qBAAqBX,EAAoBY,EAA2B,CAChE,OAAO,KAAKpB,KAAKW,KAAW,GAAG,KAAKN,WAAW,cAAcG,CAAU,wBAAwBY,CAAmB,sBAAuB,CAAA,EAAI,CAAER,QAAS,UAAU,CAAE,CACxK,CAMAS,IAAID,EAA2B,CAC3B,OAAO,KAAKpB,KACPqB,IAAuB,GAAG,KAAKhB,WAAW,wBAAwBe,CAAmB,GAAI,CAAER,QAAS,UAAU,CAAE,EAChHC,KAAKC,EAAKC,GAAyC,KAAKC,gBAAgBD,CAAG,CAAC,CAAC,CACtF,CAMAO,OAAOF,EAA2B,CAC9B,OAAO,KAAKpB,KAAKsB,OAAa,GAAG,KAAKjB,WAAW,wBAAwBe,CAAmB,GAAI,CAAER,QAAS,UAAU,CAAE,CAC3H,CAOAW,OAAOC,EAAsBhB,EAAkB,CAC3C,OAAO,KAAKR,KACPW,KACG,GAAG,KAAKN,WAAW,cAAcG,CAAU,+BAA+BgB,CAAY,GACtF,CAAA,EACA,CACIZ,QAAS,WACZ,EAEJC,KAAKC,EAAKC,GAA4B,KAAKC,gBAAgBD,CAAG,CAAC,CAAC,CACzE,CAEQC,gBAAgBD,EAAuB,CAC3C,IAAMU,EAA0B,KAAKC,sBAAsBX,EAAIU,IAAK,EACpE,OAAOV,EAAIY,MAAM,CAAEF,KAAAA,CAAI,CAAE,CAC7B,CAKQC,sBAAsBnB,EAAoC,CAC9D,OAAOqB,OAAOC,OAAO,CAAA,EAAItB,CAAiB,CAC9C,CAKQG,QAAQH,EAAoC,CAChD,IAAMuB,EAAWF,OAAOC,OAAO,CAAA,EAAItB,CAAiB,EACpD,OAAIuB,EAASC,WACTD,EAASC,SAAWC,EAAgBC,+BAA+BH,EAASC,QAAQ,EACpFD,EAASC,SAAWC,EAAgBE,kDAAkDJ,EAASC,QAAS,EACxGD,EAASC,SAASI,WAAaH,EAAgBI,4BAA4BN,EAASC,QAAQ,GAEzFD,CACX,CASAO,kBAAkBC,EAAyBP,EAAmB,CAC1D,GAAIO,GAAcP,GAAYA,EAASQ,OAASC,EAAaC,KACzD,OAAO,KAAKtC,mBAAmBuC,WAAYJ,EAA8BK,IAAI,EAC1E,GAAIL,GAAcP,GAAYA,EAASQ,OAASC,EAAaI,SAAU,CAC1E,IAAMC,EAAWC,KAAKC,MAAOT,EAAkCU,KAAM,EACrE,OAAOH,EAAWA,EAASI,UAAUC,OAASL,EAASM,eAAeD,OAAS,CACnF,CACA,MAAO,EACX,4CAtHSnD,EAAwB,6BAAxBA,EAAwBqD,QAAxBrD,EAAwBsD,UAAAC,WADX,MAAM,CAAA,SACnBvD,CAAwB,GAAA",
  "names": ["ExampleSubmissionService", "http", "inject", "HttpClient", "stringCountService", "StringCountService", "resourceUrl", "create", "exampleSubmission", "exerciseId", "copy", "convert", "post", "observe", "pipe", "map", "res", "convertResponse", "update", "put", "prepareForAssessment", "exampleSubmissionId", "get", "delete", "import", "submissionId", "body", "convertItemFromServer", "clone", "Object", "assign", "jsonCopy", "exercise", "ExerciseService", "convertExerciseDatesFromClient", "setBonusPointsConstrainedByIncludedInOverallScore", "categories", "stringifyExerciseCategories", "getSubmissionSize", "submission", "type", "ExerciseType", "TEXT", "countWords", "text", "MODELING", "umlModel", "JSON", "parse", "model", "elements", "length", "relationships", "factory", "\u0275fac", "providedIn"]
}
