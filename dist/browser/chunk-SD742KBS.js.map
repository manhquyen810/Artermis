{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-exams/course-exams.component.ts", "src/main/webapp/app/overview/course-exams/course-exams.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { faAngleDown, faAngleUp, faListAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { AccordionGroups, CollapseState, SidebarCardElement, SidebarData } from 'app/types/sidebar';\r\nimport { CourseOverviewService } from '../course-overview.service';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { NgClass } from '@angular/common';\r\nimport { SidebarComponent } from 'app/shared/sidebar/sidebar.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nconst DEFAULT_UNIT_GROUPS: AccordionGroups = {\r\n    real: { entityData: [] },\r\n    test: { entityData: [] },\r\n};\r\n\r\nconst DEFAULT_COLLAPSE_STATE: CollapseState = {\r\n    real: false,\r\n    test: false,\r\n};\r\n\r\nconst DEFAULT_SHOW_ALWAYS: CollapseState = {\r\n    real: false,\r\n    test: false,\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-course-exams',\r\n    templateUrl: './course-exams.component.html',\r\n    styleUrls: ['./course-exams.component.scss'],\r\n    imports: [NgClass, SidebarComponent, RouterOutlet, TranslateDirective],\r\n})\r\nexport class CourseExamsComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n    private examParticipationService = inject(ExamParticipationService);\r\n    private courseOverviewService = inject(CourseOverviewService);\r\n    private router = inject(Router);\r\n\r\n    courseId: number;\r\n    public course?: Course;\r\n    private parentParamSubscription?: Subscription;\r\n    private courseUpdatesSubscription?: Subscription;\r\n    private studentExamTestExamUpdateSubscription?: Subscription;\r\n    private examStartedSubscription?: Subscription;\r\n    private studentExams: StudentExam[];\r\n    private studentExamsForRealExams = new Map<number, StudentExam>();\r\n    public expandAttemptsMap = new Map<number, boolean>();\r\n    public realExamsOfCourse: Exam[] = [];\r\n    public testExamsOfCourse: Exam[] = [];\r\n\r\n    // Icons\r\n    faAngleUp = faAngleUp;\r\n    faAngleDown = faAngleDown;\r\n    faListAlt = faListAlt;\r\n\r\n    sortedRealExams?: Exam[];\r\n    sortedTestExams?: Exam[];\r\n    examSelected = true;\r\n    accordionExamGroups: AccordionGroups = DEFAULT_UNIT_GROUPS;\r\n    sidebarData: SidebarData;\r\n    sidebarExams: SidebarCardElement[] = [];\r\n    isCollapsed = false;\r\n    isExamStarted = false;\r\n\r\n    readonly DEFAULT_COLLAPSE_STATE = DEFAULT_COLLAPSE_STATE;\r\n    protected readonly DEFAULT_SHOW_ALWAYS = DEFAULT_SHOW_ALWAYS;\r\n\r\n    /**\r\n     * subscribe to changes in the course and fetch course by the path parameter\r\n     */\r\n    ngOnInit(): void {\r\n        this.isCollapsed = this.courseOverviewService.getSidebarCollapseStateFromStorage('exam');\r\n        this.parentParamSubscription = this.route.parent?.params.subscribe((params) => {\r\n            this.courseId = Number(params.courseId);\r\n        });\r\n\r\n        this.examStartedSubscription = this.examParticipationService.examIsStarted$.subscribe((isStarted) => {\r\n            this.isExamStarted = isStarted;\r\n        });\r\n\r\n        this.course = this.courseStorageService.getCourse(this.courseId);\r\n        this.prepareSidebarData();\r\n\r\n        this.courseUpdatesSubscription = this.courseStorageService.subscribeToCourseUpdates(this.courseId).subscribe((course: Course) => {\r\n            this.course = course;\r\n            this.updateExams();\r\n            this.prepareSidebarData();\r\n        });\r\n\r\n        this.studentExamTestExamUpdateSubscription = this.examParticipationService\r\n            .loadStudentExamsForTestExamsPerCourseAndPerUserForOverviewPage(this.courseId)\r\n            .subscribe((response: StudentExam[]) => {\r\n                this.studentExams = response!;\r\n            });\r\n\r\n        if (this.course?.exams) {\r\n            // The Map is ued to store the boolean value, if the attempt-List for one Exam has been expanded or collapsed\r\n            this.expandAttemptsMap = new Map(this.course.exams.filter((exam) => exam.testExam && this.isVisible(exam)).map((exam) => [exam.id!, false]));\r\n            this.updateExams();\r\n            this.prepareSidebarData();\r\n        }\r\n\r\n        // If no exam is selected navigate to the last selected or upcoming Exam\r\n        this.navigateToExam();\r\n    }\r\n\r\n    navigateToExam() {\r\n        const upcomingExam = this.courseOverviewService.getUpcomingExam([...this.realExamsOfCourse, ...this.testExamsOfCourse]);\r\n        const lastSelectedExam = this.getLastSelectedExam();\r\n        const examId = this.route.firstChild?.snapshot.params.examId;\r\n        if (!examId && lastSelectedExam) {\r\n            this.router.navigate([lastSelectedExam], { relativeTo: this.route, replaceUrl: true });\r\n        } else if (!examId && upcomingExam) {\r\n            this.router.navigate([upcomingExam.id], { relativeTo: this.route, replaceUrl: true });\r\n        } else {\r\n            this.examSelected = examId ? true : false;\r\n        }\r\n    }\r\n\r\n    private updateExams(): void {\r\n        if (this.course?.exams) {\r\n            // Loading the exams from the course\r\n            const exams = this.course.exams.filter((exam) => this.isVisible(exam)).sort((se1, se2) => this.sortExamsByStartDate(se1, se2));\r\n            // add new exams to the attempt map\r\n            exams.filter((exam) => exam.testExam && !this.expandAttemptsMap.has(exam.id!)).forEach((exam) => this.expandAttemptsMap.set(exam.id!, false));\r\n\r\n            this.realExamsOfCourse = exams.filter((exam) => !exam.testExam);\r\n            this.testExamsOfCourse = exams.filter((exam) => exam.testExam);\r\n            // get student exams for real exams\r\n            const studentExamPromisesForRealExams = this.realExamsOfCourse.map((realExam) =>\r\n                lastValueFrom(this.examParticipationService.getOwnStudentExam(this.courseId, realExam.id!)).then((studentExam) => {\r\n                    this.studentExamsForRealExams.set(realExam.id!, studentExam);\r\n                }),\r\n            );\r\n            // Ensure that we prepare sidebardata after all studentexams are loaded\r\n            Promise.all(studentExamPromisesForRealExams).then(() => {\r\n                this.prepareSidebarData();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * unsubscribe from all subscriptions\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.parentParamSubscription) {\r\n            this.parentParamSubscription.unsubscribe();\r\n        }\r\n        if (this.courseUpdatesSubscription) {\r\n            this.courseUpdatesSubscription.unsubscribe();\r\n        }\r\n        this.studentExamTestExamUpdateSubscription?.unsubscribe();\r\n        this.examStartedSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * check for given exam if it is visible\r\n     * @param {Exam} exam\r\n     */\r\n    isVisible(exam: Exam): boolean {\r\n        return exam.visibleDate ? dayjs(exam.visibleDate).isBefore(this.serverDateService.now()) : false;\r\n    }\r\n\r\n    /**\r\n     * Filters the studentExams for the examId and sorts them according to the studentExam.id in reverse order\r\n     * @param examId the examId for which the StudentExams should be retrieved\r\n     * @return a by id descending ordered list of studentExams\r\n     */\r\n    getStudentExamForExamIdOrderedByIdReverse(examId: number): StudentExam[] {\r\n        if (!this.studentExams) {\r\n            return [];\r\n        }\r\n        return this.studentExams\r\n            .filter(function (studentExam) {\r\n                return studentExam.exam?.id && studentExam.startedDate && studentExam.exam.id === examId && studentExam.startedDate;\r\n            })\r\n            .sort((se1, se2) => se2.id! - se1.id!);\r\n    }\r\n\r\n    /**\r\n     * Used to change the entry corresponding to the examId, if the user has expanded the list of attempts for this exam or not\r\n     * @param examId the examId for which the boolean-value should be changed\r\n     */\r\n    changeExpandAttemptList(examId: number) {\r\n        const newValue = !this.expandAttemptsMap.get(examId);\r\n        this.expandAttemptsMap.set(examId, newValue);\r\n    }\r\n\r\n    /**\r\n     * Used for the sort()-function to order the Exams according to their startDate.\r\n     * @param exam1 exam1 for comparison\r\n     * @param exam2 exam2 for comparison\r\n     * @return value for sort()-function\r\n     */\r\n    sortExamsByStartDate(exam1: Exam, exam2: Exam): number {\r\n        if (dayjs(exam1.startDate!).isBefore(exam2.startDate!)) {\r\n            return -1;\r\n        }\r\n        if (dayjs(exam1.startDate!).isAfter(exam2.startDate!)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    groupExamsByRealOrTest(realExams: Exam[], testExams: Exam[]): AccordionGroups {\r\n        const groupedExamGroups = cloneDeep(DEFAULT_UNIT_GROUPS) as AccordionGroups;\r\n\r\n        for (const realExam of realExams) {\r\n            const examCardItem = this.courseOverviewService.mapExamToSidebarCardElement(realExam, this.studentExamsForRealExams.get(realExam.id!));\r\n            groupedExamGroups['real'].entityData.push(examCardItem);\r\n        }\r\n        for (const testExam of testExams) {\r\n            const examCardItem = this.courseOverviewService.mapExamToSidebarCardElement(testExam);\r\n            groupedExamGroups['test'].entityData.push(examCardItem);\r\n        }\r\n\r\n        return groupedExamGroups;\r\n    }\r\n\r\n    getLastSelectedExam(): string | null {\r\n        return sessionStorage.getItem('sidebar.lastSelectedItem.exam.byCourse.' + this.courseId);\r\n    }\r\n\r\n    toggleSidebar() {\r\n        this.isCollapsed = !this.isCollapsed;\r\n        this.courseOverviewService.setSidebarCollapseState('exam', this.isCollapsed);\r\n    }\r\n\r\n    updateSidebarData() {\r\n        this.sidebarData = {\r\n            groupByCategory: true,\r\n            sidebarType: 'exam',\r\n            storageId: 'exam',\r\n            groupedData: this.accordionExamGroups,\r\n            ungroupedData: this.sidebarExams,\r\n        };\r\n    }\r\n\r\n    prepareSidebarData() {\r\n        if (!this.course?.exams) {\r\n            return;\r\n        }\r\n\r\n        this.sortedRealExams = this.realExamsOfCourse.sort((a, b) => this.sortExamsByStartDate(a, b));\r\n        this.sortedTestExams = this.testExamsOfCourse.sort((a, b) => this.sortExamsByStartDate(a, b));\r\n\r\n        const sidebarRealExams = this.courseOverviewService.mapExamsToSidebarCardElements(this.sortedRealExams, this.getAllStudentExamsForRealExams());\r\n        const sidebarTestExams = this.courseOverviewService.mapExamsToSidebarCardElements(this.sortedTestExams);\r\n\r\n        this.sidebarExams = [...sidebarRealExams, ...sidebarTestExams];\r\n\r\n        this.accordionExamGroups = this.groupExamsByRealOrTest(this.sortedRealExams, this.sortedTestExams);\r\n        this.updateSidebarData();\r\n    }\r\n\r\n    onSubRouteDeactivate() {\r\n        if (this.route.firstChild) {\r\n            return;\r\n        }\r\n        this.navigateToExam();\r\n    }\r\n\r\n    getAllStudentExamsForRealExams(): StudentExam[] {\r\n        return [...this.studentExamsForRealExams.values()];\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between\">\r\n    @if (course) {\r\n        <div id=\"exam-sidebar-test\" [ngClass]=\"{ 'sidebar-collapsed': isCollapsed }\" [hidden]=\"isExamStarted\">\r\n            <jhi-sidebar\r\n                [itemSelected]=\"examSelected\"\r\n                [courseId]=\"courseId\"\r\n                [sidebarData]=\"sidebarData\"\r\n                [collapseState]=\"DEFAULT_COLLAPSE_STATE\"\r\n                [sidebarItemAlwaysShow]=\"DEFAULT_SHOW_ALWAYS\"\r\n            />\r\n        </div>\r\n\r\n        @if (examSelected) {\r\n            <div class=\"vw-100 module-bg rounded-3\" style=\"min-width: 200px\">\r\n                <router-outlet (deactivate)=\"onSubRouteDeactivate()\" />\r\n            </div>\r\n        } @else {\r\n            <div class=\"vw-100 module-bg rounded-3 p-3 d-flex justify-content-between\">\r\n                <div class=\"col-12 text-center my-auto\" jhiTranslate=\"artemisApp.courseOverview.exams.selectExam\"></div>\r\n            </div>\r\n        }\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSubRouteDeactivate", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275template", "CourseExamsComponent_Conditional_2_Conditional_6_Template", "CourseExamsComponent_Conditional_2_Conditional_7_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "isCollapsed", "isExamStarted", "examSelected", "courseId", "sidebarData", "DEFAULT_COLLAPSE_STATE", "DEFAULT_SHOW_ALWAYS", "\u0275\u0275conditional", "DEFAULT_UNIT_GROUPS", "real", "entityData", "test", "CourseExamsComponent", "route", "inject", "ActivatedRoute", "courseStorageService", "CourseStorageService", "serverDateService", "ArtemisServerDateService", "examParticipationService", "ExamParticipationService", "courseOverviewService", "CourseOverviewService", "router", "Router", "course", "parentParamSubscription", "courseUpdatesSubscription", "studentExamTestExamUpdateSubscription", "examStartedSubscription", "studentExams", "studentExamsForRealExams", "Map", "expandAttemptsMap", "realExamsOfCourse", "testExamsOfCourse", "faAngleUp", "faAngleDown", "faListAlt", "sortedRealExams", "sortedTestExams", "accordionExamGroups", "sidebarExams", "ngOnInit", "getSidebarCollapseStateFromStorage", "parent", "params", "subscribe", "Number", "examIsStarted$", "isStarted", "getCourse", "prepareSidebarData", "subscribeToCourseUpdates", "updateExams", "loadStudentExamsForTestExamsPerCourseAndPerUserForOverviewPage", "response", "exams", "filter", "exam", "testExam", "isVisible", "map", "id", "navigateToExam", "upcomingExam", "getUpcomingExam", "lastSelectedExam", "getLastSelectedExam", "examId", "firstChild", "snapshot", "navigate", "relativeTo", "replaceUrl", "sort", "se1", "se2", "sortExamsByStartDate", "has", "forEach", "set", "studentExamPromisesForRealExams", "realExam", "lastValueFrom", "getOwnStudentExam", "then", "studentExam", "Promise", "all", "ngOnDestroy", "unsubscribe", "visibleDate", "dayjs", "isBefore", "now", "getStudentExamForExamIdOrderedByIdReverse", "startedDate", "changeExpandAttemptList", "newValue", "get", "exam1", "exam2", "startDate", "isAfter", "groupExamsByRealOrTest", "realExams", "testExams", "groupedExamGroups", "cloneDeep", "examCardItem", "mapExamToSidebarCardElement", "push", "sessionStorage", "getItem", "toggleSidebar", "setSidebarCollapseState", "updateSidebarData", "groupByCategory", "sidebarType", "storageId", "groupedData", "ungroupedData", "a", "b", "sidebarRealExams", "mapExamsToSidebarCardElements", "getAllStudentExamsForRealExams", "sidebarTestExams", "values", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "CourseExamsComponent_Conditional_2_Template", "NgClass", "SidebarComponent", "RouterOutlet", "TranslateDirective", "styles"]
}
