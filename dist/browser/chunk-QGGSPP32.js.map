{
  "version": 3,
  "sources": ["src/main/webapp/app/complaints/complaint.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { ComplaintResponseService } from 'app/complaints/complaint-response.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ComplaintRequestDTO } from 'app/entities/complaint-request-dto.model';\r\n\r\nexport type EntityResponseType = HttpResponse<Complaint>;\r\nexport type EntityResponseTypeArray = HttpResponse<Complaint[]>;\r\n\r\nexport interface IComplaintService {\r\n    isComplaintLockedForLoggedInUser: (complaint: Complaint, exercise: Exercise) => boolean | undefined;\r\n    isComplaintLockedByLoggedInUser: (complaint: Complaint) => boolean | undefined;\r\n    isComplaintLocked: (complaint: Complaint) => boolean | undefined;\r\n    create: (complaint: Complaint, examId: number) => Observable<EntityResponseType>;\r\n    findBySubmissionId: (participationId: number) => Observable<EntityResponseType>;\r\n    getComplaintsForTestRun: (exerciseId: number) => Observable<EntityResponseTypeArray>;\r\n    findAllByTutorIdForCourseId: (tutorId: number, courseId: number, complaintType: ComplaintType) => Observable<EntityResponseTypeArray>;\r\n    findAllByTutorIdForExerciseId: (tutorId: number, exerciseId: number, complaintType: ComplaintType) => Observable<EntityResponseTypeArray>;\r\n    findAllByCourseId: (courseId: number, complaintType: ComplaintType) => Observable<EntityResponseTypeArray>;\r\n    findAllByCourseIdAndExamId: (courseId: number, examId: number) => Observable<EntityResponseTypeArray>;\r\n    findAllByExerciseId: (exerciseId: number, complaintType: ComplaintType) => Observable<EntityResponseTypeArray>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComplaintService implements IComplaintService {\r\n    private http = inject(HttpClient);\r\n    private complaintResponseService = inject(ComplaintResponseService);\r\n\r\n    private resourceUrl = 'api/assessment/complaints';\r\n\r\n    /**\r\n     * Checks if a complaint is locked for the currently logged-in user\r\n     *\r\n     * A complaint is locked if the associated complaint response is locked\r\n     *\r\n     * @param complaint complaint to check the lock status for\r\n     * @param exercise exercise used to find out if currently logged-in user is instructor\r\n     */\r\n    isComplaintLockedForLoggedInUser(complaint: Complaint, exercise: Exercise) {\r\n        if (complaint.complaintResponse && complaint.accepted === undefined) {\r\n            return this.complaintResponseService.isComplaintResponseLockedForLoggedInUser(complaint.complaintResponse, exercise);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the lock on a complaint is active and if the currently logged-in user is the creator of the lock\r\n     * @param complaint complaint to check the lock status for\r\n     */\r\n    isComplaintLockedByLoggedInUser(complaint: Complaint) {\r\n        if (complaint.complaintResponse && complaint.accepted === undefined) {\r\n            return this.complaintResponseService.isComplaintResponseLockedByLoggedInUser(complaint.complaintResponse);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a complaint is locked\r\n     * @param complaint complaint to check lock status for\r\n     */\r\n    isComplaintLocked(complaint: Complaint) {\r\n        if (complaint.complaintResponse && complaint.accepted === undefined) {\r\n            return complaint.complaintResponse.isCurrentlyLocked;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new complaint.\r\n     * @param complaintRequest\r\n     */\r\n    create(complaintRequest: ComplaintRequestDTO): Observable<EntityResponseType> {\r\n        return this.http\r\n            .post<Complaint>(this.resourceUrl, complaintRequest, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertComplaintEntityResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find complaint by Submission id.\r\n     * @param submissionId\r\n     */\r\n    findBySubmissionId(submissionId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Complaint>(`${this.resourceUrl}?submissionId=${submissionId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertComplaintEntityResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find complaints for instructor for specified test run exercise (complaintType == 'COMPLAINT').\r\n     * @param exerciseId\r\n     */\r\n    getComplaintsForTestRun(exerciseId: number): Observable<EntityResponseTypeArray> {\r\n        return this.http\r\n            .get<Complaint[]>(`${this.resourceUrl}?exerciseId=${exerciseId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseTypeArray) => this.convertComplaintEntityResponseArrayDateFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find all complaints by tutor id, course id and complaintType.\r\n     * @param tutorId\r\n     * @param courseId\r\n     * @param complaintType\r\n     */\r\n    findAllByTutorIdForCourseId(tutorId: number, courseId: number, complaintType: ComplaintType): Observable<EntityResponseTypeArray> {\r\n        const url = `${this.resourceUrl}?courseId=${courseId}&complaintType=${complaintType}&tutorId=${tutorId}`;\r\n        return this.requestComplaintsFromUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Find all complaints by course id and complaintType without student's information\r\n     * @param courseId - the course id for which the complaints should be retrieved\r\n     * @param complaintType - the type of complaint\r\n     */\r\n    findAllWithoutStudentInformationForCourseId(courseId: number, complaintType: ComplaintType): Observable<EntityResponseTypeArray> {\r\n        const url = `${this.resourceUrl}?courseId=${courseId}&complaintType=${complaintType}&allComplaintsForTutor=true`;\r\n        return this.requestComplaintsFromUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Find all complaints by tutor id, exercise id and complaintType.\r\n     * @param tutorId\r\n     * @param exerciseId\r\n     * @param complaintType\r\n     */\r\n    findAllByTutorIdForExerciseId(tutorId: number, exerciseId: number, complaintType: ComplaintType): Observable<EntityResponseTypeArray> {\r\n        const url = `${this.resourceUrl}?exerciseId=${exerciseId}&complaintType=${complaintType}&tutorId=${tutorId}`;\r\n        return this.requestComplaintsFromUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Find all complaints by course id and complaintType.\r\n     * @param courseId\r\n     * @param complaintType\r\n     */\r\n    findAllByCourseId(courseId: number, complaintType: ComplaintType): Observable<EntityResponseTypeArray> {\r\n        const url = `${this.resourceUrl}?courseId=${courseId}&complaintType=${complaintType}`;\r\n        return this.requestComplaintsFromUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Find all complaints by course id and exam id.\r\n     * @param courseId\r\n     * @param examId\r\n     */\r\n    findAllByCourseIdAndExamId(courseId: number, examId: number): Observable<EntityResponseTypeArray> {\r\n        const url = `${this.resourceUrl}?courseId=${courseId}&examId=${examId}`;\r\n        return this.requestComplaintsFromUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Find all complaints by exercise id and complaintType.\r\n     * @param exerciseId\r\n     * @param complaintType\r\n     */\r\n    findAllByExerciseId(exerciseId: number, complaintType: ComplaintType): Observable<EntityResponseTypeArray> {\r\n        const url = `${this.resourceUrl}?exerciseId=${exerciseId}&complaintType=${complaintType}`;\r\n        return this.requestComplaintsFromUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Returns the time needed to evaluate the complaint. If it hasn't been evaluated yet, the difference between the submission time and now is used.\r\n     * @param complaint for which the response time should be calculated\r\n     * @return returns the passed time in seconds\r\n     */\r\n    getResponseTimeInSeconds(complaint: Complaint): number {\r\n        if (complaint.accepted !== undefined) {\r\n            return complaint.complaintResponse?.submittedTime?.diff(complaint.submittedTime, 'seconds') || NaN;\r\n        } else {\r\n            return dayjs().diff(complaint.submittedTime, 'seconds');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the complaint should be highlighted. This is the case if the complaint hasn't been reviewed and was submitted more than one week ago.\r\n     * @param complaint for which it should be determined if highlighting is needed\r\n     * @return returns true iff the complaint should be highlighted\r\n     */\r\n    shouldHighlightComplaint(complaint: Complaint): boolean {\r\n        if (complaint.accepted !== undefined) {\r\n            return false;\r\n        }\r\n\r\n        const complaintSubmittedTime = complaint.submittedTime;\r\n        if (complaintSubmittedTime) {\r\n            return dayjs().diff(complaintSubmittedTime, 'days') > 7;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Calculates the date until which a complaint can be filed at least\r\n     * @param exercise for which the student can complain\r\n     * @param complaintTimeFrame number of days the student has to file the complaint\r\n     * @param result of the student in the exercise that might receive complain\r\n     * @param studentParticipation the participation which might contain an individual due date\r\n     * @return the date until which the student can complain\r\n     */\r\n    static getIndividualComplaintDueDate(\r\n        exercise: Exercise,\r\n        complaintTimeFrame: number,\r\n        result: Result | undefined,\r\n        studentParticipation?: StudentParticipation,\r\n    ): dayjs.Dayjs | undefined {\r\n        // No complaints if there is no result or the exercise does not support complaints\r\n        if (\r\n            !result?.completionDate ||\r\n            (exercise.assessmentType === AssessmentType.AUTOMATIC && !exercise.allowComplaintsForAutomaticAssessments) ||\r\n            (!exercise.allowComplaintsForAutomaticAssessments && !result.rated) ||\r\n            exercise.type === ExerciseType.QUIZ\r\n        ) {\r\n            return undefined;\r\n        }\r\n\r\n        const relevantDueDate = studentParticipation?.individualDueDate ?? exercise.dueDate;\r\n        const possibleComplaintStartDates = [dayjs(result.completionDate)];\r\n        if (relevantDueDate) {\r\n            possibleComplaintStartDates.push(dayjs(relevantDueDate));\r\n        }\r\n        if (exercise.assessmentDueDate) {\r\n            possibleComplaintStartDates.push(dayjs(exercise.assessmentDueDate));\r\n        }\r\n        const complaintStartDate = dayjs.max(possibleComplaintStartDates);\r\n\r\n        if (!complaintStartDate || dayjs().isBefore(complaintStartDate)) {\r\n            return undefined;\r\n        }\r\n        return complaintStartDate.add(complaintTimeFrame, 'days');\r\n    }\r\n\r\n    private requestComplaintsFromUrl(url: string): Observable<EntityResponseTypeArray> {\r\n        return this.http.get<Complaint[]>(url, { observe: 'response' }).pipe(map((res: EntityResponseTypeArray) => this.convertComplaintEntityResponseArrayDateFromServer(res)));\r\n    }\r\n\r\n    private convertComplaintEntityResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.submittedTime = res.body.submittedTime ? dayjs(res.body.submittedTime) : undefined;\r\n            if (res.body?.complaintResponse) {\r\n                this.complaintResponseService.convertComplaintResponseDatesFromServer(res.body.complaintResponse);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertComplaintEntityResponseArrayDateFromServer(res: EntityResponseTypeArray): EntityResponseTypeArray {\r\n        if (res.body) {\r\n            res.body.forEach((complaint) => {\r\n                complaint.submittedTime = convertDateFromServer(complaint.submittedTime);\r\n                if (complaint.complaintResponse) {\r\n                    this.complaintResponseService.convertComplaintResponseDatesFromServer(complaint.complaintResponse);\r\n                }\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ComplaintService", "http", "inject", "HttpClient", "complaintResponseService", "ComplaintResponseService", "resourceUrl", "isComplaintLockedForLoggedInUser", "complaint", "exercise", "complaintResponse", "accepted", "undefined", "isComplaintResponseLockedForLoggedInUser", "isComplaintLockedByLoggedInUser", "isComplaintResponseLockedByLoggedInUser", "isComplaintLocked", "isCurrentlyLocked", "create", "complaintRequest", "post", "observe", "pipe", "map", "res", "convertComplaintEntityResponseDatesFromServer", "findBySubmissionId", "submissionId", "get", "getComplaintsForTestRun", "exerciseId", "convertComplaintEntityResponseArrayDateFromServer", "findAllByTutorIdForCourseId", "tutorId", "courseId", "complaintType", "url", "requestComplaintsFromUrl", "findAllWithoutStudentInformationForCourseId", "findAllByTutorIdForExerciseId", "findAllByCourseId", "findAllByCourseIdAndExamId", "examId", "findAllByExerciseId", "getResponseTimeInSeconds", "submittedTime", "diff", "NaN", "dayjs", "shouldHighlightComplaint", "complaintSubmittedTime", "getIndividualComplaintDueDate", "complaintTimeFrame", "result", "studentParticipation", "completionDate", "assessmentType", "AssessmentType", "AUTOMATIC", "allowComplaintsForAutomaticAssessments", "rated", "type", "ExerciseType", "QUIZ", "relevantDueDate", "individualDueDate", "dueDate", "possibleComplaintStartDates", "push", "assessmentDueDate", "complaintStartDate", "max", "isBefore", "add", "body", "convertComplaintResponseDatesFromServer", "forEach", "convertDateFromServer", "factory", "\u0275fac", "providedIn"]
}
