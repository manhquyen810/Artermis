{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/health/health.service.ts", "src/main/webapp/app/admin/health/health-modal.component.ts", "src/main/webapp/app/admin/health/health-modal.component.html", "src/main/webapp/app/admin/health/health.component.ts", "src/main/webapp/app/admin/health/health.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Health } from 'app/admin/health/health.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HealthService {\r\n    private http = inject(HttpClient);\r\n\r\n    checkHealth(): Observable<Health> {\r\n        return this.http.get<Health>('management/health');\r\n    }\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HealthDetails, HealthKey } from 'app/admin/health/health.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-health-modal',\r\n    templateUrl: './health-modal.component.html',\r\n    imports: [TranslateDirective, KeyValuePipe, ArtemisTranslatePipe],\r\n})\r\nexport class HealthModalComponent {\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    health?: { key: HealthKey; value: HealthDetails };\r\n\r\n    readableValue(value: any): string {\r\n        if (this.health?.key === 'diskSpace') {\r\n            // Should display storage space in a human-readable unit\r\n            const val = value / 1073741824;\r\n            if (val > 1) {\r\n                return `${val.toFixed(2)} GB`;\r\n            }\r\n            return `${(value / 1048576).toFixed(2)} MB`;\r\n        }\r\n\r\n        if (typeof value === 'object') {\r\n            return JSON.stringify(value);\r\n        }\r\n        return String(value);\r\n    }\r\n\r\n    dismiss(): void {\r\n        this.activeModal.dismiss();\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    @if (health) {\r\n        <h4 class=\"modal-title\" id=\"showHealthLabel\">\r\n            {{ 'health.indicator.' + health.key | artemisTranslate }}\r\n        </h4>\r\n    }\r\n    <button aria-label=\"Close\" data-dismiss=\"modal\" class=\"btn-close\" type=\"button\" (click)=\"dismiss()\"></button>\r\n</div>\r\n<div class=\"modal-body pad\">\r\n    @if (health) {\r\n        <div>\r\n            <h5 jhiTranslate=\"health.details.properties\"></h5>\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped\" aria-describedby=\"showHealthLabel\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\" class=\"text-left\" jhiTranslate=\"health.details.name\"></th>\r\n                            <th scope=\"col\" class=\"text-left\" jhiTranslate=\"health.details.value\"></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (healthDetail of health.value.details! | keyvalue; track healthDetail) {\r\n                            <tr>\r\n                                <td class=\"text-left\">{{ healthDetail.key }}</td>\r\n                                <td class=\"text-left\">{{ readableValue(healthDetail.value) }}</td>\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button data-dismiss=\"modal\" class=\"btn btn-secondary float-left\" type=\"button\" (click)=\"dismiss()\">Done</button>\r\n</div>\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { HealthService } from './health.service';\r\nimport { HealthModalComponent } from './health-modal.component';\r\nimport { Health, HealthDetails, HealthStatus } from 'app/admin/health/health.model';\r\nimport { faEye, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { KeyValuePipe, NgClass } from '@angular/common';\r\nimport { JhiConnectionStatusComponent } from 'app/shared/connection-status/connection-status.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-health',\r\n    templateUrl: './health.component.html',\r\n    imports: [TranslateDirective, FaIconComponent, NgClass, JhiConnectionStatusComponent, KeyValuePipe, ArtemisTranslatePipe],\r\n})\r\nexport class HealthComponent implements OnInit {\r\n    private modalService = inject(NgbModal);\r\n    private healthService = inject(HealthService);\r\n\r\n    health?: Health;\r\n\r\n    // Icons\r\n    faSync = faSync;\r\n    faEye = faEye;\r\n\r\n    ngOnInit() {\r\n        this.refresh();\r\n    }\r\n\r\n    getBadgeClass(statusState: HealthStatus) {\r\n        if (statusState === 'UP') {\r\n            return 'bg-success';\r\n        }\r\n        return 'bg-danger';\r\n    }\r\n\r\n    refresh(): void {\r\n        this.healthService.checkHealth().subscribe({\r\n            next: (health) => (this.health = health),\r\n            error: (error: HttpErrorResponse) => {\r\n                if (error.status === 503) {\r\n                    this.health = error.error;\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    showHealth(health: { key: string; value: HealthDetails }): void {\r\n        const modalRef = this.modalService.open(HealthModalComponent);\r\n        modalRef.componentInstance.health = health;\r\n    }\r\n}\r\n", "<div>\r\n    <h2>\r\n        <span id=\"health-page-heading\" jhiTranslate=\"health.title\"></span>\r\n        <button class=\"btn btn-primary float-end\" (click)=\"refresh()\"><fa-icon [icon]=\"faSync\" /> <span jhiTranslate=\"health.refresh.button\"></span></button>\r\n    </h2>\r\n    <div class=\"table-responsive\">\r\n        <table id=\"healthCheck\" class=\"table table-striped\" aria-describedby=\"health-page-heading\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" jhiTranslate=\"health.table.service\"></th>\r\n                    <th scope=\"col\" class=\"text-center\" jhiTranslate=\"health.table.status\"></th>\r\n                    <th scope=\"col\" class=\"text-center\" jhiTranslate=\"health.details.details\"></th>\r\n                </tr>\r\n            </thead>\r\n            @if (health) {\r\n                <tbody>\r\n                    @for (componentHealth of health.components | keyvalue; track componentHealth) {\r\n                        <tr [id]=\"componentHealth.key\">\r\n                            <td>\r\n                                {{ 'health.indicator.' + componentHealth.key | artemisTranslate }}\r\n                                @if (componentHealth.value?.details?.url) {\r\n                                    <a class=\"badge bg-info\" [href]=\"componentHealth.value!.details!.url\">\r\n                                        {{ componentHealth.value!.details!.url }}\r\n                                    </a>\r\n                                }\r\n                            </td>\r\n                            <td class=\"status text-center\">\r\n                                <span class=\"badge\" [ngClass]=\"getBadgeClass(componentHealth.value!.status)\" jhiTranslate=\"{{ 'health.status.' + componentHealth.value!.status }}\">\r\n                                    {{ componentHealth.value!.status }}\r\n                                </span>\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                                @if (componentHealth.value!.details) {\r\n                                    <a class=\"hand\" (click)=\"showHealth({ key: componentHealth.key, value: componentHealth.value! })\">\r\n                                        <fa-icon [icon]=\"faEye\" />\r\n                                    </a>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                    <tr id=\"websocketConnection\">\r\n                        <td>Websocket Connection (Client -> Server)</td>\r\n                        <td class=\"status text-center\">\r\n                            <jhi-connection-status />\r\n                        </td>\r\n                        <td class=\"text-center\">-</td>\r\n                    </tr>\r\n                </tbody>\r\n            }\r\n        </table>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["HealthService", "http", "inject", "HttpClient", "checkHealth", "get", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "ctx_r0", "health", "key", "\u0275\u0275textInterpolate", "healthDetail_r2", "readableValue", "value", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "HealthModalComponent_Conditional_8_For_22_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "details", "HealthModalComponent", "activeModal", "inject", "NgbActiveModal", "val", "toFixed", "JSON", "stringify", "String", "dismiss", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "HealthModalComponent_Conditional_2_Template", "\u0275\u0275listener", "HealthModalComponent_Conditional_8_Template", "\u0275\u0275conditional", "TranslateDirective", "KeyValuePipe", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "componentHealth_r1", "value", "details", "url", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate1", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "$implicit", "ctx_r2", "\u0275\u0275resetView", "showHealth", "key", "\u0275\u0275element", "faEye", "\u0275\u0275template", "HealthComponent_Conditional_28_For_4_Conditional_6_Template", "HealthComponent_Conditional_28_For_4_Conditional_16_Template", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "\u0275\u0275propertyInterpolate", "status", "getBadgeClass", "\u0275\u0275repeaterCreate", "HealthComponent_Conditional_28_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "health", "components", "HealthComponent", "modalService", "inject", "NgbModal", "healthService", "HealthService", "faSync", "ngOnInit", "refresh", "statusState", "checkHealth", "subscribe", "next", "error", "modalRef", "open", "HealthModalComponent", "componentInstance", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "HealthComponent_Conditional_28_Template", "TranslateDirective", "FaIconComponent", "NgClass", "JhiConnectionStatusComponent", "KeyValuePipe", "ArtemisTranslatePipe", "encapsulation"]
}
