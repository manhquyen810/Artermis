{
  "version": 3,
  "sources": ["src/main/webapp/app/course/tutorial-groups/tutorial-groups-management/tutorial-groups/crud/edit-tutorial-group/edit-tutorial-group.component.ts", "src/main/webapp/app/course/tutorial-groups/tutorial-groups-management/tutorial-groups/crud/edit-tutorial-group/edit-tutorial-group.component.html"],
  "sourcesContent": ["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { TutorialGroupFormComponent, TutorialGroupFormData } from '../tutorial-group-form/tutorial-group-form.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Subject, combineLatest } from 'rxjs';\r\nimport { finalize, switchMap, take, takeUntil } from 'rxjs/operators';\r\nimport { TutorialGroupsService } from 'app/course/tutorial-groups/services/tutorial-groups.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { TutorialGroupSchedule } from 'app/entities/tutorial-group/tutorial-group-schedule.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { LoadingIndicatorContainerComponent } from 'app/shared/loading-indicator-container/loading-indicator-container.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-edit-tutorial-group',\r\n    templateUrl: './edit-tutorial-group.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [LoadingIndicatorContainerComponent, TranslateDirective, TutorialGroupFormComponent],\r\n})\r\nexport class EditTutorialGroupComponent implements OnInit, OnDestroy {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private tutorialGroupService = inject(TutorialGroupsService);\r\n    private alertService = inject(AlertService);\r\n    private cdr = inject(ChangeDetectorRef);\r\n\r\n    ngUnsubscribe = new Subject<void>();\r\n\r\n    isLoading = false;\r\n    tutorialGroup: TutorialGroup;\r\n    tutorialGroupSchedule: TutorialGroupSchedule;\r\n    formData: TutorialGroupFormData;\r\n    tutorialGroupId: number;\r\n    course: Course;\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        combineLatest([this.activatedRoute.paramMap, this.activatedRoute.data])\r\n            .pipe(\r\n                take(1),\r\n                switchMap(([params, { course }]) => {\r\n                    this.tutorialGroupId = Number(params.get('tutorialGroupId'));\r\n                    this.course = course;\r\n                    return this.tutorialGroupService.getOneOfCourse(this.course.id!, this.tutorialGroupId);\r\n                }),\r\n                finalize(() => (this.isLoading = false)),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (tutorialGroupResult) => {\r\n                    if (tutorialGroupResult.body) {\r\n                        this.tutorialGroup = tutorialGroupResult.body;\r\n                        this.formData = {\r\n                            title: this.tutorialGroup.title,\r\n                            teachingAssistant: this.tutorialGroup.teachingAssistant,\r\n                            additionalInformation: this.tutorialGroup.additionalInformation,\r\n                            capacity: this.tutorialGroup.capacity,\r\n                            isOnline: this.tutorialGroup.isOnline,\r\n                            language: this.tutorialGroup.language,\r\n                            campus: this.tutorialGroup.campus,\r\n                        };\r\n                        if (this.tutorialGroup.tutorialGroupSchedule) {\r\n                            this.tutorialGroupSchedule = this.tutorialGroup.tutorialGroupSchedule;\r\n                            this.formData.schedule = {\r\n                                period: [this.tutorialGroupSchedule.validFromInclusive!.toDate(), this.tutorialGroupSchedule.validToInclusive!.toDate()],\r\n                                repetitionFrequency: this.tutorialGroupSchedule.repetitionFrequency,\r\n                                startTime: this.tutorialGroupSchedule.startTime,\r\n                                endTime: this.tutorialGroupSchedule.endTime,\r\n                                dayOfWeek: this.tutorialGroupSchedule.dayOfWeek,\r\n                                location: this.tutorialGroupSchedule.location,\r\n                            };\r\n                        }\r\n                    }\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n\r\n    updateTutorialGroup(formData: TutorialGroupFormData) {\r\n        const { title, teachingAssistant, additionalInformation, capacity, isOnline, language, campus, schedule, notificationText, updateTutorialGroupChannelName } = formData;\r\n        const updatedTutorialGroup = new TutorialGroup();\r\n        updatedTutorialGroup.id = this.tutorialGroup.id;\r\n        updatedTutorialGroup.title = title;\r\n        updatedTutorialGroup.teachingAssistant = teachingAssistant;\r\n        updatedTutorialGroup.additionalInformation = additionalInformation;\r\n        updatedTutorialGroup.capacity = capacity;\r\n        updatedTutorialGroup.isOnline = isOnline;\r\n        updatedTutorialGroup.language = language;\r\n        updatedTutorialGroup.campus = campus;\r\n        if (schedule) {\r\n            updatedTutorialGroup.tutorialGroupSchedule = new TutorialGroupSchedule();\r\n            if (this.tutorialGroup.tutorialGroupSchedule) {\r\n                updatedTutorialGroup.tutorialGroupSchedule.id = this.tutorialGroup.tutorialGroupSchedule.id;\r\n            }\r\n            const { endTime, startTime, dayOfWeek, repetitionFrequency, period, location } = schedule;\r\n            if (period && period.length === 2) {\r\n                updatedTutorialGroup.tutorialGroupSchedule.validFromInclusive = dayjs(period[0]);\r\n                updatedTutorialGroup.tutorialGroupSchedule.validToInclusive = dayjs(period[1]);\r\n            }\r\n            updatedTutorialGroup.tutorialGroupSchedule.dayOfWeek = dayOfWeek;\r\n            updatedTutorialGroup.tutorialGroupSchedule.startTime = startTime;\r\n            updatedTutorialGroup.tutorialGroupSchedule.endTime = endTime;\r\n            updatedTutorialGroup.tutorialGroupSchedule.repetitionFrequency = repetitionFrequency;\r\n            updatedTutorialGroup.tutorialGroupSchedule.location = location;\r\n        } else {\r\n            updatedTutorialGroup.tutorialGroupSchedule = undefined;\r\n        }\r\n\r\n        this.isLoading = true;\r\n        this.tutorialGroupService\r\n            .update(this.course.id!, this.tutorialGroupId, updatedTutorialGroup, notificationText, updateTutorialGroupChannelName)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                    this.router.navigate(['/course-management', this.course.id!, 'tutorial-groups']);\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                error: (res: HttpErrorResponse) => this.onError(res),\r\n            });\r\n    }\r\n\r\n    onError(httpErrorResponse: HttpErrorResponse) {\r\n        const error = httpErrorResponse.error;\r\n        if (error && error.errorKey && error.errorKey === 'scheduleOverlapsWithSession') {\r\n            this.alertService.error(error.message, error.params);\r\n        } else {\r\n            this.alertService.error('error.unexpectedError', {\r\n                error: httpErrorResponse.message,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n", "<jhi-loading-indicator-container [isLoading]=\"isLoading\">\r\n    <h3 jhiTranslate=\"artemisApp.pages.editTutorialGroup.title\"></h3>\r\n    @if (course) {\r\n        <jhi-tutorial-group-form [formData]=\"formData\" [course]=\"course\" [isEditMode]=\"true\" (formSubmitted)=\"updateTutorialGroup($event)\" />\r\n    }\r\n</jhi-loading-indicator-container>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateTutorialGroup", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "formData", "course", "EditTutorialGroupComponent", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "tutorialGroupService", "TutorialGroupsService", "alertService", "AlertService", "cdr", "ChangeDetectorRef", "ngUnsubscribe", "Subject", "isLoading", "tutorialGroup", "tutorialGroupSchedule", "tutorialGroupId", "ngOnInit", "combineLatest", "paramMap", "data", "pipe", "take", "switchMap", "params", "Number", "get", "getOneOfCourse", "id", "finalize", "takeUntil", "subscribe", "next", "tutorialGroupResult", "body", "title", "teachingAssistant", "additionalInformation", "capacity", "isOnline", "language", "campus", "schedule", "period", "validFromInclusive", "toDate", "validToInclusive", "repetitionFrequency", "startTime", "endTime", "dayOfWeek", "location", "error", "res", "onError", "add", "detectChanges", "notificationText", "updateTutorialGroupChannelName", "updatedTutorialGroup", "TutorialGroup", "TutorialGroupSchedule", "length", "dayjs", "undefined", "update", "navigate", "httpErrorResponse", "errorKey", "message", "ngOnDestroy", "complete", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275template", "EditTutorialGroupComponent_Conditional_4_Template", "\u0275\u0275conditional", "LoadingIndicatorContainerComponent", "TranslateDirective", "TutorialGroupFormComponent", "encapsulation", "changeDetection"]
}
