{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/range-slider/range-slider.component.ts", "src/main/webapp/app/shared/range-slider/range-slider.component.html"],
  "sourcesContent": ["import { Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, inject } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nconst DEFAULT_STEP = 1;\r\n\r\n@Component({\r\n    selector: 'jhi-range-slider',\r\n    templateUrl: './range-slider.component.html',\r\n    styleUrls: ['./range-slider.component.scss'],\r\n    imports: [FormsModule, ReactiveFormsModule],\r\n})\r\nexport class RangeSliderComponent implements OnInit, OnDestroy {\r\n    private elRef = inject(ElementRef);\r\n\r\n    @Input() generalMaxValue: number;\r\n    @Input() generalMinValue: number;\r\n    @Input() step: number = DEFAULT_STEP;\r\n\r\n    /** When extending the supported label symbols you might have to adjust the logic for */\r\n    @Input() labelSymbol?: '%';\r\n\r\n    @Input() selectedMinValue: number;\r\n    @Input() selectedMaxValue: number;\r\n    @Output() selectedMinValueChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() selectedMaxValueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n    rangeInputElements?: NodeList;\r\n    eventListeners: { element: HTMLInputElement; listener: (event: Event) => void }[] = [];\r\n\r\n    sliderMinPercentage: number;\r\n    sliderMaxPercentage: number;\r\n\r\n    valueRange: number;\r\n\r\n    /** Ensures that the label is placed centered underneath the range thumb */\r\n    LABEL_MARGIN = 0.4;\r\n\r\n    /**\r\n     * By trial and error it was found out that the slider thumbs are moving on\r\n     * 97% of the width compared to the colored bar that is displayed between the two thumbs.\r\n     *\r\n     * This issue is resolved with this factor when multiplied to {@link sliderMinPercentage} and {@link sliderMaxPercentage}\r\n     * to calculate the position of the label, as it is not the exact same position as the thumbs.\r\n     *\r\n     * <i>\r\n     * To reproduce:\r\n     * If you inspect the progress bar in the initial state you will see that it is 100% wide and ends at the left end of\r\n     * the minimum range thumb.\r\n     * However, if you move the minimum thumb to the right (as far as possible), you will notice that the progress bar\r\n     * ends at the right end of the range thumb. - This is the problem that we address with this factor.</i>\r\n     */\r\n    SLIDER_THUMB_LABEL_POSITION_ADJUSTMENT_FACTOR = 0.97;\r\n\r\n    ngOnInit() {\r\n        this.rangeInputElements = this.elRef.nativeElement.querySelectorAll('.range-input input');\r\n\r\n        this.rangeInputElements?.forEach((input: HTMLInputElement) => {\r\n            const listener = (event: InputEvent) => {\r\n                this.ensureMinValueIsSmallerThanMaxValueViceVersa(event);\r\n            };\r\n            input.addEventListener('input', listener);\r\n            this.eventListeners.push({ element: input, listener });\r\n        });\r\n        this.valueRange = this.generalMaxValue - this.generalMinValue;\r\n\r\n        this.LABEL_MARGIN = this.getLabelMargin();\r\n\r\n        this.updateMinPercentage();\r\n        this.updateMaxPercentage();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.eventListeners.forEach(({ element, listener }) => {\r\n            element.removeEventListener('input', listener);\r\n        });\r\n    }\r\n\r\n    updateMinPercentage() {\r\n        let newMinSelection = this.selectedMinValue;\r\n\r\n        const tryingToSelectInvalidValue = this.selectedMinValue >= this.selectedMaxValue;\r\n        if (tryingToSelectInvalidValue) {\r\n            newMinSelection = this.selectedMaxValue - this.step;\r\n        }\r\n\r\n        // noinspection UnnecessaryLocalVariableJS: not inlined because the variable name improves readability\r\n        const newMinPercentage = ((newMinSelection - this.generalMinValue) / this.valueRange) * 100;\r\n        this.sliderMinPercentage = newMinPercentage;\r\n    }\r\n\r\n    updateMaxPercentage() {\r\n        let newMaxSelection = this.selectedMaxValue;\r\n\r\n        const tryingToSelectInvalidValue = this.selectedMaxValue <= this.selectedMinValue;\r\n        if (tryingToSelectInvalidValue) {\r\n            newMaxSelection = this.selectedMinValue + this.step;\r\n        }\r\n\r\n        // noinspection UnnecessaryLocalVariableJS: not inlined because the variable name improves readability\r\n        const newMaxPercentage = 100 - ((newMaxSelection - this.generalMinValue) / this.valueRange) * 100;\r\n        this.sliderMaxPercentage = newMaxPercentage;\r\n    }\r\n\r\n    onSelectedMinValueChanged(event: Event): void {\r\n        const updatedMinValue = this.ensureMinValueIsSmallerThanMaxValueViceVersa(event);\r\n        this.selectedMinValueChange.emit(updatedMinValue);\r\n    }\r\n\r\n    onSelectedMaxValueChanged(event: Event): void {\r\n        const updatedMaxValue = this.ensureMinValueIsSmallerThanMaxValueViceVersa(event);\r\n        this.selectedMaxValueChange.emit(updatedMaxValue);\r\n    }\r\n\r\n    private ensureMinValueIsSmallerThanMaxValueViceVersa(event: Event): number {\r\n        const input = event.target as HTMLInputElement;\r\n        const minSliderIsUpdated = input.className.includes('range-min');\r\n\r\n        if (minSliderIsUpdated) {\r\n            if (this.selectedMinValue >= this.selectedMaxValue) {\r\n                this.selectedMinValue = this.selectedMaxValue - this.step;\r\n            }\r\n            return this.selectedMinValue;\r\n        }\r\n\r\n        if (this.selectedMaxValue <= this.selectedMinValue) {\r\n            this.selectedMaxValue = this.selectedMinValue + this.step;\r\n        }\r\n        return this.selectedMaxValue;\r\n    }\r\n\r\n    /**\r\n     * @return margin to labels considering the adjustments needed by the added {@link labelSymbol}\r\n     */\r\n    private getLabelMargin() {\r\n        const BASE_LABEL_MARGIN = 0.4; // should be approximately the width of 1 symbol\r\n        const shiftToTheLeftDueToAddedSymbols = BASE_LABEL_MARGIN * (this.labelSymbol?.length ?? 0);\r\n\r\n        return BASE_LABEL_MARGIN - shiftToTheLeftDueToAddedSymbols;\r\n    }\r\n}\r\n", "<div class=\"slider m-2 mb-5\">\r\n    <div class=\"range-input\">\r\n        <div class=\"progress\" [style.left.%]=\"sliderMinPercentage\" [style.right.%]=\"sliderMaxPercentage\"></div>\r\n        <span class=\"slider-value\" [style.left.%]=\"sliderMinPercentage * SLIDER_THUMB_LABEL_POSITION_ADJUSTMENT_FACTOR\" [style.margin-left]=\"LABEL_MARGIN + 'rem'\"\r\n            >{{ selectedMinValue }}{{ labelSymbol }}</span\r\n        >\r\n        <span class=\"slider-value\" [style.right.%]=\"sliderMaxPercentage * SLIDER_THUMB_LABEL_POSITION_ADJUSTMENT_FACTOR\" [style.margin-right]=\"LABEL_MARGIN + 'rem'\"\r\n            >{{ selectedMaxValue }}{{ labelSymbol }}</span\r\n        >\r\n\r\n        <input\r\n            type=\"range\"\r\n            [min]=\"generalMinValue\"\r\n            [max]=\"generalMaxValue\"\r\n            [(ngModel)]=\"selectedMinValue\"\r\n            class=\"range-min\"\r\n            [step]=\"step\"\r\n            (change)=\"onSelectedMinValueChanged($event)\"\r\n            (input)=\"updateMinPercentage()\"\r\n        />\r\n        <input\r\n            type=\"range\"\r\n            [min]=\"generalMinValue\"\r\n            [max]=\"generalMaxValue\"\r\n            [(ngModel)]=\"selectedMaxValue\"\r\n            class=\"range-max\"\r\n            [step]=\"step\"\r\n            (change)=\"onSelectedMaxValueChanged($event)\"\r\n            (input)=\"updateMaxPercentage()\"\r\n        />\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["DEFAULT_STEP", "RangeSliderComponent", "elRef", "inject", "ElementRef", "generalMaxValue", "generalMinValue", "step", "labelSymbol", "selectedMinValue", "selectedMaxValue", "selectedMinValueChange", "EventEmitter", "selectedMaxValueChange", "rangeInputElements", "eventListeners", "sliderMinPercentage", "sliderMaxPercentage", "valueRange", "LABEL_MARGIN", "SLIDER_THUMB_LABEL_POSITION_ADJUSTMENT_FACTOR", "ngOnInit", "nativeElement", "querySelectorAll", "forEach", "input", "listener", "event", "ensureMinValueIsSmallerThanMaxValueViceVersa", "addEventListener", "push", "element", "getLabelMargin", "updateMinPercentage", "updateMaxPercentage", "ngOnDestroy", "removeEventListener", "newMinSelection", "newMinPercentage", "newMaxSelection", "newMaxPercentage", "onSelectedMinValueChanged", "updatedMinValue", "emit", "onSelectedMaxValueChanged", "updatedMaxValue", "target", "className", "includes", "BASE_LABEL_MARGIN", "length", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275listener", "\u0275\u0275advance", "\u0275\u0275styleProp", "\u0275\u0275textInterpolate2", "\u0275\u0275property", "\u0275\u0275twoWayProperty", "FormsModule", "DefaultValueAccessor", "RangeValueAccessor", "NgControlStatus", "NgModel", "ReactiveFormsModule", "styles"]
}
