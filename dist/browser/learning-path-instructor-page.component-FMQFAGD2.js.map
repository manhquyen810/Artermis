{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/competency/learning-path-health.model.ts", "src/main/webapp/app/course/learning-paths/components/learning-paths-state/learning-paths-state.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-paths-state/learning-paths-state.component.html", "src/main/webapp/app/course/learning-paths/components/learning-paths-table/learning-paths-table.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-paths-table/learning-paths-table.component.html", "src/main/webapp/app/course/learning-paths/components/learning-paths-analytics/learning-paths-analytics.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-paths-analytics/learning-paths-analytics.component.html", "src/main/webapp/app/course/learning-paths/pages/learning-path-instructor-page/learning-path-instructor-page.component.ts", "src/main/webapp/app/course/learning-paths/pages/learning-path-instructor-page/learning-path-instructor-page.component.html"],
  "sourcesContent": ["export class LearningPathHealthDTO {\r\n    public status: HealthStatus[] = [];\r\n    public missingLearningPaths?: number;\r\n\r\n    constructor(status: HealthStatus[]) {\r\n        this.status = status;\r\n    }\r\n}\r\n\r\nexport enum HealthStatus {\r\n    MISSING = 'MISSING',\r\n    NO_COMPETENCIES = 'NO_COMPETENCIES',\r\n    NO_RELATIONS = 'NO_RELATIONS',\r\n}\r\n\r\nfunction getWarningTranslation(status: HealthStatus, element: string) {\r\n    const translation = {\r\n        [HealthStatus.MISSING]: 'missing',\r\n        [HealthStatus.NO_COMPETENCIES]: 'noCompetencies',\r\n        [HealthStatus.NO_RELATIONS]: 'noRelations',\r\n    };\r\n    return `artemisApp.learningPath.manageLearningPaths.health.${translation[status]}.${element}`;\r\n}\r\n\r\nexport function getWarningTitle(status: HealthStatus) {\r\n    return getWarningTranslation(status, 'title');\r\n}\r\n\r\nexport function getWarningBody(status: HealthStatus) {\r\n    return getWarningTranslation(status, 'body');\r\n}\r\n\r\nexport function getWarningAction(status: HealthStatus) {\r\n    return getWarningTranslation(status, 'action');\r\n}\r\n\r\nexport function getWarningHint(status: HealthStatus) {\r\n    return getWarningTranslation(status, 'hint');\r\n}\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { HealthStatus, LearningPathHealthDTO } from 'app/entities/competency/learning-path-health.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-paths-state',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [TranslateDirective, FontAwesomeModule, NgClass],\r\n    templateUrl: './learning-paths-state.component.html',\r\n    styleUrls: ['./learning-paths-state.component.scss', '../../pages/learning-path-instructor-page/learning-path-instructor-page.component.scss'],\r\n})\r\nexport class LearningPathsStateComponent {\r\n    protected readonly faSpinner = faSpinner;\r\n\r\n    private readonly baseTranslationKey = 'artemisApp.learningPathManagement.learningPathsState.type';\r\n    readonly translationKeys: Record<HealthStatus, string> = {\r\n        [HealthStatus.MISSING]: `${this.baseTranslationKey}.missing`,\r\n        [HealthStatus.NO_COMPETENCIES]: `${this.baseTranslationKey}.noCompetencies`,\r\n        [HealthStatus.NO_RELATIONS]: `${this.baseTranslationKey}.noRelations`,\r\n    };\r\n\r\n    readonly stateCssClasses: Record<HealthStatus, string> = {\r\n        [HealthStatus.MISSING]: 'warning-state',\r\n        [HealthStatus.NO_COMPETENCIES]: 'danger-state',\r\n        [HealthStatus.NO_RELATIONS]: 'warning-state',\r\n    };\r\n\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly router = inject(Router);\r\n    private readonly activatedRoute = inject(ActivatedRoute);\r\n\r\n    readonly courseId = input.required<number>();\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    private readonly learningPathHealth = signal<LearningPathHealthDTO | undefined>(undefined);\r\n    readonly learningPathHealthState = computed(() => this.learningPathHealth()?.status ?? []);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const courseId = this.courseId();\r\n            untracked(() => this.loadLearningPathHealthState(courseId));\r\n        });\r\n    }\r\n\r\n    protected async loadLearningPathHealthState(courseId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const learningPathHealthState = await this.learningPathApiService.getLearningPathHealthStatus(courseId);\r\n            this.learningPathHealth.set(learningPathHealthState);\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    protected async handleHealthStateAction(healthState: HealthStatus): Promise<void> {\r\n        switch (healthState) {\r\n            case HealthStatus.MISSING:\r\n                await this.generateMissingLearningPaths();\r\n                break;\r\n            case HealthStatus.NO_COMPETENCIES:\r\n            case HealthStatus.NO_RELATIONS:\r\n                await this.navigateToManageCompetencyPage();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private async navigateToManageCompetencyPage(): Promise<void> {\r\n        await this.router.navigate(['../competency-management'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    private async generateMissingLearningPaths(): Promise<void> {\r\n        try {\r\n            await this.learningPathApiService.generateMissingLearningPaths(this.courseId());\r\n            this.alertService.success(`${this.baseTranslationKey}.missing.successAlert`);\r\n            await this.loadLearningPathHealthState(this.courseId());\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"col\">\r\n    <div class=\"row m-0 align-items-center justify-content-between\">\r\n        <h5 class=\"m-0 col-md-auto p-0\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsState.title\"></h5>\r\n        <button class=\"btn btn-secondary btn-sm col-md-auto\" (click)=\"loadLearningPathHealthState(courseId())\">\r\n            @if (isLoading()) {\r\n                <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n            }\r\n            <span jhiTranslate=\"artemisApp.learningPathManagement.learningPathsState.refreshButtonLabel\"></span>\r\n        </button>\r\n    </div>\r\n    <hr class=\"my-2\" />\r\n    <div class=\"learning-paths-management-container\">\r\n        @if (isLoading()) {\r\n            <div class=\"row justify-content-center p-2\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                    <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n                </div>\r\n            </div>\r\n        } @else {\r\n            @for (healthState of learningPathHealthState(); let first = $first; track healthState) {\r\n                <div class=\"px-2 py-1 learning-paths-state-container\" [class.mt-3]=\"!first\" [ngClass]=\"stateCssClasses[healthState]\">\r\n                    <span><strong [jhiTranslate]=\"translationKeys[healthState] + '.title'\"></strong></span>\r\n                    <p class=\"m-0\"><small [jhiTranslate]=\"translationKeys[healthState] + '.description'\"></small></p>\r\n                    <button\r\n                        [id]=\"'health-state-button-' + healthState\"\r\n                        class=\"mt-2 btn btn-outline-secondary btn-sm align-self-end\"\r\n                        (click)=\"handleHealthStateAction(healthState)\"\r\n                        [jhiTranslate]=\"translationKeys[healthState] + '.actionButton'\"\r\n                    ></button>\r\n                </div>\r\n            } @empty {\r\n                <div class=\"row m-0 justify-content-center text-center text-secondary p-2\">\r\n                    <span\r\n                        ><em><small jhiTranslate=\"artemisApp.learningPathManagement.learningPathsState.emptyState\"></small></em\r\n                    ></span>\r\n                </div>\r\n            }\r\n        }\r\n    </div>\r\n</div>\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { LearningPathInformationDTO } from 'app/entities/competency/learning-path.model';\r\nimport { SearchResult, SearchTermPageableSearch, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal, NgbPaginationModule, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompetencyGraphModalComponent } from 'app/course/learning-paths/components/competency-graph-modal/competency-graph-modal.component';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nenum TableColumn {\r\n    ID = 'ID',\r\n    USER_NAME = 'USER_NAME',\r\n    USER_LOGIN = 'USER_LOGIN',\r\n    PROGRESS = 'PROGRESS',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-learning-paths-table',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [NgbPaginationModule, NgbTypeaheadModule, FormsModule, FontAwesomeModule, ArtemisTranslatePipe, TranslateDirective],\r\n    templateUrl: './learning-paths-table.component.html',\r\n    styleUrls: ['./learning-paths-table.component.scss', '../../pages/learning-path-instructor-page/learning-path-instructor-page.component.scss'],\r\n})\r\nexport class LearningPathsTableComponent {\r\n    protected readonly faSpinner = faSpinner;\r\n\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly modalService = inject(NgbModal);\r\n\r\n    readonly courseId = input.required<number>();\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    private readonly searchResults = signal<SearchResult<LearningPathInformationDTO> | undefined>(undefined);\r\n    readonly learningPaths = computed(() => this.searchResults()?.resultsOnPage ?? []);\r\n\r\n    readonly searchTerm = signal<string>('');\r\n    readonly page = signal<number>(1);\r\n    private readonly sortingOrder = signal<SortingOrder>(SortingOrder.ASCENDING);\r\n    private readonly sortedColumn = signal<TableColumn>(TableColumn.ID);\r\n    readonly pageSize = signal<number>(100).asReadonly();\r\n    readonly collectionSize = computed(() => (this.searchResults()?.numberOfPages ?? 1) * this.pageSize());\r\n\r\n    // Debounce the loadLearningPaths function to prevent multiple requests when the user types quickly\r\n    private readonly debounceLoadLearningPaths = BaseApiHttpService.debounce(this.loadLearningPaths.bind(this), 300);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            // Load learning paths whenever the courseId changes\r\n            const courseId = this.courseId();\r\n            untracked(() => this.loadLearningPaths(courseId));\r\n        });\r\n    }\r\n\r\n    private async loadLearningPaths(courseId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const searchState = <SearchTermPageableSearch>{\r\n                page: this.page(),\r\n                pageSize: this.pageSize(),\r\n                searchTerm: this.searchTerm(),\r\n                sortingOrder: this.sortingOrder(),\r\n                sortedColumn: this.sortedColumn(),\r\n            };\r\n            const searchResults = await this.learningPathApiService.getLearningPathInformation(courseId, searchState);\r\n            this.searchResults.set(searchResults);\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    search(searchTerm: string): void {\r\n        this.searchTerm.set(searchTerm);\r\n        this.page.set(1);\r\n        this.debounceLoadLearningPaths(this.courseId());\r\n    }\r\n\r\n    async setPage(pageNumber: number): Promise<void> {\r\n        this.page.set(pageNumber);\r\n        await this.loadLearningPaths(this.courseId());\r\n    }\r\n\r\n    openCompetencyGraph(learningPathId: number, name: string | undefined): void {\r\n        CompetencyGraphModalComponent.openCompetencyGraphModal(this.modalService, learningPathId, name);\r\n    }\r\n}\r\n", "<div class=\"col\">\r\n    <div class=\"row m-0 align-items-center justify-content-between\">\r\n        <h5 class=\"m-0 col-md-auto p-0\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsTable.title\"></h5>\r\n        <div class=\"col-md-auto d-flex align-items-center input-group-sm\">\r\n            @if (isLoading()) {\r\n                <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n            }\r\n            <input\r\n                id=\"learning-path-search\"\r\n                type=\"search\"\r\n                class=\"ms-2 form-control rounded\"\r\n                [placeholder]=\"'artemisApp.learningPathManagement.learningPathsTable.searchPlaceholder' | artemisTranslate\"\r\n                [ngModel]=\"searchTerm()\"\r\n                (ngModelChange)=\"search($event)\"\r\n                aria-label=\"Search\"\r\n            />\r\n        </div>\r\n    </div>\r\n    <hr class=\"my-2\" />\r\n    <div class=\"learning-paths-management-container\">\r\n        <div class=\"learning-paths-table-container\">\r\n            <table class=\"table table-striped\">\r\n                <thead class=\"thead-dark\">\r\n                    <tr>\r\n                        <th class=\"col-1\">#</th>\r\n                        <th class=\"col-4\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsTable.columnLabel.name\"></th>\r\n                        <th class=\"col-4\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsTable.columnLabel.login\"></th>\r\n                        <th class=\"col-2\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsTable.columnLabel.progress\"></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (learningPath of learningPaths(); track learningPath.id) {\r\n                        <tr class=\"align-middle\">\r\n                            <td class=\"col-1\">{{ learningPath.id }}</td>\r\n                            <td>\r\n                                <ngb-highlight [result]=\"learningPath.user.name\" [term]=\"searchTerm()\" />\r\n                            </td>\r\n                            <td>\r\n                                <ngb-highlight [result]=\"learningPath.user.login\" [term]=\"searchTerm()\" />\r\n                            </td>\r\n                            <td>\r\n                                <span\r\n                                    [id]=\"'open-competency-graph-button-' + learningPath.id\"\r\n                                    class=\"clickable link-primary\"\r\n                                    (click)=\"openCompetencyGraph(learningPath.id, learningPath.user.name)\"\r\n                                    ><u>{{ learningPath.progress }} %</u></span\r\n                                >\r\n                            </td>\r\n                        </tr>\r\n                    } @empty {\r\n                        <tr>\r\n                            <td colspan=\"4\" class=\"text-center\">\r\n                                <span jhiTranslate=\"artemisApp.learningPathManagement.learningPathsTable.noResults\"></span>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <ngb-pagination\r\n            [maxSize]=\"5\"\r\n            [collectionSize]=\"collectionSize()\"\r\n            [page]=\"page()\"\r\n            (pageChange)=\"setPage($event)\"\r\n            [pageSize]=\"pageSize()\"\r\n            size=\"sm\"\r\n            class=\"d-flex justify-content-end mt-2 pagination\"\r\n        />\r\n    </div>\r\n</div>\r\n", "import { ChangeDetectionStrategy, Component, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { CompetencyGraphDTO, CompetencyGraphNodeValueType } from 'app/entities/competency/learning-path.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CompetencyGraphComponent } from 'app/course/learning-paths/components/competency-graph/competency-graph.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-paths-analytics',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [CompetencyGraphComponent, TranslateDirective, CommonModule],\r\n    templateUrl: './learning-paths-analytics.component.html',\r\n    styleUrl: './learning-paths-analytics.component.scss',\r\n})\r\nexport class LearningPathsAnalyticsComponent {\r\n    protected readonly CompetencyGraphNodeValueType = CompetencyGraphNodeValueType;\r\n\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly alertService = inject(AlertService);\r\n\r\n    readonly courseId = input.required<number>();\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    readonly instructorCompetencyGraph = signal<CompetencyGraphDTO | undefined>(undefined);\r\n\r\n    readonly valueSelection = signal<CompetencyGraphNodeValueType>(CompetencyGraphNodeValueType.AVERAGE_MASTERY_PROGRESS);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const courseId = this.courseId();\r\n            untracked(() => this.loadInstructionCompetencyGraph(courseId));\r\n        });\r\n    }\r\n\r\n    private async loadInstructionCompetencyGraph(courseId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const instructorCompetencyGraph = await this.learningPathApiService.getLearningPathInstructorCompetencyGraph(courseId);\r\n            this.instructorCompetencyGraph.set(instructorCompetencyGraph);\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"learning-paths-analytics-container\">\r\n    <h5 class=\"m-0\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsAnalytics.title\"></h5>\r\n    <hr class=\"my-2\" />\r\n    <div class=\"row h-100 m-0 gap-3\">\r\n        <div class=\"col-2 p-0 learning-paths-analytics-graph-selection-container\">\r\n            <ng-container [ngTemplateOutlet]=\"radioTemplate\" [ngTemplateOutletContext]=\"{ $implicit: CompetencyGraphNodeValueType.AVERAGE_MASTERY_PROGRESS }\" />\r\n        </div>\r\n        <div class=\"col p-0\">\r\n            @if (isLoading()) {\r\n                <div class=\"row justify-content-center p-2\">\r\n                    <div class=\"spinner-border text-primary\" role=\"status\">\r\n                        <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n                    </div>\r\n                </div>\r\n            } @else if (instructorCompetencyGraph()) {\r\n                <jhi-competency-graph [competencyGraph]=\"instructorCompetencyGraph()!\" />\r\n            }\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #radioTemplate let-competencyNodeValueType>\r\n    <div class=\"row m-0 align-items-center\">\r\n        <input type=\"radio\" class=\"col-md-auto\" [checked]=\"valueSelection() === competencyNodeValueType\" />\r\n        <label class=\"col-md-auto pe-0 text-break\" [jhiTranslate]=\"'artemisApp.learningPathManagement.learningPathsAnalytics.graphSelection.' + competencyNodeValueType\"></label>\r\n    </div>\r\n</ng-template>\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, signal, untracked } from '@angular/core';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { lastValueFrom, map } from 'rxjs';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { LearningPathsStateComponent } from 'app/course/learning-paths/components/learning-paths-state/learning-paths-state.component';\r\nimport { LearningPathsTableComponent } from 'app/course/learning-paths/components/learning-paths-table/learning-paths-table.component';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { LearningPathsAnalyticsComponent } from 'app/course/learning-paths/components/learning-paths-analytics/learning-paths-analytics.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-instructor-page',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [LearningPathsStateComponent, LearningPathsTableComponent, LearningPathsAnalyticsComponent, TranslateDirective],\r\n    templateUrl: './learning-path-instructor-page.component.html',\r\n    styleUrl: './learning-path-instructor-page.component.scss',\r\n})\r\nexport class LearningPathInstructorPageComponent {\r\n    private readonly activatedRoute = inject(ActivatedRoute);\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly courseManagementService = inject(CourseManagementService);\r\n\r\n    readonly courseId = toSignal(this.activatedRoute.parent!.params.pipe(map((params) => Number(params.courseId))), { requireSync: true });\r\n    private readonly course = signal<Course | undefined>(undefined);\r\n    readonly learningPathsEnabled = computed(() => this.course()?.learningPathsEnabled ?? false);\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const courseId = this.courseId();\r\n            untracked(() => this.loadCourse(courseId));\r\n        });\r\n    }\r\n\r\n    private async loadCourse(courseId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const courseBody = await lastValueFrom(this.courseManagementService.findOneForDashboard(courseId));\r\n            this.course.set(courseBody.body!);\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    protected async enableLearningPaths(): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            await this.learningPathApiService.enableLearningPaths(this.courseId());\r\n            this.course.update((course) => ({ ...course!, learningPathsEnabled: true }));\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n}\r\n", "@if (isLoading()) {\r\n    <div class=\"row justify-content-center p-2\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n            <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n        </div>\r\n    </div>\r\n} @else if (learningPathsEnabled()) {\r\n    <div class=\"col\">\r\n        <div class=\"row w-100 p-0 m-0 gap-3\">\r\n            <!-- TODO: The following section has been commented out as the functional implementation has not been decided yet. -->\r\n            <!-- <div class=\"col p-2 learning-paths-container\">-->\r\n            <!--     <jhi-learning-paths-configuration [courseId]=\"courseId()\" />-->\r\n            <!-- </div>-->\r\n            <div class=\"col p-2 learning-paths-container\">\r\n                <jhi-learning-paths-state [courseId]=\"courseId()\" />\r\n            </div>\r\n            <div class=\"col-6 p-2 learning-paths-container\">\r\n                <jhi-learning-paths-table [courseId]=\"courseId()\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"row w-100 p-0 m-0 g-3 learning-paths-container\">\r\n            <jhi-learning-paths-analytics [courseId]=\"courseId()\" />\r\n        </div>\r\n    </div>\r\n} @else {\r\n    <div class=\"row align-items-center justify-content-center h-100 p-3\">\r\n        <div class=\"enable-learning-paths-container\">\r\n            <h3 class=\"mb-3\" jhiTranslate=\"artemisApp.learningPathManagement.learningPathsDisabled.title\"></h3>\r\n            <span jhiTranslate=\"artemisApp.learningPathManagement.learningPathsDisabled.description\"></span>\r\n            <button\r\n                (click)=\"enableLearningPaths()\"\r\n                type=\"button\"\r\n                class=\"mt-4 btn btn-primary\"\r\n                id=\"enable-learning-paths-button\"\r\n                jhiTranslate=\"artemisApp.learningPathManagement.learningPathsDisabled.buttonLabel\"\r\n            ></button>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["HealthStatus", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faSpinner", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "healthState_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleHealthStateAction", "\u0275\u0275classProp", "\u0275$index_44_r4", "stateCssClasses", "translationKeys", "\u0275\u0275repeaterCreate", "LearningPathsStateComponent_Conditional_18_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "LearningPathsStateComponent_Conditional_18_ForEmpty_3_Template", "\u0275\u0275repeater", "learningPathHealthState", "LearningPathsStateComponent", "baseTranslationKey", "HealthStatus", "MISSING", "NO_COMPETENCIES", "NO_RELATIONS", "learningPathApiService", "inject", "LearningPathApiService", "alertService", "AlertService", "router", "Router", "activatedRoute", "ActivatedRoute", "courseId", "input", "required", "isLoading", "signal", "learningPathHealth", "undefined", "computed", "status", "constructor", "effect", "untracked", "loadLearningPathHealthState", "__async", "set", "getLearningPathHealthStatus", "error", "onError", "healthState", "generateMissingLearningPaths", "navigateToManageCompetencyPage", "navigate", "relativeTo", "success", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "LearningPathsStateComponent_Conditional_8_Template", "LearningPathsStateComponent_Conditional_17_Template", "LearningPathsStateComponent_Conditional_18_Template", "\u0275\u0275conditional", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "NgClass", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faSpinner", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "learningPath_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openCompetencyGraph", "id", "user", "name", "\u0275\u0275textInterpolate", "searchTerm", "login", "\u0275\u0275textInterpolate1", "progress", "TableColumn", "LearningPathsTableComponent", "learningPathApiService", "inject", "LearningPathApiService", "alertService", "AlertService", "modalService", "NgbModal", "courseId", "input", "required", "isLoading", "signal", "searchResults", "undefined", "learningPaths", "computed", "resultsOnPage", "page", "sortingOrder", "SortingOrder", "ASCENDING", "sortedColumn", "ID", "pageSize", "asReadonly", "collectionSize", "numberOfPages", "debounceLoadLearningPaths", "BaseApiHttpService", "debounce", "loadLearningPaths", "bind", "constructor", "effect", "untracked", "__async", "set", "searchState", "getLearningPathInformation", "error", "onError", "search", "setPage", "pageNumber", "learningPathId", "CompetencyGraphModalComponent", "openCompetencyGraphModal", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "LearningPathsTableComponent_Conditional_8_Template", "$event", "\u0275\u0275repeaterCreate", "LearningPathsTableComponent_For_40_Template", "_forTrack0", "LearningPathsTableComponent_ForEmpty_41_Template", "\u0275\u0275conditional", "\u0275\u0275pipeBind1", "\u0275\u0275repeater", "NgbPaginationModule", "NgbPagination", "NgbTypeaheadModule", "NgbHighlight", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "FontAwesomeModule", "FaIconComponent", "ArtemisTranslatePipe", "TranslateDirective", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "instructorCompetencyGraph", "valueSelection", "competencyNodeValueType_r2", "LearningPathsAnalyticsComponent", "CompetencyGraphNodeValueType", "learningPathApiService", "inject", "LearningPathApiService", "alertService", "AlertService", "courseId", "input", "required", "isLoading", "signal", "undefined", "AVERAGE_MASTERY_PROGRESS", "constructor", "effect", "untracked", "loadInstructionCompetencyGraph", "__async", "set", "getLearningPathInstructorCompetencyGraph", "error", "onError", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainer", "\u0275\u0275template", "LearningPathsAnalyticsComponent_Conditional_15_Template", "LearningPathsAnalyticsComponent_Conditional_16_Template", "LearningPathsAnalyticsComponent_ng_template_20_Template", "\u0275\u0275templateRefExtractor", "radioTemplate_r3", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275conditional", "CompetencyGraphComponent", "TranslateDirective", "CommonModule", "NgTemplateOutlet", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "courseId", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "enableLearningPaths", "LearningPathInstructorPageComponent", "activatedRoute", "inject", "ActivatedRoute", "learningPathApiService", "LearningPathApiService", "alertService", "AlertService", "courseManagementService", "CourseManagementService", "toSignal", "parent", "params", "pipe", "map", "Number", "requireSync", "course", "signal", "undefined", "learningPathsEnabled", "computed", "isLoading", "constructor", "effect", "untracked", "loadCourse", "__async", "set", "courseBody", "lastValueFrom", "findOneForDashboard", "body", "error", "onError", "update", "__spreadProps", "__spreadValues", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "LearningPathInstructorPageComponent_Conditional_0_Template", "LearningPathInstructorPageComponent_Conditional_1_Template", "LearningPathInstructorPageComponent_Conditional_2_Template", "\u0275\u0275conditional", "LearningPathsStateComponent", "LearningPathsTableComponent", "LearningPathsAnalyticsComponent", "TranslateDirective", "styles", "changeDetection"]
}
