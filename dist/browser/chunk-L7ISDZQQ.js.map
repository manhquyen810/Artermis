{
  "version": 3,
  "sources": ["src/main/webapp/app/course/learning-paths/services/learning-path-api.service.ts", "src/main/webapp/app/entities/competency/learning-path.model.ts", "src/main/webapp/app/course/learning-paths/components/competency-node/competency-node.component.ts", "src/main/webapp/app/course/learning-paths/components/competency-node/competency-node.component.html", "src/main/webapp/app/course/learning-paths/components/competency-graph/competency-graph.component.ts", "src/main/webapp/app/course/learning-paths/components/competency-graph/competency-graph.component.html", "src/main/webapp/app/course/learning-paths/components/competency-graph-modal/competency-graph-modal.component.ts", "src/main/webapp/app/course/learning-paths/components/competency-graph-modal/competency-graph-modal.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport {\r\n    CompetencyGraphDTO,\r\n    LearningObjectType,\r\n    LearningPathCompetencyDTO,\r\n    LearningPathDTO,\r\n    LearningPathInformationDTO,\r\n    LearningPathNavigationDTO,\r\n    LearningPathNavigationObjectDTO,\r\n    LearningPathNavigationOverviewDTO,\r\n    LearningPathsConfigurationDTO,\r\n} from 'app/entities/competency/learning-path.model';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\nimport { LearningPathHealthDTO } from 'app/entities/competency/learning-path-health.model';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LearningPathApiService extends BaseApiHttpService {\r\n    async getLearningPathForCurrentUser(courseId: number): Promise<LearningPathDTO> {\r\n        return await this.get<LearningPathDTO>(`atlas/courses/${courseId}/learning-path/me`);\r\n    }\r\n\r\n    async startLearningPathForCurrentUser(learningPathId: number): Promise<void> {\r\n        return await this.patch<void>(`atlas/learning-path/${learningPathId}/start`);\r\n    }\r\n\r\n    async getLearningPathNavigation(learningPathId: number): Promise<LearningPathNavigationDTO> {\r\n        return await this.get<LearningPathNavigationDTO>(`atlas/learning-path/${learningPathId}/navigation`);\r\n    }\r\n\r\n    async getRelativeLearningPathNavigation(\r\n        learningPathId: number,\r\n        learningObjectId: number,\r\n        learningObjectType: LearningObjectType,\r\n        competencyId: number,\r\n    ): Promise<LearningPathNavigationDTO> {\r\n        let params = new HttpParams();\r\n        params = params.set('learningObjectId', learningObjectId.toString());\r\n        params = params.set('learningObjectType', learningObjectType);\r\n        params = params.set('competencyId', competencyId.toString());\r\n        return await this.get<LearningPathNavigationDTO>(`atlas/learning-path/${learningPathId}/relative-navigation`, { params: params });\r\n    }\r\n\r\n    async generateLearningPathForCurrentUser(courseId: number): Promise<LearningPathDTO> {\r\n        return await this.post<LearningPathDTO>(`atlas/courses/${courseId}/learning-path`);\r\n    }\r\n\r\n    async getLearningPathNavigationOverview(learningPathId: number): Promise<LearningPathNavigationOverviewDTO> {\r\n        return await this.get<LearningPathNavigationOverviewDTO>(`atlas/learning-path/${learningPathId}/navigation-overview`);\r\n    }\r\n\r\n    async getLearningPathCompetencyGraph(learningPathId: number): Promise<CompetencyGraphDTO> {\r\n        return await this.get<CompetencyGraphDTO>(`atlas/learning-path/${learningPathId}/competency-graph`);\r\n    }\r\n\r\n    async getLearningPathInstructorCompetencyGraph(courseId: number): Promise<CompetencyGraphDTO> {\r\n        return await this.get<CompetencyGraphDTO>(`atlas/courses/${courseId}/learning-path/competency-instructor-graph`);\r\n    }\r\n\r\n    async getLearningPathCompetencies(learningPathId: number): Promise<LearningPathCompetencyDTO[]> {\r\n        return await this.get<LearningPathCompetencyDTO[]>(`atlas/learning-path/${learningPathId}/competencies`);\r\n    }\r\n\r\n    async getLearningPathCompetencyLearningObjects(learningPathId: number, competencyId: number): Promise<LearningPathNavigationObjectDTO[]> {\r\n        return await this.get<LearningPathNavigationObjectDTO[]>(`atlas/learning-path/${learningPathId}/competencies/${competencyId}/learning-objects`);\r\n    }\r\n\r\n    async getLearningPathsConfiguration(courseId: number): Promise<LearningPathsConfigurationDTO> {\r\n        return await this.get<LearningPathsConfigurationDTO>(`atlas/courses/${courseId}/learning-paths/configuration`);\r\n    }\r\n\r\n    async getLearningPathHealthStatus(courseId: number): Promise<LearningPathHealthDTO> {\r\n        return await this.get<LearningPathHealthDTO>(`atlas/courses/${courseId}/learning-path-health`);\r\n    }\r\n\r\n    async updateLearningPathsConfiguration(courseId: number, updatedLearningPathsConfiguration: LearningPathsConfigurationDTO): Promise<void> {\r\n        await this.put<void>(`atlas/courses/${courseId}/learning-paths/configuration`, updatedLearningPathsConfiguration);\r\n    }\r\n\r\n    async enableLearningPaths(courseId: number): Promise<void> {\r\n        await this.put<void>(`atlas/courses/${courseId}/learning-paths/enable`);\r\n    }\r\n\r\n    async generateMissingLearningPaths(courseId: number): Promise<void> {\r\n        await this.put<void>(`atlas/courses/${courseId}/learning-paths/generate-missing`);\r\n    }\r\n\r\n    async getLearningPathInformation(courseId: number, pageable: SearchTermPageableSearch): Promise<SearchResult<LearningPathInformationDTO>> {\r\n        const params = this.createHttpSearchParams(pageable);\r\n        return await this.get<SearchResult<LearningPathInformationDTO>>(`atlas/courses/${courseId}/learning-paths`, { params });\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { User, UserNameAndLoginDTO } from 'app/core/user/user.model';\r\nimport { CompetencyRelationType, CourseCompetency } from 'app/entities/competency.model';\r\nimport { NodeDimension } from '@swimlane/ngx-graph';\r\n\r\nexport class LearningPath implements BaseEntity {\r\n    public id?: number;\r\n    public progress?: number;\r\n    public user?: User;\r\n    public course?: Course;\r\n    public competencies?: CourseCompetency[];\r\n}\r\n\r\nexport class LearningPathInformationDTO {\r\n    public id: number;\r\n    public user: UserNameAndLoginDTO;\r\n    public progress: number;\r\n}\r\n\r\nexport enum LearningObjectType {\r\n    LECTURE = 'LECTURE',\r\n    EXERCISE = 'EXERCISE',\r\n}\r\n\r\nexport interface LearningPathCompetencyDTO {\r\n    id: number;\r\n    title: string;\r\n    masteryProgress: number;\r\n}\r\n\r\nexport interface LearningPathDTO {\r\n    id: number;\r\n    progress: number;\r\n    startedByStudent: boolean;\r\n}\r\n\r\nexport interface LearningPathNavigationObjectDTO {\r\n    id: number;\r\n    completed: boolean;\r\n    name?: string;\r\n    competencyId: number;\r\n    type: LearningObjectType;\r\n    unreleased: boolean;\r\n}\r\n\r\nexport interface LearningPathNavigationDTO {\r\n    predecessorLearningObject?: LearningPathNavigationObjectDTO;\r\n    currentLearningObject?: LearningPathNavigationObjectDTO;\r\n    successorLearningObject?: LearningPathNavigationObjectDTO;\r\n    progress: number;\r\n}\r\n\r\nexport interface LearningPathNavigationOverviewDTO {\r\n    learningObjects: LearningPathNavigationObjectDTO[];\r\n}\r\n\r\nexport interface LearningPathsConfigurationDTO {\r\n    includeAllGradedExercises: boolean;\r\n}\r\n\r\nexport enum CompetencyGraphNodeValueType {\r\n    MASTERY_PROGRESS = 'MASTERY_PROGRESS',\r\n    AVERAGE_MASTERY_PROGRESS = 'AVERAGE_MASTERY_PROGRESS',\r\n}\r\n\r\nexport interface CompetencyGraphNodeDTO {\r\n    id: string;\r\n    label: string;\r\n    softDueDate: Date;\r\n    value: number;\r\n    valueType: CompetencyGraphNodeValueType;\r\n    dimension?: NodeDimension;\r\n}\r\n\r\nexport interface CompetencyGraphEdgeDTO {\r\n    id: string;\r\n    source: string;\r\n    target: string;\r\n    relationType: CompetencyRelationType;\r\n}\r\n\r\nexport interface CompetencyGraphDTO {\r\n    nodes: CompetencyGraphNodeDTO[];\r\n    edges?: CompetencyGraphEdgeDTO[];\r\n}\r\n\r\nexport enum NodeType {\r\n    COMPETENCY_START = 'COMPETENCY_START',\r\n    COMPETENCY_END = 'COMPETENCY_END',\r\n    MATCH_START = 'MATCH_START',\r\n    MATCH_END = 'MATCH_END',\r\n    EXERCISE = 'EXERCISE',\r\n    LECTURE_UNIT = 'LECTURE_UNIT',\r\n}\r\n", "import { CommonModule } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, computed, inject, input, output } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbAccordionModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NodeDimension } from '@swimlane/ngx-graph';\r\nimport { CompetencyGraphNodeDTO, CompetencyGraphNodeValueType } from 'app/entities/competency/learning-path.model';\r\n\r\nexport interface SizeUpdate {\r\n    id: string;\r\n    dimension: NodeDimension;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-competency-node',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [NgbDropdownModule, FontAwesomeModule, NgbAccordionModule, CommonModule],\r\n    templateUrl: './competency-node.component.html',\r\n    styleUrl: './competency-node.component.scss',\r\n})\r\nexport class CompetencyNodeComponent implements AfterViewInit {\r\n    protected readonly CompetencyGraphNodeValueType = CompetencyGraphNodeValueType;\r\n    // height of node element in pixels\r\n    private readonly nodeHeight = 45.59;\r\n\r\n    readonly competencyNode = input.required<CompetencyGraphNodeDTO>();\r\n    readonly valueType = computed(() => this.competencyNode().valueType);\r\n\r\n    readonly value = computed(() => this.competencyNode().value);\r\n\r\n    private readonly element = inject(ElementRef);\r\n    readonly onSizeSet = output<SizeUpdate>();\r\n\r\n    ngAfterViewInit(): void {\r\n        this.setDimensions();\r\n    }\r\n\r\n    isGreen(): boolean {\r\n        switch (this.valueType()) {\r\n            case CompetencyGraphNodeValueType.MASTERY_PROGRESS:\r\n                return this.value() >= 100;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    isYellow(): boolean {\r\n        switch (this.valueType()) {\r\n            case CompetencyGraphNodeValueType.MASTERY_PROGRESS:\r\n            case CompetencyGraphNodeValueType.AVERAGE_MASTERY_PROGRESS:\r\n                return this.value() > 0 && this.value() < 100;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    isGray(): boolean {\r\n        switch (this.valueType()) {\r\n            case CompetencyGraphNodeValueType.MASTERY_PROGRESS:\r\n            case CompetencyGraphNodeValueType.AVERAGE_MASTERY_PROGRESS:\r\n                return this.value() === 0;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    setDimensions(): void {\r\n        const width: number = this.element.nativeElement.offsetWidth;\r\n        const height = this.nodeHeight;\r\n        this.onSizeSet.emit({ id: this.competencyNode().id, dimension: { height, width } });\r\n    }\r\n}\r\n", "<div class=\"d-inline-block competency-node\">\r\n    <div class=\"progress-container d-inline-block\" [ngClass]=\"{ 'green-competency': isGreen(), 'yellow-competency': isYellow(), 'gray-competency': isGray() }\">\r\n        <small\r\n            ><strong>\r\n                @if (valueType() === CompetencyGraphNodeValueType.MASTERY_PROGRESS || valueType() === CompetencyGraphNodeValueType.AVERAGE_MASTERY_PROGRESS) {\r\n                    {{ value() }} %\r\n                } @else {\r\n                    {{ value() }}\r\n                }\r\n            </strong></small\r\n        >\r\n    </div>\r\n    <span class=\"d-inline-block ms-1\"\r\n        ><strong>{{ competencyNode().label }}</strong></span\r\n    >\r\n</div>\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, input, signal } from '@angular/core';\r\nimport { NgxGraphModule, NgxGraphZoomOptions } from '@swimlane/ngx-graph';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { Subject } from 'rxjs';\r\nimport { CompetencyGraphDTO } from 'app/entities/competency/learning-path.model';\r\nimport { CompetencyNodeComponent, SizeUpdate } from 'app/course/learning-paths/components/competency-node/competency-node.component';\r\n\r\n@Component({\r\n    selector: 'jhi-competency-graph',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [CompetencyNodeComponent, NgxGraphModule, TranslateDirective],\r\n    templateUrl: './competency-graph.component.html',\r\n    styleUrl: './competency-graph.component.scss',\r\n})\r\nexport class CompetencyGraphComponent {\r\n    readonly competencyGraph = input.required<CompetencyGraphDTO>();\r\n\r\n    private readonly internalCompetencyGraph = signal<CompetencyGraphDTO>({\r\n        nodes: [],\r\n        edges: [],\r\n    });\r\n    readonly nodes = computed(() => this.internalCompetencyGraph().nodes || []);\r\n    readonly edges = computed(() => {\r\n        return (\r\n            this.internalCompetencyGraph().edges?.map((edge) => ({\r\n                ...edge,\r\n                id: `edge-${edge.id}`,\r\n            })) || []\r\n        );\r\n    });\r\n\r\n    readonly update$ = new Subject<boolean>();\r\n    readonly center$ = new Subject<boolean>();\r\n    readonly zoomToFit$ = new Subject<NgxGraphZoomOptions>();\r\n\r\n    constructor() {\r\n        effect(() => this.internalCompetencyGraph.set(this.competencyGraph()));\r\n    }\r\n\r\n    setNodeDimension(sizeUpdate: SizeUpdate): void {\r\n        this.internalCompetencyGraph.update(({ nodes, edges }) => {\r\n            return {\r\n                nodes: nodes.map((node) => {\r\n                    if (node.id === sizeUpdate.id) {\r\n                        node.dimension = sizeUpdate.dimension;\r\n                    }\r\n                    return node;\r\n                }),\r\n                edges: edges,\r\n            };\r\n        });\r\n    }\r\n}\r\n", "@if (nodes().length === 0 || edges().length === 0) {\r\n    <h5 class=\"m-0\" jhiTranslate=\"artemisApp.learningPathManagement.noGraphAvailable\"></h5>\r\n} @else {\r\n    <div class=\"competency-graph-container h-100\" xmlns:svg=\"http://www.w3.org/2000/svg\">\r\n        <ngx-graph\r\n            layout=\"dagreCluster\"\r\n            [draggingEnabled]=\"false\"\r\n            [enableZoom]=\"false\"\r\n            [links]=\"edges()\"\r\n            [nodes]=\"nodes()\"\r\n            [update$]=\"update$\"\r\n            [center$]=\"center$\"\r\n            [zoomToFit$]=\"zoomToFit$\"\r\n            [showMiniMap]=\"true\"\r\n            [miniMapMaxWidth]=\"200\"\r\n            [miniMapMaxHeight]=\"150\"\r\n        >\r\n            <ng-template #defsTemplate>\r\n                <svg:marker id=\"arrow\" viewBox=\"0 -5 10 10\" refX=\"8\" refY=\"0\" markerWidth=\"4\" markerHeight=\"4\" orient=\"auto\">\r\n                    <svg:path d=\"M0,-5L10,0L0,5\" class=\"arrow-head\" />\r\n                </svg:marker>\r\n            </ng-template>\r\n            <ng-template #nodeTemplate let-node>\r\n                <svg:g [attr.width]=\"node.dimension.width\" [attr.height]=\"node.dimension.height\">\r\n                    <svg:foreignObject class=\"node\" [attr.width]=\"node.dimension.width\" [attr.height]=\"node.dimension.height\">\r\n                        <jhi-learning-path-competency-node [competencyNode]=\"node\" (onSizeSet)=\"setNodeDimension($event)\" />\r\n                    </svg:foreignObject>\r\n                </svg:g>\r\n            </ng-template>\r\n            <ng-template #linkTemplate let-link>\r\n                <svg:g class=\"edge\">\r\n                    <svg:path class=\"line\" stroke-width=\"1\" marker-end=\"url(#arrow)\" />\r\n                </svg:g>\r\n            </ng-template>\r\n        </ngx-graph>\r\n    </div>\r\n}\r\n", "import { ChangeDetectionStrategy, Component, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompetencyGraphComponent } from 'app/course/learning-paths/components/competency-graph/competency-graph.component';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CompetencyGraphDTO } from 'app/entities/competency/learning-path.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-competency-graph-modal',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [FontAwesomeModule, CompetencyGraphComponent, TranslateDirective],\r\n    templateUrl: './competency-graph-modal.component.html',\r\n    styleUrl: './competency-graph-modal.component.scss',\r\n})\r\nexport class CompetencyGraphModalComponent {\r\n    protected readonly closeIcon = faXmark;\r\n\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly alertService = inject(AlertService);\r\n\r\n    readonly name = input<string>();\r\n    readonly learningPathId = input.required<number>();\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    readonly competencyGraph = signal<CompetencyGraphDTO | undefined>(undefined);\r\n    private readonly activeModal: NgbActiveModal = inject(NgbActiveModal);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const learningPathId = this.learningPathId();\r\n            untracked(() => this.loadCompetencyGraph(learningPathId));\r\n        });\r\n    }\r\n\r\n    private async loadCompetencyGraph(learningPathId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const competencyGraph = await this.learningPathApiService.getLearningPathCompetencyGraph(learningPathId);\r\n            this.competencyGraph.set(competencyGraph);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    closeModal(): void {\r\n        this.activeModal.close();\r\n    }\r\n\r\n    static openCompetencyGraphModal(modalService: NgbModal, learningPathId: number, name: string | undefined): void {\r\n        const modalRef = modalService.open(CompetencyGraphModalComponent, {\r\n            size: 'xl',\r\n            backdrop: 'static',\r\n            windowClass: 'competency-graph-modal',\r\n        });\r\n        modalRef.componentInstance.learningPathId = signal<number>(learningPathId);\r\n        modalRef.componentInstance.name = signal<string | undefined>(name);\r\n    }\r\n}\r\n", "<div class=\"competency-graph-modal\">\r\n    <div class=\"col p-3\">\r\n        <div class=\"row m-0\">\r\n            @if (name() !== undefined) {\r\n                <span\r\n                    class=\"col p-0 h5 m-0 align-self-center\"\r\n                    jhiTranslate=\"artemisApp.learningPath.competencyGraphModal.titleWithName\"\r\n                    [translateValues]=\"{ name: name() }\"\r\n                ></span>\r\n            } @else {\r\n                <span class=\"col p-0 h5 m-0 align-self-center\" jhiTranslate=\"artemisApp.learningPath.competencyGraphModal.title\"></span>\r\n            }\r\n            <fa-icon id=\"close-button\" (click)=\"closeModal()\" [icon]=\"closeIcon\" class=\"col-md-auto h5 clickable m-0 p-1 pe-0\" />\r\n        </div>\r\n    </div>\r\n    <hr class=\"m-0\" />\r\n    <div class=\"competency-graph-modal-body h-100\">\r\n        @if (isLoading()) {\r\n            <div class=\"row justify-content-center m-4\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                    <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n                </div>\r\n            </div>\r\n        } @else if (competencyGraph()) {\r\n            <jhi-competency-graph [competencyGraph]=\"competencyGraph()!\" />\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["LearningPathApiService", "BaseApiHttpService", "getLearningPathForCurrentUser", "courseId", "__async", "get", "startLearningPathForCurrentUser", "learningPathId", "patch", "getLearningPathNavigation", "getRelativeLearningPathNavigation", "learningObjectId", "learningObjectType", "competencyId", "params", "HttpParams", "set", "toString", "generateLearningPathForCurrentUser", "post", "getLearningPathNavigationOverview", "getLearningPathCompetencyGraph", "getLearningPathInstructorCompetencyGraph", "getLearningPathCompetencies", "getLearningPathCompetencyLearningObjects", "getLearningPathsConfiguration", "getLearningPathHealthStatus", "updateLearningPathsConfiguration", "updatedLearningPathsConfiguration", "put", "enableLearningPaths", "generateMissingLearningPaths", "getLearningPathInformation", "pageable", "createHttpSearchParams", "__ngFactoryType__", "factory", "\u0275fac", "providedIn", "LearningObjectType", "CompetencyGraphNodeValueType", "\u0275\u0275text", "\u0275\u0275textInterpolate1", "ctx_r0", "value", "CompetencyNodeComponent", "CompetencyGraphNodeValueType", "nodeHeight", "competencyNode", "input", "required", "valueType", "computed", "element", "inject", "ElementRef", "onSizeSet", "output", "ngAfterViewInit", "setDimensions", "isGreen", "MASTERY_PROGRESS", "isYellow", "AVERAGE_MASTERY_PROGRESS", "isGray", "width", "nativeElement", "offsetWidth", "height", "emit", "id", "dimension", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275template", "CompetencyNodeComponent_Conditional_7_Template", "CompetencyNodeComponent_Conditional_8_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction3", "_c0", "\u0275\u0275conditional", "\u0275\u0275textInterpolate", "label", "NgbDropdownModule", "FontAwesomeModule", "NgbAccordionModule", "CommonModule", "NgClass", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setNodeDimension", "\u0275\u0275advance", "\u0275\u0275property", "node_r3", "\u0275\u0275template", "CompetencyGraphComponent_Conditional_1_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "CompetencyGraphComponent_Conditional_1_ng_template_8_Template", "CompetencyGraphComponent_Conditional_1_ng_template_11_Template", "edges", "nodes", "update$", "center$", "zoomToFit$", "CompetencyGraphComponent", "competencyGraph", "input", "required", "internalCompetencyGraph", "signal", "computed", "map", "edge", "__spreadProps", "__spreadValues", "id", "Subject", "constructor", "effect", "set", "sizeUpdate", "update", "node", "dimension", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "CompetencyGraphComponent_Conditional_0_Template", "CompetencyGraphComponent_Conditional_1_Template", "\u0275\u0275conditional", "length", "CompetencyNodeComponent", "NgxGraphModule", "GraphComponent", "TranslateDirective", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "name", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "competencyGraph", "CompetencyGraphModalComponent", "closeIcon", "faXmark", "learningPathApiService", "inject", "LearningPathApiService", "alertService", "AlertService", "input", "learningPathId", "required", "isLoading", "signal", "undefined", "activeModal", "NgbActiveModal", "constructor", "effect", "untracked", "loadCompetencyGraph", "__async", "set", "getLearningPathCompetencyGraph", "error", "closeModal", "close", "openCompetencyGraphModal", "modalService", "modalRef", "open", "size", "backdrop", "windowClass", "componentInstance", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CompetencyGraphModalComponent_Conditional_6_Template", "CompetencyGraphModalComponent_Conditional_7_Template", "\u0275\u0275listener", "CompetencyGraphModalComponent_Conditional_16_Template", "CompetencyGraphModalComponent_Conditional_17_Template", "\u0275\u0275conditional", "FontAwesomeModule", "FaIconComponent", "CompetencyGraphComponent", "TranslateDirective", "styles", "changeDetection"]
}
