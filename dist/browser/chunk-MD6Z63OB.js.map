{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/manage/services/programming-exercise-grading.service.ts"],
  "sourcesContent": ["import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { ProgrammingExerciseTestCase, Visibility } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { StaticCodeAnalysisCategory } from 'app/entities/programming/static-code-analysis-category.model';\r\nimport { ProgrammingExerciseGradingStatistics } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\n\r\nexport class ProgrammingExerciseTestCaseUpdate {\r\n    constructor(\r\n        public id?: number,\r\n        public weight?: number,\r\n        public bonusPoints?: number,\r\n        public bonusMultiplier?: number,\r\n        public visibility?: Visibility,\r\n    ) {}\r\n\r\n    static from(testCase: ProgrammingExerciseTestCase) {\r\n        return new ProgrammingExerciseTestCaseUpdate(testCase.id, testCase.weight, testCase.bonusPoints, testCase.bonusMultiplier, testCase.visibility);\r\n    }\r\n}\r\nexport class StaticCodeAnalysisCategoryUpdate {\r\n    constructor(\r\n        public id?: number,\r\n        public penalty?: number,\r\n        public maxPenalty?: number,\r\n        public state?: string,\r\n    ) {}\r\n\r\n    static from(category: StaticCodeAnalysisCategory) {\r\n        return new StaticCodeAnalysisCategoryUpdate(category.id, category.penalty, category.maxPenalty, category.state);\r\n    }\r\n}\r\n\r\nexport interface IProgrammingExerciseGradingService {\r\n    subscribeForTestCases(exerciseId: number): Observable<ProgrammingExerciseTestCase[] | undefined>;\r\n    notifyTestCases(exerciseId: number, testCases: ProgrammingExerciseTestCase[]): void;\r\n    updateTestCase(exerciseId: number, testCaseUpdates: ProgrammingExerciseTestCaseUpdate[]): Observable<ProgrammingExerciseTestCase[]>;\r\n    resetTestCases(exerciseId: number): Observable<ProgrammingExerciseTestCase[]>;\r\n    getCodeAnalysisCategories(exerciseId: number): Observable<StaticCodeAnalysisCategory[]>;\r\n    updateCodeAnalysisCategories(exerciseId: number, updates: StaticCodeAnalysisCategoryUpdate[]): Observable<StaticCodeAnalysisCategoryUpdate[]>;\r\n    resetCategories(exerciseId: number): Observable<StaticCodeAnalysisCategory[]>;\r\n    getGradingStatistics(exerciseId: number): Observable<ProgrammingExerciseGradingStatistics>;\r\n    importCategoriesFromExercise(targetExerciseId: number, sourceExerciseId: number): Observable<StaticCodeAnalysisCategory[]>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExerciseGradingService implements IProgrammingExerciseGradingService, OnDestroy {\r\n    private websocketService = inject(WebsocketService);\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/programming/programming-exercises';\r\n\r\n    private connections: { [exerciseId: string]: string } = {};\r\n    private subjects: { [exerciseId: string]: BehaviorSubject<ProgrammingExerciseTestCase[] | undefined> } = {};\r\n    private testCases: Map<number, ProgrammingExerciseTestCase[]> = new Map();\r\n\r\n    /**\r\n     * On destroy unsubscribe all connections.\r\n     */\r\n    ngOnDestroy(): void {\r\n        Object.values(this.connections).forEach((connection) => this.websocketService.unsubscribe(connection));\r\n    }\r\n\r\n    /**\r\n     * Subscribe to test case changes on the server.\r\n     * Executes a REST request initially to get the current value, so that ideally no null value is emitted to the subscriber.\r\n     *\r\n     * If the result is an empty array, this will be translated into a null value.\r\n     * This is done on purpose most likely this is an error as most programming exercises have at least one test case.\r\n     *\r\n     * @param exerciseId\r\n     */\r\n    subscribeForTestCases(exerciseId: number): Observable<ProgrammingExerciseTestCase[] | undefined> {\r\n        if (this.subjects[exerciseId]) {\r\n            return this.subjects[exerciseId] as Observable<ProgrammingExerciseTestCase[] | undefined>;\r\n        }\r\n        return this.getTestCases(exerciseId).pipe(\r\n            map((testCases) => (testCases.length ? testCases : undefined)),\r\n            catchError(() => of(undefined)),\r\n            switchMap((testCases: ProgrammingExerciseTestCase[] | undefined) => {\r\n                if (testCases) {\r\n                    this.testCases.set(exerciseId, testCases);\r\n                }\r\n                return this.initTestCaseSubscription(exerciseId, testCases);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Send new values for the test cases of an exercise to all subscribers.\r\n     * @param exerciseId\r\n     * @param testCases\r\n     */\r\n    public notifyTestCases(exerciseId: number, testCases: ProgrammingExerciseTestCase[]): void {\r\n        if (this.subjects[exerciseId]) {\r\n            this.subjects[exerciseId].next(testCases);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a REST request to the test case endpoint.\r\n     * @param exerciseId\r\n     */\r\n    public getTestCases(exerciseId: number): Observable<ProgrammingExerciseTestCase[]> {\r\n        if (this.testCases.has(exerciseId)) {\r\n            return of(this.testCases.get(exerciseId)!);\r\n        }\r\n        return this.http.get<ProgrammingExerciseTestCase[]>(`${this.resourceUrl}/${exerciseId}/test-cases`).pipe(\r\n            tap((testCases) => {\r\n                this.testCases.set(exerciseId, testCases);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the weights with the provided values of the test cases.\r\n     * Needs the exercise to verify permissions on the server.\r\n     *\r\n     * @param exerciseId\r\n     * @param updates dto for updating test cases to avoid setting automatic parameters (e.g. active or testName)\r\n     */\r\n    public updateTestCase(exerciseId: number, updates: ProgrammingExerciseTestCaseUpdate[]): Observable<ProgrammingExerciseTestCase[]> {\r\n        return this.http.patch<ProgrammingExerciseTestCase[]>(`${this.resourceUrl}/${exerciseId}/update-test-cases`, updates);\r\n    }\r\n\r\n    public getGradingStatistics(exerciseId: number): Observable<ProgrammingExerciseGradingStatistics> {\r\n        return this.http.get<ProgrammingExerciseGradingStatistics>(`${this.resourceUrl}/${exerciseId}/grading/statistics`);\r\n    }\r\n\r\n    /**\r\n     * Use with care: Resets all test cases of an exercise to their initial configuration\r\n     * Set all test case weights to 1, all bonus multipliers to 1, all bonus points to 0 and visibility to always.\r\n     *\r\n     * @param exerciseId the id of the exercise to reset the test case weights of.\r\n     */\r\n    public resetTestCases(exerciseId: number): Observable<ProgrammingExerciseTestCase[]> {\r\n        return this.http.patch<ProgrammingExerciseTestCase[]>(`${this.resourceUrl}/${exerciseId}/test-cases/reset`, {});\r\n    }\r\n\r\n    /**\r\n     * Use with care: Re-evaluate the latest automatic results of all student participations.\r\n     *\r\n     * @param exerciseId\r\n     */\r\n    public reEvaluate(exerciseId: number): Observable<number> {\r\n        return this.http.put<number>(`${this.resourceUrl}/${exerciseId}/grading/re-evaluate`, {});\r\n    }\r\n\r\n    /**\r\n     * Set up the infrastructure for handling and reusing a new test case subscription.\r\n     * @param exerciseId\r\n     * @param initialValue\r\n     */\r\n    private initTestCaseSubscription(exerciseId: number, initialValue: ProgrammingExerciseTestCase[] | undefined) {\r\n        const testCaseTopic = `/topic/programming-exercises/${exerciseId}/test-cases`;\r\n        this.websocketService.subscribe(testCaseTopic);\r\n        this.connections[exerciseId] = testCaseTopic;\r\n        this.subjects[exerciseId] = new BehaviorSubject(initialValue);\r\n        this.websocketService\r\n            .receive(testCaseTopic)\r\n            .pipe(\r\n                map((testCases) => (testCases.length ? testCases : undefined)),\r\n                tap((testCases) => {\r\n                    if (testCases) {\r\n                        this.testCases.set(exerciseId, testCases);\r\n                    }\r\n                    this.notifySubscribers(exerciseId, testCases);\r\n                }),\r\n            )\r\n            .subscribe();\r\n        return this.subjects[exerciseId];\r\n    }\r\n\r\n    /**\r\n     * Notify the subscribers of the exercise specific test cases.\r\n     * @param exerciseId\r\n     * @param testCases\r\n     */\r\n    private notifySubscribers(exerciseId: number, testCases: ProgrammingExerciseTestCase[] | undefined) {\r\n        this.subjects[exerciseId].next(testCases);\r\n    }\r\n\r\n    /**\r\n     * Executes a REST request to the static code analysis endpoint.\r\n     * @param exerciseId\r\n     */\r\n    public getCodeAnalysisCategories(exerciseId: number): Observable<StaticCodeAnalysisCategory[]> {\r\n        return this.http.get<StaticCodeAnalysisCategory[]>(`${this.resourceUrl}/${exerciseId}/static-code-analysis-categories`);\r\n    }\r\n\r\n    /**\r\n     * Update the fields with the provided values of the sca categories.\r\n     * Needs the exercise to verify permissions on the server.\r\n     *\r\n     * @param exerciseId\r\n     * @param updates dto for updating sca categories to avoid setting automatic parameters\r\n     */\r\n    public updateCodeAnalysisCategories(exerciseId: number, updates: StaticCodeAnalysisCategoryUpdate[]): Observable<StaticCodeAnalysisCategory[]> {\r\n        return this.http.patch<StaticCodeAnalysisCategory[]>(`${this.resourceUrl}/${exerciseId}/static-code-analysis-categories`, updates);\r\n    }\r\n\r\n    /**\r\n     * Restores the default static code analysis configuration for the given exercise.\r\n     *\r\n     * @param exerciseId\r\n     */\r\n    public resetCategories(exerciseId: number): Observable<StaticCodeAnalysisCategory[]> {\r\n        return this.http.patch<StaticCodeAnalysisCategory[]>(`${this.resourceUrl}/${exerciseId}/static-code-analysis-categories/reset`, {});\r\n    }\r\n\r\n    /**\r\n     * Imports an existing SCA configuration (defined in the sourceExercise) into the targetExercise\r\n     * by comping all categories.\r\n     * @param targetExerciseId The exercise to copy the categories in\r\n     * @param sourceExerciseId The exercise from where to copy the categories\r\n     * @return The new categories\r\n     */\r\n    public importCategoriesFromExercise(targetExerciseId: number, sourceExerciseId: number): Observable<StaticCodeAnalysisCategory[]> {\r\n        const params = new HttpParams().set('sourceExerciseId', sourceExerciseId);\r\n        return this.http.patch<StaticCodeAnalysisCategory[]>(`${this.resourceUrl}/${targetExerciseId}/static-code-analysis-categories/import`, {}, { params });\r\n    }\r\n}\r\n"],
  "mappings": "oLASM,IAAOA,EAAP,MAAOA,CAAiC,CAE/BC,GACAC,OACAC,YACAC,gBACAC,WALXC,YACWL,EACAC,EACAC,EACAC,EACAC,EAAuB,CAJvB,KAAAJ,GAAAA,EACA,KAAAC,OAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,WAAAA,CACR,CAEH,OAAOE,KAAKC,EAAqC,CAC7C,OAAO,IAAIR,EAAkCQ,EAASP,GAAIO,EAASN,OAAQM,EAASL,YAAaK,EAASJ,gBAAiBI,EAASH,UAAU,CAClJ,GAESI,EAAP,MAAOA,CAAgC,CAE9BR,GACAS,QACAC,WACAC,MAJXN,YACWL,EACAS,EACAC,EACAC,EAAc,CAHd,KAAAX,GAAAA,EACA,KAAAS,QAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,MAAAA,CACR,CAEH,OAAOL,KAAKM,EAAoC,CAC5C,OAAO,IAAIJ,EAAiCI,EAASZ,GAAIY,EAASH,QAASG,EAASF,WAAYE,EAASD,KAAK,CAClH,GAgBSE,GAAiC,IAAA,CAAxC,MAAOA,CAAiC,CAClCC,iBAAmBC,EAAOC,CAAgB,EAC1CC,KAAOF,EAAOG,CAAU,EAEzBC,YAAc,wCAEbC,YAAgD,CAAA,EAChDC,SAAiG,CAAA,EACjGC,UAAwD,IAAIC,IAKpEC,aAAW,CACPC,OAAOC,OAAO,KAAKN,WAAW,EAAEO,QAASC,GAAe,KAAKd,iBAAiBe,YAAYD,CAAU,CAAC,CACzG,CAWAE,sBAAsBC,EAAkB,CACpC,OAAI,KAAKV,SAASU,CAAU,EACjB,KAAKV,SAASU,CAAU,EAE5B,KAAKC,aAAaD,CAAU,EAAEE,KACjCC,EAAKZ,GAAeA,EAAUa,OAASb,EAAYc,MAAU,EAC7DC,EAAW,IAAMC,EAAGF,MAAS,CAAC,EAC9BG,EAAWjB,IACHA,GACA,KAAKA,UAAUkB,IAAIT,EAAYT,CAAS,EAErC,KAAKmB,yBAAyBV,EAAYT,CAAS,EAC7D,CAAC,CAEV,CAOOoB,gBAAgBX,EAAoBT,EAAwC,CAC3E,KAAKD,SAASU,CAAU,GACxB,KAAKV,SAASU,CAAU,EAAEY,KAAKrB,CAAS,CAEhD,CAMOU,aAAaD,EAAkB,CAClC,OAAI,KAAKT,UAAUsB,IAAIb,CAAU,EACtBO,EAAG,KAAKhB,UAAUuB,IAAId,CAAU,CAAE,EAEtC,KAAKd,KAAK4B,IAAmC,GAAG,KAAK1B,WAAW,IAAIY,CAAU,aAAa,EAAEE,KAChGa,EAAKxB,GAAa,CACd,KAAKA,UAAUkB,IAAIT,EAAYT,CAAS,CAC5C,CAAC,CAAC,CAEV,CASOyB,eAAehB,EAAoBiB,EAA4C,CAClF,OAAO,KAAK/B,KAAKgC,MAAqC,GAAG,KAAK9B,WAAW,IAAIY,CAAU,qBAAsBiB,CAAO,CACxH,CAEOE,qBAAqBnB,EAAkB,CAC1C,OAAO,KAAKd,KAAK4B,IAA0C,GAAG,KAAK1B,WAAW,IAAIY,CAAU,qBAAqB,CACrH,CAQOoB,eAAepB,EAAkB,CACpC,OAAO,KAAKd,KAAKgC,MAAqC,GAAG,KAAK9B,WAAW,IAAIY,CAAU,oBAAqB,CAAA,CAAE,CAClH,CAOOqB,WAAWrB,EAAkB,CAChC,OAAO,KAAKd,KAAKoC,IAAY,GAAG,KAAKlC,WAAW,IAAIY,CAAU,uBAAwB,CAAA,CAAE,CAC5F,CAOQU,yBAAyBV,EAAoBuB,EAAuD,CACxG,IAAMC,EAAgB,gCAAgCxB,CAAU,cAChE,YAAKjB,iBAAiB0C,UAAUD,CAAa,EAC7C,KAAKnC,YAAYW,CAAU,EAAIwB,EAC/B,KAAKlC,SAASU,CAAU,EAAI,IAAI0B,EAAgBH,CAAY,EAC5D,KAAKxC,iBACA4C,QAAQH,CAAa,EACrBtB,KACGC,EAAKZ,GAAeA,EAAUa,OAASb,EAAYc,MAAU,EAC7DU,EAAKxB,GAAa,CACVA,GACA,KAAKA,UAAUkB,IAAIT,EAAYT,CAAS,EAE5C,KAAKqC,kBAAkB5B,EAAYT,CAAS,CAChD,CAAC,CAAC,EAELkC,UAAS,EACP,KAAKnC,SAASU,CAAU,CACnC,CAOQ4B,kBAAkB5B,EAAoBT,EAAoD,CAC9F,KAAKD,SAASU,CAAU,EAAEY,KAAKrB,CAAS,CAC5C,CAMOsC,0BAA0B7B,EAAkB,CAC/C,OAAO,KAAKd,KAAK4B,IAAkC,GAAG,KAAK1B,WAAW,IAAIY,CAAU,kCAAkC,CAC1H,CASO8B,6BAA6B9B,EAAoBiB,EAA2C,CAC/F,OAAO,KAAK/B,KAAKgC,MAAoC,GAAG,KAAK9B,WAAW,IAAIY,CAAU,mCAAoCiB,CAAO,CACrI,CAOOc,gBAAgB/B,EAAkB,CACrC,OAAO,KAAKd,KAAKgC,MAAoC,GAAG,KAAK9B,WAAW,IAAIY,CAAU,yCAA0C,CAAA,CAAE,CACtI,CASOgC,6BAA6BC,EAA0BC,EAAwB,CAClF,IAAMC,EAAS,IAAIC,EAAU,EAAG3B,IAAI,mBAAoByB,CAAgB,EACxE,OAAO,KAAKhD,KAAKgC,MAAoC,GAAG,KAAK9B,WAAW,IAAI6C,CAAgB,0CAA2C,CAAA,EAAI,CAAEE,OAAAA,CAAM,CAAE,CACzJ,4CA9KSrD,EAAiC,6BAAjCA,EAAiCuD,QAAjCvD,EAAiCwD,UAAAC,WADpB,MAAM,CAAA,SACnBzD,CAAiC,GAAA",
  "names": ["ProgrammingExerciseTestCaseUpdate", "id", "weight", "bonusPoints", "bonusMultiplier", "visibility", "constructor", "from", "testCase", "StaticCodeAnalysisCategoryUpdate", "penalty", "maxPenalty", "state", "category", "ProgrammingExerciseGradingService", "websocketService", "inject", "WebsocketService", "http", "HttpClient", "resourceUrl", "connections", "subjects", "testCases", "Map", "ngOnDestroy", "Object", "values", "forEach", "connection", "unsubscribe", "subscribeForTestCases", "exerciseId", "getTestCases", "pipe", "map", "length", "undefined", "catchError", "of", "switchMap", "set", "initTestCaseSubscription", "notifyTestCases", "next", "has", "get", "tap", "updateTestCase", "updates", "patch", "getGradingStatistics", "resetTestCases", "reEvaluate", "put", "initialValue", "testCaseTopic", "subscribe", "BehaviorSubject", "receive", "notifySubscribers", "getCodeAnalysisCategories", "updateCodeAnalysisCategories", "resetCategories", "importCategoriesFromExercise", "targetExerciseId", "sourceExerciseId", "params", "HttpParams", "factory", "\u0275fac", "providedIn"]
}
