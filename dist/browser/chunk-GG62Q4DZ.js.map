{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/science-settings/science-settings.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { Setting } from 'app/shared/user-settings/user-settings.model';\r\nimport { UserSettingsService } from 'app/shared/user-settings/user-settings.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { ScienceSetting } from 'app/shared/user-settings/science-settings/science-settings-structure';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_ATLAS } from 'app/app.constants';\r\n\r\nexport const SCIENCE_SETTING_LOCAL_STORAGE_KEY = 'artemisapp.science.settings';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ScienceSettingsService {\r\n    private userSettingsService = inject(UserSettingsService);\r\n    private localStorageService = inject(LocalStorageService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    private currentScienceSettingsSubject = new ReplaySubject<ScienceSetting[]>(1);\r\n\r\n    constructor() {\r\n        // we need to handle the subscription here as this service is initialized independently of any component\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo.activeProfiles.includes(PROFILE_ATLAS)) {\r\n                this.initialize();\r\n                this.listenForScienceSettingsChanges();\r\n            }\r\n        });\r\n    }\r\n\r\n    initialize() {\r\n        addEventListener('storage', (event) => {\r\n            if (event.key === 'jhi-' + SCIENCE_SETTING_LOCAL_STORAGE_KEY) {\r\n                this.currentScienceSettingsSubject.next(this.getStoredScienceSettings());\r\n            }\r\n        });\r\n        this.currentScienceSettingsSubject.next(this.getStoredScienceSettings());\r\n    }\r\n\r\n    private getStoredScienceSettings(): ScienceSetting[] {\r\n        const storedIdentifier = this.localStorageService.retrieve(SCIENCE_SETTING_LOCAL_STORAGE_KEY);\r\n        return storedIdentifier ? JSON.parse(storedIdentifier) : [];\r\n    }\r\n\r\n    private storeScienceSettings(settings?: ScienceSetting[]): void {\r\n        if (settings) {\r\n            this.localStorageService.store(SCIENCE_SETTING_LOCAL_STORAGE_KEY, JSON.stringify(settings));\r\n        } else {\r\n            this.localStorageService.clear(SCIENCE_SETTING_LOCAL_STORAGE_KEY);\r\n        }\r\n        this.currentScienceSettingsSubject.next(this.getStoredScienceSettings());\r\n    }\r\n\r\n    public refreshScienceSettings(): void {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (!profileInfo.activeProfiles.includes(PROFILE_ATLAS)) {\r\n                return;\r\n            }\r\n\r\n            this.userSettingsService.loadSettings(UserSettingsCategory.SCIENCE_SETTINGS).subscribe({\r\n                next: (res: HttpResponse<Setting[]>) => {\r\n                    const currentScienceSettings = this.userSettingsService.loadSettingsSuccessAsIndividualSettings(\r\n                        res.body!,\r\n                        UserSettingsCategory.SCIENCE_SETTINGS,\r\n                    ) as ScienceSetting[];\r\n\r\n                    this.storeScienceSettings(currentScienceSettings);\r\n                    this.currentScienceSettingsSubject.next(currentScienceSettings);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    getScienceSettings(): ScienceSetting[] {\r\n        return this.getStoredScienceSettings();\r\n    }\r\n\r\n    getScienceSettingsUpdates(): Observable<ScienceSetting[]> {\r\n        return this.currentScienceSettingsSubject.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Subscribes and listens for changes related to science\r\n     */\r\n    private listenForScienceSettingsChanges(): void {\r\n        this.userSettingsService.userSettingsChangeEvent.subscribe(() => {\r\n            this.refreshScienceSettings();\r\n        });\r\n    }\r\n\r\n    eventLoggingAllowed(): boolean {\r\n        const setting = this.getStoredScienceSettings().find((setting) => {\r\n            return setting.key === 'activity';\r\n        });\r\n        return setting?.active ?? true;\r\n    }\r\n}\r\n"],
  "mappings": "0NAWO,IAAMA,EAAoC,8BAGpCC,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,oBAAsBC,EAAOC,CAAmB,EAChDC,oBAAsBF,EAAOG,CAAmB,EAChDC,eAAiBJ,EAAOK,CAAc,EAEtCC,8BAAgC,IAAIC,EAAgC,CAAC,EAE7EC,aAAA,CAEI,KAAKJ,eAAeK,eAAc,EAAGC,UAAWC,GAAe,CACvDA,EAAYC,eAAeC,SAASC,CAAa,IACjD,KAAKC,WAAU,EACf,KAAKC,gCAA+B,EAE5C,CAAC,CACL,CAEAD,YAAU,CACNE,iBAAiB,UAAYC,GAAS,CAC9BA,EAAMC,MAAQ,OAAStB,GACvB,KAAKS,8BAA8Bc,KAAK,KAAKC,yBAAwB,CAAE,CAE/E,CAAC,EACD,KAAKf,8BAA8Bc,KAAK,KAAKC,yBAAwB,CAAE,CAC3E,CAEQA,0BAAwB,CAC5B,IAAMC,EAAmB,KAAKpB,oBAAoBqB,SAAS1B,CAAiC,EAC5F,OAAOyB,EAAmBE,KAAKC,MAAMH,CAAgB,EAAI,CAAA,CAC7D,CAEQI,qBAAqBC,EAA2B,CAChDA,EACA,KAAKzB,oBAAoB0B,MAAM/B,EAAmC2B,KAAKK,UAAUF,CAAQ,CAAC,EAE1F,KAAKzB,oBAAoB4B,MAAMjC,CAAiC,EAEpE,KAAKS,8BAA8Bc,KAAK,KAAKC,yBAAwB,CAAE,CAC3E,CAEOU,wBAAsB,CACzB,KAAK3B,eAAeK,eAAc,EAAGC,UAAWC,GAAe,CACtDA,EAAYC,eAAeC,SAASC,CAAa,GAItD,KAAKf,oBAAoBiC,aAAaC,EAAqBC,gBAAgB,EAAExB,UAAU,CACnFU,KAAOe,GAAgC,CACnC,IAAMC,EAAyB,KAAKrC,oBAAoBsC,wCACpDF,EAAIG,KACJL,EAAqBC,gBAAgB,EAGzC,KAAKR,qBAAqBU,CAAsB,EAChD,KAAK9B,8BAA8Bc,KAAKgB,CAAsB,CAClE,EACH,CACL,CAAC,CACL,CAEAG,oBAAkB,CACd,OAAO,KAAKlB,yBAAwB,CACxC,CAEAmB,2BAAyB,CACrB,OAAO,KAAKlC,8BAA8BmC,aAAY,CAC1D,CAKQzB,iCAA+B,CACnC,KAAKjB,oBAAoB2C,wBAAwBhC,UAAU,IAAK,CAC5D,KAAKqB,uBAAsB,CAC/B,CAAC,CACL,CAEAY,qBAAmB,CAIf,OAHgB,KAAKtB,yBAAwB,EAAGuB,KAAMC,GAC3CA,EAAQ1B,MAAQ,UAC1B,GACe2B,QAAU,EAC9B,4CAlFShD,EAAsB,6BAAtBA,EAAsBiD,QAAtBjD,EAAsBkD,UAAAC,WADT,MAAM,CAAA,SACnBnD,CAAsB,GAAA",
  "names": ["SCIENCE_SETTING_LOCAL_STORAGE_KEY", "ScienceSettingsService", "userSettingsService", "inject", "UserSettingsService", "localStorageService", "LocalStorageService", "profileService", "ProfileService", "currentScienceSettingsSubject", "ReplaySubject", "constructor", "getProfileInfo", "subscribe", "profileInfo", "activeProfiles", "includes", "PROFILE_ATLAS", "initialize", "listenForScienceSettingsChanges", "addEventListener", "event", "key", "next", "getStoredScienceSettings", "storedIdentifier", "retrieve", "JSON", "parse", "storeScienceSettings", "settings", "store", "stringify", "clear", "refreshScienceSettings", "loadSettings", "UserSettingsCategory", "SCIENCE_SETTINGS", "res", "currentScienceSettings", "loadSettingsSuccessAsIndividualSettings", "body", "getScienceSettings", "getScienceSettingsUpdates", "asObservable", "userSettingsChangeEvent", "eventLoggingAllowed", "find", "setting", "active", "factory", "\u0275fac", "providedIn"]
}
