{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/markdown.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport type { PluginSimple } from 'markdown-it';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ArtemisMarkdownService {\r\n    private sanitizer = inject(DomSanitizer);\r\n\r\n    /**\r\n     * Converts markdown into html, sanitizes it and then declares it as safe to bypass further security.\r\n     *\r\n     * @param {string} markdownText the original markdown text\r\n     * @param {PluginSimple[]} extensions to use for markdown parsing\r\n     * @param {string[]} allowedHtmlTags to allow during sanitization\r\n     * @param {string[]} allowedHtmlAttributes to allow during sanitization\r\n     * @returns {string} the resulting html as a SafeHtml object that can be inserted into the angular template\r\n     */\r\n    safeHtmlForMarkdown(\r\n        markdownText?: string,\r\n        extensions: PluginSimple[] = [],\r\n        allowedHtmlTags: string[] | undefined = undefined,\r\n        allowedHtmlAttributes: string[] | undefined = undefined,\r\n    ): SafeHtml {\r\n        if (!markdownText || markdownText === '') {\r\n            return '';\r\n        }\r\n        const convertedString = htmlForMarkdown(markdownText, extensions, allowedHtmlTags, allowedHtmlAttributes);\r\n        return this.sanitizer.bypassSecurityTrustHtml(convertedString);\r\n    }\r\n\r\n    /**\r\n     * Converts markdown used in posting content, into html, sanitizes it and then declares it as safe to bypass further security.\r\n     *\r\n     * @param {string} markdownText the original markdown text\r\n     * @param {boolean} contentBeforeReference  to indicate if this is markdown content before a possible reference or after\r\n     * @param {string[]} allowedHtmlTags to allow during sanitization\r\n     * @param {string[]} allowedHtmlAttributes to allow during sanitization\r\n     * @returns {string} the resulting html as a SafeHtml object that can be inserted into the angular template\r\n     */\r\n    safeHtmlForPostingMarkdown(\r\n        markdownText?: string,\r\n        contentBeforeReference = true,\r\n        allowedHtmlTags: string[] | undefined = undefined,\r\n        allowedHtmlAttributes: string[] | undefined = undefined,\r\n    ): SafeHtml {\r\n        if (!markdownText || markdownText === '') {\r\n            return '';\r\n        }\r\n        let convertedString = htmlForMarkdown(markdownText, [], allowedHtmlTags, allowedHtmlAttributes);\r\n        // determine the first paragraph before (in contentBeforeReference) and the first paragraph after (in contentAfterReference) a reference\r\n        let paragraphPosition: number;\r\n        if (contentBeforeReference) {\r\n            paragraphPosition = convertedString.lastIndexOf('<p>');\r\n        } else {\r\n            paragraphPosition = convertedString.indexOf('<p>');\r\n        }\r\n        // the first paragraph before and the first paragraph after a reference need the class `inline-paragraph` in order have no unintended linebreaks\r\n        convertedString = convertedString.slice(0, paragraphPosition) + convertedString.slice(paragraphPosition).replace('<p>', '<p class=\"inline-paragraph\">');\r\n        return this.sanitizer.bypassSecurityTrustHtml(convertedString);\r\n    }\r\n}\r\n"],
  "mappings": "iIAMA,IAAaA,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,UAAYC,EAAOC,CAAY,EAWvCC,oBACIC,EACAC,EAA6B,CAAA,EAC7BC,EAAwCC,OACxCC,EAA8CD,OAAS,CAEvD,GAAI,CAACH,GAAgBA,IAAiB,GAClC,MAAO,GAEX,IAAMK,EAAkBC,EAAgBN,EAAcC,EAAYC,EAAiBE,CAAqB,EACxG,OAAO,KAAKR,UAAUW,wBAAwBF,CAAe,CACjE,CAWAG,2BACIR,EACAS,EAAyB,GACzBP,EAAwCC,OACxCC,EAA8CD,OAAS,CAEvD,GAAI,CAACH,GAAgBA,IAAiB,GAClC,MAAO,GAEX,IAAIK,EAAkBC,EAAgBN,EAAc,CAAA,EAAIE,EAAiBE,CAAqB,EAE1FM,EACJ,OAAID,EACAC,EAAoBL,EAAgBM,YAAY,KAAK,EAErDD,EAAoBL,EAAgBO,QAAQ,KAAK,EAGrDP,EAAkBA,EAAgBQ,MAAM,EAAGH,CAAiB,EAAIL,EAAgBQ,MAAMH,CAAiB,EAAEI,QAAQ,MAAO,8BAA8B,EAC/I,KAAKlB,UAAUW,wBAAwBF,CAAe,CACjE,4CAtDSV,EAAsB,6BAAtBA,EAAsBoB,QAAtBpB,EAAsBqB,UAAAC,WADT,MAAM,CAAA,SACnBtB,CAAsB,GAAA",
  "names": ["ArtemisMarkdownService", "sanitizer", "inject", "DomSanitizer", "safeHtmlForMarkdown", "markdownText", "extensions", "allowedHtmlTags", "undefined", "allowedHtmlAttributes", "convertedString", "htmlForMarkdown", "bypassSecurityTrustHtml", "safeHtmlForPostingMarkdown", "contentBeforeReference", "paragraphPosition", "lastIndexOf", "indexOf", "slice", "replace", "factory", "\u0275fac", "providedIn"]
}
