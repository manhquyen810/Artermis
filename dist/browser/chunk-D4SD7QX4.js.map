{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/assess/text-assessment-base.component.ts", "src/main/webapp/app/exercises/text/assess/textblock-feedback-editor/dropdown/textblock-feedback-dropdown.component.ts", "src/main/webapp/app/exercises/text/assess/textblock-feedback-editor/dropdown/textblock-feedback-dropdown.component.html", "src/main/webapp/app/exercises/text/assess/textblock-feedback-editor/text-block-feedback-editor.component.ts", "src/main/webapp/app/exercises/text/assess/textblock-feedback-editor/text-block-feedback-editor.component.html", "src/main/webapp/app/exercises/text/assess/textblock-assessment-card/text-block-assessment-card.component.ts", "src/main/webapp/app/exercises/text/assess/textblock-assessment-card/text-block-assessment-card.component.html", "src/main/webapp/app/exercises/text/shared/manual-text-selection/manual-text-selection.component.ts", "src/main/webapp/app/exercises/text/shared/manual-text-selection/manual-text-selection.component.html", "src/main/webapp/app/exercises/text/assess/manual-textblock-selection/manual-textblock-selection.component.ts", "src/main/webapp/app/exercises/text/assess/manual-textblock-selection/manual-textblock-selection.component.html", "src/main/webapp/app/exercises/text/assess/text-assessment-area/text-assessment-area.component.ts", "src/main/webapp/app/exercises/text/assess/text-assessment-area/text-assessment-area.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { TextBlockRef } from 'app/entities/text/text-block-ref.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { TextBlock, TextBlockType } from 'app/entities/text/text-block.model';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { TextAssessmentService } from 'app/exercises/text/assess/text-assessment.service';\r\nimport { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { getPositiveAndCappedTotalScore, getTotalMaxPoints } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class TextAssessmentBaseComponent implements OnInit {\r\n    protected alertService = inject(AlertService);\r\n    protected accountService = inject(AccountService);\r\n    protected assessmentsService = inject(TextAssessmentService);\r\n    protected structuredGradingCriterionService = inject(StructuredGradingCriterionService);\r\n\r\n    /*\r\n     * Base Component for TextSubmissionAssessmentComponent and ExampleTextSubmissionComponent since they share a lot of same functions.\r\n     */\r\n\r\n    exercise?: TextExercise;\r\n    protected userId?: number;\r\n    textBlockRefs: TextBlockRef[];\r\n    unusedTextBlockRefs: TextBlockRef[];\r\n    submission?: TextSubmission;\r\n\r\n    readonly getCourseFromExercise = getCourseFromExercise;\r\n\r\n    async ngOnInit() {\r\n        // Used to check if the assessor is the current user\r\n        const identity = await this.accountService.identity();\r\n        this.userId = identity?.id;\r\n    }\r\n\r\n    protected computeTotalScore(assessments: Feedback[]): number {\r\n        const maxPoints = getTotalMaxPoints(this.exercise);\r\n        const totalScore = this.structuredGradingCriterionService.computeTotalScore(assessments);\r\n        return getPositiveAndCappedTotalScore(totalScore, maxPoints);\r\n    }\r\n\r\n    protected handleSaveOrSubmitSuccessWithAlert(_response: HttpResponse<Result>, translationKey: string): void {\r\n        this.alertService.success(translationKey);\r\n    }\r\n\r\n    protected handleError(error: HttpErrorResponse): void {\r\n        const errorMessage = error.headers?.get('X-artemisApp-message') || error.message;\r\n        this.alertService.error(errorMessage);\r\n    }\r\n\r\n    /**\r\n     * Sorts text block refs by there appearance and checks for overlaps or gaps.\r\n     * Prevent duplicate text when manual and automatic text blocks are present.\r\n     *\r\n     * @param matchBlocksWithFeedbacks\r\n     * @param textBlockRefs\r\n     * @param unusedTextBlockRefs\r\n     * @param submission\r\n     */\r\n    protected sortAndSetTextBlockRefs(matchBlocksWithFeedbacks: TextBlockRef[], textBlockRefs: TextBlockRef[], unusedTextBlockRefs: TextBlockRef[], submission?: TextSubmission) {\r\n        // Sort by start index to process all refs in order\r\n        const sortedRefs = matchBlocksWithFeedbacks.sort((a, b) => a.block!.startIndex! - b.block!.startIndex!);\r\n\r\n        let previousIndex = 0;\r\n        const lastIndex = submission?.text?.length || 0;\r\n        for (let i = 0; i <= sortedRefs.length; i++) {\r\n            let ref: TextBlockRef | undefined = sortedRefs[i];\r\n            const nextIndex = ref ? ref.block!.startIndex! : lastIndex;\r\n\r\n            // last iteration, nextIndex = lastIndex. PreviousIndex > lastIndex is a sign for illegal state.\r\n            if (!ref && previousIndex > nextIndex) {\r\n                captureException('Illegal State: previous index cannot be greater than the last index!');\r\n\r\n                // new text block starts before previous one ended (overlap)\r\n            } else if (previousIndex > nextIndex) {\r\n                const previousRef = textBlockRefs.pop();\r\n                if (!previousRef) {\r\n                    captureException('Overlapping Text Blocks with nothing? previousRef: ' + previousRef + ' ref: ' + ref);\r\n                } else if ([ref, previousRef].every((r) => r.block?.type === TextBlockType.AUTOMATIC)) {\r\n                    captureException('Overlapping AUTOMATIC Text Blocks! previousRef: ' + previousRef + ' ref: ' + ref);\r\n                } else if ([ref, previousRef].every((r) => r.block?.type === TextBlockType.MANUAL)) {\r\n                    // Make sure to select a TextBlockRef that has a feedback.\r\n                    let selectedRef = ref;\r\n                    if (!selectedRef.feedback) {\r\n                        selectedRef = previousRef;\r\n                    }\r\n\r\n                    // Non-overlapping part of previousRef and ref should be added as a new text block (otherwise, some text is lost)\r\n                    // But before, make sure that the selectedRef does not already cover the exact same range (otherwise, duplicate text blocks will appear)\r\n                    if (selectedRef.block!.startIndex != previousRef.block!.startIndex! && selectedRef.block!.endIndex != nextIndex) {\r\n                        TextAssessmentBaseComponent.addTextBlockByIndices(previousRef.block!.startIndex!, nextIndex, submission!, textBlockRefs);\r\n                    }\r\n\r\n                    ref = selectedRef;\r\n                } else {\r\n                    // Find which block is Manual and only keep that one. Automatic block is stored in `unusedTextBlockRefs` in case we need to restore.\r\n                    switch (TextBlockType.MANUAL) {\r\n                        case previousRef.block!.type:\r\n                            unusedTextBlockRefs.push(ref);\r\n                            ref = previousRef;\r\n                            break;\r\n                        case ref.block!.type:\r\n                            unusedTextBlockRefs.push(previousRef);\r\n                            TextAssessmentBaseComponent.addTextBlockByIndices(previousRef.block!.startIndex!, nextIndex, submission!, textBlockRefs);\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                // If there is a gap between the current and previous block (most likely whitespace or linebreak), we need to create a new text block as well.\r\n            } else if (previousIndex < nextIndex) {\r\n                // There is a gap. We need to add a Text Block in between\r\n                TextAssessmentBaseComponent.addTextBlockByIndices(previousIndex, nextIndex, submission!, textBlockRefs);\r\n                previousIndex = nextIndex;\r\n            }\r\n\r\n            if (ref) {\r\n                textBlockRefs.push(ref);\r\n                previousIndex = ref.block!.endIndex!;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static addTextBlockByIndices(startIndex: number, endIndex: number, submission: TextSubmission, textBlockRefs: TextBlockRef[]): void {\r\n        if (startIndex >= endIndex) {\r\n            return;\r\n        }\r\n\r\n        const newRef = TextBlockRef.new();\r\n        if (newRef.block) {\r\n            newRef.block.startIndex = startIndex;\r\n            newRef.block.endIndex = endIndex;\r\n            newRef.block.setTextFromSubmission(submission!);\r\n        }\r\n        textBlockRefs.push(newRef);\r\n    }\r\n\r\n    /**\r\n     * Invoked by Child @Output when adding/removing text blocks. Recalculating refs to keep order and prevent duplicate text displayed.\r\n     */\r\n    public recalculateTextBlockRefs(): void {\r\n        // This is racing with another @Output, so we wait one loop\r\n        setTimeout(() => {\r\n            const refs = [...this.textBlockRefs, ...this.unusedTextBlockRefs].filter(({ block, feedback }) => block!.type === TextBlockType.AUTOMATIC || !!feedback);\r\n            this.textBlockRefs = [];\r\n            this.unusedTextBlockRefs = [];\r\n\r\n            this.sortAndSetTextBlockRefs(refs, this.textBlockRefs, this.unusedTextBlockRefs, this.submission);\r\n        });\r\n    }\r\n\r\n    protected get textBlocksWithFeedback(): TextBlock[] {\r\n        return [...this.textBlockRefs, ...this.unusedTextBlockRefs]\r\n            .filter(({ block, feedback }) => block?.type === TextBlockType.AUTOMATIC || !!feedback)\r\n            .map(({ block }) => block!);\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\n@Component({\r\n    selector: 'jhi-textblock-feedback-dropdown',\r\n    templateUrl: './textblock-feedback-dropdown.component.html',\r\n    styleUrls: ['./textblock-feedback-dropdown.component.scss'],\r\n    imports: [HelpIconComponent],\r\n})\r\nexport class TextblockFeedbackDropdownComponent {\r\n    @Output() didChange = new EventEmitter();\r\n    @Input() criterion: GradingCriterion;\r\n    @Input() feedback: Feedback = new Feedback();\r\n\r\n    updateAssessmentWithDropdown(instruction: GradingInstruction) {\r\n        this.feedback.gradingInstruction = instruction;\r\n        this.feedback.credits = instruction.credits;\r\n\r\n        // Reset the feedback correction status upon setting grading instruction in order to hide it.\r\n        this.feedback.correctionStatus = undefined;\r\n\r\n        this.didChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Get the color for grading instruction based on the credits of the instruction\r\n     *  @param {GradingInstruction} instr - the instruction object we get its color based on its credits\r\n     */\r\n    getInstrColour(instr: GradingInstruction): string | undefined {\r\n        if (instr.credits === 0) {\r\n            return 'var(--sgi-assessment-layout-zero-background)';\r\n        } else if (instr.credits < 0) {\r\n            return 'var(--sgi-assessment-layout-negative-background)';\r\n        } else if (instr.credits > 0) {\r\n            return 'var(--sgi-assessment-layout-positive-background)';\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n", "@for (instruction of criterion.structuredGradingInstructions; track instruction) {\r\n    <li>\r\n        <a (click)=\"updateAssessmentWithDropdown(instruction)\" class=\"dropdown-item\" [style.background-color]=\"getInstrColour(instruction)\">\r\n            <table class=\"table layout-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td class=\"td-score fw-bold\">{{ instruction!.credits }}P</td>\r\n                        <td>\r\n                            <span class=\"td-instruction\">{{ instruction!.instructionDescription }}</span>\r\n                        </td>\r\n                        <td class=\"td-usage-count\">\r\n                            @if (instruction!.usageCount) {\r\n                                <span>{{ instruction!.usageCount }}</span>\r\n                            } @else {\r\n                                &#8734;\r\n                            }\r\n                            <!-- if the usage count has no limit, the infinity symbol is displayed (= &#8734) -->\r\n                            <jhi-help-icon text=\"artemisApp.exercise.usageCountHint\" />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </a>\r\n    </li>\r\n}\r\n", "import { AfterViewInit, Component, ElementRef, EventEmitter, HostBinding, Input, Output, ViewChild, inject } from '@angular/core';\r\nimport { TextBlock } from 'app/entities/text/text-block.model';\r\nimport { Feedback, FeedbackType } from 'app/entities/feedback.model';\r\nimport { FeedbackSuggestionBadgeComponent } from 'app/exercises/shared/feedback/feedback-suggestion-badge/feedback-suggestion-badge.component';\r\nimport { ConfirmIconComponent } from 'app/shared/confirm-icon/confirm-icon.component';\r\nimport { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TextAssessmentEventType } from 'app/entities/text/text-assesment-event.model';\r\nimport { TextAssessmentAnalytics } from 'app/exercises/text/assess/analytics/text-assesment-analytics.service';\r\nimport { faAngleRight, faEdit, faExclamationTriangle, faQuestionCircle, faTimes, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { GradingInstructionLinkIconComponent } from 'app/shared/grading-instruction-link-icon/grading-instruction-link-icon.component';\r\nimport { TextblockFeedbackDropdownComponent } from './dropdown/textblock-feedback-dropdown.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AssessmentCorrectionRoundBadgeComponent } from 'app/assessment/unreferenced-feedback-detail/assessment-correction-round-badge/assessment-correction-round-badge.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-text-block-feedback-editor',\r\n    templateUrl: './text-block-feedback-editor.component.html',\r\n    styleUrls: ['./text-block-feedback-editor.component.scss'],\r\n    imports: [\r\n        FeedbackSuggestionBadgeComponent,\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        ConfirmIconComponent,\r\n        TranslateDirective,\r\n        GradingInstructionLinkIconComponent,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        TextblockFeedbackDropdownComponent,\r\n        FormsModule,\r\n        AssessmentCorrectionRoundBadgeComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class TextBlockFeedbackEditorComponent implements AfterViewInit {\r\n    private route = inject(ActivatedRoute);\r\n    private structuredGradingCriterionService = inject(StructuredGradingCriterionService);\r\n    private textAssessmentAnalytics = inject(TextAssessmentAnalytics);\r\n\r\n    readonly FeedbackType = FeedbackType;\r\n\r\n    @Input() textBlock: TextBlock = new TextBlock();\r\n    @Input() feedback: Feedback = new Feedback();\r\n    @Output() feedbackChange = new EventEmitter<Feedback>();\r\n    @Output() onClose = new EventEmitter<void>();\r\n    @Output() onFocus = new EventEmitter<void>();\r\n    @ViewChild('detailText') textareaRef: ElementRef;\r\n    @ViewChild(ConfirmIconComponent) confirmIconComponent: ConfirmIconComponent;\r\n    @Input() readOnly: boolean;\r\n    @Input() highlightDifferences: boolean;\r\n    @Input() criteria?: GradingCriterion[];\r\n    private textareaElement: HTMLTextAreaElement;\r\n\r\n    // Expose to template\r\n    protected readonly Feedback = Feedback;\r\n\r\n    @HostBinding('class.alert') @HostBinding('class.alert-dismissible') readonly classes = true;\r\n\r\n    @HostBinding('class.alert-secondary') get neutralFeedbackClass(): boolean {\r\n        return this.feedback.credits === 0;\r\n    }\r\n\r\n    @HostBinding('class.alert-success') get positiveFeedbackClass(): boolean {\r\n        return this.feedback.credits! > 0;\r\n    }\r\n\r\n    @HostBinding('class.alert-danger') get negativeFeedbackClass(): boolean {\r\n        return this.feedback.credits! < 0;\r\n    }\r\n\r\n    // Icons\r\n    faEdit = faEdit;\r\n    faQuestionCircle = faQuestionCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faTimes = faTimes;\r\n    faTrash = faTrash;\r\n    faAngleRight = faAngleRight;\r\n\r\n    constructor() {\r\n        this.textAssessmentAnalytics.setComponentRoute(this.route);\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component initialization is done\r\n     */\r\n    ngAfterViewInit(): void {\r\n        this.textareaElement = this.textareaRef.nativeElement as HTMLTextAreaElement;\r\n        setTimeout(() => this.textareaAutogrow());\r\n    }\r\n\r\n    /**\r\n     * Increase size of text area automatically\r\n     */\r\n    textareaAutogrow(): void {\r\n        this.textareaElement.style.height = '0px';\r\n        this.textareaElement.style.height = `${this.textareaElement.scrollHeight}px`;\r\n    }\r\n\r\n    get canDismiss(): boolean {\r\n        return this.feedback.credits === 0 && (this.feedback.detailText || '').length === 0;\r\n    }\r\n\r\n    /**\r\n     * Set focus to feedback editor\r\n     */\r\n    inFocus(): void {\r\n        this.onFocus.emit();\r\n    }\r\n\r\n    /**\r\n     * Dismiss changes in feedback editor\r\n     */\r\n    dismiss(): void {\r\n        this.onClose.emit();\r\n        this.textAssessmentAnalytics.sendAssessmentEvent(TextAssessmentEventType.DELETE_FEEDBACK, this.feedback.type, this.textBlock.type);\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate pressed Escape key\r\n     */\r\n    escKeyup(): void {\r\n        if (this.canDismiss) {\r\n            this.dismiss();\r\n        } else {\r\n            this.confirmIconComponent.toggle();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set focus to the text area\r\n     */\r\n    focus(): void {\r\n        this.textareaElement.focus();\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate a score click\r\n     */\r\n    onScoreClick(event: MouseEvent): void {\r\n        event.preventDefault();\r\n\r\n        // Reset the feedback correction status upon score change in order to hide it.\r\n        this.feedback.correctionStatus = undefined;\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate changes in the feedback editor\r\n     */\r\n    didChange(): void {\r\n        const feedbackTextBefore = this.feedback.text;\r\n        Feedback.updateFeedbackTypeOnChange(this.feedback);\r\n        this.feedbackChange.emit(this.feedback);\r\n        // send event to analytics if the feedback was adapted (=> title text changes to have prefix with \"adapted\" in it)\r\n        if (feedbackTextBefore !== this.feedback.text) {\r\n            this.textAssessmentAnalytics.sendAssessmentEvent(TextAssessmentEventType.EDIT_AUTOMATIC_FEEDBACK, this.feedback.type, this.textBlock.type);\r\n        }\r\n    }\r\n\r\n    connectFeedbackWithInstruction(event: Event) {\r\n        this.structuredGradingCriterionService.updateFeedbackWithStructuredGradingInstructionEvent(this.feedback, event);\r\n\r\n        // Reset the feedback correction status upon setting grading instruction in order to hide it.\r\n        this.feedback.correctionStatus = undefined;\r\n\r\n        this.didChange();\r\n    }\r\n}\r\n", "<div>\r\n    @if (Feedback.isFeedbackSuggestion(feedback)) {\r\n        <jhi-feedback-suggestion-badge [feedback]=\"feedback\" [useDefaultText]=\"true\" />\r\n    }\r\n    @if (!readOnly) {\r\n        <div class=\"close\">\r\n            @if (canDismiss) {\r\n                <fa-icon [icon]=\"faTimes\" [ngbTooltip]=\"'artemisApp.textAssessment.feedbackEditor.dismissFeedback' | artemisTranslate\" (click)=\"dismiss()\" />\r\n            } @else {\r\n                <jhi-confirm-icon\r\n                    [initialIcon]=\"faTimes\"\r\n                    [confirmIcon]=\"faTrash\"\r\n                    [initialTooltip]=\"'artemisApp.textAssessment.feedbackEditor.dismissFeedback' | artemisTranslate\"\r\n                    [confirmTooltip]=\"'artemisApp.textAssessment.feedbackEditor.dismissFeedbackConfirmation' | artemisTranslate\"\r\n                    (confirmEvent)=\"dismiss()\"\r\n                />\r\n            }\r\n        </div>\r\n    }\r\n    <div class=\"row\">\r\n        <div class=\"form-group col-md-10 m-0\">\r\n            <label class=\"d-inline\" jhiTranslate=\"artemisApp.assessment.detail.feedbackWithColon\" for=\"detailText-{{ textBlock.id }}\"></label>\r\n            @if (feedback.gradingInstruction!) {\r\n                <div class=\"d-inline\">\r\n                    <span class=\"fw-bold\">{{ feedback.gradingInstruction!.feedback }}</span>\r\n                    <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary\" [ngbTooltip]=\"'artemisApp.assessment.feedbackHint' | artemisTranslate\" />\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group col-md-1 text-end m-0\">\r\n            <label jhiTranslate=\"artemisApp.exercise.score\" for=\"'score-{{ textBlock.id }}\"></label>\r\n        </div>\r\n        @if (feedback.gradingInstruction!) {\r\n            <div class=\"form-group col-md-1 m-0\">\r\n                <jhi-grading-instruction-link-icon [feedback]=\"feedback\" />\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"row\" (drop)=\"connectFeedbackWithInstruction($event)\" (dragover)=\"$event.preventDefault()\">\r\n        <div class=\"input-group\">\r\n            <div class=\"input-group-prepend\">\r\n                @if (criteria) {\r\n                    <div class=\"dropdown\" ngbDropdown>\r\n                        <button class=\"btn btn-primary dropdown-toggle\" ngbDropdownToggle type=\"button\"></button>\r\n                        <!--if there is only one criterion, dropdown-menu contains its instructions-->\r\n                        @if (criteria.length === 1) {\r\n                            <ul ngbDropdownMenu>\r\n                                <jhi-textblock-feedback-dropdown [criterion]=\"criteria[0]\" [feedback]=\"feedback\" (didChange)=\"didChange()\" />\r\n                            </ul>\r\n                        } @else {\r\n                            <ul class=\"dropdown-menu\" ngbDropdownMenu>\r\n                                @for (criterion of criteria; track criterion) {\r\n                                    <li>\r\n                                        @if (criterion.title) {\r\n                                            <a class=\"dropdown-item\"> {{ criterion.title }}&nbsp;<fa-icon class=\"float-end\" [icon]=\"faAngleRight\" /> </a>\r\n                                        } @else {\r\n                                            <a class=\"dropdown-item\"\r\n                                                >(No title)\r\n                                                <fa-icon class=\"float-end\" [icon]=\"faAngleRight\" />\r\n                                            </a>\r\n                                        }\r\n                                        <ul class=\"dropdown-menu dropdown-submenu\">\r\n                                            <jhi-textblock-feedback-dropdown [criterion]=\"criterion\" [feedback]=\"feedback\" (didChange)=\"didChange()\" />\r\n                                        </ul>\r\n                                    </li>\r\n                                }\r\n                            </ul>\r\n                        }\r\n                        <!--if there is more than one criterion, the dropdown-menu contains the criteria titles with submenus of the corresponding instructions-->\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div class=\"form-group col-md-10\">\r\n                <textarea\r\n                    class=\"form-control\"\r\n                    rows=\"1\"\r\n                    [placeholder]=\"\r\n                        feedback.gradingInstruction!\r\n                            ? ('artemisApp.assessment.additionalFeedbackCommentPlaceholder' | artemisTranslate)\r\n                            : ('artemisApp.assessment.feedbackCommentPlaceholder' | artemisTranslate)\r\n                    \"\r\n                    id=\"feedback-editor-text-input\"\r\n                    [(ngModel)]=\"feedback.detailText\"\r\n                    #detailText\r\n                    (keyup)=\"textareaAutogrow()\"\r\n                    (keydown.escape)=\"escKeyup()\"\r\n                    (focus)=\"inFocus()\"\r\n                    [readOnly]=\"readOnly\"\r\n                    [disabled]=\"readOnly\"\r\n                    (ngModelChange)=\"didChange()\"\r\n                ></textarea>\r\n            </div>\r\n            <div class=\"form-group col-md-1 text-end\">\r\n                <input\r\n                    class=\"form-control\"\r\n                    type=\"number\"\r\n                    step=\"0.5\"\r\n                    [(ngModel)]=\"feedback.credits\"\r\n                    id=\"feedback-editor-points-input\"\r\n                    (keydown.escape)=\"escKeyup()\"\r\n                    (click)=\"onScoreClick($event)\"\r\n                    (focus)=\"inFocus()\"\r\n                    (ngModelChange)=\"didChange()\"\r\n                    [readOnly]=\"feedback.gradingInstruction || readOnly\"\r\n                    [disabled]=\"!!feedback.gradingInstruction || readOnly\"\r\n                />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!-- Text showing whether the tutor feedback is correct or not (upon validation on the server) -->\r\n    @if (feedback.correctionStatus !== undefined) {\r\n        <div>\r\n            @if (feedback.correctionStatus === 'CORRECT') {\r\n                <span class=\"text-success\">{{ 'artemisApp.exampleSubmission.feedback.' + feedback.correctionStatus! | artemisTranslate }} </span>\r\n            }\r\n            @if (feedback.correctionStatus !== 'CORRECT') {\r\n                <span class=\"text-danger\">{{ 'artemisApp.exampleSubmission.feedback.' + feedback.correctionStatus! | artemisTranslate }} </span>\r\n            }\r\n            <!-- :warning: emoji was rendered as a black-white glyph, hence the solution with the fa-icon -->\r\n            @if (feedback.correctionStatus !== 'CORRECT') {\r\n                <fa-icon class=\"text-warning\" [icon]=\"faExclamationTriangle\" />\r\n            }\r\n        </div>\r\n    }\r\n    <!-- correction round label-->\r\n    <jhi-assessment-correction-round-badge [feedback]=\"feedback\" [highlightDifferences]=\"highlightDifferences\" />\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, ViewChild, inject } from '@angular/core';\r\nimport { TextBlockRef } from 'app/entities/text/text-block-ref.model';\r\nimport { TextBlockFeedbackEditorComponent } from 'app/exercises/text/assess/textblock-feedback-editor/text-block-feedback-editor.component';\r\nimport { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\r\nimport { TextAssessmentEventType } from 'app/entities/text/text-assesment-event.model';\r\nimport { FeedbackType } from 'app/entities/feedback.model';\r\nimport { TextBlockType } from 'app/entities/text/text-block.model';\r\nimport { TextAssessmentAnalytics } from 'app/exercises/text/assess/analytics/text-assesment-analytics.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\n\r\ntype OptionalTextBlockRef = TextBlockRef | undefined;\r\n\r\n@Component({\r\n    selector: 'jhi-text-block-assessment-card',\r\n    templateUrl: './text-block-assessment-card.component.html',\r\n    styleUrls: ['./text-block-assessment-card.component.scss'],\r\n    imports: [TextBlockFeedbackEditorComponent],\r\n})\r\nexport class TextBlockAssessmentCardComponent {\r\n    private route = inject(ActivatedRoute);\r\n    private structuredGradingCriterionService = inject(StructuredGradingCriterionService);\r\n    private textAssessmentAnalytics = inject(TextAssessmentAnalytics);\r\n\r\n    @Input() textBlockRef: TextBlockRef;\r\n    @Input() selected = false;\r\n    @Input() readOnly: boolean;\r\n    @Input() isMissedFeedback: boolean;\r\n    @Input() highlightDifferences: boolean;\r\n    @Input() criteria?: GradingCriterion[];\r\n\r\n    @Output() didSelect = new EventEmitter<OptionalTextBlockRef>();\r\n    @Output() didChange = new EventEmitter<TextBlockRef>();\r\n    @Output() didDelete = new EventEmitter<TextBlockRef>();\r\n    @ViewChild(TextBlockFeedbackEditorComponent) feedbackEditor: TextBlockFeedbackEditorComponent;\r\n\r\n    constructor() {\r\n        this.textAssessmentAnalytics.setComponentRoute(this.route);\r\n    }\r\n\r\n    /**\r\n     * Select a text block\r\n     * @param {boolean} autofocus - Enable autofocus (defaults to true)\r\n     */\r\n    select(autofocus = true): void {\r\n        if (this.readOnly) {\r\n            return;\r\n        }\r\n        if (this.textBlockRef && !this.textBlockRef.selectable) {\r\n            return;\r\n        }\r\n\r\n        this.didSelect.emit(this.textBlockRef);\r\n        this.textBlockRef.initFeedback();\r\n\r\n        if (autofocus) {\r\n            setTimeout(() => this.feedbackEditor.focus());\r\n            if (!this.selected && this.textBlockRef.feedback?.type === FeedbackType.MANUAL) {\r\n                this.textAssessmentAnalytics.sendAssessmentEvent(TextAssessmentEventType.ADD_FEEDBACK_AUTOMATICALLY_SELECTED_BLOCK, FeedbackType.MANUAL, TextBlockType.AUTOMATIC);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unselect a text block\r\n     */\r\n    unselect(): void {\r\n        this.didSelect.emit(undefined);\r\n        delete this.textBlockRef.feedback;\r\n        if (this.textBlockRef.block!.type === TextBlockType.MANUAL && this.textBlockRef.deletable) {\r\n            this.didDelete.emit(this.textBlockRef);\r\n        }\r\n        this.feedbackDidChange();\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate that feedback did change\r\n     */\r\n    feedbackDidChange(): void {\r\n        this.didChange.emit(this.textBlockRef);\r\n    }\r\n\r\n    /**\r\n     * Connects the structured grading instructions with the feedback of a text block\r\n     * @param {Event} event - The drop event\r\n     */\r\n    connectStructuredGradingInstructionsWithTextBlock(event: Event) {\r\n        if (!this.textBlockRef.selectable) {\r\n            return;\r\n        }\r\n        this.select();\r\n        if (this.textBlockRef.feedback) {\r\n            this.structuredGradingCriterionService.updateFeedbackWithStructuredGradingInstructionEvent(this.textBlockRef.feedback, event);\r\n        }\r\n        this.feedbackDidChange();\r\n    }\r\n}\r\n", "<!-- Show Text-->\r\n<span\r\n    [draggable]=\"true\"\r\n    (drop)=\"connectStructuredGradingInstructionsWithTextBlock($event)\"\r\n    (dragover)=\"$event.preventDefault()\"\r\n    [textContent]=\"textBlockRef.block!.text\"\r\n    (click)=\"select()\"\r\n    [class.text-with-feedback]=\"!!textBlockRef.feedback\"\r\n    [class.active]=\"selected\"\r\n    [class.positive-feedback]=\"textBlockRef.feedback?.credits! > 0\"\r\n    [class.negative-feedback]=\"textBlockRef.feedback?.credits! < 0\"\r\n    [class.neutral-feedback]=\"textBlockRef.feedback?.credits === 0\"\r\n    [class.clickable]=\"textBlockRef.selectable\"\r\n    [class.highlighted]=\"textBlockRef.highlighted\"\r\n></span>\r\n<!-- Display Feedback Editor -->\r\n@if (textBlockRef.feedback || selected) {\r\n    <jhi-text-block-feedback-editor\r\n        [textBlock]=\"textBlockRef.block!\"\r\n        [feedback]=\"textBlockRef.feedback!\"\r\n        [class.active]=\"selected\"\r\n        class=\"guided-tour-text-assessment\"\r\n        (click)=\"select(false)\"\r\n        (onFocus)=\"select(false)\"\r\n        (onClose)=\"unselect()\"\r\n        (feedbackChange)=\"feedbackDidChange()\"\r\n        [readOnly]=\"readOnly\"\r\n        [highlightDifferences]=\"highlightDifferences\"\r\n        [criteria]=\"criteria\"\r\n    />\r\n}\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { TextAssessmentEventType } from 'app/entities/text/text-assesment-event.model';\r\nimport { FeedbackType } from 'app/entities/feedback.model';\r\nimport { TextBlockType } from 'app/entities/text/text-block.model';\r\nimport { TextAssessmentAnalytics } from 'app/exercises/text/assess/analytics/text-assesment-analytics.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { TextBlockRefGroup } from 'app/exercises/text/assess/manual-textblock-selection/manual-textblock-selection.component';\r\n\r\nexport type wordSelection = {\r\n    word: string;\r\n    index: number;\r\n};\r\n\r\nconst LINEBREAK = /\\n/g;\r\nconst SPACE = ' ';\r\n\r\n@Component({\r\n    selector: 'jhi-manual-text-selection',\r\n    templateUrl: './manual-text-selection.component.html',\r\n    styleUrls: ['./manual-text-selection.component.scss'],\r\n})\r\nexport class ManualTextSelectionComponent {\r\n    protected route = inject(ActivatedRoute);\r\n    textAssessmentAnalytics = inject(TextAssessmentAnalytics);\r\n\r\n    @Input() public textBlockRefGroup: TextBlockRefGroup;\r\n    @Input() submission: TextSubmission;\r\n    @Output() public didSelectWord = new EventEmitter<wordSelection[]>();\r\n    @Input() set words(textBlockRefGroup: TextBlockRefGroup) {\r\n        // Since some words are only separated through linebreaks, the linebreaks are replaced by a linebreak with an additional space, in order to split the words by spaces.\r\n        this.submissionWords = textBlockRefGroup.getText(this.submission).replace(LINEBREAK, '\\n ').split(SPACE);\r\n    }\r\n    public submissionWords: string[] | undefined;\r\n    public currentWordIndex: number;\r\n    public selectedWords = new Array<wordSelection>();\r\n    public ready = false;\r\n\r\n    constructor() {\r\n        this.textAssessmentAnalytics.setComponentRoute(this.route);\r\n    }\r\n\r\n    calculateIndex(index: number): void {\r\n        let result = this.textBlockRefGroup.startIndex!;\r\n        for (let i = 0; i < index; i++) {\r\n            const space = 1;\r\n            result += this.submissionWords![i].length + space;\r\n\r\n            const wordContainsLinebreak = this.submissionWords![i].search(/\\n+/g) !== -1;\r\n            if (wordContainsLinebreak) {\r\n                result--;\r\n            }\r\n        }\r\n        this.currentWordIndex = result;\r\n    }\r\n\r\n    selectWord(word: string): void {\r\n        const canSelectWord = this.selectedWords.length < 2;\r\n        if (canSelectWord) {\r\n            this.selectedWords.push({ word, index: this.currentWordIndex });\r\n        }\r\n\r\n        const textBlockSelected = this.selectedWords.length === 2;\r\n        if (textBlockSelected) {\r\n            this.ready = true;\r\n\r\n            const lastWordClickedFirst = this.selectedWords[0].index > this.selectedWords[1].index;\r\n            if (lastWordClickedFirst) {\r\n                this.selectedWords.reverse();\r\n            }\r\n        }\r\n\r\n        if (this.ready) {\r\n            this.didSelectWord.emit(this.selectedWords);\r\n            this.textAssessmentAnalytics.sendAssessmentEvent(TextAssessmentEventType.ADD_FEEDBACK_MANUALLY_SELECTED_BLOCK, FeedbackType.MANUAL, TextBlockType.MANUAL);\r\n        }\r\n    }\r\n}\r\n", "<div>\r\n    <!-- DO NOT ADD LINEBREAKS INSIDE div.manual-text-selection-area -->\r\n    @for (word of submissionWords; track word; let i = $index) {\r\n        <span class=\"manual-text-selection-area\" tabindex=\"-1\" (click)=\"calculateIndex(i); selectWord(word)\">{{ ' ' + word }}</span>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TextBlockRef } from 'app/entities/text/text-block-ref.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { TextBlock } from 'app/entities/text/text-block.model';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { ManualTextSelectionComponent, wordSelection } from 'app/exercises/text/shared/manual-text-selection/manual-text-selection.component';\r\nimport { TextBlockAssessmentCardComponent } from '../textblock-assessment-card/text-block-assessment-card.component';\r\n\r\n@Component({\r\n    selector: 'jhi-manual-textblock-selection',\r\n    templateUrl: './manual-textblock-selection.component.html',\r\n    imports: [TextBlockAssessmentCardComponent, ManualTextSelectionComponent],\r\n})\r\nexport class ManualTextblockSelectionComponent {\r\n    @Input() set textBlockRefs(textBlockRefs: TextBlockRef[]) {\r\n        this.textBlockRefGroups = TextBlockRefGroup.fromTextBlockRefs(textBlockRefs);\r\n    }\r\n    get textBlockRefs(): TextBlockRef[] {\r\n        return this.textBlockRefGroups.reduce((previous: TextBlockRef[], group: TextBlockRefGroup) => [...previous, ...group.refs], []);\r\n    }\r\n    @Input() selectedRef?: TextBlockRef;\r\n    @Input() readOnly: boolean;\r\n    @Input() submission: TextSubmission;\r\n    @Input() criteria?: GradingCriterion[];\r\n\r\n    @Output() textBlockRefsChange = new EventEmitter<TextBlockRef[]>();\r\n    @Output() textBlockRefAdded = new EventEmitter<TextBlockRef>();\r\n    @Output() selectedRefChange = new EventEmitter<TextBlockRef | undefined>();\r\n\r\n    textBlockRefGroups: TextBlockRefGroup[];\r\n\r\n    textBlockRefsChangeEmit(): void {\r\n        this.textBlockRefsChange.emit(this.textBlockRefs);\r\n    }\r\n\r\n    /**\r\n     * Called by <jhi-manual-text-selection> component.\r\n     * Select Text within text block ref group and emit to parent component if it is indeed a new text block.\r\n     *\r\n     * @param selectedWords first and last word selected received from <jhi-manual-text-selection>.\r\n     */\r\n    handleTextSelection(selectedWords: wordSelection[]): void {\r\n        // create new Text Block for text\r\n        const textBlockRef = TextBlockRef.new();\r\n        const textBlock = textBlockRef.block;\r\n\r\n        if (textBlock) {\r\n            textBlock.startIndex = selectedWords[0].index;\r\n            textBlock.endIndex = selectedWords[1].index + selectedWords[1].word.length;\r\n            textBlock.setTextFromSubmission(this.submission);\r\n            const existingRef = this.textBlockRefs.find((ref) => ref.block?.id === textBlock.id);\r\n\r\n            if (existingRef) {\r\n                existingRef.initFeedback();\r\n                this.selectedRefChange.emit(existingRef);\r\n            } else {\r\n                textBlockRef.initFeedback();\r\n                this.textBlockRefAdded.emit(textBlockRef);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextBlockRefGroup {\r\n    public refs: TextBlockRef[];\r\n\r\n    constructor(textBlockRef: TextBlockRef) {\r\n        this.refs = [textBlockRef];\r\n    }\r\n\r\n    get hasFeedback(): boolean {\r\n        return this.refs.length === 1 && !!this.refs[0].feedback;\r\n    }\r\n\r\n    get singleRef(): TextBlockRef | null {\r\n        return this.hasFeedback ? this.refs[0] : null;\r\n    }\r\n\r\n    get startIndex() {\r\n        return this.refs[0].block?.startIndex;\r\n    }\r\n\r\n    private get endIndex() {\r\n        return this.refs.last()?.block?.endIndex;\r\n    }\r\n\r\n    getText(submission: TextSubmission): string {\r\n        const textBlock = new TextBlock();\r\n        textBlock.startIndex = this.startIndex;\r\n        textBlock.endIndex = this.endIndex;\r\n        textBlock.setTextFromSubmission(submission);\r\n\r\n        return textBlock.text!;\r\n    }\r\n\r\n    addRef(textBlockRef: TextBlockRef) {\r\n        this.refs.push(textBlockRef);\r\n    }\r\n\r\n    static fromTextBlockRefs = (textBlockRefs: TextBlockRef[]): TextBlockRefGroup[] =>\r\n        textBlockRefs.reduce((groups: TextBlockRefGroup[], elem: TextBlockRef) => {\r\n            const lastGroup = groups.last();\r\n            if (lastGroup && !lastGroup.hasFeedback && !elem.feedback) {\r\n                lastGroup.addRef(elem);\r\n            } else {\r\n                groups.push(new TextBlockRefGroup(elem));\r\n            }\r\n            return groups;\r\n        }, []);\r\n}\r\n", "@for (group of textBlockRefGroups; track group) {\r\n    @if (group.singleRef) {\r\n        <jhi-text-block-assessment-card\r\n            [textBlockRef]=\"group.singleRef\"\r\n            [selected]=\"selectedRef === group.singleRef\"\r\n            (didSelect)=\"selectedRef = $event; selectedRefChange.emit($event)\"\r\n            (didChange)=\"textBlockRefsChangeEmit()\"\r\n            [readOnly]=\"readOnly\"\r\n            [criteria]=\"criteria\"\r\n        />\r\n    } @else {\r\n        <!-- DO NOT ADD LINEBREAKS INSIDE <jhi-manual-text-selection> -->\r\n        <jhi-manual-text-selection [submission]=\"submission\" [words]=\"group\" [textBlockRefGroup]=\"group\" (didSelectWord)=\"handleTextSelection($event)\" />\r\n    }\r\n}\r\n", "import { Component, EventEmitter, HostListener, Input, OnChanges, Output, SimpleChanges, inject } from '@angular/core';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { TextBlockRef } from 'app/entities/text/text-block-ref.model';\r\nimport { StringCountService } from 'app/exercises/text/participate/string-count.service';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { TextBlockAssessmentCardComponent } from '../textblock-assessment-card/text-block-assessment-card.component';\r\nimport { ManualTextblockSelectionComponent } from '../manual-textblock-selection/manual-textblock-selection.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-text-assessment-area',\r\n    templateUrl: './text-assessment-area.component.html',\r\n    styles: [\r\n        `\r\n            :host {\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n    imports: [TextBlockAssessmentCardComponent, ManualTextblockSelectionComponent, TranslateDirective],\r\n})\r\nexport class TextAssessmentAreaComponent implements OnChanges {\r\n    private stringCountService = inject(StringCountService);\r\n\r\n    // inputs\r\n    @Input() submission: TextSubmission;\r\n    @Input() textBlockRefs: TextBlockRef[];\r\n    @Input() readOnly: boolean;\r\n    @Input() highlightDifferences: boolean;\r\n    @Input() criteria?: GradingCriterion[];\r\n    @Input() allowManualBlockSelection = true;\r\n\r\n    // outputs\r\n    @Output() textBlockRefsChange = new EventEmitter<TextBlockRef[]>();\r\n    @Output() textBlockRefsAddedRemoved = new EventEmitter<void>();\r\n    autoTextBlockAssessment = true;\r\n    selectedRef?: TextBlockRef;\r\n    wordCount = 0;\r\n    characterCount = 0;\r\n\r\n    /**\r\n     * Life cycle hook to indicate component change\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.submission && changes.submission.currentValue) {\r\n            const { text } = changes.submission.currentValue as TextSubmission;\r\n            this.wordCount = this.stringCountService.countWords(text);\r\n            this.characterCount = this.stringCountService.countCharacters(text);\r\n        }\r\n\r\n        this.textBlockRefs.sort((a, b) => a.block!.startIndex! - b.block!.startIndex!);\r\n    }\r\n\r\n    @HostListener('document:keydown.alt', ['$event', 'false'])\r\n    @HostListener('document:keyup.alt', ['$event', 'true'])\r\n    onAltToggle(event: KeyboardEvent, toggleValue: boolean) {\r\n        if (!this.allowManualBlockSelection) {\r\n            return;\r\n        }\r\n        this.autoTextBlockAssessment = toggleValue;\r\n    }\r\n\r\n    /**\r\n     * Emit the reference change of text blocks\r\n     */\r\n    textBlockRefsChangeEmit(): void {\r\n        this.textBlockRefsChange.emit(this.textBlockRefs);\r\n    }\r\n\r\n    /**\r\n     * It is called if a text block is added manually.\r\n     * @param ref - added text block\r\n     */\r\n    addTextBlockRef(ref: TextBlockRef): void {\r\n        this.textBlockRefs.push(ref);\r\n        this.textBlockRefsAddedRemoved.emit();\r\n    }\r\n\r\n    /**\r\n     * It is called if the assessment for a text block is deleted. So, textBlockRef is deleted\r\n     * @param ref - TextBlockRef that has a deleted assessment(feedback).\r\n     */\r\n    removeTextBlockRef(ref: TextBlockRef): void {\r\n        const index = this.textBlockRefs.findIndex((elem) => elem.block!.id! === ref.block!.id!);\r\n        this.textBlockRefs.splice(index, 1);\r\n        this.textBlockRefsAddedRemoved.emit();\r\n    }\r\n\r\n    /**\r\n     * It is called when a text block is selected.\r\n     * @param ref - selected TextBlockRef\r\n     */\r\n    didSelectRef(ref?: TextBlockRef): void {\r\n        this.selectedRef = ref;\r\n    }\r\n}\r\n", "@if (autoTextBlockAssessment) {\r\n    @for (ref of textBlockRefs; track ref; let i = $index) {\r\n        <jhi-text-block-assessment-card\r\n            id=\"text-feedback-block-{{ i }}\"\r\n            [textBlockRef]=\"ref\"\r\n            [selected]=\"selectedRef === ref\"\r\n            [readOnly]=\"readOnly\"\r\n            (didSelect)=\"didSelectRef($event)\"\r\n            (didChange)=\"textBlockRefsChangeEmit()\"\r\n            (didDelete)=\"removeTextBlockRef($event)\"\r\n            [highlightDifferences]=\"highlightDifferences\"\r\n            [criteria]=\"criteria\"\r\n        />\r\n    }\r\n} @else {\r\n    <jhi-manual-textblock-selection\r\n        [(textBlockRefs)]=\"textBlockRefs\"\r\n        [(selectedRef)]=\"selectedRef\"\r\n        [readOnly]=\"readOnly\"\r\n        (textBlockRefAdded)=\"addTextBlockRef($event)\"\r\n        [submission]=\"submission\"\r\n        [criteria]=\"criteria\"\r\n    />\r\n}\r\n<div>\r\n    <span class=\"badge bg-primary mb-2\" id=\"text-assessment-word-count\" jhiTranslate=\"artemisApp.textExercise.wordCount\" [translateValues]=\"{ count: wordCount }\"></span>\r\n    <span\r\n        class=\"badge bg-primary mb-2\"\r\n        id=\"text-assessment-character-count\"\r\n        jhiTranslate=\"artemisApp.textExercise.characterCount\"\r\n        [translateValues]=\"{ count: characterCount }\"\r\n    ></span>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["TextAssessmentBaseComponent", "alertService", "inject", "AlertService", "accountService", "AccountService", "assessmentsService", "TextAssessmentService", "structuredGradingCriterionService", "StructuredGradingCriterionService", "exercise", "userId", "textBlockRefs", "unusedTextBlockRefs", "submission", "getCourseFromExercise", "ngOnInit", "__async", "identity", "id", "computeTotalScore", "assessments", "maxPoints", "getTotalMaxPoints", "totalScore", "getPositiveAndCappedTotalScore", "handleSaveOrSubmitSuccessWithAlert", "_response", "translationKey", "success", "handleError", "error", "errorMessage", "headers", "get", "message", "sortAndSetTextBlockRefs", "matchBlocksWithFeedbacks", "sortedRefs", "sort", "a", "b", "block", "startIndex", "previousIndex", "lastIndex", "text", "length", "i", "ref", "nextIndex", "captureException", "previousRef", "pop", "every", "r", "type", "TextBlockType", "AUTOMATIC", "MANUAL", "selectedRef", "feedback", "endIndex", "addTextBlockByIndices", "push", "newRef", "TextBlockRef", "new", "setTextFromSubmission", "recalculateTextBlockRefs", "setTimeout", "refs", "filter", "textBlocksWithFeedback", "map", "selectors", "decls", "vars", "template", "rf", "ctx", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "instruction_r2", "usageCount", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateAssessmentWithDropdown", "\u0275\u0275template", "TextblockFeedbackDropdownComponent_For_1_Conditional_22_Template", "TextblockFeedbackDropdownComponent_For_1_Conditional_23_Template", "\u0275\u0275element", "\u0275\u0275styleProp", "getInstrColour", "\u0275\u0275textInterpolate1", "credits", "instructionDescription", "\u0275\u0275conditional", "TextblockFeedbackDropdownComponent", "didChange", "EventEmitter", "criterion", "feedback", "Feedback", "instruction", "gradingInstruction", "correctionStatus", "undefined", "emit", "instr", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "TextblockFeedbackDropdownComponent_For_1_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "structuredGradingInstructions", "HelpIconComponent", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "feedback", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "dismiss", "\u0275\u0275elementEnd", "faTimes", "\u0275\u0275pipeBind1", "_r4", "faTrash", "\u0275\u0275template", "TextBlockFeedbackEditorComponent_Conditional_3_Conditional_3_Template", "TextBlockFeedbackEditorComponent_Conditional_3_Conditional_4_Template", "\u0275\u0275conditional", "canDismiss", "\u0275\u0275textInterpolate", "gradingInstruction", "faQuestionCircle", "_r5", "didChange", "criteria", "\u0275\u0275textInterpolate1", "criterion_r7", "title", "faAngleRight", "TextBlockFeedbackEditorComponent_Conditional_25_Conditional_7_For_4_Conditional_3_Template", "TextBlockFeedbackEditorComponent_Conditional_25_Conditional_7_For_4_Conditional_4_Template", "_r6", "\u0275\u0275repeaterCreate", "TextBlockFeedbackEditorComponent_Conditional_25_Conditional_7_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "TextBlockFeedbackEditorComponent_Conditional_25_Conditional_6_Template", "TextBlockFeedbackEditorComponent_Conditional_25_Conditional_7_Template", "length", "correctionStatus", "faExclamationTriangle", "TextBlockFeedbackEditorComponent_Conditional_43_Conditional_3_Template", "TextBlockFeedbackEditorComponent_Conditional_43_Conditional_4_Template", "TextBlockFeedbackEditorComponent_Conditional_43_Conditional_5_Template", "TextBlockFeedbackEditorComponent", "route", "inject", "ActivatedRoute", "structuredGradingCriterionService", "StructuredGradingCriterionService", "textAssessmentAnalytics", "TextAssessmentAnalytics", "FeedbackType", "textBlock", "TextBlock", "Feedback", "feedbackChange", "EventEmitter", "onClose", "onFocus", "textareaRef", "confirmIconComponent", "readOnly", "highlightDifferences", "textareaElement", "classes", "neutralFeedbackClass", "credits", "positiveFeedbackClass", "negativeFeedbackClass", "faEdit", "constructor", "setComponentRoute", "ngAfterViewInit", "nativeElement", "setTimeout", "textareaAutogrow", "style", "height", "scrollHeight", "detailText", "inFocus", "emit", "sendAssessmentEvent", "TextAssessmentEventType", "DELETE_FEEDBACK", "type", "escKeyup", "toggle", "focus", "onScoreClick", "event", "preventDefault", "undefined", "feedbackTextBefore", "text", "updateFeedbackTypeOnChange", "EDIT_AUTOMATIC_FEEDBACK", "connectFeedbackWithInstruction", "updateFeedbackWithStructuredGradingInstructionEvent", "selectors", "viewQuery", "rf", "ctx", "ConfirmIconComponent", "\u0275\u0275classProp", "TextBlockFeedbackEditorComponent_Conditional_2_Template", "TextBlockFeedbackEditorComponent_Conditional_3_Template", "TextBlockFeedbackEditorComponent_Conditional_10_Template", "TextBlockFeedbackEditorComponent_Conditional_17_Template", "$event", "i0", "_r1", "TextBlockFeedbackEditorComponent_Conditional_25_Template", "\u0275\u0275twoWayListener", "\u0275\u0275twoWayBindingSet", "TextBlockFeedbackEditorComponent_Conditional_43_Template", "isFeedbackSuggestion", "\u0275\u0275propertyInterpolate1", "id", "\u0275\u0275twoWayProperty", "FeedbackSuggestionBadgeComponent", "FaIconComponent", "NgbTooltip", "TranslateDirective", "GradingInstructionLinkIconComponent", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "TextblockFeedbackDropdownComponent", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "NgModel", "AssessmentCorrectionRoundBadgeComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "select", "unselect", "feedbackDidChange", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classProp", "selected", "\u0275\u0275property", "textBlockRef", "block", "feedback", "readOnly", "highlightDifferences", "criteria", "TextBlockAssessmentCardComponent", "route", "inject", "ActivatedRoute", "structuredGradingCriterionService", "StructuredGradingCriterionService", "textAssessmentAnalytics", "TextAssessmentAnalytics", "isMissedFeedback", "didSelect", "EventEmitter", "didChange", "didDelete", "feedbackEditor", "constructor", "setComponentRoute", "autofocus", "selectable", "emit", "initFeedback", "setTimeout", "focus", "type", "FeedbackType", "MANUAL", "sendAssessmentEvent", "TextAssessmentEventType", "ADD_FEEDBACK_AUTOMATICALLY_SELECTED_BLOCK", "TextBlockType", "AUTOMATIC", "undefined", "deletable", "connectStructuredGradingInstructionsWithTextBlock", "event", "updateFeedbackWithStructuredGradingInstructionEvent", "selectors", "viewQuery", "rf", "ctx", "TextBlockFeedbackEditorComponent", "$event", "preventDefault", "\u0275\u0275template", "TextBlockAssessmentCardComponent_Conditional_4_Template", "credits", "highlighted", "text", "\u0275\u0275conditional", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "ctx_r1", "\u0275\u0275restoreView", "_r1", "word_r3", "$implicit", "\u0275$index_5_r4", "$index", "ctx_r4", "\u0275\u0275nextContext", "calculateIndex", "\u0275\u0275resetView", "selectWord", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "LINEBREAK", "SPACE", "ManualTextSelectionComponent", "route", "inject", "ActivatedRoute", "textAssessmentAnalytics", "TextAssessmentAnalytics", "textBlockRefGroup", "submission", "didSelectWord", "EventEmitter", "words", "submissionWords", "getText", "replace", "split", "currentWordIndex", "selectedWords", "Array", "ready", "constructor", "setComponentRoute", "index", "result", "startIndex", "i", "length", "space", "search", "word", "push", "reverse", "emit", "sendAssessmentEvent", "TextAssessmentEventType", "ADD_FEEDBACK_MANUALLY_SELECTED_BLOCK", "FeedbackType", "MANUAL", "TextBlockType", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ManualTextSelectionComponent_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "selectedRef", "\u0275\u0275resetView", "selectedRefChange", "emit", "textBlockRefsChangeEmit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "group_r3", "singleRef", "readOnly", "criteria", "_r4", "handleTextSelection", "submission", "\u0275\u0275template", "ManualTextblockSelectionComponent_For_1_Conditional_1_Template", "ManualTextblockSelectionComponent_For_1_Conditional_2_Template", "\u0275\u0275conditional", "ManualTextblockSelectionComponent", "textBlockRefs", "textBlockRefGroups", "TextBlockRefGroup", "fromTextBlockRefs", "reduce", "previous", "group", "refs", "textBlockRefsChange", "EventEmitter", "textBlockRefAdded", "selectedWords", "textBlockRef", "TextBlockRef", "new", "textBlock", "block", "startIndex", "index", "endIndex", "word", "length", "setTextFromSubmission", "existingRef", "find", "ref", "id", "initFeedback", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ManualTextblockSelectionComponent_For_1_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "TextBlockAssessmentCardComponent", "ManualTextSelectionComponent", "encapsulation", "constructor", "hasFeedback", "feedback", "last", "getText", "TextBlock", "text", "addRef", "push", "groups", "elem", "lastGroup", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "didSelectRef", "textBlockRefsChangeEmit", "removeTextBlockRef", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "\u0275$index_3_r4", "\u0275\u0275property", "ref_r3", "selectedRef", "readOnly", "highlightDifferences", "criteria", "\u0275\u0275repeaterCreate", "TextAssessmentAreaComponent_Conditional_0_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "textBlockRefs", "\u0275\u0275twoWayListener", "_r5", "i0", "\u0275\u0275twoWayBindingSet", "addTextBlockRef", "\u0275\u0275twoWayProperty", "submission", "TextAssessmentAreaComponent", "stringCountService", "inject", "StringCountService", "allowManualBlockSelection", "textBlockRefsChange", "EventEmitter", "textBlockRefsAddedRemoved", "autoTextBlockAssessment", "wordCount", "characterCount", "ngOnChanges", "changes", "currentValue", "text", "countWords", "countCharacters", "sort", "a", "b", "block", "startIndex", "onAltToggle", "event", "toggleValue", "emit", "ref", "push", "index", "findIndex", "elem", "id", "splice", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275resolveDocument", "\u0275\u0275template", "TextAssessmentAreaComponent_Conditional_0_Template", "TextAssessmentAreaComponent_Conditional_1_Template", "\u0275\u0275element", "\u0275\u0275conditional", "\u0275\u0275pureFunction1", "_c0", "TextBlockAssessmentCardComponent", "ManualTextblockSelectionComponent", "TranslateDirective", "styles"]
}
