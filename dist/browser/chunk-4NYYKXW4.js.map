{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/result/updating-result.component.ts", "src/main/webapp/app/exercises/shared/result/updating-result.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, inject } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { RepositoryService } from 'app/exercises/shared/result/repository.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { BuildTimingInfo, ProgrammingSubmissionService, ProgrammingSubmissionState } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { Submission, SubmissionType } from 'app/entities/submission.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { getExerciseDueDate } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { getLatestResultOfStudentParticipation, hasParticipationChanged } from 'app/exercises/shared/participation/participation.utils';\r\nimport { MissingResultInformation, isAIResultAndIsBeingProcessed, isAthenaAIResult } from 'app/exercises/shared/result/result.utils';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { ResultComponent } from './result.component';\r\n\r\n/**\r\n * A component that wraps the result component, updating its result on every websocket result event for the logged-in user.\r\n * If the participation changes, the newest result from its result array will be used.\r\n * If the participation does not have any results, there will be no result displayed, until a new result is received through the websocket.\r\n */\r\n@Component({\r\n    selector: 'jhi-updating-result',\r\n    templateUrl: './updating-result.component.html',\r\n    providers: [ResultService, RepositoryService],\r\n    imports: [ResultComponent],\r\n})\r\nexport class UpdatingResultComponent implements OnChanges, OnDestroy {\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n    private submissionService = inject(ProgrammingSubmissionService);\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() participation: StudentParticipation;\r\n    @Input() short = true;\r\n    @Input() showUngradedResults = false;\r\n    @Input() showBadge = false;\r\n    @Input() showIcon = true;\r\n    @Input() isInSidebarCard = false;\r\n    @Input() showCompletion = true;\r\n    @Input() showProgressBar = false;\r\n    @Input() showProgressBarBorder = false;\r\n    @Output() showResult = new EventEmitter<void>();\r\n    /**\r\n     * @property personalParticipation Whether the participation belongs to the user (by being a student) or not (by being an instructor)\r\n     */\r\n    @Input() personalParticipation = true;\r\n\r\n    @Output() onParticipationChange = new EventEmitter<void>();\r\n\r\n    result?: Result;\r\n    isBuilding: boolean;\r\n    isQueued: boolean;\r\n    estimatedCompletionDate?: dayjs.Dayjs;\r\n    buildStartDate?: dayjs.Dayjs;\r\n    showProgressBarInResult = false;\r\n    missingResultInfo = MissingResultInformation.NONE;\r\n    public resultSubscription: Subscription;\r\n    public submissionSubscription: Subscription;\r\n\r\n    /**\r\n     * If there are changes, reorders the participation results and subscribes for new participation results.\r\n     * @param changes The hashtable of occurred changes represented as SimpleChanges object.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (hasParticipationChanged(changes)) {\r\n            this.result = getLatestResultOfStudentParticipation(this.participation, this.showUngradedResults, true);\r\n            this.missingResultInfo = MissingResultInformation.NONE;\r\n\r\n            this.subscribeForNewResults();\r\n            // Currently submissions are only used for programming exercises to visualize the build process.\r\n            if (this.exercise?.type === ExerciseType.PROGRAMMING) {\r\n                this.subscribeForNewSubmissions();\r\n            }\r\n\r\n            if (this.submissionService.getIsLocalCIProfile()) {\r\n                this.showProgressBarInResult = this.showProgressBar;\r\n            }\r\n\r\n            if (this.result) {\r\n                this.showResult.emit();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On component close, unsubscribe from all previous subscriptions.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.resultSubscription) {\r\n            this.participationWebsocketService.unsubscribeForLatestResultOfParticipation(this.participation.id!, this.exercise);\r\n            this.resultSubscription.unsubscribe();\r\n        }\r\n        if (this.submissionSubscription) {\r\n            this.submissionService.unsubscribeForLatestSubmissionOfParticipation(this.participation.id!);\r\n            this.submissionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to new results for the current participation.\r\n     */\r\n    subscribeForNewResults() {\r\n        if (this.resultSubscription) {\r\n            this.resultSubscription.unsubscribe();\r\n        }\r\n        this.resultSubscription = this.participationWebsocketService\r\n            .subscribeForLatestResultOfParticipation(this.participation.id!, this.personalParticipation, this.exercise ? this.exercise.id : undefined)\r\n            .pipe(\r\n                // Ignore initial null result of subscription\r\n                filter((result) => !!result),\r\n                // Ignore ungraded results if ungraded results are supposed to be ignored.\r\n                // If the result is a preliminary feedback(being generated), show it\r\n                filter((result: Result) => this.showUngradedResults || result.rated === true || isAthenaAIResult(result)),\r\n                map((result) => ({ ...result, completionDate: convertDateFromServer(result.completionDate), participation: this.participation })),\r\n                tap((result) => {\r\n                    if ((isAthenaAIResult(result) && isAIResultAndIsBeingProcessed(result)) || result.rated) {\r\n                        this.result = result;\r\n                    } else if (result.rated === false && this.showUngradedResults) {\r\n                        this.result = result;\r\n                    } else {\r\n                        this.result = getLatestResultOfStudentParticipation(this.participation, this.showUngradedResults, false);\r\n                    }\r\n                    this.onParticipationChange.emit();\r\n                    if (result) {\r\n                        this.showResult.emit();\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Subscribe for incoming submissions that indicate that the build process has started in the CI.\r\n     * Will emit a null value when no build is running / the current build has stopped running.\r\n     */\r\n    subscribeForNewSubmissions() {\r\n        if (this.submissionSubscription) {\r\n            this.submissionSubscription.unsubscribe();\r\n        }\r\n        this.submissionSubscription = this.submissionService\r\n            .getLatestPendingSubmissionByParticipationId(this.participation.id!, this.exercise.id!, this.personalParticipation)\r\n            .pipe(\r\n                filter(({ submission }) => this.shouldUpdateSubmissionState(submission)),\r\n                tap(({ submissionState, buildTimingInfo, submission }) => this.updateSubmissionState(submissionState, buildTimingInfo, submission?.submissionDate)),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    private generateMissingResultInfoForFailedProgrammingExerciseSubmission() {\r\n        // Students have more options to check their code if the offline IDE is activated, so we suggest different actions\r\n        if ((this.exercise as ProgrammingExercise).allowOfflineIde) {\r\n            return MissingResultInformation.FAILED_PROGRAMMING_SUBMISSION_OFFLINE_IDE;\r\n        }\r\n        return MissingResultInformation.FAILED_PROGRAMMING_SUBMISSION_ONLINE_IDE;\r\n    }\r\n\r\n    /**\r\n     * Checks if a status update should be shown for this submission.\r\n     *\r\n     * @param submission for which a status update should be shown.\r\n     */\r\n    private shouldUpdateSubmissionState(submission?: Submission): boolean {\r\n        // The updating result must ignore submissions that are ungraded if ungraded results should not be shown\r\n        // (otherwise the building animation will be shown even though not relevant).\r\n        return (\r\n            this.showUngradedResults ||\r\n            !submission ||\r\n            !this.exercise.dueDate ||\r\n            submission.type === SubmissionType.INSTRUCTOR ||\r\n            submission.type === SubmissionType.TEST ||\r\n            dayjs(submission.submissionDate).isBefore(getExerciseDueDate(this.exercise, this.participation))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Updates the shown status based on the given state of a submission.\r\n     *\r\n     * @param submissionState the submission is currently in.\r\n     * @param buildTimingInfo object container the build start time and the estimated completion time.\r\n     * @param submissionDate the date when the submission was created.\r\n     */\r\n    private updateSubmissionState(submissionState: ProgrammingSubmissionState, buildTimingInfo?: BuildTimingInfo, submissionDate?: dayjs.Dayjs) {\r\n        this.isQueued = submissionState === ProgrammingSubmissionState.IS_QUEUED;\r\n        this.isBuilding = submissionState === ProgrammingSubmissionState.IS_BUILDING_PENDING_SUBMISSION;\r\n\r\n        if (this.submissionService.getIsLocalCIProfile()) {\r\n            this.updateBuildTimingInfo(submissionState, buildTimingInfo, submissionDate);\r\n        }\r\n\r\n        if (submissionState === ProgrammingSubmissionState.HAS_FAILED_SUBMISSION) {\r\n            this.missingResultInfo = this.generateMissingResultInfoForFailedProgrammingExerciseSubmission();\r\n        } else {\r\n            // everything ok, remove the warning\r\n            this.missingResultInfo = MissingResultInformation.NONE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the build timing information based on the submission state.\r\n     *\r\n     * @param  submissionState - The current state of the submission.\r\n     * @param  [buildTimingInfo] - Optional object containing the build start time and the estimated completion time.\r\n     * @param  [submissionDate] - Optional date when the submission was created.\r\n     */\r\n    private updateBuildTimingInfo(submissionState: ProgrammingSubmissionState, buildTimingInfo?: BuildTimingInfo, submissionDate?: dayjs.Dayjs) {\r\n        if (submissionState === ProgrammingSubmissionState.IS_QUEUED) {\r\n            this.submissionService.fetchQueueReleaseDateEstimationByParticipationId(this.participation.id!).subscribe((releaseDate) => {\r\n                if (releaseDate && !this.isBuilding) {\r\n                    this.estimatedCompletionDate = releaseDate;\r\n                    this.buildStartDate = submissionDate;\r\n                }\r\n            });\r\n        } else if (\r\n            submissionState === ProgrammingSubmissionState.IS_BUILDING_PENDING_SUBMISSION &&\r\n            buildTimingInfo &&\r\n            dayjs(buildTimingInfo?.estimatedCompletionDate).isAfter(dayjs())\r\n        ) {\r\n            this.estimatedCompletionDate = buildTimingInfo?.estimatedCompletionDate;\r\n            this.buildStartDate = buildTimingInfo?.buildStartDate;\r\n        } else {\r\n            this.estimatedCompletionDate = undefined;\r\n            this.buildStartDate = undefined;\r\n        }\r\n    }\r\n}\r\n", "<jhi-result\r\n    id=\"result\"\r\n    [exercise]=\"exercise\"\r\n    [result]=\"result\"\r\n    [participation]=\"participation\"\r\n    [isBuilding]=\"isBuilding\"\r\n    [isQueued]=\"isQueued\"\r\n    [short]=\"short\"\r\n    [showUngradedResults]=\"showUngradedResults\"\r\n    [showBadge]=\"showBadge\"\r\n    [showIcon]=\"showIcon\"\r\n    [missingResultInfo]=\"missingResultInfo\"\r\n    [isInSidebarCard]=\"isInSidebarCard\"\r\n    [showCompletion]=\"showCompletion\"\r\n    [estimatedCompletionDate]=\"estimatedCompletionDate\"\r\n    [buildStartDate]=\"buildStartDate\"\r\n    [showProgressBar]=\"showProgressBarInResult\"\r\n    [showProgressBarBorder]=\"showProgressBarBorder\"\r\n/>\r\n"],
  "mappings": "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",
  "names": ["UpdatingResultComponent", "participationWebsocketService", "inject", "ParticipationWebsocketService", "submissionService", "ProgrammingSubmissionService", "exercise", "participation", "short", "showUngradedResults", "showBadge", "showIcon", "isInSidebarCard", "showCompletion", "showProgressBar", "showProgressBarBorder", "showResult", "EventEmitter", "personalParticipation", "onParticipationChange", "result", "isBuilding", "isQueued", "estimatedCompletionDate", "buildStartDate", "showProgressBarInResult", "missingResultInfo", "MissingResultInformation", "NONE", "resultSubscription", "submissionSubscription", "ngOnChanges", "changes", "hasParticipationChanged", "getLatestResultOfStudentParticipation", "subscribeForNewResults", "type", "ExerciseType", "PROGRAMMING", "subscribeForNewSubmissions", "getIsLocalCIProfile", "emit", "ngOnDestroy", "unsubscribeForLatestResultOfParticipation", "id", "unsubscribe", "unsubscribeForLatestSubmissionOfParticipation", "subscribeForLatestResultOfParticipation", "undefined", "pipe", "filter", "rated", "isAthenaAIResult", "map", "__spreadProps", "__spreadValues", "completionDate", "convertDateFromServer", "tap", "isAIResultAndIsBeingProcessed", "subscribe", "getLatestPendingSubmissionByParticipationId", "submission", "shouldUpdateSubmissionState", "submissionState", "buildTimingInfo", "updateSubmissionState", "submissionDate", "generateMissingResultInfoForFailedProgrammingExerciseSubmission", "allowOfflineIde", "FAILED_PROGRAMMING_SUBMISSION_OFFLINE_IDE", "FAILED_PROGRAMMING_SUBMISSION_ONLINE_IDE", "dueDate", "dayjs", "isBefore", "getExerciseDueDate", "ProgrammingSubmissionState", "IS_QUEUED", "IS_BUILDING_PENDING_SUBMISSION", "updateBuildTimingInfo", "HAS_FAILED_SUBMISSION", "fetchQueueReleaseDateEstimationByParticipationId", "releaseDate", "isAfter", "selectors", "inputs", "outputs", "features", "\u0275\u0275ProvidersFeature", "ResultService", "RepositoryService", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275property", "ResultComponent", "encapsulation"]
}
