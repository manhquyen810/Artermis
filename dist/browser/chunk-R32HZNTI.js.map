{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-lectures/course-lectures.component.ts", "src/main/webapp/app/overview/course-lectures/course-lectures.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { AccordionGroups, CollapseState, SidebarCardElement, SidebarData, SidebarItemShowAlways } from 'app/types/sidebar';\r\nimport { CourseOverviewService } from '../course-overview.service';\r\nimport { NgClass } from '@angular/common';\r\nimport { SidebarComponent } from 'app/shared/sidebar/sidebar.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nconst DEFAULT_UNIT_GROUPS: AccordionGroups = {\r\n    future: { entityData: [] },\r\n    current: { entityData: [] },\r\n    dueSoon: { entityData: [] },\r\n    past: { entityData: [] },\r\n    noDate: { entityData: [] },\r\n};\r\n\r\nconst DEFAULT_COLLAPSE_STATE: CollapseState = {\r\n    future: true,\r\n    current: false,\r\n    dueSoon: true,\r\n    past: true,\r\n    noDate: true,\r\n};\r\n\r\nconst DEFAULT_SHOW_ALWAYS: SidebarItemShowAlways = {\r\n    future: false,\r\n    current: false,\r\n    dueSoon: false,\r\n    past: false,\r\n    noDate: false,\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-course-lectures',\r\n    templateUrl: './course-lectures.component.html',\r\n    styleUrls: ['../course-overview.scss'],\r\n    imports: [NgClass, SidebarComponent, RouterOutlet, TranslateDirective],\r\n})\r\nexport class CourseLecturesComponent implements OnInit, OnDestroy {\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private courseOverviewService = inject(CourseOverviewService);\r\n\r\n    private parentParamSubscription: Subscription;\r\n    private courseUpdatesSubscription: Subscription;\r\n    course?: Course;\r\n    courseId: number;\r\n\r\n    lectureSelected = true;\r\n    sidebarData: SidebarData;\r\n    accordionLectureGroups: AccordionGroups = DEFAULT_UNIT_GROUPS;\r\n    sortedLectures: Lecture[] = [];\r\n    sidebarLectures: SidebarCardElement[] = [];\r\n    isCollapsed = false;\r\n    readonly DEFAULT_COLLAPSE_STATE = DEFAULT_COLLAPSE_STATE;\r\n    protected readonly DEFAULT_SHOW_ALWAYS = DEFAULT_SHOW_ALWAYS;\r\n\r\n    ngOnInit() {\r\n        this.isCollapsed = this.courseOverviewService.getSidebarCollapseStateFromStorage('lecture');\r\n        this.parentParamSubscription = this.route.parent!.params.subscribe((params) => {\r\n            this.courseId = Number(params.courseId);\r\n        });\r\n\r\n        this.course = this.courseStorageService.getCourse(this.courseId);\r\n        this.prepareSidebarData();\r\n        this.courseUpdatesSubscription = this.courseStorageService.subscribeToCourseUpdates(this.courseId).subscribe((course: Course) => {\r\n            this.course = course;\r\n            this.prepareSidebarData();\r\n        });\r\n\r\n        // If no lecture is selected navigate to the lastSelected or upcoming lecture\r\n        this.navigateToLecture();\r\n    }\r\n\r\n    navigateToLecture() {\r\n        const upcomingLecture = this.courseOverviewService.getUpcomingLecture(this.course?.lectures);\r\n        const lastSelectedLecture = this.getLastSelectedLecture();\r\n        const lectureId = this.route.firstChild?.snapshot.params.lectureId;\r\n        if (!lectureId && lastSelectedLecture) {\r\n            this.router.navigate([lastSelectedLecture], { relativeTo: this.route, replaceUrl: true });\r\n        } else if (!lectureId && upcomingLecture) {\r\n            this.router.navigate([upcomingLecture.id], { relativeTo: this.route, replaceUrl: true });\r\n        } else {\r\n            this.lectureSelected = !!lectureId;\r\n        }\r\n    }\r\n\r\n    prepareSidebarData() {\r\n        if (!this.course?.lectures) {\r\n            return;\r\n        }\r\n        this.sortedLectures = this.courseOverviewService.sortLectures(this.course.lectures);\r\n        this.sidebarLectures = this.courseOverviewService.mapLecturesToSidebarCardElements(this.sortedLectures);\r\n        this.accordionLectureGroups = this.courseOverviewService.groupLecturesByStartDate(this.sortedLectures);\r\n        this.updateSidebarData();\r\n    }\r\n\r\n    updateSidebarData() {\r\n        this.sidebarData = {\r\n            groupByCategory: true,\r\n            storageId: 'lecture',\r\n            groupedData: this.accordionLectureGroups,\r\n            ungroupedData: this.sidebarLectures,\r\n        };\r\n    }\r\n\r\n    toggleSidebar() {\r\n        this.isCollapsed = !this.isCollapsed;\r\n        this.courseOverviewService.setSidebarCollapseState('lecture', this.isCollapsed);\r\n    }\r\n\r\n    getLastSelectedLecture(): string | null {\r\n        return sessionStorage.getItem('sidebar.lastSelectedItem.lecture.byCourse.' + this.courseId);\r\n    }\r\n\r\n    onSubRouteDeactivate() {\r\n        if (this.route.firstChild) {\r\n            return;\r\n        }\r\n        this.navigateToLecture();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.courseUpdatesSubscription?.unsubscribe();\r\n        this.parentParamSubscription?.unsubscribe();\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between\">\r\n    @if (course) {\r\n        <div [ngClass]=\"{ 'sidebar-collapsed': isCollapsed }\">\r\n            <jhi-sidebar\r\n                [itemSelected]=\"lectureSelected\"\r\n                [courseId]=\"courseId\"\r\n                [sidebarData]=\"sidebarData\"\r\n                [collapseState]=\"DEFAULT_COLLAPSE_STATE\"\r\n                [sidebarItemAlwaysShow]=\"DEFAULT_SHOW_ALWAYS\"\r\n            />\r\n        </div>\r\n\r\n        @if (lectureSelected) {\r\n            <div class=\"vw-100 module-bg rounded-3\">\r\n                <router-outlet (deactivate)=\"onSubRouteDeactivate()\" />\r\n            </div>\r\n        } @else {\r\n            <div class=\"vw-100 module-bg rounded-3 p-3 d-flex justify-content-between\">\r\n                <div class=\"col-12 text-center my-auto\" jhiTranslate=\"artemisApp.courseOverview.lectureDetails.selectLecture\"></div>\r\n            </div>\r\n        }\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSubRouteDeactivate", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275template", "CourseLecturesComponent_Conditional_2_Conditional_6_Template", "CourseLecturesComponent_Conditional_2_Conditional_7_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "isCollapsed", "lectureSelected", "courseId", "sidebarData", "DEFAULT_COLLAPSE_STATE", "DEFAULT_SHOW_ALWAYS", "\u0275\u0275conditional", "DEFAULT_UNIT_GROUPS", "future", "entityData", "current", "dueSoon", "past", "noDate", "CourseLecturesComponent", "courseStorageService", "inject", "CourseStorageService", "route", "ActivatedRoute", "router", "Router", "courseOverviewService", "CourseOverviewService", "parentParamSubscription", "courseUpdatesSubscription", "course", "accordionLectureGroups", "sortedLectures", "sidebarLectures", "ngOnInit", "getSidebarCollapseStateFromStorage", "parent", "params", "subscribe", "Number", "getCourse", "prepareSidebarData", "subscribeToCourseUpdates", "navigateToLecture", "upcomingLecture", "getUpcomingLecture", "lectures", "lastSelectedLecture", "getLastSelectedLecture", "lectureId", "firstChild", "snapshot", "navigate", "relativeTo", "replaceUrl", "id", "sortLectures", "mapLecturesToSidebarCardElements", "groupLecturesByStartDate", "updateSidebarData", "groupByCategory", "storageId", "groupedData", "ungroupedData", "toggleSidebar", "setSidebarCollapseState", "sessionStorage", "getItem", "ngOnDestroy", "unsubscribe", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "CourseLecturesComponent_Conditional_2_Template", "NgClass", "SidebarComponent", "RouterOutlet", "TranslateDirective", "styles"]
}
