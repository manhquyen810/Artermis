{
  "version": 3,
  "sources": ["src/main/webapp/app/forms/form-status-bar/form-status-bar.component.ts", "src/main/webapp/app/forms/form-status-bar/form-status-bar.component.html"],
  "sourcesContent": ["import { AfterViewInit, Component, ElementRef, HostListener, ViewChild, input } from '@angular/core';\r\nimport { updateHeaderHeight } from 'app/shared/util/navbar.util';\r\nimport { ChecklistCheckComponent } from 'app/shared/components/checklist-check/checklist-check.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport type FormSectionStatus = {\r\n    title: string;\r\n    valid: boolean;\r\n    empty?: boolean;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-form-status-bar',\r\n    templateUrl: './form-status-bar.component.html',\r\n    styleUrl: './form-status-bar.component.scss',\r\n    imports: [ChecklistCheckComponent, ArtemisTranslatePipe],\r\n})\r\nexport class FormStatusBarComponent implements AfterViewInit {\r\n    formStatusSections = input.required<FormSectionStatus[]>();\r\n\r\n    @ViewChild('statusBar', { static: false }) statusBar?: ElementRef;\r\n\r\n    @HostListener('window:resize')\r\n    onResizeAddDistanceFromStatusBarToNavbar() {\r\n        updateHeaderHeight();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.onResizeAddDistanceFromStatusBarToNavbar();\r\n    }\r\n\r\n    scrollToHeadline(id: string) {\r\n        const element = document.getElementById(id);\r\n        if (element) {\r\n            const navbarHeight = (document.querySelector('jhi-navbar') as HTMLElement)?.getBoundingClientRect().height;\r\n            const statusBarHeight = this.statusBar?.nativeElement.getBoundingClientRect().height;\r\n\r\n            /** Needs to be applied to the scrollMarginTop to ensure that the scroll to element is not hidden behind header elements */\r\n            const scrollOffsetInPx = navbarHeight + statusBarHeight;\r\n\r\n            element.style.scrollMarginTop = `${scrollOffsetInPx}px`;\r\n            element.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'start' });\r\n        }\r\n    }\r\n}\r\n", "@if (formStatusSections()) {\r\n    <div #statusBar class=\"form-status-bar-container pt-2 pb-1\">\r\n        <hr class=\"form-status-line\" />\r\n        <div class=\"d-flex justify-content-between\">\r\n            @for (formStatusSection of formStatusSections(); track formStatusSection.title; let index = $index) {\r\n                <div class=\"d-flex flex-column align-items-center\" id=\"status-bar-section-item-{{ index }}\">\r\n                    <div class=\"form-status-circle border rounded-circle\" (click)=\"scrollToHeadline(formStatusSection.title)\">\r\n                        <jhi-checklist-check\r\n                            [checkAttribute]=\"formStatusSection.valid\"\r\n                            [iconColor]=\"formStatusSection.empty && formStatusSection.valid ? 'var(--bs-gray)' : undefined\"\r\n                            class=\"fa-sm position-absolute top-50 start-50 translate-middle\"\r\n                        />\r\n                    </div>\r\n                    <a (click)=\"scrollToHeadline(formStatusSection.title)\" class=\"d-none d-sm-inline link-primary\">\r\n                        {{ formStatusSection.title | artemisTranslate }}\r\n                    </a>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "waCKgBA,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EAAsDC,EAAA,QAAA,UAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAG,iBAAAP,EAAAQ,KAAA,CAAyC,CAAA,CAAA,EACpGX,EAAA,EAAA;yBAAA,EAAAY,EAAA,EAAA,sBAAA,CAAA,EAKJZ,EAAA,EAAA;qBAAA,EAAAa,EAAA,EACAb,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,IAAA,CAAA,EAAGC,EAAA,QAAA,UAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAG,iBAAAP,EAAAQ,KAAA,CAAyC,CAAA,CAAA,EACjDX,EAAA,CAAA,2BACJa,EAAA,EACJb,EAAA,GAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;aAAA,uCAZuDc,EAAA,EAAAC,EAAA,KAAA,2BAAAC,EAAA,EAAA,EAGvCF,EAAA,CAAA,EAAAG,EAAA,iBAAAd,EAAAe,KAAA,EAA0C,YAAAf,EAAAgB,OAAAhB,EAAAe,MAAA,iBAAAE,MAAA,EAM9CN,EAAA,CAAA,EAAAO,EAAA;0BAAAC,EAAA,GAAA,EAAAnB,EAAAQ,KAAA,EAAA;qBAAA,4BAbpBX,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAY,EAAA,EAAA,KAAA,CAAA,EACAZ,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAuB,EAAA,EAAAC,EAAA,GAAA,EAAA,KAAA,KAAAC,CAAA,EAcJZ,EAAA,EACJb,EAAA,GAAA;KAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;CAAA,kBAhBYc,EAAA,CAAA,EAAAY,EAAAnB,EAAAoB,mBAAA,CAAoB,GDahC,IAAaC,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAC/BD,mBAAqBE,EAAMC,SAAQ,EAEQC,UAG3CC,0CAAwC,CACpCC,EAAkB,CACtB,CAEAC,iBAAe,CACX,KAAKF,yCAAwC,CACjD,CAEAtB,iBAAiByB,EAAU,CACvB,IAAMC,EAAUC,SAASC,eAAeH,CAAE,EAC1C,GAAIC,EAAS,CACT,IAAMG,EAAgBF,SAASG,cAAc,YAAY,GAAmBC,sBAAqB,EAAGC,OAC9FC,EAAkB,KAAKZ,WAAWa,cAAcH,sBAAqB,EAAGC,OAGxEG,EAAmBN,EAAeI,EAExCP,EAAQU,MAAMC,gBAAkB,GAAGF,CAAgB,KACnDT,EAAQY,eAAe,CAAEC,SAAU,SAAUC,MAAO,QAASC,OAAQ,OAAO,CAAE,CAClF,CACJ,4CA1BSvB,EAAsB,2BAAtBA,EAAsBwB,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,uFAAtBpD,EAAA,SAAA,UAAA,CAAA,OAAAqD,EAAAvB,yCAAA,CAA0C,EAAA,GAAAwB,CAAA,ufCjBvDC,EAAA,EAAAC,EAAA,GAAA,CAAA,OAAAC,EAAAJ,EAAA5B,mBAAA,EAAA,EAAA,EAAA,iBDeciC,EAAyBC,CAAoB,EAAAC,OAAA,CAAA,yWAAA,CAAA,CAAA,SAE9ClC,CAAsB,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "formStatusSection_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "scrollToHeadline", "title", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "\u0275$index_12_r4", "\u0275\u0275property", "valid", "empty", "undefined", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275repeaterCreate", "FormStatusBarComponent_Conditional_0_For_9_Template", "_forTrack0", "\u0275\u0275repeater", "formStatusSections", "FormStatusBarComponent", "input", "required", "statusBar", "onResizeAddDistanceFromStatusBarToNavbar", "updateHeaderHeight", "ngAfterViewInit", "id", "element", "document", "getElementById", "navbarHeight", "querySelector", "getBoundingClientRect", "height", "statusBarHeight", "nativeElement", "scrollOffsetInPx", "style", "scrollMarginTop", "scrollIntoView", "behavior", "block", "inline", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275resolveWindow", "\u0275\u0275template", "FormStatusBarComponent_Conditional_0_Template", "\u0275\u0275conditional", "ChecklistCheckComponent", "ArtemisTranslatePipe", "styles"]
}
