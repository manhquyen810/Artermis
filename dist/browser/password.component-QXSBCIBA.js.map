{
  "version": 3,
  "sources": ["src/main/webapp/app/account/password/password.service.ts", "src/main/webapp/app/account/password/password.component.ts", "src/main/webapp/app/account/password/password.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PasswordService {\r\n    private http = inject(HttpClient);\r\n\r\n    /**\r\n     * Sets a new password for the current user. Receives an HTTP 400 if the old password is incorrect.\r\n     *\r\n     * @param newPassword The new password\r\n     * @param currentPassword The old password\r\n     */\r\n    save(newPassword: string, currentPassword: string): Observable<any> {\r\n        return this.http.post('api/core/account/change-password', { currentPassword, newPassword });\r\n    }\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\n\r\nimport { PasswordService } from './password.service';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH } from 'app/app.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { PasswordStrengthBarComponent } from './password-strength-bar.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-password',\r\n    templateUrl: './password.component.html',\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule, PasswordStrengthBarComponent, ArtemisTranslatePipe],\r\n})\r\nexport class PasswordComponent implements OnInit {\r\n    private passwordService = inject(PasswordService);\r\n    private accountService = inject(AccountService);\r\n    private fb = inject(FormBuilder);\r\n\r\n    readonly PASSWORD_MIN_LENGTH = PASSWORD_MIN_LENGTH;\r\n    readonly PASSWORD_MAX_LENGTH = PASSWORD_MAX_LENGTH;\r\n\r\n    doNotMatch = false;\r\n    error = false;\r\n    success = false;\r\n    user?: User;\r\n    passwordForm: FormGroup;\r\n    passwordResetEnabled = false;\r\n\r\n    ngOnInit() {\r\n        this.accountService.identity().then((user) => {\r\n            this.user = user;\r\n            this.passwordResetEnabled = user?.internal || false;\r\n        });\r\n        this.initializeForm();\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.passwordForm) {\r\n            return;\r\n        }\r\n        this.passwordForm = this.fb.nonNullable.group({\r\n            currentPassword: ['', [Validators.required]],\r\n            newPassword: ['', [Validators.required, Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n            confirmPassword: ['', [Validators.required, Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Changes the current user's password. It will only try to change it if the values in both the new password field\r\n     * and the confirmation of the new password are the same.\r\n     */\r\n    changePassword() {\r\n        this.error = false;\r\n        this.success = false;\r\n        this.doNotMatch = false;\r\n\r\n        const newPassword = this.passwordForm.get(['newPassword'])!.value;\r\n        if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\r\n            this.doNotMatch = true;\r\n        } else {\r\n            this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe({\r\n                next: () => (this.success = true),\r\n                error: () => (this.error = true),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "@if (passwordResetEnabled) {\r\n    <div>\r\n        <div class=\"row justify-content-center\">\r\n            @if (user) {\r\n                <div class=\"col-md-8\">\r\n                    <h2 jhiTranslate=\"password.title\" [translateValues]=\"{ username: user.login }\">\r\n                        Password for <strong>{{ user.login }}</strong>\r\n                    </h2>\r\n                    @if (success) {\r\n                        <div class=\"alert alert-success\" jhiTranslate=\"password.messages.success\">\r\n                            <strong>Password changed!</strong>\r\n                        </div>\r\n                    }\r\n                    @if (error) {\r\n                        <div class=\"alert alert-danger\" jhiTranslate=\"password.messages.error\"><strong>An error has occurred!</strong> The password could not be changed.</div>\r\n                    }\r\n                    @if (doNotMatch) {\r\n                        <div class=\"alert alert-danger\" jhiTranslate=\"global.messages.error.dontmatch\"></div>\r\n                    }\r\n                    <form name=\"form\" role=\"form\" (ngSubmit)=\"changePassword()\" [formGroup]=\"passwordForm\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"currentPassword\" jhiTranslate=\"global.form.currentpassword\"></label>\r\n                            <input\r\n                                type=\"password\"\r\n                                class=\"form-control\"\r\n                                id=\"currentPassword\"\r\n                                name=\"currentPassword\"\r\n                                autocomplete=\"current-password\"\r\n                                placeholder=\"{{ 'global.form.currentpassword.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"currentPassword\"\r\n                                required\r\n                            />\r\n                            @if (passwordForm.get('currentPassword')!.invalid && (passwordForm.get('currentPassword')!.dirty || passwordForm.get('currentPassword')!.touched)) {\r\n                                <div>\r\n                                    @if (passwordForm.get('currentPassword')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.oldpassword.required\"></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword\"></label>\r\n                            <input\r\n                                type=\"password\"\r\n                                class=\"form-control\"\r\n                                id=\"newPassword\"\r\n                                name=\"newPassword\"\r\n                                autocomplete=\"new-password\"\r\n                                placeholder=\"{{ 'global.form.newpassword.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"newPassword\"\r\n                                [maxlength]=\"PASSWORD_MAX_LENGTH\"\r\n                                required\r\n                            />\r\n                            @if (passwordForm.get('newPassword')!.invalid && (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)) {\r\n                                <div>\r\n                                    @if (passwordForm.get('newPassword')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.newpassword.required\"></small>\r\n                                    }\r\n                                    @if (passwordForm.get('newPassword')?.errors?.minlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.newpassword.minlength\"\r\n                                            [translateValues]=\"{ min: PASSWORD_MIN_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                    @if (passwordForm.get('newPassword')?.errors?.maxlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\r\n                                            [translateValues]=\"{ max: PASSWORD_MAX_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword\"></label>\r\n                            <input\r\n                                type=\"password\"\r\n                                class=\"form-control\"\r\n                                id=\"confirmPassword\"\r\n                                name=\"confirmPassword\"\r\n                                placeholder=\"{{ 'global.form.confirmpassword.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"confirmPassword\"\r\n                                required\r\n                            />\r\n                            @if (passwordForm.get('confirmPassword')!.invalid && (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)) {\r\n                                <div>\r\n                                    @if (passwordForm.get('confirmPassword')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.confirmpassword.required\"></small>\r\n                                    }\r\n                                    @if (passwordForm.get('confirmPassword')?.errors?.minlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\r\n                                            [translateValues]=\"{ min: PASSWORD_MIN_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                    @if (passwordForm.get('confirmPassword')?.errors?.maxlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\r\n                                            [translateValues]=\"{ max: PASSWORD_MAX_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <button type=\"submit\" [disabled]=\"passwordForm.invalid\" class=\"btn btn-primary\" jhiTranslate=\"password.form.button\"></button>\r\n                    </form>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["PasswordService", "http", "inject", "HttpClient", "save", "newPassword", "currentPassword", "post", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_21_Conditional_3_Template", "\u0275\u0275advance", "\u0275\u0275conditional", "tmp_3_0", "ctx_r1", "passwordForm", "get", "errors", "required", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "PASSWORD_MIN_LENGTH", "_c2", "PASSWORD_MAX_LENGTH", "PasswordComponent_Conditional_0_Conditional_5_Conditional_30_Conditional_3_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_30_Conditional_4_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_30_Conditional_5_Template", "tmp_4_0", "minlength", "tmp_5_0", "maxlength", "PasswordComponent_Conditional_0_Conditional_5_Conditional_41_Conditional_3_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_41_Conditional_4_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_41_Conditional_5_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_9_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_10_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_11_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "changePassword", "PasswordComponent_Conditional_0_Conditional_5_Conditional_21_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_30_Template", "PasswordComponent_Conditional_0_Conditional_5_Conditional_41_Template", "_c0", "user", "login", "\u0275\u0275textInterpolate", "success", "error", "doNotMatch", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "value", "PasswordComponent_Conditional_0_Conditional_5_Template", "PasswordComponent", "passwordService", "inject", "PasswordService", "accountService", "AccountService", "fb", "FormBuilder", "passwordResetEnabled", "ngOnInit", "identity", "then", "internal", "initializeForm", "nonNullable", "group", "currentPassword", "Validators", "newPassword", "minLength", "maxLength", "confirmPassword", "save", "subscribe", "next", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "PasswordComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "MaxLengthValidator", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PasswordStrengthBarComponent", "ArtemisTranslatePipe", "encapsulation"]
}
