{
  "version": 3,
  "sources": ["src/main/webapp/app/grading-system/grading-system.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { GradingScale } from 'app/entities/grading-scale.model';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { GradeDTO, GradeStep, GradeStepsDTO } from 'app/entities/grade-step.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\nimport { captureException } from '@sentry/angular';\r\nimport { Course } from 'app/entities/course.model';\r\n\r\nexport type EntityResponseType = HttpResponse<GradingScale>;\r\nexport type EntityArrayResponseType = HttpResponse<GradingScale[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GradingSystemService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/assessment/courses';\r\n\r\n    /**\r\n     * Store a new grading scale for course on the server\r\n     *\r\n     * @param courseId the course for which the grading scale will be created\r\n     * @param gradingScale the grading scale to be created\r\n     */\r\n    createGradingScaleForCourse(courseId: number, gradingScale: GradingScale): Observable<EntityResponseType> {\r\n        return this.http.post<GradingScale>(`${this.resourceUrl}/${courseId}/grading-scale`, gradingScale, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update a grading scale for course on the server\r\n     *\r\n     * @param courseId the course for which the grading scale will be updated\r\n     * @param gradingScale the grading scale to be updated\r\n     */\r\n    updateGradingScaleForCourse(courseId: number, gradingScale: GradingScale): Observable<EntityResponseType> {\r\n        return this.http.put<GradingScale>(`${this.resourceUrl}/${courseId}/grading-scale`, gradingScale, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the grading scale for course\r\n     *\r\n     * @param courseId the course for which the grading scale will be retrieved\r\n     */\r\n    findGradingScaleForCourse(courseId: number): Observable<EntityResponseType> {\r\n        return this.http.get<GradingScale>(`${this.resourceUrl}/${courseId}/grading-scale`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Deletes the grading scale for course\r\n     *\r\n     * @param courseId the course for which the grading scale will be deleted\r\n     */\r\n    deleteGradingScaleForCourse(courseId: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${courseId}/grading-scale`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Store a new grading scale for exam on the server\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param examId the exam for which the grading scale will be created\r\n     * @param gradingScale the grading scale to be created\r\n     */\r\n    createGradingScaleForExam(courseId: number, examId: number, gradingScale: GradingScale): Observable<EntityResponseType> {\r\n        return this.http.post<GradingScale>(`${this.resourceUrl}/${courseId}/exams/${examId}/grading-scale`, gradingScale, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update a grading scale for exam on the server\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param examId the exam for which the grading scale will be updated\r\n     * @param gradingScale the grading scale to be updated\r\n     */\r\n    updateGradingScaleForExam(courseId: number, examId: number, gradingScale: GradingScale): Observable<EntityResponseType> {\r\n        return this.http.put<GradingScale>(`${this.resourceUrl}/${courseId}/exams/${examId}/grading-scale`, gradingScale, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the grading scale for exam\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param examId the exam for which the grading scale will be retrieved\r\n     */\r\n    findGradingScaleForExam(courseId: number, examId: number): Observable<EntityResponseType> {\r\n        return this.http.get<GradingScale>(`${this.resourceUrl}/${courseId}/exams/${examId}/grading-scale`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Deletes the grading scale for exam\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param examId the exam for which the grading scale will be deleted\r\n     */\r\n    deleteGradingScaleForExam(courseId: number, examId: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/grading-scale`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Finds all grade steps for exam\r\n     *\r\n     * @param courseId the course for which the grade steps are retrieved\r\n     */\r\n    findGradeStepsForCourse(courseId: number): Observable<HttpResponse<GradeStepsDTO>> {\r\n        return this.http.get<GradeStepsDTO>(`${this.resourceUrl}/${courseId}/grading-scale/grade-steps`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Finds all grade steps for exam\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param examId the exam for which the grade steps are retrieved\r\n     */\r\n    findGradeStepsForExam(courseId: number, examId: number): Observable<HttpResponse<GradeStepsDTO>> {\r\n        return this.http.get<GradeStepsDTO>(`${this.resourceUrl}/${courseId}/exams/${examId}/grading-scale/grade-steps`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Finds all grade steps for a course or an exam\r\n     *\r\n     * @param courseId the course for which the grade steps are queried\r\n     * @param examId if present the grade steps for this exam are queried instead\r\n     */\r\n    findGradeSteps(courseId: number, examId?: number): Observable<GradeStepsDTO | undefined> {\r\n        let gradeStepsObservable: Observable<HttpResponse<GradeStepsDTO>>;\r\n        if (examId != undefined) {\r\n            gradeStepsObservable = this.findGradeStepsForExam(courseId, examId);\r\n        } else {\r\n            gradeStepsObservable = this.findGradeStepsForCourse(courseId);\r\n        }\r\n        return gradeStepsObservable.pipe(map((gradeStepsDTO) => gradeStepsDTO?.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Finds grading scales eligible to be used as a bonus source. Grading Scales should have BONUS Grade Type and should belong to a\r\n     * course or exam where the current user is an instructor to be eligible. Supports search, sort and pagination.\r\n     *\r\n     * @param pageable search, sort and pagination parameters\r\n     */\r\n    findWithBonusGradeTypeForInstructor(pageable: SearchTermPageableSearch): Observable<HttpResponse<SearchResult<GradingScale>>> {\r\n        const params = new HttpParams()\r\n            .set('pageSize', String(pageable.pageSize))\r\n            .set('page', String(pageable.page))\r\n            .set('sortingOrder', pageable.sortingOrder)\r\n            .set('searchTerm', pageable.searchTerm)\r\n            .set('sortedColumn', pageable.sortedColumn);\r\n\r\n        return this.http.get<SearchResult<GradingScale>>('api/assessment/grading-scales', {\r\n            params,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finds a grade step for course that matches the given percentage\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param percentage the percentage which will be matched\r\n     */\r\n    public matchPercentageToGradeStepForCourse(courseId: number, percentage: number): Observable<HttpResponse<GradeDTO>> {\r\n        return this.http.get<GradeDTO>(`${this.resourceUrl}/${courseId}/grading-scale/match-grade-step?gradePercentage=${percentage}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Finds a grade step for exam that matches the given percentage\r\n     *\r\n     * @param courseId the course to which the exam belongs\r\n     * @param examId the exam for which the grade step is retrieved\r\n     * @param percentage the percentage which will be matched\r\n     */\r\n    public matchPercentageToGradeStepForExam(courseId: number, examId: number, percentage: number): Observable<HttpResponse<GradeDTO>> {\r\n        return this.http.get<GradeDTO>(`${this.resourceUrl}/${courseId}/exams/${examId}/grading-scale/match-grade-step?gradePercentage=${percentage}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Finds a grade step for an exam or a course that matches the given percentage\r\n     *\r\n     * @param percentage the percentage which will be matched\r\n     * @param courseId the course for which the matching is done\r\n     * @param examId if present, the matching is done for this exam instead\r\n     */\r\n    public matchPercentageToGradeStep(percentage: number, courseId: number, examId?: number): Observable<GradeDTO | undefined> {\r\n        let responseObservable: Observable<HttpResponse<GradeDTO>>;\r\n        if (examId != undefined) {\r\n            responseObservable = this.matchPercentageToGradeStepForExam(courseId, examId, percentage);\r\n        } else {\r\n            responseObservable = this.matchPercentageToGradeStepForCourse(courseId, percentage);\r\n        }\r\n        return responseObservable.pipe(\r\n            map((response) => {\r\n                if (response && response.body) {\r\n                    return response.body;\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sorts grade steps by lower bound percentage\r\n     *\r\n     * @param gradeSteps the grade steps to be sorted\r\n     */\r\n    sortGradeSteps(gradeSteps: GradeStep[]): GradeStep[] {\r\n        return gradeSteps.sort((gradeStep1, gradeStep2) => {\r\n            return gradeStep1.lowerBoundPercentage - gradeStep2.lowerBoundPercentage;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determines whether a given percentage matches the corresponding grade step\r\n     *\r\n     * @param gradeStep the grade step\r\n     * @param percentage the percentage to be matched\r\n     */\r\n    matchGradePercentage(gradeStep: GradeStep, percentage: number): boolean {\r\n        const EPSILON = 0.01;\r\n        if (Math.abs(percentage - gradeStep.lowerBoundPercentage) < EPSILON) {\r\n            return gradeStep.lowerBoundInclusive;\r\n        } else if (Math.abs(percentage - gradeStep.upperBoundPercentage) < EPSILON) {\r\n            return gradeStep.upperBoundInclusive;\r\n        } else {\r\n            return percentage > gradeStep.lowerBoundPercentage && percentage < gradeStep.upperBoundPercentage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds a matching grade step inside a grade step set for the given percentage\r\n     * or returns the highest step if the score is above all steps.\r\n     * Returns undefined if the score is below all grade steps\r\n     *\r\n     * @param gradeSteps the grade step set\r\n     * @param percentage the percentage to be matched\r\n     */\r\n    findMatchingGradeStep(gradeSteps: GradeStep[], percentage: number) {\r\n        const matchingGradeStep = gradeSteps.find((gradeStep) => {\r\n            return this.matchGradePercentage(gradeStep, percentage);\r\n        });\r\n\r\n        if (matchingGradeStep) {\r\n            return matchingGradeStep;\r\n        }\r\n\r\n        let sortedGradeSteps: GradeStep[] = [];\r\n        gradeSteps.forEach((gradeStep) => sortedGradeSteps.push(Object.assign({}, gradeStep)));\r\n        sortedGradeSteps = this.sortGradeSteps(sortedGradeSteps);\r\n\r\n        return percentage > sortedGradeSteps.last()!.upperBoundPercentage ? sortedGradeSteps.last()! : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds a matching grade step among the given grade steps by calculating percentage\r\n     * from the given points and max points.\r\n     * @see findMatchingGradeStep\r\n     * @param gradeSteps\r\n     * @param points\r\n     * @param maxPoints\r\n     */\r\n    findMatchingGradeStepByPoints(gradeSteps: GradeStep[], points: number, maxPoints: number) {\r\n        const percentage = (points / maxPoints) * 100;\r\n        return this.findMatchingGradeStep(gradeSteps, percentage);\r\n    }\r\n\r\n    /**\r\n     * Returns the max grade from a given grade step set\r\n     *\r\n     * @param gradeSteps the grade step set\r\n     */\r\n    maxGrade(gradeSteps: GradeStep[]): string {\r\n        const maxGradeStep = gradeSteps.find((gradeStep) => {\r\n            return gradeStep.upperBoundInclusive && gradeStep.upperBoundPercentage === 100;\r\n        });\r\n        return maxGradeStep?.gradeName || '';\r\n    }\r\n\r\n    /**\r\n     * Sets the grade points\r\n     *\r\n     * @param gradeSteps the grade steps for which the grade points are set\r\n     * @param maxPoints the max points, based on which the grade points are set\r\n     */\r\n    setGradePoints(gradeSteps: GradeStep[], maxPoints: number) {\r\n        for (const gradeStep of gradeSteps) {\r\n            gradeStep.lowerBoundPoints = (maxPoints * gradeStep.lowerBoundPercentage) / 100;\r\n            gradeStep.upperBoundPoints = (maxPoints * gradeStep.upperBoundPercentage) / 100;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether all grade steps have their lower and upper bounds set in absolute points\r\n     */\r\n    hasPointsSet(gradeSteps: GradeStep[]): boolean {\r\n        for (const gradeStep of gradeSteps) {\r\n            if (gradeStep.lowerBoundPoints == undefined || gradeStep.upperBoundPoints == undefined || gradeStep.upperBoundPoints === 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return gradeSteps.length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the course of the given grading scale either via the exam or directly.\r\n     *\r\n     * @param gradingScale a grading scale belonging to a course or an exam\r\n     */\r\n    getGradingScaleCourse(gradingScale?: GradingScale): Course {\r\n        return (gradingScale?.exam?.course ?? gradingScale?.course)!;\r\n    }\r\n\r\n    /**\r\n     * Gets the title of the course or exam related to the given grading scale.\r\n     *\r\n     * @param gradingScale a grading scale belonging to a course or an exam\r\n     */\r\n    getGradingScaleTitle(gradingScale: GradingScale): string | undefined {\r\n        return gradingScale?.exam?.title ?? gradingScale?.course?.title;\r\n    }\r\n\r\n    /**\r\n     * Gets the max points of the given grading scale from the related course or exam.\r\n     *\r\n     * @param gradingScale a grading scale belonging to a course or an exam\r\n     */\r\n    getGradingScaleMaxPoints(gradingScale?: GradingScale): number {\r\n        return (gradingScale?.exam?.examMaxPoints ?? gradingScale?.course?.maxPoints) || 0;\r\n    }\r\n\r\n    /**\r\n     * Parses the {@link gradeName} as a number in order to use it in grade and bonus calculations.\r\n     * Accepts both \",\" and \".\" as decimal separators.\r\n     *\r\n     * Returns undefined on error.\r\n     *\r\n     * @param gradeName grade name of a grade step\r\n     * @return number value corresponding to the {@link gradeName} or undefined if it is not parseable.\r\n     */\r\n    getNumericValueForGradeName(gradeName: string | undefined): number | undefined {\r\n        if (gradeName == undefined) {\r\n            return undefined;\r\n        }\r\n        gradeName = gradeName.replace(',', '.');\r\n        const numericValue = parseFloat(gradeName);\r\n        if (isNaN(numericValue)) {\r\n            captureException(new Error(`Grade name: ${gradeName} cannot be parsed as float`));\r\n            return undefined;\r\n        }\r\n        return numericValue;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["GradingSystemService", "http", "inject", "HttpClient", "resourceUrl", "createGradingScaleForCourse", "courseId", "gradingScale", "post", "observe", "updateGradingScaleForCourse", "put", "findGradingScaleForCourse", "get", "deleteGradingScaleForCourse", "delete", "createGradingScaleForExam", "examId", "updateGradingScaleForExam", "findGradingScaleForExam", "deleteGradingScaleForExam", "findGradeStepsForCourse", "findGradeStepsForExam", "findGradeSteps", "gradeStepsObservable", "undefined", "pipe", "map", "gradeStepsDTO", "body", "findWithBonusGradeTypeForInstructor", "pageable", "params", "HttpParams", "set", "String", "pageSize", "page", "sortingOrder", "searchTerm", "sortedColumn", "matchPercentageToGradeStepForCourse", "percentage", "matchPercentageToGradeStepForExam", "matchPercentageToGradeStep", "responseObservable", "response", "sortGradeSteps", "gradeSteps", "sort", "gradeStep1", "gradeStep2", "lowerBoundPercentage", "matchGradePercentage", "gradeStep", "Math", "abs", "EPSILON", "lowerBoundInclusive", "upperBoundPercentage", "upperBoundInclusive", "findMatchingGradeStep", "matchingGradeStep", "find", "sortedGradeSteps", "forEach", "push", "Object", "assign", "last", "findMatchingGradeStepByPoints", "points", "maxPoints", "maxGrade", "gradeName", "setGradePoints", "lowerBoundPoints", "upperBoundPoints", "hasPointsSet", "length", "getGradingScaleCourse", "exam", "course", "getGradingScaleTitle", "title", "getGradingScaleMaxPoints", "examMaxPoints", "getNumericValueForGradeName", "replace", "numericValue", "parseFloat", "isNaN", "captureException", "Error", "factory", "\u0275fac", "providedIn"]
}
