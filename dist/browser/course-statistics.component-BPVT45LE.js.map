{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/visualizations/exercise-scores-chart.service.ts", "src/main/webapp/app/overview/visualizations/exercise-scores-chart/exercise-scores-chart.component.ts", "src/main/webapp/app/overview/visualizations/exercise-scores-chart/exercise-scores-chart.component.html", "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "src/main/webapp/app/overview/course-statistics/course-statistics.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { map } from 'rxjs/operators';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\n\r\n/**\r\n * Corresponds to ExerciseScoresDTO.java on the server\r\n */\r\nexport class ExerciseScoresDTO {\r\n    public exerciseId?: number;\r\n    public exerciseTitle?: string;\r\n    public exerciseType: ExerciseType;\r\n    public releaseDate?: dayjs.Dayjs;\r\n    public scoreOfStudent?: number;\r\n    public averageScoreAchieved?: number;\r\n    public maxScoreAchieved?: number;\r\n}\r\n\r\n/**\r\n * Service to request the data from the server that is necessary for the exercise-scores-chart.component.ts\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExerciseScoresChartService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/exercise';\r\n\r\n    /**\r\n     * Get the course exercise performance statistics necessary for exercise-scores-chart.component.ts\r\n     * @param courseId id of the course\r\n     */\r\n    getExerciseScoresForCourse(courseId: number): Observable<HttpResponse<ExerciseScoresDTO[]>> {\r\n        if (courseId === undefined || courseId === null || courseId < 1) {\r\n            throw new Error('Invalid courseId provided: ' + courseId);\r\n        }\r\n\r\n        return this.http.get<ExerciseScoresDTO[]>(`${this.resourceUrl}/courses/${courseId}/charts/exercise-scores`, { observe: 'response' }).pipe(\r\n            map((response: HttpResponse<ExerciseScoresDTO[]>) => {\r\n                if (response.body) {\r\n                    for (const exerciseScoreDTO of response.body) {\r\n                        exerciseScoreDTO.releaseDate = exerciseScoreDTO.releaseDate ? dayjs(exerciseScoreDTO.releaseDate) : undefined;\r\n                    }\r\n                }\r\n                return response;\r\n            }),\r\n        );\r\n    }\r\n}\r\n", "import { AfterViewInit, Component, Input, OnChanges, inject } from '@angular/core';\r\nimport { ExerciseScoresChartService, ExerciseScoresDTO } from 'app/overview/visualizations/exercise-scores-chart.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { cloneDeep, sortBy } from 'lodash-es';\r\nimport { Color, LineChartModule, ScaleType } from '@swimlane/ngx-charts';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons';\r\nimport { ChartExerciseTypeFilter } from 'app/shared/chart/chart-exercise-type-filter';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ntype ChartSeries = {\r\n    name: string;\r\n    series: SeriesDatapoint[];\r\n};\r\n\r\nexport type ChartNode = SeriesDatapoint & {\r\n    series: string;\r\n};\r\n\r\ntype SeriesDatapoint = {\r\n    name: string;\r\n    value: number;\r\n    exerciseId: number;\r\n    exerciseType: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-scores-chart',\r\n    templateUrl: './exercise-scores-chart.component.html',\r\n    styleUrls: ['./exercise-scores-chart.component.scss'],\r\n    imports: [TranslateDirective, NgbDropdown, NgbDropdownToggle, FaIconComponent, NgbDropdownMenu, LineChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class ExerciseScoresChartComponent implements AfterViewInit, OnChanges {\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private exerciseScoresChartService = inject(ExerciseScoresChartService);\r\n    exerciseTypeFilter = inject(ChartExerciseTypeFilter);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() filteredExerciseIDs: number[];\r\n\r\n    courseId: number;\r\n    isLoading = false;\r\n    exerciseScores: ExerciseScoresDTO[] = [];\r\n    excludedExerciseScores: ExerciseScoresDTO[] = [];\r\n    visibleExerciseScores: ExerciseScoresDTO[] = [];\r\n\r\n    readonly Math = Math;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly convertToMapKey = ChartExerciseTypeFilter.convertToMapKey;\r\n\r\n    // Icons\r\n    faFilter = faFilter;\r\n\r\n    // ngx\r\n    ngxData: ChartSeries[] = [];\r\n    backUpData: ChartSeries[] = [];\r\n    xAxisLabel: string;\r\n    yAxisLabel: string;\r\n    ngxColor = {\r\n        name: 'Performance in Exercises',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [GraphColors.BLUE, GraphColors.YELLOW, GraphColors.GREEN],\r\n    } as Color;\r\n    colorBase = [GraphColors.BLUE, GraphColors.YELLOW, GraphColors.GREEN];\r\n    yourScoreLabel: string;\r\n    averageScoreLabel: string;\r\n    maximumScoreLabel: string;\r\n    maxScale = 101;\r\n\r\n    constructor() {\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.setTranslations();\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.activatedRoute.parent?.parent?.params.subscribe((params) => {\r\n            this.courseId = +params['courseId'];\r\n            if (this.courseId) {\r\n                this.loadDataAndInitializeChart();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.initializeChart();\r\n    }\r\n\r\n    private loadDataAndInitializeChart(): void {\r\n        this.isLoading = true;\r\n        this.exerciseScoresChartService\r\n            .getExerciseScoresForCourse(this.courseId)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (exerciseScoresResponse) => {\r\n                    this.exerciseScores = exerciseScoresResponse.body!;\r\n                    this.initializeChart();\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n            });\r\n    }\r\n\r\n    private initializeChart(): void {\r\n        this.setTranslations();\r\n        this.exerciseScores = this.exerciseScores.concat(this.excludedExerciseScores);\r\n        this.excludedExerciseScores = this.exerciseScores.filter((score) => this.filteredExerciseIDs.includes(score.exerciseId!));\r\n        this.exerciseScores = this.exerciseScores.filter((score) => !this.filteredExerciseIDs.includes(score.exerciseId!));\r\n        this.visibleExerciseScores = Array.of(...this.exerciseScores);\r\n        // we show all the exercises ordered by their release data\r\n        const sortedExerciseScores = sortBy(this.exerciseScores, (exerciseScore) => exerciseScore.releaseDate);\r\n        this.exerciseTypeFilter.initializeFilterOptions(sortedExerciseScores);\r\n        this.addData(sortedExerciseScores);\r\n    }\r\n\r\n    /**\r\n     * Converts the exerciseScoresDTOs into dedicated objects that can be processed by ngx-charts in order to\r\n     * visualize the scores and pushes them to ngxData and backUpData\r\n     * @param exerciseScoresDTOs array of objects containing the students score, the average score for this exercise and\r\n     * the max score achieved for this exercise by a student as well as other detailed information of the exericse\r\n     */\r\n    private addData(exerciseScoresDTOs: ExerciseScoresDTO[]): void {\r\n        this.ngxData = [];\r\n        const scoreSeries: SeriesDatapoint[] = [];\r\n        const averageSeries: SeriesDatapoint[] = [];\r\n        const bestScoreSeries: SeriesDatapoint[] = [];\r\n        exerciseScoresDTOs.forEach((exerciseScoreDTO) => {\r\n            const extraInformation = {\r\n                exerciseId: exerciseScoreDTO.exerciseId!,\r\n                exerciseType: exerciseScoreDTO.exerciseType,\r\n            };\r\n            // adapt the y-axis max\r\n            this.maxScale = Math.max(\r\n                round(exerciseScoreDTO.scoreOfStudent!),\r\n                round(exerciseScoreDTO.averageScoreAchieved!),\r\n                round(exerciseScoreDTO.maxScoreAchieved!),\r\n                this.maxScale,\r\n            );\r\n            scoreSeries.push({ name: exerciseScoreDTO.exerciseTitle!, value: round(exerciseScoreDTO.scoreOfStudent!), ...extraInformation });\r\n            averageSeries.push({ name: exerciseScoreDTO.exerciseTitle!, value: round(exerciseScoreDTO.averageScoreAchieved!), ...extraInformation });\r\n            bestScoreSeries.push({ name: exerciseScoreDTO.exerciseTitle!, value: round(exerciseScoreDTO.maxScoreAchieved!), ...extraInformation });\r\n        });\r\n\r\n        const studentScore = { name: this.yourScoreLabel, series: scoreSeries };\r\n        const averageScore = { name: this.averageScoreLabel, series: averageSeries };\r\n        const bestScore = { name: this.maximumScoreLabel, series: bestScoreSeries };\r\n        this.ngxData.push(studentScore);\r\n        this.ngxData.push(averageScore);\r\n        this.ngxData.push(bestScore);\r\n        this.ngxData = [...this.ngxData];\r\n        this.backUpData = cloneDeep(this.ngxData);\r\n    }\r\n\r\n    /**\r\n     * Provides the functionality when the user interacts with the chart by clicking on it.\r\n     * If the users click on a node in the chart, they get delegated to the corresponding exercise detail page.\r\n     * If the users click on an entry in the legend, the corresponding line disappears or reappears depending on its previous state\r\n     * @param data the event sent by the framework\r\n     */\r\n    onSelect(data: ChartNode | string): void {\r\n        if (typeof data === 'string') {\r\n            // if a legend label is clicked, the visibility of the corresponding line is toggled\r\n            const name: string = data;\r\n            // find the affected line in the dataset\r\n            const index = this.ngxData.findIndex((dataPack: any) => {\r\n                const dataName = dataPack.name as string;\r\n                return dataName === name;\r\n            });\r\n            if (this.ngxColor.domain[index] !== 'rgba(255,255,255,0)') {\r\n                //if the line is displayed, remove its values and make it transparent\r\n                this.ngxData[index].series = [];\r\n                this.ngxColor.domain[index] = 'rgba(255,255,255,0)';\r\n            } else {\r\n                // if the line is currently hidden, the values and the color are reset\r\n                this.ngxData[index].series = cloneDeep(this.backUpData[index].series);\r\n                this.ngxColor.domain[index] = this.colorBase[index];\r\n            }\r\n            // trigger a chart update\r\n            this.ngxData = [...this.ngxData];\r\n        } else {\r\n            // if a chart node is clicked, navigate to the corresponding exercise\r\n            this.navigateToExercise(data.exerciseId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We navigate to the exercise sub page in a new tab when the user clicks on a data point\r\n     */\r\n    navigateToExercise(exerciseId: number): void {\r\n        this.navigationUtilService.routeInNewTab(['courses', this.courseId, 'exercises', exerciseId]);\r\n    }\r\n\r\n    /**\r\n     * Handles selection or deselection of specific exercise type\r\n     * @param type the ExerciseType the user changed the filter for\r\n     */\r\n    toggleType(type: ExerciseType): void {\r\n        this.visibleExerciseScores = this.exerciseTypeFilter.toggleExerciseType(type, this.exerciseScores);\r\n        // we show all the exercises ordered by their release data\r\n        const sortedExerciseScores = sortBy(this.visibleExerciseScores, (exerciseScore) => exerciseScore.releaseDate);\r\n        this.addData(sortedExerciseScores);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that instantiated the translations for the exercise.\r\n     * As we subscribe to language changes, this ensures that the chart is translated instantly if the user changes the language\r\n     */\r\n    private setTranslations(): void {\r\n        this.xAxisLabel = this.translateService.instant('artemisApp.exercise-scores-chart.xAxis');\r\n        this.yAxisLabel = this.translateService.instant('artemisApp.exercise-scores-chart.yAxis');\r\n\r\n        this.yourScoreLabel = this.translateService.instant('artemisApp.exercise-scores-chart.yourScoreLabel');\r\n        this.averageScoreLabel = this.translateService.instant('artemisApp.exercise-scores-chart.averageScoreLabel');\r\n        this.maximumScoreLabel = this.translateService.instant('artemisApp.exercise-scores-chart.maximumScoreLabel');\r\n\r\n        if (this.ngxData.length > 0) {\r\n            const labels = [this.yourScoreLabel, this.averageScoreLabel, this.maximumScoreLabel];\r\n\r\n            labels.forEach((label, index) => {\r\n                this.ngxData[index].name = label;\r\n            });\r\n            this.ngxData = [...this.ngxData];\r\n        }\r\n    }\r\n}\r\n", "<div class=\"d-flex\">\r\n    <h2 class=\"col-9\" jhiTranslate=\"artemisApp.exercise-scores-chart.title\"></h2>\r\n    @if (exerciseTypeFilter.typeSet.size > 0) {\r\n        <div class=\"filter mb-2\" aria-label=\"Filter Dropdown\" ngbDropdown>\r\n            <button\r\n                class=\"btn\"\r\n                [class.btn-secondary]=\"exerciseTypeFilter.numberOfActiveFilters === 0\"\r\n                [class.btn-success]=\"exerciseTypeFilter.numberOfActiveFilters > 0\"\r\n                ngbDropdownToggle\r\n                id=\"filter-dropdown-button\"\r\n            >\r\n                <fa-icon [icon]=\"faFilter\" />\r\n                <span jhiTranslate=\"artemisApp.courseOverview.exerciseList.filter\" [translateValues]=\"{ num: exerciseTypeFilter.numberOfActiveFilters }\"></span>\r\n            </button>\r\n            <ul ngbDropdownMenu class=\"checkbox-menu text-nowrap pe-2\" aria-labelledby=\"filter-dropdown-button\">\r\n                <li>\r\n                    <b class=\"ms-2\" jhiTranslate=\"artemisApp.exercise-scores-chart.includeType\"></b>\r\n                </li>\r\n                @for (type of exerciseTypeFilter.typeSet; track type) {\r\n                    <li>\r\n                        <label>\r\n                            <input\r\n                                class=\"ms-2 form-check-input\"\r\n                                (change)=\"toggleType(type)\"\r\n                                [checked]=\"exerciseTypeFilter.getCurrentFilterState(convertToMapKey(type))\"\r\n                                type=\"checkbox\"\r\n                            />\r\n                            <span class=\"ms-2\">{{ 'artemisApp.exercise-scores-chart.' + type.toLowerCase() + 'Plural' | artemisTranslate }}</span>\r\n                        </label>\r\n                    </li>\r\n                }\r\n            </ul>\r\n        </div>\r\n    }\r\n</div>\r\n<div class=\"d-flex mt-2 justify-content-center\">\r\n    <div #containerRef class=\"line-chart-container\">\r\n        <ngx-charts-line-chart\r\n            [view]=\"[containerRef.offsetWidth, 350]\"\r\n            [results]=\"ngxData\"\r\n            [scheme]=\"ngxColor\"\r\n            [yAxisLabel]=\"yAxisLabel\"\r\n            [xAxisLabel]=\"xAxisLabel\"\r\n            [legend]=\"true\"\r\n            [legendTitle]=\"''\"\r\n            [xAxis]=\"true\"\r\n            [yAxis]=\"true\"\r\n            [showYAxisLabel]=\"true\"\r\n            [showXAxisLabel]=\"true\"\r\n            [yScaleMax]=\"maxScale\"\r\n            [yScaleMin]=\"1\"\r\n            [maxXAxisTickLength]=\"15\"\r\n            (select)=\"onSelect($event)\"\r\n            [id]=\"'scores-line-chart'\"\r\n        >\r\n            <ng-template #tooltipTemplate let-model=\"model\">\r\n                <b>{{ model.name }}</b> <br />\r\n                <span>{{ model.series }}: {{ Math.max(model.value, 0) }} %</span>\r\n            </ng-template>\r\n            <ng-template #seriesTooltipTemplate let-model=\"model\">\r\n                @if (model.length) {\r\n                    <h6>{{ model[0].name }}</h6>\r\n                    @for (entry of model; track entry) {\r\n                        <div>{{ entry.series }}: {{ Math.max(entry.value, 0) }}%</div>\r\n                    }\r\n                    <b>\r\n                        {{ 'artemisApp.exercise-scores-chart.exerciseType' | artemisTranslate }}\r\n                        {{ 'artemisApp.exercise-scores-chart.' + model[0].exerciseType.toLowerCase() | artemisTranslate }}</b\r\n                    >\r\n                }\r\n            </ng-template>\r\n        </ngx-charts-line-chart>\r\n    </div>\r\n</div>\r\n", "import { AfterViewInit, Component, EventEmitter, OnDestroy, OnInit, TemplateRef, ViewChild, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { faClipboard, faFilter, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BarChartModule, Color, PieChartModule, ScaleType } from '@swimlane/ngx-charts';\r\nimport { CourseScores } from 'app/course/course-scores/course-scores';\r\nimport { ScoresStorageService } from 'app/course/course-scores/scores-storage.service';\r\nimport { ParticipationResultDTO } from 'app/course/manage/course-for-dashboard-dto';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore, ScoresPerExerciseType } from 'app/entities/exercise.model';\r\nimport { GradeDTO } from 'app/entities/grade-step.model';\r\nimport { GradeType } from 'app/entities/grading-scale.model';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { BarControlConfiguration, BarControlConfigurationProvider } from 'app/shared/tab-bar/tab-bar';\r\nimport { ChartCategoryFilter } from 'app/shared/chart/chart-category-filter';\r\nimport { NgxChartsSingleSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { ScoreType } from 'app/shared/constants/score-type.constants';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport dayjs from 'dayjs/esm';\r\nimport { sortBy } from 'lodash-es';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { ExerciseScoresChartComponent } from '../visualizations/exercise-scores-chart/exercise-scores-chart.component';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nconst QUIZ_EXERCISE_COLOR = '#17a2b8';\r\nconst PROGRAMMING_EXERCISE_COLOR = '#fd7e14';\r\nconst MODELING_EXERCISE_COLOR = '#6610f2';\r\nconst TEXT_EXERCISE_COLOR = '#B00B6B';\r\nconst FILE_UPLOAD_EXERCISE_COLOR = '#2D9C88';\r\n\r\ninterface YourOverallPointsEntry extends NgxChartsSingleSeriesDataEntry {\r\n    color: string;\r\n}\r\n\r\nexport class Series {\r\n    name: ChartBarTitle;\r\n    value = 0;\r\n    absoluteValue = 0;\r\n    afterDueDate = false;\r\n    notParticipated = false;\r\n    exerciseTitle? = '';\r\n    exerciseId = 0;\r\n    isProgrammingExercise = false;\r\n    constructor(name: ChartBarTitle) {\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class NgxExercise {\r\n    name?: string;\r\n    series: Series[];\r\n    presentationScoreEnabled = false;\r\n    type: ExerciseType;\r\n    absoluteScore = 0;\r\n    relativeScore = 0;\r\n    reachablePoints = 0;\r\n    currentRelativeScore = 0;\r\n    overallMaxPoints = 0;\r\n    presentationScore = 0;\r\n    xScaleMax = 0;\r\n    height = 0;\r\n    constructor(name: string | undefined, series: Series[], type: ExerciseType) {\r\n        this.name = name;\r\n        this.series = series;\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport class ExerciseTitle {\r\n    name: string;\r\n    color: string;\r\n    constructor(name: string, color: string) {\r\n        this.name = name;\r\n        this.color = color;\r\n    }\r\n}\r\n\r\nenum ChartBarTitle {\r\n    NO_DUE_DATE = 'No due date',\r\n    INCLUDED = 'Achieved (included)',\r\n    NOT_INCLUDED = 'Achieved (not included)',\r\n    BONUS = 'Achieved bonus',\r\n    NOT_GRADED = 'Not graded',\r\n    MISSED = 'Missed points',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-course-statistics',\r\n    templateUrl: './course-statistics.component.html',\r\n    styleUrls: ['../course-overview.scss'],\r\n    imports: [\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgbDropdownMenu,\r\n        DocumentationButtonComponent,\r\n        PieChartModule,\r\n        NgbTooltip,\r\n        RouterLink,\r\n        ExerciseScoresChartComponent,\r\n        BarChartModule,\r\n        KeyValuePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class CourseStatisticsComponent implements OnInit, OnDestroy, AfterViewInit, BarControlConfigurationProvider {\r\n    controlsRendered = new EventEmitter<void>();\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private scoresStorageService = inject(ScoresStorageService);\r\n    private translateService = inject(TranslateService);\r\n    private route = inject(ActivatedRoute);\r\n    private gradingSystemService = inject(GradingSystemService);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    categoryFilter = inject(ChartCategoryFilter);\r\n\r\n    readonly documentationType: DocumentationType = 'Statistics';\r\n\r\n    courseId: number;\r\n    private courseExercises: Exercise[];\r\n    private paramSubscription?: Subscription;\r\n    private courseUpdatesSubscription: Subscription;\r\n    private translateSubscription: Subscription;\r\n    course?: Course;\r\n    numberOfAppliedFilters: number;\r\n\r\n    private courseExercisesNotIncludedInScore: Exercise[];\r\n    private courseExercisesFilteredByCategories: Exercise[];\r\n    currentlyHidingNotIncludedInScoreExercises: boolean;\r\n    filteredExerciseIDs: number[];\r\n\r\n    // Icons\r\n    faFilter = faFilter;\r\n\r\n    // overall points\r\n    overallPoints = 0;\r\n    overallPointsPerExercise = new Map<ExerciseType, number>();\r\n\r\n    // relative score\r\n    totalRelativeScore = 0;\r\n    relativeScoresPerExercise = new Map<ExerciseType, number>();\r\n\r\n    // max points\r\n    overallMaxPoints = 0;\r\n    overallMaxPointsPerExercise = new Map<ExerciseType, number>();\r\n\r\n    // reachable points\r\n    reachablePoints = 0;\r\n    reachablePointsPerExercise = new Map<ExerciseType, number>();\r\n\r\n    // current relative score\r\n    currentRelativeScore = 0;\r\n    currentRelativeScoresPerExercise = new Map<ExerciseType, number>();\r\n\r\n    // presentation score\r\n    overallPresentationScore = 0;\r\n    presentationScoresPerExercise = new Map<ExerciseType, number>();\r\n\r\n    // reachable presentation points\r\n    reachablePresentationPoints = 0;\r\n\r\n    doughnutChartColors: string[] = [\r\n        PROGRAMMING_EXERCISE_COLOR,\r\n        QUIZ_EXERCISE_COLOR,\r\n        MODELING_EXERCISE_COLOR,\r\n        TEXT_EXERCISE_COLOR,\r\n        FILE_UPLOAD_EXERCISE_COLOR,\r\n        GraphColors.LIGHT_BLUE,\r\n        GraphColors.RED,\r\n    ];\r\n\r\n    exerciseTitles = new Map<ExerciseType, ExerciseTitle>();\r\n\r\n    // ngx-charts\r\n    ngxDoughnutData: YourOverallPointsEntry[] = [];\r\n\r\n    // Labels for the different parts in Your overall points chart\r\n    programmingPointLabel = 'programmingPointLabel';\r\n    quizPointLabel = 'quizPointLabel';\r\n    modelingPointLabel = 'modelingPointLabel';\r\n    textPointLabel = 'textPointLabel';\r\n    fileUploadPointLabel = 'fileUploadPointLabel';\r\n    presentationPointsLabel = 'presentationPointsLabel';\r\n    missingPointsLabel = 'missingPointsLabel';\r\n    labels = [\r\n        this.programmingPointLabel,\r\n        this.quizPointLabel,\r\n        this.modelingPointLabel,\r\n        this.textPointLabel,\r\n        this.fileUploadPointLabel,\r\n        this.presentationPointsLabel,\r\n        this.missingPointsLabel,\r\n    ];\r\n\r\n    ngxDoughnutColor = {\r\n        name: 'Your overall points color',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [], // colors: orange, turquoise, violet, bordeaux, green, light_blue, red\r\n    } as Color;\r\n\r\n    // flags determining for each exercise group if at least one exercise has presentation score enabled\r\n    presentationScoreEnabled = new Map<ExerciseType, boolean>();\r\n\r\n    ngxBarColor = {\r\n        name: 'Score per exercise group',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [GraphColors.LIGHT_GREY, GraphColors.GREEN, GraphColors.LIGHT_GREY, GraphColors.YELLOW, GraphColors.BLUE, GraphColors.RED],\r\n    } as Color;\r\n\r\n    readonly roundScoreSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly barChartTitle = ChartBarTitle;\r\n    readonly CHART_HEIGHT = 25;\r\n    readonly BAR_PADDING = 4;\r\n    readonly DEFAULT_SIZE = 50; // additional space for the x-axis and its labels\r\n\r\n    // array containing every non-empty exercise group\r\n    ngxExerciseGroups = new Map<ExerciseType, NgxExercise[]>();\r\n\r\n    gradingScaleExists = false;\r\n    isBonus = false;\r\n    gradeDTO?: GradeDTO;\r\n\r\n    // Icons\r\n    faQuestionCircle = faQuestionCircle;\r\n    faClipboard = faClipboard;\r\n\r\n    // The extracted controls template from our template to be rendered in the top bar of \"CourseOverviewComponent\"\r\n    @ViewChild('controls', { static: false }) private controls: TemplateRef<any>;\r\n    // Provides the control configuration to be read and used by \"CourseOverviewComponent\"\r\n    public readonly controlConfiguration: BarControlConfiguration = {\r\n        subject: new Subject<TemplateRef<any>>(),\r\n    };\r\n\r\n    ngOnInit() {\r\n        // Note: due to lazy loading and router outlet, we use parent 2x here\r\n        this.paramSubscription = this.route.parent?.parent?.params.subscribe((params) => {\r\n            this.courseId = parseInt(params['courseId'], 10);\r\n        });\r\n\r\n        this.course = this.courseStorageService.getCourse(this.courseId);\r\n        this.onCourseLoad();\r\n\r\n        this.courseUpdatesSubscription = this.courseStorageService.subscribeToCourseUpdates(this.courseId).subscribe((course: Course) => {\r\n            this.course = course;\r\n            this.onCourseLoad();\r\n        });\r\n\r\n        // update titles based on the initial language selection\r\n        this.updateExerciseTitles();\r\n\r\n        this.translateSubscription = this.translateService.onLangChange.subscribe(() => {\r\n            // update titles based on the language changes\r\n            this.updateExerciseTitles();\r\n            this.groupExercisesByType(this.courseExercises);\r\n        });\r\n\r\n        this.calculateCourseGrade();\r\n    }\r\n\r\n    private updateExerciseTitles() {\r\n        this.exerciseTitles.set(ExerciseType.QUIZ, new ExerciseTitle(this.translateService.instant('artemisApp.course.quizExercises'), QUIZ_EXERCISE_COLOR));\r\n        this.exerciseTitles.set(ExerciseType.MODELING, new ExerciseTitle(this.translateService.instant('artemisApp.course.modelingExercises'), MODELING_EXERCISE_COLOR));\r\n        this.exerciseTitles.set(ExerciseType.PROGRAMMING, new ExerciseTitle(this.translateService.instant('artemisApp.course.programmingExercises'), PROGRAMMING_EXERCISE_COLOR));\r\n        this.exerciseTitles.set(ExerciseType.TEXT, new ExerciseTitle(this.translateService.instant('artemisApp.course.textExercises'), TEXT_EXERCISE_COLOR));\r\n        this.exerciseTitles.set(ExerciseType.FILE_UPLOAD, new ExerciseTitle(this.translateService.instant('artemisApp.course.fileUploadExercises'), FILE_UPLOAD_EXERCISE_COLOR));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // Send our controls template to parent so it will be rendered in the top bar\r\n        if (this.controls) {\r\n            this.controlConfiguration.subject!.next(this.controls);\r\n            this.controlsRendered.emit();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.translateSubscription?.unsubscribe();\r\n        this.courseUpdatesSubscription?.unsubscribe();\r\n        this.paramSubscription?.unsubscribe();\r\n    }\r\n\r\n    private calculateCourseGrade(): void {\r\n        this.gradingSystemService.matchPercentageToGradeStep(this.totalRelativeScore, this.courseId).subscribe((gradeDTO) => {\r\n            if (gradeDTO) {\r\n                this.gradingScaleExists = true;\r\n                this.gradeDTO = gradeDTO;\r\n                this.isBonus = gradeDTO.gradeType === GradeType.BONUS;\r\n            }\r\n        });\r\n    }\r\n\r\n    private onCourseLoad(): void {\r\n        if (this.course?.exercises) {\r\n            this.courseExercises = this.course.exercises;\r\n            this.calculateAndFilterNotIncludedInScore();\r\n            this.calculateMaxPoints();\r\n            this.calculateReachablePoints();\r\n            this.calculateReachablePresentationPoints();\r\n            this.calculateAbsoluteScores();\r\n            this.calculateRelativeScores();\r\n            this.calculatePresentationScores();\r\n            this.calculateCurrentRelativeScores();\r\n            this.groupExercisesByType(this.courseExercises);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts exercises into their corresponding exercise groups and creates dedicated objects that\r\n     * can be processed by ngx-charts in order to visualize the students score for each exercise\r\n     * @param exercises the exercises that should be grouped\r\n     */\r\n    private groupExercisesByType(exercises: Exercise[]): void {\r\n        // this reset is now necessary because of the filtering option that triggers the grouping again.\r\n        this.ngxExerciseGroups = new Map<ExerciseType, NgxExercise[]>();\r\n        Object.values(ExerciseType).forEach((exerciseType) => {\r\n            this.ngxExerciseGroups.set(exerciseType, []);\r\n            this.presentationScoreEnabled.set(exerciseType, false);\r\n        });\r\n\r\n        // adding several years to be sure that exercises without due date are sorted at the end. this is necessary for the order inside the statistic charts\r\n        exercises = sortBy(exercises, [(exercise: Exercise) => (exercise.dueDate || dayjs().add(5, 'year')).valueOf()]);\r\n        exercises.forEach((exercise) => {\r\n            if (!exercise.dueDate || exercise.dueDate.isBefore(dayjs()) || exercise.type === ExerciseType.PROGRAMMING) {\r\n                const series = CourseStatisticsComponent.generateDefaultSeries();\r\n\r\n                if (!exercise.studentParticipations || exercise.studentParticipations.length === 0) {\r\n                    // 5 = MISSED\r\n                    series[5].value = 100;\r\n                    series[5].afterDueDate = false;\r\n                    series[5].notParticipated = true;\r\n                    series[5].exerciseTitle = exercise.title;\r\n                    series[5].exerciseId = exercise.id!;\r\n                    this.pushToData(exercise, series);\r\n                } else {\r\n                    exercise.studentParticipations.forEach((participation: StudentParticipation) => {\r\n                        if (participation.id && participation.results?.length) {\r\n                            const participationResult: ParticipationResultDTO | undefined = this.scoresStorageService.getStoredParticipationResult(participation.id);\r\n                            if (participationResult?.rated) {\r\n                                const roundedParticipationScore = roundValueSpecifiedByCourseSettings(participationResult.score!, this.course);\r\n                                const cappedParticipationScore = Math.min(roundedParticipationScore, 100);\r\n                                const roundedParticipationPoints = roundValueSpecifiedByCourseSettings((participationResult.score! * exercise.maxPoints!) / 100, this.course);\r\n                                const missedScore = roundValueSpecifiedByCourseSettings(100 - cappedParticipationScore, this.course);\r\n                                const missedPoints = roundValueSpecifiedByCourseSettings(Math.max(exercise.maxPoints! - roundedParticipationPoints, 0), this.course);\r\n                                // 5 = MISSED\r\n                                series[5].value = missedScore;\r\n                                series[5].absoluteValue = missedPoints;\r\n                                series[5].afterDueDate = false;\r\n                                series[5].notParticipated = false;\r\n                                series[5].exerciseId = exercise.id!;\r\n\r\n                                this.identifyBar(exercise, series, roundedParticipationScore, roundedParticipationPoints);\r\n                                this.pushToData(exercise, series);\r\n                            }\r\n                        } else {\r\n                            if (\r\n                                participation.initializationState === InitializationState.FINISHED &&\r\n                                (!exercise.dueDate || participation.initializationDate?.isBefore(exercise.dueDate!))\r\n                            ) {\r\n                                // 4 = NOT_GRADED\r\n                                series[4].value = 100;\r\n                                series[4].exerciseTitle = exercise.title;\r\n                                series[4].exerciseId = exercise.id!;\r\n                                this.pushToData(exercise, series);\r\n                            } else {\r\n                                // 5 = MISSED\r\n                                series[5].value = 100;\r\n                                // If the user only presses \"start exercise\", there is still no participation\r\n                                if (participation.initializationState === InitializationState.INITIALIZED) {\r\n                                    series[5].afterDueDate = false;\r\n                                    series[5].notParticipated = true;\r\n                                } else {\r\n                                    series[5].afterDueDate = true;\r\n                                }\r\n                                series[5].exerciseTitle = exercise.title;\r\n                                series[5].exerciseId = exercise.id!;\r\n                                this.pushToData(exercise, series);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        this.pushExerciseGroupsToData();\r\n    }\r\n\r\n    toggleNotIncludedInScoreExercises() {\r\n        if (this.currentlyHidingNotIncludedInScoreExercises) {\r\n            this.courseExercises = this.courseExercises.concat(this.courseExercisesNotIncludedInScore);\r\n            this.filteredExerciseIDs = [];\r\n        } else {\r\n            this.courseExercises = this.courseExercises.filter((exercise) => !this.courseExercisesNotIncludedInScore.includes(exercise));\r\n            this.filteredExerciseIDs = this.courseExercisesNotIncludedInScore.map((exercise) => exercise.id!);\r\n        }\r\n        this.currentlyHidingNotIncludedInScoreExercises = !this.currentlyHidingNotIncludedInScoreExercises;\r\n        this.categoryFilter.setupCategoryFilter(this.courseExercises);\r\n\r\n        this.groupExercisesByType(this.courseExercises);\r\n    }\r\n\r\n    /**\r\n     * Generates array containing default configuration for every possible part in one stacked bar\r\n     * @returns dedicated object that is requested by ngx-charts in order to visualize one bar in the horizontal bar chart\r\n     */\r\n    private static generateDefaultSeries(): Series[] {\r\n        return [\r\n            new Series(ChartBarTitle.NO_DUE_DATE),\r\n            new Series(ChartBarTitle.INCLUDED),\r\n            new Series(ChartBarTitle.NOT_INCLUDED),\r\n            new Series(ChartBarTitle.BONUS),\r\n            new Series(ChartBarTitle.NOT_GRADED),\r\n            new Series(ChartBarTitle.MISSED),\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Retrieve absolute score for each exercise group in the course from the scores storage service and add it to the doughnut chart\r\n     */\r\n    private calculateAbsoluteScores(): void {\r\n        const quizzesTotalScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.QUIZ, ScoreType.ABSOLUTE_SCORE);\r\n        const programmingExerciseTotalScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.PROGRAMMING, ScoreType.ABSOLUTE_SCORE);\r\n        const modelingExerciseTotalScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.MODELING, ScoreType.ABSOLUTE_SCORE);\r\n        const textExerciseTotalScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.TEXT, ScoreType.ABSOLUTE_SCORE);\r\n        const fileUploadExerciseTotalScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.FILE_UPLOAD, ScoreType.ABSOLUTE_SCORE);\r\n        this.overallPoints = this.retrieveTotalScoreByScoreType(ScoreType.ABSOLUTE_SCORE);\r\n        const totalPresentationPoints = this.course?.presentationScore ? 0 : this.retrieveTotalScoreByScoreType(ScoreType.PRESENTATION_SCORE);\r\n        let totalMissedPoints = this.reachablePoints - this.overallPoints;\r\n        if (totalMissedPoints < 0) {\r\n            totalMissedPoints = 0;\r\n        }\r\n\r\n        const scores = [\r\n            programmingExerciseTotalScore,\r\n            quizzesTotalScore,\r\n            modelingExerciseTotalScore,\r\n            textExerciseTotalScore,\r\n            fileUploadExerciseTotalScore,\r\n            totalPresentationPoints,\r\n            totalMissedPoints,\r\n        ];\r\n\r\n        this.overallPointsPerExercise.set(ExerciseType.QUIZ, quizzesTotalScore);\r\n        this.overallPointsPerExercise.set(ExerciseType.PROGRAMMING, programmingExerciseTotalScore);\r\n        this.overallPointsPerExercise.set(ExerciseType.MODELING, modelingExerciseTotalScore);\r\n        this.overallPointsPerExercise.set(ExerciseType.TEXT, textExerciseTotalScore);\r\n        this.overallPointsPerExercise.set(ExerciseType.FILE_UPLOAD, fileUploadExerciseTotalScore);\r\n        const ngxDoughnutDataTemp: YourOverallPointsEntry[] = [];\r\n        scores.forEach((score, index) => {\r\n            if (score > 0) {\r\n                ngxDoughnutDataTemp.push({\r\n                    name: 'artemisApp.courseOverview.statistics.' + this.labels[index],\r\n                    value: this.roundScoreSpecifiedByCourseSettings(score, this.course),\r\n                    color: this.doughnutChartColors[index],\r\n                });\r\n                this.ngxDoughnutColor.domain.push(this.doughnutChartColors[index]);\r\n            }\r\n        });\r\n\r\n        this.ngxDoughnutData = [...ngxDoughnutDataTemp];\r\n    }\r\n\r\n    /**\r\n     * Retrieves the maximum of points for the course from the scores storage service.\r\n     */\r\n    private calculateMaxPoints(): void {\r\n        const quizzesTotalMaxPoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.QUIZ, ScoreType.MAX_POINTS);\r\n        const programmingExerciseTotalMaxPoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.PROGRAMMING, ScoreType.MAX_POINTS);\r\n        const modelingExerciseTotalMaxPoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.MODELING, ScoreType.MAX_POINTS);\r\n        const textExerciseTotalMaxPoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.TEXT, ScoreType.MAX_POINTS);\r\n        const fileUploadExerciseTotalMaxPoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.FILE_UPLOAD, ScoreType.MAX_POINTS);\r\n        this.overallMaxPointsPerExercise.set(ExerciseType.QUIZ, quizzesTotalMaxPoints);\r\n        this.overallMaxPointsPerExercise.set(ExerciseType.PROGRAMMING, programmingExerciseTotalMaxPoints);\r\n        this.overallMaxPointsPerExercise.set(ExerciseType.MODELING, modelingExerciseTotalMaxPoints);\r\n        this.overallMaxPointsPerExercise.set(ExerciseType.TEXT, textExerciseTotalMaxPoints);\r\n        this.overallMaxPointsPerExercise.set(ExerciseType.FILE_UPLOAD, fileUploadExerciseTotalMaxPoints);\r\n        this.overallMaxPoints = this.retrieveTotalScoreByScoreType(ScoreType.MAX_POINTS);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the relative score for each exercise group in the course from the scores storage service\r\n     */\r\n    private calculateRelativeScores(): void {\r\n        const quizzesRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.QUIZ, ScoreType.RELATIVE_SCORE);\r\n        const programmingExerciseRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.PROGRAMMING, ScoreType.RELATIVE_SCORE);\r\n        const modelingExerciseRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.MODELING, ScoreType.RELATIVE_SCORE);\r\n        const textExerciseRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.TEXT, ScoreType.RELATIVE_SCORE);\r\n        const fileUploadExerciseRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.FILE_UPLOAD, ScoreType.RELATIVE_SCORE);\r\n        this.relativeScoresPerExercise.set(ExerciseType.QUIZ, quizzesRelativeScore);\r\n        this.relativeScoresPerExercise.set(ExerciseType.PROGRAMMING, programmingExerciseRelativeScore);\r\n        this.relativeScoresPerExercise.set(ExerciseType.MODELING, modelingExerciseRelativeScore);\r\n        this.relativeScoresPerExercise.set(ExerciseType.TEXT, textExerciseRelativeScore);\r\n        this.relativeScoresPerExercise.set(ExerciseType.FILE_UPLOAD, fileUploadExerciseRelativeScore);\r\n        this.totalRelativeScore = this.retrieveTotalScoreByScoreType(ScoreType.RELATIVE_SCORE);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the reachable points for the course from the scores storage service.\r\n     */\r\n    private calculateReachablePoints(): void {\r\n        const quizzesReachablePoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.QUIZ, ScoreType.REACHABLE_POINTS);\r\n        const programmingExercisesReachablePoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.PROGRAMMING, ScoreType.REACHABLE_POINTS);\r\n        const modelingExercisesReachablePoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.MODELING, ScoreType.REACHABLE_POINTS);\r\n        const textExercisesReachablePoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.TEXT, ScoreType.REACHABLE_POINTS);\r\n        const fileUploadExercisesReachablePoints = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.FILE_UPLOAD, ScoreType.REACHABLE_POINTS);\r\n        this.reachablePointsPerExercise.set(ExerciseType.QUIZ, quizzesReachablePoints);\r\n        this.reachablePointsPerExercise.set(ExerciseType.PROGRAMMING, programmingExercisesReachablePoints);\r\n        this.reachablePointsPerExercise.set(ExerciseType.MODELING, modelingExercisesReachablePoints);\r\n        this.reachablePointsPerExercise.set(ExerciseType.TEXT, textExercisesReachablePoints);\r\n        this.reachablePointsPerExercise.set(ExerciseType.FILE_UPLOAD, fileUploadExercisesReachablePoints);\r\n        this.reachablePoints = this.retrieveTotalScoreByScoreType(ScoreType.REACHABLE_POINTS);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the current relative score for the course from the scores storage service.\r\n     */\r\n    private calculateCurrentRelativeScores(): void {\r\n        const quizzesCurrentRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.QUIZ, ScoreType.CURRENT_RELATIVE_SCORE);\r\n        const programmingExerciseCurrentRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.PROGRAMMING, ScoreType.CURRENT_RELATIVE_SCORE);\r\n        const modelingExerciseCurrentRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.MODELING, ScoreType.CURRENT_RELATIVE_SCORE);\r\n        const textExerciseCurrentRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.TEXT, ScoreType.CURRENT_RELATIVE_SCORE);\r\n        const fileUploadExerciseCurrentRelativeScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.FILE_UPLOAD, ScoreType.CURRENT_RELATIVE_SCORE);\r\n        this.currentRelativeScoresPerExercise.set(ExerciseType.QUIZ, quizzesCurrentRelativeScore);\r\n        this.currentRelativeScoresPerExercise.set(ExerciseType.PROGRAMMING, programmingExerciseCurrentRelativeScore);\r\n        this.currentRelativeScoresPerExercise.set(ExerciseType.MODELING, modelingExerciseCurrentRelativeScore);\r\n        this.currentRelativeScoresPerExercise.set(ExerciseType.TEXT, textExerciseCurrentRelativeScore);\r\n        this.currentRelativeScoresPerExercise.set(ExerciseType.FILE_UPLOAD, fileUploadExerciseCurrentRelativeScore);\r\n        this.currentRelativeScore = this.retrieveTotalScoreByScoreType(ScoreType.CURRENT_RELATIVE_SCORE);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the presentation score for the course from the scores storage service\r\n     */\r\n    private calculatePresentationScores(): void {\r\n        const programmingExercisePresentationScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.PROGRAMMING, ScoreType.PRESENTATION_SCORE);\r\n        const modelingExercisePresentationScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.MODELING, ScoreType.PRESENTATION_SCORE);\r\n        const textExercisePresentationScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.TEXT, ScoreType.PRESENTATION_SCORE);\r\n        const fileUploadExercisePresentationScore = this.retrieveScoreByExerciseTypeAndScoreType(ExerciseType.FILE_UPLOAD, ScoreType.PRESENTATION_SCORE);\r\n        this.presentationScoresPerExercise.set(ExerciseType.QUIZ, 0);\r\n        this.presentationScoresPerExercise.set(ExerciseType.PROGRAMMING, programmingExercisePresentationScore);\r\n        this.presentationScoresPerExercise.set(ExerciseType.MODELING, modelingExercisePresentationScore);\r\n        this.presentationScoresPerExercise.set(ExerciseType.TEXT, textExercisePresentationScore);\r\n        this.presentationScoresPerExercise.set(ExerciseType.FILE_UPLOAD, fileUploadExercisePresentationScore);\r\n        this.overallPresentationScore = this.retrieveTotalScoreByScoreType(ScoreType.PRESENTATION_SCORE);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the reachable presentation score for the course from the scores storage service\r\n     */\r\n    private calculateReachablePresentationPoints(): void {\r\n        this.reachablePresentationPoints = this.retrieveTotalScoreByScoreType(ScoreType.REACHABLE_PRESENTATION_POINTS);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the score for a given score type and exercise type from the scores storage service. Scores are calculated in the server when fetching all courses.\r\n     * @param exerciseType the exercise type for which the score should be retrieved. Must be an element of {Programming, Modeling, Quiz, Text, File upload}.\r\n     * @param scoreType which type of score should be retrieved from the store. Element of {'absoluteScore', 'maxPoints', 'currentRelativeScore', 'presentationScore', 'reachablePoints', 'relativeScore'}\r\n     * @returns requested score value\r\n     */\r\n    private retrieveScoreByExerciseTypeAndScoreType(exerciseType: ExerciseType, scoreType: ScoreType): number {\r\n        const scoresPerExerciseTypeForCourse: ScoresPerExerciseType | undefined = this.scoresStorageService.getStoredScoresPerExerciseType(this.courseId);\r\n        const scoresOfExerciseType: CourseScores | undefined = scoresPerExerciseTypeForCourse ? scoresPerExerciseTypeForCourse.get(exerciseType) : undefined;\r\n        return this.getScoreByScoreType(scoresOfExerciseType, scoreType);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the score for an arbitrary score type for the total scores from the scores storage service. Scores are calculated in the server when fetching all courses.\r\n     * @param scoreType which type of score should be retrieved from the store. Element of {'absoluteScore', 'maxPoints', 'currentRelativeScore', 'presentationScore', 'reachablePoints', 'relativeScore'}\r\n     * @returns requested score value\r\n     */\r\n    private retrieveTotalScoreByScoreType(scoreType: ScoreType): number {\r\n        const totalScores: CourseScores | undefined = this.scoresStorageService.getStoredTotalScores(this.courseId);\r\n        return this.getScoreByScoreType(totalScores, scoreType);\r\n    }\r\n\r\n    // Retrieve the score for a specific ScoreType from the CourseScores object.\r\n    // The MAX_POINTS and REACHABLE_POINTS belong to the course.\r\n    // All other ScoreTypes inform about the student's personal score and are stored in the StudentScores object.\r\n    private getScoreByScoreType(scores: CourseScores | undefined, scoreType: ScoreType): number {\r\n        if (!scores) {\r\n            return NaN;\r\n        }\r\n\r\n        switch (scoreType) {\r\n            case ScoreType.MAX_POINTS:\r\n                return scores.maxPoints;\r\n            case ScoreType.REACHABLE_POINTS:\r\n                return scores.reachablePoints;\r\n            case ScoreType.ABSOLUTE_SCORE:\r\n                return scores.studentScores.absoluteScore;\r\n            case ScoreType.RELATIVE_SCORE:\r\n                return scores.studentScores.relativeScore;\r\n            case ScoreType.CURRENT_RELATIVE_SCORE:\r\n                return scores.studentScores.currentRelativeScore;\r\n            case ScoreType.PRESENTATION_SCORE:\r\n                return scores.studentScores.presentationScore;\r\n            case ScoreType.REACHABLE_PRESENTATION_POINTS:\r\n                return scores.reachablePresentationPoints;\r\n        }\r\n    }\r\n\r\n    calculateAndFilterNotIncludedInScore() {\r\n        this.currentlyHidingNotIncludedInScoreExercises = true;\r\n        this.courseExercisesNotIncludedInScore = this.courseExercises.filter((exercise) => exercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED);\r\n        this.courseExercises = this.courseExercises.filter((exercise) => !this.courseExercisesNotIncludedInScore.includes(exercise));\r\n        this.courseExercisesFilteredByCategories = this.courseExercises;\r\n        this.filteredExerciseIDs = this.courseExercisesNotIncludedInScore.map((exercise) => exercise.id!);\r\n        this.categoryFilter.setupCategoryFilter(this.courseExercises);\r\n        this.calculateNumberOfAppliedFilters();\r\n    }\r\n\r\n    /**\r\n     * Depending on the type of the exercise, it adds a new object containing\r\n     * the different scores of the corresponding exercise group of the chart\r\n     * @param exercise an arbitrary exercise of a course\r\n     * @param allSeries an array of dedicated objects containing the students' performance in this exercise that is visualized by the chart\r\n     */\r\n    private pushToData(exercise: Exercise, allSeries: Series[]): void {\r\n        const exerciseType = exercise.type!;\r\n        const ngxExercise = new NgxExercise(exercise.title, allSeries, exerciseType);\r\n        this.ngxExerciseGroups.get(exerciseType)!.push(ngxExercise);\r\n        this.presentationScoreEnabled.set(exerciseType, (this.presentationScoreEnabled.get(exerciseType) ?? false) || (exercise.presentationScoreEnabled ?? false));\r\n        if (exerciseType == ExerciseType.PROGRAMMING) {\r\n            allSeries.forEach((series: Series) => {\r\n                series.isProgrammingExercise = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds some metadata to every non-empty exercise group and pushes it to ngxExerciseGroups\r\n     */\r\n    private pushExerciseGroupsToData(): void {\r\n        Object.values(ExerciseType).forEach((exerciseType) => {\r\n            const exerciseGroup = this.ngxExerciseGroups.get(exerciseType)!;\r\n            if (exerciseGroup.length > 0) {\r\n                const firstExerciseGroup = exerciseGroup[0];\r\n                firstExerciseGroup.absoluteScore = this.overallPointsPerExercise.get(exerciseType)!;\r\n                firstExerciseGroup.relativeScore = this.relativeScoresPerExercise.get(exerciseType)!;\r\n                firstExerciseGroup.reachablePoints = this.reachablePointsPerExercise.get(exerciseType)!;\r\n                firstExerciseGroup.currentRelativeScore = this.currentRelativeScoresPerExercise.get(exerciseType)!;\r\n                firstExerciseGroup.overallMaxPoints = this.overallMaxPointsPerExercise.get(exerciseType)!;\r\n                firstExerciseGroup.presentationScore = this.presentationScoresPerExercise.get(exerciseType)!;\r\n                firstExerciseGroup.presentationScoreEnabled = this.presentationScoreEnabled.get(exerciseType)!;\r\n                firstExerciseGroup.xScaleMax = this.setXScaleMax(exerciseGroup);\r\n                firstExerciseGroup.height = this.calculateChartHeight(exerciseGroup.length);\r\n            } else {\r\n                // prevent an error in html when there is no exercise of one specific type\r\n                this.ngxExerciseGroups.delete(exerciseType);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Depending on if the exercise has a due date and how its score is included,\r\n     * adds the student score to the corresponding bar.\r\n     * @param exercise the exercise of interest which has to be displayed by the chart\r\n     * @param series the series the students score gets pushed to\r\n     * @param roundedParticipationScore the students relative score\r\n     * @param split the students absolute score\r\n     */\r\n    private identifyBar(exercise: Exercise, series: Series[], roundedParticipationScore: number, split: number): void {\r\n        // the bar on index 0 is only rendered if the exercise has no due date\r\n        let index = 0;\r\n        if (exercise.dueDate) {\r\n            const scoreTypes = [IncludedInOverallScore.INCLUDED_COMPLETELY, IncludedInOverallScore.NOT_INCLUDED, IncludedInOverallScore.INCLUDED_AS_BONUS];\r\n            // we shift the index by 1, because index 0 is accessed if the exercise has no due date and this case is not represented in scoreTypes\r\n            index = scoreTypes.indexOf(exercise.includedInOverallScore!) + 1;\r\n        }\r\n        series[index].value = roundedParticipationScore;\r\n        series[index].absoluteValue = split;\r\n        series[index].exerciseId = exercise.id!;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum scale on the x-axis if there are exercises with > 100%\r\n     * @param exerciseGroup the exercise group\r\n     * @returns maximum value visible on xAxis\r\n     */\r\n    private setXScaleMax(exerciseGroup: NgxExercise[]): number {\r\n        let xScaleMax = 100;\r\n        exerciseGroup.forEach((exercise: NgxExercise) => {\r\n            const maxScore = Math.max(exercise.series[0].value, exercise.series[1].value, exercise.series[2].value, exercise.series[3].value);\r\n            xScaleMax = xScaleMax > maxScore ? xScaleMax : Math.ceil(maxScore);\r\n        });\r\n        return xScaleMax;\r\n    }\r\n\r\n    /**\r\n     * Handles the event fired if the user clicks on an arbitrary bar in the vertical bar charts.\r\n     * Delegates the user to the corresponding exercise detail page in a new tab\r\n     * @param event the event that is fired by ngx-charts\r\n     */\r\n    onSelect(event: any) {\r\n        this.navigationUtilService.routeInNewTab(['courses', this.course!.id!, 'exercises', event.exerciseId]);\r\n    }\r\n\r\n    /**\r\n     * Handles the selection or deselection of a specific category and configures the filter accordingly\r\n     * @param category the category that is selected or deselected\r\n     */\r\n    toggleCategory(category: string) {\r\n        const isIncluded = this.categoryFilter.getCurrentFilterState(category)!;\r\n        this.courseExercisesFilteredByCategories = this.categoryFilter.toggleCategory<Exercise>(this.courseExercises, category);\r\n        this.setupFilteredChart(!isIncluded);\r\n    }\r\n\r\n    /**\r\n     * Handles the use case when the user selects or deselects the option \"select all categories\"\r\n     */\r\n    toggleAllCategories(): void {\r\n        this.courseExercisesFilteredByCategories = this.categoryFilter.toggleAllCategories<Exercise>(this.courseExercises);\r\n        this.setupFilteredChart(this.categoryFilter.allCategoriesSelected);\r\n    }\r\n\r\n    /**\r\n     * handles the selection and deselection of \"exercises with no categories\" filter option\r\n     */\r\n    toggleExercisesWithNoCategory(): void {\r\n        this.courseExercisesFilteredByCategories = this.categoryFilter.toggleExercisesWithNoCategory<Exercise>(this.courseExercises);\r\n        this.setupFilteredChart(this.categoryFilter.includeExercisesWithNoCategory);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that updates the filtered exercise IDs. These are necessary in order to update the performance in exercises chart below\r\n     * @param included indicates whether the updated filter is now selected or deselected and updates the filtered exercise IDs accordingly\r\n     */\r\n    private filterExerciseIDsForCategorySelection(included: boolean): void {\r\n        if (!included) {\r\n            const newlyFilteredIDs = this.courseExercises\r\n                .filter((exercise) => !this.courseExercisesFilteredByCategories.includes(exercise))\r\n                .map((exercise) => exercise.id!)\r\n                .filter((id) => !this.filteredExerciseIDs.includes(id));\r\n            this.filteredExerciseIDs = this.filteredExerciseIDs.concat(newlyFilteredIDs);\r\n        } else {\r\n            this.filteredExerciseIDs = this.filteredExerciseIDs.filter((id) => !this.courseExercisesFilteredByCategories.find((exercise) => exercise.id === id));\r\n        }\r\n    }\r\n\r\n    private calculateNumberOfAppliedFilters(): void {\r\n        this.numberOfAppliedFilters = this.categoryFilter.numberOfActiveFilters + (this.currentlyHidingNotIncludedInScoreExercises ? 1 : 0);\r\n    }\r\n\r\n    /**\r\n     * Determines and returns the height of the whole chart depending of the amount of its entries\r\n     * @param chartEntries the amount of chart entries\r\n     */\r\n    private calculateChartHeight(chartEntries: number): number {\r\n        /*\r\n        Each chart bar should have a height of 45px\r\n        Furthermore we have to take the bar padding between the bars into account\r\n        Finally, we need to add space for the x-axis and its ticks\r\n         */\r\n        return chartEntries * this.CHART_HEIGHT + this.BAR_PADDING * (chartEntries - 1) + this.DEFAULT_SIZE;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method to reduce code duplication\r\n     * Calculates the number of applied filters, groups the updated set of exercises and updates the set of filtered IDs\r\n     * @param isIncluded indicates whether the updated filter is now selected or deselected and updates the filtered exercise IDs accordingly\r\n     */\r\n    private setupFilteredChart(isIncluded: boolean) {\r\n        this.calculateNumberOfAppliedFilters();\r\n        this.groupExercisesByType(this.courseExercisesFilteredByCategories);\r\n        this.filterExerciseIDsForCategorySelection(isIncluded);\r\n    }\r\n}\r\n", "<ng-template #controls>\r\n    <div class=\"d-flex row course-overview-controls text-end\">\r\n        <div class=\"col\" aria-label=\"Filter Dropdown\" ngbDropdown>\r\n            <button class=\"btn\" [class.btn-secondary]=\"!numberOfAppliedFilters\" [class.btn-success]=\"!!numberOfAppliedFilters\" ngbDropdownToggle id=\"filter-dropdown-button\">\r\n                <fa-icon [icon]=\"faFilter\" />\r\n                <span jhiTranslate=\"artemisApp.courseOverview.exerciseList.filter\" [translateValues]=\"{ num: numberOfAppliedFilters }\"></span>\r\n            </button>\r\n            <ul ngbDropdownMenu class=\"checkbox-menu text-nowrap pe-2\" aria-labelledby=\"filter-dropdown-button\">\r\n                <li class=\"mb-1\">\r\n                    <b class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.includeStandardCategories\"></b>\r\n                </li>\r\n                <li>\r\n                    <input class=\"ms-2 form-check-input\" (change)=\"toggleNotIncludedInScoreExercises()\" [checked]=\"currentlyHidingNotIncludedInScoreExercises\" type=\"checkbox\" />\r\n                    <span class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.hideNotIncludedInScoreExercises\"></span>\r\n                </li>\r\n                <li class=\"mt-1 mb-1\">\r\n                    <b class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.includeIndividualCategories\"></b>\r\n                </li>\r\n                <li>\r\n                    <label class=\"mb-1\">\r\n                        <input class=\"ms-2 form-check-input\" (change)=\"toggleAllCategories()\" [checked]=\"categoryFilter.allCategoriesSelected\" type=\"checkbox\" />\r\n                        <b class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.includeAllCategories\"></b>\r\n                    </label>\r\n                </li>\r\n                @if (categoryFilter.exercisesWithoutCategoriesPresent) {\r\n                    <li>\r\n                        <label>\r\n                            <input\r\n                                class=\"ms-2 form-check-input\"\r\n                                (change)=\"toggleExercisesWithNoCategory()\"\r\n                                [checked]=\"categoryFilter.includeExercisesWithNoCategory\"\r\n                                type=\"checkbox\"\r\n                            />\r\n                            <span class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.exercisesWithNoCategories\"></span>\r\n                        </label>\r\n                    </li>\r\n                }\r\n                @for (category of categoryFilter.exerciseCategories; track category) {\r\n                    <li>\r\n                        <label>\r\n                            <input class=\"ms-2 form-check-input\" (change)=\"toggleCategory(category)\" [checked]=\"categoryFilter.getCurrentFilterState(category)\" type=\"checkbox\" />\r\n                            <span class=\"ms-2\">{{ category }}</span>\r\n                        </label>\r\n                    </li>\r\n                }\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n@if (course) {\r\n    <div>\r\n        @if (course.exercises && course.exercises.length > 0) {\r\n            <div class=\"row\">\r\n                <div class=\"statistic-summary\">\r\n                    <div class=\"d-flex align-items-center\">\r\n                        <h2 jhiTranslate=\"artemisApp.courseOverview.statistics.totalScore\"></h2>\r\n                        <jhi-documentation-button [type]=\"documentationType\" />\r\n                    </div>\r\n                    <div class=\"row d-flex justify-content-center align-items-start\">\r\n                        <div class=\"chart-container col-md-6\" #doughnutref>\r\n                            <div class=\"chart-text\">\r\n                                <h2 class=\"text-center\">{{ currentRelativeScore }} %</h2>\r\n                                <h4 class=\"text-center\">{{ overallPoints }} / {{ reachablePoints }} Pts</h4>\r\n                            </div>\r\n\r\n                            @if (ngxDoughnutData && ngxDoughnutColor) {\r\n                                <ngx-charts-pie-chart [view]=\"[350, 350]\" [results]=\"ngxDoughnutData\" [scheme]=\"ngxDoughnutColor\" [doughnut]=\"true\">\r\n                                    <ng-template #tooltipTemplate let-model=\"model\">\r\n                                        <span>{{ model.name | artemisTranslate }}: {{ model.value }}</span>\r\n                                    </ng-template>\r\n                                </ngx-charts-pie-chart>\r\n                            }\r\n                        </div>\r\n                        <div class=\"col-md-3 d-flex flex-column align-self-end color-legend-container\">\r\n                            @for (exerciseType of ngxDoughnutData; track ngxDoughnutData.indexOf(exerciseType)) {\r\n                                <div class=\"color-legend-entry\">\r\n                                    <div class=\"color-indicator\" [style.background]=\"exerciseType.color\"></div>\r\n                                    <h5 class=\"fw-bolder\">{{ exerciseType.name | artemisTranslate }}</h5>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <h5\r\n                                class=\"fw-bolder\"\r\n                                id=\"absolute-course-score\"\r\n                                jhiTranslate=\"artemisApp.courseOverview.statistics.yourPoints\"\r\n                                [translateValues]=\"{ number: overallPoints }\"\r\n                            ></h5>\r\n                            <h5 class=\"fw-bolder\" id=\"reachable-course-score\">\r\n                                <span\r\n                                    jhiTranslate=\"artemisApp.courseOverview.statistics.reachablePoints\"\r\n                                    [translateValues]=\"{ number: reachablePoints, relative: currentRelativeScore }\"\r\n                                ></span>\r\n                                <fa-icon\r\n                                    id=\"reachable-help\"\r\n                                    class=\"me-1\"\r\n                                    [icon]=\"faQuestionCircle\"\r\n                                    ngbTooltip=\"{{ 'artemisApp.courseOverview.statistics.reachableHelp' | artemisTranslate }}\"\r\n                                />\r\n                            </h5>\r\n                            <h5 class=\"mb-4 statistics-legend\" id=\"max-course-score\">\r\n                                <span\r\n                                    jhiTranslate=\"artemisApp.courseOverview.statistics.totalPoints\"\r\n                                    [translateValues]=\"{ number: overallMaxPoints, relative: totalRelativeScore }\"\r\n                                ></span>\r\n                                <fa-icon\r\n                                    id=\"total-help\"\r\n                                    class=\"me-1\"\r\n                                    [icon]=\"faQuestionCircle\"\r\n                                    ngbTooltip=\"{{ 'artemisApp.courseOverview.statistics.totalHelp' | artemisTranslate }}\"\r\n                                />\r\n                            </h5>\r\n                            @if (gradingScaleExists) {\r\n                                <div class=\"mb-5\">\r\n                                    @if (!isBonus) {\r\n                                        <h5 class=\"fw-bolder\">{{ 'artemisApp.courseOverview.statistics.grade' | artemisTranslate }}: {{ gradeDTO?.gradeName }}</h5>\r\n                                    } @else {\r\n                                        <h5 class=\"fw-bolder\">{{ 'artemisApp.courseOverview.statistics.bonus' | artemisTranslate }}: {{ gradeDTO?.gradeName }}</h5>\r\n                                    }\r\n                                    <h6>\r\n                                        {{ 'artemisApp.courseOverview.statistics.gradeInfo' | artemisTranslate }}\r\n                                        <fa-icon\r\n                                            id=\"reachable-help\"\r\n                                            class=\"me-1\"\r\n                                            [icon]=\"faQuestionCircle\"\r\n                                            ngbTooltip=\"{{\r\n                                                isBonus\r\n                                                    ? ('artemisApp.courseOverview.statistics.bonusHelp' | artemisTranslate)\r\n                                                    : ('artemisApp.courseOverview.statistics.gradeHelp' | artemisTranslate)\r\n                                            }}\"\r\n                                        />\r\n                                    </h6>\r\n                                    <div class=\"mt-3\">\r\n                                        <a class=\"btn btn-primary\" [routerLink]=\"['grading-key']\" [queryParams]=\"{ grade: gradeDTO?.gradeName }\">\r\n                                            <fa-icon [icon]=\"faClipboard\" />\r\n                                            <span\r\n                                                jhiTranslate=\"{{ isBonus ? 'artemisApp.exam.examSummary.gradeKeyButtonBonus' : 'artemisApp.exam.examSummary.gradeKeyButton' }}\"\r\n                                            ></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            @if (course?.presentationScore) {\r\n                                <div>\r\n                                    <h5\r\n                                        class=\"fw-bolder\"\r\n                                        jhiTranslate=\"artemisApp.courseOverview.statistics.totalPresentationScore\"\r\n                                        [translateValues]=\"{ number: overallPresentationScore }\"\r\n                                    ></h5>\r\n                                    <h5\r\n                                        class=\"fw-bolder\"\r\n                                        jhiTranslate=\"artemisApp.courseOverview.statistics.presentationScoreBonus\"\r\n                                        [translateValues]=\"{ number: course?.presentationScore }\"\r\n                                    ></h5>\r\n                                </div>\r\n                            }\r\n                            @if (reachablePresentationPoints) {\r\n                                <div>\r\n                                    <h5\r\n                                        class=\"fw-bolder\"\r\n                                        jhiTranslate=\"artemisApp.courseOverview.statistics.totalPresentationPoints\"\r\n                                        [translateValues]=\"{ number: overallPresentationScore }\"\r\n                                    ></h5>\r\n                                    <h5\r\n                                        class=\"fw-bolder\"\r\n                                        jhiTranslate=\"artemisApp.courseOverview.statistics.achievablePresentationPoints\"\r\n                                        [translateValues]=\"{ number: reachablePresentationPoints }\"\r\n                                    ></h5>\r\n                                    <h6>\r\n                                        {{ 'artemisApp.courseOverview.statistics.gradeInfo' | artemisTranslate }}\r\n                                        <fa-icon\r\n                                            id=\"reachable-help\"\r\n                                            class=\"me-1\"\r\n                                            [icon]=\"faQuestionCircle\"\r\n                                            ngbTooltip=\"{{ 'artemisApp.courseOverview.statistics.presentationHelp' | artemisTranslate }}\"\r\n                                        />\r\n                                    </h6>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n                <jhi-exercise-scores-chart class=\"col-12\" [filteredExerciseIDs]=\"filteredExerciseIDs\" />\r\n                <hr />\r\n                <div class=\"col-12 mb-3\">\r\n                    <h2 jhiTranslate=\"artemisApp.courseOverview.statistics.pointsPerExercise\"></h2>\r\n                    @for (exerciseGroup of ngxExerciseGroups | keyvalue; let index = $index; track index) {\r\n                        @if (exerciseGroup.value[0]) {\r\n                            <div class=\"row mt-3 d-flex justify-content-end\" id=\"{{ exerciseGroup.value[0]?.type }}-wrapper\">\r\n                                <div class=\"col-12 mb-1 d-flex align-items-center\">\r\n                                    <h4\r\n                                        jhiTranslate=\"artemisApp.courseOverview.statistics.exerciseCount\"\r\n                                        [translateValues]=\"{ number: exerciseGroup.value.length, type: exerciseGroup.key }\"\r\n                                    ></h4>\r\n                                </div>\r\n                                <div #containerRef class=\"col-12 col-md-8\">\r\n                                    <ngx-charts-bar-horizontal-stacked\r\n                                        [view]=\"[containerRef.offsetWidth, exerciseGroup.value[0].height]\"\r\n                                        [scheme]=\"ngxBarColor\"\r\n                                        [results]=\"exerciseGroup.value\"\r\n                                        [xAxis]=\"true\"\r\n                                        [yAxis]=\"true\"\r\n                                        [xScaleMax]=\"exerciseGroup.value[0].xScaleMax\"\r\n                                        [barPadding]=\"BAR_PADDING\"\r\n                                        [maxXAxisTickLength]=\"15\"\r\n                                        (select)=\"onSelect($event)\"\r\n                                    >\r\n                                        <!-- This template is managing the tooltip content depending of the bar that is selected by the user and the properties of the corresponding exercise-->\r\n                                        <ng-template #tooltipTemplate let-model=\"model\">\r\n                                            @if ([barChartTitle.INCLUDED, barChartTitle.BONUS, barChartTitle.NOT_INCLUDED, barChartTitle.NO_DUE_DATE].includes(model.name)) {\r\n                                                <div>\r\n                                                    @if (!model.isProgrammingExercise) {\r\n                                                        <span\r\n                                                            jhiTranslate=\"artemisApp.courseOverview.statistics.exerciseAchievedScore\"\r\n                                                            [translateValues]=\"{\r\n                                                                points: model.absoluteValue,\r\n                                                                percentage: roundScoreSpecifiedByCourseSettings(model.value, course),\r\n                                                            }\"\r\n                                                        ></span>\r\n                                                    }\r\n                                                    @if (model.isProgrammingExercise) {\r\n                                                        <span\r\n                                                            jhiTranslate=\"artemisApp.courseOverview.statistics.programmingExercisePassedTests\"\r\n                                                            [translateValues]=\"{ tests: model.absoluteValue, percentage: roundScoreSpecifiedByCourseSettings(model.value, course) }\"\r\n                                                        ></span>\r\n                                                    }\r\n                                                    @if (model.name === barChartTitle.BONUS) {\r\n                                                        <span>\r\n                                                            <span>| {{ 'artemisApp.courseOverview.statistics.bonusPointTooltip' | artemisTranslate }}</span>\r\n                                                        </span>\r\n                                                    }\r\n                                                    @if (model.name === barChartTitle.NOT_INCLUDED) {\r\n                                                        <span>\r\n                                                            <span>| {{ 'artemisApp.courseOverview.statistics.notIncludedTooltip' | artemisTranslate }}</span>\r\n                                                        </span>\r\n                                                    }\r\n                                                </div>\r\n                                            }\r\n                                            <div>\r\n                                                @switch (model.name) {\r\n                                                    @case (barChartTitle.MISSED) {\r\n                                                        <div>\r\n                                                            @if (!model.afterDueDate && !model.notParticipated && !model.isProgrammingExercise) {\r\n                                                                <span\r\n                                                                    jhiTranslate=\"artemisApp.courseOverview.statistics.exerciseMissedScore\"\r\n                                                                    [translateValues]=\"{\r\n                                                                        points: model.absoluteValue,\r\n                                                                        percentage: roundScoreSpecifiedByCourseSettings(model.value, course),\r\n                                                                    }\"\r\n                                                                ></span>\r\n                                                            }\r\n                                                            @if (model.notParticipated) {\r\n                                                                <span\r\n                                                                    jhiTranslate=\"artemisApp.courseOverview.statistics.exerciseNotParticipated\"\r\n                                                                    [translateValues]=\"{ exercise: model.exerciseTitle }\"\r\n                                                                ></span>\r\n                                                            }\r\n                                                            @if (model.afterDueDate) {\r\n                                                                <span\r\n                                                                    jhiTranslate=\"artemisApp.courseOverview.statistics.exerciseParticipatedAfterDueDate\"\r\n                                                                    [translateValues]=\"{ exercise: model.exerciseTitle }\"\r\n                                                                ></span>\r\n                                                            }\r\n                                                            @if (model.isProgrammingExercise && !model.notParticipated) {\r\n                                                                <span\r\n                                                                    jhiTranslate=\"artemisApp.courseOverview.statistics.programmingExerciseFailedTests\"\r\n                                                                    [translateValues]=\"{\r\n                                                                        tests: model.absoluteValue,\r\n                                                                        percentage: roundScoreSpecifiedByCourseSettings(model.value, course),\r\n                                                                    }\"\r\n                                                                ></span>\r\n                                                            }\r\n                                                        </div>\r\n                                                    }\r\n                                                    @case (barChartTitle.NOT_GRADED) {\r\n                                                        <div>\r\n                                                            <span\r\n                                                                jhiTranslate=\"artemisApp.courseOverview.statistics.exerciseNotGraded\"\r\n                                                                [translateValues]=\"{ exercise: model.exerciseTitle }\"\r\n                                                            ></span>\r\n                                                        </div>\r\n                                                    }\r\n                                                }\r\n                                            </div>\r\n                                        </ng-template>\r\n                                    </ngx-charts-bar-horizontal-stacked>\r\n                                </div>\r\n                                @if (exerciseGroup.value && exerciseGroup.value.length) {\r\n                                    <div class=\"col-12 col-md-3 align-self-top mt-2\">\r\n                                        <h5\r\n                                            class=\"fw-bolder\"\r\n                                            id=\"absolute-score\"\r\n                                            jhiTranslate=\"artemisApp.courseOverview.statistics.yourPoints\"\r\n                                            [translateValues]=\"{ number: exerciseGroup.value[0].absoluteScore }\"\r\n                                        ></h5>\r\n                                        <h5 class=\"fw-bolder\" id=\"reachable-score\">\r\n                                            <span\r\n                                                jhiTranslate=\"artemisApp.courseOverview.statistics.reachablePoints\"\r\n                                                [translateValues]=\"{ number: exerciseGroup.value[0].reachablePoints, relative: exerciseGroup.value[0].currentRelativeScore }\"\r\n                                            ></span>\r\n                                            <fa-icon\r\n                                                id=\"reachable-help\"\r\n                                                class=\"me-1\"\r\n                                                [icon]=\"faQuestionCircle\"\r\n                                                ngbTooltip=\"{{ 'artemisApp.courseOverview.statistics.reachableHelpExerciseGroup' | artemisTranslate }}\"\r\n                                            />\r\n                                        </h5>\r\n                                        <h5 class=\"fw-bolder\" id=\"max-score\">\r\n                                            <span\r\n                                                jhiTranslate=\"artemisApp.courseOverview.statistics.totalPoints\"\r\n                                                [translateValues]=\"{ number: exerciseGroup.value[0].overallMaxPoints, relative: exerciseGroup.value[0].relativeScore }\"\r\n                                            ></span>\r\n                                            <fa-icon\r\n                                                id=\"total-help\"\r\n                                                class=\"me-1\"\r\n                                                [icon]=\"faQuestionCircle\"\r\n                                                ngbTooltip=\"{{ 'artemisApp.courseOverview.statistics.totalHelpExerciseGroup' | artemisTranslate }}\"\r\n                                            />\r\n                                        </h5>\r\n                                        @if (exerciseGroup.value[0].presentationScoreEnabled && course?.presentationScore) {\r\n                                            <h5\r\n                                                class=\"fw-bolder\"\r\n                                                id=\"presentation-score\"\r\n                                                jhiTranslate=\"artemisApp.courseOverview.statistics.presentationScore\"\r\n                                                [translateValues]=\"{ number: exerciseGroup.value[0].presentationScore }\"\r\n                                            ></h5>\r\n                                        }\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    }\r\n                </div>\r\n            </div>\r\n        } @else {\r\n            <div class=\"row\">\r\n                <div class=\"col mt-3\" jhiTranslate=\"artemisApp.courseOverview.statistics.noStatistics\"></div>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["ExerciseScoresChartService", "http", "inject", "HttpClient", "resourceUrl", "getExerciseScoresForCourse", "courseId", "Error", "get", "observe", "pipe", "map", "response", "body", "exerciseScoreDTO", "releaseDate", "dayjs", "undefined", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "type_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleType", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "exerciseTypeFilter", "getCurrentFilterState", "convertToMapKey", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "toLowerCase", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "ExerciseScoresChartComponent_Conditional_4_For_18_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275classProp", "numberOfActiveFilters", "faFilter", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275repeater", "typeSet", "model_r5", "name", "\u0275\u0275textInterpolate2", "series", "Math", "max", "value", "entry_r6", "ExerciseScoresChartComponent_ng_template_16_Conditional_1_For_5_Template", "model_r7", "exerciseType", "\u0275\u0275template", "ExerciseScoresChartComponent_ng_template_16_Conditional_1_Template", "\u0275\u0275conditional", "length", "ExerciseScoresChartComponent", "navigationUtilService", "inject", "ArtemisNavigationUtilService", "activatedRoute", "ActivatedRoute", "alertService", "AlertService", "exerciseScoresChartService", "ExerciseScoresChartService", "ChartExerciseTypeFilter", "translateService", "TranslateService", "filteredExerciseIDs", "courseId", "isLoading", "exerciseScores", "excludedExerciseScores", "visibleExerciseScores", "ExerciseType", "ngxData", "backUpData", "xAxisLabel", "yAxisLabel", "ngxColor", "selectable", "group", "ScaleType", "Ordinal", "domain", "GraphColors", "BLUE", "YELLOW", "GREEN", "colorBase", "yourScoreLabel", "averageScoreLabel", "maximumScoreLabel", "maxScale", "constructor", "onLangChange", "subscribe", "setTranslations", "ngAfterViewInit", "parent", "params", "loadDataAndInitializeChart", "ngOnChanges", "initializeChart", "getExerciseScoresForCourse", "pipe", "finalize", "next", "exerciseScoresResponse", "body", "error", "errorResponse", "onError", "concat", "filter", "score", "includes", "exerciseId", "Array", "of", "sortedExerciseScores", "sortBy", "exerciseScore", "releaseDate", "initializeFilterOptions", "addData", "exerciseScoresDTOs", "scoreSeries", "averageSeries", "bestScoreSeries", "forEach", "exerciseScoreDTO", "extraInformation", "round", "scoreOfStudent", "averageScoreAchieved", "maxScoreAchieved", "push", "__spreadValues", "exerciseTitle", "studentScore", "averageScore", "bestScore", "cloneDeep", "onSelect", "data", "index", "findIndex", "dataPack", "navigateToExercise", "routeInNewTab", "type", "toggleExerciseType", "instant", "label", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ExerciseScoresChartComponent_Conditional_4_Template", "$event", "i0", "_r1", "ExerciseScoresChartComponent_ng_template_13_Template", "\u0275\u0275templateRefExtractor", "ExerciseScoresChartComponent_ng_template_16_Template", "size", "_c0", "containerRef_r8", "offsetWidth", "TranslateDirective", "NgbDropdown", "NgbDropdownToggle", "FaIconComponent", "NgbDropdownMenu", "LineChartModule", "LineChartComponent", "ArtemisTranslatePipe", "styles", "ngxDoughnutData", "indexOf", "$item", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleExercisesWithNoCategory", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "categoryFilter", "includeExercisesWithNoCategory", "category_r5", "_r4", "$implicit", "toggleCategory", "getCurrentFilterState", "\u0275\u0275textInterpolate", "_r1", "toggleNotIncludedInScoreExercises", "toggleAllCategories", "\u0275\u0275template", "CourseStatisticsComponent_ng_template_0_Conditional_41_Template", "\u0275\u0275repeaterCreate", "CourseStatisticsComponent_ng_template_0_For_43_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275classProp", "numberOfAppliedFilters", "faFilter", "\u0275\u0275pureFunction1", "_c1", "currentlyHidingNotIncludedInScoreExercises", "allCategoriesSelected", "\u0275\u0275conditional", "exercisesWithoutCategoriesPresent", "\u0275\u0275repeater", "exerciseCategories", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "model_r6", "name", "value", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_26_ng_template_3_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275pureFunction0", "_c4", "ngxDoughnutColor", "\u0275\u0275styleProp", "exerciseType_r7", "color", "gradeDTO", "gradeName", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_53_Conditional_3_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_53_Conditional_4_Template", "isBonus", "\u0275\u0275textInterpolate1", "\u0275\u0275propertyInterpolate", "faQuestionCircle", "_c5", "_c6", "faClipboard", "_c2", "overallPresentationScore", "course", "presentationScore", "reachablePresentationPoints", "\u0275\u0275pureFunction2", "_c10", "model_r9", "absoluteValue", "roundScoreSpecifiedByCourseSettings", "_c11", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Conditional_1_Conditional_3_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Conditional_1_Conditional_4_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Conditional_1_Conditional_5_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Conditional_1_Conditional_6_Template", "isProgrammingExercise", "barChartTitle", "BONUS", "NOT_INCLUDED", "_c12", "exerciseTitle", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Case_4_Conditional_3_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Case_4_Conditional_4_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Case_4_Conditional_5_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Case_4_Conditional_6_Template", "afterDueDate", "notParticipated", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Conditional_1_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Case_4_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Case_5_Template", "\u0275\u0275pureFunction4", "_c9", "INCLUDED", "NO_DUE_DATE", "includes", "tmp_21_0", "MISSED", "NOT_GRADED", "exerciseGroup_r10", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_Conditional_19_Conditional_21_Template", "absoluteScore", "_c3", "reachablePoints", "currentRelativeScore", "overallMaxPoints", "relativeScore", "presentationScoreEnabled", "$event", "_r8", "onSelect", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_ng_template_14_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_Conditional_19_Template", "\u0275\u0275propertyInterpolate1", "type", "_c7", "length", "key", "_c8", "containerRef_r11", "offsetWidth", "height", "ngxBarColor", "xScaleMax", "BAR_PADDING", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Conditional_1_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_26_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_31_Template", "_forTrack0", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_53_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_54_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_Conditional_55_Template", "CourseStatisticsComponent_Conditional_3_Conditional_3_For_70_Template", "\u0275\u0275repeaterTrackByIndex", "documentationType", "overallPoints", "totalRelativeScore", "gradingScaleExists", "filteredExerciseIDs", "ngxExerciseGroups", "CourseStatisticsComponent_Conditional_3_Conditional_3_Template", "CourseStatisticsComponent_Conditional_3_Conditional_4_Template", "exercises", "QUIZ_EXERCISE_COLOR", "PROGRAMMING_EXERCISE_COLOR", "MODELING_EXERCISE_COLOR", "TEXT_EXERCISE_COLOR", "FILE_UPLOAD_EXERCISE_COLOR", "Series", "exerciseId", "constructor", "NgxExercise", "series", "ExerciseTitle", "ChartBarTitle", "CourseStatisticsComponent", "controlsRendered", "EventEmitter", "courseStorageService", "inject", "CourseStorageService", "scoresStorageService", "ScoresStorageService", "translateService", "TranslateService", "route", "ActivatedRoute", "gradingSystemService", "GradingSystemService", "navigationUtilService", "ArtemisNavigationUtilService", "ChartCategoryFilter", "courseId", "courseExercises", "paramSubscription", "courseUpdatesSubscription", "translateSubscription", "courseExercisesNotIncludedInScore", "courseExercisesFilteredByCategories", "overallPointsPerExercise", "Map", "relativeScoresPerExercise", "overallMaxPointsPerExercise", "reachablePointsPerExercise", "currentRelativeScoresPerExercise", "presentationScoresPerExercise", "doughnutChartColors", "GraphColors", "LIGHT_BLUE", "RED", "exerciseTitles", "programmingPointLabel", "quizPointLabel", "modelingPointLabel", "textPointLabel", "fileUploadPointLabel", "presentationPointsLabel", "missingPointsLabel", "labels", "selectable", "group", "ScaleType", "Ordinal", "domain", "LIGHT_GREY", "GREEN", "YELLOW", "BLUE", "roundValueSpecifiedByCourseSettings", "CHART_HEIGHT", "DEFAULT_SIZE", "controls", "controlConfiguration", "subject", "Subject", "ngOnInit", "parent", "params", "subscribe", "parseInt", "getCourse", "onCourseLoad", "subscribeToCourseUpdates", "updateExerciseTitles", "onLangChange", "groupExercisesByType", "calculateCourseGrade", "set", "ExerciseType", "QUIZ", "instant", "MODELING", "PROGRAMMING", "TEXT", "FILE_UPLOAD", "ngAfterViewInit", "next", "emit", "ngOnDestroy", "unsubscribe", "matchPercentageToGradeStep", "gradeType", "GradeType", "calculateAndFilterNotIncludedInScore", "calculateMaxPoints", "calculateReachablePoints", "calculateReachablePresentationPoints", "calculateAbsoluteScores", "calculateRelativeScores", "calculatePresentationScores", "calculateCurrentRelativeScores", "Object", "values", "forEach", "exerciseType", "sortBy", "exercise", "dueDate", "dayjs", "add", "valueOf", "isBefore", "generateDefaultSeries", "studentParticipations", "title", "id", "pushToData", "participation", "results", "participationResult", "getStoredParticipationResult", "rated", "roundedParticipationScore", "score", "cappedParticipationScore", "Math", "min", "roundedParticipationPoints", "maxPoints", "missedScore", "missedPoints", "max", "identifyBar", "initializationState", "InitializationState", "FINISHED", "initializationDate", "INITIALIZED", "pushExerciseGroupsToData", "concat", "filter", "map", "setupCategoryFilter", "quizzesTotalScore", "retrieveScoreByExerciseTypeAndScoreType", "ScoreType", "ABSOLUTE_SCORE", "programmingExerciseTotalScore", "modelingExerciseTotalScore", "textExerciseTotalScore", "fileUploadExerciseTotalScore", "retrieveTotalScoreByScoreType", "totalPresentationPoints", "PRESENTATION_SCORE", "totalMissedPoints", "scores", "ngxDoughnutDataTemp", "index", "push", "quizzesTotalMaxPoints", "MAX_POINTS", "programmingExerciseTotalMaxPoints", "modelingExerciseTotalMaxPoints", "textExerciseTotalMaxPoints", "fileUploadExerciseTotalMaxPoints", "quizzesRelativeScore", "RELATIVE_SCORE", "programmingExerciseRelativeScore", "modelingExerciseRelativeScore", "textExerciseRelativeScore", "fileUploadExerciseRelativeScore", "quizzesReachablePoints", "REACHABLE_POINTS", "programmingExercisesReachablePoints", "modelingExercisesReachablePoints", "textExercisesReachablePoints", "fileUploadExercisesReachablePoints", "quizzesCurrentRelativeScore", "CURRENT_RELATIVE_SCORE", "programmingExerciseCurrentRelativeScore", "modelingExerciseCurrentRelativeScore", "textExerciseCurrentRelativeScore", "fileUploadExerciseCurrentRelativeScore", "programmingExercisePresentationScore", "modelingExercisePresentationScore", "textExercisePresentationScore", "fileUploadExercisePresentationScore", "REACHABLE_PRESENTATION_POINTS", "scoreType", "scoresPerExerciseTypeForCourse", "getStoredScoresPerExerciseType", "scoresOfExerciseType", "get", "undefined", "getScoreByScoreType", "totalScores", "getStoredTotalScores", "NaN", "studentScores", "includedInOverallScore", "IncludedInOverallScore", "calculateNumberOfAppliedFilters", "allSeries", "ngxExercise", "exerciseGroup", "firstExerciseGroup", "setXScaleMax", "calculateChartHeight", "delete", "split", "INCLUDED_COMPLETELY", "INCLUDED_AS_BONUS", "maxScore", "ceil", "event", "routeInNewTab", "category", "isIncluded", "setupFilteredChart", "filterExerciseIDsForCategorySelection", "included", "find", "newlyFilteredIDs", "numberOfActiveFilters", "chartEntries", "selectors", "viewQuery", "rf", "ctx", "CourseStatisticsComponent_ng_template_0_Template", "CourseStatisticsComponent_Conditional_3_Template", "NgbDropdown", "NgbDropdownToggle", "FaIconComponent", "TranslateDirective", "NgbDropdownMenu", "DocumentationButtonComponent", "PieChartModule", "PieChartComponent", "NgbTooltip", "RouterLink", "ExerciseScoresChartComponent", "BarChartModule", "BarHorizontalStackedComponent", "KeyValuePipe", "ArtemisTranslatePipe", "styles"]
}
