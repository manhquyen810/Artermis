{
  "version": 3,
  "sources": ["src/main/webapp/app/course/tutorial-groups/services/tutorial-group-session.service.ts", "src/main/webapp/app/course/tutorial-groups/services/tutorial-groups.service.ts", "src/main/webapp/app/course/manage/course-management.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { convertDateFromServer, toISO8601DateString } from 'app/utils/date.utils';\r\nimport { map } from 'rxjs/operators';\r\nimport { TutorialGroupSession } from 'app/entities/tutorial-group/tutorial-group-session.model';\r\nimport { TutorialGroupFreePeriodService } from 'app/course/tutorial-groups/services/tutorial-group-free-period.service';\r\n\r\ntype EntityResponseType = HttpResponse<TutorialGroupSession>;\r\n\r\nexport class TutorialGroupSessionDTO {\r\n    public date?: Date;\r\n    public startTime?: string;\r\n    public endTime?: string;\r\n    public location?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TutorialGroupSessionService {\r\n    private httpClient = inject(HttpClient);\r\n    private tutorialGroupFreePeriodService = inject(TutorialGroupFreePeriodService);\r\n\r\n    private resourceURL = 'api/tutorialgroup';\r\n\r\n    getOneOfTutorialGroup(courseId: number, tutorialGroupId: number, sessionId: number) {\r\n        return this.httpClient\r\n            .get<TutorialGroupSession>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions/${sessionId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupSessionResponseDatesFromServer(res)));\r\n    }\r\n\r\n    update(courseId: number, tutorialGroupId: number, sessionId: number, session: TutorialGroupSessionDTO): Observable<EntityResponseType> {\r\n        const copy = this.convertTutorialGroupSessionDatesFromClient(session);\r\n        return this.httpClient\r\n            .put<TutorialGroupSession>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions/${sessionId}`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupSessionResponseDatesFromServer(res)));\r\n    }\r\n\r\n    updateAttendanceCount(courseId: number, tutorialGroupId: number, sessionId: number, attendanceCount: number | undefined): Observable<EntityResponseType> {\r\n        let params = new HttpParams();\r\n        if (attendanceCount !== undefined && attendanceCount !== null) {\r\n            params = params.append('attendanceCount', attendanceCount.toString());\r\n        }\r\n        return this.httpClient\r\n            .patch<TutorialGroupSession>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions/${sessionId}/attendance-count`, null, {\r\n                observe: 'response',\r\n                params,\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupSessionResponseDatesFromServer(res)));\r\n    }\r\n\r\n    create(courseId: number, tutorialGroupId: number, session: TutorialGroupSessionDTO): Observable<EntityResponseType> {\r\n        const copy = this.convertTutorialGroupSessionDatesFromClient(session);\r\n        return this.httpClient\r\n            .post<TutorialGroupSession>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupSessionResponseDatesFromServer(res)));\r\n    }\r\n\r\n    cancel(courseId: number, tutorialGroupId: number, sessionId: number, explanation: string): Observable<EntityResponseType> {\r\n        return this.httpClient\r\n            .post<TutorialGroupSession>(\r\n                `${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions/${sessionId}/cancel`,\r\n                { status_explanation: explanation },\r\n                { observe: 'response' },\r\n            )\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupSessionResponseDatesFromServer(res)));\r\n    }\r\n\r\n    activate(courseId: number, tutorialGroupId: number, sessionId: number): Observable<EntityResponseType> {\r\n        return this.httpClient\r\n            .post<TutorialGroupSession>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions/${sessionId}/activate`, {}, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupSessionResponseDatesFromServer(res)));\r\n    }\r\n\r\n    delete(courseId: number, tutorialGroupId: number, sessionId: number): Observable<HttpResponse<void>> {\r\n        return this.httpClient.delete<void>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/sessions/${sessionId}`, { observe: 'response' });\r\n    }\r\n\r\n    convertTutorialGroupSessionDatesFromServer(tutorialGroupSession: TutorialGroupSession): TutorialGroupSession {\r\n        tutorialGroupSession.start = convertDateFromServer(tutorialGroupSession.start);\r\n        tutorialGroupSession.end = convertDateFromServer(tutorialGroupSession.end);\r\n        if (tutorialGroupSession.tutorialGroupFreePeriod) {\r\n            tutorialGroupSession.tutorialGroupFreePeriod = this.tutorialGroupFreePeriodService.convertTutorialGroupFreePeriodDatesFromServer(\r\n                tutorialGroupSession.tutorialGroupFreePeriod,\r\n            );\r\n        }\r\n        return tutorialGroupSession;\r\n    }\r\n\r\n    private convertTutorialGroupSessionResponseDatesFromServer(res: HttpResponse<TutorialGroupSession>): HttpResponse<TutorialGroupSession> {\r\n        if (res.body) {\r\n            this.convertTutorialGroupSessionDatesFromServer(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertTutorialGroupSessionDatesFromClient(tutorialGroupSessionDTO: TutorialGroupSessionDTO): TutorialGroupSessionDTO {\r\n        if (tutorialGroupSessionDTO) {\r\n            return Object.assign({}, tutorialGroupSessionDTO, {\r\n                date: toISO8601DateString(tutorialGroupSessionDTO.date),\r\n            });\r\n        } else {\r\n            return tutorialGroupSessionDTO;\r\n        }\r\n    }\r\n}\r\n", "import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { Observable } from 'rxjs';\r\nimport { StudentDTO } from 'app/entities/student-dto.model';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { map } from 'rxjs/operators';\r\nimport { TutorialGroupSessionService } from 'app/course/tutorial-groups/services/tutorial-group-session.service';\r\nimport { TutorialGroupSession } from 'app/entities/tutorial-group/tutorial-group-session.model';\r\nimport { TutorialGroupsConfigurationService } from 'app/course/tutorial-groups/services/tutorial-groups-configuration.service';\r\nimport { TutorialGroupRegistrationImportDTO } from 'app/entities/tutorial-group/tutorial-group-import-dto.model';\r\n\r\ntype EntityResponseType = HttpResponse<TutorialGroup>;\r\ntype EntityArrayResponseType = HttpResponse<TutorialGroup[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TutorialGroupsService {\r\n    private httpClient = inject(HttpClient);\r\n    private tutorialGroupSessionService = inject(TutorialGroupSessionService);\r\n    private tutorialGroupsConfigurationService = inject(TutorialGroupsConfigurationService);\r\n\r\n    private resourceURL = 'api/tutorialgroup';\r\n\r\n    getUniqueCampusValues(courseId: number): Observable<HttpResponse<string[]>> {\r\n        return this.httpClient.get<string[]>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/campus-values`, { observe: 'response' });\r\n    }\r\n\r\n    getUniqueLanguageValues(courseId: number): Observable<HttpResponse<string[]>> {\r\n        return this.httpClient.get<string[]>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/language-values`, { observe: 'response' });\r\n    }\r\n\r\n    getAllForCourse(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.httpClient\r\n            .get<TutorialGroup[]>(`${this.resourceURL}/courses/${courseId}/tutorial-groups`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertTutorialGroupResponseArrayDatesFromServer(res)));\r\n    }\r\n\r\n    getOneOfCourse(courseId: number, tutorialGroupId: number) {\r\n        return this.httpClient\r\n            .get<TutorialGroup>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupResponseDatesFromServer(res)));\r\n    }\r\n\r\n    create(tutorialGroup: TutorialGroup, courseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convertTutorialGroupDatesFromClient(tutorialGroup);\r\n        return this.httpClient\r\n            .post<TutorialGroup>(`${this.resourceURL}/courses/${courseId}/tutorial-groups`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupResponseDatesFromServer(res)));\r\n    }\r\n\r\n    update(\r\n        courseId: number,\r\n        tutorialGroupId: number,\r\n        tutorialGroup: TutorialGroup,\r\n        notificationText?: string,\r\n        updateTutorialGroupChannelName?: boolean,\r\n    ): Observable<EntityResponseType> {\r\n        const copy = this.convertTutorialGroupDatesFromClient(tutorialGroup);\r\n        return this.httpClient\r\n            .put<TutorialGroup>(\r\n                `${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}`,\r\n                {\r\n                    tutorialGroup: copy,\r\n                    notificationText,\r\n                    updateTutorialGroupChannelName: updateTutorialGroupChannelName ?? false,\r\n                },\r\n                { observe: 'response' },\r\n            )\r\n            .pipe(map((res: EntityResponseType) => this.convertTutorialGroupResponseDatesFromServer(res)));\r\n    }\r\n\r\n    deregisterStudent(courseId: number, tutorialGroupId: number, login: string): Observable<HttpResponse<void>> {\r\n        return this.httpClient.delete<void>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/deregister/${login}`, { observe: 'response' });\r\n    }\r\n\r\n    registerStudent(courseId: number, tutorialGroupId: number, login: string): Observable<HttpResponse<void>> {\r\n        return this.httpClient.post<void>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/register/${login}`, {}, { observe: 'response' });\r\n    }\r\n\r\n    registerMultipleStudents(courseId: number, tutorialGroupId: number, studentDtos: StudentDTO[]): Observable<HttpResponse<StudentDTO[]>> {\r\n        return this.httpClient.post<StudentDTO[]>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}/register-multiple`, studentDtos, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    import(courseId: number, tutorialGroups: TutorialGroupRegistrationImportDTO[]): Observable<HttpResponse<TutorialGroupRegistrationImportDTO[]>> {\r\n        return this.httpClient.post<TutorialGroupRegistrationImportDTO[]>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/import`, tutorialGroups, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    delete(courseId: number, tutorialGroupId: number): Observable<HttpResponse<void>> {\r\n        return this.httpClient.delete<void>(`${this.resourceURL}/courses/${courseId}/tutorial-groups/${tutorialGroupId}`, { observe: 'response' });\r\n    }\r\n\r\n    convertTutorialGroupArrayDatesFromServer(tutorialGroups: TutorialGroup[]): TutorialGroup[] {\r\n        if (tutorialGroups) {\r\n            tutorialGroups.forEach((tutorialGroup: TutorialGroup) => {\r\n                this.convertTutorialGroupDatesFromServer(tutorialGroup);\r\n            });\r\n        }\r\n        return tutorialGroups;\r\n    }\r\n\r\n    convertTutorialGroupDatesFromServer(tutorialGroup: TutorialGroup): TutorialGroup {\r\n        if (tutorialGroup.tutorialGroupSchedule) {\r\n            tutorialGroup.tutorialGroupSchedule.validFromInclusive = convertDateFromServer(tutorialGroup.tutorialGroupSchedule.validFromInclusive);\r\n            tutorialGroup.tutorialGroupSchedule.validToInclusive = convertDateFromServer(tutorialGroup.tutorialGroupSchedule.validToInclusive);\r\n        }\r\n        if (tutorialGroup.tutorialGroupSessions) {\r\n            tutorialGroup.tutorialGroupSessions.map((tutorialGroupSession: TutorialGroupSession) =>\r\n                this.tutorialGroupSessionService.convertTutorialGroupSessionDatesFromServer(tutorialGroupSession),\r\n            );\r\n        }\r\n\r\n        if (tutorialGroup.nextSession) {\r\n            tutorialGroup.nextSession = this.tutorialGroupSessionService.convertTutorialGroupSessionDatesFromServer(tutorialGroup.nextSession);\r\n        }\r\n\r\n        if (tutorialGroup.course?.tutorialGroupsConfiguration) {\r\n            tutorialGroup.course.tutorialGroupsConfiguration = this.tutorialGroupsConfigurationService.convertTutorialGroupsConfigurationDatesFromServer(\r\n                tutorialGroup.course?.tutorialGroupsConfiguration,\r\n            );\r\n        }\r\n\r\n        return tutorialGroup;\r\n    }\r\n\r\n    convertTutorialGroupResponseDatesFromServer(res: HttpResponse<TutorialGroup>): HttpResponse<TutorialGroup> {\r\n        if (res.body?.tutorialGroupSchedule) {\r\n            res.body.tutorialGroupSchedule.validFromInclusive = convertDateFromServer(res.body.tutorialGroupSchedule.validFromInclusive);\r\n            res.body.tutorialGroupSchedule.validToInclusive = convertDateFromServer(res.body.tutorialGroupSchedule.validToInclusive);\r\n        }\r\n        if (res.body?.tutorialGroupSessions) {\r\n            res.body.tutorialGroupSessions.map((tutorialGroupSession: TutorialGroupSession) =>\r\n                this.tutorialGroupSessionService.convertTutorialGroupSessionDatesFromServer(tutorialGroupSession),\r\n            );\r\n        }\r\n        if (res.body?.nextSession) {\r\n            res.body.nextSession = this.tutorialGroupSessionService.convertTutorialGroupSessionDatesFromServer(res?.body.nextSession);\r\n        }\r\n        if (res.body?.course?.tutorialGroupsConfiguration) {\r\n            res.body.course.tutorialGroupsConfiguration = this.tutorialGroupsConfigurationService.convertTutorialGroupsConfigurationDatesFromServer(\r\n                res.body?.course?.tutorialGroupsConfiguration,\r\n            );\r\n        }\r\n        return res;\r\n    }\r\n\r\n    convertTutorialGroupResponseArrayDatesFromServer(res: HttpResponse<TutorialGroup[]>): HttpResponse<TutorialGroup[]> {\r\n        if (res.body) {\r\n            res.body.forEach((tutorialGroup: TutorialGroup) => {\r\n                this.convertTutorialGroupDatesFromServer(tutorialGroup);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    convertTutorialGroupDatesFromClient(tutorialGroup: TutorialGroup): TutorialGroup {\r\n        if (tutorialGroup.tutorialGroupSchedule) {\r\n            return Object.assign({}, tutorialGroup, {\r\n                tutorialGroupSchedule: Object.assign({}, tutorialGroup.tutorialGroupSchedule, {\r\n                    validFromInclusive: tutorialGroup.tutorialGroupSchedule.validFromInclusive!.format('YYYY-MM-DD'),\r\n                    validToInclusive: tutorialGroup.tutorialGroupSchedule.validToInclusive!.format('YYYY-MM-DD'),\r\n                }),\r\n            });\r\n        } else {\r\n            return tutorialGroup;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Export tutorial groups for a specific course to a CSV file.\r\n     *\r\n     * @param courseId the id of the course for which the tutorial groups should be exported\r\n     * @param fields   the list of fields to include in the CSV export\r\n     * @return an Observable containing the CSV file as a Blob\r\n     */\r\n    exportTutorialGroupsToCSV(courseId: number, fields: string[]): Observable<Blob> {\r\n        const params = { fields };\r\n        return this.httpClient.get(`${this.resourceURL}/courses/${courseId}/tutorial-groups/export/csv`, {\r\n            params,\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n\r\n    exportToJson(courseId: number, fields: string[]): Observable<string> {\r\n        const params = { fields };\r\n        return this.httpClient.get(`${this.resourceURL}/courses/${courseId}/tutorial-groups/export/json`, {\r\n            params,\r\n            responseType: 'text',\r\n        });\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { CoursesForDashboardDTO } from 'app/course/manage/courses-for-dashboard-dto';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { Course, CourseGroup } from 'app/entities/course.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { User, UserNameAndLoginDTO, UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { LectureService } from 'app/lecture/lecture.service';\r\nimport { StatsForDashboard } from 'app/course/dashboards/stats-for-dashboard.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Submission, reconnectSubmissions } from 'app/entities/submission.model';\r\nimport { CourseManagementOverviewStatisticsDto } from 'app/course/manage/overview/course-management-overview-statistics-dto.model';\r\nimport { CourseManagementDetailViewDto } from 'app/course/manage/course-management-detail-view-dto.model';\r\nimport { StudentDTO } from 'app/entities/student-dto.model';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\nimport { convertDateFromClient } from 'app/utils/date.utils';\r\nimport { objectToJsonBlob } from 'app/utils/blob-util';\r\nimport { TutorialGroupsConfigurationService } from 'app/course/tutorial-groups/services/tutorial-groups-configuration.service';\r\nimport { TutorialGroupsService } from 'app/course/tutorial-groups/services/tutorial-groups.service';\r\nimport { OnlineCourseConfiguration } from 'app/entities/online-course-configuration.model';\r\nimport { CourseForDashboardDTO } from 'app/course/manage/course-for-dashboard-dto';\r\nimport { ScoresStorageService } from 'app/course/course-scores/scores-storage.service';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { ExerciseType, ScoresPerExerciseType } from 'app/entities/exercise.model';\r\nimport { OnlineCourseDtoModel } from 'app/lti/online-course-dto.model';\r\nimport { CourseForArchiveDTO } from './course-for-archive-dto';\r\n\r\nexport type EntityResponseType = HttpResponse<Course>;\r\nexport type EntityArrayResponseType = HttpResponse<Course[]>;\r\n\r\nexport type RoleGroup = 'tutors' | 'students' | 'instructors' | 'editors';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseManagementService {\r\n    private http = inject(HttpClient);\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private lectureService = inject(LectureService);\r\n    private accountService = inject(AccountService);\r\n    private entityTitleService = inject(EntityTitleService);\r\n    private tutorialGroupsConfigurationService = inject(TutorialGroupsConfigurationService);\r\n    private tutorialGroupsService = inject(TutorialGroupsService);\r\n    private scoresStorageService = inject(ScoresStorageService);\r\n\r\n    private resourceUrl = 'api/core/courses';\r\n\r\n    private coursesForNotifications: BehaviorSubject<Course[] | undefined> = new BehaviorSubject<Course[] | undefined>(undefined);\r\n\r\n    private fetchingCoursesForNotifications = false;\r\n\r\n    private courseOverviewSubject = new BehaviorSubject<boolean>(false);\r\n    isCourseOverview$ = this.courseOverviewSubject.asObservable();\r\n\r\n    /**\r\n     * updates a course using a PUT request\r\n     * @param courseId - the id of the course to be updated\r\n     * @param courseUpdate - the updates to the course\r\n     * @param courseImage - the course icon file\r\n     */\r\n    update(courseId: number, courseUpdate: Course, courseImage?: Blob): Observable<EntityResponseType> {\r\n        const copy = CourseManagementService.convertCourseDatesFromClient(courseUpdate);\r\n        const formData = new FormData();\r\n        formData.append('course', objectToJsonBlob(copy));\r\n        if (courseImage) {\r\n            // The image was cropped by us and is a blob, so we need to set a placeholder name for the server check\r\n            formData.append('file', courseImage, 'placeholderName.png');\r\n        }\r\n        return this.http\r\n            .put<Course>(`${this.resourceUrl}/${courseId}`, formData, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * updates the online course configuration of a course using a PUT request\r\n     * @param courseId - the id of the course to be updated\r\n     * @param onlineCourseConfiguration - the updates to the online course configuration\r\n     */\r\n    updateOnlineCourseConfiguration(courseId: number, onlineCourseConfiguration: OnlineCourseConfiguration): Observable<EntityResponseType> {\r\n        return this.http.put<OnlineCourseConfiguration>(`api/lti/courses/${courseId}/online-course-configuration`, onlineCourseConfiguration, { observe: 'response' });\r\n    }\r\n\r\n    findAllOnlineCoursesWithRegistrationId(clientId: string): Observable<OnlineCourseDtoModel[]> {\r\n        const params = new HttpParams().set('clientId', '' + clientId);\r\n        return this.http.get<OnlineCourseDtoModel[]>(`${this.resourceUrl}/for-lti-dashboard`, { params });\r\n    }\r\n\r\n    /**\r\n     * finds the course with the provided unique identifier\r\n     * @param courseId - the id of the course to be found\r\n     */\r\n    find(courseId: number): Observable<EntityResponseType> {\r\n        return this.http.get<Course>(`${this.resourceUrl}/${courseId}`, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * gets course information required for the course management detail page\r\n     * @param courseId the id of the course of which the detailed data should be fetched\r\n     */\r\n    getCourseStatisticsForDetailView(courseId: number): Observable<HttpResponse<CourseManagementDetailViewDto>> {\r\n        return this.http\r\n            .get<CourseManagementDetailViewDto>(`${this.resourceUrl}/${courseId}/management-detail`, { observe: 'response' })\r\n            .pipe(filter((res: HttpResponse<CourseManagementDetailViewDto>) => !!res.body));\r\n    }\r\n\r\n    /**\r\n     * gets the active users for the line chart in the detail view\r\n     * @param courseId the id of the course of which the statistics should be fetched\r\n     * @param periodIndex the period of the statistics we want to have\r\n     * @param periodSize the size of the statistics-period to be fetched\r\n     */\r\n    getStatisticsData(courseId: number, periodIndex: number, periodSize?: number): Observable<number[]> {\r\n        const params: Record<string, number> = { periodIndex };\r\n        if (periodSize) {\r\n            params.periodSize = periodSize;\r\n        }\r\n        return this.http.get<number[]>(`${this.resourceUrl}/${courseId}/statistics`, { params });\r\n    }\r\n\r\n    /**\r\n     * get the active users for the lifetime overview of the line chart in the detail view\r\n     * @param courseId the id of the course of which the statistics should be fetched\r\n     */\r\n    getStatisticsForLifetimeOverview(courseId: number): Observable<number[]> {\r\n        return this.http.get<number[]>(`${this.resourceUrl}/${courseId}/statistics-lifetime-overview`);\r\n    }\r\n\r\n    /**\r\n     * finds the course with the provided unique identifier together with its exercises\r\n     * @param courseId - the id of the course to be found\r\n     */\r\n    findWithExercises(courseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Course>(`${this.resourceUrl}/${courseId}/with-exercises`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * finds a course with the given id and eagerly loaded organizations\r\n     * @param courseId the id of the course to be found\r\n     */\r\n    findWithOrganizations(courseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Course>(`${this.resourceUrl}/${courseId}/with-organizations`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    findAllForDropdown(): Observable<HttpResponse<Course[]>> {\r\n        return this.http.get<Course[]>(`${this.resourceUrl}/for-dropdown`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * finds all courses using a GET request\r\n     */\r\n    findAllForDashboard(): Observable<HttpResponse<CoursesForDashboardDTO>> {\r\n        this.fetchingCoursesForNotifications = true;\r\n        return this.http.get<CoursesForDashboardDTO>(`${this.resourceUrl}/for-dashboard`, { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<CoursesForDashboardDTO>) => {\r\n                if (res.body) {\r\n                    const courses: Course[] = [];\r\n                    res.body.courses?.forEach((courseForDashboardDTO) => {\r\n                        courses.push(courseForDashboardDTO.course);\r\n                        this.saveScoresInStorage(courseForDashboardDTO);\r\n                    });\r\n                    // Replace the CourseForDashboardDTOs in the response body with the normal courses to enable further processing.\r\n                    const courseResponse = res.clone({ body: courses });\r\n                    this.processCourseEntityArrayResponseType(courseResponse);\r\n                    this.setCoursesForNotifications(courseResponse);\r\n                    this.courseStorageService.setCourses(courseResponse.body !== null ? courseResponse.body : undefined);\r\n                }\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Finds one course using a GET request.\r\n     * If the course was already loaded it should be retrieved using {@link CourseStorageService#getCourse} or {@link CourseStorageService#subscribeToCourseUpdates}\r\n     * @param courseId the course to fetch\r\n     */\r\n    findOneForDashboard(courseId: number): Observable<EntityResponseType> {\r\n        const params = new HttpParams();\r\n        return this.http.get<CourseForDashboardDTO>(`${this.resourceUrl}/${courseId}/for-dashboard`, { params, observe: 'response' }).pipe(\r\n            map((res: HttpResponse<CourseForDashboardDTO>) => {\r\n                if (res.body) {\r\n                    const courseForDashboardDTO: CourseForDashboardDTO = res.body;\r\n                    this.saveScoresInStorage(courseForDashboardDTO);\r\n\r\n                    // Replace the CourseForDashboardDTO in the response body with the normal course to enable further processing.\r\n                    return res.clone({ body: courseForDashboardDTO.course });\r\n                }\r\n                return res;\r\n            }),\r\n            map((res: EntityResponseType) => this.processCourseEntityResponseType(res)),\r\n            tap((res: EntityResponseType) => this.courseStorageService.updateCourse(res.body !== null ? res.body : undefined)),\r\n        );\r\n    }\r\n\r\n    saveScoresInStorage(courseForDashboardDTO: CourseForDashboardDTO) {\r\n        // Save the total scores in the scores-storage.service.\r\n        this.scoresStorageService.setStoredTotalScores(courseForDashboardDTO.course.id!, courseForDashboardDTO.totalScores);\r\n\r\n        const scoresPerExerciseType: ScoresPerExerciseType = new Map();\r\n        scoresPerExerciseType.set(ExerciseType.PROGRAMMING, courseForDashboardDTO.programmingScores);\r\n        scoresPerExerciseType.set(ExerciseType.MODELING, courseForDashboardDTO.modelingScores);\r\n        scoresPerExerciseType.set(ExerciseType.QUIZ, courseForDashboardDTO.quizScores);\r\n        scoresPerExerciseType.set(ExerciseType.TEXT, courseForDashboardDTO.textScores);\r\n        scoresPerExerciseType.set(ExerciseType.FILE_UPLOAD, courseForDashboardDTO.fileUploadScores);\r\n        this.scoresStorageService.setStoredScoresPerExerciseType(courseForDashboardDTO.course.id!, scoresPerExerciseType);\r\n\r\n        // Save the participation results in the scores-storage.service.\r\n        this.scoresStorageService.setStoredParticipationResults(courseForDashboardDTO.participationResults);\r\n    }\r\n\r\n    /**\r\n     * finds all participants of the course corresponding to the given unique identifier\r\n     * @param courseId - the id of the course\r\n     */\r\n    findAllParticipationsWithResults(courseId: number): Observable<StudentParticipation[]> {\r\n        return this.http.get<StudentParticipation[]>(`api/exercise/courses/${courseId}/participations`);\r\n    }\r\n\r\n    /**\r\n     * finds all results of exercises of the course corresponding to the given unique identifier for the current user\r\n     * @param courseId - the id of the course\r\n     */\r\n    findAllResultsOfCourseForExerciseAndCurrentUser(courseId: number): Observable<Course> {\r\n        return this.http.get<Course>(`${this.resourceUrl}/${courseId}/results`).pipe(\r\n            map((res: Course) => {\r\n                this.accountService.setAccessRightsForCourseAndReferencedExercises(res);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the course with the provided unique identifier for the assessment dashboard\r\n     * @param courseId - the id of the course\r\n     */\r\n    getCourseWithInterestingExercisesForTutors(courseId: number): Observable<EntityResponseType> {\r\n        const url = `${this.resourceUrl}/${courseId}/for-assessment-dashboard`;\r\n        return this.http.get<Course>(url, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * returns the stats of the course with the provided unique identifier for the assessment dashboard\r\n     * @param courseId - the id of the course\r\n     */\r\n    getStatsForTutors(courseId: number): Observable<HttpResponse<StatsForDashboard>> {\r\n        return this.http.get<StatsForDashboard>(`${this.resourceUrl}/${courseId}/stats-for-assessment-dashboard`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * finds all courses that can be registered to\r\n     */\r\n    findAllForRegistration(): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Course[]>(`${this.resourceUrl}/for-enrollment`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processCourseEntityArrayResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * finds a single course that can be registered to (with limited information)\r\n     */\r\n    findOneForRegistration(courseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Course>(`${this.resourceUrl}/${courseId}/for-enrollment`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * register to the course with the provided unique identifier using a POST request\r\n     * NB: the body is null, because the server can identify the user anyway\r\n     * @param courseId - the id of the course\r\n     */\r\n    registerForCourse(courseId: number): Observable<HttpResponse<string[]>> {\r\n        return this.http.post<string[]>(`${this.resourceUrl}/${courseId}/enroll`, null, { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<string[]>) => {\r\n                if (res.body != undefined) {\r\n                    this.accountService.syncGroups(res.body);\r\n                }\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * unenroll from course with the provided unique identifier using a POST request\r\n     * NB: the body is null, because the server can identify the user anyway\r\n     * @param courseId - the id of the course\r\n     */\r\n    unenrollFromCourse(courseId: number): Observable<HttpResponse<string[]>> {\r\n        return this.http.post<string[]>(`${this.resourceUrl}/${courseId}/unenroll`, null, { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<string[]>) => {\r\n                if (res.body != undefined) {\r\n                    this.accountService.syncGroups(res.body);\r\n                }\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * finds all courses with quiz exercises using a GET request\r\n     */\r\n    getAllCoursesWithQuizExercises(): Observable<EntityArrayResponseType> {\r\n        this.fetchingCoursesForNotifications = true;\r\n        return this.http.get<Course[]>(this.resourceUrl + '/courses-with-quiz', { observe: 'response' }).pipe(\r\n            map((res: EntityArrayResponseType) => this.processCourseEntityArrayResponseType(res)),\r\n            map((res: EntityArrayResponseType) => this.setCoursesForNotifications(res)),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * finds all courses together with user stats using a GET request\r\n     * @param req\r\n     */\r\n    getWithUserStats(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        this.fetchingCoursesForNotifications = true;\r\n        return this.http.get<Course[]>(`${this.resourceUrl}/with-user-stats`, { params: options, observe: 'response' }).pipe(\r\n            map((res: EntityArrayResponseType) => this.processCourseEntityArrayResponseType(res)),\r\n            map((res: EntityArrayResponseType) => this.setCoursesForNotifications(res)),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * finds all courses for the overview using a GET request\r\n     * @param req a dictionary which is sent as request option along the REST call\r\n     */\r\n    getCourseOverview(req?: any): Observable<HttpResponse<Course[]>> {\r\n        const options = createRequestOption(req);\r\n        this.fetchingCoursesForNotifications = true;\r\n        return this.http.get<Course[]>(`${this.resourceUrl}/course-management-overview`, { params: options, observe: 'response' }).pipe(\r\n            tap((res: HttpResponse<Course[]>) => {\r\n                if (res.body) {\r\n                    res.body.forEach((course) => this.accountService.setAccessRightsForCourse(course));\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Find all courses for the archive using a GET request\r\n     */\r\n    getCoursesForArchive(): Observable<HttpResponse<CourseForArchiveDTO[]>> {\r\n        return this.http.get<CourseForArchiveDTO[]>(`${this.resourceUrl}/for-archive`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * returns the exercise details of the courses for the courses' management dashboard\r\n     * @param onlyActive - if true, only active courses will be considered in the result\r\n     */\r\n    getExercisesForManagementOverview(onlyActive: boolean): Observable<HttpResponse<Course[]>> {\r\n        let httpParams = new HttpParams();\r\n        httpParams = httpParams.append('onlyActive', onlyActive.toString());\r\n        return this.http\r\n            .get<Course[]>(`${this.resourceUrl}/exercises-for-management-overview`, { params: httpParams, observe: 'response' })\r\n            .pipe(map((res: HttpResponse<Course[]>) => this.processCourseEntityArrayResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * returns the stats of the courses for the courses' management dashboard\r\n     * @param onlyActive - if true, only active courses will be considered in the result\r\n     */\r\n    getStatsForManagementOverview(onlyActive: boolean): Observable<HttpResponse<CourseManagementOverviewStatisticsDto[]>> {\r\n        let httpParams = new HttpParams();\r\n        httpParams = httpParams.append('onlyActive', onlyActive.toString());\r\n        return this.http.get<CourseManagementOverviewStatisticsDto[]>(`${this.resourceUrl}/stats-for-management-overview`, { params: httpParams, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * returns all the categories of the course corresponding to the given unique identifier\r\n     * @param courseId - the id of the course\r\n     */\r\n    findAllCategoriesOfCourse(courseId: number): Observable<HttpResponse<string[]>> {\r\n        return this.http.get<string[]>(`${this.resourceUrl}/${courseId}/categories`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * returns all the users in the given group of the course corresponding to the given unique identifier\r\n     * @param courseId - the id of the course\r\n     * @param courseGroup - the course group we want to get users from\r\n     */\r\n    getAllUsersInCourseGroup(courseId: number, courseGroup: CourseGroup): Observable<HttpResponse<User[]>> {\r\n        return this.http.get<User[]>(`${this.resourceUrl}/${courseId}/${courseGroup}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * finds users of the course corresponding to the name\r\n     * @param courseId  the id of the course\r\n     * @param name      the term to search users\r\n     */\r\n    searchOtherUsersInCourse(courseId: number, name: string): Observable<HttpResponse<User[]>> {\r\n        let httpParams = new HttpParams();\r\n        httpParams = httpParams.append('nameOfUser', name);\r\n        return this.http.get<User[]>(`${this.resourceUrl}/${courseId}/search-other-users`, { params: httpParams, observe: 'response' });\r\n    }\r\n\r\n    searchUsers(courseId: number, loginOrName: string, roles: RoleGroup[]): Observable<HttpResponse<UserPublicInfoDTO[]>> {\r\n        let httpParams = new HttpParams();\r\n        httpParams = httpParams.append('loginOrName', loginOrName);\r\n        httpParams = httpParams.append('roles', roles.join(','));\r\n        return this.http.get<User[]>(`${this.resourceUrl}/${courseId}/users/search`, { observe: 'response', params: httpParams });\r\n    }\r\n\r\n    searchMembersForUserMentions(courseId: number, loginOrName: string): Observable<HttpResponse<UserNameAndLoginDTO[]>> {\r\n        let httpParams = new HttpParams();\r\n        httpParams = httpParams.append('loginOrName', loginOrName);\r\n        return this.http.get<User[]>(`${this.resourceUrl}/${courseId}/members/search`, { observe: 'response', params: httpParams });\r\n    }\r\n\r\n    /**\r\n     * Search for a student on the server by login or name in the specified course.\r\n     * @param loginOrName The login or name to search for.\r\n     * @param courseId The id of the course to search in.\r\n     * @return Observable<HttpResponse<User[]>> with the list of found users as body.\r\n     */\r\n    searchStudents(courseId: number, loginOrName: string): Observable<HttpResponse<User[]>> {\r\n        // create loginOrName HTTP Param\r\n        let httpParams = new HttpParams();\r\n        httpParams = httpParams.append('loginOrName', loginOrName);\r\n        return this.http.get<User[]>(`${this.resourceUrl}/${courseId}/students/search`, { observe: 'response', params: httpParams });\r\n    }\r\n    /**\r\n     * Downloads the course archive of the specified courseId. Returns an error\r\n     * if the archive does not exist.\r\n     * @param courseId The id of the course\r\n     */\r\n    downloadCourseArchive(courseId: number): void {\r\n        const url = `${this.resourceUrl}/${courseId}/download-archive`;\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    /**\r\n     * Archives the course of the specified courseId.\r\n     * @param courseId The id of the course to archive\r\n     */\r\n    archiveCourse(courseId: number): Observable<HttpResponse<any>> {\r\n        return this.http.put(`${this.resourceUrl}/${courseId}/archive`, {}, { observe: 'response' });\r\n    }\r\n\r\n    cleanupCourse(courseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${courseId}/cleanup`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find all locked submissions of a given course for user\r\n     * @param {number} courseId - The id of the course to be searched for\r\n     */\r\n    findAllLockedSubmissionsOfCourse(courseId: number): Observable<HttpResponse<Submission[]>> {\r\n        return this.http.get<Submission[]>(`${this.resourceUrl}/${courseId}/locked-submissions`, { observe: 'response' }).pipe(\r\n            filter((res) => !!res.body),\r\n            tap((res) => reconnectSubmissions(res.body!)),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * adds a user to the given courseGroup of the course corresponding to the given unique identifier using a POST request\r\n     * @param courseId - the id of the course\r\n     * @param courseGroup - the course group we want to add a user to\r\n     * @param login - login of the user to be added\r\n     */\r\n    addUserToCourseGroup(courseId: number, courseGroup: CourseGroup, login: string): Observable<HttpResponse<void>> {\r\n        return this.http.post<void>(`${this.resourceUrl}/${courseId}/${courseGroup}/${login}`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Add users to the registered users for a course.\r\n     * @param courseId to which the users shall be added.\r\n     * @param studentDtos Student DTOs of users to add to the course.\r\n     * @param courseGroup the course group into which the user should be added\r\n     * @return studentDtos of users that were not found in the system.\r\n     */\r\n    addUsersToGroupInCourse(courseId: number, studentDtos: StudentDTO[], courseGroup: string): Observable<HttpResponse<StudentDTO[]>> {\r\n        return this.http.post<StudentDTO[]>(`${this.resourceUrl}/${courseId}/${courseGroup}`, studentDtos, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * removes a user from the given group of the course corresponding to the given unique identifier using a DELETE request\r\n     * @param courseId - the id of the course\r\n     * @param courseGroup - the course group\r\n     * @param login - login of the user to be removed\r\n     */\r\n    removeUserFromCourseGroup(courseId: number, courseGroup: CourseGroup, login: string): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${courseId}/${courseGroup}/${login}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Gets the cached courses. If there are none, the courses for the current user will be fetched.\r\n     * @returns {BehaviorSubject<Course[] | undefined>}\r\n     */\r\n    getCoursesForNotifications(): BehaviorSubject<Course[] | undefined> {\r\n        // The timeout is set to ensure that the request for retrieving courses\r\n        // here is only made if there was no similar request made before.\r\n        setTimeout(() => {\r\n            // Retrieve courses if no courses were fetched before and are not queried at the moment.\r\n            if (!this.fetchingCoursesForNotifications && !this.coursesForNotifications.getValue()) {\r\n                this.findAllForNotifications().subscribe({\r\n                    next: (res: HttpResponse<Course[]>) => {\r\n                        this.coursesForNotifications.next(res.body || undefined);\r\n                    },\r\n                    error: () => (this.fetchingCoursesForNotifications = false),\r\n                });\r\n            }\r\n        }, 500);\r\n        return this.coursesForNotifications;\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Course EntityResponses.\r\n     * @param courseRes\r\n     */\r\n    processCourseEntityResponseType(courseRes: EntityResponseType): EntityResponseType {\r\n        this.convertTutorialGroupDatesFromServer(courseRes);\r\n        this.convertTutorialGroupConfigurationDateFromServer(courseRes);\r\n        this.convertCourseResponseDateFromServer(courseRes);\r\n        this.setCompetenciesIfNone(courseRes);\r\n        this.setAccessRightsCourseEntityResponseType(courseRes);\r\n        this.convertExerciseCategoriesFromServer(courseRes);\r\n        this.sendCourseTitleAndExerciseTitlesToTitleService(courseRes?.body);\r\n        return courseRes;\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Course processCourseEntityArrayResponseType.\r\n     * @param courseRes\r\n     */\r\n    private processCourseEntityArrayResponseType(courseRes: EntityArrayResponseType): EntityArrayResponseType {\r\n        this.convertTutorialGroupsDatesFromServer(courseRes);\r\n        this.convertTutorialGroupConfigurationsDateFromServer(courseRes);\r\n        this.convertCourseArrayResponseDatesFromServer(courseRes);\r\n        this.convertExerciseCategoryArrayFromServer(courseRes);\r\n        this.setAccessRightsCourseEntityArrayResponseType(courseRes);\r\n        courseRes?.body?.forEach(this.sendCourseTitleAndExerciseTitlesToTitleService.bind(this));\r\n        return courseRes;\r\n    }\r\n\r\n    private setCoursesForNotifications(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            this.coursesForNotifications.next(res.body);\r\n            this.fetchingCoursesForNotifications = false;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    static convertCourseDatesFromClient(course: Course): Course {\r\n        // copy of the object\r\n        return Object.assign({}, course, {\r\n            startDate: convertDateFromClient(course.startDate),\r\n            endDate: convertDateFromClient(course.endDate),\r\n            enrollmentStartDate: convertDateFromClient(course.enrollmentStartDate),\r\n            enrollmentEndDate: convertDateFromClient(course.enrollmentEndDate),\r\n            unenrollmentEndDate: convertDateFromClient(course.unenrollmentEndDate),\r\n        });\r\n    }\r\n\r\n    private convertTutorialGroupDatesFromServer(courseRes: EntityResponseType): EntityResponseType {\r\n        if (courseRes.body?.tutorialGroups) {\r\n            courseRes.body.tutorialGroups = this.tutorialGroupsService.convertTutorialGroupArrayDatesFromServer(courseRes.body.tutorialGroups);\r\n        }\r\n        return courseRes;\r\n    }\r\n\r\n    private convertTutorialGroupsDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((course: Course) => {\r\n                if (course.tutorialGroups) {\r\n                    course.tutorialGroups = this.tutorialGroupsService.convertTutorialGroupArrayDatesFromServer(course.tutorialGroups);\r\n                }\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertTutorialGroupConfigurationDateFromServer(courseRes: EntityResponseType): EntityResponseType {\r\n        if (courseRes.body?.tutorialGroupsConfiguration) {\r\n            courseRes.body.tutorialGroupsConfiguration = this.tutorialGroupsConfigurationService.convertTutorialGroupsConfigurationDatesFromServer(\r\n                courseRes.body.tutorialGroupsConfiguration,\r\n            );\r\n        }\r\n        return courseRes;\r\n    }\r\n\r\n    private convertTutorialGroupConfigurationsDateFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((course: Course) => {\r\n                if (course.tutorialGroupsConfiguration) {\r\n                    course.tutorialGroupsConfiguration = this.tutorialGroupsConfigurationService.convertTutorialGroupsConfigurationDatesFromServer(\r\n                        course.tutorialGroupsConfiguration,\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertCourseResponseDateFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.setCourseDates(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertCourseArrayResponseDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((course: Course) => this.setCourseDates(course));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Converts the exercise category json string into ExerciseCategory objects (if it exists).\r\n     * @param res the response\r\n     */\r\n    private convertExerciseCategoriesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body && res.body.exercises) {\r\n            res.body.exercises.forEach((exercise) => ExerciseService.parseExerciseCategories(exercise));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of exercise category json strings into ExerciseCategory objects (if it exists).\r\n     * @param res the response\r\n     */\r\n    private convertExerciseCategoryArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((course: Course) => {\r\n                if (course.exercises) {\r\n                    course.exercises.forEach((exercise) => ExerciseService.parseExerciseCategories(exercise));\r\n                }\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private setCourseDates(course: Course) {\r\n        course.startDate = course.startDate ? dayjs(course.startDate) : undefined;\r\n        course.endDate = course.endDate ? dayjs(course.endDate) : undefined;\r\n        course.exercises = ExerciseService.convertExercisesDateFromServer(course.exercises);\r\n        course.lectures = this.lectureService.convertLectureArrayDatesFromServer(course.lectures);\r\n    }\r\n\r\n    /**\r\n     * Set the competencies and prerequisites to an empty array if undefined\r\n     * We late distinguish between undefined (not yet fetched) and an empty array (fetched but course has none)\r\n     * @param res The server response containing a course object\r\n     */\r\n    private setCompetenciesIfNone(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.competencies = res.body.competencies || [];\r\n            res.body.prerequisites = res.body.prerequisites || [];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private setAccessRightsCourseEntityArrayResponseType(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((course: Course) => {\r\n                this.accountService.setAccessRightsForCourseAndReferencedExercises(course);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private setAccessRightsCourseEntityResponseType(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.accountService.setAccessRightsForCourseAndReferencedExercises(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private findAllForNotifications(): Observable<EntityArrayResponseType> {\r\n        this.fetchingCoursesForNotifications = true;\r\n        return this.http.get<Course[]>(`${this.resourceUrl}/for-notifications`, { observe: 'response' }).pipe(\r\n            map((res: EntityArrayResponseType) => this.processCourseEntityArrayResponseType(res)),\r\n            map((res: EntityArrayResponseType) => this.setCoursesForNotifications(res)),\r\n        );\r\n    }\r\n\r\n    sendCourseTitleAndExerciseTitlesToTitleService(course: Course | null | undefined) {\r\n        this.entityTitleService.setTitle(EntityType.COURSE, [course?.id], course?.title);\r\n\r\n        course?.exercises?.forEach((exercise) => {\r\n            this.entityTitleService.setExerciseTitle(exercise);\r\n        });\r\n        course?.lectures?.forEach((lecture) => this.entityTitleService.setTitle(EntityType.LECTURE, [lecture.id], lecture.title));\r\n        course?.exams?.forEach((exam) => this.entityTitleService.setTitle(EntityType.EXAM, [exam.id], exam.title));\r\n        course?.organizations?.forEach((org) => this.entityTitleService.setTitle(EntityType.ORGANIZATION, [org.id], org.name));\r\n    }\r\n\r\n    /**\r\n     * Get number of allowed complaints in this course.\r\n     * @param courseId\r\n     * @param teamMode If true, the number of allowed complaints for the user's team is returned\r\n     */\r\n    getNumberOfAllowedComplaintsInCourse(courseId: number, teamMode = false): Observable<number> {\r\n        // Note: 0 is the default value in case the server returns something that does not make sense\r\n        return this.http.get<number>(`${this.resourceUrl}/${courseId}/allowed-complaints?teamMode=${teamMode}`) ?? 0;\r\n    }\r\n\r\n    enableCourseOverviewBackground() {\r\n        this.courseOverviewSubject.next(true);\r\n    }\r\n\r\n    disableCourseOverviewBackground() {\r\n        this.courseOverviewSubject.next(false);\r\n    }\r\n\r\n    getSemesterCollapseStateFromStorage(storageId: string): boolean {\r\n        const storedCollapseState: string | null = localStorage.getItem('semester.collapseState.' + storageId);\r\n        return storedCollapseState ? JSON.parse(storedCollapseState) : false;\r\n    }\r\n\r\n    setSemesterCollapseState(storageId: string, isCollapsed: boolean) {\r\n        localStorage.setItem('semester.collapseState.' + storageId, JSON.stringify(isCollapsed));\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["TutorialGroupSessionDTO", "date", "startTime", "endTime", "location", "TutorialGroupSessionService", "httpClient", "inject", "HttpClient", "tutorialGroupFreePeriodService", "TutorialGroupFreePeriodService", "resourceURL", "getOneOfTutorialGroup", "courseId", "tutorialGroupId", "sessionId", "get", "observe", "pipe", "map", "res", "convertTutorialGroupSessionResponseDatesFromServer", "update", "session", "copy", "convertTutorialGroupSessionDatesFromClient", "put", "updateAttendanceCount", "attendanceCount", "params", "HttpParams", "append", "toString", "patch", "create", "post", "cancel", "explanation", "status_explanation", "activate", "delete", "convertTutorialGroupSessionDatesFromServer", "tutorialGroupSession", "start", "convertDateFromServer", "end", "tutorialGroupFreePeriod", "convertTutorialGroupFreePeriodDatesFromServer", "body", "tutorialGroupSessionDTO", "Object", "assign", "toISO8601DateString", "factory", "\u0275fac", "providedIn", "TutorialGroupsService", "httpClient", "inject", "HttpClient", "tutorialGroupSessionService", "TutorialGroupSessionService", "tutorialGroupsConfigurationService", "TutorialGroupsConfigurationService", "resourceURL", "getUniqueCampusValues", "courseId", "get", "observe", "getUniqueLanguageValues", "getAllForCourse", "pipe", "map", "res", "convertTutorialGroupResponseArrayDatesFromServer", "getOneOfCourse", "tutorialGroupId", "convertTutorialGroupResponseDatesFromServer", "create", "tutorialGroup", "copy", "convertTutorialGroupDatesFromClient", "post", "update", "notificationText", "updateTutorialGroupChannelName", "put", "deregisterStudent", "login", "delete", "registerStudent", "registerMultipleStudents", "studentDtos", "import", "tutorialGroups", "convertTutorialGroupArrayDatesFromServer", "forEach", "convertTutorialGroupDatesFromServer", "tutorialGroupSchedule", "validFromInclusive", "convertDateFromServer", "validToInclusive", "tutorialGroupSessions", "tutorialGroupSession", "convertTutorialGroupSessionDatesFromServer", "nextSession", "course", "tutorialGroupsConfiguration", "convertTutorialGroupsConfigurationDatesFromServer", "body", "Object", "assign", "format", "exportTutorialGroupsToCSV", "fields", "params", "responseType", "exportToJson", "factory", "\u0275fac", "providedIn", "CourseManagementService", "http", "inject", "HttpClient", "courseStorageService", "CourseStorageService", "lectureService", "LectureService", "accountService", "AccountService", "entityTitleService", "EntityTitleService", "tutorialGroupsConfigurationService", "TutorialGroupsConfigurationService", "tutorialGroupsService", "TutorialGroupsService", "scoresStorageService", "ScoresStorageService", "resourceUrl", "coursesForNotifications", "BehaviorSubject", "undefined", "fetchingCoursesForNotifications", "courseOverviewSubject", "isCourseOverview$", "asObservable", "update", "courseId", "courseUpdate", "courseImage", "copy", "convertCourseDatesFromClient", "formData", "FormData", "append", "objectToJsonBlob", "put", "observe", "pipe", "map", "res", "processCourseEntityResponseType", "updateOnlineCourseConfiguration", "onlineCourseConfiguration", "findAllOnlineCoursesWithRegistrationId", "clientId", "params", "HttpParams", "set", "get", "find", "getCourseStatisticsForDetailView", "filter", "body", "getStatisticsData", "periodIndex", "periodSize", "getStatisticsForLifetimeOverview", "findWithExercises", "findWithOrganizations", "findAllForDropdown", "findAllForDashboard", "courses", "forEach", "courseForDashboardDTO", "push", "course", "saveScoresInStorage", "courseResponse", "clone", "processCourseEntityArrayResponseType", "setCoursesForNotifications", "setCourses", "findOneForDashboard", "tap", "updateCourse", "setStoredTotalScores", "id", "totalScores", "scoresPerExerciseType", "Map", "ExerciseType", "PROGRAMMING", "programmingScores", "MODELING", "modelingScores", "QUIZ", "quizScores", "TEXT", "textScores", "FILE_UPLOAD", "fileUploadScores", "setStoredScoresPerExerciseType", "setStoredParticipationResults", "participationResults", "findAllParticipationsWithResults", "findAllResultsOfCourseForExerciseAndCurrentUser", "setAccessRightsForCourseAndReferencedExercises", "getCourseWithInterestingExercisesForTutors", "url", "getStatsForTutors", "findAllForRegistration", "findOneForRegistration", "registerForCourse", "post", "syncGroups", "unenrollFromCourse", "getAllCoursesWithQuizExercises", "getWithUserStats", "req", "options", "createRequestOption", "getCourseOverview", "setAccessRightsForCourse", "getCoursesForArchive", "getExercisesForManagementOverview", "onlyActive", "httpParams", "toString", "getStatsForManagementOverview", "findAllCategoriesOfCourse", "getAllUsersInCourseGroup", "courseGroup", "searchOtherUsersInCourse", "name", "searchUsers", "loginOrName", "roles", "join", "searchMembersForUserMentions", "searchStudents", "downloadCourseArchive", "window", "open", "archiveCourse", "cleanupCourse", "delete", "findAllLockedSubmissionsOfCourse", "reconnectSubmissions", "addUserToCourseGroup", "login", "addUsersToGroupInCourse", "studentDtos", "removeUserFromCourseGroup", "getCoursesForNotifications", "setTimeout", "getValue", "findAllForNotifications", "subscribe", "next", "error", "courseRes", "convertTutorialGroupDatesFromServer", "convertTutorialGroupConfigurationDateFromServer", "convertCourseResponseDateFromServer", "setCompetenciesIfNone", "setAccessRightsCourseEntityResponseType", "convertExerciseCategoriesFromServer", "sendCourseTitleAndExerciseTitlesToTitleService", "convertTutorialGroupsDatesFromServer", "convertTutorialGroupConfigurationsDateFromServer", "convertCourseArrayResponseDatesFromServer", "convertExerciseCategoryArrayFromServer", "setAccessRightsCourseEntityArrayResponseType", "bind", "Object", "assign", "startDate", "convertDateFromClient", "endDate", "enrollmentStartDate", "enrollmentEndDate", "unenrollmentEndDate", "tutorialGroups", "convertTutorialGroupArrayDatesFromServer", "tutorialGroupsConfiguration", "convertTutorialGroupsConfigurationDatesFromServer", "setCourseDates", "exercises", "exercise", "ExerciseService", "parseExerciseCategories", "dayjs", "convertExercisesDateFromServer", "lectures", "convertLectureArrayDatesFromServer", "competencies", "prerequisites", "setTitle", "EntityType", "COURSE", "title", "setExerciseTitle", "lecture", "LECTURE", "exams", "exam", "EXAM", "organizations", "org", "ORGANIZATION", "getNumberOfAllowedComplaintsInCourse", "teamMode", "enableCourseOverviewBackground", "disableCourseOverviewBackground", "getSemesterCollapseStateFromStorage", "storageId", "storedCollapseState", "localStorage", "getItem", "JSON", "parse", "setSemesterCollapseState", "isCollapsed", "setItem", "stringify", "factory", "\u0275fac", "providedIn"]
}
