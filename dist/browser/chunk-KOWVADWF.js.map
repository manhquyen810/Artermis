{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/student-exams/student-exam.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable, map, tap } from 'rxjs';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { StudentExamWithGradeDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\r\n\r\ntype EntityResponseType = HttpResponse<StudentExam>;\r\ntype EntityArrayResponseType = HttpResponse<StudentExam[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StudentExamService {\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n\r\n    public resourceUrl = 'api/exam/courses';\r\n\r\n    /**\r\n     * Find a student exam on the server using a GET request.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param studentExamId The id of the student exam to get.\r\n     */\r\n    find(courseId: number, examId: number, studentExamId: number): Observable<HttpResponse<StudentExamWithGradeDTO>> {\r\n        return this.http\r\n            .get<StudentExamWithGradeDTO>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/${studentExamId}`, { observe: 'response' })\r\n            .pipe(tap((res: HttpResponse<StudentExamWithGradeDTO>) => this.processStudentExam(res?.body?.studentExam)));\r\n    }\r\n\r\n    /**\r\n     * Find all student exams for the given exam.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     */\r\n    findAllForExam(courseId: number, examId: number): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<StudentExam[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processStudentExams(res)));\r\n    }\r\n\r\n    /**\r\n     * Update the working time of the given student exam.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param studentExamId The id of the student exam to get.\r\n     * @param workingTime The working time in seconds.\r\n     */\r\n    updateWorkingTime(courseId: number, examId: number, studentExamId: number, workingTime: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .patch<StudentExam>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/${studentExamId}/working-time`, workingTime, { observe: 'response' })\r\n            .pipe(tap((res: EntityResponseType) => this.processStudentExam(res?.body ?? undefined)));\r\n    }\r\n\r\n    toggleSubmittedState(courseId: number, examId: number, studentExamId: number, unsubmit: boolean): Observable<EntityResponseType> {\r\n        const url = `${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/${studentExamId}/toggle-to-`;\r\n        if (unsubmit) {\r\n            return this.http.put<StudentExam>(url + `unsubmitted`, {}, { observe: 'response' });\r\n        } else {\r\n            return this.http.put<StudentExam>(url + `submitted`, {}, { observe: 'response' });\r\n        }\r\n    }\r\n\r\n    private processStudentExam(studentExam?: StudentExam) {\r\n        if (studentExam?.exam?.course) {\r\n            this.accountService.setAccessRightsForCourse(studentExam.exam.course);\r\n        }\r\n    }\r\n\r\n    private processStudentExams(studentExamsResponse: EntityArrayResponseType) {\r\n        studentExamsResponse.body!.forEach((studentExam) => {\r\n            if (studentExam.exam?.course) {\r\n                this.accountService.setAccessRightsForCourse(studentExam.exam.course);\r\n            }\r\n        });\r\n        return studentExamsResponse;\r\n    }\r\n\r\n    /**\r\n     * Get longest working time for the exam.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     */\r\n    getLongestWorkingTimeForExam(courseId: number, examId: number): Observable<number> {\r\n        return this.http.get<number>(`${this.resourceUrl}/${courseId}/exams/${examId}/longest-working-time`);\r\n    }\r\n}\r\n"],
  "mappings": "gJAWA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACnBC,KAAOC,EAAOC,CAAU,EACxBC,eAAiBF,EAAOG,CAAc,EAEvCC,YAAc,mBAQrBC,KAAKC,EAAkBC,EAAgBC,EAAqB,CACxD,OAAO,KAAKT,KACPU,IAA6B,GAAG,KAAKL,WAAW,IAAIE,CAAQ,UAAUC,CAAM,kBAAkBC,CAAa,GAAI,CAAEE,QAAS,UAAU,CAAE,EACtIC,KAAKC,EAAKC,GAA+C,KAAKC,mBAAmBD,GAAKE,MAAMC,WAAW,CAAC,CAAC,CAClH,CAOAC,eAAeX,EAAkBC,EAAc,CAC3C,OAAO,KAAKR,KACPU,IAAmB,GAAG,KAAKL,WAAW,IAAIE,CAAQ,UAAUC,CAAM,iBAAkB,CAAEG,QAAS,UAAU,CAAE,EAC3GC,KAAKO,EAAKL,GAAiC,KAAKM,oBAAoBN,CAAG,CAAC,CAAC,CAClF,CASAO,kBAAkBd,EAAkBC,EAAgBC,EAAuBa,EAAmB,CAC1F,OAAO,KAAKtB,KACPuB,MAAmB,GAAG,KAAKlB,WAAW,IAAIE,CAAQ,UAAUC,CAAM,kBAAkBC,CAAa,gBAAiBa,EAAa,CAAEX,QAAS,UAAU,CAAE,EACtJC,KAAKC,EAAKC,GAA4B,KAAKC,mBAAmBD,GAAKE,MAAQQ,MAAS,CAAC,CAAC,CAC/F,CAEAC,qBAAqBlB,EAAkBC,EAAgBC,EAAuBiB,EAAiB,CAC3F,IAAMC,EAAM,GAAG,KAAKtB,WAAW,IAAIE,CAAQ,UAAUC,CAAM,kBAAkBC,CAAa,cAC1F,OAAIiB,EACO,KAAK1B,KAAK4B,IAAiBD,EAAM,cAAe,CAAA,EAAI,CAAEhB,QAAS,UAAU,CAAE,EAE3E,KAAKX,KAAK4B,IAAiBD,EAAM,YAAa,CAAA,EAAI,CAAEhB,QAAS,UAAU,CAAE,CAExF,CAEQI,mBAAmBE,EAAyB,CAC5CA,GAAaY,MAAMC,QACnB,KAAK3B,eAAe4B,yBAAyBd,EAAYY,KAAKC,MAAM,CAE5E,CAEQV,oBAAoBY,EAA6C,CACrEA,OAAAA,EAAqBhB,KAAMiB,QAAShB,GAAe,CAC3CA,EAAYY,MAAMC,QAClB,KAAK3B,eAAe4B,yBAAyBd,EAAYY,KAAKC,MAAM,CAE5E,CAAC,EACME,CACX,CAOAE,6BAA6B3B,EAAkBC,EAAc,CACzD,OAAO,KAAKR,KAAKU,IAAY,GAAG,KAAKL,WAAW,IAAIE,CAAQ,UAAUC,CAAM,uBAAuB,CACvG,4CAzEST,EAAkB,6BAAlBA,EAAkBoC,QAAlBpC,EAAkBqC,UAAAC,WADL,MAAM,CAAA,SACnBtC,CAAkB,GAAA",
  "names": ["StudentExamService", "http", "inject", "HttpClient", "accountService", "AccountService", "resourceUrl", "find", "courseId", "examId", "studentExamId", "get", "observe", "pipe", "tap", "res", "processStudentExam", "body", "studentExam", "findAllForExam", "map", "processStudentExams", "updateWorkingTime", "workingTime", "patch", "undefined", "toggleSubmittedState", "unsubmit", "url", "put", "exam", "course", "setAccessRightsForCourse", "studentExamsResponse", "forEach", "getLongestWorkingTimeForExam", "factory", "\u0275fac", "providedIn"]
}
