{
  "version": 3,
  "sources": ["src/main/webapp/app/localci/build-queue/build-queue.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { BuildJob, BuildJobStatistics, FinishedBuildJob, SpanType } from 'app/entities/programming/build-job.model';\r\nimport { createNestedRequestOption } from 'app/shared/util/request.util';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { FinishedBuildJobFilter } from 'app/localci/build-queue/build-queue.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BuildQueueService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/programming';\r\n    public adminResourceUrl = 'api/core/admin';\r\n    nestedDtoKey = 'pageable';\r\n\r\n    /**\r\n     * Get all build jobs of a course in the queue\r\n     * @param courseId\r\n     */\r\n    getQueuedBuildJobsByCourseId(courseId: number): Observable<BuildJob[]> {\r\n        return this.http.get<BuildJob[]>(`${this.resourceUrl}/courses/${courseId}/queued-jobs`);\r\n    }\r\n\r\n    /**\r\n     * Get all running build jobs of a course\r\n     * @param courseId\r\n     */\r\n    getRunningBuildJobsByCourseId(courseId: number): Observable<BuildJob[]> {\r\n        return this.http.get<BuildJob[]>(`${this.resourceUrl}/courses/${courseId}/running-jobs`);\r\n    }\r\n\r\n    /**\r\n     * Get all build jobs in the queue\r\n     */\r\n    getQueuedBuildJobs(): Observable<BuildJob[]> {\r\n        return this.http.get<BuildJob[]>(`${this.adminResourceUrl}/queued-jobs`);\r\n    }\r\n\r\n    /**\r\n     * Get all running build jobs\r\n     */\r\n    getRunningBuildJobs(): Observable<BuildJob[]> {\r\n        return this.http.get<BuildJob[]>(`${this.adminResourceUrl}/running-jobs`);\r\n    }\r\n\r\n    /**\r\n     * Cancel a specific build job associated with the build job id\r\n     * @param courseId the id of the course\r\n     * @param buildJobId the id of the build job to cancel\r\n     */\r\n    cancelBuildJobInCourse(courseId: number, buildJobId: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/courses/${courseId}/cancel-job/${buildJobId}`).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel build job ${buildJobId} in course ${courseId}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Cancel a specific build job associated with the build job id\r\n     * @param buildJobId the id of the build job to cancel\r\n     */\r\n    cancelBuildJob(buildJobId: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/cancel-job/${buildJobId}`).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel build job ${buildJobId}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Cancel all queued build jobs\r\n     */\r\n    cancelAllQueuedBuildJobs(): Observable<void> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/cancel-all-queued-jobs`).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel all queued build jobs\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Cancel all queued build jobs associated with a course\r\n     */\r\n    cancelAllQueuedBuildJobsInCourse(courseId: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/courses/${courseId}/cancel-all-queued-jobs`).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel all queued build jobs in course ${courseId}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Cancel all running build jobs\r\n     */\r\n    cancelAllRunningBuildJobs(): Observable<void> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/cancel-all-running-jobs`).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel all running build jobs\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Cancel all running build jobs for a specific agent\r\n     * @param agentName the name of the agent\r\n     */\r\n    cancelAllRunningBuildJobsForAgent(agentName: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/cancel-all-running-jobs-for-agent`, { params: { agentName } }).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel all running build jobs for agent ${agentName}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Cancel all running build jobs associated with a course\r\n     */\r\n    cancelAllRunningBuildJobsInCourse(courseId: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/courses/${courseId}/cancel-all-running-jobs`).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to cancel all running build jobs in course ${courseId}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all finished build jobs\r\n     * @param req The query request\r\n     * @param filter The filter to apply\r\n     */\r\n    getFinishedBuildJobs(req?: any, filter?: FinishedBuildJobFilter): Observable<HttpResponse<FinishedBuildJob[]>> {\r\n        let options = createNestedRequestOption(req, this.nestedDtoKey);\r\n        if (filter) {\r\n            options = filter.addHttpParams(options);\r\n        }\r\n        return this.http.get<FinishedBuildJob[]>(`${this.adminResourceUrl}/finished-jobs`, { params: options, observe: 'response' }).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to get all finished build jobs\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all finished build jobs associated with a course\r\n     * @param courseId the id of the course\r\n     * @param req The query request\r\n     * @param filter The filter to apply\r\n     */\r\n    getFinishedBuildJobsByCourseId(courseId: number, req?: any, filter?: FinishedBuildJobFilter): Observable<HttpResponse<FinishedBuildJob[]>> {\r\n        let options = createNestedRequestOption(req, this.nestedDtoKey);\r\n        if (filter) {\r\n            options = filter.addHttpParams(options);\r\n        }\r\n        return this.http.get<FinishedBuildJob[]>(`${this.resourceUrl}/courses/${courseId}/finished-jobs`, { params: options, observe: 'response' }).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to get all finished build jobs in course ${courseId}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get BuildJobStatistics\r\n     *\r\n     * @param span the time span\r\n     * @returns BuildJobStatistics\r\n     */\r\n    getBuildJobStatistics(span: SpanType): Observable<BuildJobStatistics> {\r\n        return this.http.get<BuildJobStatistics>(`${this.adminResourceUrl}/build-job-statistics`, { params: { span } }).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to get build job statistics\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get BuildJobStatistics for a specific course\r\n     * @param courseId the id of the course\r\n     * @param span the time span\r\n     * @returns BuildJobStatistics\r\n     */\r\n    getBuildJobStatisticsForCourse(courseId: number, span: SpanType): Observable<BuildJobStatistics> {\r\n        return this.http.get<BuildJobStatistics>(`${this.resourceUrl}/courses/${courseId}/build-job-statistics`, { params: { span } }).pipe(\r\n            catchError((err) => {\r\n                return throwError(() => new Error(`Failed to get build job statistics for course ${courseId}\\n${err.message}`));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all build jobs of a course in the queue\r\n     * @param buildJobId\r\n     */\r\n    getBuildJobLogs(buildJobId: string): Observable<string> {\r\n        return this.http.get(`${this.resourceUrl}/build-log/${buildJobId}`, { responseType: 'text' }).pipe(\r\n            catchError(() => {\r\n                return throwError(() => new Error('artemisApp.buildQueue.logs.errorFetchingLogs'));\r\n            }),\r\n        );\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["BuildQueueService", "http", "inject", "HttpClient", "resourceUrl", "adminResourceUrl", "nestedDtoKey", "getQueuedBuildJobsByCourseId", "courseId", "get", "getRunningBuildJobsByCourseId", "getQueuedBuildJobs", "getRunningBuildJobs", "cancelBuildJobInCourse", "buildJobId", "delete", "pipe", "catchError", "err", "throwError", "Error", "message", "cancelBuildJob", "cancelAllQueuedBuildJobs", "cancelAllQueuedBuildJobsInCourse", "cancelAllRunningBuildJobs", "cancelAllRunningBuildJobsForAgent", "agentName", "params", "cancelAllRunningBuildJobsInCourse", "getFinishedBuildJobs", "req", "filter", "options", "createNestedRequestOption", "addHttpParams", "observe", "getFinishedBuildJobsByCourseId", "getBuildJobStatistics", "span", "getBuildJobStatisticsForCourse", "getBuildJobLogs", "responseType", "factory", "\u0275fac", "providedIn"]
}
