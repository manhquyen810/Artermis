{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/text/text-assesment-event.model.ts", "src/main/webapp/app/exercises/text/assess/analytics/text-assesment-analytics.service.ts"],
  "sourcesContent": ["import dayjs from 'dayjs/esm';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { FeedbackType } from 'app/entities/feedback.model';\r\nimport { TextBlockType } from 'app/entities/text/text-block.model';\r\n\r\nexport enum TextAssessmentEventType {\r\n    ADD_FEEDBACK_AUTOMATICALLY_SELECTED_BLOCK = 'ADD_FEEDBACK_AUTOMATICALLY_SELECTED_BLOCK',\r\n    ADD_FEEDBACK_MANUALLY_SELECTED_BLOCK = 'ADD_FEEDBACK_MANUALLY_SELECTED_BLOCK',\r\n    DELETE_FEEDBACK = 'DELETE_FEEDBACK',\r\n    EDIT_AUTOMATIC_FEEDBACK = 'EDIT_AUTOMATIC_FEEDBACK',\r\n    SUBMIT_ASSESSMENT = 'SUBMIT_ASSESSMENT',\r\n    ASSESS_NEXT_SUBMISSION = 'ASSESS_NEXT_SUBMISSION',\r\n}\r\n\r\nexport class TextAssessmentEvent implements BaseEntity {\r\n    public id?: number;\r\n    public userId?: number;\r\n    public timestamp?: dayjs.Dayjs;\r\n    public eventType?: TextAssessmentEventType;\r\n    public feedbackType?: FeedbackType;\r\n    public segmentType?: TextBlockType;\r\n    public courseId?: number;\r\n    public textExerciseId?: number;\r\n    public participationId?: number;\r\n    public submissionId?: number;\r\n\r\n    constructor(userId?: number, courseId?: number, textExerciseId?: number, participationId?: number, submissionId?: number) {\r\n        this.userId = userId;\r\n        this.courseId = courseId;\r\n        this.textExerciseId = textExerciseId;\r\n        this.participationId = participationId;\r\n        this.submissionId = submissionId;\r\n    }\r\n\r\n    setEventType(type: TextAssessmentEventType) {\r\n        this.eventType = type;\r\n        return this;\r\n    }\r\n\r\n    setFeedbackType(type?: FeedbackType) {\r\n        this.feedbackType = type;\r\n    }\r\n\r\n    setSegmentType(type?: TextBlockType) {\r\n        this.segmentType = type;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TextAssessmentService } from 'app/exercises/text/assess/text-assessment.service';\r\nimport { TextAssessmentEvent, TextAssessmentEventType } from 'app/entities/text/text-assesment-event.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { FeedbackType } from 'app/entities/feedback.model';\r\nimport { TextBlockType } from 'app/entities/text/text-block.model';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { Location } from '@angular/common';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n/**\r\n * A service used to manage sending TextAssessmentEvent's to the server\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class TextAssessmentAnalytics {\r\n    private assessmentsService = inject(TextAssessmentService);\r\n    private accountService = inject(AccountService);\r\n    private location = inject(Location);\r\n    private profileService = inject(ProfileService);\r\n\r\n    private userId: number;\r\n    private courseId: number;\r\n    private textExerciseId: number;\r\n    private participationId: number;\r\n    private submissionId: number;\r\n    private eventToSend: TextAssessmentEvent = new TextAssessmentEvent();\r\n    private INVALID_VALUE = -1;\r\n    private route: ActivatedRoute;\r\n    public analyticsEnabled = false;\r\n\r\n    constructor() {\r\n        // retrieve the analytics enabled status from the profile info and set to current property\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.analyticsEnabled = profileInfo.textAssessmentAnalyticsEnabled || false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Angular services cannot inject route listeners automatically. The route needs to be injected manually, and then\r\n     * it can be listened upon.\r\n     * @param route the route instance of the component using the service\r\n     */\r\n    setComponentRoute(route: ActivatedRoute) {\r\n        if (this.analyticsEnabled) {\r\n            this.route = route;\r\n            this.subscribeToRouteParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if artemis analytics is enabled, and then submits the prepared event to the server through the TextAssessmentService.\r\n     * @param eventType type of the event to be sent\r\n     * @param feedbackType type of the feedback to be sent. It is undefined by default to support simple events too.\r\n     * @param textBlockType type of the text block to be sent. It is undefined by default to support simple events too.\r\n     */\r\n    sendAssessmentEvent(eventType: TextAssessmentEventType, feedbackType: FeedbackType | undefined = undefined, textBlockType: TextBlockType | undefined = undefined) {\r\n        if (this.analyticsEnabled && !this.isExampleSubmissionRoute()) {\r\n            this.eventToSend.setEventType(eventType);\r\n            this.eventToSend.setFeedbackType(feedbackType);\r\n            this.eventToSend.setSegmentType(textBlockType);\r\n            this.assessmentsService.addTextAssessmentEvent(this.eventToSend).subscribe({\r\n                error: (e) => captureException('Error sending statistics: ' + e.message),\r\n            });\r\n        }\r\n    }\r\n\r\n    private isExampleSubmissionRoute() {\r\n        return !!this.location?.path().includes('example-submission');\r\n    }\r\n    /**\r\n     * Subscribes to the route parameters and updates the respective id's accordingly.\r\n     * Avoids having to set the id on the component's side.\r\n     */\r\n    private subscribeToRouteParameters() {\r\n        this.route.params.subscribe((params) => {\r\n            this.userId = this.accountService.userIdentity ? Number(this.accountService.userIdentity.id) : this.INVALID_VALUE;\r\n            this.courseId = Number(params['courseId']);\r\n            this.textExerciseId = Number(params['exerciseId']);\r\n            this.participationId = Number(params['participationId']);\r\n            this.submissionId = Number(params['submissionId']);\r\n            this.eventToSend = new TextAssessmentEvent(this.userId, this.courseId, this.textExerciseId, this.participationId, this.submissionId);\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "yPAKA,IAAYA,EAAZ,SAAYA,EAAuB,CAC/BA,OAAAA,EAAA,0CAAA,4CACAA,EAAA,qCAAA,uCACAA,EAAA,gBAAA,kBACAA,EAAA,wBAAA,0BACAA,EAAA,kBAAA,oBACAA,EAAA,uBAAA,yBANQA,CAOZ,EAPYA,GAAuB,CAAA,CAAA,EAStBC,EAAP,KAA0B,CACrBC,GACAC,OACAC,UACAC,UACAC,aACAC,YACAC,SACAC,eACAC,gBACAC,aAEPC,YAAYT,EAAiBK,EAAmBC,EAAyBC,EAA0BC,EAAqB,CACpH,KAAKR,OAASA,EACd,KAAKK,SAAWA,EAChB,KAAKC,eAAiBA,EACtB,KAAKC,gBAAkBA,EACvB,KAAKC,aAAeA,CACxB,CAEAE,aAAaC,EAA6B,CACtC,YAAKT,UAAYS,EACV,IACX,CAEAC,gBAAgBD,EAAmB,CAC/B,KAAKR,aAAeQ,CACxB,CAEAE,eAAeF,EAAoB,CAC/B,KAAKP,YAAcO,CACvB,GC9BJ,IAAaG,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CACxBC,mBAAqBC,EAAOC,CAAqB,EACjDC,eAAiBF,EAAOG,CAAc,EACtCC,SAAWJ,EAAOK,CAAQ,EAC1BC,eAAiBN,EAAOO,CAAc,EAEtCC,OACAC,SACAC,eACAC,gBACAC,aACAC,YAAmC,IAAIC,EACvCC,cAAgB,GAChBC,MACDC,iBAAmB,GAE1BC,aAAA,CAEI,KAAKZ,eAAea,eAAc,EAAGC,UAAWC,GAAe,CAC3D,KAAKJ,iBAAmBI,EAAYC,gCAAkC,EAC1E,CAAC,CACL,CAOAC,kBAAkBP,EAAqB,CAC/B,KAAKC,mBACL,KAAKD,MAAQA,EACb,KAAKQ,2BAA0B,EAEvC,CAQAC,oBAAoBC,EAAoCC,EAAyCC,OAAWC,EAA2CD,OAAS,CACxJ,KAAKX,kBAAoB,CAAC,KAAKa,yBAAwB,IACvD,KAAKjB,YAAYkB,aAAaL,CAAS,EACvC,KAAKb,YAAYmB,gBAAgBL,CAAY,EAC7C,KAAKd,YAAYoB,eAAeJ,CAAa,EAC7C,KAAK9B,mBAAmBmC,uBAAuB,KAAKrB,WAAW,EAAEO,UAAU,CACvEe,MAAQC,GAAMC,EAAiB,6BAA+BD,EAAEE,OAAO,EAC1E,EAET,CAEQR,0BAAwB,CAC5B,MAAO,CAAC,CAAC,KAAK1B,UAAUmC,KAAI,EAAGC,SAAS,oBAAoB,CAChE,CAKQhB,4BAA0B,CAC9B,KAAKR,MAAMyB,OAAOrB,UAAWqB,GAAU,CACnC,KAAKjC,OAAS,KAAKN,eAAewC,aAAeC,OAAO,KAAKzC,eAAewC,aAAaE,EAAE,EAAI,KAAK7B,cACpG,KAAKN,SAAWkC,OAAOF,EAAO,QAAW,EACzC,KAAK/B,eAAiBiC,OAAOF,EAAO,UAAa,EACjD,KAAK9B,gBAAkBgC,OAAOF,EAAO,eAAkB,EACvD,KAAK7B,aAAe+B,OAAOF,EAAO,YAAe,EACjD,KAAK5B,YAAc,IAAIC,EAAoB,KAAKN,OAAQ,KAAKC,SAAU,KAAKC,eAAgB,KAAKC,gBAAiB,KAAKC,YAAY,CACvI,CAAC,CACL,4CApESd,EAAuB,6BAAvBA,EAAuB+C,QAAvB/C,EAAuBgD,UAAAC,WADV,MAAM,CAAA,SACnBjD,CAAuB,GAAA",
  "names": ["TextAssessmentEventType", "TextAssessmentEvent", "id", "userId", "timestamp", "eventType", "feedbackType", "segmentType", "courseId", "textExerciseId", "participationId", "submissionId", "constructor", "setEventType", "type", "setFeedbackType", "setSegmentType", "TextAssessmentAnalytics", "assessmentsService", "inject", "TextAssessmentService", "accountService", "AccountService", "location", "Location", "profileService", "ProfileService", "userId", "courseId", "textExerciseId", "participationId", "submissionId", "eventToSend", "TextAssessmentEvent", "INVALID_VALUE", "route", "analyticsEnabled", "constructor", "getProfileInfo", "subscribe", "profileInfo", "textAssessmentAnalyticsEnabled", "setComponentRoute", "subscribeToRouteParameters", "sendAssessmentEvent", "eventType", "feedbackType", "undefined", "textBlockType", "isExampleSubmissionRoute", "setEventType", "setFeedbackType", "setSegmentType", "addTextAssessmentEvent", "error", "e", "captureException", "message", "path", "includes", "params", "userIdentity", "Number", "id", "factory", "\u0275fac", "providedIn"]
}
