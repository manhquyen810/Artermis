{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/student-exams/student-exam-status/student-exam-status.component.ts", "src/main/webapp/app/exam/manage/student-exams/student-exam-status/student-exam-status.component.html", "src/main/webapp/app/exam/manage/student-exams/student-exams.component.ts", "src/main/webapp/app/exam/manage/student-exams/student-exams.component.html"],
  "sourcesContent": ["import { Component, Input } from '@angular/core';\r\nimport { faCheckCircle, faExclamationTriangle, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n/**\r\n * Status indicator for student exams\r\n * Number of student exams should match the number of registered users\r\n */\r\n@Component({\r\n    selector: 'jhi-student-exam-status',\r\n    templateUrl: `./student-exam-status.component.html`,\r\n    imports: [FaIconComponent, TranslateDirective, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class StudentExamStatusComponent {\r\n    @Input() hasStudentsWithoutExam: boolean;\r\n    @Input() isTestExam: boolean;\r\n\r\n    // Icons\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faCheckCircle = faCheckCircle;\r\n    faInfoCircle = faInfoCircle;\r\n}\r\n", "<h5 class=\"d-flex mt-0 mb-0\">\r\n    @if (isTestExam) {\r\n        <div class=\"d-flex badge bg-info\">\r\n            <fa-icon class=\"me-1 text-white\" [icon]=\"faInfoCircle\" />\r\n            <span class=\"ms-1\" jhiTranslate=\"artemisApp.studentExams.studentExamStatusTestExam\"></span>\r\n        </div>\r\n    } @else {\r\n        @if (hasStudentsWithoutExam) {\r\n            <div class=\"d-flex badge bg-warning\">\r\n                <fa-icon class=\"me-1 text-white\" [icon]=\"faExclamationTriangle\" [ngbTooltip]=\"'artemisApp.studentExams.studentExamStatusWarningTooltip' | artemisTranslate\" />\r\n                <span class=\"ms-1\" jhiTranslate=\"artemisApp.studentExams.studentExamStatusWarning\"></span>\r\n            </div>\r\n        } @else {\r\n            <div class=\"d-flex badge bg-success\">\r\n                <fa-icon class=\"me-1 text-white\" [icon]=\"faCheckCircle\" />\r\n                <span class=\"ms-1\" jhiTranslate=\"artemisApp.studentExams.studentExamStatusSuccess\"></span>\r\n            </div>\r\n        }\r\n    }\r\n</h5>\r\n", "import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { NgbModal, NgbProgressbar } from '@ng-bootstrap/ng-bootstrap';\r\nimport { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\r\nimport { StudentExamWorkingTimeComponent } from 'app/exam/shared/student-exam-working-time/student-exam-working-time.component';\r\nimport { TestExamWorkingTimeComponent } from 'app/exam/shared/testExam-workingTime/test-exam-working-time.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_LOCALVC } from 'app/app.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { StudentExamStatusComponent } from './student-exam-status/student-exam-status.component';\r\nimport { DataTableComponent } from 'app/shared/data-table/data-table.component';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\n\r\nconst getWebsocketChannel = (examId: number) => `/topic/exams/${examId}/exercise-start-status`;\r\n\r\nexport type ExamExerciseStartPreparationStatus = {\r\n    finished?: number;\r\n    failed?: number;\r\n    overall?: number;\r\n    participationCount?: number;\r\n    startedAt?: dayjs.Dayjs;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-student-exams',\r\n    templateUrl: './student-exams.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        FaIconComponent,\r\n        StudentExamStatusComponent,\r\n        NgbProgressbar,\r\n        DataTableComponent,\r\n        NgxDatatableModule,\r\n        RouterLink,\r\n        TestExamWorkingTimeComponent,\r\n        StudentExamWorkingTimeComponent,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class StudentExamsComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private studentExamService = inject(StudentExamService);\r\n    private courseService = inject(CourseManagementService);\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n    private accountService = inject(AccountService);\r\n    private artemisTranslatePipe = inject(ArtemisTranslatePipe);\r\n    private websocketService = inject(WebsocketService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    courseId: number;\r\n    examId: number;\r\n    studentExams: StudentExam[] = [];\r\n    course: Course;\r\n    exam: Exam;\r\n    hasStudentsWithoutExam: boolean;\r\n    isTestExam: boolean;\r\n\r\n    eventSubscriber: Subscription;\r\n    paramSub: Subscription;\r\n    isLoading: boolean;\r\n    filteredStudentExamsSize = 0;\r\n    isExamStarted = false;\r\n    isExamOver = false;\r\n    longestWorkingTime?: number;\r\n    isAdmin = false;\r\n    localVCEnabled = false;\r\n\r\n    exercisePreparationStatus?: ExamExerciseStartPreparationStatus;\r\n    exercisePreparationRunning = false;\r\n    exercisePreparationPercentage = 0;\r\n    exercisePreparationEta?: string;\r\n\r\n    // Icons\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    /**\r\n     * Initialize the courseId and examId\r\n     */\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        this.loadAll();\r\n\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.localVCEnabled = profileInfo.activeProfiles.includes(PROFILE_LOCALVC);\r\n        });\r\n\r\n        const channel = getWebsocketChannel(this.examId);\r\n        this.websocketService.subscribe(channel);\r\n        this.websocketService\r\n            .receive(channel)\r\n            .pipe(tap((status: ExamExerciseStartPreparationStatus) => (status.startedAt = convertDateFromServer(status.startedAt))))\r\n            .subscribe((status: ExamExerciseStartPreparationStatus) => this.setExercisePreparationStatus(status));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.websocketService.unsubscribe(getWebsocketChannel(this.examId));\r\n    }\r\n\r\n    private loadAll() {\r\n        this.paramSub = this.route.params.subscribe(() => {\r\n            this.isAdmin = this.accountService.isAdmin();\r\n            this.courseService.find(this.courseId).subscribe((courseResponse) => {\r\n                this.course = courseResponse.body!;\r\n            });\r\n\r\n            this.examManagementService.find(this.courseId, this.examId, true).subscribe((examResponse) => {\r\n                this.exam = examResponse.body!;\r\n                this.isTestExam = this.exam.testExam!;\r\n                this.isExamStarted = this.exam.startDate ? this.exam.startDate.isBefore(dayjs()) : false;\r\n\r\n                this.studentExamService.findAllForExam(this.courseId, this.examId).subscribe((res) => {\r\n                    this.setStudentExams(res.body);\r\n                    this.longestWorkingTime = Math.max.apply(\r\n                        null,\r\n                        this.studentExams.map((studentExam) => studentExam.workingTime),\r\n                    );\r\n                    this.calculateIsExamOver();\r\n                    this.isLoading = false;\r\n                    if (this.exam.examUsers) {\r\n                        this.hasStudentsWithoutExam = this.studentExams.length < this.exam.examUsers.length;\r\n                    }\r\n                });\r\n            });\r\n\r\n            this.examManagementService.getExerciseStartStatus(this.courseId, this.examId).subscribe((res) => this.setExercisePreparationStatus(res.body ?? undefined));\r\n        });\r\n    }\r\n\r\n    calculateIsExamOver() {\r\n        if (this.longestWorkingTime && this.exam) {\r\n            const startDate = dayjs(this.exam.startDate);\r\n            let endDate = startDate.add(this.longestWorkingTime, 'seconds');\r\n            if (this.exam.gracePeriod) {\r\n                endDate = endDate.add(this.exam.gracePeriod!, 'seconds');\r\n            }\r\n            this.isExamOver = endDate.isBefore(dayjs());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate all student exams for the exam on the server and handle the result.\r\n     * Asks for confirmation if some exams already exist.\r\n     */\r\n    handleGenerateStudentExams() {\r\n        // If student exams already exists, inform the instructor about it and get confirmations for re-creation\r\n        if (this.studentExams.length) {\r\n            const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'lg' });\r\n            modalRef.componentInstance.title = 'artemisApp.studentExams.generateStudentExams';\r\n            modalRef.componentInstance.text = this.artemisTranslatePipe.transform('artemisApp.studentExams.studentExamGenerationModalText');\r\n            modalRef.result.then(() => {\r\n                this.generateStudentExams();\r\n            });\r\n        } else {\r\n            this.generateStudentExams();\r\n        }\r\n    }\r\n\r\n    private generateStudentExams() {\r\n        this.isLoading = true;\r\n        this.examManagementService.generateStudentExams(this.courseId, this.examId).subscribe({\r\n            next: (res) => {\r\n                this.alertService.success('artemisApp.studentExams.studentExamGenerationSuccess', { number: res?.body?.length ?? 0 });\r\n                this.loadAll();\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.studentExamGenerationError', err);\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate missing student exams for the exam on the server and handle the result.\r\n     * Student exams can be missing if a student was added after the initial generation of all student exams.\r\n     */\r\n    generateMissingStudentExams() {\r\n        this.isLoading = true;\r\n        this.examManagementService.generateMissingStudentExams(this.courseId, this.examId).subscribe({\r\n            next: (res) => {\r\n                this.alertService.success('artemisApp.studentExams.missingStudentExamGenerationSuccess', { number: res?.body?.length ?? 0 });\r\n                this.loadAll();\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.missingStudentExamGenerationError', err);\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts all the exercises of the student exams that belong to the exam\r\n     */\r\n    startExercises() {\r\n        this.isLoading = true;\r\n        this.examManagementService.startExercises(this.courseId, this.examId).subscribe({\r\n            next: () => {\r\n                this.alertService.success('artemisApp.studentExams.startExerciseSuccess');\r\n                this.isLoading = false;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.startExerciseFailure', err);\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    setExercisePreparationStatus(newStatus?: ExamExerciseStartPreparationStatus) {\r\n        this.exercisePreparationStatus = newStatus;\r\n        const processedExams = (newStatus?.finished ?? 0) + (newStatus?.failed ?? 0);\r\n        this.exercisePreparationRunning = !!(newStatus && processedExams < newStatus.overall!);\r\n        this.exercisePreparationPercentage = newStatus ? (newStatus.overall! ? Math.round((processedExams / newStatus.overall!) * 100) : 100) : 0;\r\n        this.exercisePreparationEta = undefined;\r\n        if (this.exercisePreparationRunning && processedExams) {\r\n            const remainingExams = newStatus!.overall! - processedExams;\r\n\r\n            const passedSeconds = dayjs().diff(newStatus!.startedAt!, 's');\r\n            const remainingSeconds = (passedSeconds / processedExams) * remainingExams;\r\n\r\n            const h = Math.floor(remainingSeconds / 60 / 60);\r\n            const min = Math.floor((remainingSeconds - h * 60 * 60) / 60);\r\n            const s = Math.floor(remainingSeconds - h * 60 * 60 - min * 60);\r\n\r\n            this.exercisePreparationEta = (h ? h + 'h' : '') + (min || h ? min + 'm' : '') + (s || min || h ? s + 's' : '');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unlock all repositories immediately. Asks for confirmation.\r\n     */\r\n    handleUnlockAllRepositories() {\r\n        const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'lg' });\r\n        modalRef.componentInstance.title = 'artemisApp.studentExams.unlockAllRepositories';\r\n        modalRef.componentInstance.text = this.artemisTranslatePipe.transform('artemisApp.studentExams.unlockAllRepositoriesModalText');\r\n        modalRef.result.then(() => {\r\n            this.unlockAllRepositories();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unlocks all programming exercises that belong to the exam\r\n     */\r\n    private unlockAllRepositories() {\r\n        this.isLoading = true;\r\n        this.examManagementService.unlockAllRepositories(this.courseId, this.examId).subscribe({\r\n            next: (res) => {\r\n                this.alertService.success('artemisApp.studentExams.unlockAllRepositoriesSuccess', { number: res?.body });\r\n                this.isLoading = false;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.unlockAllRepositoriesFailure', err);\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lock all repositories immediately. Asks for confirmation.\r\n     */\r\n    handleLockAllRepositories() {\r\n        const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'lg' });\r\n        modalRef.componentInstance.title = 'artemisApp.studentExams.lockAllRepositories';\r\n        modalRef.componentInstance.text = this.artemisTranslatePipe.transform('artemisApp.studentExams.lockAllRepositoriesModalText');\r\n        modalRef.result.then(() => {\r\n            this.lockAllRepositories();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Locks all programming exercises that belong to the exam\r\n     */\r\n    private lockAllRepositories() {\r\n        this.isLoading = true;\r\n        this.examManagementService.lockAllRepositories(this.courseId, this.examId).subscribe({\r\n            next: (res) => {\r\n                this.alertService.success('artemisApp.studentExams.lockAllRepositoriesSuccess', { number: res?.body });\r\n                this.isLoading = false;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.lockAllRepositoriesFailure', err);\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the number of filtered participations\r\n     *\r\n     * @param filteredStudentExamsSize Total number of participations after filters have been applied\r\n     */\r\n    handleStudentExamsSizeChange = (filteredStudentExamsSize: number) => {\r\n        this.filteredStudentExamsSize = filteredStudentExamsSize;\r\n    };\r\n\r\n    /**\r\n     * Formats the results in the autocomplete overlay.\r\n     *\r\n     * @param studentExam\r\n     */\r\n    searchResultFormatter = (studentExam: StudentExam) => {\r\n        if (studentExam.user) {\r\n            return `${studentExam.user.login} (${studentExam.user.name})`;\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Converts a student exam object to a string that can be searched for. This is\r\n     * used by the autocomplete select inside the data table.\r\n     *\r\n     * @param studentExam Student exam\r\n     */\r\n    searchTextFromStudentExam = (studentExam: StudentExam): string => {\r\n        return studentExam.user?.login || '';\r\n    };\r\n\r\n    private setStudentExams(studentExams: StudentExam[] | null): void {\r\n        if (!studentExams) {\r\n            return;\r\n        }\r\n        this.studentExams = studentExams;\r\n        this.studentExams.forEach((studentExam: StudentExam) => {\r\n            studentExam.exam = this.exam;\r\n            studentExam.numberOfExamSessions = studentExam.examSessions?.length ?? 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows the translated error message if an error key is available in the error response. Otherwise it defaults to the generic alert.\r\n     * @param translationString the string identifier in the translation service for the text. This is ignored if the response does not contain an error message or error key.\r\n     * @param err the error response\r\n     */\r\n    private handleError(translationString: string, err: HttpErrorResponse) {\r\n        let errorDetail;\r\n        if (err?.error && err.error.errorKey) {\r\n            errorDetail = this.artemisTranslatePipe.transform(err.error.errorKey);\r\n        } else {\r\n            errorDetail = err?.error?.message;\r\n        }\r\n        if (errorDetail) {\r\n            this.alertService.error(translationString, { message: errorDetail });\r\n        } else {\r\n            // Sometimes the response does not have an error field, so we default to generic error handling\r\n            onError(this.alertService, err);\r\n        }\r\n    }\r\n}\r\n", "<div>\r\n    <h2>\r\n        <span jhiTranslate=\"artemisApp.studentExams.title\"></span>\r\n    </h2>\r\n    <hr />\r\n    <div>\r\n        @if (!isTestExam) {\r\n            @if (course?.isAtLeastInstructor) {\r\n                <button id=\"generateStudentExamsButton\" class=\"btn btn-primary mt-1\" (click)=\"handleGenerateStudentExams()\" [disabled]=\"isLoading || isExamStarted\">\r\n                    @if (isLoading) {\r\n                        <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                    }\r\n                    <span jhiTranslate=\"artemisApp.studentExams.generateStudentExams\"></span>\r\n                </button>\r\n                <button\r\n                    id=\"generateMissingStudentExamsButton\"\r\n                    class=\"btn btn-primary mt-1\"\r\n                    (click)=\"generateMissingStudentExams()\"\r\n                    [disabled]=\"isLoading || !hasStudentsWithoutExam || isExamStarted\"\r\n                >\r\n                    @if (isLoading) {\r\n                        <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                    }\r\n                    <span jhiTranslate=\"artemisApp.studentExams.generateMissingStudentExams\"></span>\r\n                </button>\r\n                <button id=\"startExercisesButton\" class=\"btn btn-primary mt-1\" (click)=\"startExercises()\" [disabled]=\"isLoading || isExamStarted || exercisePreparationRunning\">\r\n                    @if (isLoading) {\r\n                        <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                    }\r\n                    <span jhiTranslate=\"artemisApp.studentExams.startExercises\"></span>\r\n                </button>\r\n            }\r\n        }\r\n        @if (!localVCEnabled && course?.isAtLeastInstructor) {\r\n            <button id=\"handleUnlockAllRepositoriesButton\" class=\"btn btn-danger mt-1\" (click)=\"handleUnlockAllRepositories()\" [disabled]=\"isLoading\">\r\n                @if (isLoading) {\r\n                    <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                }\r\n                <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning\" />\r\n                <span jhiTranslate=\"artemisApp.studentExams.unlockAllRepositories\"></span>\r\n            </button>\r\n            <button id=\"lockAllRepositoriesButton\" class=\"btn btn-danger mt-1\" (click)=\"handleLockAllRepositories()\" [disabled]=\"isLoading\">\r\n                @if (isLoading) {\r\n                    <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                }\r\n                <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning\" />\r\n                <span jhiTranslate=\"artemisApp.studentExams.lockAllRepositories\"></span>\r\n            </button>\r\n        }\r\n    </div>\r\n    <div class=\"d-flex align-items-center gap-3 mt-2 mb-3 flex-wrap\">\r\n        @if (!isLoading) {\r\n            <jhi-student-exam-status [isTestExam]=\"isTestExam\" [hasStudentsWithoutExam]=\"hasStudentsWithoutExam\" />\r\n        }\r\n        @if (exercisePreparationStatus) {\r\n            <div class=\"d-flex flex-wrap flex-grow-1 align-items-center gap-1\">\r\n                <div jhiTranslate=\"artemisApp.studentExams.exercisePreparationProgress.label\"></div>\r\n                <div class=\"flex-grow-1 flex-basis-10 position-relative\">\r\n                    <div class=\"position-absolute w-100 h-100 top-0\">\r\n                        <ngb-progressbar\r\n                            [value]=\"exercisePreparationStatus.finished!\"\r\n                            [max]=\"exercisePreparationStatus.overall ? exercisePreparationStatus.overall - exercisePreparationStatus.failed! : 0\"\r\n                            [animated]=\"true\"\r\n                            [height]=\"'2em'\"\r\n                            type=\"success\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"d-flex justify-content-center gap-1 w-100 z-1 position-relative ms-2 me-2\">\r\n                        <span\r\n                            >{{ exercisePreparationPercentage }}% {{ exercisePreparationStatus.finished }} / {{ exercisePreparationStatus.overall }}\r\n                            {{ 'artemisApp.studentExams.exercisePreparationProgress.exams' | artemisTranslate }}</span\r\n                        >\r\n                        @if (exercisePreparationStatus.failed) {\r\n                            <span> ({{ exercisePreparationStatus.failed }} {{ 'artemisApp.studentExams.exercisePreparationProgress.failed' | artemisTranslate }}) </span>\r\n                        }\r\n                        |\r\n                        @if (exercisePreparationStatus.participationCount) {\r\n                            <span>\r\n                                {{ exercisePreparationStatus.participationCount }} {{ 'artemisApp.studentExams.exercisePreparationProgress.participations' | artemisTranslate }} |\r\n                            </span>\r\n                        }\r\n                        @if (exercisePreparationEta) {\r\n                            <span>{{ exercisePreparationEta }} {{ 'artemisApp.studentExams.exercisePreparationProgress.remaining' | artemisTranslate }}</span>\r\n                        }\r\n                        @if (!exercisePreparationEta && exercisePreparationPercentage === 100) {\r\n                            <span jhiTranslate=\"artemisApp.studentExams.exercisePreparationProgress.finished\"></span>\r\n                        }\r\n                        @if (!exercisePreparationEta && exercisePreparationPercentage < 100) {\r\n                            <span jhiTranslate=\"artemisApp.studentExams.exercisePreparationProgress.noeta\"></span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n<jhi-data-table\r\n    [isLoading]=\"isLoading\"\r\n    entityType=\"studentExam\"\r\n    id=\"student-exam\"\r\n    [allEntities]=\"studentExams\"\r\n    entitiesPerPageTranslation=\"artemisApp.exercise.resultsPerPage\"\r\n    showAllEntitiesTranslation=\"artemisApp.exercise.showAllResults\"\r\n    [searchPlaceholderTranslation]=\"'artemisApp.studentExams.searchForStudents'\"\r\n    [searchFields]=\"['user.login', 'user.name']\"\r\n    [searchTextFromEntity]=\"searchTextFromStudentExam\"\r\n    [searchResultFormatter]=\"searchResultFormatter\"\r\n    (entitiesSizeChange)=\"handleStudentExamsSizeChange($event)\"\r\n>\r\n    <ng-template let-settings=\"settings\" let-controls=\"controls\">\r\n        <ngx-datatable\r\n            class=\"bootstrap\"\r\n            [limit]=\"settings.limit\"\r\n            [sortType]=\"settings.sortType\"\r\n            [columnMode]=\"settings.columnMode\"\r\n            [headerHeight]=\"settings.headerHeight\"\r\n            [footerHeight]=\"settings.footerHeight\"\r\n            [rowHeight]=\"settings.rowHeight\"\r\n            [rows]=\"settings.rows\"\r\n            [rowClass]=\"settings.rowClass\"\r\n            [scrollbarH]=\"settings.scrollbarH\"\r\n        >\r\n            <ngx-datatable-column prop=\"id\" [minWidth]=\"60\" [width]=\"80\" [maxWidth]=\"100\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('id')\">\r\n                        <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.id\"></span>\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('id')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    <div>\r\n                        <a routerLink=\"/course-management/{{ courseId }}/exams/{{ examId }}/student-exams/{{ value }}\">{{ value }}</a>\r\n                    </div>\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"user\" [minWidth]=\"120\" [width]=\"120\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper username\" (click)=\"controls.onSort('user.name')\">\r\n                        <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.student\"></span>\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('user.name')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    @if (isAdmin) {\r\n                        <a routerLink=\"/admin/user-management/{{ value?.login }}\">{{ value?.name }}</a>\r\n                    } @else {\r\n                        {{ value?.name }}\r\n                    }\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"workingTime\" [minWidth]=\"170\" [width]=\"170\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('workingTime')\">\r\n                        @if (!isTestExam) {\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.workingTime\"></span>\r\n                        }\r\n                        @if (isTestExam) {\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.usedWorkingTime\"></span>\r\n                        }\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('workingTime')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\" let-row=\"row\">\r\n                    @if (isTestExam) {\r\n                        <jhi-test-exam-working-time [studentExam]=\"row\" />\r\n                    }\r\n                    @if (!isTestExam) {\r\n                        <jhi-student-exam-working-time [studentExam]=\"row\" />\r\n                    }\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"started\" [minWidth]=\"80\" [width]=\"80\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('started')\">\r\n                        <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.started\"></span>\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('started')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    <span jhiTranslate=\"{{ value ? 'global.generic.yes' : 'global.generic.no' }}\"></span>\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"submitted\" [minWidth]=\"80\" [width]=\"80\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('submitted')\">\r\n                        <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.submitted\"></span>\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('submitted')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    <span class=\"submitted\" jhiTranslate=\"{{ value ? 'global.generic.yes' : 'global.generic.no' }}\"></span>\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"submissionDate\" [minWidth]=\"130\" [width]=\"130\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('submissionDate')\">\r\n                        <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.submissionDate\"></span>\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('submissionDate')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    <span>{{ value | artemisDate }}</span>\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"numberOfExamSessions\" [minWidth]=\"100\" [width]=\"100\">\r\n                <ng-template ngx-datatable-header-template>\r\n                    <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('numberOfExamSessions')\">\r\n                        <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.studentExams.examSessions\"></span>\r\n                        <fa-icon [icon]=\"controls.iconForSortPropField('numberOfExamSessions')\" />\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    <span> {{ value }} </span>\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column prop=\"\" [minWidth]=\"100\" [width]=\"100\">\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    <div class=\"w-100 text-end\">\r\n                        @if (course?.isAtLeastTutor) {\r\n                            <div class=\"btn-group\">\r\n                                <a\r\n                                    class=\"btn btn-primary btn-sm me-1 mb-1 view-submission\"\r\n                                    [routerLink]=\"['/course-management', courseId, 'exams', examId, 'student-exams', value?.id]\"\r\n                                >\r\n                                    <span jhiTranslate=\"artemisApp.studentExams.view\"></span>\r\n                                </a>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n        </ngx-datatable>\r\n    </ng-template>\r\n</jhi-data-table>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faInfoCircle", "faExclamationTriangle", "\u0275\u0275pipeBind1", "faCheckCircle", "\u0275\u0275template", "StudentExamStatusComponent_Conditional_3_Conditional_1_Template", "StudentExamStatusComponent_Conditional_3_Conditional_2_Template", "\u0275\u0275conditional", "hasStudentsWithoutExam", "StudentExamStatusComponent", "isTestExam", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "StudentExamStatusComponent_Conditional_2_Template", "StudentExamStatusComponent_Conditional_3_Template", "FaIconComponent", "TranslateDirective", "NgbTooltip", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleGenerateStudentExams", "\u0275\u0275template", "StudentExamsComponent_Conditional_11_Conditional_1_Conditional_3_Template", "\u0275\u0275elementEnd", "generateMissingStudentExams", "StudentExamsComponent_Conditional_11_Conditional_1_Conditional_9_Template", "startExercises", "StudentExamsComponent_Conditional_11_Conditional_1_Conditional_15_Template", "\u0275\u0275advance", "\u0275\u0275property", "isLoading", "isExamStarted", "\u0275\u0275conditional", "hasStudentsWithoutExam", "exercisePreparationRunning", "StudentExamsComponent_Conditional_11_Conditional_1_Template", "course", "isAtLeastInstructor", "_r3", "handleUnlockAllRepositories", "StudentExamsComponent_Conditional_12_Conditional_3_Template", "handleLockAllRepositories", "StudentExamsComponent_Conditional_12_Conditional_11_Template", "faExclamationTriangle", "isTestExam", "\u0275\u0275textInterpolate2", "exercisePreparationStatus", "failed", "\u0275\u0275pipeBind1", "participationCount", "exercisePreparationEta", "StudentExamsComponent_Conditional_17_Conditional_18_Template", "StudentExamsComponent_Conditional_17_Conditional_20_Template", "StudentExamsComponent_Conditional_17_Conditional_21_Template", "StudentExamsComponent_Conditional_17_Conditional_22_Template", "StudentExamsComponent_Conditional_17_Conditional_23_Template", "finished", "overall", "\u0275\u0275textInterpolate4", "exercisePreparationPercentage", "_r4", "controls_r5", "controls", "onSort", "iconForSortPropField", "\u0275\u0275propertyInterpolate3", "courseId", "examId", "value_r6", "\u0275\u0275textInterpolate", "_r7", "\u0275\u0275propertyInterpolate1", "value_r8", "login", "name", "\u0275\u0275textInterpolate1", "StudentExamsComponent_ng_template_22_ng_template_14_Conditional_1_Template", "StudentExamsComponent_ng_template_22_ng_template_14_Conditional_2_Template", "isAdmin", "_r9", "StudentExamsComponent_ng_template_22_ng_template_19_Conditional_3_Template", "StudentExamsComponent_ng_template_22_ng_template_19_Conditional_4_Template", "row_r10", "StudentExamsComponent_ng_template_22_ng_template_21_Conditional_1_Template", "StudentExamsComponent_ng_template_22_ng_template_21_Conditional_2_Template", "_r11", "\u0275\u0275propertyInterpolate", "value_r12", "_r13", "value_r14", "_r15", "value_r16", "_r17", "value_r18", "\u0275\u0275pureFunction3", "_c1", "value_r19", "id", "StudentExamsComponent_ng_template_22_ng_template_54_Conditional_3_Template", "isAtLeastTutor", "StudentExamsComponent_ng_template_22_ng_template_5_Template", "StudentExamsComponent_ng_template_22_ng_template_7_Template", "StudentExamsComponent_ng_template_22_ng_template_12_Template", "StudentExamsComponent_ng_template_22_ng_template_14_Template", "StudentExamsComponent_ng_template_22_ng_template_19_Template", "StudentExamsComponent_ng_template_22_ng_template_21_Template", "StudentExamsComponent_ng_template_22_ng_template_26_Template", "StudentExamsComponent_ng_template_22_ng_template_28_Template", "StudentExamsComponent_ng_template_22_ng_template_33_Template", "StudentExamsComponent_ng_template_22_ng_template_35_Template", "StudentExamsComponent_ng_template_22_ng_template_40_Template", "StudentExamsComponent_ng_template_22_ng_template_42_Template", "StudentExamsComponent_ng_template_22_ng_template_47_Template", "StudentExamsComponent_ng_template_22_ng_template_49_Template", "StudentExamsComponent_ng_template_22_ng_template_54_Template", "settings_r20", "limit", "sortType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "rows", "rowClass", "scrollbarH", "getWebsocketChannel", "StudentExamsComponent", "route", "inject", "ActivatedRoute", "examManagementService", "ExamManagementService", "studentExamService", "StudentExamService", "courseService", "CourseManagementService", "alertService", "AlertService", "modalService", "NgbModal", "accountService", "AccountService", "artemisTranslatePipe", "ArtemisTranslatePipe", "websocketService", "WebsocketService", "profileService", "ProfileService", "studentExams", "exam", "eventSubscriber", "paramSub", "filteredStudentExamsSize", "isExamOver", "longestWorkingTime", "localVCEnabled", "ngOnInit", "Number", "snapshot", "paramMap", "get", "loadAll", "getProfileInfo", "subscribe", "profileInfo", "activeProfiles", "includes", "PROFILE_LOCALVC", "channel", "receive", "pipe", "tap", "status", "startedAt", "convertDateFromServer", "setExercisePreparationStatus", "ngOnDestroy", "unsubscribe", "params", "find", "courseResponse", "body", "examResponse", "testExam", "startDate", "isBefore", "dayjs", "findAllForExam", "res", "setStudentExams", "Math", "max", "apply", "map", "studentExam", "workingTime", "calculateIsExamOver", "examUsers", "length", "getExerciseStartStatus", "undefined", "endDate", "add", "gracePeriod", "modalRef", "open", "ConfirmAutofocusModalComponent", "keyboard", "size", "componentInstance", "title", "text", "transform", "result", "then", "generateStudentExams", "next", "success", "number", "error", "err", "handleError", "newStatus", "processedExams", "round", "remainingExams", "remainingSeconds", "diff", "h", "floor", "min", "s", "unlockAllRepositories", "lockAllRepositories", "handleStudentExamsSizeChange", "searchResultFormatter", "user", "searchTextFromStudentExam", "forEach", "numberOfExamSessions", "examSessions", "translationString", "errorDetail", "errorKey", "message", "onError", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "StudentExamsComponent_Conditional_11_Template", "StudentExamsComponent_Conditional_12_Template", "StudentExamsComponent_Conditional_16_Template", "StudentExamsComponent_Conditional_17_Template", "$event", "StudentExamsComponent_ng_template_22_Template", "\u0275\u0275pureFunction0", "_c0", "TranslateDirective", "FaIconComponent", "StudentExamStatusComponent", "NgbProgressbar", "DataTableComponent", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "RouterLink", "TestExamWorkingTimeComponent", "StudentExamWorkingTimeComponent", "ArtemisDatePipe", "encapsulation"]
}
