{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/exam-scores/exam-scores-average-scores-graph.component.ts", "src/main/webapp/app/exam/exam-scores/exam-scores-average-scores-graph.component.html", "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "src/main/webapp/app/exam/exam-scores/exam-scores.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject, input } from '@angular/core';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { AggregatedExerciseGroupResult } from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { LocaleConversionService } from 'app/shared/service/locale-conversion.service';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { ArtemisNavigationUtilService, navigateToExamExercise } from 'app/utils/navigation.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { BarChartModule, Color, ScaleType } from '@swimlane/ngx-charts';\r\nimport { NgxChartsSingleSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { axisTickFormattingWithPercentageSign } from 'app/shared/statistics-graph/statistics-graph.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ntype NameToValueMap = { [name: string]: any };\r\n\r\n@Component({\r\n    selector: 'jhi-exam-scores-average-scores-graph',\r\n    templateUrl: './exam-scores-average-scores-graph.component.html',\r\n    imports: [TranslateDirective, BarChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class ExamScoresAverageScoresGraphComponent implements OnInit {\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private localeConversionService = inject(LocaleConversionService);\r\n\r\n    averageScores = input.required<AggregatedExerciseGroupResult>();\r\n    course = input.required<Course>();\r\n\r\n    courseId: number;\r\n    examId: number;\r\n\r\n    readonly xAxisTickFormatting = axisTickFormattingWithPercentageSign;\r\n\r\n    // ngx\r\n    ngxData: NgxChartsSingleSeriesDataEntry[] = [];\r\n    ngxColor = {\r\n        name: 'exercise groups',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [],\r\n    } as Color;\r\n    xScaleMax = 100;\r\n    lookup: NameToValueMap = {};\r\n\r\n    ngOnInit(): void {\r\n        this.activatedRoute.params.subscribe((params) => {\r\n            this.courseId = +params['courseId'];\r\n            this.examId = +params['examId'];\r\n        });\r\n        this.initializeChart();\r\n    }\r\n\r\n    private initializeChart(): void {\r\n        this.lookup[this.averageScores().title] = { absoluteValue: this.averageScores().averagePoints! };\r\n        const exerciseGroupAverage = this.averageScores().averagePercentage ?? 0;\r\n        this.ngxData.push({ name: this.averageScores().title, value: exerciseGroupAverage });\r\n        this.ngxColor.domain.push(this.determineColor(true, exerciseGroupAverage));\r\n        this.xScaleMax = this.xScaleMax > exerciseGroupAverage ? this.xScaleMax : exerciseGroupAverage;\r\n        this.averageScores().exerciseResults.forEach((exercise) => {\r\n            const exerciseAverage = exercise.averagePercentage ?? 0;\r\n            this.xScaleMax = this.xScaleMax > exerciseAverage ? this.xScaleMax : exerciseAverage;\r\n            this.ngxData.push({ name: exercise.exerciseId + ' ' + exercise.title, value: exerciseAverage });\r\n            this.lookup[exercise.exerciseId + ' ' + exercise.title] = {\r\n                absoluteValue: exercise.averagePoints ?? 0,\r\n                exerciseId: exercise.exerciseId,\r\n                exerciseType: exercise.exerciseType,\r\n            };\r\n            this.ngxColor.domain.push(this.determineColor(false, exerciseAverage));\r\n        });\r\n\r\n        this.ngxData = [...this.ngxData];\r\n    }\r\n\r\n    roundAndPerformLocalConversion(points: number | undefined) {\r\n        return this.localeConversionService.toLocaleString(roundValueSpecifiedByCourseSettings(points, this.course()), this.course()!.accuracyOfScores!);\r\n    }\r\n\r\n    /**\r\n     * We navigate to the exercise scores page when the user clicks on a data point\r\n     */\r\n    navigateToExercise(exerciseId: number, exerciseType: ExerciseType) {\r\n        navigateToExamExercise(this.navigationUtilService, this.courseId, this.examId, this.averageScores().exerciseGroupId, exerciseType, exerciseId, 'scores');\r\n    }\r\n\r\n    /**\r\n     * Looks up the absolute average points of an exercise group or an exercise\r\n     * @param name name of the exercise or exercise type\r\n     * @returns locale string representation of the points\r\n     */\r\n    lookupAbsoluteValue(name: string): string {\r\n        return this.roundAndPerformLocalConversion(this.lookup[name].absoluteValue);\r\n    }\r\n\r\n    /**\r\n     * Delegates the user to the scores page of the specific exam exercise if the corresponding bar is clicked\r\n     * @param event the event that is fired by ngx-charts\r\n     */\r\n    onSelect(event: any) {\r\n        const id = this.lookup[event.name].exerciseId;\r\n        const type = this.lookup[event.name].exerciseType;\r\n        if (id && type) {\r\n            this.navigateToExercise(id, type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines the color for a given bar\r\n     * @param isExerciseGroup boolean that indicates if the currently determined color is assigned to a bar representing the exercise group average\r\n     * This is necessary because we have a color difference between the exercise group average representation and an exercise average representation\r\n     * @param score the score the bar will represent\r\n     */\r\n    private determineColor(isExerciseGroup: boolean, score: number): string {\r\n        if (score >= 50) {\r\n            return isExerciseGroup ? GraphColors.BLUE : GraphColors.DARK_BLUE;\r\n        } else if (score > 25) {\r\n            return GraphColors.YELLOW;\r\n        } else {\r\n            return GraphColors.RED;\r\n        }\r\n    }\r\n}\r\n", "<div class=\"row d-flex justify-content-center mb-1\">\r\n    <div #containerRef class=\"col-md-8 col-11 align-items-center px-0\">\r\n        <h6 class=\"text-center\" jhiTranslate=\"artemisApp.examScores.exerciseGroupTitle\" [translateValues]=\"{ groupTitle: this.averageScores().title }\"></h6>\r\n        <ngx-charts-bar-horizontal\r\n            [roundEdges]=\"false\"\r\n            [view]=\"[containerRef.offsetWidth, 100]\"\r\n            [results]=\"ngxData\"\r\n            [scheme]=\"ngxColor\"\r\n            [xAxis]=\"true\"\r\n            [yAxis]=\"true\"\r\n            [xScaleMax]=\"xScaleMax\"\r\n            [xAxisTickFormatting]=\"xAxisTickFormatting\"\r\n            (select)=\"onSelect($event)\"\r\n        >\r\n            <ng-template #tooltipTemplate let-model=\"model\">\r\n                <b>{{ model.name }}</b>\r\n                <br />\r\n                <span>\r\n                    {{ 'artemisApp.examScores.averagePointsTooltip' | artemisTranslate }}: {{ this.lookupAbsoluteValue(model.name) }} ({{\r\n                        roundAndPerformLocalConversion(model.value)\r\n                    }}%)\r\n                </span>\r\n            </ng-template>\r\n        </ngx-charts-bar-horizontal>\r\n    </div>\r\n</div>\r\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Subscription, forkJoin, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { download, generateCsv, mkConfig } from 'export-to-csv';\r\nimport {\r\n    AggregatedExamResult,\r\n    AggregatedExerciseGroupResult,\r\n    AggregatedExerciseResult,\r\n    ExamScoreDTO,\r\n    ExerciseGroup,\r\n    StudentResult,\r\n    TableState,\r\n} from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { LocaleConversionService } from 'app/shared/service/locale-conversion.service';\r\nimport { JhiLanguageHelper } from 'app/core/language/language.helper';\r\nimport { ParticipantScoresService, ScoresDTO } from 'app/shared/participant-scores/participant-scores.service';\r\nimport { captureException } from '@sentry/angular';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { GradeType, GradingScale } from 'app/entities/grading-scale.model';\r\nimport { declareExerciseType } from 'app/entities/exercise.model';\r\nimport { mean, median, standardDeviation } from 'simple-statistics';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { faCheckCircle, faDownload, faExclamationTriangle, faSort, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CsvExportRowBuilder } from 'app/shared/export/csv-export-row-builder';\r\nimport { ExcelExportRowBuilder } from 'app/shared/export/excel-export-row-builder';\r\nimport { CsvExportOptions } from 'app/shared/export/export-modal.component';\r\nimport { ExportRow, ExportRowBuilder } from 'app/shared/export/export-row-builder';\r\nimport * as XLSX from 'xlsx';\r\nimport { VERSION } from 'app/app.constants';\r\nimport {\r\n    BONUS_GRADE_KEY,\r\n    BONUS_KEY,\r\n    BONUS_POINTS_KEY,\r\n    EMAIL_KEY,\r\n    EXAM_ACHIEVED_POINTS,\r\n    EXAM_ACHIEVED_SCORE,\r\n    EXAM_ASSIGNED_EXERCISE,\r\n    EXAM_OVERALL_POINTS_KEY,\r\n    EXAM_OVERALL_SCORE_KEY,\r\n    EXAM_PASSED,\r\n    EXAM_SUBMITTED,\r\n    FINAL_GRADE_KEY,\r\n    GRADE_KEY,\r\n    NAME_KEY,\r\n    PLAGIARISM_VERDICT_IN_BONUS_SOURCE_KEY,\r\n    PLAGIARISM_VERDICT_KEY,\r\n    PRESENTATION_SCORE_IN_BONUS_SOURCE_KEY,\r\n    REGISTRATION_NUMBER_KEY,\r\n    USERNAME_KEY,\r\n} from 'app/shared/export/export-constants';\r\nimport { BonusStrategy } from 'app/entities/bonus.model';\r\nimport { ExamScoresAverageScoresGraphComponent } from 'app/exam/exam-scores/exam-scores-average-scores-graph.component';\r\n\r\nimport { ParticipantScoresDistributionComponent } from 'app/shared/participant-scores/participant-scores-distribution/participant-scores-distribution.component';\r\nimport { ExportButtonComponent } from 'app/shared/export/export-button.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nexport enum MedianType {\r\n    PASSED,\r\n    OVERALL,\r\n    SUBMITTED,\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-exam-scores',\r\n    templateUrl: './exam-scores.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styleUrls: ['./exam-scores.component.scss', '../../shared/chart/vertical-bar-chart.scss'],\r\n    imports: [\r\n        RouterLink,\r\n        ExamScoresAverageScoresGraphComponent,\r\n        ParticipantScoresDistributionComponent,\r\n        ExportButtonComponent,\r\n        HelpIconComponent,\r\n        SortByDirective,\r\n        SortDirective,\r\n        TranslateDirective,\r\n        ArtemisTranslatePipe,\r\n        FontAwesomeModule,\r\n        CommonModule,\r\n    ],\r\n})\r\nexport class ExamScoresComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private examService = inject(ExamManagementService);\r\n    private sortService = inject(SortService);\r\n    private alertService = inject(AlertService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n    private languageHelper = inject(JhiLanguageHelper);\r\n    private localeConversionService = inject(LocaleConversionService);\r\n    private participantScoresService = inject(ParticipantScoresService);\r\n    private gradingSystemService = inject(GradingSystemService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n\r\n    public examScoreDTO: ExamScoreDTO;\r\n    public exerciseGroups: ExerciseGroup[];\r\n    public studentResults: StudentResult[];\r\n\r\n    // Data structures for calculated statistics\r\n    // TODO: Cache already calculated filter dependent statistics\r\n    public aggregatedExamResults: AggregatedExamResult;\r\n    public aggregatedExerciseGroupResults: AggregatedExerciseGroupResult[];\r\n    public noOfExamsFiltered: number;\r\n\r\n    dataLabelFormatting = this.formatDataLabel.bind(this);\r\n    scores: number[];\r\n    gradesWithBonus: string[];\r\n    lastCalculatedMedianType: MedianType;\r\n    highlightedValue: number | undefined;\r\n\r\n    showOverallMedian: boolean; // Indicates whether the median of all exams is currently highlighted\r\n    overallChartMedian: number; // This value can vary as it depends on if the user only includes submitted exams or not\r\n    overallChartMedianType: MedianType; // We need to distinguish the different overall medians for the toggling\r\n    showPassedMedian: boolean; // Same as above for the median of all passed exams\r\n\r\n    // table entries\r\n    tableState: TableState = new TableState();\r\n\r\n    readonly roundScoreSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly medianType = MedianType;\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly BonusStrategy = BonusStrategy;\r\n\r\n    // exam score dtos\r\n    studentIdToExamScoreDTOs: Map<number, ScoresDTO> = new Map<number, ScoresDTO>();\r\n\r\n    public predicate = 'id';\r\n    public reverse = false;\r\n    public isLoading = true;\r\n    public filterForSubmittedExams = false;\r\n    public filterForNonEmptySubmissions = false;\r\n\r\n    gradingScaleExists = false;\r\n    gradingScale?: GradingScale;\r\n    isBonus?: boolean;\r\n    hasBonus?: BonusStrategy;\r\n    hasPlagiarismVerdicts?: boolean;\r\n    hasPlagiarismVerdictsInBonusSource?: boolean;\r\n    hasSecondCorrectionAndStarted: boolean;\r\n    hasNumericGrades: boolean;\r\n    presentationScoreThreshold?: number;\r\n\r\n    course?: Course;\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faDownload = faDownload;\r\n    faTimes = faTimes;\r\n    faCheckCircle = faCheckCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    private languageChangeSubscription?: Subscription;\r\n\r\n    ngOnInit() {\r\n        this.route.params.subscribe((params) => {\r\n            const getExamScoresObservable = this.examService.getExamScores(params['courseId'], params['examId']);\r\n            // alternative exam scores calculation using participant scores table\r\n            const findExamScoresObservable = this.participantScoresService.findExamScores(params['examId']).pipe(catchError(() => of(new HttpResponse<ScoresDTO[]>())));\r\n\r\n            // find grading scale if one exists and handle case when it doesn't\r\n            const gradingScaleObservable = this.gradingSystemService\r\n                .findGradingScaleForExam(params['courseId'], params['examId'])\r\n                .pipe(catchError(() => of(new HttpResponse<GradingScale>())));\r\n\r\n            this.courseManagementService.find(params['courseId']).subscribe((courseResponse) => (this.course = courseResponse.body!));\r\n\r\n            forkJoin([getExamScoresObservable, findExamScoresObservable, gradingScaleObservable]).subscribe({\r\n                next: ([getExamScoresResponse, findExamScoresResponse, gradingScaleResponse]) => {\r\n                    this.examScoreDTO = getExamScoresResponse!.body!;\r\n                    if (this.examScoreDTO) {\r\n                        this.hasSecondCorrectionAndStarted = this.examScoreDTO.hasSecondCorrectionAndStarted;\r\n                        this.studentResults = this.examScoreDTO.studentResults;\r\n                        this.exerciseGroups = this.examScoreDTO.exerciseGroups;\r\n\r\n                        const titleMap = new Map<string, number>();\r\n                        if (this.exerciseGroups) {\r\n                            for (const exerciseGroup of this.exerciseGroups) {\r\n                                if (titleMap.has(exerciseGroup.title)) {\r\n                                    const currentValue = titleMap.get(exerciseGroup.title);\r\n                                    titleMap.set(exerciseGroup.title, currentValue! + 1);\r\n                                } else {\r\n                                    titleMap.set(exerciseGroup.title, 1);\r\n                                }\r\n                            }\r\n\r\n                            // this workaround is necessary if the exam has exercise groups with the same title (we add the id to make it unique)\r\n                            for (const exerciseGroup of this.exerciseGroups) {\r\n                                if (titleMap.has(exerciseGroup.title) && titleMap.get(exerciseGroup.title)! > 1) {\r\n                                    exerciseGroup.title = `${exerciseGroup.title} (id=${exerciseGroup.id})`;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // set the grading scale if it exists for the exam\r\n                    if (gradingScaleResponse.body) {\r\n                        this.gradingScaleExists = true;\r\n                        this.gradingScale = gradingScaleResponse.body!;\r\n                        this.isBonus = this.gradingScale!.gradeType === GradeType.BONUS;\r\n                        this.hasBonus = this.studentResults?.find((studentResult) => studentResult?.gradeWithBonus)?.gradeWithBonus?.bonusStrategy;\r\n                        this.gradingScale!.gradeSteps = this.gradingSystemService.sortGradeSteps(this.gradingScale!.gradeSteps);\r\n                        this.hasNumericGrades = !this.gradingScale!.gradeSteps.some((step) => isNaN(Number(step.gradeName)));\r\n                    }\r\n                    // Only try to calculate statistics if the exam has exercise groups and student results\r\n                    if (this.studentResults && this.exerciseGroups) {\r\n                        this.hasPlagiarismVerdicts = this.studentResults.some((studentResult) => studentResult.mostSeverePlagiarismVerdict);\r\n                        this.hasPlagiarismVerdictsInBonusSource =\r\n                            this.hasBonus && this.studentResults.some((studentResult) => studentResult.gradeWithBonus?.mostSeverePlagiarismVerdict);\r\n\r\n                        if (this.hasBonus) {\r\n                            const firstStudentResultWithPresentationScore = this.studentResults.find((studentResult) => studentResult.gradeWithBonus?.presentationScoreThreshold);\r\n                            this.presentationScoreThreshold = firstStudentResultWithPresentationScore?.gradeWithBonus!.presentationScoreThreshold;\r\n                        }\r\n\r\n                        // Exam statistics must only be calculated once as they are not filter dependent\r\n                        this.calculateExamStatistics();\r\n                        this.calculateFilterDependentStatistics();\r\n                        const medianType = this.gradingScaleExists && !this.isBonus ? MedianType.PASSED : MedianType.OVERALL;\r\n                        // if a grading scale exists and the scoring type is not bonus, per default the median of all passed exams is shown.\r\n                        // We need to set the value for the overall median in order to show it next to the checkbox\r\n                        if (medianType === MedianType.PASSED) {\r\n                            // We pass MedianType.OVERALL since we want the median of all exams to be shown, not only of the submitted exams\r\n                            this.setOverallChartMedianDependingOfExamsIncluded(MedianType.OVERALL);\r\n                            this.showOverallMedian = false;\r\n                        }\r\n                        this.determineAndHighlightChartMedian(medianType);\r\n                    }\r\n                    this.isLoading = false;\r\n                    this.changeDetector.detectChanges();\r\n                    this.compareNewExamScoresCalculationWithOldCalculation(findExamScoresResponse.body!);\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n        });\r\n\r\n        // Update the view if the language was changed\r\n        this.languageChangeSubscription = this.languageHelper.language.subscribe(() => {\r\n            this.changeDetector.detectChanges();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.languageChangeSubscription) {\r\n            this.languageChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    toggleFilterForSubmittedExam() {\r\n        this.filterForSubmittedExams = !this.filterForSubmittedExams;\r\n        this.calculateFilterDependentStatistics();\r\n        const overallMedianType = this.filterForSubmittedExams ? MedianType.SUBMITTED : MedianType.OVERALL;\r\n        /*\r\n        if a grading scale exists that is not configured as bonus, we have to update the\r\n        overall median value as we only encounter submitted exams now.\r\n        For the median of all passed exams this is not necessary, as an exam can only pass\r\n        if it is submitted.\r\n         */\r\n        if (this.gradingScaleExists && !this.isBonus) {\r\n            this.setOverallChartMedianDependingOfExamsIncluded(overallMedianType);\r\n            this.showOverallMedian = false;\r\n            this.showPassedMedian = true;\r\n            this.determineAndHighlightChartMedian(MedianType.PASSED);\r\n        } else {\r\n            this.showOverallMedian = true;\r\n            this.determineAndHighlightChartMedian(overallMedianType);\r\n        }\r\n        this.updateValuesAccordingToFilter();\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    toggleFilterForNonEmptySubmission() {\r\n        this.filterForNonEmptySubmissions = !this.filterForNonEmptySubmissions;\r\n        this.calculateFilterDependentStatistics();\r\n        this.updateValuesAccordingToFilter();\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Calculate statistics on exercise group and exercise granularity. These statistics are filter dependent.\r\n     * @param exerciseGroupResults Data structure holding the aggregated points and number of participants\r\n     */\r\n    private calculateExerciseGroupStatistics(exerciseGroupResults: AggregatedExerciseGroupResult[]) {\r\n        for (const groupResult of exerciseGroupResults) {\r\n            // For average points for exercise groups\r\n            if (groupResult.noOfParticipantsWithFilter) {\r\n                groupResult.averagePoints = groupResult.totalPoints / groupResult.noOfParticipantsWithFilter;\r\n                groupResult.averagePercentage = (groupResult.averagePoints / groupResult.maxPoints) * 100;\r\n                if (this.gradingScaleExists) {\r\n                    const gradeStep = this.gradingSystemService.findMatchingGradeStep(this.gradingScale!.gradeSteps, groupResult.averagePercentage);\r\n                    groupResult.averageGrade = gradeStep!.gradeName;\r\n                }\r\n            }\r\n            // Calculate average points for exercises\r\n            groupResult.exerciseResults.forEach((exResult: AggregatedExerciseResult) => {\r\n                if (exResult.noOfParticipantsWithFilter) {\r\n                    exResult.averagePoints = exResult.totalPoints / exResult.noOfParticipantsWithFilter;\r\n                    exResult.averagePercentage = (exResult.averagePoints / exResult.maxPoints) * 100;\r\n                }\r\n            });\r\n        }\r\n        this.aggregatedExerciseGroupResults = exerciseGroupResults;\r\n    }\r\n\r\n    /**\r\n     * Calculates filter dependent exam statistics. Must be triggered if filter settings change.\r\n     * 1. The average points and number of participants for each exercise group and exercise\r\n     * 2. Distribution of scores\r\n     */\r\n    private calculateFilterDependentStatistics() {\r\n        this.noOfExamsFiltered = 0;\r\n        const scoresToVisualize: number[] = [];\r\n        const gradesWithBonusToVisualize: string[] = [];\r\n\r\n        // Create data structures holding the statistics for all exercise groups and exercises\r\n        const groupIdToGroupResults = new Map<number, AggregatedExerciseGroupResult>();\r\n        for (const exerciseGroup of this.exerciseGroups) {\r\n            const groupResult = new AggregatedExerciseGroupResult(exerciseGroup.id, exerciseGroup.title, exerciseGroup.maxPoints, exerciseGroup.numberOfParticipants);\r\n            // We initialize the data structure for exercises here as it can happen that no student was assigned to an exercise\r\n            exerciseGroup.containedExercises.forEach((exerciseInfo) => {\r\n                const type = declareExerciseType(exerciseInfo);\r\n                const exerciseResult = new AggregatedExerciseResult(exerciseInfo.exerciseId, exerciseInfo.title, exerciseInfo.maxPoints, exerciseInfo.numberOfParticipants, type!);\r\n                groupResult.exerciseResults.push(exerciseResult);\r\n            });\r\n            groupIdToGroupResults.set(exerciseGroup.id, groupResult);\r\n        }\r\n\r\n        // Calculate the total points and number of participants when filters apply for each exercise group and exercise\r\n        for (const studentResult of this.studentResults) {\r\n            // Do not take un-submitted exams into account for the exercise statistics if the option was set\r\n            if (!studentResult.submitted && this.filterForSubmittedExams) {\r\n                continue;\r\n            }\r\n            scoresToVisualize.push(studentResult.overallScoreAchieved ?? 0);\r\n            if (this.hasBonus) {\r\n                gradesWithBonusToVisualize.push(studentResult.gradeWithBonus?.finalGrade?.toString() ?? '');\r\n            }\r\n            this.noOfExamsFiltered++;\r\n            if (!studentResult.exerciseGroupIdToExerciseResult) {\r\n                continue;\r\n            }\r\n            const entries = Object.entries(studentResult.exerciseGroupIdToExerciseResult);\r\n\r\n            for (const [exGroupId, studentExerciseResult] of entries) {\r\n                // Ignore exercise results with only empty submission if the option was set\r\n                if (!studentExerciseResult.hasNonEmptySubmission && this.filterForNonEmptySubmissions) {\r\n                    continue;\r\n                }\r\n                // Update the exerciseGroup statistic\r\n                const exGroupResult = groupIdToGroupResults.get(Number(exGroupId));\r\n                if (!exGroupResult) {\r\n                    // This should never be thrown. Indicates that the information in the ExamScoresDTO is inconsistent\r\n                    throw new Error(`ExerciseGroup with id ${exGroupId} does not exist in this exam!`);\r\n                }\r\n                exGroupResult.noOfParticipantsWithFilter++;\r\n                exGroupResult.totalPoints += studentExerciseResult.achievedPoints!;\r\n\r\n                // Update the specific exercise statistic\r\n                const exerciseResult = exGroupResult.exerciseResults.find((exResult) => exResult.exerciseId === studentExerciseResult.exerciseId);\r\n                if (!exerciseResult) {\r\n                    // This should never be thrown. Indicates that the information in the ExamScoresDTO is inconsistent\r\n                    throw new Error(`Exercise with id ${studentExerciseResult.exerciseId} does not exist in this exam!`);\r\n                } else {\r\n                    exerciseResult.noOfParticipantsWithFilter++;\r\n                    exerciseResult.totalPoints += studentExerciseResult.achievedPoints!;\r\n                }\r\n            }\r\n        }\r\n        // Calculate exercise group and exercise statistics\r\n        const exerciseGroupResults = Array.from(groupIdToGroupResults.values());\r\n        this.calculateExerciseGroupStatistics(exerciseGroupResults);\r\n        this.scores = [...scoresToVisualize];\r\n        this.gradesWithBonus = gradesWithBonusToVisualize;\r\n    }\r\n\r\n    /**\r\n     * Calculates statistics on exam granularity for passed exams, submitted exams, and for all exams.\r\n     */\r\n    private calculateExamStatistics() {\r\n        let numberNonEmptySubmissions = 0;\r\n        let numberNonEmptySubmittedSubmissions = 0;\r\n\r\n        const studentPointsPassed: number[] = [];\r\n        const studentPointsSubmitted: number[] = [];\r\n        const studentPointsTotal: number[] = [];\r\n\r\n        const studentPointsPassedInFirstCorrectionRound: number[] = [];\r\n        const studentPointsSubmittedInFirstCorrectionRound: number[] = [];\r\n        const studentPointsTotalInFirstCorrectionRound: number[] = [];\r\n\r\n        const studentGradesPassed: number[] = [];\r\n        const studentGradesSubmitted: number[] = [];\r\n        const studentGradesTotal: number[] = [];\r\n\r\n        const studentGradesPassedInFirstCorrectionRound: number[] = [];\r\n        const studentGradesSubmittedInFirstCorrectionRound: number[] = [];\r\n        const studentGradesTotalInFirstCorrectionRound: number[] = [];\r\n\r\n        // Collect student points independent of the filter settings\r\n        for (const studentResult of this.studentResults) {\r\n            studentPointsTotal.push(studentResult.overallPointsAchieved!);\r\n            studentPointsTotalInFirstCorrectionRound.push(studentResult.overallPointsAchievedInFirstCorrection!);\r\n            if (studentResult.submitted) {\r\n                studentPointsSubmitted.push(studentResult.overallPointsAchieved!);\r\n                studentPointsSubmittedInFirstCorrectionRound.push(studentResult.overallPointsAchievedInFirstCorrection!);\r\n                if (studentResult.hasPassed) {\r\n                    studentPointsPassed.push(studentResult.overallPointsAchieved!);\r\n                    studentPointsPassedInFirstCorrectionRound.push(studentResult.overallPointsAchievedInFirstCorrection!);\r\n                }\r\n            }\r\n            if (studentResult.exerciseGroupIdToExerciseResult) {\r\n                const entries = Object.entries(studentResult.exerciseGroupIdToExerciseResult);\r\n                if (entries.some(([, exerciseResult]) => exerciseResult.hasNonEmptySubmission)) {\r\n                    numberNonEmptySubmissions += 1;\r\n                    if (studentResult.submitted) {\r\n                        numberNonEmptySubmittedSubmissions += 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.gradingScaleExists && this.hasNumericGrades) {\r\n                const grade = Number(studentResult.overallGrade);\r\n                const gradeInFirstCorrection = Number(studentResult.overallGradeInFirstCorrection);\r\n                studentGradesTotal.push(grade);\r\n                studentGradesTotalInFirstCorrectionRound.push(gradeInFirstCorrection);\r\n                if (studentResult.submitted) {\r\n                    studentGradesSubmitted.push(grade);\r\n                    studentGradesSubmittedInFirstCorrectionRound.push(gradeInFirstCorrection);\r\n                    if (studentResult.hasPassed) {\r\n                        studentGradesPassed.push(grade);\r\n                        studentGradesPassedInFirstCorrectionRound.push(gradeInFirstCorrection);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Calculate statistics for passed exams\r\n        let examStatistics = this.calculatePassedExamStatistics(\r\n            new AggregatedExamResult(),\r\n            studentPointsPassed,\r\n            studentPointsPassedInFirstCorrectionRound,\r\n            studentGradesPassed,\r\n            studentGradesPassedInFirstCorrectionRound,\r\n        );\r\n        // Calculate statistics for submitted exams\r\n        examStatistics = this.calculateSubmittedExamStatistics(\r\n            examStatistics,\r\n            studentPointsSubmitted,\r\n            studentPointsSubmittedInFirstCorrectionRound,\r\n            studentGradesSubmitted,\r\n            studentGradesSubmittedInFirstCorrectionRound,\r\n        );\r\n        // Calculate total statistics\r\n        this.aggregatedExamResults = this.calculateTotalExamStatistics(\r\n            examStatistics,\r\n            studentPointsTotal,\r\n            studentPointsTotalInFirstCorrectionRound,\r\n            studentGradesTotal,\r\n            studentGradesTotalInFirstCorrectionRound,\r\n        );\r\n        this.aggregatedExamResults.noOfExamsNonEmpty = numberNonEmptySubmissions;\r\n        this.aggregatedExamResults.noOfExamsSubmittedAndNotEmpty = numberNonEmptySubmittedSubmissions;\r\n        this.updateValuesAccordingToFilter();\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Calculates statistics like mean, median and standard deviation specifically for passed exams\r\n     */\r\n    private calculatePassedExamStatistics(\r\n        examStatistics: AggregatedExamResult,\r\n        studentPointsPassed: number[],\r\n        studentPointsPassedInFirstCorrectionRound: number[],\r\n        studentGradesPassed: number[],\r\n        studentGradesPassedInFirstCorrectionRound: number[],\r\n    ): AggregatedExamResult {\r\n        if (studentPointsPassed.length && this.gradingScaleExists && !this.isBonus) {\r\n            examStatistics.meanPointsPassed = mean(studentPointsPassed);\r\n            examStatistics.medianPassed = median(studentPointsPassed);\r\n            examStatistics.standardDeviationPassed = standardDeviation(studentPointsPassed);\r\n            examStatistics.noOfExamsFilteredForPassed = studentPointsPassed.length;\r\n            if (this.examScoreDTO.maxPoints) {\r\n                examStatistics.meanPointsRelativePassed = (examStatistics.meanPointsPassed / this.examScoreDTO.maxPoints) * 100;\r\n                examStatistics.medianRelativePassed = (examStatistics.medianPassed / this.examScoreDTO.maxPoints) * 100;\r\n                examStatistics.meanGradePassed = this.gradingSystemService.findMatchingGradeStep(this.gradingScale!.gradeSteps, examStatistics.meanPointsRelativePassed)!.gradeName;\r\n                examStatistics.medianGradePassed = this.gradingSystemService.findMatchingGradeStep(this.gradingScale!.gradeSteps, examStatistics.medianRelativePassed)!.gradeName;\r\n                examStatistics.standardGradeDeviationPassed = this.hasNumericGrades ? standardDeviation(studentGradesPassed) : undefined;\r\n            }\r\n            // Calculate statistics for the first assessments of passed exams if second correction exists\r\n            if (this.hasSecondCorrectionAndStarted) {\r\n                examStatistics.meanPointsPassedInFirstCorrection = mean(studentPointsPassedInFirstCorrectionRound);\r\n                examStatistics.medianPassedInFirstCorrection = median(studentPointsPassedInFirstCorrectionRound);\r\n                examStatistics.standardDeviationPassedInFirstCorrection = standardDeviation(studentPointsPassedInFirstCorrectionRound);\r\n                if (this.examScoreDTO.maxPoints) {\r\n                    examStatistics.meanPointsRelativePassedInFirstCorrection = (examStatistics.meanPointsPassedInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                    examStatistics.medianRelativePassedInFirstCorrection = (examStatistics.medianPassedInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                    examStatistics.meanGradePassedInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                        this.gradingScale!.gradeSteps,\r\n                        examStatistics.meanPointsRelativePassedInFirstCorrection,\r\n                    )!.gradeName;\r\n                    examStatistics.medianGradePassedInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                        this.gradingScale!.gradeSteps,\r\n                        examStatistics.medianRelativePassedInFirstCorrection,\r\n                    )!.gradeName;\r\n                    examStatistics.standardGradeDeviationPassedInFirstCorrection = this.hasNumericGrades ? standardDeviation(studentGradesPassedInFirstCorrectionRound) : undefined;\r\n                }\r\n            }\r\n        }\r\n        return examStatistics;\r\n    }\r\n\r\n    /**\r\n     * Calculates statistics like mean, median and standard deviation specifically for submitted exams\r\n     */\r\n    private calculateSubmittedExamStatistics(\r\n        examStatistics: AggregatedExamResult,\r\n        studentPointsSubmitted: number[],\r\n        studentPointsSubmittedInFirstCorrectionRound: number[],\r\n        studentGradesSubmitted: number[],\r\n        studentGradesSubmittedInFirstCorrectionRound: number[],\r\n    ): AggregatedExamResult {\r\n        if (studentPointsSubmitted.length) {\r\n            examStatistics.meanPointsSubmitted = mean(studentPointsSubmitted);\r\n            examStatistics.medianSubmitted = median(studentPointsSubmitted);\r\n            examStatistics.standardDeviationSubmitted = standardDeviation(studentPointsSubmitted);\r\n            examStatistics.noOfExamsSubmitted = studentPointsSubmitted.length;\r\n            if (this.examScoreDTO.maxPoints) {\r\n                examStatistics.meanPointsRelativeSubmitted = (examStatistics.meanPointsSubmitted / this.examScoreDTO.maxPoints) * 100;\r\n                examStatistics.medianRelativeSubmitted = (examStatistics.medianSubmitted / this.examScoreDTO.maxPoints) * 100;\r\n                if (this.gradingScaleExists) {\r\n                    examStatistics.meanGradeSubmitted = this.gradingSystemService.findMatchingGradeStep(\r\n                        this.gradingScale!.gradeSteps,\r\n                        examStatistics.meanPointsRelativeSubmitted,\r\n                    )!.gradeName;\r\n                    examStatistics.medianGradeSubmitted = this.gradingSystemService.findMatchingGradeStep(\r\n                        this.gradingScale!.gradeSteps,\r\n                        examStatistics.medianRelativeSubmitted,\r\n                    )!.gradeName;\r\n                    examStatistics.standardGradeDeviationSubmitted = this.hasNumericGrades ? standardDeviation(studentGradesSubmitted) : undefined;\r\n                }\r\n            }\r\n            // Calculate statistics for the first assessments of submitted exams if second correction exists\r\n            if (this.hasSecondCorrectionAndStarted) {\r\n                examStatistics.meanPointsInFirstCorrection = mean(studentPointsSubmittedInFirstCorrectionRound);\r\n                examStatistics.medianInFirstCorrection = median(studentPointsSubmittedInFirstCorrectionRound);\r\n                examStatistics.standardDeviationInFirstCorrection = standardDeviation(studentPointsSubmittedInFirstCorrectionRound);\r\n                if (this.examScoreDTO.maxPoints) {\r\n                    examStatistics.meanPointsRelativeInFirstCorrection = (examStatistics.meanPointsInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                    examStatistics.medianRelativeInFirstCorrection = (examStatistics.medianInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                    if (this.gradingScaleExists) {\r\n                        examStatistics.meanGradeInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                            this.gradingScale!.gradeSteps,\r\n                            examStatistics.meanPointsRelativeInFirstCorrection,\r\n                        )!.gradeName;\r\n                        examStatistics.medianGradeInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                            this.gradingScale!.gradeSteps,\r\n                            examStatistics.medianRelativeInFirstCorrection,\r\n                        )!.gradeName;\r\n                        examStatistics.standardGradeDeviationInFirstCorrection = this.hasNumericGrades\r\n                            ? standardDeviation(studentGradesSubmittedInFirstCorrectionRound)\r\n                            : undefined;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return examStatistics;\r\n    }\r\n\r\n    /**\r\n     * Calculates statistics like mean, median and standard deviation for all exams\r\n     */\r\n    private calculateTotalExamStatistics(\r\n        examStatistics: AggregatedExamResult,\r\n        studentPointsTotal: number[],\r\n        studentPointsTotalInFirstCorrectionRound: number[],\r\n        studentGradesTotal: number[],\r\n        studentGradesTotalInFirstCorrectionRound: number[],\r\n    ): AggregatedExamResult {\r\n        if (studentPointsTotal.length) {\r\n            examStatistics.meanPointsTotal = mean(studentPointsTotal);\r\n            examStatistics.medianTotal = median(studentPointsTotal);\r\n            examStatistics.standardDeviationTotal = standardDeviation(studentPointsTotal);\r\n            examStatistics.noOfRegisteredUsers = this.studentResults.length;\r\n            if (this.examScoreDTO.maxPoints) {\r\n                examStatistics.meanPointsRelativeTotal = (examStatistics.meanPointsTotal / this.examScoreDTO.maxPoints) * 100;\r\n                examStatistics.medianRelativeTotal = (examStatistics.medianTotal / this.examScoreDTO.maxPoints) * 100;\r\n                if (this.gradingScaleExists) {\r\n                    examStatistics.meanGradeTotal = this.gradingSystemService.findMatchingGradeStep(\r\n                        this.gradingScale!.gradeSteps,\r\n                        examStatistics.meanPointsRelativeTotal,\r\n                    )!.gradeName;\r\n                    examStatistics.medianGradeTotal = this.gradingSystemService.findMatchingGradeStep(this.gradingScale!.gradeSteps, examStatistics.medianRelativeTotal)!.gradeName;\r\n                    examStatistics.standardGradeDeviationTotal = this.hasNumericGrades ? standardDeviation(studentGradesTotal) : undefined;\r\n                }\r\n            }\r\n            // Calculate total statistics if second correction exists\r\n            if (this.hasSecondCorrectionAndStarted) {\r\n                examStatistics.meanPointsTotalInFirstCorrection = mean(studentPointsTotalInFirstCorrectionRound);\r\n                examStatistics.medianTotalInFirstCorrection = median(studentPointsTotalInFirstCorrectionRound);\r\n                examStatistics.standardDeviationTotalInFirstCorrection = standardDeviation(studentPointsTotalInFirstCorrectionRound);\r\n                if (this.examScoreDTO.maxPoints) {\r\n                    examStatistics.meanPointsRelativeTotalInFirstCorrection = (examStatistics.meanPointsTotalInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                    examStatistics.medianRelativeTotalInFirstCorrection = (examStatistics.medianTotalInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                    if (this.gradingScaleExists) {\r\n                        examStatistics.meanGradeTotalInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                            this.gradingScale!.gradeSteps,\r\n                            examStatistics.meanPointsRelativeTotalInFirstCorrection,\r\n                        )!.gradeName;\r\n                        examStatistics.medianGradeTotalInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                            this.gradingScale!.gradeSteps,\r\n                            examStatistics.medianRelativeTotalInFirstCorrection,\r\n                        )!.gradeName;\r\n                        examStatistics.standardGradeDeviationTotalInFirstCorrection = this.hasNumericGrades\r\n                            ? standardDeviation(studentGradesTotalInFirstCorrectionRound)\r\n                            : undefined;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return examStatistics;\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.examScoreDTO.studentResults, this.predicate, this.reverse);\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Method for exporting exam results\r\n     * @param customCsvOptions If present, a CSV file is exported, otherwise an Excel file.\r\n     */\r\n    exportExamResults(customCsvOptions?: CsvExportOptions) {\r\n        const headers = this.generateExportColumnNames();\r\n\r\n        const rows = this.studentResults.map((studentResult) => {\r\n            return this.convertToExportRow(studentResult, customCsvOptions);\r\n        });\r\n\r\n        if (customCsvOptions) {\r\n            this.exportAsCsv(headers, rows, customCsvOptions);\r\n        } else {\r\n            this.exportAsExcel(headers, rows);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds an Excel workbook and starts the download.\r\n     * @param keys The column names used for the export.\r\n     * @param rows The data rows that should be part of the Excel file.\r\n     */\r\n    exportAsExcel(keys: string[], rows: ExportRow[]) {\r\n        const workbook = XLSX.utils.book_new();\r\n        const ws = XLSX.utils.json_to_sheet(rows, { header: keys });\r\n        const worksheetName = 'Exam Scores';\r\n        XLSX.utils.book_append_sheet(workbook, ws, worksheetName);\r\n\r\n        const workbookProps = {\r\n            Title: `${this.examScoreDTO.title} Scores`,\r\n            Author: `Artemis ${VERSION ?? ''}`,\r\n        };\r\n        const fileName = `${this.examScoreDTO.title} Exam Results.xlsx`;\r\n        XLSX.writeFile(workbook, fileName, { Props: workbookProps, compression: true });\r\n    }\r\n\r\n    /**\r\n     * Builds the CSV from the rows and starts the download.\r\n     * @param headers The column names of the CSV.\r\n     * @param rows The data rows that should be part of the CSV.\r\n     * @param customOptions Custom csv options that should be used for export.\r\n     */\r\n    exportAsCsv(headers: string[], rows: ExportRow[], customOptions: CsvExportOptions) {\r\n        const options = {\r\n            showLabels: true,\r\n            showTitle: false,\r\n            filename: `${this.examScoreDTO.title} Exam Results`,\r\n            useTextFile: false,\r\n            useBom: true,\r\n            columnHeaders: headers,\r\n        };\r\n\r\n        const csvExportOptions = mkConfig(Object.assign(options, customOptions));\r\n        const csvData = generateCsv(csvExportOptions)(rows);\r\n        download(csvExportOptions)(csvData);\r\n    }\r\n\r\n    /**\r\n     * Localizes a number, e.g. switching the decimal separator\r\n     */\r\n    localize(numberToLocalize: number): string {\r\n        return this.localeConversionService.toLocaleString(numberToLocalize, this.course?.accuracyOfScores);\r\n    }\r\n\r\n    /**\r\n     * Generates the list of columns that should be part of the exported file.\r\n     */\r\n    private generateExportColumnNames(): Array<string> {\r\n        const headers = [NAME_KEY, USERNAME_KEY, EMAIL_KEY, REGISTRATION_NUMBER_KEY];\r\n        this.exerciseGroups.forEach((exerciseGroup) => {\r\n            headers.push(`${exerciseGroup.title} ${EXAM_ASSIGNED_EXERCISE}`);\r\n            headers.push(`${exerciseGroup.title} ${EXAM_ACHIEVED_POINTS}`);\r\n            headers.push(`${exerciseGroup.title} ${EXAM_ACHIEVED_SCORE}`);\r\n        });\r\n        headers.push(EXAM_OVERALL_POINTS_KEY);\r\n        headers.push(EXAM_OVERALL_SCORE_KEY);\r\n        if (this.gradingScaleExists) {\r\n            headers.push(this.isBonus ? BONUS_KEY : GRADE_KEY);\r\n            if (this.hasBonus) {\r\n                if (this.presentationScoreThreshold != undefined) {\r\n                    headers.push(`${PRESENTATION_SCORE_IN_BONUS_SOURCE_KEY} ${this.presentationScoreThreshold}`);\r\n                }\r\n                headers.push(this.hasBonus === BonusStrategy.POINTS ? BONUS_POINTS_KEY : BONUS_GRADE_KEY);\r\n                headers.push(FINAL_GRADE_KEY);\r\n            }\r\n        }\r\n        headers.push(EXAM_SUBMITTED);\r\n        if (this.gradingScaleExists && !this.isBonus) {\r\n            headers.push(EXAM_PASSED);\r\n        }\r\n\r\n        if (this.hasPlagiarismVerdicts) {\r\n            headers.push(PLAGIARISM_VERDICT_KEY);\r\n        }\r\n\r\n        if (this.hasPlagiarismVerdictsInBonusSource) {\r\n            headers.push(PLAGIARISM_VERDICT_IN_BONUS_SOURCE_KEY);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Constructs a new export row builder for an export row.\r\n     * @param csvExportOptions If present, constructs a CSV row builder with these options, otherwise an Excel row builder is returned.\r\n     */\r\n    private newRowBuilder(csvExportOptions?: CsvExportOptions): ExportRowBuilder {\r\n        if (csvExportOptions) {\r\n            return new CsvExportRowBuilder(csvExportOptions.decimalSeparator, this.course?.accuracyOfScores);\r\n        } else {\r\n            return new ExcelExportRowBuilder(this.course?.accuracyOfScores);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the export rows from a student's result\r\n     * @param studentResult\r\n     * @param csvExportOptions If present, this method generates a CSV row with these options, otherwise an Excel row is returned.\r\n     */\r\n    private convertToExportRow(studentResult: StudentResult, csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const rowData = this.newRowBuilder(csvExportOptions);\r\n\r\n        rowData.setUserInformation(studentResult.name, studentResult.login, studentResult.email, studentResult.registrationNumber);\r\n\r\n        this.exerciseGroups.forEach((exerciseGroup) => {\r\n            const exerciseResult = studentResult.exerciseGroupIdToExerciseResult?.[exerciseGroup.id];\r\n            if (exerciseResult) {\r\n                rowData.set(`${exerciseGroup.title} ${EXAM_ASSIGNED_EXERCISE}`, exerciseResult.title);\r\n                rowData.setPoints(`${exerciseGroup.title} ${EXAM_ACHIEVED_POINTS}`, exerciseResult.achievedPoints);\r\n                rowData.setScore(`${exerciseGroup.title} ${EXAM_ACHIEVED_SCORE}`, exerciseResult.achievedScore);\r\n            } else {\r\n                rowData.set(`${exerciseGroup.title} ${EXAM_ASSIGNED_EXERCISE}`, '');\r\n                rowData.set(`${exerciseGroup.title} ${EXAM_ACHIEVED_POINTS}`, '');\r\n                rowData.set(`${exerciseGroup.title} ${EXAM_ACHIEVED_SCORE}`, '');\r\n            }\r\n        });\r\n\r\n        rowData.setPoints(EXAM_OVERALL_POINTS_KEY, studentResult.overallPointsAchieved);\r\n        rowData.setScore(EXAM_OVERALL_SCORE_KEY, studentResult.overallScoreAchieved);\r\n        if (this.gradingScaleExists) {\r\n            rowData.set(this.isBonus ? BONUS_KEY : GRADE_KEY, studentResult.overallGrade);\r\n            if (this.hasBonus) {\r\n                if (this.presentationScoreThreshold != undefined) {\r\n                    rowData.set(`${PRESENTATION_SCORE_IN_BONUS_SOURCE_KEY} ${this.presentationScoreThreshold}`, studentResult.gradeWithBonus?.achievedPresentationScore);\r\n                }\r\n                rowData.set(this.hasBonus === BonusStrategy.POINTS ? BONUS_POINTS_KEY : BONUS_GRADE_KEY, studentResult.gradeWithBonus?.bonusGrade);\r\n                rowData.set(FINAL_GRADE_KEY, studentResult.gradeWithBonus?.finalGrade ?? studentResult.overallGrade);\r\n            }\r\n        }\r\n        rowData.set(EXAM_SUBMITTED, studentResult.submitted ? 'yes' : 'no');\r\n        if (this.gradingScaleExists && !this.isBonus) {\r\n            rowData.set(EXAM_PASSED, studentResult.hasPassed ? 'yes' : 'no');\r\n        }\r\n\r\n        if (this.hasPlagiarismVerdicts) {\r\n            rowData.set(PLAGIARISM_VERDICT_KEY, studentResult.mostSeverePlagiarismVerdict);\r\n        }\r\n\r\n        if (this.hasPlagiarismVerdictsInBonusSource) {\r\n            rowData.set(PLAGIARISM_VERDICT_IN_BONUS_SOURCE_KEY, studentResult.gradeWithBonus?.mostSeverePlagiarismVerdict);\r\n        }\r\n\r\n        return rowData.build();\r\n    }\r\n\r\n    /**\r\n     * Rounds given points according to the course specific rounding settings\r\n     * @param points the points that should be rounded\r\n     * @returns localized string representation of the rounded points\r\n     */\r\n    roundAndPerformLocalConversion(points: number | undefined): string {\r\n        return this.localize(roundValueSpecifiedByCourseSettings(points, this.course));\r\n    }\r\n\r\n    /**\r\n     * This method compares the exam scores computed via the two approaches on the server (one using\r\n     * participation -> submission -> result and the other one using the participationScores table)\r\n     * In the future we might switch to the server side method, so we use this method to detect discrepancies.\r\n     * @param examScoreDTOs the exam scores sent from the server (new calculation method)\r\n     */\r\n    private compareNewExamScoresCalculationWithOldCalculation(examScoreDTOs: ScoresDTO[]) {\r\n        if (!this.studentResults || !examScoreDTOs) {\r\n            return;\r\n        }\r\n        for (const examScoreDTO of examScoreDTOs) {\r\n            this.studentIdToExamScoreDTOs.set(examScoreDTO.studentId!, examScoreDTO);\r\n        }\r\n        for (const studentResult of this.studentResults) {\r\n            const overAllPoints = roundValueSpecifiedByCourseSettings(studentResult.overallPointsAchieved, this.course);\r\n            const overallScore = roundValueSpecifiedByCourseSettings(studentResult.overallScoreAchieved, this.course);\r\n\r\n            const regularCalculation = {\r\n                scoreAchieved: overallScore,\r\n                pointsAchieved: overAllPoints,\r\n                userId: studentResult.userId,\r\n                userLogin: studentResult.login,\r\n            };\r\n            // checking if the same as in the exam scores map\r\n            const examScoreDTO = this.studentIdToExamScoreDTOs.get(studentResult.userId);\r\n            if (!examScoreDTO) {\r\n                const errorMessage = `Exam scores not included in new calculation: ${JSON.stringify(regularCalculation)}`;\r\n                this.logErrorOnSentry(errorMessage);\r\n            } else {\r\n                examScoreDTO.scoreAchieved = roundValueSpecifiedByCourseSettings(examScoreDTO.scoreAchieved, this.course);\r\n                examScoreDTO.pointsAchieved = roundValueSpecifiedByCourseSettings(examScoreDTO.pointsAchieved, this.course);\r\n\r\n                if (Math.abs(examScoreDTO.pointsAchieved - regularCalculation.pointsAchieved) > 0.1) {\r\n                    const errorMessage = `Different exam points in new calculation. Regular Calculation: ${JSON.stringify(regularCalculation)}. New Calculation: ${JSON.stringify(\r\n                        examScoreDTO,\r\n                    )}`;\r\n                    this.logErrorOnSentry(errorMessage);\r\n                }\r\n                if (Math.abs(examScoreDTO.scoreAchieved - regularCalculation.scoreAchieved) > 0.1) {\r\n                    const errorMessage = `Different exam score in new calculation. Regular Calculation: ${JSON.stringify(regularCalculation)}. New Calculation : ${JSON.stringify(\r\n                        examScoreDTO,\r\n                    )}`;\r\n                    this.logErrorOnSentry(errorMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    logErrorOnSentry(errorMessage: string) {\r\n        captureException(new Error(errorMessage));\r\n    }\r\n\r\n    /**\r\n     * Formats the datalabel for every bar in order to satisfy the following pattern:\r\n     * number of submissions (percentage of submissions)\r\n     * @param submissionCount the number of submissions that fall in the grading step\r\n     * @returns string containing the number of submissions + (percentage of submissions)\r\n     */\r\n    formatDataLabel(submissionCount: number): string {\r\n        const percentage = this.noOfExamsFiltered && this.noOfExamsFiltered > 0 ? this.roundAndPerformLocalConversion((submissionCount * 100) / this.noOfExamsFiltered) : 0;\r\n        return submissionCount + ' (' + percentage + '%)';\r\n    }\r\n\r\n    /**\r\n     * Method that handles the toggling of a median highlighting in the chart.\r\n     * If no grading scale exists, the user can only toggle the overall score median.\r\n     * If a grading scale exists, the user can switch between the overall score median and the median of the scores of all passed exams.\r\n     * Per default, the latter is selected in this case.\r\n     * @param medianType an enum indicating if the user toggles the overall median or the passed median\r\n     */\r\n    toggleMedian(medianType: MedianType): void {\r\n        switch (medianType) {\r\n            case MedianType.PASSED:\r\n                this.showPassedMedian = !this.showPassedMedian;\r\n                // The user selects the passed median to be highlighted, therefore we deactivate the highlighting of the other one\r\n                if (this.showPassedMedian) {\r\n                    this.showOverallMedian = false;\r\n                }\r\n                break;\r\n            case MedianType.OVERALL:\r\n            case MedianType.SUBMITTED:\r\n                this.showOverallMedian = !this.showOverallMedian;\r\n                // The user selects the overall median to be highlighted, therefore we deactivate the highlighting of the other one\r\n                if (this.showOverallMedian) {\r\n                    this.showPassedMedian = false;\r\n                }\r\n                break;\r\n        }\r\n        if (this.showPassedMedian || this.showOverallMedian) {\r\n            this.determineAndHighlightChartMedian(medianType);\r\n        } else {\r\n            this.highlightedValue = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that determines the median to be highlighted in the chart\r\n     * It identifies the bar representing the corresponding median type and\r\n     * highlights it by making all other chart bars a bit more transparent\r\n     * @param medianType enum representing the type of median to be highlighted\r\n     */\r\n    private determineAndHighlightChartMedian(medianType: MedianType): void {\r\n        let chartMedian;\r\n        this.lastCalculatedMedianType = medianType;\r\n        if (medianType === MedianType.PASSED) {\r\n            const passedMedian = this.aggregatedExamResults.medianRelativePassed;\r\n            chartMedian = passedMedian ? roundValueSpecifiedByCourseSettings(passedMedian, this.course) : 0;\r\n            this.showPassedMedian = true;\r\n        } else {\r\n            this.setOverallChartMedianDependingOfExamsIncluded(medianType);\r\n            chartMedian = this.overallChartMedian;\r\n            this.showOverallMedian = true;\r\n        }\r\n        this.highlightedValue = chartMedian;\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that sets overallChartMedian depending on if only submitted exams are included or not\r\n     * @param medianType enum indicating if the median of all exams should be shown or only of submitted exams\r\n     */\r\n    private setOverallChartMedianDependingOfExamsIncluded(medianType: MedianType): void {\r\n        if (medianType === MedianType.OVERALL) {\r\n            const overallMedian = this.aggregatedExamResults.medianRelativeTotal;\r\n            this.overallChartMedian = overallMedian ? roundValueSpecifiedByCourseSettings(overallMedian, this.course) : 0;\r\n        } else {\r\n            const submittedMedian = this.aggregatedExamResults.medianRelativeSubmitted;\r\n            this.overallChartMedian = submittedMedian ? roundValueSpecifiedByCourseSettings(submittedMedian, this.course) : 0;\r\n        }\r\n        this.overallChartMedianType = medianType;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that updates the statistics table above the score distribution depending on the current filter state\r\n     * The filter of interest is determined by the two boolean flags {@link ExamScoresComponent#filterForSubmittedExams} and\r\n     * {@link ExamScoresComponent#filterForNonEmptySubmissions}\r\n     */\r\n    private updateValuesAccordingToFilter(): void {\r\n        this.tableState.absoluteAmountOfSubmittedExams = this.aggregatedExamResults.noOfExamsSubmitted;\r\n        this.tableState.absoluteAmountOfTotalExams = this.aggregatedExamResults.noOfRegisteredUsers;\r\n        let denominator: number;\r\n        if (this.filterForSubmittedExams && this.filterForNonEmptySubmissions) {\r\n            denominator = this.aggregatedExamResults.noOfExamsSubmittedAndNotEmpty;\r\n            this.tableState.absoluteAmountOfSubmittedExams = this.aggregatedExamResults.noOfExamsSubmittedAndNotEmpty;\r\n            this.tableState.absoluteAmountOfTotalExams = this.aggregatedExamResults.noOfExamsSubmittedAndNotEmpty;\r\n            this.determineSubmittedAndNonEmptyValues();\r\n            this.setValuesForSubmittedAndNonEmptyFilter(this.tableState);\r\n        } else if (this.filterForSubmittedExams && !this.filterForNonEmptySubmissions) {\r\n            denominator = this.aggregatedExamResults.noOfExamsSubmitted;\r\n            this.tableState.absoluteAmountOfTotalExams = this.aggregatedExamResults.noOfExamsSubmitted;\r\n            this.setValuesForSubmittedFilter(this.tableState);\r\n        } else if (!this.filterForSubmittedExams && this.filterForNonEmptySubmissions) {\r\n            denominator = this.aggregatedExamResults.noOfExamsNonEmpty;\r\n            this.tableState.absoluteAmountOfSubmittedExams = this.aggregatedExamResults.noOfExamsSubmittedAndNotEmpty;\r\n            this.tableState.absoluteAmountOfTotalExams = this.aggregatedExamResults.noOfExamsNonEmpty;\r\n            this.determineNonEmptyValues();\r\n            this.determineSubmittedAndNonEmptyValues();\r\n            this.setValuesForNonEmptyFilter(this.tableState);\r\n        } else {\r\n            denominator = this.aggregatedExamResults.noOfRegisteredUsers;\r\n            this.setValuesForNoFilter(this.tableState);\r\n        }\r\n\r\n        this.tableState.relativeAmountOfPassedExams =\r\n            denominator > 0 ? this.roundAndPerformLocalConversion((this.aggregatedExamResults.noOfExamsFilteredForPassed / denominator) * 100) : '-';\r\n        this.tableState.relativeAmountOfSubmittedExams =\r\n            denominator > 0 ? this.roundAndPerformLocalConversion((this.tableState.absoluteAmountOfSubmittedExams / denominator) * 100) : '-';\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that sets the variants including only submitted AND not empty exams for all affected statistical values\r\n     */\r\n    private determineSubmittedAndNonEmptyValues(): void {\r\n        // If one value is not undefined, all other values have been computed as well and we take the cached results instead of recalculating every time\r\n        if (this.aggregatedExamResults.meanPointsSubmittedAndNonEmpty) {\r\n            return;\r\n        }\r\n        const overallPointsSubmittedAndNonEmpty: number[] = [];\r\n        const pointsSubmittedAndNonEmptyInFirstCorrection: number[] = [];\r\n        let submittedAndNonEmptyGrades: number[] = [];\r\n        let submittedAndNonEmptyGradesInFirstCorrection: number[] = [];\r\n        this.studentResults.forEach((result) => {\r\n            if (result.exerciseGroupIdToExerciseResult) {\r\n                const hasAtLeastOneSubmission = Object.entries(result.exerciseGroupIdToExerciseResult).some(([, exerciseResult]) => exerciseResult.hasNonEmptySubmission);\r\n                if (result.submitted && hasAtLeastOneSubmission) {\r\n                    overallPointsSubmittedAndNonEmpty.push(result.overallPointsAchieved ?? 0);\r\n                    submittedAndNonEmptyGrades = this.collectOverallGrades(submittedAndNonEmptyGrades, result);\r\n                    if (this.hasSecondCorrectionAndStarted) {\r\n                        pointsSubmittedAndNonEmptyInFirstCorrection.push(result.overallPointsAchievedInFirstCorrection ?? 0);\r\n                        submittedAndNonEmptyGradesInFirstCorrection = this.collectOverallGradesInFirstCorrection(submittedAndNonEmptyGradesInFirstCorrection, result);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.determineMeanMedianAndStandardDeviationSubmittedAndNonEmpty(overallPointsSubmittedAndNonEmpty);\r\n        this.determineMeanMedianAndStandardDeviationSubmittedAndNonEmptyInFirstCorrection(pointsSubmittedAndNonEmptyInFirstCorrection);\r\n        if (this.gradingScaleExists && !this.isBonus) {\r\n            this.determineGradesSubmittedAndNonEmpty(overallPointsSubmittedAndNonEmpty.length > 0);\r\n            if (this.hasNumericGrades) {\r\n                this.aggregatedExamResults.standardGradeDeviationSubmittedAndNonEmpty =\r\n                    submittedAndNonEmptyGrades.length > 0 ? standardDeviation(submittedAndNonEmptyGrades) : undefined;\r\n                if (this.hasSecondCorrectionAndStarted) {\r\n                    this.aggregatedExamResults.standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection =\r\n                        submittedAndNonEmptyGradesInFirstCorrection.length > 0 ? standardDeviation(submittedAndNonEmptyGradesInFirstCorrection) : undefined;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets mean and median points and scores and the standard deviation in {@link ExamScoresComponent#aggregatedExamResults} if only submitted and non empty\r\n     * student exams are considered\r\n     * @param overallPointsSubmittedAndNonEmpty array containing the overall points of every submitted and non-empty student exam\r\n     */\r\n    private determineMeanMedianAndStandardDeviationSubmittedAndNonEmpty(overallPointsSubmittedAndNonEmpty: number[]): void {\r\n        if (overallPointsSubmittedAndNonEmpty.length > 0) {\r\n            this.aggregatedExamResults.meanPointsSubmittedAndNonEmpty = mean(overallPointsSubmittedAndNonEmpty);\r\n            this.aggregatedExamResults.medianSubmittedAndNonEmpty = median(overallPointsSubmittedAndNonEmpty);\r\n            if (this.examScoreDTO.maxPoints) {\r\n                this.aggregatedExamResults.meanScoreSubmittedAndNonEmpty = (this.aggregatedExamResults.meanPointsSubmittedAndNonEmpty / this.examScoreDTO.maxPoints) * 100;\r\n                this.aggregatedExamResults.medianScoreSubmittedAndNonEmpty = (this.aggregatedExamResults.medianSubmittedAndNonEmpty / this.examScoreDTO.maxPoints) * 100;\r\n            }\r\n            this.aggregatedExamResults.standardDeviationSubmittedAndNonEmpty = standardDeviation(overallPointsSubmittedAndNonEmpty);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets mean and median points and scores and the standard deviation in {@link ExamScoresComponent#aggregatedExamResults} after first correction\r\n     * if only submitted and non empty student exams are considered\r\n     * @param pointsSubmittedAndNonEmptyInFirstCorrection array containing the overall points of every submitted and non-empty student exam after the first correction round\r\n     */\r\n    private determineMeanMedianAndStandardDeviationSubmittedAndNonEmptyInFirstCorrection(pointsSubmittedAndNonEmptyInFirstCorrection: number[]): void {\r\n        if (this.hasSecondCorrectionAndStarted && pointsSubmittedAndNonEmptyInFirstCorrection.length > 0) {\r\n            this.aggregatedExamResults.meanPointsSubmittedAndNonEmptyInFirstCorrection = mean(pointsSubmittedAndNonEmptyInFirstCorrection);\r\n            this.aggregatedExamResults.medianSubmittedAndNonEmptyInFirstCorrection = median(pointsSubmittedAndNonEmptyInFirstCorrection);\r\n            if (this.examScoreDTO.maxPoints) {\r\n                this.aggregatedExamResults.meanScoreSubmittedAndNonEmptyInFirstCorrection =\r\n                    (this.aggregatedExamResults.meanPointsSubmittedAndNonEmptyInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                this.aggregatedExamResults.medianScoreSubmittedAndNonEmptyInFirstCorrection =\r\n                    (this.aggregatedExamResults.medianSubmittedAndNonEmptyInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n            }\r\n            this.aggregatedExamResults.standardDeviationSubmittedAndNonEmptyInFirstCorrection = standardDeviation(pointsSubmittedAndNonEmptyInFirstCorrection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets mean and median grades in {@link ExamScoresComponent#aggregatedExamResults} if only submitted and non empty\r\n     * student exams are considered.\r\n     * This includes the corresponding grades after the first correction round if appropriate\r\n     * @param atLeastOneExam indicates whether at least one student exam has been submitted and is not empty\r\n     */\r\n    private determineGradesSubmittedAndNonEmpty(atLeastOneExam: boolean): void {\r\n        if (atLeastOneExam) {\r\n            this.aggregatedExamResults.meanGradeSubmittedAndNonEmpty = this.gradingSystemService.findMatchingGradeStep(\r\n                this.gradingScale!.gradeSteps,\r\n                this.aggregatedExamResults.meanScoreSubmittedAndNonEmpty,\r\n            )!.gradeName;\r\n\r\n            this.aggregatedExamResults.medianGradeSubmittedAndNonEmpty = this.gradingSystemService.findMatchingGradeStep(\r\n                this.gradingScale!.gradeSteps,\r\n                this.aggregatedExamResults.medianScoreSubmittedAndNonEmpty,\r\n            )!.gradeName;\r\n            if (this.hasSecondCorrectionAndStarted) {\r\n                this.aggregatedExamResults.meanGradeSubmittedAndNonEmptyInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                    this.gradingScale!.gradeSteps,\r\n                    this.aggregatedExamResults.meanScoreSubmittedAndNonEmptyInFirstCorrection,\r\n                )!.gradeName;\r\n\r\n                this.aggregatedExamResults.medianGradeSubmittedAndNonEmptyInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                    this.gradingScale!.gradeSteps,\r\n                    this.aggregatedExamResults.medianScoreSubmittedAndNonEmptyInFirstCorrection!,\r\n                )!.gradeName;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that sets the variants including only not empty exams for all affected statistical values\r\n     */\r\n    private determineNonEmptyValues(): void {\r\n        if (this.aggregatedExamResults.meanPointsNonEmpty) {\r\n            return;\r\n        }\r\n        const overallPointsNonEmpty: number[] = [];\r\n        const pointsNonEmptyInFirstCorrection: number[] = [];\r\n        let nonEmptyGrades: number[] = [];\r\n        let nonEmptyGradesInFirstCorrection: number[] = [];\r\n        this.studentResults.forEach((result) => {\r\n            if (result.exerciseGroupIdToExerciseResult) {\r\n                const hasAtLeastOneSubmission = Object.entries(result.exerciseGroupIdToExerciseResult).some(([, exerciseResult]) => exerciseResult.hasNonEmptySubmission);\r\n                if (hasAtLeastOneSubmission) {\r\n                    overallPointsNonEmpty.push(result.overallPointsAchieved ?? 0);\r\n                    nonEmptyGrades = this.collectOverallGrades(nonEmptyGrades, result);\r\n                    if (this.hasSecondCorrectionAndStarted) {\r\n                        pointsNonEmptyInFirstCorrection.push(result.overallPointsAchievedInFirstCorrection ?? 0);\r\n                        nonEmptyGradesInFirstCorrection = this.collectOverallGradesInFirstCorrection(nonEmptyGradesInFirstCorrection, result);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.determineMeanMedianAndStandardDeviationNonEmpty(overallPointsNonEmpty);\r\n        this.determineMeanMedianAndStandardDeviationNonEmptyInFirstCorrection(pointsNonEmptyInFirstCorrection);\r\n        if (this.gradingScale && !this.isBonus) {\r\n            this.determineGradesNonEmpty(overallPointsNonEmpty.length > 0);\r\n            if (this.hasNumericGrades) {\r\n                this.aggregatedExamResults.standardGradeDeviationNonEmpty = nonEmptyGrades.length > 0 ? standardDeviation(nonEmptyGrades) : undefined;\r\n                if (this.hasSecondCorrectionAndStarted) {\r\n                    this.aggregatedExamResults.standardGradeDeviationNonEmptyInFirstCorrection =\r\n                        nonEmptyGradesInFirstCorrection.length > 0 ? standardDeviation(nonEmptyGradesInFirstCorrection) : undefined;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets mean and median points and scores and the standard deviation in {@link ExamScoresComponent#aggregatedExamResults} if only non empty\r\n     * student exams are considered\r\n     * @param overallPointsNonEmpty array containing the overall points of every non-empty student exam\r\n     */\r\n    private determineMeanMedianAndStandardDeviationNonEmpty(overallPointsNonEmpty: number[]): void {\r\n        if (overallPointsNonEmpty.length > 0) {\r\n            this.aggregatedExamResults.meanPointsNonEmpty = mean(overallPointsNonEmpty);\r\n            this.aggregatedExamResults.medianNonEmpty = median(overallPointsNonEmpty);\r\n            if (this.examScoreDTO.maxPoints) {\r\n                this.aggregatedExamResults.meanScoreNonEmpty = (this.aggregatedExamResults.meanPointsNonEmpty / this.examScoreDTO.maxPoints) * 100;\r\n                this.aggregatedExamResults.medianScoreNonEmpty = (this.aggregatedExamResults.medianNonEmpty / this.examScoreDTO.maxPoints) * 100;\r\n            }\r\n            this.aggregatedExamResults.standardDeviationNonEmpty = standardDeviation(overallPointsNonEmpty);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets mean and median points and scores and the standard deviation in {@link ExamScoresComponent#aggregatedExamResults} after first correction\r\n     * if only non empty student exams are considered\r\n     * @param pointsNonEmptyInFirstCorrection array containing the overall points of every non-empty student exam after the first correction round\r\n     */\r\n    private determineMeanMedianAndStandardDeviationNonEmptyInFirstCorrection(pointsNonEmptyInFirstCorrection: number[]): void {\r\n        if (this.hasSecondCorrectionAndStarted && pointsNonEmptyInFirstCorrection.length > 0) {\r\n            this.aggregatedExamResults.meanPointsNonEmptyInFirstCorrection = mean(pointsNonEmptyInFirstCorrection);\r\n            this.aggregatedExamResults.medianNonEmptyInFirstCorrection = median(pointsNonEmptyInFirstCorrection);\r\n            if (this.examScoreDTO.maxPoints) {\r\n                this.aggregatedExamResults.meanScoreNonEmptyInFirstCorrection =\r\n                    (this.aggregatedExamResults.meanPointsNonEmptyInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n                this.aggregatedExamResults.medianScoreNonEmptyInFirstCorrection = (this.aggregatedExamResults.medianNonEmptyInFirstCorrection / this.examScoreDTO.maxPoints) * 100;\r\n            }\r\n            this.aggregatedExamResults.standardDeviationNonEmptyInFirstCorrection = standardDeviation(pointsNonEmptyInFirstCorrection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets mean and median grades in {@link ExamScoresComponent#aggregatedExamResults} if only non empty\r\n     * student exams are considered.\r\n     * This includes the corresponding grades after the first correction round if appropriate\r\n     * @param atLeastOneExam indicates whether at least one student exam is not empty\r\n     */\r\n    private determineGradesNonEmpty(atLeastOneExam: boolean): void {\r\n        if (atLeastOneExam) {\r\n            this.aggregatedExamResults.meanGradeNonEmpty = this.gradingSystemService.findMatchingGradeStep(\r\n                this.gradingScale!.gradeSteps,\r\n                this.aggregatedExamResults.meanScoreNonEmpty,\r\n            )!.gradeName;\r\n\r\n            this.aggregatedExamResults.medianGradeNonEmpty = this.gradingSystemService.findMatchingGradeStep(\r\n                this.gradingScale!.gradeSteps,\r\n                this.aggregatedExamResults.medianScoreNonEmpty,\r\n            )!.gradeName;\r\n            if (this.hasSecondCorrectionAndStarted) {\r\n                this.aggregatedExamResults.meanGradeNonEmptyInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                    this.gradingScale!.gradeSteps,\r\n                    this.aggregatedExamResults.meanScoreNonEmptyInFirstCorrection,\r\n                )!.gradeName;\r\n\r\n                this.aggregatedExamResults.medianGradeNonEmptyInFirstCorrection = this.gradingSystemService.findMatchingGradeStep(\r\n                    this.gradingScale!.gradeSteps,\r\n                    this.aggregatedExamResults.medianScoreNonEmptyInFirstCorrection,\r\n                )!.gradeName;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method in order to collect all numeric overall grades for the exam\r\n     * @param grades the currently collected overall grades\r\n     * @param result the result containing a numeric or not numeric overall grade\r\n     * @returns updated array of collected grades\r\n     */\r\n    private collectOverallGrades(grades: number[], result: StudentResult): number[] {\r\n        if (this.gradingScaleExists && this.hasNumericGrades) {\r\n            grades.push(Number(result.overallGrade));\r\n        }\r\n        return grades;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method in order to collect all numeric grades after first correction round for the exam\r\n     * @param grades the currently collected grades after first correction round\r\n     * @param result the result containing a numeric or not numeric grade after first correction round\r\n     * @returns updated array of collected grades\r\n     */\r\n    private collectOverallGradesInFirstCorrection(grades: number[], result: StudentResult): number[] {\r\n        if (this.gradingScaleExists && this.hasNumericGrades) {\r\n            grades.push(Number(result.overallGradeInFirstCorrection));\r\n        }\r\n        return grades;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding values of {@link ExamScoresComponent#aggregatedExamResults} to the table state if both filter options are activated\r\n     * @param tableState object containing the values currently displayed by the table\r\n     */\r\n    private setValuesForSubmittedAndNonEmptyFilter(tableState: TableState): void {\r\n        this.setAverageValuesForSubmittedAndNonEmptyFilter(tableState);\r\n        this.setMedianValuesForSubmittedAndNonEmptyFilter(tableState);\r\n        this.setStandardDeviationForSubmittedAndNonEmptyFilter(tableState);\r\n    }\r\n\r\n    /**\r\n     * Sets all average values to the table state if both filter options are activated\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setAverageValuesForSubmittedAndNonEmptyFilter(tableState: TableState): void {\r\n        const averagePointsSubmittedAndNonEmpty = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsSubmittedAndNonEmpty);\r\n        const averagePointsSubmittedAndNonEmptyInFirstCorrection = this.roundAndLocalizeStatisticalValue(\r\n            this.aggregatedExamResults.meanPointsSubmittedAndNonEmptyInFirstCorrection,\r\n        );\r\n        const averageScoreSubmittedAndNonEmpty = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanScoreSubmittedAndNonEmpty);\r\n        const averageScoreSubmittedAndNonEmptyInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanScoreSubmittedAndNonEmptyInFirstCorrection);\r\n        const averageGradeSubmittedAndNonEmpty = this.aggregatedExamResults.meanGradeSubmittedAndNonEmpty ?? '-';\r\n        const averageGradeSubmittedAndNonEmptyInFirstCorrection = this.aggregatedExamResults.meanGradeSubmittedAndNonEmptyInFirstCorrection ?? '-';\r\n        tableState.averagePointsSubmitted = averagePointsSubmittedAndNonEmpty;\r\n        tableState.averagePointsTotal = averagePointsSubmittedAndNonEmpty;\r\n        tableState.averagePointsSubmittedInFirstCorrection = averagePointsSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.averagePointsTotalInFirstCorrection = averagePointsSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.averageScoreSubmitted = averageScoreSubmittedAndNonEmpty;\r\n        tableState.averageScoreTotal = averageScoreSubmittedAndNonEmpty;\r\n        tableState.averageScoreSubmittedInFirstCorrection = averageScoreSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.averageScoreTotalInFirstCorrection = averageScoreSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.averageGradeSubmitted = averageGradeSubmittedAndNonEmpty;\r\n        tableState.averageGradeTotal = averageGradeSubmittedAndNonEmpty;\r\n        tableState.averageGradeSubmittedInFirstCorrection = averageGradeSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.averageGradeTotalInFirstCorrection = averageGradeSubmittedAndNonEmptyInFirstCorrection;\r\n    }\r\n\r\n    /**\r\n     * Sets all median values to the table state if both filter options are activated\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setMedianValuesForSubmittedAndNonEmptyFilter(tableState: TableState): void {\r\n        const medianPointsSubmittedAndNonEmpty = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianSubmittedAndNonEmpty);\r\n        const medianPointsSubmittedAndNonEmptyInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianSubmittedAndNonEmptyInFirstCorrection);\r\n        const medianScoreSubmittedAndNonEmpty = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianScoreSubmittedAndNonEmpty);\r\n        const medianScoreSubmittedAndNonEmptyInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianScoreSubmittedAndNonEmptyInFirstCorrection);\r\n        const medianGradeSubmittedAndNonEmpty = this.aggregatedExamResults.medianGradeSubmittedAndNonEmpty ?? '-';\r\n        const medianGradeSubmittedAndNonEmptyInFirstCorrection = this.aggregatedExamResults.medianGradeSubmittedAndNonEmptyInFirstCorrection ?? '-';\r\n        tableState.medianPointsSubmitted = medianPointsSubmittedAndNonEmpty;\r\n        tableState.medianPointsTotal = medianPointsSubmittedAndNonEmpty;\r\n        tableState.medianPointsSubmittedInFirstCorrection = medianPointsSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.medianPointsTotalInFirstCorrection = medianPointsSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.medianScoreSubmitted = medianScoreSubmittedAndNonEmpty;\r\n        tableState.medianScoreTotal = medianScoreSubmittedAndNonEmpty;\r\n        tableState.medianScoreSubmittedInFirstCorrection = medianScoreSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.medianScoreTotalInFirstCorrection = medianScoreSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.medianGradeSubmitted = medianGradeSubmittedAndNonEmpty;\r\n        tableState.medianGradeTotal = medianGradeSubmittedAndNonEmpty;\r\n        tableState.medianGradeSubmittedInFirstCorrection = medianGradeSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.medianGradeTotalInFirstCorrection = medianGradeSubmittedAndNonEmptyInFirstCorrection;\r\n    }\r\n\r\n    /**\r\n     * Sets all standard deviations to the table state if both filter options are activated\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setStandardDeviationForSubmittedAndNonEmptyFilter(tableState: TableState): void {\r\n        const standardDeviationSubmittedAndNonEmpty = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationSubmittedAndNonEmpty);\r\n        const standardDeviationSubmittedAndNonEmptyInFirstCorrection = this.roundAndLocalizeStatisticalValue(\r\n            this.aggregatedExamResults.standardDeviationSubmittedAndNonEmptyInFirstCorrection,\r\n        );\r\n        const standardGradeDeviationSubmittedAndNonEmpty = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationSubmittedAndNonEmpty);\r\n        const standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection = this.roundAndLocalizeStatisticalValue(\r\n            this.aggregatedExamResults.standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection,\r\n        );\r\n        tableState.standardDeviationSubmitted = standardDeviationSubmittedAndNonEmpty;\r\n        tableState.standardDeviationTotal = standardDeviationSubmittedAndNonEmpty;\r\n        tableState.standardDeviationSubmittedInFirstCorrection = standardDeviationSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.standardDeviationTotalInFirstCorrection = standardDeviationSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.standardGradeDeviationSubmitted = standardGradeDeviationSubmittedAndNonEmpty;\r\n        tableState.standardGradeDeviationTotal = standardGradeDeviationSubmittedAndNonEmpty;\r\n        tableState.standardGradeDeviationSubmittedInFirstCorrection = standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection;\r\n        tableState.standardGradeDeviationTotalInFirstCorrection = standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding values of {@link ExamScoresComponent#aggregatedExamResults} to the table state if only not empty exams should be included in calculation\r\n     * @param tableState object containing the values currently displayed by the table\r\n     */\r\n    private setValuesForNonEmptyFilter(tableState: TableState): void {\r\n        this.setAverageValuesForNonEmptyFilter(tableState);\r\n        this.setMedianValuesForNonEmptyFilter(tableState);\r\n        this.setStandardDeviationForNonEmptyFilter(tableState);\r\n    }\r\n\r\n    /**\r\n     * Sets all average values to the table state if only not empty exams should be included in calculation\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setAverageValuesForNonEmptyFilter(tableState: TableState): void {\r\n        tableState.averagePointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsSubmittedAndNonEmpty);\r\n        tableState.averagePointsTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsNonEmpty);\r\n        tableState.averagePointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsSubmittedAndNonEmptyInFirstCorrection);\r\n        tableState.averageGradeTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsNonEmptyInFirstCorrection);\r\n        tableState.averageScoreSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanScoreSubmittedAndNonEmpty);\r\n        tableState.averageScoreTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanScoreNonEmpty);\r\n        tableState.averageScoreSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanScoreSubmittedAndNonEmptyInFirstCorrection);\r\n        tableState.averageScoreTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanScoreNonEmptyInFirstCorrection);\r\n        tableState.averageGradeSubmitted = this.aggregatedExamResults.meanGradeSubmittedAndNonEmpty ?? '-';\r\n        tableState.averageGradeTotal = this.aggregatedExamResults.meanGradeNonEmpty ?? '-';\r\n        tableState.averageGradeSubmittedInFirstCorrection = this.aggregatedExamResults.meanGradeSubmittedAndNonEmptyInFirstCorrection ?? '-';\r\n        tableState.averageGradeTotalInFirstCorrection = this.aggregatedExamResults.meanGradeNonEmptyInFirstCorrection ?? '-';\r\n    }\r\n\r\n    /**\r\n     * Sets all median values to the table state if only not empty exams should be included in calculation\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setMedianValuesForNonEmptyFilter(tableState: TableState): void {\r\n        tableState.medianPointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianSubmittedAndNonEmpty);\r\n        tableState.medianPointsTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianNonEmpty);\r\n        tableState.medianPointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianSubmittedAndNonEmptyInFirstCorrection);\r\n        tableState.medianPointsTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianNonEmptyInFirstCorrection);\r\n        tableState.medianScoreSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianScoreSubmittedAndNonEmpty);\r\n        tableState.medianScoreTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianScoreNonEmpty);\r\n        tableState.medianScoreSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianScoreSubmittedAndNonEmptyInFirstCorrection);\r\n        tableState.medianScoreTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianScoreNonEmptyInFirstCorrection);\r\n        tableState.medianGradeSubmitted = this.aggregatedExamResults.medianGradeSubmittedAndNonEmpty ?? '-';\r\n        tableState.medianGradeTotal = this.aggregatedExamResults.medianGradeNonEmpty ?? '-';\r\n        tableState.medianGradeSubmittedInFirstCorrection = this.aggregatedExamResults.medianGradeSubmittedAndNonEmptyInFirstCorrection ?? '-';\r\n        tableState.medianGradeTotalInFirstCorrection = this.aggregatedExamResults.medianGradeTotalInFirstCorrection ?? '-';\r\n    }\r\n\r\n    /**\r\n     * Sets all standard deviations to the table state if only not empty exams should be included in calculation\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setStandardDeviationForNonEmptyFilter(tableState: TableState): void {\r\n        tableState.standardDeviationSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationSubmittedAndNonEmpty);\r\n        tableState.standardDeviationTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationNonEmpty);\r\n        tableState.standardDeviationSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(\r\n            this.aggregatedExamResults.standardDeviationSubmittedAndNonEmptyInFirstCorrection,\r\n        );\r\n        tableState.standardDeviationTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationNonEmptyInFirstCorrection);\r\n        tableState.standardGradeDeviationSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationSubmittedAndNonEmpty);\r\n        tableState.standardGradeDeviationTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationNonEmpty);\r\n        tableState.standardGradeDeviationSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(\r\n            this.aggregatedExamResults.standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection,\r\n        );\r\n        tableState.standardGradeDeviationTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationNonEmptyInFirstCorrection);\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding values of {@link ExamScoresComponent#aggregatedExamResults} to the table state if only submitted exams should be included in calculation\r\n     * @param tableState object containing the values currently displayed by the table\r\n     */\r\n    private setValuesForSubmittedFilter(tableState: TableState): void {\r\n        this.setAverageValuesForSubmittedFilter(tableState);\r\n        this.setMedianValuesForSubmittedFilter(tableState);\r\n        this.setStandardDeviationForSubmittedFilter(tableState);\r\n    }\r\n\r\n    /**\r\n     * Sets all average values to the table state if only submitted exams should be included in calculation\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setAverageValuesForSubmittedFilter(tableState: TableState): void {\r\n        const averagePointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsSubmitted);\r\n        const averagePointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsInFirstCorrection);\r\n        const averageScoreSubmitted = this.roundAndPerformLocalConversion(this.aggregatedExamResults.meanPointsRelativeSubmitted);\r\n        const averageScoreSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsRelativeSubmitted);\r\n        const averageGradeSubmitted = this.aggregatedExamResults.meanGradeSubmitted ?? '-';\r\n        const averageGradeSubmittedInFirstCorrectionRound = this.aggregatedExamResults.meanGradeInFirstCorrection ?? '-';\r\n        tableState.averagePointsSubmitted = averagePointsSubmitted;\r\n        tableState.averagePointsTotal = averagePointsSubmitted;\r\n        tableState.averagePointsSubmittedInFirstCorrection = averagePointsSubmittedInFirstCorrection;\r\n        tableState.averagePointsTotalInFirstCorrection = averagePointsSubmittedInFirstCorrection;\r\n        tableState.averageScoreSubmitted = averageScoreSubmitted;\r\n        tableState.averageScoreTotal = averageScoreSubmitted;\r\n        tableState.averageScoreSubmittedInFirstCorrection = averageScoreSubmittedInFirstCorrection;\r\n        tableState.averageScoreTotalInFirstCorrection = averageScoreSubmittedInFirstCorrection;\r\n        tableState.averageGradeSubmitted = averageGradeSubmitted;\r\n        tableState.averageGradeTotal = averageGradeSubmitted;\r\n        tableState.averageGradeSubmittedInFirstCorrection = averageGradeSubmittedInFirstCorrectionRound;\r\n        tableState.averageGradeTotalInFirstCorrection = averageGradeSubmittedInFirstCorrectionRound;\r\n    }\r\n\r\n    /**\r\n     * Sets all median values to the table state if only submitted exams should be included in calculation\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setMedianValuesForSubmittedFilter(tableState: TableState): void {\r\n        const medianPointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianSubmitted);\r\n        const medianPointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianInFirstCorrection);\r\n        const medianScoreSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianRelativeSubmitted);\r\n        const medianScoreSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianRelativeInFirstCorrection);\r\n        const medianGradeSubmitted = this.aggregatedExamResults.medianGradeSubmitted ?? '-';\r\n        const medianGradeSubmittedInFirstCorrection = this.aggregatedExamResults.medianGradeInFirstCorrection ?? '-';\r\n        tableState.medianPointsSubmitted = medianPointsSubmitted;\r\n        tableState.medianPointsTotal = medianPointsSubmitted;\r\n        tableState.medianPointsSubmittedInFirstCorrection = medianPointsSubmittedInFirstCorrection;\r\n        tableState.medianPointsTotalInFirstCorrection = medianPointsSubmittedInFirstCorrection;\r\n        tableState.medianScoreSubmitted = medianScoreSubmitted;\r\n        tableState.medianScoreTotal = medianScoreSubmitted;\r\n        tableState.medianScoreSubmittedInFirstCorrection = medianScoreSubmittedInFirstCorrection;\r\n        tableState.medianScoreTotalInFirstCorrection = medianScoreSubmittedInFirstCorrection;\r\n        tableState.medianGradeSubmitted = medianGradeSubmitted;\r\n        tableState.medianGradeTotal = medianGradeSubmitted;\r\n        tableState.medianGradeSubmittedInFirstCorrection = medianGradeSubmittedInFirstCorrection;\r\n        tableState.medianGradeTotalInFirstCorrection = medianGradeSubmittedInFirstCorrection;\r\n    }\r\n\r\n    /**\r\n     * Sets all standard deviations to the table state if only submitted exams should be included in calculation\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setStandardDeviationForSubmittedFilter(tableState: TableState): void {\r\n        const standardDeviationPointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationSubmitted);\r\n        const standardDeviationPointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationInFirstCorrection);\r\n        const standardGradeDeviationSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationSubmitted);\r\n        const standardGradeDeviationInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationInFirstCorrection);\r\n        tableState.standardDeviationSubmitted = standardDeviationPointsSubmitted;\r\n        tableState.standardDeviationTotal = standardDeviationPointsSubmitted;\r\n        tableState.standardDeviationSubmittedInFirstCorrection = standardDeviationPointsSubmittedInFirstCorrection;\r\n        tableState.standardDeviationTotalInFirstCorrection = standardDeviationPointsSubmittedInFirstCorrection;\r\n        tableState.standardGradeDeviationSubmitted = standardGradeDeviationSubmitted;\r\n        tableState.standardGradeDeviationTotal = standardGradeDeviationSubmitted;\r\n        tableState.standardGradeDeviationSubmittedInFirstCorrection = standardGradeDeviationInFirstCorrection;\r\n        tableState.standardGradeDeviationTotalInFirstCorrection = standardGradeDeviationInFirstCorrection;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding values of {@link ExamScoresComponent#aggregatedExamResults} to the table state if no filter is selected\r\n     * @param tableState object containing the values currently displayed by the table\r\n     */\r\n    private setValuesForNoFilter(tableState: TableState): void {\r\n        this.setSubmittedValuesForNoFilter(tableState);\r\n        this.setTotalValuesForNoFilter(tableState);\r\n    }\r\n\r\n    /**\r\n     * Sets the values for the total row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setTotalValuesForNoFilter(tableState: TableState): void {\r\n        this.setTotalAverageValuesForNoFilter(tableState);\r\n        this.setTotalMedianValuesForNoFilter(tableState);\r\n        this.setTotalStandardDeviationForNoFilter(tableState);\r\n    }\r\n\r\n    /**\r\n     * Sets the average values for the total row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setTotalAverageValuesForNoFilter(tableState: TableState): void {\r\n        tableState.averagePointsTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsTotal);\r\n        tableState.averagePointsTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsTotalInFirstCorrection);\r\n        tableState.averageScoreTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsRelativeTotal);\r\n        tableState.averageScoreTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsRelativeTotalInFirstCorrection);\r\n        tableState.averageGradeTotal = this.aggregatedExamResults.meanGradeTotal ?? '-';\r\n        tableState.averageGradeTotalInFirstCorrection = this.aggregatedExamResults.meanGradeTotalInFirstCorrection ?? '-';\r\n    }\r\n\r\n    /**\r\n     * Sets the median values for the total row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setTotalMedianValuesForNoFilter(tableState: TableState): void {\r\n        tableState.medianPointsTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianTotal);\r\n        tableState.medianPointsTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianTotalInFirstCorrection);\r\n        tableState.medianScoreTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianRelativeTotal);\r\n        tableState.medianScoreTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianRelativeTotalInFirstCorrection);\r\n        tableState.medianGradeTotal = this.aggregatedExamResults.medianGradeTotal ?? '-';\r\n        tableState.medianGradeTotalInFirstCorrection = this.aggregatedExamResults.medianGradeTotalInFirstCorrection ?? '-';\r\n    }\r\n\r\n    /**\r\n     * Sets the standard deviations for the total row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setTotalStandardDeviationForNoFilter(tableState: TableState): void {\r\n        tableState.standardDeviationTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationTotal);\r\n        tableState.standardDeviationTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationTotalInFirstCorrection);\r\n        tableState.standardGradeDeviationTotal = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationTotal);\r\n        tableState.standardGradeDeviationTotalInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationTotalInFirstCorrection);\r\n    }\r\n\r\n    /**\r\n     * Sets the values for the submitted row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setSubmittedValuesForNoFilter(tableState: TableState): void {\r\n        this.setSubmittedAverageValuesForNoFilter(tableState);\r\n        this.setSubmittedMedianValuesForNoFilter(tableState);\r\n        this.setSubmittedStandardDeviationsForNoFilter(tableState);\r\n    }\r\n\r\n    /**\r\n     * Sets the average values for the submitted row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setSubmittedAverageValuesForNoFilter(tableState: TableState): void {\r\n        tableState.averagePointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsSubmitted);\r\n        tableState.averagePointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsInFirstCorrection);\r\n        tableState.averageScoreSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsRelativeSubmitted);\r\n        tableState.averageScoreSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.meanPointsRelativeInFirstCorrection);\r\n        tableState.averageGradeSubmitted = this.aggregatedExamResults.meanGradeSubmitted ?? '-';\r\n        tableState.averageGradeSubmittedInFirstCorrection = this.aggregatedExamResults.meanGradeInFirstCorrection ?? '-';\r\n    }\r\n\r\n    /**\r\n     * Sets the median for the submitted row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setSubmittedMedianValuesForNoFilter(tableState: TableState): void {\r\n        tableState.medianPointsSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianSubmitted);\r\n        tableState.medianPointsSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianInFirstCorrection);\r\n        tableState.medianScoreSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianRelativeSubmitted);\r\n        tableState.medianScoreSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.medianRelativeInFirstCorrection);\r\n        tableState.medianGradeSubmitted = this.aggregatedExamResults.medianGradeSubmitted ?? '-';\r\n        tableState.medianGradeSubmittedInFirstCorrection = this.aggregatedExamResults.medianGradeInFirstCorrection ?? '-';\r\n    }\r\n\r\n    /**\r\n     * Sets the standard deviations for the submitted row in the table if no filter is selected\r\n     * @param tableState the table state that should be updated\r\n     */\r\n    private setSubmittedStandardDeviationsForNoFilter(tableState: TableState): void {\r\n        tableState.standardDeviationSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationSubmitted);\r\n        tableState.standardDeviationSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardDeviationInFirstCorrection);\r\n        tableState.standardGradeDeviationSubmitted = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationSubmitted);\r\n        tableState.standardGradeDeviationSubmittedInFirstCorrection = this.roundAndLocalizeStatisticalValue(this.aggregatedExamResults.standardGradeDeviationInFirstCorrection);\r\n    }\r\n\r\n    /**\r\n     * Wrapper method that handles null or undefined values for statistical numbers and replaces it with '-' string.\r\n     * If the passed value is not null or undefined, the rounded and localized string is returned\r\n     * @param value the value that should be rounded and localized\r\n     */\r\n    private roundAndLocalizeStatisticalValue(value: number | undefined): string {\r\n        if (value === null || value === undefined) {\r\n            return '-';\r\n        }\r\n        return this.roundAndPerformLocalConversion(value);\r\n    }\r\n}\r\n", "<div>\r\n    @if (isLoading) {\r\n        <div class=\"d-flex justify-content-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (!isLoading && (!studentResults || !exerciseGroups)) {\r\n        <div>\r\n            @if (!exerciseGroups) {\r\n                <div class=\"alert alert-warning\">\r\n                    <fa-icon [icon]=\"faExclamationTriangle\" />\r\n                    <span jhiTranslate=\"artemisApp.examScores.noExerciseGroupAvailable\"></span>\r\n                </div>\r\n            }\r\n            @if (!studentResults) {\r\n                <div class=\"alert alert-info\">\r\n                    <span jhiTranslate=\"artemisApp.examScores.noStudentResultAvailable\"></span>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (!isLoading && studentResults && exerciseGroups) {\r\n        <div>\r\n            <div class=\"d-flex\">\r\n                @if (examScoreDTO.title) {\r\n                    <h2 class=\"font-weigth-bold\">\r\n                        {{ examScoreDTO.title }}\r\n                    </h2>\r\n                }\r\n                <jhi-csv-export-button class=\"ms-auto\" title=\"entity.action.export\" [icon]=\"faDownload\" [buttonSize]=\"ButtonSize.SMALL\" (onExport)=\"exportExamResults($event)\" />\r\n            </div>\r\n            <div class=\"d-flex mb-1\">\r\n                @if (examScoreDTO.maxPoints) {\r\n                    <h6>{{ 'artemisApp.examScores.maxPoints' | artemisTranslate }}: {{ localize(examScoreDTO.maxPoints) }},</h6>\r\n                }\r\n                <a [routerLink]=\"['/course-management', course?.id, 'exams', examScoreDTO.examId, 'exercise-groups']\">\r\n                    <h6 class=\"ms-2\">{{ exerciseGroups.length }} {{ 'artemisApp.examScores.noExerciseGroups' | artemisTranslate }}</h6>\r\n                </a>\r\n                <h6>,</h6>\r\n                <a [routerLink]=\"['/course-management', course?.id, 'exams', examScoreDTO.examId, 'students']\">\r\n                    <h6 class=\"ms-2\">{{ aggregatedExamResults.noOfRegisteredUsers }} {{ 'artemisApp.examScores.registered' | artemisTranslate }}</h6>\r\n                </a>\r\n            </div>\r\n            <div class=\"mb-2\">\r\n                <h4>\r\n                    <span jhiTranslate=\"artemisApp.examScores.examStatisticsTitle\"></span>\r\n                </h4>\r\n            </div>\r\n            <!-- Filter settings -->\r\n            <div class=\"d-flex align-items-center align-content-center mb-2\">\r\n                <div class=\"form-check form-check-inline\">\r\n                    <input\r\n                        id=\"toggleFilterForSubmittedExam\"\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        [checked]=\"filterForSubmittedExams\"\r\n                        (change)=\"toggleFilterForSubmittedExam()\"\r\n                    />\r\n                    <label for=\"toggleFilterForSubmittedExam\" class=\"form-check-label\" jhiTranslate=\"artemisApp.examScores.filterForSubmittedExams\"></label>\r\n                </div>\r\n                <div class=\"form-check form-check-inline\">\r\n                    <input\r\n                        id=\"toggleFilterForNonEmptySubmission\"\r\n                        class=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        [checked]=\"filterForNonEmptySubmissions\"\r\n                        (change)=\"toggleFilterForNonEmptySubmission()\"\r\n                    />\r\n                    <label for=\"toggleFilterForNonEmptySubmission\" class=\"form-check-label\" jhiTranslate=\"artemisApp.examScores.filterForNonEmptySubmissions\"></label>\r\n                </div>\r\n            </div>\r\n            <!-- Exam Point Statistics -->\r\n            <table class=\"table table-bordered table-sm table-striped table-clear-width mb-3\">\r\n                @if (hasSecondCorrectionAndStarted) {\r\n                    <thead class=\"table-dark\">\r\n                        <tr>\r\n                            <th></th>\r\n                            @if (gradingScaleExists && !isBonus) {\r\n                                <th colspan=\"3\" jhiTranslate=\"artemisApp.examScores.secondCorrectionColumn\"></th>\r\n                            }\r\n                            @if (gradingScaleExists && !isBonus) {\r\n                                <th colspan=\"3\" style=\"border-left: 3px solid grey\" jhiTranslate=\"artemisApp.examScores.firstCorrectionColumn\"></th>\r\n                            }\r\n                            @if (!gradingScaleExists || isBonus) {\r\n                                <th colspan=\"2\" jhiTranslate=\"artemisApp.examScores.secondCorrectionColumn\"></th>\r\n                            }\r\n                            @if (!gradingScaleExists || isBonus) {\r\n                                <th colspan=\"2\" style=\"border-left: 3px solid grey\" jhiTranslate=\"artemisApp.examScores.firstCorrectionColumn\"></th>\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                }\r\n                <thead class=\"table-dark\">\r\n                    <tr>\r\n                        <th></th>\r\n                        @if (gradingScaleExists && !isBonus) {\r\n                            <th jhiTranslate=\"artemisApp.examScores.passedColumn\"></th>\r\n                        }\r\n                        <th jhiTranslate=\"artemisApp.examScores.submittedColumn\"></th>\r\n                        <th jhiTranslate=\"artemisApp.examScores.totalColumn\"></th>\r\n                        @if (hasSecondCorrectionAndStarted && gradingScaleExists && !isBonus) {\r\n                            <th style=\"border-left: 3px solid grey\" jhiTranslate=\"artemisApp.examScores.passedColumn\"></th>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <th [ngStyle]=\"!gradingScaleExists || isBonus ? { 'border-left': '3px solid grey' } : {}\" jhiTranslate=\"artemisApp.examScores.submittedColumn\"></th>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <th jhiTranslate=\"artemisApp.examScores.totalColumn\"></th>\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <th scope=\"row\" jhiTranslate=\"artemisApp.examScores.noOfExams\"></th>\r\n                        @if (gradingScaleExists && !isBonus) {\r\n                            <td>\r\n                                {{ aggregatedExamResults.noOfExamsFilteredForPassed }}\r\n                                ({{ tableState.relativeAmountOfPassedExams }}%)\r\n                            </td>\r\n                        }\r\n                        <td>\r\n                            {{ tableState.absoluteAmountOfSubmittedExams }}\r\n                            ({{ tableState.relativeAmountOfSubmittedExams }}%)\r\n                        </td>\r\n                        <td>\r\n                            {{ tableState.absoluteAmountOfTotalExams }}\r\n                        </td>\r\n                        @if (hasSecondCorrectionAndStarted && gradingScaleExists && !isBonus) {\r\n                            <td style=\"border-left: 3px solid lightgrey\"></td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td [ngStyle]=\"!gradingScaleExists || isBonus ? { 'border-left': '3px solid lightgrey' } : {}\"></td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td></td>\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th scope=\"row\" jhiTranslate=\"artemisApp.examScores.averagePointsColumn\"></th>\r\n                        @if (gradingScaleExists && !isBonus) {\r\n                            <td>\r\n                                {{ aggregatedExamResults.meanPointsPassed !== null ? roundAndPerformLocalConversion(aggregatedExamResults.meanPointsPassed) : '-' }}\r\n                                ({{\r\n                                    aggregatedExamResults.meanPointsRelativePassed !== null ? roundAndPerformLocalConversion(aggregatedExamResults.meanPointsRelativePassed) : '-'\r\n                                }}\r\n                                %)\r\n                            </td>\r\n                        }\r\n                        <td>{{ tableState.averagePointsSubmitted }} ({{ tableState.averageScoreSubmitted }}%)</td>\r\n                        <td>{{ tableState.averagePointsTotal }} ({{ tableState.averageScoreTotal }}%)</td>\r\n                        @if (hasSecondCorrectionAndStarted && gradingScaleExists && !isBonus) {\r\n                            <td style=\"border-left: 3px solid lightgrey\">\r\n                                {{\r\n                                    aggregatedExamResults.meanPointsPassedInFirstCorrection !== null\r\n                                        ? roundAndPerformLocalConversion(aggregatedExamResults.meanPointsPassedInFirstCorrection)\r\n                                        : '-'\r\n                                }}\r\n                                ({{\r\n                                    aggregatedExamResults.meanPointsRelativePassedInFirstCorrection !== null\r\n                                        ? roundAndPerformLocalConversion(aggregatedExamResults.meanPointsRelativePassedInFirstCorrection)\r\n                                        : '-'\r\n                                }}\r\n                                %)\r\n                            </td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td [ngStyle]=\"!gradingScaleExists || isBonus ? { 'border-left': '3px solid lightgrey' } : {}\">\r\n                                {{ tableState.averagePointsSubmittedInFirstCorrection }}\r\n                                ({{ tableState.averageScoreSubmittedInFirstCorrection }}%)\r\n                            </td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td>\r\n                                {{ tableState.averagePointsTotalInFirstCorrection }}\r\n                                ({{ tableState.averageScoreTotal }}%)\r\n                            </td>\r\n                        }\r\n                    </tr>\r\n                    @if (gradingScaleExists) {\r\n                        <tr>\r\n                            <th scope=\"row\" jhiTranslate=\"{{ isBonus ? 'artemisApp.examScores.averageBonusColumn' : 'artemisApp.examScores.averageGradeColumn' }}\"></th>\r\n                            @if (!isBonus) {\r\n                                <td>{{ aggregatedExamResults.meanGradePassed !== null ? aggregatedExamResults.meanGradePassed : '-' }}</td>\r\n                            }\r\n                            <td>{{ tableState.averageGradeSubmitted }}</td>\r\n                            <td>{{ tableState.averageGradeTotal }}</td>\r\n                            @if (hasSecondCorrectionAndStarted && !isBonus) {\r\n                                <td style=\"border-left: 3px solid lightgrey\">\r\n                                    {{ aggregatedExamResults.meanGradePassedInFirstCorrection !== null ? aggregatedExamResults.meanGradePassedInFirstCorrection : '-' }}\r\n                                </td>\r\n                            }\r\n                            @if (hasSecondCorrectionAndStarted) {\r\n                                <td [ngStyle]=\"isBonus ? { 'border-left': '3px solid lightgrey' } : {}\">\r\n                                    {{ tableState.averageGradeSubmittedInFirstCorrection }}\r\n                                </td>\r\n                            }\r\n                            @if (hasSecondCorrectionAndStarted) {\r\n                                <td>\r\n                                    {{ tableState.averageGradeTotalInFirstCorrection }}\r\n                                </td>\r\n                            }\r\n                        </tr>\r\n                    }\r\n                    <tr>\r\n                        <th scope=\"row\" jhiTranslate=\"artemisApp.examScores.medianColumn\"></th>\r\n                        @if (gradingScaleExists && !isBonus) {\r\n                            <td>\r\n                                {{ aggregatedExamResults.medianPassed !== null ? roundAndPerformLocalConversion(aggregatedExamResults.medianPassed) : '-' }}\r\n                                ({{ aggregatedExamResults.medianRelativePassed !== null ? roundAndPerformLocalConversion(aggregatedExamResults.medianRelativePassed) : '-' }}\r\n                                %)\r\n                            </td>\r\n                        }\r\n                        <td>\r\n                            {{ tableState.medianPointsSubmitted }}\r\n                            ({{ tableState.medianScoreSubmitted }}%)\r\n                        </td>\r\n                        <td>\r\n                            {{ tableState.medianPointsTotal }}\r\n                            ({{ tableState.medianScoreTotal }}%)\r\n                        </td>\r\n                        @if (hasSecondCorrectionAndStarted && gradingScaleExists && !isBonus) {\r\n                            <td style=\"border-left: 3px solid lightgrey\">\r\n                                {{\r\n                                    aggregatedExamResults.medianPassedInFirstCorrection !== null\r\n                                        ? roundAndPerformLocalConversion(aggregatedExamResults.medianPassedInFirstCorrection)\r\n                                        : '-'\r\n                                }}\r\n                                ({{\r\n                                    aggregatedExamResults.medianRelativePassedInFirstCorrection !== null\r\n                                        ? roundAndPerformLocalConversion(aggregatedExamResults.medianRelativePassedInFirstCorrection)\r\n                                        : '-'\r\n                                }}\r\n                                %)\r\n                            </td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td [ngStyle]=\"!gradingScaleExists || isBonus ? { 'border-left': '3px solid lightgrey' } : {}\">\r\n                                {{ tableState.medianPointsSubmittedInFirstCorrection }}\r\n                                ({{ tableState.medianScoreSubmittedInFirstCorrection }}%)\r\n                            </td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td>\r\n                                {{ tableState.medianPointsTotalInFirstCorrection }}\r\n                                ({{ tableState.medianScoreTotalInFirstCorrection }}%)\r\n                            </td>\r\n                        }\r\n                    </tr>\r\n                    @if (gradingScaleExists) {\r\n                        <tr>\r\n                            <th scope=\"row\" jhiTranslate=\"{{ isBonus ? 'artemisApp.examScores.medianBonusColumn' : 'artemisApp.examScores.medianGradeColumn' }}\"></th>\r\n                            @if (!isBonus) {\r\n                                <td>{{ aggregatedExamResults.medianGradePassed !== null ? aggregatedExamResults.medianGradePassed : '-' }}</td>\r\n                            }\r\n                            <td>{{ tableState.medianGradeSubmitted }}</td>\r\n                            <td>{{ tableState.medianGradeTotal }}</td>\r\n                            @if (!isBonus && hasSecondCorrectionAndStarted) {\r\n                                <td style=\"border-left: 3px solid lightgrey\">\r\n                                    >{{ aggregatedExamResults.medianGradePassedInFirstCorrection !== null ? aggregatedExamResults.medianGradePassedInFirstCorrection : '-' }}\r\n                                </td>\r\n                            }\r\n                            @if (hasSecondCorrectionAndStarted) {\r\n                                <td [ngStyle]=\"isBonus ? { 'border-left': '3px solid lightgrey' } : {}\">\r\n                                    {{ tableState.medianGradeSubmittedInFirstCorrection }}\r\n                                </td>\r\n                            }\r\n                            @if (hasSecondCorrectionAndStarted) {\r\n                                <td>\r\n                                    {{ tableState.medianGradeTotalInFirstCorrection }}\r\n                                </td>\r\n                            }\r\n                        </tr>\r\n                    }\r\n                    <tr>\r\n                        <th scope=\"row\" jhiTranslate=\"artemisApp.examScores.standardDeviationColumn\"></th>\r\n                        @if (gradingScaleExists && !isBonus) {\r\n                            <td>\r\n                                {{ aggregatedExamResults.standardDeviationPassed !== null ? roundAndPerformLocalConversion(aggregatedExamResults.standardDeviationPassed) : '-' }}\r\n                            </td>\r\n                        }\r\n                        <td>\r\n                            {{ tableState.standardDeviationSubmitted }}\r\n                        </td>\r\n                        <td>{{ tableState.standardDeviationTotal }}</td>\r\n                        @if (hasSecondCorrectionAndStarted && gradingScaleExists && !isBonus) {\r\n                            <td style=\"border-left: 3px solid lightgrey\">\r\n                                {{\r\n                                    aggregatedExamResults.standardDeviationPassedInFirstCorrection !== null\r\n                                        ? roundAndPerformLocalConversion(aggregatedExamResults.standardDeviationPassedInFirstCorrection)\r\n                                        : '-'\r\n                                }}\r\n                            </td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td [ngStyle]=\"!gradingScaleExists || isBonus ? { 'border-left': '3px solid lightgrey' } : {}\">\r\n                                {{ tableState.standardDeviationSubmittedInFirstCorrection }}\r\n                            </td>\r\n                        }\r\n                        @if (hasSecondCorrectionAndStarted) {\r\n                            <td>\r\n                                {{ tableState.standardDeviationTotalInFirstCorrection }}\r\n                            </td>\r\n                        }\r\n                    </tr>\r\n                    @if (gradingScaleExists && hasNumericGrades) {\r\n                        <tr>\r\n                            <th scope=\"row\" jhiTranslate=\"artemisApp.examScores.standardGradeDeviationColumn\"></th>\r\n                            @if (!isBonus) {\r\n                                <td>\r\n                                    {{\r\n                                        aggregatedExamResults.standardGradeDeviationPassed !== null\r\n                                            ? roundAndPerformLocalConversion(aggregatedExamResults.standardGradeDeviationPassed)\r\n                                            : '-'\r\n                                    }}\r\n                                </td>\r\n                            }\r\n                            <td>\r\n                                {{ tableState.standardGradeDeviationSubmitted }}\r\n                            </td>\r\n                            <td>\r\n                                {{ tableState.standardGradeDeviationTotal }}\r\n                            </td>\r\n                            @if (hasSecondCorrectionAndStarted && !isBonus) {\r\n                                <td style=\"border-left: 3px solid lightgrey\">\r\n                                    {{\r\n                                        aggregatedExamResults.standardGradeDeviationPassedInFirstCorrection !== null\r\n                                            ? roundAndPerformLocalConversion(aggregatedExamResults.standardGradeDeviationPassedInFirstCorrection)\r\n                                            : '-'\r\n                                    }}\r\n                                </td>\r\n                            }\r\n                            @if (hasSecondCorrectionAndStarted) {\r\n                                <td [ngStyle]=\"isBonus ? { 'border-left': '3px solid lightgrey' } : {}\">\r\n                                    {{ tableState.standardGradeDeviationSubmittedInFirstCorrection }}\r\n                                </td>\r\n                            }\r\n                            @if (hasSecondCorrectionAndStarted) {\r\n                                <td>\r\n                                    {{ tableState.standardGradeDeviationTotalInFirstCorrection }}\r\n                                </td>\r\n                            }\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div class=\"d-block\">\r\n                @if (gradingScaleExists && this.aggregatedExamResults.medianRelativePassed !== null) {\r\n                    <div class=\"form-check\">\r\n                        <input id=\"toggleMedianPassed\" class=\"form-check-input\" type=\"checkbox\" [checked]=\"showPassedMedian\" (change)=\"toggleMedian(medianType.PASSED)\" />\r\n                        <label\r\n                            for=\"toggleMedianPassed\"\r\n                            class=\"form-check-label\"\r\n                            jhiTranslate=\"artemisApp.examScores.highlightPassedMedian\"\r\n                            [translateValues]=\"{\r\n                                median: this.aggregatedExamResults.medianRelativePassed\r\n                                    ? roundScoreSpecifiedByCourseSettings(this.aggregatedExamResults.medianRelativePassed, course)\r\n                                    : 0,\r\n                            }\"\r\n                        ></label>\r\n                    </div>\r\n                }\r\n                <div class=\"form-check\">\r\n                    <input id=\"toggleMedianOverall\" class=\"form-check-input\" type=\"checkbox\" [checked]=\"showOverallMedian\" (change)=\"toggleMedian(overallChartMedianType)\" />\r\n                    <label\r\n                        for=\"toggleMedianOverall\"\r\n                        class=\"form-check-label\"\r\n                        jhiTranslate=\"artemisApp.examScores.highlightOverallMedian\"\r\n                        [translateValues]=\"{ median: this.overallChartMedian }\"\r\n                    ></label>\r\n                </div>\r\n                <!-- Histogram -->\r\n                @if (hasBonus) {\r\n                    <h4 class=\"text-center mb-0\" jhiTranslate=\"artemisApp.examScores.gradesBeforeBonus\"></h4>\r\n                }\r\n                <div class=\"row d-flex justify-content-center\">\r\n                    <jhi-participant-scores-distribution\r\n                        [scores]=\"scores\"\r\n                        [scoreToHighlight]=\"highlightedValue\"\r\n                        [gradingScale]=\"gradingScale\"\r\n                        [isCourseScore]=\"false\"\r\n                        [dataLabelFormatting]=\"dataLabelFormatting\"\r\n                        class=\"col-lg-11\"\r\n                    />\r\n                </div>\r\n                <!-- Histogram with bonus -->\r\n                @if (hasBonus) {\r\n                    <h4 class=\"text-center mt-5 mb-0\" jhiTranslate=\"artemisApp.examScores.gradesAfterBonus\"></h4>\r\n                }\r\n                @if (hasBonus) {\r\n                    <div class=\"row d-flex justify-content-center\">\r\n                        <jhi-participant-scores-distribution\r\n                            [gradeNames]=\"gradesWithBonus\"\r\n                            [scoreToHighlight]=\"highlightedValue\"\r\n                            [gradingScale]=\"gradingScale\"\r\n                            [isCourseScore]=\"false\"\r\n                            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n                            class=\"col-lg-11\"\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n            <!-- Exercise Statistics -->\r\n            @if (aggregatedExerciseGroupResults) {\r\n                <div>\r\n                    <h4 class=\"mt-3\">\r\n                        <span jhiTranslate=\"artemisApp.examScores.ExerciseGroupsTitle\"></span>\r\n                    </h4>\r\n                    @if (course) {\r\n                        <div class=\"col mb-3\">\r\n                            @for (exerciseGroup of aggregatedExerciseGroupResults; track exerciseGroup.exerciseGroupId) {\r\n                                <div>\r\n                                    <jhi-exam-scores-average-scores-graph [averageScores]=\"exerciseGroup\" [course]=\"course\" />\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <!-- Exercise Statistics Table -->\r\n                    <div class=\"table-responsive\">\r\n                        <table class=\"table table-bordered table-sm body-striped\">\r\n                            <thead class=\"table-dark\">\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th jhiTranslate=\"artemisApp.examScores.titleExerciseGroupColumn\"></th>\r\n                                    <th>\r\n                                        {{ 'artemisApp.examScores.participantsColumn' | artemisTranslate }}\r\n                                        <jhi-help-icon text=\"artemisApp.examScores.participantsExerciseGroupTooltip\" />\r\n                                    </th>\r\n                                    <th>\r\n                                        {{ 'artemisApp.examScores.averagePointsColumn' | artemisTranslate }}\r\n                                        <jhi-help-icon text=\"artemisApp.examScores.averageExerciseGroupTooltip\" />\r\n                                    </th>\r\n                                    @if (gradingScaleExists) {\r\n                                        <th jhiTranslate=\"{{ isBonus ? 'artemisApp.examScores.averageBonusColumn' : 'artemisApp.examScores.averageGradeColumn' }}\"></th>\r\n                                    }\r\n                                    <th jhiTranslate=\"artemisApp.examScores.titleExerciseColumn\"></th>\r\n                                    <th>\r\n                                        {{ 'artemisApp.examScores.participantsColumn' | artemisTranslate }}\r\n                                        <jhi-help-icon text=\"artemisApp.examScores.participantsExerciseTooltip\" />\r\n                                    </th>\r\n                                    <th>\r\n                                        {{ 'artemisApp.examScores.averagePointsColumn' | artemisTranslate }}\r\n                                        <jhi-help-icon text=\"artemisApp.examScores.averageExerciseTooltip\" />\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            @for (exerciseGroupResult of aggregatedExerciseGroupResults; track exerciseGroupResult.exerciseGroupId; let i = $index) {\r\n                                <tbody>\r\n                                    @for (exerciseResult of exerciseGroupResult.exerciseResults; track exerciseResult.exerciseId; let isFirst = $first) {\r\n                                        <tr>\r\n                                            @if (isFirst) {\r\n                                                <td [rowSpan]=\"exerciseGroupResult.exerciseResults.length\">\r\n                                                    {{ i + 1 }}\r\n                                                </td>\r\n                                            }\r\n                                            @if (isFirst) {\r\n                                                <td [rowSpan]=\"exerciseGroupResult.exerciseResults.length\">\r\n                                                    {{ exerciseGroupResult.title }}\r\n                                                </td>\r\n                                            }\r\n                                            @if (isFirst) {\r\n                                                <td [rowSpan]=\"exerciseGroupResult.exerciseResults.length\">\r\n                                                    {{ exerciseGroupResult.noOfParticipantsWithFilter }}\r\n                                                    / {{ exerciseGroupResult.totalParticipants }} ({{\r\n                                                        roundAndPerformLocalConversion(\r\n                                                            (exerciseGroupResult.noOfParticipantsWithFilter / exerciseGroupResult.totalParticipants) * 100\r\n                                                        )\r\n                                                    }}\r\n                                                    %)\r\n                                                </td>\r\n                                            }\r\n                                            @if (isFirst) {\r\n                                                <td [rowSpan]=\"exerciseGroupResult.exerciseResults.length\">\r\n                                                    {{ exerciseGroupResult.averagePoints !== null ? roundAndPerformLocalConversion(exerciseGroupResult.averagePoints) : '-' }}\r\n                                                    /\r\n                                                    {{ localize(exerciseGroupResult.maxPoints) }}\r\n                                                    ({{\r\n                                                        exerciseGroupResult.averagePercentage !== null ? roundAndPerformLocalConversion(exerciseGroupResult.averagePercentage) : '-'\r\n                                                    }}\r\n                                                    %)\r\n                                                </td>\r\n                                            }\r\n                                            @if (gradingScaleExists && isFirst) {\r\n                                                <td [rowSpan]=\"exerciseGroupResult.exerciseResults.length\">\r\n                                                    {{ exerciseGroupResult.averageGrade !== null ? exerciseGroupResult.averageGrade : '-' }}\r\n                                                </td>\r\n                                            }\r\n                                            <td>{{ exerciseResult.title }}</td>\r\n                                            <td>\r\n                                                {{ exerciseResult.noOfParticipantsWithFilter }} / {{ exerciseResult.totalParticipants }} ({{\r\n                                                    roundAndPerformLocalConversion((exerciseResult.noOfParticipantsWithFilter / exerciseResult.totalParticipants) * 100)\r\n                                                }}\r\n                                                %)\r\n                                            </td>\r\n                                            <td>\r\n                                                {{ exerciseResult.averagePoints !== null ? roundAndPerformLocalConversion(exerciseResult.averagePoints) : '-' }}\r\n                                                /\r\n                                                {{ localize(exerciseResult.maxPoints) }}\r\n                                                ({{ exerciseResult.averagePercentage !== null ? roundAndPerformLocalConversion(exerciseResult.averagePercentage) : '-' }}\r\n                                                %)\r\n                                            </td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            }\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <!-- Student Result Table -->\r\n            <h4>\r\n                <span jhiTranslate=\"artemisApp.examScores.studentResultsTitle\"></span>\r\n            </h4>\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-sm table-striped table-bordered\">\r\n                    <thead class=\"table-dark\">\r\n                        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"reverse\" (sortChange)=\"sortRows()\">\r\n                            <th>#</th>\r\n                            <th jhiSortBy=\"name\">\r\n                                <span jhiTranslate=\"artemisApp.examScores.nameColumn\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"login\">\r\n                                <span jhiTranslate=\"artemisApp.examScores.loginColumn\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"email\">\r\n                                <span jhiTranslate=\"artemisApp.examScores.eMailColumn\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"registrationNumber\">\r\n                                <span jhiTranslate=\"artemisApp.examScores.registrationNumberColumn\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            @for (exerciseGroup of examScoreDTO.exerciseGroups; track exerciseGroup.id) {\r\n                                <th [jhiSortBy]=\"'exerciseGroupIdToExerciseResult.' + exerciseGroup.id + '.achievedPoints'\">\r\n                                    <span>{{ exerciseGroup.title }}</span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                            <th jhiSortBy=\"overallPointsAchieved\">\r\n                                <span jhiTranslate=\"artemisApp.examScores.overallPointsColumn\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"overallScoreAchieved\">\r\n                                <span jhiTranslate=\"artemisApp.examScores.overallScoreColumn\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            @if (gradingScaleExists) {\r\n                                <th jhiSortBy=\"overallScoreAchieved\">\r\n                                    <span jhiTranslate=\"{{ isBonus ? 'artemisApp.examScores.overallBonusColumn' : 'artemisApp.examScores.overallGradeColumn' }}\"></span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                            @if (hasBonus) {\r\n                                @if (presentationScoreThreshold !== undefined) {\r\n                                    <th jhiSortBy=\"gradeWithBonus.achievedPresentationScore\">\r\n                                        <span\r\n                                            jhiTranslate=\"artemisApp.examScores.presentationScoreThresholdColumn\"\r\n                                            [translateValues]=\"{ threshold: presentationScoreThreshold }\"\r\n                                        ></span>\r\n                                        <fa-icon [icon]=\"faSort\" />\r\n                                    </th>\r\n                                }\r\n                                <th jhiSortBy=\"gradeWithBonus.bonusGrade\">\r\n                                    <span\r\n                                        [jhiTranslate]=\"hasBonus === BonusStrategy.POINTS ? 'artemisApp.examScores.bonusPointsColumn' : 'artemisApp.examScores.bonusGradeColumn'\"\r\n                                    ></span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                                <th jhiSortBy=\"gradeWithBonus.finalGrade\">\r\n                                    <span jhiTranslate=\"artemisApp.examScores.finalGradeColumn\"></span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                            @if (gradingScaleExists && !isBonus) {\r\n                                <th jhiTranslate=\"artemisApp.examScores.passedColumn\"></th>\r\n                            }\r\n                            @if (hasPlagiarismVerdicts) {\r\n                                <th jhiSortBy=\"mostSeverePlagiarismVerdict\">\r\n                                    <span jhiTranslate=\"artemisApp.examScores.mostSeverePlagiarismVerdictColumn\"></span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                            @if (hasPlagiarismVerdictsInBonusSource) {\r\n                                <th jhiSortBy=\"gradeWithBonus.mostSeverePlagiarismVerdict\">\r\n                                    <span jhiTranslate=\"artemisApp.examScores.mostSeverePlagiarismVerdictInBonusColumn\"></span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (studentResult of studentResults; track studentResult.userId; let i = $index) {\r\n                            <tr>\r\n                                <td>{{ i + 1 }}</td>\r\n                                <td>{{ studentResult.name }}</td>\r\n                                <td>{{ studentResult.login }}</td>\r\n                                <td>{{ studentResult.email ? studentResult.email : '-' }}</td>\r\n                                <td>{{ studentResult.registrationNumber ? studentResult.registrationNumber : '-' }}</td>\r\n                                @for (exerciseGroup of examScoreDTO.exerciseGroups; track exerciseGroup.id) {\r\n                                    @if (studentResult.exerciseGroupIdToExerciseResult && studentResult.exerciseGroupIdToExerciseResult[exerciseGroup.id]) {\r\n                                        <td>\r\n                                            {{ studentResult.exerciseGroupIdToExerciseResult[exerciseGroup.id].title }}\r\n                                            :\r\n                                            {{ roundAndPerformLocalConversion(studentResult.exerciseGroupIdToExerciseResult[exerciseGroup.id].achievedPoints) }}\r\n                                            (\r\n                                            {{ roundAndPerformLocalConversion(studentResult.exerciseGroupIdToExerciseResult[exerciseGroup.id].achievedScore) }}\r\n                                            %)\r\n                                        </td>\r\n                                    } @else {\r\n                                        <td>-</td>\r\n                                    }\r\n                                }\r\n                                <td>{{ roundAndPerformLocalConversion(studentResult.overallPointsAchieved) }}</td>\r\n                                <td>{{ roundAndPerformLocalConversion(studentResult.overallScoreAchieved) }}</td>\r\n                                @if (gradingScaleExists) {\r\n                                    <td>\r\n                                        {{ studentResult.overallGrade !== null ? studentResult.overallGrade : '-' }}\r\n                                    </td>\r\n                                }\r\n                                @if (hasBonus) {\r\n                                    @if (presentationScoreThreshold !== undefined) {\r\n                                        <td>\r\n                                            {{ studentResult.gradeWithBonus?.achievedPresentationScore ?? '-' }}\r\n                                        </td>\r\n                                    }\r\n                                    <td>\r\n                                        {{ studentResult.gradeWithBonus?.bonusGrade ?? '-' }}\r\n                                    </td>\r\n                                    <td>\r\n                                        {{ studentResult.gradeWithBonus?.finalGrade ?? studentResult.overallGrade ?? '-' }}\r\n                                    </td>\r\n                                }\r\n                                @if (gradingScaleExists && !isBonus && studentResult.overallGrade && studentResult.hasPassed) {\r\n                                    <td style=\"text-align: center\">\r\n                                        <fa-icon [icon]=\"faCheckCircle\" style=\"color: #28a745; font-size: 1.5em\" />\r\n                                    </td>\r\n                                }\r\n                                @if (gradingScaleExists && !isBonus && studentResult.overallGrade && !studentResult.hasPassed) {\r\n                                    <td style=\"text-align: center\">\r\n                                        <fa-icon [icon]=\"faTimes\" style=\"color: #ca2024; font-size: 1.5em\" />\r\n                                    </td>\r\n                                }\r\n                                @if (hasPlagiarismVerdicts) {\r\n                                    <td>\r\n                                        {{ studentResult.mostSeverePlagiarismVerdict ?? '-' }}\r\n                                    </td>\r\n                                }\r\n                                @if (hasPlagiarismVerdictsInBonusSource) {\r\n                                    <td>\r\n                                        {{ studentResult.gradeWithBonus?.mostSeverePlagiarismVerdict ?? '-' }}\r\n                                    </td>\r\n                                }\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "model_r2", "name", "\u0275\u0275textInterpolate3", "\u0275\u0275pipeBind1", "ctx_r2", "lookupAbsoluteValue", "roundAndPerformLocalConversion", "value", "ExamScoresAverageScoresGraphComponent", "navigationUtilService", "inject", "ArtemisNavigationUtilService", "activatedRoute", "ActivatedRoute", "localeConversionService", "LocaleConversionService", "averageScores", "input", "required", "course", "courseId", "examId", "xAxisTickFormatting", "axisTickFormattingWithPercentageSign", "ngxData", "ngxColor", "selectable", "group", "ScaleType", "Ordinal", "domain", "xScaleMax", "lookup", "ngOnInit", "params", "subscribe", "initializeChart", "title", "absoluteValue", "averagePoints", "exerciseGroupAverage", "averagePercentage", "push", "determineColor", "exerciseResults", "forEach", "exercise", "exerciseAverage", "exerciseId", "exerciseType", "points", "toLocaleString", "roundValueSpecifiedByCourseSettings", "accuracyOfScores", "navigateToExercise", "navigateToExamExercise", "exerciseGroupId", "onSelect", "event", "id", "type", "isExerciseGroup", "score", "GraphColors", "BLUE", "DARK_BLUE", "YELLOW", "RED", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275template", "ExamScoresAverageScoresGraphComponent_ng_template_9_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "_c1", "containerRef_r4", "offsetWidth", "TranslateDirective", "BarChartModule", "BarHorizontalComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "\u0275\u0275template", "ExamScoresComponent_Conditional_3_Conditional_3_Template", "ExamScoresComponent_Conditional_3_Conditional_4_Template", "\u0275\u0275conditional", "exerciseGroups", "studentResults", "\u0275\u0275textInterpolate1", "examScoreDTO", "title", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "localize", "maxPoints", "ExamScoresComponent_Conditional_4_Conditional_59_Conditional_7_Template", "ExamScoresComponent_Conditional_4_Conditional_59_Conditional_8_Template", "ExamScoresComponent_Conditional_4_Conditional_59_Conditional_9_Template", "ExamScoresComponent_Conditional_4_Conditional_59_Conditional_10_Template", "gradingScaleExists", "isBonus", "\u0275\u0275pureFunction0", "_c3", "_c4", "aggregatedExamResults", "noOfExamsFilteredForPassed", "tableState", "relativeAmountOfPassedExams", "_c5", "meanPointsPassed", "roundAndPerformLocalConversion", "meanPointsRelativePassed", "meanPointsPassedInFirstCorrection", "meanPointsRelativePassedInFirstCorrection", "averagePointsSubmittedInFirstCorrection", "averageScoreSubmittedInFirstCorrection", "averagePointsTotalInFirstCorrection", "averageScoreTotal", "\u0275\u0275textInterpolate", "meanGradePassed", "meanGradePassedInFirstCorrection", "averageGradeSubmittedInFirstCorrection", "averageGradeTotalInFirstCorrection", "ExamScoresComponent_Conditional_4_Conditional_108_Conditional_5_Template", "ExamScoresComponent_Conditional_4_Conditional_108_Conditional_12_Template", "ExamScoresComponent_Conditional_4_Conditional_108_Conditional_13_Template", "ExamScoresComponent_Conditional_4_Conditional_108_Conditional_14_Template", "\u0275\u0275propertyInterpolate", "averageGradeSubmitted", "averageGradeTotal", "hasSecondCorrectionAndStarted", "medianPassed", "medianRelativePassed", "medianPassedInFirstCorrection", "medianRelativePassedInFirstCorrection", "medianPointsSubmittedInFirstCorrection", "medianScoreSubmittedInFirstCorrection", "medianPointsTotalInFirstCorrection", "medianScoreTotalInFirstCorrection", "medianGradePassed", "medianGradePassedInFirstCorrection", "medianGradeSubmittedInFirstCorrection", "medianGradeTotalInFirstCorrection", "ExamScoresComponent_Conditional_4_Conditional_124_Conditional_5_Template", "ExamScoresComponent_Conditional_4_Conditional_124_Conditional_12_Template", "ExamScoresComponent_Conditional_4_Conditional_124_Conditional_13_Template", "ExamScoresComponent_Conditional_4_Conditional_124_Conditional_14_Template", "medianGradeSubmitted", "medianGradeTotal", "standardDeviationPassed", "standardDeviationPassedInFirstCorrection", "standardDeviationSubmittedInFirstCorrection", "standardDeviationTotalInFirstCorrection", "standardGradeDeviationPassed", "standardGradeDeviationPassedInFirstCorrection", "standardGradeDeviationSubmittedInFirstCorrection", "standardGradeDeviationTotalInFirstCorrection", "ExamScoresComponent_Conditional_4_Conditional_140_Conditional_5_Template", "ExamScoresComponent_Conditional_4_Conditional_140_Conditional_12_Template", "ExamScoresComponent_Conditional_4_Conditional_140_Conditional_13_Template", "ExamScoresComponent_Conditional_4_Conditional_140_Conditional_14_Template", "standardGradeDeviationSubmitted", "standardGradeDeviationTotal", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleMedian", "medianType", "PASSED", "showPassedMedian", "\u0275\u0275pureFunction1", "_c2", "roundScoreSpecifiedByCourseSettings", "course", "gradesWithBonus", "highlightedValue", "gradingScale", "dataLabelFormatting", "exerciseGroup_r4", "\u0275\u0275repeaterCreate", "ExamScoresComponent_Conditional_4_Conditional_165_Conditional_8_For_4_Template", "_forTrack2", "\u0275\u0275repeater", "aggregatedExerciseGroupResults", "exerciseGroupResult_r6", "exerciseResults", "length", "\u0275$index_630_r7", "\u0275\u0275textInterpolate3", "noOfParticipantsWithFilter", "totalParticipants", "averagePoints", "averagePercentage", "averageGrade", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_For_4_Conditional_3_Template", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_For_4_Conditional_4_Template", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_For_4_Conditional_5_Template", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_For_4_Conditional_6_Template", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_For_4_Conditional_7_Template", "\u0275$index_635_r9", "exerciseResult_r8", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_For_4_Template", "_forTrack3", "ExamScoresComponent_Conditional_4_Conditional_165_Conditional_8_Template", "ExamScoresComponent_Conditional_4_Conditional_165_Conditional_34_Template", "ExamScoresComponent_Conditional_4_Conditional_165_For_52_Template", "exerciseGroup_r10", "id", "faSort", "_c6", "presentationScoreThreshold", "ExamScoresComponent_Conditional_4_Conditional_227_Conditional_1_Template", "undefined", "hasBonus", "BonusStrategy", "POINTS", "studentResult_r12", "exerciseGroupIdToExerciseResult", "exerciseGroup_r11", "achievedPoints", "achievedScore", "ExamScoresComponent_Conditional_4_For_236_For_19_Conditional_1_Template", "ExamScoresComponent_Conditional_4_For_236_For_19_Conditional_2_Template", "overallGrade", "tmp_14_0", "gradeWithBonus", "achievedPresentationScore", "ExamScoresComponent_Conditional_4_For_236_Conditional_27_Conditional_1_Template", "bonusGrade", "tmp_15_0", "finalGrade", "faCheckCircle", "faTimes", "tmp_13_0", "mostSeverePlagiarismVerdict", "ExamScoresComponent_Conditional_4_For_236_For_19_Template", "_forTrack0", "ExamScoresComponent_Conditional_4_For_236_Conditional_26_Template", "ExamScoresComponent_Conditional_4_For_236_Conditional_27_Template", "ExamScoresComponent_Conditional_4_For_236_Conditional_28_Template", "ExamScoresComponent_Conditional_4_For_236_Conditional_29_Template", "ExamScoresComponent_Conditional_4_For_236_Conditional_30_Template", "ExamScoresComponent_Conditional_4_For_236_Conditional_31_Template", "\u0275$index_863_r13", "name", "login", "email", "registrationNumber", "overallPointsAchieved", "overallScoreAchieved", "hasPassed", "hasPlagiarismVerdicts", "hasPlagiarismVerdictsInBonusSource", "ExamScoresComponent_Conditional_4_Conditional_5_Template", "$event", "_r2", "exportExamResults", "ExamScoresComponent_Conditional_4_Conditional_11_Template", "toggleFilterForSubmittedExam", "toggleFilterForNonEmptySubmission", "ExamScoresComponent_Conditional_4_Conditional_59_Template", "ExamScoresComponent_Conditional_4_Conditional_66_Template", "ExamScoresComponent_Conditional_4_Conditional_71_Template", "ExamScoresComponent_Conditional_4_Conditional_72_Template", "ExamScoresComponent_Conditional_4_Conditional_73_Template", "ExamScoresComponent_Conditional_4_Conditional_82_Template", "ExamScoresComponent_Conditional_4_Conditional_89_Template", "ExamScoresComponent_Conditional_4_Conditional_90_Template", "ExamScoresComponent_Conditional_4_Conditional_91_Template", "ExamScoresComponent_Conditional_4_Conditional_97_Template", "ExamScoresComponent_Conditional_4_Conditional_104_Template", "ExamScoresComponent_Conditional_4_Conditional_105_Template", "ExamScoresComponent_Conditional_4_Conditional_106_Template", "ExamScoresComponent_Conditional_4_Conditional_108_Template", "ExamScoresComponent_Conditional_4_Conditional_113_Template", "ExamScoresComponent_Conditional_4_Conditional_120_Template", "ExamScoresComponent_Conditional_4_Conditional_121_Template", "ExamScoresComponent_Conditional_4_Conditional_122_Template", "ExamScoresComponent_Conditional_4_Conditional_124_Template", "ExamScoresComponent_Conditional_4_Conditional_129_Template", "ExamScoresComponent_Conditional_4_Conditional_136_Template", "ExamScoresComponent_Conditional_4_Conditional_137_Template", "ExamScoresComponent_Conditional_4_Conditional_138_Template", "ExamScoresComponent_Conditional_4_Conditional_140_Template", "ExamScoresComponent_Conditional_4_Conditional_145_Template", "overallChartMedianType", "ExamScoresComponent_Conditional_4_Conditional_154_Template", "ExamScoresComponent_Conditional_4_Conditional_161_Template", "ExamScoresComponent_Conditional_4_Conditional_162_Template", "ExamScoresComponent_Conditional_4_Conditional_165_Template", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "reverse", "sortRows", "ExamScoresComponent_Conditional_4_For_211_Template", "ExamScoresComponent_Conditional_4_Conditional_226_Template", "ExamScoresComponent_Conditional_4_Conditional_227_Template", "ExamScoresComponent_Conditional_4_Conditional_228_Template", "ExamScoresComponent_Conditional_4_Conditional_229_Template", "ExamScoresComponent_Conditional_4_Conditional_230_Template", "ExamScoresComponent_Conditional_4_For_236_Template", "_forTrack1", "faDownload", "ButtonSize", "SMALL", "\u0275\u0275pureFunction2", "_c0", "examId", "_c1", "noOfRegisteredUsers", "filterForSubmittedExams", "filterForNonEmptySubmissions", "absoluteAmountOfSubmittedExams", "relativeAmountOfSubmittedExams", "absoluteAmountOfTotalExams", "averagePointsSubmitted", "averageScoreSubmitted", "averagePointsTotal", "medianPointsSubmitted", "medianScoreSubmitted", "medianPointsTotal", "medianScoreTotal", "standardDeviationSubmitted", "standardDeviationTotal", "hasNumericGrades", "showOverallMedian", "overallChartMedian", "scores", "\u0275\u0275twoWayProperty", "MedianType", "ExamScoresComponent", "route", "inject", "ActivatedRoute", "examService", "ExamManagementService", "sortService", "SortService", "alertService", "AlertService", "changeDetector", "ChangeDetectorRef", "languageHelper", "JhiLanguageHelper", "localeConversionService", "LocaleConversionService", "participantScoresService", "ParticipantScoresService", "gradingSystemService", "GradingSystemService", "courseManagementService", "CourseManagementService", "noOfExamsFiltered", "formatDataLabel", "bind", "lastCalculatedMedianType", "TableState", "roundValueSpecifiedByCourseSettings", "studentIdToExamScoreDTOs", "Map", "isLoading", "languageChangeSubscription", "ngOnInit", "params", "subscribe", "getExamScoresObservable", "getExamScores", "findExamScoresObservable", "findExamScores", "pipe", "catchError", "of", "HttpResponse", "gradingScaleObservable", "findGradingScaleForExam", "find", "courseResponse", "body", "forkJoin", "next", "getExamScoresResponse", "findExamScoresResponse", "gradingScaleResponse", "titleMap", "exerciseGroup", "has", "currentValue", "get", "set", "gradeType", "GradeType", "BONUS", "studentResult", "bonusStrategy", "gradeSteps", "sortGradeSteps", "some", "step", "isNaN", "Number", "gradeName", "firstStudentResultWithPresentationScore", "calculateExamStatistics", "calculateFilterDependentStatistics", "OVERALL", "setOverallChartMedianDependingOfExamsIncluded", "determineAndHighlightChartMedian", "detectChanges", "compareNewExamScoresCalculationWithOldCalculation", "error", "res", "onError", "language", "ngOnDestroy", "unsubscribe", "overallMedianType", "SUBMITTED", "updateValuesAccordingToFilter", "calculateExerciseGroupStatistics", "exerciseGroupResults", "groupResult", "totalPoints", "gradeStep", "findMatchingGradeStep", "forEach", "exResult", "scoresToVisualize", "gradesWithBonusToVisualize", "groupIdToGroupResults", "AggregatedExerciseGroupResult", "numberOfParticipants", "containedExercises", "exerciseInfo", "type", "declareExerciseType", "exerciseResult", "AggregatedExerciseResult", "exerciseId", "push", "submitted", "toString", "entries", "Object", "exGroupId", "studentExerciseResult", "hasNonEmptySubmission", "exGroupResult", "Error", "Array", "from", "values", "numberNonEmptySubmissions", "numberNonEmptySubmittedSubmissions", "studentPointsPassed", "studentPointsSubmitted", "studentPointsTotal", "studentPointsPassedInFirstCorrectionRound", "studentPointsSubmittedInFirstCorrectionRound", "studentPointsTotalInFirstCorrectionRound", "studentGradesPassed", "studentGradesSubmitted", "studentGradesTotal", "studentGradesPassedInFirstCorrectionRound", "studentGradesSubmittedInFirstCorrectionRound", "studentGradesTotalInFirstCorrectionRound", "overallPointsAchievedInFirstCorrection", "grade", "gradeInFirstCorrection", "overallGradeInFirstCorrection", "examStatistics", "calculatePassedExamStatistics", "AggregatedExamResult", "calculateSubmittedExamStatistics", "calculateTotalExamStatistics", "noOfExamsNonEmpty", "noOfExamsSubmittedAndNotEmpty", "mean", "median", "standardDeviation", "meanPointsSubmitted", "medianSubmitted", "noOfExamsSubmitted", "meanPointsRelativeSubmitted", "medianRelativeSubmitted", "meanGradeSubmitted", "meanPointsInFirstCorrection", "medianInFirstCorrection", "standardDeviationInFirstCorrection", "meanPointsRelativeInFirstCorrection", "medianRelativeInFirstCorrection", "meanGradeInFirstCorrection", "medianGradeInFirstCorrection", "standardGradeDeviationInFirstCorrection", "meanPointsTotal", "medianTotal", "meanPointsRelativeTotal", "medianRelativeTotal", "meanGradeTotal", "meanPointsTotalInFirstCorrection", "medianTotalInFirstCorrection", "meanPointsRelativeTotalInFirstCorrection", "medianRelativeTotalInFirstCorrection", "meanGradeTotalInFirstCorrection", "sortByProperty", "customCsvOptions", "headers", "generateExportColumnNames", "rows", "map", "convertToExportRow", "exportAsCsv", "exportAsExcel", "keys", "workbook", "utils", "book_new", "ws", "json_to_sheet", "header", "book_append_sheet", "workbookProps", "Title", "Author", "VERSION", "fileName", "writeFile", "Props", "compression", "customOptions", "options", "showLabels", "showTitle", "filename", "useTextFile", "useBom", "columnHeaders", "csvExportOptions", "mkConfig", "assign", "csvData", "generateCsv", "download", "numberToLocalize", "toLocaleString", "accuracyOfScores", "NAME_KEY", "USERNAME_KEY", "EMAIL_KEY", "REGISTRATION_NUMBER_KEY", "EXAM_ASSIGNED_EXERCISE", "EXAM_ACHIEVED_POINTS", "EXAM_ACHIEVED_SCORE", "EXAM_OVERALL_POINTS_KEY", "EXAM_OVERALL_SCORE_KEY", "BONUS_KEY", "GRADE_KEY", "PRESENTATION_SCORE_IN_BONUS_SOURCE_KEY", "BONUS_POINTS_KEY", "BONUS_GRADE_KEY", "FINAL_GRADE_KEY", "EXAM_SUBMITTED", "EXAM_PASSED", "PLAGIARISM_VERDICT_KEY", "PLAGIARISM_VERDICT_IN_BONUS_SOURCE_KEY", "newRowBuilder", "CsvExportRowBuilder", "decimalSeparator", "ExcelExportRowBuilder", "rowData", "setUserInformation", "setPoints", "setScore", "build", "points", "examScoreDTOs", "studentId", "overAllPoints", "regularCalculation", "scoreAchieved", "pointsAchieved", "userId", "userLogin", "Math", "abs", "errorMessage", "JSON", "stringify", "logErrorOnSentry", "captureException", "submissionCount", "percentage", "chartMedian", "passedMedian", "overallMedian", "submittedMedian", "denominator", "determineSubmittedAndNonEmptyValues", "setValuesForSubmittedAndNonEmptyFilter", "setValuesForSubmittedFilter", "determineNonEmptyValues", "setValuesForNonEmptyFilter", "setValuesForNoFilter", "meanPointsSubmittedAndNonEmpty", "overallPointsSubmittedAndNonEmpty", "pointsSubmittedAndNonEmptyInFirstCorrection", "submittedAndNonEmptyGrades", "submittedAndNonEmptyGradesInFirstCorrection", "result", "hasAtLeastOneSubmission", "collectOverallGrades", "collectOverallGradesInFirstCorrection", "determineMeanMedianAndStandardDeviationSubmittedAndNonEmpty", "determineMeanMedianAndStandardDeviationSubmittedAndNonEmptyInFirstCorrection", "determineGradesSubmittedAndNonEmpty", "standardGradeDeviationSubmittedAndNonEmpty", "standardGradeDeviationSubmittedAndNonEmptyInFirstCorrection", "medianSubmittedAndNonEmpty", "meanScoreSubmittedAndNonEmpty", "medianScoreSubmittedAndNonEmpty", "standardDeviationSubmittedAndNonEmpty", "meanPointsSubmittedAndNonEmptyInFirstCorrection", "medianSubmittedAndNonEmptyInFirstCorrection", "meanScoreSubmittedAndNonEmptyInFirstCorrection", "medianScoreSubmittedAndNonEmptyInFirstCorrection", "standardDeviationSubmittedAndNonEmptyInFirstCorrection", "atLeastOneExam", "meanGradeSubmittedAndNonEmpty", "medianGradeSubmittedAndNonEmpty", "meanGradeSubmittedAndNonEmptyInFirstCorrection", "medianGradeSubmittedAndNonEmptyInFirstCorrection", "meanPointsNonEmpty", "overallPointsNonEmpty", "pointsNonEmptyInFirstCorrection", "nonEmptyGrades", "nonEmptyGradesInFirstCorrection", "determineMeanMedianAndStandardDeviationNonEmpty", "determineMeanMedianAndStandardDeviationNonEmptyInFirstCorrection", "determineGradesNonEmpty", "standardGradeDeviationNonEmpty", "standardGradeDeviationNonEmptyInFirstCorrection", "medianNonEmpty", "meanScoreNonEmpty", "medianScoreNonEmpty", "standardDeviationNonEmpty", "meanPointsNonEmptyInFirstCorrection", "medianNonEmptyInFirstCorrection", "meanScoreNonEmptyInFirstCorrection", "medianScoreNonEmptyInFirstCorrection", "standardDeviationNonEmptyInFirstCorrection", "meanGradeNonEmpty", "medianGradeNonEmpty", "meanGradeNonEmptyInFirstCorrection", "medianGradeNonEmptyInFirstCorrection", "grades", "setAverageValuesForSubmittedAndNonEmptyFilter", "setMedianValuesForSubmittedAndNonEmptyFilter", "setStandardDeviationForSubmittedAndNonEmptyFilter", "averagePointsSubmittedAndNonEmpty", "roundAndLocalizeStatisticalValue", "averagePointsSubmittedAndNonEmptyInFirstCorrection", "averageScoreSubmittedAndNonEmpty", "averageScoreSubmittedAndNonEmptyInFirstCorrection", "averageGradeSubmittedAndNonEmpty", "averageGradeSubmittedAndNonEmptyInFirstCorrection", "averageScoreTotalInFirstCorrection", "medianPointsSubmittedAndNonEmpty", "medianPointsSubmittedAndNonEmptyInFirstCorrection", "setAverageValuesForNonEmptyFilter", "setMedianValuesForNonEmptyFilter", "setStandardDeviationForNonEmptyFilter", "setAverageValuesForSubmittedFilter", "setMedianValuesForSubmittedFilter", "setStandardDeviationForSubmittedFilter", "averageGradeSubmittedInFirstCorrectionRound", "standardDeviationPointsSubmitted", "standardDeviationPointsSubmittedInFirstCorrection", "setSubmittedValuesForNoFilter", "setTotalValuesForNoFilter", "setTotalAverageValuesForNoFilter", "setTotalMedianValuesForNoFilter", "setTotalStandardDeviationForNoFilter", "setSubmittedAverageValuesForNoFilter", "setSubmittedMedianValuesForNoFilter", "setSubmittedStandardDeviationsForNoFilter", "value", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "ExamScoresComponent_Conditional_2_Template", "ExamScoresComponent_Conditional_3_Template", "ExamScoresComponent_Conditional_4_Template", "RouterLink", "ExamScoresAverageScoresGraphComponent", "ParticipantScoresDistributionComponent", "ExportButtonComponent", "HelpIconComponent", "SortByDirective", "SortDirective", "TranslateDirective", "ArtemisTranslatePipe", "FontAwesomeModule", "FaIconComponent", "CommonModule", "NgStyle", "styles", "changeDetection"]
}
