{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/manage/modeling-exercise-resolver.service.ts"],
  "sourcesContent": ["import { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ModelingExerciseService } from 'app/exercises/modeling/manage/modeling-exercise.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { UMLDiagramType } from '@ls1intum/apollon';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ModelingExerciseResolver implements Resolve<ModelingExercise> {\r\n    private modelingExerciseService = inject(ModelingExerciseService);\r\n    private courseService = inject(CourseManagementService);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n\r\n    resolve(route: ActivatedRouteSnapshot) {\r\n        if (route.params['exerciseId']) {\r\n            return this.modelingExerciseService.find(route.params['exerciseId'], true).pipe(\r\n                filter((res) => !!res.body),\r\n                map((modelingExercise: HttpResponse<ModelingExercise>) => modelingExercise.body!),\r\n            );\r\n        } else if (route.params['courseId']) {\r\n            if (route.params['examId'] && route.params['exerciseGroupId']) {\r\n                return this.exerciseGroupService.find(route.params['courseId'], route.params['examId'], route.params['exerciseGroupId']).pipe(\r\n                    filter((res) => !!res.body),\r\n                    map((exerciseGroup: HttpResponse<ExerciseGroup>) => new ModelingExercise(UMLDiagramType.ClassDiagram, undefined, exerciseGroup.body || undefined)),\r\n                );\r\n            } else {\r\n                return this.courseService.find(route.params['courseId']).pipe(\r\n                    filter((res) => !!res.body),\r\n                    map((course: HttpResponse<Course>) => new ModelingExercise(UMLDiagramType.ClassDiagram, course.body || undefined, undefined)),\r\n                );\r\n            }\r\n        }\r\n        return of(new ModelingExercise(UMLDiagramType.ClassDiagram, undefined, undefined));\r\n    }\r\n}\r\n"],
  "mappings": "8QAcA,IAAaA,GAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACzBC,wBAA0BC,EAAOC,CAAuB,EACxDC,cAAgBF,EAAOG,CAAuB,EAC9CC,qBAAuBJ,EAAOK,CAAoB,EAE1DC,QAAQC,EAA6B,CACjC,OAAIA,EAAMC,OAAO,WACN,KAAKT,wBAAwBU,KAAKF,EAAMC,OAAO,WAAe,EAAI,EAAEE,KACvEC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKC,GAAqDA,EAAiBF,IAAK,CAAC,EAE9EN,EAAMC,OAAO,SAChBD,EAAMC,OAAO,QAAaD,EAAMC,OAAO,gBAChC,KAAKJ,qBAAqBK,KAAKF,EAAMC,OAAO,SAAaD,EAAMC,OAAO,OAAWD,EAAMC,OAAO,eAAkB,EAAEE,KACrHC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKE,GAA+C,IAAIC,EAAiBC,EAAeC,aAAcC,OAAWJ,EAAcH,MAAQO,MAAS,CAAC,CAAC,EAG/I,KAAKlB,cAAcO,KAAKF,EAAMC,OAAO,QAAW,EAAEE,KACrDC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKO,GAAiC,IAAIJ,EAAiBC,EAAeC,aAAcE,EAAOR,MAAQO,OAAWA,MAAS,CAAC,CAAC,EAIlIE,EAAG,IAAIL,EAAiBC,EAAeC,aAAcC,OAAWA,MAAS,CAAC,CACrF,4CAzBStB,EAAwB,6BAAxBA,EAAwByB,QAAxBzB,EAAwB0B,UAAAC,WADX,MAAM,CAAA,SACnB3B,CAAwB,GAAA",
  "names": ["ModelingExerciseResolver", "modelingExerciseService", "inject", "ModelingExerciseService", "courseService", "CourseManagementService", "exerciseGroupService", "ExerciseGroupService", "resolve", "route", "params", "find", "pipe", "filter", "res", "body", "map", "modelingExercise", "exerciseGroup", "ModelingExercise", "UMLDiagramType", "ClassDiagram", "undefined", "course", "of", "factory", "\u0275fac", "providedIn"]
}
