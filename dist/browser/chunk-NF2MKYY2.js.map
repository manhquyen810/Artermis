{
  "version": 3,
  "sources": ["src/main/webapp/app/course/manage/course-admin.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { objectToJsonBlob } from 'app/utils/blob-util';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { CourseDeletionSummaryDTO } from 'app/entities/course-deletion-summary.model';\r\n\r\nexport type EntityResponseType = HttpResponse<Course>;\r\nexport type EntityArrayResponseType = HttpResponse<Course[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseAdminService {\r\n    private http = inject(HttpClient);\r\n    private courseManagementService = inject(CourseManagementService);\r\n\r\n    private resourceUrl = 'api/core/admin/courses';\r\n\r\n    /**\r\n     * finds all groups for all courses using a GET request\r\n     */\r\n    getAllGroupsForAllCourses(): Observable<HttpResponse<string[]>> {\r\n        return this.http.get<string[]>(this.resourceUrl + '/groups', { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * creates a course using a POST request\r\n     * @param course - the course to be created on the server\r\n     * @param courseImage - the course icon file\r\n     */\r\n    create(course: Course, courseImage?: Blob): Observable<EntityResponseType> {\r\n        const copy = CourseManagementService.convertCourseDatesFromClient(course);\r\n        const formData = new FormData();\r\n        formData.append('course', objectToJsonBlob(copy));\r\n        if (courseImage) {\r\n            // The image was cropped by us and is a blob, so we need to set a placeholder name for the server check\r\n            formData.append('file', courseImage, 'placeholderName.png');\r\n        }\r\n\r\n        return this.http\r\n            .post<Course>(this.resourceUrl, formData, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.courseManagementService.processCourseEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * deletes the course corresponding to the given unique identifier using a DELETE request\r\n     * @param courseId - the id of the course to be deleted\r\n     */\r\n    delete(courseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${courseId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Returns a summary for the course providing information potentially relevant for the deletion.\r\n     * @param courseId - the id of the course to get the deletion summary for\r\n     */\r\n    getDeletionSummary(courseId: number): Observable<HttpResponse<CourseDeletionSummaryDTO>> {\r\n        return this.http.get<CourseDeletionSummaryDTO>(`${this.resourceUrl}/${courseId}/deletion-summary`, { observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "2KAaA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACnBC,KAAOC,EAAOC,CAAU,EACxBC,wBAA0BF,EAAOG,CAAuB,EAExDC,YAAc,yBAKtBC,2BAAyB,CACrB,OAAO,KAAKN,KAAKO,IAAc,KAAKF,YAAc,UAAW,CAAEG,QAAS,UAAU,CAAE,CACxF,CAOAC,OAAOC,EAAgBC,EAAkB,CACrC,IAAMC,EAAOR,EAAwBS,6BAA6BH,CAAM,EAClEI,EAAW,IAAIC,SACrBD,OAAAA,EAASE,OAAO,SAAUC,EAAiBL,CAAI,CAAC,EAC5CD,GAEAG,EAASE,OAAO,OAAQL,EAAa,qBAAqB,EAGvD,KAAKX,KACPkB,KAAa,KAAKb,YAAaS,EAAU,CAAEN,QAAS,UAAU,CAAE,EAChEW,KAAKC,EAAKC,GAA4B,KAAKlB,wBAAwBmB,gCAAgCD,CAAG,CAAC,CAAC,CACjH,CAMAE,OAAOC,EAAgB,CACnB,OAAO,KAAKxB,KAAKuB,OAAa,GAAG,KAAKlB,WAAW,IAAImB,CAAQ,GAAI,CAAEhB,QAAS,UAAU,CAAE,CAC5F,CAMAiB,mBAAmBD,EAAgB,CAC/B,OAAO,KAAKxB,KAAKO,IAA8B,GAAG,KAAKF,WAAW,IAAImB,CAAQ,oBAAqB,CAAEhB,QAAS,UAAU,CAAE,CAC9H,4CA9CST,EAAkB,6BAAlBA,EAAkB2B,QAAlB3B,EAAkB4B,UAAAC,WADL,MAAM,CAAA,SACnB7B,CAAkB,GAAA",
  "names": ["CourseAdminService", "http", "inject", "HttpClient", "courseManagementService", "CourseManagementService", "resourceUrl", "getAllGroupsForAllCourses", "get", "observe", "create", "course", "courseImage", "copy", "convertCourseDatesFromClient", "formData", "FormData", "append", "objectToJsonBlob", "post", "pipe", "map", "res", "processCourseEntityResponseType", "delete", "courseId", "getDeletionSummary", "factory", "\u0275fac", "providedIn"]
}
