{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/cleanup-service/data-cleanup.service.ts", "src/main/webapp/app/admin/cleanup-service/cleanup-operation-modal.component.ts", "src/main/webapp/app/admin/cleanup-service/cleanup-operation-modal.component.html", "src/main/webapp/app/admin/cleanup-service/cleanup-service.component.ts", "src/main/webapp/app/admin/cleanup-service/cleanup-service.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { convertDateFromClient } from 'app/utils/date.utils';\r\n\r\nexport interface CleanupServiceExecutionRecordDTO {\r\n    executionDate: dayjs.Dayjs;\r\n    jobType: string;\r\n}\r\n\r\nexport interface CleanupCount {\r\n    totalCount: number;\r\n}\r\n\r\nexport interface OrphanCleanupCountDTO extends CleanupCount {\r\n    orphanFeedback: number;\r\n    orphanLongFeedbackText: number;\r\n    orphanTextBlock: number;\r\n    orphanStudentScore: number;\r\n    orphanTeamScore: number;\r\n    orphanFeedbackForOrphanResults: number;\r\n    orphanLongFeedbackTextForOrphanResults: number;\r\n    orphanTextBlockForOrphanResults: number;\r\n    orphanRating: number;\r\n    orphanResultsWithoutParticipation: number;\r\n}\r\n\r\nexport interface PlagiarismComparisonCleanupCountDTO extends CleanupCount {\r\n    plagiarismComparison: number;\r\n    plagiarismElements: number;\r\n    plagiarismSubmissions: number;\r\n    plagiarismMatches: number;\r\n}\r\n\r\nexport interface NonLatestNonRatedResultsCleanupCountDTO extends CleanupCount {\r\n    longFeedbackText: number;\r\n    textBlock: number;\r\n    feedback: number;\r\n}\r\n\r\nexport interface NonLatestRatedResultsCleanupCountDTO extends CleanupCount {\r\n    longFeedbackText: number;\r\n    textBlock: number;\r\n    feedback: number;\r\n}\r\n\r\nexport interface SubmissionVersionsCleanupCountDTO extends CleanupCount {\r\n    submissionVersions: number;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataCleanupService {\r\n    private readonly adminResourceUrl = 'api/core/admin/cleanup';\r\n    private http = inject(HttpClient);\r\n\r\n    /**\r\n     * Send DELETE request to delete orphaned data.\r\n     * @returns An observable of type HttpResponse<CleanupServiceExecutionRecordDTO>.\r\n     */\r\n    deleteOrphans(): Observable<HttpResponse<CleanupServiceExecutionRecordDTO>> {\r\n        return this.http.delete<CleanupServiceExecutionRecordDTO>(`${this.adminResourceUrl}/orphans`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send DELETE request to delete plagiarism comparisons within a specific date range.\r\n     * @param deleteFrom the start date from which plagiarism comparisons should be deleted\r\n     * @param deleteTo the end date until which plagiarism comparisons should be deleted\r\n     */\r\n    deletePlagiarismComparisons(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<CleanupServiceExecutionRecordDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.delete<CleanupServiceExecutionRecordDTO>(`${this.adminResourceUrl}/plagiarism-comparisons`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send DELETE request to delete non-rated results within a specific date range.\r\n     * @param deleteFrom the start date from which non-rated results should be deleted\r\n     * @param deleteTo the end date until which non-rated results should be deleted\r\n     */\r\n    deleteNonRatedResults(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<CleanupServiceExecutionRecordDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.delete<CleanupServiceExecutionRecordDTO>(`${this.adminResourceUrl}/non-rated-results`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send DELETE request to delete old rated results within a specific date range.\r\n     * @param deleteFrom the start date from which old rated results should be deleted\r\n     * @param deleteTo the end date until which old rated results should be deleted\r\n     */\r\n    deleteOldRatedResults(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<CleanupServiceExecutionRecordDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.delete<CleanupServiceExecutionRecordDTO>(`${this.adminResourceUrl}/old-rated-results`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send DELETE request to delete old submission versions within a specific date range.\r\n     * @param deleteFrom the start date from which old rated results should be deleted\r\n     * @param deleteTo the end date until which old rated results should be deleted\r\n     */\r\n    deleteOldSubmissionVersions(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<CleanupServiceExecutionRecordDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.delete<CleanupServiceExecutionRecordDTO>(`${this.adminResourceUrl}/old-submission-versions`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send GET request to get the last executions.\r\n     * @returns An observable of type HttpResponse<CleanupServiceExecutionRecordDTO[]>.\r\n     */\r\n    getLastExecutions(): Observable<HttpResponse<CleanupServiceExecutionRecordDTO[]>> {\r\n        return this.http.get<CleanupServiceExecutionRecordDTO[]>(`${this.adminResourceUrl}/last-executions`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send GET request to count orphaned data.\r\n     * @returns An observable of type HttpResponse<OrphanCleanupCountDTO>.\r\n     */\r\n    countOrphans(): Observable<HttpResponse<OrphanCleanupCountDTO>> {\r\n        return this.http.get<OrphanCleanupCountDTO>(`${this.adminResourceUrl}/orphans/count`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send GET request to count plagiarism comparisons within a specific date range.\r\n     * @param deleteFrom the start date for counting\r\n     * @param deleteTo the end date for counting\r\n     * @returns An observable of type HttpResponse<PlagiarismComparisonCleanupCountDTO>.\r\n     */\r\n    countPlagiarismComparisons(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<PlagiarismComparisonCleanupCountDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.get<PlagiarismComparisonCleanupCountDTO>(`${this.adminResourceUrl}/plagiarism-comparisons/count`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send GET request to count non-rated results within a specific date range.\r\n     * @param deleteFrom the start date for counting\r\n     * @param deleteTo the end date for counting\r\n     * @returns An observable of type HttpResponse<NonLatestNonRatedResultsCleanupCountDTO>.\r\n     */\r\n    countNonRatedResults(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<NonLatestNonRatedResultsCleanupCountDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.get<NonLatestNonRatedResultsCleanupCountDTO>(`${this.adminResourceUrl}/non-rated-results/count`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send GET request to count old rated results within a specific date range.\r\n     * @param deleteFrom the start date for counting\r\n     * @param deleteTo the end date for counting\r\n     * @returns An observable of type HttpResponse<NonLatestRatedResultsCleanupCountDTO>.\r\n     */\r\n    countOldRatedResults(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<NonLatestRatedResultsCleanupCountDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.get<NonLatestRatedResultsCleanupCountDTO>(`${this.adminResourceUrl}/old-rated-results/count`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send GET request to count old submission versions within a specific date range.\r\n     * @param deleteFrom the start date for counting\r\n     * @param deleteTo the end date for counting\r\n     * @returns An observable of type HttpResponse<SubmissionVersionsCleanupCountDTO>.\r\n     */\r\n    countOldSubmissionVersions(deleteFrom: dayjs.Dayjs, deleteTo: dayjs.Dayjs): Observable<HttpResponse<SubmissionVersionsCleanupCountDTO>> {\r\n        const deleteFromString = convertDateFromClient(deleteFrom)!;\r\n        const deleteToString = convertDateFromClient(deleteTo)!;\r\n        return this.http.get<SubmissionVersionsCleanupCountDTO>(`${this.adminResourceUrl}/old-submission-versions/count`, {\r\n            params: { deleteFrom: deleteFromString, deleteTo: deleteToString },\r\n            observe: 'response',\r\n        });\r\n    }\r\n}\r\n", "import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Component, OnInit, inject, input } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CleanupOperation } from 'app/admin/cleanup-service/cleanup-operation.model';\r\nimport { CleanupCount, DataCleanupService } from 'app/admin/cleanup-service/data-cleanup.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { faCheckCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-cleanup-operation-modal',\r\n    templateUrl: './cleanup-operation-modal.component.html',\r\n    imports: [TranslateDirective, ArtemisDatePipe, ArtemisTranslatePipe, FontAwesomeModule],\r\n})\r\nexport class CleanupOperationModalComponent implements OnInit {\r\n    operation = input.required<CleanupOperation>();\r\n    counts: CleanupCount = { totalCount: 0 };\r\n    operationExecuted = false;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError = this.dialogErrorSource.asObservable();\r\n\r\n    public activeModal: NgbActiveModal = inject(NgbActiveModal);\r\n    private dataCleanupService: DataCleanupService = inject(DataCleanupService);\r\n\r\n    faTimes = faTimes;\r\n    faCheckCircle = faCheckCircle;\r\n\r\n    /**\r\n     * Fetch keys from the CleanupCount object for iteration.\r\n     */\r\n    get cleanupKeys(): (keyof CleanupCount)[] {\r\n        return Object.keys(this.counts) as (keyof CleanupCount)[];\r\n    }\r\n\r\n    /**\r\n     * Close the modal.\r\n     */\r\n    close(): void {\r\n        this.activeModal.close();\r\n    }\r\n\r\n    /**\r\n     * Initialize component: fetch initial counts for the operation.\r\n     */\r\n    ngOnInit(): void {\r\n        this.updateCounts();\r\n    }\r\n\r\n    /**\r\n     * Execute the cleanup operation and update counts afterward.\r\n     */\r\n    executeCleanupOperation(): void {\r\n        const operationHandler = {\r\n            next: () => {\r\n                this.operationExecuted = true;\r\n                this.updateCounts();\r\n            },\r\n            error: (error: any) => {\r\n                this.dialogErrorSource.next(error instanceof HttpErrorResponse ? error.message : 'An unexpected error occurred.');\r\n            },\r\n        };\r\n\r\n        switch (this.operation().name) {\r\n            case 'deleteOrphans':\r\n                this.dataCleanupService.deleteOrphans().subscribe(operationHandler);\r\n                break;\r\n            case 'deletePlagiarismComparisons':\r\n                this.dataCleanupService.deletePlagiarismComparisons(this.operation().deleteFrom, this.operation().deleteTo).subscribe(operationHandler);\r\n                break;\r\n            case 'deleteNonRatedResults':\r\n                this.dataCleanupService.deleteNonRatedResults(this.operation().deleteFrom, this.operation().deleteTo).subscribe(operationHandler);\r\n                break;\r\n            case 'deleteOldRatedResults':\r\n                this.dataCleanupService.deleteOldRatedResults(this.operation().deleteFrom, this.operation().deleteTo).subscribe(operationHandler);\r\n                break;\r\n            case 'deleteOldSubmissionVersions':\r\n                this.dataCleanupService.deleteOldSubmissionVersions(this.operation().deleteFrom, this.operation().deleteTo).subscribe(operationHandler);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch counts for the operation.\r\n     */\r\n    private fetchCounts(): Observable<HttpResponse<CleanupCount>> {\r\n        switch (this.operation().name) {\r\n            case 'deleteOrphans':\r\n                return this.dataCleanupService.countOrphans();\r\n            case 'deletePlagiarismComparisons':\r\n                return this.dataCleanupService.countPlagiarismComparisons(this.operation().deleteFrom, this.operation().deleteTo);\r\n            case 'deleteNonRatedResults':\r\n                return this.dataCleanupService.countNonRatedResults(this.operation().deleteFrom, this.operation().deleteTo);\r\n            case 'deleteOldRatedResults':\r\n                return this.dataCleanupService.countOldRatedResults(this.operation().deleteFrom, this.operation().deleteTo);\r\n            case 'deleteOldSubmissionVersions':\r\n                return this.dataCleanupService.countOldSubmissionVersions(this.operation().deleteFrom, this.operation().deleteTo);\r\n            default:\r\n                throw new Error(`Unsupported operation: ${this.operation().name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch updated counts after operation execution.\r\n     */\r\n    private updateCounts(): void {\r\n        this.fetchCounts().subscribe({\r\n            next: (response: HttpResponse<CleanupCount>) => {\r\n                this.counts = response.body!;\r\n            },\r\n            error: () => this.dialogErrorSource.next('An error occurred while fetching updated counts.'),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Getter to check if there are any entries to delete.\r\n     */\r\n    get hasEntriesToDelete(): boolean {\r\n        return Object.values(this.counts).some((count) => count > 0);\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" [jhiTranslate]=\"'cleanupService.operation.' + operation().name\"></h4>\r\n    <button type=\"button\" class=\"btn-close\" (click)=\"close()\" aria-label=\"Close\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    @if (operation().name === 'deleteOrphans') {\r\n        <p\r\n            [jhiTranslate]=\"'cleanupService.execute.questionWithoutDates'\"\r\n            [translateValues]=\"{\r\n                operationName: 'cleanupService.operation.' + operation().name | artemisTranslate,\r\n            }\"\r\n        ></p>\r\n    } @else {\r\n        <p\r\n            [jhiTranslate]=\"'cleanupService.execute.question'\"\r\n            [translateValues]=\"{\r\n                operationName: 'cleanupService.operation.' + operation().name | artemisTranslate,\r\n                deleteFrom: operation().deleteFrom | artemisDate,\r\n                deleteTo: operation().deleteTo | artemisDate,\r\n            }\"\r\n        ></p>\r\n    }\r\n    <div>\r\n        <p jhiTranslate=\"cleanupService.modal.affectedEntities\"></p>\r\n        <ul>\r\n            @for (key of cleanupKeys; track key) {\r\n                <li>\r\n                    <span [jhiTranslate]=\"'cleanupService.entities.' + key\"></span>\r\n                    : {{ counts[key] }}\r\n                    @if (operationExecuted) {\r\n                        @if (counts[key] > 0) {\r\n                            <fa-icon [icon]=\"faTimes\" class=\"text-danger\" />\r\n                        } @else {\r\n                            <fa-icon [icon]=\"faCheckCircle\" class=\"text-success\" />\r\n                        }\r\n                    }\r\n                </li>\r\n            }\r\n        </ul>\r\n        @if (!hasEntriesToDelete) {\r\n            <p class=\"text-muted\" jhiTranslate=\"cleanupService.modal.noEntriesToDelete\"></p>\r\n        }\r\n    </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\" jhiTranslate=\"cleanupService.button.close\"></button>\r\n    <button type=\"button\" class=\"btn btn-danger\" [disabled]=\"!hasEntriesToDelete\" (click)=\"executeCleanupOperation()\" jhiTranslate=\"cleanupService.button.execute\"></button>\r\n</div>\r\n", "import { Component, OnInit, inject, signal } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport { CleanupOperation } from 'app/admin/cleanup-service/cleanup-operation.model';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { CleanupServiceExecutionRecordDTO, DataCleanupService } from 'app/admin/cleanup-service/data-cleanup.service';\r\n\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CleanupOperationModalComponent } from 'app/admin/cleanup-service/cleanup-operation-modal.component';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-cleanup-service',\r\n    templateUrl: './cleanup-service.component.html',\r\n    imports: [FormDateTimePickerComponent, ArtemisTranslatePipe, HelpIconComponent, TranslateDirective, FormsModule, ArtemisDatePipe],\r\n})\r\nexport class CleanupServiceComponent implements OnInit {\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError = this.dialogErrorSource.asObservable();\r\n\r\n    private dataCleanupService: DataCleanupService = inject(DataCleanupService);\r\n    private modalService: NgbModal = inject(NgbModal);\r\n\r\n    cleanupOperations: CleanupOperation[] = [\r\n        {\r\n            name: 'deleteOrphans',\r\n            deleteFrom: dayjs().subtract(12, 'months'),\r\n            deleteTo: dayjs().subtract(6, 'months'),\r\n            lastExecuted: undefined,\r\n            datesValid: signal(true),\r\n        },\r\n        {\r\n            name: 'deletePlagiarismComparisons',\r\n            deleteFrom: dayjs().subtract(12, 'months'),\r\n            deleteTo: dayjs().subtract(6, 'months'),\r\n            lastExecuted: undefined,\r\n            datesValid: signal(true),\r\n        },\r\n        {\r\n            name: 'deleteNonRatedResults',\r\n            deleteFrom: dayjs().subtract(12, 'months'),\r\n            deleteTo: dayjs().subtract(6, 'months'),\r\n            lastExecuted: undefined,\r\n            datesValid: signal(true),\r\n        },\r\n        {\r\n            name: 'deleteOldRatedResults',\r\n            deleteFrom: dayjs().subtract(12, 'months'),\r\n            deleteTo: dayjs().subtract(6, 'months'),\r\n            lastExecuted: undefined,\r\n            datesValid: signal(true),\r\n        },\r\n        {\r\n            name: 'deleteOldSubmissionVersions',\r\n            deleteFrom: dayjs().subtract(12, 'months'),\r\n            deleteTo: dayjs().subtract(6, 'months'),\r\n            lastExecuted: undefined,\r\n            datesValid: signal(true),\r\n        },\r\n    ];\r\n\r\n    ngOnInit(): void {\r\n        this.loadLastExecutions();\r\n    }\r\n\r\n    loadLastExecutions(): void {\r\n        this.dataCleanupService.getLastExecutions().subscribe((executionRecordsBody: HttpResponse<CleanupServiceExecutionRecordDTO[]>) => {\r\n            const executionRecords = executionRecordsBody.body!;\r\n            if (executionRecords && executionRecords.length > 0) {\r\n                this.cleanupOperations.forEach((operation, index) => {\r\n                    const executionRecord = executionRecords[index];\r\n                    if (executionRecord && executionRecord.executionDate) {\r\n                        operation.lastExecuted = convertDateFromServer(executionRecord.executionDate);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    validateDates(operation: CleanupOperation): void {\r\n        const datesValid = operation.deleteFrom && operation.deleteTo && dayjs(operation.deleteTo).isAfter(dayjs(operation.deleteFrom));\r\n        operation.datesValid.set(datesValid);\r\n    }\r\n\r\n    /**\r\n     * Handles displaying the modal with operation details and counts.\r\n     */\r\n    openCleanupOperationModal(operation: CleanupOperation): void {\r\n        const modalRef = this.modalService.open(CleanupOperationModalComponent, { size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.operation = signal<CleanupOperation>(operation);\r\n    }\r\n}\r\n", "<div>\r\n    <h2>\r\n        <span id=\"cleanup-page-heading\" jhiTranslate=\"cleanupService.title\"></span>\r\n    </h2>\r\n    <div class=\"table-responsive\">\r\n        <table id=\"cleanupOperations\" class=\"table table-striped\" aria-describedby=\"cleanup-page-heading\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" jhiTranslate=\"cleanupService.table.operation\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"cleanupService.table.deleteFrom\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"cleanupService.table.deleteTo\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"cleanupService.table.lastExecuted\"></th>\r\n                    <th scope=\"col\"></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (operation of cleanupOperations; track operation) {\r\n                    <tr>\r\n                        <td>\r\n                            <span [jhiTranslate]=\"'cleanupService.operation.' + operation.name\"></span>\r\n                            <jhi-help-icon class=\"ps-1\" text=\"{{ 'cleanupService.tooltip.' + operation.name }}\" />\r\n                        </td>\r\n                        <td>\r\n                            @if (operation.name !== 'deleteOrphans') {\r\n                                <div class=\"col-md-12\">\r\n                                    <jhi-date-time-picker\r\n                                        id=\"deleteFromDate\"\r\n                                        [labelName]=\"'cleanupService.table.deleteFrom' | artemisTranslate\"\r\n                                        [hideLabelName]=\"true\"\r\n                                        [(ngModel)]=\"operation.deleteFrom\"\r\n                                        (valueChange)=\"validateDates(operation)\"\r\n                                        [shouldDisplayTimeZoneWarning]=\"false\"\r\n                                        [error]=\"!operation.datesValid()\"\r\n                                    />\r\n                                </div>\r\n                            }\r\n                        </td>\r\n                        <td>\r\n                            @if (operation.name !== 'deleteOrphans') {\r\n                                <div class=\"col-md-12\">\r\n                                    <jhi-date-time-picker\r\n                                        id=\"deleteToDate\"\r\n                                        [labelName]=\"'cleanupService.table.deleteTo' | artemisTranslate\"\r\n                                        [hideLabelName]=\"true\"\r\n                                        [(ngModel)]=\"operation.deleteTo\"\r\n                                        (valueChange)=\"validateDates(operation)\"\r\n                                        [shouldDisplayTimeZoneWarning]=\"false\"\r\n                                        [error]=\"!operation.datesValid()\"\r\n                                    />\r\n                                </div>\r\n                                @if (!operation.datesValid()) {\r\n                                    <span class=\"invalid-feedback\" jhiTranslate=\"cleanupService.error.datesInvalid\"></span>\r\n                                }\r\n                            }\r\n                        </td>\r\n                        <td>\r\n                            @if (!operation.lastExecuted) {\r\n                                {{ 'cleanupService.notRunYet' | artemisTranslate }}\r\n                            } @else {\r\n                                {{ operation.lastExecuted | artemisDate }}\r\n                            }\r\n                        </td>\r\n                        <td>\r\n                            <button id=\"execute-operation\" class=\"btn btn-md btn-danger\" [disabled]=\"!operation.datesValid()\" (click)=\"openCleanupOperationModal(operation)\">\r\n                                {{ 'entity.action.delete' | artemisTranslate }}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "mmCAoDA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACVC,iBAAmB,yBAC5BC,KAAOC,EAAOC,CAAU,EAMhCC,eAAa,CACT,OAAO,KAAKH,KAAKI,OAAyC,GAAG,KAAKL,gBAAgB,WAAY,CAC1FM,QAAS,WACZ,CACL,CAOAC,4BAA4BC,EAAyBC,EAAqB,CACtE,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKI,OAAyC,GAAG,KAAKL,gBAAgB,0BAA2B,CACzGa,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAOAQ,sBAAsBN,EAAyBC,EAAqB,CAChE,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKI,OAAyC,GAAG,KAAKL,gBAAgB,qBAAsB,CACpGa,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAOAS,sBAAsBP,EAAyBC,EAAqB,CAChE,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKI,OAAyC,GAAG,KAAKL,gBAAgB,qBAAsB,CACpGa,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAOAU,4BAA4BR,EAAyBC,EAAqB,CACtE,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKI,OAAyC,GAAG,KAAKL,gBAAgB,2BAA4B,CAC1Ga,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAMAW,mBAAiB,CACb,OAAO,KAAKhB,KAAKiB,IAAwC,GAAG,KAAKlB,gBAAgB,mBAAoB,CACjGM,QAAS,WACZ,CACL,CAMAa,cAAY,CACR,OAAO,KAAKlB,KAAKiB,IAA2B,GAAG,KAAKlB,gBAAgB,iBAAkB,CAClFM,QAAS,WACZ,CACL,CAQAc,2BAA2BZ,EAAyBC,EAAqB,CACrE,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKiB,IAAyC,GAAG,KAAKlB,gBAAgB,gCAAiC,CAC/Ga,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAQAe,qBAAqBb,EAAyBC,EAAqB,CAC/D,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKiB,IAA6C,GAAG,KAAKlB,gBAAgB,2BAA4B,CAC9Ga,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAQAgB,qBAAqBd,EAAyBC,EAAqB,CAC/D,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKiB,IAA0C,GAAG,KAAKlB,gBAAgB,2BAA4B,CAC3Ga,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,CAQAiB,2BAA2Bf,EAAyBC,EAAqB,CACrE,IAAMC,EAAmBC,EAAsBH,CAAU,EACnDI,EAAiBD,EAAsBF,CAAQ,EACrD,OAAO,KAAKR,KAAKiB,IAAuC,GAAG,KAAKlB,gBAAgB,iCAAkC,CAC9Ga,OAAQ,CAAEL,WAAYE,EAAkBD,SAAUG,CAAc,EAChEN,QAAS,WACZ,CACL,4CApJSP,EAAkB,6BAAlBA,EAAkByB,QAAlBzB,EAAkB0B,UAAAC,WADL,MAAM,CAAA,SACnB3B,CAAkB,GAAA,kHE9CvB4B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,IAAA,CAAA,0BAMJD,EAAA,EAAA;KAAA,kBALQE,EAAA,EAAAC,EAAA,eAAA,6CAAA,EAA8D,kBAAAC,EAAA,EAAAC,GAAAC,EAAA,EAAA,EAAA,4BAAAC,EAAAC,UAAA,EAAAC,IAAA,CAAA,CAAA,6BAMlET,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,IAAA,CAAA,gEAQJD,EAAA,EAAA;KAAA,kBAPQE,EAAA,EAAAC,EAAA,eAAA,iCAAA,EAAkD,kBAAAO,EAAA,EAAAC,GAAAL,EAAA,EAAA,EAAA,4BAAAC,EAAAC,UAAA,EAAAC,IAAA,EAAAH,EAAA,EAAA,EAAAC,EAAAC,UAAA,EAAAI,UAAA,EAAAN,EAAA,EAAA,EAAAC,EAAAC,UAAA,EAAAK,QAAA,CAAA,CAAA,6BAiBlCb,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;yBAAA,mBADaE,EAAA,EAAAC,EAAA,OAAAI,EAAAO,OAAA,6BAETd,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;yBAAA,mBADaE,EAAA,EAAAC,EAAA,OAAAI,EAAAQ,aAAA,6BAHbf,EAAA,EAAA;yBAAA,EAAAgB,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAuB,EAAAC,GAAA,EAAA,CAAA,kCAAvBhB,EAAA,EAAAiB,EAAAZ,EAAAa,OAAAC,CAAA,EAAA,EAAA,EAAA,CAAA,6BAJRrB,EAAA,EAAA;iBAAA,EAAAsB,EAAA,EAAA,IAAA,EACItB,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACAD,EAAA,CAAA,EACAgB,EAAA,EAAAO,GAAA,EAAA,CAAA,EAOJC,EAAA,EACJxB,EAAA,EAAA;aAAA,gCAVcE,EAAA,CAAA,EAAAC,EAAA,eAAA,2BAAAkB,CAAA,EACNnB,EAAA,EAAAuB,EAAA;wBAAAlB,EAAAa,OAAAC,CAAA,EAAA;qBAAA,EACAnB,EAAA,EAAAiB,EAAAZ,EAAAmB,kBAAA,EAAA,EAAA,0BAWR1B,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,IAAA,EAAA,EACJD,EAAA,EAAA;SAAA,GDvBR,IAAa2B,IAA8B,IAAA,CAArC,MAAOA,CAA8B,CACvCnB,UAAYoB,EAAMC,SAAQ,EAC1BT,OAAuB,CAAEU,WAAY,CAAC,EACtCJ,kBAAoB,GAEZK,kBAAoB,IAAIC,EAChCC,YAAc,KAAKF,kBAAkBG,aAAY,EAE1CC,YAA8BC,EAAOC,CAAc,EAClDC,mBAAyCF,EAAOG,CAAkB,EAE1EzB,QAAUA,EACVC,cAAgBA,EAKhB,IAAIyB,aAAW,CACX,OAAOC,OAAOC,KAAK,KAAKtB,MAAM,CAClC,CAKAuB,OAAK,CACD,KAAKR,YAAYQ,MAAK,CAC1B,CAKAC,UAAQ,CACJ,KAAKC,aAAY,CACrB,CAKAC,yBAAuB,CACnB,IAAMC,EAAmB,CACrBC,KAAMA,IAAK,CACP,KAAKtB,kBAAoB,GACzB,KAAKmB,aAAY,CACrB,EACAI,MAAQA,GAAc,CAClB,KAAKlB,kBAAkBiB,KAAKC,aAAiBC,EAAoBD,EAAME,QAAU,+BAA+B,CACpH,GAGJ,OAAQ,KAAK3C,UAAS,EAAGC,KAAI,CACzB,IAAK,gBACD,KAAK6B,mBAAmBc,cAAa,EAAGC,UAAUN,CAAgB,EAClE,MACJ,IAAK,8BACD,KAAKT,mBAAmBgB,4BAA4B,KAAK9C,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EAAEwC,UAAUN,CAAgB,EACtI,MACJ,IAAK,wBACD,KAAKT,mBAAmBiB,sBAAsB,KAAK/C,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EAAEwC,UAAUN,CAAgB,EAChI,MACJ,IAAK,wBACD,KAAKT,mBAAmBkB,sBAAsB,KAAKhD,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EAAEwC,UAAUN,CAAgB,EAChI,MACJ,IAAK,8BACD,KAAKT,mBAAmBmB,4BAA4B,KAAKjD,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EAAEwC,UAAUN,CAAgB,EACtI,KACR,CACJ,CAKQW,aAAW,CACf,OAAQ,KAAKlD,UAAS,EAAGC,KAAI,CACzB,IAAK,gBACD,OAAO,KAAK6B,mBAAmBqB,aAAY,EAC/C,IAAK,8BACD,OAAO,KAAKrB,mBAAmBsB,2BAA2B,KAAKpD,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EACpH,IAAK,wBACD,OAAO,KAAKyB,mBAAmBuB,qBAAqB,KAAKrD,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EAC9G,IAAK,wBACD,OAAO,KAAKyB,mBAAmBwB,qBAAqB,KAAKtD,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EAC9G,IAAK,8BACD,OAAO,KAAKyB,mBAAmByB,2BAA2B,KAAKvD,UAAS,EAAGI,WAAY,KAAKJ,UAAS,EAAGK,QAAQ,EACpH,QACI,MAAM,IAAImD,MAAM,0BAA0B,KAAKxD,UAAS,EAAGC,IAAI,EAAE,CACzE,CACJ,CAKQoC,cAAY,CAChB,KAAKa,YAAW,EAAGL,UAAU,CACzBL,KAAOiB,GAAwC,CAC3C,KAAK7C,OAAS6C,EAASC,IAC3B,EACAjB,MAAOA,IAAM,KAAKlB,kBAAkBiB,KAAK,kDAAkD,EAC9F,CACL,CAKA,IAAImB,oBAAkB,CAClB,OAAO1B,OAAO2B,OAAO,KAAKhD,MAAM,EAAEiD,KAAMC,GAAUA,EAAQ,CAAC,CAC/D,4CAzGS3C,EAA8B,2BAA9BA,EAA8B4C,UAAA,CAAA,CAAA,6BAAA,CAAA,EAAAC,OAAA,CAAAhE,UAAA,CAAA,EAAA,WAAA,CAAA,EAAAiE,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,cAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,aAAA,QAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,eAAA,uCAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,eAAA,8BAAA,EAAA,MAAA,gBAAA,EAAA,OAAA,EAAA,CAAA,OAAA,SAAA,eAAA,gCAAA,EAAA,MAAA,aAAA,EAAA,QAAA,UAAA,EAAA,CAAA,EAAA,eAAA,iBAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,eAAA,yCAAA,EAAA,YAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IClB3CvD,EAAA,EAAA,MAAA,CAAA,EACItB,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,KAAA,CAAA,EACAD,EAAA,EAAA;KAAA,EAAAsB,EAAA,EAAA,SAAA,CAAA,EAAwCyD,EAAA,QAAA,UAAA,CAAA,OAASD,EAAAnC,MAAA,CAAO,CAAA,EAAqBnB,EAAA,EACjFxB,EAAA,EAAA;CAAA,EAAAwB,EAAA,EACAxB,EAAA,EAAA;CAAA,EAAAsB,EAAA,EAAA,MAAA,CAAA,EACItB,EAAA,EAAA;KAAA,EAAAgB,EAAA,EAAAgE,GAAA,EAAA,CAAA,EAA4C,GAAAC,GAAA,EAAA,EAAA,EAiB5C3D,EAAA,GAAA,KAAA,EACItB,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,IAAA,CAAA,EACAD,EAAA,GAAA;SAAA,EAAAsB,EAAA,GAAA,IAAA,EACItB,EAAA,GAAA;aAAA,EAAAkF,EAAA,GAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,EAaJ5D,EAAA,EACAxB,EAAA,GAAA;SAAA,EAAAgB,EAAA,GAAAqE,GAAA,EAAA,CAAA,EAGJ7D,EAAA,EACJxB,EAAA,GAAA;CAAA,EAAAwB,EAAA,EACAxB,EAAA,GAAA;CAAA,EAAAsB,EAAA,GAAA,MAAA,CAAA,EACItB,EAAA,GAAA;KAAA,EAAAsB,EAAA,GAAA,SAAA,CAAA,EAAgDyD,EAAA,QAAA,UAAA,CAAA,OAASD,EAAAnC,MAAA,CAAO,CAAA,EAA6CnB,EAAA,EAC7GxB,EAAA,GAAA;KAAA,EAAAsB,EAAA,GAAA,SAAA,CAAA,EAA8EyD,EAAA,QAAA,UAAA,CAAA,OAASD,EAAAhC,wBAAA,CAAyB,CAAA,EAA+CtB,EAAA,EACnKxB,EAAA,GAAA;CAAA,EAAAwB,EAAA,EACAxB,EAAA,GAAA;CAAA,SA/C4BE,EAAA,CAAA,EAAAC,EAAA,eAAA,4BAAA2E,EAAAtE,UAAA,EAAAC,IAAA,EAIxBP,EAAA,CAAA,EAAAiB,EAAA2D,EAAAtE,UAAA,EAAAC,OAAA,gBAAA,EAAA,EAAA,EAoBQP,EAAA,CAAA,EAAAoF,EAAAR,EAAAtC,WAAA,EAcJtC,EAAA,CAAA,EAAAiB,EAAA2D,EAAAX,mBAAA,GAAA,EAAA,EAOyCjE,EAAA,CAAA,EAAAC,EAAA,WAAA,CAAA2E,EAAAX,kBAAA,kBD9BnCoB,EAAoBC,EAAiBC,EAAsBC,GAAiBC,EAAA,EAAAC,cAAA,CAAA,CAAA,SAE7EjE,CAA8B,GAAA,qCGMXkE,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;qCAAA,EAAAC,EAAA,EAAA,uBAAA,EAAA,0BAIIC,EAAA,gBAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAAC,UAAAC,OAAAC,EAAAJ,EAAAK,WAAAR,CAAA,IAAAG,EAAAK,WAAAR,GAAAS,EAAAT,CAAA,CAAA,CAAA,EACAU,EAAA,cAAA,UAAA,CAAAT,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAAC,UAAAM,EAAAP,EAAA,EAAA,OAAAK,EAAeE,EAAAC,cAAAT,CAAA,CAAwB,CAAA,CAAA,EAL3CU,EAAA,EASJhB,EAAA,EAAA;iCAAA,EAAAgB,EAAA,EACJhB,EAAA,EAAA;6BAAA,8BARYiB,EAAA,CAAA,EAAAC,EAAA,YAAAC,EAAA,EAAA,EAAA,iCAAA,CAAA,EAAkE,gBAAA,EAAA,EAElEC,EAAA,UAAAd,EAAAK,UAAA,EAEAO,EAAA,+BAAA,EAAA,EAAsC,QAAA,CAAAZ,EAAAe,WAAA,CAAA,0BAoB1CrB,EAAA,EAAA;qCAAA,EAAAsB,EAAA,EAAA,OAAA,EAAA,EACJtB,EAAA,EAAA;iCAAA,sCAbAA,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;qCAAA,EAAAC,EAAA,EAAA,uBAAA,EAAA,0BAIIC,EAAA,gBAAA,SAAAC,EAAA,CAAAC,EAAAmB,CAAA,EAAA,IAAAjB,EAAAC,EAAA,EAAAC,UAAAC,OAAAC,EAAAJ,EAAAkB,SAAArB,CAAA,IAAAG,EAAAkB,SAAArB,GAAAS,EAAAT,CAAA,CAAA,CAAA,EACAU,EAAA,cAAA,UAAA,CAAAT,EAAAmB,CAAA,EAAA,IAAAjB,EAAAC,EAAA,EAAAC,UAAAM,EAAAP,EAAA,EAAA,OAAAK,EAAeE,EAAAC,cAAAT,CAAA,CAAwB,CAAA,CAAA,EAL3CU,EAAA,EASJhB,EAAA,EAAA;iCAAA,EAAAgB,EAAA,EACAhB,EAAA,EAAA;iCAAA,EAAAyB,EAAA,EAAAC,GAAA,EAAA,CAAA,8BARQT,EAAA,CAAA,EAAAC,EAAA,YAAAC,EAAA,EAAA,EAAA,+BAAA,CAAA,EAAgE,gBAAA,EAAA,EAEhEC,EAAA,UAAAd,EAAAkB,QAAA,EAEAN,EAAA,+BAAA,EAAA,EAAsC,QAAA,CAAAZ,EAAAe,WAAA,CAAA,EAI9CJ,EAAA,CAAA,EAAAU,EAAArB,EAAAe,WAAA,EAAA,GAAA,CAAA,0BAOArB,EAAA,CAAA,gCAAA4B,EAAA;kCAAAT,EAAA,EAAA,EAAA,0BAAA,EAAA;6BAAA,4BAEAnB,EAAA,CAAA,+CAAA4B,EAAA;kCAAAT,EAAA,EAAA,EAAAb,EAAAuB,YAAA,EAAA;6BAAA,sCA1CZ7B,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,IAAA,EACID,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,IAAA,EACID,EAAA,EAAA;6BAAA,EAAAsB,EAAA,EAAA,OAAA,CAAA,EACAtB,EAAA,EAAA;6BAAA,EAAAsB,EAAA,EAAA,gBAAA,CAAA,EACJtB,EAAA,EAAA;yBAAA,EAAAgB,EAAA,EACAhB,EAAA,EAAA;yBAAA,EAAAC,EAAA,GAAA,IAAA,EACID,EAAA,GAAA;6BAAA,EAAAyB,EAAA,GAAAK,GAAA,EAAA,CAAA,EAaJd,EAAA,EACAhB,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,IAAA,EACID,EAAA,GAAA;6BAAA,EAAAyB,EAAA,GAAAM,GAAA,EAAA,CAAA,EAgBJf,EAAA,EACAhB,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,IAAA,EACID,EAAA,GAAA;6BAAA,EAAAyB,EAAA,GAAAO,GAAA,EAAA,CAAA,EAA+B,GAAAC,GAAA,EAAA,CAAA,EAKnCjB,EAAA,EACAhB,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,IAAA,EACID,EAAA,GAAA;6BAAA,EAAAC,EAAA,GAAA,SAAA,EAAA,EAAkGY,EAAA,QAAA,UAAA,CAAA,IAAAP,EAAAF,EAAA8B,CAAA,EAAA1B,UAAAM,EAAAP,EAAA,EAAA,OAAAK,EAASE,EAAAqB,0BAAA7B,CAAA,CAAoC,CAAA,CAAA,EAC3IN,EAAA,EAAA,2BACJgB,EAAA,EACJhB,EAAA,GAAA;yBAAA,EAAAgB,EAAA,EACJhB,EAAA,GAAA;qBAAA,EAAAgB,EAAA,EACJhB,EAAA,GAAA;iBAAA,4BAjDkBiB,EAAA,CAAA,EAAAC,EAAA,eAAA,4BAAAZ,EAAA8B,IAAA,EACsBnB,EAAA,CAAA,EAAAoB,EAAA,OAAA,0BAAA/B,EAAA8B,IAAA,EAG5BnB,EAAA,CAAA,EAAAU,EAAArB,EAAA8B,OAAA,gBAAA,GAAA,EAAA,EAeAnB,EAAA,CAAA,EAAAU,EAAArB,EAAA8B,OAAA,gBAAA,GAAA,EAAA,EAkBAnB,EAAA,CAAA,EAAAU,EAAArB,EAAAuB,aAAA,GAAA,EAAA,EAO6DZ,EAAA,CAAA,EAAAC,EAAA,WAAA,CAAAZ,EAAAe,WAAA,CAAA,EACzDJ,EAAA,EAAAW,EAAA;kCAAAT,EAAA,GAAA,EAAA,sBAAA,EAAA;6BAAA,GD1ChC,IAAamB,IAAuB,IAAA,CAA9B,MAAOA,CAAuB,CACxBC,kBAAoB,IAAIC,EAChCC,YAAc,KAAKF,kBAAkBG,aAAY,EAEzCC,mBAAyCC,EAAOC,CAAkB,EAClEC,aAAyBF,EAAOG,CAAQ,EAEhDC,kBAAwC,CACpC,CACIZ,KAAM,gBACNzB,WAAYsC,EAAK,EAAGC,SAAS,GAAI,QAAQ,EACzC1B,SAAUyB,EAAK,EAAGC,SAAS,EAAG,QAAQ,EACtCrB,aAAcsB,OACd9B,WAAY+B,EAAO,EAAI,GAE3B,CACIhB,KAAM,8BACNzB,WAAYsC,EAAK,EAAGC,SAAS,GAAI,QAAQ,EACzC1B,SAAUyB,EAAK,EAAGC,SAAS,EAAG,QAAQ,EACtCrB,aAAcsB,OACd9B,WAAY+B,EAAO,EAAI,GAE3B,CACIhB,KAAM,wBACNzB,WAAYsC,EAAK,EAAGC,SAAS,GAAI,QAAQ,EACzC1B,SAAUyB,EAAK,EAAGC,SAAS,EAAG,QAAQ,EACtCrB,aAAcsB,OACd9B,WAAY+B,EAAO,EAAI,GAE3B,CACIhB,KAAM,wBACNzB,WAAYsC,EAAK,EAAGC,SAAS,GAAI,QAAQ,EACzC1B,SAAUyB,EAAK,EAAGC,SAAS,EAAG,QAAQ,EACtCrB,aAAcsB,OACd9B,WAAY+B,EAAO,EAAI,GAE3B,CACIhB,KAAM,8BACNzB,WAAYsC,EAAK,EAAGC,SAAS,GAAI,QAAQ,EACzC1B,SAAUyB,EAAK,EAAGC,SAAS,EAAG,QAAQ,EACtCrB,aAAcsB,OACd9B,WAAY+B,EAAO,EAAI,EAC1B,EAGLC,UAAQ,CACJ,KAAKC,mBAAkB,CAC3B,CAEAA,oBAAkB,CACd,KAAKX,mBAAmBY,kBAAiB,EAAGC,UAAWC,GAA0E,CAC7H,IAAMC,EAAmBD,EAAqBE,KAC1CD,GAAoBA,EAAiBE,OAAS,GAC9C,KAAKZ,kBAAkBa,QAAQ,CAACC,EAAWC,IAAS,CAChD,IAAMC,EAAkBN,EAAiBK,CAAK,EAC1CC,GAAmBA,EAAgBC,gBACnCH,EAAUjC,aAAeqC,EAAsBF,EAAgBC,aAAa,EAEpF,CAAC,CAET,CAAC,CACL,CAEAlD,cAAc+C,EAA2B,CACrC,IAAMzC,EAAayC,EAAUnD,YAAcmD,EAAUtC,UAAYyB,EAAMa,EAAUtC,QAAQ,EAAE2C,QAAQlB,EAAMa,EAAUnD,UAAU,CAAC,EAC9HmD,EAAUzC,WAAW+C,IAAI/C,CAAU,CACvC,CAKAc,0BAA0B2B,EAA2B,CACjD,IAAMO,EAAW,KAAKvB,aAAawB,KAAKC,GAAgC,CAAEC,KAAM,KAAMC,SAAU,QAAQ,CAAE,EAC1GJ,EAASK,kBAAkBZ,UAAYV,EAAyBU,CAAS,CAC7E,4CA1ESxB,EAAuB,2BAAvBA,EAAuBqC,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,KAAA,uBAAA,eAAA,sBAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,KAAA,oBAAA,mBAAA,uBAAA,EAAA,QAAA,eAAA,EAAA,CAAA,QAAA,MAAA,eAAA,gCAAA,EAAA,CAAA,QAAA,MAAA,eAAA,iCAAA,EAAA,CAAA,QAAA,MAAA,eAAA,+BAAA,EAAA,CAAA,QAAA,MAAA,eAAA,mCAAA,EAAA,CAAA,QAAA,KAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,CAAA,KAAA,oBAAA,EAAA,MAAA,SAAA,aAAA,EAAA,QAAA,UAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,KAAA,iBAAA,EAAA,gBAAA,cAAA,YAAA,gBAAA,UAAA,+BAAA,OAAA,EAAA,CAAA,KAAA,eAAA,EAAA,gBAAA,cAAA,YAAA,gBAAA,UAAA,+BAAA,OAAA,EAAA,CAAA,eAAA,oCAAA,EAAA,kBAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICtBpC/E,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,IAAA,EACID,EAAA,EAAA;SAAA,EAAAsB,EAAA,EAAA,OAAA,CAAA,EACJtB,EAAA,EAAA;KAAA,EAAAgB,EAAA,EACAhB,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,QAAA,CAAA,EACID,EAAA,GAAA;aAAA,EAAAC,EAAA,GAAA,OAAA,EACID,EAAA,GAAA;iBAAA,EAAAC,EAAA,GAAA,IAAA,EACID,EAAA,GAAA;qBAAA,EAAAsB,EAAA,GAAA,KAAA,CAAA,EACAtB,EAAA,GAAA;qBAAA,EAAAsB,EAAA,GAAA,KAAA,CAAA,EACAtB,EAAA,GAAA;qBAAA,EAAAsB,EAAA,GAAA,KAAA,CAAA,EACAtB,EAAA,GAAA;qBAAA,EAAAsB,EAAA,GAAA,KAAA,CAAA,EACAtB,EAAA,GAAA;qBAAA,EAAAsB,EAAA,GAAA,KAAA,CAAA,EACJtB,EAAA,GAAA;iBAAA,EAAAgB,EAAA,EACJhB,EAAA,GAAA;aAAA,EAAAgB,EAAA,EACAhB,EAAA,GAAA;aAAA,EAAAC,EAAA,GAAA,OAAA,EACID,EAAA,GAAA;iBAAA,EAAAkF,EAAA,GAAAC,GAAA,GAAA,EAAA,KAAA,KAAAC,CAAA,EAqDJpE,EAAA,EACJhB,EAAA,GAAA;SAAA,EAAAgB,EAAA,EACJhB,EAAA,GAAA;KAAA,EAAAgB,EAAA,EACJhB,EAAA,GAAA;CAAA,EAAAgB,EAAA,EACAhB,EAAA,GAAA;CAAA,SAzDgBiB,EAAA,EAAA,EAAAoE,EAAAJ,EAAAjC,iBAAA,kBDIFsC,GAA6BC,EAAsBC,GAAmBC,EAAoBC,EAAWC,EAAAC,EAAEC,CAAe,EAAAC,cAAA,CAAA,CAAA,SAEvHxD,CAAuB,GAAA",
  "names": ["DataCleanupService", "adminResourceUrl", "http", "inject", "HttpClient", "deleteOrphans", "delete", "observe", "deletePlagiarismComparisons", "deleteFrom", "deleteTo", "deleteFromString", "convertDateFromClient", "deleteToString", "params", "deleteNonRatedResults", "deleteOldRatedResults", "deleteOldSubmissionVersions", "getLastExecutions", "get", "countOrphans", "countPlagiarismComparisons", "countNonRatedResults", "countOldRatedResults", "countOldSubmissionVersions", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pipeBind1", "ctx_r0", "operation", "name", "\u0275\u0275pureFunction3", "_c1", "deleteFrom", "deleteTo", "faTimes", "faCheckCircle", "\u0275\u0275template", "CleanupOperationModalComponent_For_18_Conditional_5_Conditional_1_Template", "CleanupOperationModalComponent_For_18_Conditional_5_Conditional_2_Template", "\u0275\u0275conditional", "counts", "key_r2", "\u0275\u0275elementStart", "CleanupOperationModalComponent_For_18_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate1", "operationExecuted", "CleanupOperationModalComponent", "input", "required", "totalCount", "dialogErrorSource", "Subject", "dialogError", "asObservable", "activeModal", "inject", "NgbActiveModal", "dataCleanupService", "DataCleanupService", "cleanupKeys", "Object", "keys", "close", "ngOnInit", "updateCounts", "executeCleanupOperation", "operationHandler", "next", "error", "HttpErrorResponse", "message", "deleteOrphans", "subscribe", "deletePlagiarismComparisons", "deleteNonRatedResults", "deleteOldRatedResults", "deleteOldSubmissionVersions", "fetchCounts", "countOrphans", "countPlagiarismComparisons", "countNonRatedResults", "countOldRatedResults", "countOldSubmissionVersions", "Error", "response", "body", "hasEntriesToDelete", "values", "some", "count", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "CleanupOperationModalComponent_Conditional_9_Template", "CleanupOperationModalComponent_Conditional_10_Template", "\u0275\u0275repeaterCreate", "CleanupOperationModalComponent_For_18_Template", "\u0275\u0275repeaterTrackByIdentity", "CleanupOperationModalComponent_Conditional_20_Template", "\u0275\u0275repeater", "TranslateDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "FontAwesomeModule", "FaIconComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "operation_r3", "\u0275\u0275nextContext", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "deleteFrom", "\u0275\u0275resetView", "\u0275\u0275listener", "ctx_r3", "validateDates", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "datesValid", "\u0275\u0275element", "_r5", "deleteTo", "\u0275\u0275template", "CleanupServiceComponent_For_30_Conditional_16_Conditional_7_Template", "\u0275\u0275conditional", "\u0275\u0275textInterpolate1", "lastExecuted", "CleanupServiceComponent_For_30_Conditional_12_Template", "CleanupServiceComponent_For_30_Conditional_16_Template", "CleanupServiceComponent_For_30_Conditional_20_Template", "CleanupServiceComponent_For_30_Conditional_21_Template", "_r1", "openCleanupOperationModal", "name", "\u0275\u0275propertyInterpolate", "CleanupServiceComponent", "dialogErrorSource", "Subject", "dialogError", "asObservable", "dataCleanupService", "inject", "DataCleanupService", "modalService", "NgbModal", "cleanupOperations", "dayjs", "subtract", "undefined", "signal", "ngOnInit", "loadLastExecutions", "getLastExecutions", "subscribe", "executionRecordsBody", "executionRecords", "body", "length", "forEach", "operation", "index", "executionRecord", "executionDate", "convertDateFromServer", "isAfter", "set", "modalRef", "open", "CleanupOperationModalComponent", "size", "backdrop", "componentInstance", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "CleanupServiceComponent_For_30_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "FormDateTimePickerComponent", "ArtemisTranslatePipe", "HelpIconComponent", "TranslateDirective", "FormsModule", "NgControlStatus", "NgModel", "ArtemisDatePipe", "encapsulation"]
}
