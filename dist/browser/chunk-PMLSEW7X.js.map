{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/manage/services/programming-exercise-websocket.service.ts"],
  "sourcesContent": ["import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\n\r\nexport type EntityResponseType = HttpResponse<ProgrammingExercise>;\r\nexport type EntityArrayResponseType = HttpResponse<ProgrammingExercise[]>;\r\n\r\nexport interface IProgrammingExerciseWebsocketService {\r\n    /**\r\n     * Gets the current state of test cases of a particular programming exercise\r\n     * True => The test cases were changed and the student submissions should be built again.\r\n     * False => There are no outstanding test case changes, the student results are up-to-date.\r\n     * @param programmingExerciseId of the particular programming exercise\r\n     */\r\n    getTestCaseState(programmingExerciseId: number): Observable<boolean>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExerciseWebsocketService implements OnDestroy, IProgrammingExerciseWebsocketService {\r\n    private websocketService = inject(WebsocketService);\r\n\r\n    private connections: string[] = [];\r\n    // Uses undefined for initial value.\r\n    private subjects: { [programmingExerciseId: number]: BehaviorSubject<boolean | undefined> } = {};\r\n\r\n    /**\r\n     * On destroy unsubscribe all connections.\r\n     */\r\n    ngOnDestroy(): void {\r\n        Object.values(this.connections).forEach((connection) => this.websocketService.unsubscribe(connection));\r\n    }\r\n\r\n    /**\r\n     * Notifies the subscribers of the programming exercise if the testCases have changed\r\n     * @param programmingExerciseId of the particular programmingExercise\r\n     * @param testCasesChanged indicates if the testCases have changed\r\n     */\r\n    private notifySubscribers(programmingExerciseId: number, testCasesChanged: boolean) {\r\n        this.subjects[programmingExerciseId].next(testCasesChanged);\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the testCaseChanged flag of the programming exercise.\r\n     * @param programmingExerciseId of the particular programming exercise\r\n     */\r\n    private initTestCaseStateSubscription(programmingExerciseId: number) {\r\n        const testCaseTopic = `/topic/programming-exercises/${programmingExerciseId}/test-cases-changed`;\r\n        this.websocketService.subscribe(testCaseTopic);\r\n        this.connections[programmingExerciseId] = testCaseTopic;\r\n        this.subjects[programmingExerciseId] = new BehaviorSubject(undefined);\r\n        this.websocketService\r\n            .receive(testCaseTopic)\r\n            .pipe(tap((testCasesChanged) => this.notifySubscribers(programmingExerciseId, testCasesChanged)))\r\n            .subscribe();\r\n        return this.subjects[programmingExerciseId];\r\n    }\r\n\r\n    /**\r\n     * Gets the current state of test cases of a particular programming exercise\r\n     * True => The test cases were changed and the student submissions should be built again.\r\n     * False => There are no outstanding test case changes, the student results are up-to-date.\r\n     * @param programmingExerciseId of the particular programming exercise\r\n     */\r\n    getTestCaseState(programmingExerciseId: number) {\r\n        const existingSubject = this.subjects[programmingExerciseId];\r\n        return (existingSubject || this.initTestCaseStateSubscription(programmingExerciseId)).asObservable().pipe(filter((val) => val !== undefined)) as Observable<boolean>;\r\n    }\r\n}\r\n"],
  "mappings": "+GAqBA,IAAaA,GAAmC,IAAA,CAA1C,MAAOA,CAAmC,CACpCC,iBAAmBC,EAAOC,CAAgB,EAE1CC,YAAwB,CAAA,EAExBC,SAAsF,CAAA,EAK9FC,aAAW,CACPC,OAAOC,OAAO,KAAKJ,WAAW,EAAEK,QAASC,GAAe,KAAKT,iBAAiBU,YAAYD,CAAU,CAAC,CACzG,CAOQE,kBAAkBC,EAA+BC,EAAyB,CAC9E,KAAKT,SAASQ,CAAqB,EAAEE,KAAKD,CAAgB,CAC9D,CAMQE,8BAA8BH,EAA6B,CAC/D,IAAMI,EAAgB,gCAAgCJ,CAAqB,sBAC3E,YAAKZ,iBAAiBiB,UAAUD,CAAa,EAC7C,KAAKb,YAAYS,CAAqB,EAAII,EAC1C,KAAKZ,SAASQ,CAAqB,EAAI,IAAIM,EAAgBC,MAAS,EACpE,KAAKnB,iBACAoB,QAAQJ,CAAa,EACrBK,KAAKC,EAAKT,GAAqB,KAAKF,kBAAkBC,EAAuBC,CAAgB,CAAC,CAAC,EAC/FI,UAAS,EACP,KAAKb,SAASQ,CAAqB,CAC9C,CAQAW,iBAAiBX,EAA6B,CAE1C,OADwB,KAAKR,SAASQ,CAAqB,GAChC,KAAKG,8BAA8BH,CAAqB,GAAGY,aAAY,EAAGH,KAAKI,EAAQC,GAAQA,IAAQP,MAAS,CAAC,CAChJ,4CAhDSpB,EAAmC,6BAAnCA,EAAmC4B,QAAnC5B,EAAmC6B,UAAAC,WADtB,MAAM,CAAA,SACnB9B,CAAmC,GAAA",
  "names": ["ProgrammingExerciseWebsocketService", "websocketService", "inject", "WebsocketService", "connections", "subjects", "ngOnDestroy", "Object", "values", "forEach", "connection", "unsubscribe", "notifySubscribers", "programmingExerciseId", "testCasesChanged", "next", "initTestCaseStateSubscription", "testCaseTopic", "subscribe", "BehaviorSubject", "undefined", "receive", "pipe", "tap", "getTestCaseState", "asObservable", "filter", "val", "factory", "\u0275fac", "providedIn"]
}
