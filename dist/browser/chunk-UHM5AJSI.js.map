{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/orion/orion.ts"],
  "sourcesContent": ["import { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\nexport interface OrionState {\r\n    opened: number;\r\n    cloning: boolean;\r\n    building: boolean;\r\n    view: ExerciseView;\r\n}\r\n\r\n/**\r\n * Enumeration defining the view options for an exercise,\r\n * as a student (participation), tutor (assessment), or instructor (to edit the exercise).\r\n */\r\nexport enum ExerciseView {\r\n    STUDENT = 'STUDENT',\r\n    TUTOR = 'TUTOR',\r\n    INSTRUCTOR = 'INSTRUCTOR',\r\n}\r\n\r\nexport interface OrionSharedUtilConnector {\r\n    /**\r\n     * Method to perform the login.\r\n     * @param username of the user.\r\n     * @param password of the user.\r\n     */\r\n    login(username: string, password: string): void;\r\n\r\n    /**\r\n     * Method to log a specific message.\r\n     * @param message The text to be logged.\r\n     */\r\n    log(message: string): void;\r\n}\r\n\r\nexport interface OrionExerciseConnector {\r\n    /**\r\n     * Edit an exercise.\r\n     * @param exerciseJson Exercise in a Json string.\r\n     */\r\n    editExercise(exerciseJson: string): void;\r\n\r\n    /**\r\n     * Assess an exercise. See {@link OrionConnectorService} for details.\r\n     * @param exerciseJson Exercise in a Json string.\r\n     */\r\n    assessExercise(exerciseJson: string): void;\r\n\r\n    /**\r\n     * Downloads a submission into the opened tutor project. See {@link OrionConnectorService} for details.\r\n     * @param submissionId id of the submission, used to navigate to the corresponding URL\r\n     * @param correctionRound correction round, also needed to navigate to the correct URL\r\n     * @param base64data the student's submission as base64\r\n     */\r\n    // Uncomment this line to also transfer the testRun flag.\r\n    // THIS IS A BREAKING CHANGE that will require all users to upgrade their Orion to a compatible version!\r\n    // Also change in orion-connector.service.ts\r\n    // downloadSubmission(submissionId: string, correctionRound: string, testRun: boolean, base64data: string): void;\r\n    downloadSubmission(submissionId: string, correctionRound: string, base64data: string): void;\r\n\r\n    /**\r\n     * Initializes the feedback comments. See {@link OrionConnectorService} for details.\r\n     * @param submissionId if of the submission, for validation purposes\r\n     * @param feedback current feedback\r\n     */\r\n    initializeAssessment(submissionId: string, feedback: string): void;\r\n\r\n    /**\r\n     * Import a participation. See {@link OrionConnectorService} for details.\r\n     * @param repository Repository name as string.\r\n     * @param exerciseJson Exercise in a Json string.\r\n     */\r\n    importParticipation(repository: string, exerciseJson: string): void;\r\n\r\n    /**\r\n     * Initialize test repository\r\n     *\r\n     * @param testRepository repository url as a link\r\n     */\r\n    initializeTestRepository(testRepository: string): void;\r\n}\r\n\r\nexport interface OrionVCSConnector {\r\n    /**\r\n     * Select a specific repository. See {@link OrionConnectorService} for details.\r\n     * @param repository The repository to be selected.\r\n     */\r\n    selectRepository(repository: RepositoryType): void;\r\n\r\n    /**\r\n     * Code to provide the submit functionality. See {@link OrionConnectorService} for details.\r\n     */\r\n    submit(): void;\r\n}\r\n\r\nexport interface OrionBuildConnector {\r\n    /**\r\n     * Perform a build and test locally. See {@link OrionConnectorService} for details.\r\n     */\r\n    buildAndTestLocally(): void;\r\n\r\n    /**\r\n     * To be executed when build has started. See {@link OrionConnectorService} for details.\r\n     * @param problemStatement The problem statement string.\r\n     */\r\n    onBuildStarted(problemStatement: string): void;\r\n\r\n    /**\r\n     * To be executed when build is finished. See {@link OrionConnectorService} for details.\r\n     */\r\n    onBuildFinished(): void;\r\n\r\n    /**\r\n     * To be executed when the build failed. See {@link OrionConnectorService} for details.\r\n     * @param buildLogsJsonString The Json string of the build logs.\r\n     */\r\n    onBuildFailed(buildLogsJsonString: string): void;\r\n\r\n    /**\r\n     * Executed when the result of the test is out. See {@link OrionConnectorService} for details.\r\n     * @param success Whether the test was successful or not.\r\n     * @param testName The name of the test.\r\n     * @param message The message to display.\r\n     */\r\n    onTestResult(success: boolean, testName: string, message: string): void;\r\n}\r\n\r\nexport interface ArtemisClientConnector {\r\n    /**\r\n     * Executed on exercise opening.\r\n     * @param opened\r\n     * @param view\r\n     */\r\n    onExerciseOpened(opened: number, view: string): void;\r\n\r\n    /**\r\n     * Sets the status whether is cloning or not.\r\n     * @param cloning Boolean value specifying whether cloning is active or not.\r\n     */\r\n    isCloning(cloning: boolean): void;\r\n\r\n    /**\r\n     * Sets the status whether is building or not.\r\n     * @param building Boolean value specifying whether building is active or not.\r\n     */\r\n    isBuilding(building: boolean): void;\r\n\r\n    /**\r\n     * Starts build for an exercise in a course.\r\n     * @param courseId The course id.\r\n     * @param exerciseId The exercise id.\r\n     */\r\n    startedBuildInOrion(courseId: number, exerciseId: number): void;\r\n\r\n    /**\r\n     * Updates the assessment of the currently open submission\r\n     * @param submissionId Id of the open submission, for validation\r\n     * @param feedback all inline feedback, as JSON\r\n     */\r\n    updateAssessment(submissionId: number, feedback: string): void;\r\n}\r\n\r\nexport interface OrionWindow {\r\n    orionExerciseConnector: OrionExerciseConnector;\r\n    orionSharedUtilConnector: OrionSharedUtilConnector;\r\n    orionBuildConnector: OrionBuildConnector;\r\n    orionVCSConnector: OrionVCSConnector;\r\n    artemisClientConnector: ArtemisClientConnector;\r\n}\r\n\r\nexport const isOrion = window.navigator.userAgent.includes('Orion') || window.navigator.userAgent.includes('IntelliJ');\r\n"],
  "mappings": "AAaA,IAAYA,EAAZ,SAAYA,EAAY,CACpBA,OAAAA,EAAA,QAAA,UACAA,EAAA,MAAA,QACAA,EAAA,WAAA,aAHQA,CAIZ,EAJYA,GAAY,CAAA,CAAA,EA4JXC,EAAUC,OAAOC,UAAUC,UAAUC,SAAS,OAAO,GAAKH,OAAOC,UAAUC,UAAUC,SAAS,UAAU",
  "names": ["ExerciseView", "isOrion", "window", "navigator", "userAgent", "includes"]
}
