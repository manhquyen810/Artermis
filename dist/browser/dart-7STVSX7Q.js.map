{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/dart/dart.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/dart/dart.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"`\",\n    close: \"`\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }],\n  folding: {\n    markers: {\n      start: /^\\s*\\s*#?region\\b/,\n      end: /^\\s*\\s*#?endregion\\b/\n    }\n  }\n};\nvar language = {\n  defaultToken: \"invalid\",\n  tokenPostfix: \".dart\",\n  keywords: [\"abstract\", \"dynamic\", \"implements\", \"show\", \"as\", \"else\", \"import\", \"static\", \"assert\", \"enum\", \"in\", \"super\", \"async\", \"export\", \"interface\", \"switch\", \"await\", \"extends\", \"is\", \"sync\", \"break\", \"external\", \"library\", \"this\", \"case\", \"factory\", \"mixin\", \"throw\", \"catch\", \"false\", \"new\", \"true\", \"class\", \"final\", \"null\", \"try\", \"const\", \"finally\", \"on\", \"typedef\", \"continue\", \"for\", \"operator\", \"var\", \"covariant\", \"Function\", \"part\", \"void\", \"default\", \"get\", \"rethrow\", \"while\", \"deferred\", \"hide\", \"return\", \"with\", \"do\", \"if\", \"set\", \"yield\"],\n  typeKeywords: [\"int\", \"double\", \"String\", \"bool\"],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"~/\", \"%\", \"++\", \"--\", \"==\", \"!=\", \">\", \"<\", \">=\", \"<=\", \"=\", \"-=\", \"/=\", \"%=\", \">>=\", \"^=\", \"+=\", \"*=\", \"~/=\", \"<<=\", \"&=\", \"!=\", \"||\", \"&&\", \"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \"!\", \">>>\", \"??\", \"?\", \":\", \"|=\"],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, \"delimiter.bracket\"], {\n      include: \"common\"\n    }],\n    common: [\n    // identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@typeKeywords\": \"type.identifier\",\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z_$][\\w\\$]*/, \"type.identifier\"],\n    // show class names\n    // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: \"@whitespace\"\n    },\n    // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: \"regexp\",\n      bracket: \"@open\",\n      next: \"@regexp\"\n    }],\n    // @ annotations.\n    [/@[a-zA-Z]+/, \"annotation\"],\n    // variable\n    // delimiters and operators\n    [/[()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/!(?=([^=]|$))/, \"delimiter\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }],\n    // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"], [/0[xX](@hexdigits)n?/, \"number.hex\"], [/0[oO]?(@octaldigits)n?/, \"number.octal\"], [/0[bB](@binarydigits)n?/, \"number.binary\"], [/(@digits)n?/, \"number\"],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, \"delimiter\"],\n    // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n    // non-teminated string\n    [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n    // non-teminated string\n    [/\"/, \"string\", \"@string_double\"], [/'/, \"string\", \"@string_single\"]\n    //   [/[a-zA-Z]+/, \"variable\"]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/\\/.*$/, \"comment.doc\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    jsdoc: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, [\"regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]], [/[()]/, \"regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/[^\\\\\\/]/, \"regexp\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/(\\/)([gimsuy]*)/, [{\n      token: \"regexp\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }, \"keyword.other\"]]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\",\n      bracket: \"@close\"\n    }]],\n    string_double: [[/[^\\\\\"\\$]+/, \"string\"], [/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"], [/\\$\\w+/, \"identifier\"]],\n    string_single: [[/[^\\\\'\\$]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, \"string\", \"@pop\"], [/\\$\\w+/, \"identifier\"]]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["conf","language"],"x_google_ignoreList":[0]}