{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/forms/course-competency-form.component.ts", "src/main/webapp/app/course/competencies/forms/common-course-competency-form.component.ts", "src/main/webapp/app/course/competencies/forms/common-course-competency-form.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { catchError, delay, map, switchMap } from 'rxjs/operators';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { CompetencyTaxonomy, DEFAULT_MASTERY_THRESHOLD } from 'app/entities/competency.model';\r\nimport { faQuestionCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { CourseCompetencyService } from 'app/course/competencies/course-competency.service';\r\n\r\n/**\r\n * Async Validator to make sure that a competency title is unique within a course\r\n */\r\nexport const titleUniqueValidator = (courseCompetencyService: CourseCompetencyService, courseId: number, initialTitle?: string) => {\r\n    return (competencyTitleControl: FormControl<string | undefined>) => {\r\n        return of(competencyTitleControl.value).pipe(\r\n            delay(250),\r\n            switchMap((title) => {\r\n                if (initialTitle && title === initialTitle) {\r\n                    return of(null);\r\n                }\r\n                return courseCompetencyService.getCourseCompetencyTitles(courseId).pipe(\r\n                    map((res) => {\r\n                        const competencyTitles = res.body!;\r\n                        if (title && competencyTitles.includes(title)) {\r\n                            return {\r\n                                titleUnique: { valid: false },\r\n                            };\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }),\r\n                    catchError(() => of(null)),\r\n                );\r\n            }),\r\n        );\r\n    };\r\n};\r\n\r\nexport interface CourseCompetencyFormData {\r\n    id?: number;\r\n    title?: string;\r\n    description?: string;\r\n    softDueDate?: dayjs.Dayjs;\r\n    taxonomy?: CompetencyTaxonomy;\r\n    optional?: boolean;\r\n    masteryThreshold?: number;\r\n}\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class CourseCompetencyFormComponent {\r\n    abstract formData: CourseCompetencyFormData;\r\n\r\n    private fb = inject(FormBuilder);\r\n    private courseCompetencyService = inject(CourseCompetencyService);\r\n\r\n    @Input() isEditMode = false;\r\n    @Input() isInConnectMode = false;\r\n    @Input() isInSingleLectureMode = false;\r\n    @Input() courseId: number;\r\n    @Input() lecturesOfCourseWithLectureUnits: Lecture[] = [];\r\n    @Input() averageStudentScore?: number;\r\n    @Input() hasCancelButton: boolean;\r\n\r\n    @Output() onCancel: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() formSubmitted: EventEmitter<CourseCompetencyFormData> = new EventEmitter<CourseCompetencyFormData>();\r\n\r\n    form: FormGroup;\r\n\r\n    // Icons\r\n    protected readonly faTimes = faTimes;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    get titleControl() {\r\n        return this.form.get('title');\r\n    }\r\n\r\n    get descriptionControl() {\r\n        return this.form.get('description');\r\n    }\r\n\r\n    get softDueDateControl() {\r\n        return this.form.get('softDueDate');\r\n    }\r\n\r\n    get optionalControl() {\r\n        return this.form.get('optional');\r\n    }\r\n\r\n    /**\r\n     * Updates description form on markdown change\r\n     * @param content markdown content\r\n     */\r\n    updateDescriptionControl(content: string) {\r\n        this.descriptionControl?.setValue(content);\r\n        this.descriptionControl?.markAsDirty();\r\n    }\r\n\r\n    protected initializeForm() {\r\n        if (this.form) {\r\n            return;\r\n        }\r\n        let initialTitle: string | undefined = undefined;\r\n        if (this.isEditMode && this.formData && this.formData.title) {\r\n            initialTitle = this.formData.title;\r\n        }\r\n        this.form = this.fb.nonNullable.group({\r\n            title: [\r\n                undefined as string | undefined,\r\n                [Validators.required, Validators.maxLength(255)],\r\n                [titleUniqueValidator(this.courseCompetencyService, this.courseId, initialTitle)],\r\n            ],\r\n            description: [undefined as string | undefined, [Validators.maxLength(10000)]],\r\n            softDueDate: [undefined],\r\n            taxonomy: [undefined as CompetencyTaxonomy | undefined],\r\n            masteryThreshold: [DEFAULT_MASTERY_THRESHOLD, [Validators.min(0), Validators.max(100)]],\r\n            optional: [false],\r\n        });\r\n    }\r\n\r\n    cancelForm() {\r\n        this.onCancel.emit();\r\n    }\r\n\r\n    get isSubmitPossible() {\r\n        return !this.form.invalid;\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CompetencyTaxonomy, CourseCompetency, CourseCompetencyValidators, DEFAULT_MASTERY_THRESHOLD } from 'app/entities/competency.model';\r\nimport { faQuestionCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseCompetencyFormData } from 'app/course/competencies/forms/course-competency-form.component';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { merge } from 'rxjs';\r\nimport { DateTimePickerType, FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TaxonomySelectComponent } from 'app/course/competencies/taxonomy-select/taxonomy-select.component';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\n\r\n@Component({\r\n    selector: 'jhi-common-course-competency-form',\r\n    templateUrl: './common-course-competency-form.component.html',\r\n    styleUrls: ['./common-course-competency-form.component.scss'],\r\n    imports: [\r\n        NgbDropdownModule,\r\n        ReactiveFormsModule,\r\n        FormDateTimePickerComponent,\r\n        TaxonomySelectComponent,\r\n        MarkdownEditorMonacoComponent,\r\n        HelpIconComponent,\r\n        TranslateDirective,\r\n        ArtemisTranslatePipe,\r\n        MarkdownEditorMonacoComponent,\r\n    ],\r\n})\r\nexport class CommonCourseCompetencyFormComponent implements OnInit, OnChanges {\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() formData: CourseCompetencyFormData;\r\n    @Input() isEditMode = false;\r\n    @Input() isInConnectMode = false;\r\n    @Input() isInSingleLectureMode = false;\r\n    @Input() lecturesOfCourseWithLectureUnits: Lecture[] = [];\r\n    @Input() averageStudentScore?: number;\r\n    @Input() form: FormGroup;\r\n    @Input() courseCompetency: CourseCompetency;\r\n\r\n    @Output() onTitleOrDescriptionChange = new EventEmitter<void>();\r\n\r\n    protected readonly competencyValidators = CourseCompetencyValidators;\r\n    protected readonly DateTimePickerType = DateTimePickerType;\r\n\r\n    suggestedTaxonomies: string[] = [];\r\n\r\n    // Icons\r\n    protected readonly faTimes = faTimes;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n    // Constants\r\n    protected readonly DEFAULT_MASTERY_THRESHOLD = DEFAULT_MASTERY_THRESHOLD;\r\n    protected readonly competencyTaxonomy = CompetencyTaxonomy;\r\n\r\n    get titleControl() {\r\n        return this.form.get('title');\r\n    }\r\n\r\n    get descriptionControl() {\r\n        return this.form.get('description');\r\n    }\r\n\r\n    get masteryThresholdControl() {\r\n        return this.form.get('masteryThreshold');\r\n    }\r\n\r\n    get taxonomyControl() {\r\n        return this.form.get('taxonomy') as FormControl;\r\n    }\r\n\r\n    /**\r\n     * Updates description form on markdown change\r\n     * @param content markdown content\r\n     */\r\n    updateDescriptionControl(content: string) {\r\n        this.descriptionControl?.setValue(content);\r\n        this.descriptionControl?.markAsDirty();\r\n    }\r\n\r\n    ngOnInit() {\r\n        merge(this.titleControl!.valueChanges, this.descriptionControl!.valueChanges).subscribe(() => this.suggestTaxonomies());\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isEditMode && this.formData) {\r\n            this.setFormValues(this.formData);\r\n        }\r\n    }\r\n\r\n    private setFormValues(formData: CourseCompetencyFormData) {\r\n        this.form.patchValue(formData);\r\n    }\r\n\r\n    /**\r\n     * Suggest some taxonomies based on keywords used in the title or description.\r\n     * Triggered after the user changes the title or description input field.\r\n     */\r\n    suggestTaxonomies() {\r\n        this.suggestedTaxonomies = [];\r\n        const title = this.titleControl?.value?.toLowerCase() ?? '';\r\n        const description = this.descriptionControl?.value?.toLowerCase() ?? '';\r\n        for (const taxonomy in this.competencyTaxonomy) {\r\n            const keywords = this.translateService.instant('artemisApp.courseCompetency.keywords.' + taxonomy).split(', ');\r\n            const taxonomyName = this.translateService.instant('artemisApp.courseCompetency.taxonomies.' + taxonomy);\r\n            keywords.push(taxonomyName);\r\n            if (keywords.map((keyword: string) => keyword.toLowerCase()).some((keyword: string) => title.includes(keyword) || description.includes(keyword))) {\r\n                this.suggestedTaxonomies.push(taxonomyName);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "<form [formGroup]=\"form\">\r\n    @if (!isInConnectMode) {\r\n        <div class=\"form-group\">\r\n            <label for=\"title\" [jhiTranslate]=\"'artemisApp.' + courseCompetency?.type + '.title'\"></label>\r\n            <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                id=\"title\"\r\n                formControlName=\"title\"\r\n                [placeholder]=\"'artemisApp.' + courseCompetency?.type + '.create.titlePlaceholder' | artemisTranslate\"\r\n            />\r\n            @if (titleControl?.invalid && (titleControl?.dirty || titleControl?.touched)) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (titleControl?.errors?.required) {\r\n                        <div [jhiTranslate]=\"'artemisApp.' + courseCompetency?.type + '.create.titleRequiredValidationError'\"></div>\r\n                    }\r\n                    @if (titleControl?.errors?.maxlength) {\r\n                        <div\r\n                            [jhiTranslate]=\"'artemisApp.' + courseCompetency?.type + '.create.titleMaxLengthValidationError'\"\r\n                            [translateValues]=\"{ max: competencyValidators.TITLE_MAX }\"\r\n                        ></div>\r\n                    }\r\n                    @if (titleControl?.errors?.titleUnique) {\r\n                        <div jhiTranslate=\"artemisApp.courseCompetency.create.titleUniqueValidationError\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (!isInConnectMode) {\r\n        <div class=\"form-group\">\r\n            <label for=\"description\" jhiTranslate=\"artemisApp.courseCompetency.description\"></label>\r\n            <jhi-markdown-editor-monaco\r\n                [markdown]=\"descriptionControl?.value\"\r\n                (markdownChange)=\"updateDescriptionControl($event)\"\r\n                id=\"description\"\r\n                class=\"markdown-preview\"\r\n                [enableFileUpload]=\"false\"\r\n            />\r\n            @if (descriptionControl?.invalid && descriptionControl?.dirty) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (descriptionControl?.errors?.maxlength) {\r\n                        <div\r\n                            [jhiTranslate]=\"'artemisApp.' + courseCompetency?.type + '.create.descriptionMaxLengthValidationError'\"\r\n                            [translateValues]=\"{ max: competencyValidators.DESCRIPTION_MAX }\"\r\n                        ></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    <div class=\"form-group\">\r\n        <jhi-date-time-picker\r\n            id=\"softDueDate\"\r\n            labelName=\"{{ 'artemisApp.' + courseCompetency?.type + '.create.softDueDate' | artemisTranslate }}\"\r\n            labelTooltip=\"{{ 'artemisApp.' + courseCompetency?.type + '.create.softDueDateHint' | artemisTranslate }}\"\r\n            formControlName=\"softDueDate\"\r\n            [pickerType]=\"DateTimePickerType.CALENDAR\"\r\n        />\r\n    </div>\r\n    @if (!isInConnectMode) {\r\n        <div class=\"form-group\">\r\n            <label for=\"taxonomy\">\r\n                {{ 'artemisApp.courseCompetency.taxonomy' | artemisTranslate }}\r\n                @if (suggestedTaxonomies?.length) {\r\n                    <small> ({{ 'artemisApp.courseCompetency.create.suggestedTaxonomy' | artemisTranslate }}: {{ suggestedTaxonomies.join(', ') }}) </small>\r\n                }\r\n            </label>\r\n            <jhi-taxonomy-select selectId=\"taxonomy\" [form]=\"taxonomyControl\" />\r\n        </div>\r\n    }\r\n    @if (!isInConnectMode) {\r\n        <div class=\"form-group\">\r\n            <label for=\"masteryThreshold\">\r\n                {{ 'artemisApp.courseCompetency.masteryThreshold' | artemisTranslate }}: {{ masteryThresholdControl!.value ?? DEFAULT_MASTERY_THRESHOLD }}%\r\n                @if (averageStudentScore) {\r\n                    <small> ({{ 'artemisApp.courseCompetency.create.averageMastery' | artemisTranslate }}: {{ averageStudentScore }}%) </small>\r\n                }\r\n            </label>\r\n            <input required type=\"number\" class=\"form-control\" name=\"masteryThreshold\" id=\"masteryThreshold\" min=\"1\" max=\"100\" formControlName=\"masteryThreshold\" />\r\n        </div>\r\n    }\r\n    <div class=\"form-group\">\r\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"optional\" formControlName=\"optional\" />\r\n        <label class=\"form-control-label\" [jhiTranslate]=\"'artemisApp.' + courseCompetency?.type + '.optional'\" for=\"optional\"></label>\r\n        <jhi-help-icon [text]=\"'artemisApp.' + courseCompetency?.type + '.optionalDescription'\" />\r\n    </div>\r\n</form>\r\n"],
  "mappings": "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",
  "names": ["titleUniqueValidator", "courseCompetencyService", "courseId", "initialTitle", "competencyTitleControl", "of", "value", "pipe", "delay", "switchMap", "title", "getCourseCompetencyTitles", "map", "res", "competencyTitles", "body", "includes", "titleUnique", "valid", "catchError", "CourseCompetencyFormComponent", "fb", "inject", "FormBuilder", "CourseCompetencyService", "isEditMode", "isInConnectMode", "isInSingleLectureMode", "lecturesOfCourseWithLectureUnits", "averageStudentScore", "hasCancelButton", "onCancel", "EventEmitter", "formSubmitted", "form", "faTimes", "faQuestionCircle", "titleControl", "get", "descriptionControl", "softDueDateControl", "optionalControl", "updateDescriptionControl", "content", "setValue", "markAsDirty", "initializeForm", "formData", "nonNullable", "group", "undefined", "Validators", "required", "maxLength", "description", "softDueDate", "taxonomy", "masteryThreshold", "DEFAULT_MASTERY_THRESHOLD", "min", "max", "optional", "cancelForm", "emit", "isSubmitPossible", "invalid", "selectors", "inputs", "outputs", "decls", "vars", "template", "rf", "ctx", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "courseCompetency", "type", "\u0275\u0275pureFunction1", "_c0", "competencyValidators", "TITLE_MAX", "\u0275\u0275elementStart", "\u0275\u0275template", "CommonCourseCompetencyFormComponent_Conditional_2_Conditional_8_Conditional_3_Template", "CommonCourseCompetencyFormComponent_Conditional_2_Conditional_8_Conditional_4_Template", "CommonCourseCompetencyFormComponent_Conditional_2_Conditional_8_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "titleControl", "errors", "required", "maxlength", "titleUnique", "CommonCourseCompetencyFormComponent_Conditional_2_Conditional_8_Template", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "DESCRIPTION_MAX", "CommonCourseCompetencyFormComponent_Conditional_3_Conditional_7_Conditional_3_Template", "descriptionControl", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateDescriptionControl", "CommonCourseCompetencyFormComponent_Conditional_3_Conditional_7_Template", "value", "\u0275\u0275textInterpolate2", "suggestedTaxonomies", "join", "CommonCourseCompetencyFormComponent_Conditional_11_Conditional_6_Template", "\u0275\u0275textInterpolate1", "length", "taxonomyControl", "averageStudentScore", "CommonCourseCompetencyFormComponent_Conditional_12_Conditional_6_Template", "tmp_1_0", "masteryThresholdControl", "undefined", "DEFAULT_MASTERY_THRESHOLD", "CommonCourseCompetencyFormComponent", "translateService", "inject", "TranslateService", "formData", "isEditMode", "isInConnectMode", "isInSingleLectureMode", "lecturesOfCourseWithLectureUnits", "form", "onTitleOrDescriptionChange", "EventEmitter", "CourseCompetencyValidators", "DateTimePickerType", "faTimes", "faQuestionCircle", "competencyTaxonomy", "CompetencyTaxonomy", "get", "content", "setValue", "markAsDirty", "ngOnInit", "merge", "valueChanges", "subscribe", "suggestTaxonomies", "ngOnChanges", "setFormValues", "patchValue", "title", "toLowerCase", "description", "taxonomy", "keywords", "instant", "split", "taxonomyName", "push", "map", "keyword", "some", "includes", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "CommonCourseCompetencyFormComponent_Conditional_2_Template", "CommonCourseCompetencyFormComponent_Conditional_3_Template", "CommonCourseCompetencyFormComponent_Conditional_11_Template", "CommonCourseCompetencyFormComponent_Conditional_12_Template", "\u0275\u0275propertyInterpolate", "CALENDAR", "NgbDropdownModule", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "MinValidator", "MaxValidator", "FormGroupDirective", "FormControlName", "FormDateTimePickerComponent", "TaxonomySelectComponent", "MarkdownEditorMonacoComponent", "HelpIconComponent", "TranslateDirective", "ArtemisTranslatePipe", "styles"]
}
