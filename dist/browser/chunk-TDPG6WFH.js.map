{
  "version": 3,
  "sources": ["src/main/webapp/app/grading-system/grading-system-presentations/grading-system-presentations.component.ts", "src/main/webapp/app/grading-system/grading-system-presentations/grading-system-presentations.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges } from '@angular/core';\r\nimport { ModePickerComponent, ModePickerOption } from 'app/exercises/shared/mode-picker/mode-picker.component';\r\nimport { GradingScale } from 'app/entities/grading-scale.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\nexport enum PresentationType {\r\n    NONE = 'none',\r\n    BASIC = 'basic',\r\n    GRADED = 'graded',\r\n}\r\nexport interface PresentationsConfig {\r\n    // The type of presentations\r\n    presentationType: PresentationType;\r\n    // The number of basic presentations\r\n    presentationScore?: number;\r\n    // The combined weight of graded presentations\r\n    presentationsWeight?: number;\r\n    // The number of graded presentations\r\n    presentationsNumber?: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-grading-system-presentations',\r\n    templateUrl: './grading-system-presentations.component.html',\r\n    styleUrls: ['./grading-system-presentations.component.scss'],\r\n    imports: [TranslateDirective, FormsModule, ModePickerComponent, HelpIconComponent],\r\n})\r\nexport class GradingSystemPresentationsComponent implements OnChanges {\r\n    readonly NONE = PresentationType.NONE;\r\n    readonly BASIC = PresentationType.BASIC;\r\n    readonly GRADED = PresentationType.GRADED;\r\n\r\n    readonly modePickerOptions: ModePickerOption<PresentationType>[] = [\r\n        {\r\n            value: PresentationType.NONE,\r\n            labelKey: 'artemisApp.gradingSystem.presentationType.none',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n        {\r\n            value: PresentationType.BASIC,\r\n            labelKey: 'artemisApp.gradingSystem.presentationType.basic',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n        {\r\n            value: PresentationType.GRADED,\r\n            labelKey: 'artemisApp.gradingSystem.presentationType.graded',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n    ];\r\n\r\n    @Input()\r\n    gradingScale: GradingScale;\r\n\r\n    @Input()\r\n    presentationsConfig: PresentationsConfig;\r\n\r\n    ngOnChanges() {\r\n        this.initializePresentationConfig();\r\n    }\r\n\r\n    private initializePresentationConfig() {\r\n        if (this.isGradedPresentation()) {\r\n            this.presentationsConfig.presentationType = PresentationType.GRADED;\r\n        } else if (this.isBasicPresentation()) {\r\n            this.presentationsConfig.presentationType = PresentationType.BASIC;\r\n        } else {\r\n            this.presentationsConfig.presentationType = PresentationType.NONE;\r\n        }\r\n        this.presentationsConfig.presentationsNumber = this.gradingScale.presentationsNumber;\r\n        this.presentationsConfig.presentationsWeight = this.gradingScale.presentationsWeight;\r\n    }\r\n\r\n    isBasicPresentation(): boolean {\r\n        return (this.gradingScale.course?.presentationScore ?? 0) > 0;\r\n    }\r\n\r\n    isGradedPresentation(): boolean {\r\n        let isGradedPresentation = true;\r\n        isGradedPresentation &&= (this.gradingScale.presentationsWeight ?? -1) >= 0;\r\n        isGradedPresentation &&= (this.gradingScale.presentationsNumber ?? -1) > 0;\r\n        return isGradedPresentation;\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate that presentation mode changed\r\n     * @param presentationType - Presentation mode\r\n     */\r\n    onPresentationTypeChange(presentationType: PresentationType) {\r\n        this.presentationsConfig.presentationType = presentationType;\r\n        switch (presentationType) {\r\n            case PresentationType.NONE: {\r\n                this.updatePresentationScore(undefined);\r\n                this.updatePresentationsNumber(undefined);\r\n                this.updatePresentationsWeight(undefined);\r\n                break;\r\n            }\r\n            case PresentationType.BASIC: {\r\n                this.updatePresentationScore(2); // default value\r\n                this.updatePresentationsNumber(undefined);\r\n                this.updatePresentationsWeight(undefined);\r\n                break;\r\n            }\r\n            case PresentationType.GRADED: {\r\n                this.updatePresentationScore(undefined);\r\n                this.updatePresentationsNumber(2); // default value\r\n                this.updatePresentationsWeight(20); // default value\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update number of basic presentations\r\n     * @param presentationsNumber\r\n     */\r\n    updatePresentationScore(presentationsNumber?: number) {\r\n        if (this.gradingScale.course) {\r\n            this.presentationsConfig.presentationScore = (presentationsNumber ?? -1) > 0 ? presentationsNumber : undefined;\r\n            this.gradingScale.course.presentationScore = this.presentationsConfig.presentationScore;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update number of graded presentations\r\n     * @param presentationsNumber\r\n     */\r\n    updatePresentationsNumber(presentationsNumber?: number) {\r\n        this.presentationsConfig.presentationsNumber = (presentationsNumber ?? -1) > 0 ? presentationsNumber : undefined;\r\n        this.gradingScale.presentationsNumber = this.presentationsConfig.presentationsNumber;\r\n    }\r\n\r\n    /**\r\n     * Update combined weight of graded presentations\r\n     * @param presentationsWeight\r\n     */\r\n    updatePresentationsWeight(presentationsWeight?: number) {\r\n        this.presentationsConfig.presentationsWeight = (presentationsWeight ?? -1) >= 0 ? presentationsWeight : undefined;\r\n        this.gradingScale.presentationsWeight = this.presentationsConfig.presentationsWeight;\r\n    }\r\n}\r\n", "@if (gradingScale.course) {\r\n    <div class=\"form-group\">\r\n        <div class=\"row\">\r\n            <div class=\"col-auto\">\r\n                <div>\r\n                    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.gradingSystem.presentationType.title\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.gradingSystem.presentationType.description\" />\r\n                </div>\r\n                <div>\r\n                    <jhi-mode-picker [options]=\"modePickerOptions\" [value]=\"presentationsConfig.presentationType\" (valueChange)=\"onPresentationTypeChange($event!)\" />\r\n                </div>\r\n            </div>\r\n            @if (presentationsConfig.presentationType === BASIC && gradingScale.course !== undefined) {\r\n                <div class=\"col-auto\">\r\n                    <div>\r\n                        <label class=\"label-narrow\" jhiTranslate=\"artemisApp.gradingSystem.basicPresentation.label\"></label>\r\n                    </div>\r\n                    <div>\r\n                        <div class=\"input-group\">\r\n                            <div class=\"input-group-prepend\">\r\n                                <label class=\"input-group-text\" for=\"field_numberBasicPresentations\" jhiTranslate=\"artemisApp.gradingSystem.gradedPresentation.number\"\r\n                                    >Number</label\r\n                                >\r\n                            </div>\r\n                            <input\r\n                                name=\"numBasicPresentations\"\r\n                                id=\"field_numberBasicPresentations\"\r\n                                type=\"number\"\r\n                                min=\"1\"\r\n                                pattern=\"\\d*\"\r\n                                required\r\n                                class=\"form-control input-number-short\"\r\n                                [(ngModel)]=\"gradingScale.course!.presentationScore\"\r\n                                (ngModelChange)=\"updatePresentationScore($event)\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            @if (presentationsConfig.presentationType === GRADED) {\r\n                <div class=\"col-auto\">\r\n                    <div>\r\n                        <label class=\"label-narrow\" jhiTranslate=\"artemisApp.gradingSystem.gradedPresentation.label\"></label>\r\n                    </div>\r\n                    <div>\r\n                        <div class=\"input-group\">\r\n                            <div class=\"input-group-prepend\">\r\n                                <label class=\"input-group-text\" for=\"field_numberPresentations\" jhiTranslate=\"artemisApp.gradingSystem.gradedPresentation.number\"></label>\r\n                            </div>\r\n                            <input\r\n                                name=\"numPresentations\"\r\n                                id=\"field_numberPresentations\"\r\n                                type=\"number\"\r\n                                min=\"1\"\r\n                                pattern=\"\\d*\"\r\n                                required\r\n                                class=\"form-control input-number-short\"\r\n                                [(ngModel)]=\"presentationsConfig.presentationsNumber\"\r\n                                (ngModelChange)=\"updatePresentationsNumber($event)\"\r\n                            />\r\n                            <div class=\"input-group-prepend\">\r\n                                <label class=\"input-group-text\" for=\"field_weightPresentations\" jhiTranslate=\"artemisApp.gradingSystem.gradedPresentation.weight\"\r\n                                    >Combined Weight</label\r\n                                >\r\n                            </div>\r\n                            <input\r\n                                name=\"weightPresentations\"\r\n                                id=\"field_weightPresentations\"\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                max=\"99\"\r\n                                required\r\n                                class=\"form-control input-number-short\"\r\n                                [(ngModel)]=\"presentationsConfig.presentationsWeight\"\r\n                                (ngModelChange)=\"updatePresentationsWeight($event)\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "gradingScale", "course", "presentationScore", "\u0275\u0275resetView", "\u0275\u0275listener", "updatePresentationScore", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "_r4", "presentationsConfig", "presentationsNumber", "updatePresentationsNumber", "presentationsWeight", "updatePresentationsWeight", "_r1", "onPresentationTypeChange", "\u0275\u0275template", "GradingSystemPresentationsComponent_Conditional_0_Conditional_20_Template", "GradingSystemPresentationsComponent_Conditional_0_Conditional_21_Template", "\u0275\u0275property", "modePickerOptions", "presentationType", "\u0275\u0275conditional", "BASIC", "undefined", "GRADED", "PresentationType", "GradingSystemPresentationsComponent", "NONE", "value", "labelKey", "btnClass", "ngOnChanges", "initializePresentationConfig", "isGradedPresentation", "isBasicPresentation", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "GradingSystemPresentationsComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "RequiredValidator", "PatternValidator", "MinValidator", "MaxValidator", "NgModel", "ModePickerComponent", "HelpIconComponent", "styles"]
}
