{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/quiz-exercise-update.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-update.component.html"],
  "sourcesContent": ["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, OnChanges, OnInit, SimpleChanges, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { DifficultyPickerComponent } from 'app/exercises/shared/difficulty-picker/difficulty-picker.component';\r\nimport { ExerciseTitleChannelNameComponent } from 'app/exercises/shared/exercise-title-channel-name/exercise-title-channel-name.component';\r\nimport { IncludedInOverallScorePickerComponent } from 'app/exercises/shared/included-in-overall-score-picker/included-in-overall-score-picker.component';\r\nimport { QuizExerciseService } from './quiz-exercise.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { QuizBatch, QuizExercise, QuizMode, resetQuizForImport } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { DragAndDropQuestionUtil } from 'app/exercises/quiz/shared/drag-and-drop-question-util.service';\r\nimport { ShortAnswerQuestionUtil } from 'app/exercises/quiz/shared/short-answer-question-util.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Duration } from './quiz-exercise-interfaces';\r\nimport { NgbDate, NgbModal, NgbModalOptions, NgbModalRef, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { Exercise, IncludedInOverallScore, ValidationReason } from 'app/entities/exercise.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\n\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { QuizExerciseValidationDirective } from 'app/exercises/quiz/manage/quiz-exercise-validation.directive';\r\nimport { faExclamationCircle, faPlus, faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { isQuizEditable } from 'app/exercises/quiz/shared/quiz-manage-util.service';\r\nimport { QuizQuestionListEditComponent } from 'app/exercises/quiz/manage/quiz-question-list-edit.component';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { GenericConfirmationDialogComponent } from 'app/overview/course-conversations/dialogs/generic-confirmation-dialog/generic-confirmation-dialog.component';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { CategorySelectorComponent } from 'app/shared/category-selector/category-selector.component';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { CompetencySelectionComponent } from 'app/shared/competency-selection/competency-selection.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { JsonPipe, NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-exercise-detail',\r\n    templateUrl: './quiz-exercise-update.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DragAndDropQuestionUtil, ShortAnswerQuestionUtil],\r\n    styleUrls: ['./quiz-exercise-update.component.scss', '../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        FormsModule,\r\n        ExerciseTitleChannelNameComponent,\r\n        HelpIconComponent,\r\n        CategorySelectorComponent,\r\n        DifficultyPickerComponent,\r\n        FormDateTimePickerComponent,\r\n        ButtonComponent,\r\n        IncludedInOverallScorePickerComponent,\r\n        CompetencySelectionComponent,\r\n        QuizQuestionListEditComponent,\r\n        NgbTooltip,\r\n        FaIconComponent,\r\n        NgClass,\r\n        JsonPipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class QuizExerciseUpdateComponent extends QuizExerciseValidationDirective implements OnInit, OnChanges, ComponentCanDeactivate {\r\n    private route = inject(ActivatedRoute);\r\n    private courseService = inject(CourseManagementService);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private router = inject(Router);\r\n    private translateService = inject(TranslateService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private alertService = inject(AlertService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    @ViewChild('quizQuestionsEdit')\r\n    quizQuestionListEditComponent: QuizQuestionListEditComponent;\r\n\r\n    course?: Course;\r\n    exerciseGroup?: ExerciseGroup;\r\n    courseRepository: CourseManagementService;\r\n    notificationText?: string;\r\n\r\n    isImport = false;\r\n\r\n    /** Constants for 'Add existing questions' and 'Import file' features **/\r\n    showExistingQuestions = false;\r\n\r\n    exams: Exam[] = [];\r\n\r\n    courses: Course[] = [];\r\n    quizExercises: QuizExercise[];\r\n    allExistingQuestions: QuizQuestion[];\r\n    existingQuestions: QuizQuestion[];\r\n    importFile?: File;\r\n    importFileName: string;\r\n    searchQueryText: string;\r\n    dndFilterEnabled: boolean;\r\n    mcqFilterEnabled: boolean;\r\n    shortAnswerFilterEnabled: boolean;\r\n\r\n    /** Duration object **/\r\n    duration = new Duration(0, 0);\r\n\r\n    /** Status constants **/\r\n    isSaving = false;\r\n    scheduleQuizStart = false;\r\n\r\n    exerciseCategories: ExerciseCategory[];\r\n    existingCategories: ExerciseCategory[];\r\n\r\n    /** Route params **/\r\n    examId?: number;\r\n    courseId?: number;\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n    faXmark = faXmark;\r\n    faExclamationCircle = faExclamationCircle;\r\n\r\n    readonly QuizMode = QuizMode;\r\n    readonly documentationType: DocumentationType = 'Quiz';\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n\r\n    readonly defaultSecondLayerDialogOptions: NgbModalOptions = {\r\n        size: 'md',\r\n        scrollable: false,\r\n        backdrop: 'static',\r\n        backdropClass: 'second-layer-modal-bg',\r\n        centered: true,\r\n    };\r\n\r\n    /**\r\n     * Initialize variables and load course and quiz from server.\r\n     */\r\n    ngOnInit(): void {\r\n        /** Initialize local constants **/\r\n        this.showExistingQuestions = false;\r\n        this.quizExercises = [];\r\n        this.allExistingQuestions = [];\r\n        this.existingQuestions = [];\r\n        this.importFile = undefined;\r\n        this.importFileName = '';\r\n        this.searchQueryText = '';\r\n        this.dndFilterEnabled = true;\r\n        this.mcqFilterEnabled = true;\r\n        this.shortAnswerFilterEnabled = true;\r\n        this.notificationText = undefined;\r\n\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        const quizId = Number(this.route.snapshot.paramMap.get('exerciseId'));\r\n        const groupId = Number(this.route.snapshot.paramMap.get('exerciseGroupId'));\r\n        if (this.examId && groupId) {\r\n            this.isExamMode = true;\r\n        }\r\n\r\n        if (this.router.url.includes('/import')) {\r\n            this.isImport = true;\r\n        }\r\n\r\n        /** Query the courseService for the participationId given by the params */\r\n        if (this.courseId) {\r\n            this.courseService.find(this.courseId).subscribe((response: HttpResponse<Course>) => {\r\n                this.course = response.body!;\r\n                // Load exerciseGroup and set exam mode\r\n                if (this.isExamMode) {\r\n                    this.exerciseGroupService.find(this.courseId!, this.examId!, groupId).subscribe((groupResponse: HttpResponse<ExerciseGroup>) => {\r\n                        // Make sure to call init if we didn't receive an id => new quiz-exercise\r\n                        this.exerciseGroup = groupResponse.body || undefined;\r\n                        if (!quizId) {\r\n                            this.init();\r\n                        } else if (this.quizExercise) {\r\n                            this.quizExercise.exerciseGroup = this.exerciseGroup;\r\n                            this.savedEntity.exerciseGroup = this.exerciseGroup;\r\n                        }\r\n                    });\r\n                } else {\r\n                    // Make sure to call init if we didn't receive an id => new quiz-exercise\r\n                    if (!quizId) {\r\n                        this.init();\r\n                    } else if (this.quizExercise) {\r\n                        this.quizExercise.course = this.course;\r\n                        this.savedEntity.course = this.course;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (quizId) {\r\n            this.quizExerciseService.find(quizId).subscribe((response: HttpResponse<QuizExercise>) => {\r\n                this.quizExercise = response.body!;\r\n                this.init();\r\n                if (!this.quizExercise.isEditable) {\r\n                    this.alertService.error('error.http.403');\r\n                }\r\n                if (this.testRunExistsAndShouldNotBeIgnored()) {\r\n                    this.alertService.warning(this.translateService.instant('artemisApp.quizExercise.edit.testRunSubmissionsExist'));\r\n                }\r\n            });\r\n        }\r\n\r\n        // TODO: we should try to avoid calling this.init() above more than once\r\n        this.courseRepository = this.courseService;\r\n    }\r\n\r\n    /**\r\n     * Initializes and returns a new quiz exercise\r\n     */\r\n    initializeNewQuizExercise(): QuizExercise {\r\n        const newQuiz = new QuizExercise(undefined, undefined);\r\n        newQuiz.title = '';\r\n        newQuiz.duration = 600;\r\n        newQuiz.isOpenForPractice = false;\r\n        newQuiz.releaseDate = dayjs();\r\n        newQuiz.randomizeQuestionOrder = true;\r\n        newQuiz.quizQuestions = [];\r\n        newQuiz.quizMode = QuizMode.SYNCHRONIZED;\r\n        newQuiz.allowedNumberOfAttempts = 1;\r\n        newQuiz.isEditable = true;\r\n        this.prepareEntity(newQuiz);\r\n        return newQuiz;\r\n    }\r\n\r\n    /**\r\n     * Initializes local constants and prepares the QuizExercise entity\r\n     */\r\n    init(): void {\r\n        if (!this.quizExercise) {\r\n            this.quizExercise = this.initializeNewQuizExercise();\r\n        } else {\r\n            this.quizExercise.isEditable = isQuizEditable(this.quizExercise);\r\n        }\r\n\r\n        if (this.isImport || this.isExamMode) {\r\n            resetQuizForImport(this.quizExercise);\r\n        }\r\n\r\n        if (this.isExamMode) {\r\n            this.quizExercise.course = undefined;\r\n            if (!this.quizExercise.exerciseGroup || this.isImport) {\r\n                this.quizExercise.exerciseGroup = this.exerciseGroup;\r\n            }\r\n        } else {\r\n            this.quizExercise.exerciseGroup = undefined;\r\n            if (!this.quizExercise.course || this.isImport) {\r\n                this.quizExercise.course = this.course;\r\n            }\r\n        }\r\n\r\n        if (!this.isExamMode) {\r\n            this.exerciseCategories = this.quizExercise.categories || [];\r\n            this.courseService.findAllCategoriesOfCourse(this.courseId!).subscribe({\r\n                next: (response: HttpResponse<string[]>) => {\r\n                    this.existingCategories = this.exerciseService.convertExerciseCategoriesAsStringFromServer(response.body!);\r\n                },\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n        }\r\n        // Exam exercises cannot be not included into the total score\r\n        if (this.isExamMode && this.quizExercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED) {\r\n            this.quizExercise.includedInOverallScore = IncludedInOverallScore.INCLUDED_COMPLETELY;\r\n        }\r\n        this.scheduleQuizStart = (this.quizExercise.quizBatches?.length ?? 0) > 0;\r\n        this.updateDuration();\r\n        this.exerciseService.validateDate(this.quizExercise);\r\n\r\n        // Assign savedEntity to identify local changes\r\n        this.savedEntity = this.quizExercise.id && !this.isImport ? cloneDeep(this.quizExercise) : new QuizExercise(undefined, undefined);\r\n\r\n        this.cacheValidation();\r\n    }\r\n\r\n    /**\r\n     * Validates if the date is correct\r\n     */\r\n    validateDate() {\r\n        this.exerciseService.validateDate(this.quizExercise);\r\n        const dueDate = this.quizExercise.quizMode === QuizMode.SYNCHRONIZED ? undefined : this.quizExercise.dueDate;\r\n        this.quizExercise?.quizBatches?.forEach((batch) => {\r\n            // validate release < start and start + duration > due\r\n            const startTime = dayjs(batch.startTime);\r\n            const endTime = startTime.add(dayjs.duration(this.duration.minutes, 'minutes')).add(dayjs.duration(this.duration.seconds, 'seconds'));\r\n            batch.startTimeError = startTime.isBefore(this.quizExercise.releaseDate) || (dueDate != undefined && endTime.isAfter(dueDate));\r\n        });\r\n    }\r\n\r\n    cacheValidation() {\r\n        if (this.quizExercise.quizMode === QuizMode.SYNCHRONIZED) {\r\n            this.quizExercise.dueDate = undefined; // Due date is calculated on server side\r\n            if (this.scheduleQuizStart) {\r\n                if ((this.quizExercise.quizBatches?.length ?? 0) !== 1) {\r\n                    this.quizExercise.quizBatches = [this.quizExercise.quizBatches?.[0] ?? new QuizBatch()];\r\n                }\r\n            } else {\r\n                if ((this.quizExercise.quizBatches?.length ?? 0) !== 0) {\r\n                    this.quizExercise.quizBatches = [];\r\n                }\r\n            }\r\n        }\r\n\r\n        this.validateDate();\r\n        return super.cacheValidation(this.changeDetector);\r\n    }\r\n\r\n    addQuizBatch() {\r\n        if (!this.quizExercise.quizBatches) {\r\n            this.quizExercise.quizBatches = [];\r\n        }\r\n        this.quizExercise.quizBatches.push(new QuizBatch());\r\n    }\r\n\r\n    removeQuizBatch(quizBatch: QuizBatch) {\r\n        if (this.quizExercise.quizBatches) {\r\n            const idx = this.quizExercise.quizBatches.indexOf(quizBatch);\r\n            if (idx >= 0) {\r\n                this.quizExercise.quizBatches.splice(idx, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply updates for changed course and quizExercise\r\n     * @param changes the changes to apply\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.course || changes.quizExercise) {\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the categories and overwrite the cache, overwrites existing categories\r\n     * @param categories the new categories\r\n     */\r\n    updateCategories(categories: ExerciseCategory[]) {\r\n        this.quizExercise.categories = categories;\r\n        this.exerciseCategories = categories;\r\n        this.cacheValidation();\r\n    }\r\n\r\n    /**\r\n     * Determine which dropdown to display depending on the relationship between start time, end time, and current time\r\n     * @returns {string} Name of the dropdown to show\r\n     */\r\n    get showDropdown(): string {\r\n        if (!this.quizExercise || !this.quizExercise.quizStarted || this.isImport) {\r\n            return 'isVisibleBeforeStart';\r\n        } else if (this.quizExercise.quizEnded) {\r\n            return 'isOpenForPractice';\r\n        } else {\r\n            return 'active';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether pending changes are present, preventing a deactivation.\r\n     */\r\n    canDeactivate(): boolean {\r\n        return !this.pendingChangesCache;\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.translateService.instant('pendingChanges');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @desc Callback for datepicker to decide whether given date should be disabled\r\n     * All dates which are in the past (< today) are disabled\r\n     */\r\n    isDateInPast = (date: NgbDate, current: { month: number }) =>\r\n        current.month < dayjs().month() + 1 ||\r\n        dayjs()\r\n            .year(date.year)\r\n            .month(date.month - 1)\r\n            .date(date.day)\r\n            .isBefore(dayjs());\r\n\r\n    /**\r\n     * Iterates over the questions of the quizExercise and calculates the sum of all question scores\r\n     */\r\n    calculateMaxExerciseScore(): number {\r\n        let scoreSum = 0;\r\n        this.quizExercise.quizQuestions!.forEach((question) => (scoreSum += question.points!));\r\n        return scoreSum;\r\n    }\r\n\r\n    /**\r\n     * Remove question from the quiz\r\n     * @param questionToDelete {QuizQuestion} the question to remove\r\n     */\r\n    deleteQuestion(questionToDelete: QuizQuestion): void {\r\n        this.quizExercise.quizQuestions = this.quizExercise.quizQuestions?.filter((question) => question !== questionToDelete);\r\n        this.cacheValidation();\r\n    }\r\n\r\n    checkItemCountDragAndDrop(dragAndDropQuestions: DragAndDropQuestion[]): boolean {\r\n        if (!dragAndDropQuestions) return false;\r\n        return dragAndDropQuestions?.some((dragAndDropQuestion) => {\r\n            const numberOfDropLocations = dragAndDropQuestion.dropLocations?.length ?? 1;\r\n            const numberOfDragItems = dragAndDropQuestion.dragItems?.length ?? 1;\r\n            const numberOfCorrectMappings = dragAndDropQuestion.correctMappings?.length ?? 1;\r\n            // Magic number is 13 * 13 * 13\r\n            return numberOfCorrectMappings * numberOfDragItems * numberOfDropLocations > 2197;\r\n        });\r\n    }\r\n    checkItemCountShortAnswer(shortAnswerQuestions: ShortAnswerQuestion[]): boolean {\r\n        if (!shortAnswerQuestions) return false;\r\n        return shortAnswerQuestions?.some((shortAnswerQuestion) => {\r\n            const numberOfCorrectMappings = shortAnswerQuestion.correctMappings?.length ?? 1;\r\n            const numberOfSpots = shortAnswerQuestion.spots?.length ?? 1;\r\n            const numberOfSolutions = shortAnswerQuestion.solutions?.length ?? 1;\r\n            // Magic number is 13 * 13 * 13\r\n            return numberOfCorrectMappings * numberOfSpots * numberOfSolutions > 2197;\r\n        });\r\n    }\r\n\r\n    validateItemLimit() {\r\n        const dragAndDropQuestions = this.quizExercise.quizQuestions?.filter((question) => {\r\n            return question.type === this.DRAG_AND_DROP;\r\n        });\r\n\r\n        const shortAnswerQuestions = this.quizExercise.quizQuestions?.filter((question) => {\r\n            return question.type === this.SHORT_ANSWER;\r\n        });\r\n\r\n        const dragAndDropItemsExceedLimit = this.checkItemCountDragAndDrop(dragAndDropQuestions as DragAndDropQuestion[]);\r\n        const shortAnswerItemsExceedLimit = this.checkItemCountShortAnswer(shortAnswerQuestions as ShortAnswerQuestion[]);\r\n\r\n        if (dragAndDropItemsExceedLimit || shortAnswerItemsExceedLimit) {\r\n            const keys = {\r\n                titleKey: 'artemisApp.quizWarning.title',\r\n                questionKey: 'artemisApp.quizWarning.question',\r\n                descriptionKey: 'artemisApp.quizWarning.description',\r\n                confirmButtonKey: 'artemisApp.quizWarning.confirmButton',\r\n            };\r\n            const modalRef: NgbModalRef = this.modalService.open(GenericConfirmationDialogComponent, this.defaultSecondLayerDialogOptions);\r\n            modalRef.componentInstance.translationKeys = keys;\r\n            modalRef.componentInstance.canBeUndone = true;\r\n            modalRef.componentInstance.initialize();\r\n            modalRef.result.then(\r\n                () => {\r\n                    // On confirm\r\n                    this.save();\r\n                },\r\n                () => {\r\n                    // On cancel\r\n                    return;\r\n                },\r\n            );\r\n        } else {\r\n            this.save();\r\n        }\r\n    }\r\n    /**\r\n     * Save the quiz to the server and invoke callback functions depending on result\r\n     */\r\n    save(): void {\r\n        if (this.hasSavedQuizStarted || !this.pendingChangesCache || !this.quizIsValid) {\r\n            return;\r\n        }\r\n\r\n        Exercise.sanitize(this.quizExercise);\r\n        const filesMap = this.quizQuestionListEditComponent.fileMap;\r\n        const files = new Map<string, Blob>();\r\n        filesMap.forEach((value, key) => {\r\n            files.set(key, value.file);\r\n        });\r\n\r\n        this.isSaving = true;\r\n        this.quizQuestionListEditComponent.parseAllQuestions();\r\n        if (this.quizExercise.id !== undefined) {\r\n            if (this.isImport) {\r\n                this.quizExerciseService.import(this.quizExercise, files).subscribe({\r\n                    next: (quizExerciseResponse: HttpResponse<QuizExercise>) => {\r\n                        if (quizExerciseResponse.body) {\r\n                            this.onSaveSuccess(quizExerciseResponse.body, true);\r\n                        } else {\r\n                            this.onSaveError();\r\n                        }\r\n                    },\r\n                    error: (error) => this.onSaveError(error),\r\n                });\r\n            } else {\r\n                const requestOptions = {} as any;\r\n                if (this.notificationText) {\r\n                    requestOptions.notificationText = this.notificationText;\r\n                }\r\n                this.quizExerciseService.update(this.quizExercise.id, this.quizExercise, files, requestOptions).subscribe({\r\n                    next: (quizExerciseResponse: HttpResponse<QuizExercise>) => {\r\n                        this.notificationText = undefined;\r\n                        if (quizExerciseResponse.body) {\r\n                            this.onSaveSuccess(quizExerciseResponse.body, false);\r\n                        } else {\r\n                            this.onSaveError();\r\n                        }\r\n                    },\r\n                    error: (error) => this.onSaveError(error),\r\n                });\r\n            }\r\n        } else {\r\n            this.quizExerciseService.create(this.quizExercise, files).subscribe({\r\n                next: (quizExerciseResponse: HttpResponse<QuizExercise>) => {\r\n                    if (quizExerciseResponse.body) {\r\n                        this.onSaveSuccess(quizExerciseResponse.body, true);\r\n                    } else {\r\n                        this.onSaveError();\r\n                    }\r\n                },\r\n                error: (error) => this.onSaveError(error),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function for when the save succeeds\r\n     * Terminates the saving process and assign the returned quizExercise to the local entities\r\n     * @param quizExercise Saved quizExercise entity\r\n     * @param isCreate Flag if the quizExercise was created or updated\r\n     */\r\n    private onSaveSuccess(quizExercise: QuizExercise, isCreate: boolean): void {\r\n        this.isSaving = false;\r\n        this.pendingChangesCache = false;\r\n        this.prepareEntity(quizExercise);\r\n        this.quizQuestionListEditComponent.fileMap.clear();\r\n        this.quizExercise = quizExercise;\r\n        this.quizExercise.isEditable = isQuizEditable(this.quizExercise);\r\n        this.exerciseService.validateDate(this.quizExercise);\r\n        this.savedEntity = cloneDeep(quizExercise);\r\n        this.changeDetector.detectChanges();\r\n\r\n        // Navigate back only if it's an import\r\n        // If we edit the exercise, a user might just want to save the current state of the added quiz questions without going back\r\n        if (this.isImport) {\r\n            this.previousState();\r\n        } else if (isCreate) {\r\n            this.router.navigate(['..', quizExercise.id, 'edit'], { relativeTo: this.route, skipLocationChange: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function for when the save fails\r\n     */\r\n    private onSaveError = (errorRes?: HttpErrorResponse): void => {\r\n        if (errorRes?.error && errorRes.error.title) {\r\n            this.alertService.addErrorAlert(errorRes.error.title, errorRes.error.message, errorRes.error.params);\r\n        }\r\n        this.alertService.error('artemisApp.quizExercise.saveError');\r\n        this.isSaving = false;\r\n        this.changeDetector.detectChanges();\r\n    };\r\n\r\n    /**\r\n     * Makes sure the entity is well-formed and its fields are of the correct types\r\n     * @param quizExercise {QuizExercise} exercise which will be prepared\r\n     */\r\n    prepareEntity(quizExercise: QuizExercise): void {\r\n        if (!this.isExamMode) {\r\n            quizExercise.releaseDate = quizExercise.releaseDate ? dayjs(quizExercise.releaseDate) : dayjs();\r\n            quizExercise.duration = Number(quizExercise.duration);\r\n            quizExercise.duration = isNaN(quizExercise.duration) ? 10 : quizExercise.duration;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reach to changes of duration inputs by updating model and ui\r\n     */\r\n    onDurationChange(): void {\r\n        if (!this.isExamMode) {\r\n            const duration = dayjs.duration(this.duration.minutes, 'minutes').add(this.duration.seconds, 'seconds');\r\n            this.quizExercise.duration = Math.min(Math.max(duration.asSeconds(), 0), 10 * 60 * 60);\r\n            this.updateDuration();\r\n            this.cacheValidation();\r\n        } else if (this.quizExercise.releaseDate && this.quizExercise.dueDate) {\r\n            const duration = dayjs(this.quizExercise.dueDate).diff(this.quizExercise.releaseDate, 's');\r\n            this.quizExercise.duration = round(duration);\r\n            this.updateDuration();\r\n            this.cacheValidation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update ui to current value of duration\r\n     */\r\n    updateDuration(): void {\r\n        const duration = dayjs.duration(this.quizExercise.duration!, 'seconds');\r\n        this.changeDetector.detectChanges();\r\n        // when input fields are empty do not update their values\r\n        if (this.duration.minutes !== undefined) {\r\n            this.duration.minutes = 60 * duration.hours() + duration.minutes();\r\n        }\r\n        if (this.duration.seconds !== undefined) {\r\n            this.duration.seconds = duration.seconds();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate back to the overview\r\n     */\r\n    previousState(): void {\r\n        this.navigationUtilService.navigateBackFromExerciseUpdate(this.quizExercise);\r\n    }\r\n\r\n    /**\r\n     * Check if the saved quiz has started\r\n     * @return {boolean} true if the saved quiz has started, otherwise false\r\n     */\r\n    get hasSavedQuizStarted(): boolean {\r\n        return !!(this.savedEntity && this.savedEntity.quizBatches && this.savedEntity.quizBatches.some((batch) => dayjs(batch.startTime).isBefore(dayjs())));\r\n    }\r\n\r\n    includedInOverallScoreChange(includedInOverallScore: IncludedInOverallScore) {\r\n        this.quizExercise.includedInOverallScore = includedInOverallScore;\r\n        this.cacheValidation();\r\n    }\r\n\r\n    computeInvalidReasons(): ValidationReason[] {\r\n        const invalidReasons = new Array<ValidationReason>();\r\n        if (!this.quizExercise) {\r\n            return [];\r\n        }\r\n        // TODO: quiz cleanup: properly validate dates and deduplicate the checks (see isValidQuiz)\r\n        return super.computeInvalidReasons().concat(invalidReasons);\r\n    }\r\n\r\n    isSaveDisabled(): boolean {\r\n        return this.isSaving || !this.pendingChangesCache || !this.quizIsValid || this.hasSavedQuizStarted || this.quizExercise.dueDateError || this.hasErrorInQuizBatches();\r\n    }\r\n\r\n    hasErrorInQuizBatches(): boolean {\r\n        return !!this.quizExercise?.quizBatches?.some((batch) => batch.startTimeError);\r\n    }\r\n\r\n    handleQuestionChanged() {\r\n        this.cacheValidation();\r\n    }\r\n}\r\n", "@if (quizExercise && quizExercise.isEditable) {\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <div class=\"title\">\r\n                <div class=\"col-sm d-flex align-items-center\">\r\n                    @if (!quizExercise.id) {\r\n                        <h4 id=\"jhi-text-exercise-heading-create\" jhiTranslate=\"artemisApp.quizExercise.home.createLabel\"></h4>\r\n                    }\r\n                    @if (!isImport && quizExercise.id) {\r\n                        <h4 id=\"jhi-text-exercise-heading-edit\" jhiTranslate=\"artemisApp.quizExercise.home.editLabel\"></h4>\r\n                    }\r\n                    @if (isImport) {\r\n                        <h4 id=\"jhi-text-exercise-heading-import\" jhiTranslate=\"artemisApp.quizExercise.home.importLabel\"></h4>\r\n                    }\r\n                    <jhi-documentation-button [type]=\"documentationType\" />\r\n                </div>\r\n                <h4>\r\n                    <span class=\"badge bg-info align-text-top float-end\">\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.maxScore\"></span>&nbsp;\r\n                        <span class=\"badge max-score\">{{ calculateMaxExerciseScore() }}</span>\r\n                        <span class=\"sr-only\" jhiTranslate=\"artemisApp.quizExercise.maxScore\"></span>\r\n                    </span>\r\n                </h4>\r\n            </div>\r\n            @if (hasSavedQuizStarted) {\r\n                <div>\r\n                    <div class=\"quiz-is-active-background\"></div>\r\n                    <div class=\"quiz-is-active-overlay alert alert-warning\">\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.edit.quizHasStarted\"></span>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div class=\"edit-quiz\">\r\n                <form name=\"editForm\" role=\"form\" novalidate>\r\n                    <jhi-exercise-title-channel-name\r\n                        [exercise]=\"quizExercise\"\r\n                        [course]=\"quizExercise.course\"\r\n                        (onTitleChange)=\"cacheValidation()\"\r\n                        (onChannelNameChange)=\"cacheValidation()\"\r\n                        [isExamMode]=\"isExamMode\"\r\n                        [isImport]=\"isImport\"\r\n                    />\r\n                </form>\r\n                @if (!isExamMode) {\r\n                    <div class=\"form-group position-relative\">\r\n                        <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.categories\"></label>\r\n                        <jhi-help-icon text=\"artemisApp.exercise.categoriesTooltip\" />\r\n                        <jhi-category-selector\r\n                            [categories]=\"exerciseCategories\"\r\n                            [existingCategories]=\"existingCategories\"\r\n                            (selectedCategories)=\"updateCategories($event)\"\r\n                            (ngModelChange)=\"cacheValidation()\"\r\n                        />\r\n                    </div>\r\n                }\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-4 col-sm-12\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.difficulty\"></label>\r\n                            <div>\r\n                                <jhi-difficulty-picker (ngModelChange)=\"cacheValidation()\" [exercise]=\"quizExercise\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-4 col-sm-12\">\r\n                        <div class=\"form-group\">\r\n                            @if (!isExamMode) {\r\n                                <label for=\"quiz-duration-minutes\" jhiTranslate=\"artemisApp.quizExercise.duration\"></label>\r\n                                <div class=\"d-flex align-items-center\">\r\n                                    <input\r\n                                        id=\"quiz-duration-minutes\"\r\n                                        style=\"width: 70px\"\r\n                                        class=\"form-control me-2\"\r\n                                        title=\"Duration\"\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        max=\"600\"\r\n                                        [(ngModel)]=\"duration.minutes\"\r\n                                        (ngModelChange)=\"onDurationChange()\"\r\n                                    />\r\n                                    <span jhiTranslate=\"artemisApp.quizExercise.minutes\"></span>\r\n                                    <input\r\n                                        id=\"quiz-duration-seconds\"\r\n                                        style=\"width: 70px\"\r\n                                        class=\"form-control me-2 ms-2\"\r\n                                        title=\"Duration\"\r\n                                        type=\"number\"\r\n                                        max=\"60\"\r\n                                        min=\"-1\"\r\n                                        [(ngModel)]=\"duration.seconds\"\r\n                                        (ngModelChange)=\"onDurationChange()\"\r\n                                    />\r\n                                    <span jhiTranslate=\"artemisApp.quizExercise.seconds\"></span>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-4 col-sm-12\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"cbRandomizeOrder\" jhiTranslate=\"artemisApp.quizExercise.options\"></label>\r\n                            <div class=\"form-check custom-control custom-checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id=\"cbRandomizeOrder\"\r\n                                    class=\"form-check-input custom-control-input\"\r\n                                    [(ngModel)]=\"quizExercise.randomizeQuestionOrder\"\r\n                                    (ngModelChange)=\"cacheValidation()\"\r\n                                />\r\n                                <label class=\"form-check-label custom-control-label\" for=\"cbRandomizeOrder\" jhiTranslate=\"artemisApp.quizExercise.randomizeQuestionOrder\"></label>\r\n                            </div>\r\n                            @if (!isExamMode) {\r\n                                <label for=\"quizMode\" jhiTranslate=\"artemisApp.quizExercise.quizMode.title\" class=\"colon-suffix no-flex-shrink\"></label>\r\n                                <jhi-help-icon text=\"artemisApp.quizExercise.quizMode.explanation\" />\r\n                                <select id=\"quizMode\" class=\"form-select\" [(ngModel)]=\"quizExercise.quizMode\" (ngModelChange)=\"cacheValidation()\">\r\n                                    <option [value]=\"QuizMode.SYNCHRONIZED\" jhiTranslate=\"artemisApp.quizExercise.quizMode.synchronized\"></option>\r\n                                    <option [value]=\"QuizMode.BATCHED\" jhiTranslate=\"artemisApp.quizExercise.quizMode.batched\"></option>\r\n                                    <option [value]=\"QuizMode.INDIVIDUAL\" jhiTranslate=\"artemisApp.quizExercise.quizMode.individual\"></option>\r\n                                </select>\r\n                                <ng-container>\r\n                                    <!-- releaseDate works similar to Exam.visibleDate -->\r\n                                    <jhi-date-time-picker\r\n                                        id=\"pick-releaseDate\"\r\n                                        class=\"form-element\"\r\n                                        labelName=\"{{ 'artemisApp.quizExercise.releaseDate' | artemisTranslate }}\"\r\n                                        labelTooltip=\"{{ 'artemisApp.quizExercise.releaseDateExplanation.' + quizExercise.quizMode | artemisTranslate }}\"\r\n                                        [(ngModel)]=\"quizExercise.releaseDate\"\r\n                                        (valueChange)=\"cacheValidation()\"\r\n                                        [error]=\"false\"\r\n                                        name=\"releaseDate\"\r\n                                    />\r\n                                </ng-container>\r\n                                @if (quizExercise.quizMode !== QuizMode.SYNCHRONIZED) {\r\n                                    <jhi-date-time-picker\r\n                                        id=\"pick-dueDate\"\r\n                                        class=\"form-element\"\r\n                                        name=\"dueDate\"\r\n                                        [error]=\"!!quizExercise.dueDateError\"\r\n                                        labelName=\"{{ 'artemisApp.exercise.dueDate' | artemisTranslate }}\"\r\n                                        (valueChange)=\"cacheValidation()\"\r\n                                        [(ngModel)]=\"quizExercise.dueDate\"\r\n                                    />\r\n                                    @if (quizExercise.dueDateError) {\r\n                                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.quizExercise.dueDateError\"></span>\r\n                                    }\r\n                                }\r\n                                @if (quizExercise.quizMode === QuizMode.SYNCHRONIZED) {\r\n                                    <div class=\"form-check custom-control custom-checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"cbScheduleQuizStart\"\r\n                                            class=\"form-check-input custom-control-input\"\r\n                                            [(ngModel)]=\"scheduleQuizStart\"\r\n                                            (ngModelChange)=\"cacheValidation()\"\r\n                                        />\r\n                                        <label class=\"form-check-label custom-control-label\" for=\"cbScheduleQuizStart\" jhiTranslate=\"artemisApp.quizExercise.setStartTime\"></label>\r\n                                        <jhi-help-icon text=\"artemisApp.quizExercise.startTimeExplanation\" />\r\n                                    </div>\r\n                                }\r\n                                @if (quizExercise.quizMode === QuizMode.BATCHED && false) {\r\n                                    <div class=\"form-check custom-control custom-checkbox\">\r\n                                        <!-- no scheduled batched mode yet -->\r\n                                        <jhi-button (click)=\"addQuizBatch()\" [btnType]=\"ButtonType.DEFAULT\" title=\"artemisApp.quizExercise.addBatch\" />\r\n                                    </div>\r\n                                }\r\n                                @if (quizExercise.quizBatches && quizExercise.quizMode === QuizMode.SYNCHRONIZED) {\r\n                                    <!-- Change \"quizExercise.quizMode === QuizMode.SYNCHRONIZED\" above to \"quizExercise.quizMode !== QuizMode.INDIVIDUAL\" when scheduled batched mode is active -->\r\n                                    @for (quizBatch of quizExercise.quizBatches; track quizBatch; let first = $first) {\r\n                                        <div>\r\n                                            <!-- startTime works similar to Exam.startDate -->\r\n                                            <jhi-date-time-picker\r\n                                                class=\"form-element\"\r\n                                                name=\"startTime\"\r\n                                                [shouldDisplayTimeZoneWarning]=\"first\"\r\n                                                labelName=\"{{ 'artemisApp.quizExercise.startTime' | artemisTranslate }}\"\r\n                                                [error]=\"quizBatch.startTimeError ?? false\"\r\n                                                (valueChange)=\"cacheValidation()\"\r\n                                                [(ngModel)]=\"quizBatch.startTime\"\r\n                                            />\r\n                                            @if (quizBatch.startTimeError) {\r\n                                                <span class=\"invalid-feedback\">{{\r\n                                                    (quizExercise.quizMode === QuizMode.SYNCHRONIZED\r\n                                                        ? 'artemisApp.quizExercise.startTimeErrorSynchronized'\r\n                                                        : 'artemisApp.quizExercise.startTimeError'\r\n                                                    ) | artemisTranslate\r\n                                                }}</span>\r\n                                            }\r\n                                            <!-- no scheduled batched mode yet -->\r\n                                            <!-- Change *ngIf=\"false\" below to \"quizExercise.quizMode === QuizMode.BATCHED\" when scheduled batched mode is active -->\r\n                                            @if (false) {\r\n                                                <jhi-button (click)=\"removeQuizBatch(quizBatch)\" [btnType]=\"ButtonType.ERROR\" [icon]=\"faXmark\" />\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                }\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.includedInOverallScore{{ quizExercise.course ? 'Course' : 'Exam' }}Label\"></label>\r\n                            <div>\r\n                                @if (quizExercise.includedInOverallScore) {\r\n                                    <jhi-included-in-overall-score-picker\r\n                                        [includedInOverallScore]=\"quizExercise.includedInOverallScore!\"\r\n                                        (includedInOverallScoreChange)=\"includedInOverallScoreChange($event)\"\r\n                                        [allowNotIncluded]=\"!isExamMode\"\r\n                                    />\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    @if (!isExamMode) {\r\n                        <div class=\"form-group\">\r\n                            <jhi-competency-selection\r\n                                id=\"competencies\"\r\n                                [labelName]=\"'artemisApp.competency.link.title' | artemisTranslate\"\r\n                                [labelTooltip]=\"'artemisApp.competency.link.exercise' | artemisTranslate\"\r\n                                [(ngModel)]=\"quizExercise.competencyLinks\"\r\n                                (ngModelChange)=\"cacheValidation()\"\r\n                                name=\"competencyLinks\"\r\n                            />\r\n                        </div>\r\n                    }\r\n                </div>\r\n                @if (courseId) {\r\n                    <jhi-quiz-question-list-edit\r\n                        #quizQuestionsEdit\r\n                        [courseId]=\"courseId!\"\r\n                        [quizQuestions]=\"quizExercise.quizQuestions ?? []\"\r\n                        (onQuestionAdded)=\"handleQuestionChanged()\"\r\n                        (onQuestionDeleted)=\"handleQuestionChanged()\"\r\n                        (onQuestionUpdated)=\"handleQuestionChanged()\"\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"edit-quiz-footer\">\r\n            <div class=\"container\">\r\n                <div class=\"edit-quiz-footer-content\">\r\n                    @if (!isExamMode && quizExercise.id) {\r\n                        <div class=\"form-group flex-fill ms-3\">\r\n                            <div class=\"form-group flex-fill\">\r\n                                <input\r\n                                    minlength=\"3\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"{{ 'artemisApp.exercise.notificationText' | artemisTranslate }}\"\r\n                                    class=\"form-control flex-fill\"\r\n                                    name=\"notificationText\"\r\n                                    id=\"field_notification_text\"\r\n                                    [(ngModel)]=\"notificationText\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div class=\"form-group\">\r\n                        @if (!pendingChangesCache && !isSaving) {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.edit.saved\" class=\"badge bg-success\"></span>\r\n                        }\r\n                        @if (pendingChangesCache && quizIsValid && !isSaving) {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.edit.pendingChanges\" class=\"badge bg-secondary\"></span>\r\n                        }\r\n                        @if (isSaving) {\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.edit.saving\" class=\"badge bg-secondary\"></span>\r\n                        }\r\n                        <ng-template #tooltipTranslate>\r\n                            @for (reason of computeInvalidReasons(); track reason) {\r\n                                <div>\r\n                                    @if ((reason.translateValues | json) !== '{}') {\r\n                                        <p\r\n                                            jhiTranslate=\"{{ reason.translateKey }}\"\r\n                                            [translateValues]=\"{ index: reason.translateValues.index, threshold: reason.translateValues.threshold }\"\r\n                                        ></p>\r\n                                    }\r\n                                    @if ((reason.translateValues | json) === '{}') {\r\n                                        <p jhiTranslate=\"{{ reason.translateKey }}\"></p>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </ng-template>\r\n                        <ng-template #warningTranslate>\r\n                            @for (warning of computeInvalidWarnings(); track warning) {\r\n                                <div>\r\n                                    @if ((warning.translateValues | json) !== '{}') {\r\n                                        <p jhiTranslate=\"{{ warning.translateKey }}\" [translateValues]=\"{ index: warning.translateValues.index }\"></p>\r\n                                    }\r\n                                    @if ((warning.translateValues | json) === '{}') {\r\n                                        <p jhiTranslate=\"{{ warning.translateKey }}\"></p>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </ng-template>\r\n                        @if (!quizIsValid) {\r\n                            <span class=\"badge bg-danger\" [ngbTooltip]=\"tooltipTranslate\" tooltip-placement=\"top-right auto\">\r\n                                <fa-icon [icon]=\"faExclamationCircle\" />\r\n                                <span jhiTranslate=\"artemisApp.quizExercise.edit.invalidInput\"></span>\r\n                                <span>({{ computeInvalidReasons().length }})</span>\r\n                            </span>\r\n                        }\r\n                        @if (warningQuizCache) {\r\n                            <span class=\"badge bg-warning\" [ngbTooltip]=\"warningTranslate\" tooltip-placement=\"top-right auto\">\r\n                                <span jhiTranslate=\"artemisApp.quizExercise.edit.warning\"></span>\r\n                                <span>({{ computeInvalidWarnings().length }})</span>\r\n                            </span>\r\n                        }\r\n                        @if (quizExercise.course || quizExercise.exerciseGroup) {\r\n                            <button\r\n                                id=\"quiz-cancel-back-button\"\r\n                                class=\"btn btn-default\"\r\n                                [ngClass]=\"{ 'btn-secondary': !pendingChangesCache, 'btn-danger': pendingChangesCache }\"\r\n                                (click)=\"previousState()\"\r\n                                jhiTranslate=\"{{ pendingChangesCache ? 'entity.action.cancel' : 'entity.action.back' }}\"\r\n                            ></button>\r\n                        }\r\n                        <button\r\n                            id=\"quiz-save\"\r\n                            class=\"btn btn-success\"\r\n                            (click)=\"validateItemLimit()\"\r\n                            [disabled]=\"isSaveDisabled()\"\r\n                            jhiTranslate=\"entity.action.save\"\r\n                            [ngbTooltip]=\"quizIsValid ? '' : tooltipTranslate\"\r\n                            tooltip-placement=\"top-right auto\"\r\n                            tooltip-class=\"invalid-reasons-tooltip\"\r\n                        ></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateCategories", "cacheValidation", "\u0275\u0275advance", "\u0275\u0275property", "exerciseCategories", "existingCategories", "\u0275\u0275twoWayListener", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "duration", "minutes", "onDurationChange", "seconds", "\u0275\u0275twoWayProperty", "_r6", "quizExercise", "dueDate", "\u0275\u0275template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_22_Conditional_4_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "dueDateError", "\u0275\u0275conditional", "_r7", "scheduleQuizStart", "_r8", "addQuizBatch", "ButtonType", "DEFAULT", "\u0275\u0275textInterpolate", "quizMode", "QuizMode", "SYNCHRONIZED", "_r11", "quizBatch_r10", "$implicit", "removeQuizBatch", "ERROR", "faXmark", "_r9", "startTime", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_25_For_3_Conditional_7_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_25_For_3_Conditional_8_Template", "\u0275$index_233_r12", "tmp_18_0", "startTimeError", "undefined", "\u0275\u0275repeaterCreate", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_25_For_3_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "quizBatches", "_r5", "\u0275\u0275elementContainerStart", "releaseDate", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_22_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_23_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_24_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Conditional_25_Template", "BATCHED", "INDIVIDUAL", "_r13", "includedInOverallScoreChange", "includedInOverallScore", "isExamMode", "_r14", "competencyLinks", "_r15", "handleQuestionChanged", "courseId", "tmp_6_0", "quizQuestions", "\u0275\u0275pureFunction0", "_c1", "_r16", "notificationText", "reason_r17", "translateKey", "\u0275\u0275pureFunction2", "_c2", "translateValues", "index", "threshold", "QuizExerciseUpdateComponent_Conditional_0_ng_template_111_For_2_Conditional_3_Template", "QuizExerciseUpdateComponent_Conditional_0_ng_template_111_For_2_Conditional_5_Template", "QuizExerciseUpdateComponent_Conditional_0_ng_template_111_For_2_Template", "computeInvalidReasons", "warning_r18", "\u0275\u0275pureFunction1", "_c3", "QuizExerciseUpdateComponent_Conditional_0_ng_template_114_For_2_Conditional_3_Template", "QuizExerciseUpdateComponent_Conditional_0_ng_template_114_For_2_Conditional_5_Template", "QuizExerciseUpdateComponent_Conditional_0_ng_template_114_For_2_Template", "computeInvalidWarnings", "tooltipTranslate_r19", "faExclamationCircle", "\u0275\u0275textInterpolate1", "length", "warningTranslate_r20", "_r21", "previousState", "pendingChangesCache", "_c4", "QuizExerciseUpdateComponent_Conditional_0_Conditional_9_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_10_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_11_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_29_Template", "_r1", "QuizExerciseUpdateComponent_Conditional_0_Conditional_37_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_57_Template", "randomizeQuestionOrder", "QuizExerciseUpdateComponent_Conditional_0_Conditional_73_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_87_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_94_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_96_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_105_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_108_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_109_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_110_Template", "QuizExerciseUpdateComponent_Conditional_0_ng_template_111_Template", "\u0275\u0275templateRefExtractor", "QuizExerciseUpdateComponent_Conditional_0_ng_template_114_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_117_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_118_Template", "QuizExerciseUpdateComponent_Conditional_0_Conditional_119_Template", "validateItemLimit", "id", "isImport", "documentationType", "calculateMaxExerciseScore", "hasSavedQuizStarted", "course", "\u0275\u0275propertyInterpolate1", "isSaving", "quizIsValid", "warningQuizCache", "exerciseGroup", "isSaveDisabled", "QuizExerciseUpdateComponent", "QuizExerciseValidationDirective", "route", "inject", "ActivatedRoute", "courseService", "CourseManagementService", "quizExerciseService", "QuizExerciseService", "router", "Router", "translateService", "TranslateService", "exerciseService", "ExerciseService", "alertService", "AlertService", "changeDetector", "ChangeDetectorRef", "exerciseGroupService", "ExerciseGroupService", "navigationUtilService", "ArtemisNavigationUtilService", "modalService", "NgbModal", "quizQuestionListEditComponent", "courseRepository", "showExistingQuestions", "exams", "courses", "quizExercises", "allExistingQuestions", "existingQuestions", "importFile", "importFileName", "searchQueryText", "dndFilterEnabled", "mcqFilterEnabled", "shortAnswerFilterEnabled", "Duration", "examId", "faPlus", "DRAG_AND_DROP", "QuizQuestionType", "SHORT_ANSWER", "defaultSecondLayerDialogOptions", "size", "scrollable", "backdrop", "backdropClass", "centered", "ngOnInit", "Number", "snapshot", "paramMap", "get", "quizId", "groupId", "url", "includes", "find", "subscribe", "response", "body", "groupResponse", "savedEntity", "init", "isEditable", "error", "testRunExistsAndShouldNotBeIgnored", "warning", "instant", "initializeNewQuizExercise", "newQuiz", "QuizExercise", "title", "isOpenForPractice", "dayjs", "allowedNumberOfAttempts", "prepareEntity", "isQuizEditable", "resetQuizForImport", "categories", "findAllCategoriesOfCourse", "next", "convertExerciseCategoriesAsStringFromServer", "onError", "IncludedInOverallScore", "NOT_INCLUDED", "INCLUDED_COMPLETELY", "updateDuration", "validateDate", "cloneDeep", "forEach", "batch", "endTime", "add", "isBefore", "isAfter", "QuizBatch", "push", "quizBatch", "idx", "indexOf", "splice", "ngOnChanges", "changes", "showDropdown", "quizStarted", "quizEnded", "canDeactivate", "unloadNotification", "event", "preventDefault", "isDateInPast", "date", "current", "month", "year", "day", "scoreSum", "question", "points", "deleteQuestion", "questionToDelete", "filter", "checkItemCountDragAndDrop", "dragAndDropQuestions", "some", "dragAndDropQuestion", "numberOfDropLocations", "dropLocations", "numberOfDragItems", "dragItems", "correctMappings", "checkItemCountShortAnswer", "shortAnswerQuestions", "shortAnswerQuestion", "numberOfCorrectMappings", "numberOfSpots", "spots", "numberOfSolutions", "solutions", "type", "dragAndDropItemsExceedLimit", "shortAnswerItemsExceedLimit", "keys", "titleKey", "questionKey", "descriptionKey", "confirmButtonKey", "modalRef", "open", "GenericConfirmationDialogComponent", "componentInstance", "translationKeys", "canBeUndone", "initialize", "result", "then", "save", "Exercise", "sanitize", "filesMap", "fileMap", "files", "Map", "value", "key", "set", "file", "parseAllQuestions", "import", "quizExerciseResponse", "onSaveSuccess", "onSaveError", "requestOptions", "update", "create", "isCreate", "clear", "detectChanges", "navigate", "relativeTo", "skipLocationChange", "errorRes", "addErrorAlert", "message", "params", "isNaN", "diff", "round", "Math", "min", "max", "asSeconds", "hours", "navigateBackFromExerciseUpdate", "invalidReasons", "Array", "concat", "hasErrorInQuizBatches", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275resolveWindow", "DragAndDropQuestionUtil", "ShortAnswerQuestionUtil", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "QuizExerciseUpdateComponent_Conditional_0_Template", "TranslateDirective", "DocumentationButtonComponent", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MinLengthValidator", "MinValidator", "MaxValidator", "NgModel", "NgForm", "ExerciseTitleChannelNameComponent", "HelpIconComponent", "CategorySelectorComponent", "DifficultyPickerComponent", "FormDateTimePickerComponent", "ButtonComponent", "IncludedInOverallScorePickerComponent", "CompetencySelectionComponent", "QuizQuestionListEditComponent", "NgbTooltip", "FaIconComponent", "NgClass", "JsonPipe", "ArtemisTranslatePipe", "styles", "encapsulation", "changeDetection"]
}
