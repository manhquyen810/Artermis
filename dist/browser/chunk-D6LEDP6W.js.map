{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/observers/private.mjs","node_modules/@angular/material/fesm2022/form-field.mjs","node_modules/@angular/material/fesm2022/chips.mjs","node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, NgZone, RendererFactory2, Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, shareReplay, takeUntil } from 'rxjs/operators';\n\n/**\n * Handler that logs \"ResizeObserver loop limit exceeded\" errors.\n * These errors are not shown in the Chrome console, so we log them to ensure developers are aware.\n * @param e The error\n */\nconst loopLimitExceededErrorHandler = e => {\n  if (e instanceof ErrorEvent && e.message === 'ResizeObserver loop limit exceeded') {\n    console.error(`${e.message}. This could indicate a performance issue with your app. See https://github.com/WICG/resize-observer/blob/master/explainer.md#error-handling`);\n  }\n};\n/**\n * A shared ResizeObserver to be used for a particular box type (content-box, border-box, or\n * device-pixel-content-box)\n */\nclass SingleBoxSharedResizeObserver {\n  _box;\n  /** Stream that emits when the shared observer is destroyed. */\n  _destroyed = /*#__PURE__*/new Subject();\n  /** Stream of all events from the ResizeObserver. */\n  _resizeSubject = /*#__PURE__*/new Subject();\n  /** ResizeObserver used to observe element resize events. */\n  _resizeObserver;\n  /** A map of elements to streams of their resize events. */\n  _elementObservables = /*#__PURE__*/new Map();\n  constructor(/** The box type to observe for resizes. */\n  _box) {\n    this._box = _box;\n    if (typeof ResizeObserver !== 'undefined') {\n      this._resizeObserver = new ResizeObserver(entries => this._resizeSubject.next(entries));\n    }\n  }\n  /**\n   * Gets a stream of resize events for the given element.\n   * @param target The element to observe.\n   * @return The stream of resize events for the element.\n   */\n  observe(target) {\n    if (!this._elementObservables.has(target)) {\n      this._elementObservables.set(target, new Observable(observer => {\n        const subscription = this._resizeSubject.subscribe(observer);\n        this._resizeObserver?.observe(target, {\n          box: this._box\n        });\n        return () => {\n          this._resizeObserver?.unobserve(target);\n          subscription.unsubscribe();\n          this._elementObservables.delete(target);\n        };\n      }).pipe(filter(entries => entries.some(entry => entry.target === target)),\n      // Share a replay of the last event so that subsequent calls to observe the same element\n      // receive initial sizing info like the first one. Also enable ref counting so the\n      // element will be automatically unobserved when there are no more subscriptions.\n      shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }), takeUntil(this._destroyed)));\n    }\n    return this._elementObservables.get(target);\n  }\n  /** Destroys this instance. */\n  destroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._resizeSubject.complete();\n    this._elementObservables.clear();\n  }\n}\n/**\n * Allows observing resize events on multiple elements using a shared set of ResizeObserver.\n * Sharing a ResizeObserver instance is recommended for better performance (see\n * https://github.com/WICG/resize-observer/issues/59).\n *\n * Rather than share a single `ResizeObserver`, this class creates one `ResizeObserver` per type\n * of observed box ('content-box', 'border-box', and 'device-pixel-content-box'). This avoids\n * later calls to `observe` with a different box type from influencing the events dispatched to\n * earlier calls.\n */\nlet SharedResizeObserver = /*#__PURE__*/(() => {\n  class SharedResizeObserver {\n    _cleanupErrorListener;\n    /** Map of box type to shared resize observer. */\n    _observers = new Map();\n    /** The Angular zone. */\n    _ngZone = inject(NgZone);\n    constructor() {\n      if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        this._ngZone.runOutsideAngular(() => {\n          const renderer = inject(RendererFactory2).createRenderer(null, null);\n          this._cleanupErrorListener = renderer.listen('window', 'error', loopLimitExceededErrorHandler);\n        });\n      }\n    }\n    ngOnDestroy() {\n      for (const [, observer] of this._observers) {\n        observer.destroy();\n      }\n      this._observers.clear();\n      this._cleanupErrorListener?.();\n    }\n    /**\n     * Gets a stream of resize events for the given target element and box type.\n     * @param target The element to observe for resizes.\n     * @param options Options to pass to the `ResizeObserver`\n     * @return The stream of resize events for the element.\n     */\n    observe(target, options) {\n      const box = options?.box || 'content-box';\n      if (!this._observers.has(box)) {\n        this._observers.set(box, new SingleBoxSharedResizeObserver(box));\n      }\n      return this._observers.get(box).observe(target);\n    }\n    static ɵfac = function SharedResizeObserver_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SharedResizeObserver)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SharedResizeObserver,\n      factory: SharedResizeObserver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SharedResizeObserver;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SharedResizeObserver };\n","import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, HostAttributeToken, ElementRef, Input, NgZone, Renderer2, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, ChangeDetectorRef, Injector, contentChild, ANIMATION_MODULE_TYPE, computed, afterRender, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { Subscription, Subject, merge } from 'rxjs';\nimport { startWith, map, pairwise, filter, takeUntil } from 'rxjs/operators';\nimport { SharedResizeObserver } from '@angular/cdk/observers/private';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** The floating label for a `mat-form-field`. */\nconst _c0 = [\"notch\"];\nconst _c1 = [\"matFormFieldNotchedOutline\", \"\"];\nconst _c2 = [\"*\"];\nconst _c3 = [\"textField\"];\nconst _c4 = [\"iconPrefixContainer\"];\nconst _c5 = [\"textPrefixContainer\"];\nconst _c6 = [\"iconSuffixContainer\"];\nconst _c7 = [\"textSuffixContainer\"];\nconst _c8 = [\"*\", [[\"mat-label\"]], [[\"\", \"matPrefix\", \"\"], [\"\", \"matIconPrefix\", \"\"]], [[\"\", \"matTextPrefix\", \"\"]], [[\"\", \"matTextSuffix\", \"\"]], [[\"\", \"matSuffix\", \"\"], [\"\", \"matIconSuffix\", \"\"]], [[\"mat-error\"], [\"\", \"matError\", \"\"]], [[\"mat-hint\", 3, \"align\", \"end\"]], [[\"mat-hint\", \"align\", \"end\"]]];\nconst _c9 = [\"*\", \"mat-label\", \"[matPrefix], [matIconPrefix]\", \"[matTextPrefix]\", \"[matTextSuffix]\", \"[matSuffix], [matIconSuffix]\", \"mat-error, [matError]\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"];\nfunction MatFormField_ng_template_0_Conditional_0_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 21);\n  }\n}\nfunction MatFormField_ng_template_0_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 20);\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵtemplate(2, MatFormField_ng_template_0_Conditional_0_Conditional_2_Template, 1, 0, \"span\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"floating\", ctx_r1._shouldLabelFloat())(\"monitorResize\", ctx_r1._hasOutline())(\"id\", ctx_r1._labelId);\n    i0.ɵɵattribute(\"for\", ctx_r1._control.disableAutomaticLabeling ? null : ctx_r1._control.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(!ctx_r1.hideRequiredMarker && ctx_r1._control.required ? 2 : -1);\n  }\n}\nfunction MatFormField_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MatFormField_ng_template_0_Conditional_0_Template, 3, 5, \"label\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵconditional(ctx_r1._hasFloatingLabel() ? 0 : -1);\n  }\n}\nfunction MatFormField_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n}\nfunction MatFormField_Conditional_6_Conditional_1_ng_template_0_Template(rf, ctx) {}\nfunction MatFormField_Conditional_6_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MatFormField_Conditional_6_Conditional_1_ng_template_0_Template, 0, 0, \"ng-template\", 13);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n    const labelTemplate_r3 = i0.ɵɵreference(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", labelTemplate_r3);\n  }\n}\nfunction MatFormField_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtemplate(1, MatFormField_Conditional_6_Conditional_1_Template, 1, 1, null, 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matFormFieldNotchedOutlineOpen\", ctx_r1._shouldLabelFloat());\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(!ctx_r1._forceDisplayInfixLabel() ? 1 : -1);\n  }\n}\nfunction MatFormField_Conditional_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10, 2);\n    i0.ɵɵprojection(2, 2);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatFormField_Conditional_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11, 3);\n    i0.ɵɵprojection(2, 3);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatFormField_Conditional_10_ng_template_0_Template(rf, ctx) {}\nfunction MatFormField_Conditional_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MatFormField_Conditional_10_ng_template_0_Template, 0, 0, \"ng-template\", 13);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const labelTemplate_r3 = i0.ɵɵreference(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", labelTemplate_r3);\n  }\n}\nfunction MatFormField_Conditional_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14, 4);\n    i0.ɵɵprojection(2, 4);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatFormField_Conditional_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15, 5);\n    i0.ɵɵprojection(2, 5);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatFormField_Conditional_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n}\nfunction MatFormField_Case_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵprojection(1, 6);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatFormField_Case_17_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-hint\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"id\", ctx_r1._hintLabelId);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.hintLabel);\n  }\n}\nfunction MatFormField_Case_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, MatFormField_Case_17_Conditional_1_Template, 2, 2, \"mat-hint\", 22);\n    i0.ɵɵprojection(2, 7);\n    i0.ɵɵelement(3, \"div\", 23);\n    i0.ɵɵprojection(4, 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(ctx_r1.hintLabel ? 1 : -1);\n  }\n}\nlet MatLabel = /*#__PURE__*/(() => {\n  class MatLabel {\n    static ɵfac = function MatLabel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatLabel)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatLabel,\n      selectors: [[\"mat-label\"]]\n    });\n  }\n  return MatLabel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = /*#__PURE__*/new InjectionToken('MatError');\n/** Single error message to be shown underneath the form-field. */\nlet MatError = /*#__PURE__*/(() => {\n  class MatError {\n    id = inject(_IdGenerator).getId('mat-mdc-error-');\n    constructor() {\n      const ariaLive = inject(new HostAttributeToken('aria-live'), {\n        optional: true\n      });\n      // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n      // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n      if (!ariaLive) {\n        const elementRef = inject(ElementRef);\n        elementRef.nativeElement.setAttribute('aria-live', 'polite');\n      }\n    }\n    static ɵfac = function MatError_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatError)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatError,\n      selectors: [[\"mat-error\"], [\"\", \"matError\", \"\"]],\n      hostAttrs: [\"aria-atomic\", \"true\", 1, \"mat-mdc-form-field-error\", \"mat-mdc-form-field-bottom-align\"],\n      hostVars: 1,\n      hostBindings: function MatError_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n        }\n      },\n      inputs: {\n        id: \"id\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_ERROR,\n        useExisting: MatError\n      }])]\n    });\n  }\n  return MatError;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Hint text to be shown underneath the form field control. */\nlet MatHint = /*#__PURE__*/(() => {\n  class MatHint {\n    /** Whether to align the hint label at the start or end of the line. */\n    align = 'start';\n    /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n    id = inject(_IdGenerator).getId('mat-mdc-hint-');\n    static ɵfac = function MatHint_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatHint)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatHint,\n      selectors: [[\"mat-hint\"]],\n      hostAttrs: [1, \"mat-mdc-form-field-hint\", \"mat-mdc-form-field-bottom-align\"],\n      hostVars: 4,\n      hostBindings: function MatHint_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"align\", null);\n          i0.ɵɵclassProp(\"mat-mdc-form-field-hint-end\", ctx.align === \"end\");\n        }\n      },\n      inputs: {\n        align: \"align\",\n        id: \"id\"\n      }\n    });\n  }\n  return MatHint;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = /*#__PURE__*/new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nlet MatPrefix = /*#__PURE__*/(() => {\n  class MatPrefix {\n    set _isTextSelector(value) {\n      this._isText = true;\n    }\n    _isText = false;\n    static ɵfac = function MatPrefix_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatPrefix)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatPrefix,\n      selectors: [[\"\", \"matPrefix\", \"\"], [\"\", \"matIconPrefix\", \"\"], [\"\", \"matTextPrefix\", \"\"]],\n      inputs: {\n        _isTextSelector: [0, \"matTextPrefix\", \"_isTextSelector\"]\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_PREFIX,\n        useExisting: MatPrefix\n      }])]\n    });\n  }\n  return MatPrefix;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = /*#__PURE__*/new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nlet MatSuffix = /*#__PURE__*/(() => {\n  class MatSuffix {\n    set _isTextSelector(value) {\n      this._isText = true;\n    }\n    _isText = false;\n    static ɵfac = function MatSuffix_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSuffix)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatSuffix,\n      selectors: [[\"\", \"matSuffix\", \"\"], [\"\", \"matIconSuffix\", \"\"], [\"\", \"matTextSuffix\", \"\"]],\n      inputs: {\n        _isTextSelector: [0, \"matTextSuffix\", \"_isTextSelector\"]\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_SUFFIX,\n        useExisting: MatSuffix\n      }])]\n    });\n  }\n  return MatSuffix;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** An injion token for the parent form-field. */\nconst FLOATING_LABEL_PARENT = /*#__PURE__*/new InjectionToken('FloatingLabelParent');\n/**\n * Internal directive that maintains a MDC floating label. This directive does not\n * use the `MDCFloatingLabelFoundation` class, as it is not worth the size cost of\n * including it just to measure the label width and toggle some classes.\n *\n * The use of a directive allows us to conditionally render a floating label in the\n * template without having to manually manage instantiation and destruction of the\n * floating label component based on.\n *\n * The component is responsible for setting up the floating label styles, measuring label\n * width for the outline notch, and providing inputs that can be used to toggle the\n * label's floating or required state.\n */\nlet MatFormFieldFloatingLabel = /*#__PURE__*/(() => {\n  class MatFormFieldFloatingLabel {\n    _elementRef = inject(ElementRef);\n    /** Whether the label is floating. */\n    get floating() {\n      return this._floating;\n    }\n    set floating(value) {\n      this._floating = value;\n      if (this.monitorResize) {\n        this._handleResize();\n      }\n    }\n    _floating = false;\n    /** Whether to monitor for resize events on the floating label. */\n    get monitorResize() {\n      return this._monitorResize;\n    }\n    set monitorResize(value) {\n      this._monitorResize = value;\n      if (this._monitorResize) {\n        this._subscribeToResize();\n      } else {\n        this._resizeSubscription.unsubscribe();\n      }\n    }\n    _monitorResize = false;\n    /** The shared ResizeObserver. */\n    _resizeObserver = inject(SharedResizeObserver);\n    /** The Angular zone. */\n    _ngZone = inject(NgZone);\n    /** The parent form-field. */\n    _parent = inject(FLOATING_LABEL_PARENT);\n    /** The current resize event subscription. */\n    _resizeSubscription = new Subscription();\n    constructor() {}\n    ngOnDestroy() {\n      this._resizeSubscription.unsubscribe();\n    }\n    /** Gets the width of the label. Used for the outline notch. */\n    getWidth() {\n      return estimateScrollWidth(this._elementRef.nativeElement);\n    }\n    /** Gets the HTML element for the floating label. */\n    get element() {\n      return this._elementRef.nativeElement;\n    }\n    /** Handles resize events from the ResizeObserver. */\n    _handleResize() {\n      // In the case where the label grows in size, the following sequence of events occurs:\n      // 1. The label grows by 1px triggering the ResizeObserver\n      // 2. The notch is expanded to accommodate the entire label\n      // 3. The label expands to its full width, triggering the ResizeObserver again\n      //\n      // This is expected, but If we allow this to all happen within the same macro task it causes an\n      // error: `ResizeObserver loop limit exceeded`. Therefore we push the notch resize out until\n      // the next macro task.\n      setTimeout(() => this._parent._handleLabelResized());\n    }\n    /** Subscribes to resize events. */\n    _subscribeToResize() {\n      this._resizeSubscription.unsubscribe();\n      this._ngZone.runOutsideAngular(() => {\n        this._resizeSubscription = this._resizeObserver.observe(this._elementRef.nativeElement, {\n          box: 'border-box'\n        }).subscribe(() => this._handleResize());\n      });\n    }\n    static ɵfac = function MatFormFieldFloatingLabel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatFormFieldFloatingLabel)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatFormFieldFloatingLabel,\n      selectors: [[\"label\", \"matFormFieldFloatingLabel\", \"\"]],\n      hostAttrs: [1, \"mdc-floating-label\", \"mat-mdc-floating-label\"],\n      hostVars: 2,\n      hostBindings: function MatFormFieldFloatingLabel_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mdc-floating-label--float-above\", ctx.floating);\n        }\n      },\n      inputs: {\n        floating: \"floating\",\n        monitorResize: \"monitorResize\"\n      }\n    });\n  }\n  return MatFormFieldFloatingLabel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Estimates the scroll width of an element.\n * via https://github.com/material-components/material-components-web/blob/c0a11ef0d000a098fd0c372be8f12d6a99302855/packages/mdc-dom/ponyfill.ts\n */\nfunction estimateScrollWidth(element) {\n  // Check the offsetParent. If the element inherits display: none from any\n  // parent, the offsetParent property will be null (see\n  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n  // This check ensures we only clone the node when necessary.\n  const htmlEl = element;\n  if (htmlEl.offsetParent !== null) {\n    return htmlEl.scrollWidth;\n  }\n  const clone = htmlEl.cloneNode(true);\n  clone.style.setProperty('position', 'absolute');\n  clone.style.setProperty('transform', 'translate(-9999px, -9999px)');\n  document.documentElement.appendChild(clone);\n  const scrollWidth = clone.scrollWidth;\n  clone.remove();\n  return scrollWidth;\n}\n\n/** Class added when the line ripple is active. */\nconst ACTIVATE_CLASS = 'mdc-line-ripple--active';\n/** Class added when the line ripple is being deactivated. */\nconst DEACTIVATING_CLASS = 'mdc-line-ripple--deactivating';\n/**\n * Internal directive that creates an instance of the MDC line-ripple component. Using a\n * directive allows us to conditionally render a line-ripple in the template without having\n * to manually create and destroy the `MDCLineRipple` component whenever the condition changes.\n *\n * The directive sets up the styles for the line-ripple and provides an API for activating\n * and deactivating the line-ripple.\n */\nlet MatFormFieldLineRipple = /*#__PURE__*/(() => {\n  class MatFormFieldLineRipple {\n    _elementRef = inject(ElementRef);\n    _cleanupTransitionEnd;\n    constructor() {\n      const ngZone = inject(NgZone);\n      const renderer = inject(Renderer2);\n      ngZone.runOutsideAngular(() => {\n        this._cleanupTransitionEnd = renderer.listen(this._elementRef.nativeElement, 'transitionend', this._handleTransitionEnd);\n      });\n    }\n    activate() {\n      const classList = this._elementRef.nativeElement.classList;\n      classList.remove(DEACTIVATING_CLASS);\n      classList.add(ACTIVATE_CLASS);\n    }\n    deactivate() {\n      this._elementRef.nativeElement.classList.add(DEACTIVATING_CLASS);\n    }\n    _handleTransitionEnd = event => {\n      const classList = this._elementRef.nativeElement.classList;\n      const isDeactivating = classList.contains(DEACTIVATING_CLASS);\n      if (event.propertyName === 'opacity' && isDeactivating) {\n        classList.remove(ACTIVATE_CLASS, DEACTIVATING_CLASS);\n      }\n    };\n    ngOnDestroy() {\n      this._cleanupTransitionEnd();\n    }\n    static ɵfac = function MatFormFieldLineRipple_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatFormFieldLineRipple)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatFormFieldLineRipple,\n      selectors: [[\"div\", \"matFormFieldLineRipple\", \"\"]],\n      hostAttrs: [1, \"mdc-line-ripple\"]\n    });\n  }\n  return MatFormFieldLineRipple;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Internal component that creates an instance of the MDC notched-outline component.\n *\n * The component sets up the HTML structure and styles for the notched-outline. It provides\n * inputs to toggle the notch state and width.\n */\nlet MatFormFieldNotchedOutline = /*#__PURE__*/(() => {\n  class MatFormFieldNotchedOutline {\n    _elementRef = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    /** Whether the notch should be opened. */\n    open = false;\n    _notch;\n    constructor() {}\n    ngAfterViewInit() {\n      const label = this._elementRef.nativeElement.querySelector('.mdc-floating-label');\n      if (label) {\n        this._elementRef.nativeElement.classList.add('mdc-notched-outline--upgraded');\n        if (typeof requestAnimationFrame === 'function') {\n          label.style.transitionDuration = '0s';\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => label.style.transitionDuration = '');\n          });\n        }\n      } else {\n        this._elementRef.nativeElement.classList.add('mdc-notched-outline--no-label');\n      }\n    }\n    _setNotchWidth(labelWidth) {\n      if (!this.open || !labelWidth) {\n        this._notch.nativeElement.style.width = '';\n      } else {\n        const NOTCH_ELEMENT_PADDING = 8;\n        const NOTCH_ELEMENT_BORDER = 1;\n        this._notch.nativeElement.style.width = `calc(${labelWidth}px * var(--mat-mdc-form-field-floating-label-scale, 0.75) + ${NOTCH_ELEMENT_PADDING + NOTCH_ELEMENT_BORDER}px)`;\n      }\n    }\n    static ɵfac = function MatFormFieldNotchedOutline_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatFormFieldNotchedOutline)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatFormFieldNotchedOutline,\n      selectors: [[\"div\", \"matFormFieldNotchedOutline\", \"\"]],\n      viewQuery: function MatFormFieldNotchedOutline_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._notch = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mdc-notched-outline\"],\n      hostVars: 2,\n      hostBindings: function MatFormFieldNotchedOutline_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mdc-notched-outline--notched\", ctx.open);\n        }\n      },\n      inputs: {\n        open: [0, \"matFormFieldNotchedOutlineOpen\", \"open\"]\n      },\n      attrs: _c1,\n      ngContentSelectors: _c2,\n      decls: 5,\n      vars: 0,\n      consts: [[\"notch\", \"\"], [1, \"mat-mdc-notch-piece\", \"mdc-notched-outline__leading\"], [1, \"mat-mdc-notch-piece\", \"mdc-notched-outline__notch\"], [1, \"mat-mdc-notch-piece\", \"mdc-notched-outline__trailing\"]],\n      template: function MatFormFieldNotchedOutline_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelement(0, \"div\", 1);\n          i0.ɵɵelementStart(1, \"div\", 2, 0);\n          i0.ɵɵprojection(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"div\", 3);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatFormFieldNotchedOutline;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nlet MatFormFieldControl = /*#__PURE__*/(() => {\n  class MatFormFieldControl {\n    /** The value of the control. */\n    value;\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n     * needs to run change detection.\n     */\n    stateChanges;\n    /** The element ID for this control. */\n    id;\n    /** The placeholder for this control. */\n    placeholder;\n    /** Gets the AbstractControlDirective for this control. */\n    ngControl;\n    /** Whether the control is focused. */\n    focused;\n    /** Whether the control is empty. */\n    empty;\n    /** Whether the `MatFormField` label should try to float. */\n    shouldLabelFloat;\n    /** Whether the control is required. */\n    required;\n    /** Whether the control is disabled. */\n    disabled;\n    /** Whether the control is in an error state. */\n    errorState;\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    controlType;\n    /**\n     * Whether the input is currently in an autofilled state. If property is not present on the\n     * control it is assumed to be false.\n     */\n    autofilled;\n    /**\n     * Value of `aria-describedby` that should be merged with the described-by ids\n     * which are set by the form-field.\n     */\n    userAriaDescribedBy;\n    /**\n     * Whether to automatically assign the ID of the form field as the `for` attribute\n     * on the `<label>` inside the form field. Set this to true to prevent the form\n     * field from associating the label with non-native elements.\n     */\n    disableAutomaticLabeling;\n    static ɵfac = function MatFormFieldControl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatFormFieldControl)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatFormFieldControl\n    });\n  }\n  return MatFormFieldControl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = /*#__PURE__*/new InjectionToken('MatFormField');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/** Default appearance used by the form field. */\nconst DEFAULT_APPEARANCE = 'fill';\n/**\n * Whether the label for form fields should by default float `always`,\n * `never`, or `auto`.\n */\nconst DEFAULT_FLOAT_LABEL = 'auto';\n/** Default way that the subscript element height is set. */\nconst DEFAULT_SUBSCRIPT_SIZING = 'fixed';\n/**\n * Default transform for docked floating labels in a MDC text-field. This value has been\n * extracted from the MDC text-field styles because we programmatically modify the docked\n * label transform, but do not want to accidentally discard the default label transform.\n */\nconst FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM = `translateY(-50%)`;\n/** Container for form controls that applies Material Design styling and behavior. */\nlet MatFormField = /*#__PURE__*/(() => {\n  class MatFormField {\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality);\n    _platform = inject(Platform);\n    _idGenerator = inject(_IdGenerator);\n    _ngZone = inject(NgZone);\n    _injector = inject(Injector);\n    _defaults = inject(MAT_FORM_FIELD_DEFAULT_OPTIONS, {\n      optional: true\n    });\n    _textField;\n    _iconPrefixContainer;\n    _textPrefixContainer;\n    _iconSuffixContainer;\n    _textSuffixContainer;\n    _floatingLabel;\n    _notchedOutline;\n    _lineRipple;\n    _formFieldControl;\n    _prefixChildren;\n    _suffixChildren;\n    _errorChildren;\n    _hintChildren;\n    _labelChild = contentChild(MatLabel);\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() {\n      return this._hideRequiredMarker;\n    }\n    set hideRequiredMarker(value) {\n      this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    _hideRequiredMarker = false;\n    /**\n     * Theme color of the form field. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/form-field/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color = 'primary';\n    /** Whether the label should always float or float as the user types. */\n    get floatLabel() {\n      return this._floatLabel || this._defaults?.floatLabel || DEFAULT_FLOAT_LABEL;\n    }\n    set floatLabel(value) {\n      if (value !== this._floatLabel) {\n        this._floatLabel = value;\n        // For backwards compatibility. Custom form field controls or directives might set\n        // the \"floatLabel\" input and expect the form field view to be updated automatically.\n        // e.g. autocomplete trigger. Ideally we'd get rid of this and the consumers would just\n        // emit the \"stateChanges\" observable. TODO(devversion): consider removing.\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    _floatLabel;\n    /** The form field appearance style. */\n    get appearance() {\n      return this._appearance;\n    }\n    set appearance(value) {\n      const oldValue = this._appearance;\n      const newAppearance = value || this._defaults?.appearance || DEFAULT_APPEARANCE;\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (newAppearance !== 'fill' && newAppearance !== 'outline') {\n          throw new Error(`MatFormField: Invalid appearance \"${newAppearance}\", valid values are \"fill\" or \"outline\".`);\n        }\n      }\n      this._appearance = newAppearance;\n      if (this._appearance === 'outline' && this._appearance !== oldValue) {\n        // If the appearance has been switched to `outline`, the label offset needs to be updated.\n        // The update can happen once the view has been re-checked, but not immediately because\n        // the view has not been updated and the notched-outline floating label is not present.\n        this._needsOutlineLabelOffsetUpdate = true;\n      }\n    }\n    _appearance = DEFAULT_APPEARANCE;\n    /**\n     * Whether the form field should reserve space for one line of hint/error text (default)\n     * or to have the spacing grow from 0px as needed based on the size of the hint/error content.\n     * Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.\n     */\n    get subscriptSizing() {\n      return this._subscriptSizing || this._defaults?.subscriptSizing || DEFAULT_SUBSCRIPT_SIZING;\n    }\n    set subscriptSizing(value) {\n      this._subscriptSizing = value || this._defaults?.subscriptSizing || DEFAULT_SUBSCRIPT_SIZING;\n    }\n    _subscriptSizing = null;\n    /** Text for the form field hint. */\n    get hintLabel() {\n      return this._hintLabel;\n    }\n    set hintLabel(value) {\n      this._hintLabel = value;\n      this._processHints();\n    }\n    _hintLabel = '';\n    _hasIconPrefix = false;\n    _hasTextPrefix = false;\n    _hasIconSuffix = false;\n    _hasTextSuffix = false;\n    // Unique id for the internal form field label.\n    _labelId = this._idGenerator.getId('mat-mdc-form-field-label-');\n    // Unique id for the hint label.\n    _hintLabelId = this._idGenerator.getId('mat-mdc-hint-');\n    /** Gets the current form field control */\n    get _control() {\n      return this._explicitFormFieldControl || this._formFieldControl;\n    }\n    set _control(value) {\n      this._explicitFormFieldControl = value;\n    }\n    _destroyed = new Subject();\n    _isFocused = null;\n    _explicitFormFieldControl;\n    _needsOutlineLabelOffsetUpdate = false;\n    _previousControl = null;\n    _previousControlValidatorFn = null;\n    _stateChanges;\n    _valueChanges;\n    _describedByChanges;\n    _animationsDisabled;\n    constructor() {\n      const defaults = this._defaults;\n      if (defaults) {\n        if (defaults.appearance) {\n          this.appearance = defaults.appearance;\n        }\n        this._hideRequiredMarker = Boolean(defaults?.hideRequiredMarker);\n        if (defaults.color) {\n          this.color = defaults.color;\n        }\n      }\n      this._animationsDisabled = inject(ANIMATION_MODULE_TYPE, {\n        optional: true\n      }) === 'NoopAnimations';\n    }\n    ngAfterViewInit() {\n      // Initial focus state sync. This happens rarely, but we want to account for\n      // it in case the form field control has \"focused\" set to true on init.\n      this._updateFocusState();\n      if (!this._animationsDisabled) {\n        this._ngZone.runOutsideAngular(() => {\n          // Enable animations after a certain amount of time so that they don't run on init.\n          setTimeout(() => {\n            this._elementRef.nativeElement.classList.add('mat-form-field-animations-enabled');\n          }, 300);\n        });\n      }\n      // Because the above changes a value used in the template after it was checked, we need\n      // to trigger CD or the change might not be reflected if there is no other CD scheduled.\n      this._changeDetectorRef.detectChanges();\n    }\n    ngAfterContentInit() {\n      this._assertFormFieldControl();\n      this._initializeSubscript();\n      this._initializePrefixAndSuffix();\n      this._initializeOutlineLabelOffsetSubscriptions();\n    }\n    ngAfterContentChecked() {\n      this._assertFormFieldControl();\n      // if form field was being used with an input in first place and then replaced by other\n      // component such as select.\n      if (this._control !== this._previousControl) {\n        this._initializeControl(this._previousControl);\n        // keep a reference for last validator we had.\n        if (this._control.ngControl && this._control.ngControl.control) {\n          this._previousControlValidatorFn = this._control.ngControl.control.validator;\n        }\n        this._previousControl = this._control;\n      }\n      // make sure the the control has been initialized.\n      if (this._control.ngControl && this._control.ngControl.control) {\n        // get the validators for current control.\n        const validatorFn = this._control.ngControl.control.validator;\n        // if our current validatorFn isn't equal to it might be we are CD behind, marking the\n        // component will allow us to catch up.\n        if (validatorFn !== this._previousControlValidatorFn) {\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._stateChanges?.unsubscribe();\n      this._valueChanges?.unsubscribe();\n      this._describedByChanges?.unsubscribe();\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    getLabelId = computed(() => this._hasFloatingLabel() ? this._labelId : null);\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form field\n     * should be positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n      return this._textField || this._elementRef;\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n      // This is for backwards compatibility only. Consumers of the form field might use\n      // this method. e.g. the autocomplete trigger. This method has been added to the non-MDC\n      // form field because setting \"floatLabel\" to \"always\" caused the label to float without\n      // animation. This is different in MDC where the label always animates, so this method\n      // is no longer necessary. There doesn't seem any benefit in adding logic to allow changing\n      // the floating label state without animations. The non-MDC implementation was inconsistent\n      // because it always animates if \"floatLabel\" is set away from \"always\".\n      // TODO(devversion): consider removing this method when releasing the MDC form field.\n      if (this._hasFloatingLabel()) {\n        this.floatLabel = 'always';\n      }\n    }\n    /** Initializes the registered form field control. */\n    _initializeControl(previousControl) {\n      const control = this._control;\n      const classPrefix = 'mat-mdc-form-field-type-';\n      if (previousControl) {\n        this._elementRef.nativeElement.classList.remove(classPrefix + previousControl.controlType);\n      }\n      if (control.controlType) {\n        this._elementRef.nativeElement.classList.add(classPrefix + control.controlType);\n      }\n      // Subscribe to changes in the child control state in order to update the form field UI.\n      this._stateChanges?.unsubscribe();\n      this._stateChanges = control.stateChanges.subscribe(() => {\n        this._updateFocusState();\n        this._changeDetectorRef.markForCheck();\n      });\n      // Updating the `aria-describedby` touches the DOM. Only do it if it actually needs to change.\n      this._describedByChanges?.unsubscribe();\n      this._describedByChanges = control.stateChanges.pipe(startWith([undefined, undefined]), map(() => [control.errorState, control.userAriaDescribedBy]), pairwise(), filter(([[prevErrorState, prevDescribedBy], [currentErrorState, currentDescribedBy]]) => {\n        return prevErrorState !== currentErrorState || prevDescribedBy !== currentDescribedBy;\n      })).subscribe(() => this._syncDescribedByIds());\n      this._valueChanges?.unsubscribe();\n      // Run change detection if the value changes.\n      if (control.ngControl && control.ngControl.valueChanges) {\n        this._valueChanges = control.ngControl.valueChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._changeDetectorRef.markForCheck());\n      }\n    }\n    _checkPrefixAndSuffixTypes() {\n      this._hasIconPrefix = !!this._prefixChildren.find(p => !p._isText);\n      this._hasTextPrefix = !!this._prefixChildren.find(p => p._isText);\n      this._hasIconSuffix = !!this._suffixChildren.find(s => !s._isText);\n      this._hasTextSuffix = !!this._suffixChildren.find(s => s._isText);\n    }\n    /** Initializes the prefix and suffix containers. */\n    _initializePrefixAndSuffix() {\n      this._checkPrefixAndSuffixTypes();\n      // Mark the form field as dirty whenever the prefix or suffix children change. This\n      // is necessary because we conditionally display the prefix/suffix containers based\n      // on whether there is projected content.\n      merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n        this._checkPrefixAndSuffixTypes();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    /**\n     * Initializes the subscript by validating hints and synchronizing \"aria-describedby\" ids\n     * with the custom form field control. Also subscribes to hint and error changes in order\n     * to be able to validate and synchronize ids on change.\n     */\n    _initializeSubscript() {\n      // Re-validate when the number of hints changes.\n      this._hintChildren.changes.subscribe(() => {\n        this._processHints();\n        this._changeDetectorRef.markForCheck();\n      });\n      // Update the aria-described by when the number of errors changes.\n      this._errorChildren.changes.subscribe(() => {\n        this._syncDescribedByIds();\n        this._changeDetectorRef.markForCheck();\n      });\n      // Initial mat-hint validation and subscript describedByIds sync.\n      this._validateHints();\n      this._syncDescribedByIds();\n    }\n    /** Throws an error if the form field's control is missing. */\n    _assertFormFieldControl() {\n      if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatFormFieldMissingControlError();\n      }\n    }\n    _updateFocusState() {\n      // Usually the MDC foundation would call \"activateFocus\" and \"deactivateFocus\" whenever\n      // certain DOM events are emitted. This is not possible in our implementation of the\n      // form field because we support abstract form field controls which are not necessarily\n      // of type input, nor do we have a reference to a native form field control element. Instead\n      // we handle the focus by checking if the abstract form field control focused state changes.\n      if (this._control.focused && !this._isFocused) {\n        this._isFocused = true;\n        this._lineRipple?.activate();\n      } else if (!this._control.focused && (this._isFocused || this._isFocused === null)) {\n        this._isFocused = false;\n        this._lineRipple?.deactivate();\n      }\n      this._textField?.nativeElement.classList.toggle('mdc-text-field--focused', this._control.focused);\n    }\n    /**\n     * The floating label in the docked state needs to account for prefixes. The horizontal offset\n     * is calculated whenever the appearance changes to `outline`, the prefixes change, or when the\n     * form field is added to the DOM. This method sets up all subscriptions which are needed to\n     * trigger the label offset update.\n     */\n    _initializeOutlineLabelOffsetSubscriptions() {\n      // Whenever the prefix changes, schedule an update of the label offset.\n      // TODO(mmalerba): Use ResizeObserver to better support dynamically changing prefix content.\n      this._prefixChildren.changes.subscribe(() => this._needsOutlineLabelOffsetUpdate = true);\n      // TODO(mmalerba): Split this into separate `afterRender` calls using the `EarlyRead` and\n      //  `Write` phases.\n      afterRender(() => {\n        if (this._needsOutlineLabelOffsetUpdate) {\n          this._needsOutlineLabelOffsetUpdate = false;\n          this._updateOutlineLabelOffset();\n        }\n      }, {\n        injector: this._injector\n      });\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._needsOutlineLabelOffsetUpdate = true);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n      return this.floatLabel === 'always';\n    }\n    _hasOutline() {\n      return this.appearance === 'outline';\n    }\n    /**\n     * Whether the label should display in the infix. Labels in the outline appearance are\n     * displayed as part of the notched-outline and are horizontally offset to account for\n     * form field prefix content. This won't work in server side rendering since we cannot\n     * measure the width of the prefix container. To make the docked label appear as if the\n     * right offset has been calculated, we forcibly render the label inside the infix. Since\n     * the label is part of the infix, the label cannot overflow the prefix content.\n     */\n    _forceDisplayInfixLabel() {\n      return !this._platform.isBrowser && this._prefixChildren.length && !this._shouldLabelFloat();\n    }\n    _hasFloatingLabel = computed(() => !!this._labelChild());\n    _shouldLabelFloat() {\n      if (!this._hasFloatingLabel()) {\n        return false;\n      }\n      return this._control.shouldLabelFloat || this._shouldAlwaysFloat();\n    }\n    /**\n     * Determines whether a class from the AbstractControlDirective\n     * should be forwarded to the host element.\n     */\n    _shouldForward(prop) {\n      const control = this._control ? this._control.ngControl : null;\n      return control && control[prop];\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n      return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState ? 'error' : 'hint';\n    }\n    /** Handle label resize events. */\n    _handleLabelResized() {\n      this._refreshOutlineNotchWidth();\n    }\n    /** Refreshes the width of the outline-notch, if present. */\n    _refreshOutlineNotchWidth() {\n      if (!this._hasOutline() || !this._floatingLabel || !this._shouldLabelFloat()) {\n        this._notchedOutline?._setNotchWidth(0);\n      } else {\n        this._notchedOutline?._setNotchWidth(this._floatingLabel.getWidth());\n      }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n      this._validateHints();\n      this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each \"mat-hint\" alignment specified. The hint\n     * label specified set through the input is being considered as \"start\" aligned.\n     *\n     * This method is a noop if Angular runs in production mode.\n     */\n    _validateHints() {\n      if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        let startHint;\n        let endHint;\n        this._hintChildren.forEach(hint => {\n          if (hint.align === 'start') {\n            if (startHint || this.hintLabel) {\n              throw getMatFormFieldDuplicatedHintError('start');\n            }\n            startHint = hint;\n          } else if (hint.align === 'end') {\n            if (endHint) {\n              throw getMatFormFieldDuplicatedHintError('end');\n            }\n            endHint = hint;\n          }\n        });\n      }\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n      if (this._control) {\n        let ids = [];\n        // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n        if (this._control.userAriaDescribedBy && typeof this._control.userAriaDescribedBy === 'string') {\n          ids.push(...this._control.userAriaDescribedBy.split(' '));\n        }\n        if (this._getDisplayedMessages() === 'hint') {\n          const startHint = this._hintChildren ? this._hintChildren.find(hint => hint.align === 'start') : null;\n          const endHint = this._hintChildren ? this._hintChildren.find(hint => hint.align === 'end') : null;\n          if (startHint) {\n            ids.push(startHint.id);\n          } else if (this._hintLabel) {\n            ids.push(this._hintLabelId);\n          }\n          if (endHint) {\n            ids.push(endHint.id);\n          }\n        } else if (this._errorChildren) {\n          ids.push(...this._errorChildren.map(error => error.id));\n        }\n        this._control.setDescribedByIds(ids);\n      }\n    }\n    /**\n     * Updates the horizontal offset of the label in the outline appearance. In the outline\n     * appearance, the notched-outline and label are not relative to the infix container because\n     * the outline intends to surround prefixes, suffixes and the infix. This means that the\n     * floating label by default overlaps prefixes in the docked state. To avoid this, we need to\n     * horizontally offset the label by the width of the prefix container. The MDC text-field does\n     * not need to do this because they use a fixed width for prefixes. Hence, they can simply\n     * incorporate the horizontal offset into their default text-field styles.\n     */\n    _updateOutlineLabelOffset() {\n      if (!this._hasOutline() || !this._floatingLabel) {\n        return;\n      }\n      const floatingLabel = this._floatingLabel.element;\n      // If no prefix is displayed, reset the outline label offset from potential\n      // previous label offset updates.\n      if (!(this._iconPrefixContainer || this._textPrefixContainer)) {\n        floatingLabel.style.transform = '';\n        return;\n      }\n      // If the form field is not attached to the DOM yet (e.g. in a tab), we defer\n      // the label offset update until the zone stabilizes.\n      if (!this._isAttachedToDom()) {\n        this._needsOutlineLabelOffsetUpdate = true;\n        return;\n      }\n      const iconPrefixContainer = this._iconPrefixContainer?.nativeElement;\n      const textPrefixContainer = this._textPrefixContainer?.nativeElement;\n      const iconSuffixContainer = this._iconSuffixContainer?.nativeElement;\n      const textSuffixContainer = this._textSuffixContainer?.nativeElement;\n      const iconPrefixContainerWidth = iconPrefixContainer?.getBoundingClientRect().width ?? 0;\n      const textPrefixContainerWidth = textPrefixContainer?.getBoundingClientRect().width ?? 0;\n      const iconSuffixContainerWidth = iconSuffixContainer?.getBoundingClientRect().width ?? 0;\n      const textSuffixContainerWidth = textSuffixContainer?.getBoundingClientRect().width ?? 0;\n      // If the directionality is RTL, the x-axis transform needs to be inverted. This\n      // is because `transformX` does not change based on the page directionality.\n      const negate = this._dir.value === 'rtl' ? '-1' : '1';\n      const prefixWidth = `${iconPrefixContainerWidth + textPrefixContainerWidth}px`;\n      const labelOffset = `var(--mat-mdc-form-field-label-offset-x, 0px)`;\n      const labelHorizontalOffset = `calc(${negate} * (${prefixWidth} + ${labelOffset}))`;\n      // Update the translateX of the floating label to account for the prefix container,\n      // but allow the CSS to override this setting via a CSS variable when the label is\n      // floating.\n      floatingLabel.style.transform = `var(\n        --mat-mdc-form-field-label-transform,\n        ${FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM} translateX(${labelHorizontalOffset})\n    )`;\n      // Prevent the label from overlapping the suffix when in resting position.\n      const prefixAndSuffixWidth = iconPrefixContainerWidth + textPrefixContainerWidth + iconSuffixContainerWidth + textSuffixContainerWidth;\n      this._elementRef.nativeElement.style.setProperty('--mat-form-field-notch-max-width', `calc(100% - ${prefixAndSuffixWidth}px)`);\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDom() {\n      const element = this._elementRef.nativeElement;\n      if (element.getRootNode) {\n        const rootNode = element.getRootNode();\n        // If the element is inside the DOM the root node will be either the document\n        // or the closest shadow root, otherwise it'll be the element itself.\n        return rootNode && rootNode !== element;\n      }\n      // Otherwise fall back to checking if it's in the document. This doesn't account for\n      // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n      return document.documentElement.contains(element);\n    }\n    static ɵfac = function MatFormField_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatFormField)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatFormField,\n      selectors: [[\"mat-form-field\"]],\n      contentQueries: function MatFormField_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuerySignal(dirIndex, ctx._labelChild, MatLabel, 5);\n          i0.ɵɵcontentQuery(dirIndex, MatFormFieldControl, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_PREFIX, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_SUFFIX, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_ERROR, 5);\n          i0.ɵɵcontentQuery(dirIndex, MatHint, 5);\n        }\n        if (rf & 2) {\n          i0.ɵɵqueryAdvance();\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._formFieldControl = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._errorChildren = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._hintChildren = _t);\n        }\n      },\n      viewQuery: function MatFormField_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c3, 5);\n          i0.ɵɵviewQuery(_c4, 5);\n          i0.ɵɵviewQuery(_c5, 5);\n          i0.ɵɵviewQuery(_c6, 5);\n          i0.ɵɵviewQuery(_c7, 5);\n          i0.ɵɵviewQuery(MatFormFieldFloatingLabel, 5);\n          i0.ɵɵviewQuery(MatFormFieldNotchedOutline, 5);\n          i0.ɵɵviewQuery(MatFormFieldLineRipple, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._textField = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._iconPrefixContainer = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._textPrefixContainer = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._iconSuffixContainer = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._textSuffixContainer = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._floatingLabel = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._notchedOutline = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lineRipple = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-form-field\"],\n      hostVars: 40,\n      hostBindings: function MatFormField_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-mdc-form-field-label-always-float\", ctx._shouldAlwaysFloat())(\"mat-mdc-form-field-has-icon-prefix\", ctx._hasIconPrefix)(\"mat-mdc-form-field-has-icon-suffix\", ctx._hasIconSuffix)(\"mat-form-field-invalid\", ctx._control.errorState)(\"mat-form-field-disabled\", ctx._control.disabled)(\"mat-form-field-autofilled\", ctx._control.autofilled)(\"mat-form-field-appearance-fill\", ctx.appearance == \"fill\")(\"mat-form-field-appearance-outline\", ctx.appearance == \"outline\")(\"mat-form-field-hide-placeholder\", ctx._hasFloatingLabel() && !ctx._shouldLabelFloat())(\"mat-focused\", ctx._control.focused)(\"mat-primary\", ctx.color !== \"accent\" && ctx.color !== \"warn\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\")(\"ng-untouched\", ctx._shouldForward(\"untouched\"))(\"ng-touched\", ctx._shouldForward(\"touched\"))(\"ng-pristine\", ctx._shouldForward(\"pristine\"))(\"ng-dirty\", ctx._shouldForward(\"dirty\"))(\"ng-valid\", ctx._shouldForward(\"valid\"))(\"ng-invalid\", ctx._shouldForward(\"invalid\"))(\"ng-pending\", ctx._shouldForward(\"pending\"));\n        }\n      },\n      inputs: {\n        hideRequiredMarker: \"hideRequiredMarker\",\n        color: \"color\",\n        floatLabel: \"floatLabel\",\n        appearance: \"appearance\",\n        subscriptSizing: \"subscriptSizing\",\n        hintLabel: \"hintLabel\"\n      },\n      exportAs: [\"matFormField\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_FORM_FIELD,\n        useExisting: MatFormField\n      }, {\n        provide: FLOATING_LABEL_PARENT,\n        useExisting: MatFormField\n      }])],\n      ngContentSelectors: _c9,\n      decls: 18,\n      vars: 21,\n      consts: [[\"labelTemplate\", \"\"], [\"textField\", \"\"], [\"iconPrefixContainer\", \"\"], [\"textPrefixContainer\", \"\"], [\"textSuffixContainer\", \"\"], [\"iconSuffixContainer\", \"\"], [1, \"mat-mdc-text-field-wrapper\", \"mdc-text-field\", 3, \"click\"], [1, \"mat-mdc-form-field-focus-overlay\"], [1, \"mat-mdc-form-field-flex\"], [\"matFormFieldNotchedOutline\", \"\", 3, \"matFormFieldNotchedOutlineOpen\"], [1, \"mat-mdc-form-field-icon-prefix\"], [1, \"mat-mdc-form-field-text-prefix\"], [1, \"mat-mdc-form-field-infix\"], [3, \"ngTemplateOutlet\"], [1, \"mat-mdc-form-field-text-suffix\"], [1, \"mat-mdc-form-field-icon-suffix\"], [\"matFormFieldLineRipple\", \"\"], [1, \"mat-mdc-form-field-subscript-wrapper\", \"mat-mdc-form-field-bottom-align\"], [1, \"mat-mdc-form-field-error-wrapper\"], [1, \"mat-mdc-form-field-hint-wrapper\"], [\"matFormFieldFloatingLabel\", \"\", 3, \"floating\", \"monitorResize\", \"id\"], [\"aria-hidden\", \"true\", 1, \"mat-mdc-form-field-required-marker\", \"mdc-floating-label--required\"], [3, \"id\"], [1, \"mat-mdc-form-field-hint-spacer\"]],\n      template: function MatFormField_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵprojectionDef(_c8);\n          i0.ɵɵtemplate(0, MatFormField_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementStart(2, \"div\", 6, 1);\n          i0.ɵɵlistener(\"click\", function MatFormField_Template_div_click_2_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx._control.onContainerClick($event));\n          });\n          i0.ɵɵtemplate(4, MatFormField_Conditional_4_Template, 1, 0, \"div\", 7);\n          i0.ɵɵelementStart(5, \"div\", 8);\n          i0.ɵɵtemplate(6, MatFormField_Conditional_6_Template, 2, 2, \"div\", 9)(7, MatFormField_Conditional_7_Template, 3, 0, \"div\", 10)(8, MatFormField_Conditional_8_Template, 3, 0, \"div\", 11);\n          i0.ɵɵelementStart(9, \"div\", 12);\n          i0.ɵɵtemplate(10, MatFormField_Conditional_10_Template, 1, 1, null, 13);\n          i0.ɵɵprojection(11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(12, MatFormField_Conditional_12_Template, 3, 0, \"div\", 14)(13, MatFormField_Conditional_13_Template, 3, 0, \"div\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(14, MatFormField_Conditional_14_Template, 1, 0, \"div\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\", 17);\n          i0.ɵɵtemplate(16, MatFormField_Case_16_Template, 2, 0, \"div\", 18)(17, MatFormField_Case_17_Template, 5, 1, \"div\", 19);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          let tmp_16_0;\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"mdc-text-field--filled\", !ctx._hasOutline())(\"mdc-text-field--outlined\", ctx._hasOutline())(\"mdc-text-field--no-label\", !ctx._hasFloatingLabel())(\"mdc-text-field--disabled\", ctx._control.disabled)(\"mdc-text-field--invalid\", ctx._control.errorState);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(!ctx._hasOutline() && !ctx._control.disabled ? 4 : -1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(ctx._hasOutline() ? 6 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx._hasIconPrefix ? 7 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx._hasTextPrefix ? 8 : -1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(!ctx._hasOutline() || ctx._forceDisplayInfixLabel() ? 10 : -1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(ctx._hasTextSuffix ? 12 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx._hasIconSuffix ? 13 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(!ctx._hasOutline() ? 14 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"mat-mdc-form-field-subscript-dynamic-size\", ctx.subscriptSizing === \"dynamic\");\n          i0.ɵɵadvance();\n          i0.ɵɵconditional((tmp_16_0 = ctx._getDisplayedMessages()) === \"error\" ? 16 : tmp_16_0 === \"hint\" ? 17 : -1);\n        }\n      },\n      dependencies: [MatFormFieldFloatingLabel, MatFormFieldNotchedOutline, NgTemplateOutlet, MatFormFieldLineRipple, MatHint],\n      styles: [\".mdc-text-field{display:inline-flex;align-items:baseline;padding:0 16px;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.mdc-text-field__input{width:100%;min-width:0;border:none;border-radius:0;background:none;padding:0;-moz-appearance:none;-webkit-appearance:none;height:28px}.mdc-text-field__input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field__input::-ms-clear{display:none}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}.mdc-text-field__input::placeholder{opacity:0}.mdc-text-field__input::-moz-placeholder{opacity:0}.mdc-text-field__input::-webkit-input-placeholder{opacity:0}.mdc-text-field__input:-ms-input-placeholder{opacity:0}.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder,.mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input::-webkit-input-placeholder,.mdc-text-field--focused .mdc-text-field__input::-webkit-input-placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{opacity:1}.mdc-text-field--disabled:not(.mdc-text-field--no-label) .mdc-text-field__input.mat-mdc-input-disabled-interactive::placeholder{opacity:0}.mdc-text-field--disabled:not(.mdc-text-field--no-label) .mdc-text-field__input.mat-mdc-input-disabled-interactive::-moz-placeholder{opacity:0}.mdc-text-field--disabled:not(.mdc-text-field--no-label) .mdc-text-field__input.mat-mdc-input-disabled-interactive::-webkit-input-placeholder{opacity:0}.mdc-text-field--disabled:not(.mdc-text-field--no-label) .mdc-text-field__input.mat-mdc-input-disabled-interactive:-ms-input-placeholder{opacity:0}.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{height:100%}.mdc-text-field--outlined .mdc-text-field__input{display:flex;border:none !important;background-color:rgba(0,0,0,0)}.mdc-text-field--disabled .mdc-text-field__input{pointer-events:auto}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input{color:var(--mdc-filled-text-field-input-text-color, var(--mat-sys-on-surface));caret-color:var(--mdc-filled-text-field-caret-color, var(--mat-sys-primary))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::-webkit-input-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{caret-color:var(--mdc-filled-text-field-error-caret-color)}.mdc-text-field--filled.mdc-text-field--disabled .mdc-text-field__input{color:var(--mdc-filled-text-field-disabled-input-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input{color:var(--mdc-outlined-text-field-input-text-color, var(--mat-sys-on-surface));caret-color:var(--mdc-outlined-text-field-caret-color, var(--mat-sys-primary))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::-webkit-input-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{caret-color:var(--mdc-outlined-text-field-error-caret-color)}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__input{color:var(--mdc-outlined-text-field-disabled-input-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mdc-text-field--disabled .mdc-text-field__input{background-color:Window}}.mdc-text-field--filled{height:56px;border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-left-radius:var(--mdc-filled-text-field-container-shape, var(--mat-sys-corner-extra-small));border-top-right-radius:var(--mdc-filled-text-field-container-shape, var(--mat-sys-corner-extra-small))}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:var(--mdc-filled-text-field-container-color, var(--mat-sys-surface-variant))}.mdc-text-field--filled.mdc-text-field--disabled{background-color:var(--mdc-filled-text-field-disabled-container-color, color-mix(in srgb, var(--mat-sys-on-surface) 4%, transparent))}.mdc-text-field--outlined{height:56px;overflow:visible;padding-right:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small)));padding-left:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small)) + 4px)}[dir=rtl] .mdc-text-field--outlined{padding-right:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small)) + 4px);padding-left:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small)))}.mdc-floating-label{position:absolute;left:0;transform-origin:left top;line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform}[dir=rtl] .mdc-floating-label{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-text-field .mdc-floating-label{top:50%;transform:translateY(-50%);pointer-events:none}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:auto}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label{left:auto;right:4px}.mdc-text-field--filled .mdc-floating-label{left:16px;right:auto}[dir=rtl] .mdc-text-field--filled .mdc-floating-label{left:auto;right:16px}.mdc-text-field--disabled .mdc-floating-label{cursor:default}@media(forced-colors: active){.mdc-text-field--disabled .mdc-floating-label{z-index:1}}.mdc-text-field--filled.mdc-text-field--no-label .mdc-floating-label{display:none}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-floating-label{color:var(--mdc-filled-text-field-label-text-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-floating-label{color:var(--mdc-filled-text-field-focus-label-text-color, var(--mat-sys-primary))}.mdc-text-field--filled:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-floating-label{color:var(--mdc-filled-text-field-hover-label-text-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled.mdc-text-field--disabled .mdc-floating-label{color:var(--mdc-filled-text-field-disabled-label-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-floating-label{color:var(--mdc-filled-text-field-error-label-text-color, var(--mat-sys-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mdc-floating-label{color:var(--mdc-filled-text-field-error-focus-label-text-color, var(--mat-sys-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-floating-label{color:var(--mdc-filled-text-field-error-hover-label-text-color, var(--mat-sys-on-error-container))}.mdc-text-field--filled .mdc-floating-label{font-family:var(--mdc-filled-text-field-label-text-font, var(--mat-sys-body-large-font));font-size:var(--mdc-filled-text-field-label-text-size, var(--mat-sys-body-large-size));font-weight:var(--mdc-filled-text-field-label-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mdc-filled-text-field-label-text-tracking, var(--mat-sys-body-large-tracking))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-floating-label{color:var(--mdc-outlined-text-field-label-text-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-floating-label{color:var(--mdc-outlined-text-field-focus-label-text-color, var(--mat-sys-primary))}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-floating-label{color:var(--mdc-outlined-text-field-hover-label-text-color, var(--mat-sys-on-surface))}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-floating-label{color:var(--mdc-outlined-text-field-disabled-label-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-floating-label{color:var(--mdc-outlined-text-field-error-label-text-color, var(--mat-sys-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mdc-floating-label{color:var(--mdc-outlined-text-field-error-focus-label-text-color, var(--mat-sys-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-floating-label{color:var(--mdc-outlined-text-field-error-hover-label-text-color, var(--mat-sys-on-error-container))}.mdc-text-field--outlined .mdc-floating-label{font-family:var(--mdc-outlined-text-field-label-text-font, var(--mat-sys-body-large-font));font-size:var(--mdc-outlined-text-field-label-text-size, var(--mat-sys-body-large-size));font-weight:var(--mdc-outlined-text-field-label-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mdc-outlined-text-field-label-text-tracking, var(--mat-sys-body-large-tracking))}.mdc-floating-label--float-above{cursor:auto;transform:translateY(-106%) scale(0.75)}.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1);font-size:.75rem}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:133.3333333333%}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-floating-label--required:not(.mdc-floating-label--hide-required-marker)::after{margin-left:1px;margin-right:0;content:\\\"*\\\"}[dir=rtl] .mdc-floating-label--required:not(.mdc-floating-label--hide-required-marker)::after{margin-left:0;margin-right:1px}.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline{text-align:right}.mdc-text-field--outlined .mdc-notched-outline{z-index:1}.mat-mdc-notch-piece{box-sizing:border-box;height:100%;pointer-events:none;border-top:1px solid;border-bottom:1px solid}.mdc-text-field--focused .mat-mdc-notch-piece{border-width:2px}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-outline-color, var(--mat-sys-outline));border-width:var(--mdc-outlined-text-field-outline-width, 1px)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-hover-outline-color, var(--mat-sys-on-surface))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-focus-outline-color, var(--mat-sys-primary))}.mdc-text-field--outlined.mdc-text-field--disabled .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-disabled-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 12%, transparent))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-outline-color, var(--mat-sys-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--focused):hover .mdc-notched-outline .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-hover-outline-color, var(--mat-sys-on-error-container))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-focus-outline-color, var(--mat-sys-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline .mat-mdc-notch-piece{border-width:var(--mdc-outlined-text-field-focus-outline-width, 2px)}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small));border-bottom-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small))}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{width:max(12px,var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small)))}[dir=rtl] .mdc-notched-outline__leading{border-left:none;border-right:1px solid;border-bottom-left-radius:0;border-top-left-radius:0;border-top-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small));border-bottom-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small))}.mdc-notched-outline__trailing{flex-grow:1;border-left:none;border-right:1px solid;border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small));border-bottom-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small))}[dir=rtl] .mdc-notched-outline__trailing{border-left:1px solid;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small));border-bottom-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small))}.mdc-notched-outline__notch{flex:0 0 auto;width:auto}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__notch{max-width:min(var(--mat-form-field-notch-max-width, 100%),100% - max(12px,var(--mdc-outlined-text-field-container-shape, var(--mat-sys-corner-extra-small)))*2)}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--focused.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none;--mat-form-field-notch-max-width: 100%}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}.mdc-line-ripple::before,.mdc-line-ripple::after{position:absolute;bottom:0;left:0;width:100%;border-bottom-style:solid;content:\\\"\\\"}.mdc-line-ripple::before{z-index:1;border-bottom-width:var(--mdc-filled-text-field-active-indicator-height, 1px)}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-active-indicator-color, var(--mat-sys-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-hover-active-indicator-color, var(--mat-sys-on-surface))}.mdc-text-field--filled.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-disabled-active-indicator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-error-active-indicator-color, var(--mat-sys-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--focused):hover .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-error-hover-active-indicator-color, var(--mat-sys-on-error-container))}.mdc-line-ripple::after{transform:scaleX(0);opacity:0;z-index:2}.mdc-text-field--filled .mdc-line-ripple::after{border-bottom-width:var(--mdc-filled-text-field-focus-active-indicator-height, 2px)}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:var(--mdc-filled-text-field-focus-active-indicator-color, var(--mat-sys-primary))}.mdc-text-field--filled.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:var(--mdc-filled-text-field-error-focus-active-indicator-color, var(--mat-sys-error))}.mdc-line-ripple--active::after{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating::after{opacity:0}.mdc-text-field--disabled{pointer-events:none}.mat-mdc-form-field-textarea-control{vertical-align:middle;resize:vertical;box-sizing:border-box;height:auto;margin:0;padding:0;border:none;overflow:auto}.mat-mdc-form-field-input-control.mat-mdc-form-field-input-control{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font:inherit;letter-spacing:inherit;text-decoration:inherit;text-transform:inherit;border:none}.mat-mdc-form-field .mat-mdc-floating-label.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;line-height:normal;pointer-events:all;will-change:auto}.mat-mdc-form-field:not(.mat-form-field-disabled) .mat-mdc-floating-label.mdc-floating-label{cursor:inherit}.mdc-text-field--no-label:not(.mdc-text-field--textarea) .mat-mdc-form-field-input-control.mdc-text-field__input,.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control{height:auto}.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control.mdc-text-field__input[type=color]{height:23px}.mat-mdc-text-field-wrapper{height:auto;flex:auto;will-change:auto}.mat-mdc-form-field-has-icon-prefix .mat-mdc-text-field-wrapper{padding-left:0;--mat-mdc-form-field-label-offset-x: -16px}.mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper{padding-right:0}[dir=rtl] .mat-mdc-text-field-wrapper{padding-left:16px;padding-right:16px}[dir=rtl] .mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper{padding-left:0}[dir=rtl] .mat-mdc-form-field-has-icon-prefix .mat-mdc-text-field-wrapper{padding-right:0}.mat-form-field-disabled .mdc-text-field__input::placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-disabled .mdc-text-field__input::-moz-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-disabled .mdc-text-field__input::-webkit-input-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-disabled .mdc-text-field__input:-ms-input-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-form-field-label-always-float .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mat-mdc-text-field-wrapper .mat-mdc-form-field-infix .mat-mdc-floating-label{left:auto;right:auto}.mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-text-field__input{display:inline-block}.mat-mdc-form-field .mat-mdc-text-field-wrapper.mdc-text-field .mdc-notched-outline__notch{padding-top:0}.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch{border-left:1px solid rgba(0,0,0,0)}[dir=rtl] .mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch{border-left:none;border-right:1px solid rgba(0,0,0,0)}.mat-mdc-form-field-infix{min-height:var(--mat-form-field-container-height, 56px);padding-top:var(--mat-form-field-filled-with-label-container-padding-top, 24px);padding-bottom:var(--mat-form-field-filled-with-label-container-padding-bottom, 8px)}.mdc-text-field--outlined .mat-mdc-form-field-infix,.mdc-text-field--no-label .mat-mdc-form-field-infix{padding-top:var(--mat-form-field-container-vertical-padding, 16px);padding-bottom:var(--mat-form-field-container-vertical-padding, 16px)}.mat-mdc-text-field-wrapper .mat-mdc-form-field-flex .mat-mdc-floating-label{top:calc(var(--mat-form-field-container-height, 56px)/2)}.mdc-text-field--filled .mat-mdc-floating-label{display:var(--mat-form-field-filled-label-display, block)}.mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{--mat-mdc-form-field-label-transform: translateY(calc(calc(6.75px + var(--mat-form-field-container-height, 56px) / 2) * -1)) scale(var(--mat-mdc-form-field-floating-label-scale, 0.75));transform:var(--mat-mdc-form-field-label-transform)}@keyframes _mat-form-field-subscript-animation{from{opacity:0;transform:translateY(-5px)}to{opacity:1;transform:translateY(0)}}.mat-mdc-form-field-subscript-wrapper{box-sizing:border-box;width:100%;position:relative}.mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field-error-wrapper{position:absolute;top:0;left:0;right:0;padding:0 16px;opacity:1;transform:translateY(0);animation:_mat-form-field-subscript-animation 0ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-mdc-form-field-subscript-dynamic-size .mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field-subscript-dynamic-size .mat-mdc-form-field-error-wrapper{position:static}.mat-mdc-form-field-bottom-align::before{content:\\\"\\\";display:inline-block;height:16px}.mat-mdc-form-field-bottom-align.mat-mdc-form-field-subscript-dynamic-size::before{content:unset}.mat-mdc-form-field-hint-end{order:1}.mat-mdc-form-field-hint-wrapper{display:flex}.mat-mdc-form-field-hint-spacer{flex:1 0 1em}.mat-mdc-form-field-error{display:block;color:var(--mat-form-field-error-text-color, var(--mat-sys-error))}.mat-mdc-form-field-subscript-wrapper,.mat-mdc-form-field-bottom-align::before{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-form-field-subscript-text-font, var(--mat-sys-body-small-font));line-height:var(--mat-form-field-subscript-text-line-height, var(--mat-sys-body-small-line-height));font-size:var(--mat-form-field-subscript-text-size, var(--mat-sys-body-small-size));letter-spacing:var(--mat-form-field-subscript-text-tracking, var(--mat-sys-body-small-tracking));font-weight:var(--mat-form-field-subscript-text-weight, var(--mat-sys-body-small-weight))}.mat-mdc-form-field-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;opacity:0;pointer-events:none;background-color:var(--mat-form-field-state-layer-color, var(--mat-sys-on-surface))}.mat-mdc-text-field-wrapper:hover .mat-mdc-form-field-focus-overlay{opacity:var(--mat-form-field-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-form-field.mat-focused .mat-mdc-form-field-focus-overlay{opacity:var(--mat-form-field-focus-state-layer-opacity, 0)}select.mat-mdc-form-field-input-control{-moz-appearance:none;-webkit-appearance:none;background-color:rgba(0,0,0,0);display:inline-flex;box-sizing:border-box}select.mat-mdc-form-field-input-control:not(:disabled){cursor:pointer}select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) option{color:var(--mat-form-field-select-option-text-color, var(--mat-sys-neutral10))}select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) option:disabled{color:var(--mat-form-field-select-disabled-option-text-color, color-mix(in srgb, var(--mat-sys-neutral10) 38%, transparent))}.mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;position:absolute;right:0;top:50%;margin-top:-2.5px;pointer-events:none;color:var(--mat-form-field-enabled-select-arrow-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-infix::after{right:auto;left:0}.mat-mdc-form-field-type-mat-native-select.mat-focused .mat-mdc-form-field-infix::after{color:var(--mat-form-field-focus-select-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field-type-mat-native-select.mat-form-field-disabled .mat-mdc-form-field-infix::after{color:var(--mat-form-field-disabled-select-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-input-control{padding-right:15px}[dir=rtl] .mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-input-control{padding-right:0;padding-left:15px}@media(forced-colors: active){.mat-form-field-appearance-fill .mat-mdc-text-field-wrapper{outline:solid 1px}}@media(forced-colors: active){.mat-form-field-appearance-fill.mat-form-field-disabled .mat-mdc-text-field-wrapper{outline-color:GrayText}}@media(forced-colors: active){.mat-form-field-appearance-fill.mat-focused .mat-mdc-text-field-wrapper{outline:dashed 3px}}@media(forced-colors: active){.mat-mdc-form-field.mat-focused .mdc-notched-outline{border:dashed 3px}}.mat-mdc-form-field-input-control[type=date],.mat-mdc-form-field-input-control[type=datetime],.mat-mdc-form-field-input-control[type=datetime-local],.mat-mdc-form-field-input-control[type=month],.mat-mdc-form-field-input-control[type=week],.mat-mdc-form-field-input-control[type=time]{line-height:1}.mat-mdc-form-field-input-control::-webkit-datetime-edit{line-height:1;padding:0;margin-bottom:-2px}.mat-mdc-form-field{--mat-mdc-form-field-floating-label-scale: 0.75;display:inline-flex;flex-direction:column;min-width:0;text-align:left;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-form-field-container-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-form-field-container-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-form-field-container-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-form-field-container-text-tracking, var(--mat-sys-body-large-tracking));font-weight:var(--mat-form-field-container-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-form-field .mdc-text-field--outlined .mdc-floating-label--float-above{font-size:calc(var(--mat-form-field-outlined-label-text-populated-size)*var(--mat-mdc-form-field-floating-label-scale))}.mat-mdc-form-field .mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:var(--mat-form-field-outlined-label-text-populated-size)}[dir=rtl] .mat-mdc-form-field{text-align:right}.mat-mdc-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-mdc-text-field-wrapper{width:100%;z-index:0}.mat-mdc-form-field-icon-prefix,.mat-mdc-form-field-icon-suffix{align-self:center;line-height:0;pointer-events:auto;position:relative;z-index:1}.mat-mdc-form-field-icon-prefix>.mat-icon,.mat-mdc-form-field-icon-suffix>.mat-icon{padding:0 12px;box-sizing:content-box}.mat-mdc-form-field-icon-prefix{color:var(--mat-form-field-leading-icon-color, var(--mat-sys-on-surface-variant))}.mat-form-field-disabled .mat-mdc-form-field-icon-prefix{color:var(--mat-form-field-disabled-leading-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-trailing-icon-color, var(--mat-sys-on-surface-variant))}.mat-form-field-disabled .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-disabled-trailing-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-invalid .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-trailing-icon-color, var(--mat-sys-error))}.mat-form-field-invalid:not(.mat-focused):not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper:hover .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-hover-trailing-icon-color, var(--mat-sys-on-error-container))}.mat-form-field-invalid.mat-focused .mat-mdc-text-field-wrapper .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-focus-trailing-icon-color, var(--mat-sys-error))}.mat-mdc-form-field-icon-prefix,[dir=rtl] .mat-mdc-form-field-icon-suffix{padding:0 4px 0 0}.mat-mdc-form-field-icon-suffix,[dir=rtl] .mat-mdc-form-field-icon-prefix{padding:0 0 0 4px}.mat-mdc-form-field-subscript-wrapper .mat-icon,.mat-mdc-form-field label .mat-icon{width:1em;height:1em;font-size:inherit}.mat-mdc-form-field-infix{flex:auto;min-width:0;width:180px;position:relative;box-sizing:border-box}.mat-mdc-form-field-infix:has(textarea[cols]){width:auto}.mat-mdc-form-field .mdc-notched-outline__notch{margin-left:-1px;-webkit-clip-path:inset(-9em -999em -9em 1px);clip-path:inset(-9em -999em -9em 1px)}[dir=rtl] .mat-mdc-form-field .mdc-notched-outline__notch{margin-left:0;margin-right:-1px;-webkit-clip-path:inset(-9em 1px -9em -999em);clip-path:inset(-9em 1px -9em -999em)}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-floating-label{transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-text-field__input{transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-text-field__input::placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-text-field__input::-moz-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-text-field__input::-webkit-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-text-field__input:-ms-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder,.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--no-label .mdc-text-field__input::-webkit-input-placeholder,.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--focused .mdc-text-field__input::-webkit-input-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mat-mdc-form-field.mat-form-field-animations-enabled.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-text-field--filled:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple::before{transition-duration:75ms}.mat-mdc-form-field.mat-form-field-animations-enabled .mdc-line-ripple::after{transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field.mat-form-field-animations-enabled .mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field.mat-form-field-animations-enabled .mat-mdc-form-field-error-wrapper{animation-duration:300ms}.mdc-notched-outline .mdc-floating-label{max-width:calc(100% + 1px)}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(133.3333333333% + 1px)}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatFormField;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatFormFieldModule = /*#__PURE__*/(() => {\n  class MatFormFieldModule {\n    static ɵfac = function MatFormFieldModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatFormFieldModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatFormFieldModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatCommonModule, ObserversModule, MatCommonModule]\n    });\n  }\n  return MatFormFieldModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matFormFieldAnimations = {\n  // Represents:\n  // trigger('transitionMessages', [\n  //   // TODO(mmalerba): Use angular animations for label animation as well.\n  //   state('enter', style({opacity: 1, transform: 'translateY(0%)'})),\n  //   transition('void => enter', [\n  //     style({opacity: 0, transform: 'translateY(-5px)'}),\n  //     animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n  //   ]),\n  // ])\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: {\n    type: 7,\n    name: 'transitionMessages',\n    definitions: [{\n      type: 0,\n      name: 'enter',\n      styles: {\n        type: 6,\n        styles: {\n          opacity: 1,\n          transform: 'translateY(0%)'\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: 'void => enter',\n      animation: [{\n        type: 6,\n        styles: {\n          opacity: 0,\n          transform: 'translateY(-5px)'\n        },\n        offset: null\n      }, {\n        type: 4,\n        styles: null,\n        timings: '300ms cubic-bezier(0.55, 0, 0.55, 0.2)'\n      }],\n      options: null\n    }],\n    options: {}\n  }\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPrefix, MatSuffix, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n","import { FocusMonitor, _IdGenerator, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, booleanAttribute, numberAttribute, Directive, Input, ChangeDetectorRef, NgZone, EventEmitter, Injector, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, Output, ContentChild, ViewChild, afterNextRender, QueryList, forwardRef, NgModule } from '@angular/core';\nimport { _StructuralStylesLoader, MAT_RIPPLE_GLOBAL_OPTIONS, MatRippleLoader, ErrorStateMatcher, _ErrorStateTracker, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { takeUntil, startWith, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { NG_VALUE_ACCESSOR, NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { MatFormFieldControl, MAT_FORM_FIELD } from '@angular/material/form-field';\n\n/** Injection token to be used to override the default options for the chips module. */\nconst _c0 = [\"*\", [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], [[\"mat-chip-trailing-icon\"], [\"\", \"matChipRemove\", \"\"], [\"\", \"matChipTrailingIcon\", \"\"]]];\nconst _c1 = [\"*\", \"mat-chip-avatar, [matChipAvatar]\", \"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"];\nfunction MatChip_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatChip_Conditional_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatChipOption_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵelementStart(2, \"span\", 8);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(3, \"svg\", 9);\n    i0.ɵɵelement(4, \"path\", 10);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction MatChipOption_Conditional_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c2 = \".mdc-evolution-chip,.mdc-evolution-chip__cell,.mdc-evolution-chip__action{display:inline-flex;align-items:center}.mdc-evolution-chip{position:relative;max-width:100%}.mdc-evolution-chip__cell,.mdc-evolution-chip__action{height:100%}.mdc-evolution-chip__cell--primary{flex-basis:100%;overflow-x:hidden}.mdc-evolution-chip__cell--trailing{flex:1 0 auto}.mdc-evolution-chip__action{align-items:center;background:none;border:none;box-sizing:content-box;cursor:pointer;display:inline-flex;justify-content:center;outline:none;padding:0;text-decoration:none;color:inherit}.mdc-evolution-chip__action--presentational{cursor:auto}.mdc-evolution-chip--disabled,.mdc-evolution-chip__action:disabled{pointer-events:none}@media(forced-colors: active){.mdc-evolution-chip--disabled,.mdc-evolution-chip__action:disabled{forced-color-adjust:none}}.mdc-evolution-chip__action--primary{font:inherit;letter-spacing:inherit;white-space:inherit;overflow-x:hidden}.mat-mdc-standard-chip .mdc-evolution-chip__action--primary::before{border-width:var(--mdc-chip-outline-width, 1px);border-radius:var(--mdc-chip-container-shape-radius, 8px);box-sizing:border-box;content:\\\"\\\";height:100%;left:0;position:absolute;pointer-events:none;top:0;width:100%;z-index:1;border-style:solid}.mat-mdc-standard-chip .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:12px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:0;padding-right:12px}[dir=rtl] .mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:0}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__action--primary::before{border-color:var(--mdc-chip-outline-color, var(--mat-sys-outline))}.mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational):not(.mdc-ripple-upgraded):focus::before{border-color:var(--mdc-chip-focus-outline-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__action--primary::before{border-color:var(--mdc-chip-disabled-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 12%, transparent))}.mat-mdc-standard-chip.mdc-evolution-chip--selected .mdc-evolution-chip__action--primary::before{border-width:var(--mdc-chip-flat-selected-outline-width, 0)}.mat-mdc-basic-chip .mdc-evolution-chip__action--primary{font:inherit}.mat-mdc-standard-chip.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:0}[dir=rtl] .mat-mdc-standard-chip.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:12px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}[dir=rtl] .mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:0;padding-right:12px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:0}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}.mdc-evolution-chip__action--trailing{position:relative;overflow:visible}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__action--trailing{color:var(--mdc-chip-with-trailing-icon-trailing-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__action--trailing{color:var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-color, var(--mat-sys-on-surface))}.mat-mdc-standard-chip.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}.mdc-evolution-chip__text-label{-webkit-user-select:none;user-select:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.mat-mdc-standard-chip .mdc-evolution-chip__text-label{font-family:var(--mdc-chip-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mdc-chip-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mdc-chip-label-text-size, var(--mat-sys-label-large-size));font-weight:var(--mdc-chip-label-text-weight, var(--mat-sys-label-large-weight));letter-spacing:var(--mdc-chip-label-text-tracking, var(--mat-sys-label-large-tracking))}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__text-label{color:var(--mdc-chip-label-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--selected:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__text-label{color:var(--mdc-chip-selected-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__text-label,.mat-mdc-standard-chip.mdc-evolution-chip--selected.mdc-evolution-chip--disabled .mdc-evolution-chip__text-label{color:var(--mdc-chip-disabled-label-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mdc-evolution-chip__graphic{align-items:center;display:inline-flex;justify-content:center;overflow:hidden;pointer-events:none;position:relative;flex:1 0 auto}.mat-mdc-standard-chip .mdc-evolution-chip__graphic{width:var(--mdc-chip-with-avatar-avatar-size, 24px);height:var(--mdc-chip-with-avatar-avatar-size, 24px);font-size:var(--mdc-chip-with-avatar-avatar-size, 24px)}.mdc-evolution-chip--selecting .mdc-evolution-chip__graphic{transition:width 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-evolution-chip--selectable:not(.mdc-evolution-chip--selected):not(.mdc-evolution-chip--with-primary-icon) .mdc-evolution-chip__graphic{width:0}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__graphic{padding-left:6px;padding-right:6px}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__graphic{padding-left:4px;padding-right:8px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__graphic{padding-left:8px;padding-right:4px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__graphic{padding-left:6px;padding-right:6px}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__graphic{padding-left:4px;padding-right:8px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__graphic{padding-left:8px;padding-right:4px}.mdc-evolution-chip__checkmark{position:absolute;opacity:0;top:50%;left:50%;height:20px;width:20px}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__checkmark{color:var(--mdc-chip-with-icon-selected-icon-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__checkmark{color:var(--mdc-chip-with-icon-disabled-icon-color, var(--mat-sys-on-surface))}.mdc-evolution-chip--selecting .mdc-evolution-chip__checkmark{transition:transform 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);transform:translate(-75%, -50%)}.mdc-evolution-chip--selected .mdc-evolution-chip__checkmark{transform:translate(-50%, -50%);opacity:1}.mdc-evolution-chip__checkmark-svg{display:block}.mdc-evolution-chip__checkmark-path{stroke-width:2px;stroke-dasharray:29.7833385;stroke-dashoffset:29.7833385;stroke:currentColor}.mdc-evolution-chip--selecting .mdc-evolution-chip__checkmark-path{transition:stroke-dashoffset 150ms 45ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-evolution-chip--selected .mdc-evolution-chip__checkmark-path{stroke-dashoffset:0}@media(forced-colors: active){.mdc-evolution-chip__checkmark-path{stroke:CanvasText !important}}.mat-mdc-standard-chip .mdc-evolution-chip__icon--trailing{height:18px;width:18px;font-size:18px}.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing.mat-mdc-chip-remove{opacity:calc(var(--mat-chip-trailing-action-opacity, 1)*var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity, 0.38))}.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing.mat-mdc-chip-remove:focus{opacity:calc(var(--mat-chip-trailing-action-focus-opacity, 1)*var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity, 0.38))}.mat-mdc-standard-chip{border-radius:var(--mdc-chip-container-shape-radius, 8px);height:var(--mdc-chip-container-height, 32px)}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled){background-color:var(--mdc-chip-elevated-container-color, transparent)}.mat-mdc-standard-chip.mdc-evolution-chip--disabled{background-color:var(--mdc-chip-elevated-disabled-container-color)}.mat-mdc-standard-chip.mdc-evolution-chip--selected:not(.mdc-evolution-chip--disabled){background-color:var(--mdc-chip-elevated-selected-container-color, var(--mat-sys-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--selected.mdc-evolution-chip--disabled{background-color:var(--mdc-chip-flat-disabled-selected-container-color, color-mix(in srgb, var(--mat-sys-on-surface) 12%, transparent))}@media(forced-colors: active){.mat-mdc-standard-chip{outline:solid 1px}}.mat-mdc-standard-chip .mdc-evolution-chip__icon--primary{border-radius:var(--mdc-chip-with-avatar-avatar-shape-radius, 24px);width:var(--mdc-chip-with-icon-icon-size, 18px);height:var(--mdc-chip-with-icon-icon-size, 18px);font-size:var(--mdc-chip-with-icon-icon-size, 18px)}.mdc-evolution-chip--selected .mdc-evolution-chip__icon--primary{opacity:0}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__icon--primary{color:var(--mdc-chip-with-icon-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--primary{color:var(--mdc-chip-with-icon-disabled-icon-color, var(--mat-sys-on-surface))}.mat-mdc-chip-highlighted{--mdc-chip-with-icon-icon-color:var(--mdc-chip-with-icon-selected-icon-color, var(--mat-sys-on-secondary-container));--mdc-chip-elevated-container-color:var(--mdc-chip-elevated-selected-container-color, var(--mat-sys-secondary-container));--mdc-chip-label-text-color:var(--mdc-chip-selected-label-text-color, var(--mat-sys-on-secondary-container));--mdc-chip-outline-width:var(--mdc-chip-flat-selected-outline-width, 0)}.mat-mdc-chip-focus-overlay{background:var(--mdc-chip-focus-state-layer-color, var(--mat-sys-on-surface-variant))}.mat-mdc-chip-selected .mat-mdc-chip-focus-overlay,.mat-mdc-chip-highlighted .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-selected-focus-state-layer-color, var(--mat-sys-on-secondary-container))}.mat-mdc-chip:hover .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-hover-state-layer-color, var(--mat-sys-on-surface-variant));opacity:var(--mdc-chip-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-chip-focus-overlay .mat-mdc-chip-selected:hover,.mat-mdc-chip-highlighted:hover .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-selected-hover-state-layer-color, var(--mat-sys-on-secondary-container));opacity:var(--mdc-chip-selected-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-chip.cdk-focused .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-focus-state-layer-color, var(--mat-sys-on-surface-variant));opacity:var(--mdc-chip-focus-state-layer-opacity, var(--mat-sys-focus-state-layer-opacity))}.mat-mdc-chip-selected.cdk-focused .mat-mdc-chip-focus-overlay,.mat-mdc-chip-highlighted.cdk-focused .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-selected-focus-state-layer-color, var(--mat-sys-on-secondary-container));opacity:var(--mdc-chip-selected-focus-state-layer-opacity, var(--mat-sys-focus-state-layer-opacity))}.mdc-evolution-chip--disabled:not(.mdc-evolution-chip--selected) .mat-mdc-chip-avatar{opacity:var(--mdc-chip-with-avatar-disabled-avatar-opacity, 0.38)}.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing{opacity:var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity, 0.38)}.mdc-evolution-chip--disabled.mdc-evolution-chip--selected .mdc-evolution-chip__checkmark{opacity:var(--mdc-chip-with-icon-disabled-icon-opacity, 0.38)}.mat-mdc-standard-chip.mdc-evolution-chip--disabled{opacity:var(--mat-chip-disabled-container-opacity, 1)}.mat-mdc-standard-chip.mdc-evolution-chip--selected .mdc-evolution-chip__icon--trailing,.mat-mdc-standard-chip.mat-mdc-chip-highlighted .mdc-evolution-chip__icon--trailing{color:var(--mat-chip-selected-trailing-icon-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--selected.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing,.mat-mdc-standard-chip.mat-mdc-chip-highlighted.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing{color:var(--mat-chip-selected-disabled-trailing-icon-color, var(--mat-sys-on-surface))}.mat-mdc-chip-remove{opacity:var(--mat-chip-trailing-action-opacity, 1)}.mat-mdc-chip-remove:focus{opacity:var(--mat-chip-trailing-action-focus-opacity, 1)}.mat-mdc-chip-remove::after{background-color:var(--mat-chip-trailing-action-state-layer-color, var(--mat-sys-on-surface-variant))}.mat-mdc-chip-remove:hover::after{opacity:var(--mat-chip-trailing-action-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-chip-remove:focus::after{opacity:var(--mat-chip-trailing-action-focus-state-layer-opacity, var(--mat-sys-focus-state-layer-opacity))}.mat-mdc-chip-selected .mat-mdc-chip-remove::after,.mat-mdc-chip-highlighted .mat-mdc-chip-remove::after{background-color:var(--mat-chip-selected-trailing-action-state-layer-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-standard-chip .mdc-evolution-chip__cell--primary,.mat-mdc-standard-chip .mdc-evolution-chip__action--primary,.mat-mdc-standard-chip .mat-mdc-chip-action-label{overflow:visible}.mat-mdc-standard-chip .mat-mdc-chip-graphic,.mat-mdc-standard-chip .mat-mdc-chip-trailing-icon{box-sizing:content-box}.mat-mdc-standard-chip._mat-animation-noopable,.mat-mdc-standard-chip._mat-animation-noopable .mdc-evolution-chip__graphic,.mat-mdc-standard-chip._mat-animation-noopable .mdc-evolution-chip__checkmark,.mat-mdc-standard-chip._mat-animation-noopable .mdc-evolution-chip__checkmark-path{transition-duration:1ms;animation-duration:1ms}.mat-mdc-chip-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;opacity:0;border-radius:inherit;transition:opacity 150ms linear}._mat-animation-noopable .mat-mdc-chip-focus-overlay{transition:none}.mat-mdc-basic-chip .mat-mdc-chip-focus-overlay{display:none}.mat-mdc-chip .mat-ripple.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-mdc-chip-avatar{text-align:center;line-height:1;color:var(--mdc-chip-with-icon-icon-color, currentColor)}.mat-mdc-chip{position:relative;z-index:0}.mat-mdc-chip-action-label{text-align:left;z-index:1}[dir=rtl] .mat-mdc-chip-action-label{text-align:right}.mat-mdc-chip.mdc-evolution-chip--with-trailing-action .mat-mdc-chip-action-label{position:relative}.mat-mdc-chip-action-label .mat-mdc-chip-primary-focus-indicator{position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none}.mat-mdc-chip-action-label .mat-focus-indicator::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-mdc-chip-remove::before{margin:calc(var(--mat-focus-indicator-border-width, 3px)*-1);left:8px;right:8px}.mat-mdc-chip-remove::after{content:\\\"\\\";display:block;opacity:0;position:absolute;top:-3px;bottom:-3px;left:5px;right:5px;border-radius:50%;box-sizing:border-box;padding:12px;margin:-12px;background-clip:content-box}.mat-mdc-chip-remove .mat-icon{width:18px;height:18px;font-size:18px;box-sizing:content-box}.mat-chip-edit-input{cursor:text;display:inline-block;color:inherit;outline:0}@media(forced-colors: active){.mat-mdc-chip-selected:not(.mat-mdc-chip-multiple){outline-width:3px}}.mat-mdc-chip-action:focus .mat-focus-indicator::before{content:\\\"\\\"}\";\nconst _c3 = [[[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], [[\"\", \"matChipEditInput\", \"\"]], \"*\", [[\"mat-chip-trailing-icon\"], [\"\", \"matChipRemove\", \"\"], [\"\", \"matChipTrailingIcon\", \"\"]]];\nconst _c4 = [\"mat-chip-avatar, [matChipAvatar]\", \"[matChipEditInput]\", \"*\", \"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"];\nfunction MatChipRow_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 0);\n  }\n}\nfunction MatChipRow_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatChipRow_Conditional_4_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1);\n  }\n}\nfunction MatChipRow_Conditional_4_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 7);\n  }\n}\nfunction MatChipRow_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MatChipRow_Conditional_4_Conditional_0_Template, 1, 0)(1, MatChipRow_Conditional_4_Conditional_1_Template, 1, 0, \"span\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵconditional(ctx_r0.contentEditInput ? 0 : 1);\n  }\n}\nfunction MatChipRow_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nfunction MatChipRow_Conditional_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵprojection(1, 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c5 = [\"*\"];\nconst _c6 = \".mat-mdc-chip-set{display:flex}.mat-mdc-chip-set:focus{outline:none}.mat-mdc-chip-set .mdc-evolution-chip-set__chips{min-width:100%;margin-left:-8px;margin-right:0}.mat-mdc-chip-set .mdc-evolution-chip{margin:4px 0 4px 8px}[dir=rtl] .mat-mdc-chip-set .mdc-evolution-chip-set__chips{margin-left:0;margin-right:-8px}[dir=rtl] .mat-mdc-chip-set .mdc-evolution-chip{margin-left:0;margin-right:8px}.mdc-evolution-chip-set__chips{display:flex;flex-flow:wrap;min-width:0}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}.mat-mdc-chip-set-stacked .mdc-evolution-chip__graphic{flex-grow:0}.mat-mdc-chip-set-stacked .mdc-evolution-chip__action--primary{flex-basis:100%;justify-content:start}input.mat-mdc-chip-input{flex:1 0 150px;margin-left:8px}[dir=rtl] input.mat-mdc-chip-input{margin-left:0;margin-right:8px}\";\nconst MAT_CHIPS_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-chips-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    separatorKeyCodes: [ENTER]\n  })\n});\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = /*#__PURE__*/new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = /*#__PURE__*/new InjectionToken('MatChipTrailingIcon');\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = /*#__PURE__*/new InjectionToken('MatChipRemove');\n/**\n * Injection token used to avoid a circular dependency between the `MatChip` and `MatChipAction`.\n */\nconst MAT_CHIP = /*#__PURE__*/new InjectionToken('MatChip');\n\n/**\n * Section within a chip.\n * @docs-private\n */\nlet MatChipAction = /*#__PURE__*/(() => {\n  class MatChipAction {\n    _elementRef = inject(ElementRef);\n    _parentChip = inject(MAT_CHIP);\n    /** Whether the action is interactive. */\n    isInteractive = true;\n    /** Whether this is the primary action in the chip. */\n    _isPrimary = true;\n    /** Whether the action is disabled. */\n    get disabled() {\n      return this._disabled || this._parentChip?.disabled || false;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    _disabled = false;\n    /** Tab index of the action. */\n    tabIndex = -1;\n    /**\n     * Private API to allow focusing this chip when it is disabled.\n     */\n    _allowFocusWhenDisabled = false;\n    /**\n     * Determine the value of the disabled attribute for this chip action.\n     */\n    _getDisabledAttribute() {\n      // When this chip action is disabled and focusing disabled chips is not permitted, return empty\n      // string to indicate that disabled attribute should be included.\n      return this.disabled && !this._allowFocusWhenDisabled ? '' : null;\n    }\n    /**\n     * Determine the value of the tabindex attribute for this chip action.\n     */\n    _getTabindex() {\n      return this.disabled && !this._allowFocusWhenDisabled || !this.isInteractive ? null : this.tabIndex.toString();\n    }\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n      if (this._elementRef.nativeElement.nodeName === 'BUTTON') {\n        this._elementRef.nativeElement.setAttribute('type', 'button');\n      }\n    }\n    focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    _handleClick(event) {\n      if (!this.disabled && this.isInteractive && this._isPrimary) {\n        event.preventDefault();\n        this._parentChip._handlePrimaryActionInteraction();\n      }\n    }\n    _handleKeydown(event) {\n      if ((event.keyCode === ENTER || event.keyCode === SPACE) && !this.disabled && this.isInteractive && this._isPrimary && !this._parentChip._isEditing) {\n        event.preventDefault();\n        this._parentChip._handlePrimaryActionInteraction();\n      }\n    }\n    static ɵfac = function MatChipAction_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipAction)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatChipAction,\n      selectors: [[\"\", \"matChipAction\", \"\"]],\n      hostAttrs: [1, \"mdc-evolution-chip__action\", \"mat-mdc-chip-action\"],\n      hostVars: 9,\n      hostBindings: function MatChipAction_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatChipAction_click_HostBindingHandler($event) {\n            return ctx._handleClick($event);\n          })(\"keydown\", function MatChipAction_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"tabindex\", ctx._getTabindex())(\"disabled\", ctx._getDisabledAttribute())(\"aria-disabled\", ctx.disabled);\n          i0.ɵɵclassProp(\"mdc-evolution-chip__action--primary\", ctx._isPrimary)(\"mdc-evolution-chip__action--presentational\", !ctx.isInteractive)(\"mdc-evolution-chip__action--trailing\", !ctx._isPrimary);\n        }\n      },\n      inputs: {\n        isInteractive: \"isInteractive\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        tabIndex: [2, \"tabIndex\", \"tabIndex\", value => value == null ? -1 : numberAttribute(value)],\n        _allowFocusWhenDisabled: \"_allowFocusWhenDisabled\"\n      }\n    });\n  }\n  return MatChipAction;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Avatar image within a chip. */\nlet MatChipAvatar = /*#__PURE__*/(() => {\n  class MatChipAvatar {\n    static ɵfac = function MatChipAvatar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipAvatar)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatChipAvatar,\n      selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n      hostAttrs: [\"role\", \"img\", 1, \"mat-mdc-chip-avatar\", \"mdc-evolution-chip__icon\", \"mdc-evolution-chip__icon--primary\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }])]\n    });\n  }\n  return MatChipAvatar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Non-interactive trailing icon in a chip. */\nlet MatChipTrailingIcon = /*#__PURE__*/(() => {\n  class MatChipTrailingIcon extends MatChipAction {\n    /**\n     * MDC considers all trailing actions as a remove icon,\n     * but we support non-interactive trailing icons.\n     */\n    isInteractive = false;\n    _isPrimary = false;\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatChipTrailingIcon_BaseFactory;\n      return function MatChipTrailingIcon_Factory(__ngFactoryType__) {\n        return (ɵMatChipTrailingIcon_BaseFactory || (ɵMatChipTrailingIcon_BaseFactory = i0.ɵɵgetInheritedFactory(MatChipTrailingIcon)))(__ngFactoryType__ || MatChipTrailingIcon);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatChipTrailingIcon,\n      selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n      hostAttrs: [\"aria-hidden\", \"true\", 1, \"mat-mdc-chip-trailing-icon\", \"mdc-evolution-chip__icon\", \"mdc-evolution-chip__icon--trailing\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatChipTrailingIcon;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n * ```\n * <mat-chip>\n *   <mat-icon matChipRemove>cancel</mat-icon>\n * </mat-chip>\n * ```\n */\nlet MatChipRemove = /*#__PURE__*/(() => {\n  class MatChipRemove extends MatChipAction {\n    _isPrimary = false;\n    _handleClick(event) {\n      if (!this.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        this._parentChip.remove();\n      }\n    }\n    _handleKeydown(event) {\n      if ((event.keyCode === ENTER || event.keyCode === SPACE) && !this.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        this._parentChip.remove();\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatChipRemove_BaseFactory;\n      return function MatChipRemove_Factory(__ngFactoryType__) {\n        return (ɵMatChipRemove_BaseFactory || (ɵMatChipRemove_BaseFactory = i0.ɵɵgetInheritedFactory(MatChipRemove)))(__ngFactoryType__ || MatChipRemove);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatChipRemove,\n      selectors: [[\"\", \"matChipRemove\", \"\"]],\n      hostAttrs: [\"role\", \"button\", 1, \"mat-mdc-chip-remove\", \"mat-mdc-chip-trailing-icon\", \"mat-focus-indicator\", \"mdc-evolution-chip__icon\", \"mdc-evolution-chip__icon--trailing\"],\n      hostVars: 1,\n      hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"aria-hidden\", null);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatChipRemove;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\nlet MatChip = /*#__PURE__*/(() => {\n  class MatChip {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _focusMonitor = inject(FocusMonitor);\n    _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n      optional: true\n    });\n    _document = inject(DOCUMENT);\n    /** Emits when the chip is focused. */\n    _onFocus = new Subject();\n    /** Emits when the chip is blurred. */\n    _onBlur = new Subject();\n    /** Whether this chip is a basic (unstyled) chip. */\n    _isBasicChip;\n    /** Role for the root of the chip. */\n    role = null;\n    /** Whether the chip has focus. */\n    _hasFocusInternal = false;\n    /** Whether moving focus into the chip is pending. */\n    _pendingFocus;\n    /** Subscription to changes in the chip's actions. */\n    _actionChanges;\n    /** Whether animations for the chip are enabled. */\n    _animationsDisabled;\n    /** All avatars present in the chip. */\n    _allLeadingIcons;\n    /** All trailing icons present in the chip. */\n    _allTrailingIcons;\n    /** All remove icons present in the chip. */\n    _allRemoveIcons;\n    _hasFocus() {\n      return this._hasFocusInternal;\n    }\n    /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n    id = inject(_IdGenerator).getId('mat-mdc-chip-');\n    // TODO(#26104): Consider deprecating and using `_computeAriaAccessibleName` instead.\n    // `ariaLabel` may be unnecessary, and `_computeAriaAccessibleName` only supports\n    // datepicker's use case.\n    /** ARIA label for the content of the chip. */\n    ariaLabel = null;\n    // TODO(#26104): Consider deprecating and using `_computeAriaAccessibleName` instead.\n    // `ariaDescription` may be unnecessary, and `_computeAriaAccessibleName` only supports\n    // datepicker's use case.\n    /** ARIA description for the content of the chip. */\n    ariaDescription = null;\n    /** Id of a span that contains this chip's aria description. */\n    _ariaDescriptionId = `${this.id}-aria-description`;\n    /** Whether the chip list is disabled. */\n    _chipListDisabled = false;\n    _textElement;\n    /**\n     * The value of the chip. Defaults to the content inside\n     * the `mat-mdc-chip-action-label` element.\n     */\n    get value() {\n      return this._value !== undefined ? this._value : this._textElement.textContent.trim();\n    }\n    set value(value) {\n      this._value = value;\n    }\n    _value;\n    // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n    /**\n     * Theme color of the chip. This API is supported in M2 themes only, it has no\n     * effect in M3 themes. For color customization in M3, see https://material.angular.io/components/chips/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    removable = true;\n    /**\n     * Colors the chip for emphasis as if it were selected.\n     */\n    highlighted = false;\n    /** Whether the ripple effect is disabled or not. */\n    disableRipple = false;\n    /** Whether the chip is disabled. */\n    get disabled() {\n      return this._disabled || this._chipListDisabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    _disabled = false;\n    /** Emitted when a chip is to be removed. */\n    removed = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n    destroyed = new EventEmitter();\n    /** The unstyled chip selector for this component. */\n    basicChipAttrName = 'mat-basic-chip';\n    /** The chip's leading icon. */\n    leadingIcon;\n    /** The chip's trailing icon. */\n    trailingIcon;\n    /** The chip's trailing remove icon. */\n    removeIcon;\n    /** Action receiving the primary set of user interactions. */\n    primaryAction;\n    /**\n     * Handles the lazy creation of the MatChip ripple.\n     * Used to improve initial load time of large applications.\n     */\n    _rippleLoader = inject(MatRippleLoader);\n    _injector = inject(Injector);\n    constructor() {\n      const styleLoader = inject(_CdkPrivateStyleLoader);\n      styleLoader.load(_StructuralStylesLoader);\n      styleLoader.load(_VisuallyHiddenLoader);\n      const animationMode = inject(ANIMATION_MODULE_TYPE, {\n        optional: true\n      });\n      this._animationsDisabled = animationMode === 'NoopAnimations';\n      this._monitorFocus();\n      this._rippleLoader?.configureRipple(this._elementRef.nativeElement, {\n        className: 'mat-mdc-chip-ripple',\n        disabled: this._isRippleDisabled()\n      });\n    }\n    ngOnInit() {\n      // This check needs to happen in `ngOnInit` so the overridden value of\n      // `basicChipAttrName` coming from base classes can be picked up.\n      const element = this._elementRef.nativeElement;\n      this._isBasicChip = element.hasAttribute(this.basicChipAttrName) || element.tagName.toLowerCase() === this.basicChipAttrName;\n    }\n    ngAfterViewInit() {\n      this._textElement = this._elementRef.nativeElement.querySelector('.mat-mdc-chip-action-label');\n      if (this._pendingFocus) {\n        this._pendingFocus = false;\n        this.focus();\n      }\n    }\n    ngAfterContentInit() {\n      // Since the styling depends on the presence of some\n      // actions, we have to mark for check on changes.\n      this._actionChanges = merge(this._allLeadingIcons.changes, this._allTrailingIcons.changes, this._allRemoveIcons.changes).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    ngDoCheck() {\n      this._rippleLoader.setDisabled(this._elementRef.nativeElement, this._isRippleDisabled());\n    }\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      this._rippleLoader?.destroyRipple(this._elementRef.nativeElement);\n      this._actionChanges?.unsubscribe();\n      this.destroyed.emit({\n        chip: this\n      });\n      this.destroyed.complete();\n    }\n    /**\n     * Allows for programmatic removal of the chip.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /** Whether or not the ripple should be disabled. */\n    _isRippleDisabled() {\n      return this.disabled || this.disableRipple || this._animationsDisabled || this._isBasicChip || !!this._globalRippleOptions?.disabled;\n    }\n    /** Returns whether the chip has a trailing icon. */\n    _hasTrailingIcon() {\n      return !!(this.trailingIcon || this.removeIcon);\n    }\n    /** Handles keyboard events on the chip. */\n    _handleKeydown(event) {\n      // Ignore backspace events where the user is holding down the key\n      // so that we don't accidentally remove too many chips.\n      if (event.keyCode === BACKSPACE && !event.repeat || event.keyCode === DELETE) {\n        event.preventDefault();\n        this.remove();\n      }\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n      if (!this.disabled) {\n        // If `focus` is called before `ngAfterViewInit`, we won't have access to the primary action.\n        // This can happen if the consumer tries to focus a chip immediately after it is added.\n        // Queue the method to be called again on init.\n        if (this.primaryAction) {\n          this.primaryAction.focus();\n        } else {\n          this._pendingFocus = true;\n        }\n      }\n    }\n    /** Gets the action that contains a specific target node. */\n    _getSourceAction(target) {\n      return this._getActions().find(action => {\n        const element = action._elementRef.nativeElement;\n        return element === target || element.contains(target);\n      });\n    }\n    /** Gets all of the actions within the chip. */\n    _getActions() {\n      const result = [];\n      if (this.primaryAction) {\n        result.push(this.primaryAction);\n      }\n      if (this.removeIcon) {\n        result.push(this.removeIcon);\n      }\n      if (this.trailingIcon) {\n        result.push(this.trailingIcon);\n      }\n      return result;\n    }\n    /** Handles interactions with the primary action of the chip. */\n    _handlePrimaryActionInteraction() {\n      // Empty here, but is overwritten in child classes.\n    }\n    /** Starts the focus monitoring process on the chip. */\n    _monitorFocus() {\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n        const hasFocus = origin !== null;\n        if (hasFocus !== this._hasFocusInternal) {\n          this._hasFocusInternal = hasFocus;\n          if (hasFocus) {\n            this._onFocus.next({\n              chip: this\n            });\n          } else {\n            // When animations are enabled, Angular may end up removing the chip from the DOM a little\n            // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n            // that moves focus to the next item. To work around the issue, we defer marking the chip\n            // as not focused until after the next render.\n            this._changeDetectorRef.markForCheck();\n            setTimeout(() => this._ngZone.run(() => this._onBlur.next({\n              chip: this\n            })));\n          }\n        }\n      });\n    }\n    static ɵfac = function MatChip_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChip)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatChip,\n      selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n      contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.leadingIcon = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allLeadingIcons = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allTrailingIcons = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allRemoveIcons = _t);\n        }\n      },\n      viewQuery: function MatChip_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatChipAction, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.primaryAction = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-chip\"],\n      hostVars: 31,\n      hostBindings: function MatChip_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"role\", ctx.role)(\"aria-label\", ctx.ariaLabel);\n          i0.ɵɵclassMap(\"mat-\" + (ctx.color || \"primary\"));\n          i0.ɵɵclassProp(\"mdc-evolution-chip\", !ctx._isBasicChip)(\"mdc-evolution-chip--disabled\", ctx.disabled)(\"mdc-evolution-chip--with-trailing-action\", ctx._hasTrailingIcon())(\"mdc-evolution-chip--with-primary-graphic\", ctx.leadingIcon)(\"mdc-evolution-chip--with-primary-icon\", ctx.leadingIcon)(\"mdc-evolution-chip--with-avatar\", ctx.leadingIcon)(\"mat-mdc-chip-with-avatar\", ctx.leadingIcon)(\"mat-mdc-chip-highlighted\", ctx.highlighted)(\"mat-mdc-chip-disabled\", ctx.disabled)(\"mat-mdc-basic-chip\", ctx._isBasicChip)(\"mat-mdc-standard-chip\", !ctx._isBasicChip)(\"mat-mdc-chip-with-trailing-icon\", ctx._hasTrailingIcon())(\"_mat-animation-noopable\", ctx._animationsDisabled);\n        }\n      },\n      inputs: {\n        role: \"role\",\n        id: \"id\",\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        ariaDescription: [0, \"aria-description\", \"ariaDescription\"],\n        value: \"value\",\n        color: \"color\",\n        removable: [2, \"removable\", \"removable\", booleanAttribute],\n        highlighted: [2, \"highlighted\", \"highlighted\", booleanAttribute],\n        disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n      },\n      outputs: {\n        removed: \"removed\",\n        destroyed: \"destroyed\"\n      },\n      exportAs: [\"matChip\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_CHIP,\n        useExisting: MatChip\n      }])],\n      ngContentSelectors: _c1,\n      decls: 8,\n      vars: 3,\n      consts: [[1, \"mat-mdc-chip-focus-overlay\"], [1, \"mdc-evolution-chip__cell\", \"mdc-evolution-chip__cell--primary\"], [\"matChipAction\", \"\", 3, \"isInteractive\"], [1, \"mdc-evolution-chip__graphic\", \"mat-mdc-chip-graphic\"], [1, \"mdc-evolution-chip__text-label\", \"mat-mdc-chip-action-label\"], [1, \"mat-mdc-chip-primary-focus-indicator\", \"mat-focus-indicator\"], [1, \"mdc-evolution-chip__cell\", \"mdc-evolution-chip__cell--trailing\"]],\n      template: function MatChip_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵelement(0, \"span\", 0);\n          i0.ɵɵelementStart(1, \"span\", 1)(2, \"span\", 2);\n          i0.ɵɵtemplate(3, MatChip_Conditional_3_Template, 2, 0, \"span\", 3);\n          i0.ɵɵelementStart(4, \"span\", 4);\n          i0.ɵɵprojection(5);\n          i0.ɵɵelement(6, \"span\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(7, MatChip_Conditional_7_Template, 2, 0, \"span\", 6);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"isInteractive\", false);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.leadingIcon ? 3 : -1);\n          i0.ɵɵadvance(4);\n          i0.ɵɵconditional(ctx._hasTrailingIcon() ? 7 : -1);\n        }\n      },\n      dependencies: [MatChipAction],\n      styles: [\".mdc-evolution-chip,.mdc-evolution-chip__cell,.mdc-evolution-chip__action{display:inline-flex;align-items:center}.mdc-evolution-chip{position:relative;max-width:100%}.mdc-evolution-chip__cell,.mdc-evolution-chip__action{height:100%}.mdc-evolution-chip__cell--primary{flex-basis:100%;overflow-x:hidden}.mdc-evolution-chip__cell--trailing{flex:1 0 auto}.mdc-evolution-chip__action{align-items:center;background:none;border:none;box-sizing:content-box;cursor:pointer;display:inline-flex;justify-content:center;outline:none;padding:0;text-decoration:none;color:inherit}.mdc-evolution-chip__action--presentational{cursor:auto}.mdc-evolution-chip--disabled,.mdc-evolution-chip__action:disabled{pointer-events:none}@media(forced-colors: active){.mdc-evolution-chip--disabled,.mdc-evolution-chip__action:disabled{forced-color-adjust:none}}.mdc-evolution-chip__action--primary{font:inherit;letter-spacing:inherit;white-space:inherit;overflow-x:hidden}.mat-mdc-standard-chip .mdc-evolution-chip__action--primary::before{border-width:var(--mdc-chip-outline-width, 1px);border-radius:var(--mdc-chip-container-shape-radius, 8px);box-sizing:border-box;content:\\\"\\\";height:100%;left:0;position:absolute;pointer-events:none;top:0;width:100%;z-index:1;border-style:solid}.mat-mdc-standard-chip .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:12px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:0;padding-right:12px}[dir=rtl] .mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:0}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__action--primary::before{border-color:var(--mdc-chip-outline-color, var(--mat-sys-outline))}.mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational):not(.mdc-ripple-upgraded):focus::before{border-color:var(--mdc-chip-focus-outline-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__action--primary::before{border-color:var(--mdc-chip-disabled-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 12%, transparent))}.mat-mdc-standard-chip.mdc-evolution-chip--selected .mdc-evolution-chip__action--primary::before{border-width:var(--mdc-chip-flat-selected-outline-width, 0)}.mat-mdc-basic-chip .mdc-evolution-chip__action--primary{font:inherit}.mat-mdc-standard-chip.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:0}[dir=rtl] .mat-mdc-standard-chip.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:12px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}[dir=rtl] .mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:0;padding-right:12px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__action--primary{padding-left:12px;padding-right:0}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--primary{padding-left:0;padding-right:0}.mdc-evolution-chip__action--trailing{position:relative;overflow:visible}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__action--trailing{color:var(--mdc-chip-with-trailing-icon-trailing-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__action--trailing{color:var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-color, var(--mat-sys-on-surface))}.mat-mdc-standard-chip.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__action--trailing{padding-left:8px;padding-right:8px}.mdc-evolution-chip__text-label{-webkit-user-select:none;user-select:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.mat-mdc-standard-chip .mdc-evolution-chip__text-label{font-family:var(--mdc-chip-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mdc-chip-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mdc-chip-label-text-size, var(--mat-sys-label-large-size));font-weight:var(--mdc-chip-label-text-weight, var(--mat-sys-label-large-weight));letter-spacing:var(--mdc-chip-label-text-tracking, var(--mat-sys-label-large-tracking))}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__text-label{color:var(--mdc-chip-label-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--selected:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__text-label{color:var(--mdc-chip-selected-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__text-label,.mat-mdc-standard-chip.mdc-evolution-chip--selected.mdc-evolution-chip--disabled .mdc-evolution-chip__text-label{color:var(--mdc-chip-disabled-label-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mdc-evolution-chip__graphic{align-items:center;display:inline-flex;justify-content:center;overflow:hidden;pointer-events:none;position:relative;flex:1 0 auto}.mat-mdc-standard-chip .mdc-evolution-chip__graphic{width:var(--mdc-chip-with-avatar-avatar-size, 24px);height:var(--mdc-chip-with-avatar-avatar-size, 24px);font-size:var(--mdc-chip-with-avatar-avatar-size, 24px)}.mdc-evolution-chip--selecting .mdc-evolution-chip__graphic{transition:width 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-evolution-chip--selectable:not(.mdc-evolution-chip--selected):not(.mdc-evolution-chip--with-primary-icon) .mdc-evolution-chip__graphic{width:0}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__graphic{padding-left:6px;padding-right:6px}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__graphic{padding-left:4px;padding-right:8px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic .mdc-evolution-chip__graphic{padding-left:8px;padding-right:4px}.mat-mdc-standard-chip.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__graphic{padding-left:6px;padding-right:6px}.mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__graphic{padding-left:4px;padding-right:8px}[dir=rtl] .mdc-evolution-chip--with-avatar.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action .mdc-evolution-chip__graphic{padding-left:8px;padding-right:4px}.mdc-evolution-chip__checkmark{position:absolute;opacity:0;top:50%;left:50%;height:20px;width:20px}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__checkmark{color:var(--mdc-chip-with-icon-selected-icon-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__checkmark{color:var(--mdc-chip-with-icon-disabled-icon-color, var(--mat-sys-on-surface))}.mdc-evolution-chip--selecting .mdc-evolution-chip__checkmark{transition:transform 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);transform:translate(-75%, -50%)}.mdc-evolution-chip--selected .mdc-evolution-chip__checkmark{transform:translate(-50%, -50%);opacity:1}.mdc-evolution-chip__checkmark-svg{display:block}.mdc-evolution-chip__checkmark-path{stroke-width:2px;stroke-dasharray:29.7833385;stroke-dashoffset:29.7833385;stroke:currentColor}.mdc-evolution-chip--selecting .mdc-evolution-chip__checkmark-path{transition:stroke-dashoffset 150ms 45ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-evolution-chip--selected .mdc-evolution-chip__checkmark-path{stroke-dashoffset:0}@media(forced-colors: active){.mdc-evolution-chip__checkmark-path{stroke:CanvasText !important}}.mat-mdc-standard-chip .mdc-evolution-chip__icon--trailing{height:18px;width:18px;font-size:18px}.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing.mat-mdc-chip-remove{opacity:calc(var(--mat-chip-trailing-action-opacity, 1)*var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity, 0.38))}.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing.mat-mdc-chip-remove:focus{opacity:calc(var(--mat-chip-trailing-action-focus-opacity, 1)*var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity, 0.38))}.mat-mdc-standard-chip{border-radius:var(--mdc-chip-container-shape-radius, 8px);height:var(--mdc-chip-container-height, 32px)}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled){background-color:var(--mdc-chip-elevated-container-color, transparent)}.mat-mdc-standard-chip.mdc-evolution-chip--disabled{background-color:var(--mdc-chip-elevated-disabled-container-color)}.mat-mdc-standard-chip.mdc-evolution-chip--selected:not(.mdc-evolution-chip--disabled){background-color:var(--mdc-chip-elevated-selected-container-color, var(--mat-sys-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--selected.mdc-evolution-chip--disabled{background-color:var(--mdc-chip-flat-disabled-selected-container-color, color-mix(in srgb, var(--mat-sys-on-surface) 12%, transparent))}@media(forced-colors: active){.mat-mdc-standard-chip{outline:solid 1px}}.mat-mdc-standard-chip .mdc-evolution-chip__icon--primary{border-radius:var(--mdc-chip-with-avatar-avatar-shape-radius, 24px);width:var(--mdc-chip-with-icon-icon-size, 18px);height:var(--mdc-chip-with-icon-icon-size, 18px);font-size:var(--mdc-chip-with-icon-icon-size, 18px)}.mdc-evolution-chip--selected .mdc-evolution-chip__icon--primary{opacity:0}.mat-mdc-standard-chip:not(.mdc-evolution-chip--disabled) .mdc-evolution-chip__icon--primary{color:var(--mdc-chip-with-icon-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-standard-chip.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--primary{color:var(--mdc-chip-with-icon-disabled-icon-color, var(--mat-sys-on-surface))}.mat-mdc-chip-highlighted{--mdc-chip-with-icon-icon-color:var(--mdc-chip-with-icon-selected-icon-color, var(--mat-sys-on-secondary-container));--mdc-chip-elevated-container-color:var(--mdc-chip-elevated-selected-container-color, var(--mat-sys-secondary-container));--mdc-chip-label-text-color:var(--mdc-chip-selected-label-text-color, var(--mat-sys-on-secondary-container));--mdc-chip-outline-width:var(--mdc-chip-flat-selected-outline-width, 0)}.mat-mdc-chip-focus-overlay{background:var(--mdc-chip-focus-state-layer-color, var(--mat-sys-on-surface-variant))}.mat-mdc-chip-selected .mat-mdc-chip-focus-overlay,.mat-mdc-chip-highlighted .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-selected-focus-state-layer-color, var(--mat-sys-on-secondary-container))}.mat-mdc-chip:hover .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-hover-state-layer-color, var(--mat-sys-on-surface-variant));opacity:var(--mdc-chip-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-chip-focus-overlay .mat-mdc-chip-selected:hover,.mat-mdc-chip-highlighted:hover .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-selected-hover-state-layer-color, var(--mat-sys-on-secondary-container));opacity:var(--mdc-chip-selected-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-chip.cdk-focused .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-focus-state-layer-color, var(--mat-sys-on-surface-variant));opacity:var(--mdc-chip-focus-state-layer-opacity, var(--mat-sys-focus-state-layer-opacity))}.mat-mdc-chip-selected.cdk-focused .mat-mdc-chip-focus-overlay,.mat-mdc-chip-highlighted.cdk-focused .mat-mdc-chip-focus-overlay{background:var(--mdc-chip-selected-focus-state-layer-color, var(--mat-sys-on-secondary-container));opacity:var(--mdc-chip-selected-focus-state-layer-opacity, var(--mat-sys-focus-state-layer-opacity))}.mdc-evolution-chip--disabled:not(.mdc-evolution-chip--selected) .mat-mdc-chip-avatar{opacity:var(--mdc-chip-with-avatar-disabled-avatar-opacity, 0.38)}.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing{opacity:var(--mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity, 0.38)}.mdc-evolution-chip--disabled.mdc-evolution-chip--selected .mdc-evolution-chip__checkmark{opacity:var(--mdc-chip-with-icon-disabled-icon-opacity, 0.38)}.mat-mdc-standard-chip.mdc-evolution-chip--disabled{opacity:var(--mat-chip-disabled-container-opacity, 1)}.mat-mdc-standard-chip.mdc-evolution-chip--selected .mdc-evolution-chip__icon--trailing,.mat-mdc-standard-chip.mat-mdc-chip-highlighted .mdc-evolution-chip__icon--trailing{color:var(--mat-chip-selected-trailing-icon-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip.mdc-evolution-chip--selected.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing,.mat-mdc-standard-chip.mat-mdc-chip-highlighted.mdc-evolution-chip--disabled .mdc-evolution-chip__icon--trailing{color:var(--mat-chip-selected-disabled-trailing-icon-color, var(--mat-sys-on-surface))}.mat-mdc-chip-remove{opacity:var(--mat-chip-trailing-action-opacity, 1)}.mat-mdc-chip-remove:focus{opacity:var(--mat-chip-trailing-action-focus-opacity, 1)}.mat-mdc-chip-remove::after{background-color:var(--mat-chip-trailing-action-state-layer-color, var(--mat-sys-on-surface-variant))}.mat-mdc-chip-remove:hover::after{opacity:var(--mat-chip-trailing-action-hover-state-layer-opacity, var(--mat-sys-hover-state-layer-opacity))}.mat-mdc-chip-remove:focus::after{opacity:var(--mat-chip-trailing-action-focus-state-layer-opacity, var(--mat-sys-focus-state-layer-opacity))}.mat-mdc-chip-selected .mat-mdc-chip-remove::after,.mat-mdc-chip-highlighted .mat-mdc-chip-remove::after{background-color:var(--mat-chip-selected-trailing-action-state-layer-color, var(--mat-sys-on-secondary-container))}.mat-mdc-standard-chip{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-standard-chip .mdc-evolution-chip__cell--primary,.mat-mdc-standard-chip .mdc-evolution-chip__action--primary,.mat-mdc-standard-chip .mat-mdc-chip-action-label{overflow:visible}.mat-mdc-standard-chip .mat-mdc-chip-graphic,.mat-mdc-standard-chip .mat-mdc-chip-trailing-icon{box-sizing:content-box}.mat-mdc-standard-chip._mat-animation-noopable,.mat-mdc-standard-chip._mat-animation-noopable .mdc-evolution-chip__graphic,.mat-mdc-standard-chip._mat-animation-noopable .mdc-evolution-chip__checkmark,.mat-mdc-standard-chip._mat-animation-noopable .mdc-evolution-chip__checkmark-path{transition-duration:1ms;animation-duration:1ms}.mat-mdc-chip-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;opacity:0;border-radius:inherit;transition:opacity 150ms linear}._mat-animation-noopable .mat-mdc-chip-focus-overlay{transition:none}.mat-mdc-basic-chip .mat-mdc-chip-focus-overlay{display:none}.mat-mdc-chip .mat-ripple.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-mdc-chip-avatar{text-align:center;line-height:1;color:var(--mdc-chip-with-icon-icon-color, currentColor)}.mat-mdc-chip{position:relative;z-index:0}.mat-mdc-chip-action-label{text-align:left;z-index:1}[dir=rtl] .mat-mdc-chip-action-label{text-align:right}.mat-mdc-chip.mdc-evolution-chip--with-trailing-action .mat-mdc-chip-action-label{position:relative}.mat-mdc-chip-action-label .mat-mdc-chip-primary-focus-indicator{position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none}.mat-mdc-chip-action-label .mat-focus-indicator::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-mdc-chip-remove::before{margin:calc(var(--mat-focus-indicator-border-width, 3px)*-1);left:8px;right:8px}.mat-mdc-chip-remove::after{content:\\\"\\\";display:block;opacity:0;position:absolute;top:-3px;bottom:-3px;left:5px;right:5px;border-radius:50%;box-sizing:border-box;padding:12px;margin:-12px;background-clip:content-box}.mat-mdc-chip-remove .mat-icon{width:18px;height:18px;font-size:18px;box-sizing:content-box}.mat-chip-edit-input{cursor:text;display:inline-block;color:inherit;outline:0}@media(forced-colors: active){.mat-mdc-chip-selected:not(.mat-mdc-chip-multiple){outline-width:3px}}.mat-mdc-chip-action:focus .mat-focus-indicator::before{content:\\\"\\\"}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatChip;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nclass MatChipSelectionChange {\n  source;\n  selected;\n  isUserInput;\n  constructor(/** Reference to the chip that emitted the event. */\n  source, /** Whether the chip that emitted the event is selected. */\n  selected, /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * An extension of the MatChip component that supports chip selection. Used with MatChipListbox.\n *\n * Unlike other chips, the user can focus on disabled chip options inside a MatChipListbox. The\n * user cannot click disabled chips.\n */\nlet MatChipOption = /*#__PURE__*/(() => {\n  class MatChipOption extends MatChip {\n    /** Default chip options. */\n    _defaultOptions = inject(MAT_CHIPS_DEFAULT_OPTIONS, {\n      optional: true\n    });\n    /** Whether the chip list is selectable. */\n    chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n    _chipListMultiple = false;\n    /** Whether the chip list hides single-selection indicator. */\n    _chipListHideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /**\n     * Whether or not the chip is selectable.\n     *\n     * When a chip is not selectable, changes to its selected state are always\n     * ignored. By default an option chip is selectable, and it becomes\n     * non-selectable if its parent chip list is not selectable.\n     */\n    get selectable() {\n      return this._selectable && this.chipListSelectable;\n    }\n    set selectable(value) {\n      this._selectable = value;\n      this._changeDetectorRef.markForCheck();\n    }\n    _selectable = true;\n    /** Whether the chip is selected. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      this._setSelectedState(value, false, true);\n    }\n    _selected = false;\n    /**\n     * The ARIA selected applied to the chip. Conforms to WAI ARIA best practices for listbox\n     * interaction patterns.\n     *\n     * From [WAI ARIA Listbox authoring practices guide](\n     * https://www.w3.org/WAI/ARIA/apg/patterns/listbox/):\n     *  \"If any options are selected, each selected option has either aria-selected or aria-checked\n     *  set to true. All options that are selectable but not selected have either aria-selected or\n     *  aria-checked set to false.\"\n     *\n     * Set `aria-selected=\"false\"` on not-selected listbox options that are selectable to fix\n     * VoiceOver reading every option as \"selected\" (#25736).\n     */\n    get ariaSelected() {\n      return this.selectable ? this.selected.toString() : null;\n    }\n    /** The unstyled chip selector for this component. */\n    basicChipAttrName = 'mat-basic-chip-option';\n    /** Emitted when the chip is selected or deselected. */\n    selectionChange = new EventEmitter();\n    ngOnInit() {\n      super.ngOnInit();\n      this.role = 'presentation';\n    }\n    /** Selects the chip. */\n    select() {\n      this._setSelectedState(true, false, true);\n    }\n    /** Deselects the chip. */\n    deselect() {\n      this._setSelectedState(false, false, true);\n    }\n    /** Selects this chip and emits userInputSelection event */\n    selectViaInteraction() {\n      this._setSelectedState(true, true, true);\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n      this._setSelectedState(!this.selected, isUserInput, true);\n      return this.selected;\n    }\n    _handlePrimaryActionInteraction() {\n      if (!this.disabled) {\n        // Interacting with the primary action implies that the chip already has focus, however\n        // there's a bug in Safari where focus ends up lingering on the previous chip (see #27544).\n        // We work around it by explicitly focusing the primary action of the current chip.\n        this.focus();\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n      }\n    }\n    _hasLeadingGraphic() {\n      if (this.leadingIcon) {\n        return true;\n      }\n      // The checkmark graphic communicates selected state for both single-select and multi-select.\n      // Include checkmark in single-select to fix a11y issue where selected state is communicated\n      // visually only using color (#25886).\n      return !this._chipListHideSingleSelectionIndicator || this._chipListMultiple;\n    }\n    _setSelectedState(isSelected, isUserInput, emitEvent) {\n      if (isSelected !== this.selected) {\n        this._selected = isSelected;\n        if (emitEvent) {\n          this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this.selected\n          });\n        }\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatChipOption_BaseFactory;\n      return function MatChipOption_Factory(__ngFactoryType__) {\n        return (ɵMatChipOption_BaseFactory || (ɵMatChipOption_BaseFactory = i0.ɵɵgetInheritedFactory(MatChipOption)))(__ngFactoryType__ || MatChipOption);\n      };\n    })();\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatChipOption,\n      selectors: [[\"mat-basic-chip-option\"], [\"\", \"mat-basic-chip-option\", \"\"], [\"mat-chip-option\"], [\"\", \"mat-chip-option\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-chip\", \"mat-mdc-chip-option\"],\n      hostVars: 37,\n      hostBindings: function MatChipOption_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"tabindex\", null)(\"aria-label\", null)(\"aria-description\", null)(\"role\", ctx.role);\n          i0.ɵɵclassProp(\"mdc-evolution-chip\", !ctx._isBasicChip)(\"mdc-evolution-chip--filter\", !ctx._isBasicChip)(\"mdc-evolution-chip--selectable\", !ctx._isBasicChip)(\"mat-mdc-chip-selected\", ctx.selected)(\"mat-mdc-chip-multiple\", ctx._chipListMultiple)(\"mat-mdc-chip-disabled\", ctx.disabled)(\"mat-mdc-chip-with-avatar\", ctx.leadingIcon)(\"mdc-evolution-chip--disabled\", ctx.disabled)(\"mdc-evolution-chip--selected\", ctx.selected)(\"mdc-evolution-chip--selecting\", !ctx._animationsDisabled)(\"mdc-evolution-chip--with-trailing-action\", ctx._hasTrailingIcon())(\"mdc-evolution-chip--with-primary-icon\", ctx.leadingIcon)(\"mdc-evolution-chip--with-primary-graphic\", ctx._hasLeadingGraphic())(\"mdc-evolution-chip--with-avatar\", ctx.leadingIcon)(\"mat-mdc-chip-highlighted\", ctx.highlighted)(\"mat-mdc-chip-with-trailing-icon\", ctx._hasTrailingIcon());\n        }\n      },\n      inputs: {\n        selectable: [2, \"selectable\", \"selectable\", booleanAttribute],\n        selected: [2, \"selected\", \"selected\", booleanAttribute]\n      },\n      outputs: {\n        selectionChange: \"selectionChange\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatChip,\n        useExisting: MatChipOption\n      }, {\n        provide: MAT_CHIP,\n        useExisting: MatChipOption\n      }]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c1,\n      decls: 10,\n      vars: 8,\n      consts: [[1, \"mat-mdc-chip-focus-overlay\"], [1, \"mdc-evolution-chip__cell\", \"mdc-evolution-chip__cell--primary\"], [\"matChipAction\", \"\", \"role\", \"option\", 3, \"_allowFocusWhenDisabled\"], [1, \"mdc-evolution-chip__graphic\", \"mat-mdc-chip-graphic\"], [1, \"mdc-evolution-chip__text-label\", \"mat-mdc-chip-action-label\"], [1, \"mat-mdc-chip-primary-focus-indicator\", \"mat-focus-indicator\"], [1, \"mdc-evolution-chip__cell\", \"mdc-evolution-chip__cell--trailing\"], [1, \"cdk-visually-hidden\", 3, \"id\"], [1, \"mdc-evolution-chip__checkmark\"], [\"viewBox\", \"-2 -3 30 30\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mdc-evolution-chip__checkmark-svg\"], [\"fill\", \"none\", \"stroke\", \"currentColor\", \"d\", \"M1.73,12.91 8.1,19.28 22.79,4.59\", 1, \"mdc-evolution-chip__checkmark-path\"]],\n      template: function MatChipOption_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵelement(0, \"span\", 0);\n          i0.ɵɵelementStart(1, \"span\", 1)(2, \"button\", 2);\n          i0.ɵɵtemplate(3, MatChipOption_Conditional_3_Template, 5, 0, \"span\", 3);\n          i0.ɵɵelementStart(4, \"span\", 4);\n          i0.ɵɵprojection(5);\n          i0.ɵɵelement(6, \"span\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(7, MatChipOption_Conditional_7_Template, 2, 0, \"span\", 6);\n          i0.ɵɵelementStart(8, \"span\", 7);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"_allowFocusWhenDisabled\", true);\n          i0.ɵɵattribute(\"aria-selected\", ctx.ariaSelected)(\"aria-label\", ctx.ariaLabel)(\"aria-describedby\", ctx._ariaDescriptionId);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx._hasLeadingGraphic() ? 3 : -1);\n          i0.ɵɵadvance(4);\n          i0.ɵɵconditional(ctx._hasTrailingIcon() ? 7 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._ariaDescriptionId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.ariaDescription);\n        }\n      },\n      dependencies: [MatChipAction],\n      styles: [_c2],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatChipOption;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A directive that makes a span editable and exposes functions to modify and retrieve the\n * element's contents.\n */\nlet MatChipEditInput = /*#__PURE__*/(() => {\n  class MatChipEditInput {\n    _elementRef = inject(ElementRef);\n    _document = inject(DOCUMENT);\n    constructor() {}\n    initialize(initialValue) {\n      this.getNativeElement().focus();\n      this.setValue(initialValue);\n    }\n    getNativeElement() {\n      return this._elementRef.nativeElement;\n    }\n    setValue(value) {\n      this.getNativeElement().textContent = value;\n      this._moveCursorToEndOfInput();\n    }\n    getValue() {\n      return this.getNativeElement().textContent || '';\n    }\n    _moveCursorToEndOfInput() {\n      const range = this._document.createRange();\n      range.selectNodeContents(this.getNativeElement());\n      range.collapse(false);\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n    static ɵfac = function MatChipEditInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipEditInput)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatChipEditInput,\n      selectors: [[\"span\", \"matChipEditInput\", \"\"]],\n      hostAttrs: [\"role\", \"textbox\", \"tabindex\", \"-1\", \"contenteditable\", \"true\", 1, \"mat-chip-edit-input\"]\n    });\n  }\n  return MatChipEditInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\nlet MatChipRow = /*#__PURE__*/(() => {\n  class MatChipRow extends MatChip {\n    basicChipAttrName = 'mat-basic-chip-row';\n    /**\n     * The editing action has to be triggered in a timeout. While we're waiting on it, a blur\n     * event might occur which will interrupt the editing. This flag is used to avoid interruptions\n     * while the editing action is being initialized.\n     */\n    _editStartPending = false;\n    editable = false;\n    /** Emitted when the chip is edited. */\n    edited = new EventEmitter();\n    /** The default chip edit input that is used if none is projected into this chip row. */\n    defaultEditInput;\n    /** The projected chip edit input. */\n    contentEditInput;\n    _isEditing = false;\n    constructor() {\n      super();\n      this.role = 'row';\n      this._onBlur.pipe(takeUntil(this.destroyed)).subscribe(() => {\n        if (this._isEditing && !this._editStartPending) {\n          this._onEditFinish();\n        }\n      });\n    }\n    _hasTrailingIcon() {\n      // The trailing icon is hidden while editing.\n      return !this._isEditing && super._hasTrailingIcon();\n    }\n    /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n    _handleFocus() {\n      if (!this._isEditing && !this.disabled) {\n        this.focus();\n      }\n    }\n    _handleKeydown(event) {\n      if (event.keyCode === ENTER && !this.disabled) {\n        if (this._isEditing) {\n          event.preventDefault();\n          this._onEditFinish();\n        } else if (this.editable) {\n          this._startEditing(event);\n        }\n      } else if (this._isEditing) {\n        // Stop the event from reaching the chip set in order to avoid navigating.\n        event.stopPropagation();\n      } else {\n        super._handleKeydown(event);\n      }\n    }\n    _handleDoubleclick(event) {\n      if (!this.disabled && this.editable) {\n        this._startEditing(event);\n      }\n    }\n    _startEditing(event) {\n      if (!this.primaryAction || this.removeIcon && this._getSourceAction(event.target) === this.removeIcon) {\n        return;\n      }\n      // The value depends on the DOM so we need to extract it before we flip the flag.\n      const value = this.value;\n      this._isEditing = this._editStartPending = true;\n      // Defer initializing the input until after it has been added to the DOM.\n      afterNextRender(() => {\n        this._getEditInput().initialize(value);\n        this._editStartPending = false;\n      }, {\n        injector: this._injector\n      });\n    }\n    _onEditFinish() {\n      this._isEditing = this._editStartPending = false;\n      this.edited.emit({\n        chip: this,\n        value: this._getEditInput().getValue()\n      });\n      // If the edit input is still focused or focus was returned to the body after it was destroyed,\n      // return focus to the chip contents.\n      if (this._document.activeElement === this._getEditInput().getNativeElement() || this._document.activeElement === this._document.body) {\n        this.primaryAction.focus();\n      }\n    }\n    _isRippleDisabled() {\n      return super._isRippleDisabled() || this._isEditing;\n    }\n    /**\n     * Gets the projected chip edit input, or the default input if none is projected in. One of these\n     * two values is guaranteed to be defined.\n     */\n    _getEditInput() {\n      return this.contentEditInput || this.defaultEditInput;\n    }\n    static ɵfac = function MatChipRow_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipRow)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatChipRow,\n      selectors: [[\"mat-chip-row\"], [\"\", \"mat-chip-row\", \"\"], [\"mat-basic-chip-row\"], [\"\", \"mat-basic-chip-row\", \"\"]],\n      contentQueries: function MatChipRow_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatChipEditInput, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentEditInput = _t.first);\n        }\n      },\n      viewQuery: function MatChipRow_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatChipEditInput, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.defaultEditInput = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-chip\", \"mat-mdc-chip-row\", \"mdc-evolution-chip\"],\n      hostVars: 27,\n      hostBindings: function MatChipRow_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function MatChipRow_focus_HostBindingHandler() {\n            return ctx._handleFocus();\n          })(\"dblclick\", function MatChipRow_dblclick_HostBindingHandler($event) {\n            return ctx._handleDoubleclick($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-description\", null)(\"role\", ctx.role);\n          i0.ɵɵclassProp(\"mat-mdc-chip-with-avatar\", ctx.leadingIcon)(\"mat-mdc-chip-disabled\", ctx.disabled)(\"mat-mdc-chip-editing\", ctx._isEditing)(\"mat-mdc-chip-editable\", ctx.editable)(\"mdc-evolution-chip--disabled\", ctx.disabled)(\"mdc-evolution-chip--with-trailing-action\", ctx._hasTrailingIcon())(\"mdc-evolution-chip--with-primary-graphic\", ctx.leadingIcon)(\"mdc-evolution-chip--with-primary-icon\", ctx.leadingIcon)(\"mdc-evolution-chip--with-avatar\", ctx.leadingIcon)(\"mat-mdc-chip-highlighted\", ctx.highlighted)(\"mat-mdc-chip-with-trailing-icon\", ctx._hasTrailingIcon());\n        }\n      },\n      inputs: {\n        editable: \"editable\"\n      },\n      outputs: {\n        edited: \"edited\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatChip,\n        useExisting: MatChipRow\n      }, {\n        provide: MAT_CHIP,\n        useExisting: MatChipRow\n      }]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c4,\n      decls: 10,\n      vars: 9,\n      consts: [[1, \"mat-mdc-chip-focus-overlay\"], [\"role\", \"gridcell\", \"matChipAction\", \"\", 1, \"mdc-evolution-chip__cell\", \"mdc-evolution-chip__cell--primary\", 3, \"disabled\"], [1, \"mdc-evolution-chip__graphic\", \"mat-mdc-chip-graphic\"], [1, \"mdc-evolution-chip__text-label\", \"mat-mdc-chip-action-label\"], [\"aria-hidden\", \"true\", 1, \"mat-mdc-chip-primary-focus-indicator\", \"mat-focus-indicator\"], [\"role\", \"gridcell\", 1, \"mdc-evolution-chip__cell\", \"mdc-evolution-chip__cell--trailing\"], [1, \"cdk-visually-hidden\", 3, \"id\"], [\"matChipEditInput\", \"\"]],\n      template: function MatChipRow_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c3);\n          i0.ɵɵtemplate(0, MatChipRow_Conditional_0_Template, 1, 0, \"span\", 0);\n          i0.ɵɵelementStart(1, \"span\", 1);\n          i0.ɵɵtemplate(2, MatChipRow_Conditional_2_Template, 2, 0, \"span\", 2);\n          i0.ɵɵelementStart(3, \"span\", 3);\n          i0.ɵɵtemplate(4, MatChipRow_Conditional_4_Template, 2, 1)(5, MatChipRow_Conditional_5_Template, 1, 0);\n          i0.ɵɵelement(6, \"span\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(7, MatChipRow_Conditional_7_Template, 2, 0, \"span\", 5);\n          i0.ɵɵelementStart(8, \"span\", 6);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵconditional(!ctx._isEditing ? 0 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-describedby\", ctx._ariaDescriptionId);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.leadingIcon ? 2 : -1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(ctx._isEditing ? 4 : 5);\n          i0.ɵɵadvance(3);\n          i0.ɵɵconditional(ctx._hasTrailingIcon() ? 7 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._ariaDescriptionId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.ariaDescription);\n        }\n      },\n      dependencies: [MatChipAction, MatChipEditInput],\n      styles: [_c2],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatChipRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\nlet MatChipSet = /*#__PURE__*/(() => {\n  class MatChipSet {\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    /** Index of the last destroyed chip that had focus. */\n    _lastDestroyedFocusedChipIndex = null;\n    /** Used to manage focus within the chip list. */\n    _keyManager;\n    /** Subject that emits when the component has been destroyed. */\n    _destroyed = new Subject();\n    /** Role to use if it hasn't been overwritten by the user. */\n    _defaultRole = 'presentation';\n    /** Combined stream of all of the child chips' focus events. */\n    get chipFocusChanges() {\n      return this._getChipStream(chip => chip._onFocus);\n    }\n    /** Combined stream of all of the child chips' destroy events. */\n    get chipDestroyedChanges() {\n      return this._getChipStream(chip => chip.destroyed);\n    }\n    /** Combined stream of all of the child chips' remove events. */\n    get chipRemovedChanges() {\n      return this._getChipStream(chip => chip.removed);\n    }\n    /** Whether the chip set is disabled. */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._syncChipsState();\n    }\n    _disabled = false;\n    /** Whether the chip list contains chips or not. */\n    get empty() {\n      return !this._chips || this._chips.length === 0;\n    }\n    /** The ARIA role applied to the chip set. */\n    get role() {\n      if (this._explicitRole) {\n        return this._explicitRole;\n      }\n      return this.empty ? null : this._defaultRole;\n    }\n    /** Tabindex of the chip set. */\n    tabIndex = 0;\n    set role(value) {\n      this._explicitRole = value;\n    }\n    _explicitRole = null;\n    /** Whether any of the chips inside of this chip-set has focus. */\n    get focused() {\n      return this._hasFocusedChip();\n    }\n    /** The chips that are part of this chip set. */\n    _chips;\n    /** Flat list of all the actions contained within the chips. */\n    _chipActions = new QueryList();\n    constructor() {}\n    ngAfterViewInit() {\n      this._setUpFocusManagement();\n      this._trackChipSetChanges();\n      this._trackDestroyedFocusedChip();\n    }\n    ngOnDestroy() {\n      this._keyManager?.destroy();\n      this._chipActions.destroy();\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n      return this._chips && this._chips.some(chip => chip._hasFocus());\n    }\n    /** Syncs the chip-set's state with the individual chips. */\n    _syncChipsState() {\n      this._chips?.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n    /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n    focus() {}\n    /** Handles keyboard events on the chip set. */\n    _handleKeydown(event) {\n      if (this._originatesFromChip(event)) {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n      return index >= 0 && index < this._chips.length;\n    }\n    /**\n     * Removes the `tabindex` from the chip set and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the set from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n      const previous = this._elementRef.nativeElement.tabIndex;\n      if (previous !== -1) {\n        // Set the tabindex directly on the element, instead of going through\n        // the data binding, because we aren't guaranteed that change detection\n        // will run quickly enough to allow focus to escape.\n        this._elementRef.nativeElement.tabIndex = -1;\n        // Note that this needs to be a `setTimeout`, because a `Promise.resolve`\n        // doesn't allow enough time for the focus to escape.\n        setTimeout(() => this._elementRef.nativeElement.tabIndex = previous);\n      }\n    }\n    /**\n     * Gets a stream of events from all the chips within the set.\n     * The stream will automatically incorporate any newly-added chips.\n     */\n    _getChipStream(mappingFunction) {\n      return this._chips.changes.pipe(startWith(null), switchMap(() => merge(...this._chips.map(mappingFunction))));\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n      let currentElement = event.target;\n      while (currentElement && currentElement !== this._elementRef.nativeElement) {\n        if (currentElement.classList.contains('mat-mdc-chip')) {\n          return true;\n        }\n        currentElement = currentElement.parentElement;\n      }\n      return false;\n    }\n    /** Sets up the chip set's focus management logic. */\n    _setUpFocusManagement() {\n      // Create a flat `QueryList` containing the actions of all of the chips.\n      // This allows us to navigate both within the chip and move to the next/previous\n      // one using the existing `ListKeyManager`.\n      this._chips.changes.pipe(startWith(this._chips)).subscribe(chips => {\n        const actions = [];\n        chips.forEach(chip => chip._getActions().forEach(action => actions.push(action)));\n        this._chipActions.reset(actions);\n        this._chipActions.notifyOnChanges();\n      });\n      this._keyManager = new FocusKeyManager(this._chipActions).withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr').withHomeAndEnd().skipPredicate(action => this._skipPredicate(action));\n      // Keep the manager active index in sync so that navigation picks\n      // up from the current chip if the user clicks into the list directly.\n      this.chipFocusChanges.pipe(takeUntil(this._destroyed)).subscribe(({\n        chip\n      }) => {\n        const action = chip._getSourceAction(document.activeElement);\n        if (action) {\n          this._keyManager.updateActiveItem(action);\n        }\n      });\n      this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n    }\n    /**\n     * Determines if key manager should avoid putting a given chip action in the tab index. Skip\n     * non-interactive and disabled actions since the user can't do anything with them.\n     */\n    _skipPredicate(action) {\n      // Skip chips that the user cannot interact with. `mat-chip-set` does not permit focusing disabled\n      // chips.\n      return !action.isInteractive || action.disabled;\n    }\n    /** Listens to changes in the chip set and syncs up the state of the individual chips. */\n    _trackChipSetChanges() {\n      this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n        if (this.disabled) {\n          // Since this happens after the content has been\n          // checked, we need to defer it to the next tick.\n          Promise.resolve().then(() => this._syncChipsState());\n        }\n        this._redirectDestroyedChipFocus();\n      });\n    }\n    /** Starts tracking the destroyed chips in order to capture the focused one. */\n    _trackDestroyedFocusedChip() {\n      this.chipDestroyedChanges.pipe(takeUntil(this._destroyed)).subscribe(event => {\n        const chipArray = this._chips.toArray();\n        const chipIndex = chipArray.indexOf(event.chip);\n        // If the focused chip is destroyed, save its index so that we can move focus to the next\n        // chip. We only save the index here, rather than move the focus immediately, because we want\n        // to wait until the chip is removed from the chip list before focusing the next one. This\n        // allows us to keep focus on the same index if the chip gets swapped out.\n        if (this._isValidIndex(chipIndex) && event.chip._hasFocus()) {\n          this._lastDestroyedFocusedChipIndex = chipIndex;\n        }\n      });\n    }\n    /**\n     * Finds the next appropriate chip to move focus to,\n     * if the currently-focused chip is destroyed.\n     */\n    _redirectDestroyedChipFocus() {\n      if (this._lastDestroyedFocusedChipIndex == null) {\n        return;\n      }\n      if (this._chips.length) {\n        const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this._chips.length - 1);\n        const chipToFocus = this._chips.toArray()[newIndex];\n        if (chipToFocus.disabled) {\n          // If we're down to one disabled chip, move focus back to the set.\n          if (this._chips.length === 1) {\n            this.focus();\n          } else {\n            this._keyManager.setPreviousItemActive();\n          }\n        } else {\n          chipToFocus.focus();\n        }\n      } else {\n        this.focus();\n      }\n      this._lastDestroyedFocusedChipIndex = null;\n    }\n    static ɵfac = function MatChipSet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipSet)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatChipSet,\n      selectors: [[\"mat-chip-set\"]],\n      contentQueries: function MatChipSet_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._chips = _t);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-chip-set\", \"mdc-evolution-chip-set\"],\n      hostVars: 1,\n      hostBindings: function MatChipSet_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function MatChipSet_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"role\", ctx.role);\n        }\n      },\n      inputs: {\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        role: \"role\",\n        tabIndex: [2, \"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)]\n      },\n      ngContentSelectors: _c5,\n      decls: 2,\n      vars: 0,\n      consts: [[\"role\", \"presentation\", 1, \"mdc-evolution-chip-set__chips\"]],\n      template: function MatChipSet_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".mat-mdc-chip-set{display:flex}.mat-mdc-chip-set:focus{outline:none}.mat-mdc-chip-set .mdc-evolution-chip-set__chips{min-width:100%;margin-left:-8px;margin-right:0}.mat-mdc-chip-set .mdc-evolution-chip{margin:4px 0 4px 8px}[dir=rtl] .mat-mdc-chip-set .mdc-evolution-chip-set__chips{margin-left:0;margin-right:-8px}[dir=rtl] .mat-mdc-chip-set .mdc-evolution-chip{margin-left:0;margin-right:8px}.mdc-evolution-chip-set__chips{display:flex;flex-flow:wrap;min-width:0}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}.mat-mdc-chip-set-stacked .mdc-evolution-chip__graphic{flex-grow:0}.mat-mdc-chip-set-stacked .mdc-evolution-chip__action--primary{flex-basis:100%;justify-content:start}input.mat-mdc-chip-input{flex:1 0 150px;margin-left:8px}[dir=rtl] input.mat-mdc-chip-input{margin-left:0;margin-right:8px}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatChipSet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nclass MatChipListboxChange {\n  source;\n  value;\n  constructor(/** Chip listbox that emitted the event. */\n  source, /** Value of the chip listbox when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatChipListbox),\n  multi: true\n};\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\nlet MatChipListbox = /*#__PURE__*/(() => {\n  class MatChipListbox extends MatChipSet {\n    /**\n     * Function when touched. Set as part of ControlValueAccessor implementation.\n     * @docs-private\n     */\n    _onTouched = () => {};\n    /**\n     * Function when changed. Set as part of ControlValueAccessor implementation.\n     * @docs-private\n     */\n    _onChange = () => {};\n    // TODO: MDC uses `grid` here\n    _defaultRole = 'listbox';\n    /** Default chip options. */\n    _defaultOptions = inject(MAT_CHIPS_DEFAULT_OPTIONS, {\n      optional: true\n    });\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() {\n      return this._multiple;\n    }\n    set multiple(value) {\n      this._multiple = value;\n      this._syncListboxProperties();\n    }\n    _multiple = false;\n    /** The array of selected chips inside the chip listbox. */\n    get selected() {\n      const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n      return this.multiple ? selectedChips : selectedChips[0];\n    }\n    /** Orientation of the chip list. */\n    ariaOrientation = 'horizontal';\n    /**\n     * Whether or not this chip listbox is selectable.\n     *\n     * When a chip listbox is not selectable, the selected states for all\n     * the chips inside the chip listbox are always ignored.\n     */\n    get selectable() {\n      return this._selectable;\n    }\n    set selectable(value) {\n      this._selectable = value;\n      this._syncListboxProperties();\n    }\n    _selectable = true;\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith = (o1, o2) => o1 === o2;\n    /** Whether this chip listbox is required. */\n    required = false;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = value;\n      this._syncListboxProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n      return this._getChipStream(chip => chip.selectionChange);\n    }\n    /** Combined stream of all of the child chips' blur events. */\n    get chipBlurChanges() {\n      return this._getChipStream(chip => chip._onBlur);\n    }\n    /** The value of the listbox, which is the combined value of the selected chips. */\n    get value() {\n      return this._value;\n    }\n    set value(value) {\n      if (this._chips && this._chips.length) {\n        this._setSelectionByValue(value, false);\n      }\n      this._value = value;\n    }\n    _value;\n    /** Event emitted when the selected chip listbox value has been changed by the user. */\n    change = new EventEmitter();\n    _chips = undefined;\n    ngAfterContentInit() {\n      this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n        if (this.value !== undefined) {\n          Promise.resolve().then(() => {\n            this._setSelectionByValue(this.value, false);\n          });\n        }\n        // Update listbox selectable/multiple properties on chips\n        this._syncListboxProperties();\n      });\n      this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._blur());\n      this.chipSelectionChanges.pipe(takeUntil(this._destroyed)).subscribe(event => {\n        if (!this.multiple) {\n          this._chips.forEach(chip => {\n            if (chip !== event.source) {\n              chip._setSelectedState(false, false, false);\n            }\n          });\n        }\n        if (event.isUserInput) {\n          this._propagateChanges();\n        }\n      });\n    }\n    /**\n     * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n     * are no selected chips.\n     */\n    focus() {\n      if (this.disabled) {\n        return;\n      }\n      const firstSelectedChip = this._getFirstSelectedChip();\n      if (firstSelectedChip && !firstSelectedChip.disabled) {\n        firstSelectedChip.focus();\n      } else if (this._chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    writeValue(value) {\n      if (value != null) {\n        this.value = value;\n      } else {\n        this.value = undefined;\n      }\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /** Selects all chips with value. */\n    _setSelectionByValue(value, isUserInput = true) {\n      this._clearSelection();\n      if (Array.isArray(value)) {\n        value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      } else {\n        this._selectValue(value, isUserInput);\n      }\n    }\n    /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n    _blur() {\n      if (!this.disabled) {\n        // Wait to see if focus moves to an individual chip.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      }\n    }\n    _keydown(event) {\n      if (event.keyCode === TAB) {\n        super._allowFocusEscape();\n      }\n    }\n    /** Marks the field as touched */\n    _markAsTouched() {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges() {\n      let valueToEmit = null;\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(chip => chip.value);\n      } else {\n        valueToEmit = this.selected ? this.selected.value : undefined;\n      }\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListboxChange(this, valueToEmit));\n      this._onChange(valueToEmit);\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Deselects every chip in the listbox.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n      this._chips.forEach(chip => {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput) {\n      const correspondingChip = this._chips.find(chip => {\n        return chip.value != null && this.compareWith(chip.value, value);\n      });\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      }\n      return correspondingChip;\n    }\n    /** Syncs the chip-listbox selection state with the individual chips. */\n    _syncListboxProperties() {\n      if (this._chips) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n          this._chips.forEach(chip => {\n            chip._chipListMultiple = this.multiple;\n            chip.chipListSelectable = this._selectable;\n            chip._chipListHideSingleSelectionIndicator = this.hideSingleSelectionIndicator;\n            chip._changeDetectorRef.markForCheck();\n          });\n        });\n      }\n    }\n    /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n    _getFirstSelectedChip() {\n      if (Array.isArray(this.selected)) {\n        return this.selected.length ? this.selected[0] : undefined;\n      } else {\n        return this.selected;\n      }\n    }\n    /**\n     * Determines if key manager should avoid putting a given chip action in the tab index. Skip\n     * non-interactive actions since the user can't do anything with them.\n     */\n    _skipPredicate(action) {\n      // Override the skip predicate in the base class to avoid skipping disabled chips. Allow\n      // disabled chip options to receive focus to align with WAI ARIA recommendation. Normally WAI\n      // ARIA's instructions are to exclude disabled items from the tab order, but it makes a few\n      // exceptions for compound widgets.\n      //\n      // From [Developing a Keyboard Interface](\n      // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n      //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n      //   Listbox...\"\n      return !action.isInteractive;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatChipListbox_BaseFactory;\n      return function MatChipListbox_Factory(__ngFactoryType__) {\n        return (ɵMatChipListbox_BaseFactory || (ɵMatChipListbox_BaseFactory = i0.ɵɵgetInheritedFactory(MatChipListbox)))(__ngFactoryType__ || MatChipListbox);\n      };\n    })();\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatChipListbox,\n      selectors: [[\"mat-chip-listbox\"]],\n      contentQueries: function MatChipListbox_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatChipOption, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._chips = _t);\n        }\n      },\n      hostAttrs: [1, \"mdc-evolution-chip-set\", \"mat-mdc-chip-listbox\"],\n      hostVars: 10,\n      hostBindings: function MatChipListbox_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function MatChipListbox_focus_HostBindingHandler() {\n            return ctx.focus();\n          })(\"blur\", function MatChipListbox_blur_HostBindingHandler() {\n            return ctx._blur();\n          })(\"keydown\", function MatChipListbox_keydown_HostBindingHandler($event) {\n            return ctx._keydown($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"tabIndex\", ctx.disabled || ctx.empty ? -1 : ctx.tabIndex);\n          i0.ɵɵattribute(\"role\", ctx.role)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-multiselectable\", ctx.multiple)(\"aria-orientation\", ctx.ariaOrientation);\n          i0.ɵɵclassProp(\"mat-mdc-chip-list-disabled\", ctx.disabled)(\"mat-mdc-chip-list-required\", ctx.required);\n        }\n      },\n      inputs: {\n        multiple: [2, \"multiple\", \"multiple\", booleanAttribute],\n        ariaOrientation: [0, \"aria-orientation\", \"ariaOrientation\"],\n        selectable: [2, \"selectable\", \"selectable\", booleanAttribute],\n        compareWith: \"compareWith\",\n        required: [2, \"required\", \"required\", booleanAttribute],\n        hideSingleSelectionIndicator: [2, \"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute],\n        value: \"value\"\n      },\n      outputs: {\n        change: \"change\"\n      },\n      features: [i0.ɵɵProvidersFeature([MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c5,\n      decls: 2,\n      vars: 0,\n      consts: [[\"role\", \"presentation\", 1, \"mdc-evolution-chip-set__chips\"]],\n      template: function MatChipListbox_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [_c6],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatChipListbox;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Change event object that is emitted when the chip grid value has changed. */\nclass MatChipGridChange {\n  source;\n  value;\n  constructor(/** Chip grid that emitted the event. */\n  source, /** Value of the chip grid when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\nlet MatChipGrid = /*#__PURE__*/(() => {\n  class MatChipGrid extends MatChipSet {\n    ngControl = inject(NgControl, {\n      optional: true,\n      self: true\n    });\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType = 'mat-chip-grid';\n    /** The chip input to add more chips */\n    _chipInput;\n    _defaultRole = 'grid';\n    _errorStateTracker;\n    /**\n     * List of element ids to propagate to the chipInput's aria-describedby attribute.\n     */\n    _ariaDescribedbyIds = [];\n    /**\n     * Function when touched. Set as part of ControlValueAccessor implementation.\n     * @docs-private\n     */\n    _onTouched = () => {};\n    /**\n     * Function when changed. Set as part of ControlValueAccessor implementation.\n     * @docs-private\n     */\n    _onChange = () => {};\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._syncChipsState();\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n      return this._chipInput.id;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n      return (!this._chipInput || this._chipInput.empty) && (!this._chips || this._chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n    get focused() {\n      return this._chipInput.focused || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n      return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n      this._required = value;\n      this.stateChanges.next();\n    }\n    _required;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n      return this._value;\n    }\n    set value(value) {\n      this._value = value;\n    }\n    _value = [];\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n      return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n      this._errorStateTracker.matcher = value;\n    }\n    /** Combined stream of all of the child chips' blur events. */\n    get chipBlurChanges() {\n      return this._getChipStream(chip => chip._onBlur);\n    }\n    /** Emits when the chip grid value has been changed by the user. */\n    change = new EventEmitter();\n    /**\n     * Emits whenever the raw value of the chip-grid changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    _chips = undefined;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /** Whether the chip grid is in an error state. */\n    get errorState() {\n      return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n      this._errorStateTracker.errorState = value;\n    }\n    constructor() {\n      super();\n      const parentForm = inject(NgForm, {\n        optional: true\n      });\n      const parentFormGroup = inject(FormGroupDirective, {\n        optional: true\n      });\n      const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n      if (this.ngControl) {\n        this.ngControl.valueAccessor = this;\n      }\n      this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n    }\n    ngAfterContentInit() {\n      this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._blur();\n        this.stateChanges.next();\n      });\n      merge(this.chipFocusChanges, this._chips.changes).pipe(takeUntil(this._destroyed)).subscribe(() => this.stateChanges.next());\n    }\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      if (!this._chipInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n      }\n    }\n    ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      }\n    }\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.stateChanges.complete();\n    }\n    /** Associates an HTML input element with this chip grid. */\n    registerInput(inputElement) {\n      this._chipInput = inputElement;\n      this._chipInput.setDescribedByIds(this._ariaDescribedbyIds);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n      if (!this.disabled && !this._originatesFromChip(event)) {\n        this.focus();\n      }\n    }\n    /**\n     * Focuses the first chip in this chip grid, or the associated input when there\n     * are no eligible chips.\n     */\n    focus() {\n      if (this.disabled || this._chipInput.focused) {\n        return;\n      }\n      if (!this._chips.length || this._chips.first.disabled) {\n        // Delay until the next tick, because this can cause a \"changed after checked\"\n        // error if the input does something on focus (e.g. opens an autocomplete).\n        Promise.resolve().then(() => this._chipInput.focus());\n      } else {\n        const activeItem = this._keyManager.activeItem;\n        if (activeItem) {\n          activeItem.focus();\n        } else {\n          this._keyManager.setFirstItemActive();\n        }\n      }\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      // We must keep this up to date to handle the case where ids are set\n      // before the chip input is registered.\n      this._ariaDescribedbyIds = ids;\n      this._chipInput?.setDescribedByIds(ids);\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    writeValue(value) {\n      // The user is responsible for creating the child chips, so we just store the value.\n      this._value = value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @docs-private\n     */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /** Refreshes the error state of the chip grid. */\n    updateErrorState() {\n      this._errorStateTracker.updateErrorState();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n    _blur() {\n      if (!this.disabled) {\n        // Check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._propagateChanges();\n            this._markAsTouched();\n          }\n        });\n      }\n    }\n    /**\n     * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the grid from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n      if (!this._chipInput.focused) {\n        super._allowFocusEscape();\n      }\n    }\n    /** Handles custom keyboard events. */\n    _handleKeydown(event) {\n      const keyCode = event.keyCode;\n      const activeItem = this._keyManager.activeItem;\n      if (keyCode === TAB) {\n        if (this._chipInput.focused && hasModifierKey(event, 'shiftKey') && this._chips.length && !this._chips.last.disabled) {\n          event.preventDefault();\n          if (activeItem) {\n            this._keyManager.setActiveItem(activeItem);\n          } else {\n            this._focusLastChip();\n          }\n        } else {\n          // Use the super method here since it doesn't check for the input\n          // focused state. This allows focus to escape if there's only one\n          // disabled chip left in the list.\n          super._allowFocusEscape();\n        }\n      } else if (!this._chipInput.focused) {\n        // The up and down arrows are supposed to navigate between the individual rows in the grid.\n        // We do this by filtering the actions down to the ones that have the same `_isPrimary`\n        // flag as the active action and moving focus between them ourseles instead of delegating\n        // to the key manager. For more information, see #29359 and:\n        // https://www.w3.org/WAI/ARIA/apg/patterns/grid/examples/layout-grids/#ex2_label\n        if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && activeItem) {\n          const eligibleActions = this._chipActions.filter(action => action._isPrimary === activeItem._isPrimary && !this._skipPredicate(action));\n          const currentIndex = eligibleActions.indexOf(activeItem);\n          const delta = event.keyCode === UP_ARROW ? -1 : 1;\n          event.preventDefault();\n          if (currentIndex > -1 && this._isValidIndex(currentIndex + delta)) {\n            this._keyManager.setActiveItem(eligibleActions[currentIndex + delta]);\n          }\n        } else {\n          super._handleKeydown(event);\n        }\n      }\n      this.stateChanges.next();\n    }\n    _focusLastChip() {\n      if (this._chips.length) {\n        this._chips.last.focus();\n      }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges() {\n      const valueToEmit = this._chips.length ? this._chips.toArray().map(chip => chip.value) : [];\n      this._value = valueToEmit;\n      this.change.emit(new MatChipGridChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n      this._onChange(valueToEmit);\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n    static ɵfac = function MatChipGrid_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipGrid)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatChipGrid,\n      selectors: [[\"mat-chip-grid\"]],\n      contentQueries: function MatChipGrid_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatChipRow, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._chips = _t);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-chip-set\", \"mat-mdc-chip-grid\", \"mdc-evolution-chip-set\"],\n      hostVars: 10,\n      hostBindings: function MatChipGrid_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function MatChipGrid_focus_HostBindingHandler() {\n            return ctx.focus();\n          })(\"blur\", function MatChipGrid_blur_HostBindingHandler() {\n            return ctx._blur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx.disabled || ctx._chips && ctx._chips.length === 0 ? -1 : ctx.tabIndex)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState);\n          i0.ɵɵclassProp(\"mat-mdc-chip-list-disabled\", ctx.disabled)(\"mat-mdc-chip-list-invalid\", ctx.errorState)(\"mat-mdc-chip-list-required\", ctx.required);\n        }\n      },\n      inputs: {\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        placeholder: \"placeholder\",\n        required: [2, \"required\", \"required\", booleanAttribute],\n        value: \"value\",\n        errorStateMatcher: \"errorStateMatcher\"\n      },\n      outputs: {\n        change: \"change\",\n        valueChange: \"valueChange\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatFormFieldControl,\n        useExisting: MatChipGrid\n      }]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c5,\n      decls: 2,\n      vars: 0,\n      consts: [[\"role\", \"presentation\", 1, \"mdc-evolution-chip-set__chips\"]],\n      template: function MatChipGrid_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [_c6],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatChipGrid;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\nlet MatChipInput = /*#__PURE__*/(() => {\n  class MatChipInput {\n    _elementRef = inject(ElementRef);\n    /** Whether the control is focused. */\n    focused = false;\n    /** Register input for chip list */\n    get chipGrid() {\n      return this._chipGrid;\n    }\n    set chipGrid(value) {\n      if (value) {\n        this._chipGrid = value;\n        this._chipGrid.registerInput(this);\n      }\n    }\n    _chipGrid;\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n    chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n    placeholder = '';\n    /** Unique id for the input. */\n    id = inject(_IdGenerator).getId('mat-mdc-chip-list-input-');\n    /** Whether the input is disabled. */\n    get disabled() {\n      return this._disabled || this._chipGrid && this._chipGrid.disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    _disabled = false;\n    /** Whether the input is empty. */\n    get empty() {\n      return !this.inputElement.value;\n    }\n    /** The native input element to which this directive is attached. */\n    inputElement;\n    constructor() {\n      const defaultOptions = inject(MAT_CHIPS_DEFAULT_OPTIONS);\n      const formField = inject(MAT_FORM_FIELD, {\n        optional: true\n      });\n      this.inputElement = this._elementRef.nativeElement;\n      this.separatorKeyCodes = defaultOptions.separatorKeyCodes;\n      if (formField) {\n        this.inputElement.classList.add('mat-mdc-form-field-input-control');\n      }\n    }\n    ngOnChanges() {\n      this._chipGrid.stateChanges.next();\n    }\n    ngOnDestroy() {\n      this.chipEnd.complete();\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n      if (this.empty && event.keyCode === BACKSPACE) {\n        // Ignore events where the user is holding down backspace\n        // so that we don't accidentally remove too many chips.\n        if (!event.repeat) {\n          this._chipGrid._focusLastChip();\n        }\n        event.preventDefault();\n      } else {\n        this._emitChipEnd(event);\n      }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n      this.focused = false;\n      // Blur the chip list if it is not focused\n      if (!this._chipGrid.focused) {\n        this._chipGrid._blur();\n      }\n      this._chipGrid.stateChanges.next();\n    }\n    _focus() {\n      this.focused = true;\n      this._chipGrid.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n      if (!event || this._isSeparatorKey(event) && !event.repeat) {\n        this.chipEnd.emit({\n          input: this.inputElement,\n          value: this.inputElement.value,\n          chipInput: this\n        });\n        event?.preventDefault();\n      }\n    }\n    _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipGrid.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus() {\n      this.inputElement.focus();\n    }\n    /** Clears the input */\n    clear() {\n      this.inputElement.value = '';\n    }\n    setDescribedByIds(ids) {\n      const element = this._elementRef.nativeElement;\n      // Set the value directly in the DOM since this binding\n      // is prone to \"changed after checked\" errors.\n      if (ids.length) {\n        element.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        element.removeAttribute('aria-describedby');\n      }\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n      return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n    static ɵfac = function MatChipInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipInput)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatChipInput,\n      selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-chip-input\", \"mat-mdc-input-element\", \"mdc-text-field__input\", \"mat-input-element\"],\n      hostVars: 6,\n      hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n            return ctx._keydown($event);\n          })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n            return ctx._blur();\n          })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n            return ctx._focus();\n          })(\"input\", function MatChipInput_input_HostBindingHandler() {\n            return ctx._onInput();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipGrid && ctx._chipGrid.ngControl ? ctx._chipGrid.ngControl.invalid : null)(\"aria-required\", ctx._chipGrid && ctx._chipGrid.required || null)(\"required\", ctx._chipGrid && ctx._chipGrid.required || null);\n        }\n      },\n      inputs: {\n        chipGrid: [0, \"matChipInputFor\", \"chipGrid\"],\n        addOnBlur: [2, \"matChipInputAddOnBlur\", \"addOnBlur\", booleanAttribute],\n        separatorKeyCodes: [0, \"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n        placeholder: \"placeholder\",\n        id: \"id\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n      },\n      outputs: {\n        chipEnd: \"matChipInputTokenEnd\"\n      },\n      exportAs: [\"matChipInput\", \"matChipInputFor\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatChipInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst CHIP_DECLARATIONS = [MatChip, MatChipAvatar, MatChipEditInput, MatChipGrid, MatChipInput, MatChipListbox, MatChipOption, MatChipRemove, MatChipRow, MatChipSet, MatChipTrailingIcon];\nlet MatChipsModule = /*#__PURE__*/(() => {\n  class MatChipsModule {\n    static ɵfac = function MatChipsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatChipsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatChipsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: {\n          separatorKeyCodes: [ENTER]\n        }\n      }],\n      imports: [MatCommonModule, MatRippleModule, MatCommonModule]\n    });\n  }\n  return MatChipsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIP, MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipEditInput, MatChipGrid, MatChipGridChange, MatChipInput, MatChipListbox, MatChipListboxChange, MatChipOption, MatChipRemove, MatChipRow, MatChipSelectionChange, MatChipSet, MatChipTrailingIcon, MatChipsModule };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, ANIMATION_MODULE_TYPE, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, EnvironmentInjector, ViewContainerRef, NgZone, Renderer2, afterNextRender, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nconst _c0 = [\"panel\"];\nconst _c1 = [\"*\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 0);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1._classList);\n    i0.ɵɵclassProp(\"mat-mdc-autocomplete-visible\", ctx_r1.showPanel)(\"mat-mdc-autocomplete-hidden\", !ctx_r1.showPanel)(\"mat-autocomplete-panel-animations-enabled\", !ctx_r1._animationsDisabled)(\"mat-primary\", ctx_r1._color === \"primary\")(\"mat-accent\", ctx_r1._color === \"accent\")(\"mat-warn\", ctx_r1._color === \"warn\");\n    i0.ɵɵproperty(\"id\", ctx_r1.id);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.ariaLabel || null)(\"aria-labelledby\", ctx_r1._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _IdGenerator, ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { Subscription, Subject, merge, of, defer, Observable } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { filter, map, startWith, switchMap, tap, delay, take } from 'rxjs/operators';\n\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n  source;\n  option;\n  constructor(/** Reference to the autocomplete panel that emitted the event. */\n  source, /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false,\n    autoSelectActiveOption: false,\n    hideSingleSelectionIndicator: false,\n    requireSelection: false\n  };\n}\n/** Autocomplete component. */\nlet MatAutocomplete = /*#__PURE__*/(() => {\n  class MatAutocomplete {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS);\n    _animationsDisabled = inject(ANIMATION_MODULE_TYPE, {\n      optional: true\n    }) === 'NoopAnimations';\n    _activeOptionChanges = Subscription.EMPTY;\n    /** Manages active item in option list based on key events. */\n    _keyManager;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel = false;\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n      return this._isOpen && this.showPanel;\n    }\n    _isOpen = false;\n    /** Latest trigger that opened the autocomplete. */\n    _latestOpeningTrigger;\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n      this._color = value;\n      this._changeDetectorRef.markForCheck();\n    }\n    /** @docs-private theme color of the panel */\n    _color;\n    // The @ViewChild query for TemplateRef here needs to be static because some code paths\n    // lead to the overlay being created before change detection has finished for this component.\n    // Notably, another component may trigger `focus` on the autocomplete-trigger.\n    /** @docs-private */\n    template;\n    /** Element for the panel containing the autocomplete options. */\n    panel;\n    /** Reference to all options within the autocomplete. */\n    options;\n    /** Reference to all option groups within the autocomplete. */\n    optionGroups;\n    /** Aria label of the autocomplete. */\n    ariaLabel;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith = null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption;\n    /** Whether the active option should be selected as the user is navigating. */\n    autoSelectActiveOption;\n    /**\n     * Whether the user is required to make a selection when they're interacting with the\n     * autocomplete. If the user moves away from the autocomplete without selecting an option from\n     * the list, the value will be reset. If the user opens the panel and closes it without\n     * interacting or selecting a value, the initial value will be kept.\n     */\n    requireSelection;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth;\n    /** Whether ripples are disabled within the autocomplete panel. */\n    disableRipple;\n    /** Event that is emitted whenever an option from the list is selected. */\n    optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    optionActivated = new EventEmitter();\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n      this._classList = value;\n      this._elementRef.nativeElement.className = '';\n    }\n    _classList;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = value;\n      this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator;\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n      if (this.options) {\n        for (const option of this.options) {\n          option._changeDetectorRef.markForCheck();\n        }\n      }\n    }\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id = inject(_IdGenerator).getId('mat-autocomplete-');\n    /**\n     * Tells any descendant `mat-optgroup` to use the inert a11y pattern.\n     * @docs-private\n     */\n    inertGroups;\n    constructor() {\n      const platform = inject(Platform);\n      // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n      // Safari using VoiceOver. We should occasionally check back to see whether the bug\n      // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n      // option altogether.\n      this.inertGroups = platform?.SAFARI || false;\n      this.autoActiveFirstOption = !!this._defaults.autoActiveFirstOption;\n      this.autoSelectActiveOption = !!this._defaults.autoSelectActiveOption;\n      this.requireSelection = !!this._defaults.requireSelection;\n      this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap().skipPredicate(this._skipPredicate);\n      this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n        if (this.isOpen) {\n          this.optionActivated.emit({\n            source: this,\n            option: this.options.toArray()[index] || null\n          });\n        }\n      });\n      // Set the initial visibility state.\n      this._setVisibility();\n    }\n    ngOnDestroy() {\n      this._keyManager?.destroy();\n      this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n      const event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n      return false;\n    }\n    static ɵfac = function MatAutocomplete_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocomplete)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatAutocomplete,\n      selectors: [[\"mat-autocomplete\"]],\n      contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        }\n      },\n      viewQuery: function MatAutocomplete_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TemplateRef, 7);\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-autocomplete\"],\n      inputs: {\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n        displayWith: \"displayWith\",\n        autoActiveFirstOption: [2, \"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute],\n        autoSelectActiveOption: [2, \"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute],\n        requireSelection: [2, \"requireSelection\", \"requireSelection\", booleanAttribute],\n        panelWidth: \"panelWidth\",\n        disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n        classList: [0, \"class\", \"classList\"],\n        hideSingleSelectionIndicator: [2, \"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute]\n      },\n      outputs: {\n        optionSelected: \"optionSelected\",\n        opened: \"opened\",\n        closed: \"closed\",\n        optionActivated: \"optionActivated\"\n      },\n      exportAs: [\"matAutocomplete\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }])],\n      ngContentSelectors: _c1,\n      decls: 1,\n      vars: 0,\n      consts: [[\"panel\", \"\"], [\"role\", \"listbox\", 1, \"mat-mdc-autocomplete-panel\", \"mdc-menu-surface\", \"mdc-menu-surface--open\", 3, \"id\"]],\n      template: function MatAutocomplete_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 17, \"ng-template\");\n        }\n      },\n      styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}@keyframes _mat-autocomplete-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}.mat-autocomplete-panel-animations-enabled{animation:_mat-autocomplete-enter 120ms cubic-bezier(0, 0, 0.2, 1)}mat-autocomplete{display:none}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatAutocomplete;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nlet MatAutocompleteOrigin = /*#__PURE__*/(() => {\n  class MatAutocompleteOrigin {\n    elementRef = inject(ElementRef);\n    constructor() {}\n    static ɵfac = function MatAutocompleteOrigin_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocompleteOrigin)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatAutocompleteOrigin,\n      selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n      exportAs: [\"matAutocompleteOrigin\"]\n    });\n  }\n  return MatAutocompleteOrigin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-autocomplete-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.reposition();\n  }\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nlet MatAutocompleteTrigger = /*#__PURE__*/(() => {\n  class MatAutocompleteTrigger {\n    _environmentInjector = inject(EnvironmentInjector);\n    _element = inject(ElementRef);\n    _overlay = inject(Overlay);\n    _viewContainerRef = inject(ViewContainerRef);\n    _zone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true,\n      host: true\n    });\n    _document = inject(DOCUMENT);\n    _viewportRuler = inject(ViewportRuler);\n    _scrollStrategy = inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY);\n    _renderer = inject(Renderer2);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, {\n      optional: true\n    });\n    _overlayRef;\n    _portal;\n    _componentDestroyed = false;\n    _initialized = new Subject();\n    _keydownSubscription;\n    _outsideClickSubscription;\n    _cleanupWindowBlur;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    _previousValue;\n    /** Value of the input element when the panel was attached (even if there are no options). */\n    _valueOnAttach;\n    /** Value on the previous keydown event. */\n    _valueOnLastKeydown;\n    /** Strategy that is used to position the panel. */\n    _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    _manuallyFloatingLabel = false;\n    /** The subscription for closing actions (some are bound to document). */\n    _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    _viewportSubscription = Subscription.EMPTY;\n    /** Implements BreakpointObserver to be used to detect handset landscape */\n    _breakpointObserver = inject(BreakpointObserver);\n    _handsetLandscapeSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    _canOpenOnNextFocus = true;\n    /** Value inside the input before we auto-selected an option. */\n    _valueBeforeAutoSelection;\n    /**\n     * Current option that we have auto-selected as the user is navigating,\n     * but which hasn't been propagated to the model value yet.\n     */\n    _pendingAutoselectedOption;\n    /** Stream of keyboard events that can close the panel. */\n    _closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    _windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n    _onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched = () => {};\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    position = 'auto';\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute = 'off';\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled;\n    constructor() {}\n    /** Class to apply to the panel when it's above the input. */\n    _aboveClass = 'mat-mdc-autocomplete-panel-above';\n    ngAfterViewInit() {\n      this._initialized.next();\n      this._initialized.complete();\n      this._cleanupWindowBlur = this._renderer.listen('window', 'blur', this._windowBlurHandler);\n    }\n    ngOnChanges(changes) {\n      if (changes['position'] && this._positionStrategy) {\n        this._setStrategyPositions(this._positionStrategy);\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._cleanupWindowBlur?.();\n      this._handsetLandscapeSubscription.unsubscribe();\n      this._viewportSubscription.unsubscribe();\n      this._componentDestroyed = true;\n      this._destroyPanel();\n      this._closeKeyEventStream.complete();\n      this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    _overlayAttached = false;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n      this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n      this._resetLabel();\n      if (!this._overlayAttached) {\n        return;\n      }\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        // `afterNextRender` always runs outside of the Angular zone, so all the subscriptions from\n        // `_subscribeToClosingActions()` are also outside of the Angular zone.\n        // We should manually run in Angular zone to update UI after panel closing.\n        this._zone.run(() => {\n          this.autocomplete.closed.emit();\n        });\n      }\n      // Only reset if this trigger is the latest one that opened the\n      // autocomplete since another may have taken it over.\n      if (this.autocomplete._latestOpeningTrigger === this) {\n        this.autocomplete._isOpen = false;\n        this.autocomplete._latestOpeningTrigger = null;\n      }\n      this._overlayAttached = false;\n      this._pendingAutoselectedOption = null;\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n      this._updatePanelState();\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n      // Remove aria-owns attribute when the autocomplete is no longer visible.\n      if (this._trackedModal) {\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n      if (this._overlayAttached) {\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** Stream of changes to the selection state of the autocomplete options. */\n    optionSelections = defer(() => {\n      const options = this.autocomplete ? this.autocomplete.options : null;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._initialized.pipe(switchMap(() => this.optionSelections));\n    });\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n      return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n      return new Observable(observer => {\n        const listener = event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget = _getEventTarget(event);\n          const formField = this._formField ? this._formField.getConnectedOverlayOrigin().nativeElement : null;\n          const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n          if (this._overlayAttached && clickTarget !== this._element.nativeElement &&\n          // Normally focus moves inside `mousedown` so this condition will almost always be\n          // true. Its main purpose is to handle the case where the input is focused from an\n          // outside click which propagates up to the `body` listener within the same sequence\n          // and causes the panel to close immediately (see #3106).\n          this._document.activeElement !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget)) {\n            observer.next(event);\n          }\n        };\n        const cleanups = [this._renderer.listen('document', 'click', listener), this._renderer.listen('document', 'auxclick', listener), this._renderer.listen('document', 'touchend', listener)];\n        return () => {\n          cleanups.forEach(current => current());\n        };\n      });\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n      Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n      const keyCode = event.keyCode;\n      const hasModifier = hasModifierKey(event);\n      // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n      if (keyCode === ESCAPE && !hasModifier) {\n        event.preventDefault();\n      }\n      this._valueOnLastKeydown = this._element.nativeElement.value;\n      if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n        this.activeOption._selectViaInteraction();\n        this._resetActiveItem();\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        const prevActiveItem = this.autocomplete._keyManager.activeItem;\n        const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n        if (keyCode === TAB || isArrowKey && !hasModifier && this.panelOpen) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this._openPanelInternal(this._valueOnLastKeydown);\n        }\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n          if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n            if (!this._pendingAutoselectedOption) {\n              this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n            }\n            this._pendingAutoselectedOption = this.activeOption;\n            this._assignOptionValue(this.activeOption.value);\n          }\n        }\n      }\n    }\n    _handleInput(event) {\n      let target = event.target;\n      let value = target.value;\n      // Based on `NumberValueAccessor` from forms.\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      }\n      // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n      if (this._previousValue !== value) {\n        this._previousValue = value;\n        this._pendingAutoselectedOption = null;\n        // If selection is required we don't write to the CVA while the user is typing.\n        // At the end of the selection either the user will have picked something\n        // or we'll reset the value back to null.\n        if (!this.autocomplete || !this.autocomplete.requireSelection) {\n          this._onChange(value);\n        }\n        if (!value) {\n          this._clearPreviousSelectedOption(null, false);\n        } else if (this.panelOpen && !this.autocomplete.requireSelection) {\n          // Note that we don't reset this when `requireSelection` is enabled,\n          // because the option will be reset when the panel is closed.\n          const selectedOption = this.autocomplete.options?.find(option => option.selected);\n          if (selectedOption) {\n            const display = this._getDisplayValue(selectedOption.value);\n            if (value !== display) {\n              selectedOption.deselect(false);\n            }\n          }\n        }\n        if (this._canOpen() && this._document.activeElement === event.target) {\n          // When the `input` event fires, the input's value will have already changed. This means\n          // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n          // behind. This can be a problem when the user selects a value, changes a character while\n          // the input still has focus and then clicks away (see #28432). To work around it, we\n          // capture the value in `keydown` so we can use it here.\n          const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n          this._valueOnLastKeydown = null;\n          this._openPanelInternal(valueOnAttach);\n        }\n      }\n    }\n    _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n        this._attachOverlay(this._previousValue);\n        this._floatLabel(true);\n      }\n    }\n    _handleClick() {\n      if (this._canOpen() && !this.panelOpen) {\n        this._openPanelInternal();\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        if (this._formField) {\n          this._formField.floatLabel = 'auto';\n        }\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n      const initialRender = new Observable(subscriber => {\n        afterNextRender(() => {\n          subscriber.next();\n        }, {\n          injector: this._environmentInjector\n        });\n      });\n      const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0));\n      // When the options are initially rendered, and when the option list changes...\n      return merge(initialRender, optionChanges).pipe(\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(() => this._zone.run(() => {\n        // `afterNextRender` always runs outside of the Angular zone, thus we have to re-enter\n        // the Angular zone. This will lead to change detection being called outside of the Angular\n        // zone and the `autocomplete.opened` will also emit outside of the Angular.\n        const wasOpen = this.panelOpen;\n        this._resetActiveItem();\n        this._updatePanelState();\n        this._changeDetectorRef.detectChanges();\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n        if (wasOpen !== this.panelOpen) {\n          // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n          // `closed` event, because we may not have emitted it. This can happen\n          // - if the users opens the panel and there are no options, but the\n          //   options come in slightly later or as a result of the value changing,\n          // - if the panel is closed after the user entered a string that did not match any\n          //   of the available options,\n          // - if a valid string is entered after an invalid one.\n          if (this.panelOpen) {\n            this._emitOpened();\n          } else {\n            this.autocomplete.closed.emit();\n          }\n        }\n        return this.panelClosingActions;\n      })),\n      // when the first closing event occurs...\n      take(1))\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n      this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n        this._overlayRef.dispose();\n        this._overlayRef = null;\n      }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n      const autocomplete = this.autocomplete;\n      return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n      const toDisplay = this._getDisplayValue(value);\n      if (value == null) {\n        this._clearPreviousSelectedOption(null, false);\n      }\n      // Simply falling back to an empty string if the display value is falsy does not work properly.\n      // The display value can also be the number zero and shouldn't fall back to an empty string.\n      this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n      // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n      if (this._formField) {\n        this._formField._control.value = value;\n      } else {\n        this._element.nativeElement.value = value;\n      }\n      this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n      const panel = this.autocomplete;\n      const toSelect = event ? event.source : this._pendingAutoselectedOption;\n      if (toSelect) {\n        this._clearPreviousSelectedOption(toSelect);\n        this._assignOptionValue(toSelect.value);\n        // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n        // gets reset while the panel is still animating which looks glitchy. It'll likely break\n        // some tests to change it at this point.\n        this._onChange(toSelect.value);\n        panel._emitSelectEvent(toSelect);\n        this._element.nativeElement.focus();\n      } else if (panel.requireSelection && this._element.nativeElement.value !== this._valueOnAttach) {\n        this._clearPreviousSelectedOption(null);\n        this._assignOptionValue(null);\n        this._onChange(null);\n      }\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n      // Null checks are necessary here, because the autocomplete\n      // or its options may not have been assigned yet.\n      this.autocomplete?.options?.forEach(option => {\n        if (option !== skip && option.selected) {\n          option.deselect(emitEvent);\n        }\n      });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n      this._attachOverlay(valueOnAttach);\n      this._floatLabel();\n      // Add aria-owns attribute when the autocomplete becomes visible.\n      if (this._trackedModal) {\n        const panelId = this.autocomplete.id;\n        addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      }\n    }\n    _attachOverlay(valueOnAttach) {\n      if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatAutocompleteMissingPanelError();\n      }\n      let overlayRef = this._overlayRef;\n      if (!overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n          id: this._formField?.getLabelId()\n        });\n        overlayRef = this._overlay.create(this._getOverlayConfig());\n        this._overlayRef = overlayRef;\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: this._getPanelWidth()\n            });\n          }\n        });\n        // Subscribe to the breakpoint events stream to detect when screen is in\n        // handsetLandscape.\n        this._handsetLandscapeSubscription = this._breakpointObserver.observe(Breakpoints.HandsetLandscape).subscribe(result => {\n          const isHandsetLandscape = result.matches;\n          // Check if result.matches Breakpoints.HandsetLandscape. Apply HandsetLandscape\n          // settings to prevent overlay cutoff in that breakpoint. Fixes b/284148377\n          if (isHandsetLandscape) {\n            this._positionStrategy.withFlexibleDimensions(true).withGrowAfterOpen(true).withViewportMargin(8);\n          } else {\n            this._positionStrategy.withFlexibleDimensions(false).withGrowAfterOpen(false).withViewportMargin(0);\n          }\n        });\n      } else {\n        // Update the trigger, panel width and direction, in case anything has changed.\n        this._positionStrategy.setOrigin(this._getConnectedElement());\n        overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n      if (overlayRef && !overlayRef.hasAttached()) {\n        overlayRef.attach(this._portal);\n        this._valueOnAttach = valueOnAttach;\n        this._valueOnLastKeydown = null;\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n      const wasOpen = this.panelOpen;\n      this.autocomplete._isOpen = this._overlayAttached = true;\n      this.autocomplete._latestOpeningTrigger = this;\n      this.autocomplete._setColor(this._formField?.color);\n      this._updatePanelState();\n      this._applyModalPanelOwnership();\n      // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this._emitOpened();\n      }\n    }\n    /** Handles keyboard events coming from the overlay panel. */\n    _handlePanelKeydown = event => {\n      // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n      // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n      if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n        // If the user had typed something in before we autoselected an option, and they decided\n        // to cancel the selection, restore the input value to the one they had typed in.\n        if (this._pendingAutoselectedOption) {\n          this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n          this._pendingAutoselectedOption = null;\n        }\n        this._closeKeyEventStream.next();\n        this._resetActiveItem();\n        // We need to stop propagation, otherwise the event will eventually\n        // reach the input itself and cause the overlay to be reopened.\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n      this.autocomplete._setVisibility();\n      // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n      // because the act of subscribing will prevent events from reaching other overlays and\n      // we don't want to block the events if there are no options.\n      if (this.panelOpen) {\n        const overlayRef = this._overlayRef;\n        if (!this._keydownSubscription) {\n          // Use the `keydownEvents` in order to take advantage of\n          // the overlay event targeting provided by the CDK overlay.\n          this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n        }\n        if (!this._outsideClickSubscription) {\n          // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n          // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n          // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n          this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n        }\n      } else {\n        this._keydownSubscription?.unsubscribe();\n        this._outsideClickSubscription?.unsubscribe();\n        this._keydownSubscription = this._outsideClickSubscription = null;\n      }\n    }\n    _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir ?? undefined,\n        panelClass: this._defaults?.overlayPanelClass\n      });\n    }\n    _getOverlayPosition() {\n      // Set default Overlay Position\n      const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n      this._setStrategyPositions(strategy);\n      this._positionStrategy = strategy;\n      return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n      // Note that we provide horizontal fallback positions, even though by default the dropdown\n      // width matches the input, because consumers can override the width. See #18854.\n      const belowPositions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }];\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      const panelClass = this._aboveClass;\n      const abovePositions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass\n      }];\n      let positions;\n      if (this.position === 'above') {\n        positions = abovePositions;\n      } else if (this.position === 'below') {\n        positions = belowPositions;\n      } else {\n        positions = [...belowPositions, ...abovePositions];\n      }\n      positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n      const autocomplete = this.autocomplete;\n      if (autocomplete.autoActiveFirstOption) {\n        // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n        // because it activates the first option that passes the skip predicate, rather than the\n        // first *enabled* option.\n        let firstEnabledOptionIndex = -1;\n        for (let index = 0; index < autocomplete.options.length; index++) {\n          const option = autocomplete.options.get(index);\n          if (!option.disabled) {\n            firstEnabledOptionIndex = index;\n            break;\n          }\n        }\n        autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n      } else {\n        autocomplete._keyManager.setActiveItem(-1);\n      }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n      const element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n      // Given that we are not actually focusing active options, we must manually adjust scroll\n      // to reveal options below the fold. First, we find the offset of the option from the top\n      // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n      // the panel height + the option height, so the active option will be just visible at the\n      // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n      // will become the offset. If that offset is visible within the panel already, the scrollTop is\n      // not adjusted.\n      const autocomplete = this.autocomplete;\n      const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        autocomplete._setScrollTop(0);\n      } else if (autocomplete.panel) {\n        const option = autocomplete.options.toArray()[index];\n        if (option) {\n          const element = option._getHostElement();\n          const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n          autocomplete._setScrollTop(newScrollPosition);\n        }\n      }\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n      // the `LiveAnnouncer` and any other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      if (!modal) {\n        // Most commonly, the autocomplete trigger is not inside a modal.\n        return;\n      }\n      const panelId = this.autocomplete.id;\n      if (this._trackedModal) {\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      }\n      addAriaReferencedId(modal, 'aria-owns', panelId);\n      this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n      if (this._trackedModal) {\n        const panelId = this.autocomplete.id;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n      }\n    }\n    static ɵfac = function MatAutocompleteTrigger_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocompleteTrigger)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatAutocompleteTrigger,\n      selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-autocomplete-trigger\"],\n      hostVars: 7,\n      hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n            return ctx._handleFocus();\n          })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n            return ctx._onTouched();\n          })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n            return ctx._handleInput($event);\n          })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          })(\"click\", function MatAutocompleteTrigger_click_HostBindingHandler() {\n            return ctx._handleClick();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-controls\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n        }\n      },\n      inputs: {\n        autocomplete: [0, \"matAutocomplete\", \"autocomplete\"],\n        position: [0, \"matAutocompletePosition\", \"position\"],\n        connectedTo: [0, \"matAutocompleteConnectedTo\", \"connectedTo\"],\n        autocompleteAttribute: [0, \"autocomplete\", \"autocompleteAttribute\"],\n        autocompleteDisabled: [2, \"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute]\n      },\n      exportAs: [\"matAutocompleteTrigger\"],\n      features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatAutocompleteTrigger;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatAutocompleteModule = /*#__PURE__*/(() => {\n  class MatAutocompleteModule {\n    static ɵfac = function MatAutocompleteModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocompleteModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatAutocompleteModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatOptionModule, MatCommonModule]\n    });\n  }\n  return MatAutocompleteModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n"],"mappings":"2nCAmBA,IAAMA,GAAN,KAAoC,CAClC,KAEA,WAA0B,IAAIC,EAE9B,eAA8B,IAAIA,EAElC,gBAEA,oBAAmC,IAAI,IACvC,YACAC,EAAM,CACJ,KAAK,KAAOA,EACR,OAAO,eAAmB,MAC5B,KAAK,gBAAkB,IAAI,eAAeC,GAAW,KAAK,eAAe,KAAKA,CAAO,CAAC,EAE1F,CAMA,QAAQC,EAAQ,CACd,OAAK,KAAK,oBAAoB,IAAIA,CAAM,GACtC,KAAK,oBAAoB,IAAIA,EAAQ,IAAIC,EAAWC,GAAY,CAC9D,IAAMC,EAAe,KAAK,eAAe,UAAUD,CAAQ,EAC3D,YAAK,iBAAiB,QAAQF,EAAQ,CACpC,IAAK,KAAK,IACZ,CAAC,EACM,IAAM,CACX,KAAK,iBAAiB,UAAUA,CAAM,EACtCG,EAAa,YAAY,EACzB,KAAK,oBAAoB,OAAOH,CAAM,CACxC,CACF,CAAC,EAAE,KAAKI,EAAOL,GAAWA,EAAQ,KAAKM,GAASA,EAAM,SAAWL,CAAM,CAAC,EAIxEM,GAAY,CACV,WAAY,EACZ,SAAU,EACZ,CAAC,EAAGC,EAAU,KAAK,UAAU,CAAC,CAAC,EAE1B,KAAK,oBAAoB,IAAIP,CAAM,CAC5C,CAEA,SAAU,CACR,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,EACzB,KAAK,eAAe,SAAS,EAC7B,KAAK,oBAAoB,MAAM,CACjC,CACF,EAWIQ,IAAqC,IAAM,CAC7C,MAAMA,CAAqB,CACzB,sBAEA,WAAa,IAAI,IAEjB,QAAUC,EAAOC,CAAM,EACvB,aAAc,CACR,OAAO,eAAmB,GAMhC,CACA,aAAc,CACZ,OAAW,CAAC,CAAER,CAAQ,IAAK,KAAK,WAC9BA,EAAS,QAAQ,EAEnB,KAAK,WAAW,MAAM,EACtB,KAAK,wBAAwB,CAC/B,CAOA,QAAQF,EAAQW,EAAS,CACvB,IAAMC,EAAMD,GAAS,KAAO,cAC5B,OAAK,KAAK,WAAW,IAAIC,CAAG,GAC1B,KAAK,WAAW,IAAIA,EAAK,IAAIhB,GAA8BgB,CAAG,CAAC,EAE1D,KAAK,WAAW,IAAIA,CAAG,EAAE,QAAQZ,CAAM,CAChD,CACA,OAAO,UAAO,SAAsCa,EAAmB,CACrE,OAAO,IAAKA,GAAqBL,EACnC,EACA,OAAO,WAA0BM,GAAmB,CAClD,MAAON,EACP,QAASA,EAAqB,UAC9B,WAAY,MACd,CAAC,CACH,CACA,OAAOA,CACT,GAAG,ECjHH,IAAMO,GAAM,CAAC,OAAO,EACdC,GAAM,CAAC,6BAA8B,EAAE,EACvCC,GAAM,CAAC,GAAG,EACVC,GAAM,CAAC,WAAW,EAClBC,GAAM,CAAC,qBAAqB,EAC5BC,GAAM,CAAC,qBAAqB,EAC5BC,GAAM,CAAC,qBAAqB,EAC5BC,GAAM,CAAC,qBAAqB,EAC5BC,GAAM,CAAC,IAAK,CAAC,CAAC,WAAW,CAAC,EAAG,CAAC,CAAC,GAAI,YAAa,EAAE,EAAG,CAAC,GAAI,gBAAiB,EAAE,CAAC,EAAG,CAAC,CAAC,GAAI,gBAAiB,EAAE,CAAC,EAAG,CAAC,CAAC,GAAI,gBAAiB,EAAE,CAAC,EAAG,CAAC,CAAC,GAAI,YAAa,EAAE,EAAG,CAAC,GAAI,gBAAiB,EAAE,CAAC,EAAG,CAAC,CAAC,WAAW,EAAG,CAAC,GAAI,WAAY,EAAE,CAAC,EAAG,CAAC,CAAC,WAAY,EAAG,QAAS,KAAK,CAAC,EAAG,CAAC,CAAC,WAAY,QAAS,KAAK,CAAC,CAAC,EACvSC,GAAM,CAAC,IAAK,YAAa,+BAAgC,kBAAmB,kBAAmB,+BAAgC,wBAAyB,8BAA+B,uBAAuB,EACpN,SAASC,GAAgEC,EAAIC,EAAK,CAC5ED,EAAK,GACJE,EAAU,EAAG,OAAQ,EAAE,CAE9B,CACA,SAASC,GAAkDH,EAAIC,EAAK,CAOlE,GANID,EAAK,IACJI,EAAe,EAAG,QAAS,EAAE,EAC7BC,EAAa,EAAG,CAAC,EACjBC,EAAW,EAAGP,GAAiE,EAAG,EAAG,OAAQ,EAAE,EAC/FQ,EAAa,GAEdP,EAAK,EAAG,CACV,IAAMQ,EAAYC,EAAc,CAAC,EAC9BC,EAAW,WAAYF,EAAO,kBAAkB,CAAC,EAAE,gBAAiBA,EAAO,YAAY,CAAC,EAAE,KAAMA,EAAO,QAAQ,EAC/GG,EAAY,MAAOH,EAAO,SAAS,yBAA2B,KAAOA,EAAO,SAAS,EAAE,EACvFI,EAAU,CAAC,EACXC,EAAc,CAACL,EAAO,oBAAsBA,EAAO,SAAS,SAAW,EAAI,EAAE,CAClF,CACF,CACA,SAASM,GAAoCd,EAAIC,EAAK,CAIpD,GAHID,EAAK,GACJM,EAAW,EAAGH,GAAmD,EAAG,EAAG,QAAS,EAAE,EAEnFH,EAAK,EAAG,CACV,IAAMQ,EAAYC,EAAc,EAC7BI,EAAcL,EAAO,kBAAkB,EAAI,EAAI,EAAE,CACtD,CACF,CACA,SAASO,GAAoCf,EAAIC,EAAK,CAChDD,EAAK,GACJE,EAAU,EAAG,MAAO,CAAC,CAE5B,CACA,SAASc,GAAgEhB,EAAIC,EAAK,CAAC,CACnF,SAASgB,GAAkDjB,EAAIC,EAAK,CAIlE,GAHID,EAAK,GACJM,EAAW,EAAGU,GAAiE,EAAG,EAAG,cAAe,EAAE,EAEvGhB,EAAK,EAAG,CACPS,EAAc,CAAC,EAClB,IAAMS,EAAsBC,GAAY,CAAC,EACtCT,EAAW,mBAAoBQ,CAAgB,CACpD,CACF,CACA,SAASE,GAAoCpB,EAAIC,EAAK,CAMpD,GALID,EAAK,IACJI,EAAe,EAAG,MAAO,CAAC,EAC1BE,EAAW,EAAGW,GAAmD,EAAG,EAAG,KAAM,EAAE,EAC/EV,EAAa,GAEdP,EAAK,EAAG,CACV,IAAMQ,EAAYC,EAAc,EAC7BC,EAAW,iCAAkCF,EAAO,kBAAkB,CAAC,EACvEI,EAAU,EACVC,EAAeL,EAAO,wBAAwB,EAAQ,GAAJ,CAAM,CAC7D,CACF,CACA,SAASa,GAAoCrB,EAAIC,EAAK,CAChDD,EAAK,IACJI,EAAe,EAAG,MAAO,GAAI,CAAC,EAC9BC,EAAa,EAAG,CAAC,EACjBE,EAAa,EAEpB,CACA,SAASe,GAAoCtB,EAAIC,EAAK,CAChDD,EAAK,IACJI,EAAe,EAAG,MAAO,GAAI,CAAC,EAC9BC,EAAa,EAAG,CAAC,EACjBE,EAAa,EAEpB,CACA,SAASgB,GAAmDvB,EAAIC,EAAK,CAAC,CACtE,SAASuB,GAAqCxB,EAAIC,EAAK,CAIrD,GAHID,EAAK,GACJM,EAAW,EAAGiB,GAAoD,EAAG,EAAG,cAAe,EAAE,EAE1FvB,EAAK,EAAG,CACPS,EAAc,EACjB,IAAMS,EAAsBC,GAAY,CAAC,EACtCT,EAAW,mBAAoBQ,CAAgB,CACpD,CACF,CACA,SAASO,GAAqCzB,EAAIC,EAAK,CACjDD,EAAK,IACJI,EAAe,EAAG,MAAO,GAAI,CAAC,EAC9BC,EAAa,EAAG,CAAC,EACjBE,EAAa,EAEpB,CACA,SAASmB,GAAqC1B,EAAIC,EAAK,CACjDD,EAAK,IACJI,EAAe,EAAG,MAAO,GAAI,CAAC,EAC9BC,EAAa,EAAG,CAAC,EACjBE,EAAa,EAEpB,CACA,SAASoB,GAAqC3B,EAAIC,EAAK,CACjDD,EAAK,GACJE,EAAU,EAAG,MAAO,EAAE,CAE7B,CACA,SAAS0B,GAA8B5B,EAAIC,EAAK,CAC1CD,EAAK,IACJI,EAAe,EAAG,MAAO,EAAE,EAC3BC,EAAa,EAAG,CAAC,EACjBE,EAAa,EAEpB,CACA,SAASsB,GAA4C7B,EAAIC,EAAK,CAM5D,GALID,EAAK,IACJI,EAAe,EAAG,WAAY,EAAE,EAChC0B,GAAO,CAAC,EACRvB,EAAa,GAEdP,EAAK,EAAG,CACV,IAAMQ,EAAYC,EAAc,CAAC,EAC9BC,EAAW,KAAMF,EAAO,YAAY,EACpCI,EAAU,EACVmB,GAAkBvB,EAAO,SAAS,CACvC,CACF,CACA,SAASwB,GAA8BhC,EAAIC,EAAK,CAS9C,GARID,EAAK,IACJI,EAAe,EAAG,MAAO,EAAE,EAC3BE,EAAW,EAAGuB,GAA6C,EAAG,EAAG,WAAY,EAAE,EAC/ExB,EAAa,EAAG,CAAC,EACjBH,EAAU,EAAG,MAAO,EAAE,EACtBG,EAAa,EAAG,CAAC,EACjBE,EAAa,GAEdP,EAAK,EAAG,CACV,IAAMQ,EAAYC,EAAc,EAC7BG,EAAU,EACVC,EAAcL,EAAO,UAAY,EAAI,EAAE,CAC5C,CACF,CACA,IAAIyB,IAAyB,IAAM,CACjC,MAAMA,CAAS,CACb,OAAO,UAAO,SAA0BC,EAAmB,CACzD,OAAO,IAAKA,GAAqBD,EACnC,EACA,OAAO,UAAyBE,EAAkB,CAChD,KAAMF,EACN,UAAW,CAAC,CAAC,WAAW,CAAC,CAC3B,CAAC,CACH,CACA,OAAOA,CACT,GAAG,EAUGG,GAAyB,IAAIC,EAAe,UAAU,EA6C5D,IAAIC,IAAwB,IAAM,CAChC,MAAMA,CAAQ,CAEZ,MAAQ,QAER,GAAKC,EAAOC,CAAY,EAAE,MAAM,eAAe,EAC/C,OAAO,UAAO,SAAyBC,EAAmB,CACxD,OAAO,IAAKA,GAAqBH,EACnC,EACA,OAAO,UAAyBI,EAAkB,CAChD,KAAMJ,EACN,UAAW,CAAC,CAAC,UAAU,CAAC,EACxB,UAAW,CAAC,EAAG,0BAA2B,iCAAiC,EAC3E,SAAU,EACV,aAAc,SAA8BK,EAAIC,EAAK,CAC/CD,EAAK,IACJE,EAAe,KAAMD,EAAI,EAAE,EAC3BE,EAAY,QAAS,IAAI,EACzBC,EAAY,8BAA+BH,EAAI,QAAU,KAAK,EAErE,EACA,OAAQ,CACN,MAAO,QACP,GAAI,IACN,CACF,CAAC,CACH,CACA,OAAON,CACT,GAAG,EAUGU,GAA0B,IAAIC,EAAe,WAAW,EAkC9D,IAAMC,GAA0B,IAAIC,EAAe,WAAW,EA8B9D,IAAMC,GAAqC,IAAIC,EAAe,qBAAqB,EAc/EC,IAA0C,IAAM,CAClD,MAAMA,CAA0B,CAC9B,YAAcC,EAAOC,CAAU,EAE/B,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASC,EAAO,CAClB,KAAK,UAAYA,EACb,KAAK,eACP,KAAK,cAAc,CAEvB,CACA,UAAY,GAEZ,IAAI,eAAgB,CAClB,OAAO,KAAK,cACd,CACA,IAAI,cAAcA,EAAO,CACvB,KAAK,eAAiBA,EAClB,KAAK,eACP,KAAK,mBAAmB,EAExB,KAAK,oBAAoB,YAAY,CAEzC,CACA,eAAiB,GAEjB,gBAAkBF,EAAOG,EAAoB,EAE7C,QAAUH,EAAOI,CAAM,EAEvB,QAAUJ,EAAOH,EAAqB,EAEtC,oBAAsB,IAAIQ,EAC1B,aAAc,CAAC,CACf,aAAc,CACZ,KAAK,oBAAoB,YAAY,CACvC,CAEA,UAAW,CACT,OAAOC,GAAoB,KAAK,YAAY,aAAa,CAC3D,CAEA,IAAI,SAAU,CACZ,OAAO,KAAK,YAAY,aAC1B,CAEA,eAAgB,CASd,WAAW,IAAM,KAAK,QAAQ,oBAAoB,CAAC,CACrD,CAEA,oBAAqB,CACnB,KAAK,oBAAoB,YAAY,EACrC,KAAK,QAAQ,kBAAkB,IAAM,CACnC,KAAK,oBAAsB,KAAK,gBAAgB,QAAQ,KAAK,YAAY,cAAe,CACtF,IAAK,YACP,CAAC,EAAE,UAAU,IAAM,KAAK,cAAc,CAAC,CACzC,CAAC,CACH,CACA,OAAO,UAAO,SAA2CC,EAAmB,CAC1E,OAAO,IAAKA,GAAqBR,EACnC,EACA,OAAO,UAAyBS,EAAkB,CAChD,KAAMT,EACN,UAAW,CAAC,CAAC,QAAS,4BAA6B,EAAE,CAAC,EACtD,UAAW,CAAC,EAAG,qBAAsB,wBAAwB,EAC7D,SAAU,EACV,aAAc,SAAgDU,EAAIC,EAAK,CACjED,EAAK,GACJE,EAAY,kCAAmCD,EAAI,QAAQ,CAElE,EACA,OAAQ,CACN,SAAU,WACV,cAAe,eACjB,CACF,CAAC,CACH,CACA,OAAOX,CACT,GAAG,EAQH,SAASO,GAAoBM,EAAS,CAKpC,IAAMC,EAASD,EACf,GAAIC,EAAO,eAAiB,KAC1B,OAAOA,EAAO,YAEhB,IAAMC,EAAQD,EAAO,UAAU,EAAI,EACnCC,EAAM,MAAM,YAAY,WAAY,UAAU,EAC9CA,EAAM,MAAM,YAAY,YAAa,6BAA6B,EAClE,SAAS,gBAAgB,YAAYA,CAAK,EAC1C,IAAMC,EAAcD,EAAM,YAC1B,OAAAA,EAAM,OAAO,EACNC,CACT,CAGA,IAAMC,GAAiB,0BAEjBC,GAAqB,gCASvBC,IAAuC,IAAM,CAC/C,MAAMA,CAAuB,CAC3B,YAAclB,EAAOC,CAAU,EAC/B,sBACA,aAAc,CACZ,IAAMkB,EAASnB,EAAOI,CAAM,EACtBgB,EAAWpB,EAAOqB,EAAS,EACjCF,EAAO,kBAAkB,IAAM,CAC7B,KAAK,sBAAwBC,EAAS,OAAO,KAAK,YAAY,cAAe,gBAAiB,KAAK,oBAAoB,CACzH,CAAC,CACH,CACA,UAAW,CACT,IAAME,EAAY,KAAK,YAAY,cAAc,UACjDA,EAAU,OAAOL,EAAkB,EACnCK,EAAU,IAAIN,EAAc,CAC9B,CACA,YAAa,CACX,KAAK,YAAY,cAAc,UAAU,IAAIC,EAAkB,CACjE,CACA,qBAAuBM,GAAS,CAC9B,IAAMD,EAAY,KAAK,YAAY,cAAc,UAC3CE,EAAiBF,EAAU,SAASL,EAAkB,EACxDM,EAAM,eAAiB,WAAaC,GACtCF,EAAU,OAAON,GAAgBC,EAAkB,CAEvD,EACA,aAAc,CACZ,KAAK,sBAAsB,CAC7B,CACA,OAAO,UAAO,SAAwCV,EAAmB,CACvE,OAAO,IAAKA,GAAqBW,EACnC,EACA,OAAO,UAAyBV,EAAkB,CAChD,KAAMU,EACN,UAAW,CAAC,CAAC,MAAO,yBAA0B,EAAE,CAAC,EACjD,UAAW,CAAC,EAAG,iBAAiB,CAClC,CAAC,CACH,CACA,OAAOA,CACT,GAAG,EAWCO,IAA2C,IAAM,CACnD,MAAMA,CAA2B,CAC/B,YAAczB,EAAOC,CAAU,EAC/B,QAAUD,EAAOI,CAAM,EAEvB,KAAO,GACP,OACA,aAAc,CAAC,CACf,iBAAkB,CAChB,IAAMsB,EAAQ,KAAK,YAAY,cAAc,cAAc,qBAAqB,EAC5EA,GACF,KAAK,YAAY,cAAc,UAAU,IAAI,+BAA+B,EACxE,OAAO,uBAA0B,aACnCA,EAAM,MAAM,mBAAqB,KACjC,KAAK,QAAQ,kBAAkB,IAAM,CACnC,sBAAsB,IAAMA,EAAM,MAAM,mBAAqB,EAAE,CACjE,CAAC,IAGH,KAAK,YAAY,cAAc,UAAU,IAAI,+BAA+B,CAEhF,CACA,eAAeC,EAAY,CACrB,CAAC,KAAK,MAAQ,CAACA,EACjB,KAAK,OAAO,cAAc,MAAM,MAAQ,GAIxC,KAAK,OAAO,cAAc,MAAM,MAAQ,QAAQA,CAAU,kEAE9D,CACA,OAAO,UAAO,SAA4CpB,EAAmB,CAC3E,OAAO,IAAKA,GAAqBkB,EACnC,EACA,OAAO,UAAyBG,EAAkB,CAChD,KAAMH,EACN,UAAW,CAAC,CAAC,MAAO,6BAA8B,EAAE,CAAC,EACrD,UAAW,SAA0ChB,EAAIC,EAAK,CAI5D,GAHID,EAAK,GACJoB,EAAYC,GAAK,CAAC,EAEnBrB,EAAK,EAAG,CACV,IAAIsB,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAMvB,EAAI,OAASqB,EAAG,MAC/D,CACF,EACA,UAAW,CAAC,EAAG,qBAAqB,EACpC,SAAU,EACV,aAAc,SAAiDtB,EAAIC,EAAK,CAClED,EAAK,GACJE,EAAY,+BAAgCD,EAAI,IAAI,CAE3D,EACA,OAAQ,CACN,KAAM,CAAC,EAAG,iCAAkC,MAAM,CACpD,EACA,MAAOwB,GACP,mBAAoBC,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,QAAS,EAAE,EAAG,CAAC,EAAG,sBAAuB,8BAA8B,EAAG,CAAC,EAAG,sBAAuB,4BAA4B,EAAG,CAAC,EAAG,sBAAuB,+BAA+B,CAAC,EACzM,SAAU,SAA6C1B,EAAIC,EAAK,CAC1DD,EAAK,IACJ2B,EAAgB,EAChBC,EAAU,EAAG,MAAO,CAAC,EACrBC,EAAe,EAAG,MAAO,EAAG,CAAC,EAC7BC,EAAa,CAAC,EACdC,EAAa,EACbH,EAAU,EAAG,MAAO,CAAC,EAE5B,EACA,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOZ,CACT,GAAG,EAMCgB,IAAoC,IAAM,CAC5C,MAAMA,CAAoB,CAExB,MAKA,aAEA,GAEA,YAEA,UAEA,QAEA,MAEA,iBAEA,SAEA,SAEA,WAMA,YAKA,WAKA,oBAMA,yBACA,OAAO,UAAO,SAAqClC,EAAmB,CACpE,OAAO,IAAKA,GAAqBkC,EACnC,EACA,OAAO,UAAyBjC,EAAkB,CAChD,KAAMiC,CACR,CAAC,CACH,CACA,OAAOA,CACT,GAAG,EAuBH,IAAMC,EAA8B,IAAIC,EAAe,cAAc,EAK/DC,GAA8C,IAAID,EAAe,gCAAgC,EAEjGE,GAAqB,OAKrBC,GAAsB,OAEtBC,GAA2B,QAM3BC,GAA0C,mBAE5CC,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,YAAcC,EAAOC,CAAU,EAC/B,mBAAqBD,EAAOE,CAAiB,EAC7C,KAAOF,EAAOG,CAAc,EAC5B,UAAYH,EAAOI,EAAQ,EAC3B,aAAeJ,EAAOK,CAAY,EAClC,QAAUL,EAAOM,CAAM,EACvB,UAAYN,EAAOO,EAAQ,EAC3B,UAAYP,EAAON,GAAgC,CACjD,SAAU,EACZ,CAAC,EACD,WACA,qBACA,qBACA,qBACA,qBACA,eACA,gBACA,YACA,kBACA,gBACA,gBACA,eACA,cACA,YAAcc,GAAaC,EAAQ,EAEnC,IAAI,oBAAqB,CACvB,OAAO,KAAK,mBACd,CACA,IAAI,mBAAmBC,EAAO,CAC5B,KAAK,oBAAsBC,GAAsBD,CAAK,CACxD,CACA,oBAAsB,GAQtB,MAAQ,UAER,IAAI,YAAa,CACf,OAAO,KAAK,aAAe,KAAK,WAAW,YAAcd,EAC3D,CACA,IAAI,WAAWc,EAAO,CAChBA,IAAU,KAAK,cACjB,KAAK,YAAcA,EAKnB,KAAK,mBAAmB,aAAa,EAEzC,CACA,YAEA,IAAI,YAAa,CACf,OAAO,KAAK,WACd,CACA,IAAI,WAAWA,EAAO,CACpB,IAAME,EAAW,KAAK,YAChBC,EAAgBH,GAAS,KAAK,WAAW,YAAcf,GAM7D,KAAK,YAAckB,EACf,KAAK,cAAgB,WAAa,KAAK,cAAgBD,IAIzD,KAAK,+BAAiC,GAE1C,CACA,YAAcjB,GAMd,IAAI,iBAAkB,CACpB,OAAO,KAAK,kBAAoB,KAAK,WAAW,iBAAmBE,EACrE,CACA,IAAI,gBAAgBa,EAAO,CACzB,KAAK,iBAAmBA,GAAS,KAAK,WAAW,iBAAmBb,EACtE,CACA,iBAAmB,KAEnB,IAAI,WAAY,CACd,OAAO,KAAK,UACd,CACA,IAAI,UAAUa,EAAO,CACnB,KAAK,WAAaA,EAClB,KAAK,cAAc,CACrB,CACA,WAAa,GACb,eAAiB,GACjB,eAAiB,GACjB,eAAiB,GACjB,eAAiB,GAEjB,SAAW,KAAK,aAAa,MAAM,2BAA2B,EAE9D,aAAe,KAAK,aAAa,MAAM,eAAe,EAEtD,IAAI,UAAW,CACb,OAAO,KAAK,2BAA6B,KAAK,iBAChD,CACA,IAAI,SAASA,EAAO,CAClB,KAAK,0BAA4BA,CACnC,CACA,WAAa,IAAII,EACjB,WAAa,KACb,0BACA,+BAAiC,GACjC,iBAAmB,KACnB,4BAA8B,KAC9B,cACA,cACA,oBACA,oBACA,aAAc,CACZ,IAAMC,EAAW,KAAK,UAClBA,IACEA,EAAS,aACX,KAAK,WAAaA,EAAS,YAE7B,KAAK,oBAAsB,EAAQA,GAAU,mBACzCA,EAAS,QACX,KAAK,MAAQA,EAAS,QAG1B,KAAK,oBAAsBf,EAAOgB,EAAuB,CACvD,SAAU,EACZ,CAAC,IAAM,gBACT,CACA,iBAAkB,CAGhB,KAAK,kBAAkB,EAClB,KAAK,qBACR,KAAK,QAAQ,kBAAkB,IAAM,CAEnC,WAAW,IAAM,CACf,KAAK,YAAY,cAAc,UAAU,IAAI,mCAAmC,CAClF,EAAG,GAAG,CACR,CAAC,EAIH,KAAK,mBAAmB,cAAc,CACxC,CACA,oBAAqB,CACnB,KAAK,wBAAwB,EAC7B,KAAK,qBAAqB,EAC1B,KAAK,2BAA2B,EAChC,KAAK,2CAA2C,CAClD,CACA,uBAAwB,CACtB,KAAK,wBAAwB,EAGzB,KAAK,WAAa,KAAK,mBACzB,KAAK,mBAAmB,KAAK,gBAAgB,EAEzC,KAAK,SAAS,WAAa,KAAK,SAAS,UAAU,UACrD,KAAK,4BAA8B,KAAK,SAAS,UAAU,QAAQ,WAErE,KAAK,iBAAmB,KAAK,UAG3B,KAAK,SAAS,WAAa,KAAK,SAAS,UAAU,SAEjC,KAAK,SAAS,UAAU,QAAQ,YAGhC,KAAK,6BACvB,KAAK,mBAAmB,aAAa,CAG3C,CACA,aAAc,CACZ,KAAK,eAAe,YAAY,EAChC,KAAK,eAAe,YAAY,EAChC,KAAK,qBAAqB,YAAY,EACtC,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,CAC3B,CAIA,WAAaC,GAAS,IAAM,KAAK,kBAAkB,EAAI,KAAK,SAAW,IAAI,EAK3E,2BAA4B,CAC1B,OAAO,KAAK,YAAc,KAAK,WACjC,CAEA,sBAAuB,CASjB,KAAK,kBAAkB,IACzB,KAAK,WAAa,SAEtB,CAEA,mBAAmBC,EAAiB,CAClC,IAAMC,EAAU,KAAK,SACfC,EAAc,2BAChBF,GACF,KAAK,YAAY,cAAc,UAAU,OAAOE,EAAcF,EAAgB,WAAW,EAEvFC,EAAQ,aACV,KAAK,YAAY,cAAc,UAAU,IAAIC,EAAcD,EAAQ,WAAW,EAGhF,KAAK,eAAe,YAAY,EAChC,KAAK,cAAgBA,EAAQ,aAAa,UAAU,IAAM,CACxD,KAAK,kBAAkB,EACvB,KAAK,mBAAmB,aAAa,CACvC,CAAC,EAED,KAAK,qBAAqB,YAAY,EACtC,KAAK,oBAAsBA,EAAQ,aAAa,KAAKE,EAAU,CAAC,OAAW,MAAS,CAAC,EAAGC,EAAI,IAAM,CAACH,EAAQ,WAAYA,EAAQ,mBAAmB,CAAC,EAAGI,GAAS,EAAGC,EAAO,CAAC,CAAC,CAACC,EAAgBC,CAAe,EAAG,CAACC,EAAmBC,CAAkB,CAAC,IAC5OH,IAAmBE,GAAqBD,IAAoBE,CACpE,CAAC,EAAE,UAAU,IAAM,KAAK,oBAAoB,CAAC,EAC9C,KAAK,eAAe,YAAY,EAE5BT,EAAQ,WAAaA,EAAQ,UAAU,eACzC,KAAK,cAAgBA,EAAQ,UAAU,aAAa,KAAKU,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,KAAK,mBAAmB,aAAa,CAAC,EAE/I,CACA,4BAA6B,CAC3B,KAAK,eAAiB,CAAC,CAAC,KAAK,gBAAgB,KAAKC,GAAK,CAACA,EAAE,OAAO,EACjE,KAAK,eAAiB,CAAC,CAAC,KAAK,gBAAgB,KAAKA,GAAKA,EAAE,OAAO,EAChE,KAAK,eAAiB,CAAC,CAAC,KAAK,gBAAgB,KAAKC,GAAK,CAACA,EAAE,OAAO,EACjE,KAAK,eAAiB,CAAC,CAAC,KAAK,gBAAgB,KAAKA,GAAKA,EAAE,OAAO,CAClE,CAEA,4BAA6B,CAC3B,KAAK,2BAA2B,EAIhCC,EAAM,KAAK,gBAAgB,QAAS,KAAK,gBAAgB,OAAO,EAAE,UAAU,IAAM,CAChF,KAAK,2BAA2B,EAChC,KAAK,mBAAmB,aAAa,CACvC,CAAC,CACH,CAMA,sBAAuB,CAErB,KAAK,cAAc,QAAQ,UAAU,IAAM,CACzC,KAAK,cAAc,EACnB,KAAK,mBAAmB,aAAa,CACvC,CAAC,EAED,KAAK,eAAe,QAAQ,UAAU,IAAM,CAC1C,KAAK,oBAAoB,EACzB,KAAK,mBAAmB,aAAa,CACvC,CAAC,EAED,KAAK,eAAe,EACpB,KAAK,oBAAoB,CAC3B,CAEA,yBAA0B,CACnB,KAAK,QAGZ,CACA,mBAAoB,CAMd,KAAK,SAAS,SAAW,CAAC,KAAK,YACjC,KAAK,WAAa,GAClB,KAAK,aAAa,SAAS,GAClB,CAAC,KAAK,SAAS,UAAY,KAAK,YAAc,KAAK,aAAe,QAC3E,KAAK,WAAa,GAClB,KAAK,aAAa,WAAW,GAE/B,KAAK,YAAY,cAAc,UAAU,OAAO,0BAA2B,KAAK,SAAS,OAAO,CAClG,CAOA,4CAA6C,CAG3C,KAAK,gBAAgB,QAAQ,UAAU,IAAM,KAAK,+BAAiC,EAAI,EAGvFC,GAAY,IAAM,CACZ,KAAK,iCACP,KAAK,+BAAiC,GACtC,KAAK,0BAA0B,EAEnC,EAAG,CACD,SAAU,KAAK,SACjB,CAAC,EACD,KAAK,KAAK,OAAO,KAAKJ,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,KAAK,+BAAiC,EAAI,CAC9G,CAEA,oBAAqB,CACnB,OAAO,KAAK,aAAe,QAC7B,CACA,aAAc,CACZ,OAAO,KAAK,aAAe,SAC7B,CASA,yBAA0B,CACxB,MAAO,CAAC,KAAK,UAAU,WAAa,KAAK,gBAAgB,QAAU,CAAC,KAAK,kBAAkB,CAC7F,CACA,kBAAoBZ,GAAS,IAAM,CAAC,CAAC,KAAK,YAAY,CAAC,EACvD,mBAAoB,CAClB,OAAK,KAAK,kBAAkB,EAGrB,KAAK,SAAS,kBAAoB,KAAK,mBAAmB,EAFxD,EAGX,CAKA,eAAeiB,EAAM,CACnB,IAAMf,EAAU,KAAK,SAAW,KAAK,SAAS,UAAY,KAC1D,OAAOA,GAAWA,EAAQe,CAAI,CAChC,CAEA,uBAAwB,CACtB,OAAO,KAAK,gBAAkB,KAAK,eAAe,OAAS,GAAK,KAAK,SAAS,WAAa,QAAU,MACvG,CAEA,qBAAsB,CACpB,KAAK,0BAA0B,CACjC,CAEA,2BAA4B,CACtB,CAAC,KAAK,YAAY,GAAK,CAAC,KAAK,gBAAkB,CAAC,KAAK,kBAAkB,EACzE,KAAK,iBAAiB,eAAe,CAAC,EAEtC,KAAK,iBAAiB,eAAe,KAAK,eAAe,SAAS,CAAC,CAEvE,CAEA,eAAgB,CACd,KAAK,eAAe,EACpB,KAAK,oBAAoB,CAC3B,CAOA,gBAAiB,CACX,KAAK,aAiBX,CAKA,qBAAsB,CACpB,GAAI,KAAK,SAAU,CACjB,IAAIC,EAAM,CAAC,EAKX,GAHI,KAAK,SAAS,qBAAuB,OAAO,KAAK,SAAS,qBAAwB,UACpFA,EAAI,KAAK,GAAG,KAAK,SAAS,oBAAoB,MAAM,GAAG,CAAC,EAEtD,KAAK,sBAAsB,IAAM,OAAQ,CAC3C,IAAMC,EAAY,KAAK,cAAgB,KAAK,cAAc,KAAKC,GAAQA,EAAK,QAAU,OAAO,EAAI,KAC3FC,EAAU,KAAK,cAAgB,KAAK,cAAc,KAAKD,GAAQA,EAAK,QAAU,KAAK,EAAI,KACzFD,EACFD,EAAI,KAAKC,EAAU,EAAE,EACZ,KAAK,YACdD,EAAI,KAAK,KAAK,YAAY,EAExBG,GACFH,EAAI,KAAKG,EAAQ,EAAE,CAEvB,MAAW,KAAK,gBACdH,EAAI,KAAK,GAAG,KAAK,eAAe,IAAII,GAASA,EAAM,EAAE,CAAC,EAExD,KAAK,SAAS,kBAAkBJ,CAAG,CACrC,CACF,CAUA,2BAA4B,CAC1B,GAAI,CAAC,KAAK,YAAY,GAAK,CAAC,KAAK,eAC/B,OAEF,IAAMK,EAAgB,KAAK,eAAe,QAG1C,GAAI,EAAE,KAAK,sBAAwB,KAAK,sBAAuB,CAC7DA,EAAc,MAAM,UAAY,GAChC,MACF,CAGA,GAAI,CAAC,KAAK,iBAAiB,EAAG,CAC5B,KAAK,+BAAiC,GACtC,MACF,CACA,IAAMC,EAAsB,KAAK,sBAAsB,cACjDC,EAAsB,KAAK,sBAAsB,cACjDC,EAAsB,KAAK,sBAAsB,cACjDC,EAAsB,KAAK,sBAAsB,cACjDC,EAA2BJ,GAAqB,sBAAsB,EAAE,OAAS,EACjFK,EAA2BJ,GAAqB,sBAAsB,EAAE,OAAS,EACjFK,GAA2BJ,GAAqB,sBAAsB,EAAE,OAAS,EACjFK,GAA2BJ,GAAqB,sBAAsB,EAAE,OAAS,EAGjFK,GAAS,KAAK,KAAK,QAAU,MAAQ,KAAO,IAC5CC,GAAc,GAAGL,EAA2BC,CAAwB,KAEpEK,GAAwB,QAAQF,EAAM,OAAOC,EAAW,qDAI9DV,EAAc,MAAM,UAAY;AAAA;AAAA,UAE5B1C,EAAuC,eAAeqD,EAAqB;AAAA,OAG/E,IAAMC,GAAuBP,EAA2BC,EAA2BC,GAA2BC,GAC9G,KAAK,YAAY,cAAc,MAAM,YAAY,mCAAoC,eAAeI,EAAoB,KAAK,CAC/H,CAEA,kBAAmB,CACjB,IAAMC,EAAU,KAAK,YAAY,cACjC,GAAIA,EAAQ,YAAa,CACvB,IAAMC,EAAWD,EAAQ,YAAY,EAGrC,OAAOC,GAAYA,IAAaD,CAClC,CAGA,OAAO,SAAS,gBAAgB,SAASA,CAAO,CAClD,CACA,OAAO,UAAO,SAA8BE,EAAmB,CAC7D,OAAO,IAAKA,GAAqBxD,EACnC,EACA,OAAO,UAAyByD,EAAkB,CAChD,KAAMzD,EACN,UAAW,CAAC,CAAC,gBAAgB,CAAC,EAC9B,eAAgB,SAAqC0D,EAAIC,EAAKC,EAAU,CAStE,GARIF,EAAK,IACJG,GAAqBD,EAAUD,EAAI,YAAajD,GAAU,CAAC,EAC3DoD,EAAeF,EAAUG,GAAqB,CAAC,EAC/CD,EAAeF,EAAUI,GAAY,CAAC,EACtCF,EAAeF,EAAUK,GAAY,CAAC,EACtCH,EAAeF,EAAUM,GAAW,CAAC,EACrCJ,EAAeF,EAAUO,GAAS,CAAC,GAEpCT,EAAK,EAAG,CACPU,GAAe,EAClB,IAAIC,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,kBAAoBU,EAAG,OACrEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,gBAAkBU,GAChEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,gBAAkBU,GAChEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,eAAiBU,GAC/DC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,cAAgBU,EACnE,CACF,EACA,UAAW,SAA4BX,EAAIC,EAAK,CAW9C,GAVID,EAAK,IACJc,EAAYC,GAAK,CAAC,EAClBD,EAAYE,GAAK,CAAC,EAClBF,EAAYG,GAAK,CAAC,EAClBH,EAAYI,GAAK,CAAC,EAClBJ,EAAYK,GAAK,CAAC,EAClBL,EAAYM,GAA2B,CAAC,EACxCN,EAAYO,GAA4B,CAAC,EACzCP,EAAYQ,GAAwB,CAAC,GAEtCtB,EAAK,EAAG,CACV,IAAIW,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,WAAaU,EAAG,OAC9DC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,qBAAuBU,EAAG,OACxEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,qBAAuBU,EAAG,OACxEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,qBAAuBU,EAAG,OACxEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,qBAAuBU,EAAG,OACxEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,eAAiBU,EAAG,OAClEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,gBAAkBU,EAAG,OACnEC,EAAeD,EAAQE,EAAY,CAAC,IAAMZ,EAAI,YAAcU,EAAG,MACpE,CACF,EACA,UAAW,CAAC,EAAG,oBAAoB,EACnC,SAAU,GACV,aAAc,SAAmCX,EAAIC,EAAK,CACpDD,EAAK,GACJuB,EAAY,wCAAyCtB,EAAI,mBAAmB,CAAC,EAAE,qCAAsCA,EAAI,cAAc,EAAE,qCAAsCA,EAAI,cAAc,EAAE,yBAA0BA,EAAI,SAAS,UAAU,EAAE,0BAA2BA,EAAI,SAAS,QAAQ,EAAE,4BAA6BA,EAAI,SAAS,UAAU,EAAE,iCAAkCA,EAAI,YAAc,MAAM,EAAE,oCAAqCA,EAAI,YAAc,SAAS,EAAE,kCAAmCA,EAAI,kBAAkB,GAAK,CAACA,EAAI,kBAAkB,CAAC,EAAE,cAAeA,EAAI,SAAS,OAAO,EAAE,cAAeA,EAAI,QAAU,UAAYA,EAAI,QAAU,MAAM,EAAE,aAAcA,EAAI,QAAU,QAAQ,EAAE,WAAYA,EAAI,QAAU,MAAM,EAAE,eAAgBA,EAAI,eAAe,WAAW,CAAC,EAAE,aAAcA,EAAI,eAAe,SAAS,CAAC,EAAE,cAAeA,EAAI,eAAe,UAAU,CAAC,EAAE,WAAYA,EAAI,eAAe,OAAO,CAAC,EAAE,WAAYA,EAAI,eAAe,OAAO,CAAC,EAAE,aAAcA,EAAI,eAAe,SAAS,CAAC,EAAE,aAAcA,EAAI,eAAe,SAAS,CAAC,CAE9hC,EACA,OAAQ,CACN,mBAAoB,qBACpB,MAAO,QACP,WAAY,aACZ,WAAY,aACZ,gBAAiB,kBACjB,UAAW,WACb,EACA,SAAU,CAAC,cAAc,EACzB,SAAU,CAAIuB,EAAmB,CAAC,CAChC,QAASzF,EACT,YAAaO,CACf,EAAG,CACD,QAASmF,GACT,YAAanF,CACf,CAAC,CAAC,CAAC,EACH,mBAAoBoF,GACpB,MAAO,GACP,KAAM,GACN,OAAQ,CAAC,CAAC,gBAAiB,EAAE,EAAG,CAAC,YAAa,EAAE,EAAG,CAAC,sBAAuB,EAAE,EAAG,CAAC,sBAAuB,EAAE,EAAG,CAAC,sBAAuB,EAAE,EAAG,CAAC,sBAAuB,EAAE,EAAG,CAAC,EAAG,6BAA8B,iBAAkB,EAAG,OAAO,EAAG,CAAC,EAAG,kCAAkC,EAAG,CAAC,EAAG,yBAAyB,EAAG,CAAC,6BAA8B,GAAI,EAAG,gCAAgC,EAAG,CAAC,EAAG,gCAAgC,EAAG,CAAC,EAAG,gCAAgC,EAAG,CAAC,EAAG,0BAA0B,EAAG,CAAC,EAAG,kBAAkB,EAAG,CAAC,EAAG,gCAAgC,EAAG,CAAC,EAAG,gCAAgC,EAAG,CAAC,yBAA0B,EAAE,EAAG,CAAC,EAAG,uCAAwC,iCAAiC,EAAG,CAAC,EAAG,kCAAkC,EAAG,CAAC,EAAG,iCAAiC,EAAG,CAAC,4BAA6B,GAAI,EAAG,WAAY,gBAAiB,IAAI,EAAG,CAAC,cAAe,OAAQ,EAAG,qCAAsC,8BAA8B,EAAG,CAAC,EAAG,IAAI,EAAG,CAAC,EAAG,gCAAgC,CAAC,EAC5+B,SAAU,SAA+B1B,EAAIC,EAAK,CAChD,GAAID,EAAK,EAAG,CACV,IAAM2B,EAASC,GAAiB,EAC7BC,EAAgBC,EAAG,EACnBC,EAAW,EAAGC,GAAqC,EAAG,EAAG,cAAe,KAAM,EAAMC,EAAsB,EAC1GC,EAAe,EAAG,MAAO,EAAG,CAAC,EAC7BC,EAAW,QAAS,SAAoDC,EAAQ,CACjF,OAAGC,GAAcV,CAAG,EACVW,GAAYrC,EAAI,SAAS,iBAAiBmC,CAAM,CAAC,CAC7D,CAAC,EACEL,EAAW,EAAGQ,GAAqC,EAAG,EAAG,MAAO,CAAC,EACjEL,EAAe,EAAG,MAAO,CAAC,EAC1BH,EAAW,EAAGS,GAAqC,EAAG,EAAG,MAAO,CAAC,EAAE,EAAGC,GAAqC,EAAG,EAAG,MAAO,EAAE,EAAE,EAAGC,GAAqC,EAAG,EAAG,MAAO,EAAE,EACnLR,EAAe,EAAG,MAAO,EAAE,EAC3BH,EAAW,GAAIY,GAAsC,EAAG,EAAG,KAAM,EAAE,EACnEC,EAAa,EAAE,EACfC,EAAa,EACbd,EAAW,GAAIe,GAAsC,EAAG,EAAG,MAAO,EAAE,EAAE,GAAIC,GAAsC,EAAG,EAAG,MAAO,EAAE,EAC/HF,EAAa,EACbd,EAAW,GAAIiB,GAAsC,EAAG,EAAG,MAAO,EAAE,EACpEH,EAAa,EACbX,EAAe,GAAI,MAAO,EAAE,EAC5BH,EAAW,GAAIkB,GAA+B,EAAG,EAAG,MAAO,EAAE,EAAE,GAAIC,GAA+B,EAAG,EAAG,MAAO,EAAE,EACjHL,EAAa,CAClB,CACA,GAAI7C,EAAK,EAAG,CACV,IAAImD,EACDC,EAAU,CAAC,EACX7B,EAAY,yBAA0B,CAACtB,EAAI,YAAY,CAAC,EAAE,2BAA4BA,EAAI,YAAY,CAAC,EAAE,2BAA4B,CAACA,EAAI,kBAAkB,CAAC,EAAE,2BAA4BA,EAAI,SAAS,QAAQ,EAAE,0BAA2BA,EAAI,SAAS,UAAU,EACpQmD,EAAU,CAAC,EACXC,EAAc,CAACpD,EAAI,YAAY,GAAK,CAACA,EAAI,SAAS,SAAW,EAAI,EAAE,EACnEmD,EAAU,CAAC,EACXC,EAAcpD,EAAI,YAAY,EAAI,EAAI,EAAE,EACxCmD,EAAU,EACVC,EAAcpD,EAAI,eAAiB,EAAI,EAAE,EACzCmD,EAAU,EACVC,EAAcpD,EAAI,eAAiB,EAAI,EAAE,EACzCmD,EAAU,CAAC,EACXC,EAAc,CAACpD,EAAI,YAAY,GAAKA,EAAI,wBAAwB,EAAI,GAAK,EAAE,EAC3EmD,EAAU,CAAC,EACXC,EAAcpD,EAAI,eAAiB,GAAK,EAAE,EAC1CmD,EAAU,EACVC,EAAcpD,EAAI,eAAiB,GAAK,EAAE,EAC1CmD,EAAU,EACVC,EAAepD,EAAI,YAAY,EAAS,GAAL,EAAO,EAC1CmD,EAAU,EACV7B,EAAY,4CAA6CtB,EAAI,kBAAoB,SAAS,EAC1FmD,EAAU,EACVC,GAAeF,EAAWlD,EAAI,sBAAsB,KAAO,QAAU,GAAKkD,IAAa,OAAS,GAAK,EAAE,CAC5G,CACF,EACA,aAAc,CAAC/B,GAA2BC,GAA4BiC,GAAkBhC,GAAwBb,EAAO,EACvH,OAAQ,CAAC,i+hCAAy+hC,EACl/hC,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOnE,CACT,GAAG,ECpyCH,IAAMiH,GAAM,CAAC,IAAK,CAAC,CAAC,iBAAiB,EAAG,CAAC,GAAI,gBAAiB,EAAE,CAAC,EAAG,CAAC,CAAC,wBAAwB,EAAG,CAAC,GAAI,gBAAiB,EAAE,EAAG,CAAC,GAAI,sBAAuB,EAAE,CAAC,CAAC,EACtJC,GAAM,CAAC,IAAK,mCAAoC,8DAA8D,EACpH,SAASC,GAA+BC,EAAIC,EAAK,CAC3CD,EAAK,IACJE,EAAe,EAAG,OAAQ,CAAC,EAC3BC,EAAa,EAAG,CAAC,EACjBC,EAAa,EAEpB,CACA,SAASC,GAA+BL,EAAIC,EAAK,CAC3CD,EAAK,IACJE,EAAe,EAAG,OAAQ,CAAC,EAC3BC,EAAa,EAAG,CAAC,EACjBC,EAAa,EAEpB,CAmBA,IAAME,GAAM,02hBACNC,GAAM,CAAC,CAAC,CAAC,iBAAiB,EAAG,CAAC,GAAI,gBAAiB,EAAE,CAAC,EAAG,CAAC,CAAC,GAAI,mBAAoB,EAAE,CAAC,EAAG,IAAK,CAAC,CAAC,wBAAwB,EAAG,CAAC,GAAI,gBAAiB,EAAE,EAAG,CAAC,GAAI,sBAAuB,EAAE,CAAC,CAAC,EACtLC,GAAM,CAAC,mCAAoC,qBAAsB,IAAK,8DAA8D,EAC1I,SAASC,GAAkCC,EAAIC,EAAK,CAC9CD,EAAK,GACJE,EAAU,EAAG,OAAQ,CAAC,CAE7B,CACA,SAASC,GAAkCH,EAAIC,EAAK,CAC9CD,EAAK,IACJI,EAAe,EAAG,OAAQ,CAAC,EAC3BC,EAAa,CAAC,EACdC,EAAa,EAEpB,CACA,SAASC,GAAgDP,EAAIC,EAAK,CAC5DD,EAAK,GACJK,EAAa,EAAG,CAAC,CAExB,CACA,SAASG,GAAgDR,EAAIC,EAAK,CAC5DD,EAAK,GACJE,EAAU,EAAG,OAAQ,CAAC,CAE7B,CACA,SAASO,GAAkCT,EAAIC,EAAK,CAIlD,GAHID,EAAK,GACJU,EAAW,EAAGH,GAAiD,EAAG,CAAC,EAAE,EAAGC,GAAiD,EAAG,EAAG,OAAQ,CAAC,EAEzIR,EAAK,EAAG,CACV,IAAMW,EAAYC,EAAc,EAC7BC,EAAcF,EAAO,iBAAmB,EAAI,CAAC,CAClD,CACF,CACA,SAASG,GAAkCd,EAAIC,EAAK,CAC9CD,EAAK,GACJK,EAAa,EAAG,CAAC,CAExB,CACA,SAASU,GAAkCf,EAAIC,EAAK,CAC9CD,EAAK,IACJI,EAAe,EAAG,OAAQ,CAAC,EAC3BC,EAAa,EAAG,CAAC,EACjBC,EAAa,EAEpB,CACA,IAAMU,GAAM,CAAC,GAAG,EACVC,GAAM,+2BACNC,GAAyC,IAAIC,EAAe,4BAA6B,CAC7F,WAAY,OACZ,QAAS,KAAO,CACd,kBAAmB,CAAC,EAAK,CAC3B,EACF,CAAC,EAMKC,GAA+B,IAAID,EAAe,eAAe,EAMjEE,GAAsC,IAAIF,EAAe,qBAAqB,EAM9EG,GAA+B,IAAIH,EAAe,eAAe,EAIjEI,GAAwB,IAAIJ,EAAe,SAAS,EAMtDK,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAClB,YAAcC,EAAOC,CAAU,EAC/B,YAAcD,EAAOF,EAAQ,EAE7B,cAAgB,GAEhB,WAAa,GAEb,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,KAAK,aAAa,UAAY,EACzD,CACA,IAAI,SAASI,EAAO,CAClB,KAAK,UAAYA,CACnB,CACA,UAAY,GAEZ,SAAW,GAIX,wBAA0B,GAI1B,uBAAwB,CAGtB,OAAO,KAAK,UAAY,CAAC,KAAK,wBAA0B,GAAK,IAC/D,CAIA,cAAe,CACb,OAAO,KAAK,UAAY,CAAC,KAAK,yBAA2B,CAAC,KAAK,cAAgB,KAAO,KAAK,SAAS,SAAS,CAC/G,CACA,aAAc,CACZF,EAAOG,EAAsB,EAAE,KAAKC,EAAuB,EACvD,KAAK,YAAY,cAAc,WAAa,UAC9C,KAAK,YAAY,cAAc,aAAa,OAAQ,QAAQ,CAEhE,CACA,OAAQ,CACN,KAAK,YAAY,cAAc,MAAM,CACvC,CACA,aAAaC,EAAO,CACd,CAAC,KAAK,UAAY,KAAK,eAAiB,KAAK,aAC/CA,EAAM,eAAe,EACrB,KAAK,YAAY,gCAAgC,EAErD,CACA,eAAeA,EAAO,EACfA,EAAM,UAAY,IAASA,EAAM,UAAY,KAAU,CAAC,KAAK,UAAY,KAAK,eAAiB,KAAK,YAAc,CAAC,KAAK,YAAY,aACvIA,EAAM,eAAe,EACrB,KAAK,YAAY,gCAAgC,EAErD,CACA,OAAO,UAAO,SAA+BC,EAAmB,CAC9D,OAAO,IAAKA,GAAqBP,EACnC,EACA,OAAO,UAAyBQ,EAAkB,CAChD,KAAMR,EACN,UAAW,CAAC,CAAC,GAAI,gBAAiB,EAAE,CAAC,EACrC,UAAW,CAAC,EAAG,6BAA8B,qBAAqB,EAClE,SAAU,EACV,aAAc,SAAoCxB,EAAIC,EAAK,CACrDD,EAAK,GACJiC,EAAW,QAAS,SAAgDC,EAAQ,CAC7E,OAAOjC,EAAI,aAAaiC,CAAM,CAChC,CAAC,EAAE,UAAW,SAAkDA,EAAQ,CACtE,OAAOjC,EAAI,eAAeiC,CAAM,CAClC,CAAC,EAEClC,EAAK,IACJmC,EAAY,WAAYlC,EAAI,aAAa,CAAC,EAAE,WAAYA,EAAI,sBAAsB,CAAC,EAAE,gBAAiBA,EAAI,QAAQ,EAClHmC,EAAY,sCAAuCnC,EAAI,UAAU,EAAE,6CAA8C,CAACA,EAAI,aAAa,EAAE,uCAAwC,CAACA,EAAI,UAAU,EAEnM,EACA,OAAQ,CACN,cAAe,gBACf,SAAU,CAAC,EAAG,WAAY,WAAYoC,CAAgB,EACtD,SAAU,CAAC,EAAG,WAAY,WAAYV,GAASA,GAAS,KAAO,GAAKW,GAAgBX,CAAK,CAAC,EAC1F,wBAAyB,yBAC3B,CACF,CAAC,CACH,CACA,OAAOH,CACT,GAAG,EAuEH,IAAIe,IAA8B,IAAM,CACtC,MAAMA,UAAsBC,EAAc,CACxC,WAAa,GACb,aAAaC,EAAO,CACb,KAAK,WACRA,EAAM,gBAAgB,EACtBA,EAAM,eAAe,EACrB,KAAK,YAAY,OAAO,EAE5B,CACA,eAAeA,EAAO,EACfA,EAAM,UAAY,IAASA,EAAM,UAAY,KAAU,CAAC,KAAK,WAChEA,EAAM,gBAAgB,EACtBA,EAAM,eAAe,EACrB,KAAK,YAAY,OAAO,EAE5B,CACA,OAAO,WAAuB,IAAM,CAClC,IAAIC,EACJ,OAAO,SAA+BC,EAAmB,CACvD,OAAQD,IAA+BA,EAAgCE,GAAsBL,CAAa,IAAII,GAAqBJ,CAAa,CAClJ,CACF,GAAG,EACH,OAAO,UAAyBM,EAAkB,CAChD,KAAMN,EACN,UAAW,CAAC,CAAC,GAAI,gBAAiB,EAAE,CAAC,EACrC,UAAW,CAAC,OAAQ,SAAU,EAAG,sBAAuB,6BAA8B,sBAAuB,2BAA4B,oCAAoC,EAC7K,SAAU,EACV,aAAc,SAAoCO,EAAIC,EAAK,CACrDD,EAAK,GACJE,EAAY,cAAe,IAAI,CAEtC,EACA,SAAU,CAAIC,EAAmB,CAAC,CAChC,QAASC,GACT,YAAaX,CACf,CAAC,CAAC,EAAMY,EAA0B,CACpC,CAAC,CACH,CACA,OAAOZ,CACT,GAAG,EAUCa,IAAwB,IAAM,CAChC,MAAMA,CAAQ,CACZ,mBAAqBC,EAAOC,CAAiB,EAC7C,YAAcD,EAAOE,CAAU,EAC/B,QAAUF,EAAOG,CAAM,EACvB,cAAgBH,EAAOI,EAAY,EACnC,qBAAuBJ,EAAOK,GAA2B,CACvD,SAAU,EACZ,CAAC,EACD,UAAYL,EAAOM,CAAQ,EAE3B,SAAW,IAAIC,EAEf,QAAU,IAAIA,EAEd,aAEA,KAAO,KAEP,kBAAoB,GAEpB,cAEA,eAEA,oBAEA,iBAEA,kBAEA,gBACA,WAAY,CACV,OAAO,KAAK,iBACd,CAEA,GAAKP,EAAOQ,CAAY,EAAE,MAAM,eAAe,EAK/C,UAAY,KAKZ,gBAAkB,KAElB,mBAAqB,GAAG,KAAK,EAAE,oBAE/B,kBAAoB,GACpB,aAKA,IAAI,OAAQ,CACV,OAAO,KAAK,SAAW,OAAY,KAAK,OAAS,KAAK,aAAa,YAAY,KAAK,CACtF,CACA,IAAI,MAAMC,EAAO,CACf,KAAK,OAASA,CAChB,CACA,OASA,MAIA,UAAY,GAIZ,YAAc,GAEd,cAAgB,GAEhB,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,KAAK,iBAChC,CACA,IAAI,SAASA,EAAO,CAClB,KAAK,UAAYA,CACnB,CACA,UAAY,GAEZ,QAAU,IAAIC,EAEd,UAAY,IAAIA,EAEhB,kBAAoB,iBAEpB,YAEA,aAEA,WAEA,cAKA,cAAgBV,EAAOW,EAAe,EACtC,UAAYX,EAAOY,EAAQ,EAC3B,aAAc,CACZ,IAAMC,EAAcb,EAAOc,EAAsB,EACjDD,EAAY,KAAKE,EAAuB,EACxCF,EAAY,KAAKG,EAAqB,EACtC,IAAMC,EAAgBjB,EAAOkB,EAAuB,CAClD,SAAU,EACZ,CAAC,EACD,KAAK,oBAAsBD,IAAkB,iBAC7C,KAAK,cAAc,EACnB,KAAK,eAAe,gBAAgB,KAAK,YAAY,cAAe,CAClE,UAAW,sBACX,SAAU,KAAK,kBAAkB,CACnC,CAAC,CACH,CACA,UAAW,CAGT,IAAME,EAAU,KAAK,YAAY,cACjC,KAAK,aAAeA,EAAQ,aAAa,KAAK,iBAAiB,GAAKA,EAAQ,QAAQ,YAAY,IAAM,KAAK,iBAC7G,CACA,iBAAkB,CAChB,KAAK,aAAe,KAAK,YAAY,cAAc,cAAc,4BAA4B,EACzF,KAAK,gBACP,KAAK,cAAgB,GACrB,KAAK,MAAM,EAEf,CACA,oBAAqB,CAGnB,KAAK,eAAiBC,EAAM,KAAK,iBAAiB,QAAS,KAAK,kBAAkB,QAAS,KAAK,gBAAgB,OAAO,EAAE,UAAU,IAAM,KAAK,mBAAmB,aAAa,CAAC,CACjL,CACA,WAAY,CACV,KAAK,cAAc,YAAY,KAAK,YAAY,cAAe,KAAK,kBAAkB,CAAC,CACzF,CACA,aAAc,CACZ,KAAK,cAAc,eAAe,KAAK,WAAW,EAClD,KAAK,eAAe,cAAc,KAAK,YAAY,aAAa,EAChE,KAAK,gBAAgB,YAAY,EACjC,KAAK,UAAU,KAAK,CAClB,KAAM,IACR,CAAC,EACD,KAAK,UAAU,SAAS,CAC1B,CAMA,QAAS,CACH,KAAK,WACP,KAAK,QAAQ,KAAK,CAChB,KAAM,IACR,CAAC,CAEL,CAEA,mBAAoB,CAClB,OAAO,KAAK,UAAY,KAAK,eAAiB,KAAK,qBAAuB,KAAK,cAAgB,CAAC,CAAC,KAAK,sBAAsB,QAC9H,CAEA,kBAAmB,CACjB,MAAO,CAAC,EAAE,KAAK,cAAgB,KAAK,WACtC,CAEA,eAAehC,EAAO,EAGhBA,EAAM,UAAY,GAAa,CAACA,EAAM,QAAUA,EAAM,UAAY,MACpEA,EAAM,eAAe,EACrB,KAAK,OAAO,EAEhB,CAEA,OAAQ,CACD,KAAK,WAIJ,KAAK,cACP,KAAK,cAAc,MAAM,EAEzB,KAAK,cAAgB,GAG3B,CAEA,iBAAiBiC,EAAQ,CACvB,OAAO,KAAK,YAAY,EAAE,KAAKC,GAAU,CACvC,IAAMH,EAAUG,EAAO,YAAY,cACnC,OAAOH,IAAYE,GAAUF,EAAQ,SAASE,CAAM,CACtD,CAAC,CACH,CAEA,aAAc,CACZ,IAAME,EAAS,CAAC,EAChB,OAAI,KAAK,eACPA,EAAO,KAAK,KAAK,aAAa,EAE5B,KAAK,YACPA,EAAO,KAAK,KAAK,UAAU,EAEzB,KAAK,cACPA,EAAO,KAAK,KAAK,YAAY,EAExBA,CACT,CAEA,iCAAkC,CAElC,CAEA,eAAgB,CACd,KAAK,cAAc,QAAQ,KAAK,YAAa,EAAI,EAAE,UAAUC,GAAU,CACrE,IAAMC,EAAWD,IAAW,KACxBC,IAAa,KAAK,oBACpB,KAAK,kBAAoBA,EACrBA,EACF,KAAK,SAAS,KAAK,CACjB,KAAM,IACR,CAAC,GAMD,KAAK,mBAAmB,aAAa,EACrC,WAAW,IAAM,KAAK,QAAQ,IAAI,IAAM,KAAK,QAAQ,KAAK,CACxD,KAAM,IACR,CAAC,CAAC,CAAC,GAGT,CAAC,CACH,CACA,OAAO,UAAO,SAAyBnC,EAAmB,CACxD,OAAO,IAAKA,GAAqBS,EACnC,EACA,OAAO,UAAyB2B,EAAkB,CAChD,KAAM3B,EACN,UAAW,CAAC,CAAC,gBAAgB,EAAG,CAAC,GAAI,iBAAkB,EAAE,EAAG,CAAC,UAAU,EAAG,CAAC,GAAI,WAAY,EAAE,CAAC,EAC9F,eAAgB,SAAgCN,EAAIC,EAAKiC,EAAU,CASjE,GARIlC,EAAK,IACJmC,EAAeD,EAAUE,GAAiB,CAAC,EAC3CD,EAAeD,EAAUG,GAAwB,CAAC,EAClDF,EAAeD,EAAU9B,GAAiB,CAAC,EAC3C+B,EAAeD,EAAUE,GAAiB,CAAC,EAC3CD,EAAeD,EAAUG,GAAwB,CAAC,EAClDF,EAAeD,EAAU9B,GAAiB,CAAC,GAE5CJ,EAAK,EAAG,CACV,IAAIsC,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,YAAcqC,EAAG,OAC/DC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,aAAeqC,EAAG,OAChEC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,WAAaqC,EAAG,OAC9DC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,iBAAmBqC,GACjEC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,kBAAoBqC,GAClEC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,gBAAkBqC,EACrE,CACF,EACA,UAAW,SAAuBtC,EAAIC,EAAK,CAIzC,GAHID,EAAK,GACJyC,EAAY/C,GAAe,CAAC,EAE7BM,EAAK,EAAG,CACV,IAAIsC,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAMvC,EAAI,cAAgBqC,EAAG,MACtE,CACF,EACA,UAAW,CAAC,EAAG,cAAc,EAC7B,SAAU,GACV,aAAc,SAA8BtC,EAAIC,EAAK,CAC/CD,EAAK,GACJ0C,EAAW,UAAW,SAA4CC,EAAQ,CAC3E,OAAO1C,EAAI,eAAe0C,CAAM,CAClC,CAAC,EAEC3C,EAAK,IACJ4C,EAAe,KAAM3C,EAAI,EAAE,EAC3BC,EAAY,OAAQD,EAAI,IAAI,EAAE,aAAcA,EAAI,SAAS,EACzD4C,GAAW,QAAU5C,EAAI,OAAS,UAAU,EAC5C6C,EAAY,qBAAsB,CAAC7C,EAAI,YAAY,EAAE,+BAAgCA,EAAI,QAAQ,EAAE,2CAA4CA,EAAI,iBAAiB,CAAC,EAAE,2CAA4CA,EAAI,WAAW,EAAE,wCAAyCA,EAAI,WAAW,EAAE,kCAAmCA,EAAI,WAAW,EAAE,2BAA4BA,EAAI,WAAW,EAAE,2BAA4BA,EAAI,WAAW,EAAE,wBAAyBA,EAAI,QAAQ,EAAE,qBAAsBA,EAAI,YAAY,EAAE,wBAAyB,CAACA,EAAI,YAAY,EAAE,kCAAmCA,EAAI,iBAAiB,CAAC,EAAE,0BAA2BA,EAAI,mBAAmB,EAE3pB,EACA,OAAQ,CACN,KAAM,OACN,GAAI,KACJ,UAAW,CAAC,EAAG,aAAc,WAAW,EACxC,gBAAiB,CAAC,EAAG,mBAAoB,iBAAiB,EAC1D,MAAO,QACP,MAAO,QACP,UAAW,CAAC,EAAG,YAAa,YAAa8C,CAAgB,EACzD,YAAa,CAAC,EAAG,cAAe,cAAeA,CAAgB,EAC/D,cAAe,CAAC,EAAG,gBAAiB,gBAAiBA,CAAgB,EACrE,SAAU,CAAC,EAAG,WAAY,WAAYA,CAAgB,CACxD,EACA,QAAS,CACP,QAAS,UACT,UAAW,WACb,EACA,SAAU,CAAC,SAAS,EACpB,SAAU,CAAI5C,EAAmB,CAAC,CAChC,QAAS6C,GACT,YAAa1C,CACf,CAAC,CAAC,CAAC,EACH,mBAAoB2C,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,EAAG,4BAA4B,EAAG,CAAC,EAAG,2BAA4B,mCAAmC,EAAG,CAAC,gBAAiB,GAAI,EAAG,eAAe,EAAG,CAAC,EAAG,8BAA+B,sBAAsB,EAAG,CAAC,EAAG,iCAAkC,2BAA2B,EAAG,CAAC,EAAG,uCAAwC,qBAAqB,EAAG,CAAC,EAAG,2BAA4B,oCAAoC,CAAC,EACta,SAAU,SAA0BjD,EAAIC,EAAK,CACvCD,EAAK,IACJkD,EAAgBC,EAAG,EACnBC,EAAU,EAAG,OAAQ,CAAC,EACtBC,EAAe,EAAG,OAAQ,CAAC,EAAE,EAAG,OAAQ,CAAC,EACzCC,EAAW,EAAGC,GAAgC,EAAG,EAAG,OAAQ,CAAC,EAC7DF,EAAe,EAAG,OAAQ,CAAC,EAC3BG,EAAa,CAAC,EACdJ,EAAU,EAAG,OAAQ,CAAC,EACtBK,EAAa,EAAE,EAAE,EACjBH,EAAW,EAAGI,GAAgC,EAAG,EAAG,OAAQ,CAAC,GAE9D1D,EAAK,IACJ2D,EAAU,CAAC,EACXC,EAAW,gBAAiB,EAAK,EACjCD,EAAU,EACVE,EAAc5D,EAAI,YAAc,EAAI,EAAE,EACtC0D,EAAU,CAAC,EACXE,EAAc5D,EAAI,iBAAiB,EAAI,EAAI,EAAE,EAEpD,EACA,aAAc,CAACP,EAAa,EAC5B,OAAQ,CAAC,y2hBAA+2hB,EACx3hB,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOY,CACT,GAAG,EAuNH,IAAIwD,IAAiC,IAAM,CACzC,MAAMA,CAAiB,CACrB,YAAcC,EAAOC,CAAU,EAC/B,UAAYD,EAAOE,CAAQ,EAC3B,aAAc,CAAC,CACf,WAAWC,EAAc,CACvB,KAAK,iBAAiB,EAAE,MAAM,EAC9B,KAAK,SAASA,CAAY,CAC5B,CACA,kBAAmB,CACjB,OAAO,KAAK,YAAY,aAC1B,CACA,SAASC,EAAO,CACd,KAAK,iBAAiB,EAAE,YAAcA,EACtC,KAAK,wBAAwB,CAC/B,CACA,UAAW,CACT,OAAO,KAAK,iBAAiB,EAAE,aAAe,EAChD,CACA,yBAA0B,CACxB,IAAMC,EAAQ,KAAK,UAAU,YAAY,EACzCA,EAAM,mBAAmB,KAAK,iBAAiB,CAAC,EAChDA,EAAM,SAAS,EAAK,EACpB,IAAMC,EAAM,OAAO,aAAa,EAChCA,EAAI,gBAAgB,EACpBA,EAAI,SAASD,CAAK,CACpB,CACA,OAAO,UAAO,SAAkCE,EAAmB,CACjE,OAAO,IAAKA,GAAqBR,EACnC,EACA,OAAO,UAAyBS,EAAkB,CAChD,KAAMT,EACN,UAAW,CAAC,CAAC,OAAQ,mBAAoB,EAAE,CAAC,EAC5C,UAAW,CAAC,OAAQ,UAAW,WAAY,KAAM,kBAAmB,OAAQ,EAAG,qBAAqB,CACtG,CAAC,CACH,CACA,OAAOA,CACT,GAAG,EASCU,IAA2B,IAAM,CACnC,MAAMA,UAAmBC,EAAQ,CAC/B,kBAAoB,qBAMpB,kBAAoB,GACpB,SAAW,GAEX,OAAS,IAAIC,EAEb,iBAEA,iBACA,WAAa,GACb,aAAc,CACZ,MAAM,EACN,KAAK,KAAO,MACZ,KAAK,QAAQ,KAAKC,EAAU,KAAK,SAAS,CAAC,EAAE,UAAU,IAAM,CACvD,KAAK,YAAc,CAAC,KAAK,mBAC3B,KAAK,cAAc,CAEvB,CAAC,CACH,CACA,kBAAmB,CAEjB,MAAO,CAAC,KAAK,YAAc,MAAM,iBAAiB,CACpD,CAEA,cAAe,CACT,CAAC,KAAK,YAAc,CAAC,KAAK,UAC5B,KAAK,MAAM,CAEf,CACA,eAAeC,EAAO,CAChBA,EAAM,UAAY,IAAS,CAAC,KAAK,SAC/B,KAAK,YACPA,EAAM,eAAe,EACrB,KAAK,cAAc,GACV,KAAK,UACd,KAAK,cAAcA,CAAK,EAEjB,KAAK,WAEdA,EAAM,gBAAgB,EAEtB,MAAM,eAAeA,CAAK,CAE9B,CACA,mBAAmBA,EAAO,CACpB,CAAC,KAAK,UAAY,KAAK,UACzB,KAAK,cAAcA,CAAK,CAE5B,CACA,cAAcA,EAAO,CACnB,GAAI,CAAC,KAAK,eAAiB,KAAK,YAAc,KAAK,iBAAiBA,EAAM,MAAM,IAAM,KAAK,WACzF,OAGF,IAAMT,EAAQ,KAAK,MACnB,KAAK,WAAa,KAAK,kBAAoB,GAE3CU,GAAgB,IAAM,CACpB,KAAK,cAAc,EAAE,WAAWV,CAAK,EACrC,KAAK,kBAAoB,EAC3B,EAAG,CACD,SAAU,KAAK,SACjB,CAAC,CACH,CACA,eAAgB,CACd,KAAK,WAAa,KAAK,kBAAoB,GAC3C,KAAK,OAAO,KAAK,CACf,KAAM,KACN,MAAO,KAAK,cAAc,EAAE,SAAS,CACvC,CAAC,GAGG,KAAK,UAAU,gBAAkB,KAAK,cAAc,EAAE,iBAAiB,GAAK,KAAK,UAAU,gBAAkB,KAAK,UAAU,OAC9H,KAAK,cAAc,MAAM,CAE7B,CACA,mBAAoB,CAClB,OAAO,MAAM,kBAAkB,GAAK,KAAK,UAC3C,CAKA,eAAgB,CACd,OAAO,KAAK,kBAAoB,KAAK,gBACvC,CACA,OAAO,UAAO,SAA4BG,EAAmB,CAC3D,OAAO,IAAKA,GAAqBE,EACnC,EACA,OAAO,UAAyBM,EAAkB,CAChD,KAAMN,EACN,UAAW,CAAC,CAAC,cAAc,EAAG,CAAC,GAAI,eAAgB,EAAE,EAAG,CAAC,oBAAoB,EAAG,CAAC,GAAI,qBAAsB,EAAE,CAAC,EAC9G,eAAgB,SAAmCO,EAAIC,EAAKC,EAAU,CAIpE,GAHIF,EAAK,GACJG,EAAeD,EAAUnB,GAAkB,CAAC,EAE7CiB,EAAK,EAAG,CACV,IAAII,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAML,EAAI,iBAAmBG,EAAG,MACzE,CACF,EACA,UAAW,SAA0BJ,EAAIC,EAAK,CAI5C,GAHID,EAAK,GACJO,EAAYxB,GAAkB,CAAC,EAEhCiB,EAAK,EAAG,CACV,IAAII,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAML,EAAI,iBAAmBG,EAAG,MACzE,CACF,EACA,UAAW,CAAC,EAAG,eAAgB,mBAAoB,oBAAoB,EACvE,SAAU,GACV,aAAc,SAAiCJ,EAAIC,EAAK,CAClDD,EAAK,GACJQ,EAAW,QAAS,UAA+C,CACpE,OAAOP,EAAI,aAAa,CAC1B,CAAC,EAAE,WAAY,SAAgDQ,EAAQ,CACrE,OAAOR,EAAI,mBAAmBQ,CAAM,CACtC,CAAC,EAECT,EAAK,IACJU,EAAe,KAAMT,EAAI,EAAE,EAC3BU,EAAY,WAAYV,EAAI,SAAW,KAAO,EAAE,EAAE,aAAc,IAAI,EAAE,mBAAoB,IAAI,EAAE,OAAQA,EAAI,IAAI,EAChHW,EAAY,2BAA4BX,EAAI,WAAW,EAAE,wBAAyBA,EAAI,QAAQ,EAAE,uBAAwBA,EAAI,UAAU,EAAE,wBAAyBA,EAAI,QAAQ,EAAE,+BAAgCA,EAAI,QAAQ,EAAE,2CAA4CA,EAAI,iBAAiB,CAAC,EAAE,2CAA4CA,EAAI,WAAW,EAAE,wCAAyCA,EAAI,WAAW,EAAE,kCAAmCA,EAAI,WAAW,EAAE,2BAA4BA,EAAI,WAAW,EAAE,kCAAmCA,EAAI,iBAAiB,CAAC,EAEzjB,EACA,OAAQ,CACN,SAAU,UACZ,EACA,QAAS,CACP,OAAQ,QACV,EACA,SAAU,CAAIY,EAAmB,CAAC,CAChC,QAASnB,GACT,YAAaD,CACf,EAAG,CACD,QAASqB,GACT,YAAarB,CACf,CAAC,CAAC,EAAMsB,EAA0B,EAClC,mBAAoBC,GACpB,MAAO,GACP,KAAM,EACN,OAAQ,CAAC,CAAC,EAAG,4BAA4B,EAAG,CAAC,OAAQ,WAAY,gBAAiB,GAAI,EAAG,2BAA4B,oCAAqC,EAAG,UAAU,EAAG,CAAC,EAAG,8BAA+B,sBAAsB,EAAG,CAAC,EAAG,iCAAkC,2BAA2B,EAAG,CAAC,cAAe,OAAQ,EAAG,uCAAwC,qBAAqB,EAAG,CAAC,OAAQ,WAAY,EAAG,2BAA4B,oCAAoC,EAAG,CAAC,EAAG,sBAAuB,EAAG,IAAI,EAAG,CAAC,mBAAoB,EAAE,CAAC,EAC7hB,SAAU,SAA6BhB,EAAIC,EAAK,CAC1CD,EAAK,IACJiB,EAAgBC,EAAG,EACnBC,EAAW,EAAGC,GAAmC,EAAG,EAAG,OAAQ,CAAC,EAChEC,EAAe,EAAG,OAAQ,CAAC,EAC3BF,EAAW,EAAGG,GAAmC,EAAG,EAAG,OAAQ,CAAC,EAChED,EAAe,EAAG,OAAQ,CAAC,EAC3BF,EAAW,EAAGI,GAAmC,EAAG,CAAC,EAAE,EAAGC,GAAmC,EAAG,CAAC,EACjGC,EAAU,EAAG,OAAQ,CAAC,EACtBC,EAAa,EAAE,EACfP,EAAW,EAAGQ,GAAmC,EAAG,EAAG,OAAQ,CAAC,EAChEN,EAAe,EAAG,OAAQ,CAAC,EAC3BO,GAAO,CAAC,EACRF,EAAa,GAEd1B,EAAK,IACJ6B,EAAe5B,EAAI,WAAiB,GAAJ,CAAM,EACtC6B,EAAU,EACVC,EAAW,WAAY9B,EAAI,QAAQ,EACnCU,EAAY,aAAcV,EAAI,SAAS,EAAE,mBAAoBA,EAAI,kBAAkB,EACnF6B,EAAU,EACVD,EAAc5B,EAAI,YAAc,EAAI,EAAE,EACtC6B,EAAU,CAAC,EACXD,EAAc5B,EAAI,WAAa,EAAI,CAAC,EACpC6B,EAAU,CAAC,EACXD,EAAc5B,EAAI,iBAAiB,EAAI,EAAI,EAAE,EAC7C6B,EAAU,EACVC,EAAW,KAAM9B,EAAI,kBAAkB,EACvC6B,EAAU,EACVE,GAAkB/B,EAAI,eAAe,EAE5C,EACA,aAAc,CAACgC,GAAelD,EAAgB,EAC9C,OAAQ,CAACmD,EAAG,EACZ,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOzC,CACT,GAAG,EAUC0C,IAA2B,IAAM,CACnC,MAAMA,CAAW,CACf,YAAcnD,EAAOC,CAAU,EAC/B,mBAAqBD,EAAOoD,CAAiB,EAC7C,KAAOpD,EAAOqD,EAAgB,CAC5B,SAAU,EACZ,CAAC,EAED,+BAAiC,KAEjC,YAEA,WAAa,IAAIC,EAEjB,aAAe,eAEf,IAAI,kBAAmB,CACrB,OAAO,KAAK,eAAeC,GAAQA,EAAK,QAAQ,CAClD,CAEA,IAAI,sBAAuB,CACzB,OAAO,KAAK,eAAeA,GAAQA,EAAK,SAAS,CACnD,CAEA,IAAI,oBAAqB,CACvB,OAAO,KAAK,eAAeA,GAAQA,EAAK,OAAO,CACjD,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASnD,EAAO,CAClB,KAAK,UAAYA,EACjB,KAAK,gBAAgB,CACvB,CACA,UAAY,GAEZ,IAAI,OAAQ,CACV,MAAO,CAAC,KAAK,QAAU,KAAK,OAAO,SAAW,CAChD,CAEA,IAAI,MAAO,CACT,OAAI,KAAK,cACA,KAAK,cAEP,KAAK,MAAQ,KAAO,KAAK,YAClC,CAEA,SAAW,EACX,IAAI,KAAKA,EAAO,CACd,KAAK,cAAgBA,CACvB,CACA,cAAgB,KAEhB,IAAI,SAAU,CACZ,OAAO,KAAK,gBAAgB,CAC9B,CAEA,OAEA,aAAe,IAAIoD,GACnB,aAAc,CAAC,CACf,iBAAkB,CAChB,KAAK,sBAAsB,EAC3B,KAAK,qBAAqB,EAC1B,KAAK,2BAA2B,CAClC,CACA,aAAc,CACZ,KAAK,aAAa,QAAQ,EAC1B,KAAK,aAAa,QAAQ,EAC1B,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,CAC3B,CAEA,iBAAkB,CAChB,OAAO,KAAK,QAAU,KAAK,OAAO,KAAKD,GAAQA,EAAK,UAAU,CAAC,CACjE,CAEA,iBAAkB,CAChB,KAAK,QAAQ,QAAQA,GAAQ,CAC3BA,EAAK,kBAAoB,KAAK,UAC9BA,EAAK,mBAAmB,aAAa,CACvC,CAAC,CACH,CAEA,OAAQ,CAAC,CAET,eAAe1C,EAAO,CAChB,KAAK,oBAAoBA,CAAK,GAChC,KAAK,YAAY,UAAUA,CAAK,CAEpC,CAOA,cAAc4C,EAAO,CACnB,OAAOA,GAAS,GAAKA,EAAQ,KAAK,OAAO,MAC3C,CAMA,mBAAoB,CAClB,IAAMC,EAAW,KAAK,YAAY,cAAc,SAC5CA,IAAa,KAIf,KAAK,YAAY,cAAc,SAAW,GAG1C,WAAW,IAAM,KAAK,YAAY,cAAc,SAAWA,CAAQ,EAEvE,CAKA,eAAeC,EAAiB,CAC9B,OAAO,KAAK,OAAO,QAAQ,KAAKC,EAAU,IAAI,EAAGC,EAAU,IAAMC,EAAM,GAAG,KAAK,OAAO,IAAIH,CAAe,CAAC,CAAC,CAAC,CAC9G,CAEA,oBAAoB9C,EAAO,CACzB,IAAIkD,EAAiBlD,EAAM,OAC3B,KAAOkD,GAAkBA,IAAmB,KAAK,YAAY,eAAe,CAC1E,GAAIA,EAAe,UAAU,SAAS,cAAc,EAClD,MAAO,GAETA,EAAiBA,EAAe,aAClC,CACA,MAAO,EACT,CAEA,uBAAwB,CAItB,KAAK,OAAO,QAAQ,KAAKH,EAAU,KAAK,MAAM,CAAC,EAAE,UAAUI,GAAS,CAClE,IAAMC,EAAU,CAAC,EACjBD,EAAM,QAAQT,GAAQA,EAAK,YAAY,EAAE,QAAQW,GAAUD,EAAQ,KAAKC,CAAM,CAAC,CAAC,EAChF,KAAK,aAAa,MAAMD,CAAO,EAC/B,KAAK,aAAa,gBAAgB,CACpC,CAAC,EACD,KAAK,YAAc,IAAIE,GAAgB,KAAK,YAAY,EAAE,wBAAwB,EAAE,0BAA0B,KAAK,KAAO,KAAK,KAAK,MAAQ,KAAK,EAAE,eAAe,EAAE,cAAcD,GAAU,KAAK,eAAeA,CAAM,CAAC,EAGvN,KAAK,iBAAiB,KAAKtD,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,CAAC,CAChE,KAAA2C,CACF,IAAM,CACJ,IAAMW,EAASX,EAAK,iBAAiB,SAAS,aAAa,EACvDW,GACF,KAAK,YAAY,iBAAiBA,CAAM,CAE5C,CAAC,EACD,KAAK,MAAM,OAAO,KAAKtD,EAAU,KAAK,UAAU,CAAC,EAAE,UAAUwD,GAAa,KAAK,YAAY,0BAA0BA,CAAS,CAAC,CACjI,CAKA,eAAeF,EAAQ,CAGrB,MAAO,CAACA,EAAO,eAAiBA,EAAO,QACzC,CAEA,sBAAuB,CACrB,KAAK,OAAO,QAAQ,KAAKN,EAAU,IAAI,EAAGhD,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,CAChF,KAAK,UAGP,QAAQ,QAAQ,EAAE,KAAK,IAAM,KAAK,gBAAgB,CAAC,EAErD,KAAK,4BAA4B,CACnC,CAAC,CACH,CAEA,4BAA6B,CAC3B,KAAK,qBAAqB,KAAKA,EAAU,KAAK,UAAU,CAAC,EAAE,UAAUC,GAAS,CAE5E,IAAMwD,EADY,KAAK,OAAO,QAAQ,EACV,QAAQxD,EAAM,IAAI,EAK1C,KAAK,cAAcwD,CAAS,GAAKxD,EAAM,KAAK,UAAU,IACxD,KAAK,+BAAiCwD,EAE1C,CAAC,CACH,CAKA,6BAA8B,CAC5B,GAAI,KAAK,gCAAkC,KAG3C,IAAI,KAAK,OAAO,OAAQ,CACtB,IAAMC,EAAW,KAAK,IAAI,KAAK,+BAAgC,KAAK,OAAO,OAAS,CAAC,EAC/EC,EAAc,KAAK,OAAO,QAAQ,EAAED,CAAQ,EAC9CC,EAAY,SAEV,KAAK,OAAO,SAAW,EACzB,KAAK,MAAM,EAEX,KAAK,YAAY,sBAAsB,EAGzCA,EAAY,MAAM,CAEtB,MACE,KAAK,MAAM,EAEb,KAAK,+BAAiC,KACxC,CACA,OAAO,UAAO,SAA4BhE,EAAmB,CAC3D,OAAO,IAAKA,GAAqB4C,EACnC,EACA,OAAO,UAAyBpC,EAAkB,CAChD,KAAMoC,EACN,UAAW,CAAC,CAAC,cAAc,CAAC,EAC5B,eAAgB,SAAmCnC,EAAIC,EAAKC,EAAU,CAIpE,GAHIF,EAAK,GACJG,EAAeD,EAAUR,GAAS,CAAC,EAEpCM,EAAK,EAAG,CACV,IAAII,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAML,EAAI,OAASG,EAC5D,CACF,EACA,UAAW,CAAC,EAAG,mBAAoB,wBAAwB,EAC3D,SAAU,EACV,aAAc,SAAiCJ,EAAIC,EAAK,CAClDD,EAAK,GACJQ,EAAW,UAAW,SAA+CC,EAAQ,CAC9E,OAAOR,EAAI,eAAeQ,CAAM,CAClC,CAAC,EAECT,EAAK,GACJW,EAAY,OAAQV,EAAI,IAAI,CAEnC,EACA,OAAQ,CACN,SAAU,CAAC,EAAG,WAAY,WAAYuD,CAAgB,EACtD,KAAM,OACN,SAAU,CAAC,EAAG,WAAY,WAAYpE,GAASA,GAAS,KAAO,EAAIqE,GAAgBrE,CAAK,CAAC,CAC3F,EACA,mBAAoBsE,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,OAAQ,eAAgB,EAAG,+BAA+B,CAAC,EACrE,SAAU,SAA6B1D,EAAIC,EAAK,CAC1CD,EAAK,IACJiB,EAAgB,EAChBI,EAAe,EAAG,MAAO,CAAC,EAC1BsC,EAAa,CAAC,EACdjC,EAAa,EAEpB,EACA,OAAQ,CAAC,82BAA82B,EACv3B,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOS,CACT,GAAG,EAiXH,IAAMyB,GAAN,KAAwB,CACtB,OACA,MACA,YACAC,EACAC,EAAO,CACL,KAAK,OAASD,EACd,KAAK,MAAQC,CACf,CACF,EAKIC,IAA4B,IAAM,CACpC,MAAMA,UAAoBC,EAAW,CACnC,UAAYC,EAAOC,GAAW,CAC5B,SAAU,GACV,KAAM,EACR,CAAC,EAKD,YAAc,gBAEd,WACA,aAAe,OACf,mBAIA,oBAAsB,CAAC,EAKvB,WAAa,IAAM,CAAC,EAKpB,UAAY,IAAM,CAAC,EAKnB,IAAI,UAAW,CACb,OAAO,KAAK,UAAY,CAAC,CAAC,KAAK,UAAU,SAAW,KAAK,SAC3D,CACA,IAAI,SAASJ,EAAO,CAClB,KAAK,UAAYA,EACjB,KAAK,gBAAgB,EACrB,KAAK,aAAa,KAAK,CACzB,CAKA,IAAI,IAAK,CACP,OAAO,KAAK,WAAW,EACzB,CAKA,IAAI,OAAQ,CACV,OAAQ,CAAC,KAAK,YAAc,KAAK,WAAW,SAAW,CAAC,KAAK,QAAU,KAAK,OAAO,SAAW,EAChG,CAKA,IAAI,aAAc,CAChB,OAAO,KAAK,WAAa,KAAK,WAAW,YAAc,KAAK,YAC9D,CACA,IAAI,YAAYA,EAAO,CACrB,KAAK,aAAeA,EACpB,KAAK,aAAa,KAAK,CACzB,CACA,aAEA,IAAI,SAAU,CACZ,OAAO,KAAK,WAAW,SAAW,KAAK,gBAAgB,CACzD,CAKA,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,KAAK,WAAW,SAAS,aAAaK,GAAW,QAAQ,GAAK,EACzF,CACA,IAAI,SAASL,EAAO,CAClB,KAAK,UAAYA,EACjB,KAAK,aAAa,KAAK,CACzB,CACA,UAKA,IAAI,kBAAmB,CACrB,MAAO,CAAC,KAAK,OAAS,KAAK,OAC7B,CAKA,IAAI,OAAQ,CACV,OAAO,KAAK,MACd,CACA,IAAI,MAAMA,EAAO,CACf,KAAK,OAASA,CAChB,CACA,OAAS,CAAC,EAEV,IAAI,mBAAoB,CACtB,OAAO,KAAK,mBAAmB,OACjC,CACA,IAAI,kBAAkBA,EAAO,CAC3B,KAAK,mBAAmB,QAAUA,CACpC,CAEA,IAAI,iBAAkB,CACpB,OAAO,KAAK,eAAeM,GAAQA,EAAK,OAAO,CACjD,CAEA,OAAS,IAAIC,EAMb,YAAc,IAAIA,EAClB,OAAS,OAMT,aAAe,IAAIC,EAEnB,IAAI,YAAa,CACf,OAAO,KAAK,mBAAmB,UACjC,CACA,IAAI,WAAWR,EAAO,CACpB,KAAK,mBAAmB,WAAaA,CACvC,CACA,aAAc,CACZ,MAAM,EACN,IAAMS,EAAaN,EAAOO,GAAQ,CAChC,SAAU,EACZ,CAAC,EACKC,EAAkBR,EAAOS,GAAoB,CACjD,SAAU,EACZ,CAAC,EACKC,EAA2BV,EAAOW,EAAiB,EACrD,KAAK,YACP,KAAK,UAAU,cAAgB,MAEjC,KAAK,mBAAqB,IAAIC,GAAmBF,EAA0B,KAAK,UAAWF,EAAiBF,EAAY,KAAK,YAAY,CAC3I,CACA,oBAAqB,CACnB,KAAK,gBAAgB,KAAKO,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,CACpE,KAAK,MAAM,EACX,KAAK,aAAa,KAAK,CACzB,CAAC,EACDC,EAAM,KAAK,iBAAkB,KAAK,OAAO,OAAO,EAAE,KAAKD,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,KAAK,aAAa,KAAK,CAAC,CAC7H,CACA,iBAAkB,CAChB,MAAM,gBAAgB,EACjB,KAAK,UAGZ,CACA,WAAY,CACN,KAAK,WAIP,KAAK,iBAAiB,CAE1B,CACA,aAAc,CACZ,MAAM,YAAY,EAClB,KAAK,aAAa,SAAS,CAC7B,CAEA,cAAcE,EAAc,CAC1B,KAAK,WAAaA,EAClB,KAAK,WAAW,kBAAkB,KAAK,mBAAmB,CAC5D,CAKA,iBAAiBC,EAAO,CAClB,CAAC,KAAK,UAAY,CAAC,KAAK,oBAAoBA,CAAK,GACnD,KAAK,MAAM,CAEf,CAKA,OAAQ,CACN,GAAI,OAAK,UAAY,KAAK,WAAW,SAGrC,IAAI,CAAC,KAAK,OAAO,QAAU,KAAK,OAAO,MAAM,SAG3C,QAAQ,QAAQ,EAAE,KAAK,IAAM,KAAK,WAAW,MAAM,CAAC,MAC/C,CACL,IAAMC,EAAa,KAAK,YAAY,WAChCA,EACFA,EAAW,MAAM,EAEjB,KAAK,YAAY,mBAAmB,CAExC,CACA,KAAK,aAAa,KAAK,EACzB,CAKA,kBAAkBC,EAAK,CAGrB,KAAK,oBAAsBA,EAC3B,KAAK,YAAY,kBAAkBA,CAAG,CACxC,CAKA,WAAWrB,EAAO,CAEhB,KAAK,OAASA,CAChB,CAKA,iBAAiBsB,EAAI,CACnB,KAAK,UAAYA,CACnB,CAKA,kBAAkBA,EAAI,CACpB,KAAK,WAAaA,CACpB,CAKA,iBAAiBC,EAAY,CAC3B,KAAK,SAAWA,EAChB,KAAK,aAAa,KAAK,CACzB,CAEA,kBAAmB,CACjB,KAAK,mBAAmB,iBAAiB,CAC3C,CAEA,OAAQ,CACD,KAAK,UAKR,WAAW,IAAM,CACV,KAAK,UACR,KAAK,kBAAkB,EACvB,KAAK,eAAe,EAExB,CAAC,CAEL,CAMA,mBAAoB,CACb,KAAK,WAAW,SACnB,MAAM,kBAAkB,CAE5B,CAEA,eAAeJ,EAAO,CACpB,IAAMK,EAAUL,EAAM,QAChBC,EAAa,KAAK,YAAY,WACpC,GAAII,IAAY,EACV,KAAK,WAAW,SAAWC,EAAeN,EAAO,UAAU,GAAK,KAAK,OAAO,QAAU,CAAC,KAAK,OAAO,KAAK,UAC1GA,EAAM,eAAe,EACjBC,EACF,KAAK,YAAY,cAAcA,CAAU,EAEzC,KAAK,eAAe,GAMtB,MAAM,kBAAkB,UAEjB,CAAC,KAAK,WAAW,QAM1B,IAAKI,IAAY,IAAYA,IAAY,KAAeJ,EAAY,CAClE,IAAMM,EAAkB,KAAK,aAAa,OAAOC,GAAUA,EAAO,aAAeP,EAAW,YAAc,CAAC,KAAK,eAAeO,CAAM,CAAC,EAChIC,EAAeF,EAAgB,QAAQN,CAAU,EACjDS,EAAQV,EAAM,UAAY,GAAW,GAAK,EAChDA,EAAM,eAAe,EACjBS,EAAe,IAAM,KAAK,cAAcA,EAAeC,CAAK,GAC9D,KAAK,YAAY,cAAcH,EAAgBE,EAAeC,CAAK,CAAC,CAExE,MACE,MAAM,eAAeV,CAAK,EAG9B,KAAK,aAAa,KAAK,CACzB,CACA,gBAAiB,CACX,KAAK,OAAO,QACd,KAAK,OAAO,KAAK,MAAM,CAE3B,CAEA,mBAAoB,CAClB,IAAMW,EAAc,KAAK,OAAO,OAAS,KAAK,OAAO,QAAQ,EAAE,IAAIxB,GAAQA,EAAK,KAAK,EAAI,CAAC,EAC1F,KAAK,OAASwB,EACd,KAAK,OAAO,KAAK,IAAIhC,GAAkB,KAAMgC,CAAW,CAAC,EACzD,KAAK,YAAY,KAAKA,CAAW,EACjC,KAAK,UAAUA,CAAW,EAC1B,KAAK,mBAAmB,aAAa,CACvC,CAEA,gBAAiB,CACf,KAAK,WAAW,EAChB,KAAK,mBAAmB,aAAa,EACrC,KAAK,aAAa,KAAK,CACzB,CACA,OAAO,UAAO,SAA6BC,EAAmB,CAC5D,OAAO,IAAKA,GAAqB9B,EACnC,EACA,OAAO,UAAyB+B,EAAkB,CAChD,KAAM/B,EACN,UAAW,CAAC,CAAC,eAAe,CAAC,EAC7B,eAAgB,SAAoCgC,EAAIC,EAAKC,EAAU,CAIrE,GAHIF,EAAK,GACJG,EAAeD,EAAUE,GAAY,CAAC,EAEvCJ,EAAK,EAAG,CACV,IAAIK,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAMN,EAAI,OAASI,EAC5D,CACF,EACA,UAAW,CAAC,EAAG,mBAAoB,oBAAqB,wBAAwB,EAChF,SAAU,GACV,aAAc,SAAkCL,EAAIC,EAAK,CACnDD,EAAK,GACJQ,EAAW,QAAS,UAAgD,CACrE,OAAOP,EAAI,MAAM,CACnB,CAAC,EAAE,OAAQ,UAA+C,CACxD,OAAOA,EAAI,MAAM,CACnB,CAAC,EAECD,EAAK,IACJS,EAAY,OAAQR,EAAI,IAAI,EAAE,WAAYA,EAAI,UAAYA,EAAI,QAAUA,EAAI,OAAO,SAAW,EAAI,GAAKA,EAAI,QAAQ,EAAE,gBAAiBA,EAAI,SAAS,SAAS,CAAC,EAAE,eAAgBA,EAAI,UAAU,EAC7LS,EAAY,6BAA8BT,EAAI,QAAQ,EAAE,4BAA6BA,EAAI,UAAU,EAAE,6BAA8BA,EAAI,QAAQ,EAEtJ,EACA,OAAQ,CACN,SAAU,CAAC,EAAG,WAAY,WAAYU,CAAgB,EACtD,YAAa,cACb,SAAU,CAAC,EAAG,WAAY,WAAYA,CAAgB,EACtD,MAAO,QACP,kBAAmB,mBACrB,EACA,QAAS,CACP,OAAQ,SACR,YAAa,aACf,EACA,SAAU,CAAIC,EAAmB,CAAC,CAChC,QAASC,GACT,YAAa7C,CACf,CAAC,CAAC,EAAM8C,EAA0B,EAClC,mBAAoBC,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,OAAQ,eAAgB,EAAG,+BAA+B,CAAC,EACrE,SAAU,SAA8Bf,EAAIC,EAAK,CAC3CD,EAAK,IACJgB,EAAgB,EAChBC,EAAe,EAAG,MAAO,CAAC,EAC1BC,EAAa,CAAC,EACdC,EAAa,EAEpB,EACA,OAAQ,CAACC,EAAG,EACZ,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOpD,CACT,GAAG,EASCqD,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,YAAcnD,EAAOoD,CAAU,EAE/B,QAAU,GAEV,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASvD,EAAO,CACdA,IACF,KAAK,UAAYA,EACjB,KAAK,UAAU,cAAc,IAAI,EAErC,CACA,UAIA,UAAY,GAMZ,kBAEA,QAAU,IAAIO,EAEd,YAAc,GAEd,GAAKJ,EAAOqD,CAAY,EAAE,MAAM,0BAA0B,EAE1D,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,KAAK,WAAa,KAAK,UAAU,QAC5D,CACA,IAAI,SAASxD,EAAO,CAClB,KAAK,UAAYA,CACnB,CACA,UAAY,GAEZ,IAAI,OAAQ,CACV,MAAO,CAAC,KAAK,aAAa,KAC5B,CAEA,aACA,aAAc,CACZ,IAAMyD,EAAiBtD,EAAOuD,EAAyB,EACjDC,EAAYxD,EAAOyD,EAAgB,CACvC,SAAU,EACZ,CAAC,EACD,KAAK,aAAe,KAAK,YAAY,cACrC,KAAK,kBAAoBH,EAAe,kBACpCE,GACF,KAAK,aAAa,UAAU,IAAI,kCAAkC,CAEtE,CACA,aAAc,CACZ,KAAK,UAAU,aAAa,KAAK,CACnC,CACA,aAAc,CACZ,KAAK,QAAQ,SAAS,CACxB,CAEA,SAASxC,EAAO,CACV,KAAK,OAASA,EAAM,UAAY,GAG7BA,EAAM,QACT,KAAK,UAAU,eAAe,EAEhCA,EAAM,eAAe,GAErB,KAAK,aAAaA,CAAK,CAE3B,CAEA,OAAQ,CACF,KAAK,WACP,KAAK,aAAa,EAEpB,KAAK,QAAU,GAEV,KAAK,UAAU,SAClB,KAAK,UAAU,MAAM,EAEvB,KAAK,UAAU,aAAa,KAAK,CACnC,CACA,QAAS,CACP,KAAK,QAAU,GACf,KAAK,UAAU,aAAa,KAAK,CACnC,CAEA,aAAaA,EAAO,EACd,CAACA,GAAS,KAAK,gBAAgBA,CAAK,GAAK,CAACA,EAAM,UAClD,KAAK,QAAQ,KAAK,CAChB,MAAO,KAAK,aACZ,MAAO,KAAK,aAAa,MACzB,UAAW,IACb,CAAC,EACDA,GAAO,eAAe,EAE1B,CACA,UAAW,CAET,KAAK,UAAU,aAAa,KAAK,CACnC,CAEA,OAAQ,CACN,KAAK,aAAa,MAAM,CAC1B,CAEA,OAAQ,CACN,KAAK,aAAa,MAAQ,EAC5B,CACA,kBAAkBE,EAAK,CACrB,IAAMwC,EAAU,KAAK,YAAY,cAG7BxC,EAAI,OACNwC,EAAQ,aAAa,mBAAoBxC,EAAI,KAAK,GAAG,CAAC,EAEtDwC,EAAQ,gBAAgB,kBAAkB,CAE9C,CAEA,gBAAgB1C,EAAO,CACrB,MAAO,CAACM,EAAeN,CAAK,GAAK,IAAI,IAAI,KAAK,iBAAiB,EAAE,IAAIA,EAAM,OAAO,CACpF,CACA,OAAO,UAAO,SAA8BY,EAAmB,CAC7D,OAAO,IAAKA,GAAqBuB,EACnC,EACA,OAAO,UAAyBQ,EAAkB,CAChD,KAAMR,EACN,UAAW,CAAC,CAAC,QAAS,kBAAmB,EAAE,CAAC,EAC5C,UAAW,CAAC,EAAG,qBAAsB,wBAAyB,wBAAyB,mBAAmB,EAC1G,SAAU,EACV,aAAc,SAAmCrB,EAAIC,EAAK,CACpDD,EAAK,GACJQ,EAAW,UAAW,SAAiDsB,EAAQ,CAChF,OAAO7B,EAAI,SAAS6B,CAAM,CAC5B,CAAC,EAAE,OAAQ,UAAgD,CACzD,OAAO7B,EAAI,MAAM,CACnB,CAAC,EAAE,QAAS,UAAiD,CAC3D,OAAOA,EAAI,OAAO,CACpB,CAAC,EAAE,QAAS,UAAiD,CAC3D,OAAOA,EAAI,SAAS,CACtB,CAAC,EAECD,EAAK,IACJ+B,EAAe,KAAM9B,EAAI,EAAE,EAC3BQ,EAAY,WAAYR,EAAI,UAAY,IAAI,EAAE,cAAeA,EAAI,aAAe,IAAI,EAAE,eAAgBA,EAAI,WAAaA,EAAI,UAAU,UAAYA,EAAI,UAAU,UAAU,QAAU,IAAI,EAAE,gBAAiBA,EAAI,WAAaA,EAAI,UAAU,UAAY,IAAI,EAAE,WAAYA,EAAI,WAAaA,EAAI,UAAU,UAAY,IAAI,EAE7T,EACA,OAAQ,CACN,SAAU,CAAC,EAAG,kBAAmB,UAAU,EAC3C,UAAW,CAAC,EAAG,wBAAyB,YAAaU,CAAgB,EACrE,kBAAmB,CAAC,EAAG,gCAAiC,mBAAmB,EAC3E,YAAa,cACb,GAAI,KACJ,SAAU,CAAC,EAAG,WAAY,WAAYA,CAAgB,CACxD,EACA,QAAS,CACP,QAAS,sBACX,EACA,SAAU,CAAC,eAAgB,iBAAiB,EAC5C,SAAU,CAAIqB,EAAoB,CACpC,CAAC,CACH,CACA,OAAOX,CACT,GAAG,ECn0EH,IAAMY,GAAM,CAAC,OAAO,EACdC,GAAM,CAAC,GAAG,EAChB,SAASC,GAAuCC,EAAIC,EAAK,CAMvD,GALID,EAAK,IACJE,EAAe,EAAG,MAAO,EAAG,CAAC,EAC7BC,EAAa,CAAC,EACdC,EAAa,GAEdJ,EAAK,EAAG,CACV,IAAMK,EAAiBJ,EAAI,GACrBK,EAAYC,EAAc,EAC7BC,GAAWF,EAAO,UAAU,EAC5BG,EAAY,+BAAgCH,EAAO,SAAS,EAAE,8BAA+B,CAACA,EAAO,SAAS,EAAE,4CAA6C,CAACA,EAAO,mBAAmB,EAAE,cAAeA,EAAO,SAAW,SAAS,EAAE,aAAcA,EAAO,SAAW,QAAQ,EAAE,WAAYA,EAAO,SAAW,MAAM,EACpTI,EAAW,KAAMJ,EAAO,EAAE,EAC1BK,EAAY,aAAcL,EAAO,WAAa,IAAI,EAAE,kBAAmBA,EAAO,wBAAwBD,CAAc,CAAC,CAC1H,CACF,CAiBA,IAAMO,GAAN,KAAmC,CACjC,OACA,OACA,YACAC,EACAC,EAAQ,CACN,KAAK,OAASD,EACd,KAAK,OAASC,CAChB,CACF,EAEMC,GAAgD,IAAIC,EAAe,mCAAoC,CAC3G,WAAY,OACZ,QAASC,EACX,CAAC,EAED,SAASA,IAA2C,CAClD,MAAO,CACL,sBAAuB,GACvB,uBAAwB,GACxB,6BAA8B,GAC9B,iBAAkB,EACpB,CACF,CAEA,IAAIC,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,mBAAqBC,EAAOC,CAAiB,EAC7C,YAAcD,EAAOE,CAAU,EAC/B,UAAYF,EAAOJ,EAAgC,EACnD,oBAAsBI,EAAOG,EAAuB,CAClD,SAAU,EACZ,CAAC,IAAM,iBACP,qBAAuBC,EAAa,MAEpC,YAEA,UAAY,GAEZ,IAAI,QAAS,CACX,OAAO,KAAK,SAAW,KAAK,SAC9B,CACA,QAAU,GAEV,sBAEA,UAAUC,EAAO,CACf,KAAK,OAASA,EACd,KAAK,mBAAmB,aAAa,CACvC,CAEA,OAKA,SAEA,MAEA,QAEA,aAEA,UAEA,eAEA,YAAc,KAKd,sBAEA,uBAOA,iBAKA,WAEA,cAEA,eAAiB,IAAIC,EAErB,OAAS,IAAIA,EAEb,OAAS,IAAIA,EAEb,gBAAkB,IAAIA,EAKtB,IAAI,UAAUD,EAAO,CACnB,KAAK,WAAaA,EAClB,KAAK,YAAY,cAAc,UAAY,EAC7C,CACA,WAEA,IAAI,8BAA+B,CACjC,OAAO,KAAK,6BACd,CACA,IAAI,6BAA6BA,EAAO,CACtC,KAAK,8BAAgCA,EACrC,KAAK,sBAAsB,CAC7B,CACA,8BAEA,uBAAwB,CACtB,GAAI,KAAK,QACP,QAAWV,KAAU,KAAK,QACxBA,EAAO,mBAAmB,aAAa,CAG7C,CAEA,GAAKK,EAAOO,CAAY,EAAE,MAAM,mBAAmB,EAKnD,YACA,aAAc,CACZ,IAAMC,EAAWR,EAAOS,EAAQ,EAKhC,KAAK,YAAcD,GAAU,QAAU,GACvC,KAAK,sBAAwB,CAAC,CAAC,KAAK,UAAU,sBAC9C,KAAK,uBAAyB,CAAC,CAAC,KAAK,UAAU,uBAC/C,KAAK,iBAAmB,CAAC,CAAC,KAAK,UAAU,iBACzC,KAAK,8BAAgC,KAAK,UAAU,8BAAgC,EACtF,CACA,oBAAqB,CACnB,KAAK,YAAc,IAAIE,GAA2B,KAAK,OAAO,EAAE,SAAS,EAAE,cAAc,KAAK,cAAc,EAC5G,KAAK,qBAAuB,KAAK,YAAY,OAAO,UAAUC,GAAS,CACjE,KAAK,QACP,KAAK,gBAAgB,KAAK,CACxB,OAAQ,KACR,OAAQ,KAAK,QAAQ,QAAQ,EAAEA,CAAK,GAAK,IAC3C,CAAC,CAEL,CAAC,EAED,KAAK,eAAe,CACtB,CACA,aAAc,CACZ,KAAK,aAAa,QAAQ,EAC1B,KAAK,qBAAqB,YAAY,CACxC,CAKA,cAAcC,EAAW,CACnB,KAAK,QACP,KAAK,MAAM,cAAc,UAAYA,EAEzC,CAEA,eAAgB,CACd,OAAO,KAAK,MAAQ,KAAK,MAAM,cAAc,UAAY,CAC3D,CAEA,gBAAiB,CACf,KAAK,UAAY,CAAC,CAAC,KAAK,QAAQ,OAChC,KAAK,mBAAmB,aAAa,CACvC,CAEA,iBAAiBjB,EAAQ,CACvB,IAAMkB,EAAQ,IAAIpB,GAA6B,KAAME,CAAM,EAC3D,KAAK,eAAe,KAAKkB,CAAK,CAChC,CAEA,wBAAwBC,EAAS,CAC/B,GAAI,KAAK,UACP,OAAO,KAET,IAAMC,EAAkBD,EAAUA,EAAU,IAAM,GAClD,OAAO,KAAK,eAAiBC,EAAkB,KAAK,eAAiBD,CACvE,CAeA,gBAAiB,CACf,MAAO,EACT,CACA,OAAO,UAAO,SAAiCE,EAAmB,CAChE,OAAO,IAAKA,GAAqBjB,EACnC,EACA,OAAO,UAAyBkB,EAAkB,CAChD,KAAMlB,EACN,UAAW,CAAC,CAAC,kBAAkB,CAAC,EAChC,eAAgB,SAAwClB,EAAIC,EAAKoC,EAAU,CAKzE,GAJIrC,EAAK,IACJsC,EAAeD,EAAUE,GAAW,CAAC,EACrCD,EAAeD,EAAUG,GAAc,CAAC,GAEzCxC,EAAK,EAAG,CACV,IAAIyC,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAM1C,EAAI,QAAUwC,GACxDC,EAAeD,EAAQE,EAAY,CAAC,IAAM1C,EAAI,aAAewC,EAClE,CACF,EACA,UAAW,SAA+BzC,EAAIC,EAAK,CAKjD,GAJID,EAAK,IACJ4C,EAAYC,GAAa,CAAC,EAC1BD,EAAY/C,GAAK,CAAC,GAEnBG,EAAK,EAAG,CACV,IAAIyC,EACDC,EAAeD,EAAQE,EAAY,CAAC,IAAM1C,EAAI,SAAWwC,EAAG,OAC5DC,EAAeD,EAAQE,EAAY,CAAC,IAAM1C,EAAI,MAAQwC,EAAG,MAC9D,CACF,EACA,UAAW,CAAC,EAAG,sBAAsB,EACrC,OAAQ,CACN,UAAW,CAAC,EAAG,aAAc,WAAW,EACxC,eAAgB,CAAC,EAAG,kBAAmB,gBAAgB,EACvD,YAAa,cACb,sBAAuB,CAAC,EAAG,wBAAyB,wBAAyBK,CAAgB,EAC7F,uBAAwB,CAAC,EAAG,yBAA0B,yBAA0BA,CAAgB,EAChG,iBAAkB,CAAC,EAAG,mBAAoB,mBAAoBA,CAAgB,EAC9E,WAAY,aACZ,cAAe,CAAC,EAAG,gBAAiB,gBAAiBA,CAAgB,EACrE,UAAW,CAAC,EAAG,QAAS,WAAW,EACnC,6BAA8B,CAAC,EAAG,+BAAgC,+BAAgCA,CAAgB,CACpH,EACA,QAAS,CACP,eAAgB,iBAChB,OAAQ,SACR,OAAQ,SACR,gBAAiB,iBACnB,EACA,SAAU,CAAC,iBAAiB,EAC5B,SAAU,CAAIC,EAAmB,CAAC,CAChC,QAASC,GACT,YAAa9B,CACf,CAAC,CAAC,CAAC,EACH,mBAAoBpB,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,QAAS,EAAE,EAAG,CAAC,OAAQ,UAAW,EAAG,6BAA8B,mBAAoB,yBAA0B,EAAG,IAAI,CAAC,EACnI,SAAU,SAAkCE,EAAIC,EAAK,CAC/CD,EAAK,IACJiD,EAAgB,EAChBC,EAAW,EAAGnD,GAAwC,EAAG,GAAI,aAAa,EAEjF,EACA,OAAQ,CAAC,oyCAAoyC,EAC7yC,cAAe,EACf,gBAAiB,CACnB,CAAC,CACH,CACA,OAAOmB,CACT,GAAG,EAgCH,IAAMiC,GAAkC,CACtC,QAASC,GACT,YAA0BC,GAAW,IAAMC,EAAsB,EACjE,MAAO,EACT,EASA,IAAMC,GAAgD,IAAIC,EAAe,mCAAoC,CAC3G,WAAY,OACZ,QAAS,IAAM,CACb,IAAMC,EAAUC,EAAOC,EAAO,EAC9B,MAAO,IAAMF,EAAQ,iBAAiB,WAAW,CACnD,CACF,CAAC,EAYD,IAAIG,IAAuC,IAAM,CAC/C,MAAMA,CAAuB,CAC3B,qBAAuBC,EAAOC,EAAmB,EACjD,SAAWD,EAAOE,CAAU,EAC5B,SAAWF,EAAOG,EAAO,EACzB,kBAAoBH,EAAOI,EAAgB,EAC3C,MAAQJ,EAAOK,CAAM,EACrB,mBAAqBL,EAAOM,CAAiB,EAC7C,KAAON,EAAOO,EAAgB,CAC5B,SAAU,EACZ,CAAC,EACD,WAAaP,EAAOQ,EAAgB,CAClC,SAAU,GACV,KAAM,EACR,CAAC,EACD,UAAYR,EAAOS,CAAQ,EAC3B,eAAiBT,EAAOU,EAAa,EACrC,gBAAkBV,EAAOW,EAAgC,EACzD,UAAYX,EAAOY,EAAS,EAC5B,UAAYZ,EAAOa,GAAkC,CACnD,SAAU,EACZ,CAAC,EACD,YACA,QACA,oBAAsB,GACtB,aAAe,IAAIC,EACnB,qBACA,0BACA,mBAEA,eAEA,eAEA,oBAEA,kBAEA,uBAAyB,GAEzB,4BAEA,sBAAwBC,EAAa,MAErC,oBAAsBf,EAAOgB,EAAkB,EAC/C,8BAAgCD,EAAa,MAM7C,oBAAsB,GAEtB,0BAKA,2BAEA,qBAAuB,IAAID,EAK3B,mBAAqB,IAAM,CAIzB,KAAK,oBAAsB,KAAK,UAAU,gBAAkB,KAAK,SAAS,eAAiB,KAAK,SAClG,EAEA,UAAY,IAAM,CAAC,EAEnB,WAAa,IAAM,CAAC,EAEpB,aAQA,SAAW,OAKX,YAKA,sBAAwB,MAKxB,qBACA,aAAc,CAAC,CAEf,YAAc,mCACd,iBAAkB,CAChB,KAAK,aAAa,KAAK,EACvB,KAAK,aAAa,SAAS,EAC3B,KAAK,mBAAqB,KAAK,UAAU,OAAO,SAAU,OAAQ,KAAK,kBAAkB,CAC3F,CACA,YAAYG,EAAS,CACfA,EAAQ,UAAe,KAAK,oBAC9B,KAAK,sBAAsB,KAAK,iBAAiB,EAC7C,KAAK,WACP,KAAK,YAAY,eAAe,EAGtC,CACA,aAAc,CACZ,KAAK,qBAAqB,EAC1B,KAAK,8BAA8B,YAAY,EAC/C,KAAK,sBAAsB,YAAY,EACvC,KAAK,oBAAsB,GAC3B,KAAK,cAAc,EACnB,KAAK,qBAAqB,SAAS,EACnC,KAAK,gBAAgB,CACvB,CAEA,IAAI,WAAY,CACd,OAAO,KAAK,kBAAoB,KAAK,aAAa,SACpD,CACA,iBAAmB,GAEnB,WAAY,CACV,KAAK,mBAAmB,CAC1B,CAEA,YAAa,CACX,KAAK,YAAY,EACZ,KAAK,mBAGN,KAAK,WAKP,KAAK,MAAM,IAAI,IAAM,CACnB,KAAK,aAAa,OAAO,KAAK,CAChC,CAAC,EAIC,KAAK,aAAa,wBAA0B,OAC9C,KAAK,aAAa,QAAU,GAC5B,KAAK,aAAa,sBAAwB,MAE5C,KAAK,iBAAmB,GACxB,KAAK,2BAA6B,KAC9B,KAAK,aAAe,KAAK,YAAY,YAAY,IACnD,KAAK,YAAY,OAAO,EACxB,KAAK,4BAA4B,YAAY,GAE/C,KAAK,kBAAkB,EAGlB,KAAK,qBAKR,KAAK,mBAAmB,cAAc,EAGpC,KAAK,eACPC,GAAuB,KAAK,cAAe,YAAa,KAAK,aAAa,EAAE,EAEhF,CAKA,gBAAiB,CACX,KAAK,kBACP,KAAK,YAAY,eAAe,CAEpC,CAKA,IAAI,qBAAsB,CACxB,OAAOC,EAAM,KAAK,iBAAkB,KAAK,aAAa,YAAY,OAAO,KAAKC,EAAO,IAAM,KAAK,gBAAgB,CAAC,EAAG,KAAK,qBAAsB,KAAK,uBAAuB,EAAG,KAAK,YAAc,KAAK,YAAY,YAAY,EAAE,KAAKA,EAAO,IAAM,KAAK,gBAAgB,CAAC,EAAIC,GAAG,CAAC,EAAE,KAElRC,EAAIC,GAASA,aAAiBC,GAA2BD,EAAQ,IAAI,CAAC,CACxE,CAEA,iBAAmBE,GAAM,IAAM,CAC7B,IAAMC,EAAU,KAAK,aAAe,KAAK,aAAa,QAAU,KAChE,OAAIA,EACKA,EAAQ,QAAQ,KAAKC,EAAUD,CAAO,EAAGE,EAAU,IAAMT,EAAM,GAAGO,EAAQ,IAAIG,GAAUA,EAAO,iBAAiB,CAAC,CAAC,CAAC,EAIrH,KAAK,aAAa,KAAKD,EAAU,IAAM,KAAK,gBAAgB,CAAC,CACtE,CAAC,EAED,IAAI,cAAe,CACjB,OAAI,KAAK,cAAgB,KAAK,aAAa,YAClC,KAAK,aAAa,YAAY,WAEhC,IACT,CAEA,wBAAyB,CACvB,OAAO,IAAIE,EAAWC,GAAY,CAChC,IAAMC,EAAWT,GAAS,CAGxB,IAAMU,EAAcC,GAAgBX,CAAK,EACnCY,EAAY,KAAK,WAAa,KAAK,WAAW,0BAA0B,EAAE,cAAgB,KAC1FC,EAAe,KAAK,YAAc,KAAK,YAAY,WAAW,cAAgB,KAChF,KAAK,kBAAoBH,IAAgB,KAAK,SAAS,eAK3D,KAAK,UAAU,gBAAkB,KAAK,SAAS,gBAAkB,CAACE,GAAa,CAACA,EAAU,SAASF,CAAW,KAAO,CAACG,GAAgB,CAACA,EAAa,SAASH,CAAW,IAAQ,KAAK,aAAe,CAAC,KAAK,YAAY,eAAe,SAASA,CAAW,GACvPF,EAAS,KAAKR,CAAK,CAEvB,EACMc,EAAW,CAAC,KAAK,UAAU,OAAO,WAAY,QAASL,CAAQ,EAAG,KAAK,UAAU,OAAO,WAAY,WAAYA,CAAQ,EAAG,KAAK,UAAU,OAAO,WAAY,WAAYA,CAAQ,CAAC,EACxL,MAAO,IAAM,CACXK,EAAS,QAAQC,GAAWA,EAAQ,CAAC,CACvC,CACF,CAAC,CACH,CAEA,WAAWC,EAAO,CAChB,QAAQ,QAAQ,IAAI,EAAE,KAAK,IAAM,KAAK,mBAAmBA,CAAK,CAAC,CACjE,CAEA,iBAAiBC,EAAI,CACnB,KAAK,UAAYA,CACnB,CAEA,kBAAkBA,EAAI,CACpB,KAAK,WAAaA,CACpB,CAEA,iBAAiBC,EAAY,CAC3B,KAAK,SAAS,cAAc,SAAWA,CACzC,CACA,eAAelB,EAAO,CACpB,IAAMmB,EAAUnB,EAAM,QAChBoB,EAAcC,EAAerB,CAAK,EASxC,GAJImB,IAAY,IAAU,CAACC,GACzBpB,EAAM,eAAe,EAEvB,KAAK,oBAAsB,KAAK,SAAS,cAAc,MACnD,KAAK,cAAgBmB,IAAY,IAAS,KAAK,WAAa,CAACC,EAC/D,KAAK,aAAa,sBAAsB,EACxC,KAAK,iBAAiB,EACtBpB,EAAM,eAAe,UACZ,KAAK,aAAc,CAC5B,IAAMsB,EAAiB,KAAK,aAAa,YAAY,WAC/CC,EAAaJ,IAAY,IAAYA,IAAY,GACnDA,IAAY,GAAOI,GAAc,CAACH,GAAe,KAAK,UACxD,KAAK,aAAa,YAAY,UAAUpB,CAAK,EACpCuB,GAAc,KAAK,SAAS,GACrC,KAAK,mBAAmB,KAAK,mBAAmB,GAE9CA,GAAc,KAAK,aAAa,YAAY,aAAeD,KAC7D,KAAK,gBAAgB,KAAK,aAAa,YAAY,iBAAmB,CAAC,EACnE,KAAK,aAAa,wBAA0B,KAAK,eAC9C,KAAK,6BACR,KAAK,0BAA4B,KAAK,qBAExC,KAAK,2BAA6B,KAAK,aACvC,KAAK,mBAAmB,KAAK,aAAa,KAAK,GAGrD,CACF,CACA,aAAatB,EAAO,CAClB,IAAIwB,EAASxB,EAAM,OACfgB,EAAQQ,EAAO,MAUnB,GARIA,EAAO,OAAS,WAClBR,EAAQA,GAAS,GAAK,KAAO,WAAWA,CAAK,GAO3C,KAAK,iBAAmBA,EAAO,CASjC,GARA,KAAK,eAAiBA,EACtB,KAAK,2BAA6B,MAI9B,CAAC,KAAK,cAAgB,CAAC,KAAK,aAAa,mBAC3C,KAAK,UAAUA,CAAK,EAElB,CAACA,EACH,KAAK,6BAA6B,KAAM,EAAK,UACpC,KAAK,WAAa,CAAC,KAAK,aAAa,iBAAkB,CAGhE,IAAMS,EAAiB,KAAK,aAAa,SAAS,KAAKnB,GAAUA,EAAO,QAAQ,EAChF,GAAImB,EAAgB,CAClB,IAAMC,EAAU,KAAK,iBAAiBD,EAAe,KAAK,EACtDT,IAAUU,GACZD,EAAe,SAAS,EAAK,CAEjC,CACF,CACA,GAAI,KAAK,SAAS,GAAK,KAAK,UAAU,gBAAkBzB,EAAM,OAAQ,CAMpE,IAAM2B,EAAgB,KAAK,qBAAuB,KAAK,SAAS,cAAc,MAC9E,KAAK,oBAAsB,KAC3B,KAAK,mBAAmBA,CAAa,CACvC,CACF,CACF,CACA,cAAe,CACR,KAAK,oBAEC,KAAK,SAAS,IACvB,KAAK,eAAiB,KAAK,SAAS,cAAc,MAClD,KAAK,eAAe,KAAK,cAAc,EACvC,KAAK,YAAY,EAAI,GAJrB,KAAK,oBAAsB,EAM/B,CACA,cAAe,CACT,KAAK,SAAS,GAAK,CAAC,KAAK,WAC3B,KAAK,mBAAmB,CAE5B,CAOA,YAAYC,EAAgB,GAAO,CAC7B,KAAK,YAAc,KAAK,WAAW,aAAe,SAChDA,EACF,KAAK,WAAW,qBAAqB,EAErC,KAAK,WAAW,WAAa,SAE/B,KAAK,uBAAyB,GAElC,CAEA,aAAc,CACR,KAAK,yBACH,KAAK,aACP,KAAK,WAAW,WAAa,QAE/B,KAAK,uBAAyB,GAElC,CAKA,4BAA6B,CAC3B,IAAMC,EAAgB,IAAItB,EAAWuB,GAAc,CACjDC,GAAgB,IAAM,CACpBD,EAAW,KAAK,CAClB,EAAG,CACD,SAAU,KAAK,oBACjB,CAAC,CACH,CAAC,EACKE,EAAgB,KAAK,aAAa,QAAQ,QAAQ,KAAKC,GAAI,IAAM,KAAK,kBAAkB,oBAAoB,CAAC,EAGnHC,GAAM,CAAC,CAAC,EAER,OAAOtC,EAAMiC,EAAeG,CAAa,EAAE,KAG3C3B,EAAU,IAAM,KAAK,MAAM,IAAI,IAAM,CAInC,IAAM8B,EAAU,KAAK,UACrB,YAAK,iBAAiB,EACtB,KAAK,kBAAkB,EACvB,KAAK,mBAAmB,cAAc,EAClC,KAAK,WACP,KAAK,YAAY,eAAe,EAE9BA,IAAY,KAAK,YAQf,KAAK,UACP,KAAK,YAAY,EAEjB,KAAK,aAAa,OAAO,KAAK,GAG3B,KAAK,mBACd,CAAC,CAAC,EAEFC,GAAK,CAAC,CAAC,EAEN,UAAUpC,GAAS,KAAK,kBAAkBA,CAAK,CAAC,CACnD,CAKA,aAAc,CACZ,KAAK,aAAa,OAAO,KAAK,CAChC,CAEA,eAAgB,CACV,KAAK,cACP,KAAK,WAAW,EAChB,KAAK,YAAY,QAAQ,EACzB,KAAK,YAAc,KAEvB,CAEA,iBAAiBgB,EAAO,CACtB,IAAMqB,EAAe,KAAK,aAC1B,OAAOA,GAAgBA,EAAa,YAAcA,EAAa,YAAYrB,CAAK,EAAIA,CACtF,CACA,mBAAmBA,EAAO,CACxB,IAAMsB,EAAY,KAAK,iBAAiBtB,CAAK,EACzCA,GAAS,MACX,KAAK,6BAA6B,KAAM,EAAK,EAI/C,KAAK,wBAAwBsB,GAAgC,EAAE,CACjE,CACA,wBAAwBtB,EAAO,CAGzB,KAAK,WACP,KAAK,WAAW,SAAS,MAAQA,EAEjC,KAAK,SAAS,cAAc,MAAQA,EAEtC,KAAK,eAAiBA,CACxB,CAMA,kBAAkBhB,EAAO,CACvB,IAAMuC,EAAQ,KAAK,aACbC,EAAWxC,EAAQA,EAAM,OAAS,KAAK,2BACzCwC,GACF,KAAK,6BAA6BA,CAAQ,EAC1C,KAAK,mBAAmBA,EAAS,KAAK,EAItC,KAAK,UAAUA,EAAS,KAAK,EAC7BD,EAAM,iBAAiBC,CAAQ,EAC/B,KAAK,SAAS,cAAc,MAAM,GACzBD,EAAM,kBAAoB,KAAK,SAAS,cAAc,QAAU,KAAK,iBAC9E,KAAK,6BAA6B,IAAI,EACtC,KAAK,mBAAmB,IAAI,EAC5B,KAAK,UAAU,IAAI,GAErB,KAAK,WAAW,CAClB,CAIA,6BAA6BE,EAAMC,EAAW,CAG5C,KAAK,cAAc,SAAS,QAAQpC,GAAU,CACxCA,IAAWmC,GAAQnC,EAAO,UAC5BA,EAAO,SAASoC,CAAS,CAE7B,CAAC,CACH,CACA,mBAAmBf,EAAgB,KAAK,SAAS,cAAc,MAAO,CAIpE,GAHA,KAAK,eAAeA,CAAa,EACjC,KAAK,YAAY,EAEb,KAAK,cAAe,CACtB,IAAMgB,EAAU,KAAK,aAAa,GAClCC,GAAoB,KAAK,cAAe,YAAaD,CAAO,CAC9D,CACF,CACA,eAAehB,EAAe,CACvB,KAAK,aAGV,IAAIkB,EAAa,KAAK,YACjBA,GA2BH,KAAK,kBAAkB,UAAU,KAAK,qBAAqB,CAAC,EAC5DA,EAAW,WAAW,CACpB,MAAO,KAAK,eAAe,CAC7B,CAAC,IA7BD,KAAK,QAAU,IAAIC,GAAe,KAAK,aAAa,SAAU,KAAK,kBAAmB,CACpF,GAAI,KAAK,YAAY,WAAW,CAClC,CAAC,EACDD,EAAa,KAAK,SAAS,OAAO,KAAK,kBAAkB,CAAC,EAC1D,KAAK,YAAcA,EACnB,KAAK,sBAAwB,KAAK,eAAe,OAAO,EAAE,UAAU,IAAM,CACpE,KAAK,WAAaA,GACpBA,EAAW,WAAW,CACpB,MAAO,KAAK,eAAe,CAC7B,CAAC,CAEL,CAAC,EAGD,KAAK,8BAAgC,KAAK,oBAAoB,QAAQE,GAAY,gBAAgB,EAAE,UAAUC,GAAU,CAC3FA,EAAO,QAIhC,KAAK,kBAAkB,uBAAuB,EAAI,EAAE,kBAAkB,EAAI,EAAE,mBAAmB,CAAC,EAEhG,KAAK,kBAAkB,uBAAuB,EAAK,EAAE,kBAAkB,EAAK,EAAE,mBAAmB,CAAC,CAEtG,CAAC,GAQCH,GAAc,CAACA,EAAW,YAAY,IACxCA,EAAW,OAAO,KAAK,OAAO,EAC9B,KAAK,eAAiBlB,EACtB,KAAK,oBAAsB,KAC3B,KAAK,4BAA8B,KAAK,2BAA2B,GAErE,IAAMQ,EAAU,KAAK,UACrB,KAAK,aAAa,QAAU,KAAK,iBAAmB,GACpD,KAAK,aAAa,sBAAwB,KAC1C,KAAK,aAAa,UAAU,KAAK,YAAY,KAAK,EAClD,KAAK,kBAAkB,EACvB,KAAK,0BAA0B,EAG3B,KAAK,WAAaA,IAAY,KAAK,WACrC,KAAK,YAAY,CAErB,CAEA,oBAAsBnC,GAAS,EAGzBA,EAAM,UAAY,IAAU,CAACqB,EAAerB,CAAK,GAAKA,EAAM,UAAY,IAAYqB,EAAerB,EAAO,QAAQ,KAGhH,KAAK,6BACP,KAAK,wBAAwB,KAAK,2BAA6B,EAAE,EACjE,KAAK,2BAA6B,MAEpC,KAAK,qBAAqB,KAAK,EAC/B,KAAK,iBAAiB,EAGtBA,EAAM,gBAAgB,EACtBA,EAAM,eAAe,EAEzB,EAEA,mBAAoB,CAKlB,GAJA,KAAK,aAAa,eAAe,EAI7B,KAAK,UAAW,CAClB,IAAM6C,EAAa,KAAK,YACnB,KAAK,uBAGR,KAAK,qBAAuBA,EAAW,cAAc,EAAE,UAAU,KAAK,mBAAmB,GAEtF,KAAK,4BAIR,KAAK,0BAA4BA,EAAW,qBAAqB,EAAE,UAAU,EAEjF,MACE,KAAK,sBAAsB,YAAY,EACvC,KAAK,2BAA2B,YAAY,EAC5C,KAAK,qBAAuB,KAAK,0BAA4B,IAEjE,CACA,mBAAoB,CAClB,OAAO,IAAII,GAAc,CACvB,iBAAkB,KAAK,oBAAoB,EAC3C,eAAgB,KAAK,gBAAgB,EACrC,MAAO,KAAK,eAAe,EAC3B,UAAW,KAAK,MAAQ,OACxB,WAAY,KAAK,WAAW,iBAC9B,CAAC,CACH,CACA,qBAAsB,CAEpB,IAAMC,EAAW,KAAK,SAAS,SAAS,EAAE,oBAAoB,KAAK,qBAAqB,CAAC,EAAE,uBAAuB,EAAK,EAAE,SAAS,EAAK,EACvI,YAAK,sBAAsBA,CAAQ,EACnC,KAAK,kBAAoBA,EAClBA,CACT,CAEA,sBAAsBC,EAAkB,CAGtC,IAAMC,EAAiB,CAAC,CACtB,QAAS,QACT,QAAS,SACT,SAAU,QACV,SAAU,KACZ,EAAG,CACD,QAAS,MACT,QAAS,SACT,SAAU,MACV,SAAU,KACZ,CAAC,EAIKC,EAAa,KAAK,YAClBC,EAAiB,CAAC,CACtB,QAAS,QACT,QAAS,MACT,SAAU,QACV,SAAU,SACV,WAAAD,CACF,EAAG,CACD,QAAS,MACT,QAAS,MACT,SAAU,MACV,SAAU,SACV,WAAAA,CACF,CAAC,EACGE,EACA,KAAK,WAAa,QACpBA,EAAYD,EACH,KAAK,WAAa,QAC3BC,EAAYH,EAEZG,EAAY,CAAC,GAAGH,EAAgB,GAAGE,CAAc,EAEnDH,EAAiB,cAAcI,CAAS,CAC1C,CACA,sBAAuB,CACrB,OAAI,KAAK,YACA,KAAK,YAAY,WAEnB,KAAK,WAAa,KAAK,WAAW,0BAA0B,EAAI,KAAK,QAC9E,CACA,gBAAiB,CACf,OAAO,KAAK,aAAa,YAAc,KAAK,cAAc,CAC5D,CAEA,eAAgB,CACd,OAAO,KAAK,qBAAqB,EAAE,cAAc,sBAAsB,EAAE,KAC3E,CAQA,kBAAmB,CACjB,IAAMlB,EAAe,KAAK,aAC1B,GAAIA,EAAa,sBAAuB,CAItC,IAAImB,EAA0B,GAC9B,QAASC,EAAQ,EAAGA,EAAQpB,EAAa,QAAQ,OAAQoB,IAEvD,GAAI,CADWpB,EAAa,QAAQ,IAAIoB,CAAK,EACjC,SAAU,CACpBD,EAA0BC,EAC1B,KACF,CAEFpB,EAAa,YAAY,cAAcmB,CAAuB,CAChE,MACEnB,EAAa,YAAY,cAAc,EAAE,CAE7C,CAEA,UAAW,CACT,IAAMqB,EAAU,KAAK,SAAS,cAC9B,MAAO,CAACA,EAAQ,UAAY,CAACA,EAAQ,UAAY,CAAC,KAAK,oBACzD,CAEA,gBAAgBD,EAAO,CAQrB,IAAMpB,EAAe,KAAK,aACpBsB,EAAaC,GAA8BH,EAAOpB,EAAa,QAASA,EAAa,YAAY,EACvG,GAAIoB,IAAU,GAAKE,IAAe,EAIhCtB,EAAa,cAAc,CAAC,UACnBA,EAAa,MAAO,CAC7B,IAAM/B,EAAS+B,EAAa,QAAQ,QAAQ,EAAEoB,CAAK,EACnD,GAAInD,EAAQ,CACV,IAAMoD,EAAUpD,EAAO,gBAAgB,EACjCuD,EAAoBC,GAAyBJ,EAAQ,UAAWA,EAAQ,aAAcrB,EAAa,cAAc,EAAGA,EAAa,MAAM,cAAc,YAAY,EACvKA,EAAa,cAAcwB,CAAiB,CAC9C,CACF,CACF,CAMA,cAAgB,KAoBhB,2BAA4B,CAO1B,IAAME,EAAQ,KAAK,SAAS,cAAc,QAAQ,mDAAmD,EACrG,GAAI,CAACA,EAEH,OAEF,IAAMpB,EAAU,KAAK,aAAa,GAC9B,KAAK,eACPhD,GAAuB,KAAK,cAAe,YAAagD,CAAO,EAEjEC,GAAoBmB,EAAO,YAAapB,CAAO,EAC/C,KAAK,cAAgBoB,CACvB,CAEA,iBAAkB,CAChB,GAAI,KAAK,cAAe,CACtB,IAAMpB,EAAU,KAAK,aAAa,GAClChD,GAAuB,KAAK,cAAe,YAAagD,CAAO,EAC/D,KAAK,cAAgB,IACvB,CACF,CACA,OAAO,UAAO,SAAwCqB,EAAmB,CACvE,OAAO,IAAKA,GAAqBxF,EACnC,EACA,OAAO,UAAyByF,EAAkB,CAChD,KAAMzF,EACN,UAAW,CAAC,CAAC,QAAS,kBAAmB,EAAE,EAAG,CAAC,WAAY,kBAAmB,EAAE,CAAC,EACjF,UAAW,CAAC,EAAG,8BAA8B,EAC7C,SAAU,EACV,aAAc,SAA6C0F,EAAIC,EAAK,CAC9DD,EAAK,GACJE,EAAW,UAAW,UAA6D,CACpF,OAAOD,EAAI,aAAa,CAC1B,CAAC,EAAE,OAAQ,UAA0D,CACnE,OAAOA,EAAI,WAAW,CACxB,CAAC,EAAE,QAAS,SAAyDE,EAAQ,CAC3E,OAAOF,EAAI,aAAaE,CAAM,CAChC,CAAC,EAAE,UAAW,SAA2DA,EAAQ,CAC/E,OAAOF,EAAI,eAAeE,CAAM,CAClC,CAAC,EAAE,QAAS,UAA2D,CACrE,OAAOF,EAAI,aAAa,CAC1B,CAAC,EAECD,EAAK,GACJI,EAAY,eAAgBH,EAAI,qBAAqB,EAAE,OAAQA,EAAI,qBAAuB,KAAO,UAAU,EAAE,oBAAqBA,EAAI,qBAAuB,KAAO,MAAM,EAAE,wBAAyBA,EAAI,WAAaA,EAAI,aAAeA,EAAI,aAAa,GAAK,IAAI,EAAE,gBAAiBA,EAAI,qBAAuB,KAAOA,EAAI,UAAU,SAAS,CAAC,EAAE,gBAAiBA,EAAI,sBAAwB,CAACA,EAAI,WAAmBA,EAAI,cAAgB,KAA3B,KAAyCA,EAAI,aAAa,EAAE,EAAE,gBAAiBA,EAAI,qBAAuB,KAAO,SAAS,CAEjhB,EACA,OAAQ,CACN,aAAc,CAAC,EAAG,kBAAmB,cAAc,EACnD,SAAU,CAAC,EAAG,0BAA2B,UAAU,EACnD,YAAa,CAAC,EAAG,6BAA8B,aAAa,EAC5D,sBAAuB,CAAC,EAAG,eAAgB,uBAAuB,EAClE,qBAAsB,CAAC,EAAG,0BAA2B,uBAAwBI,CAAgB,CAC/F,EACA,SAAU,CAAC,wBAAwB,EACnC,SAAU,CAAIC,EAAmB,CAACC,EAA+B,CAAC,EAAMC,EAAoB,CAC9F,CAAC,CACH,CACA,OAAOlG,CACT,GAAG","names":["SingleBoxSharedResizeObserver","Subject","_box","entries","target","Observable","observer","subscription","filter","entry","shareReplay","takeUntil","SharedResizeObserver","inject","NgZone","options","box","__ngFactoryType__","ɵɵdefineInjectable","_c0","_c1","_c2","_c3","_c4","_c5","_c6","_c7","_c8","_c9","MatFormField_ng_template_0_Conditional_0_Conditional_2_Template","rf","ctx","ɵɵelement","MatFormField_ng_template_0_Conditional_0_Template","ɵɵelementStart","ɵɵprojection","ɵɵtemplate","ɵɵelementEnd","ctx_r1","ɵɵnextContext","ɵɵproperty","ɵɵattribute","ɵɵadvance","ɵɵconditional","MatFormField_ng_template_0_Template","MatFormField_Conditional_4_Template","MatFormField_Conditional_6_Conditional_1_ng_template_0_Template","MatFormField_Conditional_6_Conditional_1_Template","labelTemplate_r3","ɵɵreference","MatFormField_Conditional_6_Template","MatFormField_Conditional_7_Template","MatFormField_Conditional_8_Template","MatFormField_Conditional_10_ng_template_0_Template","MatFormField_Conditional_10_Template","MatFormField_Conditional_12_Template","MatFormField_Conditional_13_Template","MatFormField_Conditional_14_Template","MatFormField_Case_16_Template","MatFormField_Case_17_Conditional_1_Template","ɵɵtext","ɵɵtextInterpolate","MatFormField_Case_17_Template","MatLabel","__ngFactoryType__","ɵɵdefineDirective","MAT_ERROR","InjectionToken","MatHint","inject","_IdGenerator","__ngFactoryType__","ɵɵdefineDirective","rf","ctx","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","MAT_PREFIX","InjectionToken","MAT_SUFFIX","InjectionToken","FLOATING_LABEL_PARENT","InjectionToken","MatFormFieldFloatingLabel","inject","ElementRef","value","SharedResizeObserver","NgZone","Subscription","estimateScrollWidth","__ngFactoryType__","ɵɵdefineDirective","rf","ctx","ɵɵclassProp","element","htmlEl","clone","scrollWidth","ACTIVATE_CLASS","DEACTIVATING_CLASS","MatFormFieldLineRipple","ngZone","renderer","Renderer2","classList","event","isDeactivating","MatFormFieldNotchedOutline","label","labelWidth","ɵɵdefineComponent","ɵɵviewQuery","_c0","_t","ɵɵqueryRefresh","ɵɵloadQuery","_c1","_c2","ɵɵprojectionDef","ɵɵelement","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","MatFormFieldControl","MAT_FORM_FIELD","InjectionToken","MAT_FORM_FIELD_DEFAULT_OPTIONS","DEFAULT_APPEARANCE","DEFAULT_FLOAT_LABEL","DEFAULT_SUBSCRIPT_SIZING","FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM","MatFormField","inject","ElementRef","ChangeDetectorRef","Directionality","Platform","_IdGenerator","NgZone","Injector","contentChild","MatLabel","value","coerceBooleanProperty","oldValue","newAppearance","Subject","defaults","ANIMATION_MODULE_TYPE","computed","previousControl","control","classPrefix","startWith","map","pairwise","filter","prevErrorState","prevDescribedBy","currentErrorState","currentDescribedBy","takeUntil","p","s","merge","afterRender","prop","ids","startHint","hint","endHint","error","floatingLabel","iconPrefixContainer","textPrefixContainer","iconSuffixContainer","textSuffixContainer","iconPrefixContainerWidth","textPrefixContainerWidth","iconSuffixContainerWidth","textSuffixContainerWidth","negate","prefixWidth","labelHorizontalOffset","prefixAndSuffixWidth","element","rootNode","__ngFactoryType__","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuerySignal","ɵɵcontentQuery","MatFormFieldControl","MAT_PREFIX","MAT_SUFFIX","MAT_ERROR","MatHint","ɵɵqueryAdvance","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","_c3","_c4","_c5","_c6","_c7","MatFormFieldFloatingLabel","MatFormFieldNotchedOutline","MatFormFieldLineRipple","ɵɵclassProp","ɵɵProvidersFeature","FLOATING_LABEL_PARENT","_c9","_r1","ɵɵgetCurrentView","ɵɵprojectionDef","_c8","ɵɵtemplate","MatFormField_ng_template_0_Template","ɵɵtemplateRefExtractor","ɵɵelementStart","ɵɵlistener","$event","ɵɵrestoreView","ɵɵresetView","MatFormField_Conditional_4_Template","MatFormField_Conditional_6_Template","MatFormField_Conditional_7_Template","MatFormField_Conditional_8_Template","MatFormField_Conditional_10_Template","ɵɵprojection","ɵɵelementEnd","MatFormField_Conditional_12_Template","MatFormField_Conditional_13_Template","MatFormField_Conditional_14_Template","MatFormField_Case_16_Template","MatFormField_Case_17_Template","tmp_16_0","ɵɵadvance","ɵɵconditional","NgTemplateOutlet","_c0","_c1","MatChip_Conditional_3_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","MatChip_Conditional_7_Template","_c2","_c3","_c4","MatChipRow_Conditional_0_Template","rf","ctx","ɵɵelement","MatChipRow_Conditional_2_Template","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","MatChipRow_Conditional_4_Conditional_0_Template","MatChipRow_Conditional_4_Conditional_1_Template","MatChipRow_Conditional_4_Template","ɵɵtemplate","ctx_r0","ɵɵnextContext","ɵɵconditional","MatChipRow_Conditional_5_Template","MatChipRow_Conditional_7_Template","_c5","_c6","MAT_CHIPS_DEFAULT_OPTIONS","InjectionToken","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MAT_CHIP_REMOVE","MAT_CHIP","MatChipAction","inject","ElementRef","value","_CdkPrivateStyleLoader","_StructuralStylesLoader","event","__ngFactoryType__","ɵɵdefineDirective","ɵɵlistener","$event","ɵɵattribute","ɵɵclassProp","booleanAttribute","numberAttribute","MatChipRemove","MatChipAction","event","ɵMatChipRemove_BaseFactory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵɵdefineDirective","rf","ctx","ɵɵattribute","ɵɵProvidersFeature","MAT_CHIP_REMOVE","ɵɵInheritDefinitionFeature","MatChip","inject","ChangeDetectorRef","ElementRef","NgZone","FocusMonitor","MAT_RIPPLE_GLOBAL_OPTIONS","DOCUMENT","Subject","_IdGenerator","value","EventEmitter","MatRippleLoader","Injector","styleLoader","_CdkPrivateStyleLoader","_StructuralStylesLoader","_VisuallyHiddenLoader","animationMode","ANIMATION_MODULE_TYPE","element","merge","target","action","result","origin","hasFocus","ɵɵdefineComponent","dirIndex","ɵɵcontentQuery","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","ɵɵlistener","$event","ɵɵhostProperty","ɵɵclassMap","ɵɵclassProp","booleanAttribute","MAT_CHIP","_c1","ɵɵprojectionDef","_c0","ɵɵelement","ɵɵelementStart","ɵɵtemplate","MatChip_Conditional_3_Template","ɵɵprojection","ɵɵelementEnd","MatChip_Conditional_7_Template","ɵɵadvance","ɵɵproperty","ɵɵconditional","MatChipEditInput","inject","ElementRef","DOCUMENT","initialValue","value","range","sel","__ngFactoryType__","ɵɵdefineDirective","MatChipRow","MatChip","EventEmitter","takeUntil","event","afterNextRender","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","ɵɵlistener","$event","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","ɵɵProvidersFeature","MAT_CHIP","ɵɵInheritDefinitionFeature","_c4","ɵɵprojectionDef","_c3","ɵɵtemplate","MatChipRow_Conditional_0_Template","ɵɵelementStart","MatChipRow_Conditional_2_Template","MatChipRow_Conditional_4_Template","MatChipRow_Conditional_5_Template","ɵɵelement","ɵɵelementEnd","MatChipRow_Conditional_7_Template","ɵɵtext","ɵɵconditional","ɵɵadvance","ɵɵproperty","ɵɵtextInterpolate","MatChipAction","_c2","MatChipSet","ChangeDetectorRef","Directionality","Subject","chip","QueryList","index","previous","mappingFunction","startWith","switchMap","merge","currentElement","chips","actions","action","FocusKeyManager","direction","chipIndex","newIndex","chipToFocus","booleanAttribute","numberAttribute","_c5","ɵɵprojection","MatChipGridChange","source","value","MatChipGrid","MatChipSet","inject","NgControl","Validators","chip","EventEmitter","Subject","parentForm","NgForm","parentFormGroup","FormGroupDirective","defaultErrorStateMatcher","ErrorStateMatcher","_ErrorStateTracker","takeUntil","merge","inputElement","event","activeItem","ids","fn","isDisabled","keyCode","hasModifierKey","eligibleActions","action","currentIndex","delta","valueToEmit","__ngFactoryType__","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuery","MatChipRow","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵlistener","ɵɵattribute","ɵɵclassProp","booleanAttribute","ɵɵProvidersFeature","MatFormFieldControl","ɵɵInheritDefinitionFeature","_c5","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","_c6","MatChipInput","ElementRef","_IdGenerator","defaultOptions","MAT_CHIPS_DEFAULT_OPTIONS","formField","MAT_FORM_FIELD","element","ɵɵdefineDirective","$event","ɵɵhostProperty","ɵɵNgOnChangesFeature","_c0","_c1","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","ctx_r1","ɵɵnextContext","ɵɵclassMap","ɵɵclassProp","ɵɵproperty","ɵɵattribute","MatAutocompleteSelectedEvent","source","option","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","inject","ChangeDetectorRef","ElementRef","ANIMATION_MODULE_TYPE","Subscription","value","EventEmitter","_IdGenerator","platform","Platform","ActiveDescendantKeyManager","index","scrollTop","event","labelId","labelExpression","__ngFactoryType__","ɵɵdefineComponent","dirIndex","ɵɵcontentQuery","MatOption","MAT_OPTGROUP","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","TemplateRef","booleanAttribute","ɵɵProvidersFeature","MAT_OPTION_PARENT_COMPONENT","ɵɵprojectionDef","ɵɵtemplate","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","InjectionToken","overlay","inject","Overlay","MatAutocompleteTrigger","inject","EnvironmentInjector","ElementRef","Overlay","ViewContainerRef","NgZone","ChangeDetectorRef","Directionality","MAT_FORM_FIELD","DOCUMENT","ViewportRuler","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Renderer2","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","Subject","Subscription","BreakpointObserver","changes","removeAriaReferencedId","merge","filter","of","map","event","MatOptionSelectionChange","defer","options","startWith","switchMap","option","Observable","observer","listener","clickTarget","_getEventTarget","formField","customOrigin","cleanups","current","value","fn","isDisabled","keyCode","hasModifier","hasModifierKey","prevActiveItem","isArrowKey","target","selectedOption","display","valueOnAttach","shouldAnimate","initialRender","subscriber","afterNextRender","optionChanges","tap","delay","wasOpen","take","autocomplete","toDisplay","panel","toSelect","skip","emitEvent","panelId","addAriaReferencedId","overlayRef","TemplatePortal","Breakpoints","result","OverlayConfig","strategy","positionStrategy","belowPositions","panelClass","abovePositions","positions","firstEnabledOptionIndex","index","element","labelCount","_countGroupLabelsBeforeOption","newScrollPosition","_getOptionScrollPosition","modal","__ngFactoryType__","ɵɵdefineDirective","rf","ctx","ɵɵlistener","$event","ɵɵattribute","booleanAttribute","ɵɵProvidersFeature","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","ɵɵNgOnChangesFeature"],"x_google_ignoreList":[0,1,2,3]}