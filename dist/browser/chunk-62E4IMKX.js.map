{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/info-panel/info-panel.component.ts", "src/main/webapp/app/shared/info-panel/info-panel.component.html", "src/main/webapp/app/exercises/shared/dashboards/tutor/language-table-cell/language-table-cell.component.ts", "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html", "src/main/webapp/app/orion/assessment/orion-exercise-assessment-dashboard.component.ts", "src/main/webapp/app/orion/assessment/orion-exercise-assessment-dashboard.component.html"],
  "sourcesContent": ["import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'jhi-info-panel',\r\n    templateUrl: './info-panel.component.html',\r\n    styleUrls: ['./info-panel.scss'],\r\n})\r\nexport class InfoPanelComponent {\r\n    @Input() panelHeader: string;\r\n    @Input() panelDescriptionHeader: string;\r\n}\r\n", "<div class=\"guided-tour panel-wrapper\">\r\n    <div class=\"panel-header\">\r\n        {{ panelHeader }}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <ng-content />\r\n    </div>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-language-table-cell',\r\n    template: \"<span>{{ 'artemisApp.exerciseAssessmentDashboard.languages.' + (textSubmission.language || 'UNKNOWN') | artemisTranslate }}</span>\",\r\n    imports: [ArtemisTranslatePipe],\r\n})\r\nexport class LanguageTableCellComponent {\r\n    textSubmission: TextSubmission;\r\n\r\n    @Input()\r\n    set submission(submission: Submission) {\r\n        this.textSubmission = submission as TextSubmission;\r\n    }\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\r\nimport { ProgrammingExerciseInstructionComponent } from 'app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component';\r\nimport { TutorParticipationService } from 'app/exercises/shared/dashboards/tutor/tutor-participation.service';\r\nimport { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\r\nimport { ExampleSubmission } from 'app/entities/example-submission.model';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { UMLModel } from '@ls1intum/apollon';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { Submission, SubmissionExerciseType, getLatestSubmissionResult, getSubmissionResultByCorrectionRound, setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { finalize, map } from 'rxjs/operators';\r\nimport { StatsForDashboard } from 'app/course/dashboards/stats-for-dashboard.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { GuidedTourService } from 'app/guided-tour/guided-tour.service';\r\nimport { tutorAssessmentTour } from 'app/guided-tour/tours/tutor-assessment-tour';\r\nimport { Exercise, ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { TutorParticipation, TutorParticipationStatus } from 'app/entities/participation/tutor-participation.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { DueDateStat } from 'app/course/dashboards/due-date-stat.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { SubmissionService, SubmissionWithComplaintDTO } from 'app/exercises/shared/submission/submission.service';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { getLinkToSubmissionAssessment } from 'app/utils/navigation.utils';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { LegendPosition, PieChartModule } from '@swimlane/ngx-charts';\r\nimport { AssessmentDashboardInformationEntry } from 'app/course/dashboards/assessment-dashboard/assessment-dashboard-information.component';\r\nimport dayjs from 'dayjs/esm';\r\nimport { faCheckCircle, faExclamationTriangle, faFolderOpen, faListAlt, faQuestionCircle, faSort, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { PROFILE_LOCALVC } from 'app/app.constants';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { isManualResult } from 'app/exercises/shared/result/result.utils';\r\nimport { HeaderExercisePageWithDetailsComponent } from '../../exercise-headers/header-exercise-page-with-details.component';\r\nimport { TutorParticipationGraphComponent } from 'app/shared/dashboards/tutor-participation-graph/tutor-participation-graph.component';\r\nimport { SecondCorrectionEnableButtonComponent } from './second-correction-button/second-correction-enable-button.component';\r\nimport { SidePanelComponent } from 'app/shared/side-panel/side-panel.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { InfoPanelComponent } from 'app/shared/info-panel/info-panel.component';\r\nimport { SecureLinkDirective } from 'app/shared/http/secure-link.directive';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { StructuredGradingInstructionsAssessmentLayoutComponent } from 'app/assessment/structured-grading-instructions-assessment-layout/structured-grading-instructions-assessment-layout.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { LanguageTableCellComponent } from './language-table-cell/language-table-cell.component';\r\nimport { NgStyle } from '@angular/common';\r\nimport { ResultComponent } from '../../result/result.component';\r\nimport { AssessmentWarningComponent } from 'app/assessment/assessment-warning/assessment-warning.component';\r\nimport { CollapsableAssessmentInstructionsComponent } from 'app/assessment/assessment-instructions/collapsable-assessment-instructions/collapsable-assessment-instructions.component';\r\nimport { TutorLeaderboardComponent } from 'app/shared/dashboards/tutor-leaderboard/tutor-leaderboard.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\nexport interface ExampleSubmissionQueryParams {\r\n    readOnly?: boolean;\r\n    toComplete?: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-assessment-dashboard',\r\n    templateUrl: './exercise-assessment-dashboard.component.html',\r\n    styleUrls: ['./exercise-assessment-dashboard.component.scss'],\r\n    providers: [CourseManagementService],\r\n    imports: [\r\n        HeaderExercisePageWithDetailsComponent,\r\n        TutorParticipationGraphComponent,\r\n        SecondCorrectionEnableButtonComponent,\r\n        PieChartModule,\r\n        SidePanelComponent,\r\n        TranslateDirective,\r\n        RouterLink,\r\n        FaIconComponent,\r\n        InfoPanelComponent,\r\n        ProgrammingExerciseInstructionComponent,\r\n        ModelingEditorComponent,\r\n        SecureLinkDirective,\r\n        ButtonComponent,\r\n        CodeButtonComponent,\r\n        StructuredGradingInstructionsAssessmentLayoutComponent,\r\n        NgbTooltip,\r\n        SortDirective,\r\n        SortByDirective,\r\n        LanguageTableCellComponent,\r\n        NgStyle,\r\n        ResultComponent,\r\n        AssessmentWarningComponent,\r\n        CollapsableAssessmentInstructionsComponent,\r\n        TutorLeaderboardComponent,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n        ArtemisDurationFromSecondsPipe,\r\n        // TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution\r\n        // ExtensionPointDirective,\r\n    ],\r\n})\r\nexport class ExerciseAssessmentDashboardComponent implements OnInit {\r\n    complaintService = inject(ComplaintService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private alertService = inject(AlertService);\r\n    private translateService = inject(TranslateService);\r\n    private accountService = inject(AccountService);\r\n    private route = inject(ActivatedRoute);\r\n    private tutorParticipationService = inject(TutorParticipationService);\r\n    private submissionService = inject(SubmissionService);\r\n    private textSubmissionService = inject(TextSubmissionService);\r\n    private modelingSubmissionService = inject(ModelingSubmissionService);\r\n    private fileUploadSubmissionService = inject(FileUploadSubmissionService);\r\n    private artemisMarkdown = inject(ArtemisMarkdownService);\r\n    private router = inject(Router);\r\n    private programmingSubmissionService = inject(ProgrammingSubmissionService);\r\n    private guidedTourService = inject(GuidedTourService);\r\n    private sortService = inject(SortService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    readonly roundScoreSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly getCourseFromExercise = getCourseFromExercise;\r\n\r\n    exercise: Exercise;\r\n    modelingExercise: ModelingExercise;\r\n    programmingExercise: ProgrammingExercise;\r\n    courseId: number;\r\n    exam?: Exam;\r\n    examId: number;\r\n    exerciseGroupId: number;\r\n    isExamMode = false;\r\n    isTestRun = false;\r\n    isLoading = false;\r\n\r\n    localVCEnabled = false;\r\n\r\n    statsForDashboard = new StatsForDashboard();\r\n\r\n    exerciseId: number;\r\n    numberOfTutorAssessments = 0;\r\n    numberOfSubmissions = new DueDateStat();\r\n    totalNumberOfAssessments = new DueDateStat();\r\n    numberOfAutomaticAssistedAssessments = new DueDateStat();\r\n    numberOfAssessmentsOfCorrectionRounds = [new DueDateStat()];\r\n    numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = [new DueDateStat()];\r\n    complaintsEnabled = false;\r\n    feedbackRequestEnabled = false;\r\n    tutorAssessmentPercentage = 0;\r\n    tutorParticipationStatus: TutorParticipationStatus;\r\n    assessedSubmissionsByRound: Map<number, Submission[]> = new Map<number, Submission[]>();\r\n    unassessedSubmissionByRound?: Map<number, Submission> = new Map<number, Submission>();\r\n    exampleSubmissionsToReview: ExampleSubmission[] = [];\r\n    exampleSubmissionsToAssess: ExampleSubmission[] = [];\r\n    exampleSubmissionsCompletedByTutor: ExampleSubmission[] = [];\r\n    tutorParticipation: TutorParticipation;\r\n    nextExampleSubmissionId: number;\r\n    exampleSolutionModel: UMLModel;\r\n    complaints: Complaint[] = [];\r\n    submissionsWithMoreFeedbackRequests: SubmissionWithComplaintDTO[] = [];\r\n    submissionsWithComplaints: SubmissionWithComplaintDTO[] = [];\r\n    submissionLockLimitReached = false;\r\n    openingAssessmentEditorForNewSubmission = false;\r\n    secondCorrectionEnabled = false;\r\n    numberOfCorrectionRoundsEnabled = this.secondCorrectionEnabled ? 2 : 1;\r\n\r\n    formattedGradingInstructions?: SafeHtml;\r\n    formattedProblemStatement?: SafeHtml;\r\n    formattedSampleSolution?: SafeHtml;\r\n    getSubmissionResultByCorrectionRound = getSubmissionResultByCorrectionRound;\r\n\r\n    // helper variables to display information message about why no new assessments are possible anymore\r\n    lockedSubmissionsByOtherTutor: number[] = [];\r\n    notYetAssessed: number[] = [];\r\n    firstRoundAssessments: number;\r\n\r\n    // attributes for sorting the tables\r\n    sortPredicates = ['submissionDate', 'complaint.accepted', 'complaint.accepted'];\r\n    reverseOrders = [true, false, false];\r\n\r\n    readonly ExerciseType = ExerciseType;\r\n\r\n    stats = {\r\n        toReview: {\r\n            done: 0,\r\n            total: 0,\r\n        },\r\n        toAssess: {\r\n            done: 0,\r\n            total: 0,\r\n        },\r\n    };\r\n\r\n    NOT_PARTICIPATED = TutorParticipationStatus.NOT_PARTICIPATED;\r\n    REVIEWED_INSTRUCTIONS = TutorParticipationStatus.REVIEWED_INSTRUCTIONS;\r\n    TRAINED = TutorParticipationStatus.TRAINED;\r\n    COMPLETED = TutorParticipationStatus.COMPLETED;\r\n\r\n    tutor?: User;\r\n    togglingSecondCorrectionButton = false;\r\n\r\n    exerciseForGuidedTour?: Exercise;\r\n\r\n    complaintsDashboardInfo = new AssessmentDashboardInformationEntry(0, 0);\r\n    moreFeedbackRequestsDashboardInfo = new AssessmentDashboardInformationEntry(0, 0);\r\n    ratingsDashboardInfo = new AssessmentDashboardInformationEntry(0, 0);\r\n\r\n    // graph\r\n    view: [number, number] = [330, 150];\r\n    legendPosition = LegendPosition.Below;\r\n    assessments: any[];\r\n    customColors: any[];\r\n    isAutomaticAssessedProgrammingExercise = false;\r\n\r\n    // links\r\n    complaintsLink: any[];\r\n    moreFeedbackRequestsLink: any[];\r\n\r\n    // extension points, see shared/extension-point\r\n    // TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n    // @ContentChild('overrideAssessmentTable') overrideAssessmentTable: TemplateRef<any>;\r\n    // @ContentChild('overrideOpenAssessmentButton') overrideOpenAssessmentButton: TemplateRef<any>;\r\n\r\n    // Icons\r\n    faSpinner = faSpinner;\r\n    faQuestionCircle = faQuestionCircle;\r\n    faCheckCircle = faCheckCircle;\r\n    faFolderOpen = faFolderOpen;\r\n    faSort = faSort;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faListAlt = faListAlt;\r\n\r\n    /**\r\n     * Extracts the course and exercise ids from the route params and fetches the exercise from the server\r\n     */\r\n    ngOnInit(): void {\r\n        this.exerciseId = Number(this.route.snapshot.paramMap.get('exerciseId'));\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.isTestRun = this.router.url.indexOf('test-assessment-dashboard') >= 0;\r\n        this.unassessedSubmissionByRound = new Map<number, Submission>();\r\n\r\n        if (this.route.snapshot.paramMap.has('examId')) {\r\n            this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        }\r\n\r\n        this.loadAll();\r\n        this.accountService.identity().then((user: User) => (this.tutor = user));\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.setupGraph();\r\n        });\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.localVCEnabled = profileInfo.activeProfiles.includes(PROFILE_LOCALVC);\r\n        });\r\n    }\r\n\r\n    setupGraph() {\r\n        // If the programming exercise is assessed automatically but complaints are enabled, the term \"unassessed submissions\" might be misleading.\r\n        // In this case, we only show open and resolved complaints\r\n        if (this.programmingExercise && this.programmingExercise.assessmentType === AssessmentType.AUTOMATIC && this.programmingExercise.allowComplaintsForAutomaticAssessments) {\r\n            const numberOfComplaintsLabel = this.translateService.instant('artemisApp.exerciseAssessmentDashboard.numberOfOpenComplaints');\r\n            const numberOfResolvedComplaintsLabel = this.translateService.instant('artemisApp.exerciseAssessmentDashboard.numberOfResolvedComplaints');\r\n            this.isAutomaticAssessedProgrammingExercise = true;\r\n            this.customColors = [\r\n                { name: numberOfComplaintsLabel, value: GraphColors.YELLOW },\r\n                { name: numberOfResolvedComplaintsLabel, value: GraphColors.GREEN },\r\n            ];\r\n            this.assessments = [\r\n                {\r\n                    name: numberOfComplaintsLabel,\r\n                    value: this.statsForDashboard.numberOfOpenComplaints,\r\n                },\r\n                {\r\n                    name: numberOfResolvedComplaintsLabel,\r\n                    value: this.statsForDashboard.numberOfComplaints - this.statsForDashboard.numberOfOpenComplaints,\r\n                },\r\n            ];\r\n        } else {\r\n            const numberOfUnassessedSubmissionLabel = this.translateService.instant('artemisApp.exerciseAssessmentDashboard.numberOfUnassessedSubmissions');\r\n            const numberOfAutomaticAssistedSubmissionsLabel = this.translateService.instant('artemisApp.exerciseAssessmentDashboard.numberOfAutomaticAssistedSubmissions');\r\n            const numberOfManualAssessedSubmissionsLabel = this.translateService.instant('artemisApp.exerciseAssessmentDashboard.numberOfManualAssessedSubmissions');\r\n            this.customColors = [\r\n                { name: numberOfUnassessedSubmissionLabel, value: GraphColors.RED },\r\n                { name: numberOfManualAssessedSubmissionsLabel, value: GraphColors.BLUE },\r\n                { name: numberOfAutomaticAssistedSubmissionsLabel, value: GraphColors.YELLOW },\r\n            ];\r\n            this.assessments = [\r\n                {\r\n                    name: numberOfUnassessedSubmissionLabel,\r\n                    value: this.numberOfSubmissions.total - this.totalNumberOfAssessments.total,\r\n                },\r\n                {\r\n                    name: numberOfManualAssessedSubmissionsLabel,\r\n                    value: this.totalNumberOfAssessments.total - this.numberOfAutomaticAssistedAssessments.total,\r\n                },\r\n                {\r\n                    name: numberOfAutomaticAssistedSubmissionsLabel,\r\n                    value: this.numberOfAutomaticAssistedAssessments.total,\r\n                },\r\n            ];\r\n        }\r\n    }\r\n\r\n    setupLinks() {\r\n        this.complaintsLink = ['/course-management', this.courseId, this.exercise.type! + '-exercises', this.exercise.id!, 'complaints'];\r\n        this.moreFeedbackRequestsLink = ['/course-management', this.courseId, this.exercise.type! + '-exercises', this.exercise.id!, 'more-feedback-requests'];\r\n    }\r\n\r\n    /**\r\n     * Loads all information from the server regarding this exercise that is needed for the tutor exercise dashboard\r\n     */\r\n    loadAll() {\r\n        this.exerciseService.getForTutors(this.exerciseId).subscribe({\r\n            next: (res: HttpResponse<Exercise>) => {\r\n                this.exercise = res.body!;\r\n                this.secondCorrectionEnabled = this.exercise.secondCorrectionEnabled;\r\n                this.numberOfCorrectionRoundsEnabled = this.secondCorrectionEnabled ? 2 : 1;\r\n                this.formattedGradingInstructions = this.artemisMarkdown.safeHtmlForMarkdown(this.exercise.gradingInstructions);\r\n                this.formattedProblemStatement = this.artemisMarkdown.safeHtmlForMarkdown(this.exercise.problemStatement);\r\n\r\n                switch (this.exercise.type) {\r\n                    case ExerciseType.TEXT:\r\n                        const textExercise = this.exercise as TextExercise;\r\n                        this.formattedSampleSolution = this.artemisMarkdown.safeHtmlForMarkdown(textExercise.exampleSolution);\r\n                        break;\r\n                    case ExerciseType.MODELING:\r\n                        this.modelingExercise = this.exercise as ModelingExercise;\r\n                        if (this.modelingExercise.exampleSolutionModel) {\r\n                            this.formattedSampleSolution = this.artemisMarkdown.safeHtmlForMarkdown(this.modelingExercise.exampleSolutionExplanation);\r\n                            this.exampleSolutionModel = JSON.parse(this.modelingExercise.exampleSolutionModel);\r\n                        }\r\n                        break;\r\n                    case ExerciseType.FILE_UPLOAD:\r\n                        const fileUploadExercise = this.exercise as FileUploadExercise;\r\n                        this.formattedSampleSolution = this.artemisMarkdown.safeHtmlForMarkdown(fileUploadExercise.exampleSolution);\r\n                        break;\r\n                    case ExerciseType.PROGRAMMING:\r\n                        this.programmingExercise = this.exercise as ProgrammingExercise;\r\n                        break;\r\n                }\r\n\r\n                this.exerciseForGuidedTour = this.guidedTourService.enableTourForExercise(this.exercise, tutorAssessmentTour, false);\r\n                this.tutorParticipation = this.exercise.tutorParticipations![0];\r\n                this.tutorParticipationStatus = this.tutorParticipation.status!;\r\n                if (this.exercise.exampleSubmissions && this.exercise.exampleSubmissions.length > 0) {\r\n                    this.exampleSubmissionsToReview = this.exercise.exampleSubmissions.filter((exampleSubmission: ExampleSubmission) => !exampleSubmission.usedForTutorial);\r\n                    this.exampleSubmissionsToAssess = this.exercise.exampleSubmissions.filter((exampleSubmission: ExampleSubmission) => exampleSubmission.usedForTutorial);\r\n                }\r\n                this.exampleSubmissionsCompletedByTutor = this.tutorParticipation.trainedExampleSubmissions || [];\r\n\r\n                this.stats.toReview.total = this.exampleSubmissionsToReview.length;\r\n                this.stats.toReview.done = this.exampleSubmissionsCompletedByTutor.filter((e) => !e.usedForTutorial).length;\r\n                this.stats.toAssess.total = this.exampleSubmissionsToAssess.length;\r\n                this.stats.toAssess.done = this.exampleSubmissionsCompletedByTutor.filter((e) => e.usedForTutorial).length;\r\n\r\n                if (this.stats.toReview.done < this.stats.toReview.total) {\r\n                    this.nextExampleSubmissionId = this.exampleSubmissionsToReview[this.stats.toReview.done].id!;\r\n                } else if (this.stats.toAssess.done < this.stats.toAssess.total) {\r\n                    this.nextExampleSubmissionId = this.exampleSubmissionsToAssess[this.stats.toAssess.done].id!;\r\n                }\r\n\r\n                // exercise belongs to an exam\r\n                if (this.exercise?.exerciseGroup) {\r\n                    this.isExamMode = true;\r\n                    this.exam = this.exercise.exerciseGroup.exam;\r\n                    this.exerciseGroupId = this.exercise.exerciseGroup.id!;\r\n                    this.secondCorrectionEnabled = this.exercise.secondCorrectionEnabled;\r\n                }\r\n                this.getAllTutorAssessedSubmissionsForAllCorrectionRounds();\r\n\r\n                // The assessment for team exercises is not started from the tutor exercise dashboard but from the team pages\r\n                const isAfterDueDate = !this.exercise.dueDate || this.exercise.dueDate.isBefore(dayjs());\r\n                if ((this.exercise.allowFeedbackRequests || isAfterDueDate) && !this.exercise.teamMode && !this.isTestRun) {\r\n                    this.getSubmissionWithoutAssessmentForAllCorrectionRounds();\r\n                }\r\n\r\n                // load the guided tour step only after everything else on the page is loaded\r\n                this.guidedTourService.componentPageLoaded();\r\n\r\n                this.setupLinks();\r\n            },\r\n            error: (response: string) => this.onError(response),\r\n        });\r\n\r\n        if (!this.isTestRun) {\r\n            this.submissionService.getSubmissionsWithComplaintsForTutor(this.exerciseId).subscribe({\r\n                next: (res: HttpResponse<SubmissionWithComplaintDTO[]>) => {\r\n                    this.submissionsWithComplaints = res.body || [];\r\n                    this.sortComplaintRows();\r\n                },\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n\r\n            this.submissionService.getSubmissionsWithMoreFeedbackRequestsForTutor(this.exerciseId).subscribe({\r\n                next: (res: HttpResponse<SubmissionWithComplaintDTO[]>) => {\r\n                    this.submissionsWithMoreFeedbackRequests = res.body || [];\r\n                    this.sortMoreFeedbackRows();\r\n                },\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n\r\n            this.exerciseService.getStatsForTutors(this.exerciseId).subscribe({\r\n                next: (res: HttpResponse<StatsForDashboard>) => {\r\n                    this.statsForDashboard = StatsForDashboard.from(res.body!);\r\n                    this.numberOfSubmissions = this.statsForDashboard.numberOfSubmissions;\r\n                    this.totalNumberOfAssessments = this.statsForDashboard.totalNumberOfAssessments;\r\n                    this.numberOfAssessmentsOfCorrectionRounds = this.statsForDashboard.numberOfAssessmentsOfCorrectionRounds;\r\n                    this.numberOfAutomaticAssistedAssessments = this.statsForDashboard.numberOfAutomaticAssistedAssessments;\r\n                    this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = this.statsForDashboard.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;\r\n\r\n                    const tutorLeaderboardEntry = this.statsForDashboard.tutorLeaderboardEntries?.find((entry) => entry.userId === this.tutor!.id);\r\n                    this.sortService.sortByProperty(this.statsForDashboard.tutorLeaderboardEntries, 'points', false);\r\n\r\n                    // Prepare the table data for the side table\r\n                    if (tutorLeaderboardEntry) {\r\n                        this.numberOfTutorAssessments = tutorLeaderboardEntry.numberOfAssessments;\r\n                        this.complaintsDashboardInfo = new AssessmentDashboardInformationEntry(\r\n                            this.statsForDashboard.numberOfComplaints,\r\n                            tutorLeaderboardEntry.numberOfTutorComplaints,\r\n                            this.statsForDashboard.numberOfComplaints - this.statsForDashboard.numberOfOpenComplaints,\r\n                        );\r\n                        this.moreFeedbackRequestsDashboardInfo = new AssessmentDashboardInformationEntry(\r\n                            this.statsForDashboard.numberOfMoreFeedbackRequests,\r\n                            tutorLeaderboardEntry.numberOfTutorMoreFeedbackRequests,\r\n                            this.statsForDashboard.numberOfMoreFeedbackRequests - this.statsForDashboard.numberOfOpenMoreFeedbackRequests,\r\n                        );\r\n                        this.ratingsDashboardInfo = new AssessmentDashboardInformationEntry(this.statsForDashboard.numberOfRatings, tutorLeaderboardEntry.numberOfTutorRatings);\r\n                    } else {\r\n                        this.numberOfTutorAssessments = 0;\r\n                        this.complaintsDashboardInfo = new AssessmentDashboardInformationEntry(\r\n                            this.statsForDashboard.numberOfComplaints,\r\n                            0,\r\n                            this.statsForDashboard.numberOfComplaints - this.statsForDashboard.numberOfOpenComplaints,\r\n                        );\r\n                        this.moreFeedbackRequestsDashboardInfo = new AssessmentDashboardInformationEntry(\r\n                            this.statsForDashboard.numberOfMoreFeedbackRequests,\r\n                            0,\r\n                            this.statsForDashboard.numberOfMoreFeedbackRequests - this.statsForDashboard.numberOfOpenMoreFeedbackRequests,\r\n                        );\r\n                        this.ratingsDashboardInfo = new AssessmentDashboardInformationEntry(this.statsForDashboard.numberOfRatings, 0);\r\n                    }\r\n\r\n                    if (this.numberOfSubmissions.total > 0) {\r\n                        this.tutorAssessmentPercentage = Math.floor((this.numberOfTutorAssessments / this.numberOfSubmissions.total) * 100);\r\n                    } else {\r\n                        this.tutorAssessmentPercentage = 100;\r\n                    }\r\n                    this.complaintsEnabled = this.statsForDashboard.complaintsEnabled;\r\n                    this.feedbackRequestEnabled = this.statsForDashboard.feedbackRequestEnabled;\r\n                    this.calculateAssessmentProgressInformation();\r\n\r\n                    this.setupGraph();\r\n                },\r\n                error: (response: string) => this.onError(response),\r\n            });\r\n        } else {\r\n            this.complaintService.getComplaintsForTestRun(this.exerciseId).subscribe({\r\n                next: (res: HttpResponse<Complaint[]>) => (this.complaints = res.body as Complaint[]),\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n        }\r\n    }\r\n\r\n    get yourStatusTitle(): string {\r\n        switch (this.tutorParticipationStatus) {\r\n            case TutorParticipationStatus.TRAINED:\r\n                // If we are in 'TRAINED' state, but never really \"trained\" on example submissions, display the\r\n                // 'REVIEWED_INSTRUCTIONS' state text instead.\r\n                if (!this.exercise.exampleSubmissions || this.exercise.exampleSubmissions.length === 0) {\r\n                    return TutorParticipationStatus.REVIEWED_INSTRUCTIONS.toString();\r\n                }\r\n\r\n                return TutorParticipationStatus.TRAINED.toString();\r\n            default:\r\n                return this.tutorParticipationStatus.toString();\r\n        }\r\n    }\r\n\r\n    language(submission: Submission): string {\r\n        if (submission.submissionExerciseType === SubmissionExerciseType.TEXT) {\r\n            return (submission as TextSubmission).language || 'UNKNOWN';\r\n        }\r\n        return 'UNKNOWN';\r\n    }\r\n\r\n    /**\r\n     * get all submissions for all correction rounds which the tutor has assessed.\r\n     * If not in examMode, correction rounds defaults to 0, as more than 1 is currently not supported.\r\n     */\r\n    private getAllTutorAssessedSubmissionsForAllCorrectionRounds(): void {\r\n        if (this.isExamMode) {\r\n            for (let i = 0; i < this.exam!.numberOfCorrectionRoundsInExam!; i++) {\r\n                this.getAllTutorAssessedSubmissionsForCorrectionRound(i);\r\n            }\r\n        } else {\r\n            this.getAllTutorAssessedSubmissionsForCorrectionRound(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the submissions from the server for which the current user is the assessor for the specified correction round,\r\n     * which is the case for started or completed assessments. All these submissions get listed\r\n     * in the exercise dashboard.\r\n     */\r\n    private getAllTutorAssessedSubmissionsForCorrectionRound(correctionRound: number): void {\r\n        let submissionsObservable: Observable<HttpResponse<Submission[]>> = of();\r\n        if (this.isTestRun) {\r\n            submissionsObservable = this.submissionService.getTestRunSubmissionsForExercise(this.exerciseId);\r\n        } else {\r\n            // TODO: This could be one generic endpoint.\r\n            switch (this.exercise.type) {\r\n                case ExerciseType.TEXT:\r\n                    submissionsObservable = this.textSubmissionService.getSubmissions(this.exerciseId, { assessedByTutor: true }, correctionRound);\r\n                    break;\r\n                case ExerciseType.MODELING:\r\n                    submissionsObservable = this.modelingSubmissionService.getSubmissions(this.exerciseId, { assessedByTutor: true }, correctionRound);\r\n                    break;\r\n                case ExerciseType.FILE_UPLOAD:\r\n                    submissionsObservable = this.fileUploadSubmissionService.getSubmissions(this.exerciseId, { assessedByTutor: true }, correctionRound);\r\n                    break;\r\n                case ExerciseType.PROGRAMMING:\r\n                    submissionsObservable = this.programmingSubmissionService.getSubmissions(this.exerciseId, { assessedByTutor: true }, correctionRound);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        submissionsObservable\r\n            .pipe(\r\n                map((res) => res.body),\r\n                map(this.reconnectEntities),\r\n            )\r\n            .subscribe((submissions: Submission[]) => {\r\n                // Set the received submissions. As the result component depends on the submission we nest it into the participation.\r\n                const sub = submissions\r\n                    .filter((submission) => {\r\n                        return submission?.results && submission.results.length > correctionRound && submission.results[correctionRound];\r\n                    })\r\n                    .map((submission) => {\r\n                        submission.participation!.submissions = [submission];\r\n                        submission.participation!.results = submission.results;\r\n                        setLatestSubmissionResult(submission, getLatestSubmissionResult(submission));\r\n                        return submission;\r\n                    });\r\n\r\n                this.assessedSubmissionsByRound.set(correctionRound, sub);\r\n                this.sortSubmissionRows(correctionRound);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Reconnect submission, result and participation for all submissions in the given array.\r\n     */\r\n    private reconnectEntities = (submissions: Submission[]) => {\r\n        return submissions.map((submission: Submission) => {\r\n            const latestResult = getLatestSubmissionResult(submission);\r\n            if (latestResult) {\r\n                // reconnect some associations\r\n                latestResult!.submission = submission;\r\n                latestResult!.participation = submission.participation;\r\n                submission.participation!.results = [latestResult!];\r\n                setLatestSubmissionResult(submission, latestResult);\r\n            }\r\n            return submission;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get all submissions that don't have an assessment for all correction rounds\r\n     * If not in examMode correction rounds defaults to 0.\r\n     */\r\n    private getSubmissionWithoutAssessmentForAllCorrectionRounds(): void {\r\n        if (this.isExamMode) {\r\n            for (let i = 0; i < this.exam!.numberOfCorrectionRoundsInExam!; i++) {\r\n                if (i <= this.numberOfCorrectionRoundsEnabled) {\r\n                    this.getSubmissionWithoutAssessmentForCorrectionRound(i);\r\n                }\r\n            }\r\n        } else {\r\n            this.getSubmissionWithoutAssessmentForCorrectionRound(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a submission from the server that does not have an assessment for the given correction round yet (if there is one).\r\n     * The submission gets added to the end of the list of submissions in the exercise\r\n     * dashboard and the user can start the assessment. Note, that the number of started but unfinished assessments is limited per user and course.\r\n     * If the user reached this limit,\r\n     * the server will respond with a BAD REQUEST response here.\r\n     */\r\n    private getSubmissionWithoutAssessmentForCorrectionRound(correctionRound: number): void {\r\n        let submissionObservable: Observable<Submission | undefined> = of();\r\n        switch (this.exercise.type) {\r\n            case ExerciseType.TEXT:\r\n                submissionObservable = this.textSubmissionService.getSubmissionWithoutAssessment(this.exerciseId, 'head', correctionRound);\r\n                break;\r\n            case ExerciseType.MODELING:\r\n                submissionObservable = this.modelingSubmissionService.getSubmissionWithoutAssessment(this.exerciseId, undefined, correctionRound);\r\n                break;\r\n            case ExerciseType.FILE_UPLOAD:\r\n                submissionObservable = this.fileUploadSubmissionService.getSubmissionWithoutAssessment(this.exerciseId, undefined, correctionRound);\r\n                break;\r\n            case ExerciseType.PROGRAMMING:\r\n                submissionObservable = this.programmingSubmissionService.getSubmissionWithoutAssessment(this.exerciseId, undefined, correctionRound);\r\n                break;\r\n        }\r\n\r\n        submissionObservable.subscribe({\r\n            next: (submission?: Submission) => {\r\n                if (!submission) {\r\n                    // there are no unassessed submissions\r\n                    // Delete this correction round, as we are done with all\r\n                    if (this.unassessedSubmissionByRound) {\r\n                        this.unassessedSubmissionByRound.delete(correctionRound);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                setLatestSubmissionResult(submission, getLatestSubmissionResult(submission));\r\n                this.unassessedSubmissionByRound!.set(correctionRound, submission);\r\n\r\n                this.submissionLockLimitReached = false;\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                if (error.error?.errorKey === 'lockedSubmissionsLimitReached') {\r\n                    this.submissionLockLimitReached = true;\r\n                } else {\r\n                    this.onError(error.error?.detail || error.message);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Whether to show graded submissions and actions regarding them\r\n     * @param correctionRound Round to check for unassessed submissions\r\n     */\r\n    showSubmissionsForRound(correctionRound: number): boolean {\r\n        const unassessedSubmissionExist = !!this.unassessedSubmissionByRound?.get(correctionRound)?.id;\r\n        const assessedSubmissionsExist = !!this.assessedSubmissionsByRound.get(correctionRound)?.length;\r\n\r\n        return (unassessedSubmissionExist || assessedSubmissionsExist) && !this.exercise.allowComplaintsForAutomaticAssessments;\r\n    }\r\n\r\n    /**\r\n     * Called after the tutor has read the instructions and creates a new tutor participation\r\n     */\r\n    readInstruction() {\r\n        this.isLoading = true;\r\n        this.tutorParticipationService\r\n            .create(this.tutorParticipation, this.exerciseId)\r\n            .pipe(finalize(() => (this.isLoading = false)))\r\n            .subscribe({\r\n                next: (res: HttpResponse<TutorParticipation>) => {\r\n                    this.tutorParticipation = res.body!;\r\n                    this.tutorParticipationStatus = this.tutorParticipation.status!;\r\n                    this.alertService.success('artemisApp.exerciseAssessmentDashboard.participation.instructionsReviewed');\r\n                },\r\n                error: this.onError,\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns whether the example submission for the given id has already been completed\r\n     * @param exampleSubmissionId Id of the example submission which to check for completion\r\n     */\r\n    hasBeenCompletedByTutor(exampleSubmissionId: number) {\r\n        return this.exampleSubmissionsCompletedByTutor.filter((exampleSubmission) => exampleSubmission.id === exampleSubmissionId).length > 0;\r\n    }\r\n\r\n    private onError(error: string) {\r\n        this.alertService.error(error);\r\n    }\r\n\r\n    /**\r\n     * Calculates the status of a submission by inspecting the result. Returns true if the submission is a draft, or false if it is done\r\n     * @param submission which to check\r\n     * @param correctionRound for which to get status\r\n     */\r\n    calculateSubmissionStatusIsDraft(submission: Submission, correctionRound = 0): boolean {\r\n        const tmpResult = submission.results?.[correctionRound];\r\n        return !(tmpResult?.completionDate && isManualResult(tmpResult));\r\n    }\r\n\r\n    /**\r\n     * Uses the router to navigate to a given example submission\r\n     * @param submissionId Id of submission where to navigate to\r\n     * @param readOnly Flag whether the view should be opened in read-only mode\r\n     * @param toComplete Flag whether the view should be opened in to-complete mode\r\n     */\r\n    openExampleSubmission(submissionId: number, readOnly?: boolean, toComplete?: boolean) {\r\n        if (!this.exercise?.type || !submissionId) {\r\n            return;\r\n        }\r\n        const route = `/course-management/${this.courseId}/${this.exercise.type}-exercises/${this.exercise.id}/example-submissions/${submissionId}`;\r\n        // TODO CZ: add both flags and check for value in example submission components\r\n        const queryParams: ExampleSubmissionQueryParams = {};\r\n        if (readOnly) {\r\n            queryParams.readOnly = readOnly;\r\n        }\r\n        if (toComplete) {\r\n            queryParams.toComplete = toComplete;\r\n        }\r\n\r\n        this.router.navigate([route], { queryParams });\r\n    }\r\n\r\n    isComplaintLocked(complaint: Complaint) {\r\n        return this.complaintService.isComplaintLockedForLoggedInUser(complaint, this.exercise);\r\n    }\r\n\r\n    /**\r\n     * Generates and returns the link to the assessment editor without query parameters\r\n     * @param submission Either submission or 'new'.\r\n     */\r\n    getAssessmentLink(submission: Submission | 'new'): string[] {\r\n        const submissionUrlParameter: number | 'new' = submission === 'new' ? 'new' : submission.id!;\r\n        let participationId = undefined;\r\n        if (submission !== 'new' && submission.participation) {\r\n            participationId = submission.participation.id;\r\n        }\r\n        return getLinkToSubmissionAssessment(this.exercise.type!, this.courseId, this.exerciseId, participationId, submissionUrlParameter, this.examId, this.exerciseGroupId);\r\n    }\r\n\r\n    /**\r\n     * Generates and returns the query parameters required for opening the assessment editor\r\n     * @param correctionRound\r\n     */\r\n    getAssessmentQueryParams(correctionRound = 0): object {\r\n        if (this.isTestRun) {\r\n            return {\r\n                testRun: this.isTestRun,\r\n                'correction-round': correctionRound,\r\n            };\r\n        } else {\r\n            return { 'correction-round': correctionRound };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates and returns the query parameters required for opening a complaint\r\n     * @param complaint\r\n     */\r\n    getComplaintQueryParams(complaint: Complaint) {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n        const submission: Submission = complaint.result?.submission!;\r\n        // numberOfAssessmentsOfCorrectionRounds size is the number of correction rounds\r\n        if (complaint.complaintType === ComplaintType.MORE_FEEDBACK) {\r\n            return this.getAssessmentQueryParams(this.numberOfAssessmentsOfCorrectionRounds.length - 1);\r\n        }\r\n        const result = this.getSubmissionToViewFromComplaintSubmission(submission);\r\n\r\n        if (result !== undefined) {\r\n            return this.getAssessmentQueryParams(result.results!.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns either the corresponding submission to view or undefined.\r\n     * This complaint has to be a true complaint or else issues can arise.\r\n     * @param submission\r\n     */\r\n    getSubmissionToViewFromComplaintSubmission(submission: Submission): Submission | undefined {\r\n        const submissionToView = this.submissionsWithComplaints.find((dto) => dto.submission.id === submission.id)?.submission;\r\n        if (submissionToView) {\r\n            if (submissionToView.results) {\r\n                submissionToView.results = submissionToView.results.filter((result) => result.assessmentType !== AssessmentType.AUTOMATIC);\r\n            } else {\r\n                submissionToView.results = [];\r\n            }\r\n            return submissionToView;\r\n        }\r\n    }\r\n\r\n    toggleSecondCorrection() {\r\n        this.togglingSecondCorrectionButton = true;\r\n        this.exerciseService.toggleSecondCorrection(this.exerciseId).subscribe((res: boolean) => {\r\n            this.secondCorrectionEnabled = res as boolean;\r\n            this.numberOfCorrectionRoundsEnabled = this.secondCorrectionEnabled ? 2 : 1;\r\n            this.getSubmissionWithoutAssessmentForAllCorrectionRounds();\r\n            this.togglingSecondCorrectionButton = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * To correctly display why a tutor cannot assess any further submissions we need to calculate those values.\r\n     */\r\n    calculateAssessmentProgressInformation() {\r\n        if (this.exam) {\r\n            for (let i = 0; i < (this.exam.numberOfCorrectionRoundsInExam ?? 0); i++) {\r\n                this.lockedSubmissionsByOtherTutor[i] = this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound[i]?.inTime;\r\n\r\n                // number of submissions in the particular round that still need assessment and are not locked\r\n                this.notYetAssessed[i] = this.numberOfSubmissions.inTime - this.numberOfAssessmentsOfCorrectionRounds[i].inTime - this.lockedSubmissionsByOtherTutor[i];\r\n\r\n                // The number of assessments which are still open but cannot be assessed as they were already assessed in the first round.\r\n                // Since if this will be displayed the number of assessments the tutor can create is 0 we can simply get this number by subtracting the\r\n                // lock-count from the remaining unassessed submissions of the current correction round.\r\n                this.firstRoundAssessments = this.notYetAssessed[i] - this.lockedSubmissionsByOtherTutor[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    sortSubmissionRows(correctionRound: number) {\r\n        this.sortService.sortByProperty(\r\n            this.assessedSubmissionsByRound.get(correctionRound)!,\r\n            this.sortPredicates[0].replace('correctionRound', correctionRound + ''),\r\n            this.reverseOrders[0],\r\n        );\r\n    }\r\n\r\n    sortComplaintRows() {\r\n        // If the selected sort predicate is indifferent about two elements, the one submitted earlier should be displayed on top\r\n        this.sortService.sortByProperty(this.submissionsWithComplaints, 'complaint.submittedTime', true);\r\n        if (this.sortPredicates[1] === 'responseTime') {\r\n            this.sortService.sortByFunction(this.submissionsWithComplaints, (element) => this.complaintService.getResponseTimeInSeconds(element.complaint), this.reverseOrders[1]);\r\n        } else {\r\n            this.sortService.sortByProperty(this.submissionsWithComplaints, this.sortPredicates[1], this.reverseOrders[1]);\r\n        }\r\n    }\r\n\r\n    sortMoreFeedbackRows() {\r\n        // If the selected sort predicate is indifferent about two elements, the one submitted earlier should be displayed on top\r\n        this.sortService.sortByProperty(this.submissionsWithMoreFeedbackRequests, 'complaint.submittedTime', true);\r\n        if (this.sortPredicates[2] === 'responseTime') {\r\n            this.sortService.sortByFunction(\r\n                this.submissionsWithMoreFeedbackRequests,\r\n                (element) => this.complaintService.getResponseTimeInSeconds(element.complaint),\r\n                this.reverseOrders[2],\r\n            );\r\n        } else {\r\n            this.sortService.sortByProperty(this.submissionsWithMoreFeedbackRequests, this.sortPredicates[2], this.reverseOrders[2]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a link to the respective exercise details page\r\n     */\r\n    getExerciseDetailsLink() {\r\n        return ['/course-management', this.courseId, this.exercise.type! + '-exercises', this.exercise.id!];\r\n    }\r\n}\r\n", "@if (exercise) {\r\n    <jhi-header-exercise-page-with-details [exercise]=\"exercise\" [exam]=\"exam\" [isTestRun]=\"isTestRun\">\r\n        <ng-container pagetitle>\r\n            @if (!isTestRun) {\r\n                <span>{{ 'artemisApp.exerciseAssessmentDashboard.pageHeader' | artemisTranslate }} {{ exercise?.title }}</span>\r\n            } @else {\r\n                <span>{{ 'artemisApp.exerciseAssessmentDashboard.testRunPageHeader' | artemisTranslate }} {{ exercise?.title }}</span>\r\n            }\r\n        </ng-container>\r\n    </jhi-header-exercise-page-with-details>\r\n}\r\n\r\n@if (exercise) {\r\n    <div>\r\n        @if (!isTestRun) {\r\n            <div class=\"row my-3 d-flex justify-content-between\">\r\n                <div class=\"col-12 col-md-7 col-xl-4\">\r\n                    <p class=\"h3\">\r\n                        {{ 'artemisApp.exerciseAssessmentDashboard.yourStatus' | artemisTranslate }}:\r\n                        {{ 'artemisApp.exerciseAssessmentDashboard.tutorParticipationStatus.title.' + yourStatusTitle | artemisTranslate }}\r\n                    </p>\r\n                    <jhi-tutor-participation-graph\r\n                        class=\"d-block\"\r\n                        [exercise]=\"exercise\"\r\n                        [tutorParticipation]=\"tutorParticipation\"\r\n                        [numberOfSubmissions]=\"numberOfSubmissions\"\r\n                        [totalNumberOfAssessments]=\"totalNumberOfAssessments\"\r\n                        [numberOfComplaints]=\"complaintsDashboardInfo.total\"\r\n                        [numberOfOpenComplaints]=\"complaintsDashboardInfo.total - complaintsDashboardInfo.done!\"\r\n                        [numberOfMoreFeedbackRequests]=\"moreFeedbackRequestsDashboardInfo.total\"\r\n                        [numberOfOpenMoreFeedbackRequests]=\"moreFeedbackRequestsDashboardInfo.total - moreFeedbackRequestsDashboardInfo.done!\"\r\n                        [numberOfAssessmentsOfCorrectionRounds]=\"numberOfAssessmentsOfCorrectionRounds\"\r\n                    />\r\n                    <p>\r\n                        {{ 'artemisApp.exerciseAssessmentDashboard.tutorParticipationStatus.description.' + tutorParticipation.status!.toString() | artemisTranslate }}\r\n                    </p>\r\n\r\n                    @if (exercise.isAtLeastInstructor && exam?.numberOfCorrectionRoundsInExam && exam?.numberOfCorrectionRoundsInExam! > 1 && isExamMode && !isTestRun) {\r\n                        <div class=\"d-inline-block\">\r\n                            <jhi-second-correction-enable-button\r\n                                data-testid=\"toggle-second-correction\"\r\n                                (ngModelChange)=\"toggleSecondCorrection()\"\r\n                                [secondCorrectionEnabled]=\"secondCorrectionEnabled\"\r\n                                [togglingSecondCorrectionButton]=\"togglingSecondCorrectionButton\"\r\n                            />\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                @if (numberOfSubmissions.total > 0) {\r\n                    <div class=\"col-12 col-md-5 col-xl-4 d-flex justify-content-center justify-content-lg-end chart-col\">\r\n                        <ngx-charts-pie-chart\r\n                            class=\"chart overflow-hidden\"\r\n                            [customColors]=\"customColors\"\r\n                            [view]=\"view\"\r\n                            [results]=\"assessments\"\r\n                            [legend]=\"true\"\r\n                            [legendTitle]=\"''\"\r\n                            [legendPosition]=\"legendPosition\"\r\n                            [animations]=\"false\"\r\n                            [trimLabels]=\"false\"\r\n                        >\r\n                            <ng-template #tooltipTemplate let-model=\"model\"> {{ ((model.value * 100) / this.numberOfSubmissions.total).toFixed(2) }}% </ng-template>\r\n                        </ngx-charts-pie-chart>\r\n                    </div>\r\n                }\r\n\r\n                <div class=\"col-12 col-lg-7 col-xl-4 table-col\">\r\n                    <jhi-side-panel\r\n                        [panelHeader]=\"'artemisApp.exerciseAssessmentDashboard.exerciseInformation' | artemisTranslate\"\r\n                        [panelDescriptionHeader]=\"'artemisApp.exerciseAssessmentDashboard.totalYours' | artemisTranslate\"\r\n                    >\r\n                        <div class=\"row g-0 mb-1\">\r\n                            <div class=\"col-7\" jhiTranslate=\"artemisApp.assessmentDashboard.submissions\"></div>\r\n                            <div class=\"col-5\">\r\n                                <span class=\"text-success\">{{ numberOfSubmissions.inTime }}</span>\r\n                                @if (numberOfSubmissions.late > 0) {\r\n                                    <span> - </span>\r\n                                }\r\n                                @if (numberOfSubmissions.late > 0) {\r\n                                    <span class=\"text-danger\">{{ numberOfSubmissions.late }}</span>\r\n                                }\r\n                                |\r\n                                {{ numberOfTutorAssessments }} ({{ tutorAssessmentPercentage }}%)\r\n                            </div>\r\n                        </div>\r\n\r\n                        @if (complaintsEnabled) {\r\n                            <div class=\"row g-0 mb-1\">\r\n                                <div class=\"col-7\" jhiTranslate=\"artemisApp.assessmentDashboard.complaints\"></div>\r\n                                <div class=\"col-5\">\r\n                                    @if (exercise.isAtLeastInstructor) {\r\n                                        <div>\r\n                                            <a [routerLink]=\"complaintsLink\">\r\n                                                {{ complaintsDashboardInfo.done }} / {{ complaintsDashboardInfo.total }} ({{ complaintsDashboardInfo.doneToTotalPercentage }})\r\n                                            </a>\r\n                                            |\r\n                                            <a [routerLink]=\"complaintsLink\" [queryParams]=\"{ tutorId: tutor?.id }\">\r\n                                                {{ complaintsDashboardInfo.tutor }}\r\n                                            </a>\r\n                                        </div>\r\n                                    }\r\n                                    @if (!exercise.isAtLeastInstructor) {\r\n                                        <div>\r\n                                            {{ complaintsDashboardInfo.done }} / {{ complaintsDashboardInfo.total }} ({{ complaintsDashboardInfo.doneToTotalPercentage }}) |\r\n                                            <a [routerLink]=\"complaintsLink\" [queryParams]=\"{ tutorId: tutor?.id }\">\r\n                                                {{ complaintsDashboardInfo.tutor }}\r\n                                            </a>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n                        @if (feedbackRequestEnabled) {\r\n                            <div class=\"row g-0 mb-1\">\r\n                                <div class=\"col-7\" jhiTranslate=\"artemisApp.assessmentDashboard.moreFeedbackRequests\"></div>\r\n                                <div class=\"col-5\">\r\n                                    @if (exercise.isAtLeastInstructor) {\r\n                                        <div>\r\n                                            <a [routerLink]=\"moreFeedbackRequestsLink\">\r\n                                                {{ moreFeedbackRequestsDashboardInfo.done }} / {{ moreFeedbackRequestsDashboardInfo.total }} ({{\r\n                                                    moreFeedbackRequestsDashboardInfo.doneToTotalPercentage\r\n                                                }})\r\n                                            </a>\r\n                                            |\r\n                                            <a [routerLink]=\"moreFeedbackRequestsLink\" [queryParams]=\"{ tutorId: tutor?.id }\">\r\n                                                {{ moreFeedbackRequestsDashboardInfo.tutor }}\r\n                                            </a>\r\n                                        </div>\r\n                                    }\r\n                                    @if (!exercise.isAtLeastInstructor) {\r\n                                        <div>\r\n                                            {{ moreFeedbackRequestsDashboardInfo.done }} / {{ moreFeedbackRequestsDashboardInfo.total }} ({{\r\n                                                moreFeedbackRequestsDashboardInfo.doneToTotalPercentage\r\n                                            }}) |\r\n                                            <a [routerLink]=\"moreFeedbackRequestsLink\" [queryParams]=\"{ tutorId: tutor?.id }\">\r\n                                                {{ moreFeedbackRequestsDashboardInfo.tutor }}\r\n                                            </a>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n                        <div class=\"row g-0 mb-1\">\r\n                            <div class=\"col-7\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.ratings\"></div>\r\n                            <div class=\"col-5\">{{ ratingsDashboardInfo.total }} | {{ ratingsDashboardInfo.tutor }}</div>\r\n                        </div>\r\n                        <div class=\"row g-0 mb-1\">\r\n                            <a [routerLink]=\"getExerciseDetailsLink()\" [queryParams]=\"\" class=\"btn btn-info btn-sm me-1 mb-3\" id=\"exercise-details\">\r\n                                <fa-icon [icon]=\"faListAlt\" [fixedWidth]=\"true\" />\r\n                                <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.exerciseDetails\"></span>\r\n                            </a>\r\n                        </div>\r\n                    </jhi-side-panel>\r\n\r\n                    <div class=\"me-2 d-block float-end\">\r\n                        <div>\r\n                            <div class=\"square bg-success d-inline-block\"></div>\r\n                            <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.stats.intime\"></span>\r\n                        </div>\r\n                        @if (numberOfSubmissions.late > 0) {\r\n                            <div>\r\n                                <div class=\"square bg-danger d-inline-block\"></div>\r\n                                <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.stats.late\"></span>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n\r\n        @if (tutorParticipationStatus === NOT_PARTICIPATED && !isTestRun) {\r\n            <div class=\"guided-tour-markdown-preview markdown-preview\">\r\n                @if (exercise.problemStatement && exercise.problemStatement.length > 0) {\r\n                    <jhi-info-panel [panelHeader]=\"'artemisApp.exerciseAssessmentDashboard.problemStatement' | artemisTranslate\">\r\n                        @if (exercise.type !== ExerciseType.PROGRAMMING) {\r\n                            <div [innerHTML]=\"formattedProblemStatement\" class=\"no-bottom-space\"></div>\r\n                        } @else {\r\n                            <!-- Programming exercises have a couple of custom render modules, so we load the instructions component here.-->\r\n                            <jhi-programming-exercise-instructions\r\n                                [exercise]=\"programmingExercise\"\r\n                                [participation]=\"programmingExercise.templateParticipation!\"\r\n                                [personalParticipation]=\"false\"\r\n                            />\r\n                        }\r\n                    </jhi-info-panel>\r\n                }\r\n\r\n                @if ((exercise.type === ExerciseType.TEXT || exercise.type === ExerciseType.FILE_UPLOAD) && formattedSampleSolution) {\r\n                    <jhi-info-panel [panelHeader]=\"'artemisApp.exerciseAssessmentDashboard.exampleSolution' | artemisTranslate\">\r\n                        <div [innerHTML]=\"formattedSampleSolution\" class=\"no-bottom-space\"></div>\r\n                    </jhi-info-panel>\r\n                }\r\n\r\n                @if (exercise.type === ExerciseType.MODELING && exampleSolutionModel) {\r\n                    <jhi-info-panel [panelHeader]=\"'artemisApp.exerciseAssessmentDashboard.exampleSolution' | artemisTranslate\">\r\n                        <div>\r\n                            <jhi-modeling-editor [umlModel]=\"exampleSolutionModel\" [diagramType]=\"modelingExercise.diagramType\" [readOnly]=\"true\" />\r\n                        </div>\r\n                    </jhi-info-panel>\r\n                }\r\n\r\n                @if (exercise.type === ExerciseType.MODELING && modelingExercise.exampleSolutionExplanation) {\r\n                    <jhi-info-panel [panelHeader]=\"'artemisApp.exerciseAssessmentDashboard.exampleSolutionExplanation' | artemisTranslate\">\r\n                        <div [innerHTML]=\"formattedSampleSolution\" class=\"no-bottom-space\"></div>\r\n                    </jhi-info-panel>\r\n                }\r\n\r\n                @if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                    <div class=\"col-12\">\r\n                        <h4 jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.exampleSolution\"></h4>\r\n                        @if (!localVCEnabled) {\r\n                            <a jhiSecureLink [href]=\"programmingExercise.solutionParticipation?.repositoryUri || ''\">\r\n                                <jhi-button jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.programmingExercise.exampleSolution\" />\r\n                            </a>\r\n                        } @else {\r\n                            <jhi-code-button\r\n                                [smallButtons]=\"true\"\r\n                                [repositoryUri]=\"programmingExercise.solutionParticipation?.repositoryUri || ''\"\r\n                                [routerLinkForRepositoryView]=\"['/course-management', courseId, 'programming-exercises', exerciseId, 'repository', 'SOLUTION']\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n                @if (exercise.gradingInstructions && exercise.gradingInstructions.length > 0) {\r\n                    <jhi-info-panel [panelHeader]=\"'artemisApp.exerciseAssessmentDashboard.gradingInstructions' | artemisTranslate\">\r\n                        <div [innerHTML]=\"formattedGradingInstructions\" class=\"no-bottom-space\"></div>\r\n                    </jhi-info-panel>\r\n                }\r\n\r\n                @if (exercise.gradingCriteria && exercise.gradingCriteria.length > 0) {\r\n                    <div class=\"col-md-6 mt-4\">\r\n                        <h4 jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.structuredGradingInstructions\"></h4>\r\n                        <jhi-structured-grading-instructions-assessment-layout [readonly]=\"true\" [criteria]=\"exercise.gradingCriteria || []\" />\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n\r\n        @if (tutorParticipationStatus === NOT_PARTICIPATED && !isTestRun) {\r\n            <div class=\"col-12 text-center mt-2 mb-4\">\r\n                <p jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.pleaseContactIfUnclear\"></p>\r\n\r\n                <button id=\"participate-in-assessment\" class=\"btn btn-primary guided-tour-instructions-button p-1\" (click)=\"readInstruction()\" [disabled]=\"isLoading\">\r\n                    @if (exercise.gradingInstructions && exercise.gradingInstructions.length > 0) {\r\n                        <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.readAndUnderstood\"></span>\r\n                    }\r\n\r\n                    @if (!exercise.gradingInstructions || exercise.gradingInstructions.length === 0) {\r\n                        <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.startYourParticipation\"></span>\r\n                    }\r\n                </button>\r\n            </div>\r\n        }\r\n\r\n        @if (tutorParticipationStatus !== NOT_PARTICIPATED || isTestRun) {\r\n            <div class=\"d-flex\">\r\n                <!-- TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n                <!--                <div *jhiExtensionPoint=\"overrideAssessmentTable\" class=\"guided-tour-exercise-dashboard-table flex-grow-1\">-->\r\n                <div class=\"guided-tour-exercise-dashboard-table flex-grow-1\">\r\n                    @if (tutorParticipationStatus === REVIEWED_INSTRUCTIONS && !isTestRun) {\r\n                        <div class=\"alert alert-warning row\" role=\"alert\">\r\n                            <span\r\n                                jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.totalExampleSubmissions\"\r\n                                [translateValues]=\"{\r\n                                    total: stats.toReview.total + stats.toAssess.total,\r\n                                    toRead: stats.toReview.total,\r\n                                    toAssess: stats.toAssess.total,\r\n                                }\"\r\n                            ></span>\r\n                        </div>\r\n                    }\r\n\r\n                    @if (tutorParticipationStatus !== NOT_PARTICIPATED && !isTestRun) {\r\n                        <div class=\"row\">\r\n                            @if (stats.toReview.total > 0) {\r\n                                <div class=\"col-6\">\r\n                                    <p class=\"h3\">\r\n                                        {{ 'artemisApp.exerciseAssessmentDashboard.readSubmissions' | artemisTranslate }} ({{ stats.toReview.done }} / {{ stats.toReview.total }})\r\n                                    </p>\r\n\r\n                                    @if (stats.toReview.done < stats.toReview.total) {\r\n                                        <button\r\n                                            class=\"btn btn-primary review-example-submission mb-4\"\r\n                                            [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                            (click)=\"openExampleSubmission(nextExampleSubmissionId, true, false)\"\r\n                                        >\r\n                                            @if (stats.toReview.done <= 0) {\r\n                                                <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.start\"></span>\r\n                                            } @else {\r\n                                                {{ 'artemisApp.exerciseAssessmentDashboard.continue' | artemisTranslate }}\r\n                                            }\r\n\r\n                                            {{ 'artemisApp.exerciseAssessmentDashboard.readingExampleSubmissions' | artemisTranslate }}\r\n                                        </button>\r\n                                    }\r\n\r\n                                    @if (stats.toReview.done >= stats.toReview.total) {\r\n                                        <ul>\r\n                                            @for (exampleSubmission of exampleSubmissionsToReview; track exampleSubmission; let i = $index) {\r\n                                                <li>\r\n                                                    <button\r\n                                                        class=\"btn btn-link review-example-submission\"\r\n                                                        [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                                        (click)=\"openExampleSubmission(exampleSubmission.id!, true, false)\"\r\n                                                    >\r\n                                                        {{ 'artemisApp.exerciseAssessmentDashboard.readExampleSubmission' | artemisTranslate }} {{ i + 1 }}\r\n                                                    </button>\r\n                                                    @if (hasBeenCompletedByTutor(exampleSubmission.id!)) {\r\n                                                        <fa-icon class=\"text-success\" [icon]=\"faCheckCircle\" />\r\n                                                    }\r\n                                                </li>\r\n                                            }\r\n                                        </ul>\r\n                                    }\r\n                                </div>\r\n                            }\r\n\r\n                            @if (stats.toAssess.total > 0 && stats.toReview.done >= stats.toReview.total) {\r\n                                <div class=\"col-6\">\r\n                                    <p class=\"h3\">\r\n                                        {{ 'artemisApp.exerciseAssessmentDashboard.assessedSubmissions' | artemisTranslate }} ({{ stats.toAssess.done }} /\r\n                                        {{ stats.toAssess.total }})\r\n                                    </p>\r\n                                    @if (stats.toAssess.done < stats.toAssess.total) {\r\n                                        <button\r\n                                            class=\"btn btn-primary assess-example-submission mb-4\"\r\n                                            [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                            (click)=\"openExampleSubmission(nextExampleSubmissionId, false, true)\"\r\n                                        >\r\n                                            @if (stats.toAssess.done <= 0) {\r\n                                                <span jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.start\"></span>\r\n                                            } @else {\r\n                                                {{ 'artemisApp.exerciseAssessmentDashboard.continue' | artemisTranslate }}\r\n                                            }\r\n\r\n                                            {{ 'artemisApp.exerciseAssessmentDashboard.assessingExampleSubmission' | artemisTranslate }}\r\n                                        </button>\r\n                                    }\r\n\r\n                                    @if (stats.toAssess.done >= stats.toAssess.total) {\r\n                                        <ul>\r\n                                            @for (exampleSubmission of exampleSubmissionsToAssess; track exampleSubmission; let i = $index) {\r\n                                                <li>\r\n                                                    <button\r\n                                                        class=\"btn btn-link assess-example-submission\"\r\n                                                        [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                                        (click)=\"openExampleSubmission(exampleSubmission.id!, false, true)\"\r\n                                                    >\r\n                                                        {{ 'artemisApp.exerciseAssessmentDashboard.assessExampleSubmission' | artemisTranslate }} {{ i + 1 }}\r\n                                                    </button>\r\n                                                    @if (hasBeenCompletedByTutor(exampleSubmission.id!)) {\r\n                                                        <fa-icon class=\"text-success\" [icon]=\"faCheckCircle\" />\r\n                                                    }\r\n                                                </li>\r\n                                            }\r\n                                        </ul>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    @if (submissionLockLimitReached && tutorParticipationStatus !== REVIEWED_INSTRUCTIONS) {\r\n                        <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.submission.lockedSubmissionsLimitReached\"></div>\r\n                    }\r\n                    @for (roundState of numberOfAssessmentsOfCorrectionRounds; track roundState; let correctionRound = $index) {\r\n                        <div>\r\n                            @if ((tutorParticipationStatus === TRAINED || exercise.isAtLeastInstructor || tutorParticipationStatus === COMPLETED) && !isTestRun) {\r\n                                @if (!isExamMode) {\r\n                                    <h4 class=\"d-inline-block\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.studentsSubmissions\"></h4>\r\n                                }\r\n                                @if (isExamMode) {\r\n                                    <h4\r\n                                        class=\"d-inline-block\"\r\n                                        jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.studentsSubmissionsExam\"\r\n                                        [translateValues]=\"{ round: correctionRound + 1 }\"\r\n                                    ></h4>\r\n                                }\r\n                                @if (correctionRound > 0) {\r\n                                    <fa-icon\r\n                                        class=\"text-secondary\"\r\n                                        [icon]=\"faQuestionCircle\"\r\n                                        ngbTooltip=\"{{ 'artemisApp.exerciseAssessmentDashboard.noSubmissionsBecauseFirstAssessedByYourself' | artemisTranslate }}\"\r\n                                    />\r\n                                }\r\n                            }\r\n                            @if (numberOfCorrectionRoundsEnabled > correctionRound) {\r\n                                @if (isTestRun) {\r\n                                    <h4 jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.testRunSubmissions\"></h4>\r\n                                }\r\n                                @if (tutorParticipationStatus === TRAINED || exercise.isAtLeastInstructor || tutorParticipationStatus === COMPLETED || isTestRun) {\r\n                                    <div class=\"table-responsive\">\r\n                                        @if (showSubmissionsForRound(correctionRound)) {\r\n                                            <table class=\"table exercise-table\">\r\n                                                <thead>\r\n                                                    <tr\r\n                                                        jhiSort\r\n                                                        [(predicate)]=\"sortPredicates[0]\"\r\n                                                        [(ascending)]=\"reverseOrders[0]\"\r\n                                                        (sortChange)=\"sortSubmissionRows(correctionRound)\"\r\n                                                    >\r\n                                                        <th jhiSortBy=\"id\">\r\n                                                            <a class=\"th-link\">Id</a>\r\n                                                            <fa-icon [icon]=\"faSort\" />\r\n                                                        </th>\r\n                                                        <th jhiSortBy=\"submissionDate\">\r\n                                                            <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.submissionDate\"></a>\r\n                                                            <fa-icon [icon]=\"faSort\" />\r\n                                                        </th>\r\n                                                        <th jhiSortBy=\"results.correctionRound.score\">\r\n                                                            <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.result\"></a>\r\n                                                            <fa-icon [icon]=\"faSort\" />\r\n                                                        </th>\r\n                                                        @if (exercise.type === ExerciseType.TEXT) {\r\n                                                            <th jhiSortBy=\"language\">\r\n                                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.language\"></a>\r\n                                                                <fa-icon [icon]=\"faSort\" />\r\n                                                            </th>\r\n                                                        }\r\n                                                        <th jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.action\"></th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    @if (unassessedSubmissionByRound?.get(correctionRound)?.id && !exercise.teamMode && !isTestRun) {\r\n                                                        <tr>\r\n                                                            <td></td>\r\n                                                            <td>{{ unassessedSubmissionByRound!.get(correctionRound)!.submissionDate | artemisDate }}</td>\r\n                                                            <td></td>\r\n                                                            @if (exercise.type === ExerciseType.TEXT) {\r\n                                                                <td>\r\n                                                                    <jhi-language-table-cell [submission]=\"unassessedSubmissionByRound!.get(correctionRound)!\" />\r\n                                                                </td>\r\n                                                            }\r\n                                                            <td>\r\n                                                                <!-- TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n                                                                <!--                                                                <a-->\r\n                                                                <!--                                                                    *jhiExtensionPoint=\"-->\r\n                                                                <!--                                                                        overrideOpenAssessmentButton;-->\r\n                                                                <!--                                                                        context: {-->\r\n                                                                <!--                                                                            submission: 'new',-->\r\n                                                                <!--                                                                            queryParams: getAssessmentQueryParams(correctionRound),-->\r\n                                                                <!--                                                                            buttonLabel: 'startAssessment',-->\r\n                                                                <!--                                                                        }-->\r\n                                                                <!--                                                                    \"-->\r\n                                                                <!--                                                                    id=\"start-new-assessment\"-->\r\n                                                                <!--                                                                    class=\"btn btn-success btn-sm guided-tour-new-assessment-btn\"-->\r\n                                                                <!--                                                                    [routerLink]=\"getAssessmentLink('new')\"-->\r\n                                                                <!--                                                                    [queryParams]=\"getAssessmentQueryParams(correctionRound)\"-->\r\n                                                                <!--                                                                    [class.disabled]=\"exercise === exerciseForGuidedTour || openingAssessmentEditorForNewSubmission\"-->\r\n                                                                <!--                                                                    [class.guided-tour]=\"exercise === exerciseForGuidedTour\"-->\r\n                                                                <!--                                                                    [ngStyle]=\"exercise === exerciseForGuidedTour ? { cursor: 'not-allowed' } : {}\"-->\r\n                                                                <!--                                                                >-->\r\n                                                                <a\r\n                                                                    id=\"start-new-assessment\"\r\n                                                                    class=\"btn btn-success btn-sm guided-tour-new-assessment-btn\"\r\n                                                                    [routerLink]=\"getAssessmentLink('new')\"\r\n                                                                    [queryParams]=\"getAssessmentQueryParams(correctionRound)\"\r\n                                                                    [class.disabled]=\"exercise === exerciseForGuidedTour || openingAssessmentEditorForNewSubmission\"\r\n                                                                    [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                                                    [ngStyle]=\"exercise === exerciseForGuidedTour ? { cursor: 'not-allowed' } : {}\"\r\n                                                                >\r\n                                                                    @if (openingAssessmentEditorForNewSubmission) {\r\n                                                                        <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                                                                    }\r\n                                                                    <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                                    {{ 'artemisApp.exerciseAssessmentDashboard.startAssessment' | artemisTranslate }}\r\n                                                                </a>\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    }\r\n                                                    @for (submission of assessedSubmissionsByRound.get(correctionRound); track submission; let i = $index) {\r\n                                                        <tr>\r\n                                                            <td>{{ submission.id }}</td>\r\n                                                            <td>{{ submission.submissionDate | artemisDate }}</td>\r\n                                                            <td>\r\n                                                                <jhi-result\r\n                                                                    [result]=\"getSubmissionResultByCorrectionRound(submission, correctionRound)\"\r\n                                                                    [participation]=\"submission.participation!\"\r\n                                                                    [exercise]=\"exercise\"\r\n                                                                />\r\n                                                            </td>\r\n                                                            @if (exercise.type === ExerciseType.TEXT) {\r\n                                                                <td>\r\n                                                                    <jhi-language-table-cell [submission]=\"submission\" />\r\n                                                                </td>\r\n                                                            }\r\n                                                            <td>\r\n                                                                @if ((isTestRun && complaints.length === 0) || !isTestRun) {\r\n                                                                    <!-- TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n                                                                    <!--                                                                    <ng-container-->\r\n                                                                    <!--                                                                        *jhiExtensionPoint=\"-->\r\n                                                                    <!--                                                                            overrideOpenAssessmentButton;-->\r\n                                                                    <!--                                                                            context: {-->\r\n                                                                    <!--                                                                                submission: submission,-->\r\n                                                                    <!--                                                                                queryParams: getAssessmentQueryParams(correctionRound),-->\r\n                                                                    <!--                                                                                buttonLabel:-->\r\n                                                                    <!--                                                                                    submission && calculateSubmissionStatusIsDraft(submission, correctionRound)-->\r\n                                                                    <!--                                                                                        ? 'continueAssessment'-->\r\n                                                                    <!--                                                                                        : 'openAssessment',-->\r\n                                                                    <!--                                                                            }-->\r\n                                                                    <!--                                                                        \"-->\r\n                                                                    <!--                                                                    >-->\r\n                                                                    @if (submission && calculateSubmissionStatusIsDraft(submission, correctionRound)) {\r\n                                                                        <a\r\n                                                                            [routerLink]=\"getAssessmentLink(submission)\"\r\n                                                                            [queryParams]=\"getAssessmentQueryParams(correctionRound)\"\r\n                                                                            class=\"btn btn-warning btn-sm\"\r\n                                                                            id=\"continue-assessment\"\r\n                                                                        >\r\n                                                                            <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />&nbsp;{{\r\n                                                                                'artemisApp.exerciseAssessmentDashboard.continueAssessment' | artemisTranslate\r\n                                                                            }}\r\n                                                                        </a>\r\n                                                                    } @else {\r\n                                                                        @if (!!submission.results && !!submission.results[correctionRound]) {\r\n                                                                            <a\r\n                                                                                [routerLink]=\"getAssessmentLink(submission)\"\r\n                                                                                [queryParams]=\"getAssessmentQueryParams(correctionRound)\"\r\n                                                                                class=\"btn btn-primary btn-sm\"\r\n                                                                                id=\"open-assessment\"\r\n                                                                            >\r\n                                                                                <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                                                &nbsp;{{ 'artemisApp.exerciseAssessmentDashboard.openAssessment' | artemisTranslate }}\r\n                                                                            </a>\r\n                                                                        }\r\n                                                                    }\r\n                                                                    <!--                                                                    </ng-container>-->\r\n                                                                }\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        } @else {\r\n                                            <jhi-assessment-warning [exercise]=\"exercise\" />\r\n                                            @if (!exercise.teamMode) {\r\n                                                <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noSubmissions\"></div>\r\n                                            } @else {\r\n                                                <div class=\"alert alert-warning\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.startAssessmentFromTeamPages\"></div>\r\n                                            }\r\n                                        }\r\n                                        @if (\r\n                                            isExamMode &&\r\n                                            (!unassessedSubmissionByRound?.get(correctionRound)?.id || exercise.teamMode || isTestRun) &&\r\n                                            numberOfSubmissions.inTime !== roundState.inTime\r\n                                        ) {\r\n                                            <div class=\"alert alert-info\">\r\n                                                <span\r\n                                                    jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noSubmissionsInfo\"\r\n                                                    [translateValues]=\"{\r\n                                                        notYetAssessed: notYetAssessed[correctionRound],\r\n                                                        lockedSubmissionsByOtherTutor: lockedSubmissionsByOtherTutor[correctionRound],\r\n                                                    }\"\r\n                                                ></span>\r\n                                                @if (correctionRound === 1) {\r\n                                                    <span\r\n                                                        jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noSubmissionsInfoSecondCorrection\"\r\n                                                        [translateValues]=\"{ firstRoundAssessments: firstRoundAssessments }\"\r\n                                                    ></span>\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                }\r\n                            }\r\n                            @if (numberOfCorrectionRoundsEnabled <= correctionRound) {\r\n                                <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.correctionRoundNotYetEnabled\"></div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <!-- Complaints -->\r\n                    @if (tutorParticipationStatus === TRAINED || exercise.isAtLeastInstructor || tutorParticipationStatus === COMPLETED || isTestRun) {\r\n                        <h4 class=\"d-inline-block\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.complaints\"></h4>\r\n                        <fa-icon class=\"text-secondary\" [icon]=\"faQuestionCircle\" [ngbTooltip]=\"'artemisApp.exerciseAssessmentDashboard.complaintHint' | artemisTranslate\" />\r\n                        <div class=\"table-responsive\">\r\n                            @if (submissionsWithComplaints && submissionsWithComplaints!.length > 0) {\r\n                                <table class=\"table exercise-table\">\r\n                                    <thead>\r\n                                        <tr jhiSort [(predicate)]=\"sortPredicates[1]\" [(ascending)]=\"reverseOrders[1]\" (sortChange)=\"sortComplaintRows()\">\r\n                                            <th>#</th>\r\n                                            <th jhiSortBy=\"complaint.submittedTime\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.submissionDate\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiSortBy=\"submission.latestResult.score\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.result\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiSortBy=\"responseTime\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.responseTime\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiSortBy=\"complaint.accepted\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.status\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.action\"></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        @for (submissionWithComplaint of submissionsWithComplaints; track submissionWithComplaint; let i = $index) {\r\n                                            <tr>\r\n                                                <td>{{ i + 1 }}</td>\r\n                                                <td>{{ submissionWithComplaint.complaint.submittedTime | artemisDate }}</td>\r\n                                                <td>\r\n                                                    <jhi-result\r\n                                                        [result]=\"submissionWithComplaint.submission.latestResult\"\r\n                                                        [participation]=\"submissionWithComplaint.complaint.result!.participation!\"\r\n                                                        [exercise]=\"exercise\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    @if (submissionWithComplaint.complaint.accepted === undefined) {\r\n                                                        &gt;=\r\n                                                    }\r\n                                                    {{ complaintService.getResponseTimeInSeconds(submissionWithComplaint.complaint) | artemisDurationFromSeconds: true }}\r\n                                                    @if (complaintService.shouldHighlightComplaint(submissionWithComplaint.complaint)) {\r\n                                                        <fa-icon\r\n                                                            [icon]=\"faExclamationTriangle\"\r\n                                                            class=\"text-warning\"\r\n                                                            ngbTooltip=\"{{ 'artemisApp.complaint.oneWeekUnanswered' | artemisTranslate }}\"\r\n                                                        />\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    @if (submissionWithComplaint.complaint.accepted === undefined) {\r\n                                                        <span class=\"text-warning\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.noReply\"></span>\r\n                                                    }\r\n                                                    @if (submissionWithComplaint.complaint.accepted === true) {\r\n                                                        <span class=\"text-success\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.accepted\"></span>\r\n                                                    }\r\n                                                    @if (submissionWithComplaint.complaint.accepted === false) {\r\n                                                        <span class=\"text-danger\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.rejected\"></span>\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <!-- TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n                                                    <!--                                                    <ng-container-->\r\n                                                    <!--                                                        *jhiExtensionPoint=\"-->\r\n                                                    <!--                                                            overrideOpenAssessmentButton;-->\r\n                                                    <!--                                                            context: {-->\r\n                                                    <!--                                                                submission: submissionWithComplaint.submission,-->\r\n                                                    <!--                                                                queryParams: getComplaintQueryParams(submissionWithComplaint.complaint),-->\r\n                                                    <!--                                                                disabled: isComplaintLocked(submissionWithComplaint.complaint),-->\r\n                                                    <!--                                                                buttonLabel: submissionWithComplaint.complaint.accepted === undefined ? 'evaluateComplaint' : 'showComplaint',-->\r\n                                                    <!--                                                            }-->\r\n                                                    <!--                                                        \"-->\r\n                                                    <!--                                                    >-->\r\n                                                    @if (submissionWithComplaint.complaint.accepted === undefined) {\r\n                                                        <a\r\n                                                            [class.disabled]=\"isComplaintLocked(submissionWithComplaint.complaint)\"\r\n                                                            [routerLink]=\"getAssessmentLink(submissionWithComplaint.submission)\"\r\n                                                            [queryParams]=\"getComplaintQueryParams(submissionWithComplaint.complaint)\"\r\n                                                            class=\"btn btn-success btn-sm\"\r\n                                                            id=\"evaluate-complaint\"\r\n                                                        >\r\n                                                            <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                            {{ 'artemisApp.exerciseAssessmentDashboard.evaluateComplaint' | artemisTranslate }}\r\n                                                        </a>\r\n                                                    } @else {\r\n                                                        <a\r\n                                                            [routerLink]=\"getAssessmentLink(submissionWithComplaint.submission)\"\r\n                                                            [queryParams]=\"getComplaintQueryParams(submissionWithComplaint.complaint)\"\r\n                                                            class=\"btn btn-primary btn-sm\"\r\n                                                        >\r\n                                                            <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                            {{ 'artemisApp.exerciseAssessmentDashboard.showComplaint' | artemisTranslate }}\r\n                                                        </a>\r\n                                                    }\r\n                                                    <!--                                                    </ng-container>-->\r\n                                                </td>\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            } @else {\r\n                                @if (complaintsDashboardInfo.total === 0) {\r\n                                    <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noComplaints\"></div>\r\n                                }\r\n                                @if (complaintsDashboardInfo.total !== 0) {\r\n                                    <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noComplaintsDisplayed\"></div>\r\n                                }\r\n                            }\r\n                        </div>\r\n                    }\r\n\r\n                    <!-- More Feedback Requests -->\r\n                    @if ((tutorParticipationStatus === TRAINED || exercise.isAtLeastInstructor || tutorParticipationStatus === COMPLETED) && !isExamMode) {\r\n                        <h4 class=\"d-inline-block\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.moreFeedback\"></h4>\r\n                        <fa-icon\r\n                            class=\"text-secondary\"\r\n                            [icon]=\"faQuestionCircle\"\r\n                            [ngbTooltip]=\"'artemisApp.exerciseAssessmentDashboard.moreFeedbackRequestHint' | artemisTranslate\"\r\n                        />\r\n                        <div class=\"table-responsive\">\r\n                            @if (submissionsWithMoreFeedbackRequests && submissionsWithMoreFeedbackRequests!.length > 0) {\r\n                                <table class=\"table exercise-table\">\r\n                                    <thead>\r\n                                        <tr jhiSort [(predicate)]=\"sortPredicates[2]\" [(ascending)]=\"reverseOrders[2]\" (sortChange)=\"sortMoreFeedbackRows()\">\r\n                                            <th>#</th>\r\n                                            <th jhiSortBy=\"complaint.submittedTime\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.submissionDate\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiSortBy=\"submission.latestResult.score\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.result\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiSortBy=\"responseTime\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.responseTime\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiSortBy=\"complaint.accepted\">\r\n                                                <a class=\"th-link\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.status\"></a>\r\n                                                <fa-icon [icon]=\"faSort\" />\r\n                                            </th>\r\n                                            <th jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.action\"></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        @for (moreFeedbackRequest of submissionsWithMoreFeedbackRequests; track moreFeedbackRequest; let i = $index) {\r\n                                            <tr>\r\n                                                <td>{{ i + 1 }}</td>\r\n                                                <td>{{ moreFeedbackRequest.complaint.submittedTime | artemisDate }}</td>\r\n                                                <td>\r\n                                                    <jhi-result [result]=\"moreFeedbackRequest.complaint.result\" [exercise]=\"exercise\" />\r\n                                                </td>\r\n                                                <td>\r\n                                                    @if (moreFeedbackRequest.complaint.accepted === undefined) {\r\n                                                        &gt;=\r\n                                                    }\r\n                                                    {{ complaintService.getResponseTimeInSeconds(moreFeedbackRequest.complaint) | artemisDurationFromSeconds: true }}\r\n                                                    @if (complaintService.shouldHighlightComplaint(moreFeedbackRequest.complaint)) {\r\n                                                        <fa-icon\r\n                                                            [icon]=\"faExclamationTriangle\"\r\n                                                            class=\"text-warning\"\r\n                                                            ngbTooltip=\"{{ 'artemisApp.complaint.oneWeekUnanswered' | artemisTranslate }}\"\r\n                                                        />\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    @if (moreFeedbackRequest.complaint.accepted === undefined) {\r\n                                                        <span class=\"text-warning\" jhiTranslate=\"artemisApp.complaint.listOfComplaints.noReply\"></span>\r\n                                                    }\r\n                                                    @if (moreFeedbackRequest.complaint.accepted === true) {\r\n                                                        <span class=\"text-success\" jhiTranslate=\"artemisApp.moreFeedback.accepted\"></span>\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <!-- TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n                                                    <!--                                                    <ng-container-->\r\n                                                    <!--                                                        *jhiExtensionPoint=\"-->\r\n                                                    <!--                                                            overrideOpenAssessmentButton;-->\r\n                                                    <!--                                                            context: {-->\r\n                                                    <!--                                                                submission: moreFeedbackRequest.submission,-->\r\n                                                    <!--                                                                queryParams: getComplaintQueryParams(moreFeedbackRequest.complaint),-->\r\n                                                    <!--                                                                buttonLabel:-->\r\n                                                    <!--                                                                    moreFeedbackRequest.complaint.accepted === undefined-->\r\n                                                    <!--                                                                        ? 'evaluateMoreFeedbackRequest'-->\r\n                                                    <!--                                                                        : 'showMoreFeedbackRequests',-->\r\n                                                    <!--                                                            }-->\r\n                                                    <!--                                                        \"-->\r\n                                                    <!--                                                    >-->\r\n                                                    @if (moreFeedbackRequest.complaint.accepted === undefined) {\r\n                                                        <a\r\n                                                            class=\"btn btn-success btn-sm\"\r\n                                                            [class.disabled]=\"isComplaintLocked(moreFeedbackRequest.complaint)\"\r\n                                                            [routerLink]=\"getAssessmentLink(moreFeedbackRequest.submission)\"\r\n                                                            [queryParams]=\"getComplaintQueryParams(moreFeedbackRequest.complaint)\"\r\n                                                        >\r\n                                                            <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                            {{ 'artemisApp.exerciseAssessmentDashboard.evaluateMoreFeedbackRequest' | artemisTranslate }}\r\n                                                        </a>\r\n                                                    } @else {\r\n                                                        <button\r\n                                                            class=\"btn btn-primary btn-sm\"\r\n                                                            [routerLink]=\"getAssessmentLink(moreFeedbackRequest.submission)\"\r\n                                                            [queryParams]=\"getComplaintQueryParams(moreFeedbackRequest.complaint)\"\r\n                                                        >\r\n                                                            <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                            {{ 'artemisApp.exerciseAssessmentDashboard.showMoreFeedbackRequests' | artemisTranslate }}\r\n                                                        </button>\r\n                                                    }\r\n                                                    <!--                                                    </ng-container>-->\r\n                                                </td>\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            } @else {\r\n                                @if (moreFeedbackRequestsDashboardInfo.total === 0) {\r\n                                    <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noMoreFeedbackRequests\"></div>\r\n                                }\r\n                                @if (moreFeedbackRequestsDashboardInfo.total !== 0) {\r\n                                    <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noMoreFeedbackRequestsDisplayed\"></div>\r\n                                }\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <jhi-collapsable-assessment-instructions class=\"collapsable-instructions\" [readOnly]=\"true\" [exercise]=\"exercise\" [collapsed]=\"true\" />\r\n            </div>\r\n        }\r\n\r\n        @if (this.tutorParticipation.status! === TRAINED || exercise.isAtLeastInstructor) {\r\n            <div>\r\n                @if (!isExamMode) {\r\n                    <h2 jhiTranslate=\"artemisApp.instructorExerciseDashboard.leaderboardTitle\"></h2>\r\n                }\r\n                <jhi-tutor-leaderboard [exam]=\"exam\" [tutorsData]=\"statsForDashboard.tutorLeaderboardEntries\" [exercise]=\"exercise\" />\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ExerciseView, OrionState } from 'app/shared/orion/orion';\r\nimport { OrionConnectorService } from 'app/shared/orion/orion-connector.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { OrionAssessmentService } from 'app/orion/assessment/orion-assessment.service';\r\nimport { OrionButtonType } from 'app/shared/orion/orion-button/orion-button.component';\r\nimport { ExerciseAssessmentDashboardComponent } from '../../exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component';\r\nimport { OrionButtonComponent } from 'app/shared/orion/orion-button/orion-button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-orion-exercise-assessment-dashboard',\r\n    templateUrl: './orion-exercise-assessment-dashboard.component.html',\r\n    providers: [CourseManagementService],\r\n    imports: [ExerciseAssessmentDashboardComponent, OrionButtonComponent, ArtemisTranslatePipe],\r\n})\r\nexport class OrionExerciseAssessmentDashboardComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private exerciseService = inject(ExerciseService);\r\n    private orionAssessmentService = inject(OrionAssessmentService);\r\n    private orionConnectorService = inject(OrionConnectorService);\r\n    private alertService = inject(AlertService);\r\n\r\n    readonly ExerciseView = ExerciseView;\r\n    readonly ExerciseType = ExerciseType;\r\n    protected readonly OrionButtonType = OrionButtonType;\r\n\r\n    orionState: OrionState;\r\n    exerciseId: number;\r\n    exercise: Exercise;\r\n\r\n    ngOnInit(): void {\r\n        this.exerciseId = Number(this.route.snapshot.paramMap.get('exerciseId'));\r\n        this.exerciseService.getForTutors(this.exerciseId).subscribe({\r\n            next: (res) => (this.exercise = res.body!),\r\n            error: (error) => onError(this.alertService, error),\r\n        });\r\n        if (this.orionConnectorService && this.orionConnectorService.state()) {\r\n            this.orionConnectorService.state().subscribe((state) => (this.orionState = state));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggers downloading the test repository and opening it, allowing for submissions to be downloaded\r\n     */\r\n    openAssessmentInOrion() {\r\n        this.orionConnectorService.assessExercise(this.exercise);\r\n    }\r\n\r\n    /**\r\n     * Delegates to the {@link OrionAssessmentService} to load a new submission\r\n     */\r\n    downloadSubmissionInOrion(submission: Submission | 'new', correctionRound = 0, testRun = false) {\r\n        this.orionAssessmentService.downloadSubmissionInOrion(this.exerciseId, submission, correctionRound, testRun);\r\n    }\r\n}\r\n", "<!-- If the exercise is not loaded or not programming, show regular component-->\r\n@if (!exercise || exercise.type !== ExerciseType.PROGRAMMING || !orionState) {\r\n    <jhi-exercise-assessment-dashboard />\r\n} @else {\r\n    <!-- If the exercise is programming, but not opened in Orion, show Orion open button-->\r\n    @if (orionState.opened !== exerciseId || orionState.view !== ExerciseView.TUTOR) {\r\n        <jhi-exercise-assessment-dashboard>\r\n            <ng-template #overrideAssessmentTable>\r\n                <jhi-ide-button\r\n                    [buttonLoading]=\"orionState.cloning\"\r\n                    buttonLabel=\"{{ 'artemisApp.orionExerciseAssessmentDashboard.startYourParticipation' | artemisTranslate }}\"\r\n                    [buttonType]=\"OrionButtonType.Download\"\r\n                    (clickHandler)=\"openAssessmentInOrion()\"\r\n                />\r\n            </ng-template>\r\n        </jhi-exercise-assessment-dashboard>\r\n    } @else {\r\n        <jhi-exercise-assessment-dashboard>\r\n            <ng-template #overrideOpenAssessmentButton let-submission=\"submission\" let-queryParams=\"queryParams\" let-buttonLabel=\"buttonLabel\" let-disabled=\"disabled\">\r\n                <jhi-ide-button\r\n                    class=\"btn btn-sm\"\r\n                    [buttonLoading]=\"orionState.cloning\"\r\n                    [disabled]=\"!!disabled\"\r\n                    buttonLabel=\"{{ 'artemisApp.orionExerciseAssessmentDashboard.' + buttonLabel | artemisTranslate }}\"\r\n                    (clickHandler)=\"downloadSubmissionInOrion(submission, queryParams['correction-round'], queryParams['testRun'])\"\r\n                />\r\n            </ng-template>\r\n        </jhi-exercise-assessment-dashboard>\r\n    }\r\n    <!-- If the exercise is opened, show download submission buttons -->\r\n}\r\n<!-- If the exercise is programming, but not opened in Orion, show Orion open button-->\r\n"],
  "mappings": "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",
  "names": ["InfoPanelComponent", "panelHeader", "panelDescriptionHeader", "selectors", "inputs", "ngContentSelectors", "_c0", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275projection", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "LanguageTableCellComponent", "textSubmission", "submission", "selectors", "inputs", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "language", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "ctx_r0", "exercise", "title", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "ExerciseAssessmentDashboardComponent_Conditional_0_Conditional_5_Template", "ExerciseAssessmentDashboardComponent_Conditional_0_Conditional_6_Template", "\u0275\u0275property", "exam", "isTestRun", "\u0275\u0275conditional", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleSecondCorrection", "secondCorrectionEnabled", "togglingSecondCorrectionButton", "\u0275\u0275textInterpolate1", "model_r3", "value", "numberOfSubmissions", "total", "toFixed", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_18_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "customColors", "view", "assessments", "legendPosition", "\u0275\u0275textInterpolate", "late", "complaintsLink", "\u0275\u0275textInterpolate3", "complaintsDashboardInfo", "done", "doneToTotalPercentage", "\u0275\u0275pureFunction1", "_c0", "tutor", "id", "\u0275\u0275element", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_39_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_39_Conditional_8_Template", "isAtLeastInstructor", "moreFeedbackRequestsLink", "moreFeedbackRequestsDashboardInfo", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_40_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_40_Conditional_8_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_16_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_18_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_34_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_35_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_39_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_40_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Conditional_69_Template", "yourStatusTitle", "tutorParticipation", "totalNumberOfAssessments", "numberOfAssessmentsOfCorrectionRounds", "status", "toString", "numberOfCorrectionRoundsInExam", "isExamMode", "inTime", "numberOfTutorAssessments", "tutorAssessmentPercentage", "complaintsEnabled", "feedbackRequestEnabled", "ratingsDashboardInfo", "getExerciseDetailsLink", "faListAlt", "formattedProblemStatement", "\u0275\u0275sanitizeHtml", "programmingExercise", "templateParticipation", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_3_Conditional_4_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_3_Conditional_5_Template", "type", "ExerciseType", "PROGRAMMING", "formattedSampleSolution", "exampleSolutionModel", "modelingExercise", "diagramType", "solutionParticipation", "repositoryUri", "\u0275\u0275sanitizeUrl", "\u0275\u0275pureFunction2", "_c1", "courseId", "exerciseId", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_7_Conditional_5_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_7_Conditional_6_Template", "localVCEnabled", "formattedGradingInstructions", "gradingCriteria", "\u0275\u0275pureFunction0", "_c2", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_4_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_5_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_6_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_8_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Conditional_9_Template", "problemStatement", "length", "TEXT", "FILE_UPLOAD", "MODELING", "exampleSolutionExplanation", "gradingInstructions", "_r4", "readInstruction", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_5_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_5_Conditional_8_Template", "isLoading", "\u0275\u0275pureFunction3", "_c3", "stats", "toReview", "toAssess", "_r5", "openExampleSubmission", "nextExampleSubmissionId", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Conditional_7_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Conditional_7_Conditional_4_Template", "\u0275\u0275classProp", "exerciseForGuidedTour", "faCheckCircle", "exampleSubmission_r7", "_r6", "$implicit", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Conditional_8_For_4_Conditional_7_Template", "\u0275$index_421_r8", "hasBeenCompletedByTutor", "\u0275\u0275repeaterCreate", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Conditional_8_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "exampleSubmissionsToReview", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Conditional_8_Template", "_r9", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Conditional_7_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Conditional_7_Conditional_4_Template", "exampleSubmission_r11", "_r10", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Conditional_8_For_4_Conditional_7_Template", "\u0275$index_470_r12", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Conditional_8_For_4_Template", "exampleSubmissionsToAssess", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Conditional_8_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Conditional_4_Template", "_c4", "\u0275$index_494_r13", "\u0275\u0275propertyInterpolate", "faQuestionCircle", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_3_Conditional_1_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_3_Conditional_2_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_3_Conditional_3_Template", "faSort", "unassessedSubmissionByRound", "get", "faSpinner", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_Conditional_36_Conditional_11_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_Conditional_36_Conditional_34_Template", "submissionDate", "openingAssessmentEditorForNewSubmission", "getAssessmentLink", "getAssessmentQueryParams", "_c5", "_c6", "faFolderOpen", "submission_r15", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_For_38_Conditional_18_Conditional_16_Conditional_1_Template", "results", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_For_38_Conditional_18_Conditional_15_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_For_38_Conditional_18_Conditional_16_Template", "calculateSubmissionStatusIsDraft", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_For_38_Conditional_15_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_For_38_Conditional_18_Template", "getSubmissionResultByCorrectionRound", "participation", "complaints", "\u0275\u0275twoWayListener", "$event", "_r14", "i0", "\u0275\u0275twoWayBindingSet", "sortPredicates", "reverseOrders", "$index", "sortSubmissionRows", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_Conditional_29_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_Conditional_36_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_For_38_Template", "\u0275\u0275twoWayProperty", "tmp_22_0", "teamMode", "assessedSubmissionsByRound", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_4_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_4_Conditional_4_Template", "_c8", "firstRoundAssessments", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_5_Conditional_5_Template", "_c7", "notYetAssessed", "lockedSubmissionsByOtherTutor", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_4_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Conditional_5_Template", "showSubmissionsForRound", "tmp_16_0", "roundState_r17", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_1_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Conditional_2_Template", "tutorParticipationStatus", "TRAINED", "COMPLETED", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_4_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Conditional_5_Template", "numberOfCorrectionRoundsEnabled", "faExclamationTriangle", "isComplaintLocked", "submissionWithComplaint_r19", "complaint", "submission", "getComplaintQueryParams", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_17_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_20_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_24_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_25_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_26_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_42_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Conditional_43_Template", "\u0275$index_838_r20", "submittedTime", "latestResult", "result", "accepted", "undefined", "\u0275\u0275pipeBind2", "complaintService", "getResponseTimeInSeconds", "shouldHighlightComplaint", "_r18", "sortComplaintRows", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_For_45_Template", "submissionsWithComplaints", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_9_Conditional_1_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_9_Conditional_2_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_8_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Conditional_9_Template", "moreFeedbackRequest_r22", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Conditional_17_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Conditional_20_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Conditional_24_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Conditional_25_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Conditional_43_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Conditional_44_Template", "\u0275$index_1019_r23", "_r21", "sortMoreFeedbackRows", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_For_45_Template", "submissionsWithMoreFeedbackRequests", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_9_Conditional_1_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_9_Conditional_2_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_8_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Conditional_9_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_7_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_8_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_9_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_For_11_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_12_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Conditional_13_Template", "REVIEWED_INSTRUCTIONS", "NOT_PARTICIPATED", "submissionLockLimitReached", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_7_Conditional_3_Template", "statsForDashboard", "tutorLeaderboardEntries", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_3_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_4_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_5_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_6_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Conditional_7_Template", "ExerciseAssessmentDashboardComponent", "inject", "ComplaintService", "exerciseService", "ExerciseService", "alertService", "AlertService", "translateService", "TranslateService", "accountService", "AccountService", "route", "ActivatedRoute", "tutorParticipationService", "TutorParticipationService", "submissionService", "SubmissionService", "textSubmissionService", "TextSubmissionService", "modelingSubmissionService", "ModelingSubmissionService", "fileUploadSubmissionService", "FileUploadSubmissionService", "artemisMarkdown", "ArtemisMarkdownService", "router", "Router", "programmingSubmissionService", "ProgrammingSubmissionService", "guidedTourService", "GuidedTourService", "sortService", "SortService", "profileService", "ProfileService", "roundScoreSpecifiedByCourseSettings", "roundValueSpecifiedByCourseSettings", "getCourseFromExercise", "examId", "exerciseGroupId", "StatsForDashboard", "DueDateStat", "numberOfAutomaticAssistedAssessments", "numberOfLockedAssessmentByOtherTutorsOfCorrectionRound", "Map", "exampleSubmissionsCompletedByTutor", "AssessmentDashboardInformationEntry", "LegendPosition", "Below", "isAutomaticAssessedProgrammingExercise", "ngOnInit", "Number", "snapshot", "paramMap", "url", "indexOf", "has", "loadAll", "identity", "then", "user", "onLangChange", "subscribe", "setupGraph", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "PROFILE_LOCALVC", "assessmentType", "AssessmentType", "AUTOMATIC", "allowComplaintsForAutomaticAssessments", "numberOfComplaintsLabel", "instant", "numberOfResolvedComplaintsLabel", "name", "GraphColors", "YELLOW", "GREEN", "numberOfOpenComplaints", "numberOfComplaints", "numberOfUnassessedSubmissionLabel", "numberOfAutomaticAssistedSubmissionsLabel", "numberOfManualAssessedSubmissionsLabel", "RED", "BLUE", "setupLinks", "getForTutors", "next", "res", "body", "safeHtmlForMarkdown", "textExercise", "exampleSolution", "JSON", "parse", "fileUploadExercise", "enableTourForExercise", "tutorAssessmentTour", "tutorParticipations", "exampleSubmissions", "filter", "exampleSubmission", "usedForTutorial", "trainedExampleSubmissions", "e", "exerciseGroup", "getAllTutorAssessedSubmissionsForAllCorrectionRounds", "isAfterDueDate", "dueDate", "isBefore", "dayjs", "allowFeedbackRequests", "getSubmissionWithoutAssessmentForAllCorrectionRounds", "componentPageLoaded", "error", "response", "onError", "getComplaintsForTestRun", "getSubmissionsWithComplaintsForTutor", "getSubmissionsWithMoreFeedbackRequestsForTutor", "getStatsForTutors", "from", "tutorLeaderboardEntry", "find", "entry", "userId", "sortByProperty", "numberOfAssessments", "numberOfTutorComplaints", "numberOfMoreFeedbackRequests", "numberOfTutorMoreFeedbackRequests", "numberOfOpenMoreFeedbackRequests", "numberOfRatings", "numberOfTutorRatings", "Math", "floor", "calculateAssessmentProgressInformation", "language", "submissionExerciseType", "i", "getAllTutorAssessedSubmissionsForCorrectionRound", "correctionRound", "submissionsObservable", "of", "getTestRunSubmissionsForExercise", "getSubmissions", "assessedByTutor", "pipe", "map", "reconnectEntities", "submissions", "sub", "setLatestSubmissionResult", "getLatestSubmissionResult", "set", "getSubmissionWithoutAssessmentForCorrectionRound", "submissionObservable", "getSubmissionWithoutAssessment", "delete", "errorKey", "detail", "message", "unassessedSubmissionExist", "assessedSubmissionsExist", "create", "finalize", "success", "exampleSubmissionId", "tmpResult", "completionDate", "isManualResult", "submissionId", "readOnly", "toComplete", "queryParams", "navigate", "isComplaintLockedForLoggedInUser", "submissionUrlParameter", "participationId", "getLinkToSubmissionAssessment", "testRun", "complaintType", "ComplaintType", "MORE_FEEDBACK", "getSubmissionToViewFromComplaintSubmission", "submissionToView", "dto", "replace", "sortByFunction", "element", "selectors", "features", "\u0275\u0275ProvidersFeature", "CourseManagementService", "decls", "vars", "consts", "template", "rf", "ctx", "ExerciseAssessmentDashboardComponent_Conditional_0_Template", "ExerciseAssessmentDashboardComponent_Conditional_1_Template", "HeaderExercisePageWithDetailsComponent", "TutorParticipationGraphComponent", "SecondCorrectionEnableButtonComponent", "PieChartModule", "PieChartComponent", "SidePanelComponent", "TranslateDirective", "RouterLink", "FaIconComponent", "InfoPanelComponent", "ProgrammingExerciseInstructionComponent", "ModelingEditorComponent", "SecureLinkDirective", "ButtonComponent", "CodeButtonComponent", "StructuredGradingInstructionsAssessmentLayoutComponent", "NgbTooltip", "SortDirective", "SortByDirective", "LanguageTableCellComponent", "NgStyle", "ResultComponent", "AssessmentWarningComponent", "CollapsableAssessmentInstructionsComponent", "TutorLeaderboardComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openAssessmentInOrion", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275property", "orionState", "cloning", "OrionButtonType", "Download", "\u0275\u0275template", "OrionExerciseAssessmentDashboardComponent_Conditional_2_Conditional_2_ng_template_3_Template", "\u0275\u0275templateRefExtractor", "ctx_r3", "_r3", "submission_r5", "submission", "queryParams_r6", "queryParams", "downloadSubmissionInOrion", "buttonLabel_r7", "disabled_r8", "OrionExerciseAssessmentDashboardComponent_Conditional_2_Conditional_3_ng_template_3_Template", "OrionExerciseAssessmentDashboardComponent_Conditional_2_Conditional_2_Template", "OrionExerciseAssessmentDashboardComponent_Conditional_2_Conditional_3_Template", "\u0275\u0275conditional", "opened", "exerciseId", "view", "ExerciseView", "TUTOR", "OrionExerciseAssessmentDashboardComponent", "route", "inject", "ActivatedRoute", "exerciseService", "ExerciseService", "orionAssessmentService", "OrionAssessmentService", "orionConnectorService", "OrionConnectorService", "alertService", "AlertService", "ExerciseType", "exercise", "ngOnInit", "Number", "snapshot", "paramMap", "get", "getForTutors", "subscribe", "next", "res", "body", "error", "onError", "state", "assessExercise", "correctionRound", "testRun", "selectors", "features", "\u0275\u0275ProvidersFeature", "CourseManagementService", "decls", "vars", "consts", "template", "rf", "ctx", "OrionExerciseAssessmentDashboardComponent_Conditional_1_Template", "OrionExerciseAssessmentDashboardComponent_Conditional_2_Template", "type", "PROGRAMMING", "ExerciseAssessmentDashboardComponent", "OrionButtonComponent", "ArtemisTranslatePipe", "encapsulation"]
}
