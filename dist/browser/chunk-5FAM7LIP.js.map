{
  "version": 3,
  "sources": ["src/main/webapp/app/course/plagiarism-cases/shared/plagiarism-cases.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { PlagiarismCase } from 'app/exercises/shared/plagiarism/types/PlagiarismCase';\r\nimport { PlagiarismStatus } from 'app/exercises/shared/plagiarism/types/PlagiarismStatus';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { PlagiarismSubmissionElement } from 'app/exercises/shared/plagiarism/types/PlagiarismSubmissionElement';\r\nimport { PlagiarismVerdict } from 'app/exercises/shared/plagiarism/types/PlagiarismVerdict';\r\nimport { PlagiarismCaseInfo } from 'app/exercises/shared/plagiarism/types/PlagiarismCaseInfo';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\n\r\nexport type EntityResponseType = HttpResponse<PlagiarismCase>;\r\nexport type EntityArrayResponseType = HttpResponse<PlagiarismCase[]>;\r\nexport type Comparison = PlagiarismComparison<PlagiarismSubmissionElement>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlagiarismCasesService {\r\n    private http = inject(HttpClient);\r\n\r\n    private resourceUrl = 'api/plagiarism/courses';\r\n    private resourceUrlExercises = 'api/plagiarism/exercises';\r\n\r\n    /* Instructor */\r\n\r\n    /**\r\n     * Get all plagiarism cases for the instructor of the course with the given id\r\n     * @param { number } courseId id of the course\r\n     */\r\n    public getCoursePlagiarismCasesForInstructor(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.http.get<PlagiarismCase[]>(`${this.resourceUrl}/${courseId}/plagiarism-cases/for-instructor`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get all plagiarism cases for the instructor of the exam with the given id\r\n     * @param { number } courseId id of the course\r\n     * @param { number } examId id of the exam\r\n     */\r\n    public getExamPlagiarismCasesForInstructor(courseId: number, examId: number): Observable<EntityArrayResponseType> {\r\n        return this.http.get<PlagiarismCase[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/plagiarism-cases/for-instructor`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the plagiarism case with the given id for the instructor\r\n     * @param { number } courseId id of the course\r\n     * @param { number } plagiarismCaseId id of the plagiarismCase\r\n     */\r\n    public getPlagiarismCaseDetailForInstructor(courseId: number, plagiarismCaseId: number): Observable<EntityResponseType> {\r\n        return this.http.get<PlagiarismCase>(`${this.resourceUrl}/${courseId}/plagiarism-cases/${plagiarismCaseId}/for-instructor`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param { number } courseId id of the course\r\n     * @param { number } plagiarismCaseId id of the plagiarismCase\r\n     * @param plagiarismVerdict plagiarism case verdict to save including the verdict itself and optionally the message or the point deduction\r\n     */\r\n    public saveVerdict(\r\n        courseId: number,\r\n        plagiarismCaseId: number,\r\n        plagiarismVerdict: { verdict: PlagiarismVerdict; verdictMessage?: string; verdictPointDeduction?: number },\r\n    ): Observable<EntityResponseType> {\r\n        return this.http.put<PlagiarismCase>(`${this.resourceUrl}/${courseId}/plagiarism-cases/${plagiarismCaseId}/verdict`, plagiarismVerdict, { observe: 'response' });\r\n    }\r\n\r\n    /* Student */\r\n\r\n    /**\r\n     * Get the plagiarism case info for the student for the given course and exercise\r\n     * @param { number } courseId id of the course\r\n     * @param { number } exerciseId id of the exercise\r\n     */\r\n    public getPlagiarismCaseInfoForStudent(courseId: number, exerciseId: number): Observable<HttpResponse<PlagiarismCaseInfo>> {\r\n        return this.http.get<PlagiarismCaseInfo>(`${this.resourceUrl}/${courseId}/exercises/${exerciseId}/plagiarism-case`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the plagiarism case infos for the student for the given course and exercise id list for the exercises that the student is allowed to access.\r\n     * @param { number } courseId id of the course\r\n     * @param { number[] } exerciseIds ids of the exercises\r\n     */\r\n    public getPlagiarismCaseInfosForStudent(courseId: number, exerciseIds: number[]): Observable<HttpResponse<{ [exerciseId: number]: PlagiarismCaseInfo }>> {\r\n        let params = new HttpParams();\r\n        for (const exerciseId of exerciseIds) {\r\n            params = params.append('exerciseId', exerciseId);\r\n        }\r\n        return this.http.get<PlagiarismCaseInfo[]>(`${this.resourceUrl}/${courseId}/plagiarism-cases`, { params, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the plagiarism case with the given id for the student\r\n     * @param { number } courseId id of the course\r\n     * @param { number } plagiarismCaseId id of the plagiarismCase\r\n     */\r\n    public getPlagiarismCaseDetailForStudent(courseId: number, plagiarismCaseId: number): Observable<EntityResponseType> {\r\n        return this.http.get<PlagiarismCase>(`${this.resourceUrl}/${courseId}/plagiarism-cases/${plagiarismCaseId}/for-student`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the plagiarism comparison with the given id\r\n     * @param { number } courseId\r\n     * @param { number } plagiarismComparisonId\r\n     */\r\n    public getPlagiarismComparisonForSplitView(courseId: number, plagiarismComparisonId: number): Observable<HttpResponse<Comparison>> {\r\n        return this.http.get<Comparison>(`${this.resourceUrl}/${courseId}/plagiarism-comparisons/${plagiarismComparisonId}/for-split-view`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the status of the plagiarism comparison with given id\r\n     * @param { number } courseId\r\n     * @param { number } plagiarismComparisonId\r\n     * @param { PlagiarismStatus } status\r\n     */\r\n    public updatePlagiarismComparisonStatus(courseId: number, plagiarismComparisonId: number, status: PlagiarismStatus): Observable<HttpResponse<void>> {\r\n        return this.http.put<void>(`${this.resourceUrl}/${courseId}/plagiarism-comparisons/${plagiarismComparisonId}/status`, { status }, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Clean up plagiarism results and comparisons\r\n     * If deleteAll is set to true, all plagiarism results belonging to the exercise are deleted,\r\n     * otherwise only plagiarism comparisons or with status DENIED or CONFIRMED are deleted and old results are deleted as well.\r\n     *\r\n     * @param { number } exerciseId\r\n     * @param {number} plagiarismResultId\r\n     * @param { boolean } deleteAll\r\n     */\r\n    public cleanUpPlagiarism(exerciseId: number, plagiarismResultId: number, deleteAll = false): Observable<HttpResponse<void>> {\r\n        const params = new HttpParams().append('deleteAll', deleteAll ? 'true' : 'false');\r\n        return this.http.delete<void>(`${this.resourceUrlExercises}/${exerciseId}/plagiarism-results/${plagiarismResultId}/plagiarism-comparisons`, {\r\n            params,\r\n            observe: 'response',\r\n        });\r\n    }\r\n    public getNumberOfPlagiarismCasesForExercise(exercise: Exercise): Observable<number> {\r\n        let courseId: number;\r\n        if (exercise.exerciseGroup) {\r\n            courseId = exercise.exerciseGroup.exam!.course!.id!;\r\n        } else {\r\n            courseId = exercise.course!.id!;\r\n        }\r\n        const exerciseId = exercise!.id;\r\n        return this.http.get<number>(`${this.resourceUrl}/${courseId}/exercises/${exerciseId}/plagiarism-cases-count`);\r\n    }\r\n}\r\n"],
  "mappings": "gGAgBA,IAAaA,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,KAAOC,EAAOC,CAAU,EAExBC,YAAc,yBACdC,qBAAuB,2BAQxBC,sCAAsCC,EAAgB,CACzD,OAAO,KAAKN,KAAKO,IAAsB,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,mCAAoC,CAAEE,QAAS,UAAU,CAAE,CACrI,CAOOC,oCAAoCH,EAAkBI,EAAc,CACvE,OAAO,KAAKV,KAAKO,IAAsB,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,UAAUI,CAAM,mCAAoC,CAAEF,QAAS,UAAU,CAAE,CACrJ,CAOOG,qCAAqCL,EAAkBM,EAAwB,CAClF,OAAO,KAAKZ,KAAKO,IAAoB,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,qBAAqBM,CAAgB,kBAAmB,CAAEJ,QAAS,UAAU,CAAE,CACvJ,CAQOK,YACHP,EACAM,EACAE,EAA0G,CAE1G,OAAO,KAAKd,KAAKe,IAAoB,GAAG,KAAKZ,WAAW,IAAIG,CAAQ,qBAAqBM,CAAgB,WAAYE,EAAmB,CAAEN,QAAS,UAAU,CAAE,CACnK,CASOQ,gCAAgCV,EAAkBW,EAAkB,CACvE,OAAO,KAAKjB,KAAKO,IAAwB,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,cAAcW,CAAU,mBAAoB,CAAET,QAAS,UAAU,CAAE,CAC/I,CAOOU,iCAAiCZ,EAAkBa,EAAqB,CAC3E,IAAIC,EAAS,IAAIC,EACjB,QAAWJ,KAAcE,EACrBC,EAASA,EAAOE,OAAO,aAAcL,CAAU,EAEnD,OAAO,KAAKjB,KAAKO,IAA0B,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,oBAAqB,CAAEc,OAAAA,EAAQZ,QAAS,UAAU,CAAE,CAClI,CAOOe,kCAAkCjB,EAAkBM,EAAwB,CAC/E,OAAO,KAAKZ,KAAKO,IAAoB,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,qBAAqBM,CAAgB,eAAgB,CAAEJ,QAAS,UAAU,CAAE,CACpJ,CAOOgB,oCAAoClB,EAAkBmB,EAA8B,CACvF,OAAO,KAAKzB,KAAKO,IAAgB,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,2BAA2BmB,CAAsB,kBAAmB,CAChIjB,QAAS,WACZ,CACL,CAQOkB,iCAAiCpB,EAAkBmB,EAAgCE,EAAwB,CAC9G,OAAO,KAAK3B,KAAKe,IAAU,GAAG,KAAKZ,WAAW,IAAIG,CAAQ,2BAA2BmB,CAAsB,UAAW,CAAEE,OAAAA,CAAM,EAAI,CAAEnB,QAAS,UAAU,CAAE,CAC7J,CAWOoB,kBAAkBX,EAAoBY,EAA4BC,EAAY,GAAK,CACtF,IAAMV,EAAS,IAAIC,EAAU,EAAGC,OAAO,YAAaQ,EAAY,OAAS,OAAO,EAChF,OAAO,KAAK9B,KAAK+B,OAAa,GAAG,KAAK3B,oBAAoB,IAAIa,CAAU,uBAAuBY,CAAkB,0BAA2B,CACxIT,OAAAA,EACAZ,QAAS,WACZ,CACL,CACOwB,sCAAsCC,EAAkB,CAC3D,IAAI3B,EACA2B,EAASC,cACT5B,EAAW2B,EAASC,cAAcC,KAAMC,OAAQC,GAEhD/B,EAAW2B,EAASG,OAAQC,GAEhC,IAAMpB,EAAagB,EAAUI,GAC7B,OAAO,KAAKrC,KAAKO,IAAY,GAAG,KAAKJ,WAAW,IAAIG,CAAQ,cAAcW,CAAU,yBAAyB,CACjH,4CA/HSlB,EAAsB,6BAAtBA,EAAsBuC,QAAtBvC,EAAsBwC,UAAAC,WADT,MAAM,CAAA,SACnBzC,CAAsB,GAAA",
  "names": ["PlagiarismCasesService", "http", "inject", "HttpClient", "resourceUrl", "resourceUrlExercises", "getCoursePlagiarismCasesForInstructor", "courseId", "get", "observe", "getExamPlagiarismCasesForInstructor", "examId", "getPlagiarismCaseDetailForInstructor", "plagiarismCaseId", "saveVerdict", "plagiarismVerdict", "put", "getPlagiarismCaseInfoForStudent", "exerciseId", "getPlagiarismCaseInfosForStudent", "exerciseIds", "params", "HttpParams", "append", "getPlagiarismCaseDetailForStudent", "getPlagiarismComparisonForSplitView", "plagiarismComparisonId", "updatePlagiarismComparisonStatus", "status", "cleanUpPlagiarism", "plagiarismResultId", "deleteAll", "delete", "getNumberOfPlagiarismCasesForExercise", "exercise", "exerciseGroup", "exam", "course", "id", "factory", "\u0275fac", "providedIn"]
}
