{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/utils.ts"],
  "sourcesContent": ["import { SafeHtml } from '@angular/platform-browser';\r\nimport { DetailOverviewSection, DetailType } from 'app/detail-overview-list/detail-overview-list.component';\r\nimport { Detail } from 'app/detail-overview-list/detail.model';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore } from 'app/entities/exercise.model';\r\n\r\nexport function getExerciseGeneralDetailsSection(exercise: Exercise): DetailOverviewSection {\r\n    return {\r\n        headline: 'artemisApp.exercise.sections.general',\r\n        details: [\r\n            exercise.course && {\r\n                type: DetailType.Link,\r\n                title: 'artemisApp.exercise.course',\r\n                data: { text: exercise.course?.title, routerLink: ['/course-management', exercise.course?.id] },\r\n            },\r\n            exercise.exerciseGroup && {\r\n                type: DetailType.Link,\r\n                title: 'artemisApp.exercise.course',\r\n                data: { text: exercise.exerciseGroup?.exam?.course?.title, routerLink: ['/course-management', exercise.exerciseGroup.exam?.course?.id] },\r\n            },\r\n            exercise.exerciseGroup && {\r\n                type: DetailType.Link,\r\n                title: 'artemisApp.exercise.exam',\r\n                data: {\r\n                    text: exercise.exerciseGroup.exam?.title,\r\n                    routerLink: ['/course-management', exercise.exerciseGroup?.exam?.course?.id, 'exams', exercise.exerciseGroup?.exam?.id],\r\n                },\r\n            },\r\n            {\r\n                type: DetailType.Text,\r\n                title: 'artemisApp.exercise.title',\r\n                data: { text: exercise.title },\r\n            },\r\n            {\r\n                type: DetailType.Text,\r\n                title: 'artemisApp.exercise.categories',\r\n                data: { text: exercise.categories?.map((category) => category.category?.toUpperCase()).join(', ') },\r\n            },\r\n        ],\r\n    };\r\n}\r\n\r\nexport function getExerciseModeDetailSection(exercise: Exercise): DetailOverviewSection {\r\n    return {\r\n        headline: 'artemisApp.exercise.sections.mode',\r\n        details: [\r\n            {\r\n                type: DetailType.Text,\r\n                title: 'artemisApp.exercise.difficulty',\r\n                data: { text: exercise.difficulty },\r\n            },\r\n            {\r\n                type: DetailType.Text,\r\n                title: 'artemisApp.exercise.mode',\r\n                data: { text: exercise.mode },\r\n            },\r\n            exercise.teamAssignmentConfig && {\r\n                type: DetailType.Text,\r\n                title: 'artemisApp.exercise.teamAssignmentConfig.teamSize',\r\n                data: { text: `Min. ${exercise.teamAssignmentConfig.minTeamSize}, Max. ${exercise.teamAssignmentConfig.maxTeamSize}` },\r\n            },\r\n        ],\r\n    };\r\n}\r\n\r\nexport function getExerciseProblemDetailSection(formattedProblemStatement: SafeHtml | null, exercise: Exercise): DetailOverviewSection {\r\n    const hasCompetencies = !!exercise.competencyLinks?.length;\r\n    const details: Detail[] = [\r\n        {\r\n            title: hasCompetencies ? 'artemisApp.exercise.problemStatement' : undefined,\r\n            type: DetailType.Markdown,\r\n            data: { innerHtml: formattedProblemStatement },\r\n        },\r\n    ];\r\n\r\n    if (hasCompetencies) {\r\n        details.push({\r\n            title: 'artemisApp.competency.link.title',\r\n            type: DetailType.Text,\r\n            data: { text: exercise.competencyLinks?.map((competencyLink) => competencyLink.competency?.title).join(', ') },\r\n        });\r\n    }\r\n    return {\r\n        headline: 'artemisApp.exercise.sections.problem',\r\n        details: details,\r\n    };\r\n}\r\n\r\nexport function getExerciseGradingDefaultDetails(exercise: Exercise): Detail[] {\r\n    const includedInScoreIsBoolean = exercise.includedInOverallScore != IncludedInOverallScore.INCLUDED_AS_BONUS;\r\n    const includedInScore = {\r\n        type: includedInScoreIsBoolean ? DetailType.Boolean : DetailType.Text,\r\n        title: 'artemisApp.exercise.includedInOverallScore',\r\n        data: { text: 'BONUS', boolean: exercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_COMPLETELY },\r\n    };\r\n    return [\r\n        { type: DetailType.Date, title: 'artemisApp.exercise.releaseDate', data: { date: exercise.releaseDate } },\r\n        { type: DetailType.Date, title: 'artemisApp.exercise.startDate', data: { date: exercise.startDate } },\r\n        { type: DetailType.Date, title: 'artemisApp.exercise.dueDate', data: { date: exercise.dueDate } },\r\n        exercise.type !== ExerciseType.QUIZ && { type: DetailType.Date, title: 'artemisApp.exercise.assessmentDueDate', data: { date: exercise.assessmentDueDate } },\r\n        { type: DetailType.Text, title: 'artemisApp.exercise.points', data: { text: exercise.maxPoints } },\r\n        !!exercise.bonusPoints && { type: DetailType.Text, title: 'artemisApp.exercise.bonusPoints', data: { text: exercise.bonusPoints } },\r\n        includedInScore as Detail,\r\n        exercise.type !== ExerciseType.QUIZ && {\r\n            type: DetailType.Boolean,\r\n            title: 'artemisApp.exercise.presentationScoreEnabled.title',\r\n            data: { boolean: exercise.presentationScoreEnabled },\r\n        },\r\n    ];\r\n}\r\n\r\nexport function getExerciseGradingInstructionsCriteriaDetails(exercise: Exercise, formattedGradingInstructions: SafeHtml | null): Detail[] {\r\n    return [\r\n        !!exercise.gradingInstructions && {\r\n            type: DetailType.Markdown,\r\n            title: 'artemisApp.exercise.assessmentInstructions',\r\n            data: { innerHtml: formattedGradingInstructions },\r\n        },\r\n        exercise.gradingCriteria && {\r\n            type: DetailType.GradingCriteria,\r\n            title: 'artemisApp.exercise.structuredAssessmentInstructions',\r\n            data: { gradingCriteria: exercise.gradingCriteria },\r\n        },\r\n    ];\r\n}\r\n\r\nexport function getExerciseMarkdownSolution(exercise: Exercise, formattedExampleSolution: SafeHtml | null): DetailOverviewSection {\r\n    return {\r\n        headline: 'artemisApp.exercise.sections.solution',\r\n        details: [\r\n            {\r\n                title: 'artemisApp.exercise.sections.solution',\r\n                type: DetailType.Markdown,\r\n                data: { innerHtml: formattedExampleSolution },\r\n            },\r\n            {\r\n                title: 'artemisApp.exercise.exampleSolutionPublicationDate',\r\n                type: DetailType.Date,\r\n                data: { date: exercise.exampleSolutionPublicationDate },\r\n            },\r\n        ],\r\n    };\r\n}\r\n"],
  "mappings": "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",
  "names": ["getExerciseGeneralDetailsSection", "exercise", "headline", "details", "course", "type", "DetailType", "Link", "title", "data", "text", "routerLink", "id", "exerciseGroup", "exam", "Text", "categories", "map", "category", "toUpperCase", "join", "getExerciseModeDetailSection", "difficulty", "mode", "teamAssignmentConfig", "minTeamSize", "maxTeamSize", "getExerciseProblemDetailSection", "formattedProblemStatement", "hasCompetencies", "competencyLinks", "length", "undefined", "Markdown", "innerHtml", "push", "competencyLink", "competency", "getExerciseGradingDefaultDetails", "includedInScore", "includedInOverallScore", "IncludedInOverallScore", "INCLUDED_AS_BONUS", "Boolean", "boolean", "INCLUDED_COMPLETELY", "Date", "date", "releaseDate", "startDate", "dueDate", "ExerciseType", "QUIZ", "assessmentDueDate", "maxPoints", "bonusPoints", "presentationScoreEnabled", "getExerciseGradingInstructionsCriteriaDetails", "formattedGradingInstructions", "gradingInstructions", "gradingCriteria", "GradingCriteria", "getExerciseMarkdownSolution", "formattedExampleSolution", "exampleSolutionPublicationDate"]
}
