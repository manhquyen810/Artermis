{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/exams/exam-exercise-import/exam-exercise-import.component.ts", "src/main/webapp/app/exam/manage/exams/exam-exercise-import/exam-exercise-import.component.html"],
  "sourcesContent": ["import { Component, OnInit, input } from '@angular/core';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { faCheckDouble, faFont } from '@fortawesome/free-solid-svg-icons';\r\nimport { Exercise, ExerciseType, getIcon } from 'app/entities/exercise.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { EXERCISE_TITLE_NAME_REGEX, SHORT_NAME_PATTERN } from 'app/shared/constants/input.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { DifficultyBadgeComponent } from 'app/exercises/shared/exercise-headers/difficulty-badge.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-exercise-import',\r\n    templateUrl: './exam-exercise-import.component.html',\r\n    styleUrls: ['./exam-exercise-import.component.scss'],\r\n    imports: [TranslateDirective, HelpIconComponent, FormsModule, NgClass, FaIconComponent, DifficultyBadgeComponent],\r\n})\r\nexport class ExamExerciseImportComponent implements OnInit {\r\n    exam = input.required<Exam>();\r\n    importInSameCourse = input(false);\r\n    // Map to determine, which exercises the user has selected and therefore should be imported alongside an exam\r\n    selectedExercises = new Map<ExerciseGroup, Set<Exercise>>();\r\n    // Map / Blocklist with the title and shortName of the programming exercises, that have been either rejected by the server\r\n    // or must be changed because the exam is imported into the same course\r\n    titleAndShortNameOfProgrammingExercises = new Map<number, string[]>();\r\n\r\n    // Map of programming exercise ids with duplicated titles and their corresponding title\r\n    exercisesWithDuplicatedTitles = new Map<number, string>();\r\n\r\n    // Map of programming exercise ids with duplicated short names and their corresponding short name\r\n    exercisesWithDuplicatedShortNames = new Map<number, string>();\r\n\r\n    // Expose enums to the template\r\n    exerciseType = ExerciseType;\r\n    // Map to determine, if an exercise group contains at least one programming exercise.\r\n    // I.E. the short name must be displayed in the corresponding table\r\n    containsProgrammingExercises = new Map<ExerciseGroup, boolean>();\r\n\r\n    // Patterns\r\n    // length of < 3 is also accepted in order to provide more accurate validation error messages\r\n    readonly SHORT_NAME_REGEX = RegExp('(^(?![\\\\s\\\\S]))|^[a-zA-Z][a-zA-Z0-9]*$|' + SHORT_NAME_PATTERN); // must start with a letter and cannot contain special characters\r\n\r\n    // Icons\r\n    faCheckDouble = faCheckDouble;\r\n    faFont = faFont;\r\n\r\n    getExerciseIcon = getIcon;\r\n\r\n    ngOnInit(): void {\r\n        this.initializeSelectedExercisesAndContainsProgrammingExercisesMaps();\r\n        // If the exam is imported into the same course, the title + shortName of Programming Exercises must be changed\r\n        if (this.importInSameCourse()) {\r\n            this.initializeTitleAndShortNameMap();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method to update the Maps after a rejected import due to invalid project key(s) of programming exercise(s)\r\n     * Called by the parent component\r\n     */\r\n    updateMapsAfterRejectedImportDueToInvalidProjectKey() {\r\n        this.titleAndShortNameOfProgrammingExercises.clear();\r\n        this.initializeTitleAndShortNameMap();\r\n        this.selectedExercises.clear();\r\n        this.containsProgrammingExercises.clear();\r\n        this.initializeSelectedExercisesAndContainsProgrammingExercisesMaps();\r\n    }\r\n\r\n    /**\r\n     * Method to update the Maps after a rejected import due to duplicated short name or title\r\n     * Called by the parent component\r\n     */\r\n    updateMapsAfterRejectedImportDueToDuplicatedShortNameOrTitle() {\r\n        this.titleAndShortNameOfProgrammingExercises.clear();\r\n        this.selectedExercises.clear();\r\n        this.containsProgrammingExercises.clear();\r\n        this.initializeSelectedExercisesAndContainsProgrammingExercisesMaps();\r\n    }\r\n\r\n    /**\r\n     * Method to initialize the Maps selectedExercises and containsProgrammingExercises\r\n     */\r\n    initializeSelectedExercisesAndContainsProgrammingExercisesMaps() {\r\n        // Initialize selectedExercises\r\n        this.exam().exerciseGroups?.forEach((exerciseGroup) => {\r\n            this.selectedExercises.set(exerciseGroup, new Set<Exercise>(exerciseGroup.exercises));\r\n        });\r\n        const duplicated = new Set<string>();\r\n        // Initialize containsProgrammingExercises\r\n        this.exam().exerciseGroups!.forEach((exerciseGroup) => {\r\n            const hasProgrammingExercises = !!exerciseGroup.exercises?.some((value) => value.type === ExerciseType.PROGRAMMING);\r\n            this.containsProgrammingExercises.set(exerciseGroup, hasProgrammingExercises);\r\n            // In case of a rejected import, we can delete programming exercises with a title from the Map / blocklist, as those were not rejected by the server.\r\n            exerciseGroup.exercises?.forEach((exercise) => {\r\n                if (exercise.type === ExerciseType.PROGRAMMING && exercise.title) {\r\n                    if (duplicated.has(exercise.title)) {\r\n                        this.titleAndShortNameOfProgrammingExercises.set(exercise.id!, [exercise.title!, '']);\r\n                        exercise.title = '';\r\n                    } else {\r\n                        duplicated.add(exercise.title);\r\n                        this.titleAndShortNameOfProgrammingExercises.delete(exercise.id!);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method to initialize the Map titleAndShortNameOfProgrammingExercises for the import\r\n     * Case rejected Import: In the selected exercises, all the (previously) selected exercises are stored. All programming exercises are added to the Map,\r\n     * which functions as a blocklist.\r\n     * Case import in same course: The selected exercises are already initialized and all programming exercises are added to the\r\n     * Map / Blocklist, as the title and shortName must be changed when importing into the same course.\r\n     */\r\n    initializeTitleAndShortNameMap() {\r\n        // The title and short name of the programming exercises are added to the map to display the rejected title and short name to the user\r\n        this.selectedExercises.forEach((exerciseSet) => {\r\n            exerciseSet.forEach((exercise) => {\r\n                if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                    this.titleAndShortNameOfProgrammingExercises.set(exercise.id!, [exercise.title!, exercise.shortName!]);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the selected exercise for an exercise group in the selectedExercises Map-\r\n     * The ExerciseGroup is the Key in the Map, the Exercises are stored as a Set as the value.\r\n     * @param exercise The selected exercise\r\n     * @param exerciseGroup The exercise group for which the user selected an exercise to import\r\n     */\r\n    onSelectExercise(exercise: Exercise, exerciseGroup: ExerciseGroup) {\r\n        if (this.selectedExercises!.get(exerciseGroup)!.has(exercise)) {\r\n            // Case Exercise is already selected -> delete\r\n            this.selectedExercises!.get(exerciseGroup)!.delete(exercise);\r\n            // The title or short name of the exercise is not considered to be duplicated. In case it was duplicated\r\n            // before, the set with duplicates has to be updated (checked again if any objects can be removed from the map).\r\n            if (this.exercisesWithDuplicatedTitles.delete(exercise.id!)) {\r\n                this.removeProgrammingExerciseFromDuplicates(exercise.title!, true);\r\n            }\r\n\r\n            if (this.exercisesWithDuplicatedShortNames.delete(exercise.id!)) {\r\n                this.removeProgrammingExerciseFromDuplicates(exercise.shortName!, false);\r\n            }\r\n        } else {\r\n            this.selectedExercises!.get(exerciseGroup)!.add(exercise);\r\n            if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                this.checkForDuplicatedTitlesOrShortNamesOfProgrammingExercise(exercise, exerciseGroup, true);\r\n                this.checkForDuplicatedTitlesOrShortNamesOfProgrammingExercise(exercise, exerciseGroup, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns if an exercise is (currently) selected for import.\r\n     * I.E. if the exercise is contained within the Map selectedExercises\r\n     * @param exercise the exercise for which should be determined, if it is selected by the user\r\n     * @param exerciseGroup the corresponding exercise group i.e. the key of the map\r\n     */\r\n    exerciseIsSelected(exercise: Exercise, exerciseGroup: ExerciseGroup): boolean {\r\n        return this.selectedExercises!.get(exerciseGroup)!.has(exercise);\r\n    }\r\n\r\n    /**\r\n     * Returns if an exercise Group contains exercises\r\n     * I.E. At least one exercise within the exercise Group is selected for import\r\n     * @param exerciseGroup the corresponding exercise group\r\n     */\r\n    exerciseGroupContainsExercises(exerciseGroup: ExerciseGroup): boolean {\r\n        return this.selectedExercises!.get(exerciseGroup)!.size > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns if an exercise Group contains at least one programming exercise\r\n     * I.E. the short name must be displayed in the selection menu\r\n     * @param exerciseGroup the corresponding exercise group\r\n     */\r\n    exerciseGroupContainsProgrammingExercises(exerciseGroup: ExerciseGroup): boolean {\r\n        return !!this.containsProgrammingExercises!.get(exerciseGroup);\r\n    }\r\n\r\n    /**\r\n     * Returns the placeholder title (i.e. the one rejected by the server) for the programming exercise\r\n     * @param exerciseId the corresponding exercise\r\n     */\r\n    getBlocklistTitleOfProgrammingExercise(exerciseId: number): string {\r\n        const title = this.titleAndShortNameOfProgrammingExercises.get(exerciseId)?.first();\r\n        return title ? title! : ``;\r\n    }\r\n\r\n    /**\r\n     * Returns the placeholder shortName (i.e. the one rejected by the server) for the programming exercise\r\n     * @param exerciseId the corresponding exercise\r\n     */\r\n    getBlocklistShortNameOfProgrammingExercise(exerciseId: number): string {\r\n        const shortName = this.titleAndShortNameOfProgrammingExercises.get(exerciseId)?.last();\r\n        return shortName ? shortName! : ``;\r\n    }\r\n\r\n    /**\r\n     * Helper method to map the Map<ExerciseGroup, Set<Exercises>> selectedExercises to an ExerciseGroup[] with Exercises[] each.\r\n     * Called once by the parent component when the user desires to import the exam / exercise groups\r\n     */\r\n    public mapSelectedExercisesToExerciseGroups(): ExerciseGroup[] {\r\n        const exerciseGroups: ExerciseGroup[] = [];\r\n        this.selectedExercises?.forEach((value, key) => {\r\n            if (value.size > 0) {\r\n                key.exercises = Array.from(value.values());\r\n                exerciseGroups.push(key);\r\n            }\r\n        });\r\n        return exerciseGroups;\r\n    }\r\n\r\n    /**\r\n     * Validates the Title for Programming Exercises based on the user's input\r\n     * @param exercise the exercise to be checked\r\n     */\r\n    validateTitleOfProgrammingExercise(exercise: Exercise): boolean {\r\n        return (\r\n            !!exercise.title?.length &&\r\n            EXERCISE_TITLE_NAME_REGEX.test(exercise.title!) &&\r\n            !this.exercisesWithDuplicatedTitles.has(exercise.id!) &&\r\n            (exercise.title !== this.getBlocklistTitleOfProgrammingExercise(exercise.id!) || this.getBlocklistShortNameOfProgrammingExercise(exercise.id!) === '')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validates the Title for Programming Exercises based on the user's input\r\n     * @param exercise the exercise to be checked\r\n     */\r\n    validateShortNameOfProgrammingExercise(exercise: Exercise): boolean {\r\n        return (\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            exercise.shortName?.length! > 2 &&\r\n            this.SHORT_NAME_REGEX.test(exercise.shortName!) &&\r\n            !this.exercisesWithDuplicatedShortNames.has(exercise.id!) &&\r\n            exercise.shortName !== this.getBlocklistShortNameOfProgrammingExercise(exercise.id!)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * checks if there are any selected programming exercises with the same title or short name as the passed exercise\r\n     * @param exercise      exercise we want to use to check for duplications\r\n     * @param exerciseGroup exercise group of the exercise\r\n     * @param checkForTitle true if the title should be checked, otherwise the short name is checked\r\n     */\r\n    checkForDuplicatedTitlesOrShortNamesOfProgrammingExercise(exercise: Exercise, exerciseGroup: ExerciseGroup, checkForTitle: boolean) {\r\n        if (!this.exerciseIsSelected(exercise, exerciseGroup)) {\r\n            return;\r\n        }\r\n\r\n        const duplicatesToCheck = checkForTitle ? this.exercisesWithDuplicatedTitles : this.exercisesWithDuplicatedShortNames;\r\n        let hasDuplicate = false;\r\n        this.selectedExercises.forEach((exerciseGroup) => {\r\n            exerciseGroup.forEach((ex) => {\r\n                if (ex.type === ExerciseType.PROGRAMMING && ex !== exercise) {\r\n                    if ((checkForTitle && ex.title === exercise.title) || (!checkForTitle && ex.shortName === exercise.shortName)) {\r\n                        hasDuplicate = true;\r\n                        duplicatesToCheck.set(ex.id!, checkForTitle ? exercise.title! : exercise.shortName!);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        // check if the exercise was a duplicate before\r\n        const titleOrShortName = duplicatesToCheck.get(exercise.id!);\r\n        if (duplicatesToCheck.delete(exercise.id!)) {\r\n            this.removeProgrammingExerciseFromDuplicates(titleOrShortName!, checkForTitle);\r\n        }\r\n\r\n        if (hasDuplicate) {\r\n            duplicatesToCheck.set(exercise.id!, checkForTitle ? exercise.title! : exercise.shortName!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * After a duplicate programming exercise's title / short name of programming exercise has been edited or a programming exercise has been unselected,\r\n     * other duplicates need to be checked if they can be removed from the map. In case there is only one exercise with the same title / short name\r\n     * it is no longer considered a duplicate and is removed\r\n     * @param titleOrShortName title / short name of the exercise that was a duplicate before\r\n     * @param checkForTitle   true if the exercise title duplication should be checked, otherwise short name duplication is checked\r\n     */\r\n    removeProgrammingExerciseFromDuplicates(titleOrShortName: string, checkForTitle: boolean) {\r\n        const setToCheck = checkForTitle ? this.exercisesWithDuplicatedTitles : this.exercisesWithDuplicatedShortNames;\r\n        const filteredKeys = Array.from(setToCheck.keys()).filter((key) => setToCheck.get(key) === titleOrShortName);\r\n\r\n        if (filteredKeys.length <= 1) {\r\n            filteredKeys.forEach((key) => setToCheck.delete(key));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method to iterate over all exercise groups and exercises to validate, if the exerciseGroup.title & exercise.title & exercise.shortName are correctly set\r\n     */\r\n    public validateUserInput(): boolean {\r\n        let validConfiguration = true;\r\n        this.selectedExercises?.forEach((value, key) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            if (!(key.title?.length! > 0)) {\r\n                validConfiguration = false;\r\n            }\r\n            if (value.size > 0) {\r\n                value.forEach((exercise) => {\r\n                    if (!validConfiguration) {\r\n                        return false;\r\n                    }\r\n                    if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                        validConfiguration = this.validateTitleOfProgrammingExercise(exercise) && this.validateShortNameOfProgrammingExercise(exercise);\r\n                    } else {\r\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n                        validConfiguration = exercise.title?.length! > 0;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return validConfiguration;\r\n    }\r\n}\r\n", "@if (containsProgrammingExercises.size !== 0) {\r\n    <div class=\"alert alert-info\">\r\n        <span jhiTranslate=\"artemisApp.examManagement.exerciseGroup.importModal.infoProgrammingExercises\"></span>\r\n    </div>\r\n}\r\n<table class=\"table table-striped\">\r\n    <thead class=\"thead-dark align-center\">\r\n        <tr>\r\n            <th class=\"w-25\">\r\n                <label jhiTranslate=\"artemisApp.examScores.titleExerciseGroupColumn\"></label>\r\n                <jhi-help-icon text=\"artemisApp.examManagement.exerciseGroup.importModal.exerciseGroupTooltip\" />\r\n            </th>\r\n            <th class=\"w-75\" jhiTranslate=\"artemisApp.examScores.titleExerciseColumn\"></th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <!-- Exercise Group as rows -->\r\n        @for (exerciseGroup of exam().exerciseGroups; track exerciseGroup.id) {\r\n            <tr [class.exerciseGroupNotSelected]=\"!exerciseGroupContainsExercises(exerciseGroup)\">\r\n                <td>\r\n                    <!-- Display general exercise group settings (name, mandatory) to the left -->\r\n                    <table class=\"table table-hover table-striped\">\r\n                        <tbody>\r\n                            <tr class=\"w-25\">\r\n                                <td class=\"justify-content-center\">\r\n                                    <label\r\n                                        class=\"form-check-label\"\r\n                                        for=\"'exerciseGroup-' + exerciseGroup.id + '-title'\"\r\n                                        jhiTranslate=\"artemisApp.examManagement.exerciseGroup.title\"\r\n                                        >Title</label\r\n                                    >\r\n                                </td>\r\n                                <td class=\"w-75\">\r\n                                    <input\r\n                                        [ngClass]=\"{ 'form-control': true, 'is-invalid': exerciseGroup?.title?.length! === 0 }\"\r\n                                        type=\"text\"\r\n                                        id=\"exerciseGroup-{{ exerciseGroup.id }}-title\"\r\n                                        name=\"exerciseGroup-{{ exerciseGroup.id }}-title\"\r\n                                        [(ngModel)]=\"exerciseGroup.title\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td class=\"justify-content-center\">\r\n                                    <label\r\n                                        class=\"form-check-label\"\r\n                                        for=\"exerciseGroup-{{ exerciseGroup.id }}-mandatory'\"\r\n                                        jhiTranslate=\"artemisApp.examManagement.exerciseGroup.mandatory\"\r\n                                    ></label>\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                        class=\"form-check-input\"\r\n                                        type=\"checkbox\"\r\n                                        [id]=\"'exerciseGroup-' + exerciseGroup.id + '-mandatory'\"\r\n                                        [name]=\"'exerciseGroup-' + exerciseGroup.id + '-mandatory'\"\r\n                                        [(ngModel)]=\"exerciseGroup.isMandatory\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </td>\r\n                <td>\r\n                    <!-- Display a List of all Exercises to the right -->\r\n                    <table class=\"table table-hover table-striped text-center\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th class=\"smallbox\" jhiTranslate=\"artemisApp.examManagement.exerciseGroup.importModal.selected\"></th>\r\n                                <th class=\"smallbox\">#</th>\r\n                                <th class=\"smallbox\" jhiTranslate=\"artemisApp.exercise.type\"></th>\r\n                                <th [class]=\"exerciseGroupContainsProgrammingExercises(exerciseGroup) ? 'mediumbox' : 'largebox'\">\r\n                                    <label jhiTranslate=\"artemisApp.exercise.title\"></label>\r\n                                    <jhi-help-icon text=\"artemisApp.examManagement.exerciseGroup.importModal.exerciseTitleTooltip\" />\r\n                                </th>\r\n                                @if (exerciseGroupContainsProgrammingExercises(exerciseGroup)) {\r\n                                    <th class=\"mediumbox\">\r\n                                        <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.shortName\"></label>\r\n                                        <jhi-help-icon text=\"artemisApp.examManagement.exerciseGroup.importModal.shortNameTooltip\" />\r\n                                    </th>\r\n                                }\r\n                                <th class=\"smallbox\" jhiTranslate=\"artemisApp.exercise.difficulty\"></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            @for (exercise of exerciseGroup.exercises; track exercise.id) {\r\n                                <tr [id]=\"'exercise-' + exercise.id\">\r\n                                    <td>\r\n                                        <h4 class=\"form-check d-flex justify-content-center\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                class=\"form-check-input\"\r\n                                                [checked]=\"exerciseIsSelected(exercise, exerciseGroup)\"\r\n                                                (click)=\"onSelectExercise(exercise, exerciseGroup)\"\r\n                                            />\r\n                                        </h4>\r\n                                    </td>\r\n                                    <td>{{ exercise.id }}</td>\r\n                                    <td>\r\n                                        <fa-icon size=\"2x\" [icon]=\"getExerciseIcon(exercise.type)\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        @if (exercise.type !== exerciseType.PROGRAMMING) {\r\n                                            <input\r\n                                                [ngClass]=\"{ 'form-control': true, 'is-invalid': exercise?.title?.length! === 0 }\"\r\n                                                type=\"text\"\r\n                                                [id]=\"'exercise-' + exercise.id + '-title'\"\r\n                                                [name]=\"'exercise-' + exercise.id + '-title'\"\r\n                                                [(ngModel)]=\"exercise.title\"\r\n                                            />\r\n                                        }\r\n                                        @if (exercise.type === exerciseType.PROGRAMMING) {\r\n                                            <input\r\n                                                [class]=\"{ 'form-control': true, 'is-invalid': !validateTitleOfProgrammingExercise(exercise) }\"\r\n                                                type=\"text\"\r\n                                                [id]=\"'exercise-' + exercise.id + '-title'\"\r\n                                                [name]=\"'exercise-' + exercise.id + '-title'\"\r\n                                                [placeholder]=\"getBlocklistTitleOfProgrammingExercise(exercise.id!)\"\r\n                                                [(ngModel)]=\"exercise.title\"\r\n                                                (change)=\"checkForDuplicatedTitlesOrShortNamesOfProgrammingExercise(exercise, exerciseGroup, true)\"\r\n                                            />\r\n                                        }\r\n                                    </td>\r\n                                    @if (exercise.type! === exerciseType.PROGRAMMING) {\r\n                                        <td>\r\n                                            <input\r\n                                                [ngClass]=\"{ 'form-control': true, 'is-invalid': !validateShortNameOfProgrammingExercise(exercise) }\"\r\n                                                type=\"text\"\r\n                                                [id]=\"'programming-exercise-' + exercise.id + '-shortName'\"\r\n                                                [name]=\"'programming-exercise-' + exercise.id + '-shortName'\"\r\n                                                [placeholder]=\"getBlocklistShortNameOfProgrammingExercise(exercise.id!)\"\r\n                                                [(ngModel)]=\"exercise.shortName\"\r\n                                                (change)=\"checkForDuplicatedTitlesOrShortNamesOfProgrammingExercise(exercise, exerciseGroup, false)\"\r\n                                            />\r\n                                        </td>\r\n                                    }\r\n                                    <td>\r\n                                        <jhi-difficulty-badge class=\"me-1\" [exercise]=\"exercise\" [showNoLevel]=\"false\" />\r\n                                    </td>\r\n                                </tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n</table>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r6", "exercise_r4", "\u0275\u0275nextContext", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "title", "\u0275\u0275resetView", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "length", "id", "\u0275\u0275twoWayProperty", "_r7", "\u0275\u0275listener", "exerciseGroup_r2", "ctx_r4", "checkForDuplicatedTitlesOrShortNamesOfProgrammingExercise", "\u0275\u0275classMap", "validateTitleOfProgrammingExercise", "getBlocklistTitleOfProgrammingExercise", "_r8", "shortName", "validateShortNameOfProgrammingExercise", "getBlocklistShortNameOfProgrammingExercise", "_r3", "onSelectExercise", "\u0275\u0275template", "ExamExerciseImportComponent_For_22_For_71_Conditional_21_Template", "ExamExerciseImportComponent_For_22_For_71_Conditional_22_Template", "ExamExerciseImportComponent_For_22_For_71_Conditional_24_Template", "exerciseIsSelected", "\u0275\u0275textInterpolate", "getExerciseIcon", "type", "\u0275\u0275conditional", "exerciseType", "PROGRAMMING", "_r1", "isMandatory", "ExamExerciseImportComponent_For_22_Conditional_63_Template", "\u0275\u0275repeaterCreate", "ExamExerciseImportComponent_For_22_For_71_Template", "_forTrack0", "\u0275\u0275classProp", "exerciseGroupContainsExercises", "\u0275\u0275propertyInterpolate1", "exerciseGroupContainsProgrammingExercises", "\u0275\u0275repeater", "exercises", "ExamExerciseImportComponent", "exam", "input", "required", "importInSameCourse", "selectedExercises", "Map", "titleAndShortNameOfProgrammingExercises", "exercisesWithDuplicatedTitles", "exercisesWithDuplicatedShortNames", "ExerciseType", "containsProgrammingExercises", "SHORT_NAME_REGEX", "RegExp", "SHORT_NAME_PATTERN", "faCheckDouble", "faFont", "getIcon", "ngOnInit", "initializeSelectedExercisesAndContainsProgrammingExercisesMaps", "initializeTitleAndShortNameMap", "updateMapsAfterRejectedImportDueToInvalidProjectKey", "clear", "updateMapsAfterRejectedImportDueToDuplicatedShortNameOrTitle", "exerciseGroups", "forEach", "exerciseGroup", "set", "Set", "duplicated", "hasProgrammingExercises", "some", "value", "exercise", "has", "add", "delete", "exerciseSet", "get", "removeProgrammingExerciseFromDuplicates", "size", "exerciseId", "first", "last", "mapSelectedExercisesToExerciseGroups", "key", "Array", "from", "values", "push", "EXERCISE_TITLE_NAME_REGEX", "test", "checkForTitle", "duplicatesToCheck", "hasDuplicate", "ex", "titleOrShortName", "setToCheck", "filteredKeys", "keys", "filter", "validateUserInput", "validConfiguration", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "ExamExerciseImportComponent_Conditional_0_Template", "ExamExerciseImportComponent_For_22_Template", "TranslateDirective", "HelpIconComponent", "FormsModule", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "NgClass", "FaIconComponent", "DifficultyBadgeComponent", "styles"]
}
