{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/taxonomy-select/taxonomy-select.component.ts", "src/main/webapp/app/course/competencies/taxonomy-select/taxonomy-select.component.html"],
  "sourcesContent": ["import { Component, Input } from '@angular/core';\r\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CompetencyTaxonomy } from 'app/entities/competency.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { KeyValuePipe } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-taxonomy-select',\r\n    templateUrl: './taxonomy-select.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective, KeyValuePipe],\r\n})\r\nexport class TaxonomySelectComponent {\r\n    /**\r\n     * id given of the select, to be referenced by labels (for)\r\n     */\r\n    @Input() selectId = '';\r\n\r\n    /**\r\n     * Form control for the selected taxonomy\r\n     */\r\n    @Input({ required: true }) form: FormControl;\r\n\r\n    /**\r\n     * increasing indentation for the select options\r\n     * @protected\r\n     */\r\n    protected readonly indent = Object.keys(CompetencyTaxonomy).map((_, i) => '\\xA0'.repeat(i));\r\n\r\n    protected readonly competencyTaxonomy = CompetencyTaxonomy;\r\n\r\n    /**\r\n     * Keeps order of elements as-is in the keyvalue pipe\r\n     */\r\n    keepOrder = () => {\r\n        return 0;\r\n    };\r\n}\r\n", "<select [formControl]=\"form\" class=\"form-select\" id=\"{{ selectId }}\">\r\n    <option [ngValue]=\"undefined\"></option>\r\n    @for (taxonomy of competencyTaxonomy | keyvalue: keepOrder; track taxonomy; let i = $index) {\r\n        <option [ngValue]=\"taxonomy.key\">\r\n            {{ indent[i] }}&boxur;\r\n            <span [jhiTranslate]=\"'artemisApp.courseCompetency.taxonomies.' + taxonomy.value\"></span>\r\n            (<span [jhiTranslate]=\"'artemisApp.courseCompetency.keywords.' + taxonomy.value\"></span>)\r\n        </option>\r\n    }\r\n</select>\r\n"],
  "mappings": "4XCGQA,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EACID,EAAA,CAAA,EACAE,EAAA,EAAA,OAAA,CAAA,EACAF,EAAA,EAAA;cAAA,EAACE,EAAA,EAAA,OAAA,CAAA,EAAuFF,EAAA,EAAA;SAAA,EAC5FG,EAAA,EACJH,EAAA,EAAA;KAAA,2CALYI,EAAA,EAAAC,EAAA,UAAAC,EAAAC,GAAA,EACJH,EAAA,EAAAI,EAAA;cAAAC,EAAAC,OAAAC,CAAA,EAAA;aAAA,EACMP,EAAA,EAAAC,EAAA,eAAA,0CAAAC,EAAAM,KAAA,EACCR,EAAA,CAAA,EAAAC,EAAA,eAAA,wCAAAC,EAAAM,KAAA,GDKnB,IAAaC,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CAIvBC,SAAW,GAKOC,KAMRL,OAASM,OAAOC,KAAKC,CAAkB,EAAEC,IAAI,CAACC,EAAGC,IAAM,OAAOC,OAAOD,CAAC,CAAC,EAEvEE,mBAAqBL,EAKxCM,UAAYA,IACD,6CAvBFX,EAAuB,2BAAvBA,EAAuBY,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,OAAA,CAAAZ,SAAA,WAAAC,KAAA,MAAA,EAAAY,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,cAAA,EAAA,cAAA,IAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICXpC9B,EAAA,EAAA,SAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,SAAA,CAAA,EACAF,EAAA,EAAA;KAAA,EAAAiC,EAAA,EAAAC,EAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,kBAOJhC,EAAA,EACAH,EAAA,EAAA;CAAA,SAViDoC,EAAA,KAAAJ,EAAAlB,QAAA,EAAzCT,EAAA,cAAA2B,EAAAjB,IAAA,EACIX,EAAA,CAAA,EAAAC,EAAA,UAAAgC,MAAA,EACRjC,EAAA,CAAA,EAAAkC,EAAAC,EAAA,EAAA,EAAAP,EAAAT,mBAAAS,EAAAR,SAAA,CAAA,kBDOUgB,EAAWC,EAAAC,EAAAC,EAAAC,EAAEC,EAAmBC,EAAEC,EAAoBC,CAAY,EAAAC,cAAA,CAAA,CAAA,SAEnEpC,CAAuB,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "taxonomy_r1", "key", "\u0275\u0275textInterpolate1", "ctx_r2", "indent", "\u0275$index_7_r2", "value", "TaxonomySelectComponent", "selectId", "form", "Object", "keys", "CompetencyTaxonomy", "map", "_", "i", "repeat", "competencyTaxonomy", "keepOrder", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "TaxonomySelectComponent_For_5_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275propertyInterpolate", "undefined", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "SelectControlValueAccessor", "NgControlStatus", "ReactiveFormsModule", "FormControlDirective", "TranslateDirective", "KeyValuePipe", "encapsulation"]
}
