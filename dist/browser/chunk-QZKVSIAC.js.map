{
  "version": 3,
  "sources": ["src/main/webapp/app/iris/settings/shared/iris-settings.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { IrisCourseSettings, IrisExerciseSettings, IrisGlobalSettings } from 'app/entities/iris/settings/iris-settings.model';\r\nimport { IrisVariant } from 'app/entities/iris/settings/iris-variant';\r\nimport { IrisSubSettingsType } from 'app/entities/iris/settings/iris-sub-settings.model';\r\n\r\n/**\r\n * Service for calling the Iris settings endpoints on the server\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class IrisSettingsService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/iris';\r\n\r\n    /**\r\n     * Get the global Iris settings\r\n     */\r\n    getGlobalSettings(): Observable<IrisGlobalSettings | undefined> {\r\n        return this.http\r\n            .get<IrisGlobalSettings>(`${this.resourceUrl}/global-iris-settings`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<IrisGlobalSettings>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Get the uncombined Iris settings for a course\r\n     * @param courseId the id of the course\r\n     */\r\n    getUncombinedCourseSettings(courseId: number): Observable<IrisCourseSettings | undefined> {\r\n        return this.http\r\n            .get<IrisCourseSettings>(`${this.resourceUrl}/courses/${courseId}/raw-iris-settings`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<IrisCourseSettings>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Get the combined Iris settings for a course\r\n     * @param courseId the id of the course\r\n     */\r\n    getCombinedCourseSettings(courseId: number): Observable<IrisCourseSettings | undefined> {\r\n        return this.http\r\n            .get<IrisCourseSettings>(`${this.resourceUrl}/courses/${courseId}/iris-settings`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<IrisCourseSettings>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Get the uncombined Iris settings for an exercise\r\n     * @param exerciseId the id of the exercise\r\n     */\r\n    getUncombinedExerciseSettings(exerciseId: number): Observable<IrisExerciseSettings | undefined> {\r\n        return this.http\r\n            .get<IrisExerciseSettings>(`${this.resourceUrl}/exercises/${exerciseId}/raw-iris-settings`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<IrisExerciseSettings>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Get the combined Iris settings for an exercise\r\n     * @param exerciseId the id of the exercise\r\n     */\r\n    getCombinedExerciseSettings(exerciseId: number): Observable<IrisExerciseSettings | undefined> {\r\n        return this.http\r\n            .get<IrisExerciseSettings>(`${this.resourceUrl}/exercises/${exerciseId}/iris-settings`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<IrisExerciseSettings>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Update the global Iris settings\r\n     * @param settings the settings to set\r\n     */\r\n    setGlobalSettings(settings: IrisGlobalSettings): Observable<HttpResponse<IrisGlobalSettings>> {\r\n        return this.http.put<IrisGlobalSettings>(`${this.resourceUrl}/admin/global-iris-settings`, settings, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update the Iris settings for a course\r\n     * @param courseId the id of the course\r\n     * @param settings the settings to set\r\n     */\r\n    setCourseSettings(courseId: number, settings: IrisCourseSettings): Observable<HttpResponse<IrisCourseSettings>> {\r\n        return this.http.put<IrisCourseSettings>(`${this.resourceUrl}/courses/${courseId}/raw-iris-settings`, settings, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update the Iris settings for an exercise\r\n     * @param exerciseId the id of the exercise\r\n     * @param settings the settings to set\r\n     */\r\n    setExerciseSettings(exerciseId: number, settings: IrisExerciseSettings): Observable<HttpResponse<IrisExerciseSettings>> {\r\n        return this.http.put<IrisExerciseSettings>(`${this.resourceUrl}/exercises/${exerciseId}/raw-iris-settings`, settings, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the available variants for a feature\r\n     */\r\n    getVariantsForFeature(feature: IrisSubSettingsType): Observable<IrisVariant[] | undefined> {\r\n        return this.http.get<IrisVariant[]>(`${this.resourceUrl}/variants/${feature}`, { observe: 'response' }).pipe(map((res: HttpResponse<IrisVariant[]>) => res.body ?? []));\r\n    }\r\n}\r\n"],
  "mappings": "gGAYA,IAAaA,GAAmB,IAAA,CAA1B,MAAOA,CAAmB,CACpBC,KAAOC,EAAOC,CAAU,EAEzBC,YAAc,WAKrBC,mBAAiB,CACb,OAAO,KAAKJ,KACPK,IAAwB,GAAG,KAAKF,WAAW,wBAAyB,CAAEG,QAAS,UAAU,CAAE,EAC3FC,KAAKC,EAAKC,GAA0CA,EAAIC,MAAQC,MAAS,CAAC,CACnF,CAMAC,4BAA4BC,EAAgB,CACxC,OAAO,KAAKb,KACPK,IAAwB,GAAG,KAAKF,WAAW,YAAYU,CAAQ,qBAAsB,CAAEP,QAAS,UAAU,CAAE,EAC5GC,KAAKC,EAAKC,GAA0CA,EAAIC,MAAQC,MAAS,CAAC,CACnF,CAMAG,0BAA0BD,EAAgB,CACtC,OAAO,KAAKb,KACPK,IAAwB,GAAG,KAAKF,WAAW,YAAYU,CAAQ,iBAAkB,CAAEP,QAAS,UAAU,CAAE,EACxGC,KAAKC,EAAKC,GAA0CA,EAAIC,MAAQC,MAAS,CAAC,CACnF,CAMAI,8BAA8BC,EAAkB,CAC5C,OAAO,KAAKhB,KACPK,IAA0B,GAAG,KAAKF,WAAW,cAAca,CAAU,qBAAsB,CAAEV,QAAS,UAAU,CAAE,EAClHC,KAAKC,EAAKC,GAA4CA,EAAIC,MAAQC,MAAS,CAAC,CACrF,CAMAM,4BAA4BD,EAAkB,CAC1C,OAAO,KAAKhB,KACPK,IAA0B,GAAG,KAAKF,WAAW,cAAca,CAAU,iBAAkB,CAAEV,QAAS,UAAU,CAAE,EAC9GC,KAAKC,EAAKC,GAA4CA,EAAIC,MAAQC,MAAS,CAAC,CACrF,CAMAO,kBAAkBC,EAA4B,CAC1C,OAAO,KAAKnB,KAAKoB,IAAwB,GAAG,KAAKjB,WAAW,8BAA+BgB,EAAU,CAAEb,QAAS,UAAU,CAAE,CAChI,CAOAe,kBAAkBR,EAAkBM,EAA4B,CAC5D,OAAO,KAAKnB,KAAKoB,IAAwB,GAAG,KAAKjB,WAAW,YAAYU,CAAQ,qBAAsBM,EAAU,CAAEb,QAAS,UAAU,CAAE,CAC3I,CAOAgB,oBAAoBN,EAAoBG,EAA8B,CAClE,OAAO,KAAKnB,KAAKoB,IAA0B,GAAG,KAAKjB,WAAW,cAAca,CAAU,qBAAsBG,EAAU,CAAEb,QAAS,UAAU,CAAE,CACjJ,CAKAiB,sBAAsBC,EAA4B,CAC9C,OAAO,KAAKxB,KAAKK,IAAmB,GAAG,KAAKF,WAAW,aAAaqB,CAAO,GAAI,CAAElB,QAAS,UAAU,CAAE,EAAEC,KAAKC,EAAKC,GAAqCA,EAAIC,MAAQ,CAAA,CAAE,CAAC,CAC1K,4CArFSX,EAAmB,6BAAnBA,EAAmB0B,QAAnB1B,EAAmB2B,UAAAC,WADN,MAAM,CAAA,SACnB5B,CAAmB,GAAA",
  "names": ["IrisSettingsService", "http", "inject", "HttpClient", "resourceUrl", "getGlobalSettings", "get", "observe", "pipe", "map", "res", "body", "undefined", "getUncombinedCourseSettings", "courseId", "getCombinedCourseSettings", "getUncombinedExerciseSettings", "exerciseId", "getCombinedExerciseSettings", "setGlobalSettings", "settings", "put", "setCourseSettings", "setExerciseSettings", "getVariantsForFeature", "feature", "factory", "\u0275fac", "providedIn"]
}
