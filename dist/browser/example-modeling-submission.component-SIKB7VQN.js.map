{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/manage/example-modeling/example-modeling-submission.component.ts", "src/main/webapp/app/exercises/modeling/manage/example-modeling/example-modeling-submission.component.html"],
  "sourcesContent": ["import { Component, OnInit, ViewChild, computed, effect, inject, signal, untracked } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ExampleSubmissionService } from 'app/exercises/shared/example-submission/example-submission.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { TutorParticipationService } from 'app/exercises/shared/dashboards/tutor/tutor-participation.service';\r\nimport { UMLModel } from '@ls1intum/apollon';\r\nimport { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\r\nimport { ExampleSubmission, ExampleSubmissionMode } from 'app/entities/example-submission.model';\r\nimport { Feedback, FeedbackCorrectionError, FeedbackType } from 'app/entities/feedback.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { ModelingAssessmentService } from 'app/exercises/modeling/assess/modeling-assessment.service';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ModelingAssessmentComponent } from 'app/exercises/modeling/assess/modeling-assessment.component';\r\nimport { UnreferencedFeedbackComponent } from 'app/exercises/shared/unreferenced-feedback/unreferenced-feedback.component';\r\nimport { catchError, concatMap, map, tap } from 'rxjs/operators';\r\nimport { getLatestSubmissionResult, setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { getPositiveAndCappedTotalScore, getTotalMaxPoints } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { ExampleSubmissionAssessCommand, FeedbackMarker } from 'app/exercises/shared/example-submission/example-submission-assess-command';\r\nimport { getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { faChalkboardTeacher, faCheck, faCircle, faCodeBranch, faExclamation, faExclamationTriangle, faInfoCircle, faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { forkJoin } from 'rxjs';\r\nimport { filterInvalidFeedback } from 'app/exercises/modeling/assess/modeling-assessment.util';\r\nimport { Theme, ThemeService } from 'app/core/theme/theme.service';\r\nimport { scrollToTopOfPage } from 'app/shared/util/utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { CollapsableAssessmentInstructionsComponent } from 'app/assessment/assessment-instructions/collapsable-assessment-instructions/collapsable-assessment-instructions.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-example-modeling-submission',\r\n    templateUrl: './example-modeling-submission.component.html',\r\n    styleUrls: ['./example-modeling-submission.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        HelpIconComponent,\r\n        FormsModule,\r\n        FaIconComponent,\r\n        ModelingEditorComponent,\r\n        ModelingAssessmentComponent,\r\n        UnreferencedFeedbackComponent,\r\n        CollapsableAssessmentInstructionsComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ExampleModelingSubmissionComponent implements OnInit, FeedbackMarker {\r\n    private exerciseService = inject(ExerciseService);\r\n    private exampleSubmissionService = inject(ExampleSubmissionService);\r\n    private modelingAssessmentService = inject(ModelingAssessmentService);\r\n    private tutorParticipationService = inject(TutorParticipationService);\r\n    private alertService = inject(AlertService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n\r\n    @ViewChild(ModelingEditorComponent, { static: false })\r\n    modelingEditor: ModelingEditorComponent;\r\n    @ViewChild(ModelingAssessmentComponent, { static: false })\r\n    assessmentEditor: ModelingAssessmentComponent;\r\n\r\n    private readonly themeService = inject(ThemeService);\r\n\r\n    isNewSubmission: boolean;\r\n    assessmentMode = false;\r\n    exerciseId: number;\r\n    exampleSubmission: ExampleSubmission;\r\n    modelingSubmission: ModelingSubmission;\r\n    umlModel: UMLModel;\r\n    explanationText: string;\r\n    feedbackChanged = false;\r\n    assessmentsAreValid = false;\r\n    result: Result;\r\n    totalScore: number;\r\n    invalidError?: string;\r\n    exercise: ModelingExercise;\r\n    course?: Course;\r\n    readOnly: boolean;\r\n    toComplete: boolean;\r\n    assessmentExplanation: string;\r\n    isExamMode: boolean;\r\n    selectedMode: ExampleSubmissionMode;\r\n    ExampleSubmissionMode = ExampleSubmissionMode;\r\n\r\n    legend = [\r\n        {\r\n            text: 'artemisApp.exampleSubmission.legend.positiveScore',\r\n            icon: faCheck as IconProp,\r\n            color: 'green',\r\n        },\r\n        {\r\n            text: 'artemisApp.exampleSubmission.legend.negativeScore',\r\n            icon: faTimes as IconProp,\r\n            color: 'red',\r\n        },\r\n        {\r\n            text: 'artemisApp.exampleSubmission.legend.feedbackWithoutScore',\r\n            icon: faExclamation as IconProp,\r\n            color: 'blue',\r\n        },\r\n        {\r\n            text: 'artemisApp.exampleSubmission.legend.incorrectAssessment',\r\n            icon: faExclamationTriangle as IconProp,\r\n            color: 'yellow',\r\n        },\r\n    ];\r\n\r\n    private exampleSubmissionId: number;\r\n\r\n    referencedFeedback: Feedback[] = [];\r\n    unreferencedFeedback: Feedback[] = [];\r\n\r\n    get assessments(): Feedback[] {\r\n        return [...this.referencedFeedback, ...this.unreferencedFeedback];\r\n    }\r\n\r\n    highlightedElements = signal<Map<string, string>>(new Map<string, string>());\r\n    referencedExampleFeedback: Feedback[] = [];\r\n    highlightColor = computed(() => (this.themeService.userPreference() === Theme.DARK ? 'darkblue' : 'lightblue'));\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faCircle = faCircle;\r\n    faInfoCircle = faInfoCircle;\r\n    faCodeBranch = faCodeBranch;\r\n    faChalkboardTeacher = faChalkboardTeacher;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            // Update highlighted elements as soon as current theme changes\r\n            const highlightColor = this.highlightColor();\r\n            untracked(() => {\r\n                const updatedHighlights = new Map<string, string>();\r\n                this.highlightedElements().forEach((_, key) => {\r\n                    updatedHighlights.set(key, highlightColor);\r\n                });\r\n                this.highlightedElements.set(updatedHighlights);\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.exerciseId = Number(this.route.snapshot.paramMap.get('exerciseId'));\r\n        const exampleSubmissionId = this.route.snapshot.paramMap.get('exampleSubmissionId');\r\n        this.readOnly = !!this.route.snapshot.queryParamMap.get('readOnly');\r\n        this.toComplete = !!this.route.snapshot.queryParamMap.get('toComplete');\r\n\r\n        if (exampleSubmissionId === 'new') {\r\n            this.isNewSubmission = true;\r\n            this.exampleSubmissionId = -1;\r\n        } else {\r\n            // (+) converts string 'id' to a number\r\n            this.exampleSubmissionId = +exampleSubmissionId!;\r\n        }\r\n\r\n        // if one of the flags is set, we navigated here from the assessment dashboard which means that we are not\r\n        // interested in the modeling editor, i.e. we only want to use the assessment mode\r\n        if (this.readOnly || this.toComplete) {\r\n            this.assessmentMode = true;\r\n        }\r\n        this.loadAll();\r\n    }\r\n\r\n    private loadAll(): void {\r\n        let exerciseSource$ = this.exerciseService.find(this.exerciseId);\r\n\r\n        if (this.isNewSubmission) {\r\n            this.exampleSubmission = new ExampleSubmission();\r\n            // We don't need to load anything else\r\n        } else {\r\n            const exampleSubmissionSource$ = this.exampleSubmissionService.get(this.exampleSubmissionId).pipe(\r\n                tap((exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n                    this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                    if (this.exampleSubmission.submission) {\r\n                        this.modelingSubmission = this.exampleSubmission.submission as ModelingSubmission;\r\n                        if (this.modelingSubmission.model) {\r\n                            this.umlModel = JSON.parse(this.modelingSubmission.model);\r\n                        }\r\n                        // Updates the explanation text with example modeling submission's explanation\r\n                        this.explanationText = this.modelingSubmission.explanationText ?? '';\r\n                    }\r\n\r\n                    if (this.exampleSubmission.usedForTutorial) {\r\n                        this.selectedMode = ExampleSubmissionMode.ASSESS_CORRECTLY;\r\n                    } else {\r\n                        this.selectedMode = ExampleSubmissionMode.READ_AND_CONFIRM;\r\n                    }\r\n\r\n                    this.assessmentExplanation = this.exampleSubmission.assessmentExplanation!;\r\n\r\n                    if (this.toComplete) {\r\n                        this.modelingAssessmentService.getExampleAssessment(this.exerciseId, this.modelingSubmission.id!).subscribe((result) => {\r\n                            this.updateExampleAssessmentSolution(result);\r\n                        });\r\n                    } else {\r\n                        this.modelingAssessmentService.getExampleAssessment(this.exerciseId, this.modelingSubmission.id!).subscribe((result) => {\r\n                            this.updateAssessment(result);\r\n                            this.checkScoreBoundaries();\r\n                        });\r\n                    }\r\n                }),\r\n            );\r\n\r\n            // exampleSubmissionSource$ should set the umlModel before exerciseSource$ sets the exercise in order\r\n            // to prevent ModelingAssessmentComponent from displaying the model as empty due to race condition between\r\n            // two requests.\r\n            exerciseSource$ = forkJoin([exerciseSource$, exampleSubmissionSource$]).pipe(map(([exercise]) => exercise));\r\n        }\r\n\r\n        exerciseSource$.subscribe((exerciseResponse: HttpResponse<ModelingExercise>) => {\r\n            this.exercise = exerciseResponse.body!;\r\n            this.course = getCourseFromExercise(this.exercise);\r\n            this.isExamMode = this.exercise.exerciseGroup != undefined;\r\n        });\r\n    }\r\n\r\n    upsertExampleModelingSubmission() {\r\n        if (this.isNewSubmission) {\r\n            this.createNewExampleModelingSubmission();\r\n        } else {\r\n            this.updateExampleModelingSubmission().subscribe(() => this.updateAssessmentExplanationAndExampleAssessment());\r\n        }\r\n    }\r\n\r\n    private createNewExampleModelingSubmission(): void {\r\n        const modelingSubmission: ModelingSubmission = new ModelingSubmission();\r\n        modelingSubmission.model = JSON.stringify(this.modelingEditor.getCurrentModel());\r\n        modelingSubmission.explanationText = this.explanationText;\r\n        modelingSubmission.exampleSubmission = true;\r\n\r\n        const newExampleSubmission: ExampleSubmission = this.exampleSubmission;\r\n        newExampleSubmission.submission = modelingSubmission;\r\n        newExampleSubmission.exercise = this.exercise;\r\n\r\n        newExampleSubmission.usedForTutorial = this.selectedMode === ExampleSubmissionMode.ASSESS_CORRECTLY;\r\n        this.exampleSubmissionService.create(newExampleSubmission, this.exerciseId).subscribe({\r\n            next: (exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n                this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                this.exampleSubmissionId = this.exampleSubmission.id!;\r\n                if (this.exampleSubmission.submission) {\r\n                    this.modelingSubmission = this.exampleSubmission.submission as ModelingSubmission;\r\n                    if (this.modelingSubmission.model) {\r\n                        this.umlModel = JSON.parse(this.modelingSubmission.model);\r\n                    }\r\n                    // Updates the explanation text with example modeling submission's explanation\r\n                    this.explanationText = this.modelingSubmission.explanationText ?? '';\r\n                }\r\n                this.isNewSubmission = false;\r\n\r\n                this.alertService.success('artemisApp.modelingEditor.saveSuccessful');\r\n\r\n                // Update the url with the new id, without reloading the page, to make the history consistent\r\n                this.navigationUtilService.replaceNewWithIdInUrl(window.location.href, this.exampleSubmissionId);\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                onError(this.alertService, error);\r\n            },\r\n        });\r\n    }\r\n\r\n    private updateExampleModelingSubmission() {\r\n        if (!this.modelingSubmission) {\r\n            this.createNewExampleModelingSubmission();\r\n        }\r\n        const currentModel = this.modelingEditor.getCurrentModel();\r\n        this.modelingSubmission.model = JSON.stringify(currentModel);\r\n\r\n        this.modelingSubmission.explanationText = this.explanationText;\r\n        this.modelingSubmission.exampleSubmission = true;\r\n        if (this.result) {\r\n            this.referencedFeedback = filterInvalidFeedback(this.referencedFeedback, currentModel);\r\n            this.result.feedbacks = this.assessments;\r\n            setLatestSubmissionResult(this.modelingSubmission, this.result);\r\n            delete this.result.submission;\r\n        }\r\n\r\n        const exampleSubmission = this.exampleSubmission;\r\n        exampleSubmission.submission = this.modelingSubmission;\r\n        exampleSubmission.exercise = this.exercise;\r\n        exampleSubmission.usedForTutorial = this.selectedMode === ExampleSubmissionMode.ASSESS_CORRECTLY;\r\n\r\n        return this.exampleSubmissionService.update(exampleSubmission, this.exerciseId).pipe(\r\n            tap((exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n                this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                this.exampleSubmissionId = this.exampleSubmission.id!;\r\n                if (this.exampleSubmission.submission) {\r\n                    this.modelingSubmission = this.exampleSubmission.submission as ModelingSubmission;\r\n                    if (this.modelingSubmission.model) {\r\n                        this.umlModel = JSON.parse(this.modelingSubmission.model);\r\n                    }\r\n                    if (this.modelingSubmission.explanationText) {\r\n                        this.explanationText = this.modelingSubmission.explanationText;\r\n                    }\r\n                }\r\n                this.isNewSubmission = false;\r\n\r\n                this.alertService.success('artemisApp.modelingEditor.saveSuccessful');\r\n            }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                onError(this.alertService, error);\r\n                throw error;\r\n            }),\r\n        );\r\n    }\r\n\r\n    onReferencedFeedbackChanged(referencedFeedback: Feedback[]) {\r\n        this.referencedFeedback = referencedFeedback;\r\n        this.feedbackChanged = true;\r\n        this.checkScoreBoundaries();\r\n    }\r\n\r\n    onUnReferencedFeedbackChanged(unreferencedFeedback: Feedback[]) {\r\n        this.unreferencedFeedback = unreferencedFeedback;\r\n        this.feedbackChanged = true;\r\n        this.checkScoreBoundaries();\r\n    }\r\n\r\n    showAssessment() {\r\n        if (this.modelChanged()) {\r\n            this.updateExampleModelingSubmission().subscribe();\r\n        }\r\n        this.assessmentMode = true;\r\n    }\r\n\r\n    private modelChanged(): boolean {\r\n        return this.modelingEditor && JSON.stringify(this.umlModel) !== JSON.stringify(this.modelingEditor.getCurrentModel());\r\n    }\r\n\r\n    explanationChanged(explanation: string) {\r\n        this.explanationText = explanation;\r\n    }\r\n\r\n    showSubmission() {\r\n        if (this.feedbackChanged) {\r\n            this.saveExampleAssessment();\r\n            this.feedbackChanged = false;\r\n        }\r\n        this.assessmentMode = false;\r\n    }\r\n\r\n    public saveExampleAssessment(): void {\r\n        this.checkScoreBoundaries();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.modelingAssessment.invalidAssessments');\r\n            return;\r\n        }\r\n        if (this.assessmentExplanation !== this.exampleSubmission.assessmentExplanation && this.assessments) {\r\n            this.updateAssessmentExplanationAndExampleAssessment();\r\n        } else if (this.assessmentExplanation !== this.exampleSubmission.assessmentExplanation) {\r\n            this.updateAssessmentExplanation();\r\n        } else if (this.assessments) {\r\n            this.updateExampleAssessment();\r\n        }\r\n    }\r\n\r\n    private updateAssessmentExplanationAndExampleAssessment() {\r\n        this.exampleSubmission.assessmentExplanation = this.assessmentExplanation;\r\n        this.exampleSubmissionService\r\n            .update(this.exampleSubmission, this.exerciseId)\r\n            .pipe(\r\n                tap((exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n                    this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                    this.assessmentExplanation = this.exampleSubmission.assessmentExplanation!;\r\n                }),\r\n                concatMap(() => this.modelingAssessmentService.saveExampleAssessment(this.assessments, this.exampleSubmissionId)),\r\n            )\r\n            .subscribe({\r\n                next: (result: Result) => {\r\n                    this.updateAssessment(result);\r\n                    this.alertService.success('artemisApp.modelingAssessmentEditor.messages.saveSuccessful');\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.modelingAssessmentEditor.messages.saveFailed');\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Updates the example submission with the assessment explanation text from the input field if it is different from the explanation already saved with the example submission.\r\n     */\r\n    private updateAssessmentExplanation() {\r\n        this.exampleSubmission.assessmentExplanation = this.assessmentExplanation;\r\n        this.exampleSubmissionService.update(this.exampleSubmission, this.exerciseId).subscribe((exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n            this.exampleSubmission = exampleSubmissionResponse.body!;\r\n            this.assessmentExplanation = this.exampleSubmission.assessmentExplanation!;\r\n        });\r\n    }\r\n\r\n    private updateExampleAssessment() {\r\n        this.modelingAssessmentService.saveExampleAssessment(this.assessments, this.exampleSubmissionId).subscribe({\r\n            next: (result: Result) => {\r\n                this.updateAssessment(result);\r\n                this.alertService.success('artemisApp.modelingAssessmentEditor.messages.saveSuccessful');\r\n            },\r\n            error: () => {\r\n                this.alertService.error('artemisApp.modelingAssessmentEditor.messages.saveFailed');\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculates the total score of the current assessment.\r\n     * Returns an error if the total score cannot be calculated\r\n     * because a score is not a number/empty.\r\n     */\r\n    public checkScoreBoundaries() {\r\n        if (this.assessments.length === 0) {\r\n            this.totalScore = 0;\r\n            this.assessmentsAreValid = true;\r\n            return;\r\n        }\r\n\r\n        const credits = this.assessments.map((feedback) => feedback.credits);\r\n        if (!credits.every((credit) => credit != undefined && !isNaN(credit))) {\r\n            this.invalidError = 'The score field must be a number and can not be empty!';\r\n            this.assessmentsAreValid = false;\r\n            return;\r\n        }\r\n\r\n        const maxPoints = getTotalMaxPoints(this.exercise);\r\n        const creditsTotalScore = credits.reduce((a, b) => a! + b!, 0)!;\r\n        this.totalScore = getPositiveAndCappedTotalScore(creditsTotalScore, maxPoints);\r\n        this.assessmentsAreValid = true;\r\n        this.invalidError = undefined;\r\n    }\r\n\r\n    async back() {\r\n        const courseId = this.exercise.course?.id || this.exercise.exerciseGroup?.exam?.course?.id;\r\n        if (this.readOnly || this.toComplete) {\r\n            await this.router.navigate(['/course-management', courseId, 'assessment-dashboard', this.exerciseId]);\r\n        } else if (this.isExamMode) {\r\n            await this.router.navigate([\r\n                '/course-management',\r\n                courseId,\r\n                'exams',\r\n                this.exercise.exerciseGroup?.exam?.id,\r\n                'exercise-groups',\r\n                this.exercise.exerciseGroup?.id,\r\n                'modeling-exercises',\r\n                this.exerciseId,\r\n                'example-submissions',\r\n            ]);\r\n        } else {\r\n            await this.router.navigate(['/course-management', courseId, 'modeling-exercises', this.exerciseId, 'example-submissions']);\r\n        }\r\n    }\r\n\r\n    checkAssessment() {\r\n        scrollToTopOfPage();\r\n        this.checkScoreBoundaries();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.modelingAssessment.invalidAssessments');\r\n            return;\r\n        }\r\n\r\n        const exampleSubmission = Object.assign({}, this.exampleSubmission);\r\n        const result = new Result();\r\n        setLatestSubmissionResult(exampleSubmission.submission, result);\r\n        delete result.submission;\r\n        getLatestSubmissionResult(exampleSubmission.submission)!.feedbacks = this.assessments;\r\n\r\n        const command = new ExampleSubmissionAssessCommand(this.tutorParticipationService, this.alertService, this);\r\n        command.assessExampleSubmission(exampleSubmission, this.exerciseId);\r\n    }\r\n\r\n    markAllFeedbackToCorrect() {\r\n        this.assessments.forEach((feedback) => {\r\n            feedback.correctionStatus = 'CORRECT';\r\n        });\r\n        this.assessmentEditor.resultFeedbacks = this.referencedFeedback;\r\n    }\r\n\r\n    markWrongFeedback(correctionErrors: FeedbackCorrectionError[]) {\r\n        correctionErrors.forEach((correctionError) => {\r\n            const validatedFeedback = this.assessments.find((feedback) => feedback.reference === correctionError.reference);\r\n            if (validatedFeedback != undefined) {\r\n                validatedFeedback.correctionStatus = correctionError.type;\r\n            }\r\n        });\r\n        this.assessmentEditor.resultFeedbacks = this.referencedFeedback;\r\n        this.highlightMissedFeedback();\r\n    }\r\n\r\n    highlightMissedFeedback() {\r\n        const missedReferencedExampleFeedbacks = this.referencedExampleFeedback.filter(\r\n            (feedback) => !this.referencedFeedback.some((referencedFeedback) => referencedFeedback.reference === feedback.reference),\r\n        );\r\n        const highlightedElements = new Map<string, string>();\r\n        for (const feedback of missedReferencedExampleFeedbacks) {\r\n            highlightedElements.set(feedback.referenceId!, this.highlightColor());\r\n        }\r\n        this.highlightedElements.set(highlightedElements);\r\n    }\r\n\r\n    readAndUnderstood() {\r\n        this.tutorParticipationService.assessExampleSubmission(this.exampleSubmission, this.exerciseId).subscribe(() => {\r\n            this.alertService.success('artemisApp.exampleSubmission.readSuccessfully');\r\n            this.back();\r\n        });\r\n    }\r\n\r\n    private updateExampleAssessmentSolution(result: Result) {\r\n        if (result) {\r\n            this.referencedExampleFeedback = result.feedbacks?.filter((feedback) => feedback.type !== FeedbackType.MANUAL_UNREFERENCED) || [];\r\n        }\r\n    }\r\n\r\n    private updateAssessment(result: Result) {\r\n        this.result = result;\r\n        if (result) {\r\n            this.referencedFeedback = result.feedbacks?.filter((feedback) => feedback.type !== FeedbackType.MANUAL_UNREFERENCED) || [];\r\n            this.unreferencedFeedback = result.feedbacks?.filter((feedback) => feedback.type === FeedbackType.MANUAL_UNREFERENCED) || [];\r\n        }\r\n    }\r\n}\r\n", "@if (exercise) {\r\n    <div class=\"row\">\r\n        <div class=\"col-12 col-lg-7 d-flex flex-column justify-content-between\">\r\n            <h2 jhiTranslate=\"artemisApp.modelingExercise.exampleSubmissionForModelingExercise\" [translateValues]=\"{ exerciseTitle: exercise?.title }\">\r\n                Example Modeling Submission for Exercise {{ exercise?.title }}\r\n            </h2>\r\n            @if (toComplete) {\r\n                <h5 class=\"fw-light\" jhiTranslate=\"artemisApp.exampleSubmission.home.assessmentTraining\"></h5>\r\n            }\r\n            @if (assessmentMode) {\r\n                <p jhiTranslate=\"artemisApp.exampleSubmission.assessmentInstruction\"></p>\r\n            }\r\n        </div>\r\n        @if (exercise.isAtLeastEditor && !readOnly && !toComplete) {\r\n            <div class=\"col-12 col-lg-4 text-end\">\r\n                @if (!assessmentMode) {\r\n                    <div class=\"d-flex justify-content-end flex-wrap align-items-center\">\r\n                        <div>\r\n                            <div class=\"text-start\">\r\n                                <span jhiTranslate=\"artemisApp.exampleSubmission.assessmentTraining\"></span>\r\n                                <jhi-help-icon [text]=\"'artemisApp.exampleSubmission.selectModelExplanation'\" />\r\n                            </div>\r\n                            <div class=\"btn-group\" role=\"group\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    class=\"btn-check\"\r\n                                    name=\"mode\"\r\n                                    id=\"read-and-confirm-button\"\r\n                                    autocomplete=\"off\"\r\n                                    [value]=\"ExampleSubmissionMode.READ_AND_CONFIRM\"\r\n                                    [(ngModel)]=\"selectedMode\"\r\n                                />\r\n                                <label class=\"btn btn-outline-secondary\" for=\"read-and-confirm-button\" jhiTranslate=\"artemisApp.exampleSubmission.readAndConfirm\"></label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    class=\"btn-check\"\r\n                                    name=\"mode\"\r\n                                    id=\"only-not-imported\"\r\n                                    autocomplete=\"off\"\r\n                                    [value]=\"ExampleSubmissionMode.ASSESS_CORRECTLY\"\r\n                                    [(ngModel)]=\"selectedMode\"\r\n                                />\r\n                                <label class=\"btn btn-outline-secondary\" for=\"only-not-imported\" jhiTranslate=\"artemisApp.exampleSubmission.assessCorrectly\"></label>\r\n                            </div>\r\n                        </div>\r\n                        <button (click)=\"upsertExampleModelingSubmission()\" class=\"btn btn-primary ms-2 button-resize\">\r\n                            <fa-icon [icon]=\"faSave\" />\r\n                            @if (isNewSubmission) {\r\n                                <span jhiTranslate=\"artemisApp.modelingExercise.createNewExampleSubmission\" id=\"new-modeling-example-submission\"\r\n                                    >Create new example submission</span\r\n                                >\r\n                            }\r\n                            @if (!isNewSubmission) {\r\n                                <span jhiTranslate=\"artemisApp.modelingExercise.saveExampleSubmission\"></span>\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                }\r\n                @if (assessmentMode) {\r\n                    <button (click)=\"saveExampleAssessment()\" class=\"btn btn-primary button-resize\">\r\n                        <fa-icon [icon]=\"faSave\" />\r\n                        <span jhiTranslate=\"artemisApp.modelingExercise.saveExampleAssessment\"></span>\r\n                    </button>\r\n                }\r\n                @if (exampleSubmission && !isNewSubmission) {\r\n                    <div class=\"mt-2 mb-3\">\r\n                        @if (!assessmentMode) {\r\n                            <button class=\"btn btn-secondary button-resize\" (click)=\"showAssessment()\">\r\n                                <fa-icon [icon]=\"faChalkboardTeacher\" />\r\n                                <span jhiTranslate=\"artemisApp.modelingExercise.showExampleAssessment\" id=\"show-modeling-example-assessment\"></span>\r\n                            </button>\r\n                        }\r\n                        @if (assessmentMode) {\r\n                            <button class=\"btn btn-secondary button-resize\" (click)=\"showSubmission()\">\r\n                                <fa-icon [icon]=\"faCodeBranch\" />\r\n                                <span jhiTranslate=\"artemisApp.modelingExercise.showExampleSubmission\"></span>\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"row\">\r\n            <div class=\"col-9 mb-3\">\r\n                <div class=\"row m-0 p-0 align-items-center\">\r\n                    <span class=\"p-0 pe-2 col-md-auto\"\r\n                        ><strong>{{ 'artemisApp.exampleSubmission.legend.title' | artemisTranslate }} : </strong></span\r\n                    >\r\n                    <div class=\"col d-flex\">\r\n                        @for (legendElement of legend.slice(0, 3); track legendElement) {\r\n                            <div class=\"d-flex align-items-center pe-5\">\r\n                                <span class=\"pe-2\">{{ legendElement.text | artemisTranslate }}</span>\r\n                                <div class=\"d-flex justify-content-center align-items-center p-0 legend-icon-wrapper\">\r\n                                    <fa-icon [icon]=\"legendElement.icon\" [style.color]=\"legendElement.color\" />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <!-- Extra logic for displaying warning icon. It should only be shown for tutors that are assessing example submissions -->\r\n                        @if (toComplete) {\r\n                            <div class=\"d-flex align-items-center pe-5\">\r\n                                <span class=\"pe-2\">{{ legend[3].text | artemisTranslate }}</span>\r\n                                <div class=\"d-flex justify-content-center align-items-center p-0 legend-icon-wrapper warning-icon-wrapper\">\r\n                                    <fa-icon [icon]=\"legend[3].icon\" />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            @if (readOnly) {\r\n                <div class=\"col-3 text-end mb-2\">\r\n                    <button (click)=\"readAndUnderstood()\" class=\"btn btn-success\">\r\n                        <fa-icon [icon]=\"faSave\" />\r\n                        <span jhiTranslate=\"artemisApp.exampleSubmission.readAndUnderstood\"></span>\r\n                    </button>\r\n                </div>\r\n            }\r\n            @if (toComplete) {\r\n                <div class=\"col-3 text-end mb-2\">\r\n                    <button\r\n                        class=\"btn btn-primary px-5\"\r\n                        (click)=\"checkAssessment()\"\r\n                        [disabled]=\"!assessments || !assessmentsAreValid\"\r\n                        jhiTranslate=\"artemisApp.exampleSubmission.submitAssessment\"\r\n                    ></button>\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"col-12\">\r\n            <div class=\"row flex-nowrap\">\r\n                <div class=\"col editor-container-outer\">\r\n                    @if (highlightedElements() && highlightedElements().size > 0) {\r\n                        <div class=\"col\">\r\n                            <div [style.background-color]=\"highlightColor()\" class=\"my-2 text-center\">\r\n                                <span jhiTranslate=\"artemisApp.exampleSubmission.modelElementHint\"></span>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div class=\"row editor-container-inner\">\r\n                        @if (!assessmentMode && exercise.diagramType) {\r\n                            <jhi-modeling-editor\r\n                                class=\"col-12\"\r\n                                [umlModel]=\"umlModel\"\r\n                                [diagramType]=\"exercise.diagramType!\"\r\n                                [readOnly]=\"readOnly\"\r\n                                [explanation]=\"explanationText\"\r\n                                (explanationChange)=\"explanationChanged($event)\"\r\n                                [withExplanation]=\"true\"\r\n                            />\r\n                        }\r\n                        @if (assessmentMode && exercise.diagramType) {\r\n                            <jhi-modeling-assessment\r\n                                class=\"col-12\"\r\n                                [umlModel]=\"umlModel\"\r\n                                [resultFeedbacks]=\"result?.feedbacks || []\"\r\n                                [diagramType]=\"exercise.diagramType!\"\r\n                                [maxScore]=\"exercise.maxPoints || 0\"\r\n                                [maxBonusPoints]=\"exercise.bonusPoints || 0\"\r\n                                [totalScore]=\"totalScore\"\r\n                                [readOnly]=\"readOnly\"\r\n                                [course]=\"course\"\r\n                                [explanation]=\"explanationText\"\r\n                                [highlightedElements]=\"highlightedElements()\"\r\n                                (feedbackChanged)=\"onReferencedFeedbackChanged($event)\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                    <!--The explanation field is only visible a) in assessment mode, b) for example submissions in read and confirm mode and c) when in assessment dashboard (readonly = true)\r\n            only if an explanation text is there-->\r\n                    @if (assessmentMode && selectedMode === ExampleSubmissionMode.READ_AND_CONFIRM && (!readOnly || (assessmentExplanation && assessmentExplanation.length > 0))) {\r\n                        <h3 class=\"mt-3\">\r\n                            {{ 'artemisApp.exampleSubmission.assessmentExplanation' | artemisTranslate }}\r\n                            <sup>\r\n                                <small>\r\n                                    <fa-icon [icon]=\"faInfoCircle\" title=\"{{ 'artemisApp.exampleSubmission.assessmentExplanationInfo' | artemisTranslate }}\" class=\"text-warning\" />\r\n                                </small>\r\n                            </sup>\r\n                        </h3>\r\n                    }\r\n                    <!--The explanation field is only visible a) in assessment mode, b) for example submissions in read and confirm mode and c) when in assessment dashboard (readonly = true)\r\n            only if an explanation text is there-->\r\n                    @if (assessmentMode && selectedMode === ExampleSubmissionMode.READ_AND_CONFIRM && (!readOnly || (assessmentExplanation && assessmentExplanation.length > 0))) {\r\n                        <textarea class=\"form-control\" rows=\"4\" maxLength=\"2000\" [(ngModel)]=\"assessmentExplanation\" [disabled]=\"readOnly\"></textarea>\r\n                    }\r\n                    @if (assessmentMode) {\r\n                        @if (result && result.id) {\r\n                            <jhi-unreferenced-feedback\r\n                                [(feedbacks)]=\"unreferencedFeedback\"\r\n                                [readOnly]=\"readOnly\"\r\n                                [addReferenceIdForExampleSubmission]=\"true\"\r\n                                (feedbacksChange)=\"onUnReferencedFeedbackChanged($event)\"\r\n                                [resultId]=\"result.id\"\r\n                            />\r\n                        }\r\n                    }\r\n                </div>\r\n                @if (exercise) {\r\n                    <jhi-collapsable-assessment-instructions\r\n                        class=\"col-auto pe-2\"\r\n                        [readOnly]=\"readOnly\"\r\n                        [exercise]=\"exercise\"\r\n                        [collapsed]=\"!readOnly && !toComplete\"\r\n                        [isAssessmentTraining]=\"toComplete\"\r\n                        [showAssessmentInstructions]=\"assessmentMode\"\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "selectedMode", "\u0275\u0275resetView", "\u0275\u0275listener", "upsertExampleModelingSubmission", "\u0275\u0275template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_3_Conditional_28_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_3_Conditional_29_Template", "\u0275\u0275advance", "\u0275\u0275property", "ExampleSubmissionMode", "READ_AND_CONFIRM", "\u0275\u0275twoWayProperty", "ASSESS_CORRECTLY", "faSave", "\u0275\u0275conditional", "isNewSubmission", "_r3", "saveExampleAssessment", "_r4", "showAssessment", "faChalkboardTeacher", "_r5", "showSubmission", "faCodeBranch", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_5_Conditional_3_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_5_Conditional_4_Template", "assessmentMode", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_3_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_4_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Conditional_5_Template", "exampleSubmission", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "legendElement_r6", "text", "\u0275\u0275styleProp", "color", "icon", "legend", "_r7", "readAndUnderstood", "_r8", "checkAssessment", "assessments", "assessmentsAreValid", "highlightColor", "_r9", "explanationChanged", "umlModel", "exercise", "diagramType", "readOnly", "explanationText", "_r10", "onReferencedFeedbackChanged", "result", "feedbacks", "\u0275\u0275pureFunction0", "_c1", "maxPoints", "bonusPoints", "totalScore", "course", "highlightedElements", "\u0275\u0275textInterpolate1", "\u0275\u0275propertyInterpolate", "faInfoCircle", "_r11", "assessmentExplanation", "_r12", "unreferencedFeedback", "onUnReferencedFeedbackChanged", "id", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_49_Conditional_1_Template", "toComplete", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_8_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_9_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_11_Template", "\u0275\u0275repeaterCreate", "ExampleModelingSubmissionComponent_Conditional_0_For_26_Template", "\u0275\u0275repeaterTrackByIdentity", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_27_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_31_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_32_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_40_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_43_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_44_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_47_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_48_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_49_Template", "ExampleModelingSubmissionComponent_Conditional_0_Conditional_51_Template", "\u0275\u0275pureFunction1", "_c0", "title", "isAtLeastEditor", "\u0275\u0275repeater", "slice", "size", "length", "ExampleModelingSubmissionComponent", "exerciseService", "inject", "ExerciseService", "exampleSubmissionService", "ExampleSubmissionService", "modelingAssessmentService", "ModelingAssessmentService", "tutorParticipationService", "TutorParticipationService", "alertService", "AlertService", "route", "ActivatedRoute", "router", "Router", "navigationUtilService", "ArtemisNavigationUtilService", "modelingEditor", "assessmentEditor", "themeService", "ThemeService", "exerciseId", "modelingSubmission", "feedbackChanged", "invalidError", "isExamMode", "faCheck", "faTimes", "faExclamation", "faExclamationTriangle", "exampleSubmissionId", "referencedFeedback", "signal", "Map", "referencedExampleFeedback", "computed", "userPreference", "Theme", "DARK", "faCircle", "constructor", "effect", "untracked", "updatedHighlights", "forEach", "_", "key", "set", "ngOnInit", "Number", "snapshot", "paramMap", "get", "queryParamMap", "loadAll", "exerciseSource$", "find", "ExampleSubmission", "exampleSubmissionSource$", "pipe", "tap", "exampleSubmissionResponse", "body", "submission", "model", "JSON", "parse", "usedForTutorial", "getExampleAssessment", "subscribe", "updateExampleAssessmentSolution", "updateAssessment", "checkScoreBoundaries", "forkJoin", "map", "exerciseResponse", "getCourseFromExercise", "exerciseGroup", "undefined", "createNewExampleModelingSubmission", "updateExampleModelingSubmission", "updateAssessmentExplanationAndExampleAssessment", "ModelingSubmission", "stringify", "getCurrentModel", "newExampleSubmission", "create", "next", "success", "replaceNewWithIdInUrl", "window", "location", "href", "error", "onError", "currentModel", "filterInvalidFeedback", "setLatestSubmissionResult", "update", "catchError", "modelChanged", "explanation", "updateAssessmentExplanation", "updateExampleAssessment", "concatMap", "credits", "feedback", "every", "credit", "isNaN", "getTotalMaxPoints", "creditsTotalScore", "reduce", "a", "b", "getPositiveAndCappedTotalScore", "back", "__async", "courseId", "exam", "navigate", "scrollToTopOfPage", "Object", "assign", "Result", "getLatestSubmissionResult", "ExampleSubmissionAssessCommand", "assessExampleSubmission", "markAllFeedbackToCorrect", "correctionStatus", "resultFeedbacks", "markWrongFeedback", "correctionErrors", "correctionError", "validatedFeedback", "reference", "type", "highlightMissedFeedback", "missedReferencedExampleFeedbacks", "filter", "some", "referenceId", "FeedbackType", "MANUAL_UNREFERENCED", "selectors", "viewQuery", "rf", "ctx", "ModelingEditorComponent", "ModelingAssessmentComponent", "ExampleModelingSubmissionComponent_Conditional_0_Template", "TranslateDirective", "HelpIconComponent", "FormsModule", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "UnreferencedFeedbackComponent", "CollapsableAssessmentInstructionsComponent", "ArtemisTranslatePipe", "styles"]
}
