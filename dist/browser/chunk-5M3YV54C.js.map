{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/result/result.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ResultWithPointsPerGradingCriterion } from 'app/entities/result-with-points-per-grading-criterion.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { StudentParticipation, isPracticeMode } from 'app/entities/participation/student-participation.model';\r\nimport { Exercise, ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { isResultPreliminary } from 'app/exercises/programming/shared/utils/programming-exercise.utils';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { captureException } from '@sentry/angular';\r\nimport { Participation, ParticipationType } from 'app/entities/participation/participation.model';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\nimport {\r\n    isAIResultAndFailed,\r\n    isAIResultAndIsBeingProcessed,\r\n    isAIResultAndProcessed,\r\n    isAIResultAndTimedOut,\r\n    isAthenaAIResult,\r\n    isStudentParticipation,\r\n} from 'app/exercises/shared/result/result.utils';\r\nimport { CsvDownloadService } from 'app/shared/util/CsvDownloadService';\r\n\r\nexport type EntityResponseType = HttpResponse<Result>;\r\nexport type EntityArrayResponseType = HttpResponse<Result[]>;\r\nexport type ResultsWithPointsArrayResponseType = HttpResponse<ResultWithPointsPerGradingCriterion[]>;\r\n\r\nexport interface Badge {\r\n    class: string;\r\n    text: string;\r\n    tooltip: string;\r\n}\r\n\r\nexport interface IResultService {\r\n    find: (resultId: number) => Observable<EntityResponseType>;\r\n    getResultsForExerciseWithPointsPerGradingCriterion: (exerciseId: number, req?: any) => Observable<ResultsWithPointsArrayResponseType>;\r\n    getFeedbackDetailsForResult: (participationId: number, result: Result) => Observable<HttpResponse<Feedback[]>>;\r\n    getResultsWithPointsPerGradingCriterion: (exercise: Exercise) => Observable<ResultsWithPointsArrayResponseType>;\r\n    triggerDownloadCSV: (rows: string[], csvFileName: string) => void;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ResultService implements IResultService {\r\n    private http = inject(HttpClient);\r\n    private translateService = inject(TranslateService);\r\n    private csvDownloadService = inject(CsvDownloadService);\r\n\r\n    private exerciseResourceUrl = 'api/assessment/exercises';\r\n    private resultResourceUrl = 'api/assessment/results';\r\n    private participationResourceUrl = 'api/assessment/participations';\r\n\r\n    private readonly MAX_VALUE_PROGRAMMING_RESULT_INTS = 255;\r\n    // Size of tinyInt in SQL, that is used to store these values\r\n\r\n    find(resultId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Result>(`${this.resultResourceUrl}/${resultId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertResultResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Generates the result string for the given exercise and result.\r\n     * Contains the score, achieved points and if it's a programming exercise the tests and code issues as well\r\n     * If either of the arguments is undefined the error is forwarded to sentry and an empty string is returned\r\n     * @param result the result containing all necessary information like the achieved points\r\n     * @param exercise the exercise where the result belongs to\r\n     * @param short flag that indicates if the resultString should use the short format\r\n     */\r\n    getResultString(result: Result | undefined, exercise: Exercise | undefined, short?: boolean): string {\r\n        if (result && exercise) {\r\n            return this.getResultStringDefinedParameters(result, exercise, short);\r\n        } else {\r\n            captureException('Tried to generate a result string, but either the result or exercise was undefined');\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the result string for the given exercise and result.\r\n     * Contains the score, achieved points and if it's a programming exercise the tests and code issues as well\r\n     * @param result the result containing all necessary information like the achieved points\r\n     * @param exercise the exercise where the result belongs to\r\n     * @param short flag that indicates if the resultString should use the short format\r\n     */\r\n    private getResultStringDefinedParameters(result: Result, exercise: Exercise, short: boolean | undefined): string {\r\n        const relativeScore = roundValueSpecifiedByCourseSettings(result.score!, getCourseFromExercise(exercise));\r\n        const points = roundValueSpecifiedByCourseSettings((result.score! * exercise.maxPoints!) / 100, getCourseFromExercise(exercise));\r\n        if (exercise.type !== ExerciseType.PROGRAMMING) {\r\n            if (isAthenaAIResult(result)) {\r\n                return this.getResultStringNonProgrammingExerciseWithAIFeedback(result, relativeScore, points, short);\r\n            }\r\n            return this.getResultStringNonProgrammingExercise(relativeScore, points, short);\r\n        } else {\r\n            return this.getResultStringProgrammingExercise(result, exercise as ProgrammingExercise, relativeScore, points, short);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the result string for a text exercise. Contains the score and points\r\n     * @param result the result object\r\n     * @param relativeScore the achieved score in percent\r\n     * @param points the amount of achieved points\r\n     * @param short flag that indicates if the resultString should use the short format\r\n     */\r\n    private getResultStringNonProgrammingExerciseWithAIFeedback(result: Result, relativeScore: number, points: number, short: boolean | undefined): string {\r\n        let aiFeedbackMessage: string = '';\r\n        if (result && isAthenaAIResult(result) && result.successful === undefined) {\r\n            return this.translateService.instant('artemisApp.result.resultString.automaticAIFeedbackInProgress');\r\n        }\r\n        if (result && isAthenaAIResult(result) && result.successful === false) {\r\n            return this.translateService.instant('artemisApp.result.resultString.automaticAIFeedbackFailed');\r\n        }\r\n        aiFeedbackMessage = this.getResultStringNonProgrammingExercise(relativeScore, points, short);\r\n        return `${aiFeedbackMessage} (${this.translateService.instant('artemisApp.result.preliminary')})`;\r\n    }\r\n\r\n    /**\r\n     * Generates the result string for a non programming exercise. Contains the score and points\r\n     * @param relativeScore the achieved score in percent\r\n     * @param points the amount of achieved points\r\n     * @param short flag that indicates if the resultString should use the short format\r\n     */\r\n    private getResultStringNonProgrammingExercise(relativeScore: number, points: number, short: boolean | undefined): string {\r\n        if (short) {\r\n            return this.translateService.instant(`artemisApp.result.resultString.short`, {\r\n                relativeScore,\r\n            });\r\n        } else {\r\n            return this.translateService.instant(`artemisApp.result.resultString.nonProgramming`, {\r\n                relativeScore,\r\n                points,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the result string for a programming exercise. Contains the score, achieved points and the tests and code issues as well.\r\n     * If the result is a build failure or no tests were executed, the string replaces some parts with a helpful explanation\r\n     * @param result the result containing all necessary information like the achieved points\r\n     * @param exercise the exercise where the result belongs to\r\n     * @param relativeScore the achieved score in percent\r\n     * @param points the amount of achieved points\r\n     * @param short flag that indicates if the resultString should use the short format\r\n     */\r\n    private getResultStringProgrammingExercise(result: Result, exercise: ProgrammingExercise, relativeScore: number, points: number, short: boolean | undefined): string {\r\n        let buildAndTestMessage: string;\r\n        if (isAIResultAndFailed(result)) {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.automaticAIFeedbackFailed');\r\n        } else if (isAIResultAndIsBeingProcessed(result)) {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.automaticAIFeedbackInProgress');\r\n        } else if (isAIResultAndTimedOut(result)) {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.automaticAIFeedbackTimedOut');\r\n        } else if (isAIResultAndProcessed(result)) {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.automaticAIFeedbackSuccessful');\r\n        } else if (result.submission && (result.submission as ProgrammingSubmission).buildFailed) {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.buildFailed');\r\n        } else if (!result.testCaseCount) {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.buildSuccessfulNoTests');\r\n        } else {\r\n            buildAndTestMessage = this.translateService.instant('artemisApp.result.resultString.buildSuccessfulTests', {\r\n                numberOfTestsPassed:\r\n                    result.passedTestCaseCount! >= this.MAX_VALUE_PROGRAMMING_RESULT_INTS ? `${this.MAX_VALUE_PROGRAMMING_RESULT_INTS}+` : result.passedTestCaseCount,\r\n                numberOfTestsTotal: result.testCaseCount! >= this.MAX_VALUE_PROGRAMMING_RESULT_INTS ? `${this.MAX_VALUE_PROGRAMMING_RESULT_INTS}+` : result.testCaseCount,\r\n            });\r\n        }\r\n\r\n        let resultString = this.getBaseResultStringProgrammingExercise(result, relativeScore, points, buildAndTestMessage, short);\r\n\r\n        if (isStudentParticipation(result) && isResultPreliminary(result, exercise)) {\r\n            resultString += ' (' + this.translateService.instant('artemisApp.result.preliminary') + ')';\r\n        }\r\n\r\n        return resultString;\r\n    }\r\n\r\n    /**\r\n     * Generates the result string for a programming exercise\r\n     * @param result the result containing all necessary information like the achieved points\r\n     * @param relativeScore the achieved score in percent\r\n     * @param points the amount of achieved points\r\n     * @param buildAndTestMessage the string containing information about the build. Either about the build failure or the passed tests\r\n     * @param short flag that indicates if the resultString should use the short format\r\n     */\r\n    private getBaseResultStringProgrammingExercise(result: Result, relativeScore: number, points: number, buildAndTestMessage: string, short: boolean | undefined): string {\r\n        if (isAthenaAIResult(result)) {\r\n            return buildAndTestMessage;\r\n        }\r\n        if (short) {\r\n            if (!result.testCaseCount) {\r\n                return this.translateService.instant('artemisApp.result.resultString.programmingShort', {\r\n                    relativeScore,\r\n                    buildAndTestMessage,\r\n                });\r\n            } else {\r\n                return this.translateService.instant('artemisApp.result.resultString.short', {\r\n                    relativeScore,\r\n                });\r\n            }\r\n        } else if (result.codeIssueCount && result.codeIssueCount > 0) {\r\n            return this.translateService.instant('artemisApp.result.resultString.programmingCodeIssues', {\r\n                relativeScore,\r\n                buildAndTestMessage,\r\n                numberOfIssues: result.codeIssueCount! >= this.MAX_VALUE_PROGRAMMING_RESULT_INTS ? `${this.MAX_VALUE_PROGRAMMING_RESULT_INTS}+` : result.codeIssueCount,\r\n                points,\r\n            });\r\n        } else {\r\n            return this.translateService.instant(`artemisApp.result.resultString.programming`, {\r\n                relativeScore,\r\n                buildAndTestMessage,\r\n                points,\r\n            });\r\n        }\r\n    }\r\n\r\n    getResultsForExerciseWithPointsPerGradingCriterion(exerciseId: number, req?: any): Observable<ResultsWithPointsArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<ResultWithPointsPerGradingCriterion[]>(`${this.exerciseResourceUrl}/${exerciseId}/results-with-points-per-criterion`, {\r\n                params: options,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: ResultsWithPointsArrayResponseType) => this.convertResultsWithPointsResponse(res)));\r\n    }\r\n\r\n    getFeedbackDetailsForResult(participationId: number, result: Result): Observable<HttpResponse<Feedback[]>> {\r\n        return this.http.get<Feedback[]>(`${this.participationResourceUrl}/${participationId}/results/${result.id!}/details`, { observe: 'response' }).pipe(\r\n            map((res) => {\r\n                const feedbacks = res.body ?? [];\r\n                feedbacks.forEach((feedback) => (feedback.result = result));\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    public convertResultDatesFromClient(result: Result): Result {\r\n        return Object.assign({}, result, {\r\n            completionDate: convertDateFromClient(result.completionDate),\r\n            submission: undefined,\r\n        });\r\n    }\r\n\r\n    protected convertArrayResponse(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((result: Result) => this.convertResultDatesFromServer(result));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertResultsWithPointsResponse(res: ResultsWithPointsArrayResponseType): ResultsWithPointsArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((resultWithPoints: ResultWithPointsPerGradingCriterion) => {\r\n                this.convertResultDatesFromServer(resultWithPoints.result);\r\n                const pointsMap = new Map<number, number>();\r\n                if (resultWithPoints.pointsPerCriterion) {\r\n                    Object.entries(resultWithPoints.pointsPerCriterion).forEach(([key, value]) => {\r\n                        pointsMap.set(+key, value);\r\n                    });\r\n                }\r\n                resultWithPoints.pointsPerCriterion = pointsMap;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertResultDatesFromServer(result: Result) {\r\n        result.completionDate = convertDateFromServer(result.completionDate);\r\n        ParticipationService.convertParticipationDatesFromServer(result.participation as StudentParticipation);\r\n        SubmissionService.convertSubmissionDateFromServer(result.submission);\r\n    }\r\n\r\n    public convertResultResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.convertResultDatesFromServer(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Fetches all results together with the total points and points per grading criterion for each of the given exercise.\r\n     * @param exercise of which the results with points should be fetched.\r\n     */\r\n    getResultsWithPointsPerGradingCriterion(exercise: Exercise): Observable<ResultsWithPointsArrayResponseType> {\r\n        return this.getResultsForExerciseWithPointsPerGradingCriterion(exercise.id!, {\r\n            withSubmissions: exercise.type === ExerciseType.MODELING,\r\n        }).pipe(\r\n            tap((res: HttpResponse<ResultWithPointsPerGradingCriterion[]>) => {\r\n                return res.body!.map((resultWithScores) => {\r\n                    const result = resultWithScores.result;\r\n                    resultWithScores.result = ResultService.processReceivedResult(exercise, result);\r\n                    return resultWithScores;\r\n                });\r\n            }),\r\n        );\r\n    }\r\n\r\n    public static processReceivedResult(exercise: Exercise, result: Result): Result {\r\n        if (result.participation) {\r\n            result.participation.results = [result];\r\n            (result.participation as StudentParticipation).exercise = exercise;\r\n            // Nest submission into participation so that it is available for the result component\r\n            if (result.submission) {\r\n                result.participation.submissions = [result.submission];\r\n            }\r\n        }\r\n        result.durationInMinutes = ResultService.durationInMinutes(result.completionDate!, result.participation?.initializationDate ?? exercise.releaseDate!);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Utility function\r\n     */\r\n    private static durationInMinutes(completionDate: dayjs.Dayjs, initializationDate: dayjs.Dayjs) {\r\n        return dayjs(completionDate).diff(initializationDate, 'minutes');\r\n    }\r\n\r\n    /**\r\n     * Utility function used to trigger the download of a CSV file\r\n     */\r\n    public triggerDownloadCSV(rows: string[], csvFileName: string) {\r\n        const csvContent = 'data:text/csv;charset=utf-8,' + rows.join('\\n');\r\n        this.csvDownloadService.downloadCSV(csvContent, csvFileName);\r\n    }\r\n\r\n    public static evaluateBadge(participation: Participation, result: Result): Badge {\r\n        if (participation.type === ParticipationType.STUDENT || participation.type === ParticipationType.PROGRAMMING) {\r\n            if (isPracticeMode(participation)) {\r\n                return { class: 'bg-secondary', text: 'artemisApp.result.practice', tooltip: 'artemisApp.result.practiceTooltip' };\r\n            }\r\n        }\r\n        return result.rated\r\n            ? { class: 'bg-success', text: 'artemisApp.result.graded', tooltip: 'artemisApp.result.gradedTooltip' }\r\n            : { class: 'bg-info', text: 'artemisApp.result.notGraded', tooltip: 'artemisApp.result.notGradedTooltip' };\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ResultService", "http", "inject", "HttpClient", "translateService", "TranslateService", "csvDownloadService", "CsvDownloadService", "exerciseResourceUrl", "resultResourceUrl", "participationResourceUrl", "MAX_VALUE_PROGRAMMING_RESULT_INTS", "find", "resultId", "get", "observe", "pipe", "map", "res", "convertResultResponseDatesFromServer", "getResultString", "result", "exercise", "short", "getResultStringDefinedParameters", "captureException", "relativeScore", "roundValueSpecifiedByCourseSettings", "score", "getCourseFromExercise", "points", "maxPoints", "type", "ExerciseType", "PROGRAMMING", "isAthenaAIResult", "getResultStringNonProgrammingExerciseWithAIFeedback", "getResultStringNonProgrammingExercise", "getResultStringProgrammingExercise", "aiFeedbackMessage", "successful", "undefined", "instant", "buildAndTestMessage", "isAIResultAndFailed", "isAIResultAndIsBeingProcessed", "isAIResultAndTimedOut", "isAIResultAndProcessed", "submission", "buildFailed", "testCaseCount", "numberOfTestsPassed", "passedTestCaseCount", "numberOfTestsTotal", "resultString", "getBaseResultStringProgrammingExercise", "isStudentParticipation", "isResultPreliminary", "codeIssueCount", "numberOfIssues", "getResultsForExerciseWithPointsPerGradingCriterion", "exerciseId", "req", "options", "createRequestOption", "params", "convertResultsWithPointsResponse", "getFeedbackDetailsForResult", "participationId", "id", "body", "forEach", "feedback", "convertResultDatesFromClient", "Object", "assign", "completionDate", "convertDateFromClient", "convertArrayResponse", "convertResultDatesFromServer", "resultWithPoints", "pointsMap", "Map", "pointsPerCriterion", "entries", "key", "value", "set", "convertDateFromServer", "ParticipationService", "convertParticipationDatesFromServer", "participation", "SubmissionService", "convertSubmissionDateFromServer", "getResultsWithPointsPerGradingCriterion", "withSubmissions", "MODELING", "tap", "resultWithScores", "processReceivedResult", "results", "submissions", "durationInMinutes", "initializationDate", "releaseDate", "dayjs", "diff", "triggerDownloadCSV", "rows", "csvFileName", "csvContent", "join", "downloadCSV", "evaluateBadge", "ParticipationType", "STUDENT", "isPracticeMode", "class", "text", "tooltip", "rated", "factory", "\u0275fac", "providedIn"]
}
