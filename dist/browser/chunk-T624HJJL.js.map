{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/delete-dialog/delete-dialog.component.ts", "src/main/webapp/app/shared/delete-dialog/delete-dialog.component.html", "src/main/webapp/app/shared/delete-dialog/delete-dialog.service.ts", "src/main/webapp/app/shared/delete-dialog/delete-button.directive.ts"],
  "sourcesContent": ["import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { mapValues } from 'lodash-es';\r\nimport { ActionType, EntitySummary } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faBan, faCheck, faSpinner, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { ConfirmEntityNameComponent } from '../confirm-entity-name/confirm-entity-name.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-delete-dialog',\r\n    templateUrl: './delete-dialog.component.html',\r\n    imports: [FormsModule, TranslateDirective, ConfirmEntityNameComponent, FaIconComponent, NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class DeleteDialogComponent implements OnInit, OnDestroy {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    readonly actionTypes = ActionType;\r\n    private dialogErrorSubscription: Subscription;\r\n    dialogError: Observable<string>;\r\n    @Output() delete: EventEmitter<{ [key: string]: boolean }>;\r\n    submitDisabled: boolean;\r\n    confirmEntityName: string;\r\n    entityTitle: string;\r\n    buttonType: ButtonType;\r\n    @ViewChild('deleteForm', { static: true }) deleteForm: NgForm;\r\n\r\n    deleteQuestion: string;\r\n    entitySummaryTitle?: string;\r\n    entitySummary?: EntitySummary = {};\r\n    translateValues: { [key: string]: unknown } = {};\r\n    deleteConfirmationText: string;\r\n    requireConfirmationOnlyForAdditionalChecks: boolean;\r\n    additionalChecks?: { [key: string]: string };\r\n    additionalChecksValues: { [key: string]: boolean } = {};\r\n    actionType: ActionType;\r\n    // do not use faTimes icon if it's a confirmation but not a delete dialog\r\n    useFaCheckIcon: boolean;\r\n\r\n    // used by *ngFor in the template\r\n    objectKeys = Object.keys;\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faSpinner = faSpinner;\r\n    faTimes = faTimes;\r\n    faTrash = faTrash;\r\n    faCheck = faCheck;\r\n    faUndo = faUndo;\r\n    warningTextColor: string;\r\n\r\n    /**\r\n     * Life cycle hook called by Angular to indicate that Angular is done creating the component\r\n     */\r\n    ngOnInit(): void {\r\n        this.dialogErrorSubscription = this.dialogError.subscribe((errorMessage: string) => {\r\n            if (errorMessage === '') {\r\n                this.clear();\r\n            } else {\r\n                this.submitDisabled = false;\r\n                this.alertService.error(errorMessage);\r\n            }\r\n        });\r\n        if (this.additionalChecks) {\r\n            this.additionalChecksValues = mapValues(this.additionalChecks, () => false);\r\n        }\r\n        this.useFaCheckIcon = this.buttonType !== ButtonType.ERROR;\r\n        if (ButtonType.ERROR !== this.buttonType) {\r\n            this.warningTextColor = 'text-default';\r\n        } else {\r\n            this.warningTextColor = 'text-danger';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook called by Angular for cleanup just before Angular destroys the component\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.dialogErrorSubscription) {\r\n            this.dialogErrorSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the dialog\r\n     */\r\n    clear(): void {\r\n        // intentionally use close instead of dismiss here, because dismiss leads to a non-traceable runtime error\r\n        this.activeModal.close();\r\n    }\r\n\r\n    /**\r\n     * Emits delete event and passes additional checks from the dialog\r\n     */\r\n    confirmDelete(): void {\r\n        this.submitDisabled = true;\r\n        this.delete.emit(this.additionalChecksValues);\r\n    }\r\n\r\n    /**\r\n     * Check if at least one additionalCheck is selected\r\n     */\r\n    get isAnyAdditionalCheckSelected(): boolean {\r\n        return Object.values(this.additionalChecksValues).some((check) => check);\r\n    }\r\n}\r\n", "<form name=\"deleteForm\" (ngSubmit)=\"confirmDelete()\" #deleteForm=\"ngForm\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            @switch (actionType) {\r\n                @case (actionTypes.Delete) {\r\n                    <span jhiTranslate=\"entity.delete.title\"></span>\r\n                }\r\n                @case (actionTypes.Reset) {\r\n                    <span jhiTranslate=\"entity.reset.title\"></span>\r\n                }\r\n                @case (actionTypes.Cleanup) {\r\n                    <span jhiTranslate=\"entity.cleanup.title\"></span>\r\n                }\r\n                @case (actionTypes.Remove) {\r\n                    <span jhiTranslate=\"entity.remove.title\"></span>\r\n                }\r\n                @case (actionTypes.Unlink) {\r\n                    <span jhiTranslate=\"entity.unlink.title\"></span>\r\n                }\r\n                @case (actionTypes.NoButtonTextDelete) {\r\n                    <span jhiTranslate=\"entity.noButtonTextDelete.title\"></span>\r\n                }\r\n                @case (actionTypes.EndNow) {\r\n                    <span jhiTranslate=\"entity.endNow.title\"></span>\r\n                }\r\n            }\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <p [jhiTranslate]=\"deleteQuestion\" [translateValues]=\"translateValues\">Are you sure you want to delete?</p>\r\n\r\n        @if (entitySummaryTitle) {\r\n            <b [jhiTranslate]=\"entitySummaryTitle\"></b>\r\n        }\r\n        @if (entitySummary) {\r\n            <ul>\r\n                @for (summaryKey of objectKeys(entitySummary); track summaryKey; let i = $index) {\r\n                    @if (entitySummary[summaryKey] !== undefined) {\r\n                        <li>\r\n                            <span [jhiTranslate]=\"summaryKey\"></span>: <span>{{ entitySummary[summaryKey] }}</span>\r\n                        </li>\r\n                    }\r\n                }\r\n            </ul>\r\n        }\r\n\r\n        @if (additionalChecks) {\r\n            <div>\r\n                @for (checkKey of objectKeys(additionalChecks); track checkKey; let i = $index) {\r\n                    <div>\r\n                        @if (additionalChecks[checkKey]) {\r\n                            <div class=\"checkbox\">\r\n                                <div class=\"control-label text-danger form-check\">\r\n                                    <input id=\"additional-check-{{ i }}\" type=\"checkbox\" name=\"checkbox\" class=\"form-check-input\" [(ngModel)]=\"additionalChecksValues[checkKey]\" />\r\n                                    <label for=\"additional-check-{{ i }}\" class=\"form-check-label\">{{ additionalChecks[checkKey] | artemisTranslate }}</label>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        @if (deleteConfirmationText && (!requireConfirmationOnlyForAdditionalChecks || isAnyAdditionalCheckSelected)) {\r\n            <jhi-confirm-entity-name [confirmationText]=\"deleteConfirmationText\" [entityName]=\"entityTitle\" [(ngModel)]=\"confirmEntityName\" name=\"confirmEntityName\" />\r\n        }\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"clear()\" [disabled]=\"submitDisabled\">\r\n            <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n        </button>\r\n        <button\r\n            id=\"delete\"\r\n            type=\"submit\"\r\n            [ngClass]=\"['btn', buttonType]\"\r\n            [style.cursor]=\"deleteForm.invalid || submitDisabled ? 'not-allowed' : 'pointer'\"\r\n            [disabled]=\"deleteForm.invalid || submitDisabled\"\r\n        >\r\n            @if (submitDisabled) {\r\n                <span><fa-icon [icon]=\"faSpinner\" animation=\"spin\" />&nbsp;</span>\r\n            }\r\n            @switch (actionType) {\r\n                @case (actionTypes.Delete) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faTrash\" />\r\n                    <span jhiTranslate=\"entity.action.delete\"></span>\r\n                }\r\n                @case (actionTypes.Reset) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faUndo\" />\r\n                    <span jhiTranslate=\"entity.action.reset\"></span>\r\n                }\r\n                @case (actionTypes.Cleanup) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faTimes\" />\r\n                    <span jhiTranslate=\"entity.action.cleanup\"></span>\r\n                }\r\n                @case (actionTypes.Remove) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faTrash\" />\r\n                    <span jhiTranslate=\"entity.action.remove\"></span>\r\n                }\r\n                @case (actionTypes.Unlink) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faTimes\" />\r\n                    <span jhiTranslate=\"entity.action.unlink\"></span>\r\n                }\r\n                @case (actionTypes.NoButtonTextDelete) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faTrash\" />\r\n                    <span jhiTranslate=\"entity.action.delete\"></span>\r\n                }\r\n                @case (actionTypes.EndNow) {\r\n                    <fa-icon [icon]=\"useFaCheckIcon ? faCheck : faTimes\" />\r\n                    <span jhiTranslate=\"entity.action.endNow\"></span>\r\n                }\r\n            }\r\n        </button>\r\n    </div>\r\n</form>\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\r\nimport { DeleteDialogData, EntitySummary } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { Observable, from } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DeleteDialogService {\r\n    private modalService = inject(NgbModal);\r\n    alertService = inject(AlertService);\r\n\r\n    modalRef: NgbModalRef | null;\r\n\r\n    /**\r\n     * Opens delete dialog\r\n     * @param deleteDialogData data that is used in dialog\r\n     * @param animation if true, the modal will fade in and out\r\n     */\r\n    openDeleteDialog(deleteDialogData: DeleteDialogData, animation = true): void {\r\n        this.alertService.closeAll();\r\n        this.modalRef = this.modalService.open(DeleteDialogComponent, { size: 'lg', backdrop: 'static', animation });\r\n        this.modalRef.componentInstance.entityTitle = deleteDialogData.entityTitle;\r\n        this.modalRef.componentInstance.deleteQuestion = deleteDialogData.deleteQuestion;\r\n        this.modalRef.componentInstance.translateValues = { ...deleteDialogData.translateValues, title: deleteDialogData.entityTitle };\r\n        this.modalRef.componentInstance.deleteConfirmationText = deleteDialogData.deleteConfirmationText;\r\n        this.modalRef.componentInstance.additionalChecks = deleteDialogData.additionalChecks;\r\n        this.modalRef.componentInstance.entitySummaryTitle = deleteDialogData.entitySummaryTitle;\r\n        this.modalRef.componentInstance.fetchEntitySummary = deleteDialogData.fetchEntitySummary;\r\n        this.modalRef.componentInstance.actionType = deleteDialogData.actionType;\r\n        this.modalRef.componentInstance.buttonType = deleteDialogData.buttonType;\r\n        this.modalRef.componentInstance.delete = deleteDialogData.delete;\r\n        this.modalRef.componentInstance.dialogError = deleteDialogData.dialogError;\r\n        this.modalRef.componentInstance.requireConfirmationOnlyForAdditionalChecks = deleteDialogData.requireConfirmationOnlyForAdditionalChecks;\r\n\r\n        if (deleteDialogData.fetchEntitySummary !== undefined) {\r\n            this.fetchAndSetEntitySummary(deleteDialogData.fetchEntitySummary, this.modalRef.componentInstance);\r\n        }\r\n\r\n        from(this.modalRef.result).subscribe(() => (this.modalRef = null));\r\n    }\r\n\r\n    /**\r\n     * Fetches and sets entity summary by subscribing to fetchEntitySummary.\r\n     * @param fetchEntitySummary observable that fetches entity summary\r\n     * @param componentInstance instance of DeleteDialogComponent\r\n     */\r\n    fetchAndSetEntitySummary(fetchEntitySummary: Observable<EntitySummary>, componentInstance: DeleteDialogComponent): void {\r\n        fetchEntitySummary.subscribe({\r\n            next: (entitySummary: EntitySummary) => (componentInstance.entitySummary = entitySummary),\r\n            error: (error: HttpErrorResponse) => this.alertService.error('error.unexpectedError', { error: error.message }),\r\n        });\r\n    }\r\n}\r\n", "import { DeleteDialogService } from 'app/shared/delete-dialog/delete-dialog.service';\r\nimport { Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, Renderer2, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ActionType, DeleteDialogData, EntitySummary } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { Observable } from 'rxjs';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\n\r\n@Directive({ selector: '[jhiDeleteButton]' })\r\nexport class DeleteButtonDirective implements OnInit {\r\n    private deleteDialogService = inject(DeleteDialogService);\r\n    private renderer = inject(Renderer2);\r\n    private elementRef = inject(ElementRef);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() entityTitle?: string;\r\n    @Input() deleteQuestion: string;\r\n    @Input() entitySummaryTitle?: string;\r\n    @Input() fetchEntitySummary?: Observable<EntitySummary>;\r\n    @Input() translateValues: { [key: string]: unknown } = {};\r\n    @Input() deleteConfirmationText: string;\r\n    @Input() buttonSize: ButtonSize = ButtonSize.SMALL;\r\n    @Input() additionalChecks?: { [key: string]: string };\r\n    @Input() actionType: ActionType = ActionType.Delete;\r\n    @Input() buttonType: ButtonType = ButtonType.ERROR;\r\n    @Input() renderButtonStyle = true;\r\n    @Input() renderButtonText = true;\r\n    @Input() requireConfirmationOnlyForAdditionalChecks = false;\r\n    @Input() dialogError: Observable<string>;\r\n    @Output() delete = new EventEmitter<{ [key: string]: boolean }>();\r\n    @Input() animation = true;\r\n\r\n    deleteTextSpan: HTMLElement;\r\n\r\n    /**\r\n     * This method appends classes and type property to the button on which directive was used, additionally adds a span tag with delete text.\r\n     * We can't use component, as Angular would wrap it in its own tag and this will break button grouping that we are using for other buttons.\r\n     */\r\n    ngOnInit() {\r\n        // set button classes and submit property\r\n        if (this.renderButtonStyle) {\r\n            this.renderer.addClass(this.elementRef.nativeElement, 'btn');\r\n            this.renderer.addClass(this.elementRef.nativeElement, this.buttonType);\r\n            this.renderer.addClass(this.elementRef.nativeElement, this.buttonSize);\r\n            this.renderer.addClass(this.elementRef.nativeElement, 'me-1');\r\n        }\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'type', 'submit');\r\n\r\n        // create a span with delete text\r\n        if (this.renderButtonText) {\r\n            this.deleteTextSpan = this.renderer.createElement('span');\r\n            if (this.buttonType === ButtonType.ERROR) {\r\n                this.renderer.addClass(this.deleteTextSpan, 'd-none');\r\n            }\r\n            this.renderer.addClass(this.deleteTextSpan, 'text-white');\r\n            this.renderer.addClass(this.deleteTextSpan, 'd-xl-inline');\r\n            this.setTextContent();\r\n            this.renderer.appendChild(this.elementRef.nativeElement, this.deleteTextSpan);\r\n\r\n            // update the span title on each language change\r\n            this.translateService.onLangChange.subscribe(() => {\r\n                this.setTextContent();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens delete dialog\r\n     */\r\n    openDeleteDialog() {\r\n        const deleteDialogData: DeleteDialogData = {\r\n            entityTitle: this.entityTitle,\r\n            deleteQuestion: this.deleteQuestion,\r\n            translateValues: this.translateValues,\r\n            deleteConfirmationText: this.deleteConfirmationText,\r\n            additionalChecks: this.additionalChecks,\r\n            entitySummaryTitle: this.entitySummaryTitle,\r\n            fetchEntitySummary: this.fetchEntitySummary,\r\n            actionType: this.actionType,\r\n            buttonType: this.buttonType,\r\n            delete: this.delete,\r\n            dialogError: this.dialogError,\r\n            requireConfirmationOnlyForAdditionalChecks: this.requireConfirmationOnlyForAdditionalChecks,\r\n        };\r\n        this.deleteDialogService.openDeleteDialog(deleteDialogData, this.animation);\r\n    }\r\n\r\n    /**\r\n     * Function is executed when a MouseEvent is registered. Opens the delete Dialog\r\n     * @param event\r\n     */\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n        this.openDeleteDialog();\r\n    }\r\n\r\n    private setTextContent() {\r\n        this.renderer.setProperty(this.deleteTextSpan, 'textContent', this.translateService.instant(`entity.action.${this.actionType}`));\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "entitySummaryTitle", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "summaryKey_r3", "\u0275\u0275textInterpolate", "entitySummary", "\u0275\u0275template", "DeleteDialogComponent_Conditional_25_For_4_Conditional_1_Template", "\u0275\u0275conditional", "undefined", "\u0275\u0275repeaterCreate", "DeleteDialogComponent_Conditional_25_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "objectKeys", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r4", "checkKey_r5", "\u0275\u0275nextContext", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "additionalChecksValues", "\u0275\u0275resetView", "\u0275\u0275propertyInterpolate1", "\u0275$index_89_r7", "\u0275\u0275twoWayProperty", "\u0275\u0275pipeBind1", "additionalChecks", "DeleteDialogComponent_Conditional_26_For_4_Conditional_3_Template", "DeleteDialogComponent_Conditional_26_For_4_Template", "_r8", "confirmEntityName", "deleteConfirmationText", "entityTitle", "faSpinner", "useFaCheckIcon", "faCheck", "faTrash", "faUndo", "faTimes", "DeleteDialogComponent", "activeModal", "inject", "NgbActiveModal", "alertService", "AlertService", "actionTypes", "ActionType", "dialogErrorSubscription", "dialogError", "delete", "submitDisabled", "buttonType", "deleteForm", "deleteQuestion", "translateValues", "requireConfirmationOnlyForAdditionalChecks", "actionType", "Object", "keys", "faBan", "warningTextColor", "ngOnInit", "subscribe", "errorMessage", "clear", "error", "mapValues", "ButtonType", "ERROR", "ngOnDestroy", "unsubscribe", "close", "confirmDelete", "emit", "isAnyAdditionalCheckSelected", "values", "some", "check", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275listener", "_r1", "DeleteDialogComponent_Case_7_Template", "DeleteDialogComponent_Case_8_Template", "DeleteDialogComponent_Case_9_Template", "DeleteDialogComponent_Case_10_Template", "DeleteDialogComponent_Case_11_Template", "DeleteDialogComponent_Case_12_Template", "DeleteDialogComponent_Case_13_Template", "DeleteDialogComponent_Conditional_24_Template", "DeleteDialogComponent_Conditional_25_Template", "DeleteDialogComponent_Conditional_26_Template", "DeleteDialogComponent_Conditional_27_Template", "DeleteDialogComponent_Conditional_40_Template", "DeleteDialogComponent_Case_41_Template", "DeleteDialogComponent_Case_42_Template", "DeleteDialogComponent_Case_43_Template", "DeleteDialogComponent_Case_44_Template", "DeleteDialogComponent_Case_45_Template", "DeleteDialogComponent_Case_46_Template", "DeleteDialogComponent_Case_47_Template", "tmp_1_0", "Delete", "Reset", "Cleanup", "Remove", "Unlink", "NoButtonTextDelete", "EndNow", "\u0275\u0275styleProp", "deleteForm_r9", "invalid", "\u0275\u0275pureFunction1", "_c1", "tmp_14_0", "FormsModule", "\u0275NgNoValidate", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "TranslateDirective", "ConfirmEntityNameComponent", "FaIconComponent", "NgClass", "ArtemisTranslatePipe", "encapsulation", "DeleteDialogService", "modalService", "inject", "NgbModal", "alertService", "AlertService", "modalRef", "openDeleteDialog", "deleteDialogData", "animation", "closeAll", "open", "DeleteDialogComponent", "size", "backdrop", "componentInstance", "entityTitle", "deleteQuestion", "translateValues", "__spreadProps", "__spreadValues", "title", "deleteConfirmationText", "additionalChecks", "entitySummaryTitle", "fetchEntitySummary", "actionType", "buttonType", "delete", "dialogError", "requireConfirmationOnlyForAdditionalChecks", "undefined", "fetchAndSetEntitySummary", "from", "result", "subscribe", "next", "entitySummary", "error", "message", "factory", "\u0275fac", "providedIn", "DeleteButtonDirective", "deleteDialogService", "inject", "DeleteDialogService", "renderer", "Renderer2", "elementRef", "ElementRef", "translateService", "TranslateService", "entityTitle", "deleteQuestion", "entitySummaryTitle", "fetchEntitySummary", "translateValues", "deleteConfirmationText", "buttonSize", "ButtonSize", "SMALL", "additionalChecks", "actionType", "ActionType", "Delete", "buttonType", "ButtonType", "ERROR", "renderButtonStyle", "renderButtonText", "requireConfirmationOnlyForAdditionalChecks", "dialogError", "delete", "EventEmitter", "animation", "deleteTextSpan", "ngOnInit", "addClass", "nativeElement", "setProperty", "createElement", "setTextContent", "appendChild", "onLangChange", "subscribe", "openDeleteDialog", "deleteDialogData", "onClick", "event", "preventDefault", "instant", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event"]
}
