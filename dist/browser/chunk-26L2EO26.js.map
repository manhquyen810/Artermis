{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-sidebar.service.ts", "src/main/webapp/app/overview/course-conversations/course-wide-search/course-wide-search.component.ts", "src/main/webapp/app/overview/course-conversations/course-wide-search/course-wide-search.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/channels-create-dialog/channels-create-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/channels-create-dialog/channels-create-dialog.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/channels-overview-dialog/channel-item/channel-item.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/channels-overview-dialog/channel-item/channel-item.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/channels-overview-dialog/channels-overview-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/channels-overview-dialog/channels-overview-dialog.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/group-chat-create-dialog/group-chat-create-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/group-chat-create-dialog/group-chat-create-dialog.component.html", "src/main/webapp/app/overview/course-conversations/dialogs/one-to-one-chat-create-dialog/one-to-one-chat-create-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/one-to-one-chat-create-dialog/one-to-one-chat-create-dialog.component.html", "src/main/webapp/app/overview/course-conversations/code-of-conduct/course-conversations-code-of-conduct.component.ts", "src/main/webapp/app/overview/course-conversations/code-of-conduct/course-conversations-code-of-conduct.component.html", "src/main/webapp/app/overview/course-conversations/layout/conversation-header/conversation-header.component.ts", "src/main/webapp/app/overview/course-conversations/layout/conversation-header/conversation-header.component.html", "src/main/webapp/app/overview/course-conversations/layout/conversation-messages/conversation-messages.component.ts", "src/main/webapp/app/overview/course-conversations/layout/conversation-messages/conversation-messages.component.html", "src/main/webapp/app/overview/course-conversations/layout/conversation-thread-sidebar/conversation-thread-sidebar.component.ts", "src/main/webapp/app/overview/course-conversations/layout/conversation-thread-sidebar/conversation-thread-sidebar.component.html", "src/main/webapp/app/shared/metis/message/message-reply-inline-input/message-reply-inline-input.component.ts", "src/main/webapp/app/shared/metis/message/message-reply-inline-input/message-reply-inline-input.component.html", "src/main/webapp/app/overview/course-conversations/posting-summary/posting-summary.component.ts", "src/main/webapp/app/overview/course-conversations/posting-summary/posting-summary.component.html", "src/main/webapp/app/overview/course-conversations/saved-posts/saved-posts.component.ts", "src/main/webapp/app/overview/course-conversations/saved-posts/saved-posts.component.html", "src/main/webapp/app/overview/course-conversations/course-conversations.component.ts", "src/main/webapp/app/overview/course-conversations/course-conversations.component.html"],
  "sourcesContent": ["import { EventEmitter, Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CourseSidebarService {\r\n    public closeSidebar$: EventEmitter<void> = new EventEmitter();\r\n    public openSidebar$: EventEmitter<void> = new EventEmitter();\r\n    public toggleSidebar$: EventEmitter<void> = new EventEmitter();\r\n\r\n    public closeSidebar(): void {\r\n        this.closeSidebar$.emit();\r\n    }\r\n\r\n    public openSidebar(): void {\r\n        this.openSidebar$.emit();\r\n    }\r\n\r\n    public toggleSidebar(): void {\r\n        this.toggleSidebar$.emit();\r\n    }\r\n}\r\n", "import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewEncapsulation, inject, input, output, viewChild, viewChildren } from '@angular/core';\r\nimport { faChevronLeft, faCircleNotch, faEnvelope, faFilter, faLongArrowAltDown, faLongArrowAltUp, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ChannelDTO, getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { MetisConversationService } from 'app/shared/metis/metis-conversation.service';\r\nimport { PostContextFilter, PostSortCriterion, SortDirection } from 'app/shared/metis/metis.util';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { CourseSidebarService } from 'app/overview/course-sidebar.service';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { InfiniteScrollDirective } from 'ngx-infinite-scroll';\r\nimport { PostingThreadComponent } from 'app/shared/metis/posting-thread/posting-thread.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-wide-search',\r\n    templateUrl: './course-wide-search.component.html',\r\n    styleUrls: ['./course-wide-search.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [NgClass, TranslateDirective, FaIconComponent, FormsModule, ReactiveFormsModule, NgbTooltip, InfiniteScrollDirective, PostingThreadComponent, ArtemisTranslatePipe],\r\n})\r\nexport class CourseWideSearchComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    readonly courseWideSearchConfig = input.required<CourseWideSearchConfig>();\r\n\r\n    readonly messages = viewChildren<ElementRef>('postingThread');\r\n    readonly messages$ = toObservable(this.messages);\r\n    readonly content = viewChild<ElementRef>('container');\r\n\r\n    readonly openThread = output<Post>();\r\n\r\n    course: Course;\r\n    currentPostContextFilter?: PostContextFilter;\r\n    // as set for the css class '.posting-infinite-scroll-container'\r\n    messagesContainerHeight = 700;\r\n\r\n    readonly faPlus = faPlus;\r\n    readonly faFilter = faFilter;\r\n    readonly faLongArrowAltUp = faLongArrowAltUp;\r\n    readonly faLongArrowAltDown = faLongArrowAltDown;\r\n    readonly faTimes = faTimes;\r\n    readonly faEnvelope = faEnvelope;\r\n    readonly faCircleNotch = faCircleNotch;\r\n    readonly faChevronLeft = faChevronLeft;\r\n\r\n    readonly SortDirection = SortDirection;\r\n    sortingOrder = SortDirection.ASCENDING;\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n    public isFetchingPosts = true;\r\n    totalNumberOfPosts = 0;\r\n    posts: Post[] = [];\r\n    previousScrollDistanceFromTop: number;\r\n    page = 1;\r\n\r\n    formGroup: FormGroup;\r\n\r\n    getAsChannel = getAsChannelDTO;\r\n\r\n    private courseSidebarService = inject(CourseSidebarService);\r\n    private metisService = inject(MetisService);\r\n    private metisConversationService = inject(MetisConversationService);\r\n    private formBuilder = inject(FormBuilder);\r\n    private cdr = inject(ChangeDetectorRef);\r\n\r\n    ngOnInit() {\r\n        this.subscribeToMetis();\r\n        this.resetFormGroup();\r\n        this.cdr.detectChanges();\r\n        this.onSearch();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.messages$.pipe(takeUntil(this.ngUnsubscribe)).subscribe(this.handleScrollOnNewMessage);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    openSidebar() {\r\n        this.courseSidebarService.openSidebar();\r\n    }\r\n\r\n    private subscribeToMetis() {\r\n        this.metisService.posts.pipe(takeUntil(this.ngUnsubscribe)).subscribe((posts: Post[]) => {\r\n            this.setPosts(posts);\r\n            this.isFetchingPosts = false;\r\n        });\r\n        this.metisService.totalNumberOfPosts.pipe(takeUntil(this.ngUnsubscribe)).subscribe((totalNumberOfPosts: number) => {\r\n            this.totalNumberOfPosts = totalNumberOfPosts;\r\n        });\r\n    }\r\n\r\n    setPosts(posts: Post[]): void {\r\n        if (this.content()) {\r\n            this.previousScrollDistanceFromTop = this.content()!.nativeElement.scrollHeight - this.content()!.nativeElement.scrollTop;\r\n        }\r\n        this.posts = posts.slice().reverse();\r\n    }\r\n\r\n    handleScrollOnNewMessage = () => {\r\n        if (\r\n            (this.posts.length > 0 && this.content() && this.content()!.nativeElement.scrollTop === 0 && this.page === 1) ||\r\n            this.previousScrollDistanceFromTop === this.messagesContainerHeight\r\n        ) {\r\n            this.scrollToBottomOfMessages();\r\n        }\r\n    };\r\n\r\n    scrollToBottomOfMessages() {\r\n        if (!this.content()) return;\r\n        this.content()!.nativeElement.scrollTop = this.content()!.nativeElement.scrollHeight;\r\n    }\r\n\r\n    fetchNextPage() {\r\n        const morePostsAvailable = this.posts.length < this.totalNumberOfPosts;\r\n        if (morePostsAvailable) {\r\n            this.page += 1;\r\n            this.commandMetisToFetchPosts();\r\n        }\r\n        if (!this.content()) return;\r\n        this.content()!.nativeElement.scrollTop = this.content()!.nativeElement.scrollTop + 50;\r\n    }\r\n\r\n    public commandMetisToFetchPosts(forceUpdate = false) {\r\n        this.refreshMetisConversationPostContextFilter();\r\n        if (this.currentPostContextFilter) {\r\n            this.isFetchingPosts = true; // will be set to false in subscription\r\n            this.metisService.getFilteredPosts(this.currentPostContextFilter, forceUpdate);\r\n        }\r\n    }\r\n\r\n    private refreshMetisConversationPostContextFilter(): void {\r\n        const searchConfig = this.courseWideSearchConfig();\r\n\r\n        if (!searchConfig) return;\r\n\r\n        this.currentPostContextFilter = {\r\n            courseId: this.course?.id,\r\n            searchText: searchConfig.searchTerm ? searchConfig.searchTerm.trim() : undefined,\r\n            postSortCriterion: PostSortCriterion.CREATION_DATE,\r\n            filterToUnresolved: searchConfig.filterToUnresolved,\r\n            filterToOwn: searchConfig.filterToOwn,\r\n            filterToAnsweredOrReacted: searchConfig.filterToAnsweredOrReacted,\r\n            sortingOrder: searchConfig.sortingOrder,\r\n            pagingEnabled: true,\r\n            page: this.page - 1,\r\n            pageSize: 50,\r\n        };\r\n        this.metisConversationService.conversationsOfUser$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((conversations: ConversationDTO[]) => {\r\n            this.currentPostContextFilter!.courseWideChannelIds = conversations\r\n                .filter((conversation) => !(this.currentPostContextFilter?.filterToUnresolved && this.conversationIsAnnouncement(conversation)))\r\n                .map((conversation) => conversation.id!);\r\n        });\r\n    }\r\n\r\n    conversationIsAnnouncement(conversation: ConversationDTO) {\r\n        if (conversation.type === 'channel') {\r\n            const channel = conversation as ChannelDTO;\r\n            return channel.isAnnouncementChannel;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    postsTrackByFn = (index: number, post: Post): number => post.id!;\r\n\r\n    setPostForThread(post: Post) {\r\n        this.openThread.emit(post);\r\n    }\r\n\r\n    onSearch() {\r\n        this.commandMetisToFetchPosts(true);\r\n    }\r\n\r\n    resetFormGroup(): void {\r\n        this.formGroup = this.formBuilder.group({\r\n            filterToUnresolved: false,\r\n            filterToOwn: false,\r\n            filterToAnsweredOrReacted: false,\r\n        });\r\n    }\r\n\r\n    onChangeSortDir(): void {\r\n        this.sortingOrder = this.sortingOrder === SortDirection.DESCENDING ? SortDirection.ASCENDING : SortDirection.DESCENDING;\r\n        this.onSelectContext();\r\n    }\r\n\r\n    onSelectContext(): void {\r\n        const searchConfig = this.courseWideSearchConfig();\r\n        if (!searchConfig) return;\r\n        searchConfig.filterToUnresolved = this.formGroup.get('filterToUnresolved')?.value;\r\n        searchConfig.filterToOwn = this.formGroup.get('filterToOwn')?.value;\r\n        searchConfig.filterToAnsweredOrReacted = this.formGroup.get('filterToAnsweredOrReacted')?.value;\r\n        searchConfig.sortingOrder = this.sortingOrder;\r\n        this.onSearch();\r\n    }\r\n}\r\n\r\nexport class CourseWideSearchConfig {\r\n    searchTerm: string;\r\n    filterToUnresolved: boolean;\r\n    filterToOwn: boolean;\r\n    filterToAnsweredOrReacted: boolean;\r\n    sortingOrder: SortDirection;\r\n}\r\n", "<div class=\"course-wide-search-mobile-disclaimer\" [ngClass]=\"{ 'is-not-in-active-search': !courseWideSearchConfig().searchTerm }\">\r\n    <span class=\"mb-2\" jhiTranslate=\"artemisApp.metis.overview.mobileDisclaimer\"></span>\r\n    <button class=\"btn btn-outline-secondary\" jhiTranslate=\"artemisApp.metis.overview.mobileDisclaimerCallToAction\" (click)=\"openSidebar()\"></button>\r\n</div>\r\n<div [ngClass]=\"{ 'is-not-in-active-search': !courseWideSearchConfig().searchTerm }\">\r\n    <div class=\"mt-2 mx-2\">\r\n        <div>\r\n            <h4 class=\"d-inline-block rounded p-1 info\">\r\n                @if (!courseWideSearchConfig().searchTerm) {\r\n                    <span jhiTranslate=\"artemisApp.metis.overview.allPublicMessages\"></span>\r\n                } @else {\r\n                    <button class=\"btn btn-sm btn-outline-secondary d-inline-block d-sm-none me-2\" (click)=\"openSidebar()\">\r\n                        <fa-icon [icon]=\"faChevronLeft\" />\r\n                    </button>\r\n                    <span jhiTranslate=\"artemisApp.metis.overview.searchResults\" [translateValues]=\"{ search: courseWideSearchConfig().searchTerm }\"></span>\r\n                }\r\n            </h4>\r\n        </div>\r\n        @if (formGroup) {\r\n            <div class=\"mb-1\">\r\n                <form [formGroup]=\"formGroup\">\r\n                    <!-- filter and sort controls -->\r\n                    <div class=\"ms-3 me-1 d-flex justify-content-between flex-wrap\">\r\n                        <!-- attribute filter -->\r\n                        <div class=\"row\">\r\n                            <div class=\"col-auto p-0\">\r\n                                <fa-icon [icon]=\"faFilter\" />\r\n                            </div>\r\n                            <div class=\"col-auto p-0 ps-2\">\r\n                                <input\r\n                                    class=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    formControlName=\"filterToUnresolved\"\r\n                                    name=\"filterToUnresolved\"\r\n                                    id=\"filterToUnresolved\"\r\n                                    (change)=\"onSelectContext()\"\r\n                                />\r\n                                <label for=\"filterToUnresolved\" class=\"p-0\" jhiTranslate=\"artemisApp.metis.overview.filterToUnresolved\"></label>\r\n                            </div>\r\n                            <div class=\"col-auto p-0 ps-2\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" formControlName=\"filterToOwn\" name=\"filterToOwn\" id=\"filterToOwn\" (change)=\"onSelectContext()\" />\r\n                                <label for=\"filterToOwn\" class=\"p-0\" jhiTranslate=\"artemisApp.metis.overview.filterToOwn\"></label>\r\n                            </div>\r\n                            <div class=\"col-auto p-0 ps-2\">\r\n                                <input\r\n                                    class=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    formControlName=\"filterToAnsweredOrReacted\"\r\n                                    name=\"filterToAnsweredOrReacted\"\r\n                                    id=\"filterToAnsweredOrReacted\"\r\n                                    (change)=\"onSelectContext()\"\r\n                                />\r\n                                <label for=\"filterToAnsweredOrReacted\" class=\"p-0\" jhiTranslate=\"artemisApp.metis.overview.filterToAnsweredOrReacted\"></label>\r\n                            </div>\r\n                        </div>\r\n                        <!-- sort dropdown -->\r\n                        <div class=\"d-flex\">\r\n                            <div class=\"col-auto p-0 me-1\" jhiTranslate=\"artemisApp.metis.overview.sortedByDate\"></div>\r\n                            <div class=\"col-auto p-0 clickable\" role=\"button\" (click)=\"onChangeSortDir()\">\r\n                                <fa-icon\r\n                                    [icon]=\"sortingOrder === SortDirection.ASCENDING ? faLongArrowAltUp : faLongArrowAltDown\"\r\n                                    [ngbTooltip]=\"\r\n                                        sortingOrder === SortDirection.ASCENDING\r\n                                            ? ('artemisApp.metis.overview.sortAscending' | artemisTranslate)\r\n                                            : ('artemisApp.metis.overview.sortDescending' | artemisTranslate)\r\n                                    \"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        }\r\n        <hr />\r\n        <div class=\"justify-content-center coursewide-search\">\r\n            <div class=\"justify-content-center\">\r\n                <div class=\"row\">\r\n                    <!-- loading messages -->\r\n                    @if (isFetchingPosts) {\r\n                        <div class=\"envelope\">\r\n                            <fa-icon size=\"3x\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n                        </div>\r\n                    }\r\n                    <!-- no message exist -->\r\n                    @if (!isFetchingPosts && posts.length === 0) {\r\n                        <div class=\"envelope\">\r\n                            <fa-icon size=\"5x\" [icon]=\"faEnvelope\" />\r\n                        </div>\r\n                    }\r\n                    <!-- list of messages -->\r\n                    <div\r\n                        id=\"scrollableDiv\"\r\n                        #container\r\n                        [ngClass]=\"{ 'posting-infinite-scroll-container': posts.length !== 0 }\"\r\n                        infinite-scroll\r\n                        [scrollWindow]=\"false\"\r\n                        (scrolledUp)=\"fetchNextPage()\"\r\n                    >\r\n                        <!-- list of all top level posts -->\r\n                        <!-- answers are opened in the thread sidebar -->\r\n                        @for (post of posts; track postsTrackByFn($index, post)) {\r\n                            <div class=\"pt-2\">\r\n                                <jhi-posting-thread\r\n                                    #postingThread\r\n                                    [lastReadDate]=\"post.conversation?.lastMessageDate\"\r\n                                    [hasChannelModerationRights]=\"!!getAsChannel(post.conversation)?.hasChannelModerationRights\"\r\n                                    [id]=\"'item-' + post.id\"\r\n                                    [post]=\"post\"\r\n                                    [showAnswers]=\"false\"\r\n                                    [readOnlyMode]=\"!!getAsChannel(post.conversation)?.isArchived\"\r\n                                    [isCommunicationPage]=\"true\"\r\n                                    [showChannelReference]=\"true\"\r\n                                    (openThread)=\"setPostForThread($event)\"\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { ChannelFormData, ChannelType } from 'app/overview/course-conversations/dialogs/channels-create-dialog/channel-form/channel-form.component';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ChannelFormComponent } from './channel-form/channel-form.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-channels-create-dialog',\r\n    templateUrl: './channels-create-dialog.component.html',\r\n    imports: [TranslateDirective, ChannelFormComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ChannelsCreateDialogComponent extends AbstractDialogComponent {\r\n    @Input() course: Course;\r\n\r\n    initialize() {\r\n        super.initialize(['course']);\r\n    }\r\n\r\n    channelToCreate: ChannelDTO = new ChannelDTO();\r\n    isPublicChannel = true;\r\n    isAnnouncementChannel = false;\r\n    isCourseWideChannel = false;\r\n\r\n    onChannelTypeChanged($event: ChannelType) {\r\n        this.isPublicChannel = $event === 'PUBLIC';\r\n    }\r\n\r\n    onIsAnnouncementChannelChanged($event: boolean) {\r\n        this.isAnnouncementChannel = $event;\r\n    }\r\n\r\n    onIsCourseWideChannelChanged($event: boolean) {\r\n        this.isCourseWideChannel = $event;\r\n    }\r\n\r\n    onFormSubmitted($event: ChannelFormData) {\r\n        this.createChannel($event);\r\n    }\r\n\r\n    createChannel(formData: ChannelFormData) {\r\n        const { name, description, isPublic, isAnnouncementChannel, isCourseWideChannel } = formData;\r\n        this.channelToCreate.name = name ? name.trim() : undefined;\r\n        this.channelToCreate.description = description ? description.trim() : undefined;\r\n        this.channelToCreate.isPublic = isPublic ?? false;\r\n        this.channelToCreate.isAnnouncementChannel = isAnnouncementChannel ?? false;\r\n        this.channelToCreate.isCourseWide = isCourseWideChannel ?? false;\r\n        this.close(this.channelToCreate);\r\n    }\r\n}\r\n", "@if (isInitialized) {\r\n    <div class=\"channels-overview\" ngbAutofocus>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">\r\n                <span\r\n                    >{{ (isPublicChannel ? 'artemisApp.dialogs.createChannel.titlePublicChannel' : 'artemisApp.dialogs.createChannel.titlePrivateChannel') | artemisTranslate }}\r\n                    {{ isCourseWideChannel ? ('artemisApp.dialogs.createChannel.titleCourseWideChannel' | artemisTranslate) : '' }}\r\n                    {{\r\n                        (isAnnouncementChannel ? 'artemisApp.dialogs.createChannel.titleAnnouncementChannel' : 'artemisApp.dialogs.createChannel.titleRegularChannel')\r\n                            | artemisTranslate\r\n                    }}\r\n                </span>\r\n            </h4>\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"dismiss()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <p jhiTranslate=\"artemisApp.dialogs.createChannel.description\"></p>\r\n            <jhi-channel-form\r\n                (channelTypeChanged)=\"onChannelTypeChanged($event)\"\r\n                (isAnnouncementChannelChanged)=\"onIsAnnouncementChannelChanged($event)\"\r\n                (isCourseWideChannelChanged)=\"onIsCourseWideChannelChanged($event)\"\r\n                (formSubmitted)=\"onFormSubmitted($event)\"\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { ChannelAction, ChannelActionType } from 'app/overview/course-conversations/dialogs/channels-overview-dialog/channels-overview-dialog.component';\r\nimport { ChannelIconComponent } from 'app/overview/course-conversations/other/channel-icon/channel-icon.component';\r\nimport { canJoinChannel, canLeaveConversation } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-channel-item',\r\n    templateUrl: './channel-item.component.html',\r\n    styleUrls: ['./channel-item.component.scss'],\r\n    imports: [ChannelIconComponent, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class ChannelItemComponent {\r\n    canJoinChannel = canJoinChannel;\r\n    canLeaveConversation = canLeaveConversation;\r\n\r\n    @Output()\r\n    channelAction = new EventEmitter<ChannelAction>();\r\n    @Input()\r\n    channel: ChannelDTO;\r\n\r\n    emitChannelAction($event: MouseEvent, action: ChannelActionType) {\r\n        $event.stopPropagation();\r\n        this.channelAction.emit({\r\n            action,\r\n            channel: this.channel,\r\n        } as ChannelAction);\r\n    }\r\n}\r\n", "@if (channel) {\r\n    <div class=\"d-flex justify-content-between align-items-start channel-item\">\r\n        <div class=\"ms-2 me-auto\">\r\n            <div class=\"fw-bold\">\r\n                <span>\r\n                    <jhi-channel-icon [isPublic]=\"channel.isPublic!\" [isAnnouncementChannel]=\"channel.isAnnouncementChannel!\" />\r\n                </span>\r\n                <span>{{ channel.name }}</span>\r\n            </div>\r\n            @if (channel.isMember) {\r\n                <span class=\"badge bg-success rounded-pill\">{{ 'artemisApp.dialogs.channelOverview.channelItem.joined:' | artemisTranslate }}</span>\r\n            }\r\n            <span> {{ channel.numberOfMembers }} {{ 'artemisApp.dialogs.channelOverview.channelItem.members' | artemisTranslate }}</span>\r\n            @if (channel.description && channel.description.length > 0) {\r\n                <div>\r\n                    <span class=\"d-inline-block text-truncate long-text fst-italic\"> {{ channel.description }}</span>\r\n                </div>\r\n            }\r\n            @if (channel.tutorialGroupId && channel.tutorialGroupTitle) {\r\n                <div>\r\n                    <span\r\n                        class=\"badge bg-info rounded-pill\"\r\n                        jhiTranslate=\"artemisApp.entities.tutorialGroup.channelReverse\"\r\n                        [translateValues]=\"{ title: channel.tutorialGroupTitle }\"\r\n                    ></span>\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"interaction\">\r\n            @if (canJoinChannel(channel)) {\r\n                <button\r\n                    [id]=\"'register' + channel.id\"\r\n                    type=\"button\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"emitChannelAction($event, 'register')\"\r\n                    jhiTranslate=\"artemisApp.dialogs.channelOverview.actions.join\"\r\n                ></button>\r\n                <!--ToDo:  Introduce method to view public channel even if no participant maybe hacky around with visitor status or something? -->\r\n            }\r\n            @if (!!channel.isMember) {\r\n                <button\r\n                    [id]=\"'view' + channel.id\"\r\n                    type=\"button\"\r\n                    class=\"btn btn-secondary\"\r\n                    (click)=\"emitChannelAction($event, 'view')\"\r\n                    jhiTranslate=\"artemisApp.dialogs.channelOverview.actions.view\"\r\n                ></button>\r\n            }\r\n            @if (canLeaveConversation(channel)) {\r\n                <button\r\n                    [id]=\"'deregister' + channel.id\"\r\n                    type=\"button\"\r\n                    class=\"btn btn-danger\"\r\n                    (click)=\"emitChannelAction($event, 'deregister')\"\r\n                    jhiTranslate=\"artemisApp.dialogs.channelOverview.actions.leave\"\r\n                ></button>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Observable, Subject, debounceTime, distinctUntilChanged, finalize, map, takeUntil } from 'rxjs';\r\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { ChannelDTO, ChannelSubType } from 'app/entities/metis/conversation/channel.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { canCreateChannel } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { LoadingIndicatorContainerComponent } from 'app/shared/loading-indicator-container/loading-indicator-container.component';\r\nimport { ChannelItemComponent } from './channel-item/channel-item.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport type ChannelActionType = 'register' | 'deregister' | 'view' | 'create';\r\nexport type ChannelAction = {\r\n    action: ChannelActionType;\r\n    channel: ChannelDTO;\r\n};\r\n@Component({\r\n    selector: 'jhi-channels-overview-dialog',\r\n    templateUrl: './channels-overview-dialog.component.html',\r\n    styleUrls: ['./channels-overview-dialog.component.scss'],\r\n    imports: [LoadingIndicatorContainerComponent, ChannelItemComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ChannelsOverviewDialogComponent extends AbstractDialogComponent implements OnInit, OnDestroy {\r\n    private channelService = inject(ChannelService);\r\n    private alertService = inject(AlertService);\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    canCreateChannel = canCreateChannel;\r\n\r\n    @Input() createChannelFn?: (channel: ChannelDTO) => Observable<never>;\r\n    @Input() course: Course;\r\n    @Input() channelSubType: ChannelSubType;\r\n\r\n    channelActions$ = new Subject<ChannelAction>();\r\n\r\n    noOfChannels = 0;\r\n    channelModificationPerformed = false;\r\n    isLoading = false;\r\n    channels: ChannelDTO[] = [];\r\n\r\n    isInitialized = false;\r\n\r\n    faChevronRight = faChevronRight;\r\n\r\n    initialize() {\r\n        super.initialize(['course', 'channelSubType']);\r\n        if (this.isInitialized) {\r\n            this.loadChannelsOfCourse();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.channelActions$.pipe(debounceTime(500), distinctUntilChanged(), takeUntil(this.ngUnsubscribe)).subscribe((channelAction) => {\r\n            this.performChannelAction(channelAction);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    clear() {\r\n        if (this.channelModificationPerformed) {\r\n            this.close([undefined, true]);\r\n        } else {\r\n            this.dismiss();\r\n        }\r\n    }\r\n\r\n    onChannelAction(channelAction: ChannelAction) {\r\n        this.channelActions$.next(channelAction);\r\n    }\r\n\r\n    performChannelAction(channelAction: ChannelAction) {\r\n        switch (channelAction.action) {\r\n            case 'register':\r\n                this.channelService\r\n                    .registerUsersToChannel(this.course.id!, channelAction.channel.id!)\r\n                    .pipe(takeUntil(this.ngUnsubscribe))\r\n                    .subscribe(() => {\r\n                        this.loadChannelsOfCourse();\r\n                        this.channelModificationPerformed = true;\r\n                    });\r\n                break;\r\n            case 'deregister':\r\n                this.channelService\r\n                    .deregisterUsersFromChannel(this.course.id!, channelAction.channel.id!)\r\n                    .pipe(takeUntil(this.ngUnsubscribe))\r\n                    .subscribe(() => {\r\n                        this.loadChannelsOfCourse();\r\n                        this.channelModificationPerformed = true;\r\n                    });\r\n                break;\r\n            case 'view':\r\n                this.close([channelAction.channel, this.channelModificationPerformed]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    loadChannelsOfCourse() {\r\n        this.isLoading = true;\r\n        this.channelService\r\n            .getChannelsOfCourse(this.course.id!)\r\n            .pipe(\r\n                map((res: HttpResponse<ChannelDTO[]>) => res.body),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (channels: ChannelDTO[]) => {\r\n                    this.channels = channels;\r\n                    this.noOfChannels = this.channels.length;\r\n                },\r\n                error: (errorResponse: HttpErrorResponse) => {\r\n                    onError(this.alertService, errorResponse);\r\n                },\r\n            });\r\n    }\r\n}\r\n", "<jhi-loading-indicator-container [isLoading]=\"isLoading\">\r\n    @if (isInitialized) {\r\n        <div class=\"channels-overview\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">\r\n                    <span>{{ 'artemisApp.dialogs.channelOverview.title' | artemisTranslate: { courseTitle: course.title } }}</span>\r\n                </h4>\r\n                <button type=\"button\" class=\"btn-close\" (click)=\"clear()\"></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <!-- Overview Table -->\r\n                @if (channels && channels.length > 0) {\r\n                    <div class=\"form-group mt-2\">\r\n                        <div class=\"table-wrapper-scroll-y scrollbar\">\r\n                            <ul class=\"list-group\">\r\n                                @for (channel of channels; track channels.indexOf(channel)) {\r\n                                    <li [id]=\"'channel-' + channel.id\" class=\"list-group-item\">\r\n                                        <jhi-channel-item [channel]=\"channel\" (channelAction)=\"onChannelAction($event)\" />\r\n                                    </li>\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    }\r\n</jhi-loading-indicator-container>\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CourseUsersSelectorComponent } from 'app/shared/course-users-selector/course-users-selector.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-group-chat-create-dialog',\r\n    templateUrl: './group-chat-create-dialog.component.html',\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule, CourseUsersSelectorComponent, ArtemisTranslatePipe],\r\n})\r\nexport class GroupChatCreateDialogComponent extends AbstractDialogComponent {\r\n    private fb = inject(FormBuilder);\r\n\r\n    @Input() course: Course;\r\n    form: FormGroup;\r\n\r\n    initialize() {\r\n        super.initialize(['course']);\r\n        if (this.isInitialized) {\r\n            this.initializeForm();\r\n        }\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.form) {\r\n            return;\r\n        }\r\n        const validators = [Validators.required, Validators.maxLength(9)];\r\n\r\n        this.form = this.fb.group({\r\n            selectedUsers: [[], validators],\r\n        });\r\n    }\r\n\r\n    get selectedUsersControl() {\r\n        return this.form.get('selectedUsers');\r\n    }\r\n\r\n    get isSubmitPossible() {\r\n        return !this.form.invalid;\r\n    }\r\n\r\n    clear() {\r\n        this.dismiss();\r\n    }\r\n\r\n    onSubmit() {\r\n        this.close(this.selectedUsersControl?.value ?? []);\r\n    }\r\n}\r\n", "@if (isInitialized) {\r\n    <div ngbAutofocus>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">\r\n                <span jhiTranslate=\"artemisApp.dialogs.createGroupChat.title\"></span>\r\n            </h4>\r\n            <button type=\"button\" class=\"btn-close dismiss\" (click)=\"clear()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\r\n                <jhi-course-users-selector\r\n                    formControlName=\"selectedUsers\"\r\n                    [courseId]=\"course.id!\"\r\n                    [label]=\"'artemisApp.dialogs.createGroupChat.userSelectorLabel' | artemisTranslate\"\r\n                />\r\n                @if (selectedUsersControl?.invalid && (selectedUsersControl?.dirty || selectedUsersControl?.touched)) {\r\n                    <div class=\"alert alert-danger\">\r\n                        @if (selectedUsersControl?.errors?.required) {\r\n                            <div jhiTranslate=\"artemisApp.dialogs.createGroupChat.requiredError\"></div>\r\n                        }\r\n                        @if (selectedUsersControl?.errors?.maxlength) {\r\n                            <div jhiTranslate=\"artemisApp.dialogs.createGroupChat.maxError\" [translateValues]=\"{ max: 9 }\"></div>\r\n                        }\r\n                    </div>\r\n                }\r\n                <div class=\"row mt-3\">\r\n                    <div class=\"col-12 text-end\">\r\n                        <button type=\"submit\" id=\"submitButton\" [disabled]=\"!isSubmitPossible\" class=\"btn btn-primary\">\r\n                            <span jhiTranslate=\"artemisApp.dialogs.createGroupChat.confirmButton\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { AbstractDialogComponent } from 'app/overview/course-conversations/dialogs/abstract-dialog.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CourseUsersSelectorComponent } from 'app/shared/course-users-selector/course-users-selector.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-one-to-one-chat-create-dialog',\r\n    templateUrl: './one-to-one-chat-create-dialog.component.html',\r\n    imports: [TranslateDirective, CourseUsersSelectorComponent, FormsModule, ArtemisTranslatePipe],\r\n})\r\nexport class OneToOneChatCreateDialogComponent extends AbstractDialogComponent {\r\n    @Input() course: Course;\r\n\r\n    isInitialized = false;\r\n    selectedUsers: UserPublicInfoDTO[] = [];\r\n    userToChatWith?: UserPublicInfoDTO;\r\n\r\n    initialize() {\r\n        super.initialize(['course']);\r\n    }\r\n\r\n    clear() {\r\n        this.dismiss();\r\n    }\r\n\r\n    onUserSelected() {\r\n        this.close(this.userToChatWith);\r\n    }\r\n\r\n    onSelectedUsersChange(selectedUsers: UserPublicInfoDTO[]) {\r\n        if (selectedUsers && selectedUsers.length > 0) {\r\n            this.selectedUsers = selectedUsers;\r\n            this.userToChatWith = this.selectedUsers[0];\r\n            this.onUserSelected();\r\n        }\r\n    }\r\n}\r\n", "@if (isInitialized) {\r\n    <div ngbAutofocus>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">\r\n                <span jhiTranslate=\"artemisApp.dialogs.createOneToOneChat.title\"></span>\r\n            </h4>\r\n            <button type=\"button\" class=\"btn-close dismiss\" (click)=\"clear()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <jhi-course-users-selector\r\n                [ngModel]=\"selectedUsers\"\r\n                (ngModelChange)=\"onSelectedUsersChange($event)\"\r\n                [multiSelect]=\"false\"\r\n                [showUserList]=\"false\"\r\n                [courseId]=\"course.id!\"\r\n                [label]=\"'artemisApp.dialogs.createOneToOneChat.userSelectorLabel' | artemisTranslate\"\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, OnInit, inject, input } from '@angular/core';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-conversations-code-of-conduct',\r\n    templateUrl: './course-conversations-code-of-conduct.component.html',\r\n    imports: [TranslateDirective, HtmlForMarkdownPipe],\r\n})\r\nexport class CourseConversationsCodeOfConductComponent implements OnInit {\r\n    private alertService = inject(AlertService);\r\n    private conversationService = inject(ConversationService);\r\n\r\n    course = input.required<Course>();\r\n\r\n    responsibleContacts: User[] = [];\r\n\r\n    ngOnInit() {\r\n        if (this.course().id) {\r\n            this.conversationService.getResponsibleUsersForCodeOfConduct(this.course().id!).subscribe({\r\n                next: (res: HttpResponse<User[]>) => {\r\n                    if (res.body) {\r\n                        this.responsibleContacts = res.body;\r\n                    }\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<h3 jhiTranslate=\"artemisApp.codeOfConduct.title\"></h3>\r\n<div [innerHTML]=\"course().courseInformationSharingMessagingCodeOfConduct || '' | htmlForMarkdown\"></div>\r\n<ul>\r\n    @for (user of responsibleContacts; track user) {\r\n        <li>\r\n            {{ user.name }} (<a href=\"mailto:{{ user.email }}\">{{ user.email }}</a\r\n            >)\r\n        </li>\r\n    }\r\n</ul>\r\n", "import { ChangeDetectorRef, Component, EventEmitter, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, inject, input, output } from '@angular/core';\r\nimport { faChevronLeft, faPeopleGroup, faSearch, faUserGroup, faUserPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ConversationAddUsersDialogComponent } from 'app/overview/course-conversations/dialogs/conversation-add-users-dialog/conversation-add-users-dialog.component';\r\nimport {\r\n    ConversationDetailDialogComponent,\r\n    ConversationDetailTabs,\r\n} from 'app/overview/course-conversations/dialogs/conversation-detail-dialog/conversation-detail-dialog.component';\r\nimport { ChannelDTO, getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { MetisConversationService } from 'app/shared/metis/metis-conversation.service';\r\nimport { EMPTY, Subject, from, takeUntil } from 'rxjs';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { canAddUsersToConversation } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { getAsGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { defaultFirstLayerDialogOptions, getChannelSubTypeReferenceTranslationKey } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { CourseSidebarService } from 'app/overview/course-sidebar.service';\r\nimport { getAsOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ChannelIconComponent } from '../../other/channel-icon/channel-icon.component';\r\nimport { ProfilePictureComponent } from 'app/shared/profile-picture/profile-picture.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { EmojiComponent } from 'app/shared/metis/emoji/emoji.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-header',\r\n    templateUrl: './conversation-header.component.html',\r\n    styleUrls: ['./conversation-header.component.scss'],\r\n    imports: [FaIconComponent, ChannelIconComponent, ProfilePictureComponent, TranslateDirective, RouterLink, EmojiComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ConversationHeaderComponent implements OnInit, OnChanges, OnDestroy {\r\n    private modalService = inject(NgbModal);\r\n    metisConversationService = inject(MetisConversationService);\r\n    conversationService = inject(ConversationService);\r\n    private metisService = inject(MetisService);\r\n    pinnedMessageCount = input<number>(0);\r\n    togglePinnedMessage = output<void>();\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n\r\n    @Output() collapseSearch = new EventEmitter<void>();\r\n    @Output() onUpdateSidebar = new EventEmitter<void>();\r\n\r\n    INFO = ConversationDetailTabs.INFO;\r\n    MEMBERS = ConversationDetailTabs.MEMBERS;\r\n\r\n    course: Course;\r\n    activeConversation?: ConversationDTO;\r\n\r\n    activeConversationAsChannel?: ChannelDTO;\r\n    channelSubTypeReferenceTranslationKey?: string;\r\n    channelSubTypeReferenceRouterLink?: string;\r\n    otherUser?: ConversationUserDTO;\r\n\r\n    faUserPlus = faUserPlus;\r\n    faUserGroup = faUserGroup;\r\n    faSearch = faSearch;\r\n    faChevronLeft = faChevronLeft;\r\n    readonly faPeopleGroup = faPeopleGroup;\r\n    showPinnedMessages: boolean = false;\r\n\r\n    private courseSidebarService: CourseSidebarService = inject(CourseSidebarService);\r\n    private cdr = inject(ChangeDetectorRef);\r\n\r\n    getAsGroupChat = getAsGroupChatDTO;\r\n    getAsOneToOneChat = getAsOneToOneChatDTO;\r\n\r\n    canAddUsers = canAddUsersToConversation;\r\n\r\n    ngOnInit(): void {\r\n        this.course = this.metisConversationService.course!;\r\n        this.subscribeToActiveConversation();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['pinnedMessageCount']) {\r\n            const currentCount = changes['pinnedMessageCount'].currentValue;\r\n            if (this.showPinnedMessages && currentCount === 0) {\r\n                this.showPinnedMessages = false;\r\n                this.cdr.detectChanges();\r\n            }\r\n        }\r\n    }\r\n\r\n    togglePinnedMessages(): void {\r\n        this.togglePinnedMessage.emit();\r\n        this.showPinnedMessages = !this.showPinnedMessages;\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    getOtherUser() {\r\n        const conversation = getAsOneToOneChatDTO(this.activeConversation);\r\n        if (conversation) {\r\n            this.otherUser = conversation.members?.find((user) => !user.isRequestingUser);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    openSidebar() {\r\n        this.courseSidebarService.openSidebar();\r\n    }\r\n\r\n    private subscribeToActiveConversation() {\r\n        this.metisConversationService.activeConversation$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((conversation: ConversationDTO) => {\r\n            this.activeConversation = conversation;\r\n            this.activeConversationAsChannel = getAsChannelDTO(conversation);\r\n            this.channelSubTypeReferenceTranslationKey = getChannelSubTypeReferenceTranslationKey(this.activeConversationAsChannel?.subType);\r\n            this.channelSubTypeReferenceRouterLink = this.metisService.getLinkForChannelSubType(this.activeConversationAsChannel);\r\n            this.getOtherUser();\r\n        });\r\n    }\r\n\r\n    openAddUsersDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(ConversationAddUsersDialogComponent, defaultFirstLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.activeConversation = this.activeConversation;\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe(() => {\r\n                this.metisConversationService.forceRefresh().subscribe({\r\n                    complete: () => {},\r\n                });\r\n            });\r\n    }\r\n\r\n    openConversationDetailDialog(event: MouseEvent, tab: ConversationDetailTabs) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(ConversationDetailDialogComponent, defaultFirstLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.activeConversation = this.activeConversation;\r\n        modalRef.componentInstance.selectedTab = tab;\r\n        if (this.getAsOneToOneChat(this.activeConversation)) {\r\n            modalRef.componentInstance.selectedTab = ConversationDetailTabs.INFO;\r\n        }\r\n        modalRef.componentInstance.initialize();\r\n\r\n        const userNameClicked = modalRef.componentInstance.userNameClicked;\r\n        if (userNameClicked) {\r\n            const subscription = userNameClicked.subscribe((username: number) => {\r\n                modalRef.dismiss();\r\n                this.metisConversationService\r\n                    .createOneToOneChatWithId(username)\r\n                    .pipe(\r\n                        catchError((error) => {\r\n                            return EMPTY;\r\n                        }),\r\n                    )\r\n                    .subscribe();\r\n            });\r\n\r\n            modalRef.closed.subscribe(() => subscription.unsubscribe());\r\n        }\r\n\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe(() => {\r\n                this.metisConversationService.forceRefresh().subscribe({\r\n                    complete: () => {},\r\n                });\r\n                this.onUpdateSidebar.emit();\r\n            });\r\n    }\r\n\r\n    toggleSearchBar() {\r\n        this.collapseSearch.emit();\r\n    }\r\n}\r\n", "@if (activeConversation && course) {\r\n    <div>\r\n        <div class=\"d-flex justify-content-between flex-wrap\">\r\n            <div class=\"d-flex align-items-center px-3\">\r\n                <button class=\"btn btn-sm btn-outline-secondary d-inline-block d-sm-none me-2\" (click)=\"openSidebar()\">\r\n                    <fa-icon [icon]=\"faChevronLeft\" />\r\n                </button>\r\n                <h4 class=\"pointer d-inline-block rounded py-2 info mb-0\" (click)=\"openConversationDetailDialog($event, INFO)\">\r\n                    @if (activeConversationAsChannel) {\r\n                        <jhi-channel-icon [isPublic]=\"activeConversationAsChannel.isPublic!\" [isAnnouncementChannel]=\"activeConversationAsChannel.isAnnouncementChannel!\" />\r\n                    }\r\n                    @if (getAsGroupChat(activeConversation)) {\r\n                        <fa-icon [icon]=\"faPeopleGroup\" size=\"xs\" />\r\n                    }\r\n                    @if (getAsOneToOneChat(activeConversation) && otherUser) {\r\n                        <jhi-profile-picture\r\n                            [imageSizeInRem]=\"'2'\"\r\n                            [fontSizeInRem]=\"'0.9'\"\r\n                            [imageId]=\"'sidebar-profile-picture'\"\r\n                            [defaultPictureId]=\"'sidebar-default-profile-picture'\"\r\n                            [isGray]=\"false\"\r\n                            [authorId]=\"otherUser.id\"\r\n                            [authorName]=\"otherUser.name\"\r\n                            class=\"me-2\"\r\n                            [imageUrl]=\"otherUser.imageUrl\"\r\n                            [isEditable]=\"false\"\r\n                        />\r\n                    }\r\n                    {{ conversationService.getConversationName(activeConversation, true) }}\r\n                </h4>\r\n            </div>\r\n            @if (activeConversationAsChannel) {\r\n                @if (activeConversationAsChannel.tutorialGroupId && activeConversationAsChannel.tutorialGroupTitle) {\r\n                    <div class=\"p-2\">\r\n                        <a\r\n                            class=\"btn btn-info btn-sm\"\r\n                            [routerLink]=\"['/courses', course.id, 'tutorial-groups', activeConversationAsChannel.tutorialGroupId]\"\r\n                            role=\"button\"\r\n                            jhiTranslate=\"artemisApp.entities.tutorialGroup.channelReverse\"\r\n                            [translateValues]=\"{ title: activeConversationAsChannel.tutorialGroupTitle }\"\r\n                        ></a>\r\n                    </div>\r\n                }\r\n            }\r\n            <div class=\"d-flex flex-wrap gap-2 py-2 px-3\">\r\n                <div class=\"btn-toolbar\" role=\"toolbar\">\r\n                    <div class=\"btn-group me-1\" role=\"group\">\r\n                        @if (pinnedMessageCount() > 0) {\r\n                            <div class=\"pinned-messages-button\">\r\n                                <button type=\"button\" (click)=\"togglePinnedMessages()\" class=\"btn btn-sm btn-outline-secondary\">\r\n                                    @if (showPinnedMessages) {\r\n                                        <jhi-emoji class=\"fs-x-small\" emoji=\"x\" />\r\n                                    } @else {\r\n                                        <jhi-emoji emoji=\"pushpin\" />\r\n                                    }\r\n                                    <span>\r\n                                        {{\r\n                                            showPinnedMessages\r\n                                                ? ('artemisApp.metis.showing' | artemisTranslate) +\r\n                                                  (pinnedMessageCount() === 1\r\n                                                      ? ('artemisApp.metis.singlePinned' | artemisTranslate)\r\n                                                      : ('artemisApp.metis.multiplePinned' | artemisTranslate: { number: pinnedMessageCount() }))\r\n                                                : pinnedMessageCount() === 1\r\n                                                  ? ('artemisApp.metis.singlePinned' | artemisTranslate)\r\n                                                  : ('artemisApp.metis.multiplePinned' | artemisTranslate: { number: pinnedMessageCount() })\r\n                                        }}\r\n                                    </span>\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm search\" (click)=\"toggleSearchBar()\">\r\n                            <fa-icon [icon]=\"faSearch\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"btn-toolbar\" role=\"toolbar\">\r\n                    <div class=\"btn-group\" role=\"group\">\r\n                        @if (activeConversationAsChannel?.subTypeReferenceId) {\r\n                            <a\r\n                                [jhiTranslate]=\"channelSubTypeReferenceTranslationKey ?? ''\"\r\n                                class=\"btn btn-sm btn-outline-secondary sub-type-reference\"\r\n                                [routerLink]=\"channelSubTypeReferenceRouterLink\"\r\n                            >\r\n                            </a>\r\n                        }\r\n                        <button type=\"button\" class=\"btn btn-sm btn-outline-secondary members\" (click)=\"openConversationDetailDialog($event, MEMBERS)\">\r\n                            <fa-icon [icon]=\"faUserGroup\" /> {{ activeConversation.numberOfMembers || 0 }}\r\n                        </button>\r\n                        @if (canAddUsers(activeConversation)) {\r\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary addUsers\" (click)=\"openAddUsersDialog($event)\">\r\n                                <fa-icon [icon]=\"faUserPlus\" />\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        @if (activeConversationAsChannel) {\r\n            @if (activeConversationAsChannel.topic && activeConversationAsChannel.topic.length > 0) {\r\n                <div class=\"text-body-secondary d-flex justify-content-between px-2\">\r\n                    <span id=\"conversation-topic\" class=\"d-inline-block mw-100\">{{ activeConversationAsChannel.topic }}</span>\r\n                </div>\r\n            }\r\n        }\r\n    </div>\r\n}\r\n", "import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewChildren,\r\n    ViewEncapsulation,\r\n    effect,\r\n    inject,\r\n    input,\r\n    output,\r\n} from '@angular/core';\r\nimport { faCircleNotch, faEnvelope, faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { Conversation, ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { Subject, forkJoin, map, takeUntil } from 'rxjs';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { PageType, PostContextFilter, PostSortCriterion, SortDirection } from 'app/shared/metis/metis.util';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { Channel, getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { GroupChat, isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { MetisConversationService } from 'app/shared/metis/metis-conversation.service';\r\nimport { OneToOneChat, isOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { canCreateNewMessageInConversation } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { LayoutService } from 'app/shared/breakpoints/layout.service';\r\nimport { CustomBreakpointNames } from 'app/shared/breakpoints/breakpoints.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { PostingThreadComponent } from 'app/shared/metis/posting-thread/posting-thread.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { InfiniteScrollDirective } from 'ngx-infinite-scroll';\r\nimport { NgClass } from '@angular/common';\r\nimport { PostCreateEditModalComponent } from 'app/shared/metis/posting-create-edit-modal/post-create-edit-modal/post-create-edit-modal.component';\r\nimport { MessageInlineInputComponent } from 'app/shared/metis/message/message-inline-input/message-inline-input.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ForwardedMessageDTO } from 'app/entities/metis/forwarded-message.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Posting, PostingType } from 'app/entities/metis/posting.model';\r\n\r\ninterface PostGroup {\r\n    author: User | undefined;\r\n    posts: Post[];\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-messages',\r\n    templateUrl: './conversation-messages.component.html',\r\n    styleUrls: ['./conversation-messages.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        InfiniteScrollDirective,\r\n        NgClass,\r\n        PostingThreadComponent,\r\n        PostCreateEditModalComponent,\r\n        MessageInlineInputComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ConversationMessagesComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\r\n    metisService = inject(MetisService);\r\n    metisConversationService = inject(MetisConversationService);\r\n    cdr = inject(ChangeDetectorRef);\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n    readonly sessionStorageKey = 'conversationId.scrollPosition.';\r\n\r\n    readonly PageType = PageType;\r\n    readonly ButtonType = ButtonType;\r\n\r\n    private scrollDebounceTime = 100; // ms\r\n    scrollSubject = new Subject<number>();\r\n    canStartSaving = false;\r\n    createdNewMessage = false;\r\n\r\n    @Output() openThread = new EventEmitter<Post>();\r\n\r\n    @ViewChild('searchInput') searchInput: ElementRef;\r\n    @ViewChildren('postingThread') messages: QueryList<PostingThreadComponent>;\r\n    @ViewChild('container') content: ElementRef;\r\n\r\n    @Input() course?: Course;\r\n    @Input() searchbarCollapsed = false;\r\n    @Input() contentHeightDev = false;\r\n    showOnlyPinned = input<boolean>(false);\r\n    pinnedCount = output<number>();\r\n    pinnedPosts: Post[] = [];\r\n\r\n    readonly focusPostId = input<number | undefined>(undefined);\r\n    readonly openThreadOnFocus = input<boolean>(false);\r\n\r\n    getAsChannel = getAsChannelDTO;\r\n\r\n    canCreateNewMessageInConversation = canCreateNewMessageInConversation;\r\n\r\n    previousScrollDistanceFromTop: number;\r\n    // as set for the css class '.posting-infinite-scroll-container'\r\n    messagesContainerHeight = 700;\r\n    currentPostContextFilter?: PostContextFilter;\r\n    private readonly search$ = new Subject<string>();\r\n    searchText = '';\r\n    _activeConversation?: ConversationDTO;\r\n    readonly onNavigateToPost = output<Posting>();\r\n\r\n    elementsAtScrollPosition: PostingThreadComponent[];\r\n    newPost?: Post;\r\n    posts: Post[] = [];\r\n    allPosts: Post[] = [];\r\n    groupedPosts: PostGroup[] = [];\r\n    totalNumberOfPosts = 0;\r\n    page = 1;\r\n    public isFetchingPosts = true;\r\n    // Icons\r\n    faTimes = faTimes;\r\n    faSearch = faSearch;\r\n    faEnvelope = faEnvelope;\r\n    faCircleNotch = faCircleNotch;\r\n    isMobile = false;\r\n    isHiddenInputWithCallToAction = false;\r\n    isHiddenInputFull = false;\r\n    focusOnPostId: number | undefined = undefined;\r\n    isOpenThreadOnFocus = false;\r\n\r\n    private layoutService: LayoutService = inject(LayoutService);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.focusOnPostId = this.focusPostId();\r\n            this.isOpenThreadOnFocus = this.openThreadOnFocus();\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['showOnlyPinned'] && !changes['showOnlyPinned'].firstChange) {\r\n            this.setPosts();\r\n        }\r\n    }\r\n\r\n    applyPinnedMessageFilter(): void {\r\n        if (this.showOnlyPinned()) {\r\n            this.posts = this.pinnedPosts;\r\n        } else {\r\n            this.posts = [...this.allPosts];\r\n        }\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscribeToSearch();\r\n        this.subscribeToMetis();\r\n        this.subscribeToActiveConversation();\r\n        this.setupScrollDebounce();\r\n        this.isMobile = this.layoutService.isBreakpointActive(CustomBreakpointNames.extraSmall);\r\n        this.layoutService\r\n            .subscribeToLayoutChanges()\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe(() => {\r\n                this.isMobile = this.layoutService.isBreakpointActive(CustomBreakpointNames.extraSmall);\r\n            });\r\n\r\n        this.metisService\r\n            .getPinnedPosts()\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe((pinnedPosts) => {\r\n                this.pinnedPosts = pinnedPosts;\r\n                this.pinnedCount.emit(pinnedPosts.length);\r\n                this.cdr.detectChanges();\r\n            });\r\n\r\n        this.metisService.fetchAllPinnedPosts(this._activeConversation!.id!).subscribe();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    private subscribeToActiveConversation() {\r\n        this.metisConversationService.activeConversation$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((conversation: ConversationDTO) => {\r\n            if (this._activeConversation && getAsChannelDTO(conversation)?.isArchived !== getAsChannelDTO(this._activeConversation)?.isArchived) {\r\n                this._activeConversation = conversation;\r\n            }\r\n            // This statement avoids a bug that reloads the messages when the conversation is already displayed\r\n            if (conversation && this._activeConversation?.id === conversation.id) {\r\n                return;\r\n            }\r\n            this._activeConversation = conversation;\r\n            this.onActiveConversationChange();\r\n        });\r\n    }\r\n\r\n    private subscribeToSearch() {\r\n        this.search$\r\n            .pipe(\r\n                debounceTime(300),\r\n                distinctUntilChanged(),\r\n                map((searchText: string | null | undefined) => {\r\n                    const cleanedSearchText = searchText !== null && searchText !== undefined ? searchText : '';\r\n                    return cleanedSearchText.trim().toLowerCase();\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (searchText: string) => {\r\n                    this.searchText = searchText;\r\n                    this.onSearch();\r\n                },\r\n            });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.messages.changes.pipe(takeUntil(this.ngUnsubscribe)).subscribe(this.handleScrollOnNewMessage);\r\n        this.messages.changes.pipe(takeUntil(this.ngUnsubscribe)).subscribe(() => {\r\n            if (!this.createdNewMessage && this.posts.length > 0) {\r\n                this.scrollToStoredId();\r\n            } else {\r\n                this.createdNewMessage = false;\r\n            }\r\n        });\r\n        this.content.nativeElement.addEventListener('scroll', () => {\r\n            this.findElementsAtScrollPosition();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n        this.scrollSubject.complete();\r\n        this.content?.nativeElement.removeEventListener('scroll', this.saveScrollPosition);\r\n    }\r\n\r\n    private scrollToStoredId() {\r\n        let savedScrollId;\r\n        if (this.focusOnPostId) {\r\n            savedScrollId = this.focusOnPostId + '';\r\n        } else {\r\n            savedScrollId = sessionStorage.getItem(this.sessionStorageKey + this._activeConversation?.id) ?? '';\r\n        }\r\n        requestAnimationFrame(() => this.goToLastSelectedElement(parseInt(savedScrollId, 10), this.isOpenThreadOnFocus));\r\n    }\r\n\r\n    private onActiveConversationChange() {\r\n        if (this._activeConversation !== undefined && this.getAsChannel(this._activeConversation)?.isAnnouncementChannel) {\r\n            this.isHiddenInputFull = !canCreateNewMessageInConversation(this._activeConversation);\r\n            this.isHiddenInputWithCallToAction = canCreateNewMessageInConversation(this._activeConversation);\r\n        } else {\r\n            this.isHiddenInputFull = false;\r\n            this.isHiddenInputWithCallToAction = false;\r\n        }\r\n\r\n        if (this.course && this._activeConversation) {\r\n            if (this.searchInput) {\r\n                this.searchInput.nativeElement.value = '';\r\n                this.searchText = '';\r\n            }\r\n            this.canStartSaving = false;\r\n            this.onSearch();\r\n            this.createEmptyPost();\r\n            this.metisService.fetchAllPinnedPosts(this._activeConversation!.id!).subscribe({\r\n                next: (pinnedPosts: Post[]) => {\r\n                    this.pinnedPosts = pinnedPosts;\r\n                    this.pinnedCount.emit(pinnedPosts.length);\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private subscribeToMetis() {\r\n        this.metisService.posts.pipe(takeUntil(this.ngUnsubscribe)).subscribe((posts: Post[]) => {\r\n            this.allPosts = posts;\r\n            this.setPosts();\r\n            this.isFetchingPosts = false;\r\n        });\r\n        this.metisService.totalNumberOfPosts.pipe(takeUntil(this.ngUnsubscribe)).subscribe((totalNumberOfPosts: number) => {\r\n            this.totalNumberOfPosts = totalNumberOfPosts;\r\n        });\r\n    }\r\n\r\n    private refreshMetisConversationPostContextFilter(): void {\r\n        this.currentPostContextFilter = {\r\n            courseId: this.course?.id,\r\n            conversationId: this._activeConversation?.id,\r\n            searchText: this.searchText ? this.searchText.trim() : undefined,\r\n            postSortCriterion: PostSortCriterion.CREATION_DATE,\r\n            sortingOrder: SortDirection.DESCENDING,\r\n            pagingEnabled: true,\r\n            page: this.page - 1,\r\n            pageSize: 50,\r\n        };\r\n    }\r\n\r\n    private groupPosts(): void {\r\n        if (!this.posts || this.posts.length === 0) {\r\n            this.groupedPosts = [];\r\n            return;\r\n        }\r\n\r\n        const sortedPosts = this.posts.sort((a, b) => {\r\n            return a.creationDate!.valueOf() - b.creationDate!.valueOf();\r\n        });\r\n\r\n        const groups: PostGroup[] = [];\r\n        let currentGroup: PostGroup = {\r\n            author: sortedPosts[0].author,\r\n            posts: [{ ...sortedPosts[0], isConsecutive: false }],\r\n        };\r\n\r\n        for (let i = 1; i < sortedPosts.length; i++) {\r\n            const currentPost = sortedPosts[i];\r\n            const lastPostInGroup = currentGroup.posts[currentGroup.posts.length - 1];\r\n\r\n            let timeDiff = Number.MAX_SAFE_INTEGER;\r\n            if (currentPost.creationDate && lastPostInGroup.creationDate) {\r\n                timeDiff = currentPost.creationDate.diff(lastPostInGroup.creationDate, 'minute');\r\n            }\r\n\r\n            if (currentPost.author?.id === currentGroup.author?.id && timeDiff < 5 && timeDiff >= 0) {\r\n                currentGroup.posts.push({ ...currentPost, isConsecutive: true }); // consecutive post\r\n            } else {\r\n                groups.push(currentGroup);\r\n                currentGroup = {\r\n                    author: currentPost.author,\r\n                    posts: [{ ...currentPost, isConsecutive: false }],\r\n                };\r\n            }\r\n        }\r\n\r\n        groups.push(currentGroup);\r\n\r\n        this.groupedPosts = groups;\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    setPosts(): void {\r\n        if (this.content) {\r\n            this.previousScrollDistanceFromTop = this.content.nativeElement.scrollHeight - this.content.nativeElement.scrollTop;\r\n        }\r\n\r\n        this.applyPinnedMessageFilter();\r\n\r\n        this.posts = this.posts.slice().reverse();\r\n\r\n        const postIdsWithForwardedMessages = this.posts.filter((post) => post.hasForwardedMessages && post.id !== undefined).map((post) => post.id) as number[];\r\n\r\n        if (postIdsWithForwardedMessages.length > 0) {\r\n            this.metisService.getForwardedMessagesByIds(postIdsWithForwardedMessages, PostingType.POST)?.subscribe((response) => {\r\n                const forwardedMessagesGroups = response.body;\r\n\r\n                if (forwardedMessagesGroups) {\r\n                    const map = new Map<number, ForwardedMessageDTO[]>(forwardedMessagesGroups.map((group) => [group.id, group.messages]));\r\n\r\n                    const sourcePostIds: number[] = [];\r\n                    const sourceAnswerIds: number[] = [];\r\n\r\n                    map.forEach((messages) => {\r\n                        messages.forEach((message) => {\r\n                            if (message.sourceType?.toString() === 'POST' && message.sourceId) {\r\n                                sourcePostIds.push(message.sourceId);\r\n                            } else if (message.sourceType?.toString() === 'ANSWER' && message.sourceId) {\r\n                                sourceAnswerIds.push(message.sourceId);\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    const sourceRequests = [];\r\n                    if (sourcePostIds.length > 0) {\r\n                        sourceRequests.push(this.metisService.getSourcePostsByIds(sourcePostIds));\r\n                    }\r\n                    if (sourceAnswerIds.length > 0) {\r\n                        sourceRequests.push(this.metisService.getSourceAnswerPostsByIds(sourceAnswerIds));\r\n                    }\r\n\r\n                    if (sourceRequests.length > 0) {\r\n                        forkJoin(sourceRequests).subscribe((responses) => {\r\n                            let fetchedPosts: Post[] = [];\r\n                            let fetchedAnswerPosts: AnswerPost[] = [];\r\n\r\n                            responses.forEach((response) => {\r\n                                if (Array.isArray(response)) {\r\n                                    if (response.length > 0) {\r\n                                        if ((response[0] as Post).conversation !== undefined) {\r\n                                            fetchedPosts = response as Post[];\r\n                                        } else if ((response[0] as AnswerPost).resolvesPost !== undefined) {\r\n                                            fetchedAnswerPosts = response as AnswerPost[];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            this.posts = this.posts.map((post) => {\r\n                                const forwardedMessages = map.get(post.id!) || [];\r\n                                post.forwardedPosts = fetchedPosts.filter((fetchedPost) =>\r\n                                    forwardedMessages.some((message) => message.sourceId === fetchedPost.id && message.sourceType?.toString() === 'POST'),\r\n                                );\r\n                                post.forwardedAnswerPosts = fetchedAnswerPosts.filter((fetchedAnswerPost) =>\r\n                                    forwardedMessages.some((message) => message.sourceId === fetchedAnswerPost.id && message.sourceType?.toString() === 'ANSWER'),\r\n                                );\r\n                                return post;\r\n                            });\r\n\r\n                            this.groupPosts();\r\n                            this.cdr.markForCheck();\r\n                        });\r\n                    } else {\r\n                        // No source posts or answer posts to fetch\r\n                        this.groupPosts();\r\n                    }\r\n                } else {\r\n                    // No forwarded messages found\r\n                    this.groupPosts();\r\n                }\r\n            });\r\n        } else {\r\n            // No posts with forwarded messages\r\n            this.groupPosts();\r\n        }\r\n    }\r\n\r\n    fetchNextPage() {\r\n        const morePostsAvailable = this.posts.length < this.totalNumberOfPosts;\r\n        let addBuffer = 0;\r\n        if (morePostsAvailable) {\r\n            this.page += 1;\r\n            this.commandMetisToFetchPosts();\r\n            addBuffer = 50;\r\n        } else if (!this.canStartSaving) {\r\n            this.canStartSaving = true;\r\n        }\r\n        this.content.nativeElement.scrollTop = this.content.nativeElement.scrollTop + addBuffer;\r\n    }\r\n\r\n    public commandMetisToFetchPosts(forceUpdate = false) {\r\n        this.refreshMetisConversationPostContextFilter();\r\n        if (this.currentPostContextFilter) {\r\n            this.isFetchingPosts = true; // will be set to false in subscription\r\n            this.metisService.getFilteredPosts(this.currentPostContextFilter, forceUpdate, this._activeConversation);\r\n        }\r\n    }\r\n\r\n    onSearch(): void {\r\n        this.page = 1;\r\n        this.commandMetisToFetchPosts(true);\r\n    }\r\n\r\n    createEmptyPost(): void {\r\n        this.newPost = this.createEmptyPostInMetis();\r\n    }\r\n\r\n    private createEmptyPostInMetis() {\r\n        if (!this._activeConversation) {\r\n            return undefined;\r\n        }\r\n        let conversation: Conversation;\r\n        if (isChannelDTO(this._activeConversation)) {\r\n            const channel = new Channel();\r\n            channel.isAnnouncementChannel = this._activeConversation.isAnnouncementChannel;\r\n            conversation = channel;\r\n        } else if (isGroupChatDTO(this._activeConversation)) {\r\n            conversation = new GroupChat();\r\n        } else if (isOneToOneChatDTO(this._activeConversation)) {\r\n            conversation = new OneToOneChat();\r\n        } else {\r\n            throw new Error('Conversation type not supported');\r\n        }\r\n        conversation.id = this._activeConversation.id;\r\n        this.refreshMetisConversationPostContextFilter();\r\n        return this.metisService.createEmptyPostForContext(conversation);\r\n    }\r\n\r\n    postsGroupTrackByFn = (_index: number, post: PostGroup): string => 'grp_' + post.posts.map((p) => p.id?.toString()).join('_');\r\n\r\n    postsTrackByFn = (_index: number, post: Post): string => 'post_' + post.id!;\r\n\r\n    setPostForThread(post: Post) {\r\n        this.openThread.emit(post);\r\n    }\r\n    handleScrollOnNewMessage = () => {\r\n        if ((this.posts.length > 0 && this.content.nativeElement.scrollTop === 0 && this.page === 1) || this.previousScrollDistanceFromTop === this.messagesContainerHeight) {\r\n            this.scrollToBottomOfMessages();\r\n        }\r\n    };\r\n\r\n    scrollToBottomOfMessages() {\r\n        // Use setTimeout to ensure the scroll happens after the new message is rendered\r\n        requestAnimationFrame(() => {\r\n            this.content.nativeElement.scrollTop = this.content.nativeElement.scrollHeight;\r\n        });\r\n    }\r\n\r\n    onSearchQueryInput($event: Event) {\r\n        const searchTerm = ($event.target as HTMLInputElement).value?.trim().toLowerCase() ?? '';\r\n        this.search$.next(searchTerm);\r\n    }\r\n\r\n    clearSearchInput() {\r\n        if (this.searchInput) {\r\n            this.searchInput.nativeElement.value = '';\r\n            this.searchInput.nativeElement.dispatchEvent(new Event('input'));\r\n        }\r\n    }\r\n\r\n    private setupScrollDebounce(): void {\r\n        this.scrollSubject.pipe(debounceTime(this.scrollDebounceTime), takeUntil(this.ngUnsubscribe)).subscribe((postId) => {\r\n            if (this._activeConversation?.id) {\r\n                sessionStorage.setItem(this.sessionStorageKey + this._activeConversation.id, postId.toString());\r\n            }\r\n        });\r\n    }\r\n\r\n    saveScrollPosition = (postId: number) => {\r\n        this.scrollSubject.next(postId);\r\n    };\r\n\r\n    handleNewMessageCreated() {\r\n        this.createdNewMessage = true;\r\n        this.createEmptyPost();\r\n        this.scrollToBottomOfMessages();\r\n    }\r\n\r\n    async goToLastSelectedElement(lastScrollPosition: number, isOpenThread: boolean) {\r\n        if (!lastScrollPosition) {\r\n            this.scrollToBottomOfMessages();\r\n            this.canStartSaving = true;\r\n            return;\r\n        }\r\n        const messageArray = this.messages.toArray();\r\n        const element = messageArray.find((message) => message.post.id === lastScrollPosition); // Suchen nach dem Post\r\n\r\n        if (!element) {\r\n            this.fetchNextPage();\r\n        } else {\r\n            // We scroll to the element with a slight buffer to ensure its fully visible (-10)\r\n            this.content.nativeElement.scrollTop = Math.max(0, element.elementRef.nativeElement.offsetTop - 10);\r\n            this.canStartSaving = true;\r\n            if (isOpenThread) {\r\n                this.openThread.emit(element.post);\r\n            }\r\n            this.focusOnPostId = undefined;\r\n            this.isOpenThreadOnFocus = false;\r\n        }\r\n    }\r\n\r\n    findElementsAtScrollPosition() {\r\n        const messageArray = this.messages.toArray();\r\n        const containerRect = this.content.nativeElement.getBoundingClientRect();\r\n        const visibleMessages = [];\r\n        for (const message of messageArray) {\r\n            if (!message.elementRef?.nativeElement || !message.post?.id) continue;\r\n            const rect = message.elementRef.nativeElement.getBoundingClientRect();\r\n            if (rect.top >= containerRect.top && rect.bottom <= containerRect.bottom) {\r\n                visibleMessages.push(message);\r\n                break; // Only need the first visible message\r\n            }\r\n        }\r\n        this.elementsAtScrollPosition = visibleMessages;\r\n        if (this.elementsAtScrollPosition && this.elementsAtScrollPosition.length > 0 && this.canStartSaving) {\r\n            this.saveScrollPosition(this.elementsAtScrollPosition[0].post.id!);\r\n        }\r\n    }\r\n\r\n    onTriggerNavigateToPost(post: Posting) {\r\n        this.onNavigateToPost.emit(post);\r\n    }\r\n}\r\n", "@if (course) {\r\n    <div class=\"justify-content-center conversation-messages\">\r\n        <div class=\"justify-content-center px-3\">\r\n            <!-- search bar -->\r\n            @if (!searchbarCollapsed) {\r\n                <div class=\"input-group channel-search\" [class.search-active]=\"!!searchText\">\r\n                    <span class=\"input-group-text\">\r\n                        <fa-icon [icon]=\"faSearch\" size=\"sm\" />\r\n                        <span [hidden]=\"true\" id=\"inputLabel\" jhiTranslate=\"artemisApp.conversationsLayout.conversationMessages.searchLabel\"></span>\r\n                    </span>\r\n                    <input\r\n                        id=\"searchInput\"\r\n                        aria-labelledby=\"inputLabel\"\r\n                        aria-describedby=\"searchResult\"\r\n                        #searchInput\r\n                        (input)=\"onSearchQueryInput($event)\"\r\n                        class=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"{{ 'artemisApp.conversationsLayout.conversationMessages.searchBarPlaceholder' | artemisTranslate }}\"\r\n                    />\r\n                    @if (!!searchText) {\r\n                        <button\r\n                            class=\"btn btn-outline-secondary border-end-0 border-start-0\"\r\n                            type=\"button\"\r\n                            (click)=\"clearSearchInput()\"\r\n                            aria-labelledby=\"clearSearchLabel\"\r\n                            id=\"clearSearchButton\"\r\n                        >\r\n                            <span id=\"clearSearchLabel\" [hidden]=\"true\" jhiTranslate=\"artemisApp.conversationsLayout.conversationMessages.clearSearch\"></span>\r\n                            <fa-icon [icon]=\"faTimes\" size=\"xs\" />\r\n                        </button>\r\n                    }\r\n                    <span class=\"input-group-text\" [hidden]=\"!searchText\" id=\"searchResult\">\r\n                        @switch (totalNumberOfPosts) {\r\n                            @case (0) {\r\n                                <span jhiTranslate=\"artemisApp.conversationsLayout.conversationMessages.searchResultsNone\"></span>\r\n                            }\r\n                            @case (1) {\r\n                                <span jhiTranslate=\"artemisApp.conversationsLayout.conversationMessages.searchResultsSingle\"></span>\r\n                            }\r\n                            @default {\r\n                                <span\r\n                                    jhiTranslate=\"artemisApp.conversationsLayout.conversationMessages.searchResultsMultiple\"\r\n                                    [translateValues]=\"{ count: totalNumberOfPosts }\"\r\n                                ></span>\r\n                            }\r\n                        }\r\n                    </span>\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"channel-content\">\r\n            <!-- loading messages -->\r\n            @if (isFetchingPosts) {\r\n                <div class=\"envelope\">\r\n                    <fa-icon size=\"3x\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n                </div>\r\n            }\r\n            <!-- no message exist -->\r\n            @if (!isFetchingPosts && (posts.length === 0 || !_activeConversation)) {\r\n                <div class=\"envelope\">\r\n                    <fa-icon size=\"5x\" [icon]=\"faEnvelope\" />\r\n                </div>\r\n            }\r\n            <!-- list of messages -->\r\n            <div\r\n                id=\"scrollableDiv\"\r\n                #container\r\n                [ngClass]=\"{\r\n                    'posting-infinite-scroll-container': posts.length !== 0,\r\n                    'content-height-dev': contentHeightDev,\r\n                    'is-fetching-posts': isFetchingPosts,\r\n                    'hide-input-full': isHiddenInputFull,\r\n                    'hide-input': isHiddenInputWithCallToAction,\r\n                }\"\r\n                infinite-scroll\r\n                class=\"conversation-messages-message-list position-relative\"\r\n                [scrollWindow]=\"false\"\r\n                (scrolledUp)=\"fetchNextPage()\"\r\n            >\r\n                <!-- list of all top level posts -->\r\n                <!-- answers are opened in the thread sidebar -->\r\n                @for (group of groupedPosts; track postsGroupTrackByFn($index, group)) {\r\n                    <div class=\"message-group\">\r\n                        @for (post of group.posts; track postsTrackByFn($index, post)) {\r\n                            <div class=\"post-item\">\r\n                                <jhi-posting-thread\r\n                                    #postingThread\r\n                                    [lastReadDate]=\"_activeConversation?.lastReadDate\"\r\n                                    [hasChannelModerationRights]=\"!!getAsChannel(_activeConversation)?.hasChannelModerationRights\"\r\n                                    [id]=\"'item-' + post.id\"\r\n                                    [post]=\"post\"\r\n                                    [showAnswers]=\"false\"\r\n                                    [readOnlyMode]=\"!!getAsChannel(_activeConversation)?.isArchived\"\r\n                                    [isCommunicationPage]=\"true\"\r\n                                    (openThread)=\"setPostForThread($event)\"\r\n                                    [isConsecutive]=\"post.isConsecutive || false\"\r\n                                    [forwardedPosts]=\"post.forwardedPosts || []\"\r\n                                    [forwardedAnswerPosts]=\"post.forwardedAnswerPosts || []\"\r\n                                    (onNavigateToPost)=\"onTriggerNavigateToPost($event)\"\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n                @if (_activeConversation && newPost && canCreateNewMessageInConversation(_activeConversation) && isMobile) {\r\n                    <div class=\"px-3\">\r\n                        @if (getAsChannel(_activeConversation)?.isAnnouncementChannel) {\r\n                            <div class=\"pt-2\">\r\n                                <button class=\"btn btn-md btn-primary\" (click)=\"createEditModal.open()\" jhiTranslate=\"artemisApp.metis.newAnnouncement\"></button>\r\n                                <jhi-post-create-edit-modal #createEditModal [posting]=\"newPost!\" [isCommunicationPage]=\"true\" (onCreate)=\"handleNewMessageCreated()\" />\r\n                            </div>\r\n                        } @else {\r\n                            <jhi-message-inline-input class=\"message-input\" [posting]=\"newPost!\" (onCreate)=\"handleNewMessageCreated()\" />\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n            @if (_activeConversation && newPost && canCreateNewMessageInConversation(_activeConversation) && !isMobile) {\r\n                <div class=\"d-none d-sm-block px-3\">\r\n                    @if (getAsChannel(_activeConversation)?.isAnnouncementChannel) {\r\n                        <div class=\"pt-2\">\r\n                            <button class=\"btn btn-md btn-primary\" (click)=\"createEditModal.open()\" jhiTranslate=\"artemisApp.metis.newAnnouncement\"></button>\r\n                            <jhi-post-create-edit-modal #createEditModal [posting]=\"newPost!\" [isCommunicationPage]=\"true\" (onCreate)=\"handleNewMessageCreated()\" />\r\n                        </div>\r\n                    } @else {\r\n                        <jhi-message-inline-input class=\"message-input\" [posting]=\"newPost!\" (onCreate)=\"handleNewMessageCreated()\" />\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n", "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild, viewChild } from '@angular/core';\r\nimport interact from 'interactjs';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { faArrowLeft, faChevronLeft, faCompress, faExpand, faGripLinesVertical, faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Conversation, ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PostComponent } from 'app/shared/metis/post/post.component';\r\nimport { MessageReplyInlineInputComponent } from 'app/shared/metis/message/message-reply-inline-input/message-reply-inline-input.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-conversation-thread-sidebar',\r\n    templateUrl: './conversation-thread-sidebar.component.html',\r\n    styleUrls: ['./conversation-thread-sidebar.component.scss'],\r\n    imports: [FaIconComponent, TranslateDirective, NgbTooltip, PostComponent, MessageReplyInlineInputComponent, ArtemisTranslatePipe, NgClass],\r\n})\r\nexport class ConversationThreadSidebarComponent implements AfterViewInit {\r\n    @ViewChild('scrollBody', { static: false }) scrollBody?: ElementRef<HTMLDivElement>;\r\n    expandTooltip = viewChild<NgbTooltip>('expandTooltip');\r\n    threadContainer = viewChild<ElementRef>('threadContainer');\r\n\r\n    @Input()\r\n    readOnlyMode = false;\r\n    @Input()\r\n    set activeConversation(conversation: ConversationDTO | Conversation) {\r\n        this.conversation = conversation as ConversationDTO;\r\n        this.hasChannelModerationRights = getAsChannelDTO(this.conversation)?.hasChannelModerationRights ?? false;\r\n    }\r\n    @Input()\r\n    set activePost(activePost: Post) {\r\n        this.post = activePost;\r\n        this.createdAnswerPost = this.createEmptyAnswerPost();\r\n    }\r\n\r\n    @Output()\r\n    closePostThread = new EventEmitter<void>();\r\n\r\n    post?: Post;\r\n    createdAnswerPost: AnswerPost;\r\n    conversation: ConversationDTO;\r\n    hasChannelModerationRights = false;\r\n\r\n    // Icons\r\n    faXmark = faXmark;\r\n    faChevronLeft = faChevronLeft;\r\n    faGripLinesVertical = faGripLinesVertical;\r\n    faArrowLeft = faArrowLeft;\r\n    readonly faExpand = faExpand;\r\n    readonly faCompress = faCompress;\r\n\r\n    isExpanded = false;\r\n\r\n    /**\r\n     * creates empty default answer post that is needed on initialization of a newly opened modal to edit or create an answer post, with accordingly set resolvesPost flag\r\n     * @return AnswerPost created empty default answer post\r\n     */\r\n    createEmptyAnswerPost(): AnswerPost {\r\n        const answerPost = new AnswerPost();\r\n        answerPost.content = '';\r\n        answerPost.post = this.post;\r\n        return answerPost;\r\n    }\r\n\r\n    toggleExpand(): void {\r\n        if (this.threadContainer()) {\r\n            this.threadContainer()!.nativeElement.style.width = '';\r\n        }\r\n        this.isExpanded = !this.isExpanded;\r\n        this.expandTooltip()?.close();\r\n    }\r\n\r\n    /**\r\n     * makes message thread section expandable by configuring 'interact'\r\n     */\r\n    ngAfterViewInit(): void {\r\n        interact('.expanded-thread')\r\n            .resizable({\r\n                edges: { left: '.draggable-left', right: false, bottom: false, top: false },\r\n                modifiers: [\r\n                    // Set maximum width\r\n                    interact.modifiers!.restrictSize({\r\n                        min: { width: window.innerWidth * 0.3, height: 0 },\r\n                        max: { width: window.innerWidth, height: 0 },\r\n                    }),\r\n                ],\r\n                inertia: true,\r\n            })\r\n            .on('resizestart', function (event: any) {\r\n                event.target.classList.add('card-resizable');\r\n            })\r\n            .on('resizeend', function (event: any) {\r\n                event.target.classList.remove('card-resizable');\r\n            })\r\n            .on('resizemove', function (event: any) {\r\n                const target = event.target;\r\n                target.style.width = event.rect.width + 'px';\r\n            });\r\n    }\r\n\r\n    scrollEditorIntoView(): void {\r\n        this.scrollBody?.nativeElement?.scrollTo({\r\n            top: this.scrollBody.nativeElement.scrollHeight,\r\n            behavior: 'instant',\r\n        });\r\n    }\r\n}\r\n", "<!-- expanded post to display post and answerPosts as thread -->\r\n<div class=\"h-100\">\r\n    <div class=\"postings-container expanded-thread\" #threadContainer [ngClass]=\"{ expanded: isExpanded }\">\r\n        @if (!isExpanded) {\r\n            <div class=\"draggable-left\">\r\n                <fa-icon [icon]=\"faGripLinesVertical\" />\r\n            </div>\r\n        }\r\n        <div class=\"card\">\r\n            <!-- header -->\r\n            <div class=\"card-header cursor-default d-flex\">\r\n                <div class=\"row flex-grow-1\">\r\n                    <div class=\"col\">\r\n                        <h5 class=\"mb-0 fw-medium\" jhiTranslate=\"artemisApp.conversationsLayout.threadSideBar.label\"></h5>\r\n                    </div>\r\n                    <div class=\"col-auto d-flex align-items-center flex-row gap-2\">\r\n                        <fa-icon\r\n                            class=\"pointer me-2\"\r\n                            #expandTooltip=\"ngbTooltip\"\r\n                            [icon]=\"isExpanded ? faCompress : faExpand\"\r\n                            (click)=\"toggleExpand()\"\r\n                            [ngbTooltip]=\"\r\n                                isExpanded\r\n                                    ? ('artemisApp.conversationsLayout.threadSideBar.collapse' | artemisTranslate)\r\n                                    : ('artemisApp.conversationsLayout.threadSideBar.expand' | artemisTranslate)\r\n                            \"\r\n                        />\r\n                        <fa-icon\r\n                            class=\"pointer\"\r\n                            [ngbTooltip]=\"'artemisApp.conversationsLayout.threadSideBar.close' | artemisTranslate\"\r\n                            [icon]=\"faXmark\"\r\n                            (click)=\"closePostThread.emit()\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- body -->\r\n            <div #scrollBody class=\"pt-0 scrollbar wrapper-scroll-y mx-1 thread-answer-post\">\r\n                @if (post !== undefined) {\r\n                    <div class=\"my-2\">\r\n                        <div class=\"card-body px-0\">\r\n                            <jhi-post\r\n                                [readOnlyMode]=\"readOnlyMode\"\r\n                                [posting]=\"post\"\r\n                                [showAnswers]=\"true\"\r\n                                [isCommunicationPage]=\"true\"\r\n                                [isThreadSidebar]=\"true\"\r\n                                [lastReadDate]=\"conversation?.lastReadDate\"\r\n                                [hasChannelModerationRights]=\"hasChannelModerationRights\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"message-input mx-3 pt-2\">\r\n                            @if (!readOnlyMode) {\r\n                                <jhi-message-reply-inline-input\r\n                                    [activeConversation]=\"conversation\"\r\n                                    [posting]=\"createdAnswerPost\"\r\n                                    (onCreate)=\"createdAnswerPost = createEmptyAnswerPost()\"\r\n                                    (valueChange)=\"scrollEditorIntoView()\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, EventEmitter, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation, inject, input } from '@angular/core';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { PostContentValidationPattern } from 'app/shared/metis/metis.util';\r\nimport { PostingButtonComponent } from 'app/shared/metis/posting-button/posting-button.component';\r\nimport { PostingCreateEditDirective } from 'app/shared/metis/posting-create-edit.directive';\r\nimport { PostingMarkdownEditorComponent } from 'app/shared/metis/posting-markdown-editor/posting-markdown-editor.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\n\r\n@Component({\r\n    selector: 'jhi-message-reply-inline-input',\r\n    templateUrl: './message-reply-inline-input.component.html',\r\n    styleUrls: ['./message-reply-inline-input.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [FormsModule, ReactiveFormsModule, PostingMarkdownEditorComponent, TranslateDirective, PostingButtonComponent, ArtemisTranslatePipe],\r\n})\r\nexport class MessageReplyInlineInputComponent extends PostingCreateEditDirective<AnswerPost> implements OnInit, OnChanges {\r\n    private localStorageService = inject(LocalStorageService);\r\n\r\n    warningDismissed = false;\r\n\r\n    readonly activeConversation = input<ConversationDTO>();\r\n\r\n    @Output() valueChange = new EventEmitter<void>();\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.warningDismissed = !!this.localStorageService.retrieve('chatWarningDismissed');\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges | void) {\r\n        if (this.formGroup && changes) {\r\n            for (const propName in changes) {\r\n                if (changes.hasOwnProperty(propName) && propName === 'posting') {\r\n                    if (changes['posting'].previousValue?.post?.id === changes['posting'].currentValue?.post?.id) {\r\n                        this.posting.content = this.formGroup.get('content')?.value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        super.ngOnChanges();\r\n    }\r\n\r\n    /**\r\n     * resets the answer post content\r\n     */\r\n    resetFormGroup(content: string | undefined = undefined): void {\r\n        if (content !== undefined) {\r\n            this.posting.content = content;\r\n        }\r\n\r\n        this.formGroup = this.formBuilder.group({\r\n            // the pattern ensures that the content must include at least one non-whitespace character\r\n            content: [this.posting.content, [Validators.required, Validators.maxLength(this.maxContentLength), PostContentValidationPattern]],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service after setting current date as creation date of the new answer post,\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    createPosting(): void {\r\n        this.posting.content = this.formGroup.get('content')?.value;\r\n        this.metisService.createAnswerPost(this.posting).subscribe({\r\n            next: (answerPost: AnswerPost) => {\r\n                this.resetFormGroup('');\r\n                this.isLoading = false;\r\n                this.onCreate.emit(answerPost);\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service with the updated answer post\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    updatePosting(): void {\r\n        this.posting.content = this.formGroup.get('content')?.value;\r\n        this.metisService.updateAnswerPost(this.posting).subscribe({\r\n            next: () => {\r\n                this.isLoading = false;\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    closeAlert() {\r\n        this.warningDismissed = true;\r\n        this.localStorageService.store('chatWarningDismissed', true);\r\n    }\r\n}\r\n", "<form [formGroup]=\"formGroup\" (ngSubmit)=\"confirm()\">\r\n    <div class=\"message-inline-input-form__wrapper mb-3 me-1\">\r\n        <jhi-posting-markdown-editor\r\n            formControlName=\"content\"\r\n            [activeConversation]=\"activeConversation()\"\r\n            [editorHeight]=\"editorHeight\"\r\n            [maxContentLength]=\"maxContentLength\"\r\n            [isInputLengthDisplayed]=\"false\"\r\n            (keydown.enter)=\"confirm()\"\r\n            (valueChange)=\"valueChange.emit()\"\r\n            [isButtonLoading]=\"isLoading\"\r\n            [isFormGroupValid]=\"formGroup.valid\"\r\n            [editType]=\"editType\"\r\n        />\r\n        <div class=\"col mt-1 text-end\">\r\n            @if (!warningDismissed) {\r\n                <div class=\"alert alert-warning alert-dismissible text-start fade show\" role=\"alert\">\r\n                    <button type=\"button\" class=\"btn-close\" (click)=\"closeAlert()\" aria-label=\"Close\"></button>\r\n                    <h4 class=\"alert-heading\" jhiTranslate=\"artemisApp.messageWarning.headerText\"></h4>\r\n                    <p jhiTranslate=\"artemisApp.messageWarning.mainParagraph\"></p>\r\n                    <hr />\r\n                    <p class=\"mb-0\" jhiTranslate=\"artemisApp.messageWarning.lastParagraph\"></p>\r\n                </div>\r\n            }\r\n            @if (editType === EditType.UPDATE) {\r\n                <button\r\n                    jhi-posting-button\r\n                    [buttonLabel]=\"'artemisApp.metis.cancel' | artemisTranslate\"\r\n                    class=\"btn btn-sm btn-outline-secondary\"\r\n                    (click)=\"isModalOpen.emit()\"\r\n                ></button>\r\n                <button\r\n                    jhi-posting-button\r\n                    [buttonLoading]=\"isLoading\"\r\n                    [disabled]=\"isLoading || !formGroup.valid\"\r\n                    [buttonLabel]=\"'artemisApp.conversationsLayout.saveMessage' | artemisTranslate\"\r\n                    class=\"btn btn-sm btn-outline-primary\"\r\n                    id=\"save\"\r\n                    type=\"submit\"\r\n                ></button>\r\n            }\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { Component, effect, input, output } from '@angular/core';\r\nimport { Posting, PostingType, SavedPostStatus } from 'app/entities/metis/posting.model';\r\nimport { faBookmark, faBoxArchive, faCheckSquare, faEllipsis, faHashtag, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass } from '@angular/common';\r\nimport { ProfilePictureComponent } from 'app/shared/profile-picture/profile-picture.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PostingContentComponent } from 'app/shared/metis/posting-content/posting-content.components';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-posting-summary',\r\n    templateUrl: './posting-summary.component.html',\r\n    styleUrls: ['./posting-summary.component.scss'],\r\n    imports: [FaIconComponent, TranslateDirective, NgClass, ProfilePictureComponent, NgbTooltip, PostingContentComponent, ArtemisDatePipe, ArtemisTranslatePipe],\r\n})\r\nexport class PostingSummaryComponent {\r\n    readonly post = input<Posting>();\r\n    readonly isShowSavedPostOptions = input<boolean>(false);\r\n\r\n    readonly onChangeSavedPostStatus = output<SavedPostStatus>();\r\n    readonly onNavigateToPost = output<Posting>();\r\n\r\n    protected readonly ConversationType = ConversationType;\r\n    protected readonly SavedPostStatus = SavedPostStatus;\r\n\r\n    protected isAnswerPost = false;\r\n    protected postingIsOfToday = false;\r\n    protected isShowPosting = false;\r\n    protected isShowSummary = false;\r\n    protected isShowContent = false;\r\n\r\n    // Icons\r\n    readonly faLock = faLock;\r\n    readonly faHashtag = faHashtag;\r\n    readonly faCheckSquare = faCheckSquare;\r\n    readonly faBookmark = faBookmark;\r\n    readonly faBoxArchive = faBoxArchive;\r\n    readonly faEllipsis = faEllipsis;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.isShowPosting = this.post() !== undefined;\r\n            this.isShowSummary =\r\n                this.isShowPosting && this.post()!.conversation !== undefined && this.post()!.conversation!.type !== undefined && this.post()!.conversation!.title !== undefined;\r\n            this.isShowContent = this.isShowPosting && this.post()!.author !== undefined && this.post()!.content !== undefined && this.post()!.postingType !== undefined;\r\n            this.isAnswerPost = this.post()?.postingType === PostingType.ANSWER.valueOf();\r\n            if (this.post()) {\r\n                this.postingIsOfToday = dayjs().isSame(this.post()!.creationDate, 'day');\r\n            }\r\n        });\r\n    }\r\n\r\n    protected onStatusChangeClick(status: SavedPostStatus) {\r\n        this.onChangeSavedPostStatus.emit(status);\r\n    }\r\n\r\n    protected onTriggerNavigateToPost() {\r\n        if (this.post() === undefined) {\r\n            return;\r\n        }\r\n        this.onNavigateToPost.emit(this.post()!);\r\n    }\r\n}\r\n", "<div class=\"posting-summary rounded p-2\" (click)=\"onTriggerNavigateToPost()\">\r\n    @if (post() !== undefined) {\r\n        @if (isShowSummary) {\r\n            <div class=\"posting-summary-conversation fs-x-small text-secondary d-flex align-items-center mb-1\">\r\n                <span class=\"d-inline-block\">\r\n                    <fa-icon [icon]=\"post()!.conversation!.type! === ConversationType.CHANNEL ? faHashtag : faLock\" />\r\n                </span>\r\n                <span class=\"d-inline-block ms-1\">\r\n                    {{ post()!.conversation!.title! }}\r\n                    @if (isAnswerPost) {\r\n                        > <span jhiTranslate=\"artemisApp.metis.post.thread\"></span>\r\n                    }\r\n                </span>\r\n            </div>\r\n        }\r\n        @if (isShowContent) {\r\n            <div class=\"posting-summary-wrap\">\r\n                @if (isAnswerPost) {\r\n                    <div class=\"text-secondary\">\r\n                        <fa-icon [icon]=\"faEllipsis\" />\r\n                    </div>\r\n                }\r\n                <div class=\"posting-summary-content d-inline-flex align-items-start gap-2\" [ngClass]=\"{ 'is-answer-post': isAnswerPost }\">\r\n                    <jhi-profile-picture\r\n                        imageSizeInRem=\"2.25\"\r\n                        fontSizeInRem=\"0.9\"\r\n                        imageId=\"post-profile-picture\"\r\n                        defaultPictureId=\"post-default-profile-picture\"\r\n                        [authorId]=\"post()!.author!.id!\"\r\n                        [authorName]=\"post()!.author!.name!\"\r\n                        [imageUrl]=\"post()!.author!.imageUrl!\"\r\n                    />\r\n                    <div class=\"posting-summary-author-content fs-small flex-column align-items-start\">\r\n                        <div>\r\n                            <span class=\"fw-semibold d-inline-block me-1\">{{ post()!.author!.name! }}</span>\r\n                            @if (post()!.creationDate !== undefined) {\r\n                                <span class=\"fs-small text-secondary\" [disableTooltip]=\"postingIsOfToday\" ngbTooltip=\"{{ post()!.creationDate! | artemisDate: 'time' }}\">\r\n                                    {{ postingIsOfToday ? (post()!.creationDate! | artemisDate: 'time') : (post()!.creationDate! | artemisDate: 'short-date') }}\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            <jhi-posting-content\r\n                                [previewMode]=\"false\"\r\n                                [content]=\"post()!.content!\"\r\n                                [author]=\"post()!.author!\"\r\n                                [isEdited]=\"!!post()!.updatedDate\"\r\n                                [posting]=\"post()!\"\r\n                                [isReply]=\"false\"\r\n                                [isSubscribeToMetis]=\"false\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n\r\n        @if (isShowSavedPostOptions()) {\r\n            <div class=\"posting-summary-saved-post-options\">\r\n                <div class=\"btn-group btn-group-sm\" role=\"group\" aria-label=\"Saved options\">\r\n                    <button\r\n                        [disabled]=\"post()!.savedPostStatus === SavedPostStatus.PROGRESS\"\r\n                        type=\"button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        ngbTooltip=\"{{ 'artemisApp.metis.post.bookmarkPostProgress' | artemisTranslate }}\"\r\n                        (click)=\"onStatusChangeClick(SavedPostStatus.PROGRESS)\"\r\n                    >\r\n                        <fa-icon [icon]=\"faBookmark\" />\r\n                    </button>\r\n                    <button\r\n                        [disabled]=\"post()!.savedPostStatus === SavedPostStatus.COMPLETED\"\r\n                        type=\"button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        ngbTooltip=\"{{ 'artemisApp.metis.post.bookmarkPostComplete' | artemisTranslate }}\"\r\n                        (click)=\"onStatusChangeClick(SavedPostStatus.COMPLETED)\"\r\n                    >\r\n                        <fa-icon [icon]=\"faCheckSquare\" />\r\n                    </button>\r\n                    <button\r\n                        [disabled]=\"post()!.savedPostStatus === SavedPostStatus.ARCHIVED\"\r\n                        type=\"button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        ngbTooltip=\"{{ 'artemisApp.metis.post.bookmarkPostArchived' | artemisTranslate }}\"\r\n                        (click)=\"onStatusChangeClick(SavedPostStatus.ARCHIVED)\"\r\n                    >\r\n                        <fa-icon [icon]=\"faBoxArchive\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n</div>\r\n", "import { Component, effect, inject, input, output } from '@angular/core';\r\nimport { Posting, SavedPostStatus, SavedPostStatusMap } from 'app/entities/metis/posting.model';\r\nimport { SavedPostService } from 'app/shared/metis/saved-post.service';\r\nimport { faBookmark, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { PostingSummaryComponent } from '../posting-summary/posting-summary.component';\r\n\r\n@Component({\r\n    selector: 'jhi-saved-posts',\r\n    templateUrl: './saved-posts.component.html',\r\n    styleUrls: ['./saved-posts.component.scss'],\r\n    imports: [TranslateDirective, FaIconComponent, PostingSummaryComponent],\r\n})\r\nexport class SavedPostsComponent {\r\n    readonly savedPostStatus = input<SavedPostStatus>();\r\n    readonly courseId = input<number>();\r\n\r\n    readonly onNavigateToPost = output<Posting>();\r\n\r\n    private readonly savedPostService = inject(SavedPostService);\r\n\r\n    protected posts: Posting[];\r\n    protected hiddenPosts: number[] = [];\r\n    protected savedPostStatusMap: SavedPostStatusMap = SavedPostStatusMap.PROGRESS;\r\n    protected isShowDeleteNotice = false;\r\n\r\n    // Icons\r\n    readonly faBookmark = faBookmark;\r\n    readonly faInfoCircle = faInfoCircle;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.savedPostStatusMap = Posting.statusToMap(this.savedPostStatus()!);\r\n\r\n            this.isShowDeleteNotice = this.savedPostStatusMap !== SavedPostStatusMap.PROGRESS;\r\n\r\n            this.savedPostService.fetchSavedPosts(this.courseId()!, this.savedPostStatus()!).subscribe({\r\n                next: (response) => {\r\n                    if (!response.body) {\r\n                        this.posts = [];\r\n                    } else {\r\n                        this.posts = response.body.map(this.savedPostService.convertPostingToCorrespondingType);\r\n                    }\r\n                },\r\n                error: () => {\r\n                    this.posts = [];\r\n                },\r\n                complete: () => {\r\n                    this.hiddenPosts = [];\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    protected trackPostFunction = (index: number, post: Posting): string => index + '' + post.id!;\r\n\r\n    protected changeSavedPostStatus(post: Posting, status: SavedPostStatus) {\r\n        this.savedPostService.changeSavedPostStatus(post, status).subscribe({\r\n            next: () => {},\r\n        });\r\n        this.hiddenPosts.push(post.id!);\r\n    }\r\n\r\n    protected onTriggerNavigateToPost(post: Posting) {\r\n        this.onNavigateToPost.emit(post);\r\n    }\r\n}\r\n", "<div class=\"saved-posts pt-2 px-2 d-flex flex-column h-100\">\r\n    <div>\r\n        <h4 class=\"mb-0 p-1 pb-0\">\r\n            <span jhiTranslate=\"artemisApp.metis.overview.savedPosts\"></span> (<span [jhiTranslate]=\"'artemisApp.metis.overview.' + savedPostStatusMap.toString()\"></span>)\r\n        </h4>\r\n    </div>\r\n    <hr class=\"my-2\" />\r\n    @if (isShowDeleteNotice) {\r\n        <div class=\"saved-posts-delete-notice m-2 fs-x-small text-secondary\">\r\n            <fa-icon class=\"me-1\" [icon]=\"faInfoCircle\" />\r\n            <span jhiTranslate=\"artemisApp.metis.overview.deleteNoticeSavedPosts\"></span>\r\n        </div>\r\n    }\r\n    <div class=\"saved-posts-post-container flex-grow\">\r\n        @if (posts && posts.length > 0) {\r\n            @for (post of posts; track trackPostFunction($index, post)) {\r\n                @if (!hiddenPosts.includes(post.id!)) {\r\n                    <jhi-posting-summary\r\n                        [post]=\"post\"\r\n                        [isShowSavedPostOptions]=\"true\"\r\n                        (onChangeSavedPostStatus)=\"changeSavedPostStatus(post, $event)\"\r\n                        (onNavigateToPost)=\"onTriggerNavigateToPost(post)\"\r\n                    />\r\n                }\r\n            }\r\n        } @else {\r\n            <div class=\"saved-posts-empty-notice text-secondary\">\r\n                <fa-icon class=\"mb-3\" size=\"3x\" [icon]=\"faBookmark\" />\r\n                <span jhiTranslate=\"artemisApp.metis.overview.emptySavedPosts\"></span>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n", "import { NgClass } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, OnDestroy, OnInit, ViewEncapsulation, inject, viewChild } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    faBookmark,\r\n    faBoxArchive,\r\n    faClock,\r\n    faComment,\r\n    faComments,\r\n    faFile,\r\n    faFilter,\r\n    faGraduationCap,\r\n    faHeart,\r\n    faList,\r\n    faMessage,\r\n    faPersonChalkboard,\r\n    faPlus,\r\n    faSearch,\r\n    faTimes,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { Course, isMessagingEnabled } from 'app/entities/course.model';\r\nimport { ChannelDTO, ChannelSubType, getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { Posting, PostingType, SavedPostStatus, SavedPostStatusMap } from 'app/entities/metis/posting.model';\r\nimport { CourseWideSearchComponent, CourseWideSearchConfig } from 'app/overview/course-conversations/course-wide-search/course-wide-search.component';\r\nimport { ChannelsCreateDialogComponent } from 'app/overview/course-conversations/dialogs/channels-create-dialog/channels-create-dialog.component';\r\nimport { ChannelAction, ChannelsOverviewDialogComponent } from 'app/overview/course-conversations/dialogs/channels-overview-dialog/channels-overview-dialog.component';\r\nimport { GroupChatCreateDialogComponent } from 'app/overview/course-conversations/dialogs/group-chat-create-dialog/group-chat-create-dialog.component';\r\nimport { OneToOneChatCreateDialogComponent } from 'app/overview/course-conversations/dialogs/one-to-one-chat-create-dialog/one-to-one-chat-create-dialog.component';\r\nimport { defaultFirstLayerDialogOptions, defaultSecondLayerDialogOptions } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { CourseOverviewService } from 'app/overview/course-overview.service';\r\nimport { CourseSidebarService } from 'app/overview/course-sidebar.service';\r\nimport { CustomBreakpointNames } from 'app/shared/breakpoints/breakpoints.service';\r\nimport { LayoutService } from 'app/shared/breakpoints/layout.service';\r\nimport { ButtonComponent, ButtonType } from 'app/shared/components/button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { LoadingIndicatorContainerComponent } from 'app/shared/loading-indicator-container/loading-indicator-container.component';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { canCreateChannel } from 'app/shared/metis/conversations/conversation-permissions.utils';\r\nimport { MetisConversationService } from 'app/shared/metis/metis-conversation.service';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { PageType, SortDirection } from 'app/shared/metis/metis.util';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { SidebarComponent } from 'app/shared/sidebar/sidebar.component';\r\nimport { AccordionGroups, ChannelTypeIcons, CollapseState, SidebarCardElement, SidebarData, SidebarItemShowAlways } from 'app/types/sidebar';\r\nimport { EMPTY, Observable, Subject, Subscription, from, take, takeUntil } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { CourseConversationsCodeOfConductComponent } from './code-of-conduct/course-conversations-code-of-conduct.component';\r\nimport { ConversationHeaderComponent } from './layout/conversation-header/conversation-header.component';\r\nimport { ConversationMessagesComponent } from './layout/conversation-messages/conversation-messages.component';\r\nimport { ConversationThreadSidebarComponent } from './layout/conversation-thread-sidebar/conversation-thread-sidebar.component';\r\nimport { SavedPostsComponent } from './saved-posts/saved-posts.component';\r\nimport { captureException } from '@sentry/angular';\r\nimport { LinkifyService } from 'app/shared/link-preview/services/linkify.service';\r\nimport { LinkPreviewService } from 'app/shared/link-preview/services/link-preview.service';\r\n\r\nconst DEFAULT_CHANNEL_GROUPS: AccordionGroups = {\r\n    favoriteChannels: { entityData: [] },\r\n    recents: { entityData: [] },\r\n    generalChannels: { entityData: [] },\r\n    exerciseChannels: { entityData: [] },\r\n    lectureChannels: { entityData: [] },\r\n    examChannels: { entityData: [] },\r\n    feedbackDiscussion: { entityData: [] },\r\n    archivedChannels: { entityData: [] },\r\n    savedPosts: { entityData: [] },\r\n};\r\n\r\nconst CHANNEL_TYPE_ICON: ChannelTypeIcons = {\r\n    generalChannels: faMessage,\r\n    exerciseChannels: faList,\r\n    examChannels: faGraduationCap,\r\n    groupChats: faComments,\r\n    directMessages: faComment,\r\n    favoriteChannels: faHeart,\r\n    lectureChannels: faFile,\r\n    archivedChannels: faBoxArchive,\r\n    feedbackDiscussion: faPersonChalkboard,\r\n    savedPosts: faBookmark,\r\n    recents: faClock,\r\n};\r\n\r\nconst DEFAULT_COLLAPSE_STATE: CollapseState = {\r\n    generalChannels: true,\r\n    exerciseChannels: true,\r\n    examChannels: true,\r\n    groupChats: true,\r\n    directMessages: true,\r\n    favoriteChannels: false,\r\n    lectureChannels: true,\r\n    archivedChannels: true,\r\n    feedbackDiscussion: true,\r\n    savedPosts: true,\r\n    recents: true,\r\n};\r\n\r\nconst DEFAULT_SHOW_ALWAYS: SidebarItemShowAlways = {\r\n    generalChannels: true,\r\n    exerciseChannels: false,\r\n    examChannels: false,\r\n    groupChats: true,\r\n    directMessages: true,\r\n    favoriteChannels: true,\r\n    lectureChannels: false,\r\n    archivedChannels: false,\r\n    feedbackDiscussion: false,\r\n    savedPosts: true,\r\n    recents: true,\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-course-conversations',\r\n    templateUrl: './course-conversations.component.html',\r\n    styleUrls: ['../course-overview.scss', './course-conversations.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [MetisService, LinkifyService, LinkPreviewService],\r\n    imports: [\r\n        LoadingIndicatorContainerComponent,\r\n        FormsModule,\r\n        ButtonComponent,\r\n        CourseConversationsCodeOfConductComponent,\r\n        TranslateDirective,\r\n        NgClass,\r\n        SidebarComponent,\r\n        ConversationHeaderComponent,\r\n        ConversationMessagesComponent,\r\n        CourseWideSearchComponent,\r\n        SavedPostsComponent,\r\n        ConversationThreadSidebarComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class CourseConversationsComponent implements OnInit, OnDestroy {\r\n    private router = inject(Router);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private metisConversationService = inject(MetisConversationService);\r\n    private metisService = inject(MetisService);\r\n    private courseOverviewService = inject(CourseOverviewService);\r\n    private modalService = inject(NgbModal);\r\n    private profileService = inject(ProfileService);\r\n\r\n    private ngUnsubscribe = new Subject<void>();\r\n    private closeSidebarEventSubscription: Subscription;\r\n    private openSidebarEventSubscription: Subscription;\r\n    private toggleSidebarEventSubscription: Subscription;\r\n    private breakpointSubscription: Subscription;\r\n    course?: Course;\r\n    isLoading = false;\r\n    isServiceSetUp = false;\r\n    messagingEnabled = false;\r\n    postInThread?: Post;\r\n    activeConversation?: ConversationDTO = undefined;\r\n    conversationsOfUser: ConversationDTO[] = [];\r\n    channelSearchCollapsed = true;\r\n\r\n    conversationSelected = true;\r\n    sidebarData: SidebarData;\r\n    accordionConversationGroups: AccordionGroups;\r\n    sidebarConversations: SidebarCardElement[] = [];\r\n    profileSubscription?: Subscription;\r\n    isCollapsed = false;\r\n    isProduction = true;\r\n    isTestServer = false;\r\n    isMobile = false;\r\n    focusPostId: number | undefined = undefined;\r\n    openThreadOnFocus = false;\r\n    selectedSavedPostStatus: null | SavedPostStatus = null;\r\n    showOnlyPinned = false;\r\n    pinnedCount: number = 0;\r\n\r\n    readonly CHANNEL_TYPE_ICON = CHANNEL_TYPE_ICON;\r\n    readonly DEFAULT_COLLAPSE_STATE = DEFAULT_COLLAPSE_STATE;\r\n    protected readonly DEFAULT_SHOW_ALWAYS = DEFAULT_SHOW_ALWAYS;\r\n\r\n    // set undefined so nothing gets displayed until isCodeOfConductAccepted is loaded\r\n    isCodeOfConductAccepted?: boolean;\r\n    isCodeOfConductPresented = false;\r\n\r\n    courseWideSearch = viewChild<CourseWideSearchComponent>(CourseWideSearchComponent);\r\n    searchElement = viewChild<ElementRef>('courseWideSearchInput');\r\n\r\n    courseWideSearchConfig: CourseWideSearchConfig;\r\n    courseWideSearchTerm = '';\r\n    readonly ButtonType = ButtonType;\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n    faTimes = faTimes;\r\n    faFilter = faFilter;\r\n    faSearch = faSearch;\r\n\r\n    createChannelFn?: (channel: ChannelDTO) => Observable<never>;\r\n    channelActions$ = new EventEmitter<ChannelAction>();\r\n\r\n    private courseSidebarService: CourseSidebarService = inject(CourseSidebarService);\r\n    private layoutService: LayoutService = inject(LayoutService);\r\n    private changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\r\n\r\n    getAsChannel = getAsChannelDTO;\r\n\r\n    private subscribeToMetis() {\r\n        this.metisService.posts.pipe(takeUntil(this.ngUnsubscribe)).subscribe((posts: Post[]) => {\r\n            if (this.postInThread?.id && posts) {\r\n                this.postInThread = posts.find((post) => post.id === this.postInThread?.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    togglePinnedView(): void {\r\n        this.showOnlyPinned = !this.showOnlyPinned;\r\n    }\r\n\r\n    onPinnedCountChanged(newCount: number): void {\r\n        this.pinnedCount = newCount;\r\n        if (this.pinnedCount == 0 && this.showOnlyPinned) {\r\n            this.showOnlyPinned = false;\r\n        }\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    private setupMetis() {\r\n        this.metisService.setPageType(PageType.OVERVIEW);\r\n        this.metisService.setCourse(this.course!);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isMobile = this.layoutService.isBreakpointActive(CustomBreakpointNames.extraSmall);\r\n\r\n        this.breakpointSubscription = this.layoutService.subscribeToLayoutChanges().subscribe(() => {\r\n            this.isMobile = this.layoutService.isBreakpointActive(CustomBreakpointNames.extraSmall);\r\n        });\r\n\r\n        this.openSidebarEventSubscription = this.courseSidebarService.openSidebar$.subscribe(() => {\r\n            this.setIsCollapsed(true);\r\n        });\r\n\r\n        this.closeSidebarEventSubscription = this.courseSidebarService.closeSidebar$.subscribe(() => {\r\n            this.setIsCollapsed(false);\r\n        });\r\n\r\n        this.toggleSidebarEventSubscription = this.courseSidebarService.toggleSidebar$.subscribe(() => {\r\n            this.toggleSidebar();\r\n        });\r\n\r\n        if (!this.isMobile) {\r\n            if (this.courseOverviewService.getSidebarCollapseStateFromStorage('conversation')) {\r\n                this.courseSidebarService.openSidebar();\r\n            } else {\r\n                this.courseSidebarService.closeSidebar();\r\n            }\r\n        } else {\r\n            this.courseSidebarService.openSidebar();\r\n        }\r\n\r\n        this.isLoading = true;\r\n        this.metisConversationService.isServiceSetup$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((isServiceSetUp: boolean) => {\r\n            if (isServiceSetUp) {\r\n                this.course = this.metisConversationService.course;\r\n                this.initializeCourseWideSearchConfig();\r\n                this.initializeSidebarAccordions();\r\n                this.setupMetis();\r\n                this.subscribeToMetis();\r\n                this.subscribeToQueryParameter();\r\n                // service is fully set up, now we can subscribe to the respective observables\r\n                this.subscribeToActiveConversation();\r\n                this.subscribeToIsCodeOfConductAccepted();\r\n                this.subscribeToIsCodeOfConductPresented();\r\n                this.subscribeToConversationsOfUser();\r\n                this.updateQueryParameters();\r\n                this.prepareSidebarData();\r\n                this.metisConversationService.checkIsCodeOfConductAccepted(this.course!);\r\n                this.isServiceSetUp = true;\r\n                this.isLoading = false;\r\n            }\r\n            this.channelActions$\r\n                .pipe(\r\n                    debounceTime(500),\r\n                    distinctUntilChanged(\r\n                        (prev, curr) => curr.action !== 'create' && prev.action === curr.action && prev.channel.id === curr.channel.id && prev.channel.name === curr.channel.name,\r\n                    ),\r\n                    takeUntil(this.ngUnsubscribe),\r\n                )\r\n                .subscribe((channelAction) => {\r\n                    this.performChannelAction(channelAction);\r\n                });\r\n            this.createChannelFn = (channel: ChannelDTO) => this.metisConversationService.createChannel(channel);\r\n        });\r\n\r\n        this.profileSubscription = this.profileService.getProfileInfo()?.subscribe((profileInfo) => {\r\n            this.isProduction = profileInfo?.inProduction;\r\n            this.isTestServer = profileInfo.testServer ?? false;\r\n        });\r\n    }\r\n\r\n    performChannelAction(channelAction: ChannelAction) {\r\n        if (this.createChannelFn) {\r\n            this.createChannelFn(channelAction.channel)\r\n                .pipe(takeUntil(this.ngUnsubscribe))\r\n                .subscribe({\r\n                    complete: () => {\r\n                        this.prepareSidebarData();\r\n                    },\r\n                    error: (error) => {\r\n                        captureException('Error creating channel:', error);\r\n                    },\r\n                });\r\n        }\r\n    }\r\n\r\n    subscribeToQueryParameter() {\r\n        this.activatedRoute.queryParams.pipe(take(1), takeUntil(this.ngUnsubscribe)).subscribe((queryParams) => {\r\n            if (queryParams.conversationId) {\r\n                if (\r\n                    isNaN(Number(queryParams.conversationId)) &&\r\n                    Object.values(SavedPostStatusMap)\r\n                        .map((s) => s.toString())\r\n                        .includes(queryParams.conversationId)\r\n                ) {\r\n                    this.selectedSavedPostStatus = Posting.mapToStatus(queryParams.conversationId as SavedPostStatusMap);\r\n                } else {\r\n                    this.metisConversationService.setActiveConversation(Number(queryParams.conversationId));\r\n                    this.closeSidebarOnMobile();\r\n                }\r\n            }\r\n            if (queryParams.focusPostId) {\r\n                this.focusPostId = Number(queryParams.focusPostId);\r\n            }\r\n            if (queryParams.openThreadOnFocus) {\r\n                this.openThreadOnFocus = queryParams.openThreadOnFocus;\r\n            }\r\n            if (queryParams.messageId) {\r\n                this.postInThread = { id: Number(queryParams.messageId) } as Post;\r\n\r\n                this.closeSidebarOnMobile();\r\n            } else {\r\n                this.postInThread = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    onNavigateToPost(post: Posting) {\r\n        if (post.referencePostId === undefined || post.conversation?.id === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.focusPostId = post.referencePostId;\r\n        this.openThreadOnFocus = (post.postingType as PostingType) === PostingType.ANSWER;\r\n        this.metisConversationService.setActiveConversation(post.conversation!.id!);\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    updateQueryParameters() {\r\n        this.router.navigate([], {\r\n            relativeTo: this.activatedRoute,\r\n            queryParams: {\r\n                conversationId: this.activeConversation?.id ?? (this.selectedSavedPostStatus !== null ? Posting.statusToMap(this.selectedSavedPostStatus) : undefined),\r\n            },\r\n            replaceUrl: true,\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n        this.openSidebarEventSubscription?.unsubscribe();\r\n        this.closeSidebarEventSubscription?.unsubscribe();\r\n        this.toggleSidebarEventSubscription?.unsubscribe();\r\n        this.profileSubscription?.unsubscribe();\r\n        this.breakpointSubscription?.unsubscribe();\r\n    }\r\n\r\n    private subscribeToActiveConversation() {\r\n        this.metisConversationService.activeConversation$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((conversation: ConversationDTO) => {\r\n            const previousConversation = this.activeConversation;\r\n            this.activeConversation = conversation;\r\n            if (this.isMobile && conversation && previousConversation?.id !== conversation.id) {\r\n                this.courseSidebarService.closeSidebar();\r\n            }\r\n            this.updateQueryParameters();\r\n        });\r\n    }\r\n\r\n    private subscribeToIsCodeOfConductAccepted() {\r\n        this.metisConversationService.isCodeOfConductAccepted$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((isCodeOfConductAccepted: boolean) => {\r\n            this.isCodeOfConductAccepted = isCodeOfConductAccepted;\r\n        });\r\n    }\r\n\r\n    private subscribeToIsCodeOfConductPresented() {\r\n        this.metisConversationService.isCodeOfConductPresented$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((isCodeOfConductPresented: boolean) => {\r\n            this.isCodeOfConductPresented = isCodeOfConductPresented;\r\n        });\r\n    }\r\n\r\n    private subscribeToConversationsOfUser() {\r\n        this.metisConversationService.conversationsOfUser$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((conversations: ConversationDTO[]) => {\r\n            this.conversationsOfUser = conversations ?? [];\r\n        });\r\n    }\r\n\r\n    acceptCodeOfConduct() {\r\n        if (this.course) {\r\n            this.metisConversationService.acceptCodeOfConduct(this.course);\r\n        }\r\n    }\r\n\r\n    initializeCourseWideSearchConfig() {\r\n        this.courseWideSearchConfig = new CourseWideSearchConfig();\r\n        this.courseWideSearchConfig.searchTerm = '';\r\n        this.courseWideSearchConfig.filterToUnresolved = false;\r\n        this.courseWideSearchConfig.filterToOwn = false;\r\n        this.courseWideSearchConfig.filterToAnsweredOrReacted = false;\r\n        this.courseWideSearchConfig.sortingOrder = SortDirection.ASCENDING;\r\n    }\r\n\r\n    initializeSidebarAccordions() {\r\n        this.messagingEnabled = isMessagingEnabled(this.course);\r\n        this.accordionConversationGroups = this.messagingEnabled\r\n            ? { ...DEFAULT_CHANNEL_GROUPS, groupChats: { entityData: [] }, directMessages: { entityData: [] } }\r\n            : DEFAULT_CHANNEL_GROUPS;\r\n    }\r\n\r\n    hideSearchTerm() {\r\n        this.courseWideSearchTerm = '';\r\n    }\r\n\r\n    onSearch() {\r\n        if (this.isMobile) {\r\n            if (this.courseWideSearchTerm) {\r\n                this.courseSidebarService.closeSidebar();\r\n            } else {\r\n                this.courseSidebarService.openSidebar();\r\n            }\r\n        }\r\n        this.selectedSavedPostStatus = null;\r\n        this.metisConversationService.setActiveConversation(undefined);\r\n        this.activeConversation = undefined;\r\n        this.updateQueryParameters();\r\n        this.courseWideSearchConfig.searchTerm = this.courseWideSearchTerm;\r\n        this.courseWideSearch()?.onSearch();\r\n    }\r\n\r\n    prepareSidebarData() {\r\n        this.metisConversationService.forceRefresh().subscribe({\r\n            complete: () => {\r\n                this.sidebarConversations = this.courseOverviewService.mapConversationsToSidebarCardElements(this.course!, this.conversationsOfUser);\r\n                this.accordionConversationGroups = this.courseOverviewService.groupConversationsByChannelType(this.course!, this.conversationsOfUser, this.messagingEnabled);\r\n                this.accordionConversationGroups.recents.entityData = this.sidebarConversations?.filter((item) => item.isCurrent) || [];\r\n                this.updateSidebarData();\r\n            },\r\n        });\r\n    }\r\n\r\n    updateSidebarData() {\r\n        this.sidebarData = {\r\n            groupByCategory: true,\r\n            sidebarType: 'conversation',\r\n            storageId: 'conversation',\r\n            groupedData: this.accordionConversationGroups,\r\n            ungroupedData: this.sidebarConversations,\r\n            showAccordionLeadingIcon: true,\r\n            messagingEnabled: isMessagingEnabled(this.course),\r\n            canCreateChannel: canCreateChannel(this.course!),\r\n        };\r\n    }\r\n\r\n    onConversationSelected(conversationId: number | string) {\r\n        this.closeSidebarOnMobile();\r\n        this.focusPostId = undefined;\r\n        this.openThreadOnFocus = false;\r\n        if (typeof conversationId === 'string') {\r\n            if (\r\n                Object.values(SavedPostStatusMap)\r\n                    .map((s) => s.toString())\r\n                    .includes(conversationId)\r\n            ) {\r\n                this.selectedSavedPostStatus = Posting.mapToStatus(conversationId as SavedPostStatusMap);\r\n                this.postInThread = undefined;\r\n                this.metisConversationService.setActiveConversation(undefined);\r\n                this.activeConversation = undefined;\r\n                this.updateQueryParameters();\r\n                this.metisService.resetCachedPosts();\r\n                this.changeDetector.detectChanges();\r\n            }\r\n        } else {\r\n            conversationId = +conversationId;\r\n            this.selectedSavedPostStatus = null;\r\n            this.metisConversationService.setActiveConversation(conversationId);\r\n        }\r\n    }\r\n\r\n    toggleSidebar() {\r\n        this.setIsCollapsed(!this.isCollapsed);\r\n    }\r\n\r\n    closeSidebarOnMobile() {\r\n        if (this.isMobile) {\r\n            this.courseSidebarService.closeSidebar();\r\n        }\r\n    }\r\n\r\n    setIsCollapsed(value: boolean) {\r\n        this.isCollapsed = value;\r\n        this.courseOverviewService.setSidebarCollapseState('conversation', this.isCollapsed);\r\n    }\r\n\r\n    openCreateGroupChatDialog() {\r\n        const modalRef: NgbModalRef = this.modalService.open(GroupChatCreateDialogComponent, defaultFirstLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe((chatPartners: UserPublicInfoDTO[]) => {\r\n                this.metisConversationService.createGroupChat(chatPartners?.map((partner) => partner.login!)).subscribe({\r\n                    complete: () => {\r\n                        this.prepareSidebarData();\r\n                    },\r\n                });\r\n            });\r\n    }\r\n\r\n    openCreateOneToOneChatDialog() {\r\n        const modalRef: NgbModalRef = this.modalService.open(OneToOneChatCreateDialogComponent, defaultFirstLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe((chatPartner: UserPublicInfoDTO) => {\r\n                if (chatPartner?.login) {\r\n                    this.metisConversationService.createOneToOneChat(chatPartner.login).subscribe({\r\n                        complete: () => {\r\n                            this.prepareSidebarData();\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    openCreateChannelDialog() {\r\n        const modalRef: NgbModalRef = this.modalService.open(ChannelsCreateDialogComponent, defaultSecondLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe((channel: ChannelDTO) => {\r\n                this.channelActions$.emit({ action: 'create', channel });\r\n            });\r\n    }\r\n\r\n    markAllChannelAsRead() {\r\n        this.metisConversationService.markAllChannelsAsRead(this.course).subscribe({\r\n            complete: () => {\r\n                this.metisConversationService.forceRefresh().subscribe({\r\n                    complete: () => {\r\n                        this.prepareSidebarData();\r\n                        this.closeSidebarOnMobile();\r\n                    },\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    openChannelOverviewDialog() {\r\n        const subType = null;\r\n        const modalRef: NgbModalRef = this.modalService.open(ChannelsOverviewDialogComponent, defaultFirstLayerDialogOptions);\r\n        modalRef.componentInstance.course = this.course;\r\n        modalRef.componentInstance.createChannelFn = subType === ChannelSubType.GENERAL ? this.metisConversationService.createChannel : undefined;\r\n        modalRef.componentInstance.channelSubType = subType;\r\n        modalRef.componentInstance.initialize();\r\n        from(modalRef.result)\r\n            .pipe(\r\n                catchError(() => EMPTY),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe((result) => {\r\n                const [newActiveConversation, isModificationPerformed] = result;\r\n                if (isModificationPerformed) {\r\n                    this.metisConversationService.forceRefresh(!newActiveConversation, true).subscribe({\r\n                        complete: () => {\r\n                            if (newActiveConversation) {\r\n                                this.metisConversationService.setActiveConversation(newActiveConversation);\r\n                                this.closeSidebarOnMobile();\r\n                            }\r\n                        },\r\n                    });\r\n                } else {\r\n                    if (newActiveConversation) {\r\n                        this.metisConversationService.setActiveConversation(newActiveConversation);\r\n                        this.closeSidebarOnMobile();\r\n                    }\r\n                }\r\n                this.prepareSidebarData();\r\n            });\r\n    }\r\n\r\n    toggleChannelSearch() {\r\n        this.channelSearchCollapsed = !this.channelSearchCollapsed;\r\n    }\r\n\r\n    openThread(postToOpen: Post | undefined) {\r\n        this.postInThread = postToOpen;\r\n    }\r\n\r\n    @HostListener('document:keydown', ['$event'])\r\n    handleSearchShortcut(event: KeyboardEvent) {\r\n        if ((event.metaKey || event.ctrlKey) && event.key === 'k') {\r\n            event.preventDefault();\r\n            this.searchElement()!.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    onTriggerNavigateToPost(post: Posting) {\r\n        let id = (post as Post)?.conversation?.id;\r\n        this.focusPostId = post.id;\r\n        this.openThreadOnFocus = false;\r\n        if (post.id === undefined) {\r\n            return;\r\n        } else if ((post as Post)?.conversation?.id === undefined) {\r\n            this.openThreadOnFocus = true;\r\n            id = (post as AnswerPost)?.post?.conversation?.id;\r\n            this.focusPostId = (post as AnswerPost)?.post?.id;\r\n        }\r\n\r\n        this.metisConversationService.setActiveConversation(id);\r\n        this.changeDetector.detectChanges();\r\n    }\r\n}\r\n", "<jhi-loading-indicator-container [isLoading]=\"isLoading\">\r\n    <div class=\"input-group mb-2 rounded-3 p-2 me-2 module-bg\" [hidden]=\"!isCodeOfConductAccepted\">\r\n        <!-- search bar -->\r\n        <input\r\n            #courseWideSearchInput\r\n            name=\"searchText\"\r\n            id=\"search\"\r\n            [(ngModel)]=\"courseWideSearchTerm\"\r\n            class=\"form-control\"\r\n            (keyup.enter)=\"onSearch()\"\r\n            placeholder=\"{{ 'artemisApp.metis.overview.searchBarDefault' | artemisTranslate }}\"\r\n        />\r\n        <jhi-button [btnType]=\"ButtonType.SECONDARY\" [icon]=\"faTimes\" (onClick)=\"hideSearchTerm()\" />\r\n        <jhi-button id=\"search-submit\" class=\"ms-1\" [icon]=\"faSearch\" (onClick)=\"onSearch()\" />\r\n    </div>\r\n    <!-- only display after isCodeOfConductAccepted is loaded and set to false -->\r\n    @if (course && isCodeOfConductAccepted === false) {\r\n        <div class=\"module-bg px-3 py-3 code-of-conduct\">\r\n            <jhi-course-conversations-code-of-conduct [course]=\"course!\" />\r\n            <button id=\"acceptCodeOfConductButton\" class=\"btn btn-primary\" type=\"button\" (click)=\"acceptCodeOfConduct()\" jhiTranslate=\"artemisApp.codeOfConduct.accept\"></button>\r\n        </div>\r\n    }\r\n    @if (isCodeOfConductAccepted && isServiceSetUp && course) {\r\n        <div class=\"d-flex justify-content-between\">\r\n            <div class=\"communication-content-sidebar\" [ngClass]=\"{ 'sidebar-collapsed': isCollapsed, 'is-not-in-active-conversation': !activeConversation }\">\r\n                <jhi-sidebar\r\n                    (onSelectConversation)=\"onConversationSelected($event)\"\r\n                    (onUpdateSidebar)=\"prepareSidebarData()\"\r\n                    [itemSelected]=\"conversationSelected\"\r\n                    [courseId]=\"course.id\"\r\n                    [sidebarData]=\"sidebarData\"\r\n                    (onCreateChannelPressed)=\"openCreateChannelDialog()\"\r\n                    (onMarkAllChannelsAsRead)=\"markAllChannelAsRead()\"\r\n                    (onBrowsePressed)=\"openChannelOverviewDialog()\"\r\n                    (onDirectChatPressed)=\"openCreateOneToOneChatDialog()\"\r\n                    (onGroupChatPressed)=\"openCreateGroupChatDialog()\"\r\n                    [channelTypeIcon]=\"CHANNEL_TYPE_ICON\"\r\n                    [sidebarItemAlwaysShow]=\"DEFAULT_SHOW_ALWAYS\"\r\n                    [collapseState]=\"DEFAULT_COLLAPSE_STATE\"\r\n                    [inCommunication]=\"true\"\r\n                    [reEmitNonDistinctSidebarEvents]=\"true\"\r\n                />\r\n            </div>\r\n            @if (course && !activeConversation && isCodeOfConductPresented) {\r\n                <div class=\"col pe-0 flex-grow-1\">\r\n                    <jhi-course-conversations-code-of-conduct [course]=\"course!\" />\r\n                </div>\r\n            }\r\n            <div\r\n                class=\"communication-message-wrap col flex-grow-1 module-bg rounded-3 scrollable-content\"\r\n                [ngClass]=\"{ 'content-height-dev': !isProduction || isTestServer, 'is-answer-thread-open': !!postInThread }\"\r\n            >\r\n                @if (activeConversation) {\r\n                    <jhi-conversation-header\r\n                        (collapseSearch)=\"toggleChannelSearch()\"\r\n                        (onUpdateSidebar)=\"prepareSidebarData()\"\r\n                        (togglePinnedMessage)=\"togglePinnedView()\"\r\n                        [pinnedMessageCount]=\"pinnedCount\"\r\n                    />\r\n                    <jhi-conversation-messages\r\n                        [contentHeightDev]=\"!isProduction || isTestServer\"\r\n                        (openThread)=\"openThread($event)\"\r\n                        [course]=\"course\"\r\n                        [searchbarCollapsed]=\"channelSearchCollapsed\"\r\n                        (onNavigateToPost)=\"onTriggerNavigateToPost($event)\"\r\n                        [focusPostId]=\"focusPostId\"\r\n                        [openThreadOnFocus]=\"openThreadOnFocus\"\r\n                        [showOnlyPinned]=\"showOnlyPinned\"\r\n                        (pinnedCount)=\"onPinnedCountChanged($event)\"\r\n                    />\r\n                } @else {\r\n                    @if (selectedSavedPostStatus === null) {\r\n                        <jhi-course-wide-search (openThread)=\"postInThread = $event\" [courseWideSearchConfig]=\"courseWideSearchConfig\" />\r\n                    } @else {\r\n                        <jhi-saved-posts [savedPostStatus]=\"selectedSavedPostStatus\" [courseId]=\"course.id\" (onNavigateToPost)=\"onNavigateToPost($event)\" />\r\n                    }\r\n                }\r\n            </div>\r\n            <div class=\"scrollable-content\" [ngClass]=\"{ 'content-height-dev': !isProduction || isTestServer, 'is-answer-thread-open': !!postInThread }\">\r\n                @if (!!postInThread) {\r\n                    <jhi-conversation-thread-sidebar\r\n                        [activeConversation]=\"activeConversation ?? postInThread.conversation!\"\r\n                        [readOnlyMode]=\"!!getAsChannel(postInThread.conversation)?.isArchived\"\r\n                        [activePost]=\"postInThread\"\r\n                        (closePostThread)=\"postInThread = undefined\"\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n    }\r\n</jhi-loading-indicator-container>\r\n"],
  "mappings": "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",
  "names": ["CourseSidebarService", "closeSidebar$", "EventEmitter", "openSidebar$", "toggleSidebar$", "closeSidebar", "emit", "openSidebar", "toggleSidebar", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openSidebar", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faChevronLeft", "\u0275\u0275pureFunction1", "_c4", "courseWideSearchConfig", "searchTerm", "_r4", "onSelectContext", "onChangeSortDir", "formGroup", "faFilter", "sortingOrder", "SortDirection", "ASCENDING", "faLongArrowAltUp", "faLongArrowAltDown", "\u0275\u0275pipeBind1", "faCircleNotch", "faEnvelope", "$event", "_r5", "setPostForThread", "post_r6", "conversation", "lastMessageDate", "tmp_13_0", "getAsChannel", "hasChannelModerationRights", "id", "tmp_17_0", "isArchived", "CourseWideSearchComponent", "input", "required", "messages", "viewChildren", "messages$", "toObservable", "content", "viewChild", "openThread", "output", "course", "currentPostContextFilter", "messagesContainerHeight", "faPlus", "faTimes", "ngUnsubscribe", "Subject", "isFetchingPosts", "totalNumberOfPosts", "posts", "previousScrollDistanceFromTop", "page", "getAsChannelDTO", "courseSidebarService", "inject", "CourseSidebarService", "metisService", "MetisService", "metisConversationService", "MetisConversationService", "formBuilder", "FormBuilder", "cdr", "ChangeDetectorRef", "ngOnInit", "subscribeToMetis", "resetFormGroup", "detectChanges", "onSearch", "ngAfterViewInit", "pipe", "takeUntil", "subscribe", "handleScrollOnNewMessage", "ngOnDestroy", "next", "complete", "setPosts", "nativeElement", "scrollHeight", "scrollTop", "slice", "reverse", "length", "scrollToBottomOfMessages", "fetchNextPage", "commandMetisToFetchPosts", "forceUpdate", "refreshMetisConversationPostContextFilter", "getFilteredPosts", "searchConfig", "courseId", "searchText", "trim", "undefined", "postSortCriterion", "PostSortCriterion", "CREATION_DATE", "filterToUnresolved", "filterToOwn", "filterToAnsweredOrReacted", "pagingEnabled", "pageSize", "conversationsOfUser$", "conversations", "courseWideChannelIds", "filter", "conversationIsAnnouncement", "map", "type", "isAnnouncementChannel", "postsTrackByFn", "index", "post", "emit", "group", "DESCENDING", "get", "value", "selectors", "viewQuery", "rf", "ctx", "i0", "_r1", "\u0275\u0275template", "CourseWideSearchComponent_Conditional_15_Template", "CourseWideSearchComponent_Conditional_16_Template", "CourseWideSearchComponent_Conditional_19_Template", "CourseWideSearchComponent_Conditional_29_Template", "CourseWideSearchComponent_Conditional_30_Template", "\u0275\u0275repeaterCreate", "CourseWideSearchComponent_For_37_Template", "_c2", "\u0275\u0275conditional", "_c3", "\u0275\u0275repeater", "NgClass", "TranslateDirective", "FaIconComponent", "FormsModule", "\u0275NgNoValidate", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "NgbTooltip", "InfiniteScrollDirective", "PostingThreadComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "CourseWideSearchConfig", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "dismiss", "\u0275\u0275element", "$event", "onChannelTypeChanged", "onIsAnnouncementChannelChanged", "onIsCourseWideChannelChanged", "onFormSubmitted", "\u0275\u0275advance", "\u0275\u0275textInterpolate3", "\u0275\u0275pipeBind1", "isPublicChannel", "isCourseWideChannel", "isAnnouncementChannel", "ChannelsCreateDialogComponent", "AbstractDialogComponent", "course", "initialize", "channelToCreate", "ChannelDTO", "createChannel", "formData", "name", "description", "isPublic", "trim", "undefined", "isCourseWide", "close", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ChannelsCreateDialogComponent_Conditional_0_Template", "\u0275\u0275conditional", "isInitialized", "TranslateDirective", "ChannelFormComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate1", "ctx_r0", "channel", "description", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "tutorialGroupTitle", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "emitChannelAction", "id", "_r3", "_r4", "\u0275\u0275template", "ChannelItemComponent_Conditional_0_Conditional_16_Template", "ChannelItemComponent_Conditional_0_Conditional_21_Template", "ChannelItemComponent_Conditional_0_Conditional_22_Template", "ChannelItemComponent_Conditional_0_Conditional_26_Template", "ChannelItemComponent_Conditional_0_Conditional_27_Template", "ChannelItemComponent_Conditional_0_Conditional_28_Template", "isPublic", "isAnnouncementChannel", "name", "\u0275\u0275conditional", "isMember", "\u0275\u0275textInterpolate2", "numberOfMembers", "length", "tutorialGroupId", "canJoinChannel", "canLeaveConversation", "ChannelItemComponent", "channelAction", "EventEmitter", "action", "stopPropagation", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ChannelItemComponent_Conditional_0_Template", "ChannelIconComponent", "TranslateDirective", "ArtemisTranslatePipe", "styles", "channels", "indexOf", "$item", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onChannelAction", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "channel_r4", "id", "\u0275\u0275repeaterCreate", "ChannelsOverviewDialogComponent_Conditional_2_Conditional_18_For_8_Template", "_forTrack0", "\u0275\u0275repeater", "_r1", "clear", "\u0275\u0275template", "ChannelsOverviewDialogComponent_Conditional_2_Conditional_18_Template", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "course", "title", "\u0275\u0275conditional", "length", "ChannelsOverviewDialogComponent", "AbstractDialogComponent", "channelService", "inject", "ChannelService", "alertService", "AlertService", "ngUnsubscribe", "Subject", "canCreateChannel", "createChannelFn", "channelSubType", "channelActions$", "noOfChannels", "channelModificationPerformed", "isLoading", "isInitialized", "faChevronRight", "initialize", "loadChannelsOfCourse", "ngOnInit", "pipe", "debounceTime", "distinctUntilChanged", "takeUntil", "subscribe", "channelAction", "performChannelAction", "ngOnDestroy", "next", "complete", "close", "undefined", "dismiss", "action", "registerUsersToChannel", "channel", "deregisterUsersFromChannel", "getChannelsOfCourse", "map", "res", "body", "finalize", "error", "errorResponse", "onError", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ChannelsOverviewDialogComponent_Conditional_2_Template", "LoadingIndicatorContainerComponent", "ChannelItemComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275elementStart", "\u0275\u0275template", "GroupChatCreateDialogComponent_Conditional_0_Conditional_20_Conditional_3_Template", "GroupChatCreateDialogComponent_Conditional_0_Conditional_20_Conditional_4_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "ctx_r1", "selectedUsersControl", "errors", "required", "maxlength", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clear", "onSubmit", "GroupChatCreateDialogComponent_Conditional_0_Conditional_20_Template", "form", "course", "id", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "isSubmitPossible", "GroupChatCreateDialogComponent", "AbstractDialogComponent", "fb", "inject", "FormBuilder", "initialize", "isInitialized", "initializeForm", "validators", "Validators", "maxLength", "group", "selectedUsers", "get", "dismiss", "close", "value", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "GroupChatCreateDialogComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "CourseUsersSelectorComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clear", "$event", "onSelectedUsersChange", "\u0275\u0275advance", "\u0275\u0275property", "selectedUsers", "course", "id", "\u0275\u0275pipeBind1", "OneToOneChatCreateDialogComponent", "AbstractDialogComponent", "isInitialized", "userToChatWith", "initialize", "dismiss", "onUserSelected", "close", "length", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "OneToOneChatCreateDialogComponent_Conditional_0_Template", "\u0275\u0275conditional", "TranslateDirective", "CourseUsersSelectorComponent", "FormsModule", "NgControlStatus", "NgModel", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "user_r1", "name", "\u0275\u0275propertyInterpolate1", "email", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate", "CourseConversationsCodeOfConductComponent", "alertService", "inject", "AlertService", "conversationService", "ConversationService", "course", "input", "required", "responsibleContacts", "ngOnInit", "id", "getResponsibleUsersForCodeOfConduct", "subscribe", "next", "res", "body", "error", "onError", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "CourseConversationsCodeOfConductComponent_For_8_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275property", "\u0275\u0275pipeBind1", "courseInformationSharingMessagingCodeOfConduct", "\u0275\u0275sanitizeHtml", "\u0275\u0275repeater", "TranslateDirective", "HtmlForMarkdownPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "activeConversationAsChannel", "isPublic", "isAnnouncementChannel", "faPeopleGroup", "otherUser", "id", "name", "imageUrl", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275pureFunction2", "_c0", "course", "tutorialGroupId", "\u0275\u0275pureFunction1", "_c1", "tutorialGroupTitle", "\u0275\u0275template", "ConversationHeaderComponent_Conditional_0_Conditional_20_Conditional_1_Template", "\u0275\u0275conditional", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "togglePinnedMessages", "ConversationHeaderComponent_Conditional_0_Conditional_27_Conditional_5_Template", "ConversationHeaderComponent_Conditional_0_Conditional_27_Conditional_6_Template", "showPinnedMessages", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "pinnedMessageCount", "\u0275\u0275pipeBind2", "_c2", "tmp_2_0", "channelSubTypeReferenceTranslationKey", "undefined", "channelSubTypeReferenceRouterLink", "$event", "_r4", "openAddUsersDialog", "faUserPlus", "\u0275\u0275textInterpolate", "topic", "ConversationHeaderComponent_Conditional_0_Conditional_50_Conditional_1_Template", "length", "_r1", "openSidebar", "openConversationDetailDialog", "INFO", "ConversationHeaderComponent_Conditional_0_Conditional_14_Template", "ConversationHeaderComponent_Conditional_0_Conditional_15_Template", "ConversationHeaderComponent_Conditional_0_Conditional_16_Template", "ConversationHeaderComponent_Conditional_0_Conditional_20_Template", "ConversationHeaderComponent_Conditional_0_Conditional_27_Template", "toggleSearchBar", "ConversationHeaderComponent_Conditional_0_Conditional_39_Template", "MEMBERS", "ConversationHeaderComponent_Conditional_0_Conditional_45_Template", "ConversationHeaderComponent_Conditional_0_Conditional_50_Template", "faChevronLeft", "getAsGroupChat", "activeConversation", "getAsOneToOneChat", "conversationService", "getConversationName", "faSearch", "subTypeReferenceId", "faUserGroup", "numberOfMembers", "canAddUsers", "ConversationHeaderComponent", "modalService", "inject", "NgbModal", "metisConversationService", "MetisConversationService", "ConversationService", "metisService", "MetisService", "input", "togglePinnedMessage", "output", "ngUnsubscribe", "Subject", "collapseSearch", "EventEmitter", "onUpdateSidebar", "ConversationDetailTabs", "courseSidebarService", "CourseSidebarService", "cdr", "ChangeDetectorRef", "getAsGroupChatDTO", "getAsOneToOneChatDTO", "canAddUsersToConversation", "ngOnInit", "subscribeToActiveConversation", "ngOnChanges", "changes", "currentCount", "currentValue", "detectChanges", "emit", "getOtherUser", "conversation", "members", "find", "user", "isRequestingUser", "ngOnDestroy", "next", "complete", "activeConversation$", "pipe", "takeUntil", "subscribe", "getAsChannelDTO", "getChannelSubTypeReferenceTranslationKey", "subType", "getLinkForChannelSubType", "event", "stopPropagation", "modalRef", "open", "ConversationAddUsersDialogComponent", "defaultFirstLayerDialogOptions", "componentInstance", "initialize", "from", "result", "catchError", "EMPTY", "forceRefresh", "tab", "ConversationDetailDialogComponent", "selectedTab", "userNameClicked", "subscription", "username", "dismiss", "createOneToOneChatWithId", "error", "closed", "unsubscribe", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConversationHeaderComponent_Conditional_0_Template", "FaIconComponent", "ChannelIconComponent", "ProfilePictureComponent", "TranslateDirective", "RouterLink", "EmojiComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clearSearchInput", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faTimes", "\u0275\u0275pureFunction1", "_c4", "totalNumberOfPosts", "$event", "_r2", "onSearchQueryInput", "\u0275\u0275template", "ConversationMessagesComponent_Conditional_0_Conditional_6_Conditional_14_Template", "ConversationMessagesComponent_Conditional_0_Conditional_6_Case_17_Template", "ConversationMessagesComponent_Conditional_0_Conditional_6_Case_18_Template", "ConversationMessagesComponent_Conditional_0_Conditional_6_Case_19_Template", "\u0275\u0275classProp", "searchText", "faSearch", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "tmp_10_0", "faCircleNotch", "faEnvelope", "_r5", "setPostForThread", "onTriggerNavigateToPost", "_activeConversation", "lastReadDate", "tmp_24_0", "getAsChannel", "hasChannelModerationRights", "post_r6", "id", "tmp_28_0", "isArchived", "isConsecutive", "forwardedPosts", "\u0275\u0275pureFunction0", "_c5", "forwardedAnswerPosts", "\u0275\u0275repeaterCreate", "ConversationMessagesComponent_Conditional_0_For_19_For_4_Template", "\u0275\u0275componentInstance", "postsTrackByFn", "\u0275\u0275repeater", "group_r7", "posts", "_r8", "createEditModal_r9", "\u0275\u0275reference", "open", "handleNewMessageCreated", "newPost", "_r10", "ConversationMessagesComponent_Conditional_0_Conditional_20_Conditional_3_Template", "ConversationMessagesComponent_Conditional_0_Conditional_20_Conditional_4_Template", "tmp_3_0", "isAnnouncementChannel", "_r11", "createEditModal_r12", "_r13", "ConversationMessagesComponent_Conditional_0_Conditional_22_Conditional_3_Template", "ConversationMessagesComponent_Conditional_0_Conditional_22_Conditional_4_Template", "ConversationMessagesComponent_Conditional_0_Conditional_6_Template", "ConversationMessagesComponent_Conditional_0_Conditional_11_Template", "ConversationMessagesComponent_Conditional_0_Conditional_12_Template", "_r1", "fetchNextPage", "ConversationMessagesComponent_Conditional_0_For_19_Template", "postsGroupTrackByFn", "ConversationMessagesComponent_Conditional_0_Conditional_20_Template", "ConversationMessagesComponent_Conditional_0_Conditional_22_Template", "searchbarCollapsed", "isFetchingPosts", "length", "\u0275\u0275pureFunction5", "_c3", "contentHeightDev", "isHiddenInputFull", "isHiddenInputWithCallToAction", "groupedPosts", "canCreateNewMessageInConversation", "isMobile", "ConversationMessagesComponent", "metisService", "inject", "MetisService", "metisConversationService", "MetisConversationService", "cdr", "ChangeDetectorRef", "ngUnsubscribe", "Subject", "sessionStorageKey", "PageType", "ButtonType", "scrollDebounceTime", "scrollSubject", "canStartSaving", "createdNewMessage", "openThread", "EventEmitter", "searchInput", "messages", "content", "course", "showOnlyPinned", "input", "pinnedCount", "output", "pinnedPosts", "focusPostId", "undefined", "openThreadOnFocus", "getAsChannelDTO", "previousScrollDistanceFromTop", "messagesContainerHeight", "currentPostContextFilter", "search$", "onNavigateToPost", "elementsAtScrollPosition", "allPosts", "page", "focusOnPostId", "isOpenThreadOnFocus", "layoutService", "LayoutService", "constructor", "effect", "ngOnChanges", "changes", "firstChange", "setPosts", "applyPinnedMessageFilter", "detectChanges", "ngOnInit", "subscribeToSearch", "subscribeToMetis", "subscribeToActiveConversation", "setupScrollDebounce", "isBreakpointActive", "CustomBreakpointNames", "extraSmall", "subscribeToLayoutChanges", "pipe", "takeUntil", "subscribe", "getPinnedPosts", "emit", "fetchAllPinnedPosts", "activeConversation$", "conversation", "onActiveConversationChange", "debounceTime", "distinctUntilChanged", "map", "trim", "toLowerCase", "next", "onSearch", "ngAfterViewInit", "handleScrollOnNewMessage", "scrollToStoredId", "nativeElement", "addEventListener", "findElementsAtScrollPosition", "ngOnDestroy", "complete", "removeEventListener", "saveScrollPosition", "savedScrollId", "sessionStorage", "getItem", "requestAnimationFrame", "goToLastSelectedElement", "parseInt", "value", "createEmptyPost", "refreshMetisConversationPostContextFilter", "courseId", "conversationId", "postSortCriterion", "PostSortCriterion", "CREATION_DATE", "sortingOrder", "SortDirection", "DESCENDING", "pagingEnabled", "pageSize", "groupPosts", "sortedPosts", "sort", "a", "b", "creationDate", "valueOf", "groups", "currentGroup", "author", "__spreadProps", "__spreadValues", "i", "currentPost", "lastPostInGroup", "timeDiff", "Number", "MAX_SAFE_INTEGER", "diff", "push", "scrollHeight", "scrollTop", "slice", "reverse", "postIdsWithForwardedMessages", "filter", "post", "hasForwardedMessages", "getForwardedMessagesByIds", "PostingType", "POST", "response", "forwardedMessagesGroups", "body", "Map", "group", "sourcePostIds", "sourceAnswerIds", "forEach", "message", "sourceType", "toString", "sourceId", "sourceRequests", "getSourcePostsByIds", "getSourceAnswerPostsByIds", "forkJoin", "responses", "fetchedPosts", "fetchedAnswerPosts", "Array", "isArray", "resolvesPost", "forwardedMessages", "get", "fetchedPost", "some", "fetchedAnswerPost", "markForCheck", "morePostsAvailable", "addBuffer", "commandMetisToFetchPosts", "forceUpdate", "getFilteredPosts", "createEmptyPostInMetis", "isChannelDTO", "channel", "Channel", "isGroupChatDTO", "GroupChat", "isOneToOneChatDTO", "OneToOneChat", "Error", "createEmptyPostForContext", "_index", "p", "join", "scrollToBottomOfMessages", "searchTerm", "target", "dispatchEvent", "Event", "postId", "setItem", "lastScrollPosition", "isOpenThread", "__async", "element", "toArray", "find", "Math", "max", "elementRef", "offsetTop", "messageArray", "containerRect", "getBoundingClientRect", "visibleMessages", "rect", "top", "bottom", "selectors", "viewQuery", "rf", "ctx", "ConversationMessagesComponent_Conditional_0_Template", "FaIconComponent", "TranslateDirective", "InfiniteScrollDirective", "NgClass", "PostingThreadComponent", "PostCreateEditModalComponent", "MessageInlineInputComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "import_interactjs", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "closeAlert", "\u0275\u0275elementEnd", "\u0275\u0275element", "_r3", "isModalOpen", "emit", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "isLoading", "formGroup", "valid", "MessageReplyInlineInputComponent", "PostingCreateEditDirective", "localStorageService", "inject", "LocalStorageService", "warningDismissed", "activeConversation", "input", "valueChange", "EventEmitter", "ngOnInit", "retrieve", "ngOnChanges", "changes", "propName", "hasOwnProperty", "previousValue", "post", "id", "currentValue", "posting", "content", "get", "value", "resetFormGroup", "undefined", "formBuilder", "group", "Validators", "required", "maxLength", "maxContentLength", "PostContentValidationPattern", "createPosting", "metisService", "createAnswerPost", "subscribe", "next", "answerPost", "onCreate", "error", "updatePosting", "updateAnswerPost", "store", "__ngFactoryType__", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "confirm", "\u0275\u0275template", "MessageReplyInlineInputComponent_Conditional_8_Template", "MessageReplyInlineInputComponent_Conditional_9_Template", "editorHeight", "editType", "\u0275\u0275conditional", "EditType", "UPDATE", "FormsModule", "\u0275NgNoValidate", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PostingMarkdownEditorComponent", "TranslateDirective", "PostingButtonComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "faGripLinesVertical", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "createdAnswerPost", "createEmptyAnswerPost", "scrollEditorIntoView", "conversation", "\u0275\u0275template", "ConversationThreadSidebarComponent_Conditional_36_Conditional_10_Template", "readOnlyMode", "post", "lastReadDate", "hasChannelModerationRights", "\u0275\u0275conditional", "ConversationThreadSidebarComponent", "scrollBody", "expandTooltip", "viewChild", "threadContainer", "activeConversation", "getAsChannelDTO", "activePost", "closePostThread", "EventEmitter", "faXmark", "faChevronLeft", "faArrowLeft", "faExpand", "faCompress", "isExpanded", "answerPost", "AnswerPost", "content", "toggleExpand", "nativeElement", "style", "width", "close", "ngAfterViewInit", "interact", "resizable", "edges", "left", "right", "bottom", "top", "modifiers", "restrictSize", "min", "window", "innerWidth", "height", "max", "inertia", "on", "event", "target", "classList", "add", "remove", "rect", "scrollTo", "scrollHeight", "behavior", "selectors", "viewQuery", "rf", "ctx", "ConversationThreadSidebarComponent_Conditional_6_Template", "i0", "_r1", "emit", "ConversationThreadSidebarComponent_Conditional_36_Template", "\u0275\u0275pureFunction1", "_c3", "\u0275\u0275pipeBind1", "undefined", "FaIconComponent", "TranslateDirective", "NgbTooltip", "PostComponent", "MessageReplyInlineInputComponent", "ArtemisTranslatePipe", "NgClass", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "PostingSummaryComponent_Conditional_2_Conditional_1_Conditional_10_Template", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "post", "conversation", "type", "ConversationType", "CHANNEL", "faHashtag", "faLock", "\u0275\u0275textInterpolate1", "title", "\u0275\u0275conditional", "isAnswerPost", "faEllipsis", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind2", "creationDate", "postingIsOfToday", "PostingSummaryComponent_Conditional_2_Conditional_2_Conditional_3_Template", "PostingSummaryComponent_Conditional_2_Conditional_2_Conditional_15_Template", "\u0275\u0275pureFunction1", "_c0", "author", "id", "name", "imageUrl", "\u0275\u0275textInterpolate", "undefined", "content", "updatedDate", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onStatusChangeClick", "SavedPostStatus", "PROGRESS", "COMPLETED", "ARCHIVED", "\u0275\u0275pipeBind1", "savedPostStatus", "faBookmark", "faCheckSquare", "faBoxArchive", "PostingSummaryComponent_Conditional_2_Conditional_1_Template", "PostingSummaryComponent_Conditional_2_Conditional_2_Template", "PostingSummaryComponent_Conditional_2_Conditional_3_Template", "isShowSummary", "isShowContent", "isShowSavedPostOptions", "PostingSummaryComponent", "input", "onChangeSavedPostStatus", "output", "onNavigateToPost", "isShowPosting", "constructor", "effect", "postingType", "PostingType", "ANSWER", "valueOf", "dayjs", "isSame", "status", "emit", "onTriggerNavigateToPost", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "PostingSummaryComponent_Conditional_2_Template", "FaIconComponent", "TranslateDirective", "NgClass", "ProfilePictureComponent", "NgbTooltip", "PostingContentComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faInfoCircle", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "post_r3", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "changeSavedPostStatus", "onTriggerNavigateToPost", "\u0275\u0275template", "SavedPostsComponent_Conditional_17_For_2_Conditional_1_Template", "\u0275\u0275conditional", "hiddenPosts", "includes", "id", "\u0275\u0275repeaterCreate", "SavedPostsComponent_Conditional_17_For_2_Template", "\u0275\u0275componentInstance", "trackPostFunction", "\u0275\u0275repeater", "posts", "faBookmark", "SavedPostsComponent", "savedPostStatus", "input", "courseId", "onNavigateToPost", "output", "savedPostService", "inject", "SavedPostService", "savedPostStatusMap", "SavedPostStatusMap", "PROGRESS", "isShowDeleteNotice", "constructor", "effect", "Posting", "statusToMap", "fetchSavedPosts", "subscribe", "next", "response", "body", "map", "convertPostingToCorrespondingType", "error", "complete", "index", "post", "status", "push", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "SavedPostsComponent_Conditional_14_Template", "SavedPostsComponent_Conditional_17_Template", "SavedPostsComponent_Conditional_18_Template", "toString", "length", "TranslateDirective", "FaIconComponent", "PostingSummaryComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "acceptCodeOfConduct", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "course", "_r5", "toggleChannelSearch", "prepareSidebarData", "togglePinnedView", "$event", "openThread", "onTriggerNavigateToPost", "onPinnedCountChanged", "pinnedCount", "isProduction", "isTestServer", "channelSearchCollapsed", "focusPostId", "openThreadOnFocus", "showOnlyPinned", "_r6", "postInThread", "courseWideSearchConfig", "_r7", "onNavigateToPost", "selectedSavedPostStatus", "id", "\u0275\u0275template", "CourseConversationsComponent_Conditional_16_Conditional_12_Conditional_1_Template", "CourseConversationsComponent_Conditional_16_Conditional_12_Conditional_2_Template", "\u0275\u0275conditional", "_r8", "undefined", "tmp_3_0", "activeConversation", "conversation", "tmp_4_0", "getAsChannel", "isArchived", "_r4", "onConversationSelected", "openCreateChannelDialog", "markAllChannelAsRead", "openChannelOverviewDialog", "openCreateOneToOneChatDialog", "openCreateGroupChatDialog", "CourseConversationsComponent_Conditional_16_Conditional_8_Template", "CourseConversationsComponent_Conditional_16_Conditional_11_Template", "CourseConversationsComponent_Conditional_16_Conditional_12_Template", "CourseConversationsComponent_Conditional_16_Conditional_16_Template", "\u0275\u0275pureFunction2", "_c1", "isCollapsed", "conversationSelected", "sidebarData", "CHANNEL_TYPE_ICON", "DEFAULT_SHOW_ALWAYS", "DEFAULT_COLLAPSE_STATE", "isCodeOfConductPresented", "_c2", "DEFAULT_CHANNEL_GROUPS", "favoriteChannels", "entityData", "recents", "generalChannels", "exerciseChannels", "lectureChannels", "examChannels", "feedbackDiscussion", "archivedChannels", "savedPosts", "faMessage", "faList", "faGraduationCap", "groupChats", "faComments", "directMessages", "faComment", "faHeart", "faFile", "faBoxArchive", "faPersonChalkboard", "faBookmark", "faClock", "CourseConversationsComponent", "router", "inject", "Router", "activatedRoute", "ActivatedRoute", "metisConversationService", "MetisConversationService", "metisService", "MetisService", "courseOverviewService", "CourseOverviewService", "modalService", "NgbModal", "profileService", "ProfileService", "ngUnsubscribe", "Subject", "closeSidebarEventSubscription", "openSidebarEventSubscription", "toggleSidebarEventSubscription", "breakpointSubscription", "isLoading", "isServiceSetUp", "messagingEnabled", "conversationsOfUser", "accordionConversationGroups", "sidebarConversations", "profileSubscription", "isMobile", "isCodeOfConductAccepted", "courseWideSearch", "viewChild", "CourseWideSearchComponent", "searchElement", "courseWideSearchTerm", "ButtonType", "faPlus", "faTimes", "faFilter", "faSearch", "createChannelFn", "channelActions$", "EventEmitter", "courseSidebarService", "CourseSidebarService", "layoutService", "LayoutService", "changeDetector", "ChangeDetectorRef", "getAsChannelDTO", "subscribeToMetis", "posts", "pipe", "takeUntil", "subscribe", "find", "post", "newCount", "detectChanges", "setupMetis", "setPageType", "PageType", "OVERVIEW", "setCourse", "ngOnInit", "isBreakpointActive", "CustomBreakpointNames", "extraSmall", "subscribeToLayoutChanges", "openSidebar$", "setIsCollapsed", "closeSidebar$", "toggleSidebar$", "toggleSidebar", "openSidebar", "getSidebarCollapseStateFromStorage", "closeSidebar", "isServiceSetup$", "initializeCourseWideSearchConfig", "initializeSidebarAccordions", "subscribeToQueryParameter", "subscribeToActiveConversation", "subscribeToIsCodeOfConductAccepted", "subscribeToIsCodeOfConductPresented", "subscribeToConversationsOfUser", "updateQueryParameters", "checkIsCodeOfConductAccepted", "debounceTime", "distinctUntilChanged", "prev", "curr", "action", "channel", "name", "channelAction", "performChannelAction", "createChannel", "getProfileInfo", "profileInfo", "inProduction", "testServer", "complete", "error", "captureException", "queryParams", "take", "conversationId", "isNaN", "Number", "Object", "values", "SavedPostStatusMap", "map", "s", "toString", "includes", "Posting", "mapToStatus", "setActiveConversation", "closeSidebarOnMobile", "messageId", "referencePostId", "postingType", "PostingType", "ANSWER", "navigate", "relativeTo", "statusToMap", "replaceUrl", "ngOnDestroy", "next", "unsubscribe", "activeConversation$", "previousConversation", "isCodeOfConductAccepted$", "isCodeOfConductPresented$", "conversationsOfUser$", "conversations", "CourseWideSearchConfig", "searchTerm", "filterToUnresolved", "filterToOwn", "filterToAnsweredOrReacted", "sortingOrder", "SortDirection", "ASCENDING", "isMessagingEnabled", "__spreadProps", "__spreadValues", "hideSearchTerm", "onSearch", "forceRefresh", "mapConversationsToSidebarCardElements", "groupConversationsByChannelType", "filter", "item", "isCurrent", "updateSidebarData", "groupByCategory", "sidebarType", "storageId", "groupedData", "ungroupedData", "showAccordionLeadingIcon", "canCreateChannel", "resetCachedPosts", "value", "setSidebarCollapseState", "modalRef", "open", "GroupChatCreateDialogComponent", "defaultFirstLayerDialogOptions", "componentInstance", "initialize", "from", "result", "catchError", "EMPTY", "chatPartners", "createGroupChat", "partner", "login", "OneToOneChatCreateDialogComponent", "chatPartner", "createOneToOneChat", "ChannelsCreateDialogComponent", "defaultSecondLayerDialogOptions", "emit", "markAllChannelsAsRead", "ChannelsOverviewDialogComponent", "ChannelSubType", "GENERAL", "subType", "channelSubType", "newActiveConversation", "isModificationPerformed", "postToOpen", "handleSearchShortcut", "event", "metaKey", "ctrlKey", "key", "preventDefault", "nativeElement", "focus", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275resolveDocument", "LinkifyService", "LinkPreviewService", "decls", "vars", "consts", "template", "\u0275\u0275twoWayListener", "i0", "_r1", "\u0275\u0275twoWayBindingSet", "CourseConversationsComponent_Conditional_15_Template", "CourseConversationsComponent_Conditional_16_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "SECONDARY", "LoadingIndicatorContainerComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ButtonComponent", "CourseConversationsCodeOfConductComponent", "TranslateDirective", "NgClass", "SidebarComponent", "ConversationHeaderComponent", "ConversationMessagesComponent", "SavedPostsComponent", "ConversationThreadSidebarComponent", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
