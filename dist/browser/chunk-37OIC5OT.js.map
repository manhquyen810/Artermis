{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/external-submission/external-submission.service.ts", "src/main/webapp/app/exercises/shared/external-submission/external-submission-dialog.component.ts", "src/main/webapp/app/exercises/shared/external-submission/external-submission-dialog.component.html", "src/main/webapp/app/exercises/shared/external-submission/external-submission-button.component.ts", "src/main/webapp/app/exercises/shared/submission-export/submission-export.service.ts", "src/main/webapp/app/exercises/shared/submission-export/submission-export-dialog.component.ts", "src/main/webapp/app/exercises/shared/submission-export/submission-export-dialog.component.html", "src/main/webapp/app/exercises/shared/submission-export/submission-export-button.component.ts", "src/main/webapp/app/exercises/shared/exercise-scores/manage-assessment-buttons.component.ts", "src/main/webapp/app/exercises/shared/exercise-scores/manage-assessment-buttons.component.html", "src/main/webapp/app/exercises/shared/exercise-scores/exercise-scores.component.ts", "src/main/webapp/app/exercises/shared/exercise-scores/exercise-scores.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { EntityResponseType, ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExternalSubmissionService {\r\n    private http = inject(HttpClient);\r\n    private resultService = inject(ResultService);\r\n\r\n    // TODO: It would be good to refactor the convertDate methods into a separate service, so that we don't have to import the result service here.\r\n\r\n    /**\r\n     * Persist a new result for the provided exercise and student (a participation and an empty submission will also be created if they do not exist yet)\r\n     * @param { Exercise } exercise - Exercise for which a new result is created\r\n     * @param { User } student - Student for whom a result is created\r\n     * @param { Result } result - Result that is added\r\n     */\r\n    create(exercise: Exercise, student: User, result: Result): Observable<EntityResponseType> {\r\n        const copy = this.resultService.convertResultDatesFromClient(result);\r\n        return this.http\r\n            .post<Result>(`api/assessment/exercises/${exercise.id}/external-submission-results?studentLogin=${student.login}`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.resultService.convertResultResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Generates an initial manual result with default values.\r\n     */\r\n    generateInitialManualResult() {\r\n        const newResult = new Result();\r\n        newResult.completionDate = dayjs();\r\n        newResult.successful = true;\r\n        newResult.score = 100;\r\n        newResult.rated = true;\r\n        return newResult;\r\n    }\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Feedback, FeedbackType } from 'app/entities/feedback.model';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Complaint } from 'app/entities/complaint.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ExternalSubmissionService } from 'app/exercises/shared/external-submission/external-submission.service';\r\nimport { SCORE_PATTERN } from 'app/app.constants';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { faBan, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-external-submission-dialog',\r\n    templateUrl: './external-submission-dialog.component.html',\r\n    imports: [FormsModule, TranslateDirective, NgClass, FaIconComponent, HtmlForMarkdownPipe],\r\n})\r\nexport class ExternalSubmissionDialogComponent implements OnInit {\r\n    private externalSubmissionService = inject(ExternalSubmissionService);\r\n    private activeModal = inject(NgbActiveModal);\r\n    private eventManager = inject(EventManager);\r\n\r\n    readonly SCORE_PATTERN = SCORE_PATTERN;\r\n\r\n    @Input() exercise: Exercise;\r\n\r\n    student: User = new User();\r\n    result: Result;\r\n    feedbacks: Feedback[] = [];\r\n    isSaving = false;\r\n    userId: number;\r\n    isAssessor: boolean;\r\n    complaint: Complaint;\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faBan = faBan;\r\n\r\n    /**\r\n     * Initialize Component by calling a helper that generates an initial manual result.\r\n     */\r\n    ngOnInit() {\r\n        this.initializeForResultCreation();\r\n    }\r\n\r\n    /**\r\n     * Initialize result with initial manual result.\r\n     */\r\n    initializeForResultCreation() {\r\n        this.result = this.externalSubmissionService.generateInitialManualResult();\r\n    }\r\n\r\n    /**\r\n     * Close modal window.\r\n     */\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    /**\r\n     * Add manual feedbacks to the result and create external submission.\r\n     */\r\n    save() {\r\n        this.result.feedbacks = this.feedbacks;\r\n        this.isSaving = true;\r\n        for (let i = 0; i < this.result.feedbacks.length; i++) {\r\n            this.result.feedbacks[i].type = FeedbackType.MANUAL;\r\n        }\r\n        this.subscribeToSaveResponse(this.externalSubmissionService.create(this.exercise, this.student, this.result));\r\n    }\r\n\r\n    /**\r\n     * If http request is successful, pass it to onSaveSuccess, otherwise call onSaveError.\r\n     * @param { Observable<HttpResponse<Result>> } result - Observable of Http request\r\n     */\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<Result>>) {\r\n        result.subscribe({\r\n            next: (res) => this.onSaveSuccess(res),\r\n            error: () => this.onSaveError(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close modal window, indicate saving is done and broadcast that manual result is added.\r\n     * @param { HttpResponse<Result> } result - Result of successful http request\r\n     */\r\n    onSaveSuccess(result: HttpResponse<Result>) {\r\n        this.activeModal.close(result.body);\r\n        this.isSaving = false;\r\n        this.eventManager.broadcast({ name: 'resultListModification', content: 'Added a manual result' });\r\n    }\r\n\r\n    /**\r\n     * Indicate that saving didn't work by setting isSaving to false.\r\n     */\r\n    onSaveError() {\r\n        this.isSaving = false;\r\n    }\r\n\r\n    /**\r\n     * Add new feedback to feedbacks\r\n     */\r\n    pushFeedback() {\r\n        this.feedbacks.push(new Feedback());\r\n    }\r\n\r\n    /**\r\n     * Remove last added feedback if there is one.\r\n     */\r\n    popFeedback() {\r\n        if (this.feedbacks.length > 0) {\r\n            this.feedbacks.pop();\r\n        }\r\n    }\r\n}\r\n", "<form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" #editForm=\"ngForm\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <span jhiTranslate=\"artemisApp.submission.createExternal\"></span>\r\n            ({{ exercise.title }})\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        @if (exercise.gradingInstructions) {\r\n            <div class=\"form-group\">\r\n                <h3 for=\"id\" jhiTranslate=\"artemisApp.exercise.assessmentInstructions\"></h3>\r\n                <span [innerHTML]=\"exercise.gradingInstructions | htmlForMarkdown\"></span>\r\n            </div>\r\n        }\r\n        <div class=\"form-group\">\r\n            <h4 class=\"control-label\" jhiTranslate=\"artemisApp.result.studentLogin\"></h4>\r\n            <input type=\"text\" required class=\"form-control\" name=\"studentLogin\" id=\"studentLogin\" [(ngModel)]=\"student.login\" #studentLogin=\"ngModel\" />\r\n            @if (studentLogin?.invalid && studentLogin?.errors?.required) {\r\n                <span class=\"text-danger\" jhiTranslate=\"artemisApp.result.studentLoginRequired\"></span>\r\n            }\r\n        </div>\r\n        <div class=\"form-group row align-items-end\">\r\n            <div class=\"col-md-6\">\r\n                <h4 class=\"control-label\" jhiTranslate=\"artemisApp.result.scorePercentage\"></h4>\r\n                <input\r\n                    type=\"number\"\r\n                    [pattern]=\"SCORE_PATTERN\"\r\n                    required\r\n                    class=\"form-control\"\r\n                    name=\"score\"\r\n                    id=\"field_score\"\r\n                    [(ngModel)]=\"result.score\"\r\n                    (ngModelChange)=\"result.score === 100 ? (result.successful = true) : (result.successful = false)\"\r\n                    #score=\"ngModel\"\r\n                />\r\n                @if (score.dirty && score.invalid) {\r\n                    <span class=\"text-danger\" jhiTranslate=\"artemisApp.result.invalidScore\"></span>\r\n                }\r\n            </div>\r\n            <div class=\"checkbox col-md-6\">\r\n                <div class=\"artemis-label form-check\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" name=\"successful\" [(ngModel)]=\"result.successful\" [disabled]=\"true\" />\r\n                    <span class=\"form-check-label\" jhiTranslate=\"artemisApp.result.successful\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group mb-2\">\r\n            <button type=\"button\" class=\"btn btn-default\" [hidden]=\"feedbacks.length > 0\" (click)=\"pushFeedback()\">\r\n                <span jhiTranslate=\"artemisApp.result.addFeedback\"></span>\r\n            </button>\r\n        </div>\r\n        @if (feedbacks.length > 0) {\r\n            <div>\r\n                @for (feedback of feedbacks; track feedback; let i = $index) {\r\n                    <div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"feedbackText{{ i }}\" class=\"control-label\" [ngClass]=\"{ negative: !feedback || !feedback.positive, positive: feedback.positive }\">\r\n                                Feedback #{{ i + 1 }} Text\r\n                            </label>\r\n                            <input\r\n                                id=\"feedbackText{{ i }}\"\r\n                                type=\"text\"\r\n                                class=\"form-control\"\r\n                                name=\"feedbackText{{ i }}\"\r\n                                required\r\n                                [(ngModel)]=\"feedback.text\"\r\n                                #feedbackText=\"ngModel\"\r\n                            />\r\n                            @if (feedbackText?.invalid && feedbackText?.errors?.required) {\r\n                                <span class=\"text-danger\" jhiTranslate=\"artemisApp.result.feedbackTextRequired\"></span>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group row align-items-end\">\r\n                            <div class=\"col-md-6\">\r\n                                <label for=\"feedbackErrorText\" class=\"control-label\" [ngClass]=\"{ negative: !feedback || !feedback.positive, positive: feedback.positive }\">\r\n                                    Feedback #{{ i + 1 }} Detail Text\r\n                                </label>\r\n                                <textarea type=\"text\" class=\"form-control\" id=\"feedbackErrorText\" name=\"feedbackErrorText{{ i }}\" [(ngModel)]=\"feedback.detailText\"></textarea>\r\n                            </div>\r\n                            <div class=\"checkbox col-md-6\">\r\n                                <label class=\"artemis-label form-check\">\r\n                                    <input class=\"form-check-input\" type=\"checkbox\" name=\"positive{{ i }}\" [(ngModel)]=\"feedback.positive\" />\r\n                                    <span class=\"form-check-label\" jhiTranslate=\"artemisApp.result.positive\"></span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        @if (feedbacks.length > 0) {\r\n            <div class=\"form-group mb-2\">\r\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"pushFeedback()\">\r\n                    <span jhiTranslate=\"artemisApp.result.addFeedback\"></span>\r\n                </button>\r\n                &nbsp;\r\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"popFeedback()\">\r\n                    <span jhiTranslate=\"artemisApp.result.deleteFeedback\"></span>\r\n                </button>\r\n            </div>\r\n        }\r\n        <div class=\"form-check mt-3\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" name=\"resultRated\" id=\"resultRated\" [(ngModel)]=\"result.rated\" #resultRated=\"ngModel\" />\r\n            <label for=\"resultRated\" class=\"form-check-label\" jhiTranslate=\"artemisApp.result.rated\"></label>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"clear()\">\r\n            <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n        </button>\r\n        <button type=\"submit\" [disabled]=\"editForm.invalid || isSaving\" class=\"btn btn-primary\">\r\n            <fa-icon [icon]=\"faSave\" />&nbsp;<span jhiTranslate=\"entity.action.save\"></span>\r\n        </button>\r\n    </div>\r\n</form>\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ExternalSubmissionDialogComponent } from 'app/exercises/shared/external-submission/external-submission-dialog.component';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-external-submission',\r\n    template: `\r\n        @if (!exercise.teamMode) {\r\n            <jhi-button\r\n                [btnType]=\"ButtonType.WARNING\"\r\n                [btnSize]=\"ButtonSize.SMALL\"\r\n                [icon]=\"faPlus\"\r\n                [title]=\"'entity.action.addExternalSubmission'\"\r\n                (onClick)=\"openExternalSubmissionDialog($event)\"\r\n            />\r\n        }\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class ExternalSubmissionButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n\r\n    @Input() exercise: Exercise;\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n\r\n    /**\r\n     * Opens modal window for external exercise submission.\r\n     * @param { MouseEvent } event\r\n     */\r\n    openExternalSubmissionDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(ExternalSubmissionDialogComponent, { keyboard: true, size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.exercise = this.exercise;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\n\r\nexport type SubmissionExportOptions = {\r\n    exportAllParticipants: boolean;\r\n    filterLateSubmissions: boolean;\r\n    filterLateSubmissionsDate: dayjs.Dayjs | null;\r\n    participantIdentifierList: string; // comma separated\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SubmissionExportService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api';\r\n\r\n    /**\r\n     * Exports submissions to the server by their participant identifiers\r\n     * @param {number} exerciseId - Id of the exercise\r\n     * @param {ExerciseType} exerciseType - Type of the exercise\r\n     * @param {SubmissionExportOptions} repositoryExportOptions\r\n     */\r\n    exportSubmissions(exerciseId: number, exerciseType: ExerciseType, repositoryExportOptions: SubmissionExportOptions): Observable<HttpResponse<Blob>> {\r\n        return this.http.post(`${this.resourceUrl}/${this.getExerciseUrl(exerciseType, exerciseId)}/export-submissions`, repositoryExportOptions, {\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n\r\n    getExerciseUrl(exerciseType: ExerciseType, exerciseId: number) {\r\n        switch (exerciseType) {\r\n            case ExerciseType.TEXT:\r\n                return 'text/text-exercises/' + exerciseId;\r\n            case ExerciseType.MODELING:\r\n                return 'modeling/modeling-exercises/' + exerciseId;\r\n            case ExerciseType.FILE_UPLOAD:\r\n                return 'fileupload/file-upload-exercises/' + exerciseId;\r\n            default:\r\n                throw Error('Export not implemented for exercise type ' + exerciseType);\r\n        }\r\n    }\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { SubmissionExportOptions, SubmissionExportService } from './submission-export.service';\r\nimport { downloadZipFileFromResponse } from 'app/shared/util/download.util';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-submission-export-dialog',\r\n    templateUrl: './submission-export-dialog.component.html',\r\n    styles: ['textarea { width: 100%; }'],\r\n    imports: [FormsModule, TranslateDirective, HelpIconComponent, FormDateTimePickerComponent, FaIconComponent],\r\n})\r\nexport class SubmissionExportDialogComponent implements OnInit {\r\n    private exerciseService = inject(ExerciseService);\r\n    private submissionExportService = inject(SubmissionExportService);\r\n    activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() exerciseId: number;\r\n    @Input() exerciseType: ExerciseType;\r\n\r\n    exercise: Exercise;\r\n    exportInProgress: boolean;\r\n    submissionExportOptions: SubmissionExportOptions;\r\n    isLoading = false;\r\n\r\n    // Icons\r\n    faCircleNotch = faCircleNotch;\r\n\r\n    ngOnInit() {\r\n        this.isLoading = true;\r\n        this.exportInProgress = false;\r\n        this.submissionExportOptions = {\r\n            exportAllParticipants: false,\r\n            filterLateSubmissions: false,\r\n            filterLateSubmissionsDate: null,\r\n            participantIdentifierList: '',\r\n        };\r\n        this.exerciseService\r\n            .find(this.exerciseId)\r\n            .pipe(\r\n                tap(({ body: exercise }) => {\r\n                    this.exercise = exercise!;\r\n                }),\r\n                catchError((err) => {\r\n                    this.alertService.error(err);\r\n                    this.clear();\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    exportSubmissions(exerciseId: number) {\r\n        this.exportInProgress = true;\r\n        this.submissionExportService.exportSubmissions(exerciseId, this.exerciseType, this.submissionExportOptions).subscribe({\r\n            next: this.handleExportResponse,\r\n            error: () => {\r\n                this.exportInProgress = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    handleExportResponse = (response: HttpResponse<Blob>) => {\r\n        this.alertService.success('artemisApp.instructorDashboard.exportSubmissions.successMessage');\r\n        this.activeModal.dismiss(true);\r\n        this.exportInProgress = false;\r\n        downloadZipFileFromResponse(response);\r\n    };\r\n}\r\n", "@if (!isLoading) {\r\n    <form name=\"exportForm\" role=\"form\" (ngSubmit)=\"exportSubmissions(exercise.id!)\" #exportForm=\"ngForm\">\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.instructorDashboard.exportSubmissions.title\"></h4>\r\n            <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" (click)=\"clear()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <p\r\n                [jhiTranslate]=\"'artemisApp.instructorDashboard.exportSubmissions.question'\"\r\n                [translateValues]=\"{ exerciseTitle: exercise.title, courseTitle: exercise.course?.title }\"\r\n            >\r\n                Confirm export\r\n            </p>\r\n            <textarea\r\n                name=\"studentIds\"\r\n                class=\"export-textarea\"\r\n                [(ngModel)]=\"submissionExportOptions.participantIdentifierList\"\r\n                required\r\n                [disabled]=\"submissionExportOptions.exportAllParticipants\"\r\n            ></textarea>\r\n            <!--\r\n      Only show download all checkbox for instructors & admins.\r\n      -->\r\n            @if (exercise.isAtLeastInstructor) {\r\n                <div class=\"checkbox\">\r\n                    <label class=\"control-label\">\r\n                        <input class=\"form-check-input\" type=\"checkbox\" name=\"allStudents\" [(ngModel)]=\"submissionExportOptions.exportAllParticipants\" />\r\n                        <strong [jhiTranslate]=\"'artemisApp.instructorDashboard.exportSubmissions.downloadAllStudents'\"> Or download the submissions of all students </strong>\r\n                    </label>\r\n                </div>\r\n            }\r\n            <ng-container>\r\n                <div class=\"checkbox\">\r\n                    <label class=\"control-label\">\r\n                        <input class=\"form-check-input\" type=\"checkbox\" name=\"filterLateSubmissions\" [(ngModel)]=\"this.submissionExportOptions.filterLateSubmissions\" />\r\n                        <strong jhiTranslate=\"artemisApp.instructorDashboard.exportSubmissions.filterLateSubmissions\"></strong>\r\n                    </label>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <strong jhiTranslate=\"artemisApp.instructorDashboard.exportSubmissions.filterLateSubmissionsDate.title\"\r\n                        >Date for filter late submissions (defaults to exercise due date if not set)</strong\r\n                    >\r\n                    <jhi-help-icon text=\"artemisApp.instructorDashboard.exportSubmissions.filterLateSubmissionsDate.tooltip\" />\r\n                    <jhi-date-time-picker\r\n                        [(ngModel)]=\"this.submissionExportOptions.filterLateSubmissionsDate\"\r\n                        [disabled]=\"!this.submissionExportOptions.filterLateSubmissions\"\r\n                        [shouldDisplayTimeZoneWarning]=\"false\"\r\n                        name=\"filterLateSubmissionsDate\"\r\n                    />\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"clear()\">\r\n                <span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n            </button>\r\n            <button\r\n                type=\"submit\"\r\n                [disabled]=\"(!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants) || exportInProgress\"\r\n                class=\"btn btn-default\"\r\n            >\r\n                @if (this.exportInProgress) {\r\n                    <span class=\"me-1\"><fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" /></span>\r\n                }\r\n                <span class=\"glyphicon glyphicon-download-alt\"></span>&nbsp;<span jhiTranslate=\"entity.action.export\"></span>\r\n            </button>\r\n        </div>\r\n    </form>\r\n} @else {\r\n    <div class=\"d-flex justify-content-center mt-4 mb-4\">\r\n        <fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n    </div>\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { SubmissionExportDialogComponent } from './submission-export-dialog.component';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-submission-export',\r\n    template: `\r\n        <jhi-button\r\n            [featureToggle]=\"FeatureToggle.Exports\"\r\n            [disabled]=\"!exerciseId\"\r\n            [btnType]=\"ButtonType.INFO\"\r\n            [btnSize]=\"ButtonSize.SMALL\"\r\n            [shouldSubmit]=\"false\"\r\n            [icon]=\"faDownload\"\r\n            [title]=\"'artemisApp.instructorDashboard.exportSubmissions.title'\"\r\n            (onClick)=\"openSubmissionExportDialog($event)\"\r\n        />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class SubmissionExportButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    readonly ButtonType = ButtonType;\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly FeatureToggle = FeatureToggle;\r\n\r\n    @Input() exerciseId: number;\r\n    @Input() exerciseType: ExerciseType;\r\n\r\n    // Icons\r\n    faDownload = faDownload;\r\n\r\n    /**\r\n     * Stops the propagation of the mouse event and updates the component instance\r\n     * of the modalRef with this instance's values\r\n     * @param {MouseEvent} event - Mouse event\r\n     */\r\n    openSubmissionExportDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef = this.modalService.open(SubmissionExportDialogComponent, { keyboard: true, size: 'lg' });\r\n        modalRef.componentInstance.exerciseId = this.exerciseId;\r\n        modalRef.componentInstance.exerciseType = this.exerciseType;\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { faBan, faFolderOpen } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { isPracticeMode } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { FileUploadAssessmentService } from 'app/exercises/file-upload/assess/file-upload-assessment.service';\r\nimport { ModelingAssessmentService } from 'app/exercises/modeling/assess/modeling-assessment.service';\r\nimport { ProgrammingAssessmentManualResultService } from 'app/exercises/programming/assess/manual-result/programming-assessment-manual-result.service';\r\nimport { areManualResultsAllowed } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { TextAssessmentService } from 'app/exercises/text/assess/text-assessment.service';\r\nimport { getLinkToSubmissionAssessment } from 'app/utils/navigation.utils';\r\nimport { RouterLink } from '@angular/router';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-manage-assessment-buttons',\r\n    templateUrl: './manage-assessment-buttons.component.html',\r\n    imports: [RouterLink, FaIconComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ManageAssessmentButtonsComponent implements OnInit {\r\n    private programmingAssessmentManualResultService = inject(ProgrammingAssessmentManualResultService);\r\n    private modelingAssessmentService = inject(ModelingAssessmentService);\r\n    private textAssessmentService = inject(TextAssessmentService);\r\n    private fileUploadAssessmentService = inject(FileUploadAssessmentService);\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() course: Course;\r\n    @Input() participation: Participation;\r\n    @Input() isLoading: boolean;\r\n\r\n    @Output() refresh = new EventEmitter<void>();\r\n\r\n    correctionRoundIndices: number[];\r\n    cancelConfirmationText: string;\r\n    newManualResultAllowed = false;\r\n    examMode = false;\r\n\r\n    readonly faBan = faBan;\r\n    readonly faFolderOpen = faFolderOpen;\r\n    readonly AssessmentType = AssessmentType;\r\n\r\n    constructor() {\r\n        const translateService = inject(TranslateService);\r\n\r\n        translateService.get('artemisApp.programmingAssessment.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.newManualResultAllowed = areManualResultsAllowed(this.exercise);\r\n        this.examMode = !!this.exercise.exerciseGroup;\r\n        if (isPracticeMode(this.participation) && !this.examMode) {\r\n            // don't allow manual results for practice mode participations\r\n            this.newManualResultAllowed = false;\r\n        }\r\n        // ngFor needs an array to iterate over. This creates an array in the form of [0, 1, ...] up to the correction rounds exclusively (normally 1 or 2)\r\n        this.correctionRoundIndices = [...Array(this.exercise.exerciseGroup?.exam?.numberOfCorrectionRoundsInExam ?? 1).keys()];\r\n    }\r\n\r\n    getAssessmentLink(correctionRound = 0) {\r\n        if (!this.exercise.type || !this.exercise.id || !this.course.id || !this.participation.submissions?.[0]?.id) {\r\n            return;\r\n        }\r\n        correctionRound = this.getCorrectionRoundForAssessmentLink(correctionRound);\r\n\r\n        return getLinkToSubmissionAssessment(\r\n            this.exercise.type,\r\n            this.course.id,\r\n            this.exercise.id,\r\n            this.participation.id,\r\n            this.participation.submissions?.[0]?.id,\r\n            this.exercise.exerciseGroup?.exam?.id,\r\n            this.exercise.exerciseGroup?.id,\r\n            this.participation.results?.[correctionRound]?.id,\r\n        );\r\n    }\r\n\r\n    getCorrectionRoundForAssessmentLink(correctionRound = 0): number {\r\n        const result = this.participation.results?.[correctionRound];\r\n        if (!result) {\r\n            return correctionRound;\r\n        }\r\n        if (result.hasComplaint && !!this.participation.results?.[correctionRound + 1]) {\r\n            // If there is a complaint and the complaint got accepted (additional result)\r\n            // open this next result.\r\n            return correctionRound + 1;\r\n        }\r\n        return correctionRound;\r\n    }\r\n\r\n    /**\r\n     * Cancel the current assessment and reload the submissions to reflect the change.\r\n     */\r\n    cancelAssessment(result: Result, participation: Participation) {\r\n        const confirmCancel = window.confirm(this.cancelConfirmationText);\r\n\r\n        if (confirmCancel && result.submission?.id) {\r\n            let cancelSubscription;\r\n            switch (this.exercise.type) {\r\n                case ExerciseType.PROGRAMMING:\r\n                    cancelSubscription = this.programmingAssessmentManualResultService.cancelAssessment(result.submission.id);\r\n                    break;\r\n                case ExerciseType.MODELING:\r\n                    cancelSubscription = this.modelingAssessmentService.cancelAssessment(result.submission.id);\r\n                    break;\r\n                case ExerciseType.TEXT:\r\n                    cancelSubscription = this.textAssessmentService.cancelAssessment(participation.id!, result.submission.id);\r\n                    break;\r\n                case ExerciseType.FILE_UPLOAD:\r\n                    cancelSubscription = this.fileUploadAssessmentService.cancelAssessment(result.submission.id);\r\n                    break;\r\n            }\r\n            cancelSubscription?.subscribe(() => {\r\n                this.refresh.emit();\r\n            });\r\n        }\r\n    }\r\n}\r\n", "@if (participation.submissionCount) {\r\n    @for (correctionRound of correctionRoundIndices; track correctionRound) {\r\n        @if (\r\n            (correctionRound === 0 || participation.results?.[correctionRound - 1]?.completionDate) &&\r\n            (newManualResultAllowed ||\r\n                (participation.results?.[correctionRound]?.assessmentType &&\r\n                    participation.results?.[correctionRound]?.assessmentType !== AssessmentType.AUTOMATIC &&\r\n                    participation.results?.[correctionRound]?.assessmentType !== AssessmentType.AUTOMATIC_ATHENA))\r\n        ) {\r\n            <div>\r\n                <a\r\n                    [routerLink]=\"getAssessmentLink(correctionRound)\"\r\n                    [queryParams]=\"{ 'correction-round': getCorrectionRoundForAssessmentLink(correctionRound) }\"\r\n                    class=\"btn btn-sm me-1 mb-2\"\r\n                    [class.btn-success]=\"\r\n                        (!participation.results?.[correctionRound]?.assessmentType || participation.results?.[correctionRound]?.assessmentType === AssessmentType.AUTOMATIC) &&\r\n                        !participation.results?.[correctionRound]?.hasComplaint\r\n                    \"\r\n                    [class.btn-primary]=\"participation.results?.[correctionRound]?.completionDate || participation.results?.[correctionRound]?.hasComplaint\"\r\n                    [class.btn-warning]=\"\r\n                        participation.results?.[correctionRound] &&\r\n                        !participation.results?.[correctionRound]?.completionDate &&\r\n                        !participation.results?.[correctionRound]?.hasComplaint\r\n                    \"\r\n                >\r\n                    <fa-icon [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                    @if (!participation.results?.[correctionRound]?.hasComplaint) {\r\n                        {{\r\n                            'artemisApp.assessment.dashboard.actions.' +\r\n                                (this.examMode ? 'examCorrectionRound.' : '') +\r\n                                (!participation.results?.[correctionRound]?.assessmentType || participation.results?.[correctionRound]?.assessmentType === AssessmentType.AUTOMATIC\r\n                                    ? 'assess'\r\n                                    : participation.results?.[correctionRound]?.completionDate\r\n                                      ? 'open'\r\n                                      : 'continue') | artemisTranslate: { correctionRound: correctionRound + 1 }\r\n                        }}\r\n                    } @else {\r\n                        {{ 'artemisApp.exerciseAssessmentDashboard.showComplaint' | artemisTranslate }}\r\n                    }\r\n                </a>\r\n                @if (\r\n                    newManualResultAllowed &&\r\n                    participation.results?.[correctionRound]?.assessmentType &&\r\n                    !participation.results?.[correctionRound]?.completionDate &&\r\n                    participation.results?.[correctionRound]?.assessmentType !== AssessmentType.AUTOMATIC\r\n                ) {\r\n                    <button (click)=\"cancelAssessment(participation.results?.[correctionRound]!, participation)\" [disabled]=\"isLoading\" class=\"btn btn-sm me-1 mb-2 btn-danger\">\r\n                        <fa-icon [fixedWidth]=\"true\" [icon]=\"faBan\" />\r\n                        <span>\r\n                            {{\r\n                                'artemisApp.assessment.dashboard.actions.' + (this.examMode ? 'examCorrectionRound.' : '') + 'cancel'\r\n                                    | artemisTranslate: { correctionRound: correctionRound + 1 }\r\n                            }}\r\n                        </span>\r\n                    </button>\r\n                }\r\n            </div>\r\n        }\r\n    }\r\n}\r\n", "import { Component, OnDestroy, OnInit, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { Subscription, forkJoin } from 'rxjs';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { areManualResultsAllowed } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { formatTeamAsSearchResult } from 'app/exercises/shared/team/team.utils';\r\nimport { faCodeBranch, faComment, faDownload, faFilter, faFolderOpen, faListAlt, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { faFileCode } from '@fortawesome/free-regular-svg-icons';\r\nimport { Range } from 'app/shared/util/utils';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ExerciseCacheService } from 'app/exercises/shared/exercise/exercise-cache.service';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbPopover, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PROFILE_LOCALVC } from 'app/app.constants';\r\nimport { isManualResult } from 'app/exercises/shared/result/result.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ExternalSubmissionButtonComponent } from '../external-submission/external-submission-button.component';\r\nimport { ExerciseActionButtonComponent } from 'app/shared/components/exercise-action-button.component';\r\nimport { ExerciseScoresExportButtonComponent } from './exercise-scores-export-button.component';\r\nimport { ProgrammingAssessmentRepoExportButtonComponent } from '../../programming/assess/repo-export/programming-assessment-repo-export-button.component';\r\nimport { SubmissionExportButtonComponent } from '../submission-export/submission-export-button.component';\r\nimport { DataTableComponent } from 'app/shared/data-table/data-table.component';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { ResultComponent } from '../result/result.component';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { FeatureToggleLinkDirective } from 'app/shared/feature-toggle/feature-toggle-link.directive';\r\nimport { ManageAssessmentButtonsComponent } from './manage-assessment-buttons.component';\r\nimport { DecimalPipe, KeyValuePipe } from '@angular/common';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\n/**\r\n * Filter properties for a result\r\n */\r\nexport enum FilterProp {\r\n    ALL = 'All',\r\n    SUCCESSFUL = 'Successful',\r\n    UNSUCCESSFUL = 'Unsuccessful',\r\n    BUILD_FAILED = 'BuildFailed',\r\n    MANUAL = 'Manual',\r\n    AUTOMATIC = 'Automatic',\r\n    LOCKED = 'Locked',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-scores',\r\n    templateUrl: './exercise-scores.component.html',\r\n    providers: [ExerciseCacheService],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        TranslateDirective,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        FaIconComponent,\r\n        NgbDropdownMenu,\r\n        FormsModule,\r\n        RouterLink,\r\n        ExternalSubmissionButtonComponent,\r\n        ExerciseActionButtonComponent,\r\n        NgbPopover,\r\n        ExerciseScoresExportButtonComponent,\r\n        ProgrammingAssessmentRepoExportButtonComponent,\r\n        SubmissionExportButtonComponent,\r\n        DataTableComponent,\r\n        NgxDatatableModule,\r\n        ResultComponent,\r\n        NgbTooltip,\r\n        CodeButtonComponent,\r\n        FeatureToggleLinkDirective,\r\n        ManageAssessmentButtonsComponent,\r\n        DecimalPipe,\r\n        KeyValuePipe,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n        ArtemisDurationFromSecondsPipe,\r\n    ],\r\n})\r\nexport class ExerciseScoresComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private courseService = inject(CourseManagementService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private resultService = inject(ResultService);\r\n    private profileService = inject(ProfileService);\r\n    private programmingSubmissionService = inject(ProgrammingSubmissionService);\r\n    private participationService = inject(ParticipationService);\r\n\r\n    // make constants available to html for comparison\r\n    readonly FilterProp = FilterProp;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly FeatureToggle = FeatureToggle;\r\n    readonly AssessmentType = AssessmentType;\r\n    protected readonly RepositoryType = RepositoryType;\r\n\r\n    // represents all intervals selectable in the score distribution on the exercise statistics\r\n    readonly scoreRanges = [\r\n        new Range(0, 10),\r\n        new Range(10, 20),\r\n        new Range(20, 30),\r\n        new Range(30, 40),\r\n        new Range(40, 50),\r\n        new Range(50, 60),\r\n        new Range(60, 70),\r\n        new Range(70, 80),\r\n        new Range(80, 90),\r\n        new Range(90, 100),\r\n    ];\r\n\r\n    @ViewChild('exportPopover')\r\n    private exportPopover: NgbPopover;\r\n\r\n    course: Course;\r\n    exercise: Exercise;\r\n    paramSub: Subscription;\r\n    reverse: boolean;\r\n    participations: Participation[] = [];\r\n    filteredParticipations: Participation[] = [];\r\n    eventSubscriber: Subscription;\r\n    newManualResultAllowed: boolean;\r\n    rangeFilter?: Range;\r\n\r\n    resultCriteria: { filterProp: FilterProp } = { filterProp: FilterProp.ALL };\r\n    participationsPerFilter: Map<FilterProp, number> = new Map();\r\n\r\n    isLoading: boolean;\r\n\r\n    afterDueDate = false;\r\n\r\n    localVCEnabled = false;\r\n\r\n    // Icons\r\n    faDownload = faDownload;\r\n    faSync = faSync;\r\n    faFolderOpen = faFolderOpen;\r\n    faListAlt = faListAlt;\r\n    faCodeBranch = faCodeBranch;\r\n    farFileCode = faFileCode;\r\n    faFilter = faFilter;\r\n    faComment = faComment;\r\n\r\n    /**\r\n     * Fetches the course and exercise from the server\r\n     */\r\n    ngOnInit() {\r\n        this.paramSub = this.route.params.subscribe((params) => {\r\n            this.isLoading = true;\r\n            const findCourse = this.courseService.find(params['courseId']);\r\n            const findExercise = this.exerciseService.find(params['exerciseId']);\r\n            const filterValue = this.route.snapshot.queryParamMap.get('scoreRangeFilter');\r\n            if (filterValue) {\r\n                this.rangeFilter = this.scoreRanges[Number(filterValue)];\r\n            }\r\n\r\n            forkJoin([findCourse, findExercise]).subscribe(([courseRes, exerciseRes]) => {\r\n                this.course = courseRes.body!;\r\n                this.exercise = exerciseRes.body!;\r\n                this.afterDueDate = !!this.exercise.dueDate && dayjs().isAfter(this.exercise.dueDate);\r\n                // After both calls are done, the loading flag is removed. If the exercise is not a programming exercise, only the result call is needed.\r\n                this.participationService.findAllParticipationsByExercise(this.exercise.id!, true).subscribe((participationsResponse) => {\r\n                    this.handleNewParticipations(participationsResponse);\r\n                });\r\n\r\n                this.newManualResultAllowed = areManualResultsAllowed(this.exercise);\r\n            });\r\n        });\r\n    }\r\n\r\n    getExerciseParticipationsLink(participationId: number): string[] {\r\n        return this.exercise.exerciseGroup\r\n            ? [\r\n                  '/course-management',\r\n                  this.course.id!.toString(),\r\n                  'exams',\r\n                  this.exercise.exerciseGroup!.exam!.id!.toString(),\r\n                  'exercise-groups',\r\n                  this.exercise.exerciseGroup!.id!.toString(),\r\n                  this.exercise.type + '-exercises',\r\n                  this.exercise.id!.toString(),\r\n                  'participations',\r\n                  participationId.toString(),\r\n              ]\r\n            : [\r\n                  '/course-management',\r\n                  this.course.id!.toString(),\r\n                  this.exercise.type + '-exercises',\r\n                  this.exercise.id!.toString(),\r\n                  'participations',\r\n                  participationId.toString(),\r\n                  'submissions',\r\n              ];\r\n    }\r\n\r\n    private handleNewParticipations(participationsResponse: HttpResponse<Participation[]>) {\r\n        this.participations = participationsResponse.body ?? [];\r\n        this.participations.forEach((participation) => {\r\n            participation.results?.forEach((result, index) => {\r\n                participation.results![index].durationInMinutes = dayjs(result.completionDate).diff(participation.initializationDate, 'seconds');\r\n            });\r\n            // sort the results from old to new.\r\n            // the result of the first correction round will be at index 0,\r\n            // the result of a complaints or the second correction at index 1.\r\n            participation.results?.sort((result1, result2) => (result1.id ?? 0) - (result2.id ?? 0));\r\n            const resultsWithoutAthena = participation.results?.filter((result) => result.assessmentType !== AssessmentType.AUTOMATIC_ATHENA);\r\n            if (resultsWithoutAthena?.length != 0) {\r\n                if (resultsWithoutAthena?.[0].submission) {\r\n                    participation.submissions = [resultsWithoutAthena?.[0].submission];\r\n                } else if (participation.results?.[0].submission) {\r\n                    participation.submissions = [participation.results?.[0].submission];\r\n                }\r\n            } else {\r\n                participation.results = undefined;\r\n            }\r\n        });\r\n        this.filteredParticipations = this.filterByScoreRange(this.participations);\r\n        if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n            const programmingExercise = this.exercise as ProgrammingExercise;\r\n            if (programmingExercise.projectKey) {\r\n                this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                    this.localVCEnabled = profileInfo.activeProfiles.includes(PROFILE_LOCALVC);\r\n                });\r\n            }\r\n        }\r\n\r\n        for (const filter of Object.values(FilterProp)) {\r\n            if (this.isFilterRelevantForConfiguration(filter)) {\r\n                this.participationsPerFilter.set(filter, this.filteredParticipations.filter((participation) => this.filterParticipationsByProp(participation, filter)).length);\r\n            }\r\n        }\r\n\r\n        this.isLoading = false;\r\n    }\r\n\r\n    /**\r\n     * Updates the criteria by which to filter results\r\n     * @param newValue New filter prop value\r\n     */\r\n    updateParticipationFilter(newValue: FilterProp) {\r\n        this.isLoading = true;\r\n        setTimeout(() => {\r\n            this.resultCriteria.filterProp = newValue;\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Predicate used to filter participations by the current filter prop setting\r\n     * @param participation Participation for which to evaluate the predicate\r\n     * @param filterProp the filter that should be used to determine if the participation should be included or excluded\r\n     */\r\n    filterParticipationsByProp = (participation: Participation, filterProp = this.resultCriteria.filterProp): boolean => {\r\n        const latestResult = participation.results?.last();\r\n        switch (filterProp) {\r\n            case FilterProp.SUCCESSFUL:\r\n                return !!latestResult?.successful;\r\n            case FilterProp.UNSUCCESSFUL:\r\n                return !latestResult?.successful;\r\n            case FilterProp.BUILD_FAILED:\r\n                return !!(participation.submissions?.[0] && (participation.submissions?.[0] as ProgrammingSubmission).buildFailed);\r\n            case FilterProp.MANUAL:\r\n                return !!latestResult && isManualResult(latestResult);\r\n            case FilterProp.AUTOMATIC:\r\n                return latestResult?.assessmentType === AssessmentType.AUTOMATIC;\r\n            case FilterProp.LOCKED:\r\n                return !!latestResult && !latestResult.completionDate;\r\n            case FilterProp.ALL:\r\n            default:\r\n                return true;\r\n        }\r\n    };\r\n\r\n    isFilterRelevantForConfiguration(filterProp: FilterProp): boolean {\r\n        switch (filterProp) {\r\n            case FilterProp.BUILD_FAILED:\r\n                return this.exercise.type === ExerciseType.PROGRAMMING;\r\n            case FilterProp.MANUAL:\r\n            case FilterProp.AUTOMATIC:\r\n                return this.newManualResultAllowed || !!this.exercise.allowComplaintsForAutomaticAssessments;\r\n            case FilterProp.LOCKED:\r\n                return this.newManualResultAllowed && !!this.exercise.isAtLeastInstructor;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the build plan id for a participation\r\n     * @param participation Participation for which to return the build plan id\r\n     */\r\n    buildPlanId(participation: Participation) {\r\n        return (participation as ProgrammingExerciseStudentParticipation)?.buildPlanId;\r\n    }\r\n\r\n    /**\r\n     * Returns the project key of the exercise\r\n     */\r\n    projectKey(): string {\r\n        return (this.exercise as ProgrammingExercise).projectKey!;\r\n    }\r\n\r\n    /**\r\n     * Returns the link to the repository of a participation\r\n     * @param participation Participation for which to get the link for\r\n     */\r\n    getRepositoryLink(participation: Participation) {\r\n        return (participation! as ProgrammingExerciseStudentParticipation).userIndependentRepositoryUri;\r\n    }\r\n\r\n    /**\r\n     * Exports the names of exercise participants as a csv file\r\n     */\r\n    exportNames() {\r\n        if (this.participations.length) {\r\n            const rows: string[] = [];\r\n            this.participations.forEach((participation, index) => {\r\n                const studentParticipation = participation as StudentParticipation;\r\n                const { participantName } = studentParticipation;\r\n                if (studentParticipation.team) {\r\n                    if (index === 0) {\r\n                        rows.push('data:text/csv;charset=utf-8,Team Name,Team Short Name,Students');\r\n                    }\r\n                    const { name, shortName, students } = studentParticipation.team;\r\n                    rows.push(`${name},${shortName},\"${students?.map((s) => s.name).join(', ')}\"`);\r\n                } else {\r\n                    rows.push(index === 0 ? `data:text/csv;charset=utf-8,${participantName}` : participantName!);\r\n                }\r\n            });\r\n            this.resultService.triggerDownloadCSV(rows, 'results-names.csv');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats the participations in the autocomplete overlay.\r\n     *\r\n     * @param participation\r\n     */\r\n    searchParticipationFormatter = (participation: Participation): string => {\r\n        const studentParticipation = participation as StudentParticipation;\r\n        if (studentParticipation.student) {\r\n            const { login, name } = studentParticipation.student;\r\n            return `${login} (${name})`;\r\n        } else if (studentParticipation.team) {\r\n            return formatTeamAsSearchResult(studentParticipation.team);\r\n        }\r\n        return '';\r\n    };\r\n\r\n    /**\r\n     * Converts a result object to a string that can be searched for. This is\r\n     * used by the autocomplete select inside the data table.\r\n     *\r\n     * @param participation\r\n     */\r\n    searchTextFromParticipation = (participation: Participation): string => {\r\n        return (participation as StudentParticipation).participantIdentifier || '';\r\n    };\r\n\r\n    /**\r\n     * Triggers a re-fetch of the results from the server\r\n     */\r\n    refresh() {\r\n        this.isLoading = true;\r\n        this.participations = [];\r\n        this.filteredParticipations = [];\r\n        this.participationService.findAllParticipationsByExercise(this.exercise.id!, true).subscribe((participationsResponse) => {\r\n            this.handleNewParticipations(participationsResponse);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes from all subscriptions\r\n     */\r\n    ngOnDestroy() {\r\n        this.paramSub.unsubscribe();\r\n        this.programmingSubmissionService.unsubscribeAllWebsocketTopics(this.exercise);\r\n    }\r\n\r\n    /**\r\n     * filters the displayable participations based on the given range filter\r\n     * @param participations all participations for the given exercise\r\n     * @returns participations falling into the given score range\r\n     */\r\n    filterByScoreRange(participations: Participation[]): Participation[] {\r\n        if (!this.rangeFilter) {\r\n            return participations;\r\n        }\r\n        let filterFunction;\r\n        // If the range to filter against is [90%, 100%], a score of 100% also satisfies this range\r\n        if (this.rangeFilter.upperBound === 100) {\r\n            filterFunction = (participation: Participation) => {\r\n                const result = participation.results?.last();\r\n                return !!result?.score && result?.score >= this.rangeFilter!.lowerBound && result.score <= this.rangeFilter!.upperBound;\r\n            };\r\n        } else {\r\n            // For any other range, the score must be strictly below the upper bound\r\n            filterFunction = (participation: Participation) => {\r\n                const result = participation.results?.last();\r\n                return result?.score !== undefined && result.score >= this.rangeFilter!.lowerBound && result.score < this.rangeFilter!.upperBound;\r\n            };\r\n        }\r\n\r\n        return participations.filter(filterFunction);\r\n    }\r\n\r\n    /**\r\n     * resets the score range filter\r\n     */\r\n    resetFilterOptions(): void {\r\n        this.rangeFilter = undefined;\r\n        this.filteredParticipations = this.participations;\r\n        this.resultCriteria.filterProp = FilterProp.ALL;\r\n    }\r\n\r\n    /**\r\n     * Close popover for export options, since it would obstruct the newly opened modal\r\n     */\r\n    closeExportPopover() {\r\n        this.exportPopover?.close();\r\n    }\r\n}\r\n", "@if (exercise) {\r\n    <div>\r\n        <h2>\r\n            @if (exercise.course) {\r\n                <span>{{ exercise.course?.title }} - {{ exercise.title }}</span>\r\n            }\r\n            @if (exercise.exerciseGroup) {\r\n                <span>{{ exercise.exerciseGroup?.exam?.title }} - {{ exercise.title }}</span>\r\n            }\r\n        </h2>\r\n        @if (this.rangeFilter) {\r\n            <h4 class=\"d-flex align-items-center\">\r\n                <span class=\"me-2\">\r\n                    <strong class=\"text-primary\"> {{ 'artemisApp.assessment.dashboard.activeFilter' | artemisTranslate }}: </strong>\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.exercise.showingOnlyInRange\" [translateValues]=\"{ range: this.rangeFilter.toString() }\"></span>\r\n                </span>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"resetFilterOptions()\" jhiTranslate=\"artemisApp.assessment.dashboard.resetFilter\"></button>\r\n            </h4>\r\n        }\r\n        <div class=\"d-flex flex-wrap\">\r\n            <div class=\"d-flex flex-fill align-items-center mr-auto\">\r\n                <div class=\"me-2\" aria-label=\"Filter Dropdown\" ngbDropdown>\r\n                    <button class=\"btn btn-primary\" ngbDropdownToggle id=\"filter-dropdown-button\">\r\n                        <fa-icon [icon]=\"faFilter\" />\r\n                        <span class=\"d-s-none d-md-inline\"\r\n                            >{{\r\n                                'artemisApp.exercise.scoresFilter' | artemisTranslate: { filter: ('artemisApp.exercise.show' + resultCriteria.filterProp | artemisTranslate) }\r\n                            }}\r\n                            ({{ participationsPerFilter.get(resultCriteria.filterProp) ?? 0 }})\r\n                        </span>\r\n                    </button>\r\n                    <ul ngbDropdownMenu class=\"checkbox-menu text-nowrap pe-2\" aria-labelledby=\"filter-dropdown-button\">\r\n                        @for (filter of FilterProp | keyvalue; track filter) {\r\n                            @if (isFilterRelevantForConfiguration(filter.value)) {\r\n                                <li>\r\n                                    <label class=\"radio-inline ms-2 mb-0 d-flex align-items-center\">\r\n                                        <input type=\"radio\" [ngModel]=\"resultCriteria.filterProp\" (click)=\"updateParticipationFilter(filter.value)\" [value]=\"filter.value\" />\r\n                                        <span class=\"ms-1\">\r\n                                            {{ 'artemisApp.exercise.show' + filter.value | artemisTranslate }}\r\n                                            ({{ participationsPerFilter.get(filter.value) ?? 0 }})\r\n                                        </span>\r\n                                    </label>\r\n                                </li>\r\n                            }\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                @if (filteredParticipations.length && participationsPerFilter.get(resultCriteria.filterProp) !== filteredParticipations.length) {\r\n                    <span\r\n                        jhiTranslate=\"artemisApp.exercise.showingOfResults\"\r\n                        [translateValues]=\"{\r\n                            filtered: participationsPerFilter.get(resultCriteria.filterProp),\r\n                            total: filteredParticipations.length,\r\n                            percent: ((participationsPerFilter.get(resultCriteria.filterProp) ?? 0) * 100) / filteredParticipations.length | number: '1.0-1',\r\n                        }\"\r\n                    ></span>\r\n                }\r\n            </div>\r\n            <div class=\"p-2\">\r\n                <div class=\"button-toolbar\">\r\n                    @if (!exercise.exerciseGroup) {\r\n                        <a [routerLink]=\"['/course-management', course.id, exercise.type + '-exercises', exercise.id, 'participations']\" class=\"btn btn-primary btn-sm me-1\">\r\n                            <fa-icon [icon]=\"faListAlt\" />\r\n                            <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exercise.participations\"></span>\r\n                        </a>\r\n                    }\r\n                    @if (exercise.exerciseGroup) {\r\n                        <a\r\n                            [routerLink]=\"[\r\n                                '/course-management',\r\n                                course.id,\r\n                                'exams',\r\n                                exercise.exerciseGroup!.exam!.id!,\r\n                                'exercise-groups',\r\n                                exercise.exerciseGroup!.id!,\r\n                                exercise.type + '-exercises',\r\n                                exercise.id,\r\n                                'participations',\r\n                            ]\"\r\n                            class=\"btn btn-primary btn-sm me-1\"\r\n                        >\r\n                            <fa-icon [icon]=\"faListAlt\" />\r\n                            <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exercise.participations\"></span>\r\n                        </a>\r\n                    }\r\n                    @if (exercise.isAtLeastInstructor) {\r\n                        <jhi-external-submission class=\"d-inline-block me-1 mb-1\" [exercise]=\"exercise\" />\r\n                    }\r\n                    <button\r\n                        jhi-exercise-action-button\r\n                        [buttonIcon]=\"faDownload\"\r\n                        class=\"btn btn-info btn-sm me-1\"\r\n                        [buttonLabel]=\"'entity.action.export' | artemisTranslate\"\r\n                        [hideLabelMobile]=\"false\"\r\n                        [ngbPopover]=\"popContent\"\r\n                        [autoClose]=\"'outside'\"\r\n                        placement=\"bottom-right auto\"\r\n                        container=\"body\"\r\n                        #exportPopover=\"ngbPopover\"\r\n                    ></button>\r\n                    <ng-template #popContent>\r\n                        <h5 jhiTranslate=\"artemisApp.exercise.export.options\"></h5>\r\n                        @if (exercise.isAtLeastInstructor) {\r\n                            <button class=\"btn btn-info btn-sm me-1\" (click)=\"exportNames()\">\r\n                                <fa-icon [icon]=\"faDownload\" />\r\n                                <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exercise.export.names\"></span>\r\n                            </button>\r\n                        }\r\n                        @if (exercise.isAtLeastInstructor) {\r\n                            <jhi-exercise-scores-export-button [exercise]=\"exercise\" />\r\n                        }\r\n                        @if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                            <jhi-programming-assessment-repo-export [programmingExercises]=\"[exercise]\" class=\"me-1\" (buttonPressed)=\"closeExportPopover()\" />\r\n                        }\r\n                        @if (\r\n                            exercise.isAtLeastInstructor &&\r\n                            (exercise.type === ExerciseType.TEXT || exercise.type === ExerciseType.MODELING || exercise.type === ExerciseType.FILE_UPLOAD)\r\n                        ) {\r\n                            <jhi-exercise-submission-export [exerciseId]=\"exercise.id!\" [exerciseType]=\"exercise.type\" class=\"me-1\" />\r\n                        }\r\n                    </ng-template>\r\n                    <button class=\"btn btn-primary btn-sm\" (click)=\"refresh()\">\r\n                        <fa-icon [icon]=\"faSync\" />\r\n                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exercise.refresh\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <jhi-data-table\r\n            [isLoading]=\"isLoading\"\r\n            entityType=\"participation\"\r\n            [allEntities]=\"filteredParticipations\"\r\n            entitiesPerPageTranslation=\"artemisApp.exercise.resultsPerPage\"\r\n            showAllEntitiesTranslation=\"artemisApp.exercise.showAllResults\"\r\n            [searchPlaceholderTranslation]=\"exercise.teamMode ? 'artemisApp.exercise.searchForTeams' : 'artemisApp.exercise.searchForStudents'\"\r\n            [searchFields]=\"exercise.teamMode ? ['team.shortName', 'team.name', 'team.students.login', 'team.students.name'] : ['student.login', 'student.name']\"\r\n            [searchTextFromEntity]=\"searchTextFromParticipation\"\r\n            [searchResultFormatter]=\"searchParticipationFormatter\"\r\n            [customFilterKey]=\"resultCriteria.filterProp\"\r\n            [customFilter]=\"filterParticipationsByProp\"\r\n        >\r\n            <ng-template let-settings=\"settings\" let-controls=\"controls\">\r\n                <ngx-datatable\r\n                    class=\"bootstrap\"\r\n                    [limit]=\"settings.limit\"\r\n                    [sortType]=\"settings.sortType\"\r\n                    [columnMode]=\"settings.columnMode\"\r\n                    [headerHeight]=\"settings.headerHeight\"\r\n                    [footerHeight]=\"settings.footerHeight\"\r\n                    [rowHeight]=\"settings.rowHeight\"\r\n                    [rows]=\"settings.rows\"\r\n                    [rowClass]=\"settings.rowClass\"\r\n                    [scrollbarH]=\"settings.scrollbarH\"\r\n                >\r\n                    <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"100\" [width]=\"180\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort(exercise.teamMode ? 'team.name' : 'student.name')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.name\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField(exercise.teamMode ? 'team.name' : 'student.name')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            @if (exercise.isAtLeastInstructor) {\r\n                                <span>\r\n                                    <a [routerLink]=\"getExerciseParticipationsLink(value.id)\">\r\n                                        {{ value.student?.name || value.team?.name }}\r\n                                    </a>\r\n                                </span>\r\n                            }\r\n                            @if (!exercise.isAtLeastInstructor) {\r\n                                <span>\r\n                                    {{ value.student?.name || value.team?.name }}\r\n                                </span>\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                    <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"100\" [width]=\"110\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            @if (exercise.teamMode) {\r\n                                <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('team.shortName')\">\r\n                                    <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.teamShortName\"></span>\r\n                                    <fa-icon [icon]=\"controls.iconForSortPropField('team.shortName')\" />\r\n                                </span>\r\n                            } @else {\r\n                                <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('student.login')\">\r\n                                    <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.studentId\"></span>\r\n                                    <fa-icon [icon]=\"controls.iconForSortPropField('student.login')\" />\r\n                                </span>\r\n                            }\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            @if (exercise.teamMode) {\r\n                                <a [routerLink]=\"['/course-management', exercise.course?.id, 'exercises', exercise.id, 'teams', value.team.id]\">\r\n                                    {{ value.team.shortName }}\r\n                                </a>\r\n                            } @else {\r\n                                {{ value.student.login }}\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                    <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"130\" [width]=\"140\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('results?.last()?.completionDate')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.completionDate\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('results?.last()?.completionDate')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            {{ value.results?.last()?.completionDate | artemisDate }}\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                    <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"250\" [width]=\"260\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('results?.last()?.score')\">\r\n                                <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exercise.lastResult\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('results?.last()?.score')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            @if (value.results?.last()) {\r\n                                <jhi-result [exercise]=\"exercise\" [result]=\"value.results?.last()\" [participation]=\"value\" />\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                    @if (newManualResultAllowed || exercise.allowComplaintsForAutomaticAssessments) {\r\n                        <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"130\" [width]=\"140\">\r\n                            <ng-template ngx-datatable-header-template>\r\n                                <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('results?.last().assessmentType')\">\r\n                                    <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exercise.type\"></span>\r\n                                    <fa-icon [icon]=\"controls.iconForSortPropField('results?.last().assessmentType')\" />\r\n                                </span>\r\n                            </ng-template>\r\n                            <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                                {{ value.results?.last().assessmentType }}\r\n                            </ng-template>\r\n                        </ngx-datatable-column>\r\n                    }\r\n                    @if (exercise.assessmentType === AssessmentType.MANUAL || exercise.assessmentType === AssessmentType.SEMI_AUTOMATIC) {\r\n                        <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"100\" [width]=\"100\">\r\n                            <ng-template ngx-datatable-header-template>\r\n                                <span class=\"datatable-header-cell-wrapper d-inline-block w-100 text-center\" (click)=\"controls.onSort('results?.last()?.assessmentNote?.note')\">\r\n                                    <fa-icon [icon]=\"faComment\" [ngbTooltip]=\"'artemisApp.assessment.assessmentNote' | artemisTranslate\" />\r\n                                    <fa-icon [icon]=\"controls.iconForSortPropField('results?.last()?.assessmentNote?.note')\" />\r\n                                </span>\r\n                            </ng-template>\r\n                            <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                                @if (value.results?.last()?.assessmentNote?.note?.trim()) {\r\n                                    <span class=\"w-100 text-center\">\r\n                                        <fa-icon\r\n                                            [ngbPopover]=\"value.results?.last()?.assessmentNote.note\"\r\n                                            [triggers]=\"'hover'\"\r\n                                            [icon]=\"faComment\"\r\n                                            [container]=\"'body'\"\r\n                                            [popoverClass]=\"'max-vw-30 popover-text-truncate-4-lines'\"\r\n                                        />\r\n                                    </span>\r\n                                }\r\n                            </ng-template>\r\n                        </ngx-datatable-column>\r\n                    }\r\n                    @if (exercise.type === ExerciseType.PROGRAMMING && afterDueDate) {\r\n                        <ngx-datatable-column prop=\"\" [minWidth]=\"100\" [width]=\"110\">\r\n                            <ng-template ngx-datatable-header-template>\r\n                                <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('testRun')\">\r\n                                    <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.participation.practice\"></span>\r\n                                    <fa-icon [icon]=\"controls.iconForSortPropField('testRun')\" />\r\n                                </span>\r\n                            </ng-template>\r\n                            <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                                {{ (value.testRun ? 'global.generic.yes' : 'global.generic.no') | artemisTranslate }}\r\n                            </ng-template>\r\n                        </ngx-datatable-column>\r\n                    }\r\n                    <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"100\" [width]=\"110\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper d-inline-block w-100 text-center\" (click)=\"controls.onSort('submissionCount')\">\r\n                                <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exercise.submissionCount\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('submissionCount')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            <div class=\"w-100 text-center\">\r\n                                @if (exercise.isAtLeastInstructor) {\r\n                                    <a [routerLink]=\"getExerciseParticipationsLink(value.id)\">\r\n                                        {{ value.submissionCount }}\r\n                                    </a>\r\n                                } @else {\r\n                                    {{ value.submissionCount }}\r\n                                }\r\n                            </div>\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                    <ngx-datatable-column prop=\"\" [sortable]=\"true\" [minWidth]=\"80\" [width]=\"90\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('results?.last()?.durationInMinutes')\">\r\n                                <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exercise.duration\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('results?.last()?.durationInMinutes')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            {{ value.results?.last()?.durationInMinutes ? (value.results?.last()?.durationInMinutes | artemisDurationFromSeconds: true) : '-' }}\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                    @if (exercise.isAtLeastInstructor) {\r\n                        <ngx-datatable-column prop=\"\" [minWidth]=\"350\" [width]=\"400\">\r\n                            <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                                <div class=\"button-header\">\r\n                                    @if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                                        <div class=\"mb-2\">\r\n                                            @if (getRepositoryLink(value)) {\r\n                                                @if (!localVCEnabled) {\r\n                                                    <a class=\"btn btn-primary btn-sm me-1\" href=\"{{ getRepositoryLink(value) }}\">\r\n                                                        <fa-icon [icon]=\"faCodeBranch\" class=\"me-1\" />\r\n                                                        Repository\r\n                                                    </a>\r\n                                                } @else {\r\n                                                    <jhi-code-button\r\n                                                        class=\"me-1\"\r\n                                                        [smallButtons]=\"true\"\r\n                                                        [repositoryUri]=\"getRepositoryLink(value) || ''\"\r\n                                                        [routerLinkForRepositoryView]=\"['..', 'repository', RepositoryType.USER, value.id]\"\r\n                                                    />\r\n                                                }\r\n                                            }\r\n                                            @if (buildPlanId(value) && !localVCEnabled) {\r\n                                                <a target=\"_blank\" rel=\"noreferrer\" href=\"{{ value.buildPlanUrl }}\" class=\"btn btn-primary btn-sm me-1\">\r\n                                                    <fa-icon class=\"me-1\" [icon]=\"farFileCode\" />\r\n                                                    Build plan\r\n                                                </a>\r\n                                            }\r\n                                            <!-- TODO This should ideally be a course management route. Used for the code editor where instructors can add commits to student repositories. -->\r\n                                            <a\r\n                                                [routerLink]=\"['/courses', course.id, 'exercises', 'programming-exercises', exercise.id, 'code-editor', value.id]\"\r\n                                                class=\"btn btn-info btn-sm me-1\"\r\n                                                [jhiFeatureToggleLink]=\"FeatureToggle.ProgrammingExercises\"\r\n                                            >\r\n                                                <fa-icon class=\"me-1\" [icon]=\"faFolderOpen\" [fixedWidth]=\"true\" />\r\n                                                Online editor\r\n                                            </a>\r\n                                        </div>\r\n                                    }\r\n                                    <jhi-manage-assessment-buttons [course]=\"course\" [exercise]=\"exercise\" [participation]=\"value\" [isLoading]=\"isLoading\" (refresh)=\"refresh()\" />\r\n                                </div>\r\n                            </ng-template>\r\n                        </ngx-datatable-column>\r\n                    }\r\n                </ngx-datatable>\r\n            </ng-template>\r\n        </jhi-data-table>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["ExternalSubmissionService", "http", "inject", "HttpClient", "resultService", "ResultService", "create", "exercise", "student", "result", "copy", "convertResultDatesFromClient", "post", "id", "login", "observe", "pipe", "map", "res", "convertResultResponseDatesFromServer", "generateInitialManualResult", "newResult", "Result", "completionDate", "dayjs", "successful", "score", "rated", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "ctx_r1", "exercise", "gradingInstructions", "\u0275\u0275sanitizeHtml", "\u0275\u0275twoWayListener", "$event", "feedback_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "text", "\u0275\u0275resetView", "\u0275\u0275template", "ExternalSubmissionDialogComponent_Conditional_55_For_4_Conditional_11_Template", "detailText", "positive", "\u0275\u0275propertyInterpolate1", "\u0275$index_98_r5", "\u0275\u0275pureFunction2", "_c0", "\u0275\u0275textInterpolate1", "\u0275\u0275twoWayProperty", "\u0275\u0275conditional", "feedbackText_r6", "invalid", "errors", "required", "\u0275\u0275repeaterCreate", "ExternalSubmissionDialogComponent_Conditional_55_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "feedbacks", "\u0275\u0275listener", "_r7", "\u0275\u0275nextContext", "pushFeedback", "popFeedback", "ExternalSubmissionDialogComponent", "externalSubmissionService", "inject", "ExternalSubmissionService", "activeModal", "NgbActiveModal", "eventManager", "EventManager", "SCORE_PATTERN", "student", "User", "result", "isSaving", "userId", "isAssessor", "complaint", "faSave", "faBan", "ngOnInit", "initializeForResultCreation", "generateInitialManualResult", "clear", "dismiss", "save", "i", "length", "type", "FeedbackType", "MANUAL", "subscribeToSaveResponse", "create", "subscribe", "next", "res", "onSaveSuccess", "error", "onSaveError", "close", "body", "broadcast", "name", "content", "push", "Feedback", "pop", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "ExternalSubmissionDialogComponent_Conditional_15_Template", "login", "ExternalSubmissionDialogComponent_Conditional_23_Template", "score", "successful", "ExternalSubmissionDialogComponent_Conditional_34_Template", "ExternalSubmissionDialogComponent_Conditional_55_Template", "ExternalSubmissionDialogComponent_Conditional_56_Template", "rated", "title", "studentLogin_r9", "score_r10", "dirty", "editForm_r8", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "PatternValidator", "NgModel", "NgForm", "TranslateDirective", "NgClass", "FaIconComponent", "HtmlForMarkdownPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openExternalSubmissionDialog", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ButtonType", "WARNING", "ButtonSize", "SMALL", "faPlus", "ExternalSubmissionButtonComponent", "modalService", "inject", "NgbModal", "exercise", "event", "stopPropagation", "modalRef", "open", "ExternalSubmissionDialogComponent", "keyboard", "size", "backdrop", "componentInstance", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ExternalSubmissionButtonComponent_Conditional_1_Template", "\u0275\u0275conditional", "teamMode", "ButtonComponent", "encapsulation", "SubmissionExportService", "http", "inject", "HttpClient", "resourceUrl", "exportSubmissions", "exerciseId", "exerciseType", "repositoryExportOptions", "post", "getExerciseUrl", "observe", "responseType", "ExerciseType", "TEXT", "MODELING", "FILE_UPLOAD", "Error", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "submissionExportOptions", "exportAllParticipants", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "\u0275\u0275element", "faCircleNotch", "\u0275\u0275listener", "_r1", "exportSubmissions", "exercise", "id", "clear", "participantIdentifierList", "\u0275\u0275template", "SubmissionExportDialogComponent_Conditional_0_Conditional_19_Template", "\u0275\u0275elementContainerStart", "filterLateSubmissions", "filterLateSubmissionsDate", "SubmissionExportDialogComponent_Conditional_0_Conditional_55_Template", "\u0275\u0275pureFunction2", "_c0", "title", "course", "\u0275\u0275conditional", "isAtLeastInstructor", "exportInProgress", "SubmissionExportDialogComponent", "exerciseService", "inject", "ExerciseService", "submissionExportService", "SubmissionExportService", "activeModal", "NgbActiveModal", "alertService", "AlertService", "exerciseId", "exerciseType", "isLoading", "ngOnInit", "find", "pipe", "tap", "body", "catchError", "err", "error", "of", "subscribe", "dismiss", "next", "handleExportResponse", "response", "success", "downloadZipFileFromResponse", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "SubmissionExportDialogComponent_Conditional_0_Template", "SubmissionExportDialogComponent_Conditional_1_Template", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "NgModel", "NgForm", "TranslateDirective", "HelpIconComponent", "FormDateTimePickerComponent", "FaIconComponent", "styles", "SubmissionExportButtonComponent", "modalService", "inject", "NgbModal", "ButtonType", "ButtonSize", "FeatureToggle", "exerciseId", "exerciseType", "faDownload", "openSubmissionExportDialog", "event", "stopPropagation", "modalRef", "open", "SubmissionExportDialogComponent", "keyboard", "size", "componentInstance", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "Exports", "INFO", "SMALL", "ButtonComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "ctx_r1", "examMode", "participation", "results", "correctionRound_r1", "assessmentType", "AssessmentType", "AUTOMATIC", "completionDate", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275pipeBind1", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "cancelAssessment", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "isLoading", "faBan", "\u0275\u0275template", "ManageAssessmentButtonsComponent_Conditional_0_For_2_Conditional_1_Conditional_7_Template", "ManageAssessmentButtonsComponent_Conditional_0_For_2_Conditional_1_Conditional_8_Template", "ManageAssessmentButtonsComponent_Conditional_0_For_2_Conditional_1_Conditional_10_Template", "\u0275\u0275classProp", "hasComplaint", "getAssessmentLink", "_c0", "getCorrectionRoundForAssessmentLink", "faFolderOpen", "\u0275\u0275conditional", "newManualResultAllowed", "ManageAssessmentButtonsComponent_Conditional_0_For_2_Conditional_1_Template", "AUTOMATIC_ATHENA", "\u0275\u0275repeaterCreate", "ManageAssessmentButtonsComponent_Conditional_0_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "correctionRoundIndices", "ManageAssessmentButtonsComponent", "programmingAssessmentManualResultService", "inject", "ProgrammingAssessmentManualResultService", "modelingAssessmentService", "ModelingAssessmentService", "textAssessmentService", "TextAssessmentService", "fileUploadAssessmentService", "FileUploadAssessmentService", "exercise", "course", "refresh", "EventEmitter", "cancelConfirmationText", "constructor", "TranslateService", "get", "subscribe", "text", "ngOnInit", "areManualResultsAllowed", "exerciseGroup", "isPracticeMode", "Array", "exam", "numberOfCorrectionRoundsInExam", "keys", "correctionRound", "type", "id", "submissions", "getLinkToSubmissionAssessment", "result", "window", "confirm", "submission", "cancelSubscription", "ExerciseType", "PROGRAMMING", "MODELING", "TEXT", "FILE_UPLOAD", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ManageAssessmentButtonsComponent_Conditional_0_Template", "submissionCount", "RouterLink", "FaIconComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate2", "ctx_r1", "exercise", "course", "title", "exerciseGroup", "exam", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "resetFilterOptions", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c4", "rangeFilter", "toString", "_r4", "filter_r5", "$implicit", "updateParticipationFilter", "value", "resultCriteria", "filterProp", "tmp_16_0", "participationsPerFilter", "get", "undefined", "\u0275\u0275template", "ExerciseScoresComponent_Conditional_0_For_28_Conditional_1_Template", "\u0275\u0275conditional", "isFilterRelevantForConfiguration", "\u0275\u0275pureFunction3", "_c5", "filteredParticipations", "length", "\u0275\u0275pipeBind2", "tmp_4_0", "_c6", "id", "type", "faListAlt", "\u0275\u0275pureFunction5", "_c7", "_r6", "exportNames", "faDownload", "_r7", "closeExportPopover", "_c8", "ExerciseScoresComponent_Conditional_0_ng_template_45_Conditional_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_45_Conditional_4_Template", "ExerciseScoresComponent_Conditional_0_ng_template_45_Conditional_5_Template", "ExerciseScoresComponent_Conditional_0_ng_template_45_Conditional_6_Template", "isAtLeastInstructor", "ExerciseType", "PROGRAMMING", "TEXT", "MODELING", "FILE_UPLOAD", "_r8", "controls_r9", "controls", "onSort", "teamMode", "iconForSortPropField", "getExerciseParticipationsLink", "value_r10", "student", "name", "team", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_7_Conditional_1_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_7_Conditional_2_Template", "_r11", "_r12", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_12_Conditional_1_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_12_Conditional_2_Template", "_c9", "value_r13", "shortName", "login", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_14_Conditional_1_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_14_Conditional_2_Template", "_r14", "value_r15", "results", "tmp_8_0", "last", "completionDate", "_r16", "value_r17", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_28_Conditional_1_Template", "_r18", "value_r19", "assessmentType", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_31_ng_template_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_31_ng_template_5_Template", "_r20", "faComment", "value_r21", "tmp_10_0", "assessmentNote", "note", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_32_ng_template_5_Conditional_1_Template", "tmp_9_0", "trim", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_32_ng_template_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_32_ng_template_5_Template", "_r22", "value_r23", "testRun", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_33_ng_template_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_33_ng_template_5_Template", "_r24", "value_r25", "submissionCount", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_38_Conditional_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_38_Conditional_4_Template", "_r26", "value_r27", "durationInMinutes", "\u0275\u0275propertyInterpolate", "getRepositoryLink", "value_r29", "\u0275\u0275sanitizeUrl", "faCodeBranch", "\u0275\u0275pureFunction2", "_c11", "RepositoryType", "USER", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_ng_template_3_Conditional_3_Conditional_3_Conditional_1_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_ng_template_3_Conditional_3_Conditional_3_Conditional_2_Template", "localVCEnabled", "buildPlanUrl", "farFileCode", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_ng_template_3_Conditional_3_Conditional_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_ng_template_3_Conditional_3_Conditional_4_Template", "buildPlanId", "_c10", "FeatureToggle", "ProgrammingExercises", "faFolderOpen", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_ng_template_3_Conditional_3_Template", "_r28", "refresh", "isLoading", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_ng_template_3_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_5_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_7_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_12_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_14_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_19_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_21_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_26_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_28_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_31_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_32_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_33_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_36_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_38_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_43_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_ng_template_45_Template", "ExerciseScoresComponent_Conditional_0_ng_template_60_Conditional_48_Template", "settings_r30", "limit", "sortType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "rows", "rowClass", "scrollbarH", "newManualResultAllowed", "allowComplaintsForAutomaticAssessments", "AssessmentType", "MANUAL", "SEMI_AUTOMATIC", "afterDueDate", "ExerciseScoresComponent_Conditional_0_Conditional_5_Template", "ExerciseScoresComponent_Conditional_0_Conditional_6_Template", "ExerciseScoresComponent_Conditional_0_Conditional_8_Template", "\u0275\u0275repeaterCreate", "ExerciseScoresComponent_Conditional_0_For_28_Template", "\u0275\u0275repeaterTrackByIdentity", "ExerciseScoresComponent_Conditional_0_Conditional_32_Template", "ExerciseScoresComponent_Conditional_0_Conditional_38_Template", "ExerciseScoresComponent_Conditional_0_Conditional_39_Template", "ExerciseScoresComponent_Conditional_0_Conditional_40_Template", "ExerciseScoresComponent_Conditional_0_ng_template_45_Template", "\u0275\u0275templateRefExtractor", "_r1", "ExerciseScoresComponent_Conditional_0_ng_template_60_Template", "faFilter", "_c1", "tmp_7_0", "\u0275\u0275repeater", "FilterProp", "popContent_r31", "faSync", "\u0275\u0275pureFunction0", "_c2", "_c3", "searchTextFromParticipation", "searchParticipationFormatter", "filterParticipationsByProp", "ExerciseScoresComponent", "route", "inject", "ActivatedRoute", "courseService", "CourseManagementService", "exerciseService", "ExerciseService", "resultService", "ResultService", "profileService", "ProfileService", "programmingSubmissionService", "ProgrammingSubmissionService", "participationService", "ParticipationService", "scoreRanges", "Range", "exportPopover", "paramSub", "reverse", "participations", "eventSubscriber", "ALL", "Map", "faFileCode", "ngOnInit", "params", "subscribe", "findCourse", "find", "findExercise", "filterValue", "snapshot", "queryParamMap", "Number", "forkJoin", "courseRes", "exerciseRes", "body", "dueDate", "dayjs", "isAfter", "findAllParticipationsByExercise", "participationsResponse", "handleNewParticipations", "areManualResultsAllowed", "participationId", "forEach", "participation", "result", "index", "diff", "initializationDate", "sort", "result1", "result2", "resultsWithoutAthena", "filter", "AUTOMATIC_ATHENA", "submission", "submissions", "filterByScoreRange", "projectKey", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "PROFILE_LOCALVC", "Object", "values", "set", "newValue", "setTimeout", "latestResult", "SUCCESSFUL", "successful", "UNSUCCESSFUL", "BUILD_FAILED", "buildFailed", "isManualResult", "AUTOMATIC", "LOCKED", "userIndependentRepositoryUri", "studentParticipation", "participantName", "push", "students", "map", "s", "join", "triggerDownloadCSV", "formatTeamAsSearchResult", "participantIdentifier", "ngOnDestroy", "unsubscribe", "unsubscribeAllWebsocketTopics", "filterFunction", "upperBound", "score", "lowerBound", "close", "selectors", "viewQuery", "rf", "ctx", "ExerciseCacheService", "decls", "vars", "consts", "template", "ExerciseScoresComponent_Conditional_0_Template", "TranslateDirective", "NgbDropdown", "NgbDropdownToggle", "FaIconComponent", "NgbDropdownMenu", "FormsModule", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgModel", "RouterLink", "ExternalSubmissionButtonComponent", "ExerciseActionButtonComponent", "NgbPopover", "ExerciseScoresExportButtonComponent", "ProgrammingAssessmentRepoExportButtonComponent", "SubmissionExportButtonComponent", "DataTableComponent", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "ResultComponent", "NgbTooltip", "CodeButtonComponent", "FeatureToggleLinkDirective", "ManageAssessmentButtonsComponent", "DecimalPipe", "KeyValuePipe", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "encapsulation"]
}
