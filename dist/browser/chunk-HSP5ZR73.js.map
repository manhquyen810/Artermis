{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/participate/text-submission.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { stringifyCircular } from 'app/shared/util/utils';\r\nimport { getLatestSubmissionResult, setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\n\r\nexport type EntityResponseType = HttpResponse<TextSubmission>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TextSubmissionService {\r\n    private http = inject(HttpClient);\r\n    private submissionService = inject(SubmissionService);\r\n\r\n    create(textSubmission: TextSubmission, exerciseId: number): Observable<EntityResponseType> {\r\n        const copy = this.submissionService.convert(textSubmission);\r\n        return this.http\r\n            .post<TextSubmission>(`api/text/exercises/${exerciseId}/text-submissions`, copy, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n\r\n    update(textSubmission: TextSubmission, exerciseId: number): Observable<EntityResponseType> {\r\n        const copy = this.submissionService.convert(textSubmission);\r\n        return this.http\r\n            .put<TextSubmission>(`api/text/exercises/${exerciseId}/text-submissions`, stringifyCircular(copy), {\r\n                headers: { 'Content-Type': 'application/json' },\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n\r\n    getTextSubmission(submissionId: number): Observable<TextSubmission> {\r\n        return this.http\r\n            .get<TextSubmission>(`api/text/text-submissions/${submissionId}`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\r\n    }\r\n\r\n    getSubmissions(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }, correctionRound = 0): Observable<HttpResponse<TextSubmission[]>> {\r\n        const url = `api/text/exercises/${exerciseId}/text-submissions`;\r\n        let params = createRequestOption(req);\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n\r\n        return this.http\r\n            .get<TextSubmission[]>(url, { observe: 'response', params })\r\n            .pipe(map((res: HttpResponse<TextSubmission[]>) => this.submissionService.convertArrayResponse(res)));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param exerciseId id of the exerciser\r\n     * @param option 'head': Do not optimize assessment order. Only used to check if assessments available.\r\n     * @param correctionRound: The correction round for which we want to get a new assessment\r\n     */\r\n    getSubmissionWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound = 0): Observable<TextSubmission | undefined> {\r\n        const url = `api/text/exercises/${exerciseId}/text-submission-without-assessment`;\r\n        let params = new HttpParams();\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        if (option) {\r\n            params = params.set(option, 'true');\r\n        }\r\n\r\n        return this.http.get<TextSubmission | undefined>(url, { observe: 'response', params }).pipe(\r\n            map((response) => {\r\n                const submission = response.body;\r\n                if (!submission) {\r\n                    return undefined;\r\n                }\r\n                setLatestSubmissionResult(submission, getLatestSubmissionResult(submission));\r\n\r\n                submission.participation!.submissions = [submission];\r\n                submission.participation!.results = [submission.latestResult!];\r\n\r\n                return submission;\r\n            }),\r\n        );\r\n    }\r\n}\r\n"],
  "mappings": "8QAaA,IAAaA,GAAqB,IAAA,CAA5B,MAAOA,CAAqB,CACtBC,KAAOC,EAAOC,CAAU,EACxBC,kBAAoBF,EAAOG,CAAiB,EAEpDC,OAAOC,EAAgCC,EAAkB,CACrD,IAAMC,EAAO,KAAKL,kBAAkBM,QAAQH,CAAc,EAC1D,OAAO,KAAKN,KACPU,KAAqB,sBAAsBH,CAAU,oBAAqBC,EAAM,CAC7EG,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA4B,KAAKX,kBAAkBY,gBAAgBD,CAAG,CAAC,CAAC,CAC3F,CAEAE,OAAOV,EAAgCC,EAAkB,CACrD,IAAMC,EAAO,KAAKL,kBAAkBM,QAAQH,CAAc,EAC1D,OAAO,KAAKN,KACPiB,IAAoB,sBAAsBV,CAAU,oBAAqBW,EAAkBV,CAAI,EAAG,CAC/FW,QAAS,CAAE,eAAgB,kBAAkB,EAC7CR,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA4B,KAAKX,kBAAkBY,gBAAgBD,CAAG,CAAC,CAAC,CAC3F,CAEAM,kBAAkBC,EAAoB,CAClC,OAAO,KAAKrB,KACPsB,IAAoB,6BAA6BD,CAAY,GAAI,CAC9DV,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAAsCA,EAAIS,IAAK,CAAC,CACnE,CAEAC,eAAejB,EAAoBkB,EAA6DC,EAAkB,EAAC,CAC/G,IAAMC,EAAM,sBAAsBpB,CAAU,oBACxCqB,EAASC,EAAoBJ,CAAG,EACpC,OAAIC,IAAoB,IACpBE,EAASA,EAAOE,IAAI,mBAAoBJ,EAAgBK,SAAQ,CAAE,GAG/D,KAAK/B,KACPsB,IAAsBK,EAAK,CAAEhB,QAAS,WAAYiB,OAAAA,CAAM,CAAE,EAC1DhB,KAAKC,EAAKC,GAAwC,KAAKX,kBAAkB6B,qBAAqBlB,CAAG,CAAC,CAAC,CAC5G,CAQAmB,+BAA+B1B,EAAoB2B,EAA0BR,EAAkB,EAAC,CAC5F,IAAMC,EAAM,sBAAsBpB,CAAU,sCACxCqB,EAAS,IAAIO,EACjB,OAAIT,IAAoB,IACpBE,EAASA,EAAOE,IAAI,mBAAoBJ,EAAgBK,SAAQ,CAAE,GAElEG,IACAN,EAASA,EAAOE,IAAII,EAAQ,MAAM,GAG/B,KAAKlC,KAAKsB,IAAgCK,EAAK,CAAEhB,QAAS,WAAYiB,OAAAA,CAAM,CAAE,EAAEhB,KACnFC,EAAKuB,GAAY,CACb,IAAMC,EAAaD,EAASb,KAC5B,GAAKc,EAGLC,OAAAA,EAA0BD,EAAYE,EAA0BF,CAAU,CAAC,EAE3EA,EAAWG,cAAeC,YAAc,CAACJ,CAAU,EACnDA,EAAWG,cAAeE,QAAU,CAACL,EAAWM,YAAa,EAEtDN,CACX,CAAC,CAAC,CAEV,4CAzEStC,EAAqB,6BAArBA,EAAqB6C,QAArB7C,EAAqB8C,UAAAC,WADR,MAAM,CAAA,SACnB/C,CAAqB,GAAA",
  "names": ["TextSubmissionService", "http", "inject", "HttpClient", "submissionService", "SubmissionService", "create", "textSubmission", "exerciseId", "copy", "convert", "post", "observe", "pipe", "map", "res", "convertResponse", "update", "put", "stringifyCircular", "headers", "getTextSubmission", "submissionId", "get", "body", "getSubmissions", "req", "correctionRound", "url", "params", "createRequestOption", "set", "toString", "convertArrayResponse", "getSubmissionWithoutAssessment", "option", "HttpParams", "response", "submission", "setLatestSubmissionResult", "getLatestSubmissionResult", "participation", "submissions", "results", "latestResult", "factory", "\u0275fac", "providedIn"]
}
