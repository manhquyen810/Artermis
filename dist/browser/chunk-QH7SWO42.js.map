{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/metis/posting.model.ts", "src/main/webapp/app/shared/metis/metis.util.ts", "src/main/webapp/app/overview/course-conversations/other/conversation.util.ts", "src/main/webapp/app/entities/metis/post.model.ts", "src/main/webapp/app/shared/metis/posting.service.ts", "src/main/webapp/app/shared/metis/post.service.ts", "src/main/webapp/app/shared/metis/answer-post.service.ts", "src/main/webapp/app/entities/metis/answer-post.model.ts", "src/main/webapp/app/shared/metis/reaction.service.ts", "src/main/webapp/app/entities/metis/conversation/group-chat.model.ts", "src/main/webapp/app/entities/metis/conversation/one-to-one-chat.model.ts", "src/main/webapp/app/shared/metis/conversations/conversation.service.ts", "src/main/webapp/app/shared/metis/conversations/one-to-one-chat.service.ts", "src/main/webapp/app/shared/metis/conversations/channel.service.ts", "src/main/webapp/app/shared/metis/conversations/group-chat.service.ts", "src/main/webapp/app/shared/metis/metis-conversation.service.ts", "src/main/webapp/app/shared/notification/notification.service.ts", "src/main/webapp/app/shared/metis/saved-post.service.ts", "src/main/webapp/app/shared/metis/forwarded-message.service.ts", "src/main/webapp/app/entities/metis/forwarded-message.model.ts", "src/main/webapp/app/shared/metis/metis.service.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { User } from 'app/core/user/user.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Reaction } from 'app/entities/metis/reaction.model';\r\nimport { UserRole } from 'app/shared/metis/metis.util';\r\nimport { Conversation } from 'app/entities/metis/conversation/conversation.model';\r\n\r\nexport enum SavedPostStatus {\r\n    PROGRESS = 0,\r\n    COMPLETED = 1,\r\n    ARCHIVED = 2,\r\n}\r\n\r\nexport enum SavedPostStatusMap {\r\n    PROGRESS = 'progress',\r\n    COMPLETED = 'completed',\r\n    ARCHIVED = 'archived',\r\n}\r\n\r\nexport enum PostingType {\r\n    POST = 0,\r\n    ANSWER = 1,\r\n}\r\n\r\nexport abstract class Posting implements BaseEntity {\r\n    public id?: number;\r\n    public referencePostId?: number;\r\n    public author?: User;\r\n    public authorRole?: UserRole;\r\n    public creationDate?: dayjs.Dayjs;\r\n    public updatedDate?: dayjs.Dayjs;\r\n    public content?: string;\r\n    public isSaved?: boolean;\r\n    public savedPostStatus?: number;\r\n    public postingType?: number;\r\n    public reactions?: Reaction[];\r\n    public hasForwardedMessages?: boolean = false;\r\n    public isConsecutive?: boolean = false;\r\n    public conversation?: Conversation;\r\n\r\n    public static mapToStatus(map: SavedPostStatusMap) {\r\n        switch (map) {\r\n            case SavedPostStatusMap.COMPLETED:\r\n                return SavedPostStatus.COMPLETED;\r\n            case SavedPostStatusMap.ARCHIVED:\r\n                return SavedPostStatus.ARCHIVED;\r\n            default:\r\n                return SavedPostStatus.PROGRESS;\r\n        }\r\n    }\r\n\r\n    public static statusToMap(status: SavedPostStatus) {\r\n        switch (status) {\r\n            case SavedPostStatus.COMPLETED:\r\n                return SavedPostStatusMap.COMPLETED;\r\n            case SavedPostStatus.ARCHIVED:\r\n                return SavedPostStatusMap.ARCHIVED;\r\n            default:\r\n                return SavedPostStatusMap.PROGRESS;\r\n        }\r\n    }\r\n}\r\n", "import { Validators } from '@angular/forms';\r\nimport { Params } from '@angular/router';\r\n\r\nexport enum PostingEditType {\r\n    CREATE,\r\n    UPDATE,\r\n}\r\n\r\nexport enum DisplayPriority {\r\n    PINNED = 'PINNED',\r\n    ARCHIVED = 'ARCHIVED',\r\n    NONE = 'NONE',\r\n}\r\n\r\nexport enum PageType {\r\n    OVERVIEW = 'OVERVIEW',\r\n    PAGE_SECTION = 'PAGE_SECTION',\r\n    PLAGIARISM_CASE_INSTRUCTOR = 'PLAGIARISM_CASE_INSTRUCTOR',\r\n    PLAGIARISM_CASE_STUDENT = 'PLAGIARISM_CASE_STUDENT',\r\n}\r\n\r\nexport const VOTE_EMOJI_ID = 'heavy_plus_sign';\r\n\r\nexport enum SortDirection {\r\n    ASCENDING = 'ASCENDING',\r\n    DESCENDING = 'DESCENDING',\r\n}\r\n\r\nexport enum PostSortCriterion {\r\n    CREATION_DATE = 'CREATION_DATE',\r\n    VOTES = 'VOTES',\r\n}\r\n\r\nexport enum MetisPostAction {\r\n    CREATE = 'CREATE',\r\n    UPDATE = 'UPDATE',\r\n    DELETE = 'DELETE',\r\n\r\n    NEW_MESSAGE = 'NEW_MESSAGE',\r\n}\r\n\r\nexport interface PostContextFilter {\r\n    courseId?: number;\r\n    courseWideChannelIds?: number[];\r\n    plagiarismCaseId?: number;\r\n    searchText?: string;\r\n    conversationId?: number;\r\n    filterToUnresolved?: boolean;\r\n    filterToOwn?: boolean;\r\n    filterToAnsweredOrReacted?: boolean;\r\n    postSortCriterion?: PostSortCriterion;\r\n    sortingOrder?: SortDirection;\r\n    pagingEnabled?: boolean;\r\n    page?: number;\r\n    pageSize?: number;\r\n    pinnedOnly?: boolean;\r\n}\r\n\r\n/**\r\n * The content of a Post is composed of `PostingContentPart` that allows rendering the parts individually and creating references to other posts.\r\n * For example, the content \"You can find more information on this topic in #5 and #6 as well.\" will be split up in two separate `PostingContentPart`s:\r\n * { contentBeforeReference: \"You can find more information on this topic in \",\r\n *   linkToReference: \"/courses/{courseId}/discussion\",\r\n *   queryParams: {searchText: #5},\r\n *   referenceStr: \"#5\",\r\n *   contentAfterReference: \" and \" }\r\n * The second PostingContentPart is:\r\n * { contentBeforeReference: undefined // only exists for the first PostingContentPart,\r\n *   linkToReference: \"/courses/{courseId}/discussion\",\r\n *   queryParams: {searchText: #6},\r\n *   referenceStr: \"#6\",\r\n *   contentAfterReference: \" as well. \" }\r\n */\r\nexport interface PostingContentPart {\r\n    contentBeforeReference?: string; // string before occurrence of reference pattern -> only for the first PostContentPart in the content of a posting\r\n    linkToReference?: RouteComponents; // link the reference navigates to\r\n    attachmentToReference?: string; // attachment link the reference opens\r\n    slideToReference?: string; // slide link the reference opens\r\n    queryParams?: Params; // params that are required for navigating\r\n    referenceStr?: string; // string that is within the anchor tag\r\n    referenceType?: ReferenceType; // type of artifact to reference\r\n    contentAfterReference?: string; // string after occurrence of reference pattern\r\n    imageToReference?: string; // image link the reference opens\r\n}\r\n\r\n/**\r\n * For each match that is found during regex search on a posting content string, the start index of the match as well as the inclusive end index of the match is stored.\r\n * For example, if we search for the reference pattern in the string \"I reference #54.\", the resulting PatternMatch object would be:\r\n * { startIndex: 12, endIndex: 15}\r\n */\r\nexport interface PatternMatch {\r\n    startIndex: number;\r\n    endIndex: number;\r\n    referenceType: ReferenceType;\r\n}\r\n\r\nexport enum ReferenceType {\r\n    POST = 'POST',\r\n    LECTURE = 'LECTURE',\r\n    ATTACHMENT = 'ATTACHMENT',\r\n    ATTACHMENT_UNITS = 'ATTACHMENT_UNITS',\r\n    SLIDE = 'SLIDE',\r\n    PROGRAMMING = 'programming',\r\n    MODELING = 'modeling',\r\n    QUIZ = 'quiz',\r\n    TEXT = 'text',\r\n    FILE_UPLOAD = 'file-upload',\r\n    USER = 'USER',\r\n    CHANNEL = 'CHANNEL',\r\n    FAQ = 'FAQ',\r\n    IMAGE = 'IMAGE',\r\n}\r\n\r\nexport enum UserRole {\r\n    INSTRUCTOR = 'INSTRUCTOR',\r\n    TUTOR = 'TUTOR',\r\n    USER = 'USER',\r\n}\r\n\r\n/**\r\n * The context information of a post contains - for exercise and lecture context - an array of link components to be used by the Router to navigate to the context,\r\n * and the display name, i.e. the string that is linked, e.g. the lecture title\r\n */\r\nexport interface ContextInformation {\r\n    routerLinkComponents?: RouteComponents;\r\n    queryParams?: Params;\r\n    displayName: string;\r\n}\r\n\r\n/**\r\n * Helper type reflecting components used by the angular router,\r\n * each component is either a string or a number\r\n */\r\nexport type RouteComponents = (string | number)[];\r\n\r\nexport const MetisWebsocketChannelPrefix = '/topic/metis/';\r\n\r\n/**\r\n * whitespace accepted only together with a character excluding newline character\r\n */\r\nexport const PostTitleValidationPattern = Validators.pattern(/^(.)*\\S+(.)*$/);\r\n\r\n/**\r\n * whitespace accepted only together with a character including newline character\r\n * */\r\nexport const PostContentValidationPattern = Validators.pattern(/^(\\n|\\r|.)*\\S+(\\n|\\r|.)*$/);\r\n", "import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\nimport { ChannelSubType } from 'app/entities/metis/conversation/channel.model';\r\n\r\nexport function getUserLabel({ firstName, lastName, login }: User | ConversationUserDTO, showLogin = true) {\r\n    let label = '';\r\n    if (firstName) {\r\n        label += `${firstName} `;\r\n    }\r\n    if (lastName) {\r\n        label += `${lastName} `;\r\n    }\r\n    if (login && showLogin) {\r\n        label += `(${login})`;\r\n    }\r\n    return label.trim();\r\n}\r\n\r\nexport function getChannelSubTypeReferenceTranslationKey(subType: ChannelSubType | undefined) {\r\n    const prefix = 'artemisApp.conversationsLayout.';\r\n    switch (subType) {\r\n        case ChannelSubType.EXERCISE:\r\n            return prefix + 'goToExercise';\r\n        case ChannelSubType.LECTURE:\r\n            return prefix + 'goToLecture';\r\n        case ChannelSubType.EXAM:\r\n            return prefix + 'goToExam';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\n\r\nexport const defaultFirstLayerDialogOptions: NgbModalOptions = { size: 'lg', scrollable: false, backdrop: 'static' };\r\n\r\nexport const defaultSecondLayerDialogOptions: NgbModalOptions = {\r\n    size: 'lg',\r\n    scrollable: false,\r\n    backdrop: 'static',\r\n    backdropClass: 'second-layer-modal-bg',\r\n    centered: true,\r\n};\r\n", "import { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { DisplayPriority } from 'app/shared/metis/metis.util';\r\nimport { PlagiarismCase } from 'app/exercises/shared/plagiarism/types/PlagiarismCase';\r\n\r\nexport class Post extends Posting {\r\n    public title?: string;\r\n    public answers?: AnswerPost[];\r\n    public tags?: string[];\r\n    public plagiarismCase?: PlagiarismCase;\r\n    public displayPriority?: DisplayPriority;\r\n    public resolved?: boolean;\r\n    public forwardedPosts?: Post[] = [];\r\n    public forwardedAnswerPosts?: AnswerPost[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n        // set default values\r\n        this.displayPriority = DisplayPriority.NONE;\r\n    }\r\n}\r\n", "import { HttpResponse } from '@angular/common/http';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { Observable } from 'rxjs';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\n\r\nexport abstract class PostingService<T extends Posting> {\r\n    abstract create(courseId: number, posting: T): Observable<HttpResponse<T>>;\r\n\r\n    abstract delete(courseId: number, posting: T): Observable<HttpResponse<any>>;\r\n\r\n    abstract update(courseId: number, posting: T): Observable<HttpResponse<T>>;\r\n\r\n    /**\r\n     * takes a posting and converts the date from the client\r\n     * @param   {T} posting\r\n     * @return  {T}\r\n     */\r\n    protected convertPostingDateFromClient<T extends Posting>(posting: T): T {\r\n        return {\r\n            ...posting,\r\n            creationDate: convertDateFromClient(posting.creationDate),\r\n            updatedDate: convertDateFromClient(posting.updatedDate),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * takes a posting and converts the date from the server\r\n     * @param   {HttpResponse<T>} res\r\n     * @return  {HttpResponse<T>}\r\n     */\r\n    protected convertPostingResponseDateFromServer(res: HttpResponse<T>): HttpResponse<T> {\r\n        if (res.body) {\r\n            res.body.creationDate = convertDateFromServer(res.body.creationDate);\r\n            res.body.updatedDate = convertDateFromServer(res.body.updatedDate);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { PostingService } from 'app/shared/metis/posting.service';\r\nimport { DisplayPriority, PostContextFilter } from 'app/shared/metis/metis.util';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\ntype EntityResponseType = HttpResponse<Post>;\r\ntype EntityArrayResponseType = HttpResponse<Post[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PostService extends PostingService<Post> {\r\n    private http = inject(HttpClient);\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * creates a post\r\n     * @param courseId\r\n     * @param post\r\n     * @return the created post\r\n     */\r\n    create(courseId: number, post: Post): Observable<EntityResponseType> {\r\n        const copy = this.convertPostingDateFromClient(post);\r\n        return this.http.post<Post>(`${this.getResourceEndpoint(courseId, undefined, post)}`, copy, { observe: 'response' }).pipe(map(this.convertPostingResponseDateFromServer));\r\n    }\r\n\r\n    /**\r\n     * gets all posts for course by its id, filtered by context if PostContextFilter is passed\r\n     * a context to filter posts for can be a course-wide topic, a lecture, or an exercise within a course\r\n     * @param courseId\r\n     * @param postContextFilter\r\n     * @return the posts\r\n     */\r\n    getPosts(courseId: number, postContextFilter: PostContextFilter): Observable<EntityArrayResponseType> {\r\n        let params = new HttpParams();\r\n\r\n        if (postContextFilter.postSortCriterion) {\r\n            params = params.set('postSortCriterion', postContextFilter.postSortCriterion.toString());\r\n        }\r\n        if (postContextFilter.sortingOrder) {\r\n            params = params.set('sortingOrder', postContextFilter.sortingOrder.toString());\r\n        }\r\n        if (postContextFilter.courseWideChannelIds) {\r\n            params = params.set('courseWideChannelIds', postContextFilter.courseWideChannelIds.toString());\r\n        }\r\n        if (postContextFilter.plagiarismCaseId) {\r\n            params = params.set('plagiarismCaseId', postContextFilter.plagiarismCaseId.toString());\r\n        }\r\n        if (postContextFilter.searchText) {\r\n            params = params.set('searchText', postContextFilter.searchText.toString());\r\n        }\r\n        if (postContextFilter.conversationId) {\r\n            params = params.set('conversationId', postContextFilter.conversationId.toString());\r\n        }\r\n        if (postContextFilter.filterToUnresolved) {\r\n            params = params.set('filterToUnresolved', postContextFilter.filterToUnresolved);\r\n        }\r\n        if (postContextFilter.filterToOwn) {\r\n            params = params.set('filterToOwn', postContextFilter.filterToOwn);\r\n        }\r\n        if (postContextFilter.filterToAnsweredOrReacted) {\r\n            params = params.set('filterToAnsweredOrReacted', postContextFilter.filterToAnsweredOrReacted);\r\n        }\r\n        if (postContextFilter.pagingEnabled) {\r\n            params = params.set('pagingEnabled', postContextFilter.pagingEnabled);\r\n            params = params.set('page', postContextFilter.page!);\r\n            params = params.set('size', postContextFilter.pageSize!);\r\n        }\r\n        if (postContextFilter.pinnedOnly) {\r\n            params = params.set('pinnedOnly', postContextFilter.pinnedOnly);\r\n        }\r\n        return this.http\r\n            .get<Post[]>(`${this.getResourceEndpoint(courseId, postContextFilter, undefined)}`, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map(this.convertPostResponseArrayDatesFromServer));\r\n    }\r\n\r\n    /**\r\n     * updates a post\r\n     * @param courseId\r\n     * @param post\r\n     * @return the updated post\r\n     */\r\n    update<T extends Posting>(courseId: number, post: T): Observable<EntityResponseType> {\r\n        const copy = this.convertPostingDateFromClient(post);\r\n        return this.http\r\n            .put<Post>(`${this.getResourceEndpoint(courseId, undefined, post)}/${post.id}`, copy, { observe: 'response' })\r\n            .pipe(map(this.convertPostingResponseDateFromServer));\r\n    }\r\n\r\n    /**\r\n     * updates the display priority of a post\r\n     * @param courseId\r\n     * @param postId\r\n     * @param displayPriority\r\n     * @return the updated post\r\n     */\r\n    updatePostDisplayPriority(courseId: number, postId: number, displayPriority: DisplayPriority): Observable<EntityResponseType> {\r\n        return this.http\r\n            .put(`api/communication/courses/${courseId}/messages/${postId}/display-priority`, {}, { params: { displayPriority }, observe: 'response' })\r\n            .pipe(map(this.convertPostingResponseDateFromServer));\r\n    }\r\n\r\n    /**\r\n     * deletes a post\r\n     * @param courseId\r\n     * @param post\r\n     * @return void\r\n     */\r\n    delete(courseId: number, post: Post): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.getResourceEndpoint(courseId, undefined, post)}/${post.id}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * gets source posts(original (forwarded) posts in posts) of posts\r\n     * @param {number} courseId\r\n     * @param {number[]} postIds\r\n     * @return {Observable<Post[]>}\r\n     */\r\n    getSourcePostsByIds(courseId: number, postIds: number[]): Observable<Post[]> {\r\n        const params = new HttpParams().set('postIds', postIds.join(','));\r\n        return this.http.get<Post[]>(`api/communication/courses/${courseId}/messages-source-posts`, { params, observe: 'response' }).pipe(map((response) => response.body!));\r\n    }\r\n\r\n    /**\r\n     * takes an array of posts and converts the date from the server\r\n     * @param res\r\n     * @return the response with the converted date\r\n     */\r\n    convertPostResponseArrayDatesFromServer(res: HttpResponse<Post[]>): HttpResponse<Post[]> {\r\n        if (res.body) {\r\n            res.body.forEach((post: Post) => {\r\n                post.creationDate = convertDateFromServer(post.creationDate);\r\n                post.answers?.forEach((answer: AnswerPost) => {\r\n                    answer.creationDate = convertDateFromServer(answer.creationDate);\r\n                });\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Determines the resource endpoint for communication posts.\r\n     * Decides between communication and plagiarism.\r\n     *\r\n     * @param courseId the course id\r\n     * @param postContextFilter current post context filter in use\r\n     * @param post new or updated post\r\n     * @return '/messages' or '/posts'\r\n     */\r\n    private getResourceEndpoint(courseId: number, postContextFilter?: PostContextFilter, post?: Post): string {\r\n        if (post?.conversation || postContextFilter?.conversationId || postContextFilter?.courseWideChannelIds) {\r\n            return `api/communication/courses/${courseId}/messages`;\r\n        } else {\r\n            return `api/plagiarism/courses/${courseId}/posts`;\r\n        }\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { PostingService } from 'app/shared/metis/posting.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\ntype EntityResponseType = HttpResponse<AnswerPost>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnswerPostService extends PostingService<AnswerPost> {\r\n    protected http = inject(HttpClient);\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * creates an answerPost\r\n     * @param {number} courseId\r\n     * @param {AnswerPost} answerPost\r\n     * @return {Observable<EntityResponseType>}\r\n     */\r\n    create(courseId: number, answerPost: AnswerPost): Observable<EntityResponseType> {\r\n        const copy = this.convertPostingDateFromClient(answerPost);\r\n        return this.http.post<AnswerPost>(`${this.getResourceEndpoint(courseId, answerPost)}`, copy, { observe: 'response' }).pipe(map(this.convertPostingResponseDateFromServer));\r\n    }\r\n\r\n    /**\r\n     * updates an answerPost\r\n     * @param {number} courseId\r\n     * @param {AnswerPost} answerPost\r\n     * @return {Observable<EntityResponseType>}\r\n     */\r\n    update(courseId: number, answerPost: AnswerPost): Observable<EntityResponseType> {\r\n        const copy = this.convertPostingDateFromClient(answerPost);\r\n        return this.http\r\n            .put<AnswerPost>(`${this.getResourceEndpoint(courseId, answerPost)}/${answerPost.id}`, copy, { observe: 'response' })\r\n            .pipe(map(this.convertPostingResponseDateFromServer));\r\n    }\r\n\r\n    /**\r\n     * deletes an answerPost\r\n     * @param {number} courseId\r\n     * @param {AnswerPost} answerPost\r\n     * @return {Observable<HttpResponse<void>>}\r\n     */\r\n    delete(courseId: number, answerPost: AnswerPost): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.getResourceEndpoint(courseId, answerPost)}/${answerPost.id}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * gets source answer posts(original (forwarded) answer posts in posts) of posts\r\n     * @param {number} courseId\r\n     * @param {number[]} postIds\r\n     * @return {Observable<AnswerPost[]>}\r\n     */\r\n    getSourceAnswerPostsByIds(courseId: number, answerPostIds: number[]): Observable<AnswerPost[]> {\r\n        const params = new HttpParams().set('answerPostIds', answerPostIds.join(','));\r\n        return this.http\r\n            .get<AnswerPost[]>(`api/communication/courses/${courseId}/answer-messages-source-posts`, { params, observe: 'response' })\r\n            .pipe(map((response) => response.body!));\r\n    }\r\n\r\n    private getResourceEndpoint(courseId: number, param: AnswerPost): string {\r\n        if (param.post?.conversation) {\r\n            return `api/communication/courses/${courseId}/answer-messages`;\r\n        } else {\r\n            return `api/plagiarism/courses/${courseId}/answer-posts`;\r\n        }\r\n    }\r\n}\r\n", "import { Post } from 'app/entities/metis/post.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\n\r\nexport class AnswerPost extends Posting {\r\n    public resolvesPost?: boolean;\r\n    public post?: Post;\r\n    public forwardedPosts?: Post[] = [];\r\n    public forwardedAnswerPosts?: AnswerPost[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n        this.resolvesPost = false; // default value\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Reaction } from 'app/entities/metis/reaction.model';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\ntype EntityResponseType = HttpResponse<Reaction>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReactionService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/communication/courses/';\r\n\r\n    /**\r\n     * creates a reaction\r\n     * @param courseId\r\n     * @param reaction\r\n     * @return the create reaction\r\n     */\r\n    create(courseId: number, reaction: Reaction): Observable<EntityResponseType> {\r\n        return this.http\r\n            .post<Reaction>(`${this.resourceUrl}${courseId}/postings/reactions`, reaction, { observe: 'response' })\r\n            .pipe(map(this.convertPostingResponseDateFromServer));\r\n    }\r\n\r\n    /**\r\n     * deletes a reaction\r\n     * @param {number} courseId\r\n     * @param {Reaction} reaction\r\n     * @return {Observable<HttpResponse<void>>}\r\n     */\r\n    delete(courseId: number, reaction: Reaction): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}${courseId}/postings/reactions/${reaction.id}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * takes a posting and converts the date from the server\r\n     * @param   {HttpResponse<Reaction>} res\r\n     * @return  {HttpResponse<Reaction>}\r\n     */\r\n    private convertPostingResponseDateFromServer(res: HttpResponse<Reaction>): HttpResponse<Reaction> {\r\n        if (res.body) {\r\n            res.body.creationDate = convertDateFromServer(res.body.creationDate);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n", "import { Conversation, ConversationDTO, ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\n\r\nexport class GroupChat extends Conversation {\r\n    public name?: string; // max 20 characters\r\n\r\n    constructor() {\r\n        super(ConversationType.GROUP_CHAT);\r\n    }\r\n}\r\nexport class GroupChatDTO extends ConversationDTO {\r\n    public members?: ConversationUserDTO[];\r\n    public name?: string;\r\n\r\n    constructor() {\r\n        super(ConversationType.GROUP_CHAT);\r\n    }\r\n}\r\nexport function isGroupChatDTO(conversation: ConversationDTO): conversation is GroupChatDTO {\r\n    return conversation.type === ConversationType.GROUP_CHAT;\r\n}\r\n\r\nexport function getAsGroupChatDTO(conversation: ConversationDTO | undefined): GroupChatDTO | undefined {\r\n    if (!conversation) {\r\n        return undefined;\r\n    }\r\n    return isGroupChatDTO(conversation) ? conversation : undefined;\r\n}\r\n", "import { Conversation, ConversationDTO, ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\n\r\nexport class OneToOneChat extends Conversation {\r\n    constructor() {\r\n        super(ConversationType.ONE_TO_ONE);\r\n    }\r\n}\r\nexport class OneToOneChatDTO extends ConversationDTO {\r\n    constructor() {\r\n        super(ConversationType.ONE_TO_ONE);\r\n    }\r\n    public members?: ConversationUserDTO[];\r\n}\r\nexport function isOneToOneChatDTO(conversation: ConversationDTO): conversation is OneToOneChatDTO {\r\n    return conversation.type === ConversationType.ONE_TO_ONE;\r\n}\r\n\r\nexport function getAsOneToOneChatDTO(conversation: ConversationDTO | undefined): OneToOneChatDTO | undefined {\r\n    if (!conversation) {\r\n        return undefined;\r\n    }\r\n    return isOneToOneChatDTO(conversation) ? conversation : undefined;\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\nimport { isOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { getUserLabel } from 'app/overview/course-conversations/other/conversation.util';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\ntype EntityArrayResponseType = HttpResponse<ConversationDTO[]>;\r\n\r\nexport type UserSortDirection = 'asc' | 'desc';\r\nexport type UserSortProperty = keyof User;\r\nexport type UserSortingParameter = {\r\n    sortProperty: UserSortProperty;\r\n    sortDirection: UserSortDirection;\r\n};\r\n\r\nexport enum ConversationMemberSearchFilter {\r\n    ALL,\r\n    INSTRUCTOR,\r\n    EDITOR,\r\n    TUTOR,\r\n    STUDENT,\r\n    CHANNEL_MODERATOR, // this is a special role that is only used for channels\r\n}\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConversationService {\r\n    public resourceUrl = '/api/communication/courses/';\r\n\r\n    private http = inject(HttpClient);\r\n    private translationService = inject(TranslateService);\r\n\r\n    getConversationName(conversation: ConversationDTO | undefined, showLogin = false): string {\r\n        if (!conversation) {\r\n            return '';\r\n        }\r\n        if (isChannelDTO(conversation)) {\r\n            let channelName = conversation.name ?? '';\r\n            if (conversation.isArchived) {\r\n                channelName += ' (' + this.translationService.instant('artemisApp.conversationsLayout.archived') + ')';\r\n            }\r\n            return channelName;\r\n        } else if (isOneToOneChatDTO(conversation)) {\r\n            const otherUser = conversation.members?.find((user) => user.isRequestingUser === false);\r\n            return otherUser ? getUserLabel(otherUser, showLogin) : '';\r\n        } else if (isGroupChatDTO(conversation)) {\r\n            if (conversation.name && conversation.name.length > 0) {\r\n                return conversation.name;\r\n            }\r\n            // fallback to the list of members if no name is set\r\n            const members = conversation.members ?? [];\r\n            const containsCurrentUser = members.some((member) => member.isRequestingUser);\r\n            const membersWithoutUser = members.filter((member) => member.isRequestingUser === false);\r\n            if (membersWithoutUser.length === 0) {\r\n                return containsCurrentUser ? this.translationService.instant('artemisApp.conversationsLayout.onlyYou') : '';\r\n            } else if (membersWithoutUser.length === 1) {\r\n                return getUserLabel(membersWithoutUser[0], showLogin);\r\n            } else if (membersWithoutUser.length === 2) {\r\n                return `${getUserLabel(membersWithoutUser[0], false)}, ${getUserLabel(membersWithoutUser[1], false)}`;\r\n            } else {\r\n                return (\r\n                    `${getUserLabel(membersWithoutUser[0], false)}, ${getUserLabel(membersWithoutUser[1], false)}, ` +\r\n                    this.translationService.instant('artemisApp.conversationsLayout.others', { count: membersWithoutUser.length - 2 })\r\n                );\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    searchMembersOfConversation(\r\n        courseId: number,\r\n        conversationId: number,\r\n        loginOrName: string,\r\n        page: number,\r\n        size: number,\r\n        filter: ConversationMemberSearchFilter,\r\n    ): Observable<HttpResponse<ConversationUserDTO[]>> {\r\n        const sortingParameters: UserSortingParameter[] = [\r\n            { sortProperty: 'firstName', sortDirection: 'asc' },\r\n            { sortProperty: 'lastName', sortDirection: 'asc' },\r\n        ];\r\n        const params = this.creatSearchPagingParams(sortingParameters, page, size, loginOrName, filter);\r\n        return this.http.get<ConversationUserDTO[]>(`${this.resourceUrl}${courseId}/conversations/${conversationId}/members/search`, {\r\n            observe: 'response',\r\n            params,\r\n        });\r\n    }\r\n\r\n    getConversationsOfUser(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<ConversationDTO[]>(`${this.resourceUrl}${courseId}/conversations`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map(this.convertDateArrayFromServer));\r\n    }\r\n\r\n    updateIsFavorite(courseId: number, conversationId: number, isFavorite: boolean): Observable<HttpResponse<void>> {\r\n        let params = new HttpParams();\r\n        params = params.append('isFavorite', isFavorite.toString());\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/conversations/${conversationId}/favorite`, null, { observe: 'response', params });\r\n    }\r\n\r\n    updateIsHidden(courseId: number, conversationId: number, isHidden: boolean): Observable<HttpResponse<void>> {\r\n        let params = new HttpParams();\r\n        params = params.append('isHidden', isHidden.toString());\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/conversations/${conversationId}/hidden`, null, { observe: 'response', params });\r\n    }\r\n\r\n    updateIsMuted(courseId: number, conversationId: number, isMuted: boolean): Observable<HttpResponse<void>> {\r\n        let params = new HttpParams();\r\n        params = params.append('isMuted', isMuted.toString());\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/conversations/${conversationId}/muted`, null, { observe: 'response', params });\r\n    }\r\n\r\n    markAsRead(courseId: number, conversationId: number): Observable<HttpResponse<void>> {\r\n        return this.http.patch<void>(`${this.resourceUrl}${courseId}/conversations/${conversationId}/mark-as-read`, null, { observe: 'response' });\r\n    }\r\n\r\n    checkForUnreadMessages(courseId: number): Observable<HttpResponse<boolean>> {\r\n        return this.http.get<boolean>(`${this.resourceUrl}${courseId}/unread-messages`, { observe: 'response' });\r\n    }\r\n\r\n    acceptCodeOfConduct(courseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.patch<void>(`${this.resourceUrl}${courseId}/code-of-conduct/agreement`, null, { observe: 'response' });\r\n    }\r\n\r\n    checkIsCodeOfConductAccepted(courseId: number): Observable<HttpResponse<boolean>> {\r\n        return this.http.get<boolean>(`${this.resourceUrl}${courseId}/code-of-conduct/agreement`, { observe: 'response' });\r\n    }\r\n\r\n    getResponsibleUsersForCodeOfConduct(courseId: number): Observable<HttpResponse<User[]>> {\r\n        return this.http.get<User[]>(`${this.resourceUrl}${courseId}/code-of-conduct/responsible-users`, { observe: 'response' });\r\n    }\r\n\r\n    public convertDateFromServer = (res: HttpResponse<ConversationDTO>): HttpResponse<ConversationDTO> => {\r\n        if (res.body) {\r\n            this.convertServerDates(res.body);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    public convertServerDates(conversation: ConversationDTO) {\r\n        conversation.creationDate = convertDateFromServer(conversation.creationDate);\r\n        conversation.lastMessageDate = convertDateFromServer(conversation.lastMessageDate);\r\n        conversation.lastReadDate = convertDateFromServer(conversation.lastReadDate);\r\n        return conversation;\r\n    }\r\n\r\n    public convertDateArrayFromServer = (res: HttpResponse<ConversationDTO[]>): HttpResponse<ConversationDTO[]> => {\r\n        if (res.body) {\r\n            res.body.forEach((conversation) => {\r\n                this.convertServerDates(conversation);\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n\r\n    private creatSearchPagingParams = (sortingParameters: UserSortingParameter[], page: number, size: number, loginOrName: string, filter: ConversationMemberSearchFilter) => {\r\n        let params = new HttpParams();\r\n        if (`${filter}` !== `${ConversationMemberSearchFilter.ALL}`) {\r\n            params = params.set('filter', ConversationMemberSearchFilter[filter]);\r\n        }\r\n        params = params.set('loginOrName', loginOrName);\r\n        for (const sortParameter of sortingParameters) {\r\n            params = params.append('sort', `${sortParameter.sortProperty},${sortParameter.sortDirection}`);\r\n        }\r\n        params = params.set('page', String(page));\r\n        return params.set('size', String(size));\r\n    };\r\n\r\n    markAllChannelsAsRead(courseId: number) {\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/mark-as-read`, { observe: 'response' });\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { OneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OneToOneChatService {\r\n    public resourceUrl = '/api/communication/courses/';\r\n\r\n    private http = inject(HttpClient);\r\n    private conversationService = inject(ConversationService);\r\n\r\n    create(courseId: number, loginOfChatPartner: string): Observable<HttpResponse<OneToOneChatDTO>> {\r\n        return this.http\r\n            .post<OneToOneChatDTO>(`${this.resourceUrl}${courseId}/one-to-one-chats`, [loginOfChatPartner], { observe: 'response' })\r\n            .pipe(map(this.conversationService.convertDateFromServer));\r\n    }\r\n\r\n    createWithId(courseId: number, userIdOfChatPartner: number) {\r\n        return this.http\r\n            .post<OneToOneChatDTO>(`${this.resourceUrl}${courseId}/one-to-one-chats/${userIdOfChatPartner}`, null, { observe: 'response' })\r\n            .pipe(map(this.conversationService.convertDateFromServer));\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ChannelDTO, ChannelIdAndNameDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChannelService {\r\n    public resourceUrl = '/api/communication/courses/';\r\n\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n\r\n    getChannelsOfCourse(courseId: number): Observable<HttpResponse<ChannelDTO[]>> {\r\n        return this.http.get<ChannelDTO[]>(`${this.resourceUrl}${courseId}/channels/overview`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getPublicChannelsOfCourse(courseId: number): Observable<HttpResponse<ChannelIdAndNameDTO[]>> {\r\n        return this.http.get<ChannelIdAndNameDTO[]>(`${this.resourceUrl}${courseId}/channels/public-overview`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getChannelOfExercise(courseId: number, exerciseId: number): Observable<HttpResponse<ChannelDTO>> {\r\n        return this.http.get<ChannelDTO>(`${this.resourceUrl}${courseId}/exercises/${exerciseId}/channel`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getChannelOfLecture(courseId: number, lectureId: number): Observable<HttpResponse<ChannelDTO>> {\r\n        return this.http.get<ChannelDTO>(`${this.resourceUrl}${courseId}/lectures/${lectureId}/channel`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    delete(courseId: number, channelId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}${courseId}/channels/${channelId}`, { observe: 'response' });\r\n    }\r\n\r\n    archive(courseId: number, channelId: number): Observable<HttpResponse<void>> {\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/${channelId}/archive`, null, { observe: 'response' });\r\n    }\r\n\r\n    unarchive(courseId: number, channelId: number): Observable<HttpResponse<void>> {\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/${channelId}/unarchive`, null, { observe: 'response' });\r\n    }\r\n\r\n    create(courseId: number, channelDTO: ChannelDTO): Observable<HttpResponse<ChannelDTO>> {\r\n        return this.http.post<ChannelDTO>(`${this.resourceUrl}${courseId}/channels`, channelDTO, { observe: 'response' }).pipe(map(this.convertDateFromServer));\r\n    }\r\n\r\n    update(courseId: number, channelId: number, channelDTO: ChannelDTO): Observable<HttpResponse<ChannelDTO>> {\r\n        return this.http.put<ChannelDTO>(`${this.resourceUrl}${courseId}/channels/${channelId}`, channelDTO, { observe: 'response' }).pipe(map(this.convertDateFromServer));\r\n    }\r\n    deregisterUsersFromChannel(courseId: number, channelId: number, logins?: string[]): Observable<HttpResponse<void>> {\r\n        // if no explicit login is give we assume self deregistration\r\n        const userLogins = logins ? logins : [this.accountService.userIdentity?.login];\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/${channelId}/deregister`, userLogins, { observe: 'response' });\r\n    }\r\n\r\n    registerUsersToChannel(\r\n        courseId: number,\r\n        channelId: number,\r\n        addAllStudents = false,\r\n        addAllTutors = false,\r\n        addAllInstructors = false,\r\n        logins?: string[],\r\n    ): Observable<HttpResponse<void>> {\r\n        // if no explicit login is give we assume self registration (will be ignored on the server if any of the addAll booleans is true)\r\n        const userLogins = logins ? logins : [this.accountService.userIdentity?.login];\r\n\r\n        let params = new HttpParams();\r\n        if (addAllStudents) {\r\n            params = params.set('addAllStudents', 'true');\r\n        }\r\n        if (addAllTutors) {\r\n            params = params.set('addAllTutors', 'true');\r\n        }\r\n        if (addAllInstructors) {\r\n            params = params.set('addAllInstructors', 'true');\r\n        }\r\n\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/${channelId}/register`, userLogins, { observe: 'response', params });\r\n    }\r\n\r\n    grantChannelModeratorRole(courseId: number, channelId: number, logins?: string[]): Observable<HttpResponse<void>> {\r\n        // if no explicit login is give we assume trying to grant channel moderator role to self\r\n        const userLogins = logins ? logins : [this.accountService.userIdentity?.login];\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/${channelId}/grant-channel-moderator`, userLogins, { observe: 'response' });\r\n    }\r\n\r\n    revokeChannelModeratorRole(courseId: number, channelId: number, logins?: string[]): Observable<HttpResponse<void>> {\r\n        // if no explicit login is give we assume trying to revoke channel moderator role from self\r\n        const userLogins = logins ? logins : [this.accountService.userIdentity?.login];\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/channels/${channelId}/revoke-channel-moderator`, userLogins, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Toggles the privacy status of a channel (if public, it becomes private; if private, it becomes public).\r\n     *\r\n     * @param courseId The ID of the course the channel belongs to.\r\n     * @param channelId The ID of the channel whose privacy status will be changed.\r\n     */\r\n    toggleChannelPrivacy(courseId: number, channelId: number): Observable<HttpResponse<ChannelDTO>> {\r\n        return this.http\r\n            .post<ChannelDTO>(`${this.resourceUrl}${courseId}/channels/${channelId}/toggle-privacy`, null, { observe: 'response' })\r\n            .pipe(map(this.convertDateFromServer));\r\n    }\r\n\r\n    public convertDateFromServer = (res: HttpResponse<ChannelDTO>): HttpResponse<ChannelDTO> => {\r\n        if (res.body) {\r\n            this.convertServerDates(res.body);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    public convertServerDates(conversation: ChannelDTO) {\r\n        conversation.creationDate = convertDateFromServer(conversation.creationDate);\r\n        conversation.lastMessageDate = convertDateFromServer(conversation.lastMessageDate);\r\n        conversation.lastReadDate = convertDateFromServer(conversation.lastReadDate);\r\n        return conversation;\r\n    }\r\n}\r\n", "import { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { OneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { GroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { Observable, map } from 'rxjs';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GroupChatService {\r\n    public resourceUrl = 'api/communication/courses/';\r\n\r\n    private http = inject(HttpClient);\r\n    private conversationService = inject(ConversationService);\r\n    private accountService = inject(AccountService);\r\n\r\n    create(courseId: number, loginsOfChatPartners: string[]): Observable<HttpResponse<GroupChatDTO>> {\r\n        return this.http\r\n            .post<OneToOneChatDTO>(`${this.resourceUrl}${courseId}/group-chats`, loginsOfChatPartners, { observe: 'response' })\r\n            .pipe(map(this.conversationService.convertDateFromServer));\r\n    }\r\n\r\n    update(courseId: number, groupChatId: number, groupChatDTO: GroupChatDTO): Observable<HttpResponse<GroupChatDTO>> {\r\n        return this.http\r\n            .put<GroupChatDTO>(`${this.resourceUrl}${courseId}/group-chats/${groupChatId}`, groupChatDTO, { observe: 'response' })\r\n            .pipe(map(this.conversationService.convertDateFromServer));\r\n    }\r\n\r\n    removeUsersFromGroupChat(courseId: number, groupChatId: number, logins?: string[]): Observable<HttpResponse<void>> {\r\n        // if no explicit login is give we assume self deregistration\r\n        const userLogins = logins ? logins : [this.accountService.userIdentity?.login];\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/group-chats/${groupChatId}/deregister`, userLogins, { observe: 'response' });\r\n    }\r\n\r\n    addUsersToGroupChat(courseId: number, groupChatId: number, logins: string[]): Observable<HttpResponse<void>> {\r\n        // you can not add yourself to a group chat, therefore logins must contain at least one user\r\n        return this.http.post<void>(`${this.resourceUrl}${courseId}/group-chats/${groupChatId}/register`, logins, { observe: 'response' });\r\n    }\r\n}\r\n", "import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { EMPTY, Observable, ReplaySubject, Subject, Subscription, catchError, finalize, map, of, switchMap, tap } from 'rxjs';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ConversationWebsocketDTO } from 'app/entities/metis/conversation/conversation-websocket-dto.model';\r\nimport { MetisPostAction, MetisWebsocketChannelPrefix, RouteComponents } from 'app/shared/metis/metis.util';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { AlertService, AlertType } from 'app/core/util/alert.service';\r\nimport { OneToOneChatService } from 'app/shared/metis/conversations/one-to-one-chat.service';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { OneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { GroupChatService } from 'app/shared/metis/conversations/group-chat.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { NavigationEnd, Params, Router } from '@angular/router';\r\nimport { MetisPostDTO } from 'app/entities/metis/metis-post-dto.model';\r\nimport { NotificationService } from 'app/shared/notification/notification.service';\r\n\r\n/**\r\n * NOTE: NOT INJECTED IN THE ROOT MODULE\r\n */\r\n@Injectable()\r\nexport class MetisConversationService implements OnDestroy {\r\n    private groupChatService = inject(GroupChatService);\r\n    private oneToOneChatService = inject(OneToOneChatService);\r\n    private channelService = inject(ChannelService);\r\n    private conversationService = inject(ConversationService);\r\n    private websocketService = inject(WebsocketService);\r\n    private accountService = inject(AccountService);\r\n    private alertService = inject(AlertService);\r\n    private router = inject(Router);\r\n    private notificationService = inject(NotificationService);\r\n\r\n    // Stores the conversation of the course where the current user is a member\r\n    private conversationsOfUser: ConversationDTO[] = [];\r\n    _conversationsOfUser$: ReplaySubject<ConversationDTO[]> = new ReplaySubject<ConversationDTO[]>(1);\r\n    // Stores the currently selected conversation\r\n    private activeConversation: ConversationDTO | undefined = undefined;\r\n    _activeConversation$: ReplaySubject<ConversationDTO | undefined> = new ReplaySubject<ConversationDTO | undefined>(1);\r\n    private isCodeOfConductAccepted = false;\r\n    _isCodeOfConductAccepted$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n    private isCodeOfConductPresented = false;\r\n    _isCodeOfConductPresented$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n    private hasUnreadMessages = false;\r\n    _hasUnreadMessages$: Subject<boolean> = new ReplaySubject<boolean>(1);\r\n    // Stores the course for which the service is set up -> should not change during the lifetime of the service\r\n    private _course: Course | undefined = undefined;\r\n    // Stores if the service is currently loading data\r\n    private isLoading = false;\r\n    _isLoading$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n    private subscribedConversationMembershipTopic?: string;\r\n    private activeConversationSubscription?: Subscription;\r\n\r\n    private userId: number;\r\n    private _courseId: number;\r\n\r\n    private _isServiceSetup$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n    constructor() {\r\n        this.accountService.identity().then((user: User) => {\r\n            this.userId = user.id!;\r\n        });\r\n\r\n        this.activeConversationSubscription = this.notificationService.newOrUpdatedMessage.subscribe((postDTO: MetisPostDTO) => {\r\n            if (postDTO.action === MetisPostAction.CREATE && postDTO.post.author?.id !== this.userId) {\r\n                this.handleNewMessage(postDTO.post.conversation?.id, postDTO.post.conversation?.lastMessageDate);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.subscribedConversationMembershipTopic) {\r\n            this.websocketService.unsubscribe(this.subscribedConversationMembershipTopic);\r\n            this.subscribedConversationMembershipTopic = undefined;\r\n        }\r\n\r\n        if (this.activeConversationSubscription) {\r\n            this.activeConversationSubscription.unsubscribe();\r\n            this.activeConversationSubscription = undefined;\r\n        }\r\n    }\r\n\r\n    get conversationsOfUser$(): Observable<ConversationDTO[]> {\r\n        return this._conversationsOfUser$.asObservable();\r\n    }\r\n    get activeConversation$(): Observable<ConversationDTO | undefined> {\r\n        return this._activeConversation$.asObservable();\r\n    }\r\n    get isCodeOfConductAccepted$(): Observable<boolean> {\r\n        return this._isCodeOfConductAccepted$.asObservable();\r\n    }\r\n    get isCodeOfConductPresented$(): Observable<boolean> {\r\n        return this._isCodeOfConductPresented$.asObservable();\r\n    }\r\n    get hasUnreadMessages$(): Observable<boolean> {\r\n        return this._hasUnreadMessages$.asObservable();\r\n    }\r\n\r\n    get isServiceSetup$(): Observable<boolean> {\r\n        return this._isServiceSetup$.asObservable();\r\n    }\r\n\r\n    get course(): Course | undefined {\r\n        return this._course;\r\n    }\r\n\r\n    get isLoading$(): Observable<boolean> {\r\n        return this._isLoading$.asObservable();\r\n    }\r\n\r\n    public setActiveConversation(conversationIdentifier: ConversationDTO | number | undefined) {\r\n        this.updateLastReadDateAndNumberOfUnreadMessages();\r\n        let cachedConversation: ConversationDTO | undefined = undefined;\r\n        if (conversationIdentifier) {\r\n            const parameterJustId = typeof conversationIdentifier === 'number';\r\n            cachedConversation = this.conversationsOfUser.find(\r\n                (conversationInCache) => conversationInCache.id === (parameterJustId ? conversationIdentifier : conversationIdentifier.id),\r\n            );\r\n        }\r\n        if (!cachedConversation && conversationIdentifier) {\r\n            this.alertService.addAlert({\r\n                type: AlertType.WARNING,\r\n                message: 'artemisApp.metis.channel.notAMember',\r\n            });\r\n        }\r\n        this.activeConversation = cachedConversation;\r\n        this._activeConversation$.next(this.activeConversation);\r\n        this.isCodeOfConductPresented = false;\r\n        this._isCodeOfConductPresented$.next(this.isCodeOfConductPresented);\r\n    }\r\n\r\n    /**\r\n     * Set the course conversation component to the contents of the code of conduct.\r\n     */\r\n    public setCodeOfConduct() {\r\n        this.activeConversation = undefined;\r\n        this._activeConversation$.next(this.activeConversation);\r\n        this.isCodeOfConductPresented = true;\r\n        this._isCodeOfConductPresented$.next(this.isCodeOfConductPresented);\r\n    }\r\n\r\n    public markAsRead(conversationId: number) {\r\n        const indexOfCachedConversation = this.conversationsOfUser.findIndex((cachedConversation) => cachedConversation.id === conversationId);\r\n        if (indexOfCachedConversation !== -1) {\r\n            this.conversationsOfUser[indexOfCachedConversation].lastMessageDate = dayjs();\r\n            this.conversationsOfUser[indexOfCachedConversation].unreadMessagesCount = 0;\r\n        }\r\n        this.hasUnreadMessagesCheck();\r\n    }\r\n\r\n    private updateLastReadDateAndNumberOfUnreadMessages() {\r\n        // update last read date and number of unread messages of the conversation that is currently active before switching to another conversation\r\n        if (this.activeConversation) {\r\n            this.activeConversation.lastReadDate = dayjs();\r\n            this.activeConversation.unreadMessagesCount = 0;\r\n            this.activeConversation.hasUnreadMessage = false;\r\n        }\r\n    }\r\n\r\n    public forceRefresh(notifyActiveConversationSubscribers = true, notifyConversationsSubscribers = true): Observable<never> {\r\n        if (!this._course) {\r\n            throw new Error('Course is not set. The service does not seem to be initialized.');\r\n        }\r\n        this.setIsLoading(true);\r\n        return this.conversationService.getConversationsOfUser(this._courseId).pipe(\r\n            map((conversations: HttpResponse<ConversationDTO[]>) => {\r\n                return conversations.body ?? [];\r\n            }),\r\n            catchError((res: HttpErrorResponse) => {\r\n                onError(this.alertService, res);\r\n                this.setIsLoading(false);\r\n                return of([]);\r\n            }),\r\n            map((conversations: ConversationDTO[]) => {\r\n                this.conversationsOfUser = conversations;\r\n                this.hasUnreadMessagesCheck();\r\n                this._conversationsOfUser$.next(this.conversationsOfUser);\r\n\r\n                // we check if the active conversation still is part of the conversations of the user, otherwise we reset it\r\n                if (this.activeConversation) {\r\n                    const cachedActiveConversation = this.conversationsOfUser.find((conversationInCache) => conversationInCache.id === this.activeConversation?.id);\r\n                    if (!cachedActiveConversation) {\r\n                        this.activeConversation = undefined;\r\n                    } else {\r\n                        this.activeConversation = cachedActiveConversation;\r\n                    }\r\n                }\r\n                if (notifyConversationsSubscribers) {\r\n                    this._conversationsOfUser$.next(this.conversationsOfUser);\r\n                }\r\n                if (notifyActiveConversationSubscribers) {\r\n                    this._activeConversation$.next(this.activeConversation);\r\n                }\r\n                this.setIsLoading(false);\r\n                return;\r\n            }),\r\n            finalize(() => {\r\n                this.setIsLoading(false);\r\n            }),\r\n            // refresh complete\r\n            switchMap(() => EMPTY),\r\n        );\r\n    }\r\n\r\n    public createOneToOneChat = (loginOfChatPartner: string): Observable<HttpResponse<OneToOneChatDTO>> =>\r\n        this.onConversationCreation(this.oneToOneChatService.create(this._courseId, loginOfChatPartner));\r\n    public createOneToOneChatWithId = (userId: number): Observable<HttpResponse<OneToOneChatDTO>> =>\r\n        this.onConversationCreation(this.oneToOneChatService.createWithId(this._courseId, userId));\r\n    public createChannel = (channel: ChannelDTO) => this.onConversationCreation(this.channelService.create(this._courseId, channel));\r\n    public createGroupChat = (loginsOfChatPartners: string[]) => this.onConversationCreation(this.groupChatService.create(this._courseId, loginsOfChatPartners));\r\n    private onConversationCreation = (creation$: Observable<HttpResponse<ConversationDTO>>): Observable<never> => {\r\n        return creation$.pipe(\r\n            tap((conversation: HttpResponse<ConversationDTO>) => {\r\n                this.activeConversation = conversation.body!;\r\n            }),\r\n            catchError((res: HttpErrorResponse) => {\r\n                if (!res.error?.skipAlert) {\r\n                    return of(null);\r\n                }\r\n\r\n                onError(this.alertService, res);\r\n                if (res.error && res.error.title) {\r\n                    this.alertService.addErrorAlert(res.error.title, res.error.message, res.error.params);\r\n                } else {\r\n                    onError(this.alertService, res);\r\n                }\r\n                this.setIsLoading(false);\r\n                return of(null);\r\n            }),\r\n            switchMap(() => {\r\n                return this.forceRefresh();\r\n            }),\r\n        );\r\n    };\r\n\r\n    public createGroupConversation(loginsOfChatPartners: string[]): Observable<HttpResponse<ConversationDTO>> {\r\n        return this.groupChatService.create(this._courseId, loginsOfChatPartners);\r\n    }\r\n\r\n    public createDirectConversation(loginsOfChatPartners: string): Observable<HttpResponse<ConversationDTO>> {\r\n        return this.oneToOneChatService.create(this._courseId, loginsOfChatPartners);\r\n    }\r\n\r\n    public setUpConversationService = (course: Course): Observable<never> => {\r\n        this._courseId = course.id!;\r\n        this._course = course;\r\n        return this.conversationService.getConversationsOfUser(this._courseId).pipe(\r\n            map((conversations: HttpResponse<ConversationDTO[]>) => {\r\n                return conversations.body ?? [];\r\n            }),\r\n            catchError((res: HttpErrorResponse) => {\r\n                onError(this.alertService, res);\r\n                this.setIsLoading(false);\r\n                this._isServiceSetup$.next(false);\r\n                return of([]);\r\n            }),\r\n            map((conversations: ConversationDTO[]) => {\r\n                this.conversationsOfUser = conversations;\r\n                this.hasUnreadMessagesCheck();\r\n                this._conversationsOfUser$.next(this.conversationsOfUser);\r\n                this.activeConversation = undefined;\r\n                this._activeConversation$.next(this.activeConversation);\r\n                this.subscribeToConversationMembershipTopic(course.id!, this.userId);\r\n                this.subscribeToRouteChange();\r\n                this.setIsLoading(false);\r\n                this._isServiceSetup$.next(true);\r\n                return;\r\n            }),\r\n            finalize(() => {\r\n                this.setIsLoading(false);\r\n            }),\r\n            // service is ready to use and cached values can be received via the respective replay subjects\r\n            switchMap(() => EMPTY),\r\n        );\r\n    };\r\n\r\n    checkForUnreadMessages = (course: Course) => {\r\n        if (!course?.id) {\r\n            return;\r\n        }\r\n\r\n        this.conversationService.checkForUnreadMessages(course.id).subscribe({\r\n            next: (hasNewMessages) => {\r\n                if (hasNewMessages?.body !== this.hasUnreadMessages) {\r\n                    this.hasUnreadMessages = hasNewMessages?.body ?? false;\r\n                    this._hasUnreadMessages$.next(this.hasUnreadMessages);\r\n                }\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => {\r\n                onError(this.alertService, errorResponse);\r\n            },\r\n        });\r\n    };\r\n\r\n    acceptCodeOfConduct(course: Course) {\r\n        if (!course?.id) {\r\n            return;\r\n        }\r\n\r\n        this.conversationService.acceptCodeOfConduct(course.id).subscribe({\r\n            next: () => {\r\n                this.isCodeOfConductAccepted = true;\r\n                this._isCodeOfConductAccepted$.next(true);\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => {\r\n                onError(this.alertService, errorResponse);\r\n            },\r\n        });\r\n    }\r\n\r\n    checkIsCodeOfConductAccepted(course: Course) {\r\n        if (!course?.id) {\r\n            return;\r\n        }\r\n\r\n        this.conversationService.checkIsCodeOfConductAccepted(course.id).subscribe({\r\n            next: (response) => {\r\n                if (response.body !== null) {\r\n                    this.isCodeOfConductAccepted = response.body;\r\n                    this._isCodeOfConductAccepted$.next(this.isCodeOfConductAccepted);\r\n                }\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => {\r\n                onError(this.alertService, errorResponse);\r\n            },\r\n        });\r\n    }\r\n\r\n    private hasUnreadMessagesCheck = (): void => {\r\n        const hasNewMessages = this.conversationsOfUser.some((conversation) => {\r\n            return conversation?.unreadMessagesCount && conversation.unreadMessagesCount > 0;\r\n        });\r\n        if (hasNewMessages !== this.hasUnreadMessages) {\r\n            this.hasUnreadMessages = hasNewMessages;\r\n            this._hasUnreadMessages$.next(this.hasUnreadMessages);\r\n        }\r\n        if (hasNewMessages) {\r\n            this.updateUnread();\r\n        }\r\n    };\r\n\r\n    private updateUnread() {\r\n        this.conversationsOfUser.forEach((conversation) => (conversation.hasUnreadMessage = !!conversation.unreadMessagesCount && conversation.unreadMessagesCount > 0));\r\n    }\r\n\r\n    private setIsLoading(value: boolean) {\r\n        this.isLoading = value;\r\n        this._isLoading$.next(this.isLoading);\r\n    }\r\n\r\n    /**\r\n     * Via this Topic, users are informed about changes to which conversations they are a part of\r\n     *\r\n     * Users will be notified via this topic about the following events:\r\n     * - OneToOneChats: When the creator of the one to one chat starts the conversation by sending the first message\r\n     * - Channels/GroupChats: When the user is added to the channel or group chat (channel or group chat shows up when user is added)\r\n     */\r\n    private getConversationMembershipTopic(courseId: number, userId: number) {\r\n        const courseTopicName = '/user' + MetisWebsocketChannelPrefix + 'courses/' + courseId;\r\n        return courseTopicName + '/conversations/user/' + userId;\r\n    }\r\n\r\n    private subscribeToRouteChange() {\r\n        this.router.events.subscribe((event) => {\r\n            if (event instanceof NavigationEnd) {\r\n                // update last read date and number of unread messages of the conversation that is currently active before switching to another conversation\r\n                if (this.activeConversation) {\r\n                    this.activeConversation.lastReadDate = dayjs();\r\n                    this.activeConversation.unreadMessagesCount = 0;\r\n                    this.hasUnreadMessagesCheck();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private subscribeToConversationMembershipTopic(courseId: number, userId: number) {\r\n        // already subscribed to the topic -> nothing to do\r\n        if (this.subscribedConversationMembershipTopic) {\r\n            return;\r\n        }\r\n\r\n        const conversationMembershipTopic = this.getConversationMembershipTopic(courseId, userId);\r\n        this.websocketService.subscribe(conversationMembershipTopic);\r\n        this.subscribedConversationMembershipTopic = conversationMembershipTopic;\r\n\r\n        this.websocketService.receive(conversationMembershipTopic).subscribe((websocketDTO: ConversationWebsocketDTO) => {\r\n            this.onConversationMembershipMessageReceived(websocketDTO);\r\n        });\r\n    }\r\n\r\n    private onConversationMembershipMessageReceived(websocketDTO: ConversationWebsocketDTO) {\r\n        const conversationDTO = this.conversationService.convertServerDates(websocketDTO.conversation);\r\n        const action = websocketDTO.action;\r\n\r\n        switch (action) {\r\n            case MetisPostAction.CREATE:\r\n                this.handleCreateConversation(conversationDTO);\r\n                break;\r\n            case MetisPostAction.UPDATE:\r\n                this.handleUpdateConversation(conversationDTO);\r\n                break;\r\n            case MetisPostAction.DELETE:\r\n                this.handleDeleteConversation(conversationDTO);\r\n                break;\r\n            case MetisPostAction.NEW_MESSAGE:\r\n                this.handleNewMessage(conversationDTO.id, conversationDTO.lastMessageDate);\r\n                break;\r\n        }\r\n        this._conversationsOfUser$.next(this.conversationsOfUser);\r\n    }\r\n\r\n    private handleCreateConversation(createdConversation: ConversationDTO) {\r\n        this.handleUpdateOrCreate(createdConversation);\r\n    }\r\n\r\n    private handleUpdateConversation(updatedConversation: ConversationDTO) {\r\n        this.handleUpdateOrCreate(updatedConversation);\r\n    }\r\n\r\n    private handleUpdateOrCreate(updatedOrNewConversation: ConversationDTO) {\r\n        const conversationsCopy = [...this.conversationsOfUser];\r\n        const indexOfCachedConversation = conversationsCopy.findIndex((cachedConversation) => cachedConversation.id === updatedOrNewConversation.id);\r\n        if (indexOfCachedConversation === -1) {\r\n            // conversation is not yet cached -> add it\r\n            conversationsCopy.push(updatedOrNewConversation);\r\n        } else {\r\n            // conversation is already cached -> update it\r\n            conversationsCopy[indexOfCachedConversation] = updatedOrNewConversation;\r\n        }\r\n        this.conversationsOfUser = conversationsCopy;\r\n        this.hasUnreadMessagesCheck();\r\n\r\n        // Note: We do not update the active conversation here because it would cause a UI refresh for all users whenever\r\n        // for example a new users joins.\r\n        // This would disrupt the user experience, because the user might be in the middle of writing a message.\r\n        // Therefore we live with a small inconsistency until the users opens the conversation again.\r\n    }\r\n\r\n    private handleDeleteConversation(deletedConversation: ConversationDTO) {\r\n        const conversationsCopy = [...this.conversationsOfUser];\r\n        const indexOfCachedConversation = conversationsCopy.findIndex((cachedConversation) => cachedConversation.id === deletedConversation.id);\r\n        if (indexOfCachedConversation !== -1) {\r\n            // conversation is cached -> remove it\r\n            conversationsCopy.splice(indexOfCachedConversation, 1);\r\n        }\r\n        this.conversationsOfUser = conversationsCopy;\r\n\r\n        if (this.activeConversation?.id === deletedConversation.id) {\r\n            this.activeConversation = undefined;\r\n            this._activeConversation$.next(this.activeConversation);\r\n        }\r\n    }\r\n\r\n    private handleNewMessage(conversationId: number | undefined, lastMessageDate: dayjs.Dayjs | undefined) {\r\n        const conversationsCopy = [...this.conversationsOfUser];\r\n        const indexOfCachedConversation = conversationsCopy.findIndex((cachedConversation) => cachedConversation.id === conversationId);\r\n        if (indexOfCachedConversation !== -1) {\r\n            conversationsCopy[indexOfCachedConversation].lastMessageDate = lastMessageDate;\r\n            conversationsCopy[indexOfCachedConversation].hasUnreadMessage = true;\r\n            conversationsCopy[indexOfCachedConversation].unreadMessagesCount = (conversationsCopy[indexOfCachedConversation].unreadMessagesCount ?? 0) + 1;\r\n            if (!this.hasUnreadMessages) {\r\n                this.hasUnreadMessages = true;\r\n                this._hasUnreadMessages$.next(this.hasUnreadMessages);\r\n            }\r\n        }\r\n        this.conversationsOfUser = conversationsCopy;\r\n    }\r\n\r\n    static getQueryParamsForConversation(conversationId: number): Params {\r\n        const params: Params = {};\r\n        params.conversationId = conversationId;\r\n        return params;\r\n    }\r\n\r\n    static getLinkForConversation(courseId: number): RouteComponents {\r\n        return ['/courses', courseId, 'communication'];\r\n    }\r\n\r\n    markAllChannelsAsRead(course: Course | undefined) {\r\n        if (!course?.id) {\r\n            return of();\r\n        }\r\n\r\n        return this.conversationService.markAllChannelsAsRead(course.id).pipe(\r\n            catchError((errorResponse: HttpErrorResponse) => {\r\n                onError(this.alertService, errorResponse);\r\n                return of();\r\n            }),\r\n        );\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, ReplaySubject, Subject, Subscription } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { ActivatedRoute, NavigationEnd, Params, Router } from '@angular/router';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { GroupNotification, GroupNotificationType } from 'app/entities/group-notification.model';\r\nimport {\r\n    CONVERSATION_ADD_USER_CHANNEL_TITLE,\r\n    CONVERSATION_ADD_USER_GROUP_CHAT_TITLE,\r\n    CONVERSATION_CREATE_GROUP_CHAT_TITLE,\r\n    CONVERSATION_CREATE_ONE_TO_ONE_CHAT_TITLE,\r\n    CONVERSATION_REMOVE_USER_CHANNEL_TITLE,\r\n    CONVERSATION_REMOVE_USER_GROUP_CHAT_TITLE,\r\n    DATA_EXPORT_CREATED_TITLE,\r\n    DATA_EXPORT_FAILED_TITLE,\r\n    MENTIONED_IN_MESSAGE_TITLE,\r\n    MESSAGE_REPLY_IN_CHANNEL_TEXT,\r\n    MESSAGE_REPLY_IN_CONVERSATION_TEXT,\r\n    NEW_ANNOUNCEMENT_POST_TITLE,\r\n    NEW_COURSE_POST_TITLE,\r\n    NEW_EXAM_POST_TITLE,\r\n    NEW_EXERCISE_POST_TITLE,\r\n    NEW_LECTURE_POST_TITLE,\r\n    NEW_MESSAGE_CHANNEL_TEXT,\r\n    NEW_MESSAGE_DIRECT_TEXT,\r\n    NEW_MESSAGE_GROUP_CHAT_TEXT,\r\n    NEW_MESSAGE_TITLE,\r\n    NEW_REPLY_FOR_COURSE_POST_TITLE,\r\n    NEW_REPLY_FOR_EXAM_POST_TITLE,\r\n    NEW_REPLY_FOR_EXERCISE_POST_TITLE,\r\n    NEW_REPLY_FOR_LECTURE_POST_TITLE,\r\n    NEW_REPLY_MESSAGE_TITLE,\r\n    Notification,\r\n    PLAGIARISM_CASE_REPLY_TITLE,\r\n    QUIZ_EXERCISE_STARTED_TEXT,\r\n    QUIZ_EXERCISE_STARTED_TITLE,\r\n} from 'app/entities/notification.model';\r\nimport { Course, CourseInformationSharingConfiguration } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { QuizExercise, QuizMode } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { MetisPostAction, MetisWebsocketChannelPrefix, RouteComponents } from 'app/shared/metis/metis.util';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { MetisConversationService } from 'app/shared/metis/metis-conversation.service';\r\nimport { NotificationSettingsService } from 'app/shared/user-settings/notification-settings/notification-settings.service';\r\nimport { translationNotFoundMessage } from 'app/core/config/translation.config';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { MetisPostDTO } from 'app/entities/metis/metis-post-dto.model';\r\nimport { getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\n\r\nconst notificationsPerPage = 25;\r\n\r\nconst NOTIFICATION_TITLES_TO_EXCLUDE_FROM_HISTORY = [NEW_MESSAGE_TITLE, NEW_EXERCISE_POST_TITLE, NEW_LECTURE_POST_TITLE, NEW_EXAM_POST_TITLE, NEW_COURSE_POST_TITLE];\r\nconst MESSAGING_NOTIFICATION_TEXTS = [\r\n    NEW_MESSAGE_CHANNEL_TEXT,\r\n    NEW_MESSAGE_GROUP_CHAT_TEXT,\r\n    NEW_MESSAGE_DIRECT_TEXT,\r\n    MESSAGE_REPLY_IN_CONVERSATION_TEXT,\r\n    MESSAGE_REPLY_IN_CHANNEL_TEXT,\r\n];\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NotificationService {\r\n    private websocketService = inject(WebsocketService);\r\n    private router = inject(Router);\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private notificationSettingsService = inject(NotificationSettingsService);\r\n    private artemisTranslatePipe = inject(ArtemisTranslatePipe);\r\n\r\n    public resourceUrl = 'api/communication/notifications';\r\n    notificationSubject: ReplaySubject<Notification[]>;\r\n    singleNotificationSubject: Subject<Notification>;\r\n    notifications: Notification[] = [];\r\n    totalNotifications = 0;\r\n    totalNotificationsSubject: ReplaySubject<number>;\r\n    page = 0;\r\n    loadingSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n\r\n    initialized = false;\r\n    loadTimeout: ReturnType<typeof setTimeout>;\r\n    subscribedTopics: string[] = [];\r\n    wsSubscriptions: Subscription[] = [];\r\n\r\n    private subscribedCourseWideChannelTopic?: string;\r\n    private courseWideChannelSubscription?: Subscription;\r\n    private _singlePostSubject$: Subject<MetisPostDTO>;\r\n    private mutedConversations: number[] = [];\r\n    private loadedMutedConversations = false;\r\n\r\n    constructor() {\r\n        this.initNotificationObserver();\r\n\r\n        this.notificationSettingsService.getNotificationSettingsUpdates().subscribe(() => {\r\n            this.resetAndLoad();\r\n        });\r\n\r\n        this.accountService.getAuthenticationState().subscribe((user) => this.onUserIdentityChange(user));\r\n\r\n        this.router.events.pipe(filter((event) => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n            const url = event.urlAfterRedirects;\r\n            if (url.startsWith('/courses') || url.startsWith('/course-management')) {\r\n                const courseIdParam = url.split('/', 3).last();\r\n                if (!courseIdParam) {\r\n                    return;\r\n                }\r\n\r\n                const courseId = parseInt(courseIdParam);\r\n                if (!isNaN(courseId)) {\r\n                    this.subscribeToCourseWideChannelTopic(courseId);\r\n                } else {\r\n                    this.clearCourseWideChannelSubscription();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private onUserIdentityChange(user: User | undefined) {\r\n        if (user && !this.initialized) {\r\n            this.subscribeToSingleUserNotificationUpdates(user);\r\n            this.subscribeToTutorialGroupNotificationUpdates(user);\r\n            this.subscribeToConversationNotificationUpdates(user);\r\n\r\n            // Delay to prevent load if someone spam clicks the refresh button\r\n            this.loadTimeout = setTimeout(() => {\r\n                this.courseManagementService.getCoursesForNotifications().subscribe((courses) => {\r\n                    if (courses && this.initialized) {\r\n                        this.subscribeToGroupNotificationUpdates(courses);\r\n                        this.subscribeToQuizUpdates(courses);\r\n                        if (!this.loadedMutedConversations) {\r\n                            this.loadedMutedConversations = true;\r\n                            this.getMutedConversations(courses);\r\n                        }\r\n                    }\r\n                });\r\n                this.notificationSettingsService.refreshNotificationSettings();\r\n            }, 15 * 1000);\r\n\r\n            this.initialized = true;\r\n        } else if (!user && this.initialized) {\r\n            this.notifications = [];\r\n            this.notificationSubject.next([]);\r\n            this.page = 0;\r\n            this.totalNotifications = 0;\r\n            this.totalNotificationsSubject.next(0);\r\n            clearTimeout(this.loadTimeout);\r\n\r\n            this.subscribedTopics.forEach((topic) => this.websocketService.unsubscribe(topic));\r\n            this.wsSubscriptions.forEach((subscription) => subscription.unsubscribe());\r\n            this.subscribedTopics = [];\r\n            this.wsSubscriptions = [];\r\n\r\n            this.clearCourseWideChannelSubscription();\r\n\r\n            this.initialized = false;\r\n        }\r\n    }\r\n\r\n    get newOrUpdatedMessage(): Observable<MetisPostDTO> {\r\n        return this._singlePostSubject$.asObservable();\r\n    }\r\n\r\n    private setTotalNotificationCount(newCount: number): void {\r\n        this.totalNotifications = newCount;\r\n        this.totalNotificationsSubject.next(newCount);\r\n    }\r\n\r\n    public incrementPageAndLoad(): void {\r\n        // Avoid repeated calls as this is called on scroll\r\n        if (this.loadingSubject.value) {\r\n            return;\r\n        }\r\n        this.page += 1;\r\n        this.loadNotifications();\r\n    }\r\n\r\n    public resetAndLoad(): void {\r\n        this.page = 0;\r\n        this.notifications = [];\r\n        this.totalNotifications = 0;\r\n        this.loadNotifications();\r\n    }\r\n\r\n    private loadNotifications(): void {\r\n        if (this.totalNotifications === 0 || this.notifications.length < this.totalNotifications) {\r\n            this.loadingSubject.next(true);\r\n            this.queryNotificationsFilteredBySettings({\r\n                page: this.page,\r\n                size: notificationsPerPage,\r\n                sort: ['notificationDate,desc'],\r\n            }).subscribe({\r\n                next: (res: HttpResponse<Notification[]>) => this.loadNotificationsSuccess(res.body!, res.headers),\r\n            });\r\n        }\r\n    }\r\n\r\n    private loadNotificationsSuccess(notifications: Notification[], headers: HttpHeaders): void {\r\n        this.addNotifications(notifications, false);\r\n        this.setTotalNotificationCount(Number(headers.get('X-Total-Count')!));\r\n        this.loadingSubject.next(false);\r\n    }\r\n\r\n    private addNotification(notification: Notification): void {\r\n        if (!this.notificationSettingsService.isNotificationAllowedBySettings(notification)) {\r\n            return;\r\n        }\r\n\r\n        if (!notification.title || !NOTIFICATION_TITLES_TO_EXCLUDE_FROM_HISTORY.includes(notification.title)) {\r\n            this.addNotifications([notification]);\r\n        }\r\n\r\n        // Single notifications should also be sent through the single notification subject for the notification popup\r\n        this.singleNotificationSubject.next(notification);\r\n    }\r\n\r\n    private addNotifications(notifications: Notification[], addToCount = true): void {\r\n        if (notifications) {\r\n            notifications.forEach((notification: Notification) => {\r\n                if (notification.notificationDate) {\r\n                    notification.notificationDate = convertDateFromServer(notification.notificationDate);\r\n                }\r\n\r\n                if (\r\n                    this.notificationSettingsService.isNotificationAllowedBySettings(notification) &&\r\n                    !this.notifications.some(({ id }) => notification.id && id === notification.id) &&\r\n                    notification.notificationDate\r\n                ) {\r\n                    this.notifications.push(notification);\r\n                }\r\n            });\r\n\r\n            this.notificationSubject.next(this.notifications);\r\n            if (addToCount) {\r\n                this.setTotalNotificationCount(this.notifications.length);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Query all notifications with respect to the current user's notification settings.\r\n     * @param req request options\r\n     * @return Observable<HttpResponse<Notification[]>>\r\n     */\r\n    queryNotificationsFilteredBySettings(req?: any): Observable<HttpResponse<Notification[]>> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<Notification[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: HttpResponse<Notification[]>) => this.convertNotificationResponseArrayDateFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Navigate to notification target or build router components and params for post related notifications\r\n     * @param {GroupNotification} notification\r\n     */\r\n    interpretNotification(notification: GroupNotification): void {\r\n        if (notification.target) {\r\n            const target = JSON.parse(notification.target);\r\n            const targetCourseId = target.course || notification.course?.id;\r\n            const targetConversationId = target.conversation;\r\n\r\n            if (notification.title === DATA_EXPORT_CREATED_TITLE) {\r\n                this.router.navigate([target.mainPage, 'data-exports', target.id]);\r\n            } else if (notification.title === DATA_EXPORT_FAILED_TITLE) {\r\n                this.router.navigate([target.mainPage, 'data-exports']);\r\n            } else if (notification.title === QUIZ_EXERCISE_STARTED_TITLE) {\r\n                this.router.navigate([target.mainPage, targetCourseId, 'quiz-exercises', target.id, 'live']);\r\n            } else if (\r\n                // check with plain strings is needed to support legacy notifications that were created before it was possible to translate notifications\r\n                notification.title === NEW_ANNOUNCEMENT_POST_TITLE ||\r\n                notification.title === 'New announcement' ||\r\n                notification.title === NEW_COURSE_POST_TITLE ||\r\n                notification.title === 'New course-wide post' ||\r\n                notification.title === 'New reply for course-wide post'\r\n            ) {\r\n                if (targetConversationId) {\r\n                    const queryParams: Params = MetisConversationService.getQueryParamsForConversation(targetConversationId);\r\n                    const routeComponents: RouteComponents = MetisConversationService.getLinkForConversation(targetCourseId);\r\n                    this.navigateToNotificationTarget(targetCourseId, routeComponents, queryParams);\r\n                } else {\r\n                    const queryParams: Params = MetisService.getQueryParamsForCoursePost(target.id);\r\n                    const routeComponents: RouteComponents = MetisService.getLinkForCoursePost(targetCourseId);\r\n                    this.navigateToNotificationTarget(targetCourseId, routeComponents, queryParams);\r\n                }\r\n            } else if (notification.title === NEW_EXERCISE_POST_TITLE || notification.title === 'New exercise post' || notification.title === 'New reply for exercise post') {\r\n                const queryParams: Params = MetisService.getQueryParamsForLectureOrExercisePost(target.id);\r\n                const routeComponents: RouteComponents = MetisService.getLinkForExercisePost(targetCourseId, target.exercise ?? target.exerciseId);\r\n                this.navigateToNotificationTarget(targetCourseId, routeComponents, queryParams);\r\n            } else if (notification.title === NEW_LECTURE_POST_TITLE || notification.title === 'New lecture post' || notification.title === 'New reply for lecture post') {\r\n                const queryParams: Params = MetisService.getQueryParamsForLectureOrExercisePost(target.id);\r\n                const routeComponents: RouteComponents = MetisService.getLinkForLecturePost(targetCourseId, target.lecture ?? target.lectureId);\r\n                this.navigateToNotificationTarget(targetCourseId, routeComponents, queryParams);\r\n            } else if (\r\n                notification.title === CONVERSATION_CREATE_GROUP_CHAT_TITLE ||\r\n                notification.title === CONVERSATION_ADD_USER_CHANNEL_TITLE ||\r\n                notification.title === CONVERSATION_ADD_USER_GROUP_CHAT_TITLE ||\r\n                notification.title === CONVERSATION_REMOVE_USER_GROUP_CHAT_TITLE ||\r\n                notification.title === CONVERSATION_REMOVE_USER_CHANNEL_TITLE\r\n            ) {\r\n                const queryParams: Params = MetisConversationService.getQueryParamsForConversation(targetConversationId);\r\n                const routeComponents: RouteComponents = MetisConversationService.getLinkForConversation(targetCourseId);\r\n                this.navigateToNotificationTarget(targetCourseId, routeComponents, queryParams);\r\n            } else if (\r\n                notification.title === MENTIONED_IN_MESSAGE_TITLE ||\r\n                notification.title === NEW_REPLY_FOR_LECTURE_POST_TITLE ||\r\n                notification.title === NEW_REPLY_FOR_EXERCISE_POST_TITLE ||\r\n                notification.title === NEW_REPLY_FOR_COURSE_POST_TITLE ||\r\n                notification.title === NEW_REPLY_MESSAGE_TITLE ||\r\n                notification.title === NEW_REPLY_FOR_EXAM_POST_TITLE\r\n            ) {\r\n                const queryParams: Params = MetisConversationService.getQueryParamsForConversation(targetConversationId);\r\n                queryParams.messageId = target.id;\r\n                const routeComponents: RouteComponents = MetisConversationService.getLinkForConversation(targetCourseId);\r\n                this.navigateToNotificationTarget(targetCourseId, routeComponents, queryParams);\r\n            } else if (notification.title === PLAGIARISM_CASE_REPLY_TITLE) {\r\n                const routeComponents: RouteComponents = ['course-management', targetCourseId, target.entity, target.id];\r\n                this.navigateToNotificationTarget(targetCourseId, routeComponents, {});\r\n            } else {\r\n                const routeComponents: RouteComponents = [target.mainPage, targetCourseId, target.entity, target.id];\r\n                this.navigateToNotificationTarget(targetCourseId, routeComponents, {});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the translated text for the placeholder of the notification text of the provided notification.\r\n     * If the notification is a legacy notification and therefor the text is not a placeholder\r\n     * it just returns the provided text for the notification text\r\n     * @param notification {Notification}\r\n     * @param maxNotificationLength {number}\r\n     */\r\n    getNotificationTextTranslation(notification: Notification, maxNotificationLength: number): string {\r\n        if (notification.textIsPlaceholder) {\r\n            let translation = this.artemisTranslatePipe.transform(notification.text, { placeholderValues: this.getParsedPlaceholderValues(notification) });\r\n            if (translation?.includes(translationNotFoundMessage)) {\r\n                return notification.text ?? 'No text found';\r\n            }\r\n\r\n            if (notification.text && MESSAGING_NOTIFICATION_TEXTS.includes(notification.text)) {\r\n                // Match all occurrences within the notification content of the form [tag]displayName(anything)[/tag] and replace it with only \"displayName\"\r\n                const pattern = /\\[(?<tag>\\w+)](.*?)\\(.*?\\)\\[\\/\\k<tag>]/g;\r\n                translation = translation.replace(pattern, (match: string, tag: string, displayName: string) => displayName);\r\n            }\r\n\r\n            if (translation?.length > maxNotificationLength) {\r\n                return translation.substring(0, maxNotificationLength - 1) + '...';\r\n            }\r\n\r\n            return translation;\r\n        } else {\r\n            return notification.text ?? 'No text found';\r\n        }\r\n    }\r\n\r\n    private getParsedPlaceholderValues(notification: Notification): string[] {\r\n        if (notification.placeholderValues) {\r\n            return JSON.parse(notification.placeholderValues);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Navigate to post related targets, decide if reload is required, i.e. when switching course context\r\n     * @param {number} targetCourseId\r\n     * @param {RouteComponents} routeComponents\r\n     * @param {Params} queryParams\r\n     */\r\n    navigateToNotificationTarget(targetCourseId: number, routeComponents: RouteComponents, queryParams: Params): void {\r\n        const currentCourseId = this.getCurrentCourseId();\r\n        // determine if component recreation is required when notification is clicked\r\n        // by comparing the id of the course the user is currently in, the course the post associated with the notification belongs to and if the user is already in the messages tab\r\n        if (currentCourseId === undefined || currentCourseId !== targetCourseId || this.isUnderMessagesTabOfSpecificCourse(targetCourseId.toString())) {\r\n            this.forceComponentReload(routeComponents, queryParams);\r\n        } else {\r\n            this.router.navigate(routeComponents, { queryParams });\r\n        }\r\n    }\r\n\r\n    private getCurrentCourseId(): number | undefined {\r\n        return this.activatedRoute.snapshot.firstChild?.params['courseId'];\r\n    }\r\n\r\n    /**\r\n     * Force component reload. This is used when the user clicks on a notification and the component needs to be recreated.\r\n     * @param routeComponents\r\n     * @param queryParams\r\n     */\r\n    forceComponentReload(routeComponents: RouteComponents, queryParams: Params): void {\r\n        this.router.navigate(['/courses'], { skipLocationChange: true }).then(() => {\r\n            this.router.navigate(routeComponents, { queryParams });\r\n        });\r\n    }\r\n\r\n    subscribeToNotificationUpdates(): Observable<Notification[]> {\r\n        return this.notificationSubject.asObservable();\r\n    }\r\n\r\n    subscribeToSingleIncomingNotifications(): Observable<Notification> {\r\n        return this.singleNotificationSubject.asObservable();\r\n    }\r\n\r\n    subscribeToLoadingStateUpdates(): Observable<boolean> {\r\n        return this.loadingSubject.asObservable();\r\n    }\r\n\r\n    subscribeToTotalNotificationCountUpdates(): Observable<number> {\r\n        return this.totalNotificationsSubject.asObservable();\r\n    }\r\n\r\n    private subscribeToSingleUserNotificationUpdates(user: User): void {\r\n        const userTopic = `/topic/user/${user.id}/notifications`;\r\n        if (!this.subscribedTopics.includes(userTopic)) {\r\n            this.subscribedTopics.push(userTopic);\r\n            this.websocketService.subscribe(userTopic);\r\n            const subscription = this.websocketService.receive(userTopic).subscribe((notification: Notification) => {\r\n                // Do not add notification to observer if it is a one-to-one conversation creation notification\r\n                // and if the author is the current user\r\n                if (notification.title !== CONVERSATION_CREATE_ONE_TO_ONE_CHAT_TITLE && user.id !== notification.author?.id) {\r\n                    this.addNotification(notification);\r\n                }\r\n            });\r\n            this.wsSubscriptions.push(subscription);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if user is under messages tab.\r\n     * @returns {boolean} true if user is under messages tab, false otherwise\r\n     */\r\n    private isUnderMessagesTabOfSpecificCourse(targetCourseId: string): boolean {\r\n        return this.router.url.includes(`courses/${targetCourseId}/messages`);\r\n    }\r\n\r\n    private subscribeToGroupNotificationUpdates(courses: Course[]): void {\r\n        courses.forEach((course) => {\r\n            let courseTopic = `/topic/course/${course.id}/${GroupNotificationType.STUDENT}`;\r\n            if (course.isAtLeastInstructor) {\r\n                courseTopic = `/topic/course/${course.id}/${GroupNotificationType.INSTRUCTOR}`;\r\n            } else if (course.isAtLeastEditor) {\r\n                courseTopic = `/topic/course/${course.id}/${GroupNotificationType.EDITOR}`;\r\n            } else if (course.isAtLeastTutor) {\r\n                courseTopic = `/topic/course/${course.id}/${GroupNotificationType.TA}`;\r\n            }\r\n            if (!this.subscribedTopics.includes(courseTopic)) {\r\n                this.subscribedTopics.push(courseTopic);\r\n                this.websocketService.subscribe(courseTopic);\r\n                const subscription = this.websocketService.receive(courseTopic).subscribe((notification: Notification) => {\r\n                    this.addNotification(notification);\r\n                });\r\n                this.wsSubscriptions.push(subscription);\r\n            }\r\n        });\r\n    }\r\n\r\n    private subscribeToTutorialGroupNotificationUpdates(user: User): void {\r\n        const tutorialGroupTopic = `/topic/user/${user.id}/notifications/tutorial-groups`;\r\n        if (!this.subscribedTopics.includes(tutorialGroupTopic)) {\r\n            this.subscribedTopics.push(tutorialGroupTopic);\r\n            this.websocketService.subscribe(tutorialGroupTopic);\r\n            const subscription = this.websocketService.receive(tutorialGroupTopic).subscribe((notification: Notification) => {\r\n                this.addNotification(notification);\r\n            });\r\n            this.wsSubscriptions.push(subscription);\r\n        }\r\n    }\r\n\r\n    private subscribeToConversationNotificationUpdates(user: User): void {\r\n        const conversationTopic = `/topic/user/${user.id}/notifications/conversations`;\r\n        if (!this.subscribedTopics.includes(conversationTopic)) {\r\n            this.subscribedTopics.push(conversationTopic);\r\n            this.websocketService.subscribe(conversationTopic);\r\n            const subscription = this.websocketService.receive(conversationTopic).subscribe(this.handleNewPostDTO);\r\n            this.wsSubscriptions.push(subscription);\r\n        }\r\n    }\r\n\r\n    private subscribeToCourseWideChannelTopic(courseId: number): void {\r\n        const courseWideTopic = MetisWebsocketChannelPrefix + `courses/${courseId}`;\r\n\r\n        if (this.subscribedCourseWideChannelTopic === courseWideTopic) {\r\n            return;\r\n        }\r\n\r\n        if (this.subscribedCourseWideChannelTopic) {\r\n            this.clearCourseWideChannelSubscription();\r\n        }\r\n\r\n        this.websocketService.subscribe(courseWideTopic);\r\n        this.subscribedCourseWideChannelTopic = courseWideTopic;\r\n\r\n        this.courseWideChannelSubscription = this.websocketService.receive(courseWideTopic).subscribe(this.handleNewPostDTO);\r\n    }\r\n\r\n    private handleNewPostDTO = (postDTO: MetisPostDTO): void => {\r\n        if (postDTO.post?.answers) {\r\n            postDTO.post.answers.forEach((answer) => {\r\n                answer.post = { ...postDTO.post, answers: [], reactions: [] };\r\n                answer.creationDate = dayjs(answer.creationDate);\r\n            });\r\n        }\r\n\r\n        postDTO.post.creationDate = dayjs(postDTO.post.creationDate);\r\n\r\n        if (postDTO.post.conversation?.lastMessageDate) {\r\n            postDTO.post.conversation.lastMessageDate = convertDateFromServer(postDTO.post.conversation?.lastMessageDate);\r\n        }\r\n\r\n        const user = this.accountService.userIdentity;\r\n        if (user && postDTO.notification) {\r\n            this.changeTitleIfMentioned(user, postDTO, postDTO.notification);\r\n        }\r\n\r\n        this._singlePostSubject$.next(postDTO);\r\n        if (\r\n            postDTO.action === MetisPostAction.CREATE &&\r\n            this.mutedConversations.find((id) => id === postDTO.post.conversation?.id) &&\r\n            postDTO.notification?.title !== MENTIONED_IN_MESSAGE_TITLE\r\n        ) {\r\n            return;\r\n        }\r\n        this.handleNotification(postDTO);\r\n    };\r\n\r\n    public handleNotification(postDTO: MetisPostDTO) {\r\n        const notification = postDTO.notification;\r\n        if (notification?.target) {\r\n            // Only add notification if it is not from the current user and allowed by settings\r\n            const user = this.accountService.userIdentity;\r\n            if (notification.author?.id !== user?.id && this.notificationSettingsService.isNotificationAllowedBySettings(notification)) {\r\n                if (this.shouldNotify(postDTO, user?.id)) {\r\n                    this.addNotification(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the conversation id to the list of muted conversations if not already contained\r\n     *\r\n     * @param conversationId conversation id\r\n     */\r\n    public muteNotificationsForConversation(conversationId: number) {\r\n        if (this.mutedConversations.indexOf(conversationId) === -1) {\r\n            this.mutedConversations.push(conversationId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the conversation id from the list of muted conversations if contained\r\n     *\r\n     * @param conversationId conversation id\r\n     */\r\n    public unmuteNotificationsForConversation(conversationId: number) {\r\n        this.mutedConversations.splice(this.mutedConversations.indexOf(conversationId), 1);\r\n    }\r\n\r\n    private shouldNotify(postDTO: MetisPostDTO, userId: number | undefined) {\r\n        if (\r\n            !getAsChannelDTO(postDTO.post.conversation)?.isCourseWide ||\r\n            postDTO.action !== MetisPostAction.UPDATE ||\r\n            !userId ||\r\n            postDTO.notification?.title === MENTIONED_IN_MESSAGE_TITLE\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        // True if the author is involved\r\n        return postDTO.post.author?.id === userId || postDTO.post.answers?.map((answer) => answer.author?.id).includes(userId);\r\n    }\r\n\r\n    private changeTitleIfMentioned(user: User, postDTO: MetisPostDTO, notification: Notification) {\r\n        const mentionMatch = `[user]${user?.name}(${user?.login})[/user]`;\r\n        if (postDTO.action === MetisPostAction.CREATE && postDTO.post.content?.includes(mentionMatch)) {\r\n            notification.title = MENTIONED_IN_MESSAGE_TITLE;\r\n        } else if (postDTO.action === MetisPostAction.UPDATE && postDTO.post.answers?.last()?.content?.includes(mentionMatch)) {\r\n            notification.title = MENTIONED_IN_MESSAGE_TITLE;\r\n        }\r\n    }\r\n\r\n    private subscribeToQuizUpdates(courses: Course[]): void {\r\n        courses.forEach((course) => {\r\n            const quizExerciseTopic = '/topic/courses/' + course.id + '/quizExercises';\r\n            if (!this.subscribedTopics.includes(quizExerciseTopic)) {\r\n                this.subscribedTopics.push(quizExerciseTopic);\r\n                this.websocketService.subscribe(quizExerciseTopic);\r\n                const subscription = this.websocketService.receive(quizExerciseTopic).subscribe((quizExercise: QuizExercise) => {\r\n                    if (\r\n                        quizExercise.visibleToStudents &&\r\n                        quizExercise.quizMode === QuizMode.SYNCHRONIZED &&\r\n                        quizExercise.quizBatches?.[0]?.started &&\r\n                        !quizExercise.isOpenForPractice\r\n                    ) {\r\n                        this.addNotification(NotificationService.createNotificationFromStartedQuizExercise(quizExercise));\r\n                    }\r\n                });\r\n                this.wsSubscriptions.push(subscription);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static createNotificationFromStartedQuizExercise(quizExercise: QuizExercise): GroupNotification {\r\n        return {\r\n            title: QUIZ_EXERCISE_STARTED_TITLE,\r\n            text: QUIZ_EXERCISE_STARTED_TEXT,\r\n            textIsPlaceholder: true,\r\n            placeholderValues: '[\"' + quizExercise.course!.title + '\",\"' + quizExercise.title + '\"]',\r\n            notificationDate: dayjs(),\r\n            target: JSON.stringify({\r\n                course: quizExercise.course!.id,\r\n                mainPage: 'courses',\r\n                entity: 'exercises',\r\n                id: quizExercise.id,\r\n            }),\r\n        } as GroupNotification;\r\n    }\r\n\r\n    private convertNotificationResponseArrayDateFromServer(res: HttpResponse<Notification[]>): HttpResponse<Notification[]> {\r\n        if (res.body) {\r\n            res.body.forEach((notification: Notification) => {\r\n                notification.notificationDate = convertDateFromServer(notification.notificationDate);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Set new notification observer.\r\n     */\r\n    private initNotificationObserver(): void {\r\n        this.notificationSubject = new ReplaySubject<Notification[]>(1);\r\n        this.totalNotificationsSubject = new ReplaySubject<number>(1);\r\n        this.singleNotificationSubject = new Subject<Notification>();\r\n        this._singlePostSubject$ = new Subject<MetisPostDTO>();\r\n    }\r\n\r\n    private clearCourseWideChannelSubscription() {\r\n        if (this.subscribedCourseWideChannelTopic) {\r\n            this.websocketService.unsubscribe(this.subscribedCourseWideChannelTopic);\r\n        }\r\n        this.subscribedCourseWideChannelTopic = undefined;\r\n        this.courseWideChannelSubscription?.unsubscribe();\r\n        this.courseWideChannelSubscription = undefined;\r\n    }\r\n\r\n    private getMutedConversations(courses: Course[]) {\r\n        if (courses.find((course) => course.courseInformationSharingConfiguration !== CourseInformationSharingConfiguration.DISABLED)) {\r\n            this.http.get<number[]>('api/communication/muted-conversations', { observe: 'response' }).subscribe({\r\n                next: (res: HttpResponse<number[]>) => {\r\n                    this.mutedConversations.push(...res.body!);\r\n                },\r\n            });\r\n        }\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { Posting, PostingType, SavedPostStatus } from 'app/entities/metis/posting.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SavedPostService {\r\n    private resourceUrl = 'api/communication/saved-posts/';\r\n\r\n    private readonly http: HttpClient = inject(HttpClient);\r\n\r\n    /**\r\n     * saves a post\r\n     * @param {Posting} post\r\n     * @return {Observable<Object>}\r\n     */\r\n    public savePost(post: Posting): Observable<object> {\r\n        const type = this.getPostingType(post).toString();\r\n\r\n        return this.http.post(`${this.resourceUrl}${post.id}/${type}`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * un-saves a post\r\n     * @param {Posting} post\r\n     * @return {Observable<Object>}\r\n     */\r\n    public removeSavedPost(post: Posting): Observable<object> {\r\n        const type = this.getPostingType(post).toString();\r\n\r\n        return this.http.delete(`${this.resourceUrl}${post.id}/${type}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * updates a posts status\r\n     * @param {Posting} post\r\n     * @param {SavedPostStatus} status of a post (progress, archived, completed)\r\n     * @return {Observable<Object>}\r\n     */\r\n    public changeSavedPostStatus(post: Posting, status: SavedPostStatus): Observable<object> {\r\n        const type = this.getPostingType(post).toString();\r\n\r\n        return this.http.put(`${this.resourceUrl}${post.id}/${type}?status=${status.toString()}`, null, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Fetches the saved postings for a given status\r\n     * @param {number} courseId\r\n     * @param {SavedPostStatus} status\r\n     * @return {Observable<Posting[]>}\r\n     */\r\n    public fetchSavedPosts(courseId: number, status: SavedPostStatus): Observable<HttpResponse<Posting[]>> {\r\n        return this.http.get(`${this.resourceUrl}${courseId}/${status.toString()}`, { observe: 'response' }).pipe(map(this.convertPostResponseFromServer));\r\n    }\r\n\r\n    /**\r\n     * Converts posting to the corresponding type\r\n     * @param {Posting} post to convert\r\n     * @return {Post|AnswerPost}\r\n     */\r\n    public convertPostingToCorrespondingType(post: Posting) {\r\n        return Object.assign((post.postingType as PostingType) === PostingType.POST ? new Post() : new AnswerPost(), post);\r\n    }\r\n\r\n    /**\r\n     * takes an array of postings and converts the date from the server\r\n     * @param   {HttpResponse<Posting[]>} res\r\n     * @return  {HttpResponse<Posting[]>}\r\n     */\r\n    private convertPostResponseFromServer(res: HttpResponse<Posting[]>): HttpResponse<Posting[]> {\r\n        if (res.body) {\r\n            res.body.forEach((post) => {\r\n                post.creationDate = convertDateFromServer(post.creationDate);\r\n                post.updatedDate = convertDateFromServer(post.updatedDate);\r\n                if (post.conversation?.type !== undefined) {\r\n                    post.conversation.type = post.conversation.type.toLowerCase() as ConversationType;\r\n                }\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the proper enum type for a posting\r\n     * @param {Posting} post\r\n     * @return {PostingType}\r\n     */\r\n    private getPostingType(post: Posting): PostingType {\r\n        return post instanceof Post ? PostingType.POST : PostingType.ANSWER;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { ForwardedMessage, ForwardedMessageDTO } from 'app/entities/metis/forwarded-message.model';\r\nimport { PostingType } from 'app/entities/metis/posting.model';\r\n\r\ntype EntityResponseType = HttpResponse<ForwardedMessageDTO>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ForwardedMessageService {\r\n    public resourceUrl = 'api/communication/forwarded-messages';\r\n\r\n    private http = inject(HttpClient);\r\n\r\n    /**\r\n     * Sends a request to create a new forwarded message.\r\n     *\r\n     * @param forwardedMessage The message to be forwarded.\r\n     * @param courseId The ID of the course associated with the forwarded message.\r\n     * @returns An observable containing the HTTP response with the created forwarded message.\r\n     */\r\n    createForwardedMessage(forwardedMessage: ForwardedMessage, courseId: number): Observable<EntityResponseType> {\r\n        const dto: ForwardedMessageDTO = forwardedMessage.toDTO();\r\n\r\n        let params = new HttpParams();\r\n        if (courseId) {\r\n            params = params.set('courseId', courseId.toString());\r\n        }\r\n\r\n        return this.http\r\n            .post<ForwardedMessageDTO>(`${this.resourceUrl}`, dto, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                catchError((error) => {\r\n                    return throwError(() => new Error('Failed to create forwarded message'));\r\n                }),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Retrieves forwarded messages for a given set of IDs and message type.\r\n     *\r\n     * @param postingIds - An array of numeric IDs for which forwarded messages should be retrieved.\r\n     * @param type - The type of messages to retrieve (PostingType.POST or PostingType.ANSWER).\r\n     * @returns An observable containing a list of objects where each object includes an ID and its corresponding messages (as DTOs), wrapped in an HttpResponse.\r\n     */\r\n    getForwardedMessages(postingIds: number[], type: PostingType, courseId: number): Observable<HttpResponse<{ id: number; messages: ForwardedMessageDTO[] }[]>> {\r\n        if (!postingIds || postingIds.length === 0) {\r\n            return throwError(() => new Error('IDs cannot be empty'));\r\n        }\r\n        const typeKey = PostingType[type];\r\n        const params = new HttpParams().set('postingIds', postingIds.join(',')).set('type', typeKey).set('courseId', courseId.toString());\r\n\r\n        return this.http\r\n            .get<{ id: number; messages: ForwardedMessageDTO[] }[]>(this.resourceUrl, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                catchError((error) => {\r\n                    return throwError(() => new Error('Failed to retrieve forwarded messages'));\r\n                }),\r\n            );\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { PostingType } from 'app/entities/metis/posting.model';\r\n\r\nexport interface ForwardedMessageDTO {\r\n    id?: number;\r\n    sourceId?: number;\r\n    sourceType?: PostingType;\r\n    destinationPostId?: number;\r\n    destinationAnswerPostId?: number;\r\n    content?: string;\r\n}\r\n\r\nexport class ForwardedMessage implements BaseEntity {\r\n    public id?: number;\r\n    public sourceId?: number;\r\n    public sourceType?: PostingType;\r\n    public destinationPost?: Post;\r\n    public destinationAnswerPost?: AnswerPost;\r\n    public content?: string;\r\n\r\n    private validateDestinations(): boolean {\r\n        const isDestinationPostValid = this.destinationPost !== undefined && this.destinationPost !== null;\r\n        const isDestinationAnswerPostValid = this.destinationAnswerPost !== undefined && this.destinationAnswerPost !== null;\r\n        return (isDestinationPostValid && !isDestinationAnswerPostValid) || (!isDestinationPostValid && isDestinationAnswerPostValid);\r\n    }\r\n\r\n    constructor(id?: number, sourceId?: number, sourceType?: PostingType, destinationPost?: Post, destinationAnswerPost?: AnswerPost, content?: string) {\r\n        this.id = id;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n        this.destinationPost = destinationPost;\r\n        this.destinationAnswerPost = destinationAnswerPost;\r\n        this.content = content;\r\n        if (!this.validateDestinations()) {\r\n            throw new Error('A ForwardedMessage must have exactly one destination');\r\n        }\r\n    }\r\n\r\n    public toDTO(): ForwardedMessageDTO {\r\n        return {\r\n            id: this.id,\r\n            sourceId: this.sourceId,\r\n            sourceType: this.sourceType,\r\n            destinationPostId: this.destinationPost ? this.destinationPost.id : undefined,\r\n            destinationAnswerPostId: this.destinationAnswerPost ? this.destinationAnswerPost.id : undefined,\r\n            content: this.content,\r\n        };\r\n    }\r\n}\r\n", "import { Post } from 'app/entities/metis/post.model';\r\nimport { PostService } from 'app/shared/metis/post.service';\r\nimport { BehaviorSubject, Observable, ReplaySubject, Subscription, catchError, forkJoin, map, of, switchMap, tap, throwError } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Posting, PostingType, SavedPostStatus } from 'app/entities/metis/posting.model';\r\nimport { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { AnswerPostService } from 'app/shared/metis/answer-post.service';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Reaction } from 'app/entities/metis/reaction.model';\r\nimport { ReactionService } from 'app/shared/metis/reaction.service';\r\nimport {\r\n    ContextInformation,\r\n    DisplayPriority,\r\n    MetisPostAction,\r\n    MetisWebsocketChannelPrefix,\r\n    PageType,\r\n    PostContextFilter,\r\n    PostSortCriterion,\r\n    RouteComponents,\r\n    SortDirection,\r\n} from 'app/shared/metis/metis.util';\r\nimport { Params } from '@angular/router';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { MetisPostDTO } from 'app/entities/metis/metis-post-dto.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { PlagiarismCase } from 'app/exercises/shared/plagiarism/types/PlagiarismCase';\r\nimport { Conversation, ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ChannelDTO, ChannelSubType, getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { NotificationService } from 'app/shared/notification/notification.service';\r\nimport { SavedPostService } from 'app/shared/metis/saved-post.service';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { ForwardedMessageService } from 'app/shared/metis/forwarded-message.service';\r\nimport { ForwardedMessage, ForwardedMessageDTO } from 'app/entities/metis/forwarded-message.model';\r\n\r\n@Injectable()\r\nexport class MetisService implements OnDestroy {\r\n    private postService = inject(PostService);\r\n    private answerPostService = inject(AnswerPostService);\r\n    private reactionService = inject(ReactionService);\r\n    private accountService = inject(AccountService);\r\n    private websocketService = inject(WebsocketService);\r\n    private conversationService = inject(ConversationService);\r\n    private forwardedMessageService = inject(ForwardedMessageService);\r\n    private savedPostService = inject(SavedPostService);\r\n\r\n    private posts$: ReplaySubject<Post[]> = new ReplaySubject<Post[]>(1);\r\n    private tags$: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\r\n    private totalNumberOfPosts$: ReplaySubject<number> = new ReplaySubject<number>(1);\r\n    private pinnedPosts$: BehaviorSubject<Post[]> = new BehaviorSubject<Post[]>([]);\r\n\r\n    private currentPostContextFilter: PostContextFilter = {};\r\n    private currentConversation?: ConversationDTO = undefined;\r\n    private user: User;\r\n    private pageType: PageType;\r\n    private courseId: number;\r\n    private cachedPosts: Post[] = [];\r\n    private cachedTotalNumberOfPosts: number;\r\n    private subscriptionChannel?: string;\r\n    private courseWideTopicSubscription: Subscription;\r\n\r\n    course: Course;\r\n\r\n    constructor() {\r\n        const notificationService = inject(NotificationService);\r\n\r\n        this.accountService.identity().then((user: User) => {\r\n            this.user = user!;\r\n        });\r\n\r\n        this.courseWideTopicSubscription = notificationService.newOrUpdatedMessage.subscribe(this.handleNewOrUpdatedMessage);\r\n    }\r\n\r\n    get posts(): Observable<Post[]> {\r\n        return this.posts$.asObservable();\r\n    }\r\n\r\n    get tags(): Observable<string[]> {\r\n        return this.tags$.asObservable();\r\n    }\r\n\r\n    get totalNumberOfPosts(): Observable<number> {\r\n        return this.totalNumberOfPosts$.asObservable();\r\n    }\r\n\r\n    getPinnedPosts(): Observable<Post[]> {\r\n        return this.pinnedPosts$.asObservable();\r\n    }\r\n\r\n    getCurrentConversation(): ConversationDTO | undefined {\r\n        return this.currentConversation;\r\n    }\r\n\r\n    static getLinkForLecturePost(courseId: number, lectureId: number): RouteComponents {\r\n        return ['/courses', courseId, 'lectures', lectureId];\r\n    }\r\n\r\n    static getLinkForExercisePost(courseId: number, exerciseId: number): RouteComponents {\r\n        return ['/courses', courseId, 'exercises', exerciseId];\r\n    }\r\n\r\n    static getLinkForCoursePost(courseId: number): RouteComponents {\r\n        return ['/courses', courseId, 'discussion'];\r\n    }\r\n\r\n    static getLinkForPlagiarismCasePost(courseId: number, plagiarismCaseId: number): RouteComponents {\r\n        return ['/courses', courseId, 'plagiarism-cases', plagiarismCaseId];\r\n    }\r\n\r\n    static getQueryParamsForCoursePost(postId: number): Params {\r\n        const params: Params = {};\r\n        params.searchText = `#${postId}`;\r\n        return params;\r\n    }\r\n\r\n    static getQueryParamsForLectureOrExercisePost(postId: number): Params {\r\n        const params: Params = {};\r\n        params.postId = postId;\r\n        return params;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.subscriptionChannel) {\r\n            this.websocketService.unsubscribe(this.subscriptionChannel);\r\n        }\r\n        this.courseWideTopicSubscription.unsubscribe();\r\n    }\r\n\r\n    getPageType(): PageType {\r\n        return this.pageType;\r\n    }\r\n\r\n    setPageType(pageType: PageType) {\r\n        this.pageType = pageType;\r\n    }\r\n\r\n    getUser(): User {\r\n        return this.user;\r\n    }\r\n\r\n    getCourse(): Course {\r\n        return this.course;\r\n    }\r\n\r\n    /**\r\n     * set course property before using metis service\r\n     * @param {Course} course in which the metis service is used\r\n     */\r\n    setCourse(course: Course | undefined): void {\r\n        if (course && (this.courseId === undefined || this.courseId !== course.id)) {\r\n            this.courseId = course.id!;\r\n            this.course = course;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * to be used to set posts from outside\r\n     * @param {Post[]} posts that are managed by metis service\r\n     */\r\n    setPosts(posts: Post[]): void {\r\n        this.posts$.next(posts);\r\n    }\r\n\r\n    /**\r\n     * fetches all posts for a course, optionally fetching posts only for a certain context, i.e. a lecture, exercise or specified course-wide-context,\r\n     * informs all components that subscribed on posts by sending the newly fetched posts\r\n     * @param postContextFilter criteria to filter course posts with (lecture, exercise, course-wide context)\r\n     * @param forceUpdate if true, forces a re-fetch even if filter property did not change\r\n     * @param conversation active conversation if available\r\n     */\r\n    getFilteredPosts(postContextFilter: PostContextFilter, forceUpdate = true, conversation: ConversationDTO | undefined = undefined): void {\r\n        // check if the post context did change\r\n        if (\r\n            forceUpdate ||\r\n            postContextFilter?.courseId !== this.currentPostContextFilter?.courseId ||\r\n            postContextFilter?.conversationId !== this.currentPostContextFilter?.conversationId ||\r\n            this.hasDifferentContexts(postContextFilter) ||\r\n            postContextFilter?.plagiarismCaseId !== this.currentPostContextFilter?.plagiarismCaseId ||\r\n            postContextFilter?.page !== this.currentPostContextFilter?.page\r\n        ) {\r\n            this.currentPostContextFilter = postContextFilter;\r\n            this.currentConversation = conversation;\r\n            this.postService.getPosts(this.courseId, postContextFilter).subscribe((res) => {\r\n                if (!forceUpdate && (PageType.OVERVIEW === this.pageType || PageType.PAGE_SECTION === this.pageType)) {\r\n                    // if infinite scroll enabled, add fetched posts to the end of cachedPosts\r\n                    this.cachedPosts.push(...res.body!);\r\n                } else {\r\n                    // if the context changed, we need to fetch posts and dismiss cached posts\r\n                    this.cachedPosts = res.body!;\r\n                }\r\n                this.cachedTotalNumberOfPosts = Number(res.headers.get('X-Total-Count') ?? '0');\r\n                this.posts$.next(this.cachedPosts);\r\n                this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                this.createSubscriptionFromPostContextFilter();\r\n            });\r\n        } else {\r\n            // if we do not require force update, e.g. because only the post title, tag or content changed,\r\n            // we can emit the previously cached posts\r\n            this.posts$.next(this.cachedPosts);\r\n            this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * creates a new post by invoking the post service\r\n     * @param {Post} post to be created\r\n     * @return {Observable<Post>} created post\r\n     */\r\n    createPost(post: Post): Observable<Post> {\r\n        return this.postService.create(this.courseId, post).pipe(\r\n            map((res: HttpResponse<Post>) => res.body!),\r\n            tap((createdPost: Post) => {\r\n                const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === createdPost.id);\r\n                // Update the cached posts after successfully creating a new post if it is not already cached (can happen if the WebSocket message arrives before the HTTP response)\r\n                if (indexToUpdate === -1) {\r\n                    this.cachedPosts = [createdPost, ...this.cachedPosts];\r\n                    this.posts$.next(this.cachedPosts);\r\n                    this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * creates a new answer post by invoking the answer post service\r\n     * @param {AnswerPost} answerPost to be created\r\n     * @return {Observable<AnswerPost>} created answer post\r\n     */\r\n    createAnswerPost(answerPost: AnswerPost): Observable<AnswerPost> {\r\n        return this.answerPostService.create(this.courseId, answerPost).pipe(\r\n            map((res: HttpResponse<AnswerPost>) => res.body!),\r\n            tap((createdAnswerPost: AnswerPost) => {\r\n                const indexOfCachedPost = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === answerPost.post?.id);\r\n                if (indexOfCachedPost > -1) {\r\n                    // Update the answers of the cached post, if the answer is not already included in the list of answers\r\n                    const indexOfAnswer = this.cachedPosts[indexOfCachedPost].answers?.findIndex((answer) => answer.id === createdAnswerPost.id) ?? -1;\r\n                    if (indexOfAnswer === -1) {\r\n                        if (!this.cachedPosts[indexOfCachedPost].answers) {\r\n                            // Need to create a new message object since Angular doesn't detect changes otherwise\r\n                            this.cachedPosts[indexOfCachedPost] = { ...this.cachedPosts[indexOfCachedPost], answers: [], reactions: [] };\r\n                        }\r\n                        this.cachedPosts[indexOfCachedPost].answers!.push(createdAnswerPost);\r\n                        this.posts$.next(this.cachedPosts);\r\n                        this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                    }\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * updates a given posts by invoking the post service\r\n     * @param post to be updated\r\n     * @return updated post\r\n     */\r\n    updatePost(post: Post): Observable<Post> {\r\n        return this.postService.update(this.courseId, post).pipe(\r\n            map((res: HttpResponse<Post>) => res.body!),\r\n            tap((updatedPost: Post) => {\r\n                const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === updatedPost.id);\r\n                if (indexToUpdate > -1) {\r\n                    updatedPost.answers = [...(this.cachedPosts[indexToUpdate].answers ?? [])];\r\n                    updatedPost.authorRole = this.cachedPosts[indexToUpdate].authorRole;\r\n                    this.cachedPosts[indexToUpdate] = updatedPost;\r\n                    this.posts$.next(this.cachedPosts);\r\n                    this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * updates a given answer posts by invoking the answer post service\r\n     * @param {AnswerPost} answerPost to be updated\r\n     * @return {Observable<AnswerPost>} updated answer post\r\n     */\r\n    updateAnswerPost(answerPost: AnswerPost): Observable<AnswerPost> {\r\n        return this.answerPostService.update(this.courseId, answerPost).pipe(\r\n            map((res: HttpResponse<AnswerPost>) => res.body!),\r\n            tap((updatedAnswerPost: AnswerPost) => {\r\n                const indexOfCachedPost = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === answerPost.post?.id);\r\n                if (indexOfCachedPost > -1) {\r\n                    const indexOfAnswer = this.cachedPosts[indexOfCachedPost].answers?.findIndex((answer) => answer.id === updatedAnswerPost.id) ?? -1;\r\n                    if (indexOfAnswer > -1) {\r\n                        updatedAnswerPost.post = { ...this.cachedPosts[indexOfCachedPost], answers: [], reactions: [] };\r\n                        updatedAnswerPost.authorRole = this.cachedPosts[indexOfCachedPost].answers![indexOfAnswer].authorRole;\r\n                        this.cachedPosts[indexOfCachedPost].answers![indexOfAnswer] = updatedAnswerPost;\r\n                        this.posts$.next(this.cachedPosts);\r\n                        this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                    }\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * updates the display priority of a post to NONE, PINNED, ARCHIVED\r\n     * @param postId id of the post for which the displayPriority is changed\r\n     * @param displayPriority new displayPriority\r\n     * @return updated post\r\n     */\r\n    updatePostDisplayPriority(postId: number, displayPriority: DisplayPriority): Observable<Post> {\r\n        return this.postService.updatePostDisplayPriority(this.courseId, postId, displayPriority).pipe(map((res: HttpResponse<Post>) => res.body!));\r\n    }\r\n\r\n    public fetchAllPinnedPosts(conversationId: number): Observable<Post[]> {\r\n        const pinnedFilter: PostContextFilter = {\r\n            courseId: this.courseId,\r\n            conversationId: conversationId,\r\n            postSortCriterion: PostSortCriterion.CREATION_DATE,\r\n            sortingOrder: SortDirection.DESCENDING,\r\n            pinnedOnly: true,\r\n            pagingEnabled: false,\r\n        };\r\n\r\n        return this.postService.getPosts(this.courseId, pinnedFilter).pipe(\r\n            map((res: HttpResponse<Post[]>) => res.body ?? []),\r\n            tap((pinnedPosts: Post[]) => {\r\n                this.pinnedPosts$.next(pinnedPosts);\r\n            }),\r\n            catchError((err) => {\r\n                this.pinnedPosts$.next([]);\r\n                return of([]);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * deletes a post by invoking the post service\r\n     * @param {Post} post to be deleted\r\n     */\r\n    deletePost(post: Post): void {\r\n        this.postService\r\n            .delete(this.courseId, post)\r\n            .pipe(\r\n                tap(() => {\r\n                    const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === post.id);\r\n                    // Delete the cached post if it still exists (might be already deleted due to WebSocket message)\r\n                    if (indexToUpdate > -1) {\r\n                        this.cachedPosts.splice(indexToUpdate, 1);\r\n                        this.posts$.next(this.cachedPosts);\r\n                        this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * deletes an answer post by invoking the post service\r\n     * @param {AnswerPost} answerPost to be deleted\r\n     */\r\n    deleteAnswerPost(answerPost: AnswerPost): void {\r\n        this.answerPostService\r\n            .delete(this.courseId, answerPost)\r\n            .pipe(\r\n                tap(() => {\r\n                    const indexOfCachedPost = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === answerPost.post?.id);\r\n                    if (indexOfCachedPost > -1) {\r\n                        // Delete the answer if it still exists (might already be deleted due to WebSocket message)\r\n                        const indexOfAnswer = this.cachedPosts[indexOfCachedPost].answers?.findIndex((answer) => answer.id === answerPost.id) ?? -1;\r\n                        if (indexOfAnswer > -1) {\r\n                            this.cachedPosts[indexOfCachedPost].answers?.splice(indexOfAnswer, 1);\r\n                            this.posts$.next(this.cachedPosts);\r\n                            this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                        }\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * creates a new reaction\r\n     * @param {Reaction} reaction to be created\r\n     * @return {Observable<Reaction>} created reaction\r\n     */\r\n    createReaction(reaction: Reaction): Observable<Reaction> {\r\n        return this.reactionService.create(this.courseId, reaction).pipe(\r\n            map((res: HttpResponse<Reaction>) => res.body!),\r\n            tap((createdReaction: Reaction) => {\r\n                const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === createdReaction.post?.id);\r\n                if (indexToUpdate > -1) {\r\n                    const cachedPost = this.cachedPosts[indexToUpdate];\r\n                    const indexOfReaction = cachedPost.reactions?.findIndex((r) => r.id === createdReaction.id) ?? -1;\r\n                    // Only add reaction if not already there (can happen due to WebSocket update)\r\n                    if (indexOfReaction === -1) {\r\n                        cachedPost.reactions = cachedPost.reactions ?? [];\r\n                        cachedPost.reactions!.push(createdReaction);\r\n                        // Need to create a new message object since Angular doesn't detect changes otherwise\r\n                        this.cachedPosts[indexToUpdate] = { ...cachedPost };\r\n                        this.posts$.next(this.cachedPosts);\r\n                        this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                    }\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * deletes an existing reaction\r\n     * @param {Reaction} reaction to be deleted\r\n     */\r\n    deleteReaction(reaction: Reaction): Observable<void> {\r\n        return this.reactionService.delete(this.courseId, reaction).pipe(\r\n            map((res: HttpResponse<void>) => res.body!),\r\n            tap(() => {\r\n                const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === reaction.post?.id);\r\n                if (indexToUpdate > -1) {\r\n                    // Delete the reaction from the post if it is not already deleted (can happen due to WebSocket message)\r\n                    const cachedPost = this.cachedPosts[indexToUpdate];\r\n                    const indexOfReaction = cachedPost.reactions?.findIndex((r) => r.id == reaction.id) ?? -1;\r\n                    if (indexOfReaction > -1) {\r\n                        cachedPost.reactions!.splice(indexOfReaction, 1);\r\n                        // Need to create a new message object since Angular doesn't detect changes otherwise\r\n                        this.cachedPosts[indexToUpdate] = { ...cachedPost };\r\n                        this.posts$.next(this.cachedPosts);\r\n                        this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                    }\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * determines if the current user is at least tutor in the current course\r\n     * @return {boolean} tutor flag\r\n     */\r\n    metisUserIsAtLeastTutorInCourse(): boolean {\r\n        return !!this.course.isAtLeastTutor;\r\n    }\r\n\r\n    /**\r\n     * determines if the current user is at least instructor in the current course\r\n     * @return boolean instructor flag\r\n     */\r\n    metisUserIsAtLeastInstructorInCourse(): boolean {\r\n        return !!this.course.isAtLeastInstructor;\r\n    }\r\n\r\n    /**\r\n     * determines if the current user is the author of a given posting\r\n     * @param {Posting} posting for which the author is determined\r\n     * @return {boolean} author flag\r\n     */\r\n    metisUserIsAuthorOfPosting(posting: Posting): boolean {\r\n        if (posting?.author?.id && this.getUser()?.id) {\r\n            return posting.author.id === this.getUser().id;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * creates empty default post that is needed on initialization of a newly opened modal to edit or create a post\r\n     * @param conversation optional conversation as default context\r\n     * @param plagiarismCase optional plagiarism case as default context\r\n     * @return {Post} created default object\r\n     */\r\n    createEmptyPostForContext(conversation?: Conversation, plagiarismCase?: PlagiarismCase): Post {\r\n        const emptyPost: Post = new Post();\r\n        if (conversation) {\r\n            emptyPost.conversation = conversation;\r\n        } else if (plagiarismCase) {\r\n            emptyPost.plagiarismCase = { id: plagiarismCase.id } as PlagiarismCase;\r\n        }\r\n        return emptyPost;\r\n    }\r\n\r\n    /**\r\n     * determines the router link components required for navigating to the detail view of the given post\r\n     * @return {RouteComponents} array of router link components\r\n     */\r\n    getLinkForPost(): RouteComponents {\r\n        return MetisService.getLinkForCoursePost(this.courseId);\r\n    }\r\n\r\n    /**\r\n     * returns the router link required for navigating to the exercise referenced within a posting\r\n     * @param {string} exerciseId ID of the exercise to be navigated to\r\n     * @return {string} router link of the exercise\r\n     */\r\n    getLinkForExercise(exerciseId: string): string {\r\n        return `/courses/${this.getCourse().id}/exercises/${exerciseId}`;\r\n    }\r\n\r\n    /**\r\n     * returns the router link required for navigating to the lecture referenced within a posting\r\n     * @param {string} lectureId ID of the lecture to be navigated to\r\n     * @return {string} router link of the lecture\r\n     */\r\n    getLinkForLecture(lectureId: string): string {\r\n        return `/courses/${this.getCourse().id}/lectures/${lectureId}`;\r\n    }\r\n\r\n    /**\r\n     * returns the router link required for navigating to the exam\r\n     * @param {string} examId ID of the exam to be navigated to\r\n     * @return {string} router link of the exam\r\n     */\r\n    getLinkForExam(examId: string): string {\r\n        return `/courses/${this.getCourse().id}/exams/${examId}`;\r\n    }\r\n\r\n    /**\r\n     * returns the router link required for navigating to the channel subtype reference\r\n     *\r\n     * @param {ChannelDTO} channel\r\n     * @return {string} router link of the channel subtype reference\r\n     */\r\n    getLinkForChannelSubType(channel?: ChannelDTO): string | undefined {\r\n        const referenceId = channel?.subTypeReferenceId?.toString();\r\n        if (!referenceId) {\r\n            return undefined;\r\n        }\r\n\r\n        switch (channel?.subType) {\r\n            case ChannelSubType.EXERCISE:\r\n                return this.getLinkForExercise(referenceId);\r\n            case ChannelSubType.LECTURE:\r\n                return this.getLinkForLecture(referenceId);\r\n            case ChannelSubType.EXAM:\r\n                return this.getLinkForExam(referenceId);\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns the router link required for navigating to the exercise referenced within a faq\r\n     * @return {string} router link of the faq\r\n     */\r\n    getLinkForFaq(): string {\r\n        return `/courses/${this.getCourse().id}/faq`;\r\n    }\r\n\r\n    /**\r\n     * determines the routing params required for navigating to the detail view of the given post\r\n     * @param {Post} post to be navigated to\r\n     * @return {Params} required parameter key-value pair\r\n     */\r\n    getQueryParamsForPost(post: Post): Params {\r\n        if (post.conversation) {\r\n            return MetisService.getQueryParamsForCoursePost(post.id!);\r\n        }\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Creates an object to be used when a post context should be displayed and linked (for exercise and lecture)\r\n     * @param {Post} post for which the context is displayed and linked\r\n     * @return {ContextInformation} object containing the required router link components as well as the context display name\r\n     */\r\n    getContextInformation(post: Post): ContextInformation {\r\n        let routerLinkComponents = undefined;\r\n        let queryParams = undefined;\r\n        let displayName = '';\r\n        if (post.conversation) {\r\n            displayName = getAsChannelDTO(post.conversation)?.name ?? '';\r\n            routerLinkComponents = ['/courses', this.courseId, 'communication'];\r\n            queryParams = { conversationId: post.conversation.id! };\r\n        }\r\n        return { routerLinkComponents, displayName, queryParams };\r\n    }\r\n\r\n    /**\r\n     * Creates (and updates) the websocket channel for receiving messages in dedicated channels;\r\n     * On message reception, subsequent actions for updating the dependent components are defined based on the MetisPostAction encapsulated in the MetisPostDTO (message payload);\r\n     * Updating the components is achieved by manipulating the cached (i.e., currently visible posts) accordingly,\r\n     * and emitting those as new value for the `posts` observable via the getFilteredPosts method\r\n     * @param channel which the metis service should subscribe to\r\n     */\r\n    createWebsocketSubscription(channel: string): void {\r\n        // if channel subscription does not change, do nothing\r\n        if (this.subscriptionChannel === channel) {\r\n            return;\r\n        }\r\n        // unsubscribe from existing channel subscription\r\n        if (this.subscriptionChannel) {\r\n            this.websocketService.unsubscribe(this.subscriptionChannel);\r\n            this.subscriptionChannel = undefined;\r\n        }\r\n\r\n        // create new subscription\r\n        this.subscriptionChannel = channel;\r\n        this.websocketService.subscribe(this.subscriptionChannel);\r\n        this.websocketService.receive(this.subscriptionChannel).subscribe(this.handleNewOrUpdatedMessage);\r\n    }\r\n\r\n    public savePost(post: Posting) {\r\n        this.setIsSavedAndStatusOfPost(post, true, post.savedPostStatus as SavedPostStatus);\r\n        this.savedPostService.savePost(post).subscribe({\r\n            next: () => {},\r\n        });\r\n        this.posts$.next(this.cachedPosts);\r\n    }\r\n\r\n    public removeSavedPost(post: Posting) {\r\n        this.setIsSavedAndStatusOfPost(post, false, post.savedPostStatus as SavedPostStatus);\r\n        this.savedPostService.removeSavedPost(post).subscribe({\r\n            next: () => {},\r\n        });\r\n        this.posts$.next(this.cachedPosts);\r\n    }\r\n\r\n    public changeSavedPostStatus(post: Posting, status: SavedPostStatus) {\r\n        this.setIsSavedAndStatusOfPost(post, post.isSaved, status);\r\n        this.savedPostService.changeSavedPostStatus(post, status).subscribe({\r\n            next: () => {},\r\n        });\r\n        this.posts$.next(this.cachedPosts);\r\n    }\r\n\r\n    public resetCachedPosts() {\r\n        this.cachedPosts = [];\r\n        this.posts$.next(this.cachedPosts);\r\n        this.cachedTotalNumberOfPosts = 0;\r\n        this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n    }\r\n\r\n    private setIsSavedAndStatusOfPost(post: Posting, isSaved: undefined | boolean, status: undefined | SavedPostStatus) {\r\n        if (post instanceof AnswerPost) {\r\n            const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === post.post!.id);\r\n            const indexOfAnswer = this.cachedPosts[indexToUpdate].answers?.findIndex((answer) => answer.id === post.id) ?? -1;\r\n            const postCopy = cloneDeep(this.cachedPosts[indexToUpdate].answers![indexOfAnswer]);\r\n            postCopy.isSaved = isSaved;\r\n            postCopy.savedPostStatus = status?.valueOf();\r\n            this.cachedPosts[indexToUpdate].answers![indexOfAnswer] = postCopy;\r\n        } else {\r\n            const indexToUpdate = this.cachedPosts.findIndex((cachedPost) => cachedPost.id === post.id);\r\n            const postCopy = cloneDeep(this.cachedPosts[indexToUpdate]);\r\n            postCopy.isSaved = isSaved;\r\n            postCopy.savedPostStatus = status?.valueOf();\r\n            this.cachedPosts[indexToUpdate] = postCopy;\r\n        }\r\n    }\r\n\r\n    private handleNewOrUpdatedMessage = (postDTO: MetisPostDTO): void => {\r\n        const postConvId = postDTO.post.conversation?.id;\r\n        const postIsNotFromCurrentConversation = this.currentPostContextFilter.conversationId && postConvId !== this.currentPostContextFilter.conversationId;\r\n        const postIsNotFromCurrentPlagiarismCase =\r\n            this.currentPostContextFilter.plagiarismCaseId && postDTO.post.plagiarismCase?.id !== this.currentPostContextFilter.plagiarismCaseId;\r\n        const postIsNotFromSelectedCourseWideChannels =\r\n            this.currentPostContextFilter.courseWideChannelIds?.length !== undefined &&\r\n            (!getAsChannelDTO(postDTO.post.conversation)?.isCourseWide ||\r\n                (this.currentPostContextFilter.courseWideChannelIds.length > 0 && postConvId && !this.currentPostContextFilter.courseWideChannelIds.includes(postConvId)));\r\n\r\n        if (postIsNotFromCurrentConversation || postIsNotFromSelectedCourseWideChannels || postIsNotFromCurrentPlagiarismCase) {\r\n            return;\r\n        }\r\n\r\n        postDTO.post.creationDate = dayjs(postDTO.post.creationDate);\r\n        postDTO.post.answers?.forEach((answer: AnswerPost) => {\r\n            answer.creationDate = dayjs(answer.creationDate);\r\n        });\r\n\r\n        switch (postDTO.action) {\r\n            case MetisPostAction.CREATE:\r\n                const doesNotMatchOwnFilter = this.currentPostContextFilter.filterToOwn && postDTO.post.author?.id !== this.user.id;\r\n                const doesNotMatchReactedFilter = this.currentPostContextFilter.filterToAnsweredOrReacted;\r\n                const doesNotMatchSearchString =\r\n                    this.currentPostContextFilter.searchText?.length &&\r\n                    !postDTO.post.content?.toLowerCase().includes(this.currentPostContextFilter.searchText.toLowerCase().trim());\r\n\r\n                if (doesNotMatchOwnFilter || doesNotMatchReactedFilter || doesNotMatchSearchString) {\r\n                    break;\r\n                }\r\n                // we can add the received conversation message to the cached messages without violating the current context filter setting\r\n                // prevent adding the same post multiple times\r\n                const existingPostIndex = this.cachedPosts.findIndex((post) => post.id === postDTO.post.id);\r\n                if (existingPostIndex === -1) {\r\n                    if (this.currentPostContextFilter.sortingOrder === SortDirection.ASCENDING) {\r\n                        this.cachedPosts.push(postDTO.post);\r\n                    } else {\r\n                        this.cachedPosts = [postDTO.post, ...this.cachedPosts];\r\n                    }\r\n                }\r\n\r\n                if (this.currentPostContextFilter.conversationId && postDTO.post.author?.id !== this.user.id) {\r\n                    this.conversationService.markAsRead(this.courseId, this.currentPostContextFilter.conversationId).subscribe();\r\n                }\r\n\r\n                this.addTags(postDTO.post.tags);\r\n                break;\r\n            case MetisPostAction.UPDATE:\r\n                const indexToUpdate = this.cachedPosts.findIndex((post) => post.id === postDTO.post.id);\r\n                if (indexToUpdate > -1) {\r\n                    // WebSocket does not currently update the author and authorRole of posts correctly, so this is implemented as a workaround\r\n                    postDTO.post.authorRole = this.cachedPosts[indexToUpdate].authorRole;\r\n                    postDTO.post.answers?.forEach((answer: AnswerPost) => {\r\n                        const cachedAnswer = this.cachedPosts[indexToUpdate].answers?.find((a) => a.id === answer.id);\r\n                        if (cachedAnswer) {\r\n                            answer.authorRole = cachedAnswer.authorRole;\r\n                        }\r\n                    });\r\n                    this.cachedPosts[indexToUpdate] = postDTO.post;\r\n                }\r\n                if (postDTO.post.displayPriority === DisplayPriority.PINNED) {\r\n                    const currentPinnedPosts = this.pinnedPosts$.getValue();\r\n                    const indexPinned = currentPinnedPosts.findIndex((pinnedPost) => pinnedPost.id === postDTO.post.id);\r\n                    if (indexPinned > -1) {\r\n                        currentPinnedPosts[indexPinned] = postDTO.post;\r\n                        this.pinnedPosts$.next([...currentPinnedPosts]);\r\n                    } else {\r\n                        this.pinnedPosts$.next([postDTO.post, ...currentPinnedPosts]);\r\n                    }\r\n                } else {\r\n                    this.removeFromPinnedPosts(postDTO.post.id!);\r\n                }\r\n                this.addTags(postDTO.post.tags);\r\n                break;\r\n            case MetisPostAction.DELETE:\r\n                const indexToDelete = this.cachedPosts.findIndex((post) => post.id === postDTO.post.id);\r\n                if (indexToDelete > -1) {\r\n                    this.cachedPosts.splice(indexToDelete, 1);\r\n                }\r\n                const currentPinnedPosts = this.pinnedPosts$.getValue();\r\n                const isPinned = currentPinnedPosts.some((pinnedPost) => pinnedPost.id === postDTO.post.id);\r\n                if (isPinned) {\r\n                    const updatedPinnedPosts = currentPinnedPosts.filter((pinnedPost) => pinnedPost.id !== postDTO.post.id);\r\n                    this.pinnedPosts$.next(updatedPinnedPosts);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // emit updated version of cachedPosts to subscribing components...\r\n        if (PageType.OVERVIEW === this.pageType) {\r\n            const oldPage = this.currentPostContextFilter.page;\r\n            const oldPageSize = this.currentPostContextFilter.pageSize;\r\n            this.currentPostContextFilter.pageSize = oldPageSize! * (oldPage! + 1);\r\n            this.currentPostContextFilter.page = 0;\r\n            // ...by invoking the getFilteredPosts method with forceUpdate set to true iff receiving a new Q&A post, i.e. fetching posts from server only in this case\r\n            this.getFilteredPosts(this.currentPostContextFilter, !postConvId, this.currentConversation);\r\n            this.currentPostContextFilter.pageSize = oldPageSize;\r\n            this.currentPostContextFilter.page = oldPage;\r\n        } else {\r\n            // ...by invoking the getFilteredPosts method with forceUpdate set to false, i.e. without fetching posts from server\r\n            this.getFilteredPosts(this.currentPostContextFilter, false);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determines the channel to be used for websocket communication based on the current post context filter,\r\n     * i.e., when being on a lecture page, the context is a certain lectureId (e.g., 1), the channel is set to '/topic/metis/lectures/1';\r\n     * By calling the createWebsocketSubscription method with this channel as parameter, the metis service also subscribes to that messages in this channel\r\n     */\r\n    private createSubscriptionFromPostContextFilter(): void {\r\n        if (this.currentPostContextFilter.plagiarismCaseId) {\r\n            const channel = MetisWebsocketChannelPrefix + 'plagiarismCase/' + this.currentPostContextFilter.plagiarismCaseId;\r\n            this.createWebsocketSubscription(channel);\r\n        } else {\r\n            // No need for extra subscription since messaging topics are covered by other services\r\n            if (this.subscriptionChannel) {\r\n                this.websocketService.unsubscribe(this.subscriptionChannel);\r\n                this.subscriptionChannel = undefined;\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves forwarded messages for a given set of IDs and message type.\r\n     *\r\n     * @param postingIds - An array of numeric IDs for which forwarded messages should be retrieved.\r\n     * @param type - The type of messages to retrieve ('post' or 'answer').\r\n     * @returns An observable containing a list of objects where each object includes an ID and its corresponding messages (as DTOs), wrapped in an HttpResponse, or undefined if the IDs are invalid.\r\n     */\r\n    getForwardedMessagesByIds(postingIds: number[], type: PostingType): Observable<HttpResponse<{ id: number; messages: ForwardedMessageDTO[] }[]>> | undefined {\r\n        if (postingIds && postingIds.length > 0) {\r\n            return this.forwardedMessageService.getForwardedMessages(postingIds, type, this.courseId);\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the source posts for a given set of post IDs.\r\n     *\r\n     * @param postIds - An array of numeric post IDs to retrieve source posts for.\r\n     * @returns An observable containing the source posts or undefined if the IDs are invalid.\r\n     */\r\n    getSourcePostsByIds(postIds: number[]) {\r\n        if (postIds) return this.postService.getSourcePostsByIds(this.courseId, postIds);\r\n        else return;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the source answer posts for a given set of answer post IDs.\r\n     *\r\n     * @param answerPostIds - An array of numeric answer post IDs to retrieve source answer posts for.\r\n     * @returns An observable containing the source answer posts or undefined if the IDs are invalid.\r\n     */\r\n    getSourceAnswerPostsByIds(answerPostIds: number[]) {\r\n        if (answerPostIds) return this.answerPostService.getSourceAnswerPostsByIds(this.courseId, answerPostIds);\r\n        else return;\r\n    }\r\n\r\n    /**\r\n     * Creates forwarded messages by associating original posts with a target conversation.\r\n     *\r\n     * @param originalPosts - An array of original posts to be forwarded.\r\n     * @param targetConversation - The target conversation where the posts will be forwarded.\r\n     * @param isAnswer - A boolean indicating if the forwarded posts are answers.\r\n     * @param newContent - Optional new content for the forwarded posts.\r\n     * @returns An observable containing an array of created ForwardedMessage objects.\r\n     *\r\n     * @throws Error if the course ID is not set.\r\n     */\r\n    createForwardedMessages(originalPosts: Posting[], targetConversation: Conversation, isAnswer: boolean, newContent?: string): Observable<ForwardedMessage[]> {\r\n        if (!this.courseId) {\r\n            return throwError(() => new Error('Course ID is not set. Ensure that setCourse() is called before forwarding posts.'));\r\n        }\r\n\r\n        const newPost: Post = {\r\n            content: newContent || '',\r\n            conversation: targetConversation,\r\n            hasForwardedMessages: true,\r\n        };\r\n\r\n        let sourceType = PostingType.POST;\r\n        if (isAnswer) {\r\n            sourceType = PostingType.ANSWER;\r\n        }\r\n\r\n        return this.postService.create(this.courseId, newPost).pipe(\r\n            switchMap((createdPost: HttpResponse<Post>) => {\r\n                const createdPostBody = createdPost.body!;\r\n                const forwardedMessages: ForwardedMessage[] = originalPosts.map(\r\n                    (post) => new ForwardedMessage(undefined, post.id, sourceType, { id: createdPostBody.id } as Post, undefined, newContent || ''),\r\n                );\r\n\r\n                const createForwardedMessageObservables = forwardedMessages.map((fm) =>\r\n                    this.forwardedMessageService.createForwardedMessage(fm, this.courseId).pipe(map((res: HttpResponse<ForwardedMessage>) => res.body!)),\r\n                );\r\n\r\n                return forkJoin(createForwardedMessageObservables).pipe(\r\n                    tap((createdForwardedMessages: ForwardedMessage[]) => {\r\n                        if (targetConversation.id === this.currentConversation?.id) {\r\n                            const existingPostIndex = this.cachedPosts.findIndex((post) => post.id === createdPostBody.id);\r\n                            if (existingPostIndex === -1) {\r\n                                this.cachedPosts = [createdPostBody, ...this.cachedPosts];\r\n                            }\r\n\r\n                            createdForwardedMessages.forEach((fm) => {\r\n                                const postIndex = this.cachedPosts.findIndex((post) => post.id === fm.destinationPost?.id);\r\n                                if (postIndex > -1) {\r\n                                    const post = this.cachedPosts[postIndex];\r\n                                    const updatedPost = { ...post, hasForwardedMessages: true };\r\n                                    this.cachedPosts[postIndex] = updatedPost;\r\n                                }\r\n                            });\r\n                            this.posts$.next(this.cachedPosts);\r\n                            this.cachedTotalNumberOfPosts += 1;\r\n                            this.totalNumberOfPosts$.next(this.cachedTotalNumberOfPosts);\r\n                        }\r\n                    }),\r\n                    catchError((error) => {\r\n                        return throwError(() => error);\r\n                    }),\r\n                );\r\n            }),\r\n            catchError((error) => {\r\n                return throwError(() => error);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Helper method to add tags to currently stored course tags\r\n     */\r\n    private addTags(tags: string[] | undefined) {\r\n        if (tags && tags.length > 0) {\r\n            const updatedTags = Array.from(new Set([...this.tags$.getValue(), ...tags]));\r\n            this.tags$.next(updatedTags);\r\n        }\r\n    }\r\n\r\n    private hasDifferentContexts(other: PostContextFilter): boolean {\r\n        this.currentPostContextFilter.courseWideChannelIds?.sort((a, b) => a - b);\r\n        other.courseWideChannelIds?.sort((a, b) => a - b);\r\n\r\n        return this.currentPostContextFilter.courseWideChannelIds?.toString() !== other.courseWideChannelIds?.toString();\r\n    }\r\n\r\n    /**\r\n     * Removes a post from the pinnedPosts$ if it exists.\r\n     * @param postId The ID of the post to remove.\r\n     */\r\n    private removeFromPinnedPosts(postId: number): void {\r\n        const currentPinnedPosts = this.pinnedPosts$.getValue();\r\n        const isPinned = currentPinnedPosts.some((pinnedPost) => pinnedPost.id === postId);\r\n        if (isPinned) {\r\n            const updatedPinnedPosts = currentPinnedPosts.filter((pinnedPost) => pinnedPost.id !== postId);\r\n            this.pinnedPosts$.next(updatedPinnedPosts);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["SavedPostStatus", "SavedPostStatusMap", "PostingType", "Posting", "id", "referencePostId", "author", "authorRole", "creationDate", "updatedDate", "content", "isSaved", "savedPostStatus", "postingType", "reactions", "hasForwardedMessages", "isConsecutive", "conversation", "mapToStatus", "map", "COMPLETED", "ARCHIVED", "PROGRESS", "statusToMap", "status", "PostingEditType", "DisplayPriority", "PageType", "SortDirection", "PostSortCriterion", "MetisPostAction", "ReferenceType", "UserRole", "MetisWebsocketChannelPrefix", "PostTitleValidationPattern", "Validators", "pattern", "PostContentValidationPattern", "getUserLabel", "firstName", "lastName", "login", "showLogin", "label", "trim", "getChannelSubTypeReferenceTranslationKey", "subType", "prefix", "ChannelSubType", "EXERCISE", "LECTURE", "EXAM", "defaultFirstLayerDialogOptions", "size", "scrollable", "backdrop", "defaultSecondLayerDialogOptions", "backdropClass", "centered", "Post", "Posting", "title", "answers", "tags", "plagiarismCase", "displayPriority", "resolved", "forwardedPosts", "forwardedAnswerPosts", "constructor", "DisplayPriority", "NONE", "PostingService", "convertPostingDateFromClient", "posting", "__spreadProps", "__spreadValues", "creationDate", "convertDateFromClient", "updatedDate", "convertPostingResponseDateFromServer", "res", "body", "convertDateFromServer", "PostService", "PostingService", "http", "inject", "HttpClient", "constructor", "create", "courseId", "post", "copy", "convertPostingDateFromClient", "getResourceEndpoint", "undefined", "observe", "pipe", "map", "convertPostingResponseDateFromServer", "getPosts", "postContextFilter", "params", "HttpParams", "postSortCriterion", "set", "toString", "sortingOrder", "courseWideChannelIds", "plagiarismCaseId", "searchText", "conversationId", "filterToUnresolved", "filterToOwn", "filterToAnsweredOrReacted", "pagingEnabled", "page", "pageSize", "pinnedOnly", "get", "convertPostResponseArrayDatesFromServer", "update", "put", "id", "updatePostDisplayPriority", "postId", "displayPriority", "delete", "getSourcePostsByIds", "postIds", "join", "response", "body", "res", "forEach", "creationDate", "convertDateFromServer", "answers", "answer", "conversation", "factory", "\u0275fac", "providedIn", "AnswerPostService", "PostingService", "http", "inject", "HttpClient", "constructor", "create", "courseId", "answerPost", "copy", "convertPostingDateFromClient", "post", "getResourceEndpoint", "observe", "pipe", "map", "convertPostingResponseDateFromServer", "update", "put", "id", "delete", "getSourceAnswerPostsByIds", "answerPostIds", "params", "HttpParams", "set", "join", "get", "response", "body", "param", "conversation", "factory", "\u0275fac", "providedIn", "AnswerPost", "Posting", "resolvesPost", "post", "forwardedPosts", "forwardedAnswerPosts", "constructor", "ReactionService", "http", "inject", "HttpClient", "resourceUrl", "create", "courseId", "reaction", "post", "observe", "pipe", "map", "convertPostingResponseDateFromServer", "delete", "id", "res", "body", "creationDate", "convertDateFromServer", "factory", "\u0275fac", "providedIn", "GroupChat", "Conversation", "name", "constructor", "ConversationType", "GROUP_CHAT", "GroupChatDTO", "ConversationDTO", "members", "isGroupChatDTO", "conversation", "type", "getAsGroupChatDTO", "undefined", "OneToOneChat", "Conversation", "constructor", "ConversationType", "ONE_TO_ONE", "isOneToOneChatDTO", "conversation", "type", "ConversationType", "ONE_TO_ONE", "getAsOneToOneChatDTO", "undefined", "ConversationMemberSearchFilter", "ConversationService", "resourceUrl", "http", "inject", "HttpClient", "translationService", "TranslateService", "getConversationName", "conversation", "showLogin", "isChannelDTO", "channelName", "name", "isArchived", "instant", "isOneToOneChatDTO", "otherUser", "members", "find", "user", "isRequestingUser", "getUserLabel", "isGroupChatDTO", "length", "containsCurrentUser", "some", "member", "membersWithoutUser", "filter", "count", "searchMembersOfConversation", "courseId", "conversationId", "loginOrName", "page", "size", "sortingParameters", "sortProperty", "sortDirection", "params", "creatSearchPagingParams", "get", "observe", "getConversationsOfUser", "pipe", "map", "convertDateArrayFromServer", "updateIsFavorite", "isFavorite", "HttpParams", "append", "toString", "post", "updateIsHidden", "isHidden", "updateIsMuted", "isMuted", "markAsRead", "patch", "checkForUnreadMessages", "acceptCodeOfConduct", "checkIsCodeOfConductAccepted", "getResponsibleUsersForCodeOfConduct", "convertDateFromServer", "res", "body", "convertServerDates", "creationDate", "lastMessageDate", "lastReadDate", "forEach", "ALL", "set", "sortParameter", "String", "markAllChannelsAsRead", "factory", "\u0275fac", "providedIn", "OneToOneChatService", "resourceUrl", "http", "inject", "HttpClient", "conversationService", "ConversationService", "create", "courseId", "loginOfChatPartner", "post", "observe", "pipe", "map", "convertDateFromServer", "createWithId", "userIdOfChatPartner", "factory", "\u0275fac", "providedIn", "ChannelService", "resourceUrl", "http", "inject", "HttpClient", "accountService", "AccountService", "getChannelsOfCourse", "courseId", "get", "observe", "getPublicChannelsOfCourse", "getChannelOfExercise", "exerciseId", "getChannelOfLecture", "lectureId", "delete", "channelId", "archive", "post", "unarchive", "create", "channelDTO", "pipe", "map", "convertDateFromServer", "update", "put", "deregisterUsersFromChannel", "logins", "userLogins", "userIdentity", "login", "registerUsersToChannel", "addAllStudents", "addAllTutors", "addAllInstructors", "params", "HttpParams", "set", "grantChannelModeratorRole", "revokeChannelModeratorRole", "toggleChannelPrivacy", "res", "body", "convertServerDates", "conversation", "creationDate", "lastMessageDate", "lastReadDate", "factory", "\u0275fac", "providedIn", "GroupChatService", "resourceUrl", "http", "inject", "HttpClient", "conversationService", "ConversationService", "accountService", "AccountService", "create", "courseId", "loginsOfChatPartners", "post", "observe", "pipe", "map", "convertDateFromServer", "update", "groupChatId", "groupChatDTO", "put", "removeUsersFromGroupChat", "logins", "userLogins", "userIdentity", "login", "addUsersToGroupChat", "factory", "\u0275fac", "providedIn", "MetisConversationService", "groupChatService", "inject", "GroupChatService", "oneToOneChatService", "OneToOneChatService", "channelService", "ChannelService", "conversationService", "ConversationService", "websocketService", "WebsocketService", "accountService", "AccountService", "alertService", "AlertService", "router", "Router", "notificationService", "NotificationService", "conversationsOfUser", "_conversationsOfUser$", "ReplaySubject", "activeConversation", "undefined", "_activeConversation$", "isCodeOfConductAccepted", "_isCodeOfConductAccepted$", "isCodeOfConductPresented", "_isCodeOfConductPresented$", "hasUnreadMessages", "_hasUnreadMessages$", "_course", "isLoading", "_isLoading$", "subscribedConversationMembershipTopic", "activeConversationSubscription", "userId", "_courseId", "_isServiceSetup$", "constructor", "identity", "then", "user", "id", "newOrUpdatedMessage", "subscribe", "postDTO", "action", "MetisPostAction", "CREATE", "post", "author", "handleNewMessage", "conversation", "lastMessageDate", "ngOnDestroy", "unsubscribe", "conversationsOfUser$", "asObservable", "activeConversation$", "isCodeOfConductAccepted$", "isCodeOfConductPresented$", "hasUnreadMessages$", "isServiceSetup$", "course", "isLoading$", "setActiveConversation", "conversationIdentifier", "updateLastReadDateAndNumberOfUnreadMessages", "cachedConversation", "parameterJustId", "find", "conversationInCache", "addAlert", "type", "AlertType", "WARNING", "message", "next", "setCodeOfConduct", "markAsRead", "conversationId", "indexOfCachedConversation", "findIndex", "dayjs", "unreadMessagesCount", "hasUnreadMessagesCheck", "lastReadDate", "hasUnreadMessage", "forceRefresh", "notifyActiveConversationSubscribers", "notifyConversationsSubscribers", "Error", "setIsLoading", "getConversationsOfUser", "pipe", "map", "conversations", "body", "catchError", "res", "onError", "of", "cachedActiveConversation", "finalize", "switchMap", "EMPTY", "createOneToOneChat", "loginOfChatPartner", "onConversationCreation", "create", "createOneToOneChatWithId", "createWithId", "createChannel", "channel", "createGroupChat", "loginsOfChatPartners", "creation$", "tap", "error", "skipAlert", "title", "addErrorAlert", "params", "createGroupConversation", "createDirectConversation", "setUpConversationService", "subscribeToConversationMembershipTopic", "subscribeToRouteChange", "checkForUnreadMessages", "hasNewMessages", "errorResponse", "acceptCodeOfConduct", "checkIsCodeOfConductAccepted", "response", "some", "updateUnread", "forEach", "value", "getConversationMembershipTopic", "courseId", "MetisWebsocketChannelPrefix", "events", "event", "NavigationEnd", "conversationMembershipTopic", "receive", "websocketDTO", "onConversationMembershipMessageReceived", "conversationDTO", "convertServerDates", "handleCreateConversation", "UPDATE", "handleUpdateConversation", "DELETE", "handleDeleteConversation", "NEW_MESSAGE", "createdConversation", "handleUpdateOrCreate", "updatedConversation", "updatedOrNewConversation", "conversationsCopy", "push", "deletedConversation", "splice", "getQueryParamsForConversation", "getLinkForConversation", "markAllChannelsAsRead", "factory", "\u0275fac", "notificationsPerPage", "NOTIFICATION_TITLES_TO_EXCLUDE_FROM_HISTORY", "NEW_MESSAGE_TITLE", "NEW_EXERCISE_POST_TITLE", "NEW_LECTURE_POST_TITLE", "NEW_EXAM_POST_TITLE", "NEW_COURSE_POST_TITLE", "MESSAGING_NOTIFICATION_TEXTS", "NEW_MESSAGE_CHANNEL_TEXT", "NEW_MESSAGE_GROUP_CHAT_TEXT", "NEW_MESSAGE_DIRECT_TEXT", "MESSAGE_REPLY_IN_CONVERSATION_TEXT", "MESSAGE_REPLY_IN_CHANNEL_TEXT", "NotificationService", "websocketService", "inject", "WebsocketService", "router", "Router", "http", "HttpClient", "accountService", "AccountService", "activatedRoute", "ActivatedRoute", "courseManagementService", "CourseManagementService", "notificationSettingsService", "NotificationSettingsService", "artemisTranslatePipe", "ArtemisTranslatePipe", "resourceUrl", "notificationSubject", "singleNotificationSubject", "notifications", "totalNotifications", "totalNotificationsSubject", "page", "loadingSubject", "BehaviorSubject", "initialized", "loadTimeout", "subscribedTopics", "wsSubscriptions", "subscribedCourseWideChannelTopic", "courseWideChannelSubscription", "_singlePostSubject$", "mutedConversations", "loadedMutedConversations", "constructor", "initNotificationObserver", "getNotificationSettingsUpdates", "subscribe", "resetAndLoad", "getAuthenticationState", "user", "onUserIdentityChange", "events", "pipe", "filter", "event", "NavigationEnd", "url", "urlAfterRedirects", "startsWith", "courseIdParam", "split", "last", "courseId", "parseInt", "isNaN", "clearCourseWideChannelSubscription", "subscribeToCourseWideChannelTopic", "subscribeToSingleUserNotificationUpdates", "subscribeToTutorialGroupNotificationUpdates", "subscribeToConversationNotificationUpdates", "setTimeout", "getCoursesForNotifications", "courses", "subscribeToGroupNotificationUpdates", "subscribeToQuizUpdates", "getMutedConversations", "refreshNotificationSettings", "next", "clearTimeout", "forEach", "topic", "unsubscribe", "subscription", "newOrUpdatedMessage", "asObservable", "setTotalNotificationCount", "newCount", "incrementPageAndLoad", "value", "loadNotifications", "length", "queryNotificationsFilteredBySettings", "size", "sort", "res", "loadNotificationsSuccess", "body", "headers", "addNotifications", "Number", "get", "addNotification", "notification", "isNotificationAllowedBySettings", "title", "includes", "addToCount", "notificationDate", "convertDateFromServer", "some", "id", "push", "req", "options", "createRequestOption", "params", "observe", "map", "convertNotificationResponseArrayDateFromServer", "interpretNotification", "target", "JSON", "parse", "targetCourseId", "course", "targetConversationId", "conversation", "DATA_EXPORT_CREATED_TITLE", "navigate", "mainPage", "DATA_EXPORT_FAILED_TITLE", "QUIZ_EXERCISE_STARTED_TITLE", "NEW_ANNOUNCEMENT_POST_TITLE", "queryParams", "MetisConversationService", "getQueryParamsForConversation", "routeComponents", "getLinkForConversation", "navigateToNotificationTarget", "MetisService", "getQueryParamsForCoursePost", "getLinkForCoursePost", "getQueryParamsForLectureOrExercisePost", "getLinkForExercisePost", "exercise", "exerciseId", "getLinkForLecturePost", "lecture", "lectureId", "CONVERSATION_CREATE_GROUP_CHAT_TITLE", "CONVERSATION_ADD_USER_CHANNEL_TITLE", "CONVERSATION_ADD_USER_GROUP_CHAT_TITLE", "CONVERSATION_REMOVE_USER_GROUP_CHAT_TITLE", "CONVERSATION_REMOVE_USER_CHANNEL_TITLE", "MENTIONED_IN_MESSAGE_TITLE", "NEW_REPLY_FOR_LECTURE_POST_TITLE", "NEW_REPLY_FOR_EXERCISE_POST_TITLE", "NEW_REPLY_FOR_COURSE_POST_TITLE", "NEW_REPLY_MESSAGE_TITLE", "NEW_REPLY_FOR_EXAM_POST_TITLE", "messageId", "PLAGIARISM_CASE_REPLY_TITLE", "entity", "getNotificationTextTranslation", "maxNotificationLength", "textIsPlaceholder", "translation", "transform", "text", "placeholderValues", "getParsedPlaceholderValues", "translationNotFoundMessage", "pattern", "replace", "match", "tag", "displayName", "substring", "currentCourseId", "getCurrentCourseId", "undefined", "isUnderMessagesTabOfSpecificCourse", "toString", "forceComponentReload", "snapshot", "firstChild", "skipLocationChange", "then", "subscribeToNotificationUpdates", "subscribeToSingleIncomingNotifications", "subscribeToLoadingStateUpdates", "subscribeToTotalNotificationCountUpdates", "userTopic", "receive", "CONVERSATION_CREATE_ONE_TO_ONE_CHAT_TITLE", "author", "courseTopic", "isAtLeastInstructor", "isAtLeastEditor", "isAtLeastTutor", "tutorialGroupTopic", "conversationTopic", "handleNewPostDTO", "courseWideTopic", "MetisWebsocketChannelPrefix", "postDTO", "post", "answers", "answer", "__spreadProps", "__spreadValues", "reactions", "creationDate", "dayjs", "lastMessageDate", "userIdentity", "changeTitleIfMentioned", "action", "MetisPostAction", "CREATE", "find", "handleNotification", "shouldNotify", "muteNotificationsForConversation", "conversationId", "indexOf", "unmuteNotificationsForConversation", "splice", "userId", "getAsChannelDTO", "isCourseWide", "UPDATE", "mentionMatch", "name", "login", "content", "quizExerciseTopic", "quizExercise", "visibleToStudents", "quizMode", "QuizMode", "SYNCHRONIZED", "quizBatches", "started", "isOpenForPractice", "createNotificationFromStartedQuizExercise", "QUIZ_EXERCISE_STARTED_TEXT", "stringify", "ReplaySubject", "Subject", "courseInformationSharingConfiguration", "CourseInformationSharingConfiguration", "DISABLED", "factory", "\u0275fac", "providedIn", "SavedPostService", "resourceUrl", "http", "inject", "HttpClient", "savePost", "post", "type", "getPostingType", "toString", "id", "observe", "removeSavedPost", "delete", "changeSavedPostStatus", "status", "put", "fetchSavedPosts", "courseId", "get", "pipe", "map", "convertPostResponseFromServer", "convertPostingToCorrespondingType", "Object", "assign", "postingType", "PostingType", "POST", "Post", "AnswerPost", "res", "body", "forEach", "creationDate", "convertDateFromServer", "updatedDate", "conversation", "undefined", "toLowerCase", "ANSWER", "factory", "\u0275fac", "providedIn", "ForwardedMessageService", "resourceUrl", "http", "inject", "HttpClient", "createForwardedMessage", "forwardedMessage", "courseId", "dto", "toDTO", "params", "HttpParams", "set", "toString", "post", "observe", "pipe", "catchError", "error", "throwError", "Error", "getForwardedMessages", "postingIds", "type", "length", "typeKey", "PostingType", "join", "get", "factory", "\u0275fac", "providedIn", "ForwardedMessage", "id", "sourceId", "sourceType", "destinationPost", "destinationAnswerPost", "content", "validateDestinations", "isDestinationPostValid", "undefined", "isDestinationAnswerPostValid", "constructor", "Error", "toDTO", "destinationPostId", "destinationAnswerPostId", "MetisService", "postService", "inject", "PostService", "answerPostService", "AnswerPostService", "reactionService", "ReactionService", "accountService", "AccountService", "websocketService", "WebsocketService", "conversationService", "ConversationService", "forwardedMessageService", "ForwardedMessageService", "savedPostService", "SavedPostService", "posts$", "ReplaySubject", "tags$", "BehaviorSubject", "totalNumberOfPosts$", "pinnedPosts$", "currentPostContextFilter", "currentConversation", "undefined", "user", "pageType", "courseId", "cachedPosts", "cachedTotalNumberOfPosts", "subscriptionChannel", "courseWideTopicSubscription", "course", "constructor", "notificationService", "NotificationService", "identity", "then", "newOrUpdatedMessage", "subscribe", "handleNewOrUpdatedMessage", "posts", "asObservable", "tags", "totalNumberOfPosts", "getPinnedPosts", "getCurrentConversation", "getLinkForLecturePost", "lectureId", "getLinkForExercisePost", "exerciseId", "getLinkForCoursePost", "getLinkForPlagiarismCasePost", "plagiarismCaseId", "getQueryParamsForCoursePost", "postId", "params", "searchText", "getQueryParamsForLectureOrExercisePost", "ngOnDestroy", "unsubscribe", "getPageType", "setPageType", "getUser", "getCourse", "setCourse", "id", "setPosts", "next", "getFilteredPosts", "postContextFilter", "forceUpdate", "conversation", "conversationId", "hasDifferentContexts", "page", "getPosts", "res", "PageType", "OVERVIEW", "PAGE_SECTION", "push", "body", "Number", "headers", "get", "createSubscriptionFromPostContextFilter", "createPost", "post", "create", "pipe", "map", "tap", "createdPost", "findIndex", "cachedPost", "createAnswerPost", "answerPost", "createdAnswerPost", "indexOfCachedPost", "answers", "answer", "__spreadProps", "__spreadValues", "reactions", "updatePost", "update", "updatedPost", "indexToUpdate", "authorRole", "updateAnswerPost", "updatedAnswerPost", "indexOfAnswer", "updatePostDisplayPriority", "displayPriority", "fetchAllPinnedPosts", "pinnedFilter", "postSortCriterion", "PostSortCriterion", "CREATION_DATE", "sortingOrder", "SortDirection", "DESCENDING", "pinnedOnly", "pagingEnabled", "pinnedPosts", "catchError", "err", "of", "deletePost", "delete", "splice", "deleteAnswerPost", "createReaction", "reaction", "createdReaction", "r", "deleteReaction", "indexOfReaction", "metisUserIsAtLeastTutorInCourse", "isAtLeastTutor", "metisUserIsAtLeastInstructorInCourse", "isAtLeastInstructor", "metisUserIsAuthorOfPosting", "posting", "author", "createEmptyPostForContext", "plagiarismCase", "emptyPost", "Post", "getLinkForPost", "getLinkForExercise", "getLinkForLecture", "getLinkForExam", "examId", "getLinkForChannelSubType", "channel", "referenceId", "subTypeReferenceId", "toString", "subType", "ChannelSubType", "EXERCISE", "LECTURE", "EXAM", "getLinkForFaq", "getQueryParamsForPost", "getContextInformation", "routerLinkComponents", "queryParams", "displayName", "getAsChannelDTO", "name", "createWebsocketSubscription", "receive", "savePost", "setIsSavedAndStatusOfPost", "savedPostStatus", "removeSavedPost", "changeSavedPostStatus", "status", "isSaved", "resetCachedPosts", "AnswerPost", "postCopy", "cloneDeep", "valueOf", "postDTO", "postConvId", "postIsNotFromCurrentConversation", "postIsNotFromCurrentPlagiarismCase", "postIsNotFromSelectedCourseWideChannels", "courseWideChannelIds", "length", "isCourseWide", "includes", "creationDate", "dayjs", "forEach", "action", "MetisPostAction", "CREATE", "doesNotMatchOwnFilter", "filterToOwn", "doesNotMatchReactedFilter", "filterToAnsweredOrReacted", "doesNotMatchSearchString", "content", "toLowerCase", "trim", "ASCENDING", "markAsRead", "addTags", "UPDATE", "cachedAnswer", "find", "a", "DisplayPriority", "PINNED", "currentPinnedPosts", "getValue", "indexPinned", "pinnedPost", "removeFromPinnedPosts", "DELETE", "indexToDelete", "some", "updatedPinnedPosts", "filter", "oldPage", "oldPageSize", "pageSize", "MetisWebsocketChannelPrefix", "getForwardedMessagesByIds", "postingIds", "type", "getForwardedMessages", "getSourcePostsByIds", "postIds", "getSourceAnswerPostsByIds", "answerPostIds", "createForwardedMessages", "originalPosts", "targetConversation", "isAnswer", "newContent", "throwError", "Error", "newPost", "hasForwardedMessages", "sourceType", "PostingType", "POST", "ANSWER", "switchMap", "createdPostBody", "createForwardedMessageObservables", "ForwardedMessage", "fm", "createForwardedMessage", "forkJoin", "createdForwardedMessages", "postIndex", "destinationPost", "error", "updatedTags", "Array", "from", "Set", "other", "sort", "b", "factory", "\u0275fac"]
}
