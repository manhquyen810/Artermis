{
  "version": 3,
  "sources": ["src/main/webapp/app/account/password-reset/init/password-reset-init.service.ts", "src/main/webapp/app/account/password-reset/external/external-user-password-reset-modal.component.ts", "src/main/webapp/app/account/password-reset/external/external-user-password-reset-modal.component.html", "src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts", "src/main/webapp/app/account/password-reset/init/password-reset-init.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PasswordResetInitService {\r\n    private http = inject(HttpClient);\r\n\r\n    save(mail: string): Observable<object> {\r\n        return this.http.post('api/core/public/account/reset-password/init', mail);\r\n    }\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-external-user-password-reset-modal',\r\n    templateUrl: './external-user-password-reset-modal.component.html',\r\n    imports: [TranslateDirective],\r\n})\r\nexport class ExternalUserPasswordResetModalComponent {\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    externalCredentialProvider: string;\r\n    externalPasswordResetLink: string;\r\n\r\n    /**\r\n     * Closes the dialog, removes the query parameter and shows a helper message\r\n     */\r\n    clear(): void {\r\n        this.activeModal.dismiss();\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\"><span jhiTranslate=\"reset.request.external.modalHeader\"></span></h4>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <span jhiTranslate=\"reset.request.external.explanation\" [translateValues]=\"{ provider: externalCredentialProvider }\"\r\n            >Your account credentials are not with Artemis but {{ externalCredentialProvider }}.</span\r\n        >\r\n        @if (externalPasswordResetLink) {\r\n            <span>\r\n                <span jhiTranslate=\"reset.request.external.hint\"></span>\r\n                <a href=\"{{ externalPasswordResetLink }}\" target=\"_blank\" rel=\"external noopener noreferrer\" jhiTranslate=\"reset.request.external.linkTitle\"></a>\r\n            </span>\r\n        }\r\n        @if (!externalPasswordResetLink) {\r\n            <span jhiTranslate=\"reset.request.external.noLink\" [translateValues]=\"{ provider: externalCredentialProvider }\"\r\n                >The password reset links for {{ externalCredentialProvider }} are not provided. Please notify the administrator. If you know how to reset your password for\r\n                {{ externalCredentialProvider }} you can do it yourself.</span\r\n            >\r\n        }\r\n        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" (click)=\"clear()\" jhiTranslate=\"reset.request.external.confirm\"></button>\r\n    </div>\r\n</div>\r\n", "import { AfterViewInit, Component, ElementRef, OnInit, ViewChild, inject } from '@angular/core';\r\n\r\nimport { PasswordResetInitService } from './password-reset-init.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExternalUserPasswordResetModalComponent } from 'app/account/password-reset/external/external-user-password-reset-modal.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-password-reset-init',\r\n    templateUrl: './password-reset-init.component.html',\r\n    imports: [TranslateDirective, FormsModule, ArtemisTranslatePipe],\r\n})\r\nexport class PasswordResetInitComponent implements OnInit, AfterViewInit {\r\n    private passwordResetInitService = inject(PasswordResetInitService);\r\n    private profileService = inject(ProfileService);\r\n    private alertService = inject(AlertService);\r\n    private translateService = inject(TranslateService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    @ViewChild('emailUsername', { static: false })\r\n    emailUsernameElement?: ElementRef;\r\n    emailUsernameValue = '';\r\n    useExternal: boolean;\r\n    externalCredentialProvider: string;\r\n    externalPasswordResetLink?: string;\r\n    externalResetModalRef: NgbModalRef | undefined;\r\n\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.useExternal = profileInfo.useExternal;\r\n                this.externalCredentialProvider = profileInfo.externalCredentialProvider;\r\n                const lang = this.translateService.currentLang;\r\n                const linkMap = profileInfo.externalPasswordResetLinkMap;\r\n                if (linkMap.get(lang)) {\r\n                    this.externalPasswordResetLink = linkMap.get(lang);\r\n                } else {\r\n                    this.externalPasswordResetLink = linkMap.get('en');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.emailUsernameElement) {\r\n            this.emailUsernameElement.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    requestReset(): void {\r\n        if (!this.emailUsernameValue) {\r\n            this.alertService.error('reset.request.messages.info');\r\n            return;\r\n        }\r\n        this.passwordResetInitService.save(this.emailUsernameValue).subscribe({\r\n            next: () => {\r\n                this.alertService.success('reset.request.messages.success');\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                if (this.useExternal && err?.error?.errorKey === 'externalUser') {\r\n                    this.externalResetModalRef = this.modalService.open(ExternalUserPasswordResetModalComponent, { size: 'lg', backdrop: 'static' });\r\n                    this.externalResetModalRef.componentInstance.externalCredentialProvider = this.externalCredentialProvider;\r\n                    this.externalResetModalRef.componentInstance.externalPasswordResetLink = this.externalPasswordResetLink;\r\n                } else {\r\n                    onError(this.alertService, err);\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        <h1 jhiTranslate=\"reset.request.title\"></h1>\r\n        @if (useExternal && !externalPasswordResetLink) {\r\n            <div class=\"alert alert-danger\" jhiTranslate=\"reset.request.external.noLink\" [translateValues]=\"{ provider: externalCredentialProvider }\">\r\n                The password reset links for {{ externalCredentialProvider }} are not provided. Please notify the administrator. If you know how to reset your password for\r\n                {{ externalCredentialProvider }} you can do it yourself.\r\n            </div>\r\n        }\r\n        @if (useExternal && externalPasswordResetLink) {\r\n            <div class=\"alert alert-info\">\r\n                <span jhiTranslate=\"reset.request.external.generalHint\" [translateValues]=\"{ provider: externalCredentialProvider }\"\r\n                    >If you use your credentials from {{ externalCredentialProvider }} instead of Artemis, please reset your password here:</span\r\n                >\r\n                <a href=\"{{ externalPasswordResetLink }}\" target=\"_blank\" rel=\"external noopener noreferrer\" jhiTranslate=\"reset.request.external.linkTitle\"></a>\r\n            </div>\r\n        }\r\n        <div class=\"alert alert-warning\">\r\n            <span jhiTranslate=\"reset.request.messages.info\"></span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" for=\"emailUsername\" jhiTranslate=\"reset.request.form.emailUsername\"></label>\r\n            <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                id=\"emailUsername\"\r\n                name=\"emailUsername\"\r\n                placeholder=\"{{ 'reset.request.form.emailUsername' | artemisTranslate }}\"\r\n                [(ngModel)]=\"emailUsernameValue\"\r\n                #emailUsername\r\n            />\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary\" jhiTranslate=\"reset.request.form.button\" (click)=\"requestReset()\"></button>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["PasswordResetInitService", "http", "inject", "HttpClient", "save", "mail", "post", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "ctx_r0", "externalPasswordResetLink", "\u0275\u0275sanitizeUrl", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "externalCredentialProvider", "\u0275\u0275textInterpolate2", "ExternalUserPasswordResetModalComponent", "activeModal", "inject", "NgbActiveModal", "clear", "dismiss", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275template", "ExternalUserPasswordResetModalComponent_Conditional_15_Template", "ExternalUserPasswordResetModalComponent_Conditional_16_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275conditional", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "ctx_r1", "externalCredentialProvider", "\u0275\u0275textInterpolate2", "\u0275\u0275element", "\u0275\u0275textInterpolate1", "\u0275\u0275propertyInterpolate", "externalPasswordResetLink", "\u0275\u0275sanitizeUrl", "PasswordResetInitComponent", "passwordResetInitService", "inject", "PasswordResetInitService", "profileService", "ProfileService", "alertService", "AlertService", "translateService", "TranslateService", "modalService", "NgbModal", "emailUsernameElement", "emailUsernameValue", "useExternal", "externalResetModalRef", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "lang", "currentLang", "linkMap", "externalPasswordResetLinkMap", "get", "ngAfterViewInit", "nativeElement", "focus", "requestReset", "error", "save", "next", "success", "err", "errorKey", "open", "ExternalUserPasswordResetModalComponent", "size", "backdrop", "componentInstance", "onError", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "PasswordResetInitComponent_Conditional_6_Template", "PasswordResetInitComponent_Conditional_7_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275twoWayBindingSet", "\u0275\u0275resetView", "\u0275\u0275listener", "\u0275\u0275conditional", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ArtemisTranslatePipe", "encapsulation"]
}
