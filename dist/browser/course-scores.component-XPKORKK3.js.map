{
  "version": 3,
  "sources": ["src/main/webapp/app/course/course-scores/exercise-type-statistics-map.ts", "src/main/webapp/app/course/course-scores/course-scores-student-statistics.ts", "src/main/webapp/app/course/course-scores/course-scores.component.ts", "src/main/webapp/app/course/course-scores/course-scores.component.html"],
  "sourcesContent": ["import { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\n\r\ntype ExerciseId = number;\r\n\r\n/**\r\n * Maps exercise types to exercises of this type. For each of such exercises a value can be stored.\r\n */\r\nexport class ExerciseTypeStatisticsMap extends Map<ExerciseType, Map<ExerciseId, number>> {\r\n    /**\r\n     * Returns the value stored under the exercise type and exercise in this map.\r\n     * @param exerciseType The type the exercise belongs to.\r\n     * @param exercise The exercise for which a value should be returned.\r\n     */\r\n    public getValue(exerciseType: ExerciseType, exercise: Exercise): number | undefined {\r\n        return this.get(exerciseType)?.get(exercise.id!);\r\n    }\r\n\r\n    /**\r\n     * Stores a value for the given exercise and type in this map.\r\n     * @param exerciseType The type the exercise belongs to.\r\n     * @param exercise The exercise for which a value should be stored.\r\n     * @param value The value that should be stores in this map.\r\n     */\r\n    public setValue(exerciseType: ExerciseType, exercise: Exercise, value: number) {\r\n        if (!this.get(exerciseType)) {\r\n            this.set(exerciseType, new Map());\r\n        }\r\n\r\n        this.get(exerciseType)!.set(exercise.id!, value);\r\n    }\r\n}\r\n", "import { User } from 'app/core/user/user.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { GradeStep } from 'app/entities/grade-step.model';\r\nimport { ExerciseTypeStatisticsMap } from 'app/course/course-scores/exercise-type-statistics-map';\r\n\r\nexport class CourseScoresStudentStatistics {\r\n    user: User;\r\n    participations: StudentParticipation[] = [];\r\n    presentationScore = 0;\r\n    presentationPoints = 0;\r\n    numberOfParticipatedExercises = 0;\r\n    numberOfSuccessfulExercises = 0;\r\n    overallPoints = 0;\r\n    // the index is the exercise id\r\n    pointsPerExercise = new Map<number, number>();\r\n    // the absolute number (sum) of points the students received per exercise type\r\n    sumPointsPerExerciseType = new Map<ExerciseType, number>();\r\n    // the relative number of points the students received per exercise type (divided by the max points per exercise type)\r\n    scorePerExerciseType = new Map<ExerciseType, number>();\r\n    // the points for all exercises of a specific type\r\n    pointsPerExerciseType = new ExerciseTypeStatisticsMap();\r\n    gradeStep?: GradeStep;\r\n\r\n    constructor(user: User) {\r\n        this.user = user;\r\n        // initialize with 0 or empty string\r\n        for (const exerciseType of Object.values(ExerciseType)) {\r\n            this.sumPointsPerExerciseType.set(exerciseType, 0);\r\n            this.scorePerExerciseType.set(exerciseType, 0);\r\n            this.pointsPerExerciseType.set(exerciseType, new Map());\r\n        }\r\n    }\r\n}\r\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Subscription, forkJoin, of } from 'rxjs';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport dayjs from 'dayjs/esm';\r\nimport { sum } from 'lodash-es';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { download, generateCsv, mkConfig } from 'export-to-csv';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore, exerciseTypes } from 'app/entities/exercise.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from '../manage/course-management.service';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { LocaleConversionService } from 'app/shared/service/locale-conversion.service';\r\nimport { JhiLanguageHelper } from 'app/core/language/language.helper';\r\nimport { ParticipantScoresService, ScoresDTO } from 'app/shared/participant-scores/participant-scores.service';\r\nimport { average, round, roundScorePercentSpecifiedByCourseSettings, roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { captureException } from '@sentry/angular';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { GradeType, GradingScale } from 'app/entities/grading-scale.model';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { faClipboard, faDownload, faSort, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { CsvExportRowBuilder } from 'app/shared/export/csv-export-row-builder';\r\nimport { CourseScoresStudentStatistics } from 'app/course/course-scores/course-scores-student-statistics';\r\nimport { mean, median, standardDeviation } from 'simple-statistics';\r\nimport { ExerciseTypeStatisticsMap } from 'app/course/course-scores/exercise-type-statistics-map';\r\nimport { CsvExportOptions } from 'app/shared/export/export-modal.component';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { VERSION } from 'app/app.constants';\r\nimport { ExcelExportRowBuilder } from 'app/shared/export/excel-export-row-builder';\r\nimport { ExportRow, ExportRowBuilder } from 'app/shared/export/export-row-builder';\r\nimport {\r\n    BONUS_KEY,\r\n    COURSE_OVERALL_POINTS_KEY,\r\n    COURSE_OVERALL_SCORE_KEY,\r\n    EMAIL_KEY,\r\n    GRADE_KEY,\r\n    NAME_KEY,\r\n    POINTS_KEY,\r\n    PRESENTATION_POINTS_KEY,\r\n    PRESENTATION_SCORE_KEY,\r\n    REGISTRATION_NUMBER_KEY,\r\n    SCORE_KEY,\r\n    USERNAME_KEY,\r\n} from 'app/shared/export/export-constants';\r\nimport { PlagiarismCasesService } from 'app/course/plagiarism-cases/shared/plagiarism-cases.service';\r\nimport { GradeStep } from 'app/entities/grade-step.model';\r\nimport { PlagiarismCase } from 'app/exercises/shared/plagiarism/types/PlagiarismCase';\r\nimport { PlagiarismVerdict } from 'app/exercises/shared/plagiarism/types/PlagiarismVerdict';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ParticipantScoresDistributionComponent } from 'app/shared/participant-scores/participant-scores-distribution/participant-scores-distribution.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\nimport { ExportButtonComponent } from 'app/shared/export/export-button.component';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport enum HighlightType {\r\n    AVERAGE = 'average',\r\n    MEDIAN = 'median',\r\n    NONE = 'none',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-course-scores',\r\n    templateUrl: './course-scores.component.html',\r\n    styleUrls: ['./course-scores.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        TranslateDirective,\r\n        RouterLink,\r\n        FaIconComponent,\r\n        ParticipantScoresDistributionComponent,\r\n        NgbTooltip,\r\n        NgClass,\r\n        ExportButtonComponent,\r\n        SortDirective,\r\n        SortByDirective,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class CourseScoresComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private courseService = inject(CourseManagementService);\r\n    private sortService = inject(SortService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n    private languageHelper = inject(JhiLanguageHelper);\r\n    private localeConversionService = inject(LocaleConversionService);\r\n    private participantScoresService = inject(ParticipantScoresService);\r\n    private gradingSystemService = inject(GradingSystemService);\r\n    private plagiarismCasesService = inject(PlagiarismCasesService);\r\n\r\n    private paramSub: Subscription;\r\n    private languageChangeSubscription?: Subscription;\r\n\r\n    course: Course;\r\n    allParticipationsOfCourse: StudentParticipation[] = [];\r\n    exercisesOfCourseThatAreIncludedInScoreCalculation: Exercise[] = [];\r\n    students: CourseScoresStudentStatistics[] = [];\r\n\r\n    private exerciseTypesWithExercises: ExerciseType[];\r\n    private exerciseSuccessfulPerType = new ExerciseTypeStatisticsMap();\r\n    private exerciseParticipationsPerType = new ExerciseTypeStatisticsMap();\r\n    private exerciseAveragePointsPerType = new ExerciseTypeStatisticsMap();\r\n    exerciseMaxPointsPerType = new ExerciseTypeStatisticsMap();\r\n    private exercisesPerType = new Map<ExerciseType, Exercise[]>();\r\n\r\n    exportReady = false;\r\n    predicate: string;\r\n    reverse: boolean;\r\n\r\n    // max values\r\n    maxNumberOfPointsPerExerciseType = new Map<ExerciseType, number>();\r\n    maxNumberOfOverallPoints = 0;\r\n    maxNumberOfPresentationPoints = 0;\r\n\r\n    // average values\r\n    averageNumberOfParticipatedExercises = 0;\r\n    averageNumberOfSuccessfulExercises = 0;\r\n    averageNumberOfPointsPerExerciseTypes = new Map<ExerciseType, number>();\r\n    averageNumberOfOverallPoints = 0;\r\n    averageNumberOfPresentationPoints = 0;\r\n\r\n    // note: these represent the course scores using the participation score table. We might switch to this new\r\n    // calculation method completely if it is confirmed that it produces correct results\r\n    private studentIdToCourseScoreDTOs: Map<number, ScoresDTO> = new Map<number, ScoresDTO>();\r\n\r\n    gradingScaleExists = false;\r\n    gradingScale?: GradingScale;\r\n    isBonus?: boolean;\r\n    maxGrade?: string;\r\n    averageGrade?: string;\r\n    scoresToDisplay: number[];\r\n    valueToHighlight: number | undefined;\r\n    highlightedType = HighlightType.NONE;\r\n\r\n    numberOfReleasedExercises: number;\r\n    averageScoreIncluded = 0;\r\n    medianScoreIncluded = 0;\r\n    medianPointsIncluded = 0;\r\n\r\n    averageScoreTotal = 0;\r\n    averagePointsTotal = 0;\r\n    medianScoreTotal = 0;\r\n    medianPointsTotal = 0;\r\n\r\n    standardDeviationPointsIncluded = 0;\r\n    standardDeviationPointsTotal = 0;\r\n\r\n    // Expose the imports to the template\r\n    readonly exerciseTypes = exerciseTypes;\r\n    readonly highlightType = HighlightType;\r\n    readonly roundScorePercentSpecifiedByCourseSettings = roundScorePercentSpecifiedByCourseSettings;\r\n    readonly roundValueSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly ButtonSize = ButtonSize;\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faDownload = faDownload;\r\n    faSpinner = faSpinner;\r\n    faClipboard = faClipboard;\r\n\r\n    constructor() {\r\n        this.reverse = false;\r\n        this.predicate = 'id';\r\n    }\r\n\r\n    /**\r\n     * On init fetch the course, all released exercises and all participations with result for the course from the server.\r\n     */\r\n    ngOnInit() {\r\n        this.paramSub = this.route.params.subscribe((params) => {\r\n            this.courseService.findWithExercises(params['courseId']).subscribe((findWithExercisesResult) => {\r\n                this.initializeWithCourse(findWithExercisesResult.body!);\r\n            });\r\n        });\r\n\r\n        // Update the view if the language was changed\r\n        this.languageChangeSubscription = this.languageHelper.language.subscribe(() => {\r\n            this.changeDetector.detectChanges();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On destroy unsubscribe.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.paramSub) {\r\n            this.paramSub.unsubscribe();\r\n        }\r\n        if (this.languageChangeSubscription) {\r\n            this.languageChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.students, this.predicate, this.reverse);\r\n    }\r\n\r\n    /**\r\n     * Initialize the component with the given course.\r\n     * @param course The course which should be displayed.\r\n     */\r\n    private initializeWithCourse(course: Course) {\r\n        this.course = course;\r\n        this.initializeExerciseTitles();\r\n        this.exercisesOfCourseThatAreIncludedInScoreCalculation = this.determineExercisesIncludedInScore(this.course);\r\n        this.numberOfReleasedExercises = this.determineReleasedExercises(this.course).length;\r\n        this.calculateCourseStatistics(this.course.id!);\r\n    }\r\n\r\n    /**\r\n     * Makes sure the exercise titles are unique.\r\n     */\r\n    private initializeExerciseTitles() {\r\n        if (!this.course.exercises) {\r\n            return;\r\n        }\r\n\r\n        const titleMap = new Map<string, number>();\r\n        for (const exercise of this.course.exercises) {\r\n            const title = exercise.title!;\r\n\r\n            if (titleMap.has(title)) {\r\n                const currentValue = titleMap.get(title);\r\n                titleMap.set(title, currentValue! + 1);\r\n            } else {\r\n                titleMap.set(title, 1);\r\n            }\r\n        }\r\n\r\n        // this workaround is necessary if the course has exercises with the same title (we add the id to make it unique)\r\n        for (const exercise of this.course.exercises) {\r\n            if (titleMap.has(exercise.title!) && titleMap.get(exercise.title!)! > 1) {\r\n                exercise.title = `${exercise.title} (id=${exercise.id})`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines the exercises of the course that are included in the score calculation.\r\n     */\r\n    private determineExercisesIncludedInScore(course: Course): Array<Exercise> {\r\n        return course\r\n            .exercises!.filter((exercise) => {\r\n                const isReleasedExercise = !exercise.releaseDate || exercise.releaseDate.isBefore(dayjs());\r\n                const isExerciseThatCounts = exercise.includedInOverallScore !== IncludedInOverallScore.NOT_INCLUDED;\r\n                return isReleasedExercise && isExerciseThatCounts;\r\n            })\r\n            .sort(CourseScoresComponent.compareExercises);\r\n    }\r\n\r\n    /**\r\n     * Returns all exercise types for which the course has at least one exercise.\r\n     */\r\n    private filterExercisesTypesWithExercises(): Array<ExerciseType> {\r\n        return this.exerciseTypes.filter((exerciseType) => {\r\n            const exercisesWithType = this.exercisesPerType.get(exerciseType)?.length ?? 0;\r\n            return exercisesWithType !== 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all participations with results from the server for the specified course and calculate the corresponding course statistics\r\n     * @param courseId Id of the course\r\n     */\r\n    private calculateCourseStatistics(courseId: number) {\r\n        const findParticipationsObservable = this.courseService.findAllParticipationsWithResults(courseId);\r\n        // alternative course scores calculation using participant scores table\r\n        // find grading scale if it exists for course\r\n        const gradingScaleObservable = this.gradingSystemService.findGradingScaleForCourse(courseId).pipe(catchError(() => of(new HttpResponse<GradingScale>())));\r\n        const plagiarismCasesObservable = this.plagiarismCasesService.getCoursePlagiarismCasesForInstructor(courseId);\r\n        forkJoin([findParticipationsObservable, gradingScaleObservable, plagiarismCasesObservable]).subscribe(([participationsOfCourse, gradingScaleResponse, plagiarismCases]) => {\r\n            this.allParticipationsOfCourse = participationsOfCourse;\r\n            if (gradingScaleResponse.body) {\r\n                this.setUpGradingScale(gradingScaleResponse.body);\r\n            }\r\n\r\n            this.calculateExerciseLevelStatistics();\r\n            this.exerciseTypesWithExercises = this.filterExercisesTypesWithExercises();\r\n\r\n            this.calculateStudentLevelStatistics();\r\n\r\n            // if grading scale exists set properties\r\n            if (this.gradingScaleExists) {\r\n                this.calculateGradingScaleInformation(plagiarismCases.body ?? undefined);\r\n            }\r\n\r\n            this.calculateAverageAndMedianScores();\r\n            this.scoresToDisplay = this.students.map((student) => roundScorePercentSpecifiedByCourseSettings(student.overallPoints / this.maxNumberOfOverallPoints, this.course));\r\n            this.highlightBar(HighlightType.AVERAGE);\r\n\r\n            // this is an optional step at the moment, so we do it separately to avoid issues\r\n            this.participantScoresService.findCourseScores(courseId).subscribe((courseScoresResult) => {\r\n                // comparing with calculation from course scores (using new participation score table)\r\n                const courseScoreDTOs = courseScoresResult.body!;\r\n                this.compareNewCourseScoresCalculationWithOldCalculation(courseScoreDTOs);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method compares the course scores computed on the client side with the ones on the server side\r\n     * using the participations score table. In the future we might switch to the server side method, so we use\r\n     * this method to detect discrepancies.\r\n     * @param courseScoreDTOs the course scores sent from the server (new calculation method)\r\n     */\r\n    private compareNewCourseScoresCalculationWithOldCalculation(courseScoreDTOs: ScoresDTO[]) {\r\n        if (!this.students || !courseScoreDTOs) {\r\n            return;\r\n        }\r\n        for (const courseScoreDTO of courseScoreDTOs) {\r\n            this.studentIdToCourseScoreDTOs.set(courseScoreDTO.studentId!, courseScoreDTO);\r\n        }\r\n        for (const student of this.students) {\r\n            this.checkStudentScoreCalculation(student);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that the score calculated on the server for the student matches the score calculated in the client.\r\n     * @param student The student for which the score should be checked.\r\n     */\r\n    private checkStudentScoreCalculation(student: CourseScoresStudentStatistics) {\r\n        const overAllPoints = roundValueSpecifiedByCourseSettings(student.overallPoints, this.course);\r\n        const overallScore = roundScorePercentSpecifiedByCourseSettings(student.overallPoints / this.maxNumberOfOverallPoints, this.course);\r\n        const regularCalculation = {\r\n            scoreAchieved: overallScore,\r\n            pointsAchieved: overAllPoints,\r\n            userId: student.user.id,\r\n            userLogin: student.user.login,\r\n            regularPointsAchievable: this.maxNumberOfOverallPoints,\r\n        };\r\n\r\n        // checking if the same as in the course scores map\r\n        const courseScoreDTO = this.studentIdToCourseScoreDTOs.get(student.user.id!);\r\n        if (!courseScoreDTO) {\r\n            const errorMessage = `User scores not included in new calculation: ${JSON.stringify(regularCalculation)}`;\r\n            this.logErrorOnSentry(errorMessage);\r\n        } else {\r\n            courseScoreDTO.scoreAchieved = roundValueSpecifiedByCourseSettings(courseScoreDTO.scoreAchieved, this.course);\r\n            courseScoreDTO.pointsAchieved = roundValueSpecifiedByCourseSettings(courseScoreDTO.pointsAchieved, this.course);\r\n\r\n            if (Math.abs(courseScoreDTO.pointsAchieved - regularCalculation.pointsAchieved) > 0.1) {\r\n                const errorMessage = `Different course points in new calculation. Regular Calculation: ${JSON.stringify(regularCalculation)}. New Calculation: ${JSON.stringify(\r\n                    courseScoreDTO,\r\n                )}`;\r\n                this.logErrorOnSentry(errorMessage);\r\n            }\r\n            if (Math.abs(courseScoreDTO.scoreAchieved - regularCalculation.scoreAchieved) > 0.1) {\r\n                const errorMessage = `Different course score in new calculation. Regular Calculation: ${JSON.stringify(regularCalculation)}. New Calculation : ${JSON.stringify(\r\n                    courseScoreDTO,\r\n                )}`;\r\n                this.logErrorOnSentry(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    logErrorOnSentry(errorMessage: string) {\r\n        captureException(new Error(errorMessage));\r\n    }\r\n\r\n    /**\r\n     * Group the exercises by type and gather statistics for each type (titles, max points, accumulated max points).\r\n     */\r\n    private calculateExerciseLevelStatistics() {\r\n        for (const exerciseType of this.exerciseTypes) {\r\n            const exercisesOfType = this.exercisesOfCourseThatAreIncludedInScoreCalculation.filter((exercise) => exercise.type === exerciseType);\r\n            this.exercisesPerType.set(exerciseType, exercisesOfType);\r\n\r\n            const maxPointsOfAllExercisesOfType = new Map();\r\n            exercisesOfType.forEach((exercise) => maxPointsOfAllExercisesOfType.set(exercise.id!, exercise.maxPoints));\r\n            this.exerciseMaxPointsPerType.set(exerciseType, maxPointsOfAllExercisesOfType);\r\n\r\n            const maxPointsOfAllIncludedExercisesOfType = exercisesOfType\r\n                // only exercises marked as included_completely increase the maximum reachable number of points\r\n                .filter((exercise) => exercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_COMPLETELY)\r\n                .map((exercise) => exercise.maxPoints!);\r\n\r\n            this.maxNumberOfPointsPerExerciseType.set(exerciseType, sum(maxPointsOfAllIncludedExercisesOfType));\r\n        }\r\n        this.maxNumberOfOverallPoints = 0;\r\n        for (const maxNumberOfPointsPerExerciseTypeElement of this.maxNumberOfPointsPerExerciseType) {\r\n            this.maxNumberOfOverallPoints += maxNumberOfPointsPerExerciseTypeElement[1];\r\n        }\r\n\r\n        this.calculateReachablePresentationPoints();\r\n    }\r\n\r\n    /**\r\n     * Calculates the reachable presentation points and adds them to the max number of overall points\r\n     */\r\n    private calculateReachablePresentationPoints() {\r\n        const presentationsNumber = this.gradingScale?.presentationsNumber ?? 0;\r\n        const presentationsWeight = this.gradingScale?.presentationsWeight ?? 0;\r\n        if (this.maxNumberOfOverallPoints > 0 && presentationsNumber > 0 && presentationsWeight > 0 && presentationsWeight < 100) {\r\n            const reachablePointsWithPresentation = (-this.maxNumberOfOverallPoints / (presentationsWeight - 100)) * 100;\r\n            const reachablePresentationPoints = (reachablePointsWithPresentation * presentationsWeight) / 100.0;\r\n            this.maxNumberOfPresentationPoints = roundValueSpecifiedByCourseSettings(reachablePresentationPoints, this.course);\r\n            this.maxNumberOfOverallPoints += this.maxNumberOfPresentationPoints;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates students and calculates the points for each exercise and exercise type.\r\n     */\r\n    private calculateStudentLevelStatistics() {\r\n        const studentsMap = this.mapStudentIdToStudentStatistics();\r\n\r\n        // prepare exercises\r\n        for (const exercise of this.exercisesOfCourseThatAreIncludedInScoreCalculation) {\r\n            exercise.numberOfParticipationsWithRatedResult = 0;\r\n            exercise.numberOfSuccessfulParticipations = 0;\r\n        }\r\n\r\n        studentsMap.forEach((student) => {\r\n            this.students.push(student);\r\n            // We need the information of not included exercises as well in order to compute the total average and median\r\n            for (const exercise of this.determineReleasedExercises(this.course)) {\r\n                this.updateStudentStatisticsWithExerciseResults(student, exercise);\r\n            }\r\n\r\n            for (const exerciseType of this.exerciseTypes) {\r\n                if (this.maxNumberOfPointsPerExerciseType.get(exerciseType)! > 0) {\r\n                    student.scorePerExerciseType.set(\r\n                        exerciseType,\r\n                        (student.sumPointsPerExerciseType.get(exerciseType)! / this.maxNumberOfPointsPerExerciseType.get(exerciseType)!) * 100,\r\n                    );\r\n                }\r\n            }\r\n\r\n            this.addPresentationPointsForStudent(student);\r\n        });\r\n\r\n        for (const exerciseType of this.exerciseTypes) {\r\n            // TODO: can we calculate this average only with students who participated in the exercise?\r\n            this.averageNumberOfPointsPerExerciseTypes.set(exerciseType, average(this.students.map((student) => student.sumPointsPerExerciseType.get(exerciseType)!)));\r\n        }\r\n\r\n        this.averageNumberOfOverallPoints = average(this.students.map((student) => student.overallPoints));\r\n        this.averageNumberOfPresentationPoints = average(this.students.map((student) => student.presentationPoints));\r\n        this.averageNumberOfSuccessfulExercises = average(this.students.map((student) => student.numberOfSuccessfulExercises));\r\n        this.averageNumberOfParticipatedExercises = average(this.students.map((student) => student.numberOfParticipatedExercises));\r\n\r\n        for (const exerciseType of this.exerciseTypes) {\r\n            for (const exercise of this.exercisesPerType.get(exerciseType)!) {\r\n                exercise.averagePoints = sum(this.students.map((student) => student.pointsPerExercise.get(exercise.id!))) / this.students.length;\r\n                this.exerciseAveragePointsPerType.setValue(exerciseType, exercise, exercise.averagePoints);\r\n                this.exerciseParticipationsPerType.setValue(exerciseType, exercise, exercise.numberOfParticipationsWithRatedResult!);\r\n                this.exerciseSuccessfulPerType.setValue(exerciseType, exercise, exercise.numberOfSuccessfulParticipations!);\r\n            }\r\n        }\r\n\r\n        this.exportReady = true;\r\n    }\r\n\r\n    /**\r\n     * Updates the students statistics with the presentation points.\r\n     * @param student\r\n     */\r\n    private addPresentationPointsForStudent(student: CourseScoresStudentStatistics) {\r\n        const presentationsNumber = this.gradingScale?.presentationsNumber ?? 0;\r\n        if (student.presentationScore > 0 && presentationsNumber > 0 && this.maxNumberOfPresentationPoints > 0) {\r\n            const presentationPointAvg = student.presentationScore / presentationsNumber!;\r\n            const presentationPoints = (this.maxNumberOfPresentationPoints * presentationPointAvg) / 100.0;\r\n\r\n            student.presentationPoints = roundValueSpecifiedByCourseSettings(presentationPoints, this.course);\r\n            student.overallPoints += student.presentationPoints;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes through all participations and collects the found students.\r\n     * @return A map of the student`s id to the student.\r\n     */\r\n    private mapStudentIdToStudentStatistics(): Map<number, CourseScoresStudentStatistics> {\r\n        const studentsMap = new Map<number, CourseScoresStudentStatistics>();\r\n\r\n        for (const participation of this.allParticipationsOfCourse) {\r\n            participation.results?.forEach((result) => (result.participation = participation));\r\n\r\n            // find all students by iterating through the participations\r\n            const participationStudents = participation.student ? [participation.student] : participation.team!.students;\r\n            if (!participationStudents) {\r\n                continue;\r\n            }\r\n            for (const participationStudent of participationStudents) {\r\n                let student = studentsMap.get(participationStudent.id!);\r\n                if (!student) {\r\n                    student = new CourseScoresStudentStatistics(participationStudent);\r\n                    studentsMap.set(participationStudent.id!, student);\r\n                }\r\n                student.participations.push(participation);\r\n                if (participation.presentationScore) {\r\n                    student.presentationScore += participation.presentationScore;\r\n                }\r\n            }\r\n        }\r\n        return studentsMap;\r\n    }\r\n\r\n    /**\r\n     * Updates the student statistics with their result in the given exercise.\r\n     * @param student The student that should be updated.\r\n     * @param exercise The exercise that should be included in the statistics.\r\n     */\r\n    private updateStudentStatisticsWithExerciseResults(student: CourseScoresStudentStatistics, exercise: Exercise) {\r\n        const relevantMaxPoints = exercise.maxPoints!;\r\n        const participation = student.participations.find((part) => part.exercise!.id === exercise.id);\r\n        if (participation && participation.results && participation.results.length > 0) {\r\n            // we found a result, there should only be one\r\n            const result = participation.results[0];\r\n            if (participation.results.length > 1) {\r\n                captureException('found more than one result for student ' + student.user.login + ' and exercise ' + exercise.title);\r\n            }\r\n\r\n            // Note: It is important that we round on the individual exercise level first and then sum up.\r\n            // This is necessary so that the student arrives at the same overall result when doing his own recalculation.\r\n            // Let's assume that the student achieved 1.05 points in each of 5 exercises.\r\n            // In the client, these are now displayed rounded as 1.1 points.\r\n            // If the student adds up the displayed points, he gets a total of 5.5 points.\r\n            // In order to get the same total result as the student, we have to round before summing.\r\n            const pointsAchievedByStudentInExercise = roundValueSpecifiedByCourseSettings((result.score! * relevantMaxPoints) / 100, this.course);\r\n            student.pointsPerExercise.set(exercise.id!, pointsAchievedByStudentInExercise);\r\n            const includedIDs = this.exercisesOfCourseThatAreIncludedInScoreCalculation.map((includedExercise) => includedExercise.id);\r\n            // We only include this exercise if it is included in the exercise score\r\n            if (includedIDs.includes(exercise.id)) {\r\n                student.overallPoints += pointsAchievedByStudentInExercise;\r\n                const oldPointsSum = student.sumPointsPerExerciseType.get(exercise.type!)!;\r\n                student.sumPointsPerExerciseType.set(exercise.type!, oldPointsSum + pointsAchievedByStudentInExercise);\r\n                student.numberOfParticipatedExercises += 1;\r\n                exercise.numberOfParticipationsWithRatedResult! += 1;\r\n                if (result.score! >= 100) {\r\n                    student.numberOfSuccessfulExercises += 1;\r\n                    exercise.numberOfSuccessfulParticipations! += 1;\r\n                }\r\n\r\n                student.pointsPerExerciseType.setValue(exercise.type!, exercise, pointsAchievedByStudentInExercise);\r\n            }\r\n        } else {\r\n            // there is no result, the student has not participated or submitted too late\r\n            student.pointsPerExercise.set(exercise.id!, 0);\r\n            student.pointsPerExerciseType.setValue(exercise.type!, exercise, Number.NaN);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the grading scale\r\n     * @param gradingScale\r\n     */\r\n    setUpGradingScale(gradingScale: GradingScale) {\r\n        this.gradingScaleExists = true;\r\n        this.gradingScale = gradingScale;\r\n        this.gradingScale.gradeSteps = this.gradingSystemService.sortGradeSteps(this.gradingScale.gradeSteps);\r\n        this.isBonus = this.gradingScale.gradeType === GradeType.BONUS;\r\n        this.maxGrade = this.gradingSystemService.maxGrade(this.gradingScale.gradeSteps);\r\n    }\r\n\r\n    /**\r\n     * Sets grading scale related properties\r\n     * @param plagiarismCases the list of plagiarism cases involving the students of the course\r\n     */\r\n    calculateGradingScaleInformation(plagiarismCases?: PlagiarismCase[]) {\r\n        if (this.maxNumberOfOverallPoints >= 0 && this.gradingScale) {\r\n            const plagiarismMap = this.createStudentPlagiarismMap(plagiarismCases);\r\n            const overallPercentage = this.maxNumberOfOverallPoints > 0 ? (this.averageNumberOfOverallPoints / this.maxNumberOfOverallPoints) * 100 : 0;\r\n            this.averageGrade = this.gradingSystemService.findMatchingGradeStep(this.gradingScale.gradeSteps, overallPercentage)!.gradeName;\r\n            for (const student of this.students) {\r\n                student.gradeStep = this.findStudentGradeStep(student, this.gradingScale, plagiarismMap);\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Finds the correct grade step for the student according to the given gradingScale, also handles special grades.\r\n     * @param student The student for which the grade should be determined.\r\n     * @param gradingScale The grading scale of the course.\r\n     * @param plagiarismMap An object which has value true for a student id if the student has at least one PlagiarismVerdict.PLAGIARISM verdict assigned in the course.\r\n     */\r\n    findStudentGradeStep(student: CourseScoresStudentStatistics, gradingScale: GradingScale, plagiarismMap: { [id: number]: boolean }): GradeStep | undefined {\r\n        if (!student.participations?.length) {\r\n            // Currently the server does not return CourseScoresStudentStatistics for users without participations,\r\n            // but this should handle noParticipation grade if the server response changes.\r\n            return {\r\n                gradeName: gradingScale.noParticipationGrade || GradingScale.DEFAULT_NO_PARTICIPATION_GRADE,\r\n            } as GradeStep;\r\n        } else if (plagiarismMap[student.user.id!]) {\r\n            return {\r\n                gradeName: gradingScale.plagiarismGrade || GradingScale.DEFAULT_PLAGIARISM_GRADE,\r\n            } as GradeStep;\r\n        } else {\r\n            const overallPercentageForStudent = student.overallPoints && this.maxNumberOfOverallPoints ? (student.overallPoints / this.maxNumberOfOverallPoints) * 100 : 0;\r\n            return this.gradingSystemService.findMatchingGradeStep(gradingScale.gradeSteps, overallPercentageForStudent);\r\n        }\r\n    }\r\n\r\n    private createStudentPlagiarismMap(plagiarismCases?: PlagiarismCase[]): { [id: number]: boolean } {\r\n        const plagiarismMap: { [id: number]: boolean } = {};\r\n        plagiarismCases?.forEach((plagiarismCase) => {\r\n            if (plagiarismCase.verdict === PlagiarismVerdict.PLAGIARISM && plagiarismCase.student?.id) {\r\n                plagiarismMap[plagiarismCase.student.id] = true;\r\n            }\r\n        });\r\n        return plagiarismMap;\r\n    }\r\n\r\n    /**\r\n     * Localizes a number, e.g. switching the decimal separator\r\n     */\r\n    localize(numberToLocalize: number): string {\r\n        return this.localeConversionService.toLocaleString(numberToLocalize, this.course.accuracyOfScores);\r\n    }\r\n\r\n    /**\r\n     * Method for exporting the csv with the needed data\r\n     */\r\n    exportResults(customCsvOptions?: CsvExportOptions) {\r\n        if (!this.exportReady || this.students.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const rows: ExportRow[] = [];\r\n\r\n        const keys = this.generateExportColumnNames();\r\n\r\n        this.students.forEach((student) => rows.push(this.generateStudentStatisticsExportRow(student, customCsvOptions)));\r\n\r\n        // empty row as separator\r\n        rows.push(this.prepareEmptyExportRow('', customCsvOptions).build());\r\n\r\n        rows.push(this.generateExportRowMaxValues(customCsvOptions));\r\n        rows.push(this.generateExportRowAverageValues(customCsvOptions));\r\n        rows.push(this.generateExportRowParticipation(customCsvOptions));\r\n        rows.push(this.generateExportRowSuccessfulParticipation(customCsvOptions));\r\n\r\n        if (customCsvOptions) {\r\n            this.exportAsCsv(keys, rows, customCsvOptions);\r\n        } else {\r\n            this.exportAsExcel(keys, rows);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds an Excel workbook and starts the download.\r\n     * @param keys The column names used for the export.\r\n     * @param rows The data rows that should be part of the Excel file.\r\n     */\r\n    exportAsExcel(keys: string[], rows: ExportRow[]) {\r\n        const workbook = XLSX.utils.book_new();\r\n        const ws = XLSX.utils.json_to_sheet(rows, { header: keys });\r\n        const worksheetName = 'Course Scores';\r\n        XLSX.utils.book_append_sheet(workbook, ws, worksheetName);\r\n\r\n        const workbookProps = {\r\n            Title: `${this.course.title} Scores`,\r\n            Author: `Artemis ${VERSION ?? ''}`,\r\n        };\r\n        const fileName = `${this.course.title} Scores.xlsx`;\r\n        XLSX.writeFile(workbook, fileName, { Props: workbookProps, compression: true });\r\n    }\r\n\r\n    /**\r\n     * Builds the CSV from the rows and starts the download.\r\n     * @param keys The column names of the CSV.\r\n     * @param rows The data rows that should be part of the CSV.\r\n     * @param customOptions Custom csv options that should be used for export.\r\n     */\r\n    exportAsCsv(keys: string[], rows: ExportRow[], customOptions: CsvExportOptions) {\r\n        const generalExportOptions = {\r\n            showLabels: true,\r\n            showTitle: false,\r\n            filename: `${this.course.title} Scores`,\r\n            useTextFile: false,\r\n            useBom: true,\r\n            columnHeaders: keys,\r\n        };\r\n        const csvExportConfig = mkConfig(Object.assign(generalExportOptions, customOptions));\r\n        const csvData = generateCsv(csvExportConfig)(rows);\r\n        download(csvExportConfig)(csvData);\r\n    }\r\n\r\n    /**\r\n     * Constructs a new builder for a new CSV row.\r\n     * @param csvExportOptions If present, constructs a CSV row builder with these options, otherwise an Excel row builder is returned.\r\n     */\r\n    private newRowBuilder(csvExportOptions?: CsvExportOptions): ExportRowBuilder {\r\n        if (csvExportOptions) {\r\n            return new CsvExportRowBuilder(csvExportOptions.decimalSeparator, this.course.accuracyOfScores);\r\n        } else {\r\n            return new ExcelExportRowBuilder(this.course.accuracyOfScores);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the list of columns that should be part of the exported CSV or Excel file.\r\n     */\r\n    private generateExportColumnNames(): Array<string> {\r\n        const keys = [NAME_KEY, USERNAME_KEY, EMAIL_KEY, REGISTRATION_NUMBER_KEY];\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            keys.push(...this.exercisesPerType.get(exerciseType)!.map((exercise) => exercise.title!));\r\n            keys.push(ExportRowBuilder.getExerciseTypeKey(exerciseType, POINTS_KEY));\r\n            keys.push(ExportRowBuilder.getExerciseTypeKey(exerciseType, SCORE_KEY));\r\n        }\r\n\r\n        if (this.maxNumberOfPresentationPoints > 0) {\r\n            keys.push(PRESENTATION_POINTS_KEY, PRESENTATION_SCORE_KEY);\r\n        }\r\n\r\n        keys.push(COURSE_OVERALL_POINTS_KEY, COURSE_OVERALL_SCORE_KEY);\r\n\r\n        if (this.course.presentationScore) {\r\n            keys.push(PRESENTATION_SCORE_KEY);\r\n        }\r\n\r\n        if (this.gradingScaleExists) {\r\n            keys.push(this.isBonus ? BONUS_KEY : GRADE_KEY);\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    /**\r\n     * Generates a row used in the export file consisting of statistics for the given student.\r\n     * @param student The student for which an export row should be created.\r\n     * @param csvExportOptions If present, generates a CSV row with these options, otherwise an Excel row is generated.\r\n     */\r\n    private generateStudentStatisticsExportRow(student: CourseScoresStudentStatistics, csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const rowData = this.newRowBuilder(csvExportOptions);\r\n\r\n        rowData.setUserInformation(student.user.name, student.user.login, student.user.email, student.user.visibleRegistrationNumber);\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            const exercisePointsPerType = student.sumPointsPerExerciseType.get(exerciseType)!;\r\n\r\n            let exerciseScoresPerType = 0;\r\n            if (this.maxNumberOfPointsPerExerciseType.get(exerciseType)! > 0) {\r\n                exerciseScoresPerType = roundScorePercentSpecifiedByCourseSettings(\r\n                    student.sumPointsPerExerciseType.get(exerciseType)! / this.maxNumberOfPointsPerExerciseType.get(exerciseType)!,\r\n                    this.course,\r\n                );\r\n            }\r\n            const exercisesForType = this.exercisesPerType.get(exerciseType)!;\r\n            exercisesForType.forEach((exercise) => {\r\n                const points = roundValueSpecifiedByCourseSettings(student.pointsPerExerciseType.getValue(exerciseType, exercise), this.course);\r\n                rowData.setPoints(exercise.title!, points);\r\n            });\r\n\r\n            rowData.setExerciseTypePoints(exerciseType, exercisePointsPerType);\r\n            rowData.setExerciseTypeScore(exerciseType, exerciseScoresPerType);\r\n        }\r\n\r\n        if (this.maxNumberOfPresentationPoints > 0) {\r\n            const presentationScore = roundScorePercentSpecifiedByCourseSettings(student.presentationPoints / this.maxNumberOfPresentationPoints, this.course);\r\n            rowData.setPoints(PRESENTATION_POINTS_KEY, student.presentationPoints);\r\n            rowData.setScore(PRESENTATION_SCORE_KEY, presentationScore);\r\n        }\r\n\r\n        const overallScore = roundScorePercentSpecifiedByCourseSettings(student.overallPoints / this.maxNumberOfOverallPoints, this.course);\r\n        rowData.setPoints(COURSE_OVERALL_POINTS_KEY, student.overallPoints);\r\n        rowData.setScore(COURSE_OVERALL_SCORE_KEY, overallScore);\r\n\r\n        if (this.course.presentationScore) {\r\n            rowData.setPoints(PRESENTATION_SCORE_KEY, student.presentationScore);\r\n        }\r\n\r\n        this.setExportRowGradeValue(rowData, student.gradeStep?.gradeName);\r\n\r\n        return rowData.build();\r\n    }\r\n\r\n    /**\r\n     * Generates a row for the exported csv with the maximum values of the various statistics.\r\n     * @param csvExportOptions If present, generates a CSV row with these options, otherwise an Excel row is generated.\r\n     */\r\n    private generateExportRowMaxValues(csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const rowData = this.prepareEmptyExportRow('Max', csvExportOptions);\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            const exercisesForType = this.exercisesPerType.get(exerciseType)!;\r\n            exercisesForType.forEach((exercise) => {\r\n                rowData.setPoints(exercise.title!, this.exerciseMaxPointsPerType.getValue(exerciseType, exercise) ?? 0);\r\n            });\r\n            rowData.setExerciseTypePoints(exerciseType, this.maxNumberOfPointsPerExerciseType.get(exerciseType)!);\r\n            rowData.setExerciseTypeScore(exerciseType, 100);\r\n        }\r\n\r\n        if (this.maxNumberOfPresentationPoints > 0) {\r\n            rowData.setPoints(PRESENTATION_POINTS_KEY, this.maxNumberOfPresentationPoints);\r\n            rowData.setScore(PRESENTATION_SCORE_KEY, 100);\r\n        }\r\n\r\n        rowData.setPoints(COURSE_OVERALL_POINTS_KEY, this.maxNumberOfOverallPoints);\r\n        rowData.setScore(COURSE_OVERALL_SCORE_KEY, 100);\r\n\r\n        if (this.course.presentationScore) {\r\n            rowData.set(PRESENTATION_SCORE_KEY, '');\r\n        }\r\n\r\n        this.setExportRowGradeValue(rowData, this.maxGrade);\r\n\r\n        return rowData.build();\r\n    }\r\n\r\n    /**\r\n     * Generates a row for the exported csv with the average values of the various statistics.\r\n     * @param csvExportOptions If present, generates a CSV row with these options, otherwise an Excel row is generated.\r\n     */\r\n    private generateExportRowAverageValues(csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const rowData = this.prepareEmptyExportRow('Average', csvExportOptions);\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            const exercisesForType = this.exercisesPerType.get(exerciseType)!;\r\n            exercisesForType.forEach((exercise) => {\r\n                const points = roundValueSpecifiedByCourseSettings(this.exerciseAveragePointsPerType.getValue(exerciseType, exercise), this.course);\r\n                rowData.setPoints(exercise.title!, points);\r\n            });\r\n\r\n            const averageScore = roundScorePercentSpecifiedByCourseSettings(\r\n                this.averageNumberOfPointsPerExerciseTypes.get(exerciseType)! / this.maxNumberOfPointsPerExerciseType.get(exerciseType)!,\r\n                this.course,\r\n            );\r\n\r\n            rowData.setExerciseTypePoints(exerciseType, this.averageNumberOfPointsPerExerciseTypes.get(exerciseType)!);\r\n            rowData.setExerciseTypeScore(exerciseType, averageScore);\r\n        }\r\n\r\n        if (this.maxNumberOfPresentationPoints > 0) {\r\n            const averagePresentationScore = roundScorePercentSpecifiedByCourseSettings(this.averageNumberOfPresentationPoints / this.maxNumberOfPresentationPoints, this.course);\r\n            rowData.setPoints(PRESENTATION_POINTS_KEY, this.averageNumberOfPresentationPoints);\r\n            rowData.setScore(PRESENTATION_SCORE_KEY, averagePresentationScore);\r\n        }\r\n\r\n        const averageOverallScore = roundScorePercentSpecifiedByCourseSettings(this.averageNumberOfOverallPoints / this.maxNumberOfOverallPoints, this.course);\r\n        rowData.setPoints(COURSE_OVERALL_POINTS_KEY, this.averageNumberOfOverallPoints);\r\n        rowData.setScore(COURSE_OVERALL_SCORE_KEY, averageOverallScore);\r\n\r\n        if (this.course.presentationScore) {\r\n            rowData.set(PRESENTATION_SCORE_KEY, '');\r\n        }\r\n\r\n        this.setExportRowGradeValue(rowData, this.averageGrade);\r\n\r\n        return rowData.build();\r\n    }\r\n\r\n    /**\r\n     * Generates a row for the exported Csv with information about the number of participants.\r\n     * @param csvExportOptions If present, generates a CSV row with these options, otherwise an Excel row is generated.\r\n     */\r\n    private generateExportRowParticipation(csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const rowData = this.prepareEmptyExportRow('Number of Participations', csvExportOptions);\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            const exercisesForType = this.exercisesPerType.get(exerciseType)!;\r\n            exercisesForType.forEach((exercise) => {\r\n                rowData.setPoints(exercise.title!, this.exerciseParticipationsPerType.getValue(exerciseType, exercise) ?? 0);\r\n            });\r\n            rowData.setExerciseTypePoints(exerciseType, '');\r\n            rowData.setExerciseTypeScore(exerciseType, '');\r\n        }\r\n        this.setExportRowGradeValue(rowData, '');\r\n\r\n        return rowData.build();\r\n    }\r\n\r\n    /**\r\n     * Generates a row for the exported Csv with information about the number of successful participants.\r\n     * @param csvExportOptions If present, generates a CSV row with these options, otherwise an Excel row is generated.\r\n     */\r\n    private generateExportRowSuccessfulParticipation(csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const rowData = this.prepareEmptyExportRow('Number of Successful Participations', csvExportOptions);\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            const exercisesForType = this.exercisesPerType.get(exerciseType)!;\r\n            exercisesForType.forEach((exercise) => {\r\n                rowData.setPoints(exercise.title!, this.exerciseSuccessfulPerType.getValue(exerciseType, exercise) ?? 0);\r\n            });\r\n            rowData.setExerciseTypePoints(exerciseType, '');\r\n            rowData.setExerciseTypeScore(exerciseType, '');\r\n        }\r\n        this.setExportRowGradeValue(rowData, '');\r\n\r\n        return rowData.build();\r\n    }\r\n\r\n    /**\r\n     * Prepares an empty row (except for the first column) with an empty column for each exercise type.\r\n     * @param firstValue The value that should be placed in the first column of the row.\r\n     * @param csvExportOptions If present, generates a CSV row with these options, otherwise an Excel row is generated.\r\n     */\r\n    private prepareEmptyExportRow(firstValue: string, csvExportOptions?: CsvExportOptions): ExportRow {\r\n        const emptyLine = this.newRowBuilder(csvExportOptions);\r\n\r\n        emptyLine.set(NAME_KEY, firstValue);\r\n        emptyLine.set(USERNAME_KEY, '');\r\n        emptyLine.set(EMAIL_KEY, '');\r\n        emptyLine.set(REGISTRATION_NUMBER_KEY, '');\r\n\r\n        for (const exerciseType of this.exerciseTypesWithExercises) {\r\n            const exercisesForType = this.exercisesPerType.get(exerciseType)!;\r\n            exercisesForType.forEach((exercise) => {\r\n                emptyLine.set(exercise.title!, '');\r\n            });\r\n            emptyLine.setExerciseTypePoints(exerciseType, '');\r\n            emptyLine.setExerciseTypeScore(exerciseType, '');\r\n        }\r\n\r\n        if (this.maxNumberOfPresentationPoints > 0) {\r\n            emptyLine.set(PRESENTATION_POINTS_KEY, '');\r\n            emptyLine.set(PRESENTATION_SCORE_KEY, '');\r\n        }\r\n\r\n        emptyLine.set(COURSE_OVERALL_POINTS_KEY, '');\r\n        emptyLine.set(COURSE_OVERALL_SCORE_KEY, '');\r\n\r\n        if (this.course.presentationScore) {\r\n            emptyLine.set(PRESENTATION_SCORE_KEY, '');\r\n        }\r\n        this.setExportRowGradeValue(emptyLine, '');\r\n\r\n        return emptyLine;\r\n    }\r\n\r\n    /**\r\n     * Puts the given value into the grading scale column of the Export row.\r\n     * @param exportRow The row in which the value should be stored.\r\n     * @param value The value that should be stored in the row.\r\n     */\r\n    private setExportRowGradeValue(exportRow: ExportRow, value: string | number | undefined) {\r\n        if (this.gradingScaleExists) {\r\n            if (this.isBonus) {\r\n                exportRow.set(BONUS_KEY, value);\r\n            } else {\r\n                exportRow.set(GRADE_KEY, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compares two exercises to determine which should be first in a sorted list.\r\n     *\r\n     * Compares them by due date first, then title.\r\n     * @param e1 Some exercise.\r\n     * @param e2 Another exercise.\r\n     */\r\n    private static compareExercises(e1: Exercise, e2: Exercise): number {\r\n        if (e1.dueDate! > e2.dueDate!) {\r\n            return 1;\r\n        }\r\n        if (e1.dueDate! < e2.dueDate!) {\r\n            return -1;\r\n        }\r\n        if (e1.title! > e2.title!) {\r\n            return 1;\r\n        }\r\n        if (e1.title! < e2.title!) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Filters the course exercises and returns the exercises that are already released or do not have a release date\r\n     * @param course the course whose exercises are filtered\r\n     */\r\n    private determineReleasedExercises(course: Course): Exercise[] {\r\n        return course.exercises!.filter((exercise) => !exercise.releaseDate || exercise.releaseDate.isBefore(dayjs()));\r\n    }\r\n\r\n    /**\r\n     * Computes the average of given scores and returns it rounded based on course settings\r\n     * @param scores the scores the average should be computed of\r\n     */\r\n    private calculateAverageScore(scores: number[]): number {\r\n        return roundScorePercentSpecifiedByCourseSettings(mean(scores), this.course);\r\n    }\r\n\r\n    /**\r\n     * Computes the average of given points and returns it rounded based on course settings\r\n     * @param points the points the average should be computed of\r\n     */\r\n    private calculateAveragePoints(points: number[]): number {\r\n        return roundValueSpecifiedByCourseSettings(mean(points), this.course);\r\n    }\r\n\r\n    /**\r\n     * Computes the median of given scores and returns it rounded based on course settings\r\n     * @param scores the scores the median should be computed of\r\n     */\r\n    private calculateMedianScore(scores: number[]): number {\r\n        return roundScorePercentSpecifiedByCourseSettings(median(scores), this.course);\r\n    }\r\n\r\n    /**\r\n     * Computes the median of given points and returns it rounded based on course settings\r\n     * @param points the points the median should be computed of\r\n     */\r\n    private calculateMedianPoints(points: number[]): number {\r\n        return roundValueSpecifiedByCourseSettings(median(points), this.course);\r\n    }\r\n\r\n    /**\r\n     * Sets the statistical values displayed in the table next to the distribution chart\r\n     */\r\n    private calculateAverageAndMedianScores(): void {\r\n        const allCoursePoints = sum(this.course.exercises!.map((exercise) => exercise.maxPoints ?? 0)) + this.maxNumberOfPresentationPoints;\r\n        const includedPointsPerStudent = this.students.map((student) => student.overallPoints);\r\n        // average points and score included\r\n        const scores = includedPointsPerStudent.map((point) => point / this.maxNumberOfOverallPoints);\r\n        this.averageScoreIncluded = roundScorePercentSpecifiedByCourseSettings(this.averageNumberOfOverallPoints / this.maxNumberOfOverallPoints, this.course);\r\n\r\n        // average points and score total\r\n        const achievedPointsTotal = this.students.map((student) => sum(Array.from(student.pointsPerExercise.values())) + student.presentationPoints);\r\n        const averageScores = achievedPointsTotal.map((totalPoints) => totalPoints / allCoursePoints);\r\n\r\n        this.averagePointsTotal = this.calculateAveragePoints(achievedPointsTotal);\r\n        this.averageScoreTotal = this.calculateAverageScore(averageScores);\r\n\r\n        // median points and score included\r\n        this.medianPointsIncluded = this.calculateMedianPoints(includedPointsPerStudent);\r\n        this.medianScoreIncluded = this.calculateMedianScore(scores);\r\n\r\n        // median points and score total\r\n        this.medianPointsTotal = this.calculateMedianPoints(achievedPointsTotal);\r\n        this.medianScoreTotal = this.calculateMedianScore(averageScores);\r\n\r\n        // Since these two values are only statistical details, there is no need to make the rounding dependent of the course settings\r\n        // standard deviation points included\r\n        this.standardDeviationPointsIncluded = round(standardDeviation(includedPointsPerStudent), 2);\r\n\r\n        // standard deviation points total\r\n        this.standardDeviationPointsTotal = round(standardDeviation(achievedPointsTotal), 2);\r\n    }\r\n\r\n    /**\r\n     * Handles the case if the user selects either the average or the median in the table next to the chart\r\n     * @param type the statistical type that is selected by the user\r\n     */\r\n    highlightBar(type: HighlightType) {\r\n        if (this.highlightedType === type) {\r\n            this.valueToHighlight = undefined;\r\n            this.highlightedType = HighlightType.NONE;\r\n            this.changeDetector.detectChanges();\r\n            return;\r\n        }\r\n        switch (type) {\r\n            case HighlightType.AVERAGE:\r\n                this.valueToHighlight = this.averageScoreIncluded;\r\n                this.highlightedType = HighlightType.AVERAGE;\r\n                break;\r\n            case HighlightType.MEDIAN:\r\n                this.valueToHighlight = this.medianScoreIncluded;\r\n                this.highlightedType = HighlightType.MEDIAN;\r\n                break;\r\n        }\r\n        this.changeDetector.detectChanges();\r\n    }\r\n}\r\n", "@if (course) {\r\n    <div>\r\n        <div class=\"d-flex align-items-center justify-content-between flex-wrap mb-2\">\r\n            <h4>\r\n                {{ course.title }}\r\n                <small\r\n                    jhiTranslate=\"artemisApp.instructorDashboard.exerciseResultSummery\"\r\n                    [translateValues]=\"{ exercisesLength: exercisesOfCourseThatAreIncludedInScoreCalculation.length, studentsLength: students.length }\"\r\n                    >{{ exercisesOfCourseThatAreIncludedInScoreCalculation.length }} released exercises, {{ students.length }} students with results</small\r\n                >\r\n            </h4>\r\n            @if (course?.isAtLeastInstructor) {\r\n                <a [routerLink]=\"['/course-management', course.id, 'grading-system']\" class=\"btn btn-info btn-md\">\r\n                    <fa-icon [icon]=\"faClipboard\" /> <span jhiTranslate=\"artemisApp.course.gradingSystem\"></span>\r\n                </a>\r\n            }\r\n        </div>\r\n        @if (!exportReady) {\r\n            <span style=\"color: grey\">\r\n                <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />&nbsp;\r\n                <span jhiTranslate=\"artemisApp.instructorDashboard.loadingStudents\"> Loading the results of all students... </span>\r\n            </span>\r\n        }\r\n        <div class=\"row d-flex align-items-center\">\r\n            <div class=\"col-lg-9\">\r\n                <div class=\"text-center\">\r\n                    <h4 jhiTranslate=\"artemisApp.instructorDashboard.courseScoreChart.scoreDistribution\"></h4>\r\n                </div>\r\n                @if (scoresToDisplay) {\r\n                    <jhi-participant-scores-distribution [gradingScale]=\"gradingScale\" [scores]=\"scoresToDisplay\" [scoreToHighlight]=\"valueToHighlight\" />\r\n                }\r\n            </div>\r\n            <div class=\"col-lg-3 mt-3\">\r\n                <table class=\"table table-bordered table-sm table-striped\">\r\n                    <thead class=\"table-dark\">\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.statisticsTable.included\"></span>\r\n                            </th>\r\n                            <th>\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.statisticsTable.total\"></span>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.statisticsTable.amountOfReleasedExercises\"></span>\r\n                            </th>\r\n                            <td>{{ exercisesOfCourseThatAreIncludedInScoreCalculation.length }}</td>\r\n                            <td>{{ this.numberOfReleasedExercises }}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>\r\n                                <div class=\"form-check\">\r\n                                    <input\r\n                                        id=\"highlightBarAvergage\"\r\n                                        type=\"checkbox\"\r\n                                        class=\"form-check-input\"\r\n                                        [checked]=\"highlightedType === highlightType.AVERAGE\"\r\n                                        (click)=\"highlightBar(highlightType.AVERAGE)\"\r\n                                        ngbTooltip=\"{{ 'artemisApp.instructorDashboard.statisticsTable.highlightInChart' | artemisTranslate }}\"\r\n                                    />\r\n                                    <label for=\"highlightBarAvergage\" class=\"form-check-label\" jhiTranslate=\"artemisApp.instructorDashboard.statisticsTable.averagePoints\"\r\n                                        >Average points (score)</label\r\n                                    >\r\n                                </div>\r\n                            </th>\r\n                            <td id=\"average_points\" [ngClass]=\"highlightedType\">\r\n                                {{ roundValueSpecifiedByCourseSettings(this.averageNumberOfOverallPoints, course) }} ({{ this.averageScoreIncluded }}%)\r\n                            </td>\r\n                            <td>{{ this.averagePointsTotal }} ({{ this.averageScoreTotal }}%)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>\r\n                                <div class=\"form-check\">\r\n                                    <input\r\n                                        id=\"highlightBarMedian\"\r\n                                        type=\"checkbox\"\r\n                                        class=\"form-check-input\"\r\n                                        [checked]=\"highlightedType === highlightType.MEDIAN\"\r\n                                        (click)=\"highlightBar(highlightType.MEDIAN)\"\r\n                                        ngbTooltip=\"{{ 'artemisApp.instructorDashboard.statisticsTable.highlightInChart' | artemisTranslate }}\"\r\n                                    />\r\n                                    <label for=\"highlightBarMedian\" class=\"form-check-label\" jhiTranslate=\"artemisApp.instructorDashboard.statisticsTable.medianPoints\"\r\n                                        >Median points (score)</label\r\n                                    >\r\n                                </div>\r\n                            </th>\r\n                            <td id=\"median_points\" [ngClass]=\"highlightedType\">{{ this.medianPointsIncluded }} ({{ this.medianScoreIncluded }}%)</td>\r\n                            <td>{{ this.medianPointsTotal }} ({{ this.medianScoreTotal }}%)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.statisticsTable.standardPointDeviation\"></span>\r\n                            </th>\r\n                            <td>{{ this.standardDeviationPointsIncluded }}</td>\r\n                            <td>{{ this.standardDeviationPointsTotal }}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <div class=\"separator\"></div>\r\n        <div class=\"d-flex justify-content-end\">\r\n            @if (exportReady) {\r\n                <jhi-csv-export-button\r\n                    title=\"entity.action.export\"\r\n                    [icon]=\"faDownload\"\r\n                    [disabled]=\"!(students.length > 0)\"\r\n                    [buttonSize]=\"ButtonSize.SMALL\"\r\n                    (onExport)=\"exportResults($event)\"\r\n                />\r\n            }\r\n        </div>\r\n        @if (exportReady) {\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped\">\r\n                    <thead>\r\n                        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"reverse\" (sortChange)=\"sortRows()\">\r\n                            <th jhiSortBy=\"user.name\">\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.name\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"user.login\">\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.username\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"numberOfParticipatedExercises\">\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.participated\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"numberOfSuccessfulExercises\">\r\n                                <span jhiTranslate=\"artemisApp.instructorDashboard.successful\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            @for (exerciseType of exerciseTypes; track exerciseType) {\r\n                                @if (maxNumberOfPointsPerExerciseType.get(exerciseType)! > 0) {\r\n                                    <th jhiSortBy=\"sumPointsPerExerciseType.{{ exerciseType }}\">\r\n                                        <span jhiTranslate=\"artemisApp.instructorDashboard.{{ exerciseType }}Points\"></span>\r\n                                        <fa-icon [icon]=\"faSort\" />\r\n                                    </th>\r\n                                }\r\n                            }\r\n                            @if (maxNumberOfPresentationPoints > 0) {\r\n                                <th jhiSortBy=\"presentationPoints\"><span jhiTranslate=\"artemisApp.instructorDashboard.presentationPoints\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                            }\r\n                            <th jhiSortBy=\"overallPoints\"><span jhiTranslate=\"artemisApp.instructorDashboard.overallScore\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                            @if (gradingScaleExists) {\r\n                                <th jhiSortBy=\"overallPoints\">\r\n                                    <span\r\n                                        jhiTranslate=\"{{\r\n                                            isBonus ? 'artemisApp.courseScoreCalculation.gradingSystemBonus' : 'artemisApp.courseScoreCalculation.gradingSystemGrade'\r\n                                        }}\"\r\n                                    ></span>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                        </tr>\r\n                        <tr>\r\n                            <th><span jhiTranslate=\"artemisApp.instructorDashboard.max\"></span></th>\r\n                            <th></th>\r\n                            <th>{{ exercisesOfCourseThatAreIncludedInScoreCalculation.length }}</th>\r\n                            <th>{{ exercisesOfCourseThatAreIncludedInScoreCalculation.length }}</th>\r\n                            @for (exerciseType of exerciseTypes; track exerciseType) {\r\n                                @if (maxNumberOfPointsPerExerciseType.get(exerciseType)! > 0) {\r\n                                    <th>{{ maxNumberOfPointsPerExerciseType.get(exerciseType) }}</th>\r\n                                }\r\n                            }\r\n                            @if (maxNumberOfPresentationPoints > 0) {\r\n                                <th>{{ maxNumberOfPresentationPoints }}</th>\r\n                            }\r\n                            <th>{{ maxNumberOfOverallPoints }}</th>\r\n                            @if (gradingScaleExists) {\r\n                                <th>{{ maxGrade }}</th>\r\n                            }\r\n                        </tr>\r\n                        <tr>\r\n                            <th><span jhiTranslate=\"artemisApp.instructorDashboard.average\"></span></th>\r\n                            <th></th>\r\n                            <th>\r\n                                {{ localize(averageNumberOfParticipatedExercises) }}\r\n                                ({{\r\n                                    localize(\r\n                                        roundScorePercentSpecifiedByCourseSettings(\r\n                                            averageNumberOfParticipatedExercises / exercisesOfCourseThatAreIncludedInScoreCalculation.length,\r\n                                            course\r\n                                        )\r\n                                    )\r\n                                }}%)\r\n                            </th>\r\n                            <th>\r\n                                {{ localize(averageNumberOfSuccessfulExercises) }}\r\n                                ({{\r\n                                    localize(\r\n                                        roundScorePercentSpecifiedByCourseSettings(\r\n                                            averageNumberOfSuccessfulExercises / exercisesOfCourseThatAreIncludedInScoreCalculation.length,\r\n                                            course\r\n                                        )\r\n                                    )\r\n                                }}%)\r\n                            </th>\r\n                            @for (exerciseType of exerciseTypes; track exerciseType) {\r\n                                @if (maxNumberOfPointsPerExerciseType.get(exerciseType)! > 0) {\r\n                                    <th>\r\n                                        {{ localize(averageNumberOfPointsPerExerciseTypes.get(exerciseType)!) }}\r\n                                        ({{\r\n                                            localize(\r\n                                                roundScorePercentSpecifiedByCourseSettings(\r\n                                                    averageNumberOfPointsPerExerciseTypes.get(exerciseType)! / maxNumberOfPointsPerExerciseType.get(exerciseType)!,\r\n                                                    course\r\n                                                )\r\n                                            )\r\n                                        }}%)\r\n                                    </th>\r\n                                }\r\n                            }\r\n                            @if (maxNumberOfPresentationPoints > 0) {\r\n                                <th>\r\n                                    {{ localize(averageNumberOfPresentationPoints) }}\r\n                                    ({{ localize(roundScorePercentSpecifiedByCourseSettings(averageNumberOfPresentationPoints / maxNumberOfPresentationPoints, course)) }}%)\r\n                                </th>\r\n                            }\r\n                            <th>\r\n                                {{ localize(averageNumberOfOverallPoints) }}\r\n                                ({{ localize(roundScorePercentSpecifiedByCourseSettings(averageNumberOfOverallPoints / maxNumberOfOverallPoints, course)) }}%)\r\n                            </th>\r\n                            @if (gradingScaleExists) {\r\n                                <th>\r\n                                    {{ averageGrade }}\r\n                                </th>\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (student of students; track student) {\r\n                            <tr>\r\n                                <td>{{ student.user.name }}</td>\r\n                                <td>{{ student.user.login }}</td>\r\n                                <td>\r\n                                    {{ student.numberOfParticipatedExercises }}\r\n                                    ({{\r\n                                        localize(\r\n                                            roundScorePercentSpecifiedByCourseSettings(\r\n                                                student.numberOfParticipatedExercises / exercisesOfCourseThatAreIncludedInScoreCalculation.length,\r\n                                                course\r\n                                            )\r\n                                        )\r\n                                    }}%)\r\n                                </td>\r\n                                <td>\r\n                                    {{ student.numberOfSuccessfulExercises }}\r\n                                    ({{\r\n                                        localize(\r\n                                            roundScorePercentSpecifiedByCourseSettings(\r\n                                                student.numberOfSuccessfulExercises / exercisesOfCourseThatAreIncludedInScoreCalculation.length,\r\n                                                course\r\n                                            )\r\n                                        )\r\n                                    }}%)\r\n                                </td>\r\n                                @for (exerciseType of exerciseTypes; track exerciseType) {\r\n                                    @if (maxNumberOfPointsPerExerciseType.get(exerciseType)! > 0) {\r\n                                        <td>\r\n                                            {{ localize(student.sumPointsPerExerciseType.get(exerciseType)!) }}\r\n                                            ({{\r\n                                                localize(\r\n                                                    roundScorePercentSpecifiedByCourseSettings(\r\n                                                        student.sumPointsPerExerciseType.get(exerciseType)! / maxNumberOfPointsPerExerciseType.get(exerciseType)!,\r\n                                                        course\r\n                                                    )\r\n                                                )\r\n                                            }}%)\r\n                                        </td>\r\n                                    }\r\n                                }\r\n                                @if (maxNumberOfPresentationPoints > 0) {\r\n                                    <td>\r\n                                        {{ localize(student.presentationPoints) }}\r\n                                        ({{ localize(roundScorePercentSpecifiedByCourseSettings(student.presentationPoints / maxNumberOfPresentationPoints, course)) }}%)\r\n                                    </td>\r\n                                }\r\n                                <td>\r\n                                    {{ localize(student.overallPoints) }}\r\n                                    ({{ localize(roundScorePercentSpecifiedByCourseSettings(student.overallPoints / maxNumberOfOverallPoints, course)) }}%)\r\n                                </td>\r\n                                @if (gradingScaleExists) {\r\n                                    <td>\r\n                                        {{ student.gradeStep?.gradeName }}\r\n                                    </td>\r\n                                }\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["ExerciseTypeStatisticsMap", "Map", "getValue", "exerciseType", "exercise", "get", "id", "setValue", "value", "set", "CourseScoresStudentStatistics", "user", "participations", "presentationScore", "presentationPoints", "numberOfParticipatedExercises", "numberOfSuccessfulExercises", "overallPoints", "pointsPerExercise", "Map", "sumPointsPerExerciseType", "scorePerExerciseType", "pointsPerExerciseType", "ExerciseTypeStatisticsMap", "gradeStep", "constructor", "exerciseType", "Object", "values", "ExerciseType", "set", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "ctx_r1", "course", "id", "faClipboard", "faSpinner", "gradingScale", "scoresToDisplay", "valueToHighlight", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "exportResults", "faDownload", "students", "length", "ButtonSize", "SMALL", "\u0275\u0275propertyInterpolate1", "exerciseType_r5", "faSort", "\u0275\u0275template", "CourseScoresComponent_Conditional_0_Conditional_129_For_38_Conditional_1_Template", "\u0275\u0275conditional", "maxNumberOfPointsPerExerciseType", "get", "\u0275\u0275propertyInterpolate", "isBonus", "\u0275\u0275textInterpolate", "exerciseType_r6", "CourseScoresComponent_Conditional_0_Conditional_129_For_61_Conditional_1_Template", "maxNumberOfPresentationPoints", "maxGrade", "\u0275\u0275textInterpolate2", "localize", "averageNumberOfPointsPerExerciseTypes", "exerciseType_r7", "roundScorePercentSpecifiedByCourseSettings", "CourseScoresComponent_Conditional_0_Conditional_129_For_82_Conditional_1_Template", "averageNumberOfPresentationPoints", "\u0275\u0275textInterpolate1", "averageGrade", "student_r9", "sumPointsPerExerciseType", "exerciseType_r8", "CourseScoresComponent_Conditional_0_Conditional_129_For_93_For_16_Conditional_1_Template", "presentationPoints", "gradeStep", "gradeName", "\u0275\u0275repeaterCreate", "CourseScoresComponent_Conditional_0_Conditional_129_For_93_For_16_Template", "\u0275\u0275repeaterTrackByIdentity", "CourseScoresComponent_Conditional_0_Conditional_129_For_93_Conditional_17_Template", "CourseScoresComponent_Conditional_0_Conditional_129_For_93_Conditional_21_Template", "user", "name", "login", "numberOfParticipatedExercises", "exercisesOfCourseThatAreIncludedInScoreCalculation", "numberOfSuccessfulExercises", "\u0275\u0275repeater", "exerciseTypes", "overallPoints", "maxNumberOfOverallPoints", "gradingScaleExists", "\u0275\u0275twoWayListener", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "reverse", "sortRows", "CourseScoresComponent_Conditional_0_Conditional_129_For_38_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Conditional_39_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Conditional_45_Template", "CourseScoresComponent_Conditional_0_Conditional_129_For_61_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Conditional_62_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Conditional_66_Template", "CourseScoresComponent_Conditional_0_Conditional_129_For_82_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Conditional_83_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Conditional_87_Template", "CourseScoresComponent_Conditional_0_Conditional_129_For_93_Template", "\u0275\u0275twoWayProperty", "averageNumberOfParticipatedExercises", "averageNumberOfSuccessfulExercises", "averageNumberOfOverallPoints", "CourseScoresComponent_Conditional_0_Conditional_11_Template", "CourseScoresComponent_Conditional_0_Conditional_13_Template", "CourseScoresComponent_Conditional_0_Conditional_23_Template", "_r1", "highlightBar", "highlightType", "AVERAGE", "MEDIAN", "CourseScoresComponent_Conditional_0_Conditional_127_Template", "CourseScoresComponent_Conditional_0_Conditional_129_Template", "title", "\u0275\u0275pureFunction2", "_c0", "isAtLeastInstructor", "exportReady", "numberOfReleasedExercises", "\u0275\u0275pipeBind1", "highlightedType", "roundValueSpecifiedByCourseSettings", "averageScoreIncluded", "averagePointsTotal", "averageScoreTotal", "medianPointsIncluded", "medianScoreIncluded", "medianPointsTotal", "medianScoreTotal", "standardDeviationPointsIncluded", "standardDeviationPointsTotal", "HighlightType", "CourseScoresComponent", "route", "inject", "ActivatedRoute", "courseService", "CourseManagementService", "sortService", "SortService", "changeDetector", "ChangeDetectorRef", "languageHelper", "JhiLanguageHelper", "localeConversionService", "LocaleConversionService", "participantScoresService", "ParticipantScoresService", "gradingSystemService", "GradingSystemService", "plagiarismCasesService", "PlagiarismCasesService", "paramSub", "languageChangeSubscription", "allParticipationsOfCourse", "exerciseTypesWithExercises", "exerciseSuccessfulPerType", "ExerciseTypeStatisticsMap", "exerciseParticipationsPerType", "exerciseAveragePointsPerType", "exerciseMaxPointsPerType", "exercisesPerType", "Map", "studentIdToCourseScoreDTOs", "NONE", "constructor", "ngOnInit", "params", "subscribe", "findWithExercises", "findWithExercisesResult", "initializeWithCourse", "body", "language", "detectChanges", "ngOnDestroy", "unsubscribe", "sortByProperty", "initializeExerciseTitles", "determineExercisesIncludedInScore", "determineReleasedExercises", "calculateCourseStatistics", "exercises", "titleMap", "exercise", "has", "currentValue", "set", "filter", "isReleasedExercise", "releaseDate", "isBefore", "dayjs", "isExerciseThatCounts", "includedInOverallScore", "IncludedInOverallScore", "NOT_INCLUDED", "sort", "compareExercises", "filterExercisesTypesWithExercises", "exerciseType", "courseId", "findParticipationsObservable", "findAllParticipationsWithResults", "gradingScaleObservable", "findGradingScaleForCourse", "pipe", "catchError", "of", "HttpResponse", "plagiarismCasesObservable", "getCoursePlagiarismCasesForInstructor", "forkJoin", "participationsOfCourse", "gradingScaleResponse", "plagiarismCases", "setUpGradingScale", "calculateExerciseLevelStatistics", "calculateStudentLevelStatistics", "calculateGradingScaleInformation", "undefined", "calculateAverageAndMedianScores", "map", "student", "findCourseScores", "courseScoresResult", "courseScoreDTOs", "compareNewCourseScoresCalculationWithOldCalculation", "courseScoreDTO", "studentId", "checkStudentScoreCalculation", "overAllPoints", "regularCalculation", "scoreAchieved", "pointsAchieved", "userId", "userLogin", "regularPointsAchievable", "Math", "abs", "errorMessage", "JSON", "stringify", "logErrorOnSentry", "captureException", "Error", "exercisesOfType", "type", "maxPointsOfAllExercisesOfType", "forEach", "maxPoints", "maxPointsOfAllIncludedExercisesOfType", "INCLUDED_COMPLETELY", "sum", "maxNumberOfPointsPerExerciseTypeElement", "calculateReachablePresentationPoints", "presentationsNumber", "presentationsWeight", "reachablePresentationPoints", "studentsMap", "mapStudentIdToStudentStatistics", "numberOfParticipationsWithRatedResult", "numberOfSuccessfulParticipations", "push", "updateStudentStatisticsWithExerciseResults", "scorePerExerciseType", "addPresentationPointsForStudent", "average", "averagePoints", "pointsPerExercise", "setValue", "presentationScore", "presentationPointAvg", "participation", "results", "result", "participationStudents", "team", "participationStudent", "CourseScoresStudentStatistics", "participations", "relevantMaxPoints", "find", "part", "pointsAchievedByStudentInExercise", "score", "includedExercise", "includes", "oldPointsSum", "pointsPerExerciseType", "Number", "NaN", "gradeSteps", "sortGradeSteps", "gradeType", "GradeType", "BONUS", "plagiarismMap", "createStudentPlagiarismMap", "overallPercentage", "findMatchingGradeStep", "findStudentGradeStep", "plagiarismGrade", "GradingScale", "DEFAULT_PLAGIARISM_GRADE", "overallPercentageForStudent", "noParticipationGrade", "DEFAULT_NO_PARTICIPATION_GRADE", "plagiarismCase", "verdict", "PlagiarismVerdict", "PLAGIARISM", "numberToLocalize", "toLocaleString", "accuracyOfScores", "customCsvOptions", "rows", "keys", "generateExportColumnNames", "generateStudentStatisticsExportRow", "prepareEmptyExportRow", "build", "generateExportRowMaxValues", "generateExportRowAverageValues", "generateExportRowParticipation", "generateExportRowSuccessfulParticipation", "exportAsCsv", "exportAsExcel", "workbook", "utils", "book_new", "ws", "json_to_sheet", "header", "book_append_sheet", "workbookProps", "Title", "Author", "VERSION", "fileName", "writeFile", "Props", "compression", "customOptions", "generalExportOptions", "showLabels", "showTitle", "filename", "useTextFile", "useBom", "columnHeaders", "csvExportConfig", "mkConfig", "Object", "assign", "csvData", "generateCsv", "download", "newRowBuilder", "csvExportOptions", "CsvExportRowBuilder", "decimalSeparator", "ExcelExportRowBuilder", "NAME_KEY", "USERNAME_KEY", "EMAIL_KEY", "REGISTRATION_NUMBER_KEY", "ExportRowBuilder", "getExerciseTypeKey", "POINTS_KEY", "SCORE_KEY", "PRESENTATION_POINTS_KEY", "PRESENTATION_SCORE_KEY", "COURSE_OVERALL_POINTS_KEY", "COURSE_OVERALL_SCORE_KEY", "BONUS_KEY", "GRADE_KEY", "rowData", "setUserInformation", "email", "visibleRegistrationNumber", "exercisePointsPerType", "exerciseScoresPerType", "points", "getValue", "setPoints", "setExerciseTypePoints", "setExerciseTypeScore", "setScore", "overallScore", "setExportRowGradeValue", "averageScore", "averagePresentationScore", "averageOverallScore", "firstValue", "emptyLine", "exportRow", "value", "e1", "e2", "dueDate", "calculateAverageScore", "scores", "mean", "calculateAveragePoints", "calculateMedianScore", "median", "calculateMedianPoints", "allCoursePoints", "includedPointsPerStudent", "point", "achievedPointsTotal", "Array", "from", "values", "averageScores", "totalPoints", "round", "standardDeviation", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "CourseScoresComponent_Conditional_0_Template", "TranslateDirective", "RouterLink", "FaIconComponent", "ParticipantScoresDistributionComponent", "NgbTooltip", "NgClass", "ExportButtonComponent", "SortDirective", "SortByDirective", "ArtemisTranslatePipe", "styles", "changeDetection"]
}
