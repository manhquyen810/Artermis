{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/ide-preferences/ide-settings.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable, lastValueFrom } from 'rxjs';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Ide, IdeMappingDTO } from 'app/shared/user-settings/ide-preferences/ide.model';\r\nimport { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IdeSettingsService {\r\n    private http = inject(HttpClient);\r\n\r\n    public readonly ideSettingsUrl = 'api/programming/ide-settings';\r\n\r\n    // cached value of the ide preferences to avoid unnecessary requests to the server\r\n    private idePreferences?: Map<ProgrammingLanguage, Ide>;\r\n\r\n    /**\r\n     * GET call to the server to receive the stored ide preferences of the current user\r\n     * @return the saved ide preference which were found in the database or error\r\n     */\r\n    public loadPredefinedIdes(): Observable<Ide[]> {\r\n        return this.http.get<Ide[]>(this.ideSettingsUrl + '/predefined');\r\n    }\r\n\r\n    private ongoingRequest: Promise<Map<ProgrammingLanguage, Ide>> | undefined = undefined;\r\n    private cacheTimestamp: number | undefined = undefined; // To store the timestamp when the preferences were loaded\r\n    private readonly cacheDuration = 60 * 1000; // 1 minute in milliseconds\r\n\r\n    /**\r\n     * GET call to the server to receive the stored ide preferences of the current user\r\n     * Prevent concurrent requests by caching the ongoing request and the timestamp when the preferences were loaded\r\n     * Load the settings again after 1min in case they have changed\r\n     * @param force if true, the cache will be ignored and a new request will be made\r\n     * @return the saved ide preference which were found in the database or error\r\n     */\r\n    public loadIdePreferences(force?: boolean): Promise<Map<ProgrammingLanguage, Ide>> {\r\n        const currentTime = new Date().getTime();\r\n\r\n        // If preferences are already loaded and the cache is valid, return them immediately\r\n        if (this.idePreferences && !force && this.cacheTimestamp && currentTime - this.cacheTimestamp < this.cacheDuration) {\r\n            return Promise.resolve(this.idePreferences);\r\n        }\r\n\r\n        // If there's already an ongoing request, return that promise to prevent multiple calls\r\n        if (this.ongoingRequest) {\r\n            return this.ongoingRequest;\r\n        }\r\n\r\n        // Make the REST call and cache the ongoing request\r\n        this.ongoingRequest = lastValueFrom(\r\n            this.http.get<IdeMappingDTO[]>(this.ideSettingsUrl).pipe(\r\n                map((data) => {\r\n                    this.idePreferences = new Map<ProgrammingLanguage, Ide>(data.map((x) => [x.programmingLanguage, x.ide]));\r\n                    this.cacheTimestamp = new Date().getTime(); // Update the timestamp when the data is cached\r\n                    return this.idePreferences;\r\n                }),\r\n            ),\r\n        ).finally(() => {\r\n            // Clear the ongoingRequest once the promise resolves\r\n            this.ongoingRequest = undefined;\r\n        });\r\n\r\n        return this.ongoingRequest;\r\n    }\r\n\r\n    /**\r\n     * PUT call to the server to update a stored ide preferences of the current user\r\n     * @param programmingLanguage the programming language for which the ide preference should be updated\r\n     * @param ide the new ide preference\r\n     * @return the newly saved ide preference or error\r\n     */\r\n    public saveIdePreference(programmingLanguage: ProgrammingLanguage, ide: Ide): Observable<Ide> {\r\n        const params = new HttpParams().set('programmingLanguage', programmingLanguage);\r\n        return this.http.put<IdeMappingDTO>(this.ideSettingsUrl, ide, { params }).pipe(\r\n            map((res) => {\r\n                return res.ide;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * DELETE call to the server to delete an ide preference of the current user\r\n     * @param programmingLanguage the programming language for which the ide preference should be deleted\r\n     * @return the deleted ide preference or error\r\n     */\r\n    public deleteIdePreference(programmingLanguage: ProgrammingLanguage): Observable<HttpResponse<void>> {\r\n        const params = new HttpParams().set('programmingLanguage', programmingLanguage);\r\n        return this.http.delete<void>(this.ideSettingsUrl, { params, observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "8GAQA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACnBC,KAAOC,EAAOC,CAAU,EAEhBC,eAAiB,+BAGzBC,eAMDC,oBAAkB,CACrB,OAAO,KAAKL,KAAKM,IAAW,KAAKH,eAAiB,aAAa,CACnE,CAEQI,eAAqEC,OACrEC,eAAqCD,OAC5BE,cAAgB,GAAK,IAS/BC,mBAAmBC,EAAe,CACrC,IAAMC,EAAc,IAAIC,KAAI,EAAGC,QAAO,EAGtC,OAAI,KAAKX,gBAAkB,CAACQ,GAAS,KAAKH,gBAAkBI,EAAc,KAAKJ,eAAiB,KAAKC,cAC1FM,QAAQC,QAAQ,KAAKb,cAAc,EAI1C,KAAKG,eACE,KAAKA,gBAIhB,KAAKA,eAAiBW,EAClB,KAAKlB,KAAKM,IAAqB,KAAKH,cAAc,EAAEgB,KAChDC,EAAKC,IACD,KAAKjB,eAAiB,IAAIkB,IAA8BD,EAAKD,IAAKG,GAAM,CAACA,EAAEC,oBAAqBD,EAAEE,GAAG,CAAC,CAAC,EACvG,KAAKhB,eAAiB,IAAIK,KAAI,EAAGC,QAAO,EACjC,KAAKX,eACf,CAAC,CACL,EACHsB,QAAQ,IAAK,CAEX,KAAKnB,eAAiBC,MAC1B,CAAC,EAEM,KAAKD,eAChB,CAQOoB,kBAAkBH,EAA0CC,EAAQ,CACvE,IAAMG,EAAS,IAAIC,EAAU,EAAGC,IAAI,sBAAuBN,CAAmB,EAC9E,OAAO,KAAKxB,KAAK+B,IAAmB,KAAK5B,eAAgBsB,EAAK,CAAEG,OAAAA,CAAM,CAAE,EAAET,KACtEC,EAAKY,GACMA,EAAIP,GACd,CAAC,CAEV,CAOOQ,oBAAoBT,EAAwC,CAC/D,IAAMI,EAAS,IAAIC,EAAU,EAAGC,IAAI,sBAAuBN,CAAmB,EAC9E,OAAO,KAAKxB,KAAKkC,OAAa,KAAK/B,eAAgB,CAAEyB,OAAAA,EAAQO,QAAS,UAAU,CAAE,CACtF,4CAhFSpC,EAAkB,6BAAlBA,EAAkBqC,QAAlBrC,EAAkBsC,UAAAC,WADL,MAAM,CAAA,SACnBvC,CAAkB,GAAA",
  "names": ["IdeSettingsService", "http", "inject", "HttpClient", "ideSettingsUrl", "idePreferences", "loadPredefinedIdes", "get", "ongoingRequest", "undefined", "cacheTimestamp", "cacheDuration", "loadIdePreferences", "force", "currentTime", "Date", "getTime", "Promise", "resolve", "lastValueFrom", "pipe", "map", "data", "Map", "x", "programmingLanguage", "ide", "finally", "saveIdePreference", "params", "HttpParams", "set", "put", "res", "deleteIdePreference", "delete", "observe", "factory", "\u0275fac", "providedIn"]
}
