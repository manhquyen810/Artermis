{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/util/download.util.ts"],
  "sourcesContent": ["import { HttpResponse } from '@angular/common/http';\r\nimport JSZip from 'jszip';\r\n\r\nexport function downloadZipFileFromResponse(response: HttpResponse<Blob>): void {\r\n    if (response.body) {\r\n        const zipFile = new Blob([response.body], { type: 'application/zip' });\r\n        downloadFile(zipFile, response.headers.get('filename')!);\r\n    }\r\n}\r\n\r\n/**\r\n * Make a file of given blob and allows user to download it from the browser.\r\n * @param blob data to be written in file.\r\n * @param filename suggested to the browser.\r\n */\r\nexport function downloadFile(blob: Blob, filename: string) {\r\n    // Create an url and attach file to it,\r\n    const url = window.URL.createObjectURL(blob);\r\n    const anchor = document.createElement('a');\r\n    anchor.href = url;\r\n    anchor.download = filename;\r\n    document.body.appendChild(anchor); // For FF\r\n    // Click the url so that browser shows save file dialog,\r\n    anchor.click();\r\n    document.body.removeChild(anchor);\r\n    window.URL.revokeObjectURL(url);\r\n}\r\n\r\nexport function downloadStream(data: any, type: string, filename: string) {\r\n    const blob = new Blob([data], { type });\r\n    downloadFile(blob, `${filename || 'file'}.pdf`);\r\n}\r\n\r\nexport function downloadZipFromFilePromises(zip: JSZip, filePromises: Promise<void | File>[], zipFileName: string) {\r\n    Promise.allSettled(filePromises).then(() => {\r\n        zip.generateAsync({ type: 'blob' })\r\n            .then((zipBlob) => {\r\n                downloadFile(zipBlob, `${zipFileName}.zip`);\r\n            })\r\n            .catch((error) => {\r\n                throw new Error(`Failed to create Zip File`, error);\r\n            });\r\n    });\r\n}\r\n"],
  "mappings": "AAGM,SAAUA,EAA4BC,EAA4B,CACpE,GAAIA,EAASC,KAAM,CACf,IAAMC,EAAU,IAAIC,KAAK,CAACH,EAASC,IAAI,EAAG,CAAEG,KAAM,iBAAiB,CAAE,EACrEC,EAAaH,EAASF,EAASM,QAAQC,IAAI,UAAU,CAAE,CAC3D,CACJ,CAOM,SAAUF,EAAaG,EAAYC,EAAgB,CAErD,IAAMC,EAAMC,OAAOC,IAAIC,gBAAgBL,CAAI,EACrCM,EAASC,SAASC,cAAc,GAAG,EACzCF,EAAOG,KAAOP,EACdI,EAAOI,SAAWT,EAClBM,SAASd,KAAKkB,YAAYL,CAAM,EAEhCA,EAAOM,MAAK,EACZL,SAASd,KAAKoB,YAAYP,CAAM,EAChCH,OAAOC,IAAIU,gBAAgBZ,CAAG,CAClC,CAEM,SAAUa,EAAeC,EAAWpB,EAAcK,EAAgB,CACpE,IAAMD,EAAO,IAAIL,KAAK,CAACqB,CAAI,EAAG,CAAEpB,KAAAA,CAAI,CAAE,EACtCC,EAAaG,EAAM,GAAGC,GAAY,MAAM,MAAM,CAClD,CAEM,SAAUgB,EAA4BC,EAAYC,EAAsCC,EAAmB,CAC7GC,QAAQC,WAAWH,CAAY,EAAEI,KAAK,IAAK,CACvCL,EAAIM,cAAc,CAAE5B,KAAM,MAAM,CAAE,EAC7B2B,KAAME,GAAW,CACd5B,EAAa4B,EAAS,GAAGL,CAAW,MAAM,CAC9C,CAAC,EACAM,MAAOC,GAAS,CACb,MAAM,IAAIC,MAAM,4BAA6BD,CAAK,CACtD,CAAC,CACT,CAAC,CACL",
  "names": ["downloadZipFileFromResponse", "response", "body", "zipFile", "Blob", "type", "downloadFile", "headers", "get", "blob", "filename", "url", "window", "URL", "createObjectURL", "anchor", "document", "createElement", "href", "download", "appendChild", "click", "removeChild", "revokeObjectURL", "downloadStream", "data", "downloadZipFromFilePromises", "zip", "filePromises", "zipFileName", "Promise", "allSettled", "then", "generateAsync", "zipBlob", "catch", "error", "Error"]
}
