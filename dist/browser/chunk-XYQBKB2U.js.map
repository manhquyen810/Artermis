{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/participate/exam-participation-live-events.service.ts", "src/main/webapp/app/exam/shared/events/exam-live-event.component.ts", "src/main/webapp/app/exam/shared/events/exam-live-event.component.html"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ConnectionState, WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { BehaviorSubject, Observable, Subject, Subscription, distinct, filter, map, tap } from 'rxjs';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\n\r\nconst EVENT_ACKNOWLEDGEMENT_LOCAL_STORAGE_KEY = 'examLastAcknowledgedEvent';\r\n\r\ntype UnixAcknowledgeTimestamps = { system: number; user: number };\r\nexport type AcknowledgeTimestamps = { system?: dayjs.Dayjs; user?: dayjs.Dayjs };\r\ntype StudentExamAcknowledgedEvents = { lastChange: number; acknowledgedEvents: { [eventId: string]: UnixAcknowledgeTimestamps } };\r\n\r\nexport enum ExamLiveEventType {\r\n    EXAM_WIDE_ANNOUNCEMENT = 'examWideAnnouncement',\r\n    WORKING_TIME_UPDATE = 'workingTimeUpdate',\r\n    EXAM_ATTENDANCE_CHECK = 'examAttendanceCheck',\r\n    PROBLEM_STATEMENT_UPDATE = 'problemStatementUpdate',\r\n}\r\n\r\nexport type ExamLiveEvent = {\r\n    id: number;\r\n    createdDate: dayjs.Dayjs;\r\n    eventType: ExamLiveEventType;\r\n    acknowledgeTimestamps?: AcknowledgeTimestamps;\r\n    user?: User;\r\n};\r\n\r\nexport type ExamWideAnnouncementEvent = ExamLiveEvent & {\r\n    text: string;\r\n};\r\n\r\nexport type ExamAttendanceCheckEvent = ExamLiveEvent & {\r\n    text: string;\r\n};\r\n\r\nexport type WorkingTimeUpdateEvent = ExamLiveEvent & {\r\n    oldWorkingTime: number;\r\n    newWorkingTime: number;\r\n    courseWide: boolean;\r\n};\r\n\r\nexport type ProblemStatementUpdateEvent = ExamLiveEvent & {\r\n    text: string;\r\n    problemStatement: string;\r\n    exerciseId: number;\r\n    exerciseName: string;\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExamParticipationLiveEventsService {\r\n    private websocketService = inject(WebsocketService);\r\n    private examParticipationService = inject(ExamParticipationService);\r\n    private localStorageService = inject(LocalStorageService);\r\n    private httpClient = inject(HttpClient);\r\n\r\n    private courseId?: number;\r\n    private examId?: number;\r\n    private studentExamId?: number;\r\n    private studentExam?: StudentExam;\r\n    private lastAcknowledgedEventStatus?: StudentExamAcknowledgedEvents;\r\n\r\n    private currentWebsocketChannels?: string[];\r\n    private currentWebsocketReceiveSubscriptions?: Subscription[];\r\n\r\n    private events: ExamLiveEvent[] = [];\r\n\r\n    // Subject that emits events for the user to acknowledge\r\n    private newUserEventSubject = new Subject<ExamLiveEvent>();\r\n\r\n    // Subject that emits events for the system to acknowledge\r\n    private newSystemEventSubject = new Subject<ExamLiveEvent>();\r\n\r\n    // Subject that emits all events when the array of events changes\r\n    private allEventsSubject = new BehaviorSubject<ExamLiveEvent[]>([]);\r\n\r\n    constructor() {\r\n        this.clearOldAcknowledgement();\r\n\r\n        // Listen to updates of the connection state; if we reconnect, we should fetch the list of events\r\n        // to replay any missed events\r\n        this.websocketService.connectionState.subscribe((connectionState: ConnectionState) => {\r\n            if (connectionState.connected && connectionState.wasEverConnectedBefore && this.studentExamId) {\r\n                setTimeout(() => this.fetchPreviousExamEvents(), 5000);\r\n            }\r\n        });\r\n\r\n        this.examParticipationService.currentlyLoadedStudentExam.subscribe((studentExam) => {\r\n            // Ignore updates if the loaded student exam is the same as the one we already have\r\n            if (studentExam?.id === this.studentExamId) {\r\n                return;\r\n            }\r\n\r\n            // The loaded student exam is different, so we need to reset the state\r\n            this.lastAcknowledgedEventStatus = undefined;\r\n            this.unsubscribeFromExamLiveEvents();\r\n            this.events = [];\r\n\r\n            // If we have a new student exam, we need to subscribe to the new websocket channel\r\n            // and fetch the previous exam events\r\n            // Note: This feature is not available for test runs\r\n            if (studentExam && !studentExam.testRun) {\r\n                this.studentExamId = studentExam.id;\r\n                this.examId = studentExam.exam?.id;\r\n                this.courseId = studentExam.exam?.course?.id;\r\n                this.studentExam = studentExam;\r\n\r\n                if (!this.studentExamId || !this.examId || !this.courseId) {\r\n                    throw new Error('ExamParticipationLiveEventsService: Received invalid values for student exam id, exam id or course id');\r\n                }\r\n\r\n                this.lastAcknowledgedEventStatus = this.getLastAcknowledgedEventOfStudentExam();\r\n\r\n                setTimeout(() => {\r\n                    this.fetchPreviousExamEvents();\r\n                    this.subscribeToExamLiveEvents();\r\n                }, 5000); // We wait a bit before fetching events to avoid overloading anything\r\n            } else {\r\n                this.allEventsSubject.next([]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public acknowledgeEvent(event: ExamLiveEvent, byUser: boolean) {\r\n        if (!this.lastAcknowledgedEventStatus) {\r\n            this.lastAcknowledgedEventStatus = {\r\n                lastChange: -1,\r\n                acknowledgedEvents: {},\r\n            };\r\n        }\r\n\r\n        const nowUnix = dayjs().unix();\r\n        const eventAcknowledgement = this.lastAcknowledgedEventStatus.acknowledgedEvents[String(event.id)] || { system: 0, user: 0 };\r\n\r\n        if (byUser) {\r\n            eventAcknowledgement.user = nowUnix;\r\n        } else {\r\n            eventAcknowledgement.system = nowUnix;\r\n        }\r\n\r\n        this.lastAcknowledgedEventStatus.acknowledgedEvents[String(event.id)] = eventAcknowledgement;\r\n        this.lastAcknowledgedEventStatus.lastChange = nowUnix;\r\n\r\n        this.setEventAcknowledgeTimestamps(event);\r\n\r\n        this.storeLastAcknowledgedEventsOfStudentExam();\r\n    }\r\n\r\n    private subscribeToExamLiveEvents() {\r\n        this.currentWebsocketChannels = [`/topic/exam-participation/studentExam/${this.studentExamId}/events`, `/topic/exam-participation/exam/${this.examId}/events`];\r\n        this.currentWebsocketReceiveSubscriptions = this.currentWebsocketChannels.map((channel) => {\r\n            this.websocketService.subscribe(channel);\r\n            return this.websocketService.receive(channel).subscribe((event: ExamLiveEvent) => this.receiveExamLiveEvent(event));\r\n        });\r\n    }\r\n\r\n    private receiveExamLiveEvent(event: ExamLiveEvent) {\r\n        if (this.events.some((e) => e.id === event.id)) {\r\n            return;\r\n        }\r\n\r\n        event.createdDate = convertDateFromServer(event.createdDate)!;\r\n        event.user = this.studentExam?.user;\r\n\r\n        this.events.unshift(event);\r\n        this.newSystemEventSubject.next(event);\r\n        this.newUserEventSubject.next(event);\r\n        this.allEventsSubject.next(this.events);\r\n    }\r\n\r\n    private unsubscribeFromExamLiveEvents() {\r\n        this.currentWebsocketReceiveSubscriptions?.forEach((subscription) => subscription.unsubscribe());\r\n        this.currentWebsocketReceiveSubscriptions = undefined;\r\n\r\n        this.currentWebsocketChannels?.forEach((channel) => this.websocketService.unsubscribe(channel));\r\n        this.currentWebsocketChannels = undefined;\r\n    }\r\n\r\n    private fetchPreviousExamEvents() {\r\n        this.httpClient.get<ExamLiveEvent[]>(`/api/exam/courses/${this.courseId}/exams/${this.examId}/student-exams/live-events`).subscribe((events: ExamLiveEvent[]) => {\r\n            this.events = events;\r\n            this.events.forEach((event) => {\r\n                event.createdDate = convertDateFromServer(event.createdDate)!;\r\n            });\r\n\r\n            // Replay events so unacknowledged events can be processed\r\n            this.replayEvents();\r\n\r\n            this.allEventsSubject.next(this.events);\r\n        });\r\n    }\r\n\r\n    private replayEvents() {\r\n        this.events.forEach((event) => {\r\n            this.newSystemEventSubject.next(event);\r\n            this.newUserEventSubject.next(event);\r\n        });\r\n    }\r\n\r\n    private storeLastAcknowledgedEventsOfStudentExam() {\r\n        const examLastAcknowledgedEvents = this.loadAcknowledgedEventsMapFromLocalStorage();\r\n        examLastAcknowledgedEvents[String(this.studentExamId!)] = this.lastAcknowledgedEventStatus!;\r\n        this.localStorageService.store(EVENT_ACKNOWLEDGEMENT_LOCAL_STORAGE_KEY, JSON.stringify(examLastAcknowledgedEvents));\r\n    }\r\n\r\n    private loadAcknowledgedEventsMapFromLocalStorage(): { [studentExamId: string]: StudentExamAcknowledgedEvents } {\r\n        const fromStorage = this.localStorageService.retrieve(EVENT_ACKNOWLEDGEMENT_LOCAL_STORAGE_KEY);\r\n        return fromStorage ? JSON.parse(fromStorage) : {};\r\n    }\r\n\r\n    private getLastAcknowledgedEventOfStudentExam(): StudentExamAcknowledgedEvents | undefined {\r\n        const examLastAcknowledgedEventMap = this.loadAcknowledgedEventsMapFromLocalStorage();\r\n        return examLastAcknowledgedEventMap[this.studentExamId!];\r\n    }\r\n\r\n    /**\r\n     * Clears entries from the acknowledgement array that are older than a day for housekeeping purposes\r\n     */\r\n    private clearOldAcknowledgement() {\r\n        const examLastAcknowledgedEvent = this.loadAcknowledgedEventsMapFromLocalStorage();\r\n        const yesterday = dayjs().subtract(1, 'day').unix();\r\n        for (const studentExamId in examLastAcknowledgedEvent) {\r\n            if (examLastAcknowledgedEvent[studentExamId].lastChange < yesterday) {\r\n                delete examLastAcknowledgedEvent[studentExamId];\r\n            }\r\n        }\r\n        this.localStorageService.store(EVENT_ACKNOWLEDGEMENT_LOCAL_STORAGE_KEY, JSON.stringify(examLastAcknowledgedEvent));\r\n    }\r\n\r\n    public observeNewEventsAsSystem(eventTypes: ExamLiveEventType[] = []): Observable<ExamLiveEvent> {\r\n        const observable = this.newSystemEventSubject.asObservable().pipe(\r\n            filter(\r\n                (event: ExamLiveEvent) =>\r\n                    !this.lastAcknowledgedEventStatus?.acknowledgedEvents[String(event.id)]?.system && (eventTypes.length === 0 || eventTypes.includes(event.eventType)),\r\n            ),\r\n            tap((event: ExamLiveEvent) => this.setEventAcknowledgeTimestamps(event)),\r\n            distinct((event) => event.id),\r\n        );\r\n        setTimeout(() => this.replayEvents());\r\n        return observable;\r\n    }\r\n\r\n    public observeNewEventsAsUser(eventTypes: ExamLiveEventType[] = [], examStartDate: dayjs.Dayjs): Observable<ExamLiveEvent> {\r\n        const observable = this.newUserEventSubject.asObservable().pipe(\r\n            filter(\r\n                (event: ExamLiveEvent) =>\r\n                    !this.lastAcknowledgedEventStatus?.acknowledgedEvents[String(event.id)]?.user &&\r\n                    (eventTypes.length === 0 || eventTypes.includes(event.eventType)) &&\r\n                    !(event.eventType === ExamLiveEventType.PROBLEM_STATEMENT_UPDATE && event.createdDate.isBefore(examStartDate)),\r\n            ),\r\n            tap((event: ExamLiveEvent) => this.setEventAcknowledgeTimestamps(event)),\r\n            distinct((event) => event.id),\r\n        );\r\n        setTimeout(() => this.replayEvents());\r\n        return observable;\r\n    }\r\n\r\n    public observeAllEvents(eventTypes: ExamLiveEventType[] = []): Observable<ExamLiveEvent[]> {\r\n        return this.allEventsSubject.asObservable().pipe(\r\n            map((events: ExamLiveEvent[]) => (eventTypes.length === 0 ? events : events.filter((event) => eventTypes.includes(event.eventType)))),\r\n            tap((events: ExamLiveEvent[]) => events.forEach((event) => this.setEventAcknowledgeTimestamps(event))),\r\n        );\r\n    }\r\n\r\n    private setEventAcknowledgeTimestamps(event: ExamLiveEvent) {\r\n        const unixTimestamps = this.lastAcknowledgedEventStatus?.acknowledgedEvents[String(event.id)];\r\n        if (!unixTimestamps) {\r\n            return;\r\n        }\r\n        event.acknowledgeTimestamps = {\r\n            system: unixTimestamps.system > 0 ? dayjs.unix(unixTimestamps.system) : undefined,\r\n            user: unixTimestamps.user > 0 ? dayjs.unix(unixTimestamps.user) : undefined,\r\n        };\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { faCheck, faEye, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    ExamAttendanceCheckEvent,\r\n    ExamLiveEvent,\r\n    ExamLiveEventType,\r\n    ExamWideAnnouncementEvent,\r\n    ProblemStatementUpdateEvent,\r\n    WorkingTimeUpdateEvent,\r\n} from 'app/exam/participate/exam-participation-live-events.service';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { WorkingTimeChangeComponent } from '../working-time-change/working-time-change.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-live-event',\r\n    templateUrl: './exam-live-event.component.html',\r\n    styleUrls: ['./exam-live-event.component.scss'],\r\n    imports: [NgClass, TranslateDirective, FaIconComponent, WorkingTimeChangeComponent, ArtemisDatePipe, ArtemisTranslatePipe, HtmlForMarkdownPipe],\r\n})\r\nexport class ExamLiveEventComponent {\r\n    @Input()\r\n    event: ExamLiveEvent;\r\n\r\n    @Input()\r\n    showAcknowledge = false;\r\n\r\n    @Output()\r\n    onAcknowledge = new EventEmitter<ExamLiveEvent>();\r\n\r\n    @Output()\r\n    onNavigate = new EventEmitter<ExamLiveEvent>();\r\n\r\n    protected readonly ExamLiveEventType = ExamLiveEventType;\r\n\r\n    // Icons\r\n    faCheck = faCheck;\r\n    faPaperPlane = faPaperPlane;\r\n    faEye = faEye;\r\n\r\n    get examWideAnnouncementEvent(): ExamWideAnnouncementEvent {\r\n        return this.event as ExamWideAnnouncementEvent;\r\n    }\r\n\r\n    get examAttendanceCheckEvent(): ExamAttendanceCheckEvent {\r\n        return this.event as ExamAttendanceCheckEvent;\r\n    }\r\n\r\n    get workingTimeUpdateEvent(): WorkingTimeUpdateEvent {\r\n        return this.event as WorkingTimeUpdateEvent;\r\n    }\r\n\r\n    get problemStatementUpdateEvent(): ProblemStatementUpdateEvent {\r\n        return this.event as ProblemStatementUpdateEvent;\r\n    }\r\n\r\n    acknowledgeEvent() {\r\n        this.onAcknowledge.emit(this.event);\r\n    }\r\n\r\n    navigateToExercise() {\r\n        this.onNavigate.emit(this.event);\r\n    }\r\n}\r\n", "<div class=\"event-wrapper\" [ngClass]=\"event.eventType\">\r\n    <div class=\"headline\">\r\n        <div class=\"type\">\r\n            {{ 'artemisApp.exam.events.type.' + event.eventType | artemisTranslate }}\r\n        </div>\r\n    </div>\r\n    <div class=\"date\">\r\n        <span><fa-icon [icon]=\"faPaperPlane\" /> {{ event.createdDate | artemisDate }}</span>\r\n        @if (event.acknowledgeTimestamps?.user) {\r\n            <span>| <fa-icon [icon]=\"faEye\" /> {{ event.acknowledgeTimestamps!.user! | artemisDate: 'time' }}</span>\r\n        }\r\n    </div>\r\n    <div class=\"content\">\r\n        @switch (event.eventType) {\r\n            @case (ExamLiveEventType.EXAM_WIDE_ANNOUNCEMENT) {\r\n                <div [innerHTML]=\"examWideAnnouncementEvent.text | htmlForMarkdown\"></div>\r\n            }\r\n            @case (ExamLiveEventType.WORKING_TIME_UPDATE) {\r\n                <div>\r\n                    @if (workingTimeUpdateEvent.courseWide) {\r\n                        <div jhiTranslate=\"artemisApp.exam.events.messages.workingTimeUpdate.titleEveryone\" class=\"wt-title\"></div>\r\n                    }\r\n                    @if (!workingTimeUpdateEvent.courseWide) {\r\n                        <div jhiTranslate=\"artemisApp.exam.events.messages.workingTimeUpdate.titlePersonal\" class=\"wt-title\"></div>\r\n                    }\r\n                    <jhi-working-time-change [oldWorkingTime]=\"workingTimeUpdateEvent.oldWorkingTime\" [newWorkingTime]=\"workingTimeUpdateEvent.newWorkingTime\" />\r\n                </div>\r\n            }\r\n            @case (ExamLiveEventType.EXAM_ATTENDANCE_CHECK) {\r\n                <div>\r\n                    <div jhiTranslate=\"artemisApp.exam.events.messages.examAttendanceCheck.description\" class=\"wt-title\"></div>\r\n                    @if (event.user) {\r\n                        <table class=\"table table-borderless mx-auto\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th jhiTranslate=\"artemisApp.studentExamDetail.name\"></th>\r\n                                    <td>{{ event.user?.firstName }} {{ event.user?.lastName }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th jhiTranslate=\"artemisApp.studentExamDetail.login\"></th>\r\n                                    <td>{{ event.user?.login }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th jhiTranslate=\"artemisApp.studentExamDetail.email\"></th>\r\n                                    <td>{{ event.user?.email }}</td>\r\n                                </tr>\r\n                                @if (event.user?.visibleRegistrationNumber) {\r\n                                    <tr>\r\n                                        <th jhiTranslate=\"artemisApp.studentExamDetail.matriculationNumber\"></th>\r\n                                        <td>{{ event.user?.visibleRegistrationNumber }}</td>\r\n                                    </tr>\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    }\r\n                </div>\r\n            }\r\n            @case (ExamLiveEventType.PROBLEM_STATEMENT_UPDATE) {\r\n                <div>\r\n                    <div\r\n                        jhiTranslate=\"artemisApp.exam.events.messages.problemStatementUpdate.description\"\r\n                        [translateValues]=\"{ exerciseName: problemStatementUpdateEvent.exerciseName }\"\r\n                    ></div>\r\n                    @if (problemStatementUpdateEvent.text) {\r\n                        <div jhiTranslate=\"artemisApp.exam.events.messages.problemStatementUpdate.instructorMessage\"></div>\r\n                        <div [innerHTML]=\"problemStatementUpdateEvent.text | htmlForMarkdown\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        }\r\n    </div>\r\n    <div class=\"d-flex gap-2\">\r\n        @if (showAcknowledge) {\r\n            <button class=\"btn btn-primary w-100 mt-2\" (click)=\"acknowledgeEvent()\">\r\n                <fa-icon [icon]=\"faCheck\" />\r\n                <span jhiTranslate=\"artemisApp.exam.events.acknowledge\"></span>\r\n            </button>\r\n        }\r\n        @if (event.eventType === ExamLiveEventType.PROBLEM_STATEMENT_UPDATE) {\r\n            <button class=\"btn btn-primary w-100 mt-2\" (click)=\"navigateToExercise()\">\r\n                <span jhiTranslate=\"artemisApp.exam.events.navigateToExercise\"></span>\r\n            </button>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["EVENT_ACKNOWLEDGEMENT_LOCAL_STORAGE_KEY", "ExamLiveEventType", "ExamParticipationLiveEventsService", "websocketService", "inject", "WebsocketService", "examParticipationService", "ExamParticipationService", "localStorageService", "LocalStorageService", "httpClient", "HttpClient", "courseId", "examId", "studentExamId", "studentExam", "lastAcknowledgedEventStatus", "currentWebsocketChannels", "currentWebsocketReceiveSubscriptions", "events", "newUserEventSubject", "Subject", "newSystemEventSubject", "allEventsSubject", "BehaviorSubject", "constructor", "clearOldAcknowledgement", "connectionState", "subscribe", "connected", "wasEverConnectedBefore", "setTimeout", "fetchPreviousExamEvents", "currentlyLoadedStudentExam", "id", "undefined", "unsubscribeFromExamLiveEvents", "testRun", "exam", "course", "Error", "getLastAcknowledgedEventOfStudentExam", "subscribeToExamLiveEvents", "next", "acknowledgeEvent", "event", "byUser", "lastChange", "acknowledgedEvents", "nowUnix", "dayjs", "unix", "eventAcknowledgement", "String", "system", "user", "setEventAcknowledgeTimestamps", "storeLastAcknowledgedEventsOfStudentExam", "map", "channel", "receive", "receiveExamLiveEvent", "some", "e", "createdDate", "convertDateFromServer", "unshift", "forEach", "subscription", "unsubscribe", "get", "replayEvents", "examLastAcknowledgedEvents", "loadAcknowledgedEventsMapFromLocalStorage", "store", "JSON", "stringify", "fromStorage", "retrieve", "parse", "examLastAcknowledgedEvent", "yesterday", "subtract", "observeNewEventsAsSystem", "eventTypes", "observable", "asObservable", "pipe", "filter", "length", "includes", "eventType", "tap", "distinct", "observeNewEventsAsUser", "examStartDate", "PROBLEM_STATEMENT_UPDATE", "isBefore", "observeAllEvents", "unixTimestamps", "acknowledgeTimestamps", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faEye", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "event", "acknowledgeTimestamps", "user", "\u0275\u0275pipeBind1", "examWideAnnouncementEvent", "text", "\u0275\u0275sanitizeHtml", "\u0275\u0275template", "ExamLiveEventComponent_Case_21_Conditional_3_Template", "ExamLiveEventComponent_Case_21_Conditional_4_Template", "\u0275\u0275conditional", "workingTimeUpdateEvent", "courseWide", "oldWorkingTime", "newWorkingTime", "\u0275\u0275textInterpolate", "visibleRegistrationNumber", "ExamLiveEventComponent_Case_22_Conditional_5_Conditional_29_Template", "\u0275\u0275textInterpolate2", "firstName", "lastName", "login", "email", "ExamLiveEventComponent_Case_22_Conditional_5_Template", "problemStatementUpdateEvent", "ExamLiveEventComponent_Case_23_Conditional_5_Template", "\u0275\u0275pureFunction1", "_c0", "exerciseName", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "acknowledgeEvent", "faCheck", "_r3", "navigateToExercise", "ExamLiveEventComponent", "showAcknowledge", "onAcknowledge", "EventEmitter", "onNavigate", "ExamLiveEventType", "faPaperPlane", "examAttendanceCheckEvent", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ExamLiveEventComponent_Conditional_16_Template", "ExamLiveEventComponent_Case_20_Template", "ExamLiveEventComponent_Case_21_Template", "ExamLiveEventComponent_Case_22_Template", "ExamLiveEventComponent_Case_23_Template", "ExamLiveEventComponent_Conditional_28_Template", "ExamLiveEventComponent_Conditional_29_Template", "eventType", "createdDate", "tmp_5_0", "EXAM_WIDE_ANNOUNCEMENT", "WORKING_TIME_UPDATE", "EXAM_ATTENDANCE_CHECK", "PROBLEM_STATEMENT_UPDATE", "NgClass", "TranslateDirective", "FaIconComponent", "WorkingTimeChangeComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "HtmlForMarkdownPipe", "styles"]
}
