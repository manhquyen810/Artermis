{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/orion/orion-build-and-test.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { BuildLogService } from 'app/exercises/programming/shared/service/build-log.service';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { BuildLogEntryArray } from 'app/entities/programming/build-log.model';\r\nimport { ProgrammingExercise, ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { OrionConnectorService } from 'app/shared/orion/orion-connector.service';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\n\r\n/**\r\n * Notifies the IDE about a result, that is currently building and forwards incoming test results.\r\n *\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrionBuildAndTestService {\r\n    private submissionService = inject(ProgrammingSubmissionService);\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n    private orionConnectorService = inject(OrionConnectorService);\r\n    private buildLogService = inject(BuildLogService);\r\n\r\n    private buildFinished = new Subject<void>();\r\n    private resultSubscription: Subscription;\r\n    private buildLogSubscription: Subscription;\r\n    private latestResult: Result;\r\n\r\n    /**\r\n     * Trigger a new build for a participation for an exercise and notify the IDE\r\n     *\r\n     * @param exercise The exercise for which a build should get triggered\r\n     */\r\n    buildAndTestExercise(exercise: ProgrammingExercise) {\r\n        const participationId = exercise.studentParticipations![0].id!;\r\n        // Trigger a build for the current participation\r\n        this.submissionService.triggerBuild(participationId).subscribe();\r\n\r\n        this.listenOnBuildOutputAndForwardChanges(exercise);\r\n    }\r\n\r\n    /**\r\n     * Listens on any new builds for the user's participation on the websocket and forwards incoming results to the IDE\r\n     *\r\n     * @param exercise The exercise for which build results should get forwarded\r\n     * @param participation The (optional) participation to subscribe to. The default is the first student participation\r\n     */\r\n    listenOnBuildOutputAndForwardChanges(exercise: ProgrammingExercise, participation?: Participation): Observable<void> {\r\n        const participationId = participation ? participation.id! : exercise.studentParticipations![0].id!;\r\n        this.orionConnectorService.onBuildStarted(exercise.problemStatement!);\r\n\r\n        // Listen for the new result on the websocket\r\n        if (this.resultSubscription) {\r\n            this.resultSubscription.unsubscribe();\r\n        }\r\n        if (this.buildLogSubscription) {\r\n            this.buildLogSubscription.unsubscribe();\r\n        }\r\n        this.resultSubscription = this.participationWebsocketService\r\n            .subscribeForLatestResultOfParticipation(participationId, true)\r\n            .pipe(\r\n                filter(Boolean),\r\n                map((result) => result as Result),\r\n                filter((result) => !this.latestResult || this.latestResult.id! < result.id!),\r\n                tap((result) => {\r\n                    this.latestResult = result;\r\n                    // If there was a compile error or we don't have a submission, we have to fetch the error output, otherwise we can forward the test results\r\n                    if (!result.submission || (result.submission as ProgrammingSubmission).buildFailed) {\r\n                        this.forwardBuildLogs(participationId, exercise.programmingLanguage, exercise.projectType);\r\n                    } else {\r\n                        // TODO: Deal with static code analysis feedback in Orion\r\n                        const testCaseFeedback = result.feedbacks!.filter((feedback) => Feedback.isTestCaseFeedback(feedback));\r\n                        testCaseFeedback.forEach((feedback) => this.orionConnectorService.onTestResult(!!feedback.positive, feedback.testCase!.testName!, feedback.detailText!));\r\n                        this.orionConnectorService.onBuildFinished();\r\n                        this.buildFinished.next();\r\n                    }\r\n                    this.participationWebsocketService.unsubscribeForLatestResultOfParticipation(participationId, exercise);\r\n                }),\r\n            )\r\n            .subscribe();\r\n\r\n        return this.buildFinished;\r\n    }\r\n\r\n    private forwardBuildLogs(participationId: number, programmingLanguage?: ProgrammingLanguage, projectType?: ProjectType) {\r\n        this.buildLogSubscription = this.buildLogService\r\n            .getBuildLogs(participationId)\r\n            .pipe(\r\n                map((logs) => new BuildLogEntryArray(...logs)),\r\n                tap((logs: BuildLogEntryArray) => {\r\n                    const logErrors = logs.extractErrors(programmingLanguage, projectType);\r\n                    this.orionConnectorService.onBuildFailed(logErrors);\r\n                    this.buildFinished.next();\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n}\r\n"],
  "mappings": "8TAqBA,IAAaA,GAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACzBC,kBAAoBC,EAAOC,CAA4B,EACvDC,8BAAgCF,EAAOG,CAA6B,EACpEC,sBAAwBJ,EAAOK,CAAqB,EACpDC,gBAAkBN,EAAOO,CAAe,EAExCC,cAAgB,IAAIC,EACpBC,mBACAC,qBACAC,aAORC,qBAAqBC,EAA6B,CAC9C,IAAMC,EAAkBD,EAASE,sBAAuB,CAAC,EAAEC,GAE3D,KAAKlB,kBAAkBmB,aAAaH,CAAe,EAAEI,UAAS,EAE9D,KAAKC,qCAAqCN,CAAQ,CACtD,CAQAM,qCAAqCN,EAA+BO,EAA6B,CAC7F,IAAMN,EAAkBM,EAAgBA,EAAcJ,GAAMH,EAASE,sBAAuB,CAAC,EAAEC,GAC/F,YAAKb,sBAAsBkB,eAAeR,EAASS,gBAAiB,EAGhE,KAAKb,oBACL,KAAKA,mBAAmBc,YAAW,EAEnC,KAAKb,sBACL,KAAKA,qBAAqBa,YAAW,EAEzC,KAAKd,mBAAqB,KAAKR,8BAC1BuB,wCAAwCV,EAAiB,EAAI,EAC7DW,KACGC,EAAOC,OAAO,EACdC,EAAKC,GAAWA,CAAgB,EAChCH,EAAQG,GAAW,CAAC,KAAKlB,cAAgB,KAAKA,aAAaK,GAAMa,EAAOb,EAAG,EAC3Ec,EAAKD,GAAU,CACX,KAAKlB,aAAekB,EAEhB,CAACA,EAAOE,YAAeF,EAAOE,WAAqCC,YACnE,KAAKC,iBAAiBnB,EAAiBD,EAASqB,oBAAqBrB,EAASsB,WAAW,GAGhEN,EAAOO,UAAWV,OAAQW,GAAaC,EAASC,mBAAmBF,CAAQ,CAAC,EACpFG,QAASH,GAAa,KAAKlC,sBAAsBsC,aAAa,CAAC,CAACJ,EAASK,SAAUL,EAASM,SAAUC,SAAWP,EAASQ,UAAW,CAAC,EACvJ,KAAK1C,sBAAsB2C,gBAAe,EAC1C,KAAKvC,cAAcwC,KAAI,GAE3B,KAAK9C,8BAA8B+C,0CAA0ClC,EAAiBD,CAAQ,CAC1G,CAAC,CAAC,EAELK,UAAS,EAEP,KAAKX,aAChB,CAEQ0B,iBAAiBnB,EAAyBoB,EAA2CC,EAAyB,CAClH,KAAKzB,qBAAuB,KAAKL,gBAC5B4C,aAAanC,CAAe,EAC5BW,KACGG,EAAKsB,GAAS,IAAIC,EAAmB,GAAGD,CAAI,CAAC,EAC7CpB,EAAKoB,GAA4B,CAC7B,IAAME,EAAYF,EAAKG,cAAcnB,EAAqBC,CAAW,EACrE,KAAKhC,sBAAsBmD,cAAcF,CAAS,EAClD,KAAK7C,cAAcwC,KAAI,CAC3B,CAAC,CAAC,EAEL7B,UAAS,CAClB,4CA/ESrB,EAAwB,6BAAxBA,EAAwB0D,QAAxB1D,EAAwB2D,UAAAC,WAFrB,MAAM,CAAA,SAET5D,CAAwB,GAAA",
  "names": ["OrionBuildAndTestService", "submissionService", "inject", "ProgrammingSubmissionService", "participationWebsocketService", "ParticipationWebsocketService", "orionConnectorService", "OrionConnectorService", "buildLogService", "BuildLogService", "buildFinished", "Subject", "resultSubscription", "buildLogSubscription", "latestResult", "buildAndTestExercise", "exercise", "participationId", "studentParticipations", "id", "triggerBuild", "subscribe", "listenOnBuildOutputAndForwardChanges", "participation", "onBuildStarted", "problemStatement", "unsubscribe", "subscribeForLatestResultOfParticipation", "pipe", "filter", "Boolean", "map", "result", "tap", "submission", "buildFailed", "forwardBuildLogs", "programmingLanguage", "projectType", "feedbacks", "feedback", "Feedback", "isTestCaseFeedback", "forEach", "onTestResult", "positive", "testCase", "testName", "detailText", "onBuildFinished", "next", "unsubscribeForLatestResultOfParticipation", "getBuildLogs", "logs", "BuildLogEntryArray", "logErrors", "extractErrors", "onBuildFailed", "factory", "\u0275fac", "providedIn"]
}
