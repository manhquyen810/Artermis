{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-question.component.ts", "src/main/webapp/app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-question.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { QuizQuestion, RenderedQuizQuestionMarkDownElement } from 'app/entities/quiz/quiz-question.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { faExclamationCircle, faExclamationTriangle, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCheckSquare, faCircle, faDotCircle, faSquare } from '@fortawesome/free-regular-svg-icons';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbPopover, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { QuizScoringInfoStudentModalComponent } from '../quiz-scoring-infostudent-modal/quiz-scoring-info-student-modal.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-multiple-choice-question',\r\n    templateUrl: './multiple-choice-question.component.html',\r\n    styleUrls: ['./multiple-choice-question.component.scss', '../../../participate/quiz-participation.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [NgClass, TranslateDirective, NgbPopover, FaIconComponent, QuizScoringInfoStudentModalComponent, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class MultipleChoiceQuestionComponent {\r\n    private artemisMarkdown = inject(ArtemisMarkdownService);\r\n\r\n    _question: MultipleChoiceQuestion;\r\n\r\n    @Input()\r\n    set question(question: MultipleChoiceQuestion) {\r\n        this._question = question;\r\n        this.watchCollection();\r\n    }\r\n    get question(): MultipleChoiceQuestion {\r\n        return this._question;\r\n    }\r\n    // TODO: Map vs. Array --> consistency\r\n    @Input()\r\n    selectedAnswerOptions: AnswerOption[];\r\n    @Input()\r\n    clickDisabled: boolean;\r\n    @Input()\r\n    showResult: boolean;\r\n    @Input()\r\n    questionIndex: number;\r\n    @Input()\r\n    score: number;\r\n    @Input()\r\n    forceSampleSolution: boolean;\r\n    @Input()\r\n    fnOnSelection: any;\r\n    @Input()\r\n    submittedResult: Result;\r\n    @Input()\r\n    quizQuestions: QuizQuestion[] | undefined;\r\n\r\n    @Output()\r\n    selectedAnswerOptionsChange = new EventEmitter<AnswerOption[]>();\r\n\r\n    renderedQuestion: RenderedQuizQuestionMarkDownElement;\r\n\r\n    // Icons\r\n    faQuestionCircle = faQuestionCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faExclamationCircle = faExclamationCircle;\r\n    faSquare = faSquare;\r\n    faCheckSquare = faCheckSquare;\r\n    faCircle = faCircle;\r\n    faDotCircle = faDotCircle;\r\n\r\n    /**\r\n     * Update html for text, hint and explanation for the question and every answer option\r\n     */\r\n    watchCollection(): void {\r\n        this.renderedQuestion = new RenderedQuizQuestionMarkDownElement();\r\n        this.renderedQuestion.text = this.artemisMarkdown.safeHtmlForMarkdown(this.question.text);\r\n        this.renderedQuestion.hint = this.artemisMarkdown.safeHtmlForMarkdown(this.question.hint);\r\n        this.renderedQuestion.explanation = this.artemisMarkdown.safeHtmlForMarkdown(this.question.explanation);\r\n        this.renderedQuestion.renderedSubElements = this.question.answerOptions!.map((answerOption) => {\r\n            const renderedAnswerOption = new RenderedQuizQuestionMarkDownElement();\r\n            renderedAnswerOption.text = this.artemisMarkdown.safeHtmlForMarkdown(answerOption.text);\r\n            renderedAnswerOption.hint = this.artemisMarkdown.safeHtmlForMarkdown(answerOption.hint);\r\n            renderedAnswerOption.explanation = this.artemisMarkdown.safeHtmlForMarkdown(answerOption.explanation);\r\n            return renderedAnswerOption;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toggles the selection state of a multiple choice answer option\r\n     * @param answerOption The answer option to toggle\r\n     */\r\n    toggleSelection(answerOption: AnswerOption): void {\r\n        if (this.clickDisabled) {\r\n            // Do nothing\r\n            return;\r\n        }\r\n        if (this.isAnswerOptionSelected(answerOption)) {\r\n            this.selectedAnswerOptions = this.selectedAnswerOptions.filter((selectedAnswerOption) => {\r\n                if (answerOption.id) {\r\n                    return selectedAnswerOption.id !== answerOption.id;\r\n                }\r\n                return selectedAnswerOption !== answerOption;\r\n            });\r\n        } else if (this.isSingleChoice) {\r\n            this.selectedAnswerOptions = [answerOption];\r\n        } else {\r\n            this.selectedAnswerOptions.push(answerOption);\r\n        }\r\n        this.selectedAnswerOptionsChange.emit(this.selectedAnswerOptions);\r\n        /** Only execute the onSelection function if we received such input **/\r\n        if (this.fnOnSelection) {\r\n            this.fnOnSelection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Getter whether the given answer option is selected\r\n     * @param answerOption Answer option to be checked for selection state\r\n     */\r\n    isAnswerOptionSelected(answerOption: AnswerOption): boolean {\r\n        return (\r\n            this.selectedAnswerOptions.findIndex((selectedAnswerOption) => {\r\n                if (answerOption.id) {\r\n                    return selectedAnswerOption.id === answerOption.id;\r\n                }\r\n                return selectedAnswerOption === answerOption;\r\n            }) !== -1\r\n        );\r\n    }\r\n\r\n    get isSingleChoice() {\r\n        return this.question.singleChoice;\r\n    }\r\n}\r\n", "<div\r\n    class=\"mc-question markdown-preview\"\r\n    [ngClass]=\"{ disabled: clickDisabled && !showResult, result: showResult && !forceSampleSolution, incorrect: (score || 0) < question.points! && !forceSampleSolution }\"\r\n>\r\n    <h4 class=\"question-title-display\">\r\n        <span>{{ questionIndex }})</span> {{ question.title }}\r\n    </h4>\r\n    <p [innerHTML]=\"renderedQuestion.text\"></p>\r\n    @if (question.invalid) {\r\n        <span style=\"color: red\" jhiTranslate=\"artemisApp.quizQuestion.invalidText\"></span>\r\n    }\r\n    @if (!isSingleChoice) {\r\n        <h6 jhiTranslate=\"artemisApp.quizQuestion.allOptions\"></h6>\r\n    }\r\n    @if (isSingleChoice) {\r\n        <h6 jhiTranslate=\"artemisApp.quizQuestion.singleOption\"></h6>\r\n    }\r\n    @if (question.hint || (question.explanation && showResult)) {\r\n        <div class=\"hint\">\r\n            <ng-template #renderedHint>\r\n                <div [innerHTML]=\"renderedQuestion.hint\"></div>\r\n            </ng-template>\r\n            @if (question.hint) {\r\n                <span class=\"label label-info\" [ngbPopover]=\"renderedHint\" triggers=\"mouseenter:mouseleave\">\r\n                    <fa-icon [icon]=\"faQuestionCircle\" />\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.hint\"></span>\r\n                </span>\r\n            }\r\n            <br />\r\n            <ng-template #renderedExplanation>\r\n                <div [innerHTML]=\"renderedQuestion.explanation\"></div>\r\n            </ng-template>\r\n            @if (question.explanation && showResult) {\r\n                <span class=\"label label-primary\" [ngbPopover]=\"renderedExplanation\" placement=\"right auto\" triggers=\"mouseenter:mouseleave\">\r\n                    <fa-icon [icon]=\"faExclamationCircle\" />\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.explanation\"></span>\r\n                </span>\r\n            }\r\n        </div>\r\n    }\r\n    @if (!showResult || forceSampleSolution) {\r\n        <div class=\"question-score\">\r\n            <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n            <span>{{ question.points }}</span>\r\n        </div>\r\n    }\r\n    @if (showResult && !forceSampleSolution) {\r\n        <div class=\"question-score result\" [ngClass]=\"{ incorrect: (score || 0) < question.points! }\">\r\n            <span jhiTranslate=\"artemisApp.quizQuestion.yourScore\" class=\"colon-suffix\"></span>\r\n            <span class=\"show-explanation\">{{ score || 0 }}/{{ question.points }}</span>\r\n            <span class=\"show-explanation\">\r\n                <jhi-quiz-scoring-infostudent-modal\r\n                    [score]=\"score\"\r\n                    [question]=\"question\"\r\n                    [multipleChoiceMapping]=\"selectedAnswerOptions\"\r\n                    [questionIndex]=\"questionIndex\"\r\n                    [multipleChoiceSubmittedResult]=\"submittedResult\"\r\n                    [quizQuestions]=\"quizQuestions\"\r\n                />\r\n            </span>\r\n        </div>\r\n    }\r\n    @if (!showResult) {\r\n        <div class=\"answer-options\">\r\n            @for (answerOption of question.answerOptions; track answerOption; let i = $index) {\r\n                <div\r\n                    id=\"answer-option-{{ i }}\"\r\n                    class=\"answer-option\"\r\n                    [ngClass]=\"{ 'click-disabled': clickDisabled, selected: isAnswerOptionSelected(answerOption) }\"\r\n                    (click)=\"toggleSelection(answerOption)\"\r\n                >\r\n                    <div class=\"content\">\r\n                        <div class=\"text\" [innerHTML]=\"renderedQuestion.renderedSubElements[i]?.text ?? ''\"></div>\r\n                        <div class=\"hint\">\r\n                            <ng-template #renderedAnswerOptionsHint>\r\n                                <div [innerHTML]=\"renderedQuestion.renderedSubElements[i]?.hint ?? ''\"></div>\r\n                            </ng-template>\r\n                            @if (answerOption.hint) {\r\n                                <span class=\"label label-info\" [ngbPopover]=\"renderedAnswerOptionsHint\" triggers=\"mouseenter:mouseleave\">\r\n                                    <fa-icon [icon]=\"faQuestionCircle\" />\r\n                                    <span jhiTranslate=\"artemisApp.quizQuestion.hint\"></span>\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"selection\" id=\"mc-answer-selection-{{ i }}\">\r\n                        @if (isAnswerOptionSelected(answerOption)) {\r\n                            <fa-icon [icon]=\"question.singleChoice ? faDotCircle : faCheckSquare\" size=\"2x\" />\r\n                        }\r\n                        @if (!isAnswerOptionSelected(answerOption)) {\r\n                            <fa-icon [icon]=\"question.singleChoice ? faCircle : faSquare\" size=\"2x\" />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (showResult) {\r\n        <table class=\"answer-options-result\">\r\n            <tr>\r\n                <th class=\"content\" jhiTranslate=\"artemisApp.multipleChoiceQuestion.answer\"></th>\r\n                <th class=\"solution\" jhiTranslate=\"artemisApp.multipleChoiceQuestion.solution\"></th>\r\n                @if (!forceSampleSolution) {\r\n                    <th class=\"result-symbol\"></th>\r\n                }\r\n                @if (!forceSampleSolution) {\r\n                    <th class=\"selection\" jhiTranslate=\"artemisApp.multipleChoiceQuestion.you\"></th>\r\n                }\r\n            </tr>\r\n            @for (answerOption of question.answerOptions; track answerOption; let i = $index) {\r\n                <tr class=\"answer-option\" id=\"answer-option-{{ i }}\">\r\n                    <td class=\"content\">\r\n                        <div class=\"text\" [innerHTML]=\"renderedQuestion.renderedSubElements![i].text\"></div>\r\n                        <div class=\"hint\">\r\n                            <ng-template #renderedAnswerOptionsHint2>\r\n                                <div [innerHTML]=\"renderedQuestion.renderedSubElements![i].hint\"></div>\r\n                            </ng-template>\r\n                            @if (answerOption.hint) {\r\n                                <span class=\"label label-info\" [ngbPopover]=\"renderedAnswerOptionsHint2\" triggers=\"mouseenter:mouseleave\">\r\n                                    <fa-icon [icon]=\"faQuestionCircle\" />\r\n                                    <span jhiTranslate=\"artemisApp.quizQuestion.hint\"></span>\r\n                                </span>\r\n                            }\r\n                            <ng-template #renderedAnswerOptionsExplanation>\r\n                                <div [innerHTML]=\"renderedQuestion.renderedSubElements![i].explanation\"></div>\r\n                            </ng-template>\r\n                            @if (answerOption.explanation) {\r\n                                <span class=\"label label-primary\" [ngbPopover]=\"renderedAnswerOptionsExplanation\" triggers=\"mouseenter:mouseleave\">\r\n                                    <fa-icon [icon]=\"faExclamationCircle\" />\r\n                                    <span jhiTranslate=\"artemisApp.quizQuestion.explanation\"></span>\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"solution\">\r\n                        @if (!answerOption.invalid && !question.invalid && answerOption.isCorrect) {\r\n                            <span id=\"answer-option-{{ i }}-correct\" class=\"correct\" jhiTranslate=\"artemisApp.multipleChoiceQuestion.correct\"></span>\r\n                        }\r\n                        @if (!answerOption.invalid && !question.invalid && !answerOption.isCorrect) {\r\n                            <span id=\"answer-option-{{ i }}-wrong\" class=\"wrong\" jhiTranslate=\"artemisApp.multipleChoiceQuestion.wrong\"></span>\r\n                        }\r\n                        @if (answerOption.invalid || question.invalid) {\r\n                            <span id=\"answer-option-{{ i }}-invalid\" class=\"wrong\" jhiTranslate=\"artemisApp.quizQuestion.invalid\"></span>\r\n                        }\r\n                        @if (answerOption.invalid || question.invalid) {\r\n                            <fa-icon ngbTooltip=\"{{ 'artemisApp.multipleChoiceQuestion.invalid' | artemisTranslate }}\" style=\"color: black\" [icon]=\"faQuestionCircle\" />\r\n                        }\r\n                    </td>\r\n                    @if (!forceSampleSolution) {\r\n                        <td class=\"result-symbol\">\r\n                            @if (\r\n                                !question.invalid &&\r\n                                !answerOption.invalid &&\r\n                                ((isAnswerOptionSelected(answerOption) && !answerOption.isCorrect) || (!isAnswerOptionSelected(answerOption) && answerOption.isCorrect))\r\n                            ) {\r\n                                <fa-icon size=\"2x\" [icon]=\"faExclamationTriangle\" class=\"warning\" />\r\n                            }\r\n                        </td>\r\n                    }\r\n                    @if (!forceSampleSolution) {\r\n                        <td class=\"selection\">\r\n                            @if (isAnswerOptionSelected(answerOption)) {\r\n                                <fa-icon [icon]=\"question.singleChoice ? faDotCircle : faCheckSquare\" size=\"2x\" />\r\n                            }\r\n                            @if (!isAnswerOptionSelected(answerOption)) {\r\n                                <fa-icon [icon]=\"question.singleChoice ? faCircle : faSquare\" size=\"2x\" />\r\n                            }\r\n                        </td>\r\n                    }\r\n                </tr>\r\n            }\r\n        </table>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "renderedQuestion", "hint", "\u0275\u0275sanitizeHtml", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "renderedHint_r2", "faQuestionCircle", "explanation", "renderedExplanation_r3", "faExclamationCircle", "\u0275\u0275template", "MultipleChoiceQuestionComponent_Conditional_13_ng_template_3_Template", "\u0275\u0275templateRefExtractor", "MultipleChoiceQuestionComponent_Conditional_13_Conditional_6_Template", "MultipleChoiceQuestionComponent_Conditional_13_ng_template_9_Template", "MultipleChoiceQuestionComponent_Conditional_13_Conditional_12_Template", "\u0275\u0275conditional", "question", "showResult", "\u0275\u0275textInterpolate", "points", "\u0275\u0275pureFunction1", "_c1", "score", "\u0275\u0275textInterpolate2", "selectedAnswerOptions", "questionIndex", "submittedResult", "quizQuestions", "tmp_14_0", "renderedSubElements", "\u0275$index_115_r6", "undefined", "renderedAnswerOptionsHint_r7", "singleChoice", "faDotCircle", "faCheckSquare", "faCircle", "faSquare", "\u0275\u0275listener", "answerOption_r5", "\u0275\u0275restoreView", "_r4", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleSelection", "MultipleChoiceQuestionComponent_Conditional_16_For_4_ng_template_9_Template", "MultipleChoiceQuestionComponent_Conditional_16_For_4_Conditional_12_Template", "MultipleChoiceQuestionComponent_Conditional_16_For_4_Conditional_17_Template", "MultipleChoiceQuestionComponent_Conditional_16_For_4_Conditional_18_Template", "\u0275\u0275propertyInterpolate1", "\u0275\u0275pureFunction2", "_c2", "clickDisabled", "isAnswerOptionSelected", "tmp_15_0", "text", "\u0275\u0275repeaterCreate", "MultipleChoiceQuestionComponent_Conditional_16_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "answerOptions", "\u0275$index_191_r8", "renderedAnswerOptionsHint2_r9", "renderedAnswerOptionsExplanation_r10", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faExclamationTriangle", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_26_Conditional_3_Template", "invalid", "answerOption_r11", "isCorrect", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_27_Conditional_3_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_27_Conditional_4_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_ng_template_9_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_12_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_ng_template_13_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_16_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_21_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_22_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_23_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_24_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_26_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Conditional_27_Template", "forceSampleSolution", "MultipleChoiceQuestionComponent_Conditional_17_Conditional_9_Template", "MultipleChoiceQuestionComponent_Conditional_17_Conditional_10_Template", "MultipleChoiceQuestionComponent_Conditional_17_For_13_Template", "MultipleChoiceQuestionComponent", "artemisMarkdown", "inject", "ArtemisMarkdownService", "_question", "watchCollection", "fnOnSelection", "selectedAnswerOptionsChange", "EventEmitter", "RenderedQuizQuestionMarkDownElement", "safeHtmlForMarkdown", "map", "answerOption", "renderedAnswerOption", "filter", "selectedAnswerOption", "id", "isSingleChoice", "push", "emit", "findIndex", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "MultipleChoiceQuestionComponent_Conditional_10_Template", "MultipleChoiceQuestionComponent_Conditional_11_Template", "MultipleChoiceQuestionComponent_Conditional_12_Template", "MultipleChoiceQuestionComponent_Conditional_13_Template", "MultipleChoiceQuestionComponent_Conditional_14_Template", "MultipleChoiceQuestionComponent_Conditional_15_Template", "MultipleChoiceQuestionComponent_Conditional_16_Template", "MultipleChoiceQuestionComponent_Conditional_17_Template", "\u0275\u0275pureFunction3", "_c0", "\u0275\u0275textInterpolate1", "title", "NgClass", "TranslateDirective", "NgbPopover", "FaIconComponent", "QuizScoringInfoStudentModalComponent", "NgbTooltip", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
