{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/manage/tutor-effort/tutor-effort-statistics.component.ts", "src/main/webapp/app/exercises/text/manage/tutor-effort/tutor-effort-statistics.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { TutorEffort } from 'app/entities/tutor-effort.model';\r\nimport { TextExerciseService } from 'app/exercises/text/manage/text-exercise/text-exercise.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TextAssessmentService } from 'app/exercises/text/assess/text-assessment.service';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { PlagiarismAndTutorEffortDirective } from 'app/exercises/shared/plagiarism/plagiarism-run-details/plagiarism-and-tutor-effort.directive';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { median } from 'simple-statistics';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ninterface TutorEffortRange {\r\n    minimumTimeSpent: number;\r\n    maximumTimeSpent?: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-text-exercise-tutor-effort-statistics',\r\n    templateUrl: './tutor-effort-statistics.component.html',\r\n    styleUrls: ['./tutor-effort-statistics.component.scss'],\r\n    imports: [TranslateDirective, FaIconComponent, HelpIconComponent, BarChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class TutorEffortStatisticsComponent extends PlagiarismAndTutorEffortDirective implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private textExerciseService = inject(TextExerciseService);\r\n    private textAssessmentService = inject(TextAssessmentService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    tutorEfforts: TutorEffort[] = [];\r\n    numberOfSubmissions: number;\r\n    totalTimeSpent: number;\r\n    averageTimeSpent: number;\r\n    currentExerciseId: number;\r\n    currentCourseId: number;\r\n    numberOfTutorsInvolvedInCourse: number;\r\n    effortDistribution: number[];\r\n    yScaleMax = 10;\r\n    medianValue: number;\r\n\r\n    showMedianLegend = false;\r\n\r\n    // Distance value representing step difference between chartLabel entries, i.e:. 1-10, 10-20\r\n    readonly bucketSize = 10;\r\n\r\n    xAxisLabel: string;\r\n    yAxisLabel: string;\r\n\r\n    // Icons\r\n    faSync = faSync;\r\n\r\n    constructor() {\r\n        super();\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.translateLabels();\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.translateLabels();\r\n        this.ngxChartLabels = ['[0-10)', '[10-20)', '[20-30)', '[30-40)', '[40-50)', '[50-60)', '[60-70)', '[70-80)', '[80-90)', '[90-100)', '[100-110)', '[110-120)', '120+'];\r\n        this.ngxColor.domain = Array(13).fill(GraphColors.LIGHT_BLUE);\r\n        this.route.params.subscribe((params) => {\r\n            this.currentExerciseId = Number(params['exerciseId']);\r\n            this.currentCourseId = Number(params['courseId']);\r\n        });\r\n        this.loadTutorEfforts();\r\n    }\r\n\r\n    loadTutorEfforts() {\r\n        this.textExerciseService.calculateTutorEffort(this.currentExerciseId, this.currentCourseId).subscribe((tutorEffortResponse: TutorEffort[]) => {\r\n            this.handleTutorEffortResponse(tutorEffortResponse);\r\n        });\r\n        this.loadNumberOfTutorsInvolved();\r\n    }\r\n\r\n    /**\r\n     * Handler function to handle input data coming from service call.\r\n     * Separation enables better testing\r\n     * @param tutorEffortData - data to handle\r\n     */\r\n    handleTutorEffortResponse(tutorEffortData: TutorEffort[]) {\r\n        this.tutorEfforts = tutorEffortData;\r\n        if (!this.tutorEfforts) {\r\n            return;\r\n        }\r\n        this.numberOfSubmissions = this.tutorEfforts.reduce((n, { numberOfSubmissionsAssessed }) => n + numberOfSubmissionsAssessed, 0);\r\n        const totalTime = this.tutorEfforts.reduce((n, { totalTimeSpentMinutes }) => n + totalTimeSpentMinutes, 0);\r\n        this.totalTimeSpent = Math.round(totalTime * 10) / 10;\r\n        const avgTemp = this.totalTimeSpent === 0 ? 0 : this.numberOfSubmissions / this.totalTimeSpent;\r\n        this.averageTimeSpent = avgTemp ? Math.round((avgTemp + Number.EPSILON) * 100) / 100 : 0;\r\n        this.distributeEffortToSets();\r\n        this.ngxData = [];\r\n        this.effortDistribution.forEach((effort, index) => {\r\n            this.ngxData.push({ name: this.ngxChartLabels[index], value: effort });\r\n        });\r\n        this.determineMaxChartHeight(this.effortDistribution);\r\n        this.medianValue = this.computeEffortMedian();\r\n        this.highlightMedian(this.medianValue);\r\n\r\n        this.ngxData = [...this.ngxData];\r\n    }\r\n\r\n    loadNumberOfTutorsInvolved() {\r\n        this.textAssessmentService.getNumberOfTutorsInvolvedInAssessment(this.currentCourseId, this.currentExerciseId).subscribe((response: number) => {\r\n            this.numberOfTutorsInvolvedInCourse = response;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Tutor Effort is distributed among the effortDistribution entries with each entry representing\r\n     * a corresponding index in the chartLables field.\r\n     * chartLabels.[\"0-10\"] - corresponds to effortDistribution[0]\r\n     * chartLabels.[\"10-20\"] - corresponds to effortDistribution[1]\r\n     * and so on. chartlabels is divided in steps of length 10, which is why division/10 and floor function is used.\r\n     */\r\n    distributeEffortToSets() {\r\n        this.effortDistribution = new Array<number>(this.ngxChartLabels.length).fill(0);\r\n        this.tutorEfforts.forEach((effort) => {\r\n            const BUCKET_INDEX = this.determineIndex(effort.totalTimeSpentMinutes);\r\n            this.effortDistribution[BUCKET_INDEX]++;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the click of a user on an arbitrary chart bar.\r\n     * Delegates the user to the assessment dashboard\r\n     */\r\n    onSelect() {\r\n        this.router.navigate(['/course-management', this.currentCourseId, 'assessment-dashboard', this.currentExerciseId]);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method used for tooltip generation\r\n     * @param label the label of the chart bar\r\n     * @returns the median assessed submissions for a bar\r\n     */\r\n    getMedianAmountOfAssessedSubmissions(label: string): number {\r\n        const index = this.ngxChartLabels.indexOf(label);\r\n        const range = this.identifyMinimumAndMaximumTimesSpent(index);\r\n\r\n        return this.computeMedianAmountOfAssessedSubmissions(range);\r\n    }\r\n\r\n    /**\r\n     * Determines the upper limit for the y-axis\r\n     * @param data the data that should be displayed\r\n     */\r\n    private determineMaxChartHeight(data: number[]): void {\r\n        this.yScaleMax = Math.max(this.yScaleMax, ...data);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that ensures that the chart is instantly translation sensitive\r\n     */\r\n    private translateLabels() {\r\n        this.xAxisLabel = this.translateService.instant('artemisApp.textExercise.tutorEffortStatistics.minutes');\r\n        this.yAxisLabel = this.translateService.instant('artemisApp.textExercise.tutorEffortStatistics.tutors');\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that computes and sets the effort median\r\n     */\r\n    private computeEffortMedian(): number {\r\n        if (this.tutorEfforts.length === 0) {\r\n            return 0;\r\n        }\r\n        const timeSpent = this.tutorEfforts.map((effort) => effort.totalTimeSpentMinutes);\r\n        return median(timeSpent);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that determines the Index a tutor effort should be inserted to for statistic calculation\r\n     * @param timeSpent the time the tutor spent\r\n     */\r\n    private determineIndex(timeSpent: number): number {\r\n        const BUCKET_LAST_INDEX = this.ngxChartLabels.length - 1;\r\n        const BUCKET_POSITION = timeSpent / this.bucketSize;\r\n        // the element will either be distributed in one of first 12 elements (chartLabels.length)\r\n        // or the last element if the time passed is larger than 120 (i.e.: chartLabels[12] = 120+)\r\n        return Math.min(Math.floor(BUCKET_POSITION), BUCKET_LAST_INDEX);\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the bar representing the median to a dark blue in order to highlight it\r\n     * @param medianValue the median amount of time spent for correcting this exercise\r\n     */\r\n    private highlightMedian(medianValue: number) {\r\n        const index = this.determineIndex(medianValue);\r\n        if (this.ngxData[index].value > 0) {\r\n            this.ngxColor.domain[index] = GraphColors.BLUE;\r\n            this.showMedianLegend = true;\r\n        } else {\r\n            this.showMedianLegend = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that computes the median assessed submissions for a bucket\r\n     * @param range TutorEffortRange representing the borders for the interval of occupation\r\n     * @returns the median rounded to two decimals\r\n     */\r\n    private computeMedianAmountOfAssessedSubmissions(range: TutorEffortRange): number {\r\n        let filterFunction;\r\n        if (range.maximumTimeSpent) {\r\n            filterFunction = (effort: TutorEffort) => effort.totalTimeSpentMinutes >= range.minimumTimeSpent && effort.totalTimeSpentMinutes < range.maximumTimeSpent!;\r\n        } else {\r\n            filterFunction = (effort: TutorEffort) => effort.totalTimeSpentMinutes >= range.minimumTimeSpent;\r\n        }\r\n        const filteredEfforts = this.tutorEfforts.filter(filterFunction);\r\n\r\n        return round(median(filteredEfforts.map((effort) => effort.numberOfSubmissionsAssessed)), 2);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method identifying the range of a tutor effort interval\r\n     * @param index computed index based on the position of the bar in the chart\r\n     * @returns TutorEffortRange representing the minimum and maximum border of the interval\r\n     */\r\n    private identifyMinimumAndMaximumTimesSpent(index: number): TutorEffortRange {\r\n        const minimumTimesSpentArray = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];\r\n        const minimumTimeSpent = minimumTimesSpentArray[index];\r\n        const maximumTimeSpent = minimumTimeSpent !== 120 ? minimumTimeSpent + 10 : undefined;\r\n\r\n        return { minimumTimeSpent, maximumTimeSpent };\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex flex-row justify-content-between align items center\">\r\n        <h4 jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.title\"></h4>\r\n        <button class=\"btn btn-primary btn-sm mb-2\" (click)=\"loadTutorEfforts()\">\r\n            <fa-icon [icon]=\"faSync\" [fixedWidth]=\"true\" />&nbsp;{{ 'artemisApp.showStatistic.recalculateStatistics' | artemisTranslate }}\r\n        </button>\r\n    </div>\r\n    @if (tutorEfforts && tutorEfforts.length > 0) {\r\n        <div>\r\n            <table class=\"table\">\r\n                <tr>\r\n                    <th><span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.numberOfSubmissionsAssessed\"></span></th>\r\n                    <th><span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.totalTimeSpent\"></span></th>\r\n                    <th><span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.averageTime\"></span></th>\r\n                    <th class=\"d-flex flex-row align-items-center justify-content-center\">\r\n                        @if (showMedianLegend) {\r\n                            <div class=\"color-legend\"></div>\r\n                        }\r\n                        <span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.effortMedian\"></span>\r\n                    </th>\r\n                    <th><span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.numberOfTutorsInvolved\"></span></th>\r\n                </tr>\r\n                <tr>\r\n                    <td>{{ numberOfSubmissions ? numberOfSubmissions : '0' }}</td>\r\n                    <td>{{ totalTimeSpent ? totalTimeSpent : '< 1 min' }}</td>\r\n                    <td>{{ averageTimeSpent ? averageTimeSpent : '0' }}</td>\r\n                    <td>{{ medianValue ? medianValue : '0.00' }}</td>\r\n                    <td>{{ numberOfTutorsInvolvedInCourse ? numberOfTutorsInvolvedInCourse : '0' }}</td>\r\n                </tr>\r\n                <tr></tr>\r\n            </table>\r\n            <div class=\"row d-flex justify-content-center\">\r\n                <div #containerRef class=\"col-10\">\r\n                    <div class=\"d-flex flex-row justify-content-center align-items-center\">\r\n                        <h3 jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.title\"></h3>\r\n                        <jhi-help-icon [text]=\"'artemisApp.textExercise.tutorEffortStatistics.titleDescription'\" [placement]=\"'right auto'\" />\r\n                    </div>\r\n                    <ngx-charts-bar-vertical\r\n                        [roundEdges]=\"false\"\r\n                        [view]=\"[containerRef.offsetWidth, 600]\"\r\n                        [scheme]=\"ngxColor\"\r\n                        [results]=\"ngxData\"\r\n                        [xAxis]=\"true\"\r\n                        [yAxis]=\"true\"\r\n                        [showXAxisLabel]=\"true\"\r\n                        [showYAxisLabel]=\"true\"\r\n                        [xAxisLabel]=\"xAxisLabel\"\r\n                        [yAxisLabel]=\"yAxisLabel\"\r\n                        [yAxisTickFormatting]=\"yAxisTickFormatting\"\r\n                        [yScaleMax]=\"yScaleMax\"\r\n                        (select)=\"onSelect()\"\r\n                    >\r\n                        <ng-template #tooltipTemplate let-model=\"model\">\r\n                            <b>{{ model.value }} </b>\r\n                            @if (model.value !== 1) {\r\n                                <b jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.multipleTutors\"></b>\r\n                            }\r\n                            @if (model.value === 1) {\r\n                                <b jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.singleTutor\"></b>\r\n                            }\r\n                            <br />\r\n                            <span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.forMinutes\" [translateValues]=\"{ interval: model.label }\"></span>\r\n                            <br />\r\n                            <b\r\n                                jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.medianOfSubmissions\"\r\n                                [translateValues]=\"{ median: getMedianAmountOfAssessedSubmissions(model.label) }\"\r\n                            ></b>\r\n                        </ng-template>\r\n                    </ngx-charts-bar-vertical>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if ((tutorEfforts && tutorEfforts.length === 0) || !tutorEfforts) {\r\n        <div class=\"text-center\">\r\n            <span jhiTranslate=\"artemisApp.textExercise.tutorEffortStatistics.noData\"></span>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "TutorEffortStatisticsComponent_Conditional_13_ng_template_61_Conditional_4_Template", "TutorEffortStatisticsComponent_Conditional_13_ng_template_61_Conditional_5_Template", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "model_r3", "value", "\u0275\u0275conditional", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "label", "_c2", "ctx_r1", "getMedianAmountOfAssessedSubmissions", "TutorEffortStatisticsComponent_Conditional_13_Conditional_18_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSelect", "TutorEffortStatisticsComponent_Conditional_13_ng_template_61_Template", "\u0275\u0275templateRefExtractor", "showMedianLegend", "\u0275\u0275textInterpolate", "numberOfSubmissions", "totalTimeSpent", "averageTimeSpent", "medianValue", "numberOfTutorsInvolvedInCourse", "_c0", "containerRef_r4", "offsetWidth", "ngxColor", "ngxData", "xAxisLabel", "yAxisLabel", "yAxisTickFormatting", "yScaleMax", "TutorEffortStatisticsComponent", "PlagiarismAndTutorEffortDirective", "route", "inject", "ActivatedRoute", "router", "Router", "textExerciseService", "TextExerciseService", "textAssessmentService", "TextAssessmentService", "translateService", "TranslateService", "tutorEfforts", "currentExerciseId", "currentCourseId", "effortDistribution", "bucketSize", "faSync", "constructor", "onLangChange", "subscribe", "translateLabels", "ngOnInit", "ngxChartLabels", "domain", "Array", "fill", "GraphColors", "LIGHT_BLUE", "params", "Number", "loadTutorEfforts", "calculateTutorEffort", "tutorEffortResponse", "handleTutorEffortResponse", "loadNumberOfTutorsInvolved", "tutorEffortData", "reduce", "n", "numberOfSubmissionsAssessed", "totalTime", "totalTimeSpentMinutes", "Math", "round", "avgTemp", "EPSILON", "distributeEffortToSets", "forEach", "effort", "index", "push", "name", "determineMaxChartHeight", "computeEffortMedian", "highlightMedian", "getNumberOfTutorsInvolvedInAssessment", "response", "length", "BUCKET_INDEX", "determineIndex", "navigate", "indexOf", "range", "identifyMinimumAndMaximumTimesSpent", "computeMedianAmountOfAssessedSubmissions", "data", "max", "instant", "timeSpent", "map", "median", "BUCKET_LAST_INDEX", "BUCKET_POSITION", "min", "floor", "BLUE", "filterFunction", "maximumTimeSpent", "minimumTimeSpent", "filteredEfforts", "filter", "undefined", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "TutorEffortStatisticsComponent_Conditional_13_Template", "TutorEffortStatisticsComponent_Conditional_14_Template", "\u0275\u0275pipeBind1", "TranslateDirective", "FaIconComponent", "HelpIconComponent", "BarChartModule", "BarVerticalComponent", "ArtemisTranslatePipe", "styles"]
}
