{
  "version": 3,
  "sources": ["src/main/webapp/app/localvc/vcs-repository-access-log-view/vcs-repository-access-log-view.component.ts", "src/main/webapp/app/localvc/vcs-repository-access-log-view/vcs-repository-access-log-view.component.html"],
  "sourcesContent": ["import { Component, computed, effect, inject, signal } from '@angular/core';\r\nimport { Observable, lastValueFrom } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { VcsAccessLogDTO } from 'app/entities/vcs-access-log-entry.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-vcs-repository-access-log-view',\r\n    templateUrl: './vcs-repository-access-log-view.component.html',\r\n    imports: [TranslateDirective],\r\n})\r\nexport class VcsRepositoryAccessLogViewComponent {\r\n    private readonly route = inject(ActivatedRoute);\r\n    private readonly programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private readonly alertService = inject(AlertService);\r\n\r\n    protected readonly vcsAccessLogEntries = signal<VcsAccessLogDTO[]>([]);\r\n\r\n    private readonly params = toSignal(this.route.params, { requireSync: true });\r\n    private readonly participationId = computed(() => {\r\n        const participationId = this.params().repositoryId;\r\n        if (participationId) {\r\n            return Number(participationId);\r\n        }\r\n        return undefined;\r\n    });\r\n    private readonly exerciseId = computed(() => Number(this.params().exerciseId));\r\n    private readonly repositoryType = computed(() => String(this.params().repositoryType));\r\n\r\n    constructor() {\r\n        effect(async () => {\r\n            if (this.participationId()) {\r\n                await this.loadVcsAccessLogForParticipation(this.participationId()!);\r\n            } else {\r\n                await this.loadVcsAccessLog(this.exerciseId(), this.repositoryType());\r\n            }\r\n        });\r\n    }\r\n\r\n    public async loadVcsAccessLogForParticipation(participationId: number) {\r\n        await this.extractEntries(() => this.programmingExerciseParticipationService.getVcsAccessLogForParticipation(participationId));\r\n    }\r\n\r\n    public async loadVcsAccessLog(exerciseId: number, repositoryType: string) {\r\n        await this.extractEntries(() => this.programmingExerciseParticipationService.getVcsAccessLogForRepository(exerciseId, repositoryType));\r\n    }\r\n\r\n    private async extractEntries(fetchVcsAccessLogs: () => Observable<VcsAccessLogDTO[] | undefined>) {\r\n        try {\r\n            const accessLogEntries = await lastValueFrom(fetchVcsAccessLogs());\r\n            if (accessLogEntries) {\r\n                this.vcsAccessLogEntries.set(accessLogEntries);\r\n            }\r\n        } catch (error) {\r\n            this.alertService.error('artemisApp.repository.vcsAccessLog.error');\r\n        }\r\n    }\r\n}\r\n", "<ng-container>\r\n    <div class=\"d-flex justify-content-between\">\r\n        <h3 jhiTranslate=\"artemisApp.repository.vcsAccessLog.title\"></h3>\r\n    </div>\r\n\r\n    <div style=\"overflow-x: auto\">\r\n        <table class=\"table table-responsive\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\" jhiTranslate=\"artemisApp.repository.vcsAccessLog.userId\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"artemisApp.repository.vcsAccessLog.author\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"artemisApp.repository.vcsAccessLog.actionType\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"artemisApp.repository.vcsAccessLog.authMechanism\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"artemisApp.repository.vcsAccessLog.commitHash\"></th>\r\n                    <th scope=\"col\" jhiTranslate=\"artemisApp.repository.vcsAccessLog.timeStamp\"></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (entry of vcsAccessLogEntries(); track entry; let i = $index) {\r\n                    <tr class=\"w-25\">\r\n                        <td class=\"p-2\">{{ i }}</td>\r\n                        <td class=\"p-2\">{{ entry.userId }}</td>\r\n                        <td class=\"p-2\">{{ entry.name + ', ' + entry.email }}</td>\r\n                        <td class=\"p-2\">{{ entry.repositoryActionType }}</td>\r\n                        <td class=\"p-2\">{{ entry.authenticationMechanism }}</td>\r\n                        <td class=\"p-2\">{{ entry.commitHash }}</td>\r\n                        <td class=\"p-2\">{{ entry.timestamp }}</td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</ng-container>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275$index_50_r2", "entry_r1", "userId", "name", "email", "repositoryActionType", "authenticationMechanism", "commitHash", "timestamp", "VcsRepositoryAccessLogViewComponent", "route", "inject", "ActivatedRoute", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "alertService", "AlertService", "vcsAccessLogEntries", "signal", "params", "toSignal", "requireSync", "participationId", "computed", "repositoryId", "Number", "exerciseId", "repositoryType", "String", "constructor", "effect", "__async", "loadVcsAccessLogForParticipation", "loadVcsAccessLog", "extractEntries", "getVcsAccessLogForParticipation", "getVcsAccessLogForRepository", "fetchVcsAccessLogs", "accessLogEntries", "lastValueFrom", "set", "error", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "VcsRepositoryAccessLogViewComponent_For_35_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "TranslateDirective", "encapsulation"]
}
