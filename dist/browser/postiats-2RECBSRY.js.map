{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"{\",\n    close: \"}\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"[\",\n    close: \"]\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\",\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  // TODO: staload and dynload are followed by a special kind of string literals\n  // with {$IDENTIFER} variables, and it also may make sense to highlight\n  // the punctuation (. and / and \\) differently.\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: \"invalid\",\n  // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\n  keywords: [\n  //\n  \"abstype\",\n  // ABSTYPE\n  \"abst0ype\",\n  // ABST0YPE\n  \"absprop\",\n  // ABSPROP\n  \"absview\",\n  // ABSVIEW\n  \"absvtype\",\n  // ABSVIEWTYPE\n  \"absviewtype\",\n  // ABSVIEWTYPE\n  \"absvt0ype\",\n  // ABSVIEWT0YPE\n  \"absviewt0ype\",\n  // ABSVIEWT0YPE\n  //\n  \"as\",\n  // T_AS\n  //\n  \"and\",\n  // T_AND\n  //\n  \"assume\",\n  // T_ASSUME\n  //\n  \"begin\",\n  // T_BEGIN\n  //\n  /*\n  \t\t\"case\", // CASE\n  */\n  //\n  \"classdec\",\n  // T_CLASSDEC\n  //\n  \"datasort\",\n  // T_DATASORT\n  //\n  \"datatype\",\n  // DATATYPE\n  \"dataprop\",\n  // DATAPROP\n  \"dataview\",\n  // DATAVIEW\n  \"datavtype\",\n  // DATAVIEWTYPE\n  \"dataviewtype\",\n  // DATAVIEWTYPE\n  //\n  \"do\",\n  // T_DO\n  //\n  \"end\",\n  // T_END\n  //\n  \"extern\",\n  // T_EXTERN\n  \"extype\",\n  // T_EXTYPE\n  \"extvar\",\n  // T_EXTVAR\n  //\n  \"exception\",\n  // T_EXCEPTION\n  //\n  \"fn\",\n  // FN // non-recursive\n  \"fnx\",\n  // FNX // mutual tail-rec.\n  \"fun\",\n  // FUN // general-recursive\n  //\n  \"prfn\",\n  // PRFN\n  \"prfun\",\n  // PRFUN\n  //\n  \"praxi\",\n  // PRAXI\n  \"castfn\",\n  // CASTFN\n  //\n  \"if\",\n  // T_IF\n  \"then\",\n  // T_THEN\n  \"else\",\n  // T_ELSE\n  //\n  \"ifcase\",\n  // T_IFCASE\n  //\n  \"in\",\n  // T_IN\n  //\n  \"infix\",\n  // INFIX\n  \"infixl\",\n  // INFIXL\n  \"infixr\",\n  // INFIXR\n  \"prefix\",\n  // PREFIX\n  \"postfix\",\n  // POSTFIX\n  //\n  \"implmnt\",\n  // IMPLMNT // 0\n  \"implement\",\n  // IMPLEMENT // 1\n  //\n  \"primplmnt\",\n  // PRIMPLMNT // ~1\n  \"primplement\",\n  // PRIMPLMNT // ~1\n  //\n  \"import\",\n  // T_IMPORT // for importing packages\n  //\n  /*\n  \t\t\"lam\", // LAM\n  \t\t\"llam\", // LLAM\n  \t\t\"fix\", // FIX\n  */\n  //\n  \"let\",\n  // T_LET\n  //\n  \"local\",\n  // T_LOCAL\n  //\n  \"macdef\",\n  // MACDEF\n  \"macrodef\",\n  // MACRODEF\n  //\n  \"nonfix\",\n  // T_NONFIX\n  //\n  \"symelim\",\n  // T_SYMELIM\n  \"symintr\",\n  // T_SYMINTR\n  \"overload\",\n  // T_OVERLOAD\n  //\n  \"of\",\n  // T_OF\n  \"op\",\n  // T_OP\n  //\n  \"rec\",\n  // T_REC\n  //\n  \"sif\",\n  // T_SIF\n  \"scase\",\n  // T_SCASE\n  //\n  \"sortdef\",\n  // T_SORTDEF\n  /*\n  // HX: [sta] is now deprecated\n  */\n  \"sta\",\n  // T_STACST\n  \"stacst\",\n  // T_STACST\n  \"stadef\",\n  // T_STADEF\n  \"static\",\n  // T_STATIC\n  /*\n  \t\t\"stavar\", // T_STAVAR\n  */\n  //\n  \"staload\",\n  // T_STALOAD\n  \"dynload\",\n  // T_DYNLOAD\n  //\n  \"try\",\n  // T_TRY\n  //\n  \"tkindef\",\n  // T_TKINDEF // HX-2012-05-23\n  //\n  /*\n  \t\t\"type\", // TYPE\n  */\n  \"typedef\",\n  // TYPEDEF\n  \"propdef\",\n  // PROPDEF\n  \"viewdef\",\n  // VIEWDEF\n  \"vtypedef\",\n  // VIEWTYPEDEF\n  \"viewtypedef\",\n  // VIEWTYPEDEF\n  //\n  /*\n  \t\t\"val\", // VAL\n  */\n  \"prval\",\n  // PRVAL\n  //\n  \"var\",\n  // VAR\n  \"prvar\",\n  // PRVAR\n  //\n  \"when\",\n  // T_WHEN\n  \"where\",\n  // T_WHERE\n  //\n  /*\n  \t\t\"for\", // T_FOR\n  \t\t\"while\", // T_WHILE\n  */\n  //\n  \"with\",\n  // T_WITH\n  //\n  \"withtype\",\n  // WITHTYPE\n  \"withprop\",\n  // WITHPROP\n  \"withview\",\n  // WITHVIEW\n  \"withvtype\",\n  // WITHVIEWTYPE\n  \"withviewtype\"\n  // WITHVIEWTYPE\n  //\n  ],\n  keywords_dlr: [\"$delay\",\n  // DLRDELAY\n  \"$ldelay\",\n  // DLRLDELAY\n  //\n  \"$arrpsz\",\n  // T_DLRARRPSZ\n  \"$arrptrsize\",\n  // T_DLRARRPSZ\n  //\n  \"$d2ctype\",\n  // T_DLRD2CTYPE\n  //\n  \"$effmask\",\n  // DLREFFMASK\n  \"$effmask_ntm\",\n  // DLREFFMASK_NTM\n  \"$effmask_exn\",\n  // DLREFFMASK_EXN\n  \"$effmask_ref\",\n  // DLREFFMASK_REF\n  \"$effmask_wrt\",\n  // DLREFFMASK_WRT\n  \"$effmask_all\",\n  // DLREFFMASK_ALL\n  //\n  \"$extern\",\n  // T_DLREXTERN\n  \"$extkind\",\n  // T_DLREXTKIND\n  \"$extype\",\n  // T_DLREXTYPE\n  \"$extype_struct\",\n  // T_DLREXTYPE_STRUCT\n  //\n  \"$extval\",\n  // T_DLREXTVAL\n  \"$extfcall\",\n  // T_DLREXTFCALL\n  \"$extmcall\",\n  // T_DLREXTMCALL\n  //\n  \"$literal\",\n  // T_DLRLITERAL\n  //\n  \"$myfilename\",\n  // T_DLRMYFILENAME\n  \"$mylocation\",\n  // T_DLRMYLOCATION\n  \"$myfunction\",\n  // T_DLRMYFUNCTION\n  //\n  \"$lst\",\n  // DLRLST\n  \"$lst_t\",\n  // DLRLST_T\n  \"$lst_vt\",\n  // DLRLST_VT\n  \"$list\",\n  // DLRLST\n  \"$list_t\",\n  // DLRLST_T\n  \"$list_vt\",\n  // DLRLST_VT\n  //\n  \"$rec\",\n  // DLRREC\n  \"$rec_t\",\n  // DLRREC_T\n  \"$rec_vt\",\n  // DLRREC_VT\n  \"$record\",\n  // DLRREC\n  \"$record_t\",\n  // DLRREC_T\n  \"$record_vt\",\n  // DLRREC_VT\n  //\n  \"$tup\",\n  // DLRTUP\n  \"$tup_t\",\n  // DLRTUP_T\n  \"$tup_vt\",\n  // DLRTUP_VT\n  \"$tuple\",\n  // DLRTUP\n  \"$tuple_t\",\n  // DLRTUP_T\n  \"$tuple_vt\",\n  // DLRTUP_VT\n  //\n  \"$break\",\n  // T_DLRBREAK\n  \"$continue\",\n  // T_DLRCONTINUE\n  //\n  \"$raise\",\n  // T_DLRRAISE\n  //\n  \"$showtype\",\n  // T_DLRSHOWTYPE\n  //\n  \"$vcopyenv_v\",\n  // DLRVCOPYENV_V\n  \"$vcopyenv_vt\",\n  // DLRVCOPYENV_VT\n  //\n  \"$tempenver\",\n  // T_DLRTEMPENVER\n  //\n  \"$solver_assert\",\n  // T_DLRSOLASSERT\n  \"$solver_verify\"\n  // T_DLRSOLVERIFY\n  ],\n  keywords_srp: [\n  //\n  \"#if\",\n  // T_SRPIF\n  \"#ifdef\",\n  // T_SRPIFDEF\n  \"#ifndef\",\n  // T_SRPIFNDEF\n  //\n  \"#then\",\n  // T_SRPTHEN\n  //\n  \"#elif\",\n  // T_SRPELIF\n  \"#elifdef\",\n  // T_SRPELIFDEF\n  \"#elifndef\",\n  // T_SRPELIFNDEF\n  //\n  \"#else\",\n  // T_SRPELSE\n  \"#endif\",\n  // T_SRPENDIF\n  //\n  \"#error\",\n  // T_SRPERROR\n  //\n  \"#prerr\",\n  // T_SRPPRERR // outpui to stderr\n  \"#print\",\n  // T_SRPPRINT // output to stdout\n  //\n  \"#assert\",\n  // T_SRPASSERT\n  //\n  \"#undef\",\n  // T_SRPUNDEF\n  \"#define\",\n  // T_SRPDEFINE\n  //\n  \"#include\",\n  // T_SRPINCLUDE\n  \"#require\",\n  // T_SRPREQUIRE\n  //\n  \"#pragma\",\n  // T_SRPPRAGMA // HX: general pragma\n  \"#codegen2\",\n  // T_SRPCODEGEN2 // for level-2 codegen\n  \"#codegen3\"\n  // T_SRPCODEGEN3 // for level-3 codegen\n  //\n  // HX: end of special tokens\n  //\n  ],\n  irregular_keyword_list: [\"val+\", \"val-\", \"val\", \"case+\", \"case-\", \"case\", \"addr@\", \"addr\", \"fold@\", \"free@\", \"fix@\", \"fix\", \"lam@\", \"lam\", \"llam@\", \"llam\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"view+\", \"view-\", \"view@\", \"view\", \"type+\", \"type-\", \"type\", \"vtype+\", \"vtype-\", \"vtype\", \"vt@ype+\", \"vt@ype-\", \"vt@ype\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"prop+\", \"prop-\", \"prop\", \"type+\", \"type-\", \"type\", \"t@ype\", \"t@ype+\", \"t@ype-\", \"abst@ype\", \"abstype\", \"absviewt@ype\", \"absvt@ype\", \"for*\", \"for\", \"while*\", \"while\"],\n  keywords_types: [\"bool\", \"double\", \"byte\", \"int\", \"short\", \"char\", \"void\", \"unit\", \"long\", \"float\", \"string\", \"strptr\"],\n  // TODO: reference for this?\n  keywords_effects: [\"0\",\n  // no effects\n  \"fun\", \"clo\", \"prf\", \"funclo\", \"cloptr\", \"cloref\", \"ref\", \"ntm\", \"1\"\n  // all effects\n  ],\n  operators: [\"@\",\n  // T_AT\n  \"!\",\n  // T_BANG\n  \"|\",\n  // T_BAR\n  \"`\",\n  // T_BQUOTE\n  \":\",\n  // T_COLON\n  \"$\",\n  // T_DOLLAR\n  \".\",\n  // T_DOT\n  \"=\",\n  // T_EQ\n  \"#\",\n  // T_HASH\n  \"~\",\n  // T_TILDE\n  //\n  \"..\",\n  // T_DOTDOT\n  \"...\",\n  // T_DOTDOTDOT\n  //\n  \"=>\",\n  // T_EQGT\n  // \"=<\", // T_EQLT\n  \"=<>\",\n  // T_EQLTGT\n  \"=/=>\",\n  // T_EQSLASHEQGT\n  \"=>>\",\n  // T_EQGTGT\n  \"=/=>>\",\n  // T_EQSLASHEQGTGT\n  //\n  \"<\",\n  // T_LT // opening a tmparg\n  \">\",\n  // T_GT // closing a tmparg\n  //\n  \"><\",\n  // T_GTLT\n  //\n  \".<\",\n  // T_DOTLT\n  \">.\",\n  // T_GTDOT\n  //\n  \".<>.\",\n  // T_DOTLTGTDOT\n  //\n  \"->\",\n  // T_MINUSGT\n  //\"-<\", // T_MINUSLT\n  \"-<>\"\n  // T_MINUSLTGT\n  //\n  /*\n  \t\t\":<\", // T_COLONLT\n  */],\n  brackets: [{\n    open: \",(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  },\n  // meta-programming syntax\n  {\n    open: \"`(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"%(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'{\",\n    close: \"}\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@{\",\n    close: \"}\",\n    token: \"delimiter.brace\"\n  }, {\n    open: \"@[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"#[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  // The main tokenizer for ATS/Postiats\n  // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\n  tokenizer: {\n    root: [\n    // lexing_blankseq0\n    {\n      regex: /[ \\t\\r\\n]+/,\n      action: {\n        token: \"\"\n      }\n    },\n    // NOTE: (*) is an invalid ML-like comment!\n    {\n      regex: /\\(\\*\\)/,\n      action: {\n        token: \"invalid\"\n      }\n    }, {\n      regex: /\\(\\*/,\n      action: {\n        token: \"comment\",\n        next: \"lexing_COMMENT_block_ml\"\n      }\n    }, {\n      regex: /\\(/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.parenthesis' }*/\n    }, {\n      regex: /\\)/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.parenthesis' }*/\n    }, {\n      regex: /\\[/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.bracket' }*/\n    }, {\n      regex: /\\]/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.bracket' }*/\n    }, {\n      regex: /\\{/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.brace' }*/\n    }, {\n      regex: /\\}/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.brace' }*/\n    },\n    // lexing_COMMA\n    {\n      regex: /,\\(/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.parenthesis' }*/\n    },\n    // meta-programming syntax\n    {\n      regex: /,/,\n      action: {\n        token: \"delimiter.comma\"\n      }\n    }, {\n      regex: /;/,\n      action: {\n        token: \"delimiter.semicolon\"\n      }\n    },\n    // lexing_AT\n    {\n      regex: /@\\(/,\n      action: \"@brackets\"\n      /* { token: 'delimiter.parenthesis' }*/\n    }, {\n      regex: /@\\[/,\n      action: \"@brackets\"\n      /* { token: 'delimiter.bracket' }*/\n    }, {\n      regex: /@\\{/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.brace' }*/\n    },\n    // lexing_COLON\n    {\n      regex: /:</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    },\n    // T_COLONLT\n    /*\n    \t\t\tlexing_DOT:\n    \n    \t\t\t. // SYMBOLIC => lexing_IDENT_sym\n    \t\t\t. FLOATDOT => lexing_FLOAT_deciexp\n    \t\t\t. DIGIT => T_DOTINT\n    \t\t\t*/\n    {\n      regex: /\\.@symbolic+/,\n      action: {\n        token: \"identifier.sym\"\n      }\n    },\n    // FLOATDOT case\n    {\n      regex: /\\.@digit*@fexponent@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\.@digit+/,\n      action: {\n        token: \"number.float\"\n      }\n    },\n    // T_DOTINT\n    // lexing_DOLLAR:\n    // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\n    {\n      regex: /\\$@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_dlr\": {\n            token: \"keyword.dlr\"\n          },\n          \"@default\": {\n            token: \"namespace\"\n          }\n          // most likely a module qualifier\n        }\n      }\n    },\n    // lexing_SHARP:\n    // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\n    {\n      regex: /\\#@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_srp\": {\n            token: \"keyword.srp\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    },\n    // lexing_PERCENT:\n    {\n      regex: /%\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /^%{(#|\\^|\\$)?/,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EXTCODE\",\n        nextEmbedded: \"text/javascript\"\n      }\n    }, {\n      regex: /^%}/,\n      action: {\n        token: \"keyword\"\n      }\n    },\n    // lexing_QUOTE\n    {\n      regex: /'\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /'\\[/,\n      action: {\n        token: \"delimiter.bracket\"\n      }\n    }, {\n      regex: /'\\{/,\n      action: {\n        token: \"delimiter.brace\"\n      }\n    }, [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]], [/'[^\\\\']'/, \"string\"],\n    // lexing_DQUOTE\n    [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n    // lexing_BQUOTE\n    {\n      regex: /`\\(/,\n      action: \"@brackets\"\n      /* { token: 'delimiter.parenthesis' }*/\n    },\n    // TODO: otherwise, try lexing_IDENT_sym\n    {\n      regex: /\\\\/,\n      action: {\n        token: \"punctuation\"\n      }\n    },\n    // just T_BACKSLASH\n    // lexing_IDENT_alp:\n    // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\n    // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\n    {\n      regex: /@irregular_keywords(?!@IDENTRST)/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n      action: {\n        cases: {\n          // TODO: dynload and staload should be specially parsed\n          // dynload whitespace+ \"special_string\"\n          // this special string is really:\n          //  '/' '\\\\' '.' => punctuation\n          // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\n          // [^\"] => identifier/literal\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@keywords_types\": {\n            token: \"type\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    },\n    // lexing_IDENT_sym:\n    {\n      regex: /\\/\\/\\/\\//,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_rest\"\n      }\n    }, {\n      regex: /\\/\\/.*$/,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: /\\/\\*/,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_block_c\"\n      }\n    },\n    // AS-20160627: specifically for effect annotations\n    {\n      regex: /-<|=</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /@symbolic+/,\n      action: {\n        cases: {\n          \"@operators\": \"keyword\",\n          \"@default\": \"operator\"\n        }\n      }\n    },\n    // lexing_ZERO:\n    // FIXME: this one is quite messy/unfinished yet\n    // TODO: lexing_INT_hex\n    // - testing_hexiexp => lexing_FLOAT_hexiexp\n    // - testing_fexponent_bin => lexing_FLOAT_hexiexp\n    // - testing_intspseq0 => T_INT_hex\n    // lexing_INT_hex:\n    {\n      regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /0[xX]@xdigit+@INTSP*/,\n      action: {\n        token: \"number.hex\"\n      }\n    }, {\n      regex: /0[0-7]+(?![0-9])@INTSP*/,\n      action: {\n        token: \"number.octal\"\n      }\n    },\n    // lexing_INT_oct\n    //{regex: /0/, action: { token: 'number' } }, // INTZERO\n    // lexing_INT_dec:\n    // - testing_deciexp => lexing_FLOAT_deciexp\n    // - testing_fexponent => lexing_FLOAT_deciexp\n    // - otherwise => intspseq0 ([0-9]*[lLuU]?)\n    {\n      regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /@digit@digitseq0@INTSP*/,\n      action: {\n        token: \"number.decimal\"\n      }\n    },\n    // DIGIT, if followed by digitseq0, is lexing_INT_dec\n    {\n      regex: /@digit+@INTSP*/,\n      action: {\n        token: \"number\"\n      }\n    }],\n    lexing_COMMENT_block_ml: [[/[^\\(\\*]+/, \"comment\"], [/\\(\\*/, \"comment\", \"@push\"], [/\\(\\*/, \"comment.invalid\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"]],\n    lexing_COMMENT_block_c: [[/[^\\/*]+/, \"comment\"],\n    // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\n    // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\n    [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    lexing_COMMENT_rest: [[/$/, \"comment\", \"@pop\"],\n    // FIXME: does it match? docs say 'no'\n    [/.*/, \"comment\"]],\n    // NOTE: added by AS, specifically for highlighting\n    lexing_EFFECT_commaseq0: [{\n      regex: /@IDENTFST@IDENTRST+|@digit+/,\n      action: {\n        cases: {\n          \"@keywords_effects\": {\n            token: \"type.effect\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /,/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: />/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\"\n      }\n    }],\n    lexing_EXTCODE: [{\n      regex: /^%}/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\",\n        nextEmbedded: \"@pop\"\n      }\n    }, {\n      regex: /[^%]+/,\n      action: \"\"\n    }],\n    lexing_DQUOTE: [{\n      regex: /\"/,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    },\n    // AS-20160628: additional hi-lighting for variables in staload/dynload strings\n    {\n      regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n      action: [{\n        token: \"string.escape\"\n      }, {\n        token: \"identifier\"\n      }, {\n        token: \"string.escape\"\n      }]\n    }, {\n      regex: /\\\\$/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /[^\\\\\"]+/,\n      action: {\n        token: \"string\"\n      }\n    }]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["conf","language"],"x_google_ignoreList":[0]}