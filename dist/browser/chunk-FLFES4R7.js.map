{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/course-exercises/course-exercise.service.ts"],
  "sourcesContent": ["import { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Observable, map } from 'rxjs';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseExerciseService {\r\n    private http = inject(HttpClient);\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n    private accountService = inject(AccountService);\r\n\r\n    /**\r\n     * returns all programming exercises for the course corresponding to courseId\r\n     * Note: the exercises in the response do not contain participations and do not contain the course to save network bandwidth\r\n     * @param courseId\r\n     */\r\n    findAllProgrammingExercisesForCourse(courseId: number): Observable<HttpResponse<ProgrammingExercise[]>> {\r\n        return this.http\r\n            .get<ProgrammingExercise[]>(`api/programming/courses/${courseId}/programming-exercises`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<ProgrammingExercise[]>) => this.processExercisesHttpResponses(res)));\r\n    }\r\n\r\n    /**\r\n     * returns all modeling exercises for the course corresponding to courseId\r\n     * Note: the exercises in the response do not contain participations and do not contain the course to save network bandwidth\r\n     * @param courseId - the unique identifier of the course\r\n     */\r\n    findAllModelingExercisesForCourse(courseId: number): Observable<HttpResponse<ModelingExercise[]>> {\r\n        return this.http\r\n            .get<ModelingExercise[]>(`api/modeling/courses/${courseId}/modeling-exercises`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<ModelingExercise[]>) => this.processExercisesHttpResponses(res)));\r\n    }\r\n\r\n    /**\r\n     * returns all text exercises for the course corresponding to courseId\r\n     * Note: the exercises in the response do not contain participations and do not contain the course to save network bandwidth\r\n     * @param courseId - the unique identifier of the course\r\n     */\r\n    findAllTextExercisesForCourse(courseId: number): Observable<HttpResponse<TextExercise[]>> {\r\n        return this.http\r\n            .get<TextExercise[]>(`api/text/courses/${courseId}/text-exercises`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<TextExercise[]>) => this.processExercisesHttpResponses(res)));\r\n    }\r\n\r\n    /**\r\n     * returns all file upload exercises for the course corresponding to courseId\r\n     * Note: the exercises in the response do not contain participations and do not contain the course to save network bandwidth\r\n     * @param courseId - the unique identifier of the course\r\n     */\r\n    findAllFileUploadExercisesForCourse(courseId: number): Observable<HttpResponse<FileUploadExercise[]>> {\r\n        return this.http\r\n            .get<FileUploadExercise[]>(`api/fileupload/courses/${courseId}/file-upload-exercises`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<FileUploadExercise[]>) => this.processExercisesHttpResponses(res)));\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Course Exercise HttpResponses.\r\n     * @param exercisesRes\r\n     */\r\n    private processExercisesHttpResponses(exercisesRes: HttpResponse<Exercise[]>): HttpResponse<Exercise[]> {\r\n        this.convertExerciseResponseArrayDatesFromServer(exercisesRes);\r\n        ExerciseService.convertExerciseCategoryArrayFromServer(exercisesRes);\r\n        if (exercisesRes.body) {\r\n            exercisesRes.body.forEach((exercise) => this.accountService.setAccessRightsForExercise(exercise));\r\n        }\r\n        return exercisesRes;\r\n    }\r\n\r\n    /**\r\n     * starts the exercise with the identifier exerciseId\r\n     * @param exerciseId - the unique identifier of the exercise\r\n     */\r\n    startExercise(exerciseId: number): Observable<StudentParticipation> {\r\n        return this.http.post<StudentParticipation>(`api/exercise/exercises/${exerciseId}/participations`, {}).pipe(\r\n            map((participation: StudentParticipation) => {\r\n                return this.handleParticipation(participation);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * starts the exercise with the identifier exerciseId\r\n     * @param exerciseId - the unique identifier of the exercise\r\n     * @param useGradedParticipation - flag indicating if the student wants to continue from their graded participation\r\n     */\r\n    startPractice(exerciseId: number, useGradedParticipation: boolean): Observable<StudentParticipation> {\r\n        return this.http.post<StudentParticipation>(`api/exercise/exercises/${exerciseId}/participations/practice?useGradedParticipation=${useGradedParticipation}`, {}).pipe(\r\n            map((participation: StudentParticipation) => {\r\n                return this.handleParticipation(participation);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * resumes the programming exercise with the identifier exerciseId\r\n     * @param exerciseId - the unique identifier of the exercise\r\n     * @param participationId - the unique identifier of the participation to continue\r\n     */\r\n    resumeProgrammingExercise(exerciseId: number, participationId: number): Observable<StudentParticipation> {\r\n        return this.http.put<StudentParticipation>(`api/exercise/exercises/${exerciseId}/resume-programming-participation/${participationId}`, {}).pipe(\r\n            map((participation: StudentParticipation) => {\r\n                return this.handleParticipation(participation);\r\n            }),\r\n        );\r\n    }\r\n\r\n    requestFeedback(exerciseId: number): Observable<StudentParticipation> {\r\n        return this.http.put<StudentParticipation>(`api/exercise/exercises/${exerciseId}/request-feedback`, {}).pipe(map((participation: StudentParticipation) => participation));\r\n    }\r\n\r\n    /**\r\n     * handle the given student participation by adding in the participationWebsocketService\r\n     * @param participation - the participation to be handled\r\n     */\r\n    handleParticipation(participation: StudentParticipation): StudentParticipation {\r\n        if (participation) {\r\n            // convert date\r\n            participation.initializationDate = convertDateFromServer(participation.initializationDate);\r\n            if (participation.exercise) {\r\n                const exercise = participation.exercise;\r\n                this.convertExerciseDatesFromServer(exercise);\r\n                exercise.studentParticipations = [participation];\r\n            }\r\n            this.participationWebsocketService.addParticipation(participation);\r\n        }\r\n        return participation;\r\n    }\r\n\r\n    convertExerciseDatesFromServer<T extends Exercise>(res: T): T {\r\n        res.releaseDate = convertDateFromServer(res.releaseDate);\r\n        res.startDate = convertDateFromServer(res.startDate);\r\n        res.dueDate = convertDateFromServer(res.dueDate);\r\n        res.assessmentDueDate = convertDateFromServer(res.assessmentDueDate);\r\n        res.exampleSolutionPublicationDate = convertDateFromServer(res.exampleSolutionPublicationDate);\r\n        return res;\r\n    }\r\n\r\n    protected convertExerciseResponseArrayDatesFromServer<T extends Exercise>(res: HttpResponse<T[]>): HttpResponse<T[]> {\r\n        if (res.body) {\r\n            res.body.forEach((exercise: T) => {\r\n                exercise.releaseDate = convertDateFromServer(exercise.releaseDate);\r\n                exercise.startDate = convertDateFromServer(exercise.startDate);\r\n                exercise.dueDate = convertDateFromServer(exercise.dueDate);\r\n                exercise.assessmentDueDate = convertDateFromServer(exercise.assessmentDueDate);\r\n                exercise.exampleSolutionPublicationDate = convertDateFromServer(exercise.exampleSolutionPublicationDate);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["CourseExerciseService", "http", "inject", "HttpClient", "participationWebsocketService", "ParticipationWebsocketService", "accountService", "AccountService", "findAllProgrammingExercisesForCourse", "courseId", "get", "observe", "pipe", "map", "res", "processExercisesHttpResponses", "findAllModelingExercisesForCourse", "findAllTextExercisesForCourse", "findAllFileUploadExercisesForCourse", "exercisesRes", "convertExerciseResponseArrayDatesFromServer", "ExerciseService", "convertExerciseCategoryArrayFromServer", "body", "forEach", "exercise", "setAccessRightsForExercise", "startExercise", "exerciseId", "post", "participation", "handleParticipation", "startPractice", "useGradedParticipation", "resumeProgrammingExercise", "participationId", "put", "requestFeedback", "initializationDate", "convertDateFromServer", "convertExerciseDatesFromServer", "studentParticipations", "addParticipation", "releaseDate", "startDate", "dueDate", "assessmentDueDate", "exampleSolutionPublicationDate", "factory", "\u0275fac", "providedIn"]
}
