{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/notification/system-notification/admin-system-notification.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SystemNotification } from 'app/entities/system-notification.model';\r\nimport { SystemNotificationService } from 'app/shared/notification/system-notification/system-notification.service';\r\n\r\ntype EntityResponseType = HttpResponse<SystemNotification>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AdminSystemNotificationService {\r\n    private http = inject(HttpClient);\r\n    private systemNotificationService = inject(SystemNotificationService);\r\n\r\n    public resourceUrl = 'api/communication/admin/system-notifications';\r\n\r\n    /**\r\n     * Create a notification on the server using a POST request.\r\n     * @param notification The notification to create.\r\n     */\r\n    create(notification: SystemNotification): Observable<EntityResponseType> {\r\n        const copy = this.systemNotificationService.convertSystemNotificationDatesFromClient(notification);\r\n        return this.http\r\n            .post<SystemNotification>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.systemNotificationService.convertSystemNotificationResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Update a notification on the server using a PUT request.\r\n     * @param notification The notification to update.\r\n     */\r\n    update(notification: SystemNotification): Observable<EntityResponseType> {\r\n        const copy = this.systemNotificationService.convertSystemNotificationDatesFromClient(notification);\r\n        return this.http\r\n            .put<SystemNotification>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.systemNotificationService.convertSystemNotificationResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Delete a notification on the server using a DELETE request.\r\n     * @param systemNotificationId The id of the notification to delete.\r\n     */\r\n    delete(systemNotificationId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${systemNotificationId}`, { observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "mIAUA,IAAaA,GAA8B,IAAA,CAArC,MAAOA,CAA8B,CAC/BC,KAAOC,EAAOC,CAAU,EACxBC,0BAA4BF,EAAOG,CAAyB,EAE7DC,YAAc,+CAMrBC,OAAOC,EAAgC,CACnC,IAAMC,EAAO,KAAKL,0BAA0BM,yCAAyCF,CAAY,EACjG,OAAO,KAAKP,KACPU,KAAyB,KAAKL,YAAaG,EAAM,CAAEG,QAAS,UAAU,CAAE,EACxEC,KAAKC,EAAKC,GAA4B,KAAKX,0BAA0BY,iDAAiDD,CAAG,CAAC,CAAC,CACpI,CAMAE,OAAOT,EAAgC,CACnC,IAAMC,EAAO,KAAKL,0BAA0BM,yCAAyCF,CAAY,EACjG,OAAO,KAAKP,KACPiB,IAAwB,KAAKZ,YAAaG,EAAM,CAAEG,QAAS,UAAU,CAAE,EACvEC,KAAKC,EAAKC,GAA4B,KAAKX,0BAA0BY,iDAAiDD,CAAG,CAAC,CAAC,CACpI,CAMAI,OAAOC,EAA4B,CAC/B,OAAO,KAAKnB,KAAKkB,OAAY,GAAG,KAAKb,WAAW,IAAIc,CAAoB,GAAI,CAAER,QAAS,UAAU,CAAE,CACvG,4CAlCSZ,EAA8B,6BAA9BA,EAA8BqB,QAA9BrB,EAA8BsB,UAAAC,WADjB,MAAM,CAAA,SACnBvB,CAA8B,GAAA",
  "names": ["AdminSystemNotificationService", "http", "inject", "HttpClient", "systemNotificationService", "SystemNotificationService", "resourceUrl", "create", "notification", "copy", "convertSystemNotificationDatesFromClient", "post", "observe", "pipe", "map", "res", "convertSystemNotificationResponseDatesFromServer", "update", "put", "delete", "systemNotificationId", "factory", "\u0275fac", "providedIn"]
}
