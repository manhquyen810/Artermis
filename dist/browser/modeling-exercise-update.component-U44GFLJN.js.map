{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/manage/modeling-exercise-update.component.ts", "src/main/webapp/app/exercises/modeling/manage/modeling-exercise-update.component.html"],
  "sourcesContent": ["import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { DifficultyPickerComponent } from 'app/exercises/shared/difficulty-picker/difficulty-picker.component';\r\nimport { ExerciseFeedbackSuggestionOptionsComponent } from 'app/exercises/shared/feedback-suggestion/exercise-feedback-suggestion-options.component';\r\nimport { IncludedInOverallScorePickerComponent } from 'app/exercises/shared/included-in-overall-score-picker/included-in-overall-score-picker.component';\r\nimport { PresentationScoreComponent } from 'app/exercises/shared/presentation-score/presentation-score.component';\r\nimport { GradingInstructionsDetailsComponent } from 'app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component';\r\nimport { ModelingExerciseService } from './modeling-exercise.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { ExerciseMode, IncludedInOverallScore, resetForImport } from 'app/entities/exercise.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { cloneDeep, isEmpty } from 'lodash-es';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExerciseUpdateWarningService } from 'app/exercises/shared/exercise-update-warning/exercise-update-warning.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { EditType, SaveExerciseCommand } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { UMLDiagramType, UMLModel } from '@ls1intum/apollon';\r\nimport { ModelingEditorComponent } from '../shared/modeling-editor.component';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { scrollToTopOfPage } from 'app/shared/util/utils';\r\nimport { loadCourseExerciseCategories } from 'app/exercises/shared/course-exercises/course-utils';\r\nimport { FormSectionStatus } from 'app/forms/form-status-bar/form-status-bar.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { ExerciseTitleChannelNameComponent } from 'app/exercises/shared/exercise-title-channel-name/exercise-title-channel-name.component';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { ExerciseUpdatePlagiarismComponent } from 'app/exercises/shared/plagiarism/exercise-update-plagiarism/exercise-update-plagiarism.component';\r\nimport { TeamConfigFormGroupComponent } from 'app/exercises/shared/team-config-form-group/team-config-form-group.component';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { FormulaAction } from 'app/shared/monaco-editor/model/actions/formula.action';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { FormStatusBarComponent } from 'app/forms/form-status-bar/form-status-bar.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { CategorySelectorComponent } from 'app/shared/category-selector/category-selector.component';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { CompetencySelectionComponent } from 'app/shared/competency-selection/competency-selection.component';\r\nimport { CustomMinDirective } from 'app/shared/validators/custom-min-validator.directive';\r\nimport { CustomMaxDirective } from 'app/shared/validators/custom-max-validator.directive';\r\nimport { FormFooterComponent } from 'app/forms/form-footer/form-footer.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-exercise-update',\r\n    templateUrl: './modeling-exercise-update.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        FormsModule,\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        FormStatusBarComponent,\r\n        ExerciseTitleChannelNameComponent,\r\n        HelpIconComponent,\r\n        CategorySelectorComponent,\r\n        DifficultyPickerComponent,\r\n        TeamConfigFormGroupComponent,\r\n        MarkdownEditorMonacoComponent,\r\n        CompetencySelectionComponent,\r\n        ModelingEditorComponent,\r\n        FormDateTimePickerComponent,\r\n        IncludedInOverallScorePickerComponent,\r\n        CustomMinDirective,\r\n        CustomMaxDirective,\r\n        ExerciseFeedbackSuggestionOptionsComponent,\r\n        ExerciseUpdatePlagiarismComponent,\r\n        PresentationScoreComponent,\r\n        GradingInstructionsDetailsComponent,\r\n        FormFooterComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ModelingExerciseUpdateComponent implements AfterViewInit, OnDestroy, OnInit {\r\n    private alertService = inject(AlertService);\r\n    private modelingExerciseService = inject(ModelingExerciseService);\r\n    private modalService = inject(NgbModal);\r\n    private popupService = inject(ExerciseUpdateWarningService);\r\n    private courseService = inject(CourseManagementService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n    private eventManager = inject(EventManager);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private changeDetectorRef = inject(ChangeDetectorRef);\r\n\r\n    @ViewChild(ExerciseTitleChannelNameComponent) exerciseTitleChannelNameComponent: ExerciseTitleChannelNameComponent;\r\n    @ViewChild(ExerciseUpdatePlagiarismComponent) exerciseUpdatePlagiarismComponent?: ExerciseUpdatePlagiarismComponent;\r\n    @ViewChild(TeamConfigFormGroupComponent) teamConfigFormGroupComponent?: TeamConfigFormGroupComponent;\r\n    @ViewChild(ModelingEditorComponent, { static: false }) modelingEditor?: ModelingEditorComponent;\r\n    @ViewChild('bonusPoints') bonusPoints?: NgModel;\r\n    @ViewChild('points') points?: NgModel;\r\n    @ViewChild('solutionPublicationDate') solutionPublicationDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('releaseDate') releaseDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('startDate') startDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('dueDate') dueDateField?: FormDateTimePickerComponent;\r\n    @ViewChild('assessmentDueDate') assessmentDateField?: FormDateTimePickerComponent;\r\n\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    readonly documentationType: DocumentationType = 'Model';\r\n\r\n    AssessmentType = AssessmentType;\r\n    UMLDiagramType = UMLDiagramType;\r\n\r\n    modelingExercise: ModelingExercise;\r\n    backupExercise: ModelingExercise;\r\n    exampleSolution: UMLModel;\r\n    isSaving: boolean;\r\n    exerciseCategories: ExerciseCategory[];\r\n    existingCategories: ExerciseCategory[];\r\n    notificationText?: string;\r\n    domainActionsProblemStatement = [new FormulaAction()];\r\n    domainActionsExampleSolution = [new FormulaAction()];\r\n    examCourseId?: number;\r\n    isImport: boolean;\r\n    isExamMode: boolean;\r\n    semiAutomaticAssessmentAvailable = true;\r\n\r\n    formSectionStatus: FormSectionStatus[];\r\n\r\n    // Subscription\r\n    titleChannelNameComponentSubscription?: Subscription;\r\n    pointsSubscription?: Subscription;\r\n    bonusPointsSubscription?: Subscription;\r\n    plagiarismSubscription?: Subscription;\r\n    teamSubscription?: Subscription;\r\n\r\n    get editType(): EditType {\r\n        if (this.isImport) {\r\n            return EditType.IMPORT;\r\n        }\r\n\r\n        return this.modelingExercise.id == undefined ? EditType.CREATE : EditType.UPDATE;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.titleChannelNameComponentSubscription = this.exerciseTitleChannelNameComponent.titleChannelNameComponent.formValidChanges.subscribe(() =>\r\n            this.calculateFormSectionStatus(),\r\n        );\r\n        this.pointsSubscription = this.points?.valueChanges?.subscribe(() => this.calculateFormSectionStatus());\r\n        this.bonusPointsSubscription = this.bonusPoints?.valueChanges?.subscribe(() => this.calculateFormSectionStatus());\r\n        this.plagiarismSubscription = this.exerciseUpdatePlagiarismComponent?.formValidChanges.subscribe(() => this.calculateFormSectionStatus());\r\n        this.teamSubscription = this.teamConfigFormGroupComponent?.formValidChanges.subscribe(() => this.calculateFormSectionStatus());\r\n    }\r\n\r\n    /**\r\n     * Initializes all relevant data for creating or editing modeling exercise\r\n     */\r\n    ngOnInit(): void {\r\n        scrollToTopOfPage();\r\n\r\n        // Get the modelingExercise\r\n        this.activatedRoute.data.subscribe(({ modelingExercise }) => {\r\n            this.modelingExercise = modelingExercise;\r\n\r\n            if (this.modelingExercise.exampleSolutionModel != undefined) {\r\n                this.exampleSolution = JSON.parse(this.modelingExercise.exampleSolutionModel);\r\n            }\r\n\r\n            this.backupExercise = cloneDeep(this.modelingExercise);\r\n            this.examCourseId = this.modelingExercise.course?.id || this.modelingExercise.exerciseGroup?.exam?.course?.id;\r\n        });\r\n\r\n        this.activatedRoute.url\r\n            .pipe(\r\n                tap(\r\n                    (segments) =>\r\n                        (this.isImport = segments.some((segment) => segment.path === 'import', (this.isExamMode = segments.some((segment) => segment.path === 'exercise-groups')))),\r\n                ),\r\n                switchMap(() => this.activatedRoute.params),\r\n                tap((params) => {\r\n                    let courseId;\r\n\r\n                    if (!this.isExamMode) {\r\n                        this.exerciseCategories = this.modelingExercise.categories || [];\r\n                        if (this.modelingExercise.course) {\r\n                            courseId = this.modelingExercise.course!.id!;\r\n                        } else {\r\n                            courseId = this.modelingExercise.exerciseGroup!.exam!.course!.id!;\r\n                        }\r\n                    } else {\r\n                        // Lock individual mode for exam exercises\r\n                        this.modelingExercise.mode = ExerciseMode.INDIVIDUAL;\r\n                        this.modelingExercise.teamAssignmentConfig = undefined;\r\n                        this.modelingExercise.teamMode = false;\r\n                        // Exam exercises cannot be not included into the total score\r\n                        if (this.modelingExercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED) {\r\n                            this.modelingExercise.includedInOverallScore = IncludedInOverallScore.INCLUDED_COMPLETELY;\r\n                        }\r\n                    }\r\n                    if (this.isImport) {\r\n                        // The target course where we want to import into\r\n                        courseId = params['courseId'];\r\n\r\n                        if (this.isExamMode) {\r\n                            // The target exerciseGroupId where we want to import into\r\n                            const exerciseGroupId = params['exerciseGroupId'];\r\n                            const examId = params['examId'];\r\n\r\n                            this.exerciseGroupService.find(courseId, examId, exerciseGroupId).subscribe((res) => (this.modelingExercise.exerciseGroup = res.body!));\r\n                            // We reference exam exercises by their exercise group, not their course. Having both would lead to conflicts on the server\r\n                            this.modelingExercise.course = undefined;\r\n                        } else {\r\n                            this.courseService.find(courseId).subscribe((res) => (this.modelingExercise.course = res.body!));\r\n                            // We reference normal exercises by their course, having both would lead to conflicts on the server\r\n                            this.modelingExercise.exerciseGroup = undefined;\r\n                        }\r\n                        resetForImport(this.modelingExercise);\r\n                    }\r\n\r\n                    loadCourseExerciseCategories(courseId, this.courseService, this.exerciseService, this.alertService).subscribe((existingCategories) => {\r\n                        this.existingCategories = existingCategories;\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe();\r\n\r\n        this.isSaving = false;\r\n        this.notificationText = undefined;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.titleChannelNameComponentSubscription?.unsubscribe();\r\n        this.pointsSubscription?.unsubscribe();\r\n        this.bonusPointsSubscription?.unsubscribe();\r\n        this.plagiarismSubscription?.unsubscribe();\r\n    }\r\n\r\n    async calculateFormSectionStatus() {\r\n        await this.modelingEditor?.apollonEditor?.nextRender;\r\n        this.formSectionStatus = [\r\n            {\r\n                title: 'artemisApp.exercise.sections.general',\r\n                valid: Boolean(this.exerciseTitleChannelNameComponent?.titleChannelNameComponent.formValid),\r\n            },\r\n            { title: 'artemisApp.exercise.sections.mode', valid: Boolean(this.teamConfigFormGroupComponent?.formValid) },\r\n            { title: 'artemisApp.exercise.sections.problem', valid: true, empty: !this.modelingExercise.problemStatement },\r\n            {\r\n                title: 'artemisApp.exercise.sections.solution',\r\n                valid: Boolean(this.isExamMode || (!this.modelingExercise.exampleSolutionPublicationDateError && this.solutionPublicationDateField?.dateInput.valid)),\r\n                empty:\r\n                    isEmpty(this.modelingEditor?.getCurrentModel()?.elements) ||\r\n                    (!this.isExamMode && !this.modelingExercise.exampleSolutionPublicationDate) ||\r\n                    !this.modelingExercise.exampleSolutionExplanation,\r\n            },\r\n            {\r\n                title: 'artemisApp.exercise.sections.grading',\r\n                valid: Boolean(\r\n                    this.points?.valid &&\r\n                        this.bonusPoints?.valid &&\r\n                        (this.isExamMode ||\r\n                            (this.exerciseUpdatePlagiarismComponent?.formValid &&\r\n                                !this.modelingExercise.startDateError &&\r\n                                !this.modelingExercise.dueDateError &&\r\n                                !this.modelingExercise.assessmentDueDateError &&\r\n                                this.releaseDateField?.dateInput.valid &&\r\n                                this.startDateField?.dateInput.valid &&\r\n                                this.dueDateField?.dateInput.valid &&\r\n                                this.assessmentDateField?.dateInput.valid)),\r\n                ),\r\n                empty:\r\n                    !this.isExamMode &&\r\n                    // if a dayjs object contains an empty date, it is considered \"invalid\"\r\n                    (!this.modelingExercise.startDate?.isValid() ||\r\n                        !this.modelingExercise.dueDate?.isValid() ||\r\n                        !this.modelingExercise.assessmentDueDate?.isValid() ||\r\n                        !this.modelingExercise.releaseDate?.isValid()),\r\n            },\r\n        ];\r\n\r\n        // otherwise the change detection does not work on the initial load\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Updates the exercise categories\r\n     * @param categories list of exercise categories\r\n     */\r\n    updateCategories(categories: ExerciseCategory[]): void {\r\n        this.modelingExercise.categories = categories;\r\n        this.exerciseCategories = categories;\r\n    }\r\n\r\n    /**\r\n     * Validates if the date is correct\r\n     */\r\n    validateDate(): void {\r\n        this.exerciseService.validateDate(this.modelingExercise);\r\n        this.calculateFormSectionStatus();\r\n    }\r\n\r\n    save() {\r\n        this.modelingExercise.exampleSolutionModel = JSON.stringify(this.modelingEditor?.getCurrentModel());\r\n        this.isSaving = true;\r\n\r\n        new SaveExerciseCommand(this.modalService, this.popupService, this.modelingExerciseService, this.backupExercise, this.editType, this.alertService)\r\n            .save(this.modelingExercise, this.isExamMode, this.notificationText)\r\n            .subscribe({\r\n                next: (exercise: ModelingExercise) => this.onSaveSuccess(exercise),\r\n                error: (error: HttpErrorResponse) => this.onSaveError(error),\r\n                complete: () => {\r\n                    this.isSaving = false;\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Return to the exercise overview page\r\n     */\r\n    previousState() {\r\n        this.navigationUtilService.navigateBackFromExerciseUpdate(this.modelingExercise);\r\n    }\r\n\r\n    private onSaveSuccess(exercise: ModelingExercise): void {\r\n        this.eventManager.broadcast({ name: 'modelingExerciseListModification', content: 'OK' });\r\n        this.isSaving = false;\r\n\r\n        this.navigationUtilService.navigateForwardFromExerciseUpdateOrCreation(exercise);\r\n    }\r\n\r\n    private onSaveError(errorRes: HttpErrorResponse): void {\r\n        if (errorRes.error && errorRes.error.title) {\r\n            this.alertService.addErrorAlert(errorRes.error.title, errorRes.error.message, errorRes.error.params);\r\n        } else {\r\n            onError(this.alertService, errorRes);\r\n        }\r\n        this.isSaving = false;\r\n    }\r\n\r\n    /**\r\n     * When the diagram type changes, we need to check whether {@link AssessmentType.SEMI_AUTOMATIC} is available for the type. If not, we revert to {@link AssessmentType.MANUAL}\r\n     */\r\n    diagramTypeChanged() {\r\n        if (!this.semiAutomaticAssessmentAvailable) {\r\n            this.modelingExercise.assessmentType = AssessmentType.MANUAL;\r\n        }\r\n    }\r\n}\r\n", "<form name=\"editForm markdown-preview\" role=\"form\" novalidate #editForm=\"ngForm\">\r\n    <div class=\"d-flex align-items-center gap-2\">\r\n        @if (!modelingExercise.id) {\r\n            <h2 id=\"jhi-modeling-exercise-heading-create\" jhiTranslate=\"artemisApp.modelingExercise.home.createLabel\"></h2>\r\n        } @else if (!isImport && modelingExercise.id) {\r\n            <h2 id=\"jhi-modeling-exercise-heading-edit\" jhiTranslate=\"artemisApp.modelingExercise.home.editLabel\"></h2>\r\n        } @else if (isImport) {\r\n            <h2 id=\"jhi-modeling-exercise-heading-import\" jhiTranslate=\"artemisApp.modelingExercise.home.importLabel\"></h2>\r\n        }\r\n        <jhi-documentation-button [type]=\"documentationType\" />\r\n    </div>\r\n    <jhi-form-status-bar [formStatusSections]=\"formSectionStatus\" />\r\n    <div>\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.general\" id=\"artemisApp.exercise.sections.general\"></h3>\r\n        <jhi-exercise-title-channel-name [exercise]=\"modelingExercise\" [course]=\"modelingExercise.course\" [isExamMode]=\"isExamMode\" [isImport]=\"isImport\" />\r\n        @if (!isExamMode) {\r\n            <div class=\"form-group position-relative\">\r\n                <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.categories\"></label>\r\n                <jhi-help-icon text=\"artemisApp.exercise.categoriesTooltip\" />\r\n                <jhi-category-selector [categories]=\"exerciseCategories\" [existingCategories]=\"existingCategories\" (selectedCategories)=\"updateCategories($event)\" />\r\n            </div>\r\n        }\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.mode\" id=\"artemisApp.exercise.sections.mode\"></h3>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.difficulty\"></label>\r\n            <div>\r\n                <jhi-difficulty-picker [exercise]=\"modelingExercise\" id=\"modeling-difficulty-picker\" />\r\n            </div>\r\n        </div>\r\n        <jhi-team-config-form-group class=\"form-element\" [exercise]=\"modelingExercise\" [isImport]=\"isImport\" />\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.problem\" id=\"artemisApp.exercise.sections.problem\"></h3>\r\n        <div class=\"form-group\" name=\"problemStatement\" id=\"field_problemStatement\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.problemStatement\" for=\"field_problemStatement\"></label>\r\n            <jhi-markdown-editor-monaco\r\n                class=\"markdown-editor background-editor-color\"\r\n                [domainActions]=\"domainActionsProblemStatement\"\r\n                [(markdown)]=\"modelingExercise.problemStatement\"\r\n                (markdownChange)=\"calculateFormSectionStatus()\"\r\n            />\r\n        </div>\r\n        @if (!isExamMode) {\r\n            <div class=\"form-group\">\r\n                <jhi-competency-selection\r\n                    id=\"competencies\"\r\n                    [labelName]=\"'artemisApp.competency.link.title' | artemisTranslate\"\r\n                    [labelTooltip]=\"'artemisApp.competency.link.exercise' | artemisTranslate\"\r\n                    [(ngModel)]=\"modelingExercise.competencyLinks\"\r\n                    name=\"competencyLinks\"\r\n                />\r\n            </div>\r\n        }\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.solution\" id=\"artemisApp.exercise.sections.solution\"></h3>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.modelingExercise.exampleSolution\"></label>\r\n            <jhi-modeling-editor\r\n                [diagramType]=\"modelingExercise.diagramType\"\r\n                [umlModel]=\"exampleSolution\"\r\n                (onModelChanged)=\"calculateFormSectionStatus()\"\r\n                [withExplanation]=\"false\"\r\n            />\r\n        </div>\r\n        @if (!isImport) {\r\n            <div class=\"form-group\" name=\"exampleSolutionExplanation\" id=\"field_exampleSolutionExplanation\">\r\n                <label class=\"form-control-label\" jhiTranslate=\"artemisApp.modelingExercise.exampleSolutionExplanation\" for=\"field_exampleSolutionExplanation\"></label>\r\n                <jhi-markdown-editor-monaco\r\n                    class=\"markdown-editor background-editor-color\"\r\n                    [domainActions]=\"domainActionsExampleSolution\"\r\n                    [(markdown)]=\"modelingExercise.exampleSolutionExplanation\"\r\n                    (markdownChange)=\"calculateFormSectionStatus()\"\r\n                />\r\n            </div>\r\n        }\r\n        @if (!isExamMode) {\r\n            <div class=\"form-group\">\r\n                <jhi-date-time-picker\r\n                    #solutionPublicationDate\r\n                    class=\"form-element\"\r\n                    name=\"exampleSolutionPublicationDate\"\r\n                    labelName=\"{{ 'artemisApp.exercise.exampleSolutionPublicationDate' | artemisTranslate }}\"\r\n                    [(ngModel)]=\"modelingExercise.exampleSolutionPublicationDate\"\r\n                    [error]=\"modelingExercise.exampleSolutionPublicationDateError!\"\r\n                    (valueChange)=\"validateDate()\"\r\n                />\r\n                @if (modelingExercise.exampleSolutionPublicationDateError) {\r\n                    <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.exampleSolutionPublicationDateError\"></span>\r\n                }\r\n            </div>\r\n        }\r\n        <hr class=\"mb-5\" />\r\n        <h3 jhiTranslate=\"artemisApp.exercise.sections.grading\" id=\"artemisApp.exercise.sections.grading\"></h3>\r\n        @if (!isExamMode) {\r\n            <div class=\"d-flex\">\r\n                <div class=\"form-group flex-grow-1\">\r\n                    <jhi-date-time-picker\r\n                        #releaseDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-releaseDate\"\r\n                        labelName=\"{{ 'artemisApp.exercise.releaseDate' | artemisTranslate }}\"\r\n                        [(ngModel)]=\"modelingExercise.releaseDate\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [error]=\"false\"\r\n                        name=\"releaseDate\"\r\n                    />\r\n                </div>\r\n                <div class=\"form-group flex-grow-1 ms-3\">\r\n                    <jhi-date-time-picker\r\n                        #startDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-startDate\"\r\n                        name=\"startDate\"\r\n                        [startAt]=\"modelingExercise.releaseDate\"\r\n                        [min]=\"modelingExercise.releaseDate\"\r\n                        [error]=\"!!modelingExercise.startDateError\"\r\n                        labelName=\"{{ 'artemisApp.exercise.startDate' | artemisTranslate }}\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [(ngModel)]=\"modelingExercise.startDate\"\r\n                    />\r\n                    @if (modelingExercise.startDateError) {\r\n                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.startDateError\"></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (!isExamMode) {\r\n            <div class=\"d-flex\">\r\n                <div class=\"form-group flex-grow-1\">\r\n                    <jhi-date-time-picker\r\n                        #dueDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-dueDate\"\r\n                        name=\"dueDate\"\r\n                        [startAt]=\"modelingExercise.startDate\"\r\n                        [min]=\"modelingExercise.startDate\"\r\n                        [error]=\"!!modelingExercise.dueDateError\"\r\n                        labelName=\"{{ 'artemisApp.exercise.dueDate' | artemisTranslate }}\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [(ngModel)]=\"modelingExercise.dueDate\"\r\n                    />\r\n                    @if (modelingExercise.dueDateError) {\r\n                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.dueDateError\"></span>\r\n                    }\r\n                </div>\r\n                <div class=\"form-group flex-grow-1 ms-3\">\r\n                    <jhi-date-time-picker\r\n                        #assessmentDueDate\r\n                        class=\"form-element\"\r\n                        id=\"pick-assessmentDueDate\"\r\n                        name=\"assessmentDueDate\"\r\n                        [startAt]=\"modelingExercise.dueDate\"\r\n                        [min]=\"modelingExercise.dueDate\"\r\n                        [error]=\"!!modelingExercise.assessmentDueDateError\"\r\n                        labelName=\"{{ 'artemisApp.exercise.assessmentDueDate' | artemisTranslate }}\"\r\n                        (valueChange)=\"validateDate()\"\r\n                        [(ngModel)]=\"modelingExercise.assessmentDueDate\"\r\n                    />\r\n                    @if (modelingExercise.assessmentDueDateError) {\r\n                        <span class=\"invalid-feedback\" jhiTranslate=\"artemisApp.exercise.assessmentDueDateError\"></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.includedInOverallScore{{ modelingExercise.course ? 'Course' : 'Exam' }}Label\"></label>\r\n            <div>\r\n                <jhi-included-in-overall-score-picker\r\n                    [(includedInOverallScore)]=\"modelingExercise.includedInOverallScore\"\r\n                    (includedInOverallScoreChange)=\"validateDate()\"\r\n                    [allowNotIncluded]=\"!isExamMode\"\r\n                    id=\"modeling-includeInScore-picker\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.points\" for=\"field_points\"></label>\r\n                    <input\r\n                        type=\"number\"\r\n                        required\r\n                        class=\"form-control\"\r\n                        [customMin]=\"1\"\r\n                        [customMax]=\"9999\"\r\n                        name=\"points\"\r\n                        id=\"field_points\"\r\n                        [(ngModel)]=\"modelingExercise.maxPoints\"\r\n                        #points=\"ngModel\"\r\n                    />\r\n                    @if (points?.invalid && (points?.dirty || points?.touched) && points?.errors) {\r\n                        <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.exercise.pointsError\"></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"form-group\" [hidden]=\"modelingExercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.bonusPoints\" for=\"field_bonusPoints\"></label>\r\n                    <input\r\n                        type=\"number\"\r\n                        [required]=\"modelingExercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_COMPLETELY\"\r\n                        class=\"form-control\"\r\n                        [customMin]=\"0\"\r\n                        [customMax]=\"9999\"\r\n                        name=\"bonusPoints\"\r\n                        id=\"field_bonusPoints\"\r\n                        [(ngModel)]=\"modelingExercise.bonusPoints\"\r\n                        #bonusPoints=\"ngModel\"\r\n                    />\r\n                    @if (bonusPoints?.invalid && (bonusPoints?.dirty || bonusPoints?.touched) && bonusPoints?.errors) {\r\n                        <div\r\n                            class=\"alert alert-danger\"\r\n                            [hidden]=\"modelingExercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY\"\r\n                            jhiTranslate=\"artemisApp.exercise.bonusPointsError\"\r\n                        ></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.modelingExercise.diagramType\" for=\"field_diagramType\"></label>\r\n            <select\r\n                [disabled]=\"isImport || !!modelingExercise.id\"\r\n                class=\"form-select\"\r\n                name=\"diagramType\"\r\n                [(ngModel)]=\"modelingExercise.diagramType\"\r\n                (ngModelChange)=\"diagramTypeChanged()\"\r\n                id=\"field_diagramType\"\r\n            >\r\n                <option value=\"ClassDiagram\" jhiTranslate=\"artemisApp.DiagramType.ClassDiagram\"></option>\r\n                <option value=\"ActivityDiagram\" jhiTranslate=\"artemisApp.DiagramType.ActivityDiagram\"></option>\r\n                <option value=\"ObjectDiagram\" jhiTranslate=\"artemisApp.DiagramType.ObjectDiagram\"></option>\r\n                <option value=\"UseCaseDiagram\" jhiTranslate=\"artemisApp.DiagramType.UseCaseDiagram\"></option>\r\n                <option value=\"CommunicationDiagram\" jhiTranslate=\"artemisApp.DiagramType.CommunicationDiagram\"></option>\r\n                <option value=\"ComponentDiagram\" jhiTranslate=\"artemisApp.DiagramType.ComponentDiagram\"></option>\r\n                <option value=\"DeploymentDiagram\" jhiTranslate=\"artemisApp.DiagramType.DeploymentDiagram\"></option>\r\n                <option value=\"PetriNet\" jhiTranslate=\"artemisApp.DiagramType.PetriNet\"></option>\r\n                <option value=\"SyntaxTree\" jhiTranslate=\"artemisApp.DiagramType.SyntaxTree\"></option>\r\n                <option value=\"Flowchart\" jhiTranslate=\"artemisApp.DiagramType.Flowchart\"></option>\r\n                <option value=\"BPMN\" jhiTranslate=\"artemisApp.DiagramType.BPMN\"></option>\r\n            </select>\r\n        </div>\r\n        @if (semiAutomaticAssessmentAvailable) {\r\n            <div class=\"form-group\">\r\n                <div class=\"form-check custom-control custom-checkbox\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"automatic_assessment_enabled\"\r\n                        [ngModel]=\"modelingExercise.assessmentType === AssessmentType.SEMI_AUTOMATIC\"\r\n                        (ngModelChange)=\"modelingExercise.assessmentType = $event ? AssessmentType.SEMI_AUTOMATIC : AssessmentType.MANUAL\"\r\n                        class=\"form-check-input custom-control-input\"\r\n                        name=\"automaticAssessmentEnabled\"\r\n                        [disabled]=\"isImport\"\r\n                    />\r\n                    <label\r\n                        class=\"form-check-label custom-control-label\"\r\n                        for=\"automatic_assessment_enabled\"\r\n                        jhiTranslate=\"artemisApp.modelingExercise.automaticAssessmentEnabled\"\r\n                    ></label>\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (!isExamMode) {\r\n            <jhi-exercise-feedback-suggestion-options [exercise]=\"modelingExercise\" [dueDate]=\"modelingExercise.dueDate\" />\r\n            <jhi-exercise-update-plagiarism [exercise]=\"modelingExercise\" />\r\n        }\r\n        <jhi-presentation-score-checkbox [exercise]=\"modelingExercise\" />\r\n        <div class=\"form-group\">\r\n            <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.assessmentInstructions\" for=\"gradingInstructions\"></label>\r\n            <jhi-grading-instructions-details id=\"gradingInstructions\" [exercise]=\"modelingExercise\" />\r\n        </div>\r\n    </div>\r\n    <jhi-form-footer\r\n        [isImport]=\"isImport\"\r\n        [isCreation]=\"!modelingExercise.id\"\r\n        [isSaving]=\"isSaving\"\r\n        [isDisabled]=\"!!(editForm.form.invalid || modelingExercise.dueDateError || modelingExercise.assessmentDueDateError || modelingExercise.exampleSolutionPublicationDateError)\"\r\n        (onCancel)=\"previousState()\"\r\n        (save)=\"save()\"\r\n        [(notificationText)]=\"notificationText\"\r\n    />\r\n</form>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateCategories", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "exerciseCategories", "existingCategories", "\u0275\u0275twoWayListener", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "modelingExercise", "competencyLinks", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "_r5", "exampleSolutionExplanation", "calculateFormSectionStatus", "domainActionsExampleSolution", "_r6", "exampleSolutionPublicationDate", "validateDate", "\u0275\u0275template", "ModelingExerciseUpdateComponent_Conditional_60_Conditional_7_Template", "\u0275\u0275propertyInterpolate", "exampleSolutionPublicationDateError", "\u0275\u0275conditional", "_r7", "releaseDate", "startDate", "ModelingExerciseUpdateComponent_Conditional_65_Conditional_16_Template", "startDateError", "_r8", "dueDate", "ModelingExerciseUpdateComponent_Conditional_66_Conditional_9_Template", "assessmentDueDate", "ModelingExerciseUpdateComponent_Conditional_66_Conditional_17_Template", "dueDateError", "assessmentDueDateError", "includedInOverallScore", "IncludedInOverallScore", "INCLUDED_COMPLETELY", "_r9", "assessmentType", "AssessmentType", "SEMI_AUTOMATIC", "MANUAL", "isImport", "ModelingExerciseUpdateComponent", "alertService", "inject", "AlertService", "modelingExerciseService", "ModelingExerciseService", "modalService", "NgbModal", "popupService", "ExerciseUpdateWarningService", "courseService", "CourseManagementService", "exerciseService", "ExerciseService", "exerciseGroupService", "ExerciseGroupService", "eventManager", "EventManager", "activatedRoute", "ActivatedRoute", "navigationUtilService", "ArtemisNavigationUtilService", "changeDetectorRef", "ChangeDetectorRef", "exerciseTitleChannelNameComponent", "exerciseUpdatePlagiarismComponent", "teamConfigFormGroupComponent", "modelingEditor", "bonusPoints", "points", "solutionPublicationDateField", "releaseDateField", "startDateField", "dueDateField", "assessmentDateField", "documentationType", "UMLDiagramType", "backupExercise", "exampleSolution", "isSaving", "notificationText", "domainActionsProblemStatement", "FormulaAction", "examCourseId", "isExamMode", "semiAutomaticAssessmentAvailable", "formSectionStatus", "titleChannelNameComponentSubscription", "pointsSubscription", "bonusPointsSubscription", "plagiarismSubscription", "teamSubscription", "editType", "EditType", "IMPORT", "id", "undefined", "CREATE", "UPDATE", "ngAfterViewInit", "titleChannelNameComponent", "formValidChanges", "subscribe", "valueChanges", "ngOnInit", "scrollToTopOfPage", "data", "exampleSolutionModel", "JSON", "parse", "cloneDeep", "course", "exerciseGroup", "exam", "url", "pipe", "tap", "segments", "some", "segment", "path", "switchMap", "params", "courseId", "mode", "ExerciseMode", "INDIVIDUAL", "teamAssignmentConfig", "teamMode", "NOT_INCLUDED", "categories", "exerciseGroupId", "examId", "find", "res", "body", "resetForImport", "loadCourseExerciseCategories", "ngOnDestroy", "unsubscribe", "__async", "apollonEditor", "nextRender", "title", "valid", "Boolean", "formValid", "empty", "problemStatement", "dateInput", "isEmpty", "getCurrentModel", "elements", "isValid", "detectChanges", "save", "stringify", "SaveExerciseCommand", "next", "exercise", "onSaveSuccess", "error", "onSaveError", "complete", "previousState", "navigateBackFromExerciseUpdate", "broadcast", "name", "content", "navigateForwardFromExerciseUpdateOrCreation", "errorRes", "addErrorAlert", "message", "onError", "diagramTypeChanged", "selectors", "viewQuery", "rf", "ctx", "ExerciseTitleChannelNameComponent", "ExerciseUpdatePlagiarismComponent", "TeamConfigFormGroupComponent", "ModelingEditorComponent", "ModelingExerciseUpdateComponent_Conditional_5_Template", "ModelingExerciseUpdateComponent_Conditional_6_Template", "ModelingExerciseUpdateComponent_Conditional_7_Template", "ModelingExerciseUpdateComponent_Conditional_19_Template", "_r1", "ModelingExerciseUpdateComponent_Conditional_47_Template", "ModelingExerciseUpdateComponent_Conditional_59_Template", "ModelingExerciseUpdateComponent_Conditional_60_Template", "ModelingExerciseUpdateComponent_Conditional_65_Template", "ModelingExerciseUpdateComponent_Conditional_66_Template", "maxPoints", "ModelingExerciseUpdateComponent_Conditional_88_Template", "ModelingExerciseUpdateComponent_Conditional_100_Template", "diagramType", "ModelingExerciseUpdateComponent_Conditional_134_Template", "ModelingExerciseUpdateComponent_Conditional_135_Template", "\u0275\u0275propertyInterpolate1", "points_r11", "invalid", "dirty", "touched", "errors", "bonusPoints_r12", "editForm_r10", "form", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "NgModel", "NgForm", "TranslateDirective", "DocumentationButtonComponent", "FormStatusBarComponent", "HelpIconComponent", "CategorySelectorComponent", "DifficultyPickerComponent", "MarkdownEditorMonacoComponent", "CompetencySelectionComponent", "FormDateTimePickerComponent", "IncludedInOverallScorePickerComponent", "CustomMinDirective", "CustomMaxDirective", "ExerciseFeedbackSuggestionOptionsComponent", "PresentationScoreComponent", "GradingInstructionsDetailsComponent", "FormFooterComponent", "ArtemisTranslatePipe", "encapsulation", "changeDetection"]
}
