{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/exercise.model.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport dayjs from 'dayjs/esm';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { TutorParticipation } from 'app/entities/participation/tutor-participation.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ExampleSubmission } from 'app/entities/example-submission.model';\r\nimport { Attachment } from 'app/entities/attachment.model';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { TeamAssignmentConfig } from 'app/entities/team-assignment-config.model';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { Team } from 'app/entities/team.model';\r\nimport { DueDateStat } from 'app/course/dashboards/due-date-stat.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { CompetencyExerciseLink } from 'app/entities/competency.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { ExerciseInfo } from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { faCheckDouble, faFileUpload, faFont, faKeyboard, faProjectDiagram, faQuestion } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseScores } from 'app/course/course-scores/course-scores';\r\n\r\nexport enum DifficultyLevel {\r\n    EASY = 'EASY',\r\n    MEDIUM = 'MEDIUM',\r\n    HARD = 'HARD',\r\n}\r\n\r\nexport enum ExerciseMode {\r\n    INDIVIDUAL = 'INDIVIDUAL',\r\n    TEAM = 'TEAM',\r\n}\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with the ones defined in Exercise.java\r\nexport enum ExerciseType {\r\n    PROGRAMMING = 'programming',\r\n    MODELING = 'modeling',\r\n    QUIZ = 'quiz',\r\n    TEXT = 'text',\r\n    FILE_UPLOAD = 'file-upload',\r\n}\r\n\r\nexport type ScoresPerExerciseType = Map<ExerciseType, CourseScores>;\r\n\r\nexport interface ValidationReason {\r\n    translateKey: string;\r\n    translateValues: any;\r\n}\r\n\r\nexport interface PlagiarismDetectionConfig {\r\n    continuousPlagiarismControlEnabled?: boolean;\r\n    continuousPlagiarismControlPostDueDateChecksEnabled?: boolean;\r\n    continuousPlagiarismControlPlagiarismCaseStudentResponsePeriod?: number;\r\n    similarityThreshold?: number;\r\n    minimumScore?: number;\r\n    minimumSize?: number;\r\n}\r\n\r\nexport const DEFAULT_PLAGIARISM_DETECTION_CONFIG: PlagiarismDetectionConfig = {\r\n    continuousPlagiarismControlEnabled: false,\r\n    continuousPlagiarismControlPostDueDateChecksEnabled: false,\r\n    continuousPlagiarismControlPlagiarismCaseStudentResponsePeriod: 7,\r\n    similarityThreshold: 90,\r\n    minimumSize: 50,\r\n    minimumScore: 0,\r\n};\r\n\r\nexport const exerciseTypes: ExerciseType[] = [ExerciseType.TEXT, ExerciseType.MODELING, ExerciseType.PROGRAMMING, ExerciseType.FILE_UPLOAD, ExerciseType.QUIZ];\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with the ones defined in Exercise.java\r\nexport enum IncludedInOverallScore {\r\n    INCLUDED_COMPLETELY = 'INCLUDED_COMPLETELY',\r\n    INCLUDED_AS_BONUS = 'INCLUDED_AS_BONUS',\r\n    NOT_INCLUDED = 'NOT_INCLUDED',\r\n}\r\n\r\nexport abstract class Exercise implements BaseEntity {\r\n    public id?: number;\r\n    public problemStatement?: string;\r\n    public gradingInstructions?: string;\r\n    public title?: string;\r\n    public shortName?: string;\r\n    public releaseDate?: dayjs.Dayjs;\r\n    public startDate?: dayjs.Dayjs;\r\n    public dueDate?: dayjs.Dayjs;\r\n    public assessmentDueDate?: dayjs.Dayjs;\r\n    public maxPoints?: number;\r\n    public bonusPoints?: number;\r\n    public assessmentType?: AssessmentType;\r\n    public allowComplaintsForAutomaticAssessments?: boolean;\r\n    public allowFeedbackRequests?: boolean;\r\n    public difficulty?: DifficultyLevel;\r\n    public mode?: ExerciseMode = ExerciseMode.INDIVIDUAL; // default value\r\n    public includedInOverallScore?: IncludedInOverallScore = IncludedInOverallScore.INCLUDED_COMPLETELY; // default value\r\n    public teamAssignmentConfig?: TeamAssignmentConfig;\r\n    public categories?: ExerciseCategory[];\r\n    public type?: ExerciseType;\r\n    public exampleSolutionPublicationDate?: dayjs.Dayjs;\r\n\r\n    public teams?: Team[];\r\n    public studentParticipations?: StudentParticipation[];\r\n    public tutorParticipations?: TutorParticipation[];\r\n    public course?: Course;\r\n    public exampleSubmissions?: ExampleSubmission[];\r\n    public attachments?: Attachment[];\r\n    public posts?: Post[];\r\n    public gradingCriteria?: GradingCriterion[];\r\n    public exerciseGroup?: ExerciseGroup;\r\n    public competencyLinks?: CompetencyExerciseLink[];\r\n\r\n    public plagiarismDetectionConfig?: PlagiarismDetectionConfig = DEFAULT_PLAGIARISM_DETECTION_CONFIG; // default value\r\n\r\n    // transient objects which might not be set\r\n    public numberOfSubmissions?: DueDateStat;\r\n    public totalNumberOfAssessments?: DueDateStat;\r\n    public numberOfAssessmentsOfCorrectionRounds = [new DueDateStat()]; // Array with number of assessments for each correction round\r\n    public numberOfComplaints?: number;\r\n    public numberOfOpenComplaints?: number;\r\n    public numberOfMoreFeedbackRequests?: number;\r\n    public numberOfOpenMoreFeedbackRequests?: number;\r\n    public studentAssignedTeamId?: number;\r\n    public studentAssignedTeamIdComputed = false;\r\n    public numberOfParticipations?: number;\r\n    public testRunParticipationsExist?: boolean;\r\n    public averageRating?: number;\r\n    public numberOfRatings?: number;\r\n    public channelName?: string;\r\n    public completed?: boolean;\r\n\r\n    // helper attributes\r\n    public secondCorrectionEnabled = false;\r\n    public feedbackSuggestionModule?: string;\r\n    public isAtLeastTutor?: boolean;\r\n    public isAtLeastEditor?: boolean;\r\n    public isAtLeastInstructor?: boolean;\r\n    public teamMode?: boolean;\r\n    public assessmentDueDateError?: boolean;\r\n    public dueDateError?: boolean;\r\n    public startDateError?: boolean;\r\n    public exampleSolutionPublicationDateError?: boolean;\r\n    public exampleSolutionPublicationDateWarning?: boolean;\r\n    public loading?: boolean;\r\n    public numberOfParticipationsWithRatedResult?: number;\r\n    public numberOfSuccessfulParticipations?: number;\r\n    public averagePoints?: number;\r\n    public presentationScoreEnabled?: boolean;\r\n    public gradingInstructionFeedbackUsed?: boolean;\r\n    public zipFileForImport?: File;\r\n\r\n    protected constructor(type: ExerciseType) {\r\n        this.type = type;\r\n        this.bonusPoints = 0; // default value\r\n        this.isAtLeastTutor = false; // default value\r\n        this.isAtLeastEditor = false; // default value\r\n        this.isAtLeastInstructor = false; // default value\r\n        this.teamMode = false; // default value\r\n        this.assessmentDueDateError = false;\r\n        this.dueDateError = false;\r\n        this.startDateError = false;\r\n        this.exampleSolutionPublicationDateError = false;\r\n        this.presentationScoreEnabled = false; // default value;\r\n        this.allowComplaintsForAutomaticAssessments = false; // default value;\r\n        this.allowFeedbackRequests = false; // default value;\r\n    }\r\n\r\n    /**\r\n     * Sanitize exercise attributes.\r\n     * This method should be used before sending an exercise to the server.\r\n     *\r\n     * @param exercise\r\n     */\r\n    public static sanitize<T extends Exercise>(exercise: T): T {\r\n        exercise.title = exercise.title?.trim();\r\n        return exercise;\r\n    }\r\n}\r\n\r\n/**\r\n * Get an icon for the type of the given exercise.\r\n * @param exerciseType {ExerciseType}\r\n */\r\nexport function getIcon(exerciseType?: ExerciseType): IconProp {\r\n    if (!exerciseType) {\r\n        return faQuestion as IconProp;\r\n    }\r\n\r\n    const icons = {\r\n        [ExerciseType.PROGRAMMING]: faKeyboard,\r\n        [ExerciseType.MODELING]: faProjectDiagram,\r\n        [ExerciseType.QUIZ]: faCheckDouble,\r\n        [ExerciseType.TEXT]: faFont,\r\n        [ExerciseType.FILE_UPLOAD]: faFileUpload,\r\n    };\r\n\r\n    return icons[exerciseType] as IconProp;\r\n}\r\n\r\nexport function getIconTooltip(exerciseType?: ExerciseType): string {\r\n    if (!exerciseType) {\r\n        return '';\r\n    }\r\n    const tooltips = {\r\n        [ExerciseType.PROGRAMMING]: 'artemisApp.exercise.isProgramming',\r\n        [ExerciseType.MODELING]: 'artemisApp.exercise.isModeling',\r\n        [ExerciseType.QUIZ]: 'artemisApp.exercise.isQuiz',\r\n        [ExerciseType.TEXT]: 'artemisApp.exercise.isText',\r\n        [ExerciseType.FILE_UPLOAD]: 'artemisApp.exercise.isFileUpload',\r\n    };\r\n\r\n    return tooltips[exerciseType];\r\n}\r\n\r\n/**\r\n * Get the course id for an exercise.\r\n * The course id is extracted from the course of the exercise if present, if not present (exam mode), it is extracted from the corresponding exam.\r\n * @param exercise the exercise for which the course id should be extracted\r\n */\r\nexport function getCourseId(exercise: Exercise): number | undefined {\r\n    return getCourseFromExercise(exercise)?.id;\r\n}\r\n\r\n/**\r\n * Get the course for an exercise.\r\n * The course is extracted from the course of the exercise if present, if not present (exam mode), it is extracted from the corresponding exam.\r\n * @param exercise the exercise for which the course should be extracted\r\n */\r\nexport function getCourseFromExercise(exercise: Exercise): Course | undefined {\r\n    return exercise.course || exercise.exerciseGroup?.exam?.course;\r\n}\r\n\r\n/**\r\n * In order to create an ExerciseType enum, we take the ExerciseInfo (which can be fetched from the server) and map it to the ExerciseType\r\n * @param exerciseInfo the exercise information which is given by the server java class\r\n * @return ExerciseType or undefined if the exerciseInfo does not match\r\n */\r\nexport function declareExerciseType(exerciseInfo: ExerciseInfo): ExerciseType | undefined {\r\n    switch (exerciseInfo.exerciseType) {\r\n        case 'TextExercise':\r\n            return ExerciseType.TEXT;\r\n        case 'ModelingExercise':\r\n            return ExerciseType.MODELING;\r\n        case 'ProgrammingExercise':\r\n            return ExerciseType.PROGRAMMING;\r\n        case 'FileUploadExercise':\r\n            return ExerciseType.FILE_UPLOAD;\r\n        case 'QuizExercise':\r\n            return ExerciseType.QUIZ;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Get the url segment for different types of exercises.\r\n * @param exerciseType The type of the exercise\r\n * @return The url segment for the exercise type\r\n */\r\nexport function getExerciseUrlSegment(exerciseType?: ExerciseType): string {\r\n    switch (exerciseType) {\r\n        case ExerciseType.TEXT:\r\n            return 'text-exercises';\r\n        case ExerciseType.MODELING:\r\n            return 'modeling-exercises';\r\n        case ExerciseType.PROGRAMMING:\r\n            return 'programming-exercises';\r\n        case ExerciseType.FILE_UPLOAD:\r\n            return 'file-upload-exercises';\r\n        case ExerciseType.QUIZ:\r\n            return 'quiz-exercises';\r\n        default:\r\n            throw Error('Unexpected exercise type: ' + exerciseType);\r\n    }\r\n}\r\n\r\nexport function resetForImport(exercise: Exercise) {\r\n    exercise.releaseDate = undefined;\r\n    exercise.startDate = undefined;\r\n    exercise.dueDate = undefined;\r\n    exercise.assessmentDueDate = undefined;\r\n    exercise.exampleSolutionPublicationDate = undefined;\r\n\r\n    // without dates set, they can only be false\r\n    exercise.allowComplaintsForAutomaticAssessments = false;\r\n    exercise.allowFeedbackRequests = false;\r\n\r\n    exercise.competencyLinks = [];\r\n}\r\n"],
  "mappings": "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",
  "names": ["DifficultyLevel", "ExerciseMode", "ExerciseType", "DEFAULT_PLAGIARISM_DETECTION_CONFIG", "continuousPlagiarismControlEnabled", "continuousPlagiarismControlPostDueDateChecksEnabled", "continuousPlagiarismControlPlagiarismCaseStudentResponsePeriod", "similarityThreshold", "minimumSize", "minimumScore", "exerciseTypes", "TEXT", "MODELING", "PROGRAMMING", "FILE_UPLOAD", "QUIZ", "IncludedInOverallScore", "Exercise", "id", "problemStatement", "gradingInstructions", "title", "shortName", "releaseDate", "startDate", "dueDate", "assessmentDueDate", "maxPoints", "bonusPoints", "assessmentType", "allowComplaintsForAutomaticAssessments", "allowFeedbackRequests", "difficulty", "mode", "INDIVIDUAL", "includedInOverallScore", "INCLUDED_COMPLETELY", "teamAssignmentConfig", "categories", "type", "exampleSolutionPublicationDate", "teams", "studentParticipations", "tutorParticipations", "course", "exampleSubmissions", "attachments", "posts", "gradingCriteria", "exerciseGroup", "competencyLinks", "plagiarismDetectionConfig", "numberOfSubmissions", "totalNumberOfAssessments", "numberOfAssessmentsOfCorrectionRounds", "DueDateStat", "numberOfComplaints", "numberOfOpenComplaints", "numberOfMoreFeedbackRequests", "numberOfOpenMoreFeedbackRequests", "studentAssignedTeamId", "studentAssignedTeamIdComputed", "numberOfParticipations", "testRunParticipationsExist", "averageRating", "numberOfRatings", "channelName", "completed", "secondCorrectionEnabled", "feedbackSuggestionModule", "isAtLeastTutor", "isAtLeastEditor", "isAtLeastInstructor", "teamMode", "assessmentDueDateError", "dueDateError", "startDateError", "exampleSolutionPublicationDateError", "exampleSolutionPublicationDateWarning", "loading", "numberOfParticipationsWithRatedResult", "numberOfSuccessfulParticipations", "averagePoints", "presentationScoreEnabled", "gradingInstructionFeedbackUsed", "zipFileForImport", "constructor", "sanitize", "exercise", "trim", "getIcon", "exerciseType", "faKeyboard", "faProjectDiagram", "faCheckDouble", "faFont", "faFileUpload", "faQuestion", "getIconTooltip", "getCourseId", "getCourseFromExercise", "exam", "declareExerciseType", "exerciseInfo", "getExerciseUrlSegment", "Error", "resetForImport", "undefined"]
}
