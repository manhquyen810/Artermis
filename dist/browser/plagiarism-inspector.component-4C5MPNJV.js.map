{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/plagiarism/types/PlagiarismOptions.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.service.ts", "src/main/webapp/app/exercises/shared/plagiarism/types/PlagiarismStatus.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-sidebar/plagiarism-sidebar.component.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-sidebar/plagiarism-sidebar.component.html", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-header/plagiarism-header.component.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-header/plagiarism-header.component.html", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-details/plagiarism-details.component.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-details/plagiarism-details.component.html", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-run-details/plagiarism-run-details.component.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-run-details/plagiarism-run-details.component.html", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.component.ts", "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.component.html"],
  "sourcesContent": ["export class PlagiarismOptions {\r\n    /**\r\n     * Ignore comparisons whose similarity is below this threshold (%).\r\n     */\r\n    similarityThreshold: number;\r\n\r\n    /**\r\n     * Consider only submissions whose score is greater or equal to this value.\r\n     */\r\n    minimumScore: number;\r\n\r\n    /**\r\n     * Consider only submissions whose size is greater or equal to this value.\r\n     */\r\n    minimumSize: number;\r\n\r\n    constructor(similarityThreshold: number, minimumScore: number, minimumSize: number) {\r\n        this.similarityThreshold = similarityThreshold;\r\n        this.minimumScore = minimumScore;\r\n        this.minimumSize = minimumSize;\r\n    }\r\n\r\n    /**\r\n     * Map the option values to strings so that they can be used as request params.\r\n     */\r\n    toParams() {\r\n        return {\r\n            similarityThreshold: this.similarityThreshold.toString(),\r\n            minimumScore: this.minimumScore.toString(),\r\n            minimumSize: this.minimumSize.toString(),\r\n        };\r\n    }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { Range } from 'app/shared/util/utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlagiarismInspectorService {\r\n    /**\r\n     * Filters the given comparisons and returns only those that have a similarity within the range [minimumSimilarity, maximumSimilarity)\r\n     * Note: similarities are defined as doubles between 0 and 100\r\n     * @param range the similarity range the comparisons should be filtered against\r\n     * @param comparisons the comparisons that should be filtered\r\n     */\r\n    filterComparisons(range: Range, comparisons?: PlagiarismComparison<any>[]): PlagiarismComparison<any>[] {\r\n        if (!comparisons) {\r\n            return [];\r\n        }\r\n        let filterFunction;\r\n        if (range.upperBound === 100) {\r\n            filterFunction = (comparison: PlagiarismComparison<any>) => comparison.similarity >= range.lowerBound && comparison.similarity <= range.upperBound;\r\n        } else {\r\n            filterFunction = (comparison: PlagiarismComparison<any>) => comparison.similarity >= range.lowerBound && comparison.similarity < range.upperBound;\r\n        }\r\n        return comparisons.filter(filterFunction);\r\n    }\r\n}\r\n", "/**\r\n * After automatic detection, each plagiarism has to be reviewed and revalidated by an instructor.\r\n */\r\nexport enum PlagiarismStatus {\r\n    /**\r\n     * Plagiarism has been confirmed by an instructor.\r\n     */\r\n    CONFIRMED = 'CONFIRMED',\r\n\r\n    /**\r\n     * Plagiarism has been denied by an instructor.\r\n     */\r\n    DENIED = 'DENIED',\r\n\r\n    /**\r\n     * The incident has not been reviewed yet.\r\n     */\r\n    NONE = 'NONE',\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { TextSubmissionElement } from 'app/exercises/shared/plagiarism/types/text/TextSubmissionElement';\r\nimport { ModelingSubmissionElement } from 'app/exercises/shared/plagiarism/types/modeling/ModelingSubmissionElement';\r\nimport { PlagiarismStatus } from 'app/exercises/shared/plagiarism/types/PlagiarismStatus';\r\nimport { faArrowLeft, faArrowRight, faChevronRight, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DecimalPipe, NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-plagiarism-sidebar',\r\n    styleUrls: ['./plagiarism-sidebar.component.scss'],\r\n    templateUrl: './plagiarism-sidebar.component.html',\r\n    imports: [FaIconComponent, TranslateDirective, NgClass, DecimalPipe, ArtemisTranslatePipe],\r\n})\r\nexport class PlagiarismSidebarComponent implements OnChanges {\r\n    @Input() activeID: number;\r\n    @Input() comparisons?: PlagiarismComparison<TextSubmissionElement | ModelingSubmissionElement>[];\r\n    @Input() casesFiltered = false;\r\n    @Input() offset = 0;\r\n\r\n    @Input() showRunDetails: boolean;\r\n    @Output() showRunDetailsChange = new EventEmitter<boolean>();\r\n\r\n    @Output() selectIndex = new EventEmitter<number>();\r\n\r\n    readonly CONFIRMED = PlagiarismStatus.CONFIRMED;\r\n    readonly DENIED = PlagiarismStatus.DENIED;\r\n\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    /**\r\n     * Index of the currently selected result page.\r\n     */\r\n    public currentPage = 0;\r\n\r\n    /**\r\n     * Total number of result pages.\r\n     */\r\n    public numberOfPages = 0;\r\n\r\n    /**\r\n     * Subset of currently paged comparisons.\r\n     */\r\n    public pagedComparisons?: PlagiarismComparison<TextSubmissionElement | ModelingSubmissionElement>[];\r\n\r\n    /**\r\n     * Number of comparisons per page.\r\n     */\r\n    public pageSize = 100;\r\n\r\n    // Icons\r\n    faChevronRight = faChevronRight;\r\n    faArrowLeft = faArrowLeft;\r\n    faArrowRight = faArrowRight;\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.comparisons) {\r\n            const comparisons: PlagiarismComparison<TextSubmissionElement | ModelingSubmissionElement>[] = changes.comparisons.currentValue;\r\n\r\n            this.currentPage = 0;\r\n            if (!comparisons) {\r\n                this.numberOfPages = 1;\r\n            } else {\r\n                this.numberOfPages = this.computeNumberOfPages(comparisons.length);\r\n            }\r\n            this.pagedComparisons = this.getPagedComparisons();\r\n        }\r\n    }\r\n\r\n    displayRunDetails() {\r\n        this.showRunDetailsChange.emit(true);\r\n    }\r\n\r\n    computeNumberOfPages(totalComparisons: number) {\r\n        return Math.ceil(totalComparisons / this.pageSize);\r\n    }\r\n\r\n    getPagedComparisons() {\r\n        const startIndex = this.currentPage * this.pageSize;\r\n        return this.comparisons?.slice(startIndex, startIndex + this.pageSize);\r\n    }\r\n\r\n    getPagedIndex(idx: number) {\r\n        return idx + this.currentPage * this.pageSize;\r\n    }\r\n\r\n    handlePageLeft() {\r\n        if (this.currentPage === 0) {\r\n            return;\r\n        }\r\n\r\n        this.currentPage--;\r\n        this.pagedComparisons = this.getPagedComparisons();\r\n    }\r\n\r\n    handlePageRight() {\r\n        if (this.currentPage + 1 >= this.numberOfPages) {\r\n            return;\r\n        }\r\n\r\n        this.currentPage++;\r\n        this.pagedComparisons = this.getPagedComparisons();\r\n    }\r\n}\r\n", "<aside class=\"plagiarism-sidebar\">\r\n    <div class=\"plagiarism-info-tab\" [class.selected]=\"showRunDetails\" (click)=\"displayRunDetails()\">\r\n        <span>Run details</span>\r\n        <fa-icon [icon]=\"faChevronRight\" />\r\n    </div>\r\n    @if (casesFiltered) {\r\n        <div class=\"filter-disclaimer\">\r\n            <fa-icon class=\"text-warning disclaimer-icon\" [icon]=\"faExclamationTriangle\" />\r\n            <span jhiTranslate=\"artemisApp.plagiarism.casesFiltered\"></span>\r\n        </div>\r\n    }\r\n    <!--  Temporary solution until #6593 is fixed  -->\r\n    @if (comparisons?.length === 100) {\r\n        <div class=\"filter-disclaimer\">\r\n            <fa-icon class=\"text-warning disclaimer-icon\" [icon]=\"faExclamationTriangle\" />\r\n            <span jhiTranslate=\"artemisApp.plagiarism.casesTrimmed\"></span>\r\n        </div>\r\n    }\r\n    @if (comparisons && comparisons.length) {\r\n        <ul class=\"plagiarism-list\">\r\n            @for (comparison of pagedComparisons; track comparison; let idx = $index) {\r\n                <li class=\"plagiarism-list-item\" [class.selected]=\"!showRunDetails && comparison.id === activeID\" (click)=\"selectIndex.emit(comparison.id)\">\r\n                    <div class=\"plagiarism-list-item-content\">\r\n                        <span\r\n                            class=\"plagiarism-status-indicator\"\r\n                            [ngClass]=\"{\r\n                                confirmed: comparison.status === CONFIRMED,\r\n                                denied: comparison.status === DENIED,\r\n                            }\"\r\n                        ></span>\r\n                        <div class=\"plagiarism-list-item-info\">\r\n                            <span class=\"plagiarism-name\"> #{{ getPagedIndex(idx) + 1 + offset }} </span>\r\n                            <span class=\"plagiarism-list-item-students\">\r\n                                <span>{{ comparison.submissionA.studentLogin || ('artemisApp.plagiarism.unknownStudent' | artemisTranslate) }}, </span>\r\n                                <span>{{ comparison.submissionB.studentLogin || ('artemisApp.plagiarism.unknownStudent' | artemisTranslate) }}</span>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <span class=\"plagiarism-percentage\">({{ comparison.similarity || 0 | number: '1.2-2' }} %)</span>\r\n                </li>\r\n            }\r\n        </ul>\r\n    }\r\n    @if (!comparisons || !comparisons.length) {\r\n        <div class=\"plagiarism-empty\" jhiTranslate=\"artemisApp.plagiarism.notFound\"></div>\r\n    }\r\n    <div class=\"plagiarism-paging\">\r\n        <div class=\"plagiarism-paging-left\" [class.disabled]=\"currentPage === 0\" (click)=\"handlePageLeft()\">\r\n            <fa-icon [icon]=\"faArrowLeft\" />\r\n        </div>\r\n        <div class=\"plagiarism-paging-center\">{{ currentPage + 1 }}/{{ numberOfPages }}</div>\r\n        <div class=\"plagiarism-paging-right\" [class.disabled]=\"currentPage + 1 >= numberOfPages\" (click)=\"handlePageRight()\">\r\n            <fa-icon [icon]=\"faArrowRight\" />\r\n        </div>\r\n    </div>\r\n</aside>\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { PlagiarismStatus } from 'app/exercises/shared/plagiarism/types/PlagiarismStatus';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { TextSubmissionElement } from 'app/exercises/shared/plagiarism/types/text/TextSubmissionElement';\r\nimport { ModelingSubmissionElement } from 'app/exercises/shared/plagiarism/types/modeling/ModelingSubmissionElement';\r\nimport { PlagiarismCasesService } from 'app/course/plagiarism-cases/shared/plagiarism-cases.service';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Exercise, getCourseId } from 'app/entities/exercise.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'jhi-plagiarism-header',\r\n    styleUrls: ['./plagiarism-header.component.scss'],\r\n    templateUrl: './plagiarism-header.component.html',\r\n    imports: [TranslateDirective, ArtemisTranslatePipe, RouterModule],\r\n})\r\nexport class PlagiarismHeaderComponent {\r\n    private plagiarismCasesService = inject(PlagiarismCasesService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    @Input() comparison: PlagiarismComparison<TextSubmissionElement | ModelingSubmissionElement>;\r\n    @Input() exercise: Exercise;\r\n    @Input() splitControlSubject: Subject<string>;\r\n\r\n    readonly plagiarismStatus = PlagiarismStatus;\r\n    isLoading = false;\r\n\r\n    /**\r\n     * Set the status of the currently selected comparison to CONFIRMED.\r\n     */\r\n    confirmPlagiarism() {\r\n        this.updatePlagiarismStatus(PlagiarismStatus.CONFIRMED);\r\n    }\r\n\r\n    /**\r\n     * Set the status of the currently selected comparison to DENIED.\r\n     */\r\n    denyPlagiarism() {\r\n        if (this.comparison.status === PlagiarismStatus.CONFIRMED) {\r\n            this.askForConfirmationOfDenying(() => this.updatePlagiarismStatus(PlagiarismStatus.DENIED));\r\n        } else {\r\n            this.updatePlagiarismStatus(PlagiarismStatus.DENIED);\r\n        }\r\n    }\r\n\r\n    private askForConfirmationOfDenying(onConfirm: () => void) {\r\n        this.isLoading = true;\r\n\r\n        const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'lg' });\r\n        modalRef.componentInstance.title = 'artemisApp.plagiarism.denyAfterConfirmModalTitle';\r\n        modalRef.componentInstance.text = 'artemisApp.plagiarism.denyAfterConfirmModalText';\r\n        modalRef.componentInstance.translateText = true;\r\n        modalRef.result.then(onConfirm, () => (this.isLoading = false));\r\n    }\r\n\r\n    /**\r\n     * Update the status of the currently selected comparison.\r\n     * @param status the new status of the comparison\r\n     */\r\n    updatePlagiarismStatus(status: PlagiarismStatus) {\r\n        this.isLoading = true;\r\n        // store comparison in variable in case comparison changes while request is made\r\n        const comparison = this.comparison;\r\n        this.plagiarismCasesService.updatePlagiarismComparisonStatus(getCourseId(this.exercise)!, comparison.id, status).subscribe(() => {\r\n            comparison.status = status;\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    expandSplitPane(pane: 'left' | 'right') {\r\n        this.splitControlSubject.next(pane);\r\n    }\r\n\r\n    resetSplitPanes() {\r\n        this.splitControlSubject.next('even');\r\n    }\r\n}\r\n", "<div class=\"plagiarism-header\">\r\n    <div class=\"plagiarism-header-left\">\r\n        <h5 class=\"fw-medium\">\r\n            {{ comparison.submissionA.studentLogin || ('artemisApp.plagiarism.unknownStudent' | artemisTranslate) }},\r\n            {{ comparison.submissionB.studentLogin || ('artemisApp.plagiarism.unknownStudent' | artemisTranslate) }}\r\n        </h5>\r\n    </div>\r\n\r\n    <div class=\"plagiarism-header-right\">\r\n        @if (comparison.status === plagiarismStatus.CONFIRMED) {\r\n            <button\r\n                class=\"btn btn-primary btn-sm\"\r\n                data-qa=\"view-plagiarism-cases-button\"\r\n                jhiTranslate=\"artemisApp.plagiarism.viewCases\"\r\n                [routerLink]=\"['/course-management', exercise.course?.id, 'plagiarism-cases']\"\r\n                [queryParams]=\"{ exerciseId: exercise.id }\"\r\n                [disabled]=\"isLoading || exercise.teamMode\"\r\n            ></button>\r\n        } @else {\r\n            <button\r\n                class=\"btn btn-success btn-sm\"\r\n                (click)=\"confirmPlagiarism()\"\r\n                data-qa=\"confirm-plagiarism-button\"\r\n                jhiTranslate=\"artemisApp.plagiarism.confirm\"\r\n                [disabled]=\"isLoading || exercise.teamMode\"\r\n            ></button>\r\n        }\r\n\r\n        <button\r\n            class=\"btn btn-danger btn-sm\"\r\n            (click)=\"denyPlagiarism()\"\r\n            data-qa=\"deny-plagiarism-button\"\r\n            jhiTranslate=\"artemisApp.plagiarism.deny\"\r\n            [disabled]=\"comparison.status === plagiarismStatus.DENIED || isLoading || exercise.teamMode\"\r\n        ></button>\r\n\r\n        <div class=\"vertical-divider\"></div>\r\n\r\n        <div class=\"split-controls\">\r\n            <div class=\"split-control\" (click)=\"expandSplitPane('left')\" data-qa=\"split-view-left\">\r\n                <svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M4 5.5C4 4.67157 4.67157 4 5.5 4H15V20H5.5C4.67157 20 4 19.3284 4 18.5V5.5Z\" fill=\"#E4E5E6\" />\r\n                    <path d=\"M17 4H18.5C19.3284 4 20 4.67157 20 5.5V18.5C20 19.3284 19.3284 20 18.5 20H17V4Z\" fill=\"#E4E5E6\" />\r\n                </svg>\r\n            </div>\r\n            <div class=\"split-control\" (click)=\"resetSplitPanes()\" data-qa=\"split-view-even\">\r\n                <svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M4 5.5C4 4.67157 4.67157 4 5.5 4H11V20H5.5C4.67157 20 4 19.3284 4 18.5V5.5Z\" fill=\"#E4E5E6\" />\r\n                    <path d=\"M13 4H18.5C19.3284 4 20 4.67157 20 5.5V18.5C20 19.3284 19.3284 20 18.5 20H13V4Z\" fill=\"#E4E5E6\" />\r\n                </svg>\r\n            </div>\r\n            <div class=\"split-control\" (click)=\"expandSplitPane('right')\" data-qa=\"split-view-right\">\r\n                <svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M20 18.5C20 19.3284 19.3284 20 18.5 20L9 20L9 4L18.5 4C19.3284 4 20 4.67157 20 5.5L20 18.5Z\" fill=\"#E4E5E6\" />\r\n                    <path d=\"M7 20L5.5 20C4.67157 20 4 19.3284 4 18.5L4 5.5C4 4.67157 4.67157 4 5.5 4L7 4L7 20Z\" fill=\"#E4E5E6\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { TextSubmissionElement } from 'app/exercises/shared/plagiarism/types/text/TextSubmissionElement';\r\nimport { ModelingSubmissionElement } from 'app/exercises/shared/plagiarism/types/modeling/ModelingSubmissionElement';\r\nimport { PlagiarismHeaderComponent } from '../plagiarism-header/plagiarism-header.component';\r\nimport { PlagiarismSplitViewComponent } from '../plagiarism-split-view/plagiarism-split-view.component';\r\n\r\n@Component({\r\n    selector: 'jhi-plagiarism-details',\r\n    styleUrls: ['./plagiarism-details.component.scss'],\r\n    templateUrl: './plagiarism-details.component.html',\r\n    imports: [PlagiarismHeaderComponent, PlagiarismSplitViewComponent],\r\n})\r\nexport class PlagiarismDetailsComponent {\r\n    @Input() comparison?: PlagiarismComparison<TextSubmissionElement | ModelingSubmissionElement>;\r\n    @Input() exercise: Exercise;\r\n\r\n    /**\r\n     * Subject to be passed into PlagiarismSplitViewComponent to control the split view.\r\n     */\r\n    splitControlSubject: Subject<string> = new Subject<string>();\r\n}\r\n", "@if (comparison) {\r\n    <div class=\"plagiarism-details\">\r\n        <jhi-plagiarism-header [splitControlSubject]=\"splitControlSubject\" [exercise]=\"exercise\" [comparison]=\"comparison\" />\r\n        <jhi-plagiarism-split-view [comparison]=\"comparison\" [exercise]=\"exercise\" [splitControlSubject]=\"splitControlSubject\" />\r\n    </div>\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, inject } from '@angular/core';\r\nimport { TextPlagiarismResult } from 'app/exercises/shared/plagiarism/types/text/TextPlagiarismResult';\r\nimport { ModelingPlagiarismResult } from 'app/exercises/shared/plagiarism/types/modeling/ModelingPlagiarismResult';\r\nimport { PlagiarismAndTutorEffortDirective } from 'app/exercises/shared/plagiarism/plagiarism-run-details/plagiarism-and-tutor-effort.directive';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { Range, round } from 'app/shared/util/utils';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { PlagiarismInspectorService } from 'app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.service';\r\nimport { PlagiarismStatus } from 'app/exercises/shared/plagiarism/types/PlagiarismStatus';\r\nimport { PlagiarismResultStats } from 'app/exercises/shared/plagiarism/types/PlagiarismResultDTO';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { DatePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ninterface SimilarityRangeComparisonStateDTO {\r\n    confirmed: number;\r\n    denied: number;\r\n    open: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-plagiarism-run-details',\r\n    styleUrls: ['./plagiarism-run-details.component.scss', '../../../../shared/chart/vertical-bar-chart.scss'],\r\n    templateUrl: './plagiarism-run-details.component.html',\r\n    imports: [TranslateDirective, HelpIconComponent, BarChartModule, DatePipe, ArtemisTranslatePipe],\r\n})\r\nexport class PlagiarismRunDetailsComponent extends PlagiarismAndTutorEffortDirective implements OnChanges {\r\n    private inspectorService = inject(PlagiarismInspectorService);\r\n\r\n    /**\r\n     * Result of the automated plagiarism detection\r\n     */\r\n    @Input() plagiarismResult?: TextPlagiarismResult | ModelingPlagiarismResult;\r\n    /**\r\n     * Statistics for the automated plagiarism detection result\r\n     */\r\n    @Input() plagiarismResultStats?: PlagiarismResultStats;\r\n    @Output() similaritySelected: EventEmitter<Range> = new EventEmitter<Range>();\r\n\r\n    yScaleMax = 5;\r\n    totalDetectedPlagiarisms: number;\r\n    bucketDTOs: SimilarityRangeComparisonStateDTO[] = [];\r\n\r\n    readonly round = round;\r\n\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The labels of the chart are fixed and represent the 10 intervals we group the similarities into.\r\n         */\r\n        this.ngxChartLabels = ['[0%-10%)', '[10%-20%)', '[20%-30%)', '[30%-40%)', '[40%-50%)', '[50%-60%)', '[60%-70%)', '[70%-80%)', '[80%-90%)', '[90%-100%]'];\r\n        this.ngxColor.domain = [...Array(8).fill(GraphColors.LIGHT_BLUE), ...Array(2).fill(GraphColors.RED)];\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.plagiarismResult) {\r\n            this.setBucketDTOs(changes.plagiarismResult.currentValue.comparisons || []);\r\n            this.updateChartDataSet(changes.plagiarismResult.currentValue.similarityDistribution || []);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the data of the dataset at the given index.\r\n     *\r\n     * @param data  - the updated data array\r\n     */\r\n    updateChartDataSet(data: number[]) {\r\n        let ngxDataEntity;\r\n        this.ngxData = [];\r\n        data.forEach((value, position) => {\r\n            ngxDataEntity = {\r\n                name: this.ngxChartLabels[position],\r\n                value,\r\n            };\r\n            this.ngxData.push(ngxDataEntity);\r\n        });\r\n        this.totalDetectedPlagiarisms = data.reduce((number1, number2) => number1 + number2, 0);\r\n        this.ngxData = [...this.ngxData];\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that sets the comparison dtos for the different chart buckets. These are used for the chart tooltips\r\n     * to show the number of confirmed, denied and open plagiarism cases\r\n     * @param comparisons the pairs identified by the detection tool\r\n     */\r\n    private setBucketDTOs(comparisons: PlagiarismComparison<any>[]): void {\r\n        this.bucketDTOs = [];\r\n        // we use this array as minimum similarities for the filtering\r\n        const steps = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\r\n        let comparisonsWithinRange;\r\n        let additionInformationEntry;\r\n        steps.forEach((minimumSimilarity) => {\r\n            comparisonsWithinRange = this.inspectorService.filterComparisons(new Range(minimumSimilarity, minimumSimilarity + 10), comparisons);\r\n            additionInformationEntry = {\r\n                confirmed: comparisonsWithinRange.filter((comparison) => comparison.status === PlagiarismStatus.CONFIRMED).length,\r\n                denied: comparisonsWithinRange.filter((comparison) => comparison.status === PlagiarismStatus.DENIED).length,\r\n                open: comparisonsWithinRange.filter((comparison) => comparison.status === PlagiarismStatus.NONE).length,\r\n            };\r\n            this.bucketDTOs.push(additionInformationEntry);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the DTO for a specific bucket\r\n     * @param label the bar label the DTO should be returned for\r\n     */\r\n    getBucketDTO(label: string): SimilarityRangeComparisonStateDTO {\r\n        const index = this.ngxChartLabels.indexOf(label);\r\n        return this.bucketDTOs[index];\r\n    }\r\n\r\n    /**\r\n     * Handles the click on a specific chart bar\r\n     * Emits the selected range to {@link PlagiarismInspectorComponent#filterByChart} so that the comparisons shown in the sidebar can be filtered accordingly\r\n     * @param event the event that is passed by ngx-charts\r\n     */\r\n    onSelect(event: any): void {\r\n        const interval = event.name as string;\r\n        const separatorIndex = interval.indexOf('-');\r\n        const lowerBound = parseInt(interval.slice(1, separatorIndex), 10);\r\n        const upperBound = parseInt(interval.slice(separatorIndex + 1, interval.length - 2), 10);\r\n\r\n        this.similaritySelected.emit(new Range(lowerBound, upperBound));\r\n    }\r\n}\r\n", "<div class=\"plagiarism-run-details\">\r\n    <div class=\"plagiarism-run-details-stats\">\r\n        <div class=\"plagiarism-run-details-stats-item\">\r\n            <div class=\"plagiarism-run-details-label\" jhiTranslate=\"artemisApp.plagiarism.numberOfDetectedSubmissions\"></div>\r\n            <div class=\"plagiarism-run-details-info\">\r\n                {{ plagiarismResultStats?.numberOfDetectedSubmissions }}\r\n            </div>\r\n        </div>\r\n        <div class=\"plagiarism-run-details-stats-item\">\r\n            <div class=\"plagiarism-run-details-label\" jhiTranslate=\"artemisApp.plagiarism.averageSimilarity\"></div>\r\n            <div class=\"plagiarism-run-details-info\">\r\n                {{ plagiarismResultStats?.averageSimilarity?.toFixed(2) + ' %' }}\r\n            </div>\r\n        </div>\r\n        <div class=\"plagiarism-run-details-stats-item\">\r\n            <div class=\"plagiarism-run-details-label\" jhiTranslate=\"artemisApp.plagiarism.maximalSimilarity\"></div>\r\n            <div class=\"plagiarism-run-details-info\">\r\n                {{ plagiarismResultStats?.maximalSimilarity?.toFixed(2) + ' %' }}\r\n            </div>\r\n        </div>\r\n        <div class=\"plagiarism-run-details-stats-item\">\r\n            <div class=\"plagiarism-run-details-label\" jhiTranslate=\"artemisApp.plagiarism.duration\"></div>\r\n            <div class=\"plagiarism-run-details-info duration\">\r\n                {{ plagiarismResult?.duration | date: 'HH:mm:ss' : 'GMT' }}\r\n            </div>\r\n        </div>\r\n        <div class=\"plagiarism-run-details-stats-item\">\r\n            <div class=\"plagiarism-run-details-label\" jhiTranslate=\"artemisApp.plagiarism.startedAt\"></div>\r\n            <div class=\"plagiarism-run-details-info\">\r\n                {{ plagiarismResult?.createdDate?.toLocaleString() | date: 'dd.MM.YY HH:mm' : 'GMT' }}\r\n            </div>\r\n        </div>\r\n        <div class=\"plagiarism-run-details-stats-item\">\r\n            <div class=\"plagiarism-run-details-label\" jhiTranslate=\"artemisApp.plagiarism.startedBy\"></div>\r\n            <div class=\"plagiarism-run-details-info\">\r\n                {{ plagiarismResultStats?.createdBy ?? 'unknown' }}\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"plagiarism-run-details-item\">\r\n        <div class=\"plagiarism-run-details-label text-center\">\r\n            {{ 'artemisApp.plagiarism.similarityDistribution' | artemisTranslate }}\r\n            <jhi-help-icon placement=\"right auto\" text=\"artemisApp.plagiarism.similarityDistributionExplanationTooltip\" />\r\n        </div>\r\n        <div #containerRef class=\"plagiarism-run-details-info\">\r\n            <ngx-charts-bar-vertical\r\n                [roundEdges]=\"false\"\r\n                [view]=\"[containerRef.offsetWidth, 400]\"\r\n                [scheme]=\"ngxColor\"\r\n                [results]=\"ngxData\"\r\n                [xAxis]=\"true\"\r\n                [yAxis]=\"true\"\r\n                [yAxisTickFormatting]=\"yAxisTickFormatting\"\r\n                [yScaleMax]=\"yScaleMax\"\r\n                [showDataLabel]=\"true\"\r\n                (select)=\"onSelect($event)\"\r\n            >\r\n                <ng-template #tooltipTemplate let-model=\"model\">\r\n                    <b jhiTranslate=\"artemisApp.plagiarism.numberIdentifiedPairs\" [translateValues]=\"{ amount: model.value }\"></b> <br />\r\n                    <span jhiTranslate=\"artemisApp.plagiarism.confirmed\" [translateValues]=\"{ amount: getBucketDTO(model.label).confirmed }\"></span> <br />\r\n                    <span jhiTranslate=\"artemisApp.plagiarism.denied\" [translateValues]=\"{ amount: getBucketDTO(model.label).denied }\"></span> <br />\r\n                    <span jhiTranslate=\"artemisApp.plagiarism.open\" [translateValues]=\"{ amount: getBucketDTO(model.label).open }\"></span> <br />\r\n                    <span jhiTranslate=\"artemisApp.plagiarism.withSimilarity\" [translateValues]=\"{ range: model.name }\"></span> <br />\r\n                    <b\r\n                        jhiTranslate=\"artemisApp.plagiarism.portionOfAllCases\"\r\n                        [translateValues]=\"{ percentage: totalDetectedPlagiarisms > 0 ? round((model.value * 100) / totalDetectedPlagiarisms, 2) : 0 }\"\r\n                    ></b>\r\n                </ng-template>\r\n            </ngx-charts-bar-vertical>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ModelingExerciseService } from 'app/exercises/modeling/manage/modeling-exercise.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { TextExerciseService } from 'app/exercises/text/manage/text-exercise/text-exercise.service';\r\nimport { ModelingPlagiarismResult } from 'app/exercises/shared/plagiarism/types/modeling/ModelingPlagiarismResult';\r\nimport { downloadFile, downloadZipFileFromResponse } from 'app/shared/util/download.util';\r\nimport { TextPlagiarismResult } from 'app/exercises/shared/plagiarism/types/text/TextPlagiarismResult';\r\nimport { PlagiarismResult } from 'app/exercises/shared/plagiarism/types/PlagiarismResult';\r\nimport { download, generateCsv, mkConfig } from 'export-to-csv';\r\nimport { PlagiarismComparison } from 'app/exercises/shared/plagiarism/types/PlagiarismComparison';\r\nimport { ModelingSubmissionElement } from 'app/exercises/shared/plagiarism/types/modeling/ModelingSubmissionElement';\r\nimport { TextSubmissionElement } from 'app/exercises/shared/plagiarism/types/text/TextSubmissionElement';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { PlagiarismOptions } from 'app/exercises/shared/plagiarism/types/PlagiarismOptions';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { faChevronRight, faExclamationTriangle, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { Range } from 'app/shared/util/utils';\r\nimport { PlagiarismInspectorService } from 'app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.service';\r\nimport { PlagiarismCasesService } from 'app/course/plagiarism-cases/shared/plagiarism-cases.service';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService, AlertType } from 'app/core/util/alert.service';\r\nimport { PlagiarismResultDTO, PlagiarismResultStats } from 'app/exercises/shared/plagiarism/types/PlagiarismResultDTO';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FeatureToggleDirective } from 'app/shared/feature-toggle/feature-toggle.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { PlagiarismSidebarComponent } from '../plagiarism-sidebar/plagiarism-sidebar.component';\r\nimport { PlagiarismDetailsComponent } from '../plagiarism-details/plagiarism-details.component';\r\nimport { PlagiarismRunDetailsComponent } from '../plagiarism-run-details/plagiarism-run-details.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport type PlagiarismCheckState = {\r\n    state: 'COMPLETED' | 'RUNNING';\r\n    messages: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-plagiarism-inspector',\r\n    styleUrls: ['./plagiarism-inspector.component.scss'],\r\n    templateUrl: './plagiarism-inspector.component.html',\r\n    imports: [\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        FeatureToggleDirective,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        NgbDropdownButtonItem,\r\n        NgbDropdownItem,\r\n        NgbTooltip,\r\n        FormsModule,\r\n        PlagiarismSidebarComponent,\r\n        PlagiarismDetailsComponent,\r\n        PlagiarismRunDetailsComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class PlagiarismInspectorComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private modelingExerciseService = inject(ModelingExerciseService);\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private textExerciseService = inject(TextExerciseService);\r\n    private websocketService = inject(WebsocketService);\r\n    private translateService = inject(TranslateService);\r\n    private inspectorService = inject(PlagiarismInspectorService);\r\n    private plagiarismCasesService = inject(PlagiarismCasesService);\r\n    private modalService = inject(NgbModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    /**\r\n     * The modeling exercise for which plagiarism is to be detected.\r\n     */\r\n    exercise: Exercise;\r\n\r\n    /**\r\n     * Result of the automated plagiarism detection\r\n     */\r\n    plagiarismResult?: TextPlagiarismResult | ModelingPlagiarismResult;\r\n\r\n    /**\r\n     * Statistics for the automated plagiarism detection result\r\n     */\r\n    plagiarismResultStats?: PlagiarismResultStats;\r\n\r\n    /**\r\n     * True, if an automated plagiarism detection is running; false otherwise.\r\n     */\r\n    detectionInProgress = false;\r\n\r\n    detectionInProgressMessage = '';\r\n\r\n    /**\r\n     * Index of the currently selected comparison.\r\n     */\r\n    selectedComparisonId: number;\r\n\r\n    /**\r\n     * True, if the plagiarism details tab is active.\r\n     */\r\n    showRunDetails = false;\r\n\r\n    /**\r\n     * True, if the plagiarism options should be displayed.\r\n     */\r\n    showOptions = false;\r\n\r\n    /**\r\n     * If true, the plagiarism detection will return the generated jplag report.\r\n     */\r\n    generateJPlagReport = false;\r\n\r\n    /**\r\n     * Minimum similarity (%) of the comparisons to return.\r\n     */\r\n    similarityThreshold = 90;\r\n\r\n    /**\r\n     * Ignore submissions with a score less than `minimumScore` in plagiarism detection.\r\n     */\r\n    minimumScore = 0;\r\n\r\n    /**\r\n     * Ignore submissions with a size less than `minimumSize` in plagiarism detection.\r\n     */\r\n    minimumSize = 50;\r\n\r\n    /**\r\n     * The minimumScore option is only configurable, if this value is true.\r\n     */\r\n    enableMinimumScore = false;\r\n\r\n    /**\r\n     * The minimumSize option is only configurable, if this value is true.\r\n     */\r\n    enableMinimumSize = false;\r\n    /**\r\n     * Comparisons that are currently visible (might differ from the original set as filtering can be applied)\r\n     */\r\n    visibleComparisons?: PlagiarismComparison<any>[];\r\n    chartFilterApplied = false;\r\n    /**\r\n     * Offset of the currently visible comparisons to the original set in order to keep the numbering even if comparisons are filtered\r\n     */\r\n    sidebarOffset = 0;\r\n\r\n    /**\r\n     * Whether all plagiarism comparisons should be deleted. If this is true, comparisons with the status \"approved\" or \"denied\" will also be deleted\r\n     */\r\n    deleteAllPlagiarismComparisons = false;\r\n\r\n    readonly FeatureToggle = FeatureToggle;\r\n    readonly PROGRAMMING = ExerciseType.PROGRAMMING;\r\n\r\n    // Icons\r\n    faQuestionCircle = faQuestionCircle;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faChevronRight = faChevronRight;\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({ exercise }) => {\r\n            this.exercise = exercise;\r\n\r\n            this.registerToPlagarismDetectionTopic();\r\n            this.getLatestPlagiarismResult();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers to the websocket topic of the plagiarism check\r\n     * to get feedback about the progress\r\n     */\r\n    registerToPlagarismDetectionTopic() {\r\n        const topic = this.getPlagarismDetectionTopic();\r\n        this.websocketService.subscribe(topic);\r\n        this.websocketService\r\n            .receive(topic)\r\n            .pipe(tap((plagiarismCheckState: PlagiarismCheckState) => this.handlePlagiarismCheckStateChange(plagiarismCheckState)))\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Gets the url to the plagiarism detection websocket topic.\r\n     */\r\n    getPlagarismDetectionTopic() {\r\n        let topic = '/topic/';\r\n        switch (this.exercise.type) {\r\n            case ExerciseType.PROGRAMMING:\r\n                topic += 'programming-exercises';\r\n                break;\r\n            case ExerciseType.TEXT:\r\n                topic += 'text-exercises';\r\n                break;\r\n            case ExerciseType.MODELING:\r\n                topic += 'modeling-exercises';\r\n                break;\r\n        }\r\n        return topic + '/' + this.exercise.id + '/plagiarism-check';\r\n    }\r\n\r\n    /**\r\n     * Handles the state change by updating the progress state. Fetches latest\r\n     * results once plagiarism detection is done.\r\n     *\r\n     * @param plagiarismCheckState the state plagiarism check\r\n     */\r\n    handlePlagiarismCheckStateChange(plagiarismCheckState: PlagiarismCheckState) {\r\n        const { state, messages } = plagiarismCheckState;\r\n        this.detectionInProgress = state === 'RUNNING';\r\n        this.detectionInProgressMessage = state === 'RUNNING' ? messages : this.translateService.instant('artemisApp.plagiarism.loading');\r\n\r\n        if (state === 'COMPLETED') {\r\n            this.detectionInProgressMessage = this.translateService.instant('artemisApp.plagiarism.fetchingResults');\r\n            this.getLatestPlagiarismResult();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch the latest plagiarism result. There might be no plagiarism result for the given exercise yet.\r\n     */\r\n    getLatestPlagiarismResult() {\r\n        this.detectionInProgress = true;\r\n\r\n        switch (this.exercise.type) {\r\n            case ExerciseType.MODELING: {\r\n                this.modelingExerciseService.getLatestPlagiarismResult(this.exercise.id!).subscribe({\r\n                    next: (result) => this.handlePlagiarismResult(result),\r\n                    error: () => this.handleError(),\r\n                });\r\n                return;\r\n            }\r\n            case ExerciseType.PROGRAMMING: {\r\n                this.programmingExerciseService.getLatestPlagiarismResult(this.exercise.id!).subscribe({\r\n                    next: (result) => this.handlePlagiarismResult(result),\r\n                    error: () => this.handleError(),\r\n                });\r\n                return;\r\n            }\r\n            case ExerciseType.TEXT: {\r\n                this.textExerciseService.getLatestPlagiarismResult(this.exercise.id!).subscribe({\r\n                    next: (result) => this.handlePlagiarismResult(result),\r\n                    error: () => this.handleError(),\r\n                });\r\n                return;\r\n            }\r\n            default: {\r\n                this.detectionInProgress = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkPlagiarism() {\r\n        const minimumScore = this.enableMinimumScore ? this.minimumScore : 0;\r\n        const minimumSize = this.enableMinimumSize ? this.minimumSize : 0;\r\n\r\n        const options = new PlagiarismOptions(this.similarityThreshold, minimumScore, minimumSize);\r\n\r\n        if (this.exercise.type === ExerciseType.MODELING) {\r\n            this.checkPlagiarismModeling(options);\r\n        } else if (this.generateJPlagReport) {\r\n            this.checkPlagiarismJPlagReport(options);\r\n        } else {\r\n            this.checkPlagiarismJPlag(options);\r\n        }\r\n    }\r\n\r\n    selectComparisonWithID(id: number) {\r\n        this.selectedComparisonId = id;\r\n        this.showRunDetails = false;\r\n    }\r\n\r\n    /**\r\n     * This method triggers the plagiarism detection for programming exercises and downloads the zipped report generated by JPlag.\r\n     */\r\n    checkPlagiarismJPlagReport(options?: PlagiarismOptions) {\r\n        this.detectionInProgress = true;\r\n\r\n        this.programmingExerciseService.checkPlagiarismJPlagReport(this.exercise.id!, options).subscribe({\r\n            next: (response: HttpResponse<Blob>) => {\r\n                this.detectionInProgress = false;\r\n                downloadZipFileFromResponse(response);\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                // Note: for some reason the alert is not shown, we do it manually with a workaround, because the message (part of the body) is not accessible in the error\r\n                const errorMessage = error.headers.get('x-artemisapp-error');\r\n                if (errorMessage === 'error.notEnoughSubmissions') {\r\n                    this.alertService.addAlert({\r\n                        type: AlertType.DANGER,\r\n                        message: 'Insufficient amount of valid and long enough submissions available for comparison',\r\n                        disableTranslation: true,\r\n                    });\r\n                }\r\n                this.handleError();\r\n            },\r\n        });\r\n    }\r\n\r\n    isProgrammingExercise() {\r\n        return this.exercise?.type === ExerciseType.PROGRAMMING;\r\n    }\r\n\r\n    /**\r\n     * Trigger the server-side plagiarism detection and fetch its result.\r\n     */\r\n    checkPlagiarismJPlag(options?: PlagiarismOptions) {\r\n        this.detectionInProgress = true;\r\n\r\n        if (this.exercise.type === ExerciseType.TEXT) {\r\n            this.textExerciseService.checkPlagiarism(this.exercise.id!, options).subscribe({\r\n                next: (result) => this.handlePlagiarismResult(result),\r\n                error: () => this.handleError(),\r\n            });\r\n        } else {\r\n            this.programmingExerciseService.checkPlagiarism(this.exercise.id!, options).subscribe({\r\n                next: (result) => this.handlePlagiarismResult(result),\r\n                error: () => this.handleError(),\r\n            });\r\n        }\r\n    }\r\n\r\n    handleError() {\r\n        this.detectionInProgress = false;\r\n    }\r\n\r\n    /**\r\n     * Trigger the server-side plagiarism detection and fetch its result.\r\n     */\r\n    checkPlagiarismModeling(options?: PlagiarismOptions) {\r\n        this.detectionInProgress = true;\r\n\r\n        this.modelingExerciseService.checkPlagiarism(this.exercise.id!, options).subscribe({\r\n            next: (result: PlagiarismResultDTO<ModelingPlagiarismResult>) => this.handlePlagiarismResult(result),\r\n            error: () => this.handleError(),\r\n        });\r\n    }\r\n\r\n    handlePlagiarismResult(result: PlagiarismResultDTO<ModelingPlagiarismResult | TextPlagiarismResult>) {\r\n        this.detectionInProgress = false;\r\n\r\n        if (result?.plagiarismResult?.comparisons) {\r\n            this.sortComparisonsForResult(result.plagiarismResult);\r\n            this.showRunDetails = true;\r\n        }\r\n\r\n        this.plagiarismResult = result?.plagiarismResult;\r\n        this.plagiarismResultStats = result?.plagiarismResultStats;\r\n        this.visibleComparisons = result?.plagiarismResult?.comparisons;\r\n    }\r\n\r\n    sortComparisonsForResult(result: PlagiarismResult<any>) {\r\n        result.comparisons = result.comparisons.sort((a, b) => {\r\n            // if the cases share the same similarity, we sort by the id\r\n            if (b.similarity - a.similarity === 0) {\r\n                return b.id - a.id;\r\n            } else {\r\n                return b.similarity - a.similarity;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Download plagiarism detection results as JSON document.\r\n     */\r\n    downloadPlagiarismResultsJson() {\r\n        const json = JSON.stringify(this.plagiarismResult);\r\n        const blob = new Blob([json], { type: 'application/json' });\r\n\r\n        downloadFile(blob, `plagiarism-result_${this.exercise.type}-exercise-${this.exercise.id}.json`);\r\n    }\r\n\r\n    /**\r\n     * Download plagiarism detection results as CSV document.\r\n     */\r\n    downloadPlagiarismResultsCsv() {\r\n        if (this.plagiarismResult && this.plagiarismResult.comparisons.length > 0) {\r\n            const exportOptions = {\r\n                fieldSeparator: ';',\r\n                quoteStrings: true,\r\n                quoteCharacter: '\"',\r\n                decimalSeparator: 'locale',\r\n                showLabels: true,\r\n                title: `Plagiarism Check for Exercise ${this.exercise.id}: ${this.exercise.title}`,\r\n                filename: `plagiarism-result_${this.exercise.type}-exercise-${this.exercise.id}`,\r\n                useTextFile: false,\r\n                useBom: true,\r\n                columnHeaders: ['Similarity', 'Status', 'Participant 1', 'Submission 1', 'Score 1', 'Size 1', 'Participant 2', 'Submission 2', 'Score 2', 'Size 2'],\r\n            };\r\n\r\n            const rowData = (this.plagiarismResult.comparisons as PlagiarismComparison<ModelingSubmissionElement | TextSubmissionElement>[]).map((comparison) => {\r\n                return Object.assign({\r\n                    Similarity: comparison.similarity,\r\n                    Status: comparison.status,\r\n                    'Participant 1': comparison.submissionA.studentLogin,\r\n                    'Submission 1': comparison.submissionA.submissionId,\r\n                    'Score 1': comparison.submissionA.score,\r\n                    'Size 1': comparison.submissionA.size,\r\n                    'Participant 2': comparison.submissionB.studentLogin,\r\n                    'Submission 2': comparison.submissionB.submissionId,\r\n                    'Score 2': comparison.submissionB.score,\r\n                    'Size 2': comparison.submissionB.size,\r\n                });\r\n            });\r\n\r\n            const combinedOptions = mkConfig(exportOptions);\r\n            const csvData = generateCsv(combinedOptions)(rowData);\r\n            download(combinedOptions)(csvData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the translation identifier of the minimum size tooltip for the current exercise type.\r\n     */\r\n    getMinimumSizeTooltip() {\r\n        switch (this.exercise.type) {\r\n            case ExerciseType.PROGRAMMING: {\r\n                return 'artemisApp.plagiarism.minimumSizeTooltipProgrammingExercise';\r\n            }\r\n            case ExerciseType.TEXT: {\r\n                return 'artemisApp.plagiarism.minimumSizeTooltipTextExercise';\r\n            }\r\n            case ExerciseType.MODELING: {\r\n                return 'artemisApp.plagiarism.minimumSizeTooltipModelingExercise';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Filters the comparisons visible in {@link PlagiarismSidebarComponent} according to the selected similarity range\r\n     * selected by the user in the chart\r\n     * @param range the range selected by the user in the chart by clicking on a chart bar\r\n     */\r\n    filterByChart(range: Range): void {\r\n        this.visibleComparisons = this.inspectorService.filterComparisons(range, this.plagiarismResult?.comparisons);\r\n        const index = this.plagiarismResult?.comparisons.indexOf(this.visibleComparisons[0]) ?? 0;\r\n        this.sidebarOffset = index !== -1 ? index : 0;\r\n        this.chartFilterApplied = true;\r\n    }\r\n\r\n    /**\r\n     * Resets the filter applied by chart interaction\r\n     */\r\n    resetFilter(): void {\r\n        this.visibleComparisons = this.plagiarismResult?.comparisons;\r\n        this.chartFilterApplied = false;\r\n        this.sidebarOffset = 0;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method called if the \"Run details\" Button is clicked\r\n     * This additional logic is necessary in order to update the {@link PlagiarismRunDetailsComponent#bucketDTOs}\r\n     * @param flag emitted by {@link PlagiarismSidebarComponent#showRunDetailsChange}\r\n     */\r\n    showSimilarityDistribution(flag: boolean): void {\r\n        this.resetFilter();\r\n        this.getLatestPlagiarismResult();\r\n        this.showRunDetails = flag;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that returns the comparison currently selected by the user\r\n     */\r\n    getSelectedComparison(): PlagiarismComparison<any> {\r\n        // as the id is unique, the filtered array should always have length 1\r\n        return this.visibleComparisons!.filter((comparison) => comparison.id === this.selectedComparisonId)[0];\r\n    }\r\n\r\n    /**\r\n     * Switches the state if all plagiarism comparisons should be deleted\r\n     */\r\n    toggleDeleteAllPlagiarismComparisons(): void {\r\n        this.deleteAllPlagiarismComparisons = !this.deleteAllPlagiarismComparisons;\r\n    }\r\n\r\n    /**\r\n     * Clean up plagiarism results and related objects belonging to this exercise\r\n     */\r\n    cleanUpPlagiarism(): void {\r\n        this.plagiarismCasesService.cleanUpPlagiarism(this.exercise.id!, this.plagiarismResult!.id!, this.deleteAllPlagiarismComparisons).subscribe({\r\n            next: () => {\r\n                if (this.deleteAllPlagiarismComparisons) {\r\n                    this.deleteAllPlagiarismComparisons = false;\r\n                    this.plagiarismResult = undefined;\r\n                } else {\r\n                    this.deleteAllPlagiarismComparisons = false;\r\n                    this.getLatestPlagiarismResult();\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open a modal that requires the user's confirmation.\r\n     * @param content the modal content\r\n     */\r\n    openCleanUpModal(content: any) {\r\n        this.modalService.open(content).result.then((result: string) => {\r\n            if (result === 'confirm') {\r\n                this.cleanUpPlagiarism();\r\n            }\r\n        });\r\n    }\r\n}\r\n", "<div class=\"plagiarism-inspector\">\r\n    <div class=\"plagiarism-header\">\r\n        <div class=\"plagiarism-header-top\">\r\n            <div class=\"plagiarism-header-top-left\">\r\n                <h4 class=\"plagiarism-page-title fw-medium\" (click)=\"showOptions = !showOptions\" [class.active]=\"showOptions\">\r\n                    <fa-icon class=\"plagiarism-options-toggle\" [icon]=\"faChevronRight\" />\r\n                    <span jhiTranslate=\"artemisApp.plagiarism.plagiarismDetection\"></span>\r\n                </h4>\r\n                <div class=\"plagiarism-warning\">\r\n                    <fa-icon [icon]=\"faExclamationTriangle\" id=\"plagiarismCaution\" />\r\n                    <span jhiTranslate=\"artemisApp.plagiarism.caution\"></span>\r\n                </div>\r\n            </div>\r\n            <div class=\"plagiarism-header-top-right\">\r\n                @if (chartFilterApplied) {\r\n                    <button class=\"check-plagiarism btn btn-info\" (click)=\"resetFilter()\">\r\n                        <span jhiTranslate=\"artemisApp.plagiarism.resetFilter\"></span>\r\n                    </button>\r\n                }\r\n                <button\r\n                    [jhiFeatureToggle]=\"FeatureToggle.PlagiarismChecks\"\r\n                    class=\"check-plagiarism btn btn-primary\"\r\n                    (click)=\"checkPlagiarism()\"\r\n                    [overwriteDisabled]=\"detectionInProgress\"\r\n                >\r\n                    <span jhiTranslate=\"{{ plagiarismResult ? 'artemisApp.plagiarism.rerun' : 'artemisApp.plagiarism.detect' }}\"></span>\r\n                </button>\r\n                <ng-template #toggleDeleteModal let-modal>\r\n                    <div class=\"modal-header\">\r\n                        <h4 class=\"modal-title\">\r\n                            <span jhiTranslate=\"artemisApp.plagiarism.cleanUp.confirmDialog.title\"></span>\r\n                        </h4>\r\n                        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss()\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <p jhiTranslate=\"artemisApp.plagiarism.cleanUp.confirmDialog.question\"></p>\r\n                        <div class=\"form-check flex-grow-0\">\r\n                            <input\r\n                                id=\"deleteAllPlagiarismComparisons\"\r\n                                class=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                [checked]=\"deleteAllPlagiarismComparisons\"\r\n                                (change)=\"toggleDeleteAllPlagiarismComparisons()\"\r\n                            />\r\n                            <label for=\"deleteAllPlagiarismComparisons\" class=\"form-check-label\" jhiTranslate=\"artemisApp.plagiarism.cleanUp.confirmDialog.deleteAll\"></label>\r\n                        </div>\r\n                        @if (deleteAllPlagiarismComparisons) {\r\n                            <p jhiTranslate=\"artemisApp.plagiarism.cleanUp.confirmDialog.warning\" class=\"text-warning\"></p>\r\n                        }\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-danger\" (click)=\"modal.close('confirm')\">\r\n                            <span jhiTranslate=\"artemisApp.plagiarism.cleanUp.confirmDialog.submit\"></span>\r\n                        </button>\r\n                    </div>\r\n                </ng-template>\r\n                @if (exercise.isAtLeastInstructor && plagiarismResult) {\r\n                    <button\r\n                        [jhiFeatureToggle]=\"FeatureToggle.PlagiarismChecks\"\r\n                        class=\"check-plagiarism btn btn-danger\"\r\n                        (click)=\"openCleanUpModal(toggleDeleteModal)\"\r\n                        [overwriteDisabled]=\"detectionInProgress\"\r\n                    >\r\n                        <span jhiTranslate=\"artemisApp.plagiarism.cleanUp.confirmDialog.submit\"></span>\r\n                    </button>\r\n                }\r\n                @if (plagiarismResult) {\r\n                    <div ngbDropdown>\r\n                        <button class=\"btn btn-secondary btn-block\" id=\"download-plagiarism\" ngbDropdownToggle>\r\n                            <span>Download</span>\r\n                        </button>\r\n                        <div ngbDropdownMenu aria-labelledby=\"download-plagiarism\">\r\n                            <button type=\"button\" (click)=\"downloadPlagiarismResultsJson()\" ngbDropdownItem>JSON</button>\r\n                            <button type=\"button\" (click)=\"downloadPlagiarismResultsCsv()\" ngbDropdownItem>CSV</button>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"plagiarism-header-options\" [hidden]=\"!showOptions\">\r\n            <div class=\"plagiarism-option\">\r\n                <div class=\"plagiarism-option-label\" jhiTranslate=\"artemisApp.plagiarism.similarityThreshold\"></div>\r\n                <fa-icon [icon]=\"faQuestionCircle\" placement=\"bottom auto\" [ngbTooltip]=\"'artemisApp.plagiarism.similarityThresholdTooltip' | artemisTranslate\" />\r\n                <input type=\"number\" required class=\"form-control\" min=\"0\" max=\"100\" step=\"5\" id=\"plagiarism-similarity-threshold\" [(ngModel)]=\"similarityThreshold\" />\r\n            </div>\r\n            <div class=\"plagiarism-option\" [class.disabled]=\"!enableMinimumScore\">\r\n                <div class=\"plagiarism-checkbox form-check\" for=\"enableMinimumScore\">\r\n                    <input type=\"checkbox\" id=\"enableMinimumScore\" class=\"plagiarism-option-checkbox form-check-input\" [(ngModel)]=\"enableMinimumScore\" checked />\r\n                    <div class=\"plagiarism-option-label form-check-label\" jhiTranslate=\"artemisApp.plagiarism.minimumScore\"></div>\r\n                </div>\r\n                <fa-icon [icon]=\"faQuestionCircle\" placement=\"bottom auto\" [ngbTooltip]=\"'artemisApp.plagiarism.minimumScoreTooltip' | artemisTranslate\" />\r\n                <input required type=\"number\" [disabled]=\"!enableMinimumScore\" class=\"form-control\" min=\"0\" max=\"100\" id=\"plagiarism-minimum-score\" [(ngModel)]=\"minimumScore\" />\r\n            </div>\r\n            <div class=\"plagiarism-option\" [class.disabled]=\"!enableMinimumSize\">\r\n                <div class=\"plagiarism-checkbox form-check\" for=\"enableMinimumSize\">\r\n                    <input type=\"checkbox\" id=\"enableMinimumSize\" class=\"plagiarism-option-checkbox form-check-input\" [(ngModel)]=\"enableMinimumSize\" checked />\r\n                    <label for=\"enableMinimumSize\" class=\"plagiarism-option-label form-check-label\" jhiTranslate=\"artemisApp.plagiarism.minimumSize\"></label>\r\n                </div>\r\n                <fa-icon [icon]=\"faQuestionCircle\" placement=\"bottom auto\" [ngbTooltip]=\"getMinimumSizeTooltip() | artemisTranslate\" />\r\n                <input required type=\"number\" [disabled]=\"!enableMinimumSize\" class=\"form-control\" min=\"0\" max=\"100\" id=\"plagiarism-minimum-size\" [(ngModel)]=\"minimumSize\" />\r\n            </div>\r\n            @if (isProgrammingExercise()) {\r\n                <div class=\"plagiarism-checkbox form-check\" for=\"generateJPlagReport\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"generateJPlagReport\" [(ngModel)]=\"generateJPlagReport\" checked />\r\n                    <label for=\"generateJPlagReport\" class=\"plagiarism-option-label\" jhiTranslate=\"artemisApp.plagiarism.generateJplagReport\"></label>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    @if (plagiarismResult && !detectionInProgress) {\r\n        <div class=\"plagiarism-body\">\r\n            <jhi-plagiarism-sidebar\r\n                [showRunDetails]=\"showRunDetails\"\r\n                (showRunDetailsChange)=\"showSimilarityDistribution($event)\"\r\n                [comparisons]=\"visibleComparisons\"\r\n                [offset]=\"sidebarOffset\"\r\n                (selectIndex)=\"selectComparisonWithID($event)\"\r\n                [activeID]=\"selectedComparisonId\"\r\n                [casesFiltered]=\"chartFilterApplied\"\r\n            />\r\n            <jhi-plagiarism-details [hidden]=\"showRunDetails\" [comparison]=\"plagiarismResult.comparisons ? getSelectedComparison() : undefined\" [exercise]=\"exercise\" />\r\n            <jhi-plagiarism-run-details\r\n                [hidden]=\"!showRunDetails\"\r\n                [plagiarismResult]=\"plagiarismResult\"\r\n                [plagiarismResultStats]=\"plagiarismResultStats\"\r\n                (similaritySelected)=\"filterByChart($event)\"\r\n            />\r\n        </div>\r\n    }\r\n    @if (!plagiarismResult || detectionInProgress) {\r\n        <div class=\"plagiarism-empty\">\r\n            @if (detectionInProgress) {\r\n                <div class=\"d-flex flex-column\">\r\n                    <div class=\"spinner-border text-primary align-self-center mb-1\" role=\"status\">\r\n                        <span class=\"sr-only\"></span>\r\n                    </div>\r\n                    <p>{{ detectionInProgressMessage }}</p>\r\n                </div>\r\n            }\r\n            @if (!detectionInProgress) {\r\n                <span class=\"plagiarism-empty-label\" jhiTranslate=\"artemisApp.plagiarism.empty\"></span>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["PlagiarismOptions", "similarityThreshold", "minimumScore", "minimumSize", "constructor", "toParams", "toString", "PlagiarismInspectorService", "filterComparisons", "range", "comparisons", "filterFunction", "upperBound", "comparison", "similarity", "lowerBound", "filter", "factory", "\u0275fac", "providedIn", "PlagiarismStatus", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "\u0275\u0275listener", "comparison_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectIndex", "emit", "id", "\u0275\u0275classProp", "showRunDetails", "activeID", "\u0275\u0275pureFunction2", "_c0", "status", "CONFIRMED", "DENIED", "\u0275\u0275textInterpolate1", "getPagedIndex", "\u0275$index_44_r4", "offset", "submissionA", "studentLogin", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "submissionB", "\u0275\u0275pipeBind2", "similarity", "\u0275\u0275repeaterCreate", "PlagiarismSidebarComponent_Conditional_12_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "pagedComparisons", "PlagiarismSidebarComponent", "comparisons", "casesFiltered", "showRunDetailsChange", "EventEmitter", "PlagiarismStatus", "currentPage", "numberOfPages", "pageSize", "faChevronRight", "faArrowLeft", "faArrowRight", "ngOnChanges", "changes", "currentValue", "computeNumberOfPages", "length", "getPagedComparisons", "displayRunDetails", "totalComparisons", "Math", "ceil", "startIndex", "slice", "idx", "handlePageLeft", "handlePageRight", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "PlagiarismSidebarComponent_Conditional_10_Template", "PlagiarismSidebarComponent_Conditional_11_Template", "PlagiarismSidebarComponent_Conditional_12_Template", "PlagiarismSidebarComponent_Conditional_13_Template", "\u0275\u0275conditional", "\u0275\u0275textInterpolate2", "FaIconComponent", "TranslateDirective", "NgClass", "DecimalPipe", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "exercise", "course", "id", "_c1", "isLoading", "teamMode", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "confirmPlagiarism", "\u0275\u0275elementEnd", "PlagiarismHeaderComponent", "plagiarismCasesService", "inject", "PlagiarismCasesService", "modalService", "NgbModal", "comparison", "splitControlSubject", "plagiarismStatus", "PlagiarismStatus", "updatePlagiarismStatus", "CONFIRMED", "denyPlagiarism", "status", "askForConfirmationOfDenying", "DENIED", "onConfirm", "modalRef", "open", "ConfirmAutofocusModalComponent", "keyboard", "size", "componentInstance", "title", "text", "translateText", "result", "then", "updatePlagiarismComparisonStatus", "getCourseId", "subscribe", "expandSplitPane", "pane", "next", "resetSplitPanes", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "PlagiarismHeaderComponent_Conditional_12_Template", "PlagiarismHeaderComponent_Conditional_13_Template", "\u0275\u0275textInterpolate2", "submissionA", "studentLogin", "\u0275\u0275pipeBind1", "submissionB", "\u0275\u0275conditional", "TranslateDirective", "ArtemisTranslatePipe", "RouterModule", "RouterLink", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "splitControlSubject", "exercise", "comparison", "PlagiarismDetailsComponent", "Subject", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "PlagiarismDetailsComponent_Conditional_0_Template", "\u0275\u0275conditional", "PlagiarismHeaderComponent", "PlagiarismSplitViewComponent", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "model_r2", "value", "ctx_r2", "getBucketDTO", "label", "confirmed", "denied", "open", "_c2", "name", "_c3", "totalDetectedPlagiarisms", "round", "PlagiarismRunDetailsComponent", "PlagiarismAndTutorEffortDirective", "inspectorService", "inject", "PlagiarismInspectorService", "plagiarismResult", "plagiarismResultStats", "similaritySelected", "EventEmitter", "yScaleMax", "bucketDTOs", "constructor", "ngxChartLabels", "ngxColor", "domain", "Array", "fill", "GraphColors", "LIGHT_BLUE", "RED", "ngOnChanges", "changes", "setBucketDTOs", "currentValue", "comparisons", "updateChartDataSet", "similarityDistribution", "data", "ngxDataEntity", "ngxData", "forEach", "position", "push", "reduce", "number1", "number2", "steps", "comparisonsWithinRange", "additionInformationEntry", "minimumSimilarity", "filterComparisons", "Range", "filter", "comparison", "status", "PlagiarismStatus", "CONFIRMED", "length", "DENIED", "NONE", "index", "indexOf", "onSelect", "event", "interval", "separatorIndex", "lowerBound", "parseInt", "slice", "upperBound", "emit", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275template", "PlagiarismRunDetailsComponent_ng_template_68_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275textInterpolate1", "numberOfDetectedSubmissions", "averageSimilarity", "toFixed", "maximalSimilarity", "\u0275\u0275pipeBind3", "duration", "createdDate", "toLocaleString", "tmp_7_0", "createdBy", "undefined", "\u0275\u0275pipeBind1", "_c0", "containerRef_r4", "offsetWidth", "yAxisTickFormatting", "TranslateDirective", "HelpIconComponent", "BarChartModule", "BarVerticalComponent", "DatePipe", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "resetFilter", "\u0275\u0275element", "\u0275\u0275elementEnd", "modal_r5", "_r4", "$implicit", "dismiss", "toggleDeleteAllPlagiarismComparisons", "\u0275\u0275template", "PlagiarismInspectorComponent_ng_template_31_Conditional_22_Template", "close", "\u0275\u0275advance", "\u0275\u0275property", "deleteAllPlagiarismComparisons", "\u0275\u0275conditional", "_r6", "toggleDeleteModal_r7", "\u0275\u0275reference", "openCleanUpModal", "FeatureToggle", "PlagiarismChecks", "detectionInProgress", "_r8", "downloadPlagiarismResultsJson", "downloadPlagiarismResultsCsv", "\u0275\u0275twoWayListener", "$event", "_r9", "i0", "\u0275\u0275twoWayBindingSet", "generateJPlagReport", "\u0275\u0275twoWayProperty", "_r10", "showSimilarityDistribution", "selectComparisonWithID", "filterByChart", "showRunDetails", "visibleComparisons", "sidebarOffset", "selectedComparisonId", "chartFilterApplied", "plagiarismResult", "comparisons", "getSelectedComparison", "undefined", "exercise", "plagiarismResultStats", "\u0275\u0275textInterpolate", "detectionInProgressMessage", "PlagiarismInspectorComponent_Conditional_84_Conditional_3_Template", "PlagiarismInspectorComponent_Conditional_84_Conditional_4_Template", "PlagiarismInspectorComponent", "route", "inject", "ActivatedRoute", "modelingExerciseService", "ModelingExerciseService", "programmingExerciseService", "ProgrammingExerciseService", "textExerciseService", "TextExerciseService", "websocketService", "WebsocketService", "translateService", "TranslateService", "inspectorService", "PlagiarismInspectorService", "plagiarismCasesService", "PlagiarismCasesService", "modalService", "NgbModal", "alertService", "AlertService", "showOptions", "similarityThreshold", "minimumScore", "minimumSize", "enableMinimumScore", "enableMinimumSize", "PROGRAMMING", "ExerciseType", "faQuestionCircle", "faExclamationTriangle", "faChevronRight", "ngOnInit", "data", "subscribe", "registerToPlagarismDetectionTopic", "getLatestPlagiarismResult", "topic", "getPlagarismDetectionTopic", "receive", "pipe", "tap", "plagiarismCheckState", "handlePlagiarismCheckStateChange", "type", "TEXT", "MODELING", "id", "state", "messages", "instant", "next", "result", "handlePlagiarismResult", "error", "handleError", "checkPlagiarism", "options", "PlagiarismOptions", "checkPlagiarismModeling", "checkPlagiarismJPlagReport", "checkPlagiarismJPlag", "response", "downloadZipFileFromResponse", "headers", "get", "addAlert", "AlertType", "DANGER", "message", "disableTranslation", "isProgrammingExercise", "sortComparisonsForResult", "sort", "a", "b", "similarity", "json", "JSON", "stringify", "blob", "Blob", "downloadFile", "length", "exportOptions", "fieldSeparator", "quoteStrings", "quoteCharacter", "decimalSeparator", "showLabels", "title", "filename", "useTextFile", "useBom", "columnHeaders", "rowData", "map", "comparison", "Object", "assign", "Similarity", "Status", "status", "submissionA", "studentLogin", "submissionId", "score", "size", "submissionB", "combinedOptions", "mkConfig", "csvData", "generateCsv", "download", "getMinimumSizeTooltip", "range", "filterComparisons", "index", "indexOf", "flag", "filter", "cleanUpPlagiarism", "content", "open", "then", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "PlagiarismInspectorComponent_Conditional_25_Template", "PlagiarismInspectorComponent_ng_template_31_Template", "\u0275\u0275templateRefExtractor", "PlagiarismInspectorComponent_Conditional_34_Template", "PlagiarismInspectorComponent_Conditional_35_Template", "PlagiarismInspectorComponent_Conditional_80_Template", "PlagiarismInspectorComponent_Conditional_83_Template", "PlagiarismInspectorComponent_Conditional_84_Template", "\u0275\u0275classProp", "\u0275\u0275propertyInterpolate", "isAtLeastInstructor", "\u0275\u0275pipeBind1", "FaIconComponent", "TranslateDirective", "FeatureToggleDirective", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbDropdownButtonItem", "NgbDropdownItem", "NgbTooltip", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "RequiredValidator", "MinValidator", "MaxValidator", "NgModel", "PlagiarismSidebarComponent", "PlagiarismDetailsComponent", "PlagiarismRunDetailsComponent", "ArtemisTranslatePipe", "styles"]
}
