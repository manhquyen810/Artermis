{
  "version": 3,
  "sources": ["src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-management-resolve.service.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-management.route.ts", "src/main/webapp/app/lecture/close-edit-lecture-modal/close-edit-lecture-modal.component.ts", "src/main/webapp/app/lecture/close-edit-lecture-modal/close-edit-lecture-modal.component.html", "src/main/webapp/app/lecture/hasLectureUnsavedChanges.guard.ts", "src/main/webapp/app/lecture/lecture-resolve.service.ts", "src/main/webapp/app/lecture/lecture.route.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { AttachmentUnit } from 'app/entities/lecture-unit/attachmentUnit.model';\r\nimport { AttachmentUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/attachmentUnit.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AttachmentUnitResolve implements Resolve<AttachmentUnit> {\r\n    private attachmentUnitService = inject(AttachmentUnitService);\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<AttachmentUnit> {\r\n        const lectureId = route.params['lectureId'];\r\n        const attachmentUnitId = route.params['attachmentUnitId'];\r\n        if (attachmentUnitId) {\r\n            return this.attachmentUnitService.findById(attachmentUnitId, lectureId).pipe(\r\n                filter((response: HttpResponse<AttachmentUnit>) => response.ok),\r\n                map((attachmentUnit: HttpResponse<AttachmentUnit>) => attachmentUnit.body!),\r\n            );\r\n        }\r\n        return of(new AttachmentUnit());\r\n    }\r\n}\r\n", "import { Routes } from '@angular/router';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\r\nimport { CourseManagementResolve } from 'app/course/manage/course-management-resolve.service';\r\nimport { AttachmentUnitResolve } from 'app/lecture/lecture-unit/lecture-unit-management/lecture-unit-management-resolve.service';\r\n\r\nexport const lectureUnitRoute: Routes = [\r\n    {\r\n        path: 'unit-management',\r\n        loadComponent: () => import('app/lecture/lecture-unit/lecture-unit-management/lecture-unit-management.component').then((m) => m.LectureUnitManagementComponent),\r\n        data: {\r\n            authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n            pageTitle: 'artemisApp.lectureUnit.home.title',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        // Create a new path without a component defined to prevent the LectureUnitManagementComponent from being always rendered\r\n        path: 'unit-management',\r\n        data: {\r\n            pageTitle: 'artemisApp.lectureUnit.home.title',\r\n        },\r\n        children: [\r\n            {\r\n                path: 'exercise-units/create',\r\n                loadComponent: () =>\r\n                    import('app/lecture/lecture-unit/lecture-unit-management/create-exercise-unit/create-exercise-unit.component').then((m) => m.CreateExerciseUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.exerciseUnit.createExerciseUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'attachment-units/process',\r\n                loadComponent: () => import('app/lecture/lecture-unit/lecture-unit-management/attachment-units/attachment-units.component').then((m) => m.AttachmentUnitsComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.attachmentUnit.createAttachmentUnits.pageTitle',\r\n                },\r\n            },\r\n            {\r\n                path: 'attachment-units/create',\r\n                loadComponent: () =>\r\n                    import('app/lecture/lecture-unit/lecture-unit-management/create-attachment-unit/create-attachment-unit.component').then((m) => m.CreateAttachmentUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.attachmentUnit.createAttachmentUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'video-units/create',\r\n                loadComponent: () =>\r\n                    import('app/lecture/lecture-unit/lecture-unit-management/create-video-unit/create-video-unit.component').then((m) => m.CreateVideoUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.videoUnit.createVideoUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'online-units/create',\r\n                loadComponent: () =>\r\n                    import('app/lecture/lecture-unit/lecture-unit-management/create-online-unit/create-online-unit.component').then((m) => m.CreateOnlineUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.onlineUnit.createOnlineUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'text-units/create',\r\n                loadComponent: () => import('app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component').then((m) => m.CreateTextUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.textUnit.createTextUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'attachment-units/:attachmentUnitId/edit',\r\n                loadComponent: () =>\r\n                    import('app/lecture/lecture-unit/lecture-unit-management/edit-attachment-unit/edit-attachment-unit.component').then((m) => m.EditAttachmentUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.attachmentUnit.editAttachmentUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'attachment-units/:attachmentUnitId/view',\r\n                loadComponent: () => import('app/lecture/pdf-preview/pdf-preview.component').then((m) => m.PdfPreviewComponent),\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                    attachmentUnit: AttachmentUnitResolve,\r\n                },\r\n            },\r\n            {\r\n                path: 'video-units/:videoUnitId/edit',\r\n                loadComponent: () => import('app/lecture/lecture-unit/lecture-unit-management/edit-video-unit/edit-video-unit.component').then((m) => m.EditVideoUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.videoUnit.editVideoUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'online-units/:onlineUnitId/edit',\r\n                loadComponent: () => import('app/lecture/lecture-unit/lecture-unit-management/edit-online-unit/edit-online-unit.component').then((m) => m.EditOnlineUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.onlineUnit.editOnlineUnit.title',\r\n                },\r\n            },\r\n            {\r\n                path: 'text-units/:textUnitId/edit',\r\n                loadComponent: () => import('app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component').then((m) => m.EditTextUnitComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.textUnit.editTextUnit.title',\r\n                },\r\n            },\r\n        ],\r\n    },\r\n];\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-close-edit-lecture-modal',\r\n    imports: [TranslateDirective, FontAwesomeModule],\r\n    templateUrl: './close-edit-lecture-modal.component.html',\r\n})\r\nexport class CloseEditLectureModalComponent {\r\n    protected readonly faTimes = faTimes;\r\n\r\n    protected readonly activeModal = inject(NgbActiveModal);\r\n\r\n    // no input signals yet as they can not be initialized with current ng-bootstrap version https://stackoverflow.com/a/79094268/16540383\r\n    @Input() hasUnsavedChangesInTitleSection: boolean;\r\n    @Input() hasUnsavedChangesInPeriodSection: boolean;\r\n\r\n    closeWindow(isCloseConfirmed: boolean): void {\r\n        this.activeModal.close(isCloseConfirmed);\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.lecture.dismissChangesModal.title\"></h4>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <span jhiTranslate=\"artemisApp.lecture.dismissChangesModal.message\" class=\"fw-bold\"></span><br />\r\n    <!--    check if translation should be singular or plural, to be exchanged\r\n        with computed signals once input signals are supported with ng-bootstrap modals -->\r\n    @if (hasUnsavedChangesInTitleSection && hasUnsavedChangesInPeriodSection) {\r\n        <span jhiTranslate=\"artemisApp.lecture.dismissChangesModal.sectionsThatContainUnsavedChangesPlural\"></span>\r\n    } @else {\r\n        <span jhiTranslate=\"artemisApp.lecture.dismissChangesModal.sectionsThatContainUnsavedChangesSingular\"></span>\r\n    }\r\n    <ul>\r\n        @if (hasUnsavedChangesInTitleSection) {\r\n            <li>\r\n                <span jhiTranslate=\"artemisApp.lecture.sections.title\"></span>\r\n            </li>\r\n        }\r\n        @if (hasUnsavedChangesInPeriodSection) {\r\n            <li>\r\n                <span jhiTranslate=\"artemisApp.lecture.sections.period\"></span>\r\n            </li>\r\n        }\r\n    </ul>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button class=\"btn btn-default\" (click)=\"closeWindow(true)\">\r\n        <span jhiTranslate=\"entity.action.discardChanges\"></span>\r\n    </button>\r\n    <button type=\"button\" (click)=\"closeWindow(false)\" class=\"btn btn-primary\" type=\"submit\">\r\n        <fa-icon [icon]=\"faTimes\" />\r\n        <span class=\"ms-1\" jhiTranslate=\"entity.action.cancel\"></span>\r\n    </button>\r\n</div>\r\n", "import { inject } from '@angular/core';\r\nimport { CanDeactivateFn } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { LectureUpdateComponent } from 'app/lecture/lecture-update.component';\r\nimport { Observable, from, of } from 'rxjs';\r\nimport { CloseEditLectureModalComponent } from 'app/lecture/close-edit-lecture-modal/close-edit-lecture-modal.component';\r\n\r\nexport const hasLectureUnsavedChangesGuard: CanDeactivateFn<LectureUpdateComponent> = (component: LectureUpdateComponent): Observable<boolean> => {\r\n    if (!component.shouldDisplayDismissWarning) {\r\n        return of(true);\r\n    }\r\n\r\n    if (component.isChangeMadeToTitleOrPeriodSection) {\r\n        const modalService = inject(NgbModal);\r\n\r\n        const modalRef: NgbModalRef = modalService.open(CloseEditLectureModalComponent, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n            animation: true,\r\n        });\r\n        modalRef.componentInstance.hasUnsavedChangesInTitleSection = component.isChangeMadeToTitleSection();\r\n        modalRef.componentInstance.hasUnsavedChangesInPeriodSection = component.isChangeMadeToPeriodSection();\r\n\r\n        return from(modalRef.result);\r\n    }\r\n\r\n    return of(true);\r\n};\r\n", "import { Lecture } from 'app/entities/lecture.model';\r\nimport { LectureService } from 'app/lecture/lecture.service';\r\nimport { Attachment } from 'app/entities/attachment.model';\r\nimport { AttachmentService } from 'app/lecture/attachment.service';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, filter, map, of } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LectureResolve implements Resolve<Lecture> {\r\n    private lectureService = inject(LectureService);\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<Lecture> {\r\n        const lectureId = route.params['lectureId'];\r\n        if (lectureId) {\r\n            return this.lectureService.find(lectureId).pipe(\r\n                filter((response: HttpResponse<Lecture>) => response.ok),\r\n                map((lecture: HttpResponse<Lecture>) => lecture.body!),\r\n            );\r\n        }\r\n        return of(new Lecture());\r\n    }\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AttachmentResolve implements Resolve<Attachment> {\r\n    private attachmentService = inject(AttachmentService);\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<Attachment> {\r\n        const attachmentId = route.params['attachmentId'];\r\n        if (attachmentId) {\r\n            return this.attachmentService.find(attachmentId).pipe(\r\n                filter((response: HttpResponse<Attachment>) => response.ok),\r\n                map((attachment: HttpResponse<Attachment>) => attachment.body!),\r\n            );\r\n        }\r\n        return of(new Attachment());\r\n    }\r\n}\r\n", "import { Routes } from '@angular/router';\r\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\r\n\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { lectureUnitRoute } from 'app/lecture/lecture-unit/lecture-unit-management/lecture-unit-management.route';\r\nimport { CourseManagementResolve } from 'app/course/manage/course-management-resolve.service';\r\nimport { hasLectureUnsavedChangesGuard } from './hasLectureUnsavedChanges.guard';\r\nimport { AttachmentResolve, LectureResolve } from 'app/lecture/lecture-resolve.service';\r\n\r\nexport const lectureRoute: Routes = [\r\n    {\r\n        path: '',\r\n        loadComponent: () => import('./lecture.component').then((m) => m.LectureComponent),\r\n        resolve: {\r\n            course: CourseManagementResolve,\r\n        },\r\n        data: {\r\n            authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n            pageTitle: 'artemisApp.lecture.home.title',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        // Create a new path without a component defined to prevent the LectureComponent from being always rendered\r\n        path: '',\r\n        resolve: {\r\n            course: CourseManagementResolve,\r\n        },\r\n        children: [\r\n            {\r\n                path: 'new',\r\n                loadComponent: () => import('./lecture-update.component').then((m) => m.LectureUpdateComponent),\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'global.generic.create',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':lectureId',\r\n                loadComponent: () => import('./lecture-detail.component').then((m) => m.LectureDetailComponent),\r\n                resolve: {\r\n                    lecture: LectureResolve,\r\n                },\r\n                data: {\r\n                    authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.lecture.home.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':lectureId',\r\n                resolve: {\r\n                    lecture: LectureResolve,\r\n                },\r\n                children: [\r\n                    {\r\n                        path: 'attachments',\r\n                        loadComponent: () => import('app/lecture/lecture-attachments.component').then((m) => m.LectureAttachmentsComponent),\r\n                        data: {\r\n                            authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.lecture.attachments.title',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'attachments',\r\n                        canActivate: [UserRouteAccessService],\r\n                        children: [\r\n                            {\r\n                                path: ':attachmentId',\r\n                                loadComponent: () => import('app/lecture/pdf-preview/pdf-preview.component').then((m) => m.PdfPreviewComponent),\r\n                                resolve: {\r\n                                    attachment: AttachmentResolve,\r\n                                    course: CourseManagementResolve,\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: 'edit',\r\n                        loadComponent: () => import('./lecture-update.component').then((m) => m.LectureUpdateComponent),\r\n                        data: {\r\n                            authorities: [Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'global.generic.edit',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                        canDeactivate: [hasLectureUnsavedChangesGuard],\r\n                    },\r\n                    ...lectureUnitRoute,\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\n"],
  "mappings": "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",
  "names": ["AttachmentUnitResolve", "attachmentUnitService", "inject", "AttachmentUnitService", "resolve", "route", "lectureId", "params", "attachmentUnitId", "findById", "pipe", "filter", "response", "ok", "map", "attachmentUnit", "body", "of", "AttachmentUnit", "factory", "\u0275fac", "providedIn", "lectureUnitRoute", "path", "loadComponent", "then", "m", "LectureUnitManagementComponent", "data", "authorities", "Authority", "EDITOR", "INSTRUCTOR", "ADMIN", "pageTitle", "canActivate", "UserRouteAccessService", "children", "CreateExerciseUnitComponent", "AttachmentUnitsComponent", "CreateAttachmentUnitComponent", "CreateVideoUnitComponent", "CreateOnlineUnitComponent", "CreateTextUnitComponent", "EditAttachmentUnitComponent", "PdfPreviewComponent", "resolve", "course", "CourseManagementResolve", "attachmentUnit", "AttachmentUnitResolve", "EditVideoUnitComponent", "EditOnlineUnitComponent", "EditTextUnitComponent", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "CloseEditLectureModalComponent", "faTimes", "activeModal", "inject", "NgbActiveModal", "hasUnsavedChangesInTitleSection", "hasUnsavedChangesInPeriodSection", "closeWindow", "isCloseConfirmed", "close", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CloseEditLectureModalComponent_Conditional_11_Template", "CloseEditLectureModalComponent_Conditional_12_Template", "CloseEditLectureModalComponent_Conditional_15_Template", "CloseEditLectureModalComponent_Conditional_16_Template", "\u0275\u0275listener", "\u0275\u0275advance", "\u0275\u0275conditional", "\u0275\u0275property", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "encapsulation", "hasLectureUnsavedChangesGuard", "component", "shouldDisplayDismissWarning", "of", "isChangeMadeToTitleOrPeriodSection", "modalRef", "inject", "NgbModal", "open", "CloseEditLectureModalComponent", "size", "backdrop", "animation", "componentInstance", "hasUnsavedChangesInTitleSection", "isChangeMadeToTitleSection", "hasUnsavedChangesInPeriodSection", "isChangeMadeToPeriodSection", "from", "result", "LectureResolve", "lectureService", "inject", "LectureService", "resolve", "route", "lectureId", "params", "find", "pipe", "filter", "response", "ok", "map", "lecture", "body", "of", "Lecture", "factory", "\u0275fac", "providedIn", "AttachmentResolve", "attachmentService", "AttachmentService", "attachmentId", "attachment", "Attachment", "lectureRoute", "path", "loadComponent", "then", "m", "LectureComponent", "resolve", "course", "CourseManagementResolve", "data", "authorities", "Authority", "EDITOR", "INSTRUCTOR", "ADMIN", "pageTitle", "canActivate", "UserRouteAccessService", "children", "LectureUpdateComponent", "LectureDetailComponent", "lecture", "LectureResolve", "LectureAttachmentsComponent", "PdfPreviewComponent", "attachment", "AttachmentResolve", "canDeactivate", "hasLectureUnsavedChangesGuard", "lectureUnitRoute"]
}
