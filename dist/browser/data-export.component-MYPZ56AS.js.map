{
  "version": 3,
  "sources": ["src/main/webapp/app/core/legal/data-export/data-export.service.ts", "src/main/webapp/app/entities/data-export.model.ts", "src/main/webapp/app/shared/type-ahead-search-field/type-ahead-user-search-field.component.ts", "src/main/webapp/app/shared/type-ahead-search-field/type-ahead-user-search-field.component.html", "src/main/webapp/app/core/legal/data-export/confirmation/data-export-confirmation-dialog.component.ts", "src/main/webapp/app/core/legal/data-export/confirmation/data-export-confirmation-dialog.component.html", "src/main/webapp/app/core/legal/data-export/confirmation/data-export-confirmation-dialog.service.ts", "src/main/webapp/app/core/legal/data-export/confirmation/data-export-request-button.directive.ts", "src/main/webapp/app/core/legal/data-export/data-export.component.ts", "src/main/webapp/app/core/legal/data-export/data-export.component.html"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DataExport } from 'app/entities/data-export.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataExportService {\r\n    private http = inject(HttpClient);\r\n\r\n    requestDataExport(): Observable<DataExport> {\r\n        return this.http.post<DataExport>(`api/core/data-exports`, {});\r\n    }\r\n\r\n    downloadDataExport(dataExportId: number) {\r\n        const url = `api/core/data-exports/${dataExportId}`;\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    canRequestDataExport(): Observable<boolean> {\r\n        return this.http.get<boolean>(`api/core/data-exports/can-request`);\r\n    }\r\n\r\n    canDownloadAnyDataExport(): Observable<DataExport> {\r\n        return this.http.get<DataExport>(`api/core/data-exports/can-download`);\r\n    }\r\n    canDownloadSpecificDataExport(dataExportId: number): Observable<boolean> {\r\n        return this.http.get<boolean>(`api/core/data-exports/${dataExportId}/can-download`);\r\n    }\r\n\r\n    requestDataExportForAnotherUser(login: string): Observable<DataExport> {\r\n        return this.http.post<DataExport>(`api/core/admin/data-exports/${login}`, {});\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { User } from 'app/core/user/user.model';\r\nimport dayjs from 'dayjs/esm';\r\n\r\nexport class DataExport implements BaseEntity {\r\n    id?: number;\r\n    dataExportState?: DataExportState;\r\n    createdDate?: dayjs.Dayjs;\r\n    creationFinishedDate?: dayjs.Dayjs;\r\n    downloadDate?: dayjs.Dayjs;\r\n    nextRequestDate?: dayjs.Dayjs;\r\n    user?: User;\r\n}\r\n\r\nexport enum DataExportState {\r\n    REQUESTED = 'REQUESTED',\r\n    IN_CREATION = 'IN_CREATION',\r\n    EMAIL_SENT = 'EMAIL_SENT',\r\n    DOWNLOADED = 'DOWNLOADED',\r\n    DELETED = 'DELETED',\r\n    DOWNLOADED_DELETED = 'DOWNLOADED_DELETED',\r\n    FAILED = 'FAILED',\r\n}\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { Observable, OperatorFunction, catchError, of, switchMap, tap } from 'rxjs';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-type-ahead-user-search-field',\r\n    templateUrl: './type-ahead-user-search-field.component.html',\r\n    styleUrls: ['./type-ahead-user-search-field.component.scss'],\r\n    imports: [TranslateDirective, FormsModule, NgbTypeahead, FaIconComponent, ArtemisTranslatePipe],\r\n})\r\nexport class TypeAheadUserSearchFieldComponent {\r\n    private userService = inject(UserService);\r\n\r\n    @Input() loginOrName: string;\r\n    @Output() loginOrNameChange = new EventEmitter<string>();\r\n\r\n    searching = false;\r\n    searchFailed = false;\r\n    searchNoResults = false;\r\n    searchQueryTooShort = true;\r\n\r\n    readonly faCircleNotch = faCircleNotch;\r\n    readonly MIN_SEARCH_QUERY_LENGTH = 3;\r\n\r\n    search: OperatorFunction<string, readonly User[]> = (login: Observable<string>) => {\r\n        this.searchFailed = false;\r\n        return login.pipe(\r\n            switchMap((loginOrName: string) => {\r\n                if (loginOrName.length < this.MIN_SEARCH_QUERY_LENGTH) {\r\n                    this.searchQueryTooShort = true;\r\n                    this.searching = false;\r\n                    return of([]);\r\n                } else {\r\n                    this.searchQueryTooShort = false;\r\n                }\r\n                this.searching = true;\r\n\r\n                return this.userService.search(loginOrName).pipe(\r\n                    switchMap((usersResponse) => of(usersResponse.body!)),\r\n                    tap((users) => {\r\n                        this.searching = false;\r\n                        this.searchNoResults = users.length === 0;\r\n                    }),\r\n                    catchError(() => {\r\n                        this.searching = false;\r\n                        this.searchFailed = true;\r\n                        return of([]);\r\n                    }),\r\n                );\r\n            }),\r\n        );\r\n    };\r\n\r\n    onChange() {\r\n        const user = this.loginOrName as unknown as User;\r\n        // this is a user object returned by search, but we are only interested in the login\r\n        // if we don't do this, the user object will be converted to a string and passed to the parent component\r\n        // before we sent a request to the server this is a string, and we can emit it directly\r\n        if (user && user.login) {\r\n            this.loginOrNameChange.emit(user.login);\r\n        } else {\r\n            this.loginOrNameChange.emit(this.loginOrName);\r\n        }\r\n        this.searchQueryTooShort = this.loginOrName.length < this.MIN_SEARCH_QUERY_LENGTH;\r\n    }\r\n\r\n    resultFormatter = (result: User) => result.name! + ' (' + result.login! + ')';\r\n    inputFormatter(input: User | string) {\r\n        // here applies the same as in onChange()\r\n        const user = input as unknown as User;\r\n        if (user && user.login) {\r\n            return user.login!;\r\n        } else {\r\n            return input as string;\r\n        }\r\n    }\r\n}\r\n", "<label class=\"mb-1 form-check-label\" for=\"typeahead-user-login\" jhiTranslate=\"artemisApp.dataExport.loginOrName\"></label>\r\n<div class=\"search-container\">\r\n    <input\r\n        id=\"typeahead-user-login\"\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        [(ngModel)]=\"loginOrName\"\r\n        [ngbTypeahead]=\"search\"\r\n        [placeholder]=\"'artemisApp.dataExport.loginOrName' | artemisTranslate\"\r\n        (input)=\"onChange()\"\r\n        (change)=\"onChange()\"\r\n        (focus)=\"onChange()\"\r\n        (select)=\"onChange()\"\r\n        (blur)=\"onChange()\"\r\n        [resultFormatter]=\"resultFormatter\"\r\n        [inputFormatter]=\"inputFormatter\"\r\n    />\r\n\r\n    <div class=\"search-info\" [class.active]=\"searching\">\r\n        <fa-icon size=\"lg\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n    </div>\r\n    <div class=\"search-info\" [class.active]=\"searchFailed\">\r\n        <span class=\"badge bg-danger\" [jhiTranslate]=\"'artemisApp.dataTable.search.failed'\"> Search failed </span>\r\n    </div>\r\n    <div class=\"search-info\" [class.active]=\"searchNoResults\">\r\n        <span class=\"badge bg-warning\" [jhiTranslate]=\"'artemisApp.dataTable.search.noResults'\"> No results </span>\r\n    </div>\r\n    <div class=\"search-info\" [class.active]=\"searchQueryTooShort\">\r\n        <span class=\"badge bg-info\" [jhiTranslate]=\"'artemisApp.dataExport.searchQueryTooShort'\" [translateValues]=\"{ length: MIN_SEARCH_QUERY_LENGTH }\">\r\n            Please enter at least {{ MIN_SEARCH_QUERY_LENGTH }} characters\r\n        </span>\r\n    </div>\r\n</div>\r\n", "import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild, inject } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { faBan, faCheck, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { TypeAheadUserSearchFieldComponent } from 'app/shared/type-ahead-search-field/type-ahead-user-search-field.component';\r\nimport { ConfirmEntityNameComponent } from 'app/shared/confirm-entity-name/confirm-entity-name.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-data-export-confirmation-dialog',\r\n    templateUrl: './data-export-confirmation-dialog.component.html',\r\n    imports: [FormsModule, TranslateDirective, TypeAheadUserSearchFieldComponent, ConfirmEntityNameComponent, FaIconComponent],\r\n})\r\nexport class DataExportConfirmationDialogComponent implements OnInit, OnDestroy {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    private dialogErrorSubscription: Subscription;\r\n    dialogError: Observable<string>;\r\n    @Output() dataExportRequest: EventEmitter<void>;\r\n    @Output() dataExportRequestForAnotherUser: EventEmitter<string>;\r\n    @ViewChild('dataExportConfirmationForm', { static: true }) dataExportConfirmationForm: NgForm;\r\n\r\n    submitDisabled: boolean;\r\n    enteredLogin: string;\r\n    expectedLogin: string;\r\n    adminDialog = false;\r\n    requestForAnotherUser = false;\r\n    expectedLoginOfOtherUser: string;\r\n    deleteQuestion: string;\r\n    confirmationTextHint: string;\r\n    ownLogin: string;\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faSpinner = faSpinner;\r\n    faCheck = faCheck;\r\n\r\n    /**\r\n     * Life cycle hook called by Angular to indicate that Angular is done creating the component\r\n     */\r\n    ngOnInit(): void {\r\n        this.dialogErrorSubscription = this.dialogError.subscribe((errorMessage: string) => {\r\n            if (errorMessage === '') {\r\n                this.clear();\r\n            } else {\r\n                this.submitDisabled = false;\r\n                this.alertService.error(errorMessage);\r\n            }\r\n        });\r\n        this.confirmationTextHint = 'artemisApp.dataExport.typeLoginToConfirm';\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook called by Angular for cleanup just before Angular destroys the component\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.dialogErrorSubscription) {\r\n            this.dialogErrorSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the dialog\r\n     */\r\n    clear(): void {\r\n        // intentionally use close instead of dismiss here, because dismiss leads to a non-traceable runtime error\r\n        this.activeModal.close();\r\n    }\r\n\r\n    /**\r\n     * Emits the data export request event\r\n     */\r\n    confirmDataExportRequest(): void {\r\n        this.submitDisabled = true;\r\n        // we need to emit the login if it is a request by an admin for another user, so we can make the request for the data export using the login\r\n        if (this.requestForAnotherUser) {\r\n            this.dataExportRequestForAnotherUser.emit(this.expectedLogin);\r\n        } else {\r\n            this.dataExportRequest.emit();\r\n        }\r\n    }\r\n\r\n    onRequestDataExportForOtherUserChanged(event: any) {\r\n        if (event.target.checked) {\r\n            this.ownLogin = this.expectedLogin;\r\n            this.expectedLogin = this.expectedLoginOfOtherUser ?? '';\r\n            this.confirmationTextHint = 'artemisApp.dataExport.typeUserLoginToConfirm';\r\n            this.enteredLogin = '';\r\n        } else {\r\n            this.enteredLogin = '';\r\n            this.expectedLogin = this.ownLogin;\r\n            this.confirmationTextHint = 'artemisApp.dataExport.typeLoginToConfirm';\r\n            this.expectedLoginOfOtherUser = '';\r\n        }\r\n    }\r\n}\r\n", "<form name=\"dataExportConfirmationForm\" (ngSubmit)=\"confirmDataExportRequest()\" #dataExportConfirmationForm=\"ngForm\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <span jhiTranslate=\"artemisApp.dataExport.confirmationHeader\"></span>\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <p [jhiTranslate]=\"'artemisApp.dataExport.confirmationQuestion'\">Are you sure you want to request?</p>\r\n        @if (adminDialog) {\r\n            <div>\r\n                @if (adminDialog) {\r\n                    <div class=\"checkbox\">\r\n                        <div class=\"control-label form-check\">\r\n                            <input\r\n                                id=\"request-for-other-user\"\r\n                                type=\"checkbox\"\r\n                                name=\"checkbox\"\r\n                                class=\"form-check-input\"\r\n                                (change)=\"onRequestDataExportForOtherUserChanged($event)\"\r\n                                [(ngModel)]=\"requestForAnotherUser\"\r\n                            />\r\n                            <label for=\"request-for-other-user\" class=\"form-check-label\" jhiTranslate=\"artemisApp.dataExport.requestForAnotherUser\"></label>\r\n                        </div>\r\n                        @if (requestForAnotherUser) {\r\n                            <jhi-type-ahead-user-search-field [(loginOrName)]=\"expectedLogin\" />\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        <jhi-confirm-entity-name\r\n            [entityName]=\"expectedLogin\"\r\n            [confirmationText]=\"confirmationTextHint\"\r\n            [disabled]=\"submitDisabled\"\r\n            [(ngModel)]=\"enteredLogin\"\r\n            name=\"confirmEntityName\"\r\n        />\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"clear()\" [disabled]=\"submitDisabled\">\r\n            <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n        </button>\r\n        <button\r\n            id=\"request\"\r\n            type=\"submit\"\r\n            class=\"btn btn-primary\"\r\n            [style.cursor]=\"dataExportConfirmationForm.invalid || submitDisabled ? 'not-allowed' : 'pointer'\"\r\n            [disabled]=\"dataExportConfirmationForm.invalid || submitDisabled\"\r\n        >\r\n            @if (submitDisabled) {\r\n                <span><fa-icon [icon]=\"faSpinner\" animation=\"spin\" />&nbsp;</span>\r\n            }\r\n            <fa-icon [icon]=\"faCheck\" />&nbsp;\r\n            <span [jhiTranslate]=\"'artemisApp.dataExport.request'\"> Request</span>\r\n        </button>\r\n    </div>\r\n</form>\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { from } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { DataExportConfirmationDialogData } from 'app/core/legal/data-export/confirmation/data-export-confirmation-dialog.model';\r\nimport { DataExportConfirmationDialogComponent } from 'app/core/legal/data-export/confirmation/data-export-confirmation-dialog.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataExportConfirmationDialogService {\r\n    private modalService = inject(NgbModal);\r\n    alertService = inject(AlertService);\r\n\r\n    modalRef: NgbModalRef | null;\r\n\r\n    /**\r\n     * Opens data export confirmation dialog\r\n     * @param dataExportConfirmationDialogData data that is used in dialog\r\n     */\r\n    openConfirmationDialog(dataExportConfirmationDialogData: DataExportConfirmationDialogData): void {\r\n        this.alertService.closeAll();\r\n        this.modalRef = this.modalService.open(DataExportConfirmationDialogComponent, { size: 'lg', backdrop: 'static' });\r\n        this.modalRef.componentInstance.expectedLogin = dataExportConfirmationDialogData.userLogin;\r\n        this.modalRef.componentInstance.adminDialog = dataExportConfirmationDialogData.adminDialog;\r\n        this.modalRef.componentInstance.dataExportRequest = dataExportConfirmationDialogData.dataExportRequest;\r\n        this.modalRef.componentInstance.dataExportRequestForAnotherUser = dataExportConfirmationDialogData.dataExportRequestForAnotherUser;\r\n        this.modalRef.componentInstance.dialogError = dataExportConfirmationDialogData.dialogError;\r\n\r\n        from(this.modalRef.result).subscribe(() => (this.modalRef = null));\r\n    }\r\n}\r\n", "import { Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, Renderer2, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DataExportConfirmationDialogData } from 'app/core/legal/data-export/confirmation/data-export-confirmation-dialog.model';\r\nimport { DataExportConfirmationDialogService } from 'app/core/legal/data-export/confirmation/data-export-confirmation-dialog.service';\r\n\r\n@Directive({ selector: '[jhiDataExportRequestButton]' })\r\nexport class DataExportRequestButtonDirective implements OnInit {\r\n    private dataExportConfirmationDialogService = inject(DataExportConfirmationDialogService);\r\n    private renderer = inject(Renderer2);\r\n    private elementRef = inject(ElementRef);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() expectedLogin: string;\r\n    @Input() dialogError: Observable<string>;\r\n    @Input() adminDialog = false;\r\n    @Output() dataExportRequest = new EventEmitter<void>();\r\n    @Output() dataExportRequestForAnotherUser = new EventEmitter<string>();\r\n    private buttonText: HTMLElement;\r\n\r\n    /**\r\n     * This method appends classes and type property to the button on which directive was used, additionally adds a span tag with delete text.\r\n     * We can't use component, as Angular would wrap it in its own tag and this will break button grouping that we are using for other buttons.\r\n     */\r\n    ngOnInit() {\r\n        // set button classes and submit property\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'btn');\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'btn-primary');\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'btn-lg');\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'me-1');\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'type', 'submit');\r\n\r\n        // create a span with confirmation text\r\n        this.buttonText = this.renderer.createElement('span');\r\n        this.renderer.addClass(this.buttonText, 'd-xl-inline');\r\n        this.setTextContent();\r\n        this.renderer.appendChild(this.elementRef.nativeElement, this.buttonText);\r\n\r\n        // update the span title on each language change\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.setTextContent();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Opens confirmation dialog\r\n     */\r\n    openConfirmationDialog() {\r\n        const dataExportConfirmationDialogData: DataExportConfirmationDialogData = {\r\n            userLogin: this.expectedLogin,\r\n            dataExportRequest: this.dataExportRequest,\r\n            dataExportRequestForAnotherUser: this.dataExportRequestForAnotherUser,\r\n            dialogError: this.dialogError,\r\n            adminDialog: this.adminDialog,\r\n        };\r\n        this.dataExportConfirmationDialogService.openConfirmationDialog(dataExportConfirmationDialogData);\r\n    }\r\n\r\n    /**\r\n     * Function is executed when a MouseEvent is registered. Opens the confirmation Dialog\r\n     * @param event\r\n     */\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n        this.openConfirmationDialog();\r\n    }\r\n\r\n    private setTextContent() {\r\n        this.renderer.setProperty(this.buttonText, 'textContent', this.translateService.instant(`artemisApp.dataExport.request`));\r\n    }\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { Subject } from 'rxjs';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { DataExportService } from 'app/core/legal/data-export/data-export.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { DataExport, DataExportState } from 'app/entities/data-export.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { DataExportRequestButtonDirective } from './confirmation/data-export-request-button.directive';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-data-export',\r\n    templateUrl: './data-export.component.html',\r\n    imports: [DataExportRequestButtonDirective, ButtonComponent, TranslateDirective, ArtemisDatePipe, ArtemisTranslatePipe],\r\n})\r\nexport class DataExportComponent implements OnInit {\r\n    private dataExportService = inject(DataExportService);\r\n    private accountService = inject(AccountService);\r\n    private alertService = inject(AlertService);\r\n    private route = inject(ActivatedRoute);\r\n\r\n    readonly ActionType = ActionType;\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly ButtonType = ButtonType;\r\n    readonly DataExportState = DataExportState;\r\n\r\n    protected dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    canDownload = false;\r\n    canRequestDataExport = false;\r\n    currentLogin: string | undefined;\r\n    dataExportId: number;\r\n    downloadMode = false;\r\n    titleKey: string;\r\n    description: string;\r\n    state?: DataExportState;\r\n    dataExport: DataExport = new DataExport();\r\n    isAdmin = false;\r\n\r\n    ngOnInit() {\r\n        this.currentLogin = this.accountService.userIdentity?.login;\r\n        this.isAdmin = this.accountService.isAdmin();\r\n        this.route.params.subscribe((params) => {\r\n            if (params['id']) {\r\n                this.downloadMode = true;\r\n                this.dataExportId = params['id'];\r\n            }\r\n        });\r\n\r\n        if (this.downloadMode) {\r\n            this.titleKey = 'artemisApp.dataExport.titleDownload';\r\n            this.description = 'artemisApp.dataExport.descriptionDownload';\r\n            this.dataExportService.canDownloadSpecificDataExport(this.dataExportId).subscribe((canDownloadDataExport) => {\r\n                this.canDownload = canDownloadDataExport;\r\n            });\r\n        } else {\r\n            this.titleKey = 'artemisApp.dataExport.title';\r\n            this.description = 'artemisApp.dataExport.description';\r\n            this.dataExportService.canRequestDataExport().subscribe((canRequestDataExport) => {\r\n                this.canRequestDataExport = canRequestDataExport;\r\n            });\r\n            this.dataExportService.canDownloadAnyDataExport().subscribe((dataExport) => {\r\n                this.dataExport.createdDate = convertDateFromServer(dataExport.createdDate);\r\n                this.dataExport.nextRequestDate = convertDateFromServer(dataExport.nextRequestDate);\r\n                this.canDownload = !!dataExport.id;\r\n                if (this.canDownload) {\r\n                    this.dataExport.id = dataExport.id!;\r\n                    this.dataExportId = dataExport.id!;\r\n                }\r\n                this.dataExport.dataExportState = dataExport.dataExportState;\r\n                this.state = dataExport.dataExportState!;\r\n            });\r\n        }\r\n    }\r\n\r\n    requestExport() {\r\n        this.dataExportService.requestDataExport().subscribe({\r\n            next: (response: DataExport) => {\r\n                this.dialogErrorSource.next('');\r\n                this.alertService.success('artemisApp.dataExport.requestSuccess');\r\n                this.dataExportId = response.id!;\r\n                this.canRequestDataExport = false;\r\n                this.state = response.dataExportState!;\r\n                this.dataExport.createdDate = response.createdDate;\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.dialogErrorSource.next(error.message);\r\n                this.alertService.error('artemisApp.dataExport.requestError');\r\n            },\r\n        });\r\n    }\r\n\r\n    downloadDataExport() {\r\n        this.dataExportService.downloadDataExport(this.dataExportId);\r\n    }\r\n\r\n    requestExportForAnotherUser(login: string) {\r\n        this.dataExportService.requestDataExportForAnotherUser(login).subscribe({\r\n            next: () => {\r\n                this.dialogErrorSource.next('');\r\n                this.alertService.success('artemisApp.dataExport.requestForUserSuccess', { login });\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.dialogErrorSource.next(error.message);\r\n                this.alertService.error('artemisApp.dataExport.requestForUserError', { login });\r\n            },\r\n        });\r\n    }\r\n}\r\n", "<div>\r\n    <h1>\r\n        {{ this.titleKey | artemisTranslate }}\r\n    </h1>\r\n    <p>\r\n        {{ this.description | artemisTranslate }}\r\n    </p>\r\n    <div class=\"column d-flex justify-content-center align-content-center\">\r\n        @if (!downloadMode) {\r\n            <button\r\n                jhiDataExportRequestButton\r\n                [adminDialog]=\"isAdmin\"\r\n                [expectedLogin]=\"currentLogin!\"\r\n                [dialogError]=\"dialogError$\"\r\n                (dataExportRequest)=\"requestExport()\"\r\n                (dataExportRequestForAnotherUser)=\"requestExportForAnotherUser($event)\"\r\n                class=\"mb-1\"\r\n                [disabled]=\"!canRequestDataExport && !isAdmin\"\r\n            ></button>\r\n        }\r\n        @if (canDownload) {\r\n            <jhi-button\r\n                id=\"download-data-export-btn\"\r\n                [btnSize]=\"ButtonSize.LARGE\"\r\n                [disabled]=\"!canDownload\"\r\n                [tooltip]=\"'artemisApp.dataExport.download'\"\r\n                [title]=\"'artemisApp.dataExport.download'\"\r\n                (onClick)=\"downloadDataExport()\"\r\n            />\r\n        }\r\n    </div>\r\n    <div class=\"mt-3 d-flex-column align-content-center\">\r\n        @if (dataExport?.createdDate && state !== DataExportState.FAILED) {\r\n            <p>\r\n                <span jhiTranslate=\"artemisApp.dataExport.lastRequestDate\"></span>\r\n                <span class=\"bold\">{{ dataExport?.createdDate | artemisDate: 'long-date' }}</span>\r\n            </p>\r\n        }\r\n        @if (dataExport?.nextRequestDate && (state === DataExportState.DELETED || state === DataExportState.DOWNLOADED_DELETED) && !canRequestDataExport) {\r\n            <p>\r\n                <span jhiTranslate=\"artemisApp.dataExport.nextRequestDate\"></span>\r\n                <span class=\"bold\">{{ dataExport?.nextRequestDate | artemisDate: 'long-date' }}</span>\r\n            </p>\r\n        }\r\n        @if (state === DataExportState.REQUESTED || state === DataExportState.IN_CREATION) {\r\n            <p>\r\n                <span jhiTranslate=\"artemisApp.dataExport.isBeingCreated\"></span>\r\n            </p>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["DataExportService", "http", "inject", "HttpClient", "requestDataExport", "post", "downloadDataExport", "dataExportId", "url", "window", "open", "canRequestDataExport", "get", "canDownloadAnyDataExport", "canDownloadSpecificDataExport", "requestDataExportForAnotherUser", "login", "factory", "\u0275fac", "providedIn", "DataExport", "id", "dataExportState", "createdDate", "creationFinishedDate", "downloadDate", "nextRequestDate", "user", "DataExportState", "TypeAheadUserSearchFieldComponent", "userService", "inject", "UserService", "loginOrName", "loginOrNameChange", "EventEmitter", "searching", "searchFailed", "searchNoResults", "searchQueryTooShort", "faCircleNotch", "MIN_SEARCH_QUERY_LENGTH", "search", "login", "pipe", "switchMap", "length", "of", "usersResponse", "body", "tap", "users", "catchError", "onChange", "user", "emit", "resultFormatter", "result", "name", "inputFormatter", "input", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "\u0275\u0275pipeBind1", "\u0275\u0275classProp", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275textInterpolate1", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "NgbTypeahead", "FaIconComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r4", "ctx_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "expectedLogin", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275listener", "_r2", "onRequestDataExportForOtherUserChanged", "requestForAnotherUser", "\u0275\u0275element", "\u0275\u0275template", "DataExportConfirmationDialogComponent_Conditional_18_Conditional_3_Conditional_10_Template", "\u0275\u0275conditional", "DataExportConfirmationDialogComponent_Conditional_18_Conditional_3_Template", "adminDialog", "\u0275\u0275property", "faSpinner", "DataExportConfirmationDialogComponent", "activeModal", "inject", "NgbActiveModal", "alertService", "AlertService", "dialogErrorSubscription", "dialogError", "dataExportRequest", "dataExportRequestForAnotherUser", "dataExportConfirmationForm", "submitDisabled", "enteredLogin", "expectedLoginOfOtherUser", "deleteQuestion", "confirmationTextHint", "ownLogin", "faBan", "faCheck", "ngOnInit", "subscribe", "errorMessage", "clear", "error", "ngOnDestroy", "unsubscribe", "close", "confirmDataExportRequest", "emit", "event", "target", "checked", "selectors", "viewQuery", "rf", "ctx", "_r1", "DataExportConfirmationDialogComponent_Conditional_18_Template", "DataExportConfirmationDialogComponent_Conditional_33_Template", "\u0275\u0275styleProp", "dataExportConfirmationForm_r5", "invalid", "FormsModule", "\u0275NgNoValidate", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "TranslateDirective", "TypeAheadUserSearchFieldComponent", "ConfirmEntityNameComponent", "FaIconComponent", "encapsulation", "DataExportConfirmationDialogService", "modalService", "inject", "NgbModal", "alertService", "AlertService", "modalRef", "openConfirmationDialog", "dataExportConfirmationDialogData", "closeAll", "open", "DataExportConfirmationDialogComponent", "size", "backdrop", "componentInstance", "expectedLogin", "userLogin", "adminDialog", "dataExportRequest", "dataExportRequestForAnotherUser", "dialogError", "from", "result", "subscribe", "factory", "\u0275fac", "providedIn", "DataExportRequestButtonDirective", "dataExportConfirmationDialogService", "inject", "DataExportConfirmationDialogService", "renderer", "Renderer2", "elementRef", "ElementRef", "translateService", "TranslateService", "expectedLogin", "dialogError", "adminDialog", "dataExportRequest", "EventEmitter", "dataExportRequestForAnotherUser", "buttonText", "ngOnInit", "addClass", "nativeElement", "setProperty", "createElement", "setTextContent", "appendChild", "onLangChange", "subscribe", "openConfirmationDialog", "dataExportConfirmationDialogData", "userLogin", "onClick", "event", "preventDefault", "instant", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "requestExport", "$event", "requestExportForAnotherUser", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "isAdmin", "currentLogin", "dialogError$", "canRequestDataExport", "_r3", "downloadDataExport", "ButtonSize", "LARGE", "canDownload", "\u0275\u0275element", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind2", "dataExport", "createdDate", "nextRequestDate", "DataExportComponent", "dataExportService", "inject", "DataExportService", "accountService", "AccountService", "alertService", "AlertService", "route", "ActivatedRoute", "ActionType", "ButtonType", "DataExportState", "dialogErrorSource", "Subject", "asObservable", "dataExportId", "downloadMode", "titleKey", "description", "state", "DataExport", "ngOnInit", "userIdentity", "login", "params", "subscribe", "canDownloadSpecificDataExport", "canDownloadDataExport", "canDownloadAnyDataExport", "convertDateFromServer", "id", "dataExportState", "requestDataExport", "next", "response", "success", "error", "message", "requestDataExportForAnotherUser", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "DataExportComponent_Conditional_12_Template", "DataExportComponent_Conditional_13_Template", "DataExportComponent_Conditional_17_Template", "DataExportComponent_Conditional_18_Template", "DataExportComponent_Conditional_19_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "FAILED", "DELETED", "DOWNLOADED_DELETED", "REQUESTED", "IN_CREATION", "DataExportRequestButtonDirective", "ButtonComponent", "TranslateDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "encapsulation"]
}
