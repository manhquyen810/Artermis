{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/components/start-practice-mode-button/start-practice-mode-button.component.ts", "src/main/webapp/app/shared/components/start-practice-mode-button/start-practice-mode-button.component.html", "src/main/webapp/app/shared/components/open-code-editor-button/open-code-editor-button.component.ts", "src/main/webapp/app/shared/components/open-code-editor-button/open-code-editor-button.component.html", "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.ts", "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { CourseExerciseService } from 'app/exercises/shared/course-exercises/course-exercise.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { ExerciseActionButtonComponent } from '../exercise-action-button.component';\r\nimport { FeatureToggleDirective } from '../../feature-toggle/feature-toggle.directive';\r\nimport { NgbPopover } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-start-practice-mode-button',\r\n    templateUrl: './start-practice-mode-button.component.html',\r\n    styleUrls: ['./start-practice-mode-button.component.scss'],\r\n    imports: [ExerciseActionButtonComponent, FeatureToggleDirective, NgbPopover, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class StartPracticeModeButtonComponent implements OnInit {\r\n    private courseExerciseService = inject(CourseExerciseService);\r\n    private alertService = inject(AlertService);\r\n    private participationService = inject(ParticipationService);\r\n\r\n    readonly FeatureToggle = FeatureToggle;\r\n\r\n    @Input() smallButtons: boolean;\r\n    @Input() exercise: Exercise;\r\n    @Output() practiceModeStarted = new EventEmitter();\r\n\r\n    startingPracticeMode = false;\r\n    gradedStudentParticipation?: StudentParticipation;\r\n\r\n    // Icons\r\n    faRedo = faRedo;\r\n\r\n    ngOnInit() {\r\n        this.gradedStudentParticipation = this.participationService.getSpecificStudentParticipation(this.exercise.studentParticipations ?? [], false);\r\n    }\r\n\r\n    startPractice(useGradedParticipation: boolean): void {\r\n        this.startingPracticeMode = true;\r\n        this.courseExerciseService\r\n            .startPractice(this.exercise.id!, useGradedParticipation)\r\n            .pipe(finalize(() => (this.startingPracticeMode = false)))\r\n            .subscribe({\r\n                next: (participation) => {\r\n                    if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n                        if (participation?.initializationState === InitializationState.INITIALIZED) {\r\n                            if ((this.exercise as ProgrammingExercise).allowOfflineIde) {\r\n                                this.alertService.success('artemisApp.exercise.personalRepositoryClone');\r\n                            } else {\r\n                                this.alertService.success('artemisApp.exercise.personalRepositoryOnline');\r\n                            }\r\n                        } else {\r\n                            this.alertService.error('artemisApp.exercise.startError');\r\n                        }\r\n                        if (participation) {\r\n                            this.practiceModeStarted.emit(participation);\r\n                        }\r\n                    }\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.exercise.startError');\r\n                },\r\n            });\r\n    }\r\n}\r\n", "<ng-container>\r\n    <button\r\n        jhi-exercise-action-button\r\n        [buttonIcon]=\"faRedo\"\r\n        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n        [buttonLabel]=\"'artemisApp.exerciseActions.practice' | artemisTranslate\"\r\n        [buttonLoading]=\"startingPracticeMode\"\r\n        [smallButton]=\"smallButtons\"\r\n        [hideLabelMobile]=\"false\"\r\n        [ngbPopover]=\"popContent\"\r\n        [autoClose]=\"'outside'\"\r\n        placement=\"right auto\"\r\n        container=\"body\"\r\n    ></button>\r\n    <ng-template #popContent>\r\n        <div class=\"start-practice-popover\">\r\n            <h5 jhiTranslate=\"artemisApp.exerciseActions.practiceMode.title\"></h5>\r\n            <p jhiTranslate=\"artemisApp.exerciseActions.practiceMode.explanation\"></p>\r\n            @if (gradedStudentParticipation) {\r\n                <p jhiTranslate=\"artemisApp.exerciseActions.practiceMode.repositoryChoice\"></p>\r\n            }\r\n            <div class=\"button-footer\">\r\n                <button\r\n                    jhi-exercise-action-button\r\n                    [buttonIcon]=\"faRedo\"\r\n                    [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                    [buttonLabel]=\"\r\n                        (gradedStudentParticipation ? 'artemisApp.exerciseActions.practiceMode.practiceWithTemplate' : 'artemisApp.exerciseActions.practice') | artemisTranslate\r\n                    \"\r\n                    [buttonLoading]=\"startingPracticeMode\"\r\n                    [smallButton]=\"smallButtons\"\r\n                    [hideLabelMobile]=\"false\"\r\n                    (click)=\"startPractice(false)\"\r\n                ></button>\r\n                @if (gradedStudentParticipation) {\r\n                    <button\r\n                        jhi-exercise-action-button\r\n                        class=\"ms-2\"\r\n                        [buttonIcon]=\"faRedo\"\r\n                        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                        [buttonLabel]=\"'artemisApp.exerciseActions.practiceMode.practiceWithGradedParticipation' | artemisTranslate\"\r\n                        [buttonLoading]=\"startingPracticeMode\"\r\n                        [smallButton]=\"smallButtons\"\r\n                        [hideLabelMobile]=\"false\"\r\n                        (click)=\"startPractice(true)\"\r\n                    ></button>\r\n                }\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</ng-container>\r\n", "import { Component, Input, OnChanges, inject } from '@angular/core';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { faFolderOpen } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ExerciseActionButtonComponent } from '../exercise-action-button.component';\r\nimport { FeatureToggleDirective } from '../../feature-toggle/feature-toggle.directive';\r\nimport { RouterLink } from '@angular/router';\r\nimport { NgbPopover } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-open-code-editor-button',\r\n    templateUrl: './open-code-editor-button.component.html',\r\n    imports: [ExerciseActionButtonComponent, FeatureToggleDirective, RouterLink, NgbPopover, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class OpenCodeEditorButtonComponent implements OnChanges {\r\n    private participationService = inject(ParticipationService);\r\n\r\n    readonly FeatureToggle = FeatureToggle;\r\n\r\n    @Input()\r\n    loading = false;\r\n    @Input()\r\n    smallButtons: boolean;\r\n    @Input()\r\n    participations: ProgrammingExerciseStudentParticipation[];\r\n    @Input()\r\n    courseAndExerciseNavigationUrlSegment: any[];\r\n    @Input()\r\n    exercise: Exercise;\r\n    @Input()\r\n    hideLabelMobile = false;\r\n\r\n    courseAndExerciseNavigationUrl: string;\r\n    activeParticipation: ProgrammingExerciseStudentParticipation;\r\n    isPracticeMode = true;\r\n\r\n    // Icons\r\n    faFolderOpen = faFolderOpen;\r\n\r\n    ngOnChanges() {\r\n        this.courseAndExerciseNavigationUrl = this.courseAndExerciseNavigationUrlSegment.reduce((acc, segment) => `${acc}/${segment}`);\r\n        const shouldPreferPractice = this.participationService.shouldPreferPractice(this.exercise);\r\n        this.activeParticipation = this.participationService.getSpecificStudentParticipation(this.participations, shouldPreferPractice) ?? this.participations[0];\r\n    }\r\n\r\n    switchPracticeMode() {\r\n        this.isPracticeMode = !this.isPracticeMode;\r\n        this.activeParticipation = this.participationService.getSpecificStudentParticipation(this.participations!, this.isPracticeMode)!;\r\n    }\r\n}\r\n", "<ng-container>\r\n    @if (participations?.length && participations?.length === 1) {\r\n        <button\r\n            jhi-exercise-action-button\r\n            [id]=\"'open-exercise-' + exercise.id!\"\r\n            [buttonIcon]=\"faFolderOpen\"\r\n            class=\"open-code-editor\"\r\n            [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n            [buttonLabel]=\"'artemisApp.exerciseActions.openCodeEditor' | artemisTranslate\"\r\n            [buttonLoading]=\"loading\"\r\n            [smallButton]=\"smallButtons\"\r\n            [hideLabelMobile]=\"hideLabelMobile\"\r\n            [routerLink]=\"[courseAndExerciseNavigationUrl, participations[0].id]\"\r\n        ></button>\r\n    }\r\n    @if (participations?.length && participations.length! > 1) {\r\n        <button\r\n            jhi-exercise-action-button\r\n            [buttonIcon]=\"faFolderOpen\"\r\n            class=\"open-code-editor\"\r\n            [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n            [buttonLabel]=\"'artemisApp.exerciseActions.openCodeEditor' | artemisTranslate\"\r\n            [buttonLoading]=\"loading\"\r\n            [smallButton]=\"smallButtons\"\r\n            [hideLabelMobile]=\"hideLabelMobile\"\r\n            [ngbPopover]=\"popContent\"\r\n            [autoClose]=\"'outside'\"\r\n            placement=\"right auto\"\r\n        ></button>\r\n    }\r\n    <ng-template #popContent style=\"max-width: 660px\">\r\n        @if (participations && participations.length > 1) {\r\n            <div class=\"form-check form-switch\">\r\n                <input id=\"switchPracticeMode\" mdbCheckbox class=\"form-check-input\" type=\"checkbox\" [checked]=\"isPracticeMode\" (click)=\"switchPracticeMode()\" />\r\n                <label for=\"switchPracticeMode\" class=\"form-check-label\" jhiTranslate=\"artemisApp.exerciseActions.practiceMode.title\"></label>\r\n            </div>\r\n        }\r\n        <button\r\n            jhi-exercise-action-button\r\n            [id]=\"'open-exercise-popover-' + exercise.id!\"\r\n            [buttonIcon]=\"faFolderOpen\"\r\n            class=\"open-code-editor\"\r\n            [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n            [buttonLabel]=\"'artemisApp.exerciseActions.' + (isPracticeMode ? 'openPracticeCodeEditor' : 'openGradedCodeEditor') | artemisTranslate\"\r\n            [buttonLoading]=\"loading\"\r\n            [smallButton]=\"smallButtons\"\r\n            [hideLabelMobile]=\"hideLabelMobile\"\r\n            [routerLink]=\"[courseAndExerciseNavigationUrl, activeParticipation.id]\"\r\n        ></button>\r\n    </ng-template>\r\n</ng-container>\r\n", "import { Component, EventEmitter, HostBinding, Input, OnChanges, OnInit, Output, inject } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ExternalCloningService } from 'app/exercises/programming/shared/service/external-cloning.service';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { hasExerciseDueDatePassed, isResumeExerciseAvailable, isStartExerciseAvailable, isStartPracticeAvailable } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ArtemisQuizService } from 'app/shared/quiz/quiz.service';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { faDesktop, faEye, faFolderOpen, faPlayCircle, faRedo, faUsers } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseExerciseService } from 'app/exercises/shared/course-exercises/course-exercise.service';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_ATHENA, PROFILE_LOCALVC, PROFILE_THEIA } from 'app/app.constants';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { NgTemplateOutlet } from '@angular/common';\r\nimport { ExerciseActionButtonComponent } from 'app/shared/components/exercise-action-button.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FeatureToggleDirective } from 'app/shared/feature-toggle/feature-toggle.directive';\r\nimport { StartPracticeModeButtonComponent } from 'app/shared/components/start-practice-mode-button/start-practice-mode-button.component';\r\nimport { OpenCodeEditorButtonComponent } from 'app/shared/components/open-code-editor-button/open-code-editor-button.component';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { RequestFeedbackButtonComponent } from './request-feedback-button/request-feedback-button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    imports: [\r\n        NgTemplateOutlet,\r\n        ExerciseActionButtonComponent,\r\n        RouterLink,\r\n        NgbTooltip,\r\n        FeatureToggleDirective,\r\n        StartPracticeModeButtonComponent,\r\n        // TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution\r\n        // ExtensionPointDirective,\r\n        OpenCodeEditorButtonComponent,\r\n        CodeButtonComponent,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        RequestFeedbackButtonComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n    providers: [ExternalCloningService],\r\n    selector: 'jhi-exercise-details-student-actions',\r\n    styleUrls: ['../course-overview.scss'],\r\n    templateUrl: './exercise-details-student-actions.component.html',\r\n})\r\nexport class ExerciseDetailsStudentActionsComponent implements OnInit, OnChanges {\r\n    private alertService = inject(AlertService);\r\n    private courseExerciseService = inject(CourseExerciseService);\r\n    private participationService = inject(ParticipationService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    readonly FeatureToggle = FeatureToggle;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly InitializationState = InitializationState;\r\n    protected readonly ButtonType = ButtonType;\r\n\r\n    @Input() @HostBinding('class.col') equalColumns = true;\r\n    @Input() @HostBinding('class.col-auto') smallColumns = false;\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() courseId: number;\r\n    @Input() smallButtons: boolean;\r\n    @Input() examMode: boolean;\r\n    @Input() isGeneratingFeedback: boolean;\r\n\r\n    @Output() generatingFeedback: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    // extension points, see shared/extension-point\r\n    // TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution\r\n    // @ContentChild('overrideCodeAndOnlineEditorButton') overrideCodeAndOnlineEditorButton: TemplateRef<any>;\r\n\r\n    uninitializedQuiz: boolean;\r\n    quizNotStarted: boolean;\r\n    gradedParticipation?: StudentParticipation;\r\n    practiceParticipation?: StudentParticipation;\r\n    programmingExercise?: ProgrammingExercise;\r\n    isTeamAvailable: boolean;\r\n    hasRatedGradedResult: boolean;\r\n    beforeDueDate: boolean;\r\n    editorLabel?: string;\r\n    localVCEnabled = false;\r\n    athenaEnabled = false;\r\n    routerLink: string;\r\n    repositoryLink: string;\r\n\r\n    theiaEnabled = false;\r\n    theiaPortalURL: string;\r\n\r\n    // Icons\r\n    readonly faFolderOpen = faFolderOpen;\r\n    readonly faUsers = faUsers;\r\n    readonly faEye = faEye;\r\n    readonly faPlayCircle = faPlayCircle;\r\n    readonly faRedo = faRedo;\r\n    readonly faDesktop = faDesktop;\r\n\r\n    ngOnInit(): void {\r\n        if (this.exercise.type === ExerciseType.QUIZ) {\r\n            const quizExercise = this.exercise as QuizExercise;\r\n            this.uninitializedQuiz = ArtemisQuizService.isUninitialized(quizExercise);\r\n            this.quizNotStarted = ArtemisQuizService.notStarted(quizExercise);\r\n        } else if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n            this.programmingExercise = this.exercise as ProgrammingExercise;\r\n            this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                this.localVCEnabled = profileInfo.activeProfiles?.includes(PROFILE_LOCALVC);\r\n                this.athenaEnabled = profileInfo.activeProfiles?.includes(PROFILE_ATHENA);\r\n\r\n                // The online IDE is only available with correct SpringProfile and if it's enabled for this exercise\r\n                if (profileInfo.activeProfiles?.includes(PROFILE_THEIA) && this.programmingExercise) {\r\n                    this.theiaEnabled = true;\r\n\r\n                    // Set variables now, sanitize later on\r\n                    this.theiaPortalURL = profileInfo.theiaPortalURL ?? '';\r\n\r\n                    // Verify that Theia's portal URL is set\r\n                    if (this.theiaPortalURL === '') {\r\n                        this.theiaEnabled = false;\r\n                    }\r\n\r\n                    // Verify that the exercise allows the online IDE\r\n                    if (!this.programmingExercise.allowOnlineIde) {\r\n                        this.theiaEnabled = false;\r\n                    }\r\n\r\n                    // Verify that the exercise has a theia blueprint configured\r\n                    if (!this.programmingExercise.buildConfig?.theiaImage) {\r\n                        this.theiaEnabled = false;\r\n                    }\r\n                }\r\n            });\r\n        } else if (this.exercise.type === ExerciseType.MODELING) {\r\n            this.editorLabel = 'openModelingEditor';\r\n            this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                this.athenaEnabled = profileInfo.activeProfiles?.includes(PROFILE_ATHENA);\r\n            });\r\n        } else if (this.exercise.type === ExerciseType.TEXT) {\r\n            this.editorLabel = 'openTextEditor';\r\n            this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                this.athenaEnabled = profileInfo.activeProfiles?.includes(PROFILE_ATHENA);\r\n            });\r\n        } else if (this.exercise.type === ExerciseType.FILE_UPLOAD) {\r\n            this.editorLabel = 'uploadFile';\r\n        }\r\n\r\n        this.beforeDueDate = !this.exercise.dueDate || !hasExerciseDueDatePassed(this.exercise, this.gradedParticipation);\r\n    }\r\n\r\n    /**\r\n     * Viewing the team is only possible if it's a team exercise and the student is already assigned to a team.\r\n     */\r\n    ngOnChanges() {\r\n        this.updateParticipations();\r\n        this.isTeamAvailable = !!(this.exercise.teamMode && this.exercise.studentAssignedTeamIdComputed && this.exercise.studentAssignedTeamId);\r\n    }\r\n\r\n    startOnlineIDE() {\r\n        window.open(this.theiaPortalURL, '_blank');\r\n    }\r\n\r\n    receiveNewParticipation(newParticipation: StudentParticipation) {\r\n        const studentParticipations = this.exercise.studentParticipations ?? [];\r\n        if (studentParticipations.map((participation) => participation.id).includes(newParticipation.id)) {\r\n            this.exercise.studentParticipations = studentParticipations.map((participation) => (participation.id === newParticipation.id ? newParticipation : participation));\r\n        } else {\r\n            this.exercise.studentParticipations = [...studentParticipations, newParticipation];\r\n        }\r\n        this.updateParticipations();\r\n    }\r\n\r\n    updateParticipations() {\r\n        const studentParticipations = this.exercise.studentParticipations ?? [];\r\n        this.gradedParticipation = this.participationService.getSpecificStudentParticipation(studentParticipations, false);\r\n        this.practiceParticipation = this.participationService.getSpecificStudentParticipation(studentParticipations, true);\r\n\r\n        this.hasRatedGradedResult = !!this.gradedParticipation?.results?.some((result) => result.rated === true && result.assessmentType !== AssessmentType.AUTOMATIC_ATHENA);\r\n    }\r\n\r\n    /**\r\n     * Starting an exercise is not possible in the exam or if it's a team exercise and the student is not yet assigned a team, otherwise see exercise.utils ->\r\n     * isStartExerciseAvailable\r\n     */\r\n    isStartExerciseAvailable(): boolean {\r\n        const individualExerciseOrTeamAssigned = !!(!this.exercise.teamMode || this.exercise.studentAssignedTeamId);\r\n        return !this.examMode && individualExerciseOrTeamAssigned && isStartExerciseAvailable(this.exercise, this.gradedParticipation);\r\n    }\r\n\r\n    /**\r\n     * Resuming an exercise is not possible in the exam, otherwise see exercise.utils -> isResumeExerciseAvailable\r\n     */\r\n    isResumeExerciseAvailable(participation?: StudentParticipation): boolean {\r\n        return !this.examMode && isResumeExerciseAvailable(this.exercise, participation);\r\n    }\r\n\r\n    /**\r\n     * Practicing an exercise is not possible in the exam, otherwise see exercise.utils -> isStartPracticeAvailable\r\n     */\r\n    isStartPracticeAvailable(): boolean {\r\n        return !this.examMode && isStartPracticeAvailable(this.exercise, this.practiceParticipation);\r\n    }\r\n\r\n    startExercise() {\r\n        this.exercise.loading = true;\r\n        this.courseExerciseService\r\n            .startExercise(this.exercise.id!)\r\n            .pipe(finalize(() => (this.exercise.loading = false)))\r\n            .subscribe({\r\n                next: (participation) => {\r\n                    if (participation) {\r\n                        this.receiveNewParticipation(participation);\r\n                    }\r\n                    if (this.programmingExercise) {\r\n                        if (participation?.initializationState === InitializationState.INITIALIZED) {\r\n                            if (this.programmingExercise.allowOfflineIde) {\r\n                                this.alertService.success('artemisApp.exercise.personalRepositoryClone');\r\n                            } else {\r\n                                this.alertService.success('artemisApp.exercise.personalRepositoryOnline');\r\n                            }\r\n                        } else {\r\n                            this.alertService.error('artemisApp.exercise.startError');\r\n                        }\r\n                    }\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.exercise.startError');\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * resume the programming exercise\r\n     */\r\n    resumeProgrammingExercise(testRun: boolean) {\r\n        this.exercise.loading = true;\r\n        const participation = testRun ? this.practiceParticipation : this.gradedParticipation;\r\n        this.courseExerciseService\r\n            .resumeProgrammingExercise(this.exercise.id!, participation!.id!)\r\n            .pipe(finalize(() => (this.exercise.loading = false)))\r\n            .subscribe({\r\n                next: (resumedParticipation: StudentParticipation) => {\r\n                    if (resumedParticipation) {\r\n                        // Otherwise the client would think that all results are loaded, but there would not be any (=> no graded result).\r\n                        resumedParticipation.results = participation ? participation.results : [];\r\n                        const replacedIndex = this.exercise.studentParticipations!.indexOf(participation!);\r\n                        this.exercise.studentParticipations![replacedIndex] = resumedParticipation;\r\n                        this.updateParticipations();\r\n                        this.alertService.success('artemisApp.exercise.resumeProgrammingExercise');\r\n                    }\r\n                },\r\n                error: (error) => {\r\n                    this.alertService.error(`artemisApp.${error.error.entityName}.errors.${error.error.errorKey}`);\r\n                },\r\n            });\r\n    }\r\n\r\n    get isBeforeStartDateAndStudent(): boolean {\r\n        return !this.exercise.isAtLeastTutor && !!this.exercise.startDate && dayjs().isBefore(this.exercise.startDate);\r\n    }\r\n\r\n    /**\r\n     * Display the 'open code editor' or 'code' buttons if\r\n     * - the participation is initialized (build plan exists, this is always the case during an exam), or\r\n     * - the participation is inactive (build plan cleaned up), but can not be resumed (e.g. because we're after the due date)\r\n     *\r\n     * for all conditions it is important that the repository is set\r\n     *\r\n     * For course exercises, an initialized practice participation should only be displayed if it's not possible to start a new graded participation.\r\n     * For exam exercises, only one active participation can exist, so this should be shown.\r\n     */\r\n    public shouldDisplayIDEButtons(): boolean {\r\n        if (!this.isRepositoryUriSet()) {\r\n            return false;\r\n        }\r\n        const shouldPreferPractice = this.participationService.shouldPreferPractice(this.exercise);\r\n        const activePracticeParticipation = this.practiceParticipation?.initializationState === InitializationState.INITIALIZED && (shouldPreferPractice || this.examMode);\r\n        const activeGradedParticipation = this.gradedParticipation?.initializationState === InitializationState.INITIALIZED;\r\n        const inactiveGradedParticipation =\r\n            !!this.gradedParticipation?.initializationState &&\r\n            [InitializationState.INACTIVE, InitializationState.FINISHED].includes(this.gradedParticipation.initializationState) &&\r\n            !isStartExerciseAvailable(this.exercise, this.gradedParticipation);\r\n\r\n        return activePracticeParticipation || activeGradedParticipation || inactiveGradedParticipation;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the repository uri of the active participation is set\r\n     * We don't want to show buttons that would interact with the repository if the repository is not set\r\n     */\r\n    private isRepositoryUriSet(): boolean {\r\n        const participations = this.exercise.studentParticipations ?? [];\r\n        const activeParticipation: ProgrammingExerciseStudentParticipation = this.participationService.getSpecificStudentParticipation(participations, false) ?? participations[0];\r\n        return !!activeParticipation?.repositoryUri;\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the team that the student is assigned to (only applicable to team-based exercises)\r\n     *\r\n     * @return {assignedTeamId}\r\n     */\r\n    get assignedTeamId(): number | undefined {\r\n        const participations = this.exercise.studentParticipations;\r\n        return participations?.length ? participations[0].team?.id : this.exercise.studentAssignedTeamId;\r\n    }\r\n}\r\n", "<div>\r\n    @switch (exercise.type) {\r\n        <!-- QUIZ EXERCISE ACTIONS START -->\r\n        @case (ExerciseType.QUIZ) {\r\n            <div class=\"btn-group\">\r\n                @if (isStartPracticeAvailable()) {\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"quizActionButton\"\r\n                        [ngTemplateOutletContext]=\"{ $implicit: { icon: faRedo, label: 'artemisApp.exerciseActions.practice', quizMode: 'practice', hideLabelMobile: false } }\"\r\n                    />\r\n                }\r\n                @if (quizNotStarted || gradedParticipation?.initializationState === InitializationState.INITIALIZED) {\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"quizActionButton\"\r\n                        [ngTemplateOutletContext]=\"{\r\n                            $implicit: {\r\n                                id: 'open-exercise-' + exercise.id,\r\n                                icon: faPlayCircle,\r\n                                label: 'artemisApp.exerciseActions.openQuiz',\r\n                                quizMode: 'live',\r\n                                hideLabelMobile: false,\r\n                            },\r\n                        }\"\r\n                    />\r\n                }\r\n                @if (uninitializedQuiz) {\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"quizActionButton\"\r\n                        [ngTemplateOutletContext]=\"{\r\n                            $implicit: {\r\n                                id: 'start-exercise-' + exercise.id,\r\n                                icon: faPlayCircle,\r\n                                label: 'artemisApp.exerciseActions.startQuiz',\r\n                                quizMode: 'live',\r\n                                hideLabelMobile: false,\r\n                            },\r\n                        }\"\r\n                    />\r\n                }\r\n                @if (gradedParticipation?.initializationState === InitializationState.FINISHED && !gradedParticipation?.results?.length) {\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"quizActionButton\"\r\n                        [ngTemplateOutletContext]=\"{\r\n                            $implicit: {\r\n                                icon: faEye,\r\n                                label: 'artemisApp.exerciseActions.viewSubmissions',\r\n                                quizMode: 'live',\r\n                                outlined: true,\r\n                            },\r\n                        }\"\r\n                    />\r\n                }\r\n                @if (gradedParticipation?.results?.length) {\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"quizActionButton\"\r\n                        [ngTemplateOutletContext]=\"{\r\n                            $implicit: {\r\n                                icon: faEye,\r\n                                label: 'artemisApp.exerciseActions.viewResults',\r\n                                quizMode: 'live',\r\n                                outlined: true,\r\n                            },\r\n                        }\"\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n        <!-- QUIZ EXERCISE ACTIONS END -->\r\n        <!-- PROGRAMMING EXERCISE ACTIONS START -->\r\n        @case (ExerciseType.PROGRAMMING) {\r\n            <div class=\"d-flex flex-wrap gap-1\">\r\n                @if (isTeamAvailable) {\r\n                    <button\r\n                        class=\"view-team\"\r\n                        jhi-exercise-action-button\r\n                        [buttonIcon]=\"faUsers\"\r\n                        [buttonLabel]=\"'artemisApp.exerciseActions.viewTeam' | artemisTranslate\"\r\n                        [smallButton]=\"smallButtons\"\r\n                        [hideLabelMobile]=\"true\"\r\n                        [routerLink]=\"['/courses', courseId, 'exercises', exercise.id, 'teams', assignedTeamId]\"\r\n                    ></button>\r\n                }\r\n                @if (isStartExerciseAvailable()) {\r\n                    <span tabindex=\"0\" [ngbTooltip]=\"isBeforeStartDateAndStudent ? ('artemisApp.exerciseActions.startExerciseBeforeStartDate' | artemisTranslate) : ''\">\r\n                        <button\r\n                            [id]=\"'start-exercise-' + exercise.id\"\r\n                            class=\"start-exercise\"\r\n                            jhi-exercise-action-button\r\n                            [buttonIcon]=\"faPlayCircle\"\r\n                            [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                            [buttonLabel]=\"'artemisApp.exerciseActions.startExercise' | artemisTranslate\"\r\n                            [buttonLoading]=\"!!exercise.loading\"\r\n                            [smallButton]=\"smallButtons\"\r\n                            [hideLabelMobile]=\"false\"\r\n                            [overwriteDisabled]=\"isBeforeStartDateAndStudent\"\r\n                            (click)=\"startExercise()\"\r\n                        ></button>\r\n                    </span>\r\n                }\r\n                @if (isStartPracticeAvailable()) {\r\n                    <jhi-start-practice-mode-button\r\n                        [id]=\"'start-practice-' + exercise.id\"\r\n                        class=\"start-practice\"\r\n                        [smallButtons]=\"smallButtons\"\r\n                        [exercise]=\"exercise\"\r\n                        (practiceModeStarted)=\"receiveNewParticipation($event)\"\r\n                    />\r\n                }\r\n                <!-- TODO: The exam mode reuses the whole component at the moment. We need the code button but not the open\r\n                    code editor button. We should think about defining a component that contains only the code button. -->\r\n                @if (shouldDisplayIDEButtons()) {\r\n                    <!-- TODO: the extension point for Orion does not work with Angular 19, we need to find a different solution -->\r\n                    <!--                    <ng-container *jhiExtensionPoint=\"overrideCodeAndOnlineEditorButton; context: { exercise: exercise }\">-->\r\n                    @if (!examMode && programmingExercise?.allowOnlineEditor) {\r\n                        <jhi-open-code-editor-button\r\n                            [loading]=\"!!exercise.loading\"\r\n                            [smallButtons]=\"smallButtons\"\r\n                            [participations]=\"exercise.studentParticipations!\"\r\n                            [courseAndExerciseNavigationUrlSegment]=\"['/courses', courseId, 'exercises', 'programming-exercises', exercise.id, 'code-editor']\"\r\n                            [exercise]=\"exercise\"\r\n                            [hideLabelMobile]=\"true\"\r\n                        />\r\n                    }\r\n                    @if (programmingExercise?.allowOfflineIde) {\r\n                        <jhi-code-button\r\n                            [loading]=\"!!exercise.loading\"\r\n                            [smallButtons]=\"smallButtons\"\r\n                            [participations]=\"exercise.studentParticipations!\"\r\n                            [exercise]=\"exercise\"\r\n                            [routerLinkForRepositoryView]=\"['/courses', courseId, 'exercises', exercise.id!, 'repository', exercise.studentParticipations![0].id!]\"\r\n                            [hideLabelMobile]=\"true\"\r\n                            [repositoryUri]=\"''\"\r\n                        />\r\n                    }\r\n                    @if (theiaEnabled) {\r\n                        <a class=\"btn btn-primary\" [class.btn-sm]=\"smallButtons\" (click)=\"startOnlineIDE()\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <fa-icon [icon]=\"faDesktop\" [fixedWidth]=\"true\" />\r\n                            <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exerciseActions.openOnlineIDE\"></span>\r\n                        </a>\r\n                    }\r\n                    @if (exercise.allowFeedbackRequests && gradedParticipation && exercise.type === ExerciseType.PROGRAMMING) {\r\n                        <jhi-request-feedback-button [exercise]=\"exercise\" [smallButtons]=\"smallButtons\" />\r\n                    }\r\n                    <!--                    </ng-container>-->\r\n                }\r\n                <!-- NOTE: we use the same logic 'isStartExerciseAvailable' in ngIf as above because start and resume are not always possible -->\r\n                @if (\r\n                    (gradedParticipation?.initializationState === InitializationState.INACTIVE || gradedParticipation?.initializationState === InitializationState.FINISHED) &&\r\n                    isResumeExerciseAvailable(gradedParticipation)\r\n                ) {\r\n                    <button\r\n                        [id]=\"'resume-exercise-' + exercise.id\"\r\n                        jhi-exercise-action-button\r\n                        [buttonIcon]=\"faPlayCircle\"\r\n                        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                        [buttonLabel]=\"'artemisApp.exerciseActions.resumeExercise' | artemisTranslate\"\r\n                        [buttonLoading]=\"!!exercise.loading\"\r\n                        [smallButton]=\"smallButtons\"\r\n                        [hideLabelMobile]=\"false\"\r\n                        (click)=\"resumeProgrammingExercise(false)\"\r\n                    ></button>\r\n                }\r\n                @if (\r\n                    (practiceParticipation?.initializationState === InitializationState.INACTIVE || practiceParticipation?.initializationState === InitializationState.FINISHED) &&\r\n                    isResumeExerciseAvailable(practiceParticipation)\r\n                ) {\r\n                    <button\r\n                        [id]=\"'resume-practice-exercise-' + exercise.id\"\r\n                        jhi-exercise-action-button\r\n                        [buttonIcon]=\"faPlayCircle\"\r\n                        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                        [buttonLabel]=\"'artemisApp.exerciseActions.resumeExercisePractice' | artemisTranslate\"\r\n                        [buttonLoading]=\"!!exercise.loading\"\r\n                        [smallButton]=\"smallButtons\"\r\n                        [hideLabelMobile]=\"false\"\r\n                        (click)=\"resumeProgrammingExercise(true)\"\r\n                    ></button>\r\n                }\r\n            </div>\r\n        }\r\n        <!-- PROGRAMMING EXERCISE ACTIONS END -->\r\n        <!-- MODELING/TEXT/FILE UPLOAD EXERCISE ACTIONS START -->\r\n        @default {\r\n            <div class=\"btn-group gap-1\">\r\n                @if (isTeamAvailable) {\r\n                    <button\r\n                        class=\"view-team\"\r\n                        jhi-exercise-action-button\r\n                        [buttonIcon]=\"faUsers\"\r\n                        [buttonLabel]=\"'artemisApp.exerciseActions.viewTeam' | artemisTranslate\"\r\n                        [smallButton]=\"smallButtons\"\r\n                        [hideLabelMobile]=\"true\"\r\n                        [routerLink]=\"['/courses', courseId, 'exercises', exercise.id, 'teams', assignedTeamId]\"\r\n                    ></button>\r\n                }\r\n                <span tabindex=\"0\" [ngbTooltip]=\"isBeforeStartDateAndStudent ? ('artemisApp.exerciseActions.startExerciseBeforeStartDate' | artemisTranslate) : ''\">\r\n                    @if (!gradedParticipation && isStartExerciseAvailable()) {\r\n                        <button\r\n                            [id]=\"'start-exercise-' + exercise.id\"\r\n                            class=\"start-exercise\"\r\n                            jhi-exercise-action-button\r\n                            [buttonIcon]=\"faPlayCircle\"\r\n                            [buttonLabel]=\"'artemisApp.exerciseActions.startExercise' | artemisTranslate\"\r\n                            [buttonLoading]=\"!!exercise.loading\"\r\n                            [smallButton]=\"smallButtons\"\r\n                            [hideLabelMobile]=\"false\"\r\n                            [overwriteDisabled]=\"isBeforeStartDateAndStudent\"\r\n                            (click)=\"startExercise()\"\r\n                        ></button>\r\n                    }\r\n                </span>\r\n                @if (\r\n                    (gradedParticipation?.initializationState === InitializationState.INITIALIZED && this.beforeDueDate) ||\r\n                    gradedParticipation?.initializationState === InitializationState.FINISHED\r\n                ) {\r\n                    <button\r\n                        [id]=\"'open-exercise-' + exercise.id\"\r\n                        class=\"open-exercise\"\r\n                        jhi-exercise-action-button\r\n                        [buttonIcon]=\"faFolderOpen\"\r\n                        [buttonLabel]=\"\r\n                            'artemisApp.exerciseActions.' +\r\n                                (gradedParticipation?.initializationState === InitializationState.INITIALIZED || (beforeDueDate && !hasRatedGradedResult)\r\n                                    ? editorLabel\r\n                                    : hasRatedGradedResult\r\n                                      ? 'viewResults'\r\n                                      : 'viewSubmissions') | artemisTranslate\r\n                        \"\r\n                        [outlined]=\"(!beforeDueDate || hasRatedGradedResult) && gradedParticipation?.initializationState === InitializationState.FINISHED\"\r\n                        [buttonLoading]=\"!!exercise.loading\"\r\n                        [smallButton]=\"smallButtons\"\r\n                        [hideLabelMobile]=\"false\"\r\n                        [routerLink]=\"['/courses', courseId, 'exercises', exercise.type + '-exercises', exercise.id, 'participate', gradedParticipation!.id]\"\r\n                    ></button>\r\n                    @if (exercise.allowFeedbackRequests && athenaEnabled && (exercise.type === ExerciseType.TEXT || exercise.type === ExerciseType.MODELING) && beforeDueDate) {\r\n                        <jhi-request-feedback-button\r\n                            [exercise]=\"exercise\"\r\n                            [smallButtons]=\"smallButtons\"\r\n                            [isGeneratingFeedback]=\"isGeneratingFeedback\"\r\n                            (generatingFeedback)=\"this.isGeneratingFeedback = true\"\r\n                            [isSubmitted]=\"gradedParticipation?.submissions?.last()?.submitted || false\"\r\n                        />\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n        <!-- MODELING/TEXT/FILE UPLOAD EXERCISE ACTIONS END -->\r\n    }\r\n</div>\r\n\r\n<ng-template #quizActionButton let-button>\r\n    <button\r\n        jhi-exercise-action-button\r\n        [id]=\"button.id\"\r\n        [buttonIcon]=\"button.icon\"\r\n        [buttonLabel]=\"button.label | artemisTranslate\"\r\n        [buttonLoading]=\"!!exercise.loading\"\r\n        [smallButton]=\"smallButtons\"\r\n        [hideLabelMobile]=\"button.hideLabelMobile\"\r\n        [outlined]=\"button.outlined\"\r\n        [routerLink]=\"['/courses', courseId, 'exercises', 'quiz-exercises', exercise.id, button.quizMode]\"\r\n    ></button>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "startPractice", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faRedo", "FeatureToggle", "ProgrammingExercises", "\u0275\u0275pipeBind1", "startingPracticeMode", "smallButtons", "\u0275\u0275template", "StartPracticeModeButtonComponent_ng_template_5_Conditional_7_Template", "_r1", "StartPracticeModeButtonComponent_ng_template_5_Conditional_13_Template", "\u0275\u0275conditional", "gradedStudentParticipation", "StartPracticeModeButtonComponent", "courseExerciseService", "inject", "CourseExerciseService", "alertService", "AlertService", "participationService", "ParticipationService", "exercise", "practiceModeStarted", "EventEmitter", "ngOnInit", "getSpecificStudentParticipation", "studentParticipations", "useGradedParticipation", "id", "pipe", "finalize", "subscribe", "next", "participation", "type", "ExerciseType", "PROGRAMMING", "initializationState", "InitializationState", "INITIALIZED", "allowOfflineIde", "success", "error", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "StartPracticeModeButtonComponent_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "popContent_r4", "ExerciseActionButtonComponent", "FeatureToggleDirective", "NgbPopover", "TranslateDirective", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "id", "faFolderOpen", "FeatureToggle", "ProgrammingExercises", "\u0275\u0275pipeBind1", "loading", "smallButtons", "hideLabelMobile", "\u0275\u0275pureFunction2", "_c0", "courseAndExerciseNavigationUrl", "participations", "popContent_r2", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "switchPracticeMode", "\u0275\u0275elementEnd", "isPracticeMode", "\u0275\u0275template", "OpenCodeEditorButtonComponent_ng_template_4_Conditional_1_Template", "\u0275\u0275conditional", "length", "activeParticipation", "OpenCodeEditorButtonComponent", "participationService", "inject", "ParticipationService", "courseAndExerciseNavigationUrlSegment", "ngOnChanges", "reduce", "acc", "segment", "shouldPreferPractice", "getSpecificStudentParticipation", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "OpenCodeEditorButtonComponent_Conditional_2_Template", "OpenCodeEditorButtonComponent_Conditional_3_Template", "OpenCodeEditorButtonComponent_ng_template_4_Template", "\u0275\u0275templateRefExtractor", "ExerciseActionButtonComponent", "FeatureToggleDirective", "RouterLink", "NgbPopover", "TranslateDirective", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementContainer", "\u0275\u0275advance", "\u0275\u0275property", "quizActionButton_r2", "\u0275\u0275pureFunction1", "_c1", "_c0", "ctx_r0", "faRedo", "\u0275\u0275pureFunction2", "_c2", "exercise", "id", "faPlayCircle", "_c3", "_c4", "faEye", "_c5", "\u0275\u0275elementStart", "\u0275\u0275template", "ExerciseDetailsStudentActionsComponent_Case_2_Conditional_3_Template", "ExerciseDetailsStudentActionsComponent_Case_2_Conditional_4_Template", "ExerciseDetailsStudentActionsComponent_Case_2_Conditional_5_Template", "ExerciseDetailsStudentActionsComponent_Case_2_Conditional_6_Template", "ExerciseDetailsStudentActionsComponent_Case_2_Conditional_7_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "isStartPracticeAvailable", "quizNotStarted", "gradedParticipation", "initializationState", "InitializationState", "INITIALIZED", "uninitializedQuiz", "FINISHED", "results", "length", "\u0275\u0275element", "faUsers", "\u0275\u0275pipeBind1", "smallButtons", "\u0275\u0275pureFunction3", "_c6", "courseId", "assignedTeamId", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "startExercise", "isBeforeStartDateAndStudent", "FeatureToggle", "ProgrammingExercises", "loading", "$event", "_r4", "receiveNewParticipation", "studentParticipations", "_c7", "_c8", "_r5", "startOnlineIDE", "\u0275\u0275classProp", "faDesktop", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_6_Conditional_3_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_6_Conditional_4_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_6_Conditional_5_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_6_Conditional_6_Template", "examMode", "programmingExercise", "allowOnlineEditor", "allowOfflineIde", "theiaEnabled", "allowFeedbackRequests", "type", "ExerciseType", "PROGRAMMING", "_r6", "resumeProgrammingExercise", "_r7", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_3_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_4_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_5_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_6_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_7_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Conditional_8_Template", "isTeamAvailable", "isStartExerciseAvailable", "shouldDisplayIDEButtons", "INACTIVE", "isResumeExerciseAvailable", "practiceParticipation", "_r8", "_r9", "isGeneratingFeedback", "submissions", "tmp_7_0", "last", "submitted", "ExerciseDetailsStudentActionsComponent_Case_4_Conditional_9_Conditional_4_Template", "faFolderOpen", "beforeDueDate", "hasRatedGradedResult", "editorLabel", "\u0275\u0275pureFunction4", "_c9", "athenaEnabled", "TEXT", "MODELING", "ExerciseDetailsStudentActionsComponent_Case_4_Conditional_3_Template", "ExerciseDetailsStudentActionsComponent_Case_4_Conditional_7_Template", "ExerciseDetailsStudentActionsComponent_Case_4_Conditional_9_Template", "button_r10", "icon", "label", "hideLabelMobile", "outlined", "_c10", "quizMode", "ExerciseDetailsStudentActionsComponent", "alertService", "inject", "AlertService", "courseExerciseService", "CourseExerciseService", "participationService", "ParticipationService", "profileService", "ProfileService", "ButtonType", "equalColumns", "smallColumns", "generatingFeedback", "EventEmitter", "localVCEnabled", "routerLink", "repositoryLink", "theiaPortalURL", "ngOnInit", "QUIZ", "quizExercise", "ArtemisQuizService", "isUninitialized", "notStarted", "getProfileInfo", "subscribe", "profileInfo", "activeProfiles", "includes", "PROFILE_LOCALVC", "PROFILE_ATHENA", "PROFILE_THEIA", "allowOnlineIde", "buildConfig", "theiaImage", "FILE_UPLOAD", "dueDate", "hasExerciseDueDatePassed", "ngOnChanges", "updateParticipations", "teamMode", "studentAssignedTeamIdComputed", "studentAssignedTeamId", "window", "open", "newParticipation", "map", "participation", "getSpecificStudentParticipation", "some", "result", "rated", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "individualExerciseOrTeamAssigned", "pipe", "finalize", "next", "success", "error", "testRun", "resumedParticipation", "replacedIndex", "indexOf", "entityName", "errorKey", "isAtLeastTutor", "startDate", "dayjs", "isBefore", "isRepositoryUriSet", "shouldPreferPractice", "activePracticeParticipation", "activeGradedParticipation", "inactiveGradedParticipation", "participations", "repositoryUri", "team", "selectors", "hostVars", "hostBindings", "rf", "ctx", "ExternalCloningService", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "ExerciseDetailsStudentActionsComponent_Case_2_Template", "ExerciseDetailsStudentActionsComponent_Case_3_Template", "ExerciseDetailsStudentActionsComponent_Case_4_Template", "ExerciseDetailsStudentActionsComponent_ng_template_7_Template", "\u0275\u0275templateRefExtractor", "tmp_1_0", "NgTemplateOutlet", "ExerciseActionButtonComponent", "RouterLink", "NgbTooltip", "FeatureToggleDirective", "StartPracticeModeButtonComponent", "OpenCodeEditorButtonComponent", "CodeButtonComponent", "FaIconComponent", "TranslateDirective", "RequestFeedbackButtonComponent", "ArtemisTranslatePipe", "styles"]
}
