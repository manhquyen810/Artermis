{
  "version": 3,
  "sources": ["src/main/webapp/app/core/language/language.helper.ts"],
  "sourcesContent": ["import { Injectable, Renderer2, RendererFactory2, inject } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { LANGUAGES } from './language.constants';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { captureException } from '@sentry/angular';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\nimport { LocaleConversionService } from 'app/shared/service/locale-conversion.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JhiLanguageHelper {\r\n    private translateService = inject(TranslateService);\r\n    private localeConversionService = inject(LocaleConversionService);\r\n    private titleService = inject(Title);\r\n    private router = inject(Router);\r\n    private sessionStorage = inject(SessionStorageService);\r\n\r\n    private renderer: Renderer2;\r\n    private _language: BehaviorSubject<string>;\r\n\r\n    constructor() {\r\n        const rootRenderer = inject(RendererFactory2);\r\n\r\n        this._language = new BehaviorSubject<string>(this.translateService.currentLang);\r\n        this.renderer = rootRenderer.createRenderer(document.querySelector('html'), null);\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * Get all supported ISO_639-1 language codes.\r\n     */\r\n    getAll(): string[] {\r\n        return LANGUAGES;\r\n    }\r\n\r\n    get language(): Observable<string> {\r\n        return this._language.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Update the window title using a value from the following order:\r\n     * 1. The function's titleKey parameter\r\n     * 2. The return value of {@link getPageTitle}, extracting it from the router state or a fallback value\r\n     * If the translation doesn't exist, a Sentry exception is thrown.\r\n     */\r\n    updateTitle(titleKey?: string) {\r\n        if (!titleKey) {\r\n            titleKey = this.getPageTitle(this.router.routerState.snapshot.root);\r\n        }\r\n\r\n        this.translateService.get(titleKey).subscribe((title) => {\r\n            if (title) {\r\n                this.titleService.setTitle(title);\r\n            } else {\r\n                captureException(new Error(`Translation key '${titleKey}' for page title not found`));\r\n            }\r\n        });\r\n    }\r\n\r\n    private init() {\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            const languageKey = this.translateService.currentLang;\r\n            this._language.next(languageKey);\r\n            this.localeConversionService.locale = languageKey;\r\n            this.sessionStorage.store('locale', languageKey);\r\n            this.renderer.setAttribute(document.querySelector('html'), 'lang', this.translateService.currentLang);\r\n            this.updateTitle();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the current page's title key based on the router state.\r\n     * Fallback to 'global.title' when no key is found.\r\n     * @param routeSnapshot The snapshot of the current route\r\n     */\r\n    getPageTitle(routeSnapshot: ActivatedRouteSnapshot) {\r\n        let title: string = routeSnapshot.data?.['pageTitle'] || 'global.title';\r\n        if (routeSnapshot.firstChild) {\r\n            title = this.getPageTitle(routeSnapshot.firstChild) || title;\r\n        }\r\n        return title;\r\n    }\r\n\r\n    public determinePreferredLanguage(): string {\r\n        const navigator = this.getNavigatorReference();\r\n        // In the languages array the languages are ordered by preference with the most preferred language first.\r\n        for (let i = 0; i < navigator.languages.length; i++) {\r\n            // return the language with the highest preference\r\n            if (navigator.languages[i].startsWith('en')) {\r\n                return 'en';\r\n            }\r\n            if (navigator.languages[i].startsWith('de')) {\r\n                return 'de';\r\n            }\r\n        }\r\n        // english as fallback\r\n        return 'en';\r\n    }\r\n\r\n    public getNavigatorReference(): Navigator {\r\n        return navigator;\r\n    }\r\n}\r\n"],
  "mappings": "mVAYA,IAAaA,GAAiB,IAAA,CAAxB,MAAOA,CAAiB,CAClBC,iBAAmBC,EAAOC,CAAgB,EAC1CC,wBAA0BF,EAAOG,CAAuB,EACxDC,aAAeJ,EAAOK,CAAK,EAC3BC,OAASN,EAAOO,CAAM,EACtBC,eAAiBR,EAAOS,CAAqB,EAE7CC,SACAC,UAERC,aAAA,CACI,IAAMC,EAAeb,EAAOc,CAAgB,EAE5C,KAAKH,UAAY,IAAII,EAAwB,KAAKhB,iBAAiBiB,WAAW,EAC9E,KAAKN,SAAWG,EAAaI,eAAeC,SAASC,cAAc,MAAM,EAAG,IAAI,EAChF,KAAKC,KAAI,CACb,CAKAC,QAAM,CACF,OAAOC,CACX,CAEA,IAAIC,UAAQ,CACR,OAAO,KAAKZ,UAAUa,aAAY,CACtC,CAQAC,YAAYC,EAAiB,CACpBA,IACDA,EAAW,KAAKC,aAAa,KAAKrB,OAAOsB,YAAYC,SAASC,IAAI,GAGtE,KAAK/B,iBAAiBgC,IAAIL,CAAQ,EAAEM,UAAWC,GAAS,CAChDA,EACA,KAAK7B,aAAa8B,SAASD,CAAK,EAEhCE,EAAiB,IAAIC,MAAM,oBAAoBV,CAAQ,4BAA4B,CAAC,CAE5F,CAAC,CACL,CAEQN,MAAI,CACR,KAAKrB,iBAAiBsC,aAAaL,UAAU,IAAK,CAC9C,IAAMM,EAAc,KAAKvC,iBAAiBiB,YAC1C,KAAKL,UAAU4B,KAAKD,CAAW,EAC/B,KAAKpC,wBAAwBsC,OAASF,EACtC,KAAK9B,eAAeiC,MAAM,SAAUH,CAAW,EAC/C,KAAK5B,SAASgC,aAAaxB,SAASC,cAAc,MAAM,EAAG,OAAQ,KAAKpB,iBAAiBiB,WAAW,EACpG,KAAKS,YAAW,CACpB,CAAC,CACL,CAOAE,aAAagB,EAAqC,CAC9C,IAAIV,EAAgBU,EAAcC,MAAO,WAAgB,eACzD,OAAID,EAAcE,aACdZ,EAAQ,KAAKN,aAAagB,EAAcE,UAAU,GAAKZ,GAEpDA,CACX,CAEOa,4BAA0B,CAC7B,IAAMC,EAAY,KAAKC,sBAAqB,EAE5C,QAASC,EAAI,EAAGA,EAAIF,EAAUG,UAAUC,OAAQF,IAAK,CAEjD,GAAIF,EAAUG,UAAUD,CAAC,EAAEG,WAAW,IAAI,EACtC,MAAO,KAEX,GAAIL,EAAUG,UAAUD,CAAC,EAAEG,WAAW,IAAI,EACtC,MAAO,IAEf,CAEA,MAAO,IACX,CAEOJ,uBAAqB,CACxB,OAAOD,SACX,4CA3FSjD,EAAiB,6BAAjBA,EAAiBuD,QAAjBvD,EAAiBwD,UAAAC,WADJ,MAAM,CAAA,SACnBzD,CAAiB,GAAA",
  "names": ["JhiLanguageHelper", "translateService", "inject", "TranslateService", "localeConversionService", "LocaleConversionService", "titleService", "Title", "router", "Router", "sessionStorage", "SessionStorageService", "renderer", "_language", "constructor", "rootRenderer", "RendererFactory2", "BehaviorSubject", "currentLang", "createRenderer", "document", "querySelector", "init", "getAll", "LANGUAGES", "language", "asObservable", "updateTitle", "titleKey", "getPageTitle", "routerState", "snapshot", "root", "get", "subscribe", "title", "setTitle", "captureException", "Error", "onLangChange", "languageKey", "next", "locale", "store", "setAttribute", "routeSnapshot", "data", "firstChild", "determinePreferredLanguage", "navigator", "getNavigatorReference", "i", "languages", "length", "startsWith", "factory", "\u0275fac", "providedIn"]
}
