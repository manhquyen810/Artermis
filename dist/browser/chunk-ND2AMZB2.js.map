{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/metis/posting-thread/posting-thread.component.ts", "src/main/webapp/app/shared/metis/posting-thread/posting-thread.component.html"],
  "sourcesContent": ["import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, inject, input, output } from '@angular/core';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { PostComponent } from '../post/post.component';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\n\r\n@Component({\r\n    selector: 'jhi-posting-thread',\r\n    templateUrl: './posting-thread.component.html',\r\n    styleUrls: ['../metis.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [PostComponent],\r\n})\r\nexport class PostingThreadComponent {\r\n    @Input() lastReadDate?: dayjs.Dayjs;\r\n    @Input() readOnlyMode = false;\r\n    @Input() post: Post;\r\n    @Input() showAnswers: boolean;\r\n    @Input() isCommunicationPage: boolean;\r\n    @Input() showChannelReference?: boolean;\r\n    @Input() hasChannelModerationRights = false;\r\n    @Output() openThread = new EventEmitter<Post>();\r\n    @Input() isConsecutive: boolean | undefined = false;\r\n    forwardedPosts = input<Post[]>([]);\r\n    forwardedAnswerPosts = input<AnswerPost[]>([]);\r\n    readonly onNavigateToPost = output<Posting>();\r\n\r\n    elementRef = inject(ElementRef);\r\n\r\n    onTriggerNavigateToPost(post: Posting) {\r\n        this.onNavigateToPost.emit(post);\r\n    }\r\n}\r\n", "<div class=\"mx-0\">\r\n    <jhi-post\r\n        [readOnlyMode]=\"readOnlyMode\"\r\n        [lastReadDate]=\"lastReadDate\"\r\n        [posting]=\"post\"\r\n        [isConsecutive]=\"isConsecutive || false\"\r\n        [forwardedPosts]=\"forwardedPosts() || []\"\r\n        [forwardedAnswerPosts]=\"forwardedAnswerPosts() || []\"\r\n        [showAnswers]=\"showAnswers\"\r\n        [isCommunicationPage]=\"isCommunicationPage\"\r\n        [showChannelReference]=\"showChannelReference\"\r\n        [hasChannelModerationRights]=\"hasChannelModerationRights\"\r\n        (openThread)=\"openThread.emit(post)\"\r\n        (onNavigateToPost)=\"onTriggerNavigateToPost($event)\"\r\n    />\r\n</div>\r\n@if (!isCommunicationPage) {\r\n    <div class=\"post-separation-line mb-2\"></div>\r\n}\r\n"],
  "mappings": "4OCiBIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;CAAA,GDJA,IAAaE,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACtBC,aACAC,aAAe,GACfC,KACAC,YACAC,oBACAC,qBACAC,2BAA6B,GAC5BC,WAAa,IAAIC,EAClBC,cAAqC,GAC9CC,eAAiBC,EAAc,CAAA,CAAE,EACjCC,qBAAuBD,EAAoB,CAAA,CAAE,EACpCE,iBAAmBC,EAAM,EAElCC,WAAaC,EAAOC,CAAU,EAE9BC,wBAAwBhB,EAAa,CACjC,KAAKW,iBAAiBM,KAAKjB,CAAI,CACnC,4CAlBSH,EAAsB,2BAAtBA,EAAsBqB,UAAA,CAAA,CAAA,oBAAA,CAAA,EAAAC,OAAA,CAAArB,aAAA,eAAAC,aAAA,eAAAC,KAAA,OAAAC,YAAA,cAAAC,oBAAA,sBAAAC,qBAAA,uBAAAC,2BAAA,6BAAAG,cAAA,gBAAAC,eAAA,CAAA,EAAA,gBAAA,EAAAE,qBAAA,CAAA,EAAA,sBAAA,CAAA,EAAAU,QAAA,CAAAf,WAAA,aAAAM,iBAAA,kBAAA,EAAAU,MAAA,EAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,aAAA,mBAAA,eAAA,eAAA,UAAA,gBAAA,iBAAA,uBAAA,cAAA,sBAAA,uBAAA,4BAAA,EAAA,CAAA,EAAA,uBAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICdnCE,EAAA,EAAA,MAAA,CAAA,EACIhC,EAAA,EAAA;KAAA,EAAAgC,EAAA,EAAA,WAAA,CAAA,EAWIC,EAAA,aAAA,UAAA,CAAA,OAAcF,EAAArB,WAAAY,KAAAS,EAAA1B,IAAA,CAAqB,CAAA,EAAC,mBAAA,SAAA6B,EAAA,CAAA,OAChBH,EAAAV,wBAAAa,CAAA,CAA+B,CAAA,EAZvDC,EAAA,EAcJnC,EAAA,EAAA;CAAA,EAAAmC,EAAA,EACAnC,EAAA,EAAA;CAAA,EAAAoC,EAAA,EAAAC,EAAA,EAAA,CAAA,SAdQC,EAAA,CAAA,EAAAC,EAAA,eAAAR,EAAA3B,YAAA,EAA6B,eAAA2B,EAAA5B,YAAA,EACA,UAAA4B,EAAA1B,IAAA,EACb,gBAAA0B,EAAAnB,eAAA,EAAA,EACwB,iBAAAmB,EAAAlB,eAAA,GAAA2B,EAAA,GAAAC,CAAA,CAAA,EACC,uBAAAV,EAAAhB,qBAAA,GAAAyB,EAAA,GAAAC,CAAA,CAAA,EACY,cAAAV,EAAAzB,WAAA,EAC1B,sBAAAyB,EAAAxB,mBAAA,EACgB,uBAAAwB,EAAAvB,oBAAA,EACE,6BAAAuB,EAAAtB,0BAAA,EAMrD6B,EAAA,CAAA,EAAAI,EAAAX,EAAAxB,oBAAA,GAAA,CAAA,kBDJcoC,CAAa,EAAAC,OAAA,CAAA,6rDAAA,EAAAC,gBAAA,CAAA,CAAA,SAEd3C,CAAsB,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "PostingThreadComponent", "lastReadDate", "readOnlyMode", "post", "showAnswers", "isCommunicationPage", "showChannelReference", "hasChannelModerationRights", "openThread", "EventEmitter", "isConsecutive", "forwardedPosts", "input", "forwardedAnswerPosts", "onNavigateToPost", "output", "elementRef", "inject", "ElementRef", "onTriggerNavigateToPost", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275template", "PostingThreadComponent_Conditional_5_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275conditional", "PostComponent", "styles", "changeDetection"]
}
