{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { stringifyCircular } from 'app/shared/util/utils';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\n\r\nexport type EntityResponseType = HttpResponse<ModelingSubmission>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ModelingSubmissionService {\r\n    private http = inject(HttpClient);\r\n    private submissionService = inject(SubmissionService);\r\n\r\n    public resourceUrl = 'api/modeling';\r\n\r\n    /**\r\n     * Create a new modeling submission\r\n     * @param {ModelingSubmission} modelingSubmission - New submission to be created\r\n     * @param {number} exerciseId - Id of the exercise, for which the submission is made\r\n     */\r\n    create(modelingSubmission: ModelingSubmission, exerciseId: number): Observable<EntityResponseType> {\r\n        const copy = this.submissionService.convert(modelingSubmission);\r\n        return this.http\r\n            .post<ModelingSubmission>(`${this.resourceUrl}/exercises/${exerciseId}/modeling-submissions`, stringifyCircular(copy), {\r\n                headers: { 'Content-Type': 'application/json' }, // needed due to stringifyCircular\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Update an existing modeling submission\r\n     * @param {ModelingSubmission} modelingSubmission - Updated submission\r\n     * @param {number} exerciseId - Id of the exercise, for which the submission is made\r\n     */\r\n    update(modelingSubmission: ModelingSubmission, exerciseId: number): Observable<EntityResponseType> {\r\n        const copy = this.submissionService.convert(modelingSubmission);\r\n        return this.http\r\n            .put<ModelingSubmission>(`${this.resourceUrl}/exercises/${exerciseId}/modeling-submissions`, stringifyCircular(copy), {\r\n                headers: { 'Content-Type': 'application/json' }, // needed due to stringifyCircular\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.submissionService.convertResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Get all submissions for an exercise\r\n     * @param {number} exerciseId - Id of the exercise\r\n     * @param {any?} req - Request option\r\n     * @param correctionRound correctionRound for which to get the Submissions\r\n     */\r\n    getSubmissions(exerciseId: number, req?: any, correctionRound = 0): Observable<HttpResponse<ModelingSubmission[]>> {\r\n        const url = `${this.resourceUrl}/exercises/${exerciseId}/modeling-submissions`;\r\n        let params = createRequestOption(req);\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        return this.http\r\n            .get<ModelingSubmission[]>(url, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: HttpResponse<ModelingSubmission[]>) => this.submissionService.convertArrayResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Get an unassessed modeling exercise for an exercise\r\n     * @param {number} exerciseId - Id of the exercise\r\n     * @param {boolean?} lock - True if assessment is locked\r\n     * @param correctionRound correctionRound for which to get the Submissions\r\n     */\r\n    getSubmissionWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound = 0): Observable<ModelingSubmission | undefined> {\r\n        const url = `${this.resourceUrl}/exercises/${exerciseId}/modeling-submission-without-assessment`;\r\n        let params = new HttpParams();\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        if (lock) {\r\n            params = params.set('lock', 'true');\r\n        }\r\n        return this.http.get<ModelingSubmission | undefined>(url, { params }).pipe(\r\n            map((res?: ModelingSubmission) => {\r\n                if (!res) {\r\n                    return undefined;\r\n                }\r\n                return this.submissionService.convertSubmissionFromServer(res);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a submission with given Id\r\n     * @param {number} submissionId - Id of the submission\r\n     * @param correctionRound\r\n     * @param resultId\r\n     */\r\n    getSubmission(submissionId: number, correctionRound = 0, resultId?: number): Observable<ModelingSubmission> {\r\n        const url = `${this.resourceUrl}/modeling-submissions/${submissionId}`;\r\n        let params = new HttpParams();\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        if (resultId && resultId > 0) {\r\n            params = params.set('resultId', resultId.toString());\r\n        }\r\n        return this.http.get<ModelingSubmission>(url, { params }).pipe(map((res: ModelingSubmission) => this.submissionService.convertSubmissionFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Get a submission with given Id without locking it on artemis so plagiarism detection doesn't disrupt assessment\r\n     * @param {number} submissionId - Id of the submission\r\n     */\r\n    getSubmissionWithoutLock(submissionId: number): Observable<ModelingSubmission> {\r\n        const url = `${this.resourceUrl}/modeling-submissions/${submissionId}`;\r\n        let params = new HttpParams();\r\n        params = params.set('withoutResults', 'true');\r\n        return this.http.get<ModelingSubmission>(url, { params }).pipe(map((res: ModelingSubmission) => this.submissionService.convertSubmissionFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Get the latest submission for a given participation\r\n     * @param {number} participationId - Id of the participation\r\n     */\r\n    getLatestSubmissionForModelingEditor(participationId: number): Observable<ModelingSubmission> {\r\n        return this.http\r\n            .get<ModelingSubmission>(`${this.resourceUrl}/participations/${participationId}/latest-modeling-submission`, { responseType: 'json' })\r\n            .pipe(map((res: ModelingSubmission) => this.submissionService.convertSubmissionFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Get all submissions with results for a participation\r\n     * @param {number} participationId - Id of the participation\r\n     */\r\n    getSubmissionsWithResultsForParticipation(participationId: number): Observable<ModelingSubmission[]> {\r\n        const url = `${this.resourceUrl}/participations/${participationId}/submissions-with-results`;\r\n        return this.http.get<ModelingSubmission[]>(url).pipe(\r\n            map((submissions: ModelingSubmission[]) => {\r\n                return submissions.map((submission) => this.submissionService.convertSubmissionFromServer(submission) as ModelingSubmission);\r\n            }),\r\n        );\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ModelingSubmissionService", "http", "inject", "HttpClient", "submissionService", "SubmissionService", "resourceUrl", "create", "modelingSubmission", "exerciseId", "copy", "convert", "post", "stringifyCircular", "headers", "observe", "pipe", "map", "res", "convertResponse", "update", "put", "getSubmissions", "req", "correctionRound", "url", "params", "createRequestOption", "set", "toString", "get", "convertArrayResponse", "getSubmissionWithoutAssessment", "lock", "HttpParams", "convertSubmissionFromServer", "getSubmission", "submissionId", "resultId", "getSubmissionWithoutLock", "getLatestSubmissionForModelingEditor", "participationId", "responseType", "getSubmissionsWithResultsForParticipation", "submissions", "submission", "factory", "\u0275fac", "providedIn"]
}
