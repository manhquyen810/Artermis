{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/cpp/cpp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cpp\",\n  brackets: [{\n    token: \"delimiter.curly\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"delimiter.square\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.angle\",\n    open: \"<\",\n    close: \">\"\n  }],\n  keywords: [\"abstract\", \"amp\", \"array\", \"auto\", \"bool\", \"break\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"constexpr\", \"const_cast\", \"continue\", \"cpu\", \"decltype\", \"default\", \"delegate\", \"delete\", \"do\", \"double\", \"dynamic_cast\", \"each\", \"else\", \"enum\", \"event\", \"explicit\", \"export\", \"extern\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"friend\", \"gcnew\", \"generic\", \"goto\", \"if\", \"in\", \"initonly\", \"inline\", \"int\", \"interface\", \"interior_ptr\", \"internal\", \"literal\", \"long\", \"mutable\", \"namespace\", \"new\", \"noexcept\", \"nullptr\", \"__nullptr\", \"operator\", \"override\", \"partial\", \"pascal\", \"pin_ptr\", \"private\", \"property\", \"protected\", \"public\", \"ref\", \"register\", \"reinterpret_cast\", \"restrict\", \"return\", \"safe_cast\", \"sealed\", \"short\", \"signed\", \"sizeof\", \"static\", \"static_assert\", \"static_cast\", \"struct\", \"switch\", \"template\", \"this\", \"thread_local\", \"throw\", \"tile_static\", \"true\", \"try\", \"typedef\", \"typeid\", \"typename\", \"union\", \"unsigned\", \"using\", \"virtual\", \"void\", \"volatile\", \"wchar_t\", \"where\", \"while\", \"_asm\",\n  // reserved word with one underscores\n  \"_based\", \"_cdecl\", \"_declspec\", \"_fastcall\", \"_if_exists\", \"_if_not_exists\", \"_inline\", \"_multiple_inheritance\", \"_pascal\", \"_single_inheritance\", \"_stdcall\", \"_virtual_inheritance\", \"_w64\", \"__abstract\",\n  // reserved word with two underscores\n  \"__alignof\", \"__asm\", \"__assume\", \"__based\", \"__box\", \"__builtin_alignof\", \"__cdecl\", \"__clrcall\", \"__declspec\", \"__delegate\", \"__event\", \"__except\", \"__fastcall\", \"__finally\", \"__forceinline\", \"__gc\", \"__hook\", \"__identifier\", \"__if_exists\", \"__if_not_exists\", \"__inline\", \"__int128\", \"__int16\", \"__int32\", \"__int64\", \"__int8\", \"__interface\", \"__leave\", \"__m128\", \"__m128d\", \"__m128i\", \"__m256\", \"__m256d\", \"__m256i\", \"__m512\", \"__m512d\", \"__m512i\", \"__m64\", \"__multiple_inheritance\", \"__newslot\", \"__nogc\", \"__noop\", \"__nounwind\", \"__novtordisp\", \"__pascal\", \"__pin\", \"__pragma\", \"__property\", \"__ptr32\", \"__ptr64\", \"__raise\", \"__restrict\", \"__resume\", \"__sealed\", \"__single_inheritance\", \"__stdcall\", \"__super\", \"__thiscall\", \"__try\", \"__try_cast\", \"__typeof\", \"__unaligned\", \"__unhook\", \"__uuidof\", \"__value\", \"__virtual_inheritance\", \"__w64\", \"__wchar_t\"],\n  operators: [\"=\", \">\", \"<\", \"!\", \"~\", \"?\", \":\", \"==\", \"<=\", \">=\", \"!=\", \"&&\", \"||\", \"++\", \"--\", \"+\", \"-\", \"*\", \"/\", \"&\", \"|\", \"^\", \"%\", \"<<\", \">>\", \"+=\", \"-=\", \"*=\", \"/=\", \"&=\", \"|=\", \"^=\", \"%=\", \"<<=\", \">>=\"],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // C++ 11 Raw String\n    [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, {\n      token: \"string.raw.begin\",\n      next: \"@raw.$1\"\n    }],\n    // identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }],\n    // The preprocessor checks must be before whitespace as they check /^\\s*#/ which\n    // otherwise fails to match later after other whitespace has been removed.\n    // Inclusion\n    [/^\\s*#\\s*include/, {\n      token: \"keyword.directive.include\",\n      next: \"@include\"\n    }],\n    // Preprocessor directive\n    [/^\\s*#\\s*\\w+/, \"keyword.directive\"],\n    // whitespace\n    {\n      include: \"@whitespace\"\n    },\n    // [[ attributes ]].\n    [/\\[\\s*\\[/, {\n      token: \"annotation\",\n      next: \"@annotation\"\n    }],\n    // delimiters and operators\n    [/[{}()<>\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }],\n    // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"], [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"], [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"], [/\\d[\\d']*\\d(@integersuffix)/, \"number\"], [/\\d(@integersuffix)/, \"number\"],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, \"delimiter\"],\n    // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n    // non-teminated string\n    [/\"/, \"string\", \"@string\"],\n    // characters\n    [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    //For use with continuous line comments\n    linecomment: [[/.*[^\\\\]$/, \"comment\", \"@pop\"], [/[^]+/, \"comment\"]],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]],\n    raw: [[/[^)]+/, \"string.raw\"], [/\\)$S2\\\"/, {\n      token: \"string.raw.end\",\n      next: \"@pop\"\n    }], [/\\)/, \"string.raw\"]],\n    annotation: [{\n      include: \"@whitespace\"\n    }, [/using|alignas/, \"keyword\"], [/[a-zA-Z0-9_]+/, \"annotation\"], [/[,:]/, \"delimiter\"], [/[()]/, \"@brackets\"], [/\\]\\s*\\]/, {\n      token: \"annotation\",\n      next: \"@pop\"\n    }]],\n    include: [[/(\\s*)(<)([^<>]*)(>)/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", {\n      token: \"keyword.directive.include.end\",\n      next: \"@pop\"\n    }]], [/(\\s*)(\")([^\"]*)(\")/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", {\n      token: \"keyword.directive.include.end\",\n      next: \"@pop\"\n    }]]]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["conf","language"],"x_google_ignoreList":[0]}