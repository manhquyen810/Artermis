{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/shared/code-editor/service/code-editor-domain.service.ts", "src/main/webapp/app/exercises/programming/shared/code-editor/service/code-editor-domain-dependent.service.ts", "src/main/webapp/app/exercises/programming/shared/code-editor/service/code-editor-conflict-state.service.ts", "src/main/webapp/app/exercises/programming/shared/code-editor/service/code-editor-domain-dependent-endpoint.service.ts", "src/main/webapp/app/exercises/programming/shared/code-editor/service/code-editor-repository.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport {\r\n    DomainAuxiliaryRepositoryChange,\r\n    DomainChange,\r\n    DomainParticipationChange,\r\n    DomainTestRepositoryChange,\r\n} from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\n/**\r\n * This service provides subscribing services with the most recently selected domain (participation vs repository).\r\n * This is used to make components independent of the domains, as they can just call the method of an injected service without passing the domain.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class DomainService {\r\n    protected domain: DomainChange;\r\n    private subject = new BehaviorSubject<DomainParticipationChange | DomainTestRepositoryChange | DomainAuxiliaryRepositoryChange | undefined>(undefined);\r\n\r\n    /**\r\n     * Sets domain and subject.next according to parameter.\r\n     * @param domain - defines new domain of the service.\r\n     */\r\n    public setDomain(domain: DomainChange) {\r\n        this.domain = domain;\r\n        this.subject.next(domain);\r\n    }\r\n\r\n    /**\r\n     * Subscribes to current subject.\r\n     */\r\n    public subscribeDomainChange(): Observable<DomainChange | undefined> {\r\n        return this.subject;\r\n    }\r\n}\r\n", "import { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { DomainChange } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { DomainService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain.service';\r\n\r\n/**\r\n * Service that can be extended to automatically receive updates on changed domains.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport abstract class DomainDependentService implements OnDestroy {\r\n    private domainService = inject(DomainService);\r\n\r\n    protected domain: DomainChange;\r\n    protected domainChangeSubscription: Subscription;\r\n\r\n    /**\r\n     * Initializes a domain subscription.\r\n     */\r\n    initDomainSubscription() {\r\n        this.domainChangeSubscription = this.domainService\r\n            .subscribeDomainChange()\r\n            .pipe(\r\n                filter((domain) => !!domain),\r\n                tap((domain: DomainChange) => {\r\n                    this.setDomain(domain);\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Sets domain according to the parameter.\r\n     * @param domain - enum that defines the type of the domain.\r\n     */\r\n    setDomain(domain: DomainChange) {\r\n        this.domain = domain;\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from current subscription.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.domainChangeSubscription) {\r\n            this.domainChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n", "import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { DomainType, GitConflictState } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { DomainDependentService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain-dependent.service';\r\n\r\nexport interface IConflictStateService {\r\n    subscribeConflictState: () => Observable<GitConflictState>;\r\n    notifyConflictState: (gitConflictState: GitConflictState) => void;\r\n}\r\n\r\n/**\r\n * This service manages the information about git conflicts of repositories.\r\n * It offers methods to both subscribe and notify on conflicts.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeEditorConflictStateService extends DomainDependentService implements IConflictStateService, OnDestroy {\r\n    private websocketService = inject(WebsocketService);\r\n\r\n    private conflictSubjects: Map<string, BehaviorSubject<GitConflictState>> = new Map();\r\n    private websocketConnections: Map<string, string> = new Map();\r\n\r\n    constructor() {\r\n        super();\r\n        this.initDomainSubscription();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe fromm all subscriptions.\r\n     */\r\n    ngOnDestroy(): void {\r\n        Object.values(this.websocketConnections).forEach((channel) => this.websocketService.unsubscribe(channel));\r\n    }\r\n\r\n    /**\r\n     * Subscribe to git conflict notifications. Does not emit the same value twice in a row (distinctUntilChanged).\r\n     * Emits an OK as a first value.\r\n     */\r\n    subscribeConflictState = () => {\r\n        const domainKey = this.getDomainKey();\r\n        const subject = this.conflictSubjects.get(domainKey);\r\n        if (!subject) {\r\n            const repoSubject = new BehaviorSubject(GitConflictState.OK);\r\n            this.conflictSubjects.set(domainKey, repoSubject);\r\n            return repoSubject.pipe(distinctUntilChanged()) as Observable<GitConflictState>;\r\n        } else {\r\n            return subject.pipe(distinctUntilChanged()) as Observable<GitConflictState>;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Notify all subscribers about a given conflictState.\r\n     *\r\n     * @param gitConflictState\r\n     */\r\n    notifyConflictState = (gitConflictState: GitConflictState) => {\r\n        const domainKey = this.getDomainKey();\r\n        const subject = this.conflictSubjects.get(domainKey);\r\n        if (subject) {\r\n            subject.next(gitConflictState);\r\n        }\r\n    };\r\n\r\n    private getDomainKey = () => {\r\n        const [domainType, domainValue] = this.domain;\r\n        if (domainType === DomainType.AUXILIARY_REPOSITORY) {\r\n            return `auxiliary-${domainValue.id!.toString()}`;\r\n        }\r\n        return `${domainType === DomainType.PARTICIPATION ? 'participation' : 'test'}-${domainValue.id!.toString()}`;\r\n    };\r\n}\r\n", "import { DomainDependentService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain-dependent.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { DomainChange, DomainType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { inject } from '@angular/core';\r\n\r\n/**\r\n * Service that can be extended to update rest endpoint urls with the received domain information.\r\n */\r\nexport abstract class DomainDependentEndpointService extends DomainDependentService {\r\n    protected restResourceUrl?: string;\r\n    protected http = inject(HttpClient);\r\n    protected websocketService = inject(WebsocketService);\r\n\r\n    protected constructor() {\r\n        super();\r\n        this.initDomainSubscription();\r\n    }\r\n\r\n    /**\r\n     * Sets resourceUrls according to the parameter.\r\n     * @param domain - enum that defines the type of the domain.\r\n     */\r\n    setDomain(domain: DomainChange) {\r\n        super.setDomain(domain);\r\n        this.restResourceUrl = this.calculateRestResourceURL(domain);\r\n    }\r\n\r\n    calculateRestResourceURL(domain: DomainChange): string | undefined {\r\n        const [domainType, domainValue] = domain;\r\n        switch (domainType) {\r\n            case DomainType.PARTICIPATION:\r\n                return `api/programming/repository/${domainValue.id}`;\r\n            case DomainType.TEST_REPOSITORY:\r\n                return `api/programming/test-repository/${domainValue.id}`;\r\n            case DomainType.AUXILIARY_REPOSITORY:\r\n                return `api/programming/auxiliary-repository/${domainValue.id}`;\r\n        }\r\n    }\r\n}\r\n", "import { HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Injectable, OnDestroy, inject } from '@angular/core';\r\nimport { Observable, Subject, UnaryFunction, of, pipe, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport {\r\n    CommitState,\r\n    DomainChange,\r\n    DomainType,\r\n    FileSubmission,\r\n    FileSubmissionError,\r\n    FileType,\r\n    GitConflictState,\r\n    RepositoryError,\r\n} from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { CodeEditorConflictStateService } from 'app/exercises/programming/shared/code-editor/service/code-editor-conflict-state.service';\r\nimport { BuildLogService } from 'app/exercises/programming/shared/service/build-log.service';\r\nimport { DomainDependentEndpointService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain-dependent-endpoint.service';\r\nimport { downloadFile } from 'app/shared/util/download.util';\r\n\r\nexport interface ICodeEditorRepositoryFileService {\r\n    getRepositoryContent: () => Observable<{ [fileName: string]: FileType }>;\r\n    getFile: (fileName: string) => Observable<{ fileContent: string }>;\r\n    createFile: (fileName: string) => Observable<void>;\r\n    createFolder: (folderName: string) => Observable<void>;\r\n    updateFileContent: (fileName: string, fileContent: string) => Observable<any>;\r\n    updateFiles: (fileUpdates: Array<{ fileName: string; fileContent: string }>) => Observable<FileSubmission | FileSubmissionError>;\r\n    renameFile: (filePath: string, newFileName: string) => Observable<void>;\r\n    deleteFile: (filePath: string) => Observable<void>;\r\n}\r\n\r\nexport interface ICodeEditorRepositoryService {\r\n    getStatus: () => Observable<{ repositoryStatus: string }>;\r\n    commit: () => Observable<void>;\r\n    pull: () => Observable<void>;\r\n    resetRepository: () => Observable<void>;\r\n}\r\n\r\nexport class ConnectionError extends Error {\r\n    constructor() {\r\n        super('InternetDisconnected');\r\n        // Set the prototype explicitly.\r\n        Object.setPrototypeOf(this, ConnectionError.prototype);\r\n    }\r\n\r\n    static get message(): string {\r\n        return 'InternetDisconnected';\r\n    }\r\n}\r\n\r\n/**\r\n * Type guard for checking if the file submission received through the websocket is an error object.\r\n * @param toBeDetermined either a FileSubmission or a FileSubmissionError.\r\n */\r\nconst checkIfSubmissionIsError = (toBeDetermined: FileSubmission | FileSubmissionError): toBeDetermined is FileSubmissionError => {\r\n    return !!(toBeDetermined as FileSubmissionError).error;\r\n};\r\n\r\n// TODO: The Repository & RepositoryFile services should be merged into 1 service, this would make handling errors easier.\r\n/**\r\n * Check a HttpErrorResponse for specific status codes that are relevant for the code-editor.\r\n * Atm we only check the conflict status code (409) & inform the conflictService about it, and 'internet disconnected' status code (0).\r\n *\r\n * @param conflictService\r\n */\r\nconst handleErrorResponse = <T>(conflictService: CodeEditorConflictStateService): UnaryFunction<Observable<T>, Observable<T>> =>\r\n    pipe(\r\n        catchError((err: HttpErrorResponse) => {\r\n            if (err.status === 409) {\r\n                conflictService.notifyConflictState(GitConflictState.CHECKOUT_CONFLICT);\r\n            }\r\n            if (err.status === 0 || err.status === 504) {\r\n                return throwError(() => new ConnectionError());\r\n            }\r\n            return throwError(() => err);\r\n        }),\r\n    );\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeEditorRepositoryService extends DomainDependentEndpointService implements ICodeEditorRepositoryService {\r\n    private conflictService = inject(CodeEditorConflictStateService);\r\n\r\n    // necessary to be used in providers array in component\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getStatus = () => {\r\n        return this.http.get<any>(this.restResourceUrl!).pipe(\r\n            handleErrorResponse<{ repositoryStatus: string }>(this.conflictService),\r\n            tap(({ repositoryStatus }) => {\r\n                if (repositoryStatus !== CommitState.CONFLICT) {\r\n                    this.conflictService.notifyConflictState(GitConflictState.OK);\r\n                }\r\n            }),\r\n        );\r\n    };\r\n\r\n    commit = () => {\r\n        return this.http.post<void>(`${this.restResourceUrl}/commit`, {}).pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n\r\n    pull = () => {\r\n        return this.http.get<void>(`${this.restResourceUrl}/pull`, {}).pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n\r\n    /**\r\n     * We don't check for conflict errors here on purpose!\r\n     * This is the method that is used to resolve conflicts.\r\n     */\r\n    resetRepository = () => {\r\n        return this.http.post<void>(`${this.restResourceUrl}/reset`, {});\r\n    };\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeEditorBuildLogService extends DomainDependentEndpointService {\r\n    private buildLogService = inject(BuildLogService);\r\n\r\n    // necessary to be used in providers array in component\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getBuildLogs = () => {\r\n        const [domainType, domainValue] = this.domain;\r\n        if (domainType === DomainType.PARTICIPATION) {\r\n            return this.buildLogService.getBuildLogs(domainValue.id!);\r\n        }\r\n        return of([]);\r\n    };\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeEditorRepositoryFileService extends DomainDependentEndpointService implements ICodeEditorRepositoryFileService, OnDestroy {\r\n    private conflictService = inject(CodeEditorConflictStateService);\r\n\r\n    fileUpdateSubject = new Subject<FileSubmission>();\r\n\r\n    // necessary to be used in providers array in component\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Calls ngOnDestroy of super to unsubscribe from domain/participation changes.\r\n     */\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n\r\n    /**\r\n     * downloads a file from the repository to the users device.\r\n     * @param fileName the name of the file in the repository\r\n     * @param downloadName the name of the file as suggested to the browser\r\n     */\r\n    downloadFile(fileName: string, downloadName: string) {\r\n        this.http\r\n            .get(`${this.restResourceUrl}/files-plagiarism-view`, { params: new HttpParams().set('file', fileName), responseType: 'blob' })\r\n            .pipe(handleErrorResponse(this.conflictService))\r\n            .subscribe((res) => {\r\n                downloadFile(res, downloadName);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Calls setDomain of super and updates fileUpdateUrl. If this service is used at the time complete usage and unsubscribe.\r\n     * @param domain - defines new domain of super.\r\n     */\r\n    setDomain(domain: DomainChange) {\r\n        super.setDomain(domain);\r\n        if (this.fileUpdateSubject) {\r\n            this.fileUpdateSubject.complete();\r\n        }\r\n    }\r\n\r\n    getRepositoryContent = (domain?: DomainChange) => {\r\n        const restResourceUrl = domain ? this.calculateRestResourceURL(domain) : this.restResourceUrl;\r\n        return this.http.get<{ [fileName: string]: FileType }>(`${restResourceUrl}/files`).pipe(handleErrorResponse<{ [fileName: string]: FileType }>(this.conflictService));\r\n    };\r\n\r\n    /**\r\n     * Gets the files of the repository for the plagiarism view.\r\n     * @param domain the domain of the file\r\n     */\r\n    getRepositoryContentForPlagiarismView = (domain?: DomainChange) => {\r\n        const restResourceUrl = domain ? this.calculateRestResourceURL(domain) : this.restResourceUrl;\r\n        return this.http\r\n            .get<{ [fileName: string]: FileType }>(`${restResourceUrl}/files-plagiarism-view`)\r\n            .pipe(handleErrorResponse<{ [fileName: string]: FileType }>(this.conflictService));\r\n    };\r\n\r\n    /**\r\n     * Gets the files of the repository and checks whether they were changed during a student participation.\r\n     */\r\n    getFilesWithInformationAboutChange = (domain?: DomainChange) => {\r\n        const restResourceUrl = domain ? this.calculateRestResourceURL(domain) : this.restResourceUrl;\r\n        return this.http.get<{ [fileName: string]: boolean }>(`${restResourceUrl}/files-change`).pipe(handleErrorResponse<{ [fileName: string]: boolean }>(this.conflictService));\r\n    };\r\n\r\n    getFile = (fileName: string, domain?: DomainChange) => {\r\n        const restResourceUrl = domain ? this.calculateRestResourceURL(domain) : this.restResourceUrl;\r\n        return this.http.get(`${restResourceUrl}/file`, { params: new HttpParams().set('file', fileName), responseType: 'text' }).pipe(\r\n            map((data) => ({ fileContent: data })),\r\n            handleErrorResponse<{ fileContent: string }>(this.conflictService),\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Gets the file content for the plagiarism view.\r\n     * @param fileName the name of the file\r\n     * @param domain the domain of the file\r\n     */\r\n    getFileForPlagiarismView = (fileName: string, domain?: DomainChange) => {\r\n        const restResourceUrl = domain ? this.calculateRestResourceURL(domain) : this.restResourceUrl;\r\n        return this.http.get(`${restResourceUrl}/file-plagiarism-view`, { params: new HttpParams().set('file', fileName), responseType: 'text' }).pipe(\r\n            map((data) => ({ fileContent: data })),\r\n            handleErrorResponse<{ fileContent: string }>(this.conflictService),\r\n        );\r\n    };\r\n\r\n    getFilesWithContent = (domain?: DomainChange) => {\r\n        const restResourceUrl = domain ? this.calculateRestResourceURL(domain) : this.restResourceUrl;\r\n        return this.http.get(`${restResourceUrl}/files-content`).pipe(handleErrorResponse<{ [fileName: string]: string }>(this.conflictService));\r\n    };\r\n\r\n    createFile = (fileName: string) => {\r\n        return this.http.post<void>(`${this.restResourceUrl}/file`, '', { params: new HttpParams().set('file', fileName) }).pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n\r\n    createFolder = (folderName: string) => {\r\n        return this.http.post<void>(`${this.restResourceUrl}/folder`, '', { params: new HttpParams().set('folder', folderName) }).pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n\r\n    updateFileContent = (fileName: string, fileContent: string) => {\r\n        return this.http\r\n            .put(`${this.restResourceUrl}/file`, fileContent, {\r\n                params: new HttpParams().set('file', fileName),\r\n            })\r\n            .pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n\r\n    /** Call to server to update files.\r\n     * Checks all returned files submissions for submission errors, see {@link checkIfSubmissionIsError}\r\n     * Currently we only handle {@link GitConflictState#CHECKOUT_CONFLICT}\r\n     *\r\n     * @param fileUpdates the Array of updated files\r\n     * @param thenCommit indicates the server to also commit the saved changes\r\n     */\r\n    updateFiles(fileUpdates: Array<{ fileName: string; fileContent: string }>, thenCommit = false) {\r\n        if (this.fileUpdateSubject) {\r\n            this.fileUpdateSubject.complete();\r\n        }\r\n        this.fileUpdateSubject = new Subject<FileSubmission>();\r\n        return this.http\r\n            .put<FileSubmission>(`${this.restResourceUrl}/files`, fileUpdates, {\r\n                params: { commit: thenCommit ? 'yes' : 'no' },\r\n            })\r\n            .pipe(\r\n                handleErrorResponse(this.conflictService),\r\n                tap((fileSubmission: FileSubmission | FileSubmissionError) => {\r\n                    if (checkIfSubmissionIsError(fileSubmission)) {\r\n                        this.fileUpdateSubject.error(fileSubmission);\r\n                        if (fileSubmission.error === RepositoryError.CHECKOUT_CONFLICT) {\r\n                            this.conflictService.notifyConflictState(GitConflictState.CHECKOUT_CONFLICT);\r\n                        }\r\n                        return;\r\n                    }\r\n                    this.fileUpdateSubject.next(fileSubmission);\r\n                }),\r\n            );\r\n    }\r\n\r\n    renameFile = (currentFilePath: string, newFilename: string) => {\r\n        return this.http.post<void>(`${this.restResourceUrl}/rename-file`, { currentFilePath, newFilename }).pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n\r\n    deleteFile = (fileName: string) => {\r\n        return this.http.delete<void>(`${this.restResourceUrl}/file`, { params: new HttpParams().set('file', fileName) }).pipe(handleErrorResponse(this.conflictService));\r\n    };\r\n}\r\n"],
  "mappings": "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",
  "names": ["DomainService", "domain", "subject", "BehaviorSubject", "undefined", "setDomain", "next", "subscribeDomainChange", "factory", "\u0275fac", "providedIn", "DomainDependentService", "domainService", "inject", "DomainService", "domain", "domainChangeSubscription", "initDomainSubscription", "subscribeDomainChange", "pipe", "filter", "tap", "setDomain", "subscribe", "ngOnDestroy", "unsubscribe", "factory", "\u0275fac", "providedIn", "CodeEditorConflictStateService", "DomainDependentService", "websocketService", "inject", "WebsocketService", "conflictSubjects", "Map", "websocketConnections", "constructor", "initDomainSubscription", "ngOnDestroy", "Object", "values", "forEach", "channel", "unsubscribe", "subscribeConflictState", "domainKey", "getDomainKey", "subject", "get", "pipe", "distinctUntilChanged", "repoSubject", "BehaviorSubject", "GitConflictState", "OK", "set", "notifyConflictState", "gitConflictState", "next", "domainType", "domainValue", "domain", "DomainType", "AUXILIARY_REPOSITORY", "id", "toString", "PARTICIPATION", "factory", "\u0275fac", "providedIn", "DomainDependentEndpointService", "DomainDependentService", "restResourceUrl", "http", "inject", "HttpClient", "websocketService", "WebsocketService", "constructor", "initDomainSubscription", "setDomain", "domain", "calculateRestResourceURL", "domainType", "domainValue", "DomainType", "PARTICIPATION", "id", "TEST_REPOSITORY", "AUXILIARY_REPOSITORY", "ConnectionError", "Error", "constructor", "Object", "setPrototypeOf", "prototype", "message", "checkIfSubmissionIsError", "toBeDetermined", "error", "handleErrorResponse", "conflictService", "pipe", "catchError", "err", "status", "notifyConflictState", "GitConflictState", "CHECKOUT_CONFLICT", "throwError", "CodeEditorRepositoryService", "DomainDependentEndpointService", "inject", "CodeEditorConflictStateService", "getStatus", "http", "get", "restResourceUrl", "tap", "repositoryStatus", "CommitState", "CONFLICT", "OK", "commit", "post", "pull", "resetRepository", "factory", "\u0275fac", "providedIn", "CodeEditorBuildLogService", "buildLogService", "BuildLogService", "getBuildLogs", "domainType", "domainValue", "domain", "DomainType", "PARTICIPATION", "id", "of", "CodeEditorRepositoryFileService", "fileUpdateSubject", "Subject", "ngOnDestroy", "downloadFile", "fileName", "downloadName", "params", "HttpParams", "set", "responseType", "subscribe", "res", "setDomain", "complete", "getRepositoryContent", "calculateRestResourceURL", "getRepositoryContentForPlagiarismView", "getFilesWithInformationAboutChange", "getFile", "map", "data", "fileContent", "getFileForPlagiarismView", "getFilesWithContent", "createFile", "createFolder", "folderName", "updateFileContent", "put", "updateFiles", "fileUpdates", "thenCommit", "fileSubmission", "RepositoryError", "next", "renameFile", "currentFilePath", "newFilename", "deleteFile", "delete"]
}
