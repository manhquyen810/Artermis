{
  "version": 3,
  "sources": ["src/main/webapp/app/grading-system/interval-grading-system/interval-grading-system.component.ts", "src/main/webapp/app/grading-system/interval-grading-system/interval-grading-system.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { GradeStep } from 'app/entities/grade-step.model';\r\nimport { ModePickerComponent, ModePickerOption } from 'app/exercises/shared/mode-picker/mode-picker.component';\r\nimport { BaseGradingSystemComponent, CsvGradeStep, GradeEditMode } from 'app/grading-system/base-grading-system/base-grading-system.component';\r\nimport { parse } from 'papaparse';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { SafeHtmlPipe } from 'app/shared/pipes/safe-html.pipe';\r\nimport { GradeStepBoundsPipe } from 'app/shared/pipes/grade-step-bounds.pipe';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\n@Component({\r\n    selector: 'jhi-interval-grading-system',\r\n    templateUrl: './interval-grading-system.component.html',\r\n    styleUrls: ['./interval-grading-system.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        FormsModule,\r\n        FaIconComponent,\r\n        ArtemisTranslatePipe,\r\n        SafeHtmlPipe,\r\n        GradeStepBoundsPipe,\r\n        ModePickerComponent,\r\n        DeleteButtonDirective,\r\n        HelpIconComponent,\r\n    ],\r\n})\r\nexport class IntervalGradingSystemComponent extends BaseGradingSystemComponent {\r\n    readonly GradeEditMode = GradeEditMode;\r\n    gradeEditMode = GradeEditMode.PERCENTAGE;\r\n\r\n    readonly modePickerOptions: ModePickerOption<GradeEditMode>[] = [\r\n        {\r\n            value: GradeEditMode.PERCENTAGE,\r\n            labelKey: 'artemisApp.gradingSystem.intervalTab.percentageMode',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n        {\r\n            value: GradeEditMode.POINTS,\r\n            labelKey: 'artemisApp.gradingSystem.intervalTab.pointsMode',\r\n            btnClass: 'btn-info',\r\n        },\r\n    ];\r\n\r\n    createGradeStep(): void {\r\n        if (this.gradingScale?.gradeSteps?.length === 0) {\r\n            // Add sticky grade step at the end.\r\n            super.createGradeStep();\r\n        }\r\n\r\n        // Remove sticky grade step, add the new step and re-add the sticky grade step.\r\n        const stickyGradeStep = this.gradingScale.gradeSteps.pop()!;\r\n\r\n        super.createGradeStep();\r\n        this.gradingScale.gradeSteps.push(stickyGradeStep);\r\n\r\n        const selectedIndex = this.gradingScale.gradeSteps.length - 2;\r\n        this.setPercentageInterval(selectedIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the inclusivity for all grade steps based on the lowerBoundInclusivity property\r\n     * Called before a post/put request\r\n     * @override\r\n     */\r\n    setInclusivity(): void {\r\n        const gradeSteps = this.gradingScale?.gradeSteps;\r\n        if (!(gradeSteps?.length > 0)) {\r\n            return;\r\n        }\r\n\r\n        // No need to sort grade steps since they are always sorted.\r\n        gradeSteps.forEach((gradeStep) => {\r\n            gradeStep.lowerBoundInclusive = this.lowerBoundInclusivity;\r\n            gradeStep.upperBoundInclusive = !this.lowerBoundInclusivity;\r\n        });\r\n\r\n        // Always true\r\n        gradeSteps.first()!.lowerBoundInclusive = true;\r\n        gradeSteps.last()!.upperBoundInclusive = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the lower and upper percentage value of all grade steps in gradingScale.gradeSteps, starting from {@link selectedIndex}\r\n     * until the end of the list. If {@link newPercentageInterval} is undefined or null, then the grade step at {@link selectedIndex}\r\n     * will be unmodified, only the later grade steps will be adjusted accordingly.\r\n     *\r\n     * @param selectedIndex the index of the {@link GradeStep} that will be first to be modified.\r\n     * @param newPercentageInterval the new difference between lower and upper bounds of the grade step at {@link selectedIndex},\r\n     *                              undefined or null means that the difference will not change.\r\n     */\r\n    setPercentageInterval(selectedIndex: number, newPercentageInterval?: number): void {\r\n        const gradeSteps = this.gradingScale.gradeSteps;\r\n        let previousGradeStep: GradeStep | undefined = undefined;\r\n\r\n        for (let i = selectedIndex; i < gradeSteps.length; i++) {\r\n            const currentGradeStep = gradeSteps[i];\r\n            let currentInterval: number;\r\n\r\n            if (previousGradeStep) {\r\n                // current grade step is after the selectedIndex so we need to shift lower bound\r\n                currentInterval = this.getPercentageInterval(currentGradeStep);\r\n                currentGradeStep.lowerBoundPercentage = previousGradeStep.upperBoundPercentage;\r\n            } else {\r\n                // current grade step === grade step at selectedIndex\r\n                currentInterval = newPercentageInterval ?? this.getPercentageInterval(currentGradeStep);\r\n            }\r\n\r\n            currentGradeStep.upperBoundPercentage = currentGradeStep.lowerBoundPercentage + currentInterval;\r\n\r\n            this.setPoints(currentGradeStep, true);\r\n            this.setPoints(currentGradeStep, false);\r\n\r\n            previousGradeStep = currentGradeStep;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the lower and upper boundary point values of all grade steps in gradingScale.gradeSteps\r\n     * starting from {@link selectedIndex} until the end of the list.\r\n     *\r\n     * @param selectedIndex the index of the {@link GradeStep} that will be first to be modified.\r\n     * @param newPointsInterval the new difference between lower and upper bounds of the grade step at {@link selectedIndex}\r\n     */\r\n    setPointsInterval(selectedIndex: number, newPointsInterval: number): void {\r\n        const gradeStep = this.gradingScale.gradeSteps[selectedIndex];\r\n        if (gradeStep.lowerBoundPoints == undefined) {\r\n            throw new Error(`lowerBoundPoints are not set yet for selectedIndex: '${selectedIndex}'`);\r\n        }\r\n        gradeStep.upperBoundPoints = gradeStep.lowerBoundPoints + newPointsInterval;\r\n        this.setPercentage(gradeStep, false);\r\n        this.setPercentageInterval(selectedIndex);\r\n    }\r\n\r\n    getPercentageInterval(gradeStep: GradeStep) {\r\n        return gradeStep.upperBoundPercentage - gradeStep.lowerBoundPercentage;\r\n    }\r\n\r\n    getPointsInterval(gradeStep: GradeStep) {\r\n        if (gradeStep.upperBoundPoints == undefined || gradeStep.lowerBoundPoints == undefined) {\r\n            return undefined;\r\n        }\r\n        return gradeStep.upperBoundPoints - gradeStep.lowerBoundPoints;\r\n    }\r\n\r\n    deleteGradeStep(index: number): void {\r\n        this.setPercentageInterval(index, 0);\r\n        super.deleteGradeStep(index);\r\n        const gradeSteps = this.gradingScale.gradeSteps;\r\n\r\n        if (gradeSteps.length > 0) {\r\n            // Prevent the total percentage from becoming less than 100.\r\n            if (gradeSteps.last()!.upperBoundPercentage < 100) {\r\n                gradeSteps.last()!.upperBoundPercentage = 100;\r\n            }\r\n\r\n            // If the first grade step is deleted, make sure the new first grade step's lower bound inclusivity is true.\r\n            gradeSteps.first()!.lowerBoundInclusive = true;\r\n\r\n            // If the last grade step is deleted, make sure the new last grade step's upper bound inclusivity is true.\r\n            gradeSteps.last()!.upperBoundInclusive = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse CSV file to a list of CsvGradeStep objects\r\n     * @param csvFile the read csv file\r\n     * @override\r\n     */\r\n    parseCSVFile(csvFile: File): Promise<CsvGradeStep[]> {\r\n        return new Promise((resolve, reject) => {\r\n            parse(csvFile, {\r\n                header: true,\r\n                skipEmptyLines: true,\r\n                dynamicTyping: false,\r\n                complete: (results) => resolve(results.data as CsvGradeStep[]),\r\n                error: (error) => reject(error),\r\n            });\r\n        });\r\n    }\r\n\r\n    shouldShowGradingStepsAboveMaxPointsWarning(): boolean {\r\n        const steps = [...this.gradingScale.gradeSteps].slice(0, this.gradingScale.gradeSteps.length - 1);\r\n        return this.isAnyGradingStepAboveMaxPoints(steps);\r\n    }\r\n}\r\n", "<div>\r\n    <div>\r\n        <div class=\"dropdown-container\">\r\n            <div class=\"form-group\">\r\n                <span class=\"colon-suffix no-flex-shrink\" jhiTranslate=\"artemisApp.gradingSystem.intervalTab.mode\"></span>\r\n                <jhi-mode-picker [options]=\"modePickerOptions\" [(value)]=\"gradeEditMode\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div>\r\n        <table class=\"table table-striped align-middle\">\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                        <span jhiTranslate=\"artemisApp.gradingSystem.intervalTab.title\"></span>\r\n                    </th>\r\n                    <th>\r\n                        <span>\r\n                            {{ 'artemisApp.gradingSystem.min' | artemisTranslate }}\r\n                            - {{ 'artemisApp.gradingSystem.max' | artemisTranslate }}\r\n                        </span>\r\n                    </th>\r\n                    <th>\r\n                        <span>\r\n                            {{ 'artemisApp.gradingSystem.minPoints' | artemisTranslate }}\r\n                            - {{ 'artemisApp.gradingSystem.maxPoints' | artemisTranslate }}\r\n                        </span>\r\n                    </th>\r\n                    <th [colSpan]=\"2\">\r\n                        <span\r\n                            [jhiTranslate]=\"this.gradingScale.gradeType === GradeType.GRADE ? 'artemisApp.gradingSystem.gradeName' : 'artemisApp.gradingSystem.bonusPoints'\"\r\n                        ></span>\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr class=\"grading-scale-table-row\">\r\n                    <td>\r\n                        {{ 'artemisApp.gradingScale.plagiarismGrade' | artemisTranslate }}\r\n                        <jhi-help-icon placement=\"auto\" text=\"artemisApp.gradingSystem.plagiarismGradeHelp\" />\r\n                    </td>\r\n                    <!-- &mdash; is used to indicate that this special grade does not correspond to a numeric interval. -->\r\n                    <td>&mdash;</td>\r\n                    <td>&mdash;</td>\r\n                    <td>\r\n                        <input\r\n                            [(ngModel)]=\"gradingScale.plagiarismGrade\"\r\n                            type=\"text\"\r\n                            [placeholder]=\"'artemisApp.gradingSystem.defaultGradeName' | artemisTranslate: { default: GradingScale.DEFAULT_PLAGIARISM_GRADE }\"\r\n                        />\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr class=\"grading-scale-table-row\">\r\n                    <td>\r\n                        {{ 'artemisApp.gradingScale.noParticipationGrade' | artemisTranslate }}\r\n                        <jhi-help-icon placement=\"auto\" text=\"artemisApp.gradingSystem.noParticipationGradeHelp\" />\r\n                    </td>\r\n                    <!-- &mdash; is used to indicate that this special grade does not correspond to a numeric interval. -->\r\n                    <td>&mdash;</td>\r\n                    <td>&mdash;</td>\r\n                    <td>\r\n                        <input\r\n                            [(ngModel)]=\"gradingScale.noParticipationGrade\"\r\n                            type=\"text\"\r\n                            [placeholder]=\"'artemisApp.gradingSystem.defaultGradeName' | artemisTranslate: { default: GradingScale.DEFAULT_NO_PARTICIPATION_GRADE }\"\r\n                        />\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                @for (gradeStep of gradingScale.gradeSteps; track gradeStep; let i = $index; let last = $last) {\r\n                    <tr class=\"grading-scale-table-row\">\r\n                        @if (last) {\r\n                            <td>\r\n                                <jhi-help-icon text=\"artemisApp.gradingSystem.stickyGradeStep\" />\r\n                            </td>\r\n                        } @else {\r\n                            @if (gradeEditMode === GradeEditMode.PERCENTAGE) {\r\n                                <td>\r\n                                    <input\r\n                                        [ngModel]=\"getPercentageInterval(gradeStep)\"\r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        min=\"0.5\"\r\n                                        (ngModelChange)=\"setPercentageInterval(i, $event)\"\r\n                                        required\r\n                                    />\r\n                                </td>\r\n                            }\r\n                            @if (gradeEditMode === GradeEditMode.POINTS) {\r\n                                <td>\r\n                                    <input\r\n                                        [ngModel]=\"getPointsInterval(gradeStep)\"\r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        min=\"0.5\"\r\n                                        (ngModelChange)=\"setPointsInterval(i, $event)\"\r\n                                        [required]=\"maxPoints !== undefined && maxPoints > 0\"\r\n                                        [disabled]=\"maxPoints === undefined || maxPoints <= 0\"\r\n                                    />\r\n                                </td>\r\n                            }\r\n                        }\r\n                        <td>\r\n                            <span [innerHTML]=\"gradeStep | gradeStepBounds: GradeEditMode.PERCENTAGE : last | safeHtml\"></span>\r\n                        </td>\r\n                        <td>\r\n                            <span [innerHTML]=\"gradeStep | gradeStepBounds: GradeEditMode.POINTS : last | safeHtml\"></span>\r\n                        </td>\r\n                        @if (gradingScale.gradeType !== GradeType.BONUS) {\r\n                            <td>\r\n                                <input [(ngModel)]=\"gradeStep.gradeName\" type=\"text\" required />\r\n                            </td>\r\n                        }\r\n                        @if (gradingScale.gradeType === GradeType.BONUS) {\r\n                            <td>\r\n                                <input [(ngModel)]=\"gradeStep.gradeName\" type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" required />\r\n                            </td>\r\n                        }\r\n                        <td>\r\n                            <button (click)=\"deleteGradeStep(i)\" type=\"button\" class=\"btn btn-danger\" style=\"float: right\">\r\n                                <fa-icon [icon]=\"faTimes\" />\r\n                                <span jhiTranslate=\"artemisApp.gradingSystem.delete\"></span>\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div style=\"margin-bottom: 1em\">\r\n        <button (click)=\"createGradeStep()\" class=\"btn btn-success me-1 mb-1\" type=\"button\">\r\n            <fa-icon [icon]=\"faPlus\" />\r\n            <span jhiTranslate=\"artemisApp.gradingSystem.add\"></span>\r\n        </button>\r\n    </div>\r\n    <div>\r\n        <button (click)=\"save()\" [disabled]=\"isLoading || !validGradeSteps() || !validPresentationsConfig()\" class=\"btn btn-primary mr-1 mb-1\" type=\"button\">\r\n            <fa-icon [icon]=\"faSave\" />&nbsp;<span jhiTranslate=\"artemisApp.gradingSystem.save\"></span>\r\n        </button>\r\n        @if (existingGradingScale) {\r\n            <button\r\n                class=\"mb-1\"\r\n                jhiDeleteButton\r\n                [entityTitle]=\"''\"\r\n                [buttonSize]=\"ButtonSize.MEDIUM\"\r\n                deleteQuestion=\"artemisApp.gradingSystem.deleteQuestion\"\r\n                (delete)=\"delete()\"\r\n                [dialogError]=\"dialogError$\"\r\n                [disabled]=\"isLoading\"\r\n            >\r\n                <fa-icon [icon]=\"faTimes\"><span jhiTranslate=\"artemisApp.gradingSystem.delete\"></span></fa-icon>\r\n            </button>\r\n        }\r\n        @if (shouldShowGradingStepsAboveMaxPointsWarning()) {\r\n            <div class=\"alert alert-info mt-3\">\r\n                <fa-icon [icon]=\"faInfo\" />\r\n                <span jhiTranslate=\"artemisApp.gradingSystem.gradingStepsAboveMaxPointsWarning\"></span>\r\n            </div>\r\n        }\r\n        @if (invalidGradeStepsMessage) {\r\n            <div class=\"alert alert-warning mt-3\">\r\n                <fa-icon [icon]=\"faExclamationTriangle\" />\r\n                <span>\r\n                    {{ invalidGradeStepsMessage }}\r\n                </span>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["import_papaparse", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275$index_137_r3", "\u0275\u0275nextContext", "$index", "ctx_r3", "\u0275\u0275resetView", "setPercentageInterval", "\u0275\u0275advance", "\u0275\u0275property", "getPercentageInterval", "gradeStep_r5", "_r6", "setPointsInterval", "getPointsInterval", "maxPoints", "undefined", "\u0275\u0275template", "IntervalGradingSystemComponent_For_102_Conditional_4_Conditional_1_Template", "IntervalGradingSystemComponent_For_102_Conditional_4_Conditional_2_Template", "\u0275\u0275conditional", "gradeEditMode", "GradeEditMode", "PERCENTAGE", "POINTS", "\u0275\u0275twoWayListener", "_r7", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "gradeName", "\u0275\u0275twoWayProperty", "_r8", "IntervalGradingSystemComponent_For_102_Conditional_3_Template", "IntervalGradingSystemComponent_For_102_Conditional_4_Template", "IntervalGradingSystemComponent_For_102_Conditional_19_Template", "IntervalGradingSystemComponent_For_102_Conditional_20_Template", "_r1", "deleteGradeStep", "\u0275$count_137_r9", "\u0275\u0275pipeBind1", "\u0275\u0275pipeBind3", "\u0275\u0275sanitizeHtml", "gradingScale", "gradeType", "GradeType", "BONUS", "faTimes", "_r10", "delete", "ButtonSize", "MEDIUM", "dialogError$", "isLoading", "faInfo", "faExclamationTriangle", "\u0275\u0275textInterpolate1", "invalidGradeStepsMessage", "IntervalGradingSystemComponent", "BaseGradingSystemComponent", "modePickerOptions", "value", "labelKey", "btnClass", "createGradeStep", "gradeSteps", "length", "stickyGradeStep", "pop", "push", "selectedIndex", "setInclusivity", "forEach", "gradeStep", "lowerBoundInclusive", "lowerBoundInclusivity", "upperBoundInclusive", "first", "last", "newPercentageInterval", "previousGradeStep", "i", "currentGradeStep", "currentInterval", "lowerBoundPercentage", "upperBoundPercentage", "setPoints", "newPointsInterval", "lowerBoundPoints", "Error", "upperBoundPoints", "setPercentage", "index", "parseCSVFile", "csvFile", "Promise", "resolve", "reject", "parse", "header", "skipEmptyLines", "dynamicTyping", "complete", "results", "data", "error", "shouldShowGradingStepsAboveMaxPointsWarning", "steps", "slice", "isAnyGradingStepAboveMaxPoints", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "plagiarismGrade", "noParticipationGrade", "\u0275\u0275repeaterCreate", "IntervalGradingSystemComponent_For_102_Template", "\u0275\u0275repeaterTrackByIdentity", "save", "IntervalGradingSystemComponent_Conditional_125_Template", "IntervalGradingSystemComponent_Conditional_126_Template", "IntervalGradingSystemComponent_Conditional_127_Template", "\u0275\u0275textInterpolate2", "GRADE", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "GradingScale", "DEFAULT_PLAGIARISM_GRADE", "DEFAULT_NO_PARTICIPATION_GRADE", "\u0275\u0275repeater", "faPlus", "validGradeSteps", "validPresentationsConfig", "faSave", "existingGradingScale", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "RequiredValidator", "MinValidator", "NgModel", "FaIconComponent", "ArtemisTranslatePipe", "SafeHtmlPipe", "GradeStepBoundsPipe", "ModePickerComponent", "DeleteButtonDirective", "HelpIconComponent", "styles"]
}
