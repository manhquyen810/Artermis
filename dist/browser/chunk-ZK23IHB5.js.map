{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/organization-management/organization-management.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\nimport { Organization } from 'app/entities/organization.model';\r\nimport { OrganizationCountDto } from 'app/admin/organization-management/organization-count-dto.model';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OrganizationManagementService {\r\n    private http = inject(HttpClient);\r\n    private entityTitleService = inject(EntityTitleService);\r\n\r\n    public resourceUrl = 'api/core/organizations';\r\n    public adminResourceUrl = 'api/core/admin/organizations';\r\n\r\n    /**\r\n     * Send GET request to retrieve all organizations\r\n     */\r\n    getOrganizations(): Observable<Organization[]> {\r\n        return this.http.get<Organization[]>(this.adminResourceUrl).pipe(tap((orgs) => orgs?.forEach(this.sendTitlesToEntityTitleService.bind(this))));\r\n    }\r\n\r\n    /**\r\n     * Send GET request to retrieve the number of users and courses of\r\n     * all organizations\r\n     */\r\n    getNumberOfUsersAndCoursesOfOrganizations(): Observable<OrganizationCountDto[]> {\r\n        return this.http.get<OrganizationCountDto[]>(this.adminResourceUrl + '/count-all');\r\n    }\r\n\r\n    /**\r\n     * Send GET request to retrieve an organization by its Id\r\n     * @param organizationId\r\n     */\r\n    getOrganizationById(organizationId: number): Observable<Organization> {\r\n        return this.http.get(`${this.adminResourceUrl}/${organizationId}`).pipe(tap((org) => this.sendTitlesToEntityTitleService(org)));\r\n    }\r\n\r\n    /**\r\n     * Send GET request to retrieve an organization by Id with\r\n     * its list of users and courses\r\n     * @param organizationId\r\n     */\r\n    getOrganizationByIdWithUsersAndCourses(organizationId: number): Observable<Organization> {\r\n        return this.http.get(`${this.adminResourceUrl}/${organizationId}/full`).pipe(tap((org) => this.sendTitlesToEntityTitleService(org)));\r\n    }\r\n\r\n    /**\r\n     * Send GET request to retrieve all organizations of a given course\r\n     * @param courseId the id of the course to retrieve the organizations from\r\n     */\r\n    getOrganizationsByCourse(courseId: number): Observable<Organization[]> {\r\n        return this.http.get<Organization[]>(`${this.resourceUrl}/courses/${courseId}`).pipe(tap((orgs) => orgs?.forEach(this.sendTitlesToEntityTitleService.bind(this))));\r\n    }\r\n\r\n    /**\r\n     * Send GET request to retrieve all organizations of a given user\r\n     * @param userId the id of the user to retrieve the organizations from\r\n     */\r\n    getOrganizationsByUser(userId: number): Observable<Organization[]> {\r\n        return this.http.get<Organization[]>(`${this.adminResourceUrl}/users/${userId}`).pipe(tap((orgs) => orgs?.forEach(this.sendTitlesToEntityTitleService.bind(this))));\r\n    }\r\n\r\n    /**\r\n     * Send PUT request to update an organization\r\n     * @param organization the organization to update\r\n     */\r\n    update(organization: Organization): Observable<HttpResponse<Organization>> {\r\n        return this.http.put<Organization>(`${this.adminResourceUrl}/${organization.id}`, organization, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Send POST request to add a new organization\r\n     * @param organization the organization to add\r\n     */\r\n    add(organization: Organization): Observable<HttpResponse<Organization>> {\r\n        return this.http.post<Organization>(`${this.adminResourceUrl}`, organization, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Send a DELETE request to remove an organization\r\n     * @param organizationId the id of the organization to remove\r\n     */\r\n    deleteOrganization(organizationId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/${organizationId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Send a DELETE request to remove a user from an organization\r\n     * @param organizationId the id of the organization to remove the user from\r\n     * @param userLogin the user to remove\r\n     */\r\n    removeUserFromOrganization(organizationId: number, userLogin: string): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/${organizationId}/users/${userLogin}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Send a POST request to add a user to an organization\r\n     * @param organizationId the id of the organization to add the user to\r\n     * @param userLogin the user to add\r\n     */\r\n    addUserToOrganization(organizationId: number, userLogin: string): Observable<HttpResponse<void>> {\r\n        return this.http.post<void>(`${this.adminResourceUrl}/${organizationId}/users/${userLogin}`, {}, { observe: 'response' });\r\n    }\r\n\r\n    private sendTitlesToEntityTitleService(org: Organization | undefined | null) {\r\n        this.entityTitleService.setTitle(EntityType.ORGANIZATION, [org?.id], org?.name);\r\n    }\r\n}\r\n"],
  "mappings": "2IASA,IAAaA,GAA6B,IAAA,CAApC,MAAOA,CAA6B,CAC9BC,KAAOC,EAAOC,CAAU,EACxBC,mBAAqBF,EAAOG,CAAkB,EAE/CC,YAAc,yBACdC,iBAAmB,+BAK1BC,kBAAgB,CACZ,OAAO,KAAKP,KAAKQ,IAAoB,KAAKF,gBAAgB,EAAEG,KAAKC,EAAKC,GAASA,GAAMC,QAAQ,KAAKC,+BAA+BC,KAAK,IAAI,CAAC,CAAC,CAAC,CACjJ,CAMAC,2CAAyC,CACrC,OAAO,KAAKf,KAAKQ,IAA4B,KAAKF,iBAAmB,YAAY,CACrF,CAMAU,oBAAoBC,EAAsB,CACtC,OAAO,KAAKjB,KAAKQ,IAAI,GAAG,KAAKF,gBAAgB,IAAIW,CAAc,EAAE,EAAER,KAAKC,EAAKQ,GAAQ,KAAKL,+BAA+BK,CAAG,CAAC,CAAC,CAClI,CAOAC,uCAAuCF,EAAsB,CACzD,OAAO,KAAKjB,KAAKQ,IAAI,GAAG,KAAKF,gBAAgB,IAAIW,CAAc,OAAO,EAAER,KAAKC,EAAKQ,GAAQ,KAAKL,+BAA+BK,CAAG,CAAC,CAAC,CACvI,CAMAE,yBAAyBC,EAAgB,CACrC,OAAO,KAAKrB,KAAKQ,IAAoB,GAAG,KAAKH,WAAW,YAAYgB,CAAQ,EAAE,EAAEZ,KAAKC,EAAKC,GAASA,GAAMC,QAAQ,KAAKC,+BAA+BC,KAAK,IAAI,CAAC,CAAC,CAAC,CACrK,CAMAQ,uBAAuBC,EAAc,CACjC,OAAO,KAAKvB,KAAKQ,IAAoB,GAAG,KAAKF,gBAAgB,UAAUiB,CAAM,EAAE,EAAEd,KAAKC,EAAKC,GAASA,GAAMC,QAAQ,KAAKC,+BAA+BC,KAAK,IAAI,CAAC,CAAC,CAAC,CACtK,CAMAU,OAAOC,EAA0B,CAC7B,OAAO,KAAKzB,KAAK0B,IAAkB,GAAG,KAAKpB,gBAAgB,IAAImB,EAAaE,EAAE,GAAIF,EAAc,CAAEG,QAAS,UAAU,CAAE,CAC3H,CAMAC,IAAIJ,EAA0B,CAC1B,OAAO,KAAKzB,KAAK8B,KAAmB,GAAG,KAAKxB,gBAAgB,GAAImB,EAAc,CAAEG,QAAS,UAAU,CAAE,CACzG,CAMAG,mBAAmBd,EAAsB,CACrC,OAAO,KAAKjB,KAAKgC,OAAa,GAAG,KAAK1B,gBAAgB,IAAIW,CAAc,GAAI,CAAEW,QAAS,UAAU,CAAE,CACvG,CAOAK,2BAA2BhB,EAAwBiB,EAAiB,CAChE,OAAO,KAAKlC,KAAKgC,OAAa,GAAG,KAAK1B,gBAAgB,IAAIW,CAAc,UAAUiB,CAAS,GAAI,CAAEN,QAAS,UAAU,CAAE,CAC1H,CAOAO,sBAAsBlB,EAAwBiB,EAAiB,CAC3D,OAAO,KAAKlC,KAAK8B,KAAW,GAAG,KAAKxB,gBAAgB,IAAIW,CAAc,UAAUiB,CAAS,GAAI,CAAA,EAAI,CAAEN,QAAS,UAAU,CAAE,CAC5H,CAEQf,+BAA+BK,EAAoC,CACvE,KAAKf,mBAAmBiC,SAASC,EAAWC,aAAc,CAACpB,GAAKS,EAAE,EAAGT,GAAKqB,IAAI,CAClF,4CAnGSxC,EAA6B,6BAA7BA,EAA6ByC,QAA7BzC,EAA6B0C,UAAAC,WADhB,MAAM,CAAA,SACnB3C,CAA6B,GAAA",
  "names": ["OrganizationManagementService", "http", "inject", "HttpClient", "entityTitleService", "EntityTitleService", "resourceUrl", "adminResourceUrl", "getOrganizations", "get", "pipe", "tap", "orgs", "forEach", "sendTitlesToEntityTitleService", "bind", "getNumberOfUsersAndCoursesOfOrganizations", "getOrganizationById", "organizationId", "org", "getOrganizationByIdWithUsersAndCourses", "getOrganizationsByCourse", "courseId", "getOrganizationsByUser", "userId", "update", "organization", "put", "id", "observe", "add", "post", "deleteOrganization", "delete", "removeUserFromOrganization", "userLogin", "addUserToOrganization", "setTitle", "EntityType", "ORGANIZATION", "name", "factory", "\u0275fac", "providedIn"]
}
