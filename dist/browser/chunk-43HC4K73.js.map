{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/submission-sync-payload.model.ts", "src/main/webapp/app/entities/submission-patch-payload.model.ts", "src/main/webapp/app/exercises/shared/team-submission-sync/team-submission-sync.component.ts", "src/main/webapp/app/exercises/shared/team/team-participate/team-students-online-list.component.ts", "src/main/webapp/app/exercises/shared/team/team-participate/team-students-online-list.component.html", "src/main/webapp/app/exercises/shared/team/team-participate/team-participate-info-box.component.ts", "src/main/webapp/app/exercises/shared/team/team-participate/team-participate-info-box.component.html"],
  "sourcesContent": ["import { User } from 'app/core/user/user.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\n\r\nexport class SubmissionSyncPayload {\r\n    public submission: Submission;\r\n    public sender: User;\r\n}\r\n\r\nexport function isSubmissionSyncPayload(arg: any): arg is SubmissionSyncPayload {\r\n    return arg.submission !== undefined && arg.sender !== undefined;\r\n}\r\n", "import { SubmissionPatch } from 'app/entities/submission-patch.model';\r\n\r\n/**\r\n * A payload for a submission patch. It contains the patch and the sender of the patch.\r\n */\r\nexport class SubmissionPatchPayload {\r\n    public submissionPatch: SubmissionPatch;\r\n    public sender: string;\r\n}\r\n\r\n/**\r\n * Type guard for the SubmissionPatchPayload\r\n * @param arg\r\n */\r\nexport function isSubmissionPatchPayload(arg: any): arg is SubmissionPatchPayload {\r\n    return arg.submissionPatch !== undefined && arg.sender !== undefined;\r\n}\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { throttleTime } from 'rxjs/operators';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { SubmissionSyncPayload, isSubmissionSyncPayload } from 'app/entities/submission-sync-payload.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { Observable } from 'rxjs';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { SubmissionPatch } from 'app/entities/submission-patch.model';\r\nimport { SubmissionPatchPayload, isSubmissionPatchPayload } from 'app/entities/submission-patch-payload.model';\r\n\r\n@Component({\r\n    selector: 'jhi-team-submission-sync',\r\n    template: '',\r\n})\r\nexport class TeamSubmissionSyncComponent implements OnInit {\r\n    private accountService = inject(AccountService);\r\n    private teamSubmissionWebsocketService = inject(WebsocketService);\r\n    private alertService = inject(AlertService);\r\n\r\n    // Sync settings\r\n    readonly THROTTLE_TIME = 2000; // ms\r\n\r\n    @Input() exerciseType: ExerciseType;\r\n    @Input() submissionObservable?: Observable<Submission>;\r\n    @Input() submissionPatchObservable?: Observable<SubmissionPatch>;\r\n    @Input() participation: StudentParticipation;\r\n\r\n    @Output() receiveSubmission = new EventEmitter<Submission>();\r\n    @Output() receiveSubmissionPatch = new EventEmitter<SubmissionPatch>();\r\n\r\n    currentUser: User;\r\n    websocketTopic: string;\r\n\r\n    constructor() {\r\n        this.accountService.identity().then((user: User) => (this.currentUser = user));\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component creation is done\r\n     */\r\n    ngOnInit(): void {\r\n        this.websocketTopic = this.buildWebsocketTopic('');\r\n        this.teamSubmissionWebsocketService.subscribe(this.websocketTopic);\r\n        this.setupReceiver();\r\n        this.setupSender();\r\n    }\r\n\r\n    /**\r\n     * Receives updated submissions or submission patches from other team members and emits them\r\n     */\r\n    private setupReceiver() {\r\n        this.teamSubmissionWebsocketService.receive(this.websocketTopic).subscribe({\r\n            next: (payload: SubmissionSyncPayload | SubmissionPatchPayload) => {\r\n                if (isSubmissionSyncPayload(payload) && !this.isSelf(payload.sender)) {\r\n                    this.receiveSubmission.emit(payload.submission);\r\n                } else if (isSubmissionPatchPayload(payload)) {\r\n                    this.receiveSubmissionPatch.emit(payload.submissionPatch);\r\n                }\r\n            },\r\n            error: (error) => this.onError(error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the submission and submission patch streams and sends out\r\n     * updated submissions or submission patches based on those own changes via websockets\r\n     */\r\n    private setupSender() {\r\n        this.submissionObservable?.pipe(throttleTime(this.THROTTLE_TIME, undefined, { leading: true, trailing: true })).subscribe({\r\n            next: (submission: Submission) => {\r\n                if (submission.participation) {\r\n                    submission.participation.exercise = undefined;\r\n                    submission.participation.submissions = [];\r\n                }\r\n                this.teamSubmissionWebsocketService.send<Submission>(this.buildWebsocketTopic('/update'), submission);\r\n            },\r\n            error: (error) => this.onError(error),\r\n        });\r\n\r\n        this.submissionPatchObservable?.subscribe({\r\n            next: (submissionPatch: SubmissionPatch) => {\r\n                this.teamSubmissionWebsocketService.send<SubmissionPatch>(this.buildWebsocketTopic('/patch'), submissionPatch);\r\n            },\r\n            error: (error) => this.onError(error),\r\n        });\r\n    }\r\n\r\n    private isSelf(user: User) {\r\n        return this.currentUser.login === user.login;\r\n    }\r\n\r\n    private buildWebsocketTopic(path = ''): string {\r\n        return `/topic/participations/${this.participation.id}/team/${this.exerciseType}-submissions${path}`;\r\n    }\r\n\r\n    private onError(error: string) {\r\n        this.alertService.error(error);\r\n    }\r\n}\r\n", "import { Component, Input, OnDestroy, OnInit, ViewEncapsulation, inject } from '@angular/core';\r\nimport { OnlineTeamStudent, Team } from 'app/entities/team.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { orderBy } from 'lodash-es';\r\nimport { Observable } from 'rxjs';\r\nimport { map, throttleTime } from 'rxjs/operators';\r\nimport dayjs from 'dayjs/esm';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { faCircle, faHistory } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Component({\r\n    selector: 'jhi-team-students-online-list',\r\n    templateUrl: './team-students-online-list.component.html',\r\n    styleUrls: ['./team-students-online-list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [NgClass, FaIconComponent, NgbTooltip],\r\n})\r\nexport class TeamStudentsOnlineListComponent implements OnInit, OnDestroy {\r\n    private accountService = inject(AccountService);\r\n    private websocketService = inject(WebsocketService);\r\n\r\n    readonly SHOW_TYPING_DURATION = 2000; // ms\r\n    readonly SEND_TYPING_INTERVAL = this.SHOW_TYPING_DURATION / 1.5;\r\n\r\n    @Input() typing$: Observable<any>;\r\n    @Input() participation: StudentParticipation;\r\n\r\n    currentUser: User;\r\n    onlineTeamStudents: OnlineTeamStudent[] = [];\r\n    typingTeamStudents: OnlineTeamStudent[] = [];\r\n    websocketTopic: string;\r\n\r\n    // Icons\r\n    faCircle = faCircle;\r\n    faHistory = faHistory;\r\n\r\n    /**\r\n     * Subscribes to the websocket topic \"team\" for the given participation\r\n     *\r\n     * The current list of online team members is sent upon subscribing, however, this message cannot be received yet by the\r\n     * client sometimes and thus the list is explicitly requested once more after a short timeout to cover those cases.\r\n     */\r\n    ngOnInit(): void {\r\n        this.accountService.identity().then((user: User) => {\r\n            this.currentUser = user;\r\n            this.setupOnlineTeamStudentsReceiver();\r\n            this.setupTypingIndicatorSender();\r\n        });\r\n    }\r\n\r\n    private setupOnlineTeamStudentsReceiver() {\r\n        this.websocketTopic = this.buildWebsocketTopic();\r\n        this.websocketService.subscribe(this.websocketTopic);\r\n        this.websocketService\r\n            .receive(this.websocketTopic)\r\n            .pipe(map(this.convertOnlineTeamStudentsFromServer))\r\n            .subscribe({\r\n                next: (students: OnlineTeamStudent[]) => {\r\n                    this.onlineTeamStudents = students;\r\n                    this.computeTypingTeamStudents();\r\n                },\r\n                error: (error) => captureException(error),\r\n            });\r\n        setTimeout(() => {\r\n            this.websocketService.send<object>(this.buildWebsocketTopic('/trigger'), {});\r\n        }, 700);\r\n    }\r\n\r\n    private setupTypingIndicatorSender() {\r\n        if (this.typing$) {\r\n            this.typing$.pipe(throttleTime(this.SEND_TYPING_INTERVAL)).subscribe({\r\n                next: () => this.websocketService.send<object>(this.buildWebsocketTopic('/typing'), {}),\r\n                error: (error) => captureException(error),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component destruction is done\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.websocketService.unsubscribe(this.websocketTopic);\r\n    }\r\n\r\n    get team(): Team {\r\n        return this.participation.team!;\r\n    }\r\n\r\n    /**\r\n     * @return list of team members (1. current user, x. other users sorted alphabetically by full name)\r\n     */\r\n    get studentList(): User[] {\r\n        return [...(this.self ? [this.self] : []), ...orderBy(this.otherStudents, ['name'])];\r\n    }\r\n\r\n    get self(): User | undefined {\r\n        return this.team.students?.find(this.isSelf);\r\n    }\r\n\r\n    get otherStudents(): User[] {\r\n        return this.team.students?.filter(this.isOther) || [];\r\n    }\r\n\r\n    isSelf = (user: User): boolean => {\r\n        return user.id === this.currentUser?.id;\r\n    };\r\n\r\n    isOther = (user: User): boolean => {\r\n        return !this.isSelf(user);\r\n    };\r\n\r\n    isOnline = (user: User): boolean => {\r\n        return this.onlineTeamStudents.map((student: OnlineTeamStudent) => student.login).includes(user.login!);\r\n    };\r\n\r\n    lastActionDate = (user: User): dayjs.Dayjs | undefined => {\r\n        return this.onlineTeamStudents.find((student: OnlineTeamStudent) => student.login === user.login!)?.lastActionDate;\r\n    };\r\n\r\n    isTyping = (user: User): boolean => {\r\n        return this.typingTeamStudents.map((student: OnlineTeamStudent) => student.login).includes(user.login!);\r\n    };\r\n\r\n    /**\r\n     * Computes which of the online team members are currently typing\r\n     *\r\n     * Typing students are those online students whose {lastTypingDate} is more recent than {SHOW_TYPING_DURATION} ms ago.\r\n     * If there are any typing students, find the timestamp of the earliest expiration of the typing state among them.\r\n     * Then, schedule another computation for that timestamp.\r\n     */\r\n    private computeTypingTeamStudents() {\r\n        this.typingTeamStudents = this.onlineTeamStudents.filter((student: OnlineTeamStudent) => {\r\n            return Boolean(student.lastTypingDate?.isAfter(dayjs().subtract(this.SHOW_TYPING_DURATION, 'ms')));\r\n        });\r\n        if (this.typingTeamStudents.length > 0) {\r\n            const lastTypingDates = this.typingTeamStudents.map((student: OnlineTeamStudent) => student.lastTypingDate).filter(Boolean);\r\n            const minTypingDate = dayjs.min(lastTypingDates);\r\n            if (minTypingDate) {\r\n                const earliestExpiration = minTypingDate.add(this.SHOW_TYPING_DURATION, 'ms');\r\n                const timeToExpirationInMilliseconds = earliestExpiration.diff(dayjs());\r\n                setTimeout(() => this.computeTypingTeamStudents(), timeToExpirationInMilliseconds);\r\n            }\r\n        }\r\n    }\r\n\r\n    private convertOnlineTeamStudentsFromServer(students: OnlineTeamStudent[]) {\r\n        return students.map((student) => {\r\n            return {\r\n                ...student,\r\n                lastTypingDate: student.lastTypingDate !== null ? dayjs(student.lastTypingDate) : null,\r\n                lastActionDate: student.lastActionDate !== null ? dayjs(student.lastActionDate) : null,\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Topic for updates on online status of team members (needs to match route in ParticipationTeamWebsocketService.java)\r\n     */\r\n    private buildWebsocketTopic(path = ''): string {\r\n        return `/topic/participations/${this.participation.id}/team${path}`;\r\n    }\r\n}\r\n", "<div>\r\n    <h5 class=\"fw-medium\">Team</h5>\r\n    <ul class=\"team-students-online-list\">\r\n        @for (student of studentList; track student) {\r\n            <li class=\"student-item\" [ngClass]=\"{ online: isOnline(student) }\">\r\n                <div class=\"indicator\">\r\n                    @if (isOther(student) && isTyping(student)) {\r\n                        <div class=\"typing-indicator\">\r\n                            <div class=\"bounce1\"></div>\r\n                            <div class=\"bounce2\"></div>\r\n                            <div class=\"bounce3\"></div>\r\n                        </div>\r\n                    } @else {\r\n                        <fa-icon class=\"student-status\" [icon]=\"faCircle\" size=\"sm\" />\r\n                    }\r\n                </div>\r\n                <span class=\"student-name\"\r\n                    >{{ student.name }}\r\n                    @if (isSelf(student)) {\r\n                        <span class=\"text-body-secondary\">(you)</span>\r\n                    }\r\n                </span>\r\n                @if (isOther(student) && lastActionDate(student)) {\r\n                    <span ngbTooltip=\"{{ lastActionDate(student)!.fromNow() }}\" triggers=\"click:blur\" position=\"top\" tooltipClass=\"student-last-action-tooltip\">\r\n                        <button class=\"student-last-action-trigger ms-1\">\r\n                            <fa-icon [icon]=\"faHistory\" />\r\n                        </button>\r\n                    </span>\r\n                }\r\n            </li>\r\n        }\r\n    </ul>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Observable } from 'rxjs';\r\nimport { JhiConnectionStatusComponent } from 'app/shared/connection-status/connection-status.component';\r\nimport { TeamStudentsOnlineListComponent } from './team-students-online-list.component';\r\n\r\n@Component({\r\n    selector: 'jhi-team-participate-info-box',\r\n    templateUrl: './team-participate-info-box.component.html',\r\n    styleUrls: ['./team-participate-info-box.component.scss'],\r\n    imports: [JhiConnectionStatusComponent, TeamStudentsOnlineListComponent],\r\n})\r\nexport class TeamParticipateInfoBoxComponent {\r\n    @Input() exercise: Exercise;\r\n    @Input() participation: StudentParticipation;\r\n    @Input() stickyEnabled = true;\r\n    @Input() dockedToLeftSide = false;\r\n    @Input() dockedToRightSide = false;\r\n    @Input() typing$: Observable<any>;\r\n}\r\n", "<div class=\"team-participate-info-box\" [class.sticky-enabled]=\"stickyEnabled\">\r\n    <div class=\"sticky-box bg-light\" [class.docked-to-left-side]=\"dockedToLeftSide\" [class.docked-to-right-side]=\"dockedToRightSide\">\r\n        <div class=\"d-flex justify-content-end\">\r\n            <jhi-connection-status class=\"text-end\" />\r\n        </div>\r\n        <jhi-team-students-online-list class=\"mt-3\" [participation]=\"participation\" [typing$]=\"typing$\" />\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["isSubmissionSyncPayload", "arg", "submission", "undefined", "sender", "isSubmissionPatchPayload", "arg", "submissionPatch", "undefined", "sender", "TeamSubmissionSyncComponent", "accountService", "inject", "AccountService", "teamSubmissionWebsocketService", "WebsocketService", "alertService", "AlertService", "THROTTLE_TIME", "exerciseType", "submissionObservable", "submissionPatchObservable", "participation", "receiveSubmission", "EventEmitter", "receiveSubmissionPatch", "currentUser", "websocketTopic", "constructor", "identity", "then", "user", "ngOnInit", "buildWebsocketTopic", "subscribe", "setupReceiver", "setupSender", "receive", "next", "payload", "isSubmissionSyncPayload", "isSelf", "sender", "emit", "submission", "isSubmissionPatchPayload", "submissionPatch", "error", "onError", "pipe", "throttleTime", "undefined", "leading", "trailing", "exercise", "submissions", "send", "login", "path", "id", "selectors", "inputs", "outputs", "decls", "vars", "template", "rf", "ctx", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faCircle", "\u0275\u0275propertyInterpolate", "lastActionDate", "student_r2", "fromNow", "faHistory", "\u0275\u0275template", "TeamStudentsOnlineListComponent_For_8_Conditional_5_Template", "TeamStudentsOnlineListComponent_For_8_Conditional_6_Template", "TeamStudentsOnlineListComponent_For_8_Conditional_10_Template", "TeamStudentsOnlineListComponent_For_8_Conditional_12_Template", "\u0275\u0275pureFunction1", "_c0", "isOnline", "\u0275\u0275conditional", "isOther", "isTyping", "\u0275\u0275textInterpolate1", "name", "isSelf", "TeamStudentsOnlineListComponent", "accountService", "inject", "AccountService", "websocketService", "WebsocketService", "SHOW_TYPING_DURATION", "SEND_TYPING_INTERVAL", "typing$", "participation", "currentUser", "onlineTeamStudents", "typingTeamStudents", "websocketTopic", "ngOnInit", "identity", "then", "user", "setupOnlineTeamStudentsReceiver", "setupTypingIndicatorSender", "buildWebsocketTopic", "subscribe", "receive", "pipe", "map", "convertOnlineTeamStudentsFromServer", "next", "students", "computeTypingTeamStudents", "error", "captureException", "setTimeout", "send", "throttleTime", "ngOnDestroy", "unsubscribe", "team", "studentList", "self", "orderBy", "otherStudents", "find", "filter", "id", "student", "login", "includes", "Boolean", "lastTypingDate", "isAfter", "dayjs", "subtract", "length", "lastTypingDates", "minTypingDate", "min", "timeToExpirationInMilliseconds", "add", "diff", "__spreadProps", "__spreadValues", "path", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "TeamStudentsOnlineListComponent_For_8_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "NgClass", "FaIconComponent", "NgbTooltip", "styles", "encapsulation", "TeamParticipateInfoBoxComponent", "exercise", "participation", "stickyEnabled", "dockedToLeftSide", "dockedToRightSide", "typing$", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275classProp", "\u0275\u0275advance", "\u0275\u0275property", "JhiConnectionStatusComponent", "TeamStudentsOnlineListComponent", "styles"]
}
