{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/file-upload/manage/file-upload-exercise-management-resolve.service.ts"],
  "sourcesContent": ["import { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { FileUploadExerciseService } from 'app/exercises/file-upload/manage/file-upload-exercise.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { filter, map, of } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileUploadExerciseManagementResolve implements Resolve<FileUploadExercise> {\r\n    private fileUploadExerciseService = inject(FileUploadExerciseService);\r\n    private courseService = inject(CourseManagementService);\r\n    private exerciseGroupService = inject(ExerciseGroupService);\r\n\r\n    /**\r\n     * Resolves the route and initializes file upload exercise either from exerciseId (existing exercise) or\r\n     * from course id (new exercise)\r\n     * @param route\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot) {\r\n        if (route.params['exerciseId']) {\r\n            return this.fileUploadExerciseService.find(route.params['exerciseId']).pipe(\r\n                filter((res) => !!res.body),\r\n                map((fileUploadExercise: HttpResponse<FileUploadExercise>) => fileUploadExercise.body!),\r\n            );\r\n        } else if (route.params['courseId']) {\r\n            if (route.params['examId'] && route.params['exerciseGroupId']) {\r\n                return this.exerciseGroupService.find(route.params['courseId'], route.params['examId'], route.params['exerciseGroupId']).pipe(\r\n                    filter((res) => !!res.body),\r\n                    map((exerciseGroup: HttpResponse<ExerciseGroup>) => {\r\n                        const fileUploadExercise = new FileUploadExercise(undefined, exerciseGroup.body!);\r\n                        fileUploadExercise.filePattern = 'pdf, png';\r\n                        return fileUploadExercise;\r\n                    }),\r\n                );\r\n            } else {\r\n                return this.courseService.find(route.params['courseId']).pipe(\r\n                    filter((res) => !!res.body),\r\n                    map((course: HttpResponse<Course>) => {\r\n                        const fileUploadExercise = new FileUploadExercise(course.body!, undefined);\r\n                        fileUploadExercise.filePattern = 'pdf, png';\r\n                        return fileUploadExercise;\r\n                    }),\r\n                );\r\n            }\r\n        }\r\n        return of(new FileUploadExercise(undefined, undefined));\r\n    }\r\n}\r\n"],
  "mappings": "sOAYA,IAAaA,GAAmC,IAAA,CAA1C,MAAOA,CAAmC,CACpCC,0BAA4BC,EAAOC,CAAyB,EAC5DC,cAAgBF,EAAOG,CAAuB,EAC9CC,qBAAuBJ,EAAOK,CAAoB,EAO1DC,QAAQC,EAA6B,CACjC,OAAIA,EAAMC,OAAO,WACN,KAAKT,0BAA0BU,KAAKF,EAAMC,OAAO,UAAa,EAAEE,KACnEC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKC,GAAyDA,EAAmBF,IAAK,CAAC,EAEpFN,EAAMC,OAAO,SAChBD,EAAMC,OAAO,QAAaD,EAAMC,OAAO,gBAChC,KAAKJ,qBAAqBK,KAAKF,EAAMC,OAAO,SAAaD,EAAMC,OAAO,OAAWD,EAAMC,OAAO,eAAkB,EAAEE,KACrHC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKE,GAA8C,CAC/C,IAAMD,EAAqB,IAAIE,EAAmBC,OAAWF,EAAcH,IAAK,EAChFE,OAAAA,EAAmBI,YAAc,WAC1BJ,CACX,CAAC,CAAC,EAGC,KAAKb,cAAcO,KAAKF,EAAMC,OAAO,QAAW,EAAEE,KACrDC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKM,GAAgC,CACjC,IAAML,EAAqB,IAAIE,EAAmBG,EAAOP,KAAOK,MAAS,EACzEH,OAAAA,EAAmBI,YAAc,WAC1BJ,CACX,CAAC,CAAC,EAIPM,EAAG,IAAIJ,EAAmBC,OAAWA,MAAS,CAAC,CAC1D,4CAtCSpB,EAAmC,6BAAnCA,EAAmCwB,QAAnCxB,EAAmCyB,UAAAC,WADtB,MAAM,CAAA,SACnB1B,CAAmC,GAAA",
  "names": ["FileUploadExerciseManagementResolve", "fileUploadExerciseService", "inject", "FileUploadExerciseService", "courseService", "CourseManagementService", "exerciseGroupService", "ExerciseGroupService", "resolve", "route", "params", "find", "pipe", "filter", "res", "body", "map", "fileUploadExercise", "exerciseGroup", "FileUploadExercise", "undefined", "filePattern", "course", "of", "factory", "\u0275fac", "providedIn"]
}
