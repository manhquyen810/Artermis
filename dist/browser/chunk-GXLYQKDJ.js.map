{
  "version": 3,
  "sources": ["src/main/webapp/app/assessment/assessment-instructions/expandable-section/expandable-section.component.ts", "src/main/webapp/app/assessment/assessment-instructions/expandable-section/expandable-section.component.html", "src/main/webapp/app/assessment/structured-grading-instructions-assessment-layout/structured-grading-instructions-assessment-layout.component.ts", "src/main/webapp/app/assessment/structured-grading-instructions-assessment-layout/structured-grading-instructions-assessment-layout.component.html"],
  "sourcesContent": ["import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { faAngleDown, faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-expandable-section',\r\n    templateUrl: './expandable-section.component.html',\r\n    imports: [FaIconComponent, NgbCollapse, ArtemisTranslatePipe],\r\n})\r\nexport class ExpandableSectionComponent implements OnInit {\r\n    private localStorageService = inject(LocalStorageService);\r\n\r\n    @Input() headerKey: string;\r\n    @Input() hasTranslation = true;\r\n    @Input() isSubHeader = false;\r\n\r\n    isCollapsed: boolean;\r\n    // Icons\r\n    faAngleRight = faAngleRight;\r\n    faAngleDown = faAngleDown;\r\n\r\n    readonly PREFIX = 'collapsed.';\r\n\r\n    ngOnInit(): void {\r\n        this.isCollapsed = !!this.localStorageService.retrieve(this.storageKey);\r\n        this.localStorageService.store(this.storageKey, this.isCollapsed);\r\n    }\r\n\r\n    /**\r\n     * Toggle the state of the instruction block and store the updated state in the local storage.\r\n     */\r\n    toggleCollapsed() {\r\n        this.isCollapsed = !this.isCollapsed;\r\n        this.localStorageService.store(this.storageKey, this.isCollapsed);\r\n    }\r\n\r\n    /**\r\n     * Returns the key to identify the value in the local storage\r\n     */\r\n    get storageKey() {\r\n        return this.PREFIX + this.headerKey;\r\n    }\r\n}\r\n", "@if (hasTranslation === false && headerKey !== null && isSubHeader === false) {\r\n    <h5 class=\"expandable-header\" (click)=\"toggleCollapsed()\">\r\n        {{ headerKey }}\r\n        <fa-icon [icon]=\"isCollapsed ? faAngleRight : faAngleDown\" />\r\n    </h5>\r\n}\r\n@if (hasTranslation === true && headerKey !== null && isSubHeader === false) {\r\n    <h5 class=\"expandable-header\" (click)=\"toggleCollapsed()\">\r\n        {{ headerKey | artemisTranslate }}\r\n        <fa-icon [icon]=\"isCollapsed ? faAngleRight : faAngleDown\" />\r\n    </h5>\r\n}\r\n@if (hasTranslation === false && headerKey !== null && isSubHeader === true) {\r\n    <h6 class=\"expandable-header\" (click)=\"toggleCollapsed()\">\r\n        {{ headerKey }}\r\n        <fa-icon [icon]=\"isCollapsed ? faAngleRight : faAngleDown\" />\r\n    </h6>\r\n}\r\n<div [ngbCollapse]=\"isCollapsed\">\r\n    <ng-content />\r\n</div>\r\n", "import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { AfterViewInit, Component, Input, OnInit, QueryList, ViewChildren } from '@angular/core';\r\nimport { faCompress, faExpand, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ExpandableSectionComponent } from 'app/assessment/assessment-instructions/expandable-section/expandable-section.component';\r\nimport { delay, startWith } from 'rxjs';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-structured-grading-instructions-assessment-layout',\r\n    templateUrl: './structured-grading-instructions-assessment-layout.component.html',\r\n    styleUrls: ['./structured-grading-instructions-assessment-layout.component.scss'],\r\n    imports: [FaIconComponent, TranslateDirective, ExpandableSectionComponent, NgbTooltip, HelpIconComponent, HtmlForMarkdownPipe],\r\n})\r\nexport class StructuredGradingInstructionsAssessmentLayoutComponent implements OnInit, AfterViewInit {\r\n    @Input() public criteria: GradingCriterion[];\r\n    @Input() readonly: boolean;\r\n    allowDrop: boolean;\r\n    // Icons\r\n    faInfoCircle = faInfoCircle;\r\n    faExpand = faExpand;\r\n    faCompress = faCompress;\r\n\r\n    @ViewChildren(ExpandableSectionComponent) expandableSections: QueryList<ExpandableSectionComponent>;\r\n    collapseToggles: ExpandableSectionComponent[] = [];\r\n\r\n    /**\r\n     * OnInit set the allowDrop property to allow drop of SGI if not in readOnly mode\r\n     */\r\n    ngOnInit(): void {\r\n        this.allowDrop = !this.readonly;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.expandableSections.changes\r\n            .pipe(\r\n                startWith([undefined]), // to catch the initial value\r\n                delay(0), // wait for all current async tasks to finish, which could change the query list using ngIf etc.\r\n            )\r\n            .subscribe(() => {\r\n                this.collectCollapsableSections();\r\n            });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.collapseToggles.forEach((section) => {\r\n            if (!section.isCollapsed) {\r\n                section.toggleCollapsed();\r\n            }\r\n        });\r\n    }\r\n\r\n    expandAll() {\r\n        this.collapseToggles.forEach((section) => {\r\n            if (section.isCollapsed) {\r\n                section.toggleCollapsed();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the tooltip of the draggable grading instruction to be equal to the feedback detail text\r\n     * @param {GradingInstruction} instr - the instruction object from which the feedback detail text is retrieved\r\n     */\r\n    setTooltip(instr: GradingInstruction) {\r\n        return 'Feedback: ' + instr.feedback;\r\n    }\r\n\r\n    /**\r\n     * Set the color of the draggable grading instruction based on the credits of the instruction\r\n     *  @param {GradingInstruction} instr - the instruction object we set its color based on its credits\r\n     */\r\n    setInstrColour(instr: GradingInstruction) {\r\n        let colour;\r\n        if (instr.credits === 0) {\r\n            colour = 'var(--sgi-assessment-layout-zero-background)';\r\n        } else if (instr.credits < 0) {\r\n            colour = 'var(--sgi-assessment-layout-negative-background)';\r\n        } else {\r\n            colour = 'var(--sgi-assessment-layout-positive-background)';\r\n        }\r\n        return colour;\r\n    }\r\n    setScore(nr: number) {\r\n        return nr + 'P';\r\n    }\r\n    /**\r\n     * Connects the SGI with the Feedback of a Submission Element in assessment detail\r\n     * @param {Event} event - The drag event\r\n     * @param {Object} instruction - The SGI element that should be connected with the feedback on drop\r\n     * the corresponding drop method is in AssessmentDetailComponent\r\n     */\r\n    drag(event: any, instruction: GradingInstruction) {\r\n        // The mimetype has to be text/plain to enable dragging into an external application, e.g. Orion, Apollon\r\n        event.dataTransfer.setData('text/plain', JSON.stringify(instruction));\r\n    }\r\n    /**\r\n     * disables drag if on readOnly mode\r\n     */\r\n    disableDrag() {\r\n        return this.allowDrop;\r\n    }\r\n\r\n    collectCollapsableSections() {\r\n        if (this.expandableSections) {\r\n            this.collapseToggles = this.expandableSections.toArray();\r\n        }\r\n    }\r\n}\r\n", "@if (criteria) {\r\n    <div class=\"mb-2\">\r\n        <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" data-bs-toggle=\"button\" (click)=\"expandAll()\">\r\n            <fa-icon [icon]=\"faExpand\" /> <span jhiTranslate=\"artemisApp.assessmentInstructions.expandAll\"></span>\r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" data-bs-toggle=\"button\" (click)=\"collapseAll()\">\r\n            <fa-icon [icon]=\"faCompress\" /> <span jhiTranslate=\"artemisApp.assessmentInstructions.collapseAll\"></span>\r\n        </button>\r\n    </div>\r\n}\r\n@if (allowDrop) {\r\n    <div class=\"alert alert-info\">\r\n        <fa-icon [icon]=\"faInfoCircle\" />\r\n        <span jhiTranslate=\"artemisApp.exercise.dragDropInstruction\"></span>\r\n    </div>\r\n}\r\n@for (criterion of criteria; track criterion; let criterionIndex = $index) {\r\n    <div>\r\n        <jhi-expandable-section [hasTranslation]=\"false\" [headerKey]=\"criterion.title\" [isSubHeader]=\"true\">\r\n            @for (instruction of criterion!.structuredGradingInstructions; track instruction; let instructionIndex = $index) {\r\n                <div\r\n                    class=\"rounded\"\r\n                    draggable=\"{{ allowDrop }}\"\r\n                    (dragstart)=\"disableDrag()\"\r\n                    (dragstart)=\"drag($event, instruction)\"\r\n                    id=\"criterion-{{ criterionIndex }}-instruction-{{ instructionIndex }}\"\r\n                    [style.background-color]=\"setInstrColour(instruction)\"\r\n                >\r\n                    <table class=\"table layout-table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td [innerHTML]=\"setScore(instruction.credits)\" class=\"td-score\"></td>\r\n                                <td [innerHTML]=\"instruction!.gradingScale! | htmlForMarkdown\"></td>\r\n                                <td [innerHTML]=\"instruction!.instructionDescription! | htmlForMarkdown\" [ngbTooltip]=\"setTooltip(instruction)\"></td>\r\n                                <td class=\"td-usage-count\">\r\n                                    @if (instruction!.usageCount && instruction!.usageCount !== 0) {\r\n                                        <span>{{ instruction.usageCount }}</span>\r\n                                    } @else {\r\n                                        &#8734;\r\n                                    }\r\n                                    <jhi-help-icon text=\"artemisApp.exercise.usageCountHint\" />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n        </jhi-expandable-section>\r\n        <br />\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleCollapsed", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "headerKey", "\u0275\u0275property", "isCollapsed", "faAngleRight", "faAngleDown", "_r3", "\u0275\u0275pipeBind1", "_r4", "ExpandableSectionComponent", "localStorageService", "inject", "LocalStorageService", "hasTranslation", "isSubHeader", "PREFIX", "ngOnInit", "retrieve", "storageKey", "store", "selectors", "inputs", "ngContentSelectors", "_c0", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ExpandableSectionComponent_Conditional_0_Template", "ExpandableSectionComponent_Conditional_1_Template", "ExpandableSectionComponent_Conditional_2_Template", "\u0275\u0275projection", "\u0275\u0275conditional", "FaIconComponent", "NgbCollapse", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "expandAll", "\u0275\u0275element", "\u0275\u0275elementEnd", "collapseAll", "\u0275\u0275advance", "\u0275\u0275property", "faExpand", "faCompress", "faInfoCircle", "\u0275\u0275textInterpolate", "instruction_r4", "usageCount", "_r3", "disableDrag", "$event", "$implicit", "drag", "\u0275\u0275template", "StructuredGradingInstructionsAssessmentLayoutComponent_For_3_For_6_Conditional_19_Template", "StructuredGradingInstructionsAssessmentLayoutComponent_For_3_For_6_Conditional_20_Template", "\u0275\u0275styleProp", "setInstrColour", "\u0275\u0275propertyInterpolate", "allowDrop", "\u0275\u0275propertyInterpolate2", "\u0275$index_39_r6", "\u0275$index_47_r5", "setScore", "credits", "\u0275\u0275sanitizeHtml", "\u0275\u0275pipeBind1", "gradingScale", "instructionDescription", "setTooltip", "\u0275\u0275conditional", "\u0275\u0275repeaterCreate", "StructuredGradingInstructionsAssessmentLayoutComponent_For_3_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "criterion_r7", "title", "\u0275\u0275repeater", "structuredGradingInstructions", "StructuredGradingInstructionsAssessmentLayoutComponent", "criteria", "readonly", "expandableSections", "collapseToggles", "ngOnInit", "ngAfterViewInit", "changes", "pipe", "startWith", "undefined", "delay", "subscribe", "collectCollapsableSections", "forEach", "section", "isCollapsed", "toggleCollapsed", "instr", "feedback", "colour", "nr", "event", "instruction", "dataTransfer", "setData", "JSON", "stringify", "toArray", "selectors", "viewQuery", "rf", "ctx", "ExpandableSectionComponent", "StructuredGradingInstructionsAssessmentLayoutComponent_Conditional_0_Template", "StructuredGradingInstructionsAssessmentLayoutComponent_Conditional_1_Template", "StructuredGradingInstructionsAssessmentLayoutComponent_For_3_Template", "FaIconComponent", "TranslateDirective", "NgbTooltip", "HelpIconComponent", "HtmlForMarkdownPipe", "styles"]
}
