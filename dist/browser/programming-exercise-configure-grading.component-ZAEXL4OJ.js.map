{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/programming/programming-exercise-test-case.model.ts", "src/main/webapp/app/entities/programming/static-code-analysis-category.model.ts", "src/main/webapp/app/exercises/programming/manage/grading/charts/programming-grading-charts.directive.ts", "src/main/webapp/app/entities/programming/programming-exercise-test-case-statistics.model.ts", "src/main/webapp/app/exercises/programming/manage/grading/tasks/programming-exercise-task.service.ts", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading-status.component.ts", "src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-re-evaluate-button.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading-actions.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-grading-submission-policy-configuration-actions.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/charts/test-case-passed-builds-chart.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/tasks/programming-exercise-task/programming-exercise-task.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/tasks/programming-exercise-task/programming-exercise-task.component.html", "src/main/webapp/app/exercises/programming/manage/grading/tasks/programming-exercise-grading-tasks-table.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/tasks/programming-exercise-grading-tasks-table.component.html", "src/main/webapp/app/exercises/programming/manage/grading/charts/programming-grading-charts.utils.ts", "src/main/webapp/app/exercises/programming/manage/grading/charts/test-case-distribution-chart.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/charts/test-case-distribution-chart.component.html", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-grading-table-actions.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-grading-table-actions.component.html", "src/main/webapp/app/exercises/programming/manage/grading/charts/category-issues-chart.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/charts/sca-category-distribution-chart.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.service.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-modal.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-modal.component.html", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-filter-modal.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-filter-modal.component.html", "src/main/webapp/app/shared/sort/sort-icon.component.ts", "src/main/webapp/app/shared/sort/sort-icon.component.html", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-affected-students-modal.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-affected-students-modal.component.html", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/confirm-feedback-channel-creation-modal.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/confirm-feedback-channel-creation-modal.component.html", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-detail-channel-modal.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-detail-channel-modal.component.html", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.component.html", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.html"],
  "sourcesContent": ["import { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { TestCaseStats } from './programming-exercise-test-case-statistics.model';\r\n\r\nexport enum Visibility {\r\n    Always = 'ALWAYS',\r\n    AfterDueDate = 'AFTER_DUE_DATE',\r\n    Never = 'NEVER',\r\n}\r\n\r\nexport enum ProgrammingExerciseTestCaseType {\r\n    STRUCTURAL = 'STRUCTURAL',\r\n    BEHAVIORAL = 'BEHAVIORAL',\r\n    DEFAULT = 'DEFAULT',\r\n}\r\n\r\nexport class ProgrammingExerciseTestCase implements BaseEntity {\r\n    id?: number;\r\n    testName?: string;\r\n    weight?: number;\r\n    bonusMultiplier?: number;\r\n    bonusPoints?: number;\r\n    active?: boolean;\r\n    visibility?: Visibility;\r\n    exercise?: ProgrammingExercise;\r\n    type?: ProgrammingExerciseTestCaseType;\r\n\r\n    // Utility information that is not actually part of the object stored on the server\r\n    resultingPoints?: number;\r\n    resultingPointsPercent?: number;\r\n    testCaseStats?: TestCaseStats;\r\n    changed?: boolean;\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\n\r\nexport class StaticCodeAnalysisCategory implements BaseEntity {\r\n    id: number;\r\n    name: string;\r\n    state: StaticCodeAnalysisCategoryState;\r\n    penalty: number;\r\n    maxPenalty: number;\r\n}\r\n\r\nexport enum StaticCodeAnalysisCategoryState {\r\n    Inactive = 'INACTIVE',\r\n    Feedback = 'FEEDBACK',\r\n    Graded = 'GRADED',\r\n}\r\n", "import { Directive } from '@angular/core';\r\nimport { Color, ScaleType } from '@swimlane/ngx-charts';\r\nimport { axisTickFormattingWithPercentageSign } from 'app/shared/statistics-graph/statistics-graph.utils';\r\n\r\n@Directive()\r\nexport class ProgrammingGradingChartsDirective {\r\n    tableFiltered = false;\r\n\r\n    ngxColors = {\r\n        name: 'programming grading',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [],\r\n    } as Color;\r\n\r\n    readonly xAxisFormatting = axisTickFormattingWithPercentageSign;\r\n    static RESET_TABLE = -5; // we use the number -5 in order to indicate programming-exercise-configure-grading.component.ts to reset the corresponding table\r\n\r\n    resetTableFilter() {\r\n        this.tableFiltered = false;\r\n    }\r\n}\r\n", "export class ProgrammingExerciseGradingStatistics {\r\n    numParticipations?: number; // number of the participations with a result\r\n    testCaseStatsMap?: TestCaseStatsMap; // statistics for each test case\r\n    categoryIssuesMap?: CategoryIssuesMap; // statistics for each category\r\n}\r\n\r\nexport type TestCaseStatsMap = { [testCase: string]: TestCaseStats };\r\nexport type IssuesMap = { [issues: string]: number };\r\nexport type CategoryIssuesMap = { [category: string]: IssuesMap };\r\n\r\nexport class TestCaseStats {\r\n    numPassed = 0;\r\n    numFailed = 0;\r\n}\r\n", "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ProgrammingExerciseServerSideTask } from 'app/entities/programming-exercise-task.model';\r\nimport { Observable, catchError, of, tap } from 'rxjs';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ProgrammingExerciseTask } from 'app/exercises/programming/manage/grading/tasks/programming-exercise-task';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { ProgrammingExerciseGradingStatistics, TestCaseStats } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { ProgrammingExerciseTestCase } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ProgrammingExerciseGradingService, ProgrammingExerciseTestCaseUpdate } from '../../services/programming-exercise-grading.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ProgrammingExerciseTaskService {\r\n    private http = inject(HttpClient);\r\n    private alertService = inject(AlertService);\r\n    private gradingService = inject(ProgrammingExerciseGradingService);\r\n\r\n    exercise: ProgrammingExercise;\r\n    course: Course;\r\n    gradingStatistics: ProgrammingExerciseGradingStatistics;\r\n\r\n    maxPoints: number;\r\n\r\n    currentTasks: ProgrammingExerciseTask[];\r\n    tasks: ProgrammingExerciseTask[];\r\n\r\n    ignoreInactive = true;\r\n\r\n    public resourceUrl = 'api/programming/programming-exercises';\r\n\r\n    get totalWeights() {\r\n        return sum(this.testCases.map(({ weight }) => weight ?? 0));\r\n    }\r\n\r\n    get testCases(): ProgrammingExerciseTestCase[] {\r\n        return this.currentTasks.flatMap((task) => task.testCases);\r\n    }\r\n\r\n    public hasUnsavedChanges(): boolean {\r\n        // service has not been configured yet\r\n        if (!this.tasks || !this.currentTasks) {\r\n            return false;\r\n        }\r\n\r\n        return this.testCases.some(({ changed }) => changed);\r\n    }\r\n\r\n    /**\r\n     * Updates all resulting task points\r\n     */\r\n    public updateTasks(): ProgrammingExerciseTask[] {\r\n        this.updateAllTaskPoints();\r\n        return this.currentTasks;\r\n    }\r\n\r\n    /**\r\n     * Toggles whether inactive test cases are shown and handled\r\n     */\r\n    public toggleIgnoreInactive() {\r\n        this.ignoreInactive = !this.ignoreInactive;\r\n\r\n        this.setCurrentTasks();\r\n        this.updateAllTaskPoints();\r\n    }\r\n\r\n    /**\r\n     * Configures the task service with the required models and returns the initial list of tasks\r\n     * @param exercise for point calculation\r\n     * @param course for correct rounding\r\n     * @param gradingStatistics corresponding to the test cases\r\n     */\r\n    public configure(exercise: ProgrammingExercise, course: Course, gradingStatistics: ProgrammingExerciseGradingStatistics): Observable<ProgrammingExerciseTask[]> {\r\n        this.exercise = exercise;\r\n        this.course = course;\r\n        this.gradingStatistics = gradingStatistics;\r\n\r\n        this.maxPoints = this.exercise.maxPoints ?? 0;\r\n\r\n        return this.getTasksByExercise(this.exercise).pipe(map(this.initializeTasks));\r\n    }\r\n\r\n    /**\r\n     * Save the test case configuration contained in each task\r\n     */\r\n    public saveTestCases(): Observable<ProgrammingExerciseTestCase[] | undefined | null> {\r\n        const testCasesToUpdate = this.currentTasks\r\n            .map((task) => task.testCases)\r\n            .flatMap((testcase) => testcase)\r\n            .filter((test) => test.changed);\r\n\r\n        const testCaseUpdates = testCasesToUpdate.map((testCase) => ProgrammingExerciseTestCaseUpdate.from(testCase));\r\n        const testCaseUpdatesWeightSum = sum(testCasesToUpdate.map((test) => test.weight));\r\n\r\n        if (testCaseUpdatesWeightSum < 0) {\r\n            this.alertService.error(`artemisApp.programmingExercise.configureGrading.testCases.weightSumError`);\r\n            return of(undefined);\r\n        }\r\n\r\n        return this.gradingService.updateTestCase(this.exercise.id!, testCaseUpdates).pipe(\r\n            tap((updatedTestCases: ProgrammingExerciseTestCase[]) => {\r\n                // Update changed flag for test cases\r\n                const updatedTestCaseIDs = updatedTestCases.map((updatedTest) => updatedTest.id);\r\n                this.testCases\r\n                    .filter((test) => updatedTestCaseIDs.includes(test.id))\r\n                    .forEach((test) => {\r\n                        test.changed = false;\r\n                    });\r\n                this.gradingService.notifyTestCases(this.exercise.id!, this.testCases);\r\n\r\n                // Find out if there are test cases that were not updated, show an error.\r\n                const notUpdatedTestCases = this.testCases.filter((test) => test.changed);\r\n                if (notUpdatedTestCases.length) {\r\n                    this.alertService.error(`artemisApp.programmingExercise.configureGrading.testCases.couldNotBeUpdated`, { testCases: notUpdatedTestCases });\r\n                } else {\r\n                    this.alertService.success(`artemisApp.programmingExercise.configureGrading.testCases.updated`);\r\n                }\r\n            }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                if (error.status === 400 && error.error?.errorKey) {\r\n                    this.alertService.error(`artemisApp.programmingExercise.configureGrading.testCases.` + error.error.errorKey, error.error);\r\n                } else {\r\n                    this.alertService.error(`artemisApp.programmingExercise.configureGrading.testCases.couldNotBeUpdated`, { testCases: testCasesToUpdate });\r\n                }\r\n                return of(null);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reset all test cases.\r\n     */\r\n    public resetTestCases(): Observable<ProgrammingExerciseTestCase | ProgrammingExerciseTask[]> {\r\n        return this.gradingService.resetTestCases(this.exercise.id!).pipe(\r\n            tap((testCases: ProgrammingExerciseTestCase[]) => {\r\n                this.alertService.success(`artemisApp.programmingExercise.configureGrading.testCases.resetSuccessful`);\r\n                this.gradingService.notifyTestCases(this.exercise.id!, testCases);\r\n            }),\r\n            catchError(() => {\r\n                this.alertService.error(`artemisApp.programmingExercise.configureGrading.testCases.resetFailed`);\r\n                return of(undefined);\r\n            }),\r\n            mergeMap(() => {\r\n                return this.getTasksByExercise(this.exercise).pipe(map(this.initializeTasks));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Remove duplicate test cases from the tasks array if instructor has added the same test case to multiple tasks\r\n     * Test cases contained in multiple tasks get attributed to the first task they are found in\r\n     */\r\n    private removeDuplicateTestCasesFromTasks() {\r\n        const testCaseSet = new Set<number>(); // Assuming 'id' is a unique identifier for ProgrammingExerciseTestCase\r\n\r\n        for (const task of this.tasks) {\r\n            const uniqueTestCases: ProgrammingExerciseTestCase[] = [];\r\n            for (const testCase of task.testCases) {\r\n                if (!testCaseSet.has(testCase.id!)) {\r\n                    testCaseSet.add(testCase.id!);\r\n                    uniqueTestCases.push(testCase);\r\n                }\r\n            }\r\n            task.testCases = uniqueTestCases;\r\n        }\r\n\r\n        // Remove empty test cases\r\n        this.tasks = this.tasks.filter((tasks) => tasks.testCases.length > 0);\r\n    }\r\n\r\n    private initializeTasks = (serverSideTasks: ProgrammingExerciseServerSideTask[]): ProgrammingExerciseTask[] => {\r\n        this.tasks = serverSideTasks.map((task) => task as ProgrammingExerciseTask);\r\n\r\n        this.tasks = this.tasks // configureTestCases needs tasks to be set be to be able to use the testCases getter\r\n            .map((task) => ({ ...task, testCases: task.testCases ?? [] }))\r\n            .map(this.addGradingStats);\r\n\r\n        this.removeDuplicateTestCasesFromTasks();\r\n        this.setCurrentTasks();\r\n        this.updateAllTaskPoints();\r\n\r\n        return this.currentTasks;\r\n    };\r\n\r\n    /*\r\n     * Set the tasks currently displayed. Used for showing of active/inactive test cases\r\n     */\r\n    private setCurrentTasks = () => {\r\n        const tasksCopy: ProgrammingExerciseTask[] = JSON.parse(JSON.stringify(this.tasks));\r\n        if (this.ignoreInactive) {\r\n            this.currentTasks = tasksCopy.filter((task) => {\r\n                task.testCases = task.testCases.filter((test) => test.active);\r\n                return task.testCases.length;\r\n            });\r\n        } else {\r\n            this.currentTasks = tasksCopy;\r\n        }\r\n\r\n        // Initialize tasks after filtering/showing of inactive test cases\r\n        this.currentTasks.forEach(this.initializeTask);\r\n    };\r\n\r\n    private getTasksByExercise = (exercise: Exercise): Observable<ProgrammingExerciseServerSideTask[]> => {\r\n        return this.http.get<ProgrammingExerciseServerSideTask[]>(`${this.resourceUrl}/${exercise.id}/tasks-with-unassigned-test-cases`);\r\n    };\r\n\r\n    private addGradingStats = (task: ProgrammingExerciseTask): ProgrammingExerciseTask => {\r\n        task.stats = new TestCaseStats();\r\n        const testCaseStatsMap = this.gradingStatistics?.testCaseStatsMap;\r\n        if (!testCaseStatsMap) {\r\n            return task;\r\n        }\r\n\r\n        for (const testCase of task.testCases) {\r\n            const testStats = testCaseStatsMap[testCase.testName!];\r\n            if (!testStats) {\r\n                continue;\r\n            }\r\n\r\n            testCase.testCaseStats = testStats;\r\n            task.stats!.numPassed += testStats.numPassed;\r\n            task.stats!.numFailed += testStats.numFailed;\r\n        }\r\n\r\n        return task;\r\n    };\r\n\r\n    /**\r\n     * Initialized task values according to the values of its test cases\r\n     * @param task to be initialized\r\n     */\r\n    public initializeTask = (task: ProgrammingExerciseTask): ProgrammingExerciseTask => {\r\n        task.weight = sum(task.testCases.map((testCase) => testCase.weight ?? 0));\r\n        task.bonusMultiplier = getSingleValue(task.testCases.map((testCase) => testCase.bonusMultiplier));\r\n        task.bonusPoints = sum(task.testCases.map((testCase) => testCase.bonusPoints ?? 0));\r\n        task.visibility = getSingleValue(task.testCases.map((testCase) => testCase.visibility));\r\n        task.type = getSingleValue(task.testCases.map((testCase) => testCase.type)) ?? 'MIXED';\r\n\r\n        return task;\r\n    };\r\n\r\n    private updateAllTaskPoints = () => {\r\n        this.currentTasks.forEach(this.updateTaskPoints);\r\n    };\r\n\r\n    private updateTaskPoints = (task: ProgrammingExerciseTask) => {\r\n        const [resultingPoints, resultingPointsPercent] = this.calculatePoints(task);\r\n\r\n        task.resultingPoints = resultingPoints;\r\n        task.resultingPointsPercent = resultingPointsPercent;\r\n        task.testCases.forEach((test) => {\r\n            const [resultingPoints, resultingPointsPercent] = this.calculatePoints(test);\r\n            test.resultingPoints = resultingPoints;\r\n            test.resultingPointsPercent = resultingPointsPercent;\r\n        });\r\n        return task;\r\n    };\r\n\r\n    private calculatePoints = (item: Pick<ProgrammingExerciseTask, 'weight' | 'bonusMultiplier' | 'bonusPoints'>): [number, number] => {\r\n        const weight = Number(item.weight ?? 0);\r\n        const multiplier = Number(item.bonusMultiplier ?? 1);\r\n        const bonusPoints = Number(item.bonusPoints ?? 0);\r\n\r\n        const points = ((weight * multiplier) / this.totalWeights) * this.maxPoints + bonusPoints;\r\n        const resultingPoints = roundValueSpecifiedByCourseSettings(points, this.course);\r\n\r\n        const relativePoints = (points / this.maxPoints) * 100;\r\n        const resultingPointsPercent = roundValueSpecifiedByCourseSettings(relativePoints, this.course);\r\n\r\n        return [resultingPoints, resultingPointsPercent];\r\n    };\r\n}\r\n\r\n/**\r\n * Gets a single value from a list if there is only one unique value. otherwise returns undefined\r\n * @param values\r\n */\r\nconst getSingleValue = (values: any[]) => {\r\n    const set = new Set(values);\r\n    if (set.size == 1) {\r\n        return set.values().next().value;\r\n    }\r\n};\r\n\r\nconst sum = (values: any[]): number => {\r\n    return (values ?? []).reduce((a: number, b: number) => Number(a) + Number(b), 0);\r\n};\r\n", "import { Component, Input } from '@angular/core';\r\nimport { faCheckCircle, faExclamationTriangle, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n/**\r\n * Two status indicators for the test case table:\r\n * - Are there unsaved changes?\r\n * - Have test cases been changed but the student submissions were not triggered?\r\n */\r\n@Component({\r\n    selector: 'jhi-programming-exercise-configure-grading-status',\r\n    template: `\r\n        <div class=\"d-flex flex-column justify-content-between\">\r\n            @if (hasUnsavedTestCaseChanges || hasUnsavedCategoryChanges) {\r\n                <div id=\"test-case-status-unsaved-changes\" class=\"d-flex align-items-center badge bg-warning mb-1\">\r\n                    <fa-icon class=\"ms-2 text-white\" [icon]=\"faExclamationTriangle\" />\r\n                    @if (hasUnsavedTestCaseChanges && hasUnsavedCategoryChanges) {\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.status.unsavedChanges\"></span>\r\n                    }\r\n                    @if (hasUnsavedTestCaseChanges && !hasUnsavedCategoryChanges) {\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.status.unsavedTestCaseChanges\"></span>\r\n                    }\r\n                    @if (!hasUnsavedTestCaseChanges && hasUnsavedCategoryChanges) {\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.status.unsavedCategoryChanges\"></span>\r\n                    }\r\n                </div>\r\n            } @else {\r\n                <div id=\"test-case-status-no-unsaved-changes\" class=\"d-flex align-items-center badge bg-success mb-1\">\r\n                    <fa-icon class=\"ms-2 text-white\" [icon]=\"faCheckCircle\" />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.status.noUnsavedChanges\"></span>\r\n                </div>\r\n            }\r\n            <ng-template #noUnsavedChanges>\r\n                <div id=\"test-case-status-no-unsaved-changes\" class=\"d-flex align-items-center badge bg-success mb-1\">\r\n                    <fa-icon class=\"ms-2 text-white\" [icon]=\"faCheckCircle\" />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.status.noUnsavedChanges\"></span>\r\n                </div>\r\n            </ng-template>\r\n            @if (exerciseIsReleasedAndHasResults) {\r\n                @if (hasUpdatedGradingConfig) {\r\n                    <div id=\"test-case-status-updated\" class=\"d-flex align-items-center badge bg-warning\">\r\n                        <fa-icon\r\n                            class=\"ms-2 text-white\"\r\n                            [icon]=\"faExclamationTriangle\"\r\n                            [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.updatedGradingConfigTooltip' | artemisTranslate\"\r\n                        />\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.updatedGradingConfigShort\"></span>\r\n                    </div>\r\n                } @else {\r\n                    <div id=\"test-case-status-no-updated\" class=\"d-flex align-items-center badge bg-success\">\r\n                        <fa-icon class=\"ms-2 text-white\" [icon]=\"faCheckCircle\" />\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.noUpdatedGradingConfig\"></span>\r\n                    </div>\r\n                }\r\n                <ng-template #noUpdatedGradingConfig>\r\n                    <div id=\"test-case-status-no-updated\" class=\"d-flex align-items-center badge bg-success\">\r\n                        <fa-icon class=\"ms-2 text-white\" [icon]=\"faCheckCircle\" />\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.noUpdatedGradingConfig\"></span>\r\n                    </div>\r\n                </ng-template>\r\n            } @else {\r\n                <div id=\"test-case-status-not-released\" class=\"d-flex align-items-center badge bg-secondary\">\r\n                    <fa-icon\r\n                        class=\"ms-2 text-white\"\r\n                        [icon]=\"faQuestionCircle\"\r\n                        [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.notReleasedTooltip' | artemisTranslate\"\r\n                    />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.notReleased\"></span>\r\n                </div>\r\n            }\r\n            <ng-template #notReleased>\r\n                <div id=\"test-case-status-not-released\" class=\"d-flex align-items-center badge bg-secondary\">\r\n                    <fa-icon\r\n                        class=\"ms-2 text-white\"\r\n                        [icon]=\"faQuestionCircle\"\r\n                        [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.notReleasedTooltip' | artemisTranslate\"\r\n                    />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.notReleased\"></span>\r\n                </div>\r\n            </ng-template>\r\n        </div>\r\n    `,\r\n    imports: [FaIconComponent, TranslateDirective, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class ProgrammingExerciseConfigureGradingStatusComponent {\r\n    @Input() exerciseIsReleasedAndHasResults: boolean;\r\n    @Input() hasUnsavedTestCaseChanges: boolean;\r\n    @Input() hasUnsavedCategoryChanges: boolean;\r\n    @Input() hasUpdatedGradingConfig: boolean;\r\n\r\n    // Icons\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faCheckCircle = faCheckCircle;\r\n    faQuestionCircle = faQuestionCircle;\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ProgrammingExerciseGradingService } from 'app/exercises/programming/manage/services/programming-exercise-grading.service';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n/**\r\n * A button that re-evaluates all latest automatic results of the given programming exercise.\r\n */\r\n@Component({\r\n    selector: 'jhi-programming-exercise-re-evaluate-button',\r\n    template: `\r\n        <jhi-button\r\n            id=\"re-evaluate-button\"\r\n            class=\"ms-3\"\r\n            [disabled]=\"disabled || isReEvaluationRunning\"\r\n            [btnType]=\"ButtonType.ERROR\"\r\n            [isLoading]=\"isReEvaluationRunning\"\r\n            [tooltip]=\"'artemisApp.programmingExercise.reEvaluateTooltip'\"\r\n            [icon]=\"faRedo\"\r\n            [title]=\"'artemisApp.programmingExercise.reEvaluate'\"\r\n            [featureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n            (onClick)=\"triggerReEvaluate()\"\r\n        />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class ProgrammingExerciseReEvaluateButtonComponent {\r\n    private testCaseService = inject(ProgrammingExerciseGradingService);\r\n    private alertService = inject(AlertService);\r\n\r\n    FeatureToggle = FeatureToggle;\r\n    ButtonType = ButtonType;\r\n    @Input() exercise: ProgrammingExercise;\r\n    @Input() disabled = false;\r\n\r\n    isReEvaluationRunning = false;\r\n\r\n    // Icons\r\n    faRedo = faRedo;\r\n\r\n    /**\r\n     * Triggers the re-evaluation of the programming exercise and displays the result in the end using an alert.\r\n     */\r\n    triggerReEvaluate() {\r\n        this.isReEvaluationRunning = true;\r\n        this.testCaseService.reEvaluate(this.exercise.id!).subscribe({\r\n            next: (updatedResultsCount: number) => {\r\n                this.isReEvaluationRunning = false;\r\n                this.alertService.success(`artemisApp.programmingExercise.reEvaluateSuccessful`, { number: updatedResultsCount });\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.isReEvaluationRunning = false;\r\n                this.alertService.error(`artemisApp.programmingExercise.reEvaluateFailed`, { message: error.message });\r\n            },\r\n        });\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseReEvaluateButtonComponent } from 'app/exercises/programming/shared/actions/programming-exercise-re-evaluate-button.component';\r\nimport { ProgrammingExerciseTriggerAllButtonComponent } from 'app/exercises/programming/shared/actions/programming-exercise-trigger-all-button.component';\r\n\r\n/**\r\n * The actions of the grading page:\r\n * - Re-evaluate all results\r\n * - Trigger the submissions for all participations of the given exercise.\r\n */\r\n@Component({\r\n    selector: 'jhi-programming-exercise-configure-grading-actions',\r\n    template: `\r\n        <jhi-programming-exercise-re-evaluate-button [exercise]=\"exercise\" [disabled]=\"isSaving\" />\r\n        <jhi-programming-exercise-trigger-all-button [exercise]=\"exercise\" [disabled]=\"isSaving\" (onBuildTriggered)=\"onBuildTriggered.emit()\" />\r\n    `,\r\n    imports: [ProgrammingExerciseReEvaluateButtonComponent, ProgrammingExerciseTriggerAllButtonComponent],\r\n})\r\nexport class ProgrammingExerciseConfigureGradingActionsComponent {\r\n    @Input() exercise: ProgrammingExercise;\r\n    @Input() hasUpdatedGradingConfig: boolean;\r\n    @Input() isSaving: boolean;\r\n\r\n    @Output() onBuildTriggered = new EventEmitter();\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n/**\r\n * The actions of the submission policy configuration:\r\n * - Update Submission Policy\r\n * - Enable/Disable Submission Policy\r\n */\r\n@Component({\r\n    selector: 'jhi-programming-exercise-grading-submission-policy-configuration-actions',\r\n    template: `\r\n        <div align=\"right\">\r\n            @if (exercise.isAtLeastInstructor) {\r\n                <jhi-button\r\n                    [btnType]=\"ButtonType.PRIMARY\"\r\n                    [title]=\"'artemisApp.programmingExercise.submissionPolicy.updateButton.title'\"\r\n                    [tooltip]=\"'artemisApp.programmingExercise.submissionPolicy.updateButton.tooltip'\"\r\n                    (onClick)=\"onUpdate.emit()\"\r\n                    [icon]=\"faSave\"\r\n                    [disabled]=\"isSaving || !exercise.submissionPolicy || (exercise.submissionPolicy?.type === SubmissionPolicyType.NONE && !hadPolicyBefore) || formInvalid\"\r\n                />\r\n            }\r\n            @if (exercise.isAtLeastInstructor && hadPolicyBefore && exercise.submissionPolicy!.active) {\r\n                <jhi-button\r\n                    [btnType]=\"ButtonType.ERROR\"\r\n                    [title]=\"'artemisApp.programmingExercise.submissionPolicy.deactivateButton.title'\"\r\n                    [tooltip]=\"'artemisApp.programmingExercise.submissionPolicy.deactivateButton.tooltip'\"\r\n                    (onClick)=\"onToggle.emit()\"\r\n                    [disabled]=\"isSaving\"\r\n                />\r\n            }\r\n            @if (exercise.isAtLeastInstructor && hadPolicyBefore && !exercise.submissionPolicy!.active) {\r\n                <jhi-button\r\n                    [btnType]=\"ButtonType.SUCCESS\"\r\n                    [title]=\"'artemisApp.programmingExercise.submissionPolicy.activateButton.title'\"\r\n                    [tooltip]=\"'artemisApp.programmingExercise.submissionPolicy.activateButton.tooltip'\"\r\n                    (onClick)=\"onToggle.emit()\"\r\n                    [disabled]=\"isSaving\"\r\n                />\r\n            }\r\n        </div>\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent {\r\n    readonly ButtonType = ButtonType;\r\n    readonly SubmissionPolicyType = SubmissionPolicyType;\r\n\r\n    @Input() exercise: ProgrammingExercise;\r\n    @Input() isSaving: boolean;\r\n    @Input() formInvalid: boolean;\r\n    @Input() hadPolicyBefore: boolean;\r\n\r\n    @Output() onUpdate = new EventEmitter();\r\n    @Output() onToggle = new EventEmitter();\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n}\r\n", "import { Component, Input, OnChanges } from '@angular/core';\r\nimport { TestCaseStats } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'jhi-test-case-passed-builds-chart',\r\n    template: `\r\n        <div class=\"chart-body\" placement=\"left auto\" [ngbTooltip]=\"tooltip\">\r\n            <div class=\"passed-bar\" [style]=\"{ width: passedPercent + '%' }\"></div>\r\n            <div class=\"failed-bar\" [style]=\"{ left: passedPercent + '%', width: failedPercent + '%' }\"></div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        '.chart-body { border-radius: 4px; background-color: #999; height: 10px; max-width: 100px; overflow: hidden; position: relative; }',\r\n        '.passed-bar { position: absolute; top: 0; left: 0; height: 10px; background-color: #28a745 }',\r\n        '.failed-bar { position: absolute; top: 0; height: 10px; background-color: #dc3545 }',\r\n    ],\r\n    imports: [NgbTooltip],\r\n})\r\nexport class TestCasePassedBuildsChartComponent implements OnChanges {\r\n    @Input() testCaseStats?: TestCaseStats;\r\n    @Input() totalParticipations: number;\r\n\r\n    passedPercent = 0;\r\n    failedPercent = 0;\r\n    tooltip = '';\r\n\r\n    ngOnChanges() {\r\n        const totalPassedAndFailed = (this.testCaseStats?.numPassed ?? 0) + (this.testCaseStats?.numFailed ?? 0);\r\n        if (totalPassedAndFailed > this.totalParticipations) {\r\n            this.totalParticipations = totalPassedAndFailed;\r\n        }\r\n\r\n        if (this.totalParticipations > 0) {\r\n            const passedPercent = ((this.testCaseStats?.numPassed || 0) / this.totalParticipations) * 100;\r\n            const failedPercent = ((this.testCaseStats?.numFailed || 0) / this.totalParticipations) * 100;\r\n\r\n            setTimeout(() => {\r\n                this.passedPercent = passedPercent;\r\n                this.failedPercent = failedPercent;\r\n                this.tooltip = TestCasePassedBuildsChartComponent.generateTooltip(passedPercent, failedPercent, this.totalParticipations!);\r\n            });\r\n        } else {\r\n            setTimeout(() => {\r\n                this.passedPercent = 0;\r\n                this.failedPercent = 0;\r\n                this.tooltip = TestCasePassedBuildsChartComponent.generateTooltip(0, 0, 0);\r\n            });\r\n        }\r\n    }\r\n\r\n    private static generateTooltip(passedPercent: number, failedPercent: number, totalStudents: number): string {\r\n        const notExecutedPercent = round(100 - passedPercent - failedPercent);\r\n        return `${passedPercent.toFixed(0)}% passed, ${failedPercent.toFixed(0)}% failed${\r\n            notExecutedPercent > 0 ? `, ${notExecutedPercent}% not executed` : ''\r\n        } of ${totalStudents} students.`;\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { faAngleDown, faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseTask } from 'app/exercises/programming/manage/grading/tasks/programming-exercise-task';\r\nimport { ProgrammingExerciseTestCase, Visibility } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ProgrammingExerciseTaskService } from '../programming-exercise-task.service';\r\nimport { Subject } from 'rxjs';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TestCasePassedBuildsChartComponent } from '../../charts/test-case-passed-builds-chart.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-task',\r\n    templateUrl: './programming-exercise-task.component.html',\r\n    styleUrls: ['../programming-exercise-grading-tasks-table.scss'],\r\n    imports: [FaIconComponent, FormsModule, TestCasePassedBuildsChartComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ProgrammingExerciseTaskComponent implements OnInit {\r\n    private programmingExerciseTaskService = inject(ProgrammingExerciseTaskService);\r\n\r\n    @Input() index: number;\r\n    @Input() task: ProgrammingExerciseTask;\r\n    @Input() openSubject: Subject<boolean>;\r\n    @Input() isExamExercise: boolean;\r\n\r\n    @Output() updateTasksEvent = new EventEmitter<void>();\r\n\r\n    // Icons\r\n    faAngleDown = faAngleDown;\r\n    faAngleRight = faAngleRight;\r\n\r\n    readonly NOT_ASSIGNED_TO_TASK_NAME = 'Not assigned to task';\r\n    open: boolean;\r\n    onlyViewTestCases: boolean;\r\n    testCaseVisibilityList: { value: Visibility; name: string }[] = [];\r\n\r\n    get numParticipations(): number {\r\n        return this.programmingExerciseTaskService?.gradingStatistics?.numParticipations ?? 0;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.openSubject.subscribe((open) => (this.open = open));\r\n\r\n        // If this is the only task have it open by default and hide the task\r\n        if (this.programmingExerciseTaskService.currentTasks.length == 1) {\r\n            this.onlyViewTestCases = true;\r\n            this.open = true;\r\n        }\r\n\r\n        this.updateTestCaseVisibilityList();\r\n    }\r\n\r\n    testUpdateHandler(test: ProgrammingExerciseTestCase) {\r\n        this.programmingExerciseTaskService.initializeTask(this.task);\r\n        test.changed = true;\r\n        this.updateTasksEvent.emit();\r\n    }\r\n\r\n    taskUpdateHandler() {\r\n        const testCasesAmount = this.task.testCases.length;\r\n        const testCasesWeightSum = this.task.testCases.reduce((acc, { weight }) => acc + (weight ?? 0), 0);\r\n\r\n        this.task.testCases.forEach((testCase) => {\r\n            testCase.changed = true;\r\n\r\n            if (this.task.weight !== undefined && testCasesWeightSum !== 0) {\r\n                testCase.weight = ((testCase.weight ?? 0) / testCasesWeightSum) * this.task.weight;\r\n            }\r\n            if (this.task.bonusMultiplier !== undefined) {\r\n                testCase.bonusMultiplier = this.task.bonusMultiplier;\r\n            }\r\n            if (this.task.bonusPoints !== undefined) {\r\n                testCase.bonusPoints = this.task.bonusPoints / testCasesAmount;\r\n            }\r\n            if (this.task.visibility !== undefined) {\r\n                testCase.visibility = this.task.visibility;\r\n            }\r\n        });\r\n\r\n        this.updateTasksEvent.emit();\r\n    }\r\n\r\n    formatTestIndex(i: number, j: number): string {\r\n        return `${i + 1}.${j + 1}`;\r\n    }\r\n\r\n    private updateTestCaseVisibilityList() {\r\n        this.testCaseVisibilityList = Object.entries(Visibility).map(([name, value]) => {\r\n            let displayName = name;\r\n\r\n            if (this.isExamExercise && value === Visibility.AfterDueDate) {\r\n                displayName = 'AfterReleaseDateOfResults';\r\n            }\r\n\r\n            return {\r\n                value,\r\n                name: displayName,\r\n            };\r\n        });\r\n    }\r\n}\r\n", "<div class=\"task\">\r\n    @if (!onlyViewTestCases) {\r\n        <div class=\"d-flex\">\r\n            <button type=\"button\" (click)=\"open = !open\" class=\"task__collapse\">\r\n                <fa-icon class=\"me-2\" [icon]=\"open ? faAngleDown : faAngleRight\" />\r\n            </button>\r\n            <div class=\"task__row\">\r\n                <div class=\"task__row__cell gap-3\">\r\n                    <b>{{ index + 1 }}</b>\r\n                    <span class=\"task__field\">\r\n                        <b>{{ task.taskName }}</b></span\r\n                    >\r\n                </div>\r\n                <div class=\"task__row__cell task__row__cell--small\">\r\n                    <input\r\n                        [disabled]=\"task.taskName === NOT_ASSIGNED_TO_TASK_NAME\"\r\n                        type=\"number\"\r\n                        class=\"form-control\"\r\n                        min=\"0\"\r\n                        [(ngModel)]=\"task.weight\"\r\n                        name=\"{{ task.taskName }}-name\"\r\n                        (change)=\"taskUpdateHandler()\"\r\n                    />\r\n                </div>\r\n                <div class=\"task__row__cell task__row__cell--small\">\r\n                    <input\r\n                        [disabled]=\"task.taskName === NOT_ASSIGNED_TO_TASK_NAME\"\r\n                        type=\"number\"\r\n                        class=\"form-control\"\r\n                        min=\"0\"\r\n                        [(ngModel)]=\"task.bonusMultiplier\"\r\n                        name=\"{{ task.taskName }}-bonusMultiplier\"\r\n                        (change)=\"taskUpdateHandler()\"\r\n                    />\r\n                </div>\r\n                <div class=\"task__row__cell task__row__cell--small\">\r\n                    <input\r\n                        [disabled]=\"task.taskName === NOT_ASSIGNED_TO_TASK_NAME\"\r\n                        type=\"number\"\r\n                        class=\"form-control\"\r\n                        min=\"0\"\r\n                        [(ngModel)]=\"task.bonusPoints\"\r\n                        name=\"{{ task.taskName }}-bonusPoints\"\r\n                        (change)=\"taskUpdateHandler()\"\r\n                    />\r\n                </div>\r\n                <div class=\"task__row__cell\">\r\n                    <select\r\n                        [disabled]=\"task.taskName === NOT_ASSIGNED_TO_TASK_NAME\"\r\n                        [(ngModel)]=\"task.visibility\"\r\n                        class=\"form-select\"\r\n                        name=\"{{ task.taskName }}-visibility\"\r\n                        (change)=\"taskUpdateHandler()\"\r\n                    >\r\n                        @for (testCaseVisibility of testCaseVisibilityList; track testCaseVisibility) {\r\n                            <option [value]=\"testCaseVisibility.value\">\r\n                                {{ 'artemisApp.programmingExerciseTestCase.visibility.' + testCaseVisibility.name | artemisTranslate }}\r\n                            </option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div class=\"task__row__cell\">\r\n                    <span class=\"task__field\">{{ task.resultingPoints }}P ({{ task.resultingPointsPercent }}%)</span>\r\n                </div>\r\n                <div class=\"task__row__cell\">\r\n                    <span class=\"task__field\">{{ 'artemisApp.programmingExerciseTestCase.type.' + (task.type ?? 'DEFAULT') | artemisTranslate }}</span>\r\n                </div>\r\n                <div class=\"task__row__cell\">\r\n                    <jhi-test-case-passed-builds-chart class=\"w-100\" [testCaseStats]=\"task.stats\" [totalParticipations]=\"numParticipations\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (open) {\r\n        <div class=\"task__body\">\r\n            @for (test of task.testCases; track test; let j = $index) {\r\n                <div class=\"task__row\" [class.bg-secondary]=\"!test.active\">\r\n                    <div class=\"task__row__cell gap-3\">\r\n                        <span class=\"ps-3\">{{ formatTestIndex(index, j) }}</span>\r\n                        <span class=\"task__field\">{{ test.testName }}</span>\r\n                    </div>\r\n                    <div class=\"task__row__cell task__row__cell--small\">\r\n                        <input type=\"number\" class=\"form-control\" min=\"0\" [(ngModel)]=\"test.weight\" name=\"{{ test.testName }}-name\" (change)=\"testUpdateHandler(test)\" />\r\n                    </div>\r\n                    <div class=\"task__row__cell task__row__cell--small\">\r\n                        <input\r\n                            type=\"number\"\r\n                            class=\"form-control\"\r\n                            min=\"0\"\r\n                            [(ngModel)]=\"test.bonusMultiplier\"\r\n                            name=\"{{ test.testName }}-bonusMultiplier\"\r\n                            (change)=\"testUpdateHandler(test)\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"task__row__cell task__row__cell--small\">\r\n                        <input\r\n                            type=\"number\"\r\n                            class=\"form-control\"\r\n                            min=\"0\"\r\n                            [(ngModel)]=\"test.bonusPoints\"\r\n                            name=\"{{ test.testName }}-bonusPoints\"\r\n                            (change)=\"testUpdateHandler(test)\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"task__row__cell\">\r\n                        <select [(ngModel)]=\"test.visibility\" class=\"form-select\" name=\"{{ test.testName }}-visibility\" (change)=\"testUpdateHandler(test)\">\r\n                            @for (testCaseVisibility of testCaseVisibilityList; track testCaseVisibility) {\r\n                                <option [value]=\"testCaseVisibility.value\">\r\n                                    {{ 'artemisApp.programmingExerciseTestCase.visibility.' + testCaseVisibility.name | artemisTranslate }}\r\n                                </option>\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"task__row__cell\">\r\n                        <span class=\"task__field\">{{ test.resultingPoints }}P ({{ test.resultingPointsPercent }}%)</span>\r\n                    </div>\r\n                    <div class=\"task__row__cell\">\r\n                        <span class=\"task__field\">{{ 'artemisApp.programmingExerciseTestCase.type.' + (test.type ?? 'DEFAULT') | artemisTranslate }}</span>\r\n                    </div>\r\n                    <div class=\"task__row__cell\">\r\n                        <jhi-test-case-passed-builds-chart class=\"w-100\" [testCaseStats]=\"test.testCaseStats\" [totalParticipations]=\"numParticipations\" />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { ProgrammingExerciseTaskService } from 'app/exercises/programming/manage/grading/tasks/programming-exercise-task.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { faAngleDown, faAngleRight, faAsterisk, faMedal, faQuestionCircle, faScaleUnbalanced, faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseGradingStatistics } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { ProgrammingExerciseTask } from './programming-exercise-task';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ProgrammingExerciseTestCase } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { isExamExercise } from 'app/shared/util/utils';\r\nimport { ProgrammingExerciseServerSideTask } from 'app/entities/programming-exercise-task.model';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ProgrammingExerciseTaskComponent } from './programming-exercise-task/programming-exercise-task.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ntype Sort = {\r\n    by: 'name' | 'weight' | 'multiplier' | 'bonusPoints' | 'visibility' | 'resulting' | 'type';\r\n    descending: boolean;\r\n};\r\n\r\ntype TaskComparator = (a: ProgrammingExerciseTask | ProgrammingExerciseTestCase, b: ProgrammingExerciseTask | ProgrammingExerciseTestCase) => number;\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-grading-tasks-table',\r\n    templateUrl: './programming-exercise-grading-tasks-table.component.html',\r\n    styleUrls: ['./programming-exercise-grading-tasks-table.scss'],\r\n    imports: [ButtonComponent, TranslateDirective, FormsModule, NgbTooltip, FaIconComponent, ProgrammingExerciseTaskComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ProgrammingExerciseGradingTasksTableComponent implements OnInit {\r\n    private taskService = inject(ProgrammingExerciseTaskService);\r\n\r\n    @Input() exercise: ProgrammingExercise;\r\n    @Input() course: Course;\r\n    @Input() gradingStatisticsObservable: Observable<ProgrammingExerciseGradingStatistics>;\r\n\r\n    // Icons\r\n    faAngleDown = faAngleDown;\r\n    faAngleRight = faAngleRight;\r\n    faQuestionCircle = faQuestionCircle;\r\n    faScaleUnbalanced = faScaleUnbalanced;\r\n    faMedal = faMedal;\r\n    faAsterisk = faAsterisk;\r\n\r\n    isSaving = false;\r\n    tasks: ProgrammingExerciseTask[] = [];\r\n    allTasksExpandedSubject: Subject<boolean>;\r\n\r\n    currentSort: Sort | undefined;\r\n\r\n    isExamExercise = false;\r\n\r\n    get ignoreInactive() {\r\n        return this.taskService.ignoreInactive;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.allTasksExpandedSubject = new Subject();\r\n        this.gradingStatisticsObservable.subscribe((gradingStatistics) => {\r\n            this.taskService.configure(this.exercise, this.course, gradingStatistics).subscribe(this.updateTasks);\r\n        });\r\n\r\n        this.currentSort = {\r\n            by: 'name',\r\n            descending: true,\r\n        };\r\n\r\n        this.isExamExercise = isExamExercise(this.exercise);\r\n    }\r\n\r\n    updateTasks = () => {\r\n        this.tasks = this.taskService.updateTasks();\r\n    };\r\n\r\n    toggleShowInactiveTestsShown = () => {\r\n        this.taskService.toggleIgnoreInactive();\r\n        this.updateTasks();\r\n    };\r\n\r\n    saveTestCases = () => {\r\n        this.isSaving = true;\r\n        this.taskService.saveTestCases().subscribe(() => (this.isSaving = false));\r\n    };\r\n\r\n    resetTestCases = () => {\r\n        this.isSaving = true;\r\n        this.taskService.resetTestCases().subscribe(() => {\r\n            this.isSaving = false;\r\n            this.updateTasks();\r\n        });\r\n    };\r\n\r\n    toggleAllTasksExpanded = (value: boolean) => {\r\n        this.allTasksExpandedSubject.next(value);\r\n    };\r\n\r\n    changeSort = (by: Sort['by']) => {\r\n        if (this.currentSort?.by === by) {\r\n            this.currentSort.descending = !this.currentSort.descending;\r\n        } else {\r\n            this.currentSort = {\r\n                by: by,\r\n                descending: true,\r\n            };\r\n        }\r\n\r\n        this.sort();\r\n    };\r\n\r\n    getSortIcon = (by: Sort['by']) => {\r\n        if (this.currentSort?.by !== by) {\r\n            return faSort;\r\n        }\r\n\r\n        return this.currentSort.descending ? faSortDown : faSortUp;\r\n    };\r\n\r\n    private sort = () => {\r\n        const comparators = {\r\n            name: this.compareStringForAttribute('taskName'),\r\n            weight: this.compareNumForAttribute('weight'),\r\n            multiplier: this.compareNumForAttribute('bonusMultiplier'),\r\n            bonusPoints: this.compareNumForAttribute('bonusPoints'),\r\n            visibility: this.compareStringForAttribute('visibility'),\r\n            resulting: this.compareNumForAttribute('resultingPoints'),\r\n            type: this.compareStringForAttribute('type'),\r\n        };\r\n\r\n        let comparator = (a: ProgrammingExerciseTask | ProgrammingExerciseTestCase, b: ProgrammingExerciseTask | ProgrammingExerciseTestCase) => {\r\n            const order = comparators[this.currentSort!['by']](a, b);\r\n            return this.currentSort?.descending ? order : -order;\r\n        };\r\n\r\n        this.tasks = this.tasks.sort(comparator);\r\n\r\n        // the objects task and test have their name attribute named differently, making this necessary\r\n        if (this.currentSort?.by === 'name') {\r\n            comparator = (a: ProgrammingExerciseTask, b: ProgrammingExerciseTask) => {\r\n                const order = this.compareStringForAttribute('testName')(a, b);\r\n                return this.currentSort?.descending ? order : -order;\r\n            };\r\n        }\r\n        this.tasks.filter(({ testCases }) => testCases).forEach((task) => task.testCases.sort(comparator));\r\n    };\r\n\r\n    private compareNumForAttribute = <T extends ProgrammingExerciseTask | ProgrammingExerciseTestCase>(attributeKey: keyof T): TaskComparator => {\r\n        return (a: T, b: T) => {\r\n            return ((a[attributeKey] as number) ?? 0) - ((b[attributeKey] as number) ?? 0);\r\n        };\r\n    };\r\n\r\n    /**\r\n     * {@link ProgrammingExerciseTask} extends {@link ProgrammingExerciseServerSideTask} which is why we need to explicitly add it here for the type\r\n     * @param attributeKey\r\n     */\r\n    private compareStringForAttribute = <T extends ProgrammingExerciseTask | ProgrammingExerciseServerSideTask | ProgrammingExerciseTestCase>(\r\n        attributeKey: keyof T,\r\n    ): TaskComparator => {\r\n        return (a: T, b: T) => {\r\n            const aType = a[attributeKey] ?? '';\r\n            const bType = b[attributeKey] ?? '';\r\n\r\n            if (aType < bType) return -1;\r\n            if (aType > bType) return 1;\r\n            return 0;\r\n        };\r\n    };\r\n}\r\n", "<div class=\"d-flex flex-column gap-3 mb-3\">\r\n    <h2 class=\"fw-medium\">Tasks</h2>\r\n    <div class=\"d-flex justify-content-between\">\r\n        <div>\r\n            @if (tasks.length !== 1) {\r\n                <jhi-button [shouldSubmit]=\"false\" (click)=\"toggleAllTasksExpanded(true)\" title=\"artemisApp.programmingExercise.configureGrading.expandAll\" [icon]=\"faAngleDown\">\r\n                    Expand all\r\n                </jhi-button>\r\n            }\r\n            @if (tasks.length !== 1) {\r\n                <jhi-button\r\n                    [shouldSubmit]=\"false\"\r\n                    (click)=\"toggleAllTasksExpanded(false)\"\r\n                    title=\"artemisApp.programmingExercise.configureGrading.collapseAll\"\r\n                    [icon]=\"faAngleRight\"\r\n                >\r\n                    Collapse all\r\n                </jhi-button>\r\n            }\r\n        </div>\r\n        <div>\r\n            <button\r\n                type=\"button\"\r\n                (click)=\"saveTestCases()\"\r\n                class=\"btn btn-primary\"\r\n                [disabled]=\"isSaving\"\r\n                jhiTranslate=\"artemisApp.programmingExercise.configureGrading.save\"\r\n            ></button>\r\n            <button\r\n                type=\"button\"\r\n                (click)=\"resetTestCases()\"\r\n                class=\"btn btn-secondary\"\r\n                [disabled]=\"isSaving\"\r\n                jhiTranslate=\"artemisApp.programmingExercise.configureGrading.reset\"\r\n            ></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-check form-switch\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"grading-task-inactive-toggle\" [value]=\"ignoreInactive\" (click)=\"toggleShowInactiveTestsShown()\" />\r\n        <label class=\"form-check-label\" for=\"grading-task-inactive-toggle\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.testCases.showInactive\"></label>\r\n    </div>\r\n    <div>\r\n        <label class=\"form-check-label\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.testCases.exercisePoints\"></label>\r\n        {{ exercise.maxPoints }} P\r\n    </div>\r\n</div>\r\n<form>\r\n    <div class=\"ps-5 task__row\">\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell sort__button\"\r\n            [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.name' | artemisTranslate\"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('name')\"\r\n        >\r\n            <p class=\"mb-0\" [innerHtml]=\"'artemisApp.programmingExercise.configureGrading.gradingTableHeader.testName' | artemisTranslate\"></p>\r\n            <fa-icon [icon]=\"getSortIcon('name')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell task__row__cell--small ps-2 sort__button\"\r\n            [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.weight' | artemisTranslate\"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('weight')\"\r\n        >\r\n            <fa-icon [icon]=\"faScaleUnbalanced\" size=\"xl\" />\r\n            <fa-icon [icon]=\"getSortIcon('weight')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell task__row__cell--small ps-2 sort__button\"\r\n            [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.bonusMultiplier' | artemisTranslate\"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('multiplier')\"\r\n        >\r\n            <fa-icon [icon]=\"faAsterisk\" size=\"xl\" />\r\n            <fa-icon [icon]=\"getSortIcon('multiplier')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell task__row__cell--small ps-2 sort__button\"\r\n            [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.bonusPoints' | artemisTranslate\"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('bonusPoints')\"\r\n        >\r\n            <fa-icon [icon]=\"faMedal\" size=\"xl\" />\r\n            <fa-icon [icon]=\"getSortIcon('bonusPoints')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell sort__button\"\r\n            [ngbTooltip]=\"\r\n                (this.isExamExercise ? 'artemisApp.programmingExercise.configureGrading.help.visibilityExam' : 'artemisApp.programmingExercise.configureGrading.help.visibility')\r\n                    | artemisTranslate\r\n            \"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('visibility')\"\r\n        >\r\n            <p class=\"mb-0\" [innerHtml]=\"'artemisApp.programmingExercise.configureGrading.gradingTableHeader.visibility' | artemisTranslate\"></p>\r\n            <fa-icon [icon]=\"getSortIcon('visibility')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell sort__button\"\r\n            [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.points' | artemisTranslate\"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('resulting')\"\r\n        >\r\n            <p class=\"mb-0\" [innerHtml]=\"'artemisApp.programmingExercise.configureGrading.gradingTableHeader.resultingPoints' | artemisTranslate\"></p>\r\n            <fa-icon [icon]=\"getSortIcon('resulting')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"task__row__cell sort__button\"\r\n            [ngbTooltip]=\"exercise.programmingLanguage === 'JAVA' ? ('artemisApp.programmingExercise.configureGrading.help.type' | artemisTranslate) : undefined\"\r\n            placement=\"bottom auto\"\r\n            (click)=\"changeSort('type')\"\r\n        >\r\n            <p class=\"mb-0\" [innerHtml]=\"'artemisApp.programmingExercise.configureGrading.gradingTableHeader.testType' | artemisTranslate\"></p>\r\n            <fa-icon [icon]=\"getSortIcon('type')\" class=\"ms-2\" />\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary ms-2\" />\r\n        </button>\r\n        <div class=\"task__row__cell\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.gradingTableHeader.passedPercent\"></div>\r\n    </div>\r\n    @for (task of tasks; track task; let i = $index) {\r\n        <jhi-programming-exercise-task [index]=\"i\" [task]=\"task\" [openSubject]=\"allTasksExpandedSubject\" (updateTasksEvent)=\"updateTasks()\" [isExamExercise]=\"isExamExercise\" />\r\n    }\r\n</form>\r\n", "/**\r\n * Dynamically generates a color based on the input\r\n * @param i factor that is modifying the first coordinate of the color\r\n * @param l percentage defining the last part of the color\r\n * @returns color in hsl format\r\n */\r\nexport function getColor(i: number, l: number): string {\r\n    return `hsl(${(i * 360 * 3) % 360}, 55%, ${l}%)`;\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, inject } from '@angular/core';\r\nimport { ProgrammingExerciseTestCase, Visibility } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { TestCaseStatsMap } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { getColor } from 'app/exercises/programming/manage/grading/charts/programming-grading-charts.utils';\r\nimport { ProgrammingGradingChartsDirective } from 'app/exercises/programming/manage/grading/charts/programming-grading-charts.directive';\r\nimport { getTotalMaxPoints } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { NgxChartsMultiSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nenum TestCaseBarTitle {\r\n    WEIGHT_EN = 'Weight',\r\n    WEIGHT_DE = 'Gewichtung',\r\n    WEIGHT_AND_BONUS_EN = 'Weight & Bonus',\r\n    WEIGHT_AND_BONUS_DE = 'Gewichtung & Bonus',\r\n}\r\n\r\ntype TestCaseColors = {\r\n    [label: string]: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-test-case-distribution-chart',\r\n    styleUrls: ['./sca-category-distribution-chart.scss'],\r\n    templateUrl: './test-case-distribution-chart.component.html',\r\n    imports: [TranslateDirective, BarChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class TestCaseDistributionChartComponent extends ProgrammingGradingChartsDirective implements OnInit, OnChanges {\r\n    private translateService = inject(TranslateService);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n\r\n    @Input() testCases: ProgrammingExerciseTestCase[];\r\n    @Input() testCaseStatsMap?: TestCaseStatsMap;\r\n    @Input() totalParticipations?: number;\r\n    @Input() exercise: ProgrammingExercise;\r\n\r\n    @Output() testCaseColorsChange = new EventEmitter<any>();\r\n    @Output() testCaseRowFilter = new EventEmitter<number>();\r\n\r\n    readonly testCaseBarTitle = TestCaseBarTitle;\r\n\r\n    totalWeight: number;\r\n\r\n    // ngx\r\n    // array containing the ngx-dedicated objects in order to display the weight and bonus chart\r\n    ngxWeightData: NgxChartsMultiSeriesDataEntry[] = [\r\n        { name: '', series: [] as any[] },\r\n        { name: '', series: [] as any[] },\r\n    ];\r\n    // array containing the ngx-dedicated objects in order to display the points chart\r\n    ngxPointsData: NgxChartsMultiSeriesDataEntry[] = [{ name: '', series: [] as any[] }];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.updateTranslation();\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updateTranslation();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.testCases == undefined) {\r\n            this.testCases = [];\r\n        }\r\n        this.testCases = this.testCases.filter((testCase) => testCase.visibility !== Visibility.Never);\r\n\r\n        // sum of all weights\r\n        this.totalWeight = this.testCases.reduce((sum, testCase) => sum + testCase.weight!, 0);\r\n        // max points for the exercise\r\n        const maxPoints = this.exercise.maxPoints!;\r\n        // exercise max score with bonus in percent\r\n        const maxScoreInPercent = getTotalMaxPoints(this.exercise) / maxPoints;\r\n\r\n        // total of achievable points for this exercise\r\n        const totalPoints = maxPoints * (this.totalParticipations || 0);\r\n\r\n        const testCaseScores = this.testCases.map((testCase) => {\r\n            // calculated score for this test case\r\n            const testCaseScore = (this.totalWeight > 0 ? (testCase.weight! * testCase.bonusMultiplier!) / this.totalWeight : 0) + (testCase.bonusPoints || 0) / maxPoints;\r\n\r\n            const score = Math.min(testCaseScore, maxScoreInPercent);\r\n            const stats = this.testCaseStatsMap ? this.testCaseStatsMap[testCase.testName!] : undefined;\r\n\r\n            return {\r\n                id: testCase.id,\r\n                label: testCase.testName!,\r\n                // relative weight percentage\r\n                relWeight: this.totalWeight > 0 ? (testCase.weight! / this.totalWeight) * 100 : 0,\r\n                // relative score percentage\r\n                relScore: score * 100,\r\n                // relative points percentage\r\n                relPoints: stats && totalPoints > 0 ? ((stats.numPassed! * score * maxPoints) / totalPoints) * 100 : 0,\r\n            };\r\n        });\r\n\r\n        if (this.ngxWeightData[0].series.length !== testCaseScores.length) {\r\n            const testCaseColors: TestCaseColors = {};\r\n\r\n            this.ngxWeightData = [];\r\n            this.ngxPointsData = [];\r\n\r\n            const weight = { name: this.translateService.instant('artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weight'), series: [] as any[] };\r\n            const weightAndBonus = {\r\n                name: this.translateService.instant('artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weightAndBonus'),\r\n                series: [] as any[],\r\n            };\r\n\r\n            const points = { name: this.translateService.instant('artemisApp.programmingExercise.configureGrading.charts.testCasePoints.points'), series: [] as any[] };\r\n\r\n            for (let i = 0; i < testCaseScores.length; i++) {\r\n                const element = testCaseScores[i];\r\n\r\n                const label = element.label;\r\n                const color = getColor(i / this.testCases.length, 50);\r\n\r\n                weight.series.push({ name: label, value: Math.max(element.relWeight, 0), bonus: Math.max(element.relScore, 0), id: element.id });\r\n                weightAndBonus.series.push({ name: label, value: Math.max(element.relScore, 0), weight: Math.max(element.relScore, 0), id: element.id });\r\n\r\n                points.series.push({ name: label, value: Math.max(element.relPoints, 0) });\r\n\r\n                testCaseColors[label] = color;\r\n                this.ngxColors.domain.push(color);\r\n            }\r\n\r\n            this.ngxWeightData.push(weight);\r\n            this.ngxWeightData.push(weightAndBonus);\r\n\r\n            this.ngxPointsData.push(points);\r\n\r\n            // update colors for test case table\r\n            this.testCaseColorsChange.emit(testCaseColors);\r\n        } else {\r\n            // update values in-place\r\n            testCaseScores.forEach((score) => {\r\n                this.ngxWeightData[0].series.forEach((weight, index) => {\r\n                    if (weight.id === score.id) {\r\n                        weight.value = Math.max(score.relWeight, 0);\r\n                        weight.bonus = Math.max(score.relScore, 0);\r\n                        // the bars are set up symmetrically, which means if we have the index of the corresponding test case in one bar, it is the same for all other bars\r\n                        this.ngxWeightData[1].series[index].value = Math.max(score.relScore, 0);\r\n                        this.ngxWeightData[1].series[index].weight = Math.max(score.relWeight, 0);\r\n                        this.ngxPointsData[0].series[index].value = Math.max(score.relPoints, 0);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        this.ngxWeightData = [...this.ngxWeightData];\r\n        this.ngxPointsData = [...this.ngxPointsData];\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that handles the click on the points chart\r\n     * Delegates the user to the statistics page of the programming exercise\r\n     */\r\n    onSelectPoints(): void {\r\n        this.navigationUtilService.routeInNewTab(['course-management', this.exercise.course!.id, 'programming-exercises', this.exercise.id, 'exercise-statistics']);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that handles the click on the weight and bonus chart\r\n     * Filters the table left to the charts in order to display only the test case that is clicked\r\n     * @param event event that is delegated by ngx-charts and contains the test case ID\r\n     */\r\n    onSelectWeight(event: any): void {\r\n        this.tableFiltered = true;\r\n        this.testCaseRowFilter.emit(event.id as number);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that\r\n     */\r\n    resetTableFilter(): void {\r\n        this.tableFiltered = false;\r\n        this.testCaseRowFilter.emit(ProgrammingGradingChartsDirective.RESET_TABLE);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method in order to keep the translation of the bar labels up to date\r\n     */\r\n    updateTranslation(): void {\r\n        const weightLabel = this.translateService.instant('artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weight');\r\n        const weightAndBonusLabel = this.translateService.instant('artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weightAndBonus');\r\n        const pointsLabel = this.translateService.instant('artemisApp.programmingExercise.configureGrading.charts.testCasePoints.points');\r\n\r\n        this.ngxWeightData[0].name = weightLabel;\r\n        this.ngxWeightData[1].name = weightAndBonusLabel;\r\n        this.ngxPointsData[0].name = pointsLabel;\r\n\r\n        this.ngxWeightData = [...this.ngxWeightData];\r\n        this.ngxPointsData = [...this.ngxPointsData];\r\n    }\r\n}\r\n", "<div>\r\n    <div>\r\n        <div class=\"d-flex justify-content-between\">\r\n            <h4 jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.title\"></h4>\r\n            @if (tableFiltered) {\r\n                <button type=\"button\" class=\"btn btn-info\" (click)=\"resetTableFilter()\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.resetFilter\"></button>\r\n            }\r\n        </div>\r\n        <p>\r\n            {{ 'artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.sumOfTestWeights' | artemisTranslate }}\r\n            {{ totalWeight }}\r\n        </p>\r\n        <p [innerHTML]=\"'artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.description' | artemisTranslate\"></p>\r\n    </div>\r\n    <div #containerRefWeight class=\"chart bg-light\">\r\n        <ngx-charts-bar-horizontal-normalized\r\n            [results]=\"ngxWeightData\"\r\n            [xAxis]=\"true\"\r\n            [yAxis]=\"true\"\r\n            [xAxisTickFormatting]=\"xAxisFormatting\"\r\n            [scheme]=\"ngxColors\"\r\n            (select)=\"onSelectWeight($event)\"\r\n        >\r\n            <ng-template #tooltipTemplate let-model=\"model\">\r\n                <b>{{ model.name }}</b>\r\n                <br />\r\n                @if ([testCaseBarTitle.WEIGHT_EN, testCaseBarTitle.WEIGHT_DE].includes(model.series)) {\r\n                    <div>\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weightTooltip\"\r\n                            [translateValues]=\"{ percentage: model.value.toFixed(2) }\"\r\n                        ></span>\r\n                        <br />\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weightAndBonusTooltip\"\r\n                            [translateValues]=\"{ percentage: model.bonus.toFixed(2) }\"\r\n                        ></span>\r\n                    </div>\r\n                }\r\n                @if ([testCaseBarTitle.WEIGHT_AND_BONUS_EN, testCaseBarTitle.WEIGHT_AND_BONUS_DE].includes(model.series)) {\r\n                    <div>\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weightTooltip\"\r\n                            [translateValues]=\"{ percentage: model.weight.toFixed(2) }\"\r\n                        ></span>\r\n                        <br />\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCaseWeights.weightAndBonusTooltip\"\r\n                            [translateValues]=\"{ percentage: model.value.toFixed(2) }\"\r\n                        ></span>\r\n                    </div>\r\n                }\r\n            </ng-template>\r\n        </ngx-charts-bar-horizontal-normalized>\r\n    </div>\r\n    <div class=\"mt-4\">\r\n        <h4 jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCasePoints.title\"></h4>\r\n        <p [innerHTML]=\"'artemisApp.programmingExercise.configureGrading.charts.testCasePoints.description' | artemisTranslate\"></p>\r\n    </div>\r\n    <div #containerRefPoints class=\"points-chart bg-light\">\r\n        <ngx-charts-bar-horizontal-stacked\r\n            [results]=\"ngxPointsData\"\r\n            [xAxis]=\"true\"\r\n            [yAxis]=\"true\"\r\n            [xAxisTickFormatting]=\"xAxisFormatting\"\r\n            [scheme]=\"ngxColors\"\r\n            [xScaleMax]=\"100\"\r\n            (select)=\"onSelectPoints()\"\r\n        >\r\n            <ng-template #tooltipTemplate let-model=\"model\">\r\n                <b>{{ model.name }}</b>\r\n                <br />\r\n                <span\r\n                    jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.testCasePoints.pointsTooltip\"\r\n                    [translateValues]=\"{ percentage: model.value.toFixed(2) }\"\r\n                ></span>\r\n            </ng-template>\r\n        </ngx-charts-bar-horizontal-stacked>\r\n    </div>\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { GradingTab } from 'app/exercises/programming/manage/grading/programming-exercise-configure-grading.component';\r\nimport { ExerciseImportWrapperComponent } from 'app/exercises/shared/import/exercise-import-wrapper/exercise-import-wrapper.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n/**\r\n * The actions of the test case table:\r\n * - Save the test cases with the updated values.\r\n * - Reset all weights to 1.\r\n */\r\n@Component({\r\n    selector: 'jhi-programming-exercise-grading-table-actions',\r\n    templateUrl: './programming-exercise-grading-table-actions.component.html',\r\n    imports: [FaIconComponent, TranslateDirective],\r\n})\r\nexport class ProgrammingExerciseGradingTableActionsComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    readonly faCopy = faCopy;\r\n    @Input() exercise: ProgrammingExercise;\r\n    @Input() hasUnsavedChanges: boolean;\r\n    @Input() isSaving: boolean;\r\n    @Input() activeTab: GradingTab;\r\n\r\n    @Output() onSave = new EventEmitter();\r\n    @Output() onReset = new EventEmitter();\r\n    @Output() onCategoryImport = new EventEmitter<number>();\r\n\r\n    openImportModal() {\r\n        const modalRef = this.modalService.open(ExerciseImportWrapperComponent, { size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.exerciseType = ExerciseType.PROGRAMMING;\r\n        modalRef.componentInstance.programmingLanguage = this.exercise.programmingLanguage;\r\n        modalRef.result.then((result: ProgrammingExercise) => this.onCategoryImport.emit(result.id));\r\n    }\r\n}\r\n", "@if (activeTab === 'code-analysis') {\r\n    <button id=\"import-configuration-button\" class=\"btn btn-primary ms-3 my-1\" (click)=\"openImportModal()\" [disabled]=\"isSaving\">\r\n        <fa-icon [icon]=\"faCopy\" />\r\n        <span class=\"hidden-sm-down\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.categories.import\"></span>\r\n    </button>\r\n}\r\n<button\r\n    id=\"save-table-button\"\r\n    class=\"btn btn-primary ms-3 my-3\"\r\n    jhiTranslate=\"artemisApp.programmingExercise.configureGrading.save\"\r\n    (click)=\"onSave.emit()\"\r\n    [disabled]=\"isSaving || !hasUnsavedChanges\"\r\n></button>\r\n<button\r\n    id=\"reset-table-button\"\r\n    class=\"btn btn-secondary ms-3 my-1\"\r\n    (click)=\"onReset.emit()\"\r\n    [disabled]=\"isSaving\"\r\n    jhiTranslate=\"artemisApp.programmingExercise.configureGrading.reset\"\r\n></button>\r\n", "import { Component, Input, OnChanges } from '@angular/core';\r\nimport { IssuesMap } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { StaticCodeAnalysisCategory, StaticCodeAnalysisCategoryState } from 'app/entities/programming/static-code-analysis-category.model';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nexport class IssueColumn {\r\n    w: string;\r\n    h: string;\r\n    color: string;\r\n    tooltip: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-category-issues-chart',\r\n    template: `\r\n        <div style=\"max-width: 120px; margin: auto;\">\r\n            <div style=\"height: 30px;\" class=\"d-flex justify-content-between\">\r\n                @for (column of columns; track column) {\r\n                    <div class=\"d-flex align-items-end\" [style]=\"{ width: column.w, height: '30px' }\" [ngbTooltip]=\"column.tooltip\" placement=\"bottom auto\">\r\n                        <div [style]=\"{ width: '100%', height: column.h, background: column.color }\"></div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    `,\r\n    imports: [NgbTooltip],\r\n})\r\nexport class CategoryIssuesChartComponent implements OnChanges {\r\n    @Input() issuesMap?: IssuesMap;\r\n    @Input() category: StaticCodeAnalysisCategory;\r\n    @Input() maxGradedIssues: number;\r\n    @Input() totalStudents: number;\r\n    @Input() maxNumberOfIssues: number;\r\n\r\n    columns: IssueColumn[] = [];\r\n\r\n    ngOnChanges() {\r\n        // set a minimum of 10 columns\r\n        const numColumns = Math.max(this.maxNumberOfIssues, 10) + 1;\r\n\r\n        // display properties\r\n        const columnGap = 2;\r\n        const columnWidth = (100 + columnGap) / numColumns - columnGap;\r\n\r\n        const maxGradedIssues = this.category.penalty > 0 ? this.category.maxPenalty / this.category.penalty : 0;\r\n\r\n        const columns = new Array(numColumns).fill(0).map((column, i) => {\r\n            const numIssues = i + 1;\r\n            const numStudents = this.issuesMap ? this.issuesMap[numIssues] || 0 : 0;\r\n            return {\r\n                w: columnWidth + '%',\r\n                h: (this.totalStudents > 0 ? (numStudents / this.totalStudents) * 95 : 0) + 4 + '%',\r\n                color:\r\n                    this.category.state === StaticCodeAnalysisCategoryState.Inactive\r\n                        ? '#ddd'\r\n                        : numStudents === 0 || this.category.state !== StaticCodeAnalysisCategoryState.Graded\r\n                          ? '#28a745'\r\n                          : numIssues > maxGradedIssues\r\n                            ? '#dc3545'\r\n                            : '#ffc107',\r\n                tooltip: `${numStudents} student${numStudents !== 1 ? 's' : ''} ${numStudents !== 1 ? 'have' : 'has'} ${numIssues} issue${numIssues !== 1 ? 's' : ''}.`,\r\n            };\r\n        });\r\n\r\n        setTimeout(() => (this.columns = columns));\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, Output, inject } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { StaticCodeAnalysisCategory, StaticCodeAnalysisCategoryState } from 'app/entities/programming/static-code-analysis-category.model';\r\nimport { CategoryIssuesMap } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { getColor } from 'app/exercises/programming/manage/grading/charts/programming-grading-charts.utils';\r\nimport { ProgrammingGradingChartsDirective } from 'app/exercises/programming/manage/grading/charts/programming-grading-charts.directive';\r\nimport { NgxChartsMultiSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nenum ScaChartBarTitle {\r\n    PENALTY = 'Penalty',\r\n    ISSUES = 'Issues',\r\n    DEDUCTIONS_EN = 'Deductions',\r\n    DEDUCTIONS_DE = 'Punkte',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-sca-category-distribution-chart',\r\n    styleUrls: ['./sca-category-distribution-chart.scss'],\r\n    template: `\r\n        <div>\r\n            <div>\r\n                <div class=\"d-flex justify-content-between\">\r\n                    <h4 jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.categoryDistribution.title\"></h4>\r\n                    @if (tableFiltered) {\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"btn btn-info\"\r\n                            (click)=\"resetTableFilter()\"\r\n                            jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.resetFilter\"\r\n                        ></button>\r\n                    }\r\n                </div>\r\n                <p [innerHTML]=\"'artemisApp.programmingExercise.configureGrading.charts.categoryDistribution.description' | artemisTranslate\"></p>\r\n            </div>\r\n            <div #containerRef class=\"chart bg-light\">\r\n                <ngx-charts-bar-horizontal-normalized\r\n                    [view]=\"[containerRef.offsetWidth, containerRef.offsetHeight]\"\r\n                    [scheme]=\"ngxColors\"\r\n                    [results]=\"ngxData\"\r\n                    [xAxis]=\"true\"\r\n                    [yAxis]=\"true\"\r\n                    [xAxisTickFormatting]=\"xAxisFormatting\"\r\n                    (select)=\"onSelect($event)\"\r\n                >\r\n                    <ng-template #tooltipTemplate let-model=\"model\">\r\n                        <b>{{ model.name }}</b>\r\n                        <br />\r\n                        <div>\r\n                            @switch (model.series) {\r\n                                @case (scaChartBarTitle.PENALTY) {\r\n                                    <div>\r\n                                        <span jhiTranslate=\"artemisApp.programmingAssessment.penaltyTooltip\" [translateValues]=\"{ percentage: model.value.toFixed(2) }\"></span>\r\n                                        <br />\r\n                                        <span jhiTranslate=\"artemisApp.programmingAssessment.issuesTooltip\" [translateValues]=\"{ percentage: model.issues.toFixed(2) }\"></span>\r\n                                        <br />\r\n                                        <span jhiTranslate=\"artemisApp.programmingAssessment.deductionsTooltip\" [translateValues]=\"{ percentage: model.points.toFixed(2) }\"></span>\r\n                                    </div>\r\n                                }\r\n                                @case (scaChartBarTitle.ISSUES) {\r\n                                    <div>\r\n                                        <span jhiTranslate=\"artemisApp.programmingAssessment.penaltyTooltip\" [translateValues]=\"{ percentage: model.penalty.toFixed(2) }\"></span>\r\n                                        <br />\r\n                                        <span jhiTranslate=\"artemisApp.programmingAssessment.issuesTooltip\" [translateValues]=\"{ percentage: model.value.toFixed(2) }\"></span>\r\n                                        <br />\r\n                                        <span jhiTranslate=\"artemisApp.programmingAssessment.deductionsTooltip\" [translateValues]=\"{ percentage: model.points.toFixed(2) }\"></span>\r\n                                    </div>\r\n                                }\r\n                            }\r\n                        </div>\r\n                        @if ([scaChartBarTitle.DEDUCTIONS_EN, scaChartBarTitle.DEDUCTIONS_DE].includes(model.series)) {\r\n                            <div>\r\n                                <span jhiTranslate=\"artemisApp.programmingAssessment.penaltyTooltip\" [translateValues]=\"{ percentage: model.penalty.toFixed(2) }\"></span>\r\n                                <br />\r\n                                <span jhiTranslate=\"artemisApp.programmingAssessment.issuesTooltip\" [translateValues]=\"{ percentage: model.issues.toFixed(2) }\"></span>\r\n                                <br />\r\n                                <span jhiTranslate=\"artemisApp.programmingAssessment.deductionsTooltip\" [translateValues]=\"{ percentage: model.value.toFixed(2) }\"></span>\r\n                            </div>\r\n                        }\r\n                    </ng-template>\r\n                </ngx-charts-bar-horizontal-normalized>\r\n            </div>\r\n        </div>\r\n    `,\r\n    imports: [TranslateDirective, BarChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class ScaCategoryDistributionChartComponent extends ProgrammingGradingChartsDirective implements OnChanges {\r\n    private translateService = inject(TranslateService);\r\n    private navigationUtilsService = inject(ArtemisNavigationUtilService);\r\n\r\n    @Input() categories: StaticCodeAnalysisCategory[];\r\n    @Input() categoryIssuesMap?: CategoryIssuesMap;\r\n    @Input() exercise: ProgrammingExercise;\r\n\r\n    @Output() categoryColorsChange = new EventEmitter<{ [key: string]: string }>();\r\n    @Output() scaCategoryFilter = new EventEmitter<number>();\r\n\r\n    readonly scaChartBarTitle = ScaChartBarTitle;\r\n\r\n    // ngx\r\n    ngxData: NgxChartsMultiSeriesDataEntry[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n        const translateService = this.translateService;\r\n\r\n        translateService.onLangChange.subscribe(() => {\r\n            this.updateTranslations();\r\n        });\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.ngxData = [];\r\n        this.ngxColors.domain = [];\r\n        // update colors for category table\r\n        const categoryColors: { [key: string]: string } = {};\r\n        const categoryPenalties = this.categories\r\n            .map((category) => ({\r\n                ...category,\r\n                penalty: category.state === StaticCodeAnalysisCategoryState.Graded ? category.penalty : 0,\r\n                maxPenalty: category.state === StaticCodeAnalysisCategoryState.Graded ? category.maxPenalty : 0,\r\n            }))\r\n            .map((category) => {\r\n                const issuesMap = this.categoryIssuesMap ? this.categoryIssuesMap[category.name] || {} : {};\r\n\r\n                // total number of issues in this category\r\n                const issuesSum = Object.entries(issuesMap).reduce((sum, [issues, students]) => sum + parseInt(issues, 10) * students, 0);\r\n\r\n                // total number of penalty points in this category\r\n                let penaltyPointsSum = Object.entries(issuesMap)\r\n                    .map(([issues, students]) => students * Math.min(parseInt(issues, 10) * category.penalty, category.maxPenalty))\r\n                    .reduce((sum, penaltyPoints) => sum + penaltyPoints, 0);\r\n\r\n                if ((this.exercise.maxStaticCodeAnalysisPenalty || Infinity) < penaltyPointsSum) {\r\n                    penaltyPointsSum = this.exercise.maxStaticCodeAnalysisPenalty!;\r\n                }\r\n\r\n                return { category, issues: issuesSum || 0, penaltyPoints: penaltyPointsSum };\r\n            });\r\n\r\n        // sum of all penalties\r\n        const totalPenalty = categoryPenalties.reduce((sum, { category }) => sum + Math.min(category.penalty, category.maxPenalty), 0);\r\n        // sum of all issues\r\n        const totalIssues = categoryPenalties.reduce((sum, { issues }) => sum + issues, 0);\r\n        // sum of all penalty points\r\n        const totalPenaltyPoints = categoryPenalties.reduce((sum, { penaltyPoints }) => sum + penaltyPoints, 0);\r\n\r\n        const penalty = { name: this.translateService.instant('artemisApp.programmingAssessment.penalty'), series: [] as any[] };\r\n        const issue = { name: this.translateService.instant('artemisApp.programmingAssessment.issues'), series: [] as any[] };\r\n        const deductions = { name: this.translateService.instant('artemisApp.programmingAssessment.deductions'), series: [] as any[] };\r\n\r\n        categoryPenalties.forEach((element, index) => {\r\n            const penaltyScore = totalPenalty > 0 ? Math.max((Math.min(element.category.penalty, element.category.maxPenalty) / totalPenalty) * 100, 0) : 0;\r\n            const issuesScore = totalIssues > 0 ? Math.max((element.issues / totalIssues) * 100, 0) : 0;\r\n            const penaltyPoints = totalPenaltyPoints > 0 ? Math.max((element.penaltyPoints / totalPenaltyPoints) * 100, 0) : 0;\r\n            const color = getColor(index / this.categories.length, 50);\r\n\r\n            penalty.series.push({ name: element.category.name, value: penaltyScore, issues: issuesScore, points: penaltyPoints, isPenalty: true, id: element.category.id });\r\n            issue.series.push({ name: element.category.name, value: issuesScore, penalty: penaltyScore, points: penaltyPoints });\r\n            deductions.series.push({ name: element.category.name, value: penaltyPoints, penalty: penaltyScore, issues: issuesScore });\r\n\r\n            this.ngxColors.domain.push(color);\r\n            categoryColors[element.category.name] = color;\r\n        });\r\n        this.ngxData.push(penalty);\r\n        this.ngxData.push(issue);\r\n        this.ngxData.push(deductions);\r\n        this.ngxData = [...this.ngxData];\r\n\r\n        this.categoryColorsChange.emit(categoryColors);\r\n    }\r\n\r\n    /**\r\n     * Handles the click on a specific category in a specific line of the chart\r\n     * If the user clicks a category within the penalty bar, the user is delegated to the scores page of the exercise\r\n     * If the user clicks a category within one of the other two bars, the corresponding table is filtered in order to show this category\r\n     * @param event the event delegated by ngx-charts after the user clicked a part of the chart\r\n     */\r\n    onSelect(event: any): void {\r\n        if (!event.isPenalty) {\r\n            this.navigationUtilsService.routeInNewTab(['course-management', this.exercise.course!.id, 'programming-exercises', this.exercise.id, 'scores']);\r\n        } else {\r\n            this.tableFiltered = true;\r\n            this.scaCategoryFilter.emit(event.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method for the reset button to reset the table view\r\n     */\r\n    resetTableFilter(): void {\r\n        super.resetTableFilter();\r\n        this.scaCategoryFilter.emit(ProgrammingGradingChartsDirective.RESET_TABLE);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method in order to keep the translation of the bar labels up to date\r\n     */\r\n    updateTranslations(): void {\r\n        const penaltyLabel = this.translateService.instant('artemisApp.programmingAssessment.penalty');\r\n        const issueLabel = this.translateService.instant('artemisApp.programmingAssessment.issues');\r\n        const deductionsLabel = this.translateService.instant('artemisApp.programmingAssessment.deductions');\r\n\r\n        const labels = [penaltyLabel, issueLabel, deductionsLabel];\r\n\r\n        this.ngxData.forEach((category, index) => {\r\n            category.name = labels[index];\r\n        });\r\n        this.ngxData = [...this.ngxData];\r\n    }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { FilterData } from 'app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-filter-modal.component';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\n\r\nexport interface FeedbackAnalysisResponse {\r\n    feedbackDetails: SearchResult<FeedbackDetail>;\r\n    totalItems: number;\r\n    taskNames: string[];\r\n    testCaseNames: string[];\r\n    errorCategories: string[];\r\n    highestOccurrenceOfGroupedFeedback: number;\r\n}\r\nexport interface FeedbackDetail {\r\n    feedbackIds: number[];\r\n    count: number;\r\n    relativeCount: number;\r\n    detailTexts: string[];\r\n    testCaseName: string;\r\n    taskName: string;\r\n    errorCategory: string;\r\n    hasLongFeedbackText: boolean;\r\n}\r\nexport interface FeedbackAffectedStudentDTO {\r\n    participationId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    login: string;\r\n    repositoryURI: string;\r\n}\r\nexport interface FeedbackChannelRequestDTO {\r\n    channel: ChannelDTO;\r\n    feedbackDetailTexts: string[];\r\n    testCaseName: string;\r\n}\r\n@Injectable()\r\nexport class FeedbackAnalysisService extends BaseApiHttpService {\r\n    search(pageable: SearchTermPageableSearch, groupFeedback: boolean, options: { exerciseId: number; filters: FilterData }): Promise<FeedbackAnalysisResponse> {\r\n        const params = new HttpParams()\r\n            .set('page', pageable.page.toString())\r\n            .set('pageSize', pageable.pageSize.toString())\r\n            .set('searchTerm', pageable.searchTerm || '')\r\n            .set('sortingOrder', pageable.sortingOrder)\r\n            .set('sortedColumn', pageable.sortedColumn)\r\n            .set('filterTasks', options.filters.tasks.join(','))\r\n            .set('filterTestCases', options.filters.testCases.join(','))\r\n            .set('filterOccurrence', options.filters.occurrence.join(','))\r\n            .set('filterErrorCategories', options.filters.errorCategories.join(','))\r\n            .set('groupFeedback', groupFeedback.toString());\r\n\r\n        return this.get<FeedbackAnalysisResponse>(`assessment/exercises/${options.exerciseId}/feedback-details`, { params });\r\n    }\r\n\r\n    getMaxCount(exerciseId: number): Promise<number> {\r\n        return this.get<number>(`assessment/exercises/${exerciseId}/feedback-details-max-count`);\r\n    }\r\n\r\n    async getParticipationForFeedbackDetailText(exerciseId: number, feedbackIds: number[]): Promise<FeedbackAffectedStudentDTO[]> {\r\n        let params = new HttpParams();\r\n        const topFeedbackIds = feedbackIds.slice(0, 5);\r\n\r\n        topFeedbackIds.forEach((id, index) => {\r\n            params = params.set(`feedbackId${index + 1}`, id.toString());\r\n        });\r\n\r\n        return this.get<FeedbackAffectedStudentDTO[]>(`assessment/exercises/${exerciseId}/feedback-details-participation`, { params });\r\n    }\r\n\r\n    createChannel(courseId: number, exerciseId: number, feedbackChannelRequest: FeedbackChannelRequestDTO): Promise<ChannelDTO> {\r\n        return this.post<ChannelDTO>(`communication/courses/${courseId}/${exerciseId}/feedback-channel`, feedbackChannelRequest);\r\n    }\r\n}\r\n", "import { Component, OnInit, inject, input, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FeedbackDetail } from 'app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.service';\r\nimport { LongFeedbackTextService } from 'app/exercises/shared/feedback/long-feedback-text.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-modal',\r\n    templateUrl: './feedback-modal.component.html',\r\n    imports: [TranslateDirective, CommonModule],\r\n})\r\nexport class FeedbackModalComponent implements OnInit {\r\n    feedbackDetail = input.required<FeedbackDetail>();\r\n    longFeedbackText = signal<string>('');\r\n\r\n    activeModal = inject(NgbActiveModal);\r\n    longFeedbackTextService = inject(LongFeedbackTextService);\r\n    readonly TRANSLATION_BASE = 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis';\r\n\r\n    ngOnInit(): void {\r\n        if (this.feedbackDetail().hasLongFeedbackText) {\r\n            this.longFeedbackTextService.find(this.feedbackDetail().feedbackIds[0]).subscribe((response) => {\r\n                this.longFeedbackText.set(response.body || this.feedbackDetail().detailTexts[0]);\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between align-items-center border-bottom-0 p-3\">\r\n    <h4 class=\"m-0\" [jhiTranslate]=\"TRANSLATION_BASE + '.feedbackModal.header'\"></h4>\r\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"activeModal.close()\"></button>\r\n</div>\r\n<hr class=\"my-0\" />\r\n<div class=\"p-3 mb-0\">\r\n    <div class=\"d-flex justify-content-between mb-3\">\r\n        <ng-container *ngTemplateOutlet=\"detailTemplate; context: { label: TRANSLATION_BASE + '.task', value: feedbackDetail().taskName }\" />\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                detailTemplate;\r\n                context: {\r\n                    label: TRANSLATION_BASE + '.occurrence',\r\n                    value: feedbackDetail().count + ' (' + (feedbackDetail().relativeCount | number: '1.0-0') + '%)',\r\n                }\r\n            \"\r\n        />\r\n        <ng-container *ngTemplateOutlet=\"detailTemplate; context: { label: TRANSLATION_BASE + '.testcase', value: feedbackDetail().testCaseName }\" />\r\n        <ng-container *ngTemplateOutlet=\"detailTemplate; context: { label: TRANSLATION_BASE + '.errorCategory', value: 'Student Error' }\" />\r\n    </div>\r\n\r\n    <h5 class=\"mb-3\" [jhiTranslate]=\"TRANSLATION_BASE + '.feedbackModal.feedbackTitle'\"></h5>\r\n    @if (longFeedbackText()) {\r\n        <p>{{ longFeedbackText() }}</p>\r\n    } @else {\r\n        <p>{{ feedbackDetail().detailTexts[0] }}</p>\r\n    }\r\n</div>\r\n\r\n<ng-template #detailTemplate let-label=\"label\" let-value=\"value\">\r\n    <div class=\"px-3 pt-2 border rounded-3\">\r\n        <span class=\"fw-bold\" [jhiTranslate]=\"label\"></span>\r\n        <p>{{ value }}</p>\r\n    </div>\r\n</ng-template>\r\n", "import { Component, inject, output, signal } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { RangeSliderComponent } from 'app/shared/range-slider/range-slider.component';\r\nimport { FeedbackAnalysisService } from 'app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.service';\r\n\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nexport interface FilterData {\r\n    tasks: string[];\r\n    testCases: string[];\r\n    occurrence: number[];\r\n    errorCategories: string[];\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-filter-modal',\r\n    templateUrl: './feedback-filter-modal.component.html',\r\n    imports: [RangeSliderComponent, TranslateDirective],\r\n    providers: [FeedbackAnalysisService],\r\n})\r\nexport class FeedbackFilterModalComponent {\r\n    private localStorage = inject(LocalStorageService);\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    filterApplied = output<FilterData>();\r\n\r\n    readonly TRANSLATION_BASE = 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis.filterModal';\r\n    readonly FILTER_TASKS_KEY = 'feedbackAnalysis.tasks';\r\n    readonly FILTER_TEST_CASES_KEY = 'feedbackAnalysis.testCases';\r\n    readonly FILTER_OCCURRENCE_KEY = 'feedbackAnalysis.occurrence';\r\n    readonly FILTER_ERROR_CATEGORIES_KEY = 'feedbackAnalysis.errorCategories';\r\n\r\n    readonly testCaseNames = signal<string[]>([]);\r\n    readonly minCount = signal<number>(0);\r\n    readonly maxCount = signal<number>(0);\r\n    readonly taskArray = signal<string[]>([]);\r\n    readonly errorCategories = signal<string[]>([]);\r\n\r\n    filters: FilterData = {\r\n        tasks: [],\r\n        testCases: [],\r\n        occurrence: [this.minCount(), this.maxCount() || 1],\r\n        errorCategories: [],\r\n    };\r\n\r\n    applyFilter(): void {\r\n        this.localStorage.store(this.FILTER_TASKS_KEY, this.filters.tasks);\r\n        this.localStorage.store(this.FILTER_TEST_CASES_KEY, this.filters.testCases);\r\n        this.localStorage.store(this.FILTER_OCCURRENCE_KEY, this.filters.occurrence);\r\n        this.localStorage.store(this.FILTER_ERROR_CATEGORIES_KEY, this.filters.errorCategories);\r\n        this.filterApplied.emit(this.filters);\r\n        this.activeModal.close();\r\n    }\r\n\r\n    clearFilter(): void {\r\n        this.localStorage.clear(this.FILTER_TASKS_KEY);\r\n        this.localStorage.clear(this.FILTER_TEST_CASES_KEY);\r\n        this.localStorage.clear(this.FILTER_OCCURRENCE_KEY);\r\n        this.localStorage.clear(this.FILTER_ERROR_CATEGORIES_KEY);\r\n        this.filters = {\r\n            tasks: [],\r\n            testCases: [],\r\n            occurrence: [this.minCount(), this.maxCount()],\r\n            errorCategories: [],\r\n        };\r\n        this.filterApplied.emit(this.filters);\r\n        this.activeModal.close();\r\n    }\r\n\r\n    onCheckboxChange(event: Event, controlName: keyof FilterData): void {\r\n        const checkbox = event.target as HTMLInputElement;\r\n        const values = this.filters[controlName];\r\n\r\n        if (controlName === 'occurrence') {\r\n            const numericValue = Number(checkbox.value);\r\n            this.pushValue(checkbox, values as number[], numericValue);\r\n        } else {\r\n            this.pushValue(checkbox, values as string[], checkbox.value);\r\n        }\r\n    }\r\n\r\n    private pushValue<T>(checkbox: HTMLInputElement, values: T[], valueToAddOrRemove: T): void {\r\n        if (checkbox.checked) {\r\n            values.push(valueToAddOrRemove);\r\n        } else {\r\n            const index = values.indexOf(valueToAddOrRemove);\r\n            if (index >= 0) {\r\n                values.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    closeModal(): void {\r\n        this.activeModal.dismiss();\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h5 class=\"modal-title\" [jhiTranslate]=\"TRANSLATION_BASE + '.modalTitle'\"></h5>\r\n    <button type=\"button\" class=\"btn-close\" (click)=\"closeModal()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"form-group\">\r\n        <label [jhiTranslate]=\"TRANSLATION_BASE + '.task'\"></label>\r\n        <div class=\"row\">\r\n            @for (task of taskArray(); track task) {\r\n                <div class=\"col-4\">\r\n                    <div class=\"form-check\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            class=\"form-check-input\"\r\n                            id=\"task-{{ task }}\"\r\n                            [value]=\"task\"\r\n                            (change)=\"onCheckboxChange($event, 'tasks')\"\r\n                            [checked]=\"filters.tasks.includes(task.toString())\"\r\n                        />\r\n                        <label class=\"form-check-label text-break\">{{ task }}</label>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label [jhiTranslate]=\"TRANSLATION_BASE + '.testcase'\"></label>\r\n        <div class=\"row\">\r\n            @for (testCase of testCaseNames(); track testCase) {\r\n                <div class=\"col-4\">\r\n                    <div class=\"form-check\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            class=\"form-check-input\"\r\n                            id=\"testCase-{{ testCase }}\"\r\n                            [value]=\"testCase\"\r\n                            (change)=\"onCheckboxChange($event, 'testCases')\"\r\n                            [checked]=\"filters.testCases.includes(testCase)\"\r\n                        />\r\n                        <label class=\"form-check-label text-break\">{{ testCase }}</label>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label [jhiTranslate]=\"TRANSLATION_BASE + '.errorCategory'\"></label>\r\n        <div class=\"row\">\r\n            @for (errorCategory of errorCategories(); track errorCategory) {\r\n                <div class=\"col-4\">\r\n                    <div class=\"form-check\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            class=\"form-check-input\"\r\n                            id=\"errorCategory-{{ errorCategory }}\"\r\n                            [value]=\"errorCategory\"\r\n                            (change)=\"onCheckboxChange($event, 'errorCategories')\"\r\n                            [checked]=\"filters.errorCategories.includes(errorCategory)\"\r\n                        />\r\n                        <label class=\"form-check-label\">{{ errorCategory }}</label>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    <label [jhiTranslate]=\"TRANSLATION_BASE + '.occurrence'\"></label>\r\n    <jhi-range-slider [generalMinValue]=\"minCount()\" [generalMaxValue]=\"maxCount()\" [(selectedMinValue)]=\"filters.occurrence[0]\" [(selectedMaxValue)]=\"filters.occurrence[1]\" />\r\n</div>\r\n\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-outline-secondary me-auto\" (click)=\"clearFilter()\" [jhiTranslate]=\"TRANSLATION_BASE + '.clear'\"></button>\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeModal()\" [jhiTranslate]=\"TRANSLATION_BASE + '.cancel'\"></button>\r\n    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"applyFilter()\" [jhiTranslate]=\"TRANSLATION_BASE + '.apply'\"></button>\r\n</div>\r\n", "import { Component, computed, input } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\nimport { faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { SortingOrder } from 'app/shared/table/pageable-table';\r\n\r\n@Component({\r\n    selector: 'jhi-sort-icon',\r\n    templateUrl: './sort-icon.component.html',\r\n    styleUrls: ['./sort-icon.component.scss'],\r\n    imports: [FontAwesomeModule],\r\n})\r\nexport class SortIconComponent {\r\n    direction = input.required<SortingOrder.ASCENDING | SortingOrder.DESCENDING | 'none'>();\r\n\r\n    faSortUp = faSortUp;\r\n    faSortDown = faSortDown;\r\n\r\n    isAscending = computed(() => this.direction() === SortingOrder.ASCENDING);\r\n    isDescending = computed(() => this.direction() === SortingOrder.DESCENDING);\r\n}\r\n", "<div class=\"d-flex flex-column sort-icon\">\r\n    <fa-icon [icon]=\"faSortUp\" [style.color]=\"isAscending() ? 'black' : 'grey'\" class=\"icon\" />\r\n    <fa-icon [icon]=\"faSortDown\" [style.color]=\"isDescending() ? 'black' : 'grey'\" />\r\n</div>\r\n", "import { Component, effect, inject, input, signal, untracked } from '@angular/core';\r\n\r\nimport { FeedbackAffectedStudentDTO, FeedbackAnalysisService, FeedbackDetail } from 'app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.service';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-affected-students-modal',\r\n    templateUrl: './feedback-affected-students-modal.component.html',\r\n    imports: [CodeButtonComponent, TranslateDirective],\r\n    providers: [FeedbackAnalysisService],\r\n})\r\nexport class AffectedStudentsModalComponent {\r\n    courseId = input.required<number>();\r\n    exerciseId = input.required<number>();\r\n    feedbackDetail = input.required<FeedbackDetail>();\r\n    readonly participation = signal<FeedbackAffectedStudentDTO[]>([]);\r\n    readonly TRANSLATION_BASE = 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis.affectedStudentsModal';\r\n\r\n    readonly faSpinner = faSpinner;\r\n    readonly isLoading = signal<boolean>(false);\r\n\r\n    activeModal = inject(NgbActiveModal);\r\n    feedbackService = inject(FeedbackAnalysisService);\r\n    alertService = inject(AlertService);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            untracked(async () => {\r\n                await this.loadAffected();\r\n            });\r\n        });\r\n    }\r\n\r\n    private async loadAffected() {\r\n        const feedbackDetail = this.feedbackDetail();\r\n        this.isLoading.set(true);\r\n        try {\r\n            const response = await this.feedbackService.getParticipationForFeedbackDetailText(this.exerciseId(), feedbackDetail.feedbackIds);\r\n            this.participation.set(response);\r\n        } catch (error) {\r\n            this.alertService.error(this.TRANSLATION_BASE + '.error');\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n}\r\n", "<ng-template #headerTemplate let-label=\"label\" let-colSize=\"colSize\">\r\n    <th scope=\"col\" [class]=\"colSize\">\r\n        <span [jhiTranslate]=\"label\"></span>\r\n    </th>\r\n</ng-template>\r\n<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" [jhiTranslate]=\"TRANSLATION_BASE + '.header'\"></h4>\r\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"activeModal.dismiss()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div>\r\n        <span [jhiTranslate]=\"TRANSLATION_BASE + '.description'\" [translateValues]=\"{ count: feedbackDetail().count }\"></span>\r\n    </div>\r\n    @if (isLoading()) {\r\n        <div class=\"row justify-content-center p-2\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\"></span>\r\n            </div>\r\n        </div>\r\n    } @else {\r\n        <table class=\"table table-striped mb-3\">\r\n            <thead>\r\n                <tr>\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { label: TRANSLATION_BASE + '.name', colSize: 'col-4' }\" />\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { label: TRANSLATION_BASE + '.login', colSize: 'col-4' }\" />\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { label: TRANSLATION_BASE + '.repository', colSize: 'col-2' }\" />\r\n                </tr>\r\n            </thead>\r\n            <tbody class=\"table-group-divider\">\r\n                @for (item of participation(); track item) {\r\n                    <tr>\r\n                        <td>{{ item.firstName }} {{ item.lastName }}</td>\r\n                        <td>{{ item.login }}</td>\r\n                        <td>\r\n                            <jhi-code-button\r\n                                class=\"ms-2\"\r\n                                [smallButtons]=\"true\"\r\n                                [repositoryUri]=\"item.repositoryURI\"\r\n                                [routerLinkForRepositoryView]=\"['/courses', courseId(), 'exercises', exerciseId(), 'repository', item.participationId]\"\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    }\r\n</div>\r\n", "import { Component, inject, input } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-confirm-feedback-channel-creation-modal',\r\n    templateUrl: './confirm-feedback-channel-creation-modal.component.html',\r\n    imports: [TranslateDirective],\r\n})\r\nexport class ConfirmFeedbackChannelCreationModalComponent {\r\n    protected readonly TRANSLATION_BASE = 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis.feedbackDetailChannel.confirmationModal';\r\n    affectedStudentsCount = input.required<number>();\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    confirm(): void {\r\n        this.activeModal.close(true);\r\n    }\r\n\r\n    dismiss(): void {\r\n        this.activeModal.dismiss();\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" [jhiTranslate]=\"TRANSLATION_BASE + '.header'\"></h4>\r\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"dismiss()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <p [jhiTranslate]=\"TRANSLATION_BASE + '.confirmationMessage'\" [translateValues]=\"{ count: affectedStudentsCount }\"></p>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"dismiss()\" [jhiTranslate]=\"TRANSLATION_BASE + '.cancel'\"></button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [jhiTranslate]=\"TRANSLATION_BASE + '.confirm'\"></button>\r\n</div>\r\n", "import { Component, inject, input, output, signal } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { FeedbackDetail } from 'app/exercises/programming/manage/grading/feedback-analysis/feedback-analysis.service';\r\nimport { ConfirmFeedbackChannelCreationModalComponent } from 'app/exercises/programming/manage/grading/feedback-analysis/modal/confirm-feedback-channel-creation-modal.component';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-detail-channel-modal',\r\n    templateUrl: './feedback-detail-channel-modal.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class FeedbackDetailChannelModalComponent {\r\n    protected readonly TRANSLATION_BASE = 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis.feedbackDetailChannel';\r\n    feedbackDetail = input.required<FeedbackDetail>();\r\n    exerciseDueDate = input<dayjs.Dayjs | undefined>();\r\n    currentDateTime = signal(dayjs());\r\n    formSubmitted = output<{ channelDto: ChannelDTO; navigate: boolean }>();\r\n\r\n    isConfirmModalOpen = signal(false);\r\n\r\n    private alertService = inject(AlertService);\r\n    private readonly formBuilder = inject(FormBuilder);\r\n    private readonly activeModal = inject(NgbActiveModal);\r\n    private readonly modalService = inject(NgbModal);\r\n    form: FormGroup = this.formBuilder.group({\r\n        name: ['', [Validators.required, Validators.maxLength(30), Validators.pattern('^[a-z0-9-]{1}[a-z0-9-]{0,30}$')]],\r\n        description: ['', [Validators.required, Validators.maxLength(250)]],\r\n        isPrivate: [true, Validators.required],\r\n        isAnnouncementChannel: [false, Validators.required],\r\n    });\r\n\r\n    async submitForm(navigate: boolean): Promise<void> {\r\n        if (this.form.valid && !this.isConfirmModalOpen()) {\r\n            this.isConfirmModalOpen.set(true);\r\n            const result = await this.handleModal();\r\n            if (result) {\r\n                const channelDTO = new ChannelDTO();\r\n                channelDTO.name = this.form.get('name')?.value;\r\n                channelDTO.description = this.form.get('description')?.value;\r\n                channelDTO.topic = 'FeedbackDiscussion';\r\n                channelDTO.isPublic = !this.form.get('isPrivate')?.value || false;\r\n                channelDTO.isAnnouncementChannel = this.form.get('isAnnouncementChannel')?.value || false;\r\n\r\n                this.formSubmitted.emit({ channelDto: channelDTO, navigate });\r\n                this.closeModal();\r\n            }\r\n            this.isConfirmModalOpen.set(false);\r\n        }\r\n    }\r\n\r\n    async handleModal(): Promise<boolean> {\r\n        try {\r\n            const modalRef = this.modalService.open(ConfirmFeedbackChannelCreationModalComponent, { centered: true });\r\n            modalRef.componentInstance.affectedStudentsCount = this.feedbackDetail().count;\r\n            return await modalRef.result;\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    closeModal(): void {\r\n        this.activeModal.close();\r\n    }\r\n\r\n    dismissModal(): void {\r\n        this.activeModal.dismiss();\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">\r\n        <span [jhiTranslate]=\"TRANSLATION_BASE + '.title'\"></span>\r\n    </h4>\r\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"dismissModal()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"mb-3 text-muted\">\r\n        <p [jhiTranslate]=\"TRANSLATION_BASE + '.description'\"></p>\r\n    </div>\r\n    @if (!exerciseDueDate() || currentDateTime().isBefore(exerciseDueDate())) {\r\n        <div class=\"alert alert-info mt-2\">\r\n            <div [jhiTranslate]=\"TRANSLATION_BASE + '.dueDate'\"></div>\r\n        </div>\r\n    }\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"submitForm(false)\">\r\n        <div class=\"form-group\">\r\n            <label for=\"name\" [jhiTranslate]=\"TRANSLATION_BASE + '.label'\"></label>\r\n            <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\" [attr.placeholder]=\"TRANSLATION_BASE + '.placeholder' | artemisTranslate\" />\r\n            @if (form.controls['name'].invalid && (form.controls['name'].dirty || form.controls['name'].touched)) {\r\n                <div class=\"alert alert-danger mt-2\">\r\n                    @if (form.get('name')?.errors?.['required']) {\r\n                        <div [jhiTranslate]=\"TRANSLATION_BASE + '.requiredValidationErrorName'\"></div>\r\n                    }\r\n                    @if (form.get('name')?.errors?.['maxlength']) {\r\n                        <div [jhiTranslate]=\"TRANSLATION_BASE + '.maxLengthValidationErrorName'\" [translateValues]=\"{ max: '30' }\"></div>\r\n                    }\r\n                    @if (form.get('name')?.errors?.['pattern']) {\r\n                        <div [jhiTranslate]=\"TRANSLATION_BASE + '.regexValidationErrorName'\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"description\" [jhiTranslate]=\"TRANSLATION_BASE + '.descriptionLabel'\"></label>\r\n            <input type=\"text\" class=\"form-control\" id=\"description\" formControlName=\"description\" [attr.placeholder]=\"TRANSLATION_BASE + '.placeholder' | artemisTranslate\" />\r\n            @if (form.controls['description'].invalid && (form.controls['description'].dirty || form.controls['description'].touched)) {\r\n                <div class=\"alert alert-danger mt-2\">\r\n                    @if (form.get('description')?.errors?.['required']) {\r\n                        <div [jhiTranslate]=\"TRANSLATION_BASE + '.requiredValidationErrorDescription'\"></div>\r\n                    }\r\n                    @if (form.get('description')?.errors?.['maxlength']) {\r\n                        <div [jhiTranslate]=\"TRANSLATION_BASE + '.maxLengthValidationErrorDescription'\" [translateValues]=\"{ max: '250' }\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label [jhiTranslate]=\"TRANSLATION_BASE + '.channelVisibility'\"></label>\r\n            <div class=\"btn-group\" role=\"group\">\r\n                <input type=\"radio\" class=\"btn-check\" id=\"public\" formControlName=\"isPrivate\" [value]=\"false\" />\r\n                <label for=\"public\" class=\"btn btn-outline-secondary\" [jhiTranslate]=\"TRANSLATION_BASE + '.visibilityPublic'\"></label>\r\n                <input type=\"radio\" class=\"btn-check\" id=\"private\" formControlName=\"isPrivate\" [value]=\"true\" />\r\n                <label for=\"private\" class=\"btn btn-outline-secondary\" [jhiTranslate]=\"TRANSLATION_BASE + '.visibilityPrivate'\"></label>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label [jhiTranslate]=\"TRANSLATION_BASE + '.announcementChannel'\"></label>\r\n            <div class=\"btn-group\" role=\"group\">\r\n                <input type=\"radio\" class=\"btn-check\" id=\"announcement\" formControlName=\"isAnnouncementChannel\" [value]=\"true\" />\r\n                <label for=\"announcement\" class=\"btn btn-outline-secondary\" [jhiTranslate]=\"TRANSLATION_BASE + '.announcementChannelYes'\"></label>\r\n                <input type=\"radio\" class=\"btn-check\" id=\"regular\" formControlName=\"isAnnouncementChannel\" [value]=\"false\" />\r\n                <label for=\"regular\" class=\"btn btn-outline-secondary\" [jhiTranslate]=\"TRANSLATION_BASE + '.announcementChannelNo'\"></label>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group mt-3\">\r\n            <p class=\"text-info\">\r\n                <strong [jhiTranslate]=\"TRANSLATION_BASE + '.studentNumber'\" [translateValues]=\"{ count: feedbackDetail().count }\"></strong>\r\n            </p>\r\n        </div>\r\n        <div class=\"mt-3 text-muted\">\r\n            <p>\r\n                <strong [jhiTranslate]=\"TRANSLATION_BASE + '.createAndNavigateLabel'\"></strong>\r\n                <span [jhiTranslate]=\"TRANSLATION_BASE + '.createAndNavigateDescription'\"></span>\r\n            </p>\r\n            <p>\r\n                <strong [jhiTranslate]=\"TRANSLATION_BASE + '.createChannelLabel'\"></strong>\r\n                <span [jhiTranslate]=\"TRANSLATION_BASE + '.createChannelDescription'\"></span>\r\n            </p>\r\n        </div>\r\n        <div class=\"d-flex justify-content-end mt-3\">\r\n            <button\r\n                (click)=\"submitForm(true)\"\r\n                type=\"button\"\r\n                class=\"btn btn-primary me-2\"\r\n                [disabled]=\"!form.valid\"\r\n                [jhiTranslate]=\"TRANSLATION_BASE + '.createAndNavigateLabel'\"\r\n            ></button>\r\n            <button (click)=\"submitForm(false)\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!form.valid\" [jhiTranslate]=\"TRANSLATION_BASE + '.createChannelLabel'\"></button>\r\n        </div>\r\n    </form>\r\n</div>\r\n", "import { Component, computed, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { FeedbackAnalysisResponse, FeedbackAnalysisService, FeedbackChannelRequestDTO, FeedbackDetail } from './feedback-analysis.service';\r\nimport { NgbModal, NgbModule, NgbPagination } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faCircleQuestion, faFilter, faMessage, faSort, faSpinner, faUsers } from '@fortawesome/free-solid-svg-icons';\r\nimport { SearchResult, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { FeedbackModalComponent } from 'app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-modal.component';\r\nimport { FeedbackFilterModalComponent, FilterData } from 'app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-filter-modal.component';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\nimport { SortIconComponent } from 'app/shared/sort/sort-icon.component';\r\nimport { AffectedStudentsModalComponent } from 'app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-affected-students-modal.component';\r\nimport { FeedbackDetailChannelModalComponent } from 'app/exercises/programming/manage/grading/feedback-analysis/modal/feedback-detail-channel-modal.component';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { Router } from '@angular/router';\r\nimport { facDetails } from 'app/icons/icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nexport interface FeedbackAnalysisState {\r\n    page: number;\r\n    pageSize: number;\r\n    searchTerm: string;\r\n    sortingOrder: SortingOrder;\r\n    sortedColumn: string;\r\n    filterErrorCategories: string[];\r\n}\r\n@Component({\r\n    selector: 'jhi-feedback-analysis',\r\n    templateUrl: './feedback-analysis.component.html',\r\n    styleUrls: ['./feedback-analysis.component.scss'],\r\n    imports: [SortIconComponent, NgbModule, NgbPagination, TranslateDirective, FontAwesomeModule, CommonModule, ArtemisTranslatePipe, FormsModule],\r\n    providers: [FeedbackAnalysisService],\r\n})\r\nexport class FeedbackAnalysisComponent {\r\n    exerciseTitle = input.required<string>();\r\n    exerciseId = input.required<number>();\r\n    exerciseDueDate = input<dayjs.Dayjs | undefined>();\r\n    courseId = input.required<number>();\r\n    isCommunicationEnabled = input.required<boolean>();\r\n\r\n    private feedbackAnalysisService = inject(FeedbackAnalysisService);\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n    private localStorage = inject(LocalStorageService);\r\n    private router = inject(Router);\r\n\r\n    readonly page = signal<number>(1);\r\n    readonly pageSize = signal<number>(25);\r\n    readonly searchTerm = signal<string>('');\r\n    readonly sortingOrder = signal<SortingOrder>(SortingOrder.DESCENDING);\r\n    readonly sortedColumn = signal<string>('count');\r\n\r\n    readonly content = signal<SearchResult<FeedbackDetail>>({ resultsOnPage: [], numberOfPages: 0 });\r\n    readonly totalItems = signal<number>(0);\r\n    readonly collectionsSize = computed(() => this.content().numberOfPages * this.pageSize());\r\n\r\n    readonly TRANSLATION_BASE = 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis';\r\n    readonly faSort = faSort;\r\n    readonly faFilter = faFilter;\r\n    readonly facDetails = facDetails;\r\n    readonly faUsers = faUsers;\r\n    readonly faMessage = faMessage;\r\n    readonly faCircleQuestion = faCircleQuestion;\r\n    readonly SortingOrder = SortingOrder;\r\n    readonly MAX_FEEDBACK_DETAIL_TEXT_LENGTH = 200;\r\n    readonly faSpinner = faSpinner;\r\n    readonly isLoading = signal<boolean>(false);\r\n\r\n    readonly FILTER_TASKS_KEY = 'feedbackAnalysis.tasks';\r\n    readonly FILTER_TEST_CASES_KEY = 'feedbackAnalysis.testCases';\r\n    readonly FILTER_OCCURRENCE_KEY = 'feedbackAnalysis.occurrence';\r\n    readonly FILTER_ERROR_CATEGORIES_KEY = 'feedbackAnalysis.errorCategories';\r\n    readonly selectedFiltersCount = signal<number>(0);\r\n    readonly taskNames = signal<string[]>([]);\r\n    readonly testCaseNames = signal<string[]>([]);\r\n    readonly minCount = signal<number>(0);\r\n    readonly maxCount = signal<number>(0);\r\n    readonly errorCategories = signal<string[]>(['Student Error', 'Ares Error', 'AST Error']);\r\n\r\n    private isFeedbackDetailChannelModalOpen = false;\r\n\r\n    private readonly debounceLoadData = BaseApiHttpService.debounce(this.loadData.bind(this), 300);\r\n    readonly groupFeedback = signal<boolean>(false);\r\n\r\n    currentRequestFilters = signal<FilterData | undefined>(undefined);\r\n    currentRequestState = signal<FeedbackAnalysisState | undefined>(undefined);\r\n    currentRequestGroupFeedback = signal<boolean | undefined>(undefined);\r\n    currentResponseData = signal<FeedbackAnalysisResponse | undefined>(undefined);\r\n\r\n    previousRequestFilters = signal<FilterData | undefined>(undefined);\r\n    previousRequestState = signal<FeedbackAnalysisState | undefined>(undefined);\r\n    previousRequestGroupFeedback = signal<boolean | undefined>(undefined);\r\n    previousResponseData = signal<FeedbackAnalysisResponse | undefined>(undefined);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            untracked(async () => {\r\n                await this.loadData();\r\n            });\r\n        });\r\n    }\r\n\r\n    private async loadData(): Promise<void> {\r\n        const savedTasks = this.localStorage.retrieve(this.FILTER_TASKS_KEY) || [];\r\n        const savedTestCases = this.localStorage.retrieve(this.FILTER_TEST_CASES_KEY) || [];\r\n        const savedOccurrence = this.localStorage.retrieve(this.FILTER_OCCURRENCE_KEY) || [];\r\n        const savedErrorCategories = this.localStorage.retrieve(this.FILTER_ERROR_CATEGORIES_KEY) || [];\r\n\r\n        const state = {\r\n            page: this.page(),\r\n            pageSize: this.pageSize(),\r\n            searchTerm: this.searchTerm() || '',\r\n            sortingOrder: this.sortingOrder(),\r\n            sortedColumn: this.sortedColumn(),\r\n            filterErrorCategories: this.errorCategories(),\r\n        };\r\n\r\n        const filters = {\r\n            tasks: this.selectedFiltersCount() !== 0 ? savedTasks : [],\r\n            testCases: this.selectedFiltersCount() !== 0 ? savedTestCases : [],\r\n            occurrence: this.selectedFiltersCount() !== 0 ? savedOccurrence : [],\r\n            errorCategories: this.selectedFiltersCount() !== 0 ? savedErrorCategories : [],\r\n        };\r\n\r\n        // cache related check if loading new data is necessary\r\n        const previousResponseData: FeedbackAnalysisResponse | undefined = this.previousResponseData();\r\n        if (\r\n            JSON.stringify(this.previousRequestFilters()) === JSON.stringify(filters) &&\r\n            JSON.stringify(this.previousRequestState()) === JSON.stringify(state) &&\r\n            this.previousRequestGroupFeedback() === this.groupFeedback() &&\r\n            previousResponseData\r\n        ) {\r\n            this.updateCache(previousResponseData, state, filters);\r\n            return;\r\n        }\r\n\r\n        this.isLoading.set(true);\r\n        try {\r\n            const response = await this.feedbackAnalysisService.search(state, this.groupFeedback(), {\r\n                exerciseId: this.exerciseId(),\r\n                filters,\r\n            });\r\n            this.updateCache(response, state, filters);\r\n        } catch (error) {\r\n            this.alertService.error(this.TRANSLATION_BASE + '.error');\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    updateCache(response: FeedbackAnalysisResponse, state: FeedbackAnalysisState, filters: FilterData): void {\r\n        this.content.set(response.feedbackDetails);\r\n        this.totalItems.set(response.totalItems);\r\n        this.taskNames.set(response.taskNames);\r\n        this.testCaseNames.set(response.testCaseNames);\r\n        this.errorCategories.set(response.errorCategories);\r\n        this.maxCount.set(response.highestOccurrenceOfGroupedFeedback);\r\n\r\n        this.previousResponseData.set(this.currentResponseData());\r\n        this.previousRequestGroupFeedback.set(this.currentRequestGroupFeedback());\r\n        this.previousRequestState.set(this.currentRequestState());\r\n        this.previousRequestFilters.set(this.currentRequestFilters());\r\n\r\n        this.currentResponseData.set(response);\r\n        this.currentRequestGroupFeedback.set(this.groupFeedback());\r\n        this.currentRequestState.set(state);\r\n        this.currentRequestFilters.set(filters);\r\n    }\r\n\r\n    setPage(newPage: number): void {\r\n        this.page.set(newPage);\r\n        this.loadData();\r\n    }\r\n\r\n    async search(searchTerm: string): Promise<void> {\r\n        this.page.set(1);\r\n        this.searchTerm.set(searchTerm);\r\n        this.debounceLoadData();\r\n    }\r\n\r\n    openFeedbackModal(feedbackDetail: FeedbackDetail): void {\r\n        const modalRef = this.modalService.open(FeedbackModalComponent, { centered: true, size: 'lg' });\r\n        modalRef.componentInstance.feedbackDetail = signal(feedbackDetail);\r\n    }\r\n\r\n    setSortedColumn(column: string): void {\r\n        if (this.sortedColumn() === column) {\r\n            this.sortingOrder.set(this.sortingOrder() === SortingOrder.ASCENDING ? SortingOrder.DESCENDING : SortingOrder.ASCENDING);\r\n        } else {\r\n            this.sortedColumn.set(column);\r\n            this.sortingOrder.set(SortingOrder.ASCENDING);\r\n        }\r\n        this.loadData();\r\n    }\r\n\r\n    getSortDirection(column: string): SortingOrder.ASCENDING | SortingOrder.DESCENDING | 'none' {\r\n        if (this.sortedColumn() === column) {\r\n            return this.sortingOrder() === SortingOrder.ASCENDING ? SortingOrder.ASCENDING : SortingOrder.DESCENDING;\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    async openFilterModal(): Promise<void> {\r\n        const savedTasks = this.localStorage.retrieve(this.FILTER_TASKS_KEY);\r\n        const savedTestCases = this.localStorage.retrieve(this.FILTER_TEST_CASES_KEY);\r\n        const savedOccurrence = this.localStorage.retrieve(this.FILTER_OCCURRENCE_KEY);\r\n        const savedErrorCategories = this.localStorage.retrieve(this.FILTER_ERROR_CATEGORIES_KEY);\r\n        this.minCount.set(0);\r\n        if (this.groupFeedback()) {\r\n            this.maxCount.set(this.maxCount());\r\n        } else {\r\n            this.maxCount.set(await this.feedbackAnalysisService.getMaxCount(this.exerciseId()));\r\n        }\r\n\r\n        const modalRef = this.modalService.open(FeedbackFilterModalComponent, { centered: true, size: 'lg' });\r\n\r\n        modalRef.componentInstance.exerciseId = this.exerciseId;\r\n        modalRef.componentInstance.taskArray = this.taskNames;\r\n        modalRef.componentInstance.testCaseNames = this.testCaseNames;\r\n        modalRef.componentInstance.maxCount = this.maxCount;\r\n        modalRef.componentInstance.errorCategories = this.errorCategories;\r\n        modalRef.componentInstance.filters = {\r\n            tasks: this.selectedFiltersCount() !== 0 ? savedTasks : [],\r\n            testCases: this.selectedFiltersCount() !== 0 ? savedTestCases : [],\r\n            occurrence: this.selectedFiltersCount() !== 0 ? savedOccurrence : [this.minCount(), this.maxCount()],\r\n            errorCategories: this.selectedFiltersCount() !== 0 ? savedErrorCategories : [],\r\n        };\r\n        modalRef.componentInstance.filterApplied.subscribe((filters: any) => {\r\n            this.applyFilters(filters);\r\n        });\r\n    }\r\n\r\n    applyFilters(filters: FilterData): void {\r\n        this.selectedFiltersCount.set(this.countAppliedFilters(filters));\r\n        this.loadData();\r\n    }\r\n\r\n    countAppliedFilters(filters: FilterData): number {\r\n        let count = 0;\r\n        if (filters.tasks && filters.tasks.length > 0) {\r\n            count += filters.tasks.length;\r\n        }\r\n        if (filters.testCases && filters.testCases.length > 0) {\r\n            count += filters.testCases.length;\r\n        }\r\n        if (filters.errorCategories?.length) {\r\n            count += filters.errorCategories.length;\r\n        }\r\n        if (filters.occurrence && (filters.occurrence[0] !== 0 || filters.occurrence[1] !== this.maxCount())) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    async openAffectedStudentsModal(feedbackDetail: FeedbackDetail): Promise<void> {\r\n        const modalRef = this.modalService.open(AffectedStudentsModalComponent, { centered: true, size: 'lg' });\r\n        modalRef.componentInstance.courseId = this.courseId;\r\n        modalRef.componentInstance.exerciseId = this.exerciseId;\r\n        modalRef.componentInstance.feedbackDetail = signal(feedbackDetail);\r\n    }\r\n\r\n    async openFeedbackDetailChannelModal(feedbackDetail: FeedbackDetail): Promise<void> {\r\n        if (this.isFeedbackDetailChannelModalOpen) {\r\n            return;\r\n        }\r\n        this.isFeedbackDetailChannelModalOpen = true;\r\n        const modalRef = this.modalService.open(FeedbackDetailChannelModalComponent, { centered: true, size: 'lg' });\r\n        modalRef.componentInstance.feedbackDetail = signal(feedbackDetail);\r\n        modalRef.componentInstance.exerciseDueDate = signal(this.exerciseDueDate());\r\n        modalRef.componentInstance.formSubmitted.subscribe(async ({ channelDto, navigate }: { channelDto: ChannelDTO; navigate: boolean }) => {\r\n            try {\r\n                const feedbackChannelRequest: FeedbackChannelRequestDTO = {\r\n                    channel: channelDto,\r\n                    feedbackDetailTexts: feedbackDetail.detailTexts,\r\n                    testCaseName: feedbackDetail.testCaseName,\r\n                };\r\n                const createdChannel = await this.feedbackAnalysisService.createChannel(this.courseId(), this.exerciseId(), feedbackChannelRequest);\r\n                const channelName = createdChannel.name;\r\n                this.alertService.success(this.TRANSLATION_BASE + '.channelSuccess', { channelName });\r\n                if (navigate) {\r\n                    const urlTree = this.router.createUrlTree(['courses', this.courseId(), 'communication'], {\r\n                        queryParams: { conversationId: createdChannel.id },\r\n                    });\r\n                    await this.router.navigateByUrl(urlTree);\r\n                }\r\n            } catch (error) {\r\n                this.alertService.error(error);\r\n            }\r\n        });\r\n        try {\r\n            await modalRef.result;\r\n        } catch {\r\n            // modal dismissed\r\n        } finally {\r\n            this.isFeedbackDetailChannelModalOpen = false;\r\n        }\r\n    }\r\n\r\n    toggleGroupFeedback(): void {\r\n        this.groupFeedback.update((current) => !current);\r\n        this.loadData();\r\n    }\r\n}\r\n", "<ng-template #headerTemplate let-column=\"column\" let-label=\"label\" let-colSize=\"colSize\">\r\n    <th scope=\"col\" [class]=\"colSize\" [class.clickable]=\"column !== 'errorCategory'\" (click)=\"column !== 'errorCategory' && setSortedColumn(column)\">\r\n        <div class=\"d-flex align-items-center\">\r\n            <span [jhiTranslate]=\"label\"></span>\r\n            @if (column !== 'errorCategory') {\r\n                <jhi-sort-icon [direction]=\"getSortDirection(column)\" />\r\n            }\r\n        </div>\r\n    </th>\r\n</ng-template>\r\n<ng-template #emptyTableTemplate>\r\n    <div\r\n        class=\"text-center p-3 text-muted\"\r\n        [jhiTranslate]=\"this.selectedFiltersCount() > 0 || this.searchTerm() !== '' ? TRANSLATION_BASE + '.noDataFilter' : TRANSLATION_BASE + '.noData'\"\r\n    ></div>\r\n</ng-template>\r\n<div class=\"m-3\">\r\n    <div class=\"row m-0 justify-content-between align-items-center\">\r\n        <div class=\"justify-content-between d-flex align-items-center\">\r\n            <h3 class=\"m-0 p-0\" [jhiTranslate]=\"TRANSLATION_BASE + '.title'\" [translateValues]=\"{ exerciseTitle: exerciseTitle() }\"></h3>\r\n            <div class=\"d-flex align-items-center\">\r\n                <div class=\"form-switch d-flex align-items-center flex-md-shrink-0 me-2\">\r\n                    <input class=\"form-check-input mt-0\" type=\"checkbox\" (click)=\"toggleGroupFeedback()\" [checked]=\"groupFeedback()\" style=\"width: 2.5rem; height: 1.25rem\" />\r\n                    <label class=\"ms-1 me-2 mb-0\">\r\n                        <span [jhiTranslate]=\"TRANSLATION_BASE + '.groupFeedback'\"></span>\r\n                        <fa-icon size=\"sm\" [icon]=\"faCircleQuestion\" [ngbTooltip]=\"TRANSLATION_BASE + '.groupFeedbackTooltip' | artemisTranslate\" class=\"btn-warning\" />\r\n                    </label>\r\n                </div>\r\n                <button class=\"btn me-2\" (click)=\"openFilterModal()\" [ngClass]=\"selectedFiltersCount() ? 'btn-success' : 'btn-secondary'\">\r\n                    <fa-icon [icon]=\"faFilter\" />\r\n                    <span [jhiTranslate]=\"TRANSLATION_BASE + '.filter'\"></span> ({{ selectedFiltersCount() }})\r\n                </button>\r\n                <input\r\n                    type=\"search\"\r\n                    class=\"form-control\"\r\n                    [placeholder]=\"TRANSLATION_BASE + '.search' | artemisTranslate\"\r\n                    aria-label=\"Search feedback\"\r\n                    [ngModel]=\"searchTerm()\"\r\n                    (ngModelChange)=\"search($event)\"\r\n                />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div style=\"overflow-x: auto\">\r\n        <table class=\"table table-striped mb-3\">\r\n            <thead>\r\n                <tr>\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { column: 'count', label: TRANSLATION_BASE + '.occurrence', colSize: 'col-1' }\" />\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { column: 'detailTexts', label: TRANSLATION_BASE + '.feedback', colSize: 'col-6' }\" />\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { column: 'taskName', label: TRANSLATION_BASE + '.task', colSize: 'col-1' }\" />\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { column: 'testCaseName', label: TRANSLATION_BASE + '.testcase', colSize: 'col-2' }\" />\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { column: 'errorCategory', label: TRANSLATION_BASE + '.errorCategory', colSize: 'col-1' }\" />\r\n                </tr>\r\n            </thead>\r\n            @if (isLoading()) {\r\n                <div class=\"row justify-content-center p-2\">\r\n                    <div class=\"spinner-border text-primary\" role=\"status\">\r\n                        <span class=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n            } @else {\r\n                <tbody class=\"table-group-divider\">\r\n                    @if (!content().resultsOnPage) {\r\n                        <tr>\r\n                            <td colspan=\"6\">\r\n                                <ng-container *ngTemplateOutlet=\"emptyTableTemplate\" />\r\n                            </td>\r\n                        </tr>\r\n                    } @else {\r\n                        @for (item of content().resultsOnPage; track item) {\r\n                            <tr>\r\n                                <td class=\"text-center\">{{ item.count }} ({{ item.relativeCount | number: '1.0-0' }}%)</td>\r\n                                <td>\r\n                                    {{ item.detailTexts[0].length > MAX_FEEDBACK_DETAIL_TEXT_LENGTH ? (item.detailTexts[0] | slice: 0 : 100) + '...' : item.detailTexts[0] }}\r\n                                </td>\r\n                                <td>{{ item.taskName }}</td>\r\n                                <td>{{ item.testCaseName }}</td>\r\n                                <td>{{ item.errorCategory }}</td>\r\n                                <td class=\"text-center\">\r\n                                    <div class=\"d-flex justify-content-center align-items-center\">\r\n                                        <fa-icon [icon]=\"facDetails\" class=\"ms-2 clickable text-primary\" (click)=\"openFeedbackModal(item)\" />\r\n                                        <fa-icon [icon]=\"faUsers\" class=\"ms-2 clickable text-primary\" (click)=\"openAffectedStudentsModal(item)\" />\r\n                                        @if (isCommunicationEnabled()) {\r\n                                            <fa-icon [icon]=\"faMessage\" class=\"ms-2 clickable text-primary\" (click)=\"openFeedbackDetailChannelModal(item)\" />\r\n                                        }\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        }\r\n                    }\r\n                </tbody>\r\n            }\r\n        </table>\r\n    </div>\r\n    <div class=\"d-flex flex-column align-items-end mt-2\">\r\n        <ngb-pagination [collectionSize]=\"collectionsSize()\" [pageSize]=\"pageSize()\" [page]=\"page()\" (pageChange)=\"setPage($event)\" size=\"sm\" [maxSize]=\"5\" />\r\n        <div class=\"text-muted text-end\">\r\n            <span [jhiTranslate]=\"TRANSLATION_BASE + '.totalItems'\" [translateValues]=\"{ count: totalItems() }\"></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Location, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { faQuestionCircle, faSort, faSortDown, faSortUp, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Course, isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { IssuesMap, ProgrammingExerciseGradingStatistics } from 'app/entities/programming/programming-exercise-test-case-statistics.model';\r\nimport { ProgrammingExerciseTestCase, Visibility } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ProgrammingExercise, ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { StaticCodeAnalysisCategory, StaticCodeAnalysisCategoryState } from 'app/entities/programming/static-code-analysis-category.model';\r\nimport { SubmissionPolicy, SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport { ProgrammingGradingChartsDirective } from 'app/exercises/programming/manage/grading/charts/programming-grading-charts.directive';\r\nimport { ProgrammingExerciseGradingService, StaticCodeAnalysisCategoryUpdate } from 'app/exercises/programming/manage/services/programming-exercise-grading.service';\r\nimport { ProgrammingExerciseWebsocketService } from 'app/exercises/programming/manage/services/programming-exercise-websocket.service';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { SubmissionPolicyService } from 'app/exercises/programming/manage/services/submission-policy.service';\r\nimport { SubmissionPolicyUpdateComponent } from 'app/exercises/shared/submission-policy/submission-policy-update.component';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { differenceBy as _differenceBy, differenceWith as _differenceWith, intersectionWith as _intersectionWith, unionBy as _unionBy } from 'lodash-es';\r\nimport { Observable, Subscription, of, zip } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take, tap } from 'rxjs/operators';\r\nimport { ProgrammingExerciseTaskService } from 'app/exercises/programming/manage/grading/tasks/programming-exercise-task.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ProgrammingExerciseConfigureGradingStatusComponent } from './programming-exercise-configure-grading-status.component';\r\nimport { ProgrammingExerciseConfigureGradingActionsComponent } from './programming-exercise-configure-grading-actions.component';\r\nimport { ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent } from './programming-exercise-grading-submission-policy-configuration-actions.component';\r\nimport { NgbAlert, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ProgrammingExerciseGradingTasksTableComponent } from './tasks/programming-exercise-grading-tasks-table.component';\r\nimport { TestCaseDistributionChartComponent } from './charts/test-case-distribution-chart.component';\r\nimport { ProgrammingExerciseGradingTableActionsComponent } from './programming-exercise-grading-table-actions.component';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TableEditableFieldComponent } from 'app/shared/table/table-editable-field.component';\r\nimport { CategoryIssuesChartComponent } from './charts/category-issues-chart.component';\r\nimport { ScaCategoryDistributionChartComponent } from './charts/sca-category-distribution-chart.component';\r\nimport { FeedbackAnalysisComponent } from './feedback-analysis/feedback-analysis.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n/**\r\n * Describes the editableField\r\n */\r\nexport enum EditableField {\r\n    WEIGHT = 'weight',\r\n    BONUS_MULTIPLIER = 'bonusMultiplier',\r\n    BONUS_POINTS = 'bonusPoints',\r\n    VISIBILITY = 'visibility',\r\n    PENALTY = 'penalty',\r\n    MAX_PENALTY = 'maxPenalty',\r\n    STATE = 'state',\r\n}\r\nexport enum ChartFilterType {\r\n    TEST_CASES,\r\n    CATEGORIES,\r\n}\r\n\r\nenum TestCaseView {\r\n    TABLE,\r\n    CHART,\r\n    BACKUP,\r\n    SAVE_VALUES,\r\n}\r\n\r\nconst DefaultFieldValues: { [key: string]: number } = {\r\n    [EditableField.WEIGHT]: 1,\r\n    [EditableField.BONUS_MULTIPLIER]: 1,\r\n    [EditableField.BONUS_POINTS]: 0,\r\n    [EditableField.PENALTY]: 0,\r\n    [EditableField.MAX_PENALTY]: 0,\r\n};\r\n\r\nexport type GradingTab = 'test-cases' | 'code-analysis' | 'submission-policy' | 'feedback-analysis';\r\nexport type Table = 'testCases' | 'codeAnalysis';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-configure-grading',\r\n    templateUrl: './programming-exercise-configure-grading.component.html',\r\n    styleUrls: ['./programming-exercise-configure-grading.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [ProgrammingExerciseTaskService],\r\n    imports: [\r\n        NgClass,\r\n        TranslateDirective,\r\n        NgTemplateOutlet,\r\n        ProgrammingExerciseConfigureGradingStatusComponent,\r\n        ProgrammingExerciseConfigureGradingActionsComponent,\r\n        ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent,\r\n        SubmissionPolicyUpdateComponent,\r\n        NgbAlert,\r\n        ProgrammingExerciseGradingTasksTableComponent,\r\n        TestCaseDistributionChartComponent,\r\n        ProgrammingExerciseGradingTableActionsComponent,\r\n        NgxDatatableModule,\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        FormsModule,\r\n        TableEditableFieldComponent,\r\n        CategoryIssuesChartComponent,\r\n        ScaCategoryDistributionChartComponent,\r\n        FeedbackAnalysisComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ProgrammingExerciseConfigureGradingComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\r\n    private gradingService = inject(ProgrammingExerciseGradingService);\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private programmingExerciseSubmissionPolicyService = inject(SubmissionPolicyService);\r\n    private programmingExerciseWebsocketService = inject(ProgrammingExerciseWebsocketService);\r\n    private programmingExerciseTaskService = inject(ProgrammingExerciseTaskService);\r\n    private route = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private translateService = inject(TranslateService);\r\n    private location = inject(Location);\r\n    private router = inject(Router);\r\n    private courseManagementService = inject(CourseManagementService);\r\n\r\n    readonly EditableField = EditableField;\r\n    readonly CategoryState = StaticCodeAnalysisCategoryState;\r\n    readonly Visibility = Visibility;\r\n\r\n    course: Course;\r\n    programmingExercise: ProgrammingExercise;\r\n    testCaseSubscription: Subscription;\r\n    testCaseChangedSubscription: Subscription;\r\n    paramSub: Subscription;\r\n\r\n    testCasesValue: ProgrammingExerciseTestCase[] = [];\r\n    changedTestCaseIds: number[] = [];\r\n    // We have to separate these test cases in order to separate the table and chart presentation if the table is filtered by the chart\r\n    filteredTestCasesForTable: ProgrammingExerciseTestCase[] = [];\r\n    filteredTestCasesForCharts: ProgrammingExerciseTestCase[] = [];\r\n    // backup in order to restore the setting before filtering by chart interaction\r\n    backupTestCases: ProgrammingExerciseTestCase[] = [];\r\n\r\n    testCasePoints: { [testCase: string]: number } = {};\r\n    testCasePointsRelative: { [testCase: string]: number } = {};\r\n\r\n    // The event emitters emit this value in order to indicate this component to reset the corresponding table view\r\n    readonly RESET_TABLE = ProgrammingGradingChartsDirective.RESET_TABLE;\r\n    readonly chartFilterType = ChartFilterType;\r\n    readonly ProgrammingLanguage = ProgrammingLanguage;\r\n    protected readonly isCommunicationEnabled = isCommunicationEnabled;\r\n\r\n    // We have to separate these test cases in order to separate the table and chart presentation if the table is filtered by the chart\r\n    staticCodeAnalysisCategoriesForTable: StaticCodeAnalysisCategory[] = [];\r\n    staticCodeAnalysisCategoriesForCharts: StaticCodeAnalysisCategory[] = [];\r\n    // backup in order to restore the setting before filtering by chart interaction\r\n    backupStaticCodeAnalysisCategories: StaticCodeAnalysisCategory[] = [];\r\n    changedCategoryIds: number[] = [];\r\n\r\n    buildAfterDueDateActive: boolean;\r\n    isReleasedAndHasResults: boolean;\r\n    showInactiveValue = false;\r\n    isSaving = false;\r\n    isLoading = false;\r\n    // This flag means that the grading config were edited, but no submission run was triggered yet.\r\n    hasUpdatedGradingConfig = false;\r\n    activeTab: GradingTab;\r\n\r\n    gradingStatistics?: ProgrammingExerciseGradingStatistics;\r\n    gradingStatisticsObservable: Observable<ProgrammingExerciseGradingStatistics>;\r\n    maxIssuesPerCategory = 0;\r\n\r\n    categoryStateList = Object.entries(StaticCodeAnalysisCategoryState).map(([name, value]) => ({ value, name }));\r\n\r\n    testCaseColors = {};\r\n    categoryColors: { [key: string]: string } = {};\r\n    totalWeight = 0;\r\n\r\n    submissionPolicy?: SubmissionPolicy;\r\n    hadPolicyBefore: boolean;\r\n\r\n    // Icons\r\n    faQuestionCircle = faQuestionCircle;\r\n    faSquare = faSquare;\r\n\r\n    /**\r\n     * Returns the value of testcases\r\n     */\r\n    get testCases() {\r\n        return this.testCasesValue;\r\n    }\r\n\r\n    get activeTestCases() {\r\n        return this.testCases.filter(({ active }) => active);\r\n    }\r\n\r\n    get hasUnsavedChanges() {\r\n        return this.programmingExerciseTaskService.hasUnsavedChanges();\r\n    }\r\n\r\n    /**\r\n     * Sets value of the testcases\r\n     * @param testCases the test cases which should be set\r\n     */\r\n    set testCases(testCases: ProgrammingExerciseTestCase[]) {\r\n        this.testCasesValue = testCases;\r\n        this.updateTestCaseFilter();\r\n        this.updateTestPoints();\r\n    }\r\n\r\n    /**\r\n     * Sets the value of showInactive\r\n     * @param showInactive the value which should be set\r\n     */\r\n    set showInactive(showInactive: boolean) {\r\n        this.showInactiveValue = showInactive;\r\n        this.updateTestCaseFilter();\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the route params to get the current exerciseId.\r\n     * Uses the exerciseId to subscribe to the newest value of the exercise's test cases.\r\n     *\r\n     * Also checks if a change guard needs to be activated when the test cases where saved.\r\n     */\r\n    ngOnInit(): void {\r\n        this.paramSub = this.route.params.pipe(distinctUntilChanged()).subscribe((params) => {\r\n            this.isLoading = true;\r\n            const exerciseId = Number(params['exerciseId']);\r\n            this.courseManagementService.find(params['courseId']).subscribe((courseResponse) => (this.course = courseResponse.body!));\r\n\r\n            if (this.programmingExercise == undefined || this.programmingExercise.id !== exerciseId) {\r\n                if (this.testCaseSubscription) {\r\n                    this.testCaseSubscription.unsubscribe();\r\n                }\r\n                if (this.testCaseChangedSubscription) {\r\n                    this.testCaseChangedSubscription.unsubscribe();\r\n                }\r\n\r\n                const loadExercise = this.programmingExerciseService.find(exerciseId).pipe(\r\n                    map((res) => res.body!),\r\n                    tap((exercise) => (this.programmingExercise = exercise)),\r\n                    tap(() => {\r\n                        if (this.programmingExercise.staticCodeAnalysisEnabled) {\r\n                            this.loadStaticCodeAnalysisCategories();\r\n                        }\r\n                        this.hadPolicyBefore = this.programmingExercise.submissionPolicy !== undefined;\r\n                    }),\r\n                    catchError(() => of(null)),\r\n                );\r\n\r\n                const loadExerciseTestCaseState = this.getExerciseTestCaseState(exerciseId).pipe(\r\n                    tap((releaseState) => {\r\n                        this.hasUpdatedGradingConfig = releaseState.testCasesChanged;\r\n                        this.isReleasedAndHasResults = releaseState.released && releaseState.hasStudentResult;\r\n                        this.buildAfterDueDateActive = !!releaseState.buildAndTestStudentSubmissionsAfterDueDate;\r\n                    }),\r\n                    catchError(() => of(null)),\r\n                );\r\n\r\n                this.loadStatistics(exerciseId);\r\n\r\n                zip(loadExercise, loadExerciseTestCaseState)\r\n                    .pipe(take(1))\r\n                    .subscribe(() => {\r\n                        // This subscription e.g. adds new tests to the table that were just created.\r\n                        this.subscribeForTestCaseUpdates();\r\n                        // This subscription is used to determine if the programming exercise's properties necessitate build runs after the test cases are changed.\r\n                        this.subscribeForExerciseTestCasesChangedUpdates();\r\n                        this.isLoading = false;\r\n                    });\r\n            } else {\r\n                this.isLoading = false;\r\n            }\r\n\r\n            const gradingTabs: GradingTab[] = ['test-cases', 'code-analysis', 'submission-policy', 'feedback-analysis'];\r\n            if (gradingTabs.includes(params['tab'])) {\r\n                this.selectTab(params['tab']);\r\n            } else {\r\n                this.selectTab('test-cases');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If there is an existing subscription, unsubscribe\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.testCaseSubscription) {\r\n            this.testCaseSubscription.unsubscribe();\r\n        }\r\n        if (this.testCaseChangedSubscription) {\r\n            this.testCaseChangedSubscription.unsubscribe();\r\n        }\r\n        if (this.paramSub) {\r\n            this.paramSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Subscribes to test case updates\r\n     *  updates the list of test cases\r\n     */\r\n    private subscribeForTestCaseUpdates() {\r\n        if (this.testCaseSubscription) {\r\n            this.testCaseSubscription.unsubscribe();\r\n        }\r\n        this.testCaseSubscription = this.gradingService\r\n            .subscribeForTestCases(this.programmingExercise.id!)\r\n            .pipe(\r\n                tap((testCases: ProgrammingExerciseTestCase[]) => {\r\n                    this.testCases = testCases;\r\n                }),\r\n                tap(() => this.loadStatistics(this.programmingExercise.id!)),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     *  Subscribes to test case changes\r\n     *  checks if the test cases have changed\r\n     */\r\n    private subscribeForExerciseTestCasesChangedUpdates() {\r\n        if (this.testCaseChangedSubscription) {\r\n            this.testCaseChangedSubscription.unsubscribe();\r\n        }\r\n        this.testCaseChangedSubscription = this.programmingExerciseWebsocketService\r\n            .getTestCaseState(this.programmingExercise.id!)\r\n            .pipe(tap((testCasesChanged: boolean) => (this.hasUpdatedGradingConfig = testCasesChanged)))\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Checks if the exercise is released and has at least one student result.\r\n     */\r\n    getExerciseTestCaseState(exerciseId: number) {\r\n        return this.programmingExerciseService.getProgrammingExerciseTestCaseState(exerciseId).pipe(map(({ body }) => body!));\r\n    }\r\n\r\n    /**\r\n     * Update a field of a test case in the component state (does not persist the value on the server!).\r\n     * Adds the currently edited test case to the list of unsaved changes.\r\n     *\r\n     * @param editedTestCase    the edited test case;\r\n     * @param field             the edited field;\r\n     */\r\n    updateEditedField(editedTestCase: ProgrammingExerciseTestCase, field: EditableField) {\r\n        return (newValue: any) => {\r\n            newValue = this.checkFieldValue(newValue, editedTestCase[field as keyof ProgrammingExerciseTestCase], field);\r\n            // Only mark the testcase as changed, if the field has changed.\r\n            if (newValue !== editedTestCase[field as keyof ProgrammingExerciseTestCase]) {\r\n                this.changedTestCaseIds = this.changedTestCaseIds.includes(editedTestCase.id!) ? this.changedTestCaseIds : [...this.changedTestCaseIds, editedTestCase.id!];\r\n                this.updateAllTestCaseViewsAfterEditing(editedTestCase, field, newValue);\r\n                this.updateTestPoints(editedTestCase, field, newValue);\r\n            }\r\n            return newValue;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update a field of a sca category in the component state (does not persist the value on the server!).\r\n     * Adds the currently edited category to the list of unsaved changes.\r\n     *\r\n     * @param editedCategory    the edited category;\r\n     * @param field             the edited field;\r\n     */\r\n    updateEditedCategoryField(editedCategory: StaticCodeAnalysisCategory, field: EditableField) {\r\n        return (newValue: any) => {\r\n            newValue = this.checkFieldValue(newValue, editedCategory[field as keyof StaticCodeAnalysisCategory], field);\r\n            // Only mark the category as changed, if the field has changed.\r\n            if (newValue !== editedCategory[field as keyof StaticCodeAnalysisCategory]) {\r\n                this.changedCategoryIds = this.changedCategoryIds.includes(editedCategory.id) ? this.changedCategoryIds : [...this.changedCategoryIds, editedCategory.id];\r\n                this.updateStaticCodeAnalysisCategories(editedCategory, field, newValue);\r\n            }\r\n            return newValue;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check and validate the new value for an editable field. Optionally applies the default value for the field.\r\n     * @param newValue  The new edited value\r\n     * @param oldValue  The previous value\r\n     * @param field     The edited field\r\n     */\r\n    checkFieldValue(newValue: any, oldValue: any, field: EditableField) {\r\n        // Don't allow an empty string as a value!\r\n        if (newValue === '') {\r\n            newValue = DefaultFieldValues[field];\r\n        }\r\n        if (typeof oldValue === 'number') {\r\n            newValue = Number(newValue);\r\n            if (isNaN(newValue)) {\r\n                newValue = oldValue;\r\n            }\r\n        }\r\n\r\n        return newValue;\r\n    }\r\n\r\n    saveCategories() {\r\n        this.isSaving = true;\r\n\r\n        this.backupStaticCodeAnalysisCategories = this.backupStaticCodeAnalysisCategories.map((category) =>\r\n            category.state === StaticCodeAnalysisCategoryState.Graded ? category : { ...category, penalty: 0, maxPenalty: 0 },\r\n        );\r\n\r\n        const categoriesToUpdate = _intersectionWith(\r\n            this.backupStaticCodeAnalysisCategories,\r\n            this.changedCategoryIds,\r\n            (codeAnalysisCategory: StaticCodeAnalysisCategory, id: number) => codeAnalysisCategory.id === id,\r\n        );\r\n        const categoryUpdates = categoriesToUpdate.map((category) => StaticCodeAnalysisCategoryUpdate.from(category));\r\n\r\n        const saveCodeAnalysis = this.gradingService.updateCodeAnalysisCategories(this.programmingExercise.id!, categoryUpdates).pipe(\r\n            tap((updatedCategories: StaticCodeAnalysisCategory[]) => {\r\n                // From successfully updated categories from dirty checking list.\r\n                this.changedCategoryIds = _differenceWith(\r\n                    this.changedCategoryIds,\r\n                    updatedCategories,\r\n                    (categoryId: number, category: StaticCodeAnalysisCategory) => category.id === categoryId,\r\n                );\r\n\r\n                // Generate the new list of categories.\r\n                this.staticCodeAnalysisCategoriesForTable = _unionBy(updatedCategories, this.backupStaticCodeAnalysisCategories, 'id');\r\n                this.setChartAndBackupCategoryView();\r\n\r\n                // Find out if there are test cases that were not updated, show an error.\r\n                const notUpdatedCategories = _differenceBy(categoriesToUpdate, updatedCategories, 'id');\r\n                if (notUpdatedCategories.length) {\r\n                    this.alertService.error(`artemisApp.programmingExercise.configureGrading.categories.couldNotBeUpdated`, {\r\n                        categories: notUpdatedCategories.map((c) => c.name).join(', '),\r\n                    });\r\n                } else {\r\n                    this.alertService.success(`artemisApp.programmingExercise.configureGrading.categories.updated`);\r\n                }\r\n            }),\r\n            catchError(() => {\r\n                this.alertService.error(`artemisApp.programmingExercise.configureGrading.categories.couldNotBeUpdated`, {\r\n                    categories: categoriesToUpdate.map((c) => c.name).join(', '),\r\n                });\r\n                return of(null);\r\n            }),\r\n        );\r\n\r\n        saveCodeAnalysis.subscribe(() => {\r\n            this.isSaving = false;\r\n        });\r\n    }\r\n\r\n    importCategories(sourceExerciseId: number) {\r\n        this.isSaving = true;\r\n\r\n        this.gradingService\r\n            .importCategoriesFromExercise(this.programmingExercise.id!, sourceExerciseId)\r\n            .pipe(\r\n                tap((newConfiguration: StaticCodeAnalysisCategory[]) => {\r\n                    this.staticCodeAnalysisCategoriesForTable = newConfiguration;\r\n                    this.setChartAndBackupCategoryView();\r\n\r\n                    this.alertService.success('artemisApp.programmingExercise.configureGrading.categories.importSuccessful', { exercise: sourceExerciseId });\r\n                }),\r\n                catchError(() => {\r\n                    this.alertService.error(`artemisApp.programmingExercise.configureGrading.categories.importFailed`, { exercise: sourceExerciseId });\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => (this.isSaving = false));\r\n    }\r\n\r\n    resetCategories() {\r\n        this.isSaving = true;\r\n        this.gradingService\r\n            .resetCategories(this.programmingExercise.id!)\r\n            .pipe(\r\n                tap((categories: StaticCodeAnalysisCategory[]) => {\r\n                    this.alertService.success(`artemisApp.programmingExercise.configureGrading.categories.resetSuccessful`);\r\n                    this.staticCodeAnalysisCategoriesForTable = categories;\r\n                    this.setChartAndBackupCategoryView();\r\n                    this.loadStatistics(this.programmingExercise.id!);\r\n                }),\r\n                catchError(() => {\r\n                    this.alertService.error(`artemisApp.programmingExercise.configureGrading.categories.resetFailed`);\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.isSaving = false;\r\n                this.changedCategoryIds = [];\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Removes the submission policy of the programming exercise.\r\n     */\r\n    removeSubmissionPolicy() {\r\n        this.isSaving = true;\r\n        this.programmingExerciseSubmissionPolicyService\r\n            .removeSubmissionPolicyFromProgrammingExercise(this.programmingExercise.id!)\r\n            .pipe(\r\n                tap(() => {\r\n                    this.programmingExercise.submissionPolicy = undefined;\r\n                    this.hadPolicyBefore = false;\r\n                }),\r\n                catchError(() => {\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.isSaving = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Adds the submission policy of the programming exercise.\r\n     */\r\n    addSubmissionPolicy() {\r\n        this.isSaving = true;\r\n        this.programmingExerciseSubmissionPolicyService\r\n            .addSubmissionPolicyToProgrammingExercise(this.programmingExercise.submissionPolicy!, this.programmingExercise.id!)\r\n            .pipe(\r\n                tap((submissionPolicy: SubmissionPolicy) => {\r\n                    this.programmingExercise.submissionPolicy = submissionPolicy;\r\n                    this.hadPolicyBefore = true;\r\n                }),\r\n                catchError(() => {\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.isSaving = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Updates the submission policy of the programming exercise.\r\n     */\r\n    updateSubmissionPolicy() {\r\n        if (this.programmingExercise.submissionPolicy?.type === SubmissionPolicyType.NONE && this.hadPolicyBefore) {\r\n            this.removeSubmissionPolicy();\r\n            return;\r\n        } else if (!this.hadPolicyBefore && this.programmingExercise.submissionPolicy?.type !== SubmissionPolicyType.NONE) {\r\n            this.addSubmissionPolicy();\r\n            return;\r\n        }\r\n        this.isSaving = true;\r\n        this.programmingExerciseSubmissionPolicyService\r\n            .updateSubmissionPolicyToProgrammingExercise(this.programmingExercise.submissionPolicy!, this.programmingExercise.id!)\r\n            .pipe(\r\n                catchError(() => {\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.isSaving = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Enable/Disable the submission policy of the programming exercise.\r\n     */\r\n    toggleSubmissionPolicy() {\r\n        this.isSaving = true;\r\n        const deactivateSaving = () => {\r\n            this.isSaving = false;\r\n        };\r\n        if (this.programmingExercise.submissionPolicy!.active) {\r\n            this.programmingExerciseSubmissionPolicyService\r\n                .disableSubmissionPolicyOfProgrammingExercise(this.programmingExercise.id!)\r\n                .pipe(\r\n                    tap(() => {\r\n                        this.programmingExercise!.submissionPolicy!.active = false;\r\n                    }),\r\n                )\r\n                .subscribe(deactivateSaving);\r\n        } else {\r\n            this.programmingExerciseSubmissionPolicyService\r\n                .enableSubmissionPolicyOfProgrammingExercise(this.programmingExercise.id!)\r\n                .pipe(\r\n                    tap(() => {\r\n                        this.programmingExercise!.submissionPolicy!.active = true;\r\n                    }),\r\n                )\r\n                .subscribe(deactivateSaving);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes filtering on all available test cases with the specified params.\r\n     */\r\n    updateTestCaseFilter() {\r\n        this.filteredTestCasesForTable = !this.showInactiveValue && this.testCases ? this.testCases.filter(({ active }) => active) : this.testCases;\r\n        this.filteredTestCasesForCharts = this.filteredTestCasesForTable;\r\n        this.backupTestCases = this.filteredTestCasesForTable;\r\n    }\r\n\r\n    /**\r\n     * Calculates the rounded points awarded for passing each test\r\n     */\r\n    updateTestPoints(editedTestCase?: ProgrammingExerciseTestCase, field?: EditableField, newValue?: any) {\r\n        if (!this.testCases) {\r\n            return;\r\n        }\r\n\r\n        const maxPoints = this.programmingExercise.maxPoints!;\r\n        if (!this.totalWeight || !editedTestCase || !field || field === EditableField.WEIGHT || newValue === undefined) {\r\n            this.testCasePoints = {};\r\n            this.testCasePointsRelative = {};\r\n            this.totalWeight = this.activeTestCases.reduce((sum, testCase) => sum + testCase.weight!, 0);\r\n            this.activeTestCases.forEach((testCase) => {\r\n                const points = (this.totalWeight > 0 ? (testCase.weight! * testCase.bonusMultiplier!) / this.totalWeight : 0) * maxPoints + (testCase.bonusPoints ?? 0);\r\n                this.testCasePoints[testCase.testName!] = roundValueSpecifiedByCourseSettings(points, this.course);\r\n                const relativePoints = (points / maxPoints) * 100;\r\n                this.testCasePointsRelative[testCase.testName!] = roundValueSpecifiedByCourseSettings(relativePoints, this.course);\r\n            });\r\n        } else {\r\n            const editedTestCaseNewValue = { ...editedTestCase, [field]: newValue };\r\n            const points =\r\n                (this.totalWeight > 0 ? (editedTestCaseNewValue.weight! * editedTestCaseNewValue.bonusMultiplier!) / this.totalWeight : 0) * maxPoints +\r\n                (editedTestCaseNewValue.bonusPoints ?? 0);\r\n            this.testCasePoints[editedTestCaseNewValue.testName!] = roundValueSpecifiedByCourseSettings(points, this.course);\r\n            const relativePoints = (points / maxPoints) * 100;\r\n            this.testCasePointsRelative[editedTestCaseNewValue.testName!] = roundValueSpecifiedByCourseSettings(relativePoints, this.course);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if there are unsaved test cases or there was no submission run after the test cases were changed.\r\n     * Provides a fitting text for the confirm.\r\n     */\r\n    canDeactivate() {\r\n        if (!this.changedTestCaseIds.length && (!this.isReleasedAndHasResults || !this.hasUpdatedGradingConfig)) {\r\n            return true;\r\n        }\r\n        const warning = this.changedTestCaseIds.length\r\n            ? this.translateService.instant('pendingChanges')\r\n            : this.translateService.instant('artemisApp.programmingExercise.configureGrading.updatedGradingConfig');\r\n        return confirm(warning);\r\n    }\r\n\r\n    /**\r\n     * Switch tabs\r\n     * @param tab The target tab\r\n     */\r\n    selectTab(tab: GradingTab) {\r\n        const parentUrl = this.router.url.substring(0, this.router.url.lastIndexOf('/'));\r\n        this.location.replaceState(`${parentUrl}/${tab}`);\r\n        this.activeTab = tab;\r\n    }\r\n\r\n    /**\r\n     * Get the issues map for a specific category\r\n     * @param categoryName The name of the category\r\n     */\r\n    getIssuesMap(categoryName: string): IssuesMap | undefined {\r\n        return this.gradingStatistics?.categoryIssuesMap ? this.gradingStatistics.categoryIssuesMap[categoryName] : undefined;\r\n    }\r\n\r\n    tableSorts = { testCases: [{ prop: 'testName', dir: 'asc' }], codeAnalysis: [{ prop: 'name', dir: 'asc' }] };\r\n    onSort(table: Table, config: any) {\r\n        this.tableSorts[table] = config.sorts;\r\n    }\r\n\r\n    /**\r\n     * Returns the correct sort-icon for the specified property\r\n     * @param table The table of the property\r\n     * @param prop The sorted property\r\n     */\r\n    iconForSortPropField(table: Table, prop: string) {\r\n        const propSort = this.tableSorts[table].find((e) => e.prop === prop);\r\n        if (!propSort) {\r\n            return faSort;\r\n        }\r\n        return propSort.dir === 'asc' ? faSortUp : faSortDown;\r\n    }\r\n\r\n    valForState = (s: StaticCodeAnalysisCategoryState) => (s === StaticCodeAnalysisCategoryState.Inactive ? 0 : s === StaticCodeAnalysisCategoryState.Feedback ? 1 : 2);\r\n\r\n    /**\r\n     * Comparator function for the state of a sca category.\r\n     */\r\n    compareCategoryState = (_: any, __: any, rowA: StaticCodeAnalysisCategory, rowB: StaticCodeAnalysisCategory) => {\r\n        return this.valForState(rowA.state) - this.valForState(rowB.state);\r\n    };\r\n\r\n    /**\r\n     * Comparator function for the penalty of a sca category.\r\n     */\r\n    comparePenalty = (_: any, __: any, rowA: StaticCodeAnalysisCategory, rowB: StaticCodeAnalysisCategory) => {\r\n        const valForPenalty = (c: StaticCodeAnalysisCategory) => this.valForState(c.state) + (c.state === StaticCodeAnalysisCategoryState.Graded ? c.penalty : 0);\r\n        return valForPenalty(rowA) - valForPenalty(rowB);\r\n    };\r\n\r\n    /**\r\n     * Comparator function for the max-penalty of a sca category.\r\n     */\r\n    compareMaxPenalty = (_: any, __: any, rowA: StaticCodeAnalysisCategory, rowB: StaticCodeAnalysisCategory) => {\r\n        const valForMaxPenalty = (c: StaticCodeAnalysisCategory) => this.valForState(c.state) + (c.state === StaticCodeAnalysisCategoryState.Graded ? c.maxPenalty : 0);\r\n        return valForMaxPenalty(rowA) - valForMaxPenalty(rowB);\r\n    };\r\n\r\n    /**\r\n     * Comparator function for the detected issues of a sca category.\r\n     */\r\n    compareDetectedIssues = (_: any, __: any, rowA: StaticCodeAnalysisCategory, rowB: StaticCodeAnalysisCategory) => {\r\n        const issuesA = this.getIssuesMap(rowA.name);\r\n        const issuesB = this.getIssuesMap(rowB.name);\r\n        const totalIssuesA = Object.values(issuesA ?? {}).reduce((sum, n) => sum + n, 0);\r\n        const totalIssuesB = Object.values(issuesB ?? {}).reduce((sum, n) => sum + n, 0);\r\n        return totalIssuesA !== totalIssuesB ? totalIssuesA - totalIssuesB : this.compareCategoryState(_, __, rowA, rowB);\r\n    };\r\n\r\n    /**\r\n     * Load the static code analysis categories\r\n     */\r\n    private loadStaticCodeAnalysisCategories() {\r\n        this.gradingService\r\n            .getCodeAnalysisCategories(this.programmingExercise.id!)\r\n            .pipe(\r\n                tap((categories) => {\r\n                    this.staticCodeAnalysisCategoriesForTable = categories;\r\n                    this.setChartAndBackupCategoryView();\r\n                }),\r\n                catchError(() => of(null)),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Load the statistics for this exercise and calculate the\r\n     * maximum number of issues in one category\r\n     * @param exerciseId The current exercise id\r\n     */\r\n    private loadStatistics(exerciseId: number) {\r\n        this.gradingStatisticsObservable = this.gradingService.getGradingStatistics(exerciseId);\r\n\r\n        this.gradingStatisticsObservable.subscribe((statistics) => {\r\n            this.gradingStatistics = statistics;\r\n            this.maxIssuesPerCategory = 0;\r\n            if (statistics?.categoryIssuesMap) {\r\n                // calculate the maximum number of issues in one category\r\n                for (const issuesMap of Object.values(statistics?.categoryIssuesMap)) {\r\n                    const maxIssues = Object.keys(issuesMap).reduce((max, issues) => Math.max(max, parseInt(issues, 10)), 0);\r\n                    if (maxIssues > this.maxIssuesPerCategory) {\r\n                        this.maxIssuesPerCategory = maxIssues;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getEventValue(event: Event) {\r\n        const element = event.target as HTMLInputElement;\r\n        return element.value;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that handles the filtering of a table if the user clicks a specific test case or sca category in the respective chart\r\n     * @param testCaseId the id of the test case that is clicked\r\n     * @param filterType enum indicating whether test cases or static code analysis categories are filtered\r\n     */\r\n    filterByChart(testCaseId: number, filterType: ChartFilterType): void {\r\n        const filterFunction = (part: any) => part.id === testCaseId;\r\n        if (filterType === ChartFilterType.TEST_CASES) {\r\n            this.filteredTestCasesForTable = this.backupTestCases;\r\n            if (testCaseId !== this.RESET_TABLE) {\r\n                this.filteredTestCasesForTable = this.filteredTestCasesForTable.filter(filterFunction);\r\n            }\r\n        } else {\r\n            this.staticCodeAnalysisCategoriesForTable = this.backupStaticCodeAnalysisCategories;\r\n            if (testCaseId !== this.RESET_TABLE) {\r\n                this.staticCodeAnalysisCategoriesForTable = this.staticCodeAnalysisCategoriesForTable.filter(filterFunction);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates all different views on the test cases after a test case is edited by the user in the table\r\n     * @param editedTestCase the edited test case\r\n     * @param field the field that is edited\r\n     * @param newValue the newly inserted value\r\n     */\r\n    private updateAllTestCaseViewsAfterEditing(editedTestCase: ProgrammingExerciseTestCase, field: EditableField, newValue: any): void {\r\n        const testCaseDisplayTypes = [TestCaseView.TABLE, TestCaseView.CHART, TestCaseView.BACKUP, TestCaseView.SAVE_VALUES];\r\n        testCaseDisplayTypes.forEach((testCaseDisplayType) => this.updateTestCases(editedTestCase, field, newValue, testCaseDisplayType));\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method in order to prevent further code duplication for the updating of the test case views;\r\n     * @param editedTestCase the edited test case\r\n     * @param field the field that is edited\r\n     * @param newValue the newly inserted value\r\n     * @param displayType enum indicating which view is updated\r\n     */\r\n    private updateTestCases(editedTestCase: ProgrammingExerciseTestCase, field: EditableField, newValue: any, displayType: TestCaseView): void {\r\n        const mapFunction = (testCase: ProgrammingExerciseTestCase) => (testCase.id !== editedTestCase.id ? testCase : { ...testCase, [field]: newValue });\r\n        switch (displayType) {\r\n            case TestCaseView.TABLE:\r\n                this.filteredTestCasesForTable = this.filteredTestCasesForTable.map(mapFunction);\r\n                break;\r\n            case TestCaseView.CHART:\r\n                this.filteredTestCasesForCharts = this.filteredTestCasesForCharts.map(mapFunction);\r\n                break;\r\n            case TestCaseView.BACKUP:\r\n                this.backupTestCases = this.backupTestCases.map(mapFunction);\r\n                break;\r\n            case TestCaseView.SAVE_VALUES:\r\n                this.testCasesValue = this.testCases.map(mapFunction);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that updates all different views on the static code analysis categories if a category is updated by the user in the table\r\n     * @param editedCategory the edited category\r\n     * @param field the field that is edited\r\n     * @param newValue the newly inserted value\r\n     */\r\n    private updateStaticCodeAnalysisCategories(editedCategory: StaticCodeAnalysisCategory, field: EditableField, newValue: any): void {\r\n        const filterFunction = (category: StaticCodeAnalysisCategory) => (category.id !== editedCategory.id ? category : { ...category, [field]: newValue });\r\n\r\n        this.staticCodeAnalysisCategoriesForTable = this.staticCodeAnalysisCategoriesForTable.map(filterFunction);\r\n        this.backupStaticCodeAnalysisCategories = this.backupStaticCodeAnalysisCategories.map(filterFunction);\r\n        this.staticCodeAnalysisCategoriesForCharts = this.backupStaticCodeAnalysisCategories;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that sets the chart and backup view on the static code analysis categories\r\n     */\r\n    private setChartAndBackupCategoryView(): void {\r\n        this.staticCodeAnalysisCategoriesForCharts = this.staticCodeAnalysisCategoriesForTable;\r\n        this.backupStaticCodeAnalysisCategories = this.staticCodeAnalysisCategoriesForTable;\r\n    }\r\n}\r\n", "<ng-template #tabTemplate let-type=\"type\" let-translation=\"translation\">\r\n    <div class=\"tab-item\" (click)=\"selectTab(type)\" [ngClass]=\"activeTab === type ? 'active' : ''\">\r\n        <b [jhiTranslate]=\"translation\"></b>\r\n    </div>\r\n</ng-template>\r\n<div>\r\n    <div class=\"d-flex align-content-center mb-2\">\r\n        <h3 class=\"fw-medium\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.title\"></h3>\r\n    </div>\r\n    @if (!isLoading) {\r\n        <div class=\"top-bar\">\r\n            <div class=\"d-flex align-items-center\">\r\n                <ng-container *ngTemplateOutlet=\"tabTemplate; context: { type: 'test-cases', translation: 'artemisApp.programmingExercise.configureGrading.testCases.title' }\" />\r\n                @if (programmingExercise.staticCodeAnalysisEnabled) {\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"tabTemplate; context: { type: 'code-analysis', translation: 'artemisApp.programmingExercise.configureGrading.categories.titleHeader' }\"\r\n                    />\r\n                }\r\n                <ng-container *ngTemplateOutlet=\"tabTemplate; context: { type: 'submission-policy', translation: 'artemisApp.programmingExercise.submissionPolicy.title' }\" />\r\n                @if (programmingExercise.isAtLeastEditor) {\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                            tabTemplate;\r\n                            context: { type: 'feedback-analysis', translation: 'artemisApp.programmingExercise.configureGrading.feedbackAnalysis.titleHeader' }\r\n                        \"\r\n                    />\r\n                }\r\n            </div>\r\n            <ng-template>\r\n                <div></div>\r\n            </ng-template>\r\n            <div class=\"d-flex align-items-center\">\r\n                @if (activeTab === 'test-cases' || activeTab === 'code-analysis') {\r\n                    <jhi-programming-exercise-configure-grading-status\r\n                        [exerciseIsReleasedAndHasResults]=\"isReleasedAndHasResults\"\r\n                        [hasUnsavedTestCaseChanges]=\"hasUnsavedChanges\"\r\n                        [hasUnsavedCategoryChanges]=\"!!changedCategoryIds.length\"\r\n                        [hasUpdatedGradingConfig]=\"hasUpdatedGradingConfig\"\r\n                    />\r\n                }\r\n                @if (programmingExercise.isAtLeastInstructor && activeTab !== 'feedback-analysis') {\r\n                    <jhi-programming-exercise-configure-grading-actions\r\n                        [exercise]=\"programmingExercise\"\r\n                        [hasUpdatedGradingConfig]=\"hasUpdatedGradingConfig\"\r\n                        [isSaving]=\"isSaving\"\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"grading-body-container mt-3\">\r\n            @if (activeTab === 'submission-policy') {\r\n                <div>\r\n                    <jhi-programming-exercise-grading-submission-policy-configuration-actions\r\n                        [exercise]=\"programmingExercise\"\r\n                        [isSaving]=\"isSaving\"\r\n                        [hadPolicyBefore]=\"hadPolicyBefore\"\r\n                        [formInvalid]=\"policyUpdate.invalid\"\r\n                        (onUpdate)=\"updateSubmissionPolicy()\"\r\n                        (onToggle)=\"toggleSubmissionPolicy()\"\r\n                    />\r\n                    <jhi-submission-policy-update #policyUpdate [programmingExercise]=\"programmingExercise\" [editable]=\"programmingExercise.isAtLeastInstructor!\" />\r\n                    @if (programmingExercise.isAtLeastEditor && programmingExercise.submissionPolicy !== undefined) {\r\n                        <ngb-alert [dismissible]=\"false\" [type]=\"'info'\">\r\n                            <span jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.submissionPenalty.triggerAllInformation\"></span>\r\n                        </ngb-alert>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"grading-body-container mt-3\">\r\n            @if (activeTab === 'test-cases') {\r\n                <div>\r\n                    <div class=\"grading-table-layout\">\r\n                        <div class=\"col-7\">\r\n                            <jhi-programming-exercise-grading-tasks-table\r\n                                [exercise]=\"programmingExercise\"\r\n                                [course]=\"course\"\r\n                                [gradingStatisticsObservable]=\"gradingStatisticsObservable\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"col-5\">\r\n                            <h2 class=\"mb-5 fw-medium\">\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.title\"></span>\r\n                                @if (!!changedTestCaseIds.length) {\r\n                                    <span class=\"badge bg-primary\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.preview\"></span>\r\n                                }\r\n                            </h2>\r\n                            <jhi-test-case-distribution-chart\r\n                                [testCases]=\"filteredTestCasesForCharts\"\r\n                                [testCaseStatsMap]=\"gradingStatistics?.testCaseStatsMap\"\r\n                                [totalParticipations]=\"gradingStatistics?.numParticipations\"\r\n                                [exercise]=\"programmingExercise\"\r\n                                (testCaseColorsChange)=\"testCaseColors = $event\"\r\n                                (testCaseRowFilter)=\"filterByChart($event, chartFilterType.TEST_CASES)\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            @if (activeTab === 'code-analysis' && programmingExercise.staticCodeAnalysisEnabled) {\r\n                <div>\r\n                    <div class=\"grading-table-layout\">\r\n                        <div class=\"col-7\">\r\n                            <div class=\"d-flex align-items-center justify-content-between mb-4\">\r\n                                <h2 class=\"fw-medium\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.categories.title\"></h2>\r\n                                <jhi-programming-exercise-grading-table-actions\r\n                                    [exercise]=\"programmingExercise\"\r\n                                    [hasUnsavedChanges]=\"!!changedCategoryIds.length\"\r\n                                    [isSaving]=\"isSaving\"\r\n                                    [activeTab]=\"activeTab\"\r\n                                    (onReset)=\"resetCategories()\"\r\n                                    (onSave)=\"saveCategories()\"\r\n                                    (onCategoryImport)=\"importCategories($event)\"\r\n                                />\r\n                            </div>\r\n                            <ngx-datatable\r\n                                id=\"codeAnalysisTable\"\r\n                                class=\"bootstrap\"\r\n                                trackByProp=\"id\"\r\n                                [headerHeight]=\"50\"\r\n                                [limit]=\"20\"\r\n                                [columnMode]=\"'force'\"\r\n                                [footerHeight]=\"50\"\r\n                                [rowHeight]=\"'auto'\"\r\n                                [rows]=\"staticCodeAnalysisCategoriesForTable\"\r\n                                [sorts]=\"tableSorts.codeAnalysis\"\r\n                                (sort)=\"onSort('codeAnalysis', $event)\"\r\n                            >\r\n                                <ngx-datatable-column name=\"Category\" prop=\"name\">\r\n                                    <ng-template ngx-datatable-header-template let-sortFn=\"sortFn\">\r\n                                        <span class=\"datatable-header-cell-wrapper\" (click)=\"sortFn()\">\r\n                                            <span class=\"datatable-header-cell-label bold sortable\">Category</span>\r\n                                            <fa-icon [icon]=\"iconForSortPropField('codeAnalysis', 'name')\" />\r\n                                        </span>\r\n                                    </ng-template>\r\n                                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                                        <fa-icon [icon]=\"faSquare\" [style.color]=\"categoryColors[value] || 'white'\" class=\"me-2\" />\r\n                                        {{ value }}\r\n                                    </ng-template>\r\n                                </ngx-datatable-column>\r\n                                <ngx-datatable-column name=\"State\" prop=\"state\" [comparator]=\"compareCategoryState\">\r\n                                    <ng-template ngx-datatable-header-template let-sortFn=\"sortFn\">\r\n                                        <span class=\"datatable-header-cell-wrapper\" (click)=\"sortFn()\">\r\n                                            <span class=\"datatable-header-cell-label bold sortable\">State</span>\r\n                                            <fa-icon [icon]=\"iconForSortPropField('codeAnalysis', 'state')\" />\r\n                                            <fa-icon\r\n                                                [icon]=\"faQuestionCircle\"\r\n                                                class=\"text-secondary ms-2\"\r\n                                                placement=\"bottom auto\"\r\n                                                [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.state' | artemisTranslate\"\r\n                                            />\r\n                                        </span>\r\n                                    </ng-template>\r\n                                    <ng-template ngx-datatable-cell-template let-value=\"value\" let-row=\"row\">\r\n                                        <select\r\n                                            [id]=\"row.id + '-state'\"\r\n                                            [ngModel]=\"value\"\r\n                                            class=\"p-1 form-select\"\r\n                                            (change)=\"updateEditedCategoryField(row, EditableField.STATE)(getEventValue($event))\"\r\n                                        >\r\n                                            @for (s of categoryStateList; track s) {\r\n                                                <option [value]=\"s.value\">{{ s.name }}</option>\r\n                                            }\r\n                                        </select>\r\n                                    </ng-template>\r\n                                </ngx-datatable-column>\r\n                                <ngx-datatable-column name=\"Penalty\" prop=\"penalty\" [comparator]=\"comparePenalty\">\r\n                                    <ng-template ngx-datatable-header-template let-sortFn=\"sortFn\">\r\n                                        <span class=\"datatable-header-cell-wrapper\" (click)=\"sortFn()\">\r\n                                            <span class=\"datatable-header-cell-label bold sortable\">Penalty</span>\r\n                                            <fa-icon [icon]=\"iconForSortPropField('codeAnalysis', 'penalty')\" />\r\n                                            <fa-icon\r\n                                                [icon]=\"faQuestionCircle\"\r\n                                                class=\"text-secondary ms-2\"\r\n                                                placement=\"bottom auto\"\r\n                                                [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.penalty' | artemisTranslate\"\r\n                                            />\r\n                                        </span>\r\n                                    </ng-template>\r\n                                    <ng-template ngx-datatable-cell-template let-value=\"value\" let-row=\"row\">\r\n                                        @if (row.state === CategoryState.Graded) {\r\n                                            <jhi-table-editable-field\r\n                                                [id]=\"row.id + '-penalty'\"\r\n                                                [value]=\"value\"\r\n                                                [onValueUpdate]=\"updateEditedCategoryField(row, EditableField.PENALTY)\"\r\n                                            />\r\n                                        }\r\n                                        @if (row.state === CategoryState.Feedback) {\r\n                                            <span jhiTranslate=\"artemisApp.programmingExercise.configureGrading.categories.notGraded\"></span>\r\n                                        }\r\n                                        @if (row.state === CategoryState.Inactive) {\r\n                                            <span jhiTranslate=\"artemisApp.programmingExercise.configureGrading.categories.noFeedback\"></span>\r\n                                        }\r\n                                    </ng-template>\r\n                                </ngx-datatable-column>\r\n                                <ngx-datatable-column name=\"Max Penalty\" prop=\"maxPenalty\" [comparator]=\"compareMaxPenalty\">\r\n                                    <ng-template ngx-datatable-header-template let-sortFn=\"sortFn\">\r\n                                        <span class=\"datatable-header-cell-wrapper\" (click)=\"sortFn()\">\r\n                                            <span class=\"datatable-header-cell-label bold sortable\">Max Penalty</span>\r\n                                            <fa-icon [icon]=\"iconForSortPropField('codeAnalysis', 'maxPenalty')\" />\r\n                                            <fa-icon\r\n                                                [icon]=\"faQuestionCircle\"\r\n                                                class=\"text-secondary ms-2\"\r\n                                                placement=\"bottom auto\"\r\n                                                [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.maxPenalty' | artemisTranslate\"\r\n                                            />\r\n                                        </span>\r\n                                    </ng-template>\r\n                                    <ng-template ngx-datatable-cell-template let-value=\"value\" let-row=\"row\">\r\n                                        @if (row.state === CategoryState.Graded) {\r\n                                            <jhi-table-editable-field\r\n                                                [id]=\"row.id + '-maxpenalty'\"\r\n                                                [value]=\"value\"\r\n                                                [onValueUpdate]=\"updateEditedCategoryField(row, EditableField.MAX_PENALTY)\"\r\n                                            />\r\n                                        }\r\n                                        @if (row.state === CategoryState.Feedback) {\r\n                                            <span jhiTranslate=\"artemisApp.programmingExercise.configureGrading.categories.notGraded\"></span>\r\n                                        }\r\n                                        @if (row.state === CategoryState.Inactive) {\r\n                                            <span jhiTranslate=\"artemisApp.programmingExercise.configureGrading.categories.noFeedback\"></span>\r\n                                        }\r\n                                    </ng-template>\r\n                                </ngx-datatable-column>\r\n                                <ngx-datatable-column name=\"Detected Issues\" prop=\"detectedIssues\" [comparator]=\"compareDetectedIssues\">\r\n                                    <ng-template ngx-datatable-header-template let-sortFn=\"sortFn\">\r\n                                        <span class=\"datatable-header-cell-wrapper\" (click)=\"sortFn()\">\r\n                                            <span class=\"datatable-header-cell-label bold sortable\">Detected Issues</span>\r\n                                            <fa-icon [icon]=\"iconForSortPropField('codeAnalysis', 'detectedIssues')\" />\r\n                                            <fa-icon\r\n                                                [icon]=\"faQuestionCircle\"\r\n                                                class=\"text-secondary ms-2\"\r\n                                                placement=\"bottom auto\"\r\n                                                [ngbTooltip]=\"'artemisApp.programmingExercise.configureGrading.help.detectedIssues' | artemisTranslate\"\r\n                                            />\r\n                                        </span>\r\n                                    </ng-template>\r\n                                    <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                                        <jhi-category-issues-chart\r\n                                            [category]=\"row\"\r\n                                            [issuesMap]=\"getIssuesMap(row.name)\"\r\n                                            [totalStudents]=\"gradingStatistics?.numParticipations || 0\"\r\n                                            [maxNumberOfIssues]=\"maxIssuesPerCategory\"\r\n                                        />\r\n                                    </ng-template>\r\n                                </ngx-datatable-column>\r\n                            </ngx-datatable>\r\n                        </div>\r\n                        <div class=\"col-5\">\r\n                            <h2 class=\"mb-5 fw-medium\">\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.title\"></span>\r\n                                @if (!!changedCategoryIds.length) {\r\n                                    <span class=\"badge bg-primary\" jhiTranslate=\"artemisApp.programmingExercise.configureGrading.charts.preview\"></span>\r\n                                }\r\n                            </h2>\r\n                            <jhi-sca-category-distribution-chart\r\n                                [categories]=\"staticCodeAnalysisCategoriesForCharts\"\r\n                                [categoryIssuesMap]=\"gradingStatistics?.categoryIssuesMap\"\r\n                                [exercise]=\"programmingExercise\"\r\n                                (categoryColorsChange)=\"categoryColors = $event\"\r\n                                (scaCategoryFilter)=\"filterByChart($event, chartFilterType.CATEGORIES)\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"grading-body-container mt-3\">\r\n            @if (programmingExercise.isAtLeastEditor && activeTab === 'feedback-analysis' && programmingExercise.title && programmingExercise.id && course.id) {\r\n                <jhi-feedback-analysis\r\n                    [exerciseTitle]=\"programmingExercise.title\"\r\n                    [exerciseId]=\"programmingExercise.id\"\r\n                    [exerciseDueDate]=\"programmingExercise.dueDate\"\r\n                    [courseId]=\"course.id\"\r\n                    [isCommunicationEnabled]=\"isCommunicationEnabled(course)\"\r\n                />\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["Visibility", "StaticCodeAnalysisCategoryState", "ProgrammingGradingChartsDirective", "tableFiltered", "ngxColors", "name", "selectable", "group", "ScaleType", "Ordinal", "domain", "xAxisFormatting", "axisTickFormattingWithPercentageSign", "RESET_TABLE", "resetTableFilter", "TestCaseStats", "numPassed", "numFailed", "ProgrammingExerciseTaskService", "http", "inject", "HttpClient", "alertService", "AlertService", "gradingService", "ProgrammingExerciseGradingService", "exercise", "course", "gradingStatistics", "maxPoints", "currentTasks", "tasks", "ignoreInactive", "resourceUrl", "totalWeights", "sum", "testCases", "map", "weight", "flatMap", "task", "hasUnsavedChanges", "some", "changed", "updateTasks", "updateAllTaskPoints", "toggleIgnoreInactive", "setCurrentTasks", "configure", "getTasksByExercise", "pipe", "initializeTasks", "saveTestCases", "testCasesToUpdate", "testcase", "filter", "test", "testCaseUpdates", "testCase", "ProgrammingExerciseTestCaseUpdate", "from", "error", "of", "undefined", "updateTestCase", "id", "tap", "updatedTestCases", "updatedTestCaseIDs", "updatedTest", "includes", "forEach", "notifyTestCases", "notUpdatedTestCases", "length", "success", "catchError", "status", "errorKey", "resetTestCases", "mergeMap", "removeDuplicateTestCasesFromTasks", "testCaseSet", "Set", "uniqueTestCases", "has", "add", "push", "serverSideTasks", "__spreadProps", "__spreadValues", "addGradingStats", "tasksCopy", "JSON", "parse", "stringify", "active", "initializeTask", "get", "stats", "TestCaseStats", "testCaseStatsMap", "testStats", "testName", "testCaseStats", "numPassed", "numFailed", "bonusMultiplier", "getSingleValue", "bonusPoints", "visibility", "type", "updateTaskPoints", "resultingPoints", "resultingPointsPercent", "calculatePoints", "item", "Number", "multiplier", "points", "roundValueSpecifiedByCourseSettings", "relativePoints", "factory", "\u0275fac", "values", "set", "size", "next", "value", "reduce", "a", "b", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_3_Conditional_5_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_3_Conditional_6_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_3_Conditional_7_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "\u0275\u0275conditional", "hasUnsavedTestCaseChanges", "hasUnsavedCategoryChanges", "faCheckCircle", "\u0275\u0275pipeBind1", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_8_Conditional_1_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_8_Conditional_2_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_8_ng_template_3_Template", "\u0275\u0275templateRefExtractor", "hasUpdatedGradingConfig", "faQuestionCircle", "ProgrammingExerciseConfigureGradingStatusComponent", "exerciseIsReleasedAndHasResults", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_3_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_4_Template", "ProgrammingExerciseConfigureGradingStatusComponent_ng_template_5_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_8_Template", "ProgrammingExerciseConfigureGradingStatusComponent_Conditional_9_Template", "ProgrammingExerciseConfigureGradingStatusComponent_ng_template_10_Template", "FaIconComponent", "TranslateDirective", "NgbTooltip", "ArtemisTranslatePipe", "encapsulation", "ProgrammingExerciseReEvaluateButtonComponent", "testCaseService", "inject", "ProgrammingExerciseGradingService", "alertService", "AlertService", "FeatureToggle", "ButtonType", "exercise", "disabled", "isReEvaluationRunning", "faRedo", "triggerReEvaluate", "reEvaluate", "id", "subscribe", "next", "updatedResultsCount", "success", "number", "error", "message", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ERROR", "ProgrammingExercises", "ButtonComponent", "encapsulation", "ProgrammingExerciseConfigureGradingActionsComponent", "exercise", "hasUpdatedGradingConfig", "isSaving", "onBuildTriggered", "EventEmitter", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "emit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ProgrammingExerciseReEvaluateButtonComponent", "ProgrammingExerciseTriggerAllButtonComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onUpdate", "emit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ButtonType", "PRIMARY", "faSave", "isSaving", "exercise", "submissionPolicy", "type", "SubmissionPolicyType", "NONE", "hadPolicyBefore", "formInvalid", "_r3", "onToggle", "ERROR", "_r4", "SUCCESS", "ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent", "EventEmitter", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent_Conditional_3_Template", "ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent_Conditional_4_Template", "ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent_Conditional_5_Template", "\u0275\u0275conditional", "isAtLeastInstructor", "active", "ButtonComponent", "encapsulation", "TestCasePassedBuildsChartComponent", "testCaseStats", "totalParticipations", "passedPercent", "failedPercent", "tooltip", "ngOnChanges", "totalPassedAndFailed", "numPassed", "numFailed", "setTimeout", "generateTooltip", "totalStudents", "notExecutedPercent", "round", "toFixed", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275styleMap", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pureFunction2", "_c1", "NgbTooltip", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "testCaseVisibility_r3", "value", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "name", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "open", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "task", "weight", "taskUpdateHandler", "bonusMultiplier", "bonusPoints", "visibility", "\u0275\u0275repeaterCreate", "ProgrammingExerciseTaskComponent_Conditional_2_For_41_Template", "\u0275\u0275repeaterTrackByIdentity", "faAngleDown", "faAngleRight", "\u0275\u0275textInterpolate", "index", "taskName", "\u0275\u0275propertyInterpolate1", "NOT_ASSIGNED_TO_TASK_NAME", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "testCaseVisibilityList", "\u0275\u0275textInterpolate2", "resultingPoints", "resultingPointsPercent", "tmp_18_0", "type", "undefined", "stats", "numParticipations", "testCaseVisibility_r6", "test_r5", "_r4", "$implicit", "testUpdateHandler", "ProgrammingExerciseTaskComponent_Conditional_3_For_4_For_32_Template", "\u0275\u0275classProp", "active", "formatTestIndex", "\u0275$index_101_r7", "testName", "tmp_25_0", "testCaseStats", "ProgrammingExerciseTaskComponent_Conditional_3_For_4_Template", "testCases", "ProgrammingExerciseTaskComponent", "programmingExerciseTaskService", "inject", "ProgrammingExerciseTaskService", "openSubject", "isExamExercise", "updateTasksEvent", "EventEmitter", "onlyViewTestCases", "gradingStatistics", "ngOnInit", "subscribe", "currentTasks", "length", "updateTestCaseVisibilityList", "test", "initializeTask", "changed", "emit", "testCasesAmount", "testCasesWeightSum", "reduce", "acc", "forEach", "testCase", "i", "j", "Object", "entries", "Visibility", "map", "displayName", "AfterDueDate", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseTaskComponent_Conditional_2_Template", "ProgrammingExerciseTaskComponent_Conditional_3_Template", "\u0275\u0275conditional", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "MinValidator", "NgModel", "TestCasePassedBuildsChartComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleAllTasksExpanded", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faAngleDown", "_r3", "faAngleRight", "_r4", "updateTasks", "\u0275$index_168_r6", "task_r5", "allTasksExpandedSubject", "isExamExercise", "ProgrammingExerciseGradingTasksTableComponent", "taskService", "inject", "ProgrammingExerciseTaskService", "exercise", "course", "gradingStatisticsObservable", "faQuestionCircle", "faScaleUnbalanced", "faMedal", "faAsterisk", "isSaving", "tasks", "currentSort", "ignoreInactive", "ngOnInit", "Subject", "subscribe", "gradingStatistics", "configure", "by", "descending", "toggleShowInactiveTestsShown", "toggleIgnoreInactive", "saveTestCases", "resetTestCases", "value", "next", "changeSort", "sort", "getSortIcon", "faSort", "faSortDown", "faSortUp", "comparators", "name", "compareStringForAttribute", "weight", "compareNumForAttribute", "multiplier", "bonusPoints", "visibility", "resulting", "type", "comparator", "a", "b", "order", "filter", "testCases", "forEach", "task", "attributeKey", "aType", "bType", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseGradingTasksTableComponent_Conditional_9_Template", "ProgrammingExerciseGradingTasksTableComponent_Conditional_10_Template", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "ProgrammingExerciseGradingTasksTableComponent_For_115_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275conditional", "length", "\u0275\u0275textInterpolate1", "maxPoints", "\u0275\u0275pipeBind1", "\u0275\u0275sanitizeHtml", "programmingLanguage", "undefined", "\u0275\u0275repeater", "ButtonComponent", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "NgForm", "NgbTooltip", "FaIconComponent", "ProgrammingExerciseTaskComponent", "ArtemisTranslatePipe", "styles", "getColor", "i", "l", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "resetTableFilter", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "model_r4", "value", "toFixed", "bonus", "weight", "\u0275\u0275template", "TestCaseDistributionChartComponent_ng_template_23_Conditional_6_Template", "TestCaseDistributionChartComponent_ng_template_23_Conditional_7_Template", "\u0275\u0275textInterpolate", "name", "\u0275\u0275conditional", "\u0275\u0275pureFunction2", "_c0", "testCaseBarTitle", "WEIGHT_EN", "WEIGHT_DE", "includes", "series", "WEIGHT_AND_BONUS_EN", "WEIGHT_AND_BONUS_DE", "model_r5", "TestCaseBarTitle", "TestCaseDistributionChartComponent", "ProgrammingGradingChartsDirective", "translateService", "inject", "TranslateService", "navigationUtilService", "ArtemisNavigationUtilService", "testCases", "testCaseStatsMap", "totalParticipations", "exercise", "testCaseColorsChange", "EventEmitter", "testCaseRowFilter", "totalWeight", "ngxWeightData", "ngxPointsData", "constructor", "onLangChange", "subscribe", "updateTranslation", "ngOnInit", "ngOnChanges", "undefined", "filter", "testCase", "visibility", "Visibility", "Never", "reduce", "sum", "maxPoints", "maxScoreInPercent", "getTotalMaxPoints", "totalPoints", "testCaseScores", "map", "testCaseScore", "bonusMultiplier", "bonusPoints", "score", "Math", "min", "stats", "testName", "id", "label", "relWeight", "relScore", "relPoints", "numPassed", "length", "testCaseColors", "instant", "weightAndBonus", "points", "i", "element", "color", "getColor", "push", "max", "ngxColors", "domain", "emit", "forEach", "index", "onSelectPoints", "routeInNewTab", "course", "onSelectWeight", "event", "tableFiltered", "RESET_TABLE", "weightLabel", "weightAndBonusLabel", "pointsLabel", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "TestCaseDistributionChartComponent_Conditional_8_Template", "$event", "i0", "_r1", "TestCaseDistributionChartComponent_ng_template_23_Template", "\u0275\u0275templateRefExtractor", "TestCaseDistributionChartComponent_ng_template_41_Template", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "\u0275\u0275sanitizeHtml", "xAxisFormatting", "TranslateDirective", "BarChartModule", "BarHorizontalNormalizedComponent", "BarHorizontalStackedComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openImportModal", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "isSaving", "faCopy", "ProgrammingExerciseGradingTableActionsComponent", "modalService", "inject", "NgbModal", "exercise", "hasUnsavedChanges", "activeTab", "onSave", "EventEmitter", "onReset", "onCategoryImport", "modalRef", "open", "ExerciseImportWrapperComponent", "size", "backdrop", "componentInstance", "exerciseType", "ExerciseType", "PROGRAMMING", "programmingLanguage", "result", "then", "emit", "id", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseGradingTableActionsComponent_Conditional_0_Template", "\u0275\u0275conditional", "FaIconComponent", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleMap", "\u0275\u0275pureFunction1", "_c0", "column_r1", "w", "\u0275\u0275property", "tooltip", "\u0275\u0275pureFunction2", "_c1", "h", "color", "CategoryIssuesChartComponent", "issuesMap", "category", "maxGradedIssues", "totalStudents", "maxNumberOfIssues", "columns", "ngOnChanges", "numColumns", "Math", "max", "columnGap", "columnWidth", "penalty", "maxPenalty", "Array", "fill", "map", "column", "i", "numIssues", "numStudents", "w", "h", "color", "state", "StaticCodeAnalysisCategoryState", "Inactive", "Graded", "tooltip", "setTimeout", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275repeaterCreate", "CategoryIssuesChartComponent_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275repeater", "NgbTooltip", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "resetTableFilter", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "model_r4", "value", "toFixed", "issues", "points", "penalty", "\u0275\u0275template", "ScaCategoryDistributionChartComponent_ng_template_20_Case_8_Template", "ScaCategoryDistributionChartComponent_ng_template_20_Case_9_Template", "ScaCategoryDistributionChartComponent_ng_template_20_Conditional_12_Template", "\u0275\u0275textInterpolate", "name", "\u0275\u0275conditional", "tmp_5_0", "series", "scaChartBarTitle", "PENALTY", "ISSUES", "\u0275\u0275pureFunction2", "_c0", "DEDUCTIONS_EN", "DEDUCTIONS_DE", "includes", "ScaChartBarTitle", "ScaCategoryDistributionChartComponent", "ProgrammingGradingChartsDirective", "translateService", "inject", "TranslateService", "navigationUtilsService", "ArtemisNavigationUtilService", "categories", "categoryIssuesMap", "exercise", "categoryColorsChange", "EventEmitter", "scaCategoryFilter", "ngxData", "constructor", "onLangChange", "subscribe", "updateTranslations", "ngOnChanges", "ngxColors", "domain", "categoryColors", "categoryPenalties", "map", "category", "__spreadProps", "__spreadValues", "state", "StaticCodeAnalysisCategoryState", "Graded", "maxPenalty", "issuesMap", "issuesSum", "Object", "entries", "reduce", "sum", "students", "parseInt", "penaltyPointsSum", "Math", "min", "penaltyPoints", "maxStaticCodeAnalysisPenalty", "Infinity", "totalPenalty", "totalIssues", "totalPenaltyPoints", "instant", "issue", "deductions", "forEach", "element", "index", "penaltyScore", "max", "issuesScore", "color", "getColor", "length", "push", "isPenalty", "id", "emit", "onSelect", "event", "tableFiltered", "routeInNewTab", "course", "RESET_TABLE", "penaltyLabel", "issueLabel", "deductionsLabel", "labels", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ScaCategoryDistributionChartComponent_Conditional_9_Template", "$event", "i0", "_r1", "ScaCategoryDistributionChartComponent_ng_template_20_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275pipeBind1", "\u0275\u0275sanitizeHtml", "containerRef_r5", "offsetWidth", "offsetHeight", "xAxisFormatting", "TranslateDirective", "BarChartModule", "BarHorizontalNormalizedComponent", "ArtemisTranslatePipe", "styles", "FeedbackAnalysisService", "BaseApiHttpService", "search", "pageable", "groupFeedback", "options", "params", "HttpParams", "set", "page", "toString", "pageSize", "searchTerm", "sortingOrder", "sortedColumn", "filters", "tasks", "join", "testCases", "occurrence", "errorCategories", "get", "exerciseId", "getMaxCount", "getParticipationForFeedbackDetailText", "feedbackIds", "__async", "topFeedbackIds", "slice", "forEach", "id", "index", "createChannel", "courseId", "feedbackChannelRequest", "post", "__ngFactoryType__", "factory", "\u0275fac", "\u0275\u0275elementContainer", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r1", "longFeedbackText", "feedbackDetail", "detailTexts", "\u0275\u0275element", "\u0275\u0275property", "label_r3", "value_r4", "FeedbackModalComponent", "input", "required", "signal", "activeModal", "inject", "NgbActiveModal", "longFeedbackTextService", "LongFeedbackTextService", "TRANSLATION_BASE", "ngOnInit", "hasLongFeedbackText", "find", "feedbackIds", "subscribe", "response", "set", "body", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "close", "\u0275\u0275template", "FeedbackModalComponent_ng_container_13_Template", "FeedbackModalComponent_ng_container_15_Template", "FeedbackModalComponent_ng_container_18_Template", "FeedbackModalComponent_ng_container_20_Template", "FeedbackModalComponent_Conditional_25_Template", "FeedbackModalComponent_Conditional_26_Template", "FeedbackModalComponent_ng_template_28_Template", "\u0275\u0275templateRefExtractor", "detailTemplate_r5", "\u0275\u0275pureFunction2", "_c0", "taskName", "count", "\u0275\u0275pipeBind2", "relativeCount", "testCaseName", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275conditional", "TranslateDirective", "CommonModule", "NgTemplateOutlet", "DecimalPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onCheckboxChange", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "task_r3", "\u0275\u0275property", "filters", "tasks", "includes", "toString", "\u0275\u0275textInterpolate", "_r4", "testCase_r5", "testCases", "_r6", "errorCategory_r7", "errorCategories", "FeedbackFilterModalComponent", "localStorage", "inject", "LocalStorageService", "activeModal", "NgbActiveModal", "filterApplied", "output", "TRANSLATION_BASE", "FILTER_TASKS_KEY", "FILTER_TEST_CASES_KEY", "FILTER_OCCURRENCE_KEY", "FILTER_ERROR_CATEGORIES_KEY", "testCaseNames", "signal", "minCount", "maxCount", "taskArray", "occurrence", "applyFilter", "store", "emit", "close", "clearFilter", "clear", "event", "controlName", "checkbox", "target", "values", "numericValue", "Number", "value", "pushValue", "valueToAddOrRemove", "checked", "push", "index", "indexOf", "splice", "closeModal", "dismiss", "selectors", "outputs", "features", "\u0275\u0275ProvidersFeature", "FeedbackAnalysisService", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "FeedbackFilterModalComponent_For_16_Template", "\u0275\u0275repeaterTrackByIdentity", "FeedbackFilterModalComponent_For_26_Template", "FeedbackFilterModalComponent_For_36_Template", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275repeater", "\u0275\u0275twoWayProperty", "RangeSliderComponent", "TranslateDirective", "encapsulation", "SortIconComponent", "direction", "input", "required", "faSortUp", "faSortDown", "isAscending", "computed", "SortingOrder", "ASCENDING", "isDescending", "DESCENDING", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleProp", "\u0275\u0275property", "FontAwesomeModule", "FaIconComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classMap", "colSize_r3", "\u0275\u0275property", "label_r2", "\u0275\u0275elementContainer", "\u0275\u0275textInterpolate2", "item_r4", "firstName", "lastName", "\u0275\u0275textInterpolate", "login", "repositoryURI", "\u0275\u0275pureFunction3", "_c3", "ctx_r4", "courseId", "exerciseId", "participationId", "\u0275\u0275template", "AffectedStudentsModalComponent_Conditional_18_ng_container_7_Template", "AffectedStudentsModalComponent_Conditional_18_ng_container_9_Template", "AffectedStudentsModalComponent_Conditional_18_ng_container_11_Template", "\u0275\u0275repeaterCreate", "AffectedStudentsModalComponent_Conditional_18_For_18_Template", "\u0275\u0275repeaterTrackByIdentity", "headerTemplate_r6", "\u0275\u0275pureFunction1", "_c1", "TRANSLATION_BASE", "_c2", "\u0275\u0275repeater", "participation", "AffectedStudentsModalComponent", "input", "required", "feedbackDetail", "signal", "faSpinner", "isLoading", "activeModal", "inject", "NgbActiveModal", "feedbackService", "FeedbackAnalysisService", "alertService", "AlertService", "constructor", "effect", "untracked", "__async", "loadAffected", "set", "response", "getParticipationForFeedbackDetailText", "feedbackIds", "error", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "AffectedStudentsModalComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "dismiss", "AffectedStudentsModalComponent_Conditional_17_Template", "AffectedStudentsModalComponent_Conditional_18_Template", "_c0", "count", "\u0275\u0275conditional", "CodeButtonComponent", "TranslateDirective", "encapsulation", "ConfirmFeedbackChannelCreationModalComponent", "TRANSLATION_BASE", "affectedStudentsCount", "input", "required", "activeModal", "inject", "NgbActiveModal", "confirm", "close", "dismiss", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "TRANSLATION_BASE", "\u0275\u0275pureFunction0", "_c1", "\u0275\u0275template", "FeedbackDetailChannelModalComponent_Conditional_27_Conditional_3_Template", "FeedbackDetailChannelModalComponent_Conditional_27_Conditional_4_Template", "FeedbackDetailChannelModalComponent_Conditional_27_Conditional_5_Template", "\u0275\u0275conditional", "tmp_1_0", "form", "get", "errors", "tmp_2_0", "tmp_3_0", "_c2", "FeedbackDetailChannelModalComponent_Conditional_36_Conditional_3_Template", "FeedbackDetailChannelModalComponent_Conditional_36_Conditional_4_Template", "FeedbackDetailChannelModalComponent", "feedbackDetail", "input", "required", "exerciseDueDate", "currentDateTime", "signal", "dayjs", "formSubmitted", "output", "isConfirmModalOpen", "alertService", "inject", "AlertService", "formBuilder", "FormBuilder", "activeModal", "NgbActiveModal", "modalService", "NgbModal", "group", "name", "Validators", "maxLength", "pattern", "description", "isPrivate", "isAnnouncementChannel", "submitForm", "navigate", "__async", "valid", "set", "handleModal", "channelDTO", "ChannelDTO", "value", "topic", "isPublic", "emit", "channelDto", "closeModal", "modalRef", "open", "ConfirmFeedbackChannelCreationModalComponent", "centered", "componentInstance", "affectedStudentsCount", "count", "result", "error", "close", "dismissModal", "dismiss", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "FeedbackDetailChannelModalComponent_Conditional_17_Template", "FeedbackDetailChannelModalComponent_Conditional_27_Template", "FeedbackDetailChannelModalComponent_Conditional_36_Template", "isBefore", "controls", "invalid", "dirty", "touched", "\u0275\u0275pureFunction1", "_c0", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r3", "getSortDirection", "column_r3", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "column", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setSortedColumn", "\u0275\u0275template", "FeedbackAnalysisComponent_ng_template_0_Conditional_7_Template", "\u0275\u0275elementEnd", "\u0275\u0275classMap", "colSize_r6", "\u0275\u0275classProp", "label_r5", "\u0275\u0275conditional", "selectedFiltersCount", "searchTerm", "TRANSLATION_BASE", "\u0275\u0275elementContainer", "FeedbackAnalysisComponent_Conditional_63_Conditional_3_ng_container_5_Template", "emptyTableTemplate_r7", "_r10", "item_r9", "$implicit", "openFeedbackDetailChannelModal", "faMessage", "_r8", "openFeedbackModal", "openAffectedStudentsModal", "FeedbackAnalysisComponent_Conditional_63_Conditional_4_For_2_Conditional_28_Template", "\u0275\u0275textInterpolate2", "count", "\u0275\u0275pipeBind2", "relativeCount", "\u0275\u0275textInterpolate1", "detailTexts", "length", "MAX_FEEDBACK_DETAIL_TEXT_LENGTH", "\u0275\u0275pipeBind3", "\u0275\u0275textInterpolate", "taskName", "testCaseName", "errorCategory", "facDetails", "faUsers", "isCommunicationEnabled", "\u0275\u0275repeaterCreate", "FeedbackAnalysisComponent_Conditional_63_Conditional_4_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "content", "resultsOnPage", "FeedbackAnalysisComponent_Conditional_63_Conditional_3_Template", "FeedbackAnalysisComponent_Conditional_63_Conditional_4_Template", "FeedbackAnalysisComponent", "exerciseTitle", "input", "required", "exerciseId", "exerciseDueDate", "courseId", "feedbackAnalysisService", "inject", "FeedbackAnalysisService", "alertService", "AlertService", "modalService", "NgbModal", "localStorage", "LocalStorageService", "router", "Router", "page", "signal", "pageSize", "sortingOrder", "SortingOrder", "DESCENDING", "sortedColumn", "numberOfPages", "totalItems", "collectionsSize", "computed", "faSort", "faFilter", "faCircleQuestion", "faSpinner", "isLoading", "FILTER_TASKS_KEY", "FILTER_TEST_CASES_KEY", "FILTER_OCCURRENCE_KEY", "FILTER_ERROR_CATEGORIES_KEY", "taskNames", "testCaseNames", "minCount", "maxCount", "errorCategories", "isFeedbackDetailChannelModalOpen", "debounceLoadData", "BaseApiHttpService", "debounce", "loadData", "bind", "groupFeedback", "currentRequestFilters", "undefined", "currentRequestState", "currentRequestGroupFeedback", "currentResponseData", "previousRequestFilters", "previousRequestState", "previousRequestGroupFeedback", "previousResponseData", "constructor", "effect", "untracked", "__async", "savedTasks", "retrieve", "savedTestCases", "savedOccurrence", "savedErrorCategories", "state", "filterErrorCategories", "filters", "tasks", "testCases", "occurrence", "JSON", "stringify", "updateCache", "set", "response", "search", "error", "feedbackDetails", "highestOccurrenceOfGroupedFeedback", "setPage", "newPage", "feedbackDetail", "modalRef", "open", "FeedbackModalComponent", "centered", "size", "componentInstance", "ASCENDING", "openFilterModal", "getMaxCount", "FeedbackFilterModalComponent", "taskArray", "filterApplied", "subscribe", "applyFilters", "countAppliedFilters", "AffectedStudentsModalComponent", "FeedbackDetailChannelModalComponent", "formSubmitted", "_0", "channelDto", "navigate", "feedbackChannelRequest", "channel", "feedbackDetailTexts", "createdChannel", "createChannel", "channelName", "name", "success", "urlTree", "createUrlTree", "queryParams", "conversationId", "id", "navigateByUrl", "result", "toggleGroupFeedback", "update", "current", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "FeedbackAnalysisComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "FeedbackAnalysisComponent_ng_template_3_Template", "i0", "_r1", "$event", "FeedbackAnalysisComponent_ng_container_50_Template", "FeedbackAnalysisComponent_ng_container_52_Template", "FeedbackAnalysisComponent_ng_container_54_Template", "FeedbackAnalysisComponent_ng_container_56_Template", "FeedbackAnalysisComponent_ng_container_58_Template", "FeedbackAnalysisComponent_Conditional_62_Template", "FeedbackAnalysisComponent_Conditional_63_Template", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pipeBind1", "headerTemplate_r11", "_c1", "_c2", "_c3", "_c4", "_c5", "_c6", "SortIconComponent", "NgbModule", "NgbPagination", "NgbTooltip", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "CommonModule", "NgClass", "NgTemplateOutlet", "SlicePipe", "DecimalPipe", "ArtemisTranslatePipe", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "type_r2", "\u0275\u0275restoreView", "_r1", "type", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectTab", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "activeTab", "translation_r4", "\u0275\u0275elementContainer", "\u0275\u0275template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_7_ng_container_1_Template", "tabTemplate_r5", "\u0275\u0275pureFunction0", "_c2", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_10_ng_container_1_Template", "_c3", "isReleasedAndHasResults", "hasUnsavedChanges", "changedCategoryIds", "length", "hasUpdatedGradingConfig", "programmingExercise", "isSaving", "_r6", "updateSubmissionPolicy", "toggleSubmissionPolicy", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_22_Conditional_8_Template", "hadPolicyBefore", "policyUpdate_r7", "invalid", "isAtLeastInstructor", "\u0275\u0275conditional", "isAtLeastEditor", "submissionPolicy", "undefined", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_26_Conditional_16_Template", "$event", "_r8", "testCaseColors", "filterByChart", "chartFilterType", "TEST_CASES", "course", "gradingStatisticsObservable", "changedTestCaseIds", "filteredTestCasesForCharts", "gradingStatistics", "testCaseStatsMap", "numParticipations", "sortFn_r11", "_r10", "sortFn", "iconForSortPropField", "\u0275\u0275styleProp", "categoryColors", "value_r12", "faSquare", "\u0275\u0275textInterpolate1", "sortFn_r14", "_r13", "faQuestionCircle", "\u0275\u0275pipeBind1", "s_r17", "value", "\u0275\u0275textInterpolate", "name", "row_r16", "_r15", "row", "updateEditedCategoryField", "EditableField", "STATE", "getEventValue", "\u0275\u0275repeaterCreate", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_27_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "id", "value_r18", "\u0275\u0275repeater", "categoryStateList", "sortFn_r20", "_r19", "row_r23", "value_r22", "PENALTY", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_34_Conditional_1_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_34_Conditional_2_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_34_Conditional_3_Template", "state", "CategoryState", "Graded", "Feedback", "Inactive", "sortFn_r25", "_r24", "row_r28", "value_r27", "MAX_PENALTY", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_41_Conditional_1_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_41_Conditional_2_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_41_Conditional_3_Template", "sortFn_r30", "_r29", "row_r31", "getIssuesMap", "maxIssuesPerCategory", "_r9", "resetCategories", "saveCategories", "importCategories", "onSort", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_18_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_20_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_25_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_27_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_32_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_34_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_39_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_41_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_46_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_ng_template_48_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_Conditional_59_Template", "CATEGORIES", "staticCodeAnalysisCategoriesForTable", "tableSorts", "codeAnalysis", "compareCategoryState", "comparePenalty", "compareMaxPenalty", "compareDetectedIssues", "staticCodeAnalysisCategoriesForCharts", "categoryIssuesMap", "title", "dueDate", "isCommunicationEnabled", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_ng_container_5_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_7_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_ng_container_8_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_10_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_ng_template_12_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_16_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_17_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_22_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_26_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_27_Template", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Conditional_31_Template", "_c0", "staticCodeAnalysisEnabled", "_c1", "ChartFilterType", "TestCaseView", "DefaultFieldValues", "WEIGHT", "BONUS_MULTIPLIER", "BONUS_POINTS", "ProgrammingExerciseConfigureGradingComponent", "gradingService", "inject", "ProgrammingExerciseGradingService", "programmingExerciseService", "ProgrammingExerciseService", "programmingExerciseSubmissionPolicyService", "SubmissionPolicyService", "programmingExerciseWebsocketService", "ProgrammingExerciseWebsocketService", "programmingExerciseTaskService", "ProgrammingExerciseTaskService", "route", "ActivatedRoute", "alertService", "AlertService", "translateService", "TranslateService", "location", "Location", "router", "Router", "courseManagementService", "CourseManagementService", "StaticCodeAnalysisCategoryState", "Visibility", "testCaseSubscription", "testCaseChangedSubscription", "paramSub", "testCasesValue", "filteredTestCasesForTable", "backupTestCases", "testCasePoints", "testCasePointsRelative", "RESET_TABLE", "ProgrammingGradingChartsDirective", "ProgrammingLanguage", "backupStaticCodeAnalysisCategories", "buildAfterDueDateActive", "showInactiveValue", "isLoading", "Object", "entries", "map", "totalWeight", "testCases", "activeTestCases", "filter", "active", "updateTestCaseFilter", "updateTestPoints", "showInactive", "ngOnInit", "params", "pipe", "distinctUntilChanged", "subscribe", "exerciseId", "Number", "find", "courseResponse", "body", "unsubscribe", "loadExercise", "res", "tap", "exercise", "loadStaticCodeAnalysisCategories", "catchError", "of", "loadExerciseTestCaseState", "getExerciseTestCaseState", "releaseState", "testCasesChanged", "released", "hasStudentResult", "buildAndTestStudentSubmissionsAfterDueDate", "loadStatistics", "zip", "take", "subscribeForTestCaseUpdates", "subscribeForExerciseTestCasesChangedUpdates", "includes", "ngOnDestroy", "subscribeForTestCases", "getTestCaseState", "getProgrammingExerciseTestCaseState", "updateEditedField", "editedTestCase", "field", "newValue", "checkFieldValue", "updateAllTestCaseViewsAfterEditing", "editedCategory", "updateStaticCodeAnalysisCategories", "oldValue", "isNaN", "category", "__spreadProps", "__spreadValues", "penalty", "maxPenalty", "categoriesToUpdate", "_intersectionWith", "codeAnalysisCategory", "categoryUpdates", "StaticCodeAnalysisCategoryUpdate", "from", "updateCodeAnalysisCategories", "updatedCategories", "_differenceWith", "categoryId", "_unionBy", "setChartAndBackupCategoryView", "notUpdatedCategories", "_differenceBy", "error", "categories", "c", "join", "success", "sourceExerciseId", "importCategoriesFromExercise", "newConfiguration", "removeSubmissionPolicy", "removeSubmissionPolicyFromProgrammingExercise", "addSubmissionPolicy", "addSubmissionPolicyToProgrammingExercise", "SubmissionPolicyType", "NONE", "updateSubmissionPolicyToProgrammingExercise", "deactivateSaving", "disableSubmissionPolicyOfProgrammingExercise", "enableSubmissionPolicyOfProgrammingExercise", "maxPoints", "reduce", "sum", "testCase", "weight", "forEach", "points", "bonusMultiplier", "bonusPoints", "testName", "roundValueSpecifiedByCourseSettings", "relativePoints", "editedTestCaseNewValue", "canDeactivate", "warning", "instant", "confirm", "tab", "parentUrl", "url", "substring", "lastIndexOf", "replaceState", "categoryName", "prop", "dir", "table", "config", "sorts", "propSort", "e", "faSortUp", "faSortDown", "faSort", "valForState", "s", "_", "__", "rowA", "rowB", "valForPenalty", "valForMaxPenalty", "issuesA", "issuesB", "totalIssuesA", "values", "n", "totalIssuesB", "getCodeAnalysisCategories", "getGradingStatistics", "statistics", "issuesMap", "maxIssues", "keys", "max", "issues", "Math", "parseInt", "event", "target", "testCaseId", "filterType", "filterFunction", "part", "TABLE", "CHART", "BACKUP", "SAVE_VALUES", "testCaseDisplayType", "updateTestCases", "displayType", "mapFunction", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseConfigureGradingComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "ProgrammingExerciseConfigureGradingComponent_Conditional_10_Template", "NgClass", "TranslateDirective", "NgTemplateOutlet", "ProgrammingExerciseConfigureGradingStatusComponent", "ProgrammingExerciseConfigureGradingActionsComponent", "ProgrammingExerciseGradingSubmissionPolicyConfigurationActionsComponent", "SubmissionPolicyUpdateComponent", "NgbAlert", "ProgrammingExerciseGradingTasksTableComponent", "TestCaseDistributionChartComponent", "ProgrammingExerciseGradingTableActionsComponent", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "FaIconComponent", "NgbTooltip", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "TableEditableFieldComponent", "CategoryIssuesChartComponent", "ScaCategoryDistributionChartComponent", "FeedbackAnalysisComponent", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
