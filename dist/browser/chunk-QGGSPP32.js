import{b as h}from"./chunk-CK7FH6VF.js";import{a as f}from"./chunk-PZ7IDTIM.js";import{b as y}from"./chunk-EELXLOHY.js";import{p as r}from"./chunk-DID2YGL7.js";import{c}from"./chunk-CXQURQM5.js";import{O as d}from"./chunk-IOA4DPXY.js";import{Ea as a,ya as u,z as i}from"./chunk-5LC5EQRR.js";var S=(()=>{class o{http=a(d);complaintResponseService=a(h);resourceUrl="api/assessment/complaints";isComplaintLockedForLoggedInUser(e,t){return e.complaintResponse&&e.accepted===void 0?this.complaintResponseService.isComplaintResponseLockedForLoggedInUser(e.complaintResponse,t):!1}isComplaintLockedByLoggedInUser(e){return e.complaintResponse&&e.accepted===void 0?this.complaintResponseService.isComplaintResponseLockedByLoggedInUser(e.complaintResponse):!1}isComplaintLocked(e){return e.complaintResponse&&e.accepted===void 0?e.complaintResponse.isCurrentlyLocked:!1}create(e){return this.http.post(this.resourceUrl,e,{observe:"response"}).pipe(i(t=>this.convertComplaintEntityResponseDatesFromServer(t)))}findBySubmissionId(e){return this.http.get(`${this.resourceUrl}?submissionId=${e}`,{observe:"response"}).pipe(i(t=>this.convertComplaintEntityResponseDatesFromServer(t)))}getComplaintsForTestRun(e){return this.http.get(`${this.resourceUrl}?exerciseId=${e}`,{observe:"response"}).pipe(i(t=>this.convertComplaintEntityResponseArrayDateFromServer(t)))}findAllByTutorIdForCourseId(e,t,s){let n=`${this.resourceUrl}?courseId=${t}&complaintType=${s}&tutorId=${e}`;return this.requestComplaintsFromUrl(n)}findAllWithoutStudentInformationForCourseId(e,t){let s=`${this.resourceUrl}?courseId=${e}&complaintType=${t}&allComplaintsForTutor=true`;return this.requestComplaintsFromUrl(s)}findAllByTutorIdForExerciseId(e,t,s){let n=`${this.resourceUrl}?exerciseId=${t}&complaintType=${s}&tutorId=${e}`;return this.requestComplaintsFromUrl(n)}findAllByCourseId(e,t){let s=`${this.resourceUrl}?courseId=${e}&complaintType=${t}`;return this.requestComplaintsFromUrl(s)}findAllByCourseIdAndExamId(e,t){let s=`${this.resourceUrl}?courseId=${e}&examId=${t}`;return this.requestComplaintsFromUrl(s)}findAllByExerciseId(e,t){let s=`${this.resourceUrl}?exerciseId=${e}&complaintType=${t}`;return this.requestComplaintsFromUrl(s)}getResponseTimeInSeconds(e){return e.accepted!==void 0?e.complaintResponse?.submittedTime?.diff(e.submittedTime,"seconds")||NaN:r().diff(e.submittedTime,"seconds")}shouldHighlightComplaint(e){if(e.accepted!==void 0)return!1;let t=e.submittedTime;return t?r().diff(t,"days")>7:!1}static getIndividualComplaintDueDate(e,t,s,n){if(!s?.completionDate||e.assessmentType===f.AUTOMATIC&&!e.allowComplaintsForAutomaticAssessments||!e.allowComplaintsForAutomaticAssessments&&!s.rated||e.type===c.QUIZ)return;let l=n?.individualDueDate??e.dueDate,p=[r(s.completionDate)];l&&p.push(r(l)),e.assessmentDueDate&&p.push(r(e.assessmentDueDate));let m=r.max(p);if(!(!m||r().isBefore(m)))return m.add(t,"days")}requestComplaintsFromUrl(e){return this.http.get(e,{observe:"response"}).pipe(i(t=>this.convertComplaintEntityResponseArrayDateFromServer(t)))}convertComplaintEntityResponseDatesFromServer(e){return e.body&&(e.body.submittedTime=e.body.submittedTime?r(e.body.submittedTime):void 0,e.body?.complaintResponse&&this.complaintResponseService.convertComplaintResponseDatesFromServer(e.body.complaintResponse)),e}convertComplaintEntityResponseArrayDateFromServer(e){return e.body&&e.body.forEach(t=>{t.submittedTime=y(t.submittedTime),t.complaintResponse&&this.complaintResponseService.convertComplaintResponseDatesFromServer(t.complaintResponse)}),e}static \u0275fac=function(t){return new(t||o)};static \u0275prov=u({token:o,factory:o.\u0275fac,providedIn:"root"})}return o})();export{S as a};
//# sourceMappingURL=chunk-QGGSPP32.js.map
