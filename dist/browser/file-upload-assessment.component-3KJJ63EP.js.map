{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/file-upload/assess/file-upload-assessment.component.ts", "src/main/webapp/app/exercises/file-upload/assess/file-upload-assessment.component.html"],
  "sourcesContent": ["import { Location, UpperCasePipe } from '@angular/common';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { isAllowedToModifyFeedback } from 'app/assessment/assessment.service';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { AssessmentAfterComplaint } from 'app/complaints/complaints-for-tutor/complaints-for-tutor.component';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { FileUploadSubmission } from 'app/entities/file-upload-submission.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { getLatestSubmissionResult, getSubmissionResultById } from 'app/entities/submission.model';\r\nimport { FileUploadAssessmentService } from 'app/exercises/file-upload/assess/file-upload-assessment.service';\r\nimport { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\r\nimport { getPositiveAndCappedTotalScore, getTotalMaxPoints } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { assessmentNavigateBack } from 'app/exercises/shared/navigate-back.util';\r\nimport { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\nimport { UnreferencedFeedbackComponent } from 'app/exercises/shared/unreferenced-feedback/unreferenced-feedback.component';\r\nimport { FileService } from 'app/shared/http/file.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { getExerciseDashboardLink, getLinkToSubmissionAssessment } from 'app/utils/navigation.utils';\r\nimport dayjs from 'dayjs/esm';\r\nimport { filter, finalize } from 'rxjs/operators';\r\nimport { AssessmentLayoutComponent } from 'app/assessment/assessment-layout/assessment-layout.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { ScoreDisplayComponent } from 'app/shared/score-display/score-display.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { AssessmentInstructionsComponent } from 'app/assessment/assessment-instructions/assessment-instructions/assessment-instructions.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    providers: [FileUploadAssessmentService],\r\n    templateUrl: './file-upload-assessment.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        AssessmentLayoutComponent,\r\n        ResizeableContainerComponent,\r\n        ScoreDisplayComponent,\r\n        TranslateDirective,\r\n        FaIconComponent,\r\n        AssessmentInstructionsComponent,\r\n        UnreferencedFeedbackComponent,\r\n        RouterLink,\r\n        UpperCasePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class FileUploadAssessmentComponent implements OnInit, OnDestroy {\r\n    private changeDetectorRef = inject(ChangeDetectorRef);\r\n    private alertService = inject(AlertService);\r\n    private router = inject(Router);\r\n    private route = inject(ActivatedRoute);\r\n    private fileUploadAssessmentService = inject(FileUploadAssessmentService);\r\n    private accountService = inject(AccountService);\r\n    private location = inject(Location);\r\n    private fileUploadSubmissionService = inject(FileUploadSubmissionService);\r\n    private complaintService = inject(ComplaintService);\r\n    private fileService = inject(FileService);\r\n    structuredGradingCriterionService = inject(StructuredGradingCriterionService);\r\n    submissionService = inject(SubmissionService);\r\n\r\n    text: string;\r\n    participation: StudentParticipation;\r\n    submission?: FileUploadSubmission;\r\n    unassessedSubmission?: FileUploadSubmission;\r\n    result?: Result;\r\n    unreferencedFeedback: Feedback[] = [];\r\n    exercise?: FileUploadExercise;\r\n    course?: Course;\r\n    exerciseId: number;\r\n    totalScore = 0;\r\n    assessmentsAreValid: boolean;\r\n    invalidError?: string;\r\n    isAssessor = true;\r\n    busy = true;\r\n    showResult = true;\r\n    complaint: Complaint;\r\n    ComplaintType = ComplaintType;\r\n    notFound = false;\r\n    userId: number;\r\n    isLoading = true;\r\n    isTestRun = false;\r\n    courseId: number;\r\n    hasAssessmentDueDatePassed: boolean;\r\n    correctionRound = 0;\r\n    resultId: number;\r\n    examId = 0;\r\n    exerciseGroupId: number;\r\n    exerciseDashboardLink: string[];\r\n    loadingInitialSubmission = true;\r\n    highlightDifferences = false;\r\n\r\n    private cancelConfirmationText: string;\r\n\r\n    // Icons\r\n    farListAlt = faListAlt;\r\n\r\n    constructor() {\r\n        const translateService = inject(TranslateService);\r\n\r\n        this.assessmentsAreValid = false;\r\n        translateService.get('artemisApp.assessment.messages.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\r\n    }\r\n\r\n    get assessments(): Feedback[] {\r\n        return [...this.unreferencedFeedback];\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.busy = true;\r\n\r\n        // Used to check if the assessor is the current user\r\n        this.accountService.identity().then((user) => {\r\n            this.userId = user!.id!;\r\n        });\r\n        this.route.queryParamMap.subscribe((queryParams) => {\r\n            this.isTestRun = queryParams.get('testRun') === 'true';\r\n            if (queryParams.get('correction-round')) {\r\n                this.correctionRound = parseInt(queryParams.get('correction-round')!, 10);\r\n            }\r\n        });\r\n\r\n        this.route.params.subscribe((params) => {\r\n            this.courseId = Number(params['courseId']);\r\n            const exerciseId = Number(params['exerciseId']);\r\n            this.resultId = Number(params['resultId']) || 0;\r\n            this.exerciseId = exerciseId;\r\n\r\n            const examId = params['examId'];\r\n            if (examId) {\r\n                this.examId = Number(examId);\r\n                this.exerciseGroupId = Number(params['exerciseGroupId']);\r\n            }\r\n\r\n            this.exerciseDashboardLink = getExerciseDashboardLink(this.courseId, this.exerciseId, this.examId, this.isTestRun);\r\n\r\n            const submissionValue = params['submissionId'];\r\n            const submissionId = Number(submissionValue);\r\n            if (submissionValue === 'new') {\r\n                this.loadOptimalSubmission(this.exerciseId);\r\n            } else {\r\n                this.loadSubmission(submissionId);\r\n            }\r\n        });\r\n    }\r\n\r\n    attachmentExtension(filePath: string): string {\r\n        if (!filePath) {\r\n            return 'N/A';\r\n        }\r\n\r\n        return filePath.split('.').pop()!;\r\n    }\r\n\r\n    private loadOptimalSubmission(exerciseId: number): void {\r\n        this.fileUploadSubmissionService.getSubmissionWithoutAssessment(exerciseId, true, this.correctionRound).subscribe({\r\n            next: (submission?: FileUploadSubmission) => {\r\n                if (!submission) {\r\n                    // there is no submission waiting for assessment at the moment\r\n                    this.navigateBack();\r\n                    this.alertService.info('artemisApp.exerciseAssessmentDashboard.noSubmissions');\r\n                    return;\r\n                }\r\n\r\n                this.initializePropertiesFromSubmission(submission);\r\n                this.validateAssessment();\r\n                // Update the url with the new id, without reloading the page, to make the history consistent\r\n                const newUrl = window.location.hash.replace('#', '').replace('new', `${this.submission!.id}`);\r\n                this.location.go(newUrl);\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.loadingInitialSubmission = false;\r\n                if (error.error && error.error.errorKey === 'lockedSubmissionsLimitReached') {\r\n                    this.navigateBack();\r\n                } else {\r\n                    this.onError('artemisApp.assessment.messages.loadSubmissionFailed');\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    private loadSubmission(submissionId: number): void {\r\n        this.fileUploadSubmissionService\r\n            .get(submissionId, this.correctionRound, this.resultId)\r\n            .pipe(filter((res) => !!res))\r\n            .subscribe({\r\n                next: (res) => {\r\n                    this.initializePropertiesFromSubmission(res.body!);\r\n                    this.validateAssessment();\r\n                },\r\n                error: (error: HttpErrorResponse) => {\r\n                    this.loadingInitialSubmission = false;\r\n                    if (error.error && error.error.errorKey === 'lockedSubmissionsLimitReached') {\r\n                        this.navigateBack();\r\n                    } else {\r\n                        onError(this.alertService, error);\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    private initializePropertiesFromSubmission(submission: FileUploadSubmission): void {\r\n        this.loadingInitialSubmission = false;\r\n        this.submission = submission;\r\n        this.participation = this.submission.participation as StudentParticipation;\r\n        this.exercise = this.participation.exercise as FileUploadExercise;\r\n        /**\r\n         * CARE: Setting access rights for exercises should not happen this way and is a workaround.\r\n         *       The access rights should always be set when loading the exercise/course in the service!\r\n         * Problem: For a reason, which I do not understand, the exercise is undefined when the exercise is loaded\r\n         *       leading to {@link AccountService#setAccessRightsForExerciseAndReferencedCourse} skipping setting the\r\n         *       access rights.\r\n         *       This problem reoccurs in {@link CodeEditorTutorAssessmentContainerComponent#handleReceivedSubmission}\r\n         */\r\n        this.accountService.setAccessRightsForExercise(this.exercise);\r\n        this.course = getCourseFromExercise(this.exercise);\r\n        this.hasAssessmentDueDatePassed = !!this.exercise.assessmentDueDate && dayjs(this.exercise.assessmentDueDate).isBefore(dayjs());\r\n        if (this.resultId > 0) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            this.correctionRound = this.submission.results?.findIndex((result) => result.id === this.resultId)!;\r\n            this.result = getSubmissionResultById(this.submission, this.resultId);\r\n        } else {\r\n            this.result = getLatestSubmissionResult(this.submission);\r\n        }\r\n        this.getComplaint();\r\n\r\n        if (this.result) {\r\n            this.submission.participation!.results = [this.result];\r\n            this.result!.participation = this.submission.participation;\r\n        }\r\n        if (this.result?.feedbacks) {\r\n            this.unreferencedFeedback = this.result.feedbacks;\r\n        } else if (this.result) {\r\n            this.result!.feedbacks = [];\r\n        }\r\n        if ((!this.result?.assessor || this.result?.assessor.id === this.userId) && !this.result?.completionDate) {\r\n            this.alertService.closeAll();\r\n            this.alertService.info('artemisApp.fileUploadAssessment.messages.lock');\r\n        }\r\n\r\n        this.checkPermissions();\r\n        this.calculateTotalScore();\r\n\r\n        this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission);\r\n\r\n        this.busy = false;\r\n        this.isLoading = false;\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.changeDetectorRef.detach();\r\n    }\r\n\r\n    public addFeedback(): void {\r\n        const feedback = new Feedback();\r\n        this.unreferencedFeedback.push(feedback);\r\n        this.validateAssessment();\r\n    }\r\n\r\n    public deleteAssessment(assessmentToDelete: Feedback): void {\r\n        const indexToDelete = this.unreferencedFeedback.indexOf(assessmentToDelete);\r\n        this.unreferencedFeedback.splice(indexToDelete, 1);\r\n        this.validateAssessment();\r\n    }\r\n\r\n    /**\r\n     * Load next assessment in the same page.\r\n     * It calls the api to load the new unassessed submission in the same page.\r\n     * For the new submission to appear on the same page, the url has to be reloaded.\r\n     */\r\n    assessNext() {\r\n        this.isLoading = true;\r\n        this.unreferencedFeedback = [];\r\n        this.fileUploadSubmissionService.getSubmissionWithoutAssessment(this.exercise!.id!, false, this.correctionRound).subscribe({\r\n            next: (submission?: FileUploadSubmission) => {\r\n                this.isLoading = false;\r\n                this.unassessedSubmission = submission;\r\n                if (!submission) {\r\n                    // there are no unassessed submissions\r\n                    this.submission = undefined;\r\n                    return;\r\n                }\r\n\r\n                const url = getLinkToSubmissionAssessment(\r\n                    ExerciseType.FILE_UPLOAD,\r\n                    this.courseId,\r\n                    this.exerciseId,\r\n                    this.unassessedSubmission!.participation!.id!,\r\n                    this.unassessedSubmission!.id!,\r\n                    this.examId,\r\n                    this.exerciseGroupId,\r\n                );\r\n                this.router.navigate(url);\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.isLoading = false;\r\n                onError(this.alertService, error);\r\n            },\r\n        });\r\n    }\r\n\r\n    onSaveAssessment() {\r\n        this.isLoading = true;\r\n        this.fileUploadAssessmentService\r\n            .saveAssessment(this.assessments, this.submission!.id!, this.result?.assessmentNote?.note)\r\n            .pipe(finalize(() => (this.isLoading = false)))\r\n            .subscribe({\r\n                next: (result: Result) => {\r\n                    this.result = result;\r\n                    this.alertService.closeAll();\r\n                    this.alertService.success('artemisApp.assessment.messages.saveSuccessful');\r\n                },\r\n                error: () => {\r\n                    this.alertService.closeAll();\r\n                    this.alertService.error('artemisApp.assessment.messages.saveFailed');\r\n                },\r\n            });\r\n    }\r\n\r\n    onSubmitAssessment() {\r\n        this.validateAssessment();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.fileUploadAssessment.error.invalidAssessments');\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        this.fileUploadAssessmentService\r\n            .saveAssessment(this.assessments, this.submission!.id!, this.result?.assessmentNote?.note, true)\r\n            .pipe(finalize(() => (this.isLoading = false)))\r\n            .subscribe({\r\n                next: (result: Result) => {\r\n                    this.result = result;\r\n                    this.updateParticipationWithResult();\r\n                    this.alertService.closeAll();\r\n                    this.alertService.success('artemisApp.assessment.messages.submitSuccessful');\r\n                },\r\n                error: (error: HttpErrorResponse) => this.onError(`artemisApp.${error.error.entityName}.${error.error.message}`),\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancel the current assessment and navigate back to the exercise dashboard.\r\n     */\r\n    onCancelAssessment() {\r\n        const confirmCancel = window.confirm(this.cancelConfirmationText);\r\n        if (confirmCancel) {\r\n            this.isLoading = true;\r\n            this.fileUploadAssessmentService\r\n                .cancelAssessment(this.submission!.id!)\r\n                .pipe(finalize(() => (this.isLoading = false)))\r\n                .subscribe(() => {\r\n                    this.navigateBack();\r\n                });\r\n        }\r\n    }\r\n\r\n    private updateParticipationWithResult(): void {\r\n        this.showResult = false;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.participation.results![0] = this.result!;\r\n        this.showResult = true;\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    getComplaint(): void {\r\n        this.complaintService.findBySubmissionId(this.submission!.id!).subscribe({\r\n            next: (res) => {\r\n                if (!res.body) {\r\n                    return;\r\n                }\r\n                this.complaint = res.body;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                onError(this.alertService, err);\r\n            },\r\n        });\r\n    }\r\n\r\n    navigateBack() {\r\n        assessmentNavigateBack(this.location, this.router, this.exercise, this.submission, this.isTestRun);\r\n    }\r\n\r\n    updateAssessment() {\r\n        this.validateAssessment();\r\n    }\r\n\r\n    /**\r\n     * Checks if the assessment is valid:\r\n     *   - There must be at least one referenced feedback.\r\n     *   - Each feedback must have either a score or a feedback text or both.\r\n     *   - The score must be a valid number.\r\n     *\r\n     * Additionally, the total score is calculated for all numerical credits.\r\n     */\r\n    public validateAssessment(): void {\r\n        this.assessmentsAreValid = true;\r\n        this.invalidError = undefined;\r\n\r\n        // When unreferenced feedback is set, it has to be valid (score + detailed text)\r\n        this.assessmentsAreValid = Feedback.haveCreditsAndComments(this.unreferencedFeedback);\r\n\r\n        this.calculateTotalScore();\r\n\r\n        this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission!);\r\n    }\r\n\r\n    /**\r\n     * Calculates the total score of the current assessment.\r\n     * This function originally checked whether the total score is negative\r\n     * or greater than the max. score, but we decided to remove the restriction\r\n     * and instead set the score boundaries on the server.\r\n     */\r\n    private calculateTotalScore() {\r\n        const maxPoints = getTotalMaxPoints(this.exercise);\r\n        const creditsTotalScore = this.structuredGradingCriterionService.computeTotalScore(this.assessments);\r\n        this.totalScore = getPositiveAndCappedTotalScore(creditsTotalScore, maxPoints);\r\n    }\r\n\r\n    downloadFile(filePath: string) {\r\n        this.fileService.downloadFile(filePath);\r\n    }\r\n\r\n    private checkPermissions() {\r\n        this.isAssessor = this.result?.assessor?.id === this.userId;\r\n    }\r\n\r\n    /**\r\n     * Boolean which determines whether the user can override a result.\r\n     * If no exercise is loaded, for example during loading between exercises, we return false.\r\n     * Instructors can always override a result.\r\n     * Tutors can override their own results within the assessment due date, if there is no complaint about their assessment.\r\n     * They cannot override a result anymore, if there is a complaint. Another tutor must handle the complaint.\r\n     */\r\n    get canOverride(): boolean {\r\n        if (this.exercise) {\r\n            if (this.exercise.isAtLeastInstructor) {\r\n                // Instructors can override any assessment at any time.\r\n                return true;\r\n            }\r\n            if (this.complaint && this.isAssessor) {\r\n                // If there is a complaint, the original assessor cannot override the result anymore.\r\n                return false;\r\n            }\r\n            let isBeforeAssessmentDueDate = true;\r\n            // Add check as the assessmentDueDate must not be set for exercises\r\n            if (this.exercise.assessmentDueDate) {\r\n                isBeforeAssessmentDueDate = dayjs().isBefore(this.exercise.assessmentDueDate!);\r\n            }\r\n            // tutors are allowed to override one of their assessments before the assessment due date.\r\n            return this.isAssessor && isBeforeAssessmentDueDate;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends the current (updated) assessment to the server to update the original assessment after a complaint was accepted.\r\n     * The corresponding complaint response is sent along with the updated assessment to prevent additional requests.\r\n     *\r\n     * @param assessmentAfterComplaint the response to the complaint that is sent to the server along with the assessment update along with onSuccess and onError callbacks\r\n     */\r\n    onUpdateAssessmentAfterComplaint(assessmentAfterComplaint: AssessmentAfterComplaint): void {\r\n        this.validateAssessment();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.fileUploadAssessment.error.invalidAssessments');\r\n            assessmentAfterComplaint.onError();\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        this.fileUploadAssessmentService\r\n            .updateAssessmentAfterComplaint(this.assessments, assessmentAfterComplaint.complaintResponse, this.submission!.id!, this.result!.assessmentNote?.note)\r\n            .pipe(finalize(() => (this.isLoading = false)))\r\n            .subscribe({\r\n                next: (response) => {\r\n                    assessmentAfterComplaint.onSuccess();\r\n                    this.result = response.body!;\r\n                    this.updateParticipationWithResult();\r\n                    this.alertService.closeAll();\r\n                    this.alertService.success('artemisApp.assessment.messages.updateAfterComplaintSuccessful');\r\n                },\r\n                error: (httpErrorResponse: HttpErrorResponse) => {\r\n                    assessmentAfterComplaint.onError();\r\n                    this.alertService.closeAll();\r\n                    const error = httpErrorResponse.error;\r\n                    if (error && error.errorKey && error.errorKey === 'complaintLock') {\r\n                        this.alertService.error(error.message, error.params);\r\n                    } else {\r\n                        this.alertService.error('artemisApp.assessment.messages.updateAfterComplaintFailed');\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    get readOnly(): boolean {\r\n        return !isAllowedToModifyFeedback(this.isTestRun, this.isAssessor, this.hasAssessmentDueDatePassed, this.result, this.complaint, this.exercise);\r\n    }\r\n\r\n    private onError(error: string) {\r\n        this.alertService.error(error);\r\n    }\r\n}\r\n", "<jhi-assessment-layout\r\n    (navigateBack)=\"navigateBack()\"\r\n    [isLoading]=\"isLoading\"\r\n    [isTeamMode]=\"exercise?.teamMode || false\"\r\n    [isAssessor]=\"isAssessor\"\r\n    [isTestRun]=\"isTestRun\"\r\n    [exerciseDashboardLink]=\"exerciseDashboardLink\"\r\n    [canOverride]=\"canOverride\"\r\n    [result]=\"result\"\r\n    [assessmentsAreValid]=\"assessmentsAreValid\"\r\n    [complaint]=\"complaint\"\r\n    [exercise]=\"exercise\"\r\n    [submission]=\"submission\"\r\n    [hasAssessmentDueDatePassed]=\"hasAssessmentDueDatePassed\"\r\n    [correctionRound]=\"correctionRound\"\r\n    [(highlightDifferences)]=\"highlightDifferences\"\r\n    (save)=\"onSaveAssessment()\"\r\n    (onSubmit)=\"onSubmitAssessment()\"\r\n    (onCancel)=\"onCancelAssessment()\"\r\n    (nextSubmission)=\"assessNext()\"\r\n    (updateAssessmentAfterComplaint)=\"onUpdateAssessmentAfterComplaint($event)\"\r\n>\r\n    @if (submission) {\r\n        @if (!busy && exercise) {\r\n            <jhi-resizeable-container class=\"col-12\">\r\n                <!--region Left Panel-->\r\n                <span left-header>{{ exercise?.title ?? '' }}</span>\r\n                <jhi-score-display left-header [score]=\"totalScore\" [maxPoints]=\"exercise!.maxPoints!\" [maxBonusPoints]=\"exercise!.bonusPoints!\" [course]=\"course\" />\r\n                <div left-body>\r\n                    <div class=\"row\">\r\n                        @if (submission?.filePath) {\r\n                            <div class=\"col-12 card-text\">\r\n                                <a class=\"text-primary\" (click)=\"downloadFile(submission!.filePath!)\" jhiTranslate=\"artemisApp.fileUploadAssessment.submissionFile\"></a>\r\n                                <span class=\"ms-2 badge bg-info\">{{ attachmentExtension(submission!.filePath!) | uppercase }}</span>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <!--region Right Panel-->\r\n                <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n                <span right-header jhiTranslate=\"artemisApp.assessmentInstructions.instructions.instructions\"></span>\r\n                <div right-body class=\"alert alert-info text-center mb-4\" role=\"alert\" jhiTranslate=\"artemisApp.textAssessment.assessmentInstruction\"></div>\r\n                <jhi-assessment-instructions id=\"instructions-card\" right-body [exercise]=\"exercise!\" class=\"markdown-preview\" />\r\n                <!--endregion-->\r\n            </jhi-resizeable-container>\r\n        }\r\n        <!--Feedbacks-->\r\n        <div class=\"row mt-3\">\r\n            @if (invalidError) {\r\n                <div class=\"col-8 alert alert-danger\" role=\"alert\">{{ invalidError | artemisTranslate }}</div>\r\n            }\r\n            @if (result && result.id) {\r\n                <jhi-unreferenced-feedback\r\n                    [(feedbacks)]=\"unreferencedFeedback\"\r\n                    (feedbacksChange)=\"validateAssessment()\"\r\n                    [readOnly]=\"readOnly\"\r\n                    [highlightDifferences]=\"highlightDifferences\"\r\n                    [resultId]=\"result.id\"\r\n                />\r\n            }\r\n        </div>\r\n    } @else {\r\n        @if (!loadingInitialSubmission) {\r\n            <div class=\"alert alert-warning text-center mt-4\" role=\"alert\">\r\n                <p jhiTranslate=\"artemisApp.fileUploadAssessment.notFound\"></p>\r\n                <a [routerLink]=\"exerciseDashboardLink\" class=\"btn btn-info btn-sm me-1 mb-1 assessment-dashboard\">\r\n                    <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.exerciseDashboard\"></span>\r\n                </a>\r\n            </div>\r\n        }\r\n    }\r\n</jhi-assessment-layout>\r\n<ng-template #assessment>\r\n    @if (!busy && exercise) {\r\n        <jhi-resizeable-container class=\"col-12\">\r\n            <!--region Left Panel-->\r\n            <span left-header>{{ exercise?.title ?? '' }}</span>\r\n            <jhi-score-display left-header [score]=\"totalScore\" [maxPoints]=\"exercise!.maxPoints!\" [maxBonusPoints]=\"exercise!.bonusPoints!\" [course]=\"course\" />\r\n            <div left-body>\r\n                <div class=\"row\">\r\n                    @if (submission?.filePath) {\r\n                        <div class=\"col-12 card-text\">\r\n                            <a class=\"text-primary\" (click)=\"downloadFile(submission!.filePath!)\" jhiTranslate=\"artemisApp.fileUploadAssessment.submissionFile\"></a>\r\n                            <span class=\"ms-2 badge bg-info\">{{ attachmentExtension(submission!.filePath!) | uppercase }}</span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <!--region Right Panel-->\r\n            <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n            <span right-header jhiTranslate=\"artemisApp.assessmentInstructions.instructions.instructions\"></span>\r\n            <div right-body class=\"alert alert-info text-center mb-4\" role=\"alert\" jhiTranslate=\"artemisApp.textAssessment.assessmentInstruction\"></div>\r\n            <jhi-assessment-instructions id=\"instructions-card\" right-body [exercise]=\"exercise!\" class=\"markdown-preview\" />\r\n            <!--endregion-->\r\n        </jhi-resizeable-container>\r\n    }\r\n    <!--Feedbacks-->\r\n    <div class=\"row mt-3\">\r\n        @if (invalidError) {\r\n            <div class=\"col-8 alert alert-danger\" role=\"alert\">{{ invalidError | artemisTranslate }}</div>\r\n        }\r\n        @if (result && result.id) {\r\n            <jhi-unreferenced-feedback\r\n                [(feedbacks)]=\"unreferencedFeedback\"\r\n                (feedbacksChange)=\"validateAssessment()\"\r\n                [readOnly]=\"readOnly\"\r\n                [highlightDifferences]=\"highlightDifferences\"\r\n                [resultId]=\"result.id\"\r\n            />\r\n        }\r\n    </div>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "downloadFile", "submission", "filePath", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "attachmentExtension", "\u0275\u0275element", "\u0275\u0275template", "FileUploadAssessmentComponent_Conditional_2_Conditional_1_Conditional_13_Template", "tmp_3_0", "exercise", "title", "undefined", "\u0275\u0275property", "totalScore", "maxPoints", "bonusPoints", "course", "\u0275\u0275conditional", "farListAlt", "invalidError", "\u0275\u0275twoWayListener", "$event", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "unreferencedFeedback", "validateAssessment", "\u0275\u0275twoWayProperty", "readOnly", "highlightDifferences", "result", "id", "FileUploadAssessmentComponent_Conditional_2_Conditional_1_Template", "FileUploadAssessmentComponent_Conditional_2_Conditional_4_Template", "FileUploadAssessmentComponent_Conditional_2_Conditional_5_Template", "busy", "exerciseDashboardLink", "FileUploadAssessmentComponent_Conditional_3_Conditional_1_Template", "loadingInitialSubmission", "_r5", "FileUploadAssessmentComponent_ng_template_5_Conditional_1_Conditional_13_Template", "_r6", "FileUploadAssessmentComponent_ng_template_5_Conditional_1_Template", "FileUploadAssessmentComponent_ng_template_5_Conditional_4_Template", "FileUploadAssessmentComponent_ng_template_5_Conditional_5_Template", "FileUploadAssessmentComponent", "changeDetectorRef", "inject", "ChangeDetectorRef", "alertService", "AlertService", "router", "Router", "route", "ActivatedRoute", "fileUploadAssessmentService", "FileUploadAssessmentService", "accountService", "AccountService", "location", "Location", "fileUploadSubmissionService", "FileUploadSubmissionService", "complaintService", "ComplaintService", "fileService", "FileService", "structuredGradingCriterionService", "StructuredGradingCriterionService", "submissionService", "SubmissionService", "text", "participation", "unassessedSubmission", "exerciseId", "assessmentsAreValid", "isAssessor", "showResult", "complaint", "ComplaintType", "notFound", "userId", "isLoading", "isTestRun", "courseId", "hasAssessmentDueDatePassed", "correctionRound", "resultId", "examId", "exerciseGroupId", "cancelConfirmationText", "faListAlt", "constructor", "translateService", "TranslateService", "get", "subscribe", "assessments", "ngOnInit", "identity", "then", "user", "queryParamMap", "queryParams", "parseInt", "params", "Number", "getExerciseDashboardLink", "submissionValue", "submissionId", "loadOptimalSubmission", "loadSubmission", "split", "pop", "getSubmissionWithoutAssessment", "next", "navigateBack", "info", "initializePropertiesFromSubmission", "newUrl", "window", "hash", "replace", "go", "error", "errorKey", "onError", "pipe", "filter", "res", "body", "setAccessRightsForExercise", "getCourseFromExercise", "assessmentDueDate", "dayjs", "isBefore", "results", "findIndex", "getSubmissionResultById", "getLatestSubmissionResult", "getComplaint", "feedbacks", "assessor", "completionDate", "closeAll", "checkPermissions", "calculateTotalScore", "handleFeedbackCorrectionRoundTag", "ngOnDestroy", "detach", "addFeedback", "feedback", "Feedback", "push", "deleteAssessment", "assessmentToDelete", "indexToDelete", "indexOf", "splice", "assessNext", "url", "getLinkToSubmissionAssessment", "ExerciseType", "FILE_UPLOAD", "navigate", "onSaveAssessment", "saveAssessment", "assessmentNote", "note", "finalize", "success", "onSubmitAssessment", "updateParticipationWithResult", "entityName", "message", "onCancelAssessment", "confirm", "cancelAssessment", "detectChanges", "findBySubmissionId", "err", "assessmentNavigateBack", "updateAssessment", "haveCreditsAndComments", "getTotalMaxPoints", "creditsTotalScore", "computeTotalScore", "getPositiveAndCappedTotalScore", "canOverride", "isAtLeastInstructor", "isBeforeAssessmentDueDate", "onUpdateAssessmentAfterComplaint", "assessmentAfterComplaint", "updateAssessmentAfterComplaint", "complaintResponse", "response", "onSuccess", "httpErrorResponse", "isAllowedToModifyFeedback", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "FileUploadAssessmentComponent_Conditional_2_Template", "FileUploadAssessmentComponent_Conditional_3_Template", "FileUploadAssessmentComponent_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "teamMode", "AssessmentLayoutComponent", "ResizeableContainerComponent", "ScoreDisplayComponent", "TranslateDirective", "FaIconComponent", "AssessmentInstructionsComponent", "UnreferencedFeedbackComponent", "RouterLink", "UpperCasePipe", "ArtemisTranslatePipe", "encapsulation"]
}
