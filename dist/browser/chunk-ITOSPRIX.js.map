{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/statistics/question-statistic.component.ts"],
  "sourcesContent": ["import { QuizQuestion } from 'app/entities/quiz/quiz-question.model';\r\nimport { QuizQuestionStatistic } from 'app/entities/quiz/quiz-question-statistic.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { Subscription } from 'rxjs';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { CanBecomeInvalid } from 'app/entities/quiz/drop-location.model';\r\nimport { AbstractQuizStatisticComponent } from 'app/exercises/quiz/manage/statistics/quiz-statistics';\r\n\r\nexport const redColor = '#d9534f';\r\nexport const greenColor = '#5cb85c';\r\nexport const blueColor = '#428bca';\r\nexport const lightBlueColor = '#5bc0de';\r\nexport const greyColor = '#838383';\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class QuestionStatisticComponent extends AbstractQuizStatisticComponent implements OnInit, OnDestroy {\r\n    protected route = inject(ActivatedRoute);\r\n    protected router = inject(Router);\r\n    protected accountService = inject(AccountService);\r\n    protected quizExerciseService = inject(QuizExerciseService);\r\n    protected websocketService = inject(WebsocketService);\r\n    protected changeDetector = inject(ChangeDetectorRef);\r\n\r\n    question: QuizQuestion;\r\n    questionStatistic: QuizQuestionStatistic;\r\n\r\n    quizExercise: QuizExercise;\r\n    questionIdParam: number;\r\n    sub: Subscription;\r\n\r\n    // TODO: why do we have a second variable for labels?\r\n    labels: string[] = [];\r\n    // solutionLabels is currently only used for multiple choice questions\r\n    solutionLabels: string[] = [];\r\n\r\n    ratedCorrectData: number;\r\n    unratedCorrectData: number;\r\n\r\n    maxScore: number;\r\n    showSolution = false;\r\n    websocketChannelForData: string;\r\n\r\n    questionTextRendered?: SafeHtml;\r\n\r\n    backgroundColors: string[] = [];\r\n    backgroundSolutionColors: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.setAxisLabels('showStatistic.questionStatistic.xAxes', 'showStatistic.questionStatistic.yAxes');\r\n        });\r\n        this.sub = this.route.params.subscribe((params) => {\r\n            this.questionIdParam = +params['questionId'];\r\n            // use different REST-call if the User is a Student\r\n            if (this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n                this.quizExerciseService.find(params['exerciseId']).subscribe((res) => {\r\n                    this.loadQuiz(res.body!, false);\r\n                });\r\n            }\r\n\r\n            // subscribe websocket for new statistical data\r\n            this.websocketChannelForData = '/topic/statistic/' + params['exerciseId'];\r\n            this.websocketService.subscribe(this.websocketChannelForData);\r\n\r\n            // ask for new Data if the websocket for new statistical data was notified\r\n            this.websocketService.receive(this.websocketChannelForData).subscribe((quiz) => {\r\n                this.loadQuiz(quiz, true);\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.websocketService.unsubscribe(this.websocketChannelForData);\r\n    }\r\n\r\n    /**\r\n     * reset old charts data\r\n     */\r\n    resetLabelsColors() {\r\n        this.labels = [];\r\n        this.solutionLabels = [];\r\n        this.backgroundColors = [];\r\n        this.backgroundSolutionColors = [];\r\n    }\r\n\r\n    resetData() {\r\n        this.ratedData = [];\r\n        this.unratedData = [];\r\n    }\r\n\r\n    addData(rated: number, unrated: number) {\r\n        this.ratedData.push(rated);\r\n        this.unratedData.push(unrated);\r\n    }\r\n\r\n    /**\r\n     * converts a number in a letter (0 -> A, 1 -> B, ...)\r\n     *\r\n     * @param index the given number\r\n     */\r\n    getLetter(index: number) {\r\n        return String.fromCharCode(65 + index);\r\n    }\r\n\r\n    updateData() {\r\n        // add data for the last bar (correct Solutions)\r\n        this.ratedCorrectData = this.questionStatistic.ratedCorrectCounter!;\r\n        this.unratedCorrectData = this.questionStatistic.unRatedCorrectCounter!;\r\n        this.chartLabels = this.labels;\r\n        this.loadDataInDiagram();\r\n    }\r\n\r\n    /**\r\n     * switch between showing and hiding the solution in the chart\r\n     *  1. change the BackgroundColor of the bars\r\n     *  2. change the bar-Labels\r\n     */\r\n    switchSolution() {\r\n        this.showSolution = !this.showSolution;\r\n        this.loadDataInDiagram();\r\n    }\r\n\r\n    /**\r\n     * This functions loads the Quiz, which is necessary to build the Web-Template\r\n     *\r\n     * @param quiz the quizExercise, which the selected question is part of.\r\n     * @param refresh true if method is called from Websocket\r\n     */\r\n    abstract loadQuiz(quiz: QuizExercise, refresh: boolean): void;\r\n\r\n    loadQuizCommon(quiz: QuizExercise) {\r\n        // if the Student finds a way to the Website\r\n        //      -> the Student will be sent back to Courses\r\n        if (!this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n            this.router.navigateByUrl('courses');\r\n        }\r\n        // search selected question in quizExercise based on questionId\r\n        this.quizExercise = quiz;\r\n        const updatedQuestion = this.quizExercise.quizQuestions?.filter((question) => this.questionIdParam === question.id)[0];\r\n        // if anyone finds a way to the Website, with a wrong combination of QuizId and QuestionId, go back to Courses\r\n        if (!updatedQuestion) {\r\n            this.router.navigateByUrl('courses');\r\n            return undefined;\r\n        }\r\n        this.question = updatedQuestion;\r\n        this.questionStatistic = updatedQuestion.quizQuestionStatistic!;\r\n        return updatedQuestion;\r\n    }\r\n\r\n    /**\r\n     * change label and color if an element is invalid\r\n     */\r\n    loadInvalidLayout(possibleInvalidElements: CanBecomeInvalid[]) {\r\n        // set Background for invalid answers = grey\r\n        const invalidLabel = this.translateService.instant('artemisApp.showStatistic.invalid');\r\n        possibleInvalidElements.forEach((element, i) => {\r\n            if (element.invalid) {\r\n                this.backgroundColors[i] = greyColor;\r\n                this.backgroundSolutionColors[i] = greyColor;\r\n                // add 'invalid' to bar-Label\r\n                this.labels[i] = this.getLetter(i) + '. ' + invalidLabel;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * add Layout for the last bar\r\n     */\r\n    addLastBarLayout(length: number) {\r\n        // add Color for last bar\r\n        this.backgroundColors.push(lightBlueColor);\r\n        this.backgroundSolutionColors[length] = lightBlueColor;\r\n\r\n        // add Text for last label based on the language\r\n        const lastLabel = this.translateService.instant('artemisApp.showStatistic.quizStatistic.yAxes');\r\n        this.solutionLabels[length] = lastLabel;\r\n        this.labels[length] = lastLabel;\r\n        this.chartLabels = this.labels;\r\n    }\r\n\r\n    /**\r\n     * check if the rated or unrated, then load the rated or unrated data into the diagram\r\n     */\r\n    loadDataInDiagram() {\r\n        this.ngxColor.domain = [];\r\n        // if show Solution is true use the label, backgroundColor and Data, which show the solution\r\n        if (this.showSolution) {\r\n            // show Solution: use the backgroundColor which shows the solution\r\n            this.ngxColor.domain = this.backgroundSolutionColors;\r\n\r\n            this.setData(this.questionStatistic);\r\n            const additionalData = this.rated ? this.ratedCorrectData : this.unratedCorrectData;\r\n            this.data.push(additionalData);\r\n            // show Solution\r\n            this.chartLabels = this.solutionLabels;\r\n        } else {\r\n            // don't show Solution: use the backgroundColor which doesn't show the solution\r\n            this.ngxColor.domain = this.backgroundColors;\r\n\r\n            this.setData(this.questionStatistic);\r\n            // don't show Solution\r\n            this.chartLabels = this.labels;\r\n        }\r\n\r\n        this.pushDataToNgxEntry(this.changeDetector);\r\n        this.setAxisLabels('artemisApp.showStatistic.questionStatistic.xAxes', 'artemisApp.showStatistic.questionStatistic.yAxes');\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["redColor", "greenColor", "blueColor", "lightBlueColor", "greyColor", "QuestionStatisticComponent", "AbstractQuizStatisticComponent", "route", "inject", "ActivatedRoute", "router", "Router", "accountService", "AccountService", "quizExerciseService", "QuizExerciseService", "websocketService", "WebsocketService", "changeDetector", "ChangeDetectorRef", "question", "questionStatistic", "quizExercise", "questionIdParam", "sub", "labels", "solutionLabels", "ratedCorrectData", "unratedCorrectData", "maxScore", "showSolution", "websocketChannelForData", "questionTextRendered", "backgroundColors", "backgroundSolutionColors", "ngOnInit", "translateService", "onLangChange", "subscribe", "setAxisLabels", "params", "hasAnyAuthorityDirect", "Authority", "ADMIN", "INSTRUCTOR", "EDITOR", "TA", "find", "res", "loadQuiz", "body", "receive", "quiz", "ngOnDestroy", "unsubscribe", "resetLabelsColors", "resetData", "ratedData", "unratedData", "addData", "rated", "unrated", "push", "getLetter", "index", "String", "fromCharCode", "updateData", "ratedCorrectCounter", "unRatedCorrectCounter", "chartLabels", "loadDataInDiagram", "switchSolution", "loadQuizCommon", "navigateByUrl", "updatedQuestion", "quizQuestions", "filter", "id", "quizQuestionStatistic", "loadInvalidLayout", "possibleInvalidElements", "invalidLabel", "instant", "forEach", "element", "i", "invalid", "addLastBarLayout", "length", "lastLabel", "ngxColor", "domain", "setData", "additionalData", "data", "pushDataToNgxEntry", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "template", "rf", "ctx", "encapsulation"]
}
