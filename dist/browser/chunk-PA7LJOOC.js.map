{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/ssh-settings/ssh-user-settings.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable, lastValueFrom, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { UserSshPublicKey } from 'app/entities/programming/user-ssh-public-key.model';\r\n\r\nexport interface IASshUserSettingsService {\r\n    getCachedSshKeys: () => Promise<UserSshPublicKey[] | undefined>;\r\n    getSshPublicKeys: () => Observable<UserSshPublicKey[]>;\r\n    getSshPublicKey: (keyId: number) => Observable<UserSshPublicKey>;\r\n    addNewSshPublicKey: (userKey: UserSshPublicKey) => Observable<HttpResponse<UserSshPublicKey>>;\r\n    deleteSshPublicKey: (keyId: number) => Observable<void>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SshUserSettingsService implements IASshUserSettingsService {\r\n    private http = inject(HttpClient);\r\n\r\n    private userSshKeysValue?: UserSshPublicKey[];\r\n    private sshKeysRequest?: Promise<UserSshPublicKey[] | undefined>;\r\n\r\n    get sshKeys() {\r\n        return this.userSshKeysValue;\r\n    }\r\n\r\n    set sshKeys(sshKeys: UserSshPublicKey[] | undefined) {\r\n        this.userSshKeysValue = sshKeys;\r\n    }\r\n\r\n    /**\r\n     * Gets all ssh keys of a user from the server, but only if they have not yet been requested before, or aren't already present\r\n     */\r\n    getCachedSshKeys(): Promise<UserSshPublicKey[] | undefined> {\r\n        // check and see if we have retrieved the sshKeys data from the server already\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.sshKeys) {\r\n            return Promise.resolve(this.sshKeys);\r\n        }\r\n\r\n        // If a request is already in progress, return the same promise\r\n        if (this.sshKeysRequest) {\r\n            return this.sshKeysRequest;\r\n        }\r\n\r\n        this.sshKeysRequest = lastValueFrom(\r\n            this.getSshPublicKeys().pipe(\r\n                map((keys: UserSshPublicKey[]) => {\r\n                    if (keys) {\r\n                        this.sshKeys = keys ? keys : undefined;\r\n                        this.sshKeysRequest = undefined;\r\n                        return this.sshKeys;\r\n                    }\r\n                    return this.sshKeys;\r\n                }),\r\n                catchError(() => {\r\n                    this.sshKeys = undefined;\r\n                    this.sshKeysRequest = undefined;\r\n                    return of(undefined);\r\n                }),\r\n            ),\r\n        );\r\n        return this.sshKeysRequest;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all public SSH keys of a user\r\n     */\r\n    getSshPublicKeys(): Observable<UserSshPublicKey[]> {\r\n        return this.http.get<UserSshPublicKey[]>('api/programming/ssh-settings/public-keys');\r\n    }\r\n\r\n    /**\r\n     * Retrieves a specific public SSH keys of a user\r\n     */\r\n    getSshPublicKey(keyId: number): Observable<UserSshPublicKey> {\r\n        return this.http.get<UserSshPublicKey>(`api/programming/ssh-settings/public-key/${keyId}`);\r\n    }\r\n\r\n    /**\r\n     * Sends the added SSH key to the server\r\n     *\r\n     * @param userSshPublicKey The userSshPublicKey DTO containing the details for the new key which should be created\r\n     */\r\n    addNewSshPublicKey(userSshPublicKey: UserSshPublicKey): Observable<HttpResponse<UserSshPublicKey>> {\r\n        return this.http.post<UserSshPublicKey>('api/programming/ssh-settings/public-key', userSshPublicKey, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Sends a request to the server to delete the user's current SSH key\r\n     */\r\n    deleteSshPublicKey(keyId: number): Observable<void> {\r\n        return this.http.delete<void>(`api/programming/ssh-settings/public-key/${keyId}`);\r\n    }\r\n}\r\n"],
  "mappings": "qHAeA,IAAaA,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,KAAOC,EAAOC,CAAU,EAExBC,iBACAC,eAER,IAAIC,SAAO,CACP,OAAO,KAAKF,gBAChB,CAEA,IAAIE,QAAQA,EAAuC,CAC/C,KAAKF,iBAAmBE,CAC5B,CAKAC,kBAAgB,CAGZ,OAAI,KAAKD,QACEE,QAAQC,QAAQ,KAAKH,OAAO,EAInC,KAAKD,eACE,KAAKA,gBAGhB,KAAKA,eAAiBK,EAClB,KAAKC,iBAAgB,EAAGC,KACpBC,EAAKC,GACGA,GACA,KAAKR,QAAUQ,GAAcC,OAC7B,KAAKV,eAAiBU,OACf,KAAKT,SAET,KAAKA,OACf,EACDU,EAAW,KACP,KAAKV,QAAUS,OACf,KAAKV,eAAiBU,OACfE,EAAGF,MAAS,EACtB,CAAC,CACL,EAEE,KAAKV,eAChB,CAKAM,kBAAgB,CACZ,OAAO,KAAKV,KAAKiB,IAAwB,0CAA0C,CACvF,CAKAC,gBAAgBC,EAAa,CACzB,OAAO,KAAKnB,KAAKiB,IAAsB,2CAA2CE,CAAK,EAAE,CAC7F,CAOAC,mBAAmBC,EAAkC,CACjD,OAAO,KAAKrB,KAAKsB,KAAuB,0CAA2CD,EAAkB,CAAEE,QAAS,UAAU,CAAE,CAChI,CAKAC,mBAAmBL,EAAa,CAC5B,OAAO,KAAKnB,KAAKyB,OAAa,2CAA2CN,CAAK,EAAE,CACpF,4CA7ESpB,EAAsB,6BAAtBA,EAAsB2B,QAAtB3B,EAAsB4B,UAAAC,WADT,MAAM,CAAA,SACnB7B,CAAsB,GAAA",
  "names": ["SshUserSettingsService", "http", "inject", "HttpClient", "userSshKeysValue", "sshKeysRequest", "sshKeys", "getCachedSshKeys", "Promise", "resolve", "lastValueFrom", "getSshPublicKeys", "pipe", "map", "keys", "undefined", "catchError", "of", "get", "getSshPublicKey", "keyId", "addNewSshPublicKey", "userSshPublicKey", "post", "observe", "deleteSshPublicKey", "delete", "factory", "\u0275fac", "providedIn"]
}
