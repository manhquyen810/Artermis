{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/exam-status.component.ts", "src/main/webapp/app/exam/manage/exam-status.component.html", "src/main/webapp/app/exam/manage/exam-management.component.ts", "src/main/webapp/app/exam/manage/exam-management.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { faArrowRight, faCheckCircle, faCircleExclamation, faDotCircle, faTimes, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamChecklistService } from 'app/exam/manage/exams/exam-checklist-component/exam-checklist.service';\r\nimport { ExamChecklist } from 'app/entities/exam/exam-checklist.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\nexport enum ExamReviewState {\r\n    UNSET = 'unset',\r\n    PLANNED = 'planned',\r\n    RUNNING = 'running',\r\n    FINISHED = 'finished',\r\n}\r\n\r\nexport enum ExamConductionState {\r\n    PLANNED,\r\n    RUNNING,\r\n    FINISHED,\r\n    ERROR,\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-exam-status',\r\n    templateUrl: './exam-status.component.html',\r\n    styleUrls: ['./exam-status.component.scss'],\r\n    imports: [NgClass, FaIconComponent, TranslateDirective, ArtemisDatePipe, ArtemisTranslatePipe, ArtemisDurationFromSecondsPipe],\r\n})\r\nexport class ExamStatusComponent implements OnChanges, OnInit, OnDestroy {\r\n    private examChecklistService = inject(ExamChecklistService);\r\n    private websocketService = inject(WebsocketService);\r\n\r\n    @Input()\r\n    public exam: Exam;\r\n    @Input()\r\n    public course?: Course;\r\n\r\n    examChecklist: ExamChecklist;\r\n    numberOfGeneratedStudentExams: number;\r\n\r\n    configuredExercises: boolean;\r\n    registeredStudents: boolean;\r\n    generatedStudentExams: boolean;\r\n    preparedExerciseStart: boolean;\r\n\r\n    // all steps for the preparation finished\r\n    examPreparationFinished = false;\r\n    // All mandatory steps for the preparation finished\r\n    mandatoryPreparationFinished = false;\r\n    examConductionState: ExamConductionState;\r\n    examReviewState: ExamReviewState;\r\n    examCorrectionState: ExamReviewState;\r\n\r\n    isTestExam: boolean;\r\n    maxPointExercises: number;\r\n\r\n    readonly examConductionStateEnum = ExamConductionState;\r\n    readonly examReviewStateEnum = ExamReviewState;\r\n    readonly round = round;\r\n    readonly Math = Math;\r\n\r\n    numberOfSubmitted = 0;\r\n    numberOfStarted = 0;\r\n\r\n    // Icons\r\n    faTimes = faTimes;\r\n    faTimesCircle = faTimesCircle;\r\n    faCheckCircle = faCheckCircle;\r\n    faArrowRight = faArrowRight;\r\n    faDotCircle = faDotCircle;\r\n    faCircleExclamation = faCircleExclamation;\r\n\r\n    ngOnInit() {\r\n        const submittedTopic = this.examChecklistService.getSubmittedTopic(this.exam);\r\n        this.websocketService.subscribe(submittedTopic);\r\n        this.websocketService.receive(submittedTopic).subscribe(() => (this.numberOfSubmitted += 1));\r\n        const startedTopic = this.examChecklistService.getStartedTopic(this.exam);\r\n        this.websocketService.subscribe(startedTopic);\r\n        this.websocketService.receive(startedTopic).subscribe(() => (this.numberOfStarted += 1));\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.examChecklistService.getExamStatistics(this.exam).subscribe((examStats) => {\r\n            this.examChecklist = examStats;\r\n            this.numberOfGeneratedStudentExams = this.examChecklist.numberOfGeneratedStudentExams ?? 0;\r\n            this.isTestExam = this.exam.testExam!;\r\n\r\n            if (this.course?.isAtLeastInstructor) {\r\n                // Step 1:\r\n                this.setExamPreparation();\r\n            }\r\n\r\n            // Step 2: Exam conduction\r\n            this.setConductionState();\r\n\r\n            if (!this.isTestExam) {\r\n                // Step 3: Exam correction\r\n                this.setReviewState();\r\n                this.setCorrectionState();\r\n            }\r\n\r\n            this.numberOfStarted = this.examChecklist.numberOfExamsStarted;\r\n            this.numberOfSubmitted = this.examChecklist.numberOfExamsSubmitted;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        const submittedTopic = this.examChecklistService.getSubmittedTopic(this.exam);\r\n        this.websocketService.unsubscribe(submittedTopic);\r\n        const startedTopic = this.examChecklistService.getStartedTopic(this.exam);\r\n        this.websocketService.unsubscribe(startedTopic);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that determines if all configuration steps for the exam exercises are finished\r\n     * @returns boolean indicating whether configuration is finished\r\n     */\r\n    private areAllExercisesConfigured(): boolean {\r\n        const atLeastOneGroup = this.examChecklistService.checkAtLeastOneExerciseGroup(this.exam);\r\n        const numberOfExercisesEqual = this.examChecklistService.checkNumberOfExerciseGroups(this.exam);\r\n        const noEmptyExerciseGroup = this.examChecklistService.checkEachGroupContainsExercise(this.exam);\r\n        const maximumPointsEqual = this.examChecklistService.checkPointsExercisesEqual(this.exam);\r\n        let examPointsReachable;\r\n        if (this.isTestExam) {\r\n            // This method is called here, as it is part of the exercise configuration - although it is a separate entry to highlight the importance\r\n            this.maxPointExercises = this.examChecklistService.calculateExercisePoints(maximumPointsEqual, this.exam);\r\n            examPointsReachable = this.exam.examMaxPoints === this.maxPointExercises;\r\n        } else {\r\n            examPointsReachable = this.examChecklistService.checkTotalPointsMandatory(maximumPointsEqual, this.exam);\r\n        }\r\n\r\n        return atLeastOneGroup && noEmptyExerciseGroup && numberOfExercisesEqual && maximumPointsEqual && examPointsReachable;\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method indicating whether all steps of Exam preparation are done\r\n     */\r\n    private isExamPreparationFinished(): boolean {\r\n        if (this.isTestExam) {\r\n            // For test exam, only the exerciseConfiguration needs to be performed by the instructor\r\n            return this.configuredExercises;\r\n        } else {\r\n            return this.configuredExercises && this.registeredStudents && this.generatedStudentExams && this.preparedExerciseStart;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper method to indicate weather the mandatory preparation steps are performed in order to display a warning in the status.\r\n     * (PrepareExerciseStart is not mandatory, but highly recommended)\r\n     */\r\n    private isMandatoryPreparationFinished(): boolean {\r\n        if (this.isTestExam) {\r\n            return this.configuredExercises;\r\n        } else {\r\n            return this.configuredExercises && this.registeredStudents && this.generatedStudentExams;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the conductionState according to the current situation\r\n     */\r\n    private setConductionState(): void {\r\n        // In case the exercise configuration is wrong, but the (Test)Exam already started, students are not able to start a test eam or real exam\r\n        // The ERROR-State should only be visible to Instructors, as editors & TAs have no access to the required data to determine if the preparation is finished\r\n        if (this.course?.isAtLeastInstructor && this.examAlreadyStarted() && !this.mandatoryPreparationFinished) {\r\n            this.examConductionState = ExamConductionState.ERROR;\r\n        } else if (this.examAlreadyEnded() && ((this.course && !this.course.isAtLeastInstructor) || this.examPreparationFinished)) {\r\n            this.examConductionState = ExamConductionState.FINISHED;\r\n        } else if (this.examAlreadyStarted() && !this.examAlreadyEnded()) {\r\n            this.examConductionState = ExamConductionState.RUNNING;\r\n        } else {\r\n            this.examConductionState = ExamConductionState.PLANNED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the reviewState according to the current situation\r\n     */\r\n    private setReviewState(): void {\r\n        if (!this.exam.examStudentReviewEnd) {\r\n            this.examReviewState = ExamReviewState.UNSET;\r\n        } else if (this.isExamReviewPlanned()) {\r\n            this.examReviewState = ExamReviewState.PLANNED;\r\n        } else if (this.isExamReviewRunning()) {\r\n            this.examReviewState = ExamReviewState.RUNNING;\r\n        } else {\r\n            this.examReviewState = ExamReviewState.FINISHED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that sets the state for the whole Exam correction section\r\n     */\r\n    private setCorrectionState(): void {\r\n        if (this.examReviewState === ExamReviewState.RUNNING) {\r\n            this.examCorrectionState = ExamReviewState.RUNNING;\r\n        } else if (!this.exam.publishResultsDate || this.examReviewState === ExamReviewState.UNSET) {\r\n            this.examCorrectionState = ExamReviewState.UNSET;\r\n        } else if (this.exam.publishResultsDate && this.examReviewState === ExamReviewState.PLANNED) {\r\n            this.examCorrectionState = ExamReviewState.PLANNED;\r\n        } else if (this.examReviewState === ExamReviewState.FINISHED && this.allComplaintsResolved()) {\r\n            this.examCorrectionState = ExamReviewState.FINISHED;\r\n        } else {\r\n            this.examCorrectionState = ExamReviewState.RUNNING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that determines the state of the different sub steps of exam preparation and stores them in a map\r\n     * Finally determines whether every sub step is sufficiently fulfilled and therefore exam preparation is finished\r\n     */\r\n    private setExamPreparation(): void {\r\n        // Step 1.1:\r\n        this.configuredExercises = this.areAllExercisesConfigured();\r\n        // For test exam, only the exerciseConfiguration needs to be performed by the instructor\r\n        if (!this.isTestExam) {\r\n            // Step 1.2\r\n            this.registeredStudents = this.examChecklistService.checkAtLeastOneRegisteredStudent(this.exam);\r\n            // Step 1.3:\r\n            this.generatedStudentExams = this.examChecklistService.checkAllExamsGenerated(this.exam, this.examChecklist) && this.registeredStudents;\r\n            // Step 1.4:\r\n            this.preparedExerciseStart = !!this.examChecklist.allExamExercisesAllStudentsPrepared && this.generatedStudentExams;\r\n        } else {\r\n            this.registeredStudents = false;\r\n            this.generatedStudentExams = false;\r\n            this.preparedExerciseStart = false;\r\n        }\r\n        this.examPreparationFinished = this.isExamPreparationFinished();\r\n        this.mandatoryPreparationFinished = this.isMandatoryPreparationFinished();\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the exam already started\r\n     */\r\n    private examAlreadyStarted(): boolean {\r\n        return this.exam.startDate! && this.exam.startDate.isBefore(dayjs());\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the exam is already finished\r\n     */\r\n    private examAlreadyEnded(): boolean {\r\n        return this.exam.endDate! && this.exam.endDate.isBefore(dayjs());\r\n    }\r\n\r\n    /**\r\n     * Indicates whether exam review is already running\r\n     */\r\n    private isExamReviewRunning(): boolean {\r\n        return (\r\n            ((!this.exam.examStudentReviewStart && this.exam.examStudentReviewEnd && this.exam.examStudentReviewEnd.isAfter(dayjs())) ||\r\n                (this.exam.examStudentReviewStart && this.exam.examStudentReviewStart.isBefore(dayjs()) && this.exam.examStudentReviewEnd!.isAfter(dayjs()))) ??\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Indicates whether exam review is planned\r\n     */\r\n    private isExamReviewPlanned(): boolean {\r\n        return (this.exam.examStudentReviewStart && this.exam.examStudentReviewStart.isAfter(dayjs())) ?? false;\r\n    }\r\n\r\n    /**\r\n     * Indicates whether all complaints are resolved\r\n     */\r\n    private allComplaintsResolved(): boolean {\r\n        return this.examChecklist.numberOfAllComplaints === this.examChecklist.numberOfAllComplaintsDone;\r\n    }\r\n}\r\n", "<div class=\"exam-status-wrapper\" [ngClass]=\"course?.isAtLeastInstructor ? 'instructor-view' : 'tutor-view'\">\r\n    <!-- 1. Exam preparation -->\r\n    @if (course?.isAtLeastInstructor) {\r\n        <div class=\"status-step\">\r\n            <!-- If all preparation tasks are finished, show a green check as header, show a red cross else -->\r\n            <div class=\"d-flex justify-content-center header-icon\">\r\n                @if (examPreparationFinished) {\r\n                    <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                }\r\n                @if (!examPreparationFinished) {\r\n                    <fa-icon [icon]=\"faTimesCircle\" class=\"cross\" />\r\n                }\r\n            </div>\r\n            <div class=\"status-step-content\">\r\n                <h6 class=\"text-center\" jhiTranslate=\"artemisApp.examStatus.preparation.{{ isTestExam ? 'testExam.' : '' }}examPreparation\"></h6>\r\n                <ol>\r\n                    <li class=\"d-flex align-items-center\">\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.examStatus.preparation.configureExercises\"\r\n                            [translateValues]=\"{ amount: exam.exerciseGroups ? exam.exerciseGroups.length : 0 }\"\r\n                        ></span>\r\n                        @if (configuredExercises) {\r\n                            <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                        }\r\n                        @if (!configuredExercises) {\r\n                            <fa-icon [icon]=\"faTimes\" class=\"cross\" />\r\n                        }\r\n                    </li>\r\n                    @if (isTestExam) {\r\n                        <li class=\"d-flex align-items-center\">\r\n                            @if (maxPointExercises === exam.examMaxPoints) {\r\n                                <span>{{ 'artemisApp.examStatus.preparation.testExam.maxPointsCorrect' | artemisTranslate }}{{ exam.examMaxPoints }}</span>\r\n                                <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                            }\r\n                            @if (maxPointExercises !== exam.examMaxPoints) {\r\n                                <span jhiTranslate=\"artemisApp.examStatus.preparation.testExam.maxPointsWrong\" [translateValues]=\"{ points: maxPointExercises }\"></span>\r\n                                <fa-icon [icon]=\"faTimes\" class=\"cross\" />\r\n                            }\r\n                        </li>\r\n                    }\r\n                    @if (!isTestExam) {\r\n                        <li class=\"d-flex align-items-center\">\r\n                            <span jhiTranslate=\"artemisApp.examStatus.preparation.registerStudents\" [translateValues]=\"{ registered: exam.numberOfExamUsers }\"></span>\r\n                            @if (registeredStudents) {\r\n                                <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                            }\r\n                            @if (!registeredStudents) {\r\n                                <fa-icon [icon]=\"faTimes\" class=\"cross\" />\r\n                            }\r\n                        </li>\r\n                    }\r\n                    @if (!isTestExam) {\r\n                        <li class=\"d-flex align-items-center\">\r\n                            <span jhiTranslate=\"artemisApp.examStatus.preparation.generateStudentExams\"></span>\r\n                            <!-- If no students are registered yet, we do not want to display \"0 of 0\" -->\r\n                            @if (!registeredStudents) {\r\n                                <span jhiTranslate=\"artemisApp.examStatus.preparation.notRegistered\"></span>\r\n                            }\r\n                            @if (registeredStudents) {\r\n                                <span\r\n                                    jhiTranslate=\"artemisApp.examStatus.preparation.registered\"\r\n                                    [translateValues]=\"{\r\n                                        generated: numberOfGeneratedStudentExams,\r\n                                        total: exam.numberOfExamUsers,\r\n                                    }\"\r\n                                ></span>\r\n                            }\r\n                            @if (generatedStudentExams) {\r\n                                <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                            }\r\n                            @if (!generatedStudentExams) {\r\n                                <fa-icon [icon]=\"faTimes\" class=\"cross\" />\r\n                            }\r\n                        </li>\r\n                    }\r\n                    @if (!isTestExam) {\r\n                        <li class=\"d-flex align-items-center\">\r\n                            <span jhiTranslate=\"artemisApp.examStatus.preparation.prepareExerciseStart\"></span>\r\n                            @if (preparedExerciseStart) {\r\n                                <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                            }\r\n                            @if (!preparedExerciseStart) {\r\n                                <fa-icon [icon]=\"faTimes\" class=\"cross\" />\r\n                            }\r\n                        </li>\r\n                    }\r\n                </ol>\r\n            </div>\r\n        </div>\r\n        <div class=\"connector\" [ngClass]=\"mandatoryPreparationFinished ? 'check' : 'cross'\"></div>\r\n    }\r\n    <!-- 2. Exam conduction -->\r\n    <div class=\"status-step\">\r\n        <!-- If exam conduction is planned, but not started yet, show a red cross,\r\n  If exam is currently conducted, show a yellow dot\r\n  If the exam preparation and the conduction period are finished, show a green check\r\n  If the test eam preparation is not yet finished, but the test eam has already started, show a warning-->\r\n        <div class=\"d-flex justify-content-center header-icon\">\r\n            @switch (examConductionState) {\r\n                @case (examConductionStateEnum.PLANNED) {\r\n                    <fa-icon [icon]=\"faTimesCircle\" class=\"cross\" />\r\n                }\r\n                @case (examConductionStateEnum.RUNNING) {\r\n                    <fa-icon [icon]=\"faDotCircle\" class=\"running\" />\r\n                }\r\n                @case (examConductionStateEnum.FINISHED) {\r\n                    <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                }\r\n                @case (examConductionStateEnum.ERROR) {\r\n                    <fa-icon [icon]=\"faCircleExclamation\" class=\"cross\" />\r\n                }\r\n            }\r\n        </div>\r\n        <div class=\"status-step-content\">\r\n            <div class=\"text-center mb-1\">\r\n                <h6 jhiTranslate=\"artemisApp.examStatus.conduction.{{ isTestExam ? 'testExam.' : '' }}examConduction\"></h6>\r\n                <b>{{ exam.startDate | artemisDate }} - {{ exam.endDate | artemisDate }}</b>\r\n            </div>\r\n            <!-- In case the exercise configuration is wrong, but the test eam already started, students are not able to start a test eam -->\r\n            @if (examConductionState === examConductionStateEnum.ERROR) {\r\n                <div class=\"text-center mb-1\">\r\n                    <h6 jhiTranslate=\"artemisApp.examStatus.conduction.{{ isTestExam ? 'testExam.' : '' }}conductionSuspended\"></h6>\r\n                </div>\r\n            }\r\n            @if (course?.isAtLeastInstructor && examChecklist && examConductionState !== examConductionStateEnum.ERROR) {\r\n                <ol>\r\n                    <li>\r\n                        <span> {{ 'artemisApp.examStatus.conduction.workingTime' | artemisTranslate }}: {{ exam.workingTime! | artemisDurationFromSeconds: true }} </span>\r\n                    </li>\r\n                    @if (isTestExam) {\r\n                        <li>\r\n                            <span> {{ 'artemisApp.examStatus.conduction.testExam.numberOfStudents' | artemisTranslate }}: {{ exam.numberOfExamUsers }} </span>\r\n                        </li>\r\n                    }\r\n                    <li>\r\n                        <span>\r\n                            {{ 'artemisApp.examStatus.conduction.' + (isTestExam ? 'testExam.' : '') + 'startedExams' | artemisTranslate }}\r\n                            :\r\n                            {{ numberOfStarted }}\r\n                            ({{ numberOfGeneratedStudentExams > 0 ? round((numberOfStarted * 100) / examChecklist.numberOfGeneratedStudentExams!, 1) : 0 }}\r\n                            %)\r\n                        </span>\r\n                    </li>\r\n                    <li>\r\n                        <span>\r\n                            {{ 'artemisApp.examStatus.conduction.' + (isTestExam ? 'testExam.' : '') + 'submittedExams' | artemisTranslate }}\r\n                            :\r\n                            {{ numberOfSubmitted }}\r\n                            ({{ numberOfGeneratedStudentExams > 0 ? round((numberOfSubmitted * 100) / numberOfGeneratedStudentExams!, 1) : 0 }}\r\n                            %)\r\n                        </span>\r\n                    </li>\r\n                </ol>\r\n            }\r\n        </div>\r\n    </div>\r\n    @if (!isTestExam) {\r\n        <div class=\"connector\" [ngClass]=\"examConductionState === examConductionStateEnum.FINISHED ? 'check' : ''\"></div>\r\n    }\r\n    <!-- 3. Exam correction -->\r\n    @if (!isTestExam) {\r\n        <div class=\"status-step\">\r\n            <!-- If exam review phase is running or there are still open complaints, show a yellow dot,\r\n    If exam review phase is finished and all complaints are resolved, show a green check\r\n    Else, show a red cross -->\r\n            <div class=\"d-flex justify-content-center header-icon\">\r\n                @switch (examCorrectionState) {\r\n                    @case (examReviewStateEnum.RUNNING) {\r\n                        <fa-icon [icon]=\"faDotCircle\" class=\"running\" />\r\n                    }\r\n                    @case (examReviewStateEnum.FINISHED) {\r\n                        <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                    }\r\n                    @default {\r\n                        <fa-icon [icon]=\"faTimesCircle\" class=\"cross\" />\r\n                    }\r\n                }\r\n            </div>\r\n            <div class=\"status-step-content\">\r\n                <h6 class=\"text-center\" jhiTranslate=\"artemisApp.examStatus.correction.examCorrection\"></h6>\r\n                @if (examChecklist) {\r\n                    <ol>\r\n                        @if (examChecklist.numberOfTotalExamAssessmentsFinishedByCorrectionRound !== null && numberOfSubmitted !== 0) {\r\n                            <div>\r\n                                @for (\r\n                                    finishedByCorrectionRound of examChecklist.numberOfTotalExamAssessmentsFinishedByCorrectionRound;\r\n                                    track finishedByCorrectionRound;\r\n                                    let i = $index\r\n                                ) {\r\n                                    <li>\r\n                                        <span>\r\n                                            {{ 'artemisApp.examStatus.correction.correctionRoundProgress' | artemisTranslate: { index: i + 1 } }}\r\n                                            :\r\n                                            {{\r\n                                                Math.min(\r\n                                                    examChecklist.numberOfTotalParticipationsForAssessment > 0\r\n                                                        ? round((finishedByCorrectionRound * 100) / examChecklist.numberOfTotalParticipationsForAssessment, 1)\r\n                                                        : 0,\r\n                                                    100\r\n                                                )\r\n                                            }}%\r\n                                        </span>\r\n                                    </li>\r\n                                }\r\n                            </div>\r\n                        }\r\n                        <li class=\"d-flex align-items-center\">\r\n                            <span>{{ 'artemisApp.examStatus.correction.publishResultDate' | artemisTranslate }}: </span>\r\n                            @if (exam.publishResultsDate) {\r\n                                <b>\r\n                                    {{ exam.publishResultsDate | artemisDate }}\r\n                                    <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                                </b>\r\n                            }\r\n                            @if (!exam.publishResultsDate) {\r\n                                <b class=\"unset\" jhiTranslate=\"artemisApp.examStatus.correction.notSet\"></b>\r\n                            }\r\n                            <br />\r\n                        </li>\r\n                        <li>\r\n                            <span>{{ 'artemisApp.examStatus.correction.examReview' | artemisTranslate }}:</span>\r\n                            @if (examReviewState) {\r\n                                <b [ngClass]=\"examReviewState\">{{ 'artemisApp.examStatus.correction.' + examReviewState | artemisTranslate }}</b>\r\n                            }\r\n                        </li>\r\n                        <li>\r\n                            <span>\r\n                                {{ 'artemisApp.examStatus.correction.complaints' | artemisTranslate }}:\r\n                                {{\r\n                                    examChecklist.numberOfAllComplaintsDone !== undefined && examChecklist.numberOfAllComplaints && examChecklist.numberOfAllComplaints > 0\r\n                                        ? round((examChecklist.numberOfAllComplaintsDone * 100) / examChecklist.numberOfAllComplaints, 1)\r\n                                        : 100\r\n                                }}%\r\n                                {{\r\n                                    'artemisApp.examStatus.correction.complaintsCount'\r\n                                        | artemisTranslate\r\n                                            : {\r\n                                                  done: examChecklist.numberOfAllComplaintsDone!,\r\n                                                  total: examChecklist.numberOfAllComplaints!,\r\n                                              }\r\n                                }}\r\n                            </span>\r\n                        </li>\r\n                    </ol>\r\n                }\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { ExamInformationDTO } from 'app/entities/exam/exam-information.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { faClipboard, faEye, faFileImport, faListAlt, faPlus, faSort, faThList, faTimes, faUser, faWrench } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExamImportComponent } from 'app/exam/manage/exams/exam-import/exam-import.component';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { ExamStatusComponent } from './exam-status.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-management',\r\n    templateUrl: './exam-management.component.html',\r\n    styleUrls: ['./exam-management.component.scss'],\r\n    imports: [TranslateDirective, DocumentationButtonComponent, FaIconComponent, RouterLink, SortDirective, SortByDirective, ExamStatusComponent],\r\n})\r\nexport class ExamManagementComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private courseService = inject(CourseManagementService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private eventManager = inject(EventManager);\r\n    private alertService = inject(AlertService);\r\n    private sortService = inject(SortService);\r\n    private modalService = inject(NgbModal);\r\n    private router = inject(Router);\r\n\r\n    readonly documentationType: DocumentationType = 'Exams';\r\n\r\n    course: Course;\r\n    exams: Exam[];\r\n    predicate: string;\r\n    ascending: boolean;\r\n    eventSubscriber: Subscription;\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n    currentTime: dayjs.Dayjs;\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faPlus = faPlus;\r\n    faFileImport = faFileImport;\r\n    faTimes = faTimes;\r\n    faEye = faEye;\r\n    faWrench = faWrench;\r\n    faUser = faUser;\r\n    faListAlt = faListAlt;\r\n    faClipboard = faClipboard;\r\n    faThList = faThList;\r\n\r\n    constructor() {\r\n        this.predicate = 'id';\r\n        this.ascending = true;\r\n    }\r\n\r\n    /**\r\n     * Initialize the course and all exams when this view is initialized.\r\n     * Subscribes to 'examListModification' event.\r\n     * @see registerChangeInExams\r\n     */\r\n    ngOnInit(): void {\r\n        this.courseService.find(Number(this.route.snapshot.paramMap.get('courseId'))).subscribe({\r\n            next: (res: HttpResponse<Course>) => {\r\n                this.course = res.body!;\r\n                this.loadAllExamsForCourse();\r\n                this.registerChangeInExams();\r\n                this.currentTime = dayjs();\r\n            },\r\n            error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * unsubscribe on component destruction\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.eventSubscriber !== undefined) {\r\n            this.eventManager.destroy(this.eventSubscriber);\r\n        }\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Load all exams for a course.\r\n     */\r\n    loadAllExamsForCourse() {\r\n        this.examManagementService.findAllExamsForCourse(this.course.id!).subscribe({\r\n            next: (res: HttpResponse<Exam[]>) => {\r\n                this.exams = res.body!;\r\n                this.exams.forEach((exam) => {\r\n                    this.examManagementService\r\n                        .getLatestIndividualEndDateOfExam(this.course.id!, exam.id!)\r\n                        .subscribe(\r\n                            (examInformationDTORes: HttpResponse<ExamInformationDTO>) => (exam.latestIndividualEndDate = examInformationDTORes.body!.latestIndividualEndDate),\r\n                        );\r\n                });\r\n            },\r\n            error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Subscribes to 'examListModification' events\r\n     */\r\n    registerChangeInExams() {\r\n        this.eventSubscriber = this.eventManager.subscribe('examListModification', () => {\r\n            this.loadAllExamsForCourse();\r\n            this.currentTime = dayjs();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track the items on the Exams Table\r\n     * @param _index the index in the table\r\n     * @param exam the exam object to track\r\n     */\r\n    trackId(_index: number, exam: Exam): number | undefined {\r\n        return exam.id;\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.exams, this.predicate, this.ascending);\r\n    }\r\n\r\n    examHasFinished(exam: Exam): boolean {\r\n        if (exam.latestIndividualEndDate) {\r\n            return exam.latestIndividualEndDate.isBefore(dayjs());\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Opens the import module for an exam import\r\n     */\r\n    openImportModal() {\r\n        const examImportModalRef = this.modalService.open(ExamImportComponent, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n        });\r\n        // The Exercise Group selection is performed within the exam-update.component afterwards\r\n        examImportModalRef.componentInstance.subsequentExerciseGroupSelection.set(false);\r\n\r\n        const importBaseRoute = ['/course-management', this.course.id, 'exams', 'import'];\r\n\r\n        examImportModalRef.result.then((exam: Exam) => {\r\n            importBaseRoute.push(exam.id);\r\n            this.router.navigate(importBaseRoute);\r\n        });\r\n    }\r\n}\r\n", "@if (course) {\r\n    <div>\r\n        <div class=\"d-flex flex-wrap align-items-center\">\r\n            <h4 id=\"course-page-heading\" jhiTranslate=\"artemisApp.examManagement.title\"></h4>\r\n            <jhi-documentation-button [type]=\"documentationType\" />\r\n            @if (course.isAtLeastInstructor) {\r\n                <div class=\"ms-auto text-truncate justify-content-end\">\r\n                    <a class=\"btn btn-primary me-1\" (click)=\"openImportModal()\">\r\n                        <fa-icon [icon]=\"faFileImport\" />\r\n                        <span jhiTranslate=\"artemisApp.examManagement.importExam\"></span>\r\n                    </a>\r\n                    <a class=\"btn btn-primary jh-create-entity create-exam\" id=\"create-exam\" [routerLink]=\"['new']\">\r\n                        <fa-icon [icon]=\"faPlus\" />\r\n                        <span jhiTranslate=\"artemisApp.examManagement.createExam\"></span>\r\n                    </a>\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"row\"></div>\r\n        <br />\r\n        @if (exams) {\r\n            <div class=\"table-responsive\" id=\"exams-table\">\r\n                <table class=\"table table-striped\">\r\n                    <thead>\r\n                        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"sortRows()\">\r\n                            <th class=\"d-md-table-cell\" jhiSortBy=\"id\">\r\n                                <span jhiTranslate=\"global.field.id\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"title\">\r\n                                <span jhiTranslate=\"artemisApp.exam.title\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th class=\"d-md-table-cell\">\r\n                                <span jhiTranslate=\"artemisApp.examStatus.columnTitle\"></span>\r\n                            </th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (exam of exams; track trackId($index, exam)) {\r\n                            <tr>\r\n                                <td class=\"d-md-table-cell\">\r\n                                    @if (course.isAtLeastInstructor) {\r\n                                        <span>\r\n                                            <a [routerLink]=\"[exam.id]\">{{ exam.id }}</a>\r\n                                        </span>\r\n                                    } @else {\r\n                                        {{ exam.id }}\r\n                                    }\r\n                                </td>\r\n                                <td class=\"d-md-table-cell\">\r\n                                    <ng-container>\r\n                                        @if (course.isAtLeastInstructor) {\r\n                                            <div class=\"bold\">\r\n                                                <a id=\"exam-{{ exam.id }}-title\" [routerLink]=\"[exam.id]\">{{ exam.title }}</a>\r\n                                            </div>\r\n                                        } @else {\r\n                                            <span>\r\n                                                {{ exam.title }}\r\n                                            </span>\r\n                                        }\r\n                                        @if (!exam.testExam) {\r\n                                            <div class=\"badge bg-success\" jhiTranslate=\"artemisApp.examManagement.testExam.realExam\"></div>\r\n                                        }\r\n                                        @if (exam.testExam) {\r\n                                            <div class=\"badge bg-primary\" jhiTranslate=\"artemisApp.examManagement.testExam.testExam\"></div>\r\n                                        }\r\n                                    </ng-container>\r\n                                </td>\r\n                                <td class=\"d-md-table-cell\">\r\n                                    <jhi-exam-status [exam]=\"exam\" [course]=\"course\" class=\"d-flex justify-content-center\" />\r\n                                </td>\r\n                                <td class=\"d-md-table-cell\">\r\n                                    <div class=\"btn-group flex-btn-group-container\">\r\n                                        <div class=\"btn-group-vertical me-1 mb-1 exam-management-button-section\">\r\n                                            @if (course.isAtLeastEditor) {\r\n                                                <a\r\n                                                    [routerLink]=\"[exam.id, 'exercise-groups']\"\r\n                                                    class=\"btn btn-primary btn-sm me-1 mb-1 exercise-button d-flex align-items-center justify-content-center\"\r\n                                                    id=\"exercises-button-{{ exam.id }}-groups\"\r\n                                                >\r\n                                                    <div>\r\n                                                        <fa-icon [icon]=\"faListAlt\" />\r\n                                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.exerciseGroups\"></span>\r\n                                                    </div>\r\n                                                </a>\r\n                                            }\r\n                                            @if (course.isAtLeastInstructor) {\r\n                                                <a\r\n                                                    [routerLink]=\"[exam.id, 'student-exams']\"\r\n                                                    class=\"btn btn-primary btn-sm me-1 mb-1 d-flex align-items-center justify-content-center\"\r\n                                                    id=\"student-exams-{{ exam.id }}\"\r\n                                                >\r\n                                                    <div>\r\n                                                        <fa-icon [icon]=\"faEye\" />\r\n                                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.studentExams\"></span>\r\n                                                    </div>\r\n                                                </a>\r\n                                            }\r\n                                            @if (!exam.testExam && ((course.isAtLeastTutor && examHasFinished(exam)) || course.isAtLeastInstructor)) {\r\n                                                <a\r\n                                                    [routerLink]=\"[exam.id, 'assessment-dashboard']\"\r\n                                                    class=\"btn btn-primary btn-sm me-1 mb-1 exercise-button d-flex align-items-center justify-content-center\"\r\n                                                    id=\"exercises-button-{{ exam.id }}\"\r\n                                                >\r\n                                                    <div>\r\n                                                        <fa-icon [icon]=\"faThList\" />\r\n                                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.assessmentDashboard\"></span>\r\n                                                    </div>\r\n                                                </a>\r\n                                            }\r\n                                            @if (course.isAtLeastInstructor) {\r\n                                                <a [routerLink]=\"[exam.id, 'edit']\" class=\"btn btn-warning btn-sm me-1 mb-1 d-flex align-items-center justify-content-center\">\r\n                                                    <div>\r\n                                                        <fa-icon [icon]=\"faWrench\" />\r\n                                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.edit\"></span>\r\n                                                    </div>\r\n                                                </a>\r\n                                            }\r\n                                        </div>\r\n                                        <div class=\"btn-group-vertical me-1 mb-1 exam-management-button-section\">\r\n                                            @if (course.isAtLeastInstructor) {\r\n                                                <a [routerLink]=\"[exam.id, 'test-runs']\" class=\"btn btn-info btn-sm me-1 mb-1 assessment-dashboard\">\r\n                                                    <fa-icon [icon]=\"faUser\" />\r\n                                                    <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.testRun.testRun\"></span>\r\n                                                </a>\r\n                                            }\r\n                                            @if (!exam.testExam && course.isAtLeastInstructor) {\r\n                                                <a\r\n                                                    [routerLink]=\"[exam.id, 'students']\"\r\n                                                    class=\"btn btn-info btn-sm me-1 mb-1 assessment-dashboard\"\r\n                                                    id=\"student-button-{{ exam.id }}\"\r\n                                                >\r\n                                                    <fa-icon [icon]=\"faUser\" />\r\n                                                    <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.students\"></span>\r\n                                                </a>\r\n                                            }\r\n                                            @if (course.isAtLeastInstructor) {\r\n                                                <a [routerLink]=\"['/course-management', course.id, 'exams', exam.id, 'scores']\" class=\"btn btn-info btn-sm me-1 mb-1\">\r\n                                                    <fa-icon [icon]=\"faEye\" />\r\n                                                    <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.scores\"></span>\r\n                                                </a>\r\n                                            }\r\n                                            @if (course.isAtLeastInstructor) {\r\n                                                <a [routerLink]=\"[exam.id]\" class=\"btn btn-info btn-sm me-1 mb-1\" id=\"checklist-button-{{ exam.id }}\">\r\n                                                    <fa-icon [icon]=\"faThList\" />\r\n                                                    <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.examChecklist\"></span>\r\n                                                </a>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faCheckCircle", "faTimesCircle", "faTimes", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "exam", "examMaxPoints", "\u0275\u0275pureFunction1", "_c1", "maxPointExercises", "\u0275\u0275template", "ExamStatusComponent_Conditional_3_Conditional_22_Conditional_3_Template", "ExamStatusComponent_Conditional_3_Conditional_22_Conditional_4_Template", "\u0275\u0275conditional", "ExamStatusComponent_Conditional_3_Conditional_23_Conditional_5_Template", "ExamStatusComponent_Conditional_3_Conditional_23_Conditional_6_Template", "_c2", "numberOfExamUsers", "registeredStudents", "\u0275\u0275pureFunction2", "_c3", "numberOfGeneratedStudentExams", "ExamStatusComponent_Conditional_3_Conditional_24_Conditional_6_Template", "ExamStatusComponent_Conditional_3_Conditional_24_Conditional_7_Template", "ExamStatusComponent_Conditional_3_Conditional_24_Conditional_8_Template", "ExamStatusComponent_Conditional_3_Conditional_24_Conditional_9_Template", "generatedStudentExams", "ExamStatusComponent_Conditional_3_Conditional_25_Conditional_5_Template", "ExamStatusComponent_Conditional_3_Conditional_25_Conditional_6_Template", "preparedExerciseStart", "ExamStatusComponent_Conditional_3_Conditional_6_Template", "ExamStatusComponent_Conditional_3_Conditional_7_Template", "ExamStatusComponent_Conditional_3_Conditional_19_Template", "ExamStatusComponent_Conditional_3_Conditional_20_Template", "ExamStatusComponent_Conditional_3_Conditional_22_Template", "ExamStatusComponent_Conditional_3_Conditional_23_Template", "ExamStatusComponent_Conditional_3_Conditional_24_Template", "ExamStatusComponent_Conditional_3_Conditional_25_Template", "examPreparationFinished", "\u0275\u0275propertyInterpolate1", "isTestExam", "_c0", "exerciseGroups", "length", "configuredExercises", "mandatoryPreparationFinished", "faDotCircle", "faCircleExclamation", "ExamStatusComponent_Conditional_29_Conditional_11_Template", "\u0275\u0275pipeBind2", "workingTime", "\u0275\u0275textInterpolate3", "numberOfStarted", "round", "examChecklist", "numberOfSubmitted", "examConductionState", "examConductionStateEnum", "FINISHED", "_c5", "\u0275$index_298_r3", "Math", "min", "numberOfTotalParticipationsForAssessment", "finishedByCorrectionRound_r2", "\u0275\u0275repeaterCreate", "ExamStatusComponent_Conditional_33_Conditional_15_Conditional_3_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "numberOfTotalExamAssessmentsFinishedByCorrectionRound", "\u0275\u0275textInterpolate1", "publishResultsDate", "examReviewState", "\u0275\u0275textInterpolate", "ExamStatusComponent_Conditional_33_Conditional_15_Conditional_3_Template", "ExamStatusComponent_Conditional_33_Conditional_15_Conditional_10_Template", "ExamStatusComponent_Conditional_33_Conditional_15_Conditional_11_Template", "ExamStatusComponent_Conditional_33_Conditional_15_Conditional_21_Template", "numberOfAllComplaintsDone", "undefined", "numberOfAllComplaints", "_c4", "ExamStatusComponent_Conditional_33_Case_6_Template", "ExamStatusComponent_Conditional_33_Case_7_Template", "ExamStatusComponent_Conditional_33_Case_8_Template", "ExamStatusComponent_Conditional_33_Conditional_15_Template", "tmp_1_0", "examCorrectionState", "examReviewStateEnum", "RUNNING", "ExamReviewState", "ExamConductionState", "ExamStatusComponent", "examChecklistService", "inject", "ExamChecklistService", "websocketService", "WebsocketService", "course", "faArrowRight", "ngOnInit", "submittedTopic", "getSubmittedTopic", "subscribe", "receive", "startedTopic", "getStartedTopic", "ngOnChanges", "getExamStatistics", "examStats", "testExam", "isAtLeastInstructor", "setExamPreparation", "setConductionState", "setReviewState", "setCorrectionState", "numberOfExamsStarted", "numberOfExamsSubmitted", "ngOnDestroy", "unsubscribe", "areAllExercisesConfigured", "atLeastOneGroup", "checkAtLeastOneExerciseGroup", "numberOfExercisesEqual", "checkNumberOfExerciseGroups", "noEmptyExerciseGroup", "checkEachGroupContainsExercise", "maximumPointsEqual", "checkPointsExercisesEqual", "examPointsReachable", "calculateExercisePoints", "checkTotalPointsMandatory", "isExamPreparationFinished", "isMandatoryPreparationFinished", "examAlreadyStarted", "ERROR", "examAlreadyEnded", "PLANNED", "examStudentReviewEnd", "isExamReviewPlanned", "isExamReviewRunning", "UNSET", "allComplaintsResolved", "checkAtLeastOneRegisteredStudent", "checkAllExamsGenerated", "allExamExercisesAllStudentsPrepared", "startDate", "isBefore", "dayjs", "endDate", "examStudentReviewStart", "isAfter", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ExamStatusComponent_Conditional_3_Template", "ExamStatusComponent_Case_9_Template", "ExamStatusComponent_Case_10_Template", "ExamStatusComponent_Case_11_Template", "ExamStatusComponent_Case_12_Template", "ExamStatusComponent_Conditional_28_Template", "ExamStatusComponent_Conditional_29_Template", "ExamStatusComponent_Conditional_32_Template", "ExamStatusComponent_Conditional_33_Template", "tmp_2_0", "NgClass", "FaIconComponent", "TranslateDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openImportModal", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faFileImport", "\u0275\u0275pureFunction0", "_c0", "faPlus", "\u0275\u0275pureFunction1", "_c1", "exam_r4", "id", "\u0275\u0275textInterpolate", "\u0275\u0275textInterpolate1", "\u0275\u0275propertyInterpolate1", "title", "_c2", "faListAlt", "_c3", "faEye", "_c4", "faThList", "_c5", "faWrench", "_c6", "faUser", "_c7", "\u0275\u0275pureFunction2", "_c8", "course", "\u0275\u0275template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_5_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_6_Template", "\u0275\u0275elementContainerStart", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_12_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_13_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_14_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_15_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_29_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_30_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_31_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_32_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_36_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_37_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_38_Template", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Conditional_39_Template", "\u0275\u0275conditional", "isAtLeastInstructor", "testExam", "isAtLeastEditor", "isAtLeastTutor", "examHasFinished", "\u0275\u0275twoWayListener", "$event", "_r3", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "ascending", "sortRows", "\u0275\u0275repeaterCreate", "ExamManagementComponent_Conditional_0_Conditional_15_For_35_Template", "\u0275\u0275componentInstance", "trackId", "\u0275\u0275twoWayProperty", "faSort", "\u0275\u0275repeater", "exams", "ExamManagementComponent_Conditional_0_Conditional_9_Template", "ExamManagementComponent_Conditional_0_Conditional_15_Template", "documentationType", "ExamManagementComponent", "route", "inject", "ActivatedRoute", "courseService", "CourseManagementService", "examManagementService", "ExamManagementService", "eventManager", "EventManager", "alertService", "AlertService", "sortService", "SortService", "modalService", "NgbModal", "router", "Router", "eventSubscriber", "dialogErrorSource", "Subject", "dialogError$", "asObservable", "currentTime", "faTimes", "faClipboard", "constructor", "ngOnInit", "find", "Number", "snapshot", "paramMap", "get", "subscribe", "next", "res", "body", "loadAllExamsForCourse", "registerChangeInExams", "dayjs", "error", "onError", "ngOnDestroy", "undefined", "destroy", "unsubscribe", "findAllExamsForCourse", "forEach", "exam", "getLatestIndividualEndDateOfExam", "examInformationDTORes", "latestIndividualEndDate", "_index", "sortByProperty", "isBefore", "examImportModalRef", "open", "ExamImportComponent", "size", "backdrop", "componentInstance", "subsequentExerciseGroupSelection", "set", "importBaseRoute", "result", "then", "push", "navigate", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "ExamManagementComponent_Conditional_0_Template", "TranslateDirective", "DocumentationButtonComponent", "FaIconComponent", "RouterLink", "SortDirective", "SortByDirective", "ExamStatusComponent", "styles"]
}
