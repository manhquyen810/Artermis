{
  "version": 3,
  "sources": ["src/main/webapp/app/account/settings/settings.component.ts", "src/main/webapp/app/account/settings/settings.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { LANGUAGES } from 'app/core/language/language.constants';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { FindLanguageFromKeyPipe } from 'app/shared/language/find-language-from-key.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-settings',\r\n    templateUrl: './settings.component.html',\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule, ArtemisTranslatePipe, FindLanguageFromKeyPipe],\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n    private accountService = inject(AccountService);\r\n    private fb = inject(FormBuilder);\r\n    private translateService = inject(TranslateService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    success = false;\r\n    account: User;\r\n    languages = LANGUAGES;\r\n    settingsForm: FormGroup;\r\n    isRegistrationEnabled = false;\r\n\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.isRegistrationEnabled = profileInfo.registrationEnabled || false;\r\n            }\r\n        });\r\n        this.accountService.identity().then((user) => {\r\n            if (user) {\r\n                this.settingsForm.patchValue({\r\n                    firstName: user.firstName,\r\n                    lastName: user.lastName,\r\n                    email: user.email,\r\n                    langKey: user.langKey,\r\n                });\r\n                this.account = user;\r\n            }\r\n        });\r\n        this.initializeForm();\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.settingsForm) {\r\n            return;\r\n        }\r\n        this.settingsForm = this.fb.group({\r\n            firstName: [undefined as string | undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\r\n            lastName: [undefined as string | undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\r\n            email: [undefined as string | undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(100), Validators.email]],\r\n            langKey: [undefined as string | undefined],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the current user account, writing all changes made to the database.\r\n     */\r\n    save() {\r\n        this.success = false;\r\n        // Note: changing the email is currently not supported, because we would need to send another activation link\r\n        this.account.firstName = this.settingsForm.get('firstName')!.value || undefined;\r\n        this.account.lastName = this.settingsForm.get('lastName')!.value || undefined;\r\n        this.account.langKey = this.settingsForm.get('langKey')!.value || undefined;\r\n\r\n        this.accountService.save(this.account).subscribe({\r\n            next: () => {\r\n                this.success = true;\r\n                this.accountService.authenticate(this.account);\r\n                if (this.account.langKey !== this.translateService.currentLang) {\r\n                    this.translateService.use(this.account.langKey!);\r\n                }\r\n            },\r\n            error: () => (this.success = false),\r\n        });\r\n    }\r\n}\r\n", "@if (isRegistrationEnabled) {\r\n    <div>\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-md-8\">\r\n                @if (account) {\r\n                    <h2 jhiTranslate=\"settings.title\" [translateValues]=\"{ username: account.login }\">\r\n                        User settings for [<b>{{ account.login }}</b\r\n                        >]\r\n                    </h2>\r\n                }\r\n                @if (success) {\r\n                    <div class=\"alert alert-success\" jhiTranslate=\"settings.messages.success\">\r\n                        <strong>Settings saved!</strong>\r\n                    </div>\r\n                }\r\n                @if (account) {\r\n                    <form name=\"form\" role=\"form\" (ngSubmit)=\"save()\" [formGroup]=\"settingsForm\" novalidate>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"firstName\" jhiTranslate=\"settings.form.firstname\"></label>\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form-control\"\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                placeholder=\"{{ 'settings.form.firstname.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"firstName\"\r\n                            />\r\n                            @if (settingsForm.get('firstName')!.invalid && (settingsForm.get('firstName')!.dirty || settingsForm.get('firstName')!.touched)) {\r\n                                <div>\r\n                                    @if (settingsForm.get('firstName')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"settings.messages.validate.firstname.required\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('firstName')?.errors?.minlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"settings.messages.validate.firstname.minlength\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('firstName')?.errors?.maxlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"settings.messages.validate.firstname.maxlength\"></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"lastName\" jhiTranslate=\"settings.form.lastname\"></label>\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form-control\"\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                placeholder=\"{{ 'settings.form.lastname.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"lastName\"\r\n                            />\r\n                            @if (settingsForm.get('lastName')!.invalid && (settingsForm.get('lastName')!.dirty || settingsForm.get('lastName')!.touched)) {\r\n                                <div>\r\n                                    @if (settingsForm.get('lastName')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"settings.messages.validate.lastname.required\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('lastName')?.errors?.minlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"settings.messages.validate.lastname.minlength\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('lastName')?.errors?.maxlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"settings.messages.validate.lastname.maxlength\"></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email\"></label>\r\n                            <!-- Note: changing the email is currently not supported, because we would need to send another activation link -->\r\n                            <input\r\n                                type=\"email\"\r\n                                class=\"form-control\"\r\n                                [disabled]=\"true\"\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"{{ 'global.form.email.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"email\"\r\n                            />\r\n                            @if (settingsForm.get('email')!.invalid && (settingsForm.get('email')!.dirty || settingsForm.get('email')!.touched)) {\r\n                                <div>\r\n                                    @if (settingsForm.get('email')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.required\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('email')?.errors?.email) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.invalid\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('email')?.errors?.minlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.minlength\"></small>\r\n                                    }\r\n                                    @if (settingsForm.get('email')?.errors?.maxlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.maxlength\"></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        @if (languages && languages.length > 0) {\r\n                            <div class=\"form-group\">\r\n                                <label for=\"langKey\" jhiTranslate=\"settings.form.language\"></label>\r\n                                <select class=\"form-select\" id=\"langKey\" name=\"langKey\" formControlName=\"langKey\">\r\n                                    @for (language of languages; track language) {\r\n                                        <option [value]=\"language\">{{ language | findLanguageFromKey }}</option>\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                        }\r\n                        <button type=\"submit\" [disabled]=\"settingsForm.invalid\" class=\"btn btn-primary\" jhiTranslate=\"settings.form.button\"></button>\r\n                    </form>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "account", "login", "\u0275\u0275textInterpolate", "\u0275\u0275element", "\u0275\u0275template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_10_Conditional_3_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_10_Conditional_4_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_10_Conditional_5_Template", "\u0275\u0275conditional", "tmp_3_0", "settingsForm", "get", "errors", "required", "tmp_4_0", "minlength", "tmp_5_0", "maxlength", "SettingsComponent_Conditional_0_Conditional_9_Conditional_19_Conditional_3_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_19_Conditional_4_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_19_Conditional_5_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_29_Conditional_3_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_29_Conditional_4_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_29_Conditional_5_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_29_Conditional_6_Template", "email", "tmp_6_0", "language_r3", "\u0275\u0275pipeBind1", "\u0275\u0275repeaterCreate", "SettingsComponent_Conditional_0_Conditional_9_Conditional_31_For_8_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "languages", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "save", "SettingsComponent_Conditional_0_Conditional_9_Conditional_10_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_19_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_29_Template", "SettingsComponent_Conditional_0_Conditional_9_Conditional_31_Template", "\u0275\u0275propertyInterpolate", "invalid", "dirty", "touched", "length", "SettingsComponent_Conditional_0_Conditional_7_Template", "SettingsComponent_Conditional_0_Conditional_8_Template", "SettingsComponent_Conditional_0_Conditional_9_Template", "success", "SettingsComponent", "accountService", "inject", "AccountService", "fb", "FormBuilder", "translateService", "TranslateService", "profileService", "ProfileService", "LANGUAGES", "isRegistrationEnabled", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "registrationEnabled", "identity", "then", "user", "patchValue", "firstName", "lastName", "langKey", "initializeForm", "group", "undefined", "Validators", "minLength", "maxLength", "value", "next", "authenticate", "currentLang", "use", "error", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "SettingsComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "ArtemisTranslatePipe", "FindLanguageFromKeyPipe", "encapsulation"]
}
