{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/shared/instructions-render/service/programming-exercise-instruction.service.ts", "src/main/webapp/app/exercises/programming/shared/instructions-render/service/programming-exercise-plant-uml.service.ts", "src/main/webapp/app/exercises/programming/shared/instructions-render/extensions/programming-exercise-plant-uml.extension.ts", "src/main/webapp/app/exercises/programming/shared/instructions-render/task/programming-exercise-instruction-task-status.component.ts", "src/main/webapp/app/exercises/programming/shared/instructions-render/task/programming-exercise-instruction-task-status.component.html", "src/main/webapp/app/exercises/programming/shared/instructions-render/step-wizard/programming-exercise-instruction-step-wizard.component.ts", "src/main/webapp/app/exercises/programming/shared/instructions-render/step-wizard/programming-exercise-instruction-step-wizard.component.html", "src/main/webapp/app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component.ts", "src/main/webapp/app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { ProgrammingExerciseTestCase } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { Result } from 'app/entities/result.model';\r\n\r\n/**\r\n * Enumeration defining state of the test case.\r\n */\r\nexport enum TestCaseState {\r\n    NOT_EXECUTED = 'NOT_EXECUTED',\r\n    SUCCESS = 'SUCCESS',\r\n    FAIL = 'FAIL',\r\n    NO_RESULT = 'NO_RESULT',\r\n}\r\n\r\nexport type TaskResult = {\r\n    testCaseState: TestCaseState;\r\n    detailed: {\r\n        successfulTests: number[];\r\n        failedTests: number[];\r\n        notExecutedTests: number[];\r\n    };\r\n};\r\n\r\nconst testIdRegex = /<testid>(\\d+)<\\/testid>/;\r\nconst testSplitRegex = /,(?![^(]*?\\))/;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExerciseInstructionService {\r\n    /**\r\n     * @function testStatusForTask\r\n     * @desc Callback function for renderers to set the appropriate test status.\r\n     * @param testIds all test case ids that are included into the task.\r\n     * @param latestResult the result to check for if the tests were successful.\r\n     */\r\n    public testStatusForTask = (testIds: number[], latestResult?: Result): TaskResult => {\r\n        if (latestResult?.successful && (!latestResult.feedbacks || !latestResult.feedbacks.length) && testIds) {\r\n            // Case 1: Submission fulfills all test cases and there are no feedbacks (legacy case), no further checking needed.\r\n            return { testCaseState: TestCaseState.SUCCESS, detailed: { successfulTests: testIds, failedTests: [], notExecutedTests: [] } };\r\n        }\r\n\r\n        if (latestResult?.feedbacks?.length) {\r\n            // Case 2: At least one test case is not successful, tests need to checked to find out if they were not fulfilled\r\n            const { failed, notExecuted, successful } = this.separateTests(testIds, latestResult);\r\n\r\n            let testCaseState;\r\n            if (failed.length > 0) {\r\n                testCaseState = TestCaseState.FAIL;\r\n            } else if (notExecuted.length > 0 || testIds.length === 0) {\r\n                testCaseState = TestCaseState.NOT_EXECUTED;\r\n            } else {\r\n                testCaseState = TestCaseState.SUCCESS;\r\n            }\r\n            return { testCaseState, detailed: { successfulTests: successful, failedTests: failed, notExecutedTests: notExecuted } };\r\n        } else {\r\n            // Case 3: There are no results\r\n            return { testCaseState: TestCaseState.NO_RESULT, detailed: { successfulTests: [], failedTests: [], notExecutedTests: testIds } };\r\n        }\r\n    };\r\n\r\n    private separateTests(tests: number[], latestResult: Result) {\r\n        return tests.reduce(\r\n            (acc, testId) => {\r\n                const feedback = latestResult?.feedbacks?.find((feedback) => feedback.testCase?.id === testId);\r\n\r\n                return {\r\n                    failed: feedback?.positive === false ? [...acc.failed, testId] : acc.failed,\r\n                    successful: feedback?.positive === true ? [...acc.successful, testId] : acc.successful,\r\n                    notExecuted: feedback?.positive === undefined ? [...acc.notExecuted, testId] : acc.notExecuted,\r\n                };\r\n            },\r\n            { failed: [], successful: [], notExecuted: [] },\r\n        );\r\n    }\r\n\r\n    public convertTestListToIds(testList: string, testCases: ProgrammingExerciseTestCase[] | undefined): number[] {\r\n        // If there are test names, e.g., during the markdown preview, map the test to its corresponding id using the given testCases array.\r\n        // Otherwise, use the id directly provided within the <testid> section.\r\n        // split the tests by \",\" only when there is not a closing bracket without a previous opening bracket\r\n        return testList\r\n            .split(testSplitRegex)\r\n            .map((text) => text.trim())\r\n            .map((text) => {\r\n                // -1 to indicate a not found test\r\n                return this.convertProblemStatementTextToTestId(text, testCases) ?? -1;\r\n            });\r\n    }\r\n\r\n    public convertProblemStatementTextToTestId(test: string, testCases?: ProgrammingExerciseTestCase[]): number | undefined {\r\n        // If the text contains <testid> and </testid>, directly use the number inside\r\n        const match = testIdRegex.exec(test);\r\n        if (match) {\r\n            // If there already is an id, return it directly\r\n            return parseInt(match[1]);\r\n        }\r\n        // otherwise find its corresponding id by the test case name\r\n        return testCases?.find((testCase) => testCase.testName === test)?.id;\r\n    }\r\n}\r\n", "import { Injectable, effect, inject } from '@angular/core';\r\nimport { HttpClient, HttpParameterCodec, HttpParams } from '@angular/common/http';\r\nimport { Cacheable } from 'ts-cacheable';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Theme, ThemeService } from 'app/core/theme/theme.service';\r\n\r\nconst themeChangedSubject = new Subject<void>();\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExercisePlantUmlService {\r\n    private resourceUrl = 'api/programming/plantuml';\r\n    private encoder: HttpParameterCodec;\r\n\r\n    private readonly themeService = inject(ThemeService);\r\n    private readonly http = inject(HttpClient);\r\n\r\n    /**\r\n     * Cacheable configuration\r\n     */\r\n\r\n    constructor() {\r\n        this.encoder = new HttpUrlCustomEncoder();\r\n        effect(() => {\r\n            // Apply the theme as soon as the currentTheme changes\r\n            this.themeService.currentTheme();\r\n            themeChangedSubject.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Requests the plantuml png file as arraybuffer and converts it to base64.\r\n     * @param plantUml - definition obtained by parsing the README markdown file.\r\n     *\r\n     * Note: we cache up to 100 results in 1 hour so that they do not need to be loaded several time\r\n     */\r\n    @Cacheable({\r\n        /** Cacheable configuration **/\r\n        maxCacheCount: 100,\r\n        maxAge: 3600000, // ms\r\n        slidingExpiration: true,\r\n        cacheBusterObserver: themeChangedSubject, // evict cache on theme change\r\n    })\r\n    getPlantUmlImage(plantUml: string) {\r\n        return this.http\r\n            .get(`${this.resourceUrl}/png`, {\r\n                params: new HttpParams({ encoder: this.encoder }).set('plantuml', plantUml).set('useDarkTheme', this.themeService.currentTheme() === Theme.DARK),\r\n                responseType: 'arraybuffer',\r\n            })\r\n            .pipe(map((res) => this.convertPlantUmlResponseToBase64(res)));\r\n    }\r\n\r\n    /**\r\n     * Requests the plantuml svg as string.\r\n     * @param plantUml - definition obtained by parsing the README markdown file.\r\n     *\r\n     * Note: we cache up to 100 results in 1 hour so that they do not need to be loaded several time\r\n     */\r\n    @Cacheable({\r\n        /** Cacheable configuration **/\r\n        maxCacheCount: 100,\r\n        maxAge: 3600000, // ms\r\n        slidingExpiration: true,\r\n        cacheBusterObserver: themeChangedSubject, // evict cache on theme change\r\n    })\r\n    getPlantUmlSvg(plantUml: string): Observable<string> {\r\n        return this.http.get(`${this.resourceUrl}/svg`, {\r\n            params: new HttpParams({ encoder: this.encoder }).set('plantuml', plantUml).set('useDarkTheme', this.themeService.currentTheme() === Theme.DARK),\r\n            responseType: 'text',\r\n        });\r\n    }\r\n\r\n    private convertPlantUmlResponseToBase64(res: any): string {\r\n        return Buffer.from(res, 'binary').toString('base64');\r\n    }\r\n}\r\n\r\n/**\r\n * @class HttpUrlCustomEncoder\r\n * @desc Custom HttpParamEncoder implementation which defaults to using encodeURIComponent to encode params\r\n */\r\nexport class HttpUrlCustomEncoder implements HttpParameterCodec {\r\n    /**\r\n     * Encodes key.\r\n     * @param k - key to be encoded.\r\n     */\r\n    encodeKey(k: string): string {\r\n        return encodeURIComponent(k);\r\n    }\r\n\r\n    /**\r\n     * Encodes value.\r\n     * @param v - value to be encoded.\r\n     */\r\n    encodeValue(v: string): string {\r\n        return encodeURIComponent(v);\r\n    }\r\n\r\n    /**\r\n     * Decodes key.\r\n     * @param k - key to be decoded.\r\n     */\r\n    decodeKey(k: string): string {\r\n        return decodeURIComponent(k);\r\n    }\r\n\r\n    /**\r\n     * Decodes value.\r\n     * @param v - value to be decoded.\r\n     */\r\n    decodeValue(v: string) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { ProgrammingExerciseTestCase } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ArtemisTextReplacementPlugin } from 'app/shared/markdown-editor/extensions/ArtemisTextReplacementPlugin';\r\nimport { escapeStringForUseInRegex } from 'app/shared/util/global.utils';\r\nimport { Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ProgrammingExerciseInstructionService, TestCaseState } from 'app/exercises/programming/shared/instructions-render/service/programming-exercise-instruction.service';\r\nimport { ProgrammingExercisePlantUmlService } from 'app/exercises/programming/shared/instructions-render/service/programming-exercise-plant-uml.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport DOMPurify from 'dompurify';\r\n\r\n// This regex is the same as in the server: ProgrammingExerciseTaskService.java\r\nconst testsColorRegex = /testsColor\\((\\s*[^()\\s]+(\\([^()]*\\))?)\\)/g;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExercisePlantUmlExtensionWrapper extends ArtemisTextReplacementPlugin {\r\n    private programmingExerciseInstructionService = inject(ProgrammingExerciseInstructionService);\r\n    private plantUmlService = inject(ProgrammingExercisePlantUmlService);\r\n\r\n    private latestResult?: Result;\r\n    private testCases?: ProgrammingExerciseTestCase[];\r\n    private injectableElementsFoundSubject = new Subject<() => void>();\r\n\r\n    // unique index, even if multiple plant uml diagrams are shown from different problem statements on the same page (in different tabs)\r\n    private plantUmlIndex = 0;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Sets latest result according to parameter.\r\n     * @param result - either a result or undefined.\r\n     */\r\n    public setLatestResult(result?: Result) {\r\n        this.latestResult = result;\r\n    }\r\n\r\n    public setTestCases(testCases?: ProgrammingExerciseTestCase[]) {\r\n        this.testCases = testCases;\r\n    }\r\n\r\n    /**\r\n     * Subscribes to injectableElementsFoundSubject.\r\n     */\r\n    subscribeForInjectableElementsFound() {\r\n        return this.injectableElementsFoundSubject.asObservable();\r\n    }\r\n\r\n    /**\r\n     * For the stringified plantUml provided, render the plantUml on the server and inject it into the html.\r\n     * @param plantUml a stringified version of one plantUml.\r\n     * @param index the index of the plantUml in html\r\n     */\r\n    private loadAndInjectPlantUml(plantUml: string, index: number) {\r\n        this.plantUmlService\r\n            .getPlantUmlSvg(plantUml)\r\n            .pipe(\r\n                tap((plantUmlSvg: string) => {\r\n                    const plantUmlHtmlContainer = document.getElementById(`plantUml-${index}`);\r\n                    if (plantUmlHtmlContainer) {\r\n                        // We need to sanitize the received svg as it could contain malicious code in a script tag.\r\n                        plantUmlHtmlContainer.innerHTML = DOMPurify.sanitize(plantUmlSvg);\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * The extension provides a custom rendering mechanism for embedded plantUml diagrams.\r\n     * The mechanism works as follows:\r\n     * 1) Find (multiple) embedded plantUml diagrams based on a regex (startuml, enduml).\r\n     * 2) Replace the whole plantUml with a simple plantUml div container and a unique placeholder id\r\n     * 3) Add colors for test results in the plantUml (red, green, grey)\r\n     * 4) Send the plantUml content to the server for rendering a svg (the result will be cached for performance reasons)\r\n     * 5) Inject the computed svg for the plantUml (from the server) into the plantUml div container based on the unique placeholder id (see step 2)\r\n     */\r\n    replaceText(text: string): string {\r\n        const idPlaceholder = '%idPlaceholder%';\r\n        // E.g. [task][Implement BubbleSort](testBubbleSort)\r\n        const plantUmlRegex = /@startuml([^@]*)@enduml/g;\r\n        // E.g. Implement BubbleSort, testBubbleSort\r\n        const plantUmlContainer = `<div class=\"mb-4\" id=\"plantUml-${idPlaceholder}\"></div>`;\r\n        // Replace test status markers.\r\n        const plantUmls = text.match(plantUmlRegex) ?? [];\r\n        // Assign unique ids to uml data structure at the beginning.\r\n        const plantUmlsIndexed = plantUmls.map((plantUml) => {\r\n            const nextIndex = this.plantUmlIndex;\r\n            // increase the global unique index so that the next plantUml gets a unique global id\r\n            this.plantUmlIndex++;\r\n            return { plantUmlId: nextIndex, plantUml };\r\n        });\r\n        // custom markdown to html rendering: replace the plantUml in the markdown with a simple <div></div> container with a unique id placeholder\r\n        // with the global unique id so that we can find the plantUml later on, when it was rendered, and then inject the 'actual' inner html (actually a svg image)\r\n        const replacedText = plantUmlsIndexed.reduce((acc: string, umlIndexed: { plantUmlId: number; plantUml: string }): string => {\r\n            return acc.replace(new RegExp(escapeStringForUseInRegex(umlIndexed.plantUml), 'g'), plantUmlContainer.replace(idPlaceholder, umlIndexed.plantUmlId.toString()));\r\n        }, text);\r\n        // before we send the plantUml to the server for rendering, we need to inject the current test status so that the colors can be adapted\r\n        // (green == implemented, red == not yet implemented, grey == unknown)\r\n        const plantUmlsValidated = plantUmlsIndexed.map((plantUmlIndexed: { plantUmlId: number; plantUml: string }) => {\r\n            plantUmlIndexed.plantUml = plantUmlIndexed.plantUml.replace(testsColorRegex, (match: string, capture: string) => {\r\n                const tests = this.programmingExerciseInstructionService.convertTestListToIds(capture, this.testCases);\r\n                const { testCaseState } = this.programmingExerciseInstructionService.testStatusForTask(tests, this.latestResult);\r\n                switch (testCaseState) {\r\n                    case TestCaseState.SUCCESS:\r\n                        return 'green';\r\n                    case TestCaseState.FAIL:\r\n                        return 'red';\r\n                    default:\r\n                        return 'grey';\r\n                }\r\n            });\r\n            return plantUmlIndexed;\r\n        });\r\n        // send the adapted plantUml to the server for rendering and inject the result into the html DOM based on the unique plantUml id\r\n        this.injectableElementsFoundSubject.next(() => {\r\n            plantUmlsValidated.forEach((plantUmlIndexed: { plantUmlId: number; plantUml: string }) => {\r\n                this.loadAndInjectPlantUml(plantUmlIndexed.plantUml, plantUmlIndexed.plantUmlId);\r\n            });\r\n        });\r\n        return replacedText;\r\n    }\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { faCheckCircle, faCircleDot, faTimesCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ProgrammingExerciseInstructionService, TestCaseState } from 'app/exercises/programming/shared/instructions-render/service/programming-exercise-instruction.service';\r\nimport { FeedbackComponent } from 'app/exercises/shared/feedback/feedback.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { SafeHtmlPipe } from 'app/shared/pipes/safe-html.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instructions-task-status',\r\n    templateUrl: './programming-exercise-instruction-task-status.component.html',\r\n    styleUrls: ['./programming-exercise-instruction-task-status.scss'],\r\n    imports: [FaIconComponent, ArtemisTranslatePipe, SafeHtmlPipe],\r\n})\r\nexport class ProgrammingExerciseInstructionTaskStatusComponent {\r\n    private programmingExerciseInstructionService = inject(ProgrammingExerciseInstructionService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    TestCaseState = TestCaseState;\r\n    translationBasePath = 'artemisApp.editor.testStatusLabels.';\r\n\r\n    @Input() taskName: string;\r\n\r\n    /**\r\n     * array of test ids\r\n     */\r\n    @Input()\r\n    get testIds() {\r\n        return this.testIdsValue;\r\n    }\r\n    @Input() exercise: Exercise;\r\n    @Input() latestResult?: Result;\r\n\r\n    testIdsValue: number[];\r\n    testCaseState: TestCaseState;\r\n\r\n    /**\r\n     * Arrays of test case ids, grouped by their status in the given result.\r\n     */\r\n    successfulTests: number[];\r\n    notExecutedTests: number[];\r\n    failedTests: number[];\r\n\r\n    hasMessage: boolean;\r\n\r\n    // Icons\r\n    faCircleDot = faCircleDot;\r\n    farCheckCircle = faCheckCircle;\r\n    farTimesCircle = faTimesCircle;\r\n\r\n    set testIds(testIds: number[]) {\r\n        this.testIdsValue = testIds;\r\n        const {\r\n            testCaseState,\r\n            detailed: { successfulTests, notExecutedTests, failedTests },\r\n        } = this.programmingExerciseInstructionService.testStatusForTask(this.testIds, this.latestResult);\r\n        this.testCaseState = testCaseState;\r\n        this.successfulTests = successfulTests;\r\n        this.notExecutedTests = notExecutedTests;\r\n        this.failedTests = failedTests;\r\n        this.hasMessage = this.hasTestMessage(testIds);\r\n    }\r\n\r\n    /**\r\n     * Checks if any of the feedbacks have a detailText associated to them.\r\n     * @param testIds the test case ids that should be checked for\r\n     */\r\n    private hasTestMessage(testIds: number[]): boolean {\r\n        if (!this.latestResult?.feedbacks) {\r\n            return false;\r\n        }\r\n        const feedbacks = this.latestResult.feedbacks;\r\n        return testIds.some((testId: number) => feedbacks.find((feedback) => feedback.testCase?.id === testId && feedback.detailText));\r\n    }\r\n\r\n    /**\r\n     * Opens the FeedbackComponent as popup. Displays test results.\r\n     */\r\n    public showDetailsForTests() {\r\n        if (!this.latestResult) {\r\n            return;\r\n        }\r\n        const modalRef = this.modalService.open(FeedbackComponent, { keyboard: true, size: 'lg' });\r\n        const componentInstance = modalRef.componentInstance as FeedbackComponent;\r\n        componentInstance.exercise = this.exercise;\r\n        componentInstance.result = this.latestResult;\r\n        componentInstance.feedbackFilter = this.testIds;\r\n        componentInstance.exerciseType = ExerciseType.PROGRAMMING;\r\n        componentInstance.taskName = this.taskName;\r\n        componentInstance.numberOfNotExecutedTests = this.notExecutedTests.length;\r\n    }\r\n}\r\n", "<div class=\"guided-tour\" [class.success]=\"testCaseState === TestCaseState.SUCCESS\" [class.failed]=\"testCaseState === TestCaseState.FAIL\">\r\n    @if (testCaseState === TestCaseState.SUCCESS) {\r\n        <fa-icon [icon]=\"farCheckCircle\" size=\"lg\" class=\"test-icon text-success\" />\r\n    }\r\n    @if (testCaseState === TestCaseState.FAIL) {\r\n        <fa-icon [icon]=\"farTimesCircle\" size=\"lg\" class=\"test-icon text-danger\" />\r\n    }\r\n    @if (testCaseState === TestCaseState.NO_RESULT || testCaseState === TestCaseState.NOT_EXECUTED) {\r\n        <fa-icon [icon]=\"faCircleDot\" size=\"lg\" class=\"test-icon text-secondary\" />\r\n    }\r\n    @if (taskName) {\r\n        <span class=\"task-name\" [innerHTML]=\"taskName | safeHtml\"></span>\r\n    }\r\n    @if (latestResult && latestResult.feedbacks && latestResult.feedbacks.length && testIds.length) {\r\n        <span\r\n            class=\"guided-tour test-status--linked\"\r\n            [class]=\"testIds?.length === successfulTests.length ? 'text-success' : failedTests.length ? 'text-danger' : 'text-secondary'\"\r\n            [innerHTML]=\"translationBasePath + 'totalTestsPassing' | artemisTranslate: { totalTests: testIds.length, passedTests: successfulTests.length }\"\r\n            (click)=\"showDetailsForTests()\"\r\n        ></span>\r\n    } @else {\r\n        <span class=\"text-secondary\" [innerHTML]=\"translationBasePath + (testIds.length ? 'noResult' : 'noTests') | artemisTranslate\"></span>\r\n    }\r\n    <!-- There are no results at all, build error or never executed.-->\r\n</div>\r\n", "import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\r\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ProgrammingExerciseInstructionService, TestCaseState } from 'app/exercises/programming/shared/instructions-render/service/programming-exercise-instruction.service';\r\nimport { TaskArray } from 'app/exercises/programming/shared/instructions-render/task/programming-exercise-task.model';\r\nimport { FeedbackComponent } from 'app/exercises/shared/feedback/feedback.component';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { faCheck, faCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instructions-step-wizard',\r\n    templateUrl: './programming-exercise-instruction-step-wizard.component.html',\r\n    styleUrls: ['./programming-exercise-instruction-step-wizard.scss'],\r\n    imports: [TranslateDirective, NgbTooltip, FaIconComponent],\r\n})\r\nexport class ProgrammingExerciseInstructionStepWizardComponent implements OnChanges {\r\n    private modalService = inject(NgbModal);\r\n    private instructionService = inject(ProgrammingExerciseInstructionService);\r\n\r\n    TestCaseState = TestCaseState;\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() latestResult?: Result;\r\n    @Input() tasks: TaskArray;\r\n\r\n    steps: Array<{ done: TestCaseState; title: string; testIds: number[] }>;\r\n\r\n    // Icons\r\n    faTimes = faTimes;\r\n    faCheck = faCheck;\r\n    faCircle = faCircle;\r\n\r\n    /**\r\n     * Life cycle hook called by Angular to indicate that changes are detected.\r\n     * @param changes - change that is detected.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ((changes.tasks && this.tasks) || (this.tasks && changes.latestResult)) {\r\n            this.steps = this.tasks.map(({ taskName, testIds }) => ({\r\n                done: this.instructionService.testStatusForTask(testIds, this.latestResult).testCaseState,\r\n                title: taskName,\r\n                testIds,\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens the FeedbackComponent as popup; displays test results\r\n     * @param {string[]} tests - Identifies the testcase\r\n     * @param taskName - the name of the selected task\r\n     */\r\n    public showDetailsForTests(tests: number[], taskName: string) {\r\n        if (!this.latestResult || !tests.length) {\r\n            return;\r\n        }\r\n        const {\r\n            detailed: { notExecutedTests },\r\n        } = this.instructionService.testStatusForTask(tests, this.latestResult);\r\n        const modalRef = this.modalService.open(FeedbackComponent, { keyboard: true, size: 'lg' });\r\n        const componentInstance = modalRef.componentInstance as FeedbackComponent;\r\n        componentInstance.exercise = this.exercise;\r\n        componentInstance.result = this.latestResult;\r\n        componentInstance.feedbackFilter = tests;\r\n        componentInstance.exerciseType = ExerciseType.PROGRAMMING;\r\n        componentInstance.taskName = taskName;\r\n        componentInstance.numberOfNotExecutedTests = notExecutedTests.length;\r\n    }\r\n}\r\n", "<div class=\"card-second-header\" [hidden]=\"!steps?.length\">\r\n    <div class=\"stepwizard\">\r\n        <div class=\"stepwizard-title pe-3\" jhiTranslate=\"artemisApp.programmingExercise.problemStatement.tasksOfExercise\"></div>\r\n        <div class=\"stepwizard-row position-relative\">\r\n            <hr class=\"stepwizard-row-line\" />\r\n            @for (step of steps; let i = $index; track i) {\r\n                <div class=\"stepwizard-step\">\r\n                    <!--The css class test-passing removes the cursor icon and the hover effects from passing test circles-->\r\n                    <div\r\n                        [ngbTooltip]=\"step.title\"\r\n                        class=\"btn btn-circle\"\r\n                        [class.stepwizard-step--success]=\"step.done === TestCaseState.SUCCESS\"\r\n                        [class.stepwizard-step--failed]=\"step.done === TestCaseState.FAIL\"\r\n                        [class.stepwizard-step--not-executed]=\"step.done === TestCaseState.NOT_EXECUTED\"\r\n                        [class.stepwizard-step--no-result]=\"step.done === TestCaseState.NO_RESULT\"\r\n                        (click)=\"showDetailsForTests(step.testIds, step.title)\"\r\n                    >\r\n                        @if (step.done === TestCaseState.SUCCESS) {\r\n                            <fa-icon [icon]=\"faCheck\" size=\"lg\" class=\"text-success\" />\r\n                        }\r\n                        @if (step.done === TestCaseState.FAIL) {\r\n                            <fa-icon [icon]=\"faTimes\" size=\"lg\" class=\"text-danger\" />\r\n                        }\r\n                        @if (step.done === TestCaseState.NOT_EXECUTED || step.done === TestCaseState.NO_RESULT) {\r\n                            <fa-icon [icon]=\"faCircle\" size=\"lg\" class=\"not-done\" />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import {\r\n    ApplicationRef,\r\n    Component,\r\n    EnvironmentInjector,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewContainerRef,\r\n    createComponent,\r\n    inject,\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { ThemeService } from 'app/core/theme/theme.service';\r\nimport { ProgrammingExerciseTestCase } from 'app/entities/programming/programming-exercise-test-case.model';\r\nimport { ProgrammingExerciseGradingService } from 'app/exercises/programming/manage/services/programming-exercise-grading.service';\r\nimport type { PluginSimple } from 'markdown-it';\r\nimport { catchError, filter, map, mergeMap, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, Subscription, merge, of } from 'rxjs';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { ProgrammingExerciseTaskExtensionWrapper, taskRegex } from './extensions/programming-exercise-task.extension';\r\nimport { ProgrammingExercisePlantUmlExtensionWrapper } from 'app/exercises/programming/shared/instructions-render/extensions/programming-exercise-plant-uml.extension';\r\nimport { TaskArray } from 'app/exercises/programming/shared/instructions-render/task/programming-exercise-task.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { problemStatementHasChanged } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { findLatestResult } from 'app/shared/util/utils';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { hasParticipationChanged } from 'app/exercises/shared/participation/participation.utils';\r\nimport { ExamExerciseUpdateHighlighterComponent } from 'app/exam/participate/exercises/exam-exercise-update-highlighter/exam-exercise-update-highlighter.component';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport diff from 'html-diff-ts';\r\nimport { ProgrammingExerciseInstructionService } from 'app/exercises/programming/shared/instructions-render/service/programming-exercise-instruction.service';\r\nimport { escapeStringForUseInRegex } from 'app/shared/util/global.utils';\r\nimport { ProgrammingExerciseInstructionTaskStatusComponent } from 'app/exercises/programming/shared/instructions-render/task/programming-exercise-instruction-task-status.component';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { ProgrammingExerciseInstructionStepWizardComponent } from './step-wizard/programming-exercise-instruction-step-wizard.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instructions',\r\n    templateUrl: './programming-exercise-instruction.component.html',\r\n    styleUrls: ['./programming-exercise-instruction.scss'],\r\n    imports: [ProgrammingExerciseInstructionStepWizardComponent, ExamExerciseUpdateHighlighterComponent, FaIconComponent],\r\n})\r\nexport class ProgrammingExerciseInstructionComponent implements OnChanges, OnDestroy {\r\n    private viewContainerRef = inject(ViewContainerRef);\r\n    private resultService = inject(ResultService);\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n    private programmingExerciseTaskWrapper = inject(ProgrammingExerciseTaskExtensionWrapper);\r\n    private programmingExercisePlantUmlWrapper = inject(ProgrammingExercisePlantUmlExtensionWrapper);\r\n    private programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private programmingExerciseGradingService = inject(ProgrammingExerciseGradingService);\r\n    private sanitizer = inject(DomSanitizer);\r\n    private programmingExerciseInstructionService = inject(ProgrammingExerciseInstructionService);\r\n    private appRef = inject(ApplicationRef);\r\n    private injector = inject(EnvironmentInjector);\r\n    private themeService = inject(ThemeService);\r\n\r\n    @Input() public exercise: ProgrammingExercise;\r\n    @Input() public participation: Participation;\r\n    @Input() generateHtmlEvents: Observable<void>;\r\n    @Input() personalParticipation: boolean;\r\n\r\n    // Emits an event if the instructions are not available via the problemStatement\r\n    @Output() public onNoInstructionsAvailable = new EventEmitter();\r\n\r\n    @ViewChild(ExamExerciseUpdateHighlighterComponent) examExerciseUpdateHighlighterComponent: ExamExerciseUpdateHighlighterComponent;\r\n\r\n    private problemStatement: string;\r\n    private participationSubscription?: Subscription;\r\n    private testCasesSubscription?: Subscription;\r\n\r\n    public isInitial = true;\r\n    public isLoading: boolean;\r\n    latestResultValue?: Result;\r\n    // unique index, even if multiple tasks are shown from different problem statements on the same page (in different tabs)\r\n    private taskIndex = 0;\r\n    public tasks: TaskArray;\r\n\r\n    get latestResult() {\r\n        return this.latestResultValue;\r\n    }\r\n\r\n    set latestResult(result: Result | undefined) {\r\n        this.latestResultValue = result;\r\n        this.programmingExercisePlantUmlWrapper.setLatestResult(this.latestResultValue);\r\n        this.programmingExercisePlantUmlWrapper.setTestCases(this.testCases);\r\n    }\r\n\r\n    public renderedMarkdown: SafeHtml;\r\n    private injectableContentForMarkdownCallbacks: Array<() => void> = [];\r\n\r\n    markdownExtensions: PluginSimple[];\r\n    private injectableContentFoundSubscription: Subscription;\r\n    private generateHtmlSubscription: Subscription;\r\n    private testCases?: ProgrammingExerciseTestCase[];\r\n    private themeChangeSubscription = toObservable(this.themeService.currentTheme).subscribe(() => {\r\n        if (!this.isInitial) {\r\n            this.updateMarkdown();\r\n        }\r\n    });\r\n\r\n    // Icons\r\n    faSpinner = faSpinner;\r\n\r\n    constructor() {\r\n        this.programmingExerciseTaskWrapper.viewContainerRef = this.viewContainerRef;\r\n    }\r\n\r\n    /**\r\n     * If the participation changes, the participation's instructions need to be loaded and the\r\n     * subscription for the participation's result needs to be set up.\r\n     * @param changes\r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (this.exercise?.isAtLeastTutor) {\r\n            if (this.testCasesSubscription) {\r\n                this.testCasesSubscription.unsubscribe();\r\n            }\r\n            this.testCasesSubscription = this.programmingExerciseGradingService\r\n                .getTestCases(this.exercise.id!)\r\n                .pipe(\r\n                    tap((testCases) => {\r\n                        this.testCases = testCases;\r\n                    }),\r\n                )\r\n                .subscribe();\r\n        }\r\n        of(!!this.markdownExtensions)\r\n            .pipe(\r\n                // Set up the markdown extensions if they are not set up yet so that tasks, UMLs, etc. can be parsed.\r\n                tap((markdownExtensionsInitialized: boolean) => !markdownExtensionsInitialized && this.setupMarkdownSubscriptions()),\r\n                // If the participation has changed, set up the websocket subscriptions.\r\n                map(() => hasParticipationChanged(changes)),\r\n                tap((participationHasChanged: boolean) => {\r\n                    if (participationHasChanged) {\r\n                        this.isInitial = true;\r\n                        if (this.generateHtmlSubscription) {\r\n                            this.generateHtmlSubscription.unsubscribe();\r\n                        }\r\n                        if (this.generateHtmlEvents) {\r\n                            this.generateHtmlEvents.subscribe(() => {\r\n                                this.updateMarkdown();\r\n                            });\r\n                        }\r\n                        this.setupResultWebsocket();\r\n                    }\r\n                }),\r\n                switchMap((participationHasChanged: boolean) => {\r\n                    // If the exercise is not loaded, the instructions can't be loaded and so there is no point in loading the results, etc, yet.\r\n                    if (!this.isLoading && this.exercise && this.participation && (this.isInitial || participationHasChanged)) {\r\n                        this.isLoading = true;\r\n                        return of(this.exercise.problemStatement).pipe(\r\n                            // If no instructions can be loaded, abort pipe and hide the instruction panel\r\n                            tap((problemStatement) => {\r\n                                if (!problemStatement) {\r\n                                    this.onNoInstructionsAvailable.emit();\r\n                                    this.isLoading = false;\r\n                                    this.isInitial = false;\r\n                                    return of(undefined);\r\n                                }\r\n                            }),\r\n                            filter((problemStatement) => !!problemStatement),\r\n                            tap((problemStatement) => (this.problemStatement = problemStatement!)),\r\n                            switchMap(() => this.loadInitialResult()),\r\n                            tap((latestResult) => {\r\n                                this.latestResult = latestResult;\r\n                            }),\r\n                            tap(() => {\r\n                                this.updateMarkdown();\r\n                                this.isInitial = false;\r\n                                this.isLoading = false;\r\n                            }),\r\n                        );\r\n                    } else if (problemStatementHasChanged(changes) && this.problemStatement === undefined) {\r\n                        // Refreshes the state in the singleton task and uml extension service\r\n                        this.latestResult = this.latestResultValue;\r\n                        this.problemStatement = this.exercise.problemStatement!;\r\n                        this.updateMarkdown();\r\n                        return of(undefined);\r\n                    } else if (this.exercise && problemStatementHasChanged(changes)) {\r\n                        // Refreshes the state in the singleton task and uml extension service\r\n                        this.latestResult = this.latestResultValue;\r\n                        this.problemStatement = this.exercise.problemStatement!;\r\n                        return of(undefined);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Setup the markdown extensions for parsing the tasks and tests and subscriptions necessary to receive injectable content.\r\n     */\r\n    private setupMarkdownSubscriptions() {\r\n        this.markdownExtensions = [this.programmingExerciseTaskWrapper.getExtension(), this.programmingExercisePlantUmlWrapper.getExtension()];\r\n        if (this.injectableContentFoundSubscription) {\r\n            this.injectableContentFoundSubscription.unsubscribe();\r\n        }\r\n        this.injectableContentFoundSubscription = merge(this.programmingExercisePlantUmlWrapper.subscribeForInjectableElementsFound()).subscribe((injectableCallback) => {\r\n            this.injectableContentForMarkdownCallbacks = [...this.injectableContentForMarkdownCallbacks, injectableCallback];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set up the websocket for retrieving build results.\r\n     * Online updates the build logs if the result is new, otherwise doesn't react.\r\n     */\r\n    private setupResultWebsocket() {\r\n        if (this.participationSubscription) {\r\n            this.participationSubscription.unsubscribe();\r\n        }\r\n        this.participationSubscription = this.participationWebsocketService\r\n            .subscribeForLatestResultOfParticipation(this.participation.id!, this.personalParticipation, this.exercise.id!)\r\n            .pipe(filter((result) => !!result))\r\n            .subscribe((result: Result) => {\r\n                this.latestResult = result;\r\n                this.programmingExercisePlantUmlWrapper.setLatestResult(this.latestResult);\r\n                this.updateMarkdown();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Render the markdown into html.\r\n     */\r\n    updateMarkdown() {\r\n        // make sure that always the correct result is set, before updating markdown\r\n        // looks weird, but in setter of latestResult are setters of sub components invoked\r\n        this.latestResult = this.latestResultValue;\r\n\r\n        this.injectableContentForMarkdownCallbacks = [];\r\n        this.renderMarkdown();\r\n    }\r\n\r\n    renderUpdatedProblemStatement() {\r\n        this.updateMarkdown();\r\n    }\r\n\r\n    /**\r\n     * This method is used for initially loading the results so that the instructions can be rendered.\r\n     */\r\n    loadInitialResult(): Observable<Result | undefined> {\r\n        if (this.participation?.id && this.participation?.results?.length) {\r\n            // Get the result with the highest id (most recent result)\r\n            const latestResult = findLatestResult(this.participation.results);\r\n            if (!latestResult) {\r\n                return of(undefined);\r\n            }\r\n            latestResult.participation = this.participation;\r\n            return latestResult.feedbacks ? of(latestResult) : this.loadAndAttachResultDetails(latestResult);\r\n        } else if (this.participation && this.participation.id) {\r\n            // Only load results if the exercise already is in our database, otherwise there can be no build result anyway\r\n            return this.loadLatestResult();\r\n        } else {\r\n            return of(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve latest result for the participation/exercise/course combination.\r\n     * If there is no result, return undefined.\r\n     */\r\n    loadLatestResult(): Observable<Result | undefined> {\r\n        return this.programmingExerciseParticipationService.getLatestResultWithFeedback(this.participation.id!, true).pipe(\r\n            catchError(() => of(undefined)),\r\n            mergeMap((latestResult: Result) => (latestResult && !latestResult.feedbacks ? this.loadAndAttachResultDetails(latestResult) : of(latestResult))),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fetches details for the result (if we received one) and attach them to the result.\r\n     * Mutates the input parameter result.\r\n     * @param result - result to which instructions will be attached.\r\n     */\r\n    loadAndAttachResultDetails(result: Result): Observable<Result> {\r\n        const currentParticipation = result.participation ? result.participation : this.participation;\r\n        return this.resultService.getFeedbackDetailsForResult(currentParticipation.id!, result).pipe(\r\n            map((res) => res && res.body),\r\n            map((feedbacks: Feedback[]) => {\r\n                result.feedbacks = feedbacks;\r\n                return result;\r\n            }),\r\n            catchError(() => of(result)),\r\n        );\r\n    }\r\n\r\n    private renderMarkdown(): void {\r\n        // Highlight differences between previous and current markdown\r\n        if (\r\n            this.examExerciseUpdateHighlighterComponent?.showHighlightedDifferences &&\r\n            this.examExerciseUpdateHighlighterComponent.outdatedProblemStatement &&\r\n            this.examExerciseUpdateHighlighterComponent.updatedProblemStatement\r\n        ) {\r\n            const outdatedMarkdown = htmlForMarkdown(this.examExerciseUpdateHighlighterComponent.outdatedProblemStatement, this.markdownExtensions);\r\n            const updatedMarkdown = htmlForMarkdown(this.examExerciseUpdateHighlighterComponent.updatedProblemStatement, this.markdownExtensions);\r\n            const diffedMarkdown = diff(outdatedMarkdown, updatedMarkdown);\r\n            const markdownWithoutTasks = this.prepareTasks(diffedMarkdown);\r\n            const markdownWithTableStyles = this.addStylesForTables(markdownWithoutTasks);\r\n            this.renderedMarkdown = this.sanitizer.bypassSecurityTrustHtml(markdownWithTableStyles ?? markdownWithoutTasks);\r\n            // Differences between UMLs are ignored, and we only inject the current one\r\n            setTimeout(() => {\r\n                const injectUML = this.injectableContentForMarkdownCallbacks[this.injectableContentForMarkdownCallbacks.length - 1];\r\n                if (injectUML) {\r\n                    injectUML();\r\n                }\r\n                this.injectTasksIntoDocument();\r\n            }, 0);\r\n        } else if (this.exercise?.problemStatement) {\r\n            this.injectableContentForMarkdownCallbacks = [];\r\n            const renderedProblemStatement = htmlForMarkdown(this.exercise.problemStatement, this.markdownExtensions);\r\n            const markdownWithoutTasks = this.prepareTasks(renderedProblemStatement);\r\n            const markdownWithTableStyles = this.addStylesForTables(markdownWithoutTasks);\r\n            this.renderedMarkdown = this.sanitizer.bypassSecurityTrustHtml(markdownWithTableStyles ?? markdownWithoutTasks);\r\n            setTimeout(() => {\r\n                this.injectableContentForMarkdownCallbacks.forEach((callback) => {\r\n                    callback();\r\n                });\r\n                this.injectTasksIntoDocument();\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    addStylesForTables(markdownWithoutTasks: string): string | undefined {\r\n        if (!markdownWithoutTasks?.includes('<table')) {\r\n            return;\r\n        } else {\r\n            const parser = new DOMParser();\r\n            const doc = parser.parseFromString(markdownWithoutTasks as string, 'text/html');\r\n            const tables = doc.querySelectorAll('table');\r\n\r\n            tables.forEach((table) => {\r\n                table.style.maxWidth = '100%';\r\n                table.style.overflowX = 'scroll';\r\n                table.style.display = 'block';\r\n            });\r\n            return doc.body.innerHTML;\r\n        }\r\n    }\r\n\r\n    prepareTasks(problemStatementHtml: string) {\r\n        const tasks = Array.from(problemStatementHtml.matchAll(taskRegex));\r\n        if (!tasks) {\r\n            return problemStatementHtml;\r\n        }\r\n\r\n        this.tasks = tasks\r\n            // check that all groups (full match, name, tests) are present\r\n            .filter((testMatch) => testMatch?.length === 3)\r\n            .map((testMatch: RegExpMatchArray | null) => {\r\n                const nextIndex = this.taskIndex;\r\n                this.taskIndex++;\r\n                return {\r\n                    id: nextIndex,\r\n                    completeString: testMatch![0],\r\n                    taskName: testMatch![1],\r\n                    testIds: testMatch![2] ? this.programmingExerciseInstructionService.convertTestListToIds(testMatch![2], this.testCases) : [],\r\n                };\r\n            });\r\n\r\n        return this.tasks.reduce(\r\n            (acc: string, { completeString: task, id }): string =>\r\n                // Insert anchor divs into the text so that injectable elements can be inserted into them.\r\n                // Without class=\"d-flex\" the injected components height would be 0.\r\n                // Added zero-width space as content so the div actually consumes a line to prevent a <ol> display bug in Safari\r\n                acc.replace(new RegExp(escapeStringForUseInRegex(task), 'g'), `<div class=\"pe-${this.exercise.id}-task-${id.toString()} d-flex\">&#8203;</div>`),\r\n            problemStatementHtml,\r\n        );\r\n    }\r\n\r\n    private injectTasksIntoDocument = () => {\r\n        this.tasks.forEach(({ id, taskName, testIds }) => {\r\n            const taskHtmlContainers = document.getElementsByClassName(`pe-${this.exercise.id}-task-${id}`);\r\n\r\n            for (let i = 0; i < taskHtmlContainers.length; i++) {\r\n                const taskHtmlContainer = taskHtmlContainers[i];\r\n                this.createTaskComponent(taskHtmlContainer, taskName, testIds);\r\n            }\r\n        });\r\n    };\r\n\r\n    private createTaskComponent(taskHtmlContainer: Element, taskName: string, testIds: number[]) {\r\n        const componentRef = createComponent(ProgrammingExerciseInstructionTaskStatusComponent, {\r\n            hostElement: taskHtmlContainer,\r\n            environmentInjector: this.injector,\r\n        });\r\n        componentRef.instance.exercise = this.exercise;\r\n        componentRef.instance.taskName = taskName;\r\n        componentRef.instance.latestResult = this.latestResult;\r\n        componentRef.instance.testIds = testIds;\r\n        this.appRef.attachView(componentRef.hostView);\r\n        componentRef.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes from all subscriptions.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.participationSubscription) {\r\n            this.participationSubscription.unsubscribe();\r\n        }\r\n        if (this.generateHtmlSubscription) {\r\n            this.generateHtmlSubscription.unsubscribe();\r\n        }\r\n        if (this.injectableContentFoundSubscription) {\r\n            this.injectableContentFoundSubscription.unsubscribe();\r\n        }\r\n        if (this.testCasesSubscription) {\r\n            this.testCasesSubscription.unsubscribe();\r\n        }\r\n        if (this.themeChangeSubscription) {\r\n            this.themeChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n", "@if (!isLoading) {\r\n    <div class=\"instructions__content border-0\">\r\n        <jhi-programming-exercise-instructions-step-wizard [exercise]=\"exercise\" [latestResult]=\"latestResultValue\" [tasks]=\"tasks\" />\r\n        <!-- problem statement update & difference highlighter -->\r\n        @if (exercise && exercise.exerciseGroup) {\r\n            <jhi-exam-exercise-update-highlighter [exercise]=\"exercise\" (problemStatementUpdateEvent)=\"renderUpdatedProblemStatement()\" />\r\n        }\r\n        <!-- Rendered markdown will be inserted in this div -->\r\n        <div\r\n            id=\"programming-exercise-instructions-content\"\r\n            class=\"guided-tour instructions__content__markdown markdown-preview\"\r\n            [hidden]=\"!renderedMarkdown\"\r\n            [innerHtml]=\"renderedMarkdown\"\r\n        ></div>\r\n    </div>\r\n} @else {\r\n    <span id=\"programming-exercise-instructions-loading\" class=\"d-flex justify-content-center mt-2\"><fa-icon size=\"lg\" [icon]=\"faSpinner\" animation=\"spin\" /></span>\r\n}\r\n"],
  "mappings": "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",
  "names": ["TestCaseState", "testIdRegex", "testSplitRegex", "ProgrammingExerciseInstructionService", "testStatusForTask", "testIds", "latestResult", "successful", "feedbacks", "length", "testCaseState", "SUCCESS", "detailed", "successfulTests", "failedTests", "notExecutedTests", "failed", "notExecuted", "separateTests", "FAIL", "NOT_EXECUTED", "NO_RESULT", "tests", "reduce", "acc", "testId", "feedback", "find", "testCase", "id", "positive", "undefined", "convertTestListToIds", "testList", "testCases", "split", "map", "text", "trim", "convertProblemStatementTextToTestId", "test", "match", "exec", "parseInt", "testName", "factory", "\u0275fac", "providedIn", "themeChangedSubject", "Subject", "ProgrammingExercisePlantUmlService", "resourceUrl", "encoder", "themeService", "inject", "ThemeService", "http", "HttpClient", "constructor", "HttpUrlCustomEncoder", "effect", "currentTheme", "next", "getPlantUmlImage", "plantUml", "get", "params", "HttpParams", "set", "Theme", "DARK", "responseType", "pipe", "map", "res", "convertPlantUmlResponseToBase64", "getPlantUmlSvg", "Buffer", "from", "toString", "factory", "\u0275fac", "providedIn", "__decorate", "Cacheable", "maxCacheCount", "maxAge", "slidingExpiration", "cacheBusterObserver", "__metadata", "Observable", "encodeKey", "k", "encodeURIComponent", "encodeValue", "v", "decodeKey", "decodeURIComponent", "decodeValue", "testsColorRegex", "ProgrammingExercisePlantUmlExtensionWrapper", "ArtemisTextReplacementPlugin", "programmingExerciseInstructionService", "inject", "ProgrammingExerciseInstructionService", "plantUmlService", "ProgrammingExercisePlantUmlService", "latestResult", "testCases", "injectableElementsFoundSubject", "Subject", "plantUmlIndex", "constructor", "setLatestResult", "result", "setTestCases", "subscribeForInjectableElementsFound", "asObservable", "loadAndInjectPlantUml", "plantUml", "index", "getPlantUmlSvg", "pipe", "tap", "plantUmlSvg", "plantUmlHtmlContainer", "document", "getElementById", "innerHTML", "DOMPurify", "sanitize", "subscribe", "replaceText", "text", "idPlaceholder", "plantUmlRegex", "plantUmlContainer", "plantUmlsIndexed", "match", "map", "nextIndex", "plantUmlId", "replacedText", "reduce", "acc", "umlIndexed", "replace", "RegExp", "escapeStringForUseInRegex", "toString", "plantUmlsValidated", "plantUmlIndexed", "capture", "tests", "convertTestListToIds", "testCaseState", "testStatusForTask", "TestCaseState", "SUCCESS", "FAIL", "next", "forEach", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "farCheckCircle", "farTimesCircle", "faCircleDot", "\u0275\u0275pipeBind1", "taskName", "\u0275\u0275sanitizeHtml", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "showDetailsForTests", "\u0275\u0275elementEnd", "\u0275\u0275classMap", "testIds", "length", "successfulTests", "failedTests", "\u0275\u0275pipeBind2", "translationBasePath", "\u0275\u0275pureFunction2", "_c0", "ProgrammingExerciseInstructionTaskStatusComponent", "programmingExerciseInstructionService", "inject", "ProgrammingExerciseInstructionService", "modalService", "NgbModal", "TestCaseState", "testIdsValue", "exercise", "latestResult", "testCaseState", "notExecutedTests", "hasMessage", "faCheckCircle", "faTimesCircle", "detailed", "testStatusForTask", "hasTestMessage", "feedbacks", "some", "testId", "find", "feedback", "testCase", "id", "detailText", "componentInstance", "open", "FeedbackComponent", "keyboard", "size", "result", "feedbackFilter", "exerciseType", "ExerciseType", "PROGRAMMING", "numberOfNotExecutedTests", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseInstructionTaskStatusComponent_Conditional_2_Template", "ProgrammingExerciseInstructionTaskStatusComponent_Conditional_3_Template", "ProgrammingExerciseInstructionTaskStatusComponent_Conditional_4_Template", "ProgrammingExerciseInstructionTaskStatusComponent_Conditional_5_Template", "ProgrammingExerciseInstructionTaskStatusComponent_Conditional_6_Template", "ProgrammingExerciseInstructionTaskStatusComponent_Conditional_7_Template", "\u0275\u0275classProp", "SUCCESS", "FAIL", "\u0275\u0275conditional", "NO_RESULT", "NOT_EXECUTED", "FaIconComponent", "ArtemisTranslatePipe", "SafeHtmlPipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "faCheck", "faTimes", "faCircle", "\u0275\u0275elementStart", "\u0275\u0275listener", "step_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "showDetailsForTests", "testIds", "title", "\u0275\u0275template", "ProgrammingExerciseInstructionStepWizardComponent_For_11_Conditional_6_Template", "ProgrammingExerciseInstructionStepWizardComponent_For_11_Conditional_7_Template", "ProgrammingExerciseInstructionStepWizardComponent_For_11_Conditional_8_Template", "\u0275\u0275elementEnd", "\u0275\u0275classProp", "done", "TestCaseState", "SUCCESS", "FAIL", "NOT_EXECUTED", "NO_RESULT", "\u0275\u0275conditional", "ProgrammingExerciseInstructionStepWizardComponent", "modalService", "inject", "NgbModal", "instructionService", "ProgrammingExerciseInstructionService", "exercise", "latestResult", "tasks", "steps", "ngOnChanges", "changes", "map", "taskName", "testStatusForTask", "testCaseState", "tests", "length", "detailed", "notExecutedTests", "componentInstance", "open", "FeedbackComponent", "keyboard", "size", "result", "feedbackFilter", "exerciseType", "ExerciseType", "PROGRAMMING", "numberOfNotExecutedTests", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ProgrammingExerciseInstructionStepWizardComponent_For_11_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "TranslateDirective", "NgbTooltip", "FaIconComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "renderUpdatedProblemStatement", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "exercise", "\u0275\u0275element", "\u0275\u0275template", "ProgrammingExerciseInstructionComponent_Conditional_0_Conditional_6_Template", "latestResultValue", "tasks", "\u0275\u0275conditional", "exerciseGroup", "renderedMarkdown", "\u0275\u0275sanitizeHtml", "faSpinner", "ProgrammingExerciseInstructionComponent", "viewContainerRef", "inject", "ViewContainerRef", "resultService", "ResultService", "participationWebsocketService", "ParticipationWebsocketService", "programmingExerciseTaskWrapper", "ProgrammingExerciseTaskExtensionWrapper", "programmingExercisePlantUmlWrapper", "ProgrammingExercisePlantUmlExtensionWrapper", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "programmingExerciseGradingService", "ProgrammingExerciseGradingService", "sanitizer", "DomSanitizer", "programmingExerciseInstructionService", "ProgrammingExerciseInstructionService", "appRef", "ApplicationRef", "injector", "EnvironmentInjector", "themeService", "ThemeService", "participation", "generateHtmlEvents", "personalParticipation", "onNoInstructionsAvailable", "EventEmitter", "examExerciseUpdateHighlighterComponent", "problemStatement", "participationSubscription", "testCasesSubscription", "isInitial", "isLoading", "taskIndex", "latestResult", "result", "setLatestResult", "setTestCases", "testCases", "injectableContentForMarkdownCallbacks", "markdownExtensions", "injectableContentFoundSubscription", "generateHtmlSubscription", "themeChangeSubscription", "toObservable", "currentTheme", "subscribe", "updateMarkdown", "constructor", "ngOnChanges", "changes", "isAtLeastTutor", "unsubscribe", "getTestCases", "id", "pipe", "tap", "of", "markdownExtensionsInitialized", "setupMarkdownSubscriptions", "map", "hasParticipationChanged", "participationHasChanged", "setupResultWebsocket", "switchMap", "emit", "undefined", "filter", "loadInitialResult", "problemStatementHasChanged", "getExtension", "merge", "subscribeForInjectableElementsFound", "injectableCallback", "subscribeForLatestResultOfParticipation", "renderMarkdown", "results", "length", "findLatestResult", "feedbacks", "loadAndAttachResultDetails", "loadLatestResult", "getLatestResultWithFeedback", "catchError", "mergeMap", "currentParticipation", "getFeedbackDetailsForResult", "res", "body", "showHighlightedDifferences", "outdatedProblemStatement", "updatedProblemStatement", "outdatedMarkdown", "htmlForMarkdown", "updatedMarkdown", "diffedMarkdown", "diff", "markdownWithoutTasks", "prepareTasks", "markdownWithTableStyles", "addStylesForTables", "bypassSecurityTrustHtml", "setTimeout", "injectUML", "injectTasksIntoDocument", "renderedProblemStatement", "forEach", "callback", "includes", "doc", "DOMParser", "parseFromString", "tables", "querySelectorAll", "table", "style", "maxWidth", "overflowX", "display", "innerHTML", "problemStatementHtml", "Array", "from", "matchAll", "taskRegex", "testMatch", "nextIndex", "completeString", "taskName", "testIds", "convertTestListToIds", "reduce", "acc", "task", "replace", "RegExp", "escapeStringForUseInRegex", "toString", "taskHtmlContainers", "document", "getElementsByClassName", "i", "taskHtmlContainer", "createTaskComponent", "componentRef", "createComponent", "ProgrammingExerciseInstructionTaskStatusComponent", "hostElement", "environmentInjector", "instance", "attachView", "hostView", "changeDetectorRef", "detectChanges", "ngOnDestroy", "selectors", "viewQuery", "rf", "ctx", "ExamExerciseUpdateHighlighterComponent", "ProgrammingExerciseInstructionComponent_Conditional_0_Template", "ProgrammingExerciseInstructionComponent_Conditional_1_Template", "ProgrammingExerciseInstructionStepWizardComponent", "FaIconComponent", "styles"]
}
