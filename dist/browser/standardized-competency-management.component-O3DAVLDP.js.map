{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/standardized-competencies/standardized-competency-edit.component.ts", "src/main/webapp/app/admin/standardized-competencies/standardized-competency-edit.component.html", "src/main/webapp/app/admin/standardized-competencies/knowledge-area-edit.component.ts", "src/main/webapp/app/admin/standardized-competencies/knowledge-area-edit.component.html", "src/main/webapp/app/admin/standardized-competencies/standardized-competency-management.component.ts", "src/main/webapp/app/admin/standardized-competencies/standardized-competency-management.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { faBan, faPencil, faSave, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { KnowledgeArea, Source, StandardizedCompetencyDTO, StandardizedCompetencyValidators } from 'app/entities/competency/standardized-competency.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CompetencyTaxonomy } from 'app/entities/competency.model';\r\nimport { Observable } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { TaxonomySelectComponent } from 'app/course/competencies/taxonomy-select/taxonomy-select.component';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-standardized-competency-edit',\r\n    templateUrl: './standardized-competency-edit.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        ButtonComponent,\r\n        DeleteButtonDirective,\r\n        FaIconComponent,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MarkdownEditorMonacoComponent,\r\n        TaxonomySelectComponent,\r\n        HtmlForMarkdownPipe,\r\n    ],\r\n})\r\nexport class StandardizedCompetencyEditComponent {\r\n    private formBuilder = inject(FormBuilder);\r\n\r\n    // values for the knowledge area select\r\n    @Input() knowledgeAreas: KnowledgeArea[] = [];\r\n    // values for the source select\r\n    @Input() sources: Source[] = [];\r\n    @Input({ required: true }) set competency(competency: StandardizedCompetencyDTO) {\r\n        this._competency = competency;\r\n        this.form = this.formBuilder.nonNullable.group({\r\n            title: [competency.title, [Validators.required, Validators.maxLength(StandardizedCompetencyValidators.TITLE_MAX)]],\r\n            description: [competency.description, [Validators.maxLength(StandardizedCompetencyValidators.DESCRIPTION_MAX)]],\r\n            taxonomy: [competency.taxonomy],\r\n            knowledgeAreaId: [competency.knowledgeAreaId, [Validators.required]],\r\n            sourceId: [competency.sourceId],\r\n        });\r\n        if (!this.isEditing) {\r\n            this.form.disable();\r\n        }\r\n    }\r\n\r\n    get competency() {\r\n        return this._competency;\r\n    }\r\n\r\n    @Input() set isEditing(isEditing: boolean) {\r\n        this._isEditing = isEditing;\r\n        this.isEditingChange.emit(isEditing);\r\n        if (isEditing) {\r\n            this.form.enable();\r\n        } else {\r\n            this.form.disable();\r\n        }\r\n    }\r\n\r\n    get isEditing() {\r\n        return this._isEditing;\r\n    }\r\n\r\n    @Input() dialogError: Observable<string>;\r\n\r\n    @Output() onSave = new EventEmitter<StandardizedCompetencyDTO>();\r\n    @Output() onDelete = new EventEmitter<number>();\r\n    @Output() onClose = new EventEmitter<void>();\r\n    @Output() isEditingChange = new EventEmitter<boolean>();\r\n\r\n    private _isEditing: boolean;\r\n    private _competency: StandardizedCompetencyDTO;\r\n    protected form: FormGroup<{\r\n        title: FormControl<string | undefined>;\r\n        description: FormControl<string | undefined>;\r\n        taxonomy: FormControl<CompetencyTaxonomy | undefined>;\r\n        knowledgeAreaId: FormControl<number | undefined>;\r\n        sourceId: FormControl<number | undefined>;\r\n    }>;\r\n\r\n    // icons\r\n    protected readonly faPencil = faPencil;\r\n    protected readonly faTrash = faTrash;\r\n    protected readonly faBan = faBan;\r\n    protected readonly faSave = faSave;\r\n    // other constants\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly validators = StandardizedCompetencyValidators;\r\n\r\n    save() {\r\n        const updatedValues = this.form.getRawValue();\r\n        const updatedCompetency: StandardizedCompetencyDTO = { ...this.competency, ...updatedValues };\r\n        this.isEditing = false;\r\n        this.onSave.emit(updatedCompetency);\r\n    }\r\n\r\n    delete() {\r\n        this.onDelete.emit(this.competency.id);\r\n    }\r\n\r\n    close() {\r\n        this.onClose.emit();\r\n    }\r\n\r\n    edit() {\r\n        this.isEditing = true;\r\n    }\r\n\r\n    cancel() {\r\n        this.form.reset();\r\n        this.isEditing = false;\r\n\r\n        // canceling when creating a new competency closes it\r\n        if (this.competency.id === undefined) {\r\n            this.onClose.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates description form on markdown change\r\n     * @param content markdown content\r\n     */\r\n    updateDescriptionControl(content: string) {\r\n        this.form.controls.description.setValue(content);\r\n        this.form.controls.description.markAsDirty();\r\n    }\r\n}\r\n", "<div class=\"d-flex flex-column\">\r\n    <div class=\"mb-2\">\r\n        <div class=\"d-flex justify-content-between\">\r\n            @if (competency.id !== undefined) {\r\n                <h4 [jhiTranslate]=\"'artemisApp.standardizedCompetency.details.title' + (isEditing ? 'Edit' : '')\"></h4>\r\n            } @else {\r\n                <h4 jhiTranslate=\"artemisApp.standardizedCompetency.details.titleCreate\"></h4>\r\n            }\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"close()\"></button>\r\n        </div>\r\n        <div>\r\n            @if (!isEditing) {\r\n                <jhi-button [btnType]=\"ButtonType.WARNING\" [btnSize]=\"ButtonSize.SMALL\" [title]=\"'entity.action.edit'\" [icon]=\"faPencil\" (onClick)=\"edit()\" />\r\n            }\r\n            <!-- do not display the delete button when creating new competencies -->\r\n            @if (competency.id) {\r\n                <button\r\n                    jhiDeleteButton\r\n                    [entityTitle]=\"competency.title ?? ''\"\r\n                    [deleteQuestion]=\"'artemisApp.standardizedCompetency.manage.deleteModal.question'\"\r\n                    [deleteConfirmationText]=\"'artemisApp.standardizedCompetency.manage.deleteModal.typeNameToConfirm'\"\r\n                    (delete)=\"onDelete.emit(competency.id)\"\r\n                    [dialogError]=\"dialogError\"\r\n                >\r\n                    <fa-icon [icon]=\"faTrash\" />\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n    <div class=\"d-flex flex-column border-0\" [formGroup]=\"form\">\r\n        <div class=\"form-group\">\r\n            <label for=\"title-input\" jhiTranslate=\"artemisApp.standardizedCompetency.model.title\"></label>\r\n            <input type=\"text\" class=\"form-control\" id=\"title-input\" formControlName=\"title\" />\r\n            @if (form.controls.title.invalid && (form.controls.title.dirty || form.controls.title.touched)) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (form.controls.title.errors?.required) {\r\n                        <div jhiTranslate=\"artemisApp.standardizedCompetency.details.error.titleRequired\"></div>\r\n                    }\r\n                    @if (form.controls.title.errors?.maxlength) {\r\n                        <div jhiTranslate=\"artemisApp.standardizedCompetency.details.error.titleMaxLength\" [translateValues]=\"{ max: validators.TITLE_MAX }\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label jhiTranslate=\"artemisApp.standardizedCompetency.model.description\"></label>\r\n            @if (isEditing) {\r\n                <jhi-markdown-editor-monaco\r\n                    [markdown]=\"form.controls.description.value\"\r\n                    (markdownChange)=\"updateDescriptionControl($event)\"\r\n                    class=\"markdown-preview\"\r\n                    [enableFileUpload]=\"false\"\r\n                />\r\n            } @else {\r\n                <div disabled=\"true\" class=\"markdown-preview border rounded p-1\" [innerHTML]=\"form.controls.description.value ?? '&nbsp;' | htmlForMarkdown\"></div>\r\n            }\r\n            @if (form.controls.description.invalid && form.controls.description.dirty) {\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    jhiTranslate=\"artemisApp.standardizedCompetency.details.error.descriptionMaxLength\"\r\n                    [translateValues]=\"{ max: validators.DESCRIPTION_MAX }\"\r\n                ></div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"taxonomy-select\" jhiTranslate=\"artemisApp.standardizedCompetency.model.taxonomy\"></label>\r\n            <jhi-taxonomy-select selectId=\"taxonomy-select\" [form]=\"form.controls.taxonomy\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"knowledge-area-select\" jhiTranslate=\"artemisApp.standardizedCompetency.model.knowledgeArea\"></label>\r\n            <select id=\"knowledge-area-select\" class=\"form-select\" formControlName=\"knowledgeAreaId\">\r\n                @for (knowledgeArea of knowledgeAreas; track knowledgeArea.id) {\r\n                    <option [ngValue]=\"knowledgeArea.id\">\r\n                        {{ knowledgeArea.title }}\r\n                    </option>\r\n                }\r\n            </select>\r\n            @if (form.controls.knowledgeAreaId.invalid && (form.controls.knowledgeAreaId.dirty || form.controls.knowledgeAreaId.touched)) {\r\n                <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.standardizedCompetency.details.error.knowledgeAreaRequired\"></div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"source-select\" jhiTranslate=\"artemisApp.standardizedCompetency.model.source\"></label>\r\n            <select id=\"source-select\" class=\"form-select\" formControlName=\"sourceId\">\r\n                <option [ngValue]=\"undefined\"></option>\r\n                @for (source of sources; track source.id) {\r\n                    <option [ngValue]=\"source.id\">\r\n                        <!-- omit uri to keep the select short -->\r\n                        {{ source.author ? source.author + '. ' : '' }}\"{{ source.title }}\"\r\n                    </option>\r\n                }\r\n            </select>\r\n        </div>\r\n    </div>\r\n    @if (isEditing) {\r\n        <div>\r\n            <jhi-button [btnType]=\"ButtonType.SECONDARY\" [btnSize]=\"ButtonSize.SMALL\" [title]=\"'entity.action.cancel'\" [icon]=\"faBan\" (onClick)=\"cancel()\" />\r\n            <jhi-button\r\n                [btnType]=\"ButtonType.PRIMARY\"\r\n                [btnSize]=\"ButtonSize.SMALL\"\r\n                [title]=\"'entity.action.save'\"\r\n                [icon]=\"faSave\"\r\n                (onClick)=\"save()\"\r\n                [disabled]=\"this.form.invalid\"\r\n            />\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { faBan, faPencil, faPlus, faSave, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { KnowledgeArea, KnowledgeAreaDTO, KnowledgeAreaValidators } from 'app/entities/competency/standardized-competency.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-knowledge-area-edit',\r\n    templateUrl: './knowledge-area-edit.component.html',\r\n    imports: [TranslateDirective, ButtonComponent, DeleteButtonDirective, FaIconComponent, FormsModule, ReactiveFormsModule, MarkdownEditorMonacoComponent, HtmlForMarkdownPipe],\r\n})\r\nexport class KnowledgeAreaEditComponent {\r\n    private formBuilder = inject(FormBuilder);\r\n\r\n    // values for the knowledge area select\r\n    @Input() knowledgeAreas: KnowledgeArea[] = [];\r\n    @Input({ required: true }) set knowledgeArea(knowledgeArea: KnowledgeAreaDTO) {\r\n        this._knowledgeArea = knowledgeArea;\r\n        this.form = this.formBuilder.nonNullable.group({\r\n            title: [knowledgeArea.title, [Validators.required, Validators.maxLength(KnowledgeAreaValidators.TITLE_MAX)]],\r\n            shortTitle: [knowledgeArea.shortTitle, [Validators.required, Validators.maxLength(KnowledgeAreaValidators.SHORT_TITLE_MAX)]],\r\n            description: [knowledgeArea.description, [Validators.maxLength(KnowledgeAreaValidators.DESCRIPTION_MAX)]],\r\n            parentId: [knowledgeArea.parentId, [this.createNoCircularDependencyValidator()]],\r\n        });\r\n        if (!this.isEditing) {\r\n            this.form.disable();\r\n        }\r\n    }\r\n\r\n    get knowledgeArea() {\r\n        return this._knowledgeArea;\r\n    }\r\n\r\n    @Input() set isEditing(isEditing: boolean) {\r\n        this._isEditing = isEditing;\r\n        this.isEditingChange.emit(isEditing);\r\n        if (isEditing) {\r\n            this.form.enable();\r\n        } else {\r\n            this.form.disable();\r\n        }\r\n    }\r\n\r\n    get isEditing() {\r\n        return this._isEditing;\r\n    }\r\n\r\n    @Input() dialogError: Observable<string>;\r\n\r\n    @Output() onSave = new EventEmitter<KnowledgeAreaDTO>();\r\n    @Output() onDelete = new EventEmitter<number>();\r\n    @Output() onOpenNewCompetency = new EventEmitter<number>();\r\n    @Output() onOpenNewKnowledgeArea = new EventEmitter<number>();\r\n    @Output() onClose = new EventEmitter<void>();\r\n    @Output() isEditingChange = new EventEmitter<boolean>();\r\n\r\n    private _isEditing: boolean;\r\n    private _knowledgeArea: KnowledgeAreaDTO;\r\n    form: FormGroup<{\r\n        title: FormControl<string | undefined>;\r\n        shortTitle: FormControl<string | undefined>;\r\n        description: FormControl<string | undefined>;\r\n        parentId: FormControl<number | undefined>;\r\n    }>;\r\n\r\n    // icons\r\n    readonly faPencil = faPencil;\r\n    readonly faTrash = faTrash;\r\n    readonly faBan = faBan;\r\n    readonly faSave = faSave;\r\n    readonly faPlus = faPlus;\r\n    // other constants\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly validators = KnowledgeAreaValidators;\r\n\r\n    save() {\r\n        const updatedValues = this.form.getRawValue();\r\n        const updatedKnowledgeArea: KnowledgeAreaDTO = { ...this.knowledgeArea, ...updatedValues };\r\n        this.isEditing = false;\r\n        this.onSave.emit(updatedKnowledgeArea);\r\n    }\r\n\r\n    delete() {\r\n        this.onDelete.emit(this.knowledgeArea.id);\r\n    }\r\n\r\n    openNewCompetency() {\r\n        this.onOpenNewCompetency.emit(this.knowledgeArea.id);\r\n    }\r\n\r\n    openNewKnowledgeArea() {\r\n        this.onOpenNewKnowledgeArea.emit(this.knowledgeArea.id);\r\n    }\r\n\r\n    close() {\r\n        this.onClose.emit();\r\n    }\r\n\r\n    edit() {\r\n        this.isEditing = true;\r\n    }\r\n\r\n    cancel() {\r\n        this.form.reset();\r\n        this.isEditing = false;\r\n\r\n        // canceling when creating a new knowledge area closes it\r\n        if (this.knowledgeArea.id === undefined) {\r\n            this.onClose.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates description form on markdown change\r\n     * @param content markdown content\r\n     */\r\n    updateDescriptionControl(content: string) {\r\n        this.form.controls.description.setValue(content);\r\n        this.form.controls.description.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a validator that verifies that updating a knowledge area cannot lead to circular dependencies\r\n     * (I.e. the new parent of a knowledge area must not be itself or one of its current descendants)\r\n     */\r\n    private createNoCircularDependencyValidator() {\r\n        // if the knowledgeArea is new, no validator is needed.\r\n        if (this.knowledgeArea.id === undefined) {\r\n            return (_parentIdControl: FormControl<number | undefined>) => null;\r\n        }\r\n        return (parentIdControl: FormControl<number | undefined>) => {\r\n            if (parentIdControl.value === undefined) {\r\n                return null;\r\n            }\r\n            if (this.selfOrDescendantsHaveId(this.knowledgeArea, parentIdControl.value)) {\r\n                return {\r\n                    circularDependency: true,\r\n                };\r\n            }\r\n            return null;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if the given knowledge or one of its descendants have the given id\r\n     * @param knowledgeArea the knowledge area to check\r\n     * @param id the id to check for\r\n     * @private\r\n     */\r\n    private selfOrDescendantsHaveId(knowledgeArea: KnowledgeAreaDTO, id: number) {\r\n        if (knowledgeArea.id === id) {\r\n            return true;\r\n        }\r\n\r\n        for (const child of knowledgeArea.children ?? []) {\r\n            if (this.selfOrDescendantsHaveId(child, id)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "<div class=\"d-flex flex-column\">\r\n    <div class=\"mb-2\">\r\n        <div class=\"d-flex justify-content-between\">\r\n            @if (knowledgeArea.id !== undefined) {\r\n                <h4 [jhiTranslate]=\"'artemisApp.knowledgeArea.details.title' + (isEditing ? 'Edit' : '')\"></h4>\r\n            } @else {\r\n                <h4 jhiTranslate=\"artemisApp.knowledgeArea.details.titleCreate\"></h4>\r\n            }\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"close()\"></button>\r\n        </div>\r\n        <!-- do not allow these actions when creating a new knowledge area because it is not saved yet -->\r\n        @if (knowledgeArea.id) {\r\n            <div class=\"mb-1\">\r\n                <jhi-button [icon]=\"faPlus\" [btnSize]=\"ButtonSize.SMALL\" title=\"artemisApp.knowledgeArea.details.createCompetencyButton\" (onClick)=\"openNewCompetency()\" />\r\n                <jhi-button [icon]=\"faPlus\" [btnSize]=\"ButtonSize.SMALL\" title=\"artemisApp.knowledgeArea.details.createKnowledgeAreaButton\" (onClick)=\"openNewKnowledgeArea()\" />\r\n            </div>\r\n            @if (!isEditing) {\r\n                <jhi-button [btnType]=\"ButtonType.WARNING\" [btnSize]=\"ButtonSize.SMALL\" title=\"entity.action.edit\" [icon]=\"faPencil\" (onClick)=\"edit()\" />\r\n            }\r\n            <button\r\n                class=\"me-0\"\r\n                jhiDeleteButton\r\n                [entityTitle]=\"knowledgeArea.title ?? ''\"\r\n                [deleteQuestion]=\"'artemisApp.knowledgeArea.manage.deleteModal.question'\"\r\n                [deleteConfirmationText]=\"'artemisApp.knowledgeArea.manage.deleteModal.typeNameToConfirm'\"\r\n                (delete)=\"delete()\"\r\n                [dialogError]=\"dialogError\"\r\n            >\r\n                <fa-icon [icon]=\"faTrash\" />\r\n            </button>\r\n        }\r\n    </div>\r\n    <div class=\"d-flex flex-column border-0\" [formGroup]=\"form\">\r\n        <div class=\"form-group\">\r\n            <label for=\"title-input\" jhiTranslate=\"artemisApp.knowledgeArea.model.title\"></label>\r\n            <input type=\"text\" class=\"form-control\" id=\"title-input\" formControlName=\"title\" />\r\n            @if (form.controls.title.invalid && (form.controls.title.dirty || form.controls.title.touched)) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (form.controls.title.errors?.required) {\r\n                        <div jhiTranslate=\"artemisApp.knowledgeArea.details.error.titleRequired\"></div>\r\n                    }\r\n                    @if (form.controls.title.errors?.maxlength) {\r\n                        <div jhiTranslate=\"artemisApp.knowledgeArea.details.error.titleMaxLength\" [translateValues]=\"{ max: validators.TITLE_MAX }\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"short-title-input\" jhiTranslate=\"artemisApp.knowledgeArea.model.shortTitle\"></label>\r\n            <input type=\"text\" class=\"form-control\" id=\"short-title-input\" formControlName=\"shortTitle\" />\r\n            @if (form.controls.shortTitle.invalid && (form.controls.shortTitle.dirty || form.controls.shortTitle.touched)) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (form.controls.shortTitle.errors?.required) {\r\n                        <div jhiTranslate=\"artemisApp.knowledgeArea.details.error.shortTitleRequired\"></div>\r\n                    }\r\n                    @if (form.controls.shortTitle.errors?.maxlength) {\r\n                        <div jhiTranslate=\"artemisApp.knowledgeArea.details.error.shortTitleMaxLength\" [translateValues]=\"{ max: validators.SHORT_TITLE_MAX }\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label jhiTranslate=\"artemisApp.knowledgeArea.model.description\"></label>\r\n            @if (isEditing) {\r\n                <jhi-markdown-editor-monaco\r\n                    [markdown]=\"form.controls.description.value\"\r\n                    (markdownChange)=\"updateDescriptionControl($event)\"\r\n                    class=\"markdown-preview\"\r\n                    [enableFileUpload]=\"false\"\r\n                />\r\n            } @else {\r\n                <div disabled=\"true\" class=\"markdown-preview border rounded p-1\" [innerHTML]=\"form.controls.description.value ?? '&nbsp;' | htmlForMarkdown\"></div>\r\n            }\r\n            @if (form.controls.description.invalid && form.controls.description.dirty) {\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    jhiTranslate=\"artemisApp.knowledgeArea.details.error.descriptionMaxLength\"\r\n                    [translateValues]=\"{ max: validators.DESCRIPTION_MAX }\"\r\n                ></div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"knowledge-area-select\" jhiTranslate=\"artemisApp.knowledgeArea.model.parent\"></label>\r\n            <select id=\"knowledge-area-select\" class=\"form-select\" formControlName=\"parentId\">\r\n                <option [ngValue]=\"undefined\"></option>\r\n                @for (knowledgeArea of knowledgeAreas; track knowledgeArea.id) {\r\n                    <option [ngValue]=\"knowledgeArea.id\">\r\n                        {{ knowledgeArea.title }}\r\n                    </option>\r\n                }\r\n            </select>\r\n            @if (form.controls.parentId.invalid && (form.controls.parentId.dirty || form.controls.parentId.touched)) {\r\n                <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.knowledgeArea.details.error.parentIdCircle\"></div>\r\n            }\r\n        </div>\r\n    </div>\r\n    @if (isEditing) {\r\n        <div>\r\n            <jhi-button [btnType]=\"ButtonType.SECONDARY\" [btnSize]=\"ButtonSize.SMALL\" [title]=\"'entity.action.cancel'\" [icon]=\"faBan\" (onClick)=\"cancel()\" />\r\n            <jhi-button\r\n                [btnType]=\"ButtonType.PRIMARY\"\r\n                [btnSize]=\"ButtonSize.SMALL\"\r\n                [title]=\"'entity.action.save'\"\r\n                [icon]=\"faSave\"\r\n                (onClick)=\"save()\"\r\n                [disabled]=\"this.form.invalid\"\r\n            />\r\n        </div>\r\n    }\r\n</div>\r\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { faChevronRight, faDownLeftAndUpRightToCenter, faEye, faFileExport, faFileImport, faPlus, faUpRightAndDownLeftFromCenter } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    KnowledgeAreaDTO,\r\n    KnowledgeAreaForTree,\r\n    Source,\r\n    StandardizedCompetencyDTO,\r\n    convertToKnowledgeAreaForTree,\r\n    convertToStandardizedCompetencyForTree,\r\n} from 'app/entities/competency/standardized-competency.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AdminStandardizedCompetencyService } from 'app/admin/standardized-competencies/admin-standardized-competency.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Subject, forkJoin, map } from 'rxjs';\r\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport { getIcon } from 'app/entities/competency.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { StandardizedCompetencyFilterPageComponent } from 'app/shared/standardized-competencies/standardized-competency-filter-page.component';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { StandardizedCompetencyService } from 'app/shared/standardized-competencies/standardized-competency.service';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { RouterLink } from '@angular/router';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { StandardizedCompetencyFilterComponent } from 'app/shared/standardized-competencies/standardized-competency-filter.component';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { KnowledgeAreaTreeComponent } from 'app/shared/standardized-competencies/knowledge-area-tree.component';\r\nimport { StandardizedCompetencyEditComponent } from './standardized-competency-edit.component';\r\nimport { KnowledgeAreaEditComponent } from './knowledge-area-edit.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-standardized-competency-management',\r\n    templateUrl: './standardized-competency-management.component.html',\r\n    styleUrls: ['standardized-competency-management.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        RouterLink,\r\n        FaIconComponent,\r\n        StandardizedCompetencyFilterComponent,\r\n        ButtonComponent,\r\n        KnowledgeAreaTreeComponent,\r\n        NgbTooltip,\r\n        StandardizedCompetencyEditComponent,\r\n        KnowledgeAreaEditComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class StandardizedCompetencyManagementComponent extends StandardizedCompetencyFilterPageComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\r\n    private adminStandardizedCompetencyService = inject(AdminStandardizedCompetencyService);\r\n    private standardizedCompetencyService = inject(StandardizedCompetencyService);\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n    private translateService = inject(TranslateService);\r\n    private changeDetectorRef = inject(ChangeDetectorRef);\r\n\r\n    protected isLoading = false;\r\n    // true if a competency is getting edited in the detail component\r\n    protected isEditing = false;\r\n    // the competency displayed in the detail component\r\n    protected selectedCompetency?: StandardizedCompetencyDTO;\r\n    // the knowledge area displayed in the detail component\r\n    protected selectedKnowledgeArea?: KnowledgeAreaDTO;\r\n    // the list of sources used for the select in the detail component\r\n    protected sourcesForSelect: Source[] = [];\r\n\r\n    // observable for the error button\r\n    private dialogErrorSource = new Subject<string>();\r\n    protected dialogError = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    protected readonly faChevronRight = faChevronRight;\r\n    protected readonly faPlus = faPlus;\r\n    protected readonly faMinimize = faDownLeftAndUpRightToCenter;\r\n    protected readonly faMaximize = faUpRightAndDownLeftFromCenter;\r\n    protected readonly faEye = faEye;\r\n    protected readonly faFileImport = faFileImport;\r\n    protected readonly faFileExport = faFileExport;\r\n    // Other constants for template\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly getIcon = getIcon;\r\n    readonly documentationType: DocumentationType = 'StandardizedCompetencies';\r\n\r\n    ngOnInit() {\r\n        this.isLoading = true;\r\n        const getKnowledgeAreasObservable = this.standardizedCompetencyService.getAllForTreeView();\r\n        const getSourcesObservable = this.standardizedCompetencyService.getSources();\r\n        forkJoin([getKnowledgeAreasObservable, getSourcesObservable]).subscribe({\r\n            next: ([knowledgeAreasResponse, sourcesResponse]) => {\r\n                this.sourcesForSelect = sourcesResponse.body!;\r\n\r\n                const knowledgeAreas = knowledgeAreasResponse.body!;\r\n                const knowledgeAreasForTree = knowledgeAreas.map((knowledgeArea) => convertToKnowledgeAreaForTree(knowledgeArea));\r\n                this.dataSource.data = knowledgeAreasForTree;\r\n                this.treeControl.dataNodes = knowledgeAreasForTree;\r\n                knowledgeAreasForTree.forEach((knowledgeArea) => {\r\n                    this.addSelfAndDescendantsToMap(knowledgeArea);\r\n                    this.addSelfAndDescendantsToSelectArray(knowledgeArea);\r\n                });\r\n\r\n                this.isLoading = false;\r\n                this.changeDetectorRef.detectChanges();\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    exportStandardizedCompetencyCatalog() {\r\n        const url = `/api/atlas/admin/standardized-competencies/export`;\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    // methods handling the knowledge area detail component\r\n    openNewKnowledgeArea(parentId?: number) {\r\n        const newKnowledgeArea: KnowledgeAreaDTO = {\r\n            parentId: parentId,\r\n        };\r\n        this.setSelectedKnowledgeAreaAndEditing(newKnowledgeArea, true);\r\n    }\r\n\r\n    selectKnowledgeArea(knowledgeArea: KnowledgeAreaDTO) {\r\n        if (this.selectedKnowledgeArea?.id === knowledgeArea.id) {\r\n            return;\r\n        }\r\n        this.setSelectedKnowledgeAreaAndEditing(knowledgeArea, false);\r\n    }\r\n\r\n    closeKnowledgeArea() {\r\n        this.setSelectedKnowledgeAreaAndEditing(undefined, false);\r\n    }\r\n\r\n    deleteKnowledgeArea(id: number) {\r\n        const deletedKnowledgeArea = this.selectedKnowledgeArea?.id === id ? this.selectedKnowledgeArea : undefined;\r\n        this.adminStandardizedCompetencyService.deleteKnowledgeArea(id).subscribe({\r\n            next: () => {\r\n                this.alertService.success('artemisApp.knowledgeArea.manage.successAlerts.delete', { title: this.selectedKnowledgeArea?.title });\r\n                this.dialogErrorSource.next('');\r\n                this.updateAfterDeleteKnowledgeArea(deletedKnowledgeArea);\r\n                // close the detail component if it is still open\r\n                if (this.selectedKnowledgeArea?.id === id) {\r\n                    this.isEditing = false;\r\n                    this.selectedKnowledgeArea = undefined;\r\n                }\r\n                this.changeDetectorRef.detectChanges();\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the given knowledge area by either creating a new one (if it has no id) or updating an existing one\r\n     * @param knowledgeArea the knowledgeArea to save\r\n     */\r\n    saveKnowledgeArea(knowledgeArea: KnowledgeAreaDTO) {\r\n        if (knowledgeArea.id === undefined) {\r\n            this.adminStandardizedCompetencyService\r\n                .createKnowledgeArea(knowledgeArea)\r\n                .pipe(map((response) => response.body!))\r\n                .subscribe({\r\n                    next: (resultKnowledgeArea) => {\r\n                        this.alertService.success('artemisApp.knowledgeArea.manage.successAlerts.create', { title: resultKnowledgeArea.title });\r\n                        this.updateAfterCreateKnowledgeArea(resultKnowledgeArea);\r\n                        // update the detail view if no other was opened\r\n                        if (!(this.selectedKnowledgeArea?.id || this.selectedCompetency) && !this.isEditing) {\r\n                            this.selectedKnowledgeArea = resultKnowledgeArea;\r\n                        }\r\n                        this.changeDetectorRef.detectChanges();\r\n                    },\r\n                    error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n                });\r\n        } else {\r\n            this.adminStandardizedCompetencyService\r\n                .updateKnowledgeArea(knowledgeArea)\r\n                .pipe(map((response) => response.body!))\r\n                .subscribe({\r\n                    next: (resultKnowledgeArea) => {\r\n                        this.alertService.success('artemisApp.knowledgeArea.manage.successAlerts.update', { title: resultKnowledgeArea.title });\r\n                        this.updateAfterUpdateKnowledgeArea(resultKnowledgeArea);\r\n                        // update the detail view if it is still open\r\n                        if (resultKnowledgeArea.id === this.selectedKnowledgeArea?.id) {\r\n                            this.selectedKnowledgeArea = resultKnowledgeArea;\r\n                        }\r\n                        this.changeDetectorRef.detectChanges();\r\n                    },\r\n                    error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n                });\r\n        }\r\n    }\r\n\r\n    // methods handling the competency detail component\r\n\r\n    openNewCompetency(knowledgeAreaId: number) {\r\n        const newCompetency: StandardizedCompetencyDTO = {\r\n            knowledgeAreaId: knowledgeAreaId,\r\n        };\r\n        this.setSelectedCompetencyAndEditing(newCompetency, true);\r\n    }\r\n\r\n    selectCompetency(competency: StandardizedCompetencyDTO) {\r\n        if (this.selectedCompetency?.id === competency.id) {\r\n            return;\r\n        }\r\n        this.setSelectedCompetencyAndEditing(competency, false);\r\n    }\r\n\r\n    closeCompetency() {\r\n        this.setSelectedCompetencyAndEditing(undefined, false);\r\n    }\r\n\r\n    deleteCompetency(id: number) {\r\n        const deletedCompetency = this.selectedCompetency?.id === id ? this.selectedCompetency : undefined;\r\n        this.adminStandardizedCompetencyService.deleteStandardizedCompetency(id).subscribe({\r\n            next: () => {\r\n                this.alertService.success('artemisApp.standardizedCompetency.manage.successAlerts.delete', { title: deletedCompetency?.title });\r\n                this.updateAfterDeleteCompetency(deletedCompetency);\r\n                this.dialogErrorSource.next('');\r\n                // close the detail component if it is still open\r\n                if (id === this.selectedCompetency?.id) {\r\n                    this.isEditing = false;\r\n                    this.selectedCompetency = undefined;\r\n                }\r\n                this.changeDetectorRef.detectChanges();\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the given standardized competency by either creating a new one (if it has no id) or updating an existing one\r\n     * @param competency the competency to save\r\n     */\r\n    saveCompetency(competency: StandardizedCompetencyDTO) {\r\n        if (competency.id === undefined) {\r\n            this.adminStandardizedCompetencyService\r\n                .createStandardizedCompetency(competency)\r\n                .pipe(map((response) => response.body!))\r\n                .subscribe({\r\n                    next: (resultCompetency) => {\r\n                        this.alertService.success('artemisApp.standardizedCompetency.manage.successAlerts.create', { title: resultCompetency.title });\r\n                        this.updateAfterCreateCompetency(resultCompetency);\r\n                        // update the detail view if no other was opened\r\n                        if (!(this.selectedCompetency?.id || this.selectedKnowledgeArea) && !this.isEditing) {\r\n                            this.selectedCompetency = resultCompetency;\r\n                        }\r\n                        this.changeDetectorRef.detectChanges();\r\n                    },\r\n                    error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n                });\r\n        } else {\r\n            // save the previous competency values to update the tree afterward\r\n            const previousCompetency = this.selectedCompetency?.id === competency.id ? this.selectedCompetency : undefined;\r\n            this.adminStandardizedCompetencyService\r\n                .updateStandardizedCompetency(competency)\r\n                .pipe(map((response) => response.body!))\r\n                .subscribe({\r\n                    next: (resultCompetency) => {\r\n                        this.alertService.success('artemisApp.standardizedCompetency.manage.successAlerts.update', { title: resultCompetency.title });\r\n                        this.updateAfterUpdateCompetency(resultCompetency, previousCompetency);\r\n                        // update the detail view if it is still open\r\n                        if (resultCompetency.id === this.selectedCompetency?.id) {\r\n                            this.selectedCompetency = resultCompetency;\r\n                        }\r\n                        this.changeDetectorRef.detectChanges();\r\n                    },\r\n                    error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n                });\r\n        }\r\n    }\r\n\r\n    private updateAfterDeleteKnowledgeArea(knowledgeArea: KnowledgeAreaDTO | undefined) {\r\n        const parent = this.getKnowledgeAreaByIdIfExists(knowledgeArea?.parentId);\r\n        if (!knowledgeArea || (!parent && knowledgeArea.parentId !== undefined)) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n\r\n        if (parent) {\r\n            parent.children = parent.children?.filter((ka) => ka.id !== knowledgeArea.id);\r\n            this.refreshTree();\r\n        } else {\r\n            this.dataSource.data = this.dataSource.data.filter((ka) => ka.id !== knowledgeArea.id);\r\n            this.treeControl.dataNodes = this.dataSource.data;\r\n        }\r\n        const descendantIds = this.getIdsOfSelfAndAllDescendants(knowledgeArea);\r\n        descendantIds.forEach((id) => this.knowledgeAreaMap.delete(id));\r\n        this.knowledgeAreasForSelect = this.knowledgeAreasForSelect.filter((ka) => ka.id === undefined || !descendantIds.includes(ka.id));\r\n    }\r\n\r\n    private updateAfterCreateKnowledgeArea(knowledgeArea: KnowledgeAreaDTO) {\r\n        const parent = this.getKnowledgeAreaByIdIfExists(knowledgeArea.parentId);\r\n        if (!parent && knowledgeArea.parentId !== undefined) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n        }\r\n\r\n        const isVisible = !this.knowledgeAreaFilter || this.isAncestorOf(this.knowledgeAreaFilter, knowledgeArea);\r\n        const level = parent ? parent.level + 1 : 0;\r\n        const knowledgeAreaForTree: KnowledgeAreaForTree = convertToKnowledgeAreaForTree(knowledgeArea, isVisible, level);\r\n\r\n        if (parent) {\r\n            parent.children = this.insertBasedOnTitle(knowledgeAreaForTree, parent.children);\r\n            this.refreshTree();\r\n        } else {\r\n            this.dataSource.data = this.insertBasedOnTitle(knowledgeAreaForTree, this.dataSource.data);\r\n            this.treeControl.dataNodes = this.dataSource.data;\r\n        }\r\n\r\n        this.knowledgeAreaMap.set(knowledgeArea.id!, knowledgeAreaForTree);\r\n        this.knowledgeAreasForSelect = [];\r\n        this.dataSource.data.forEach((knowledgeArea) => this.addSelfAndDescendantsToSelectArray(knowledgeArea));\r\n    }\r\n\r\n    private updateAfterUpdateKnowledgeArea(knowledgeArea: KnowledgeAreaDTO) {\r\n        const previousKnowledgeArea = this.getKnowledgeAreaByIdIfExists(knowledgeArea.id);\r\n        if (!previousKnowledgeArea) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n\r\n        const parent = this.getKnowledgeAreaByIdIfExists(knowledgeArea.parentId);\r\n        const previousParent = this.getKnowledgeAreaByIdIfExists(previousKnowledgeArea.parentId);\r\n        // fail if a parent exists but could not be found\r\n        if ((!parent && knowledgeArea.parentId !== undefined) || (!previousParent && previousKnowledgeArea.parentId !== undefined)) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n        // set children and competencies to previous values as we do not get all descendants from the server\r\n        const knowledgeAreaForTree: KnowledgeAreaForTree = {\r\n            ...knowledgeArea,\r\n            level: parent ? parent.level + 1 : 0,\r\n            isVisible: true,\r\n            children: previousKnowledgeArea.children,\r\n            competencies: previousKnowledgeArea.competencies,\r\n        };\r\n        // update level of descendants\r\n        this.updateLevelOfSelfAndDescendants(knowledgeAreaForTree, knowledgeAreaForTree.level);\r\n\r\n        if (previousParent) {\r\n            previousParent.children = previousParent.children?.filter((ka) => ka.id !== knowledgeArea.id);\r\n        } else {\r\n            this.dataSource.data = this.dataSource.data?.filter((ka) => ka.id !== knowledgeArea.id);\r\n        }\r\n        if (parent) {\r\n            parent.children = this.insertBasedOnTitle(knowledgeAreaForTree, parent.children);\r\n        } else {\r\n            this.dataSource.data = this.insertBasedOnTitle(knowledgeAreaForTree, this.dataSource.data);\r\n        }\r\n\r\n        this.knowledgeAreaMap.set(knowledgeArea.id!, knowledgeAreaForTree);\r\n        this.knowledgeAreasForSelect = [];\r\n        this.dataSource.data.forEach((knowledgeArea) => this.addSelfAndDescendantsToSelectArray(knowledgeArea));\r\n        this.treeControl.dataNodes = this.dataSource.data;\r\n\r\n        // refresh tree if dataSource.data was not modified directly\r\n        if (previousParent || parent) {\r\n            this.refreshTree();\r\n        }\r\n        // filter again if the knowledge area was moved.\r\n        if (previousParent?.id !== parent?.id && this.knowledgeAreaFilter) {\r\n            this.filterByKnowledgeArea(this.knowledgeAreaFilter);\r\n        }\r\n    }\r\n\r\n    // functions that update the tree structure in the user interface\r\n\r\n    /**\r\n     * Updates the tree after deleting the {@link selectedCompetency} by removing it from its parent knowledge area.\r\n     * Shows an error alert if the re-structuring fails.\r\n     *\r\n     * @private\r\n     */\r\n    private updateAfterDeleteCompetency(competency: StandardizedCompetencyDTO | undefined) {\r\n        const knowledgeArea = this.getKnowledgeAreaByIdIfExists(competency?.knowledgeAreaId);\r\n        if (!competency || !knowledgeArea) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n        knowledgeArea.competencies = knowledgeArea.competencies?.filter((c) => c.id !== competency.id);\r\n    }\r\n\r\n    /**\r\n     * Updates the tree after creating the given competency by inserting it into its parent knowledge area.\r\n     * Shows an error alert if the re-structuring fails.\r\n     *\r\n     * @param competency the new competency\r\n     * @private\r\n     */\r\n    private updateAfterCreateCompetency(competency: StandardizedCompetencyDTO) {\r\n        const competencyForTree = convertToStandardizedCompetencyForTree(competency, this.shouldBeVisible(competency));\r\n        const knowledgeArea = this.getKnowledgeAreaByIdIfExists(competency.knowledgeAreaId);\r\n        if (!knowledgeArea) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n        knowledgeArea.competencies = (knowledgeArea.competencies ?? []).concat(competencyForTree);\r\n    }\r\n\r\n    /**\r\n     * Updates the tree after updating the {@link selectedCompetency} to the given competency values.\r\n     * Shows an error alert if the re-structuring fails.\r\n     *\r\n     * @param competency the new competency values\r\n     * @param previousCompetency the old competency values\r\n     * @private\r\n     */\r\n    private updateAfterUpdateCompetency(competency: StandardizedCompetencyDTO, previousCompetency: StandardizedCompetencyDTO | undefined) {\r\n        if (!previousCompetency) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n        const competencyForTree = convertToStandardizedCompetencyForTree(competency, this.shouldBeVisible(competency));\r\n        const previousKnowledgeArea = this.getKnowledgeAreaByIdIfExists(previousCompetency?.knowledgeAreaId);\r\n        if (previousKnowledgeArea?.competencies === undefined) {\r\n            this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n            return;\r\n        }\r\n\r\n        // if the knowledge area changed, move the competency to the new knowledge area\r\n        if (competency.knowledgeAreaId !== previousCompetency.knowledgeAreaId) {\r\n            const newKnowledgeArea = this.getKnowledgeAreaByIdIfExists(competency.knowledgeAreaId);\r\n            if (newKnowledgeArea === undefined) {\r\n                this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n                return;\r\n            }\r\n            previousKnowledgeArea.competencies = previousKnowledgeArea.competencies.filter((c) => c.id !== competency.id);\r\n            newKnowledgeArea.competencies = (newKnowledgeArea.competencies ?? []).concat(competencyForTree);\r\n        } else {\r\n            // if the knowledge area stayed the same insert the new competency/replace the existing one\r\n            const index = previousKnowledgeArea.competencies.findIndex((c) => c.id === competency.id);\r\n            if (index === -1) {\r\n                this.alertService.error('artemisApp.standardizedCompetency.manage.updateTreeError');\r\n                return;\r\n            }\r\n            previousKnowledgeArea.competencies.splice(index, 1, competencyForTree);\r\n        }\r\n    }\r\n\r\n    // utility functions\r\n\r\n    private openCancelModal(title: string, entityType: 'standardizedCompetency' | 'knowledgeArea', callback: () => void) {\r\n        const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'md' });\r\n        modalRef.componentInstance.textIsMarkdown = true;\r\n        modalRef.componentInstance.title = `artemisApp.${entityType}.manage.cancelModal.title`;\r\n        modalRef.componentInstance.text = this.translateService.instant(`artemisApp.${entityType}.manage.cancelModal.text`, { title: title });\r\n        modalRef.result.then(() => callback());\r\n    }\r\n\r\n    private refreshTree() {\r\n        const _data = this.dataSource.data;\r\n        this.dataSource.data = [];\r\n        this.dataSource.data = _data;\r\n    }\r\n\r\n    private isAncestorOf(ancestor: KnowledgeAreaDTO, knowledgeArea: KnowledgeAreaDTO): boolean {\r\n        if (ancestor.id === knowledgeArea.id) {\r\n            return true;\r\n        }\r\n        const parent = this.getKnowledgeAreaByIdIfExists(knowledgeArea.parentId);\r\n        if (!parent) {\r\n            return false;\r\n        }\r\n        return this.isAncestorOf(ancestor, parent);\r\n    }\r\n\r\n    /**\r\n     * Gets the id of a knowledge area and all its descendants\r\n     *\r\n     * @param knowledgeArea the knowledge area\r\n     * @private\r\n     */\r\n    private getIdsOfSelfAndAllDescendants(knowledgeArea: KnowledgeAreaDTO): number[] {\r\n        const childrenIds = (knowledgeArea.children ?? []).map((child) => this.getIdsOfSelfAndAllDescendants(child)).flat();\r\n        if (knowledgeArea.id !== undefined) {\r\n            return childrenIds.concat(knowledgeArea.id);\r\n        }\r\n        return childrenIds;\r\n    }\r\n\r\n    /**\r\n     * Updates the level of the given knowledge area to the new level. Also updates and all its descendants to match the new level.\r\n     *\r\n     * @param knowledgeArea the knowledge area to update\r\n     * @param newLevel the new level to set\r\n     * @private\r\n     */\r\n    private updateLevelOfSelfAndDescendants(knowledgeArea: KnowledgeAreaForTree, newLevel: number) {\r\n        knowledgeArea.level = newLevel;\r\n        knowledgeArea.children?.forEach((child) => this.updateLevelOfSelfAndDescendants(child, newLevel + 1));\r\n    }\r\n\r\n    /**\r\n     * Inserts the given knowledgeArea into an array that is sorted alphabetically (ascending)\r\n     *\r\n     * @param knowledgeArea the knowledge area to insert\r\n     * @param array the sorted array\r\n     * @private\r\n     */\r\n    private insertBasedOnTitle(knowledgeArea: KnowledgeAreaForTree, array: KnowledgeAreaForTree[] | undefined) {\r\n        if (!knowledgeArea.title || !array) {\r\n            return (array ?? []).concat(knowledgeArea);\r\n        }\r\n\r\n        // find the index of the first knowledge area with a \"larger\" title\r\n        const insertIndex = array.findIndex((ka) => (ka.title ? ka.title.localeCompare(knowledgeArea.title!) > -1 : false));\r\n        if (insertIndex === -1) {\r\n            return array.concat(knowledgeArea);\r\n        }\r\n\r\n        array.splice(insertIndex, 0, knowledgeArea);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Checks if a competency should be visible, i.e. if its title contains the {@link competencyTitleFilter}\r\n     *\r\n     * @param competency the competency to check\r\n     * @private\r\n     */\r\n    private shouldBeVisible(competency: StandardizedCompetencyDTO) {\r\n        const trimmedFilter = this.competencyTitleFilter?.trim();\r\n        if (!trimmedFilter) {\r\n            return true;\r\n        }\r\n        return this.competencyMatchesFilter(competency, trimmedFilter);\r\n    }\r\n\r\n    // utility functions to handle the detail component\r\n\r\n    /**\r\n     * Sets the selectedKnowledgeArea and isEditing properties. Also sets selectedCompetency to undefined\r\n     *\r\n     * @param knowledgeArea the new value for selectedKnowledgeArea\r\n     * @param isEditing the new value for isEditing\r\n     * @private\r\n     */\r\n    private setSelectedKnowledgeAreaAndEditing(knowledgeArea: KnowledgeAreaDTO | undefined, isEditing: boolean) {\r\n        this.setSelectedObjectsAndEditing(undefined, knowledgeArea, isEditing);\r\n    }\r\n\r\n    /**\r\n     * Sets the selectedCompetency and isEditing properties. Also sets selectedKnowledgeArea to undefined\r\n     *\r\n     * @param competency the new value for selectedCompetency\r\n     * @param isEditing the new value for isEditing\r\n     * @private\r\n     */\r\n    private setSelectedCompetencyAndEditing(competency: StandardizedCompetencyDTO | undefined, isEditing: boolean) {\r\n        this.setSelectedObjectsAndEditing(competency, undefined, isEditing);\r\n    }\r\n\r\n    /**\r\n     * **Never call this method directly!** Always use {@link setSelectedCompetencyAndEditing} or {@link setSelectedKnowledgeAreaAndEditing}\r\n     * Sets the selected competency and knowledge area, as well as the isEditing property.\r\n     *\r\n     * @param competency the new value for selectedCompetency\r\n     * @param knowledgeArea the new value for selectedKnowledgeArea\r\n     * @param isEditing the new value for isEditing\r\n     * @private\r\n     */\r\n    private setSelectedObjectsAndEditing(competency: StandardizedCompetencyDTO | undefined, knowledgeArea: KnowledgeAreaDTO | undefined, isEditing: boolean) {\r\n        if ((this.selectedCompetency || this.selectedKnowledgeArea) && this.isEditing) {\r\n            const title = this.selectedCompetency?.title ?? this.selectedKnowledgeArea?.title ?? '';\r\n            const entityType = this.selectedCompetency ? 'standardizedCompetency' : 'knowledgeArea';\r\n            this.openCancelModal(title, entityType, () => {\r\n                this.isEditing = isEditing;\r\n                this.selectedCompetency = competency;\r\n                this.selectedKnowledgeArea = knowledgeArea;\r\n            });\r\n        } else {\r\n            this.isEditing = isEditing;\r\n            this.selectedCompetency = competency;\r\n            this.selectedKnowledgeArea = knowledgeArea;\r\n        }\r\n    }\r\n\r\n    // Functions that handle unsaved changes\r\n\r\n    /**\r\n     * Only allow to leave page after submitting or if no pending changes exist\r\n     */\r\n    canDeactivate() {\r\n        return !this.isEditing;\r\n    }\r\n\r\n    get canDeactivateWarning(): string {\r\n        return this.translateService.instant('pendingChanges');\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.canDeactivateWarning;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "<div class=\"container\">\r\n    <div class=\"d-flex flex-wrap\">\r\n        <div class=\"d-flex align-items-center\">\r\n            <h2 jhiTranslate=\"artemisApp.standardizedCompetency.manage.title\"></h2>\r\n            <jhi-documentation-button [type]=\"documentationType\" />\r\n        </div>\r\n        <div class=\"ms-auto justify-content-end\">\r\n            <a class=\"btn btn-primary\" [routerLink]=\"['/admin', 'standardized-competencies', 'import']\">\r\n                <fa-icon [icon]=\"faFileImport\" />\r\n                <span jhiTranslate=\"artemisApp.standardizedCompetency.manage.importButton\"></span>\r\n            </a>\r\n            <a class=\"btn btn-primary\" (click)=\"exportStandardizedCompetencyCatalog()\">\r\n                <fa-icon [icon]=\"faFileExport\" />\r\n                <span jhiTranslate=\"artemisApp.standardizedCompetency.manage.exportButton\"></span>\r\n            </a>\r\n        </div>\r\n    </div>\r\n    <jhi-standardized-competency-filter\r\n        [knowledgeAreasForSelect]=\"knowledgeAreasForSelect\"\r\n        [knowledgeAreaFilter]=\"knowledgeAreaFilter\"\r\n        [competencyTitleFilter]=\"competencyTitleFilter\"\r\n        (knowledgeAreaFilterChange)=\"filterByKnowledgeArea($event)\"\r\n        (competencyTitleFilterChange)=\"filterByCompetencyTitle($event)\"\r\n    />\r\n    <div class=\"d-flex flex-wrap align-items-center mt-3 mb-2\">\r\n        <h3 class=\"me-3 mb-0\" jhiTranslate=\"artemisApp.standardizedCompetency.title\"></h3>\r\n        <jhi-button\r\n            class=\"me-3\"\r\n            [btnSize]=\"ButtonSize.SMALL\"\r\n            [icon]=\"faPlus\"\r\n            (onClick)=\"openNewKnowledgeArea(undefined)\"\r\n            tooltip=\"artemisApp.knowledgeArea.manage.createButtonTooltip\"\r\n        />\r\n        <jhi-button\r\n            class=\"me-1\"\r\n            [btnSize]=\"ButtonSize.SMALL\"\r\n            [icon]=\"faMinimize\"\r\n            (onClick)=\"treeControl.collapseAll()\"\r\n            tooltip=\"artemisApp.standardizedCompetency.manage.collapseButtonTooltip\"\r\n        />\r\n        <jhi-button [btnSize]=\"ButtonSize.SMALL\" [icon]=\"faMaximize\" (onClick)=\"treeControl.expandAll()\" tooltip=\"artemisApp.standardizedCompetency.manage.expandButtonTooltip\" />\r\n    </div>\r\n    @if (dataSource.data?.length) {\r\n        <div class=\"d-flex\">\r\n            <jhi-knowledge-area-tree class=\"d-flex flex-grow-1 h-100 w-50\" [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n                <ng-template let-knowledgeArea=\"knowledgeArea\" #knowledgeAreaTemplate>\r\n                    <div class=\"d-flex align-items-center\">\r\n                        <fa-icon\r\n                            class=\"clickable\"\r\n                            size=\"sm\"\r\n                            [icon]=\"faEye\"\r\n                            [fixedWidth]=\"true\"\r\n                            (click)=\"selectKnowledgeArea(knowledgeArea)\"\r\n                            [ngbTooltip]=\"'artemisApp.knowledgeArea.manage.detailsTooltip' | artemisTranslate\"\r\n                        />\r\n                    </div>\r\n                </ng-template>\r\n                <ng-template let-competency=\"competency\" #competencyTemplate>\r\n                    <div class=\"d-flex align-items-center clickable\" (click)=\"selectCompetency(competency)\">\r\n                        <fa-icon\r\n                            class=\"me-2\"\r\n                            [icon]=\"getIcon(competency.taxonomy)\"\r\n                            [ngbTooltip]=\"'artemisApp.courseCompetency.taxonomies.' + (competency.taxonomy ?? 'none') | artemisTranslate\"\r\n                            [fixedWidth]=\"true\"\r\n                        />\r\n                        <h6 class=\"mb-0\">{{ competency.title }}</h6>\r\n                    </div>\r\n                </ng-template>\r\n            </jhi-knowledge-area-tree>\r\n            @if (selectedCompetency) {\r\n                <div class=\"card light-background d-flex flex-grow-1 w-100 h-100 p-3 ms-1\">\r\n                    <jhi-standardized-competency-edit\r\n                        [competency]=\"selectedCompetency\"\r\n                        [knowledgeAreas]=\"knowledgeAreasForSelect\"\r\n                        [sources]=\"sourcesForSelect\"\r\n                        [(isEditing)]=\"isEditing\"\r\n                        (onSave)=\"saveCompetency($event)\"\r\n                        (onDelete)=\"deleteCompetency($event)\"\r\n                        (onClose)=\"closeCompetency()\"\r\n                        [dialogError]=\"dialogError\"\r\n                    />\r\n                </div>\r\n            } @else if (selectedKnowledgeArea) {\r\n                <div class=\"card light-background d-flex flex-grow-1 w-100 h-100 p-3 ms-1\">\r\n                    <jhi-knowledge-area-edit\r\n                        [knowledgeArea]=\"selectedKnowledgeArea\"\r\n                        [knowledgeAreas]=\"knowledgeAreasForSelect\"\r\n                        [(isEditing)]=\"isEditing\"\r\n                        (onSave)=\"saveKnowledgeArea($event)\"\r\n                        (onDelete)=\"deleteKnowledgeArea($event)\"\r\n                        (onOpenNewCompetency)=\"openNewCompetency($event)\"\r\n                        (onOpenNewKnowledgeArea)=\"openNewKnowledgeArea($event)\"\r\n                        (onClose)=\"closeKnowledgeArea()\"\r\n                        [dialogError]=\"dialogError\"\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    } @else if (isLoading) {\r\n        <div class=\"d-flex justify-content-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n            </div>\r\n        </div>\r\n    } @else {\r\n        <span jhiTranslate=\"artemisApp.standardizedCompetency.manage.empty\"></span>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "isEditing", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "edit", "\u0275\u0275elementEnd", "ButtonType", "WARNING", "ButtonSize", "SMALL", "faPencil", "_r3", "onDelete", "emit", "competency", "id", "tmp_1_0", "title", "undefined", "dialogError", "faTrash", "\u0275\u0275pureFunction1", "_c0", "validators", "TITLE_MAX", "\u0275\u0275template", "StandardizedCompetencyEditComponent_Conditional_25_Conditional_3_Template", "StandardizedCompetencyEditComponent_Conditional_25_Conditional_4_Template", "\u0275\u0275conditional", "form", "controls", "errors", "required", "maxlength", "$event", "_r4", "updateDescriptionControl", "description", "value", "\u0275\u0275pipeBind1", "\u0275\u0275sanitizeHtml", "DESCRIPTION_MAX", "knowledgeArea_r5", "\u0275\u0275textInterpolate1", "source_r6", "\u0275\u0275textInterpolate2", "author", "_r7", "cancel", "save", "SECONDARY", "faBan", "PRIMARY", "faSave", "invalid", "StandardizedCompetencyEditComponent", "formBuilder", "inject", "FormBuilder", "knowledgeAreas", "sources", "_competency", "nonNullable", "group", "Validators", "maxLength", "StandardizedCompetencyValidators", "taxonomy", "knowledgeAreaId", "sourceId", "disable", "_isEditing", "isEditingChange", "enable", "onSave", "EventEmitter", "onClose", "updatedValues", "getRawValue", "updatedCompetency", "__spreadValues", "delete", "close", "reset", "content", "setValue", "markAsDirty", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "StandardizedCompetencyEditComponent_Conditional_6_Template", "StandardizedCompetencyEditComponent_Conditional_7_Template", "StandardizedCompetencyEditComponent_Conditional_13_Template", "StandardizedCompetencyEditComponent_Conditional_14_Template", "StandardizedCompetencyEditComponent_Conditional_25_Template", "StandardizedCompetencyEditComponent_Conditional_31_Template", "StandardizedCompetencyEditComponent_Conditional_32_Template", "StandardizedCompetencyEditComponent_Conditional_33_Template", "\u0275\u0275repeaterCreate", "StandardizedCompetencyEditComponent_For_49_Template", "_forTrack0", "StandardizedCompetencyEditComponent_Conditional_51_Template", "StandardizedCompetencyEditComponent_For_62_Template", "StandardizedCompetencyEditComponent_Conditional_66_Template", "dirty", "touched", "\u0275\u0275repeater", "TranslateDirective", "ButtonComponent", "DeleteButtonDirective", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "MarkdownEditorMonacoComponent", "TaxonomySelectComponent", "HtmlForMarkdownPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "isEditing", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "edit", "\u0275\u0275elementEnd", "ButtonType", "WARNING", "ButtonSize", "SMALL", "faPencil", "_r2", "openNewCompetency", "openNewKnowledgeArea", "\u0275\u0275template", "KnowledgeAreaEditComponent_Conditional_12_Conditional_8_Template", "delete", "faPlus", "\u0275\u0275conditional", "tmp_6_0", "knowledgeArea", "title", "undefined", "dialogError", "faTrash", "\u0275\u0275pureFunction1", "_c0", "validators", "TITLE_MAX", "KnowledgeAreaEditComponent_Conditional_22_Conditional_3_Template", "KnowledgeAreaEditComponent_Conditional_22_Conditional_4_Template", "form", "controls", "errors", "required", "maxlength", "SHORT_TITLE_MAX", "KnowledgeAreaEditComponent_Conditional_30_Conditional_3_Template", "KnowledgeAreaEditComponent_Conditional_30_Conditional_4_Template", "shortTitle", "$event", "_r4", "updateDescriptionControl", "description", "value", "\u0275\u0275pipeBind1", "tmp_1_0", "\u0275\u0275sanitizeHtml", "DESCRIPTION_MAX", "knowledgeArea_r5", "id", "\u0275\u0275textInterpolate1", "_r6", "cancel", "save", "SECONDARY", "faBan", "PRIMARY", "faSave", "invalid", "KnowledgeAreaEditComponent", "formBuilder", "inject", "FormBuilder", "knowledgeAreas", "_knowledgeArea", "nonNullable", "group", "Validators", "maxLength", "KnowledgeAreaValidators", "parentId", "createNoCircularDependencyValidator", "disable", "_isEditing", "isEditingChange", "emit", "enable", "onSave", "EventEmitter", "onDelete", "onOpenNewCompetency", "onOpenNewKnowledgeArea", "onClose", "updatedValues", "getRawValue", "updatedKnowledgeArea", "__spreadValues", "close", "reset", "content", "setValue", "markAsDirty", "_parentIdControl", "parentIdControl", "selfOrDescendantsHaveId", "circularDependency", "child", "children", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "KnowledgeAreaEditComponent_Conditional_6_Template", "KnowledgeAreaEditComponent_Conditional_7_Template", "KnowledgeAreaEditComponent_Conditional_12_Template", "KnowledgeAreaEditComponent_Conditional_22_Template", "KnowledgeAreaEditComponent_Conditional_30_Template", "KnowledgeAreaEditComponent_Conditional_36_Template", "KnowledgeAreaEditComponent_Conditional_37_Template", "KnowledgeAreaEditComponent_Conditional_38_Template", "\u0275\u0275repeaterCreate", "KnowledgeAreaEditComponent_For_49_Template", "_forTrack0", "KnowledgeAreaEditComponent_Conditional_51_Template", "KnowledgeAreaEditComponent_Conditional_54_Template", "dirty", "touched", "\u0275\u0275repeater", "TranslateDirective", "ButtonComponent", "DeleteButtonDirective", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "MarkdownEditorMonacoComponent", "HtmlForMarkdownPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "knowledgeArea_r2", "\u0275\u0275restoreView", "_r1", "knowledgeArea", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectKnowledgeArea", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faEye", "\u0275\u0275pipeBind1", "competency_r5", "_r4", "competency", "selectCompetency", "\u0275\u0275element", "getIcon", "taxonomy", "tmp_6_0", "undefined", "\u0275\u0275textInterpolate", "title", "\u0275\u0275twoWayListener", "$event", "_r6", "i0", "\u0275\u0275twoWayBindingSet", "isEditing", "saveCompetency", "deleteCompetency", "closeCompetency", "selectedCompetency", "knowledgeAreasForSelect", "sourcesForSelect", "\u0275\u0275twoWayProperty", "dialogError", "_r7", "saveKnowledgeArea", "deleteKnowledgeArea", "openNewCompetency", "openNewKnowledgeArea", "closeKnowledgeArea", "selectedKnowledgeArea", "\u0275\u0275template", "StandardizedCompetencyManagementComponent_Conditional_42_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "StandardizedCompetencyManagementComponent_Conditional_42_ng_template_8_Template", "StandardizedCompetencyManagementComponent_Conditional_42_Conditional_12_Template", "StandardizedCompetencyManagementComponent_Conditional_42_Conditional_13_Template", "dataSource", "treeControl", "\u0275\u0275conditional", "StandardizedCompetencyManagementComponent", "StandardizedCompetencyFilterPageComponent", "adminStandardizedCompetencyService", "inject", "AdminStandardizedCompetencyService", "standardizedCompetencyService", "StandardizedCompetencyService", "alertService", "AlertService", "modalService", "NgbModal", "translateService", "TranslateService", "changeDetectorRef", "ChangeDetectorRef", "isLoading", "dialogErrorSource", "Subject", "asObservable", "faChevronRight", "faPlus", "faMinimize", "faDownLeftAndUpRightToCenter", "faMaximize", "faUpRightAndDownLeftFromCenter", "faFileImport", "faFileExport", "ButtonType", "ButtonSize", "documentationType", "ngOnInit", "getKnowledgeAreasObservable", "getAllForTreeView", "getSourcesObservable", "getSources", "forkJoin", "subscribe", "next", "knowledgeAreasResponse", "sourcesResponse", "body", "knowledgeAreasForTree", "map", "convertToKnowledgeAreaForTree", "data", "dataNodes", "forEach", "addSelfAndDescendantsToMap", "addSelfAndDescendantsToSelectArray", "detectChanges", "error", "errorResponse", "onError", "ngOnDestroy", "unsubscribe", "exportStandardizedCompetencyCatalog", "window", "open", "parentId", "newKnowledgeArea", "setSelectedKnowledgeAreaAndEditing", "id", "deletedKnowledgeArea", "success", "updateAfterDeleteKnowledgeArea", "message", "createKnowledgeArea", "pipe", "response", "resultKnowledgeArea", "updateAfterCreateKnowledgeArea", "updateKnowledgeArea", "updateAfterUpdateKnowledgeArea", "knowledgeAreaId", "newCompetency", "setSelectedCompetencyAndEditing", "deletedCompetency", "deleteStandardizedCompetency", "updateAfterDeleteCompetency", "createStandardizedCompetency", "resultCompetency", "updateAfterCreateCompetency", "previousCompetency", "updateStandardizedCompetency", "updateAfterUpdateCompetency", "parent", "getKnowledgeAreaByIdIfExists", "children", "filter", "ka", "refreshTree", "descendantIds", "getIdsOfSelfAndAllDescendants", "knowledgeAreaMap", "delete", "includes", "isVisible", "knowledgeAreaFilter", "isAncestorOf", "level", "knowledgeAreaForTree", "insertBasedOnTitle", "set", "previousKnowledgeArea", "previousParent", "__spreadProps", "__spreadValues", "competencies", "updateLevelOfSelfAndDescendants", "filterByKnowledgeArea", "c", "competencyForTree", "convertToStandardizedCompetencyForTree", "shouldBeVisible", "concat", "index", "findIndex", "splice", "openCancelModal", "entityType", "callback", "modalRef", "ConfirmAutofocusModalComponent", "keyboard", "size", "componentInstance", "textIsMarkdown", "text", "instant", "result", "then", "_data", "ancestor", "childrenIds", "child", "flat", "newLevel", "array", "insertIndex", "localeCompare", "trimmedFilter", "competencyTitleFilter", "trim", "competencyMatchesFilter", "setSelectedObjectsAndEditing", "canDeactivate", "canDeactivateWarning", "unloadNotification", "event", "preventDefault", "__ngFactoryType__", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275resolveWindow", "filterByCompetencyTitle", "collapseAll", "expandAll", "StandardizedCompetencyManagementComponent_Conditional_42_Template", "StandardizedCompetencyManagementComponent_Conditional_43_Template", "StandardizedCompetencyManagementComponent_Conditional_44_Template", "\u0275\u0275pureFunction0", "_c0", "SMALL", "length", "TranslateDirective", "DocumentationButtonComponent", "RouterLink", "FaIconComponent", "StandardizedCompetencyFilterComponent", "ButtonComponent", "KnowledgeAreaTreeComponent", "NgbTooltip", "StandardizedCompetencyEditComponent", "KnowledgeAreaEditComponent", "ArtemisTranslatePipe", "styles", "changeDetection"]
}
