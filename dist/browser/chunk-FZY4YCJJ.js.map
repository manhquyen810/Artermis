{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/participate/exam-participation.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { faLightbulb } from '@fortawesome/free-solid-svg-icons';\r\nimport { captureException } from '@sentry/angular';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { Exercise, ExerciseType, getIcon } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { QuizSubmission } from 'app/entities/quiz/quiz-submission.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { Submission, getLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { StudentExamWithGradeDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { SidebarCardElement } from 'app/types/sidebar';\r\nimport dayjs from 'dayjs/esm';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\r\nimport { BehaviorSubject, Observable, Subject, of, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nexport type ButtonTooltipType = 'submitted' | 'submittedSubmissionLimitReached' | 'notSubmitted' | 'synced' | 'notSynced' | 'notSavedOrSubmitted' | 'notStarted';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExamParticipationService {\r\n    private httpClient = inject(HttpClient);\r\n    private localStorageService = inject(LocalStorageService);\r\n    private sessionStorage = inject(SessionStorageService);\r\n\r\n    public currentlyLoadedStudentExam = new Subject<StudentExam>();\r\n\r\n    private examIsStartedSubject = new BehaviorSubject<boolean>(false);\r\n    examIsStarted$ = this.examIsStartedSubject.asObservable();\r\n\r\n    private testRunSubject = new BehaviorSubject<boolean>(false);\r\n    testRunStarted$ = this.testRunSubject.asObservable();\r\n\r\n    private examEndViewSubject = new BehaviorSubject<boolean>(false);\r\n    endViewDisplayed$ = this.examEndViewSubject.asObservable();\r\n\r\n    public getResourceURL(courseId: number, examId: number): string {\r\n        return `api/exam/courses/${courseId}/exams/${examId}`;\r\n    }\r\n\r\n    private static getLocalStorageKeyForStudentExam(courseId: number, examId: number): string {\r\n        const prefix = 'artemis_student_exam';\r\n        return `${prefix}_${courseId}_${examId}`;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a {@link StudentExam} from server or localstorage. Will also mark the student exam as started\r\n     * @param courseId the id of the course the exam is created in\r\n     * @param examId the id of the exam\r\n     * @param studentExamId the id of the student Exam which should be loaded\r\n     * @returns the studentExam with Exercises for the conduction-phase\r\n     */\r\n    public loadStudentExamWithExercisesForConduction(courseId: number, examId: number, studentExamId: number): Observable<StudentExam> {\r\n        const url = this.getResourceURL(courseId, examId) + '/student-exams/' + studentExamId + '/conduction';\r\n        return this.getStudentExamFromServer(url, courseId, examId);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a {@link StudentExam} from the localstorage. Will also mark the student exam as started\r\n     *\r\n     * @param courseId the id of the course the exam is created in\r\n     * @param examId the id of the exam\r\n     */\r\n    public loadStudentExamWithExercisesForConductionFromLocalStorage(courseId: number, examId: number): Observable<StudentExam> {\r\n        const localStoredExam: StudentExam = JSON.parse(this.localStorageService.retrieve(ExamParticipationService.getLocalStorageKeyForStudentExam(courseId, examId)));\r\n        return of(localStoredExam);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a {@link StudentExam} from server or localstorage for display of the summary.\r\n     * @param courseId the id of the course the exam is created in\r\n     * @param examId the id of the exam\r\n     * @param studentExamId the id of the studentExam\r\n     * @returns a studentExam with Exercises for the summary-phase\r\n     */\r\n    public loadStudentExamWithExercisesForSummary(courseId: number, examId: number, studentExamId: number): Observable<StudentExam> {\r\n        const url = this.getResourceURL(courseId, examId) + '/student-exams/' + studentExamId + '/summary';\r\n        return this.getStudentExamFromServer(url, courseId, examId);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a {@link StudentExam} from server or localstorage.\r\n     */\r\n    private getStudentExamFromServer(url: string, courseId: number, examId: number): Observable<StudentExam> {\r\n        return this.httpClient.get<StudentExam>(url).pipe(\r\n            map((studentExam: StudentExam) => {\r\n                if (studentExam.examSessions && studentExam.examSessions.length > 0 && studentExam.examSessions[0].sessionToken) {\r\n                    this.saveExamSessionTokenToSessionStorage(studentExam.examSessions[0].sessionToken);\r\n                }\r\n                return ExamParticipationService.convertStudentExamFromServer(studentExam);\r\n            }),\r\n            tap((studentExam: StudentExam) => {\r\n                this.currentlyLoadedStudentExam.next(studentExam);\r\n            }),\r\n            catchError(() => {\r\n                const localStoredExam: StudentExam = JSON.parse(this.localStorageService.retrieve(ExamParticipationService.getLocalStorageKeyForStudentExam(courseId, examId)));\r\n                return of(localStoredExam);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Retrieves a {@link StudentExamWithGradeDTO} without {@link StudentExamWithGradeDTO#studentExam} from server for display of the summary.\r\n     * {@link StudentExamWithGradeDTO#studentExam} is excluded from response to save bandwidth.\r\n     *\r\n     * @param courseId the id of the course the exam is created in\r\n     * @param examId the id of the exam\r\n     * @param userId the id of the student if the current caller is an instructor, the grade info for current user's exam will be retrieved if this argument is empty\r\n     * @param studentExamId the id of the student exam\r\n     */\r\n    public loadStudentExamGradeInfoForSummary(courseId: number, examId: number, studentExamId: number, userId?: number): Observable<StudentExamWithGradeDTO> {\r\n        let params = new HttpParams();\r\n        if (userId) {\r\n            params = params.set('userId', userId.toString());\r\n        }\r\n\r\n        const url = `${this.getResourceURL(courseId, examId)}/student-exams/${studentExamId}/grade-summary`;\r\n        return this.httpClient.get<StudentExamWithGradeDTO>(url, { params });\r\n    }\r\n\r\n    /**\r\n     * Loads {@link StudentExam} object from server\r\n     * @param courseId the id of the course the exam is created in\r\n     * @param examId the id of the exam\r\n     */\r\n    public getOwnStudentExam(courseId: number, examId: number): Observable<StudentExam> {\r\n        const url = this.getResourceURL(courseId, examId) + '/own-student-exam';\r\n        return this.httpClient.get<StudentExam>(url).pipe(\r\n            map((studentExam: StudentExam) => {\r\n                const convertedStudentExam = ExamParticipationService.convertStudentExamDateFromServer(studentExam);\r\n                this.currentlyLoadedStudentExam.next(convertedStudentExam);\r\n                return convertedStudentExam;\r\n            }),\r\n        );\r\n    }\r\n\r\n    public loadTestRunWithExercisesForConduction(courseId: number, examId: number, testRunId: number): Observable<StudentExam> {\r\n        const url = this.getResourceURL(courseId, examId) + '/test-run/' + testRunId + '/conduction';\r\n        return this.httpClient.get<StudentExam>(url).pipe(\r\n            map((studentExam: StudentExam) => {\r\n                const convertedStudentExam = ExamParticipationService.convertStudentExamDateFromServer(studentExam);\r\n                this.currentlyLoadedStudentExam.next(convertedStudentExam);\r\n                return convertedStudentExam;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Loads {@link StudentExam} objects linked to a test exam per user and per course from server\r\n     * @param courseId the id of the course we are interested\r\n     * @returns a List of all StudentExams without Exercises per User and Course\r\n     */\r\n    public loadStudentExamsForTestExamsPerCourseAndPerUserForOverviewPage(courseId: number): Observable<StudentExam[]> {\r\n        const url = `api/exam/courses/${courseId}/test-exams-per-user`;\r\n        return this.httpClient\r\n            .get<StudentExam[]>(url, { observe: 'response' })\r\n            .pipe(map((studentExam: HttpResponse<StudentExam[]>) => this.processListOfStudentExamsFromServer(studentExam)));\r\n    }\r\n\r\n    private processListOfStudentExamsFromServer(studentExamsResponse: HttpResponse<StudentExam[]>) {\r\n        studentExamsResponse.body!.forEach((studentExam) => {\r\n            return ExamParticipationService.convertStudentExamDateFromServer(studentExam);\r\n        });\r\n        return studentExamsResponse.body!;\r\n    }\r\n\r\n    /**\r\n     * Submits {@link StudentExam} - the exam cannot be updated afterwards anymore\r\n     * @param courseId the id of the course the exam is created in\r\n     * @param examId the id of the exam\r\n     * @param studentExam the student exam to submit\r\n     */\r\n    public submitStudentExam(courseId: number, examId: number, studentExam: StudentExam): Observable<void> {\r\n        const url = this.getResourceURL(courseId, examId) + '/student-exams/submit';\r\n        const studentExamCopy = cloneDeep(studentExam);\r\n        ExamParticipationService.breakCircularDependency(studentExamCopy);\r\n\r\n        return this.httpClient.post<void>(url, studentExamCopy).pipe(\r\n            catchError((error: HttpErrorResponse) => {\r\n                if (error.status === 403 && error.headers.get('x-null-error') === 'error.submissionNotInTime') {\r\n                    return throwError(() => new Error('artemisApp.studentExam.submissionNotInTime'));\r\n                } else if (error.status === 409 && error.headers.get('x-null-error') === 'error.alreadySubmitted') {\r\n                    return throwError(() => new Error('artemisApp.studentExam.alreadySubmitted'));\r\n                } else {\r\n                    return throwError(() => new Error('artemisApp.studentExam.handInFailed'));\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    private static breakCircularDependency(studentExam: StudentExam) {\r\n        studentExam.exercises!.forEach((exercise) => {\r\n            if (exercise.studentParticipations) {\r\n                for (const participation of exercise.studentParticipations) {\r\n                    if (participation.results) {\r\n                        for (const result of participation.results) {\r\n                            delete result.participation;\r\n                            if (result.feedbacks) {\r\n                                for (const feedback of result.feedbacks) {\r\n                                    delete feedback.result;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (participation.submissions) {\r\n                        for (const submission of participation.submissions) {\r\n                            delete submission.participation;\r\n                            const result = getLatestSubmissionResult(submission);\r\n                            if (result) {\r\n                                delete result.participation;\r\n                                delete result.submission;\r\n                            }\r\n                        }\r\n                    }\r\n                    delete participation.exercise;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * save the studentExam to the local Storage\r\n     *\r\n     * @param courseId\r\n     * @param examId\r\n     * @param studentExam\r\n     */\r\n    public saveStudentExamToLocalStorage(courseId: number, examId: number, studentExam: StudentExam): void {\r\n        // if the following code fails, this should never affect the exam\r\n        try {\r\n            const studentExamCopy = cloneDeep(studentExam);\r\n            ExamParticipationService.breakCircularDependency(studentExamCopy);\r\n            this.localStorageService.store(ExamParticipationService.getLocalStorageKeyForStudentExam(courseId, examId), JSON.stringify(studentExamCopy));\r\n        } catch (error) {\r\n            captureException(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saves latest examSessionToken to sessionStorage\r\n     * @param examSessionToken latest examSessionToken\r\n     */\r\n    public saveExamSessionTokenToSessionStorage(examSessionToken: string): void {\r\n        this.sessionStorage.store('ExamSessionToken', examSessionToken);\r\n    }\r\n\r\n    /**\r\n     * Update a quizSubmission\r\n     *\r\n     * @param exerciseId\r\n     * @param quizSubmission\r\n     */\r\n    public updateQuizSubmission(exerciseId: number, quizSubmission: QuizSubmission): Observable<QuizSubmission> {\r\n        const url = `api/quiz/exercises/${exerciseId}/submissions/exam`;\r\n        return this.httpClient.put<QuizSubmission>(url, quizSubmission);\r\n    }\r\n\r\n    public setLastSaveFailed(saveFailed: boolean, courseId: number, examId: number): void {\r\n        const key = ExamParticipationService.getLocalStorageKeyForStudentExam(courseId, examId) + '-save-failed';\r\n        this.localStorageService.store(key, saveFailed);\r\n    }\r\n\r\n    public lastSaveFailed(courseId: number, examId: number): boolean {\r\n        const key = ExamParticipationService.getLocalStorageKeyForStudentExam(courseId, examId) + '-save-failed';\r\n        return this.localStorageService.retrieve(key);\r\n    }\r\n\r\n    private static convertStudentExamFromServer(studentExam: StudentExam): StudentExam {\r\n        studentExam.exercises = ExerciseService.convertExercisesDateFromServer(studentExam.exercises);\r\n        studentExam.exam = ExamParticipationService.convertExamDateFromServer(studentExam.exam);\r\n        // Add a default exercise group to connect exercises with the exam.\r\n        studentExam.exercises = studentExam.exercises.map((exercise: Exercise) => {\r\n            exercise.exerciseGroup = { ...exercise.exerciseGroup!, exam: studentExam.exam } as ExerciseGroup;\r\n            return exercise;\r\n        });\r\n        return studentExam;\r\n    }\r\n\r\n    private static convertExamDateFromServer(exam?: Exam) {\r\n        if (exam) {\r\n            exam.visibleDate = exam.visibleDate ? dayjs(exam.visibleDate) : undefined;\r\n            exam.startDate = exam.startDate ? dayjs(exam.startDate) : undefined;\r\n            exam.endDate = exam.endDate ? dayjs(exam.endDate) : undefined;\r\n            exam.publishResultsDate = exam.publishResultsDate ? dayjs(exam.publishResultsDate) : undefined;\r\n            exam.examStudentReviewStart = exam.examStudentReviewStart ? dayjs(exam.examStudentReviewStart) : undefined;\r\n            exam.examStudentReviewEnd = exam.examStudentReviewEnd ? dayjs(exam.examStudentReviewEnd) : undefined;\r\n        }\r\n        return exam;\r\n    }\r\n\r\n    private static convertStudentExamDateFromServer(studentExam: StudentExam): StudentExam {\r\n        studentExam.exam = ExamParticipationService.convertExamDateFromServer(studentExam.exam);\r\n        studentExam.submissionDate = studentExam.submissionDate && dayjs(studentExam.submissionDate);\r\n        studentExam.startedDate = studentExam.startedDate && dayjs(studentExam.startedDate);\r\n        return studentExam;\r\n    }\r\n\r\n    public static getSubmissionForExercise(exercise: Exercise): Submission | undefined {\r\n        const studentParticipation = ExamParticipationService.getParticipationForExercise(exercise);\r\n        if (studentParticipation && studentParticipation.submissions) {\r\n            // NOTE: using \"submissions[0]\" might not work for programming exercises with multiple submissions, it is better to always take the last submission\r\n            return studentParticipation.submissions.last();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the first participation for the given exercise.\r\n     * @param exercise the exercise for which to get the participation\r\n     * @return the first participation of the given exercise\r\n     */\r\n    public static getParticipationForExercise(exercise: Exercise): StudentParticipation | undefined {\r\n        if (exercise && exercise.studentParticipations && exercise.studentParticipations.length > 0) {\r\n            return exercise.studentParticipations[0];\r\n        }\r\n    }\r\n\r\n    getExerciseButtonTooltip(exercise: Exercise): ButtonTooltipType {\r\n        const submission = ExamParticipationService.getSubmissionForExercise(exercise);\r\n        // The submission might not yet exist for this exercise.\r\n        // When the participant navigates to the exercise the submissions are created.\r\n        // Until then show, that the exercise is synced\r\n        if (!submission) {\r\n            return 'synced';\r\n        }\r\n        if (exercise.type !== ExerciseType.PROGRAMMING) {\r\n            if (submission.submitted) {\r\n                return submission.isSynced ? 'synced' : 'notSynced';\r\n            } else {\r\n                return submission.isSynced ? 'notStarted' : 'notSynced';\r\n            }\r\n        }\r\n        if (submission.submitted && submission.isSynced) {\r\n            return 'submitted'; // You have submitted an exercise. You can submit again\r\n        } else if (!submission.submitted && submission.isSynced) {\r\n            return 'notSubmitted'; // starting point\r\n        } else {\r\n            return 'notSavedOrSubmitted';\r\n        }\r\n    }\r\n\r\n    setEndView(isEndView: boolean) {\r\n        this.examEndViewSubject.next(isEndView);\r\n    }\r\n\r\n    setExamLayout(isExamStarted: boolean = true, isTestRun: boolean = false) {\r\n        this.examIsStartedSubject.next(isExamStarted);\r\n        this.testRunSubject.next(isTestRun);\r\n    }\r\n\r\n    resetExamLayout() {\r\n        this.examIsStartedSubject.next(false);\r\n        this.testRunSubject.next(false);\r\n        document.documentElement.style.setProperty('--header-height', '68px'); // Set back to default value, because exam nav bar changes this property within the exam\r\n    }\r\n\r\n    mapExercisesToSidebarCardElements(exercises: Exercise[]) {\r\n        return exercises.map((exercise) => this.mapExerciseToSidebarCardElement(exercise));\r\n    }\r\n\r\n    mapExerciseToSidebarCardElement(exercise: Exercise): SidebarCardElement {\r\n        return {\r\n            title: exercise.exerciseGroup?.title ?? '',\r\n            id: exercise.id ?? '',\r\n            icon: getIcon(exercise.type),\r\n            rightIcon: faLightbulb,\r\n            size: 'M',\r\n        };\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ExamParticipationService", "httpClient", "inject", "HttpClient", "localStorageService", "LocalStorageService", "sessionStorage", "SessionStorageService", "currentlyLoadedStudentExam", "Subject", "examIsStartedSubject", "BehaviorSubject", "examIsStarted$", "asObservable", "testRunSubject", "testRunStarted$", "examEndViewSubject", "endViewDisplayed$", "getResourceURL", "courseId", "examId", "getLocalStorageKeyForStudentExam", "loadStudentExamWithExercisesForConduction", "studentExamId", "url", "getStudentExamFromServer", "loadStudentExamWithExercisesForConductionFromLocalStorage", "localStoredExam", "JSON", "parse", "retrieve", "of", "loadStudentExamWithExercisesForSummary", "get", "pipe", "map", "studentExam", "examSessions", "length", "sessionToken", "saveExamSessionTokenToSessionStorage", "convertStudentExamFromServer", "tap", "next", "catchError", "loadStudentExamGradeInfoForSummary", "userId", "params", "HttpParams", "set", "toString", "getOwnStudentExam", "convertedStudentExam", "convertStudentExamDateFromServer", "loadTestRunWithExercisesForConduction", "testRunId", "loadStudentExamsForTestExamsPerCourseAndPerUserForOverviewPage", "observe", "processListOfStudentExamsFromServer", "studentExamsResponse", "body", "forEach", "submitStudentExam", "studentExamCopy", "cloneDeep", "breakCircularDependency", "post", "error", "status", "headers", "throwError", "Error", "exercises", "exercise", "studentParticipations", "participation", "results", "result", "feedbacks", "feedback", "submissions", "submission", "getLatestSubmissionResult", "saveStudentExamToLocalStorage", "store", "stringify", "captureException", "examSessionToken", "updateQuizSubmission", "exerciseId", "quizSubmission", "put", "setLastSaveFailed", "saveFailed", "key", "lastSaveFailed", "ExerciseService", "convertExercisesDateFromServer", "exam", "convertExamDateFromServer", "exerciseGroup", "__spreadProps", "__spreadValues", "visibleDate", "dayjs", "undefined", "startDate", "endDate", "publishResultsDate", "examStudentReviewStart", "examStudentReviewEnd", "submissionDate", "startedDate", "getSubmissionForExercise", "studentParticipation", "getParticipationForExercise", "last", "getExerciseButtonTooltip", "type", "ExerciseType", "PROGRAMMING", "submitted", "isSynced", "setEndView", "isEndView", "setExamLayout", "isExamStarted", "isTestRun", "resetExamLayout", "document", "documentElement", "style", "setProperty", "mapExercisesToSidebarCardElements", "mapExerciseToSidebarCardElement", "title", "id", "icon", "getIcon", "rightIcon", "faLightbulb", "size", "factory", "\u0275fac", "providedIn"]
}
