{
  "version": 3,
  "sources": ["src/main/webapp/app/core/auth/auth-jwt.service.ts", "src/main/webapp/app/core/login/login.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\r\n\r\nexport class Credentials {\r\n    constructor(\r\n        public username: string,\r\n        public password: string,\r\n        public rememberMe: boolean,\r\n    ) {}\r\n}\r\n\r\nexport interface IAuthServerProvider {\r\n    login: (credentials: Credentials) => Observable<any>;\r\n    loginSAML2: (rememberMe: boolean) => Observable<any>;\r\n    logout: () => Observable<any>;\r\n    clearCaches: () => Observable<undefined>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthServerProvider implements IAuthServerProvider {\r\n    private http = inject(HttpClient);\r\n    private localStorage = inject(LocalStorageService);\r\n    private sessionStorage = inject(SessionStorageService);\r\n\r\n    login(credentials: Credentials): Observable<object> {\r\n        return this.http.post('api/core/public/authenticate', credentials);\r\n    }\r\n\r\n    loginSAML2(rememberMe: boolean): Observable<object> {\r\n        return this.http.post('api/core/public/saml2', rememberMe.toString());\r\n    }\r\n\r\n    logout(): Observable<object> {\r\n        return this.http.post('api/core/public/logout', null);\r\n    }\r\n\r\n    /**\r\n     * Clears all the caches, should be invoked during logout\r\n     */\r\n    clearCaches(): Observable<undefined> {\r\n        this.localStorage.clear();\r\n        this.sessionStorage.clear();\r\n        // The local or session storage might have to be cleared asynchronously in future due to updated browser apis. This is why this method is already acting asynchronous.\r\n        return of(undefined);\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { AuthServerProvider, Credentials } from 'app/core/auth/auth-jwt.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoginService {\r\n    logoutWasForceful = false;\r\n\r\n    private accountService = inject(AccountService);\r\n    private authServerProvider = inject(AuthServerProvider);\r\n    private router = inject(Router);\r\n    private alertService = inject(AlertService);\r\n\r\n    /**\r\n     * Login the user with the given credentials.\r\n     * @param credentials {Credentials} Credentials of the user to login.\r\n     */\r\n    login(credentials: Credentials) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe({\r\n                next: () => {\r\n                    this.accountService.identity(true).then(() => {\r\n                        resolve();\r\n                    });\r\n                },\r\n                error: (err) => {\r\n                    this.logout(false);\r\n                    reject(err);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Login the user with SAML2.\r\n     * @param rememberMe whether or not to remember the user\r\n     */\r\n    loginSAML2(rememberMe: boolean) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.authServerProvider.loginSAML2(rememberMe).subscribe({\r\n                next: () => {\r\n                    this.accountService.identity(true).then(() => {\r\n                        resolve();\r\n                    });\r\n                },\r\n                error: (err) => {\r\n                    this.logout(false);\r\n                    reject(err);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Log out the user and remove all traces of the login from the browser:\r\n     * Tokens, Alerts, User object in memory.\r\n     * Will redirect to home when done.\r\n     */\r\n    logout(wasInitiatedByUser: boolean) {\r\n        this.logoutWasForceful = !wasInitiatedByUser;\r\n\r\n        if (wasInitiatedByUser) {\r\n            this.authServerProvider\r\n                .logout()\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.onLogout();\r\n                    }),\r\n                )\r\n                .subscribe();\r\n        } else {\r\n            this.onLogout();\r\n        }\r\n    }\r\n\r\n    private onLogout(): void {\r\n        this.accountService.authenticate(undefined);\r\n        this.alertService.closeAll();\r\n        this.router.navigateByUrl('/');\r\n    }\r\n\r\n    lastLogoutWasForceful(): boolean {\r\n        return this.logoutWasForceful;\r\n    }\r\n}\r\n"],
  "mappings": "+QAqBA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACnBC,KAAOC,EAAOC,CAAU,EACxBC,aAAeF,EAAOG,CAAmB,EACzCC,eAAiBJ,EAAOK,CAAqB,EAErDC,MAAMC,EAAwB,CAC1B,OAAO,KAAKR,KAAKS,KAAK,+BAAgCD,CAAW,CACrE,CAEAE,WAAWC,EAAmB,CAC1B,OAAO,KAAKX,KAAKS,KAAK,wBAAyBE,EAAWC,SAAQ,CAAE,CACxE,CAEAC,QAAM,CACF,OAAO,KAAKb,KAAKS,KAAK,yBAA0B,IAAI,CACxD,CAKAK,aAAW,CACP,YAAKX,aAAaY,MAAK,EACvB,KAAKV,eAAeU,MAAK,EAElBC,EAAGC,MAAS,CACvB,4CAzBSlB,EAAkB,6BAAlBA,EAAkBmB,QAAlBnB,EAAkBoB,UAAAC,WADL,MAAM,CAAA,SACnBrB,CAAkB,GAAA,ECZ/B,IAAasB,GAAY,IAAA,CAAnB,MAAOA,CAAY,CACrBC,kBAAoB,GAEZC,eAAiBC,EAAOC,CAAc,EACtCC,mBAAqBF,EAAOG,CAAkB,EAC9CC,OAASJ,EAAOK,CAAM,EACtBC,aAAeN,EAAOO,CAAY,EAM1CC,MAAMC,EAAwB,CAC1B,OAAO,IAAIC,QAAc,CAACC,EAASC,IAAU,CACzC,KAAKV,mBAAmBM,MAAMC,CAAW,EAAEI,UAAU,CACjDC,KAAMA,IAAK,CACP,KAAKf,eAAegB,SAAS,EAAI,EAAEC,KAAK,IAAK,CACzCL,EAAO,CACX,CAAC,CACL,EACAM,MAAQC,GAAO,CACX,KAAKC,OAAO,EAAK,EACjBP,EAAOM,CAAG,CACd,EACH,CACL,CAAC,CACL,CAMAE,WAAWC,EAAmB,CAC1B,OAAO,IAAIX,QAAc,CAACC,EAASC,IAAU,CACzC,KAAKV,mBAAmBkB,WAAWC,CAAU,EAAER,UAAU,CACrDC,KAAMA,IAAK,CACP,KAAKf,eAAegB,SAAS,EAAI,EAAEC,KAAK,IAAK,CACzCL,EAAO,CACX,CAAC,CACL,EACAM,MAAQC,GAAO,CACX,KAAKC,OAAO,EAAK,EACjBP,EAAOM,CAAG,CACd,EACH,CACL,CAAC,CACL,CAOAC,OAAOG,EAA2B,CAC9B,KAAKxB,kBAAoB,CAACwB,EAEtBA,EACA,KAAKpB,mBACAiB,OAAM,EACNI,KACGC,EAAS,IAAK,CACV,KAAKC,SAAQ,CACjB,CAAC,CAAC,EAELZ,UAAS,EAEd,KAAKY,SAAQ,CAErB,CAEQA,UAAQ,CACZ,KAAK1B,eAAe2B,aAAaC,MAAS,EAC1C,KAAKrB,aAAasB,SAAQ,EAC1B,KAAKxB,OAAOyB,cAAc,GAAG,CACjC,CAEAC,uBAAqB,CACjB,OAAO,KAAKhC,iBAChB,4CA9ESD,EAAY,6BAAZA,EAAYkC,QAAZlC,EAAYmC,UAAAC,WADC,MAAM,CAAA,SACnBpC,CAAY,GAAA",
  "names": ["AuthServerProvider", "http", "inject", "HttpClient", "localStorage", "LocalStorageService", "sessionStorage", "SessionStorageService", "login", "credentials", "post", "loginSAML2", "rememberMe", "toString", "logout", "clearCaches", "clear", "of", "undefined", "factory", "\u0275fac", "providedIn", "LoginService", "logoutWasForceful", "accountService", "inject", "AccountService", "authServerProvider", "AuthServerProvider", "router", "Router", "alertService", "AlertService", "login", "credentials", "Promise", "resolve", "reject", "subscribe", "next", "identity", "then", "error", "err", "logout", "loginSAML2", "rememberMe", "wasInitiatedByUser", "pipe", "finalize", "onLogout", "authenticate", "undefined", "closeAll", "navigateByUrl", "lastLogoutWasForceful", "factory", "\u0275fac", "providedIn"]
}
