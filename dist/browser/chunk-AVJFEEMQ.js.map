{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-export-button.component.ts", "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-from-file-form.component.ts", "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-from-file-form.component.html", "src/main/webapp/app/exercises/shared/team/team-exercise-search/team-exercise-search.component.ts", "src/main/webapp/app/exercises/shared/team/team-exercise-search/team-exercise-search.component.html", "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.html", "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-button.component.ts", "src/main/webapp/app/exercises/shared/team/teams.component.ts", "src/main/webapp/app/exercises/shared/team/teams.component.html"],
  "sourcesContent": ["import { Component, Input, inject } from '@angular/core';\r\nimport { Team } from 'app/entities/team.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { TeamService } from '../team.service';\r\nimport { faFileExport } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-teams-export-button',\r\n    template: `\r\n        <jhi-button\r\n            [btnType]=\"ButtonType.PRIMARY\"\r\n            [btnSize]=\"buttonSize\"\r\n            [icon]=\"faFileExport\"\r\n            [title]=\"'artemisApp.team.exportTeams.buttonLabel'\"\r\n            (onClick)=\"exportTeams($event)\"\r\n        />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class TeamsExportButtonComponent {\r\n    private teamService = inject(TeamService);\r\n\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n\r\n    @Input() teams: Team[];\r\n    @Input() buttonSize: ButtonSize = ButtonSize.SMALL;\r\n\r\n    // Icons\r\n    faFileExport = faFileExport;\r\n\r\n    /**\r\n     * Export teams or show students if there is an error\r\n     * @param {MouseEvent} event - To stop propagation\r\n     */\r\n    exportTeams(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        this.teamService.exportTeams(this.teams);\r\n    }\r\n}\r\n", "import { ChangeDetectorRef, Component, EventEmitter, Output, inject } from '@angular/core';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { StudentWithTeam, Team } from 'app/entities/team.model';\r\nimport { SHORT_NAME_PATTERN } from 'app/shared/constants/input.constants';\r\nimport { parse } from 'papaparse';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\nconst csvColumns = Object.freeze({\r\n    registrationNumber: 'registrationnumber',\r\n    matrikelNummer: 'matrikelnummer',\r\n    matriculationNumber: 'matriculationnumber',\r\n    name: 'name',\r\n    vorname: 'vorname',\r\n    nachname: 'nachname',\r\n    firstName: 'firstname',\r\n    familyName: 'familyname',\r\n    lastName: 'lastname',\r\n    surname: 'surname',\r\n    login: 'login',\r\n    username: 'username',\r\n    user: 'user',\r\n    benutzer: 'benutzer',\r\n    benutzerName: 'benutzername',\r\n    team: 'team',\r\n    teamName: 'teamname',\r\n    gruppe: 'gruppe',\r\n});\r\n\r\ntype CsvEntry = { [column: string]: string };\r\n\r\n@Component({\r\n    selector: 'jhi-teams-import-from-file-form',\r\n    templateUrl: './teams-import-from-file-form.component.html',\r\n    styleUrls: ['./teams-import-from-file-form.component.scss'],\r\n    imports: [TranslateDirective, HelpIconComponent, FaIconComponent],\r\n})\r\nexport class TeamsImportFromFileFormComponent {\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Output() teamsChanged = new EventEmitter<Team[]>();\r\n    sourceTeams?: Team[];\r\n    importedTeams: StudentWithTeam[] = [];\r\n    importFile?: File;\r\n    importFileName: string;\r\n    loading: boolean;\r\n\r\n    // Icons\r\n    faSpinner = faSpinner;\r\n\r\n    /**\r\n     * Move file reader creation to separate function to be able to mock\r\n     * https://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript/\r\n     */\r\n    generateFileReader() {\r\n        return new FileReader();\r\n    }\r\n\r\n    /**\r\n     * Converts teams from file to expected team type\r\n     * @param {FileReader} fileReader object that is generated by generateFileReader\r\n     */\r\n    async onFileLoadImport(fileReader: FileReader) {\r\n        try {\r\n            // Read the file and get list of teams from the file\r\n            if (this.importFile?.type === 'application/json') {\r\n                this.importedTeams = JSON.parse(fileReader.result as string) as StudentWithTeam[];\r\n            } else if (this.importFile?.type === 'text/csv') {\r\n                const csvEntries = await this.parseCSVFile(fileReader.result as string);\r\n                this.importedTeams = this.convertCsvEntries(csvEntries);\r\n            } else {\r\n                throw new Error(this.translateService.instant('artemisApp.team.invalidFileType', { fileType: this.importFile?.type }));\r\n            }\r\n            this.sourceTeams = this.convertTeams(this.importedTeams);\r\n            this.teamsChanged.emit(this.sourceTeams);\r\n            this.loading = false;\r\n            // Clearing html elements,\r\n            this.importFile = undefined;\r\n            this.importFileName = '';\r\n            const control = document.getElementById('importFileInput') as HTMLInputElement;\r\n            if (control) {\r\n                control.value = '';\r\n            }\r\n        } catch (e) {\r\n            this.loading = false;\r\n            const message = `${this.translateService.instant('artemisApp.team.errors.importFailed')} ${e}`;\r\n            alert(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assigns the uploaded import file\r\n     * @param event object containing the uploaded file\r\n     */\r\n    setImportFile(event: any): void {\r\n        if (event.target.files.length) {\r\n            const fileList: FileList = event.target.files;\r\n            this.importFile = fileList[0];\r\n            this.importFileName = this.importFile.name;\r\n            this.loading = true;\r\n        }\r\n        if (!this.importFile) {\r\n            return;\r\n        }\r\n        const fileReader = this.generateFileReader();\r\n        fileReader.onload = () => this.onFileLoadImport(fileReader);\r\n        fileReader.readAsText(this.importFile);\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Parses a csv file and returns a promise with a list of rows\r\n     * @param csv File content that should be parsed\r\n     */\r\n    private parseCSVFile(csv: string): Promise<CsvEntry[]> {\r\n        return new Promise((resolve, reject) => {\r\n            parse(csv, {\r\n                download: false,\r\n                header: true,\r\n                transformHeader: (header: string) => header.toLowerCase().replace(' ', '').replace('_', ''),\r\n                skipEmptyLines: true,\r\n                complete: (results) => resolve(results.data as CsvEntry[]),\r\n                error: (error: any) => reject(error),\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the content of a csv file to students with teams\r\n     * @param entries All entries of the csv file\r\n     */\r\n    convertCsvEntries(entries: CsvEntry[]): StudentWithTeam[] {\r\n        return entries.map(\r\n            (entry) =>\r\n                ({\r\n                    registrationNumber: entry[csvColumns.registrationNumber] || entry[csvColumns.matrikelNummer] || entry[csvColumns.matriculationNumber] || undefined,\r\n                    username:\r\n                        entry[csvColumns.login] ||\r\n                        entry[csvColumns.username] ||\r\n                        entry[csvColumns.user] ||\r\n                        entry[csvColumns.benutzer] ||\r\n                        entry[csvColumns.benutzerName] ||\r\n                        undefined,\r\n                    firstName: entry[csvColumns.firstName] || entry[csvColumns.vorname] || undefined,\r\n                    lastName:\r\n                        entry[csvColumns.lastName] ||\r\n                        entry[csvColumns.familyName] ||\r\n                        entry[csvColumns.surname] ||\r\n                        entry[csvColumns.name] ||\r\n                        entry[csvColumns.nachname] ||\r\n                        undefined,\r\n                    teamName: entry[csvColumns.teamName] || entry[csvColumns.team] || entry[csvColumns.gruppe] || undefined,\r\n                }) as StudentWithTeam,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Convert imported team list to normal teams\r\n     */\r\n    convertTeams(importTeam: StudentWithTeam[]): Team[] {\r\n        const teams: Team[] = [];\r\n        importTeam.forEach((student, index) => {\r\n            const newStudent = new User();\r\n            newStudent.firstName = student.firstName ?? '';\r\n            newStudent.lastName = student.lastName ?? '';\r\n            newStudent.visibleRegistrationNumber = student.registrationNumber;\r\n            newStudent.login = student.username;\r\n            const entryNr = index + 1;\r\n\r\n            if ((typeof student.username !== 'string' || !student.username.trim()) && (typeof student.registrationNumber !== 'string' || !student.registrationNumber.trim())) {\r\n                throw new Error(this.translateService.instant('artemisApp.team.missingUserNameOrId', { entryNr }));\r\n            }\r\n            newStudent.name = `${newStudent.firstName} ${newStudent.lastName}`.trim();\r\n\r\n            if (typeof student.teamName !== 'string' || !student.teamName.trim()) {\r\n                throw new Error(this.translateService.instant('artemisApp.team.teamName.missingTeamName', { entryNr, studentName: newStudent.name }));\r\n            }\r\n\r\n            const shortName = student.teamName.replace(/[^0-9a-z]/gi, '').toLowerCase();\r\n            if (!shortName.match(SHORT_NAME_PATTERN)) {\r\n                throw new Error(this.translateService.instant('artemisApp.team.teamName.pattern', { entryNr, teamName: shortName }));\r\n            }\r\n\r\n            const teamIndex = teams.findIndex((team) => team.name === student.teamName);\r\n            if (teamIndex === -1) {\r\n                const newTeam = new Team();\r\n                newTeam.name = student.teamName;\r\n                newTeam.shortName = shortName;\r\n                newTeam.students = [newStudent];\r\n                teams.push(newTeam);\r\n            } else {\r\n                teams[teamIndex].students = [...teams[teamIndex].students!, newStudent];\r\n            }\r\n        });\r\n        return teams;\r\n    }\r\n}\r\n", "<div>\r\n    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.team.sourceFile.label\"></label>\r\n    <jhi-help-icon text=\"artemisApp.team.sourceFile.tooltip\" class=\"me-1\" />\r\n    @if (loading) {\r\n        <fa-icon class=\"loading-spinner\" [icon]=\"faSpinner\" animation=\"spin\" />\r\n    }\r\n</div>\r\n<div class=\"custom-file\">\r\n    <input id=\"importFileInput\" type=\"file\" accept=\".json,.csv\" class=\"custom-file-input\" (change)=\"setImportFile($event)\" placeholder=\"Upload file...\" />\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, ViewChild, inject } from '@angular/core';\r\nimport { Observable, Subject, combineLatest, merge, of } from 'rxjs';\r\nimport { catchError, filter, map, switchMap, tap } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\r\nimport { orderBy } from 'lodash-es';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-team-exercise-search',\r\n    templateUrl: './team-exercise-search.component.html',\r\n    imports: [FormsModule, NgbTypeahead, ArtemisTranslatePipe],\r\n})\r\nexport class TeamExerciseSearchComponent {\r\n    private courseService = inject(CourseManagementService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @ViewChild('instance', { static: true }) ngbTypeahead: NgbTypeahead;\r\n    focus$ = new Subject<string>();\r\n    click$ = new Subject<string>();\r\n\r\n    @Input() course: Course;\r\n    @Input() ignoreExercises: Exercise[];\r\n\r\n    @Output() selectExercise = new EventEmitter<Exercise>();\r\n    @Output() searching = new EventEmitter<boolean>();\r\n    @Output() searchQueryTooShort = new EventEmitter<boolean>();\r\n    @Output() searchFailed = new EventEmitter<boolean>();\r\n    @Output() searchNoResults = new EventEmitter<string | undefined>();\r\n\r\n    exercise: Exercise;\r\n    exerciseOptions: Exercise[] = [];\r\n    exerciseOptionsLoaded = false;\r\n\r\n    inputDisplayValue: string;\r\n\r\n    onAutocompleteSelect = (exercise: Exercise) => {\r\n        this.inputDisplayValue = this.searchResultFormatter(exercise);\r\n        this.selectExercise.emit(exercise);\r\n    };\r\n\r\n    searchInputFormatter = () => {\r\n        return this.inputDisplayValue;\r\n    };\r\n\r\n    searchResultFormatter = (exercise: Exercise): string => {\r\n        const { title, releaseDate } = exercise;\r\n        const date = releaseDate ? releaseDate.format(ArtemisDatePipe.format(this.translateService.currentLang, 'short-date')) : '';\r\n        return title + (releaseDate ? ` (${date})` : '');\r\n    };\r\n\r\n    /**\r\n     * Check if given searchTerm is included in given exercise\r\n     * @param {string} searchTerm - Term to search for\r\n     * @param {Exercise} exercise - Exercise to search through\r\n     */\r\n    searchMatchesExercise(searchTerm: string, exercise: Exercise) {\r\n        return exercise.title!.toLowerCase().includes(searchTerm.toLowerCase());\r\n    }\r\n\r\n    onSearch = (text$: Observable<string>) => {\r\n        const clicksWithClosedPopup$ = this.click$.pipe(filter(() => !this.ngbTypeahead.isPopupOpen()));\r\n        const inputFocus$ = this.focus$;\r\n\r\n        return merge(text$, inputFocus$, clicksWithClosedPopup$).pipe(\r\n            tap(() => {\r\n                this.searchNoResults.emit(undefined);\r\n            }),\r\n            switchMap((searchTerm) => {\r\n                this.searchFailed.emit(false);\r\n                this.searching.emit(true);\r\n                // If exercise options have already been loaded once, do not load them again and reuse the already loaded ones\r\n                const exerciseOptionsSource$ = this.exerciseOptionsLoaded ? of(this.exerciseOptions) : this.loadExerciseOptions();\r\n                return combineLatest([of(searchTerm), exerciseOptionsSource$]);\r\n            }),\r\n            tap(() => this.searching.emit(false)),\r\n            switchMap(([searchTerm, exerciseOptions]) => {\r\n                // Filter list of all exercise options by the search term\r\n                const match = (exercise: Exercise) => this.searchMatchesExercise(searchTerm, exercise);\r\n                return combineLatest([of(searchTerm), of(!exerciseOptions ? exerciseOptions : exerciseOptions.filter(match))]);\r\n            }),\r\n            tap(([searchTerm, exerciseOptions]) => {\r\n                if (exerciseOptions && exerciseOptions.length === 0) {\r\n                    this.searchNoResults.emit(searchTerm);\r\n                }\r\n            }),\r\n            map(([, exerciseOptions]) => exerciseOptions || []),\r\n            map((exerciseOptions) => orderBy(exerciseOptions, ['releaseDate', 'id'])),\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Load options of team exercise\r\n     */\r\n    loadExerciseOptions() {\r\n        return this.courseService\r\n            .findWithExercises(this.course.id!)\r\n            .pipe(map((courseResponse) => courseResponse.body!.exercises || []))\r\n            .pipe(map((exercises) => exercises.filter((exercise) => exercise.teamMode)))\r\n            .pipe(map((exercises) => exercises.filter((exercise) => !this.ignoreExercises.map((e) => e.id).includes(exercise.id))))\r\n            .pipe(\r\n                tap((exerciseOptions) => {\r\n                    this.exerciseOptions = exerciseOptions;\r\n                    this.exerciseOptionsLoaded = true;\r\n                }),\r\n            )\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.exerciseOptionsLoaded = false;\r\n                    this.searchFailed.emit(true);\r\n                    return of(null);\r\n                }),\r\n            );\r\n    }\r\n}\r\n", "<input\r\n    #instance=\"ngbTypeahead\"\r\n    id=\"exercise-search-input\"\r\n    type=\"text\"\r\n    class=\"form-control\"\r\n    [placeholder]=\"'artemisApp.team.selectExerciseForImport' | artemisTranslate\"\r\n    [(ngModel)]=\"exercise\"\r\n    (selectItem)=\"onAutocompleteSelect($event.item)\"\r\n    (focus)=\"focus$.next('')\"\r\n    (click)=\"click$.next('')\"\r\n    [ngbTypeahead]=\"onSearch\"\r\n    [resultFormatter]=\"searchResultFormatter\"\r\n    [inputFormatter]=\"searchInputFormatter\"\r\n/>\r\n", "import { Component, Input, OnDestroy, OnInit, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { TeamService } from 'app/exercises/shared/team/team.service';\r\nimport { TeamImportStrategyType as ImportStrategy, Team } from 'app/entities/team.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { flatMap } from 'lodash-es';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { faBan, faCircleNotch, faSpinner, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass } from '@angular/common';\r\nimport { TeamsImportFromFileFormComponent } from './teams-import-from-file-form.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TeamExerciseSearchComponent } from '../team-exercise-search/team-exercise-search.component';\r\nimport { TeamStudentsListComponent } from '../team-participate/team-students-list.component';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-teams-import-dialog',\r\n    templateUrl: './teams-import-dialog.component.html',\r\n    styleUrls: ['./teams-import-dialog.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        FormsModule,\r\n        TranslateDirective,\r\n        NgClass,\r\n        TeamsImportFromFileFormComponent,\r\n        HelpIconComponent,\r\n        FaIconComponent,\r\n        TeamExerciseSearchComponent,\r\n        TeamStudentsListComponent,\r\n        DeleteButtonDirective,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class TeamsImportDialogComponent implements OnInit, OnDestroy {\r\n    private teamService = inject(TeamService);\r\n    private activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    readonly ImportStrategy = ImportStrategy;\r\n    readonly ActionType = ActionType;\r\n\r\n    @ViewChild('importForm', { static: false }) importForm: NgForm;\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() teams: Team[]; // existing teams already in exercise\r\n\r\n    sourceExercise?: Exercise;\r\n\r\n    searchingExercises = false;\r\n    searchingExercisesFailed = false;\r\n    searchingExercisesNoResultsForQuery?: string;\r\n\r\n    sourceTeams?: Team[];\r\n    loadingSourceTeams = false;\r\n    loadingSourceTeamsFailed = false;\r\n\r\n    importStrategy?: ImportStrategy;\r\n    readonly defaultImportStrategy: ImportStrategy = ImportStrategy.CREATE_ONLY;\r\n\r\n    isImporting = false;\r\n    showImportFromExercise = true;\r\n\r\n    // computed properties\r\n    teamShortNamesAlreadyExistingInExercise: string[] = [];\r\n    sourceTeamsFreeOfConflicts: Team[] = [];\r\n\r\n    conflictingRegistrationNumbersSet: Set<string> = new Set<string>();\r\n\r\n    conflictingLoginsSet: Set<string> = new Set<string>();\r\n\r\n    studentsAppearInMultipleTeams = false;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faSpinner = faSpinner;\r\n    faCircleNotch = faCircleNotch;\r\n    faUpload = faUpload;\r\n\r\n    /**\r\n     * Life cycle hook to indicate component creation is done\r\n     */\r\n    ngOnInit() {\r\n        this.computePotentialConflictsBasedOnExistingTeams();\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component destruction is done\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Load teams from source exercise\r\n     * @param {Exercise} sourceExercise - Source exercise to load teams from\r\n     */\r\n    loadSourceTeams(sourceExercise: Exercise) {\r\n        this.sourceTeams = undefined;\r\n        this.loadingSourceTeams = true;\r\n        this.loadingSourceTeamsFailed = false;\r\n        this.teamService.findAllByExerciseId(sourceExercise.id!).subscribe({\r\n            next: (teamsResponse) => {\r\n                this.sourceTeams = teamsResponse.body!;\r\n                this.computeSourceTeamsFreeOfConflicts();\r\n                this.loadingSourceTeams = false;\r\n            },\r\n            error: () => {\r\n                this.loadingSourceTeams = false;\r\n                this.loadingSourceTeamsFailed = true;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method is called when the user has selected an exercise using the autocomplete select field\r\n     *\r\n     * The import strategy is reset and the source teams are loaded for the selected exercise\r\n     *\r\n     * @param exercise Exercise that was selected as a source exercise\r\n     */\r\n    onSelectSourceExercise(exercise: Exercise) {\r\n        this.sourceExercise = exercise;\r\n        this.initImportStrategy();\r\n        this.loadSourceTeams(exercise);\r\n    }\r\n\r\n    /**\r\n     * If the exercise has no teams yet, the user doesn't have to choose an import strategy\r\n     * since there is no need for conflict handling decisions when no teams exist yet.\r\n     */\r\n    initImportStrategy() {\r\n        this.importStrategy = this.teams.length === 0 ? this.defaultImportStrategy : undefined;\r\n    }\r\n\r\n    /**\r\n     * Computes lists of potential conflict sources:\r\n     * 1. The existing team short names of team already in this exercise\r\n     * 2. The logins of students who already belong to teams of this exercise\r\n     * 3. Registration numbers of students who already belong to teams of this exercise\r\n     */\r\n    computePotentialConflictsBasedOnExistingTeams() {\r\n        this.teamShortNamesAlreadyExistingInExercise = this.teams.map((team) => team.shortName!);\r\n        const studentLoginsAlreadyExistingInExercise = flatMap(this.teams, (team) => team.students!.map((student) => student.login!));\r\n        const studentRegistrationNumbersAlreadyExistingInExercise = flatMap(this.teams, (team) => team.students!.map((student) => student.visibleRegistrationNumber || ''));\r\n        this.conflictingRegistrationNumbersSet = this.addArrayToSet(this.conflictingRegistrationNumbersSet, studentRegistrationNumbersAlreadyExistingInExercise);\r\n        this.conflictingLoginsSet = this.addArrayToSet(this.conflictingLoginsSet, studentLoginsAlreadyExistingInExercise);\r\n    }\r\n\r\n    /**\r\n     * Computes a list of all source teams that are conflict-free (i.e. could be imported without any problems)\r\n     */\r\n    computeSourceTeamsFreeOfConflicts() {\r\n        this.sourceTeamsFreeOfConflicts = this.sourceTeams!.filter((team: Team) => this.isSourceTeamFreeOfAnyConflicts(team));\r\n    }\r\n\r\n    /**\r\n     * Predicate that returns true iff the given source team is conflict-free\r\n     *\r\n     * This is the case if the following conditions are fulfilled:\r\n     * 1. No team short name unique constraint violation\r\n     * 2. No student is in the team that is already assigned to a team of the exercise\r\n     * 3. No student in the team is also in another team\r\n     *\r\n     * @param sourceTeam Team which is checked for conflicts\r\n     */\r\n    isSourceTeamFreeOfAnyConflicts(sourceTeam: Team): boolean {\r\n        // Short name of source team already exists among teams of destination exercise\r\n        if (this.teamShortNamesAlreadyExistingInExercise.includes(sourceTeam.shortName!)) {\r\n            return false;\r\n        }\r\n        // One of the students of the source team is already part of a team in the destination exercise\r\n        if (sourceTeam.students!.some((student) => student.login && this.conflictingLoginsSet.has(student.login))) {\r\n            return false;\r\n        }\r\n\r\n        // One of the students of the source team is already part of a team in the destination exercise or of another imported team\r\n        if (!this.showImportFromExercise) {\r\n            if (sourceTeam.students!.some((student) => student.visibleRegistrationNumber && this.conflictingRegistrationNumbersSet.has(student.visibleRegistrationNumber))) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // This source team can be imported without any issues\r\n        return true;\r\n    }\r\n\r\n    get numberOfConflictFreeSourceTeams(): number {\r\n        return this.sourceTeamsFreeOfConflicts.length;\r\n    }\r\n\r\n    get numberOfTeamsToBeDeleted() {\r\n        switch (this.importStrategy) {\r\n            case ImportStrategy.PURGE_EXISTING:\r\n                return this.teams.length;\r\n            case ImportStrategy.CREATE_ONLY:\r\n                return 0;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    get numberOfTeamsToBeImported() {\r\n        switch (this.importStrategy) {\r\n            case ImportStrategy.PURGE_EXISTING:\r\n                return this.sourceTeams!.length;\r\n            case ImportStrategy.CREATE_ONLY:\r\n                return this.numberOfConflictFreeSourceTeams;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    get numberOfTeamsAfterImport() {\r\n        switch (this.importStrategy) {\r\n            case ImportStrategy.PURGE_EXISTING:\r\n                return this.sourceTeams!.length;\r\n            case ImportStrategy.CREATE_ONLY:\r\n                return this.teams.length + this.numberOfConflictFreeSourceTeams;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computed flag whether to prompt the user to pick an import strategy.\r\n     *\r\n     * Conditions that need to be fulfilled in order for the strategy choices to show:\r\n     * 1. A source exercise has been selected\r\n     * 2. The source exercise has teams that could be imported\r\n     * 3. The current exercise already has existing teams in it\r\n     */\r\n    get showImportStrategyChoices(): boolean {\r\n        if (this.showImportFromExercise) {\r\n            return this.sourceExercise !== undefined && this.sourceTeams !== undefined && this.sourceTeams.length > 0 && this.teams.length > 0;\r\n        }\r\n        return this.sourceTeams !== undefined && this.sourceTeams.length > 0 && this.teams.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Update the strategy to use for importing\r\n     * @param {ImportStrategy} importStrategy - Strategy to use\r\n     */\r\n    updateImportStrategy(importStrategy: ImportStrategy) {\r\n        this.importStrategy = importStrategy;\r\n    }\r\n\r\n    /**\r\n     * Computed flag whether to show the import preview numbers in the footer of the modal\r\n     */\r\n    get showImportPreviewNumbers(): boolean {\r\n        if (this.showImportFromExercise) {\r\n            return this.sourceExercise !== undefined && this.sourceTeams !== undefined && this.sourceTeams.length > 0 && Boolean(this.importStrategy);\r\n        }\r\n        return this.studentsAppearInMultipleTeams || (this.sourceTeams !== undefined && this.sourceTeams.length > 0 && Boolean(this.importStrategy));\r\n    }\r\n\r\n    /**\r\n     * The import button is disabled if one of the following conditions apply:\r\n     *\r\n     * 1. Import is already in progress\r\n     * 2. No source exercise has been selected yet\r\n     * 3. Source teams have not been loaded yet\r\n     * 4. No import strategy has been chosen yet\r\n     * 5. There are no (conflict-free depending on strategy) source teams to be imported\r\n     * 6. Student's registration number appears more than once\r\n     * 7. Student's login appears more than once\r\n     */\r\n    get isSubmitDisabled(): boolean {\r\n        if (this.showImportFromExercise) {\r\n            return this.isImporting || !this.sourceExercise || !this.sourceTeams || !this.importStrategy || !this.numberOfTeamsToBeImported;\r\n        }\r\n        return !this.sourceTeams || this.sourceTeams.length === 0 || !this.importStrategy || !this.numberOfTeamsToBeImported || this.studentsAppearInMultipleTeams;\r\n    }\r\n\r\n    /**\r\n     * Cancel the import dialog\r\n     */\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    /**\r\n     * Method is called if the strategy \"Purge existing\" has been chosen and the user has confirmed the delete action\r\n     */\r\n    purgeAndImportTeams() {\r\n        this.dialogErrorSource.next('');\r\n        this.importTeams();\r\n    }\r\n\r\n    /**\r\n     * Is called when the user clicks on \"Import\" in the modal and sends the import request to the server\r\n     */\r\n    importTeams() {\r\n        if (this.isSubmitDisabled) {\r\n            return;\r\n        }\r\n        if (this.showImportFromExercise) {\r\n            this.isImporting = true;\r\n            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe({\r\n                next: (res) => this.onSaveSuccess(res),\r\n                error: (error) => this.onSaveError(error),\r\n            });\r\n        } else if (this.sourceTeams) {\r\n            this.resetConflictingSets();\r\n            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe({\r\n                next: (res) => this.onSaveSuccess(res),\r\n                error: (error) => this.onSaveError(error),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates source teams to given teams\r\n     * Finds logins and registration numbers which appears multiple times\r\n     * Resets current state of arrays of registration numbers and logins\r\n     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\r\n     */\r\n    onTeamsChanged(fileTeams: Team[]) {\r\n        this.initImportStrategy();\r\n        this.sourceTeams = fileTeams;\r\n        this.resetConflictingSets();\r\n        const students: User[] = flatMap(fileTeams, (fileTeam) => fileTeam.students ?? []);\r\n        const studentLoginsAlreadyExistingInOtherTeams = this.findIdentifiersWhichAppearsMultipleTimes(students, 'login');\r\n        const studentRegistrationNumbersAlreadyExistingInOtherTeams = this.findIdentifiersWhichAppearsMultipleTimes(students, 'visibleRegistrationNumber');\r\n        this.studentsAppearInMultipleTeams = studentLoginsAlreadyExistingInOtherTeams.length > 0 || studentRegistrationNumbersAlreadyExistingInOtherTeams.length > 0;\r\n        this.conflictingRegistrationNumbersSet = this.addArrayToSet(this.conflictingRegistrationNumbersSet, studentRegistrationNumbersAlreadyExistingInOtherTeams);\r\n        this.conflictingLoginsSet = this.addArrayToSet(this.conflictingLoginsSet, studentLoginsAlreadyExistingInOtherTeams);\r\n        this.computeSourceTeamsFreeOfConflicts();\r\n    }\r\n\r\n    /**\r\n     * Calculates which identifier appeared how many times and returns those appear more than once\r\n     * @param users Users array to find identifiers that appear multiple times in\r\n     * @param identifier Which identifier to use when searching for multiple occurrences\r\n     * @returns Identifiers which appeared multiple times in user array\r\n     */\r\n    private findIdentifiersWhichAppearsMultipleTimes(users: User[], identifier: 'login' | 'visibleRegistrationNumber') {\r\n        const occurrenceMap = new Map();\r\n        users.forEach((user) => {\r\n            const identifierValue = user[identifier];\r\n            if (identifierValue) {\r\n                if (occurrenceMap.get(identifierValue)) {\r\n                    occurrenceMap.set(identifierValue, occurrenceMap.get(identifierValue) + 1);\r\n                } else {\r\n                    occurrenceMap.set(identifierValue, 1);\r\n                }\r\n            }\r\n        });\r\n        return [...occurrenceMap.keys()].filter((key) => occurrenceMap.get(key) > 1);\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate a success on save\r\n     * @param {HttpResponse<Team[]>} teams - Successfully updated teams\r\n     */\r\n    onSaveSuccess(teams: HttpResponse<Team[]>) {\r\n        this.activeModal.close(teams.body);\r\n        this.isImporting = false;\r\n\r\n        setTimeout(() => {\r\n            this.alertService.success('artemisApp.team.importSuccess', { numberOfImportedTeams: this.numberOfTeamsToBeImported });\r\n        }, 500);\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate an error on save\r\n     * Handles studentsNotFound and studentsAppearMultipleTimes errors\r\n     * Shows generic import error message if error is not one of the above\r\n     * @param {HttpErrorResponse} httpErrorResponse - The occurred error\r\n     */\r\n    onSaveError(httpErrorResponse: HttpErrorResponse) {\r\n        const { errorKey, params } = httpErrorResponse.error;\r\n        switch (errorKey) {\r\n            case 'studentsNotFound':\r\n                const { registrationNumbers, logins } = params;\r\n                this.onStudentsNotFoundError(registrationNumbers, logins);\r\n                break;\r\n            case 'studentsAppearMultipleTimes':\r\n                const { students } = params;\r\n                this.onStudentsAppearMultipleTimesError(students);\r\n                break;\r\n            default:\r\n                this.alertService.error('artemisApp.team.importError');\r\n                break;\r\n        }\r\n        this.isImporting = false;\r\n    }\r\n\r\n    /**\r\n     * Gets not found registration numbers and logins\r\n     * Assigns them to appropriate array on the class\r\n     * Shows user which registration numbers and logins could not be found\r\n     * @param registrationNumbers with which a student could not be found\r\n     * @param logins with which a student could not be found\r\n     */\r\n    private onStudentsNotFoundError(registrationNumbers: string[], logins: string[]) {\r\n        const notFoundRegistrationNumbers = registrationNumbers;\r\n        const notFoundLogins = logins;\r\n        if (notFoundRegistrationNumbers.length > 0) {\r\n            this.alertService.error('artemisApp.team.errors.registrationNumbersNotFound', { registrationNumbers: notFoundRegistrationNumbers });\r\n            this.conflictingRegistrationNumbersSet = this.addArrayToSet(this.conflictingRegistrationNumbersSet, notFoundRegistrationNumbers);\r\n        }\r\n        if (notFoundLogins.length > 0) {\r\n            this.alertService.error('artemisApp.team.errors.loginsNotFound', { logins: notFoundLogins });\r\n            this.conflictingLoginsSet = this.addArrayToSet(this.conflictingLoginsSet, notFoundLogins);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets pairs of login-registration number of students which could not be found\r\n     * Assigns them to appropriate array on the class\r\n     * Shows user which students could not be found\r\n     * @param studentsAppearMultipleTimes login-registration number pairs of students which could not be found\r\n     */\r\n    private onStudentsAppearMultipleTimesError(studentsAppearMultipleTimes: { first: string; second: string }[]) {\r\n        if (studentsAppearMultipleTimes.length > 0) {\r\n            this.studentsAppearInMultipleTeams = true;\r\n            const studentLoginsAlreadyExistingInOtherTeams = studentsAppearMultipleTimes.map((student) => student.first);\r\n            this.conflictingLoginsSet = this.addArrayToSet(this.conflictingLoginsSet, studentLoginsAlreadyExistingInOtherTeams);\r\n            const studentRegistrationNumbersAlreadyExistingInOtherTeams = studentsAppearMultipleTimes.map((student) => student.second);\r\n            this.conflictingRegistrationNumbersSet = this.addArrayToSet(this.conflictingRegistrationNumbersSet, studentRegistrationNumbersAlreadyExistingInOtherTeams);\r\n            this.alertService.error('artemisApp.team.errors.studentsAppearMultipleTimes', {\r\n                students: studentsAppearMultipleTimes.map((student) => `${student.first}:${student.second}`).join(','),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update showing whether the source selection or file selection and reset values\r\n     * @param {boolean} showFromExercise - New value to set\r\n     */\r\n    setShowImportFromExercise(showFromExercise: boolean) {\r\n        this.showImportFromExercise = showFromExercise;\r\n        this.sourceTeams = undefined;\r\n        this.sourceExercise = undefined;\r\n        this.initImportStrategy();\r\n        this.isImporting = false;\r\n        this.resetConflictingSets();\r\n    }\r\n\r\n    /**\r\n     * @returns A sample team that can be used to render the different conflict states in the legend below the source teams\r\n     */\r\n    get sampleTeamForLegend() {\r\n        const team = new Team();\r\n        const student = new User(1, 'ga12abc', 'John', 'Doe', 'john.doe@tum.de');\r\n        student.name = `${student.firstName} ${student.lastName}`;\r\n        team.students = [student];\r\n        return team;\r\n    }\r\n\r\n    get sampleErrorStudentLoginsForLegend(): string[] {\r\n        return this.sampleTeamForLegend.students!.map((student) => student.login).filter((login) => login !== undefined) as string[];\r\n    }\r\n\r\n    get showLegend() {\r\n        return Boolean(this.sourceTeams && this.numberOfConflictFreeSourceTeams !== this.sourceTeams.length);\r\n    }\r\n\r\n    get problematicRegistrationNumbers() {\r\n        return [...this.conflictingRegistrationNumbersSet];\r\n    }\r\n\r\n    get problematicLogins() {\r\n        return [...this.conflictingLoginsSet];\r\n    }\r\n\r\n    /**\r\n     * Adds given array to given set and returns a new set\r\n     * @param set to add array to\r\n     * @param array that will be added to set\r\n     * @returns A set that has values of both given set and array\r\n     */\r\n    private addArrayToSet(set: Set<string>, array: string[]) {\r\n        return new Set([...array, ...set.values()]);\r\n    }\r\n\r\n    /**\r\n     * Reset conflicting logins and registration numbers set\r\n     * Sets students appear in multiple teams to false\r\n     * Recomputes potential conflicts\r\n     */\r\n    private resetConflictingSets() {\r\n        this.conflictingLoginsSet = new Set();\r\n        this.conflictingRegistrationNumbersSet = new Set();\r\n        this.studentsAppearInMultipleTeams = false;\r\n        this.computePotentialConflictsBasedOnExistingTeams();\r\n    }\r\n}\r\n", "<form id=\"teamsImportDialogForm\" name=\"importForm\" role=\"form\" novalidate (ngSubmit)=\"importTeams()\" #editForm=\"ngForm\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <span [jhiTranslate]=\"'artemisApp.team.importTeams.dialogTitle'\"> Import teams into: </span>\r\n            <span>{{ exercise.title }}</span>\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"w100 row justify-content-center card-header\">\r\n            <div class=\"btn-group\">\r\n                <div class=\"btn\" [ngClass]=\"{ 'btn-primary': showImportFromExercise, 'btn-default': !showImportFromExercise }\" (click)=\"setShowImportFromExercise(true)\">\r\n                    <span jhiTranslate=\"artemisApp.team.importTeams.fromAnExercise\"></span>\r\n                </div>\r\n                <div class=\"btn\" [ngClass]=\"{ 'btn-primary': !showImportFromExercise, 'btn-default': showImportFromExercise }\" (click)=\"setShowImportFromExercise(false)\">\r\n                    <span jhiTranslate=\"artemisApp.team.importTeams.fromAFile\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            @if (showImportFromExercise) {\r\n                <p class=\"intro-text\" jhiTranslate=\"artemisApp.team.importTeams.introTextExercise\"></p>\r\n            }\r\n            @if (!showImportFromExercise) {\r\n                <p class=\"intro-text\" jhiTranslate=\"artemisApp.team.importTeams.introTextFile\"></p>\r\n            }\r\n        </div>\r\n        @if (!showImportFromExercise) {\r\n            <div class=\"form-group\">\r\n                <div class=\"d-flex align-items-end\">\r\n                    <jhi-teams-import-from-file-form (teamsChanged)=\"onTeamsChanged($event)\" />\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (showImportFromExercise) {\r\n            <div class=\"form-group\">\r\n                <div class=\"d-flex align-items-end\">\r\n                    <div>\r\n                        <label class=\"label-narrow\" jhiTranslate=\"artemisApp.team.sourceExercise.label\"></label>\r\n                        <jhi-help-icon text=\"artemisApp.team.sourceExercise.tooltip\" class=\"me-1\" />\r\n                    </div>\r\n                    @if (searchingExercises) {\r\n                        <fa-icon class=\"loading-spinner\" [icon]=\"faSpinner\" animation=\"spin\" />\r\n                    }\r\n                    @if (searchingExercisesNoResultsForQuery === '') {\r\n                        <span class=\"error-message text-danger\">\r\n                            <span jhiTranslate=\"artemisApp.team.exerciseSearch.noResults\"></span>\r\n                        </span>\r\n                    }\r\n                    @if (searchingExercisesNoResultsForQuery) {\r\n                        <span class=\"error-message text-danger\">\r\n                            <span jhiTranslate=\"artemisApp.team.exerciseSearch.noResultsForSearchTerm\"></span>\r\n                            <strong>{{ searchingExercisesNoResultsForQuery }}</strong>\r\n                        </span>\r\n                    }\r\n                    @if (searchingExercisesFailed) {\r\n                        <span class=\"error-message text-danger\" jhiTranslate=\"artemisApp.team.exerciseSearch.failed\"></span>\r\n                    }\r\n                </div>\r\n                <jhi-team-exercise-search\r\n                    id=\"teamExercises\"\r\n                    [course]=\"exercise.course!\"\r\n                    [ignoreExercises]=\"[exercise]\"\r\n                    (selectExercise)=\"onSelectSourceExercise($event)\"\r\n                    (searching)=\"searchingExercises = $event\"\r\n                    (searchNoResults)=\"searchingExercisesNoResultsForQuery = $event\"\r\n                    (searchFailed)=\"searchingExercisesFailed = $event\"\r\n                />\r\n            </div>\r\n        }\r\n        @if (sourceExercise || sourceTeams) {\r\n            <div class=\"form-group mt-2\">\r\n                <div class=\"d-flex align-items-end\">\r\n                    <div>\r\n                        <label class=\"label-narrow\" jhiTranslate=\"artemisApp.team.sourceTeams.label\"></label>\r\n                        <jhi-help-icon text=\"artemisApp.team.sourceTeams.tooltip\" class=\"me-1\" />\r\n                    </div>\r\n                    @if (loadingSourceTeams) {\r\n                        <fa-icon class=\"loading-spinner\" [icon]=\"faSpinner\" animation=\"spin\" />\r\n                    }\r\n                    @if (loadingSourceTeamsFailed) {\r\n                        <span class=\"error-message text-danger\" jhiTranslate=\"artemisApp.team.loadSourceTeams.failed\"></span>\r\n                    }\r\n                </div>\r\n                @if (sourceTeams) {\r\n                    <div>\r\n                        <ul class=\"list-group list-group--teams mt-2\">\r\n                            @for (team of sourceTeams; track team; let i = $index) {\r\n                                <li class=\"list-group-item-container d-flex align-items-center\">\r\n                                    <div class=\"list-group-item-index\">\r\n                                        {{ i + 1 }}\r\n                                    </div>\r\n                                    <div\r\n                                        class=\"list-group-item list-group-item--teams\"\r\n                                        [class.has-error]=\"teamShortNamesAlreadyExistingInExercise.includes(team.shortName!)\"\r\n                                        [class.has-success]=\"isSourceTeamFreeOfAnyConflicts(team)\"\r\n                                    >\r\n                                        <div class=\"team-name\">{{ team.shortName }}</div>\r\n                                        <jhi-team-students-list\r\n                                            class=\"team-students\"\r\n                                            [students]=\"team.students || []\"\r\n                                            [errorStudentLogins]=\"problematicLogins\"\r\n                                            [withRegistrationNumber]=\"true\"\r\n                                            [errorStudentRegistrationNumbers]=\"problematicRegistrationNumbers\"\r\n                                        />\r\n                                    </div>\r\n                                </li>\r\n                            }\r\n                            @if (!sourceTeams || sourceTeams.length === 0) {\r\n                                <li class=\"list-group-item-container d-flex align-items-center\">\r\n                                    <div class=\"list-group-item-index text-body-secondary\">1</div>\r\n                                    <div class=\"list-group-item list-group-item--teams py-5\" [class.has-warning]=\"sourceTeams?.length === 0\">\r\n                                        @if (showImportFromExercise && sourceTeams?.length === 0) {\r\n                                            <span jhiTranslate=\"artemisApp.team.noTeamsInSourceExercise\"></span>\r\n                                        }\r\n                                        @if (!showImportFromExercise && sourceTeams?.length === 0) {\r\n                                            <span jhiTranslate=\"artemisApp.team.noTeamsInFile\"></span>\r\n                                        }\r\n                                    </div>\r\n                                </li>\r\n                            }\r\n                        </ul>\r\n                        @if (showLegend) {\r\n                            <div class=\"source-teams-legend-container mt-4\">\r\n                                <hr class=\"mt-3 mb-2\" />\r\n                                <div>\r\n                                    <label jhiTranslate=\"artemisApp.team.sourceTeams.legend.label\"></label>\r\n                                    <jhi-help-icon text=\"artemisApp.team.sourceTeams.legend.tooltip\" class=\"me-1\" />\r\n                                </div>\r\n                                <div class=\"source-teams-legend-box\">\r\n                                    <div class=\"source-teams-legend d-flex justify-content-between\">\r\n                                        <div>\r\n                                            <div class=\"list-group-item--teams\" [class.has-success]=\"true\">\r\n                                                <div class=\"team-name\">{{ 'artemisApp.team.sourceTeams.legend.teamShortName' | artemisTranslate }}1</div>\r\n                                                <jhi-team-students-list class=\"team-students\" [students]=\"sampleTeamForLegend.students || []\" />\r\n                                            </div>\r\n                                            <div class=\"label-with-tooltip\">\r\n                                                <label jhiTranslate=\"artemisApp.team.sourceTeams.legend.items.conflictFreeTeam.label\"></label>\r\n                                                <jhi-help-icon text=\"artemisApp.team.sourceTeams.legend.items.conflictFreeTeam.tooltip\" class=\"me-1\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div class=\"list-group-item--teams\" [class.has-error]=\"true\">\r\n                                                <div class=\"team-name\">{{ 'artemisApp.team.sourceTeams.legend.teamShortName' | artemisTranslate }}2</div>\r\n                                                <jhi-team-students-list class=\"team-students\" [students]=\"sampleTeamForLegend.students || []\" />\r\n                                            </div>\r\n                                            <div class=\"label-with-tooltip\">\r\n                                                <label jhiTranslate=\"artemisApp.team.sourceTeams.legend.items.teamShortNameConflict.label\"></label>\r\n                                                <jhi-help-icon text=\"artemisApp.team.sourceTeams.legend.items.teamShortNameConflict.tooltip\" class=\"me-1\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div class=\"list-group-item--teams\">\r\n                                                <div class=\"team-name\">{{ 'artemisApp.team.sourceTeams.legend.teamShortName' | artemisTranslate }}3</div>\r\n                                                <jhi-team-students-list\r\n                                                    class=\"team-students\"\r\n                                                    [students]=\"sampleTeamForLegend.students || []\"\r\n                                                    [errorStudentLogins]=\"sampleErrorStudentLoginsForLegend\"\r\n                                                />\r\n                                            </div>\r\n                                            <div class=\"label-with-tooltip\">\r\n                                                <label jhiTranslate=\"artemisApp.team.sourceTeams.legend.items.studentConflict.label\"></label>\r\n                                                <jhi-help-icon text=\"artemisApp.team.sourceTeams.legend.items.studentConflict.tooltip\" class=\"me-1\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        @if (showImportStrategyChoices) {\r\n            <hr class=\"my-4\" />\r\n            <div class=\"form-group mb-0\">\r\n                <div>\r\n                    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.team.importStrategy.label\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.team.importStrategy.tooltip\" class=\"me-1\" />\r\n                </div>\r\n                <div class=\"d-flex flex-column mt-2 ps-2\">\r\n                    <label class=\"d-flex align-items-start\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"importStrategy\"\r\n                            class=\"radio-input-with-explanation\"\r\n                            [ngModel]=\"importStrategy\"\r\n                            (click)=\"updateImportStrategy(ImportStrategy.PURGE_EXISTING)\"\r\n                            [value]=\"ImportStrategy.PURGE_EXISTING\"\r\n                        />\r\n                        <div class=\"ms-2 radio-label-with-explanation\">\r\n                            <strong>\r\n                                {{ 'artemisApp.team.importStrategy.options.purgeExisting.label' | artemisTranslate }}\r\n                                <span class=\"badge bg-danger ms-1\" jhiTranslate=\"artemisApp.team.importStrategy.options.purgeExisting.badge\"></span>\r\n                            </strong>\r\n                            <p\r\n                                [class.text-body-secondary]=\"importStrategy !== ImportStrategy.PURGE_EXISTING\"\r\n                                class=\"explanation mb-2\"\r\n                                jhiTranslate=\"artemisApp.team.importStrategy.options.purgeExisting.explanation\"\r\n                            ></p>\r\n                        </div>\r\n                    </label>\r\n                    <label class=\"d-flex align-items-start\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"importStrategy\"\r\n                            class=\"radio-input-with-explanation\"\r\n                            [ngModel]=\"importStrategy\"\r\n                            (click)=\"updateImportStrategy(ImportStrategy.CREATE_ONLY)\"\r\n                            [value]=\"ImportStrategy.CREATE_ONLY\"\r\n                        />\r\n                        <div class=\"ms-2 radio-label-with-explanation\">\r\n                            <strong>\r\n                                {{ 'artemisApp.team.importStrategy.options.createOnly.label' | artemisTranslate }}\r\n                                <span class=\"badge bg-success ms-1\" jhiTranslate=\"artemisApp.team.importStrategy.options.createOnly.badge\"></span>\r\n                            </strong>\r\n                            <p\r\n                                [class.text-body-secondary]=\"importStrategy !== ImportStrategy.CREATE_ONLY\"\r\n                                class=\"explanation mb-0\"\r\n                                jhiTranslate=\"artemisApp.team.importStrategy.options.createOnly.explanation\"\r\n                            ></p>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        @if (showImportPreviewNumbers && sourceTeams) {\r\n            <div class=\"flex-shrink-0 me-2 d-flex\">\r\n                @if (studentsAppearInMultipleTeams) {\r\n                    <div>\r\n                        <strong jhiTranslate=\"artemisApp.team.importPreview.studentsInMultipleTeams\"></strong>\r\n                    </div>\r\n                } @else {\r\n                    @if (numberOfTeamsToBeImported! === 0) {\r\n                        <div>\r\n                            @if (sourceTeams.length === 0) {\r\n                                <strong jhiTranslate=\"artemisApp.team.importPreview.noTeamsToImport\"></strong>\r\n                            }\r\n                            @if (sourceTeams.length > 0) {\r\n                                <strong jhiTranslate=\"artemisApp.team.importPreview.noConflictFreeTeamsToImport\"></strong>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    @if (numberOfTeamsToBeImported! > 0) {\r\n                        @if (numberOfTeamsToBeDeleted! > 0) {\r\n                            <div class=\"me-3\"><strong jhiTranslate=\"artemisApp.team.importPreview.teamsToBeDeleted\"></strong> {{ numberOfTeamsToBeDeleted! }}</div>\r\n                        }\r\n                        @if (numberOfTeamsToBeImported! !== numberOfTeamsAfterImport!) {\r\n                            <div class=\"me-3\">\r\n                                <strong jhiTranslate=\"artemisApp.team.importPreview.teamsToBeImported\"></strong> {{ numberOfTeamsToBeImported! }}\r\n                                @if (numberOfTeamsToBeImported! < sourceTeams.length) {\r\n                                    <span jhiTranslate=\"artemisApp.team.importPreview.outOf\" [translateValues]=\"{ number: sourceTeams.length }\">\r\n                                        (out of {{ sourceTeams.length }})\r\n                                    </span>\r\n                                }\r\n                            </div>\r\n                        }\r\n                        <div><strong jhiTranslate=\"artemisApp.team.importPreview.totalTeamsAfterImport\"></strong> {{ numberOfTeamsAfterImport! }}</div>\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"flex-grow-1 d-flex justify-content-end\">\r\n            <button type=\"button\" class=\"btn btn-secondary cancel\" data-dismiss=\"modal\" (click)=\"clear()\">\r\n                <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n            </button>\r\n            @if (importStrategy !== ImportStrategy.PURGE_EXISTING) {\r\n                <button type=\"submit\" class=\"btn btn-warning\" [disabled]=\"editForm.invalid || isSubmitDisabled\">\r\n                    <fa-icon [icon]=\"faUpload\" class=\"me-2\" />\r\n                    <span jhiTranslate=\"entity.action.to-import\"></span>\r\n                    <fa-icon class=\"ms-1\" [hidden]=\"!isImporting\" animation=\"spin\" [icon]=\"faCircleNotch\" />\r\n                </button>\r\n            }\r\n            @if (importStrategy === ImportStrategy.PURGE_EXISTING) {\r\n                <button\r\n                    class=\"btn btn-warning\"\r\n                    [disabled]=\"editForm.invalid || isSubmitDisabled\"\r\n                    jhiDeleteButton\r\n                    [renderButtonText]=\"false\"\r\n                    [renderButtonStyle]=\"false\"\r\n                    [entityTitle]=\"exercise.title || ''\"\r\n                    deleteQuestion=\"artemisApp.team.purgeConfirmationDialog.question\"\r\n                    deleteConfirmationText=\"artemisApp.team.purgeConfirmationDialog.typeNameToConfirm\"\r\n                    (delete)=\"purgeAndImportTeams()\"\r\n                    [dialogError]=\"dialogError$\"\r\n                >\r\n                    <fa-icon [icon]=\"faUpload\" class=\"me-1\" />\r\n                    <span jhiTranslate=\"entity.action.purge\"></span> +\r\n                    <span jhiTranslate=\"entity.action.to-import\"></span>\r\n                    <fa-icon class=\"ms-1\" [hidden]=\"!isImporting\" animation=\"spin\" [icon]=\"faCircleNotch\" />\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Team } from 'app/entities/team.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { TeamsImportDialogComponent } from 'app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-teams-import-button',\r\n    template: `\r\n        <jhi-button\r\n            [btnType]=\"ButtonType.PRIMARY\"\r\n            [btnSize]=\"buttonSize\"\r\n            [icon]=\"faPlus\"\r\n            [title]=\"'artemisApp.team.importTeams.buttonLabel'\"\r\n            (onClick)=\"openTeamsImportDialog($event)\"\r\n        />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class TeamsImportButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() teams: Team[];\r\n    @Input() buttonSize: ButtonSize = ButtonSize.SMALL;\r\n\r\n    @Output() save: EventEmitter<Team[]> = new EventEmitter();\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n\r\n    /**\r\n     * Open up import dialog for teams\r\n     * @param {Event} event - Mouse Event which invoked the opening\r\n     */\r\n    openTeamsImportDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(TeamsImportDialogComponent, { keyboard: true, size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.exercise = this.exercise;\r\n        modalRef.componentInstance.teams = this.teams;\r\n\r\n        modalRef.result.then(\r\n            (teams: Team[]) => this.save.emit(teams),\r\n            () => {},\r\n        );\r\n    }\r\n}\r\n", "import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { Team } from 'app/entities/team.model';\r\nimport { TeamService } from 'app/exercises/shared/team/team.service';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { formatTeamAsSearchResult } from 'app/exercises/shared/team/team.utils';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TeamsExportButtonComponent } from './teams-import-dialog/teams-export-button.component';\r\nimport { TeamsImportButtonComponent } from './teams-import-dialog/teams-import-button.component';\r\nimport { TeamUpdateButtonComponent } from './team-update-dialog/team-update-button.component';\r\nimport { DataTableComponent } from 'app/shared/data-table/data-table.component';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TeamStudentsListComponent } from './team-participate/team-students-list.component';\r\nimport { TeamDeleteButtonComponent } from './team-update-dialog/team-delete-button.component';\r\n\r\nexport enum FilterProp {\r\n    ALL = 'all',\r\n    OWN = 'own',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-teams',\r\n    templateUrl: './teams.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        FormsModule,\r\n        TeamsExportButtonComponent,\r\n        TeamsImportButtonComponent,\r\n        TeamUpdateButtonComponent,\r\n        DataTableComponent,\r\n        NgxDatatableModule,\r\n        FaIconComponent,\r\n        RouterLink,\r\n        TeamStudentsListComponent,\r\n        TeamDeleteButtonComponent,\r\n    ],\r\n})\r\nexport class TeamsComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private exerciseService = inject(ExerciseService);\r\n    private teamService = inject(TeamService);\r\n    private accountService = inject(AccountService);\r\n\r\n    readonly FilterProp = FilterProp;\r\n    readonly ButtonSize = ButtonSize;\r\n\r\n    teams: Team[] = [];\r\n    teamCriteria: { filterProp: FilterProp } = { filterProp: FilterProp.ALL };\r\n    filteredTeamsSize = 0;\r\n    exercise: Exercise;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    isLoading: boolean;\r\n\r\n    currentUser: User;\r\n    isAdmin = false;\r\n\r\n    constructor() {\r\n        this.accountService.identity().then((user: User) => {\r\n            this.currentUser = user;\r\n            this.isAdmin = this.accountService.isAdmin();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component creation is done\r\n     */\r\n    ngOnInit() {\r\n        this.initTeamFilter();\r\n        this.loadAll();\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component destruction is done\r\n     */\r\n    ngOnDestroy() {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Load all team components\r\n     */\r\n    loadAll() {\r\n        this.route.params.subscribe((params) => {\r\n            this.isLoading = true;\r\n            this.exerciseService.find(params['exerciseId']).subscribe((exerciseResponse) => {\r\n                this.exercise = exerciseResponse.body!;\r\n                const teamOwnerId = this.teamCriteria.filterProp === FilterProp.OWN ? this.currentUser.id! : undefined;\r\n                this.teamService.findAllByExerciseId(params['exerciseId'], teamOwnerId).subscribe((teamsResponse) => {\r\n                    this.teams = teamsResponse.body!;\r\n                    this.isLoading = false;\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the team filter based on the query param \"filter\"\r\n     */\r\n    initTeamFilter() {\r\n        switch (this.route.snapshot.queryParamMap.get('filter')) {\r\n            case FilterProp.OWN:\r\n                this.teamCriteria.filterProp = FilterProp.OWN;\r\n                break;\r\n            default:\r\n                this.teamCriteria.filterProp = FilterProp.ALL;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the criteria by which to filter teams and the filter query param, then reloads teams\r\n     * @param filter New filter prop value\r\n     */\r\n    updateTeamFilter(filter: FilterProp) {\r\n        this.teamCriteria.filterProp = filter;\r\n        this.router.navigate([], { relativeTo: this.route, queryParams: { filter }, queryParamsHandling: 'merge', replaceUrl: true });\r\n        this.loadAll();\r\n    }\r\n\r\n    /**\r\n     * Called when a team has been added or was updated by TeamUpdateButtonComponent\r\n     *\r\n     * @param team Team that was added or updated\r\n     */\r\n    onTeamUpdate(team: Team) {\r\n        this.upsertTeam(team);\r\n    }\r\n\r\n    /**\r\n     * Called when a team has been deleted by TeamDeleteButtonComponent\r\n     *\r\n     * @param team Team that was deleted\r\n     */\r\n    onTeamDelete(team: Team) {\r\n        this.deleteTeam(team);\r\n    }\r\n\r\n    /**\r\n     * Called when teams were imported from another team exercise\r\n     *\r\n     * @param teams All teams that this exercise has now after the import\r\n     */\r\n    onTeamsImport(teams: Team[]) {\r\n        this.teams = teams;\r\n    }\r\n\r\n    /**\r\n     * Update the number of filtered teams\r\n     *\r\n     * @param filteredTeamsSize Total number of teams after filters have been applied\r\n     */\r\n    handleTeamsSizeChange = (filteredTeamsSize: number) => {\r\n        this.filteredTeamsSize = filteredTeamsSize;\r\n    };\r\n\r\n    /**\r\n     * Formats the results in the autocomplete overlay.\r\n     *\r\n     * @param team\r\n     */\r\n    searchResultFormatter = formatTeamAsSearchResult;\r\n\r\n    /**\r\n     * Converts a team object to a string that can be searched for. This is\r\n     * used by the autocomplete select inside the data table.\r\n     *\r\n     * @param team Team that was selected\r\n     */\r\n    searchTextFromTeam = (team: Team): string => {\r\n        return team.shortName!;\r\n    };\r\n\r\n    /**\r\n     * If team does not yet exists in teams, it is appended.\r\n     * If team already exists in teams, it is updated.\r\n     *\r\n     * @param team Team that is added or updated\r\n     */\r\n    private upsertTeam(team: Team) {\r\n        const index = this.teams.findIndex((t) => t.id === team.id);\r\n        if (index === -1) {\r\n            this.teams = [...this.teams, team];\r\n        } else {\r\n            this.teams = Object.assign([], this.teams, { [index]: team });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deleted an existing team from teams.\r\n     *\r\n     * @param team Team that is deleted\r\n     */\r\n    private deleteTeam(team: Team) {\r\n        this.teams = this.teams.filter((t) => t.id !== team.id);\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex\">\r\n        <div class=\"mb-3\">\r\n            <h2 class=\"mb-1\">\r\n                <span>{{ exercise?.title }} - </span>{{ filteredTeamsSize }} <span jhiTranslate=\"artemisApp.team.home.title\"></span>\r\n            </h2>\r\n            <div class=\"d-flex align-items-center\">\r\n                <label class=\"radio-inline mb-0 d-flex align-items-center\">\r\n                    <input type=\"radio\" [ngModel]=\"teamCriteria.filterProp\" (click)=\"updateTeamFilter(FilterProp.ALL)\" [value]=\"FilterProp.ALL\" />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.team.filters.all\"></span>\r\n                </label>\r\n                <label class=\"radio-inline ms-2 mb-0 d-flex align-items-center\">\r\n                    <input type=\"radio\" [ngModel]=\"teamCriteria.filterProp\" (click)=\"updateTeamFilter(FilterProp.OWN)\" [value]=\"FilterProp.OWN\" />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.team.filters.own\"></span>\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div class=\"d-flex ms-auto\">\r\n            @if (exercise?.isAtLeastEditor && teams && teams.length > 0) {\r\n                <jhi-teams-export-button class=\"me-2\" [teams]=\"teams\" [buttonSize]=\"ButtonSize.MEDIUM\" />\r\n            }\r\n            @if (exercise?.isAtLeastEditor) {\r\n                <jhi-teams-import-button class=\"me-2\" [exercise]=\"exercise\" [teams]=\"teams\" [buttonSize]=\"ButtonSize.MEDIUM\" (save)=\"onTeamsImport($event)\" />\r\n            }\r\n            <jhi-team-update-button [exercise]=\"exercise\" [buttonSize]=\"ButtonSize.MEDIUM\" (save)=\"onTeamUpdate($event)\" />\r\n        </div>\r\n    </div>\r\n    <jhi-data-table\r\n        [isLoading]=\"isLoading\"\r\n        entityType=\"team\"\r\n        [allEntities]=\"teams\"\r\n        entitiesPerPageTranslation=\"artemisApp.exercise.resultsPerPage\"\r\n        showAllEntitiesTranslation=\"artemisApp.exercise.showAllResults\"\r\n        searchPlaceholderTranslation=\"artemisApp.exercise.searchForTeams\"\r\n        [searchFields]=\"['name', 'shortName', 'students.name', 'students.login', 'owner.name', 'owner.login']\"\r\n        [searchTextFromEntity]=\"searchTextFromTeam\"\r\n        [searchResultFormatter]=\"searchResultFormatter\"\r\n        (entitiesSizeChange)=\"handleTeamsSizeChange($event)\"\r\n    >\r\n        <ng-template let-settings=\"settings\" let-controls=\"controls\">\r\n            <ngx-datatable\r\n                class=\"bootstrap\"\r\n                [limit]=\"settings.limit\"\r\n                [sortType]=\"settings.sortType\"\r\n                [columnMode]=\"settings.columnMode\"\r\n                [headerHeight]=\"settings.headerHeight\"\r\n                [footerHeight]=\"settings.footerHeight\"\r\n                [rowHeight]=\"settings.rowHeight\"\r\n                [rows]=\"settings.rows\"\r\n                [rowClass]=\"settings.rowClass\"\r\n                [scrollbarH]=\"settings.scrollbarH\"\r\n            >\r\n                <ngx-datatable-column prop=\"id\" [minWidth]=\"60\" [width]=\"60\" [maxWidth]=\"60\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('id')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"global.field.id\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('id')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <a [routerLink]=\"['/course-management', exercise?.course?.id, 'exercises', exercise?.id, 'teams', value]\">\r\n                            {{ value }}\r\n                        </a>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"name\" [minWidth]=\"100\" [width]=\"120\" [maxWidth]=\"160\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('name')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.team.name.label\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('name')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column [minWidth]=\"100\" [width]=\"120\" [maxWidth]=\"160\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('shortName')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.team.shortName.label\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('shortName')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"row\">\r\n                        <a [routerLink]=\"['/course-management', exercise?.course?.id, 'exercises', exercise?.id, 'teams', value.id]\">\r\n                            {{ value.shortName }}\r\n                        </a>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"owner\" [minWidth]=\"140\" [width]=\"160\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('owner.name')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.team.tutor\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('owner.name')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (isAdmin) {\r\n                            <a [routerLink]=\"['/admin', 'user-management', value?.login]\"> {{ value?.name }}</a>\r\n                        }\r\n                        @if (!isAdmin && value) {\r\n                            <a [href]=\"'mailto:' + value?.email\">{{ value?.name }}</a>\r\n                        }\r\n                        @if (!isAdmin && !value) {\r\n                            <span class=\"font-weight-bold\" jhiTranslate=\"artemisApp.team.detail.noOwner\"></span>\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"students\" [minWidth]=\"200\" [width]=\"600\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" style=\"cursor: text\">\r\n                            <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.team.students\"></span>\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <jhi-team-students-list [students]=\"value\" [renderLinks]=\"isAdmin\" />\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"220\" [width]=\"220\" [maxWidth]=\"220\">\r\n                    <ng-template ngx-datatable-cell-template let-value=\"row\">\r\n                        <div class=\"w-100 text-end\">\r\n                            @if (exercise.isAtLeastInstructor || value.owner?.id === currentUser.id) {\r\n                                <jhi-team-update-button [exercise]=\"exercise\" [team]=\"value\" (save)=\"onTeamUpdate($event)\" />\r\n                            }\r\n                            @if (exercise.isAtLeastInstructor) {\r\n                                <jhi-team-delete-button class=\"ms-1\" [exercise]=\"exercise\" [team]=\"value\" (delete)=\"onTeamDelete($event)\" />\r\n                            }\r\n                        </div>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n            </ngx-datatable>\r\n        </ng-template>\r\n    </jhi-data-table>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["TeamsExportButtonComponent", "teamService", "inject", "TeamService", "ButtonType", "ButtonSize", "teams", "buttonSize", "SMALL", "faFileExport", "exportTeams", "event", "stopPropagation", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "PRIMARY", "ButtonComponent", "encapsulation", "import_papaparse", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faSpinner", "csvColumns", "Object", "freeze", "registrationNumber", "matrikelNummer", "matriculationNumber", "name", "vorname", "nachname", "firstName", "familyName", "lastName", "surname", "login", "username", "user", "benutzer", "benutzerName", "team", "teamName", "gruppe", "TeamsImportFromFileFormComponent", "changeDetector", "inject", "ChangeDetectorRef", "translateService", "TranslateService", "teamsChanged", "EventEmitter", "sourceTeams", "importedTeams", "importFile", "importFileName", "loading", "generateFileReader", "FileReader", "onFileLoadImport", "fileReader", "__async", "type", "JSON", "parse", "result", "csvEntries", "parseCSVFile", "convertCsvEntries", "Error", "instant", "fileType", "convertTeams", "emit", "undefined", "control", "document", "getElementById", "value", "e", "message", "alert", "setImportFile", "event", "target", "files", "length", "fileList", "onload", "readAsText", "detectChanges", "csv", "Promise", "resolve", "reject", "download", "header", "transformHeader", "toLowerCase", "replace", "skipEmptyLines", "complete", "results", "data", "error", "entries", "map", "entry", "importTeam", "teams", "forEach", "student", "index", "newStudent", "User", "visibleRegistrationNumber", "entryNr", "trim", "studentName", "shortName", "match", "SHORT_NAME_PATTERN", "teamIndex", "findIndex", "newTeam", "Team", "students", "push", "selectors", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275template", "TeamsImportFromFileFormComponent_Conditional_6_Template", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275conditional", "TranslateDirective", "HelpIconComponent", "FaIconComponent", "styles", "TeamExerciseSearchComponent", "courseService", "inject", "CourseManagementService", "translateService", "TranslateService", "ngbTypeahead", "focus$", "Subject", "click$", "course", "ignoreExercises", "selectExercise", "EventEmitter", "searching", "searchQueryTooShort", "searchFailed", "searchNoResults", "exercise", "exerciseOptions", "exerciseOptionsLoaded", "inputDisplayValue", "onAutocompleteSelect", "searchResultFormatter", "emit", "searchInputFormatter", "title", "releaseDate", "date", "format", "ArtemisDatePipe", "currentLang", "searchMatchesExercise", "searchTerm", "toLowerCase", "includes", "onSearch", "text$", "clicksWithClosedPopup$", "pipe", "filter", "isPopupOpen", "inputFocus$", "merge", "tap", "undefined", "switchMap", "exerciseOptionsSource$", "of", "loadExerciseOptions", "combineLatest", "match", "length", "map", "orderBy", "findWithExercises", "id", "courseResponse", "body", "exercises", "teamMode", "e", "catchError", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275twoWayBindingSet", "\u0275\u0275resetView", "\u0275\u0275listener", "item", "next", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275property", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "NgbTypeahead", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onTeamsChanged", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faSpinner", "\u0275\u0275textInterpolate", "searchingExercisesNoResultsForQuery", "\u0275\u0275template", "TeamsImportDialogComponent_Conditional_41_Conditional_12_Template", "TeamsImportDialogComponent_Conditional_41_Conditional_13_Template", "TeamsImportDialogComponent_Conditional_41_Conditional_14_Template", "TeamsImportDialogComponent_Conditional_41_Conditional_15_Template", "_r4", "onSelectSourceExercise", "searchingExercises", "searchingExercisesFailed", "\u0275\u0275conditional", "exercise", "course", "\u0275\u0275pureFunction1", "_c2", "\u0275\u0275textInterpolate1", "\u0275$index_167_r6", "\u0275\u0275classProp", "teamShortNamesAlreadyExistingInExercise", "includes", "team_r5", "shortName", "isSourceTeamFreeOfAnyConflicts", "students", "\u0275\u0275pureFunction0", "_c3", "problematicLogins", "problematicRegistrationNumbers", "TeamsImportDialogComponent_Conditional_42_Conditional_15_Conditional_7_Conditional_8_Template", "TeamsImportDialogComponent_Conditional_42_Conditional_15_Conditional_7_Conditional_9_Template", "sourceTeams", "length", "showImportFromExercise", "\u0275\u0275pipeBind1", "sampleTeamForLegend", "sampleErrorStudentLoginsForLegend", "\u0275\u0275repeaterCreate", "TeamsImportDialogComponent_Conditional_42_Conditional_15_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "TeamsImportDialogComponent_Conditional_42_Conditional_15_Conditional_7_Template", "TeamsImportDialogComponent_Conditional_42_Conditional_15_Conditional_9_Template", "\u0275\u0275repeater", "showLegend", "TeamsImportDialogComponent_Conditional_42_Conditional_12_Template", "TeamsImportDialogComponent_Conditional_42_Conditional_13_Template", "TeamsImportDialogComponent_Conditional_42_Conditional_15_Template", "loadingSourceTeams", "loadingSourceTeamsFailed", "_r7", "updateImportStrategy", "ImportStrategy", "PURGE_EXISTING", "CREATE_ONLY", "importStrategy", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_1_Conditional_3_Template", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_1_Conditional_4_Template", "numberOfTeamsToBeDeleted", "_c4", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_2_Conditional_2_Conditional_5_Template", "numberOfTeamsToBeImported", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_2_Conditional_1_Template", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_2_Conditional_2_Template", "numberOfTeamsAfterImport", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_1_Template", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Conditional_2_Template", "TeamsImportDialogComponent_Conditional_47_Conditional_3_Template", "TeamsImportDialogComponent_Conditional_47_Conditional_4_Template", "studentsAppearInMultipleTeams", "editForm_r8", "invalid", "isSubmitDisabled", "faUpload", "isImporting", "faCircleNotch", "_r9", "purgeAndImportTeams", "title", "dialogError$", "TeamsImportDialogComponent", "teamService", "inject", "TeamService", "activeModal", "NgbActiveModal", "alertService", "AlertService", "ActionType", "importForm", "teams", "sourceExercise", "defaultImportStrategy", "sourceTeamsFreeOfConflicts", "conflictingRegistrationNumbersSet", "Set", "conflictingLoginsSet", "dialogErrorSource", "Subject", "asObservable", "faBan", "ngOnInit", "computePotentialConflictsBasedOnExistingTeams", "ngOnDestroy", "unsubscribe", "loadSourceTeams", "undefined", "findAllByExerciseId", "id", "subscribe", "next", "teamsResponse", "body", "computeSourceTeamsFreeOfConflicts", "error", "initImportStrategy", "map", "team", "studentLoginsAlreadyExistingInExercise", "flatMap", "student", "login", "studentRegistrationNumbersAlreadyExistingInExercise", "visibleRegistrationNumber", "addArrayToSet", "filter", "sourceTeam", "some", "has", "numberOfConflictFreeSourceTeams", "showImportStrategyChoices", "showImportPreviewNumbers", "Boolean", "clear", "dismiss", "importTeams", "importTeamsFromSourceExercise", "res", "onSaveSuccess", "onSaveError", "resetConflictingSets", "fileTeams", "fileTeam", "studentLoginsAlreadyExistingInOtherTeams", "findIdentifiersWhichAppearsMultipleTimes", "studentRegistrationNumbersAlreadyExistingInOtherTeams", "users", "identifier", "occurrenceMap", "Map", "forEach", "user", "identifierValue", "get", "set", "keys", "key", "close", "setTimeout", "success", "numberOfImportedTeams", "httpErrorResponse", "errorKey", "params", "registrationNumbers", "logins", "onStudentsNotFoundError", "onStudentsAppearMultipleTimesError", "notFoundRegistrationNumbers", "notFoundLogins", "studentsAppearMultipleTimes", "first", "second", "join", "setShowImportFromExercise", "showFromExercise", "Team", "User", "name", "firstName", "lastName", "array", "values", "selectors", "viewQuery", "rf", "ctx", "i0", "_r1", "TeamsImportDialogComponent_Conditional_37_Template", "TeamsImportDialogComponent_Conditional_38_Template", "TeamsImportDialogComponent_Conditional_40_Template", "TeamsImportDialogComponent_Conditional_41_Template", "TeamsImportDialogComponent_Conditional_42_Template", "TeamsImportDialogComponent_Conditional_43_Template", "TeamsImportDialogComponent_Conditional_47_Template", "TeamsImportDialogComponent_Conditional_57_Template", "TeamsImportDialogComponent_Conditional_58_Template", "\u0275\u0275pureFunction2", "_c1", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "TranslateDirective", "NgClass", "TeamsImportFromFileFormComponent", "HelpIconComponent", "FaIconComponent", "TeamExerciseSearchComponent", "TeamStudentsListComponent", "DeleteButtonDirective", "ArtemisTranslatePipe", "styles", "encapsulation", "TeamsImportButtonComponent", "modalService", "inject", "NgbModal", "ButtonType", "ButtonSize", "exercise", "teams", "buttonSize", "SMALL", "save", "EventEmitter", "faPlus", "openTeamsImportDialog", "event", "stopPropagation", "modalRef", "open", "TeamsImportDialogComponent", "keyboard", "size", "backdrop", "componentInstance", "result", "then", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "PRIMARY", "ButtonComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "teams", "ButtonSize", "MEDIUM", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onTeamsImport", "\u0275\u0275elementEnd", "exercise", "_r3", "controls_r4", "controls", "onSort", "iconForSortPropField", "\u0275\u0275pureFunction3", "_c1", "course", "id", "value_r5", "\u0275\u0275textInterpolate1", "_r6", "\u0275\u0275textInterpolate", "value_r7", "_r8", "value_r9", "shortName", "_r10", "\u0275\u0275pureFunction1", "_c2", "value_r11", "login", "name", "email", "\u0275\u0275sanitizeUrl", "\u0275\u0275template", "TeamsComponent_ng_template_42_ng_template_28_Conditional_1_Template", "TeamsComponent_ng_template_42_ng_template_28_Conditional_2_Template", "TeamsComponent_ng_template_42_ng_template_28_Conditional_3_Template", "\u0275\u0275conditional", "isAdmin", "value_r12", "_r13", "onTeamUpdate", "value_r14", "_r15", "onTeamDelete", "TeamsComponent_ng_template_42_ng_template_40_Conditional_3_Template", "TeamsComponent_ng_template_42_ng_template_40_Conditional_4_Template", "isAtLeastInstructor", "owner", "currentUser", "TeamsComponent_ng_template_42_ng_template_5_Template", "TeamsComponent_ng_template_42_ng_template_7_Template", "TeamsComponent_ng_template_42_ng_template_12_Template", "TeamsComponent_ng_template_42_ng_template_14_Template", "TeamsComponent_ng_template_42_ng_template_19_Template", "TeamsComponent_ng_template_42_ng_template_21_Template", "TeamsComponent_ng_template_42_ng_template_26_Template", "TeamsComponent_ng_template_42_ng_template_28_Template", "TeamsComponent_ng_template_42_ng_template_33_Template", "TeamsComponent_ng_template_42_ng_template_35_Template", "TeamsComponent_ng_template_42_ng_template_40_Template", "settings_r16", "limit", "sortType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "rows", "rowClass", "scrollbarH", "FilterProp", "TeamsComponent", "route", "inject", "ActivatedRoute", "router", "Router", "exerciseService", "ExerciseService", "teamService", "TeamService", "accountService", "AccountService", "teamCriteria", "filterProp", "ALL", "filteredTeamsSize", "dialogErrorSource", "Subject", "dialogError$", "asObservable", "isLoading", "constructor", "identity", "then", "user", "ngOnInit", "initTeamFilter", "loadAll", "ngOnDestroy", "unsubscribe", "params", "subscribe", "find", "exerciseResponse", "body", "teamOwnerId", "OWN", "undefined", "findAllByExerciseId", "teamsResponse", "snapshot", "queryParamMap", "get", "updateTeamFilter", "filter", "navigate", "relativeTo", "queryParams", "queryParamsHandling", "replaceUrl", "team", "upsertTeam", "deleteTeam", "handleTeamsSizeChange", "searchResultFormatter", "formatTeamAsSearchResult", "searchTextFromTeam", "index", "findIndex", "t", "Object", "assign", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "TeamsComponent_Conditional_34_Template", "TeamsComponent_Conditional_35_Template", "TeamsComponent_ng_template_42_Template", "title", "isAtLeastEditor", "length", "\u0275\u0275pureFunction0", "_c0", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgModel", "TeamsExportButtonComponent", "TeamsImportButtonComponent", "TeamUpdateButtonComponent", "DataTableComponent", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "FaIconComponent", "RouterLink", "TeamStudentsListComponent", "TeamDeleteButtonComponent", "encapsulation"]
}
