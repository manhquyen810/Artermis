{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/manage/modeling-exercise-detail.component.ts", "src/main/webapp/app/exercises/modeling/manage/modeling-exercise-detail.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { UMLModel } from '@ls1intum/apollon';\r\nimport { NonProgrammingExerciseDetailCommonActionsComponent } from 'app/exercises/shared/exercise-detail-common-actions/non-programming-exercise-detail-common-actions.component';\r\nimport { ExerciseDetailStatisticsComponent } from 'app/exercises/shared/statistics/exercise-detail-statistics.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ModelingExerciseService } from './modeling-exercise.service';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { ExerciseManagementStatisticsDto } from 'app/exercises/shared/statistics/exercise-management-statistics-dto';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { StatisticsService } from 'app/shared/statistics-graph/statistics.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport {\r\n    getExerciseGeneralDetailsSection,\r\n    getExerciseGradingDefaultDetails,\r\n    getExerciseGradingInstructionsCriteriaDetails,\r\n    getExerciseModeDetailSection,\r\n    getExerciseProblemDetailSection,\r\n} from 'app/exercises/shared/utils';\r\nimport { DetailOverviewSection, DetailType } from 'app/detail-overview-list/detail-overview-list.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { DetailOverviewListComponent } from 'app/detail-overview-list/detail-overview-list.component';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-exercise-detail',\r\n    templateUrl: './modeling-exercise-detail.component.html',\r\n    imports: [TranslateDirective, DocumentationButtonComponent, NonProgrammingExerciseDetailCommonActionsComponent, ExerciseDetailStatisticsComponent, DetailOverviewListComponent],\r\n})\r\nexport class ModelingExerciseDetailComponent implements OnInit, OnDestroy {\r\n    private eventManager = inject(EventManager);\r\n    private modelingExerciseService = inject(ModelingExerciseService);\r\n    private route = inject(ActivatedRoute);\r\n    private artemisMarkdown = inject(ArtemisMarkdownService);\r\n    private alertService = inject(AlertService);\r\n    private statisticsService = inject(StatisticsService);\r\n    private accountService = inject(AccountService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    readonly documentationType: DocumentationType = 'Model';\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly dayjs = dayjs;\r\n\r\n    modelingExercise: ModelingExercise;\r\n    course?: Course;\r\n    private subscription: Subscription;\r\n    private eventSubscriber: Subscription;\r\n    problemStatement: SafeHtml;\r\n    gradingInstructions: SafeHtml;\r\n    exampleSolution: SafeHtml;\r\n    exampleSolutionUML: UMLModel;\r\n    numberOfClusters: number;\r\n    detailOverviewSections: DetailOverviewSection[];\r\n\r\n    doughnutStats: ExerciseManagementStatisticsDto;\r\n    isExamExercise: boolean;\r\n\r\n    isAdmin = false;\r\n    isApollonProfileActive = false;\r\n\r\n    ngOnInit() {\r\n        this.isAdmin = this.accountService.isAdmin();\r\n        this.subscription = this.route.params.subscribe((params) => {\r\n            // Checks if the current environment includes \"apollon\" profile\r\n            this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                if (profileInfo && profileInfo.activeProfiles.includes('apollon')) {\r\n                    this.isApollonProfileActive = true;\r\n                }\r\n                this.load(params['exerciseId']);\r\n            });\r\n        });\r\n        this.registerChangeInModelingExercises();\r\n    }\r\n\r\n    load(exerciseId: number) {\r\n        this.modelingExerciseService.find(exerciseId).subscribe((modelingExerciseResponse: HttpResponse<ModelingExercise>) => {\r\n            this.modelingExercise = modelingExerciseResponse.body!;\r\n            this.isExamExercise = this.modelingExercise.exerciseGroup !== undefined;\r\n            this.course = this.isExamExercise ? this.modelingExercise.exerciseGroup?.exam?.course : this.modelingExercise.course;\r\n            this.problemStatement = this.artemisMarkdown.safeHtmlForMarkdown(this.modelingExercise.problemStatement);\r\n            this.gradingInstructions = this.artemisMarkdown.safeHtmlForMarkdown(this.modelingExercise.gradingInstructions);\r\n            this.exampleSolution = this.artemisMarkdown.safeHtmlForMarkdown(this.modelingExercise.exampleSolutionExplanation);\r\n            if (this.modelingExercise.exampleSolutionModel && this.modelingExercise.exampleSolutionModel !== '') {\r\n                this.exampleSolutionUML = JSON.parse(this.modelingExercise.exampleSolutionModel);\r\n            }\r\n            this.detailOverviewSections = this.getExerciseDetailSections();\r\n        });\r\n        this.statisticsService.getExerciseStatistics(exerciseId).subscribe((statistics: ExerciseManagementStatisticsDto) => {\r\n            this.doughnutStats = statistics;\r\n        });\r\n        if (this.isAdmin) {\r\n            this.countModelClusters(exerciseId);\r\n        }\r\n    }\r\n\r\n    getExerciseDetailSections(): DetailOverviewSection[] {\r\n        const exercise = this.modelingExercise;\r\n        const generalSection = getExerciseGeneralDetailsSection(exercise);\r\n        const modeSection = getExerciseModeDetailSection(exercise);\r\n        const problemSection = getExerciseProblemDetailSection(this.problemStatement, this.modelingExercise);\r\n        const defaultGradingDetails = getExerciseGradingDefaultDetails(exercise);\r\n        const gradingInstructionsCriteriaDetails = getExerciseGradingInstructionsCriteriaDetails(exercise, this.gradingInstructions);\r\n        return [\r\n            generalSection,\r\n            modeSection,\r\n            problemSection,\r\n            {\r\n                headline: 'artemisApp.exercise.sections.solution',\r\n                details: [\r\n                    {\r\n                        type: DetailType.ModelingEditor,\r\n                        title: 'artemisApp.exercise.sections.solution',\r\n                        data: { umlModel: this.exampleSolutionUML, diagramType: exercise.diagramType, title: exercise.title, isApollonProfileActive: this.isApollonProfileActive },\r\n                    },\r\n                    {\r\n                        title: 'artemisApp.modelingExercise.exampleSolutionExplanation',\r\n                        type: DetailType.Markdown,\r\n                        data: { innerHtml: this.exampleSolution },\r\n                    },\r\n                    {\r\n                        title: 'artemisApp.exercise.exampleSolutionPublicationDate',\r\n                        type: DetailType.Date,\r\n                        data: { date: exercise.exampleSolutionPublicationDate },\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                headline: 'artemisApp.exercise.sections.grading',\r\n                details: [\r\n                    ...defaultGradingDetails,\r\n                    { type: DetailType.Text, title: 'artemisApp.modelingExercise.diagramType', data: { text: exercise.diagramType } },\r\n                    ...gradingInstructionsCriteriaDetails,\r\n                    this.isAdmin && { type: DetailType.Text, title: 'artemisApp.modelingExercise.checkClusters.text', data: { text: this.numberOfClusters } },\r\n                ],\r\n            },\r\n        ];\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n        this.eventManager.destroy(this.eventSubscriber);\r\n    }\r\n\r\n    registerChangeInModelingExercises() {\r\n        this.eventSubscriber = this.eventManager.subscribe('modelingExerciseListModification', () => {\r\n            this.load(this.modelingExercise.id!);\r\n        });\r\n    }\r\n\r\n    buildModelClusters() {\r\n        if (this.modelingExercise && this.modelingExercise.id) {\r\n            this.modelingExerciseService.buildClusters(this.modelingExercise.id).subscribe({\r\n                next: () => {\r\n                    this.alertService.success('artemisApp.modelingExercise.buildClusters.success');\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.modelingExercise.buildClusters.error');\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteModelClusters() {\r\n        if (this.modelingExercise && this.modelingExercise.id) {\r\n            this.modelingExerciseService.deleteClusters(this.modelingExercise.id).subscribe({\r\n                next: () => {\r\n                    this.alertService.success('artemisApp.modelingExercise.deleteClusters.success');\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.modelingExercise.deleteClusters.error');\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    countModelClusters(exerciseId: number) {\r\n        if (exerciseId) {\r\n            this.modelingExerciseService.getNumberOfClusters(exerciseId).subscribe({\r\n                next: (res) => {\r\n                    this.numberOfClusters = res?.body || 0;\r\n                    this.detailOverviewSections = this.modelingExercise && this.getExerciseDetailSections();\r\n                },\r\n                error: () => {\r\n                    this.alertService.error('artemisApp.modelingExercise.checkClusters.error');\r\n                },\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        @if (modelingExercise) {\r\n            <div>\r\n                <div class=\"d-flex align-items-center\">\r\n                    <h2><span jhiTranslate=\"artemisApp.modelingExercise.detail.title\"></span> {{ modelingExercise.id }}</h2>\r\n                    <jhi-documentation-button [type]=\"documentationType\" />\r\n                </div>\r\n                <hr />\r\n                <div class=\"text-start\">\r\n                    @if (course) {\r\n                        <jhi-non-programming-exercise-detail-common-actions [isExamExercise]=\"isExamExercise\" [course]=\"course\" [exercise]=\"modelingExercise\" />\r\n                    }\r\n                </div>\r\n                <hr />\r\n                <div class=\"mb-1\">\r\n                    <button (click)=\"buildModelClusters()\" class=\"btn btn-primary btn-sm me-1\" jhiTranslate=\"artemisApp.modelingExercise.buildClusters.action\"></button>\r\n                    <button (click)=\"deleteModelClusters()\" class=\"btn btn-primary btn-sm\" jhiTranslate=\"artemisApp.modelingExercise.deleteClusters.action\"></button>\r\n                </div>\r\n                @if (!modelingExercise.releaseDate || dayjs(modelingExercise.releaseDate).isBefore(dayjs())) {\r\n                    <div class=\"mt-3\">\r\n                        <jhi-exercise-detail-statistics\r\n                            [exercise]=\"modelingExercise\"\r\n                            [doughnutStats]=\"doughnutStats\"\r\n                            [exerciseType]=\"ExerciseType.MODELING\"\r\n                            class=\"d-flex justify-content-around\"\r\n                        />\r\n                    </div>\r\n                }\r\n                <jhi-detail-overview-list [sections]=\"detailOverviewSections\" />\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "isExamExercise", "course", "modelingExercise", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "doughnutStats", "ExerciseType", "MODELING", "\u0275\u0275template", "ModelingExerciseDetailComponent_Conditional_4_Conditional_16_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "buildModelClusters", "deleteModelClusters", "ModelingExerciseDetailComponent_Conditional_4_Conditional_27_Template", "\u0275\u0275textInterpolate1", "id", "documentationType", "\u0275\u0275conditional", "releaseDate", "dayjs", "isBefore", "detailOverviewSections", "ModelingExerciseDetailComponent", "eventManager", "inject", "EventManager", "modelingExerciseService", "ModelingExerciseService", "route", "ActivatedRoute", "artemisMarkdown", "ArtemisMarkdownService", "alertService", "AlertService", "statisticsService", "StatisticsService", "accountService", "AccountService", "profileService", "ProfileService", "subscription", "eventSubscriber", "problemStatement", "gradingInstructions", "exampleSolution", "exampleSolutionUML", "numberOfClusters", "isAdmin", "isApollonProfileActive", "ngOnInit", "params", "subscribe", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "load", "registerChangeInModelingExercises", "exerciseId", "find", "modelingExerciseResponse", "body", "exerciseGroup", "undefined", "exam", "safeHtmlForMarkdown", "exampleSolutionExplanation", "exampleSolutionModel", "JSON", "parse", "getExerciseDetailSections", "getExerciseStatistics", "statistics", "countModelClusters", "exercise", "generalSection", "getExerciseGeneralDetailsSection", "modeSection", "getExerciseModeDetailSection", "problemSection", "getExerciseProblemDetailSection", "defaultGradingDetails", "getExerciseGradingDefaultDetails", "gradingInstructionsCriteriaDetails", "getExerciseGradingInstructionsCriteriaDetails", "headline", "details", "type", "DetailType", "ModelingEditor", "title", "data", "umlModel", "diagramType", "Markdown", "innerHtml", "Date", "date", "exampleSolutionPublicationDate", "Text", "text", "ngOnDestroy", "unsubscribe", "destroy", "buildClusters", "next", "success", "error", "deleteClusters", "getNumberOfClusters", "res", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "ModelingExerciseDetailComponent_Conditional_4_Template", "TranslateDirective", "DocumentationButtonComponent", "NonProgrammingExerciseDetailCommonActionsComponent", "ExerciseDetailStatisticsComponent", "DetailOverviewListComponent", "encapsulation"]
}
