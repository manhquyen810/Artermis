{"version":3,"sources":["node_modules/ngx-webstorage/fesm2022/ngx-webstorage.mjs"],"sourcesContent":["import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, inject, makeEnvironmentProviders, provideAppInitializer } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nvar StorageStrategies = /*#__PURE__*/function (StorageStrategies) {\n  StorageStrategies[\"Local\"] = \"local_strategy\";\n  StorageStrategies[\"Session\"] = \"session_strategy\";\n  StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n  return StorageStrategies;\n}(StorageStrategies || {});\nclass CompatHelper {\n  static isStorageAvailable(storage) {\n    let available = true;\n    try {\n      if (typeof storage === 'object') {\n        storage.setItem('test-storage', 'foobar');\n        storage.removeItem('test-storage');\n      } else available = false;\n    } catch (e) {\n      available = false;\n    }\n    return available;\n  }\n}\nfunction noop() {}\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\nlet StorageKeyManager = /*#__PURE__*/(() => {\n  class StorageKeyManager {\n    static {\n      this.prefix = DefaultPrefix;\n    }\n    static {\n      this.separator = DefaultSeparator;\n    }\n    static {\n      this.isCaseSensitive = DefaultIsCaseSensitive;\n    }\n    static normalize(raw) {\n      raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n      return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n    }\n    static isNormalizedKey(key) {\n      return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n    }\n    static setPrefix(prefix) {\n      StorageKeyManager.prefix = prefix;\n    }\n    static setSeparator(separator) {\n      StorageKeyManager.separator = separator;\n    }\n    static setCaseSensitive(enable) {\n      StorageKeyManager.isCaseSensitive = enable;\n    }\n    static consumeConfiguration(config) {\n      if ('prefix' in config) this.setPrefix(config.prefix);\n      if ('separator' in config) this.setSeparator(config.separator);\n      if ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n    }\n  }\n  return StorageKeyManager;\n})();\nclass SyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n  retrieve(key) {\n    let value;\n    this.strategy.get(StorageKeyManager.normalize(key)).subscribe(result => value = typeof result === 'undefined' ? null : result);\n    return value;\n  }\n  store(key, value) {\n    this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n    return value;\n  }\n  clear(key) {\n    if (key !== undefined) this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);else this.strategy.clear().subscribe(noop);\n  }\n  getStrategyName() {\n    return this.strategy.name;\n  }\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n}\nclass AsyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n  retrieve(key) {\n    return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(value => typeof value === 'undefined' ? null : value));\n  }\n  store(key, value) {\n    return this.strategy.set(StorageKeyManager.normalize(key), value);\n  }\n  clear(key) {\n    return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n  }\n  getStrategyName() {\n    return this.strategy.name;\n  }\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n}\nlet StrategyCacheService = /*#__PURE__*/(() => {\n  class StrategyCacheService {\n    constructor() {\n      this.caches = {};\n    }\n    get(strategyName, key) {\n      return this.getCacheStore(strategyName)[key];\n    }\n    set(strategyName, key, value) {\n      this.getCacheStore(strategyName)[key] = value;\n    }\n    del(strategyName, key) {\n      delete this.getCacheStore(strategyName)[key];\n    }\n    clear(strategyName) {\n      this.caches[strategyName] = {};\n    }\n    getCacheStore(strategyName) {\n      if (strategyName in this.caches) return this.caches[strategyName];\n      return this.caches[strategyName] = {};\n    }\n    static {\n      this.ɵfac = function StrategyCacheService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || StrategyCacheService)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: StrategyCacheService,\n        factory: StrategyCacheService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return StrategyCacheService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n  return typeof window !== 'undefined' ? window.localStorage : null;\n}\nconst LocalStorageProvider = {\n  provide: LOCAL_STORAGE,\n  useFactory: getLocalStorage\n};\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n  return typeof window !== 'undefined' ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = {\n  provide: SESSION_STORAGE,\n  useFactory: getSessionStorage\n};\nclass BaseSyncStorageStrategy {\n  constructor(storage, cache) {\n    this.storage = storage;\n    this.cache = cache;\n    this.keyChanges = new Subject();\n  }\n  get isAvailable() {\n    if (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n    return this._isAvailable;\n  }\n  get(key) {\n    let data = this.cache.get(this.name, key);\n    if (data !== undefined) return of(data);\n    try {\n      const item = this.storage.getItem(key);\n      if (item !== null) {\n        data = JSON.parse(item);\n        this.cache.set(this.name, key, data);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return of(data);\n  }\n  set(key, value) {\n    const data = JSON.stringify(value);\n    this.storage.setItem(key, data);\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    this.storage.removeItem(key);\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.storage.clear();\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n  static {\n    this.strategyName = StorageStrategies.Local;\n  }\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = LocalStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n  static {\n    this.ɵfac = function LocalStorageStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LocalStorageStrategy)(i0.ɵɵinject(LOCAL_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: LocalStorageStrategy,\n      factory: LocalStorageStrategy.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n  static {\n    this.strategyName = StorageStrategies.Session;\n  }\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = SessionStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (event.key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n  static {\n    this.ɵfac = function SessionStorageStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SessionStorageStrategy)(i0.ɵɵinject(SESSION_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SessionStorageStrategy,\n      factory: SessionStorageStrategy.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass InMemoryStorageStrategy {\n  static {\n    this.strategyName = StorageStrategies.InMemory;\n  }\n  constructor(cache) {\n    this.cache = cache;\n    this.keyChanges = new Subject();\n    this.isAvailable = true;\n    this.name = InMemoryStorageStrategy.strategyName;\n  }\n  get(key) {\n    return of(this.cache.get(this.name, key));\n  }\n  set(key, value) {\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n  static {\n    this.ɵfac = function InMemoryStorageStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InMemoryStorageStrategy)(i0.ɵɵinject(StrategyCacheService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: InMemoryStorageStrategy,\n      factory: InMemoryStorageStrategy.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [{\n  provide: STORAGE_STRATEGIES,\n  useClass: InMemoryStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: LocalStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: SessionStorageStrategy,\n  multi: true\n}];\nconst [InMemoryStorageStrategyProvider, LocalStorageStrategyProvider, SessionStorageStrategyProvider] = Strategies;\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n  constructor(name) {\n    this.keyChanges = new Subject();\n    this.store = {};\n    this._available = true;\n    this.name = name || StorageStrategyStubName;\n  }\n  get isAvailable() {\n    return this._available;\n  }\n  get(key) {\n    return of(this.store[key]);\n  }\n  set(key, value) {\n    this.store[key] = value;\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    delete this.store[key];\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.store = {};\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nclass StorageStub {\n  constructor() {\n    this.store = {};\n  }\n  get length() {\n    return Object.keys(this.store).length;\n  }\n  clear() {\n    this.store = {};\n  }\n  getItem(key) {\n    return this.store[key] || null;\n  }\n  key(index) {\n    return Object.keys(this.store)[index];\n  }\n  removeItem(key) {\n    delete this.store[key];\n  }\n  setItem(key, value) {\n    this.store[key] = value;\n  }\n}\nconst InvalidStrategyError = 'invalid_strategy';\nlet StrategyIndex = /*#__PURE__*/(() => {\n  class StrategyIndex {\n    static {\n      this.index = {};\n    }\n    constructor(strategies) {\n      this.strategies = strategies;\n      this.registration$ = new Subject();\n      if (!strategies) strategies = [];\n      this.strategies = strategies.reverse().map((strategy, index, arr) => strategy.name).map((name, index, arr) => arr.indexOf(name) === index ? index : null).filter(index => index !== null).map(index => strategies[index]);\n    }\n    static get(name) {\n      if (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n      let strategy = this.index[name];\n      if (!strategy.isAvailable) {\n        strategy = this.index[StorageStrategies.InMemory];\n      }\n      return strategy;\n    }\n    static set(name, strategy) {\n      this.index[name] = strategy;\n    }\n    static clear(name) {\n      if (name !== undefined) delete this.index[name];else this.index = {};\n    }\n    static isStrategyRegistered(name) {\n      return name in this.index;\n    }\n    static hasRegistredStrategies() {\n      return Object.keys(this.index).length > 0;\n    }\n    getStrategy(name) {\n      return StrategyIndex.get(name);\n    }\n    indexStrategies() {\n      this.strategies.forEach(strategy => this.register(strategy.name, strategy));\n    }\n    indexStrategy(name, overrideIfExists = false) {\n      if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n      const strategy = this.strategies.find(strategy => strategy.name === name);\n      if (!strategy) throw new Error(InvalidStrategyError);\n      this.register(name, strategy, overrideIfExists);\n      return strategy;\n    }\n    register(name, strategy, overrideIfExists = false) {\n      if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n        StrategyIndex.set(name, strategy);\n        this.registration$.next(name);\n      }\n    }\n    static {\n      this.ɵfac = function StrategyIndex_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || StrategyIndex)(i0.ɵɵinject(STORAGE_STRATEGIES, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: StrategyIndex,\n        factory: StrategyIndex.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return StrategyIndex;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass LocalStorageService extends SyncStorage {}\nfunction buildService$1(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Local);\n  return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n  provide: LocalStorageService,\n  useFactory: buildService$1,\n  deps: [StrategyIndex]\n};\nclass SessionStorageService extends SyncStorage {}\nfunction buildService(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Session);\n  return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n  provide: SessionStorageService,\n  useFactory: buildService,\n  deps: [StrategyIndex]\n};\nclass DecoratorBuilder {\n  static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n    const rawKey = key || propName;\n    let storageKey;\n    Object.defineProperty(prototype, propName, {\n      get: function () {\n        let value;\n        StrategyIndex.get(strategyName).get(getKey()).subscribe(result => value = result);\n        return value === undefined ? defaultValue : value;\n      },\n      set: function (value) {\n        StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n      }\n    });\n    function getKey() {\n      if (storageKey !== undefined) return storageKey;\n      return storageKey = StorageKeyManager.normalize(rawKey);\n    }\n  }\n}\nfunction LocalStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n  };\n}\nfunction SessionStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n  };\n}\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nvar InternalNgxWebstorageFeatureKind = /*#__PURE__*/function (InternalNgxWebstorageFeatureKind) {\n  InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"Config\"] = 1] = \"Config\";\n  InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"LocalStorage\"] = 2] = \"LocalStorage\";\n  InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"SessionStorage\"] = 3] = \"SessionStorage\";\n  return InternalNgxWebstorageFeatureKind;\n}(InternalNgxWebstorageFeatureKind || {});\nfunction appInit() {\n  const config = inject(LIB_CONFIG);\n  const index = inject(StrategyIndex);\n  return () => {\n    StorageKeyManager.consumeConfiguration(config);\n    index.indexStrategies();\n  };\n}\n/**\n * Provide ngx-webstorage basic features.\n *\n * - You can customise the configuration with the `withConfiguration` feature.\n * - You can enable the `LocalStorage` features with the `withLocalStorage` feature.\n * - You can enable the `SessionStorage` features with the `withSessionStorage` feature.\n *\n * @default config { prefix: 'ngx-webstorage', separator: '|', caseSensitive: false }\n */\nfunction provideNgxWebstorage(...features) {\n  const {\n    configProvider,\n    featureProviders\n  } = parseFeatures(features);\n  return makeEnvironmentProviders([configProvider, InMemoryStorageStrategyProvider, provideAppInitializer(() => {\n    const initializerFn = appInit();\n    return initializerFn();\n  }), ...featureProviders]);\n}\nfunction parseFeatures(features) {\n  let configProvider;\n  const featureProviders = [];\n  const parsedFeatures = new Set();\n  for (const feature of features) {\n    if (parsedFeatures.has(feature.kind)) throw new Error(`Feature ${feature.kind} is already provided.`);\n    if (feature.kind === InternalNgxWebstorageFeatureKind.Config) {\n      configProvider = feature.providers[0];\n    } else featureProviders.push(...feature.providers);\n    parsedFeatures.add(feature.kind);\n  }\n  return {\n    configProvider: configProvider ?? {\n      provide: LIB_CONFIG,\n      useValue: {\n        prefix: DefaultPrefix,\n        separator: DefaultSeparator,\n        caseSensitive: DefaultIsCaseSensitive\n      }\n    },\n    featureProviders\n  };\n}\nfunction makeNgxWebstorageFeature(kind, providers) {\n  return {\n    kind,\n    providers\n  };\n}\nfunction withNgxWebstorageConfig(config) {\n  return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.Config, [{\n    provide: LIB_CONFIG,\n    useValue: config\n  }]);\n}\n/** Provides everything necessary to use the `LocalStorage` features. */\nfunction withLocalStorage() {\n  return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.LocalStorage, [LocalStorageProvider, LocalStorageServiceProvider, LocalStorageStrategyProvider]);\n}\nfunction withSessionStorage() {\n  return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.SessionStorage, [SessionStorageProvider, SessionStorageServiceProvider, SessionStorageStrategyProvider]);\n}\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InternalNgxWebstorageFeatureKind, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, makeNgxWebstorageFeature, provideNgxWebstorage, withLocalStorage, withNgxWebstorageConfig, withSessionStorage };\n"],"mappings":"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","names":["StorageStrategies","CompatHelper","storage","available","noop","DefaultPrefix","DefaultSeparator","DefaultIsCaseSensitive","StorageKeyManager","raw","key","prefix","separator","enable","config","SyncStorage","strategy","value","result","filter","changed","switchMap","distinctUntilChanged","shareReplay","StrategyCacheService","strategyName","key","value","__ngFactoryType__","ɵɵdefineInjectable","LOCAL_STORAGE","InjectionToken","getLocalStorage","LocalStorageProvider","SESSION_STORAGE","getSessionStorage","SessionStorageProvider","BaseSyncStorageStrategy","storage","cache","Subject","CompatHelper","data","of","item","err","LocalStorageStrategy","_LocalStorageStrategy","StorageStrategies","platformId","zone","isPlatformBrowser","event","ɵɵinject","PLATFORM_ID","NgZone","SessionStorageStrategy","_SessionStorageStrategy","InMemoryStorageStrategy","_InMemoryStorageStrategy","STORAGE_STRATEGIES","Strategies","InMemoryStorageStrategyProvider","LocalStorageStrategyProvider","SessionStorageStrategyProvider","InvalidStrategyError","StrategyIndex","strategies","Subject","strategy","index","arr","name","StorageStrategies","overrideIfExists","__ngFactoryType__","ɵɵinject","STORAGE_STRATEGIES","ɵɵdefineInjectable","LocalStorageService","SyncStorage","buildService$1","LocalStorageServiceProvider","SessionStorageService","buildService","SessionStorageServiceProvider","LIB_CONFIG","InjectionToken","InternalNgxWebstorageFeatureKind","appInit","config","inject","index","StrategyIndex","StorageKeyManager","provideNgxWebstorage","features","configProvider","featureProviders","parseFeatures","makeEnvironmentProviders","InMemoryStorageStrategyProvider","provideAppInitializer","parsedFeatures","feature","DefaultPrefix","DefaultSeparator","DefaultIsCaseSensitive","makeNgxWebstorageFeature","kind","providers","withNgxWebstorageConfig","withLocalStorage","LocalStorageProvider","LocalStorageServiceProvider","LocalStorageStrategyProvider","withSessionStorage","SessionStorageProvider","SessionStorageServiceProvider","SessionStorageStrategyProvider"],"x_google_ignoreList":[0]}