{
  "version": 3,
  "sources": ["src/main/webapp/app/account/register/register.service.ts", "src/main/webapp/app/shared/constants/error.constants.ts", "src/main/webapp/app/account/register/register.component.ts", "src/main/webapp/app/account/register/register.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'app/core/user/user.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RegisterService {\r\n    private http = inject(HttpClient);\r\n\r\n    /**\r\n     * Registers a new user. This is only possible if the password is long enough and there is no other user with the\r\n     * same username or e-mail.\r\n     *\r\n     * @param account The data object holding the information about the new user\r\n     */\r\n    save(account: User): Observable<void> {\r\n        return this.http.post<void>('api/core/public/register', account);\r\n    }\r\n}\r\n", "export const PROBLEM_BASE_URL = 'www.jhipster.tech/problem';\r\nexport const EMAIL_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/email-already-used`;\r\nexport const LOGIN_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/login-already-used`;\r\nexport const EMAIL_NOT_FOUND_TYPE = `${PROBLEM_BASE_URL}/email-not-found`;\r\nexport const ACCOUNT_REGISTRATION_BLOCKED = `${PROBLEM_BASE_URL}/account-registration-blocked`;\r\n", "import { AfterViewInit, Component, ElementRef, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { RegisterService } from 'app/account/register/register.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ACCOUNT_REGISTRATION_BLOCKED, EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/shared/constants/error.constants';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH, USERNAME_MAX_LENGTH, USERNAME_MIN_LENGTH } from 'app/app.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nimport { PasswordStrengthBarComponent } from '../password/password-strength-bar.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-register',\r\n    templateUrl: './register.component.html',\r\n    imports: [TranslateDirective, FormsModule, ReactiveFormsModule, PasswordStrengthBarComponent, ArtemisTranslatePipe],\r\n})\r\nexport class RegisterComponent implements OnInit, AfterViewInit {\r\n    private translateService = inject(TranslateService);\r\n    private registerService = inject(RegisterService);\r\n    private fb = inject(FormBuilder);\r\n    private profileService = inject(ProfileService);\r\n\r\n    @ViewChild('login', { static: false })\r\n    login?: ElementRef;\r\n\r\n    readonly USERNAME_MIN_LENGTH = USERNAME_MIN_LENGTH;\r\n    readonly USERNAME_MAX_LENGTH = USERNAME_MAX_LENGTH;\r\n    readonly PASSWORD_MIN_LENGTH = PASSWORD_MIN_LENGTH;\r\n    readonly PASSWORD_MAX_LENGTH = PASSWORD_MAX_LENGTH;\r\n\r\n    doNotMatch = false;\r\n    error = false;\r\n    errorEmailExists = false;\r\n    errorUserExists = false;\r\n    errorAccountRegistrationBlocked = false;\r\n    success = false;\r\n\r\n    usernamePattern = '^[a-zA-Z0-9]*';\r\n\r\n    registerForm: FormGroup;\r\n    isRegistrationEnabled = false;\r\n    allowedEmailPattern?: string;\r\n    allowedEmailPatternReadable?: string;\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.login) {\r\n            this.login.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.isRegistrationEnabled = profileInfo.registrationEnabled || false;\r\n                this.allowedEmailPattern = profileInfo.allowedEmailPattern;\r\n                this.allowedEmailPatternReadable = profileInfo.allowedEmailPatternReadable;\r\n                if (this.allowedEmailPattern) {\r\n                    const jsRegexPattern = this.allowedEmailPattern;\r\n                    this.registerForm.get('email')!.setValidators([Validators.required, Validators.minLength(4), Validators.maxLength(100), Validators.pattern(jsRegexPattern)]);\r\n                }\r\n            }\r\n        });\r\n        this.initializeForm();\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.registerForm) {\r\n            return;\r\n        }\r\n        this.registerForm = this.fb.nonNullable.group({\r\n            firstName: ['', [Validators.required, Validators.minLength(2)]],\r\n            lastName: ['', [Validators.required, Validators.minLength(2)]],\r\n            login: ['', [Validators.required, Validators.minLength(USERNAME_MIN_LENGTH), Validators.maxLength(USERNAME_MAX_LENGTH), Validators.pattern(this.usernamePattern)]],\r\n            email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(100), Validators.email]],\r\n            password: ['', [Validators.required, Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n            confirmPassword: ['', [Validators.required, Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a new user in Artemis. This is only possible if the passwords match and there is no user with the same\r\n     * e-mail or username. For the language the current browser language is selected.\r\n     */\r\n    register(): void {\r\n        this.doNotMatch = false;\r\n        this.error = false;\r\n        this.errorEmailExists = false;\r\n        this.errorUserExists = false;\r\n\r\n        const password = this.registerForm.get(['password'])!.value;\r\n        if (password !== this.registerForm.get(['confirmPassword'])!.value) {\r\n            this.doNotMatch = true;\r\n        } else {\r\n            const user = new User();\r\n            user.firstName = this.registerForm.get(['firstName'])!.value;\r\n            user.lastName = this.registerForm.get(['lastName'])!.value;\r\n            user.login = this.registerForm.get(['login'])!.value;\r\n            user.email = this.registerForm.get(['email'])!.value;\r\n            user.password = password;\r\n            user.langKey = this.translateService.currentLang;\r\n            this.registerService.save(user).subscribe({\r\n                next: () => (this.success = true),\r\n                error: (response) => this.processError(response),\r\n            });\r\n        }\r\n    }\r\n\r\n    private processError(response: HttpErrorResponse): void {\r\n        if (response.status === 400 && response.error.type.includes(LOGIN_ALREADY_USED_TYPE)) {\r\n            this.errorUserExists = true;\r\n        } else if (response.status === 400 && response.error.type.includes(EMAIL_ALREADY_USED_TYPE)) {\r\n            this.errorEmailExists = true;\r\n        } else if (response.status === 400 && response.error.type.includes(ACCOUNT_REGISTRATION_BLOCKED)) {\r\n            this.errorAccountRegistrationBlocked = true;\r\n        } else {\r\n            this.error = true;\r\n        }\r\n    }\r\n}\r\n", "@if (isRegistrationEnabled) {\r\n    <div>\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-md-8\">\r\n                <h1 jhiTranslate=\"register.title\"></h1>\r\n                <!-- TEST CODE -->\r\n                <!--            <div class=\"form-group\">-->\r\n                <!--                <label for=\"regex\" style=\"color: red\" class=\"form-control-label\">Email Pattern for Testing</label>-->\r\n                <!--                <input style=\"color: red\" class=\"form-control\" id=\"regex\" name=\"regex\" [(ngModel)]=\"allowedEmailPattern\" (ngModelChange)=\"updateAllowedEmailPattern()\" />-->\r\n                <!--            </div>-->\r\n                <!-- TEST CODE -->\r\n                @if (success) {\r\n                    <div class=\"alert alert-success\" jhiTranslate=\"register.messages.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div>\r\n                }\r\n                @if (error) {\r\n                    <div class=\"alert alert-danger\" jhiTranslate=\"register.messages.error.fail\"><strong>Registration failed!</strong> Please try again later.</div>\r\n                }\r\n                @if (errorUserExists) {\r\n                    <div class=\"alert alert-danger\" jhiTranslate=\"register.messages.error.userExists\">\r\n                        <strong>Login name already registered!</strong> Please choose another one.\r\n                    </div>\r\n                }\r\n                @if (errorEmailExists) {\r\n                    <div class=\"alert alert-danger\" jhiTranslate=\"register.messages.error.emailExists\"><strong>Email is already in use!</strong> Please choose another one.</div>\r\n                }\r\n                @if (errorAccountRegistrationBlocked) {\r\n                    <div class=\"alert alert-danger\" jhiTranslate=\"register.messages.error.blocked\"><strong>Account Registration blocked! </strong> Please try again later.</div>\r\n                }\r\n                @if (doNotMatch) {\r\n                    <div class=\"alert alert-danger\" jhiTranslate=\"global.messages.error.dontmatch\"></div>\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-md-8\">\r\n                @if (!success) {\r\n                    <form name=\"form\" role=\"form\" (ngSubmit)=\"register()\" [formGroup]=\"registerForm\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"firstName\" jhiTranslate=\"global.form.firstname\"></label>\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form-control\"\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                autocomplete=\"given-name\"\r\n                                placeholder=\"{{ 'global.form.firstname.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"firstName\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"lastName\" jhiTranslate=\"global.form.lastname\"></label>\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form-control\"\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                autocomplete=\"family-name\"\r\n                                placeholder=\"{{ 'global.form.lastname.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"lastName\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"login\" jhiTranslate=\"global.form.username\"></label>\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form-control\"\r\n                                id=\"login\"\r\n                                name=\"login\"\r\n                                autocomplete=\"username\"\r\n                                placeholder=\"{{ 'global.form.username.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"login\"\r\n                                #login\r\n                            />\r\n                            @if (registerForm.get('login')!.invalid && (registerForm.get('login')!.dirty || registerForm.get('login')!.touched)) {\r\n                                <div>\r\n                                    @if (registerForm.get('login')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"register.messages.validate.login.required\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('login')?.errors?.minlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"register.messages.validate.login.minlength\"\r\n                                            [translateValues]=\"{ min: USERNAME_MIN_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                    @if (registerForm.get('login')?.errors?.maxlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"register.messages.validate.login.maxlength\"\r\n                                            [translateValues]=\"{ max: USERNAME_MAX_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                    @if (registerForm.get('login')?.errors?.pattern) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"register.messages.validate.login.pattern\"></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        @if (allowedEmailPatternReadable) {\r\n                            <div class=\"form-group\">\r\n                                <strong jhiTranslate=\"global.form.email.pattern\"></strong>\r\n                                {{ allowedEmailPatternReadable }}\r\n                            </div>\r\n                        }\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email\"></label>\r\n                            <input\r\n                                type=\"email\"\r\n                                class=\"form-control\"\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                autocomplete=\"email\"\r\n                                placeholder=\"{{ 'global.form.email.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"email\"\r\n                            />\r\n                            @if (registerForm.get('email')!.invalid && (registerForm.get('email')!.dirty || registerForm.get('email')!.touched)) {\r\n                                <div>\r\n                                    @if (registerForm.get('email')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.required\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('email')?.errors?.invalid) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.invalid\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('email')?.errors?.minlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.minlength\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('email')?.errors?.maxlength) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.maxlength\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('email')?.errors?.pattern) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.email.pattern\"></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"password\" jhiTranslate=\"global.form.newpassword\"></label>\r\n                            <input\r\n                                type=\"password\"\r\n                                class=\"form-control\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                autocomplete=\"new-password\"\r\n                                placeholder=\"{{ 'global.form.newpassword.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"password\"\r\n                            />\r\n                            @if (registerForm.get('password')!.invalid && (registerForm.get('password')!.dirty || registerForm.get('password')!.touched)) {\r\n                                <div>\r\n                                    @if (registerForm.get('password')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.newpassword.required\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('password')?.errors?.minlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.newpassword.minlength\"\r\n                                            [translateValues]=\"{ min: PASSWORD_MIN_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                    @if (registerForm.get('password')?.errors?.maxlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\r\n                                            [translateValues]=\"{ max: PASSWORD_MAX_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            <jhi-password-strength-bar [passwordToCheck]=\"registerForm.get('password')!.value\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword\"></label>\r\n                            <input\r\n                                type=\"password\"\r\n                                class=\"form-control\"\r\n                                id=\"confirmPassword\"\r\n                                name=\"confirmPassword\"\r\n                                autocomplete=\"new-password\"\r\n                                placeholder=\"{{ 'global.form.confirmpassword.placeholder' | artemisTranslate }}\"\r\n                                formControlName=\"confirmPassword\"\r\n                            />\r\n                            @if (registerForm.get('confirmPassword')!.invalid && (registerForm.get('confirmPassword')!.dirty || registerForm.get('confirmPassword')!.touched)) {\r\n                                <div>\r\n                                    @if (registerForm.get('confirmPassword')?.errors?.required) {\r\n                                        <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.confirmpassword.required\"></small>\r\n                                    }\r\n                                    @if (registerForm.get('confirmPassword')?.errors?.minlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\r\n                                            [translateValues]=\"{ min: PASSWORD_MIN_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                    @if (registerForm.get('confirmPassword')?.errors?.maxlength) {\r\n                                        <small\r\n                                            class=\"form-text text-danger\"\r\n                                            jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\r\n                                            [translateValues]=\"{ max: PASSWORD_MAX_LENGTH }\"\r\n                                        ></small>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <button type=\"submit\" [disabled]=\"registerForm.invalid\" class=\"btn btn-primary\" jhiTranslate=\"register.form.button\"></button>\r\n                    </form>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["RegisterService", "http", "inject", "HttpClient", "save", "account", "post", "factory", "\u0275fac", "providedIn", "PROBLEM_BASE_URL", "EMAIL_ALREADY_USED_TYPE", "LOGIN_ALREADY_USED_TYPE", "EMAIL_NOT_FOUND_TYPE", "ACCOUNT_REGISTRATION_BLOCKED", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "ctx_r1", "USERNAME_MIN_LENGTH", "_c2", "USERNAME_MAX_LENGTH", "\u0275\u0275template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_27_Conditional_3_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_27_Conditional_4_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_27_Conditional_5_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_27_Conditional_6_Template", "\u0275\u0275conditional", "tmp_4_0", "registerForm", "get", "errors", "required", "tmp_5_0", "minlength", "tmp_6_0", "maxlength", "tmp_7_0", "pattern", "\u0275\u0275textInterpolate1", "allowedEmailPatternReadable", "RegisterComponent_Conditional_0_Conditional_27_Conditional_37_Conditional_3_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_37_Conditional_4_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_37_Conditional_5_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_37_Conditional_6_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_37_Conditional_7_Template", "invalid", "tmp_8_0", "PASSWORD_MIN_LENGTH", "PASSWORD_MAX_LENGTH", "RegisterComponent_Conditional_0_Conditional_27_Conditional_46_Conditional_3_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_46_Conditional_4_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_46_Conditional_5_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_57_Conditional_3_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_57_Conditional_4_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_57_Conditional_5_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "register", "RegisterComponent_Conditional_0_Conditional_27_Conditional_27_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_29_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_37_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_46_Template", "RegisterComponent_Conditional_0_Conditional_27_Conditional_57_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "dirty", "touched", "value", "RegisterComponent_Conditional_0_Conditional_15_Template", "RegisterComponent_Conditional_0_Conditional_16_Template", "RegisterComponent_Conditional_0_Conditional_17_Template", "RegisterComponent_Conditional_0_Conditional_18_Template", "RegisterComponent_Conditional_0_Conditional_19_Template", "RegisterComponent_Conditional_0_Conditional_20_Template", "RegisterComponent_Conditional_0_Conditional_27_Template", "success", "error", "errorUserExists", "errorEmailExists", "errorAccountRegistrationBlocked", "doNotMatch", "RegisterComponent", "translateService", "inject", "TranslateService", "registerService", "RegisterService", "fb", "FormBuilder", "profileService", "ProfileService", "login", "usernamePattern", "isRegistrationEnabled", "allowedEmailPattern", "ngAfterViewInit", "nativeElement", "focus", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "registrationEnabled", "jsRegexPattern", "setValidators", "Validators", "minLength", "maxLength", "initializeForm", "nonNullable", "group", "firstName", "lastName", "email", "password", "confirmPassword", "user", "User", "langKey", "currentLang", "save", "next", "response", "processError", "status", "type", "includes", "LOGIN_ALREADY_USED_TYPE", "EMAIL_ALREADY_USED_TYPE", "ACCOUNT_REGISTRATION_BLOCKED", "selectors", "viewQuery", "rf", "ctx", "RegisterComponent_Conditional_0_Template", "TranslateDirective", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PasswordStrengthBarComponent", "ArtemisTranslatePipe", "encapsulation"]
}
