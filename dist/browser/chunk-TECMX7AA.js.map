{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/date-time-picker/date-time-picker.component.ts", "src/main/webapp/app/shared/date-time-picker/date-time-picker.component.html"],
  "sourcesContent": ["import { Component, ViewChild, computed, forwardRef, input, model, output, signal } from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR, NgModel } from '@angular/forms';\r\nimport { faCalendarAlt, faCircleXmark, faClock, faGlobe, faQuestionCircle, faTriangleExclamation } from '@fortawesome/free-solid-svg-icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { FaIconComponent, FaStackComponent, FaStackItemSizeDirective } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { OwlDateTimeModule } from '@danielmoncada/angular-datetime-picker';\r\nimport { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\nexport enum DateTimePickerType {\r\n    CALENDAR,\r\n    TIMER,\r\n    DEFAULT,\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-date-time-picker',\r\n    templateUrl: `./date-time-picker.component.html`,\r\n    styleUrls: [`./date-time-picker.component.scss`],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            multi: true,\r\n            useExisting: forwardRef(() => FormDateTimePickerComponent),\r\n        },\r\n    ],\r\n    imports: [\r\n        FaStackComponent,\r\n        NgbTooltip,\r\n        FaIconComponent,\r\n        FaStackItemSizeDirective,\r\n        FormsModule,\r\n        OwlDateTimeModule,\r\n        NgClass,\r\n        NgTemplateOutlet,\r\n        TranslateDirective,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class FormDateTimePickerComponent implements ControlValueAccessor {\r\n    protected readonly faCalendarAlt = faCalendarAlt;\r\n    protected readonly faGlobe = faGlobe;\r\n    protected readonly faClock = faClock;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n    protected readonly faCircleXmark = faCircleXmark;\r\n    protected readonly faTriangleExclamation = faTriangleExclamation;\r\n\r\n    @ViewChild('dateInput', { static: false }) dateInput: NgModel;\r\n\r\n    labelName = input<string>();\r\n    hideLabelName = input<boolean>(false);\r\n    labelTooltip = input<string>();\r\n    value = model<dayjs.Dayjs | Date | null>();\r\n    disabled = input<boolean>(false);\r\n    error = input<boolean>();\r\n    warning = input<boolean>();\r\n    requiredField = input<boolean>(false);\r\n    startAt = input<dayjs.Dayjs | undefined>(); // Default selected date. By default, this sets it to the current time without seconds or milliseconds;\r\n    min = input<dayjs.Dayjs>(); // Dates before this date are not selectable.\r\n    max = input<dayjs.Dayjs>(); // Dates after this date are not selectable.\r\n    shouldDisplayTimeZoneWarning = input<boolean>(true); // Displays a warning that the current time zone might differ from the participants'.\r\n    pickerType = input<DateTimePickerType>(DateTimePickerType.DEFAULT); // Select type of picker\r\n    valueChange = output<void>();\r\n\r\n    protected isInputValid = signal<boolean>(false);\r\n    protected dateInputValue = signal<string>('');\r\n\r\n    isValid = computed(() => {\r\n        const isInvalid = this.error() || !this.isInputValid() || (this.requiredField() && !this.dateInputValue()) || this.warning();\r\n        return !isInvalid;\r\n    });\r\n\r\n    updateSignals(): void {\r\n        this.isInputValid.set(!this.dateInput?.invalid);\r\n        this.dateInputValue.set(this.dateInput?.value);\r\n    }\r\n\r\n    private onChange?: (val?: dayjs.Dayjs) => void;\r\n\r\n    /**\r\n     * Emits the value change from component.\r\n     */\r\n    valueChanged() {\r\n        this.valueChange.emit();\r\n        this.updateSignals();\r\n    }\r\n\r\n    /**\r\n     * Function that writes the value safely.\r\n     * @param value as dayjs or date\r\n     */\r\n    writeValue(value: any) {\r\n        // convert dayjs to date, because owl-date-time only works correctly with date objects\r\n        if (dayjs.isDayjs(value)) {\r\n            this.value.set((value as dayjs.Dayjs).toDate());\r\n        } else {\r\n            this.value.set(value);\r\n        }\r\n        this.updateSignals();\r\n    }\r\n\r\n    /**\r\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\r\n     * @param _fn\r\n     */\r\n    registerOnTouched(_fn: any) {}\r\n\r\n    /**\r\n     *\r\n     * @param fn\r\n     */\r\n    registerOnChange(fn: any) {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param newValue\r\n     */\r\n    updateField(newValue: dayjs.Dayjs) {\r\n        this.value.set(newValue);\r\n        this.onChange?.(dayjs(this.value()));\r\n        this.valueChanged();\r\n    }\r\n\r\n    /**\r\n     * Get the current time zone of the user / browser\r\n     */\r\n    get currentTimeZone(): string {\r\n        return Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    }\r\n\r\n    startDate = computed(() => {\r\n        return this.convertToDate(this.startAt?.() ?? dayjs().startOf('minutes'));\r\n    });\r\n\r\n    minDate = computed(() => {\r\n        return this.convertToDate(this.min?.());\r\n    });\r\n\r\n    maxDate = computed(() => {\r\n        return this.convertToDate(this.max?.());\r\n    });\r\n\r\n    /**\r\n     * Function that converts a possibly undefined dayjs value to a date or null.\r\n     *\r\n     * @param value as dayjs\r\n     */\r\n    convertToDate(value?: dayjs.Dayjs) {\r\n        return value != undefined && value.isValid() ? value.toDate() : null;\r\n    }\r\n\r\n    /**\r\n     * Clear the datepicker value.\r\n     */\r\n    clearDate() {\r\n        this.dateInput.reset(undefined);\r\n        this.updateSignals();\r\n    }\r\n\r\n    protected readonly DateTimePickerType = DateTimePickerType;\r\n}\r\n", "@if (labelName() && !hideLabelName()) {\r\n    <label for=\"date-input-field\" class=\"form-control-label col\">\r\n        {{ labelName() }}\r\n    </label>\r\n}\r\n@if (labelTooltip()) {\r\n    <fa-stack class=\"text-secondary icon-full-size\" [ngbTooltip]=\"labelTooltip()\">\r\n        <fa-icon [icon]=\"faQuestionCircle\" stackItemSize=\"1x\" />\r\n    </fa-stack>\r\n}\r\n@if (shouldDisplayTimeZoneWarning()) {\r\n    <fa-stack ngbTooltip=\"{{ 'entity.timeZoneWarning' | artemisTranslate: { timeZone: currentTimeZone } }}\" class=\"icon-full-size\">\r\n        <fa-icon [icon]=\"faGlobe\" stackItemSize=\"1x\" class=\"text-lightgrey\" />\r\n        <fa-icon [icon]=\"faClock\" stackItemSize=\"1x\" transform=\"shrink-6 down-5 right-5\" class=\"text-secondary\" />\r\n    </fa-stack>\r\n}\r\n<div class=\"d-flex\">\r\n    <input\r\n        #dateInput=\"ngModel\"\r\n        class=\"form-control position-relative ps-5\"\r\n        id=\"date-input-field\"\r\n        [ngClass]=\"{ 'is-invalid': !isValid(), 'border-warning': warning() }\"\r\n        [class.ng-invalid]=\"!isValid()\"\r\n        [ngModel]=\"value()\"\r\n        [disabled]=\"disabled()\"\r\n        [min]=\"minDate()\"\r\n        [max]=\"maxDate()\"\r\n        (ngModelChange)=\"updateField($event)\"\r\n        [owlDateTime]=\"pickerType() === DateTimePickerType.CALENDAR ? dtCalendar : pickerType() === DateTimePickerType.TIMER ? dtTimer : dtDefault\"\r\n        name=\"datePicker\"\r\n    />\r\n    @switch (pickerType()) {\r\n        @case (DateTimePickerType.TIMER) {\r\n            <ng-template *ngTemplateOutlet=\"owlTrigger; context: { $implicit: dtTimer, icon: faClock }\" />\r\n        }\r\n        @case (DateTimePickerType.CALENDAR) {\r\n            <ng-template *ngTemplateOutlet=\"owlTrigger; context: { $implicit: dtCalendar, icon: faCalendarAlt }\" />\r\n        }\r\n        @default {\r\n            <ng-template *ngTemplateOutlet=\"owlTrigger; context: { $implicit: dtDefault, icon: faCalendarAlt }\" />\r\n        }\r\n    }\r\n\r\n    <ng-template #owlTrigger let-owlTrigger let-icon=\"icon\">\r\n        <button [owlDateTimeTrigger]=\"owlTrigger\" class=\"btn position-absolute\" type=\"button\">\r\n            <fa-icon [icon]=\"icon\" />\r\n        </button>\r\n    </ng-template>\r\n    <div class=\"position-relative\">\r\n        <button class=\"btn position-absolute\" type=\"button\" style=\"right: 0\" (click)=\"clearDate()\">\r\n            <fa-icon [icon]=\"faCircleXmark\" />\r\n        </button>\r\n    </div>\r\n\r\n    <owl-date-time [startAt]=\"startDate()\" #dtDefault />\r\n    <owl-date-time [pickerType]=\"'calendar'\" #dtCalendar />\r\n    <owl-date-time [pickerType]=\"'timer'\" #dtTimer />\r\n</div>\r\n@if (dateInput.invalid || (requiredField() && !dateInput.value)) {\r\n    <div class=\"invalid-feedback\" jhiTranslate=\"entity.dateMissingOrNotValid\" [translateValues]=\"{ labelName: labelName() }\"></div>\r\n}\r\n@if (warning()) {\r\n    <div class=\"invalid-feedback\">\r\n        <fa-icon class=\"text-warning\" [icon]=\"faTriangleExclamation\" />\r\n        <span class=\"visible-date-warning\" jhiTranslate=\"entity.warningError\" ngbTooltip=\"{{ 'entity.warningToolTip' | artemisTranslate }}\"></span>\r\n    </div>\r\n}\r\n"],
  "mappings": "07BCCIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,QAAA,EAAA,EACID,EAAA,CAAA,EACJE,EAAA,EACJF,EAAA,EAAA;CAAA,kBAFQG,EAAA,CAAA,EAAAC,EAAA;UAAAC,EAAAC,UAAA,EAAA;KAAA,6BAIJN,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,WAAA,EAAA,EACID,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,UAAA,EAAA,EACJP,EAAA,EAAA;KAAA,EAAAE,EAAA,EACJF,EAAA,EAAA;CAAA,kBAHoDG,EAAA,EAAAK,EAAA,aAAAH,EAAAI,aAAA,CAAA,EACnCN,EAAA,CAAA,EAAAK,EAAA,OAAAH,EAAAK,gBAAA,6BAIbV,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,WAAA,EAAA,0BACID,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,UAAA,EAAA,EACAP,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,UAAA,EAAA,EACJP,EAAA,EAAA;KAAA,EAAAE,EAAA,EACJF,EAAA,EAAA;CAAA,kBAJcG,EAAA,EAAAQ,EAAA,aAAAC,EAAA,EAAA,EAAA,yBAAAC,EAAA,EAAAC,GAAAT,EAAAU,eAAA,CAAA,CAAA,EACGZ,EAAA,CAAA,EAAAK,EAAA,OAAAH,EAAAW,OAAA,EACAb,EAAA,CAAA,EAAAK,EAAA,OAAAH,EAAAY,OAAA,2CAoBLC,EAAA,EAAAC,GAAA,EAAA,EAAA,aAAA,4BAAAnB,EAAA,EAAA;aAAA,EAAAkB,EAAA,EAAAE,GAAA,EAAA,EAAA,KAAA,EAAA,EACJpB,EAAA,EAAA;SAAA,kCADkBG,EAAA,EAAAK,EAAA,mBAAAa,CAAA,EAA8B,0BAAAC,EAAA,EAAAC,EAAAC,EAAAnB,EAAAY,OAAA,CAAA,2CAG5CC,EAAA,EAAAO,GAAA,EAAA,EAAA,aAAA,4BAAAzB,EAAA,EAAA;aAAA,EAAAkB,EAAA,EAAAQ,GAAA,EAAA,EAAA,KAAA,EAAA,EACJ1B,EAAA,EAAA;SAAA,kCADkBG,EAAA,EAAAK,EAAA,mBAAAa,CAAA,EAA8B,0BAAAC,EAAA,EAAAC,EAAAI,EAAAtB,EAAAuB,aAAA,CAAA,2CAG5CV,EAAA,EAAAW,GAAA,EAAA,EAAA,aAAA,4BAAA7B,EAAA,EAAA;aAAA,EAAAkB,EAAA,EAAAY,GAAA,EAAA,EAAA,KAAA,EAAA,EACJ9B,EAAA,EAAA;SAAA,kCADkBG,EAAA,EAAAK,EAAA,mBAAAa,CAAA,EAA8B,0BAAAC,EAAA,EAAAC,EAAAQ,EAAA1B,EAAAuB,aAAA,CAAA,6BAKhD5B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EACID,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAA,UAAA,CAAA,EACJP,EAAA,EAAA;SAAA,EAAAE,EAAA,EACJF,EAAA,EAAA;KAAA,mCAHYG,EAAA,EAAAK,EAAA,qBAAAwB,CAAA,EACK7B,EAAA,CAAA,EAAAK,EAAA,OAAAyB,CAAA,6BAcjBjC,EAAA,EAAA;KAAA,EAAAO,EAAA,EAAA,MAAA,EAAA,EACJP,EAAA,EAAA;CAAA,kBAD8EG,EAAA,EAAAK,EAAA,kBAAAK,EAAA,EAAAqB,GAAA7B,EAAAC,UAAA,CAAA,CAAA,6BAG1EN,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,UAAA,EAAA,EACAP,EAAA,EAAA;SAAA,EAAAO,EAAA,EAAA,OAAA,EAAA,0BACJP,EAAA,EAAA;KAAA,EAAAE,EAAA,EACJF,EAAA,EAAA;CAAA,kBAHsCG,EAAA,CAAA,EAAAK,EAAA,OAAAH,EAAA8B,qBAAA,EACwChC,EAAA,CAAA,EAAAQ,EAAA,aAAAyB,EAAA,EAAA,EAAA,uBAAA,CAAA,GDrD9E,IAAYC,EAAZ,SAAYA,EAAkB,CAC1BA,OAAAA,EAAAA,EAAA,SAAA,CAAA,EAAA,WACAA,EAAAA,EAAA,MAAA,CAAA,EAAA,QACAA,EAAAA,EAAA,QAAA,CAAA,EAAA,UAHQA,CAIZ,EAJYA,GAAkB,CAAA,CAAA,EA8BjBC,IAA2B,IAAA,CAAlC,MAAOA,CAA2B,CACjBV,cAAgBA,EAChBZ,QAAUA,GACVC,QAAUA,GACVP,iBAAmBA,GACnB6B,cAAgBA,GAChBJ,sBAAwBA,GAEAK,UAE3ClC,UAAYmC,EAAK,EACjBC,cAAgBD,EAAe,EAAK,EACpChC,aAAegC,EAAK,EACpBE,MAAQC,EAAK,EACbC,SAAWJ,EAAe,EAAK,EAC/BK,MAAQL,EAAK,EACbM,QAAUN,EAAK,EACfO,cAAgBP,EAAe,EAAK,EACpCQ,QAAUR,EAAK,EACfS,IAAMT,EAAK,EACXU,IAAMV,EAAK,EACXW,6BAA+BX,EAAe,EAAI,EAClDY,WAAaZ,EAA0BJ,EAAmBiB,OAAO,EACjEC,YAAcC,EAAM,EAEVC,aAAeC,EAAgB,EAAK,EACpCC,eAAiBD,EAAe,EAAE,EAE5CE,QAAUC,EAAS,IAER,EADW,KAAKf,MAAK,GAAM,CAAC,KAAKW,aAAY,GAAO,KAAKT,cAAa,GAAM,CAAC,KAAKW,eAAc,GAAO,KAAKZ,QAAO,EAE7H,EAEDe,eAAa,CACT,KAAKL,aAAaM,IAAI,CAAC,KAAKvB,WAAWwB,OAAO,EAC9C,KAAKL,eAAeI,IAAI,KAAKvB,WAAWG,KAAK,CACjD,CAEQsB,SAKRC,cAAY,CACR,KAAKX,YAAYY,KAAI,EACrB,KAAKL,cAAa,CACtB,CAMAM,WAAWzB,EAAU,CAEb0B,EAAMC,QAAQ3B,CAAK,EACnB,KAAKA,MAAMoB,IAAKpB,EAAsB4B,OAAM,CAAE,EAE9C,KAAK5B,MAAMoB,IAAIpB,CAAK,EAExB,KAAKmB,cAAa,CACtB,CAMAU,kBAAkBC,EAAQ,CAAG,CAM7BC,iBAAiBC,EAAO,CACpB,KAAKV,SAAWU,CACpB,CAMAC,YAAYC,EAAqB,CAC7B,KAAKlC,MAAMoB,IAAIc,CAAQ,EACvB,KAAKZ,WAAWI,EAAM,KAAK1B,MAAK,CAAE,CAAC,EACnC,KAAKuB,aAAY,CACrB,CAKA,IAAInD,iBAAe,CACf,OAAO+D,KAAKC,eAAc,EAAGC,gBAAe,EAAGC,QACnD,CAEAC,UAAYrB,EAAS,IACV,KAAKsB,cAAc,KAAKlC,UAAS,GAAMoB,EAAK,EAAGe,QAAQ,SAAS,CAAC,CAC3E,EAEDC,QAAUxB,EAAS,IACR,KAAKsB,cAAc,KAAKjC,MAAK,CAAE,CACzC,EAEDoC,QAAUzB,EAAS,IACR,KAAKsB,cAAc,KAAKhC,MAAK,CAAE,CACzC,EAODgC,cAAcxC,EAAmB,CAC7B,OAAOA,GAAS4C,MAAa5C,EAAMiB,QAAO,EAAKjB,EAAM4B,OAAM,EAAK,IACpE,CAKAiB,WAAS,CACL,KAAKhD,UAAUiD,MAAMF,MAAS,EAC9B,KAAKzB,cAAa,CACtB,CAEmBzB,mBAAqBA,6CA1H/BC,EAA2B,2BAA3BA,EAA2BoD,UAAA,CAAA,CAAA,sBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,meApBzB,CACP,CACIE,QAASC,EACTC,MAAO,GACPC,YAAaC,EAAW,IAAM5D,CAA2B,EAC5D,CACJ,CAAA,EAAA6D,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,YAAA,SAAA,EAAA,CAAA,aAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,CAAA,aAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,mBAAA,OAAA,aAAA,EAAA,eAAA,oBAAA,OAAA,EAAA,gBAAA,UAAA,UAAA,WAAA,MAAA,MAAA,aAAA,EAAA,CAAA,EAAA,mBAAA,EAAA,CAAA,OAAA,SAAA,EAAA,MAAA,oBAAA,EAAA,QAAA,IAAA,EAAA,OAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,MAAA,mBAAA,EAAA,qBAAA,KAAA,EAAA,CAAA,EAAA,iBAAA,iBAAA,EAAA,YAAA,EAAA,CAAA,gBAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,CAAA,gBAAA,KAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,CAAA,gBAAA,KAAA,YAAA,0BAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,CAAA,EAAA,mBAAA,yBAAA,EAAA,CAAA,OAAA,SAAA,EAAA,MAAA,oBAAA,EAAA,oBAAA,EAAA,CAAA,eAAA,+BAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,eAAA,sBAAA,EAAA,uBAAA,EAAA,YAAA,CAAA,EAAAC,SAAA,SAAAV,EAAAC,EAAA,CAAA,GAAAD,EAAA,EAAA,WC3BL1E,EAAA,EAAAqF,GAAA,EAAA,CAAA,EAAuC,EAAAC,GAAA,EAAA,CAAA,EAKjB,EAAAC,GAAA,EAAA,CAAA,EAWtBxG,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,QAAA,EAAA,CAAA,EAUIyG,EAAA,gBAAA,SAAAC,EAAA,CAAAC,OAAAC,EAAAC,CAAA,EAAAC,EAAiBlB,EAAAjB,YAAA+B,CAAA,CAAmB,CAAA,CAAA,EAVxCzG,EAAA,EAcAF,EAAA,EAAA;KAAA,EACIkB,EAAA,EAAA8F,GAAA,EAAA,CAAA,EAAkC,EAAAC,GAAA,EAAA,CAAA,EAGG,GAAAC,GAAA,EAAA,CAAA,EAQzClH,EAAA,GAAA;;KAAA,EAAAkB,EAAA,GAAAiG,GAAA,EAAA,EAAA,cAAA,KAAA,EAAAC,CAAA,EAKApH,EAAA,GAAA;KAAA,EAAAC,EAAA,GAAA,MAAA,CAAA,EACID,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,SAAA,CAAA,EAAqEyG,EAAA,QAAA,UAAA,CAAAE,OAAAC,EAAAC,CAAA,EAAAC,EAASlB,EAAAL,UAAA,CAAW,CAAA,CAAA,EACrFxF,EAAA,GAAA;aAAA,EAAAO,EAAA,GAAA,UAAA,CAAA,EACJP,EAAA,GAAA;SAAA,EAAAE,EAAA,EACJF,EAAA,GAAA;KAAA,EAAAE,EAAA,EAEAF,EAAA,GAAA;;KAAA,EAAAO,EAAA,GAAA,gBAAA,GAAA,CAAA,EACAP,EAAA,GAAA;KAAA,EAAAO,EAAA,GAAA,gBAAA,GAAA,CAAA,EACAP,EAAA,GAAA;KAAA,EAAAO,EAAA,GAAA,gBAAA,GAAA,CAAA,EACJP,EAAA,GAAA;CAAA,EAAAE,EAAA,EACAF,EAAA,GAAA;CAAA,EAAAkB,EAAA,GAAAmG,GAAA,EAAA,CAAA,EAAkE,GAAAC,GAAA,EAAA,CAAA,iDA1DlEC,EAAA1B,EAAAvF,UAAA,GAAA,CAAAuF,EAAAnD,cAAA,EAAA,EAAA,EAAA,EAKAvC,EAAA,EAAAoH,EAAA1B,EAAApF,aAAA,EAAA,EAAA,EAAA,EAKAN,EAAA,EAAAoH,EAAA1B,EAAAzC,6BAAA,EAAA,EAAA,EAAA,EAYQjD,EAAA,CAAA,EAAAqH,EAAA,aAAA,CAAA3B,EAAAjC,QAAA,CAAA,EADApD,EAAA,UAAAc,EAAA,GAAAmG,GAAA,CAAA5B,EAAAjC,QAAA,EAAAiC,EAAA9C,QAAA,CAAA,CAAA,EAAqE,UAAA8C,EAAAlD,MAAA,CAAA,EAElD,WAAAkD,EAAAhD,SAAA,CAAA,EACI,MAAAgD,EAAAR,QAAA,CAAA,EACN,MAAAQ,EAAAP,QAAA,CAAA,EACA,cAAAO,EAAAxC,WAAA,IAAAwC,EAAAxD,mBAAAqF,SAAA/F,GAAAkE,EAAAxC,WAAA,IAAAwC,EAAAxD,mBAAAsF,MAAAnG,GAAAO,CAAA,EAKrB5B,EAAA,CAAA,EAAAoH,GAAAK,EAAA/B,EAAAxC,WAAA,KAAAwC,EAAAxD,mBAAAsF,MAAA,EAAAC,IAAA/B,EAAAxD,mBAAAqF,SAAA,EAAA,EAAA,EAmBiBvH,EAAA,EAAA,EAAAK,EAAA,OAAAqF,EAAAtD,aAAA,EAIFpC,EAAA,CAAA,EAAAK,EAAA,UAAAqF,EAAAX,UAAA,CAAA,EACA/E,EAAA,CAAA,EAAAK,EAAA,aAAA,UAAA,EACAL,EAAA,CAAA,EAAAK,EAAA,aAAA,OAAA,EAEnBL,EAAA,CAAA,EAAAoH,EAAAM,EAAA7D,SAAA6B,EAAA7C,cAAA,GAAA,CAAA6E,EAAAlF,MAAA,GAAA,EAAA,EAGAxC,EAAA,EAAAoH,EAAA1B,EAAA9C,QAAA,EAAA,GAAA,EAAA,kBDhCQ+E,GACAC,EACAC,GACAC,GACAC,EAAWC,EAAAC,EAAAC,EACXC,GAAiBC,GAAAC,GAAAC,GACjBC,EACAC,EACAC,GACAC,EAAoB,EAAAC,OAAA,CAAA,qRAAA,CAAA,CAAA,SAGfxG,CAA2B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r1", "labelName", "\u0275\u0275element", "\u0275\u0275property", "labelTooltip", "faQuestionCircle", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c2", "currentTimeZone", "faGlobe", "faClock", "\u0275\u0275template", "FormDateTimePickerComponent_Case_8_1_ng_template_0_Template", "FormDateTimePickerComponent_Case_8_1_Template", "owlTrigger_r3", "\u0275\u0275pureFunction2", "_c3", "dtTimer_r4", "FormDateTimePickerComponent_Case_9_1_ng_template_0_Template", "FormDateTimePickerComponent_Case_9_1_Template", "dtCalendar_r5", "faCalendarAlt", "FormDateTimePickerComponent_Case_10_1_ng_template_0_Template", "FormDateTimePickerComponent_Case_10_1_Template", "dtDefault_r6", "owlTrigger_r7", "icon_r8", "_c4", "faTriangleExclamation", "\u0275\u0275pipeBind1", "DateTimePickerType", "FormDateTimePickerComponent", "faCircleXmark", "dateInput", "input", "hideLabelName", "value", "model", "disabled", "error", "warning", "requiredField", "startAt", "min", "max", "shouldDisplayTimeZoneWarning", "pickerType", "DEFAULT", "valueChange", "output", "isInputValid", "signal", "dateInputValue", "isValid", "computed", "updateSignals", "set", "invalid", "onChange", "valueChanged", "emit", "writeValue", "dayjs", "isDayjs", "toDate", "registerOnTouched", "_fn", "registerOnChange", "fn", "updateField", "newValue", "Intl", "DateTimeFormat", "resolvedOptions", "timeZone", "startDate", "convertToDate", "startOf", "minDate", "maxDate", "undefined", "clearDate", "reset", "selectors", "viewQuery", "rf", "ctx", "provide", "NG_VALUE_ACCESSOR", "multi", "useExisting", "forwardRef", "decls", "vars", "consts", "template", "FormDateTimePickerComponent_Conditional_0_Template", "FormDateTimePickerComponent_Conditional_1_Template", "FormDateTimePickerComponent_Conditional_2_Template", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "FormDateTimePickerComponent_Case_8_Template", "FormDateTimePickerComponent_Case_9_Template", "FormDateTimePickerComponent_Case_10_Template", "FormDateTimePickerComponent_ng_template_12_Template", "\u0275\u0275templateRefExtractor", "FormDateTimePickerComponent_Conditional_33_Template", "FormDateTimePickerComponent_Conditional_34_Template", "\u0275\u0275conditional", "\u0275\u0275classProp", "_c1", "CALENDAR", "TIMER", "tmp_15_0", "dateInput_r9", "FaStackComponent", "NgbTooltip", "FaIconComponent", "FaStackItemSizeDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "OwlDateTimeModule", "OwlDateTimeTriggerDirective", "OwlDateTimeInputDirective", "OwlDateTimeComponent", "NgClass", "NgTemplateOutlet", "TranslateDirective", "ArtemisTranslatePipe", "styles"]
}
