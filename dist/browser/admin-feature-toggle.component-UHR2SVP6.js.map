{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/features/admin-feature-toggle.component.ts"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { FeatureToggle, FeatureToggleService } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\n\r\ntype FeatureToggleState = {\r\n    index: number;\r\n    name: FeatureToggle;\r\n    isActive: boolean;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-feature-toggles',\r\n    template: `\r\n        <ngx-datatable class=\"bootstrap\" [headerHeight]=\"50\" [limit]=\"20\" [columnMode]=\"'force'\" [footerHeight]=\"50\" [rowHeight]=\"'auto'\" [rows]=\"availableToggles\">\r\n            <ngx-datatable-column name=\"Name\" prop=\"name\">\r\n                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                    {{ value }}\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n            <ngx-datatable-column name=\"Active\" prop=\"isActive\">\r\n                <ng-template ngx-datatable-cell-template let-row=\"row\" let-value=\"value\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" [checked]=\"value\" (change)=\"onFeatureToggle($event, row)\" />\r\n                </ng-template>\r\n            </ngx-datatable-column>\r\n        </ngx-datatable>\r\n    `,\r\n    imports: [NgxDatatableModule],\r\n})\r\nexport class AdminFeatureToggleComponent implements OnInit {\r\n    private featureToggleService = inject(FeatureToggleService);\r\n\r\n    public availableToggles: FeatureToggleState[] = [];\r\n\r\n    ngOnInit(): void {\r\n        this.featureToggleService\r\n            .getFeatureToggles()\r\n            .pipe(\r\n                tap((activeToggles) => {\r\n                    this.availableToggles = Object.values(FeatureToggle).map((name, index) => ({ name, index, isActive: activeToggles.includes(name) }));\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    onFeatureToggle(event: any, row: FeatureToggleState) {\r\n        this.featureToggleService.setFeatureToggleState(row.name, !row.isActive).subscribe();\r\n    }\r\n}\r\n"],
  "mappings": "gcAiBoBA,EAAA,CAAA,qBAAAC,EAAA;sBAAAC,EAAA;iBAAA,qCAKAF,EAAA,EAAA;qBAAA,EAAAG,EAAA,EAAA,QAAA,CAAA,EAAkEC,EAAA,SAAA,SAAAC,EAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAUF,EAAAG,gBAAAR,EAAAC,CAAA,CAA4B,CAAA,CAAA,EAAxGQ,EAAA,EACJd,EAAA,EAAA;iBAAA,wBADoDe,EAAA,EAAAC,EAAA,UAAAC,CAAA,GAOpE,IAAaC,GAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAC5BC,qBAAuBC,EAAOC,CAAoB,EAEnDC,iBAAyC,CAAA,EAEhDC,UAAQ,CACJ,KAAKJ,qBACAK,kBAAiB,EACjBC,KACGC,EAAKC,GAAiB,CAClB,KAAKL,iBAAmBM,OAAOC,OAAOC,CAAa,EAAEC,IAAI,CAACC,EAAMC,KAAW,CAAED,KAAAA,EAAMC,MAAAA,EAAOC,SAAUP,EAAcQ,SAASH,CAAI,CAAC,EAAG,CACvI,CAAC,CAAC,EAELI,UAAS,CAClB,CAEAvB,gBAAgBwB,EAAY5B,EAAuB,CAC/C,KAAKU,qBAAqBmB,sBAAsB7B,EAAIuB,KAAM,CAACvB,EAAIyB,QAAQ,EAAEE,UAAS,CACtF,4CAlBSlB,EAA2B,2BAA3BA,EAA2BqB,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,YAAA,EAAA,eAAA,QAAA,aAAA,eAAA,YAAA,MAAA,EAAA,CAAA,OAAA,OAAA,OAAA,MAAA,EAAA,CAAA,8BAAA,EAAA,EAAA,CAAA,OAAA,SAAA,OAAA,UAAA,EAAA,CAAA,OAAA,WAAA,EAAA,mBAAA,EAAA,SAAA,SAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IAfhC5C,EAAA,EAAA;SAAA,EAAAG,EAAA,EAAA,gBAAA,CAAA,EACIH,EAAA,EAAA;aAAA,EAAAG,EAAA,EAAA,uBAAA,CAAA,EACIH,EAAA,EAAA;iBAAA,EAAA8C,EAAA,EAAAC,EAAA,EAAA,EAAA,cAAA,CAAA,EAGJ/C,EAAA,EAAA;aAAA,EAAAc,EAAA,EACAd,EAAA,EAAA;aAAA,EAAAG,EAAA,EAAA,uBAAA,CAAA,EACIH,EAAA,EAAA;iBAAA,EAAA8C,EAAA,GAAAE,EAAA,EAAA,EAAA,cAAA,CAAA,EAGJhD,EAAA,GAAA;aAAA,EAAAc,EAAA,EACJd,EAAA,GAAA;SAAA,EAAAc,EAAA,EACJd,EAAA,GAAA;KAAA,SAZqCe,EAAA,EAAAC,EAAA,eAAA,EAAA,EAAmB,QAAA,EAAA,EAAa,aAAA,OAAA,EAAuB,eAAA,EAAA,EAAoB,YAAA,MAAA,EAAqB,OAAA6B,EAAAvB,gBAAA,kBAa3H2B,EAAkBC,EAAAC,EAAAC,CAAA,EAAAC,cAAA,CAAA,CAAA,SAEnBnC,CAA2B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275textInterpolate1", "value_r1", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "row_r3", "\u0275\u0275restoreView", "_r2", "row", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onFeatureToggle", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "value_r5", "AdminFeatureToggleComponent", "featureToggleService", "inject", "FeatureToggleService", "availableToggles", "ngOnInit", "getFeatureToggles", "pipe", "tap", "activeToggles", "Object", "values", "FeatureToggle", "map", "name", "index", "isActive", "includes", "subscribe", "event", "setFeatureToggleState", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "AdminFeatureToggleComponent_ng_template_5_Template", "AdminFeatureToggleComponent_ng_template_10_Template", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnCellDirective", "encapsulation"]
}
