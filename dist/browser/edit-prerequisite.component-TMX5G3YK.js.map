{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/edit/edit-prerequisite.component.ts", "src/main/webapp/app/course/competencies/edit/edit-prerequisite.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { finalize, switchMap, take } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { combineLatest, forkJoin } from 'rxjs';\r\n\r\nimport { EditCourseCompetencyComponent } from 'app/course/competencies/edit/edit-course-competency.component';\r\nimport { PrerequisiteFormComponent } from 'app/course/competencies/forms/prerequisite/prerequisite-form.component';\r\nimport { Prerequisite } from 'app/entities/prerequisite.model';\r\nimport { PrerequisiteService } from 'app/course/competencies/prerequisite.service';\r\nimport { CourseCompetencyFormData } from 'app/course/competencies/forms/course-competency-form.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-edit-prerequisite',\r\n    templateUrl: './edit-prerequisite.component.html',\r\n    imports: [PrerequisiteFormComponent, TranslateDirective],\r\n})\r\nexport class EditPrerequisiteComponent extends EditCourseCompetencyComponent implements OnInit {\r\n    private prerequisiteService = inject(PrerequisiteService);\r\n\r\n    prerequisite: Prerequisite;\r\n    formData: CourseCompetencyFormData;\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n\r\n        this.isLoading = true;\r\n        combineLatest([this.activatedRoute.paramMap, this.activatedRoute.parent!.parent!.paramMap])\r\n            .pipe(\r\n                take(1),\r\n                switchMap(([params, parentParams]) => {\r\n                    const prerequisiteId = Number(params.get('prerequisiteId'));\r\n                    this.courseId = Number(parentParams.get('courseId'));\r\n\r\n                    const prerequisiteObservable = this.prerequisiteService.findById(prerequisiteId, this.courseId);\r\n                    const prerequisiteCourseProgressObservable = this.prerequisiteService.getCourseProgress(prerequisiteId, this.courseId);\r\n                    return forkJoin([prerequisiteObservable, prerequisiteCourseProgressObservable]);\r\n                }),\r\n                finalize(() => (this.isLoading = false)),\r\n            )\r\n            .subscribe({\r\n                next: ([prerequisiteResult, courseProgressResult]) => {\r\n                    if (prerequisiteResult.body) {\r\n                        this.prerequisite = prerequisiteResult.body;\r\n                        if (courseProgressResult.body) {\r\n                            this.prerequisite.courseProgress = courseProgressResult.body;\r\n                        }\r\n                    }\r\n\r\n                    this.formData = {\r\n                        id: this.prerequisite.id,\r\n                        title: this.prerequisite.title,\r\n                        description: this.prerequisite.description,\r\n                        softDueDate: this.prerequisite.softDueDate,\r\n                        taxonomy: this.prerequisite.taxonomy,\r\n                        masteryThreshold: this.prerequisite.masteryThreshold,\r\n                        optional: this.prerequisite.optional,\r\n                    };\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n\r\n    updateCompetency(formData: CourseCompetencyFormData) {\r\n        const { title, description, softDueDate, taxonomy, masteryThreshold, optional } = formData;\r\n\r\n        this.prerequisite.title = title;\r\n        this.prerequisite.description = description;\r\n        this.prerequisite.softDueDate = softDueDate;\r\n        this.prerequisite.taxonomy = taxonomy;\r\n        this.prerequisite.masteryThreshold = masteryThreshold;\r\n        this.prerequisite.optional = optional;\r\n\r\n        this.isLoading = true;\r\n\r\n        this.prerequisiteService\r\n            .update(this.prerequisite, this.courseId)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                    // currently at /course-management/{courseId}/prerequisite-management/{competencyId}/edit, going to /course-management/{courseId}/competency-management/\r\n                    this.router.navigate(['../../../competency-management/'], { relativeTo: this.activatedRoute });\r\n                }),\r\n            )\r\n            .subscribe({\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n}\r\n", "@if (isLoading) {\r\n    <div class=\"d-flex justify-content-center\">\r\n        <div class=\"spinner-border\" role=\"status\">\r\n            <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n        </div>\r\n    </div>\r\n} @else {\r\n    <div class=\"container\">\r\n        <h3 jhiTranslate=\"artemisApp.prerequisite.edit.title\"></h3>\r\n        <jhi-prerequisite-form\r\n            [isEditMode]=\"true\"\r\n            [formData]=\"formData\"\r\n            (formSubmitted)=\"updateCompetency($event)\"\r\n            [courseId]=\"courseId\"\r\n            [lecturesOfCourseWithLectureUnits]=\"lecturesWithLectureUnits\"\r\n            [averageStudentScore]=\"prerequisite?.courseProgress?.averageStudentScore ?? 0\"\r\n            [prerequisite]=\"prerequisite\"\r\n        />\r\n    </div>\r\n}\r\n"],
  "mappings": "mhFCCIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EACJF,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,qCACIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,KAAA,CAAA,EACAF,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,wBAAA,CAAA,EAGIG,EAAA,gBAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAiBF,EAAAG,iBAAAN,CAAA,CAAwB,CAAA,CAAA,EAH7CF,EAAA,EASJH,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,sBATYY,EAAA,CAAA,EAAAC,EAAA,aAAA,EAAA,EAAmB,WAAAL,EAAAM,QAAA,EACE,WAAAN,EAAAO,QAAA,EAEA,mCAAAP,EAAAQ,wBAAA,EACwC,uBAAAC,EAAAT,EAAAU,cAAA,MAAAV,EAAAU,aAAAC,gBAAA,KAAA,KAAAX,EAAAU,aAAAC,eAAAC,uBAAA,MAAAH,IAAAI,OAAAJ,EAAA,CAAA,EACiB,eAAAT,EAAAU,YAAA,GDG1F,IAAaI,GAA0B,IAAA,CAAjC,MAAOA,UAAkCC,CAA6B,CAChEC,oBAAsBC,EAAOC,CAAmB,EAExDR,aACAJ,SAEAa,UAAQ,CACJ,MAAMA,SAAQ,EAEd,KAAKC,UAAY,GACjBC,EAAc,CAAC,KAAKC,eAAeC,SAAU,KAAKD,eAAeE,OAAQA,OAAQD,QAAQ,CAAC,EACrFE,KACGC,EAAK,CAAC,EACNC,EAAU,CAAC,CAACC,EAAQC,CAAY,IAAK,CACjC,IAAMC,EAAiBC,OAAOH,EAAOI,IAAI,gBAAgB,CAAC,EAC1D,KAAKzB,SAAWwB,OAAOF,EAAaG,IAAI,UAAU,CAAC,EAEnD,IAAMC,EAAyB,KAAKjB,oBAAoBkB,SAASJ,EAAgB,KAAKvB,QAAQ,EACxF4B,EAAuC,KAAKnB,oBAAoBoB,kBAAkBN,EAAgB,KAAKvB,QAAQ,EACrH,OAAO8B,EAAS,CAACJ,EAAwBE,CAAoC,CAAC,CAClF,CAAC,EACDG,EAAS,IAAO,KAAKlB,UAAY,EAAM,CAAC,EAE3CmB,UAAU,CACPC,KAAMA,CAAC,CAACC,EAAoBC,CAAoB,IAAK,CAC7CD,EAAmBE,OACnB,KAAKjC,aAAe+B,EAAmBE,KACnCD,EAAqBC,OACrB,KAAKjC,aAAaC,eAAiB+B,EAAqBC,OAIhE,KAAKrC,SAAW,CACZsC,GAAI,KAAKlC,aAAakC,GACtBC,MAAO,KAAKnC,aAAamC,MACzBC,YAAa,KAAKpC,aAAaoC,YAC/BC,YAAa,KAAKrC,aAAaqC,YAC/BC,SAAU,KAAKtC,aAAasC,SAC5BC,iBAAkB,KAAKvC,aAAauC,iBACpCC,SAAU,KAAKxC,aAAawC,SAEpC,EACAC,MAAQC,GAA2BC,EAAQ,KAAKC,aAAcF,CAAG,EACpE,CACT,CAEAjD,iBAAiBG,EAAkC,CAC/C,GAAM,CAAEuC,MAAAA,EAAOC,YAAAA,EAAaC,YAAAA,EAAaC,SAAAA,EAAUC,iBAAAA,EAAkBC,SAAAA,CAAQ,EAAK5C,EAElF,KAAKI,aAAamC,MAAQA,EAC1B,KAAKnC,aAAaoC,YAAcA,EAChC,KAAKpC,aAAaqC,YAAcA,EAChC,KAAKrC,aAAasC,SAAWA,EAC7B,KAAKtC,aAAauC,iBAAmBA,EACrC,KAAKvC,aAAawC,SAAWA,EAE7B,KAAK9B,UAAY,GAEjB,KAAKJ,oBACAuC,OAAO,KAAK7C,aAAc,KAAKH,QAAQ,EACvCkB,KACGa,EAAS,IAAK,CACV,KAAKlB,UAAY,GAEjB,KAAKoC,OAAOC,SAAS,CAAC,iCAAiC,EAAG,CAAEC,WAAY,KAAKpC,cAAc,CAAE,CACjG,CAAC,CAAC,EAELiB,UAAU,CACPY,MAAQC,GAA2BC,EAAQ,KAAKC,aAAcF,CAAG,EACpE,CACT,gEAtEStC,CAAyB,IAAA6C,GAAzB7C,CAAyB,CAAA,CAAA,GAAA,2BAAzBA,EAAyB8C,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,SAAA,wBAAA,EAAA,CAAA,OAAA,SAAA,EAAA,gBAAA,EAAA,CAAA,eAAA,UAAA,EAAA,SAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,eAAA,oCAAA,EAAA,CAAA,EAAA,gBAAA,aAAA,WAAA,WAAA,mCAAA,sBAAA,cAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GClBtCE,EAAA,EAAAC,EAAA,EAAA,CAAA,EAAiB,EAAAC,EAAA,EAAA,CAAA,OAAjBC,EAAAJ,EAAAhD,UAAA,EAAA,CAAA,iBDgBcqD,EAA2BC,CAAkB,EAAAC,cAAA,CAAA,CAAA,SAE9C7D,CAA0B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateCompetency", "\u0275\u0275advance", "\u0275\u0275property", "formData", "courseId", "lecturesWithLectureUnits", "tmp_5_0", "prerequisite", "courseProgress", "averageStudentScore", "undefined", "EditPrerequisiteComponent", "EditCourseCompetencyComponent", "prerequisiteService", "inject", "PrerequisiteService", "ngOnInit", "isLoading", "combineLatest", "activatedRoute", "paramMap", "parent", "pipe", "take", "switchMap", "params", "parentParams", "prerequisiteId", "Number", "get", "prerequisiteObservable", "findById", "prerequisiteCourseProgressObservable", "getCourseProgress", "forkJoin", "finalize", "subscribe", "next", "prerequisiteResult", "courseProgressResult", "body", "id", "title", "description", "softDueDate", "taxonomy", "masteryThreshold", "optional", "error", "res", "onError", "alertService", "update", "router", "navigate", "relativeTo", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "EditPrerequisiteComponent_Conditional_0_Template", "EditPrerequisiteComponent_Conditional_1_Template", "\u0275\u0275conditional", "PrerequisiteFormComponent", "TranslateDirective", "encapsulation"]
}
