{"version":3,"sources":["node_modules/compare-versions/lib/esm/utils.js","node_modules/compare-versions/lib/esm/compareVersions.js","node_modules/compare-versions/lib/esm/compare.js","src/main/webapp/app/shared/orion/outdated-plugin-warning/orion-version-validator.service.ts","src/main/webapp/app/core/auth/user-route-access-service.ts"],"sourcesContent":["export const semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\nexport const validateAndParse = version => {\n  if (typeof version !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = version.match(semver);\n  if (!match) {\n    throw new Error(`Invalid argument not valid semver ('${version}' received)`);\n  }\n  match.shift();\n  return match;\n};\nconst isWildcard = s => s === '*' || s === 'x' || s === 'X';\nconst tryParse = v => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\nconst forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];\nconst compareStrings = (a, b) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\nexport const compareSegments = (a, b) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n","import { compareSegments, validateAndParse } from './utils.js';\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1, v2) => {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n  return 0;\n};\n","import { compareVersions } from './compareVersions.js';\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1, v2, operator) => {\n  // validate input operator\n  assertValidOperator(operator);\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n  return operatorResMap[operator].includes(res);\n};\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n  '!=': [-1, 1]\n};\nconst allowedOperators = Object.keys(operatorResMap);\nconst assertValidOperator = op => {\n  if (typeof op !== 'string') {\n    throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(`Invalid operator, expected one of ${allowedOperators.join('|')}`);\n  }\n};\n","import { Injectable, inject } from '@angular/core';\r\nimport { isOrion } from 'app/shared/orion/orion';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { Router } from '@angular/router';\r\nimport { filter, first, map } from 'rxjs/operators';\r\nimport { compare } from 'compare-versions';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ProfileInfo } from 'app/shared/layouts/profiles/profile-info.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrionVersionValidator {\r\n    private profileService = inject(ProfileService);\r\n    private router = inject(Router);\r\n\r\n    isOrion = isOrion;\r\n    private minVersion: string;\r\n    private isValidVersion: boolean;\r\n\r\n    /**\r\n     * Validates the installed Orion plugin version against the allowed version range. This will not validate anything\r\n     * if Artemis is not opened by Orion and just return true in this case!\r\n     * Otherwise, checks the loaded profile, which includes the allowed version range and automatically routes\r\n     * to an error page if the installed version is incompatible.\r\n     */\r\n    validateOrionVersion(): Observable<boolean> {\r\n        if (this.isOrion) {\r\n            return this.validate();\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private validate(): Observable<boolean> {\r\n        if (this.isValidVersion !== undefined) {\r\n            return of(this.isValidVersion);\r\n        }\r\n\r\n        const userAgent = window.navigator.userAgent;\r\n        const orionVersionArray = this.extractVersionFromUserAgent(userAgent);\r\n        if (orionVersionArray.length === 2) {\r\n            const usedVersion = orionVersionArray[1];\r\n            return this.fetchProfileInfoAndCompareVersions(usedVersion);\r\n        } else {\r\n            this.router.navigateByUrl(`/orion-outdated?versionString=soOldThatThereIsNoVersion`);\r\n            this.isValidVersion = false;\r\n            return of(this.isValidVersion);\r\n        }\r\n    }\r\n\r\n    private fetchProfileInfoAndCompareVersions(usedVersion: string): Observable<boolean> {\r\n        return this.profileService.getProfileInfo().pipe(\r\n            filter(Boolean),\r\n            first(),\r\n            map((info: ProfileInfo) => {\r\n                this.minVersion = info.allowedMinimumOrionVersion;\r\n                this.isValidVersion = this.versionInBounds(usedVersion);\r\n                return this.isValidVersion;\r\n            }),\r\n        );\r\n    }\r\n\r\n    private extractVersionFromUserAgent(userAgent: string): string[] {\r\n        return userAgent\r\n            .split(' ')\r\n            .find((spec: string) => spec.includes('Orion') || spec.includes('IntelliJ'))!\r\n            .split('/');\r\n    }\r\n\r\n    private versionInBounds(usedVersion: string): boolean {\r\n        if (!compare(usedVersion, this.minVersion, '>=')) {\r\n            this.router.navigateByUrl(`/orion-outdated?versionString=${usedVersion}`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { OrionVersionValidator } from 'app/shared/orion/outdated-plugin-warning/orion-version-validator.service';\r\nimport { first, switchMap } from 'rxjs/operators';\r\nimport { from, lastValueFrom, of } from 'rxjs';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserRouteAccessService implements CanActivate {\r\n    private router = inject(Router);\r\n    private accountService = inject(AccountService);\r\n    private alertService = inject(AlertService);\r\n    private stateStorageService = inject(StateStorageService);\r\n    private orionVersionValidator = inject(OrionVersionValidator);\r\n\r\n    /**\r\n     * Check if the client can activate a route.\r\n     * @param route The ActivatedRouteSnapshot of the route to activate.\r\n     * @param state The current RouterStateSnapshot.\r\n     * @return True if Orion version is valid or the connected client is a regular browser and\r\n     * user is logged in, false otherwise.\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\r\n        const ltiRedirectUrl = this.handleLTIRedirect(route, state);\r\n        const urlToStore = ltiRedirectUrl ?? state.url;\r\n\r\n        const authorities = route.data['authorities'];\r\n\r\n        // For programming exercise template and solution participations editors shall be allowed to view the submissions, but not for other submissions.\r\n        // To ensure this behaviour the query parameter of the route needs to be considered and the Editor authority needs to be added subsequently within the\r\n        // canActivate check, as it can not be allowed directly within the corresponding router since this would allow access to all submissions.\r\n        if (\r\n            (route.routeConfig?.path === ':courseId/programming-exercises/:exerciseId/participations/:participationId/submissions' ||\r\n                route.routeConfig?.path === ':examId/exercise-groups/:exerciseGroupId/programming-exercises/:exerciseId/participations/:participationId') &&\r\n            route.queryParams['isTmpOrSolutionProgrParticipation'] === 'true'\r\n        ) {\r\n            authorities.push(Authority.EDITOR);\r\n        }\r\n\r\n        // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\r\n        // that the client has an account too, if they already logged in by the server.\r\n        // This could happen on a page refresh.\r\n        return lastValueFrom(\r\n            this.orionVersionValidator\r\n                // Returns true, if the Orion version is up-to-date, or the connected client is just a regular browser\r\n                .validateOrionVersion()\r\n                .pipe(\r\n                    // Only take the first returned boolean and then cancel the subscription\r\n                    first(),\r\n                    switchMap((isValidOrNoIDE) => {\r\n                        // 1./2. Case: The Orion version is up-to-date/The connected client is a regular browser\r\n                        if (isValidOrNoIDE) {\r\n                            // Always check whether the user is logged in\r\n                            return from(this.checkLogin(authorities, urlToStore));\r\n                        }\r\n                        // 3. Case: The Orion Version is not up-to-date\r\n                        return of(false);\r\n                    }),\r\n                ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deal with the redirect for LTI users: displays an alert. Removes the param so this only happens once.\r\n     * @param route {ActivatedRouteSnapshot} The ActivatedRouteSnapshot of the route to activate.\r\n     * @param state {RouterStateSnapshot} The current RouterStateSnapshot.\r\n     */\r\n    private handleLTIRedirect(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): string {\r\n        // Note: The following URL has to match the redirect URL in LtiResource.java in the method launch(...) shortly before the return\r\n        const regexPattern = new RegExp(/\\/courses\\/\\d+\\/exercises\\/\\d+/g);\r\n        if (regexPattern.test(state.url)) {\r\n            if (route.queryParams['ltiSuccessLoginRequired']) {\r\n                const username = route.queryParams['ltiSuccessLoginRequired'];\r\n                this.alertService.success('artemisApp.lti.ltiSuccessLoginRequired', { user: username });\r\n                this.accountService.setPrefilledUsername(username);\r\n                return state.url.split('?')[0]; // Removes the query parameters from the url so this is only done once\r\n            }\r\n        }\r\n        return state.url;\r\n    }\r\n\r\n    /**\r\n     * Check whether user is logged in and has the required authorities.\r\n     * @param authorities List of required authorities.\r\n     * @param url Current url.\r\n     * @return True if authorities are empty or null, False if user not logged in or does not have required authorities.\r\n     */\r\n    checkLogin(authorities: string[], url: string): Promise<boolean> {\r\n        const accountService = this.accountService;\r\n        return Promise.resolve(\r\n            accountService.identity().then((account) => {\r\n                if (!authorities || authorities.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (account) {\r\n                    return accountService.hasAnyAuthority(authorities).then((response) => {\r\n                        return !!response;\r\n                    });\r\n                }\r\n\r\n                this.stateStorageService.storeUrl(url);\r\n                this.router.navigate(['accessdenied']).then(() => {\r\n                    // only show the login dialog, if the user hasn't logged in yet\r\n                    if (!account) {\r\n                        this.router.navigate(['/']);\r\n                    }\r\n                });\r\n                return false;\r\n            }),\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","names":["semver","validateAndParse","version","match","isWildcard","s","tryParse","v","n","forceType","a","b","compareStrings","ap","bp","compareSegments","i","r","compareVersions","v1","v2","n1","validateAndParse","n2","p1","p2","r","compareSegments","compare","v1","v2","operator","assertValidOperator","res","compareVersions","operatorResMap","allowedOperators","op","OrionVersionValidator","profileService","inject","ProfileService","router","Router","isOrion","minVersion","isValidVersion","validateOrionVersion","validate","of","undefined","userAgent","window","navigator","orionVersionArray","extractVersionFromUserAgent","length","usedVersion","fetchProfileInfoAndCompareVersions","navigateByUrl","getProfileInfo","pipe","filter","Boolean","first","map","info","allowedMinimumOrionVersion","versionInBounds","split","find","spec","includes","compare","factory","ɵfac","providedIn","UserRouteAccessService","router","inject","Router","accountService","AccountService","alertService","AlertService","stateStorageService","StateStorageService","orionVersionValidator","OrionVersionValidator","canActivate","route","state","urlToStore","handleLTIRedirect","url","authorities","data","routeConfig","path","queryParams","push","Authority","EDITOR","lastValueFrom","validateOrionVersion","pipe","first","switchMap","isValidOrNoIDE","from","checkLogin","of","RegExp","test","username","success","user","setPrefilledUsername","split","Promise","resolve","identity","then","account","length","hasAnyAuthority","response","storeUrl","navigate","factory","ɵfac","providedIn"],"x_google_ignoreList":[0,1,2]}