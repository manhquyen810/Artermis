{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service.ts", "src/main/webapp/app/exercises/shared/feedback/feedback-suggestion-badge/feedback-suggestion-badge.component.ts", "src/main/webapp/app/exercises/shared/feedback/feedback-suggestion-badge/feedback-suggestion-badge.component.html", "src/main/webapp/app/shared/grading-instruction-link-icon/grading-instruction-link-icon.component.ts", "src/main/webapp/app/shared/grading-instruction-link-icon/grading-instruction-link-icon.component.html", "src/main/webapp/app/assessment/unreferenced-feedback-detail/assessment-correction-round-badge/assessment-correction-round-badge.component.ts", "src/main/webapp/app/assessment/unreferenced-feedback-detail/assessment-correction-round-badge/assessment-correction-round-badge.component.html", "src/main/webapp/app/shared/pipes/feedback-content.pipe.ts", "src/main/webapp/app/shared/pipes/quote.pipe.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StructuredGradingCriterionService {\r\n    /**\r\n     * Connects the structured grading instructions with the feedback of a submission element\r\n     * @param {Event} event - The drop event\r\n     * @param {Feedback} feedback - The feedback of the assessment to be updated\r\n     * the SGI element sent on drag in processed in this method\r\n     * the corresponding drag method is in StructuredGradingInstructionsAssessmentLayoutComponent\r\n     */\r\n    updateFeedbackWithStructuredGradingInstructionEvent(feedback: Feedback, event: any) {\r\n        event.preventDefault();\r\n        try {\r\n            const data = event.dataTransfer.getData('text/plain');\r\n            const instruction = JSON.parse(data);\r\n            feedback.gradingInstruction = instruction;\r\n            feedback.credits = instruction.credits;\r\n        } catch (err) {\r\n            // Rethrow any non syntax error. syntax errors are caused by invalid JSON if someone drops something unrelated, ignore them\r\n            if (!(err instanceof SyntaxError)) {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    computeTotalScore(assessments: Feedback[]) {\r\n        let score = 0;\r\n        const gradingInstructions = {}; // { instructionId: noOfEncounters }\r\n        for (const feedback of assessments) {\r\n            if (feedback.gradingInstruction) {\r\n                score = this.calculateScoreForGradingInstructions(feedback, score, gradingInstructions);\r\n            } else {\r\n                score += feedback.credits!;\r\n            }\r\n        }\r\n        return score;\r\n    }\r\n\r\n    calculateScoreForGradingInstructions(feedback: Feedback, score: number, gradingInstructions: any): number {\r\n        if (gradingInstructions[feedback.gradingInstruction!.id!]) {\r\n            // We Encountered this grading instruction before\r\n            const maxCount = feedback.gradingInstruction!.usageCount;\r\n            const encounters = gradingInstructions[feedback.gradingInstruction!.id!];\r\n            if (maxCount && maxCount > 0) {\r\n                if (encounters >= maxCount) {\r\n                    gradingInstructions[feedback.gradingInstruction!.id!] = encounters + 1;\r\n                } else {\r\n                    gradingInstructions[feedback.gradingInstruction!.id!] = encounters + 1;\r\n                    score += feedback.gradingInstruction!.credits;\r\n                }\r\n            } else {\r\n                score += feedback.credits!;\r\n            }\r\n        } else {\r\n            // First time encountering the grading instruction\r\n            gradingInstructions[feedback.gradingInstruction!.id!] = 1;\r\n            score += feedback.credits!;\r\n        }\r\n        return score;\r\n    }\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { faLightbulb } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Feedback, FeedbackSuggestionType } from 'app/entities/feedback.model';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-suggestion-badge',\r\n    templateUrl: './feedback-suggestion-badge.component.html',\r\n    styleUrls: ['./feedback-suggestion-badge.component.scss'],\r\n    imports: [NgbTooltip, FaIconComponent, TranslateDirective],\r\n})\r\nexport class FeedbackSuggestionBadgeComponent {\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input()\r\n    feedback: Feedback;\r\n\r\n    @Input()\r\n    useDefaultText = false;\r\n\r\n    // Icons\r\n    faLightbulb = faLightbulb;\r\n\r\n    get text(): string {\r\n        const feedbackSuggestionType = Feedback.getFeedbackSuggestionType(this.feedback);\r\n        if (feedbackSuggestionType === FeedbackSuggestionType.ADAPTED) {\r\n            // Always mark adapted feedback suggestions as such, even with the default badge in text mode\r\n            return 'artemisApp.assessment.suggestion.adapted';\r\n        }\r\n        if (this.useDefaultText) {\r\n            return 'artemisApp.assessment.suggestion.default';\r\n        }\r\n        switch (feedbackSuggestionType) {\r\n            case FeedbackSuggestionType.SUGGESTED:\r\n                return 'artemisApp.assessment.suggestion.suggested';\r\n            case FeedbackSuggestionType.ACCEPTED:\r\n                return 'artemisApp.assessment.suggestion.accepted';\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    get tooltip(): string {\r\n        if (this.useDefaultText) {\r\n            return this.translateService.instant('artemisApp.assessment.suggestionTitle.default');\r\n        }\r\n        const feedbackSuggestionType = Feedback.getFeedbackSuggestionType(this.feedback);\r\n        switch (feedbackSuggestionType) {\r\n            case FeedbackSuggestionType.SUGGESTED:\r\n                return this.translateService.instant('artemisApp.assessment.suggestionTitle.suggested');\r\n            case FeedbackSuggestionType.ACCEPTED:\r\n                return this.translateService.instant('artemisApp.assessment.suggestionTitle.accepted');\r\n            case FeedbackSuggestionType.ADAPTED:\r\n                return this.translateService.instant('artemisApp.assessment.suggestionTitle.adapted');\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n}\r\n", "<span class=\"badge suggestion-badge\" [ngbTooltip]=\"tooltip\">\r\n    <fa-icon [icon]=\"faLightbulb\" />\r\n    <span [jhiTranslate]=\"text\">Suggestion</span>\r\n</span>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { faLink, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-grading-instruction-link-icon',\r\n    templateUrl: './grading-instruction-link-icon.component.html',\r\n    imports: [FaIconComponent, NgbTooltip, NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class GradingInstructionLinkIconComponent implements OnInit {\r\n    private artemisTranslatePipe = inject(ArtemisTranslatePipe);\r\n\r\n    @Input() linkIcon = faLink;\r\n    @Input() feedback: Feedback;\r\n\r\n    instruction: GradingInstruction | undefined;\r\n    confirmIcon = faTrash;\r\n    showConfirm = false;\r\n\r\n    ngOnInit(): void {\r\n        this.instruction = this.feedback.gradingInstruction;\r\n    }\r\n\r\n    /**\r\n     * remove grading instruction on click\r\n     */\r\n    removeLink(): void {\r\n        this.toggle();\r\n        this.feedback.gradingInstruction = undefined;\r\n    }\r\n\r\n    /**\r\n     * Set the tooltip of the link icon to be equal to the grading instruction description text\r\n     * @param {GradingInstruction} instruction - the instruction object which is associated with feedback\r\n     */\r\n    setTooltip(instruction: GradingInstruction) {\r\n        return this.artemisTranslatePipe.transform('artemisApp.exercise.assessmentInstruction') + instruction.instructionDescription;\r\n    }\r\n\r\n    /**\r\n     * toggle showConfirm\r\n     */\r\n    toggle(): void {\r\n        this.showConfirm = !this.showConfirm;\r\n    }\r\n}\r\n", "@if (!showConfirm) {\r\n    <fa-icon [icon]=\"linkIcon\" [ngbTooltip]=\"setTooltip(instruction!)\" (click)=\"toggle()\" />\r\n}\r\n@if (showConfirm) {\r\n    <fa-icon\r\n        [ngClass]=\"'text-danger'\"\r\n        [icon]=\"confirmIcon\"\r\n        [ngbTooltip]=\"'artemisApp.assessment.messages.removeAssessmentInstructionLink' | artemisTranslate\"\r\n        (mouseleave)=\"toggle()\"\r\n        (click)=\"removeLink()\"\r\n    />\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgStyle } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-assessment-correction-round-badge',\r\n    templateUrl: './assessment-correction-round-badge.component.html',\r\n    styleUrls: ['./assessment-correction-round-badge.component.scss'],\r\n    imports: [TranslateDirective, NgStyle],\r\n})\r\nexport class AssessmentCorrectionRoundBadgeComponent {\r\n    @Input() feedback: Feedback;\r\n    @Input() highlightDifferences = false;\r\n}\r\n", "<div>\r\n    <!-- correction round label-->\r\n    @if (highlightDifferences && feedback.copiedFeedbackId) {\r\n        <h5 class=\"correction-label\">\r\n            <span class=\"badge text-white me-1\" [ngStyle]=\"{ backgroundColor: '#3e8acc' }\" jhiTranslate=\"artemisApp.assessment.diffView.correctionRoundDiffFirst\"\r\n                >First correction round</span\r\n            >\r\n        </h5>\r\n    }\r\n    @if (highlightDifferences && !feedback.copiedFeedbackId) {\r\n        <h5 class=\"correction-label\">\r\n            <span class=\"badge text-white me-1\" [ngStyle]=\"{ backgroundColor: '#ffa561' }\" jhiTranslate=\"artemisApp.assessment.diffView.correctionRoundDiffSecond\"\r\n                >Second correction round</span\r\n            >\r\n        </h5>\r\n    }\r\n</div>\r\n", "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\n\r\n@Pipe({\r\n    name: 'feedbackContent',\r\n    // impure: we need to detect changes in attributes of the feedback\r\n    pure: false,\r\n})\r\nexport class FeedbackContentPipe implements PipeTransform {\r\n    /**\r\n     * Extracts the content from a feedback.\r\n     *\r\n     * Can be either the detail text if present, or the grading instruction text otherwise.\r\n     *\r\n     * @param feedback Some feedback.\r\n     */\r\n    transform(feedback: Feedback): string | undefined {\r\n        if (feedback.detailText) {\r\n            return feedback.detailText;\r\n        } else {\r\n            return feedback.gradingInstruction?.feedback;\r\n        }\r\n    }\r\n}\r\n", "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'quoted',\r\n})\r\nexport class QuotePipe implements PipeTransform {\r\n    /**\r\n     * Wraps non-empty texts in quotes.\r\n     *\r\n     * @param text Some text.\r\n     * @param prefix An additional prefix that will be added before the opening quote in the non-empty case.\r\n     * @return The text in quotes if non-empty. An empty string otherwise.\r\n     */\r\n    transform(text: string | undefined, prefix = ''): string {\r\n        if (text) {\r\n            return `${prefix}\"${text}\"`;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["StructuredGradingCriterionService", "updateFeedbackWithStructuredGradingInstructionEvent", "feedback", "event", "preventDefault", "data", "dataTransfer", "getData", "instruction", "JSON", "parse", "gradingInstruction", "credits", "err", "SyntaxError", "computeTotalScore", "assessments", "score", "gradingInstructions", "calculateScoreForGradingInstructions", "id", "maxCount", "usageCount", "encounters", "factory", "\u0275fac", "providedIn", "FeedbackSuggestionBadgeComponent", "translateService", "inject", "TranslateService", "feedback", "useDefaultText", "faLightbulb", "text", "feedbackSuggestionType", "Feedback", "getFeedbackSuggestionType", "FeedbackSuggestionType", "ADAPTED", "SUGGESTED", "ACCEPTED", "tooltip", "instant", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275advance", "NgbTooltip", "FaIconComponent", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggle", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "linkIcon", "setTooltip", "instruction", "_r3", "removeLink", "confirmIcon", "\u0275\u0275pipeBind1", "GradingInstructionLinkIconComponent", "artemisTranslatePipe", "inject", "ArtemisTranslatePipe", "faLink", "feedback", "faTrash", "showConfirm", "ngOnInit", "gradingInstruction", "undefined", "transform", "instructionDescription", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "GradingInstructionLinkIconComponent_Conditional_0_Template", "GradingInstructionLinkIconComponent_Conditional_1_Template", "\u0275\u0275conditional", "FaIconComponent", "NgbTooltip", "NgClass", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "_c1", "AssessmentCorrectionRoundBadgeComponent", "feedback", "highlightDifferences", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "AssessmentCorrectionRoundBadgeComponent_Conditional_3_Template", "AssessmentCorrectionRoundBadgeComponent_Conditional_4_Template", "\u0275\u0275conditional", "copiedFeedbackId", "TranslateDirective", "NgStyle", "styles", "FeedbackContentPipe", "transform", "feedback", "detailText", "gradingInstruction", "pure", "QuotePipe", "transform", "text", "prefix", "pure"]
}
