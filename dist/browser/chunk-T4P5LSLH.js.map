{
  "version": 3,
  "sources": ["src/main/webapp/app/guided-tour/tours/modeling-tour.ts", "src/main/webapp/app/entities/submission-patch.model.ts", "src/main/webapp/app/exercises/modeling/participate/modeling-submission.component.ts", "src/main/webapp/app/exercises/modeling/participate/modeling-submission.component.html"],
  "sourcesContent": ["import { GuidedTour } from 'app/guided-tour/guided-tour.model';\r\nimport { ImageTourStep, ModelingTaskTourStep, TextTourStep, UserInterActionTourStep } from 'app/guided-tour/guided-tour-step.model';\r\nimport { Orientation, ResetParticipation, UserInteractionEvent } from 'app/guided-tour/guided-tour.constants';\r\nimport { GuidedTourModelingTask, associationUML, personUML, studentUML } from 'app/guided-tour/guided-tour-task.model';\r\n\r\nexport const modelingTour: GuidedTour = {\r\n    settingsKey: 'modeling_tour',\r\n    resetParticipation: ResetParticipation.EXERCISE_PARTICIPATION,\r\n    steps: [\r\n        new TextTourStep({\r\n            headlineTranslateKey: 'tour.modelingExercise.editorArea.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.editorArea.content',\r\n        }),\r\n        new ImageTourStep({\r\n            headlineTranslateKey: 'tour.modelingExercise.addEditUmlElement.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.addEditUmlElement.content',\r\n            hintTranslateKey: 'tour.modelingExercise.addEditUmlElement.hint',\r\n            imageUrl: '/../../../content/images/guided-tour-images/apollon-add-edit-element.gif',\r\n        }),\r\n        new ImageTourStep({\r\n            headlineTranslateKey: 'tour.modelingExercise.createAssociation.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.createAssociation.content',\r\n            hintTranslateKey: 'tour.modelingExercise.createAssociation.hint',\r\n            imageUrl: '/../../../content/images/guided-tour-images/apollon-add-association.gif',\r\n        }),\r\n        new ModelingTaskTourStep({\r\n            highlightSelector: 'jhi-modeling-editor .guided-tour.modeling-editor .modeling-editor',\r\n            headlineTranslateKey: 'tour.modelingExercise.executeTasks.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.executeTasks.content',\r\n            highlightPadding: 5,\r\n            orientation: Orientation.TOP,\r\n            userInteractionEvent: UserInteractionEvent.MODELING,\r\n            modelingTask: new GuidedTourModelingTask(personUML.name, 'tour.modelingExercise.executeTasks.personClass'),\r\n        }),\r\n        new ModelingTaskTourStep({\r\n            highlightSelector: 'jhi-modeling-editor .guided-tour.modeling-editor .modeling-editor',\r\n            headlineTranslateKey: 'tour.modelingExercise.executeTasks.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.executeTasks.content',\r\n            orientation: Orientation.TOP,\r\n            userInteractionEvent: UserInteractionEvent.MODELING,\r\n            modelingTask: new GuidedTourModelingTask(studentUML.name, 'tour.modelingExercise.executeTasks.studentClass'),\r\n        }),\r\n        new ModelingTaskTourStep({\r\n            highlightSelector: 'jhi-modeling-editor .guided-tour.modeling-editor .modeling-editor',\r\n            headlineTranslateKey: 'tour.modelingExercise.executeTasks.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.executeTasks.content',\r\n            orientation: Orientation.TOP,\r\n            userInteractionEvent: UserInteractionEvent.MODELING,\r\n            modelingTask: new GuidedTourModelingTask(associationUML.name, 'tour.modelingExercise.executeTasks.association'),\r\n        }),\r\n        new UserInterActionTourStep({\r\n            highlightSelector: 'jhi-modeling-submission .guided-tour.submission-button',\r\n            headlineTranslateKey: 'tour.modelingExercise.submit.headline',\r\n            contentTranslateKey: 'tour.modelingExercise.submit.content',\r\n            hintTranslateKey: 'tour.modelingExercise.submit.hint',\r\n            highlightPadding: 20,\r\n            orientation: Orientation.LEFT,\r\n            userInteractionEvent: UserInteractionEvent.CLICK,\r\n            triggerNextStep: true,\r\n        }),\r\n    ],\r\n};\r\n", "import { Operation } from 'fast-json-patch';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\n\r\n/**\r\n * A patch for a submission. It contains a list of operations that should be applied to the submission,\r\n * in the format of a JSON Patch (RFC 6902).\r\n */\r\nexport class SubmissionPatch /*implements BaseEntity*/ {\r\n    /**\r\n     * The participation the submission belongs to\r\n     */\r\n    public participation?: Participation;\r\n    /**\r\n     * The list of operations that should be applied to the submission,\r\n     * in the format of a JSON Patch (RFC 6902)\r\n     */\r\n    public patch: Operation[];\r\n\r\n    constructor(patch: Operation[]) {\r\n        this.patch = patch;\r\n    }\r\n}\r\n", "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, HostListener, Input, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { Patch, Selection, UMLDiagramType, UMLElementType, UMLModel, UMLRelationshipType } from '@ls1intum/apollon';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { ComplaintType } from 'app/entities/complaint.model';\r\nimport { Feedback, buildFeedbackTextForReview, checkSubsequentFeedbackInAssessment } from 'app/entities/feedback.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { getFirstResultWithComplaint, getLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { ModelingAssessmentService } from 'app/exercises/modeling/assess/modeling-assessment.service';\r\nimport { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\r\nimport { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\r\nimport { HeaderParticipationPageComponent } from 'app/exercises/shared/exercise-headers/header-participation-page.component';\r\nimport { getExerciseDueDate, hasExerciseDueDatePassed } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { addParticipationToResult, getUnreferencedFeedback } from 'app/exercises/shared/result/result.utils';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { TeamSubmissionSyncComponent } from 'app/exercises/shared/team-submission-sync/team-submission-sync.component';\r\nimport { TeamParticipateInfoBoxComponent } from 'app/exercises/shared/team/team-participate/team-participate-info-box.component';\r\nimport { GuidedTourService } from 'app/guided-tour/guided-tour.service';\r\nimport { modelingTour } from 'app/guided-tour/tours/modeling-tour';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { AUTOSAVE_CHECK_INTERVAL, AUTOSAVE_EXERCISE_INTERVAL, AUTOSAVE_TEAM_EXERCISE_INTERVAL } from 'app/shared/constants/exercise-exam-constants';\r\nimport { faTimeline } from '@fortawesome/free-solid-svg-icons';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { stringifyIgnoringFields } from 'app/shared/util/utils';\r\nimport { Subject, Subscription, TeardownLogic } from 'rxjs';\r\nimport { omit } from 'lodash-es';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { AssessmentNamesForModelId, getNamesForAssessments } from '../assess/modeling-assessment.util';\r\nimport { faExclamationTriangle, faGripLines } from '@fortawesome/free-solid-svg-icons';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { SubmissionPatch } from 'app/entities/submission-patch.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { catchError, filter, skip, switchMap, tap } from 'rxjs/operators';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { of } from 'rxjs';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { RequestFeedbackButtonComponent } from 'app/overview/exercise-details/request-feedback-button/request-feedback-button.component';\r\nimport { ResultHistoryComponent } from 'app/overview/result-history/result-history.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { FullscreenComponent } from 'app/shared/fullscreen/fullscreen.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ModelingAssessmentComponent } from '../assess/modeling-assessment.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DecimalPipe, NgClass } from '@angular/common';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AdditionalFeedbackComponent } from 'app/shared/additional-feedback/additional-feedback.component';\r\nimport { ComplaintsStudentViewComponent } from 'app/complaints/complaints-for-students/complaints-student-view.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\nimport { captureException } from '@sentry/angular';\r\nimport { RatingComponent } from 'app/exercises/shared/rating/rating.component';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-submission',\r\n    templateUrl: './modeling-submission.component.html',\r\n    styleUrls: ['./modeling-submission.component.scss'],\r\n    imports: [\r\n        HeaderParticipationPageComponent,\r\n        ButtonComponent,\r\n        RouterLink,\r\n        RequestFeedbackButtonComponent,\r\n        ResultHistoryComponent,\r\n        ResizeableContainerComponent,\r\n        TeamParticipateInfoBoxComponent,\r\n        FullscreenComponent,\r\n        ModelingEditorComponent,\r\n        FaIconComponent,\r\n        TeamSubmissionSyncComponent,\r\n        ModelingAssessmentComponent,\r\n        TranslateDirective,\r\n        NgClass,\r\n        NgbTooltip,\r\n        AdditionalFeedbackComponent,\r\n        RatingComponent,\r\n        ComplaintsStudentViewComponent,\r\n        DecimalPipe,\r\n        ArtemisTranslatePipe,\r\n        HtmlForMarkdownPipe,\r\n    ],\r\n})\r\nexport class ModelingSubmissionComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\r\n    private websocketService = inject(WebsocketService);\r\n    private modelingSubmissionService = inject(ModelingSubmissionService);\r\n    private modelingAssessmentService = inject(ModelingAssessmentService);\r\n    private alertService = inject(AlertService);\r\n    private route = inject(ActivatedRoute);\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n    private guidedTourService = inject(GuidedTourService);\r\n    private accountService = inject(AccountService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    readonly addParticipationToResult = addParticipationToResult;\r\n    readonly buildFeedbackTextForReview = buildFeedbackTextForReview;\r\n    readonly ButtonType = ButtonType;\r\n\r\n    @ViewChild(ModelingEditorComponent, { static: false }) modelingEditor: ModelingEditorComponent;\r\n\r\n    @Input() participationId?: number;\r\n    @Input() inputExercise?: ModelingExercise;\r\n    @Input() inputSubmission?: ModelingSubmission;\r\n    @Input() inputParticipation?: StudentParticipation;\r\n\r\n    @Input() isExamSummary = false;\r\n    @Input() displayHeader = true;\r\n    @Input() isPrinting = false;\r\n    @Input() expandProblemStatement = false;\r\n\r\n    private subscription: Subscription;\r\n    private manualResultUpdateListener: Subscription;\r\n    private athenaResultUpdateListener: Subscription;\r\n\r\n    participation: StudentParticipation;\r\n    isOwnerOfParticipation: boolean;\r\n\r\n    modelingExercise: ModelingExercise;\r\n    modelingParticipationHeader: StudentParticipation;\r\n    modelingExerciseHeader: ModelingExercise;\r\n    course?: Course;\r\n    result?: Result;\r\n    resultWithComplaint?: Result;\r\n\r\n    selectedEntities: string[];\r\n    selectedRelationships: string[];\r\n\r\n    submission: ModelingSubmission;\r\n    submissionId: number | undefined;\r\n    sortedSubmissionHistory: ModelingSubmission[];\r\n    sortedResultHistory: Result[];\r\n\r\n    assessmentResult?: Result;\r\n    assessmentsNames: AssessmentNamesForModelId = {};\r\n    totalScore: number;\r\n\r\n    umlModel: UMLModel; // input model for Apollon\r\n    hasElements = false; // indicates if the current model has at least one element\r\n    isSaving = false;\r\n    isChanged: boolean;\r\n    retryStarted = false;\r\n    autoSaveInterval: number;\r\n    autoSaveTimer = 0;\r\n\r\n    explanation: string; // current explanation on text editor\r\n\r\n    automaticSubmissionWebsocketChannel: string;\r\n\r\n    // indicates if the assessment due date is in the past. the assessment will not be loaded and displayed to the student if it is not.\r\n    isAfterAssessmentDueDate: boolean;\r\n    isLoading = true;\r\n    isLate: boolean; // indicates if the submission is late\r\n    isGeneratingFeedback: boolean;\r\n    ComplaintType = ComplaintType;\r\n    examMode = false;\r\n\r\n    // submission sync with team members\r\n    private submissionChange = new Subject<ModelingSubmission>();\r\n    protected submissionObservable = this.submissionChange.asObservable();\r\n    protected submissionPatchObservable = new Subject<SubmissionPatch>();\r\n\r\n    // private modelingEditorInitialized = new ReplaySubject<void>();\r\n    resizeOptions = { verticalResize: true };\r\n\r\n    // Icons\r\n    faGripLines = faGripLines;\r\n    farListAlt = faListAlt;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faTimeline = faTimeline;\r\n\r\n    // mode\r\n    isFeedbackView = false;\r\n    showResultHistory = false;\r\n\r\n    ngOnInit(): void {\r\n        if (this.inputValuesArePresent()) {\r\n            this.setupComponentWithInputValues();\r\n        } else {\r\n            this.route.params\r\n                .pipe(\r\n                    switchMap((params) => {\r\n                        this.participationId = params['participationId'] ?? this.participationId;\r\n                        this.submissionId = Number(params['submissionId']) || undefined;\r\n                        this.isFeedbackView = !!this.submissionId;\r\n\r\n                        // If participationId exists and feedback view is needed, fetch history results first\r\n                        if (this.participationId && this.isFeedbackView) {\r\n                            return this.fetchSubmissionHistory().pipe(switchMap(() => this.fetchLatestSubmission()));\r\n                        }\r\n                        // Otherwise, directly fetch the latest submission\r\n                        return this.fetchLatestSubmission();\r\n                    }),\r\n                )\r\n                .subscribe({\r\n                    next: (modelingSubmission) => {\r\n                        if (modelingSubmission) {\r\n                            this.updateModelingSubmission(modelingSubmission);\r\n                            this.setupMode();\r\n                        }\r\n                    },\r\n                    error: (error) => onError(this.alertService, error),\r\n                });\r\n        }\r\n\r\n        const isDisplayedOnExamSummaryPage = !this.displayHeader && this.participationId !== undefined;\r\n        if (!isDisplayedOnExamSummaryPage) {\r\n            window.scroll(0, 0);\r\n        }\r\n    }\r\n\r\n    private setupMode(): void {\r\n        if (this.modelingExercise.teamMode) {\r\n            this.setupSubmissionStreamForTeam();\r\n        } else {\r\n            this.setAutoSaveTimer();\r\n        }\r\n    }\r\n\r\n    private fetchLatestSubmission() {\r\n        return this.modelingSubmissionService.getLatestSubmissionForModelingEditor(this.participationId!).pipe(\r\n            catchError((error: HttpErrorResponse) => {\r\n                onError(this.alertService, error);\r\n                return of(null); // Return null on error\r\n            }),\r\n        );\r\n    }\r\n\r\n    // Fetch the results and sort them\r\n    // Fetch the submissions and sort them by the latest result's completionDate in descending order\r\n    private fetchSubmissionHistory() {\r\n        return this.modelingSubmissionService.getSubmissionsWithResultsForParticipation(this.participationId!).pipe(\r\n            catchError((error: HttpErrorResponse) => {\r\n                onError(this.alertService, error);\r\n                return of([]);\r\n            }),\r\n            tap((submissions: ModelingSubmission[]) => {\r\n                this.sortedSubmissionHistory = submissions.sort((a, b) => {\r\n                    const latestResultA = this.sortResultsByCompletionDate(a.results ?? [])[0];\r\n                    const latestResultB = this.sortResultsByCompletionDate(b.results ?? [])[0];\r\n\r\n                    // Use the latest result's completionDate for comparison\r\n                    const dateA = latestResultA?.completionDate ? dayjs(latestResultA.completionDate).valueOf() : 0;\r\n                    const dateB = latestResultB?.completionDate ? dayjs(latestResultB.completionDate).valueOf() : 0;\r\n\r\n                    return dateA - dateB;\r\n                });\r\n                this.sortedResultHistory = this.sortedSubmissionHistory\r\n                    .map((submission) => {\r\n                        let latestResult: Result | undefined; // Initialize latestResult\r\n\r\n                        if (submission?.results && submission.results.length > 0) {\r\n                            // Sort results inline to find the latest one\r\n                            const sortedResults = [...submission.results].sort((a, b) => {\r\n                                const dateA = a.completionDate ? dayjs(a.completionDate).valueOf() : 0;\r\n                                const dateB = b.completionDate ? dayjs(b.completionDate).valueOf() : 0;\r\n                                return dateB - dateA; // Descending order (latest date first)\r\n                            });\r\n                            latestResult = sortedResults[0]; // Get the first element after sorting\r\n                        }\r\n\r\n                        if (latestResult) {\r\n                            latestResult.participation = submission.participation; // Attach participation if result exists\r\n                        }\r\n                        return latestResult; // Return the latest result (or undefined if no results)\r\n                    })\r\n                    .filter((result): result is Result => !!result);\r\n            }),\r\n        );\r\n    }\r\n\r\n    private sortResultsByCompletionDate(results: Result[]): Result[] {\r\n        return results.sort((a, b) => {\r\n            const dateA = a.completionDate ? dayjs(a.completionDate).valueOf() : 0;\r\n            const dateB = b.completionDate ? dayjs(b.completionDate).valueOf() : 0;\r\n            return dateB - dateA;\r\n        });\r\n    }\r\n\r\n    private inputValuesArePresent(): boolean {\r\n        return !!(this.inputExercise || this.inputSubmission || this.inputParticipation);\r\n    }\r\n\r\n    /**\r\n     * Uses values directly passed to this component instead of subscribing to a participation to save resources\r\n     *\r\n     * <i>e.g. used within {@link ExamResultSummaryComponent} and the respective {@link ModelingExamSummaryComponent}\r\n     * as directly after the exam no grading is present and only the student solution shall be displayed </i>\r\n     * @private\r\n     */\r\n    private setupComponentWithInputValues() {\r\n        if (this.inputExercise) {\r\n            this.modelingExercise = this.inputExercise;\r\n        }\r\n        if (this.inputSubmission) {\r\n            this.submission = this.inputSubmission;\r\n        }\r\n        if (this.inputParticipation) {\r\n            this.participation = this.inputParticipation;\r\n        }\r\n\r\n        this.updateModelAndExplanation();\r\n    }\r\n\r\n    /**\r\n     * Updates the modeling submission with the given modeling submission.\r\n     */\r\n    private updateModelingSubmission(modelingSubmission: ModelingSubmission): void {\r\n        if (!modelingSubmission) {\r\n            this.alertService.error('artemisApp.apollonDiagram.submission.noSubmission');\r\n        }\r\n\r\n        // In the header we always want to display the latest submission, even when we are viewing a specific submission\r\n        this.modelingParticipationHeader = modelingSubmission.participation as StudentParticipation;\r\n        this.modelingParticipationHeader.submissions = [<ModelingSubmission>omit(modelingSubmission, 'participation')];\r\n        this.modelingExerciseHeader = this.modelingParticipationHeader.exercise as ModelingExercise;\r\n        this.modelingExerciseHeader.studentParticipations = [this.participation];\r\n\r\n        // If isFeedbackView is true and submissionId is present, we want to find the corresponding submission and not get the latest one\r\n        if (this.isFeedbackView && this.submissionId && this.sortedSubmissionHistory) {\r\n            const matchingSubmission = this.sortedSubmissionHistory.find((submission) => submission.id === this.submissionId);\r\n\r\n            if (matchingSubmission) {\r\n                modelingSubmission = matchingSubmission;\r\n            } else {\r\n                captureException(`Submission with ID ${this.submissionId} not found in sorted history results.`);\r\n            }\r\n        }\r\n\r\n        this.submission = modelingSubmission;\r\n\r\n        // reconnect participation <--> result\r\n        if (getLatestSubmissionResult(modelingSubmission)) {\r\n            modelingSubmission.participation!.results = [getLatestSubmissionResult(modelingSubmission)!];\r\n        }\r\n        this.participation = modelingSubmission.participation as StudentParticipation;\r\n        this.isOwnerOfParticipation = this.accountService.isOwnerOfParticipation(this.participation);\r\n\r\n        // reconnect participation <--> submission\r\n        this.participation.submissions = [<ModelingSubmission>omit(modelingSubmission, 'participation')];\r\n\r\n        this.modelingExercise = this.participation.exercise as ModelingExercise;\r\n        this.course = getCourseFromExercise(this.modelingExercise);\r\n        this.modelingExercise.studentParticipations = [this.participation];\r\n        this.examMode = !!this.modelingExercise.exerciseGroup;\r\n        if (this.modelingExercise.diagramType == undefined) {\r\n            this.modelingExercise.diagramType = UMLDiagramType.ClassDiagram;\r\n        }\r\n        // checks if the student started the exercise after the due date\r\n        this.isLate =\r\n            this.modelingExercise &&\r\n            !!this.modelingExercise.dueDate &&\r\n            !!this.participation.initializationDate &&\r\n            dayjs(this.participation.initializationDate).isAfter(getExerciseDueDate(this.modelingExercise, this.participation));\r\n\r\n        this.isAfterAssessmentDueDate = !this.modelingExercise.assessmentDueDate || dayjs().isAfter(this.modelingExercise.assessmentDueDate);\r\n\r\n        this.updateModelAndExplanation();\r\n\r\n        this.subscribeToWebsockets();\r\n        if ((getLatestSubmissionResult(this.submission) && this.isAfterAssessmentDueDate) || this.isFeedbackView) {\r\n            this.result = getLatestSubmissionResult(this.submission);\r\n            if (this.isFeedbackView && this.submissionId) {\r\n                this.result = this.sortedSubmissionHistory.find((submission) => submission.id === this.submissionId)?.latestResult;\r\n            }\r\n        }\r\n        this.resultWithComplaint = getFirstResultWithComplaint(this.submission);\r\n        if (this.submission.submitted && this.result && this.result.completionDate) {\r\n            if (!this.isFeedbackView) {\r\n                this.modelingAssessmentService.getAssessment(this.submission.id!).subscribe((assessmentResult: Result) => {\r\n                    this.assessmentResult = assessmentResult;\r\n                    this.prepareAssessmentData();\r\n                });\r\n            } else if (this.result) {\r\n                this.assessmentResult = this.modelingAssessmentService.convertResult(this.result!);\r\n                this.prepareAssessmentData();\r\n            }\r\n        }\r\n        this.isLoading = false;\r\n        this.guidedTourService.enableTourForExercise(this.modelingExercise, modelingTour, true);\r\n    }\r\n\r\n    private updateModelAndExplanation(): void {\r\n        if (this.submission.model) {\r\n            this.umlModel = JSON.parse(this.submission.model);\r\n            this.hasElements = this.umlModel.elements && Object.values(this.umlModel.elements).length !== 0;\r\n        }\r\n        this.explanation = this.submission.explanationText ?? '';\r\n    }\r\n\r\n    /**\r\n     * If the submission is submitted, subscribe to new results for the participation.\r\n     * Otherwise, subscribe to the automatic submission (which happens when the submission is un-submitted and the exercise due date is over).\r\n     */\r\n    private subscribeToWebsockets(): void {\r\n        if (this.submission && this.submission.id) {\r\n            if (this.submission.submitted) {\r\n                this.subscribeToNewResultsWebsocket();\r\n            } else {\r\n                this.subscribeToAutomaticSubmissionWebsocket();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the websocket channel for automatic submissions. In the server the AutomaticSubmissionService regularly checks for unsubmitted submissions, if the\r\n     * corresponding exercise has finished. If it has, the submission is automatically submitted and sent over this websocket channel. Here we listen to the channel and update the\r\n     * view accordingly.\r\n     */\r\n    private subscribeToAutomaticSubmissionWebsocket(): void {\r\n        if (!this.submission || !this.submission.id) {\r\n            return;\r\n        }\r\n        this.automaticSubmissionWebsocketChannel = '/user/topic/modelingSubmission/' + this.submission.id;\r\n        this.websocketService.subscribe(this.automaticSubmissionWebsocketChannel);\r\n        this.websocketService.receive(this.automaticSubmissionWebsocketChannel).subscribe((submission: ModelingSubmission) => {\r\n            if (submission.submitted) {\r\n                this.submission = submission;\r\n                if (this.submission.model) {\r\n                    this.umlModel = JSON.parse(this.submission.model);\r\n                    this.hasElements = this.umlModel.elements && Object.values(this.umlModel.elements).length !== 0;\r\n                }\r\n                const latestResult = getLatestSubmissionResult(this.submission);\r\n                if (latestResult && latestResult.completionDate && (this.isAfterAssessmentDueDate || latestResult.assessmentType === AssessmentType.AUTOMATIC_ATHENA)) {\r\n                    this.modelingAssessmentService.getAssessment(this.submission.id!).subscribe((assessmentResult: Result) => {\r\n                        this.assessmentResult = assessmentResult;\r\n                        this.prepareAssessmentData();\r\n                    });\r\n                }\r\n                this.alertService.info('artemisApp.modelingEditor.autoSubmit');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the websocket channel for new results. When an assessment is submitted the new result is sent over this websocket channel. Here we listen to the channel\r\n     * and show the new assessment information to the student.\r\n     */\r\n    private subscribeToNewResultsWebsocket(): void {\r\n        if (!this.participation?.id) {\r\n            return;\r\n        }\r\n\r\n        const resultStream$ = this.participationWebsocketService.subscribeForLatestResultOfParticipation(this.participation.id, true);\r\n\r\n        // Handle initial results (no skip)\r\n        this.manualResultUpdateListener = resultStream$\r\n            .pipe(\r\n                filter((result): result is Result => !!result),\r\n                filter((result) => !result.assessmentType || result.assessmentType !== AssessmentType.AUTOMATIC_ATHENA),\r\n            )\r\n            .subscribe(this.handleManualAssessment.bind(this));\r\n\r\n        // Handle Athena results (with skip)\r\n        this.athenaResultUpdateListener = resultStream$\r\n            .pipe(\r\n                skip(1),\r\n                filter((result): result is Result => !!result),\r\n                filter((result) => result.assessmentType === AssessmentType.AUTOMATIC_ATHENA),\r\n            )\r\n            .subscribe(this.handleAthenaAssessment.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles manual assessments (non-Athena). Converts the result, prepares the assessment data, and informs the user of a new assessment.\r\n     * @param result - The result of the assessment.\r\n     */\r\n    private handleManualAssessment(result: Result): void {\r\n        if (!result.completionDate) {\r\n            return;\r\n        }\r\n        this.assessmentResult = this.modelingAssessmentService.convertResult(result);\r\n        this.prepareAssessmentData();\r\n        this.alertService.info('artemisApp.modelingEditor.newAssessment');\r\n    }\r\n\r\n    /**\r\n     * Handles Athena assessments. Converts the result, prepares the assessment data, and provides feedback based on the result's success or failure.\r\n     * @param result - The result of the Athena assessment.\r\n     */\r\n    private handleAthenaAssessment(result: Result): void {\r\n        if (result.completionDate) {\r\n            this.assessmentResult = this.modelingAssessmentService.convertResult(result);\r\n            this.prepareAssessmentData();\r\n\r\n            if (result.successful) {\r\n                this.alertService.success('artemisApp.exercise.athenaFeedbackSuccessful');\r\n            }\r\n        } else if (result.successful === false) {\r\n            this.alertService.error('artemisApp.exercise.athenaFeedbackFailed');\r\n        }\r\n\r\n        this.isGeneratingFeedback = false;\r\n    }\r\n\r\n    /**\r\n     * This function sets and starts an auto-save timer that automatically saves changes\r\n     * to the model after at most 60 seconds.\r\n     */\r\n    private setAutoSaveTimer(): void {\r\n        this.autoSaveTimer = 0;\r\n        // auto save of submission if there are changes\r\n        this.autoSaveInterval = window.setInterval(() => {\r\n            this.autoSaveTimer++;\r\n            this.isChanged = !this.canDeactivate();\r\n            if (this.autoSaveTimer >= AUTOSAVE_EXERCISE_INTERVAL && this.isChanged) {\r\n                this.saveDiagram();\r\n            }\r\n        }, AUTOSAVE_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Check every 2 seconds, if the user made changes for the submission in a team exercise: if yes, send it to the sever\r\n     */\r\n    private setupSubmissionStreamForTeam(): void {\r\n        const teamSyncInterval = window.setInterval(() => {\r\n            this.isChanged = !this.canDeactivate();\r\n            if (this.isChanged) {\r\n                // make sure this.submission includes the newest content of the apollon editor\r\n                this.updateSubmissionWithCurrentValues();\r\n                // notify the team sync component to send this.submission to the server (and all online team members)\r\n                this.submissionChange.next(this.submission);\r\n            }\r\n        }, AUTOSAVE_TEAM_EXERCISE_INTERVAL);\r\n\r\n        this.cleanup(() => clearInterval(teamSyncInterval));\r\n    }\r\n\r\n    /**\r\n     * Emits submission patches when receiving patches from the modeling editor.\r\n     * These patches need to be synced with other team members in team exercises.\r\n     * The observable through which the patches are emitted is passed to the team sync\r\n     * component, who then sends the patches to the server and other team members.\r\n     * @param patch The patch to update the submission with.\r\n     */\r\n    onModelPatch(patch: Patch) {\r\n        if (this.modelingExercise.teamMode) {\r\n            const submissionPatch = new SubmissionPatch(patch);\r\n            submissionPatch.participation = this.participation;\r\n            if (submissionPatch.participation?.exercise) {\r\n                submissionPatch.participation.exercise.studentParticipations = [];\r\n            }\r\n            this.submissionPatchObservable.next(Object.assign({}, submissionPatch));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs given cleanup logic when the component is destroyed.\r\n     * @param teardown The cleanup logic to run when the component is destroyed.\r\n     * @private\r\n     */\r\n    private cleanup(teardown: TeardownLogic) {\r\n        this.subscription ??= new Subscription();\r\n        this.subscription.add(teardown);\r\n    }\r\n\r\n    saveDiagram(): void {\r\n        if (this.isSaving) {\r\n            // don't execute the function if it is already currently executing\r\n            return;\r\n        }\r\n        this.updateSubmissionWithCurrentValues();\r\n        this.isSaving = true;\r\n        this.autoSaveTimer = 0;\r\n\r\n        if (this.submission.id) {\r\n            this.modelingSubmissionService.update(this.submission, this.modelingExercise.id!).subscribe({\r\n                next: (response) => {\r\n                    this.submission = response.body!;\r\n                    // reconnect so that the submission status is displayed correctly in the result.component\r\n                    this.submission.participation!.submissions = [this.submission];\r\n                    this.participationWebsocketService.addParticipation(this.submission.participation as StudentParticipation, this.modelingExercise);\r\n                    this.result = getLatestSubmissionResult(this.submission);\r\n                    this.onSaveSuccess();\r\n                },\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else {\r\n            this.modelingSubmissionService.create(this.submission, this.modelingExercise.id!).subscribe({\r\n                next: (submission) => {\r\n                    this.submission = submission.body!;\r\n                    this.result = getLatestSubmissionResult(this.submission);\r\n                    this.subscribeToAutomaticSubmissionWebsocket();\r\n                    this.onSaveSuccess();\r\n                },\r\n                error: () => this.onSaveError(),\r\n            });\r\n        }\r\n    }\r\n\r\n    submit(): void {\r\n        if (this.isSaving) {\r\n            // don't execute the function if it is already currently executing\r\n            return;\r\n        }\r\n        this.updateSubmissionWithCurrentValues();\r\n        if (this.isModelEmpty(this.submission.model)) {\r\n            this.alertService.warning('artemisApp.modelingEditor.empty');\r\n            return;\r\n        }\r\n        this.isSaving = true;\r\n        this.autoSaveTimer = 0;\r\n        if (this.submission.id) {\r\n            this.modelingSubmissionService.update(this.submission, this.modelingExercise.id!).subscribe({\r\n                next: (response) => {\r\n                    this.submission = response.body!;\r\n                    if (this.submission.model) {\r\n                        this.umlModel = JSON.parse(this.submission.model);\r\n                        this.hasElements = this.umlModel.elements && Object.values(this.umlModel.elements).length !== 0;\r\n                    }\r\n                    this.submissionChange.next(this.submission);\r\n                    this.participation = this.submission.participation as StudentParticipation;\r\n                    this.participation.exercise = this.modelingExercise;\r\n                    this.modelingParticipationHeader = this.submission.participation as StudentParticipation;\r\n                    // reconnect so that the submission status is displayed correctly in the result.component\r\n                    this.submission.participation!.submissions = [this.submission];\r\n                    this.participationWebsocketService.addParticipation(this.participation, this.modelingExercise);\r\n                    this.modelingExercise.studentParticipations = [this.participation];\r\n                    this.modelingExerciseHeader.studentParticipations = [this.participation];\r\n                    this.result = getLatestSubmissionResult(this.submission);\r\n                    this.retryStarted = false;\r\n\r\n                    if (this.isLate) {\r\n                        this.alertService.warning('entity.action.submitDueDateMissedAlert');\r\n                    } else {\r\n                        this.alertService.success('entity.action.submitSuccessfulAlert');\r\n                    }\r\n\r\n                    this.subscribeToWebsockets();\r\n                    if (this.automaticSubmissionWebsocketChannel) {\r\n                        this.websocketService.unsubscribe(this.automaticSubmissionWebsocketChannel);\r\n                    }\r\n                    this.onSaveSuccess();\r\n                },\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else {\r\n            this.modelingSubmissionService.create(this.submission, this.modelingExercise.id!).subscribe({\r\n                next: (response) => {\r\n                    this.submission = response.body!;\r\n                    this.submissionChange.next(this.submission);\r\n                    this.participation = this.submission.participation as StudentParticipation;\r\n                    this.participation.exercise = this.modelingExercise;\r\n                    this.modelingExercise.studentParticipations = [this.participation];\r\n                    this.result = getLatestSubmissionResult(this.submission);\r\n                    if (this.isLate) {\r\n                        this.alertService.warning('artemisApp.modelingEditor.submitDueDateMissed');\r\n                    } else {\r\n                        this.alertService.success('artemisApp.modelingEditor.submitSuccessful');\r\n                    }\r\n                    this.subscribeToAutomaticSubmissionWebsocket();\r\n                    this.onSaveSuccess();\r\n                },\r\n                error: () => this.onSaveError(),\r\n            });\r\n        }\r\n    }\r\n\r\n    private onSaveSuccess() {\r\n        this.isSaving = false;\r\n        this.isChanged = !this.canDeactivate();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.alertService.error('artemisApp.modelingEditor.error');\r\n        this.isSaving = false;\r\n    }\r\n\r\n    onReceiveSubmissionFromTeam(submission: ModelingSubmission) {\r\n        submission.participation!.exercise = this.modelingExercise;\r\n        submission.participation!.submissions = [submission];\r\n        this.updateModelingSubmission(submission);\r\n    }\r\n\r\n    /**\r\n     * This is called when the team sync component receives\r\n     * patches from the server. Updates the modeling editor with the received patch.\r\n     * @param submissionPatch\r\n     */\r\n    onReceiveSubmissionPatchFromTeam(submissionPatch: SubmissionPatch) {\r\n        this.modelingEditor.importPatch(submissionPatch.patch);\r\n    }\r\n\r\n    private isModelEmpty(model?: string): boolean {\r\n        const umlModel: UMLModel = model ? JSON.parse(model) : undefined;\r\n        return !umlModel || !umlModel.elements || Object.values(umlModel.elements).length === 0;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        clearInterval(this.autoSaveInterval);\r\n\r\n        if (this.automaticSubmissionWebsocketChannel) {\r\n            this.websocketService.unsubscribe(this.automaticSubmissionWebsocketChannel);\r\n        }\r\n        if (this.manualResultUpdateListener) {\r\n            this.manualResultUpdateListener.unsubscribe();\r\n        }\r\n        if (this.athenaResultUpdateListener) {\r\n            this.athenaResultUpdateListener.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether a assessmentResult exists and if, returns the unreferenced feedback of it\r\n     */\r\n    get unreferencedFeedback(): Feedback[] | undefined {\r\n        if (this.assessmentResult?.feedbacks) {\r\n            checkSubsequentFeedbackInAssessment(this.assessmentResult.feedbacks);\r\n            return getUnreferencedFeedback(this.assessmentResult.feedbacks);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Find \"Referenced Feedback\" item for Result, if it exists.\r\n     */\r\n    get referencedFeedback(): Feedback[] | undefined {\r\n        if (this.assessmentResult?.feedbacks) {\r\n            checkSubsequentFeedbackInAssessment(this.assessmentResult.feedbacks);\r\n            return this.assessmentResult?.feedbacks?.filter((feedbackElement) => feedbackElement.reference != undefined);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /*\r\n     * Check if the latest submission has an Athena result\r\n     */\r\n    get hasAthenaResultForLatestSubmission(): boolean {\r\n        const latestResult = getLatestSubmissionResult(this.submission);\r\n        return latestResult?.assessmentType === AssessmentType.AUTOMATIC_ATHENA;\r\n    }\r\n\r\n    /**\r\n     * Updates the model of the submission with the current Apollon model state\r\n     * and the explanation text of submission with current explanation if explanation is defined\r\n     */\r\n    updateSubmissionWithCurrentValues(): void {\r\n        if (!this.submission) {\r\n            this.submission = new ModelingSubmission();\r\n        }\r\n        this.submission.explanationText = this.explanation;\r\n        if (!this.modelingEditor || !this.modelingEditor.getCurrentModel()) {\r\n            return;\r\n        }\r\n        const umlModel = this.modelingEditor.getCurrentModel();\r\n        this.hasElements = umlModel.elements && Object.values(umlModel.elements).length !== 0;\r\n        const diagramJson = JSON.stringify(umlModel);\r\n        if (this.submission && diagramJson) {\r\n            this.submission.model = diagramJson;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare assessment data for displaying the assessment information to the student.\r\n     */\r\n    private prepareAssessmentData(): void {\r\n        this.initializeAssessmentInfo();\r\n    }\r\n\r\n    /**\r\n     * Retrieves names for displaying the assessment and calculates the total score\r\n     */\r\n    private initializeAssessmentInfo(): void {\r\n        if (this.assessmentResult?.feedbacks && this.umlModel) {\r\n            this.assessmentsNames = getNamesForAssessments(this.assessmentResult, this.umlModel);\r\n            let totalScore = 0;\r\n            for (const feedback of this.assessmentResult.feedbacks) {\r\n                totalScore += feedback.credits!;\r\n            }\r\n            this.totalScore = totalScore;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles changes of the model element selection in Apollon. This is used for displaying\r\n     * only the feedback of the selected model elements.\r\n     * @param selection the new selection\r\n     */\r\n    onSelectionChanged(selection: Selection) {\r\n        this.selectedEntities = Object.entries(selection.elements)\r\n            .filter(([, selected]) => selected)\r\n            .map(([elementId]) => elementId);\r\n        for (const selectedEntity of this.selectedEntities) {\r\n            this.selectedEntities.push(...this.getSelectedChildren(selectedEntity));\r\n        }\r\n        this.selectedRelationships = Object.entries(selection.relationships)\r\n            .filter(([, selected]) => selected)\r\n            .map(([elementId]) => elementId);\r\n    }\r\n\r\n    /**\r\n     * Returns the elementIds of all the children of the element with the given elementId\r\n     * or an empty list, if no children exist for this element.\r\n     */\r\n    private getSelectedChildren(elementId: string): string[] {\r\n        if (!this.umlModel || !this.umlModel.elements) {\r\n            return [];\r\n        }\r\n        return Object.values(this.umlModel.elements)\r\n            .filter((element) => element.owner === elementId)\r\n            .map((element) => element.id);\r\n    }\r\n\r\n    /**\r\n     * Checks whether a model element in the modeling editor is selected.\r\n     */\r\n    shouldBeDisplayed(feedback: Feedback): boolean {\r\n        if ((!this.selectedEntities || this.selectedEntities.length === 0) && (!this.selectedRelationships || this.selectedRelationships.length === 0)) {\r\n            return true;\r\n        }\r\n        const referencedModelType = feedback.referenceType! as UMLElementType;\r\n        if (referencedModelType in UMLRelationshipType) {\r\n            return this.selectedRelationships.indexOf(feedback.referenceId!) > -1;\r\n        } else {\r\n            return this.selectedEntities.indexOf(feedback.referenceId!) > -1;\r\n        }\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        if (!this.modelingEditor || !this.modelingEditor.isApollonEditorMounted) {\r\n            return true;\r\n        }\r\n        const model: UMLModel = this.modelingEditor.getCurrentModel();\r\n        const explanationIsUpToDate = this.explanation === (this.submission.explanationText ?? '');\r\n        return !this.modelHasUnsavedChanges(model) && explanationIsUpToDate;\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.translateService.instant('pendingChanges');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks whether there are pending changes in the current model. Returns true if there are unsaved changes, false otherwise.\r\n     */\r\n    private modelHasUnsavedChanges(model: UMLModel): boolean {\r\n        if (!this.submission || !this.submission.model) {\r\n            return Object.values(model.elements).length > 0 && JSON.stringify(model) !== '';\r\n        } else if (this.submission && this.submission.model) {\r\n            const currentModel = JSON.parse(this.submission.model);\r\n            const versionMatch = currentModel.version === model.version;\r\n            const modelMatch = stringifyIgnoringFields(currentModel, 'size') === stringifyIgnoringFields(model, 'size');\r\n            return versionMatch && !modelMatch;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * counts the number of model elements\r\n     * is used in the submit() function\r\n     */\r\n    calculateNumberOfModelElements(): number {\r\n        if (this.submission && this.submission.model) {\r\n            const umlModel = JSON.parse(this.submission.model);\r\n            return umlModel.elements.length + umlModel.relationships.length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * The exercise is still active if it's due date hasn't passed yet.\r\n     */\r\n    get isActive(): boolean {\r\n        return this.modelingExercise && !this.examMode && !hasExerciseDueDatePassed(this.modelingExercise, this.participation);\r\n    }\r\n\r\n    get submitButtonTooltip(): string {\r\n        if (!this.isLate) {\r\n            if (this.isActive && !this.modelingExercise.dueDate) {\r\n                return 'entity.action.submitNoDueDateTooltip';\r\n            } else if (this.isActive) {\r\n                return 'entity.action.submitTooltip';\r\n            } else {\r\n                return 'entity.action.dueDateMissedTooltip';\r\n            }\r\n        }\r\n\r\n        return 'entity.action.submitDueDateMissedTooltip';\r\n    }\r\n\r\n    protected readonly hasExerciseDueDatePassed = hasExerciseDueDatePassed;\r\n}\r\n", "<div [id]=\"'exercise-' + modelingExercise?.id\">\r\n    @if (displayHeader) {\r\n        <jhi-header-participation-page class=\"d-block mb-4\" [exercise]=\"modelingExerciseHeader\" [participation]=\"modelingParticipationHeader\">\r\n            <span pagetitle>\r\n                {{ 'artemisApp.modelingSubmission.modelingEditor' | artemisTranslate }}:\r\n                <span class=\"font-weight-normal\">{{ examMode ? modelingExercise?.exerciseGroup?.title : modelingExercise?.title }}</span>\r\n            </span>\r\n            <ng-container submitbutton>\r\n                @if (isOwnerOfParticipation) {\r\n                    @if (isFeedbackView) {\r\n                        @if ((sortedSubmissionHistory?.length || 0) > 1) {\r\n                            <jhi-button\r\n                                id=\"toggleTimeline\"\r\n                                [icon]=\"faTimeline\"\r\n                                [title]=\"showResultHistory ? 'entity.action.hideTimeline' : 'entity.action.viewTimeline'\"\r\n                                (click)=\"showResultHistory = !showResultHistory\"\r\n                            />\r\n                        }\r\n                        @if (isActive || !modelingExercise.dueDate) {\r\n                            <jhi-button\r\n                                id=\"Continue\"\r\n                                [title]=\"'entity.action.continueSubmission'\"\r\n                                [routerLink]=\"['/courses', course?.id, 'exercises', 'modeling-exercises', modelingExercise?.id!, 'participate', result?.participation?.id]\"\r\n                            />\r\n                        }\r\n                    } @else {\r\n                        @if (modelingExercise.allowFeedbackRequests && (!this.modelingExercise.dueDate || !hasExerciseDueDatePassed(this.modelingExercise, this.participation))) {\r\n                            <jhi-request-feedback-button\r\n                                [exercise]=\"modelingExercise\"\r\n                                [pendingChanges]=\"isChanged\"\r\n                                [hasAthenaResultForLatestSubmission]=\"hasAthenaResultForLatestSubmission\"\r\n                                [isGeneratingFeedback]=\"isGeneratingFeedback\"\r\n                                (generatingFeedback)=\"this.isGeneratingFeedback = true\"\r\n                                [isSubmitted]=\"submission.submitted || false\"\r\n                            />\r\n                        }\r\n                    }\r\n                }\r\n                @if (!this.isFeedbackView) {\r\n                    <jhi-button\r\n                        class=\"guided-tour submission-button\"\r\n                        id=\"submit-modeling-submission\"\r\n                        [disabled]=\"(!isActive && !isLate) || !submission || !!result || (isLate && !!submission.submitted)\"\r\n                        [title]=\"!isLate ? 'entity.action.submit' : 'entity.action.submitDueDateMissed'\"\r\n                        (onClick)=\"submit()\"\r\n                        [isLoading]=\"isSaving\"\r\n                        [btnType]=\"!isLate ? ButtonType.PRIMARY : ButtonType.WARNING\"\r\n                        [tooltip]=\"submitButtonTooltip\"\r\n                    />\r\n                }\r\n            </ng-container>\r\n        </jhi-header-participation-page>\r\n    }\r\n\r\n    @if (isFeedbackView && showResultHistory) {\r\n        <div class=\"mb-4\">\r\n            <div id=\"result-history\" class=\"row mb-2\">\r\n                <jhi-result-history [results]=\"sortedResultHistory\" [exercise]=\"modelingExercise\" [selectedResultId]=\"submission.latestResult?.id!\" />\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    @if (modelingExercise) {\r\n        <jhi-resizeable-container [isExerciseParticipation]=\"true\" [isBeingPrinted]=\"isPrinting\" [expandProblemStatement]=\"expandProblemStatement\" [collapsed]=\"isFeedbackView\">\r\n            <!--region Left Panel-->\r\n            <ng-container left-body>\r\n                @if (!submission || submission.submitted || !isExamSummary) {\r\n                    <div class=\"w-100\">\r\n                        <div class=\"submission-container d-flex flex-column w-100\">\r\n                            <div class=\"d-flex flex-column flex-md-row\">\r\n                                @if (modelingExercise.teamMode && (isActive || isLate)) {\r\n                                    <div class=\"flex-shrink-0 align-self-end align-self-md-stretch mb-2 ms-md-2 ms-lg-3\">\r\n                                        <jhi-team-participate-info-box\r\n                                            [exercise]=\"modelingExercise\"\r\n                                            [participation]=\"participation\"\r\n                                            [typing$]=\"submissionObservable\"\r\n                                            [dockedToRightSide]=\"true\"\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            <jhi-fullscreen>\r\n                                <div class=\"column\" style=\"display: flex; flex-direction: column; flex-grow: 1\">\r\n                                    <div class=\"row\" style=\"flex-grow: 1; display: flex\">\r\n                                        @if (submission && (isActive || isLate) && !result && (!isLate || !submission.submitted) && !isFeedbackView) {\r\n                                            <div class=\"col-12 editor-large\">\r\n                                                <jhi-modeling-editor\r\n                                                    [readOnly]=\"!isOwnerOfParticipation\"\r\n                                                    [umlModel]=\"umlModel\"\r\n                                                    [diagramType]=\"modelingExercise.diagramType!\"\r\n                                                    [withExplanation]=\"true\"\r\n                                                    [(explanation)]=\"explanation\"\r\n                                                    [resizeOptions]=\"resizeOptions\"\r\n                                                    [savedStatus]=\"{ isChanged, isSaving }\"\r\n                                                    (onModelPatch)=\"onModelPatch($event)\"\r\n                                                />\r\n                                                <fa-icon [icon]=\"faGripLines\" class=\"rg-bottom text-lightgrey\"><span></span></fa-icon>\r\n                                                @if (modelingExercise.teamMode) {\r\n                                                    <jhi-team-submission-sync\r\n                                                        [exerciseType]=\"modelingExercise.type!\"\r\n                                                        [submissionObservable]=\"submissionObservable\"\r\n                                                        [submissionPatchObservable]=\"submissionPatchObservable\"\r\n                                                        [participation]=\"participation\"\r\n                                                        (receiveSubmission)=\"onReceiveSubmissionFromTeam($event)\"\r\n                                                        (receiveSubmissionPatch)=\"onReceiveSubmissionPatchFromTeam($event)\"\r\n                                                    />\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                        @if (((!isActive || result) && (!isLate || submission.submitted)) || isFeedbackView) {\r\n                                            <div class=\"col-8 editor-assessment\">\r\n                                                <jhi-modeling-assessment\r\n                                                    [umlModel]=\"umlModel\"\r\n                                                    [resultFeedbacks]=\"assessmentResult?.feedbacks || []\"\r\n                                                    [diagramType]=\"modelingExercise.diagramType!\"\r\n                                                    [maxScore]=\"modelingExercise.maxPoints || 0\"\r\n                                                    [maxBonusPoints]=\"modelingExercise.bonusPoints || 0\"\r\n                                                    [readOnly]=\"true\"\r\n                                                    [enablePopups]=\"false\"\r\n                                                    [displayPoints]=\"false\"\r\n                                                    [course]=\"course\"\r\n                                                    (selectionChanged)=\"onSelectionChanged($event)\"\r\n                                                    [explanation]=\"explanation\"\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n                                        @if ((submission?.submitted && (!isActive || result)) || isFeedbackView) {\r\n                                            <div class=\"col-4 pt-5 editor-assessment overflow-auto\">\r\n                                                <h4 jhiTranslate=\"artemisApp.modelingSubmission.assessment.title\"></h4>\r\n                                                @if (!assessmentResult || !assessmentResult!.feedbacks || assessmentResult!.feedbacks!.length === 0) {\r\n                                                    <p jhiTranslate=\"artemisApp.modelingSubmission.assessment.noAssessment\"></p>\r\n                                                }\r\n                                                @if (assessmentResult && assessmentResult!.feedbacks && assessmentResult!.feedbacks!.length > 0) {\r\n                                                    <p jhiTranslate=\"artemisApp.modelingSubmission.assessment.instructions\"></p>\r\n                                                    <table class=\"table\" id=\"component-feedback-table\">\r\n                                                        <thead class=\"thead-light\">\r\n                                                            <tr>\r\n                                                                <th jhiTranslate=\"artemisApp.modelingSubmission.assessment.element\"></th>\r\n                                                                <th class=\"text-center\" jhiTranslate=\"artemisApp.modelingSubmission.assessment.score\"></th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        @if (assessmentsNames) {\r\n                                                            <tbody>\r\n                                                                @for (feedback of referencedFeedback; track feedback) {\r\n                                                                    <tr [hidden]=\"!shouldBeDisplayed(feedback)\">\r\n                                                                        <td>\r\n                                                                            @if (feedback.reference) {\r\n                                                                                <span>{{ assessmentsNames[feedback.referenceId!]?.type }} </span>\r\n                                                                            }\r\n                                                                            @if (feedback.reference) {\r\n                                                                                <code class=\"text-primary\">{{ assessmentsNames[feedback.referenceId!]?.name }}</code>\r\n                                                                            }\r\n                                                                            @if (feedback.reference) {\r\n                                                                                <br />\r\n                                                                            }\r\n                                                                            @if (feedback.text || feedback.detailText || feedback.gradingInstruction) {\r\n                                                                                <span\r\n                                                                                    [ngClass]=\"{\r\n                                                                                        'text-secondary': feedback.isSubsequent,\r\n                                                                                        'text-success': feedback.credits! > 0 && feedback.isSubsequent === undefined,\r\n                                                                                        'text-danger': feedback.credits! < 0 && feedback.isSubsequent === undefined,\r\n                                                                                    }\"\r\n                                                                                    ><strong>Feedback:</strong> <span [innerHTML]=\"buildFeedbackTextForReview(feedback)\"></span\r\n                                                                                ></span>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                        <td class=\"text-center\">\r\n                                                                            {{ feedback.credits | number: '1.0-1' }}\r\n                                                                            @if (feedback.isSubsequent) {\r\n                                                                                <fa-icon\r\n                                                                                    class=\"text-secondary\"\r\n                                                                                    [icon]=\"faExclamationTriangle\"\r\n                                                                                    [ngbTooltip]=\"'artemisApp.assessment.subsequentFeedback' | artemisTranslate\"\r\n                                                                                />\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                }\r\n                                                            </tbody>\r\n                                                        }\r\n                                                    </table>\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </jhi-fullscreen>\r\n                        </div>\r\n                        @if ((submission?.submitted && (!isActive || result)) || isFeedbackView) {\r\n                            <div class=\"row\">\r\n                                @if (unreferencedFeedback && unreferencedFeedback!.length > 0) {\r\n                                    <jhi-additional-feedback\r\n                                        class=\"col-xl-8 mt-3 alert unreferencedFeedback\"\r\n                                        [feedback]=\"unreferencedFeedback || []\"\r\n                                        [additional]=\"true\"\r\n                                        [course]=\"course\"\r\n                                    />\r\n                                }\r\n                            </div>\r\n                        }\r\n                        @if (result) {\r\n                            <div class=\"row\">\r\n                                <jhi-rating class=\"mt-2 alert alert-info\" [result]=\"addParticipationToResult(result, participation)\" />\r\n                            </div>\r\n                        }\r\n                        @if (result && !examMode && !isFeedbackView) {\r\n                            <jhi-complaint-student-view\r\n                                [exercise]=\"modelingExercise\"\r\n                                [participation]=\"participation\"\r\n                                [result]=\"resultWithComplaint ? resultWithComplaint : result\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n            </ng-container>\r\n            <!--endregion-->\r\n            <!--region Right Panel-->\r\n            <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n            <span right-header id=\"problem-statement\" jhiTranslate=\"artemisApp.modelingSubmission.problemStatement\"></span>\r\n            <p right-body class=\"mb-3 markdown-preview\">\r\n                @if (modelingExercise!.problemStatement) {\r\n                    <span [innerHTML]=\"modelingExercise!.problemStatement! | htmlForMarkdown\"></span>\r\n                }\r\n            </p>\r\n            <!--endregion-->\r\n        </jhi-resizeable-container>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["modelingTour", "settingsKey", "resetParticipation", "ResetParticipation", "EXERCISE_PARTICIPATION", "steps", "TextTourStep", "headlineTranslateKey", "contentTranslateKey", "ImageTourStep", "hintTranslateKey", "imageUrl", "ModelingTaskTourStep", "highlightSelector", "highlightPadding", "orientation", "Orientation", "TOP", "userInteractionEvent", "UserInteractionEvent", "MODELING", "modelingTask", "GuidedTourModelingTask", "personUML", "name", "studentUML", "associationUML", "UserInterActionTourStep", "LEFT", "CLICK", "triggerNextStep", "SubmissionPatch", "participation", "patch", "constructor", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "showResultHistory", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faTimeline", "\u0275\u0275element", "\u0275\u0275pureFunction3", "_c0", "course", "id", "modelingExercise", "result", "participation", "\u0275\u0275template", "ModelingSubmissionComponent_Conditional_2_Conditional_12_Conditional_1_Conditional_1_Template", "ModelingSubmissionComponent_Conditional_2_Conditional_12_Conditional_1_Conditional_2_Template", "\u0275\u0275conditional", "sortedSubmissionHistory", "length", "isActive", "dueDate", "_r3", "isGeneratingFeedback", "isChanged", "hasAthenaResultForLatestSubmission", "submission", "submitted", "ModelingSubmissionComponent_Conditional_2_Conditional_12_Conditional_2_Conditional_1_Template", "allowFeedbackRequests", "hasExerciseDueDatePassed", "ModelingSubmissionComponent_Conditional_2_Conditional_12_Conditional_1_Template", "ModelingSubmissionComponent_Conditional_2_Conditional_12_Conditional_2_Template", "isFeedbackView", "_r4", "submit", "isLate", "isSaving", "ButtonType", "WARNING", "PRIMARY", "submitButtonTooltip", "\u0275\u0275elementContainerStart", "ModelingSubmissionComponent_Conditional_2_Conditional_12_Template", "ModelingSubmissionComponent_Conditional_2_Conditional_13_Template", "modelingExerciseHeader", "modelingParticipationHeader", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "examMode", "exerciseGroup", "title", "isOwnerOfParticipation", "sortedResultHistory", "latestResult", "submissionObservable", "$event", "_r6", "onReceiveSubmissionFromTeam", "onReceiveSubmissionPatchFromTeam", "type", "submissionPatchObservable", "\u0275\u0275twoWayListener", "_r5", "i0", "\u0275\u0275twoWayBindingSet", "explanation", "onModelPatch", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_15_Conditional_8_Template", "umlModel", "diagramType", "\u0275\u0275twoWayProperty", "resizeOptions", "\u0275\u0275pureFunction2", "_c1", "faGripLines", "teamMode", "_r7", "onSelectionChanged", "assessmentResult", "feedbacks", "\u0275\u0275pureFunction0", "_c2", "maxPoints", "bonusPoints", "assessmentsNames", "feedback_r8", "referenceId", "name", "_c3", "isSubsequent", "credits", "undefined", "buildFeedbackTextForReview", "\u0275\u0275sanitizeHtml", "faExclamationTriangle", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_For_4_Conditional_5_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_For_4_Conditional_6_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_For_4_Conditional_7_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_For_4_Conditional_8_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_For_4_Conditional_13_Template", "shouldBeDisplayed", "reference", "text", "detailText", "gradingInstruction", "\u0275\u0275pipeBind2", "\u0275\u0275repeaterCreate", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "referencedFeedback", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Conditional_15_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_5_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Conditional_6_Template", "unreferencedFeedback", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_22_Conditional_3_Template", "addParticipationToResult", "resultWithComplaint", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_7_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_15_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_16_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_17_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_22_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_23_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Conditional_24_Template", "problemStatement", "ModelingSubmissionComponent_Conditional_4_Conditional_6_Template", "ModelingSubmissionComponent_Conditional_4_Conditional_16_Template", "isPrinting", "expandProblemStatement", "isExamSummary", "farListAlt", "ModelingSubmissionComponent", "websocketService", "inject", "WebsocketService", "modelingSubmissionService", "ModelingSubmissionService", "modelingAssessmentService", "ModelingAssessmentService", "alertService", "AlertService", "route", "ActivatedRoute", "participationWebsocketService", "ParticipationWebsocketService", "guidedTourService", "GuidedTourService", "accountService", "AccountService", "translateService", "TranslateService", "modelingEditor", "participationId", "inputExercise", "inputSubmission", "inputParticipation", "displayHeader", "subscription", "manualResultUpdateListener", "athenaResultUpdateListener", "selectedEntities", "selectedRelationships", "submissionId", "totalScore", "hasElements", "retryStarted", "autoSaveInterval", "autoSaveTimer", "automaticSubmissionWebsocketChannel", "isAfterAssessmentDueDate", "isLoading", "ComplaintType", "submissionChange", "Subject", "asObservable", "verticalResize", "faListAlt", "ngOnInit", "inputValuesArePresent", "setupComponentWithInputValues", "params", "pipe", "switchMap", "Number", "fetchSubmissionHistory", "fetchLatestSubmission", "subscribe", "next", "modelingSubmission", "updateModelingSubmission", "setupMode", "error", "onError", "window", "scroll", "setupSubmissionStreamForTeam", "setAutoSaveTimer", "getLatestSubmissionForModelingEditor", "catchError", "of", "getSubmissionsWithResultsForParticipation", "tap", "submissions", "sort", "a", "b", "latestResultA", "sortResultsByCompletionDate", "results", "latestResultB", "dateA", "completionDate", "dayjs", "valueOf", "dateB", "map", "filter", "updateModelAndExplanation", "omit", "exercise", "studentParticipations", "matchingSubmission", "find", "captureException", "getLatestSubmissionResult", "getCourseFromExercise", "UMLDiagramType", "ClassDiagram", "initializationDate", "isAfter", "getExerciseDueDate", "assessmentDueDate", "subscribeToWebsockets", "getFirstResultWithComplaint", "convertResult", "prepareAssessmentData", "getAssessment", "enableTourForExercise", "modelingTour", "model", "JSON", "parse", "elements", "Object", "values", "explanationText", "subscribeToNewResultsWebsocket", "subscribeToAutomaticSubmissionWebsocket", "receive", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "info", "resultStream$", "subscribeForLatestResultOfParticipation", "handleManualAssessment", "bind", "skip", "handleAthenaAssessment", "successful", "success", "setInterval", "canDeactivate", "AUTOSAVE_EXERCISE_INTERVAL", "saveDiagram", "AUTOSAVE_CHECK_INTERVAL", "teamSyncInterval", "updateSubmissionWithCurrentValues", "AUTOSAVE_TEAM_EXERCISE_INTERVAL", "cleanup", "clearInterval", "patch", "submissionPatch", "SubmissionPatch", "assign", "teardown", "Subscription", "add", "update", "response", "body", "addParticipation", "onSaveSuccess", "onSaveError", "create", "isModelEmpty", "warning", "unsubscribe", "importPatch", "ngOnDestroy", "checkSubsequentFeedbackInAssessment", "getUnreferencedFeedback", "feedbackElement", "ModelingSubmission", "getCurrentModel", "diagramJson", "stringify", "initializeAssessmentInfo", "getNamesForAssessments", "feedback", "selection", "entries", "selected", "elementId", "selectedEntity", "push", "getSelectedChildren", "relationships", "element", "owner", "referenceType", "UMLRelationshipType", "indexOf", "isApollonEditorMounted", "explanationIsUpToDate", "modelHasUnsavedChanges", "unloadNotification", "event", "preventDefault", "instant", "currentModel", "versionMatch", "version", "modelMatch", "stringifyIgnoringFields", "calculateNumberOfModelElements", "selectors", "viewQuery", "rf", "ctx", "ModelingEditorComponent", "\u0275\u0275resolveWindow", "ModelingSubmissionComponent_Conditional_2_Template", "ModelingSubmissionComponent_Conditional_3_Template", "ModelingSubmissionComponent_Conditional_4_Template", "HeaderParticipationPageComponent", "ButtonComponent", "RouterLink", "RequestFeedbackButtonComponent", "ResultHistoryComponent", "ResizeableContainerComponent", "TeamParticipateInfoBoxComponent", "FullscreenComponent", "FaIconComponent", "TeamSubmissionSyncComponent", "ModelingAssessmentComponent", "TranslateDirective", "NgClass", "NgbTooltip", "AdditionalFeedbackComponent", "RatingComponent", "ComplaintsStudentViewComponent", "DecimalPipe", "ArtemisTranslatePipe", "HtmlForMarkdownPipe", "styles"]
}
