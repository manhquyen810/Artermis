{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/manage/services/programming-exercise.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { omit as _omit } from 'lodash-es';\r\n\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { ProgrammingExercise, ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { TemplateProgrammingExerciseParticipation } from 'app/entities/participation/template-programming-exercise-participation.model';\r\nimport { SolutionProgrammingExerciseParticipation } from 'app/entities/participation/solution-programming-exercise-participation.model';\r\nimport { TextPlagiarismResult } from 'app/exercises/shared/plagiarism/types/text/TextPlagiarismResult';\r\nimport { PlagiarismOptions } from 'app/exercises/shared/plagiarism/types/PlagiarismOptions';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { ProgrammingExerciseGitDiffReport } from 'app/entities/programming-exercise-git-diff-report.model';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { BuildLogStatisticsDTO } from 'app/entities/programming/build-log-statistics-dto';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { PlagiarismResultDTO } from 'app/exercises/shared/plagiarism/types/PlagiarismResultDTO';\r\nimport { ImportOptions } from 'app/types/programming-exercises';\r\nimport { CheckoutDirectoriesDto } from 'app/entities/programming/checkout-directories-dto';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\nexport type EntityResponseType = HttpResponse<ProgrammingExercise>;\r\nexport type EntityArrayResponseType = HttpResponse<ProgrammingExercise[]>;\r\n\r\nexport type ProgrammingExerciseTestCaseStateDTO = {\r\n    released: boolean;\r\n    hasStudentResult: boolean;\r\n    testCasesChanged: boolean;\r\n    buildAndTestStudentSubmissionsAfterDueDate?: dayjs.Dayjs;\r\n};\r\n\r\nexport type ProgrammingExerciseResetOptions = {\r\n    deleteBuildPlans: boolean;\r\n    deleteRepositories: boolean;\r\n    deleteParticipationsSubmissionsAndResults: boolean;\r\n    recreateBuildPlans: boolean;\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExerciseService {\r\n    private http = inject(HttpClient);\r\n    private exerciseService = inject(ExerciseService);\r\n    private sortService = inject(SortService);\r\n\r\n    public resourceUrl = 'api/programming/programming-exercises';\r\n\r\n    /**\r\n     * Sets a new programming exercise up\r\n     * @param programmingExercise which should be setup\r\n     */\r\n    automaticSetup(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {\r\n        let copy = this.convertDataFromClient(programmingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .post<ProgrammingExercise>(this.resourceUrl + '/setup', copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Generates the structure oracle\r\n     * @param exerciseId of the programming exercise for which the structure oracle should be created\r\n     */\r\n    generateStructureOracle(exerciseId: number): Observable<string> {\r\n        return this.http.put<string>(`${this.resourceUrl}/${exerciseId}/generate-tests`, { responseType: 'text' });\r\n    }\r\n\r\n    /**\r\n     * Resets a programming exercise with the given exerciseId by performing a set of operations\r\n     * as specified in the ProgrammingExerciseResetOptions. The available operations include:\r\n     * 1. Recreating the BASE and SOLUTION build plans for the exercise.\r\n     * 2. Deleting all student participations associated with the exercise.\r\n     * 3. Deleting student build plans (except BASE/SOLUTION) and optionally git repositories of all exercise student participations.\r\n     *\r\n     * @param { number } exerciseId - Id of the programming exercise that should be reset.\r\n     * @param { ProgrammingExerciseResetOptions } options - Configuration options specifying which operations to perform during the exercise reset.\r\n     * @returns { Observable<string> } - An Observable that returns a string response.\r\n     */\r\n    reset(exerciseId: number, options: ProgrammingExerciseResetOptions): Observable<string> {\r\n        return this.http.put(`${this.resourceUrl}/${exerciseId}/reset`, options, { responseType: 'text' });\r\n    }\r\n\r\n    /**\r\n     * Check plagiarism with JPlag\r\n     *\r\n     * @param exerciseId\r\n     * @param options\r\n     */\r\n    checkPlagiarism(exerciseId: number, options?: PlagiarismOptions): Observable<PlagiarismResultDTO<TextPlagiarismResult>> {\r\n        return this.http\r\n            .get<PlagiarismResultDTO<TextPlagiarismResult>>(`${this.resourceUrl}/${exerciseId}/check-plagiarism`, {\r\n                observe: 'response',\r\n                params: {\r\n                    ...options?.toParams(),\r\n                },\r\n            })\r\n            .pipe(map((response: HttpResponse<PlagiarismResultDTO<TextPlagiarismResult>>) => response.body!));\r\n    }\r\n\r\n    /**\r\n     * Check for plagiarism\r\n     * @param exerciseId of the programming exercise\r\n     * @param options\r\n     */\r\n    checkPlagiarismJPlagReport(exerciseId: number, options?: PlagiarismOptions): Observable<HttpResponse<Blob>> {\r\n        return this.http.get(`${this.resourceUrl}/${exerciseId}/check-plagiarism-jplag-report`, {\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n            params: {\r\n                ...options?.toParams(),\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the latest plagiarism result for the exercise with the given ID.\r\n     *\r\n     * @param exerciseId\r\n     */\r\n    getLatestPlagiarismResult(exerciseId: number): Observable<PlagiarismResultDTO<TextPlagiarismResult>> {\r\n        return this.http\r\n            .get<PlagiarismResultDTO<TextPlagiarismResult>>(`${this.resourceUrl}/${exerciseId}/plagiarism-result`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((response: HttpResponse<PlagiarismResultDTO<TextPlagiarismResult>>) => response.body!));\r\n    }\r\n\r\n    /**\r\n     * Combines all commits of the template repository to one\r\n     * @param exerciseId of the particular programming exercise\r\n     */\r\n    combineTemplateRepositoryCommits(exerciseId: number) {\r\n        return this.http.put(`${this.resourceUrl}/${exerciseId}/combine-template-commits`, { responseType: 'text' });\r\n    }\r\n\r\n    /**\r\n     * Imports a programming exercise by cloning the entity itself plus all basic build plans and repositories\r\n     * (template, solution, test).\r\n     *\r\n     * @param adaptedSourceProgrammingExercise The exercise that should be imported, including adapted values for the\r\n     *                                         new exercise. E.g. with another title than the original exercise. Old\r\n     *                                         values that should get discarded (like the old ID) will be handled by the\r\n     *                                         server.\r\n     * @param importOptions see {@link ImportOptions}\r\n     */\r\n    importExercise(adaptedSourceProgrammingExercise: ProgrammingExercise, importOptions: ImportOptions): Observable<EntityResponseType> {\r\n        const options = createRequestOption(importOptions);\r\n        const exercise = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(adaptedSourceProgrammingExercise);\r\n\r\n        exercise.categories = ExerciseService.stringifyExerciseCategories(exercise);\r\n        return this.http\r\n            .post<ProgrammingExercise>(`${this.resourceUrl}/import/${adaptedSourceProgrammingExercise.id}`, exercise, {\r\n                params: options,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Updates an existing programming exercise\r\n     * @param programmingExercise which should be updated\r\n     * @param req optional request options\r\n     */\r\n    update(programmingExercise: ProgrammingExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        let copy = this.convertDataFromClient(programmingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .put<ProgrammingExercise>(this.resourceUrl, copy, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Updates the timeline of a programming exercise\r\n     * @param programmingExercise to update\r\n     * @param req optional request options\r\n     */\r\n    updateTimeline(programmingExercise: ProgrammingExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        const copy = this.convertDataFromClient(programmingExercise);\r\n        return this.http\r\n            .put<ProgrammingExercise>(`${this.resourceUrl}/timeline`, copy, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Updates the problem statement\r\n     * @param programmingExerciseId of the programming exercise for which to change the problem statement\r\n     * @param problemStatement the new problem statement\r\n     * @param req optional request options\r\n     */\r\n    updateProblemStatement(programmingExerciseId: number, problemStatement: string, req?: any) {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .patch<ProgrammingExercise>(`${this.resourceUrl}/${programmingExerciseId}/problem-statement`, problemStatement, {\r\n                params: options,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Finds the programming exercise for the given exerciseId\r\n     * @param programmingExerciseId of the programming exercise to retrieve\r\n     * @param withPlagiarismDetectionConfig true if plagiarism detection context should be fetched with the exercise\r\n     */\r\n    find(programmingExerciseId: number, withPlagiarismDetectionConfig: boolean = false): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ProgrammingExercise>(`${this.resourceUrl}/${programmingExerciseId}`, {\r\n                observe: 'response',\r\n                params: { withPlagiarismDetectionConfig: withPlagiarismDetectionConfig },\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Finds the programming exercise for the given exerciseId with the corresponding participation's with results\r\n     * @param programmingExerciseId of the programming exercise to retrieve\r\n     */\r\n    findWithTemplateAndSolutionParticipationAndResults(programmingExerciseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ProgrammingExercise>(`${this.resourceUrl}/${programmingExerciseId}/with-participations`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Finds the programming exercise for the given exerciseId with the template and solution participation\r\n     * @param programmingExerciseId of the programming exercise to retrieve\r\n     * @param withSubmissionResults get results attached to submissions\r\n     * @param withGradingCriteria also fetch the grading instructions for this exercise\r\n     */\r\n    findWithTemplateAndSolutionParticipation(programmingExerciseId: number, withSubmissionResults = false, withGradingCriteria = false): Observable<EntityResponseType> {\r\n        let params = new HttpParams();\r\n        params = params.set('withSubmissionResults', withSubmissionResults.toString()).set('withGradingCriteria', withGradingCriteria.toString());\r\n        return this.http\r\n            .get<ProgrammingExercise>(`${this.resourceUrl}/${programmingExerciseId}/with-template-and-solution-participation`, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                map((res: EntityResponseType) => {\r\n                    if (res.body && withSubmissionResults) {\r\n                        // We need to reconnect the submissions with the results. They got removed because of the circular dependency\r\n                        const templateSubmissions = res.body.templateParticipation?.submissions;\r\n                        this.reconnectSubmissionAndResult(templateSubmissions);\r\n                        const solutionSubmissions = res.body.solutionParticipation?.submissions;\r\n                        this.reconnectSubmissionAndResult(solutionSubmissions);\r\n\r\n                        this.processProgrammingExerciseEntityResponse(res);\r\n                    }\r\n                    return res;\r\n                }),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Finds the programming exercise for the given exerciseId with the template and solution participation and their latest result each.\r\n     * @param programmingExerciseId of the programming exercise to retrieve\r\n     */\r\n    findWithTemplateAndSolutionParticipationAndLatestResults(programmingExerciseId: number): Observable<EntityResponseType> {\r\n        return this.findWithTemplateAndSolutionParticipation(programmingExerciseId, true).pipe(\r\n            map((response) => {\r\n                if (response.body) {\r\n                    this.setLatestResultForTemplateAndSolution(response.body);\r\n                }\r\n                return response;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Finds the programming exercise for the given exerciseId with its auxiliary repositories\r\n     * @param programmingExerciseId of the programming exercise to retrieve\r\n     */\r\n    findWithAuxiliaryRepository(programmingExerciseId: number): Observable<EntityResponseType> {\r\n        return this.http.get<ProgrammingExercise>(`${this.resourceUrl}/${programmingExerciseId}/with-auxiliary-repository`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    private setLatestResultForTemplateAndSolution(programmingExercise: ProgrammingExercise) {\r\n        if (programmingExercise.templateParticipation) {\r\n            const latestTemplateResult = this.getLatestResult(programmingExercise.templateParticipation);\r\n            if (latestTemplateResult) {\r\n                programmingExercise.templateParticipation.results = [latestTemplateResult];\r\n            }\r\n            // This is needed to access the exercise in the result details\r\n            programmingExercise.templateParticipation.programmingExercise = programmingExercise;\r\n        }\r\n\r\n        if (programmingExercise.solutionParticipation) {\r\n            const latestSolutionResult = this.getLatestResult(programmingExercise.solutionParticipation);\r\n            if (latestSolutionResult) {\r\n                programmingExercise.solutionParticipation.results = [latestSolutionResult];\r\n            }\r\n            // This is needed to access the exercise in the result details\r\n            programmingExercise.solutionParticipation.programmingExercise = programmingExercise;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds the result that has the latest submission date.\r\n     *\r\n     * @param participation Some participation.\r\n     */\r\n    getLatestResult(participation: Participation): Result | undefined {\r\n        const submissions = participation.submissions;\r\n        if (!submissions || submissions.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // important: sort to get the latest submission (the order of the server can be random)\r\n        this.sortService.sortByProperty(submissions, 'submissionDate', true);\r\n        const results = submissions.sort().last()?.results;\r\n        if (results && results.length > 0) {\r\n            return results.last();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reconnecting the missing submission of a submission's result\r\n     *\r\n     * @param submissions where the results have no reference to its submission\r\n     */\r\n    private reconnectSubmissionAndResult(submissions: Submission[] | undefined) {\r\n        if (submissions) {\r\n            submissions.forEach((submission) => {\r\n                if (submission.results) {\r\n                    submission.results.forEach((result) => {\r\n                        result.submission = submission;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an entity with true in the body if there is a programming exercise with the given id, it is released (release date < now) and there is at least one student result.\r\n     *\r\n     * @param exerciseId ProgrammingExercise id\r\n     */\r\n    getProgrammingExerciseTestCaseState(exerciseId: number): Observable<HttpResponse<ProgrammingExerciseTestCaseStateDTO>> {\r\n        return this.http.get<ProgrammingExerciseTestCaseStateDTO>(`${this.resourceUrl}/${exerciseId}/test-case-state`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Receives all programming exercises for the particular query\r\n     * @param req optional request options\r\n     */\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<ProgrammingExercise[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.exerciseService.processExerciseEntityArrayResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Deletes the programming exercise with the corresponding programming exercise Id\r\n     * @param programmingExerciseId of the programming exercise to delete\r\n     * @param deleteStudentReposBuildPlans indicates if the StudentReposBuildPlans should be also deleted or not\r\n     * @param deleteBaseReposBuildPlans indicates if the BaseReposBuildPlans should be also deleted or not\r\n     */\r\n    delete(programmingExerciseId: number, deleteStudentReposBuildPlans: boolean, deleteBaseReposBuildPlans: boolean): Observable<HttpResponse<any>> {\r\n        let params = new HttpParams();\r\n        if (deleteBaseReposBuildPlans != undefined && deleteStudentReposBuildPlans != undefined) {\r\n            params = params.set('deleteStudentReposBuildPlans', deleteStudentReposBuildPlans.toString());\r\n            params = params.set('deleteBaseReposBuildPlans', deleteBaseReposBuildPlans.toString());\r\n        }\r\n        return this.http.delete(`${this.resourceUrl}/${programmingExerciseId}`, { params, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Converts the data from the client\r\n     * if template & solution participation exist removes the exercise and results from them\r\n     * @param exercise for which the data should be converted\r\n     */\r\n    convertDataFromClient(exercise: ProgrammingExercise) {\r\n        const copy = {\r\n            ...ExerciseService.convertExerciseDatesFromClient(exercise),\r\n            buildAndTestStudentSubmissionsAfterDueDate: convertDateFromClient(exercise.buildAndTestStudentSubmissionsAfterDueDate),\r\n        };\r\n        // Remove exercise from template & solution participation to avoid circular dependency issues.\r\n        // Also remove the results, as they can have circular structures as well and don't have to be saved here.\r\n        if (copy.templateParticipation) {\r\n            copy.templateParticipation = _omit(copy.templateParticipation, ['exercise', 'results']) as TemplateProgrammingExerciseParticipation;\r\n        }\r\n        if (copy.solutionParticipation) {\r\n            copy.solutionParticipation = _omit(copy.solutionParticipation, ['exercise', 'results']) as SolutionProgrammingExerciseParticipation;\r\n        }\r\n\r\n        return copy as ProgrammingExercise;\r\n    }\r\n\r\n    /**\r\n     * Convert all date fields of the programming exercise to dayjs date objects.\r\n     * Note: This conversion could produce an invalid date if the date is malformatted.\r\n     *\r\n     * @param entity ProgrammingExercise\r\n     */\r\n    static convertProgrammingExerciseResponseDatesFromServer(entity: EntityResponseType) {\r\n        const res = ExerciseService.convertExerciseResponseDatesFromServer(entity);\r\n        if (!res.body) {\r\n            return res;\r\n        }\r\n        res.body.buildAndTestStudentSubmissionsAfterDueDate = convertDateFromServer(res.body.buildAndTestStudentSubmissionsAfterDueDate);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Unlock all the student repositories of the given exercise so that student can perform commits\r\n     * @param exerciseId of the particular programming exercise\r\n     */\r\n    unlockAllRepositories(exerciseId: number): Observable<HttpResponse<any>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${exerciseId}/unlock-all-repositories`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Lock all the student repositories of the given exercise so that student can perform commits\r\n     * @param exerciseId of the particular programming exercise\r\n     */\r\n    lockAllRepositories(exerciseId: number): Observable<HttpResponse<any>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${exerciseId}/lock-all-repositories`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Exports the solution, template or test repository for a given exercise.\r\n     * @param exerciseId\r\n     * @param repositoryType\r\n     * @param auxiliaryRepositoryId\r\n     */\r\n    exportInstructorRepository(exerciseId: number, repositoryType: RepositoryType, auxiliaryRepositoryId: number | undefined): Observable<HttpResponse<Blob>> {\r\n        if (repositoryType === RepositoryType.AUXILIARY && auxiliaryRepositoryId !== undefined) {\r\n            return this.http.get(`${this.resourceUrl}/${exerciseId}/export-instructor-auxiliary-repository/${auxiliaryRepositoryId}`, {\r\n                observe: 'response',\r\n                responseType: 'blob',\r\n            });\r\n        } else {\r\n            return this.http.get(`${this.resourceUrl}/${exerciseId}/export-instructor-repository/${repositoryType}`, {\r\n                observe: 'response',\r\n                responseType: 'blob',\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exports the repository belonging to a specific student participation of a programming exercise.\r\n     * @param exerciseId The ID of the programming exercise.\r\n     * @param participationId The ID of the (student) participation\r\n     */\r\n    exportStudentRepository(exerciseId: number, participationId: number): Observable<HttpResponse<Blob>> {\r\n        return this.http.get(`${this.resourceUrl}/${exerciseId}/export-student-repository/${participationId}`, {\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exports all instructor repositories (solution, template, test), the problem statement and the exercise details.\r\n     * @param exerciseId\r\n     */\r\n    exportInstructorExercise(exerciseId: number): Observable<HttpResponse<Blob>> {\r\n        return this.http.get(`${this.resourceUrl}/${exerciseId}/export-instructor-exercise`, {\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exports the example solution repository for a given exercise, suitable for distributing to students.\r\n     * @param exerciseId\r\n     * @param includeTests flag that indicates whether the tests should also be exported\r\n     */\r\n    exportStudentRequestedRepository(exerciseId: number, includeTests: boolean): Observable<HttpResponse<Blob>> {\r\n        let params = new HttpParams();\r\n        params = params.set('includeTests', includeTests.toString());\r\n        return this.http.get(`${this.resourceUrl}/${exerciseId}/export-student-requested-repository`, {\r\n            params,\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Re-evaluates and updates an existing programming exercise.\r\n     *\r\n     * @param programmingExercise that should be updated of type {ProgrammingExercise}\r\n     * @param req optional request options\r\n     */\r\n    reevaluateAndUpdate(programmingExercise: ProgrammingExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        let copy = this.convertDataFromClient(programmingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .put<ProgrammingExercise>(`${this.resourceUrl}/${programmingExercise.id}/re-evaluate`, copy, {\r\n                params: options,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for ProgrammingExercise EntityResponses.\r\n     *\r\n     * NOTE: This method is used instead of {@link exerciseService.processExerciseEntityResponse} due to the\r\n     *       different handling of the date conversion\r\n     * @param exerciseRes\r\n     */\r\n    private processProgrammingExerciseEntityResponse(exerciseRes: EntityResponseType): EntityResponseType {\r\n        ProgrammingExerciseService.convertProgrammingExerciseResponseDatesFromServer(exerciseRes);\r\n        ExerciseService.convertExerciseCategoriesFromServer(exerciseRes);\r\n        this.exerciseService.setAccessRightsExerciseEntityResponseType(exerciseRes);\r\n        this.exerciseService.sendExerciseTitleToTitleService(exerciseRes?.body ?? undefined);\r\n        return exerciseRes;\r\n    }\r\n\r\n    /**\r\n     * Gets the git-diff report of a programming exercise\r\n     *\r\n     * @param exerciseId The id of a programming exercise\r\n     */\r\n    getDiffReport(exerciseId: number): Observable<ProgrammingExerciseGitDiffReport | undefined> {\r\n        return this.http\r\n            .get<ProgrammingExerciseGitDiffReport>(`${this.resourceUrl}/${exerciseId}/diff-report`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<ProgrammingExerciseGitDiffReport>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Gets the git-diff report of a programming exercise for two specific submissions\r\n     * The user needs to have at least the 'instructor' authority to access this endpoint.\r\n     * @param exerciseId The id of a programming exercise\r\n     * @param olderSubmissionId The id of the older submission\r\n     * @param newerSubmissionId The id of the newer submission\r\n     */\r\n    getDiffReportForSubmissions(exerciseId: number, olderSubmissionId: number, newerSubmissionId: number): Observable<ProgrammingExerciseGitDiffReport | undefined> {\r\n        return this.http\r\n            .get<ProgrammingExerciseGitDiffReport>(`${this.resourceUrl}/${exerciseId}/submissions/${olderSubmissionId}/diff-report/${newerSubmissionId}`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<ProgrammingExerciseGitDiffReport>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Gets the git-diff report of a programming exercise for a specific submission with the template\r\n     * The user needs to have at least the 'instructor' authority to access this endpoint.\r\n     * @param exerciseId The id of a programming exercise\r\n     * @param submissionId The id of a submission\r\n     */\r\n    getDiffReportForSubmissionWithTemplate(exerciseId: number, submissionId: number): Observable<ProgrammingExerciseGitDiffReport | undefined> {\r\n        return this.http\r\n            .get<ProgrammingExerciseGitDiffReport>(`${this.resourceUrl}/${exerciseId}/submissions/${submissionId}/diff-report-with-template`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<ProgrammingExerciseGitDiffReport>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Gets the git-diff report of a programming exercise for two specific commits.\r\n     * The user needs to have access to the participation to access this endpoint.\r\n     * @param exerciseId The id of a programming exercise\r\n     * @param participationId The id of a participation\r\n     * @param olderCommitHash The hash of the older commit\r\n     * @param newerCommitHash The hash of the newer commit\r\n     * @param repositoryType The type of the repository (optional)\r\n     */\r\n    getDiffReportForCommits(\r\n        exerciseId: number,\r\n        participationId: number | undefined,\r\n        olderCommitHash: string,\r\n        newerCommitHash: string,\r\n        repositoryType?: string,\r\n    ): Observable<ProgrammingExerciseGitDiffReport | undefined> {\r\n        const params: { repositoryType?: string; participationId?: number } = {};\r\n        if (repositoryType !== undefined) {\r\n            params.repositoryType = repositoryType;\r\n        }\r\n        if (participationId !== undefined && !isNaN(participationId)) {\r\n            params.participationId = participationId;\r\n        }\r\n\r\n        return this.http\r\n            .get<ProgrammingExerciseGitDiffReport>(`${this.resourceUrl}/${exerciseId}/commits/${olderCommitHash}/diff-report/${newerCommitHash}`, {\r\n                observe: 'response',\r\n                params: params,\r\n            })\r\n            .pipe(map((res: HttpResponse<ProgrammingExerciseGitDiffReport>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Gets all files from the last solution participation repository\r\n     */\r\n    getSolutionRepositoryTestFilesWithContent(exerciseId: number): Observable<Map<string, string> | undefined> {\r\n        return this.http.get(`${this.resourceUrl}/${exerciseId}/solution-files-content?omitBinaries=true`).pipe(\r\n            map((res: HttpResponse<any>) => {\r\n                // this mapping is required because otherwise the HttpResponse object would be parsed\r\n                // to an arbitrary object (and not a map)\r\n                return res && new Map(Object.entries(res));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets all files from the last commit in the template participation repository\r\n     */\r\n    getTemplateRepositoryTestFilesWithContent(exerciseId: number): Observable<Map<string, string> | undefined> {\r\n        return this.http.get(`${this.resourceUrl}/${exerciseId}/template-files-content?omitBinaries=true`).pipe(\r\n            map((res: HttpResponse<any>) => {\r\n                // this mapping is required because otherwise the HttpResponse object would be parsed\r\n                // to an arbitrary object (and not a map)\r\n                return res && new Map(Object.entries(res));\r\n            }),\r\n        );\r\n    }\r\n\r\n    getBuildLogStatistics(exerciseId: number): Observable<BuildLogStatisticsDTO> {\r\n        return this.http.get<BuildLogStatisticsDTO>(`${this.resourceUrl}/${exerciseId}/build-log-statistics`);\r\n    }\r\n\r\n    /** Imports a programming exercise from a given zip file **/\r\n    importFromFile(exercise: ProgrammingExercise, courseId: number): Observable<EntityResponseType> {\r\n        let copy = this.convertDataFromClient(exercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        const formData = new FormData();\r\n        formData.append('file', exercise.zipFileForImport!);\r\n        const exerciseBlob = new Blob([JSON.stringify(copy)], { type: 'application/json' });\r\n        formData.append('programmingExercise', exerciseBlob);\r\n        const url = `api/programming/courses/${courseId}/programming-exercises/import-from-file`;\r\n        return this.http\r\n            .post<ProgrammingExercise>(url, formData, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processProgrammingExerciseEntityResponse(res)));\r\n    }\r\n\r\n    getCheckoutDirectoriesForProgrammingLanguage(programmingLanguage: ProgrammingLanguage, checkoutSolution: boolean): Observable<CheckoutDirectoriesDto> {\r\n        return this.http.get<CheckoutDirectoriesDto>(`${this.resourceUrl}/repository-checkout-directories`, {\r\n            params: {\r\n                programmingLanguage,\r\n                checkoutSolution: checkoutSolution,\r\n            },\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ProgrammingExerciseService", "http", "inject", "HttpClient", "exerciseService", "ExerciseService", "sortService", "SortService", "resourceUrl", "automaticSetup", "programmingExercise", "copy", "convertDataFromClient", "setBonusPointsConstrainedByIncludedInOverallScore", "categories", "stringifyExerciseCategories", "post", "observe", "pipe", "map", "res", "processProgrammingExerciseEntityResponse", "generateStructureOracle", "exerciseId", "put", "responseType", "reset", "options", "checkPlagiarism", "get", "params", "__spreadValues", "toParams", "response", "body", "checkPlagiarismJPlagReport", "getLatestPlagiarismResult", "combineTemplateRepositoryCommits", "importExercise", "adaptedSourceProgrammingExercise", "importOptions", "createRequestOption", "exercise", "id", "update", "req", "updateTimeline", "updateProblemStatement", "programmingExerciseId", "problemStatement", "patch", "find", "withPlagiarismDetectionConfig", "findWithTemplateAndSolutionParticipationAndResults", "findWithTemplateAndSolutionParticipation", "withSubmissionResults", "withGradingCriteria", "HttpParams", "set", "toString", "templateSubmissions", "templateParticipation", "submissions", "reconnectSubmissionAndResult", "solutionSubmissions", "solutionParticipation", "findWithTemplateAndSolutionParticipationAndLatestResults", "setLatestResultForTemplateAndSolution", "findWithAuxiliaryRepository", "latestTemplateResult", "getLatestResult", "results", "latestSolutionResult", "participation", "length", "sortByProperty", "sort", "last", "forEach", "submission", "result", "getProgrammingExerciseTestCaseState", "query", "processExerciseEntityArrayResponse", "delete", "deleteStudentReposBuildPlans", "deleteBaseReposBuildPlans", "undefined", "__spreadProps", "convertExerciseDatesFromClient", "buildAndTestStudentSubmissionsAfterDueDate", "convertDateFromClient", "_omit", "convertProgrammingExerciseResponseDatesFromServer", "entity", "convertExerciseResponseDatesFromServer", "convertDateFromServer", "unlockAllRepositories", "lockAllRepositories", "exportInstructorRepository", "repositoryType", "auxiliaryRepositoryId", "RepositoryType", "AUXILIARY", "exportStudentRepository", "participationId", "exportInstructorExercise", "exportStudentRequestedRepository", "includeTests", "reevaluateAndUpdate", "processExerciseEntityResponse", "exerciseRes", "convertExerciseCategoriesFromServer", "setAccessRightsExerciseEntityResponseType", "sendExerciseTitleToTitleService", "getDiffReport", "getDiffReportForSubmissions", "olderSubmissionId", "newerSubmissionId", "getDiffReportForSubmissionWithTemplate", "submissionId", "getDiffReportForCommits", "olderCommitHash", "newerCommitHash", "isNaN", "getSolutionRepositoryTestFilesWithContent", "Map", "Object", "entries", "getTemplateRepositoryTestFilesWithContent", "getBuildLogStatistics", "importFromFile", "courseId", "formData", "FormData", "append", "zipFileForImport", "exerciseBlob", "Blob", "JSON", "stringify", "type", "url", "getCheckoutDirectoriesForProgrammingLanguage", "programmingLanguage", "checkoutSolution", "factory", "\u0275fac", "providedIn"]
}
