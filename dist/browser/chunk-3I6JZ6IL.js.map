{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/manage/code-editor/code-editor-instructor-base-container.component.ts", "src/main/webapp/app/exercises/programming/manage/status/programming-exercise-instructor-exercise-status.component.ts", "src/main/webapp/app/exercises/programming/manage/status/programming-exercise-instructor-exercise-status.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { CodeEditorContainerComponent } from 'app/exercises/programming/shared/code-editor/container/code-editor-container.component';\r\nimport { Observable, Subscription, of, throwError } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { catchError, filter, map, tap } from 'rxjs/operators';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { DomainService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain.service';\r\nimport { TemplateProgrammingExerciseParticipation } from 'app/entities/participation/template-programming-exercise-participation.model';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { SolutionProgrammingExerciseParticipation } from 'app/entities/participation/solution-programming-exercise-participation.model';\r\nimport { DomainChange, DomainType, RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseExerciseService } from 'app/exercises/shared/course-exercises/course-exercise.service';\r\n\r\n/**\r\n * Enumeration specifying the loading state\r\n */\r\nexport enum LOADING_STATE {\r\n    CLEAR = 'CLEAR',\r\n    INITIALIZING = 'INITIALIZING',\r\n    FETCHING_FAILED = 'FETCHING_FAILED',\r\n    CREATING_ASSIGNMENT_REPO = 'CREATING_ASSIGNMENT_REPO',\r\n    DELETING_ASSIGNMENT_REPO = 'DELETING_ASSIGNMENT_REPO',\r\n}\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class CodeEditorInstructorBaseContainerComponent implements OnInit, OnDestroy {\r\n    @ViewChild(CodeEditorContainerComponent, { static: false }) codeEditorContainer: CodeEditorContainerComponent;\r\n\r\n    private router = inject(Router);\r\n    private exerciseService = inject(ProgrammingExerciseService);\r\n    private courseExerciseService = inject(CourseExerciseService);\r\n    private domainService = inject(DomainService);\r\n    private location = inject(Location);\r\n    private participationService = inject(ParticipationService);\r\n    private route = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n\r\n    ButtonSize = ButtonSize;\r\n    LOADING_STATE = LOADING_STATE;\r\n    PROGRAMMING = ExerciseType.PROGRAMMING;\r\n\r\n    // This component responds to multiple route schemas:\r\n    // :exerciseId -> Load exercise and select template repository\r\n    // :exerciseId/:participationId -> Load exercise and select repository according to participationId\r\n    // :exerciseId/test -> Load exercise and select test repository\r\n    paramSub: Subscription;\r\n\r\n    // Contains all participations (template, solution, assignment)\r\n    exercise: ProgrammingExercise;\r\n    course: Course;\r\n    // Can only be undefined when the test repository is selected.\r\n    selectedParticipation?: TemplateProgrammingExerciseParticipation | SolutionProgrammingExerciseParticipation | ProgrammingExerciseStudentParticipation;\r\n    // Stores which repository is selected atm.\r\n    // Needs to be set additionally to selectedParticipation as the test repository does not have a participation\r\n    selectedRepository: RepositoryType;\r\n    selectedRepositoryId: number;\r\n    selectedAuxiliaryRepositoryName?: string;\r\n\r\n    // Fires when the selected domain changes.\r\n    // This can either be a participation (solution, template, assignment) or the test repository.\r\n    domainChangeSubscription: Subscription;\r\n\r\n    // State variables\r\n    loadingState = LOADING_STATE.CLEAR;\r\n\r\n    /**\r\n     * Initialize the route params subscription.\r\n     * On route param change load the exercise and the selected participation OR the test repository.\r\n     */\r\n    ngOnInit(): void {\r\n        if (this.paramSub) {\r\n            this.paramSub.unsubscribe();\r\n        }\r\n        this.paramSub = this.route!.params.subscribe((params) => {\r\n            const exerciseId = Number(params['exerciseId']);\r\n            const repositoryType = params['repositoryType'];\r\n            const repositoryId = Number(params['repositoryId']);\r\n            this.loadingState = LOADING_STATE.INITIALIZING;\r\n            this.loadExercise(exerciseId)\r\n                .pipe(\r\n                    catchError(() => throwError(() => new Error('exerciseNotFound'))),\r\n                    tap((exercise) => {\r\n                        this.exercise = exercise;\r\n                        this.course = exercise.course! ?? exercise.exerciseGroup!.exam!.course!;\r\n                    }),\r\n                    // Set selected participation\r\n                    tap(() => {\r\n                        if (repositoryType === RepositoryType.TESTS) {\r\n                            this.saveChangesAndSelectDomain([DomainType.TEST_REPOSITORY, this.exercise]);\r\n                        } else if (repositoryType === RepositoryType.AUXILIARY) {\r\n                            const auxiliaryRepo = this.exercise.auxiliaryRepositories?.find((repo) => repo.id === repositoryId);\r\n                            if (auxiliaryRepo) {\r\n                                this.selectedAuxiliaryRepositoryName = auxiliaryRepo.name;\r\n                                this.saveChangesAndSelectDomain([DomainType.AUXILIARY_REPOSITORY, auxiliaryRepo]);\r\n                            }\r\n                        } else {\r\n                            const nextAvailableParticipation = this.getNextAvailableParticipation(repositoryId);\r\n                            if (nextAvailableParticipation) {\r\n                                this.selectParticipationDomainById(nextAvailableParticipation.id!);\r\n\r\n                                // Show a consistent route in the browser\r\n                                if (nextAvailableParticipation.id !== repositoryId) {\r\n                                    const parentUrl = this.router.url.substring(0, this.router.url.lastIndexOf('/'));\r\n                                    this.location.replaceState(parentUrl + `/${nextAvailableParticipation.id}`);\r\n                                }\r\n                            } else {\r\n                                throwError(() => new Error('participationNotFound'));\r\n                            }\r\n                        }\r\n                    }),\r\n                    tap(() => {\r\n                        if (!this.domainChangeSubscription) {\r\n                            this.domainChangeSubscription = this.subscribeToDomainChange();\r\n                        }\r\n                    }),\r\n                )\r\n                .subscribe({\r\n                    next: () => {\r\n                        this.loadingState = LOADING_STATE.CLEAR;\r\n                    },\r\n                    error: (err: Error) => {\r\n                        this.loadingState = LOADING_STATE.FETCHING_FAILED;\r\n                        this.onError(err.message);\r\n                    },\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from paramSub and domainChangeSubscription if they are present, on component destruction\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.domainChangeSubscription) {\r\n            this.domainChangeSubscription.unsubscribe();\r\n        }\r\n        if (this.paramSub) {\r\n            this.paramSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the next available participation, highest priority has the participation given to the method.\r\n     * Removes participations without a repositoryUri (could be invalid).\r\n     * Returns undefined if no valid participation can be found.\r\n     *\r\n     * @param preferredParticipationId\r\n     */\r\n    private getNextAvailableParticipation(preferredParticipationId: number): Participation | undefined {\r\n        const availableParticipations = [\r\n            this.exercise.templateParticipation,\r\n            this.exercise.solutionParticipation,\r\n            this.exercise.studentParticipations && this.exercise.studentParticipations.length ? this.exercise.studentParticipations[0] : undefined,\r\n        ].filter(Boolean);\r\n        const selectedParticipation = availableParticipations.find(({ id }: ProgrammingExerciseStudentParticipation) => id === preferredParticipationId);\r\n        return [selectedParticipation, ...availableParticipations].filter(Boolean).find(({ repositoryUri }: ProgrammingExerciseStudentParticipation) => !!repositoryUri);\r\n    }\r\n\r\n    /**\r\n     * Subscribe for domain changes caused by url route changes.\r\n     * Distinguishes between participation based domains (template, solution, assignment) and the test repository.\r\n     */\r\n    subscribeToDomainChange() {\r\n        return this.domainService\r\n            .subscribeDomainChange()\r\n            .pipe(\r\n                filter((domain) => !!domain),\r\n                map((domain) => domain as DomainChange),\r\n                tap(([domainType, domainValue]) => {\r\n                    this.applyDomainChange(domainType, domainValue);\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    protected applyDomainChange(domainType: any, domainValue: any) {\r\n        if (this.codeEditorContainer != undefined) {\r\n            this.codeEditorContainer.initializeProperties();\r\n        }\r\n        if (domainType === DomainType.AUXILIARY_REPOSITORY) {\r\n            this.selectedRepository = RepositoryType.AUXILIARY;\r\n            this.selectedRepositoryId = domainValue.id;\r\n        } else if (domainType === DomainType.PARTICIPATION) {\r\n            this.setSelectedParticipation(domainValue.id);\r\n        } else {\r\n            this.selectedParticipation = this.exercise.templateParticipation!;\r\n            this.selectedRepository = RepositoryType.TESTS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the selected participation based on its id.\r\n     * Shows an error if the participationId does not match the template, solution or assignment participation.\r\n     **/\r\n    setSelectedParticipation(participationId: number) {\r\n        // The result component needs a circular structure of participation -> exercise.\r\n        const exercise = this.exercise;\r\n        if (participationId === this.exercise.templateParticipation!.id) {\r\n            this.selectedRepository = RepositoryType.TEMPLATE;\r\n            this.selectedParticipation = this.exercise.templateParticipation;\r\n            (this.selectedParticipation as TemplateProgrammingExerciseParticipation).programmingExercise = exercise;\r\n        } else if (participationId === this.exercise.solutionParticipation!.id) {\r\n            this.selectedRepository = RepositoryType.SOLUTION;\r\n            this.selectedParticipation = this.exercise.solutionParticipation;\r\n            (this.selectedParticipation as SolutionProgrammingExerciseParticipation).programmingExercise = exercise;\r\n        } else if (this.exercise.studentParticipations?.length && participationId === this.exercise.studentParticipations[0].id) {\r\n            this.selectedRepository = RepositoryType.ASSIGNMENT;\r\n            this.selectedParticipation = this.exercise.studentParticipations[0] as ProgrammingExerciseStudentParticipation;\r\n            this.selectedParticipation.exercise = exercise;\r\n        } else {\r\n            this.onError('participationNotFound');\r\n        }\r\n    }\r\n\r\n    repositoryUri(participation?: Participation) {\r\n        return (participation as ProgrammingExerciseStudentParticipation)?.repositoryUri;\r\n    }\r\n\r\n    /**\r\n     * Doesn't reload the exercise from server if it was already loaded.\r\n     * This check is done to avoid load on the server when the user is switching participations.\r\n     * Has the side effect, that if the exercise changes unrelated to the participations, the user has to reload the page to see the updates.\r\n     */\r\n    loadExercise(exerciseId: number): Observable<ProgrammingExercise> {\r\n        return this.exercise && this.exercise.id === exerciseId\r\n            ? of(this.exercise)\r\n            : this.exerciseService.findWithTemplateAndSolutionParticipationAndResults(exerciseId).pipe(map(({ body }) => body!));\r\n    }\r\n\r\n    /**\r\n     * Set the selected participation domain based on its id.\r\n     * Shows an error if the participationId does not match the template, solution or assignment participation.\r\n     **/\r\n    selectParticipationDomainById(participationId: number) {\r\n        if (participationId === this.exercise.templateParticipation!.id) {\r\n            this.exercise.templateParticipation!.programmingExercise = this.exercise;\r\n            this.saveChangesAndSelectDomain([DomainType.PARTICIPATION, this.exercise.templateParticipation!]);\r\n        } else if (participationId === this.exercise.solutionParticipation!.id) {\r\n            this.exercise.solutionParticipation!.programmingExercise = this.exercise;\r\n            this.saveChangesAndSelectDomain([DomainType.PARTICIPATION, this.exercise.solutionParticipation!]);\r\n        } else if (this.exercise.studentParticipations?.length && participationId === this.exercise.studentParticipations[0].id) {\r\n            this.exercise.studentParticipations[0].exercise = this.exercise;\r\n            this.saveChangesAndSelectDomain([DomainType.PARTICIPATION, this.exercise.studentParticipations[0]]);\r\n        } else {\r\n            this.onError('participationNotFound');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves unsaved changes and then selects a domain.\r\n     *\r\n     * Always use this method for changing the editor content to save file modifications.\r\n     */\r\n    saveChangesAndSelectDomain(domain: DomainChange) {\r\n        if (this.codeEditorContainer != undefined) {\r\n            this.codeEditorContainer.actions.onSave();\r\n        }\r\n        this.domainService.setDomain(domain);\r\n    }\r\n\r\n    /**\r\n     * Select the template participation repository and navigate to it\r\n     */\r\n    selectTemplateParticipation() {\r\n        this.router.navigate(['../..', RepositoryType.TEMPLATE, this.exercise.templateParticipation!.id], { relativeTo: this.route });\r\n    }\r\n\r\n    /**\r\n     * Select the solution participation repository and navigate to it\r\n     */\r\n    selectSolutionParticipation() {\r\n        this.router.navigate(['../..', RepositoryType.SOLUTION, this.exercise.solutionParticipation!.id], { relativeTo: this.route });\r\n    }\r\n\r\n    /**\r\n     * Select the assignment participation repository and navigate to it\r\n     */\r\n    selectAssignmentParticipation() {\r\n        this.router.navigate(['../..', RepositoryType.USER, this.exercise.studentParticipations![0].id], { relativeTo: this.route });\r\n    }\r\n\r\n    /**\r\n     * Select the test repository and navigate to it\r\n     */\r\n    selectTestRepository() {\r\n        // as test repositories do not have any participation nor repository Id associated, we use a 'test' placeholder\r\n        this.router.navigate(['../..', RepositoryType.TESTS, 'test'], { relativeTo: this.route });\r\n    }\r\n\r\n    /**\r\n     * Select the auxiliary repository and navigate to it\r\n     */\r\n    selectAuxiliaryRepository(repositoryId: number) {\r\n        this.router.navigate(['../..', RepositoryType.AUXILIARY, repositoryId], { relativeTo: this.route });\r\n    }\r\n\r\n    /**\r\n     * Creates an assignment participation for this user for this exercise.\r\n     */\r\n    createAssignmentParticipation() {\r\n        this.loadingState = LOADING_STATE.CREATING_ASSIGNMENT_REPO;\r\n        return this.courseExerciseService\r\n            .startExercise(this.exercise.id!)\r\n            .pipe(\r\n                catchError(() => throwError(() => new Error('participationCouldNotBeCreated'))),\r\n                tap((participation) => {\r\n                    this.exercise.studentParticipations = [participation];\r\n                    this.loadingState = LOADING_STATE.CLEAR;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                error: (err: Error) => this.onError(err.message),\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Delete the assignment participation for this user for this exercise.\r\n     * This deletes all build plans, database information, etc. and copies the current version of the template repository.\r\n     */\r\n    deleteAssignmentParticipation() {\r\n        this.loadingState = LOADING_STATE.DELETING_ASSIGNMENT_REPO;\r\n        if (this.selectedRepository === RepositoryType.ASSIGNMENT) {\r\n            this.selectTemplateParticipation();\r\n        }\r\n        const assignmentParticipationId = this.exercise.studentParticipations![0].id!;\r\n        this.exercise.studentParticipations = [];\r\n        this.participationService!.delete(assignmentParticipationId, { deleteBuildPlan: true, deleteRepository: true })\r\n            .pipe(\r\n                catchError(() => throwError(() => new Error('participationCouldNotBeDeleted'))),\r\n                tap(() => {\r\n                    this.loadingState = LOADING_STATE.CLEAR;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                error: (err: Error) => this.onError(err.message),\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Show an error as an alert in the top of the editor html.\r\n     * Used by other components to display errors.\r\n     * The error must already be provided translated by the emitting component.\r\n     */\r\n    onError(error: string) {\r\n        this.alertService.error(`artemisApp.editor.errors.${error}`);\r\n    }\r\n}\r\n", "import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { findLatestResult } from 'app/shared/util/utils';\r\nimport { faCheckCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { hasSolutionParticipationChanged, hasTemplateParticipationChanged } from 'app/exercises/shared/participation/participation.utils';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n/**\r\n * Describes programming exercise issues\r\n */\r\nenum ProgrammingExerciseIssues {\r\n    TEMPLATE_PASSING = 'TEMPLATE_PASSING',\r\n    SOLUTION_FAILING = 'SOLUTION_FAILING',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instructor-exercise-status',\r\n    templateUrl: './programming-exercise-instructor-exercise-status.component.html',\r\n    imports: [FaIconComponent, NgbTooltip, TranslateDirective],\r\n})\r\nexport class ProgrammingExerciseInstructorExerciseStatusComponent implements OnChanges {\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n\r\n    ProgrammingExerciseIssues = ProgrammingExerciseIssues;\r\n    @Input() templateParticipation: Participation;\r\n    @Input() solutionParticipation: Participation;\r\n    @Input() exercise: ProgrammingExercise;\r\n\r\n    templateParticipationSubscription: Subscription;\r\n    solutionParticipationSubscription: Subscription;\r\n    issues: (ProgrammingExerciseIssues | undefined)[] = [];\r\n\r\n    // Icons\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faCheckCircle = faCheckCircle;\r\n\r\n    /**\r\n     * If there are changes for the template or solution participation, check if there are issues\r\n     * for the results of the template or solution participation\r\n     * @param changes The hashtable of occurred changes represented as SimpleChanges object.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (hasTemplateParticipationChanged(changes)) {\r\n            if (this.templateParticipationSubscription) {\r\n                this.templateParticipationSubscription.unsubscribe();\r\n            }\r\n            this.templateParticipationSubscription = this.participationWebsocketService\r\n                .subscribeForLatestResultOfParticipation(this.templateParticipation.id!, false, this.exercise.id)\r\n                .pipe(\r\n                    filter((result) => !!result),\r\n                    tap((result) => (this.templateParticipation.results = [result!])),\r\n                    tap(() => this.findIssues()),\r\n                )\r\n                .subscribe();\r\n        }\r\n\r\n        if (hasSolutionParticipationChanged(changes)) {\r\n            if (this.solutionParticipationSubscription) {\r\n                this.solutionParticipationSubscription.unsubscribe();\r\n            }\r\n            this.solutionParticipationSubscription = this.participationWebsocketService\r\n                .subscribeForLatestResultOfParticipation(this.solutionParticipation.id!, false, this.exercise.id)\r\n                .pipe(\r\n                    filter((result) => !!result),\r\n                    tap((result) => (this.solutionParticipation.results = [result!])),\r\n                    tap(() => this.findIssues()),\r\n                )\r\n                .subscribe();\r\n        }\r\n\r\n        this.findIssues();\r\n    }\r\n\r\n    /**\r\n     * Finds issues of the template and the solution participation result\r\n     */\r\n    findIssues() {\r\n        const newestTemplateParticipationResult = findLatestResult(this.templateParticipation.results);\r\n        const newestSolutionParticipationResult = findLatestResult(this.solutionParticipation.results);\r\n\r\n        this.issues = [\r\n            newestTemplateParticipationResult && newestTemplateParticipationResult.score! > 0 ? ProgrammingExerciseIssues.TEMPLATE_PASSING : undefined,\r\n            newestSolutionParticipationResult && !newestSolutionParticipationResult.successful ? ProgrammingExerciseIssues.SOLUTION_FAILING : undefined,\r\n        ].filter(Boolean);\r\n    }\r\n}\r\n", "@if (issues.length) {\r\n    <fa-icon [icon]=\"faExclamationTriangle\" size=\"2x\" class=\"text-warning\" placement=\"bottom auto\" [ngbTooltip]=\"tooltipContent\" />\r\n} @else {\r\n    <fa-icon [icon]=\"faCheckCircle\" size=\"2x\" class=\"text-success\" />\r\n}\r\n<ng-template #tooltipContent>\r\n    @if (issues.includes(ProgrammingExerciseIssues.TEMPLATE_PASSING)) {\r\n        <div jhiTranslate=\"artemisApp.programmingExercise.status.templateFulfillsTest\"></div>\r\n    }\r\n    @if (issues.includes(ProgrammingExerciseIssues.SOLUTION_FAILING)) {\r\n        <div jhiTranslate=\"artemisApp.programmingExercise.status.solutionFailsTest\"></div>\r\n    }\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["LOADING_STATE", "CodeEditorInstructorBaseContainerComponent", "codeEditorContainer", "router", "inject", "Router", "exerciseService", "ProgrammingExerciseService", "courseExerciseService", "CourseExerciseService", "domainService", "DomainService", "location", "Location", "participationService", "ParticipationService", "route", "ActivatedRoute", "alertService", "AlertService", "ButtonSize", "PROGRAMMING", "ExerciseType", "paramSub", "exercise", "course", "selectedParticipation", "selectedRepository", "selectedRepositoryId", "selectedAuxiliaryRepositoryName", "domainChangeSubscription", "loadingState", "CLEAR", "ngOnInit", "unsubscribe", "params", "subscribe", "exerciseId", "Number", "repositoryType", "repositoryId", "INITIALIZING", "loadExercise", "pipe", "catchError", "throwError", "Error", "tap", "exerciseGroup", "exam", "RepositoryType", "TESTS", "saveChangesAndSelectDomain", "DomainType", "TEST_REPOSITORY", "AUXILIARY", "auxiliaryRepo", "auxiliaryRepositories", "find", "repo", "id", "name", "AUXILIARY_REPOSITORY", "nextAvailableParticipation", "getNextAvailableParticipation", "selectParticipationDomainById", "parentUrl", "url", "substring", "lastIndexOf", "replaceState", "subscribeToDomainChange", "next", "error", "err", "FETCHING_FAILED", "onError", "message", "ngOnDestroy", "preferredParticipationId", "availableParticipations", "templateParticipation", "solutionParticipation", "studentParticipations", "length", "undefined", "filter", "Boolean", "repositoryUri", "subscribeDomainChange", "domain", "map", "domainType", "domainValue", "applyDomainChange", "initializeProperties", "PARTICIPATION", "setSelectedParticipation", "participationId", "TEMPLATE", "programmingExercise", "SOLUTION", "ASSIGNMENT", "participation", "of", "findWithTemplateAndSolutionParticipationAndResults", "body", "actions", "onSave", "setDomain", "selectTemplateParticipation", "navigate", "relativeTo", "selectSolutionParticipation", "selectAssignmentParticipation", "USER", "selectTestRepository", "selectAuxiliaryRepository", "createAssignmentParticipation", "CREATING_ASSIGNMENT_REPO", "startExercise", "deleteAssignmentParticipation", "DELETING_ASSIGNMENT_REPO", "assignmentParticipationId", "delete", "deleteBuildPlan", "deleteRepository", "selectors", "viewQuery", "rf", "ctx", "CodeEditorContainerComponent", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "tooltipContent_r2", "faCheckCircle", "\u0275\u0275template", "ProgrammingExerciseInstructorExerciseStatusComponent_ng_template_2_Conditional_1_Template", "ProgrammingExerciseInstructorExerciseStatusComponent_ng_template_2_Conditional_2_Template", "\u0275\u0275conditional", "issues", "includes", "ProgrammingExerciseIssues", "TEMPLATE_PASSING", "SOLUTION_FAILING", "ProgrammingExerciseInstructorExerciseStatusComponent", "participationWebsocketService", "inject", "ParticipationWebsocketService", "templateParticipation", "solutionParticipation", "exercise", "templateParticipationSubscription", "solutionParticipationSubscription", "ngOnChanges", "changes", "hasTemplateParticipationChanged", "unsubscribe", "subscribeForLatestResultOfParticipation", "id", "pipe", "filter", "result", "tap", "results", "findIssues", "subscribe", "hasSolutionParticipationChanged", "newestTemplateParticipationResult", "findLatestResult", "newestSolutionParticipationResult", "score", "undefined", "successful", "Boolean", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseInstructorExerciseStatusComponent_Conditional_0_Template", "ProgrammingExerciseInstructorExerciseStatusComponent_Conditional_1_Template", "ProgrammingExerciseInstructorExerciseStatusComponent_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "length", "FaIconComponent", "NgbTooltip", "TranslateDirective", "encapsulation"]
}
