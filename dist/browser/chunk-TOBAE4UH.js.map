{
  "version": 3,
  "sources": ["src/main/webapp/app/orion/assessment/orion-assessment.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { ProgrammingAssessmentRepoExportService, RepositoryExportOptions } from 'app/exercises/programming/assess/repo-export/programming-assessment-repo-export.service';\r\nimport { OrionConnectorService } from 'app/shared/orion/orion-connector.service';\r\nimport { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { OrionState } from 'app/shared/orion/orion';\r\nimport { ProgrammingAssessmentManualResultService } from 'app/exercises/programming/assess/manual-result/programming-assessment-manual-result.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OrionAssessmentService {\r\n    private orionConnectorService = inject(OrionConnectorService);\r\n    private programmingSubmissionService = inject(ProgrammingSubmissionService);\r\n    private repositoryExportService = inject(ProgrammingAssessmentRepoExportService);\r\n    private manualAssessmentService = inject(ProgrammingAssessmentManualResultService);\r\n    private alertService = inject(AlertService);\r\n\r\n    orionState: OrionState;\r\n    // Stores which submission has been lastly opened\r\n    activeSubmissionId: number | undefined = undefined;\r\n\r\n    constructor() {\r\n        if (this.orionConnectorService && this.orionConnectorService.state()) {\r\n            this.orionConnectorService.state().subscribe((state) => {\r\n                if (this.orionState?.cloning && !state.cloning && this.activeSubmissionId !== undefined) {\r\n                    // If the client sends a cloning = false the download was cancelled, unlock the pending submission\r\n                    this.manualAssessmentService.cancelAssessment(this.activeSubmissionId).subscribe();\r\n                }\r\n                this.orionState = { ...state };\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a new submission if necessary and then delegates to sendSubmissionToOrion\r\n     * to download the submission\r\n     *\r\n     * @param exerciseId if of the exercise the submission belongs to\r\n     * @param submission submission to send to Orion or 'new' if a new one should be loaded\r\n     * @param correctionRound of the assessment\r\n     * @param testRun true if in a test run, false otherwise\r\n     */\r\n    downloadSubmissionInOrion(exerciseId: number, submission: Submission | 'new', correctionRound = 0, testRun: boolean) {\r\n        if (submission === 'new') {\r\n            this.programmingSubmissionService.getSubmissionWithoutAssessment(exerciseId, true, correctionRound).subscribe((newSubmission?: ProgrammingSubmission) => {\r\n                if (newSubmission) {\r\n                    this.sendSubmissionToOrionCancellable(exerciseId, newSubmission.id!, correctionRound, testRun);\r\n                }\r\n            });\r\n        } else {\r\n            this.sendSubmissionToOrion(exerciseId, submission.id!, correctionRound, testRun);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls sendSubmissionToOrion but logs the submission id before so the lock will be freed if the download is cancelled\r\n     */\r\n    sendSubmissionToOrionCancellable(exerciseId: number, submissionId: number, correctionRound = 0, testRun: boolean) {\r\n        this.activeSubmissionId = submissionId;\r\n        this.sendSubmissionToOrion(exerciseId, submissionId, correctionRound, testRun);\r\n    }\r\n\r\n    /**\r\n     * Locks the given submission, exports it, transforms it to base64, and sends it to Orion\r\n     *\r\n     * @param exerciseId id of the exercise the submission belongs to\r\n     * @param submissionId id of the submission to send to Orion\r\n     * @param correctionRound of the assessment\r\n     * @param testRun true if in a test run, false otherwise\r\n     */\r\n    private sendSubmissionToOrion(exerciseId: number, submissionId: number, correctionRound = 0, testRun: boolean) {\r\n        this.orionConnectorService.isCloning(true);\r\n        const exportOptions: RepositoryExportOptions = {\r\n            exportAllParticipants: false,\r\n            filterLateSubmissions: false,\r\n            excludePracticeSubmissions: false,\r\n            addParticipantName: false,\r\n            combineStudentCommits: true,\r\n            anonymizeRepository: true,\r\n            normalizeCodeStyle: false,\r\n        };\r\n        this.programmingSubmissionService.lockAndGetProgrammingSubmissionParticipation(submissionId, correctionRound).subscribe((programmingSubmission) => {\r\n            this.repositoryExportService.exportReposByParticipations(exerciseId, [programmingSubmission.participation!.id!], exportOptions).subscribe((response) => {\r\n                const reader = new FileReader();\r\n                reader.onloadend = () => {\r\n                    const result = reader.result as string;\r\n                    // remove prefix\r\n                    const base64data = result.slice(result.indexOf(',') + 1);\r\n                    this.orionConnectorService.downloadSubmission(submissionId, correctionRound, testRun, base64data);\r\n                };\r\n                reader.onerror = () => {\r\n                    this.alertService.error('artemisApp.assessmentDashboard.orion.downloadFailed');\r\n                };\r\n                reader.readAsDataURL(response.body!);\r\n            });\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "iSAWA,IAAaA,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,sBAAwBC,EAAOC,CAAqB,EACpDC,6BAA+BF,EAAOG,CAA4B,EAClEC,wBAA0BJ,EAAOK,CAAsC,EACvEC,wBAA0BN,EAAOO,CAAwC,EACzEC,aAAeR,EAAOS,CAAY,EAE1CC,WAEAC,mBAAyCC,OAEzCC,aAAA,CACQ,KAAKd,uBAAyB,KAAKA,sBAAsBe,MAAK,GAC9D,KAAKf,sBAAsBe,MAAK,EAAGC,UAAWD,GAAS,CAC/C,KAAKJ,YAAYM,SAAW,CAACF,EAAME,SAAW,KAAKL,qBAAuBC,QAE1E,KAAKN,wBAAwBW,iBAAiB,KAAKN,kBAAkB,EAAEI,UAAS,EAEpF,KAAKL,WAAaQ,EAAA,GAAKJ,EAC3B,CAAC,CAET,CAWAK,0BAA0BC,EAAoBC,EAAgCC,EAAkB,EAAGC,EAAgB,CAC3GF,IAAe,MACf,KAAKnB,6BAA6BsB,+BAA+BJ,EAAY,GAAME,CAAe,EAAEP,UAAWU,GAAyC,CAChJA,GACA,KAAKC,iCAAiCN,EAAYK,EAAcE,GAAKL,EAAiBC,CAAO,CAErG,CAAC,EAED,KAAKK,sBAAsBR,EAAYC,EAAWM,GAAKL,EAAiBC,CAAO,CAEvF,CAKAG,iCAAiCN,EAAoBS,EAAsBP,EAAkB,EAAGC,EAAgB,CAC5G,KAAKZ,mBAAqBkB,EAC1B,KAAKD,sBAAsBR,EAAYS,EAAcP,EAAiBC,CAAO,CACjF,CAUQK,sBAAsBR,EAAoBS,EAAsBP,EAAkB,EAAGC,EAAgB,CACzG,KAAKxB,sBAAsB+B,UAAU,EAAI,EACzC,IAAMC,EAAyC,CAC3CC,sBAAuB,GACvBC,sBAAuB,GACvBC,2BAA4B,GAC5BC,mBAAoB,GACpBC,sBAAuB,GACvBC,oBAAqB,GACrBC,mBAAoB,IAExB,KAAKpC,6BAA6BqC,6CAA6CV,EAAcP,CAAe,EAAEP,UAAWyB,GAAyB,CAC9I,KAAKpC,wBAAwBqC,4BAA4BrB,EAAY,CAACoB,EAAsBE,cAAef,EAAG,EAAGI,CAAa,EAAEhB,UAAW4B,GAAY,CACnJ,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,IAAK,CACpB,IAAMC,EAASH,EAAOG,OAEhBC,EAAaD,EAAOE,MAAMF,EAAOG,QAAQ,GAAG,EAAI,CAAC,EACvD,KAAKnD,sBAAsBoD,mBAAmBtB,EAAcP,EAAiBC,EAASyB,CAAU,CACpG,EACAJ,EAAOQ,QAAU,IAAK,CAClB,KAAK5C,aAAa6C,MAAM,qDAAqD,CACjF,EACAT,EAAOU,cAAcX,EAASY,IAAK,CACvC,CAAC,CACL,CAAC,CACL,4CAtFSzD,EAAsB,6BAAtBA,EAAsB0D,QAAtB1D,EAAsB2D,UAAAC,WADT,MAAM,CAAA,SACnB5D,CAAsB,GAAA",
  "names": ["OrionAssessmentService", "orionConnectorService", "inject", "OrionConnectorService", "programmingSubmissionService", "ProgrammingSubmissionService", "repositoryExportService", "ProgrammingAssessmentRepoExportService", "manualAssessmentService", "ProgrammingAssessmentManualResultService", "alertService", "AlertService", "orionState", "activeSubmissionId", "undefined", "constructor", "state", "subscribe", "cloning", "cancelAssessment", "__spreadValues", "downloadSubmissionInOrion", "exerciseId", "submission", "correctionRound", "testRun", "getSubmissionWithoutAssessment", "newSubmission", "sendSubmissionToOrionCancellable", "id", "sendSubmissionToOrion", "submissionId", "isCloning", "exportOptions", "exportAllParticipants", "filterLateSubmissions", "excludePracticeSubmissions", "addParticipantName", "combineStudentCommits", "anonymizeRepository", "normalizeCodeStyle", "lockAndGetProgrammingSubmissionParticipation", "programmingSubmission", "exportReposByParticipations", "participation", "response", "reader", "FileReader", "onloadend", "result", "base64data", "slice", "indexOf", "downloadSubmission", "onerror", "error", "readAsDataURL", "body", "factory", "\u0275fac", "providedIn"]
}
