{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/exam-management.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { ExamUserDTO } from 'app/entities/exam/exam-user-dto.model';\r\nimport { ExamUserAttendanceCheckDTO } from 'app/entities/exam/exam-users-attendance-check-dto.model';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { StudentDTO } from 'app/entities/student-dto.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { ExamInformationDTO } from 'app/entities/exam/exam-information.model';\r\nimport { ExamChecklist } from 'app/entities/exam/exam-checklist.model';\r\nimport { StatsForDashboard } from 'app/course/dashboards/stats-for-dashboard.model';\r\nimport { Submission, reconnectSubmissions } from 'app/entities/submission.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\nimport { ExamExerciseStartPreparationStatus } from 'app/exam/manage/student-exams/student-exams.component';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ExamWideAnnouncementEvent } from 'app/exam/participate/exam-participation-live-events.service';\r\nimport { ExamDeletionSummaryDTO } from 'app/entities/exam-deletion-summary.model';\r\n\r\ntype EntityResponseType = HttpResponse<Exam>;\r\ntype EntityArrayResponseType = HttpResponse<Exam[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExamManagementService {\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n    private entityTitleService = inject(EntityTitleService);\r\n\r\n    public resourceUrl = 'api/exam/courses';\r\n    public adminResourceUrl = 'api/exam/admin/courses';\r\n\r\n    /**\r\n     * Create an exam on the server using a POST request.\r\n     * @param courseId The course id.\r\n     * @param exam The exam to create.\r\n     */\r\n    create(courseId: number, exam: Exam): Observable<EntityResponseType> {\r\n        const copy = ExamManagementService.convertExamDatesFromClient(exam);\r\n        return this.http\r\n            .post<Exam>(`${this.resourceUrl}/${courseId}/exams`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Update an exam on the server using a PUT request.\r\n     * @param courseId The course id.\r\n     * @param exam The exam to update.\r\n     */\r\n    update(courseId: number, exam: Exam): Observable<EntityResponseType> {\r\n        const copy = ExamManagementService.convertExamDatesFromClient(exam);\r\n        return this.http\r\n            .put<Exam>(`${this.resourceUrl}/${courseId}/exams`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Update the working time of an exam on the server using a PATCH request.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param workingTimeChange The amount of time in seconds by which the working time should be increased or decreased. It can be positive or negative, but must not be 0.\r\n     */\r\n    updateWorkingTime(courseId: number, examId: number, workingTimeChange: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .patch(`${this.resourceUrl}/${courseId}/exams/${examId}/working-time`, workingTimeChange, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    createAnnouncement(courseId: number, examId: number, content: string): Observable<ExamWideAnnouncementEvent> {\r\n        return this.http.post<ExamWideAnnouncementEvent>(`${this.resourceUrl}/${courseId}/exams/${examId}/announcements`, content, { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<ExamWideAnnouncementEvent>) => {\r\n                const event = res.body!;\r\n                event.createdDate = convertDateFromServer(event.createdDate)!;\r\n                return event;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Imports an exam on the server using a PUT request.\r\n     * @param courseId The course id into which the exam should be imported\r\n     * @param exam The exam with exercises to import.\r\n     */\r\n    import(courseId: number, exam: Exam): Observable<EntityResponseType> {\r\n        const copy = ExamManagementService.convertExamDatesFromClient(exam);\r\n        return this.http\r\n            .post<Exam>(`${this.resourceUrl}/${courseId}/exam-import`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Imports an exam on the server using a PUT request.\r\n     * @param courseId The course id into which the exercise groups should be imported\r\n     * @param examId The exam id to which the exercise groups should be added\r\n     * @param exerciseGroups the exercise groups to be added to the exam\r\n     */\r\n    importExerciseGroup(courseId: number, examId: number, exerciseGroups: ExerciseGroup[]): Observable<HttpResponse<ExerciseGroup[]>> {\r\n        return this.http.post<ExerciseGroup[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/import-exercise-group`, exerciseGroups, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find an exam on the server using a GET request.\r\n     * @param courseId The course id.\r\n     * @param examId The id of the exam to get.\r\n     * @param withStudents Boolean flag whether to fetch all students registered for the exam\r\n     * @param withExerciseGroups Boolean flag whether to fetch all exercise groups of the exam\r\n     */\r\n    find(courseId: number, examId: number, withStudents = false, withExerciseGroups = false): Observable<EntityResponseType> {\r\n        const options = createRequestOption({ withStudents, withExerciseGroups });\r\n        return this.http\r\n            .get<Exam>(`${this.resourceUrl}/${courseId}/exams/${examId}`, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find an exam on the server using a GET request with exercises for the exam import\r\n     * @param examId The id of the exam to get.\r\n     */\r\n    findWithExercisesAndWithoutCourseId(examId: number): Observable<EntityResponseType> {\r\n        return this.http.get<Exam>(`api/exam/exams/${examId}`, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find all scores of an exam.\r\n     * @param courseId The id of the course.\r\n     * @param examId The id of the exam.\r\n     */\r\n    getExamScores(courseId: number, examId: number): Observable<HttpResponse<ExamScoreDTO>> {\r\n        return this.http.get<ExamScoreDTO>(`${this.resourceUrl}/${courseId}/exams/${examId}/scores`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the exam statistics used within the instructor exam checklist\r\n     * @param courseId The id of the course.\r\n     * @param examId The id of the exam.\r\n     */\r\n    getExamStatistics(courseId: number, examId: number): Observable<HttpResponse<ExamChecklist>> {\r\n        return this.http.get<ExamChecklist>(`${this.resourceUrl}/${courseId}/exams/${examId}/statistics`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * returns the stats of the exam with the provided unique identifiers for the assessment dashboard\r\n     * @param courseId - the id of the course\r\n     * @param examId   - the id of the exam\r\n     */\r\n    getStatsForExamAssessmentDashboard(courseId: number, examId: number): Observable<HttpResponse<StatsForDashboard>> {\r\n        return this.http.get<StatsForDashboard>(`${this.resourceUrl}/${courseId}/exams/${examId}/stats-for-exam-assessment-dashboard`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find all exams for the given course.\r\n     * @param courseId The course id.\r\n     */\r\n    findAllExamsForCourse(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Exam[]>(`${this.resourceUrl}/${courseId}/exams`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processExamArrayResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find all exams where the in the course they are conducted the user has instructor rights\r\n     * @param courseId The course id where the quiz should be created\r\n     */\r\n    findAllExamsAccessibleToUser(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Exam[]>(`${this.resourceUrl}/${courseId}/exams-for-user`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processExamArrayResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find all exams that are held today and in the future.\r\n     */\r\n    findAllCurrentAndUpcomingExams(): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Exam[]>(`${this.adminResourceUrl}/upcoming-exams`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processExamArrayResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Returns the exam with the provided unique identifier for the assessment dashboard\r\n     * @param courseId - the id of the course\r\n     * @param examId - the id of the exam\r\n     * @param isTestRun - boolean to determine whether it is a test run\r\n     */\r\n    getExamWithInterestingExercisesForAssessmentDashboard(courseId: number, examId: number, isTestRun: boolean): Observable<EntityResponseType> {\r\n        let url: string;\r\n        if (isTestRun) {\r\n            url = `${this.resourceUrl}/${courseId}/exams/${examId}/exam-for-test-run-assessment-dashboard`;\r\n        } else {\r\n            url = `${this.resourceUrl}/${courseId}/exams/${examId}/exam-for-assessment-dashboard`;\r\n        }\r\n        return this.http.get<Exam>(url, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    getLatestIndividualEndDateOfExam(courseId: number, examId: number): Observable<HttpResponse<ExamInformationDTO>> {\r\n        const url = `${this.resourceUrl}/${courseId}/exams/${examId}/latest-end-date`;\r\n        return this.http.get<ExamInformationDTO>(url, { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<ExamInformationDTO>) => {\r\n                res.body!.latestIndividualEndDate = dayjs(res.body!.latestIndividualEndDate);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a summary for the exam providing information potentially relevant for the deletion.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     */\r\n    getDeletionSummary(courseId: number, examId: number): Observable<HttpResponse<ExamDeletionSummaryDTO>> {\r\n        return this.http.get<ExamDeletionSummaryDTO>(`${this.resourceUrl}/${courseId}/exams/${examId}/deletion-summary`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Delete an exam on the server using a DELETE request.\r\n     * @param courseId The course id.\r\n     * @param examId The id of the exam to delete.\r\n     */\r\n    delete(courseId: number, examId: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${courseId}/exams/${examId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Add a student to the registered users for an exam\r\n     * @param courseId The course id.\r\n     * @param examId The id of the exam to which to add the student\r\n     * @param studentLogin Login of the student\r\n     */\r\n    addStudentToExam(courseId: number, examId: number, studentLogin: string): Observable<HttpResponse<StudentDTO>> {\r\n        return this.http.post<StudentDTO>(`${this.resourceUrl}/${courseId}/exams/${examId}/students/${studentLogin}`, undefined, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Add students to the registered users for an exam\r\n     * @param courseId The course id.\r\n     * @param examId The id of the exam to which to add the student\r\n     * @param studentDtos Student DTOs of student to add to the exam\r\n     * @return studentDtos of students that were not found in the system\r\n     */\r\n    addStudentsToExam(courseId: number, examId: number, studentDtos: ExamUserDTO[]): Observable<HttpResponse<StudentDTO[]>> {\r\n        return this.http.post<StudentDTO[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/students`, studentDtos, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Add all students of the course to the exam\r\n     * @param courseId\r\n     * @param examId\r\n     * @return studentDtos of students that were not found in the system\r\n     */\r\n    addAllStudentsOfCourseToExam(courseId: number, examId: number): Observable<HttpResponse<void>> {\r\n        return this.http.post<HttpResponse<void>>(`${this.resourceUrl}/${courseId}/exams/${examId}/register-course-students`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Parse pdf file with student images and save them\r\n     * @param courseId\r\n     * @param examId\r\n     * @param formData\r\n     * @return matriculation number of students that were not found in the system\r\n     */\r\n    saveImages(courseId: number, examId: number, formData: FormData): Observable<HttpResponse<any[]>> {\r\n        return this.http.post<any[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/exam-users-save-images`, formData, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Verify student's attendance. It will return true if student's attendance was successfully verified. False otherwise\r\n     * @param courseId\r\n     * @param examId\r\n     * @return boolean indicating if the student's attendance was checked\r\n     */\r\n    isAttendanceChecked(courseId: number, examId: number): Observable<HttpResponse<boolean>> {\r\n        return this.http.get<boolean>(`${this.resourceUrl}/${courseId}/exams/${examId}/attendance`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Verify exam user attendance check. It will return exam users that started the exam but did not sign.\r\n     * @param courseId\r\n     * @param examId\r\n     * @return matriculation number of students that were not found in the system\r\n     */\r\n    verifyExamUserAttendance(courseId: number, examId: number): Observable<HttpResponse<ExamUserAttendanceCheckDTO[]>> {\r\n        return this.http.get<ExamUserAttendanceCheckDTO[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/verify-exam-users`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Remove a student from the registered users for an exam\r\n     * @param courseId The course id\r\n     * @param examId The id of the exam from which to remove the student\r\n     * @param studentLogin Login of the student\r\n     * @param withParticipationsAndSubmission\r\n     */\r\n    removeStudentFromExam(courseId: number, examId: number, studentLogin: string, withParticipationsAndSubmission = false): Observable<HttpResponse<any>> {\r\n        const options = createRequestOption({ withParticipationsAndSubmission });\r\n        return this.http.delete<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/students/${studentLogin}`, {\r\n            params: options,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove all students from an exam\r\n     * @param courseId The course id\r\n     * @param examId The id of the exam from which to remove the student\r\n     * @param withParticipationsAndSubmission if participations and Submissions should also be removed\r\n     */\r\n    removeAllStudentsFromExam(courseId: number, examId: number, withParticipationsAndSubmission = false) {\r\n        const options = createRequestOption({ withParticipationsAndSubmission });\r\n        return this.http.delete<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/students`, {\r\n            params: options,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate all student exams for all registered students of the exam.\r\n     * @param courseId\r\n     * @param examId\r\n     * @returns a list with the generated student exams\r\n     */\r\n    generateStudentExams(courseId: number, examId: number): Observable<HttpResponse<StudentExam[]>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/generate-student-exams`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Generate a test run student exam based on the testRunConfiguration.\r\n     * @param courseId the id of the course\r\n     * @param examId the id of the exam\r\n     * @param testRunConfiguration the desired configuration\r\n     * @returns the created test run\r\n     */\r\n    createTestRun(courseId: number, examId: number, testRunConfiguration: StudentExam): Observable<HttpResponse<StudentExam>> {\r\n        return this.http.post<StudentExam>(`${this.resourceUrl}/${courseId}/exams/${examId}/test-run`, testRunConfiguration, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Delete a test run\r\n     * @param courseId the id of the course\r\n     * @param examId the id of the exam\r\n     * @param testRunId the id of the test run\r\n     */\r\n    deleteTestRun(courseId: number, examId: number, testRunId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${courseId}/exams/${examId}/test-run/${testRunId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find all the test runs for the exam\r\n     * @param courseId the id of the course\r\n     * @param examId the id of the exam\r\n     */\r\n    findAllTestRunsForExam(courseId: number, examId: number): Observable<HttpResponse<StudentExam[]>> {\r\n        return this.http.get<StudentExam[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/test-runs`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Generate missing student exams for newly added students of the exam.\r\n     * @param courseId\r\n     * @param examId\r\n     * @returns a list with the generated student exams\r\n     */\r\n    generateMissingStudentExams(courseId: number, examId: number): Observable<HttpResponse<StudentExam[]>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/generate-missing-student-exams`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Start all the exercises for all the student exams belonging to the exam\r\n     * @param courseId course to which the exam belongs\r\n     * @param examId exam to which the student exams belong\r\n     */\r\n    startExercises(courseId: number, examId: number): Observable<HttpResponse<void>> {\r\n        return this.http.post<void>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/start-exercises`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the current progress of starting exercises for all students\r\n     * @param courseId course to which the exam belongs\r\n     * @param examId exam to which the student exams belong\r\n     * @returns an object containing the status\r\n     */\r\n    getExerciseStartStatus(courseId: number, examId: number): Observable<HttpResponse<ExamExerciseStartPreparationStatus>> {\r\n        return this.http\r\n            .get<ExamExerciseStartPreparationStatus>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/start-exercises/status`, { observe: 'response' })\r\n            .pipe(\r\n                tap((res: HttpResponse<ExamExerciseStartPreparationStatus>) => {\r\n                    if (res.body) {\r\n                        res.body.startedAt = convertDateFromServer(res.body.startedAt);\r\n                    }\r\n                }),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Evaluate all the quiz exercises belonging to the exam\r\n     * @param courseId id of the course to which the exam belongs\r\n     * @param examId id of the exam for which the quiz exercises should be evaluated\r\n     * @returns number of evaluated exercises\r\n     */\r\n    evaluateQuizExercises(courseId: number, examId: number): Observable<HttpResponse<number>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/evaluate-quiz-exercises`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Assess all the modeling and text participations belonging to unsubmitted student exams\r\n     * @param courseId id of the course to which the exam belongs\r\n     * @param examId id of the exam\r\n     * @returns number of evaluated participations\r\n     */\r\n    assessUnsubmittedExamModelingAndTextParticipations(courseId: number, examId: number): Observable<HttpResponse<number>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/student-exams/assess-unsubmitted-and-empty-student-exams`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Unlock all the programming exercises belonging to the exam\r\n     * @param courseId id of the course to which the exam belongs\r\n     * @param examId id of the exam for which the programming exercises should be unlocked\r\n     * @returns number of exercises for which the repositories were unlocked\r\n     */\r\n    unlockAllRepositories(courseId: number, examId: number): Observable<HttpResponse<number>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/unlock-all-repositories`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Lock all the programming exercises belonging to the exam\r\n     * @param courseId id of the course to which the exam belongs\r\n     * @param examId id of the exam for which the programming exercises should be locked\r\n     * @returns number of exercises for which the repositories were locked\r\n     */\r\n    lockAllRepositories(courseId: number, examId: number): Observable<HttpResponse<number>> {\r\n        return this.http.post<any>(`${this.resourceUrl}/${courseId}/exams/${examId}/lock-all-repositories`, {}, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Save the exercise groups of an exam in the given order.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param exerciseGroups List of exercise groups.\r\n     */\r\n    updateOrder(courseId: number, examId: number, exerciseGroups: ExerciseGroup[]): Observable<HttpResponse<ExerciseGroup[]>> {\r\n        return this.http.put<ExerciseGroup[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercise-groups-order`, exerciseGroups, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Resets an Exam with examId by deleting all its studentExams and participations.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     */\r\n    reset(courseId: number, examId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .delete<Exam>(`${this.resourceUrl}/${courseId}/exams/${examId}/reset`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExamResponseFromServer(res)));\r\n    }\r\n\r\n    public static convertExamDatesFromClient(exam: Exam): Exam {\r\n        return Object.assign({}, exam, {\r\n            startDate: convertDateFromClient(exam.startDate),\r\n            endDate: convertDateFromClient(exam.endDate),\r\n            visibleDate: convertDateFromClient(exam.visibleDate),\r\n            publishResultsDate: convertDateFromClient(exam.publishResultsDate),\r\n            examStudentReviewStart: convertDateFromClient(exam.examStudentReviewStart),\r\n            examStudentReviewEnd: convertDateFromClient(exam.examStudentReviewEnd),\r\n        });\r\n    }\r\n\r\n    private processExamResponseFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.convertExamFromServerAndSendTitles(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private processExamArrayResponseFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach(this.convertExamFromServerAndSendTitles.bind(this));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertExamFromServerAndSendTitles(exam: Exam) {\r\n        exam.startDate = convertDateFromServer(exam.startDate);\r\n        exam.endDate = convertDateFromServer(exam.endDate);\r\n        exam.visibleDate = convertDateFromServer(exam.visibleDate);\r\n        exam.publishResultsDate = convertDateFromServer(exam.publishResultsDate);\r\n        exam.examStudentReviewStart = convertDateFromServer(exam.examStudentReviewStart);\r\n        exam.examStudentReviewEnd = convertDateFromServer(exam.examStudentReviewEnd);\r\n\r\n        if (exam.course) {\r\n            this.accountService.setAccessRightsForCourse(exam.course);\r\n        }\r\n\r\n        this.sendTitlesToEntityTitleService(exam);\r\n    }\r\n\r\n    findAllLockedSubmissionsOfExam(courseId: number, examId: number) {\r\n        return this.http.get<Submission[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/locked-submissions`, { observe: 'response' }).pipe(\r\n            filter((res) => !!res.body),\r\n            tap((res) => reconnectSubmissions(res.body!)),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Downloads the exam archive of the specified examId. Returns an error\r\n     * if the archive does not exist.\r\n     * @param courseId\r\n     * @param examId The id of the exam\r\n     */\r\n    downloadExamArchive(courseId: number, examId: number): void {\r\n        const url = `${this.resourceUrl}/${courseId}/exams/${examId}/download-archive`;\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    /**\r\n     * Archives the exam of the specified examId.\r\n     * @param courseId the id of the course of the exam\r\n     * @param examId The id of the exam to archive\r\n     */\r\n    archiveExam(courseId: number, examId: number): Observable<HttpResponse<any>> {\r\n        return this.http.put(`${this.resourceUrl}/${courseId}/exams/${examId}/archive`, {}, { observe: 'response' });\r\n    }\r\n\r\n    cleanupExam(courseId: number, examId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${courseId}/exams/${examId}/cleanup`, { observe: 'response' });\r\n    }\r\n\r\n    private sendTitlesToEntityTitleService(exam: Exam | undefined | null) {\r\n        this.entityTitleService.setTitle(EntityType.EXAM, [exam?.id], exam?.title);\r\n    }\r\n\r\n    getExercisesWithPotentialPlagiarismForExam(courseId: number, examId: number): Observable<Exercise[]> {\r\n        return this.http.get<Exercise[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercises-with-potential-plagiarism`);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ExamManagementService", "http", "inject", "HttpClient", "accountService", "AccountService", "entityTitleService", "EntityTitleService", "resourceUrl", "adminResourceUrl", "create", "courseId", "exam", "copy", "convertExamDatesFromClient", "post", "observe", "pipe", "map", "res", "processExamResponseFromServer", "update", "put", "updateWorkingTime", "examId", "workingTimeChange", "patch", "createAnnouncement", "content", "event", "body", "createdDate", "convertDateFromServer", "import", "importExerciseGroup", "exerciseGroups", "find", "withStudents", "withExerciseGroups", "options", "createRequestOption", "get", "params", "findWithExercisesAndWithoutCourseId", "getExamScores", "getExamStatistics", "getStatsForExamAssessmentDashboard", "findAllExamsForCourse", "processExamArrayResponseFromServer", "findAllExamsAccessibleToUser", "findAllCurrentAndUpcomingExams", "getExamWithInterestingExercisesForAssessmentDashboard", "isTestRun", "url", "getLatestIndividualEndDateOfExam", "latestIndividualEndDate", "dayjs", "getDeletionSummary", "delete", "addStudentToExam", "studentLogin", "undefined", "addStudentsToExam", "studentDtos", "addAllStudentsOfCourseToExam", "saveImages", "formData", "isAttendanceChecked", "verifyExamUserAttendance", "removeStudentFromExam", "withParticipationsAndSubmission", "removeAllStudentsFromExam", "generateStudentExams", "createTestRun", "testRunConfiguration", "deleteTestRun", "testRunId", "findAllTestRunsForExam", "generateMissingStudentExams", "startExercises", "getExerciseStartStatus", "tap", "startedAt", "evaluateQuizExercises", "assessUnsubmittedExamModelingAndTextParticipations", "unlockAllRepositories", "lockAllRepositories", "updateOrder", "reset", "Object", "assign", "startDate", "convertDateFromClient", "endDate", "visibleDate", "publishResultsDate", "examStudentReviewStart", "examStudentReviewEnd", "convertExamFromServerAndSendTitles", "forEach", "bind", "course", "setAccessRightsForCourse", "sendTitlesToEntityTitleService", "findAllLockedSubmissionsOfExam", "filter", "reconnectSubmissions", "downloadExamArchive", "window", "open", "archiveExam", "cleanupExam", "setTitle", "EntityType", "EXAM", "id", "title", "getExercisesWithPotentialPlagiarismForExam", "factory", "\u0275fac", "providedIn"]
}
