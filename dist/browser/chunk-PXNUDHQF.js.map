{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/user-settings.directive.ts"],
  "sourcesContent": ["import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Directive, OnInit, inject } from '@angular/core';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { Setting, UserSettingsStructure } from 'app/shared/user-settings/user-settings.model';\r\nimport { UserSettingsService } from 'app/shared/user-settings/user-settings.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\n/**\r\n * Is used as the abstract user-settings \"parent\" with all the necessary basic logic for other \"child\" components to implement/inherit from.\r\n */\r\n@Directive()\r\nexport abstract class UserSettingsDirective implements OnInit {\r\n    protected userSettingsService = inject(UserSettingsService);\r\n    protected changeDetector = inject(ChangeDetectorRef);\r\n    private alertService = inject(AlertService);\r\n\r\n    // HTML template related\r\n    settingsChanged = false;\r\n    currentUser: User;\r\n\r\n    // userSettings logic related\r\n    userSettingsCategory: UserSettingsCategory;\r\n    changeEventMessage: string;\r\n    userSettings: UserSettingsStructure<Setting>;\r\n    settings: Array<Setting>;\r\n    page = 0;\r\n    error?: string;\r\n\r\n    ngOnInit(): void {\r\n        this.alertService.closeAll();\r\n        this.loadSetting();\r\n    }\r\n\r\n    // methods related to loading\r\n\r\n    /**\r\n     * Fetches the settings based on the settings category, updates the currently loaded userSettingsStructure, individual settings, and HTML template\r\n     */\r\n    protected loadSetting(): void {\r\n        this.userSettingsService.loadSettings(this.userSettingsCategory).subscribe({\r\n            next: (res: HttpResponse<Setting[]>) => {\r\n                this.userSettings = this.userSettingsService.loadSettingsSuccessAsSettingsStructure(res.body!, this.userSettingsCategory);\r\n                this.settings = this.userSettingsService.extractIndividualSettingsFromSettingsStructure(this.userSettings);\r\n                this.changeDetector.detectChanges();\r\n                this.alertService.closeAll();\r\n            },\r\n            error: (res: HttpErrorResponse) => this.onError(res),\r\n        });\r\n    }\r\n\r\n    // methods related to saving\r\n\r\n    /**\r\n     * Is invoked by clicking the save button\r\n     * Sends all settings which were changed by the user to the server for saving\r\n     */\r\n    public saveSettings() {\r\n        this.userSettingsService.saveSettings(this.settings, this.userSettingsCategory).subscribe({\r\n            next: (res: HttpResponse<Setting[]>) => {\r\n                this.userSettings = this.userSettingsService.saveSettingsSuccess(this.userSettings, res.body!);\r\n                this.settings = this.userSettingsService.extractIndividualSettingsFromSettingsStructure(this.userSettings);\r\n                this.finishSaving();\r\n            },\r\n            error: (res: HttpErrorResponse) => this.onError(res),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finalizes the saving process by setting the HTML template back to an unchanged state (e.g. hides save-button),\r\n     * informing the user by sending out an alert that the new settings were successfully saved,\r\n     * and propagates this change to other components and services which are affected by these changed settings\r\n     */\r\n    protected finishSaving() {\r\n        this.createApplyChangesEvent();\r\n        this.settingsChanged = false;\r\n        this.alertService.closeAll();\r\n        this.alertService.success('artemisApp.userSettings.saveSettingsSuccessAlert');\r\n    }\r\n\r\n    /**\r\n     * Invokes the sendApplyChangesEvent method in userSettingsService and inserts the custom changeEventMessage\r\n     * This message is set in the ngOnInit() of a \"child\"-settings.component\r\n     */\r\n    protected createApplyChangesEvent(): void {\r\n        this.userSettingsService.sendApplyChangesEvent(this.changeEventMessage);\r\n    }\r\n\r\n    // auxiliary methods\r\n\r\n    /**\r\n     * Send out an error alert if an error occurred\r\n     * @param httpErrorResponse which contains the error information\r\n     */\r\n    protected onError(httpErrorResponse: HttpErrorResponse) {\r\n        const error = httpErrorResponse.error;\r\n        if (error) {\r\n            this.alertService.error(error.message, error.params);\r\n        } else {\r\n            this.alertService.error('error.unexpectedError', {\r\n                error: httpErrorResponse.message,\r\n            });\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "yIAYA,IAAsBA,GAAqB,IAAA,CAArC,MAAgBA,CAAqB,CAC7BC,oBAAsBC,EAAOC,CAAmB,EAChDC,eAAiBF,EAAOG,CAAiB,EAC3CC,aAAeJ,EAAOK,CAAY,EAG1CC,gBAAkB,GAClBC,YAGAC,qBACAC,mBACAC,aACAC,SACAC,KAAO,EACPC,MAEAC,UAAQ,CACJ,KAAKV,aAAaW,SAAQ,EAC1B,KAAKC,YAAW,CACpB,CAOUA,aAAW,CACjB,KAAKjB,oBAAoBkB,aAAa,KAAKT,oBAAoB,EAAEU,UAAU,CACvEC,KAAOC,GAAgC,CACnC,KAAKV,aAAe,KAAKX,oBAAoBsB,uCAAuCD,EAAIE,KAAO,KAAKd,oBAAoB,EACxH,KAAKG,SAAW,KAAKZ,oBAAoBwB,+CAA+C,KAAKb,YAAY,EACzG,KAAKR,eAAesB,cAAa,EACjC,KAAKpB,aAAaW,SAAQ,CAC9B,EACAF,MAAQO,GAA2B,KAAKK,QAAQL,CAAG,EACtD,CACL,CAQOM,cAAY,CACf,KAAK3B,oBAAoB2B,aAAa,KAAKf,SAAU,KAAKH,oBAAoB,EAAEU,UAAU,CACtFC,KAAOC,GAAgC,CACnC,KAAKV,aAAe,KAAKX,oBAAoB4B,oBAAoB,KAAKjB,aAAcU,EAAIE,IAAK,EAC7F,KAAKX,SAAW,KAAKZ,oBAAoBwB,+CAA+C,KAAKb,YAAY,EACzG,KAAKkB,aAAY,CACrB,EACAf,MAAQO,GAA2B,KAAKK,QAAQL,CAAG,EACtD,CACL,CAOUQ,cAAY,CAClB,KAAKC,wBAAuB,EAC5B,KAAKvB,gBAAkB,GACvB,KAAKF,aAAaW,SAAQ,EAC1B,KAAKX,aAAa0B,QAAQ,kDAAkD,CAChF,CAMUD,yBAAuB,CAC7B,KAAK9B,oBAAoBgC,sBAAsB,KAAKtB,kBAAkB,CAC1E,CAQUgB,QAAQO,EAAoC,CAClD,IAAMnB,EAAQmB,EAAkBnB,MAC5BA,EACA,KAAKT,aAAaS,MAAMA,EAAMoB,QAASpB,EAAMqB,MAAM,EAEnD,KAAK9B,aAAaS,MAAM,wBAAyB,CAC7CA,MAAOmB,EAAkBC,QAC5B,CAET,4CA3FkBnC,EAAqB,2BAArBA,CAAqB,CAAA,SAArBA,CAAqB,GAAA",
  "names": ["UserSettingsDirective", "userSettingsService", "inject", "UserSettingsService", "changeDetector", "ChangeDetectorRef", "alertService", "AlertService", "settingsChanged", "currentUser", "userSettingsCategory", "changeEventMessage", "userSettings", "settings", "page", "error", "ngOnInit", "closeAll", "loadSetting", "loadSettings", "subscribe", "next", "res", "loadSettingsSuccessAsSettingsStructure", "body", "extractIndividualSettingsFromSettingsStructure", "detectChanges", "onError", "saveSettings", "saveSettingsSuccess", "finishSaving", "createApplyChangesEvent", "success", "sendApplyChangesEvent", "httpErrorResponse", "message", "params"]
}
