{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-competencies/course-competencies.component.ts", "src/main/webapp/app/overview/course-competencies/course-competencies.component.html"],
  "sourcesContent": ["import { Component, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Competency, CompetencyJol, CourseCompetencyType, compareSoftDueDate, getMastery } from 'app/entities/competency.model';\r\nimport { Subscription, forkJoin, of } from 'rxjs';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { FeatureToggle, FeatureToggleService } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { CourseCompetencyService } from 'app/course/competencies/course-competency.service';\r\nimport { CompetencyCardComponent } from '../../course/competencies/competency-card/competency-card.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-competencies',\r\n    templateUrl: './course-competencies.component.html',\r\n    styleUrls: ['../course-overview.scss'],\r\n    imports: [CompetencyCardComponent, FaIconComponent, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class CourseCompetenciesComponent implements OnInit, OnDestroy {\r\n    private featureToggleService = inject(FeatureToggleService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private courseCompetencyService = inject(CourseCompetencyService);\r\n\r\n    @Input()\r\n    courseId: number;\r\n\r\n    isLoading = false;\r\n    course?: Course;\r\n    competencies: Competency[] = [];\r\n    prerequisites: Competency[] = [];\r\n    parentParamSubscription: Subscription;\r\n    judgementOfLearningMap: { [key: number]: { current: CompetencyJol; prior?: CompetencyJol } } = {};\r\n    promptForJolRatingMap: { [key: number]: boolean } = {};\r\n\r\n    isCollapsed = true;\r\n    faAngleDown = faAngleDown;\r\n    faAngleUp = faAngleUp;\r\n\r\n    private dashboardFeatureToggleActiveSubscription: Subscription;\r\n    dashboardFeatureActive = false;\r\n\r\n    ngOnInit(): void {\r\n        const courseIdParams$ = this.activatedRoute.parent?.parent?.params;\r\n        if (courseIdParams$) {\r\n            this.parentParamSubscription = courseIdParams$.subscribe((params) => {\r\n                this.courseId = Number(params.courseId);\r\n            });\r\n        }\r\n\r\n        this.course = this.courseStorageService.getCourse(this.courseId);\r\n\r\n        this.dashboardFeatureToggleActiveSubscription = this.featureToggleService.getFeatureToggleActive(FeatureToggle.StudentCourseAnalyticsDashboard).subscribe((active) => {\r\n            this.dashboardFeatureActive = active;\r\n            this.loadData();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.dashboardFeatureToggleActiveSubscription?.unsubscribe();\r\n        this.parentParamSubscription?.unsubscribe();\r\n    }\r\n\r\n    get countCompetencies() {\r\n        return this.competencies.length;\r\n    }\r\n\r\n    get countMasteredCompetencies() {\r\n        return this.competencies.filter((competency) => getMastery(competency.userProgress?.first()) >= (competency.masteryThreshold ?? 100)).length;\r\n    }\r\n\r\n    get countPrerequisites() {\r\n        return this.prerequisites.length;\r\n    }\r\n\r\n    get judgementOfLearningEnabled() {\r\n        return (this.course?.studentCourseAnalyticsDashboardEnabled ?? false) && this.dashboardFeatureActive;\r\n    }\r\n\r\n    /**\r\n     * Loads all prerequisites and competencies for the course\r\n     */\r\n    loadData() {\r\n        this.isLoading = true;\r\n\r\n        const courseCompetencyObservable = this.courseCompetencyService.getAllForCourse(this.courseId, true);\r\n        const competencyJolObservable = this.judgementOfLearningEnabled ? this.courseCompetencyService.getJoLAllForCourse(this.courseId) : of(undefined);\r\n\r\n        forkJoin([courseCompetencyObservable, competencyJolObservable]).subscribe({\r\n            next: ([courseCompetencies, judgementOfLearningMap]) => {\r\n                const courseCompetenciesResponse = courseCompetencies.body ?? [];\r\n                this.competencies = courseCompetenciesResponse.filter((competency) => competency.type === CourseCompetencyType.COMPETENCY).sort(compareSoftDueDate);\r\n                this.prerequisites = courseCompetenciesResponse.filter((competency) => competency.type === CourseCompetencyType.PREREQUISITE);\r\n\r\n                if (judgementOfLearningMap !== undefined) {\r\n                    const competenciesMap: { [key: number]: Competency } = Object.fromEntries(this.competencies.map((competency) => [competency.id, competency]));\r\n                    this.judgementOfLearningMap = Object.fromEntries(\r\n                        Object.entries((judgementOfLearningMap.body ?? {}) as { [key: number]: { current: CompetencyJol; prior?: CompetencyJol } }).filter(([key, value]) => {\r\n                            const progress = competenciesMap[Number(key)]?.userProgress?.first();\r\n                            return value.current.competencyProgress === (progress?.progress ?? 0) && value.current.competencyConfidence === (progress?.confidence ?? 1);\r\n                        }),\r\n                    );\r\n                    this.promptForJolRatingMap = Object.fromEntries(\r\n                        this.competencies.map((competency) => [competency.id, CompetencyJol.shouldPromptForJol(competency, competency.userProgress?.first(), this.competencies)]),\r\n                    );\r\n                }\r\n                // Also update the course, so we do not need to fetch again next time\r\n                if (this.course) {\r\n                    this.course.competencies = this.competencies;\r\n                    this.course.prerequisites = this.prerequisites;\r\n                }\r\n                this.isLoading = false;\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => onError(this.alertService, errorResponse),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculates a unique identity for each competency card shown in the component\r\n     * @param index The index in the list\r\n     * @param competency The competency of the current iteration\r\n     */\r\n    identify(index: number, competency: Competency) {\r\n        return `${index}-${competency.id}`;\r\n    }\r\n}\r\n", "<div class=\"row\">\r\n    <div class=\"col-12 col-lg-8\">\r\n        @if (countCompetencies > 0) {\r\n            <div class=\"mt-3 position-relative\">\r\n                <div class=\"exercise-row-container mb-3\">\r\n                    @for (competency of competencies; track identify(i, competency); let i = $index) {\r\n                        <jhi-competency-card\r\n                            [competency]=\"competency\"\r\n                            [courseId]=\"courseId\"\r\n                            [hideProgress]=\"\r\n                                judgementOfLearningEnabled &&\r\n                                competency.id !== undefined &&\r\n                                promptForJolRatingMap?.[competency.id] === true &&\r\n                                judgementOfLearningMap?.[competency.id] === undefined\r\n                            \"\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (countPrerequisites > 0) {\r\n            <div class=\"mt-3 position-relative\">\r\n                <div class=\"exercise-row-container mb-3\">\r\n                    <div class=\"control-label\" (click)=\"isCollapsed = !isCollapsed\">\r\n                        <fa-icon class=\"pe-3\" [icon]=\"isCollapsed ? faAngleDown : faAngleUp\" />\r\n                        <span>{{ 'artemisApp.prerequisite.title' | artemisTranslate }}: {{ countPrerequisites }}</span>\r\n                    </div>\r\n                    @if (!isCollapsed) {\r\n                        <div>\r\n                            @for (prerequisite of prerequisites; track identify(i, prerequisite); let i = $index) {\r\n                                <jhi-competency-card [competency]=\"prerequisite\" [courseId]=\"prerequisite.linkedCourseCompetency?.course?.id\" [isPrerequisite]=\"true\" />\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <div class=\"collapsed\"></div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n    <div class=\"col-12 col-lg-3 offset-lg-1\">\r\n        <h3 class=\"mt-3\" jhiTranslate=\"artemisApp.competency.table.panelHeader\"></h3>\r\n        <span class=\"badge bg-dark\">{{ countMasteredCompetencies }} / {{ countCompetencies }}</span> {{ 'artemisApp.competency.mastered' | artemisTranslate }}\r\n        <dl class=\"mt-3\">\r\n            <dt jhiTranslate=\"artemisApp.competency.progress\"></dt>\r\n            <dd jhiTranslate=\"artemisApp.competency.progressDescription\"></dd>\r\n            <dt jhiTranslate=\"artemisApp.competency.mastery\"></dt>\r\n            <dd jhiTranslate=\"artemisApp.competency.masteryDescription\"></dd>\r\n        </dl>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "competency_r1", "ctx_r1", "courseId", "judgementOfLearningEnabled", "id", "undefined", "promptForJolRatingMap", "judgementOfLearningMap", "\u0275\u0275elementStart", "\u0275\u0275repeaterCreate", "CourseCompetenciesComponent_Conditional_4_For_6_Template", "\u0275\u0275componentInstance", "identify", "\u0275\u0275elementEnd", "\u0275\u0275repeater", "competencies", "prerequisite_r4", "linkedCourseCompetency", "course", "CourseCompetenciesComponent_Conditional_5_Conditional_14_For_4_Template", "prerequisites", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "isCollapsed", "\u0275\u0275template", "CourseCompetenciesComponent_Conditional_5_Conditional_14_Template", "faAngleDown", "faAngleUp", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "countPrerequisites", "\u0275\u0275conditional", "CourseCompetenciesComponent", "featureToggleService", "inject", "FeatureToggleService", "activatedRoute", "ActivatedRoute", "alertService", "AlertService", "courseStorageService", "CourseStorageService", "courseCompetencyService", "CourseCompetencyService", "isLoading", "parentParamSubscription", "dashboardFeatureToggleActiveSubscription", "dashboardFeatureActive", "ngOnInit", "courseIdParams$", "parent", "params", "subscribe", "Number", "getCourse", "getFeatureToggleActive", "FeatureToggle", "StudentCourseAnalyticsDashboard", "active", "loadData", "ngOnDestroy", "unsubscribe", "countCompetencies", "length", "countMasteredCompetencies", "filter", "competency", "getMastery", "userProgress", "first", "masteryThreshold", "studentCourseAnalyticsDashboardEnabled", "courseCompetencyObservable", "getAllForCourse", "competencyJolObservable", "getJoLAllForCourse", "of", "forkJoin", "next", "courseCompetencies", "courseCompetenciesResponse", "body", "type", "CourseCompetencyType", "COMPETENCY", "sort", "compareSoftDueDate", "PREREQUISITE", "competenciesMap", "Object", "fromEntries", "map", "entries", "key", "value", "progress", "current", "competencyProgress", "competencyConfidence", "confidence", "CompetencyJol", "shouldPromptForJol", "error", "errorResponse", "onError", "index", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "CourseCompetenciesComponent_Conditional_4_Template", "CourseCompetenciesComponent_Conditional_5_Template", "\u0275\u0275textInterpolate1", "CompetencyCardComponent", "FaIconComponent", "TranslateDirective", "ArtemisTranslatePipe", "styles"]
}
