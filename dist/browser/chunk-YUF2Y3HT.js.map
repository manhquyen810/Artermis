{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/manage/modeling-exercise.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { ExerciseServicable, ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { ModelingPlagiarismResult } from 'app/exercises/shared/plagiarism/types/modeling/ModelingPlagiarismResult';\r\nimport { PlagiarismOptions } from 'app/exercises/shared/plagiarism/types/PlagiarismOptions';\r\nimport { downloadStream } from 'app/shared/util/download.util';\r\nimport { PlagiarismResultDTO } from 'app/exercises/shared/plagiarism/types/PlagiarismResultDTO';\r\n\r\nexport type EntityResponseType = HttpResponse<ModelingExercise>;\r\nexport type EntityArrayResponseType = HttpResponse<ModelingExercise[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ModelingExerciseService implements ExerciseServicable<ModelingExercise> {\r\n    private http = inject(HttpClient);\r\n    private exerciseService = inject(ExerciseService);\r\n\r\n    public resourceUrl = 'api/modeling/modeling-exercises';\r\n    public adminResourceUrl = 'api/modeling/admin/modeling-exercises';\r\n\r\n    constructor() {\r\n        const exerciseService = this.exerciseService;\r\n\r\n        this.exerciseService = exerciseService;\r\n    }\r\n\r\n    create(modelingExercise: ModelingExercise): Observable<EntityResponseType> {\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(modelingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .post<ModelingExercise>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    update(modelingExercise: ModelingExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(modelingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .put<ModelingExercise>(this.resourceUrl, copy, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    find(modelingExerciseId: number, withPlagiarismDetectionConfig: boolean = false): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ModelingExercise>(`${this.resourceUrl}/${modelingExerciseId}`, { observe: 'response', params: { withPlagiarismDetectionConfig: withPlagiarismDetectionConfig } })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    delete(modelingExerciseId: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete(`${this.resourceUrl}/${modelingExerciseId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Imports a modeling exercise by cloning the entity itself plus example solutions and example submissions\r\n     *\r\n     * @param adaptedSourceModelingExercise The exercise that should be imported, including adapted values for the\r\n     * new exercise. E.g. with another title than the original exercise. Old values that should get discarded\r\n     * (like the old ID) will be handled by the server.\r\n     */\r\n    import(adaptedSourceModelingExercise: ModelingExercise) {\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(adaptedSourceModelingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .post<ModelingExercise>(`${this.resourceUrl}/import/${adaptedSourceModelingExercise.id}`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Check for plagiarism\r\n     * @param exerciseId of the programming exercise\r\n     * @param options\r\n     */\r\n    checkPlagiarism(exerciseId: number, options?: PlagiarismOptions): Observable<PlagiarismResultDTO<ModelingPlagiarismResult>> {\r\n        return this.http\r\n            .get<PlagiarismResultDTO<ModelingPlagiarismResult>>(`${this.resourceUrl}/${exerciseId}/check-plagiarism`, { observe: 'response', params: { ...options?.toParams() } })\r\n            .pipe(map((response: HttpResponse<PlagiarismResultDTO<ModelingPlagiarismResult>>) => response.body!));\r\n    }\r\n\r\n    convertToPdf(model: string, filename: string): Observable<HttpResponse<Blob>> {\r\n        return this.http\r\n            .post('api/modeling/apollon/convert-to-pdf', { model }, { observe: 'response', responseType: 'blob' })\r\n            .pipe(tap((response: HttpResponse<Blob>) => downloadStream(response.body, 'application/pdf', filename)));\r\n    }\r\n\r\n    /**\r\n     * Get the latest plagiarism result for the exercise with the given ID.\r\n     *\r\n     * @param exerciseId\r\n     */\r\n    getLatestPlagiarismResult(exerciseId: number): Observable<PlagiarismResultDTO<ModelingPlagiarismResult>> {\r\n        return this.http\r\n            .get<PlagiarismResultDTO<ModelingPlagiarismResult>>(`${this.resourceUrl}/${exerciseId}/plagiarism-result`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((response: HttpResponse<PlagiarismResultDTO<ModelingPlagiarismResult>>) => response.body!));\r\n    }\r\n\r\n    /**\r\n     * Get the number of clusters for the exercise with the given ID.\r\n     *\r\n     * @param exerciseId\r\n     */\r\n    getNumberOfClusters(exerciseId: number): Observable<HttpResponse<number>> {\r\n        return this.http.get<number>(`${this.adminResourceUrl}/${exerciseId}/check-clusters`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the clusters to use in Compass\r\n     * @param modelingExerciseId id of the exercise to build the clusters for\r\n     */\r\n    buildClusters(modelingExerciseId: number): Observable<any> {\r\n        return this.http.post(`${this.adminResourceUrl}/${modelingExerciseId}/trigger-automatic-assessment`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Delete the clusters used in Compass\r\n     * @param modelingExerciseId id of the exercise to delete the clusters of\r\n     */\r\n    deleteClusters(modelingExerciseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.adminResourceUrl}/${modelingExerciseId}/clusters`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Re-evaluates and updates a modeling exercise.\r\n     *\r\n     * @param modelingExercise that should be updated of type {ModelingExercise}\r\n     * @param req optional request options\r\n     */\r\n    reevaluateAndUpdate(modelingExercise: ModelingExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(modelingExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .put<ModelingExercise>(`${this.resourceUrl}/${modelingExercise.id}/re-evaluate`, copy, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ModelingExerciseService", "http", "inject", "HttpClient", "exerciseService", "ExerciseService", "resourceUrl", "adminResourceUrl", "constructor", "create", "modelingExercise", "copy", "convertExerciseDatesFromClient", "setBonusPointsConstrainedByIncludedInOverallScore", "categories", "stringifyExerciseCategories", "post", "observe", "pipe", "map", "res", "processExerciseEntityResponse", "update", "req", "options", "createRequestOption", "put", "params", "find", "modelingExerciseId", "withPlagiarismDetectionConfig", "get", "delete", "import", "adaptedSourceModelingExercise", "id", "checkPlagiarism", "exerciseId", "__spreadValues", "toParams", "response", "body", "convertToPdf", "model", "filename", "responseType", "tap", "downloadStream", "getLatestPlagiarismResult", "getNumberOfClusters", "buildClusters", "deleteClusters", "reevaluateAndUpdate", "factory", "\u0275fac", "providedIn"]
}
