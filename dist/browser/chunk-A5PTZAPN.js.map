{
  "version": 3,
  "sources": ["src/main/webapp/app/course/course-scores/scores-storage.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { ParticipationResultDTO } from 'app/course/manage/course-for-dashboard-dto';\r\nimport { ScoresPerExerciseType } from 'app/entities/exercise.model';\r\nimport { CourseScores } from 'app/course/course-scores/course-scores';\r\n\r\n/**\r\n * This service is used to store course scores and participation results (the relevant result used for the score calculation for each participation) for the currently logged-in user.\r\n * The methods {@link CourseManagementService#findAllForDashboard} and {@link CourseManagementService#findOneForDashboard} retrieve the scores and participation results in addition to one or multiple {@link Course} objects and save the scores and participation results in this service.\r\n * This way, multiple components that need the scores and participation results can access them without having to retrieve them again from the server.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ScoresStorageService {\r\n    /**\r\n     * This map stores the {@link CourseScores} object for each {@link Course} that the currently logged-in user has access to. The number is the id of the course.\r\n     */\r\n    private storedTotalScores: Map<number, CourseScores> = new Map();\r\n\r\n    /**\r\n     * This map stores the {@link ScoresPerExerciseType} object for each {@link Course} that the currently logged-in user has access to. The number is the id of the course.\r\n     * This is a nested map as the {@link ScoresPerExerciseType} object is a map itself. It stores {@link CourseScores}, but not for the total course (like the {@link storedTotalScores} above). Instead, it stores the scores split up per exercise type (programming, text, quiz etc.).\r\n     */\r\n    private storedScoresPerExerciseType: Map<number, ScoresPerExerciseType> = new Map();\r\n\r\n    /**\r\n     * This map stores the {@link Result} object for each {@link Participation} of the currently logged-in user. The number is the id of the participation.\r\n     */\r\n    private storedParticipationResults: Map<number, ParticipationResultDTO> = new Map();\r\n\r\n    getStoredTotalScores(courseId: number): CourseScores | undefined {\r\n        return this.storedTotalScores.get(courseId);\r\n    }\r\n\r\n    setStoredTotalScores(courseId: number, totalScores: CourseScores): void {\r\n        this.storedTotalScores.set(courseId, totalScores);\r\n    }\r\n\r\n    getStoredScoresPerExerciseType(courseId: number): ScoresPerExerciseType | undefined {\r\n        return this.storedScoresPerExerciseType.get(courseId);\r\n    }\r\n\r\n    setStoredScoresPerExerciseType(courseId: number, scoresPerExerciseType: ScoresPerExerciseType): void {\r\n        this.storedScoresPerExerciseType.set(courseId, scoresPerExerciseType);\r\n    }\r\n\r\n    getStoredParticipationResult(participationId: number): ParticipationResultDTO | undefined {\r\n        return this.storedParticipationResults.get(participationId);\r\n    }\r\n\r\n    setStoredParticipationResults(participationResults?: ParticipationResultDTO[]): void {\r\n        for (const participationResult of participationResults ?? []) {\r\n            this.storedParticipationResults.set(participationResult.participationId, participationResult);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "yCAWA,IAAaA,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CAIrBC,kBAA+C,IAAIC,IAMnDC,4BAAkE,IAAID,IAKtEE,2BAAkE,IAAIF,IAE9EG,qBAAqBC,EAAgB,CACjC,OAAO,KAAKL,kBAAkBM,IAAID,CAAQ,CAC9C,CAEAE,qBAAqBF,EAAkBG,EAAyB,CAC5D,KAAKR,kBAAkBS,IAAIJ,EAAUG,CAAW,CACpD,CAEAE,+BAA+BL,EAAgB,CAC3C,OAAO,KAAKH,4BAA4BI,IAAID,CAAQ,CACxD,CAEAM,+BAA+BN,EAAkBO,EAA4C,CACzF,KAAKV,4BAA4BO,IAAIJ,EAAUO,CAAqB,CACxE,CAEAC,6BAA6BC,EAAuB,CAChD,OAAO,KAAKX,2BAA2BG,IAAIQ,CAAe,CAC9D,CAEAC,8BAA8BC,EAA+C,CACzE,QAAWC,KAAuBD,GAAwB,CAAA,EACtD,KAAKb,2BAA2BM,IAAIQ,EAAoBH,gBAAiBG,CAAmB,CAEpG,4CAzCSlB,EAAoB,6BAApBA,EAAoBmB,QAApBnB,EAAoBoB,UAAAC,WADP,MAAM,CAAA,SACnBrB,CAAoB,GAAA",
  "names": ["ScoresStorageService", "storedTotalScores", "Map", "storedScoresPerExerciseType", "storedParticipationResults", "getStoredTotalScores", "courseId", "get", "setStoredTotalScores", "totalScores", "set", "getStoredScoresPerExerciseType", "setStoredScoresPerExerciseType", "scoresPerExerciseType", "getStoredParticipationResult", "participationId", "setStoredParticipationResults", "participationResults", "participationResult", "factory", "\u0275fac", "providedIn"]
}
