{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/components/button.component.ts", "src/main/webapp/app/shared/components/button.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { NgClass } from '@angular/common';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FeatureToggleDirective } from '../feature-toggle/feature-toggle.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\n/**\r\n * enum for button types\r\n * @enum {string}\r\n */\r\nexport enum ButtonType {\r\n    DEFAULT = 'btn-default',\r\n    PRIMARY = 'btn-primary',\r\n    SECONDARY = 'btn-secondary',\r\n    SUCCESS = 'btn-success',\r\n    WARNING = 'btn-warning',\r\n    ERROR = 'btn-danger',\r\n    INFO = 'btn-info',\r\n\r\n    PRIMARY_OUTLINE = 'btn-outline-primary',\r\n    SUCCESS_OUTLINE = 'btn-outline-success',\r\n}\r\n\r\n/**\r\n * enum for button sizes\r\n * @enum {string}\r\n */\r\nexport enum ButtonSize {\r\n    SMALL = 'btn-sm',\r\n    MEDIUM = 'btn-md',\r\n    LARGE = 'btn-lg',\r\n}\r\n\r\nexport enum TooltipPlacement {\r\n    TOP = 'top',\r\n    BOTTOM = 'bottom',\r\n    LEFT = 'left',\r\n    RIGHT = 'right',\r\n}\r\n\r\n/**\r\n * A generic button component that has a disabled & loading state.\r\n * The only event output is the click.\r\n *\r\n * Can be used as a button with text and/or icon.\r\n */\r\n@Component({\r\n    selector: 'jhi-button',\r\n    templateUrl: './button.component.html',\r\n    imports: [NgClass, NgbTooltip, FeatureToggleDirective, FaIconComponent, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class ButtonComponent {\r\n    @Input() btnType = ButtonType.PRIMARY;\r\n    @Input() btnSize = ButtonSize.MEDIUM;\r\n    // Fa-icon name.\r\n    @Input() icon: IconProp;\r\n    // Translation placeholders, will be translated in the component.\r\n    @Input() title: string;\r\n    @Input() tooltip: string;\r\n    @Input() tooltipPlacement: TooltipPlacement = TooltipPlacement.TOP;\r\n\r\n    @Input() disabled = false;\r\n    @Input() isLoading = false;\r\n    @Input() featureToggle: FeatureToggle | FeatureToggle[]; // Disable by feature toggle.\r\n\r\n    @Input() shouldSubmit = true;\r\n    @Input() shouldToggle = false;\r\n\r\n    @Output() onClick = new EventEmitter<MouseEvent>();\r\n\r\n    // Icons\r\n    readonly faCircleNotch = faCircleNotch;\r\n}\r\n", "<button\r\n    [ngClass]=\"['jhi-btn', 'btn', btnType, btnSize]\"\r\n    [type]=\"shouldSubmit ? 'submit' : 'button'\"\r\n    [ngbTooltip]=\"tooltip | artemisTranslate\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [jhiFeatureToggle]=\"featureToggle\"\r\n    [overwriteDisabled]=\"disabled || isLoading\"\r\n    [placement]=\"tooltipPlacement\"\r\n>\r\n    @if (isLoading) {\r\n        <fa-icon class=\"jhi-btn__loading sm\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n    }\r\n    @if (icon && !isLoading) {\r\n        <fa-icon class=\"jhi-btn__icon sm\" [icon]=\"icon\" [fixedWidth]=\"true\" />\r\n    }\r\n    @if (title) {\r\n        <span class=\"jhi-btn__title\" [ngClass]=\"{ 'd-none d-sm-inline': shouldToggle }\" [class.ms-1]=\"icon || isLoading\" [jhiTranslate]=\"title\"></span>\r\n    }\r\n</button>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faCircleNotch", "icon", "\u0275\u0275classProp", "isLoading", "\u0275\u0275pureFunction1", "_c1", "shouldToggle", "title", "ButtonType", "ButtonSize", "TooltipPlacement", "ButtonComponent", "btnType", "PRIMARY", "btnSize", "MEDIUM", "tooltip", "tooltipPlacement", "TOP", "disabled", "featureToggle", "shouldSubmit", "onClick", "EventEmitter", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "emit", "\u0275\u0275template", "ButtonComponent_Conditional_3_Template", "ButtonComponent_Conditional_4_Template", "ButtonComponent_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275pureFunction2", "_c0", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "NgClass", "NgbTooltip", "FeatureToggleDirective", "FaIconComponent", "TranslateDirective", "ArtemisTranslatePipe", "encapsulation"]
}
