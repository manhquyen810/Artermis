{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/statistics-graph/statistics-average-score-graph.component.ts", "src/main/webapp/app/shared/statistics-graph/statistics-average-score-graph.component.html", "src/main/webapp/app/course/manage/course-management-statistics.component.ts", "src/main/webapp/app/course/manage/course-management-statistics.component.html"],
  "sourcesContent": ["import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { GraphColors, SpanType } from 'app/entities/statistics.model';\r\nimport { CourseManagementStatisticsModel } from 'app/entities/quiz/course-management-statistics-model';\r\nimport { faArrowLeft, faArrowRight, faFilter } from '@fortawesome/free-solid-svg-icons';\r\nimport { BarChartModule, Color, ScaleType } from '@swimlane/ngx-charts';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { NgxChartsSingleSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { axisTickFormattingWithPercentageSign } from 'app/shared/statistics-graph/statistics-graph.utils';\r\nimport { ChartExerciseTypeFilter } from 'app/shared/chart/chart-exercise-type-filter';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { ChartCategoryFilter } from 'app/shared/chart/chart-category-filter';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\ninterface ExerciseStatisticsEntry extends NgxChartsSingleSeriesDataEntry {\r\n    exerciseType: ExerciseType;\r\n    exerciseId: number;\r\n}\r\n\r\nexport enum PerformanceInterval {\r\n    LOWEST = 'lowest',\r\n    AVERAGE = 'average',\r\n    BEST = 'best',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-statistics-average-score-graph',\r\n    templateUrl: './statistics-average-score-graph.component.html',\r\n    styleUrls: ['./statistics-average-score-graph.component.scss', '../chart/vertical-bar-chart.scss'],\r\n    imports: [TranslateDirective, FaIconComponent, BarChartModule, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class StatisticsAverageScoreGraphComponent implements OnInit {\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    readonly exerciseTypeFilter = inject(ChartExerciseTypeFilter);\r\n    readonly chartCategoryFilter = inject(ChartCategoryFilter);\r\n\r\n    @Input() exerciseAverageScores: CourseManagementStatisticsModel[];\r\n    @Input() courseAverage: number;\r\n    @Input() courseId: number;\r\n\r\n    // Html properties\r\n    LEFT = false;\r\n    RIGHT = true;\r\n    SpanType = SpanType;\r\n\r\n    // Data\r\n    barChartLabels: string[] = [];\r\n    // ngx\r\n    ngxData: ExerciseStatisticsEntry[] = [];\r\n    ngxColor = {\r\n        name: 'Course statistics',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [],\r\n    } as Color;\r\n\r\n    // for filtering\r\n    exerciseScoresFilteredByPerformanceInterval: CourseManagementStatisticsModel[];\r\n    currentlyDisplayableExercises: CourseManagementStatisticsModel[];\r\n    displayColorMap = new Map<PerformanceInterval, string>();\r\n    numberOfSelectedIntervals = 3;\r\n\r\n    readonly yAxisTickFormatting = axisTickFormattingWithPercentageSign;\r\n    readonly performanceIntervals = [PerformanceInterval.LOWEST, PerformanceInterval.AVERAGE, PerformanceInterval.BEST];\r\n    readonly convertToMapKey = ChartExerciseTypeFilter.convertToMapKey;\r\n    readonly CRITICAL_CLASS = 'critical-color';\r\n    readonly MEDIAN_CLASS = 'median-color';\r\n    readonly BEST_CLASS = 'best-color';\r\n    readonly MAX_SPAN_SIZE = 10; // The maximum amount of exercises displayable in one scope\r\n\r\n    weakestThirdUpperBoundary: number;\r\n    bestThirdLowerBoundary: number;\r\n\r\n    // Left arrow -> decrease, right arrow -> increase\r\n    currentPeriod = 0;\r\n    currentSize = 0;\r\n\r\n    // Icons\r\n    faArrowLeft = faArrowLeft;\r\n    faArrowRight = faArrowRight;\r\n    faFilter = faFilter;\r\n\r\n    ngOnInit(): void {\r\n        this.initializeChart();\r\n    }\r\n\r\n    private initializeChart(): void {\r\n        this.includeAllIntervals();\r\n        this.exerciseAverageScores = this.orderAverageScores(this.exerciseAverageScores);\r\n        this.setUpColorDistribution();\r\n        this.exerciseTypeFilter.initializeFilterOptions(this.exerciseAverageScores);\r\n        this.chartCategoryFilter.setupCategoryFilter(this.exerciseAverageScores);\r\n        this.setupChart(this.exerciseAverageScores);\r\n        this.currentlyDisplayableExercises = this.exerciseAverageScores;\r\n        this.exerciseScoresFilteredByPerformanceInterval = this.exerciseAverageScores;\r\n        this.currentSize = this.exerciseAverageScores.length;\r\n    }\r\n\r\n    // handles arrow clicks and updates the exercises which are shown, forward is boolean since it is either forward or backward\r\n    public switchTimeSpan(forward: boolean): void {\r\n        this.currentPeriod += forward ? 1 : -1;\r\n        this.setupChart(this.currentlyDisplayableExercises);\r\n    }\r\n\r\n    /**\r\n     * Determines the color of the bar given the score\r\n     * @param score that is represented by the bar\r\n     * @returns string rgba representation of the color\r\n     */\r\n    private determineColor(score: number): string {\r\n        if (score > this.bestThirdLowerBoundary) {\r\n            return GraphColors.GREEN;\r\n        } else if (score < this.weakestThirdUpperBoundary) {\r\n            return GraphColors.RED;\r\n        }\r\n        return GraphColors.GREY;\r\n    }\r\n\r\n    /**\r\n     * Handles the click event on one of the bars and navigates to the corresponding exercise statistics page\r\n     * @param event the event that is passed by the framework\r\n     */\r\n    onSelect(event: any): void {\r\n        const dataEntry = this.determineChartEntry(event.name, event.value);\r\n\r\n        // a workaround in order to prevent false navigation. If more than one exercise is matching, no routing is done\r\n        if (dataEntry) {\r\n            const route = ['course-management', this.courseId, '', dataEntry.exerciseId, 'exercise-statistics'];\r\n            let type = dataEntry.exerciseType.toLowerCase();\r\n            if (type === ExerciseType.QUIZ) {\r\n                route[4] = 'quiz-point-statistic';\r\n            } else if (type === 'file_upload') {\r\n                type = 'file-upload';\r\n            }\r\n            route[2] = type + '-exercises';\r\n            this.navigationUtilService.routeInNewTab(route);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines the entry in the chart for a mouse event\r\n     * @param name name of the exercise\r\n     * @param value average score of the exercise\r\n     */\r\n    private determineChartEntry(name: string, value: number): ExerciseStatisticsEntry | undefined {\r\n        let counter = 0;\r\n        let result;\r\n        /*\r\n         * The emitted event only contains the name and the average score of the exercise. Using those values to determine the chart entry\r\n         * is not an ideal solution as this pair is not necessarily unique.\r\n         * In practice they most likely are unique, though. Not being able to find the entry in this edge case therefore has negligible impact.\r\n         */\r\n        this.ngxData.forEach((exercise) => {\r\n            if (exercise.name === name && exercise.value === value) {\r\n                counter++;\r\n                result = exercise;\r\n            }\r\n        });\r\n        // if more than one exercise match, we do not navigate\r\n        return counter === 1 ? result : undefined;\r\n    }\r\n\r\n    /**\r\n     * Converts the exercise type contained in the ExerciseStatisticEntries for the tooltip in order to make it translatable\r\n     * @param name the name of the exercise\r\n     * @param value the average score of the exercise\r\n     */\r\n    convertTypeForTooltip(name: string, value: number): string {\r\n        const entry = this.determineChartEntry(name, value);\r\n        if (entry) {\r\n            const type = entry.exerciseType.toLowerCase();\r\n            if (type === 'file_upload') {\r\n                return 'file-upload';\r\n            }\r\n            return type;\r\n        } else {\r\n            // if the name and value is not unique, we cannot determine the type\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets up chart labels, the dedicated objects in order to represent the exercises by ngx-charts and the bar coloring\r\n     * @param exerciseModels the models representing the course exercises\r\n     */\r\n    private setupChart(exerciseModels: CourseManagementStatisticsModel[]): void {\r\n        this.barChartLabels = exerciseModels.slice(this.currentPeriod, 10 + this.currentPeriod).map((exercise) => exercise.exerciseName);\r\n        this.ngxData = exerciseModels.slice(this.currentPeriod, 10 + this.currentPeriod).map(\r\n            (exercise, index) =>\r\n                ({\r\n                    name: this.barChartLabels[index],\r\n                    value: exercise.averageScore,\r\n                    exerciseType: exercise.exerciseType,\r\n                    exerciseId: exercise.exerciseId,\r\n                }) as ExerciseStatisticsEntry,\r\n        );\r\n        this.ngxColor.domain = this.ngxData.map((exercise) => this.determineColor(exercise.value));\r\n    }\r\n\r\n    /**\r\n     * Sets up the color distribution for the chart that is later on used to determine the color for every bar\r\n     * The 33% lowest performing exercises are colored red.\r\n     * The 33% average performing exercises are colored grey.\r\n     * The 33% best performing exercises are colored green.\r\n     * This method only identifies the threshold scores for the lowest and highest performing exercises.\r\n     * These are exclusive, which means that both boundary values are excluded by the lowest and best third accordingly\r\n     */\r\n    private setUpColorDistribution(): void {\r\n        if (!this.exerciseAverageScores || this.exerciseAverageScores.length === 0) {\r\n            return;\r\n        }\r\n        const averageScores = this.exerciseAverageScores.map((exercise) => exercise.averageScore);\r\n        const thirdSize = Math.floor(averageScores.length / 3);\r\n        const highestScoreInLowestThird = averageScores[Math.max(thirdSize - 1, 0)];\r\n        const allScoresAboveLowestThird = averageScores.filter((score) => score > highestScoreInLowestThird);\r\n        this.weakestThirdUpperBoundary = allScoresAboveLowestThird.length > 0 ? Math.min(...allScoresAboveLowestThird) : highestScoreInLowestThird;\r\n        const lowestScoreInBestThird = averageScores[Math.min(averageScores.length - thirdSize, averageScores.length - 1)];\r\n        const allScoresBelowBestThird = averageScores.filter((score) => score < lowestScoreInBestThird);\r\n        this.bestThirdLowerBoundary = allScoresBelowBestThird.length > 0 ? Math.max(...allScoresBelowBestThird) : lowestScoreInBestThird;\r\n    }\r\n\r\n    /**\r\n     * Wrapper method that handles the filtering per exercise type and sets up the chart accordingly\r\n     * @param type the exercise type that is filtered against\r\n     */\r\n    toggleType(type: ExerciseType): void {\r\n        const filteredAgainstType = this.exerciseTypeFilter.toggleExerciseType<CourseManagementStatisticsModel>(type, this.exerciseScoresFilteredByPerformanceInterval);\r\n        const filteredAgainstCategory = this.chartCategoryFilter.applyCurrentFilter<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.initializeChartWithFilter(filteredAgainstCategory, filteredAgainstType);\r\n    }\r\n\r\n    /**\r\n     * Performs a filtering for a performance interval (legend entry).\r\n     * If all intervals are currently displayed and one is clicked, for this interval is filtered.\r\n     * If a disabled interval is clicked, this interval is added to the filter.\r\n     * @param interval the interval that is selected\r\n     */\r\n    togglePerformanceInterval(interval: PerformanceInterval): void {\r\n        const currentValue = this.displayColorMap.get(interval);\r\n        // we reset the view of the chart (changed with the arrows) before displaying the filtered exercises\r\n        this.currentPeriod = 0;\r\n        let newValue = '';\r\n        // This means an interval is selected that is currently already displayed\r\n        if (currentValue !== '') {\r\n            // if only this interval is selected, reselecting it leads to selecting all intervals\r\n            if (this.numberOfSelectedIntervals === 1) {\r\n                this.includeAllIntervals();\r\n                this.exerciseScoresFilteredByPerformanceInterval = this.orderAverageScores(this.exerciseAverageScores);\r\n            } else {\r\n                this.deselectAllOtherIntervals(interval);\r\n            }\r\n            this.initializeFilterOptionsAndSetupChartWithCurrentVisibleScores();\r\n            return;\r\n        }\r\n        switch (interval) {\r\n            case PerformanceInterval.LOWEST: {\r\n                newValue = this.CRITICAL_CLASS;\r\n                break;\r\n            }\r\n            case PerformanceInterval.AVERAGE: {\r\n                newValue = this.MEDIAN_CLASS;\r\n                break;\r\n            }\r\n            case PerformanceInterval.BEST: {\r\n                newValue = this.BEST_CLASS;\r\n                break;\r\n            }\r\n        }\r\n        // This map determines whether the color legend next to a chart entry is colored or not representing whether this entry is currently visible in the chart or not\r\n        this.displayColorMap.set(interval, newValue);\r\n        this.numberOfSelectedIntervals += 1;\r\n        const exercises = this.filterForPerformanceInterval(interval);\r\n        this.exerciseScoresFilteredByPerformanceInterval = this.orderAverageScores(this.exerciseScoresFilteredByPerformanceInterval.concat(exercises));\r\n        this.initializeFilterOptionsAndSetupChartWithCurrentVisibleScores();\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method that identifies the exercises contained by the passed interval\r\n     * @param interval the interval the exercises should be filtered against\r\n     */\r\n    private filterForPerformanceInterval(interval: PerformanceInterval) {\r\n        let filterFunction;\r\n        switch (interval) {\r\n            case PerformanceInterval.LOWEST: {\r\n                filterFunction = (model: CourseManagementStatisticsModel) => model.averageScore < this.weakestThirdUpperBoundary;\r\n                break;\r\n            }\r\n            case PerformanceInterval.AVERAGE: {\r\n                filterFunction = (model: CourseManagementStatisticsModel) =>\r\n                    model.averageScore >= this.weakestThirdUpperBoundary && model.averageScore <= this.bestThirdLowerBoundary;\r\n                break;\r\n            }\r\n            case PerformanceInterval.BEST: {\r\n                filterFunction = (model: CourseManagementStatisticsModel) => model.averageScore > this.bestThirdLowerBoundary;\r\n            }\r\n        }\r\n        return this.exerciseAverageScores.filter(filterFunction);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method reducing code duplication for sorting the model array ascending in its averageScores\r\n     * @param exerciseModels the array that should be ordered\r\n     */\r\n    private orderAverageScores(exerciseModels: CourseManagementStatisticsModel[]): CourseManagementStatisticsModel[] {\r\n        return exerciseModels.sort((exercise1, exercise2) => exercise1.averageScore - exercise2.averageScore);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method reducing code duplication for initializing the chart after a performance interval has been selected\r\n     */\r\n    private initializeFilterOptionsAndSetupChartWithCurrentVisibleScores(): void {\r\n        this.exerciseTypeFilter.initializeFilterOptions(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.chartCategoryFilter.setupCategoryFilter(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.setupChart(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.currentlyDisplayableExercises = this.exerciseScoresFilteredByPerformanceInterval;\r\n        this.currentSize = this.exerciseScoresFilteredByPerformanceInterval.length;\r\n    }\r\n\r\n    /**\r\n     * Sets all performance intervals to visible\r\n     */\r\n    private includeAllIntervals(): void {\r\n        this.displayColorMap.set(PerformanceInterval.LOWEST, this.CRITICAL_CLASS);\r\n        this.displayColorMap.set(PerformanceInterval.AVERAGE, this.MEDIAN_CLASS);\r\n        this.displayColorMap.set(PerformanceInterval.BEST, this.BEST_CLASS);\r\n        this.numberOfSelectedIntervals = 3;\r\n    }\r\n\r\n    /**\r\n     * Deselects all performance intervals except the passed one\r\n     * @param interval the interval that should not be deselected\r\n     */\r\n    private deselectAllOtherIntervals(interval: PerformanceInterval): void {\r\n        this.performanceIntervals.forEach((pi) => {\r\n            if (pi !== interval) {\r\n                this.displayColorMap.set(pi, '');\r\n            }\r\n        });\r\n        this.numberOfSelectedIntervals = 1;\r\n        this.exerciseScoresFilteredByPerformanceInterval = this.filterForPerformanceInterval(interval);\r\n    }\r\n\r\n    /**\r\n     * Wrapper method that handles the toggling of a category and sets up the chart accordingly\r\n     * @param category the category the user selects or deselects\r\n     */\r\n    toggleCategory(category: string): void {\r\n        const filteredAgainstCategory = this.chartCategoryFilter.toggleCategory<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval, category);\r\n        const filteredAgainstType = this.exerciseTypeFilter.applyCurrentFilter<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.initializeChartWithFilter(filteredAgainstCategory, filteredAgainstType);\r\n    }\r\n\r\n    /**\r\n     * Wrapper method that handles the toggling of all categories and sets up the chart accordingly\r\n     */\r\n    toggleAllCategories(): void {\r\n        const filteredAgainstCategory = this.chartCategoryFilter.toggleAllCategories<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval);\r\n        const filteredAgainstType = this.exerciseTypeFilter.applyCurrentFilter<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.initializeChartWithFilter(filteredAgainstCategory, filteredAgainstType);\r\n    }\r\n\r\n    /**\r\n     * Wrapper method that handles the toggling of exercises with no categories and sets up the chart accordingly\r\n     */\r\n    toggleExercisesWithNoCategory(): void {\r\n        const filteredAgainstCategory = this.chartCategoryFilter.toggleExercisesWithNoCategory<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval);\r\n        const filteredAgainstType = this.exerciseTypeFilter.applyCurrentFilter<CourseManagementStatisticsModel>(this.exerciseScoresFilteredByPerformanceInterval);\r\n        this.initializeChartWithFilter(filteredAgainstCategory, filteredAgainstType);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method to reduce code duplication.\r\n     * Sets the currentPeriod to zero, determines the number of displayable bars and updates the chart.\r\n     * @param filteredAgainstCategory the scores filtered against the current category filter setting\r\n     * @param filteredAgainstType the scores filtered against the current type filter setting\r\n     */\r\n    private initializeChartWithFilter(filteredAgainstCategory: CourseManagementStatisticsModel[], filteredAgainstType: CourseManagementStatisticsModel[]): void {\r\n        this.currentlyDisplayableExercises = this.orderAverageScores(filteredAgainstCategory.filter((score) => filteredAgainstType.includes(score)));\r\n        this.currentPeriod = 0;\r\n        this.setupChart(this.currentlyDisplayableExercises);\r\n        this.currentSize = this.currentlyDisplayableExercises.length;\r\n    }\r\n\r\n    /**\r\n     * Appends a percentage sign to every data label of the chart\r\n     * @param averageScore the score that is displayed by the data label\r\n     */\r\n    formatDataLabel(averageScore: number): string {\r\n        return averageScore + '%';\r\n    }\r\n}\r\n", "<div class=\"row mb-3 d-flex justify-content-center\">\r\n    <div class=\"col-xl-1 d-flex flex-column\">\r\n        <h3 jhiTranslate=\"artemisApp.course.averageScore\"></h3>\r\n        <h4>{{ 'artemisApp.courseStatistics.courseAverage' | artemisTranslate }}: {{ courseAverage }}%</h4>\r\n    </div>\r\n    <div class=\"row col-xl-11 chart-row\">\r\n        <fa-icon\r\n            [icon]=\"faArrowLeft\"\r\n            size=\"2x\"\r\n            class=\"col-1 d-flex align-items-center justify-content-end\"\r\n            role=\"button\"\r\n            (click)=\"switchTimeSpan(LEFT)\"\r\n            [class.hidden]=\"!(currentSize > MAX_SPAN_SIZE && currentPeriod > 0)\"\r\n        />\r\n        <div #containerRef class=\"col-lg-8 ps-0 chart-container\">\r\n            <ngx-charts-bar-vertical\r\n                [roundEdges]=\"false\"\r\n                [view]=\"[containerRef.offsetWidth, 300]\"\r\n                [results]=\"ngxData\"\r\n                [scheme]=\"ngxColor\"\r\n                [yScaleMax]=\"100\"\r\n                [xAxis]=\"true\"\r\n                [yAxis]=\"true\"\r\n                [yAxisTickFormatting]=\"yAxisTickFormatting\"\r\n                [dataLabelFormatting]=\"formatDataLabel\"\r\n                [showDataLabel]=\"true\"\r\n                (select)=\"onSelect($event)\"\r\n            >\r\n                <ng-template #tooltipTemplate let-model=\"model\">\r\n                    <b>{{ model.name }}</b> <br />\r\n                    <span>{{ 'artemisApp.courseStatistics.exerciseAverage' | artemisTranslate }}: {{ model.value }}%</span> <br />\r\n                    <b\r\n                        >{{ 'artemisApp.courseStatistics.exerciseType' | artemisTranslate }}:\r\n                        {{ 'artemisApp.courseStatistics.' + convertTypeForTooltip(model.name, model.value) | artemisTranslate }}</b\r\n                    >\r\n                </ng-template>\r\n            </ngx-charts-bar-vertical>\r\n        </div>\r\n        <fa-icon\r\n            [icon]=\"faArrowRight\"\r\n            size=\"2x\"\r\n            class=\"col-1 d-flex align-items-center switch-forward\"\r\n            role=\"button\"\r\n            (click)=\"switchTimeSpan(RIGHT)\"\r\n            [class.hidden]=\"!(currentSize > MAX_SPAN_SIZE + currentPeriod)\"\r\n        />\r\n        <ng-template #placeholder>\r\n            <div class=\"switch-forward-placeholder\"></div>\r\n        </ng-template>\r\n        <div class=\"col-lg-2 d-flex flex-column align-items-center justify-content-center\">\r\n            @if (exerciseTypeFilter.typeSet.size > 0) {\r\n                <div class=\"filter my-3\" aria-label=\"Filter Dropdown\" ngbDropdown>\r\n                    <button\r\n                        class=\"btn\"\r\n                        [class.btn-secondary]=\"!(chartCategoryFilter.numberOfActiveFilters + exerciseTypeFilter.numberOfActiveFilters)\"\r\n                        [class.btn-success]=\"chartCategoryFilter.numberOfActiveFilters + exerciseTypeFilter.numberOfActiveFilters > 0\"\r\n                        ngbDropdownToggle\r\n                        id=\"filter-dropdown-button\"\r\n                    >\r\n                        <fa-icon [icon]=\"faFilter\" />\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.courseOverview.exerciseList.filter\"\r\n                            [translateValues]=\"{ num: exerciseTypeFilter.numberOfActiveFilters + chartCategoryFilter.numberOfActiveFilters }\"\r\n                        ></span>\r\n                    </button>\r\n                    <ul ngbDropdownMenu class=\"checkbox-menu text-nowrap pe-2\" aria-labelledby=\"filter-dropdown-button\">\r\n                        @if (exerciseTypeFilter.typeSet.size) {\r\n                            <li>\r\n                                <b class=\"ms-2\" jhiTranslate=\"artemisApp.exercise-scores-chart.includeType\"></b>\r\n                            </li>\r\n                        }\r\n                        @for (type of exerciseTypeFilter.typeSet; track type) {\r\n                            <li>\r\n                                <label>\r\n                                    <input\r\n                                        class=\"ms-2 form-check-input\"\r\n                                        (change)=\"toggleType(type)\"\r\n                                        [checked]=\"exerciseTypeFilter.getCurrentFilterState(convertToMapKey(type))\"\r\n                                        type=\"checkbox\"\r\n                                    />\r\n                                    <span class=\"ms-2\">{{ 'artemisApp.exercise-scores-chart.' + type.toLowerCase() + 'Plural' | artemisTranslate }}</span>\r\n                                </label>\r\n                            </li>\r\n                        }\r\n                        <li class=\"mt-1 mb-1\">\r\n                            <b class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.includeIndividualCategories\"></b>\r\n                        </li>\r\n                        <li>\r\n                            <label class=\"mb-1\">\r\n                                <input class=\"ms-2 form-check-input\" (change)=\"toggleAllCategories()\" [checked]=\"chartCategoryFilter.allCategoriesSelected\" type=\"checkbox\" />\r\n                                <b class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.includeAllCategories\"></b>\r\n                            </label>\r\n                        </li>\r\n                        @if (chartCategoryFilter.exercisesWithoutCategoriesPresent) {\r\n                            <li>\r\n                                <label>\r\n                                    <input\r\n                                        class=\"ms-2 form-check-input\"\r\n                                        (change)=\"toggleExercisesWithNoCategory()\"\r\n                                        [checked]=\"chartCategoryFilter.includeExercisesWithNoCategory\"\r\n                                        type=\"checkbox\"\r\n                                    />\r\n                                    <span class=\"ms-2\" jhiTranslate=\"artemisApp.courseOverview.statistics.exercisesWithNoCategories\"></span>\r\n                                </label>\r\n                            </li>\r\n                        }\r\n                        @for (category of chartCategoryFilter.exerciseCategories; track category) {\r\n                            <li>\r\n                                <label>\r\n                                    <input\r\n                                        class=\"ms-2 form-check-input\"\r\n                                        (change)=\"toggleCategory(category)\"\r\n                                        [checked]=\"chartCategoryFilter.getCurrentFilterState(category)\"\r\n                                        type=\"checkbox\"\r\n                                    />\r\n                                    <span class=\"ms-2\">{{ category }}</span>\r\n                                </label>\r\n                            </li>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            }\r\n            <div class=\"d-flex align-items-center\">\r\n                <div class=\"legend-container\">\r\n                    @for (interval of performanceIntervals; track interval) {\r\n                        <div class=\"legend-entry\" (click)=\"togglePerformanceInterval(interval)\">\r\n                            <div class=\"color-legend\" [ngClass]=\"displayColorMap.get(interval)!\"></div>\r\n                            <span>{{ 'artemisApp.courseStatistics.chartLegend.' + interval | artemisTranslate }}</span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Graphs, SpanType, StatisticsView } from 'app/entities/statistics.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { StatisticsService } from 'app/shared/statistics-graph/statistics.service';\r\nimport { CourseManagementStatisticsDTO } from './course-management-statistics-dto';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { Course, isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { StatisticsAverageScoreGraphComponent } from 'app/shared/statistics-graph/statistics-average-score-graph.component';\r\nimport { StatisticsGraphComponent } from 'app/shared/statistics-graph/statistics-graph.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-management-statistics',\r\n    templateUrl: './course-management-statistics.component.html',\r\n    styleUrls: ['./course-management-statistics.component.scss'],\r\n    imports: [TranslateDirective, DocumentationButtonComponent, StatisticsAverageScoreGraphComponent, StatisticsGraphComponent, ArtemisTranslatePipe],\r\n})\r\nexport class CourseManagementStatisticsComponent implements OnInit {\r\n    private service = inject(StatisticsService);\r\n    private route = inject(ActivatedRoute);\r\n\r\n    readonly documentationType: DocumentationType = 'Statistics';\r\n    // html properties\r\n    SpanType = SpanType;\r\n    graph = Graphs;\r\n    graphTypes: Graphs[];\r\n    currentSpan: SpanType = SpanType.WEEK;\r\n    statisticsView: StatisticsView = StatisticsView.COURSE;\r\n    paramSub: Subscription;\r\n    courseId: number;\r\n    course: Course;\r\n\r\n    defaultTitle = 'Course';\r\n    // Average Score\r\n    selectedValueAverageScore: string;\r\n    currentAverageScore = 0;\r\n    currentAbsolutePoints = 0;\r\n    currentMaxPoints = 1;\r\n    exerciseTitles: string[];\r\n\r\n    // Average Rating\r\n    selectedValueAverageRating: string;\r\n    currentAverageRating = 0;\r\n    currentAverageRatingInPercent = 0;\r\n    tutorNames: string[];\r\n\r\n    courseStatistics: CourseManagementStatisticsDTO;\r\n\r\n    ngOnInit() {\r\n        this.paramSub = this.route.params.subscribe((params) => {\r\n            this.courseId = params['courseId'];\r\n        });\r\n        this.route.data.subscribe(({ course }) => {\r\n            this.course = course;\r\n            this.initializeGraphTypes();\r\n        });\r\n        this.service.getCourseStatistics(this.courseId).subscribe((res: CourseManagementStatisticsDTO) => {\r\n            this.courseStatistics = res;\r\n        });\r\n    }\r\n\r\n    initializeGraphTypes(): void {\r\n        this.graphTypes = [\r\n            Graphs.SUBMISSIONS,\r\n            Graphs.ACTIVE_USERS,\r\n            Graphs.RELEASED_EXERCISES,\r\n            Graphs.EXERCISES_DUE,\r\n            Graphs.ACTIVE_TUTORS,\r\n            Graphs.CREATED_RESULTS,\r\n            Graphs.CREATED_FEEDBACKS,\r\n            isCommunicationEnabled(this.course) && Graphs.POSTS,\r\n            isCommunicationEnabled(this.course) && Graphs.RESOLVED_POSTS,\r\n            Graphs.CONDUCTED_EXAMS,\r\n            Graphs.EXAM_PARTICIPATIONS,\r\n            Graphs.EXAM_REGISTRATIONS,\r\n        ].filter(Boolean) as Graphs[];\r\n    }\r\n\r\n    onTabChanged(span: SpanType): void {\r\n        this.currentSpan = span;\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"row mb-5\">\r\n        <div class=\"d-flex align-items-center\">\r\n            <h2 id=\"statistics-page-heading\" jhiTranslate=\"statistics.course_statistics_title\"></h2>\r\n            <jhi-documentation-button [type]=\"documentationType\" />\r\n        </div>\r\n    </div>\r\n    @if (courseStatistics) {\r\n        <jhi-statistics-average-score-graph\r\n            [exerciseAverageScores]=\"courseStatistics.averageScoresOfExercises\"\r\n            [courseAverage]=\"courseStatistics.averageScoreOfCourse\"\r\n            [courseId]=\"courseId\"\r\n        />\r\n    }\r\n    <div class=\"separator w-100 mb-4\"></div>\r\n    <div class=\"row mb-5\">\r\n        <div class=\"col-md-2\"></div>\r\n        <div class=\"col-md-9 btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n            <label class=\"btn btn-secondary\" [class.active]=\"currentSpan === SpanType.DAY\">\r\n                <input type=\"radio\" name=\"options\" id=\"option1\" (click)=\"onTabChanged(SpanType.DAY)\" />{{ 'statistics.span.day' | artemisTranslate }}\r\n            </label>\r\n            <label class=\"btn btn-secondary\" [class.active]=\"currentSpan === SpanType.WEEK\">\r\n                <input type=\"radio\" name=\"options\" id=\"option2\" checked (click)=\"onTabChanged(SpanType.WEEK)\" />{{ 'statistics.span.week' | artemisTranslate }}\r\n            </label>\r\n            <label class=\"btn btn-secondary\" [class.active]=\"currentSpan === SpanType.MONTH\">\r\n                <input type=\"radio\" name=\"options\" id=\"option3\" (click)=\"onTabChanged(SpanType.MONTH)\" />{{ 'statistics.span.month' | artemisTranslate }}\r\n            </label>\r\n            <label class=\"btn btn-secondary\" [class.active]=\"currentSpan === SpanType.QUARTER\">\r\n                <input type=\"radio\" name=\"options\" id=\"option4\" (click)=\"onTabChanged(SpanType.QUARTER)\" />{{ 'statistics.span.quarter' | artemisTranslate }}\r\n            </label>\r\n            <label class=\"btn btn-secondary\" [class.active]=\"currentSpan === SpanType.YEAR\">\r\n                <input type=\"radio\" name=\"options\" id=\"option5\" (click)=\"onTabChanged(SpanType.YEAR)\" />{{ 'statistics.span.year' | artemisTranslate }}\r\n            </label>\r\n        </div>\r\n    </div>\r\n    @for (graph of graphTypes; track graph; let i = $index) {\r\n        <div id=\"graph-{{ i }}\" class=\"graph\">\r\n            @if (i !== 0) {\r\n                <hr />\r\n            }\r\n            <jhi-statistics-graph [graphType]=\"graph\" [currentSpan]=\"currentSpan\" [statisticsView]=\"statisticsView\" [entityId]=\"courseId\" />\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "model_r2", "name", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "value", "ctx_r2", "convertTypeForTooltip", "\u0275\u0275listener", "type_r6", "\u0275\u0275restoreView", "_r5", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleType", "\u0275\u0275property", "exerciseTypeFilter", "getCurrentFilterState", "convertToMapKey", "toLowerCase", "_r7", "toggleExercisesWithNoCategory", "chartCategoryFilter", "includeExercisesWithNoCategory", "category_r9", "_r8", "toggleCategory", "\u0275\u0275template", "StatisticsAverageScoreGraphComponent_Conditional_32_Conditional_12_Template", "\u0275\u0275repeaterCreate", "StatisticsAverageScoreGraphComponent_Conditional_32_For_14_Template", "\u0275\u0275repeaterTrackByIdentity", "_r4", "toggleAllCategories", "StatisticsAverageScoreGraphComponent_Conditional_32_Conditional_30_Template", "StatisticsAverageScoreGraphComponent_Conditional_32_For_32_Template", "\u0275\u0275classProp", "numberOfActiveFilters", "faFilter", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275conditional", "typeSet", "size", "\u0275\u0275repeater", "allCategoriesSelected", "exercisesWithoutCategoriesPresent", "exerciseCategories", "interval_r11", "_r10", "togglePerformanceInterval", "displayColorMap", "get", "PerformanceInterval", "StatisticsAverageScoreGraphComponent", "navigationUtilService", "inject", "ArtemisNavigationUtilService", "ChartExerciseTypeFilter", "ChartCategoryFilter", "exerciseAverageScores", "courseAverage", "courseId", "LEFT", "RIGHT", "SpanType", "barChartLabels", "ngxData", "ngxColor", "selectable", "group", "ScaleType", "Ordinal", "domain", "exerciseScoresFilteredByPerformanceInterval", "currentlyDisplayableExercises", "Map", "numberOfSelectedIntervals", "yAxisTickFormatting", "axisTickFormattingWithPercentageSign", "performanceIntervals", "LOWEST", "AVERAGE", "BEST", "CRITICAL_CLASS", "MEDIAN_CLASS", "BEST_CLASS", "MAX_SPAN_SIZE", "weakestThirdUpperBoundary", "bestThirdLowerBoundary", "currentPeriod", "currentSize", "faArrowLeft", "faArrowRight", "ngOnInit", "initializeChart", "includeAllIntervals", "orderAverageScores", "setUpColorDistribution", "initializeFilterOptions", "setupCategoryFilter", "setupChart", "length", "switchTimeSpan", "forward", "determineColor", "score", "GraphColors", "GREEN", "RED", "GREY", "onSelect", "event", "dataEntry", "determineChartEntry", "route", "exerciseId", "type", "exerciseType", "ExerciseType", "QUIZ", "routeInNewTab", "counter", "result", "forEach", "exercise", "undefined", "entry", "exerciseModels", "slice", "map", "exerciseName", "index", "averageScore", "averageScores", "thirdSize", "Math", "floor", "highestScoreInLowestThird", "max", "allScoresAboveLowestThird", "filter", "min", "lowestScoreInBestThird", "allScoresBelowBestThird", "filteredAgainstType", "toggleExerciseType", "filteredAgainstCategory", "applyCurrentFilter", "initializeChartWithFilter", "interval", "currentValue", "newValue", "deselectAllOtherIntervals", "initializeFilterOptionsAndSetupChartWithCurrentVisibleScores", "set", "exercises", "filterForPerformanceInterval", "concat", "filterFunction", "model", "sort", "exercise1", "exercise2", "pi", "category", "includes", "formatDataLabel", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "i0", "_r1", "$event", "StatisticsAverageScoreGraphComponent_ng_template_20_Template", "\u0275\u0275templateRefExtractor", "StatisticsAverageScoreGraphComponent_ng_template_27_Template", "StatisticsAverageScoreGraphComponent_Conditional_32_Template", "StatisticsAverageScoreGraphComponent_For_38_Template", "_c0", "containerRef_r12", "offsetWidth", "TranslateDirective", "FaIconComponent", "BarChartModule", "BarVerticalComponent", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgClass", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "courseStatistics", "averageScoresOfExercises", "averageScoreOfCourse", "courseId", "\u0275\u0275elementStart", "\u0275\u0275template", "CourseManagementStatisticsComponent_For_54_Conditional_3_Template", "\u0275\u0275elementEnd", "\u0275\u0275propertyInterpolate1", "\u0275$index_77_r3", "\u0275\u0275conditional", "graph_r2", "currentSpan", "statisticsView", "CourseManagementStatisticsComponent", "service", "inject", "StatisticsService", "route", "ActivatedRoute", "documentationType", "SpanType", "graph", "Graphs", "graphTypes", "WEEK", "StatisticsView", "COURSE", "paramSub", "course", "defaultTitle", "selectedValueAverageScore", "currentAverageScore", "currentAbsolutePoints", "currentMaxPoints", "exerciseTitles", "selectedValueAverageRating", "currentAverageRating", "currentAverageRatingInPercent", "tutorNames", "ngOnInit", "params", "subscribe", "data", "initializeGraphTypes", "getCourseStatistics", "res", "SUBMISSIONS", "ACTIVE_USERS", "RELEASED_EXERCISES", "EXERCISES_DUE", "ACTIVE_TUTORS", "CREATED_RESULTS", "CREATED_FEEDBACKS", "isCommunicationEnabled", "POSTS", "RESOLVED_POSTS", "CONDUCTED_EXAMS", "EXAM_PARTICIPATIONS", "EXAM_REGISTRATIONS", "filter", "Boolean", "onTabChanged", "span", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "CourseManagementStatisticsComponent_Conditional_12_Template", "\u0275\u0275listener", "DAY", "MONTH", "QUARTER", "YEAR", "\u0275\u0275repeaterCreate", "CourseManagementStatisticsComponent_For_54_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275classProp", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275repeater", "TranslateDirective", "DocumentationButtonComponent", "StatisticsAverageScoreGraphComponent", "StatisticsGraphComponent", "ArtemisTranslatePipe", "styles"]
}
