{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/science-settings/science-settings.component.ts", "src/main/webapp/app/shared/user-settings/science-settings/science-settings.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { UserSettingsDirective } from 'app/shared/user-settings/user-settings.directive';\r\nimport { UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { UserSettingsStructure } from 'app/shared/user-settings/user-settings.model';\r\nimport { faInfoCircle, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { ScienceSetting } from 'app/shared/user-settings/science-settings/science-settings-structure';\r\nimport { ScienceSettingsService } from 'app/shared/user-settings/science-settings/science-settings.service';\r\nimport { FeatureToggle, FeatureToggleService } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { HasAnyAuthorityDirective } from '../../auth/has-any-authority.directive';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-science-settings',\r\n    templateUrl: 'science-settings.component.html',\r\n    styleUrls: ['../user-settings.scss'],\r\n    imports: [\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        // NOTE: this is actually used in the html template, otherwise *jhiHasAnyAuthority would not work\r\n        HasAnyAuthorityDirective,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ScienceSettingsComponent extends UserSettingsDirective implements OnInit, OnDestroy {\r\n    private scienceSettingsService = inject(ScienceSettingsService);\r\n    private featureToggleService = inject(FeatureToggleService);\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faInfoCircle = faInfoCircle;\r\n\r\n    private featureToggleActiveSubscription: Subscription;\r\n    featureToggleActive = false;\r\n\r\n    declare userSettings: UserSettingsStructure<ScienceSetting>;\r\n    declare settings: Array<ScienceSetting>;\r\n\r\n    ngOnInit(): void {\r\n        this.userSettingsCategory = UserSettingsCategory.SCIENCE_SETTINGS;\r\n\r\n        // check if settings are already loaded\r\n        const newestScienceSettings: ScienceSetting[] = this.scienceSettingsService.getScienceSettings();\r\n        if (newestScienceSettings.length === 0) {\r\n            // if no settings are already available load them from the server\r\n            super.ngOnInit();\r\n        } else {\r\n            // else reuse the already available/loaded ones\r\n            this.userSettings = this.userSettingsService.loadSettingsSuccessAsSettingsStructure(newestScienceSettings, this.userSettingsCategory);\r\n            this.settings = this.userSettingsService.extractIndividualSettingsFromSettingsStructure(this.userSettings);\r\n            this.changeDetector.detectChanges();\r\n        }\r\n\r\n        // subscribe to feature toggle changes\r\n        this.featureToggleService.getFeatureToggleActive(FeatureToggle.Science).subscribe((active) => {\r\n            this.featureToggleActive = active;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.featureToggleActiveSubscription) {\r\n            this.featureToggleActiveSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Catches the toggle event from a user click\r\n     * Toggles the respective setting and mark it as changed (only changed settings will be send to the server for saving)\r\n     */\r\n    toggleSetting(event: any) {\r\n        this.settingsChanged = true;\r\n        const settingId = event.currentTarget.id;\r\n        const settingToUpdate = this.settings.find((setting) => setting.settingId === settingId);\r\n        if (!settingToUpdate) {\r\n            return;\r\n        }\r\n        // toggle/inverts previous setting\r\n        settingToUpdate.active = !settingToUpdate.active;\r\n        settingToUpdate.changed = true;\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between\">\r\n    <div>\r\n        <h1>\r\n            <!--UserSettingsCategory-->\r\n            {{ 'artemisApp.userSettings.categories.' + userSettingsCategory | artemisTranslate }}\r\n        </h1>\r\n        <div class=\"d-flex userSettings-info\">\r\n            <fa-icon class=\"ng-fa-icon\" [icon]=\"faInfoCircle\" />\r\n            <span class=\"ps-1\" jhiTranslate=\"artemisApp.userSettings.scienceSettingsInfo\"></span>\r\n        </div>\r\n        @if (!featureToggleActive) {\r\n            <div class=\"d-flex mt-2 userSettings-info\">\r\n                <fa-icon class=\"ng-fa-icon\" [icon]=\"faInfoCircle\" />\r\n                <span class=\"ps-1\" jhiTranslate=\"artemisApp.userSettings.scienceSettingsFeatureDisabled\"></span>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (settingsChanged) {\r\n        <button type=\"button\" class=\"btn btn-primary\" id=\"apply-changes-button\" (click)=\"this.saveSettings()\">\r\n            <fa-icon class=\"ng\" [icon]=\"faSave\" />\r\n            {{ 'artemisApp.userSettings.saveChanges' | artemisTranslate }}\r\n        </button>\r\n    }\r\n</div>\r\n@if (userSettings) {\r\n    <div class=\"list-group d-block\">\r\n        @for (settingGroup of userSettings.groups; track settingGroup) {\r\n            <div>\r\n                <div *jhiHasAnyAuthority=\"settingGroup.restrictionLevels\" class=\"list-group-item\">\r\n                    <h3>\r\n                        <!--GroupName-->\r\n                        <!-- please look at the README.md file to understand how the translation works -->\r\n                        {{ 'artemisApp.userSettings.settingGroupNames.' + settingGroup.key | artemisTranslate }}\r\n                    </h3>\r\n                    @for (setting of settingGroup.settings; track setting) {\r\n                        <div>\r\n                            <dt>\r\n                                <!--SettingName-->\r\n                                {{ 'artemisApp.userSettings.settingNames.' + setting.key | artemisTranslate }}\r\n                            </dt>\r\n                            <span>\r\n                                <!--SettingDescription-->\r\n                                {{ 'artemisApp.userSettings.settingDescriptions.' + setting.descriptionKey | artemisTranslate }}\r\n                            </span>\r\n                            <!--Setting Specific Properties-->\r\n                            <div class=\"d-flex\">\r\n                                <div class=\"form-check pe-3\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        class=\"form-check-input\"\r\n                                        [checked]=\"setting.active\"\r\n                                        id=\"{{ setting.settingId }}\"\r\n                                        value=\"{{ setting.active }}\"\r\n                                        (click)=\"toggleSetting($event)\"\r\n                                    />\r\n                                    <label class=\"form-check-label\" for=\"{{ setting.settingId }}\">active</label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faInfoCircle", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "saveSettings", "faSave", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "$event", "_r3", "toggleSetting", "setting_r4", "key", "descriptionKey", "\u0275\u0275propertyInterpolate", "settingId", "active", "\u0275\u0275repeaterCreate", "ScienceSettingsComponent_Conditional_20_For_4_div_3_For_9_Template", "\u0275\u0275repeaterTrackByIdentity", "settingGroup_r5", "\u0275\u0275repeater", "settings", "\u0275\u0275template", "ScienceSettingsComponent_Conditional_20_For_4_div_3_Template", "restrictionLevels", "ScienceSettingsComponent_Conditional_20_For_4_Template", "userSettings", "groups", "ScienceSettingsComponent", "UserSettingsDirective", "scienceSettingsService", "inject", "ScienceSettingsService", "featureToggleService", "FeatureToggleService", "featureToggleActiveSubscription", "featureToggleActive", "ngOnInit", "userSettingsCategory", "UserSettingsCategory", "SCIENCE_SETTINGS", "newestScienceSettings", "getScienceSettings", "length", "userSettingsService", "loadSettingsSuccessAsSettingsStructure", "extractIndividualSettingsFromSettingsStructure", "changeDetector", "detectChanges", "getFeatureToggleActive", "FeatureToggle", "Science", "subscribe", "ngOnDestroy", "unsubscribe", "event", "settingsChanged", "currentTarget", "id", "settingToUpdate", "find", "setting", "changed", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ScienceSettingsComponent_Conditional_16_Template", "ScienceSettingsComponent_Conditional_18_Template", "ScienceSettingsComponent_Conditional_20_Template", "\u0275\u0275conditional", "FaIconComponent", "TranslateDirective", "HasAnyAuthorityDirective", "ArtemisTranslatePipe", "styles"]
}
