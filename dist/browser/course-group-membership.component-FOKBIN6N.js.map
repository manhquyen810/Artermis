{
  "version": 3,
  "sources": ["src/main/webapp/app/course/manage/course-group-membership/course-group-membership.component.ts", "src/main/webapp/app/course/manage/course-group-membership/course-group-membership.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { Course, CourseGroup, courseGroups } from 'app/entities/course.model';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { capitalize } from 'lodash-es';\r\nimport { CourseGroupComponent } from 'app/shared/course-group/course-group.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Component({\r\n    selector: 'jhi-course-group-membership',\r\n    templateUrl: './course-group-membership.component.html',\r\n    imports: [CourseGroupComponent, TranslateDirective],\r\n})\r\nexport class CourseGroupMembershipComponent implements OnInit {\r\n    private router = inject(Router);\r\n    private route = inject(ActivatedRoute);\r\n    private courseService = inject(CourseManagementService);\r\n    private userService = inject(UserService);\r\n    private accountService = inject(AccountService);\r\n\r\n    allCourseGroupUsers: User[] = [];\r\n    course: Course;\r\n    courseGroup: CourseGroup;\r\n    isLoading = false;\r\n    isAdmin = false;\r\n    paramSub: Subscription;\r\n    filteredUsersSize = 0;\r\n\r\n    readonly capitalize = capitalize;\r\n\r\n    ngOnInit(): void {\r\n        this.loadAll();\r\n    }\r\n\r\n    userSearch = (loginOrName: string) => this.userService.search(loginOrName);\r\n\r\n    addToGroup = (login: string) => this.courseService.addUserToCourseGroup(this.course.id!, this.courseGroup, login);\r\n\r\n    removeFromGroup = (login: string) => this.courseService.removeUserFromCourseGroup(this.course.id!, this.courseGroup, login);\r\n\r\n    /**\r\n     * Update the number of filtered users\r\n     *\r\n     * @param filteredUsersSize Total number of users after filters have been applied\r\n     */\r\n    handleUsersSizeChange = (filteredUsersSize: number) => (this.filteredUsersSize = filteredUsersSize);\r\n\r\n    /**\r\n     * Load all users of given course group.\r\n     * Redirect to course-management when given course group is in predefined standard course groups.\r\n     */\r\n    loadAll = () => {\r\n        this.isLoading = true;\r\n        this.isAdmin = this.accountService.isAdmin();\r\n        this.route.parent!.data.subscribe(({ course }) => {\r\n            this.course = course;\r\n            this.paramSub = this.route.params.subscribe((params) => {\r\n                this.courseGroup = params['courseGroup'];\r\n                if (!courseGroups.includes(this.courseGroup)) {\r\n                    return this.router.navigate(['/course-management']);\r\n                }\r\n                this.courseService.getAllUsersInCourseGroup(this.course.id!, this.courseGroup).subscribe((usersResponse) => {\r\n                    this.allCourseGroupUsers = usersResponse.body!;\r\n                    this.isLoading = false;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Property that returns the course group name, e.g. \"artemis-test-students\"\r\n     */\r\n    get courseGroupName() {\r\n        switch (this.courseGroup) {\r\n            case CourseGroup.STUDENTS:\r\n                return this.course.studentGroupName;\r\n            case CourseGroup.TUTORS:\r\n                return this.course.teachingAssistantGroupName;\r\n            case CourseGroup.EDITORS:\r\n                return this.course.editorGroupName;\r\n            case CourseGroup.INSTRUCTORS:\r\n                return this.course.instructorGroupName;\r\n            default:\r\n                captureException('Unknown course group: ' + this.courseGroup);\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Property that returns the course group entity name, e.g. \"students\" or \"tutors\".\r\n     * If the count of users is exactly 1, singular is used instead of plural.\r\n     */\r\n    get courseGroupEntityName(): string {\r\n        return this.allCourseGroupUsers.length === 1 ? this.courseGroup.slice(0, -1) : this.courseGroup;\r\n    }\r\n\r\n    get exportFilename(): string {\r\n        return this.courseGroupEntityName.charAt(0).toUpperCase() + this.courseGroupEntityName.slice(1) + ' ' + this.course.title;\r\n    }\r\n}\r\n", "<jhi-course-group\r\n    [allGroupUsers]=\"allCourseGroupUsers\"\r\n    [courseGroup]=\"courseGroup\"\r\n    [isLoadingAllGroupUsers]=\"isLoading\"\r\n    [isAdmin]=\"isAdmin\"\r\n    [course]=\"course\"\r\n    [addUserToGroup]=\"addToGroup\"\r\n    [removeUserFromGroup]=\"removeFromGroup\"\r\n    [handleUsersSizeChange]=\"handleUsersSizeChange\"\r\n    [exportFileName]=\"exportFilename\"\r\n    [userSearch]=\"userSearch\"\r\n    (importFinish)=\"loadAll()\"\r\n>\r\n    @if (course) {\r\n        <span>\r\n            <span>{{ course?.title }} - </span>\r\n            @if (filteredUsersSize < allCourseGroupUsers.length) {\r\n                <span>{{ filteredUsersSize }} <span jhiTranslate=\"artemisApp.course.courseGroup.outOf\"></span> </span>\r\n            }\r\n            {{ allCourseGroupUsers.length }}\r\n            <span [jhiTranslate]=\"'artemisApp.course.' + courseGroupEntityName\">{{ capitalize(courseGroupEntityName) }}</span>\r\n            <span class=\"text-body-secondary\">({{ courseGroupName }})</span>\r\n        </span>\r\n    }\r\n</jhi-course-group>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "filteredUsersSize", "\u0275\u0275template", "CourseGroupMembershipComponent_Conditional_2_Conditional_6_Template", "course", "title", "\u0275\u0275conditional", "allCourseGroupUsers", "length", "\u0275\u0275property", "courseGroupEntityName", "\u0275\u0275textInterpolate", "capitalize", "courseGroupName", "CourseGroupMembershipComponent", "router", "inject", "Router", "route", "ActivatedRoute", "courseService", "CourseManagementService", "userService", "UserService", "accountService", "AccountService", "courseGroup", "isLoading", "isAdmin", "paramSub", "ngOnInit", "loadAll", "userSearch", "loginOrName", "search", "addToGroup", "login", "addUserToCourseGroup", "id", "removeFromGroup", "removeUserFromCourseGroup", "handleUsersSizeChange", "parent", "data", "subscribe", "params", "courseGroups", "includes", "navigate", "getAllUsersInCourseGroup", "usersResponse", "body", "studentGroupName", "teachingAssistantGroupName", "editorGroupName", "instructorGroupName", "captureException", "slice", "exportFilename", "charAt", "toUpperCase", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "CourseGroupMembershipComponent_Conditional_2_Template", "CourseGroupComponent", "TranslateDirective", "encapsulation"]
}
