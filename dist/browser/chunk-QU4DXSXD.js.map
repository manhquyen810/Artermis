{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/manage/services/programming-exercise-participation.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { CommitInfo } from 'app/entities/programming/programming-submission.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Observable, map, tap } from 'rxjs';\r\nimport { VcsAccessLogDTO } from 'app/entities/vcs-access-log-entry.model';\r\n\r\nexport interface IProgrammingExerciseParticipationService {\r\n    getLatestResultWithFeedback: (participationId: number, withSubmission: boolean) => Observable<Result | undefined>;\r\n    getStudentParticipationWithLatestResult: (participationId: number) => Observable<ProgrammingExerciseStudentParticipation>;\r\n    checkIfParticipationHasResult: (participationId: number) => Observable<boolean>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExerciseParticipationService implements IProgrammingExerciseParticipationService {\r\n    private http = inject(HttpClient);\r\n    private entityTitleService = inject(EntityTitleService);\r\n    private accountService = inject(AccountService);\r\n\r\n    public resourceUrlParticipations = 'api/programming/programming-exercise-participations/';\r\n    public resourceUrl = 'api/programming/programming-exercise/';\r\n\r\n    getLatestResultWithFeedback(participationId: number, withSubmission = false): Observable<Result | undefined> {\r\n        const options = createRequestOption({ withSubmission });\r\n        return this.http.get<Result | undefined>(this.resourceUrlParticipations + participationId + '/latest-result-with-feedbacks', { params: options }).pipe(\r\n            tap((res) => {\r\n                if (res?.participation?.exercise) {\r\n                    this.sendTitlesToEntityTitleService(res?.participation);\r\n                    this.accountService.setAccessRightsForExerciseAndReferencedCourse(res.participation.exercise);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    getStudentParticipationWithLatestResult(participationId: number): Observable<ProgrammingExerciseStudentParticipation> {\r\n        return this.http\r\n            .get<ProgrammingExerciseStudentParticipation>(this.resourceUrlParticipations + participationId + '/student-participation-with-latest-result-and-feedbacks')\r\n            .pipe(\r\n                tap((res) => {\r\n                    if (res.exercise) {\r\n                        this.sendTitlesToEntityTitleService(res);\r\n                        this.accountService.setAccessRightsForExerciseAndReferencedCourse(res.exercise);\r\n                    }\r\n                }),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Get the student participation with all results and feedbacks for the given participation id.\r\n     * @param participationId of the participation to get the student participation for\r\n     */\r\n    getStudentParticipationWithAllResults(participationId: number): Observable<ProgrammingExerciseStudentParticipation> {\r\n        return this.http.get<ProgrammingExerciseStudentParticipation>(this.resourceUrlParticipations + participationId + '/student-participation-with-all-results').pipe(\r\n            tap((res) => {\r\n                if (res.exercise) {\r\n                    this.sendTitlesToEntityTitleService(res);\r\n                    this.accountService.setAccessRightsForExerciseAndReferencedCourse(res.exercise);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    checkIfParticipationHasResult(participationId: number): Observable<boolean> {\r\n        return this.http.get<boolean>(this.resourceUrlParticipations + participationId + '/has-result');\r\n    }\r\n\r\n    resetRepository(participationId: number, gradedParticipationId?: number) {\r\n        let params = new HttpParams();\r\n        if (gradedParticipationId) {\r\n            params = params.set('gradedParticipationId', gradedParticipationId.toString());\r\n        }\r\n        return this.http.put<void>(`${this.resourceUrlParticipations}${participationId}/reset-repository`, null, { observe: 'response', params });\r\n    }\r\n\r\n    sendTitlesToEntityTitleService(participation: Participation | undefined) {\r\n        if (participation?.exercise) {\r\n            const exercise = participation.exercise;\r\n            this.entityTitleService.setExerciseTitle(exercise);\r\n\r\n            if (exercise.course) {\r\n                const course = exercise.course;\r\n                this.entityTitleService.setTitle(EntityType.COURSE, [course.id], course.title);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the repository files with content for a given participation id at a specific commit hash.\r\n     * The current user needs to be at least an instructor in the course of the participation.\r\n     * @param participationId of the participation to get the files for\r\n     * @param commitId of the commit to get the files for\r\n     */\r\n    getParticipationRepositoryFilesWithContentAtCommit(participationId: number, commitId: string): Observable<Map<string, string> | undefined> {\r\n        return this.http.get(`${this.resourceUrlParticipations}${participationId}/files-content/${commitId}`).pipe(\r\n            map((res: HttpResponse<any>) => {\r\n                // this mapping is required because otherwise the HttpResponse object would be parsed\r\n                // to an arbitrary object (and not a map)\r\n                return res && new Map(Object.entries(res));\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the repository files with content for a given participation id at a specific commit hash. This is used for the commit details view.\r\n     * The current user needs to be at least a teaching assistant in the course of the participation.\r\n     * If the user is not a teaching assistant, the user needs to be in the team or the owner of the participation.\r\n     * @param exerciseId of the exercise to get the files for\r\n     * @param participationId of the participation to get the files for\r\n     * @param commitId of the commit to get the files for\r\n     * @param repositoryType of the participation to get the files for (optional)\r\n     */\r\n    getParticipationRepositoryFilesWithContentAtCommitForCommitDetailsView(\r\n        exerciseId: number,\r\n        participationId: number | undefined,\r\n        commitId: string,\r\n        repositoryType?: string,\r\n    ): Observable<Map<string, string> | undefined> {\r\n        const params: { [key: string]: number | string } = {};\r\n        if (repositoryType) {\r\n            params['repositoryType'] = repositoryType;\r\n        }\r\n        if (participationId) {\r\n            params['participationId'] = participationId;\r\n        }\r\n        return this.http.get(`${this.resourceUrl}${exerciseId}/files-content-commit-details/${commitId}`, { params: params }).pipe(\r\n            map((res: HttpResponse<any>) => {\r\n                // this mapping is required because otherwise the HttpResponse object would be parsed\r\n                // to an arbitrary object (and not a map)\r\n                return res && new Map(Object.entries(res));\r\n            }),\r\n        );\r\n    }\r\n    /**\r\n     * Get the repository files with content for a given participation id at a specific commit hash.\r\n     * The current user needs to be at least a instructor in the course of the participation.\r\n     * @param participationId of the participation to get the commit infos for\r\n     */\r\n    retrieveCommitsInfoForParticipation(participationId: number): Observable<CommitInfo[]> {\r\n        return this.http.get<CommitInfo[]>(`${this.resourceUrlParticipations}${participationId}/commits-info`);\r\n    }\r\n\r\n    /**\r\n     * Get the vcs access log for a given participation id.\r\n     * The current user needs to be at least an instructor in the course of the participation.\r\n     * @param participationId of the participation to get the vcs Access log\r\n     */\r\n    getVcsAccessLogForParticipation(participationId: number): Observable<VcsAccessLogDTO[] | undefined> {\r\n        return this.http\r\n            .get<VcsAccessLogDTO[]>(`${this.resourceUrlParticipations}${participationId}/vcs-access-log`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<VcsAccessLogDTO[]>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Get the vcs access log for a given exercise id and the repository type.\r\n     * The current user needs to be at least a instructor in the course of the participation.\r\n     * @param exerciseId      of the exercise to get the vcs Access log\r\n     * @param repositoryType  of the repository of the exercise, to get the vcs Access log\r\n     */\r\n    getVcsAccessLogForRepository(exerciseId: number, repositoryType: string): Observable<VcsAccessLogDTO[] | undefined> {\r\n        const params: { [key: string]: number | string } = {};\r\n        if (repositoryType) {\r\n            params['repositoryType'] = repositoryType;\r\n        }\r\n        return this.http\r\n            .get<VcsAccessLogDTO[]>(`${this.resourceUrl}${exerciseId}/vcs-access-log/${repositoryType}`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<VcsAccessLogDTO[]>) => res.body ?? undefined));\r\n    }\r\n\r\n    /**\r\n     * Get the repository files with content for a given participation id at a specific commit hash.\r\n     * The current user needs to be at least a student in the course of the participation.\r\n     * @param participationId of the participation to get the commit infos for\r\n     */\r\n    retrieveCommitHistoryForParticipation(participationId: number): Observable<CommitInfo[]> {\r\n        return this.http.get<CommitInfo[]>(`${this.resourceUrlParticipations}${participationId}/commit-history`);\r\n    }\r\n\r\n    retrieveCommitHistoryForTemplateSolutionOrTests(exerciseId: number, repositoryType: string): Observable<CommitInfo[]> {\r\n        return this.http.get<CommitInfo[]>(`${this.resourceUrl}${exerciseId}/commit-history/${repositoryType}`);\r\n    }\r\n\r\n    /**\r\n     * Get the commit history for a specific auxiliary repository\r\n     * @param exerciseId                the exercise the repository belongs to\r\n     * @param repositoryType            the repositories type\r\n     * @param auxiliaryRepositoryId     the id of the repository\r\n     */\r\n    retrieveCommitHistoryForAuxiliaryRepository(exerciseId: number, auxiliaryRepositoryId: number): Observable<CommitInfo[]> {\r\n        const params: { [key: string]: number } = {};\r\n        params['repositoryId'] = auxiliaryRepositoryId;\r\n        return this.http.get<CommitInfo[]>(`${this.resourceUrl}${exerciseId}/commit-history/AUXILIARY`, { params: params });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ProgrammingExerciseParticipationService", "http", "inject", "HttpClient", "entityTitleService", "EntityTitleService", "accountService", "AccountService", "resourceUrlParticipations", "resourceUrl", "getLatestResultWithFeedback", "participationId", "withSubmission", "options", "createRequestOption", "get", "params", "pipe", "tap", "res", "participation", "exercise", "sendTitlesToEntityTitleService", "setAccessRightsForExerciseAndReferencedCourse", "getStudentParticipationWithLatestResult", "getStudentParticipationWithAllResults", "checkIfParticipationHasResult", "resetRepository", "gradedParticipationId", "HttpParams", "set", "toString", "put", "observe", "setExerciseTitle", "course", "setTitle", "EntityType", "COURSE", "id", "title", "getParticipationRepositoryFilesWithContentAtCommit", "commitId", "map", "Map", "Object", "entries", "getParticipationRepositoryFilesWithContentAtCommitForCommitDetailsView", "exerciseId", "repositoryType", "retrieveCommitsInfoForParticipation", "getVcsAccessLogForParticipation", "body", "undefined", "getVcsAccessLogForRepository", "retrieveCommitHistoryForParticipation", "retrieveCommitHistoryForTemplateSolutionOrTests", "retrieveCommitHistoryForAuxiliaryRepository", "auxiliaryRepositoryId", "factory", "\u0275fac", "providedIn"]
}
