{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/validators/custom-not-included-in-validator.directive.ts", "src/main/webapp/app/shared/form/title-channel-name/title-channel-name.component.ts", "src/main/webapp/app/shared/form/title-channel-name/title-channel-name.component.html"],
  "sourcesContent": ["import { Directive, input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, Validator } from '@angular/forms';\r\n\r\n/**\r\n * Custom validator for an array of excluded values for an input element\r\n *\r\n * Adds the 'disallowedValue' error key (= true) to the control if the value is in the disallowedValues array\r\n */\r\n@Directive({\r\n    selector: '[notIncludedIn][ngModel],[notIncludedIn][formControl]',\r\n    providers: [{ provide: NG_VALIDATORS, useExisting: CustomNotIncludedInValidatorDirective, multi: true }],\r\n})\r\nexport class CustomNotIncludedInValidatorDirective implements Validator {\r\n    disallowedValues = input.required<Set<unknown>>();\r\n\r\n    validate(control: AbstractControl): { [key: string]: any } | null {\r\n        if (control == undefined) {\r\n            return null;\r\n        }\r\n\r\n        const isValueAlreadyTaken = this.disallowedValues().has(control.value);\r\n        if (isValueAlreadyTaken) {\r\n            return { disallowedValue: true };\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n", "import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild, computed, effect, input, output, signal, viewChild } from '@angular/core';\r\nimport { ControlContainer, FormsModule, NgForm, NgModel } from '@angular/forms';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { CustomNotIncludedInValidatorDirective } from '../../validators/custom-not-included-in-validator.directive';\r\nimport { HelpIconComponent } from '../../components/help-icon.component';\r\n\r\n@Component({\r\n    selector: 'jhi-title-channel-name',\r\n    templateUrl: './title-channel-name.component.html',\r\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],\r\n    imports: [TranslateDirective, FormsModule, CustomNotIncludedInValidatorDirective, HelpIconComponent],\r\n})\r\nexport class TitleChannelNameComponent implements AfterViewInit, OnDestroy, OnInit {\r\n    @Input() title?: string;\r\n    @Input() channelName?: string;\r\n    @Input() channelNamePrefix: string;\r\n    @Input() titlePattern: string;\r\n    @Input() hideTitleLabel: boolean;\r\n    @Input() emphasizeLabels = false;\r\n    @Input() minTitleLength: number;\r\n    @Input() initChannelName = true;\r\n    hideChannelName = input<boolean>();\r\n    isEditFieldDisplayedRecord = input<Record<ProgrammingExerciseInputField, boolean>>();\r\n    alreadyUsedTitles = input<Set<string>>(new Set());\r\n\r\n    titleOnPageLoad = signal<string | undefined>(undefined);\r\n\r\n    @ViewChild('field_title') field_title: NgModel;\r\n    field_channel_name = viewChild<NgModel>('field_channel_name');\r\n\r\n    titleChange = output<string>();\r\n    channelNameChange = output<string>();\r\n\r\n    isFormValidSignal = signal<boolean>(false);\r\n    /**\r\n     * @deprecated Use {@link isFormValidSignal} instead.\r\n     */\r\n    formValid: boolean;\r\n    /**\r\n     * @deprecated Use {@link isFormValidSignal} instead.\r\n     */\r\n    formValidChanges = new Subject();\r\n\r\n    fieldTitleSubscription?: Subscription;\r\n    fieldChannelNameSubscription?: Subscription;\r\n\r\n    isChannelFieldDisplayed = computed(() => {\r\n        return !this.hideChannelName() && (!this.isEditFieldDisplayedRecord() || this.isEditFieldDisplayedRecord()?.channelName);\r\n    });\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.isEditFieldDisplayedRecord(); // triggers effect\r\n            this.registerChangeListeners();\r\n        });\r\n\r\n        effect(\r\n            function removeInitialTitleInEditFromForbiddenTitles() {\r\n                if (this.titleOnPageLoad()) {\r\n                    this.alreadyUsedTitles().delete(this.titleOnPageLoad());\r\n                }\r\n            }.bind(this),\r\n        );\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.registerChangeListeners();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.channelNamePrefix) {\r\n            this.channelNamePrefix = '';\r\n        }\r\n\r\n        if (this.initChannelName) {\r\n            // Defer updating the channel name into the next change detection cycle to avoid the\r\n            // \"NG0100: Expression has changed after it was checked\" error\r\n            setTimeout(() => {\r\n                // Remove trailing hyphens if title is not undefined or empty\r\n                this.formatChannelName(this.channelNamePrefix + (this.title ?? ''), false, !!this.title);\r\n            });\r\n        }\r\n\r\n        this.titleOnPageLoad.set(this.title);\r\n    }\r\n\r\n    private registerChangeListeners() {\r\n        this.fieldTitleSubscription = this.field_title?.valueChanges?.subscribe(() => this.calculateFormValid());\r\n        this.fieldChannelNameSubscription = this.field_channel_name()?.valueChanges?.subscribe(() => this.calculateFormValid());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.fieldTitleSubscription?.unsubscribe();\r\n        this.fieldChannelNameSubscription?.unsubscribe();\r\n    }\r\n\r\n    calculateFormValid(): void {\r\n        const updatedFormValidValue = Boolean(this.field_title.valid && (!this.isChannelFieldDisplayed() || this.field_channel_name()?.valid));\r\n        this.isFormValidSignal.set(updatedFormValidValue);\r\n        this.formValid = updatedFormValidValue;\r\n        this.formValidChanges.next(this.formValid);\r\n    }\r\n\r\n    updateTitle(newTitle: string) {\r\n        this.title = newTitle;\r\n        this.titleChange.emit(this.title);\r\n        // Remove trailing hyphens if title is not undefined or empty\r\n        this.formatChannelName(this.channelNamePrefix + this.title, false, !!this.title);\r\n    }\r\n\r\n    formatChannelName(newName: string, allowDuplicateHyphens = true, removeTrailingHyphens = false) {\r\n        const specialCharacters = allowDuplicateHyphens ? /[^a-z0-9-]+/g : /[^a-z0-9]+/g;\r\n        const trailingHyphens = removeTrailingHyphens ? /-$/ : new RegExp('[]');\r\n        this.channelName = newName.toLowerCase().replaceAll(specialCharacters, '-').replace(trailingHyphens, '').slice(0, 30);\r\n        this.channelNameChange.emit(this.channelName);\r\n    }\r\n}\r\n", "<div>\r\n    @if (!this.isEditFieldDisplayedRecord() || this.isEditFieldDisplayedRecord()?.title) {\r\n        <div class=\"form-group\">\r\n            @if (!hideTitleLabel) {\r\n                <label [class]=\"'form-control-label' + (emphasizeLabels ? ' emphasized-label' : '')\" jhiTranslate=\"artemisApp.lecture.title\" for=\"field_title\"></label>\r\n            }\r\n            <input\r\n                #field_title=\"ngModel\"\r\n                required\r\n                [minlength]=\"minTitleLength\"\r\n                [pattern]=\"titlePattern\"\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"title\"\r\n                id=\"field_title\"\r\n                [ngModel]=\"title\"\r\n                (ngModelChange)=\"updateTitle($event)\"\r\n                notIncludedIn\r\n                [disallowedValues]=\"alreadyUsedTitles()\"\r\n            />\r\n            @if (field_title?.control?.errors?.disallowedValue) {\r\n                <div class=\"alert alert-danger\" jhiTranslate=\"artemisApp.exercise.form.title.disallowedValue\"></div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (isChannelFieldDisplayed()) {\r\n        <div class=\"form-group\">\r\n            <div>\r\n                <label [class]=\"'form-control-label' + (emphasizeLabels ? ' emphasized-label' : '')\" jhiTranslate=\"artemisApp.lecture.channelName\" for=\"field_channel_name\"\r\n                    >Channel Name</label\r\n                >\r\n                <jhi-help-icon text=\"artemisApp.programmingExercise.channelNameTooltip\" />\r\n            </div>\r\n            <input\r\n                #field_channel_name=\"ngModel\"\r\n                required\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"channelName\"\r\n                id=\"field_channel_name\"\r\n                [ngModel]=\"channelName\"\r\n                (ngModelChange)=\"formatChannelName($event)\"\r\n                maxlength=\"30\"\r\n            />\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "8cAYA,IAAaA,GAAqC,IAAA,CAA5C,MAAOA,CAAqC,CAC9CC,iBAAmBC,EAAMC,SAAQ,EAEjCC,SAASC,EAAwB,CAC7B,OAAIA,GAAWC,KACJ,KAGiB,KAAKL,iBAAgB,EAAGM,IAAIF,EAAQG,KAAK,EAE1D,CAAEC,gBAAiB,EAAI,EAG3B,IACX,4CAdST,EAAqC,2BAArCA,EAAqCU,UAAA,CAAA,CAAA,GAAA,gBAAA,GAAA,UAAA,EAAA,EAAA,CAAA,GAAA,gBAAA,GAAA,cAAA,EAAA,CAAA,EAAAC,OAAA,CAAAV,iBAAA,CAAA,EAAA,kBAAA,CAAA,EAAAW,SAAA,CAAAC,EAFnC,CAAC,CAAEC,QAASC,EAAeC,YAAahB,EAAuCiB,MAAO,EAAI,CAAE,CAAC,CAAA,CAAA,CAAA,SAE/FjB,CAAqC,GAAA,2EERlCkB,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,QAAA,CAAA,EACJD,EAAA,EAAA;aAAA,mBADWE,EAAA,EAAAC,EAAA,sBAAAC,EAAAC,gBAAA,oBAAA,GAAA,0BAiBPL,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;aAAA,sCApBJA,EAAA,EAAA;SAAA,EAAAM,EAAA,EAAA,MAAA,CAAA,EACIN,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAAC,GAAA,EAAA,CAAA,EAGAF,EAAA,EAAA,QAAA,EAAA,CAAA,EAUIG,EAAA,gBAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAR,EAAAS,EAAA,EAAA,OAAAC,EAAiBV,EAAAW,YAAAL,CAAA,CAAmB,CAAA,CAAA,EAVxCM,EAAA,EAcAhB,EAAA,EAAA;aAAA,EAAAO,EAAA,EAAAU,GAAA,EAAA,CAAA,EAGJD,EAAA,EACJhB,EAAA,EAAA;KAAA,2BArBQE,EAAA,CAAA,EAAAgB,EAAAd,EAAAe,eAAA,GAAA,CAAA,EAMIjB,EAAA,EAAAkB,EAAA,YAAAhB,EAAAiB,cAAA,EAA4B,UAAAjB,EAAAkB,YAAA,EACJ,UAAAlB,EAAAmB,KAAA,EAKP,mBAAAnB,EAAAoB,kBAAA,CAAA,EAKrBtB,EAAA,CAAA,EAAAgB,EAAAO,EAAAA,GAAA,MAAAA,EAAAC,SAAA,MAAAD,EAAAC,QAAAC,QAAA,OAAAF,EAAAC,QAAAC,OAAAC,gBAAA,EAAA,EAAA,sCAMJ5B,EAAA,EAAA;SAAA,EAAAM,EAAA,EAAA,MAAA,CAAA,EACIN,EAAA,EAAA;aAAA,EAAAM,EAAA,EAAA,KAAA,EACIN,EAAA,EAAA;iBAAA,EAAAM,EAAA,EAAA,QAAA,CAAA,EACKN,EAAA,EAAA,cAAA,EAAYgB,EAAA,EAEjBhB,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,gBAAA,CAAA,EACJD,EAAA,EAAA;aAAA,EAAAgB,EAAA,EACAhB,EAAA,GAAA;aAAA,EAAAM,EAAA,GAAA,QAAA,EAAA,CAAA,EAQIG,EAAA,gBAAA,SAAAC,EAAA,CAAAC,EAAAkB,CAAA,EAAA,IAAAzB,EAAAS,EAAA,EAAA,OAAAC,EAAiBV,EAAA0B,kBAAApB,CAAA,CAAyB,CAAA,CAAA,EAR9CM,EAAA,EAWJhB,EAAA,GAAA;SAAA,EAAAgB,EAAA,EACJhB,EAAA,GAAA;KAAA,oBAjBmBE,EAAA,CAAA,EAAAC,EAAA,sBAAAC,EAAAC,gBAAA,oBAAA,GAAA,EAYPH,EAAA,CAAA,EAAAkB,EAAA,UAAAhB,EAAA2B,WAAA,GD1BhB,IAAaC,IAAyB,IAAA,CAAhC,MAAOA,CAAyB,CACzBT,MACAQ,YACAE,kBACAX,aACAH,eACAd,gBAAkB,GAClBgB,eACAa,gBAAkB,GAC3BC,gBAAkBC,EAAK,EACvBC,2BAA6BD,EAAK,EAClCZ,kBAAoBY,EAAmB,IAAIE,GAAK,EAEhDC,gBAAkBC,EAA2BC,MAAS,EAE5BC,YAC1BC,mBAAqBC,EAAmB,oBAAoB,EAE5DC,YAAcC,EAAM,EACpBC,kBAAoBD,EAAM,EAE1BE,kBAAoBR,EAAgB,EAAK,EAIzCS,UAIAC,iBAAmB,IAAIC,EAEvBC,uBACAC,6BAEAC,wBAA0BC,EAAS,IACxB,CAAC,KAAKpB,gBAAe,IAAO,CAAC,KAAKE,2BAA0B,GAAM,KAAKA,2BAA0B,GAAIN,YAC/G,EAEDyB,aAAA,CACIC,EAAO,IAAK,CACR,KAAKpB,2BAA0B,EAC/B,KAAKqB,wBAAuB,CAChC,CAAC,EAEDD,EACI,UAAoD,CAC5C,KAAKlB,gBAAe,GACpB,KAAKf,kBAAiB,EAAGmC,OAAO,KAAKpB,gBAAe,CAAE,CAE9D,EAAEqB,KAAK,IAAI,CAAC,CAEpB,CAEAC,iBAAe,CACX,KAAKH,wBAAuB,CAChC,CAEAI,UAAQ,CACC,KAAK7B,oBACN,KAAKA,kBAAoB,IAGzB,KAAKC,iBAGL6B,WAAW,IAAK,CAEZ,KAAKjC,kBAAkB,KAAKG,mBAAqB,KAAKV,OAAS,IAAK,GAAO,CAAC,CAAC,KAAKA,KAAK,CAC3F,CAAC,EAGL,KAAKgB,gBAAgByB,IAAI,KAAKzC,KAAK,CACvC,CAEQmC,yBAAuB,CAC3B,KAAKN,uBAAyB,KAAKV,aAAauB,cAAcC,UAAU,IAAM,KAAKC,mBAAkB,CAAE,EACvG,KAAKd,6BAA+B,KAAKV,mBAAkB,GAAIsB,cAAcC,UAAU,IAAM,KAAKC,mBAAkB,CAAE,CAC1H,CAEAC,aAAW,CACP,KAAKhB,wBAAwBiB,YAAW,EACxC,KAAKhB,8BAA8BgB,YAAW,CAClD,CAEAF,oBAAkB,CACd,IAAMG,EAAwBC,GAAQ,KAAK7B,YAAY8B,QAAU,CAAC,KAAKlB,wBAAuB,GAAM,KAAKX,mBAAkB,GAAI6B,QAC/H,KAAKxB,kBAAkBgB,IAAIM,CAAqB,EAChD,KAAKrB,UAAYqB,EACjB,KAAKpB,iBAAiBuB,KAAK,KAAKxB,SAAS,CAC7C,CAEAlC,YAAY2D,EAAgB,CACxB,KAAKnD,MAAQmD,EACb,KAAK7B,YAAY8B,KAAK,KAAKpD,KAAK,EAEhC,KAAKO,kBAAkB,KAAKG,kBAAoB,KAAKV,MAAO,GAAO,CAAC,CAAC,KAAKA,KAAK,CACnF,CAEAO,kBAAkB8C,EAAiBC,EAAwB,GAAMC,EAAwB,GAAK,CAC1F,IAAMC,EAAoBF,EAAwB,eAAiB,cAC7DG,EAAkBF,EAAwB,KAAO,IAAIG,OAAO,IAAI,EACtE,KAAKlD,YAAc6C,EAAQM,YAAW,EAAGC,WAAWJ,EAAmB,GAAG,EAAEK,QAAQJ,EAAiB,EAAE,EAAEK,MAAM,EAAG,EAAE,EACpH,KAAKtC,kBAAkB4B,KAAK,KAAK5C,WAAW,CAChD,4CAvGSC,EAAyB,2BAAzBA,EAAyBsD,UAAA,CAAA,CAAA,wBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,ujBAHnB,CAAC,CAAEE,QAASC,EAAkBC,YAAaC,CAAM,CAAE,CAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,cAAA,SAAA,EAAA,CAAA,qBAAA,SAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,WAAA,GAAA,OAAA,OAAA,OAAA,QAAA,KAAA,cAAA,gBAAA,GAAA,EAAA,eAAA,EAAA,gBAAA,YAAA,UAAA,UAAA,kBAAA,EAAA,CAAA,eAAA,2BAAA,MAAA,aAAA,EAAA,CAAA,eAAA,iDAAA,EAAA,QAAA,cAAA,EAAA,CAAA,eAAA,iCAAA,MAAA,oBAAA,EAAA,CAAA,OAAA,mDAAA,EAAA,CAAA,WAAA,GAAA,OAAA,OAAA,OAAA,cAAA,KAAA,qBAAA,YAAA,KAAA,EAAA,eAAA,EAAA,gBAAA,SAAA,CAAA,EAAAC,SAAA,SAAAT,EAAAC,EAAA,IAAAD,EAAA,ICXvElF,EAAA,EAAA,KAAA,EACIN,EAAA,EAAA;KAAA,EAAAO,EAAA,EAAA2F,GAAA,EAAA,CAAA,EAAsF,EAAAC,GAAA,GAAA,CAAA,EA6C1FnF,EAAA,EACAhB,EAAA,EAAA;CAAA,cA9CIE,EAAA,CAAA,EAAAgB,EAAA,CAAAuE,EAAApD,2BAAA,IAAA+D,EAAAX,EAAApD,2BAAA,IAAA,MAAA+D,EAAA7E,MAAA,EAAA,EAAA,EAwBArB,EAAA,EAAAgB,EAAAuE,EAAAnC,wBAAA,EAAA,EAAA,EAAA,kBDbU+C,EAAoBC,EAAWC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAEC,EAAuCC,CAAiB,EAAAC,cAAA,CAAA,CAAA,SAE1FhF,CAAyB,GAAA",
  "names": ["CustomNotIncludedInValidatorDirective", "disallowedValues", "input", "required", "validate", "control", "undefined", "has", "value", "disallowedValue", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "provide", "NG_VALIDATORS", "useExisting", "multi", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275classMap", "ctx_r1", "emphasizeLabels", "\u0275\u0275elementStart", "\u0275\u0275template", "TitleChannelNameComponent_Conditional_2_Conditional_3_Template", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateTitle", "\u0275\u0275elementEnd", "TitleChannelNameComponent_Conditional_2_Conditional_7_Template", "\u0275\u0275conditional", "hideTitleLabel", "\u0275\u0275property", "minTitleLength", "titlePattern", "title", "alreadyUsedTitles", "field_title_r3", "control", "errors", "disallowedValue", "_r4", "formatChannelName", "channelName", "TitleChannelNameComponent", "channelNamePrefix", "initChannelName", "hideChannelName", "input", "isEditFieldDisplayedRecord", "Set", "titleOnPageLoad", "signal", "undefined", "field_title", "field_channel_name", "viewChild", "titleChange", "output", "channelNameChange", "isFormValidSignal", "formValid", "formValidChanges", "Subject", "fieldTitleSubscription", "fieldChannelNameSubscription", "isChannelFieldDisplayed", "computed", "constructor", "effect", "registerChangeListeners", "delete", "bind", "ngAfterViewInit", "ngOnInit", "setTimeout", "set", "valueChanges", "subscribe", "calculateFormValid", "ngOnDestroy", "unsubscribe", "updatedFormValidValue", "Boolean", "valid", "next", "newTitle", "emit", "newName", "allowDuplicateHyphens", "removeTrailingHyphens", "specialCharacters", "trailingHyphens", "RegExp", "toLowerCase", "replaceAll", "replace", "slice", "selectors", "viewQuery", "rf", "ctx", "provide", "ControlContainer", "useExisting", "NgForm", "decls", "vars", "consts", "template", "TitleChannelNameComponent_Conditional_2_Template", "TitleChannelNameComponent_Conditional_3_Template", "tmp_0_0", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "RequiredValidator", "MinLengthValidator", "MaxLengthValidator", "PatternValidator", "NgModel", "CustomNotIncludedInValidatorDirective", "HelpIconComponent", "encapsulation"]
}
