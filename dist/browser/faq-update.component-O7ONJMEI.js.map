{
  "version": 3,
  "sources": ["src/main/webapp/app/faq/faq-update.component.ts", "src/main/webapp/app/faq/faq-update.component.html"],
  "sourcesContent": ["import { Component, OnInit, computed, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { faBan, faQuestionCircle, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormulaAction } from 'app/shared/monaco-editor/model/actions/formula.action';\r\nimport { Faq, FaqState } from 'app/entities/faq.model';\r\nimport { FaqService } from 'app/faq/faq.service';\r\nimport { FaqCategory } from 'app/entities/faq-category.model';\r\nimport { loadCourseFaqCategories } from 'app/faq/faq.utils';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { RewriteAction } from 'app/shared/monaco-editor/model/actions/artemis-intelligence/rewrite.action';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_IRIS } from 'app/app.constants';\r\nimport RewritingVariant from 'app/shared/monaco-editor/model/actions/artemis-intelligence/rewriting-variant';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { ArtemisIntelligenceService } from 'app/shared/monaco-editor/model/actions/artemis-intelligence/artemis-intelligence.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CategorySelectorComponent } from 'app/shared/category-selector/category-selector.component';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\n\r\n@Component({\r\n    selector: 'jhi-faq-update',\r\n    templateUrl: './faq-update.component.html',\r\n    styleUrls: ['./faq-update.component.scss'],\r\n    imports: [CategorySelectorComponent, MarkdownEditorMonacoComponent, TranslateDirective, FontAwesomeModule, FormsModule],\r\n})\r\nexport class FaqUpdateComponent implements OnInit {\r\n    private alertService = inject(AlertService);\r\n    private faqService = inject(FaqService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private router = inject(Router);\r\n    private profileService = inject(ProfileService);\r\n    private accountService = inject(AccountService);\r\n    private artemisIntelligenceService = inject(ArtemisIntelligenceService);\r\n\r\n    faq: Faq;\r\n    isSaving: boolean;\r\n    isAllowedToSave: boolean;\r\n    existingCategories: FaqCategory[];\r\n    faqCategories: FaqCategory[];\r\n    courseId: number;\r\n    isAtLeastInstructor = false;\r\n    domainActionsDescription = [new FormulaAction()];\r\n\r\n    irisEnabled = toSignal(this.profileService.getProfileInfo().pipe(map((profileInfo) => profileInfo.activeProfiles.includes(PROFILE_IRIS))), { initialValue: false });\r\n    artemisIntelligenceActions = computed(() => (this.irisEnabled() ? [new RewriteAction(this.artemisIntelligenceService, RewritingVariant.FAQ, this.courseId)] : []));\r\n\r\n    // Icons\r\n    readonly faQuestionCircle = faQuestionCircle;\r\n    readonly faSave = faSave;\r\n    readonly faBan = faBan;\r\n\r\n    ngOnInit() {\r\n        this.isSaving = false;\r\n        this.courseId = Number(this.activatedRoute.snapshot.paramMap.get('courseId'));\r\n        this.activatedRoute.parent?.data.subscribe((data) => {\r\n            // Create a new faq to use unless we fetch an existing faq\r\n            const faq = data['faq'];\r\n            this.faq = faq ?? new Faq();\r\n            const course = data['course'];\r\n            if (course) {\r\n                this.faq.course = course;\r\n                this.loadCourseFaqCategories(course.id);\r\n                this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(course);\r\n            }\r\n            this.faqCategories = faq?.categories ? faq.categories : [];\r\n        });\r\n        this.validate();\r\n    }\r\n\r\n    /**\r\n     * Revert to the previous state, equivalent with pressing the back button on your browser\r\n     * Returns to the detail page if there is no previous state and we edited an existing faq\r\n     * Returns to the overview page if there is no previous state and we created a new faq\r\n     */\r\n\r\n    previousState() {\r\n        this.navigationUtilService.navigateBack(['course-management', this.courseId, 'faqs']);\r\n    }\r\n    /**\r\n     * Save the changes on a faq\r\n     * This function is called by pressing save after creating or editing a faq\r\n     */\r\n    save() {\r\n        this.isSaving = true;\r\n        this.faq.faqState = this.isAtLeastInstructor ? FaqState.ACCEPTED : FaqState.PROPOSED;\r\n        if (this.faq.id !== undefined) {\r\n            this.subscribeToSaveResponse(this.faqService.update(this.courseId, this.faq));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.faqService.create(this.courseId, this.faq));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param result The Http response from the server\r\n     */\r\n    protected subscribeToSaveResponse(result: Observable<HttpResponse<Faq>>) {\r\n        result.subscribe({\r\n            next: (response: HttpResponse<Faq>) => this.onSaveSuccess(response.body!),\r\n            error: (error: HttpErrorResponse) => this.onSaveError(error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Action on successful faq creation or edit\r\n     */\r\n    protected onSaveSuccess(faq: Faq) {\r\n        if (!this.faq.id) {\r\n            this.faqService.find(this.courseId, faq.id!).subscribe({\r\n                next: (response: HttpResponse<Faq>) => {\r\n                    this.isSaving = false;\r\n                    const faqBody = response.body;\r\n                    if (faqBody) {\r\n                        this.faq = faqBody;\r\n                    }\r\n                    this.showSuccessAlert(faq, false);\r\n                    this.router.navigate(['course-management', this.courseId, 'faqs']);\r\n                },\r\n            });\r\n        } else {\r\n            this.showSuccessAlert(faq, true);\r\n            this.router.navigate(['course-management', this.courseId, 'faqs']);\r\n        }\r\n    }\r\n\r\n    private showSuccessAlert(faq: Faq, newlyCreated: boolean): void {\r\n        let messageKey: string;\r\n\r\n        if (this.isAtLeastInstructor) {\r\n            messageKey = newlyCreated ? 'artemisApp.faq.updated' : 'artemisApp.faq.created';\r\n        } else {\r\n            messageKey = newlyCreated ? 'artemisApp.faq.proposedChange' : 'artemisApp.faq.proposed';\r\n        }\r\n        this.alertService.success(messageKey, { title: faq.questionTitle });\r\n    }\r\n\r\n    /**\r\n     * Action on unsuccessful faq creation or edit\r\n     * @param errorRes the errorRes handed to the alert service\r\n     */\r\n    protected onSaveError(errorRes: HttpErrorResponse) {\r\n        this.isSaving = false;\r\n        if (errorRes.error?.title) {\r\n            this.alertService.addErrorAlert(errorRes.error.title, errorRes.error.message, errorRes.error.params);\r\n        } else {\r\n            onError(this.alertService, errorRes);\r\n        }\r\n    }\r\n\r\n    updateCategories(categories: FaqCategory[]) {\r\n        this.faq.categories = categories;\r\n        this.faqCategories = categories;\r\n    }\r\n\r\n    private loadCourseFaqCategories(courseId: number) {\r\n        loadCourseFaqCategories(courseId, this.alertService, this.faqService).subscribe((existingCategories) => {\r\n            this.existingCategories = existingCategories;\r\n        });\r\n    }\r\n\r\n    validate() {\r\n        if (this.faq.questionTitle && this.faq.questionAnswer) {\r\n            this.isAllowedToSave = this.faq.questionTitle?.trim().length > 0 && this.faq.questionAnswer?.trim().length > 0;\r\n        } else {\r\n            this.isAllowedToSave = false;\r\n        }\r\n    }\r\n\r\n    handleMarkdownChange(markdown: string): void {\r\n        this.faq.questionAnswer = markdown;\r\n        this.validate();\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        <form name=\"editForm\" role=\"form\" (ngSubmit)=\"save()\" #editForm=\"ngForm\">\r\n            <div class=\"d-flex\">\r\n                <div class=\"flex-grow-1\">\r\n                    <div class=\"d-flex align-items-center\">\r\n                        <h2 id=\"jhi-faq-heading\" jhiTranslate=\"artemisApp.faq.home.createOrEditLabel\"></h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"form-group\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.faq.table.questionTitle\" for=\"field_title\"></label>\r\n                    <div class=\"d-flex\">\r\n                        <input id=\"field_title\" type=\"text\" class=\"form-control\" name=\"title\" [(ngModel)]=\"faq.questionTitle\" (change)=\"validate()\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.faq.table.questionAnswer\" for=\"field_description\"></label>\r\n                    <jhi-markdown-editor-monaco\r\n                        id=\"field_description\"\r\n                        class=\"markdown-editor\"\r\n                        [domainActions]=\"domainActionsDescription\"\r\n                        [artemisIntelligenceActions]=\"artemisIntelligenceActions()\"\r\n                        [markdown]=\"faq.questionAnswer || ''\"\r\n                        (markdownChange)=\"handleMarkdownChange($event)\"\r\n                    />\r\n                </div>\r\n                <div class=\"form-group position-relative\">\r\n                    <label class=\"form-control-label\" jhiTranslate=\"artemisApp.exercise.categories\"></label>\r\n                    <jhi-category-selector [categories]=\"faqCategories\" [existingCategories]=\"existingCategories\" (selectedCategories)=\"updateCategories($event)\" />\r\n                </div>\r\n                @if (faq.course) {\r\n                    <div class=\"form-group\">\r\n                        <label class=\"form-control-label\" jhiTranslate=\"artemisApp.faq.course\" for=\"field_course\"></label>\r\n                        <div class=\"d-flex\">\r\n                            <input id=\"field_course\" disabled type=\"text\" class=\"form-control\" name=\"course\" [(ngModel)]=\"faq.course.title\" />\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div class=\"d-flex\">\r\n                    <div class=\"flex-grow-1\">\r\n                        <button type=\"button\" id=\"cancel-save\" class=\"btn btn-secondary\" (click)=\"previousState()\">\r\n                            <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n                        </button>\r\n                        <button type=\"submit\" id=\"save-entity\" [disabled]=\"!isAllowedToSave || isSaving\" class=\"btn btn-primary\">\r\n                            <fa-icon [icon]=\"faSave\" />&nbsp;<span jhiTranslate=\"entity.action.save\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "faq", "course", "title", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "FaqUpdateComponent", "alertService", "inject", "AlertService", "faqService", "FaqService", "activatedRoute", "ActivatedRoute", "navigationUtilService", "ArtemisNavigationUtilService", "router", "Router", "profileService", "ProfileService", "accountService", "AccountService", "artemisIntelligenceService", "ArtemisIntelligenceService", "isSaving", "isAllowedToSave", "existingCategories", "faqCategories", "courseId", "isAtLeastInstructor", "domainActionsDescription", "FormulaAction", "irisEnabled", "toSignal", "getProfileInfo", "pipe", "map", "profileInfo", "activeProfiles", "includes", "PROFILE_IRIS", "initialValue", "artemisIntelligenceActions", "computed", "RewriteAction", "RewritingVariant", "FAQ", "faQuestionCircle", "faSave", "faBan", "ngOnInit", "Number", "snapshot", "paramMap", "get", "parent", "data", "subscribe", "Faq", "loadCourseFaqCategories", "id", "isAtLeastInstructorInCourse", "categories", "validate", "previousState", "navigateBack", "save", "faqState", "FaqState", "ACCEPTED", "PROPOSED", "undefined", "subscribeToSaveResponse", "update", "create", "result", "next", "response", "onSaveSuccess", "body", "error", "onSaveError", "showSuccessAlert", "navigate", "find", "faqBody", "newlyCreated", "messageKey", "success", "questionTitle", "errorRes", "addErrorAlert", "message", "params", "onError", "updateCategories", "questionAnswer", "trim", "length", "handleMarkdownChange", "markdown", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "_r1", "\u0275\u0275template", "FaqUpdateComponent_Conditional_44_Template", "\u0275\u0275property", "\u0275\u0275conditional", "CategorySelectorComponent", "MarkdownEditorMonacoComponent", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "styles"]
}
