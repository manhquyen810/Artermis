{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/result/repository.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { FileType } from '../../programming/shared/code-editor/model/code-editor.model';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RepositoryService {\r\n    private http = inject(HttpClient);\r\n\r\n    private resourceUrl = 'api/programming/repository';\r\n\r\n    /**\r\n     * Checks whether the participation data is clean or not.\r\n     * @param participationId The identifier of the participation.\r\n     */\r\n    isClean(participationId: number): Observable<any> {\r\n        return this.http.get<any>(`${this.resourceUrl}/${participationId}`).pipe(map((data) => ({ isClean: data.isClean })));\r\n    }\r\n\r\n    /**\r\n     * Commits to certain participation.\r\n     * @param participationId The identifier of the participation.\r\n     */\r\n    commit(participationId: number): Observable<void> {\r\n        return this.http.post<void>(`${this.resourceUrl}/${participationId}/commit`, {});\r\n    }\r\n\r\n    /**\r\n     * Pulls from a certain participation.\r\n     * @param participationId The identifier of the participation.\r\n     */\r\n    pull(participationId: number): Observable<void> {\r\n        return this.http.get<void>(`${this.resourceUrl}/${participationId}/pull`, {});\r\n    }\r\n}\r\n\r\nexport interface IRepositoryFileService {\r\n    query: (participationId: number) => Observable<{ [fileName: string]: FileType }>;\r\n    get: (participationId: number, fileName: string) => Observable<any>;\r\n    update: (participationId: number, fileName: string, fileContent: string) => Observable<any>;\r\n    createFile: (participationId: number, fileName: string) => Observable<void>;\r\n    createFolder: (participationId: number, folderName: string) => Observable<void>;\r\n    rename: (participationId: number, currentFilePath: string, newFilename: string) => Observable<void>;\r\n    delete: (participationId: number, fileName: string) => Observable<void>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RepositoryFileService implements IRepositoryFileService {\r\n    private http = inject(HttpClient);\r\n\r\n    private resourceUrl = 'api/programming/repository';\r\n\r\n    /**\r\n     * Get files of a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     */\r\n    query(participationId: number): Observable<{ [fileName: string]: FileType }> {\r\n        return this.http.get<{ [fileName: string]: FileType }>(`${this.resourceUrl}/${participationId}/files`);\r\n    }\r\n\r\n    /**\r\n     * Get a specific file from a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     * @param fileName The name of the file to be obtained.\r\n     */\r\n    get(participationId: number, fileName: string): Observable<any> {\r\n        return this.http\r\n            .get(`${this.resourceUrl}/${participationId}/file`, { params: new HttpParams().set('file', fileName), responseType: 'text' })\r\n            .pipe(map((data) => ({ fileContent: data })));\r\n    }\r\n\r\n    /**\r\n     * Update a file in a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     * @param fileName The name of the file to be updated.\r\n     * @param fileContent The content of the file.\r\n     */\r\n    update(participationId: number, fileName: string, fileContent: string): Observable<any> {\r\n        return this.http.put(`${this.resourceUrl}/${participationId}/file`, fileContent, {\r\n            params: new HttpParams().set('file', fileName),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a file in a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     * @param fileName The name of the file to be created.\r\n     */\r\n    createFile(participationId: number, fileName: string): Observable<void> {\r\n        return this.http.post<void>(`${this.resourceUrl}/${participationId}/file`, '', { params: new HttpParams().set('file', fileName) });\r\n    }\r\n\r\n    /**\r\n     * Create a folder in a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     * @param folderName The name of the folder to be created.\r\n\r\n     */\r\n    createFolder(participationId: number, folderName: string): Observable<void> {\r\n        return this.http.post<void>(`${this.resourceUrl}/${participationId}/folder`, '', { params: new HttpParams().set('folder', folderName) });\r\n    }\r\n\r\n    /**\r\n     * Rename a file in a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     * @param currentFilePath The path of the file to be renamed.\r\n     * @param newFilename The new name of the file.\r\n\r\n     */\r\n    rename(participationId: number, currentFilePath: string, newFilename: string): Observable<void> {\r\n        return this.http.post<void>(`${this.resourceUrl}/${participationId}/rename-file`, { currentFilePath, newFilename });\r\n    }\r\n\r\n    /**\r\n     * Delete a file from a specific participation.\r\n     * @param participationId The identifier of the participation.\r\n     * @param fileName The name of the file to be deleted.\r\n     */\r\n    delete(participationId: number, fileName: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${participationId}/file`, { params: new HttpParams().set('file', fileName) });\r\n    }\r\n}\r\n"],
  "mappings": "uGAOA,IAAaA,GAAiB,IAAA,CAAxB,MAAOA,CAAiB,CAClBC,KAAOC,EAAOC,CAAU,EAExBC,YAAc,6BAMtBC,QAAQC,EAAuB,CAC3B,OAAO,KAAKL,KAAKM,IAAS,GAAG,KAAKH,WAAW,IAAIE,CAAe,EAAE,EAAEE,KAAKC,EAAKC,IAAU,CAAEL,QAASK,EAAKL,OAAO,EAAG,CAAC,CACvH,CAMAM,OAAOL,EAAuB,CAC1B,OAAO,KAAKL,KAAKW,KAAW,GAAG,KAAKR,WAAW,IAAIE,CAAe,UAAW,CAAA,CAAE,CACnF,CAMAO,KAAKP,EAAuB,CACxB,OAAO,KAAKL,KAAKM,IAAU,GAAG,KAAKH,WAAW,IAAIE,CAAe,QAAS,CAAA,CAAE,CAChF,4CA3BSN,EAAiB,6BAAjBA,EAAiBc,QAAjBd,EAAiBe,UAAAC,WADJ,MAAM,CAAA,SACnBhB,CAAiB,GAAA,EAyCjBiB,GAAqB,IAAA,CAA5B,MAAOA,CAAqB,CACtBhB,KAAOC,EAAOC,CAAU,EAExBC,YAAc,6BAMtBc,MAAMZ,EAAuB,CACzB,OAAO,KAAKL,KAAKM,IAAsC,GAAG,KAAKH,WAAW,IAAIE,CAAe,QAAQ,CACzG,CAOAC,IAAID,EAAyBa,EAAgB,CACzC,OAAO,KAAKlB,KACPM,IAAI,GAAG,KAAKH,WAAW,IAAIE,CAAe,QAAS,CAAEc,OAAQ,IAAIC,EAAU,EAAGC,IAAI,OAAQH,CAAQ,EAAGI,aAAc,MAAM,CAAE,EAC3Hf,KAAKC,EAAKC,IAAU,CAAEc,YAAad,CAAI,EAAG,CAAC,CACpD,CAQAe,OAAOnB,EAAyBa,EAAkBK,EAAmB,CACjE,OAAO,KAAKvB,KAAKyB,IAAI,GAAG,KAAKtB,WAAW,IAAIE,CAAe,QAASkB,EAAa,CAC7EJ,OAAQ,IAAIC,EAAU,EAAGC,IAAI,OAAQH,CAAQ,EAChD,CACL,CAOAQ,WAAWrB,EAAyBa,EAAgB,CAChD,OAAO,KAAKlB,KAAKW,KAAW,GAAG,KAAKR,WAAW,IAAIE,CAAe,QAAS,GAAI,CAAEc,OAAQ,IAAIC,EAAU,EAAGC,IAAI,OAAQH,CAAQ,CAAC,CAAE,CACrI,CAQAS,aAAatB,EAAyBuB,EAAkB,CACpD,OAAO,KAAK5B,KAAKW,KAAW,GAAG,KAAKR,WAAW,IAAIE,CAAe,UAAW,GAAI,CAAEc,OAAQ,IAAIC,EAAU,EAAGC,IAAI,SAAUO,CAAU,CAAC,CAAE,CAC3I,CASAC,OAAOxB,EAAyByB,EAAyBC,EAAmB,CACxE,OAAO,KAAK/B,KAAKW,KAAW,GAAG,KAAKR,WAAW,IAAIE,CAAe,eAAgB,CAAEyB,gBAAAA,EAAiBC,YAAAA,CAAW,CAAE,CACtH,CAOAC,OAAO3B,EAAyBa,EAAgB,CAC5C,OAAO,KAAKlB,KAAKgC,OAAa,GAAG,KAAK7B,WAAW,IAAIE,CAAe,QAAS,CAAEc,OAAQ,IAAIC,EAAU,EAAGC,IAAI,OAAQH,CAAQ,CAAC,CAAE,CACnI,4CAzESF,EAAqB,6BAArBA,EAAqBH,QAArBG,EAAqBF,UAAAC,WADR,MAAM,CAAA,SACnBC,CAAqB,GAAA",
  "names": ["RepositoryService", "http", "inject", "HttpClient", "resourceUrl", "isClean", "participationId", "get", "pipe", "map", "data", "commit", "post", "pull", "factory", "\u0275fac", "providedIn", "RepositoryFileService", "query", "fileName", "params", "HttpParams", "set", "responseType", "fileContent", "update", "put", "createFile", "createFolder", "folderName", "rename", "currentFilePath", "newFilename", "delete"]
}
