{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/quiz-exercise-export.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-export.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\n\r\nimport { QuizExerciseService } from './quiz-exercise.service';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { QuizQuestion } from 'app/entities/quiz/quiz-question.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-exercise-export',\r\n    templateUrl: './quiz-exercise-export.component.html',\r\n    styleUrls: ['./quiz-exercise-export.component.scss', '../shared/quiz.scss'],\r\n    imports: [TranslateDirective, FormsModule],\r\n})\r\nexport class QuizExerciseExportComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private courseService = inject(CourseManagementService);\r\n    private alertService = inject(AlertService);\r\n\r\n    questions: QuizQuestion[] = new Array(0);\r\n    courseId: number;\r\n    course: Course;\r\n\r\n    /**\r\n     * Load the quizzes of the course for export on init.\r\n     */\r\n    ngOnInit() {\r\n        this.route.params.subscribe((params) => {\r\n            this.courseId = params['courseId'];\r\n            this.loadForCourse(this.courseId);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads course for the given id and populates quiz exercises for the given course id\r\n     * @param courseId Id of the course\r\n     */\r\n    private loadForCourse(courseId: number) {\r\n        this.courseService.find(this.courseId).subscribe((courseResponse) => {\r\n            this.course = courseResponse.body!;\r\n            // For the given course, get list of all quiz exercises. And for all quiz exercises, get list of all questions in a quiz exercise,\r\n            this.quizExerciseService.findForCourse(courseId).subscribe({\r\n                next: (res: HttpResponse<QuizExercise[]>) => {\r\n                    const quizExercises = res.body!;\r\n                    for (const quizExercise of quizExercises) {\r\n                        // reconnect course and exercise in case we need this information later\r\n                        quizExercise.course = this.course;\r\n                        this.quizExerciseService.find(quizExercise.id!).subscribe((response: HttpResponse<QuizExercise>) => {\r\n                            const quizExerciseResponse = response.body!;\r\n                            quizExerciseResponse.quizQuestions!.forEach((question) => {\r\n                                question.exercise = quizExercise;\r\n                                this.questions.push(question);\r\n                            });\r\n                        });\r\n                    }\r\n                },\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exports selected questions into json file.\r\n     */\r\n    exportQuiz() {\r\n        this.quizExerciseService.exportQuiz(this.questions, false);\r\n    }\r\n}\r\n", "<div>\r\n    <h2>\r\n        @if (course) {\r\n            <span jhiTranslate=\"artemisApp.quizExercise.export.title\" [translateValues]=\"{ param: course.title }\"></span>\r\n        }\r\n    </h2>\r\n    <div class=\"row\"></div>\r\n    <br />\r\n    <div class=\"table-responsive\">\r\n        <table class=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th width=\"50%\">\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.export.questionTitle\"></span>\r\n                    </th>\r\n                    <th width=\"25%\">\r\n                        <span jhiTranslate=\"artemisApp.quizExercise.export.quizExerciseTitle\"></span>\r\n                    </th>\r\n                    <th width=\"20%\">\r\n                        <span jhiTranslate=\"artemisApp.exercise.type\"></span>\r\n                    </th>\r\n                    <th width=\"5%\">\r\n                        <span jhiTranslate=\"entity.action.export\"></span>\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (question of questions; track question) {\r\n                    <tr>\r\n                        <td width=\"50%\">{{ question.title }}</td>\r\n                        <td width=\"25%\">{{ question.exercise?.title || '' }}</td>\r\n                        <td width=\"20%\">{{ question.type }}</td>\r\n                        <td width=\"5%\" class=\"checkbox\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"question.exportQuiz\" />\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"edit-quiz-footer\">\r\n        <div class=\"container\">\r\n            <div class=\"edit-quiz-footer-content\">\r\n                <div class=\"form-group\"></div>\r\n                <div class=\"form-group\">\r\n                    <button class=\"btn btn-success\" (click)=\"exportQuiz()\" jhiTranslate=\"artemisApp.quizExercise.export.export\"></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "course", "title", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "question_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "exportQuiz", "\u0275\u0275resetView", "\u0275\u0275textInterpolate", "exercise", "type", "\u0275\u0275twoWayProperty", "QuizExerciseExportComponent", "route", "inject", "ActivatedRoute", "quizExerciseService", "QuizExerciseService", "courseService", "CourseManagementService", "alertService", "AlertService", "questions", "Array", "courseId", "ngOnInit", "params", "subscribe", "loadForCourse", "find", "courseResponse", "body", "findForCourse", "next", "res", "quizExercises", "quizExercise", "id", "response", "quizQuestions", "forEach", "question", "push", "error", "onError", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "QuizExerciseExportComponent_Conditional_4_Template", "\u0275\u0275repeaterCreate", "QuizExerciseExportComponent_For_43_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275listener", "\u0275\u0275conditional", "\u0275\u0275repeater", "TranslateDirective", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "styles"]
}
