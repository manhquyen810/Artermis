{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-registration/course-registration-prerequisites-modal/course-prerequisites-modal.component.ts", "src/main/webapp/app/overview/course-registration/course-registration-prerequisites-modal/course-prerequisites-modal.component.html", "src/main/webapp/app/overview/course-registration/course-prerequisites-button/course-prerequisites-button.component.ts", "src/main/webapp/app/overview/course-registration/course-prerequisites-button/course-prerequisites-button.component.html", "src/main/webapp/app/utils/regex.util.ts", "src/main/webapp/app/overview/course-registration/course-registration-button/course-registration-button.component.ts", "src/main/webapp/app/overview/course-registration/course-registration-button/course-registration-button.component.html"],
  "sourcesContent": ["import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PrerequisiteService } from 'app/course/competencies/prerequisite.service';\r\nimport { Prerequisite } from 'app/entities/prerequisite.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CompetencyCardComponent } from 'app/course/competencies/competency-card/competency-card.component';\r\n\r\n@Component({\r\n    selector: 'jhi-course-prerequisites-modal',\r\n    templateUrl: './course-prerequisites-modal.component.html',\r\n    imports: [TranslateDirective, CompetencyCardComponent],\r\n})\r\nexport class CoursePrerequisitesModalComponent implements OnInit {\r\n    private alertService = inject(AlertService);\r\n    private activeModal = inject(NgbActiveModal);\r\n    private prerequisiteService = inject(PrerequisiteService);\r\n\r\n    @Input()\r\n    courseId: number;\r\n\r\n    isLoading = false;\r\n    prerequisites: Prerequisite[] = [];\r\n\r\n    ngOnInit(): void {\r\n        if (this.courseId) {\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the prerequisites for the specified course id\r\n     * Displays an error alert if it fails\r\n     */\r\n    loadData() {\r\n        this.isLoading = true;\r\n        this.prerequisiteService\r\n            .getAllForCourse(this.courseId)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (prerequisites) => {\r\n                    this.prerequisites = prerequisites.body ?? [];\r\n                },\r\n                error: (error: string) => {\r\n                    this.alertService.error(error);\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Dismisses the currently active modal\r\n     */\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.prerequisite.title\"></h4>\r\n    <button (click)=\"clear()\" aria-hidden=\"true\" class=\"btn-close\" data-dismiss=\"modal\" type=\"button\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"container\">\r\n        @if (isLoading) {\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"spinner-border\" role=\"status\">\r\n                    <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n                </div>\r\n            </div>\r\n        } @else {\r\n            <div class=\"row justify-content-center gx-5 gy-2\">\r\n                @for (prerequisite of prerequisites; track prerequisite.id; let i = $index) {\r\n                    <jhi-competency-card class=\"col-12 col-lg-6\" [competency]=\"prerequisite\" [isPrerequisite]=\"true\" [noProgressRings]=\"true\" />\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CoursePrerequisitesModalComponent } from 'app/overview/course-registration/course-registration-prerequisites-modal/course-prerequisites-modal.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-course-prerequisites-button',\r\n    templateUrl: './course-prerequisites-button.component.html',\r\n    imports: [TranslateDirective],\r\n})\r\nexport class CoursePrerequisitesButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    @Input() course: Course;\r\n\r\n    /**\r\n     * Opens a modal with the prerequisites for the course\r\n     * @param courseId The course id for which to show the prerequisites\r\n     */\r\n    showPrerequisites(courseId: number) {\r\n        const modalRef = this.modalService.open(CoursePrerequisitesModalComponent, { size: 'xl' });\r\n        modalRef.componentInstance.courseId = courseId;\r\n    }\r\n}\r\n", "@if (course.prerequisites?.length) {\r\n    <button class=\"btn btn-secondary\" (click)=\"showPrerequisites(course.id!)\" jhiTranslate=\"artemisApp.studentDashboard.enroll.coursePrerequisites\"></button>\r\n}\r\n", "export const matchesRegexFully = (input: string | undefined, regex: string | undefined): boolean => {\r\n    if (!regex) {\r\n        // count as match if the regex is not defined\r\n        return true;\r\n    }\r\n    if (!input) {\r\n        // count as no match if the input is not defined\r\n        return false;\r\n    }\r\n    // we want to test for a full match, so wrap the regex in ^ and $\r\n    if (!regex.startsWith('^')) {\r\n        regex = '^' + regex;\r\n    }\r\n    if (!regex.endsWith('$')) {\r\n        regex = regex + '$';\r\n    }\r\n    // string.match returns null when there is no match and an array containing matches otherwise\r\n    const matches = input.match(new RegExp(regex));\r\n    return !!matches;\r\n};\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { matchesRegexFully } from 'app/utils/regex.util';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ConfirmAutofocusButtonComponent } from 'app/shared/components/confirm-autofocus-button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-course-registration-button',\r\n    templateUrl: './course-registration-button.component.html',\r\n    imports: [ConfirmAutofocusButtonComponent, TranslateDirective],\r\n})\r\nexport class CourseRegistrationButtonComponent implements OnInit {\r\n    private accountService = inject(AccountService);\r\n    private courseService = inject(CourseManagementService);\r\n    private profileService = inject(ProfileService);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() course: Course;\r\n    @Output() onRegistration = new EventEmitter<void>();\r\n\r\n    userIsAllowedToRegister = false;\r\n    loading = false;\r\n\r\n    loadUserIsAllowedToRegister() {\r\n        this.loading = true;\r\n        this.accountService.identity().then((user) => {\r\n            this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                if (profileInfo) {\r\n                    this.userIsAllowedToRegister = matchesRegexFully(user!.login, profileInfo.allowedCourseRegistrationUsernamePattern);\r\n                }\r\n            });\r\n        });\r\n        this.loading = false;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.loadUserIsAllowedToRegister();\r\n    }\r\n\r\n    /**\r\n     * Enroll the logged-in user for the course\r\n     * @param courseId The id of course to enroll the user in\r\n     */\r\n    registerForCourse(courseId: number) {\r\n        this.courseService.registerForCourse(courseId).subscribe({\r\n            next: () => {\r\n                this.alertService.success('artemisApp.studentDashboard.enroll.enrollSuccessful');\r\n                this.onRegistration.emit();\r\n            },\r\n            error: (error: string) => {\r\n                this.alertService.error(error);\r\n            },\r\n        });\r\n    }\r\n}\r\n", "@if (course.enrollmentConfirmationMessage!) {\r\n    <jhi-confirm-button\r\n        (onConfirm)=\"registerForCourse(course.id!)\"\r\n        title=\"artemisApp.studentDashboard.enroll.enrollInCourse\"\r\n        confirmationText=\"{{ course.enrollmentConfirmationMessage! }}\"\r\n        confirmationTitle=\"artemisApp.studentDashboard.enroll.courseEnrollmentConfirmationTitle\"\r\n        [confirmationTitleTranslationParams]=\"{ courseName: course.title! }\"\r\n        [disabled]=\"loading\"\r\n        [translateText]=\"false\"\r\n        [textIsMarkdown]=\"true\"\r\n    />\r\n}\r\n@if (!course.enrollmentConfirmationMessage!) {\r\n    <button class=\"btn btn-primary\" (click)=\"registerForCourse(course.id!)\" [disabled]=\"loading\" jhiTranslate=\"artemisApp.studentDashboard.enroll.enrollInCourse\"></button>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "prerequisite_r1", "\u0275\u0275repeaterCreate", "CoursePrerequisitesModalComponent_Conditional_12_For_4_Template", "_forTrack0", "\u0275\u0275repeater", "ctx_r1", "prerequisites", "CoursePrerequisitesModalComponent", "alertService", "inject", "AlertService", "activeModal", "NgbActiveModal", "prerequisiteService", "PrerequisiteService", "courseId", "isLoading", "ngOnInit", "loadData", "getAllForCourse", "pipe", "finalize", "subscribe", "next", "body", "error", "clear", "dismiss", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275template", "CoursePrerequisitesModalComponent_Conditional_11_Template", "CoursePrerequisitesModalComponent_Conditional_12_Template", "\u0275\u0275conditional", "TranslateDirective", "CompetencyCardComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "showPrerequisites", "course", "id", "\u0275\u0275elementEnd", "CoursePrerequisitesButtonComponent", "modalService", "inject", "NgbModal", "courseId", "modalRef", "open", "CoursePrerequisitesModalComponent", "size", "componentInstance", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CoursePrerequisitesButtonComponent_Conditional_0_Template", "\u0275\u0275conditional", "prerequisites", "length", "TranslateDirective", "encapsulation", "matchesRegexFully", "input", "regex", "startsWith", "endsWith", "match", "RegExp", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "registerForCourse", "course", "id", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "enrollmentConfirmationMessage", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "title", "loading", "_r3", "CourseRegistrationButtonComponent", "accountService", "inject", "AccountService", "courseService", "CourseManagementService", "profileService", "ProfileService", "alertService", "AlertService", "onRegistration", "EventEmitter", "userIsAllowedToRegister", "loadUserIsAllowedToRegister", "identity", "then", "user", "getProfileInfo", "subscribe", "profileInfo", "matchesRegexFully", "login", "allowedCourseRegistrationUsernamePattern", "ngOnInit", "courseId", "next", "success", "emit", "error", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CourseRegistrationButtonComponent_Conditional_0_Template", "CourseRegistrationButtonComponent_Conditional_1_Template", "\u0275\u0275conditional", "ConfirmAutofocusButtonComponent", "TranslateDirective", "encapsulation"]
}
