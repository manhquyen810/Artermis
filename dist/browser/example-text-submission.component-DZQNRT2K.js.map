{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/manage/example-text-submission/example-text-submission-state.model.ts", "src/main/webapp/app/exercises/text/manage/example-text-submission/example-text-submission.component.ts", "src/main/webapp/app/exercises/text/manage/example-text-submission/example-text-submission.component.html"],
  "sourcesContent": ["export interface Context {\r\n    state: State;\r\n}\r\n\r\nexport enum SubmissionButtonStates {\r\n    NONE,\r\n    NEW,\r\n    UPDATE,\r\n    EDIT,\r\n}\r\n\r\nexport enum AssessButtonStates {\r\n    NONE,\r\n    ASSESS,\r\n    CREATE,\r\n    UPDATE,\r\n}\r\n\r\nexport enum UIStates {\r\n    SUBMISSION,\r\n    ASSESSMENT,\r\n}\r\n\r\nexport abstract class State {\r\n    protected constructor(\r\n        protected context: Context,\r\n        public readonly ui: UIStates,\r\n        public readonly submissionEditButton: SubmissionButtonStates,\r\n        public readonly assessButton: AssessButtonStates,\r\n    ) {}\r\n\r\n    edit(): void {\r\n        this.context.state = new EditState(this.context);\r\n    }\r\n\r\n    assess(): void {\r\n        this.context.state = new AssessState(this.context);\r\n    }\r\n\r\n    static initialWithContext = (context: Context): State => new NewState(context);\r\n    static forExistingAssessmentWithContext = (context: Context): State => new AssessState(context);\r\n    static forCompletion = (context: Context): State => new CompletionState(context);\r\n}\r\n\r\nclass NewState extends State {\r\n    constructor(context: Context) {\r\n        super(context, UIStates.SUBMISSION, SubmissionButtonStates.NEW, AssessButtonStates.NONE);\r\n    }\r\n}\r\n\r\nclass EditState extends State {\r\n    constructor(context: Context) {\r\n        super(context, UIStates.SUBMISSION, SubmissionButtonStates.UPDATE, AssessButtonStates.ASSESS);\r\n    }\r\n\r\n    edit() {}\r\n    assess() {\r\n        this.context.state = new NewAssessmentState(this.context);\r\n    }\r\n}\r\n\r\nclass NewAssessmentState extends State {\r\n    constructor(context: Context) {\r\n        super(context, UIStates.ASSESSMENT, SubmissionButtonStates.EDIT, AssessButtonStates.CREATE);\r\n    }\r\n}\r\n\r\nclass AssessState extends State {\r\n    constructor(context: Context) {\r\n        super(context, UIStates.ASSESSMENT, SubmissionButtonStates.EDIT, AssessButtonStates.UPDATE);\r\n    }\r\n    assess() {}\r\n}\r\n\r\nclass CompletionState extends State {\r\n    constructor(context: Context) {\r\n        super(context, UIStates.ASSESSMENT, SubmissionButtonStates.NONE, AssessButtonStates.NONE);\r\n    }\r\n    edit() {}\r\n    assess() {}\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { EntityResponseType, ExampleSubmissionService } from 'app/exercises/shared/example-submission/example-submission.service';\r\nimport { UnreferencedFeedbackComponent } from 'app/exercises/shared/unreferenced-feedback/unreferenced-feedback.component';\r\nimport { TextAssessmentService } from 'app/exercises/text/assess/text-assessment.service';\r\nimport { TutorParticipationService } from 'app/exercises/shared/dashboards/tutor/tutor-participation.service';\r\nimport { GuidedTourService } from 'app/guided-tour/guided-tour.service';\r\nimport { tutorAssessmentTour } from 'app/guided-tour/tours/tutor-assessment-tour';\r\nimport { ExampleSubmission, ExampleSubmissionMode } from 'app/entities/example-submission.model';\r\nimport { Feedback, FeedbackCorrectionError, FeedbackType } from 'app/entities/feedback.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { TextAssessmentBaseComponent } from 'app/exercises/text/assess/text-assessment-base.component';\r\nimport { notUndefined } from 'app/shared/util/global.utils';\r\nimport { AssessButtonStates, Context, State, SubmissionButtonStates, UIStates } from 'app/exercises/text/manage/example-text-submission/example-text-submission-state.model';\r\nimport { filter, mergeMap, switchMap, tap } from 'rxjs/operators';\r\nimport { ExampleSubmissionAssessCommand, FeedbackMarker } from 'app/exercises/shared/example-submission/example-submission-assess-command';\r\nimport { getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { faEdit, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ArtemisNavigationUtilService } from 'app/utils/navigation.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ConfirmAutofocusButtonComponent } from 'app/shared/components/confirm-autofocus-button.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { ScoreDisplayComponent } from 'app/shared/score-display/score-display.component';\r\nimport { TextAssessmentAreaComponent } from '../../assess/text-assessment-area/text-assessment-area.component';\r\nimport { AssessmentInstructionsComponent } from 'app/assessment/assessment-instructions/assessment-instructions/assessment-instructions.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ntype ExampleSubmissionResponseType = EntityResponseType;\r\n\r\n@Component({\r\n    selector: 'jhi-example-text-submission',\r\n    templateUrl: './example-text-submission.component.html',\r\n    styleUrls: ['./example-text-submission.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        HelpIconComponent,\r\n        FormsModule,\r\n        FaIconComponent,\r\n        ConfirmAutofocusButtonComponent,\r\n        ResizeableContainerComponent,\r\n        ScoreDisplayComponent,\r\n        TextAssessmentAreaComponent,\r\n        AssessmentInstructionsComponent,\r\n        UnreferencedFeedbackComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ExampleTextSubmissionComponent extends TextAssessmentBaseComponent implements OnInit, Context, FeedbackMarker {\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private exampleSubmissionService = inject(ExampleSubmissionService);\r\n    private tutorParticipationService = inject(TutorParticipationService);\r\n    private guidedTourService = inject(GuidedTourService);\r\n    private navigationUtilService = inject(ArtemisNavigationUtilService);\r\n    private exerciseService = inject(ExerciseService);\r\n\r\n    isNewSubmission: boolean;\r\n    areNewAssessments = true;\r\n\r\n    // Is set to true, if there are any changes to the submission.text or exampleSubmissionusedForTutorial\r\n    unsavedSubmissionChanges = false;\r\n    private exerciseId: number;\r\n    private exampleSubmissionId: number;\r\n    exampleSubmission = new ExampleSubmission();\r\n    assessmentsAreValid = false;\r\n    result?: Result;\r\n    unreferencedFeedback: Feedback[] = [];\r\n    totalScore: number;\r\n    readOnly: boolean;\r\n    toComplete: boolean;\r\n    state = State.initialWithContext(this);\r\n    SubmissionButtonStates = SubmissionButtonStates;\r\n    AssessButtonStates = AssessButtonStates;\r\n    UIStates = UIStates;\r\n    selectedMode: ExampleSubmissionMode;\r\n    ExampleSubmissionMode = ExampleSubmissionMode;\r\n    referencedBlocksInExampleSubmission: string[] = [];\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faEdit = faEdit;\r\n    farListAlt = faListAlt;\r\n\r\n    constructor() {\r\n        super();\r\n        this.textBlockRefs = [];\r\n        this.unusedTextBlockRefs = [];\r\n        this.submission = new TextSubmission();\r\n    }\r\n\r\n    private get referencedFeedback(): Feedback[] {\r\n        return this.textBlockRefs.map(({ feedback }) => feedback).filter(notUndefined) as Feedback[];\r\n    }\r\n\r\n    private get assessments(): Feedback[] {\r\n        return [...this.referencedFeedback, ...this.unreferencedFeedback];\r\n    }\r\n\r\n    /**\r\n     * Reads route params and loads the example submission on initialWithContext.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        await super.ngOnInit();\r\n        // (+) converts string 'id' to a number\r\n        this.exerciseId = Number(this.route.snapshot.paramMap.get('exerciseId'));\r\n        const exampleSubmissionId = this.route.snapshot.paramMap.get('exampleSubmissionId');\r\n        this.readOnly = !!this.route.snapshot.queryParamMap.get('readOnly');\r\n        this.toComplete = !!this.route.snapshot.queryParamMap.get('toComplete');\r\n\r\n        if (exampleSubmissionId === 'new') {\r\n            this.isNewSubmission = true;\r\n            this.exampleSubmissionId = -1;\r\n        } else {\r\n            this.exampleSubmissionId = +exampleSubmissionId!;\r\n        }\r\n        this.loadAll();\r\n    }\r\n\r\n    /**\r\n     * Loads the exercise.\r\n     * Also loads the example submission if the new parameter is not set.\r\n     */\r\n    private loadAll(): void {\r\n        this.exerciseService.find(this.exerciseId).subscribe((exerciseResponse: HttpResponse<TextExercise>) => {\r\n            this.exercise = exerciseResponse.body!;\r\n            this.guidedTourService.enableTourForExercise(this.exercise, tutorAssessmentTour, false);\r\n        });\r\n\r\n        if (this.isNewSubmission) {\r\n            return; // We don't need to load anything else\r\n        }\r\n        this.state.edit();\r\n\r\n        this.exampleSubmissionService.get(this.exampleSubmissionId).subscribe(async (exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n            this.exampleSubmission = exampleSubmissionResponse.body!;\r\n            this.submission = this.exampleSubmission.submission as TextSubmission;\r\n            await this.fetchExampleResult();\r\n            if (this.toComplete) {\r\n                this.state = State.forCompletion(this);\r\n                this.restrictSelectableTextBlocks();\r\n                this.textBlockRefs.forEach((ref) => delete ref.feedback);\r\n                this.validateFeedback();\r\n            } else if (this.result?.id) {\r\n                this.state = State.forExistingAssessmentWithContext(this);\r\n            }\r\n            // do this here to make sure everything is loaded before the guided tour step is loaded\r\n            this.guidedTourService.componentPageLoaded();\r\n            if (this.exampleSubmission.usedForTutorial) {\r\n                this.selectedMode = ExampleSubmissionMode.ASSESS_CORRECTLY;\r\n            } else {\r\n                this.selectedMode = ExampleSubmissionMode.READ_AND_CONFIRM;\r\n            }\r\n        });\r\n    }\r\n\r\n    private restrictSelectableTextBlocks() {\r\n        this.textBlockRefs.forEach((ref) => {\r\n            if (ref.block && this.referencedBlocksInExampleSubmission.includes(ref.block.id!)) {\r\n                ref.selectable = true;\r\n                ref.highlighted = true;\r\n                ref.deletable = false;\r\n            } else {\r\n                ref.selectable = false;\r\n                ref.highlighted = false;\r\n                ref.deletable = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private fetchExampleResult(): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.assessmentsService\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n                .getExampleResult(this.exerciseId, this.submission?.id!)\r\n                .pipe(filter(notUndefined))\r\n                .subscribe((result) => {\r\n                    if (result && result.id) {\r\n                        this.result = result;\r\n                        this.exampleSubmission.submission = this.submission = result.submission;\r\n                        this.updateExampleAssessmentSolution(result);\r\n                    } else {\r\n                        if (result && !result.id) {\r\n                            this.updateExampleAssessmentSolution(result);\r\n                        }\r\n                        this.result = new Result();\r\n                        this.result.submission = this.submission;\r\n                        this.submission!.results = [this.result];\r\n                    }\r\n                    this.prepareTextBlocksAndFeedbacks();\r\n                    this.areNewAssessments = this.assessments.length <= 0;\r\n                    this.validateFeedback();\r\n                    resolve();\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the example submission.\r\n     */\r\n    createNewExampleTextSubmission(): void {\r\n        const newExampleSubmission = new ExampleSubmission();\r\n        newExampleSubmission.submission = this.submission!;\r\n        newExampleSubmission.exercise = this.exercise;\r\n        newExampleSubmission.usedForTutorial = this.selectedMode === ExampleSubmissionMode.ASSESS_CORRECTLY;\r\n\r\n        this.exampleSubmissionService.create(newExampleSubmission, this.exerciseId).subscribe({\r\n            next: (exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n                this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                this.exampleSubmission.exercise = this.exercise;\r\n                this.exampleSubmissionId = this.exampleSubmission.id!;\r\n                this.submission = this.exampleSubmission.submission as TextSubmission;\r\n                this.isNewSubmission = false;\r\n                this.unsavedSubmissionChanges = false;\r\n                this.state.edit();\r\n\r\n                // Update the url with the new id, without reloading the page, to make the history consistent\r\n                this.navigationUtilService.replaceNewWithIdInUrl(window.location.href, this.exampleSubmissionId);\r\n\r\n                this.alertService.success('artemisApp.exampleSubmission.submitSuccessful');\r\n            },\r\n            error: this.alertService.error,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the example submission.\r\n     */\r\n    updateExampleTextSubmission(): void {\r\n        this.saveSubmissionIfNeeded().subscribe({\r\n            next: () => {\r\n                this.state.edit();\r\n                this.alertService.success('artemisApp.exampleSubmission.saveSuccessful');\r\n            },\r\n            error: this.alertService.error,\r\n        });\r\n    }\r\n\r\n    saveSubmissionIfNeeded(): Observable<ExampleSubmissionResponseType> {\r\n        // If there are no unsaved changes, no need for server call\r\n        if (!this.unsavedSubmissionChanges) {\r\n            return of({} as ExampleSubmissionResponseType);\r\n        }\r\n\r\n        return this.exampleSubmissionService.update(this.exampleSubmissionForNetwork(), this.exerciseId).pipe(\r\n            tap((exampleSubmissionResponse) => {\r\n                this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                this.unsavedSubmissionChanges = false;\r\n            }),\r\n        );\r\n    }\r\n\r\n    public async startAssessment(): Promise<void> {\r\n        this.exampleSubmissionService\r\n            .prepareForAssessment(this.exerciseId, this.exampleSubmissionId)\r\n            .pipe(\r\n                mergeMap(() => {\r\n                    return this.exampleSubmissionService.get(this.exampleSubmissionId);\r\n                }),\r\n            )\r\n            .subscribe((exampleSubmissionResponse: HttpResponse<ExampleSubmission>) => {\r\n                this.exampleSubmission = exampleSubmissionResponse.body!;\r\n                this.submission = this.exampleSubmission.submission as TextSubmission;\r\n\r\n                this.result = new Result();\r\n                this.result.submission = this.submission;\r\n                this.submission!.results = [this.result];\r\n                this.prepareTextBlocksAndFeedbacks();\r\n                this.areNewAssessments = this.assessments.length <= 0;\r\n                this.validateFeedback();\r\n                this.state.assess();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks if the score boundaries have been respected and save the assessment.\r\n     */\r\n    public saveAssessments(): void {\r\n        this.validateFeedback();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.textAssessment.error.invalidAssessments');\r\n            return;\r\n        }\r\n\r\n        this.saveSubmissionIfNeeded()\r\n            .pipe(switchMap(() => this.assessmentsService.saveExampleAssessment(this.exerciseId, this.exampleSubmission.id!, this.assessments, this.textBlocksWithFeedback)))\r\n            .subscribe({\r\n                next: (response) => {\r\n                    this.result = response.body!;\r\n                    this.areNewAssessments = false;\r\n                    this.state.assess();\r\n                    this.alertService.success('artemisApp.textAssessment.saveSuccessful');\r\n                },\r\n                error: this.alertService.error,\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Redirects back to the assessment dashboard if route param readOnly or toComplete is set.\r\n     * Otherwise redirects back to the exercise's edit view either for exam exercises or normal exercises.\r\n     */\r\n    async back(): Promise<void> {\r\n        const courseId = getCourseFromExercise(this.exercise!)?.id;\r\n        // check if exam exercise\r\n        if (this.exercise?.exerciseGroup) {\r\n            const examId = this.exercise.exerciseGroup.exam?.id;\r\n            const exerciseGroupId = this.exercise.exerciseGroup.id;\r\n            if (this.readOnly || this.toComplete) {\r\n                await this.router.navigate(['/course-management', courseId, 'assessment-dashboard', this.exerciseId]);\r\n            } else {\r\n                await this.router.navigate([\r\n                    '/course-management',\r\n                    courseId,\r\n                    'exams',\r\n                    examId,\r\n                    'exercise-groups',\r\n                    exerciseGroupId,\r\n                    'text-exercises',\r\n                    this.exerciseId,\r\n                    'example-submissions',\r\n                ]);\r\n            }\r\n        } else {\r\n            if (this.readOnly || this.toComplete) {\r\n                this.router.navigate(['/course-management', courseId, 'assessment-dashboard', this.exerciseId]);\r\n            } else {\r\n                this.router.navigate(['/course-management', courseId, 'text-exercises', this.exerciseId, 'example-submissions']);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the assessment of the tutor to the example submission tutorial.\r\n     * The tutor is informed if its assessment is different from the one of the instructor.\r\n     */\r\n    checkAssessment(): void {\r\n        this.validateFeedback();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.textAssessment.error.invalidAssessments');\r\n            return;\r\n        }\r\n\r\n        const command = new ExampleSubmissionAssessCommand(this.tutorParticipationService, this.alertService, this);\r\n        command.assessExampleSubmission(this.exampleSubmissionForNetwork(), this.exerciseId);\r\n    }\r\n\r\n    /**\r\n     * Mark all referenced and unreferenced feedback as 'CORRECT'\r\n     */\r\n    markAllFeedbackToCorrect() {\r\n        this.textBlockRefs\r\n            .map((ref) => ref.feedback)\r\n            .filter((feedback) => feedback != undefined)\r\n            .concat(this.unreferencedFeedback)\r\n            .forEach((feedback) => {\r\n                feedback!.correctionStatus = 'CORRECT';\r\n            });\r\n    }\r\n\r\n    markWrongFeedback(correctionErrors: FeedbackCorrectionError[]) {\r\n        correctionErrors.forEach((correctionError) => {\r\n            const textBlockRef = this.textBlockRefs.find((ref) => ref.feedback?.reference === correctionError.reference);\r\n            if (textBlockRef != undefined && textBlockRef.feedback != undefined) {\r\n                textBlockRef.feedback.correctionStatus = correctionError.type;\r\n            } else {\r\n                const unreferencedFeedbackToBeMarked = this.unreferencedFeedback.find((feedback) => feedback.reference === correctionError.reference);\r\n                if (unreferencedFeedbackToBeMarked) {\r\n                    unreferencedFeedbackToBeMarked.correctionStatus = correctionError.type;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private exampleSubmissionForNetwork() {\r\n        const exampleSubmission = Object.assign({}, this.exampleSubmission);\r\n        exampleSubmission.submission = Object.assign({}, this.submission);\r\n\r\n        if (this.result) {\r\n            const result = Object.assign({}, this.result);\r\n            setLatestSubmissionResult(exampleSubmission.submission, result);\r\n            result.feedbacks = this.assessments;\r\n            delete result?.submission;\r\n        } else {\r\n            delete exampleSubmission.submission.results;\r\n            delete exampleSubmission.submission.latestResult;\r\n        }\r\n\r\n        return exampleSubmission;\r\n    }\r\n\r\n    /**\r\n     * Validate the feedback of the assessment\r\n     */\r\n    validateFeedback(): void {\r\n        this.assessmentsAreValid = this.assessments.length > 0;\r\n        this.totalScore = this.computeTotalScore(this.assessments);\r\n\r\n        if (this.guidedTourService.currentTour && this.toComplete) {\r\n            this.guidedTourService.updateAssessmentResult(this.assessments.length, this.totalScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * After the tutor declared that he read and understood the example submission a corresponding submission will be added to the\r\n     * tutor participation of the exercise. Then a success alert is invoked and the user gets redirected back.\r\n     */\r\n    readAndUnderstood(): void {\r\n        this.tutorParticipationService.assessExampleSubmission(this.exampleSubmission, this.exerciseId).subscribe(() => {\r\n            this.alertService.success('artemisApp.exampleSubmission.readSuccessfully');\r\n            this.back();\r\n        });\r\n    }\r\n\r\n    private prepareTextBlocksAndFeedbacks() {\r\n        const matchBlocksWithFeedbacks = TextAssessmentService.matchBlocksWithFeedbacks(this.submission?.blocks || [], this.result?.feedbacks || []);\r\n        this.sortAndSetTextBlockRefs(matchBlocksWithFeedbacks, this.textBlockRefs, this.unusedTextBlockRefs, this.submission);\r\n\r\n        if (!this.toComplete) {\r\n            this.unreferencedFeedback = this.result?.feedbacks?.filter((feedback) => feedback.type === FeedbackType.MANUAL_UNREFERENCED) ?? [];\r\n        }\r\n    }\r\n\r\n    editSubmission(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n        this.assessmentsService.deleteExampleAssessment(this.exercise!.id!, this.exampleSubmission?.id!).subscribe(() => {\r\n            delete this.submission?.blocks;\r\n            if (this.submission && this.submission.results) {\r\n                this.submission.results = undefined;\r\n                this.submission.latestResult = undefined;\r\n            }\r\n            this.result = undefined;\r\n            this.textBlockRefs = [];\r\n            this.unusedTextBlockRefs = [];\r\n            this.state.edit();\r\n        });\r\n    }\r\n\r\n    onModeChange(mode: ExampleSubmissionMode) {\r\n        this.selectedMode = mode;\r\n        this.unsavedSubmissionChanges = true;\r\n        this.exampleSubmission.usedForTutorial = mode === ExampleSubmissionMode.ASSESS_CORRECTLY;\r\n    }\r\n\r\n    private updateExampleAssessmentSolution(result: Result) {\r\n        if (result && result.feedbacks) {\r\n            this.referencedBlocksInExampleSubmission =\r\n                result.feedbacks.filter((feedback) => feedback.type !== FeedbackType.MANUAL_UNREFERENCED && feedback.reference).map((feedback) => feedback.reference!) || [];\r\n        }\r\n    }\r\n}\r\n", "<div class=\"course-info-bar\">\r\n    <div class=\"row justify-content-between\">\r\n        <div class=\"col-6\">\r\n            <h2>\r\n                @if (isNewSubmission) {\r\n                    <span jhiTranslate=\"artemisApp.exampleSubmission.createNew\"></span>\r\n                }\r\n                {{ 'artemisApp.exampleSubmission.pageHeader' | artemisTranslate }}\r\n                {{ exercise?.title }}\r\n            </h2>\r\n            @if (state.ui === UIStates.ASSESSMENT && toComplete && referencedBlocksInExampleSubmission && referencedBlocksInExampleSubmission.length > 0) {\r\n                <div class=\"col\">\r\n                    <div class=\"my-2 text-center hint\">\r\n                        <span jhiTranslate=\"artemisApp.exampleSubmission.textHint\"></span>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n        @if ((exercise?.isAtLeastEditor || false) && !readOnly && !toComplete && exercise) {\r\n            <div class=\"col-4 text-end d-flex align-items-center gap-2 justify-content-end\">\r\n                <div>\r\n                    <div class=\"text-start\">\r\n                        <span jhiTranslate=\"artemisApp.exampleSubmission.assessmentTraining\"></span>\r\n                        <jhi-help-icon [text]=\"'artemisApp.exampleSubmission.selectModelExplanation'\" />\r\n                    </div>\r\n                    <div class=\"btn-group\" role=\"group\">\r\n                        <input\r\n                            [disabled]=\"state.submissionEditButton === 3\"\r\n                            type=\"radio\"\r\n                            class=\"btn-check\"\r\n                            name=\"mode\"\r\n                            id=\"read-and-confirm-button\"\r\n                            autocomplete=\"off\"\r\n                            [value]=\"ExampleSubmissionMode.READ_AND_CONFIRM\"\r\n                            [ngModel]=\"selectedMode\"\r\n                            (ngModelChange)=\"onModeChange($event)\"\r\n                        />\r\n                        <label class=\"btn btn-outline-secondary\" for=\"read-and-confirm-button\" jhiTranslate=\"artemisApp.exampleSubmission.readAndConfirm\"></label>\r\n                        <input\r\n                            [disabled]=\"state.submissionEditButton === 3\"\r\n                            type=\"radio\"\r\n                            class=\"btn-check\"\r\n                            name=\"mode\"\r\n                            id=\"only-not-imported\"\r\n                            autocomplete=\"off\"\r\n                            [value]=\"ExampleSubmissionMode.ASSESS_CORRECTLY\"\r\n                            [ngModel]=\"selectedMode\"\r\n                            (ngModelChange)=\"onModeChange($event)\"\r\n                        />\r\n                        <label class=\"btn btn-outline-secondary\" for=\"only-not-imported\" jhiTranslate=\"artemisApp.exampleSubmission.assessCorrectly\"></label>\r\n                    </div>\r\n                </div>\r\n                @switch (state.submissionEditButton) {\r\n                    @case (SubmissionButtonStates.NEW) {\r\n                        <button id=\"create-example-submission\" (click)=\"createNewExampleTextSubmission()\" class=\"btn btn-primary col-auto\">\r\n                            <fa-icon [icon]=\"faSave\" />\r\n                            {{ 'artemisApp.exampleSubmission.createNewSubmission' | artemisTranslate }}\r\n                        </button>\r\n                    }\r\n                    @case (SubmissionButtonStates.UPDATE) {\r\n                        <button (click)=\"updateExampleTextSubmission()\" class=\"btn btn-primary col-auto\" [disabled]=\"!unsavedSubmissionChanges\">\r\n                            <fa-icon [icon]=\"faSave\" />\r\n                            {{ 'artemisApp.exampleSubmission.updateExampleSubmission' | artemisTranslate }}\r\n                        </button>\r\n                    }\r\n                    @case (SubmissionButtonStates.EDIT) {\r\n                        <jhi-confirm-button\r\n                            class=\"col-auto\"\r\n                            [icon]=\"faEdit\"\r\n                            id=\"editSampleSolution\"\r\n                            title=\"artemisApp.exampleSubmission.editExampleSubmission\"\r\n                            confirmationText=\"artemisApp.exampleSubmission.editExampleSubmissionConfirmationQuestion\"\r\n                            confirmationTitle=\"artemisApp.exampleSubmission.editExampleSubmission\"\r\n                            [translateText]=\"true\"\r\n                            (onConfirm)=\"editSubmission()\"\r\n                        />\r\n                    }\r\n                }\r\n                @switch (state.assessButton) {\r\n                    <!--TODO: Disable Button if unsaved changes in submission -->\r\n                    @case (AssessButtonStates.ASSESS) {\r\n                        <button (click)=\"startAssessment()\" class=\"btn btn-primary col-auto ms-auto me-3\" id=\"createNewAssessment\" [disabled]=\"unsavedSubmissionChanges\">\r\n                            <fa-icon [icon]=\"faSave\" />\r\n                            {{ 'artemisApp.exampleSubmission.createNewAssessment' | artemisTranslate }}\r\n                        </button>\r\n                    }\r\n                    @case (AssessButtonStates.CREATE) {\r\n                        <button (click)=\"saveAssessments()\" [disabled]=\"!assessmentsAreValid\" class=\"btn btn-primary col-auto ms-auto me-3\" id=\"saveNewAssessment\">\r\n                            <fa-icon [icon]=\"faSave\" />\r\n                            {{ 'artemisApp.exampleSubmission.saveNewAssessment' | artemisTranslate }}\r\n                        </button>\r\n                    }\r\n                    @case (AssessButtonStates.UPDATE) {\r\n                        <button (click)=\"saveAssessments()\" [disabled]=\"!assessmentsAreValid\" class=\"btn btn-primary col-auto ms-auto me-3\">\r\n                            <fa-icon [icon]=\"faSave\" />\r\n                            {{ 'artemisApp.exampleSubmission.updateAssessment' | artemisTranslate }}\r\n                        </button>\r\n                    }\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n@if (toComplete) {\r\n    <h5 class=\"fw-light mt-3\" jhiTranslate=\"artemisApp.exampleSubmission.home.assessmentTraining\"></h5>\r\n}\r\n<jhi-resizeable-container class=\"col-12 mt-3\">\r\n    <!--region Left Panel-->\r\n    <ng-container left-header>\r\n        @if (state.ui === UIStates.SUBMISSION) {\r\n            <span jhiTranslate=\"artemisApp.exampleSubmission.exampleSubmission\"></span>\r\n        }\r\n        @if (state.ui === UIStates.ASSESSMENT) {\r\n            <jhi-score-display [maxPoints]=\"exercise?.maxPoints || 0\" [score]=\"totalScore\" [maxBonusPoints]=\"exercise?.bonusPoints || 0\" />\r\n        }\r\n    </ng-container>\r\n    <ng-container left-body>\r\n        @if (state.ui === UIStates.SUBMISSION) {\r\n            <textarea\r\n                id=\"example-text-submission-input\"\r\n                [(ngModel)]=\"submission!.text\"\r\n                (ngModelChange)=\"unsavedSubmissionChanges = true\"\r\n                style=\"width: 100%; height: 50vh\"\r\n            ></textarea>\r\n        }\r\n        @if (state.ui === UIStates.ASSESSMENT) {\r\n            <jhi-text-assessment-area\r\n                class=\"guided-tour-assessment-editor guided-tour-complete-assessment-editor\"\r\n                [allowManualBlockSelection]=\"!this.toComplete\"\r\n                [submission]=\"submission!\"\r\n                [(textBlockRefs)]=\"textBlockRefs\"\r\n                [readOnly]=\"readOnly || (!!exercise && !exercise.isAtLeastEditor && !toComplete)\"\r\n                (textBlockRefsChange)=\"validateFeedback()\"\r\n                (textBlockRefsAddedRemoved)=\"recalculateTextBlockRefs()\"\r\n            />\r\n        }\r\n    </ng-container>\r\n    <!--endregion-->\r\n    <!--region Right Panel-->\r\n    <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n    <span right-header jhiTranslate=\"artemisApp.textAssessment.instructions\"></span>\r\n    <ng-container right-body>\r\n        @if (state.ui === UIStates.SUBMISSION) {\r\n            <div class=\"alert alert-info text-center mb-4\" role=\"alert\" jhiTranslate=\"artemisApp.textAssessment.exampleSubmissionInstruction\"></div>\r\n        }\r\n        @if (state.ui === UIStates.ASSESSMENT) {\r\n            <div class=\"alert alert-info text-center mb-4\" role=\"alert\" jhiTranslate=\"artemisApp.textAssessment.assessmentInstruction\"></div>\r\n        }\r\n        @if (exercise) {\r\n            <jhi-assessment-instructions\r\n                id=\"instructions\"\r\n                [exercise]=\"exercise\"\r\n                [isAssessmentTraining]=\"toComplete\"\r\n                [showAssessmentInstructions]=\"state.ui === UIStates.ASSESSMENT\"\r\n                class=\"markdown-preview\"\r\n            />\r\n        }\r\n    </ng-container>\r\n    <!--endregion-->\r\n</jhi-resizeable-container>\r\n@if (state.ui === UIStates.ASSESSMENT) {\r\n    @if (result && result.id) {\r\n        <jhi-unreferenced-feedback\r\n            [(feedbacks)]=\"unreferencedFeedback\"\r\n            [readOnly]=\"readOnly\"\r\n            [addReferenceIdForExampleSubmission]=\"true\"\r\n            (feedbacksChange)=\"validateFeedback()\"\r\n            [resultId]=\"result.id\"\r\n        />\r\n    }\r\n}\r\n@if (toComplete) {\r\n    <div class=\"col-12 text-end pt-2\">\r\n        <button\r\n            class=\"btn btn-primary col-3 guided-tour-check-assessment\"\r\n            (click)=\"checkAssessment()\"\r\n            [disabled]=\"!assessmentsAreValid\"\r\n            id=\"checkAssessment\"\r\n            jhiTranslate=\"artemisApp.exampleSubmission.submitAssessment\"\r\n        ></button>\r\n    </div>\r\n}\r\n@if (readOnly) {\r\n    <div class=\"col-12 text-end pt-2\">\r\n        <button (click)=\"readAndUnderstood()\" class=\"btn btn-success col-3 guided-tour-read\">\r\n            <fa-icon [icon]=\"faSave\" />\r\n            {{ 'artemisApp.exampleSubmission.readAndUnderstood' | artemisTranslate }}\r\n        </button>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["SubmissionButtonStates", "AssessButtonStates", "UIStates", "State", "context", "ui", "submissionEditButton", "assessButton", "constructor", "edit", "state", "EditState", "assess", "AssessState", "initialWithContext", "NewState", "forExistingAssessmentWithContext", "forCompletion", "CompletionState", "SUBMISSION", "NEW", "NONE", "UPDATE", "ASSESS", "NewAssessmentState", "ASSESSMENT", "EDIT", "CREATE", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "createNewExampleTextSubmission", "\u0275\u0275advance", "\u0275\u0275property", "faSave", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "_r4", "updateExampleTextSubmission", "unsavedSubmissionChanges", "_r5", "editSubmission", "faEdit", "_r6", "startAssessment", "_r7", "saveAssessments", "assessmentsAreValid", "_r8", "$event", "_r1", "onModeChange", "\u0275\u0275template", "ExampleTextSubmissionComponent_Conditional_14_Case_24_Template", "ExampleTextSubmissionComponent_Conditional_14_Case_25_Template", "ExampleTextSubmissionComponent_Conditional_14_Case_26_Template", "ExampleTextSubmissionComponent_Conditional_14_Case_28_Template", "ExampleTextSubmissionComponent_Conditional_14_Case_29_Template", "ExampleTextSubmissionComponent_Conditional_14_Case_30_Template", "state", "submissionEditButton", "ExampleSubmissionMode", "READ_AND_CONFIRM", "selectedMode", "ASSESS_CORRECTLY", "\u0275\u0275conditional", "tmp_8_0", "SubmissionButtonStates", "NEW", "UPDATE", "EDIT", "tmp_9_0", "assessButton", "AssessButtonStates", "ASSESS", "CREATE", "exercise", "maxPoints", "totalScore", "bonusPoints", "\u0275\u0275twoWayListener", "_r9", "i0", "\u0275\u0275twoWayBindingSet", "submission", "text", "\u0275\u0275twoWayProperty", "_r10", "textBlockRefs", "validateFeedback", "recalculateTextBlockRefs", "toComplete", "readOnly", "isAtLeastEditor", "ui", "UIStates", "ASSESSMENT", "_r11", "unreferencedFeedback", "result", "id", "ExampleTextSubmissionComponent_Conditional_45_Conditional_1_Template", "_r12", "checkAssessment", "_r13", "readAndUnderstood", "ExampleTextSubmissionComponent", "TextAssessmentBaseComponent", "route", "inject", "ActivatedRoute", "router", "Router", "exampleSubmissionService", "ExampleSubmissionService", "tutorParticipationService", "TutorParticipationService", "guidedTourService", "GuidedTourService", "navigationUtilService", "ArtemisNavigationUtilService", "exerciseService", "ExerciseService", "isNewSubmission", "areNewAssessments", "exerciseId", "exampleSubmissionId", "exampleSubmission", "ExampleSubmission", "State", "initialWithContext", "referencedBlocksInExampleSubmission", "farListAlt", "faListAlt", "constructor", "unusedTextBlockRefs", "TextSubmission", "referencedFeedback", "map", "feedback", "filter", "notUndefined", "assessments", "ngOnInit", "__async", "__superGet", "Number", "snapshot", "paramMap", "get", "queryParamMap", "loadAll", "find", "subscribe", "exerciseResponse", "body", "enableTourForExercise", "tutorAssessmentTour", "edit", "exampleSubmissionResponse", "fetchExampleResult", "forCompletion", "restrictSelectableTextBlocks", "forEach", "ref", "forExistingAssessmentWithContext", "componentPageLoaded", "usedForTutorial", "block", "includes", "selectable", "highlighted", "deletable", "Promise", "resolve", "assessmentsService", "getExampleResult", "pipe", "updateExampleAssessmentSolution", "Result", "results", "prepareTextBlocksAndFeedbacks", "length", "newExampleSubmission", "create", "next", "replaceNewWithIdInUrl", "window", "location", "href", "alertService", "success", "error", "saveSubmissionIfNeeded", "update", "exampleSubmissionForNetwork", "tap", "of", "prepareForAssessment", "mergeMap", "assess", "switchMap", "saveExampleAssessment", "textBlocksWithFeedback", "response", "back", "courseId", "getCourseFromExercise", "exerciseGroup", "examId", "exam", "exerciseGroupId", "navigate", "ExampleSubmissionAssessCommand", "assessExampleSubmission", "markAllFeedbackToCorrect", "undefined", "concat", "correctionStatus", "markWrongFeedback", "correctionErrors", "correctionError", "textBlockRef", "reference", "type", "unreferencedFeedbackToBeMarked", "Object", "assign", "setLatestSubmissionResult", "feedbacks", "latestResult", "computeTotalScore", "currentTour", "updateAssessmentResult", "matchBlocksWithFeedbacks", "TextAssessmentService", "blocks", "sortAndSetTextBlockRefs", "FeedbackType", "MANUAL_UNREFERENCED", "deleteExampleAssessment", "mode", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ExampleTextSubmissionComponent_Conditional_8_Template", "ExampleTextSubmissionComponent_Conditional_12_Template", "ExampleTextSubmissionComponent_Conditional_14_Template", "ExampleTextSubmissionComponent_Conditional_17_Template", "\u0275\u0275elementContainerStart", "ExampleTextSubmissionComponent_Conditional_23_Template", "ExampleTextSubmissionComponent_Conditional_24_Template", "ExampleTextSubmissionComponent_Conditional_28_Template", "ExampleTextSubmissionComponent_Conditional_29_Template", "ExampleTextSubmissionComponent_Conditional_39_Template", "ExampleTextSubmissionComponent_Conditional_40_Template", "ExampleTextSubmissionComponent_Conditional_41_Template", "ExampleTextSubmissionComponent_Conditional_45_Template", "ExampleTextSubmissionComponent_Conditional_46_Template", "ExampleTextSubmissionComponent_Conditional_47_Template", "\u0275\u0275textInterpolate2", "title", "SUBMISSION", "TranslateDirective", "HelpIconComponent", "FormsModule", "DefaultValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "ConfirmAutofocusButtonComponent", "ResizeableContainerComponent", "ScoreDisplayComponent", "TextAssessmentAreaComponent", "AssessmentInstructionsComponent", "UnreferencedFeedbackComponent", "ArtemisTranslatePipe", "styles"]
}
