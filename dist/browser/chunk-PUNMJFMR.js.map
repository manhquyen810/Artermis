{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/submission.model.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\n\r\nexport const enum SubmissionType {\r\n    MANUAL = 'MANUAL',\r\n    TIMEOUT = 'TIMEOUT',\r\n    INSTRUCTOR = 'INSTRUCTOR',\r\n    EXTERNAL = 'EXTERNAL',\r\n    TEST = 'TEST',\r\n    ILLEGAL = 'ILLEGAL',\r\n}\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with the ones defined in Submission.java\r\nexport const enum SubmissionExerciseType {\r\n    PROGRAMMING = 'programming',\r\n    MODELING = 'modeling',\r\n    QUIZ = 'quiz',\r\n    TEXT = 'text',\r\n    FILE_UPLOAD = 'file-upload',\r\n}\r\n\r\nexport abstract class Submission implements BaseEntity {\r\n    public id?: number;\r\n    public submitted?: boolean;\r\n    public submissionDate?: dayjs.Dayjs;\r\n    public type?: SubmissionType;\r\n    public exampleSubmission?: boolean;\r\n    public submissionExerciseType?: SubmissionExerciseType;\r\n    public durationInMinutes?: number;\r\n\r\n    // results is initialized by the value the server returns\r\n    public results?: Result[];\r\n\r\n    public participation?: Participation;\r\n\r\n    // Helper Attributes\r\n\r\n    // latestResult is undefined until setLatestSubmissionResult() is called\r\n    public latestResult?: Result;\r\n\r\n    // only used for exam to check if it is saved to server\r\n    public isSynced?: boolean;\r\n\r\n    // client-side property, shows the number of elements used in the example submission\r\n    public submissionSize?: number;\r\n\r\n    protected constructor(submissionExerciseType: SubmissionExerciseType) {\r\n        this.submissionExerciseType = submissionExerciseType;\r\n        this.submitted = false; // default value\r\n    }\r\n}\r\n\r\n/**\r\n * Used to access the latest submissions result\r\n *\r\n * @param submission\r\n */\r\nexport function getLatestSubmissionResult(submission: Submission | undefined): Result | undefined {\r\n    return submission?.results?.last();\r\n}\r\n\r\n/**\r\n * Used to access a submissions result for a specific correctionRound\r\n * Athena Results need to be excluded to avoid an assessment being locked by null\r\n * @param submission\r\n * @param correctionRound\r\n * @returns the results or undefined if submission or the result for the requested correctionRound is undefined\r\n */\r\nexport function getSubmissionResultByCorrectionRound(submission: Submission | undefined, correctionRound: number): Result | undefined {\r\n    if (submission?.results && submission?.results.filter((result) => result?.assessmentType !== AssessmentType.AUTOMATIC_ATHENA).length >= correctionRound) {\r\n        return submission.results.filter((result) => result?.assessmentType !== AssessmentType.AUTOMATIC_ATHENA)[correctionRound];\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Used to access a submissions result for a specific id\r\n *\r\n * @param submission\r\n * @param resultId\r\n * @returns the results or undefined if submission or the result for the requested id is undefined\r\n */\r\nexport function getSubmissionResultById(submission: Submission | undefined, resultId: number): Result | undefined {\r\n    return submission?.results?.find((result) => result.id === resultId);\r\n}\r\n\r\n/**\r\n * Used to set / override the latest result in the results list, and set / override the\r\n * var latestResult\r\n *\r\n * @param submission\r\n * @param result\r\n */\r\nexport function setLatestSubmissionResult(submission: Submission | undefined, result: Result | undefined) {\r\n    if (!submission || !result) {\r\n        return;\r\n    }\r\n\r\n    if (submission.results?.length) {\r\n        submission.results[submission.results.length - 1] = result;\r\n    } else {\r\n        submission.results = [result];\r\n    }\r\n    // make sure relationship is correct\r\n    result.submission = submission;\r\n    submission.latestResult = result;\r\n}\r\n\r\nexport function setSubmissionResultByCorrectionRound(submission: Submission, result: Result, correctionRound: number) {\r\n    if (!submission || !result || !submission.results) {\r\n        return;\r\n    }\r\n    submission.results[correctionRound] = result;\r\n\r\n    if (submission.results.length === correctionRound + 1) {\r\n        submission.latestResult = result;\r\n    }\r\n}\r\n\r\nexport function getFirstResult(submission: Submission | undefined): Result | undefined {\r\n    if (submission?.results) {\r\n        const length = submission.results.length;\r\n        if (length > 0) {\r\n            return submission.results[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport function getFirstResultWithComplaintFromResults(results: Result[] | undefined): Result | undefined {\r\n    if (results) {\r\n        const resultsWithComplaint = results.filter((result) => result.hasComplaint);\r\n        if (resultsWithComplaint.length > 0) {\r\n            return resultsWithComplaint[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport function getFirstResultWithComplaint(submission: Submission | undefined): Result | undefined {\r\n    if (submission?.results) {\r\n        const resultsWithComplaint = submission.results.filter((result) => result.hasComplaint);\r\n        if (resultsWithComplaint.length > 0) {\r\n            return resultsWithComplaint[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport function reconnectSubmissions(submissions: Submission[]): void {\r\n    return submissions.forEach((submission: Submission) => {\r\n        // reconnect some associations\r\n        const latestResult = getLatestSubmissionResult(submission);\r\n        if (latestResult) {\r\n            latestResult.submission = submission;\r\n            latestResult.participation = submission.participation;\r\n            submission.participation!.results = [latestResult!];\r\n            setLatestSubmissionResult(submission, latestResult);\r\n        }\r\n    });\r\n}\r\n"],
  "mappings": "wCAwBM,IAAgBA,EAAhB,KAA0B,CACrBC,GACAC,UACAC,eACAC,KACAC,kBACAC,uBACAC,kBAGAC,QAEAC,cAKAC,aAGAC,SAGAC,eAEPC,YAAsBP,EAA8C,CAChE,KAAKA,uBAAyBA,EAC9B,KAAKJ,UAAY,EACrB,GAQE,SAAUY,EAA0BC,EAAkC,CACxE,OAAOA,GAAYP,SAASQ,KAAI,CACpC,CASM,SAAUC,EAAqCF,EAAoCG,EAAuB,CAC5G,GAAIH,GAAYP,SAAWO,GAAYP,QAAQW,OAAQC,GAAWA,GAAQC,iBAAmBC,EAAeC,gBAAgB,EAAEC,QAAUN,EACpI,OAAOH,EAAWP,QAAQW,OAAQC,GAAWA,GAAQC,iBAAmBC,EAAeC,gBAAgB,EAAEL,CAAe,CAGhI,CASM,SAAUO,EAAwBV,EAAoCW,EAAgB,CACxF,OAAOX,GAAYP,SAASmB,KAAMP,GAAWA,EAAOnB,KAAOyB,CAAQ,CACvE,CASM,SAAUE,EAA0Bb,EAAoCK,EAA0B,CAChG,CAACL,GAAc,CAACK,IAIhBL,EAAWP,SAASgB,OACpBT,EAAWP,QAAQO,EAAWP,QAAQgB,OAAS,CAAC,EAAIJ,EAEpDL,EAAWP,QAAU,CAACY,CAAM,EAGhCA,EAAOL,WAAaA,EACpBA,EAAWL,aAAeU,EAC9B,CAEM,SAAUS,EAAqCd,EAAwBK,EAAgBF,EAAuB,CAC5G,CAACH,GAAc,CAACK,GAAU,CAACL,EAAWP,UAG1CO,EAAWP,QAAQU,CAAe,EAAIE,EAElCL,EAAWP,QAAQgB,SAAWN,EAAkB,IAChDH,EAAWL,aAAeU,GAElC,CAWM,SAAUU,EAAuCC,EAA6B,CAChF,GAAIA,EAAS,CACT,IAAMC,EAAuBD,EAAQE,OAAQC,GAAWA,EAAOC,YAAY,EAC3E,GAAIH,EAAqBI,OAAS,EAC9B,OAAOJ,EAAqB,CAAC,CAErC,CACJ,CAEM,SAAUK,EAA4BC,EAAkC,CAC1E,GAAIA,GAAYP,QAAS,CACrB,IAAMC,EAAuBM,EAAWP,QAAQE,OAAQC,GAAWA,EAAOC,YAAY,EACtF,GAAIH,EAAqBI,OAAS,EAC9B,OAAOJ,EAAqB,CAAC,CAErC,CACJ,CAEM,SAAUO,EAAqBC,EAAyB,CAC1D,OAAOA,EAAYC,QAASH,GAA0B,CAElD,IAAMI,EAAeC,EAA0BL,CAAU,EACrDI,IACAA,EAAaJ,WAAaA,EAC1BI,EAAaE,cAAgBN,EAAWM,cACxCN,EAAWM,cAAeb,QAAU,CAACW,CAAa,EAClDG,EAA0BP,EAAYI,CAAY,EAE1D,CAAC,CACL",
  "names": ["Submission", "id", "submitted", "submissionDate", "type", "exampleSubmission", "submissionExerciseType", "durationInMinutes", "results", "participation", "latestResult", "isSynced", "submissionSize", "constructor", "getLatestSubmissionResult", "submission", "last", "getSubmissionResultByCorrectionRound", "correctionRound", "filter", "result", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "length", "getSubmissionResultById", "resultId", "find", "setLatestSubmissionResult", "setSubmissionResultByCorrectionRound", "getFirstResultWithComplaintFromResults", "results", "resultsWithComplaint", "filter", "result", "hasComplaint", "length", "getFirstResultWithComplaint", "submission", "reconnectSubmissions", "submissions", "forEach", "latestResult", "getLatestSubmissionResult", "participation", "setLatestSubmissionResult"]
}
