{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/lua/lua.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lua/lua.ts\nvar conf = {\n  comments: {\n    lineComment: \"--\",\n    blockComment: [\"--[[\", \"]]\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".lua\",\n  keywords: [\"and\", \"break\", \"do\", \"else\", \"elseif\", \"end\", \"false\", \"for\", \"function\", \"goto\", \"if\", \"in\", \"local\", \"nil\", \"not\", \"or\", \"repeat\", \"return\", \"then\", \"true\", \"until\", \"while\"],\n  brackets: [{\n    token: \"delimiter.bracket\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.array\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"%\", \"^\", \"#\", \"==\", \"~=\", \"<=\", \">=\", \"<\", \">\", \"=\", \";\", \":\", \",\", \".\", \"..\", \"...\"],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }],\n    // whitespace\n    {\n      include: \"@whitespace\"\n    },\n    // keys\n    [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, [\"delimiter\", \"\", \"key\", \"\", \"delimiter\"]], [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, [\"@brackets\", \"\", \"key\", \"\", \"delimiter\"]],\n    // delimiters and operators\n    [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, \"number.hex\"], [/\\d+?/, \"number\"],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, \"delimiter\"],\n    // strings: recover on non-terminated strings\n    [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n    // non-teminated string\n    [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n    // non-teminated string\n    [/\"/, \"string\", '@string.\"'], [/'/, \"string\", \"@string.'\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/--\\[([=]*)\\[/, \"comment\", \"@comment.$1\"], [/--.*$/, \"comment\"]],\n    comment: [[/[^\\]]+/, \"comment\"], [/\\]([=]*)\\]/, {\n      cases: {\n        \"$1==$S2\": {\n          token: \"comment\",\n          next: \"@pop\"\n        },\n        \"@default\": \"comment\"\n      }\n    }], [/./, \"comment\"]],\n    string: [[/[^\\\\\"']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/[\"']/, {\n      cases: {\n        \"$#==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }]]\n  }\n};\nexport { conf, language };"],"mappings":"4BAQA,IAAIA,EAAO,CACT,SAAU,CACR,YAAa,KACb,aAAc,CAAC,OAAQ,IAAI,CAC7B,EACA,SAAU,CAAC,CAAC,IAAK,GAAG,EAAG,CAAC,IAAK,GAAG,EAAG,CAAC,IAAK,GAAG,CAAC,EAC7C,iBAAkB,CAAC,CACjB,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,CAAC,EACD,iBAAkB,CAAC,CACjB,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,CAAC,CACH,EACIC,EAAW,CACb,aAAc,GACd,aAAc,OACd,SAAU,CAAC,MAAO,QAAS,KAAM,OAAQ,SAAU,MAAO,QAAS,MAAO,WAAY,OAAQ,KAAM,KAAM,QAAS,MAAO,MAAO,KAAM,SAAU,SAAU,OAAQ,OAAQ,QAAS,OAAO,EAC3L,SAAU,CAAC,CACT,MAAO,oBACP,KAAM,IACN,MAAO,GACT,EAAG,CACD,MAAO,kBACP,KAAM,IACN,MAAO,GACT,EAAG,CACD,MAAO,wBACP,KAAM,IACN,MAAO,GACT,CAAC,EACD,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAK,EAErH,QAAS,wBACT,QAAS,wEAET,UAAW,CACT,KAAM,CAEN,CAAC,eAAgB,CACf,MAAO,CACL,YAAa,CACX,MAAO,YACT,EACA,WAAY,YACd,CACF,CAAC,EAED,CACE,QAAS,aACX,EAEA,CAAC,sCAAuC,CAAC,YAAa,GAAI,MAAO,GAAI,WAAW,CAAC,EAAG,CAAC,sCAAuC,CAAC,YAAa,GAAI,MAAO,GAAI,WAAW,CAAC,EAErK,CAAC,aAAc,WAAW,EAAG,CAAC,WAAY,CACxC,MAAO,CACL,aAAc,YACd,WAAY,EACd,CACF,CAAC,EAED,CAAC,2BAA4B,cAAc,EAAG,CAAC,gCAAiC,YAAY,EAAG,CAAC,OAAQ,QAAQ,EAEhH,CAAC,QAAS,WAAW,EAErB,CAAC,kBAAmB,gBAAgB,EAEpC,CAAC,kBAAmB,gBAAgB,EAEpC,CAAC,IAAK,SAAU,WAAW,EAAG,CAAC,IAAK,SAAU,WAAW,CAAC,EAC1D,WAAY,CAAC,CAAC,aAAc,EAAE,EAAG,CAAC,eAAgB,UAAW,aAAa,EAAG,CAAC,QAAS,SAAS,CAAC,EACjG,QAAS,CAAC,CAAC,SAAU,SAAS,EAAG,CAAC,aAAc,CAC9C,MAAO,CACL,UAAW,CACT,MAAO,UACP,KAAM,MACR,EACA,WAAY,SACd,CACF,CAAC,EAAG,CAAC,IAAK,SAAS,CAAC,EACpB,OAAQ,CAAC,CAAC,WAAY,QAAQ,EAAG,CAAC,WAAY,eAAe,EAAG,CAAC,MAAO,uBAAuB,EAAG,CAAC,OAAQ,CACzG,MAAO,CACL,UAAW,CACT,MAAO,SACP,KAAM,MACR,EACA,WAAY,QACd,CACF,CAAC,CAAC,CACJ,CACF","names":["conf","language"],"x_google_ignoreList":[0]}