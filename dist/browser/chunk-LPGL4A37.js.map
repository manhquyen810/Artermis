{
  "version": 3,
  "sources": ["src/main/webapp/app/iris/exercise-chatbot/widget/chatbot-widget.component.ts", "src/main/webapp/app/iris/exercise-chatbot/widget/chatbot-widget.component.html", "src/main/webapp/app/iris/exercise-chatbot/exercise-chatbot-button.component.ts", "src/main/webapp/app/iris/exercise-chatbot/exercise-chatbot-button.component.html"],
  "sourcesContent": ["import { AfterViewInit, Component, HostListener, OnDestroy, inject } from '@angular/core';\r\nimport interact from 'interactjs';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { NavigationStart, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { IrisBaseChatbotComponent } from '../../base-chatbot/iris-base-chatbot.component';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'jhi-chatbot-widget',\r\n    templateUrl: './chatbot-widget.component.html',\r\n    styleUrls: ['./chatbot-widget.component.scss'],\r\n    imports: [IrisBaseChatbotComponent],\r\n})\r\nexport class IrisChatbotWidgetComponent implements OnDestroy, AfterViewInit {\r\n    private document = inject<Document>(DOCUMENT);\r\n    private router = inject(Router);\r\n    private dialog = inject(MatDialog);\r\n\r\n    dialogData = inject<{ isChatGptWrapper: boolean }>(MAT_DIALOG_DATA);\r\n\r\n    // User preferences\r\n    initialWidth = 400;\r\n    initialHeight = 600;\r\n    fullWidthFactor = 0.93;\r\n    fullHeightFactor = 0.85;\r\n    isMobile = false;\r\n    fullSize = false;\r\n    public ButtonType = ButtonType;\r\n\r\n    protected navigationSubscription: Subscription;\r\n\r\n    constructor() {\r\n        this.navigationSubscription = this.router.events.subscribe((event) => {\r\n            if (event instanceof NavigationStart) {\r\n                this.dialog.closeAll();\r\n            }\r\n        });\r\n    }\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onResize() {\r\n        this.setPositionAndScale();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        interact('.chat-widget')\r\n            .resizable({\r\n                // resize from all edges and corners\r\n                edges: { left: true, right: true, bottom: true, top: '.chat-widget-top-resize-area' },\r\n\r\n                listeners: {\r\n                    move: (event) => {\r\n                        const target = event.target;\r\n                        let x = parseFloat(target.getAttribute('data-x')) || 0;\r\n                        let y = parseFloat(target.getAttribute('data-y')) || 0;\r\n\r\n                        // update the element's style\r\n                        target.style.width = event.rect.width + 'px';\r\n                        target.style.height = event.rect.height + 'px';\r\n\r\n                        // Reset fullsize if widget smaller than the full size factors times the overlay container size\r\n                        const cntRect = (this.document.querySelector('.cdk-overlay-container') as HTMLElement).getBoundingClientRect();\r\n                        this.fullSize = !(event.rect.width < cntRect.width * this.fullWidthFactor || event.rect.height < cntRect.height * this.fullHeightFactor);\r\n\r\n                        // translate when resizing from top or left edges\r\n                        x += event.deltaRect.left;\r\n                        y += event.deltaRect.top;\r\n\r\n                        target.style.transform = 'translate(' + x + 'px,' + y + 'px)';\r\n\r\n                        target.setAttribute('data-x', x);\r\n                        target.setAttribute('data-y', y);\r\n                    },\r\n                },\r\n                modifiers: [\r\n                    // keep the edges inside the parent\r\n                    interact.modifiers.restrictEdges({\r\n                        outer: '.cdk-overlay-container',\r\n                    }),\r\n\r\n                    // minimum size\r\n                    interact.modifiers.restrictSize({\r\n                        min: { width: this.initialWidth, height: this.initialHeight },\r\n                    }),\r\n                ],\r\n\r\n                inertia: true,\r\n            })\r\n            .draggable({\r\n                allowFrom: '.chat-header',\r\n                listeners: {\r\n                    move: (event: any) => {\r\n                        const target = event.target,\r\n                            // keep the dragged position in the data-x/data-y attributes\r\n                            x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,\r\n                            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\r\n\r\n                        // translate the element\r\n                        target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';\r\n\r\n                        // update the posiion attributes\r\n                        target.setAttribute('data-x', x);\r\n                        target.setAttribute('data-y', y);\r\n                    },\r\n                },\r\n                inertia: true,\r\n                modifiers: [\r\n                    interact.modifiers.restrictRect({\r\n                        restriction: '.cdk-overlay-container',\r\n                        endOnly: true,\r\n                    }),\r\n                ],\r\n            });\r\n        this.setPositionAndScale();\r\n    }\r\n\r\n    setPositionAndScale() {\r\n        const cntRect = (this.document.querySelector('.cdk-overlay-container') as HTMLElement)?.getBoundingClientRect();\r\n        if (!cntRect) {\r\n            return;\r\n        }\r\n\r\n        this.isMobile = cntRect.width < 600;\r\n\r\n        let initX: number;\r\n        let initY: number;\r\n\r\n        if (this.fullSize || this.isMobile) {\r\n            initX = (cntRect.width * (1 - this.fullWidthFactor)) / 2.0;\r\n            initY = (cntRect.height * (1 - this.fullHeightFactor)) / 2.0;\r\n        } else {\r\n            initX = cntRect.width - this.initialWidth - 20;\r\n            initY = cntRect.height - this.initialHeight - 20;\r\n        }\r\n\r\n        const nE = this.document.querySelector('.chat-widget') as HTMLElement;\r\n        nE.style.transform = `translate(${initX}px, ${initY}px)`;\r\n        nE.setAttribute('data-x', String(initX));\r\n        nE.setAttribute('data-y', String(initY));\r\n\r\n        // Set width and height\r\n        if (this.fullSize || this.isMobile) {\r\n            nE.style.width = `${cntRect.width * this.fullWidthFactor}px`;\r\n            nE.style.height = `${cntRect.height * this.fullHeightFactor}px`;\r\n        } else {\r\n            nE.style.width = `${this.initialWidth}px`;\r\n            nE.style.height = `${this.initialHeight}px`;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.toggleScrollLock(false);\r\n    }\r\n\r\n    /**\r\n     * Closes the chat widget.\r\n     */\r\n    closeChat() {\r\n        this.dialog.closeAll();\r\n    }\r\n\r\n    toggleFullSize() {\r\n        this.fullSize = !this.fullSize;\r\n        this.setPositionAndScale();\r\n    }\r\n\r\n    toggleScrollLock(lockParent: boolean): void {\r\n        if (lockParent) {\r\n            document.body.classList.add('cdk-global-scroll');\r\n        } else {\r\n            document.body.classList.remove('cdk-global-scroll');\r\n        }\r\n    }\r\n}\r\n", "<div class=\"container\" (mouseenter)=\"toggleScrollLock(true)\" (mouseleave)=\"toggleScrollLock(false)\">\r\n    <!-- chat box -->\r\n    <div class=\"chat-widget\">\r\n        <jhi-iris-base-chatbot\r\n            [fullSize]=\"fullSize\"\r\n            [showCloseButton]=\"true\"\r\n            (fullSizeToggle)=\"toggleFullSize()\"\r\n            (closeClicked)=\"closeChat()\"\r\n            [isChatGptWrapper]=\"dialogData?.isChatGptWrapper || false\"\r\n        />\r\n        <div class=\"chat-widget-top-resize-area\"></div>\r\n    </div>\r\n</div>\r\n", "import { Component, ElementRef, Input, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IrisChatbotWidgetComponent } from 'app/iris/exercise-chatbot/widget/chatbot-widget.component';\r\nimport { EMPTY, Subscription, filter, of, switchMap } from 'rxjs';\r\nimport { faAngleDoubleDown, faChevronDown, faCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { IrisLogoLookDirection, IrisLogoSize } from 'app/iris/iris-logo/iris-logo.component';\r\nimport { ChatServiceMode, IrisChatService } from 'app/iris/iris-chat.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { IrisTextMessageContent } from 'app/entities/iris/iris-content-type.model';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { IrisLogoComponent } from '../iris-logo/iris-logo.component';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-chatbot-button',\r\n    templateUrl: './exercise-chatbot-button.component.html',\r\n    styleUrls: ['./exercise-chatbot-button.component.scss'],\r\n    animations: [\r\n        trigger('expandAnimation', [\r\n            state(\r\n                'hidden',\r\n                style({\r\n                    opacity: 0,\r\n                    transform: 'scale(0)',\r\n                    transformOrigin: 'bottom right',\r\n                }),\r\n            ),\r\n            state(\r\n                'visible',\r\n                style({\r\n                    opacity: 1,\r\n                    transform: 'scale(1)',\r\n                    transformOrigin: 'bottom right',\r\n                }),\r\n            ),\r\n            transition('hidden => visible', animate('300ms ease-out')),\r\n            transition('visible => hidden', animate('300ms ease-in')),\r\n        ]),\r\n    ],\r\n    imports: [NgClass, TranslateDirective, FaIconComponent, IrisLogoComponent, HtmlForMarkdownPipe],\r\n})\r\nexport class IrisExerciseChatbotButtonComponent implements OnInit, OnDestroy {\r\n    dialog = inject(MatDialog);\r\n    protected overlay = inject(Overlay);\r\n    protected readonly chatService = inject(IrisChatService);\r\n    private route = inject(ActivatedRoute);\r\n\r\n    @Input()\r\n    mode: ChatServiceMode;\r\n\r\n    @Input()\r\n    isChatGptWrapper: boolean = false; // TODO TW: This \"feature\" is only temporary for a paper.\r\n\r\n    dialogRef: MatDialogRef<IrisChatbotWidgetComponent> | null = null;\r\n    chatOpen = false;\r\n    isOverflowing = false;\r\n    hasNewMessages = false;\r\n    newIrisMessage: string | undefined;\r\n\r\n    private readonly CHAT_BUBBLE_TIMEOUT = 10000;\r\n\r\n    private numNewMessagesSubscription: Subscription;\r\n    private paramsSubscription: Subscription;\r\n    private latestIrisMessageSubscription: Subscription;\r\n\r\n    // Icons\r\n    faCircle = faCircle;\r\n    faChevronDown = faChevronDown;\r\n    faAngleDoubleDown = faAngleDoubleDown;\r\n\r\n    @ViewChild('chatBubble') chatBubble: ElementRef;\r\n\r\n    protected readonly IrisLogoLookDirection = IrisLogoLookDirection;\r\n    protected readonly IrisLogoSize = IrisLogoSize;\r\n\r\n    ngOnInit() {\r\n        // Subscribes to route params and gets the exerciseId from the route\r\n        this.paramsSubscription = this.route.params.subscribe((params) => {\r\n            const rawId = this.mode == ChatServiceMode.LECTURE ? params['lectureId'] : params['exerciseId'];\r\n            const id = parseInt(rawId, 10);\r\n            this.chatService.switchTo(this.mode, id);\r\n        });\r\n        // Subscribes to check for new messages\r\n        this.numNewMessagesSubscription = this.chatService.numNewMessages.subscribe((num) => {\r\n            this.hasNewMessages = num > 0;\r\n        });\r\n        this.latestIrisMessageSubscription = this.chatService.newIrisMessage\r\n            .pipe(\r\n                filter((msg) => !!msg),\r\n                switchMap((msg) => {\r\n                    if (msg!.content && msg!.content.length > 0) {\r\n                        return of((msg!.content[0] as IrisTextMessageContent).textContent);\r\n                    }\r\n                    return EMPTY;\r\n                }),\r\n            )\r\n            .subscribe((message) => {\r\n                this.newIrisMessage = message;\r\n                setTimeout(() => this.checkOverflow(), 0);\r\n                setTimeout(() => {\r\n                    this.newIrisMessage = undefined;\r\n                    this.isOverflowing = false;\r\n                }, this.CHAT_BUBBLE_TIMEOUT);\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // Closes the dialog if it is open\r\n        if (this.dialogRef) {\r\n            this.dialogRef.close();\r\n        }\r\n        this.numNewMessagesSubscription?.unsubscribe();\r\n        this.paramsSubscription.unsubscribe();\r\n        this.latestIrisMessageSubscription.unsubscribe();\r\n        this.newIrisMessage = undefined;\r\n        this.isOverflowing = false;\r\n    }\r\n\r\n    /**\r\n     * Handles the click event of the button.\r\n     * If the chat is open, it resets the number of new messages, closes the dialog, and sets chatOpen to false.\r\n     * If the chat is closed, it opens the chat dialog and sets chatOpen to true.\r\n     */\r\n    public handleButtonClick() {\r\n        if (this.chatOpen && this.dialogRef) {\r\n            this.dialog.closeAll();\r\n            this.chatOpen = false;\r\n        } else {\r\n            this.openChat();\r\n            this.chatOpen = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the chat bubble is overflowing and sets isOverflowing to true if it is.\r\n     */\r\n    public checkOverflow() {\r\n        const element = this.chatBubble?.nativeElement;\r\n        this.isOverflowing = !!element && element.scrollHeight > element.clientHeight;\r\n    }\r\n\r\n    /**\r\n     * Opens the chat dialog using MatDialog.\r\n     * Sets the configuration options for the dialog, including position, size, and data.\r\n     */\r\n    public openChat() {\r\n        this.chatOpen = true;\r\n        this.newIrisMessage = undefined;\r\n        this.isOverflowing = false;\r\n        this.dialogRef = this.dialog.open(IrisChatbotWidgetComponent, {\r\n            hasBackdrop: false,\r\n            scrollStrategy: this.overlay.scrollStrategies.noop(),\r\n            position: { bottom: '0px', right: '0px' },\r\n            disableClose: true,\r\n            data: { isChatGptWrapper: this.isChatGptWrapper },\r\n        });\r\n        this.dialogRef.afterClosed().subscribe(() => this.handleDialogClose());\r\n    }\r\n\r\n    private handleDialogClose() {\r\n        this.chatOpen = false;\r\n        this.newIrisMessage = undefined;\r\n    }\r\n\r\n    protected readonly IrisTextMessageContent = IrisTextMessageContent;\r\n}\r\n", "@if (!chatOpen) {\r\n    <div\r\n        #chatBubble\r\n        class=\"message-bubble\"\r\n        (click)=\"handleButtonClick()\"\r\n        [ngClass]=\"{ 'content-overflow': this.isOverflowing }\"\r\n        [@expandAnimation]=\"newIrisMessage ? 'visible' : 'hidden'\"\r\n    >\r\n        @if (newIrisMessage) {\r\n            <span [innerHTML]=\"newIrisMessage | htmlForMarkdown\"></span>\r\n            @if (this.isOverflowing) {\r\n                <div class=\"read-more\">\r\n                    <span jhiTranslate=\"artemisApp.iris.chatBubble.seeFull\"></span>\r\n                    <fa-icon [icon]=\"faAngleDoubleDown\" class=\"read-more-icon\" />\r\n                </div>\r\n            }\r\n        }\r\n    </div>\r\n    <div class=\"chatbot-button\">\r\n        @if (isChatGptWrapper) {\r\n            <!-- TODO TW: This \"feature\" is only temporary for a paper. -->\r\n            <img src=\"public/images/chatgpt-temp/ChatGPT_logo.svg\" alt=\"Iris Logo\" style=\"height: 70px\" class=\"iris-logo\" (click)=\"handleButtonClick()\" />\r\n        } @else {\r\n            <jhi-iris-logo [size]=\"IrisLogoSize.MEDIUM\" [look]=\"IrisLogoLookDirection.LEFT\" (click)=\"handleButtonClick()\" />\r\n        }\r\n        @if (hasNewMessages) {\r\n            <fa-icon [icon]=\"faCircle\" size=\"xl\" class=\"unread-indicator\" />\r\n        }\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_interactjs", "IrisChatbotWidgetComponent", "document", "inject", "DOCUMENT", "router", "Router", "dialog", "MatDialog", "dialogData", "MAT_DIALOG_DATA", "initialWidth", "initialHeight", "fullWidthFactor", "fullHeightFactor", "isMobile", "fullSize", "ButtonType", "navigationSubscription", "constructor", "events", "subscribe", "event", "NavigationStart", "closeAll", "onResize", "setPositionAndScale", "ngAfterViewInit", "interact", "resizable", "edges", "left", "right", "bottom", "top", "listeners", "move", "target", "x", "parseFloat", "getAttribute", "y", "style", "width", "rect", "height", "cntRect", "querySelector", "getBoundingClientRect", "deltaRect", "transform", "setAttribute", "modifiers", "restrictEdges", "outer", "restrictSize", "min", "inertia", "draggable", "allowFrom", "dx", "dy", "restrictRect", "restriction", "endOnly", "initX", "initY", "nE", "String", "ngOnDestroy", "toggleScrollLock", "closeChat", "toggleFullSize", "lockParent", "body", "classList", "add", "remove", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275resolveWindow", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "isChatGptWrapper", "IrisBaseChatbotComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "faAngleDoubleDown", "\u0275\u0275template", "IrisExerciseChatbotButtonComponent_Conditional_0_Conditional_4_Conditional_4_Template", "\u0275\u0275pipeBind1", "newIrisMessage", "\u0275\u0275sanitizeHtml", "\u0275\u0275conditional", "isOverflowing", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleButtonClick", "_r4", "IrisLogoSize", "MEDIUM", "IrisLogoLookDirection", "LEFT", "faCircle", "_r1", "IrisExerciseChatbotButtonComponent_Conditional_0_Conditional_4_Template", "IrisExerciseChatbotButtonComponent_Conditional_0_Conditional_8_Template", "IrisExerciseChatbotButtonComponent_Conditional_0_Conditional_9_Template", "IrisExerciseChatbotButtonComponent_Conditional_0_Conditional_10_Template", "\u0275\u0275pureFunction1", "_c1", "isChatGptWrapper", "hasNewMessages", "IrisExerciseChatbotButtonComponent", "dialog", "inject", "MatDialog", "overlay", "Overlay", "chatService", "IrisChatService", "route", "ActivatedRoute", "mode", "dialogRef", "chatOpen", "CHAT_BUBBLE_TIMEOUT", "numNewMessagesSubscription", "paramsSubscription", "latestIrisMessageSubscription", "faChevronDown", "chatBubble", "ngOnInit", "params", "subscribe", "rawId", "ChatServiceMode", "LECTURE", "id", "parseInt", "switchTo", "numNewMessages", "num", "pipe", "filter", "msg", "switchMap", "content", "length", "of", "textContent", "EMPTY", "message", "setTimeout", "checkOverflow", "undefined", "ngOnDestroy", "close", "unsubscribe", "closeAll", "openChat", "element", "nativeElement", "scrollHeight", "clientHeight", "open", "IrisChatbotWidgetComponent", "hasBackdrop", "scrollStrategy", "scrollStrategies", "noop", "position", "bottom", "right", "disableClose", "data", "afterClosed", "handleDialogClose", "IrisTextMessageContent", "selectors", "viewQuery", "rf", "ctx", "IrisExerciseChatbotButtonComponent_Conditional_0_Template", "NgClass", "TranslateDirective", "FaIconComponent", "IrisLogoComponent", "HtmlForMarkdownPipe", "styles", "animation", "trigger", "state", "style", "opacity", "transform", "transformOrigin", "transition", "animate"]
}
