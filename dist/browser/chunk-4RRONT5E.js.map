{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-instructor-trigger-build-button.component.ts", "src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-trigger-build-button.component.html"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ProgrammingExerciseTriggerBuildButtonComponent } from './programming-exercise-trigger-build-button.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SubmissionType } from 'app/entities/submission.model';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instructor-trigger-build-button',\r\n    templateUrl: './programming-exercise-trigger-build-button.component.html',\r\n    imports: [ButtonComponent],\r\n})\r\nexport class ProgrammingExerciseInstructorTriggerBuildButtonComponent extends ProgrammingExerciseTriggerBuildButtonComponent {\r\n    private translateService = inject(TranslateService);\r\n    private modalService = inject(NgbModal);\r\n\r\n    // Icons\r\n    faRedo = faRedo;\r\n\r\n    constructor() {\r\n        super();\r\n        this.showForSuccessfulSubmissions = true;\r\n        this.personalParticipation = false;\r\n    }\r\n\r\n    triggerBuild = (event: any) => {\r\n        // The button might be placed in other elements that have a click listener, so catch the click here.\r\n        event.stopPropagation();\r\n        if (this.participationHasLatestSubmissionWithoutResult) {\r\n            super.triggerFailed().subscribe();\r\n        } else {\r\n            super.triggerWithType(SubmissionType.INSTRUCTOR).subscribe();\r\n        }\r\n        if (!this.lastResultIsManual) {\r\n            super.triggerWithType(SubmissionType.INSTRUCTOR);\r\n            return;\r\n        }\r\n        // The instructor needs to confirm overriding a manual result.\r\n        const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'lg' });\r\n        modalRef.componentInstance.title = 'artemisApp.programmingExercise.resubmitSingle';\r\n        modalRef.componentInstance.text = this.translateService.instant('artemisApp.programmingExercise.resubmitConfirmManualResultOverride');\r\n        modalRef.result.then(() => {\r\n            super.triggerWithType(SubmissionType.INSTRUCTOR);\r\n        });\r\n    };\r\n}\r\n", "@if (participationBuildCanBeTriggered && (showForSuccessfulSubmissions || participationHasLatestSubmissionWithoutResult)) {\r\n    <jhi-button\r\n        [btnSize]=\"btnSize\"\r\n        [btnType]=\"participationHasLatestSubmissionWithoutResult ? ButtonType.ERROR : ButtonType.PRIMARY\"\r\n        [icon]=\"faRedo\"\r\n        [disabled]=\"isRetrievingBuildStatus\"\r\n        [isLoading]=\"isBuilding\"\r\n        (onClick)=\"triggerBuild($event)\"\r\n        [tooltip]=\"participationHasLatestSubmissionWithoutResult ? 'artemisApp.programmingExercise.resubmitOnFailedSubmission' : 'artemisApp.programmingExercise.resubmit'\"\r\n        [featureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n    />\r\n}\r\n"],
  "mappings": "4aCCIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,aAAA,CAAA,EAMIC,EAAA,UAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAWF,EAAAG,aAAAN,CAAA,CAAoB,CAAA,CAAA,EANnCO,EAAA,EAUJV,EAAA,EAAA;CAAA,oBATQW,EAAA,EAAAC,EAAA,UAAAN,EAAAO,OAAA,EAAmB,UAAAP,EAAAQ,8CAAAR,EAAAS,WAAAC,MAAAV,EAAAS,WAAAE,OAAA,EAC8E,OAAAX,EAAAY,MAAA,EAClF,WAAAZ,EAAAa,uBAAA,EACqB,YAAAb,EAAAc,UAAA,EACZ,UAAAd,EAAAQ,8CAAA,4DAAA,yCAAA,EAE2I,gBAAAR,EAAAe,cAAAC,oBAAA,GDM3K,IAAaC,GAAyD,IAAA,CAAhE,MAAOA,UAAiEC,CAA8C,CAChHC,iBAAmBC,EAAOC,CAAgB,EAC1CC,aAAeF,EAAOG,CAAQ,EAGtCX,OAASA,EAETY,aAAA,CACI,MAAK,EACL,KAAKC,6BAA+B,GACpC,KAAKC,sBAAwB,EACjC,CAEAvB,aAAgBwB,GAAc,CAQ1B,GANAA,EAAMC,gBAAe,EACjB,KAAKpB,8CACL,MAAMqB,cAAa,EAAGC,UAAS,EAE/B,MAAMC,gBAAe,YAAA,EAA4BD,UAAS,EAE1D,CAAC,KAAKE,mBAAoB,CAC1B,MAAMD,gBAAe,YAAA,EACrB,MACJ,CAEA,IAAME,EAAW,KAAKX,aAAaY,KAAKC,EAAgC,CAAEC,SAAU,GAAMC,KAAM,IAAI,CAAE,EACtGJ,EAASK,kBAAkBC,MAAQ,gDACnCN,EAASK,kBAAkBE,KAAO,KAAKrB,iBAAiBsB,QAAQ,oEAAoE,EACpIR,EAASS,OAAOC,KAAK,IAAK,CACtB,MAAMZ,gBAAe,YAAA,CACzB,CAAC,CACL,6CAhCSd,EAAwD,2BAAxDA,EAAwD2B,UAAA,CAAA,CAAA,0DAAA,CAAA,EAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,UAAA,UAAA,UAAA,OAAA,WAAA,YAAA,UAAA,eAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCdrEE,EAAA,EAAAC,EAAA,EAAA,CAAA,OAAAC,EAAAH,EAAAI,mCAAAJ,EAAA3B,8BAAA2B,EAAA5C,+CAAA,EAAA,EAAA,iBDYciD,CAAe,EAAAC,cAAA,CAAA,CAAA,SAEhBzC,CAAyD,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "triggerBuild", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "btnSize", "participationHasLatestSubmissionWithoutResult", "ButtonType", "ERROR", "PRIMARY", "faRedo", "isRetrievingBuildStatus", "isBuilding", "FeatureToggle", "ProgrammingExercises", "ProgrammingExerciseInstructorTriggerBuildButtonComponent", "ProgrammingExerciseTriggerBuildButtonComponent", "translateService", "inject", "TranslateService", "modalService", "NgbModal", "constructor", "showForSuccessfulSubmissions", "personalParticipation", "event", "stopPropagation", "triggerFailed", "subscribe", "triggerWithType", "lastResultIsManual", "modalRef", "open", "ConfirmAutofocusModalComponent", "keyboard", "size", "componentInstance", "title", "text", "instant", "result", "then", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProgrammingExerciseInstructorTriggerBuildButtonComponent_Conditional_0_Template", "\u0275\u0275conditional", "participationBuildCanBeTriggered", "ButtonComponent", "encapsulation"]
}
