{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/breakpoints/breakpoints.service.ts", "src/main/webapp/app/shared/breakpoints/layout.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\n\r\nexport const CustomBreakpointNames = {\r\n    extraSmall: 'extraSmall',\r\n    small: 'small',\r\n    medium: 'medium',\r\n    large: 'large',\r\n    extraLarge: 'extraLarge',\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class BreakpointsService {\r\n    breakpoints = new Map<string, string>();\r\n\r\n    constructor() {\r\n        this.breakpoints.set('(max-width: 576px)', CustomBreakpointNames.extraSmall);\r\n        this.breakpoints.set('(min-width: 576px)', CustomBreakpointNames.small);\r\n        this.breakpoints.set('(min-width: 768px)', CustomBreakpointNames.medium);\r\n        this.breakpoints.set('(min-width: 992px)', CustomBreakpointNames.large);\r\n        this.breakpoints.set('(min-width: 1200px)', CustomBreakpointNames.extraLarge);\r\n    }\r\n\r\n    getBreakpoints(): string[] {\r\n        return Array.from(this.breakpoints.keys());\r\n    }\r\n\r\n    getBreakpointName(breakpointKey: string): string {\r\n        return this.breakpoints.get(breakpointKey)!;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { BreakpointsService } from './breakpoints.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LayoutService {\r\n    private breakpointObserver = inject(BreakpointObserver);\r\n    private breakpointService = inject(BreakpointsService);\r\n\r\n    activeBreakpoints: string[] = [];\r\n\r\n    subscribeToLayoutChanges(): Observable<string[]> {\r\n        return this.breakpointObserver.observe(this.breakpointService.getBreakpoints()).pipe(map((observeResponse) => this.parseBreakpointsResponse(observeResponse.breakpoints)));\r\n    }\r\n\r\n    parseBreakpointsResponse(breakpoints: { [key: string]: boolean }): string[] {\r\n        this.activeBreakpoints = [];\r\n\r\n        Object.keys(breakpoints).map((key) => {\r\n            if (breakpoints[key]) {\r\n                this.activeBreakpoints.push(this.breakpointService.getBreakpointName(key));\r\n            }\r\n        });\r\n\r\n        return this.activeBreakpoints;\r\n    }\r\n\r\n    isBreakpointActive(breakpointName: string) {\r\n        return !!this.activeBreakpoints.find((breakpoint) => breakpoint === breakpointName);\r\n    }\r\n}\r\n"],
  "mappings": "gGAEO,IAAMA,EAAwB,CACjCC,WAAY,aACZC,MAAO,QACPC,OAAQ,SACRC,MAAO,QACPC,WAAY,cAMHC,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CAC3BC,YAAc,IAAIC,IAElBC,aAAA,CACI,KAAKF,YAAYG,IAAI,qBAAsBV,EAAsBC,UAAU,EAC3E,KAAKM,YAAYG,IAAI,qBAAsBV,EAAsBE,KAAK,EACtE,KAAKK,YAAYG,IAAI,qBAAsBV,EAAsBG,MAAM,EACvE,KAAKI,YAAYG,IAAI,qBAAsBV,EAAsBI,KAAK,EACtE,KAAKG,YAAYG,IAAI,sBAAuBV,EAAsBK,UAAU,CAChF,CAEAM,gBAAc,CACV,OAAOC,MAAMC,KAAK,KAAKN,YAAYO,KAAI,CAAE,CAC7C,CAEAC,kBAAkBC,EAAqB,CACnC,OAAO,KAAKT,YAAYU,IAAID,CAAa,CAC7C,4CAjBSV,EAAkB,6BAAlBA,EAAkBY,QAAlBZ,EAAkBa,UAAAC,WAFf,MAAM,CAAA,SAETd,CAAkB,GAAA,ECJ/B,IAAae,GAAa,IAAA,CAApB,MAAOA,CAAa,CACdC,mBAAqBC,EAAOC,CAAkB,EAC9CC,kBAAoBF,EAAOG,CAAkB,EAErDC,kBAA8B,CAAA,EAE9BC,0BAAwB,CACpB,OAAO,KAAKN,mBAAmBO,QAAQ,KAAKJ,kBAAkBK,eAAc,CAAE,EAAEC,KAAKC,EAAKC,GAAoB,KAAKC,yBAAyBD,EAAgBE,WAAW,CAAC,CAAC,CAC7K,CAEAD,yBAAyBC,EAAuC,CAC5D,YAAKR,kBAAoB,CAAA,EAEzBS,OAAOC,KAAKF,CAAW,EAAEH,IAAKM,GAAO,CAC7BH,EAAYG,CAAG,GACf,KAAKX,kBAAkBY,KAAK,KAAKd,kBAAkBe,kBAAkBF,CAAG,CAAC,CAEjF,CAAC,EAEM,KAAKX,iBAChB,CAEAc,mBAAmBC,EAAsB,CACrC,MAAO,CAAC,CAAC,KAAKf,kBAAkBgB,KAAMC,GAAeA,IAAeF,CAAc,CACtF,4CAxBSrB,EAAa,6BAAbA,EAAawB,QAAbxB,EAAayB,UAAAC,WAFV,MAAM,CAAA,SAET1B,CAAa,GAAA",
  "names": ["CustomBreakpointNames", "extraSmall", "small", "medium", "large", "extraLarge", "BreakpointsService", "breakpoints", "Map", "constructor", "set", "getBreakpoints", "Array", "from", "keys", "getBreakpointName", "breakpointKey", "get", "factory", "\u0275fac", "providedIn", "LayoutService", "breakpointObserver", "inject", "BreakpointObserver", "breakpointService", "BreakpointsService", "activeBreakpoints", "subscribeToLayoutChanges", "observe", "getBreakpoints", "pipe", "map", "observeResponse", "parseBreakpointsResponse", "breakpoints", "Object", "keys", "key", "push", "getBreakpointName", "isBreakpointActive", "breakpointName", "find", "breakpoint", "factory", "\u0275fac", "providedIn"]
}
