{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/feature-toggle/feature-toggle.directive.ts"],
  "sourcesContent": ["import { Directive, HostBinding, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { FeatureToggle, FeatureToggleService } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[jhiFeatureToggle]' })\r\nexport class FeatureToggleDirective implements OnInit, OnDestroy {\r\n    private featureToggleService = inject(FeatureToggleService);\r\n\r\n    @Input('jhiFeatureToggle') features: FeatureToggle | FeatureToggle[];\r\n    /**\r\n     * This input must be used to overwrite the disabled state given that the feature toggle is inactive.\r\n     * If the normal [disabled] directive of Angular would be used, the HostBinding in this directive would always enable the element if the feature is active.\r\n     */\r\n    @Input() overwriteDisabled: boolean | null;\r\n    /**\r\n     * Condition to check even before checking for the feature toggle. If true, the feature toggle won't get checked.\r\n     * This can be useful e.g. if you use the same button for different features (like our delete button) and only want\r\n     * to check the toggle for programming exercises\r\n     */\r\n    @Input() skipFeatureToggle: boolean;\r\n    private featureActive = true;\r\n\r\n    private featureToggleActiveSubscription: Subscription;\r\n\r\n    /**\r\n     * Life cycle hook called by Angular to indicate that Angular is done creating the component\r\n     */\r\n    ngOnInit() {\r\n        // If no feature is set for the toggle, the directive does nothing.\r\n        if (!this.features) {\r\n            return;\r\n        }\r\n        const featureArray = Array.isArray(this.features) ? this.features : [this.features];\r\n        if (!featureArray.length) {\r\n            return;\r\n        }\r\n        this.featureToggleActiveSubscription = this.featureToggleService\r\n            .getFeatureTogglesActive(featureArray)\r\n            .pipe(\r\n                // Disable the element if any of the features is inactive.\r\n                tap((active) => {\r\n                    this.featureActive = this.skipFeatureToggle || active;\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook called by Angular for cleanup just before Angular destroys the component\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.featureToggleActiveSubscription) {\r\n            this.featureToggleActiveSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This will disable the feature component (normally a button) if the specified feature flag is inactive OR\r\n     * if there is some other condition given as an Input, which takes higher priority (input overwriteDisabled)\r\n     */\r\n    @HostBinding('disabled')\r\n    get disabled(): boolean {\r\n        return this.overwriteDisabled || !this.featureActive;\r\n    }\r\n}\r\n"],
  "mappings": "yGAMA,IAAaA,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,qBAAuBC,EAAOC,CAAoB,EAE/BC,SAKlBC,kBAMAC,kBACDC,cAAgB,GAEhBC,gCAKRC,UAAQ,CAEJ,GAAI,CAAC,KAAKL,SACN,OAEJ,IAAMM,EAAeC,MAAMC,QAAQ,KAAKR,QAAQ,EAAI,KAAKA,SAAW,CAAC,KAAKA,QAAQ,EAC7EM,EAAaG,SAGlB,KAAKL,gCAAkC,KAAKP,qBACvCa,wBAAwBJ,CAAY,EACpCK,KAEGC,EAAKC,GAAU,CACX,KAAKV,cAAgB,KAAKD,mBAAqBW,CACnD,CAAC,CAAC,EAELC,UAAS,EAClB,CAKAC,aAAW,CACH,KAAKX,iCACL,KAAKA,gCAAgCY,YAAW,CAExD,CAMA,IACIC,UAAQ,CACR,OAAO,KAAKhB,mBAAqB,CAAC,KAAKE,aAC3C,4CA1DSP,EAAsB,2BAAtBA,EAAsBsB,UAAA,CAAA,CAAA,GAAA,mBAAA,EAAA,CAAA,EAAAC,SAAA,EAAAC,aAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GAAtBE,EAAA,WAAAD,EAAAL,QAAA,4IAAArB,CAAsB,GAAA",
  "names": ["FeatureToggleDirective", "featureToggleService", "inject", "FeatureToggleService", "features", "overwriteDisabled", "skipFeatureToggle", "featureActive", "featureToggleActiveSubscription", "ngOnInit", "featureArray", "Array", "isArray", "length", "getFeatureTogglesActive", "pipe", "tap", "active", "subscribe", "ngOnDestroy", "unsubscribe", "disabled", "selectors", "hostVars", "hostBindings", "rf", "ctx", "\u0275\u0275hostProperty"]
}
