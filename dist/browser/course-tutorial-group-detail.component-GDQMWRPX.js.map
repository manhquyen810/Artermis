{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/tutorial-group-details/course-tutorial-group-detail/course-tutorial-group-detail.component.ts", "src/main/webapp/app/overview/tutorial-group-details/course-tutorial-group-detail/course-tutorial-group-detail.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TutorialGroupsService } from 'app/course/tutorial-groups/services/tutorial-groups.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { BehaviorSubject, Subscription, catchError, combineLatest, forkJoin, switchMap, tap } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { LoadingIndicatorContainerComponent } from 'app/shared/loading-indicator-container/loading-indicator-container.component';\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport { TutorialGroupDetailComponent } from 'app/course/tutorial-groups/shared/tutorial-group-detail/tutorial-group-detail.component';\r\n\r\n@Component({\r\n    selector: 'jhi-course-tutorial-group-detail',\r\n    templateUrl: './course-tutorial-group-detail.component.html',\r\n    styleUrls: ['./course-tutorial-group-detail.component.scss'],\r\n    imports: [LoadingIndicatorContainerComponent, NgClass, TutorialGroupDetailComponent, AsyncPipe],\r\n})\r\nexport class CourseTutorialGroupDetailComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private tutorialGroupService = inject(TutorialGroupsService);\r\n    private alertService = inject(AlertService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    isLoading$ = new BehaviorSubject<boolean>(false);\r\n    tutorialGroup?: TutorialGroup;\r\n    course?: Course;\r\n    private paramsSubscription: Subscription;\r\n    profileSubscription?: Subscription;\r\n    isProduction = true;\r\n    isTestServer = false;\r\n\r\n    ngOnInit(): void {\r\n        const courseIdParams$ = this.route.parent?.parent?.params;\r\n        const tutorialGroupIdParams$ = this.route.params;\r\n        if (courseIdParams$) {\r\n            this.paramsSubscription = combineLatest([courseIdParams$, tutorialGroupIdParams$])\r\n                .pipe(\r\n                    switchMap(([courseIdParams, tutorialGroupIdParams]) => {\r\n                        this.isLoading$.next(true);\r\n                        const tutorialGroupId = parseInt(tutorialGroupIdParams.tutorialGroupId, 10);\r\n                        const courseId = parseInt(courseIdParams.courseId, 10);\r\n                        return forkJoin({\r\n                            courseResult: this.courseManagementService.find(courseId),\r\n                            tutorialGroupResult: this.tutorialGroupService.getOneOfCourse(courseId, tutorialGroupId),\r\n                        });\r\n                    }),\r\n                    tap({\r\n                        next: () => {\r\n                            this.isLoading$.next(false);\r\n                        },\r\n                    }),\r\n                    catchError((error: HttpErrorResponse) => {\r\n                        this.isLoading$.next(false);\r\n                        onError(this.alertService, error);\r\n                        throw error;\r\n                    }),\r\n                )\r\n                .subscribe({\r\n                    next: ({ courseResult, tutorialGroupResult }) => {\r\n                        this.tutorialGroup = tutorialGroupResult.body ?? undefined;\r\n                        this.course = courseResult.body ?? undefined;\r\n                    },\r\n                });\r\n        }\r\n        this.profileSubscription = this.profileService.getProfileInfo()?.subscribe((profileInfo) => {\r\n            this.isProduction = profileInfo?.inProduction;\r\n            this.isTestServer = profileInfo.testServer ?? false;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.paramsSubscription?.unsubscribe();\r\n        this.profileSubscription?.unsubscribe();\r\n    }\r\n}\r\n", "<jhi-loading-indicator-container [isLoading]=\"(isLoading$ | async) ?? false\">\r\n    <div class=\"row justify-content-center\">\r\n        @if (tutorialGroup && course) {\r\n            <div class=\"col-12 p-3 scrollable-content\" [ngClass]=\"{ 'content-height-dev': !isProduction || isTestServer }\">\r\n                <jhi-tutorial-group-detail [tutorialGroup]=\"tutorialGroup\" [course]=\"course\" />\r\n            </div>\r\n        }\r\n    </div>\r\n</jhi-loading-indicator-container>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "isProduction", "isTestServer", "tutorialGroup", "course", "CourseTutorialGroupDetailComponent", "route", "inject", "ActivatedRoute", "tutorialGroupService", "TutorialGroupsService", "alertService", "AlertService", "courseManagementService", "CourseManagementService", "profileService", "ProfileService", "isLoading$", "BehaviorSubject", "paramsSubscription", "profileSubscription", "ngOnInit", "courseIdParams$", "parent", "params", "tutorialGroupIdParams$", "combineLatest", "pipe", "switchMap", "courseIdParams", "tutorialGroupIdParams", "next", "tutorialGroupId", "parseInt", "courseId", "forkJoin", "courseResult", "find", "tutorialGroupResult", "getOneOfCourse", "tap", "catchError", "error", "onError", "subscribe", "body", "undefined", "getProfileInfo", "profileInfo", "inProduction", "testServer", "ngOnDestroy", "unsubscribe", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CourseTutorialGroupDetailComponent_Conditional_5_Template", "tmp_0_0", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "LoadingIndicatorContainerComponent", "NgClass", "TutorialGroupDetailComponent", "AsyncPipe", "encapsulation"]
}
