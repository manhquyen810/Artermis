{
  "version": 3,
  "sources": ["src/main/webapp/app/course/tutorial-groups/shared/weekdays.ts", "src/main/webapp/app/shared/pipes/artemis-date.pipe.ts"],
  "sourcesContent": ["export type weekDay = {\r\n    id: string;\r\n    translationKey: string;\r\n    value: number;\r\n};\r\n\r\nexport const weekDays: weekDay[] = [\r\n    {\r\n        id: 'monday',\r\n        translationKey: 'monday',\r\n        value: 1,\r\n    },\r\n    {\r\n        id: 'tuesday',\r\n        translationKey: 'tuesday',\r\n        value: 2,\r\n    },\r\n    {\r\n        id: 'wednesday',\r\n        translationKey: 'wednesday',\r\n        value: 3,\r\n    },\r\n    {\r\n        id: 'thursday',\r\n        translationKey: 'thursday',\r\n        value: 4,\r\n    },\r\n    {\r\n        id: 'friday',\r\n        translationKey: 'friday',\r\n        value: 5,\r\n    },\r\n    {\r\n        id: 'saturday',\r\n        translationKey: 'saturday',\r\n        value: 6,\r\n    },\r\n    {\r\n        id: 'sunday',\r\n        translationKey: 'sunday',\r\n        value: 7,\r\n    },\r\n];\r\n\r\nexport function getDayTranslationKey(dayOfWeek?: number) {\r\n    if (!dayOfWeek) {\r\n        return '';\r\n    } else {\r\n        return `artemisApp.generic.weekdays.${weekDays[dayOfWeek - 1].translationKey}`;\r\n    }\r\n}\r\n", "import { OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { getDayTranslationKey } from 'app/course/tutorial-groups/shared/weekdays';\r\nimport { dayOfWeekZeroSundayToZeroMonday } from 'app/utils/date.utils';\r\n\r\nexport type DateType = Date | dayjs.Dayjs | string | number | null | undefined;\r\nexport type DateFormat = 'short' | 'long' | 'short-date' | 'long-date' | 'time';\r\n\r\n/**\r\n * Format a given date time that must be convertible to a dayjs object to a localized date time\r\n * string based on the current language setting. Always returns the short format on mobile devices.\r\n * This pipe is stateful (pure = false) so that it can adapt to changes of the current locale.\r\n * Usage:\r\n *   dateTime | artemisDate:format:seconds\r\n * Examples (for locale == 'en'):\r\n *   {{ course.startDate | artemisDate }}\r\n *   formats to: Dec 17, 2019 12:43 AM\r\n *   {{ course.startDate | artemisDate: 'short-date' }}\r\n *   formats to: 17/12/19\r\n */\r\n@Pipe({\r\n    name: 'artemisDate',\r\n    pure: false,\r\n})\r\nexport class ArtemisDatePipe implements PipeTransform, OnDestroy {\r\n    private translateService = inject(TranslateService);\r\n\r\n    private dateTime: dayjs.Dayjs;\r\n    private locale: string;\r\n    private localizedDateTime: string;\r\n    private onLangChange?: Subscription;\r\n    private long = true;\r\n    private showDate = true;\r\n    private showTime = true;\r\n    private showSeconds = false;\r\n    private showWeekday = false;\r\n    private showMilliSeconds = false;\r\n    private static mobileDeviceSize = 768;\r\n\r\n    /**\r\n     * Format a given dateTime to a localized date time string based on the current language setting.\r\n     * @param dateTime The date time that should be formatted. Must be convertible to dayjs().\r\n     * @param format Format of the localized date time. Defaults to 'long'.\r\n     * @param seconds Should seconds be displayed? Defaults to false.\r\n     * @param timeZone Explicit time zone that should be used instead of the local time zone.\r\n     * @param weekday Should the weekday be displayed? Defaults to false.\r\n     * @param milliSeconds Should milliseconds be displayed? Defaults to false.\r\n     */\r\n    transform(dateTime: DateType, format: DateFormat = 'long', seconds = false, timeZone: string | undefined = undefined, weekday = false, milliSeconds = false): string {\r\n        // Return empty string if given dateTime equals null or is not convertible to dayjs.\r\n        if (!dateTime || !dayjs(dateTime).isValid()) {\r\n            return '';\r\n        }\r\n        this.dateTime = timeZone ? dayjs(dateTime).tz(timeZone) : dayjs(dateTime);\r\n        this.long = format === 'long' || format === 'long-date';\r\n        this.showDate = format !== 'time';\r\n        this.showTime = format !== 'short-date' && format !== 'long-date';\r\n        this.showSeconds = seconds;\r\n        this.showWeekday = weekday;\r\n        this.showMilliSeconds = milliSeconds;\r\n\r\n        // Evaluate the format length based on the current window width.\r\n        this.formatLengthBasedOnWindowWidth(window.innerWidth);\r\n\r\n        // Set locale to current language\r\n        this.updateLocale(this.translateService.currentLang);\r\n        this.updateLocalizedDateTime(timeZone);\r\n\r\n        // Clean up a possibly existing subscription to onLangChange\r\n        this.cleanUpSubscription();\r\n\r\n        // Subscribe to onLangChange event, in case the language changes.\r\n        if (!this.onLangChange) {\r\n            this.onLangChange = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\r\n                this.updateLocale(event.lang);\r\n                this.updateLocalizedDateTime();\r\n            });\r\n        }\r\n\r\n        return this.localizedDateTime;\r\n    }\r\n\r\n    /**\r\n     * Returns a localized dayjs format string.\r\n     * WARNING: As this method is static it cannot listen to changes of the current locale itself. It also does not take into account the device width.\r\n     * @param locale The locale string of the desired language. Defaults to 'en'.\r\n     * @param format Format of the localized date time. Defaults to 'long'.\r\n     * @param seconds Should seconds be displayed? Defaults to false.\r\n     * @param showMilliSeconds whether to show milliseconds. Defaults to false.\r\n     */\r\n    static format(locale = 'en', format: DateFormat = 'long', seconds = false, showMilliSeconds = false): string {\r\n        const long = format === 'long' || format === 'long-date';\r\n        const showDate = format !== 'time';\r\n        const showTime = format !== 'short-date' && format !== 'long-date';\r\n        const dateFormat = ArtemisDatePipe.dateFormat(long, showDate, locale);\r\n        const timeFormat = ArtemisDatePipe.timeFormat(showTime, seconds, showMilliSeconds);\r\n        return dateFormat + (dateFormat && timeFormat ? ' ' : '') + timeFormat;\r\n    }\r\n\r\n    private updateLocale(lang?: string): void {\r\n        if (!lang) {\r\n            // when there is no lang defined, we use the default one\r\n            lang = 'en';\r\n        }\r\n\r\n        if (lang !== this.locale) {\r\n            this.locale = lang;\r\n        }\r\n    }\r\n\r\n    private updateLocalizedDateTime(timeZone: string | undefined = undefined): void {\r\n        this.dateTime = timeZone ? this.dateTime.locale(this.locale).tz(timeZone) : this.dateTime.locale(this.locale);\r\n        const localizedDateTime = this.dateTime.format(this.format());\r\n        if (this.showWeekday && this.dateTime) {\r\n            const weekdayIndex = dayOfWeekZeroSundayToZeroMonday(this.dateTime.day()) + 1;\r\n            const key = getDayTranslationKey(weekdayIndex);\r\n            const translatedWeekday = this.translateService.instant(key);\r\n            this.localizedDateTime = translatedWeekday + ', ' + localizedDateTime;\r\n        } else {\r\n            this.localizedDateTime = localizedDateTime;\r\n        }\r\n    }\r\n\r\n    private format(): string {\r\n        const dateFormat = ArtemisDatePipe.dateFormat(this.long, this.showDate, this.locale);\r\n        const timeFormat = ArtemisDatePipe.timeFormat(this.showTime, this.showSeconds, this.showMilliSeconds);\r\n        return dateFormat + (dateFormat && timeFormat ? ' ' : '') + timeFormat;\r\n    }\r\n\r\n    private static dateFormat(long: boolean, showDate: boolean, locale: string): string {\r\n        if (!showDate) {\r\n            return '';\r\n        }\r\n        let format = 'll';\r\n        if (!long) {\r\n            switch (locale) {\r\n                case 'de':\r\n                    format = 'DD.MM.YYYY';\r\n                    break;\r\n                default:\r\n                    format = 'YYYY-MM-DD';\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    private static timeFormat(showTime: boolean, showSeconds: boolean, showMilliSeconds: boolean): string {\r\n        if (!showTime) {\r\n            return '';\r\n        }\r\n        let format = 'HH:mm';\r\n        if (showMilliSeconds) {\r\n            format = 'HH:mm:ss.SSS';\r\n        } else if (showSeconds) {\r\n            format = 'HH:mm:ss';\r\n        }\r\n        return format;\r\n    }\r\n\r\n    private formatLengthBasedOnWindowWidth(windowWidth: number): void {\r\n        if (windowWidth <= ArtemisDatePipe.mobileDeviceSize) {\r\n            this.long = false;\r\n        }\r\n    }\r\n\r\n    private cleanUpSubscription(): void {\r\n        if (this.onLangChange != undefined) {\r\n            this.onLangChange.unsubscribe();\r\n            this.onLangChange = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from onLangChange event of translation service on pipe destruction.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.cleanUpSubscription();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["weekDays", "id", "translationKey", "value", "getDayTranslationKey", "dayOfWeek", "ArtemisDatePipe", "translateService", "inject", "TranslateService", "dateTime", "locale", "localizedDateTime", "onLangChange", "long", "showDate", "showTime", "showSeconds", "showWeekday", "showMilliSeconds", "mobileDeviceSize", "transform", "format", "seconds", "timeZone", "undefined", "weekday", "milliSeconds", "dayjs", "isValid", "tz", "formatLengthBasedOnWindowWidth", "window", "innerWidth", "updateLocale", "currentLang", "updateLocalizedDateTime", "cleanUpSubscription", "subscribe", "event", "lang", "dateFormat", "timeFormat", "weekdayIndex", "dayOfWeekZeroSundayToZeroMonday", "day", "key", "getDayTranslationKey", "translatedWeekday", "instant", "windowWidth", "unsubscribe", "ngOnDestroy", "pure"]
}
