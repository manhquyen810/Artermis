{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/util/utils.ts"],
  "sourcesContent": ["import { omit, sum } from 'lodash-es';\r\nimport { captureException } from '@sentry/angular';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\n\r\nexport function cleanString(str?: string): string {\r\n    if (!str) {\r\n        return '';\r\n    }\r\n    return str.toLowerCase().replaceAll(' ', '').replaceAll('_', '').replaceAll('-', '').trim();\r\n}\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\r\n * Stringify a circular JSON structure by omitting keys that would close a circle\r\n *\r\n * @param val The object you want to stringify\r\n */\r\nexport const stringifyCircular = (val: any): string => {\r\n    const seen = new WeakSet();\r\n    return JSON.stringify(val, (key, value) => {\r\n        if (typeof value === 'object' && value !== null) {\r\n            if (seen.has(value)) {\r\n                return;\r\n            }\r\n            seen.add(value);\r\n        }\r\n        return value;\r\n    });\r\n};\r\n\r\n/**\r\n * Stringifies an object ignoring certain top-level fields\r\n *\r\n * @param val Object to stringify\r\n * @param ignoredFields Fields to omit from object before converting to string\r\n */\r\nexport const stringifyIgnoringFields = <T extends object>(val: T, ...ignoredFields: string[]): string => {\r\n    return JSON.stringify(omit(val, ignoredFields));\r\n};\r\n\r\n/**\r\n * Helper function to make actually rounding possible\r\n * @param value\r\n * @param exp\r\n */\r\nexport const round = (value: any, exp?: number) => {\r\n    if (exp == undefined || +exp === 0) {\r\n        return Math.round(value);\r\n    }\r\n\r\n    value = +value;\r\n    exp = +exp;\r\n\r\n    if (isNaN(value) || !(exp % 1 === 0)) {\r\n        return NaN;\r\n    }\r\n\r\n    // Shift\r\n    value = value.toString().split('e');\r\n    value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + exp : exp)));\r\n\r\n    // Shift back\r\n    value = value.toString().split('e');\r\n    return +(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp));\r\n};\r\n\r\n/**\r\n * Rounds the score to the specified amount in the course object.\r\n * @param relativeScore The score of the student in the value range [0;1]\r\n * @param course The course in which the score is displayed. The attribute accuracyOfScores determines the accuracy\r\n * @returns The rounded percent of the score in the range [0;100]\r\n */\r\nexport const roundScorePercentSpecifiedByCourseSettings = (relativeScore: any, course: Course | undefined) => {\r\n    if (!course) {\r\n        captureException(new Error('The course object used for determining the rounding of scores was undefined'));\r\n    }\r\n    return round(relativeScore * 100, course?.accuracyOfScores ?? 1);\r\n};\r\n\r\n/**\r\n * Rounds the given value to the accuracy defined by the course.\r\n * @param value The value that should be rounded.\r\n * @param course The course which defines the accuracy to which the value should be rounded.\r\n * @returns The rounded value.\r\n */\r\nexport const roundValueSpecifiedByCourseSettings = (value: any, course: Course | undefined) => {\r\n    if (!course) {\r\n        captureException(new Error('The course object used for determining the rounding of scores was undefined'));\r\n    }\r\n    return round(value, course?.accuracyOfScores ?? 1);\r\n};\r\n\r\n/**\r\n * Computes the average value for the given array.\r\n * @param values The array for which the average should be computed.\r\n * @returns The average value of the array. Zero for an empty array.\r\n */\r\nexport const average = (values: Array<number>): number => {\r\n    if (values.length === 0) {\r\n        return 0;\r\n    } else {\r\n        return sum(values) / values.length;\r\n    }\r\n};\r\n\r\n/**\r\n * finds the latest result based on the max id\r\n * @param results\r\n */\r\nexport const findLatestResult = (results: Result[] | undefined) => {\r\n    return results?.length ? results.reduce((current, result) => (current.id! > result.id! ? current : result)) : undefined;\r\n};\r\n\r\nexport const isDate = (input: any) => {\r\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\r\n};\r\n\r\n/**\r\n * Represents the inclusive range with a lower and upper bound\r\n */\r\nexport class Range {\r\n    constructor(\r\n        public lowerBound: number,\r\n        public upperBound: number,\r\n    ) {}\r\n\r\n    toString(): string {\r\n        return '[' + this.lowerBound + '%, ' + this.upperBound + '%' + (this.upperBound === 100 ? ']' : ')');\r\n    }\r\n}\r\n\r\nexport function getAsMutableObject(object: any) {\r\n    return { ...object };\r\n}\r\n\r\n/**\r\n * Usages:\r\n * - when the router keeps the position from the previous page for the new page\r\n * - to make sure that a message from the {@link AlertService} is recognized by the user\r\n */\r\nexport function scrollToTopOfPage() {\r\n    // The window itself cannot be scrolled; overflowing content is handled by the page wrapper.\r\n    const pageWrapper = document.getElementById('page-wrapper');\r\n    if (pageWrapper) {\r\n        pageWrapper.scroll(0, 0);\r\n    }\r\n}\r\n\r\n/**\r\n * For exam exercises the course will not be set as exam exercises are linked via exercise groups.\r\n *\r\n * @param exercise for which is checked if it belongs to an exam\r\n */\r\nexport function isExamExercise(exercise: Exercise) {\r\n    return exercise.course === undefined;\r\n}\r\n\r\n/**\r\n * Rounds a value up to the nearest multiple\r\n *\r\n * @param value    that shall be rounded\r\n * @param multiple to which we round up\r\n * @param roundUp  if true, we round up, otherwise we round down\r\n */\r\nexport function roundToNextMultiple(value: number, multiple: number, roundUp: boolean) {\r\n    if (roundUp) {\r\n        return Math.ceil(value / multiple) * multiple;\r\n    }\r\n\r\n    return Math.floor(value / multiple) * multiple;\r\n}\r\n\r\nexport function removeSpecialCharacters(input: string): string {\r\n    return input.replace(/[^a-zA-Z0-9]/g, '');\r\n}\r\n"],
  "mappings": "uFAMM,SAAUA,EAAYC,EAAY,CACpC,OAAKA,EAGEA,EAAIC,YAAW,EAAGC,WAAW,IAAK,EAAE,EAAEA,WAAW,IAAK,EAAE,EAAEA,WAAW,IAAK,EAAE,EAAEC,KAAI,EAF9E,EAGf,CAQO,IAAMC,EAAqBC,GAAoB,CAClD,IAAMC,EAAO,IAAIC,QACjB,OAAOC,KAAKC,UAAUJ,EAAK,CAACK,EAAKC,IAAS,CACtC,GAAI,OAAOA,GAAU,UAAYA,IAAU,KAAM,CAC7C,GAAIL,EAAKM,IAAID,CAAK,EACd,OAEJL,EAAKO,IAAIF,CAAK,CAClB,CACA,OAAOA,CACX,CAAC,CACL,EAQaG,EAA0BA,CAAmBT,KAAWU,IAC1DP,KAAKC,UAAUO,EAAKX,EAAKU,CAAa,CAAC,EAQrCE,EAAQA,CAACN,EAAYO,IAC1BA,GAAOC,MAAa,CAACD,GAAQ,EACtBE,KAAKH,MAAMN,CAAK,GAG3BA,EAAQ,CAACA,EACTO,EAAM,CAACA,EAEHG,MAAMV,CAAK,GAAOO,EAAM,IAAM,EACvBI,KAIXX,EAAQA,EAAMY,SAAQ,EAAGC,MAAM,GAAG,EAClCb,EAAQS,KAAKH,MAAM,EAAEN,EAAM,CAAC,EAAI,KAAOA,EAAM,CAAC,EAAI,CAACA,EAAM,CAAC,EAAIO,EAAMA,GAAK,EAGzEP,EAAQA,EAAMY,SAAQ,EAAGC,MAAM,GAAG,EAC3B,EAAEb,EAAM,CAAC,EAAI,KAAOA,EAAM,CAAC,EAAI,CAACA,EAAM,CAAC,EAAIO,EAAM,CAACA,MAShDO,EAA6CA,CAACC,EAAoBC,KACtEA,GACDC,EAAiB,IAAIC,MAAM,6EAA6E,CAAC,EAEtGZ,EAAMS,EAAgB,IAAKC,GAAQG,kBAAoB,CAAC,GAStDC,EAAsCA,CAACpB,EAAYgB,KACvDA,GACDC,EAAiB,IAAIC,MAAM,6EAA6E,CAAC,EAEtGZ,EAAMN,EAAOgB,GAAQG,kBAAoB,CAAC,GAQxCE,EAAWC,GAChBA,EAAOC,SAAW,EACX,EAEAC,EAAIF,CAAM,EAAIA,EAAOC,OAQvBE,EAAoBC,GACtBA,GAASH,OAASG,EAAQC,OAAO,CAACC,EAASC,IAAYD,EAAQE,GAAMD,EAAOC,GAAMF,EAAUC,CAAO,EAAIrB,OAGrGuB,EAAUC,GACZA,aAAiBC,MAAQC,OAAOC,UAAUvB,SAASwB,KAAKJ,CAAK,IAAM,gBAMjEK,EAAP,KAAY,CAEHC,WACAC,WAFXC,YACWF,EACAC,EAAkB,CADlB,KAAAD,WAAAA,EACA,KAAAC,WAAAA,CACR,CAEH3B,UAAQ,CACJ,MAAO,IAAM,KAAK0B,WAAa,MAAQ,KAAKC,WAAa,KAAO,KAAKA,aAAe,IAAM,IAAM,IACpG,GAYE,SAAUE,GAAiB,CAE7B,IAAMC,EAAcC,SAASC,eAAe,cAAc,EACtDF,GACAA,EAAYG,OAAO,EAAG,CAAC,CAE/B,CAOM,SAAUC,EAAeC,EAAkB,CAC7C,OAAOA,EAASC,SAAWC,MAC/B,CASM,SAAUC,EAAoBC,EAAeC,EAAkBC,EAAgB,CACjF,OAAIA,EACOC,KAAKC,KAAKJ,EAAQC,CAAQ,EAAIA,EAGlCE,KAAKE,MAAML,EAAQC,CAAQ,EAAIA,CAC1C,CAEM,SAAUK,EAAwBC,EAAa,CACjD,OAAOA,EAAMC,QAAQ,gBAAiB,EAAE,CAC5C",
  "names": ["cleanString", "str", "toLowerCase", "replaceAll", "trim", "stringifyCircular", "val", "seen", "WeakSet", "JSON", "stringify", "key", "value", "has", "add", "stringifyIgnoringFields", "ignoredFields", "omit", "round", "exp", "undefined", "Math", "isNaN", "NaN", "toString", "split", "roundScorePercentSpecifiedByCourseSettings", "relativeScore", "course", "captureException", "Error", "accuracyOfScores", "roundValueSpecifiedByCourseSettings", "average", "values", "length", "sum", "findLatestResult", "results", "reduce", "current", "result", "id", "isDate", "input", "Date", "Object", "prototype", "call", "Range", "lowerBound", "upperBound", "constructor", "scrollToTopOfPage", "pageWrapper", "document", "getElementById", "scroll", "isExamExercise", "exercise", "course", "undefined", "roundToNextMultiple", "value", "multiple", "roundUp", "Math", "ceil", "floor", "removeSpecialCharacters", "input", "replace"]
}
