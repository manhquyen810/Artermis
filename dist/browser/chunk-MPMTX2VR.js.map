{
  "version": 3,
  "sources": ["src/main/webapp/app/account/password/password-strength-bar.component.ts"],
  "sourcesContent": ["import { Component, ElementRef, Input, Renderer2, inject } from '@angular/core';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-password-strength-bar',\r\n    template: ` <div id=\"strength\">\r\n        <small jhiTranslate=\"global.messages.validate.newpassword.strength\">Password strength:</small>\r\n        <ul id=\"strengthBar\">\r\n            <li class=\"point\"></li>\r\n            <li class=\"point\"></li>\r\n            <li class=\"point\"></li>\r\n            <li class=\"point\"></li>\r\n            <li class=\"point\"></li>\r\n        </ul>\r\n    </div>`,\r\n    styleUrls: ['password-strength-bar.scss'],\r\n    imports: [TranslateDirective],\r\n})\r\nexport class PasswordStrengthBarComponent {\r\n    private renderer = inject(Renderer2);\r\n    private elementRef = inject(ElementRef);\r\n\r\n    colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\r\n\r\n    measureStrength(p: string): number {\r\n        let force = 0;\r\n        const regex = /[$-/:-?{-~!\"^_`[\\]]/g; // \"\r\n        const lowerLetters = /[a-z]+/.test(p);\r\n        const upperLetters = /[A-Z]+/.test(p);\r\n        const numbers = /[0-9]+/.test(p);\r\n        const symbols = regex.test(p);\r\n\r\n        const flags = [lowerLetters, upperLetters, numbers, symbols];\r\n        const passedMatches = flags.filter((isMatchedFlag: boolean) => {\r\n            return isMatchedFlag === true;\r\n        }).length;\r\n\r\n        force += 2 * p.length + (p.length >= 10 ? 1 : 0);\r\n        force += passedMatches * 10;\r\n\r\n        // penalty (short password)\r\n        force = p.length <= 6 ? Math.min(force, 10) : force;\r\n\r\n        // penalty (poor variety of characters)\r\n        force = passedMatches === 1 ? Math.min(force, 10) : force;\r\n        force = passedMatches === 2 ? Math.min(force, 20) : force;\r\n        force = passedMatches === 3 ? Math.min(force, 40) : force;\r\n\r\n        return force;\r\n    }\r\n\r\n    getColor(s: number): { idx: number; color: string } {\r\n        let idx = 0;\r\n        if (s <= 10) {\r\n            idx = 0;\r\n        } else if (s <= 20) {\r\n            idx = 1;\r\n        } else if (s <= 30) {\r\n            idx = 2;\r\n        } else if (s <= 40) {\r\n            idx = 3;\r\n        } else {\r\n            idx = 4;\r\n        }\r\n        return { idx: idx + 1, color: this.colors[idx] };\r\n    }\r\n\r\n    @Input()\r\n    set passwordToCheck(password: string) {\r\n        if (password) {\r\n            const c = this.getColor(this.measureStrength(password));\r\n            const element = this.elementRef.nativeElement;\r\n            if (element.className) {\r\n                this.renderer.removeClass(element, element.className);\r\n            }\r\n            const lis = element.getElementsByTagName('li');\r\n            for (let i = 0; i < lis.length; i++) {\r\n                if (i < c.idx) {\r\n                    this.renderer.setStyle(lis[i], 'backgroundColor', c.color);\r\n                } else {\r\n                    this.renderer.setStyle(lis[i], 'backgroundColor', '#DDD');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["PasswordStrengthBarComponent", "renderer", "inject", "Renderer2", "elementRef", "ElementRef", "colors", "measureStrength", "p", "force", "regex", "lowerLetters", "test", "upperLetters", "numbers", "symbols", "passedMatches", "filter", "isMatchedFlag", "length", "Math", "min", "getColor", "s", "idx", "color", "passwordToCheck", "password", "c", "element", "nativeElement", "className", "removeClass", "lis", "getElementsByTagName", "i", "setStyle", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "TranslateDirective", "styles"]
}
