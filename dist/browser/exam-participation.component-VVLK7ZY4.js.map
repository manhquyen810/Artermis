{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/test-runs/test-run-ribbon.component.ts", "src/main/webapp/app/exam/participate/exam-start-information/exam-start-information.component.ts", "src/main/webapp/app/exam/participate/exam-start-information/exam-start-information.component.html", "src/main/webapp/app/exam/participate/exam-cover/exam-participation-cover.component.ts", "src/main/webapp/app/exam/participate/exam-cover/exam-participation-cover.component.html", "src/main/webapp/app/exam/participate/exam-bar/exam-bar.component.ts", "src/main/webapp/app/exam/participate/exam-bar/exam-bar.component.html", "src/main/webapp/app/exam/participate/exam-navigation-sidebar/exam-navigation-sidebar.component.ts", "src/main/webapp/app/exam/participate/exam-navigation-sidebar/exam-navigation-sidebar.component.html", "src/main/webapp/app/entities/exam/exam-exercise-overview-item.model.ts", "src/main/webapp/app/exam/participate/exercises/exercise-overview-page/exam-exercise-overview-page.component.ts", "src/main/webapp/app/exam/participate/exercises/exercise-overview-page/exam-exercise-overview-page.component.html", "src/main/webapp/app/exercises/programming/participate/programming-submission-policy-status.ts", "src/main/webapp/app/exam/participate/exercises/programming/programming-exam-submission.component.ts", "src/main/webapp/app/exam/participate/exercises/programming/programming-exam-submission.component.html", "src/main/webapp/app/exam/participate/exam-participation.component.ts", "src/main/webapp/app/exam/participate/exam-participation.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-test-run-ribbon',\r\n    template: `\r\n        <div class=\"box\">\r\n            <div class=\"ribbon ribbon-top-left\">\r\n                <span jhiTranslate=\"artemisApp.examManagement.testRun.testRun\"></span>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styleUrls: ['../../../shared/layouts/profiles/page-ribbon.scss'],\r\n    imports: [TranslateDirective],\r\n})\r\nexport class TestRunRibbonComponent {}\r\n", "import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { InformationBox, InformationBoxComponent, InformationBoxContent } from 'app/shared/information-box/information-box.component';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { StudentExamWorkingTimeComponent } from 'app/exam/shared/student-exam-working-time/student-exam-working-time.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-start-information',\r\n    imports: [InformationBoxComponent, StudentExamWorkingTimeComponent, ArtemisDatePipe],\r\n    templateUrl: './exam-start-information.component.html',\r\n})\r\nexport class ExamStartInformationComponent implements OnInit {\r\n    examInformationBoxData: InformationBox[] = [];\r\n\r\n    @Input() exam: Exam;\r\n    @Input() studentExam: StudentExam;\r\n    @Input() formattedStartText?: SafeHtml;\r\n\r\n    totalPoints?: number;\r\n    totalWorkingTimeInMinutes?: number;\r\n    moduleNumber?: string;\r\n    courseName?: string;\r\n    examiner?: string;\r\n    numberOfExercisesInExam?: number;\r\n    examinedStudent?: string;\r\n    startDate?: dayjs.Dayjs;\r\n    gracePeriodInMinutes?: number;\r\n\r\n    ngOnInit(): void {\r\n        this.totalPoints = this.exam.examMaxPoints;\r\n        this.totalWorkingTimeInMinutes = Math.floor(this.exam.workingTime! / 60);\r\n        this.moduleNumber = this.exam.moduleNumber;\r\n        this.courseName = this.exam.courseName;\r\n        this.examiner = this.exam.examiner;\r\n        this.numberOfExercisesInExam = this.exam.numberOfExercisesInExam;\r\n        this.examinedStudent = this.studentExam.user?.name;\r\n        this.startDate = this.exam.startDate;\r\n        this.gracePeriodInMinutes = Math.floor(this.exam.gracePeriod! / 60);\r\n\r\n        this.prepareInformationBoxData();\r\n    }\r\n\r\n    buildInformationBox(boxTitle: string, boxContent: InformationBoxContent, isContentComponent = false): InformationBox {\r\n        const examInformationBoxData: InformationBox = {\r\n            title: boxTitle ?? '',\r\n            content: boxContent,\r\n            isContentComponent: isContentComponent,\r\n        };\r\n        return examInformationBoxData;\r\n    }\r\n\r\n    prepareInformationBoxData(): void {\r\n        if (this.moduleNumber) {\r\n            const boxContentModuleNumber: InformationBoxContent = {\r\n                type: 'string',\r\n                value: this.moduleNumber,\r\n            };\r\n            const informationBoxModuleNumber = this.buildInformationBox('artemisApp.exam.moduleNumber', boxContentModuleNumber);\r\n            this.examInformationBoxData.push(informationBoxModuleNumber);\r\n        }\r\n        if (this.courseName) {\r\n            const boxContentCourseName: InformationBoxContent = {\r\n                type: 'string',\r\n                value: this.courseName,\r\n            };\r\n            const informationBoxCourseName = this.buildInformationBox('artemisApp.exam.course', boxContentCourseName);\r\n            this.examInformationBoxData.push(informationBoxCourseName);\r\n        }\r\n        if (this.examiner) {\r\n            const boxContentExaminer: InformationBoxContent = {\r\n                type: 'string',\r\n                value: this.examiner,\r\n            };\r\n            const informationBoxExaminer = this.buildInformationBox('artemisApp.examManagement.examiner', boxContentExaminer);\r\n            this.examInformationBoxData.push(informationBoxExaminer);\r\n        }\r\n        if (this.examinedStudent) {\r\n            const boxContentExaminedStudent: InformationBoxContent = {\r\n                type: 'string',\r\n                value: this.examinedStudent,\r\n            };\r\n            const informationBoxExaminedStudent = this.buildInformationBox('artemisApp.exam.examinedStudent', boxContentExaminedStudent);\r\n            this.examInformationBoxData.push(informationBoxExaminedStudent);\r\n        }\r\n        if (this.startDate) {\r\n            const boxContentStartDate: InformationBoxContent = {\r\n                type: 'dateTime',\r\n                value: this.startDate,\r\n            };\r\n            const informationBoxStartDate = this.buildInformationBox('artemisApp.exam.date', boxContentStartDate, true);\r\n            this.examInformationBoxData.push(informationBoxStartDate);\r\n        }\r\n\r\n        const boxContentExamWorkingTime: InformationBoxContent = {\r\n            type: 'workingTime',\r\n            value: this.studentExam,\r\n        };\r\n\r\n        const informationBoxTotalWorkingTime = this.buildInformationBox('artemisApp.exam.workingTime', boxContentExamWorkingTime, true);\r\n        this.examInformationBoxData.push(informationBoxTotalWorkingTime);\r\n        const boxContentTotalPoints: InformationBoxContent = {\r\n            type: 'string',\r\n            value: this.totalPoints?.toString() ?? '',\r\n        };\r\n\r\n        const informationBoxTotalPoints = this.buildInformationBox('artemisApp.exam.points', boxContentTotalPoints);\r\n        this.examInformationBoxData.push(informationBoxTotalPoints);\r\n\r\n        if (this.numberOfExercisesInExam) {\r\n            const boxContent: InformationBoxContent = {\r\n                type: 'string',\r\n                value: this.numberOfExercisesInExam?.toString(),\r\n            };\r\n            const informationBoxNumberOfExercises = this.buildInformationBox('artemisApp.exam.exercises', boxContent);\r\n            this.examInformationBoxData.push(informationBoxNumberOfExercises);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"d-flex flex-row flex-wrap gap-2\">\r\n    @for (informationBoxData of examInformationBoxData; track informationBoxData) {\r\n        <jhi-information-box [informationBoxData]=\"informationBoxData\">\r\n            <ng-container contentComponent>\r\n                @if (informationBoxData.content.type === 'dateTime') {\r\n                    <span contentComponent>{{ informationBoxData.content.value | artemisDate }}</span>\r\n                }\r\n                @if (informationBoxData.content.type === 'workingTime') {\r\n                    <jhi-student-exam-working-time [studentExam]=\"informationBoxData.content.value\" />\r\n                }\r\n            </ng-container>\r\n        </jhi-information-box>\r\n    }\r\n</div>\r\n<div class=\"mt-3\" [innerHTML]=\"formattedStartText\"></div>\r\n", "import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { EXAM_START_WAIT_TIME_MINUTES } from 'app/app.constants';\r\nimport { UI_RELOAD_TIME } from 'app/shared/constants/exercise-exam-constants';\r\nimport { faArrowLeft, faCircleExclamation, faDoorClosed, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgClass } from '@angular/common';\r\nimport { ExamLiveEventsButtonComponent } from '../events/exam-live-events-button.component';\r\nimport { ExamStartInformationComponent } from '../exam-start-information/exam-start-information.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-participation-cover',\r\n    templateUrl: './exam-participation-cover.component.html',\r\n    styleUrls: ['./exam-participation-cover.scss'],\r\n    imports: [NgClass, ExamLiveEventsButtonComponent, ExamStartInformationComponent, FormsModule, TranslateDirective, FaIconComponent, ArtemisDatePipe, ArtemisTranslatePipe],\r\n})\r\nexport class ExamParticipationCoverComponent implements OnChanges, OnDestroy, OnInit {\r\n    private artemisMarkdown = inject(ArtemisMarkdownService);\r\n    private translateService = inject(TranslateService);\r\n    private accountService = inject(AccountService);\r\n    private examParticipationService = inject(ExamParticipationService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    /**\r\n     * if startView is set to true: startText and confirmationStartText will be displayed\r\n     * if startView is set to false: endText and confirmationEndText will be displayed\r\n     */\r\n    @Input() startView: boolean;\r\n    @Input() exam: Exam;\r\n    @Input() studentExam: StudentExam;\r\n    @Input() handInEarly = false;\r\n    @Input() handInPossible = true;\r\n    @Input() submitInProgress = false;\r\n    @Input() attendanceChecked = false;\r\n    @Input() testRunStartTime: dayjs.Dayjs | undefined;\r\n    @Input() isProduction = true;\r\n    @Input() isTestServer = false;\r\n    @Output() onExamStarted: EventEmitter<StudentExam> = new EventEmitter<StudentExam>();\r\n    @Output() onExamEnded: EventEmitter<StudentExam> = new EventEmitter<StudentExam>();\r\n    @Output() onExamContinueAfterHandInEarly = new EventEmitter<void>();\r\n    course?: Course;\r\n    startEnabled: boolean;\r\n    endEnabled: boolean;\r\n    confirmed: boolean;\r\n    isAttendanceChecked: boolean;\r\n\r\n    testRun?: boolean;\r\n    testExam?: boolean;\r\n\r\n    formattedGeneralInformation?: SafeHtml;\r\n    formattedConfirmationText?: SafeHtml;\r\n\r\n    interval: number;\r\n    waitingForExamStart = false;\r\n    isFetching = false;\r\n    loadExamSubscription?: Subscription;\r\n    timeUntilStart = '0';\r\n\r\n    accountName = '';\r\n    enteredName = '';\r\n\r\n    // Icons\r\n    faSpinner = faSpinner;\r\n    faArrowLeft = faArrowLeft;\r\n    faCircleExclamation = faCircleExclamation;\r\n    faDoorClosed = faDoorClosed;\r\n\r\n    ngOnInit(): void {\r\n        this.isAttendanceChecked = this.exam.testExam || !this.exam.examWithAttendanceCheck || this.attendanceChecked;\r\n    }\r\n\r\n    /**\r\n     * on changes uses the correct information to display in either start or final view\r\n     * changes in the exam and subscription is handled in the exam-participation.component\r\n     * if the student exam changes, we need to update the displayed times\r\n     */\r\n    ngOnChanges() {\r\n        this.confirmed = false;\r\n        this.startEnabled = false;\r\n        this.testRun = this.studentExam.testRun;\r\n        this.testExam = this.exam.testExam;\r\n\r\n        if (this.startView) {\r\n            this.examParticipationService.setEndView(false);\r\n            this.formattedGeneralInformation = this.artemisMarkdown.safeHtmlForMarkdown(this.exam.startText);\r\n            this.formattedConfirmationText = this.artemisMarkdown.safeHtmlForMarkdown(this.exam.confirmationStartText);\r\n        } else {\r\n            this.examParticipationService.setEndView(true);\r\n            this.formattedGeneralInformation = this.artemisMarkdown.safeHtmlForMarkdown(this.exam.endText);\r\n            this.formattedConfirmationText = this.artemisMarkdown.safeHtmlForMarkdown(this.exam.confirmationEndText);\r\n        }\r\n\r\n        this.accountService.identity().then((user) => {\r\n            if (user && user.name) {\r\n                this.accountName = user.name;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n        }\r\n        this.loadExamSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * checks whether confirmation checkbox has been checked\r\n     * if startView true:\r\n     * if confirmed, we further check whether exam has started yet regularly\r\n     */\r\n    updateConfirmation() {\r\n        if (this.startView) {\r\n            this.startEnabled = this.confirmed;\r\n        } else {\r\n            this.endEnabled = this.confirmed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if exam already started\r\n     */\r\n    hasStarted(): boolean {\r\n        if (this.testRun) {\r\n            return true;\r\n        }\r\n        return this.exam?.startDate ? this.exam.startDate.isBefore(this.serverDateService.now()) : false;\r\n    }\r\n\r\n    /**\r\n     * displays popup or start exam participation immediately\r\n     */\r\n    startExam() {\r\n        if (this.testRun) {\r\n            this.examParticipationService.saveStudentExamToLocalStorage(this.exam.course!.id!, this.exam.id!, this.studentExam);\r\n            this.onExamStarted.emit(this.studentExam);\r\n        } else {\r\n            this.isFetching = true;\r\n            this.loadExamSubscription = this.examParticipationService\r\n                .loadStudentExamWithExercisesForConduction(this.exam.course!.id!, this.exam.id!, this.studentExam.id!)\r\n                .subscribe((studentExam: StudentExam) => {\r\n                    this.isFetching = false;\r\n                    this.studentExam = studentExam;\r\n                    this.examParticipationService.saveStudentExamToLocalStorage(this.exam.course!.id!, this.exam.id!, studentExam);\r\n                    if (this.hasStarted()) {\r\n                        this.onExamStarted.emit(studentExam);\r\n                    } else {\r\n                        this.waitingForExamStart = true;\r\n                        if (this.interval) {\r\n                            clearInterval(this.interval);\r\n                        }\r\n                        this.interval = window.setInterval(() => {\r\n                            this.updateDisplayedTimes(studentExam);\r\n                        }, UI_RELOAD_TIME);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * updates all displayed (relative) times in the UI\r\n     */\r\n    updateDisplayedTimes(studentExam: StudentExam) {\r\n        const translationBasePath = 'artemisApp.showStatistic.';\r\n        // update time until start\r\n        if (this.exam && this.exam.startDate) {\r\n            if (this.hasStarted()) {\r\n                this.timeUntilStart = this.translateService.instant(translationBasePath + 'now');\r\n                this.onExamStarted.emit(studentExam);\r\n            } else {\r\n                this.timeUntilStart = this.relativeTimeText(this.exam.startDate.diff(this.serverDateService.now(), 'seconds'));\r\n            }\r\n        } else {\r\n            this.timeUntilStart = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Express the given timespan as humanized text\r\n     *\r\n     * @param remainingTimeSeconds the amount of seconds to display\r\n     * @return humanized text for the given amount of seconds\r\n     */\r\n    relativeTimeText(remainingTimeSeconds: number): string {\r\n        if (remainingTimeSeconds > 210) {\r\n            return Math.ceil(remainingTimeSeconds / 60) + ' min';\r\n        } else if (remainingTimeSeconds > 59) {\r\n            return Math.floor(remainingTimeSeconds / 60) + ' min ' + (remainingTimeSeconds % 60) + ' s';\r\n        } else {\r\n            return remainingTimeSeconds + ' s';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Submits the exam\r\n     */\r\n    submitExam() {\r\n        this.onExamEnded.emit();\r\n    }\r\n\r\n    /**\r\n     * Notify the parent component that the user wants to continue after hand in early\r\n     */\r\n    continueAfterHandInEarly() {\r\n        this.examParticipationService.setEndView(false);\r\n        this.onExamContinueAfterHandInEarly.emit();\r\n    }\r\n\r\n    get startButtonEnabled(): boolean {\r\n        if (this.testRun) {\r\n            return this.nameIsCorrect && this.confirmed && !!this.exam;\r\n        }\r\n        const now = this.serverDateService.now();\r\n        return !!(\r\n            this.nameIsCorrect &&\r\n            this.confirmed &&\r\n            this.exam &&\r\n            this.exam.visibleDate &&\r\n            this.exam.visibleDate.isBefore(now) &&\r\n            now.add(EXAM_START_WAIT_TIME_MINUTES, 'minute').isAfter(this.exam.startDate!)\r\n        );\r\n    }\r\n\r\n    get endButtonEnabled(): boolean {\r\n        return this.nameIsCorrect && this.confirmed && this.exam && this.handInPossible;\r\n    }\r\n\r\n    get nameIsCorrect(): boolean {\r\n        return this.enteredName.trim() === this.accountName.trim();\r\n    }\r\n\r\n    get inserted(): boolean {\r\n        return this.enteredName.trim() !== '';\r\n    }\r\n}\r\n", "<!-- Since the design of welcome page is changed, we use different alignments for startView and endView\r\n     However, it includes some duplicated code and ids and should be refactored with e.g. ngTemplates\r\n      -->\r\n<div\r\n    class=\"px-3 pb-3 overflow-auto\"\r\n    [ngClass]=\"{ 'content-height-dev': (!isProduction || isTestServer) && !testRunStartTime, 'scrollable-content-exam-cover': !testRunStartTime && startView }\"\r\n>\r\n    @if (startView) {\r\n        <div class=\"d-flex justify-content-between\">\r\n            <h3 class=\"mt-3\">\r\n                {{ exam.title }}\r\n            </h3>\r\n            <div class=\"mt-3\">\r\n                <jhi-exam-live-events-button [examStartDate]=\"exam.startDate!\" />\r\n            </div>\r\n        </div>\r\n        <hr class=\"my-0\" />\r\n        <div class=\"mt-3\">\r\n            <jhi-exam-start-information [exam]=\"exam\" [studentExam]=\"studentExam\" [formattedStartText]=\"formattedGeneralInformation\" />\r\n        </div>\r\n        <div class=\"d-inline-flex align-items-center my-3\">\r\n            <div class=\"ps-1\">\r\n                <input\r\n                    [(ngModel)]=\"confirmed\"\r\n                    type=\"checkbox\"\r\n                    id=\"confirmBox\"\r\n                    (click)=\"updateConfirmation()\"\r\n                    class=\"form-check-input me-2\"\r\n                    [class.ms-0]=\"!this.exam.confirmationStartText\"\r\n                    [required]=\"inserted\"\r\n                    [disabled]=\"waitingForExamStart\"\r\n                />\r\n                <label for=\"confirmBox\" id=\"formatted-confirmation-text\" class=\"form-check-label\" [innerHTML]=\"formattedConfirmationText\"></label>\r\n            </div>\r\n            @if (!formattedConfirmationText) {\r\n                <div class=\"login-form\">\r\n                    <label class=\"font-weight-bold\" for=\"confirmBox\" jhiTranslate=\"{{ 'artemisApp.exam.startCheckBoxText' }}\"></label>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n        <div class=\"mb-4 fw-bold\" jhiTranslate=\"artemisApp.exam.startConsentText\"></div>\r\n        <div class=\"login-form mb-4\">\r\n            <div class=\"row pb-0 mb-0\">\r\n                <div class=\"form-group pb-0 mb-0\" style=\"width: unset\">\r\n                    <input\r\n                        size=\"40\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        name=\"fullname\"\r\n                        id=\"fullname\"\r\n                        [placeholder]=\"'artemisApp.examParticipation.namePlaceholder' | artemisTranslate\"\r\n                        [(ngModel)]=\"enteredName\"\r\n                        [ngModelOptions]=\"{ updateOn: 'change' }\"\r\n                        [disabled]=\"waitingForExamStart\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div id=\"your-name\" class=\"md-6 fw-lighter\">\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.nameDisplay\" [translateValues]=\"{ fullName: accountName }\"></span>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"form-group\" style=\"width: 60%\">\r\n                    @if (inserted) {\r\n                        @if (!confirmed) {\r\n                            <div class=\"alert alert-danger mt-1\">\r\n                                <span jhiTranslate=\"artemisApp.exam.notConfirmed\"></span>\r\n                            </div>\r\n                        }\r\n                        @if (!nameIsCorrect) {\r\n                            <div class=\"alert alert-danger mt-1\">\r\n                                <span jhiTranslate=\"artemisApp.exam.falseName\"></span>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <ng-container #startButton>\r\n            <button id=\"start-exam\" [disabled]=\"!startButtonEnabled || waitingForExamStart || isFetching\" type=\"submit\" (click)=\"startExam()\" class=\"btn btn-primary\">\r\n                <span jhiTranslate=\"artemisApp.exam.startExam\"></span>\r\n            </button>\r\n            @if (!startButtonEnabled) {\r\n                <div class=\"mt-2 mb-2\" style=\"font-weight: lighter\">\r\n                    <span jhiTranslate=\"artemisApp.exam.startExamToolTip\"></span>\r\n                </div>\r\n            }\r\n        </ng-container>\r\n        @if (waitingForExamStart) {\r\n            <div class=\"exam-waiting-for-start-overlay alert alert-info\">\r\n                <span jhiTranslate=\"artemisApp.examParticipation.waitForStart\" [translateValues]=\"{ title: exam.title }\"></span>\r\n                @if (exam.startDate) {\r\n                    <div>\r\n                        <hr />\r\n                        <span jhiTranslate=\"artemisApp.examParticipation.timeUntilPlannedStart\"></span>\r\n                        <span class=\"text-bold\">{{ timeUntilStart }}</span>\r\n                        <br />\r\n                        <span>({{ exam.startDate | artemisDate: 'time' }})</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n    } @else {\r\n        <div class=\"d-flex justify-content-between\">\r\n            <h4 id=\"exam-finished-title\">\r\n                <span\r\n                    jhiTranslate=\"artemisApp.examParticipation.finish\"\r\n                    [translateValues]=\"{\r\n                        title: exam.title,\r\n                    }\"\r\n                ></span>\r\n            </h4>\r\n        </div>\r\n        <hr class=\"mt-2\" />\r\n        <div [innerHTML]=\"formattedGeneralInformation\"></div>\r\n        <br />\r\n        <div class=\"mb-1\">\r\n            <span class=\"fw-bold\" jhiTranslate=\"artemisApp.examParticipation.submitFinalExam\"></span>\r\n        </div>\r\n        @if (handInEarly) {\r\n            <div class=\"mb-3\">\r\n                <div class=\"mb-1 mt-3 fw-bold text-danger\">\r\n                    <fa-icon [icon]=\"faCircleExclamation\" />\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.handInEarly\"> </span>\r\n                </div>\r\n                <span jhiTranslate=\"artemisApp.examParticipation.handInEarlyNotice\"></span>\r\n                @if (!isAttendanceChecked) {\r\n                    <div class=\"mb-1 mt-3 fw-bold text-danger\">\r\n                        <fa-icon [icon]=\"faCircleExclamation\" />\r\n                        <span jhiTranslate=\"artemisApp.examParticipation.attendanceCheck\"></span>\r\n                    </div>\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.attendanceNotVerifiedWarning\"></span>\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"d-inline-flex align-items-center my-3\">\r\n            <div>\r\n                <input\r\n                    [(ngModel)]=\"confirmed\"\r\n                    type=\"checkbox\"\r\n                    id=\"confirmBox\"\r\n                    (click)=\"updateConfirmation()\"\r\n                    class=\"form-check-input me-2\"\r\n                    [class.ms-0]=\"!this.exam.confirmationEndText\"\r\n                    [required]=\"inserted\"\r\n                />\r\n                <label for=\"confirmBox\" id=\"formatted-confirmation-text\" class=\"form-check-label\" [innerHTML]=\"formattedConfirmationText\"></label>\r\n            </div>\r\n            @if (!formattedConfirmationText) {\r\n                <div class=\"login-form\">\r\n                    <label class=\"font-weight-bold\" for=\"confirmBox\" jhiTranslate=\"{{ 'artemisApp.exam.endCheckBoxText' }}\"></label>\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"mb-4 fw-bold\" jhiTranslate=\"artemisApp.exam.endConsentText\"></div>\r\n        <div class=\"login-form mb-4\">\r\n            <div class=\"row pb-0 mb-0\">\r\n                <div class=\"form-group pb-0 mb-0\" style=\"width: unset\">\r\n                    <input\r\n                        size=\"40\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        name=\"fullname\"\r\n                        id=\"fullname\"\r\n                        [placeholder]=\"'artemisApp.examParticipation.namePlaceholder' | artemisTranslate\"\r\n                        [(ngModel)]=\"enteredName\"\r\n                        [ngModelOptions]=\"{ updateOn: 'change' }\"\r\n                        [disabled]=\"waitingForExamStart\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div id=\"your-name\" class=\"md-6 fw-lighter\">\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.nameDisplay\" [translateValues]=\"{ fullName: accountName }\"></span>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"form-group\" style=\"width: 60%\">\r\n                    @if (inserted) {\r\n                        @if (!confirmed) {\r\n                            <div class=\"alert alert-danger mt-1\">\r\n                                <span jhiTranslate=\"artemisApp.exam.notConfirmed\"></span>\r\n                            </div>\r\n                        }\r\n                        @if (!nameIsCorrect) {\r\n                            <div class=\"alert alert-danger mt-1\">\r\n                                <span jhiTranslate=\"artemisApp.exam.falseName\"></span>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        @if (handInEarly) {\r\n            <div class=\"mt-3\">\r\n                <div class=\"mb-2 font-weight-bold text-secondary\" jhiTranslate=\"artemisApp.examParticipation.continueAfterHandInEarlyDescription\"></div>\r\n            </div>\r\n        }\r\n        <div class=\"d-flex justify-content-end gap-3\">\r\n            @if (handInEarly) {\r\n                <button [disabled]=\"submitInProgress\" id=\"continue\" class=\"btn btn-secondary\" (click)=\"continueAfterHandInEarly()\">\r\n                    <fa-icon [icon]=\"faArrowLeft\" />\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.continueAfterHandInEarly\"></span>\r\n                </button>\r\n            }\r\n            <button id=\"end-exam\" [disabled]=\"!endButtonEnabled\" type=\"submit\" (click)=\"submitExam()\" class=\"btn btn-primary\">\r\n                @if (submitInProgress) {\r\n                    <fa-icon class=\"me-1\" [icon]=\"faSpinner\" animation=\"spin\" />\r\n                } @else {\r\n                    <fa-icon class=\"me-1\" [icon]=\"faDoorClosed\" />\r\n                }\r\n                <span jhiTranslate=\"artemisApp.exam.endExam\"></span>\r\n            </button>\r\n        </div>\r\n    }\r\n</div>\r\n", "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { faDoorClosed } from '@fortawesome/free-solid-svg-icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { ExamTimerComponent } from 'app/exam/participate/timer/exam-timer.component';\r\nimport { ExamLiveEventsButtonComponent } from 'app/exam/participate/events/exam-live-events-button.component';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-bar',\r\n    imports: [CommonModule, ExamTimerComponent, ExamLiveEventsButtonComponent, FontAwesomeModule, TranslateDirective],\r\n    templateUrl: './exam-bar.component.html',\r\n    styleUrl: './exam-bar.component.scss',\r\n})\r\nexport class ExamBarComponent implements AfterViewInit, OnInit {\r\n    private elementRef = inject(ElementRef);\r\n\r\n    @Output() onExamHandInEarly = new EventEmitter<void>();\r\n    @Output() examAboutToEnd = new EventEmitter<void>();\r\n    @Output() heightChange = new EventEmitter<number>();\r\n\r\n    @Input() examTimeLineView = false;\r\n    @Input() endDate: dayjs.Dayjs;\r\n    @Input() exerciseIndex = 0;\r\n    @Input() isEndView: boolean;\r\n    @Input() testRunStartTime: dayjs.Dayjs | undefined;\r\n    @Input() exam: Exam;\r\n    @Input() studentExam: StudentExam;\r\n    @Input() examStartDate: dayjs.Dayjs;\r\n\r\n    readonly faDoorClosed = faDoorClosed;\r\n    criticalTime = dayjs.duration(5, 'minutes');\r\n    criticalTimeEndView = dayjs.duration(30, 'seconds');\r\n    testExam: boolean;\r\n    testRun: boolean;\r\n\r\n    private previousHeight: number;\r\n    examTitle: string;\r\n    exercises: Exercise[] = [];\r\n\r\n    ngOnInit(): void {\r\n        this.examTitle = this.exam.title ?? '';\r\n        this.exercises = this.studentExam.exercises ?? [];\r\n        this.testExam = this.exam.testExam ?? false;\r\n        this.testRun = this.studentExam.testRun ?? false;\r\n    }\r\n\r\n    /**\r\n     * It sets up a ResizeObserver to monitor changes in the height of the exam bar element.\r\n     * When a change in height is detected, it triggers the onHeightChange method,\r\n     * passing the new height as an argument.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        const barElement = this.elementRef.nativeElement.querySelector('.exam-bar');\r\n        this.previousHeight = barElement.offsetHeight;\r\n\r\n        const resizeObserver = new ResizeObserver((entries) => {\r\n            for (const entry of entries) {\r\n                if (entry.target === barElement) {\r\n                    const newHeight = entry.contentRect.height;\r\n                    if (newHeight !== this.previousHeight) {\r\n                        this.previousHeight = newHeight;\r\n                        this.onHeightChange(newHeight);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        resizeObserver.observe(barElement);\r\n    }\r\n    /**\r\n     * Save the currently active exercise\r\n     */\r\n    saveExercise() {\r\n        const submission = ExamParticipationService.getSubmissionForExercise(this.exercises[this.exerciseIndex]);\r\n        // we do not submit programming exercises on a save\r\n        if (submission && this.exercises[this.exerciseIndex].type !== ExerciseType.PROGRAMMING) {\r\n            submission.submitted = true;\r\n        }\r\n    }\r\n\r\n    triggerExamAboutToEnd() {\r\n        this.saveExercise();\r\n        this.examAboutToEnd.emit();\r\n    }\r\n\r\n    /**\r\n     * Notify parent component when user wants to hand in early\r\n     */\r\n    handInEarly() {\r\n        this.onExamHandInEarly.emit();\r\n    }\r\n\r\n    /**\r\n     * Notify parent component when the height of the bar changes\r\n     */\r\n    onHeightChange(newHeight: number) {\r\n        this.heightChange.emit(newHeight);\r\n    }\r\n}\r\n", "<div class=\"h5 module-bg exam-bar mt-0 px-3 py-2 rounded rounded-3 sticky-top\" [ngClass]=\"{ 'end-view': isEndView, 'mx-3': !isEndView }\">\r\n    <div class=\"d-flex justify-content-between\">\r\n        <h3 class=\"align-self-center mb-0 me-3\">\r\n            {{ examTitle }}\r\n        </h3>\r\n        @if (!examTimeLineView) {\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n                <jhi-exam-timer\r\n                    class=\"me-3\"\r\n                    [criticalTime]=\"isEndView ? criticalTimeEndView : criticalTime\"\r\n                    [endDate]=\"endDate\"\r\n                    [isEndView]=\"isEndView\"\r\n                    (timerAboutToEnd)=\"triggerExamAboutToEnd()\"\r\n                />\r\n                <jhi-exam-live-events-button [examStartDate]=\"examStartDate\" />\r\n                @if (!isEndView) {\r\n                    <button id=\"hand-in-early\" class=\"btn btn-danger ms-2\" aria-label=\"Hand In Early\" (click)=\"handInEarly()\">\r\n                        <div class=\"d-flex justify-content-between\">\r\n                            <span>\r\n                                <fa-icon [fixedWidth]=\"true\" [icon]=\"faDoorClosed\" />\r\n                                <span class=\"d-none d-sm-inline\" jhiTranslate=\"artemisApp.examParticipation.handInEarly\"></span>\r\n                            </span>\r\n                        </div>\r\n                    </button>\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n", "import { Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, inject } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { SidebarEventService } from 'app/shared/sidebar/sidebar-event.service';\r\nimport { SidebarData } from 'app/types/sidebar';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { ExamSession } from 'app/entities/exam/exam-session.model';\r\nimport { Exercise, ExerciseType, getIconTooltip } from 'app/entities/exercise.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\nimport { FileUploadSubmission } from 'app/entities/file-upload-submission.model';\r\nimport { CodeEditorRepositoryService } from 'app/exercises/programming/shared/code-editor/service/code-editor-repository.service';\r\nimport { CodeEditorConflictStateService } from 'app/exercises/programming/shared/code-editor/service/code-editor-conflict-state.service';\r\nimport { ExamExerciseUpdateService } from 'app/exam/manage/exam-exercise-update.service';\r\nimport { ButtonTooltipType, ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { CommitState, DomainChange, DomainType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faChevronRight, faFileLines, faHourglassHalf } from '@fortawesome/free-solid-svg-icons';\r\nimport { facSaveSuccess, facSaveWarning } from 'app/icons/icons';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nexport enum ExerciseButtonStatus {\r\n    Synced = 'synced',\r\n    SyncedSaved = 'synced saved',\r\n    NotSynced = 'notSynced',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-exam-navigation-sidebar',\r\n    imports: [ArtemisTranslatePipe, CommonModule, FontAwesomeModule, NgbTooltipModule, TranslateDirective],\r\n    templateUrl: './exam-navigation-sidebar.component.html',\r\n    styleUrl: './exam-navigation-sidebar.component.scss',\r\n})\r\nexport class ExamNavigationSidebarComponent implements OnDestroy, OnInit {\r\n    private profileService = inject(ProfileService);\r\n    private sidebarEventService = inject(SidebarEventService);\r\n    private examParticipationService = inject(ExamParticipationService);\r\n    private examExerciseUpdateService = inject(ExamExerciseUpdateService);\r\n    private repositoryService = inject(CodeEditorRepositoryService);\r\n    private conflictService = inject(CodeEditorConflictStateService);\r\n\r\n    @Input() sidebarData: SidebarData;\r\n    @Input() exercises: Exercise[] = [];\r\n    @Input() exerciseIndex = 0;\r\n    @Input() overviewPageOpen: boolean;\r\n    @Input() examSessions?: ExamSession[] = [];\r\n    @Input() examTimeLineView = false;\r\n    @Input() isTestRun = 0;\r\n    @Output() onPageChanged = new EventEmitter<{\r\n        overViewChange: boolean;\r\n        exercise?: Exercise;\r\n        forceSave: boolean;\r\n        submission?: ProgrammingSubmission | SubmissionVersion | FileUploadSubmission;\r\n    }>();\r\n\r\n    /**\r\n     * Index indicating that the content is exercise overview\r\n     */\r\n    readonly EXERCISE_OVERVIEW_INDEX = -1;\r\n    subscriptionToLiveExamExerciseUpdates: Subscription;\r\n\r\n    // Icons\r\n    icon: IconProp;\r\n    readonly faFileLines = faFileLines;\r\n    readonly faChevronRight = faChevronRight;\r\n\r\n    profileSubscription?: Subscription;\r\n    isProduction = true;\r\n    isTestServer = false;\r\n    isCollapsed = false;\r\n    exerciseId: string;\r\n    numberOfSavedExercises: number = 0;\r\n\r\n    ngOnInit(): void {\r\n        this.profileSubscription = this.profileService.getProfileInfo()?.subscribe((profileInfo) => {\r\n            this.isProduction = profileInfo?.inProduction;\r\n            this.isTestServer = profileInfo?.testServer ?? false;\r\n        });\r\n\r\n        if (!this.examTimeLineView) {\r\n            this.subscriptionToLiveExamExerciseUpdates = this.examExerciseUpdateService.currentExerciseIdForNavigation.subscribe((exerciseIdToNavigateTo) => {\r\n                // another exercise will only be displayed if the student clicks on the corresponding pop-up notification\r\n                this.changeExerciseById(exerciseIdToNavigateTo);\r\n            });\r\n        }\r\n\r\n        // TODO: avoid duplicated code\r\n        const isInitialSession = this.examSessions && this.examSessions.length > 0 && this.examSessions[0].initialSession;\r\n        if (isInitialSession || isInitialSession == undefined) {\r\n            return;\r\n        }\r\n\r\n        // If it is not an initial session, update the isSynced variable for out of sync submissions.\r\n        this.exercises\r\n            .filter((exercise) => exercise.type === ExerciseType.PROGRAMMING && exercise.studentParticipations)\r\n            .forEach((exercise) => {\r\n                const domain: DomainChange = [DomainType.PARTICIPATION, exercise.studentParticipations![0]];\r\n                this.conflictService.setDomain(domain);\r\n                this.repositoryService.setDomain(domain);\r\n\r\n                this.repositoryService\r\n                    .getStatus()\r\n                    .pipe(map((response) => Object.values(CommitState).find((commitState) => commitState === response.repositoryStatus)))\r\n                    .subscribe((commitState) => {\r\n                        const submission = ExamParticipationService.getSubmissionForExercise(exercise);\r\n                        if (commitState === CommitState.UNCOMMITTED_CHANGES && submission) {\r\n                            // If there are uncommitted changes: set isSynced to false.\r\n                            submission.isSynced = false;\r\n                        }\r\n                    });\r\n            });\r\n\r\n        this.refreshExerciseSaveCount();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.profileSubscription?.unsubscribe();\r\n        this.sidebarEventService.emitResetValue();\r\n    }\r\n\r\n    getExerciseButtonTooltip(exercise: Exercise): ButtonTooltipType {\r\n        return this.examParticipationService.getExerciseButtonTooltip(exercise);\r\n    }\r\n\r\n    getExerciseIconTooltip(exercise: Exercise): string {\r\n        return getIconTooltip(exercise.type);\r\n    }\r\n\r\n    /**\r\n     * @param overviewPage user wants to switch to the overview page\r\n     * @param exerciseIndex index of the exercise to switch to, if it should not be used, you can pass -1\r\n     * @param forceSave true if forceSave shall be used.\r\n     * @param submission the submission to be viewed, used in the exam timeline\r\n     */\r\n    changePage(overviewPage: boolean, exerciseIndex: number, forceSave?: boolean, submission?: SubmissionVersion | ProgrammingSubmission | FileUploadSubmission): void {\r\n        if (!overviewPage) {\r\n            // out of index -> do nothing\r\n            if (exerciseIndex > this.exercises.length - 1 || exerciseIndex < 0) {\r\n                return;\r\n            }\r\n            // set index and emit event\r\n            this.exerciseIndex = exerciseIndex;\r\n            this.onPageChanged.emit({\r\n                overViewChange: false,\r\n                exercise: this.exercises[this.exerciseIndex],\r\n                forceSave: !!forceSave,\r\n                submission: submission,\r\n            });\r\n        } else if (overviewPage) {\r\n            // set index and emit event\r\n            this.exerciseIndex = this.EXERCISE_OVERVIEW_INDEX;\r\n            // save current exercise\r\n            this.onPageChanged.emit({ overViewChange: true, exercise: undefined, forceSave: false });\r\n        }\r\n        this.setExerciseButtonStatus(this.exerciseIndex);\r\n    }\r\n\r\n    /**\r\n     * Auxiliary method to call changeExerciseByIndex based on the unique id of the exercise\r\n     * @param exerciseId the unique identifier of an exercise that stays the same regardless of student exam ordering\r\n     */\r\n    changeExerciseById(exerciseId: number) {\r\n        const foundIndex = this.exercises.findIndex((exercise) => exercise.id === exerciseId);\r\n        this.changePage(false, foundIndex, true);\r\n    }\r\n\r\n    refreshExerciseSaveCount() {\r\n        this.numberOfSavedExercises = 0;\r\n        this.exercises.forEach((exercise) => {\r\n            const submission = ExamParticipationService.getSubmissionForExercise(exercise);\r\n            if (submission && submission.submitted) {\r\n                this.numberOfSavedExercises++;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * calculate the exercise status (also see exam-exercise-overview-page.component.ts --> make sure the logic is consistent)\r\n     * also determines the used icon and its color\r\n     * TODO: we should try to extract a method for the common logic which avoids side effects (i.e. changing this.icon)\r\n     *  this method could e.g. return the sync status and the icon\r\n     *\r\n     * @param exerciseIndex index of the exercise\r\n     * @return the sync status of the exercise (whether the corresponding submission is saved on the server or not)\r\n     */\r\n    setExerciseButtonStatus(exerciseIndex: number): ExerciseButtonStatus {\r\n        this.icon = facSaveSuccess;\r\n        // If we are in the exam timeline we do not use not synced as not synced shows\r\n        // that the current submission is not saved which doesn't make sense in the timeline.\r\n        if (this.examTimeLineView) {\r\n            return this.exerciseIndex === exerciseIndex ? ExerciseButtonStatus.SyncedSaved : ExerciseButtonStatus.Synced;\r\n        }\r\n\r\n        // start with a yellow status (save warning icon)\r\n        // TODO: it's a bit weird, that it works that multiple icons (one per exercise) are hold in the same instance variable of the component\r\n        //  we should definitely refactor this and e.g. use the same ExamExerciseOverviewItem as in exam-exercise-overview-page.component.ts !\r\n        this.icon = faHourglassHalf;\r\n        const exercise = this.exercises[exerciseIndex];\r\n        const submission = ExamParticipationService.getSubmissionForExercise(exercise);\r\n        if (!submission) {\r\n            // in case no participation/submission yet exists -> display synced\r\n            // this should only occur for programming exercises\r\n            return ExerciseButtonStatus.Synced;\r\n        }\r\n        if (submission.submitted && submission.isSynced) {\r\n            this.icon = facSaveSuccess;\r\n            this.refreshExerciseSaveCount();\r\n            return ExerciseButtonStatus.SyncedSaved;\r\n        }\r\n        if (submission.isSynced || this.isOnlyOfflineIDE(exercise)) {\r\n            // make save icon green\r\n            return ExerciseButtonStatus.Synced;\r\n        } else {\r\n            // make save icon yellow except for programming exercises with only offline IDE\r\n            this.icon = facSaveWarning;\r\n            return ExerciseButtonStatus.NotSynced;\r\n        }\r\n    }\r\n\r\n    isOnlyOfflineIDE(exercise: Exercise): boolean {\r\n        if (exercise instanceof ProgrammingExercise) {\r\n            const programmingExercise = exercise as ProgrammingExercise;\r\n            return programmingExercise.allowOfflineIde === true && programmingExercise.allowOnlineEditor === false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    toggleCollapseState() {\r\n        this.isCollapsed = !this.isCollapsed;\r\n    }\r\n\r\n    @HostListener('window:keydown.Control.m', ['$event'])\r\n    onKeyDownControlM(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n        this.toggleCollapseState();\r\n    }\r\n}\r\n", "<div\r\n    class=\"d-flex sidebar justify-content-between flex-column rounded-3\"\r\n    [ngClass]=\"{ 'content-height-dev sidebar-height-testRun-dev': !isProduction || isTestServer, collapsed: isCollapsed, 'sidebar-height-testRun': isTestRun }\"\r\n>\r\n    <div class=\"py-3\">\r\n        <div class=\"w-100 bg-module\">\r\n            <!-- Since the exam navigation includes lots of functionalities and in-line adjustments,\r\n             we use duplicated code here in order to keep the functionality of exam navigation apart from\r\n             sidebar-card implementations.\r\n              -->\r\n            <div class=\"sidebar-content\" [ngClass]=\"{ collapsed: isCollapsed }\">\r\n                <div class=\"scrollable-item-content scrollable-column\" [ngClass]=\"{ 'content-height-dev': !isProduction || isTestServer, 'sidebar-height-testRun': isTestRun }\">\r\n                    <div\r\n                        class=\"pointer rounded-3 col-12 px-2 pt-2 pb-1 mb-2 border-5 highlight-card bg-module\"\r\n                        [ngClass]=\"{ 'bg-selected border-selected': exerciseIndex === -1 }\"\r\n                        (click)=\"changePage(true, -1)\"\r\n                    >\r\n                        <div class=\"d-flex justify-content-between mb-1 align-items-baseline\">\r\n                            <span id=\"test-sidebar-card-title\" class=\"small fw-semibold text-truncate me-2\">\r\n                                <fa-icon [ngbTooltip]=\"'artemisApp.examParticipation.exerciseOverview' | artemisTranslate\" [fixedWidth]=\"true\" [icon]=\"faFileLines\" />\r\n                                @if (!isCollapsed) {\r\n                                    <span class=\"auto-collapse\" jhiTranslate=\"artemisApp.studentExamDetail.overview\"></span>\r\n                                }\r\n                            </span>\r\n                            <span [ngbTooltip]=\"'artemisApp.examParticipation.numberOfSavedExercises' | artemisTranslate\">\r\n                                <div class=\"small fw-semibold\">{{ numberOfSavedExercises }}/{{ exercises.length }}</div>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    @for (sidebarItem of sidebarData?.ungroupedData; track sidebarItem; let last = $last; let i = $index) {\r\n                        <div [ngClass]=\"{ 'mb-2': !last }\">\r\n                            <div\r\n                                class=\"pointer rounded-3 col-12 px-2 pt-2 pb-1 border-5 highlight-card bg-module\"\r\n                                [ngClass]=\"{ 'bg-selected border-selected': i === exerciseIndex }\"\r\n                                (click)=\"changePage(false, i, false)\"\r\n                            >\r\n                                <div class=\"d-flex justify-content-between mb-1 align-items-baseline\">\r\n                                    <span id=\"test-sidebar-card-title\" class=\"small fw-semibold text-truncate me-2\" [title]=\"sidebarItem.title\">\r\n                                        @if (sidebarItem.icon) {\r\n                                            <fa-icon\r\n                                                [ngbTooltip]=\"!examTimeLineView ? (getExerciseIconTooltip(exercises[i]) | artemisTranslate) : ''\"\r\n                                                [fixedWidth]=\"true\"\r\n                                                [icon]=\"sidebarItem.icon\"\r\n                                            />\r\n                                        }\r\n                                        @if (!isCollapsed) {\r\n                                            <span class=\"auto-collapse\">\r\n                                                {{ sidebarItem.title }}\r\n                                            </span>\r\n                                        }\r\n                                    </span>\r\n                                    <span\r\n                                        [ngClass]=\"setExerciseButtonStatus(i)\"\r\n                                        [ngbTooltip]=\"!examTimeLineView ? ('artemisApp.examParticipation.' + getExerciseButtonTooltip(exercises[i]) | artemisTranslate) : ''\"\r\n                                    >\r\n                                        @if (sidebarItem.rightIcon) {\r\n                                            <fa-icon [fixedWidth]=\"true\" [icon]=\"icon\" />\r\n                                        }\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div\r\n        id=\"test-collapse\"\r\n        class=\"auto-collapse double-arrow mb-2\"\r\n        [ngClass]=\"{ 'menu-closed': isCollapsed }\"\r\n        [ngbTooltip]=\"(isCollapsed ? 'Expand' : 'Collapse') + ' Menu (Ctrl + M)'\"\r\n        (click)=\"toggleCollapseState()\"\r\n    >\r\n        <div class=\"double-arrow-icon\" [attr.aria-expanded]=\"!isCollapsed\" aria-controls=\"collapseBasic\">\r\n            <fa-icon class=\"me-negative fa-xs\" [icon]=\"faChevronRight\" />\r\n            <fa-icon class=\"fa-xs\" [icon]=\"faChevronRight\" />\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Exercise } from 'app/entities/exercise.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport class ExamExerciseOverviewItem {\r\n    public exercise: Exercise;\r\n    public icon: IconProp;\r\n}\r\n", "import { Component, OnChanges, OnInit, inject, input, output } from '@angular/core';\r\nimport { Exercise, ExerciseType, getIcon, getIconTooltip } from 'app/entities/exercise.model';\r\nimport { ExamPageComponent } from 'app/exam/participate/exercises/exam-page.component';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { ExamExerciseOverviewItem } from 'app/entities/exam/exam-exercise-overview-item.model';\r\nimport { ButtonTooltipType, ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { faHourglassHalf } from '@fortawesome/free-solid-svg-icons';\r\nimport { ExerciseButtonStatus } from 'app/exam/participate/exam-navigation-sidebar/exam-navigation-sidebar.component';\r\nimport { facSaveSuccess, facSaveWarning } from 'app/icons/icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\nimport { UpdatingResultComponent } from 'app/exercises/shared/result/updating-result.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-exercise-overview-page',\r\n    templateUrl: './exam-exercise-overview-page.component.html',\r\n    styleUrls: ['./exam-exercise-overview-page.scss', '../../exam-navigation-sidebar/exam-navigation-sidebar.component.scss'],\r\n    imports: [TranslateDirective, FaIconComponent, NgbTooltip, NgClass, UpdatingResultComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ExamExerciseOverviewPageComponent extends ExamPageComponent implements OnInit, OnChanges {\r\n    private examParticipationService = inject(ExamParticipationService);\r\n\r\n    studentExam = input.required<StudentExam>();\r\n    onPageChanged = output<{\r\n        overViewChange: boolean;\r\n        exercise: Exercise;\r\n        forceSave: boolean;\r\n    }>();\r\n    getIcon = getIcon;\r\n    getIconTooltip = getIconTooltip;\r\n    showResultWidth = 10;\r\n\r\n    examExerciseOverviewItems: ExamExerciseOverviewItem[] = [];\r\n\r\n    ngOnInit() {\r\n        this.studentExam().exercises?.forEach((exercise) => {\r\n            const item = new ExamExerciseOverviewItem();\r\n            item.exercise = exercise;\r\n            item.icon = faHourglassHalf;\r\n            this.examExerciseOverviewItems.push(item);\r\n        });\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.examExerciseOverviewItems?.forEach((item) => {\r\n            this.setExerciseIconStatus(item);\r\n        });\r\n    }\r\n\r\n    updateShowResultWidth() {\r\n        this.showResultWidth = 35;\r\n    }\r\n\r\n    openExercise(exercise: Exercise) {\r\n        this.onPageChanged.emit({ overViewChange: false, exercise, forceSave: false });\r\n    }\r\n\r\n    getExerciseButtonTooltip(exercise: Exercise): ButtonTooltipType {\r\n        return this.examParticipationService.getExerciseButtonTooltip(exercise);\r\n    }\r\n\r\n    /**\r\n     * calculate the exercise status (also see exam-navigation-bar.component.ts --> make sure the logic is consistent)\r\n     * also determines the used icon and its color\r\n     * TODO: we should try to extract a method for the common logic which avoids side effects (i.e. changing this.icon)\r\n     *  this method could e.g. return the sync status and the icon\r\n     *\r\n     * @param item the item for which the exercise status should be calculated\r\n     * @return the sync status of the exercise (whether the corresponding submission is saved on the server or not)\r\n     */\r\n    setExerciseIconStatus(item: ExamExerciseOverviewItem): ExerciseButtonStatus {\r\n        const submission = ExamParticipationService.getSubmissionForExercise(item.exercise);\r\n        // start with exercise not started icon\r\n        item.icon = faHourglassHalf;\r\n        if (!submission) {\r\n            // in case no participation/submission yet exists -> display synced\r\n            // this should only occur for programming exercises\r\n            return ExerciseButtonStatus.Synced;\r\n        }\r\n        if (submission.submitted && submission.isSynced) {\r\n            item.icon = facSaveSuccess;\r\n            return ExerciseButtonStatus.SyncedSaved;\r\n        }\r\n        if (submission.isSynced) {\r\n            // make save icon green\r\n            return ExerciseButtonStatus.Synced;\r\n        } else {\r\n            // make save icon yellow except for programming exercises with only offline IDE\r\n            item.icon = facSaveWarning;\r\n            return ExerciseButtonStatus.NotSynced;\r\n        }\r\n    }\r\n\r\n    protected readonly ExerciseType = ExerciseType;\r\n}\r\n", "<h3 class=\"text-left fw-normal\">\r\n    <span jhiTranslate=\"artemisApp.studentExamDetail.overview\"></span>\r\n</h3>\r\n<hr />\r\n\r\n<div class=\"container d-flex flex-column align-items-center justify-content-center\" [style.maxWidth.px]=\"1200\">\r\n    <table class=\"table table-striped table-bordered exercise-table\">\r\n        <thead>\r\n            <tr>\r\n                <th [style.width.%]=\"1\">\r\n                    <span>#</span>\r\n                </th>\r\n                <th [style.width.%]=\"1\">\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.exerciseType\"></span>\r\n                </th>\r\n                <th [style.width.%]=\"30\">\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.exerciseName\"></span>\r\n                </th>\r\n                <th [style.width.%]=\"1\">\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.exercisePoints\"></span>\r\n                </th>\r\n                <th [style.width.%]=\"showResultWidth\">\r\n                    <span jhiTranslate=\"artemisApp.examParticipation.examStatus\"> </span>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @for (item of examExerciseOverviewItems; track item; let i = $index) {\r\n                <tr>\r\n                    <td>\r\n                        {{ i + 1 }}\r\n                    </td>\r\n                    <td>\r\n                        <div>\r\n                            <fa-icon [ngbTooltip]=\"getIconTooltip(item.exercise.type) | artemisTranslate\" [icon]=\"getIcon(item.exercise.type)\" placement=\"right auto\" />\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"fw-bold\">\r\n                        <a class=\"w-100\" (click)=\"openExercise(item.exercise)\">\r\n                            {{ item.exercise.exerciseGroup?.title }}\r\n                        </a>\r\n                    </td>\r\n                    <td>\r\n                        {{ item.exercise.maxPoints }}\r\n                    </td>\r\n                    <td class=\"fw-bold\">\r\n                        <div class=\"d-flex align-items-center\">\r\n                            <div\r\n                                class=\"me-3\"\r\n                                [ngClass]=\"setExerciseIconStatus(item)\"\r\n                                [ngbTooltip]=\"'artemisApp.examParticipation.' + getExerciseButtonTooltip(item.exercise) | artemisTranslate\"\r\n                            >\r\n                                <fa-icon [icon]=\"item.icon!\" />\r\n                            </div>\r\n                            <div>\r\n                                @if (\r\n                                    item.exercise.studentParticipations !== undefined &&\r\n                                    item.exercise.type === ExerciseType.PROGRAMMING &&\r\n                                    item.exercise.studentParticipations.length > 0\r\n                                ) {\r\n                                    <jhi-updating-result\r\n                                        id=\"jhi-updating-result-{{ i }}\"\r\n                                        (showResult)=\"updateShowResultWidth()\"\r\n                                        [exercise]=\"item.exercise\"\r\n                                        [showUngradedResults]=\"true\"\r\n                                        [showBadge]=\"true\"\r\n                                        [participation]=\"item.exercise.studentParticipations[0]\"\r\n                                        [personalParticipation]=\"true\"\r\n                                        [showProgressBar]=\"true\"\r\n                                        class=\"me-2 d-block\"\r\n                                    />\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-submission-policy-status',\r\n    template: `\r\n        @if (exercise.submissionPolicy && exercise.submissionPolicy.active && submissionCount !== undefined) {\r\n            <div submissionPolicy>\r\n                <span\r\n                    jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.submissionsAllowed\"\r\n                    [translateValues]=\"{ submissionCount: submissionCount, totalSubmissions: exercise.submissionPolicy.submissionLimit }\"\r\n                ></span>\r\n                @if (exercise.submissionPolicy.type === SubmissionPolicyType.SUBMISSION_PENALTY) {\r\n                    <span\r\n                        jhiTranslate=\"artemisApp.programmingExercise.submissionPolicy.submissionPenalty.penaltyInfoLabel\"\r\n                        [translateValues]=\"{ points: exercise.submissionPolicy.exceedingPenalty }\"\r\n                    ></span>\r\n                }\r\n            </div>\r\n        }\r\n    `,\r\n    imports: [TranslateDirective],\r\n})\r\nexport class ProgrammingSubmissionPolicyStatusComponent {\r\n    @Input()\r\n    exercise: ProgrammingExercise;\r\n    @Input()\r\n    submissionCount?: number;\r\n    readonly SubmissionPolicyType = SubmissionPolicyType;\r\n}\r\n", "import { Component, OnChanges, OnInit, inject, input, viewChild } from '@angular/core';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { ExamSubmissionComponent } from 'app/exam/participate/exercises/exam-submission.component';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { CommitState, DomainType, EditorState } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { DomainService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain.service';\r\nimport { CodeEditorContainerComponent } from 'app/exercises/programming/shared/code-editor/container/code-editor-container.component';\r\nimport { ProgrammingExerciseInstructionComponent } from 'app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component';\r\nimport { CodeEditorConflictStateService } from 'app/exercises/programming/shared/code-editor/service/code-editor-conflict-state.service';\r\nimport { CodeEditorSubmissionService } from 'app/exercises/programming/shared/code-editor/service/code-editor-submission.service';\r\nimport { SubmissionPolicyType } from 'app/entities/submission-policy.model';\r\nimport {\r\n    CodeEditorBuildLogService,\r\n    CodeEditorRepositoryFileService,\r\n    CodeEditorRepositoryService,\r\n} from 'app/exercises/programming/shared/code-editor/service/code-editor-repository.service';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { IncludedInScoreBadgeComponent } from 'app/exercises/shared/exercise-headers/included-in-score-badge.component';\r\nimport { ProgrammingSubmissionPolicyStatusComponent } from 'app/exercises/programming/participate/programming-submission-policy-status';\r\nimport { ExerciseDetailsStudentActionsComponent } from 'app/overview/exercise-details/exercise-details-student-actions.component';\r\nimport { CodeEditorRepositoryIsLockedComponent } from 'app/exercises/programming/shared/code-editor/layout/code-editor-repository-is-locked.component';\r\nimport { UpdatingResultComponent } from 'app/exercises/shared/result/updating-result.component';\r\nimport { ProgrammingExerciseStudentTriggerBuildButtonComponent } from 'app/exercises/programming/shared/actions/programming-exercise-student-trigger-build-button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-submission-exam',\r\n    templateUrl: './programming-exam-submission.component.html',\r\n    providers: [\r\n        { provide: ExamSubmissionComponent, useExisting: ProgrammingExamSubmissionComponent },\r\n        CodeEditorConflictStateService,\r\n        CodeEditorSubmissionService,\r\n        CodeEditorBuildLogService,\r\n        CodeEditorRepositoryFileService,\r\n        CodeEditorRepositoryService,\r\n    ],\r\n    styleUrls: ['./programming-exam-submission.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        IncludedInScoreBadgeComponent,\r\n        CodeEditorContainerComponent,\r\n        ProgrammingSubmissionPolicyStatusComponent,\r\n        ExerciseDetailsStudentActionsComponent,\r\n        CodeEditorRepositoryIsLockedComponent,\r\n        UpdatingResultComponent,\r\n        ProgrammingExerciseStudentTriggerBuildButtonComponent,\r\n        ProgrammingExerciseInstructionComponent,\r\n    ],\r\n})\r\nexport class ProgrammingExamSubmissionComponent extends ExamSubmissionComponent implements OnChanges, OnInit {\r\n    private domainService = inject(DomainService);\r\n\r\n    exerciseType = ExerciseType.PROGRAMMING;\r\n\r\n    codeEditorContainer = viewChild.required(CodeEditorContainerComponent);\r\n    instructions = viewChild.required(ProgrammingExerciseInstructionComponent);\r\n\r\n    // IMPORTANT: this reference must be activeExercise.studentParticipation[0] otherwise the parent component will not be able to react to change\r\n    studentParticipation = input.required<ProgrammingExerciseStudentParticipation>();\r\n    exercise = input.required<ProgrammingExercise>();\r\n    courseId = input.required<number>();\r\n\r\n    showEditorInstructions = true;\r\n    hasSubmittedOnce = false;\r\n    submissionCount?: number;\r\n    repositoryIsLocked = false;\r\n\r\n    readonly SubmissionPolicyType = SubmissionPolicyType;\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    readonly getCourseFromExercise = getCourseFromExercise;\r\n\r\n    getSubmission(): Submission | undefined {\r\n        const studentParticipation = this.studentParticipation(); // Dereference the signal\r\n\r\n        if (studentParticipation?.submissions && studentParticipation.submissions.length > 0) {\r\n            return studentParticipation.submissions[0];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getExerciseId(): number | undefined {\r\n        return this.exercise().id;\r\n    }\r\n\r\n    getExercise(): Exercise {\r\n        return this.exercise();\r\n    }\r\n\r\n    isSaving: boolean;\r\n    readonly ButtonType = ButtonType;\r\n    readonly ButtonSize = ButtonSize;\r\n\r\n    /**\r\n     * On init set up the route param subscription.\r\n     * Will load the participation according to participation Id with the latest result and result details.\r\n     */\r\n    ngOnInit(): void {\r\n        this.updateDomain();\r\n        this.setSubmissionCountAndLockIfNeeded();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.setSubmissionCountAndLockIfNeeded();\r\n    }\r\n\r\n    onActivate() {\r\n        super.onActivate();\r\n        this.instructions().updateMarkdown();\r\n        this.updateDomain();\r\n    }\r\n\r\n    /**\r\n     * Updates the domain to set the active student participation\r\n     */\r\n    updateDomain() {\r\n        const participation = { ...this.studentParticipation(), exercise: this.exercise() } as StudentParticipation;\r\n        this.domainService.setDomain([DomainType.PARTICIPATION, participation]);\r\n    }\r\n\r\n    /**\r\n     * Sets the submission count and lock based on the student participation.\r\n     */\r\n    setSubmissionCountAndLockIfNeeded() {\r\n        this.submissionCount = this.studentParticipation().submissionCount ?? this.submissionCount;\r\n        this.repositoryIsLocked = this.studentParticipation().locked ?? this.repositoryIsLocked;\r\n    }\r\n\r\n    /**\r\n     * Update {@link Submission#isSynced} & {@link Submission#submitted} based on the CommitState.\r\n     * The submission is only synced, if all changes are committed (CommitState.CLEAN).\r\n     *\r\n     * @param commitState current CommitState from CodeEditorActionsComponent\r\n     */\r\n    onCommitStateChange(commitState: CommitState): void {\r\n        const studentParticipation = this.studentParticipation();\r\n        if (studentParticipation?.submissions && studentParticipation.submissions.length > 0) {\r\n            const firstSubmission = studentParticipation.submissions[0];\r\n            if (commitState === CommitState.CLEAN && this.hasSubmittedOnce) {\r\n                firstSubmission.submitted = true;\r\n                firstSubmission.isSynced = true;\r\n            } else if (commitState !== CommitState.UNDEFINED && !this.hasSubmittedOnce) {\r\n                this.hasSubmittedOnce = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    onFileChanged() {\r\n        const studentParticipation = this.studentParticipation();\r\n        if (studentParticipation?.submissions && studentParticipation.submissions.length > 0) {\r\n            studentParticipation.submissions[0].isSynced = false;\r\n        }\r\n    }\r\n\r\n    hasUnsavedChanges(): boolean {\r\n        if (this.exercise().allowOfflineIde && !this.exercise().allowOnlineEditor) {\r\n            return false;\r\n        }\r\n        return this.codeEditorContainer().editorState === EditorState.UNSAVED_CHANGES;\r\n    }\r\n\r\n    updateSubmissionFromView(): void {\r\n        // Note: we just save here and do not commit, because this can lead to problems!\r\n        this.codeEditorContainer().actions.onSave();\r\n    }\r\n\r\n    updateViewFromSubmission(): void {\r\n        // do nothing - the code editor itself is taking care of updating the view from submission\r\n    }\r\n    setSubmissionVersion(submissionVersion: SubmissionVersion): void {\r\n        // if we do not assign the parameter, eslint will complain because either the parameter is unused or if we suppress this with ts-ignore that ts-ignore shadows compilation errors.\r\n        this.submissionVersion = submissionVersion;\r\n        // submission versions are not supported for programming exercises\r\n        throw new Error('Submission versions are not supported for file upload exercises.');\r\n    }\r\n}\r\n", "<h3 class=\"text-align-left fw-normal\">\r\n    <span>\r\n        {{ exercise().exerciseGroup?.title }}\r\n    </span>\r\n    <span\r\n        [jhiTranslate]=\"exercise().bonusPoints ? 'artemisApp.examParticipation.bonus' : 'artemisApp.examParticipation.points'\"\r\n        [translateValues]=\"{ points: exercise().maxPoints, bonusPoints: exercise().bonusPoints }\"\r\n    >\r\n    </span>\r\n    @if (exercise().includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n        <jhi-included-in-score-badge [includedInOverallScore]=\"exercise().includedInOverallScore\" />\r\n    }\r\n</h3>\r\n<hr />\r\n<!-- ngIf online-code-editor -->\r\n@if (exercise().allowOnlineEditor) {\r\n    <div>\r\n        <jhi-code-editor-container\r\n            [editable]=\"!repositoryIsLocked\"\r\n            [participation]=\"studentParticipation()\"\r\n            [showEditorInstructions]=\"showEditorInstructions\"\r\n            [course]=\"getCourseFromExercise(exercise())\"\r\n            [disableAutoSave]=\"true\"\r\n            (onCommitStateChange)=\"onCommitStateChange($event)\"\r\n            (onFileChanged)=\"onFileChanged()\"\r\n        >\r\n            <div submissionPolicy class=\"ps-2\">\r\n                <jhi-programming-submission-policy-status [exercise]=\"exercise()\" [submissionCount]=\"submissionCount\" />\r\n            </div>\r\n            <div editorTitleActions>\r\n                @if (exercise().allowOfflineIde) {\r\n                    <div [style.align-self]=\"'flex-start'\">\r\n                        <jhi-exercise-details-student-actions [examMode]=\"true\" [exercise]=\"exercise()\" [courseId]=\"courseId()\" />\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div editorToolbar class=\"d-inline-flex align-items-center\">\r\n                @if (repositoryIsLocked) {\r\n                    <jhi-code-editor-repository-is-locked class=\"me-3\" />\r\n                }\r\n                @if (studentParticipation()) {\r\n                    <jhi-updating-result\r\n                        [exercise]=\"exercise()\"\r\n                        [showUngradedResults]=\"true\"\r\n                        [showBadge]=\"true\"\r\n                        [participation]=\"studentParticipation()\"\r\n                        [personalParticipation]=\"true\"\r\n                        [showProgressBar]=\"true\"\r\n                        [showProgressBarBorder]=\"true\"\r\n                        class=\"me-2\"\r\n                    />\r\n                }\r\n                <jhi-programming-exercise-student-trigger-build-button\r\n                    class=\"me-2\"\r\n                    [exercise]=\"exercise()\"\r\n                    [participation]=\"studentParticipation()\"\r\n                    [btnSize]=\"ButtonSize.MEDIUM\"\r\n                />\r\n            </div>\r\n            <jhi-programming-exercise-instructions\r\n                editorSidebar\r\n                (onNoInstructionsAvailable)=\"showEditorInstructions = false\"\r\n                [exercise]=\"exercise()\"\r\n                [participation]=\"studentParticipation()\"\r\n                [personalParticipation]=\"true\"\r\n                class=\"instructions-wrapper__content card-body p-0\"\r\n            />\r\n        </jhi-code-editor-container>\r\n    </div>\r\n}\r\n<!-- ngIf Offline IDE code button start -->\r\n@if (!exercise().allowOnlineEditor && exercise().allowOfflineIde) {\r\n    <div>\r\n        <div class=\"d-flex my-3 ms-1 align-items-center justify-content-between\">\r\n            <div class=\"d-flex gap-3 align-items-center\">\r\n                <jhi-exercise-details-student-actions [exercise]=\"exercise()\" [courseId]=\"courseId()\" [examMode]=\"true\" />\r\n                <jhi-programming-submission-policy-status [exercise]=\"exercise()\" [submissionCount]=\"submissionCount\" class=\"flex-grow-1\" />\r\n            </div>\r\n            <div class=\"d-flex gap-3 align-items-center\">\r\n                @if (repositoryIsLocked) {\r\n                    <jhi-code-editor-repository-is-locked class=\"me-1\" />\r\n                }\r\n                @if (studentParticipation()) {\r\n                    <jhi-updating-result\r\n                        [exercise]=\"exercise()\"\r\n                        [showUngradedResults]=\"true\"\r\n                        [showBadge]=\"true\"\r\n                        [participation]=\"studentParticipation()\"\r\n                        [personalParticipation]=\"true\"\r\n                        class=\"me-1\"\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n        @if (exercise()) {\r\n            <jhi-programming-exercise-instructions [exercise]=\"exercise()\" [participation]=\"studentParticipation()\" [personalParticipation]=\"true\" />\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, HostListener, OnDestroy, OnInit, QueryList, ViewChildren, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ExamSubmissionComponent } from 'app/exam/participate/exercises/exam-submission.component';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\r\nimport { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\r\nimport { QuizSubmission } from 'app/entities/quiz/quiz-submission.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { BehaviorSubject, Observable, Subject, Subscription, combineLatest, of, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, filter, map, tap, throttleTime, timeout } from 'rxjs/operators';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { captureException } from '@sentry/angular';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ExamPage } from 'app/entities/exam/exam-page.model';\r\nimport { ExamPageComponent } from 'app/exam/participate/exercises/exam-page.component';\r\nimport { AUTOSAVE_CHECK_INTERVAL, AUTOSAVE_EXERCISE_INTERVAL } from 'app/shared/constants/exercise-exam-constants';\r\nimport { CourseExerciseService } from 'app/exercises/shared/course-exercises/course-exercise.service';\r\nimport { faCheckCircle, faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport {\r\n    ExamLiveEventType,\r\n    ExamParticipationLiveEventsService,\r\n    ProblemStatementUpdateEvent,\r\n    WorkingTimeUpdateEvent,\r\n} from 'app/exam/participate/exam-participation-live-events.service';\r\nimport { ExamExerciseUpdateService } from 'app/exam/manage/exam-exercise-update.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { SidebarCardElement, SidebarData } from 'app/types/sidebar';\r\nimport { TestRunRibbonComponent } from '../manage/test-runs/test-run-ribbon.component';\r\nimport { ExamParticipationCoverComponent } from './exam-cover/exam-participation-cover.component';\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport { ExamBarComponent } from './exam-bar/exam-bar.component';\r\nimport { ExamNavigationSidebarComponent } from './exam-navigation-sidebar/exam-navigation-sidebar.component';\r\nimport { ExamExerciseOverviewPageComponent } from './exercises/exercise-overview-page/exam-exercise-overview-page.component';\r\nimport { QuizExamSubmissionComponent } from './exercises/quiz/quiz-exam-submission.component';\r\nimport { FileUploadExamSubmissionComponent } from './exercises/file-upload/file-upload-exam-submission.component';\r\nimport { TextExamSubmissionComponent } from './exercises/text/text-exam-submission.component';\r\nimport { ModelingExamSubmissionComponent } from './exercises/modeling/modeling-exam-submission.component';\r\nimport { ProgrammingExamSubmissionComponent } from './exercises/programming/programming-exam-submission.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { JhiConnectionStatusComponent } from 'app/shared/connection-status/connection-status.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ExamResultSummaryComponent } from './summary/exam-result-summary.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ntype GenerateParticipationStatus = 'generating' | 'failed' | 'success';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-participation',\r\n    templateUrl: './exam-participation.component.html',\r\n    styleUrls: ['./exam-participation.scss'],\r\n    imports: [\r\n        TestRunRibbonComponent,\r\n        ExamParticipationCoverComponent,\r\n        NgClass,\r\n        ExamBarComponent,\r\n        ExamNavigationSidebarComponent,\r\n        ExamExerciseOverviewPageComponent,\r\n        QuizExamSubmissionComponent,\r\n        FileUploadExamSubmissionComponent,\r\n        TextExamSubmissionComponent,\r\n        ModelingExamSubmissionComponent,\r\n        ProgrammingExamSubmissionComponent,\r\n        TranslateDirective,\r\n        JhiConnectionStatusComponent,\r\n        FaIconComponent,\r\n        ExamResultSummaryComponent,\r\n        RouterLink,\r\n        AsyncPipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ExamParticipationComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\r\n    private websocketService = inject(WebsocketService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private examParticipationService = inject(ExamParticipationService);\r\n    private modelingSubmissionService = inject(ModelingSubmissionService);\r\n    private programmingSubmissionService = inject(ProgrammingSubmissionService);\r\n    private textSubmissionService = inject(TextSubmissionService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n    private translateService = inject(TranslateService);\r\n    private alertService = inject(AlertService);\r\n    private courseExerciseService = inject(CourseExerciseService);\r\n    private liveEventsService = inject(ExamParticipationLiveEventsService);\r\n    private courseService = inject(CourseManagementService);\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private examExerciseUpdateService = inject(ExamExerciseUpdateService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    @ViewChildren(ExamSubmissionComponent)\r\n    currentPageComponents: QueryList<ExamSubmissionComponent>;\r\n\r\n    readonly TEXT = ExerciseType.TEXT;\r\n    readonly QUIZ = ExerciseType.QUIZ;\r\n    readonly MODELING = ExerciseType.MODELING;\r\n    readonly PROGRAMMING = ExerciseType.PROGRAMMING;\r\n    readonly FILEUPLOAD = ExerciseType.FILE_UPLOAD;\r\n\r\n    // needed for recalculation of exam content height\r\n    readonly EXAM_HEIGHT_OFFSET = 88;\r\n\r\n    courseId: number;\r\n    examId: number;\r\n    testRunId: number;\r\n    testExam = false;\r\n    studentExamId: number;\r\n    testStartTime?: dayjs.Dayjs;\r\n\r\n    // determines if component was once drawn visited\r\n    pageComponentVisited: boolean[];\r\n\r\n    // needed, because studentExam is downloaded only when exam is started\r\n    exam: Exam;\r\n    studentExam: StudentExam;\r\n\r\n    individualStudentEndDate: dayjs.Dayjs;\r\n    individualStudentEndDateWithGracePeriod: dayjs.Dayjs;\r\n\r\n    activeExamPage = new ExamPage();\r\n    unsavedChanges = false;\r\n    connected = true;\r\n    loggedOut = false;\r\n\r\n    handInEarly = false;\r\n    handInPossible = true;\r\n    submitInProgress = false;\r\n    attendanceChecked = false;\r\n\r\n    examSummaryButtonSecondsLeft = 10;\r\n    examSummaryButtonTimer: ReturnType<typeof setInterval>;\r\n    showExamSummary = false;\r\n\r\n    exerciseIndex = 0;\r\n\r\n    errorSubscription: Subscription;\r\n    websocketSubscription?: Subscription;\r\n    workingTimeUpdateEventsSubscription?: Subscription;\r\n    problemStatementUpdateEventsSubscription?: Subscription;\r\n    profileSubscription?: Subscription;\r\n\r\n    isProduction = true;\r\n    isTestServer = false;\r\n\r\n    sidebarData: SidebarData;\r\n    sidebarExercises: SidebarCardElement[] = [];\r\n\r\n    // Icons\r\n    faCheckCircle = faCheckCircle;\r\n\r\n    isProgrammingExercise() {\r\n        return !this.activeExamPage.isOverviewPage && this.activeExamPage.exercise!.type === ExerciseType.PROGRAMMING;\r\n    }\r\n\r\n    isProgrammingExerciseWithCodeEditor(): boolean {\r\n        return this.isProgrammingExercise() && (this.activeExamPage.exercise as ProgrammingExercise).allowOnlineEditor === true;\r\n    }\r\n\r\n    isProgrammingExerciseWithOfflineIDE(): boolean {\r\n        return this.isProgrammingExercise() && (this.activeExamPage.exercise as ProgrammingExercise).allowOfflineIde === true;\r\n    }\r\n\r\n    examStartConfirmed = false;\r\n\r\n    // autoTimerInterval in seconds\r\n    autoSaveTimer = 0;\r\n    autoSaveInterval: number;\r\n\r\n    private synchronizationAlert = new Subject<void>();\r\n\r\n    private programmingSubmissionSubscriptions: Subscription[] = [];\r\n\r\n    loadingExam: boolean;\r\n    isAtLeastTutor?: boolean;\r\n    isAtLeastInstructor?: boolean;\r\n\r\n    generateParticipationStatus: BehaviorSubject<GenerateParticipationStatus> = new BehaviorSubject('success');\r\n\r\n    // Icons\r\n    faGraduationCap = faGraduationCap;\r\n\r\n    constructor() {\r\n        // show only one synchronization error every 5s\r\n        this.errorSubscription = this.synchronizationAlert.pipe(throttleTime(5000)).subscribe(() => {\r\n            this.alertService.error('artemisApp.examParticipation.saveSubmissionError');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * loads the exam from the server and initializes the view\r\n     */\r\n    ngOnInit(): void {\r\n        combineLatest({\r\n            parentParams: this.route.parent?.parent?.params ?? of({ courseId: undefined }),\r\n            currentParams: this.route.params,\r\n        }).subscribe(({ parentParams, currentParams }) => {\r\n            const courseId = currentParams['courseId'] || parentParams['courseId'];\r\n            this.courseId = parseInt(courseId, 10);\r\n        });\r\n        this.route.params.subscribe((params) => {\r\n            this.examId = parseInt(params['examId'], 10);\r\n            this.testRunId = parseInt(params['testRunId'], 10);\r\n            // As a student can have multiple test exams, the studentExamId is passed as a parameter.\r\n            if (params['studentExamId']) {\r\n                // If a new StudentExam should be created, the keyword start is used (and no StudentExam exists)\r\n                this.testExam = true;\r\n                if (params['studentExamId'] !== 'start') {\r\n                    this.studentExamId = parseInt(params['studentExamId'], 10);\r\n                }\r\n            }\r\n            this.loadingExam = true;\r\n            if (this.testRunId) {\r\n                this.examParticipationService.loadTestRunWithExercisesForConduction(this.courseId, this.examId, this.testRunId).subscribe({\r\n                    next: (studentExam) => {\r\n                        this.studentExam = studentExam;\r\n                        this.studentExam.exam!.course = new Course();\r\n                        this.studentExam.exam!.course.id = this.courseId;\r\n                        this.exam = studentExam.exam!;\r\n                        this.testExam = this.exam.testExam!;\r\n                        this.loadingExam = false;\r\n                    },\r\n                    error: () => (this.loadingExam = false),\r\n                });\r\n            } else {\r\n                this.examParticipationService.getOwnStudentExam(this.courseId, this.examId).subscribe({\r\n                    next: (studentExam) => {\r\n                        this.handleStudentExam(studentExam);\r\n                    },\r\n                    error: () => {\r\n                        this.handleNoStudentExam();\r\n                    },\r\n                });\r\n            }\r\n        });\r\n\r\n        // listen to connect / disconnect events\r\n        this.websocketSubscription = this.websocketService.connectionState.subscribe((status) => {\r\n            this.connected = status.connected;\r\n        });\r\n\r\n        this.profileSubscription = this.profileService.getProfileInfo()?.subscribe((profileInfo) => {\r\n            this.isProduction = profileInfo?.inProduction;\r\n            this.isTestServer = profileInfo.testServer ?? false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Make sure to warn the user before leaving (or reloading) the page in exam mode\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    beforeUnloadHandler(event: BeforeUnloadEvent) {\r\n        if (this.examStartConfirmed && !this.isOver()) {\r\n            event.preventDefault();\r\n            return this.translateService.instant('artemisApp.examParticipation.reloadWarning');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    loadAndDisplaySummary() {\r\n        this.examParticipationService.loadStudentExamWithExercisesForSummary(this.courseId, this.examId, this.studentExam.id!).subscribe({\r\n            next: (studentExamWithExercises: StudentExam) => {\r\n                this.studentExam = studentExamWithExercises;\r\n                this.showExamSummary = true;\r\n                this.loadingExam = false;\r\n            },\r\n            error: () => (this.loadingExam = false),\r\n        });\r\n        if (!this.testExam) {\r\n            this.examParticipationService.resetExamLayout();\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        return this.loggedOut || this.isOver() || !this.studentExam || this.handInEarly || !this.examStartConfirmed;\r\n    }\r\n\r\n    get canDeactivateWarning() {\r\n        return this.translateService.instant('artemisApp.examParticipation.pendingChanges');\r\n    }\r\n\r\n    get activePageIndex(): number {\r\n        if (!this.activeExamPage || this.activeExamPage.isOverviewPage) {\r\n            return -1;\r\n        }\r\n        return this.studentExam.exercises!.findIndex((examExercise) => examExercise.id === this.activeExamPage.exercise!.id);\r\n    }\r\n\r\n    get activePageComponent(): ExamPageComponent | undefined {\r\n        // we have to find the current component based on the activeExercise because the queryList might not be full yet (e.g. only 2 of 5 components initialized)\r\n        return this.currentPageComponents.find(\r\n            (submissionComponent) => !this.activeExamPage.isOverviewPage && (submissionComponent as ExamSubmissionComponent).getExerciseId() === this.activeExamPage.exercise!.id,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * exam start text confirmed and name entered, start button clicked and exam active\r\n     */\r\n    examStarted(studentExam: StudentExam) {\r\n        if (studentExam) {\r\n            // Keep working time\r\n            studentExam.workingTime = this.studentExam?.workingTime ?? studentExam.workingTime;\r\n            this.studentExam = studentExam;\r\n            // no need to change the whole page layout for test runs\r\n            if (this.testRunId) {\r\n                this.examParticipationService.setExamLayout(false, true);\r\n            } else {\r\n                this.examParticipationService.setExamLayout();\r\n            }\r\n            // set endDate with workingTime\r\n            if (!!this.testRunId || this.testExam) {\r\n                this.testStartTime = studentExam.startedDate ? dayjs(studentExam.startedDate) : dayjs();\r\n                this.initIndividualEndDates(this.testStartTime);\r\n            } else {\r\n                this.individualStudentEndDate = dayjs(this.exam.startDate).add(this.studentExam.workingTime!, 'seconds');\r\n            }\r\n            // initializes array which manages submission component and exam overview initialization\r\n            this.pageComponentVisited = new Array(studentExam.exercises!.length).fill(false);\r\n            this.prepareSidebarData();\r\n            // TODO: move to exam-participation.service after studentExam was retrieved\r\n            // initialize all submissions as synced\r\n            this.studentExam.exercises!.forEach((exercise) => {\r\n                if (exercise.studentParticipations) {\r\n                    exercise.studentParticipations!.forEach((participation) => {\r\n                        if (participation.submissions && participation.submissions.length > 0) {\r\n                            participation.submissions.forEach((submission) => {\r\n                                submission.isSynced = true;\r\n                                if (submission.submitted == undefined) {\r\n                                    // only set submitted to false if the value was not specified before\r\n                                    submission.submitted = false;\r\n                                }\r\n                            });\r\n                        } else if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                            // We need to provide a submission to update the navigation bar status indicator\r\n                            // This is important otherwise the save mechanisms would not work properly\r\n                            if (!participation.submissions || participation.submissions.length === 0) {\r\n                                participation.submissions = [];\r\n                                participation.submissions.push(ProgrammingSubmission.createInitialCleanSubmissionForExam());\r\n                            }\r\n                        }\r\n                        // reconnect the participation with the exercise, in case this relationship was deleted before (e.g. due to breaking circular dependencies)\r\n                        participation.exercise = exercise;\r\n\r\n                        // setup subscription for programming exercises\r\n                        if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                            const programmingSubmissionSubscription = this.createProgrammingExerciseSubmission(exercise.id!, participation.id!, false);\r\n                            this.programmingSubmissionSubscriptions.push(programmingSubmissionSubscription);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            this.subscribeToProblemStatementUpdates();\r\n            this.initializeOverviewPage();\r\n        }\r\n        this.examStartConfirmed = true;\r\n        this.startAutoSaveTimer();\r\n    }\r\n\r\n    /**\r\n     * checks if there is a participation for the given exercise and if it was initialized properly\r\n     * @param exercise to check\r\n     * @returns true if valid, false otherwise\r\n     */\r\n    private static isExerciseParticipationValid(exercise: Exercise): boolean {\r\n        // check if there is at least one participation with state === Initialized or state === FINISHED\r\n        return (\r\n            exercise.studentParticipations !== undefined &&\r\n            exercise.studentParticipations.length !== 0 &&\r\n            (exercise.studentParticipations[0].initializationState === InitializationState.INITIALIZED ||\r\n                exercise.studentParticipations[0].initializationState === InitializationState.FINISHED)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * start AutoSaveTimer\r\n     */\r\n    public startAutoSaveTimer(): void {\r\n        // auto save of submission if there are changes\r\n        this.autoSaveInterval = window.setInterval(() => {\r\n            this.autoSaveTimer++;\r\n            if (this.autoSaveTimer >= AUTOSAVE_EXERCISE_INTERVAL && !this.isOver()) {\r\n                this.triggerSave(false);\r\n            }\r\n        }, AUTOSAVE_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * triggered after student accepted exam end terms, will make final call to update submission on server\r\n     */\r\n    onExamEndConfirmed() {\r\n        // temporary lock the submit button in order to protect against spam\r\n        this.handInPossible = false;\r\n        this.submitInProgress = true;\r\n        if (this.autoSaveInterval) {\r\n            window.clearInterval(this.autoSaveInterval);\r\n        }\r\n\r\n        // Submit the exam with a timeout of 20s = 20000ms\r\n        // If we don't receive a response within that time throw an error the subscription can then handle\r\n        this.examParticipationService\r\n            .submitStudentExam(this.courseId, this.examId, this.studentExam)\r\n            .pipe(\r\n                timeout({\r\n                    each: 20000,\r\n                    with: () => throwError(() => new Error('Submission request timed out. Please check your connection and try again.')),\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    if (this.testExam) {\r\n                        // If we have a test exam, we reload the summary from the server right away\r\n                        this.loadAndDisplaySummary();\r\n                    }\r\n                    this.submitInProgress = false;\r\n\r\n                    // As we don't get the student exam from the server, we need to set the submitted flag and the submission date manually\r\n                    this.studentExam.submitted = true;\r\n                    this.studentExam.submissionDate = dayjs();\r\n\r\n                    // Publish it so other components are aware of the change\r\n                    this.examParticipationService.currentlyLoadedStudentExam.next(this.studentExam);\r\n\r\n                    if (this.testRunId) {\r\n                        // If this is a test run, forward the user directly to the exam summary\r\n                        this.router.navigate(['course-management', this.courseId, 'exams', this.examId, 'test-runs', this.testRunId, 'summary']);\r\n                    }\r\n\r\n                    if (this.testExam) {\r\n                        this.examParticipationService.resetExamLayout();\r\n                    }\r\n\r\n                    this.examSummaryButtonTimer = setInterval(() => {\r\n                        this.examSummaryButtonSecondsLeft -= 1;\r\n                        if (this.examSummaryButtonSecondsLeft === 0) {\r\n                            clearInterval(this.examSummaryButtonTimer);\r\n                        }\r\n                    }, 1000);\r\n                },\r\n                error: (error: Error) => {\r\n                    // Explicitly check whether the error was caused by the submission not being in-time or already present, in this case, set hand in not possible\r\n                    const alreadySubmitted = error.message === 'artemisApp.studentExam.alreadySubmitted';\r\n\r\n                    // When we have already submitted load the existing submission\r\n                    if (alreadySubmitted) {\r\n                        if (this.testRunId) {\r\n                            this.examParticipationService.loadTestRunWithExercisesForConduction(this.courseId, this.examId, this.testRunId).subscribe({\r\n                                next: (studentExam: StudentExam) => {\r\n                                    this.studentExam = studentExam;\r\n                                },\r\n                                error: (loadError: Error) => {\r\n                                    this.alertService.error(loadError.message);\r\n\r\n                                    // Allow the user to try to reload the exam from the server\r\n                                    this.submitInProgress = false;\r\n                                    this.handInPossible = true;\r\n                                },\r\n                            });\r\n                        } else {\r\n                            this.examParticipationService.getOwnStudentExam(this.courseId, this.examId).subscribe({\r\n                                next: (existingExam: StudentExam) => {\r\n                                    this.studentExam = existingExam;\r\n                                },\r\n                                error: (loadError: Error) => {\r\n                                    this.alertService.error(loadError.message);\r\n\r\n                                    // Allow the user to try to reload the exam from the server\r\n                                    this.submitInProgress = false;\r\n                                    this.handInPossible = true;\r\n                                },\r\n                            });\r\n                        }\r\n                    } else {\r\n                        this.alertService.error(error.message);\r\n                        this.submitInProgress = false;\r\n                        this.handInPossible = error.message !== 'artemisApp.studentExam.submissionNotInTime';\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * called when exam ended because the working time is over\r\n     */\r\n    examEnded() {\r\n        if (this.autoSaveInterval) {\r\n            window.clearInterval(this.autoSaveInterval);\r\n        }\r\n        // update local studentExam for later sync with server\r\n        this.updateLocalStudentExam();\r\n    }\r\n\r\n    /**\r\n     * Called when a user wants to hand in early or decides to continue.\r\n     */\r\n    toggleHandInEarly() {\r\n        // no need to fetch attendance check status from the server if it is a test exam or an exam without attendance check or when clicking continue\r\n        if (this.exam.testExam || !this.exam.examWithAttendanceCheck || this.handInEarly) {\r\n            this.handleHandInEarly();\r\n        } else {\r\n            this.examManagementService.isAttendanceChecked(this.courseId, this.examId).subscribe((res) => {\r\n                if (res.body) {\r\n                    this.attendanceChecked = res.body;\r\n                }\r\n                this.handleHandInEarly();\r\n            });\r\n        }\r\n    }\r\n\r\n    handleHandInEarly() {\r\n        this.handInEarly = !this.handInEarly;\r\n        if (this.handInEarly) {\r\n            // update local studentExam for later sync with server if the student wants to hand in early\r\n            this.updateLocalStudentExam();\r\n            try {\r\n                this.triggerSave(false);\r\n            } catch (error) {\r\n                captureException(error);\r\n            }\r\n        } else if (this.studentExam?.exercises && this.activeExamPage) {\r\n            const index = this.studentExam.exercises.findIndex((exercise) => !this.activeExamPage.isOverviewPage && exercise.id === this.activeExamPage.exercise!.id);\r\n            this.exerciseIndex = index ? index : 0;\r\n\r\n            // Reset the visited pages array so ngOnInit will be called for only the active page\r\n            this.resetPageComponentVisited(this.exerciseIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the student failed to submit on time. In this case the end page is adapted.\r\n     */\r\n    get studentFailedToSubmit(): boolean {\r\n        if (this.testRunId) {\r\n            return false;\r\n        }\r\n        let individualStudentEndDate;\r\n        if (this.exam.testExam) {\r\n            if (!this.studentExam.submitted && this.studentExam.started && this.studentExam.startedDate) {\r\n                individualStudentEndDate = dayjs(this.studentExam.startedDate).add(this.studentExam.workingTime!, 'seconds');\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            individualStudentEndDate = dayjs(this.exam.startDate).add(this.studentExam.workingTime!, 'seconds');\r\n        }\r\n        return individualStudentEndDate.add(this.exam.gracePeriod!, 'seconds').isBefore(this.serverDateService.now()) && !this.studentExam.submitted;\r\n    }\r\n\r\n    /**\r\n     * check if exam is over\r\n     */\r\n    isOver(): boolean {\r\n        if (this.studentExam && this.studentExam.ended) {\r\n            // if this was calculated to true by the server, we can be sure the student exam has finished\r\n            return true;\r\n        }\r\n        if (this.handInEarly || this.studentExam?.submitted) {\r\n            // implicitly the exam is over when the student wants to abort the exam or when the user has already submitted\r\n            return true;\r\n        }\r\n        return this.individualStudentEndDate && this.individualStudentEndDate.isBefore(this.serverDateService.now());\r\n    }\r\n\r\n    /**\r\n     * check if the grace period has already passed\r\n     */\r\n    isGracePeriodOver() {\r\n        return this.individualStudentEndDateWithGracePeriod && this.individualStudentEndDateWithGracePeriod.isBefore(this.serverDateService.now());\r\n    }\r\n\r\n    /**\r\n     * check if exam is visible\r\n     */\r\n    isVisible(): boolean {\r\n        if (this.testRunId) {\r\n            return true;\r\n        }\r\n        if (!this.exam) {\r\n            return false;\r\n        }\r\n        return this.exam.visibleDate ? this.exam.visibleDate.isBefore(this.serverDateService.now()) : false;\r\n    }\r\n\r\n    /**\r\n     * check if exam has started\r\n     */\r\n    isActive(): boolean {\r\n        if (this.testRunId) {\r\n            return true;\r\n        }\r\n        if (!this.exam) {\r\n            return false;\r\n        }\r\n        return this.exam.startDate ? this.exam.startDate.isBefore(this.serverDateService.now()) : false;\r\n    }\r\n\r\n    checkVerticalOverflow(): boolean {\r\n        // Get the sidebar-content element\r\n        const sidebarContent = document.querySelector('.content-exam-height');\r\n        if (sidebarContent) {\r\n            return sidebarContent.scrollHeight > sidebarContent.clientHeight;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.programmingSubmissionSubscriptions.forEach((subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n        this.errorSubscription.unsubscribe();\r\n        this.websocketSubscription?.unsubscribe();\r\n        this.workingTimeUpdateEventsSubscription?.unsubscribe();\r\n        this.problemStatementUpdateEventsSubscription?.unsubscribe();\r\n        this.examParticipationService.resetExamLayout();\r\n        this.profileSubscription?.unsubscribe();\r\n        window.clearInterval(this.autoSaveInterval);\r\n    }\r\n\r\n    handleStudentExam(studentExam: StudentExam) {\r\n        this.studentExam = studentExam;\r\n        this.exam = studentExam.exam!;\r\n        this.testExam = this.exam.testExam!;\r\n        if (!this.exam.testExam) {\r\n            this.initIndividualEndDates(this.exam.startDate!);\r\n        }\r\n\r\n        // only show the summary if the student was able to submit on time.\r\n        if (this.isOver() && this.studentExam.submitted) {\r\n            this.loadAndDisplaySummary();\r\n        } else {\r\n            // Directly start the exam when we continue from a failed save\r\n            if (this.examParticipationService.lastSaveFailed(this.courseId, this.examId)) {\r\n                this.examParticipationService.loadStudentExamWithExercisesForConductionFromLocalStorage(this.courseId, this.examId).subscribe((localExam: StudentExam) => {\r\n                    // Keep the working time from the server\r\n                    localExam.workingTime = this.studentExam.workingTime ?? localExam.workingTime;\r\n\r\n                    this.studentExam = localExam;\r\n                    this.loadingExam = false;\r\n                    this.examStarted(this.studentExam);\r\n                });\r\n            } else {\r\n                this.loadingExam = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the case when there is no student exam. Here we have to check if the user is at least tutor to show the redirect to the exam management page.\r\n     * This check is not done in the normal case due to performance reasons of 2000 students sending additional requests\r\n     */\r\n    handleNoStudentExam() {\r\n        const course = this.courseStorageService.getCourse(this.courseId);\r\n        if (!course) {\r\n            this.courseService.find(this.courseId).subscribe((courseResponse) => {\r\n                this.isAtLeastTutor = courseResponse.body?.isAtLeastTutor;\r\n                this.isAtLeastInstructor = courseResponse.body?.isAtLeastInstructor;\r\n            });\r\n        } else {\r\n            this.isAtLeastTutor = course.isAtLeastTutor;\r\n            this.isAtLeastInstructor = course.isAtLeastInstructor;\r\n        }\r\n        this.loadingExam = false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the individual end dates and sets up a subscription for potential changes during the conduction\r\n     * @param startDate the start date of the exam\r\n     */\r\n    initIndividualEndDates(startDate: dayjs.Dayjs) {\r\n        this.individualStudentEndDate = dayjs(startDate).add(this.studentExam.workingTime!, 'seconds');\r\n        this.individualStudentEndDateWithGracePeriod = this.individualStudentEndDate.clone().add(this.exam.gracePeriod!, 'seconds');\r\n\r\n        this.subscribeToWorkingTimeUpdates(startDate);\r\n    }\r\n\r\n    private subscribeToWorkingTimeUpdates(startDate: dayjs.Dayjs) {\r\n        if (this.workingTimeUpdateEventsSubscription) {\r\n            this.workingTimeUpdateEventsSubscription.unsubscribe();\r\n        }\r\n        this.workingTimeUpdateEventsSubscription = this.liveEventsService\r\n            .observeNewEventsAsSystem([ExamLiveEventType.WORKING_TIME_UPDATE])\r\n            .subscribe((event: WorkingTimeUpdateEvent) => {\r\n                // Create new object to make change detection work, otherwise the date will not update\r\n                this.studentExam = { ...this.studentExam, workingTime: event.newWorkingTime! };\r\n                this.examParticipationService.currentlyLoadedStudentExam.next(this.studentExam);\r\n                this.individualStudentEndDate = dayjs(startDate).add(this.studentExam.workingTime!, 'seconds');\r\n                this.individualStudentEndDateWithGracePeriod = this.individualStudentEndDate.clone().add(this.exam.gracePeriod!, 'seconds');\r\n                this.liveEventsService.acknowledgeEvent(event, false);\r\n            });\r\n    }\r\n\r\n    private subscribeToProblemStatementUpdates() {\r\n        if (this.problemStatementUpdateEventsSubscription) {\r\n            this.problemStatementUpdateEventsSubscription.unsubscribe();\r\n        }\r\n        this.problemStatementUpdateEventsSubscription = this.liveEventsService\r\n            .observeNewEventsAsSystem([ExamLiveEventType.PROBLEM_STATEMENT_UPDATE])\r\n            .subscribe((event: ProblemStatementUpdateEvent) => {\r\n                this.updateProblemStatement(event);\r\n                this.liveEventsService.acknowledgeEvent(event, false);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * update the current exercise from the navigation\r\n     * @param exerciseChange\r\n     */\r\n    onPageChange(exerciseChange: { overViewChange: boolean; exercise?: Exercise; forceSave: boolean }): void {\r\n        const activeComponent = this.activePageComponent;\r\n        if (activeComponent) {\r\n            activeComponent.onDeactivate();\r\n        }\r\n        try {\r\n            this.triggerSave(exerciseChange.forceSave);\r\n        } catch (error) {\r\n            // an error here should never lead to the wrong exercise being shown\r\n            captureException(error);\r\n        }\r\n        if (!exerciseChange.overViewChange) {\r\n            this.initializeExercise(exerciseChange.exercise!);\r\n        } else {\r\n            this.initializeOverviewPage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets active exercise and checks if participation is valid for exercise\r\n     * if not -> initialize participation and in case of programming exercises subscribe to latestSubmissions\r\n     * @param exercise to initialize\r\n     */\r\n    private initializeExercise(exercise: Exercise) {\r\n        this.activeExamPage.isOverviewPage = false;\r\n        this.activeExamPage.exercise = exercise;\r\n        // set current exercise Index\r\n        this.exerciseIndex = this.studentExam.exercises!.findIndex((exercise1) => exercise1.id === exercise.id);\r\n\r\n        // if we do not have a valid participation for the exercise -> initialize it\r\n        if (!ExamParticipationComponent.isExerciseParticipationValid(exercise)) {\r\n            // TODO: after client is online again, subscribe is not executed, might be a problem of the Observable in createParticipationForExercise\r\n            this.createParticipationForExercise(exercise).subscribe((participation) => {\r\n                if (participation) {\r\n                    // for programming exercises -> wait for latest submission before showing exercise\r\n                    if (exercise.type === ExerciseType.PROGRAMMING) {\r\n                        const subscription = this.createProgrammingExerciseSubmission(exercise.id!, participation.id!, true);\r\n                        // we have to create a fake submission here, otherwise the navigation bar status will not work and the save mechanism might have problems\r\n                        participation.submissions = [ProgrammingSubmission.createInitialCleanSubmissionForExam()];\r\n                        this.programmingSubmissionSubscriptions.push(subscription);\r\n                    }\r\n                    this.activateActiveComponent();\r\n                }\r\n            });\r\n        } else {\r\n            this.activateActiveComponent();\r\n        }\r\n    }\r\n\r\n    private initializeOverviewPage() {\r\n        this.activeExamPage.isOverviewPage = true;\r\n        this.activeExamPage.exercise = undefined;\r\n        this.exerciseIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * this will make sure that the component is displayed in the user interface\r\n     */\r\n    private activateActiveComponent() {\r\n        this.pageComponentVisited[this.activePageIndex] = true;\r\n        const activeComponent = this.activePageComponent;\r\n        if (activeComponent) {\r\n            activeComponent.onActivate();\r\n        }\r\n    }\r\n\r\n    updateSidebarData() {\r\n        this.sidebarData = {\r\n            groupByCategory: false,\r\n            sidebarType: 'inExam',\r\n            ungroupedData: this.sidebarExercises,\r\n        };\r\n    }\r\n\r\n    prepareSidebarData() {\r\n        if (!this.studentExam.exercises) {\r\n            return;\r\n        }\r\n\r\n        this.sidebarExercises = this.examParticipationService.mapExercisesToSidebarCardElements(this.studentExam.exercises!);\r\n        this.updateSidebarData();\r\n    }\r\n\r\n    /**\r\n     * Resets the pageComponentVisited array by setting all elements to false, and then sets the element\r\n     * at the specified activePageIndex to true, if provided and within the array bounds.\r\n     *\r\n     * @param {number} activePageIndex - The index of the currently active exercise page in the pageComponentVisited array.\r\n     */\r\n    private resetPageComponentVisited(activePageIndex: number) {\r\n        this.pageComponentVisited.fill(false);\r\n        if (activePageIndex >= 0) {\r\n            this.pageComponentVisited[activePageIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a fallback mechanism in case the instructor did not prepare the exercise start before the student started it on the client.\r\n     * In this case, no participation and not submission exist and first need to be created on the server before the student can work on this exercise locally\r\n     * @param exercise\r\n     */\r\n    createParticipationForExercise(exercise: Exercise): Observable<StudentParticipation | undefined> {\r\n        this.generateParticipationStatus.next('generating');\r\n        return this.courseExerciseService.startExercise(exercise.id!).pipe(\r\n            map((createdParticipation: StudentParticipation) => {\r\n                // note: it is important that we exchange the existing student participation and that we do not push it\r\n                exercise.studentParticipations = [createdParticipation];\r\n                if (createdParticipation.submissions && createdParticipation.submissions.length > 0) {\r\n                    createdParticipation.submissions[0].isSynced = true;\r\n                }\r\n                this.generateParticipationStatus.next('success');\r\n                return createdParticipation;\r\n            }),\r\n            catchError(() => {\r\n                this.generateParticipationStatus.next('failed');\r\n                return of(undefined);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * We support 4 different cases here:\r\n     * 1) Navigate between two exercises\r\n     * 2) Click on Save & Continue\r\n     * 3) The 30s timer was triggered\r\n     * 4) exam is about to end (<1s left)\r\n     *      --> in this case, we can even save all submissions with isSynced = true\r\n     *\r\n     * @param forceSave is set to true, when the current exercise should be saved (even if there are no changes)\r\n     */\r\n    triggerSave(forceSave: boolean) {\r\n        // before the request, we would mark the submission as isSynced = true\r\n        // right after the response - in case it was successful - we mark the submission as isSynced = false\r\n        this.autoSaveTimer = 0;\r\n\r\n        const activeComponent = this.activePageComponent;\r\n\r\n        // in the case saving is forced, we mark the current exercise as not synced, so it will definitely be saved\r\n        if ((activeComponent && forceSave) || (activeComponent as ExamSubmissionComponent)?.hasUnsavedChanges()) {\r\n            const activeSubmission = (activeComponent as ExamSubmissionComponent)?.getSubmission();\r\n            const activeExerciseType = (activeComponent as ExamSubmissionComponent)?.exerciseType;\r\n            if (activeSubmission) {\r\n                // this will lead to a save below, because isSynced will be set to false\r\n                // it only makes sense to set \"isSynced\" to false for quiz, text and modeling\r\n                if (activeExerciseType !== ExerciseType.PROGRAMMING && activeExerciseType !== ExerciseType.FILE_UPLOAD) {\r\n                    activeSubmission.isSynced = false;\r\n                }\r\n            }\r\n            (activeComponent as ExamSubmissionComponent).updateSubmissionFromView();\r\n        }\r\n\r\n        // go through ALL student exam exercises and check if there are unsynced submissions\r\n        // we do this, because due to connectivity problems, other submissions than the currently active one might have not been saved to the server yet\r\n        const submissionsToSync: { exercise: Exercise; submission: Submission }[] = [];\r\n        this.studentExam.exercises!.forEach((exercise: Exercise) => {\r\n            if (exercise.studentParticipations) {\r\n                exercise.studentParticipations!.forEach((participation) => {\r\n                    if (participation.submissions) {\r\n                        participation.submissions\r\n                            .filter((submission) => !submission.isSynced)\r\n                            .forEach((unsynchedSubmission) => {\r\n                                submissionsToSync.push({ exercise, submission: unsynchedSubmission });\r\n                            });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // save the studentExam in localStorage, so that we would be able to retrieve it later on, in case the student needs to reload the page while being offline\r\n        this.examParticipationService.saveStudentExamToLocalStorage(this.courseId, this.examId, this.studentExam);\r\n\r\n        // if no connection available -> don't try to sync, except it is forced\r\n        // based on the submissions that need to be saved and the exercise, we perform different actions\r\n        if (forceSave || this.connected) {\r\n            submissionsToSync.forEach((submissionToSync: { exercise: Exercise; submission: Submission }) => {\r\n                switch (submissionToSync.exercise.type) {\r\n                    case ExerciseType.TEXT:\r\n                        this.textSubmissionService.update(submissionToSync.submission as TextSubmission, submissionToSync.exercise.id!).subscribe({\r\n                            next: () => this.onSaveSubmissionSuccess(submissionToSync.submission),\r\n                            error: (error: HttpErrorResponse) => this.onSaveSubmissionError(error),\r\n                        });\r\n                        break;\r\n                    case ExerciseType.MODELING:\r\n                        this.modelingSubmissionService.update(submissionToSync.submission as ModelingSubmission, submissionToSync.exercise.id!).subscribe({\r\n                            next: () => this.onSaveSubmissionSuccess(submissionToSync.submission),\r\n                            error: (error: HttpErrorResponse) => this.onSaveSubmissionError(error),\r\n                        });\r\n                        break;\r\n                    case ExerciseType.PROGRAMMING:\r\n                        // nothing to do here, because programming exercises are submitted differently\r\n                        break;\r\n                    case ExerciseType.QUIZ:\r\n                        this.examParticipationService.updateQuizSubmission(submissionToSync.exercise.id!, submissionToSync.submission as QuizSubmission).subscribe({\r\n                            next: () => this.onSaveSubmissionSuccess(submissionToSync.submission),\r\n                            error: (error: HttpErrorResponse) => this.onSaveSubmissionError(error),\r\n                        });\r\n                        break;\r\n                    case ExerciseType.FILE_UPLOAD:\r\n                        // nothing to do here, because file upload exercises are only submitted manually, not when you switch between exercises\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateLocalStudentExam() {\r\n        this.currentPageComponents.filter((component) => component.hasUnsavedChanges()).forEach((component) => component.updateSubmissionFromView());\r\n    }\r\n\r\n    private onSaveSubmissionSuccess(submission: Submission) {\r\n        this.examParticipationService.setLastSaveFailed(false, this.courseId, this.examId);\r\n        submission.isSynced = true;\r\n        submission.submitted = true;\r\n    }\r\n\r\n    private onSaveSubmissionError(error: HttpErrorResponse) {\r\n        this.examParticipationService.setLastSaveFailed(true, this.courseId, this.examId);\r\n\r\n        if (error.status === 401) {\r\n            // Unauthorized means the user needs to log in to resume\r\n            // Therefore don't show errors because we are redirected to the login page\r\n            this.loggedOut = true;\r\n        } else {\r\n            // show only one error for 5s - see constructor\r\n            this.synchronizationAlert.next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a subscription for the latest programming exercise submission for a given exerciseId and participationId\r\n     * This is done here, because this component exists throughout the whole lifecycle of an exam\r\n     * (e.g. programming-exam-submission exists only while the exam is not over)\r\n     * @param exerciseId id of the exercise we want to subscribe to\r\n     * @param participationId id of the participation we want to subscribe to\r\n     * @param fetchPending whether the latest pending submission should be fetched (true) or _only_ the websocket subscription is created (false)\r\n     */\r\n    private createProgrammingExerciseSubmission(exerciseId: number, participationId: number, fetchPending: boolean): Subscription {\r\n        return this.programmingSubmissionService\r\n            .getLatestPendingSubmissionByParticipationId(participationId, exerciseId, true, false, fetchPending)\r\n            .pipe(\r\n                filter((submissionStateObj) => submissionStateObj != undefined),\r\n                distinctUntilChanged(),\r\n                tap((submissionStateObj) => {\r\n                    const exerciseForSubmission = this.studentExam.exercises?.find((programmingExercise) =>\r\n                        programmingExercise.studentParticipations?.some((exerciseParticipation) => exerciseParticipation.id === submissionStateObj.participationId),\r\n                    );\r\n                    if (exerciseForSubmission?.studentParticipations && submissionStateObj.submission?.participation) {\r\n                        // Update the original object as the server only sends a DTO over the websocket\r\n                        // TODO: This is a dark hack to just make it work; the client assumes that ProgrammingSubmissionStateObj contains a submission\r\n                        // TODO: but this is not always the case (only on the initial REST fetch call). WS submission updates are stripped down DTOs only.\r\n                        const base = exerciseForSubmission.studentParticipations?.[0] || {};\r\n                        exerciseForSubmission.studentParticipations[0] = { ...base, ...submissionStateObj.submission.participation };\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe((programmingSubmissionObj) => {\r\n                const exerciseForSubmission = this.studentExam.exercises?.find((programmingExercise) =>\r\n                    programmingExercise.studentParticipations?.some((exerciseParticipation) => exerciseParticipation.id === programmingSubmissionObj.participationId),\r\n                );\r\n                if (\r\n                    exerciseForSubmission?.studentParticipations &&\r\n                    exerciseForSubmission.studentParticipations.length > 0 &&\r\n                    exerciseForSubmission.studentParticipations[0].submissions &&\r\n                    exerciseForSubmission.studentParticipations[0].submissions.length > 0\r\n                ) {\r\n                    if (programmingSubmissionObj.submission) {\r\n                        // delete backwards reference so that it is still serializable\r\n                        const submissionCopy = cloneDeep(programmingSubmissionObj.submission);\r\n\r\n                        /**\r\n                         * Syncs the navigation bar correctly when the student only uses an IDE or the code editor.\r\n                         * In case a student uses both, un-submitted changes in the code editor take precedence.\r\n                         */\r\n                        submissionCopy.isSynced = exerciseForSubmission.studentParticipations[0].submissions[0].isSynced;\r\n                        submissionCopy.submitted = true;\r\n                        delete submissionCopy.participation;\r\n                        exerciseForSubmission.studentParticipations[0].submissions[0] = submissionCopy;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Updates the problem statement of an exercise.\r\n     * If the exercise was already opened, the problem statement is updated using ExamExerciseUpdateService,\r\n     * and differences between the old and new problem statements are highlighted.\r\n     *\r\n     * If the exercise wasn't previously opened, the problem statement will be updated without highlighting differences.\r\n     * This is because ExamExerciseUpdateHighlighterComponents are initialized only when a student opens an exercise.\r\n     *\r\n     * We avoid initializing all exercise components when a student opens an exam to prevent system overload.\r\n     * For large exams, initializing all components at once could result in even 16,000 REST calls, potentially overloading the system.\r\n     */\r\n    private updateProblemStatement(event: ProblemStatementUpdateEvent): void {\r\n        const index = this.studentExam.exercises!.findIndex((exercise) => exercise.id === event.exerciseId);\r\n        const wasExerciseOpened = this.pageComponentVisited[index];\r\n        if (wasExerciseOpened) {\r\n            this.examExerciseUpdateService.updateLiveExamExercise(event.exerciseId, event.problemStatement);\r\n        } else {\r\n            const exercise = this.studentExam.exercises![index];\r\n            exercise.problemStatement = event.problemStatement;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the current exam height offset property to recalculate the height of exam sidebar and sidebar content\r\n     * @param newHeight New exam bar height calculated based on the window resizements\r\n     */\r\n    updateHeight(newHeight: number) {\r\n        document.documentElement.style.setProperty('--exam-height-offset', `${newHeight + this.EXAM_HEIGHT_OFFSET}px`);\r\n    }\r\n}\r\n", "@if (!!testRunId) {\r\n    <jhi-test-run-ribbon id=\"testRunRibbon\" />\r\n}\r\n@if (exam) {\r\n    @if (isVisible() && !isGracePeriodOver() && !this.studentExam?.submitted && !examStartConfirmed) {\r\n        <jhi-exam-participation-cover\r\n            [startView]=\"true\"\r\n            [exam]=\"exam\"\r\n            [studentExam]=\"studentExam\"\r\n            [testRunStartTime]=\"testStartTime\"\r\n            (onExamStarted)=\"examStarted($event)\"\r\n            [isProduction]=\"isProduction\"\r\n            [isTestServer]=\"isTestServer\"\r\n        />\r\n    }\r\n    @if (studentExam) {\r\n        <!-- exam participation -->\r\n        @if (isVisible() && isActive() && !isOver() && examStartConfirmed) {\r\n            <div class=\"exam-background-wrapper\" [ngClass]=\"{ 'py-2': testRunId }\">\r\n                <jhi-exam-bar\r\n                    [exam]=\"exam\"\r\n                    [studentExam]=\"studentExam\"\r\n                    [endDate]=\"individualStudentEndDate\"\r\n                    [exerciseIndex]=\"exerciseIndex\"\r\n                    [isEndView]=\"false\"\r\n                    [examStartDate]=\"exam.startDate!\"\r\n                    (examAboutToEnd)=\"examEnded()\"\r\n                    (onExamHandInEarly)=\"toggleHandInEarly()\"\r\n                    (heightChange)=\"updateHeight($event)\"\r\n                />\r\n\r\n                <div class=\"d-flex justify-content-between gap-3\">\r\n                    <div class=\"ms-3 bg-body\">\r\n                        <jhi-exam-navigation-sidebar\r\n                            [sidebarData]=\"sidebarData\"\r\n                            [exercises]=\"studentExam.exercises!\"\r\n                            [exerciseIndex]=\"exerciseIndex\"\r\n                            [overviewPageOpen]=\"activePageIndex === -1\"\r\n                            [examSessions]=\"studentExam.examSessions\"\r\n                            [isTestRun]=\"testRunId\"\r\n                            (onPageChanged)=\"onPageChange($event)\"\r\n                        />\r\n                    </div>\r\n                    <!-- exercises -->\r\n                    <div\r\n                        class=\"vw-100 module-bg rounded-3 me-3 px-3 pt-3 content-exam-height\"\r\n                        [ngClass]=\"{ 'content-exam-height-testRun-dev': !isProduction || isTestServer, 'content-exam-height-testRun': testRunId }\"\r\n                    >\r\n                        <div [ngClass]=\"{ 'd-flex h-100 justify-content-between flex-column': !checkVerticalOverflow() }\">\r\n                            <div [hidden]=\"activePageIndex !== -1\">\r\n                                <jhi-exam-exercise-overview-page [studentExam]=\"studentExam\" (onPageChanged)=\"onPageChange($event)\" />\r\n                            </div>\r\n                            @for (exercise of studentExam.exercises; track exercise; let i = $index) {\r\n                                @if (exercise && exercise.studentParticipations && exercise.studentParticipations[0]) {\r\n                                    @if (pageComponentVisited[i]) {\r\n                                        <div [hidden]=\"i !== activePageIndex\" [id]=\"'exercise-' + exercise.id\">\r\n                                            @switch (exercise.type) {\r\n                                                @case (QUIZ) {\r\n                                                    @if (exercise.studentParticipations[0].submissions) {\r\n                                                        <jhi-quiz-submission-exam\r\n                                                            [quizConfiguration]=\"exercise\"\r\n                                                            [studentSubmission]=\"exercise.studentParticipations[0].submissions[0]\"\r\n                                                            (saveCurrentExercise)=\"triggerSave(false)\"\r\n                                                        />\r\n                                                    }\r\n                                                }\r\n                                                @case (FILEUPLOAD) {\r\n                                                    @if (exercise.studentParticipations[0].submissions) {\r\n                                                        <jhi-file-upload-submission-exam\r\n                                                            [exercise]=\"exercise\"\r\n                                                            [studentSubmission]=\"exercise.studentParticipations[0].submissions[0]\"\r\n                                                        />\r\n                                                    }\r\n                                                }\r\n                                                @case (TEXT) {\r\n                                                    @if (exercise.studentParticipations[0].submissions) {\r\n                                                        <jhi-text-editor-exam\r\n                                                            [exercise]=\"exercise\"\r\n                                                            [studentSubmission]=\"exercise.studentParticipations[0].submissions[0]\"\r\n                                                            (saveCurrentExercise)=\"triggerSave(false)\"\r\n                                                        />\r\n                                                    }\r\n                                                }\r\n                                                @case (MODELING) {\r\n                                                    @if (exercise.studentParticipations[0].submissions) {\r\n                                                        <jhi-modeling-submission-exam\r\n                                                            [exercise]=\"exercise\"\r\n                                                            [studentSubmission]=\"exercise.studentParticipations[0].submissions[0]\"\r\n                                                            [isSubmissionSynced]=\"exercise.studentParticipations[0].submissions[0].isSynced\"\r\n                                                            (saveCurrentExercise)=\"triggerSave(false)\"\r\n                                                        />\r\n                                                    }\r\n                                                }\r\n                                                @case (PROGRAMMING) {\r\n                                                    <jhi-programming-submission-exam\r\n                                                        [exercise]=\"exercise\"\r\n                                                        [studentParticipation]=\"exercise.studentParticipations[0]\"\r\n                                                        [courseId]=\"courseId\"\r\n                                                    />\r\n                                                }\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                }\r\n                            }\r\n                            @if ((generateParticipationStatus | async) === 'generating') {\r\n                                <div class=\"d-flex justify-content-center align-items-center\">\r\n                                    <p class=\"mb-0\" jhiTranslate=\"artemisApp.examParticipation.preparingParticipation\"></p>\r\n                                    <div class=\"spinner-border ms-2\" role=\"status\">\r\n                                        <span class=\"sr-only\">Loading...</span>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            @if ((generateParticipationStatus | async) === 'failed') {\r\n                                <div class=\"d-flex justify-content-center align-items-center\">\r\n                                    <p class=\"mb-0\" jhiTranslate=\"artemisApp.examParticipation.generateParticipationFailed\"></p>\r\n                                    <button\r\n                                        class=\"btn btn-sm btn-primary px-3 ms-2\"\r\n                                        (click)=\"createParticipationForExercise(this.activeExamPage.exercise!).subscribe()\"\r\n                                        jhiTranslate=\"artemisApp.examParticipation.generateParticipationRetry\"\r\n                                    ></button>\r\n                                </div>\r\n                            }\r\n\r\n                            <!-- exam connection status footer bar -->\r\n                            @if (connected) {\r\n                                <div class=\"update-footer gap-4\">\r\n                                    <div class=\"exam-footer-content\">\r\n                                        <!-- Note by SK: this case shows an empty <p> on purpose -->\r\n                                        @if (isProgrammingExercise()) {\r\n                                            <p jhiTranslate=\"artemisApp.examParticipation.ideConnected\" class=\"mb-0\"></p>\r\n                                        } @else {\r\n                                            <p jhiTranslate=\"artemisApp.examParticipation.connected\" class=\"mb-0\"></p>\r\n                                        }\r\n                                        <jhi-connection-status [isExamMode]=\"true\" class=\"mx-3 connection-status-exam-participation\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            @if (!connected) {\r\n                                <div class=\"update-footer gap-4 disconnected\">\r\n                                    <div class=\"exam-footer-content\">\r\n                                        @if (!isProgrammingExercise()) {\r\n                                            <p jhiTranslate=\"artemisApp.examParticipation.disconnected\" class=\"mb-0\"></p>\r\n                                        }\r\n                                        @if (isProgrammingExerciseWithCodeEditor()) {\r\n                                            @if (isProgrammingExerciseWithOfflineIDE()) {\r\n                                                <p jhiTranslate=\"artemisApp.examParticipation.disconnectedCodeEditorAndOfflineIDE\" class=\"mb-0\"></p>\r\n                                            } @else {\r\n                                                <p jhiTranslate=\"artemisApp.examParticipation.disconnectedCodeEditorNoOfflineIDE\" class=\"mb-0\"></p>\r\n                                            }\r\n                                        } @else if (isProgrammingExerciseWithOfflineIDE()) {\r\n                                            <p jhiTranslate=\"artemisApp.examParticipation.disconnectedNoCodeEditor\" class=\"mb-0\"></p>\r\n                                        }\r\n                                        <jhi-connection-status [isExamMode]=\"true\" class=\"mx-3 connection-status-exam-participation\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (!studentExam.submitted && ((isOver() && examStartConfirmed) || isGracePeriodOver())) {\r\n            @if (!studentFailedToSubmit) {\r\n                <div class=\"exam-background-wrapper\" [ngClass]=\"{ 'py-2': testRunId }\">\r\n                    <jhi-exam-bar\r\n                        [endDate]=\"individualStudentEndDateWithGracePeriod\"\r\n                        [exerciseIndex]=\"exerciseIndex\"\r\n                        [isEndView]=\"true\"\r\n                        [examStartDate]=\"exam.startDate!\"\r\n                        [exam]=\"exam\"\r\n                        [studentExam]=\"studentExam\"\r\n                        [testRunStartTime]=\"testStartTime\"\r\n                        (examAboutToEnd)=\"examEnded()\"\r\n                        (onExamHandInEarly)=\"toggleHandInEarly()\"\r\n                        (heightChange)=\"updateHeight($event)\"\r\n                    />\r\n\r\n                    <div\r\n                        class=\"module-bg rounded-3 px-3 pt-3 end-view content-exam-height\"\r\n                        [ngClass]=\"{ 'content-exam-height-dev content-exam-height-testRun-dev': !isProduction || isTestServer, 'content-exam-height-testRun': testRunId }\"\r\n                    >\r\n                        <jhi-exam-participation-cover\r\n                            [startView]=\"false\"\r\n                            [exam]=\"exam\"\r\n                            [studentExam]=\"studentExam\"\r\n                            [handInEarly]=\"handInEarly\"\r\n                            [handInPossible]=\"handInPossible\"\r\n                            [submitInProgress]=\"submitInProgress\"\r\n                            [attendanceChecked]=\"attendanceChecked\"\r\n                            (onExamEnded)=\"onExamEndConfirmed()\"\r\n                            (onExamContinueAfterHandInEarly)=\"toggleHandInEarly()\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            } @else {\r\n                <!-- Display submission not in time view -->\r\n                <div class=\"d-flex justify-content-between\">\r\n                    <div class=\"col-12 text-center my-auto\">\r\n                        <h3 class=\"mt-2\">{{ exam.title }}</h3>\r\n                        <div class=\"mb-2 font-weight-bold text-danger\">\r\n                            <span jhiTranslate=\"artemisApp.studentExam.submissionNotInTime\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        }\r\n        @if (this.studentExam?.submitted && !showExamSummary && !loadingExam) {\r\n            <div class=\"submissionSuccessfulHint pb-3\">\r\n                <fa-icon [icon]=\"faCheckCircle\" class=\"check\" />\r\n                <h2 jhiTranslate=\"artemisApp.examParticipation.submissionSuccessful.title\"></h2>\r\n                <p jhiTranslate=\"artemisApp.examParticipation.submissionSuccessful.noActionRequired\"></p>\r\n                <p jhiTranslate=\"artemisApp.examParticipation.submissionSuccessful.followExamProtocol\"></p>\r\n                <button\r\n                    type=\"button\"\r\n                    id=\"showExamSummaryButton\"\r\n                    class=\"btn btn-primary\"\r\n                    [disabled]=\"examSummaryButtonSecondsLeft\"\r\n                    (click)=\"loadAndDisplaySummary()\"\r\n                    jhiTranslate=\"artemisApp.examParticipation.submissionSuccessful.button\"\r\n                    [translateValues]=\"{ countdown: examSummaryButtonSecondsLeft ? ' (' + examSummaryButtonSecondsLeft + ')' : '' }\"\r\n                ></button>\r\n            </div>\r\n        }\r\n        @if (showExamSummary) {\r\n            <div [ngClass]=\"{ 'content-height-dev': (!isProduction || isTestServer) && !testRunId, 'p-3 scrollable-content': !testRunId }\">\r\n                <jhi-exam-participation-summary [studentExam]=\"studentExam\" />\r\n            </div>\r\n        }\r\n    }\r\n}\r\n@if (!loadingExam && !exam) {\r\n    @if (isAtLeastTutor && !testRunId) {\r\n        <div class=\"alert alert-warning\">\r\n            <h6 jhiTranslate=\"artemisApp.examParticipation.atLeastTutorStudentExam\"></h6>\r\n            @if (isAtLeastInstructor) {\r\n                <a [routerLink]=\"['/course-management', courseId, 'exams', examId]\" class=\"btn btn-primary\">\r\n                    <fa-icon [icon]=\"faGraduationCap\" [fixedWidth]=\"true\" />&nbsp;{{ 'artemisApp.examParticipation.goToExamManagement' | artemisTranslate }}\r\n                </a>\r\n            } @else {\r\n                <a [routerLink]=\"['/course-management', courseId, 'exams']\" class=\"btn btn-primary\">\r\n                    <fa-icon [icon]=\"faGraduationCap\" [fixedWidth]=\"true\" />&nbsp;{{ 'artemisApp.examParticipation.goToExamManagement' | artemisTranslate }}\r\n                </a>\r\n            }\r\n        </div>\r\n    } @else {\r\n        <div class=\"alert alert-danger\">\r\n            <h6 [jhiTranslate]=\"'artemisApp.examParticipation.' + (testExam ? 'noFurtherAttempts' : 'noStudentExam')\"></h6>\r\n        </div>\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["TestRunRibbonComponent", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "informationBoxData_r1", "content", "value", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "ExamStartInformationComponent_For_3_Conditional_5_Template", "ExamStartInformationComponent_For_3_Conditional_6_Template", "\u0275\u0275conditional", "type", "ExamStartInformationComponent", "examInformationBoxData", "exam", "studentExam", "formattedStartText", "totalPoints", "totalWorkingTimeInMinutes", "moduleNumber", "courseName", "examiner", "numberOfExercisesInExam", "examinedStudent", "startDate", "gracePeriodInMinutes", "ngOnInit", "examMaxPoints", "Math", "floor", "workingTime", "user", "name", "gracePeriod", "prepareInformationBoxData", "buildInformationBox", "boxTitle", "boxContent", "isContentComponent", "title", "boxContentModuleNumber", "informationBoxModuleNumber", "push", "boxContentCourseName", "informationBoxCourseName", "boxContentExaminer", "informationBoxExaminer", "boxContentExaminedStudent", "informationBoxExaminedStudent", "boxContentStartDate", "informationBoxStartDate", "boxContentExamWorkingTime", "informationBoxTotalWorkingTime", "boxContentTotalPoints", "toString", "informationBoxTotalPoints", "informationBoxNumberOfExercises", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ExamStartInformationComponent_For_3_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "\u0275\u0275sanitizeHtml", "InformationBoxComponent", "StudentExamWorkingTimeComponent", "ArtemisDatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "\u0275\u0275template", "ExamParticipationCoverComponent_Conditional_3_Conditional_55_Conditional_1_Template", "ExamParticipationCoverComponent_Conditional_3_Conditional_55_Conditional_2_Template", "\u0275\u0275conditional", "ctx_r1", "confirmed", "nameIsCorrect", "\u0275\u0275textInterpolate", "timeUntilStart", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "exam", "startDate", "ExamParticipationCoverComponent_Conditional_3_Conditional_69_Conditional_5_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c3", "title", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275resetView", "\u0275\u0275listener", "updateConfirmation", "ExamParticipationCoverComponent_Conditional_3_Conditional_28_Template", "enteredName", "ExamParticipationCoverComponent_Conditional_3_Conditional_55_Template", "\u0275\u0275elementContainerStart", "startExam", "ExamParticipationCoverComponent_Conditional_3_Conditional_67_Template", "ExamParticipationCoverComponent_Conditional_3_Conditional_69_Template", "studentExam", "formattedGeneralInformation", "\u0275\u0275classProp", "confirmationStartText", "\u0275\u0275twoWayProperty", "inserted", "waitingForExamStart", "formattedConfirmationText", "\u0275\u0275sanitizeHtml", "\u0275\u0275pipeBind1", "\u0275\u0275pureFunction0", "_c1", "_c2", "accountName", "startButtonEnabled", "isFetching", "faCircleExclamation", "ExamParticipationCoverComponent_Conditional_4_Conditional_20_Conditional_13_Template", "isAttendanceChecked", "ExamParticipationCoverComponent_Conditional_4_Conditional_57_Conditional_1_Template", "ExamParticipationCoverComponent_Conditional_4_Conditional_57_Conditional_2_Template", "_r4", "continueAfterHandInEarly", "submitInProgress", "faArrowLeft", "faSpinner", "faDoorClosed", "ExamParticipationCoverComponent_Conditional_4_Conditional_20_Template", "_r3", "ExamParticipationCoverComponent_Conditional_4_Conditional_30_Template", "ExamParticipationCoverComponent_Conditional_4_Conditional_57_Template", "ExamParticipationCoverComponent_Conditional_4_Conditional_61_Template", "ExamParticipationCoverComponent_Conditional_4_Conditional_64_Template", "submitExam", "ExamParticipationCoverComponent_Conditional_4_Conditional_67_Template", "ExamParticipationCoverComponent_Conditional_4_Conditional_68_Template", "handInEarly", "confirmationEndText", "endButtonEnabled", "ExamParticipationCoverComponent", "artemisMarkdown", "inject", "ArtemisMarkdownService", "translateService", "TranslateService", "accountService", "AccountService", "examParticipationService", "ExamParticipationService", "serverDateService", "ArtemisServerDateService", "startView", "handInPossible", "attendanceChecked", "testRunStartTime", "isProduction", "isTestServer", "onExamStarted", "EventEmitter", "onExamEnded", "onExamContinueAfterHandInEarly", "course", "startEnabled", "endEnabled", "testRun", "testExam", "interval", "loadExamSubscription", "ngOnInit", "examWithAttendanceCheck", "ngOnChanges", "setEndView", "safeHtmlForMarkdown", "startText", "endText", "identity", "then", "user", "name", "ngOnDestroy", "clearInterval", "unsubscribe", "hasStarted", "isBefore", "now", "saveStudentExamToLocalStorage", "id", "emit", "loadStudentExamWithExercisesForConduction", "subscribe", "window", "setInterval", "updateDisplayedTimes", "UI_RELOAD_TIME", "translationBasePath", "instant", "relativeTimeText", "diff", "remainingTimeSeconds", "Math", "ceil", "floor", "visibleDate", "add", "EXAM_START_WAIT_TIME_MINUTES", "isAfter", "trim", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ExamParticipationCoverComponent_Conditional_3_Template", "ExamParticipationCoverComponent_Conditional_4_Template", "\u0275\u0275pureFunction2", "_c0", "NgClass", "ExamLiveEventsButtonComponent", "ExamStartInformationComponent", "FormsModule", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "CheckboxRequiredValidator", "NgModel", "TranslateDirective", "FaIconComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handInEarly", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faDoorClosed", "_r1", "triggerExamAboutToEnd", "\u0275\u0275template", "ExamBarComponent_Conditional_7_Conditional_7_Template", "isEndView", "criticalTimeEndView", "criticalTime", "endDate", "examStartDate", "\u0275\u0275conditional", "ExamBarComponent", "elementRef", "inject", "ElementRef", "onExamHandInEarly", "EventEmitter", "examAboutToEnd", "heightChange", "examTimeLineView", "exerciseIndex", "testRunStartTime", "exam", "studentExam", "dayjs", "duration", "testExam", "testRun", "previousHeight", "examTitle", "exercises", "ngOnInit", "title", "ngAfterViewInit", "barElement", "nativeElement", "querySelector", "offsetHeight", "ResizeObserver", "entries", "entry", "target", "newHeight", "contentRect", "height", "onHeightChange", "observe", "saveExercise", "submission", "ExamParticipationService", "getSubmissionForExercise", "type", "ExerciseType", "PROGRAMMING", "submitted", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ExamBarComponent_Conditional_7_Template", "\u0275\u0275pureFunction2", "_c0", "\u0275\u0275textInterpolate1", "CommonModule", "NgClass", "ExamTimerComponent", "ExamLiveEventsButtonComponent", "FontAwesomeModule", "FaIconComponent", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "examTimeLineView", "\u0275\u0275pipeBind1", "getExerciseIconTooltip", "exercises", "\u0275$index_47_r2", "sidebarItem_r5", "icon", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate1", "title", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "$index", "\u0275\u0275nextContext", "\u0275\u0275resetView", "changePage", "\u0275\u0275template", "ExamNavigationSidebarComponent_For_32_Conditional_9_Template", "ExamNavigationSidebarComponent_For_32_Conditional_10_Template", "ExamNavigationSidebarComponent_For_32_Conditional_15_Template", "\u0275\u0275pureFunction1", "_c5", "\u0275$count_47_r6", "_c3", "exerciseIndex", "\u0275\u0275conditional", "isCollapsed", "setExerciseButtonStatus", "getExerciseButtonTooltip", "rightIcon", "ExerciseButtonStatus", "ExamNavigationSidebarComponent", "profileService", "inject", "ProfileService", "sidebarEventService", "SidebarEventService", "examParticipationService", "ExamParticipationService", "examExerciseUpdateService", "ExamExerciseUpdateService", "repositoryService", "CodeEditorRepositoryService", "conflictService", "CodeEditorConflictStateService", "sidebarData", "overviewPageOpen", "examSessions", "isTestRun", "onPageChanged", "EventEmitter", "EXERCISE_OVERVIEW_INDEX", "subscriptionToLiveExamExerciseUpdates", "faFileLines", "faChevronRight", "profileSubscription", "isProduction", "isTestServer", "exerciseId", "numberOfSavedExercises", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "inProduction", "testServer", "currentExerciseIdForNavigation", "exerciseIdToNavigateTo", "changeExerciseById", "isInitialSession", "length", "initialSession", "undefined", "filter", "exercise", "type", "ExerciseType", "PROGRAMMING", "studentParticipations", "forEach", "domain", "DomainType", "PARTICIPATION", "setDomain", "getStatus", "pipe", "map", "response", "Object", "values", "CommitState", "find", "commitState", "repositoryStatus", "submission", "getSubmissionForExercise", "UNCOMMITTED_CHANGES", "isSynced", "refreshExerciseSaveCount", "ngOnDestroy", "unsubscribe", "emitResetValue", "getIconTooltip", "overviewPage", "forceSave", "emit", "overViewChange", "foundIndex", "findIndex", "id", "submitted", "facSaveSuccess", "SyncedSaved", "Synced", "faHourglassHalf", "isOnlyOfflineIDE", "facSaveWarning", "NotSynced", "ProgrammingExercise", "programmingExercise", "allowOfflineIde", "allowOnlineEditor", "toggleCollapseState", "onKeyDownControlM", "event", "preventDefault", "selectors", "hostBindings", "rf", "ctx", "$event", "\u0275\u0275resolveWindow", "ExamNavigationSidebarComponent_Conditional_20_Template", "\u0275\u0275repeaterCreate", "ExamNavigationSidebarComponent_For_32_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275pureFunction3", "_c0", "_c1", "\u0275\u0275pureFunction2", "_c2", "\u0275\u0275textInterpolate2", "\u0275\u0275repeater", "ungroupedData", "_c4", "ArtemisTranslatePipe", "CommonModule", "NgClass", "FontAwesomeModule", "FaIconComponent", "NgbTooltipModule", "NgbTooltip", "TranslateDirective", "styles", "ExamExerciseOverviewItem", "exercise", "icon", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateShowResultWidth", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "\u0275$index_65_r6", "\u0275\u0275property", "item_r2", "exercise", "studentParticipations", "\u0275\u0275element", "_r1", "$implicit", "openExercise", "\u0275\u0275template", "ExamExerciseOverviewPageComponent_For_47_Conditional_36_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "getIconTooltip", "type", "getIcon", "exerciseGroup", "title", "maxPoints", "setExerciseIconStatus", "getExerciseButtonTooltip", "icon", "\u0275\u0275conditional", "undefined", "ExerciseType", "PROGRAMMING", "length", "ExamExerciseOverviewPageComponent", "ExamPageComponent", "examParticipationService", "inject", "ExamParticipationService", "studentExam", "input", "required", "onPageChanged", "output", "showResultWidth", "examExerciseOverviewItems", "ngOnInit", "exercises", "forEach", "item", "ExamExerciseOverviewItem", "faHourglassHalf", "push", "ngOnChanges", "emit", "overViewChange", "forceSave", "submission", "getSubmissionForExercise", "submitted", "isSynced", "facSaveSuccess", "ExerciseButtonStatus", "SyncedSaved", "Synced", "facSaveWarning", "NotSynced", "__ngFactoryType__", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ExamExerciseOverviewPageComponent_For_47_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275styleProp", "\u0275\u0275repeater", "TranslateDirective", "FaIconComponent", "NgbTooltip", "NgClass", "UpdatingResultComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "ctx_r0", "exercise", "submissionPolicy", "exceedingPenalty", "\u0275\u0275elementStart", "\u0275\u0275template", "ProgrammingSubmissionPolicyStatusComponent_Conditional_1_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275pureFunction2", "_c0", "submissionCount", "submissionLimit", "\u0275\u0275conditional", "type", "SubmissionPolicyType", "SUBMISSION_PENALTY", "ProgrammingSubmissionPolicyStatusComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingSubmissionPolicyStatusComponent_Conditional_1_Template", "active", "undefined", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "includedInOverallScore", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275styleProp", "courseId", "studentParticipation", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onCommitStateChange", "onFileChanged", "\u0275\u0275template", "ProgrammingExamSubmissionComponent_Conditional_13_Conditional_12_Template", "ProgrammingExamSubmissionComponent_Conditional_13_Conditional_16_Template", "ProgrammingExamSubmissionComponent_Conditional_13_Conditional_17_Template", "showEditorInstructions", "repositoryIsLocked", "getCourseFromExercise", "submissionCount", "\u0275\u0275conditional", "allowOfflineIde", "ButtonSize", "MEDIUM", "ProgrammingExamSubmissionComponent_Conditional_14_Conditional_14_Template", "ProgrammingExamSubmissionComponent_Conditional_14_Conditional_15_Template", "ProgrammingExamSubmissionComponent_Conditional_14_Conditional_18_Template", "ProgrammingExamSubmissionComponent", "ExamSubmissionComponent", "domainService", "inject", "DomainService", "exerciseType", "ExerciseType", "PROGRAMMING", "codeEditorContainer", "viewChild", "required", "CodeEditorContainerComponent", "instructions", "ProgrammingExerciseInstructionComponent", "input", "hasSubmittedOnce", "SubmissionPolicyType", "IncludedInOverallScore", "getSubmission", "submissions", "length", "getExerciseId", "id", "getExercise", "isSaving", "ButtonType", "ngOnInit", "updateDomain", "setSubmissionCountAndLockIfNeeded", "ngOnChanges", "onActivate", "updateMarkdown", "participation", "__spreadProps", "__spreadValues", "setDomain", "DomainType", "PARTICIPATION", "locked", "commitState", "firstSubmission", "CommitState", "CLEAN", "submitted", "isSynced", "UNDEFINED", "hasUnsavedChanges", "allowOnlineEditor", "editorState", "EditorState", "UNSAVED_CHANGES", "updateSubmissionFromView", "actions", "onSave", "updateViewFromSubmission", "setSubmissionVersion", "submissionVersion", "Error", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "provide", "useExisting", "CodeEditorConflictStateService", "CodeEditorSubmissionService", "CodeEditorBuildLogService", "CodeEditorRepositoryFileService", "CodeEditorRepositoryService", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "ProgrammingExamSubmissionComponent_Conditional_8_Template", "ProgrammingExamSubmissionComponent_Conditional_13_Template", "ProgrammingExamSubmissionComponent_Conditional_14_Template", "\u0275\u0275textInterpolate1", "tmp_0_0", "exerciseGroup", "title", "bonusPoints", "\u0275\u0275pureFunction2", "_c0", "maxPoints", "INCLUDED_COMPLETELY", "TranslateDirective", "IncludedInScoreBadgeComponent", "ProgrammingSubmissionPolicyStatusComponent", "ExerciseDetailsStudentActionsComponent", "CodeEditorRepositoryIsLockedComponent", "UpdatingResultComponent", "ProgrammingExerciseStudentTriggerBuildButtonComponent", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "examStarted", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "exam", "studentExam", "testStartTime", "isProduction", "isTestServer", "_r4", "triggerSave", "exercise_r5", "studentParticipations", "submissions", "\u0275\u0275template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_3_Conditional_1_Template", "\u0275\u0275conditional", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_4_Conditional_1_Template", "_r6", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_5_Conditional_1_Template", "_r7", "isSynced", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_6_Conditional_1_Template", "courseId", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_3_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_4_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_5_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_6_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Case_7_Template", "\u0275$index_48_r9", "activePageIndex", "id", "tmp_18_0", "type", "QUIZ", "FILEUPLOAD", "TEXT", "MODELING", "PROGRAMMING", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Conditional_1_Template", "pageComponentVisited", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Conditional_1_Template", "_r10", "createParticipationForExercise", "activeExamPage", "exercise", "subscribe", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_28_Conditional_6_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_28_Conditional_7_Template", "isProgrammingExercise", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_29_Conditional_6_Conditional_1_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_29_Conditional_6_Conditional_2_Template", "isProgrammingExerciseWithOfflineIDE", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_29_Conditional_5_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_29_Conditional_6_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_29_Conditional_7_Template", "isProgrammingExerciseWithCodeEditor", "_r3", "examEnded", "toggleHandInEarly", "updateHeight", "onPageChange", "\u0275\u0275repeaterCreate", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_For_23_Template", "\u0275\u0275repeaterTrackByIdentity", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_24_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_26_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_28_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Conditional_29_Template", "\u0275\u0275pureFunction1", "_c0", "testRunId", "individualStudentEndDate", "exerciseIndex", "startDate", "sidebarData", "exercises", "examSessions", "\u0275\u0275pureFunction2", "_c1", "_c2", "checkVerticalOverflow", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "generateParticipationStatus", "connected", "_r11", "onExamEndConfirmed", "individualStudentEndDateWithGracePeriod", "_c3", "handInEarly", "handInPossible", "submitInProgress", "attendanceChecked", "\u0275\u0275textInterpolate", "title", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_3_Conditional_1_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_3_Conditional_2_Template", "studentFailedToSubmit", "_r12", "loadAndDisplaySummary", "faCheckCircle", "examSummaryButtonSecondsLeft", "_c4", "_c5", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_2_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_3_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_4_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Conditional_5_Template", "isVisible", "isActive", "isOver", "examStartConfirmed", "submitted", "isGracePeriodOver", "showExamSummary", "loadingExam", "ExamParticipationComponent_Conditional_1_Conditional_1_Template", "ExamParticipationComponent_Conditional_1_Conditional_2_Template", "_c6", "examId", "faGraduationCap", "\u0275\u0275textInterpolate1", "_c7", "ExamParticipationComponent_Conditional_2_Conditional_1_Conditional_5_Template", "ExamParticipationComponent_Conditional_2_Conditional_1_Conditional_6_Template", "isAtLeastInstructor", "testExam", "ExamParticipationComponent_Conditional_2_Conditional_1_Template", "ExamParticipationComponent_Conditional_2_Conditional_2_Template", "isAtLeastTutor", "ExamParticipationComponent", "websocketService", "inject", "WebsocketService", "route", "ActivatedRoute", "router", "Router", "examParticipationService", "ExamParticipationService", "modelingSubmissionService", "ModelingSubmissionService", "programmingSubmissionService", "ProgrammingSubmissionService", "textSubmissionService", "TextSubmissionService", "serverDateService", "ArtemisServerDateService", "translateService", "TranslateService", "alertService", "AlertService", "courseExerciseService", "CourseExerciseService", "liveEventsService", "ExamParticipationLiveEventsService", "courseService", "CourseManagementService", "courseStorageService", "CourseStorageService", "examExerciseUpdateService", "ExamExerciseUpdateService", "examManagementService", "ExamManagementService", "profileService", "ProfileService", "currentPageComponents", "ExerciseType", "FILE_UPLOAD", "EXAM_HEIGHT_OFFSET", "studentExamId", "ExamPage", "unsavedChanges", "loggedOut", "examSummaryButtonTimer", "errorSubscription", "websocketSubscription", "workingTimeUpdateEventsSubscription", "problemStatementUpdateEventsSubscription", "profileSubscription", "sidebarExercises", "isOverviewPage", "allowOnlineEditor", "allowOfflineIde", "autoSaveTimer", "autoSaveInterval", "synchronizationAlert", "Subject", "programmingSubmissionSubscriptions", "BehaviorSubject", "constructor", "pipe", "throttleTime", "error", "ngOnInit", "combineLatest", "parentParams", "parent", "params", "of", "undefined", "currentParams", "parseInt", "loadTestRunWithExercisesForConduction", "next", "course", "Course", "getOwnStudentExam", "handleStudentExam", "handleNoStudentExam", "connectionState", "status", "getProfileInfo", "profileInfo", "inProduction", "testServer", "beforeUnloadHandler", "event", "preventDefault", "instant", "loadStudentExamWithExercisesForSummary", "studentExamWithExercises", "resetExamLayout", "canDeactivate", "canDeactivateWarning", "findIndex", "examExercise", "activePageComponent", "find", "submissionComponent", "getExerciseId", "workingTime", "setExamLayout", "startedDate", "dayjs", "initIndividualEndDates", "add", "Array", "length", "fill", "prepareSidebarData", "forEach", "participation", "submission", "push", "ProgrammingSubmission", "createInitialCleanSubmissionForExam", "programmingSubmissionSubscription", "createProgrammingExerciseSubmission", "subscribeToProblemStatementUpdates", "initializeOverviewPage", "startAutoSaveTimer", "isExerciseParticipationValid", "initializationState", "InitializationState", "INITIALIZED", "FINISHED", "window", "setInterval", "AUTOSAVE_EXERCISE_INTERVAL", "AUTOSAVE_CHECK_INTERVAL", "clearInterval", "submitStudentExam", "timeout", "each", "with", "throwError", "Error", "submissionDate", "currentlyLoadedStudentExam", "navigate", "message", "loadError", "existingExam", "updateLocalStudentExam", "examWithAttendanceCheck", "handleHandInEarly", "isAttendanceChecked", "res", "body", "captureException", "index", "resetPageComponentVisited", "started", "gracePeriod", "isBefore", "now", "ended", "visibleDate", "sidebarContent", "document", "querySelector", "scrollHeight", "clientHeight", "ngOnDestroy", "subscription", "unsubscribe", "lastSaveFailed", "loadStudentExamWithExercisesForConductionFromLocalStorage", "localExam", "getCourse", "courseResponse", "clone", "subscribeToWorkingTimeUpdates", "observeNewEventsAsSystem", "ExamLiveEventType", "WORKING_TIME_UPDATE", "__spreadProps", "__spreadValues", "newWorkingTime", "acknowledgeEvent", "PROBLEM_STATEMENT_UPDATE", "updateProblemStatement", "exerciseChange", "activeComponent", "onDeactivate", "forceSave", "overViewChange", "initializeExercise", "exercise1", "activateActiveComponent", "onActivate", "updateSidebarData", "groupByCategory", "sidebarType", "ungroupedData", "mapExercisesToSidebarCardElements", "startExercise", "map", "createdParticipation", "catchError", "hasUnsavedChanges", "activeSubmission", "getSubmission", "activeExerciseType", "exerciseType", "updateSubmissionFromView", "submissionsToSync", "filter", "unsynchedSubmission", "saveStudentExamToLocalStorage", "submissionToSync", "update", "onSaveSubmissionSuccess", "onSaveSubmissionError", "updateQuizSubmission", "component", "setLastSaveFailed", "exerciseId", "participationId", "fetchPending", "getLatestPendingSubmissionByParticipationId", "submissionStateObj", "distinctUntilChanged", "tap", "exerciseForSubmission", "programmingExercise", "some", "exerciseParticipation", "base", "programmingSubmissionObj", "submissionCopy", "cloneDeep", "updateLiveExamExercise", "problemStatement", "newHeight", "documentElement", "style", "setProperty", "selectors", "viewQuery", "rf", "ctx", "ExamSubmissionComponent", "\u0275\u0275resolveWindow", "ExamParticipationComponent_Conditional_0_Template", "ExamParticipationComponent_Conditional_1_Template", "ExamParticipationComponent_Conditional_2_Template", "TestRunRibbonComponent", "ExamParticipationCoverComponent", "NgClass", "ExamBarComponent", "ExamNavigationSidebarComponent", "ExamExerciseOverviewPageComponent", "QuizExamSubmissionComponent", "FileUploadExamSubmissionComponent", "TextExamSubmissionComponent", "ModelingExamSubmissionComponent", "ProgrammingExamSubmissionComponent", "TranslateDirective", "JhiConnectionStatusComponent", "FaIconComponent", "ExamResultSummaryComponent", "RouterLink", "AsyncPipe", "ArtemisTranslatePipe", "styles"]
}
