{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/statistics-graph/statistics-graph.component.ts", "src/main/webapp/app/shared/statistics-graph/statistics-graph.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\r\nimport { StatisticsService } from 'app/shared/statistics-graph/statistics.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { GraphColors, Graphs, SpanType, StatisticsView } from 'app/entities/statistics.model';\r\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { yAxisTickFormatting } from 'app/shared/statistics-graph/statistics-graph.utils';\r\nimport { BarChartModule, Color, ScaleType } from '@swimlane/ngx-charts';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgxChartsSingleSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-statistics-graph',\r\n    templateUrl: './statistics-graph.component.html',\r\n    styleUrls: ['../chart/vertical-bar-chart.scss'],\r\n    imports: [FaIconComponent, BarChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class StatisticsGraphComponent implements OnChanges {\r\n    private service = inject(StatisticsService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input()\r\n    graphType: Graphs;\r\n    @Input()\r\n    currentSpan: SpanType;\r\n    @Input()\r\n    statisticsView: StatisticsView;\r\n    @Input()\r\n    entityId?: number;\r\n\r\n    // Html properties\r\n    LEFT = false;\r\n    RIGHT = true;\r\n    SpanType = SpanType;\r\n    // Histogram related properties\r\n    chartName: string;\r\n    chartTime: any;\r\n    // Data\r\n    barChartLabels: string[] = [];\r\n    dataForSpanType: number[];\r\n\r\n    // ngx\r\n    ngxData: NgxChartsSingleSeriesDataEntry[] = [];\r\n    ngxColor: Color = {\r\n        name: 'Statistics',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [GraphColors.DARK_BLUE],\r\n    };\r\n    tooltipTranslation: string;\r\n    yScaleMax: number;\r\n    yAxisTickFormatting = yAxisTickFormatting;\r\n\r\n    // Left arrow -> decrease, right arrow -> increase\r\n    private currentPeriod = 0;\r\n\r\n    // Icons\r\n    faArrowLeft = faArrowLeft;\r\n    faArrowRight = faArrowRight;\r\n\r\n    constructor() {\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.onSystemLanguageChange();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component changes\r\n     * @param {SimpleChanges} changes - Changes being made to the component\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.currentSpan = changes.currentSpan?.currentValue;\r\n        this.barChartLabels = [];\r\n        this.currentPeriod = 0;\r\n        this.chartName = `statistics.${this.graphType.toString().toLowerCase()}`;\r\n        this.tooltipTranslation = `statistics.${this.graphType.toString().toLowerCase()}Title`;\r\n        this.initializeChart();\r\n    }\r\n\r\n    private initializeChart(): void {\r\n        this.createLabels();\r\n        if (this.statisticsView === StatisticsView.ARTEMIS) {\r\n            this.service.getChartData(this.currentSpan, this.currentPeriod, this.graphType).subscribe((res: number[]) => {\r\n                this.dataForSpanType = res;\r\n                this.pushToData();\r\n            });\r\n        } else {\r\n            this.service.getChartDataForContent(this.currentSpan, this.currentPeriod, this.graphType, this.statisticsView, this.entityId!).subscribe((res: number[]) => {\r\n                this.dataForSpanType = res;\r\n                this.pushToData();\r\n            });\r\n        }\r\n    }\r\n\r\n    private createLabels(): void {\r\n        const now = dayjs();\r\n        let startDate;\r\n        let endDate;\r\n        switch (this.currentSpan) {\r\n            case SpanType.DAY:\r\n                for (let i = 0; i < 24; i++) {\r\n                    this.barChartLabels[i] = `${i}:00-${i + 1}:00`;\r\n                }\r\n                this.chartTime = now.add(this.currentPeriod, 'days').format('DD.MM.YYYY');\r\n                break;\r\n            case SpanType.WEEK:\r\n                this.barChartLabels = this.getWeekdays();\r\n                startDate = dayjs().add(this.currentPeriod, 'weeks').subtract(6, 'days').format('DD.MM.YYYY');\r\n                endDate = dayjs().add(this.currentPeriod, 'weeks').format('DD.MM.YYYY');\r\n                this.chartTime = startDate + ' - ' + endDate;\r\n                break;\r\n            case SpanType.MONTH:\r\n                startDate = dayjs().subtract(1 - this.currentPeriod, 'months');\r\n                endDate = dayjs().subtract(-this.currentPeriod, 'months');\r\n                this.barChartLabels = this.getLabelsForMonth(endDate.diff(startDate, 'days'));\r\n                this.chartTime = now\r\n                    .add(this.currentPeriod, 'months')\r\n                    .subtract(Math.floor(this.barChartLabels.length / 2.0) - 1, 'days')\r\n                    .format('MMMM YYYY');\r\n                break;\r\n            case SpanType.QUARTER:\r\n                startDate = dayjs().subtract(11 + 12 * -this.currentPeriod, 'weeks');\r\n                endDate = this.currentPeriod !== 0 ? dayjs().subtract(12 * -this.currentPeriod, 'weeks') : dayjs();\r\n\r\n                let currentWeek;\r\n                for (let i = 0; i < 12; i++) {\r\n                    currentWeek = dayjs()\r\n                        .subtract(11 + 12 * -this.currentPeriod - i, 'weeks')\r\n                        .isoWeekday(1)\r\n                        .isoWeek();\r\n                    this.barChartLabels[i] = this.translateService.instant('calendar_week') + ' ' + currentWeek;\r\n                }\r\n                this.chartTime = startDate.isoWeekday(1).format('DD.MM.YYYY') + ' - ' + endDate.isoWeekday(7).format('DD.MM.YYYY');\r\n                break;\r\n            case SpanType.YEAR:\r\n                this.barChartLabels = this.getMonths();\r\n                this.chartTime = now.add(this.currentPeriod, 'years').subtract(5, 'months').format('YYYY');\r\n                break;\r\n        }\r\n    }\r\n\r\n    private getMonths(): string[] {\r\n        const currentMonth = dayjs().month();\r\n        const year = [\r\n            this.translateService.instant('months.january'),\r\n            this.translateService.instant('months.february'),\r\n            this.translateService.instant('months.march'),\r\n            this.translateService.instant('months.april'),\r\n            this.translateService.instant('months.may'),\r\n            this.translateService.instant('months.june'),\r\n            this.translateService.instant('months.july'),\r\n            this.translateService.instant('months.august'),\r\n            this.translateService.instant('months.september'),\r\n            this.translateService.instant('months.october'),\r\n            this.translateService.instant('months.november'),\r\n            this.translateService.instant('months.december'),\r\n        ];\r\n        const back = year.slice(currentMonth + 1, year.length);\r\n        const front = year.slice(0, currentMonth + 1);\r\n        return back.concat(front);\r\n    }\r\n\r\n    private getLabelsForMonth(daysInMonth: number): string[] {\r\n        const days: string[] = [];\r\n\r\n        for (let i = 0; i < daysInMonth; i++) {\r\n            days.push(\r\n                dayjs()\r\n                    .subtract(-this.currentPeriod, 'months')\r\n                    .subtract(daysInMonth - 1 - i, 'days')\r\n                    .format('DD.MM'),\r\n            );\r\n        }\r\n        return days;\r\n    }\r\n\r\n    private getWeekdays(): string[] {\r\n        const currentDay = dayjs().day();\r\n        const days = [\r\n            this.translateService.instant('weekdays.monday'),\r\n            this.translateService.instant('weekdays.tuesday'),\r\n            this.translateService.instant('weekdays.wednesday'),\r\n            this.translateService.instant('weekdays.thursday'),\r\n            this.translateService.instant('weekdays.friday'),\r\n            this.translateService.instant('weekdays.saturday'),\r\n            this.translateService.instant('weekdays.sunday'),\r\n        ];\r\n        const back = days.slice(currentDay, days.length);\r\n        const front = days.slice(0, currentDay);\r\n        return back.concat(front);\r\n    }\r\n\r\n    public switchTimeSpan(index: boolean): void {\r\n        if (index) {\r\n            this.currentPeriod += 1;\r\n        } else {\r\n            this.currentPeriod -= 1;\r\n        }\r\n        this.initializeChart();\r\n    }\r\n\r\n    /**\r\n     * Converts the data retrieved from the service to dedicated objects that can be interpreted by ngx-charts\r\n     * and pushes them to ngxData.\r\n     * Then, computes the upper limit for the y-axis of the chart.\r\n     */\r\n    private pushToData(): void {\r\n        this.ngxData = this.dataForSpanType.map((score, index) => ({ name: this.barChartLabels[index], value: score }));\r\n        this.yScaleMax = Math.max(3, ...this.dataForSpanType);\r\n    }\r\n\r\n    /**\r\n     * Handles the update of the data labels if the user changes the system language\r\n     */\r\n    private onSystemLanguageChange(): void {\r\n        this.createLabels();\r\n        this.ngxData.forEach((dataPack, index) => {\r\n            dataPack.name = this.barChartLabels[index];\r\n        });\r\n        this.ngxData = [...this.ngxData];\r\n    }\r\n}\r\n", "<div class=\"row d-flex justify-content-center\">\r\n    <div>\r\n        <h3>{{ chartName | artemisTranslate }}</h3>\r\n    </div>\r\n    <div class=\"row\">\r\n        <fa-icon [icon]=\"faArrowLeft\" size=\"2x\" class=\"col-1 d-flex justify-content-end align-items-center px-0\" role=\"button\" (click)=\"switchTimeSpan(LEFT)\" />\r\n        <div #containerRef class=\"chart col-10 px-0\">\r\n            <ngx-charts-bar-vertical\r\n                [view]=\"[containerRef.offsetWidth, 250]\"\r\n                [results]=\"ngxData\"\r\n                [scheme]=\"ngxColor\"\r\n                [xAxis]=\"true\"\r\n                [yAxis]=\"true\"\r\n                [showDataLabel]=\"true\"\r\n                [yScaleMax]=\"yScaleMax\"\r\n                [yAxisTickFormatting]=\"yAxisTickFormatting\"\r\n                [animations]=\"false\"\r\n                [roundEdges]=\"false\"\r\n            >\r\n                <ng-template #tooltipTemplate let-model=\"model\">\r\n                    <b>{{ model.name }}</b> <br />\r\n                    <span>{{ tooltipTranslation | artemisTranslate }}: {{ model.value }}</span>\r\n                </ng-template>\r\n            </ngx-charts-bar-vertical>\r\n        </div>\r\n        <fa-icon [icon]=\"faArrowRight\" size=\"2x\" class=\"col-1 d-flex justify-content-start align-items-center px-0\" role=\"button\" (click)=\"switchTimeSpan(RIGHT)\" />\r\n    </div>\r\n</div>\r\n<h4 class=\"col-xl-9 offset-xl-2 text-center mt-3 mb-5\">{{ chartTime }}</h4>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "model_r2", "name", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "ctx_r2", "tooltipTranslation", "value", "StatisticsGraphComponent", "service", "inject", "StatisticsService", "translateService", "TranslateService", "graphType", "currentSpan", "statisticsView", "entityId", "LEFT", "RIGHT", "SpanType", "chartName", "chartTime", "barChartLabels", "dataForSpanType", "ngxData", "ngxColor", "selectable", "group", "ScaleType", "Ordinal", "domain", "GraphColors", "DARK_BLUE", "yScaleMax", "yAxisTickFormatting", "currentPeriod", "faArrowLeft", "faArrowRight", "constructor", "onLangChange", "subscribe", "onSystemLanguageChange", "ngOnChanges", "changes", "currentValue", "toString", "toLowerCase", "initializeChart", "createLabels", "StatisticsView", "ARTEMIS", "getChartData", "res", "pushToData", "getChartDataForContent", "now", "dayjs", "startDate", "endDate", "DAY", "i", "add", "format", "WEEK", "getWeekdays", "subtract", "MONTH", "getLabelsForMonth", "diff", "Math", "floor", "length", "QUARTER", "currentWeek", "isoWeekday", "isoWeek", "instant", "YEAR", "getMonths", "currentMonth", "month", "year", "back", "slice", "front", "concat", "daysInMonth", "days", "push", "currentDay", "day", "switchTimeSpan", "index", "map", "score", "max", "forEach", "dataPack", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275template", "StatisticsGraphComponent_ng_template_18_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "containerRef_r4", "offsetWidth", "FaIconComponent", "BarChartModule", "BarVerticalComponent", "ArtemisTranslatePipe", "styles"]
}
