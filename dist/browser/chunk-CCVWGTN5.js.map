{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/shared/modeling.component.ts", "src/main/webapp/app/exercises/modeling/shared/modeling-explanation-editor.component.ts", "src/main/webapp/app/exercises/modeling/shared/modeling-explanation-editor.component.html", "src/main/webapp/app/exercises/modeling/shared/modeling-editor.component.ts", "src/main/webapp/app/exercises/modeling/shared/modeling-editor.component.html"],
  "sourcesContent": ["import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { faGripLines, faGripLinesVertical } from '@fortawesome/free-solid-svg-icons';\r\nimport { ApollonEditor, UMLDiagramType, UMLModel } from '@ls1intum/apollon';\r\nimport { MODELING_EDITOR_MAX_HEIGHT, MODELING_EDITOR_MAX_WIDTH, MODELING_EDITOR_MIN_HEIGHT, MODELING_EDITOR_MIN_WIDTH } from 'app/shared/constants/modeling.constants';\r\nimport interact from 'interactjs';\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class ModelingComponent {\r\n    @ViewChild('editorContainer', { static: false }) editorContainer: ElementRef;\r\n    @ViewChild('resizeContainer', { static: false }) resizeContainer: ElementRef;\r\n    @Input() resizeOptions: { horizontalResize?: boolean; verticalResize?: boolean };\r\n    @Input() umlModel: UMLModel;\r\n    @Input() diagramType?: UMLDiagramType;\r\n    @Input() explanation: string;\r\n    @Input() readOnly = false;\r\n\r\n    apollonEditor?: ApollonEditor;\r\n\r\n    // Icons\r\n    faGripLines = faGripLines;\r\n    faGripLinesVertical = faGripLinesVertical;\r\n\r\n    protected setupInteract(): void {\r\n        if (this.resizeOptions) {\r\n            interact('.resizable')\r\n                .resizable({\r\n                    edges: { left: false, right: this.resizeOptions.horizontalResize && '.draggable-right', bottom: this.resizeOptions.verticalResize, top: false },\r\n                    modifiers: [\r\n                        interact.modifiers!.restrictSize({\r\n                            min: { width: MODELING_EDITOR_MIN_WIDTH, height: MODELING_EDITOR_MIN_HEIGHT },\r\n                            max: { width: MODELING_EDITOR_MAX_WIDTH, height: MODELING_EDITOR_MAX_HEIGHT },\r\n                        }),\r\n                    ],\r\n                    inertia: true,\r\n                })\r\n                .on('resizestart', function (event: any) {\r\n                    event.target.classList.add('card-resizable');\r\n                })\r\n                .on('resizeend', function (event: any) {\r\n                    event.target.classList.remove('card-resizable');\r\n                })\r\n                .on('resizemove', (event: any) => {\r\n                    const target = event.target;\r\n                    if (this.resizeOptions.horizontalResize) {\r\n                        target.style.width = event.rect.width + 'px';\r\n                    }\r\n                    if (this.resizeOptions.verticalResize) {\r\n                        target.style.height = event.rect.height + 'px';\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { MAX_SUBMISSION_TEXT_LENGTH } from 'app/shared/constants/input.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { onTextEditorTab } from 'app/utils/text.utils';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-explanation-editor',\r\n    templateUrl: './modeling-explanation-editor.component.html',\r\n    styleUrls: ['./modeling-explanation-editor.component.scss'],\r\n    imports: [TranslateDirective, FormsModule],\r\n})\r\nexport class ModelingExplanationEditorComponent {\r\n    @Input() readOnly = false;\r\n    @Input() explanation: string;\r\n    @Output() explanationChange = new EventEmitter();\r\n\r\n    readonly maxCharacterCount = MAX_SUBMISSION_TEXT_LENGTH;\r\n\r\n    // used in the html template\r\n    protected readonly onTextEditorTab = onTextEditorTab;\r\n\r\n    onExplanationInput(newValue: string) {\r\n        this.explanationChange.emit(newValue);\r\n    }\r\n}\r\n", "<label for=\"explanationText\" jhiTranslate=\"artemisApp.modelingSubmission.explanationText\"></label>\r\n<textarea\r\n    #textEditor\r\n    id=\"explanationText\"\r\n    class=\"text-editor-textarea\"\r\n    [maxLength]=\"maxCharacterCount\"\r\n    [(ngModel)]=\"explanation\"\r\n    (keydown.tab)=\"onTextEditorTab(textEditor, $event)\"\r\n    (ngModelChange)=\"onExplanationInput($event)\"\r\n    [readOnly]=\"readOnly\"\r\n    [disabled]=\"readOnly\"\r\n></textarea>\r\n", "import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewEncapsulation, inject } from '@angular/core';\r\nimport { ApollonEditor, ApollonMode, SVG, UMLDiagramType, UMLElementType, UMLModel, UMLRelationship, UMLRelationshipType } from '@ls1intum/apollon';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { associationUML, personUML, studentUML } from 'app/guided-tour/guided-tour-task.model';\r\nimport { GuidedTourService } from 'app/guided-tour/guided-tour.service';\r\nimport { isFullScreen } from 'app/shared/util/fullscreen.util';\r\nimport { faCheck, faCircleNotch, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { ModelingComponent } from 'app/exercises/modeling/shared/modeling.component';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { Patch } from '@ls1intum/apollon';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass, NgStyle } from '@angular/common';\r\nimport { ModelingExplanationEditorComponent } from './modeling-explanation-editor.component';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-editor',\r\n    templateUrl: './modeling-editor.component.html',\r\n    styleUrls: ['./modeling-editor.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [TranslateDirective, FaIconComponent, NgStyle, NgClass, ModelingExplanationEditorComponent],\r\n})\r\nexport class ModelingEditorComponent extends ModelingComponent implements AfterViewInit, OnDestroy, OnChanges {\r\n    private modalService = inject(NgbModal);\r\n    private guidedTourService = inject(GuidedTourService);\r\n    private sanitizer = inject(DomSanitizer);\r\n\r\n    @Input() showHelpButton = true;\r\n    @Input() withExplanation = false;\r\n    @Input() savedStatus?: { isChanged?: boolean; isSaving?: boolean };\r\n\r\n    @Output() private onModelChanged: EventEmitter<UMLModel> = new EventEmitter<UMLModel>();\r\n    @Output() onModelPatch = new EventEmitter<Patch>();\r\n\r\n    @Output() explanationChange = new EventEmitter();\r\n\r\n    private modelSubscription: number;\r\n    private modelPatchSubscription: number;\r\n\r\n    // Icons\r\n    faCheck = faCheck;\r\n    faTimes = faTimes;\r\n    faCircleNotch = faCircleNotch;\r\n    farQuestionCircle = faQuestionCircle;\r\n\r\n    htmlScroll = 0;\r\n    mouseDownListener: ((this: Document, ev: MouseEvent) => any) | undefined;\r\n    scrollListener: ((this: Document, ev: Event) => any) | undefined;\r\n\r\n    readonlyApollonDiagram?: SVG;\r\n    readOnlySVG?: SafeHtml;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Initializes the Apollon editor.\r\n     * If this is a guided tour, then calls assessModelForGuidedTour.\r\n     * If resizeOptions is set to true, resizes the editor according to interactions.\r\n     */\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.initializeApollonEditor();\r\n        if (this.readOnly) {\r\n            await this.apollonEditor?.nextRender;\r\n            this.readonlyApollonDiagram = await this.apollonEditor?.exportAsSVG();\r\n            if (this.readonlyApollonDiagram?.svg) {\r\n                this.readOnlySVG = this.sanitizer.bypassSecurityTrustHtml(this.readonlyApollonDiagram.svg);\r\n            }\r\n\r\n            // Destroy the Apollon editor after exporting the SVG, to avoid SVG <marker> id collisions\r\n            this.destroyApollonEditor();\r\n        } else {\r\n            this.guidedTourService.checkModelingComponent().subscribe((key) => {\r\n                if (key) {\r\n                    this.assessModelForGuidedTour(key, this.getCurrentModel());\r\n                }\r\n            });\r\n            this.setupInteract();\r\n            this.setupSafariScrollFix();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function initializes the Apollon editor in Modeling mode.\r\n     */\r\n    private initializeApollonEditor(): void {\r\n        if (this.apollonEditor) {\r\n            this.apollonEditor.unsubscribeFromModelChange(this.modelSubscription);\r\n            this.apollonEditor.unsubscribeFromModelChangePatches(this.modelPatchSubscription);\r\n            this.apollonEditor.destroy();\r\n        }\r\n\r\n        // Apollon doesn't need assessments in Modeling mode\r\n        ModelingEditorComponent.removeAssessments(this.umlModel);\r\n\r\n        if (this.editorContainer) {\r\n            this.apollonEditor = new ApollonEditor(this.editorContainer.nativeElement, {\r\n                model: this.umlModel,\r\n                mode: ApollonMode.Modelling,\r\n                readonly: this.readOnly,\r\n                type: this.diagramType || UMLDiagramType.ClassDiagram,\r\n                scale: 0.8,\r\n            });\r\n\r\n            this.modelSubscription = this.apollonEditor.subscribeToModelChange((model: UMLModel) => {\r\n                this.onModelChanged.emit(model);\r\n            });\r\n\r\n            this.modelPatchSubscription = this.apollonEditor.subscribeToModelChangePatches((patch: Patch) => {\r\n                this.onModelPatch.emit(patch);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a hack to prevent the UI jumping to bottom when using popovers in Apollon while using Safari.\r\n     * Other browsers do not show this behavior.\r\n     */\r\n    private setupSafariScrollFix() {\r\n        // Detect Safari desktop: https://stackoverflow.com/a/52205049/7441850\r\n        const isSafariDesktop = /Safari/i.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor) && !/Mobi|Android/i.test(navigator.userAgent);\r\n\r\n        if (this.readOnly || !isSafariDesktop) {\r\n            return;\r\n        }\r\n\r\n        // eslint-disable-next-line no-undef\r\n        console.log('Warning: Installing hack to prevent UI scroll jumps in Safari while using Apollon!');\r\n        // eslint-disable-next-line no-undef\r\n        console.log('Warning: If you experience problems regarding the scrolling behavior, please report them at https://github.com/ls1intum/Artemis');\r\n\r\n        this.mouseDownListener = () => {\r\n            const newScroll = document.getElementsByTagName('html')[0].scrollTop;\r\n            if (newScroll !== this.htmlScroll) {\r\n                const copy = this.htmlScroll;\r\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n                // @ts-ignore (behavior 'instant' works with safari)\r\n                requestAnimationFrame(() => window.scrollTo({ top: copy, left: 0, behavior: 'instant' }));\r\n            }\r\n        };\r\n\r\n        this.scrollListener = () => {\r\n            this.htmlScroll = document.getElementsByTagName('html')[0].scrollTop;\r\n        };\r\n\r\n        document.addEventListener('mousedown', this.mouseDownListener);\r\n        document.addEventListener('scroll', this.scrollListener);\r\n    }\r\n\r\n    /**\r\n     * Destroys the Apollon editor instance, unsubscribes from events, and removes event listeners to clean up resources.\r\n     */\r\n    private destroyApollonEditor(): void {\r\n        if (this.apollonEditor) {\r\n            if (this.modelSubscription) {\r\n                this.apollonEditor.unsubscribeFromModelChange(this.modelSubscription);\r\n            }\r\n            if (this.modelPatchSubscription) {\r\n                this.apollonEditor.unsubscribeFromModelChangePatches(this.modelPatchSubscription);\r\n            }\r\n            this.apollonEditor.destroy();\r\n            this.apollonEditor = undefined;\r\n        }\r\n\r\n        if (this.mouseDownListener) {\r\n            document.removeEventListener('mousedown', this.mouseDownListener);\r\n            document.removeEventListener('scroll', this.scrollListener!);\r\n        }\r\n    }\r\n\r\n    get isApollonEditorMounted(): boolean {\r\n        return this.apollonEditor != undefined;\r\n    }\r\n\r\n    /**\r\n     * Removes the Assessments from a given UMLModel. In modeling mode the assessments are not needed.\r\n     * Also, they should not be sent to the server and persisted as part of the model JSON.\r\n     *\r\n     * @param umlModel the model for which the assessments should be removed\r\n     */\r\n    private static removeAssessments(umlModel: UMLModel) {\r\n        if (umlModel) {\r\n            umlModel.assessments = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current model of the Apollon editor. It removes the assessment first, as it should not be part\r\n     * of the model outside Apollon.\r\n     */\r\n    getCurrentModel(): UMLModel {\r\n        const currentModel = this.apollonEditor!.model;\r\n        ModelingEditorComponent.removeAssessments(currentModel);\r\n        return currentModel;\r\n    }\r\n\r\n    /**\r\n     * This function opens the modal for the help dialog.\r\n     */\r\n    open(content: any): void {\r\n        this.modalService.open(content, { size: 'lg' });\r\n    }\r\n\r\n    /**\r\n     * If changes are made to the uml model, update the model and remove assessments\r\n     * @param {SimpleChanges} changes - Changes made\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.diagramType) {\r\n            // if diagram type changed -> recreate the editor\r\n            this.initializeApollonEditor();\r\n        }\r\n\r\n        if (changes.umlModel && changes.umlModel.currentValue && this.apollonEditor) {\r\n            this.umlModel = changes.umlModel.currentValue;\r\n            // Apollon doesn't need assessments in Modeling mode\r\n            ModelingEditorComponent.removeAssessments(this.umlModel);\r\n            this.apollonEditor.model = this.umlModel;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the apollon editor is not null, destroy it and set it to null, on component destruction\r\n     */\r\n    ngOnDestroy(): void {\r\n        try {\r\n            this.destroyApollonEditor();\r\n        } catch (err) {\r\n            captureException(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assess the model for the modeling guided tutorial\r\n     * @param umlName  the identifier of the UML element that has to be assessed\r\n     * @param umlModel  the current UML model in the editor\r\n     */\r\n    assessModelForGuidedTour(umlName: string, umlModel: UMLModel): void {\r\n        // Find the required UML classes\r\n        const personClass = this.elementWithClass(personUML.name, umlModel);\r\n        const studentClass = this.elementWithClass(studentUML.name, umlModel);\r\n        let personStudentAssociation: UMLRelationship | undefined;\r\n\r\n        switch (umlName) {\r\n            // Check if the Person class is correct\r\n            case personUML.name: {\r\n                const nameAttribute = this.elementWithAttribute(personUML.attribute, umlModel);\r\n                const personClassCorrect = personClass && nameAttribute ? nameAttribute.owner === personClass.id : false;\r\n                this.guidedTourService.updateModelingResult(umlName, personClassCorrect);\r\n                break;\r\n            }\r\n            // Check if the Student class is correct\r\n            case studentUML.name: {\r\n                const majorAttribute = this.elementWithAttribute(studentUML.attribute, umlModel);\r\n                const visitLectureMethod = this.elementWithMethod(studentUML.method, umlModel);\r\n                const studentClassCorrect =\r\n                    studentClass && majorAttribute && visitLectureMethod ? majorAttribute.owner === studentClass.id && visitLectureMethod.owner === studentClass.id : false;\r\n                this.guidedTourService.updateModelingResult(umlName, studentClassCorrect);\r\n                break;\r\n            }\r\n            // Check if the Inheritance association is correct\r\n            case associationUML.name: {\r\n                personStudentAssociation = Object.values(umlModel.relationships).find(\r\n                    (relationship) =>\r\n                        relationship.source.element === studentClass!.id &&\r\n                        relationship.target.element === personClass!.id &&\r\n                        relationship.type === UMLRelationshipType.ClassInheritance,\r\n                );\r\n                this.guidedTourService.updateModelingResult(umlName, !!personStudentAssociation);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the UMLModelElement of the type class with the @param name\r\n     * @param name class name\r\n     * @param umlModel current model that is assessed\r\n     */\r\n    elementWithClass(name: string, umlModel: UMLModel) {\r\n        return Object.values(umlModel.elements).find((element) => element.name.trim() === name && element.type === UMLElementType.Class);\r\n    }\r\n\r\n    /**\r\n     * Return the UMLModelElement of the type ClassAttribute with the @param attribute\r\n     * @param attribute name\r\n     * @param umlModel current model that is assessed\r\n     */\r\n    elementWithAttribute(attribute: string, umlModel: UMLModel) {\r\n        return Object.values(umlModel.elements).find((element) => element.name.includes(attribute) && element.type === UMLElementType.ClassAttribute);\r\n    }\r\n\r\n    /**\r\n     * Return the UMLModelElement of the type ClassMethod with the @param method\r\n     * @param method name\r\n     * @param umlModel current model that is assessed\r\n     */\r\n    elementWithMethod(method: string, umlModel: UMLModel) {\r\n        return Object.values(umlModel.elements).find((element) => element.name.includes(method) && element.type === UMLElementType.ClassMethod);\r\n    }\r\n\r\n    /**\r\n     * checks if this component is the current fullscreen component\r\n     */\r\n    get isFullScreen() {\r\n        return isFullScreen();\r\n    }\r\n\r\n    // Emit explanation change when textarea input changes\r\n    onExplanationInput(newValue: string) {\r\n        this.explanationChange.emit(newValue);\r\n        this.explanation = newValue;\r\n    }\r\n\r\n    /**\r\n     * Import a patch into the Apollon editor\r\n     * @param patch the patch to import\r\n     */\r\n    importPatch(patch: Patch) {\r\n        this.apollonEditor?.importPatch(patch);\r\n    }\r\n}\r\n", "<div class=\"guided-tour modeling-editor\">\r\n    <ng-template #help let-close=\"close\" let-dismiss=\"dismiss\">\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.modelingEditor.helpModal.title\"></h4>\r\n            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"dismiss()\"><span aria-hidden=\"true\"></span></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <table class=\"table\">\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.createElement.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.createElement.text\"></td>\r\n                    <td><img width=\"300\" src=\"/content/images/help-create-element.png\" /></td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.createRelationship.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.createRelationship.text\"></td>\r\n                    <td><img width=\"300\" src=\"/content/images/help-create-relationship.jpg\" /></td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.updateElement.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.updateElement.text\"></td>\r\n                    <td><img width=\"300\" src=\"/content/images/help-update-element.jpg\" /></td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.deleteElement.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.deleteElement.text\" colspan=\"2\">\r\n                        To delete a class, select it with a single click and either press <code>Delete</code> or <code>Backspace</code> on your keyboard.\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.moveElement.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.moveElement.text\"></td>\r\n                    <td><img width=\"300\" src=\"/content/images/help-move-element.jpg\" /></td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.resizeElement.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.resizeElement.text\"></td>\r\n                    <td><img width=\"300\" src=\"/content/images/help-resize-element.jpg\" /></td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.reconnectRelationship.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.reconnectRelationship.text\"></td>\r\n                    <td><img width=\"300\" src=\"/content/images/help-reconnect-relationship.jpg\" /></td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.select.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.select.text\" colspan=\"2\">\r\n                        With <code>Ctrl+Z</code> and <code>Ctrl+Y</code> you can undo and redo your changes.\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.duplicate.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.duplicate.text\" colspan=\"2\">\r\n                        With <code>Ctrl+Z</code> and <code>Ctrl+Y</code> you can undo and redo your changes.\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th jhiTranslate=\"artemisApp.modelingEditor.helpModal.undo.title\"></th>\r\n                    <td jhiTranslate=\"artemisApp.modelingEditor.helpModal.undo.text\" colspan=\"2\">\r\n                        With <code>Ctrl+Z</code> and <code>Ctrl+Y</code> you can undo and redo your changes.\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-outline\" (click)=\"close()\" jhiTranslate=\"entity.action.close\"></button>\r\n        </div>\r\n    </ng-template>\r\n    @if (!readOnly && !isFullScreen) {\r\n        <div class=\"help-and-status\">\r\n            @if (!readOnly && showHelpButton) {\r\n                <button class=\"btn btn-warning\" (click)=\"open(help)\">\r\n                    <fa-icon [icon]=\"farQuestionCircle\" />&nbsp;\r\n                    <span jhiTranslate=\"artemisApp.modelingEditor.helpModal.help\"></span>\r\n                </button>\r\n            }\r\n            @if (savedStatus && !savedStatus.isChanged && !savedStatus.isSaving) {\r\n                <div class=\"status-hint text-success\">\r\n                    <fa-icon [icon]=\"faCheck\" />\r\n                    <span jhiTranslate=\"artemisApp.modelingEditor.allSaved\"></span>\r\n                </div>\r\n            }\r\n            @if (savedStatus && savedStatus.isChanged && !savedStatus.isSaving) {\r\n                <div class=\"status-hint text-warning\">\r\n                    <fa-icon [icon]=\"faTimes\" />\r\n                    <span jhiTranslate=\"artemisApp.modelingEditor.unsavedChanges\"></span>\r\n                </div>\r\n            }\r\n            @if (savedStatus && savedStatus.isSaving) {\r\n                <div class=\"status-hint text-info\">\r\n                    <fa-icon class=\"spin\" [icon]=\"faCircleNotch\" />\r\n                    <span jhiTranslate=\"artemisApp.modelingEditor.saving\"></span>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    <div #resizeContainer [hidden]=\"readOnly\" class=\"modeling-editor\" [class.resizable]=\"resizeOptions\" [ngStyle]=\"{ marginTop: isFullScreen ? '30px' : '' }\">\r\n        <div #editorContainer class=\"apollon-container\"></div>\r\n        @if (resizeOptions && resizeOptions.horizontalResize) {\r\n            <div class=\"draggable-right\">\r\n                <fa-icon [icon]=\"faGripLinesVertical\" />\r\n            </div>\r\n        }\r\n        @if (resizeOptions && resizeOptions.verticalResize) {\r\n            <div class=\"draggable-bottom\">\r\n                <fa-icon [icon]=\"faGripLines\" />\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (readOnly) {\r\n        <div\r\n            class=\"d-flex align-items-center justify-content-center readonly-diagram scroll-container\"\r\n            [innerHtml]=\"readOnlySVG\"\r\n            [ngClass]=\"{ 'full-screen-margin': isFullScreen }\"\r\n        ></div>\r\n    }\r\n\r\n    @if (withExplanation) {\r\n        <jhi-modeling-explanation-editor [explanation]=\"explanation\" (explanationChange)=\"onExplanationInput($event)\" [readOnly]=\"readOnly\" />\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["import_interactjs", "ModelingComponent", "editorContainer", "resizeContainer", "resizeOptions", "umlModel", "diagramType", "explanation", "readOnly", "apollonEditor", "faGripLines", "faGripLinesVertical", "setupInteract", "interact", "resizable", "edges", "left", "right", "horizontalResize", "bottom", "verticalResize", "top", "modifiers", "restrictSize", "min", "width", "MODELING_EDITOR_MIN_WIDTH", "height", "MODELING_EDITOR_MIN_HEIGHT", "max", "MODELING_EDITOR_MAX_WIDTH", "MODELING_EDITOR_MAX_HEIGHT", "inertia", "on", "event", "target", "classList", "add", "remove", "style", "rect", "selectors", "viewQuery", "rf", "ctx", "ModelingExplanationEditorComponent", "readOnly", "explanation", "explanationChange", "EventEmitter", "maxCharacterCount", "MAX_SUBMISSION_TEXT_LENGTH", "onTextEditorTab", "onExplanationInput", "newValue", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275twoWayBindingSet", "\u0275\u0275resetView", "\u0275\u0275listener", "textEditor_r2", "\u0275\u0275reference", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275twoWayProperty", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275listener", "dismiss_r2", "\u0275\u0275restoreView", "_r1", "dismiss", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "close_r3", "close", "_r4", "ctx_r4", "\u0275\u0275nextContext", "help_r6", "\u0275\u0275reference", "open", "\u0275\u0275advance", "\u0275\u0275property", "farQuestionCircle", "faCheck", "faTimes", "faCircleNotch", "\u0275\u0275template", "ModelingEditorComponent_Conditional_5_Conditional_3_Template", "ModelingEditorComponent_Conditional_5_Conditional_4_Template", "ModelingEditorComponent_Conditional_5_Conditional_5_Template", "ModelingEditorComponent_Conditional_5_Conditional_6_Template", "\u0275\u0275conditional", "readOnly", "showHelpButton", "savedStatus", "isChanged", "isSaving", "faGripLinesVertical", "faGripLines", "readOnlySVG", "\u0275\u0275sanitizeHtml", "\u0275\u0275pureFunction1", "_c1", "isFullScreen", "$event", "_r7", "onExplanationInput", "explanation", "ModelingEditorComponent", "ModelingComponent", "modalService", "inject", "NgbModal", "guidedTourService", "GuidedTourService", "sanitizer", "DomSanitizer", "withExplanation", "onModelChanged", "EventEmitter", "onModelPatch", "explanationChange", "modelSubscription", "modelPatchSubscription", "faQuestionCircle", "htmlScroll", "mouseDownListener", "scrollListener", "readonlyApollonDiagram", "constructor", "ngAfterViewInit", "__async", "initializeApollonEditor", "apollonEditor", "nextRender", "exportAsSVG", "svg", "bypassSecurityTrustHtml", "destroyApollonEditor", "checkModelingComponent", "subscribe", "key", "assessModelForGuidedTour", "getCurrentModel", "setupInteract", "setupSafariScrollFix", "unsubscribeFromModelChange", "unsubscribeFromModelChangePatches", "destroy", "removeAssessments", "umlModel", "editorContainer", "ApollonEditor", "nativeElement", "model", "mode", "ApollonMode", "Modelling", "readonly", "type", "diagramType", "UMLDiagramType", "ClassDiagram", "scale", "subscribeToModelChange", "emit", "subscribeToModelChangePatches", "patch", "isSafariDesktop", "test", "navigator", "userAgent", "vendor", "console", "log", "document", "getElementsByTagName", "scrollTop", "copy", "requestAnimationFrame", "window", "scrollTo", "top", "left", "behavior", "addEventListener", "undefined", "removeEventListener", "isApollonEditorMounted", "assessments", "currentModel", "content", "size", "ngOnChanges", "changes", "currentValue", "ngOnDestroy", "err", "captureException", "umlName", "personClass", "elementWithClass", "personUML", "name", "studentClass", "studentUML", "personStudentAssociation", "nameAttribute", "elementWithAttribute", "attribute", "personClassCorrect", "owner", "id", "updateModelingResult", "majorAttribute", "visitLectureMethod", "elementWithMethod", "method", "studentClassCorrect", "associationUML", "Object", "values", "relationships", "find", "relationship", "source", "element", "target", "UMLRelationshipType", "ClassInheritance", "elements", "trim", "UMLElementType", "Class", "includes", "ClassAttribute", "ClassMethod", "newValue", "importPatch", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ModelingEditorComponent_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "ModelingEditorComponent_Conditional_5_Template", "ModelingEditorComponent_Conditional_12_Template", "ModelingEditorComponent_Conditional_13_Template", "ModelingEditorComponent_Conditional_15_Template", "ModelingEditorComponent_Conditional_16_Template", "\u0275\u0275classProp", "resizeOptions", "_c0", "horizontalResize", "verticalResize", "TranslateDirective", "FaIconComponent", "NgStyle", "NgClass", "ModelingExplanationEditorComponent", "styles", "encapsulation"]
}
