{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/assess/text-assessment.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ComplaintResponse } from 'app/entities/complaint-response.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { TextBlock } from 'app/entities/text/text-block.model';\r\nimport { TextBlockRef } from 'app/entities/text/text-block-ref.model';\r\nimport { Submission, getLatestSubmissionResult, getSubmissionResultByCorrectionRound, getSubmissionResultById, setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { TextAssessmentEvent } from 'app/entities/text/text-assesment-event.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\n\r\ntype EntityResponseType = HttpResponse<Result>;\r\ntype EntityResponseEventType = HttpResponse<TextAssessmentEvent>;\r\ntype TextAssessmentDTO = { feedbacks: Feedback[]; textBlocks: TextBlock[]; assessmentNote?: string };\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TextAssessmentService {\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n\r\n    private readonly RESOURCE_URL = 'api/text';\r\n\r\n    /**\r\n     * Saves the passed feedback items of the assessment.\r\n     * @param participationId id of the participation the assessed submission was made to of type {number}\r\n     * @param resultId id of the corresponding result of type {number}\r\n     * @param feedbacks list of feedback made during assessment of type {Feedback[]}\r\n     * @param textBlocks list of text blocks of type {TextBlock[]}\r\n     * @param assessmentNote the internal tutor note for the text assessment\r\n     */\r\n    public save(participationId: number, resultId: number, feedbacks: Feedback[], textBlocks: TextBlock[], assessmentNote?: string): Observable<EntityResponseType> {\r\n        const body = TextAssessmentService.prepareFeedbacksAndTextblocksForRequest(feedbacks, textBlocks, assessmentNote);\r\n        return this.http\r\n            .put<Result>(`${this.RESOURCE_URL}/participations/${participationId}/results/${resultId}/text-assessment`, body, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertResultEntityResponseTypeFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Submits the passed feedback items of the assessment.\r\n     * @param participationId the assessed submission was made to of type {number}\r\n     * @param resultId of the corresponding result of type {number}\r\n     * @param feedbacks made during assessment of type {Feedback[]}\r\n     * @param textBlocks of type {TextBlock[]}\r\n     * @param assessmentNote of the result\r\n     */\r\n    public submit(participationId: number, resultId: number, feedbacks: Feedback[], textBlocks: TextBlock[], assessmentNote?: string): Observable<EntityResponseType> {\r\n        const body = TextAssessmentService.prepareFeedbacksAndTextblocksForRequest(feedbacks, textBlocks, assessmentNote);\r\n        return this.http\r\n            .post<Result>(`${this.RESOURCE_URL}/participations/${participationId}/results/${resultId}/submit-text-assessment`, body, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertResultEntityResponseTypeFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Submits an assessment event to the artemis analytics for text exercises.\r\n     * @param assessmentEvent an event of type {TextAssessmentEvent}\r\n     */\r\n    public addTextAssessmentEvent(assessmentEvent: TextAssessmentEvent): Observable<EntityResponseEventType> {\r\n        const body = Object.assign({}, assessmentEvent);\r\n        return this.http\r\n            .post<TextAssessmentEvent>(this.RESOURCE_URL + '/event-insights/text-assessment/events', body, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseEventType) => Object.assign({}, res)));\r\n    }\r\n\r\n    /**\r\n     * Submits an assessment event to the artemis analytics for text exercises.\r\n     * @param courseId the id of the respective assessment event course id\r\n     * @param exerciseId the id of the respective assessment event exercise id\r\n     */\r\n    public getNumberOfTutorsInvolvedInAssessment(courseId: number, exerciseId: number): Observable<number> {\r\n        return this.http.get<number>(`${this.RESOURCE_URL}/event-insights/text-assessment/courses/${courseId}/text-exercises/${exerciseId}/tutors-involved`);\r\n    }\r\n\r\n    /**\r\n     * Updates an assessment after a complaint.\r\n     * @param feedbacks made during assessment of type {Feedback[]}\r\n     * @param textBlocks of type {TextBlock[]}\r\n     * @param complaintResponse of type {ComplaintResponse}\r\n     * @param submissionId of corresponding submission of type {number}\r\n     * @param assessmentNote of the result, if one exists\r\n     */\r\n    public updateAssessmentAfterComplaint(\r\n        feedbacks: Feedback[],\r\n        textBlocks: TextBlock[],\r\n        complaintResponse: ComplaintResponse,\r\n        submissionId: number,\r\n        participationId: number,\r\n        assessmentNote?: string,\r\n    ): Observable<EntityResponseType> {\r\n        const url = `${this.RESOURCE_URL}/participations/${participationId}/submissions/${submissionId}/text-assessment-after-complaint`;\r\n        const assessmentUpdate = {\r\n            feedbacks,\r\n            textBlocks,\r\n            complaintResponse,\r\n            assessmentNote,\r\n        };\r\n        return this.http.put<Result>(url, assessmentUpdate, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.convertResultEntityResponseTypeFromServer(res)));\r\n    }\r\n\r\n    saveExampleAssessment(exerciseId: number, exampleSubmissionId: number, feedbacks: Feedback[], textBlocks: TextBlock[]): Observable<EntityResponseType> {\r\n        const url = `${this.RESOURCE_URL}/exercises/${exerciseId}/example-submissions/${exampleSubmissionId}/example-text-assessment`;\r\n        const body = TextAssessmentService.prepareFeedbacksAndTextblocksForRequest(feedbacks, textBlocks);\r\n        return this.http.put<Result>(url, body, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.convertResultEntityResponseTypeFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Cancels an assessment.\r\n     * @param participationId the assessed submission was made to of type {number}\r\n     * @param submissionId of corresponding submission of type {number}\r\n     */\r\n    public cancelAssessment(participationId: number, submissionId: number): Observable<void> {\r\n        return this.http.post<void>(`${this.RESOURCE_URL}/participations/${participationId}/submissions/${submissionId}/cancel-assessment`, undefined);\r\n    }\r\n\r\n    /**\r\n     * Deletes an assessment.\r\n     * @param participationId id of the participation, to which the assessment and the submission belong to\r\n     * @param submissionId id of the submission, to which the assessment belongs to\r\n     * @param resultId     id of the result which is deleted\r\n     */\r\n    deleteAssessment(participationId: number, submissionId: number, resultId: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.RESOURCE_URL}/participations/${participationId}/text-submissions/${submissionId}/results/${resultId}`);\r\n    }\r\n\r\n    /**\r\n     * @param submissionId id of the submission for which the feedback items should be retrieved of type {number}\r\n     * @param correctionRound\r\n     * @param resultId id of the searched result (if instructors search for a specific result)\r\n     */\r\n    public getFeedbackDataForExerciseSubmission(submissionId: number, correctionRound = 0, resultId?: number): Observable<StudentParticipation> {\r\n        let params = new HttpParams();\r\n        if (resultId && resultId > 0) {\r\n            // in case resultId is set, we do not need the correction round\r\n            params = params.set('resultId', resultId!.toString());\r\n        } else {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        return this.http\r\n            .get<StudentParticipation>(`${this.RESOURCE_URL}/text-submissions/${submissionId}/for-assessment`, { observe: 'response', params })\r\n            .pipe<HttpResponse<StudentParticipation>, StudentParticipation>(\r\n                // Wire up Result and Submission\r\n                tap((response: HttpResponse<StudentParticipation>) => {\r\n                    const participation = response.body!;\r\n                    if (participation.exercise) {\r\n                        this.accountService.setAccessRightsForExercise(participation.exercise);\r\n                    }\r\n                    const submission = participation.submissions!.last()!;\r\n                    let result;\r\n                    if (resultId) {\r\n                        result = getSubmissionResultById(submission, resultId);\r\n                    } else {\r\n                        result = getSubmissionResultByCorrectionRound(submission, correctionRound)!;\r\n                    }\r\n                    TextAssessmentService.reconnectResultsParticipation(participation, submission, result!);\r\n                }),\r\n                map<HttpResponse<StudentParticipation>, StudentParticipation>((response: HttpResponse<StudentParticipation>) => response.body!),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Gets an example result for defined exercise and submission.\r\n     * @param exerciseId id of the exercise for which the example result should be retrieved of type {number}\r\n     * @param submissionId id of the submission for which the example result should be retrieved of type {number}\r\n     */\r\n    public getExampleResult(exerciseId: number, submissionId: number): Observable<Result> {\r\n        return this.http.get<Result>(`${this.RESOURCE_URL}/exercises/${exerciseId}/submissions/${submissionId}/example-result`);\r\n    }\r\n\r\n    /**\r\n     * Deletes the example assessment associated with given example submission.\r\n     *\r\n     * @param exerciseId   for which the example assessment should be deleted\r\n     * @param exampleSubmissionId for which the example assessment should be deleted\r\n     */\r\n    public deleteExampleAssessment(exerciseId: number, exampleSubmissionId: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.RESOURCE_URL}/exercises/${exerciseId}/example-submissions/${exampleSubmissionId}/example-text-assessment/feedback`);\r\n    }\r\n\r\n    private static prepareFeedbacksAndTextblocksForRequest(feedbacks: Feedback[], textBlocks: TextBlock[], assessmentNote?: string): TextAssessmentDTO {\r\n        feedbacks = feedbacks.map((feedback) => {\r\n            feedback = Object.assign({}, feedback);\r\n            delete feedback.result;\r\n            return feedback;\r\n        });\r\n        const textBlocksRequestObjects = textBlocks.map((textBlock) => {\r\n            // We convert the text block to a request object, so that we can send it to the server.\r\n            // This way, we omit the submissionId and avoid serializing it with private properties.\r\n            return {\r\n                id: textBlock.id,\r\n                type: textBlock.type,\r\n                startIndex: textBlock.startIndex,\r\n                endIndex: textBlock.endIndex,\r\n                text: textBlock.text,\r\n            };\r\n        });\r\n\r\n        return { feedbacks, textBlocks: textBlocksRequestObjects, assessmentNote } as TextAssessmentDTO;\r\n    }\r\n\r\n    private convertResultEntityResponseTypeFromServer(res: EntityResponseType): EntityResponseType {\r\n        const result = TextAssessmentService.convertItemFromServer(res.body!);\r\n        result.completionDate = convertDateFromServer(result.completionDate);\r\n\r\n        if (result.submission) {\r\n            result.submission.submissionDate = convertDateFromServer(result.submission.submissionDate);\r\n        }\r\n        if (result.participation) {\r\n            result.participation.initializationDate = convertDateFromServer(result.participation.initializationDate);\r\n            result.participation.individualDueDate = convertDateFromServer(result.participation.individualDueDate);\r\n            if (result.participation.exercise) {\r\n                this.accountService.setAccessRightsForExercise(result.participation.exercise);\r\n            }\r\n        }\r\n\r\n        return res.clone({ body: result });\r\n    }\r\n\r\n    private static convertItemFromServer(result: Result): Result {\r\n        return Object.assign({}, result);\r\n    }\r\n\r\n    /**\r\n     * Match given text blocks and feedback items by text block references.\r\n     * @param blocks list of text blocks of type {TextBlock[]}\r\n     * @param feedbacks list of feedback made during assessment of type {Feedback[]}\r\n     */\r\n    public static matchBlocksWithFeedbacks(blocks: TextBlock[], feedbacks: Feedback[]): TextBlockRef[] {\r\n        return blocks.map(\r\n            (block: TextBlock) =>\r\n                new TextBlockRef(\r\n                    block,\r\n                    feedbacks.find(({ reference }) => block.id === reference),\r\n                ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Connects the participation with the submission and result\r\n     *\r\n     *  @param participation\r\n     *  @param submission\r\n     *  @param result\r\n     */\r\n    private static reconnectResultsParticipation(participation: Participation, submission: Submission, result: Result) {\r\n        setLatestSubmissionResult(submission, getLatestSubmissionResult(submission));\r\n        submission.participation = participation;\r\n        participation.results = submission.results!;\r\n        result.submission = submission;\r\n        result.participation = participation;\r\n        // Make sure Feedbacks Array is initialized\r\n        result.feedbacks = result.feedbacks || [];\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["TextAssessmentService", "http", "inject", "HttpClient", "accountService", "AccountService", "RESOURCE_URL", "save", "participationId", "resultId", "feedbacks", "textBlocks", "assessmentNote", "body", "prepareFeedbacksAndTextblocksForRequest", "put", "observe", "pipe", "map", "res", "convertResultEntityResponseTypeFromServer", "submit", "post", "addTextAssessmentEvent", "assessmentEvent", "Object", "assign", "getNumberOfTutorsInvolvedInAssessment", "courseId", "exerciseId", "get", "updateAssessmentAfterComplaint", "complaintResponse", "submissionId", "url", "assessmentUpdate", "saveExampleAssessment", "exampleSubmissionId", "cancelAssessment", "undefined", "deleteAssessment", "delete", "getFeedbackDataForExerciseSubmission", "correctionRound", "params", "HttpParams", "set", "toString", "tap", "response", "participation", "exercise", "setAccessRightsForExercise", "submission", "submissions", "last", "result", "getSubmissionResultById", "getSubmissionResultByCorrectionRound", "reconnectResultsParticipation", "getExampleResult", "deleteExampleAssessment", "feedback", "textBlocksRequestObjects", "textBlock", "id", "type", "startIndex", "endIndex", "text", "convertItemFromServer", "completionDate", "convertDateFromServer", "submissionDate", "initializationDate", "individualDueDate", "clone", "matchBlocksWithFeedbacks", "blocks", "block", "TextBlockRef", "find", "reference", "setLatestSubmissionResult", "getLatestSubmissionResult", "results", "factory", "\u0275fac", "providedIn"]
}
