{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/dashboards/tutor-participation-graph/progress-bar/progress-bar.component.ts", "src/main/webapp/app/shared/dashboards/tutor-participation-graph/progress-bar/progress-bar.component.html"],
  "sourcesContent": ["import { ChangeDetectorRef, Component, Input, OnChanges, OnDestroy, SimpleChanges, inject } from '@angular/core';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { Theme, ThemeService } from 'app/core/theme/theme.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-progress-bar',\r\n    templateUrl: './progress-bar.component.html',\r\n    imports: [NgbTooltip, NgClass],\r\n})\r\nexport class ProgressBarComponent implements OnChanges, OnDestroy {\r\n    private themeService = inject(ThemeService);\r\n    private ref = inject(ChangeDetectorRef);\r\n\r\n    @Input() public tooltip: string;\r\n    @Input() public percentage: number;\r\n    @Input() public numerator: number;\r\n    @Input() public denominator: number;\r\n\r\n    foregroundColorClass: string;\r\n    backgroundColorClass: string;\r\n    themeSubscription: Subscription;\r\n\r\n    constructor() {\r\n        this.themeSubscription = toObservable(this.themeService.currentTheme).subscribe(() => {\r\n            this.chooseProgressBarTextColor();\r\n\r\n            // Manually run change detection as it doesn't do it automatically for some reason\r\n            this.ref.detectChanges();\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.percentage) {\r\n            this.percentage = round(this.percentage);\r\n            this.chooseProgressBarTextColor();\r\n            this.calculateProgressBarClass();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.themeSubscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Function to render the correct progress bar class\r\n     */\r\n    calculateProgressBarClass(): void {\r\n        if (this.percentage < 50) {\r\n            this.backgroundColorClass = 'bg-danger';\r\n        } else if (this.percentage < 100) {\r\n            this.backgroundColorClass = 'bg-warning';\r\n        } else {\r\n            this.backgroundColorClass = 'bg-success';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to change the text color to indicate a finished status\r\n     */\r\n    chooseProgressBarTextColor() {\r\n        switch (this.themeService.currentTheme()) {\r\n            case Theme.DARK:\r\n                this.foregroundColorClass = 'text-white';\r\n                break;\r\n            case Theme.LIGHT:\r\n            default:\r\n                if (this.percentage < 100) {\r\n                    this.foregroundColorClass = 'text-dark';\r\n                } else {\r\n                    this.foregroundColorClass = 'text-white';\r\n                }\r\n        }\r\n    }\r\n}\r\n", "<div class=\"progress position-relative\" [ngbTooltip]=\"tooltip\">\r\n    <div\r\n        class=\"progress-bar\"\r\n        role=\"progressbar\"\r\n        [ngClass]=\"backgroundColorClass\"\r\n        [style.width]=\"percentage + '%'\"\r\n        attr.aria-valuenow=\"{{ percentage }}\"\r\n        aria-valuemin=\"0\"\r\n        aria-valuemax=\"100\"\r\n    >\r\n        <span class=\"justify-content-center d-flex position-absolute w-100\" [ngClass]=\"foregroundColorClass\"> {{ numerator }} / {{ denominator }} ({{ percentage + '%' }}) </span>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "2UAaA,IAAaA,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,aAAeC,EAAOC,CAAY,EAClCC,IAAMF,EAAOG,CAAiB,EAEtBC,QACAC,WACAC,UACAC,YAEhBC,qBACAC,qBACAC,kBAEAC,aAAA,CACI,KAAKD,kBAAoBE,EAAa,KAAKb,aAAac,YAAY,EAAEC,UAAU,IAAK,CACjF,KAAKC,2BAA0B,EAG/B,KAAKb,IAAIc,cAAa,CAC1B,CAAC,CACL,CAEAC,YAAYC,EAAsB,CAC1BA,EAAQb,aACR,KAAKA,WAAac,EAAM,KAAKd,UAAU,EACvC,KAAKU,2BAA0B,EAC/B,KAAKK,0BAAyB,EAEtC,CAEAC,aAAW,CACP,KAAKX,kBAAkBY,YAAW,CACtC,CAKAF,2BAAyB,CACjB,KAAKf,WAAa,GAClB,KAAKI,qBAAuB,YACrB,KAAKJ,WAAa,IACzB,KAAKI,qBAAuB,aAE5B,KAAKA,qBAAuB,YAEpC,CAKAM,4BAA0B,CACtB,OAAQ,KAAKhB,aAAac,aAAY,EAAE,CACpC,KAAKU,EAAMC,KACP,KAAKhB,qBAAuB,aAC5B,MACJ,KAAKe,EAAME,MACX,QACQ,KAAKpB,WAAa,IAClB,KAAKG,qBAAuB,YAE5B,KAAKA,qBAAuB,YAExC,CACJ,4CA/DSV,EAAoB,2BAApBA,EAAoB4B,UAAA,CAAA,CAAA,kBAAA,CAAA,EAAAC,OAAA,CAAAvB,QAAA,UAAAC,WAAA,aAAAC,UAAA,YAAAC,YAAA,aAAA,EAAAqB,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,WAAA,oBAAA,EAAA,YAAA,EAAA,CAAA,OAAA,cAAA,gBAAA,IAAA,gBAAA,MAAA,EAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,yBAAA,SAAA,oBAAA,QAAA,EAAA,SAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICbjCE,EAAA,EAAA,MAAA,CAAA,EACIC,EAAA,EAAA;KAAA,EAAAD,EAAA,EAAA,MAAA,CAAA,EASIC,EAAA,EAAA;SAAA,EAAAD,EAAA,EAAA,OAAA,CAAA,EAAsGC,EAAA,CAAA,EAA6DC,EAAA,EACvKD,EAAA,EAAA;KAAA,EAAAC,EAAA,EACJD,EAAA,EAAA;CAAA,EAAAC,EAAA,EACAD,EAAA,EAAA;CAAA,SAbwCE,EAAA,aAAAJ,EAAA/B,OAAA,EAKhCoC,EAAA,CAAA,EAAAC,EAAA,QAAAN,EAAA9B,WAAA,GAAA,EADAkC,EAAA,UAAAJ,EAAA1B,oBAAA,kCAMoE+B,EAAA,CAAA,EAAAD,EAAA,UAAAJ,EAAA3B,oBAAA,EAAkCgC,EAAA,EAAAE,EAAA,IAAAP,EAAA7B,UAAA,MAAA6B,EAAA5B,YAAA,KAAA4B,EAAA9B,WAAA,IAAA,IAAA,kBDChGsC,EAAYC,CAAO,EAAAC,cAAA,CAAA,CAAA,SAEpB/C,CAAoB,GAAA",
  "names": ["ProgressBarComponent", "themeService", "inject", "ThemeService", "ref", "ChangeDetectorRef", "tooltip", "percentage", "numerator", "denominator", "foregroundColorClass", "backgroundColorClass", "themeSubscription", "constructor", "toObservable", "currentTheme", "subscribe", "chooseProgressBarTextColor", "detectChanges", "ngOnChanges", "changes", "round", "calculateProgressBarClass", "ngOnDestroy", "unsubscribe", "Theme", "DARK", "LIGHT", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275advance", "\u0275\u0275styleProp", "\u0275\u0275textInterpolate3", "NgbTooltip", "NgClass", "encapsulation"]
}
