{
  "version": 3,
  "sources": ["src/main/webapp/app/course/dashboards/assessment-dashboard/tutor-issue.ts", "src/main/webapp/app/course/dashboards/assessment-dashboard/exam-assessment-buttons/exam-assessment-buttons.component.ts", "src/main/webapp/app/course/dashboards/assessment-dashboard/exam-assessment-buttons/exam-assessment-buttons.component.html", "src/main/webapp/app/course/dashboards/assessment-dashboard/assessment-dashboard.component.ts", "src/main/webapp/app/course/dashboards/assessment-dashboard/assessment-dashboard.component.html"],
  "sourcesContent": ["import { Range, round } from 'app/shared/util/utils';\r\n\r\nexport class TutorIssue {\r\n    constructor(\r\n        public tutorId: number,\r\n        public tutorName: string,\r\n        public numberOfTutorItems: number,\r\n        public averageTutorValue: number,\r\n        public allowedRange: Range,\r\n        public translationKey: string,\r\n    ) {}\r\n}\r\n\r\n/**\r\n * `TutorValueChecker` is an abstract class that wraps the verification logic whether or not the tutor value surpasses the allowed range.\r\n */\r\nabstract class TutorValueChecker {\r\n    constructor(\r\n        public numberOfTutorItems: number,\r\n        public averageTutorValue: number,\r\n        public averageCourseValue: number,\r\n        public tutorName: string,\r\n        public tutorId: number,\r\n    ) {\r\n        this.averageTutorValue = round(this.averageTutorValue, 1);\r\n    }\r\n\r\n    /**\r\n     * Checks if the tutor value is within an allowed range.\r\n     */\r\n    get isPerformanceIssue(): boolean {\r\n        // If there are no 'items', then do not perform the check\r\n        if (this.numberOfTutorItems === 0) {\r\n            return false;\r\n        }\r\n\r\n        const isWithinBounds = this.allowedRange.lowerBound <= this.averageTutorValue && this.averageTutorValue <= this.allowedRange.upperBound;\r\n        return !isWithinBounds;\r\n    }\r\n\r\n    /**\r\n     * What is the allowed threshold for the tutor value.\r\n     * By default it's average course value -/+ 20%\r\n     */\r\n    get allowedRange(): Range {\r\n        const twentyPercent = this.averageCourseValue / 5;\r\n        return new Range(round(this.averageCourseValue - twentyPercent, 1), round(this.averageCourseValue + twentyPercent, 1));\r\n    }\r\n\r\n    /**\r\n     * The key to use in case of the translation.\r\n     */\r\n    abstract get translationKey(): string;\r\n\r\n    /**\r\n     * Creates tutor issue object out of the validation information.\r\n     */\r\n    toIssue(): TutorIssue {\r\n        return new TutorIssue(this.tutorId, this.tutorName, this.numberOfTutorItems, this.averageTutorValue, this.allowedRange, this.translationKey);\r\n    }\r\n}\r\n\r\n/**\r\n * `TutorValueChecker` for rating.\r\n */\r\nexport class TutorIssueRatingChecker extends TutorValueChecker {\r\n    // Tutor average rating should be greater or equal to 3. Maximum rating is 5.\r\n    static readonly MIN_RATING = 3;\r\n    static readonly MAX_RATING = 5;\r\n\r\n    get allowedRange(): Range {\r\n        return new Range(TutorIssueRatingChecker.MIN_RATING, TutorIssueRatingChecker.MAX_RATING);\r\n    }\r\n\r\n    get translationKey(): string {\r\n        return 'artemisApp.assessmentDashboard.tutorPerformanceIssues.ratings';\r\n    }\r\n}\r\n\r\n/**\r\n * `TutorValueChecker` for score.\r\n */\r\nexport class TutorIssueScoreChecker extends TutorValueChecker {\r\n    get translationKey(): string {\r\n        return 'artemisApp.assessmentDashboard.tutorPerformanceIssues.score';\r\n    }\r\n}\r\n\r\n/**\r\n * `TutorValueChecker` for complaints.\r\n */\r\nexport class TutorIssueComplaintsChecker extends TutorValueChecker {\r\n    get allowedRange(): Range {\r\n        // Tutor complaint ratio should be less than average course complaint ratio + 20%\r\n        const twentyPercent = this.averageCourseValue / 5;\r\n        return new Range(0, round(this.averageCourseValue + twentyPercent, 1));\r\n    }\r\n\r\n    get translationKey(): string {\r\n        return 'artemisApp.assessmentDashboard.tutorPerformanceIssues.complaints';\r\n    }\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\r\nimport { Subscription, forkJoin } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { faClipboard } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-assessment-buttons',\r\n    templateUrl: './exam-assessment-buttons.component.html',\r\n    imports: [RouterLink, FaIconComponent, TranslateDirective],\r\n})\r\nexport class ExamAssessmentButtonsComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private studentExamService = inject(StudentExamService);\r\n    private courseService = inject(CourseManagementService);\r\n    private alertService = inject(AlertService);\r\n    private accountService = inject(AccountService);\r\n    private artemisTranslatePipe = inject(ArtemisTranslatePipe);\r\n\r\n    courseId: number;\r\n    examId: number;\r\n    studentExams: StudentExam[];\r\n    course: Course;\r\n    exam: Exam;\r\n\r\n    paramSub: Subscription;\r\n    isLoading: boolean;\r\n    isEvaluatingQuizExercises: boolean;\r\n    isAssessingUnsubmittedExams: boolean;\r\n    isExamOver = false;\r\n    longestWorkingTime?: number;\r\n    isAdmin = false;\r\n\r\n    // icons\r\n    faClipboard = faClipboard;\r\n\r\n    /**\r\n     * Initialize the courseId and examId\r\n     */\r\n    ngOnInit(): void {\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        this.loadAll();\r\n    }\r\n\r\n    private loadAll() {\r\n        this.isLoading = true;\r\n        this.paramSub = this.route.params.subscribe(() => {\r\n            this.isAdmin = this.accountService.isAdmin();\r\n            this.courseService.find(this.courseId).subscribe((courseResponse) => {\r\n                this.course = courseResponse.body!;\r\n            });\r\n\r\n            /*\r\n            Prepare workingTimeObservable to perform the following on subscribe:\r\n            - set the longestWorkingTime\r\n            - trigger (re)calculation of whether the exam is over\r\n             */\r\n            const workingTimeObservable = this.studentExamService.getLongestWorkingTimeForExam(this.courseId, this.examId).pipe(\r\n                tap((value) => {\r\n                    this.longestWorkingTime = value;\r\n                    this.calculateIsExamOver();\r\n                }),\r\n            );\r\n\r\n            /*\r\n            Prepare examObservable to perform the following on subscribe:\r\n            - set the exam\r\n            - trigger (re)calculation of whether the exam is over\r\n             */\r\n            const examObservable = this.examManagementService.find(this.courseId, this.examId, true).pipe(\r\n                tap((examResponse) => {\r\n                    this.exam = examResponse.body!;\r\n                    this.calculateIsExamOver();\r\n                }),\r\n            );\r\n\r\n            // Calculate hasStudentsWithoutExam only when both observables emitted\r\n            forkJoin([workingTimeObservable, examObservable]).subscribe(() => {\r\n                this.isLoading = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Evaluates all the quiz exercises that belong to the exam\r\n     */\r\n    evaluateQuizExercises() {\r\n        this.isEvaluatingQuizExercises = true;\r\n        this.examManagementService.evaluateQuizExercises(this.courseId, this.examId).subscribe({\r\n            next: (res) => {\r\n                this.alertService.success('artemisApp.studentExams.evaluateQuizExerciseSuccess', { number: res?.body });\r\n                this.isEvaluatingQuizExercises = false;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.evaluateQuizExerciseFailure', err);\r\n                this.isEvaluatingQuizExercises = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    assessUnsubmittedExamModelingAndTextParticipations() {\r\n        this.isAssessingUnsubmittedExams = true;\r\n        this.examManagementService.assessUnsubmittedExamModelingAndTextParticipations(this.courseId, this.examId).subscribe({\r\n            next: (res) => {\r\n                this.alertService.success('artemisApp.studentExams.assessUnsubmittedStudentExamsSuccess', { number: res?.body });\r\n                this.isAssessingUnsubmittedExams = false;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError('artemisApp.studentExams.assessUnsubmittedStudentExamsFailure', err);\r\n                this.isAssessingUnsubmittedExams = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows the translated error message if an error key is available in the error response. Otherwise it defaults to the generic alert.\r\n     * @param translationString the string identifier in the translation service for the text. This is ignored if the response does not contain an error message or error key.\r\n     * @param err the error response\r\n     */\r\n    private handleError(translationString: string, err: HttpErrorResponse) {\r\n        let errorDetail;\r\n        if (err?.error && err.error.errorKey) {\r\n            errorDetail = this.artemisTranslatePipe.transform(err.error.errorKey);\r\n        } else {\r\n            errorDetail = err?.error?.message;\r\n        }\r\n        if (errorDetail) {\r\n            this.alertService.error(translationString, { message: errorDetail });\r\n        } else {\r\n            // Sometimes the response does not have an error field, so we default to generic error handling\r\n            onError(this.alertService, err);\r\n        }\r\n    }\r\n\r\n    calculateIsExamOver() {\r\n        if (this.longestWorkingTime && this.exam) {\r\n            const startDate = dayjs(this.exam.startDate);\r\n            let endDate = startDate.add(this.longestWorkingTime, 'seconds');\r\n            if (this.exam.gracePeriod) {\r\n                endDate = endDate.add(this.exam.gracePeriod!, 'seconds');\r\n            }\r\n            this.isExamOver = endDate.isBefore(dayjs());\r\n        }\r\n    }\r\n}\r\n", "@if (exam && course && course.isAtLeastInstructor) {\r\n    <div class=\"exam-action-buttons\">\r\n        <span>\r\n            <a [routerLink]=\"['/course-management', courseId, 'exams', examId, 'grading-system']\" class=\"btn btn-info mt-1\" id=\"grading-key-button-{{ exam.id }}\">\r\n                <fa-icon [icon]=\"faClipboard\" />\r\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.gradingSystem\"></span>\r\n            </a>\r\n        </span>\r\n        <button\r\n            id=\"evaluateQuizExercisesButton\"\r\n            class=\"btn btn-primary mt-1\"\r\n            (click)=\"evaluateQuizExercises()\"\r\n            [disabled]=\"isLoading || isAssessingUnsubmittedExams || isEvaluatingQuizExercises || !isExamOver\"\r\n        >\r\n            @if (isEvaluatingQuizExercises) {\r\n                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n            }\r\n            <span jhiTranslate=\"artemisApp.studentExams.evaluateQuizExercises\"></span>\r\n        </button>\r\n        <button\r\n            class=\"btn btn-primary mt-1\"\r\n            id=\"assessUnsubmittedExamModelingAndTextParticipationsButton\"\r\n            (click)=\"assessUnsubmittedExamModelingAndTextParticipations()\"\r\n            [disabled]=\"isLoading || isAssessingUnsubmittedExams || isEvaluatingQuizExercises || !isExamOver\"\r\n        >\r\n            @if (isAssessingUnsubmittedExams) {\r\n                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n            }\r\n            <span jhiTranslate=\"artemisApp.studentExams.assessUnsubmittedStudentExams\"></span>\r\n        </button>\r\n    </div>\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { CourseManagementService } from '../../manage/course-management.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Exercise, IncludedInOverallScore, getIcon, getIconTooltip } from 'app/entities/exercise.model';\r\nimport { StatsForDashboard } from 'app/course/dashboards/stats-for-dashboard.model';\r\nimport { GuidedTourService } from 'app/guided-tour/guided-tour.service';\r\nimport { tutorAssessmentTour } from 'app/guided-tour/tours/tutor-assessment-tour';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { DueDateStat } from 'app/course/dashboards/due-date-stat.model';\r\nimport { FilterProp as TeamFilterProp } from 'app/exercises/shared/team/teams.component';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { AssessmentDashboardInformationComponent, AssessmentDashboardInformationEntry } from './assessment-dashboard-information.component';\r\nimport { TutorIssue, TutorIssueComplaintsChecker, TutorIssueRatingChecker, TutorIssueScoreChecker } from 'app/course/dashboards/assessment-dashboard/tutor-issue';\r\nimport { TutorLeaderboardElement } from 'app/shared/dashboards/tutor-leaderboard/tutor-leaderboard.model';\r\nimport { faClipboard, faHeartBroken, faSort, faTable } from '@fortawesome/free-solid-svg-icons';\r\nimport { DocumentationButtonComponent, DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ExamAssessmentButtonsComponent } from 'app/course/dashboards/assessment-dashboard/exam-assessment-buttons/exam-assessment-buttons.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { SecondCorrectionEnableButtonComponent } from 'app/exercises/shared/dashboards/tutor/second-correction-button/second-correction-enable-button.component';\r\nimport { TutorParticipationGraphComponent } from 'app/shared/dashboards/tutor-participation-graph/tutor-participation-graph.component';\r\nimport { TutorLeaderboardComponent } from 'app/shared/dashboards/tutor-leaderboard/tutor-leaderboard.component';\r\nimport { NotReleasedTagComponent } from 'app/shared/components/not-released-tag.component';\r\nimport { ArtemisTimeAgoPipe } from 'app/shared/pipes/artemis-time-ago.pipe';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-assessment-dashboard',\r\n    templateUrl: './assessment-dashboard.component.html',\r\n    styleUrls: ['./exam-assessment-buttons/exam-assessment-buttons.component.scss'],\r\n    providers: [CourseManagementService],\r\n    imports: [\r\n        RouterLink,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        ExamAssessmentButtonsComponent,\r\n        AssessmentDashboardInformationComponent,\r\n        FormsModule,\r\n        NgbTooltip,\r\n        ArtemisTranslatePipe,\r\n        SecondCorrectionEnableButtonComponent,\r\n        TutorParticipationGraphComponent,\r\n        TutorLeaderboardComponent,\r\n        NotReleasedTagComponent,\r\n        DocumentationButtonComponent,\r\n        ArtemisTimeAgoPipe,\r\n        ArtemisDatePipe,\r\n        SortDirective,\r\n        SortByDirective,\r\n    ],\r\n})\r\nexport class AssessmentDashboardComponent implements OnInit {\r\n    private courseService = inject(CourseManagementService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private alertService = inject(AlertService);\r\n    private accountService = inject(AccountService);\r\n    private route = inject(ActivatedRoute);\r\n    private guidedTourService = inject(GuidedTourService);\r\n    private sortService = inject(SortService);\r\n\r\n    readonly TeamFilterProp = TeamFilterProp;\r\n    readonly documentationType: DocumentationType = 'Assessment';\r\n\r\n    course: Course;\r\n    exam: Exam;\r\n    courseId: number;\r\n    examId: number;\r\n    exerciseGroupId: number;\r\n    allExercises: Exercise[] = [];\r\n    currentlyShownExercises: Exercise[] = [];\r\n    numberOfSubmissions = new DueDateStat();\r\n    totalNumberOfAssessments = new DueDateStat();\r\n    numberOfAssessmentsOfCorrectionRounds = [new DueDateStat()];\r\n    numberOfCorrectionRounds = 1;\r\n    numberOfTutorAssessments = 0;\r\n\r\n    complaints = new AssessmentDashboardInformationEntry(0, 0);\r\n    moreFeedbackRequests = new AssessmentDashboardInformationEntry(0, 0);\r\n    assessmentLocks = new AssessmentDashboardInformationEntry(0, 0);\r\n    ratings = new AssessmentDashboardInformationEntry(0, 0);\r\n\r\n    totalAssessmentPercentage = 0;\r\n    hideFinishedExercises = true;\r\n    hideOptional = false;\r\n\r\n    stats = new StatsForDashboard();\r\n\r\n    getIcon = getIcon;\r\n    getIconTooltip = getIconTooltip;\r\n\r\n    exercisesSortingPredicate = 'assessmentDueDate';\r\n    exercisesReverseOrder = false;\r\n\r\n    tutor: User;\r\n    exerciseForGuidedTour?: Exercise;\r\n\r\n    isExamMode = false;\r\n    isTestRun = false;\r\n\r\n    tutorIssues: TutorIssue[] = [];\r\n\r\n    isTogglingSecondCorrection: Map<number, boolean> = new Map<number, boolean>();\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faTable = faTable;\r\n    faClipboard = faClipboard;\r\n    faHeartBroken = faHeartBroken;\r\n\r\n    /**\r\n     * On init set the courseID, load all exercises and statistics for tutors and set the identity for the AccountService.\r\n     */\r\n    ngOnInit(): void {\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        this.isExamMode = !!this.examId;\r\n        if (this.isExamMode) {\r\n            this.isTestRun = this.route.snapshot.url[1]?.toString() === 'test-runs';\r\n            this.exerciseGroupId = Number(this.route.snapshot.paramMap.get('exerciseGroupId'));\r\n        }\r\n        this.loadAll();\r\n        this.accountService.identity().then((user) => (this.tutor = user!));\r\n    }\r\n\r\n    /**\r\n     * Load all exercises and statistics for tutors of this course.\r\n     * Percentages are calculated and rounded towards zero.\r\n     */\r\n    loadAll() {\r\n        if (this.isExamMode) {\r\n            this.hideFinishedExercises = false;\r\n            this.examManagementService.getExamWithInterestingExercisesForAssessmentDashboard(this.courseId, this.examId, this.isTestRun).subscribe((res: HttpResponse<Exam>) => {\r\n                this.exam = res.body!;\r\n                this.course = Course.from(this.exam.course!);\r\n                this.accountService.setAccessRightsForCourse(this.course);\r\n\r\n                // No exercises exist yet\r\n                if (!this.exam.exerciseGroups) {\r\n                    return;\r\n                }\r\n\r\n                // get all exercises\r\n                const exercises: Exercise[] = [];\r\n                this.exam.exerciseGroups!.forEach((exerciseGroup) => {\r\n                    if (exerciseGroup.exercises) {\r\n                        exercises.push(...exerciseGroup.exercises);\r\n\r\n                        // Set the exercise group since it is undefined by default here\r\n                        exerciseGroup.exercises.forEach((exercise: Exercise) => {\r\n                            exercise.exerciseGroup = exerciseGroup;\r\n                        });\r\n                    }\r\n                });\r\n\r\n                this.extractExercises(exercises);\r\n            });\r\n            this.examManagementService.getStatsForExamAssessmentDashboard(this.courseId, this.examId).subscribe({\r\n                next: (res: HttpResponse<StatsForDashboard>) => {\r\n                    this.stats = StatsForDashboard.from(res.body!);\r\n                    this.numberOfSubmissions = this.stats.numberOfSubmissions;\r\n                    this.numberOfAssessmentsOfCorrectionRounds = this.stats.numberOfAssessmentsOfCorrectionRounds;\r\n\r\n                    this.totalNumberOfAssessments = new DueDateStat();\r\n                    for (const dueDateStat of this.numberOfAssessmentsOfCorrectionRounds) {\r\n                        this.totalNumberOfAssessments.inTime += dueDateStat.inTime;\r\n                    }\r\n                    this.numberOfCorrectionRounds = this.numberOfAssessmentsOfCorrectionRounds.length;\r\n\r\n                    const tutorLeaderboardEntry = this.stats.tutorLeaderboardEntries?.find((entry) => entry.userId === this.tutor.id);\r\n                    this.sortService.sortByProperty(this.stats.tutorLeaderboardEntries, 'points', false);\r\n                    if (tutorLeaderboardEntry) {\r\n                        this.numberOfTutorAssessments = tutorLeaderboardEntry.numberOfAssessments;\r\n                        this.complaints = new AssessmentDashboardInformationEntry(\r\n                            this.stats.numberOfComplaints,\r\n                            tutorLeaderboardEntry.numberOfTutorComplaints,\r\n                            this.stats.numberOfComplaints - this.stats.numberOfOpenComplaints,\r\n                        );\r\n                    } else {\r\n                        this.numberOfTutorAssessments = 0;\r\n                        this.complaints = new AssessmentDashboardInformationEntry(\r\n                            this.stats.numberOfComplaints,\r\n                            0,\r\n                            this.stats.numberOfComplaints - this.stats.numberOfOpenComplaints,\r\n                        );\r\n                    }\r\n                    this.assessmentLocks = new AssessmentDashboardInformationEntry(this.stats.totalNumberOfAssessmentLocks, this.stats.numberOfAssessmentLocks);\r\n\r\n                    if (this.numberOfSubmissions.total > 0) {\r\n                        this.totalAssessmentPercentage = Math.floor((this.totalNumberOfAssessments.total / (this.numberOfSubmissions.total * this.numberOfCorrectionRounds)) * 100);\r\n                    }\r\n                    this.computeIssuesWithTutorPerformance();\r\n                },\r\n                error: (response: string) => this.onError(response),\r\n            });\r\n        } else {\r\n            this.courseService.getCourseWithInterestingExercisesForTutors(this.courseId).subscribe({\r\n                next: (res: HttpResponse<Course>) => {\r\n                    this.course = Course.from(res.body!);\r\n                    this.extractExercises(this.course.exercises);\r\n                },\r\n                error: (response: string) => this.onError(response),\r\n            });\r\n\r\n            this.courseService.getStatsForTutors(this.courseId).subscribe({\r\n                next: (res: HttpResponse<StatsForDashboard>) => {\r\n                    this.stats = StatsForDashboard.from(res.body!);\r\n                    this.numberOfSubmissions = this.stats.numberOfSubmissions;\r\n                    this.totalNumberOfAssessments = this.stats.totalNumberOfAssessments;\r\n                    this.numberOfAssessmentsOfCorrectionRounds = this.stats.numberOfAssessmentsOfCorrectionRounds;\r\n                    const tutorLeaderboardEntry = this.stats.tutorLeaderboardEntries?.find((entry) => entry.userId === this.tutor.id);\r\n                    this.sortService.sortByProperty(this.stats.tutorLeaderboardEntries, 'points', false);\r\n                    if (tutorLeaderboardEntry) {\r\n                        this.numberOfTutorAssessments = tutorLeaderboardEntry.numberOfAssessments;\r\n\r\n                        this.complaints = new AssessmentDashboardInformationEntry(\r\n                            this.stats.numberOfComplaints,\r\n                            tutorLeaderboardEntry.numberOfTutorComplaints,\r\n                            this.stats.numberOfComplaints - this.stats.numberOfOpenComplaints,\r\n                        );\r\n                        this.moreFeedbackRequests = new AssessmentDashboardInformationEntry(\r\n                            this.stats.numberOfMoreFeedbackRequests,\r\n                            tutorLeaderboardEntry.numberOfTutorMoreFeedbackRequests,\r\n                            this.stats.numberOfMoreFeedbackRequests - this.stats.numberOfOpenMoreFeedbackRequests,\r\n                        );\r\n                        this.ratings = new AssessmentDashboardInformationEntry(this.stats.numberOfRatings, tutorLeaderboardEntry.numberOfTutorRatings);\r\n                    } else {\r\n                        this.numberOfTutorAssessments = 0;\r\n                        this.complaints = new AssessmentDashboardInformationEntry(\r\n                            this.stats.numberOfComplaints,\r\n                            0,\r\n                            this.stats.numberOfComplaints - this.stats.numberOfOpenComplaints,\r\n                        );\r\n                        this.moreFeedbackRequests = new AssessmentDashboardInformationEntry(\r\n                            this.stats.numberOfMoreFeedbackRequests,\r\n                            0,\r\n                            this.stats.numberOfMoreFeedbackRequests - this.stats.numberOfOpenMoreFeedbackRequests,\r\n                        );\r\n                        this.ratings = new AssessmentDashboardInformationEntry(this.stats.numberOfRatings, 0);\r\n                    }\r\n                    this.assessmentLocks = new AssessmentDashboardInformationEntry(this.stats.totalNumberOfAssessmentLocks, this.stats.numberOfAssessmentLocks);\r\n\r\n                    if (this.numberOfSubmissions.total > 0) {\r\n                        this.totalAssessmentPercentage = Math.floor((this.totalNumberOfAssessments.total / this.numberOfSubmissions.total) * 100);\r\n                    }\r\n\r\n                    // Ensure that the page is loaded when the guided tour is started\r\n                    this.guidedTourService.componentPageLoaded();\r\n                    this.computeIssuesWithTutorPerformance();\r\n                },\r\n                error: (response: string) => this.onError(response),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes performance issues for every tutor based on its rating, score, and number of complaints when compared to the average tutor stats\r\n     */\r\n    computeIssuesWithTutorPerformance(): void {\r\n        // clear the tutor issues array\r\n        this.tutorIssues = [];\r\n\r\n        const complaintRatio = (entry: TutorLeaderboardElement) => {\r\n            if (entry.numberOfAssessments === 0) {\r\n                return 0;\r\n            }\r\n            return (100 * entry.numberOfTutorComplaints) / entry.numberOfAssessments;\r\n        };\r\n\r\n        const courseInformation = this.stats.tutorLeaderboardEntries.reduce(\r\n            (accumulator, entry) => {\r\n                return {\r\n                    summedAverageRatings: accumulator.summedAverageRatings + entry.averageRating,\r\n                    summedAverageScore: accumulator.summedAverageScore + entry.averageScore,\r\n                    summedComplaintRatio: accumulator.summedComplaintRatio + complaintRatio(entry),\r\n                };\r\n            },\r\n            { summedAverageRatings: 0, summedAverageScore: 0, summedComplaintRatio: 0 },\r\n        );\r\n\r\n        const numberOfTutorsWithNonZeroRatings = this.stats.tutorLeaderboardEntries.filter((entry) => entry.averageRating > 0).length;\r\n        const numberOfTutorsWithNonZeroAssessments = this.stats.tutorLeaderboardEntries.filter((entry) => entry.numberOfAssessments > 0).length;\r\n\r\n        this.stats.tutorLeaderboardEntries\r\n            // create the tutor issue checkers for rating, score and complaints\r\n            .flatMap((entry) => [\r\n                new TutorIssueRatingChecker(\r\n                    entry.numberOfTutorRatings,\r\n                    entry.averageRating,\r\n                    courseInformation.summedAverageRatings / numberOfTutorsWithNonZeroRatings,\r\n                    entry.name,\r\n                    entry.userId,\r\n                ),\r\n                new TutorIssueScoreChecker(\r\n                    entry.numberOfAssessments,\r\n                    entry.averageScore,\r\n                    courseInformation.summedAverageScore / numberOfTutorsWithNonZeroAssessments,\r\n                    entry.name,\r\n                    entry.userId,\r\n                ),\r\n                new TutorIssueComplaintsChecker(\r\n                    entry.numberOfTutorComplaints,\r\n                    complaintRatio(entry),\r\n                    courseInformation.summedComplaintRatio / numberOfTutorsWithNonZeroAssessments,\r\n                    entry.name,\r\n                    entry.userId,\r\n                ),\r\n            ])\r\n            // run every checker to see if the tutor value is within the allowed threshold\r\n            .filter((checker) => checker.isPerformanceIssue)\r\n            // create tutor issue\r\n            .map((checker) => checker.toIssue())\r\n            .forEach((issue) => {\r\n                // mark tutor with performance issues\r\n                const tutorEntry = this.stats.tutorLeaderboardEntries.find((entry) => entry.userId === issue.tutorId);\r\n                tutorEntry!.hasIssuesWithPerformance = true;\r\n\r\n                // add issue to the issues list\r\n                this.tutorIssues.push(issue);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Divides exercises into finished and unfinished exercises.\r\n     * @param exercises - the exercises that should get filtered\r\n     */\r\n    private extractExercises(exercises?: Exercise[]) {\r\n        if (exercises && exercises.length > 0) {\r\n            this.allExercises = exercises;\r\n            this.currentlyShownExercises = this.getUnfinishedExercises(exercises);\r\n            // sort exercises by type to get a better overview in the dashboard\r\n            this.sortService.sortByProperty(this.currentlyShownExercises, 'type', true);\r\n            this.exerciseForGuidedTour = this.guidedTourService.enableTourForCourseExerciseComponent(this.course, tutorAssessmentTour, false);\r\n            this.initIsTogglingSecondCorrection();\r\n            this.updateExercises();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the map that contains the current toggling state (false) for each exercise.\r\n     */\r\n    private initIsTogglingSecondCorrection() {\r\n        this.allExercises.forEach((exercise) => {\r\n            this.isTogglingSecondCorrection.set(exercise.id!, false);\r\n        });\r\n    }\r\n\r\n    private getUnfinishedExercises(exercises?: Exercise[]) {\r\n        const filteredExercises = exercises?.filter(\r\n            (exercise) =>\r\n                (!exercise.allowComplaintsForAutomaticAssessments && this.hasUnfinishedAssessments(exercise)) ||\r\n                exercise.numberOfOpenComplaints !== 0 ||\r\n                exercise.numberOfOpenMoreFeedbackRequests !== 0,\r\n        );\r\n\r\n        return filteredExercises ? filteredExercises : [];\r\n    }\r\n\r\n    private hasUnfinishedAssessments(exercise: Exercise): boolean {\r\n        return (\r\n            exercise.numberOfAssessmentsOfCorrectionRounds?.map((round) => round.inTime !== exercise.numberOfSubmissions?.inTime).reduce((acc, cur) => acc || cur) ||\r\n            exercise.totalNumberOfAssessments?.inTime !== exercise.numberOfSubmissions?.inTime\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Toggle the option to show finished exercises.\r\n     */\r\n    triggerFinishedExercises() {\r\n        this.hideFinishedExercises = !this.hideFinishedExercises;\r\n        this.updateExercises();\r\n    }\r\n\r\n    /**\r\n     * Toggle the option to hide optional exercises.\r\n     */\r\n    triggerOptionalExercises() {\r\n        this.hideOptional = !this.hideOptional;\r\n        this.updateExercises();\r\n    }\r\n\r\n    /**\r\n     * update the exercise array based on the option show finished exercises\r\n     */\r\n    updateExercises() {\r\n        this.currentlyShownExercises = this.hideFinishedExercises ? this.getUnfinishedExercises(this.allExercises) : this.allExercises;\r\n        if (this.hideOptional) {\r\n            this.currentlyShownExercises = this.currentlyShownExercises.filter((exercise) => exercise.includedInOverallScore !== IncludedInOverallScore.NOT_INCLUDED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pass on an error to the browser console and the alertService.\r\n     * @param error\r\n     */\r\n    private onError(error: string) {\r\n        this.alertService.error(error);\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.currentlyShownExercises, this.exercisesSortingPredicate, this.exercisesReverseOrder);\r\n    }\r\n\r\n    toggleSecondCorrection(exerciseId: number) {\r\n        const currentExercise = this.currentlyShownExercises.find((exercise) => exercise.id === exerciseId)!;\r\n        this.isTogglingSecondCorrection.set(currentExercise.id!, true);\r\n        const index = this.currentlyShownExercises.indexOf(currentExercise);\r\n        this.exerciseService.toggleSecondCorrection(exerciseId).subscribe({\r\n            next: (res: boolean) => {\r\n                this.currentlyShownExercises[index].secondCorrectionEnabled = !this.currentlyShownExercises[index].secondCorrectionEnabled;\r\n                currentExercise!.secondCorrectionEnabled = res as boolean;\r\n                this.isTogglingSecondCorrection.set(currentExercise.id!, false);\r\n            },\r\n            error: (err: string) => {\r\n                this.onError(err);\r\n            },\r\n        });\r\n    }\r\n\r\n    getAssessmentDashboardLinkForExercise(exercise: Exercise): string[] {\r\n        if (this.isExamMode) {\r\n            return [\r\n                '/course-management',\r\n                this.courseId.toString(),\r\n                'exams',\r\n                this.examId.toString(),\r\n                this.isTestRun ? 'test-assessment-dashboard' : 'assessment-dashboard',\r\n                exercise.id!.toString(),\r\n            ];\r\n        } else {\r\n            return ['/course-management', this.courseId.toString(), 'assessment-dashboard', exercise.id!.toString()];\r\n        }\r\n    }\r\n\r\n    asQuizExercise(exercise: Exercise): QuizExercise {\r\n        return exercise as QuizExercise;\r\n    }\r\n}\r\n", "<div class=\"course-info-bar mt-0\">\r\n    <div class=\"row align-items-center justify-content-end\">\r\n        <div class=\"col-12 col-lg-7 general-info\">\r\n            <div class=\"d-flex align-items-center\">\r\n                @if (!isExamMode) {\r\n                    <h2>{{ 'artemisApp.assessmentDashboard.pageHeader' | artemisTranslate }} {{ course?.title }}</h2>\r\n                }\r\n                @if (isExamMode) {\r\n                    <h2>\r\n                        {{\r\n                            !isTestRun\r\n                                ? ('artemisApp.assessmentDashboard.pageHeaderExam' | artemisTranslate)\r\n                                : ('artemisApp.assessmentDashboard.pageHeaderExamTestRun' | artemisTranslate)\r\n                        }}\r\n                        {{ exam?.title }}\r\n                    </h2>\r\n                }\r\n                <jhi-documentation-button [type]=\"documentationType\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"col-12 col-lg-5\">\r\n            @if (!isExamMode) {\r\n                <div class=\"d-flex justify-content-lg-end\">\r\n                    @if (course && course.isAtLeastInstructor) {\r\n                        <a [routerLink]=\"['/course-management', course.id, 'scores']\" class=\"tab-item btn btn-info btn-md\">\r\n                            <fa-icon [icon]=\"faTable\" />\r\n                            <span jhiTranslate=\"entity.action.scores\"></span>\r\n                        </a>\r\n                    }\r\n                    @if (course?.isAtLeastInstructor) {\r\n                        <a [routerLink]=\"['/course-management', course.id, 'grading-system']\" class=\"tab-item btn btn-info btn-md ms-1 me-1\">\r\n                            <fa-icon [icon]=\"faClipboard\" /> <span jhiTranslate=\"artemisApp.course.gradingSystem\"></span>\r\n                        </a>\r\n                        <a [routerLink]=\"['/course-management', course.id, 'plagiarism-cases']\" class=\"tab-item btn btn-info btn-md\">\r\n                            <fa-icon [icon]=\"faHeartBroken\" />\r\n                            <span jhiTranslate=\"artemisApp.plagiarism.cases.plagiarismCases\"></span>\r\n                        </a>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    @if (isExamMode && !isTestRun) {\r\n        <div class=\"row justify-content-between\">\r\n            <div class=\"col-md-8\">\r\n                <h4>\r\n                    <span class=\"me-2\">{{ 'artemisApp.exam.endDate' | artemisTranslate }}: {{ exam?.endDate | artemisDate }}</span>\r\n                </h4>\r\n                <h4>\r\n                    <span class=\"me-2\">{{ 'artemisApp.exam.publishResultsDate' | artemisTranslate }}: {{ exam?.publishResultsDate | artemisDate }}</span>\r\n                </h4>\r\n            </div>\r\n            @if (course?.isAtLeastInstructor) {\r\n                <jhi-exam-assessment-buttons class=\"assessment-button-row\" />\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n@if (isTestRun && exam?.numberOfCorrectionRoundsInExam && exam!.numberOfCorrectionRoundsInExam! > 1) {\r\n    <div style=\"margin-top: 1em\" class=\"alert alert-warning\" jhiTranslate=\"artemisApp.examManagement.testRun.secondCorrectionHint\"></div>\r\n}\r\n@if (course) {\r\n    <div>\r\n        <div id=\"assessment-statistics\" class=\"guided-tour-assessment-stats\">\r\n            <div class=\"container-fluid\">\r\n                <jhi-assessment-dashboard-information\r\n                    [isExamMode]=\"isExamMode\"\r\n                    [feedbackRequestEnabled]=\"course.requestMoreFeedbackEnabled!\"\r\n                    [complaintsEnabled]=\"course.complaintsEnabled!\"\r\n                    [numberOfTutorAssessments]=\"numberOfTutorAssessments\"\r\n                    [course]=\"course\"\r\n                    [tutorId]=\"tutor.id!\"\r\n                    [examId]=\"examId\"\r\n                    [totalNumberOfAssessments]=\"totalNumberOfAssessments\"\r\n                    [numberOfSubmissions]=\"numberOfSubmissions\"\r\n                    [numberOfCorrectionRounds]=\"numberOfCorrectionRounds\"\r\n                    [totalAssessmentPercentage]=\"totalAssessmentPercentage\"\r\n                    [numberOfAssessmentsOfCorrectionRounds]=\"numberOfAssessmentsOfCorrectionRounds\"\r\n                    [complaints]=\"complaints\"\r\n                    [moreFeedbackRequests]=\"moreFeedbackRequests\"\r\n                    [assessmentLocks]=\"assessmentLocks\"\r\n                    [ratings]=\"ratings\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div class=\"container-fluid mt-4\">\r\n            <h4 jhiTranslate=\"artemisApp.assessmentDashboard.exerciseTable.title\"></h4>\r\n            @if (!isTestRun) {\r\n                <div class=\"guided-tour-form-check col-6 align-baseline\">\r\n                    <div class=\"form-check form-check-inline\">\r\n                        <input\r\n                            class=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            name=\"hideFinishedExercise\"\r\n                            id=\"field_hideFinishedExercise\"\r\n                            [ngModel]=\"hideFinishedExercises\"\r\n                            (ngModelChange)=\"triggerFinishedExercises()\"\r\n                        />\r\n                        <label class=\"form-check-label\" for=\"field_hideFinishedExercise\" jhiTranslate=\"artemisApp.assessmentDashboard.hideFinishedExercises\"></label>\r\n                    </div>\r\n                    <div class=\"form-check form-check-inline\">\r\n                        <input\r\n                            class=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            name=\"hideOptional\"\r\n                            id=\"field_hideOptional\"\r\n                            [ngModel]=\"hideOptional\"\r\n                            (ngModelChange)=\"triggerOptionalExercises()\"\r\n                        />\r\n                        <label class=\"form-check-label\" for=\"field_hideOptional\" jhiTranslate=\"artemisApp.assessmentDashboard.hideOptional\"></label>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div class=\"row table-responsive\">\r\n                <table class=\"table exercise-table guided-tour-exercise-table\">\r\n                    <thead>\r\n                        <tr jhiSort [(predicate)]=\"exercisesSortingPredicate\" [(ascending)]=\"exercisesReverseOrder\" (sortChange)=\"sortRows()\">\r\n                            <th jhiSortBy=\"type\">\r\n                                <a class=\"th-link\" jhiTranslate=\"artemisApp.assessmentDashboard.exerciseType\"></a>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"title\">\r\n                                <a class=\"th-link\" jhiTranslate=\"artemisApp.assessmentDashboard.exercise\"></a>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            @if (!isTestRun) {\r\n                                <th jhiTranslate=\"artemisApp.assessmentDashboard.yourStatus\"></th>\r\n                            }\r\n                            <th jhiSortBy=\"averageRating\">\r\n                                <a class=\"th-link\" jhiTranslate=\"artemisApp.assessmentDashboard.exerciseAverageRating\"></a>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            @if (!isExamMode) {\r\n                                <th jhiSortBy=\"dueDate\">\r\n                                    <a class=\"th-link\" jhiTranslate=\"artemisApp.assessmentDashboard.exerciseDueDate\"></a>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                            @if (!isExamMode) {\r\n                                <th jhiSortBy=\"assessmentDueDate\">\r\n                                    <a class=\"th-link\" jhiTranslate=\"artemisApp.assessmentDashboard.assessmentsDueDate\"></a>\r\n                                    <fa-icon [icon]=\"faSort\" />\r\n                                </th>\r\n                            }\r\n                            <th jhiTranslate=\"artemisApp.assessmentDashboard.actions\"></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (exercise of currentlyShownExercises; track exercise) {\r\n                            <tr>\r\n                                <td>\r\n                                    <fa-icon [icon]=\"getIcon(exercise.type)\" placement=\"right auto\" [ngbTooltip]=\"getIconTooltip(exercise.type) | artemisTranslate\" />\r\n                                </td>\r\n                                <td>\r\n                                    <span>{{ exercise.title }}</span>\r\n                                    <jhi-not-released-tag [exercise]=\"exercise\" />\r\n                                    <span class=\"badge bg-success\" [hidden]=\"!asQuizExercise(exercise).isActiveQuiz\">Live</span>\r\n                                </td>\r\n                                @if (!isTestRun && exercise.tutorParticipations && exercise.tutorParticipations![0]) {\r\n                                    <td>\r\n                                        <jhi-tutor-participation-graph\r\n                                            [exercise]=\"exercise\"\r\n                                            [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                            [tutorParticipation]=\"exercise.tutorParticipations![0]\"\r\n                                            [numberOfSubmissions]=\"exercise.numberOfSubmissions\"\r\n                                            [totalNumberOfAssessments]=\"exercise.totalNumberOfAssessments\"\r\n                                            [numberOfComplaints]=\"exercise.numberOfComplaints || 0\"\r\n                                            [numberOfOpenComplaints]=\"exercise.numberOfOpenComplaints || 0\"\r\n                                            [numberOfMoreFeedbackRequests]=\"exercise.numberOfMoreFeedbackRequests || 0\"\r\n                                            [numberOfOpenMoreFeedbackRequests]=\"exercise.numberOfOpenMoreFeedbackRequests || 0\"\r\n                                            [numberOfAssessmentsOfCorrectionRounds]=\"exercise.numberOfAssessmentsOfCorrectionRounds\"\r\n                                        />\r\n                                    </td>\r\n                                }\r\n                                <td>\r\n                                    @if (exercise.averageRating !== undefined) {\r\n                                        <span> {{ exercise.averageRating.toFixed(1) }} ⭐️ ({{ exercise.numberOfRatings }}) </span>\r\n                                    }\r\n                                    @if (exercise.averageRating === undefined) {\r\n                                        <span> n.a. </span>\r\n                                    }\r\n                                </td>\r\n                                @if (!isExamMode) {\r\n                                    <td>\r\n                                        <span placement=\"right auto\" [hidden]=\"!exercise.dueDate\" ngbTooltip=\"{{ exercise.dueDate | artemisDate }}\">\r\n                                            {{ exercise.dueDate | artemisTimeAgo }}\r\n                                        </span>\r\n                                    </td>\r\n                                }\r\n                                @if (!isExamMode) {\r\n                                    <td>\r\n                                        <span placement=\"right auto\" [hidden]=\"!exercise.assessmentDueDate\" ngbTooltip=\"{{ exercise.assessmentDueDate | artemisDate }}\">\r\n                                            {{ exercise.assessmentDueDate | artemisTimeAgo }}\r\n                                        </span>\r\n                                    </td>\r\n                                }\r\n                                <td>\r\n                                    @if (!exercise.teamMode) {\r\n                                        <ng-container>\r\n                                            <a\r\n                                                id=\"open-exercise-dashboard\"\r\n                                                [routerLink]=\"getAssessmentDashboardLinkForExercise(exercise)\"\r\n                                                class=\"btn btn-info btn-sm me-1 mb-1\"\r\n                                                [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                            >\r\n                                                <span class=\"d-md-inline\" jhiTranslate=\"entity.action.exerciseDashboard\"></span>\r\n                                            </a>\r\n                                        </ng-container>\r\n                                    } @else {\r\n                                        <a\r\n                                            [routerLink]=\"['/course-management', courseId, 'exercises', exercise.id, 'teams']\"\r\n                                            [queryParams]=\"{ filter: TeamFilterProp.OWN }\"\r\n                                            class=\"btn btn-info btn-sm me-1 mb-1\"\r\n                                            [class.guided-tour]=\"exercise === exerciseForGuidedTour\"\r\n                                        >\r\n                                            <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.assessmentDashboard.exerciseTeams\"></span>\r\n                                        </a>\r\n                                    }\r\n                                    @if (\r\n                                        course?.isAtLeastInstructor && isExamMode && !isTestRun && exam?.numberOfCorrectionRoundsInExam && exam!.numberOfCorrectionRoundsInExam! > 1\r\n                                    ) {\r\n                                        <ng-container class=\"col-lg-3 col-md-6 col-sm-6\">\r\n                                            <jhi-second-correction-enable-button\r\n                                                class=\"me-1 mb-1\"\r\n                                                data-testid=\"toggle-second-correction\"\r\n                                                (ngModelChange)=\"toggleSecondCorrection(exercise.id!)\"\r\n                                                [secondCorrectionEnabled]=\"exercise.secondCorrectionEnabled\"\r\n                                                [togglingSecondCorrectionButton]=\"isTogglingSecondCorrection.get(exercise.id!)!\"\r\n                                            />\r\n                                        </ng-container>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        @if (course && course.isAtLeastInstructor && tutorIssues.length > 0) {\r\n            <div class=\"container-fluid mt-4\">\r\n                <h4 jhiTranslate=\"artemisApp.assessmentDashboard.tutorPerformanceIssues.title\"></h4>\r\n                @for (issue of tutorIssues; track issue) {\r\n                    <ul>\r\n                        @if (issue.averageTutorValue < issue.allowedRange.lowerBound) {\r\n                            <li>\r\n                                {{\r\n                                    issue.translationKey + '.below'\r\n                                        | artemisTranslate\r\n                                            : {\r\n                                                  tutorName: issue.tutorName,\r\n                                                  numberOfTutorItems: issue.numberOfTutorItems,\r\n                                                  averageTutorValue: issue.averageTutorValue.toFixed(1),\r\n                                                  threshold: issue.allowedRange.lowerBound.toFixed(1),\r\n                                              }\r\n                                }}\r\n                            </li>\r\n                        }\r\n                        @if (issue.averageTutorValue > issue.allowedRange.upperBound) {\r\n                            <li>\r\n                                {{\r\n                                    issue.translationKey + '.above'\r\n                                        | artemisTranslate\r\n                                            : {\r\n                                                  tutorName: issue.tutorName,\r\n                                                  numberOfTutorItems: issue.numberOfTutorItems,\r\n                                                  averageTutorValue: issue.averageTutorValue.toFixed(1),\r\n                                                  threshold: issue.allowedRange.upperBound.toFixed(1),\r\n                                              }\r\n                                }}\r\n                            </li>\r\n                        }\r\n                    </ul>\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"container-fluid pt-4\">\r\n            @if (!isExamMode) {\r\n                <h4 jhiTranslate=\"artemisApp.assessmentDashboard.tutorLeaderboard.courseTitle\"></h4>\r\n            }\r\n            @if (isExamMode) {\r\n                <h4 jhiTranslate=\"artemisApp.assessmentDashboard.tutorLeaderboard.examTitle\"></h4>\r\n            }\r\n            <jhi-tutor-leaderboard [exam]=\"exam\" [tutorsData]=\"stats.tutorLeaderboardEntries\" [course]=\"course\" />\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["TutorIssue", "tutorId", "tutorName", "numberOfTutorItems", "averageTutorValue", "allowedRange", "translationKey", "constructor", "TutorValueChecker", "averageCourseValue", "round", "isPerformanceIssue", "lowerBound", "upperBound", "twentyPercent", "Range", "toIssue", "TutorIssueRatingChecker", "MIN_RATING", "MAX_RATING", "TutorIssueScoreChecker", "TutorIssueComplaintsChecker", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "evaluateQuizExercises", "\u0275\u0275template", "ExamAssessmentButtonsComponent_Conditional_0_Conditional_15_Template", "assessUnsubmittedExamModelingAndTextParticipations", "ExamAssessmentButtonsComponent_Conditional_0_Conditional_21_Template", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "exam", "id", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "courseId", "examId", "faClipboard", "isLoading", "isAssessingUnsubmittedExams", "isEvaluatingQuizExercises", "isExamOver", "\u0275\u0275conditional", "ExamAssessmentButtonsComponent", "route", "inject", "ActivatedRoute", "examManagementService", "ExamManagementService", "studentExamService", "StudentExamService", "courseService", "CourseManagementService", "alertService", "AlertService", "accountService", "AccountService", "artemisTranslatePipe", "ArtemisTranslatePipe", "studentExams", "course", "paramSub", "longestWorkingTime", "isAdmin", "ngOnInit", "Number", "snapshot", "paramMap", "get", "loadAll", "params", "subscribe", "find", "courseResponse", "body", "workingTimeObservable", "getLongestWorkingTimeForExam", "pipe", "tap", "value", "calculateIsExamOver", "examObservable", "examResponse", "forkJoin", "next", "res", "success", "number", "error", "err", "handleError", "translationString", "errorDetail", "errorKey", "transform", "message", "onError", "endDate", "dayjs", "startDate", "add", "gracePeriod", "isBefore", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "ExamAssessmentButtonsComponent_Conditional_0_Template", "isAtLeastInstructor", "RouterLink", "FaIconComponent", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "ctx_r0", "course", "title", "isTestRun", "exam", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "id", "faTable", "_c1", "faClipboard", "_c2", "faHeartBroken", "\u0275\u0275template", "AssessmentDashboardComponent_Conditional_16_Conditional_3_Template", "AssessmentDashboardComponent_Conditional_16_Conditional_4_Template", "\u0275\u0275conditional", "isAtLeastInstructor", "AssessmentDashboardComponent_Conditional_19_Conditional_22_Template", "endDate", "publishResultsDate", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "triggerFinishedExercises", "triggerOptionalExercises", "hideFinishedExercises", "hideOptional", "faSort", "\u0275\u0275classProp", "exercise_r4", "exerciseForGuidedTour", "tutorParticipations", "numberOfSubmissions", "totalNumberOfAssessments", "numberOfComplaints", "numberOfOpenComplaints", "numberOfMoreFeedbackRequests", "numberOfOpenMoreFeedbackRequests", "numberOfAssessmentsOfCorrectionRounds", "averageRating", "toFixed", "numberOfRatings", "\u0275\u0275propertyInterpolate", "dueDate", "\u0275\u0275textInterpolate1", "assessmentDueDate", "\u0275\u0275elementContainerStart", "getAssessmentDashboardLinkForExercise", "\u0275\u0275pureFunction2", "_c3", "courseId", "_c4", "TeamFilterProp", "OWN", "_r5", "$implicit", "toggleSecondCorrection", "secondCorrectionEnabled", "isTogglingSecondCorrection", "get", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_20_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_23_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_24_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_26_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_27_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_30_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_31_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Conditional_32_Template", "getIcon", "type", "getIconTooltip", "\u0275\u0275textInterpolate", "asQuizExercise", "isActiveQuiz", "undefined", "isExamMode", "teamMode", "numberOfCorrectionRoundsInExam", "\u0275\u0275pipeBind2", "issue_r6", "translationKey", "\u0275\u0275pureFunction4", "_c5", "tutorName", "numberOfTutorItems", "averageTutorValue", "allowedRange", "lowerBound", "upperBound", "AssessmentDashboardComponent_Conditional_22_Conditional_60_For_6_Conditional_3_Template", "AssessmentDashboardComponent_Conditional_22_Conditional_60_For_6_Conditional_4_Template", "\u0275\u0275repeaterCreate", "AssessmentDashboardComponent_Conditional_22_Conditional_60_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "tutorIssues", "AssessmentDashboardComponent_Conditional_22_Conditional_15_Template", "\u0275\u0275twoWayListener", "$event", "_r2", "i0", "\u0275\u0275twoWayBindingSet", "exercisesSortingPredicate", "exercisesReverseOrder", "sortRows", "AssessmentDashboardComponent_Conditional_22_Conditional_38_Template", "AssessmentDashboardComponent_Conditional_22_Conditional_46_Template", "AssessmentDashboardComponent_Conditional_22_Conditional_47_Template", "AssessmentDashboardComponent_Conditional_22_For_55_Template", "AssessmentDashboardComponent_Conditional_22_Conditional_60_Template", "AssessmentDashboardComponent_Conditional_22_Conditional_63_Template", "AssessmentDashboardComponent_Conditional_22_Conditional_64_Template", "requestMoreFeedbackEnabled", "complaintsEnabled", "numberOfTutorAssessments", "tutor", "examId", "numberOfCorrectionRounds", "totalAssessmentPercentage", "complaints", "moreFeedbackRequests", "assessmentLocks", "ratings", "\u0275\u0275twoWayProperty", "currentlyShownExercises", "length", "stats", "tutorLeaderboardEntries", "AssessmentDashboardComponent", "courseService", "inject", "CourseManagementService", "exerciseService", "ExerciseService", "examManagementService", "ExamManagementService", "alertService", "AlertService", "accountService", "AccountService", "route", "ActivatedRoute", "guidedTourService", "GuidedTourService", "sortService", "SortService", "documentationType", "exerciseGroupId", "allExercises", "DueDateStat", "AssessmentDashboardInformationEntry", "StatsForDashboard", "Map", "ngOnInit", "Number", "snapshot", "paramMap", "url", "toString", "loadAll", "identity", "then", "user", "getExamWithInterestingExercisesForAssessmentDashboard", "subscribe", "res", "body", "Course", "from", "setAccessRightsForCourse", "exerciseGroups", "exercises", "forEach", "exerciseGroup", "push", "exercise", "extractExercises", "getStatsForExamAssessmentDashboard", "next", "dueDateStat", "inTime", "tutorLeaderboardEntry", "find", "entry", "userId", "sortByProperty", "numberOfAssessments", "numberOfTutorComplaints", "totalNumberOfAssessmentLocks", "numberOfAssessmentLocks", "total", "Math", "floor", "computeIssuesWithTutorPerformance", "error", "response", "onError", "getCourseWithInterestingExercisesForTutors", "getStatsForTutors", "numberOfTutorMoreFeedbackRequests", "numberOfTutorRatings", "componentPageLoaded", "complaintRatio", "courseInformation", "reduce", "accumulator", "summedAverageRatings", "summedAverageScore", "averageScore", "summedComplaintRatio", "numberOfTutorsWithNonZeroRatings", "filter", "numberOfTutorsWithNonZeroAssessments", "flatMap", "TutorIssueRatingChecker", "name", "TutorIssueScoreChecker", "TutorIssueComplaintsChecker", "checker", "isPerformanceIssue", "map", "toIssue", "issue", "tutorEntry", "tutorId", "hasIssuesWithPerformance", "getUnfinishedExercises", "enableTourForCourseExerciseComponent", "tutorAssessmentTour", "initIsTogglingSecondCorrection", "updateExercises", "set", "filteredExercises", "allowComplaintsForAutomaticAssessments", "hasUnfinishedAssessments", "round", "acc", "cur", "includedInOverallScore", "IncludedInOverallScore", "NOT_INCLUDED", "exerciseId", "currentExercise", "index", "indexOf", "err", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "AssessmentDashboardComponent_Conditional_8_Template", "AssessmentDashboardComponent_Conditional_9_Template", "AssessmentDashboardComponent_Conditional_16_Template", "AssessmentDashboardComponent_Conditional_19_Template", "AssessmentDashboardComponent_Conditional_21_Template", "AssessmentDashboardComponent_Conditional_22_Template", "RouterLink", "FaIconComponent", "TranslateDirective", "ExamAssessmentButtonsComponent", "AssessmentDashboardInformationComponent", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "NgbTooltip", "ArtemisTranslatePipe", "SecondCorrectionEnableButtonComponent", "TutorParticipationGraphComponent", "TutorLeaderboardComponent", "NotReleasedTagComponent", "DocumentationButtonComponent", "ArtemisTimeAgoPipe", "ArtemisDatePipe", "SortDirective", "SortByDirective", "styles"]
}
