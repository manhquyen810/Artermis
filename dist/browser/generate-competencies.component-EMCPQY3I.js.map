{
  "version": 3,
  "sources": ["src/main/webapp/app/iris/iris-logo-button/iris-logo-button.component.ts", "src/main/webapp/app/iris/iris-logo-button/iris-logo-button.component.html", "src/main/webapp/app/course/competencies/generate-competencies/course-description-form.component.ts", "src/main/webapp/app/course/competencies/generate-competencies/course-description-form.component.html", "src/main/webapp/app/course/competencies/generate-competencies/competency-recommendation-detail.component.ts", "src/main/webapp/app/course/competencies/generate-competencies/competency-recommendation-detail.component.html", "src/main/webapp/app/course/competencies/generate-competencies/generate-competencies.component.ts", "src/main/webapp/app/course/competencies/generate-competencies/generate-competencies.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { IrisLogoSize } from 'app/iris/iris-logo/iris-logo.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FeatureToggleDirective } from 'app/shared/feature-toggle/feature-toggle.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { IrisLogoComponent } from '../iris-logo/iris-logo.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-iris-logo-button',\r\n    templateUrl: './iris-logo-button.component.html',\r\n    imports: [NgClass, NgbTooltip, FeatureToggleDirective, FaIconComponent, IrisLogoComponent, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class IrisLogoButtonComponent {\r\n    @Input() btnType = ButtonType.PRIMARY;\r\n    @Input() btnSize = ButtonSize.MEDIUM;\r\n    // Translation placeholders, will be translated in the component.\r\n    @Input() title: string;\r\n    @Input() tooltip: string;\r\n\r\n    @Input() disabled = false;\r\n    @Input() isLoading = false;\r\n    @Input() featureToggle: FeatureToggle | FeatureToggle[]; // Disable by feature toggle.\r\n\r\n    @Input() shouldSubmit = true;\r\n\r\n    @Output() onClick = new EventEmitter<MouseEvent>();\r\n\r\n    // Icons\r\n    faCircleNotch = faCircleNotch;\r\n    SMALL = IrisLogoSize.SMALL;\r\n}\r\n", "<button\r\n    [ngClass]=\"['jhi-btn', 'btn', btnType, btnSize]\"\r\n    [type]=\"shouldSubmit ? 'submit' : 'button'\"\r\n    ngbTooltip=\"{{ tooltip | artemisTranslate }}\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [jhiFeatureToggle]=\"featureToggle\"\r\n    [overwriteDisabled]=\"disabled || isLoading\"\r\n>\r\n    @if (isLoading) {\r\n        <fa-icon class=\"jhi-btn__loading\" [icon]=\"faCircleNotch\" animation=\"spin\" size=\"sm\" />\r\n    } @else {\r\n        <jhi-iris-logo [size]=\"SMALL\" />\r\n    }\r\n    @if (title) {\r\n        <span class=\"jhi-btn__title\" [class.ms-1]=\"true || isLoading\" [jhiTranslate]=\"title\"></span>\r\n    }\r\n</button>\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { IrisLogoButtonComponent } from 'app/iris/iris-logo-button/iris-logo-button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-description-form',\r\n    templateUrl: './course-description-form.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective, FaIconComponent, NgbTooltip, IrisLogoButtonComponent, ArtemisTranslatePipe],\r\n})\r\nexport class CourseDescriptionFormComponent implements OnInit {\r\n    private formBuilder = inject(FormBuilder);\r\n\r\n    @Input() isLoading = false;\r\n    @Input() placeholder = '';\r\n    @Output() formSubmitted: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    form: FormGroup<{ courseDescription: FormControl<string | null> }>;\r\n    hasBeenSubmitted = false;\r\n\r\n    //icons\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    //other constants\r\n    protected readonly DESCRIPTION_MAX = 10000;\r\n    protected readonly DESCRIPTION_MIN = 100;\r\n    protected readonly ButtonType = ButtonType;\r\n\r\n    ngOnInit(): void {\r\n        this.form = this.formBuilder.group({\r\n            courseDescription: [this.placeholder, [Validators.required, Validators.minLength(this.DESCRIPTION_MIN), Validators.maxLength(this.DESCRIPTION_MAX)]],\r\n        });\r\n    }\r\n\r\n    setCourseDescription(description: string) {\r\n        this.form.controls.courseDescription.setValue(description);\r\n    }\r\n\r\n    /**\r\n     * Sends event to parent to handle submission\r\n     */\r\n    submitForm() {\r\n        this.formSubmitted.emit(this.form.value.courseDescription ?? '');\r\n        //save that form has been submitted to change look of the submit button\r\n        this.hasBeenSubmitted = true;\r\n    }\r\n\r\n    /**\r\n     * Only allows submitting if no form controls have validation errors\r\n     */\r\n    get isSubmitPossible() {\r\n        return !this.form.invalid;\r\n    }\r\n\r\n    get courseDescriptionControl() {\r\n        return this.form.controls.courseDescription;\r\n    }\r\n}\r\n", "<form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\r\n    <div class=\"d-flex align-items-center\">\r\n        <label class=\"me-1 form-control-label\" jhiTranslate=\"artemisApp.competency.generate.courseDescription.title\" for=\"courseDescription\"></label>\r\n        <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary\" ngbTooltip=\"{{ 'artemisApp.competency.generate.courseDescription.infoTooltip' | artemisTranslate }}\" />\r\n    </div>\r\n    <div class=\"form-group mb-2\">\r\n        <textarea\r\n            class=\"form-control\"\r\n            id=\"courseDescription\"\r\n            rows=\"10\"\r\n            formControlName=\"courseDescription\"\r\n            [placeholder]=\"'artemisApp.competency.generate.courseDescription.placeholder' | artemisTranslate\"\r\n        ></textarea>\r\n        @if (courseDescriptionControl.invalid && (courseDescriptionControl.dirty || courseDescriptionControl.touched)) {\r\n            <div class=\"alert alert-danger mb-0\">\r\n                @if (courseDescriptionControl.errors?.required) {\r\n                    <div jhiTranslate=\"artemisApp.competency.generate.courseDescription.requiredValidationError\"></div>\r\n                }\r\n                @if (courseDescriptionControl.errors?.minlength) {\r\n                    <div jhiTranslate=\"artemisApp.competency.generate.courseDescription.minlengthValidationError\" [translateValues]=\"{ min: DESCRIPTION_MIN }\"></div>\r\n                }\r\n                @if (courseDescriptionControl.errors?.maxlength) {\r\n                    <div jhiTranslate=\"artemisApp.competency.generate.courseDescription.maxlengthValidationError\" [translateValues]=\"{ max: DESCRIPTION_MAX }\"></div>\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n    <jhi-iris-logo-button\r\n        id=\"generateButton\"\r\n        [btnType]=\"ButtonType.PRIMARY_OUTLINE\"\r\n        [title]=\"!hasBeenSubmitted ? 'entity.action.generate' : 'artemisApp.competency.generate.courseDescription.regenerate'\"\r\n        [tooltip]=\"!hasBeenSubmitted ? '' : 'artemisApp.competency.generate.courseDescription.regenerateTooltip'\"\r\n        [disabled]=\"!isSubmitPossible\"\r\n        [isLoading]=\"isLoading\"\r\n    />\r\n</form>\r\n", "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CourseCompetencyValidators } from 'app/entities/competency.model';\r\nimport { faChevronRight, faPencilAlt, faSave, faTrash, faWrench } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CompetencyFormControlsWithViewed } from 'app/course/competencies/generate-competencies/generate-competencies.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { TaxonomySelectComponent } from '../taxonomy-select/taxonomy-select.component';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-competency-recommendation',\r\n    templateUrl: './competency-recommendation-detail.component.html',\r\n    styleUrls: ['competency-recommendation-detail.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        ButtonComponent,\r\n        NgbCollapse,\r\n        MarkdownEditorMonacoComponent,\r\n        TaxonomySelectComponent,\r\n        HtmlForMarkdownPipe,\r\n    ],\r\n})\r\nexport class CompetencyRecommendationDetailComponent implements OnInit {\r\n    @Input({ required: true }) form: FormGroup<CompetencyFormControlsWithViewed>;\r\n    @Input({ required: true }) index: number;\r\n    @Input() isCollapsed = true;\r\n    isInEditMode = false;\r\n\r\n    @Output() onDelete: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    //Icons\r\n    protected readonly faChevronRight = faChevronRight;\r\n    protected readonly faTrash = faTrash;\r\n    protected readonly faWrench = faWrench;\r\n    protected readonly faSave = faSave;\r\n    protected readonly faPencilAlt = faPencilAlt;\r\n\r\n    //Other constants for html\r\n    protected readonly competencyValidators = CourseCompetencyValidators;\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly ButtonSize = ButtonSize;\r\n\r\n    ngOnInit(): void {\r\n        this.titleControl.addValidators([Validators.required, Validators.maxLength(CourseCompetencyValidators.TITLE_MAX)]);\r\n        this.descriptionControl.addValidators([Validators.maxLength(CourseCompetencyValidators.DESCRIPTION_MAX)]);\r\n        //disable all competency controls as component is not in edit mode\r\n        this.form.controls.competency.disable();\r\n        //viewed checkbox is always enabled\r\n        this.viewedControl.enable();\r\n    }\r\n\r\n    /**\r\n     * Toggles collapsed status and sets viewed to true\r\n     */\r\n    toggle() {\r\n        this.isCollapsed = !this.isCollapsed;\r\n        this.viewedControl.setValue(true);\r\n    }\r\n\r\n    /**\r\n     * Sends event to parent to handle delete\r\n     */\r\n    delete() {\r\n        this.onDelete.emit();\r\n    }\r\n\r\n    /**\r\n     * Enters edit mode: Enables all form fields and expands the element\r\n     */\r\n    edit() {\r\n        this.form.controls.competency.enable();\r\n        this.isInEditMode = true;\r\n        this.isCollapsed = false;\r\n        this.viewedControl.setValue(true);\r\n    }\r\n\r\n    /**\r\n     * Leaves edit mode: Disables all form fields again and collapses the element\r\n     */\r\n    save() {\r\n        this.form.controls.competency.disable();\r\n        this.isInEditMode = false;\r\n        this.isCollapsed = true;\r\n    }\r\n\r\n    /**\r\n     * Updates description form on markdown change\r\n     * @param content markdown content\r\n     */\r\n    updateDescriptionControl(content: string) {\r\n        this.descriptionControl.setValue(content);\r\n        this.descriptionControl.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Only allows save if no form controls have validation errors\r\n     */\r\n    get isSavePossible() {\r\n        return !this.form.invalid;\r\n    }\r\n\r\n    //getters for the form controls\r\n\r\n    get titleControl() {\r\n        return this.form.controls.competency.controls.title;\r\n    }\r\n\r\n    get descriptionControl() {\r\n        return this.form.controls.competency.controls.description;\r\n    }\r\n\r\n    get taxonomyControl() {\r\n        return this.form.controls.competency.controls.taxonomy;\r\n    }\r\n\r\n    get viewedControl() {\r\n        return this.form.controls.viewed;\r\n    }\r\n}\r\n", "<div class=\"card form-group\" [formGroup]=\"form\">\r\n    <div class=\"card-header\">\r\n        <div class=\"d-flex align-items-center mw-100 clickable\" (click)=\"toggle()\">\r\n            <div class=\"me-3\">\r\n                <fa-icon [icon]=\"faChevronRight\" class=\"rotate-icon chevron-position\" [class.rotated]=\"!isCollapsed\" />\r\n            </div>\r\n            <h6 class=\"mb-0 text-nowrap text-truncate overflow-hidden\">{{ titleControl.value ?? '' }}</h6>\r\n        </div>\r\n        <div class=\"d-flex align-items-center flex-grow-1 justify-content-end\">\r\n            <div class=\"d-flex me-3\">\r\n                <input class=\"me-1\" type=\"checkbox\" id=\"viewed-{{ index }}\" formControlName=\"viewed\" />\r\n                <label for=\"viewed-{{ index }}\" jhiTranslate=\"artemisApp.competency.generate.viewedLabel\"></label>\r\n            </div>\r\n            @if (!isInEditMode) {\r\n                <jhi-button\r\n                    class=\"me-1\"\r\n                    id=\"editButton-{{ index }}\"\r\n                    [btnType]=\"ButtonType.WARNING\"\r\n                    [btnSize]=\"ButtonSize.SMALL\"\r\n                    [title]=\"'entity.action.edit'\"\r\n                    [icon]=\"faPencilAlt\"\r\n                    (onClick)=\"edit()\"\r\n                    [shouldSubmit]=\"false\"\r\n                />\r\n            } @else {\r\n                <jhi-button\r\n                    class=\"me-1\"\r\n                    id=\"saveButton-{{ index }}\"\r\n                    [btnType]=\"ButtonType.SUCCESS\"\r\n                    [btnSize]=\"ButtonSize.SMALL\"\r\n                    [title]=\"'entity.action.save'\"\r\n                    [icon]=\"faSave\"\r\n                    (onClick)=\"save()\"\r\n                    [disabled]=\"!isSavePossible\"\r\n                    [shouldSubmit]=\"false\"\r\n                />\r\n            }\r\n            <jhi-button\r\n                id=\"deleteButton-{{ index }}\"\r\n                [btnType]=\"ButtonType.ERROR\"\r\n                [btnSize]=\"ButtonSize.SMALL\"\r\n                [title]=\"'entity.action.delete'\"\r\n                [icon]=\"faTrash\"\r\n                (click)=\"delete()\"\r\n                [shouldSubmit]=\"false\"\r\n            />\r\n        </div>\r\n    </div>\r\n    <div class=\"card-body border-0\" [ngbCollapse]=\"isCollapsed\" formGroupName=\"competency\">\r\n        <div class=\"form-group\">\r\n            <label for=\"title-{{ index }}\" jhiTranslate=\"artemisApp.competency.title\"></label>\r\n            <input type=\"text\" class=\"form-control\" id=\"title-{{ index }}\" formControlName=\"title\" />\r\n            @if (titleControl.invalid && (titleControl.dirty || titleControl.touched)) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (titleControl.errors?.required) {\r\n                        <div jhiTranslate=\"artemisApp.competency.create.titleRequiredValidationError\"></div>\r\n                    }\r\n                    @if (titleControl.errors?.maxlength) {\r\n                        <div jhiTranslate=\"artemisApp.competency.create.titleMaxLengthValidationError\" [translateValues]=\"{ max: competencyValidators.TITLE_MAX }\"></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"description-{{ index }}\" jhiTranslate=\"artemisApp.competency.description\"></label>\r\n            @if (isInEditMode) {\r\n                <jhi-markdown-editor-monaco\r\n                    [markdown]=\"descriptionControl.value\"\r\n                    (markdownChange)=\"updateDescriptionControl($event)\"\r\n                    id=\"description-{{ index }}\"\r\n                    class=\"markdown-preview\"\r\n                    [enableFileUpload]=\"false\"\r\n                />\r\n            } @else {\r\n                <div\r\n                    id=\"description-{{ index }}\"\r\n                    disabled=\"true\"\r\n                    class=\"markdown-preview border rounded p-1\"\r\n                    [innerHTML]=\"descriptionControl.value || '&nbsp;' | htmlForMarkdown\"\r\n                ></div>\r\n            }\r\n            @if (descriptionControl.invalid && descriptionControl.dirty) {\r\n                <div class=\"alert alert-danger\">\r\n                    @if (descriptionControl.errors?.maxlength) {\r\n                        <div\r\n                            jhiTranslate=\"artemisApp.competency.create.descriptionMaxLengthValidationError\"\r\n                            [translateValues]=\"{ max: competencyValidators.DESCRIPTION_MAX }\"\r\n                        ></div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"taxonomy-{{ index }}\" jhiTranslate=\"artemisApp.competency.taxonomy\"></label>\r\n            <jhi-taxonomy-select selectId=\"taxonomy-{{ index }}\" [form]=\"taxonomyControl\" />\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, HostListener, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { CompetencyService } from 'app/course/competencies/competency.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Competency, CompetencyTaxonomy } from 'app/entities/competency.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { faBan, faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonComponent, ButtonType } from 'app/shared/components/button.component';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Observable, firstValueFrom, map } from 'rxjs';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { DocumentationButtonComponent, DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { IrisStageDTO, IrisStageStateDTO } from 'app/entities/iris/iris-stage-dto.model';\r\nimport { CourseCompetencyService } from 'app/course/competencies/course-competency.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { CourseDescriptionFormComponent } from 'app/course/competencies/generate-competencies/course-description-form.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CompetencyRecommendationDetailComponent } from 'app/course/competencies/generate-competencies/competency-recommendation-detail.component';\r\n\r\nexport type CompetencyFormControlsWithViewed = {\r\n    competency: FormGroup<CompetencyFormControls>;\r\n    viewed: FormControl<boolean>;\r\n};\r\n\r\nexport type CompetencyFormControls = {\r\n    title: FormControl<string | undefined>;\r\n    description: FormControl<string | undefined>;\r\n    taxonomy: FormControl<CompetencyTaxonomy | undefined>;\r\n};\r\n\r\nexport type CompetencyRecommendation = {\r\n    title?: string;\r\n    description?: string;\r\n    taxonomy?: CompetencyTaxonomy;\r\n};\r\n\r\ntype CompetencyGenerationStatusUpdate = {\r\n    stages: IrisStageDTO[];\r\n    result?: CompetencyRecommendation[];\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-generate-competencies',\r\n    templateUrl: './generate-competencies.component.html',\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ButtonComponent,\r\n        DocumentationButtonComponent,\r\n        CourseDescriptionFormComponent,\r\n        TranslateDirective,\r\n        CompetencyRecommendationDetailComponent,\r\n    ],\r\n})\r\nexport class GenerateCompetenciesComponent implements OnInit, ComponentCanDeactivate {\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private courseCompetencyService = inject(CourseCompetencyService);\r\n    private competencyService = inject(CompetencyService);\r\n    private alertService = inject(AlertService);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private formBuilder = inject(FormBuilder);\r\n    private modalService = inject(NgbModal);\r\n    private artemisTranslatePipe = inject(ArtemisTranslatePipe);\r\n    private translateService = inject(TranslateService);\r\n    private websocketService = inject(WebsocketService);\r\n\r\n    @ViewChild(CourseDescriptionFormComponent) courseDescriptionForm: CourseDescriptionFormComponent;\r\n\r\n    courseId: number;\r\n    isLoading = false;\r\n    submitted = false;\r\n    form = new FormGroup({ competencies: new FormArray<FormGroup<CompetencyFormControlsWithViewed>>([]) });\r\n\r\n    //Icons\r\n    protected readonly faTimes = faTimes;\r\n    protected readonly faBan = faBan;\r\n    protected readonly faSave = faSave;\r\n\r\n    //Other constants\r\n    protected readonly ButtonType = ButtonType;\r\n    readonly documentationType: DocumentationType = 'GenerateCompetencies';\r\n\r\n    ngOnInit(): void {\r\n        this.activatedRoute.params.subscribe((params) => {\r\n            this.courseId = Number(params['courseId']);\r\n            firstValueFrom(this.courseManagementService.find(this.courseId))\r\n                .then((course) => this.courseDescriptionForm.setCourseDescription(course.body?.description ?? ''))\r\n                .catch((res: HttpErrorResponse) => onError(this.alertService, res));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses competency recommendations from the given course description and adds them to the form\r\n     * @param courseDescription\r\n     */\r\n    getCompetencyRecommendations(courseDescription: string) {\r\n        this.isLoading = true;\r\n        this.getCurrentCompetencies().subscribe((currentCompetencies) => {\r\n            this.courseCompetencyService.generateCompetenciesFromCourseDescription(this.courseId, courseDescription, currentCompetencies).subscribe({\r\n                next: () => {\r\n                    const websocketTopic = `/user/topic/iris/competencies/${this.courseId}`;\r\n                    this.websocketService.subscribe(websocketTopic);\r\n                    this.websocketService.receive(websocketTopic).subscribe({\r\n                        next: (update: CompetencyGenerationStatusUpdate) => {\r\n                            if (update.result) {\r\n                                for (const competency of update.result) {\r\n                                    this.addCompetencyToForm(competency);\r\n                                }\r\n                            }\r\n                            if (update.stages.every((stage) => stage.state === IrisStageStateDTO.DONE)) {\r\n                                this.alertService.success('artemisApp.competency.generate.courseDescription.success', { noOfCompetencies: update.result?.length });\r\n                            } else if (update.stages.some((stage) => stage.state === IrisStageStateDTO.ERROR)) {\r\n                                this.alertService.warning('artemisApp.competency.generate.courseDescription.warning');\r\n                            }\r\n                            if (update.stages.every((stage) => stage.state !== IrisStageStateDTO.NOT_STARTED && stage.state !== IrisStageStateDTO.IN_PROGRESS)) {\r\n                                this.websocketService.unsubscribe(websocketTopic);\r\n                                this.isLoading = false;\r\n                            }\r\n                        },\r\n                        error: (res: HttpErrorResponse) => {\r\n                            onError(this.alertService, res);\r\n                            this.websocketService.unsubscribe(websocketTopic);\r\n                            this.isLoading = false;\r\n                        },\r\n                    });\r\n                },\r\n                error: (res: HttpErrorResponse) => {\r\n                    onError(this.alertService, res);\r\n                    this.isLoading = false;\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the title, description, and taxonomy of all current competencies saved in this course,\r\n     * and the competency recommendations that are currently in the form.\r\n     * @private\r\n     */\r\n    private getCurrentCompetencies(): Observable<CompetencyRecommendation[]> {\r\n        const currentCompetencySuggestions = this.competencies.getRawValue().map((c) => c.competency);\r\n        const courseCompetenciesObservable = this.courseCompetencyService.getAllForCourse(this.courseId);\r\n        if (courseCompetenciesObservable) {\r\n            return courseCompetenciesObservable.pipe(\r\n                map((competencies) => competencies.body?.map((c) => ({ title: c.title, description: c.description, taxonomy: c.taxonomy }))),\r\n                map((competencies) => currentCompetencySuggestions.concat(competencies ?? [])),\r\n            );\r\n        }\r\n        return new Observable<CompetencyRecommendation[]>((subscriber) => {\r\n            subscriber.next(currentCompetencySuggestions);\r\n            subscriber.complete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a competency to the form\r\n     * @param competency\r\n     * @private\r\n     */\r\n    private addCompetencyToForm(competency: CompetencyRecommendation) {\r\n        const formGroup: FormGroup<CompetencyFormControlsWithViewed> = this.formBuilder.nonNullable.group({\r\n            competency: this.formBuilder.nonNullable.group({\r\n                title: [competency.title],\r\n                description: [competency.description],\r\n                taxonomy: [competency.taxonomy],\r\n            }),\r\n            viewed: [false],\r\n        });\r\n        this.competencies.push(formGroup);\r\n    }\r\n\r\n    /**\r\n     * Handles deletion of a competency recommendation\r\n     * @param index of the competency\r\n     */\r\n    onDelete(index: number) {\r\n        const competencyTitle = this.competencies.at(index).controls.competency.controls.title.getRawValue() ?? '';\r\n        const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'md' });\r\n        modalRef.componentInstance.title = 'artemisApp.competency.generate.deleteModalTitle';\r\n        modalRef.componentInstance.text = this.artemisTranslatePipe.transform('artemisApp.competency.generate.deleteModalText', { title: competencyTitle });\r\n        modalRef.result.then(() => this.competencies.removeAt(index));\r\n    }\r\n\r\n    /**\r\n     * Cancels the parsing and navigates back\r\n     */\r\n    onCancel() {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    /**\r\n     * Submits and opens an additional confirmation modal if needed\r\n     */\r\n    onSubmit() {\r\n        if (!this.isSubmitPossibleWithoutConfirmation()) {\r\n            const modalRef = this.modalService.open(ConfirmAutofocusModalComponent, { keyboard: true, size: 'md' });\r\n            modalRef.componentInstance.title = 'artemisApp.competency.generate.saveModalTitle';\r\n            modalRef.componentInstance.text = this.artemisTranslatePipe.transform('artemisApp.competency.generate.saveModalText');\r\n            modalRef.result.then(this.save.bind(this));\r\n        } else {\r\n            this.save();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the competency recommendations as competencies and navigates back\r\n     */\r\n    save() {\r\n        const competenciesToSave = this.competencies.getRawValue().map((c) => Object.assign(new Competency(), c.competency));\r\n        this.competencyService.createBulk(competenciesToSave, this.courseId).subscribe({\r\n            next: () => {\r\n                this.submitted = true;\r\n                this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n            },\r\n            error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Only allows submitting if no form controls have validation errors\r\n     */\r\n    get isSubmitPossible() {\r\n        return !this.form.invalid;\r\n    }\r\n\r\n    /**\r\n     * Needs confirmation to submit if not all competency recommendations were viewed\r\n     */\r\n    private isSubmitPossibleWithoutConfirmation() {\r\n        const viewedArray = this.form.getRawValue().competencies?.map((c) => c.viewed);\r\n        return !viewedArray?.includes(false);\r\n    }\r\n\r\n    //getter for form controls\r\n    get competencies() {\r\n        return this.form.controls.competencies;\r\n    }\r\n\r\n    /**\r\n     * Only allow to leave page after submitting or if no pending changes exist\r\n     */\r\n    canDeactivate(): boolean {\r\n        return this.submitted || (!this.isLoading && this.competencies.length === 0);\r\n    }\r\n\r\n    get canDeactivateWarning(): string {\r\n        return this.translateService.instant('pendingChanges');\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.canDeactivateWarning;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "<div class=\"container\">\r\n    <div class=\"d-flex align-items-center\">\r\n        <h2 id=\"page-heading\" jhiTranslate=\"artemisApp.competency.generate.title\"></h2>\r\n        <jhi-documentation-button [type]=\"documentationType\" />\r\n    </div>\r\n    <jhi-course-description-form (formSubmitted)=\"getCompetencyRecommendations($event)\" [isLoading]=\"isLoading\" />\r\n    <h3 jhiTranslate=\"artemisApp.competency.generate.listTitle\" class=\"mt-2\"></h3>\r\n    @if (isLoading) {\r\n        <div class=\"d-flex flex-column align-items-center mb-1\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span jhiTranslate=\"loading\" class=\"sr-only\"></span>\r\n            </div>\r\n            <span jhiTranslate=\"artemisApp.competency.generate.loading\"></span>\r\n        </div>\r\n    }\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        @if (!competencies.length && !isLoading) {\r\n            <div class=\"mb-1\" jhiTranslate=\"global.generic.emptyList\"></div>\r\n        }\r\n        <div class=\"border-0\" formArrayName=\"competencies\">\r\n            @for (competencies of competencies.controls; track competencies; let i = $index) {\r\n                <jhi-competency-recommendation [form]=\"competencies\" [index]=\"i\" (onDelete)=\"onDelete(i)\" />\r\n            }\r\n        </div>\r\n        <div class=\"mt-4\">\r\n            <jhi-button id=\"cancelButton\" [btnType]=\"ButtonType.SECONDARY\" [title]=\"'entity.action.cancel'\" [icon]=\"faBan\" (onClick)=\"onCancel()\" [shouldSubmit]=\"false\" />\r\n            <jhi-button id=\"saveButton\" [title]=\"'entity.action.save'\" [icon]=\"faSave\" [disabled]=\"!isSubmitPossible\" [isLoading]=\"isLoading\" />\r\n        </div>\r\n    </form>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faCircleNotch", "SMALL", "\u0275\u0275classProp", "title", "IrisLogoButtonComponent", "btnType", "ButtonType", "PRIMARY", "btnSize", "ButtonSize", "MEDIUM", "tooltip", "disabled", "isLoading", "featureToggle", "shouldSubmit", "onClick", "EventEmitter", "IrisLogoSize", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "emit", "\u0275\u0275template", "IrisLogoButtonComponent_Conditional_3_Template", "IrisLogoButtonComponent_Conditional_4_Template", "IrisLogoButtonComponent_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275pureFunction2", "_c0", "\u0275\u0275conditional", "NgClass", "NgbTooltip", "FeatureToggleDirective", "FaIconComponent", "IrisLogoComponent", "TranslateDirective", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "DESCRIPTION_MIN", "_c1", "DESCRIPTION_MAX", "\u0275\u0275elementStart", "\u0275\u0275template", "CourseDescriptionFormComponent_Conditional_15_Conditional_3_Template", "CourseDescriptionFormComponent_Conditional_15_Conditional_4_Template", "CourseDescriptionFormComponent_Conditional_15_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "courseDescriptionControl", "errors", "required", "minlength", "maxlength", "CourseDescriptionFormComponent", "formBuilder", "inject", "FormBuilder", "isLoading", "placeholder", "formSubmitted", "EventEmitter", "form", "hasBeenSubmitted", "faQuestionCircle", "ButtonType", "ngOnInit", "group", "courseDescription", "Validators", "minLength", "maxLength", "setCourseDescription", "description", "controls", "setValue", "submitForm", "emit", "value", "isSubmitPossible", "invalid", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "CourseDescriptionFormComponent_Conditional_15_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "dirty", "touched", "PRIMARY_OUTLINE", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "FaIconComponent", "NgbTooltip", "IrisLogoButtonComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "edit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "index", "\u0275\u0275property", "ButtonType", "WARNING", "ButtonSize", "SMALL", "faPencilAlt", "_r3", "save", "SUCCESS", "faSave", "isSavePossible", "\u0275\u0275element", "\u0275\u0275pureFunction1", "_c0", "competencyValidators", "TITLE_MAX", "\u0275\u0275template", "CompetencyRecommendationDetailComponent_Conditional_38_Conditional_3_Template", "CompetencyRecommendationDetailComponent_Conditional_38_Conditional_4_Template", "\u0275\u0275conditional", "titleControl", "errors", "required", "maxlength", "$event", "_r4", "updateDescriptionControl", "descriptionControl", "value", "\u0275\u0275pipeBind1", "\u0275\u0275sanitizeHtml", "DESCRIPTION_MAX", "CompetencyRecommendationDetailComponent_Conditional_46_Conditional_3_Template", "CompetencyRecommendationDetailComponent", "form", "isCollapsed", "isInEditMode", "onDelete", "EventEmitter", "faChevronRight", "faTrash", "faWrench", "CourseCompetencyValidators", "ngOnInit", "addValidators", "Validators", "maxLength", "controls", "competency", "disable", "viewedControl", "enable", "toggle", "setValue", "delete", "emit", "content", "markAsDirty", "invalid", "title", "description", "taxonomyControl", "taxonomy", "viewed", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "CompetencyRecommendationDetailComponent_Conditional_24_Template", "CompetencyRecommendationDetailComponent_Conditional_25_Template", "CompetencyRecommendationDetailComponent_Conditional_38_Template", "CompetencyRecommendationDetailComponent_Conditional_44_Template", "CompetencyRecommendationDetailComponent_Conditional_45_Template", "CompetencyRecommendationDetailComponent_Conditional_46_Template", "\u0275\u0275classProp", "\u0275\u0275textInterpolate", "tmp_3_0", "undefined", "ERROR", "dirty", "touched", "FormsModule", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "FormGroupName", "FaIconComponent", "TranslateDirective", "ButtonComponent", "NgbCollapse", "MarkdownEditorMonacoComponent", "TaxonomySelectComponent", "HtmlForMarkdownPipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275$index_47_r2", "\u0275\u0275restoreView", "_r1", "$index", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onDelete", "\u0275\u0275advance", "\u0275\u0275property", "competencies_r4", "GenerateCompetenciesComponent", "courseManagementService", "inject", "CourseManagementService", "courseCompetencyService", "CourseCompetencyService", "competencyService", "CompetencyService", "alertService", "AlertService", "activatedRoute", "ActivatedRoute", "router", "Router", "formBuilder", "FormBuilder", "modalService", "NgbModal", "artemisTranslatePipe", "ArtemisTranslatePipe", "translateService", "TranslateService", "websocketService", "WebsocketService", "courseDescriptionForm", "courseId", "isLoading", "submitted", "form", "FormGroup", "competencies", "FormArray", "faTimes", "faBan", "faSave", "ButtonType", "documentationType", "ngOnInit", "params", "subscribe", "Number", "firstValueFrom", "find", "then", "course", "setCourseDescription", "body", "description", "catch", "res", "onError", "getCompetencyRecommendations", "courseDescription", "getCurrentCompetencies", "currentCompetencies", "generateCompetenciesFromCourseDescription", "next", "websocketTopic", "receive", "update", "result", "competency", "addCompetencyToForm", "stages", "every", "stage", "state", "IrisStageStateDTO", "DONE", "success", "noOfCompetencies", "length", "some", "ERROR", "warning", "NOT_STARTED", "IN_PROGRESS", "unsubscribe", "error", "currentCompetencySuggestions", "getRawValue", "map", "c", "courseCompetenciesObservable", "getAllForCourse", "pipe", "title", "taxonomy", "concat", "Observable", "subscriber", "complete", "formGroup", "nonNullable", "group", "viewed", "push", "index", "competencyTitle", "at", "controls", "modalRef", "open", "ConfirmAutofocusModalComponent", "keyboard", "size", "componentInstance", "text", "transform", "removeAt", "onCancel", "navigate", "relativeTo", "onSubmit", "isSubmitPossibleWithoutConfirmation", "save", "bind", "competenciesToSave", "Object", "assign", "Competency", "createBulk", "isSubmitPossible", "invalid", "includes", "canDeactivate", "canDeactivateWarning", "instant", "unloadNotification", "event", "preventDefault", "selectors", "viewQuery", "rf", "ctx", "CourseDescriptionFormComponent", "$event", "\u0275\u0275resolveWindow", "\u0275\u0275template", "GenerateCompetenciesComponent_Conditional_13_Template", "GenerateCompetenciesComponent_Conditional_16_Template", "\u0275\u0275repeaterCreate", "GenerateCompetenciesComponent_For_20_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275conditional", "\u0275\u0275repeater", "SECONDARY", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormArrayName", "ButtonComponent", "DocumentationButtonComponent", "TranslateDirective", "CompetencyRecommendationDetailComponent", "encapsulation"]
}
