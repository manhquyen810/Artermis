{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/presentation-score/presentation-score.component.ts", "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instruction.model.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-credits.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-scale.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-description.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-feedback.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-usage-count.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-criterion.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/grading-criteria/grading-instruction.action.ts", "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.html", "src/main/webapp/app/exercises/shared/exercise-update-warning/exercise-update-warning.component.ts", "src/main/webapp/app/exercises/shared/exercise-update-warning/exercise-update-warning.component.html", "src/main/webapp/app/exercises/shared/exercise-update-warning/exercise-update-warning.service.ts", "src/main/webapp/app/entities/team-assignment-config.model.ts", "src/main/webapp/app/exercises/shared/team-config-form-group/team-config-form-group.component.ts", "src/main/webapp/app/exercises/shared/team-config-form-group/team-config-form-group.component.html", "src/main/webapp/app/exercises/programming/manage/update/switch-edit-mode-button/switch-edit-mode-button.component.ts", "src/main/webapp/app/exercises/programming/manage/update/switch-edit-mode-button/switch-edit-mode-button.component.html", "src/main/webapp/app/exercises/shared/exercise-update-notification/exercise-update-notification.component.ts", "src/main/webapp/app/exercises/shared/exercise-update-notification/exercise-update-notification.component.html", "src/main/webapp/app/forms/form-footer/form-footer.component.ts", "src/main/webapp/app/forms/form-footer/form-footer.component.html"],
  "sourcesContent": ["import { Component, DoCheck, Input, OnDestroy, inject } from '@angular/core';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { GradeStepsDTO } from 'app/entities/grade-step.model';\r\nimport { HasAnyAuthorityDirective } from 'app/shared/auth/has-any-authority.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-presentation-score-checkbox',\r\n    template: `\r\n        <ng-container *jhiHasAnyAuthority=\"[Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR]\">\r\n            @if (this.showPresentationScoreCheckbox()) {\r\n                <div class=\"form-group\">\r\n                    <div class=\"form-check custom-control custom-checkbox\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            class=\"form-check-input custom-control-input\"\r\n                            id=\"field_presentationScoreEnabled\"\r\n                            name=\"presentationScoreEnabled\"\r\n                            [ngModel]=\"exercise.presentationScoreEnabled\"\r\n                            (ngModelChange)=\"exercise.presentationScoreEnabled = !exercise.presentationScoreEnabled\"\r\n                        />\r\n                        <label class=\"form-check-label custom-control-label\" for=\"field_presentationScoreEnabled\" jhiTranslate=\"artemisApp.exercise.presentationScoreEnabled.title\"\r\n                            >Presentation Score Enabled</label\r\n                        >\r\n                        <fa-icon\r\n                            [icon]=\"faQuestionCircle\"\r\n                            class=\"text-secondary\"\r\n                            ngbTooltip=\"{{ 'artemisApp.exercise.presentationScoreEnabled.description' | artemisTranslate }}\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </ng-container>\r\n    `,\r\n    imports: [HasAnyAuthorityDirective, FormsModule, TranslateDirective, FaIconComponent, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class PresentationScoreComponent implements DoCheck, OnDestroy {\r\n    private gradingSystemService = inject(GradingSystemService);\r\n\r\n    @Input() exercise: Exercise;\r\n\r\n    Authority = Authority;\r\n    // Icons\r\n    faQuestionCircle = faQuestionCircle;\r\n\r\n    private gradeStepsDTO?: GradeStepsDTO;\r\n    private gradeStepsDTOSub?: Subscription;\r\n\r\n    ngDoCheck(): void {\r\n        if (!this.gradeStepsDTOSub && this.exercise.course?.id) {\r\n            this.gradeStepsDTOSub = this.gradingSystemService.findGradeStepsForCourse(this.exercise.course.id).subscribe((gradeStepsDTO) => {\r\n                if (gradeStepsDTO.body) {\r\n                    this.gradeStepsDTO = gradeStepsDTO.body;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.gradeStepsDTOSub) {\r\n            this.gradeStepsDTOSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    showPresentationScoreCheckbox(): boolean {\r\n        return this.isBasicPresentation() || this.isGradedPresentation();\r\n    }\r\n\r\n    private isBasicPresentation(): boolean {\r\n        return !!this.exercise.course?.presentationScore;\r\n    }\r\n\r\n    private isGradedPresentation(): boolean {\r\n        return !!(this.exercise.course && (this.gradeStepsDTO?.presentationsNumber ?? 0) > 0);\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\n\r\nexport class GradingInstruction implements BaseEntity {\r\n    public id?: number;\r\n    public credits: number;\r\n    public gradingScale: string;\r\n    public instructionDescription: string;\r\n    public feedback: string;\r\n    public usageCount?: number;\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingCreditsAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-credits.action';\r\n    static readonly IDENTIFIER = '[credits]';\r\n    static readonly TEXT = '0';\r\n\r\n    constructor() {\r\n        super(GradingCreditsAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addCredits', undefined, undefined, true);\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, GradingCreditsAction.TEXT, true, false);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingCreditsAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingScaleAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-scale.action';\r\n    static readonly IDENTIFIER = '[gradingScale]';\r\n    static readonly TEXT = 'Add instruction grading scale here (only visible for tutors)';\r\n\r\n    constructor() {\r\n        super(GradingScaleAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addScale', undefined, undefined, true);\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, GradingScaleAction.TEXT, true, false);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingScaleAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingDescriptionAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-description.action';\r\n    static readonly IDENTIFIER = '[description]';\r\n    static readonly TEXT = 'Add grading instruction here (only visible for tutors)';\r\n\r\n    constructor() {\r\n        super(GradingDescriptionAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addDescription', undefined, undefined, true);\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, GradingDescriptionAction.TEXT, true, false);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingDescriptionAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingFeedbackAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-feedback.action';\r\n    static readonly IDENTIFIER = '[feedback]';\r\n    static readonly TEXT = 'Add feedback for students here (visible for students)';\r\n\r\n    constructor() {\r\n        super(GradingFeedbackAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addFeedback', undefined, undefined, true);\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, GradingFeedbackAction.TEXT, true, false);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingFeedbackAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingUsageCountAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-usage-count.action';\r\n    static readonly IDENTIFIER = '[maxCountInScore]';\r\n    static readonly TEXT = '0';\r\n\r\n    constructor() {\r\n        super(GradingUsageCountAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addUsageCount', undefined, undefined, true);\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, GradingUsageCountAction.TEXT, true, false);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingUsageCountAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from '../text-editor-domain-action.model';\r\nimport { GradingInstructionAction } from './grading-instruction.action';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingCriterionAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-criterion.action';\r\n    static readonly IDENTIFIER = '[criterion]';\r\n    static readonly TEXT = 'Add criterion title (only visible to tutors)';\r\n\r\n    constructor(private readonly gradingInstructionAction: GradingInstructionAction) {\r\n        super(GradingCriterionAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addCriterion');\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, GradingCriterionAction.TEXT, false, false);\r\n        this.gradingInstructionAction.executeInCurrentEditor();\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingCriterionAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from '../text-editor-domain-action.model';\r\nimport { GradingCreditsAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-credits.action';\r\nimport { GradingScaleAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-scale.action';\r\nimport { GradingDescriptionAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-description.action';\r\nimport { GradingFeedbackAction } from './grading-feedback.action';\r\nimport { GradingUsageCountAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-usage-count.action';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class GradingInstructionAction extends TextEditorDomainAction {\r\n    static readonly ID = 'grading-instruction.action';\r\n    static readonly IDENTIFIER = '[instruction]';\r\n\r\n    constructor(\r\n        private readonly creditsAction: GradingCreditsAction,\r\n        private readonly scaleAction: GradingScaleAction,\r\n        private readonly descriptionAction: GradingDescriptionAction,\r\n        private readonly feedbackAction: GradingFeedbackAction,\r\n        private readonly usageCountAction: GradingUsageCountAction,\r\n    ) {\r\n        super(GradingInstructionAction.ID, 'artemisApp.assessmentInstructions.instructions.editor.addInstruction');\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, '', false, false);\r\n        this.creditsAction.executeInCurrentEditor();\r\n        this.scaleAction.executeInCurrentEditor();\r\n        this.descriptionAction.executeInCurrentEditor();\r\n        this.feedbackAction.executeInCurrentEditor();\r\n        this.usageCountAction.executeInCurrentEditor();\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return GradingInstructionAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { AfterContentInit, ChangeDetectorRef, Component, Input, OnInit, QueryList, ViewChild, ViewChildren, inject } from '@angular/core';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { faPlus, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { GradingCreditsAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-credits.action';\r\nimport { GradingScaleAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-scale.action';\r\nimport { GradingDescriptionAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-description.action';\r\nimport { GradingFeedbackAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-feedback.action';\r\nimport { GradingUsageCountAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-usage-count.action';\r\nimport { MarkdownEditorHeight, MarkdownEditorMonacoComponent, TextWithDomainAction } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { GradingCriterionAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-criterion.action';\r\nimport { GradingInstructionAction } from 'app/shared/monaco-editor/model/actions/grading-criteria/grading-instruction.action';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-grading-instructions-details',\r\n    templateUrl: './grading-instructions-details.component.html',\r\n    styleUrls: ['./grading-instructions-details.component.scss'],\r\n    imports: [NgClass, TranslateDirective, FormsModule, FaIconComponent, HelpIconComponent, NgbTooltip, MarkdownEditorMonacoComponent, ArtemisTranslatePipe],\r\n})\r\nexport class GradingInstructionsDetailsComponent implements OnInit, AfterContentInit {\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    @ViewChildren('markdownEditors')\r\n    private markdownEditors: QueryList<MarkdownEditorMonacoComponent>;\r\n    @ViewChild('markdownEditor', { static: false })\r\n    private markdownEditor: MarkdownEditorMonacoComponent;\r\n    @Input()\r\n    exercise: Exercise;\r\n    private instructions: GradingInstruction[];\r\n    private criteria: GradingCriterion[];\r\n\r\n    backupExercise: Exercise;\r\n    markdownEditorText = '';\r\n    showEditMode: boolean;\r\n\r\n    creditsAction = new GradingCreditsAction();\r\n    gradingScaleAction = new GradingScaleAction();\r\n    descriptionAction = new GradingDescriptionAction();\r\n    feedbackAction = new GradingFeedbackAction();\r\n    usageCountAction = new GradingUsageCountAction();\r\n    gradingInstructionAction = new GradingInstructionAction(this.creditsAction, this.gradingScaleAction, this.descriptionAction, this.feedbackAction, this.usageCountAction);\r\n    gradingCriterionAction = new GradingCriterionAction(this.gradingInstructionAction);\r\n\r\n    domainActionsForMainEditor = [\r\n        this.creditsAction,\r\n        this.gradingScaleAction,\r\n        this.descriptionAction,\r\n        this.feedbackAction,\r\n        this.usageCountAction,\r\n        this.gradingInstructionAction,\r\n        this.gradingCriterionAction,\r\n    ];\r\n\r\n    domainActionsForGradingInstructionParsing: TextEditorDomainAction[] = [\r\n        this.creditsAction,\r\n        this.gradingScaleAction,\r\n        this.descriptionAction,\r\n        this.feedbackAction,\r\n        this.usageCountAction,\r\n    ];\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n    faTrash = faTrash;\r\n    faUndo = faUndo;\r\n\r\n    protected readonly MarkdownEditorHeight = MarkdownEditorHeight;\r\n\r\n    ngOnInit() {\r\n        this.criteria = this.exercise.gradingCriteria || [];\r\n        this.backupExercise = cloneDeep(this.exercise);\r\n        this.markdownEditorText = this.generateMarkdown();\r\n        this.showEditMode = true;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        if (this.exercise.gradingInstructionFeedbackUsed) {\r\n            this.markdownEditorText = this.initializeExerciseGradingInstructionText();\r\n            this.initializeMarkdown();\r\n        }\r\n    }\r\n\r\n    initializeMarkdown() {\r\n        let index = 0;\r\n        this.changeDetector.detectChanges();\r\n        this.criteria!.forEach((criterion) => {\r\n            criterion.structuredGradingInstructions.forEach((instruction) => {\r\n                this.markdownEditors.get(index)!.markdown = this.generateInstructionText(instruction);\r\n                index += 1;\r\n            });\r\n        });\r\n    }\r\n\r\n    generateMarkdown(): string {\r\n        let markdownText = '';\r\n        markdownText += this.initializeExerciseGradingInstructionText();\r\n        if (this.exercise.gradingCriteria) {\r\n            for (const criterion of this.exercise.gradingCriteria) {\r\n                if (criterion.title == undefined) {\r\n                    // if it is a dummy criterion, leave out the action identifier\r\n                    markdownText += this.generateInstructionsMarkdown(criterion);\r\n                } else {\r\n                    markdownText += `${GradingCriterionAction.IDENTIFIER} ${criterion.title}\\n\\t${this.generateInstructionsMarkdown(criterion)}`;\r\n                }\r\n            }\r\n        }\r\n        return markdownText;\r\n    }\r\n\r\n    /**\r\n     * @function generateMarkdown\r\n     * @desc Generate the markdown text for this grading instruction\r\n     */\r\n    generateInstructionsMarkdown(criterion: GradingCriterion): string {\r\n        let markdownText = '';\r\n        if (criterion.structuredGradingInstructions == undefined || criterion.structuredGradingInstructions.length === 0) {\r\n            this.instructions = [];\r\n            const newInstruction = new GradingInstruction();\r\n            this.instructions.push(newInstruction);\r\n            criterion.structuredGradingInstructions = this.instructions;\r\n        }\r\n        for (const instruction of criterion.structuredGradingInstructions) {\r\n            markdownText += this.generateInstructionText(instruction);\r\n        }\r\n        return markdownText;\r\n    }\r\n\r\n    generateInstructionText(instruction: GradingInstruction): string {\r\n        return (\r\n            GradingInstructionAction.IDENTIFIER +\r\n            '\\n' +\r\n            '\\t' +\r\n            this.generateCreditsText(instruction) +\r\n            '\\n' +\r\n            '\\t' +\r\n            this.generateGradingScaleText(instruction) +\r\n            '\\n' +\r\n            '\\t' +\r\n            this.generateInstructionDescriptionText(instruction) +\r\n            '\\n' +\r\n            '\\t' +\r\n            this.generateInstructionFeedback(instruction) +\r\n            '\\n' +\r\n            '\\t' +\r\n            this.generateUsageCount(instruction) +\r\n            '\\n' +\r\n            '\\n'\r\n        );\r\n    }\r\n\r\n    generateCreditsText(instruction: GradingInstruction): string {\r\n        const creditsText = GradingCreditsAction.TEXT;\r\n        const creditsIdentifier = GradingCreditsAction.IDENTIFIER;\r\n        if (instruction.credits == undefined) {\r\n            instruction.credits = parseFloat(creditsText) || 0;\r\n        }\r\n        return `${creditsIdentifier} ${instruction.credits || creditsText}`;\r\n    }\r\n\r\n    generateGradingScaleText(instruction: GradingInstruction): string {\r\n        if (instruction.gradingScale == undefined) {\r\n            instruction.gradingScale = GradingScaleAction.TEXT;\r\n        }\r\n        return `${GradingScaleAction.IDENTIFIER} ${instruction.gradingScale}`;\r\n    }\r\n\r\n    generateInstructionDescriptionText(instruction: GradingInstruction): string {\r\n        if (instruction.instructionDescription == undefined) {\r\n            instruction.instructionDescription = GradingDescriptionAction.TEXT;\r\n        }\r\n        return `${GradingDescriptionAction.IDENTIFIER} ${instruction.instructionDescription}`;\r\n    }\r\n\r\n    generateInstructionFeedback(instruction: GradingInstruction): string {\r\n        if (instruction.feedback == undefined) {\r\n            instruction.feedback = GradingFeedbackAction.TEXT;\r\n        }\r\n        return `${GradingFeedbackAction.IDENTIFIER} ${instruction.feedback}`;\r\n    }\r\n\r\n    generateUsageCount(instruction: GradingInstruction): string {\r\n        if (instruction.usageCount == undefined) {\r\n            instruction.usageCount = parseInt(GradingUsageCountAction.TEXT, 10) || 0;\r\n        }\r\n        return `${GradingUsageCountAction.IDENTIFIER} ${instruction.usageCount}`;\r\n    }\r\n\r\n    initializeExerciseGradingInstructionText(): string {\r\n        return `${this.exercise.gradingInstructions || 'Add Assessment Instruction text here'}\\n\\n`;\r\n    }\r\n\r\n    prepareForSave(): void {\r\n        this.cleanupExerciseGradingInstructions();\r\n        this.markdownEditor.parseMarkdown();\r\n        if (this.exercise.gradingInstructionFeedbackUsed) {\r\n            this.markdownEditors.forEach((component) => {\r\n                component.parseMarkdown(this.domainActionsForGradingInstructionParsing);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function cleanupExerciseGradingInstructions\r\n     * @desc Clear the exercise grading instruction text to avoid double assignments\r\n     */\r\n    cleanupExerciseGradingInstructions() {\r\n        this.exercise.gradingInstructions = undefined;\r\n    }\r\n\r\n    hasCriterionAction(textWithDomainActions: TextWithDomainAction[]): boolean {\r\n        return textWithDomainActions.some(({ action }) => action instanceof GradingCriterionAction);\r\n    }\r\n\r\n    /**\r\n     * Creates criterion and instruction objects based on the parsed markdown text.\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    createSubInstructionActions(textWithDomainActions: TextWithDomainAction[]): void {\r\n        let instructionActions;\r\n        let criterionActions;\r\n        let endOfInstructionsAction = 0;\r\n        if (!this.hasCriterionAction(textWithDomainActions)) {\r\n            this.setParentForInstructionsWithNoCriterion(textWithDomainActions);\r\n        } else {\r\n            for (const { action } of textWithDomainActions) {\r\n                endOfInstructionsAction++;\r\n                this.setExerciseGradingInstructionText(textWithDomainActions);\r\n                if (action instanceof GradingCriterionAction) {\r\n                    instructionActions = textWithDomainActions.slice(0, endOfInstructionsAction - 1);\r\n                    if (instructionActions.length !== 0) {\r\n                        this.setParentForInstructionsWithNoCriterion(instructionActions);\r\n                    }\r\n                    criterionActions = textWithDomainActions.slice(endOfInstructionsAction - 1);\r\n                    if (criterionActions.length !== 0) {\r\n                        this.instructions = []; // resets the instructions array to be filled with the instructions of the criteria\r\n                        this.groupInstructionsToCriteria(criterionActions);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a dummy grading criterion object for each instruction that does not belong to a criterion and assigns the instruction to it.\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    setParentForInstructionsWithNoCriterion(textWithDomainActions: TextWithDomainAction[]): void {\r\n        for (const { action } of textWithDomainActions) {\r\n            this.setExerciseGradingInstructionText(textWithDomainActions);\r\n            if (action instanceof GradingInstructionAction) {\r\n                const dummyCriterion = new GradingCriterion();\r\n                const newInstruction = new GradingInstruction();\r\n                dummyCriterion.structuredGradingInstructions = [];\r\n                dummyCriterion.structuredGradingInstructions.push(newInstruction);\r\n                this.instructions.push(newInstruction);\r\n                this.criteria.push(dummyCriterion);\r\n            }\r\n        }\r\n        this.exercise.gradingCriteria = this.criteria;\r\n        this.setInstructionParameters(textWithDomainActions);\r\n    }\r\n\r\n    /**\r\n     * Creates a grading criterion object for each criterion action found in the parsed markdown text and assigns the corresponding grading instructions to it.\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    groupInstructionsToCriteria(textWithDomainActions: TextWithDomainAction[]): void {\r\n        const initialCriterionActions = textWithDomainActions;\r\n        if (this.exercise.gradingCriteria == undefined) {\r\n            this.exercise.gradingCriteria = [];\r\n        }\r\n        for (const { text, action } of textWithDomainActions) {\r\n            if (action instanceof GradingCriterionAction) {\r\n                const newCriterion = new GradingCriterion();\r\n                newCriterion.title = text;\r\n                this.exercise.gradingCriteria.push(newCriterion);\r\n                newCriterion.structuredGradingInstructions = [];\r\n                const arrayWithoutCriterion = textWithDomainActions.slice(1); // remove the identifier after creating its criterion object\r\n                let endOfCriterion = 0;\r\n                for (const remainingTextWithDomainAction of arrayWithoutCriterion) {\r\n                    const instrAction = remainingTextWithDomainAction.action;\r\n                    endOfCriterion++;\r\n                    if (instrAction instanceof GradingInstructionAction) {\r\n                        const newInstruction = new GradingInstruction(); // create instruction objects that belong to the above created criterion\r\n                        newCriterion.structuredGradingInstructions.push(newInstruction);\r\n                        this.instructions.push(newInstruction);\r\n                    }\r\n                    if (instrAction instanceof GradingCriterionAction) {\r\n                        textWithDomainActions = textWithDomainActions.slice(endOfCriterion, textWithDomainActions.length);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setInstructionParameters(initialCriterionActions.filter(({ action }) => !(action instanceof GradingCriterionAction)));\r\n    }\r\n\r\n    /**\r\n     * Sets the parameters of the GradingInstruction objects based on the parsed markdown text. Note that the instruction objects must be created before this method is called.\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    setInstructionParameters(textWithDomainActions: TextWithDomainAction[]): void {\r\n        let index = 0;\r\n        for (const { text, action } of textWithDomainActions) {\r\n            if (!this.instructions[index]) {\r\n                break;\r\n            }\r\n            if (action instanceof GradingCreditsAction) {\r\n                this.instructions[index].credits = parseFloat(text);\r\n            } else if (action instanceof GradingScaleAction) {\r\n                this.instructions[index].gradingScale = text;\r\n            } else if (action instanceof GradingDescriptionAction) {\r\n                this.instructions[index].instructionDescription = text;\r\n            } else if (action instanceof GradingFeedbackAction) {\r\n                this.instructions[index].feedback = text;\r\n            } else if (action instanceof GradingUsageCountAction) {\r\n                this.instructions[index].usageCount = parseInt(text, 10);\r\n                index++; // index must be increased after the last parameter of the instruction to continue with the next instruction object\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the grading instructions of the exercise based on the parsed markdown text.\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    onDomainActionsFound(textWithDomainActions: TextWithDomainAction[]): void {\r\n        this.instructions = [];\r\n        this.criteria = [];\r\n        this.exercise.gradingCriteria = [];\r\n        this.createSubInstructionActions(textWithDomainActions);\r\n    }\r\n\r\n    onInstructionChange(textWithDomainActions: TextWithDomainAction[], instruction: GradingInstruction): void {\r\n        this.instructions = [instruction];\r\n        this.setInstructionParameters(textWithDomainActions);\r\n    }\r\n\r\n    /**\r\n     * @function resetInstruction\r\n     * @desc Resets the whole instruction\r\n     * @param instruction {GradingInstruction} the instruction, which will be reset\r\n     * @param criterion {GradingCriterion} the criteria, which includes the instruction that will be reset\r\n     */\r\n    resetInstruction(instruction: GradingInstruction, criterion: GradingCriterion) {\r\n        const criterionIndex = this.findCriterionIndex(criterion, this.exercise);\r\n        const backupCriterionIndex = this.findCriterionIndex(criterion, this.backupExercise);\r\n        const instructionIndex = this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions.indexOf(instruction);\r\n        let backupInstructionIndex = undefined;\r\n\r\n        if (backupCriterionIndex >= 0) {\r\n            backupInstructionIndex = this.findInstructionIndex(instruction, this.backupExercise, backupCriterionIndex);\r\n\r\n            if (backupInstructionIndex != undefined && backupInstructionIndex >= 0) {\r\n                this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions![instructionIndex] = cloneDeep(\r\n                    this.backupExercise.gradingCriteria![backupCriterionIndex].structuredGradingInstructions![backupInstructionIndex],\r\n                );\r\n            }\r\n        }\r\n        if (backupCriterionIndex < 0 || backupInstructionIndex == undefined || backupInstructionIndex < 0) {\r\n            this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions![instructionIndex] = new GradingInstruction();\r\n        }\r\n        this.initializeMarkdown();\r\n    }\r\n\r\n    findCriterionIndex(criterion: GradingCriterion, exercise: Exercise) {\r\n        return exercise.gradingCriteria!.findIndex((gradingCriteria) => {\r\n            return gradingCriteria.id === criterion.id;\r\n        });\r\n    }\r\n\r\n    findInstructionIndex(instruction: GradingInstruction, exercise: Exercise, criterionIndex: number) {\r\n        return exercise.gradingCriteria![criterionIndex].structuredGradingInstructions?.findIndex((gradingInstruction) => {\r\n            return gradingInstruction.id === instruction.id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @function deleteInstruction\r\n     * @desc Deletes selected instruction\r\n     * @param instruction {GradingInstruction} the instruction which should be deleted\r\n     * @param criterion {GradingCriterion} the criteria, which includes the instruction that will be deleted\r\n     */\r\n    deleteInstruction(instruction: GradingInstruction, criterion: GradingCriterion) {\r\n        const criterionIndex = this.exercise.gradingCriteria!.indexOf(criterion);\r\n        const instructionIndex = this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions.indexOf(instruction);\r\n        this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions.splice(instructionIndex, 1);\r\n    }\r\n\r\n    addInstruction(criterion: GradingCriterion) {\r\n        this.addNewInstruction(criterion);\r\n        this.initializeMarkdown();\r\n    }\r\n\r\n    /**\r\n     * Adds a new grading instruction for the specified grading criterion.\r\n     * @param criterion The grading criterion that contains the instruction to insert.\r\n     */\r\n    addNewInstruction(criterion: GradingCriterion) {\r\n        const criterionIndex = this.exercise.gradingCriteria!.indexOf(criterion);\r\n        const instruction = new GradingInstruction();\r\n        this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions.push(instruction);\r\n    }\r\n\r\n    addGradingCriterion() {\r\n        this.addNewGradingCriterion();\r\n        this.initializeMarkdown();\r\n    }\r\n\r\n    addNewGradingCriterion() {\r\n        const criterion = new GradingCriterion();\r\n        criterion.structuredGradingInstructions = [];\r\n        criterion.structuredGradingInstructions.push(new GradingInstruction());\r\n        if (this.exercise.gradingCriteria == undefined) {\r\n            this.exercise.gradingCriteria = [criterion];\r\n        } else {\r\n            this.exercise.gradingCriteria!.push(criterion);\r\n        }\r\n    }\r\n\r\n    onCriterionTitleChange($event: any, criterion: GradingCriterion) {\r\n        const criterionIndex = this.exercise.gradingCriteria!.indexOf(criterion);\r\n        this.exercise.gradingCriteria![criterionIndex].title = $event.target.value;\r\n    }\r\n\r\n    resetCriterionTitle(criterion: GradingCriterion) {\r\n        const criterionIndex = this.findCriterionIndex(criterion, this.exercise);\r\n        const backupCriterionIndex = this.findCriterionIndex(criterion, this.backupExercise);\r\n        if (backupCriterionIndex >= 0) {\r\n            this.exercise.gradingCriteria![criterionIndex].title = cloneDeep(this.backupExercise.gradingCriteria![backupCriterionIndex].title);\r\n        } else {\r\n            criterion.title = '';\r\n        }\r\n    }\r\n\r\n    deleteGradingCriterion(criterion: GradingCriterion) {\r\n        const criterionIndex = this.exercise.gradingCriteria!.indexOf(criterion);\r\n        this.exercise.gradingCriteria!.splice(criterionIndex, 1);\r\n    }\r\n\r\n    /**\r\n     * Extracts the exercise grading instruction text from the start of the parsed markdown text.\r\n     * @param textWithDomainActions The parsed text segments with their corresponding domain actions.\r\n     */\r\n    setExerciseGradingInstructionText(textWithDomainActions: TextWithDomainAction[]): void {\r\n        if (!textWithDomainActions.length) {\r\n            return;\r\n        }\r\n        const { text, action } = textWithDomainActions[0];\r\n        if (action === undefined && text.length > 0) {\r\n            this.exercise.gradingInstructions = text;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches edit mode\r\n     * Updates markdown text between mode switches\r\n     */\r\n    switchMode() {\r\n        this.showEditMode = !this.showEditMode;\r\n        this.markdownEditorText = this.generateMarkdown();\r\n    }\r\n\r\n    updateGradingInstruction(instruction: GradingInstruction, criterion: GradingCriterion) {\r\n        const criterionIndex = this.exercise.gradingCriteria!.indexOf(criterion);\r\n        const instructionIndex = this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions.indexOf(instruction);\r\n        this.exercise.gradingCriteria![criterionIndex].structuredGradingInstructions![instructionIndex] = instruction;\r\n    }\r\n}\r\n", "<!--- Template If Grading Instructions are not used in Assessment --->\r\n@if (!exercise.gradingInstructionFeedbackUsed) {\r\n    <div class=\"edit-sqi\">\r\n        <div class=\"col-12 col-sm-auto d-flex me-1 mb-1\">\r\n            <button id=\"edit-mode\" class=\"btn btn-block\" (click)=\"switchMode()\" [ngClass]=\"{ 'btn-secondary': showEditMode, 'btn-default': !showEditMode }\">\r\n                <span jhiTranslate=\"entity.action.edit\"></span>\r\n            </button>\r\n            <button id=\"edit-text-mode\" class=\"btn btn-block\" (click)=\"switchMode()\" [ngClass]=\"{ 'btn-secondary': !showEditMode, 'btn-default': showEditMode }\">\r\n                <span jhiTranslate=\"artemisApp.exercise.editText\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"grading-instructions-update-border\">\r\n            <!--- Edit Mode --->\r\n            @if (showEditMode) {\r\n                <div>\r\n                    @for (criterion of exercise.gradingCriteria; track criterion) {\r\n                        <div>\r\n                            <div class=\"row border p-2 criterion-title-row\">\r\n                                <div class=\"col-md-9 text-start\">\r\n                                    <div class=\"form-inline\">\r\n                                        <label class=\"form-control-label col-sm-2\" jhiTranslate=\"artemisApp.exercise.assessmentCriterion\" for=\"criterionTitle\"\r\n                                            >Assessment Criterion</label\r\n                                        >\r\n                                        <input\r\n                                            class=\"form-control col-sm-6\"\r\n                                            type=\"text\"\r\n                                            id=\"criterionTitle\"\r\n                                            name=\"criterionTitle\"\r\n                                            [(ngModel)]=\"criterion.title!\"\r\n                                            (change)=\"onCriterionTitleChange($event, criterion)\"\r\n                                            placeholder=\"Criterion Title\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-3 text-end\">\r\n                                    <div class=\"col-md-auto input-group-btn d-flex-end\">\r\n                                        <span class=\"btn btn-md btn-danger\" (click)=\"deleteGradingCriterion(criterion)\">\r\n                                            <fa-icon [icon]=\"faTrash\" />\r\n                                            <span jhiTranslate=\"artemisApp.exercise.deleteAssessmentCriterion\"></span>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"table-responsive\">\r\n                                <table class=\"table table-striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th width=\"10%\">\r\n                                                <span jhiTranslate=\"artemisApp.exercise.credits\"></span>\r\n                                                <jhi-help-icon text=\"artemisApp.exercise.creditsHint\" class=\"me-1\" />\r\n                                            </th>\r\n                                            <th width=\"10%\">\r\n                                                <span jhiTranslate=\"artemisApp.exercise.gradingScale\"></span>\r\n                                                <jhi-help-icon text=\"artemisApp.exercise.gradingScaleHint\" class=\"me-1\" />\r\n                                            </th>\r\n                                            <th width=\"30%\">\r\n                                                <span jhiTranslate=\"artemisApp.exercise.instructionDescription\"></span>\r\n                                                <jhi-help-icon text=\"artemisApp.exercise.descriptionHint\" class=\"me-1\" />\r\n                                            </th>\r\n                                            <th width=\"30%\">\r\n                                                <span jhiTranslate=\"artemisApp.exercise.feedback\"></span>\r\n                                                <jhi-help-icon text=\"artemisApp.exercise.feedbackHint\" class=\"me-1\" />\r\n                                            </th>\r\n                                            <th width=\"10%\">\r\n                                                <span jhiTranslate=\"artemisApp.exercise.limit\"></span>\r\n                                                <jhi-help-icon text=\"artemisApp.exercise.usageCountHint\" class=\"me-1\" />\r\n                                            </th>\r\n                                            <th width=\"5%\">\r\n                                                <span jhiTranslate=\"artemisApp.exercise.action\"></span>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        @for (instruction of criterion.structuredGradingInstructions; track instruction; let i = $index) {\r\n                                            <tr class=\"grading-scale-table-row\">\r\n                                                <td>\r\n                                                    <input\r\n                                                        class=\"form-control input-lg\"\r\n                                                        [(ngModel)]=\"instruction.credits\"\r\n                                                        type=\"number\"\r\n                                                        step=\"0.5\"\r\n                                                        (change)=\"updateGradingInstruction(instruction, criterion)\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input\r\n                                                        class=\"form-control input-lg\"\r\n                                                        [(ngModel)]=\"instruction.gradingScale\"\r\n                                                        type=\"text\"\r\n                                                        (change)=\"updateGradingInstruction(instruction, criterion)\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <textarea\r\n                                                        class=\"form-control input-lg\"\r\n                                                        [(ngModel)]=\"instruction.instructionDescription\"\r\n                                                        type=\"text\"\r\n                                                        rows=\"2\"\r\n                                                        (change)=\"updateGradingInstruction(instruction, criterion)\"\r\n                                                    ></textarea>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <textarea\r\n                                                        class=\"form-control input-lg\"\r\n                                                        [(ngModel)]=\"instruction.feedback\"\r\n                                                        type=\"text\"\r\n                                                        rows=\"2\"\r\n                                                        (change)=\"updateGradingInstruction(instruction, criterion)\"\r\n                                                    ></textarea>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input\r\n                                                        class=\"form-control input-lg\"\r\n                                                        [(ngModel)]=\"instruction.usageCount\"\r\n                                                        type=\"number\"\r\n                                                        step=\"1\"\r\n                                                        min=\"0\"\r\n                                                        (change)=\"updateGradingInstruction(instruction, criterion)\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <span class=\"instruction-delete-button col-2\" id=\"delete-instruction-row\" (click)=\"deleteInstruction(instruction, criterion)\">\r\n                                                        <fa-icon\r\n                                                            [icon]=\"faTrash\"\r\n                                                            size=\"2x\"\r\n                                                            ngbTooltip=\"{{ 'artemisApp.exercise.deleteAssessmentInstruction' | artemisTranslate }}\"\r\n                                                        />\r\n                                                    </span>\r\n                                                </td>\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <span class=\"re-evaluate-button mb-3\" id=\"add-instruction-button\" (click)=\"addNewInstruction(criterion)\">\r\n                                <fa-icon [icon]=\"faPlus\" ngbTooltip=\"{{ 'artemisApp.exercise.addAssessmentInstruction' | artemisTranslate }}\" />\r\n                            </span>\r\n                        </div>\r\n                    }\r\n                    <div class=\"row mt-4\">\r\n                        <div class=\"col-12 col-sm-6 col-xl-3 mb-1\">\r\n                            <button id=\"add-criterion-button\" class=\"btn btn-block btn-success\" (click)=\"addNewGradingCriterion()\">\r\n                                <fa-icon [icon]=\"faPlus\" />\r\n                                <span jhiTranslate=\"artemisApp.exercise.addAssessmentCriterion\"></span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <!--- End of Edit Mode --->\r\n            <!--- Edit Text Mode --->\r\n            @if (!showEditMode) {\r\n                <div>\r\n                    <jhi-markdown-editor-monaco\r\n                        #markdownEditor\r\n                        class=\"markdown-editor\"\r\n                        [markdown]=\"markdownEditorText\"\r\n                        [showPreviewButton]=\"false\"\r\n                        [showEditButton]=\"false\"\r\n                        [domainActions]=\"domainActionsForMainEditor\"\r\n                        [enableResize]=\"false\"\r\n                        [initialEditorHeight]=\"MarkdownEditorHeight.MEDIUM\"\r\n                        (markdownChange)=\"prepareForSave()\"\r\n                        (textWithDomainActionsFound)=\"onDomainActionsFound($event)\"\r\n                    />\r\n                </div>\r\n            }\r\n            <!--- End of Edit Text Mode --->\r\n        </div>\r\n    </div>\r\n}\r\n<!--- Template If Grading Instructions are used in Assessment --->\r\n@if (exercise.gradingInstructionFeedbackUsed) {\r\n    <div class=\"edit-sqi\">\r\n        <div class=\"grading-instructions-update-border\">\r\n            <div class=\"instructions pb-2 row-cols-2\">\r\n                <jhi-markdown-editor-monaco\r\n                    #markdownEditor\r\n                    class=\"editor col-md-8\"\r\n                    [markdown]=\"markdownEditorText\"\r\n                    [domainActions]=\"domainActionsForGradingInstructionParsing\"\r\n                    (markdownChange)=\"prepareForSave()\"\r\n                    (textWithDomainActionsFound)=\"setExerciseGradingInstructionText($event)\"\r\n                    [enableFileUpload]=\"false\"\r\n                    [showEditButton]=\"false\"\r\n                    [showPreviewButton]=\"false\"\r\n                />\r\n            </div>\r\n            @for (criteria of exercise.gradingCriteria; track criteria) {\r\n                <div>\r\n                    <div class=\"criteria-content pb-2\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-10 text-start\">\r\n                                <div class=\"input-group mb-1\" [style.width.%]=\"75\">\r\n                                    <input\r\n                                        class=\"form-control\"\r\n                                        type=\"text\"\r\n                                        [(ngModel)]=\"criteria.title!\"\r\n                                        (change)=\"onCriterionTitleChange($event, criteria)\"\r\n                                        placeholder=\"Criterion Title\"\r\n                                    />\r\n                                    <span\r\n                                        class=\"col-md-auto input-group-btn d-flex align-items-center p-2\"\r\n                                        style=\"cursor: pointer\"\r\n                                        id=\"reset-criteria-button\"\r\n                                        (click)=\"resetCriterionTitle(criteria)\"\r\n                                    >\r\n                                        <fa-icon [icon]=\"faUndo\" ngbTooltip=\"{{ 'artemisApp.exercise.resetAssessmentCriterionTitle' | artemisTranslate }}\" />\r\n                                    </span>\r\n                                    <div class=\"col-md-auto input-group-btn d-flex align-items-center\">\r\n                                        <span class=\"btn btn-block btn-danger\" id=\"delete-criteria-button\" (click)=\"deleteGradingCriterion(criteria)\">\r\n                                            <fa-icon [icon]=\"faTrash\" />\r\n                                            <span jhiTranslate=\"artemisApp.exercise.deleteAssessmentCriterion\"></span>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        @if (criteria.structuredGradingInstructions!) {\r\n                            <div>\r\n                                @for (instruction of criteria.structuredGradingInstructions; track instruction; let index = $index) {\r\n                                    <div>\r\n                                        <div class=\"instructions row-cols-2 mb-1\">\r\n                                            <jhi-markdown-editor-monaco\r\n                                                #markdownEditors\r\n                                                class=\"editor col-md-8\"\r\n                                                [metaActions]=\"[]\"\r\n                                                [defaultActions]=\"[]\"\r\n                                                [headerActions]=\"undefined\"\r\n                                                [colorAction]=\"undefined\"\r\n                                                [showEditButton]=\"false\"\r\n                                                [showPreviewButton]=\"false\"\r\n                                                [domainActions]=\"[]\"\r\n                                                (markdownChange)=\"prepareForSave()\"\r\n                                                (textWithDomainActionsFound)=\"onInstructionChange($event, instruction)\"\r\n                                                [enableFileUpload]=\"false\"\r\n                                                [enableResize]=\"false\"\r\n                                                [resizableMinHeight]=\"MarkdownEditorHeight.INLINE\"\r\n                                                [linkEditorHeightToContentHeight]=\"true\"\r\n                                            />\r\n                                            <div class=\"form-group text-center col-md-4\" style=\"display: block\">\r\n                                                <span class=\"re-evaluate-button\" id=\"reset-button\" (click)=\"resetInstruction(instruction, criteria)\">\r\n                                                    <fa-icon [icon]=\"faUndo\" size=\"2x\" ngbTooltip=\"{{ 'artemisApp.exercise.resetAssessmentInstruction' | artemisTranslate }}\" />\r\n                                                </span>\r\n                                                <span class=\"re-evaluate-button\" id=\"delete-button\" (click)=\"deleteInstruction(instruction, criteria)\">\r\n                                                    <fa-icon [icon]=\"faTrash\" size=\"2x\" ngbTooltip=\"{{ 'artemisApp.exercise.deleteAssessmentInstruction' | artemisTranslate }}\" />\r\n                                                </span>\r\n                                                <span class=\"re-evaluate-button\" id=\"add-button\" (click)=\"addInstruction(criteria)\">\r\n                                                    <fa-icon [icon]=\"faPlus\" size=\"2x\" ngbTooltip=\"{{ 'artemisApp.exercise.addAssessmentInstruction' | artemisTranslate }}\" />\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div class=\"row mt-2\">\r\n                <div class=\"col-12 col-sm-6 col-xl-3 mb-1\">\r\n                    <button id=\"add-criteria-button\" class=\"btn btn-block btn-success\" (click)=\"addGradingCriterion()\">\r\n                        <fa-icon [icon]=\"faPlus\" />\r\n                        <span jhiTranslate=\"artemisApp.exercise.addAssessmentCriterion\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, EventEmitter, Output, inject } from '@angular/core';\r\nimport { faBan, faCheck, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-update-warning',\r\n    templateUrl: './exercise-update-warning.component.html',\r\n    styleUrls: ['./exercise-update-warning.component.scss'],\r\n    imports: [TranslateDirective, FormsModule, FaIconComponent],\r\n})\r\nexport class ExerciseUpdateWarningComponent {\r\n    activeModal = inject(NgbActiveModal);\r\n\r\n    instructionDeleted = false;\r\n    creditChanged = false;\r\n    deleteFeedback = false;\r\n    usageCountChanged = false;\r\n    immediateReleaseWarning = '';\r\n\r\n    @Output()\r\n    confirmed = new EventEmitter<object>();\r\n\r\n    @Output()\r\n    reEvaluated = new EventEmitter<object>();\r\n\r\n    canceled = new EventEmitter<void>();\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faCheck = faCheck;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    /**\r\n     * Closes the modal\r\n     */\r\n    clear(): void {\r\n        this.canceled.emit();\r\n        this.activeModal.close();\r\n    }\r\n\r\n    /**\r\n     * Save changes without re-evaluation\r\n     */\r\n    saveExerciseWithoutReevaluation(): void {\r\n        this.confirmed.emit();\r\n        this.activeModal.close();\r\n    }\r\n\r\n    /**\r\n     * Re-evaluate the exercise\r\n     */\r\n    reEvaluateExercise(): void {\r\n        this.reEvaluated.emit();\r\n        this.activeModal.close();\r\n    }\r\n\r\n    /**\r\n     * Toggle the option to deleteFeedback\r\n     */\r\n    toggleDeleteFeedback() {\r\n        this.deleteFeedback = !this.deleteFeedback;\r\n    }\r\n}\r\n", "<div style=\"padding: 20px\">\r\n    <div class=\"warning\">\r\n        <div><span jhiTranslate=\"artemisApp.exercise.update.warning.warning\"></span></div>\r\n        <ul class=\"warning-problem\">\r\n            @if (creditChanged) {\r\n                <li class=\"warning-problem-element\"><span jhiTranslate=\"artemisApp.exercise.update.warning.creditChanged\"></span></li>\r\n            }\r\n            @if (usageCountChanged) {\r\n                <li class=\"warning-problem-element\"><span jhiTranslate=\"artemisApp.exercise.update.warning.usageCountChanged\"></span></li>\r\n            }\r\n            @if (instructionDeleted) {\r\n                <li class=\"warning-problem-element\"><span jhiTranslate=\"artemisApp.exercise.update.warning.instructionDeleted\"></span></li>\r\n            }\r\n            @if (immediateReleaseWarning) {\r\n                <li class=\"warning-problem-element\"><span jhiTranslate=\"{{ immediateReleaseWarning }}\"></span></li>\r\n            }\r\n        </ul>\r\n        @if (instructionDeleted) {\r\n            <div class=\"warning-info\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" name=\"deleteFeedback\" id=\"deleteFeedback\" [ngModel]=\"deleteFeedback\" (ngModelChange)=\"toggleDeleteFeedback()\" />\r\n                <label class=\"form-check-label text-danger\" for=\"deleteFeedback\" jhiTranslate=\"artemisApp.exercise.update.warning.deleteFeedback\"></label>\r\n            </div>\r\n        }\r\n        @if (creditChanged || usageCountChanged || instructionDeleted) {\r\n            <ul class=\"warning-info\">\r\n                <li class=\"warning-info\"><span jhiTranslate=\"artemisApp.exercise.update.warning.problems\"></span></li>\r\n                <li class=\"warning-info\"><span jhiTranslate=\"artemisApp.exercise.update.warning.information\"></span></li>\r\n            </ul>\r\n        }\r\n    </div>\r\n    <div class=\"edit-modal-footer-content\">\r\n        <div class=\"warning\"><span jhiTranslate=\"artemisApp.exercise.update.warning.confirmText\"></span></div>\r\n        <div class=\"form-group\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" id=\"cancel-button\" data-dismiss=\"modal\" (click)=\"clear()\">\r\n                <fa-icon [icon]=\"faBan\" />\r\n                <span jhiTranslate=\"entity.action.cancel\"></span>\r\n            </button>\r\n            @if (creditChanged || usageCountChanged || instructionDeleted) {\r\n                @if (creditChanged || usageCountChanged || instructionDeleted) {\r\n                    <button\r\n                        type=\"submit\"\r\n                        id=\"no-reevaluate-button\"\r\n                        (click)=\"saveExerciseWithoutReevaluation()\"\r\n                        [disabled]=\"instructionDeleted && deleteFeedback\"\r\n                        class=\"btn btn-warning\"\r\n                    >\r\n                        <fa-icon [icon]=\"faExclamationTriangle\" />\r\n                        <span jhiTranslate=\"artemisApp.exercise.update.warning.saveExerciseWithoutReevaluation\"></span>\r\n                    </button>\r\n                }\r\n                @if (creditChanged || usageCountChanged || instructionDeleted) {\r\n                    <button type=\"submit\" id=\"reevaluate-button\" (click)=\"reEvaluateExercise()\" class=\"btn btn-success\">\r\n                        <fa-icon [icon]=\"faCheck\" />\r\n                        <span jhiTranslate=\"artemisApp.exercise.update.warning.reevaluateExercise\"></span>\r\n                    </button>\r\n                }\r\n            } @else {\r\n                <button type=\"submit\" id=\"save-button\" (click)=\"saveExerciseWithoutReevaluation()\" class=\"btn btn-primary\">\r\n                    <fa-icon [icon]=\"faCheck\" />\r\n                    <span jhiTranslate=\"entity.action.save\"></span>\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, Injectable, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\r\nimport { ExerciseUpdateWarningComponent } from 'app/exercises/shared/exercise-update-warning/exercise-update-warning.component';\r\nimport dayjs from 'dayjs/esm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExerciseUpdateWarningService {\r\n    private modalService = inject(NgbModal);\r\n\r\n    private ngbModalRef: NgbModalRef;\r\n\r\n    instructionDeleted: boolean;\r\n    creditChanged: boolean;\r\n    usageCountChanged: boolean;\r\n    immediateReleaseWarning: string;\r\n    isSaving: boolean;\r\n\r\n    isExamMode: boolean;\r\n\r\n    /**\r\n     * Open the modal with the given content for the given exercise.\r\n     * @param component the content that should be shown\r\n     */\r\n    open(component: Component): NgbModalRef {\r\n        const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.instructionDeleted = this.instructionDeleted;\r\n        modalRef.componentInstance.creditChanged = this.creditChanged;\r\n        modalRef.componentInstance.usageCountChanged = this.usageCountChanged;\r\n        modalRef.componentInstance.immediateReleaseWarning = this.immediateReleaseWarning;\r\n\r\n        return modalRef;\r\n    }\r\n\r\n    /**\r\n     * check if there might be unwanted changes and inform the instructor by opening warning modal before updating the exercise\r\n     *\r\n     * @param exercise the exercise for which the modal should be shown\r\n     * @param backupExercise the copy of exercise for which the modal should be shown\r\n     * @param isExamMode flag that indicates if the exercise is part of an exam\r\n     */\r\n    checkExerciseBeforeUpdate(exercise: Exercise, backupExercise: Exercise, isExamMode: boolean): Promise<NgbModalRef> {\r\n        if (exercise.course?.testCourse) {\r\n            return new Promise<NgbModalRef>((resolve) => resolve(this.ngbModalRef));\r\n        }\r\n\r\n        this.initializeVariables(isExamMode);\r\n        this.loadExercise(exercise, backupExercise);\r\n        this.checkImmediateRelease(exercise, backupExercise);\r\n        return new Promise<NgbModalRef>((resolve) => {\r\n            if (this.creditChanged || this.instructionDeleted || this.usageCountChanged || this.immediateReleaseWarning) {\r\n                this.ngbModalRef = this.open(ExerciseUpdateWarningComponent as Component);\r\n            }\r\n            resolve(this.ngbModalRef);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resets all possible warnings and checks if the exercise is part of an exam\r\n     */\r\n    initializeVariables(isExamMode: boolean) {\r\n        this.instructionDeleted = false;\r\n        this.creditChanged = false;\r\n        this.usageCountChanged = false;\r\n        this.immediateReleaseWarning = '';\r\n        this.isExamMode = isExamMode;\r\n    }\r\n\r\n    /**\r\n     * check if the changes affect the existing results\r\n     *  1. check if a grading criterion is deleted\r\n     *  2. check for each grading instruction if:\r\n     *          - it is deleted\r\n     *          - the credit is changed\r\n     *          - usage count is changed\r\n     *\r\n     * @param exercise the exercise for which the modal should be shown\r\n     * @param backupExercise the copy of exercise for which the modal should be shown\r\n     */\r\n    loadExercise(exercise: Exercise, backupExercise: Exercise): void {\r\n        // check each grading criterion\r\n        backupExercise.gradingCriteria?.forEach((backupCriterion) => {\r\n            // find same grading criterion in backup exercise (necessary if the order has been changed)\r\n            const updatedCriterion = exercise.gradingCriteria?.find((criterion) => criterion.id === backupCriterion.id);\r\n\r\n            if (updatedCriterion) {\r\n                backupCriterion.structuredGradingInstructions?.forEach((backupGradingInstruction) => {\r\n                    const updatedGradingInstruction = updatedCriterion.structuredGradingInstructions?.find(\r\n                        (gradingInstruction) => gradingInstruction.id === backupGradingInstruction.id,\r\n                    );\r\n                    if (updatedGradingInstruction) {\r\n                        this.checkGradingInstruction(updatedGradingInstruction, backupGradingInstruction);\r\n                    } else {\r\n                        this.instructionDeleted = true;\r\n                    }\r\n                });\r\n            } else {\r\n                this.instructionDeleted = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 1. compare backupInstruction and instruction\r\n     * 2. set flags based on detected changes\r\n     *\r\n     * @param gradingInstruction changed instruction\r\n     * @param backupGradingInstruction original not changed instruction\r\n     */\r\n    checkGradingInstruction(gradingInstruction: GradingInstruction, backupGradingInstruction: GradingInstruction): void {\r\n        // checking whether structured grading instruction credits or usageCount changed\r\n        this.creditChanged = gradingInstruction.credits !== backupGradingInstruction.credits;\r\n        this.usageCountChanged = gradingInstruction.usageCount !== backupGradingInstruction.usageCount;\r\n    }\r\n\r\n    /**\r\n     * Checks if the exercise will be released immediately to students and if students did not see the exercise before\r\n     *\r\n     * @param exercise the updated exercise\r\n     * @param backupExercise the optional exercise before the update that might already be released\r\n     */\r\n    checkImmediateRelease(exercise: Exercise, backupExercise: Exercise) {\r\n        const noReleaseDate = !exercise.releaseDate || !dayjs(exercise.releaseDate).isValid();\r\n        const creationOrReleaseDateBefore = !exercise.id || (backupExercise.releaseDate && dayjs(backupExercise.releaseDate).isValid());\r\n        if (noReleaseDate && !this.isExamMode && creationOrReleaseDateBefore) {\r\n            this.immediateReleaseWarning = exercise.startDate ? 'artemisApp.exercise.noReleaseDateWarning' : 'artemisApp.exercise.noReleaseAndStartDateWarning';\r\n        }\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\n\r\nexport class TeamAssignmentConfig implements BaseEntity {\r\n    public id?: number;\r\n    public exercise?: Exercise;\r\n    public minTeamSize?: number;\r\n    public maxTeamSize?: number;\r\n\r\n    constructor() {\r\n        this.minTeamSize = 1; // default value\r\n        this.maxTeamSize = 5; // default value\r\n    }\r\n}\r\n", "import { AfterViewChecked, Component, EventEmitter, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { TeamAssignmentConfig } from 'app/entities/team-assignment-config.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Exercise, ExerciseMode } from 'app/entities/exercise.model';\r\nimport { ModePickerOption } from 'app/exercises/shared/mode-picker/mode-picker.component';\r\nimport { FormsModule, NgModel } from '@angular/forms';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { ModePickerComponent } from '../mode-picker/mode-picker.component';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { RemoveKeysPipe } from 'app/shared/pipes/remove-keys.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-team-config-form-group',\r\n    templateUrl: './team-config-form-group.component.html',\r\n    styleUrls: ['./team-config-form-group.component.scss'],\r\n    imports: [TranslateDirective, HelpIconComponent, ModePickerComponent, FormsModule, KeyValuePipe, RemoveKeysPipe],\r\n})\r\nexport class TeamConfigFormGroupComponent implements AfterViewChecked, OnDestroy, OnInit {\r\n    readonly INDIVIDUAL = ExerciseMode.INDIVIDUAL;\r\n    readonly TEAM = ExerciseMode.TEAM;\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() isImport: boolean;\r\n\r\n    @ViewChild('minTeamSize') minTeamSizeField?: NgModel;\r\n    @ViewChild('maxTeamSize') maxTeamsizeField?: NgModel;\r\n\r\n    formValid: boolean;\r\n    formValidChanges = new Subject<boolean>();\r\n\r\n    config: TeamAssignmentConfig;\r\n    readonly modePickerOptions: ModePickerOption<ExerciseMode>[] = [\r\n        {\r\n            value: ExerciseMode.INDIVIDUAL,\r\n            labelKey: 'artemisApp.exercise.modes.individual',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n        {\r\n            value: ExerciseMode.TEAM,\r\n            labelKey: 'artemisApp.exercise.modes.team',\r\n            btnClass: 'btn-info',\r\n        },\r\n    ];\r\n\r\n    inputFieldSubscriptions: (Subscription | undefined)[] = [];\r\n\r\n    /**\r\n     * Life cycle hook to indicate component creation is done\r\n     */\r\n    ngOnInit() {\r\n        this.config = this.exercise.teamAssignmentConfig || new TeamAssignmentConfig();\r\n        this.calculateFormValid();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (!(this.minTeamSizeField?.valueChanges as EventEmitter<number>)?.observed) {\r\n            this.inputFieldSubscriptions.push(this.minTeamSizeField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        }\r\n        if (!(this.maxTeamsizeField?.valueChanges as EventEmitter<number>)?.observed) {\r\n            this.inputFieldSubscriptions.push(this.maxTeamsizeField?.valueChanges?.subscribe(() => this.calculateFormValid()));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        for (const subscription of this.inputFieldSubscriptions) {\r\n            subscription?.unsubscribe();\r\n        }\r\n    }\r\n\r\n    calculateFormValid() {\r\n        this.formValid = Boolean(!this.exercise.mode || this.exercise.mode === ExerciseMode.INDIVIDUAL || (this.maxTeamsizeField?.valid && this.minTeamSizeField?.valid));\r\n        this.formValidChanges.next(this.formValid);\r\n    }\r\n\r\n    get changeExerciseModeDisabled(): boolean {\r\n        // Should be disabled if exercise is present (-> edit menu), but not if menu is shown during import\r\n        // (old exercise id is present). Should also not be present for exam exercises.\r\n        return (!this.isImport && Boolean(this.exercise.id)) || !!this.exercise.exerciseGroup;\r\n    }\r\n\r\n    /**\r\n     * Hook to indicate that exercise mode changed\r\n     * @param {ExerciseMode} mode - Exercise mode\r\n     */\r\n    onExerciseModeChange(mode: ExerciseMode) {\r\n        this.exercise.mode = mode;\r\n        if (mode === ExerciseMode.TEAM) {\r\n            this.applyCurrentConfig();\r\n        } else {\r\n            this.exercise.teamAssignmentConfig = undefined;\r\n        }\r\n        this.calculateFormValid();\r\n    }\r\n\r\n    /**\r\n     * Update minimum number of team members\r\n     * @param {number} minTeamSize - minimum number of team members\r\n     */\r\n    updateMinTeamSize(minTeamSize: number) {\r\n        this.config.maxTeamSize = Math.max(this.config.maxTeamSize!, minTeamSize);\r\n        this.applyCurrentConfig();\r\n    }\r\n\r\n    /**\r\n     * Update maximum number of team members\r\n     * @param {number} maxTeamSize - maximum number of team members\r\n     */\r\n    updateMaxTeamSize(maxTeamSize: number) {\r\n        this.config.minTeamSize = Math.min(this.config.minTeamSize!, maxTeamSize);\r\n        this.applyCurrentConfig();\r\n    }\r\n\r\n    private applyCurrentConfig() {\r\n        this.exercise.teamAssignmentConfig = cloneDeep(this.config);\r\n    }\r\n}\r\n", "<div class=\"form-group\">\r\n    <div class=\"row\">\r\n        <div class=\"col-auto\">\r\n            <div>\r\n                <label jhiTranslate=\"artemisApp.exercise.participation\"></label>\r\n                <jhi-help-icon text=\"artemisApp.exercise.modeTooltip\" />\r\n            </div>\r\n            <div>\r\n                <jhi-mode-picker [options]=\"modePickerOptions\" [value]=\"exercise.mode\" (valueChange)=\"onExerciseModeChange($event!)\" [disabled]=\"changeExerciseModeDisabled\" />\r\n            </div>\r\n        </div>\r\n        @if (exercise.mode === TEAM) {\r\n            <div class=\"col-auto\">\r\n                <div>\r\n                    <label class=\"label-narrow\" jhiTranslate=\"artemisApp.exercise.teamAssignmentConfig.teamSize\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.exercise.teamAssignmentConfig.teamSizeTooltip\" />\r\n                </div>\r\n                <div>\r\n                    <div class=\"input-group\">\r\n                        <div class=\"input-group-prepend\">\r\n                            <label class=\"input-group-text\" for=\"field_minTeamSize\">Min</label>\r\n                        </div>\r\n                        <input\r\n                            name=\"minTeamSize\"\r\n                            id=\"field_minTeamSize\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            max=\"99\"\r\n                            required\r\n                            class=\"form-control input-number-short\"\r\n                            [(ngModel)]=\"config.minTeamSize\"\r\n                            (ngModelChange)=\"updateMinTeamSize($event)\"\r\n                            #minTeamSize=\"ngModel\"\r\n                        />\r\n                        <div class=\"input-group-append\">\r\n                            <label class=\"input-group-text\" for=\"field_maxTeamSize\">Max</label>\r\n                        </div>\r\n                        <input\r\n                            name=\"maxTeamSize\"\r\n                            id=\"field_maxTeamSize\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            max=\"99\"\r\n                            required\r\n                            class=\"form-control input-number-short\"\r\n                            [(ngModel)]=\"config.maxTeamSize\"\r\n                            (ngModelChange)=\"updateMaxTeamSize($event)\"\r\n                            #maxTeamSize=\"ngModel\"\r\n                        />\r\n                    </div>\r\n                    @for (e of minTeamSize.errors! | keyvalue | removekeys: ['required']; track e) {\r\n                        @if (minTeamSize.invalid && (minTeamSize.dirty || minTeamSize.touched)) {\r\n                            <div class=\"alert alert-danger\">\r\n                                <div [jhiTranslate]=\"'artemisApp.exercise.form.minTeamSize' + '.' + e.key\"></div>\r\n                            </div>\r\n                        }\r\n                    }\r\n                    @for (e of maxTeamSize.errors! | keyvalue | removekeys: ['required']; track e) {\r\n                        @if (maxTeamSize.invalid && (maxTeamSize.dirty || maxTeamSize.touched)) {\r\n                            <div class=\"alert alert-danger\">\r\n                                <div [jhiTranslate]=\"'artemisApp.exercise.form.maxTeamSize' + '.' + e.key\"></div>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n", "import { Component, input, output } from '@angular/core';\r\nimport { faHandshakeAngle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { ButtonComponent, ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-switch-edit-mode-button',\r\n    templateUrl: './switch-edit-mode-button.component.html',\r\n    imports: [ButtonComponent],\r\n})\r\nexport class SwitchEditModeButtonComponent {\r\n    protected readonly faHandShakeAngle = faHandshakeAngle;\r\n    protected readonly ButtonType = ButtonType;\r\n\r\n    switchEditMode = output<void>();\r\n    isSimpleMode = input.required<boolean>();\r\n    buttonSize = input<ButtonSize>(ButtonSize.MEDIUM);\r\n    disabled = input<boolean>(true);\r\n\r\n    protected toggleEditMode(): void {\r\n        this.switchEditMode.emit();\r\n    }\r\n}\r\n", "<jhi-button\r\n    id=\"switch-edit-mode-button\"\r\n    [btnType]=\"ButtonType.PRIMARY\"\r\n    [btnSize]=\"buttonSize()\"\r\n    [icon]=\"faHandShakeAngle\"\r\n    [title]=\"isSimpleMode() ? 'artemisApp.programmingExercise.home.switchToAdvancedMode' : 'artemisApp.programmingExercise.home.switchToSimpleMode'\"\r\n    (onClick)=\"toggleEditMode()\"\r\n    [disabled]=\"disabled()\"\r\n/>\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-update-notification',\r\n    templateUrl: './exercise-update-notification.component.html',\r\n    imports: [FormsModule, ArtemisTranslatePipe],\r\n})\r\nexport class ExerciseUpdateNotificationComponent {\r\n    @Input() isCreation = false;\r\n    @Input() isImport: boolean;\r\n    @Input() notificationText?: string;\r\n    @Output() notificationTextChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    onInputChanged() {\r\n        this.notificationTextChange.emit(this.notificationText);\r\n    }\r\n}\r\n", "<input\r\n    placeholder=\"{{ 'artemisApp.exercise.notificationText' | artemisTranslate }}\"\r\n    title=\"{{ 'artemisApp.exercise.notificationText' | artemisTranslate }}\"\r\n    minlength=\"3\"\r\n    type=\"text\"\r\n    class=\"form-control form-control-sm\"\r\n    name=\"notificationText\"\r\n    id=\"field_notification_text\"\r\n    (change)=\"onInputChanged()\"\r\n    [(ngModel)]=\"notificationText\"\r\n/>\r\n", "import { Component, EventEmitter, Input, Output, computed, input } from '@angular/core';\r\nimport { ValidationReason } from 'app/entities/exercise.model';\r\nimport { faBan, faExclamationCircle, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SwitchEditModeButtonComponent } from '../../exercises/programming/manage/update/switch-edit-mode-button/switch-edit-mode-button.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { ExerciseUpdateNotificationComponent } from '../../exercises/shared/exercise-update-notification/exercise-update-notification.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-form-footer',\r\n    templateUrl: 'form-footer.component.html',\r\n    styleUrls: ['form-footer.component.scss'],\r\n    imports: [\r\n        NgbTooltip,\r\n        SwitchEditModeButtonComponent,\r\n        HelpIconComponent,\r\n        ExerciseUpdateNotificationComponent,\r\n        TranslateDirective,\r\n        FaIconComponent,\r\n        ButtonComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class FormFooterComponent {\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly faSave = faSave;\r\n    protected readonly faBan = faBan;\r\n    protected readonly faExclamationCircle = faExclamationCircle;\r\n\r\n    @Input() isSaving = false;\r\n    @Input() isDisabled = false;\r\n    @Input() invalidReasons: ValidationReason[] = [];\r\n    @Input() notificationText?: string;\r\n    @Input() switchEditMode?: () => void;\r\n    isImport = input<boolean>();\r\n    isCreation = input<boolean>();\r\n    isSimpleMode = input<boolean>();\r\n    areAuxiliaryRepositoriesValid = input<boolean>(true);\r\n\r\n    @Output() notificationTextChange = new EventEmitter<string>();\r\n    @Output() save = new EventEmitter<void>();\r\n    @Output() onCancel = new EventEmitter<void>();\r\n\r\n    saveTitle = computed<string>(() => (this.isImport() ? 'entity.action.import' : this.isCreation() ? 'entity.action.generate' : 'entity.action.save'));\r\n}\r\n", "<div class=\"update-footer gap-4\">\r\n    <div class=\"text-start\">\r\n        @if (isSimpleMode() !== undefined && switchEditMode !== undefined && !isImport()) {\r\n            <div class=\"d-flex align-items-center\">\r\n                <div\r\n                    ngbTooltip=\"{{ 'artemisApp.programmingExercise.auxiliaryRepository.invalidConfigurationPreventsSwitchingEditMode' | artemisTranslate }}\"\r\n                    [disableTooltip]=\"areAuxiliaryRepositoriesValid()\"\r\n                >\r\n                    <jhi-switch-edit-mode-button\r\n                        class=\"me-1\"\r\n                        [isSimpleMode]=\"isSimpleMode()!\"\r\n                        (switchEditMode)=\"switchEditMode()\"\r\n                        [buttonSize]=\"ButtonSize.SMALL\"\r\n                        [disabled]=\"!areAuxiliaryRepositoriesValid()\"\r\n                    />\r\n                </div>\r\n                <jhi-help-icon [text]=\"isSimpleMode() ? 'artemisApp.programmingExercise.home.advancedModeTooltip' : 'artemisApp.programmingExercise.home.simpleModeTooltip'\" />\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (!isCreation() && !isImport()) {\r\n        <jhi-exercise-update-notification class=\"flex-grow-1 w-100\" [notificationText]=\"notificationText\" (notificationTextChange)=\"notificationTextChange.next($event)\" />\r\n    }\r\n    <div class=\"d-flex gap-2 text-end\">\r\n        @if (isSaving) {\r\n            <span jhiTranslate=\"entity.action.saving\" class=\"badge bg-secondary align-content-center\"></span>\r\n        }\r\n        <ng-template #tooltipTranslate>\r\n            @for (reason of invalidReasons; track reason) {\r\n                <div>\r\n                    <p jhiTranslate=\"{{ reason.translateKey }}\"></p>\r\n                </div>\r\n            }\r\n        </ng-template>\r\n        @if (invalidReasons.length) {\r\n            <div class=\"badge bg-danger align-content-center toggle-width\" [ngbTooltip]=\"tooltipTranslate\" tooltip-placement=\"top-right auto\">\r\n                <fa-icon [fixedWidth]=\"true\" [icon]=\"faExclamationCircle\" />\r\n\r\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"global.form.invalidInput\"></span>\r\n                <span class=\"d-none d-md-inline\">({{ invalidReasons.length }})</span>\r\n            </div>\r\n        }\r\n        <button type=\"button\" id=\"cancel-save\" class=\"btn btn-sm btn-secondary\" (click)=\"onCancel.next()\">\r\n            <fa-icon [fixedWidth]=\"true\" [icon]=\"faBan\" class=\"sm\" />\r\n            <span class=\"d-none d-sm-inline\" jhiTranslate=\"entity.action.cancel\"></span>\r\n        </button>\r\n        <jhi-button\r\n            id=\"save-entity\"\r\n            [shouldToggle]=\"true\"\r\n            [disabled]=\"!!invalidReasons.length || isDisabled\"\r\n            [isLoading]=\"isSaving\"\r\n            [icon]=\"faSave\"\r\n            [title]=\"saveTitle()\"\r\n            (onClick)=\"save.next()\"\r\n            [btnSize]=\"ButtonSize.SMALL\"\r\n        />\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "exercise", "presentationScoreEnabled", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faQuestionCircle", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "PresentationScoreComponent_ng_container_1_Conditional_2_Template", "\u0275\u0275conditional", "showPresentationScoreCheckbox", "PresentationScoreComponent", "gradingSystemService", "inject", "GradingSystemService", "Authority", "gradeStepsDTO", "gradeStepsDTOSub", "ngDoCheck", "course", "id", "findGradeStepsForCourse", "subscribe", "body", "ngOnDestroy", "unsubscribe", "isBasicPresentation", "isGradedPresentation", "presentationScore", "presentationsNumber", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "PresentationScoreComponent_ng_container_1_Template", "\u0275\u0275pureFunction3", "_c0", "ADMIN", "INSTRUCTOR", "EDITOR", "HasAnyAuthorityDirective", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "TranslateDirective", "FaIconComponent", "NgbTooltip", "ArtemisTranslatePipe", "encapsulation", "GradingInstruction", "id", "credits", "gradingScale", "instructionDescription", "feedback", "usageCount", "GradingCreditsAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "undefined", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "GradingScaleAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "undefined", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "GradingDescriptionAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "undefined", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "GradingFeedbackAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "undefined", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "GradingUsageCountAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "undefined", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "GradingCriterionAction", "TextEditorDomainAction", "gradingInstructionAction", "ID", "IDENTIFIER", "TEXT", "constructor", "run", "editor", "addTextWithDomainActionIdentifier", "executeInCurrentEditor", "getOpeningIdentifier", "GradingInstructionAction", "TextEditorDomainAction", "creditsAction", "scaleAction", "descriptionAction", "feedbackAction", "usageCountAction", "ID", "IDENTIFIER", "constructor", "run", "editor", "addTextWithDomainActionIdentifier", "executeInCurrentEditor", "getOpeningIdentifier", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "instruction_r7", "\u0275\u0275restoreView", "_r6", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "credits", "\u0275\u0275resetView", "\u0275\u0275listener", "criterion_r5", "\u0275\u0275nextContext", "ctx_r1", "updateGradingInstruction", "\u0275\u0275elementEnd", "gradingScale", "instructionDescription", "feedback", "usageCount", "deleteInstruction", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275property", "faTrash", "_r4", "title", "onCriterionTitleChange", "deleteGradingCriterion", "\u0275\u0275repeaterCreate", "GradingInstructionsDetailsComponent_Conditional_1_Conditional_19_For_4_For_83_Template", "\u0275\u0275repeaterTrackByIdentity", "addNewInstruction", "\u0275\u0275repeater", "structuredGradingInstructions", "faPlus", "GradingInstructionsDetailsComponent_Conditional_1_Conditional_19_For_4_Template", "_r3", "addNewGradingCriterion", "exercise", "gradingCriteria", "_r8", "prepareForSave", "onDomainActionsFound", "markdownEditorText", "domainActionsForMainEditor", "MarkdownEditorHeight", "MEDIUM", "_r1", "switchMode", "\u0275\u0275template", "GradingInstructionsDetailsComponent_Conditional_1_Conditional_19_Template", "GradingInstructionsDetailsComponent_Conditional_1_Conditional_20_Template", "\u0275\u0275pureFunction2", "_c2", "showEditMode", "\u0275\u0275conditional", "_r12", "instruction_r13", "onInstructionChange", "criteria_r11", "resetInstruction", "addInstruction", "\u0275\u0275pureFunction0", "_c3", "undefined", "INLINE", "faUndo", "GradingInstructionsDetailsComponent_Conditional_2_For_12_Conditional_32_For_4_Template", "_r10", "resetCriterionTitle", "GradingInstructionsDetailsComponent_Conditional_2_For_12_Conditional_32_Template", "\u0275\u0275styleProp", "_r9", "setExerciseGradingInstructionText", "GradingInstructionsDetailsComponent_Conditional_2_For_12_Template", "addGradingCriterion", "domainActionsForGradingInstructionParsing", "GradingInstructionsDetailsComponent", "changeDetector", "inject", "ChangeDetectorRef", "markdownEditors", "markdownEditor", "instructions", "criteria", "backupExercise", "creditsAction", "GradingCreditsAction", "gradingScaleAction", "GradingScaleAction", "descriptionAction", "GradingDescriptionAction", "feedbackAction", "GradingFeedbackAction", "usageCountAction", "GradingUsageCountAction", "gradingInstructionAction", "GradingInstructionAction", "gradingCriterionAction", "GradingCriterionAction", "ngOnInit", "cloneDeep", "generateMarkdown", "ngAfterContentInit", "gradingInstructionFeedbackUsed", "initializeExerciseGradingInstructionText", "initializeMarkdown", "index", "detectChanges", "forEach", "criterion", "instruction", "get", "markdown", "generateInstructionText", "markdownText", "generateInstructionsMarkdown", "IDENTIFIER", "length", "newInstruction", "GradingInstruction", "push", "generateCreditsText", "generateGradingScaleText", "generateInstructionDescriptionText", "generateInstructionFeedback", "generateUsageCount", "creditsText", "TEXT", "creditsIdentifier", "parseFloat", "parseInt", "gradingInstructions", "cleanupExerciseGradingInstructions", "parseMarkdown", "component", "hasCriterionAction", "textWithDomainActions", "some", "action", "createSubInstructionActions", "instructionActions", "criterionActions", "endOfInstructionsAction", "setParentForInstructionsWithNoCriterion", "slice", "groupInstructionsToCriteria", "dummyCriterion", "GradingCriterion", "setInstructionParameters", "initialCriterionActions", "text", "newCriterion", "arrayWithoutCriterion", "endOfCriterion", "remainingTextWithDomainAction", "instrAction", "filter", "criterionIndex", "findCriterionIndex", "backupCriterionIndex", "instructionIndex", "indexOf", "backupInstructionIndex", "findInstructionIndex", "findIndex", "id", "gradingInstruction", "splice", "target", "value", "selectors", "viewQuery", "rf", "ctx", "GradingInstructionsDetailsComponent_Conditional_1_Template", "GradingInstructionsDetailsComponent_Conditional_2_Template", "NgClass", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "MinValidator", "NgModel", "FaIconComponent", "HelpIconComponent", "NgbTooltip", "MarkdownEditorMonacoComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "ctx_r0", "immediateReleaseWarning", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleDeleteFeedback", "\u0275\u0275property", "deleteFeedback", "_r3", "saveExerciseWithoutReevaluation", "instructionDeleted", "faExclamationTriangle", "_r4", "reEvaluateExercise", "faCheck", "\u0275\u0275template", "ExerciseUpdateWarningComponent_Conditional_31_Conditional_1_Template", "ExerciseUpdateWarningComponent_Conditional_31_Conditional_2_Template", "\u0275\u0275conditional", "creditChanged", "usageCountChanged", "_r5", "ExerciseUpdateWarningComponent", "activeModal", "inject", "NgbActiveModal", "confirmed", "EventEmitter", "reEvaluated", "canceled", "faBan", "clear", "emit", "close", "selectors", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ExerciseUpdateWarningComponent_Conditional_9_Template", "ExerciseUpdateWarningComponent_Conditional_10_Template", "ExerciseUpdateWarningComponent_Conditional_11_Template", "ExerciseUpdateWarningComponent_Conditional_12_Template", "ExerciseUpdateWarningComponent_Conditional_14_Template", "ExerciseUpdateWarningComponent_Conditional_15_Template", "ExerciseUpdateWarningComponent_Conditional_31_Template", "ExerciseUpdateWarningComponent_Conditional_32_Template", "TranslateDirective", "FormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "styles", "ExerciseUpdateWarningService", "modalService", "inject", "NgbModal", "ngbModalRef", "instructionDeleted", "creditChanged", "usageCountChanged", "immediateReleaseWarning", "isSaving", "isExamMode", "open", "component", "modalRef", "size", "backdrop", "componentInstance", "checkExerciseBeforeUpdate", "exercise", "backupExercise", "course", "testCourse", "Promise", "resolve", "initializeVariables", "loadExercise", "checkImmediateRelease", "ExerciseUpdateWarningComponent", "gradingCriteria", "forEach", "backupCriterion", "updatedCriterion", "find", "criterion", "id", "structuredGradingInstructions", "backupGradingInstruction", "updatedGradingInstruction", "gradingInstruction", "checkGradingInstruction", "credits", "usageCount", "noReleaseDate", "releaseDate", "dayjs", "isValid", "creationOrReleaseDateBefore", "startDate", "factory", "\u0275fac", "providedIn", "TeamAssignmentConfig", "id", "exercise", "minTeamSize", "maxTeamSize", "constructor", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "e_r3", "key", "\u0275\u0275template", "TeamConfigFormGroupComponent_Conditional_19_For_34_Conditional_1_Template", "\u0275\u0275conditional", "minTeamSize_r4", "invalid", "dirty", "touched", "e_r5", "TeamConfigFormGroupComponent_Conditional_19_For_38_Conditional_1_Template", "maxTeamSize_r6", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "config", "minTeamSize", "\u0275\u0275resetView", "\u0275\u0275listener", "updateMinTeamSize", "maxTeamSize", "updateMaxTeamSize", "\u0275\u0275repeaterCreate", "TeamConfigFormGroupComponent_Conditional_19_For_34_Template", "\u0275\u0275repeaterTrackByIdentity", "TeamConfigFormGroupComponent_Conditional_19_For_38_Template", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "\u0275\u0275pipeBind1", "errors", "\u0275\u0275pureFunction0", "_c2", "TeamConfigFormGroupComponent", "INDIVIDUAL", "ExerciseMode", "TEAM", "exercise", "isImport", "minTeamSizeField", "maxTeamsizeField", "formValid", "formValidChanges", "Subject", "modePickerOptions", "value", "labelKey", "btnClass", "inputFieldSubscriptions", "ngOnInit", "teamAssignmentConfig", "TeamAssignmentConfig", "calculateFormValid", "ngAfterViewChecked", "valueChanges", "observed", "push", "subscribe", "ngOnDestroy", "subscription", "unsubscribe", "Boolean", "mode", "valid", "next", "changeExerciseModeDisabled", "id", "exerciseGroup", "onExerciseModeChange", "applyCurrentConfig", "undefined", "Math", "max", "min", "cloneDeep", "selectors", "viewQuery", "rf", "ctx", "TeamConfigFormGroupComponent_Conditional_19_Template", "TranslateDirective", "HelpIconComponent", "ModePickerComponent", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "RequiredValidator", "MinValidator", "MaxValidator", "NgModel", "KeyValuePipe", "RemoveKeysPipe", "styles", "SwitchEditModeButtonComponent", "faHandShakeAngle", "faHandshakeAngle", "ButtonType", "switchEditMode", "output", "isSimpleMode", "input", "required", "buttonSize", "ButtonSize", "MEDIUM", "disabled", "toggleEditMode", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275property", "PRIMARY", "ButtonComponent", "encapsulation", "ExerciseUpdateNotificationComponent", "isCreation", "isImport", "notificationText", "notificationTextChange", "EventEmitter", "onInputChanged", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "MinLengthValidator", "NgModel", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "switchEditMode", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275property", "areAuxiliaryRepositoriesValid", "isSimpleMode", "ButtonSize", "SMALL", "$event", "_r4", "notificationTextChange", "next", "notificationText", "reason_r5", "translateKey", "\u0275\u0275repeaterCreate", "FormFooterComponent_ng_template_10_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "invalidReasons", "tooltipTranslate_r6", "faExclamationCircle", "\u0275\u0275textInterpolate1", "length", "FormFooterComponent", "faSave", "faBan", "isSaving", "isDisabled", "isImport", "input", "isCreation", "EventEmitter", "save", "onCancel", "saveTitle", "computed", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "FormFooterComponent_Conditional_4_Template", "FormFooterComponent_Conditional_6_Template", "FormFooterComponent_Conditional_9_Template", "FormFooterComponent_ng_template_10_Template", "\u0275\u0275templateRefExtractor", "FormFooterComponent_Conditional_13_Template", "i0", "_r1", "\u0275\u0275conditional", "undefined", "NgbTooltip", "SwitchEditModeButtonComponent", "HelpIconComponent", "ExerciseUpdateNotificationComponent", "TranslateDirective", "FaIconComponent", "ButtonComponent", "ArtemisTranslatePipe", "styles"]
}
