{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/participate/text-result/text-result-block.ts", "src/main/webapp/app/exercises/text/participate/text-result/text-result.component.ts", "src/main/webapp/app/exercises/text/participate/text-result/text-result.component.html", "src/main/webapp/app/exercises/text/participate/text-editor.component.ts", "src/main/webapp/app/exercises/text/participate/text-editor.component.html"],
  "sourcesContent": ["import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faCheck, faCheckCircle, faCircle, faDotCircle, faTimes, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { TextBlock } from 'app/entities/text/text-block.model';\r\nimport { convertToHtmlLinebreaks, escapeString } from 'app/utils/text.utils';\r\n\r\nenum FeedbackType {\r\n    POSITIVE = 'positive',\r\n    NEGATIVE = 'negative',\r\n    NEUTRAL = 'neutral',\r\n    BLANK = 'blank',\r\n}\r\n\r\nexport class TextResultBlock {\r\n    readonly text: string;\r\n    private textBlock: TextBlock;\r\n    readonly feedback?: Feedback;\r\n\r\n    constructor(textBlock: TextBlock, feedback?: Feedback) {\r\n        this.textBlock = textBlock;\r\n        this.feedback = feedback;\r\n        this.text = convertToHtmlLinebreaks(escapeString(textBlock.text ?? ''));\r\n    }\r\n\r\n    get length(): number {\r\n        return this.endIndex - this.startIndex;\r\n    }\r\n\r\n    get startIndex(): number {\r\n        return this.textBlock.startIndex!;\r\n    }\r\n\r\n    get endIndex(): number {\r\n        return this.textBlock.endIndex!;\r\n    }\r\n\r\n    get feedbackType(): FeedbackType {\r\n        if (!this.feedback || Feedback.isEmpty(this.feedback)) {\r\n            return FeedbackType.BLANK;\r\n        } else if (this.feedback.credits! > 0) {\r\n            return FeedbackType.POSITIVE;\r\n        } else if (this.feedback.credits! < 0) {\r\n            return FeedbackType.NEGATIVE;\r\n        }\r\n        return FeedbackType.NEUTRAL;\r\n    }\r\n\r\n    get cssClass(): string {\r\n        return this.feedbackType && this.feedbackType !== FeedbackType.BLANK ? `text-with-feedback ${this.feedbackType}-feedback` : '';\r\n    }\r\n\r\n    get icon(): IconProp | undefined {\r\n        switch (this.feedbackType) {\r\n            case FeedbackType.POSITIVE:\r\n                return faCheck;\r\n            case FeedbackType.NEGATIVE:\r\n                return faTimes;\r\n            case FeedbackType.NEUTRAL:\r\n                return faCircle;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    get circleIcon(): IconProp | undefined {\r\n        switch (this.feedbackType) {\r\n            case FeedbackType.POSITIVE:\r\n                return faCheckCircle;\r\n            case FeedbackType.NEGATIVE:\r\n                return faTimesCircle;\r\n            case FeedbackType.NEUTRAL:\r\n                return faDotCircle;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    get iconCssClass(): string {\r\n        return this.feedbackType ? `feedback-icon ${this.feedbackType}-feedback` : '';\r\n    }\r\n\r\n    get feedbackCssClass(): string {\r\n        switch (this.feedbackType) {\r\n            case FeedbackType.POSITIVE:\r\n                return 'alert alert-success';\r\n            case FeedbackType.NEGATIVE:\r\n                return 'alert alert-danger';\r\n            case FeedbackType.NEUTRAL:\r\n                return 'alert alert-secondary';\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { Feedback, buildFeedbackTextForReview, checkSubsequentFeedbackInAssessment } from 'app/entities/feedback.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { TextResultBlock } from './text-result-block';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { TextBlock } from 'app/entities/text/text-block.model';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { LocaleConversionService } from 'app/shared/service/locale-conversion.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-text-result',\r\n    templateUrl: './text-result.component.html',\r\n    styleUrls: ['./text-result.component.scss'],\r\n    imports: [NgClass, FaIconComponent, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class TextResultComponent {\r\n    private translateService = inject(TranslateService);\r\n    private localeConversionService = inject(LocaleConversionService);\r\n\r\n    public submissionText: string;\r\n\r\n    public textResults: TextResultBlock[];\r\n    private submission: TextSubmission;\r\n\r\n    // Icons\r\n    faExclamationTriangle = faExclamationTriangle;\r\n\r\n    readonly buildFeedbackTextForReview = buildFeedbackTextForReview;\r\n\r\n    private readonly SHA1_REGEX = /^[a-f0-9]{40}$/i;\r\n\r\n    @Input()\r\n    public set result(result: Result) {\r\n        if (!result || !result.submission || !(result.submission as TextSubmission)) {\r\n            return;\r\n        }\r\n\r\n        this.submission = result.submission as TextSubmission;\r\n        this.submissionText = this.submission.text || '';\r\n        this.convertTextToResultBlocks(result.feedbacks);\r\n    }\r\n    @Input()\r\n    course?: Course;\r\n\r\n    private convertTextToResultBlocks(feedbacks: Feedback[] = []): void {\r\n        checkSubsequentFeedbackInAssessment(feedbacks);\r\n\r\n        const [referenceBasedFeedback, blockBasedFeedback]: [Feedback[], Feedback[]] = feedbacks.reduce(\r\n            ([refBased, blockBased], elem) => (this.SHA1_REGEX.test(elem.reference!) ? [refBased, [...blockBased, elem]] : [[...refBased, elem], blockBased]),\r\n            [[], []],\r\n        );\r\n\r\n        const referenceBasedResultBlocks = referenceBasedFeedback.map(this.feedbackToTextResultBlock, this);\r\n        const blockBasedResultBlocks = blockBasedFeedback.map(this.textBlockToTextResultBlock, this);\r\n\r\n        const resultBlocks = ([...referenceBasedResultBlocks, ...blockBasedResultBlocks].filter((elem) => elem !== undefined) as TextResultBlock[]).sort(\r\n            (a, b) => b.startIndex - a.startIndex,\r\n        );\r\n\r\n        let nextBlock = resultBlocks.pop();\r\n        let startIndex = 0;\r\n        const endIndex = this.submissionText.length;\r\n        this.textResults = [];\r\n        while (startIndex < endIndex) {\r\n            if (nextBlock && nextBlock.startIndex === startIndex) {\r\n                this.textResults.push(nextBlock);\r\n                startIndex = nextBlock.endIndex;\r\n                nextBlock = resultBlocks.pop();\r\n            } else {\r\n                const endOfSlice = nextBlock ? nextBlock.startIndex : endIndex;\r\n                const slice = this.submissionText.slice(startIndex, endOfSlice);\r\n                const textBlock = new TextBlock();\r\n                textBlock.startIndex = startIndex;\r\n                textBlock.endIndex = endOfSlice;\r\n                textBlock.text = slice;\r\n                const textResultBlock = new TextResultBlock(textBlock);\r\n                this.textResults.push(textResultBlock);\r\n                startIndex = endOfSlice;\r\n            }\r\n        }\r\n    }\r\n\r\n    private feedbackToTextResultBlock(feedback: Feedback): TextResultBlock | undefined {\r\n        const reference = feedback.reference;\r\n        if (!reference) {\r\n            return undefined;\r\n        }\r\n\r\n        const indexOfReference = this.submissionText.indexOf(reference);\r\n\r\n        const textBlock = new TextBlock();\r\n        textBlock.text = reference;\r\n        textBlock.startIndex = indexOfReference;\r\n        textBlock.endIndex = indexOfReference + reference.length;\r\n\r\n        return new TextResultBlock(textBlock, feedback);\r\n    }\r\n\r\n    private textBlockToTextResultBlock(feedback: Feedback): TextResultBlock | undefined {\r\n        if (this.submission.blocks) {\r\n            const result = this.submission.blocks.find((block) => block.id === feedback.reference);\r\n            if (result) {\r\n                return new TextResultBlock(result, feedback);\r\n            }\r\n        }\r\n    }\r\n\r\n    public repeatForEachCredit(textResultBlock: TextResultBlock): number[] {\r\n        if (!textResultBlock.feedback || textResultBlock.feedback.credits === 0) {\r\n            return [];\r\n        }\r\n\r\n        const value = Math.ceil(Math.abs(textResultBlock.feedback.credits || 0));\r\n        return new Array(value).fill(1);\r\n    }\r\n\r\n    public creditsTranslationForTextResultBlock(textResultBlock: TextResultBlock): string {\r\n        const singular = Math.abs(textResultBlock.feedback!.credits || 0) === 1;\r\n        return this.translateService.instant(`artemisApp.assessment.detail.points.${singular ? 'one' : 'many'}`, {\r\n            points: this.localeConversionService.toLocaleString(textResultBlock.feedback?.credits || 0, this.course?.accuracyOfScores),\r\n        });\r\n    }\r\n}\r\n", "@for (block of textResults; track block; let i = $index) {\r\n    <span class=\"white-space\" [ngClass]=\"block.cssClass\" [innerHTML]=\"block.text\"></span>\r\n    @if (block.feedback) {\r\n        @if (block.icon) {\r\n            <span [ngClass]=\"block.iconCssClass\" [title]=\"creditsTranslationForTextResultBlock(block)\">\r\n                @for (i of repeatForEachCredit(block); track i) {\r\n                    <fa-icon [icon]=\"block.icon\" />\r\n                }\r\n            </span>\r\n        }\r\n        @if (block.feedback && block.feedback.isSubsequent === undefined) {\r\n            <div class=\"feedback-text mt-1\" [ngClass]=\"block.feedbackCssClass\">\r\n                <span class=\"feedback-points\">\r\n                    @if (block.circleIcon) {\r\n                        <fa-icon [icon]=\"block.circleIcon\" />\r\n                    }\r\n                    &nbsp;{{ creditsTranslationForTextResultBlock(block) }}:\r\n                </span>\r\n                <span [innerHTML]=\"buildFeedbackTextForReview(block.feedback)\" id=\"text-feedback-{{ i }}\"></span>\r\n            </div>\r\n        }\r\n        @if (block.feedback && block.feedback.isSubsequent) {\r\n            <div class=\"feedback-text mt-1 alert alert-secondary\">\r\n                <span class=\"feedback-points\">\r\n                    @if (block.circleIcon) {\r\n                        <fa-icon [icon]=\"block.circleIcon\" />\r\n                    }\r\n                    &nbsp;{{ creditsTranslationForTextResultBlock(block) }}:\r\n                </span>\r\n                <span [innerHTML]=\"buildFeedbackTextForReview(block.feedback)\"></span>\r\n                <fa-icon class=\"float-end\" [icon]=\"faExclamationTriangle\" [ngbTooltip]=\"'artemisApp.assessment.subsequentFeedback' | artemisTranslate\" />\r\n            </div>\r\n        }\r\n    }\r\n}\r\n", "import { Component, HostListener, OnDestroy, OnInit, inject, input } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HeaderParticipationPageComponent } from 'app/exercises/shared/exercise-headers/header-participation-page.component';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { RatingComponent } from 'app/exercises/shared/rating/rating.component';\r\nimport { TeamSubmissionSyncComponent } from 'app/exercises/shared/team-submission-sync/team-submission-sync.component';\r\nimport { TeamParticipateInfoBoxComponent } from 'app/exercises/shared/team/team-participate/team-participate-info-box.component';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { TextEditorService } from 'app/exercises/text/participate/text-editor.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Subject, Subscription, merge } from 'rxjs';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { debounceTime, distinctUntilChanged, map, skip } from 'rxjs/operators';\r\nimport { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\r\nimport { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { hasExerciseDueDatePassed } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { ButtonComponent, ButtonType } from 'app/shared/components/button.component';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { StringCountService } from 'app/exercises/text/participate/string-count.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { getFirstResultWithComplaint, getLatestSubmissionResult, setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { getUnreferencedFeedback, isAthenaAIResult } from 'app/exercises/shared/result/result.utils';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { faChevronDown, faCircleNotch, faEye, faTimeline } from '@fortawesome/free-solid-svg-icons';\r\nimport { MAX_SUBMISSION_TEXT_LENGTH } from 'app/shared/constants/input.constants';\r\nimport { ChatServiceMode } from 'app/iris/iris-chat.service';\r\nimport { IrisSettings } from 'app/entities/iris/settings/iris-settings.model';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_IRIS } from 'app/app.constants';\r\nimport { IrisSettingsService } from 'app/iris/settings/shared/iris-settings.service';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { RequestFeedbackButtonComponent } from 'app/overview/exercise-details/request-feedback-button/request-feedback-button.component';\r\nimport { ResultHistoryComponent } from 'app/overview/result-history/result-history.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TextResultComponent } from './text-result/text-result.component';\r\nimport { AdditionalFeedbackComponent } from 'app/shared/additional-feedback/additional-feedback.component';\r\nimport { ComplaintsStudentViewComponent } from 'app/complaints/complaints-for-students/complaints-student-view.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { IrisExerciseChatbotButtonComponent } from 'app/iris/exercise-chatbot/exercise-chatbot-button.component';\r\nimport { UpperCasePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\nimport { onTextEditorTab } from 'app/utils/text.utils';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'jhi-text-editor',\r\n    templateUrl: './text-editor.component.html',\r\n    providers: [ParticipationService],\r\n    styleUrls: ['./text-editor.component.scss'],\r\n    imports: [\r\n        HeaderParticipationPageComponent,\r\n        ButtonComponent,\r\n        RouterLink,\r\n        RequestFeedbackButtonComponent,\r\n        ResultHistoryComponent,\r\n        ResizeableContainerComponent,\r\n        TeamParticipateInfoBoxComponent,\r\n        TranslateDirective,\r\n        FormsModule,\r\n        TeamSubmissionSyncComponent,\r\n        TextResultComponent,\r\n        AdditionalFeedbackComponent,\r\n        RatingComponent,\r\n        ComplaintsStudentViewComponent,\r\n        FaIconComponent,\r\n        IrisExerciseChatbotButtonComponent,\r\n        UpperCasePipe,\r\n        ArtemisTranslatePipe,\r\n        HtmlForMarkdownPipe,\r\n    ],\r\n})\r\nexport class TextEditorComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\r\n    private route = inject(ActivatedRoute);\r\n    private textSubmissionService = inject(TextSubmissionService);\r\n    private textService = inject(TextEditorService);\r\n    private alertService = inject(AlertService);\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n    private stringCountService = inject(StringCountService);\r\n    private accountService = inject(AccountService);\r\n    private profileService = inject(ProfileService);\r\n    private irisSettingsService = inject(IrisSettingsService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    readonly ButtonType = ButtonType;\r\n    readonly MAX_CHARACTER_COUNT = MAX_SUBMISSION_TEXT_LENGTH;\r\n    protected readonly Result = Result;\r\n    protected readonly hasExerciseDueDatePassed = hasExerciseDueDatePassed;\r\n    readonly ChatServiceMode = ChatServiceMode;\r\n    protected readonly isAthenaAIResult = isAthenaAIResult;\r\n\r\n    participationId = input<number>();\r\n    displayHeader = input<boolean>(true);\r\n    expandProblemStatement = input<boolean>(true);\r\n    inputExercise = input<TextExercise>();\r\n    inputSubmission = input<TextSubmission>();\r\n    inputParticipation = input<StudentParticipation>();\r\n    isExamSummary = input<boolean>(false);\r\n\r\n    textExercise: TextExercise;\r\n    participation: StudentParticipation;\r\n    result: Result;\r\n    resultWithComplaint?: Result;\r\n    submission: TextSubmission;\r\n    course?: Course;\r\n    isSaving = false;\r\n    private textEditorInput = new Subject<string>();\r\n    textEditorInputObservable = this.textEditorInput.asObservable();\r\n    private submissionChange = new Subject<TextSubmission>();\r\n    submissionObservable = this.buildSubmissionObservable();\r\n    // Is submitting always enabled?\r\n    isAlwaysActive: boolean;\r\n    isAllowedToSubmitAfterDueDate: boolean;\r\n    // answer is the text that is stored in the user interface\r\n    answer: string;\r\n    // indicates if the assessment due date is in the past. the assessment will not be loaded and displayed to the student if it is not.\r\n    isAfterAssessmentDueDate: boolean;\r\n    examMode = false;\r\n    isGeneratingFeedback = false;\r\n    irisSettings?: IrisSettings;\r\n\r\n    // indicates, that it is an exam exercise and the publishResults date is in the past\r\n    isAfterPublishDate: boolean;\r\n    isOwnerOfParticipation: boolean;\r\n    isReadOnlyWithShowResult = false;\r\n    // Icon\r\n    farListAlt = faListAlt;\r\n    faChevronDown = faChevronDown;\r\n    faCircleNotch = faCircleNotch;\r\n    faTimeline = faTimeline;\r\n    faEye = faEye;\r\n\r\n    // used in the html template\r\n    protected readonly onTextEditorTab = onTextEditorTab;\r\n\r\n    participationUpdateListener: Subscription;\r\n    sortedHistoryResults: Result[];\r\n    hasAthenaResultForLatestSubmission = false;\r\n    showHistory = false;\r\n    submissionId: number | undefined;\r\n\r\n    ngOnInit() {\r\n        if (this.inputValuesArePresent()) {\r\n            this.setupComponentWithInputValues();\r\n        } else {\r\n            const participationId = this.participationId() !== undefined ? this.participationId() : Number(this.route.snapshot.paramMap.get('participationId'));\r\n            this.submissionId = Number(this.route.snapshot.paramMap.get('submissionId')) || undefined;\r\n\r\n            if (Number.isNaN(participationId)) {\r\n                return this.alertService.error('artemisApp.textExercise.error');\r\n            }\r\n\r\n            this.route.params?.subscribe(() => {\r\n                this.submissionId = Number(this.route.snapshot.paramMap.get('submissionId')) || undefined;\r\n                this.updateParticipation(this.participation, this.submissionId);\r\n            });\r\n\r\n            this.textService.get(participationId!).subscribe({\r\n                next: (data: StudentParticipation) => this.updateParticipation(data, this.submissionId),\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n\r\n            this.isReadOnlyWithShowResult = !!this.submissionId;\r\n        }\r\n        this.participationUpdateListener?.unsubscribe();\r\n        // Triggers on new result received\r\n        this.participationUpdateListener = this.participationWebsocketService\r\n            .subscribeForParticipationChanges()\r\n            .pipe(skip(1))\r\n            .subscribe((changedParticipation: StudentParticipation) => {\r\n                const results = changedParticipation.results;\r\n                if (\r\n                    results &&\r\n                    ((results?.length || 0) > (this.participation?.results?.length || 0) || results?.last()?.completionDate === undefined) &&\r\n                    results?.last()?.assessmentType === AssessmentType.AUTOMATIC_ATHENA &&\r\n                    results.last()?.successful !== undefined\r\n                ) {\r\n                    this.isGeneratingFeedback = false;\r\n                    if (results.last()?.successful === false) {\r\n                        this.alertService.error('artemisApp.exercise.athenaFeedbackFailed');\r\n                    } else {\r\n                        this.alertService.success('artemisApp.exercise.athenaFeedbackSuccessful');\r\n                        this.hasAthenaResultForLatestSubmission = true;\r\n                    }\r\n                }\r\n                this.updateParticipation(this.participation);\r\n            });\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            // only load the settings if Iris is available and this is not an exam exercise\r\n            if (profileInfo?.activeProfiles?.includes(PROFILE_IRIS) && !this.examMode) {\r\n                this.route.params.subscribe((params) => {\r\n                    this.irisSettingsService.getCombinedExerciseSettings(params['exerciseId']).subscribe((irisSettings) => {\r\n                        this.irisSettings = irisSettings;\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private inputValuesArePresent(): boolean {\r\n        return !!(this.inputExercise() || this.inputSubmission() || this.inputParticipation());\r\n    }\r\n\r\n    /**\r\n     * Uses values directly passed to this component instead of subscribing to a participation to save resources\r\n     *\r\n     * <i>e.g. used within {@link ExamResultSummaryComponent} and the respective {@link ModelingExamSummaryComponent}\r\n     * as directly after the exam no grading is present and only the student solution shall be displayed </i>\r\n     * @private\r\n     */\r\n    private setupComponentWithInputValues() {\r\n        if (this.inputExercise() !== undefined) {\r\n            this.textExercise = this.inputExercise()!;\r\n        }\r\n        if (this.inputSubmission() !== undefined) {\r\n            this.submission = this.inputSubmission()!;\r\n        }\r\n        if (this.inputParticipation() !== undefined) {\r\n            this.participation = this.inputParticipation()!;\r\n        }\r\n\r\n        if (this.submission?.text) {\r\n            this.answer = this.submission.text;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the participation, the submission selected can be chosen through submissionId, default undefined means latest\r\n     * @param participation The participation data\r\n     * @param submissionId The id of the submission of choice. undefined value defaults to the latest submission\r\n     */\r\n    private updateParticipation(participation: StudentParticipation, submissionId: number | undefined = undefined) {\r\n        if (participation) {\r\n            this.participation = participation;\r\n        } else {\r\n            return;\r\n        }\r\n        this.textExercise = this.participation.exercise as TextExercise;\r\n        this.examMode = !!this.textExercise.exerciseGroup;\r\n        this.textExercise.studentParticipations = [this.participation];\r\n        this.checkIfSubmitAlwaysEnabled();\r\n        this.isAfterAssessmentDueDate = !!this.textExercise.course && (!this.textExercise.assessmentDueDate || dayjs().isAfter(this.textExercise.assessmentDueDate));\r\n        this.isAfterPublishDate = !!this.textExercise.exerciseGroup?.exam?.publishResultsDate && dayjs().isAfter(this.textExercise.exerciseGroup.exam.publishResultsDate);\r\n        this.course = getCourseFromExercise(this.textExercise);\r\n        if (this.participation.results?.length) {\r\n            this.participation.results = this.participation.results.map((result) => {\r\n                result.participation = this.participation;\r\n                return result;\r\n            });\r\n            this.sortedHistoryResults = this.participation.results.sort((a, b) => (a.id ?? 0) - (b.id ?? 0));\r\n        }\r\n\r\n        if (this.participation.submissions?.length) {\r\n            if (submissionId) {\r\n                const foundSubmission = this.participation.submissions.find((sub) => sub.id === submissionId)!;\r\n                if (foundSubmission) {\r\n                    this.submission = foundSubmission;\r\n                } else {\r\n                    this.submission = this.participation.submissions.sort((a, b) => (a.id ?? 0) - (b.id ?? 0)).last() as TextSubmission;\r\n                }\r\n            } else {\r\n                this.submission = this.participation.submissions.sort((a, b) => (a.id ?? 0) - (b.id ?? 0)).last() as TextSubmission;\r\n            }\r\n\r\n            setLatestSubmissionResult(this.submission, getLatestSubmissionResult(this.submission));\r\n            if (this.participation.results) {\r\n                if (!this.submission?.results) {\r\n                    this.result = this.sortedHistoryResults.last()!;\r\n                } else {\r\n                    this.result = this.submission.latestResult!;\r\n                    this.hasAthenaResultForLatestSubmission = this.submission.latestResult!.assessmentType === AssessmentType.AUTOMATIC_ATHENA;\r\n                }\r\n                this.result.participation = this.participation;\r\n            }\r\n            // if one of the submissions results has a complaint, we get it\r\n            this.resultWithComplaint = getFirstResultWithComplaint(this.submission);\r\n\r\n            if (this.submission?.text) {\r\n                this.answer = this.submission.text;\r\n            } else {\r\n                // handles the case when a submission is empty\r\n                this.answer = '';\r\n            }\r\n        }\r\n        // check whether the student looks at the result\r\n        this.isOwnerOfParticipation = this.accountService.isOwnerOfParticipation(this.participation);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (!this.canDeactivate() && this.textExercise.id) {\r\n            let newSubmission = new TextSubmission();\r\n            if (this.submission) {\r\n                newSubmission = this.submission;\r\n            }\r\n            newSubmission.text = this.answer;\r\n            if (this.submission.id) {\r\n                this.textSubmissionService.update(newSubmission, this.textExercise.id).subscribe((response) => {\r\n                    this.submission = response.body!;\r\n                    setLatestSubmissionResult(this.submission, getLatestSubmissionResult(this.submission));\r\n                    // reconnect so that the submission status is displayed correctly in the result.component\r\n                    this.submission.participation!.submissions = [this.submission];\r\n                    this.participationWebsocketService.addParticipation(this.submission.participation as StudentParticipation, this.textExercise);\r\n                });\r\n            }\r\n        }\r\n\r\n        this.participationUpdateListener?.unsubscribe();\r\n        if (this.participation) {\r\n            this.participationWebsocketService.unsubscribeForLatestResultOfParticipation(this.participation.id!, this.textExercise);\r\n        }\r\n    }\r\n\r\n    private checkIfSubmitAlwaysEnabled() {\r\n        const isInitializationAfterDueDate =\r\n            this.textExercise.dueDate && this.participation.initializationDate && dayjs(this.participation.initializationDate).isAfter(this.textExercise.dueDate);\r\n        const isAlwaysActive = !this.result && (!this.textExercise.dueDate || isInitializationAfterDueDate);\r\n\r\n        this.isAllowedToSubmitAfterDueDate = !!isInitializationAfterDueDate && !dayjs().isAfter(this.participation.individualDueDate);\r\n        this.isAlwaysActive = !!isAlwaysActive;\r\n    }\r\n\r\n    get isAutomaticResult(): boolean {\r\n        return this.result?.assessmentType === AssessmentType.AUTOMATIC_ATHENA;\r\n    }\r\n    /**\r\n     * True, if the due date is after the current date, or there is no due date, or the exercise is always active\r\n     */\r\n    get isActive(): boolean {\r\n        const isActive =\r\n            !this.examMode &&\r\n            (!this.result || this.isAutomaticResult) &&\r\n            (this.isAlwaysActive || (this.textExercise && this.textExercise.dueDate && !hasExerciseDueDatePassed(this.textExercise, this.participation)));\r\n        return !!isActive;\r\n    }\r\n\r\n    get submitButtonTooltip(): string {\r\n        if (this.isAllowedToSubmitAfterDueDate) {\r\n            return 'entity.action.submitDueDateMissedTooltip';\r\n        }\r\n        if (this.isActive && !this.textExercise.dueDate) {\r\n            return 'entity.action.submitNoDueDateTooltip';\r\n        } else if (this.isActive) {\r\n            return 'entity.action.submitTooltip';\r\n        }\r\n\r\n        return 'entity.action.dueDateMissedTooltip';\r\n    }\r\n\r\n    /**\r\n     * Check whether or not a result exists and if, returns the unreferenced feedback of it\r\n     */\r\n    get unreferencedFeedback(): Feedback[] | undefined {\r\n        return this.result ? getUnreferencedFeedback(this.result.feedbacks) : undefined;\r\n    }\r\n\r\n    get wordCount(): number {\r\n        return this.stringCountService.countWords(this.answer);\r\n    }\r\n\r\n    get characterCount(): number {\r\n        return this.stringCountService.countCharacters(this.answer);\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        if (!this.submission) {\r\n            return true;\r\n        }\r\n        return this.submission.text === this.answer;\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.translateService.instant('pendingChanges');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    submit() {\r\n        if (this.isSaving) {\r\n            return;\r\n        }\r\n\r\n        if (!this.submission) {\r\n            return;\r\n        }\r\n\r\n        this.isSaving = true;\r\n        this.submission = this.submissionForAnswer(this.answer);\r\n        const submissionToCreateOrUpdate = this.submission;\r\n        // id undefined creates a new submission and setting results to undefined prevents foreign key constraints when deleting results from submission\r\n        if (this.hasAthenaResultForLatestSubmission) {\r\n            submissionToCreateOrUpdate.id = undefined;\r\n            submissionToCreateOrUpdate.results = undefined;\r\n        } else {\r\n            setLatestSubmissionResult(submissionToCreateOrUpdate, getLatestSubmissionResult(this.submission));\r\n        }\r\n\r\n        this.textSubmissionService.update(submissionToCreateOrUpdate, this.textExercise.id!).subscribe({\r\n            next: (response) => {\r\n                this.submission = response.body!;\r\n                if (this.participation.team) {\r\n                    // Make sure the team is not lost during update\r\n                    const studentParticipation = this.submission.participation as StudentParticipation;\r\n                    studentParticipation.team = this.participation.team;\r\n                }\r\n                setLatestSubmissionResult(this.submission, getLatestSubmissionResult(this.submission));\r\n                this.submissionChange.next(this.submission);\r\n                // reconnect so that the submission status is displayed correctly in the result.component\r\n                this.submission.participation!.submissions = [this.submission];\r\n                const results = this.participation.results;\r\n                this.participation = this.submission.participation as StudentParticipation;\r\n                this.participation.results = results;\r\n                this.participation.exercise = this.textExercise;\r\n                this.participationWebsocketService.addParticipation(this.participation, this.textExercise);\r\n                this.textExercise.studentParticipations = [this.participation];\r\n                this.result = getLatestSubmissionResult(this.submission)!;\r\n                if (this.result) {\r\n                    this.result.participation = this.participation;\r\n                }\r\n                this.isSaving = false;\r\n                if (!this.isAllowedToSubmitAfterDueDate) {\r\n                    this.alertService.success('entity.action.submitSuccessfulAlert');\r\n                    this.hasAthenaResultForLatestSubmission = false;\r\n                } else {\r\n                    this.alertService.warning('entity.action.submitDueDateMissedAlert');\r\n                }\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.alertService.error(err.error.message);\r\n                this.isSaving = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stream of submissions being emitted on:\r\n     * 1. text editor input after a debounce time of 2 seconds\r\n     * 2. manually triggered change on submission (e.g. when submit was clicked)\r\n     */\r\n    private buildSubmissionObservable() {\r\n        const textEditorStream = this.textEditorInput\r\n            .asObservable()\r\n            .pipe(debounceTime(2000), distinctUntilChanged())\r\n            .pipe(map((answer: string) => this.submissionForAnswer(answer)));\r\n        const submissionChangeStream = this.submissionChange.asObservable();\r\n        return merge(textEditorStream, submissionChangeStream);\r\n    }\r\n\r\n    private submissionForAnswer(answer: string): TextSubmission {\r\n        return { ...this.submission, text: answer, language: this.textService.predictLanguage(answer) };\r\n    }\r\n\r\n    onReceiveSubmissionFromTeam(submission: TextSubmission) {\r\n        submission.participation!.exercise = this.textExercise;\r\n        submission.participation!.submissions = [submission];\r\n        // Keep the existing team on the participation\r\n        const studentParticipation = submission.participation as StudentParticipation;\r\n        studentParticipation.team = this.participation.team;\r\n        this.updateParticipation(studentParticipation);\r\n    }\r\n\r\n    onTextEditorInput(event: Event) {\r\n        this.textEditorInput.next((<HTMLTextAreaElement>event.target).value);\r\n    }\r\n}\r\n", "<div [id]=\"'exercise-' + textExercise?.id\">\r\n    @if (displayHeader()) {\r\n        <jhi-header-participation-page class=\"d-block mb-4\" [exercise]=\"textExercise\" [participation]=\"participation\">\r\n            <span pagetitle>\r\n                {{ 'artemisApp.textSubmission.textEditor' | artemisTranslate }}:\r\n                <span class=\"font-weight-normal\">{{ examMode ? textExercise.exerciseGroup?.title : textExercise?.title }}</span>\r\n            </span>\r\n            <ng-container class=\"btn-group gap-1\" submitbutton>\r\n                @if (isOwnerOfParticipation) {\r\n                    @if (isReadOnlyWithShowResult) {\r\n                        @if ((sortedHistoryResults?.length || 0) > 1) {\r\n                            <jhi-button\r\n                                id=\"toggleTimeline\"\r\n                                [icon]=\"faTimeline\"\r\n                                [title]=\"showHistory ? 'entity.action.hideTimeline' : 'entity.action.viewTimeline'\"\r\n                                (click)=\"showHistory = !showHistory\"\r\n                            />\r\n                        }\r\n                        @if (isActive || !textExercise.dueDate) {\r\n                            <jhi-button\r\n                                id=\"Continue\"\r\n                                [title]=\"'entity.action.continueSubmission'\"\r\n                                [routerLink]=\"['/courses', course?.id, 'exercises', 'text-exercises', textExercise?.id!, 'participate', result.participation?.id]\"\r\n                            />\r\n                        }\r\n                    } @else {\r\n                        @if (textExercise.allowFeedbackRequests && (!this.textExercise.dueDate || !hasExerciseDueDatePassed(this.textExercise, this.participation))) {\r\n                            <jhi-request-feedback-button\r\n                                [exercise]=\"textExercise\"\r\n                                [pendingChanges]=\"submission.text !== answer\"\r\n                                [hasAthenaResultForLatestSubmission]=\"hasAthenaResultForLatestSubmission\"\r\n                                [isGeneratingFeedback]=\"isGeneratingFeedback\"\r\n                                (generatingFeedback)=\"this.isGeneratingFeedback = true\"\r\n                                [isSubmitted]=\"submission.submitted || false\"\r\n                            />\r\n                        }\r\n                    }\r\n                    @if (!this.isReadOnlyWithShowResult) {\r\n                        <jhi-button\r\n                            id=\"submit\"\r\n                            [title]=\"!isAllowedToSubmitAfterDueDate ? 'entity.action.submit' : 'entity.action.submitDueDateMissed'\"\r\n                            (onClick)=\"submit()\"\r\n                            [disabled]=\"!isActive || !submission\"\r\n                            [isLoading]=\"isSaving\"\r\n                            [btnType]=\"isAllowedToSubmitAfterDueDate ? ButtonType.WARNING : ButtonType.PRIMARY\"\r\n                            [tooltip]=\"submitButtonTooltip\"\r\n                        />\r\n                    }\r\n                }\r\n            </ng-container>\r\n        </jhi-header-participation-page>\r\n    }\r\n    <div class=\"mb-2\">\r\n        @if (isReadOnlyWithShowResult) {\r\n            @if (showHistory) {\r\n                <div id=\"result-history\" class=\"row mb-2\">\r\n                    <jhi-result-history [results]=\"sortedHistoryResults\" [exercise]=\"textExercise\" [selectedResultId]=\"submission.latestResult?.id!\" />\r\n                </div>\r\n            }\r\n        }\r\n    </div>\r\n\r\n    <!--resizable container-->\r\n    @if (textExercise) {\r\n        <jhi-resizeable-container\r\n            [isExerciseParticipation]=\"true\"\r\n            [expandProblemStatement]=\"expandProblemStatement() && !isReadOnlyWithShowResult\"\r\n            [collapsed]=\"isReadOnlyWithShowResult\"\r\n        >\r\n            <!--region Left Panel-->\r\n            <div left-body class=\"text-editor-grid ps-2 pb-2 w-100\">\r\n                @if (textExercise?.teamMode && isActive) {\r\n                    <div class=\"grid-area-team-info pb-4 ps-md-2\">\r\n                        <jhi-team-participate-info-box [exercise]=\"textExercise\" [participation]=\"participation\" [typing$]=\"textEditorInputObservable\" [dockedToRightSide]=\"true\" />\r\n                    </div>\r\n                }\r\n                <div class=\"grid-area-main\">\r\n                    <div>\r\n                        <span\r\n                            class=\"badge bg-primary mb-2\"\r\n                            id=\"word-count\"\r\n                            [hidden]=\"submission && !submission.submitted && isExamSummary()\"\r\n                            jhiTranslate=\"artemisApp.textExercise.wordCount\"\r\n                            [translateValues]=\"{ count: wordCount }\"\r\n                        >\r\n                        </span>\r\n                        <span\r\n                            class=\"badge bg-primary mb-2\"\r\n                            id=\"character-count\"\r\n                            [hidden]=\"submission && !submission.submitted && isExamSummary()\"\r\n                            jhiTranslate=\"artemisApp.textExercise.characterCount\"\r\n                            [translateValues]=\"{ count: characterCount }\"\r\n                        >\r\n                        </span>\r\n                    </div>\r\n                    @if (!((result && !isAutomaticResult) || isReadOnlyWithShowResult)) {\r\n                        <textarea\r\n                            id=\"text-editor\"\r\n                            #textEditor\r\n                            class=\"text-editor-textarea\"\r\n                            [maxLength]=\"MAX_CHARACTER_COUNT\"\r\n                            [(ngModel)]=\"answer\"\r\n                            [readOnly]=\"!isActive || !submission || !isOwnerOfParticipation || isReadOnlyWithShowResult\"\r\n                            [disabled]=\"!isActive || !submission || !isOwnerOfParticipation\"\r\n                            (keydown.tab)=\"onTextEditorTab(textEditor, $event)\"\r\n                            (input)=\"onTextEditorInput($event)\"\r\n                            [hidden]=\"submission && !submission.submitted && isExamSummary()\"\r\n                        ></textarea>\r\n                        @if (textExercise?.teamMode) {\r\n                            <jhi-team-submission-sync\r\n                                [exerciseType]=\"textExercise.type!\"\r\n                                [submissionObservable]=\"submissionObservable\"\r\n                                [participation]=\"participation\"\r\n                                (receiveSubmission)=\"onReceiveSubmissionFromTeam($event)\"\r\n                            />\r\n                        }\r\n                    } @else {\r\n                        @if (!result?.feedbacks?.length) {\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-12 col-lg-10 col-xl-8\">\r\n                                    <b [jhiTranslate]=\"'artemisApp.textExercise.submission'\">Submission:</b>\r\n                                    <hr />\r\n                                    <jhi-text-result [result]=\"result\" [course]=\"course\" />\r\n                                    <hr />\r\n                                    <i [jhiTranslate]=\"'artemisApp.textExercise.assessmentPending'\">Assessment pending</i>\r\n                                </div>\r\n                            </div>\r\n                        } @else {\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-12 col-lg-10 col-xl-8\">\r\n                                    <b>\r\n                                        {{\r\n                                            isOwnerOfParticipation\r\n                                                ? ('artemisApp.textExercise.assessedSubmission' | artemisTranslate)\r\n                                                : ('artemisApp.textExercise.assessedSubmissionInstructor' | artemisTranslate)\r\n                                        }}:\r\n                                    </b>\r\n                                    @if (isAthenaAIResult(result)) {\r\n                                        <div class=\"badge bg-warning\">{{ 'artemisApp.result.preliminary' | artemisTranslate | uppercase }}</div>\r\n                                    }\r\n                                    <hr />\r\n                                    <jhi-text-result [result]=\"result\" [course]=\"course\" />\r\n                                    <hr />\r\n                                </div>\r\n                                @if (unreferencedFeedback && unreferencedFeedback!.length > 0) {\r\n                                    <jhi-additional-feedback\r\n                                        class=\"col-xl-8 alert unreferencedFeedback\"\r\n                                        [feedback]=\"unreferencedFeedback || []\"\r\n                                        [additional]=\"true\"\r\n                                        [course]=\"course\"\r\n                                    />\r\n                                }\r\n                                @if (isOwnerOfParticipation) {\r\n                                    <jhi-rating class=\"col-md-12 col-lg-10 col-xl-8 mt-2 alert alert-info\" [result]=\"result\" />\r\n                                }\r\n                            </div>\r\n                        }\r\n                    }\r\n                    @if (textExercise && result && participation && !examMode && !isAutomaticResult) {\r\n                        <jhi-complaint-student-view [exercise]=\"textExercise\" [result]=\"resultWithComplaint ? resultWithComplaint : result\" [participation]=\"participation\" />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <!--endregion-->\r\n            <!--region Right Panel-->\r\n            <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n            <span id=\"problem-statement\" right-header jhiTranslate=\"artemisApp.exercise.problemStatement\"></span>\r\n            <ng-container right-body>\r\n                @if (textExercise!.problemStatement) {\r\n                    <p class=\"markdown-preview mb-3\">\r\n                        <span [innerHTML]=\"textExercise!.problemStatement! | htmlForMarkdown\"></span>\r\n                    </p>\r\n                }\r\n            </ng-container>\r\n\r\n            <!--endregion-->\r\n        </jhi-resizeable-container>\r\n        @if (!textExercise.exerciseGroup && irisSettings?.irisTextExerciseChatSettings?.enabled) {\r\n            <jhi-exercise-chatbot-button [mode]=\"ChatServiceMode.TEXT_EXERCISE\" />\r\n        }\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["FeedbackType", "TextResultBlock", "text", "textBlock", "feedback", "constructor", "convertToHtmlLinebreaks", "escapeString", "length", "endIndex", "startIndex", "feedbackType", "Feedback", "isEmpty", "BLANK", "credits", "POSITIVE", "NEGATIVE", "NEUTRAL", "cssClass", "icon", "faCheck", "faTimes", "faCircle", "circleIcon", "faCheckCircle", "faTimesCircle", "faDotCircle", "iconCssClass", "feedbackCssClass", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "block_r1", "icon", "\u0275\u0275elementStart", "\u0275\u0275repeaterCreate", "TextResultComponent_For_1_Conditional_3_Conditional_1_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275elementEnd", "iconCssClass", "ctx_r1", "creditsTranslationForTextResultBlock", "\u0275\u0275repeater", "repeatForEachCredit", "circleIcon", "\u0275\u0275template", "TextResultComponent_For_1_Conditional_3_Conditional_2_Conditional_5_Template", "feedbackCssClass", "\u0275\u0275conditional", "\u0275\u0275textInterpolate1", "\u0275\u0275propertyInterpolate1", "\u0275$index_1_r4", "buildFeedbackTextForReview", "feedback", "\u0275\u0275sanitizeHtml", "TextResultComponent_For_1_Conditional_3_Conditional_3_Conditional_5_Template", "faExclamationTriangle", "\u0275\u0275pipeBind1", "TextResultComponent_For_1_Conditional_3_Conditional_1_Template", "TextResultComponent_For_1_Conditional_3_Conditional_2_Template", "TextResultComponent_For_1_Conditional_3_Conditional_3_Template", "isSubsequent", "undefined", "TextResultComponent_For_1_Conditional_3_Template", "cssClass", "text", "TextResultComponent", "translateService", "inject", "TranslateService", "localeConversionService", "LocaleConversionService", "submissionText", "textResults", "submission", "SHA1_REGEX", "result", "convertTextToResultBlocks", "feedbacks", "course", "checkSubsequentFeedbackInAssessment", "referenceBasedFeedback", "blockBasedFeedback", "reduce", "refBased", "blockBased", "elem", "test", "reference", "referenceBasedResultBlocks", "map", "feedbackToTextResultBlock", "blockBasedResultBlocks", "textBlockToTextResultBlock", "resultBlocks", "filter", "sort", "a", "b", "startIndex", "nextBlock", "pop", "endIndex", "length", "push", "endOfSlice", "slice", "textBlock", "TextBlock", "textResultBlock", "TextResultBlock", "indexOfReference", "indexOf", "blocks", "find", "block", "id", "credits", "value", "Math", "ceil", "abs", "Array", "fill", "singular", "instant", "points", "toLocaleString", "accuracyOfScores", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "TextResultComponent_For_1_Template", "NgClass", "FaIconComponent", "NgbTooltip", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "showHistory", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faTimeline", "\u0275\u0275element", "\u0275\u0275pureFunction3", "_c0", "course", "id", "textExercise", "result", "participation", "\u0275\u0275template", "TextEditorComponent_Conditional_2_Conditional_12_Conditional_1_Conditional_1_Template", "TextEditorComponent_Conditional_2_Conditional_12_Conditional_1_Conditional_2_Template", "\u0275\u0275conditional", "sortedHistoryResults", "length", "isActive", "dueDate", "_r3", "isGeneratingFeedback", "submission", "text", "answer", "hasAthenaResultForLatestSubmission", "submitted", "TextEditorComponent_Conditional_2_Conditional_12_Conditional_2_Conditional_1_Template", "allowFeedbackRequests", "hasExerciseDueDatePassed", "_r4", "submit", "isAllowedToSubmitAfterDueDate", "isSaving", "ButtonType", "WARNING", "PRIMARY", "submitButtonTooltip", "TextEditorComponent_Conditional_2_Conditional_12_Conditional_1_Template", "TextEditorComponent_Conditional_2_Conditional_12_Conditional_2_Template", "TextEditorComponent_Conditional_2_Conditional_12_Conditional_3_Template", "isReadOnlyWithShowResult", "\u0275\u0275elementContainerStart", "TextEditorComponent_Conditional_2_Conditional_12_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "examMode", "exerciseGroup", "title", "isOwnerOfParticipation", "latestResult", "TextEditorComponent_Conditional_5_Conditional_1_Template", "textEditorInputObservable", "$event", "_r7", "onReceiveSubmissionFromTeam", "type", "submissionObservable", "\u0275\u0275twoWayListener", "_r5", "i0", "\u0275\u0275twoWayBindingSet", "textEditor_r6", "\u0275\u0275reference", "onTextEditorTab", "onTextEditorInput", "TextEditorComponent_Conditional_8_Conditional_18_Conditional_4_Template", "MAX_CHARACTER_COUNT", "\u0275\u0275twoWayProperty", "isExamSummary", "teamMode", "unreferencedFeedback", "\u0275\u0275pureFunction0", "_c2", "TextEditorComponent_Conditional_8_Conditional_19_Conditional_2_Conditional_10_Template", "TextEditorComponent_Conditional_8_Conditional_19_Conditional_2_Conditional_18_Template", "TextEditorComponent_Conditional_8_Conditional_19_Conditional_2_Conditional_19_Template", "isAthenaAIResult", "TextEditorComponent_Conditional_8_Conditional_19_Conditional_1_Template", "TextEditorComponent_Conditional_8_Conditional_19_Conditional_2_Template", "feedbacks", "resultWithComplaint", "problemStatement", "\u0275\u0275sanitizeHtml", "ChatServiceMode", "TEXT_EXERCISE", "TextEditorComponent_Conditional_8_Conditional_6_Template", "TextEditorComponent_Conditional_8_Conditional_18_Template", "TextEditorComponent_Conditional_8_Conditional_19_Template", "TextEditorComponent_Conditional_8_Conditional_20_Template", "TextEditorComponent_Conditional_8_Conditional_31_Template", "TextEditorComponent_Conditional_8_Conditional_35_Template", "expandProblemStatement", "\u0275\u0275pureFunction1", "_c1", "wordCount", "characterCount", "isAutomaticResult", "farListAlt", "irisSettings", "irisTextExerciseChatSettings", "enabled", "TextEditorComponent", "route", "inject", "ActivatedRoute", "textSubmissionService", "TextSubmissionService", "textService", "TextEditorService", "alertService", "AlertService", "participationWebsocketService", "ParticipationWebsocketService", "stringCountService", "StringCountService", "accountService", "AccountService", "profileService", "ProfileService", "irisSettingsService", "IrisSettingsService", "translateService", "TranslateService", "MAX_SUBMISSION_TEXT_LENGTH", "Result", "participationId", "input", "displayHeader", "inputExercise", "inputSubmission", "inputParticipation", "textEditorInput", "Subject", "asObservable", "submissionChange", "buildSubmissionObservable", "isAlwaysActive", "isAfterAssessmentDueDate", "isAfterPublishDate", "faListAlt", "faChevronDown", "faCircleNotch", "faEye", "participationUpdateListener", "submissionId", "ngOnInit", "inputValuesArePresent", "setupComponentWithInputValues", "undefined", "Number", "snapshot", "paramMap", "get", "isNaN", "error", "params", "subscribe", "updateParticipation", "next", "data", "onError", "unsubscribe", "subscribeForParticipationChanges", "pipe", "skip", "changedParticipation", "results", "last", "completionDate", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "successful", "success", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "PROFILE_IRIS", "getCombinedExerciseSettings", "exercise", "studentParticipations", "checkIfSubmitAlwaysEnabled", "assessmentDueDate", "dayjs", "isAfter", "exam", "publishResultsDate", "getCourseFromExercise", "map", "sort", "a", "b", "submissions", "foundSubmission", "find", "sub", "setLatestSubmissionResult", "getLatestSubmissionResult", "getFirstResultWithComplaint", "ngOnDestroy", "canDeactivate", "newSubmission", "TextSubmission", "update", "response", "body", "addParticipation", "unsubscribeForLatestResultOfParticipation", "isInitializationAfterDueDate", "initializationDate", "individualDueDate", "getUnreferencedFeedback", "countWords", "countCharacters", "unloadNotification", "event", "preventDefault", "instant", "submissionForAnswer", "submissionToCreateOrUpdate", "team", "studentParticipation", "warning", "err", "message", "textEditorStream", "debounceTime", "distinctUntilChanged", "submissionChangeStream", "merge", "__spreadProps", "__spreadValues", "language", "predictLanguage", "target", "value", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275resolveWindow", "ParticipationService", "decls", "vars", "consts", "template", "TextEditorComponent_Conditional_2_Template", "TextEditorComponent_Conditional_5_Template", "TextEditorComponent_Conditional_8_Template", "HeaderParticipationPageComponent", "ButtonComponent", "RouterLink", "RequestFeedbackButtonComponent", "ResultHistoryComponent", "ResizeableContainerComponent", "TeamParticipateInfoBoxComponent", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "TeamSubmissionSyncComponent", "TextResultComponent", "AdditionalFeedbackComponent", "RatingComponent", "ComplaintsStudentViewComponent", "FaIconComponent", "IrisExerciseChatbotButtonComponent", "UpperCasePipe", "ArtemisTranslatePipe", "HtmlForMarkdownPipe", "styles"]
}
