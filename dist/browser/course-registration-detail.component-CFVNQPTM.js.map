{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-registration/course-registration-detail/course-registration-detail.component.ts", "src/main/webapp/app/overview/course-registration/course-registration-detail/course-registration-detail.component.html"],
  "sourcesContent": ["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Observable, catchError, map, of, throwError } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CoursePrerequisitesButtonComponent } from '../course-prerequisites-button/course-prerequisites-button.component';\r\nimport { CourseRegistrationButtonComponent } from '../course-registration-button/course-registration-button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-course-registration-detail-selector',\r\n    templateUrl: './course-registration-detail.component.html',\r\n    imports: [TranslateDirective, CoursePrerequisitesButtonComponent, CourseRegistrationButtonComponent],\r\n})\r\nexport class CourseRegistrationDetailComponent implements OnInit, OnDestroy {\r\n    private courseService = inject(CourseManagementService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n\r\n    loading = false;\r\n    courseId: number;\r\n    course: Course | undefined = undefined;\r\n    private paramSubscription: any;\r\n\r\n    ngOnInit(): void {\r\n        this.loading = true;\r\n        this.paramSubscription = this.route!.params.subscribe((params) => {\r\n            this.courseId = parseInt(params['courseId']);\r\n            this.courseService.findOneForRegistration(this.courseId).subscribe((res) => {\r\n                this.course = res.body!;\r\n                this.loading = false;\r\n            });\r\n            this.redirectIfCourseIsFullyAccessible();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.paramSubscription?.unsubscribe();\r\n    }\r\n\r\n    redirectToCoursePage(): void {\r\n        this.router.navigate(['courses', this.courseId]);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the user is already registered for the course by trying to fetch the for-dashboard version\r\n     */\r\n    isCourseFullyAccessible(): Observable<boolean> {\r\n        return this.courseService.findOneForDashboard(this.courseId).pipe(\r\n            map(() => true),\r\n            catchError((res: HttpErrorResponse) => {\r\n                if (res.status === 403) {\r\n                    return of(false);\r\n                } else {\r\n                    return throwError(() => res);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    redirectIfCourseIsFullyAccessible() {\r\n        this.isCourseFullyAccessible().subscribe((isFullyAccessible) => {\r\n            if (isFullyAccessible) {\r\n                this.redirectToCoursePage();\r\n            }\r\n        });\r\n    }\r\n}\r\n", "<h3 jhiTranslate=\"artemisApp.studentDashboard.enroll.title\"></h3>\r\n@if (loading) {\r\n    <div>\r\n        <span jhiTranslate=\"artemisApp.studentDashboard.enroll.courseLoading\"></span>\r\n    </div>\r\n} @else {\r\n    <h4>{{ course?.title }}</h4>\r\n    <p jhiTranslate=\"artemisApp.studentDashboard.enroll.notInCourseButCanEnroll\"></p>\r\n    <jhi-course-prerequisites-button [course]=\"course!\" />\r\n    <jhi-course-registration-button [course]=\"course!\" (onRegistration)=\"redirectToCoursePage()\" />\r\n}\r\n"],
  "mappings": "i6DCEIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EACJF,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,qCACIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,IAAA,EAAID,EAAA,CAAA,EAAmBG,EAAA,EACvBH,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,IAAA,CAAA,EACAF,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,kCAAA,CAAA,EACAF,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,iCAAA,CAAA,EAAmDG,EAAA,iBAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAkBF,EAAAG,qBAAA,CAAsB,CAAA,CAAA,EAA3FP,EAAA,EACJH,EAAA,EAAA;CAAA,oBAJQW,EAAA,CAAA,EAAAC,EAAAL,EAAAM,QAAA,KAAA,KAAAN,EAAAM,OAAAC,KAAA,EAE6BH,EAAA,CAAA,EAAAI,EAAA,SAAAR,EAAAM,MAAA,EACDF,EAAA,CAAA,EAAAI,EAAA,SAAAR,EAAAM,MAAA,GDMpC,IAAaG,GAAiC,IAAA,CAAxC,MAAOA,CAAiC,CAClCC,cAAgBC,EAAOC,CAAuB,EAC9CC,MAAQF,EAAOG,CAAc,EAC7BC,OAASJ,EAAOK,CAAM,EAE9BC,QAAU,GACVC,SACAZ,OAA6Ba,OACrBC,kBAERC,UAAQ,CACJ,KAAKJ,QAAU,GACf,KAAKG,kBAAoB,KAAKP,MAAOS,OAAOC,UAAWD,GAAU,CAC7D,KAAKJ,SAAWM,SAASF,EAAO,QAAW,EAC3C,KAAKZ,cAAce,uBAAuB,KAAKP,QAAQ,EAAEK,UAAWG,GAAO,CACvE,KAAKpB,OAASoB,EAAIC,KAClB,KAAKV,QAAU,EACnB,CAAC,EACD,KAAKW,kCAAiC,CAC1C,CAAC,CACL,CAEAC,aAAW,CACP,KAAKT,mBAAmBU,YAAW,CACvC,CAEA3B,sBAAoB,CAChB,KAAKY,OAAOgB,SAAS,CAAC,UAAW,KAAKb,QAAQ,CAAC,CACnD,CAKAc,yBAAuB,CACnB,OAAO,KAAKtB,cAAcuB,oBAAoB,KAAKf,QAAQ,EAAEgB,KACzDC,EAAI,IAAM,EAAI,EACdC,EAAYV,GACJA,EAAIW,SAAW,IACRC,EAAG,EAAK,EAERC,EAAW,IAAMb,CAAG,CAElC,CAAC,CAEV,CAEAE,mCAAiC,CAC7B,KAAKI,wBAAuB,EAAGT,UAAWiB,GAAqB,CACvDA,GACA,KAAKrC,qBAAoB,CAEjC,CAAC,CACL,4CApDSM,EAAiC,2BAAjCA,EAAiCgC,UAAA,CAAA,CAAA,yCAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,eAAA,0CAAA,EAAA,CAAA,eAAA,kDAAA,EAAA,CAAA,eAAA,4DAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,iBAAA,QAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICf9CnD,EAAA,EAAA,KAAA,CAAA,EACAF,EAAA,EAAA;CAAA,EAAAuD,EAAA,EAAAC,EAAA,EAAA,CAAA,EAAe,EAAAC,EAAA,GAAA,CAAA,SAAf9C,EAAA,CAAA,EAAA+C,EAAAJ,EAAA9B,QAAA,EAAA,CAAA,kBDYcmC,EAAoBC,EAAoCC,CAAiC,EAAAC,cAAA,CAAA,CAAA,SAE1F9C,CAAiC,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "redirectToCoursePage", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "course", "title", "\u0275\u0275property", "CourseRegistrationDetailComponent", "courseService", "inject", "CourseManagementService", "route", "ActivatedRoute", "router", "Router", "loading", "courseId", "undefined", "paramSubscription", "ngOnInit", "params", "subscribe", "parseInt", "findOneForRegistration", "res", "body", "redirectIfCourseIsFullyAccessible", "ngOnDestroy", "unsubscribe", "navigate", "isCourseFullyAccessible", "findOneForDashboard", "pipe", "map", "catchError", "status", "of", "throwError", "isFullyAccessible", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CourseRegistrationDetailComponent_Conditional_2_Template", "CourseRegistrationDetailComponent_Conditional_3_Template", "\u0275\u0275conditional", "TranslateDirective", "CoursePrerequisitesButtonComponent", "CourseRegistrationButtonComponent", "encapsulation"]
}
