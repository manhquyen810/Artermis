{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/exercise-groups/exercise-group.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\n\r\ntype EntityResponseType = HttpResponse<ExerciseGroup>;\r\ntype EntityArrayResponseType = HttpResponse<ExerciseGroup[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExerciseGroupService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/exam/courses';\r\n\r\n    /**\r\n     * Create an exercise group on the server using a POST request.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param exerciseGroup The exercise group to create.\r\n     */\r\n    create(courseId: number, examId: number, exerciseGroup: ExerciseGroup): Observable<EntityResponseType> {\r\n        return this.http.post<ExerciseGroup>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercise-groups`, exerciseGroup, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update an exercise group on the server using a PUT request.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param exerciseGroup The exercise group to update.\r\n     */\r\n    update(courseId: number, examId: number, exerciseGroup: ExerciseGroup): Observable<EntityResponseType> {\r\n        return this.http.put<ExerciseGroup>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercise-groups`, exerciseGroup, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find an exercise group on the server using a GET request.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param exerciseGroupId The id of the exercise group to get.\r\n     */\r\n    find(courseId: number, examId: number, exerciseGroupId: number): Observable<EntityResponseType> {\r\n        return this.http.get<ExerciseGroup>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercise-groups/${exerciseGroupId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Delete an exercise group on the server using a DELETE request.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     * @param exerciseGroupId The id of the exercise group to delete.\r\n     * @param deleteStudentReposBuildPlans indicates if the StudentReposBuildPlans should be also deleted or not\r\n     * @param deleteBaseReposBuildPlans indicates if the BaseReposBuildPlans should be also deleted or not\r\n     */\r\n    delete(courseId: number, examId: number, exerciseGroupId: number, deleteStudentReposBuildPlans: boolean, deleteBaseReposBuildPlans: boolean): Observable<HttpResponse<void>> {\r\n        let params = new HttpParams();\r\n        if (deleteBaseReposBuildPlans != undefined && deleteStudentReposBuildPlans != undefined) {\r\n            params = params.set('deleteStudentReposBuildPlans', deleteStudentReposBuildPlans.toString());\r\n            params = params.set('deleteBaseReposBuildPlans', deleteBaseReposBuildPlans.toString());\r\n        }\r\n        return this.http.delete<void>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercise-groups/${exerciseGroupId}`, { params, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find all exercise groups for the given exam.\r\n     * @param courseId The course id.\r\n     * @param examId The exam id.\r\n     */\r\n    findAllForExam(courseId: number, examId: number): Observable<EntityArrayResponseType> {\r\n        return this.http.get<ExerciseGroup[]>(`${this.resourceUrl}/${courseId}/exams/${examId}/exercise-groups`, { observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "gGASA,IAAaA,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,KAAOC,EAAOC,CAAU,EAEzBC,YAAc,mBAQrBC,OAAOC,EAAkBC,EAAgBC,EAA4B,CACjE,OAAO,KAAKP,KAAKQ,KAAoB,GAAG,KAAKL,WAAW,IAAIE,CAAQ,UAAUC,CAAM,mBAAoBC,EAAe,CAAEE,QAAS,UAAU,CAAE,CAClJ,CAQAC,OAAOL,EAAkBC,EAAgBC,EAA4B,CACjE,OAAO,KAAKP,KAAKW,IAAmB,GAAG,KAAKR,WAAW,IAAIE,CAAQ,UAAUC,CAAM,mBAAoBC,EAAe,CAAEE,QAAS,UAAU,CAAE,CACjJ,CAQAG,KAAKP,EAAkBC,EAAgBO,EAAuB,CAC1D,OAAO,KAAKb,KAAKc,IAAmB,GAAG,KAAKX,WAAW,IAAIE,CAAQ,UAAUC,CAAM,oBAAoBO,CAAe,GAAI,CAAEJ,QAAS,UAAU,CAAE,CACrJ,CAUAM,OAAOV,EAAkBC,EAAgBO,EAAyBG,EAAuCC,EAAkC,CACvI,IAAIC,EAAS,IAAIC,EACjB,OAAIF,GAA6BG,MAAaJ,GAAgCI,OAC1EF,EAASA,EAAOG,IAAI,+BAAgCL,EAA6BM,SAAQ,CAAE,EAC3FJ,EAASA,EAAOG,IAAI,4BAA6BJ,EAA0BK,SAAQ,CAAE,GAElF,KAAKtB,KAAKe,OAAa,GAAG,KAAKZ,WAAW,IAAIE,CAAQ,UAAUC,CAAM,oBAAoBO,CAAe,GAAI,CAAEK,OAAAA,EAAQT,QAAS,UAAU,CAAE,CACvJ,CAOAc,eAAelB,EAAkBC,EAAc,CAC3C,OAAO,KAAKN,KAAKc,IAAqB,GAAG,KAAKX,WAAW,IAAIE,CAAQ,UAAUC,CAAM,mBAAoB,CAAEG,QAAS,UAAU,CAAE,CACpI,4CA3DSV,EAAoB,6BAApBA,EAAoByB,QAApBzB,EAAoB0B,UAAAC,WADP,MAAM,CAAA,SACnB3B,CAAoB,GAAA",
  "names": ["ExerciseGroupService", "http", "inject", "HttpClient", "resourceUrl", "create", "courseId", "examId", "exerciseGroup", "post", "observe", "update", "put", "find", "exerciseGroupId", "get", "delete", "deleteStudentReposBuildPlans", "deleteBaseReposBuildPlans", "params", "HttpParams", "undefined", "set", "toString", "findAllForExam", "factory", "\u0275fac", "providedIn"]
}
