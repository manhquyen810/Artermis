{
  "version": 3,
  "sources": ["src/main/webapp/app/localvc/commit-history/commit-history.component.ts", "src/main/webapp/app/localvc/commit-history/commit-history.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { CommitInfo, ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { SolutionProgrammingExerciseParticipation } from 'app/entities/participation/solution-programming-exercise-participation.model';\r\nimport { TemplateProgrammingExerciseParticipation } from 'app/entities/participation/template-programming-exercise-participation.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { CommitsInfoComponent } from '../../exercises/programming/shared/commits-info/commits-info.component';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\n@Component({\r\n    selector: 'jhi-commit-history',\r\n    templateUrl: './commit-history.component.html',\r\n    imports: [CommitsInfoComponent],\r\n})\r\nexport class CommitHistoryComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n\r\n    readonly PROGRAMMING = ExerciseType.PROGRAMMING;\r\n    readonly dayjs = dayjs;\r\n\r\n    participation: TemplateProgrammingExerciseParticipation | SolutionProgrammingExerciseParticipation | ProgrammingExerciseStudentParticipation;\r\n    exerciseId: number;\r\n    repositoryType: RepositoryType;\r\n    repositoryId?: number; // acts as both participationId (USER repositories) and repositoryId (AUXILIARY repositories), undefined for TEMPLATE, SOLUTION and TEST\r\n    paramSub: Subscription;\r\n    commits: CommitInfo[];\r\n    commitsInfoSubscription: Subscription;\r\n    participationSub: Subscription;\r\n\r\n    exercise: ProgrammingExercise;\r\n\r\n    isTestRepository = false;\r\n\r\n    ngOnDestroy() {\r\n        this.paramSub?.unsubscribe();\r\n        this.commitsInfoSubscription?.unsubscribe();\r\n        this.participationSub?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * On init, subscribe to the route params to get the participation id and load the participation.\r\n     */\r\n    ngOnInit() {\r\n        this.paramSub = this.route.params.subscribe((params) => {\r\n            this.exerciseId = Number(params['exerciseId']);\r\n            this.repositoryType = params['repositoryType'] ?? RepositoryType.USER;\r\n            this.repositoryId = Number(params['repositoryId']);\r\n            if (this.repositoryId && this.repositoryType === RepositoryType.USER) {\r\n                this.loadStudentParticipation();\r\n            } else {\r\n                this.loadDifferentParticipation();\r\n            }\r\n        });\r\n    }\r\n\r\n    private loadDifferentParticipation() {\r\n        this.participationSub = this.programmingExerciseService\r\n            .findWithTemplateAndSolutionParticipation(this.exerciseId, true)\r\n            .pipe(\r\n                tap((exerciseRes) => {\r\n                    this.exercise = exerciseRes.body!;\r\n                    if (this.repositoryType === 'TEMPLATE') {\r\n                        this.participation = this.exercise.templateParticipation!;\r\n                        (this.participation as TemplateProgrammingExerciseParticipation).programmingExercise = this.exercise;\r\n                        this.participation.results = this.participation.submissions\r\n                            ?.filter((submission) => submission.results && submission.results?.length > 0)\r\n                            .map((submission) => {\r\n                                submission.results![0].participation = this.participation!;\r\n                                return submission.results![0];\r\n                            });\r\n                    } else if (this.repositoryType === 'SOLUTION') {\r\n                        this.participation = this.exercise.solutionParticipation!;\r\n                        (this.participation as SolutionProgrammingExerciseParticipation).programmingExercise = this.exercise;\r\n                        this.participation.results = this.participation.submissions\r\n                            ?.filter((submission) => submission.results && submission.results?.length > 0)\r\n                            .map((submission) => {\r\n                                submission.results![0].participation = this.participation!;\r\n                                return submission.results![0];\r\n                            });\r\n                    } else if (this.repositoryType === 'TESTS') {\r\n                        this.isTestRepository = true;\r\n                        this.participation = this.exercise.templateParticipation!;\r\n                    } else if (this.repositoryType === 'AUXILIARY') {\r\n                        this.participation = this.exercise.templateParticipation!;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.handleCommits();\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load the participation with all results. Calls the handleCommits method after the participation is loaded.\r\n     * @private\r\n     */\r\n    private loadStudentParticipation() {\r\n        this.participationSub = this.programmingExerciseParticipationService\r\n            .getStudentParticipationWithAllResults(this.repositoryId!)\r\n            .pipe(\r\n                tap((participation) => {\r\n                    this.participation = participation;\r\n                    this.participation.results?.forEach((result) => {\r\n                        result.participation = participation!;\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.handleCommits();\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the commit history and handles it depending on repository type\r\n     * The last commit is always the template commit and is added to the list of commits.\r\n     * @private\r\n     */\r\n    private handleCommits() {\r\n        if (this.repositoryType === RepositoryType.USER) {\r\n            this.handleParticipationCommits();\r\n        } else if (this.repositoryType === RepositoryType.AUXILIARY) {\r\n            this.handleAuxiliaryRepositoryCommits();\r\n        } else {\r\n            this.handleTemplateSolutionTestRepositoryCommits();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the commit history and filters out the commits that have no submission.\r\n     * The last commit is always the template commit and is added to the list of commits.\r\n     * @private\r\n     */\r\n    private handleParticipationCommits() {\r\n        this.commitsInfoSubscription = this.programmingExerciseParticipationService.retrieveCommitHistoryForParticipation(this.participation.id!).subscribe((commits) => {\r\n            this.commits = this.sortCommitsByTimestampDesc(commits);\r\n            this.setCommitResults();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the commit history for an auxiliary repository\r\n     * The last commit is always the template commit and is added to the list of commits.\r\n     * @private\r\n     */\r\n    private handleAuxiliaryRepositoryCommits() {\r\n        this.commitsInfoSubscription = this.programmingExerciseParticipationService\r\n            .retrieveCommitHistoryForAuxiliaryRepository(this.exerciseId, this.repositoryId!)\r\n            .subscribe((commits) => {\r\n                this.commits = this.sortCommitsByTimestampDesc(commits);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the commit history for template/solution/test repositories.\r\n     * The last commit is always the template commit and is added to the list of commits.\r\n     * @private\r\n     */\r\n    private handleTemplateSolutionTestRepositoryCommits() {\r\n        this.commitsInfoSubscription = this.programmingExerciseParticipationService\r\n            .retrieveCommitHistoryForTemplateSolutionOrTests(this.exerciseId, this.repositoryType)\r\n            .subscribe((commits) => {\r\n                this.commits = this.sortCommitsByTimestampDesc(commits);\r\n                if (!this.isTestRepository) {\r\n                    this.setCommitResults();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets the result of the commit if it exists.\r\n     * @private\r\n     */\r\n    private setCommitResults() {\r\n        this.commits.forEach((commit) => {\r\n            this.participation.results?.forEach((result) => {\r\n                const submission = result.submission as ProgrammingSubmission;\r\n                if (submission) {\r\n                    if (submission.commitHash === commit.hash) {\r\n                        commit.result = result;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sorts the commits by timestamp in descending order.\r\n     * @param commitInfos the commits to sort\r\n     * @private\r\n     */\r\n    private sortCommitsByTimestampDesc(commitInfos: CommitInfo[]) {\r\n        return commitInfos.sort((a, b) => (dayjs(b.timestamp!).isAfter(dayjs(a.timestamp!)) ? 1 : -1));\r\n    }\r\n}\r\n", "@if (participation && commits) {\r\n    <jhi-commits-info [participationId]=\"participation.id\" [commits]=\"commits\" [isRepositoryView]=\"true\" />\r\n}\r\n"],
  "mappings": "okECCIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,mBAAA,CAAA,EACJD,EAAA,EAAA;CAAA,kBADsBE,EAAA,EAAAC,EAAA,kBAAAC,EAAAC,cAAAC,EAAA,EAAoC,UAAAF,EAAAG,OAAA,EAAoB,mBAAA,EAAA,GDoB9E,IAAaC,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,MAAQC,EAAOC,CAAc,EAC7BC,wCAA0CF,EAAOG,CAAuC,EACxFC,2BAA6BJ,EAAOK,CAA0B,EAE7DC,YAAcC,EAAaD,YAC3BE,MAAQA,EAEjBb,cACAc,WACAC,eACAC,aACAC,SACAf,QACAgB,wBACAC,iBAEAC,SAEAC,iBAAmB,GAEnBC,aAAW,CACP,KAAKL,UAAUM,YAAW,EAC1B,KAAKL,yBAAyBK,YAAW,EACzC,KAAKJ,kBAAkBI,YAAW,CACtC,CAKAC,UAAQ,CACJ,KAAKP,SAAW,KAAKb,MAAMqB,OAAOC,UAAWD,GAAU,CACnD,KAAKX,WAAaa,OAAOF,EAAO,UAAa,EAC7C,KAAKV,eAAiBU,EAAO,gBAAqBG,EAAeC,KACjE,KAAKb,aAAeW,OAAOF,EAAO,YAAe,EAC7C,KAAKT,cAAgB,KAAKD,iBAAmBa,EAAeC,KAC5D,KAAKC,yBAAwB,EAE7B,KAAKC,2BAA0B,CAEvC,CAAC,CACL,CAEQA,4BAA0B,CAC9B,KAAKZ,iBAAmB,KAAKV,2BACxBuB,yCAAyC,KAAKlB,WAAY,EAAI,EAC9DmB,KACGC,EAAKC,GAAe,CAChB,KAAKf,SAAWe,EAAYC,KACxB,KAAKrB,iBAAmB,YACxB,KAAKf,cAAgB,KAAKoB,SAASiB,sBAClC,KAAKrC,cAA2DsC,oBAAsB,KAAKlB,SAC5F,KAAKpB,cAAcuC,QAAU,KAAKvC,cAAcwC,aAC1CC,OAAQC,GAAeA,EAAWH,SAAWG,EAAWH,SAASI,OAAS,CAAC,EAC5EC,IAAKF,IACFA,EAAWH,QAAS,CAAC,EAAEvC,cAAgB,KAAKA,cACrC0C,EAAWH,QAAS,CAAC,EAC/B,GACE,KAAKxB,iBAAmB,YAC/B,KAAKf,cAAgB,KAAKoB,SAASyB,sBAClC,KAAK7C,cAA2DsC,oBAAsB,KAAKlB,SAC5F,KAAKpB,cAAcuC,QAAU,KAAKvC,cAAcwC,aAC1CC,OAAQC,GAAeA,EAAWH,SAAWG,EAAWH,SAASI,OAAS,CAAC,EAC5EC,IAAKF,IACFA,EAAWH,QAAS,CAAC,EAAEvC,cAAgB,KAAKA,cACrC0C,EAAWH,QAAS,CAAC,EAC/B,GACE,KAAKxB,iBAAmB,SAC/B,KAAKM,iBAAmB,GACxB,KAAKrB,cAAgB,KAAKoB,SAASiB,uBAC5B,KAAKtB,iBAAmB,cAC/B,KAAKf,cAAgB,KAAKoB,SAASiB,sBAE3C,CAAC,CAAC,EAELX,UAAU,CACPoB,KAAMA,IAAK,CACP,KAAKC,cAAa,CACtB,EACH,CACT,CAMQjB,0BAAwB,CAC5B,KAAKX,iBAAmB,KAAKZ,wCACxByC,sCAAsC,KAAKhC,YAAa,EACxDiB,KACGC,EAAKlC,GAAiB,CAClB,KAAKA,cAAgBA,EACrB,KAAKA,cAAcuC,SAASU,QAASC,GAAU,CAC3CA,EAAOlD,cAAgBA,CAC3B,CAAC,CACL,CAAC,CAAC,EAEL0B,UAAU,CACPoB,KAAMA,IAAK,CACP,KAAKC,cAAa,CACtB,EACH,CACT,CAOQA,eAAa,CACb,KAAKhC,iBAAmBa,EAAeC,KACvC,KAAKsB,2BAA0B,EACxB,KAAKpC,iBAAmBa,EAAewB,UAC9C,KAAKC,iCAAgC,EAErC,KAAKC,4CAA2C,CAExD,CAOQH,4BAA0B,CAC9B,KAAKjC,wBAA0B,KAAKX,wCAAwCgD,sCAAsC,KAAKvD,cAAcC,EAAG,EAAEyB,UAAWxB,GAAW,CAC5J,KAAKA,QAAU,KAAKsD,2BAA2BtD,CAAO,EACtD,KAAKuD,iBAAgB,CACzB,CAAC,CACL,CAOQJ,kCAAgC,CACpC,KAAKnC,wBAA0B,KAAKX,wCAC/BmD,4CAA4C,KAAK5C,WAAY,KAAKE,YAAa,EAC/EU,UAAWxB,GAAW,CACnB,KAAKA,QAAU,KAAKsD,2BAA2BtD,CAAO,CAC1D,CAAC,CACT,CAOQoD,6CAA2C,CAC/C,KAAKpC,wBAA0B,KAAKX,wCAC/BoD,gDAAgD,KAAK7C,WAAY,KAAKC,cAAc,EACpFW,UAAWxB,GAAW,CACnB,KAAKA,QAAU,KAAKsD,2BAA2BtD,CAAO,EACjD,KAAKmB,kBACN,KAAKoC,iBAAgB,CAE7B,CAAC,CACT,CAMQA,kBAAgB,CACpB,KAAKvD,QAAQ+C,QAASW,GAAU,CAC5B,KAAK5D,cAAcuC,SAASU,QAASC,GAAU,CAC3C,IAAMR,EAAaQ,EAAOR,WACtBA,GACIA,EAAWmB,aAAeD,EAAOE,OACjCF,EAAOV,OAASA,EAG5B,CAAC,CACL,CAAC,CACL,CAOQM,2BAA2BO,EAAyB,CACxD,OAAOA,EAAYC,KAAK,CAACC,EAAGC,IAAOrD,EAAMqD,EAAEC,SAAU,EAAEC,QAAQvD,EAAMoD,EAAEE,SAAU,CAAC,EAAI,EAAI,EAAG,CACjG,4CAxLShE,EAAsB,2BAAtBA,EAAsBkE,UAAA,CAAA,CAAA,oBAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,kBAAA,UAAA,kBAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCrBnCE,EAAA,EAAAC,EAAA,EAAA,CAAA,OAAAC,EAAAH,EAAA3E,eAAA2E,EAAAzE,QAAA,EAAA,EAAA,iBDmBc6E,CAAoB,EAAAC,cAAA,CAAA,CAAA,SAErB7E,CAAsB,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "participation", "id", "commits", "CommitHistoryComponent", "route", "inject", "ActivatedRoute", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "programmingExerciseService", "ProgrammingExerciseService", "PROGRAMMING", "ExerciseType", "dayjs", "exerciseId", "repositoryType", "repositoryId", "paramSub", "commitsInfoSubscription", "participationSub", "exercise", "isTestRepository", "ngOnDestroy", "unsubscribe", "ngOnInit", "params", "subscribe", "Number", "RepositoryType", "USER", "loadStudentParticipation", "loadDifferentParticipation", "findWithTemplateAndSolutionParticipation", "pipe", "tap", "exerciseRes", "body", "templateParticipation", "programmingExercise", "results", "submissions", "filter", "submission", "length", "map", "solutionParticipation", "next", "handleCommits", "getStudentParticipationWithAllResults", "forEach", "result", "handleParticipationCommits", "AUXILIARY", "handleAuxiliaryRepositoryCommits", "handleTemplateSolutionTestRepositoryCommits", "retrieveCommitHistoryForParticipation", "sortCommitsByTimestampDesc", "setCommitResults", "retrieveCommitHistoryForAuxiliaryRepository", "retrieveCommitHistoryForTemplateSolutionOrTests", "commit", "commitHash", "hash", "commitInfos", "sort", "a", "b", "timestamp", "isAfter", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CommitHistoryComponent_Conditional_0_Template", "\u0275\u0275conditional", "CommitsInfoComponent", "encapsulation"]
}
