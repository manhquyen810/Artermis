{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n    // blockComment: ['COMMENT', '.'],\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\"lexon\", \"lex\", \"clause\", \"terms\", \"contracts\", \"may\", \"pay\", \"pays\", \"appoints\", \"into\", \"to\"],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\"less\", \"greater\", \"equal\", \"le\", \"gt\", \"or\", \"and\", \"add\", \"added\", \"subtract\", \"subtracted\", \"multiply\", \"multiplied\", \"times\", \"divide\", \"divided\", \"is\", \"be\", \"certified\"],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // comment\n    [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n    // special identifier cases\n    [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@open\",\n      next: \"@quoted_identifier\"\n    }], [\"LEX$\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [\"LEXON\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@semver\"\n    }], [\":\", {\n      token: \"delimiter\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }],\n    // identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@typeKeywords\": \"keyword.type\",\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }],\n    // whitespace\n    {\n      include: \"@whitespace\"\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"],\n    // numbers\n    [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/\\d+/, \"number\"],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, \"delimiter\"]],\n    quoted_identifier: [[/[^\\\\\"]+/, \"identifier\"], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    space_identifier_until_period: [[\":\", \"delimiter\"], [\" \", {\n      token: \"white\",\n      next: \"@identifier_rest\"\n    }]],\n    identifier_until_period: [{\n      include: \"@whitespace\"\n    }, [\":\", {\n      token: \"delimiter\",\n      next: \"@identifier_rest\"\n    }], [/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    identifier_rest: [[/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    semver: [{\n      include: \"@whitespace\"\n    }, [\":\", \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, {\n      token: \"number.semver\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport { conf, language };"],"mappings":"4BAQA,IAAIA,EAAO,CACT,SAAU,CACR,YAAa,SAEf,EACA,SAAU,CAAC,CAAC,IAAK,GAAG,CAAC,EACrB,iBAAkB,CAAC,CACjB,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,CAAC,EACD,iBAAkB,CAAC,CACjB,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,CAAC,EACD,QAAS,CACP,QAAS,CACP,MAAO,IAAI,OAAO,kCAAkC,EACpD,IAAK,IAAI,OAAO,qCAAqC,CACvD,CACF,CACF,EACIC,EAAW,CAGb,aAAc,SACd,WAAY,GACZ,SAAU,CAAC,QAAS,MAAO,SAAU,QAAS,YAAa,MAAO,MAAO,OAAQ,WAAY,OAAQ,IAAI,EACzG,aAAc,CAAC,SAAU,SAAU,MAAO,OAAQ,OAAQ,QAAS,MAAM,EACzE,UAAW,CAAC,OAAQ,UAAW,QAAS,KAAM,KAAM,KAAM,MAAO,MAAO,QAAS,WAAY,aAAc,WAAY,aAAc,QAAS,SAAU,UAAW,KAAM,KAAM,WAAW,EAE1L,QAAS,wBAET,UAAW,CACT,KAAM,CAEN,CAAC,8BAA+B,CAAC,GAAI,SAAS,CAAC,EAE/C,CAAC,IAAK,CACJ,MAAO,mBACP,QAAS,QACT,KAAM,oBACR,CAAC,EAAG,CAAC,OAAQ,CACX,MAAO,UACP,QAAS,QACT,KAAM,0BACR,CAAC,EAAG,CAAC,QAAS,CACZ,MAAO,UACP,QAAS,QACT,KAAM,SACR,CAAC,EAAG,CAAC,IAAK,CACR,MAAO,YACP,QAAS,QACT,KAAM,0BACR,CAAC,EAED,CAAC,gBAAiB,CAChB,MAAO,CACL,aAAc,WACd,gBAAiB,eACjB,YAAa,UACb,WAAY,YACd,CACF,CAAC,EAED,CACE,QAAS,aACX,EAEA,CAAC,aAAc,WAAW,EAAG,CAAC,mBAAoB,WAAW,EAAG,CAAC,WAAY,WAAW,EAExF,CAAC,gBAAiB,eAAe,EAAG,CAAC,2BAA4B,cAAc,EAAG,CAAC,oBAAqB,YAAY,EAAG,CAAC,MAAO,QAAQ,EAEvI,CAAC,QAAS,WAAW,CAAC,EACtB,kBAAmB,CAAC,CAAC,UAAW,YAAY,EAAG,CAAC,IAAK,CACnD,MAAO,mBACP,QAAS,SACT,KAAM,MACR,CAAC,CAAC,EACF,8BAA+B,CAAC,CAAC,IAAK,WAAW,EAAG,CAAC,IAAK,CACxD,MAAO,QACP,KAAM,kBACR,CAAC,CAAC,EACF,wBAAyB,CAAC,CACxB,QAAS,aACX,EAAG,CAAC,IAAK,CACP,MAAO,YACP,KAAM,kBACR,CAAC,EAAG,CAAC,UAAW,YAAY,EAAG,CAAC,KAAM,CACpC,MAAO,YACP,QAAS,SACT,KAAM,MACR,CAAC,CAAC,EACF,gBAAiB,CAAC,CAAC,UAAW,YAAY,EAAG,CAAC,KAAM,CAClD,MAAO,YACP,QAAS,SACT,KAAM,MACR,CAAC,CAAC,EACF,OAAQ,CAAC,CACP,QAAS,aACX,EAAG,CAAC,IAAK,WAAW,EAAG,CAAC,gBAAiB,CACvC,MAAO,gBACP,QAAS,SACT,KAAM,MACR,CAAC,CAAC,EACF,WAAY,CAAC,CAAC,aAAc,OAAO,CAAC,CACtC,CACF","names":["conf","language"],"x_google_ignoreList":[0]}