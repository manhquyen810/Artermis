{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/pipes/duration.pipe.ts", "src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-instructor-submission-state.component.ts", "src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-instructor-submission-state.component.html", "src/main/webapp/app/exercises/shared/participation/participation.component.ts", "src/main/webapp/app/exercises/shared/participation/participation.component.html"],
  "sourcesContent": ["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport dayjs from 'dayjs/esm';\r\n\r\n@Pipe({ name: 'duration' })\r\n// create a duration with the length of time in milliseconds\r\n// Note: if you want to create a duration with a unit of measurement other than milliseconds, you need to use a separate (custom) pipe https://day.js.org/docs/en/durations/creating\r\nexport class DurationPipe implements PipeTransform {\r\n    transform(value: any): string {\r\n        if (value) {\r\n            return dayjs.duration(value).humanize();\r\n        }\r\n        return '';\r\n    }\r\n}\r\n", "import { Component, Input, OnChanges, OnInit, SimpleChanges, inject } from '@angular/core';\r\nimport { debounceTime, map, tap } from 'rxjs/operators';\r\nimport { ExerciseSubmissionState, ProgrammingSubmissionService, ProgrammingSubmissionState } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { hasExerciseChanged } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { faCircleNotch, faClock, faRedo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\nimport { ProgrammingExerciseTriggerAllButtonComponent } from './programming-exercise-trigger-all-button.component';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { DurationPipe } from 'app/shared/pipes/duration.pipe';\r\n\r\n/**\r\n * This components provides two buttons to the instructor to interact with the students' submissions:\r\n * - Trigger builds for all student participations\r\n * - Trigger builds for failed student participations\r\n *\r\n * Also shows an info section next to the buttons about the number of building and failed submissions.\r\n */\r\n@Component({\r\n    selector: 'jhi-programming-exercise-instructor-submission-state',\r\n    templateUrl: './programming-exercise-instructor-submission-state.component.html',\r\n    imports: [FaIconComponent, NgbTooltip, NgClass, ProgrammingExerciseTriggerAllButtonComponent, ButtonComponent, ArtemisTranslatePipe, DurationPipe],\r\n})\r\nexport class ProgrammingExerciseInstructorSubmissionStateComponent implements OnChanges, OnInit {\r\n    private programmingSubmissionService = inject(ProgrammingSubmissionService);\r\n\r\n    FeatureToggle = FeatureToggle;\r\n    ButtonType = ButtonType;\r\n    ProgrammingSubmissionState = ProgrammingSubmissionState;\r\n\r\n    @Input() exercise: ProgrammingExercise;\r\n\r\n    hasFailedSubmissions = false;\r\n    hasBuildingSubmissions = false;\r\n    buildingSummary: { [submissionState: string]: number };\r\n    isBuildingFailedSubmissions = false;\r\n\r\n    resultEtaInMs: number;\r\n\r\n    submissionStateSubscription: Subscription;\r\n    resultEtaSubscription: Subscription;\r\n\r\n    // Icons\r\n    faClock = faClock;\r\n    faCircleNotch = faCircleNotch;\r\n    faRedo = faRedo;\r\n\r\n    ngOnInit(): void {\r\n        this.resultEtaSubscription = this.programmingSubmissionService.getResultEtaInMs().subscribe((resultEta) => (this.resultEtaInMs = resultEta));\r\n    }\r\n\r\n    /**\r\n     * When the selected exercise changes, create a subscription to the complete submission state of the exercise.\r\n     *\r\n     * @param changes only relevant for change of exerciseId.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (hasExerciseChanged(changes)) {\r\n            this.submissionStateSubscription = this.programmingSubmissionService\r\n                .getSubmissionStateOfExercise(this.exercise.id!)\r\n                .pipe(\r\n                    map(this.sumSubmissionStates),\r\n                    // If we would update the UI with every small change, it would seem very hectic. So we always take the latest value after 1 second.\r\n                    debounceTime(500),\r\n                    tap((buildingSummary: { [submissionState: string]: number }) => {\r\n                        this.buildingSummary = buildingSummary;\r\n                        this.hasFailedSubmissions = this.buildingSummary[ProgrammingSubmissionState.HAS_FAILED_SUBMISSION] > 0;\r\n                        this.hasBuildingSubmissions = this.buildingSummary[ProgrammingSubmissionState.IS_BUILDING_PENDING_SUBMISSION] > 0;\r\n                    }),\r\n                )\r\n                .subscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve the participation ids that have a failed submission and retry their build.\r\n     */\r\n    triggerBuildOfFailedSubmissions() {\r\n        this.isBuildingFailedSubmissions = true;\r\n        const failedSubmissionParticipations = this.programmingSubmissionService.getSubmissionCountByType(this.exercise.id!, ProgrammingSubmissionState.HAS_FAILED_SUBMISSION);\r\n        this.programmingSubmissionService\r\n            .triggerInstructorBuildForParticipationsOfExercise(this.exercise.id!, failedSubmissionParticipations)\r\n            .subscribe(() => (this.isBuildingFailedSubmissions = false));\r\n    }\r\n\r\n    private sumSubmissionStates = (buildState: ExerciseSubmissionState) =>\r\n        Object.values(buildState).reduce((acc: { [state: string]: number }, { submissionState }) => {\r\n            return { ...acc, [submissionState]: (acc[submissionState] || 0) + 1 };\r\n        }, {});\r\n}\r\n", "@if (buildingSummary) {\r\n    <div class=\"d-flex\">\r\n        @if (hasBuildingSubmissions) {\r\n            <div id=\"result-eta\" class=\"badge bg-secondary d-flex flex-column justify-content-between me-3\">\r\n                <fa-icon [icon]=\"faClock\" />\r\n                <span\r\n                    [ngbTooltip]=\"'artemisApp.programmingExercise.resultETATooltip' | artemisTranslate\"\r\n                    [innerHTML]=\"'artemisApp.programmingExercise.resultETA' | artemisTranslate: { eta: resultEtaInMs | duration }\"\r\n                    >Result ETA: {{ resultEtaInMs | duration }}</span\r\n                >\r\n            </div>\r\n        }\r\n        <div id=\"build-state\" class=\"d-flex flex-column justify-content-between\">\r\n            <span\r\n                id=\"build-state-building\"\r\n                class=\"badge bg-primary flex-grow-0\"\r\n                [innerHTML]=\"\r\n                    'artemisApp.programmingExercise.buildingSubmissions'\r\n                        | artemisTranslate: { number: buildingSummary[ProgrammingSubmissionState.IS_BUILDING_PENDING_SUBMISSION] || 0 }\r\n                \"\r\n            >\r\n                Building submissions: {{ buildingSummary[ProgrammingSubmissionState.IS_BUILDING_PENDING_SUBMISSION] || 0 }}\r\n            </span>\r\n            <span\r\n                id=\"build-state-failed\"\r\n                [ngClass]=\"['badge', buildingSummary[ProgrammingSubmissionState.HAS_FAILED_SUBMISSION] > 0 ? 'bg-danger' : 'bg-success', 'flex-grow-0']\"\r\n                [innerHTML]=\"\r\n                    'artemisApp.programmingExercise.failedSubmissions' | artemisTranslate: { number: buildingSummary[ProgrammingSubmissionState.HAS_FAILED_SUBMISSION] || 0 }\r\n                \"\r\n            >\r\n                Failed submissions: {{ buildingSummary[ProgrammingSubmissionState.HAS_FAILED_SUBMISSION] || 0 }}\r\n            </span>\r\n        </div>\r\n        <jhi-programming-exercise-trigger-all-button [exercise]=\"exercise\" />\r\n        <jhi-button\r\n            id=\"trigger-failed-button\"\r\n            class=\"ms-3\"\r\n            [disabled]=\"!hasFailedSubmissions\"\r\n            [isLoading]=\"isBuildingFailedSubmissions\"\r\n            [icon]=\"faRedo\"\r\n            [title]=\"'artemisApp.programmingExercise.resubmitFailed'\"\r\n            [tooltip]=\"'artemisApp.programmingExercise.resubmitFailedTooltip'\"\r\n            [featureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n            (onClick)=\"triggerBuildOfFailedSubmissions()\"\r\n        />\r\n    </div>\r\n} @else {\r\n    <fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n}\r\n", "import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { ParticipationService } from './participation.service';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { StudentParticipation, isPracticeMode } from 'app/entities/participation/student-participation.model';\r\nimport { ExerciseSubmissionState, ProgrammingSubmissionService, ProgrammingSubmissionState } from 'app/exercises/programming/participate/programming-submission.service';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { formatTeamAsSearchResult } from 'app/exercises/shared/team/team.utils';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { faCircleNotch, faCodeBranch, faEraser, faFilePowerpoint, faTable, faTimes, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { GradeStepsDTO } from 'app/entities/grade-step.model';\r\nimport { PROFILE_LOCALVC } from 'app/app.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ProgrammingExerciseInstructorSubmissionStateComponent } from '../../programming/shared/actions/programming-exercise-instructor-submission-state.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { DataTableComponent } from 'app/shared/data-table/data-table.component';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { TeamStudentsListComponent } from '../team/team-participate/team-students-list.component';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { ProgrammingExerciseInstructorTriggerBuildButtonComponent } from '../../programming/shared/actions/programming-exercise-instructor-trigger-build-button.component';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { FeatureToggleDirective } from 'app/shared/feature-toggle/feature-toggle.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\nenum FilterProp {\r\n    ALL = 'all',\r\n    FAILED = 'failed',\r\n    NO_SUBMISSIONS = 'no-submissions',\r\n    NO_PRACTICE = 'no-practice',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-participation',\r\n    templateUrl: './participation.component.html',\r\n    imports: [\r\n        TranslateDirective,\r\n        FormsModule,\r\n        ProgrammingExerciseInstructorSubmissionStateComponent,\r\n        RouterLink,\r\n        FaIconComponent,\r\n        DataTableComponent,\r\n        NgxDatatableModule,\r\n        CodeButtonComponent,\r\n        TeamStudentsListComponent,\r\n        FormDateTimePickerComponent,\r\n        ProgrammingExerciseInstructorTriggerBuildButtonComponent,\r\n        DeleteButtonDirective,\r\n        FeatureToggleDirective,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ParticipationComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private participationService = inject(ParticipationService);\r\n    private alertService = inject(AlertService);\r\n    private eventManager = inject(EventManager);\r\n    private exerciseService = inject(ExerciseService);\r\n    private programmingSubmissionService = inject(ProgrammingSubmissionService);\r\n    private accountService = inject(AccountService);\r\n    private profileService = inject(ProfileService);\r\n    private gradingSystemService = inject(GradingSystemService);\r\n\r\n    // make constants available to html for comparison\r\n    readonly FilterProp = FilterProp;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly ActionType = ActionType;\r\n    readonly FeatureToggle = FeatureToggle;\r\n    protected readonly RepositoryType = RepositoryType;\r\n\r\n    participations: StudentParticipation[] = [];\r\n    participationsChangedDueDate: Map<number, StudentParticipation> = new Map<number, StudentParticipation>();\r\n    participationsChangedPresentation: Map<number, StudentParticipation> = new Map<number, StudentParticipation>();\r\n    filteredParticipationsSize = 0;\r\n    eventSubscriber: Subscription;\r\n    paramSub: Subscription;\r\n    exercise: Exercise;\r\n    hasLoadedPendingSubmissions = false;\r\n    basicPresentationEnabled = false;\r\n    gradedPresentationEnabled = false;\r\n\r\n    gradeStepsDTO?: GradeStepsDTO;\r\n    gradeStepsDTOSub: Subscription;\r\n\r\n    localVCEnabled = false;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError = this.dialogErrorSource.asObservable();\r\n\r\n    participationCriteria: {\r\n        filterProp: FilterProp;\r\n    };\r\n\r\n    exerciseSubmissionState: ExerciseSubmissionState;\r\n\r\n    isAdmin = false;\r\n\r\n    isLoading: boolean;\r\n\r\n    isSaving: boolean;\r\n\r\n    afterDueDate = false;\r\n\r\n    // Icons\r\n    faTable = faTable;\r\n    faTimes = faTimes;\r\n    faTrash = faTrash;\r\n    faCircleNotch = faCircleNotch;\r\n    faEraser = faEraser;\r\n    faFilePowerpoint = faFilePowerpoint;\r\n    faCodeBranch = faCodeBranch;\r\n\r\n    constructor() {\r\n        this.participationCriteria = {\r\n            filterProp: FilterProp.ALL,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initialize component by calling loadAll and registerChangeInParticipation\r\n     */\r\n    ngOnInit() {\r\n        this.paramSub = this.route.params.subscribe((params) => this.loadExercise(+params['exerciseId']));\r\n        this.registerChangeInParticipations();\r\n        this.isAdmin = this.accountService.isAdmin();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from all subscriptions and destroy eventSubscriber\r\n     */\r\n    ngOnDestroy() {\r\n        this.programmingSubmissionService.unsubscribeAllWebsocketTopics(this.exercise);\r\n        this.eventManager.destroy(this.eventSubscriber);\r\n        this.dialogErrorSource.unsubscribe();\r\n        if (this.paramSub) {\r\n            this.paramSub.unsubscribe();\r\n        }\r\n        if (this.gradeStepsDTOSub) {\r\n            this.gradeStepsDTOSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    private loadExercise(exerciseId: number) {\r\n        this.isLoading = true;\r\n        this.hasLoadedPendingSubmissions = false;\r\n        this.exerciseService.find(exerciseId).subscribe((exerciseResponse) => {\r\n            this.exercise = exerciseResponse.body!;\r\n            this.afterDueDate = !!this.exercise.dueDate && dayjs().isAfter(this.exercise.dueDate);\r\n            this.loadGradingScale(this.exercise.course?.id);\r\n            this.loadParticipations(exerciseId);\r\n            if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n                this.loadSubmissions(exerciseId);\r\n            }\r\n            this.basicPresentationEnabled = this.checkBasicPresentationConfig();\r\n        });\r\n    }\r\n\r\n    private loadGradingScale(courseId?: number) {\r\n        if (courseId) {\r\n            this.gradeStepsDTOSub = this.gradingSystemService.findGradeStepsForCourse(courseId).subscribe((gradeStepsDTO) => {\r\n                if (gradeStepsDTO.body) {\r\n                    this.gradeStepsDTO = gradeStepsDTO.body;\r\n                }\r\n                this.gradedPresentationEnabled = this.checkGradedPresentationConfig();\r\n            });\r\n        }\r\n    }\r\n\r\n    private loadParticipations(exerciseId: number) {\r\n        this.participationService.findAllParticipationsByExercise(exerciseId, false).subscribe((participationsResponse) => {\r\n            this.participations = participationsResponse.body!;\r\n            if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n                const programmingExercise = this.exercise as ProgrammingExercise;\r\n                if (programmingExercise.projectKey) {\r\n                    this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                        this.localVCEnabled = profileInfo.activeProfiles.includes(PROFILE_LOCALVC);\r\n                    });\r\n                }\r\n            }\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    private loadSubmissions(exerciseId: number) {\r\n        this.programmingSubmissionService\r\n            .getSubmissionStateOfExercise(exerciseId)\r\n            .pipe(\r\n                tap((exerciseSubmissionState: ExerciseSubmissionState) => {\r\n                    this.exerciseSubmissionState = exerciseSubmissionState;\r\n                }),\r\n            )\r\n            .subscribe(() => (this.hasLoadedPendingSubmissions = true));\r\n    }\r\n\r\n    updateParticipationFilter(newValue: FilterProp) {\r\n        this.isLoading = true;\r\n        setTimeout(() => {\r\n            this.participationCriteria.filterProp = newValue;\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    filterParticipationByProp = (participation: StudentParticipation) => {\r\n        switch (this.participationCriteria.filterProp) {\r\n            case FilterProp.FAILED:\r\n                return this.hasFailedSubmission(participation);\r\n            case FilterProp.NO_SUBMISSIONS:\r\n                return participation.submissionCount === 0;\r\n            case FilterProp.NO_PRACTICE:\r\n                return !isPracticeMode(participation);\r\n            case FilterProp.ALL:\r\n            default:\r\n                return true;\r\n        }\r\n    };\r\n\r\n    private hasFailedSubmission(participation: StudentParticipation) {\r\n        const submissionStateObj = this.exerciseSubmissionState[participation.id!];\r\n        if (submissionStateObj) {\r\n            const { submissionState } = submissionStateObj;\r\n            return submissionState === ProgrammingSubmissionState.HAS_FAILED_SUBMISSION;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    trackId(index: number, item: StudentParticipation) {\r\n        return item.id;\r\n    }\r\n\r\n    registerChangeInParticipations() {\r\n        this.eventSubscriber = this.eventManager.subscribe('participationListModification', () => this.loadExercise(this.exercise.id!));\r\n    }\r\n\r\n    checkBasicPresentationConfig(): boolean {\r\n        if (!this.exercise.course) {\r\n            return false;\r\n        }\r\n        return this.exercise.isAtLeastTutor === true && (this.exercise.course.presentationScore ?? 0) > 0 && this.exercise.presentationScoreEnabled === true;\r\n    }\r\n\r\n    checkGradedPresentationConfig(): boolean {\r\n        return !!(this.exercise.course && this.exercise.isAtLeastTutor && (this.gradeStepsDTO?.presentationsNumber ?? 0) > 0 && this.exercise.presentationScoreEnabled === true);\r\n    }\r\n\r\n    addBasicPresentation(participation: StudentParticipation) {\r\n        if (!this.basicPresentationEnabled) {\r\n            return;\r\n        }\r\n        participation.presentationScore = 1;\r\n        this.participationService.update(this.exercise, participation).subscribe({\r\n            error: () => this.alertService.error('artemisApp.participation.addPresentation.error'),\r\n        });\r\n    }\r\n\r\n    addGradedPresentation(participation: StudentParticipation) {\r\n        if (!this.gradedPresentationEnabled || (participation.presentationScore ?? 0) > 100 || (participation.presentationScore ?? 0) < 0) {\r\n            return;\r\n        }\r\n        this.participationService.update(this.exercise, participation).subscribe({\r\n            error: (res: HttpErrorResponse) => {\r\n                const error = res.error;\r\n                if (error && error.errorKey && error.errorKey === 'invalid.presentations.maxNumberOfPresentationsExceeded') {\r\n                    participation.presentationScore = undefined;\r\n                } else {\r\n                    this.alertService.error('artemisApp.participation.savePresentation.error');\r\n                }\r\n            },\r\n\r\n            complete: () => {\r\n                this.participationsChangedPresentation.delete(participation.id!);\r\n            },\r\n        });\r\n    }\r\n\r\n    hasGradedPresentationChanged(participation: StudentParticipation) {\r\n        return this.participationsChangedPresentation.has(participation.id!);\r\n    }\r\n\r\n    changeGradedPresentation(participation: StudentParticipation) {\r\n        this.participationsChangedPresentation.set(participation.id!, participation);\r\n    }\r\n\r\n    removePresentation(participation: StudentParticipation) {\r\n        if (!this.basicPresentationEnabled && !this.gradedPresentationEnabled) {\r\n            return;\r\n        }\r\n        participation.presentationScore = undefined;\r\n        this.participationService.update(this.exercise, participation).subscribe({\r\n            error: () => this.alertService.error('artemisApp.participation.removePresentation.error'),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save that the due date of the given participation has changed.\r\n     *\r\n     * Does not issue an immediate update of the due date to the server.\r\n     * The actual update is performed with {@link saveChangedDueDates}.\r\n     * @param participation of which the individual due date has changed.\r\n     */\r\n    changedIndividualDueDate(participation: StudentParticipation) {\r\n        this.participationsChangedDueDate.set(participation.id!, participation);\r\n    }\r\n\r\n    /**\r\n     * Removes the individual due date from the given participation.\r\n     *\r\n     * Does not issue an immediate update of the due date to the server.\r\n     * The actual update is performed with {@link saveChangedDueDates}.\r\n     * @param participation of which the individual due date should be removed.\r\n     */\r\n    removeIndividualDueDate(participation: StudentParticipation) {\r\n        participation.individualDueDate = undefined;\r\n        this.participationsChangedDueDate.set(participation.id!, participation);\r\n    }\r\n\r\n    /**\r\n     * Saves the updated individual due dates for all participants.\r\n     *\r\n     * Changes are not updated directly when changing just a single due date, as\r\n     * an update here might require a full update of the scheduling of the\r\n     * exercise. Therefore, an explicit save action which can also update the\r\n     * due date for multiple participants at the same time is preferred.\r\n     */\r\n    saveChangedDueDates() {\r\n        this.isSaving = true;\r\n\r\n        const changedParticipations = Array.from(this.participationsChangedDueDate.values());\r\n        this.participationService.updateIndividualDueDates(this.exercise, changedParticipations).subscribe({\r\n            next: (response) => {\r\n                response.body!.forEach((updatedParticipation) => {\r\n                    const changedIndex = this.participations.findIndex((participation) => participation.id! === updatedParticipation.id!);\r\n                    this.participations[changedIndex] = updatedParticipation;\r\n                });\r\n\r\n                this.participationsChangedDueDate.clear();\r\n                this.isSaving = false;\r\n                this.alertService.success('artemisApp.participation.updateDueDates.success', { count: response.body!.length });\r\n            },\r\n            error: () => {\r\n                this.alertService.error('artemisApp.participation.updateDueDates.error');\r\n                this.isSaving = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes participation\r\n     * @param participationId the id of the participation that we want to delete\r\n     * @param event passed from delete dialog to represent if checkboxes were checked\r\n     */\r\n    deleteParticipation(participationId: number, event: { [key: string]: boolean }) {\r\n        const deleteBuildPlan = event.deleteBuildPlan ? event.deleteBuildPlan : false;\r\n        const deleteRepository = event.deleteRepository ? event.deleteRepository : false;\r\n        this.participationService.delete(participationId, { deleteBuildPlan, deleteRepository }).subscribe({\r\n            next: () => {\r\n                this.eventManager.broadcast({\r\n                    name: 'participationListModification',\r\n                    content: 'Deleted an participation',\r\n                });\r\n                this.dialogErrorSource.next('');\r\n                this.participationsChangedDueDate.delete(participationId);\r\n                this.participationsChangedPresentation.delete(participationId);\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Cleans programming exercise participation\r\n     * @param programmingExerciseParticipation the id of the participation that we want to delete\r\n     */\r\n    cleanupProgrammingExerciseParticipation(programmingExerciseParticipation: StudentParticipation) {\r\n        this.participationService.cleanupBuildPlan(programmingExerciseParticipation).subscribe({\r\n            next: () => {\r\n                this.eventManager.broadcast({\r\n                    name: 'participationListModification',\r\n                    content: 'Cleanup the build plan of an participation',\r\n                });\r\n                this.dialogErrorSource.next('');\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the number of filtered participations\r\n     *\r\n     * @param filteredParticipationsSize Total number of participations after filters have been applied\r\n     */\r\n    handleParticipationsSizeChange = (filteredParticipationsSize: number) => {\r\n        this.filteredParticipationsSize = filteredParticipationsSize;\r\n    };\r\n\r\n    /**\r\n     * Formats the results in the autocomplete overlay.\r\n     *\r\n     * @param participation\r\n     */\r\n    searchResultFormatter = (participation: StudentParticipation) => {\r\n        if (participation.student) {\r\n            const { login, name } = participation.student;\r\n            return `${login} (${name})`;\r\n        } else if (participation.team) {\r\n            return formatTeamAsSearchResult(participation.team);\r\n        }\r\n        return `${participation.id!}`;\r\n    };\r\n\r\n    /**\r\n     * Converts a participation object to a string that can be searched for. This is\r\n     * used by the autocomplete select inside the data table.\r\n     *\r\n     * @param participation Student participation\r\n     */\r\n    searchTextFromParticipation = (participation: StudentParticipation): string => {\r\n        return participation.student?.login || participation.team?.shortName || '';\r\n    };\r\n\r\n    /**\r\n     * Removes the login from the repositoryUri\r\n     *\r\n     * @param participation Student participation\r\n     * @param repoUri original repository uri\r\n     */\r\n    getRepositoryLink = (participation: StudentParticipation, repoUri: string) => {\r\n        if ((participation as ProgrammingExerciseStudentParticipation).repositoryUri === repoUri) {\r\n            return (participation as ProgrammingExerciseStudentParticipation).userIndependentRepositoryUri;\r\n        }\r\n        return repoUri;\r\n    };\r\n\r\n    /**\r\n     * Get the route for the exercise's scores page.\r\n     *\r\n     * @param exercise the exercise for which the scores route should be extracted\r\n     */\r\n    getScoresRoute(exercise: Exercise): any[] {\r\n        let route: any[] = ['/course-management'];\r\n        const exam = exercise.exerciseGroup?.exam;\r\n        if (exam) {\r\n            route = [...route, exam.course!.id, 'exams', exam.id, 'exercise-groups', exercise.exerciseGroup!.id];\r\n        } else {\r\n            route = [...route, exercise.course!.id];\r\n        }\r\n        route = [...route, exercise.type + '-exercises', exercise.id, 'scores'];\r\n        return route;\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex flex-wrap\">\r\n        <div class=\"mr-auto flex-fill\">\r\n            <h2>\r\n                <span>{{ exercise?.title }} - </span>{{ filteredParticipationsSize }} <span jhiTranslate=\"artemisApp.participation.home.title\"></span>\r\n            </h2>\r\n            <div class=\"d-flex align-items-center mt-2\">\r\n                <label class=\"radio-inline mb-0 d-flex align-items-center\">\r\n                    <input type=\"radio\" [ngModel]=\"participationCriteria.filterProp\" (click)=\"updateParticipationFilter(FilterProp.ALL)\" [value]=\"FilterProp.ALL\" />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.exercise.showAll\"></span>\r\n                </label>\r\n                <label class=\"radio-inline ms-2 mb-0 d-flex align-items-center\">\r\n                    <input type=\"radio\" [ngModel]=\"participationCriteria.filterProp\" (click)=\"updateParticipationFilter(FilterProp.FAILED)\" [value]=\"FilterProp.FAILED\" />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.exercise.showFailed\"></span>\r\n                </label>\r\n                <label class=\"radio-inline ms-2 mb-0 d-flex align-items-center\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        [ngModel]=\"participationCriteria.filterProp\"\r\n                        (click)=\"updateParticipationFilter(FilterProp.NO_SUBMISSIONS)\"\r\n                        [value]=\"FilterProp.NO_SUBMISSIONS\"\r\n                    />\r\n                    <span class=\"ms-1\" jhiTranslate=\"artemisApp.exercise.showNoSubmissions\"></span>\r\n                </label>\r\n                @if (exercise?.type === ExerciseType.PROGRAMMING && afterDueDate) {\r\n                    <label class=\"radio-inline ms-2 mb-0 d-flex align-items-center\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            [ngModel]=\"participationCriteria.filterProp\"\r\n                            (click)=\"updateParticipationFilter(FilterProp.NO_PRACTICE)\"\r\n                            [value]=\"FilterProp.NO_PRACTICE\"\r\n                        />\r\n                        <span class=\"ms-1\" jhiTranslate=\"artemisApp.exercise.showNoPracticeMode\"></span>\r\n                    </label>\r\n                }\r\n            </div>\r\n        </div>\r\n        @if (exercise?.type !== ExerciseType.QUIZ && exercise?.isAtLeastInstructor) {\r\n            <div class=\"p-2\">\r\n                <button\r\n                    class=\"btn btn-success\"\r\n                    [disabled]=\"isSaving || participationsChangedDueDate.size === 0\"\r\n                    (click)=\"saveChangedDueDates()\"\r\n                    jhiTranslate=\"entity.action.save\"\r\n                ></button>\r\n            </div>\r\n        }\r\n        @if (exercise?.isAtLeastInstructor && exercise?.type === ExerciseType.PROGRAMMING) {\r\n            <jhi-programming-exercise-instructor-submission-state class=\"p-2\" [exercise]=\"exercise\" />\r\n        }\r\n        <div class=\"p-2\">\r\n            @if (exercise?.isAtLeastTutor) {\r\n                <a class=\"btn btn-info\" [routerLink]=\"getScoresRoute(exercise)\">\r\n                    <div>\r\n                        <fa-icon [icon]=\"faTable\" />\r\n                        <span class=\"d-md-inline\" jhiTranslate=\"entity.action.scores\"></span>\r\n                    </div>\r\n                </a>\r\n            }\r\n        </div>\r\n    </div>\r\n    <jhi-data-table\r\n        [isLoading]=\"isLoading\"\r\n        entityType=\"participation\"\r\n        [allEntities]=\"participations\"\r\n        entitiesPerPageTranslation=\"artemisApp.exercise.resultsPerPage\"\r\n        showAllEntitiesTranslation=\"artemisApp.exercise.showAllResults\"\r\n        [searchPlaceholderTranslation]=\"exercise?.teamMode ? 'artemisApp.exercise.searchForTeams' : 'artemisApp.exercise.searchForStudents'\"\r\n        [searchFields]=\"exercise?.teamMode ? ['team.shortName', 'team.name', 'team.students.login', 'team.students.name'] : ['student.login', 'student.name']\"\r\n        [searchTextFromEntity]=\"searchTextFromParticipation\"\r\n        [searchResultFormatter]=\"searchResultFormatter\"\r\n        [customFilterKey]=\"participationCriteria.filterProp\"\r\n        [customFilter]=\"filterParticipationByProp\"\r\n        (entitiesSizeChange)=\"handleParticipationsSizeChange($event)\"\r\n    >\r\n        <ng-template let-settings=\"settings\" let-controls=\"controls\">\r\n            <ngx-datatable\r\n                class=\"bootstrap\"\r\n                [limit]=\"settings.limit\"\r\n                [sortType]=\"settings.sortType\"\r\n                [columnMode]=\"settings.columnMode\"\r\n                [headerHeight]=\"settings.headerHeight\"\r\n                [footerHeight]=\"settings.footerHeight\"\r\n                [rowHeight]=\"settings.rowHeight\"\r\n                [rows]=\"settings.rows\"\r\n                [rowClass]=\"settings.rowClass\"\r\n                [scrollbarH]=\"settings.scrollbarH\"\r\n            >\r\n                <ngx-datatable-column prop=\"id\" [minWidth]=\"60\" [width]=\"80\" [maxWidth]=\"100\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('id')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"global.field.id\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('id')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (exercise.isAtLeastInstructor) {\r\n                            <div>\r\n                                @if (!!exercise.exerciseGroup) {\r\n                                    <a routerLink=\"{{ value }}\">\r\n                                        {{ value }}\r\n                                    </a>\r\n                                }\r\n                                @if (!exercise.exerciseGroup) {\r\n                                    <a routerLink=\"{{ value }}/submissions\">\r\n                                        {{ value }}\r\n                                    </a>\r\n                                }\r\n                            </div>\r\n                        } @else {\r\n                            {{ value }}\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                @if (exercise?.type === ExerciseType.PROGRAMMING) {\r\n                    <ngx-datatable-column prop=\"repositoryUri\" [minWidth]=\"80\" [width]=\"80\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\">\r\n                                <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.participation.repository\"></span>\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\" let-row=\"row\">\r\n                            @if (value && getRepositoryLink(row, value)) {\r\n                                <span>\r\n                                    @if (!localVCEnabled) {\r\n                                        <a href=\"{{ getRepositoryLink(row, value) }}\" target=\"_blank\" rel=\"noreferrer noopener\">Repository Link</a>\r\n                                    } @else {\r\n                                        <jhi-code-button\r\n                                            class=\"ms-2\"\r\n                                            [smallButtons]=\"true\"\r\n                                            [routerLinkForRepositoryView]=\"['..', 'repository', RepositoryType.USER, row.id]\"\r\n                                            [repositoryUri]=\"getRepositoryLink(row, value)!\"\r\n                                        />\r\n                                    }\r\n                                </span>\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (exercise?.type === ExerciseType.PROGRAMMING) {\r\n                    <ngx-datatable-column [minWidth]=\"100\" [width]=\"100\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('buildPlanId')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.buildPlanId\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('buildPlanId')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                            @if (row) {\r\n                                <span>\r\n                                    @if (!localVCEnabled) {\r\n                                        <a href=\"{{ row.buildPlanUrl }}\" target=\"_blank\" rel=\"noreferrer\">\r\n                                            {{ row.buildPlanId }}\r\n                                        </a>\r\n                                    } @else {\r\n                                        {{ row.buildPlanId }}\r\n                                    }\r\n                                </span>\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                <ngx-datatable-column prop=\"initializationState\" [minWidth]=\"80\" [width]=\"80\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('initializationState')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.initializationState\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('initializationState')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        {{ 'artemisApp.InitializationState.' + value | artemisTranslate }}\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"initializationDate\" [width]=\"180\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('initializationDate')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.initializationDate\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('initializationDate')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        {{ value | artemisDate }}\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column [minWidth]=\"100\" [width]=\"110\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper d-inline-block w-100 text-center\" (click)=\"controls.onSort('submissionCount')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.submissionCount\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('submissionCount')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"row\">\r\n                        <div class=\"w-100 text-center\">\r\n                            @if (exercise.isAtLeastInstructor) {\r\n                                <div>\r\n                                    @if (!!exercise.exerciseGroup) {\r\n                                        <a routerLink=\"{{ value.id }}\">\r\n                                            {{ value.submissionCount }}\r\n                                        </a>\r\n                                    }\r\n                                    @if (!exercise.exerciseGroup) {\r\n                                        <a routerLink=\"{{ value.id }}/submissions\">\r\n                                            {{ value.submissionCount }}\r\n                                        </a>\r\n                                    }\r\n                                </div>\r\n                            } @else {\r\n                                {{ value.submissionCount }}\r\n                            }\r\n                        </div>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                @if (!exercise.teamMode) {\r\n                    <ngx-datatable-column prop=\"student\" [minWidth]=\"120\" [width]=\"120\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('student.name')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.student\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('student.name')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            @if (isAdmin) {\r\n                                <a routerLink=\"/admin/user-management/{{ value?.login }}\">{{ value?.name }}</a>\r\n                            } @else {\r\n                                {{ value?.name }}\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (exercise.teamMode) {\r\n                    <ngx-datatable-column prop=\"team\" [minWidth]=\"120\" [width]=\"120\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('team.name')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.team\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('team.name')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            <a [routerLink]=\"['/course-management', exercise.course?.id, 'exercises', exercise.id, 'teams', value?.id]\">\r\n                                {{ value?.name }}\r\n                            </a>\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (exercise.teamMode) {\r\n                    <ngx-datatable-column prop=\"team.students\" [minWidth]=\"350\" [width]=\"450\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" style=\"cursor: text\">\r\n                                <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.participation.students\"></span>\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            <jhi-team-students-list [students]=\"value\" />\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (exercise.type === ExerciseType.PROGRAMMING && afterDueDate) {\r\n                    <ngx-datatable-column prop=\"student\" [minWidth]=\"80\" [width]=\"80\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('testRun')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.practice\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('testRun')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                            {{ (row.testRun ? 'global.generic.yes' : 'global.generic.no') | artemisTranslate }}\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (this.basicPresentationEnabled) {\r\n                    <ngx-datatable-column prop=\"presentationScore\" [minWidth]=\"150\" [width]=\"150\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('presentationScore')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.presentationScore\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('presentationScore')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            <span>{{ value ? value : 0 }}</span>\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (this.gradedPresentationEnabled) {\r\n                    <ngx-datatable-column prop=\"presentationScore\" [minWidth]=\"150\" [width]=\"150\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('presentationScore')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.presentationGrade\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('presentationScore')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                            <input\r\n                                name=\"presentationGrade\"\r\n                                id=\"field_presentationGrade\"\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                max=\"100\"\r\n                                required\r\n                                class=\"form-control input-number-short\"\r\n                                [disabled]=\"row.testRun\"\r\n                                [(ngModel)]=\"row.presentationScore\"\r\n                                (ngModelChange)=\"changeGradedPresentation(row)\"\r\n                            />\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (exercise?.type !== ExerciseType.QUIZ && exercise?.dueDate) {\r\n                    <ngx-datatable-column [minWidth]=\"270\" [width]=\"270\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('buildPlanId')\">\r\n                                <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.participation.individualDueDate\"></span>\r\n                                <fa-icon [icon]=\"controls.iconForSortPropField('individualDueDate')\" />\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-row=\"row\">\r\n                            @if (row) {\r\n                                <span class=\"btn-group\">\r\n                                    <jhi-date-time-picker\r\n                                        [(ngModel)]=\"row.individualDueDate\"\r\n                                        [shouldDisplayTimeZoneWarning]=\"false\"\r\n                                        [min]=\"exercise.dueDate!\"\r\n                                        [disabled]=\"!exercise.isAtLeastInstructor || isSaving\"\r\n                                        (valueChange)=\"changedIndividualDueDate(row)\"\r\n                                    />\r\n                                    &nbsp;\r\n                                    @if (exercise?.isAtLeastInstructor && row.individualDueDate) {\r\n                                        <button class=\"btn btn-danger\" [disabled]=\"isSaving\" (click)=\"removeIndividualDueDate(row)\">\r\n                                            <fa-icon [icon]=\"faTimes\" />\r\n                                        </button>\r\n                                    }\r\n                                </span>\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"350\" [width]=\"350\">\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <div class=\"text-end\">\r\n                            <div class=\"btn-group\">\r\n                                @if (exercise?.type === ExerciseType.PROGRAMMING && exercise.isAtLeastInstructor) {\r\n                                    @if (hasLoadedPendingSubmissions) {\r\n                                        <jhi-programming-exercise-instructor-trigger-build-button [exercise]=\"exercise\" [participation]=\"value\" class=\"me-1\" />\r\n                                    } @else {\r\n                                        <fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" class=\"text-secondary\" />\r\n                                    }\r\n                                }\r\n                                @if (exercise.isAtLeastInstructor) {\r\n                                    <button\r\n                                        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                                        [skipFeatureToggle]=\"exercise.type !== ExerciseType.PROGRAMMING\"\r\n                                        jhiDeleteButton\r\n                                        [entityTitle]=\"exercise.teamMode ? value.team?.name : value.student?.name\"\r\n                                        deleteQuestion=\"artemisApp.participation.delete.question\"\r\n                                        (delete)=\"deleteParticipation(value.id, $event)\"\r\n                                        [dialogError]=\"dialogError\"\r\n                                        [additionalChecks]=\"\r\n                                            exercise.type === ExerciseType.PROGRAMMING\r\n                                                ? { deleteBuildPlan: 'artemisApp.participation.deleteBuildPlan', deleteRepository: 'artemisApp.participation.deleteRepository' }\r\n                                                : undefined\r\n                                        \"\r\n                                    >\r\n                                        <fa-icon [icon]=\"faTrash\" />\r\n                                    </button>\r\n                                }\r\n                                @if (exercise?.type === ExerciseType.PROGRAMMING && value.buildPlanId !== null && exercise.isAtLeastInstructor) {\r\n                                    <button\r\n                                        [jhiFeatureToggle]=\"FeatureToggle.ProgrammingExercises\"\r\n                                        jhiDeleteButton\r\n                                        [actionType]=\"ActionType.Cleanup\"\r\n                                        deleteQuestion=\"artemisApp.participation.cleanupBuildPlan.question\"\r\n                                        (delete)=\"cleanupProgrammingExerciseParticipation(value)\"\r\n                                        [dialogError]=\"dialogError\"\r\n                                        [entityTitle]=\"exercise.teamMode ? value.team?.name : value.student?.name\"\r\n                                    >\r\n                                        <fa-icon [icon]=\"faEraser\" />\r\n                                    </button>\r\n                                }\r\n                                @if (this.basicPresentationEnabled && !value.testRun && value.presentationScore !== 1) {\r\n                                    <button (click)=\"addBasicPresentation(value)\" class=\"btn btn-info btn-sm me-1\">\r\n                                        <fa-icon [icon]=\"faFilePowerpoint\" />\r\n                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.participation.addPresentation.label\"></span>\r\n                                    </button>\r\n                                }\r\n                                @if (\r\n                                    this.gradedPresentationEnabled && !value.testRun && hasGradedPresentationChanged(value) && (value.presentationScore ?? undefined) !== undefined\r\n                                ) {\r\n                                    <button\r\n                                        [disabled]=\"!hasGradedPresentationChanged(value) || value.presentationScore < 0 || value.presentationScore > 100\"\r\n                                        (click)=\"addGradedPresentation(value)\"\r\n                                        class=\"btn btn-info btn-sm me-1\"\r\n                                    >\r\n                                        <fa-icon [icon]=\"faFilePowerpoint\" />\r\n                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.participation.savePresentation.label\"></span>\r\n                                    </button>\r\n                                }\r\n                                @if (\r\n                                    (this.basicPresentationEnabled && value.presentationScore > 0) ||\r\n                                    (this.gradedPresentationEnabled && (!hasGradedPresentationChanged(value) || (value.presentationScore ?? undefined) === undefined))\r\n                                ) {\r\n                                    <button (click)=\"removePresentation(value)\" class=\"btn btn-danger btn-sm me-1\">\r\n                                        <fa-icon [icon]=\"faFilePowerpoint\" />\r\n                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.participation.removePresentation.label\"></span>\r\n                                    </button>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n            </ngx-datatable>\r\n        </ng-template>\r\n    </jhi-data-table>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["DurationPipe", "transform", "value", "dayjs", "duration", "humanize", "pure", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "faClock", "\u0275\u0275pipeBind1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c2", "resultEtaInMs", "\u0275\u0275sanitizeHtml", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "ProgrammingExerciseInstructorSubmissionStateComponent_Conditional_0_Conditional_3_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "triggerBuildOfFailedSubmissions", "\u0275\u0275conditional", "hasBuildingSubmissions", "_c0", "buildingSummary", "ProgrammingSubmissionState", "IS_BUILDING_PENDING_SUBMISSION", "_c1", "HAS_FAILED_SUBMISSION", "exercise", "hasFailedSubmissions", "isBuildingFailedSubmissions", "faRedo", "FeatureToggle", "ProgrammingExercises", "faCircleNotch", "ProgrammingExerciseInstructorSubmissionStateComponent", "programmingSubmissionService", "inject", "ProgrammingSubmissionService", "ButtonType", "submissionStateSubscription", "resultEtaSubscription", "ngOnInit", "getResultEtaInMs", "subscribe", "resultEta", "ngOnChanges", "changes", "hasExerciseChanged", "getSubmissionStateOfExercise", "id", "pipe", "map", "sumSubmissionStates", "debounceTime", "tap", "failedSubmissionParticipations", "getSubmissionCountByType", "triggerInstructorBuildForParticipationsOfExercise", "buildState", "Object", "values", "reduce", "acc", "submissionState", "__spreadProps", "__spreadValues", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseInstructorSubmissionStateComponent_Conditional_0_Template", "ProgrammingExerciseInstructorSubmissionStateComponent_Conditional_1_Template", "FaIconComponent", "NgbTooltip", "NgClass", "ProgrammingExerciseTriggerAllButtonComponent", "ButtonComponent", "ArtemisTranslatePipe", "DurationPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateParticipationFilter", "FilterProp", "NO_PRACTICE", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "participationCriteria", "filterProp", "_r3", "saveChangedDueDates", "isSaving", "participationsChangedDueDate", "size", "exercise", "getScoresRoute", "faTable", "_r4", "controls_r5", "controls", "onSort", "iconForSortPropField", "\u0275\u0275propertyInterpolate", "value_r6", "\u0275\u0275textInterpolate1", "\u0275\u0275propertyInterpolate1", "\u0275\u0275template", "ParticipationComponent_ng_template_49_ng_template_7_Conditional_1_Conditional_3_Template", "ParticipationComponent_ng_template_49_ng_template_7_Conditional_1_Conditional_4_Template", "\u0275\u0275conditional", "exerciseGroup", "ParticipationComponent_ng_template_49_ng_template_7_Conditional_1_Template", "ParticipationComponent_ng_template_49_ng_template_7_Conditional_2_Template", "isAtLeastInstructor", "getRepositoryLink", "row_r9", "value_r8", "\u0275\u0275sanitizeUrl", "\u0275\u0275pureFunction2", "_c2", "RepositoryType", "USER", "id", "ParticipationComponent_ng_template_49_Conditional_10_ng_template_5_Conditional_1_Conditional_3_Template", "ParticipationComponent_ng_template_49_Conditional_10_ng_template_5_Conditional_1_Conditional_4_Template", "localVCEnabled", "ParticipationComponent_ng_template_49_Conditional_10_ng_template_5_Conditional_1_Template", "ParticipationComponent_ng_template_49_Conditional_10_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_10_ng_template_5_Template", "_r10", "row_r11", "buildPlanUrl", "buildPlanId", "ParticipationComponent_ng_template_49_Conditional_11_ng_template_5_Conditional_1_Conditional_3_Template", "ParticipationComponent_ng_template_49_Conditional_11_ng_template_5_Conditional_1_Conditional_4_Template", "ParticipationComponent_ng_template_49_Conditional_11_ng_template_5_Conditional_1_Template", "ParticipationComponent_ng_template_49_Conditional_11_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_11_ng_template_5_Template", "_r12", "\u0275\u0275pipeBind1", "value_r13", "_r14", "value_r15", "_r16", "value_r17", "submissionCount", "ParticipationComponent_ng_template_49_ng_template_30_Conditional_3_Conditional_3_Template", "ParticipationComponent_ng_template_49_ng_template_30_Conditional_3_Conditional_4_Template", "ParticipationComponent_ng_template_49_ng_template_30_Conditional_3_Template", "ParticipationComponent_ng_template_49_ng_template_30_Conditional_4_Template", "_r18", "value_r19", "login", "\u0275\u0275textInterpolate", "name", "ParticipationComponent_ng_template_49_Conditional_33_ng_template_5_Conditional_1_Template", "ParticipationComponent_ng_template_49_Conditional_33_ng_template_5_Conditional_2_Template", "isAdmin", "ParticipationComponent_ng_template_49_Conditional_33_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_33_ng_template_5_Template", "_r20", "\u0275\u0275pureFunction3", "_c3", "course", "value_r21", "ParticipationComponent_ng_template_49_Conditional_34_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_34_ng_template_5_Template", "value_r22", "ParticipationComponent_ng_template_49_Conditional_35_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_35_ng_template_5_Template", "_r23", "row_r24", "testRun", "ParticipationComponent_ng_template_49_Conditional_36_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_36_ng_template_5_Template", "_r25", "value_r26", "ParticipationComponent_ng_template_49_Conditional_37_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_37_ng_template_5_Template", "_r27", "\u0275\u0275twoWayListener", "$event", "row_r29", "_r28", "row", "i0", "\u0275\u0275twoWayBindingSet", "presentationScore", "changeGradedPresentation", "\u0275\u0275twoWayProperty", "ParticipationComponent_ng_template_49_Conditional_38_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_38_ng_template_5_Template", "_r30", "_r33", "row_r32", "removeIndividualDueDate", "faTimes", "_r31", "individualDueDate", "changedIndividualDueDate", "ParticipationComponent_ng_template_49_Conditional_39_ng_template_5_Conditional_1_Conditional_5_Template", "dueDate", "ParticipationComponent_ng_template_49_Conditional_39_ng_template_5_Conditional_1_Template", "ParticipationComponent_ng_template_49_Conditional_39_ng_template_3_Template", "ParticipationComponent_ng_template_49_Conditional_39_ng_template_5_Template", "value_r34", "faCircleNotch", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_5_Conditional_1_Template", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_5_Conditional_2_Template", "hasLoadedPendingSubmissions", "_r35", "value", "deleteParticipation", "FeatureToggle", "ProgrammingExercises", "type", "ExerciseType", "PROGRAMMING", "teamMode", "team", "student", "dialogError", "\u0275\u0275pureFunction0", "_c4", "undefined", "faTrash", "_r36", "cleanupProgrammingExerciseParticipation", "ActionType", "Cleanup", "faEraser", "_r37", "addBasicPresentation", "faFilePowerpoint", "_r38", "addGradedPresentation", "hasGradedPresentationChanged", "_r39", "removePresentation", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_5_Template", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_6_Template", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_7_Template", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_8_Template", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_9_Template", "ParticipationComponent_ng_template_49_ng_template_42_Conditional_10_Template", "basicPresentationEnabled", "gradedPresentationEnabled", "tmp_9_0", "tmp_10_0", "ParticipationComponent_ng_template_49_ng_template_5_Template", "ParticipationComponent_ng_template_49_ng_template_7_Template", "ParticipationComponent_ng_template_49_Conditional_10_Template", "ParticipationComponent_ng_template_49_Conditional_11_Template", "ParticipationComponent_ng_template_49_ng_template_14_Template", "ParticipationComponent_ng_template_49_ng_template_16_Template", "ParticipationComponent_ng_template_49_ng_template_21_Template", "ParticipationComponent_ng_template_49_ng_template_23_Template", "ParticipationComponent_ng_template_49_ng_template_28_Template", "ParticipationComponent_ng_template_49_ng_template_30_Template", "ParticipationComponent_ng_template_49_Conditional_33_Template", "ParticipationComponent_ng_template_49_Conditional_34_Template", "ParticipationComponent_ng_template_49_Conditional_35_Template", "ParticipationComponent_ng_template_49_Conditional_36_Template", "ParticipationComponent_ng_template_49_Conditional_37_Template", "ParticipationComponent_ng_template_49_Conditional_38_Template", "ParticipationComponent_ng_template_49_Conditional_39_Template", "ParticipationComponent_ng_template_49_ng_template_42_Template", "settings_r40", "limit", "sortType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "rows", "rowClass", "scrollbarH", "afterDueDate", "QUIZ", "ParticipationComponent", "route", "inject", "ActivatedRoute", "participationService", "ParticipationService", "alertService", "AlertService", "eventManager", "EventManager", "exerciseService", "ExerciseService", "programmingSubmissionService", "ProgrammingSubmissionService", "accountService", "AccountService", "profileService", "ProfileService", "gradingSystemService", "GradingSystemService", "participations", "Map", "participationsChangedPresentation", "filteredParticipationsSize", "eventSubscriber", "paramSub", "gradeStepsDTO", "gradeStepsDTOSub", "dialogErrorSource", "Subject", "asObservable", "exerciseSubmissionState", "isLoading", "faCodeBranch", "constructor", "ALL", "ngOnInit", "params", "subscribe", "loadExercise", "registerChangeInParticipations", "ngOnDestroy", "unsubscribeAllWebsocketTopics", "destroy", "unsubscribe", "exerciseId", "find", "exerciseResponse", "body", "dayjs", "isAfter", "loadGradingScale", "loadParticipations", "loadSubmissions", "checkBasicPresentationConfig", "courseId", "findGradeStepsForCourse", "checkGradedPresentationConfig", "findAllParticipationsByExercise", "participationsResponse", "projectKey", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "PROFILE_LOCALVC", "getSubmissionStateOfExercise", "pipe", "tap", "newValue", "setTimeout", "filterParticipationByProp", "participation", "FAILED", "hasFailedSubmission", "NO_SUBMISSIONS", "isPracticeMode", "submissionStateObj", "submissionState", "ProgrammingSubmissionState", "HAS_FAILED_SUBMISSION", "trackId", "index", "item", "isAtLeastTutor", "presentationScoreEnabled", "presentationsNumber", "update", "error", "res", "errorKey", "complete", "delete", "has", "set", "changedParticipations", "Array", "from", "values", "updateIndividualDueDates", "next", "response", "forEach", "updatedParticipation", "changedIndex", "findIndex", "clear", "success", "count", "length", "participationId", "event", "deleteBuildPlan", "deleteRepository", "broadcast", "content", "message", "programmingExerciseParticipation", "cleanupBuildPlan", "handleParticipationsSizeChange", "searchResultFormatter", "formatTeamAsSearchResult", "searchTextFromParticipation", "shortName", "repoUri", "repositoryUri", "userIndependentRepositoryUri", "exam", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "ParticipationComponent_Conditional_37_Template", "ParticipationComponent_Conditional_40_Template", "ParticipationComponent_Conditional_41_Template", "ParticipationComponent_Conditional_44_Template", "ParticipationComponent_ng_template_49_Template", "title", "_c0", "_c1", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "RadioControlValueAccessor", "NgControlStatus", "RequiredValidator", "MinValidator", "MaxValidator", "NgModel", "ProgrammingExerciseInstructorSubmissionStateComponent", "RouterLink", "FaIconComponent", "DataTableComponent", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "CodeButtonComponent", "TeamStudentsListComponent", "FormDateTimePickerComponent", "ProgrammingExerciseInstructorTriggerBuildButtonComponent", "DeleteButtonDirective", "FeatureToggleDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "encapsulation"]
}
