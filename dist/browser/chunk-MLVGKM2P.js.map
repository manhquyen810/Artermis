{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/lecture-unit/lectureUnit.model.ts", "src/main/webapp/app/lecture/attachment.service.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { CompetencyLectureUnitLink } from 'app/entities/competency.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faDownload, faLink, faQuestion, faScroll, faVideo } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with\r\n// the ones defined in LectureUnit.java\r\nexport enum LectureUnitType {\r\n    ATTACHMENT = 'attachment',\r\n    EXERCISE = 'exercise',\r\n    TEXT = 'text',\r\n    VIDEO = 'video',\r\n    ONLINE = 'online',\r\n}\r\n\r\nexport const lectureUnitIcons = {\r\n    [LectureUnitType.ATTACHMENT]: faDownload,\r\n    [LectureUnitType.EXERCISE]: faQuestion,\r\n    [LectureUnitType.TEXT]: faScroll,\r\n    [LectureUnitType.VIDEO]: faVideo,\r\n    [LectureUnitType.ONLINE]: faLink,\r\n};\r\n\r\nexport const lectureUnitTooltips = {\r\n    [LectureUnitType.ATTACHMENT]: 'artemisApp.attachmentUnit.tooltip',\r\n    [LectureUnitType.EXERCISE]: '',\r\n    [LectureUnitType.TEXT]: 'artemisApp.textUnit.tooltip',\r\n    [LectureUnitType.VIDEO]: 'artemisApp.videoUnit.tooltip',\r\n    [LectureUnitType.ONLINE]: 'artemisApp.onlineUnit.tooltip',\r\n};\r\n\r\nexport abstract class LectureUnit implements BaseEntity {\r\n    public id?: number;\r\n    public name?: string;\r\n    public releaseDate?: dayjs.Dayjs;\r\n    public lecture?: Lecture;\r\n    public competencyLinks?: CompetencyLectureUnitLink[];\r\n    public type?: LectureUnitType;\r\n    // calculated property\r\n    public visibleToStudents?: boolean;\r\n    public completed?: boolean;\r\n\r\n    protected constructor(type: LectureUnitType) {\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport function getIcon(lectureUnitType: LectureUnitType): IconProp {\r\n    if (!lectureUnitType) {\r\n        return faQuestion as IconProp;\r\n    }\r\n    return lectureUnitIcons[lectureUnitType] as IconProp;\r\n}\r\n\r\nexport function getIconTooltip(lectureUnitType: LectureUnitType) {\r\n    if (!lectureUnitType) {\r\n        return '';\r\n    }\r\n    return lectureUnitTooltips[lectureUnitType];\r\n}\r\n\r\nexport class LectureUnitForLearningPathNodeDetailsDTO {\r\n    public id?: number;\r\n    public name?: string;\r\n    public type?: LectureUnitType;\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Attachment } from 'app/entities/attachment.model';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { objectToJsonBlob } from 'app/utils/blob-util';\r\nimport { cloneDeep } from 'lodash-es';\r\n\r\ntype EntityResponseType = HttpResponse<Attachment>;\r\ntype EntityArrayResponseType = HttpResponse<Attachment[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AttachmentService {\r\n    protected http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/lecture/attachments';\r\n\r\n    /**\r\n     * Create a new attachment\r\n     * @param attachment the attachment object to create\r\n     * @param file the file to save as an attachment\r\n     */\r\n    create(attachment: Attachment, file: File): Observable<EntityResponseType> {\r\n        const copy = this.convertAttachmentDatesFromClient(attachment);\r\n        // avoid potential issues when sending the attachment to the server\r\n        if (copy.attachmentUnit) {\r\n            copy.attachmentUnit.lecture = undefined;\r\n            copy.attachmentUnit.competencyLinks = undefined;\r\n        }\r\n        if (copy.lecture) {\r\n            copy.lecture.lectureUnits = undefined;\r\n            copy.lecture.course = undefined;\r\n            copy.lecture.posts = undefined;\r\n        }\r\n\r\n        /** Ngsw-worker is bypassed temporarily to fix Chromium file upload issue\r\n         * See: https://issues.chromium.org/issues/374550348\r\n         **/\r\n        return this.http\r\n            .post<Attachment>(this.resourceUrl, this.createFormData(copy, file), { headers: { 'ngsw-bypass': 'true' }, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertAttachmentResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Update an existing attachment\r\n     * @param attachmentId the id of the attachment to update\r\n     * @param attachment the attachment object holding the updated values\r\n     * @param file the file to save as an attachment if it was changed (optional)\r\n     * @param req optional request parameters\r\n     */\r\n    update(attachmentId: number, attachment: Attachment, file?: File, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        const copy = this.convertAttachmentDatesFromClient(attachment);\r\n\r\n        /** Ngsw-worker is bypassed temporarily to fix Chromium file upload issue\r\n         * See: https://issues.chromium.org/issues/374550348\r\n         **/\r\n        return this.http\r\n            .put<Attachment>(this.resourceUrl + '/' + attachmentId, this.createFormData(copy, file), { headers: { 'ngsw-bypass': 'true' }, params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertAttachmentResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Return the attachment with the given id\r\n     *\r\n     * @param attachmentId the id of the attachment to find\r\n     */\r\n    find(attachmentId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Attachment>(`${this.resourceUrl}/${attachmentId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertAttachmentResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Search for attachments\r\n     * @param req optional request parameters\r\n     */\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<Attachment[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertAttachmentArrayResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Return all attachments for the given lecture\r\n     * @param lectureId the id of the lecture to find attachments for\r\n     */\r\n    findAllByLectureId(lectureId: number): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Attachment[]>(`api/lecture/lectures/${lectureId}/attachments`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertAttachmentArrayResponseDatesFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Delete the attachment with the given id\r\n     * @param attachmentId the id of the attachment to delete\r\n     */\r\n    delete(attachmentId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${attachmentId}`, { observe: 'response' });\r\n    }\r\n\r\n    convertAttachmentDatesFromClient(attachment: Attachment): Attachment {\r\n        // Deep clone is applied to preserve all nested properties of the attachment\r\n        return Object.assign({}, cloneDeep(attachment), {\r\n            releaseDate: convertDateFromClient(attachment.releaseDate),\r\n            uploadDate: convertDateFromClient(attachment.uploadDate),\r\n        });\r\n    }\r\n\r\n    convertAttachmentDatesFromServer(attachment?: Attachment) {\r\n        if (attachment) {\r\n            attachment.releaseDate = convertDateFromServer(attachment.releaseDate);\r\n            attachment.uploadDate = convertDateFromServer(attachment.uploadDate);\r\n        }\r\n        return attachment;\r\n    }\r\n\r\n    private convertAttachmentResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.convertAttachmentDatesFromServer(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private convertAttachmentArrayResponseDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((attachment: Attachment) => {\r\n                this.convertAttachmentDatesFromServer(attachment);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private createFormData(attachment: Attachment, file?: File) {\r\n        const formData = new FormData();\r\n        formData.append('attachment', objectToJsonBlob(attachment));\r\n        if (file) {\r\n            formData.append('file', file);\r\n        }\r\n        return formData;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the file associated with a given attachment ID as a Blob object\r\n     *\r\n     * @param courseId The ID of the course that the attachment belongs to\r\n     * @param attachmentId The ID of the attachment to retrieve\r\n     * @returns An Observable that emits the Blob object of the file when the HTTP request completes successfully\r\n     */\r\n    getAttachmentFile(courseId: number, attachmentId: number): Observable<Blob> {\r\n        return this.http.get(`api/core/files/courses/${courseId}/attachments/${attachmentId}`, { responseType: 'blob' });\r\n    }\r\n}\r\n", "import { AlertService } from 'app/core/util/alert.service';\r\nimport { LectureUnit, LectureUnitForLearningPathNodeDetailsDTO, LectureUnitType } from 'app/entities/lecture-unit/lectureUnit.model';\r\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { LectureUnitCompletionEvent } from 'app/overview/course-lectures/course-lecture-details.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { AttachmentUnit, IngestionState } from 'app/entities/lecture-unit/attachmentUnit.model';\r\nimport { AttachmentService } from 'app/lecture/attachment.service';\r\nimport { ExerciseUnit } from 'app/entities/lecture-unit/exerciseUnit.model';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\n\r\ntype EntityArrayResponseType = HttpResponse<LectureUnit[]>;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LectureUnitService {\r\n    private httpClient = inject(HttpClient);\r\n    private attachmentService = inject(AttachmentService);\r\n    private alertService = inject(AlertService);\r\n\r\n    private resourceURL = 'api/lecture';\r\n\r\n    updateOrder(lectureId: number, lectureUnits: LectureUnit[]): Observable<HttpResponse<LectureUnit[]>> {\r\n        // Send an ordered list of ids of the lecture units\r\n        // This also overcomes circular structure issues with participations and categories in exercise units\r\n        const lectureUnitIds = lectureUnits.map((lectureUnit) => lectureUnit.id);\r\n        return this.httpClient\r\n            .put<LectureUnit[]>(`${this.resourceURL}/lectures/${lectureId}/lecture-units-order`, lectureUnitIds, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertLectureUnitResponseArrayDatesFromServer(res)));\r\n    }\r\n\r\n    delete(lectureUnitId: number, lectureId: number) {\r\n        return this.httpClient.delete(`${this.resourceURL}/lectures/${lectureId}/lecture-units/${lectureUnitId}`, { observe: 'response' });\r\n    }\r\n\r\n    completeLectureUnit(lecture: Lecture, event: LectureUnitCompletionEvent): void {\r\n        if (event.lectureUnit.visibleToStudents && event.lectureUnit.completed !== event.completed) {\r\n            this.setCompletion(event.lectureUnit.id!, lecture.id!, event.completed).subscribe({\r\n                next: () => {\r\n                    event.lectureUnit.completed = event.completed;\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n        }\r\n    }\r\n\r\n    setCompletion(lectureUnitId: number, lectureId: number, completed: boolean): Observable<HttpResponse<void>> {\r\n        const params = new HttpParams().set('completed', completed.toString());\r\n        return this.httpClient.post<void>(`${this.resourceURL}/lectures/${lectureId}/lecture-units/${lectureUnitId}/completion`, null, {\r\n            params,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    convertLectureUnitDatesFromClient<T extends LectureUnit>(lectureUnit: T): T {\r\n        if (lectureUnit.type === LectureUnitType.ATTACHMENT) {\r\n            if ((<AttachmentUnit>lectureUnit).attachment) {\r\n                (<AttachmentUnit>lectureUnit).attachment = this.attachmentService.convertAttachmentDatesFromClient((<AttachmentUnit>lectureUnit).attachment!);\r\n                return lectureUnit;\r\n            }\r\n        } else if (lectureUnit.type === LectureUnitType.EXERCISE) {\r\n            if ((<ExerciseUnit>lectureUnit).exercise) {\r\n                (<ExerciseUnit>lectureUnit).exercise = ExerciseService.convertExerciseDatesFromClient((<ExerciseUnit>lectureUnit).exercise!);\r\n                (<ExerciseUnit>lectureUnit).exercise!.categories = ExerciseService.stringifyExerciseCategories((<ExerciseUnit>lectureUnit).exercise!);\r\n                return lectureUnit;\r\n            }\r\n        }\r\n        return Object.assign({}, lectureUnit, {\r\n            releaseDate: convertDateFromClient(lectureUnit.releaseDate),\r\n        });\r\n    }\r\n\r\n    convertLectureUnitArrayDatesFromClient<T extends LectureUnit>(lectureUnits: T[]): T[] {\r\n        if (lectureUnits?.length) {\r\n            for (let _i = 0; _i < lectureUnits.length; _i++) {\r\n                lectureUnits[_i] = this.convertLectureUnitDatesFromClient(lectureUnits[_i]);\r\n            }\r\n        }\r\n        return lectureUnits;\r\n    }\r\n\r\n    convertLectureUnitResponseDatesFromServer<T extends LectureUnit>(res: HttpResponse<T>): HttpResponse<T> {\r\n        if (res.body) {\r\n            if (res.body.type === LectureUnitType.ATTACHMENT) {\r\n                if ((<AttachmentUnit>res.body).attachment) {\r\n                    (<AttachmentUnit>res.body).attachment = this.attachmentService.convertAttachmentDatesFromServer((<AttachmentUnit>res.body).attachment);\r\n                }\r\n            } else if (res.body.type === LectureUnitType.EXERCISE) {\r\n                if ((<ExerciseUnit>res.body).exercise) {\r\n                    (<ExerciseUnit>res.body).exercise = ExerciseService.convertExerciseDatesFromServer((<ExerciseUnit>res.body).exercise);\r\n                    ExerciseService.parseExerciseCategories((<ExerciseUnit>res.body).exercise);\r\n                }\r\n            } else {\r\n                res.body.releaseDate = convertDateFromServer(res.body.releaseDate);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    convertLectureUnitDateFromServer<T extends LectureUnit>(lectureUnit: T): T {\r\n        if (lectureUnit.type === LectureUnitType.ATTACHMENT) {\r\n            if ((<AttachmentUnit>lectureUnit).attachment) {\r\n                (<AttachmentUnit>lectureUnit).attachment = this.attachmentService.convertAttachmentDatesFromServer((<AttachmentUnit>lectureUnit).attachment);\r\n            }\r\n        } else if (lectureUnit.type === LectureUnitType.EXERCISE) {\r\n            if ((<ExerciseUnit>lectureUnit).exercise) {\r\n                (<ExerciseUnit>lectureUnit).exercise = ExerciseService.convertExerciseDatesFromServer((<ExerciseUnit>lectureUnit).exercise);\r\n                ExerciseService.parseExerciseCategories((<ExerciseUnit>lectureUnit).exercise);\r\n            }\r\n        } else {\r\n            lectureUnit.releaseDate = convertDateFromServer(lectureUnit.releaseDate);\r\n        }\r\n        return lectureUnit;\r\n    }\r\n\r\n    convertLectureUnitResponseArrayDatesFromServer<T extends LectureUnit>(res: HttpResponse<T[]>): HttpResponse<T[]> {\r\n        if (res.body) {\r\n            res.body.forEach((lectureUnit: LectureUnit) => {\r\n                this.convertLectureUnitDateFromServer(lectureUnit);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    convertLectureUnitArrayDatesFromServer<T extends LectureUnit>(res: T[]): T[] {\r\n        if (res) {\r\n            res.forEach((lectureUnit: LectureUnit) => {\r\n                this.convertLectureUnitDateFromServer(lectureUnit);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    getLectureUnitName(lectureUnit: LectureUnit) {\r\n        if (lectureUnit.type === LectureUnitType.ATTACHMENT) {\r\n            return (<AttachmentUnit>lectureUnit)?.attachment?.name;\r\n        } else if (lectureUnit.type === LectureUnitType.EXERCISE) {\r\n            return (<ExerciseUnit>lectureUnit)?.exercise?.title;\r\n        } else {\r\n            return lectureUnit.name;\r\n        }\r\n    }\r\n\r\n    getLectureUnitReleaseDate(lectureUnit: LectureUnit) {\r\n        if (lectureUnit.type === LectureUnitType.ATTACHMENT) {\r\n            return (<AttachmentUnit>lectureUnit)?.attachment?.releaseDate;\r\n        } else if (lectureUnit.type === LectureUnitType.EXERCISE) {\r\n            return (<ExerciseUnit>lectureUnit)?.exercise?.releaseDate;\r\n        } else {\r\n            return lectureUnit.releaseDate;\r\n        }\r\n    }\r\n\r\n    getLectureUnitForLearningPathNodeDetails(lectureUnitId: number) {\r\n        return this.httpClient.get<LectureUnitForLearningPathNodeDetailsDTO>(`${this.resourceURL}/lecture-units/${lectureUnitId}/for-learning-path-node-details`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    getLectureUnitById(lectureUnitId: number): Observable<LectureUnit> {\r\n        return this.httpClient.get<LectureUnit>(`${this.resourceURL}/lecture-units/${lectureUnitId}`);\r\n    }\r\n    /**\r\n     * Fetch the actual ingestion state for all lecture units from an external service (e.g., Pyris).\r\n     * @param courseId\r\n     * @param lectureId ID of the lecture\r\n     * @returns Observable with the ingestion state\r\n     */\r\n    getIngestionState(courseId: number, lectureId: number): Observable<HttpResponse<Record<number, IngestionState>>> {\r\n        return this.httpClient.get<Record<number, IngestionState>>(`api/iris/courses/${courseId}/lectures/${lectureId}/lecture-units/ingestion-state`, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggers the ingestion of one lecture unit.\r\n     *\r\n     * @param lectureUnitId - The ID of the lecture unit to be ingested.\r\n     * @param lectureId - The ID of the lecture to which the unit belongs.\r\n     * @returns An Observable with an HttpResponse 200 if the request was successful .\r\n     */\r\n    ingestLectureUnitInPyris(lectureUnitId: number, lectureId: number): Observable<HttpResponse<void>> {\r\n        return this.httpClient.post<void>(`${this.resourceURL}/lectures/${lectureId}/lecture-units/${lectureUnitId}/ingest`, null, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["LectureUnitType", "lectureUnitIcons", "ATTACHMENT", "faDownload", "EXERCISE", "faQuestion", "TEXT", "faScroll", "VIDEO", "faVideo", "ONLINE", "faLink", "lectureUnitTooltips", "LectureUnit", "id", "name", "releaseDate", "lecture", "competencyLinks", "type", "visibleToStudents", "completed", "constructor", "AttachmentService", "http", "inject", "HttpClient", "resourceUrl", "create", "attachment", "file", "copy", "convertAttachmentDatesFromClient", "attachmentUnit", "lecture", "undefined", "competencyLinks", "lectureUnits", "course", "posts", "post", "createFormData", "headers", "observe", "pipe", "map", "res", "convertAttachmentResponseDatesFromServer", "update", "attachmentId", "req", "options", "createRequestOption", "put", "params", "find", "get", "query", "convertAttachmentArrayResponseDatesFromServer", "findAllByLectureId", "lectureId", "delete", "Object", "assign", "cloneDeep", "releaseDate", "convertDateFromClient", "uploadDate", "convertAttachmentDatesFromServer", "convertDateFromServer", "body", "forEach", "formData", "FormData", "append", "objectToJsonBlob", "getAttachmentFile", "courseId", "responseType", "factory", "\u0275fac", "providedIn", "LectureUnitService", "httpClient", "inject", "HttpClient", "attachmentService", "AttachmentService", "alertService", "AlertService", "resourceURL", "updateOrder", "lectureId", "lectureUnits", "lectureUnitIds", "map", "lectureUnit", "id", "put", "observe", "pipe", "res", "convertLectureUnitResponseArrayDatesFromServer", "delete", "lectureUnitId", "completeLectureUnit", "lecture", "event", "visibleToStudents", "completed", "setCompletion", "subscribe", "next", "error", "onError", "params", "HttpParams", "set", "toString", "post", "convertLectureUnitDatesFromClient", "type", "LectureUnitType", "ATTACHMENT", "attachment", "convertAttachmentDatesFromClient", "EXERCISE", "exercise", "ExerciseService", "convertExerciseDatesFromClient", "categories", "stringifyExerciseCategories", "Object", "assign", "releaseDate", "convertDateFromClient", "convertLectureUnitArrayDatesFromClient", "length", "_i", "convertLectureUnitResponseDatesFromServer", "body", "convertAttachmentDatesFromServer", "convertExerciseDatesFromServer", "parseExerciseCategories", "convertDateFromServer", "convertLectureUnitDateFromServer", "forEach", "convertLectureUnitArrayDatesFromServer", "getLectureUnitName", "name", "title", "getLectureUnitReleaseDate", "getLectureUnitForLearningPathNodeDetails", "get", "getLectureUnitById", "getIngestionState", "courseId", "ingestLectureUnitInPyris", "factory", "\u0275fac", "providedIn"]
}
