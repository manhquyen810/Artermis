{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/statistics/doughnut-chart.component.ts", "src/main/webapp/app/exercises/shared/statistics/doughnut-chart.component.html", "src/main/webapp/app/exercises/shared/statistics/exercise-detail-statistics.component.ts", "src/main/webapp/app/exercises/shared/statistics/exercise-detail-statistics.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges, OnInit, inject } from '@angular/core';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { DoughnutChartType } from 'app/course/manage/detail/course-detail.component';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Color, PieChartModule, ScaleType } from '@swimlane/ngx-charts';\r\nimport { NgxChartsSingleSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nconst PIE_CHART_NA_FALLBACK_VALUE = [0, 0, 1];\r\n\r\n@Component({\r\n    selector: 'jhi-doughnut-chart',\r\n    templateUrl: './doughnut-chart.component.html',\r\n    styleUrls: ['./doughnut-chart.component.scss'],\r\n    imports: [RouterLink, NgClass, FaIconComponent, PieChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class DoughnutChartComponent implements OnChanges, OnInit {\r\n    private router = inject(Router);\r\n\r\n    @Input() course: Course;\r\n    @Input() contentType: DoughnutChartType;\r\n    @Input() exerciseId: number;\r\n    @Input() exerciseType: ExerciseType;\r\n    @Input() currentPercentage: number | undefined;\r\n    @Input() currentAbsolute: number | undefined;\r\n    @Input() currentMax: number | undefined;\r\n\r\n    receivedStats = false;\r\n    doughnutChartTitle: string;\r\n    stats: number[];\r\n    titleLink: string[] | undefined;\r\n\r\n    // Icons\r\n    faSpinner = faSpinner;\r\n\r\n    // ngx\r\n    ngxDoughnutData: NgxChartsSingleSeriesDataEntry[] = [\r\n        { name: 'Done', value: 0 },\r\n        { name: 'Not done', value: 0 },\r\n        { name: 'N/A', value: 0 }, // fallback to display grey circle if there is no maxValue\r\n    ];\r\n    ngxColor = {\r\n        name: 'vivid',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [GraphColors.GREEN, GraphColors.RED, GraphColors.LIGHT_GREY],\r\n    } as Color;\r\n    bindFormatting = this.valueFormatting.bind(this);\r\n\r\n    ngOnChanges() {\r\n        // [0, 0, 0] will lead to the chart not being displayed,\r\n        // assigning [0, 0, 0] (PIE_CHART_NA_FALLBACK_VALUE) works around this issue and displays 0 %, 0 / 0 with a grey circle\r\n        if (this.currentAbsolute == undefined && !this.receivedStats) {\r\n            this.updatePieChartData(PIE_CHART_NA_FALLBACK_VALUE);\r\n        } else {\r\n            this.receivedStats = true;\r\n            const remaining = roundValueSpecifiedByCourseSettings(this.currentMax! - this.currentAbsolute!, this.course);\r\n            this.stats = [this.currentAbsolute!, remaining, 0]; // done, not done, na\r\n            return this.currentMax === 0 ? this.updatePieChartData(PIE_CHART_NA_FALLBACK_VALUE) : this.updatePieChartData(this.stats);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Depending on the information we want to display in the doughnut chart, we need different titles and links\r\n     */\r\n    ngOnInit(): void {\r\n        switch (this.contentType) {\r\n            case DoughnutChartType.AVERAGE_EXERCISE_SCORE:\r\n                this.doughnutChartTitle = 'averageScore';\r\n                this.titleLink = [`/course-management/${this.course.id}/${this.exerciseType}-exercises/${this.exerciseId}/scores`];\r\n                break;\r\n            case DoughnutChartType.PARTICIPATIONS:\r\n                this.doughnutChartTitle = 'participationRate';\r\n                this.titleLink = [`/course-management/${this.course.id}/${this.exerciseType}-exercises/${this.exerciseId}/participations`];\r\n                break;\r\n            case DoughnutChartType.QUESTIONS:\r\n                this.doughnutChartTitle = 'resolved_posts';\r\n                this.titleLink = [`/courses/${this.course.id}/exercises/${this.exerciseId}`];\r\n                break;\r\n            default:\r\n                this.doughnutChartTitle = '';\r\n                this.titleLink = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handles clicks onto the graph, which then redirects the user to the corresponding page,\r\n     * e.g. participations to the participations page\r\n     */\r\n    openCorrespondingPage() {\r\n        if (this.course.id && this.exerciseId && this.titleLink) {\r\n            this.router.navigate(this.titleLink);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assigns a given array of numbers to ngxData\r\n     * @param values the values that should be displayed by the chart\r\n     */\r\n    private updatePieChartData(values: number[]) {\r\n        this.ngxDoughnutData.forEach((entry: NgxChartsSingleSeriesDataEntry, index: number) => (entry.value = values[index]));\r\n        this.ngxDoughnutData = [...this.ngxDoughnutData];\r\n    }\r\n\r\n    /**\r\n     * Modifies the tooltip content of the chart.\r\n     * @param data a dedicated object passed by ngx-charts\r\n     * @returns absolute value represented by doughnut piece or 0 if the currentMax is 0.\r\n     * This is necessary in order to compensate the workaround for\r\n     * displaying a chart even if no values are there to display (i.e. currentMax is 0)\r\n     */\r\n    valueFormatting(data: any): string {\r\n        return this.currentMax === 0 ? '0' : data.value;\r\n    }\r\n}\r\n", "<div class=\"mx-2 d-flex flex-column justify-content-between h-100\">\r\n    @if (titleLink) {\r\n        <a [routerLink]=\"titleLink\">\r\n            <h4 class=\"text-center\">{{ 'exercise-statistics.' + doughnutChartTitle | artemisTranslate }}</h4>\r\n        </a>\r\n    }\r\n    @if (!titleLink) {\r\n        <h4 class=\"text-center\">{{ 'exercise-statistics.' + doughnutChartTitle | artemisTranslate }}</h4>\r\n    }\r\n    <div class=\"doughnut-chart-container\" [ngClass]=\"titleLink ? 'clickable' : ''\" (click)=\"openCorrespondingPage()\">\r\n        <div class=\"doughnut-chart-text\">\r\n            @if (receivedStats) {\r\n                <h2 class=\"text-center\">{{ currentPercentage }}%</h2>\r\n            }\r\n            @if (receivedStats) {\r\n                <h4 class=\"text-center\">{{ currentAbsolute }} / {{ currentMax }}</h4>\r\n            }\r\n            @if (!receivedStats) {\r\n                <h1 class=\"text-center\" style=\"z-index: 1\">\r\n                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                </h1>\r\n            }\r\n        </div>\r\n        <ngx-charts-pie-chart [view]=\"[200, 200]\" [results]=\"ngxDoughnutData\" [scheme]=\"ngxColor\" [doughnut]=\"true\" [tooltipText]=\"bindFormatting\" />\r\n    </div>\r\n</div>\r\n", "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ExerciseManagementStatisticsDto } from 'app/exercises/shared/statistics/exercise-management-statistics-dto';\r\nimport { DoughnutChartType } from 'app/course/manage/detail/course-detail.component';\r\nimport { Exercise, ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Course, isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { DoughnutChartComponent } from './doughnut-chart.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-detail-statistics',\r\n    templateUrl: './exercise-detail-statistics.component.html',\r\n    imports: [DoughnutChartComponent],\r\n})\r\nexport class ExerciseDetailStatisticsComponent implements OnInit {\r\n    @Input() exercise: Exercise;\r\n    @Input() doughnutStats: ExerciseManagementStatisticsDto;\r\n    @Input() exerciseType: ExerciseType;\r\n\r\n    course: Course;\r\n    isCommunicationEnabled = isCommunicationEnabled;\r\n\r\n    readonly DoughnutChartType = DoughnutChartType;\r\n\r\n    ngOnInit() {\r\n        this.course = getCourseFromExercise(this.exercise)!;\r\n    }\r\n}\r\n", "<div class=\"row d-flex justify-content-between\">\r\n    <jhi-doughnut-chart\r\n        class=\"col-md-4\"\r\n        [course]=\"course\"\r\n        [contentType]=\"DoughnutChartType.AVERAGE_EXERCISE_SCORE\"\r\n        [exerciseId]=\"exercise.id!\"\r\n        [exerciseType]=\"exerciseType\"\r\n        [currentPercentage]=\"doughnutStats?.averageScoreOfExercise\"\r\n        [currentAbsolute]=\"doughnutStats?.absoluteAveragePoints\"\r\n        [currentMax]=\"doughnutStats?.maxPointsOfExercise\"\r\n    />\r\n    <jhi-doughnut-chart\r\n        class=\"col-md-4\"\r\n        [course]=\"course\"\r\n        [contentType]=\"DoughnutChartType.PARTICIPATIONS\"\r\n        [exerciseId]=\"exercise.id!\"\r\n        [exerciseType]=\"exerciseType\"\r\n        [currentPercentage]=\"doughnutStats?.participationsInPercent\"\r\n        [currentAbsolute]=\"doughnutStats?.numberOfParticipations\"\r\n        [currentMax]=\"doughnutStats?.numberOfStudentsOrTeamsInCourse\"\r\n    />\r\n    @if (isCommunicationEnabled(course)) {\r\n        <jhi-doughnut-chart\r\n            class=\"col-md-4\"\r\n            [course]=\"course\"\r\n            [contentType]=\"DoughnutChartType.QUESTIONS\"\r\n            [exerciseId]=\"exercise.id!\"\r\n            [exerciseType]=\"exerciseType\"\r\n            [currentPercentage]=\"doughnutStats?.resolvedPostsInPercent\"\r\n            [currentAbsolute]=\"doughnutStats?.numberOfResolvedPosts\"\r\n            [currentMax]=\"doughnutStats?.numberOfPosts\"\r\n        />\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "titleLink", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "doughnutChartTitle", "\u0275\u0275textInterpolate1", "currentPercentage", "\u0275\u0275textInterpolate2", "currentAbsolute", "currentMax", "\u0275\u0275element", "faSpinner", "PIE_CHART_NA_FALLBACK_VALUE", "DoughnutChartComponent", "router", "inject", "Router", "course", "contentType", "exerciseId", "exerciseType", "receivedStats", "stats", "ngxDoughnutData", "name", "value", "ngxColor", "selectable", "group", "ScaleType", "Ordinal", "domain", "GraphColors", "GREEN", "RED", "LIGHT_GREY", "bindFormatting", "valueFormatting", "bind", "ngOnChanges", "undefined", "updatePieChartData", "remaining", "roundValueSpecifiedByCourseSettings", "ngOnInit", "DoughnutChartType", "AVERAGE_EXERCISE_SCORE", "id", "PARTICIPATIONS", "QUESTIONS", "openCorrespondingPage", "navigate", "values", "forEach", "entry", "index", "data", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "DoughnutChartComponent_Conditional_2_Template", "DoughnutChartComponent_Conditional_3_Template", "\u0275\u0275listener", "DoughnutChartComponent_Conditional_8_Template", "DoughnutChartComponent_Conditional_9_Template", "DoughnutChartComponent_Conditional_10_Template", "\u0275\u0275conditional", "\u0275\u0275pureFunction0", "_c0", "RouterLink", "NgClass", "FaIconComponent", "PieChartModule", "PieChartComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "course", "DoughnutChartType", "QUESTIONS", "exercise", "id", "exerciseType", "doughnutStats", "resolvedPostsInPercent", "numberOfResolvedPosts", "numberOfPosts", "ExerciseDetailStatisticsComponent", "isCommunicationEnabled", "ngOnInit", "getCourseFromExercise", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275template", "ExerciseDetailStatisticsComponent_Conditional_6_Template", "\u0275\u0275elementEnd", "AVERAGE_EXERCISE_SCORE", "averageScoreOfExercise", "absoluteAveragePoints", "maxPointsOfExercise", "PARTICIPATIONS", "participationsInPercent", "numberOfParticipations", "numberOfStudentsOrTeamsInCourse", "\u0275\u0275conditional", "DoughnutChartComponent", "encapsulation"]
}
