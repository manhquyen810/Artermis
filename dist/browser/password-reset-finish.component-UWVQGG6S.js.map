{
  "version": 3,
  "sources": ["src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts", "src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.ts", "src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PasswordResetFinishService {\r\n    private http = inject(HttpClient);\r\n\r\n    save(key: string, newPassword: string): Observable<object> {\r\n        return this.http.post('api/core/public/account/reset-password/finish', { key, newPassword });\r\n    }\r\n}\r\n", "import { AfterViewInit, Component, ElementRef, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { PasswordStrengthBarComponent } from 'app/account/password/password-strength-bar.component';\r\n\r\nimport { PasswordResetFinishService } from './password-reset-finish.service';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH } from 'app/app.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-password-reset-finish',\r\n    templateUrl: './password-reset-finish.component.html',\r\n    imports: [TranslateDirective, RouterLink, FormsModule, ReactiveFormsModule, PasswordStrengthBarComponent, ArtemisTranslatePipe],\r\n})\r\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\r\n    private passwordResetFinishService = inject(PasswordResetFinishService);\r\n    private route = inject(ActivatedRoute);\r\n    private fb = inject(FormBuilder);\r\n\r\n    @ViewChild('newPassword', { static: false })\r\n    newPassword?: ElementRef;\r\n\r\n    readonly PASSWORD_MIN_LENGTH = PASSWORD_MIN_LENGTH;\r\n    readonly PASSWORD_MAX_LENGTH = PASSWORD_MAX_LENGTH;\r\n\r\n    initialized = false;\r\n    doNotMatch = false;\r\n    error = false;\r\n    success = false;\r\n    key = '';\r\n\r\n    passwordForm: FormGroup;\r\n\r\n    ngOnInit() {\r\n        this.route.queryParams.subscribe((params) => {\r\n            if (params['key']) {\r\n                this.key = params['key'];\r\n            }\r\n            this.initialized = true;\r\n        });\r\n        this.initializeForm();\r\n    }\r\n\r\n    private initializeForm() {\r\n        if (this.passwordForm) {\r\n            return;\r\n        }\r\n        this.passwordForm = this.fb.nonNullable.group({\r\n            newPassword: ['', [Validators.required, Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n            confirmPassword: ['', [Validators.required, Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)]],\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.newPassword) {\r\n            this.newPassword.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    finishReset(): void {\r\n        this.doNotMatch = false;\r\n        this.error = false;\r\n\r\n        const newPassword = this.passwordForm.get(['newPassword'])!.value;\r\n        const confirmPassword = this.passwordForm.get(['confirmPassword'])!.value;\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            this.doNotMatch = true;\r\n        } else {\r\n            this.passwordResetFinishService.save(this.key, newPassword).subscribe({\r\n                next: () => (this.success = true),\r\n                error: () => (this.error = true),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-4\">\r\n        <h1 jhiTranslate=\"reset.finish.title\"></h1>\r\n        @if (initialized && !key) {\r\n            <div class=\"alert alert-danger\" jhiTranslate=\"reset.finish.messages.keymissing\">\r\n                <strong>The password reset key is missing.</strong>\r\n            </div>\r\n        }\r\n        @if (key && !success) {\r\n            <div class=\"alert alert-warning\">\r\n                <span jhiTranslate=\"reset.finish.messages.info\"></span>\r\n            </div>\r\n        }\r\n        @if (error) {\r\n            <div class=\"alert alert-danger\">\r\n                <span jhiTranslate=\"reset.finish.messages.error\"></span>\r\n            </div>\r\n        }\r\n        @if (success) {\r\n            <div class=\"alert alert-success\">\r\n                <span jhiTranslate=\"reset.finish.messages.success\"></span>\r\n                <a class=\"alert-link\" [routerLink]=\"['/']\" jhiTranslate=\"reset.finish.messages.success-part2\"></a>\r\n            </div>\r\n        }\r\n        @if (doNotMatch) {\r\n            <div class=\"alert alert-danger\" jhiTranslate=\"global.messages.error.dontmatch\"></div>\r\n        }\r\n        @if (key && !success) {\r\n            <div>\r\n                <form name=\"form\" role=\"form\" (ngSubmit)=\"finishReset()\" [formGroup]=\"passwordForm\">\r\n                    <div class=\"form-group\">\r\n                        <label class=\"form-control-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword\"></label>\r\n                        <input\r\n                            type=\"password\"\r\n                            class=\"form-control\"\r\n                            id=\"newPassword\"\r\n                            name=\"newPassword\"\r\n                            placeholder=\"{{ 'global.form.newpassword.placeholder' | artemisTranslate }}\"\r\n                            formControlName=\"newPassword\"\r\n                            [maxLength]=\"PASSWORD_MAX_LENGTH\"\r\n                            #newPassword\r\n                            required\r\n                        />\r\n                        @if (passwordForm.get('newPassword')!.invalid && (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)) {\r\n                            <div>\r\n                                @if (passwordForm.get('newPassword')?.errors?.required) {\r\n                                    <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.newpassword.required\"></small>\r\n                                }\r\n                                @if (passwordForm.get('newPassword')?.errors?.minlength) {\r\n                                    <small\r\n                                        class=\"form-text text-danger\"\r\n                                        jhiTranslate=\"global.messages.validate.newpassword.minlength\"\r\n                                        [translateValues]=\"{ min: PASSWORD_MIN_LENGTH }\"\r\n                                    ></small>\r\n                                }\r\n                                @if (passwordForm.get('newPassword')?.errors?.maxlength) {\r\n                                    <small\r\n                                        class=\"form-text text-danger\"\r\n                                        jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\r\n                                        [translateValues]=\"{ max: PASSWORD_MAX_LENGTH }\"\r\n                                    ></small>\r\n                                }\r\n                            </div>\r\n                        }\r\n                        <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\" />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword\"></label>\r\n                        <input\r\n                            type=\"password\"\r\n                            class=\"form-control\"\r\n                            id=\"confirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | artemisTranslate }}\"\r\n                            formControlName=\"confirmPassword\"\r\n                            required\r\n                        />\r\n                        @if (passwordForm.get('confirmPassword')!.invalid && (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)) {\r\n                            <div>\r\n                                @if (passwordForm.get('confirmPassword')?.errors?.required) {\r\n                                    <small class=\"form-text text-danger\" jhiTranslate=\"global.messages.validate.confirmpassword.required\"></small>\r\n                                }\r\n                                @if (passwordForm.get('confirmPassword')?.errors?.minlength) {\r\n                                    <small\r\n                                        class=\"form-text text-danger\"\r\n                                        jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\r\n                                        [translateValues]=\"{ min: PASSWORD_MIN_LENGTH }\"\r\n                                    ></small>\r\n                                }\r\n                                @if (passwordForm.get('confirmPassword')?.errors?.maxlength) {\r\n                                    <small\r\n                                        class=\"form-text text-danger\"\r\n                                        jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\r\n                                        [translateValues]=\"{ max: PASSWORD_MAX_LENGTH }\"\r\n                                    ></small>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <button type=\"submit\" [disabled]=\"passwordForm.invalid\" class=\"btn btn-primary\" jhiTranslate=\"reset.finish.form.button\"></button>\r\n                </form>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["PasswordResetFinishService", "http", "inject", "HttpClient", "save", "key", "newPassword", "post", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c1", "\u0275\u0275pureFunction1", "_c2", "ctx_r1", "PASSWORD_MIN_LENGTH", "_c3", "PASSWORD_MAX_LENGTH", "\u0275\u0275template", "PasswordResetFinishComponent_Conditional_11_Conditional_13_Conditional_3_Template", "PasswordResetFinishComponent_Conditional_11_Conditional_13_Conditional_4_Template", "PasswordResetFinishComponent_Conditional_11_Conditional_13_Conditional_5_Template", "\u0275\u0275conditional", "tmp_3_0", "passwordForm", "get", "errors", "required", "tmp_4_0", "minlength", "tmp_5_0", "maxlength", "PasswordResetFinishComponent_Conditional_11_Conditional_24_Conditional_3_Template", "PasswordResetFinishComponent_Conditional_11_Conditional_24_Conditional_4_Template", "PasswordResetFinishComponent_Conditional_11_Conditional_24_Conditional_5_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "finishReset", "PasswordResetFinishComponent_Conditional_11_Conditional_13_Template", "PasswordResetFinishComponent_Conditional_11_Conditional_24_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "value", "PasswordResetFinishComponent", "passwordResetFinishService", "inject", "PasswordResetFinishService", "route", "ActivatedRoute", "fb", "FormBuilder", "newPassword", "initialized", "doNotMatch", "error", "success", "key", "ngOnInit", "queryParams", "subscribe", "params", "initializeForm", "nonNullable", "group", "Validators", "minLength", "maxLength", "confirmPassword", "ngAfterViewInit", "nativeElement", "focus", "save", "next", "selectors", "viewQuery", "rf", "ctx", "PasswordResetFinishComponent_Conditional_6_Template", "PasswordResetFinishComponent_Conditional_7_Template", "PasswordResetFinishComponent_Conditional_8_Template", "PasswordResetFinishComponent_Conditional_9_Template", "PasswordResetFinishComponent_Conditional_10_Template", "PasswordResetFinishComponent_Conditional_11_Template", "TranslateDirective", "RouterLink", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PasswordStrengthBarComponent", "ArtemisTranslatePipe", "encapsulation"]
}
