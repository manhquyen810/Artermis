{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/sort/sort.directive.ts", "src/main/webapp/app/shared/sort/sort-by.directive.ts"],
  "sourcesContent": ["import { Directive, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Directive({ selector: '[jhiSort]' })\r\nexport class SortDirective<T> {\r\n    @Input()\r\n    get predicate(): T | undefined {\r\n        return this._predicate;\r\n    }\r\n    set predicate(predicate: T | undefined) {\r\n        this._predicate = predicate;\r\n        this.predicateChange.emit(predicate);\r\n    }\r\n\r\n    @Input()\r\n    get ascending(): boolean | undefined {\r\n        return this._ascending;\r\n    }\r\n    set ascending(ascending: boolean | undefined) {\r\n        this._ascending = ascending;\r\n        this.ascendingChange.emit(ascending);\r\n    }\r\n\r\n    @Output() predicateChange = new EventEmitter<T>();\r\n    @Output() ascendingChange = new EventEmitter<boolean>();\r\n    @Output() sortChange = new EventEmitter<{ predicate: T; ascending: boolean }>();\r\n\r\n    private _predicate?: T;\r\n    private _ascending?: boolean;\r\n\r\n    sort(field: T): void {\r\n        this.ascending = field !== this.predicate ? true : !this.ascending;\r\n        this.predicate = field;\r\n        this.predicateChange.emit(field);\r\n        this.ascendingChange.emit(this.ascending);\r\n        this.sortChange.emit({ predicate: this.predicate, ascending: this.ascending });\r\n    }\r\n}\r\n", "import { AfterContentInit, ContentChild, Directive, HostListener, Input, OnDestroy, inject } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { IconDefinition, faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { SortDirective } from './sort.directive';\r\n\r\n@Directive({ selector: '[jhiSortBy]' })\r\nexport class SortByDirective<T> implements AfterContentInit, OnDestroy {\r\n    private sort = inject<SortDirective<T>>(SortDirective, { host: true });\r\n\r\n    @Input() jhiSortBy!: T;\r\n\r\n    @ContentChild(FaIconComponent, { static: false })\r\n    iconComponent?: FaIconComponent;\r\n\r\n    sortIcon = faSort;\r\n    sortAscIcon = faSortUp;\r\n    sortDescIcon = faSortDown;\r\n\r\n    private readonly destroy = new Subject<void>();\r\n\r\n    constructor() {\r\n        const sort = this.sort;\r\n\r\n        sort.predicateChange.pipe(takeUntil(this.destroy)).subscribe(() => this.updateIconDefinition());\r\n        sort.ascendingChange.pipe(takeUntil(this.destroy)).subscribe(() => this.updateIconDefinition());\r\n    }\r\n\r\n    @HostListener('click')\r\n    onClick(): void {\r\n        if (this.iconComponent) {\r\n            this.sort.sort(this.jhiSortBy);\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.updateIconDefinition();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy.next();\r\n        this.destroy.complete();\r\n    }\r\n\r\n    private updateIconDefinition(): void {\r\n        if (this.iconComponent) {\r\n            let icon: IconDefinition = this.sortIcon;\r\n            if (this.sort.predicate === this.jhiSortBy) {\r\n                icon = this.sort.ascending ? this.sortAscIcon : this.sortDescIcon;\r\n            }\r\n            this.iconComponent.icon = icon;\r\n            this.iconComponent.render();\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "wMAGA,IAAaA,GAAa,IAAA,CAApB,MAAOA,CAAa,CACtB,IACIC,WAAS,CACT,OAAO,KAAKC,UAChB,CACA,IAAID,UAAUA,EAAwB,CAClC,KAAKC,WAAaD,EAClB,KAAKE,gBAAgBC,KAAKH,CAAS,CACvC,CAEA,IACII,WAAS,CACT,OAAO,KAAKC,UAChB,CACA,IAAID,UAAUA,EAA8B,CACxC,KAAKC,WAAaD,EAClB,KAAKE,gBAAgBH,KAAKC,CAAS,CACvC,CAEUF,gBAAkB,IAAIK,EACtBD,gBAAkB,IAAIC,EACtBC,WAAa,IAAID,EAEnBN,WACAI,WAERI,KAAKC,EAAQ,CACT,KAAKN,UAAYM,IAAU,KAAKV,UAAY,GAAO,CAAC,KAAKI,UACzD,KAAKJ,UAAYU,EACjB,KAAKR,gBAAgBC,KAAKO,CAAK,EAC/B,KAAKJ,gBAAgBH,KAAK,KAAKC,SAAS,EACxC,KAAKI,WAAWL,KAAK,CAAEH,UAAW,KAAKA,UAAWI,UAAW,KAAKA,SAAS,CAAE,CACjF,4CAhCSL,EAAa,2BAAbA,EAAaY,UAAA,CAAA,CAAA,GAAA,UAAA,EAAA,CAAA,EAAAC,OAAA,CAAAZ,UAAA,YAAAI,UAAA,WAAA,EAAAS,QAAA,CAAAX,gBAAA,kBAAAI,gBAAA,kBAAAE,WAAA,YAAA,CAAA,CAAA,SAAbT,CAAa,GAAA,ECM1B,IAAae,GAAe,IAAA,CAAtB,MAAOA,CAAe,CAChBC,KAAOC,EAAyBC,EAAe,CAAEC,KAAM,EAAI,CAAE,EAE5DC,UAGTC,cAEAC,SAAWC,EACXC,YAAcC,EACdC,aAAeC,EAEEC,QAAU,IAAIC,EAE/BC,aAAA,CACI,IAAMd,EAAO,KAAKA,KAElBA,EAAKe,gBAAgBC,KAAKC,EAAU,KAAKL,OAAO,CAAC,EAAEM,UAAU,IAAM,KAAKC,qBAAoB,CAAE,EAC9FnB,EAAKoB,gBAAgBJ,KAAKC,EAAU,KAAKL,OAAO,CAAC,EAAEM,UAAU,IAAM,KAAKC,qBAAoB,CAAE,CAClG,CAGAE,SAAO,CACC,KAAKhB,eACL,KAAKL,KAAKA,KAAK,KAAKI,SAAS,CAErC,CAEAkB,oBAAkB,CACd,KAAKH,qBAAoB,CAC7B,CAEAI,aAAW,CACP,KAAKX,QAAQY,KAAI,EACjB,KAAKZ,QAAQa,SAAQ,CACzB,CAEQN,sBAAoB,CACxB,GAAI,KAAKd,cAAe,CACpB,IAAIqB,EAAuB,KAAKpB,SAC5B,KAAKN,KAAK2B,YAAc,KAAKvB,YAC7BsB,EAAO,KAAK1B,KAAK4B,UAAY,KAAKpB,YAAc,KAAKE,cAEzD,KAAKL,cAAcqB,KAAOA,EAC1B,KAAKrB,cAAcwB,OAAM,CAC7B,CACJ,4CA9CS9B,EAAe,2BAAfA,EAAe+B,UAAA,CAAA,CAAA,GAAA,YAAA,EAAA,CAAA,EAAAC,eAAA,SAAAC,EAAAC,EAAAC,EAAA,IAAAF,EAAA,OAKVG,EAAe,CAAA,mFALpBC,EAAA,QAAA,UAAA,CAAA,OAAAH,EAAAZ,QAAA,CAAS,CAAA,2CAATtB,CAAe,GAAA",
  "names": ["SortDirective", "predicate", "_predicate", "predicateChange", "emit", "ascending", "_ascending", "ascendingChange", "EventEmitter", "sortChange", "sort", "field", "selectors", "inputs", "outputs", "SortByDirective", "sort", "inject", "SortDirective", "host", "jhiSortBy", "iconComponent", "sortIcon", "faSort", "sortAscIcon", "faSortUp", "sortDescIcon", "faSortDown", "destroy", "Subject", "constructor", "predicateChange", "pipe", "takeUntil", "subscribe", "updateIconDefinition", "ascendingChange", "onClick", "ngAfterContentInit", "ngOnDestroy", "next", "complete", "icon", "predicate", "ascending", "render", "selectors", "contentQueries", "rf", "ctx", "dirIndex", "FaIconComponent", "\u0275\u0275listener"]
}
