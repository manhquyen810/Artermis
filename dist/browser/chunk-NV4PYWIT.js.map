{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/manage/paging.service.ts", "src/main/webapp/app/shared/import/import.component.ts"],
  "sourcesContent": ["import { HttpParams } from '@angular/common/http';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport abstract class PagingService<T> {\r\n    protected createHttpParams(pageable: SearchTermPageableSearch): HttpParams {\r\n        return new HttpParams()\r\n            .set('pageSize', String(pageable.pageSize))\r\n            .set('page', String(pageable.page))\r\n            .set('sortingOrder', pageable.sortingOrder)\r\n            .set('searchTerm', pageable.searchTerm)\r\n            .set('sortedColumn', pageable.sortedColumn);\r\n    }\r\n\r\n    public abstract search(pageable: SearchTermPageableSearch, options?: object): Observable<SearchResult<T>>;\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { faCheck, faSort } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PagingService } from 'app/exercises/shared/manage/paging.service';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { SearchResult, SearchTermPageableSearch, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { Subject, debounceTime, switchMap, tap } from 'rxjs';\r\n\r\n/**\r\n * An abstract component intended for cases where a resource needs to be imported from one course into another.\r\n *\r\n * @template T generic class parameter of the entity that gets imported\r\n */\r\n\r\nexport type Column<T extends BaseEntity> = {\r\n    name: string;\r\n    getProperty(entity: T): string | undefined;\r\n};\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class ImportComponent<T extends BaseEntity> implements OnInit {\r\n    protected router = inject(Router);\r\n    private sortService = inject(SortService);\r\n    protected activeModal = inject(NgbActiveModal);\r\n\r\n    loading = false;\r\n    content: SearchResult<T>;\r\n    total = 0;\r\n    state: SearchTermPageableSearch = {\r\n        page: 1,\r\n        pageSize: 10,\r\n        searchTerm: '',\r\n        sortingOrder: SortingOrder.DESCENDING,\r\n        sortedColumn: 'ID',\r\n    };\r\n\r\n    // These two attributes should be set when using the common template (import.component.html)\r\n    entityName: string;\r\n    columns: Column<T>[];\r\n\r\n    @Input() public disabledIds: number[] = [];\r\n\r\n    // Icons\r\n    readonly faSort = faSort;\r\n    readonly faCheck = faCheck;\r\n    protected readonly search = new Subject<void>();\r\n    protected readonly sort = new Subject<void>();\r\n\r\n    protected constructor(protected pagingService?: PagingService<T>) {}\r\n\r\n    get page(): number {\r\n        return this.state.page;\r\n    }\r\n\r\n    set page(page: number) {\r\n        this.setSearchParam({ page });\r\n    }\r\n\r\n    get listSorting(): boolean {\r\n        return this.state.sortingOrder === SortingOrder.ASCENDING;\r\n    }\r\n\r\n    /**\r\n     * Set the list sorting direction\r\n     *\r\n     * @param ascending {boolean} Ascending order set\r\n     */\r\n    set listSorting(ascending: boolean) {\r\n        const sortingOrder = ascending ? SortingOrder.ASCENDING : SortingOrder.DESCENDING;\r\n        this.setSearchParam({ sortingOrder });\r\n    }\r\n\r\n    get sortedColumn(): string {\r\n        return this.state.sortedColumn;\r\n    }\r\n\r\n    set sortedColumn(sortedColumn: string) {\r\n        this.setSearchParam({ sortedColumn });\r\n    }\r\n\r\n    get searchTerm(): string {\r\n        return this.state.searchTerm;\r\n    }\r\n\r\n    set searchTerm(searchTerm: string) {\r\n        this.state.searchTerm = searchTerm;\r\n        this.search.next();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.content = { resultsOnPage: [], numberOfPages: 0 };\r\n\r\n        this.performSearch(this.sort, 0);\r\n        this.performSearch(this.search, 300);\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.content.resultsOnPage, this.sortedColumn, this.listSorting);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Gives the ID for any item in the table, so that it can be tracked/identified by ngFor\r\n     *\r\n     * @template T\r\n     * @param _index The index of the element in the ngFor\r\n     * @param {T} item The item itself\r\n     * @returns The ID of the item\r\n     */\r\n    trackId(_index: number, item: T): number {\r\n        return item.id!;\r\n    }\r\n\r\n    /**\r\n     * Closes the modal in which the import component is opened. Gives the selected item as a result.\r\n     *\r\n     * @param item The item which was selected by the user for the import.\r\n     */\r\n    selectImport(item: T) {\r\n        this.activeModal.close(item);\r\n    }\r\n\r\n    /**\r\n     * Closes the modal in which the import component is opened by dismissing it\r\n     */\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    /**\r\n     * Callback function when the user navigates through the page results\r\n     *\r\n     * @param pageNumber The current page number\r\n     */\r\n    onPageChange(pageNumber: number) {\r\n        if (pageNumber) {\r\n            this.page = pageNumber;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method to perform the search based on a search subject\r\n     *\r\n     * @param searchSubject The search subject which we use to search.\r\n     * @param debounce The delay we apply to delay the feedback / wait for input\r\n     */\r\n    performSearch(searchSubject: Subject<void>, debounce: number) {\r\n        searchSubject\r\n            .pipe(\r\n                debounceTime(debounce),\r\n                tap(() => (this.loading = true)),\r\n                switchMap(() => this.pagingService!.search(this.state, this.createOptions())),\r\n            )\r\n            .subscribe((resp: SearchResult<T>) => {\r\n                this.content = resp;\r\n                this.loading = false;\r\n                this.total = resp.numberOfPages * this.state.pageSize;\r\n                this.onSearchResult();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * This method is used to create additional options passed to the paging service.\r\n     */\r\n    protected createOptions(): object | undefined {\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * This method is called after retrieving a result from the paging service.\r\n     * Used to perform some special logic with the search result (e.g. calculating the submission size for the example submission import)\r\n     */\r\n    protected onSearchResult(): void {}\r\n\r\n    protected setSearchParam(patch: Partial<SearchTermPageableSearch>) {\r\n        Object.assign(this.state, patch);\r\n        this.sort.next();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["PagingService", "createHttpParams", "pageable", "HttpParams", "set", "String", "pageSize", "page", "sortingOrder", "searchTerm", "sortedColumn", "ImportComponent", "pagingService", "router", "inject", "Router", "sortService", "SortService", "activeModal", "NgbActiveModal", "loading", "content", "total", "state", "page", "pageSize", "searchTerm", "sortingOrder", "SortingOrder", "DESCENDING", "sortedColumn", "entityName", "columns", "disabledIds", "faSort", "faCheck", "search", "Subject", "sort", "constructor", "setSearchParam", "listSorting", "ASCENDING", "ascending", "next", "ngOnInit", "resultsOnPage", "numberOfPages", "performSearch", "sortRows", "sortByProperty", "trackId", "_index", "item", "id", "selectImport", "close", "clear", "dismiss", "onPageChange", "pageNumber", "searchSubject", "debounce", "pipe", "debounceTime", "tap", "switchMap", "createOptions", "subscribe", "resp", "onSearchResult", "patch", "Object", "assign", "\u0275\u0275directiveInject", "PagingService", "selectors", "inputs", "decls", "vars", "template", "rf", "ctx", "encapsulation"]
}
