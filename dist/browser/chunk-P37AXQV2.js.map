{
  "version": 3,
  "sources": ["src/main/webapp/app/course/manage/course-management-resolve.service.ts"],
  "sourcesContent": ["import { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable, filter, map, of } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseManagementResolve implements Resolve<Course> {\r\n    private service = inject(CourseManagementService);\r\n\r\n    /**\r\n     * Resolves the route by extracting the courseId and returns the course with that Id if it exists\r\n     * and creates a new course otherwise\r\n     * @param route - contains the information about the route to be resolved\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<Course> {\r\n        if (route.params['courseId']) {\r\n            return this.service.find(route.params['courseId']).pipe(\r\n                filter((response: HttpResponse<Course>) => response.ok),\r\n                map((course: HttpResponse<Course>) => course.body!),\r\n            );\r\n        }\r\n        return of(new Course());\r\n    }\r\n}\r\n"],
  "mappings": "sJAQA,IAAaA,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CACxBC,QAAUC,EAAOC,CAAuB,EAOhDC,QAAQC,EAA6B,CACjC,OAAIA,EAAMC,OAAO,SACN,KAAKL,QAAQM,KAAKF,EAAMC,OAAO,QAAW,EAAEE,KAC/CC,EAAQC,GAAmCA,EAASC,EAAE,EACtDC,EAAKC,GAAiCA,EAAOC,IAAK,CAAC,EAGpDC,EAAG,IAAIC,CAAQ,CAC1B,4CAhBShB,EAAuB,6BAAvBA,EAAuBiB,QAAvBjB,EAAuBkB,UAAAC,WADV,MAAM,CAAA,SACnBnB,CAAuB,GAAA",
  "names": ["CourseManagementResolve", "service", "inject", "CourseManagementService", "resolve", "route", "params", "find", "pipe", "filter", "response", "ok", "map", "course", "body", "of", "Course", "factory", "\u0275fac", "providedIn"]
}
