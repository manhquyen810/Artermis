{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/mode-picker/mode-picker.component.ts", "src/main/webapp/app/exercises/shared/mode-picker/mode-picker.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport type ModePickerOption<TMode> = {\r\n    value: TMode;\r\n    labelKey?: string;\r\n    label?: string;\r\n    btnClass: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-mode-picker',\r\n    templateUrl: './mode-picker.component.html',\r\n    styles: ['.btn.disabled { pointer-events: none }', '.btn-group.disabled { cursor: not-allowed; }'],\r\n    imports: [NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class ModePickerComponent<TMode> {\r\n    @Input() options: ModePickerOption<TMode>[];\r\n    @Input() disabled = false;\r\n\r\n    @Input() value: TMode;\r\n    @Output() valueChange = new EventEmitter<TMode>();\r\n\r\n    /**\r\n     * Set the mode and emit the changes to the parent component to notice changes\r\n     * @param mode chosen mode of type {TMode}\r\n     */\r\n    setMode(mode: TMode) {\r\n        if (!this.disabled && mode !== this.value) {\r\n            this.valueChange.emit(mode);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"d-flex align-items-start\">\r\n    <div class=\"btn-group\" [ngClass]=\"{ disabled }\">\r\n        @for (option of options; track option) {\r\n            <div class=\"btn\" [class.disabled]=\"disabled\" [ngClass]=\"value === option.value ? option.btnClass : 'btn-default'\" (click)=\"setMode(option.value)\">\r\n                {{ option.label ?? (option.labelKey | artemisTranslate) }}\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "2UCGYA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EAAkHC,EAAA,QAAA,UAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAG,QAAAP,EAAAQ,KAAA,CAAqB,CAAA,CAAA,EAC5IX,EAAA,CAAA,0BACJY,EAAA,EACJZ,EAAA,EAAA;SAAA,oCAHqBa,EAAA,EAAAC,EAAA,WAAAP,EAAAQ,QAAA,EAA4BC,EAAA,UAAAT,EAAAI,QAAAR,EAAAQ,MAAAR,EAAAc,SAAA,aAAA,EACzCJ,EAAA,EAAAK,EAAA;mBAAAC,EAAAhB,EAAAiB,SAAA,MAAAD,IAAAE,OAAAF,EAAAG,EAAA,EAAA,EAAAnB,EAAAoB,QAAA,EAAA;aAAA,GDahB,IAAaC,GAAmB,IAAA,CAA1B,MAAOA,CAAmB,CACnBC,QACAV,SAAW,GAEXJ,MACCe,YAAc,IAAIC,EAM5BjB,QAAQkB,EAAW,CACX,CAAC,KAAKb,UAAYa,IAAS,KAAKjB,OAChC,KAAKe,YAAYG,KAAKD,CAAI,CAElC,4CAfSJ,EAAmB,2BAAnBA,EAAmBM,UAAA,CAAA,CAAA,iBAAA,CAAA,EAAAC,OAAA,CAAAN,QAAA,UAAAV,SAAA,WAAAJ,MAAA,OAAA,EAAAqB,QAAA,CAAAN,YAAA,aAAA,EAAAO,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,SAAA,mBAAA,EAAA,CAAA,EAAA,YAAA,EAAA,SAAA,EAAA,CAAA,EAAA,MAAA,EAAA,QAAA,SAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICjBhCpC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAuC,EAAA,EAAAC,EAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,EAKJ7B,EAAA,EACJZ,EAAA,EAAA;CAAA,EAAAY,EAAA,EACAZ,EAAA,EAAA;CAAA,SAR2Ba,EAAA,CAAA,EAAAG,EAAA,UAAA0B,EAAA,EAAAC,EAAAL,EAAAvB,QAAA,CAAA,EACnBF,EAAA,CAAA,EAAA+B,EAAAN,EAAAb,OAAA,kBDaMoB,EAASC,CAAoB,EAAAC,OAAA,CAAA,wDAAA,4DAAA,CAAA,CAAA,SAE9BvB,CAAmB,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "option_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setMode", "value", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classProp", "disabled", "\u0275\u0275property", "btnClass", "\u0275\u0275textInterpolate1", "tmp_12_0", "label", "undefined", "\u0275\u0275pipeBind1", "labelKey", "ModePickerComponent", "options", "valueChange", "EventEmitter", "mode", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ModePickerComponent_For_5_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275repeater", "NgClass", "ArtemisTranslatePipe", "styles"]
}
