{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/assess/modeling-assessment.util.ts", "src/main/webapp/app/exercises/modeling/assess/modeling-assessment.component.ts", "src/main/webapp/app/exercises/modeling/assess/modeling-assessment.component.html"],
  "sourcesContent": ["import { Result } from 'app/entities/result.model';\r\nimport { UMLElementType, UMLModelCompat, UMLRelationshipType, findElement, findRelationship } from '@ls1intum/apollon';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\n\r\nexport type AssessmentNamesForModelId = { [modelId: string]: { type: string; name: string } | undefined };\r\n\r\n/**\r\n * Creates the labels for the assessment elements for displaying them in the modeling and assessment editor.\r\n */\r\n// TODO: define a mapping or simplify this complex monster in a another way so that we can support other diagram types as well\r\nexport function getNamesForAssessments(result: Result, model: UMLModelCompat): AssessmentNamesForModelId {\r\n    const assessmentsNames: AssessmentNamesForModelId = {};\r\n    for (const feedback of result.feedbacks!) {\r\n        const referencedModelType = feedback.referenceType! as UMLElementType;\r\n        const referencedModelId = feedback.referenceId!;\r\n        if (referencedModelType in UMLElementType) {\r\n            const element = findElement(model, referencedModelId);\r\n            if (!element) {\r\n                // prevent errors when element could not be found, should never happen\r\n                assessmentsNames[referencedModelId] = { name: '', type: '' };\r\n                continue;\r\n            }\r\n\r\n            const name = element.name;\r\n            let type: string;\r\n            switch (element.type) {\r\n                case UMLElementType.Class:\r\n                    type = 'class';\r\n                    break;\r\n                case UMLElementType.Package:\r\n                    type = 'package';\r\n                    break;\r\n                case UMLElementType.Interface:\r\n                    type = 'interface';\r\n                    break;\r\n                case UMLElementType.AbstractClass:\r\n                    type = 'abstract class';\r\n                    break;\r\n                case UMLElementType.Enumeration:\r\n                    type = 'enum';\r\n                    break;\r\n                case UMLElementType.ClassAttribute:\r\n                    type = 'attribute';\r\n                    break;\r\n                case UMLElementType.ClassMethod:\r\n                    type = 'method';\r\n                    break;\r\n                case UMLElementType.ActivityInitialNode:\r\n                    type = 'initial node';\r\n                    break;\r\n                case UMLElementType.ActivityFinalNode:\r\n                    type = 'final node';\r\n                    break;\r\n                case UMLElementType.ActivityObjectNode:\r\n                    type = 'object';\r\n                    break;\r\n                case UMLElementType.ActivityActionNode:\r\n                    type = 'action';\r\n                    break;\r\n                case UMLElementType.ActivityForkNode:\r\n                    type = 'fork node';\r\n                    break;\r\n                case UMLElementType.ActivityMergeNode:\r\n                    type = 'merge node';\r\n                    break;\r\n                default:\r\n                    type = '';\r\n                    break;\r\n            }\r\n            assessmentsNames[referencedModelId] = { type, name };\r\n        } else if (referencedModelType in UMLRelationshipType) {\r\n            const relationship = findRelationship(model, referencedModelId);\r\n            if (!relationship) {\r\n                // prevent errors when relationship could not be found, should never happen\r\n                assessmentsNames[referencedModelId] = { name: '', type: '' };\r\n                continue;\r\n            }\r\n            const source = findElement(model, relationship.source.element)?.name ?? '?';\r\n            const target = findElement(model, relationship.target.element)?.name ?? '?';\r\n            const relationshipType = relationship.type;\r\n            let type = 'association';\r\n            let relation: string;\r\n            switch (relationshipType) {\r\n                case UMLRelationshipType.ClassBidirectional:\r\n                    relation = ' <-> ';\r\n                    break;\r\n                case UMLRelationshipType.ClassUnidirectional:\r\n                    relation = ' --> ';\r\n                    break;\r\n                case UMLRelationshipType.ClassAggregation:\r\n                    relation = ' --◇ ';\r\n                    break;\r\n                case UMLRelationshipType.ClassInheritance:\r\n                    relation = ' --▷ ';\r\n                    break;\r\n                case UMLRelationshipType.ClassDependency:\r\n                    relation = ' ╌╌> ';\r\n                    break;\r\n                case UMLRelationshipType.ClassComposition:\r\n                    relation = ' --◆ ';\r\n                    break;\r\n                case UMLRelationshipType.ActivityControlFlow:\r\n                    relation = ' --> ';\r\n                    type = 'control flow';\r\n                    break;\r\n                default:\r\n                    relation = ' --- ';\r\n            }\r\n            assessmentsNames[referencedModelId] = { type, name: source + relation + target };\r\n        } else {\r\n            assessmentsNames[referencedModelId] = { type: `${referencedModelType}`, name: '' };\r\n        }\r\n    }\r\n    return assessmentsNames;\r\n}\r\n\r\n/**\r\n * Removes feedback elements for which the corresponding model element does not exist in the model anymore.\r\n * @param feedbacks the list of feedback to filter\r\n * @param umlModel the UML model containing the references\r\n */\r\nexport function filterInvalidFeedback(feedbacks: Feedback[], umlModel: UMLModelCompat): Feedback[] {\r\n    if (!feedbacks) {\r\n        return feedbacks;\r\n    }\r\n    if (!umlModel || !umlModel.elements) {\r\n        return [];\r\n    }\r\n\r\n    let availableIds: string[] = Object.values(umlModel.elements).map((el) => el.id);\r\n    if (umlModel.relationships) {\r\n        availableIds = availableIds.concat(Object.values(umlModel.relationships).map((rel) => rel.id));\r\n    }\r\n    return feedbacks.filter((feedback) => availableIds.includes(feedback.referenceId!));\r\n}\r\n", "import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, inject } from '@angular/core';\r\nimport { ApollonEditor, ApollonMode, Assessment, Selection, UMLDiagramType, UMLElementType, UMLModel, UMLRelationshipType, addOrUpdateAssessment } from '@ls1intum/apollon';\r\nimport { Feedback, FeedbackType } from 'app/entities/feedback.model';\r\nimport { ModelElementCount } from 'app/entities/modeling-submission.model';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\r\nimport { ModelingComponent } from 'app/exercises/modeling/shared/modeling.component';\r\nimport { filterInvalidFeedback } from 'app/exercises/modeling/assess/modeling-assessment.util';\r\nimport { ScoreDisplayComponent } from 'app/shared/score-display/score-display.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ModelingExplanationEditorComponent } from '../shared/modeling-explanation-editor.component';\r\n\r\nexport interface DropInfo {\r\n    instruction: GradingInstruction;\r\n    tooltipMessage: string;\r\n    removeMessage: string;\r\n    feedbackHint: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-assessment',\r\n    templateUrl: './modeling-assessment.component.html',\r\n    styleUrls: ['./modeling-assessment.component.scss'],\r\n    imports: [ScoreDisplayComponent, FaIconComponent, ModelingExplanationEditorComponent],\r\n})\r\nexport class ModelingAssessmentComponent extends ModelingComponent implements AfterViewInit, OnDestroy, OnChanges {\r\n    private artemisTranslatePipe = inject(ArtemisTranslatePipe);\r\n\r\n    @Input() maxScore: number;\r\n    @Input() maxBonusPoints = 0;\r\n    @Input() totalScore: number;\r\n    @Input() title: string;\r\n    @Input() enablePopups = true;\r\n    @Input() displayPoints = true;\r\n    @Input() highlightDifferences: boolean;\r\n\r\n    @Output() feedbackChanged = new EventEmitter<Feedback[]>();\r\n    @Output() selectionChanged = new EventEmitter<Selection>();\r\n\r\n    @Input() highlightedElements: Map<string, string>; // map elementId -> highlight color\r\n    @Input() elementCounts?: ModelElementCount[];\r\n    @Input() course?: Course;\r\n\r\n    @Input() set resultFeedbacks(feedback: Feedback[]) {\r\n        this.feedbacks = feedback;\r\n        this.referencedFeedbacks = this.feedbacks.filter((feedbackElement) => feedbackElement.reference != undefined);\r\n        this.updateApollonAssessments(this.referencedFeedbacks);\r\n    }\r\n\r\n    feedbacks: Feedback[];\r\n    elementFeedback: Map<string, Feedback>; // map element.id --> Feedback\r\n    referencedFeedbacks: Feedback[] = [];\r\n    unreferencedFeedbacks: Feedback[] = [];\r\n    firstCorrectionRoundColor = '#3e8acc';\r\n    secondCorrectionRoundColor = '#ffa561';\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        if (this.feedbacks) {\r\n            this.referencedFeedbacks = this.feedbacks.filter((feedbackElement) => feedbackElement.reference != undefined);\r\n            this.unreferencedFeedbacks = this.feedbacks.filter(\r\n                (feedbackElement) => feedbackElement.reference == undefined && feedbackElement.type === FeedbackType.MANUAL_UNREFERENCED,\r\n            );\r\n        }\r\n        this.initializeApollonEditor();\r\n        if (this.highlightedElements) {\r\n            await this.updateHighlightedElements(this.highlightedElements);\r\n        }\r\n        if (this.elementCounts) {\r\n            await this.updateElementCounts(this.elementCounts);\r\n        }\r\n        await this.applyStateConfiguration();\r\n        this.setupInteract();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.apollonEditor) {\r\n            this.apollonEditor.destroy();\r\n        }\r\n    }\r\n\r\n    async ngOnChanges(changes: SimpleChanges): Promise<void> {\r\n        if (changes.umlModel && changes.umlModel.currentValue && this.apollonEditor) {\r\n            this.apollonEditor!.model = changes.umlModel.currentValue;\r\n            this.handleFeedback();\r\n        }\r\n\r\n        if (changes.feedbacks && changes.feedbacks.currentValue && this.umlModel) {\r\n            this.feedbacks = changes.feedbacks.currentValue;\r\n            this.handleFeedback();\r\n        }\r\n\r\n        if (changes.highlightedElements) {\r\n            this.highlightedElements = changes.highlightedElements.currentValue;\r\n        }\r\n\r\n        if ((changes.highlightedElements || changes.highlightDifferences) && this.apollonEditor) {\r\n            await this.updateApollonAssessments(this.referencedFeedbacks);\r\n            await this.applyStateConfiguration();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the Apollon editor after updating the Feedback accordingly. It also subscribes to change\r\n     * events of Apollon and passes them on to parent components.\r\n     */\r\n    private initializeApollonEditor() {\r\n        if (this.apollonEditor) {\r\n            this.apollonEditor.destroy();\r\n        }\r\n\r\n        this.handleFeedback();\r\n\r\n        this.apollonEditor = new ApollonEditor(this.editorContainer.nativeElement, {\r\n            mode: ApollonMode.Assessment,\r\n            readonly: this.readOnly,\r\n            model: this.umlModel,\r\n            type: this.diagramType || UMLDiagramType.ClassDiagram,\r\n            enablePopups: this.enablePopups,\r\n        });\r\n        this.apollonEditor!.subscribeToSelectionChange((selection: Selection) => {\r\n            if (this.readOnly) {\r\n                this.selectionChanged.emit(selection);\r\n            }\r\n        });\r\n        if (!this.readOnly) {\r\n            this.apollonEditor!.subscribeToAssessmentChange((assessments: Assessment[]) => {\r\n                this.referencedFeedbacks = this.generateFeedbackFromAssessment(assessments);\r\n                this.feedbackChanged.emit(this.referencedFeedbacks);\r\n            });\r\n        }\r\n    }\r\n\r\n    private async applyStateConfiguration() {\r\n        if (this.highlightedElements) {\r\n            await this.updateHighlightedElements(this.highlightedElements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the assessments from Apollon and creates/updates the corresponding Feedback entries in the\r\n     * element feedback mapping.\r\n     * Returns an array containing all feedback entries from the mapping.\r\n     */\r\n    generateFeedbackFromAssessment(assessments: Assessment[]): Feedback[] {\r\n        const newElementFeedback = new Map();\r\n        for (const assessment of assessments) {\r\n            let feedback = this.elementFeedback.get(assessment.modelElementId);\r\n            if (feedback) {\r\n                if (feedback.credits !== assessment.score && feedback.gradingInstruction) {\r\n                    feedback.gradingInstruction = undefined;\r\n                }\r\n                feedback.credits = assessment.score;\r\n                feedback.text = assessment.feedback;\r\n                if (assessment.dropInfo && assessment.dropInfo.instruction?.id) {\r\n                    feedback.gradingInstruction = assessment.dropInfo.instruction;\r\n                }\r\n                if (feedback.gradingInstruction && assessment.dropInfo == undefined) {\r\n                    feedback.gradingInstruction = undefined;\r\n                }\r\n            } else {\r\n                feedback = Feedback.forModeling(assessment.score, assessment.feedback, assessment.modelElementId, assessment.elementType, assessment.dropInfo);\r\n            }\r\n            newElementFeedback.set(assessment.modelElementId, feedback);\r\n        }\r\n        this.elementFeedback = newElementFeedback;\r\n        return [...this.elementFeedback.values()];\r\n    }\r\n\r\n    /**\r\n     * Handles (new) feedback by removing invalid feedback, updating the element-feedback mapping and updating\r\n     * the assessments for Apollon accordingly.\r\n     * which is then shown in the score display component.\r\n     * This method is called before initializing Apollon and when the feedback or model is updated.\r\n     */\r\n    private handleFeedback(): void {\r\n        this.referencedFeedbacks = filterInvalidFeedback(this.feedbacks, this.umlModel);\r\n        this.updateElementFeedbackMapping(this.referencedFeedbacks);\r\n        this.updateApollonAssessments(this.referencedFeedbacks);\r\n    }\r\n\r\n    /**\r\n     * Updates the mapping of elementIds to Feedback elements. This should be called after getting the\r\n     * (updated) Feedback list from the server.\r\n     *\r\n     * @param feedbacks new Feedback elements to insert\r\n     */\r\n    private updateElementFeedbackMapping(feedbacks: Feedback[]) {\r\n        if (!this.elementFeedback) {\r\n            this.elementFeedback = new Map();\r\n        }\r\n        if (!feedbacks) {\r\n            return;\r\n        }\r\n        for (const feedback of feedbacks) {\r\n            this.elementFeedback.set(feedback.referenceId!, feedback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding highlight color in the apollon model of all elements contained in the given element map.\r\n     *\r\n     * @param newElements a map of elementIds -> highlight color\r\n     */\r\n    private async updateHighlightedElements(newElements: Map<string, string>) {\r\n        if (!newElements) {\r\n            newElements = new Map<string, string>();\r\n        }\r\n\r\n        if (this.apollonEditor != undefined) {\r\n            await this.apollonEditor.nextRender;\r\n            const model: UMLModel = this.apollonEditor!.model;\r\n            for (const element of Object.values(model!.elements)) {\r\n                element.highlight = newElements.get(element.id);\r\n            }\r\n            for (const relationship of Object.values(model!.relationships)) {\r\n                relationship.highlight = newElements.get(relationship.id);\r\n            }\r\n            this.apollonEditor!.model = model!;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding highlight color in the apollon model of all elements contained in the given element map.\r\n     *\r\n     * @param newElementCounts a map of elementIds -> highlight color\r\n     */\r\n    private async updateElementCounts(newElementCounts: ModelElementCount[]) {\r\n        if (!newElementCounts) {\r\n            return;\r\n        }\r\n\r\n        const elementCountMap = new Map<string, number>();\r\n\r\n        newElementCounts.forEach((elementCount) => elementCountMap.set(elementCount.elementId, elementCount.numberOfOtherElements));\r\n\r\n        if (this.apollonEditor != undefined) {\r\n            await this.apollonEditor.nextRender;\r\n            const model: UMLModel = this.apollonEditor.model;\r\n            for (const element of Object.values(model.elements)) {\r\n                element.assessmentNote = this.calculateNote(elementCountMap.get(element.id));\r\n            }\r\n            for (const relationship of Object.values(model.relationships)) {\r\n                relationship.assessmentNote = this.calculateNote(elementCountMap.get(relationship.id));\r\n            }\r\n            this.apollonEditor.model = model;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a given feedback list to Apollon assessments and updates the model of Apollon with the new assessments.\r\n     * @param feedbacks the feedback list to convert and pass on to Apollon\r\n     */\r\n    private async updateApollonAssessments(feedbacks: Feedback[]) {\r\n        if (!feedbacks || !this.umlModel) {\r\n            return;\r\n        }\r\n\r\n        feedbacks.forEach((feedback) => {\r\n            addOrUpdateAssessment(this.umlModel, {\r\n                modelElementId: feedback.referenceId!,\r\n                elementType: feedback.referenceType! as UMLElementType | UMLRelationshipType,\r\n                score: feedback.credits!,\r\n                feedback: feedback.text || undefined,\r\n                label: this.calculateLabel(feedback),\r\n                labelColor: this.calculateLabelColor(feedback),\r\n                correctionStatus: this.calculateCorrectionStatusForFeedback(feedback),\r\n                dropInfo: this.calculateDropInfo(feedback),\r\n            });\r\n        });\r\n\r\n        if (this.apollonEditor) {\r\n            await this.apollonEditor.nextRender;\r\n            this.apollonEditor.model = this.umlModel;\r\n        }\r\n    }\r\n\r\n    private calculateLabel(feedback: any) {\r\n        const firstCorrectionRoundText = this.artemisTranslatePipe.transform('artemisApp.assessment.diffView.correctionRoundDiffFirst');\r\n        const secondCorrectionRoundText = this.artemisTranslatePipe.transform('artemisApp.assessment.diffView.correctionRoundDiffSecond');\r\n        if (this.highlightDifferences) {\r\n            return feedback.copiedFeedbackId ? firstCorrectionRoundText : secondCorrectionRoundText;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private calculateLabelColor(feedback: any) {\r\n        if (this.highlightDifferences) {\r\n            return feedback.copiedFeedbackId ? this.firstCorrectionRoundColor : this.secondCorrectionRoundColor;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private calculateNote(count: number | undefined) {\r\n        if (count) {\r\n            return this.artemisTranslatePipe.transform('artemisApp.modelingAssessment.impactWarning', { affectedSubmissionsCount: count });\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private calculateCorrectionStatusForFeedback(feedback: Feedback) {\r\n        let correctionStatusDescription = feedback.correctionStatus\r\n            ? this.artemisTranslatePipe.transform('artemisApp.exampleSubmission.feedback.' + feedback.correctionStatus)\r\n            : feedback.correctionStatus;\r\n        if (feedback.correctionStatus && feedback.correctionStatus !== 'CORRECT') {\r\n            // Adding a missing warning icon to the translation strings of incorrect feedbacks.\r\n            correctionStatusDescription += ' ⚠️';\r\n        }\r\n        let correctionStatus: 'CORRECT' | 'INCORRECT' | 'NOT_VALIDATED';\r\n        switch (feedback.correctionStatus) {\r\n            case 'CORRECT':\r\n                correctionStatus = 'CORRECT';\r\n                break;\r\n            case undefined:\r\n                correctionStatus = 'NOT_VALIDATED';\r\n                break;\r\n            default:\r\n                correctionStatus = 'INCORRECT';\r\n        }\r\n\r\n        return {\r\n            description: correctionStatusDescription,\r\n            status: correctionStatus,\r\n        };\r\n    }\r\n\r\n    private calculateDropInfo(feedback: Feedback) {\r\n        if (feedback.gradingInstruction) {\r\n            const dropInfo = <DropInfo>{};\r\n            dropInfo.instruction = feedback.gradingInstruction;\r\n            dropInfo.removeMessage = this.artemisTranslatePipe.transform('artemisApp.assessment.messages.removeAssessmentInstructionLink');\r\n            dropInfo.tooltipMessage = this.artemisTranslatePipe.transform('artemisApp.exercise.assessmentInstruction') + feedback!.gradingInstruction!.instructionDescription;\r\n            dropInfo.feedbackHint = this.artemisTranslatePipe.transform('artemisApp.assessment.feedbackHint');\r\n            return dropInfo;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n", "<div #resizeContainer class=\"modeling-assessment\" [class.resizable]=\"resizeOptions\">\r\n    @if (title || displayPoints) {\r\n        <div class=\"card-header bg-primary text-white\">\r\n            @if (title) {\r\n                <span>{{ title }}</span>\r\n            }\r\n            <span class=\"flex-fill\"></span>\r\n            @if (displayPoints) {\r\n                <jhi-score-display [score]=\"totalScore\" [maxPoints]=\"maxScore\" [maxBonusPoints]=\"maxBonusPoints\" [course]=\"course\" />\r\n            }\r\n        </div>\r\n    }\r\n    <div class=\"apollon-row\" id=\"apollon-assessment-row\">\r\n        <div #editorContainer class=\"apollon-container\"></div>\r\n        @if (resizeOptions && resizeOptions.horizontalResize) {\r\n            <div class=\"draggable-right\">\r\n                <fa-icon [icon]=\"faGripLinesVertical\" />\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (resizeOptions && resizeOptions.verticalResize) {\r\n        <div class=\"draggable-bottom\">\r\n            <fa-icon [icon]=\"faGripLines\" />\r\n        </div>\r\n    }\r\n    @if (explanation) {\r\n        <jhi-modeling-explanation-editor [explanation]=\"explanation\" [readOnly]=\"true\" />\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["getNamesForAssessments", "result", "model", "assessmentsNames", "feedback", "feedbacks", "referencedModelType", "referenceType", "referencedModelId", "referenceId", "UMLElementType", "element", "findElement", "name", "type", "Class", "Package", "Interface", "AbstractClass", "Enumeration", "ClassAttribute", "ClassMethod", "ActivityInitialNode", "ActivityFinalNode", "ActivityObjectNode", "ActivityActionNode", "ActivityForkNode", "ActivityMergeNode", "UMLRelationshipType", "relationship", "findRelationship", "source", "target", "relationshipType", "relation", "ClassBidirectional", "ClassUnidirectional", "ClassAggregation", "ClassInheritance", "ClassDependency", "ClassComposition", "ActivityControlFlow", "filterInvalidFeedback", "umlModel", "elements", "availableIds", "Object", "values", "map", "el", "id", "relationships", "concat", "rel", "filter", "includes", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r0", "title", "\u0275\u0275element", "\u0275\u0275property", "totalScore", "maxScore", "maxBonusPoints", "course", "\u0275\u0275template", "ModelingAssessmentComponent_Conditional_3_Conditional_3_Template", "ModelingAssessmentComponent_Conditional_3_Conditional_6_Template", "\u0275\u0275conditional", "displayPoints", "faGripLinesVertical", "faGripLines", "explanation", "ModelingAssessmentComponent", "ModelingComponent", "artemisTranslatePipe", "inject", "ArtemisTranslatePipe", "enablePopups", "highlightDifferences", "feedbackChanged", "EventEmitter", "selectionChanged", "highlightedElements", "elementCounts", "resultFeedbacks", "feedback", "feedbacks", "referencedFeedbacks", "filter", "feedbackElement", "reference", "undefined", "updateApollonAssessments", "elementFeedback", "unreferencedFeedbacks", "firstCorrectionRoundColor", "secondCorrectionRoundColor", "constructor", "ngAfterViewInit", "__async", "type", "FeedbackType", "MANUAL_UNREFERENCED", "initializeApollonEditor", "updateHighlightedElements", "updateElementCounts", "applyStateConfiguration", "setupInteract", "ngOnDestroy", "apollonEditor", "destroy", "ngOnChanges", "changes", "umlModel", "currentValue", "model", "handleFeedback", "ApollonEditor", "editorContainer", "nativeElement", "mode", "ApollonMode", "Assessment", "readonly", "readOnly", "diagramType", "UMLDiagramType", "ClassDiagram", "subscribeToSelectionChange", "selection", "emit", "subscribeToAssessmentChange", "assessments", "generateFeedbackFromAssessment", "newElementFeedback", "Map", "assessment", "get", "modelElementId", "credits", "score", "gradingInstruction", "text", "dropInfo", "instruction", "id", "Feedback", "forModeling", "elementType", "set", "values", "filterInvalidFeedback", "updateElementFeedbackMapping", "referenceId", "newElements", "nextRender", "element", "Object", "elements", "highlight", "relationship", "relationships", "newElementCounts", "elementCountMap", "forEach", "elementCount", "elementId", "numberOfOtherElements", "assessmentNote", "calculateNote", "addOrUpdateAssessment", "referenceType", "label", "calculateLabel", "labelColor", "calculateLabelColor", "correctionStatus", "calculateCorrectionStatusForFeedback", "calculateDropInfo", "firstCorrectionRoundText", "transform", "secondCorrectionRoundText", "copiedFeedbackId", "count", "affectedSubmissionsCount", "correctionStatusDescription", "description", "status", "removeMessage", "tooltipMessage", "instructionDescription", "feedbackHint", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ModelingAssessmentComponent_Conditional_3_Template", "ModelingAssessmentComponent_Conditional_9_Template", "ModelingAssessmentComponent_Conditional_11_Template", "ModelingAssessmentComponent_Conditional_12_Template", "\u0275\u0275classProp", "resizeOptions", "horizontalResize", "verticalResize", "ScoreDisplayComponent", "FaIconComponent", "ModelingExplanationEditorComponent", "styles"]
}
