{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/util/security.util.ts", "src/main/webapp/app/entities/programming/build-log.model.ts", "src/main/webapp/app/exercises/shared/feedback/group/feedback-group.ts", "src/main/webapp/app/exercises/shared/feedback/group/feedback-groups.ts", "src/main/webapp/app/exercises/shared/feedback/item/feedback-item-service.ts", "src/main/webapp/app/entities/programming/static-code-analysis-issue.model.ts", "src/main/webapp/app/exercises/shared/feedback/group/programming-feedback-groups.ts", "src/main/webapp/app/exercises/shared/feedback/item/programming-feedback-item.service.ts", "src/main/webapp/app/exercises/shared/feedback/feedback.service.ts", "src/main/webapp/app/exercises/shared/feedback/chart/feedback-chart.service.ts", "src/main/webapp/app/exercises/shared/feedback/text/feedback-text.component.ts", "src/main/webapp/app/exercises/shared/feedback/text/feedback-text.component.html", "src/main/webapp/app/exercises/shared/feedback/collapse/feedback-collapse.component.ts", "src/main/webapp/app/exercises/shared/feedback/collapse/feedback-collapse.component.html", "src/main/webapp/app/exercises/shared/feedback/node/feedback-node.component.ts", "src/main/webapp/app/exercises/shared/feedback/node/feedback-node.component.html", "src/main/webapp/app/exercises/shared/feedback/feedback.component.ts", "src/main/webapp/app/exercises/shared/feedback/feedback.component.html"],
  "sourcesContent": ["export const safeUnescape = (s: string) => {\r\n    const parser = new DOMParser();\r\n    return parser.parseFromString(s, 'text/html').body.textContent;\r\n};\r\n", "import { safeUnescape } from 'app/shared/util/security.util';\r\nimport { Annotation } from 'app/exercises/programming/shared/code-editor/monaco/code-editor-monaco.component';\r\nimport { ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\n\r\nexport enum BuildLogType {\r\n    ERROR = 'ERROR',\r\n    WARNING = 'WARNING',\r\n    OTHER = 'OTHER',\r\n}\r\n\r\nexport type BuildLogEntry = {\r\n    time: any;\r\n    log: string;\r\n    type?: BuildLogType;\r\n};\r\n\r\n// flag(error, warning),filePath,fileName,line,row,error\r\ntype ParsedLogEntry = [string, string, string, string, string, string];\r\n\r\n/**\r\n * Wrapper class for build log output.\r\n */\r\nexport class BuildLogEntryArray extends Array<BuildLogEntry> {\r\n    private mavenErrorLogRegex = /\\[?(ERROR)?\\]?.*\\/?(src\\/.+):\\[(\\d+),(\\d+)\\]\\s(.*$)/;\r\n    private gradleErrorLogRegex = /(src\\/.+):(\\d+)():\\s(error:)\\s(.*$)/;\r\n    private swiftErrorLogRegex = /.*\\/?(Sources\\/.+):(\\d+):(\\d+):\\s(error:)(.*$)/;\r\n\r\n    /**\r\n     * Factory method for creating an instance of the class. Prefer this method over the default constructor.\r\n     *\r\n     * @param buildLogs BuildLogEntry[]\r\n     */\r\n    static fromBuildLogs(buildLogs: BuildLogEntry[]) {\r\n        const mappedLogs = buildLogs.map(({ log, ...rest }) => {\r\n            let logType = BuildLogType.OTHER;\r\n            if (log) {\r\n                if (log.trimStart().startsWith('[ERROR]')) {\r\n                    logType = BuildLogType.ERROR;\r\n                } else if (log.trimStart().startsWith('WARNING')) {\r\n                    logType = BuildLogType.WARNING;\r\n                }\r\n            }\r\n            return {\r\n                log,\r\n                type: logType,\r\n                ...rest,\r\n            };\r\n        });\r\n        return new BuildLogEntryArray(...mappedLogs);\r\n    }\r\n\r\n    /**\r\n     * Filters compilation errors from build log.\r\n     * Safely unescapes messages within the build log to avoid vulnerability to injection.\r\n     *\r\n     */\r\n    extractErrors(programmingLanguage?: ProgrammingLanguage, projectType?: ProjectType): Array<Annotation> {\r\n        let errorLogRegex: RegExp;\r\n        // TODO: implement build error regex for other programming languages\r\n        if (programmingLanguage === ProgrammingLanguage.SWIFT) {\r\n            errorLogRegex = this.swiftErrorLogRegex;\r\n        } else if (projectType === ProjectType.PLAIN_GRADLE || projectType === ProjectType.GRADLE_GRADLE) {\r\n            errorLogRegex = this.gradleErrorLogRegex;\r\n        } else {\r\n            errorLogRegex = this.mavenErrorLogRegex;\r\n        }\r\n        return Array.from(\r\n            this\r\n                // Parse build logs\r\n                .map(({ log, time }) => ({ log: log.split('\\n', 1)[0].trim().match(errorLogRegex), time }))\r\n                // Remove entries that could not be parsed, are too short or not errors\r\n                .filter(({ log }: { log: ParsedLogEntry | null; time: string }) => {\r\n                    // Java logs do not always contain \"ERROR\"\r\n                    return log && log.length === 6 && (log[0]?.includes(':[') || log[1] === 'ERROR' || log[4] === 'error:');\r\n                })\r\n                // Sort entries to fit a standard format\r\n                .map(({ log, time }) => {\r\n                    const sortedLog = [...log!];\r\n                    if (programmingLanguage === ProgrammingLanguage.SWIFT || projectType === ProjectType.PLAIN_GRADLE || projectType === ProjectType.GRADLE_GRADLE) {\r\n                        const errorIndicator = sortedLog!.splice(sortedLog!.indexOf('error:'), 1)[0];\r\n                        sortedLog.unshift(errorIndicator);\r\n                    }\r\n                    return { log: sortedLog, time };\r\n                })\r\n                // Map buildLogEntries into annotation format\r\n                .map(({ log: [, , fileName, row, column, text], time }: { log: ParsedLogEntry; time: string }) => ({\r\n                    type: 'error',\r\n                    fileName,\r\n                    row: Math.max(parseInt(row, 10) - 1, 0),\r\n                    column: Math.max(parseInt(column, 10) - 1, 0),\r\n                    text: safeUnescape(text) || '',\r\n                    timestamp: Date.parse(time),\r\n                })),\r\n        );\r\n    }\r\n}\r\n", "import { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { FeedbackColor, FeedbackNode } from 'app/exercises/shared/feedback/node/feedback-node';\r\n\r\n/*\r\n * A group of FeedbackItems as in the composite pattern.\r\n * NOTE: The following definition does not enforce that each group is disjunctive from each other\r\n */\r\nexport abstract class FeedbackGroup implements FeedbackNode {\r\n    name: string;\r\n    members: FeedbackItem[] = [];\r\n    credits: number;\r\n    maxCredits?: number;\r\n    color?: FeedbackColor;\r\n    /**\r\n     * Whether the detail is open by default\r\n     */\r\n    open = false;\r\n\r\n    abstract shouldContain(feedbackItem: FeedbackItem): boolean;\r\n\r\n    /**\r\n     * Adds all feedback items to members and recalculates the credits of this group\r\n     * @param feedbackItems\r\n     */\r\n    addAllItems(feedbackItems: FeedbackItem[]): FeedbackGroup {\r\n        feedbackItems.forEach((item) => (item.color = this.color));\r\n        this.members = [...this.members, ...feedbackItems];\r\n        this.calculateCredits();\r\n        return this;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.members.length === 0;\r\n    }\r\n\r\n    private calculateCredits(): FeedbackGroup {\r\n        this.credits = this.members.filter((item) => item.type !== 'Subsequent').reduce((acc, item) => acc + (item.credits ?? 0), 0);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const isFeedbackGroup = (node: FeedbackNode): node is FeedbackGroup => {\r\n    return (node as FeedbackGroup).members !== undefined;\r\n};\r\n", "import { FeedbackGroup } from 'app/exercises/shared/feedback/group/feedback-group';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\n\r\n/**\r\n * Returns all FeedbackItemGroups for unspecific exercise types in the order, in which they will be displayed\r\n */\r\nexport const getAllFeedbackGroups = (): FeedbackGroup[] => {\r\n    return [new FeedbackGroupWrong(), new FeedbackGroupInfo(), new FeedbackGroupCorrect()];\r\n};\r\n\r\n/**\r\n * Negative credits\r\n */\r\nclass FeedbackGroupWrong extends FeedbackGroup {\r\n    constructor() {\r\n        super();\r\n        this.name = 'wrong';\r\n        this.color = 'danger';\r\n        this.open = true;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        const isNotSubsequentFeedback = feedbackItem.type !== 'Subsequent';\r\n        return feedbackItem.credits !== undefined && feedbackItem.credits < 0 && isNotSubsequentFeedback;\r\n    }\r\n}\r\n\r\n/**\r\n * Credits are 0\r\n */\r\nclass FeedbackGroupInfo extends FeedbackGroup {\r\n    constructor() {\r\n        super();\r\n        this.name = 'info';\r\n        this.color = 'info';\r\n        this.open = false;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        const isSubsequentFeedback = feedbackItem.type === 'Subsequent';\r\n        return (feedbackItem.credits !== undefined && feedbackItem.credits === 0) || isSubsequentFeedback;\r\n    }\r\n}\r\n\r\n/**\r\n * Positive credits\r\n */\r\nclass FeedbackGroupCorrect extends FeedbackGroup {\r\n    constructor() {\r\n        super();\r\n        this.name = 'correct';\r\n        this.color = 'success';\r\n        this.open = false;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        const isNotSubsequentFeedback = feedbackItem.type !== 'Subsequent';\r\n        return feedbackItem.credits !== undefined && feedbackItem.credits > 0 && isNotSubsequentFeedback;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { FeedbackNode } from 'app/exercises/shared/feedback/node/feedback-node';\r\nimport { getAllFeedbackGroups } from 'app/exercises/shared/feedback/group/feedback-groups';\r\nimport { FeedbackGroup } from 'app/exercises/shared/feedback/group/feedback-group';\r\n\r\nexport interface FeedbackItemService {\r\n    /**\r\n     * Creates a feedback item with a name, title and text for each feedback object.\r\n     * @param feedbacks The list of feedback objects.\r\n     * @param showTestDetails\r\n     */\r\n    create(feedbacks: Feedback[], showTestDetails: boolean): FeedbackItem[];\r\n\r\n    /**\r\n     * Uses {@link FeedbackGroup} predicate shouldContain and adds all that fulfill this predicate to its group\r\n     * @param feedbackItems to be added to groups\r\n     * @param exercise containing information needed to configure the {@link FeedbackGroup}\r\n     */\r\n    group(feedbackItems: FeedbackItem[], exercise: Exercise): FeedbackNode[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeedbackItemServiceImpl implements FeedbackItemService {\r\n    private translateService = inject(TranslateService);\r\n\r\n    create(feedbacks: Feedback[], showTestDetails: boolean): FeedbackItem[] {\r\n        return feedbacks.map((feedback) => this.createFeedbackItem(feedback, showTestDetails));\r\n    }\r\n\r\n    group(feedbackItems: FeedbackItem[]): FeedbackNode[] {\r\n        const feedbackGroups = getAllFeedbackGroups() //\r\n            .map((group: FeedbackGroup) => group.addAllItems(feedbackItems.filter(group.shouldContain)))\r\n            .filter((group: FeedbackGroup) => !group.isEmpty());\r\n\r\n        if (feedbackGroups.length === 1) {\r\n            feedbackGroups[0].open = true;\r\n        }\r\n\r\n        return feedbackGroups;\r\n    }\r\n\r\n    private createFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        if (feedback.gradingInstruction) {\r\n            return this.createGradingInstructionFeedbackItem(feedback, showTestDetails);\r\n        }\r\n\r\n        return {\r\n            type: 'Reviewer',\r\n            name: this.translateService.instant('artemisApp.result.detail.feedback'),\r\n            title: feedback.text,\r\n            text: feedback.detailText,\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item for a manual feedback where the tutor used a grading instruction.\r\n     * @param feedback The manual feedback where a grading instruction was used.\r\n     * @param showTestDetails\r\n     */\r\n    private createGradingInstructionFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        const gradingInstruction = feedback.gradingInstruction!;\r\n\r\n        return {\r\n            type: feedback.isSubsequent ? 'Subsequent' : 'Reviewer',\r\n            name: showTestDetails ? this.translateService.instant('artemisApp.course.reviewer') : this.translateService.instant('artemisApp.result.detail.feedback'),\r\n            title: feedback.text,\r\n            text: gradingInstruction.feedback + (feedback.detailText ? `\\n${feedback.detailText}` : ''),\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n}\r\n", "import { Feedback } from 'app/entities/feedback.model';\r\n\r\nexport class StaticCodeAnalysisIssue {\r\n    public filePath: string;\r\n    public startLine: number;\r\n    public endLine: number;\r\n    public startColumn?: number;\r\n    public endColumn?: number;\r\n    public rule: string;\r\n    public category: string;\r\n    public message: string;\r\n    public priority: string;\r\n    public penalty?: number;\r\n\r\n    static fromFeedback(feedback: Feedback): StaticCodeAnalysisIssue {\r\n        return JSON.parse(feedback.detailText!);\r\n    }\r\n}\r\n", "import { FeedbackGroup } from 'app/exercises/shared/feedback/group/feedback-group';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\n\r\n/**\r\n * Returns all FeedbackItemGroups for Programming exercises in the order, in which they will be displayed\r\n */\r\nexport const getAllFeedbackGroups = (exercise: Exercise): FeedbackGroup[] => {\r\n    return [new ProgrammingFeedbackGroupWrong(), new ProgrammingFeedbackGroupWarning(exercise), new ProgrammingFeedbackGroupInfo(), new ProgrammingFeedbackGroupCorrect()];\r\n};\r\n\r\n/**\r\n * Negative feedbacks that are not SCA\r\n */\r\nclass ProgrammingFeedbackGroupWrong extends FeedbackGroup {\r\n    constructor() {\r\n        super();\r\n        this.name = 'wrong';\r\n        this.color = 'danger';\r\n        this.open = true;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        const isReviewerFeedback = feedbackItem.type === 'Reviewer' && feedbackItem.credits !== undefined && feedbackItem.credits < 0;\r\n        const isTestFeedback = feedbackItem.type === 'Test';\r\n        const isFailedTest = feedbackItem.positive === false || (feedbackItem.positive === undefined && feedbackItem.credits === 0);\r\n        return isReviewerFeedback || (isTestFeedback && isFailedTest);\r\n    }\r\n}\r\n\r\n/**\r\n * - Negative feedbacks that are SCA\r\n * - Submission policy\r\n */\r\nclass ProgrammingFeedbackGroupWarning extends FeedbackGroup {\r\n    constructor(exercise: Exercise) {\r\n        super();\r\n        this.name = 'warning';\r\n        this.color = 'warning';\r\n\r\n        const programmingExercise = exercise as ProgrammingExercise;\r\n        this.maxCredits = programmingExercise.maxStaticCodeAnalysisPenalty && programmingExercise.maxStaticCodeAnalysisPenalty * programmingExercise.maxPoints!;\r\n        this.open = true;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        return feedbackItem.type === 'Static Code Analysis' || feedbackItem.type === 'Submission Policy';\r\n    }\r\n}\r\n\r\n/**\r\n * - Reviewer feedback with no influence on grade\r\n * - Subsequent feedback\r\n */\r\nclass ProgrammingFeedbackGroupInfo extends FeedbackGroup {\r\n    constructor() {\r\n        super();\r\n        this.name = 'info';\r\n        this.color = 'info';\r\n        this.open = false;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        const isReviewerFeedback = feedbackItem.type === 'Reviewer' && feedbackItem.credits === 0;\r\n        const isSubsequentFeedback = feedbackItem.type === 'Subsequent';\r\n        return isReviewerFeedback || isSubsequentFeedback;\r\n    }\r\n}\r\n\r\n/**\r\n * - Positive from Reviewer\r\n * - Positive from Test cases\r\n */\r\nclass ProgrammingFeedbackGroupCorrect extends FeedbackGroup {\r\n    constructor() {\r\n        super();\r\n        this.name = 'correct';\r\n        this.color = 'success';\r\n        this.open = false;\r\n    }\r\n\r\n    shouldContain(feedbackItem: FeedbackItem): boolean {\r\n        const isReviewerFeedback = feedbackItem.type === 'Reviewer' && feedbackItem.credits !== undefined && feedbackItem.credits > 0;\r\n        const isTestFeedback = feedbackItem.type === 'Test';\r\n        const isSuccessfulTest = feedbackItem.positive === true || (feedbackItem.positive === undefined && !!feedbackItem.credits);\r\n        return isReviewerFeedback || (isTestFeedback && isSuccessfulTest);\r\n    }\r\n}\r\n", "import { FeedbackItemService } from 'app/exercises/shared/feedback/item/feedback-item-service';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport {\r\n    FEEDBACK_SUGGESTION_ACCEPTED_IDENTIFIER,\r\n    FEEDBACK_SUGGESTION_ADAPTED_IDENTIFIER,\r\n    FEEDBACK_SUGGESTION_IDENTIFIER,\r\n    Feedback,\r\n    FeedbackType,\r\n    NON_GRADED_FEEDBACK_SUGGESTION_IDENTIFIER,\r\n    STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER,\r\n    SUBMISSION_POLICY_FEEDBACK_IDENTIFIER,\r\n} from 'app/entities/feedback.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { StaticCodeAnalysisIssue } from 'app/entities/programming/static-code-analysis-issue.model';\r\nimport { getAllFeedbackGroups } from 'app/exercises/shared/feedback/group/programming-feedback-groups';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { FeedbackNode } from 'app/exercises/shared/feedback/node/feedback-node';\r\nimport { FeedbackGroup } from 'app/exercises/shared/feedback/group/feedback-group';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingFeedbackItemService implements FeedbackItemService {\r\n    private translateService = inject(TranslateService);\r\n\r\n    create(feedbacks: Feedback[], showTestDetails: boolean): FeedbackItem[] {\r\n        return feedbacks.map((feedback) => this.createFeedbackItem(feedback, showTestDetails));\r\n    }\r\n\r\n    group(feedbackItems: FeedbackItem[], exercise: Exercise): FeedbackNode[] {\r\n        const feedbackGroups = getAllFeedbackGroups(exercise)\r\n            .map((group: FeedbackGroup) => group.addAllItems(feedbackItems.filter(group.shouldContain)))\r\n            .filter((group: FeedbackGroup) => !group.isEmpty());\r\n\r\n        if (feedbackGroups.length === 1) {\r\n            feedbackGroups[0].open = true;\r\n        }\r\n\r\n        return feedbackGroups;\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item for feedback received for a programming exercise.\r\n     * @param feedback The feedback from which the feedback item should be created.\r\n     * @param showTestDetails\r\n     */\r\n    private createFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        if (Feedback.isSubmissionPolicyFeedback(feedback)) {\r\n            return this.createSubmissionPolicyFeedbackItem(feedback);\r\n        } else if (Feedback.isStaticCodeAnalysisFeedback(feedback)) {\r\n            return this.createScaFeedbackItem(feedback, showTestDetails);\r\n        } else if (Feedback.isFeedbackSuggestion(feedback)) {\r\n            return this.createFeedbackSuggestionItem(feedback, showTestDetails);\r\n        } else if (feedback.type === FeedbackType.AUTOMATIC && !Feedback.isNonGradedFeedbackSuggestion(feedback)) {\r\n            return this.createAutomaticFeedbackItem(feedback, showTestDetails);\r\n        } else if (feedback.type === FeedbackType.AUTOMATIC && Feedback.isNonGradedFeedbackSuggestion(feedback)) {\r\n            return this.createNonGradedFeedbackItem(feedback);\r\n        } else if ((feedback.type === FeedbackType.MANUAL || feedback.type === FeedbackType.MANUAL_UNREFERENCED) && feedback.gradingInstruction) {\r\n            return this.createGradingInstructionFeedbackItem(feedback, showTestDetails);\r\n        } else {\r\n            return this.createReviewerFeedbackItem(feedback, showTestDetails);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item from a submission policy feedback.\r\n     * @param feedback The submission policy feedback.\r\n     */\r\n    private createSubmissionPolicyFeedbackItem(feedback: Feedback): FeedbackItem {\r\n        const submissionPolicyTitle = feedback.text!.substring(SUBMISSION_POLICY_FEEDBACK_IDENTIFIER.length);\r\n\r\n        return {\r\n            color: 'primary',\r\n            type: 'Submission Policy',\r\n            name: this.translateService.instant('artemisApp.programmingExercise.submissionPolicy.title'),\r\n            title: submissionPolicyTitle,\r\n            text: feedback.detailText,\r\n            positive: false,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item from a feedback generated from static code analysis.\r\n     * @param feedback A static code analysis feedback.\r\n     * @param showTestDetails\r\n     */\r\n    private createScaFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        const scaCategory = feedback.text!.substring(STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER.length);\r\n        const scaIssue = StaticCodeAnalysisIssue.fromFeedback(feedback);\r\n        const text = showTestDetails ? `${scaIssue.rule}: ${scaIssue.message}` : scaIssue.message;\r\n\r\n        return {\r\n            type: 'Static Code Analysis',\r\n            name: this.translateService.instant('artemisApp.result.detail.codeIssue.name'),\r\n            title: this.translateService.instant('artemisApp.result.detail.codeIssue.title', {\r\n                scaCategory,\r\n                location: this.getIssueLocation(scaIssue),\r\n            }),\r\n            text,\r\n            positive: false,\r\n            credits: scaIssue.penalty ? -scaIssue.penalty : feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item from a feedback suggestion.\r\n     * @param feedback The feedback suggestion.\r\n     * @param showTestDetails\r\n     */\r\n    private createFeedbackSuggestionItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        // A feedback suggestion should look like a manual feedback\r\n        let titleWithoutIdentifier = feedback.text ?? '';\r\n        // Remove prefix if it exists\r\n        for (const prefix of [FEEDBACK_SUGGESTION_ACCEPTED_IDENTIFIER, FEEDBACK_SUGGESTION_ADAPTED_IDENTIFIER, FEEDBACK_SUGGESTION_IDENTIFIER]) {\r\n            if (titleWithoutIdentifier.startsWith(prefix)) {\r\n                titleWithoutIdentifier = titleWithoutIdentifier.substring(prefix.length);\r\n                break;\r\n            }\r\n        }\r\n        return {\r\n            type: 'Reviewer', // Treat it like normal feedback from the TA\r\n            name: showTestDetails ? this.translateService.instant('artemisApp.course.reviewer') : this.translateService.instant('artemisApp.result.detail.feedback'),\r\n            title: titleWithoutIdentifier,\r\n            text: feedback.detailText,\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item from a feedback generated from an automatic test case result.\r\n     * @param feedback A feedback received from an automatic test case.\r\n     * @param showTestDetails\r\n     */\r\n    private createAutomaticFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        let title = undefined;\r\n        if (showTestDetails && feedback.testCase?.testName) {\r\n            if (feedback.positive === undefined) {\r\n                title = this.translateService.instant('artemisApp.result.detail.test.noInfo', { name: feedback.testCase.testName });\r\n            } else {\r\n                title = feedback.positive\r\n                    ? this.translateService.instant('artemisApp.result.detail.test.passed', { name: feedback.testCase.testName })\r\n                    : this.translateService.instant('artemisApp.result.detail.test.failed', { name: feedback.testCase.testName });\r\n            }\r\n        }\r\n        return {\r\n            type: 'Test',\r\n            name: this.translateService.instant('artemisApp.result.detail.test.name'),\r\n            title,\r\n            text: feedback.detailText,\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    private createNonGradedFeedbackItem(feedback: Feedback): FeedbackItem {\r\n        return {\r\n            type: 'Reviewer',\r\n            name: this.translateService.instant('artemisApp.result.detail.feedback'),\r\n            title: feedback.text?.slice(NON_GRADED_FEEDBACK_SUGGESTION_IDENTIFIER.length),\r\n            text: feedback.detailText,\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item for a manual feedback where the tutor used a grading instruction.\r\n     * @param feedback The manual feedback where a grading instruction was used.\r\n     * @param showTestDetails\r\n     */\r\n    private createGradingInstructionFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        const gradingInstruction = feedback.gradingInstruction!;\r\n\r\n        return {\r\n            type: feedback.isSubsequent ? 'Subsequent' : 'Reviewer',\r\n            name: showTestDetails ? this.translateService.instant('artemisApp.course.reviewer') : this.translateService.instant('artemisApp.result.detail.feedback'),\r\n            title: feedback.text,\r\n            text: gradingInstruction.feedback + (feedback.detailText ? `\\n${feedback.detailText}` : ''),\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a feedback item for a regular reviewer feedback not using a grading instruction.\r\n     * @param feedback The manual feedback from which the feedback item should be created.\r\n     * @param showTestDetails\r\n     */\r\n    private createReviewerFeedbackItem(feedback: Feedback, showTestDetails: boolean): FeedbackItem {\r\n        return {\r\n            type: 'Reviewer',\r\n            name: showTestDetails ? this.translateService.instant('artemisApp.course.reviewer') : this.translateService.instant('artemisApp.result.detail.feedback'),\r\n            title: feedback.text,\r\n            text: feedback.detailText,\r\n            positive: feedback.positive,\r\n            credits: feedback.credits,\r\n            feedbackReference: feedback,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Builds the location string for a static code analysis issue\r\n     * @param issue The sca issue\r\n     */\r\n    private getIssueLocation(issue: StaticCodeAnalysisIssue): string {\r\n        const lineText =\r\n            !issue.endLine || issue.startLine === issue.endLine\r\n                ? this.translateService.instant('artemisApp.result.detail.codeIssue.line', { line: issue.startLine })\r\n                : this.translateService.instant('artemisApp.result.detail.codeIssue.lines', {\r\n                      from: issue.startLine,\r\n                      to: issue.endLine,\r\n                  });\r\n        if (issue.startColumn) {\r\n            const columnText =\r\n                !issue.endColumn || issue.startColumn === issue.endColumn\r\n                    ? this.translateService.instant('artemisApp.result.detail.codeIssue.column', { column: issue.startColumn })\r\n                    : this.translateService.instant('artemisApp.result.detail.codeIssue.columns', {\r\n                          from: issue.startColumn,\r\n                          to: issue.endColumn,\r\n                      });\r\n            return `${issue.filePath} ${lineText} ${columnText}`;\r\n        }\r\n        return `${issue.filePath} ${lineText}`;\r\n    }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeedbackService extends BaseApiHttpService {\r\n    /**\r\n     * Filters the feedback based on the filter input\r\n     * Used e.g. when we want to show certain test cases viewed from the exercise description\r\n     * @param feedbacks The full list of feedback\r\n     * @param filter an array of test case ids that the feedback needs to contain in its testcase.id attribute.\r\n     */\r\n    public filterFeedback = (feedbacks: Feedback[], filter: number[]): Feedback[] => {\r\n        if (!filter) {\r\n            return [...feedbacks];\r\n        }\r\n        return feedbacks.filter((feedback) => feedback.testCase?.id && filter.includes(feedback.testCase.id));\r\n    };\r\n\r\n    public async getLongFeedbackText(feedbackId: number): Promise<string> {\r\n        const url = `assessment/feedbacks/${feedbackId}/long-feedback`;\r\n        return await this.get<string>(url, { responseType: 'text' });\r\n    }\r\n}\r\n", "import { Color, ScaleType } from '@swimlane/ngx-charts';\r\nimport { NgxChartsMultiSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { FeedbackNode } from 'app/exercises/shared/feedback/node/feedback-node';\r\nimport { Exercise, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { roundScorePercentSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { Injectable } from '@angular/core';\r\nimport { ChartData } from 'app/exercises/shared/feedback/chart/feedback-chart-data';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeedbackChartService {\r\n    create = (feedbackNodes: FeedbackNode[], exercise: Exercise): ChartData => {\r\n        const summarizedNodes = this.summarizePoints(feedbackNodes);\r\n        const results: NgxChartsMultiSeriesDataEntry[] = [\r\n            {\r\n                name: 'scores',\r\n                series: summarizedNodes.map((node: FeedbackNode) => ({\r\n                    name: node.name,\r\n                    value: this.calculatePercentage(node, exercise),\r\n                })),\r\n            },\r\n        ];\r\n        const scheme: Color = {\r\n            name: 'Feedback Detail',\r\n            selectable: true,\r\n            group: ScaleType.Ordinal,\r\n            domain: summarizedNodes.map((node) => `var(--bs-${node.color})`),\r\n        };\r\n\r\n        return {\r\n            xScaleMax: 100,\r\n            results,\r\n            scheme,\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Subtracts negative credits from positive ones. This is to make space for the visualization of point deductions\r\n     * @param feedbackNodes\r\n     * @return An array with feedback items in the following order: [...positive, ...neutral, ...negative]\r\n     */\r\n    private summarizePoints = (feedbackNodes: FeedbackNode[]): FeedbackNode[] => {\r\n        const [positive, neutral, negative] = this.separateByCredits(feedbackNodes.slice());\r\n        const sumPositive = this.sumCredits(positive);\r\n        const sumNegative = this.sumCredits(negative);\r\n\r\n        if (sumPositive + sumNegative < 0) {\r\n            return this.clearCredits(feedbackNodes);\r\n        }\r\n\r\n        const positiveSubtracted = this.subtractCredits(positive, sumNegative);\r\n\r\n        return [...positiveSubtracted, ...neutral, ...this.absCredits(negative)];\r\n    };\r\n\r\n    private subtractCredits = (feedbackNodes: FeedbackNode[], subtrahend: number): FeedbackNode[] => {\r\n        return feedbackNodes.map((node) => {\r\n            let credits = 0;\r\n            const current = node.credits ?? 0;\r\n            if (current + subtrahend >= 0) {\r\n                credits = current + subtrahend;\r\n            }\r\n\r\n            subtrahend = Math.min(subtrahend + current, 0);\r\n\r\n            return {\r\n                ...node,\r\n                credits,\r\n            };\r\n        });\r\n    };\r\n\r\n    /*\r\n     * Separates a list of feedback nodes by node credits. Has runtime of O(3n)\r\n     * @param feedbackNodes\r\n     * @return Tuple with values [Positive, Neutral, Negative]\r\n     */\r\n    private separateByCredits = (feedbackNodes: FeedbackNode[]): [FeedbackNode[], FeedbackNode[], FeedbackNode[]] => {\r\n        return [\r\n            feedbackNodes.filter((node) => (node.credits ?? 0) > 0),\r\n            feedbackNodes.filter((node) => (node.credits ?? 0) === 0),\r\n            feedbackNodes.filter((node) => (node.credits ?? 0) < 0),\r\n        ];\r\n    };\r\n\r\n    private sumCredits = (feedbackNodes: FeedbackNode[]) => {\r\n        return feedbackNodes.reduce((acc, node) => (node.credits ?? 0) + acc, 0);\r\n    };\r\n\r\n    /*\r\n     * Sets credits in nodes to absolute value\r\n     */\r\n    private absCredits = (feedbackNodes: FeedbackNode[]) => {\r\n        return feedbackNodes.map((node) => ({\r\n            ...node,\r\n            credits: Math.abs(node.credits ?? 0),\r\n        }));\r\n    };\r\n\r\n    /*\r\n     * Sets credits to 0 for all feedback nodes\r\n     */\r\n    private clearCredits = (feedbackNodes: FeedbackNode[]) => {\r\n        return feedbackNodes.map((node) => ({\r\n            ...node,\r\n            credits: 0,\r\n        }));\r\n    };\r\n\r\n    private capCredits = (credits: number, maxCredits?: number): number => {\r\n        // no maxCredits or credits and maxCredits do not have the same sign;\r\n        if (!maxCredits || credits * maxCredits < 0) {\r\n            return credits;\r\n        }\r\n\r\n        const absCredits = Math.abs(credits);\r\n        const absMaxCredits = Math.abs(maxCredits);\r\n        return Math.sign(credits) * Math.min(absCredits, absMaxCredits);\r\n    };\r\n\r\n    private calculatePercentage = (node: FeedbackNode, exercise: Exercise) => {\r\n        const appliedCredits = this.capCredits(node.credits ?? 0, node.maxCredits);\r\n        return roundScorePercentSpecifiedByCourseSettings(appliedCredits / exercise.maxPoints!, getCourseFromExercise(exercise));\r\n    };\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { LongFeedbackTextService } from 'app/exercises/shared/feedback/long-feedback-text.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-text',\r\n    styleUrls: ['./feedback-text.scss'],\r\n    templateUrl: './feedback-text.component.html',\r\n    imports: [TranslateDirective],\r\n})\r\nexport class FeedbackTextComponent implements OnInit {\r\n    private longFeedbackService = inject(LongFeedbackTextService);\r\n\r\n    private readonly MAX_DISPLAYABLE_LENGTH = 20_000;\r\n\r\n    @Input() feedback: FeedbackItem;\r\n\r\n    text?: string;\r\n\r\n    downloadText?: string;\r\n    downloadFilename?: string;\r\n\r\n    ngOnInit(): void {\r\n        this.text = this.feedback.text ?? '';\r\n\r\n        if (this.feedback.feedbackReference.hasLongFeedbackText) {\r\n            this.loadLongFeedback();\r\n        }\r\n    }\r\n\r\n    private loadLongFeedback() {\r\n        if (this.feedback.feedbackReference.id) {\r\n            const feedbackId = this.feedback.feedbackReference.id;\r\n\r\n            this.longFeedbackService.find(feedbackId).subscribe((longFeedbackResponse) => {\r\n                const longFeedback = longFeedbackResponse.body!;\r\n                const textLength = longFeedback.length ?? 0;\r\n\r\n                if (textLength > this.MAX_DISPLAYABLE_LENGTH) {\r\n                    this.setDownloadInfo(longFeedback);\r\n                } else {\r\n                    this.text = longFeedback;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setDownloadInfo(longFeedback: string) {\r\n        this.downloadText = 'data:text/plain;charset=utf-8,' + encodeURIComponent(longFeedback);\r\n        this.downloadFilename = `feedback_${this.feedback.feedbackReference.id}.txt`;\r\n    }\r\n}\r\n", "@if (downloadText) {\r\n    <div>\r\n        <span jhiTranslate=\"artemisApp.feedback.truncatedInfo\"></span>\r\n        <a [href]=\"downloadText\" [download]=\"downloadFilename\" jhiTranslate=\"artemisApp.feedback.downloadFullFeedback\"></a>\r\n    </div>\r\n}\r\n<br />\r\n<div class=\"feedback-text\">\r\n    <p>{{ text }}</p>\r\n</div>\r\n", "import { Component, Input, OnInit } from '@angular/core';\r\nimport { faAngleDown, faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FeedbackTextComponent } from '../text/feedback-text.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-collapse',\r\n    styleUrls: ['./feedback-collapse.scss'],\r\n    templateUrl: './feedback-collapse.component.html',\r\n    imports: [FaIconComponent, FeedbackTextComponent, ArtemisTranslatePipe],\r\n})\r\n/**\r\n * smallCharacterLimit can be adjusted make smaller or bigger items collapsable\r\n * isCollapsed tracks whether an item is currently open or closed\r\n * text is any string passed to the component\r\n */\r\nexport class FeedbackCollapseComponent implements OnInit {\r\n    /**\r\n     * Number of chars at which the text will be cut and the collapse functionality is enabled\r\n     */\r\n    readonly FEEDBACK_PREVIEW_CHARACTER_LIMIT = 300;\r\n\r\n    @Input() feedback: FeedbackItem;\r\n    previewText?: string;\r\n    isCollapsed = true;\r\n\r\n    // Icons\r\n    faAngleDown = faAngleDown;\r\n    faAngleRight = faAngleRight;\r\n\r\n    debounceToggleCollapse = BaseApiHttpService.debounce(this.toggleCollapse.bind(this), 200);\r\n\r\n    ngOnInit(): void {\r\n        this.previewText = this.computeFeedbackPreviewText(this.feedback.text);\r\n    }\r\n\r\n    /**\r\n     * Computes the feedback preview for feedback texts with multiple lines or feedback that is longer than {@link FEEDBACK_PREVIEW_CHARACTER_LIMIT} characters.\r\n     * @param text The feedback detail text.\r\n     * @return One line of text with at most {@link FEEDBACK_PREVIEW_CHARACTER_LIMIT} characters.\r\n     */\r\n    private computeFeedbackPreviewText(text?: string): string | undefined {\r\n        if (this.feedback.feedbackReference.hasLongFeedbackText) {\r\n            return text?.slice(0, this.FEEDBACK_PREVIEW_CHARACTER_LIMIT);\r\n        }\r\n\r\n        if (!text || text.length < this.FEEDBACK_PREVIEW_CHARACTER_LIMIT) {\r\n            return undefined;\r\n        }\r\n\r\n        if (text.includes('\\n')) {\r\n            // if there are multiple lines, only use the first one\r\n            const firstLine = text.slice(0, text.indexOf('\\n'));\r\n            return firstLine.slice(0, this.FEEDBACK_PREVIEW_CHARACTER_LIMIT);\r\n        }\r\n\r\n        return text.slice(0, this.FEEDBACK_PREVIEW_CHARACTER_LIMIT);\r\n    }\r\n\r\n    toggleCollapse(): void {\r\n        this.isCollapsed = !this.isCollapsed;\r\n    }\r\n}\r\n", "<div class=\"feedback-text\">\r\n    @if (!previewText) {\r\n        <p>{{ feedback.text }}</p>\r\n    } @else {\r\n        @if (isCollapsed) {\r\n            <div>\r\n                <div class=\"d-inline fa-angle\" (click)=\"debounceToggleCollapse()\">\r\n                    <fa-icon [icon]=\"faAngleRight\" />\r\n                    <strong> ({{ 'artemisApp.result.seeMore' | artemisTranslate }}) </strong>\r\n                </div>\r\n                <!-- Only show first line as preview -->\r\n                <p>{{ previewText }}</p>\r\n            </div>\r\n        } @else {\r\n            <div>\r\n                <fa-icon class=\"fa-angle\" [icon]=\"faAngleDown\" (click)=\"debounceToggleCollapse()\" />\r\n                <jhi-feedback-text [feedback]=\"feedback\" />\r\n            </div>\r\n        }\r\n    }\r\n</div>\r\n", "import { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { faAngleDown, faAngleUp, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FeedbackGroup, isFeedbackGroup } from 'app/exercises/shared/feedback/group/feedback-group';\r\nimport { FeedbackItem } from 'app/exercises/shared/feedback/item/feedback-item';\r\nimport { FeedbackNode } from 'app/exercises/shared/feedback/node/feedback-node';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FeedbackCollapseComponent } from '../collapse/feedback-collapse.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-feedback-node',\r\n    templateUrl: './feedback-node.component.html',\r\n    styleUrls: ['./feedback-node.scss'],\r\n    imports: [NgClass, FaIconComponent, NgbTooltip, FeedbackCollapseComponent, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class FeedbackNodeComponent implements OnInit {\r\n    readonly roundValueSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n\r\n    @Input() feedbackItemNode: FeedbackNode;\r\n    @Input() course?: Course;\r\n\r\n    // This is a workaround for type safety in the template\r\n    feedbackItem: FeedbackItem;\r\n    feedbackItemGroup: FeedbackGroup;\r\n\r\n    // Icons\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    faAngleUp = faAngleUp;\r\n    faAngleDown = faAngleDown;\r\n\r\n    ngOnInit(): void {\r\n        if (isFeedbackGroup(this.feedbackItemNode)) {\r\n            this.feedbackItemGroup = this.feedbackItemNode;\r\n        } else {\r\n            this.feedbackItem = this.feedbackItemNode as FeedbackItem;\r\n        }\r\n    }\r\n}\r\n", "@if (feedbackItem) {\r\n    <div class=\"alert feedback-item\" [ngClass]=\"'alert-' + feedbackItem.color\">\r\n        <div class=\"feedback-item__header\">\r\n            <h4 class=\"feedback-item__category\">{{ feedbackItem.name }} {{ feedbackItem.title && '· ' + feedbackItem.title }}</h4>\r\n            @if (feedbackItem.credits) {\r\n                <span class=\"fw-bold feedback-item__credits\">\r\n                    {{ roundValueSpecifiedByCourseSettings(feedbackItem.credits, course) }}P\r\n                    @if (feedbackItem.type === 'Subsequent') {\r\n                        <fa-icon [icon]=\"faExclamationTriangle\" [ngbTooltip]=\"'artemisApp.assessment.subsequentFeedback' | artemisTranslate\" />\r\n                    }\r\n                </span>\r\n            }\r\n        </div>\r\n        @if (feedbackItem.text) {\r\n            <jhi-feedback-collapse class=\"d-block mt-3\" [feedback]=\"feedbackItem\" />\r\n        }\r\n        <p *ngElse jhiTranslate=\"artemisApp.result.noFeedback\"></p>\r\n    </div>\r\n}\r\n@if (feedbackItemGroup) {\r\n    <div class=\"feedback-item-group\">\r\n        <div class=\"feedback-group\" [ngClass]=\"'bg-' + feedbackItemGroup.color\" (click)=\"feedbackItemGroup.open = !feedbackItemGroup.open\">\r\n            <div class=\"feedback-group__left\">\r\n                <fa-icon class=\"me-2\" [icon]=\"feedbackItemGroup.open ? faAngleUp : faAngleDown\" />\r\n                <h4 class=\"feedback-item__category\">{{ 'artemisApp.feedback.group.' + feedbackItemGroup.name | artemisTranslate }} ({{ feedbackItemGroup.members.length }})</h4>\r\n            </div>\r\n            @if (feedbackItemGroup.credits !== 0) {\r\n                <span class=\"fw-bold\">{{ roundValueSpecifiedByCourseSettings(feedbackItemGroup.credits, course) }}P </span>\r\n            }\r\n        </div>\r\n        @if (feedbackItemGroup.open) {\r\n            <div class=\"mx-3\">\r\n                @for (feedbackItem of feedbackItemGroup.members; track feedbackItem) {\r\n                    <jhi-feedback-node [feedbackItemNode]=\"feedbackItem\" [course]=\"course\" />\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { NgbActiveModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { of, throwError } from 'rxjs';\r\nimport { BuildLogEntry, BuildLogEntryArray, BuildLogType } from 'app/entities/programming/build-log.model';\r\nimport { Feedback, checkSubsequentFeedbackInAssessment } from 'app/entities/feedback.model';\r\nimport { Badge, ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { Exercise, ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { BuildLogService } from 'app/exercises/programming/shared/service/build-log.service';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { createCommitUrl, isProgrammingExerciseParticipation } from 'app/exercises/programming/shared/utils/programming-exercise.utils';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { BarChartModule, LegendPosition, ScaleType } from '@swimlane/ngx-charts';\r\nimport { faCircleNotch, faExclamationTriangle, faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { axisTickFormattingWithPercentageSign } from 'app/shared/statistics-graph/statistics-graph.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { FeedbackItemService, FeedbackItemServiceImpl } from 'app/exercises/shared/feedback/item/feedback-item-service';\r\nimport { ProgrammingFeedbackItemService } from 'app/exercises/shared/feedback/item/programming-feedback-item.service';\r\nimport { FeedbackService } from 'app/exercises/shared/feedback/feedback.service';\r\nimport { evaluateTemplateStatus, isOnlyCompilationTested, isStudentParticipation, resultIsPreliminary } from '../result/result.utils';\r\nimport { FeedbackNode } from 'app/exercises/shared/feedback/node/feedback-node';\r\nimport { ChartData } from 'app/exercises/shared/feedback/chart/feedback-chart-data';\r\nimport { FeedbackChartService } from 'app/exercises/shared/feedback/chart/feedback-chart.service';\r\nimport { isFeedbackGroup } from 'app/exercises/shared/feedback/group/feedback-group';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass, NgTemplateOutlet, UpperCasePipe } from '@angular/common';\r\nimport { FeedbackNodeComponent } from './node/feedback-node.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisTimeAgoPipe } from 'app/shared/pipes/artemis-time-ago.pipe';\r\n\r\n// Modal -> Result details view\r\n@Component({\r\n    selector: 'jhi-result-detail',\r\n    templateUrl: './feedback.component.html',\r\n    styleUrls: ['./feedback.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        FaIconComponent,\r\n        NgClass,\r\n        NgbTooltip,\r\n        BarChartModule,\r\n        NgTemplateOutlet,\r\n        FeedbackNodeComponent,\r\n        UpperCasePipe,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n        ArtemisTimeAgoPipe,\r\n    ],\r\n})\r\nexport class FeedbackComponent implements OnInit, OnChanges {\r\n    private resultService = inject(ResultService);\r\n    private buildLogService = inject(BuildLogService);\r\n    private translateService = inject(TranslateService);\r\n    private profileService = inject(ProfileService);\r\n    private feedbackService = inject(FeedbackService);\r\n    private feedbackChartService = inject(FeedbackChartService);\r\n    private injector = inject(Injector);\r\n    activeModal? = inject(NgbActiveModal, { optional: true });\r\n\r\n    readonly BuildLogType = BuildLogType;\r\n    readonly AssessmentType = AssessmentType;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly resultIsPreliminary = resultIsPreliminary;\r\n    readonly roundValueSpecifiedByCourseSettings = roundValueSpecifiedByCourseSettings;\r\n    readonly xAxisFormatting = axisTickFormattingWithPercentageSign;\r\n\r\n    @Input() exercise?: Exercise;\r\n    @Input() result: Result;\r\n\r\n    /**\r\n     * Specify the feedback.testCase.id values that should be shown, all other values will not be visible.\r\n     * Used to show only feedback related to a specific task.\r\n     */\r\n    @Input() feedbackFilter: number[];\r\n    @Input() showScoreChart = false;\r\n    @Input() exerciseType: ExerciseType;\r\n    /**\r\n     * Translate key for an HTML message that is displayed at the top of the result details, if defined.\r\n     */\r\n    @Input() messageKey?: string = undefined;\r\n    /**\r\n     * For programming exercises with individual due dates automatic feedbacks\r\n     * for tests marked as AFTER_DUE_DATE are hidden until the last student can\r\n     * no longer submit.\r\n     * Students should be informed why some feedbacks seem to be missing from\r\n     * the result.\r\n     */\r\n    @Input() showMissingAutomaticFeedbackInformation = false;\r\n    @Input() latestDueDate?: dayjs.Dayjs;\r\n    @Input() taskName?: string;\r\n    @Input() numberOfNotExecutedTests?: number;\r\n\r\n    @Input() isExamReviewPage = false;\r\n    @Input() isPrinting = false;\r\n\r\n    // Icons\r\n    faXmark = faXmark;\r\n    faCircleNotch = faCircleNotch;\r\n    faExclamationTriangle = faExclamationTriangle;\r\n    private showTestDetails = false;\r\n    isLoading = false;\r\n    loadingFailed = false;\r\n    buildLogs: BuildLogEntryArray;\r\n    course?: Course;\r\n    isOnlyCompilationTested: boolean;\r\n\r\n    commitHashURLTemplate?: string;\r\n    commitHash?: string;\r\n    commitUrl?: string;\r\n\r\n    chartData: ChartData = {\r\n        xScaleMax: 100,\r\n        scheme: {\r\n            name: 'Feedback Detail',\r\n            selectable: true,\r\n            group: ScaleType.Ordinal,\r\n            domain: [GraphColors.GREEN, GraphColors.RED],\r\n        },\r\n        results: [],\r\n    };\r\n    // Static chart settings\r\n    labels: string[];\r\n    legendPosition = LegendPosition.Below;\r\n\r\n    badge: Badge;\r\n\r\n    feedbackItemService: FeedbackItemService;\r\n    feedbackItemNodes: FeedbackNode[];\r\n    /**\r\n     * Used to reset the feedbackItemNodes to the state before printing if {@link isPrinting} changes\r\n     * from true to false\r\n     */\r\n    private feedbackItemNodesBeforePrinting: FeedbackNode[];\r\n\r\n    constructor() {\r\n        const translateService = this.translateService;\r\n\r\n        const pointsLabel = translateService.instant('artemisApp.result.chart.points');\r\n        const deductionsLabel = translateService.instant('artemisApp.result.chart.deductions');\r\n        this.labels = [pointsLabel, deductionsLabel];\r\n    }\r\n\r\n    /**\r\n     * Load the result feedbacks if necessary and assign them to the component.\r\n     * When a result has feedbacks assigned to it, no server call will be executed.\r\n     */\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n\r\n        this.initializeExerciseInformation();\r\n\r\n        this.feedbackItemService = this.exerciseType === ExerciseType.PROGRAMMING ? this.injector.get(ProgrammingFeedbackItemService) : this.injector.get(FeedbackItemServiceImpl);\r\n        this.initFeedbackInformation();\r\n\r\n        this.commitHash = this.getCommitHash().slice(0, 11);\r\n\r\n        this.isOnlyCompilationTested = isOnlyCompilationTested(this.result, evaluateTemplateStatus(this.exercise, this.result.participation, this.result, false));\r\n\r\n        // Get active profiles, to distinguish between VC systems for the commit link of the result\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.commitHashURLTemplate = profileInfo?.commitHashURLTemplate;\r\n            this.commitUrl = this.getCommitUrl(this.result, this.exercise as ProgrammingExercise, this.commitHashURLTemplate);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Expand the feedback items groups while the exam summary is printed and\r\n     * collapse them again (if collapsed before) when the printing is done\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.isPrinting) {\r\n            if (changes.isPrinting.currentValue) {\r\n                this.feedbackItemNodesBeforePrinting = cloneDeep(this.feedbackItemNodes);\r\n                this.expandFeedbackItemGroups();\r\n            } else {\r\n                this.feedbackItemNodes = this.feedbackItemNodesBeforePrinting;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets up the information related to the exercise.\r\n     */\r\n    private initializeExerciseInformation() {\r\n        this.exercise ??= this.result.participation?.exercise;\r\n        if (this.exercise) {\r\n            this.course = getCourseFromExercise(this.exercise);\r\n        }\r\n\r\n        if (!this.exerciseType && this.exercise?.type) {\r\n            this.exerciseType = this.exercise.type;\r\n        }\r\n\r\n        // In case the exerciseType is not set, we try to set it back if the participation is from a programming exercise\r\n        if (!this.exerciseType && isProgrammingExerciseParticipation(this.result?.participation)) {\r\n            this.exerciseType = ExerciseType.PROGRAMMING;\r\n        }\r\n\r\n        this.showTestDetails =\r\n            this.exercise?.isAtLeastTutor || (this.exerciseType === ExerciseType.PROGRAMMING && (this.exercise as ProgrammingExercise)?.showTestNamesToStudents) || false;\r\n    }\r\n\r\n    /**\r\n     * Fetches additional information about feedbacks and build logs if required.\r\n     */\r\n    private initFeedbackInformation() {\r\n        of(this.result.feedbacks)\r\n            .pipe(\r\n                switchMap((feedbacks: Feedback[] | undefined | null) => {\r\n                    // don't query the server if feedback already exists\r\n                    if (feedbacks?.length) {\r\n                        // ensure connection to result, required for FeedbackItems in the next step\r\n                        feedbacks.forEach((feedback) => (feedback.result = this.result));\r\n                        return of(feedbacks);\r\n                    } else {\r\n                        return this.resultService.getFeedbackDetailsForResult(this.result.participation!.id!, this.result).pipe(map((response) => response.body));\r\n                    }\r\n                }),\r\n                switchMap((feedbacks: Feedback[] | undefined | null) => {\r\n                    if (feedbacks?.length) {\r\n                        this.result.feedbacks = feedbacks!;\r\n\r\n                        const filteredFeedback = this.feedbackService.filterFeedback(feedbacks, this.feedbackFilter);\r\n                        checkSubsequentFeedbackInAssessment(filteredFeedback);\r\n                        const feedbackItems = this.feedbackItemService.create(filteredFeedback, this.showTestDetails);\r\n                        this.feedbackItemNodes = this.feedbackItemService.group(feedbackItems, this.exercise!);\r\n                        if (this.isExamReviewPage) {\r\n                            this.expandFeedbackItemGroups();\r\n                        }\r\n                    }\r\n\r\n                    // If we don't receive a submission or the submission is marked with buildFailed, fetch the build logs.\r\n                    if (\r\n                        this.result.assessmentType !== AssessmentType.AUTOMATIC_ATHENA &&\r\n                        this.exerciseType === ExerciseType.PROGRAMMING &&\r\n                        this.result.participation &&\r\n                        (!this.result.submission || (this.result.submission as ProgrammingSubmission).buildFailed)\r\n                    ) {\r\n                        return this.fetchAndSetBuildLogs(this.result.participation.id!, this.result.id);\r\n                    }\r\n\r\n                    if (this.showScoreChart) {\r\n                        this.updateChart(this.feedbackItemNodes);\r\n                    }\r\n\r\n                    if (isStudentParticipation(this.result)) {\r\n                        this.badge = ResultService.evaluateBadge(this.result.participation!, this.result);\r\n                    }\r\n\r\n                    return of(null);\r\n                }),\r\n                catchError(() => {\r\n                    this.loadingFailed = true;\r\n                    return of(null);\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetches build logs for a participation\r\n     * @param participationId The active participation\r\n     * @param resultId The current result\r\n     */\r\n    private fetchAndSetBuildLogs = (participationId: number, resultId?: number) => {\r\n        return this.buildLogService.getBuildLogs(participationId, resultId).pipe(\r\n            tap((repoResult: BuildLogEntry[]) => {\r\n                this.buildLogs = BuildLogEntryArray.fromBuildLogs(repoResult);\r\n            }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                /**\r\n                 * The request returns 403 if the build was successful and therefore no build logs exist.\r\n                 * If no submission is available, the client will attempt to fetch the build logs anyway.\r\n                 * We catch the error here as it would prevent the displaying of feedback.\r\n                 */\r\n                if (error.status === 403) {\r\n                    return of(null);\r\n                }\r\n                return throwError(() => error);\r\n            }),\r\n        );\r\n    };\r\n\r\n    private updateChart(feedbackItemNodes: FeedbackNode[]) {\r\n        if (!this.exercise || feedbackItemNodes.length === 0) {\r\n            this.showScoreChart = false;\r\n            return;\r\n        }\r\n\r\n        this.chartData = this.feedbackChartService.create(feedbackItemNodes, this.exercise!);\r\n    }\r\n\r\n    getCommitHash(): string {\r\n        return (this.result?.submission as ProgrammingSubmission)?.commitHash ?? 'n.a.';\r\n    }\r\n\r\n    private expandFeedbackItemGroups() {\r\n        this.feedbackItemNodes.forEach((feedbackNode) => {\r\n            if (isFeedbackGroup(feedbackNode)) {\r\n                feedbackNode.open = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private getCommitUrl(result: Result, programmingExercise: ProgrammingExercise | undefined, commitHashURLTemplate: string | undefined) {\r\n        const projectKey = programmingExercise?.projectKey;\r\n        const programmingSubmission = result.submission as ProgrammingSubmission;\r\n        return createCommitUrl(commitHashURLTemplate, projectKey, result.participation, programmingSubmission);\r\n    }\r\n}\r\n", "@if (!isExamReviewPage) {\r\n    <div class=\"modal-header feedback-header\">\r\n        @if (taskName) {\r\n            <h3 class=\"modal-title\" [innerHTML]=\"'artemisApp.result.detail.feedbackForTask' | artemisTranslate: { taskName }\"></h3>\r\n        } @else {\r\n            <h3 class=\"modal-title\" jhiTranslate=\"artemisApp.result.detail.feedback\"></h3>\r\n        }\r\n\r\n        @if (activeModal) {\r\n            <button type=\"button\" class=\"feedback-header__close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"activeModal.close()\">\r\n                <fa-icon [icon]=\"faXmark\" size=\"xl\" />\r\n            </button>\r\n        }\r\n    </div>\r\n}\r\n\r\n<div class=\"modal-body position-relative\">\r\n    <!-- Message, if defined -->\r\n    @if (messageKey) {\r\n        <div class=\"mb-3\"><h6 [innerHTML]=\"messageKey | artemisTranslate\"></h6></div>\r\n    }\r\n    @if (showMissingAutomaticFeedbackInformation) {\r\n        <div class=\"mb-3\">\r\n            <h6 [innerHTML]=\"'artemisApp.result.afterDueDateFeedbackHidden' | artemisTranslate: { date: latestDueDate }\"></h6>\r\n        </div>\r\n    }\r\n\r\n    <!-- Loading state -->\r\n    @if (isLoading) {\r\n        <div class=\"text-body-secondary d-flex justify-content-center\" id=\"result-detail-spinner\">\r\n            <fa-icon animation=\"spin\" size=\"lg\" [icon]=\"faCircleNotch\" />\r\n        </div>\r\n    } @else {\r\n        @if (!loadingFailed && feedbackItemNodes?.length) {\r\n            <div class=\"result-detail-container\">\r\n                @if (!isExamReviewPage) {\r\n                    <div>\r\n                        <div class=\"d-flex justify-content-between align-items-start\">\r\n                            <h4>\r\n                                @if (result.assessmentType === AssessmentType.AUTOMATIC_ATHENA) {\r\n                                    <span jhiTranslate=\"artemisApp.result.resultString.automaticAIFeedbackSuccessfulTooltip\"></span>\r\n                                } @else {\r\n                                    @if (!exercise?.maxPoints) {\r\n                                        <span\r\n                                            jhiTranslate=\"artemisApp.result.score\"\r\n                                            [translateValues]=\"{ score: roundValueSpecifiedByCourseSettings(result.score, course) }\"\r\n                                        ></span>\r\n                                    } @else {\r\n                                        @if (exercise && exercise.maxPoints) {\r\n                                            <span\r\n                                                jhiTranslate=\"artemisApp.result.scoreWithPoints\"\r\n                                                [translateValues]=\"{\r\n                                                    score: roundValueSpecifiedByCourseSettings(result.score ?? 0, course),\r\n                                                    points: roundValueSpecifiedByCourseSettings(((result.score ?? 0) * exercise.maxPoints) / 100, course),\r\n                                                }\"\r\n                                            ></span>\r\n                                        }\r\n                                    }\r\n                                }\r\n                            </h4>\r\n\r\n                            @if (badge) {\r\n                                <span class=\"badge\" [ngClass]=\"badge.class\" id=\"result-score-badge\" ngbTooltip=\"{{ badge.tooltip | artemisTranslate }}\">\r\n                                    {{ badge.text | artemisTranslate | uppercase }}\r\n                                </span>\r\n                            }\r\n                        </div>\r\n\r\n                        <!-- Show and link to the commit hash in case of programming exercise results -->\r\n                        @if (exerciseType === ExerciseType.PROGRAMMING && result.submission) {\r\n                            <p>\r\n                                {{ 'artemisApp.feedback.modal.submitted' | artemisTranslate }}\r\n                                <span [ngbTooltip]=\"result.submission.submissionDate | artemisDate\">\r\n                                    {{ result.submission.submissionDate | artemisTimeAgo }}\r\n                                </span>\r\n                                - {{ 'artemisApp.feedback.modal.linkedToCommit' | artemisTranslate }}:\r\n                                @if (commitUrl) {\r\n                                    <a href=\"{{ commitUrl }}\" target=\"_blank\" rel=\"noopener noreferrer\">{{ commitHash }}</a>\r\n                                } @else {\r\n                                    {{ commitHash }}\r\n                                }\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n                @if (showScoreChart && result.participation?.exercise) {\r\n                    <div class=\"result-score-chart\">\r\n                        <div id=\"feedback-chart\" #containerRef class=\"chart-space\">\r\n                            <ngx-charts-bar-horizontal-stacked\r\n                                [view]=\"[containerRef.offsetWidth, 80]\"\r\n                                [results]=\"chartData.results\"\r\n                                [scheme]=\"chartData.scheme\"\r\n                                [xScaleMax]=\"chartData.xScaleMax\"\r\n                                [xAxis]=\"true\"\r\n                                [xAxisTickFormatting]=\"xAxisFormatting\"\r\n                                [legend]=\"true\"\r\n                                [legendTitle]=\"''\"\r\n                                [legendPosition]=\"legendPosition\"\r\n                                [tooltipDisabled]=\"true\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                }\r\n\r\n                @if (!isExamReviewPage) {\r\n                    <hr />\r\n                }\r\n\r\n                <!-- Always show failed build logs first -->\r\n                <ng-container *ngTemplateOutlet=\"buildLogs?.length ? buildLogsContainer : null\" />\r\n\r\n                @if (buildLogs?.length) {\r\n                    <hr />\r\n                }\r\n\r\n                @if (!loadingFailed && resultIsPreliminary(result)) {\r\n                    <div>\r\n                        <div class=\"d-flex justify-content-end m-1\">\r\n                            <div class=\"badge bg-warning\">{{ 'artemisApp.result.preliminary' | artemisTranslate | uppercase }}</div>\r\n                        </div>\r\n                        @if (result?.assessmentType === AssessmentType.AUTOMATIC_ATHENA) {\r\n                            <p jhiTranslate=\"artemisApp.result.preliminaryTooltipAthena\"></p>\r\n                        } @else {\r\n                            @if (exercise?.assessmentType !== AssessmentType.AUTOMATIC) {\r\n                                <p jhiTranslate=\"artemisApp.result.preliminaryTooltipSemiAutomatic\"></p>\r\n                            }\r\n                            @if (exercise?.assessmentType === AssessmentType.AUTOMATIC) {\r\n                                <p jhiTranslate=\"artemisApp.result.preliminaryTooltip\"></p>\r\n                            }\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n                <div class=\"feedback-list\">\r\n                    @for (feedbackItemNode of feedbackItemNodes; track feedbackItemNode) {\r\n                        <jhi-feedback-node [feedbackItemNode]=\"feedbackItemNode\" [course]=\"course\" />\r\n                    }\r\n                </div>\r\n            </div>\r\n        } @else {\r\n            @if (buildLogs?.length) {\r\n                <h4 jhiTranslate=\"artemisApp.result.buildError\"></h4>\r\n                <dl class=\"buildoutput dl-horizontal\">\r\n                    @for (logEntry of buildLogs; track logEntry; let i = $index) {\r\n                        <!--Don't show the timestamp again if it is the same as the last entry's.-->\r\n                        @if (i === 0 || logEntry.time !== buildLogs[i - 1].time) {\r\n                            <dt class=\"mb-1\">{{ logEntry.time | artemisDate: 'short' : true }}</dt>\r\n                        }\r\n                        <dd\r\n                            [class.text-danger]=\"logEntry.type === BuildLogType.ERROR\"\r\n                            [class.font-weight-bold]=\"logEntry.type === BuildLogType.ERROR\"\r\n                            [class.text-warning]=\"logEntry.type === BuildLogType.WARNING\"\r\n                            [class.mb-3]=\"i + 1 < buildLogs.length && logEntry.time !== buildLogs[i + 1].time\"\r\n                        >\r\n                            {{ logEntry.log }}\r\n                        </dd>\r\n                    }\r\n                </dl>\r\n            } @else {\r\n                @if (!isExamReviewPage) {\r\n                    <h4 jhiTranslate=\"artemisApp.result.noResultDetails\"></h4>\r\n                } @else {\r\n                    <span jhiTranslate=\"artemisApp.result.noResultDetails\"></span>\r\n                }\r\n                @if (isOnlyCompilationTested) {\r\n                    <p class=\"mb-0\" jhiTranslate=\"artemisApp.result.onlyCompilationTested\"></p>\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <!-- Feedbacks container -->\r\n\r\n    <!-- Build logs container -->\r\n    <ng-template #buildLogsContainer>\r\n        @if (buildLogs?.length) {\r\n            <h4 jhiTranslate=\"artemisApp.result.buildError\"></h4>\r\n            <dl class=\"buildoutput dl-horizontal\">\r\n                @for (logEntry of buildLogs; track logEntry; let i = $index) {\r\n                    <!--Don't show the timestamp again if it is the same as the last entry's.-->\r\n                    @if (i === 0 || logEntry.time !== buildLogs[i - 1].time) {\r\n                        <dt class=\"mb-1\">{{ logEntry.time | artemisDate: 'short' : true }}</dt>\r\n                    }\r\n                    <dd\r\n                        [class.text-danger]=\"logEntry.type === BuildLogType.ERROR\"\r\n                        [class.font-weight-bold]=\"logEntry.type === BuildLogType.ERROR\"\r\n                        [class.text-warning]=\"logEntry.type === BuildLogType.WARNING\"\r\n                        [class.mb-3]=\"i + 1 < buildLogs.length && logEntry.time !== buildLogs[i + 1].time\"\r\n                    >\r\n                        {{ logEntry.log }}\r\n                    </dd>\r\n                }\r\n            </dl>\r\n        } @else {\r\n            <!-- No content fallback -->\r\n            @if (!isExamReviewPage) {\r\n                <h4 jhiTranslate=\"artemisApp.result.noResultDetails\"></h4>\r\n            } @else {\r\n                <span jhiTranslate=\"artemisApp.result.noResultDetails\"></span>\r\n            }\r\n            @if (isOnlyCompilationTested) {\r\n                <p class=\"mb-0\" jhiTranslate=\"artemisApp.result.onlyCompilationTested\"></p>\r\n            }\r\n        }\r\n    </ng-template>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    @if (activeModal) {\r\n        <button id=\"feedback-close\" type=\"button\" class=\"btn btn-outline-dark\" (click)=\"activeModal.close('Close click')\">Close</button>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["safeUnescape", "s", "DOMParser", "parseFromString", "body", "textContent", "BuildLogType", "BuildLogEntryArray", "Array", "mavenErrorLogRegex", "gradleErrorLogRegex", "swiftErrorLogRegex", "fromBuildLogs", "buildLogs", "mappedLogs", "map", "_a", "_b", "log", "rest", "logType", "OTHER", "trimStart", "startsWith", "ERROR", "WARNING", "__spreadValues", "type", "extractErrors", "programmingLanguage", "projectType", "errorLogRegex", "ProgrammingLanguage", "SWIFT", "ProjectType", "PLAIN_GRADLE", "GRADLE_GRADLE", "from", "time", "split", "trim", "match", "filter", "length", "includes", "sortedLog", "errorIndicator", "splice", "indexOf", "unshift", "fileName", "row", "column", "text", "Math", "max", "parseInt", "safeUnescape", "timestamp", "Date", "parse", "FeedbackGroup", "name", "members", "credits", "maxCredits", "color", "open", "addAllItems", "feedbackItems", "forEach", "item", "calculateCredits", "isEmpty", "length", "filter", "type", "reduce", "acc", "isFeedbackGroup", "node", "undefined", "getAllFeedbackGroups", "FeedbackGroupWrong", "FeedbackGroupInfo", "FeedbackGroupCorrect", "FeedbackGroup", "constructor", "name", "color", "open", "shouldContain", "feedbackItem", "isNotSubsequentFeedback", "type", "credits", "undefined", "isSubsequentFeedback", "FeedbackItemServiceImpl", "translateService", "inject", "TranslateService", "create", "feedbacks", "showTestDetails", "map", "feedback", "createFeedbackItem", "group", "feedbackItems", "feedbackGroups", "getAllFeedbackGroups", "addAllItems", "filter", "shouldContain", "isEmpty", "length", "open", "gradingInstruction", "createGradingInstructionFeedbackItem", "type", "name", "instant", "title", "text", "detailText", "positive", "credits", "feedbackReference", "isSubsequent", "factory", "\u0275fac", "providedIn", "StaticCodeAnalysisIssue", "filePath", "startLine", "endLine", "startColumn", "endColumn", "rule", "category", "message", "priority", "penalty", "fromFeedback", "feedback", "JSON", "parse", "detailText", "getAllFeedbackGroups", "exercise", "ProgrammingFeedbackGroupWrong", "ProgrammingFeedbackGroupWarning", "ProgrammingFeedbackGroupInfo", "ProgrammingFeedbackGroupCorrect", "FeedbackGroup", "constructor", "name", "color", "open", "shouldContain", "feedbackItem", "isReviewerFeedback", "type", "credits", "undefined", "isTestFeedback", "isFailedTest", "positive", "programmingExercise", "maxCredits", "maxStaticCodeAnalysisPenalty", "maxPoints", "isSubsequentFeedback", "isSuccessfulTest", "ProgrammingFeedbackItemService", "translateService", "inject", "TranslateService", "create", "feedbacks", "showTestDetails", "map", "feedback", "createFeedbackItem", "group", "feedbackItems", "exercise", "feedbackGroups", "getAllFeedbackGroups", "addAllItems", "filter", "shouldContain", "isEmpty", "length", "open", "Feedback", "isSubmissionPolicyFeedback", "createSubmissionPolicyFeedbackItem", "isStaticCodeAnalysisFeedback", "createScaFeedbackItem", "isFeedbackSuggestion", "createFeedbackSuggestionItem", "type", "FeedbackType", "AUTOMATIC", "isNonGradedFeedbackSuggestion", "createAutomaticFeedbackItem", "createNonGradedFeedbackItem", "MANUAL", "MANUAL_UNREFERENCED", "gradingInstruction", "createGradingInstructionFeedbackItem", "createReviewerFeedbackItem", "submissionPolicyTitle", "text", "substring", "SUBMISSION_POLICY_FEEDBACK_IDENTIFIER", "color", "name", "instant", "title", "detailText", "positive", "credits", "feedbackReference", "scaCategory", "STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER", "scaIssue", "StaticCodeAnalysisIssue", "fromFeedback", "rule", "message", "location", "getIssueLocation", "penalty", "titleWithoutIdentifier", "prefix", "FEEDBACK_SUGGESTION_ACCEPTED_IDENTIFIER", "FEEDBACK_SUGGESTION_ADAPTED_IDENTIFIER", "FEEDBACK_SUGGESTION_IDENTIFIER", "startsWith", "testCase", "testName", "undefined", "slice", "NON_GRADED_FEEDBACK_SUGGESTION_IDENTIFIER", "isSubsequent", "issue", "lineText", "endLine", "startLine", "line", "from", "to", "startColumn", "columnText", "endColumn", "column", "filePath", "factory", "\u0275fac", "providedIn", "FeedbackService", "BaseApiHttpService", "filterFeedback", "feedbacks", "filter", "feedback", "testCase", "id", "includes", "getLongFeedbackText", "feedbackId", "__async", "url", "get", "responseType", "__ngFactoryType__", "factory", "\u0275fac", "providedIn", "FeedbackChartService", "create", "feedbackNodes", "exercise", "summarizedNodes", "summarizePoints", "results", "name", "series", "map", "node", "value", "calculatePercentage", "scheme", "selectable", "group", "ScaleType", "Ordinal", "domain", "color", "xScaleMax", "positive", "neutral", "negative", "separateByCredits", "slice", "sumPositive", "sumCredits", "sumNegative", "clearCredits", "subtractCredits", "absCredits", "subtrahend", "credits", "current", "Math", "min", "__spreadProps", "__spreadValues", "filter", "reduce", "acc", "abs", "capCredits", "maxCredits", "absMaxCredits", "sign", "appliedCredits", "roundScorePercentSpecifiedByCourseSettings", "maxPoints", "getCourseFromExercise", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "downloadText", "\u0275\u0275sanitizeUrl", "downloadFilename", "FeedbackTextComponent", "longFeedbackService", "inject", "LongFeedbackTextService", "MAX_DISPLAYABLE_LENGTH", "feedback", "text", "ngOnInit", "feedbackReference", "hasLongFeedbackText", "loadLongFeedback", "id", "feedbackId", "find", "subscribe", "longFeedbackResponse", "longFeedback", "body", "length", "setDownloadInfo", "encodeURIComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "FeedbackTextComponent_Conditional_0_Template", "\u0275\u0275conditional", "\u0275\u0275textInterpolate", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r0", "feedback", "text", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "debounceToggleCollapse", "\u0275\u0275element", "\u0275\u0275property", "faAngleRight", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "previewText", "_r3", "faAngleDown", "\u0275\u0275template", "FeedbackCollapseComponent_Conditional_3_Conditional_1_Template", "FeedbackCollapseComponent_Conditional_3_Conditional_2_Template", "\u0275\u0275conditional", "isCollapsed", "FeedbackCollapseComponent", "FEEDBACK_PREVIEW_CHARACTER_LIMIT", "BaseApiHttpService", "debounce", "toggleCollapse", "bind", "ngOnInit", "computeFeedbackPreviewText", "feedbackReference", "hasLongFeedbackText", "slice", "length", "includes", "indexOf", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "FeedbackCollapseComponent_Conditional_2_Template", "FeedbackCollapseComponent_Conditional_3_Template", "FaIconComponent", "FeedbackTextComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faExclamationTriangle", "\u0275\u0275pipeBind1", "\u0275\u0275elementStart", "\u0275\u0275template", "FeedbackNodeComponent_Conditional_0_Conditional_8_Conditional_3_Template", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate1", "roundValueSpecifiedByCourseSettings", "feedbackItem", "credits", "course", "\u0275\u0275conditional", "type", "FeedbackNodeComponent_Conditional_0_Conditional_8_Template", "FeedbackNodeComponent_Conditional_0_Conditional_10_Template", "FeedbackNodeComponent_Conditional_0_p_11_Template", "color", "\u0275\u0275textInterpolate2", "name", "title", "text", "feedbackItemGroup", "feedbackItem_r3", "\u0275\u0275repeaterCreate", "FeedbackNodeComponent_Conditional_1_Conditional_16_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "members", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "open", "FeedbackNodeComponent_Conditional_1_Conditional_14_Template", "FeedbackNodeComponent_Conditional_1_Conditional_16_Template", "faAngleUp", "faAngleDown", "length", "FeedbackNodeComponent", "feedbackItemNode", "ngOnInit", "isFeedbackGroup", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "FeedbackNodeComponent_Conditional_0_Template", "FeedbackNodeComponent_Conditional_1_Template", "NgClass", "FaIconComponent", "NgbTooltip", "FeedbackCollapseComponent", "TranslateDirective", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "taskName", "\u0275\u0275sanitizeHtml", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "activeModal", "close", "\u0275\u0275elementEnd", "faXmark", "\u0275\u0275template", "FeedbackComponent_Conditional_0_Conditional_3_Template", "FeedbackComponent_Conditional_0_Conditional_4_Template", "FeedbackComponent_Conditional_0_Conditional_5_Template", "\u0275\u0275conditional", "\u0275\u0275pipeBind1", "messageKey", "_c1", "latestDueDate", "faCircleNotch", "_c2", "roundValueSpecifiedByCourseSettings", "result", "score", "course", "\u0275\u0275pureFunction2", "_c3", "tmp_7_0", "undefined", "exercise", "maxPoints", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_8_Conditional_2_Conditional_1_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_8_Conditional_1_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_8_Conditional_2_Template", "\u0275\u0275propertyInterpolate", "badge", "tooltip", "class", "\u0275\u0275textInterpolate1", "text", "commitUrl", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate", "commitHash", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_13_Conditional_10_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_13_Conditional_11_Template", "submission", "submissionDate", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_7_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_8_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_10_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Conditional_13_Template", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "exerciseType", "ExerciseType", "PROGRAMMING", "_c4", "containerRef_r3", "offsetWidth", "chartData", "results", "scheme", "xScaleMax", "xAxisFormatting", "legendPosition", "\u0275\u0275elementContainer", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_9_Conditional_12_Conditional_1_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_9_Conditional_12_Conditional_2_Template", "AUTOMATIC", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_9_Conditional_11_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_9_Conditional_12_Template", "feedbackItemNode_r4", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_3_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_4_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_5_Template", "FeedbackComponent_Conditional_7_Conditional_1_ng_container_6_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_8_Template", "FeedbackComponent_Conditional_7_Conditional_1_Conditional_9_Template", "\u0275\u0275repeaterCreate", "FeedbackComponent_Conditional_7_Conditional_1_For_13_Template", "\u0275\u0275repeaterTrackByIdentity", "isExamReviewPage", "showScoreChart", "participation", "buildLogs", "length", "buildLogsContainer_r5", "loadingFailed", "resultIsPreliminary", "\u0275\u0275repeater", "feedbackItemNodes", "\u0275\u0275pipeBind3", "logEntry_r6", "time", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_1_For_6_Conditional_2_Template", "\u0275$index_211_r7", "\u0275\u0275classProp", "type", "BuildLogType", "ERROR", "WARNING", "log", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_1_For_6_Template", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_2_Conditional_1_Template", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_2_Conditional_2_Template", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_2_Conditional_3_Template", "isOnlyCompilationTested", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_1_Template", "FeedbackComponent_Conditional_7_Conditional_2_Conditional_2_Template", "FeedbackComponent_Conditional_7_Conditional_1_Template", "FeedbackComponent_Conditional_7_Conditional_2_Template", "logEntry_r8", "FeedbackComponent_ng_template_8_Conditional_1_For_6_Conditional_2_Template", "\u0275$index_254_r9", "FeedbackComponent_ng_template_8_Conditional_1_For_6_Template", "FeedbackComponent_ng_template_8_Conditional_2_Conditional_2_Template", "FeedbackComponent_ng_template_8_Conditional_2_Conditional_3_Template", "FeedbackComponent_ng_template_8_Conditional_2_Conditional_4_Template", "FeedbackComponent_ng_template_8_Conditional_1_Template", "FeedbackComponent_ng_template_8_Conditional_2_Template", "_r10", "FeedbackComponent", "resultService", "inject", "ResultService", "buildLogService", "BuildLogService", "translateService", "TranslateService", "profileService", "ProfileService", "feedbackService", "FeedbackService", "feedbackChartService", "FeedbackChartService", "injector", "Injector", "NgbActiveModal", "optional", "axisTickFormattingWithPercentageSign", "feedbackFilter", "showMissingAutomaticFeedbackInformation", "numberOfNotExecutedTests", "isPrinting", "faExclamationTriangle", "showTestDetails", "isLoading", "commitHashURLTemplate", "name", "selectable", "group", "ScaleType", "Ordinal", "domain", "GraphColors", "GREEN", "RED", "labels", "LegendPosition", "Below", "feedbackItemService", "feedbackItemNodesBeforePrinting", "constructor", "pointsLabel", "instant", "deductionsLabel", "ngOnInit", "initializeExerciseInformation", "get", "ProgrammingFeedbackItemService", "FeedbackItemServiceImpl", "initFeedbackInformation", "getCommitHash", "slice", "evaluateTemplateStatus", "getProfileInfo", "subscribe", "profileInfo", "getCommitUrl", "ngOnChanges", "changes", "currentValue", "cloneDeep", "expandFeedbackItemGroups", "getCourseFromExercise", "isProgrammingExerciseParticipation", "isAtLeastTutor", "showTestNamesToStudents", "of", "feedbacks", "pipe", "switchMap", "forEach", "feedback", "getFeedbackDetailsForResult", "id", "map", "response", "body", "filteredFeedback", "filterFeedback", "checkSubsequentFeedbackInAssessment", "feedbackItems", "create", "buildFailed", "fetchAndSetBuildLogs", "updateChart", "isStudentParticipation", "evaluateBadge", "catchError", "participationId", "resultId", "getBuildLogs", "tap", "repoResult", "BuildLogEntryArray", "fromBuildLogs", "error", "status", "throwError", "feedbackNode", "isFeedbackGroup", "open", "programmingExercise", "projectKey", "programmingSubmission", "createCommitUrl", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "FeedbackComponent_Conditional_0_Template", "FeedbackComponent_Conditional_4_Template", "FeedbackComponent_Conditional_5_Template", "FeedbackComponent_Conditional_6_Template", "FeedbackComponent_Conditional_7_Template", "FeedbackComponent_ng_template_8_Template", "\u0275\u0275templateRefExtractor", "FeedbackComponent_Conditional_14_Template", "TranslateDirective", "FaIconComponent", "NgClass", "NgbTooltip", "BarChartModule", "BarHorizontalStackedComponent", "NgTemplateOutlet", "FeedbackNodeComponent", "UpperCasePipe", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisTimeAgoPipe", "styles"]
}
