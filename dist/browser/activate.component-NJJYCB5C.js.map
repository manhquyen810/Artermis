{
  "version": 3,
  "sources": ["src/main/webapp/app/account/activate/activate.service.ts", "src/main/webapp/app/account/activate/activate.component.ts", "src/main/webapp/app/account/activate/activate.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ActivateService {\r\n    private http = inject(HttpClient);\r\n\r\n    /**\r\n     * Sends request to the server to activate the user\r\n     * @param key the activation key\r\n     */\r\n    get(key: string): Observable<object> {\r\n        return this.http.get('api/core/public/activate', {\r\n            params: new HttpParams().set('key', key),\r\n        });\r\n    }\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { ActivateService } from './activate.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-activate',\r\n    templateUrl: './activate.component.html',\r\n    imports: [TranslateDirective, RouterLink],\r\n})\r\nexport class ActivateComponent implements OnInit {\r\n    private activateService = inject(ActivateService);\r\n    private route = inject(ActivatedRoute);\r\n    private profileService = inject(ProfileService);\r\n\r\n    error = false;\r\n    success = false;\r\n    isRegistrationEnabled = false;\r\n\r\n    /**\r\n     * Checks if the user can be activated with ActivateService\r\n     */\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.isRegistrationEnabled = profileInfo.registrationEnabled || false;\r\n                if (this.isRegistrationEnabled) {\r\n                    // only try to activate an account if the registration is enabled\r\n                    this.activateAccount();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    activateAccount() {\r\n        this.route.queryParams.pipe(mergeMap((params) => this.activateService.get(params.key))).subscribe({\r\n            next: () => (this.success = true),\r\n            error: () => (this.error = true),\r\n        });\r\n    }\r\n}\r\n", "@if (isRegistrationEnabled) {\r\n    <div>\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-md-8\">\r\n                <h1 jhiTranslate=\"activate.title\"></h1>\r\n                @if (success) {\r\n                    <div class=\"alert alert-success\">\r\n                        <span jhiTranslate=\"activate.messages.success\"><strong>Your user account has been activated.</strong> Please </span>\r\n                        <a class=\"alert-link\" [routerLink]=\"['/']\" jhiTranslate=\"global.messages.info.authenticated.link\"></a>.\r\n                    </div>\r\n                }\r\n                @if (error) {\r\n                    <div class=\"alert alert-danger\" jhiTranslate=\"activate.messages.error\">\r\n                        <strong>Your user could not be activated.</strong> Please use the registration form to sign up.\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["ActivateService", "http", "inject", "HttpClient", "get", "key", "params", "HttpParams", "set", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275template", "ActivateComponent_Conditional_0_Conditional_9_Template", "ActivateComponent_Conditional_0_Conditional_10_Template", "\u0275\u0275conditional", "ctx_r0", "success", "error", "ActivateComponent", "activateService", "inject", "ActivateService", "route", "ActivatedRoute", "profileService", "ProfileService", "isRegistrationEnabled", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "registrationEnabled", "activateAccount", "queryParams", "pipe", "mergeMap", "params", "get", "key", "next", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "ActivateComponent_Conditional_0_Template", "TranslateDirective", "RouterLink", "encapsulation"]
}
