{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/shared/quiz-manage-util.service.ts"],
  "sourcesContent": ["import { QuizExercise, QuizMode, QuizStatus } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { captureException } from '@sentry/angular';\r\nimport { ValidationReason } from 'app/entities/exercise.model';\r\nimport {\r\n    MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD,\r\n    MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD,\r\n    MAX_QUIZ_QUESTION_LENGTH_THRESHOLD,\r\n    MAX_QUIZ_QUESTION_POINTS,\r\n} from 'app/shared/constants/input.constants';\r\nimport { DragAndDropQuestionUtil } from 'app/exercises/quiz/shared/drag-and-drop-question-util.service';\r\nimport { ShortAnswerQuestionUtil } from 'app/exercises/quiz/shared/short-answer-question-util.service';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { ShortAnswerSolution } from 'app/entities/quiz/short-answer-solution.model';\r\nimport { ShortAnswerMapping } from 'app/entities/quiz/short-answer-mapping.model';\r\nimport { ShortAnswerSpot } from 'app/entities/quiz/short-answer-spot.model';\r\nimport { CanBecomeInvalid, DropLocation } from 'app/entities/quiz/drop-location.model';\r\nimport { DragItem } from 'app/entities/quiz/drag-item.model';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\n\r\n/**\r\n * Check if quiz is editable\r\n * @param quizExercise the quiz exercise which will be checked\r\n * @return {boolean} true if the quiz is editable and false otherwise\r\n */\r\nexport function isQuizEditable(quizExercise: QuizExercise): boolean {\r\n    if (quizExercise.id) {\r\n        if (quizExercise.quizMode === QuizMode.BATCHED && quizExercise.quizBatches?.length) {\r\n            return false;\r\n        }\r\n        return quizExercise.status !== QuizStatus.ACTIVE && quizExercise.isAtLeastEditor! && !quizExercise.quizEnded;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isQuizQuestionValid(question: QuizQuestion, dragAndDropQuestionUtil: DragAndDropQuestionUtil, shortAnswerQuestionUtil: ShortAnswerQuestionUtil) {\r\n    if (question.points == undefined || question.points <= 0 || question.points > MAX_QUIZ_QUESTION_POINTS) {\r\n        return false;\r\n    }\r\n    if (question.explanation && question.explanation.length > MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD) {\r\n        return false;\r\n    }\r\n    if (question.hint && question.hint.length > MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD) {\r\n        return false;\r\n    }\r\n    switch (question.type) {\r\n        case QuizQuestionType.MULTIPLE_CHOICE: {\r\n            const mcQuestion = question as MultipleChoiceQuestion;\r\n            const correctOptions = mcQuestion.answerOptions!.filter((answerOption) => answerOption.isCorrect).length;\r\n            return (\r\n                (mcQuestion.singleChoice ? correctOptions === 1 : correctOptions > 0) &&\r\n                question.title &&\r\n                question.title !== '' &&\r\n                question.title.length < MAX_QUIZ_QUESTION_LENGTH_THRESHOLD &&\r\n                mcQuestion.answerOptions!.every(\r\n                    (answerOption) =>\r\n                        answerOption.isCorrect !== undefined &&\r\n                        (!answerOption.explanation || answerOption.explanation.length <= MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD) &&\r\n                        (!answerOption.hint || answerOption.hint.length <= MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD),\r\n                )\r\n            );\r\n        }\r\n        case QuizQuestionType.DRAG_AND_DROP: {\r\n            const dndQuestion = question as DragAndDropQuestion;\r\n            return (\r\n                question.title &&\r\n                question.title !== '' &&\r\n                question.title.length < MAX_QUIZ_QUESTION_LENGTH_THRESHOLD &&\r\n                dndQuestion.correctMappings &&\r\n                dndQuestion.correctMappings.length > 0 &&\r\n                dragAndDropQuestionUtil.solve(dndQuestion).length &&\r\n                dragAndDropQuestionUtil.validateNoMisleadingCorrectMapping(dndQuestion)\r\n            );\r\n        }\r\n        case QuizQuestionType.SHORT_ANSWER: {\r\n            const shortAnswerQuestion = question as ShortAnswerQuestion;\r\n            return (\r\n                question.title &&\r\n                question.title !== '' &&\r\n                shortAnswerQuestion.correctMappings &&\r\n                shortAnswerQuestion.correctMappings.length > 0 &&\r\n                shortAnswerQuestionUtil.validateNoMisleadingShortAnswerMapping(shortAnswerQuestion) &&\r\n                shortAnswerQuestionUtil.everySpotHasASolution(shortAnswerQuestion.correctMappings, shortAnswerQuestion.spots!) &&\r\n                shortAnswerQuestionUtil.everyMappedSolutionHasASpot(shortAnswerQuestion.correctMappings) &&\r\n                shortAnswerQuestion.solutions?.filter((solution) => solution.text!.trim() === '').length === 0 &&\r\n                shortAnswerQuestion.solutions?.filter((solution) => solution.text!.trim().length >= MAX_QUIZ_QUESTION_LENGTH_THRESHOLD).length === 0 &&\r\n                !shortAnswerQuestionUtil.hasMappingDuplicateValues(shortAnswerQuestion.correctMappings) &&\r\n                shortAnswerQuestionUtil.atLeastAsManySolutionsAsSpots(shortAnswerQuestion)\r\n            );\r\n        }\r\n        default: {\r\n            captureException(new Error('Unknown question type: ' + question));\r\n            return question.title && question.title !== '';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Compute the invalid reasons of the given QuizQuestion and add them to the given invalidReasons list.\r\n *\r\n * @param invalidReasons the invalid reasons of the given quiz question\r\n * @param question the QuizQuestion from which the invalid reasons to be computed\r\n * @param index the index of the QuizQuestion\r\n * @param dragAndDropQuestionUtil the utility service of drag and drop quiz question\r\n * @param shortAnswerQuestionUtil the utility service of short answer quiz question\r\n */\r\nexport function computeQuizQuestionInvalidReason(\r\n    invalidReasons: ValidationReason[],\r\n    question: QuizQuestion,\r\n    index: number,\r\n    dragAndDropQuestionUtil: DragAndDropQuestionUtil,\r\n    shortAnswerQuestionUtil: ShortAnswerQuestionUtil,\r\n) {\r\n    if (!question.title || question.title === '') {\r\n        invalidReasons.push({\r\n            translateKey: 'artemisApp.quizExercise.invalidReasons.questionTitle',\r\n            translateValues: { index: index + 1 },\r\n        });\r\n    }\r\n    if (question.points == undefined) {\r\n        invalidReasons.push({\r\n            translateKey: 'artemisApp.quizExercise.invalidReasons.questionScore',\r\n            translateValues: { index: index + 1 },\r\n        });\r\n    } else if (question.points <= 0 || question.points > MAX_QUIZ_QUESTION_POINTS) {\r\n        invalidReasons.push({\r\n            translateKey: 'artemisApp.quizExercise.invalidReasons.questionScoreInvalid',\r\n            translateValues: { index: index + 1 },\r\n        });\r\n    }\r\n    if (question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n        const mcQuestion = question as MultipleChoiceQuestion;\r\n        const correctOptions = mcQuestion.answerOptions!.filter((answerOption) => answerOption.isCorrect).length;\r\n        if (correctOptions === 0) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.questionCorrectAnswerOption',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (mcQuestion.singleChoice && correctOptions > 1) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.questionSingleChoiceCorrectAnswerOptions',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!mcQuestion.answerOptions!.every((answerOption) => answerOption.explanation !== '')) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.explanationIsMissing',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (mcQuestion.answerOptions!.some((answerOption) => answerOption.explanation && answerOption.explanation.length > MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.answerExplanationLength',\r\n                translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD },\r\n            });\r\n        }\r\n        if (mcQuestion.answerOptions!.some((answerOption) => answerOption.hint && answerOption.hint.length > MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.answerHintLength',\r\n                translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD },\r\n            });\r\n        }\r\n        if (mcQuestion.answerOptions!.some((answerOption) => answerOption.isCorrect === undefined)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.multipleChoiceQuestionAnswerOptionInvalid',\r\n                translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD },\r\n            });\r\n        }\r\n    }\r\n    if (question.title && question.title.length >= MAX_QUIZ_QUESTION_LENGTH_THRESHOLD) {\r\n        invalidReasons.push({\r\n            translateKey: 'artemisApp.quizExercise.invalidReasons.questionTitleLength',\r\n            translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_LENGTH_THRESHOLD },\r\n        });\r\n    }\r\n    if (question.explanation && question.explanation.length > MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD) {\r\n        invalidReasons.push({\r\n            translateKey: 'artemisApp.quizExercise.invalidReasons.questionExplanationLength',\r\n            translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD },\r\n        });\r\n    }\r\n    if (question.hint && question.hint.length > MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD) {\r\n        invalidReasons.push({\r\n            translateKey: 'artemisApp.quizExercise.invalidReasons.questionHintLength',\r\n            translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD },\r\n        });\r\n    }\r\n\r\n    if (question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n        const dndQuestion = question as DragAndDropQuestion;\r\n        if (!dndQuestion.correctMappings || dndQuestion.correctMappings.length === 0) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.questionCorrectMapping',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        } else if (dragAndDropQuestionUtil.solve(dndQuestion, []).length === 0) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.questionUnsolvable',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!dragAndDropQuestionUtil.validateNoMisleadingCorrectMapping(dndQuestion)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.misleadingCorrectMapping',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n    }\r\n    if (question.type === QuizQuestionType.SHORT_ANSWER) {\r\n        const shortAnswerQuestion = question as ShortAnswerQuestion;\r\n        if (!shortAnswerQuestion.correctMappings || shortAnswerQuestion.correctMappings.length === 0) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.questionCorrectMapping',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!shortAnswerQuestionUtil.validateNoMisleadingShortAnswerMapping(shortAnswerQuestion)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.misleadingCorrectMapping',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!shortAnswerQuestionUtil.everySpotHasASolution(shortAnswerQuestion.correctMappings!, shortAnswerQuestion.spots!)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.shortAnswerQuestionEverySpotHasASolution',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!shortAnswerQuestionUtil.everyMappedSolutionHasASpot(shortAnswerQuestion.correctMappings!)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.shortAnswerQuestionEveryMappedSolutionHasASpot',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!(shortAnswerQuestion.solutions?.filter((solution) => solution.text!.trim() === '').length === 0)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.shortAnswerQuestionSolutionHasNoValue',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (shortAnswerQuestion.solutions?.filter((solution) => solution.text!.trim().length >= MAX_QUIZ_QUESTION_LENGTH_THRESHOLD).length !== 0) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.quizAnswerOptionLength',\r\n                translateValues: { index: index + 1, threshold: MAX_QUIZ_QUESTION_LENGTH_THRESHOLD },\r\n            });\r\n        }\r\n        if (shortAnswerQuestionUtil.hasMappingDuplicateValues(shortAnswerQuestion.correctMappings!)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.shortAnswerQuestionDuplicateMapping',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n        if (!shortAnswerQuestionUtil.atLeastAsManySolutionsAsSpots(shortAnswerQuestion)) {\r\n            invalidReasons.push({\r\n                translateKey: 'artemisApp.quizExercise.invalidReasons.shortAnswerQuestionUnsolvable',\r\n                translateValues: { index: index + 1 },\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\ntype InvalidElement = AnswerOption | ShortAnswerSolution | ShortAnswerMapping | ShortAnswerSpot | DropLocation | DragItem | DragAndDropMapping;\r\n\r\nexport type InvalidFlaggedQuestions = {\r\n    [id: number]: InvalidElement[];\r\n};\r\n\r\n/**\r\n * Compute the list of invalid flagged QuizQuestions from the given list of QuizQuestions.\r\n *\r\n * @param questions the list of QuizQuestion to be computed\r\n * @return the list of QuizQuestions which were marked invalid\r\n */\r\nexport function checkForInvalidFlaggedQuestions(questions: QuizQuestion[]): InvalidFlaggedQuestions {\r\n    const invalidQuestions: InvalidFlaggedQuestions = {};\r\n    questions.forEach((question) => {\r\n        const invalidQuestion = question.invalid;\r\n        const invalidElements: InvalidElement[] = [];\r\n        if (question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n            pushToInvalidElements((<MultipleChoiceQuestion>question).answerOptions, invalidElements);\r\n        } else if (question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n            pushToInvalidElements((<DragAndDropQuestion>question).dragItems, invalidElements);\r\n            pushToInvalidElements((<DragAndDropQuestion>question).correctMappings, invalidElements);\r\n            pushToInvalidElements((<DragAndDropQuestion>question).dropLocations, invalidElements);\r\n        } else {\r\n            pushToInvalidElements((<ShortAnswerQuestion>question).solutions, invalidElements);\r\n            pushToInvalidElements((<ShortAnswerQuestion>question).correctMappings, invalidElements);\r\n            pushToInvalidElements((<ShortAnswerQuestion>question).spots, invalidElements);\r\n        }\r\n        if (invalidQuestion || invalidElements.length !== 0) {\r\n            invalidQuestions[question.id!] = invalidElements.length !== 0 ? invalidElements : [];\r\n        }\r\n    });\r\n    return invalidQuestions;\r\n}\r\n\r\n/**\r\n * Helper function in order to prevent code duplication in computeInvalidReasons\r\n * Iterates over the array and pushes invalid elements to invalidElements\r\n * @param array the array containing elements that can be invalid\r\n * @param invalidElements the array all invalid elements are pushed to\r\n */\r\nfunction pushToInvalidElements(array: CanBecomeInvalid[] | undefined, invalidElements: InvalidElement[]): void {\r\n    if (array !== undefined) {\r\n        array!.forEach(function (option: CanBecomeInvalid) {\r\n            if (option.invalid) {\r\n                invalidElements.push(option);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["isQuizEditable", "quizExercise", "id", "quizMode", "QuizMode", "BATCHED", "quizBatches", "length", "status", "QuizStatus", "ACTIVE", "isAtLeastEditor", "quizEnded", "isQuizQuestionValid", "question", "dragAndDropQuestionUtil", "shortAnswerQuestionUtil", "points", "undefined", "MAX_QUIZ_QUESTION_POINTS", "explanation", "MAX_QUIZ_QUESTION_EXPLANATION_LENGTH_THRESHOLD", "hint", "MAX_QUIZ_QUESTION_HINT_LENGTH_THRESHOLD", "type", "QuizQuestionType", "MULTIPLE_CHOICE", "mcQuestion", "correctOptions", "answerOptions", "filter", "answerOption", "isCorrect", "singleChoice", "title", "MAX_QUIZ_QUESTION_LENGTH_THRESHOLD", "every", "DRAG_AND_DROP", "dndQuestion", "correctMappings", "solve", "validateNoMisleadingCorrectMapping", "SHORT_ANSWER", "shortAnswerQuestion", "validateNoMisleadingShortAnswerMapping", "everySpotHasASolution", "spots", "everyMappedSolutionHasASpot", "solutions", "solution", "text", "trim", "hasMappingDuplicateValues", "atLeastAsManySolutionsAsSpots", "captureException", "Error", "computeQuizQuestionInvalidReason", "invalidReasons", "index", "push", "translateKey", "translateValues", "some", "threshold", "checkForInvalidFlaggedQuestions", "questions", "invalidQuestions", "forEach", "invalidQuestion", "invalid", "invalidElements", "pushToInvalidElements", "dragItems", "dropLocations", "array", "option"]
}
