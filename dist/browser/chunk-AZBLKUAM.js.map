{
  "version": 3,
  "sources": ["src/main/webapp/app/core/user/user.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'app/core/user/user.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/core/users';\r\n\r\n    /**\r\n     * Search for a user on the server by login or name.\r\n     * @param loginOrName The login or name to search for.\r\n     * @return Observable<HttpResponse<User[]>> with the list of found users as body.\r\n     */\r\n    search(loginOrName: string): Observable<HttpResponse<User[]>> {\r\n        return this.http.get<User[]>(`${this.resourceUrl}/search?loginOrName=${loginOrName}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update the user notification date.\r\n     */\r\n    updateLastNotificationRead(): Observable<HttpResponse<void>> {\r\n        return this.http.put<void>(`${this.resourceUrl}/notification-date`, null, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Updates the property that decides what notifications should be displayed or hidden in the notification sidebar based on notification date.\r\n     * If the value is set to null -> show all notifications\r\n     * (Not to be confused with the notification settings. This filter is only based on the date a notification was created)\r\n     */\r\n    updateNotificationVisibility(showAllNotifications: boolean): Observable<HttpResponse<void>> {\r\n        return this.http.put<void>(`${this.resourceUrl}/notification-visibility`, showAllNotifications, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Initializes an LTI user and returns the newly generated password.\r\n     */\r\n    initializeLTIUser(): Observable<HttpResponse<{ password: string }>> {\r\n        return this.http.put<{ password: string }>(`${this.resourceUrl}/initialize`, null, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Accept external LLM usage policy.\r\n     */\r\n    acceptExternalLLMUsage(): Observable<HttpResponse<void>> {\r\n        return this.http.put<HttpResponse<void>>(`${this.resourceUrl}/accept-external-llm-usage`, { observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "yFAMA,IAAaA,GAAW,IAAA,CAAlB,MAAOA,CAAW,CACZC,KAAOC,EAAOC,CAAU,EAEzBC,YAAc,iBAOrBC,OAAOC,EAAmB,CACtB,OAAO,KAAKL,KAAKM,IAAY,GAAG,KAAKH,WAAW,uBAAuBE,CAAW,GAAI,CAAEE,QAAS,UAAU,CAAE,CACjH,CAKAC,4BAA0B,CACtB,OAAO,KAAKR,KAAKS,IAAU,GAAG,KAAKN,WAAW,qBAAsB,KAAM,CAAEI,QAAS,UAAU,CAAE,CACrG,CAOAG,6BAA6BC,EAA6B,CACtD,OAAO,KAAKX,KAAKS,IAAU,GAAG,KAAKN,WAAW,2BAA4BQ,EAAsB,CAAEJ,QAAS,UAAU,CAAE,CAC3H,CAKAK,mBAAiB,CACb,OAAO,KAAKZ,KAAKS,IAA0B,GAAG,KAAKN,WAAW,cAAe,KAAM,CAAEI,QAAS,UAAU,CAAE,CAC9G,CAKAM,wBAAsB,CAClB,OAAO,KAAKb,KAAKS,IAAwB,GAAG,KAAKN,WAAW,6BAA8B,CAAEI,QAAS,UAAU,CAAE,CACrH,4CA1CSR,EAAW,6BAAXA,EAAWe,QAAXf,EAAWgB,UAAAC,WADE,MAAM,CAAA,SACnBjB,CAAW,GAAA",
  "names": ["UserService", "http", "inject", "HttpClient", "resourceUrl", "search", "loginOrName", "get", "observe", "updateLastNotificationRead", "put", "updateNotificationVisibility", "showAllNotifications", "initializeLTIUser", "acceptExternalLLMUsage", "factory", "\u0275fac", "providedIn"]
}
