{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/import-list/import-table.component.ts", "src/main/webapp/app/shared/import-list/import-table.component.html", "src/main/webapp/app/course/course-for-import-dto-paging-service.ts", "src/main/webapp/app/course/competencies/components/import-course-competencies-settings/import-course-competencies-settings.component.ts", "src/main/webapp/app/course/competencies/components/import-course-competencies-settings/import-course-competencies-settings.component.html", "src/main/webapp/app/course/competencies/components/import-all-course-competencies-modal/import-all-course-competencies-modal.component.ts", "src/main/webapp/app/course/competencies/components/import-all-course-competencies-modal/import-all-course-competencies-modal.component.html", "src/main/webapp/app/course/competencies/services/course-competency-api.service.ts", "src/main/webapp/app/course/competencies/competency-management/import-all-competencies.component.ts", "src/main/webapp/app/course/competencies/competency-management/import-all-competencies.component.html", "src/main/webapp/app/course/competencies/competency-management/competency-management-table.component.ts", "src/main/webapp/app/course/competencies/competency-management/competency-management-table.component.html", "src/main/webapp/app/course/competencies/components/course-competency-relation-form/course-competency-relation-form.component.ts", "src/main/webapp/app/course/competencies/components/course-competency-relation-form/course-competency-relation-form.component.html", "src/main/webapp/app/course/competencies/components/course-competency-relation-node/course-competency-relation-node.component.ts", "src/main/webapp/app/course/competencies/components/course-competency-relation-node/course-competency-relation-node.component.html", "src/main/webapp/app/course/competencies/components/course-competencies-relation-graph/course-competencies-relation-graph.component.ts", "src/main/webapp/app/course/competencies/components/course-competencies-relation-graph/course-competencies-relation-graph.component.html", "src/main/webapp/app/course/competencies/components/course-competencies-relation-modal/course-competencies-relation-modal.component.ts", "src/main/webapp/app/course/competencies/components/course-competencies-relation-modal/course-competencies-relation-modal.component.html", "src/main/webapp/app/course/competencies/components/course-competency-explanation-modal/course-competency-explanation-modal.component.ts", "src/main/webapp/app/course/competencies/components/course-competency-explanation-modal/course-competency-explanation-modal.component.html", "src/main/webapp/app/course/competencies/competency-management/competency-management.component.ts", "src/main/webapp/app/course/competencies/competency-management/competency-management.component.html"],
  "sourcesContent": ["import { Component, computed, effect, inject, input, output, signal, untracked } from '@angular/core';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { PagingService } from 'app/exercises/shared/manage/paging.service';\r\nimport { SearchResult, SearchTermPageableSearch, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { faSort, faSortDown, faSortUp, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\nimport { NgbPagination, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * An abstract component intended for cases where a resource needs to be imported from one course into another.\r\n *\r\n * @template T generic class parameter of the entity that gets imported\r\n */\r\nexport type Column<T extends BaseEntity> = {\r\n    name: string;\r\n    getProperty(entity: T): string | undefined;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-import-table',\r\n    imports: [NgbPagination, ArtemisTranslatePipe, TranslateDirective, FontAwesomeModule, FormsModule, NgbTypeaheadModule, CommonModule],\r\n    templateUrl: './import-table.component.html',\r\n    styleUrl: './import-table.component.scss',\r\n})\r\nexport class ImportTableComponent<T extends BaseEntity> {\r\n    protected readonly SortingOrder = SortingOrder;\r\n\r\n    protected readonly faSort = faSort;\r\n    protected readonly faSortUp = faSortUp;\r\n    protected readonly faSortDown = faSortDown;\r\n    protected readonly faSpinner = faSpinner;\r\n\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly pagingService = inject(PagingService);\r\n\r\n    columns = input.required<Column<T>[]>();\r\n    readonly columnBaseTranslationKey = input.required<string>();\r\n    disabledIds = input<number[]>([]);\r\n    readonly numberOfColumns = computed(() => this.columns().length + 2);\r\n\r\n    readonly onRowSelection = output<T>();\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    private readonly searchResult = signal<SearchResult<T> | undefined>(undefined);\r\n    readonly resultsOnPage = computed(() => this.searchResult()?.resultsOnPage ?? []);\r\n\r\n    private readonly DEFAULT_SORTING_ORDER = SortingOrder.ASCENDING;\r\n    private readonly PAGE_SIZE = 10;\r\n\r\n    readonly searchTerm = signal<string>('');\r\n    readonly sortingOrder = signal<SortingOrder>(this.DEFAULT_SORTING_ORDER);\r\n    readonly sortedColumn = signal<string>('ID');\r\n    readonly page = signal<number>(1);\r\n    readonly pageSize = signal<number>(this.PAGE_SIZE).asReadonly();\r\n    readonly collectionSize = computed(() => {\r\n        const numberOfPages = this.searchResult()?.numberOfPages ?? 1;\r\n        return numberOfPages === 1 ? this.resultsOnPage().length : numberOfPages * this.pageSize();\r\n    });\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            untracked(async () => await this.loadData());\r\n        });\r\n    }\r\n\r\n    private async loadData(): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const searchState = <SearchTermPageableSearch>{\r\n                searchTerm: this.searchTerm(),\r\n                page: this.page(),\r\n                sortedColumn: this.sortedColumn(),\r\n                sortingOrder: this.sortingOrder(),\r\n                pageSize: this.pageSize(),\r\n            };\r\n            const result = await lastValueFrom(this.pagingService.search(searchState));\r\n            const filteredResults = this.filterSearchResult(result);\r\n            this.searchResult.set(filteredResults);\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Debounce the data load to prevent unnecessary requests while typing.\r\n     */\r\n    private readonly debouncedDataLoad = BaseApiHttpService.debounce(this.loadData.bind(this), 300);\r\n\r\n    private filterSearchResult(searchResults: SearchResult<T>): SearchResult<T> {\r\n        return <SearchResult<T>>{\r\n            ...searchResults,\r\n            resultsOnPage: searchResults.resultsOnPage?.filter((entity) => !this.disabledIds().includes(entity.id!)),\r\n        };\r\n    }\r\n\r\n    protected async setSortedColumn(sortedColumn: string): Promise<void> {\r\n        const sortingOrder = this.sortingOrder() === SortingOrder.ASCENDING ? SortingOrder.DESCENDING : SortingOrder.ASCENDING;\r\n        this.sortingOrder.set(this.sortedColumn() === sortedColumn ? sortingOrder : this.DEFAULT_SORTING_ORDER);\r\n        this.sortedColumn.set(sortedColumn);\r\n        await this.loadData();\r\n    }\r\n\r\n    protected async setPage(page: number): Promise<void> {\r\n        this.page.set(page);\r\n        await this.loadData();\r\n    }\r\n\r\n    protected search(): void {\r\n        this.debouncedDataLoad();\r\n    }\r\n\r\n    protected selectRow(item: T): void {\r\n        this.onRowSelection.emit(item);\r\n    }\r\n}\r\n", "<div class=\"d-flex align-items-center justify-content-between\">\r\n    <h5 class=\"m-0\" [jhiTranslate]=\"columnBaseTranslationKey() + '.table.title'\"></h5>\r\n    <div>\r\n        <div class=\"d-flex align-items-center\">\r\n            @if (isLoading()) {\r\n                <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n            }\r\n            <input\r\n                id=\"import-objects-search\"\r\n                type=\"search\"\r\n                class=\"form-control ms-2 rounded\"\r\n                [placeholder]=\"'global.importTable.searchPlaceholder' | artemisTranslate\"\r\n                aria-label=\"Search\"\r\n                [(ngModel)]=\"searchTerm\"\r\n                (ngModelChange)=\"search()\"\r\n            />\r\n        </div>\r\n    </div>\r\n</div>\r\n<hr class=\"my-2\" />\r\n<div class=\"import-table-container\">\r\n    <table class=\"table align-middle table-striped\">\r\n        <thead>\r\n            <tr>\r\n                <th class=\"col-1 clickable\">\r\n                    <div class=\"d-flex align-items-center\" (click)=\"setSortedColumn('ID')\">\r\n                        <span>#</span>\r\n                        <ng-container *ngTemplateOutlet=\"sortIcon; context: { sortedColumn: 'ID', currentSortedColumn: sortedColumn(), sortingOrder: sortingOrder() }\" />\r\n                    </div>\r\n                </th>\r\n                @for (column of columns(); track column) {\r\n                    <th class=\"col-4 clickable\" (click)=\"setSortedColumn(column.name)\">\r\n                        <div class=\"d-flex align-items-center\">\r\n                            <span [jhiTranslate]=\"columnBaseTranslationKey() + '.table.columns.' + column.name\"></span>\r\n                            <ng-container *ngTemplateOutlet=\"sortIcon; context: { sortedColumn: column.name, currentSortedColumn: sortedColumn(), sortingOrder: sortingOrder() }\" />\r\n                        </div>\r\n                    </th>\r\n                }\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @for (entity of resultsOnPage(); track entity.id) {\r\n                <tr class=\"flex-row\">\r\n                    <td class=\"col-1\">\r\n                        <span>{{ entity.id }}</span>\r\n                    </td>\r\n                    @for (column of columns(); track column) {\r\n                        <td class=\"text-break col-4\">\r\n                            <ngb-highlight [result]=\"column.getProperty(entity)\" [term]=\"searchTerm()\" />\r\n                        </td>\r\n                    }\r\n                    <td class=\"col-1\">\r\n                        <button class=\"btn btn-sm btn-outline-secondary\" (click)=\"selectRow(entity)\">Select</button>\r\n                    </td>\r\n                </tr>\r\n            } @empty {\r\n                <tr>\r\n                    <td [colSpan]=\"numberOfColumns()\" class=\"text-center text-secondary\"><em jhiTranslate=\"global.generic.emptyList\"></em></td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n</div>\r\n<ngb-pagination\r\n    [collectionSize]=\"collectionSize()\"\r\n    [pageSize]=\"pageSize()\"\r\n    [page]=\"page()\"\r\n    (pageChange)=\"setPage($event)\"\r\n    size=\"sm\"\r\n    class=\"d-flex justify-content-end mt-2 pagination\"\r\n/>\r\n\r\n<ng-template #sortIcon let-sortedColumn=\"sortedColumn\" let-currentSortedColumn=\"currentSortedColumn\" let-sortingOrder=\"sortingOrder\">\r\n    @if (sortedColumn !== currentSortedColumn) {\r\n        <fa-icon [icon]=\"faSort\" class=\"ms-1\" />\r\n    } @else {\r\n        <fa-icon [icon]=\"sortingOrder === SortingOrder.DESCENDING ? faSortDown : faSortUp\" class=\"ms-1\" />\r\n    }\r\n</ng-template>\r\n", "import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { PagingService } from 'app/exercises/shared/manage/paging.service';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CourseForImportDTO } from 'app/entities/course.model';\r\n\r\ntype EntityResponseType = SearchResult<CourseForImportDTO>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseForImportDTOPagingService extends PagingService<CourseForImportDTO> {\r\n    private http = inject(HttpClient);\r\n\r\n    private readonly RESOURCE_URL = 'api/core/courses';\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    override search(pageable: SearchTermPageableSearch): Observable<EntityResponseType> {\r\n        const params = this.createHttpParams(pageable);\r\n        return this.http.get(`${this.RESOURCE_URL}/for-import`, { params, observe: 'response' }).pipe(map((resp: HttpResponse<EntityResponseType>) => resp && resp.body!));\r\n    }\r\n}\r\n", "import { CommonModule } from '@angular/common';\r\nimport { Component, computed, model } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { OwlDateTimeModule, OwlNativeDateTimeModule } from '@danielmoncada/angular-datetime-picker';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faCalendarAlt, faCircleXmark, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nexport class CourseCompetencyImportSettings {\r\n    importRelations = false;\r\n    importExercises = false;\r\n    importLectures = false;\r\n    referenceDate?: Date = undefined;\r\n    isReleaseDate?: boolean = undefined;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-import-course-competencies-settings',\r\n    imports: [NgbTooltipModule, FormsModule, CommonModule, FontAwesomeModule, OwlDateTimeModule, OwlNativeDateTimeModule, ArtemisTranslatePipe, TranslateDirective],\r\n    templateUrl: './import-course-competencies-settings.component.html',\r\n    styleUrl: './import-course-competencies-settings.component.scss',\r\n})\r\nexport class ImportCourseCompetenciesSettingsComponent {\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n    protected readonly faCalendarAlt = faCalendarAlt;\r\n    protected readonly faCircleXmark = faCircleXmark;\r\n\r\n    readonly importSettings = model.required<CourseCompetencyImportSettings>();\r\n    readonly importRelations = computed(() => this.importSettings().importRelations);\r\n    readonly importExercises = computed(() => this.importSettings().importExercises);\r\n    readonly importLectures = computed(() => this.importSettings().importLectures);\r\n    readonly referenceDate = computed(() => this.importSettings().referenceDate);\r\n    readonly isReleaseDate = computed(() => this.importSettings().isReleaseDate);\r\n\r\n    protected toggleImportSetting(setting: keyof CourseCompetencyImportSettings): void {\r\n        this.importSettings.update((settings) => ({\r\n            ...settings,\r\n            [setting]: !settings[setting],\r\n        }));\r\n    }\r\n\r\n    public setReferenceDate(dateEvent?: HTMLInputElement): void {\r\n        this.importSettings.update((settings) => ({\r\n            ...settings,\r\n            referenceDate: dateEvent ? new Date(dateEvent.value) : undefined,\r\n            isReleaseDate: dateEvent ? (settings.referenceDate ? settings.isReleaseDate : true) : undefined,\r\n        }));\r\n    }\r\n\r\n    protected setReferenceDateType(event: Event): void {\r\n        const target = event.target as HTMLInputElement;\r\n        this.importSettings.update((settings) => ({\r\n            ...settings,\r\n            isReleaseDate: JSON.parse(target.value),\r\n        }));\r\n    }\r\n}\r\n", "<div class=\"import-settings-container p-3\">\r\n    <div class=\"row m-0\">\r\n        @let baseTranslationKey = 'artemisApp.courseCompetency.importSettings';\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                importSettingTemplate;\r\n                context: {\r\n                    value: importRelations(),\r\n                    setting: 'importRelations',\r\n                    label: baseTranslationKey + '.importRelationsLabel',\r\n                    tooltip: baseTranslationKey + '.importRelationsTooltip',\r\n                }\r\n            \"\r\n        />\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                importSettingTemplate;\r\n                context: {\r\n                    value: importExercises(),\r\n                    setting: 'importExercises',\r\n                    label: baseTranslationKey + '.importExercisesLabel',\r\n                    tooltip: baseTranslationKey + '.importExercisesTooltip',\r\n                }\r\n            \"\r\n        />\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                importSettingTemplate;\r\n                context: {\r\n                    value: importLectures(),\r\n                    setting: 'importLectures',\r\n                    label: baseTranslationKey + '.importLecturesLabel',\r\n                    tooltip: baseTranslationKey + '.importLecturesTooltip',\r\n                }\r\n            \"\r\n        />\r\n    </div>\r\n    <hr class=\"my-3\" />\r\n    <div class=\"row m-0\">\r\n        <div class=\"col p-0 pe-2\">\r\n            <div class=\"d-flex align-items-center\">\r\n                <label for=\"reference-date-field\" jhiTranslate=\"artemisApp.courseCompetency.importSettings.referenceDateLabel\"></label>\r\n                <fa-icon\r\n                    [icon]=\"faQuestionCircle\"\r\n                    size=\"sm\"\r\n                    class=\"ms-1 text-secondary\"\r\n                    [ngbTooltip]=\"'artemisApp.courseCompetency.importSettings.referenceDateTooltip' | artemisTranslate\"\r\n                />\r\n            </div>\r\n            <div class=\"d-flex\">\r\n                <input\r\n                    class=\"form-control position-relative ps-5\"\r\n                    id=\"reference-date-field\"\r\n                    type=\"text\"\r\n                    [value]=\"referenceDate()\"\r\n                    [owlDateTime]=\"dt\"\r\n                    [owlDateTimeTrigger]=\"dt\"\r\n                    (dateTimeChange)=\"setReferenceDate($event)\"\r\n                    name=\"datePicker\"\r\n                />\r\n                <button [owlDateTimeTrigger]=\"dt\" class=\"btn position-absolute\" type=\"button\">\r\n                    <fa-icon [icon]=\"faCalendarAlt\" />\r\n                </button>\r\n                <div class=\"position-relative\">\r\n                    <button class=\"btn position-absolute\" type=\"button\" style=\"right: 0\" (click)=\"setReferenceDate(undefined)\">\r\n                        <fa-icon [icon]=\"faCircleXmark\" [class.text-secondary]=\"!referenceDate()\" />\r\n                    </button>\r\n                </div>\r\n                <owl-date-time #dt />\r\n            </div>\r\n        </div>\r\n        <div class=\"col p-0 ps-2 align-items-center\">\r\n            <div class=\"d-flex align-items-center\">\r\n                <label for=\"reference-date-type-select\" jhiTranslate=\"artemisApp.courseCompetency.importSettings.referenceDateTypeLabel\"></label>\r\n                <fa-icon\r\n                    [icon]=\"faQuestionCircle\"\r\n                    size=\"sm\"\r\n                    class=\"ms-1 text-secondary\"\r\n                    [ngbTooltip]=\"'artemisApp.courseCompetency.importSettings.referenceDateTypeTooltip' | artemisTranslate\"\r\n                />\r\n            </div>\r\n            <select\r\n                [required]=\"referenceDate()\"\r\n                [disabled]=\"!referenceDate()\"\r\n                [value]=\"isReleaseDate()\"\r\n                (change)=\"setReferenceDateType($event)\"\r\n                id=\"reference-date-type-select\"\r\n                name=\"dateTypes\"\r\n                class=\"form-select\"\r\n            >\r\n                <option disabled [selected]=\"isReleaseDate() === undefined\" jhiTranslate=\"artemisApp.courseCompetency.importSettings.referenceDateType.noSelection\"></option>\r\n                <option value=\"true\" jhiTranslate=\"artemisApp.courseCompetency.importSettings.referenceDateType.releaseDate\"></option>\r\n                <option value=\"false\" jhiTranslate=\"artemisApp.courseCompetency.importSettings.referenceDateType.dueDate\"></option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #importSettingTemplate let-value=\"value\" let-setting=\"setting\" let-label=\"label\" let-tooltip=\"tooltip\">\r\n    <div class=\"col p-0 d-flex align-items-center\">\r\n        <input [id]=\"setting + '-checkbox'\" type=\"checkbox\" [checked]=\"value\" (click)=\"toggleImportSetting(setting)\" />\r\n        <label [for]=\"setting + '-checkbox'\" class=\"ms-2\" [jhiTranslate]=\"label\"></label>\r\n        <fa-icon [icon]=\"faQuestionCircle\" size=\"sm\" class=\"ms-1 text-secondary\" [ngbTooltip]=\"tooltip | artemisTranslate\" />\r\n    </div>\r\n</ng-template>\r\n", "import { Component, computed, inject, input, signal } from '@angular/core';\r\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { ImportTableComponent } from 'app/shared/import-list/import-table.component';\r\nimport { PagingService } from 'app/exercises/shared/manage/paging.service';\r\nimport { CourseForImportDTOPagingService } from 'app/course/course-for-import-dto-paging-service';\r\nimport { Column } from 'app/shared/import/import.component';\r\nimport { Course } from 'app/entities/course.model';\r\nimport {\r\n    CourseCompetencyImportSettings,\r\n    ImportCourseCompetenciesSettingsComponent,\r\n} from 'app/course/competencies/components/import-course-competencies-settings/import-course-competencies-settings.component';\r\nimport { CourseCompetencyImportOptionsDTO } from 'app/entities/competency.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\nconst tableColumns: Column<Course>[] = [\r\n    {\r\n        name: 'TITLE',\r\n        getProperty: (entity: Course) => entity.title,\r\n    },\r\n    {\r\n        name: 'SHORT_NAME',\r\n        getProperty: (entity: Course) => entity.shortName,\r\n    },\r\n    {\r\n        name: 'SEMESTER',\r\n        getProperty: (entity: Course) => entity.semester,\r\n    },\r\n];\r\n\r\nexport interface ImportAllCourseCompetenciesResult {\r\n    course: Course;\r\n    courseCompetencyImportOptions: CourseCompetencyImportOptionsDTO;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-import-all-course-competencies-modal',\r\n    imports: [ImportTableComponent, ImportCourseCompetenciesSettingsComponent, FaIconComponent, TranslateDirective],\r\n    providers: [\r\n        {\r\n            provide: PagingService,\r\n            useClass: CourseForImportDTOPagingService,\r\n        },\r\n    ],\r\n    templateUrl: './import-all-course-competencies-modal.component.html',\r\n})\r\nexport class ImportAllCourseCompetenciesModalComponent {\r\n    protected readonly tableColumns = tableColumns;\r\n\r\n    protected readonly closeIcon = faXmark;\r\n\r\n    private readonly activeModal = inject(NgbActiveModal);\r\n\r\n    readonly courseId = input.required<number>();\r\n    readonly disabledIds = computed(() => [+this.courseId()]);\r\n\r\n    importSettings = signal<CourseCompetencyImportSettings>(new CourseCompetencyImportSettings());\r\n\r\n    public selectCourse(course: Course): void {\r\n        const courseCompetencyImportOptions = <CourseCompetencyImportOptionsDTO>{\r\n            sourceCourseId: course.id,\r\n            ...this.importSettings(),\r\n        };\r\n        this.activeModal.close(<ImportAllCourseCompetenciesResult>{\r\n            course,\r\n            courseCompetencyImportOptions,\r\n        });\r\n    }\r\n\r\n    protected closeModal(): void {\r\n        this.activeModal.close();\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"col p-3\">\r\n        <div class=\"d-flex justify-content-between\">\r\n            <h5 class=\"m-0\" jhiTranslate=\"artemisApp.courseCompetency.importAll.title\"></h5>\r\n            <fa-icon id=\"close-button\" (click)=\"closeModal()\" [icon]=\"closeIcon\" size=\"lg\" class=\"clickable\" aria-label=\"Close\" />\r\n        </div>\r\n    </div>\r\n    <hr class=\"m-0\" />\r\n    <div class=\"p-3\">\r\n        <jhi-import-course-competencies-settings [(importSettings)]=\"importSettings\" />\r\n        <div class=\"mt-4\">\r\n            <jhi-import-table\r\n                columnBaseTranslationKey=\"artemisApp.courseCompetency.importAll\"\r\n                [columns]=\"tableColumns\"\r\n                [disabledIds]=\"disabledIds()\"\r\n                (onRowSelection)=\"selectCourse($event)\"\r\n                title=\"artemisApp.courseCompetency.importAll.table.title\"\r\n            />\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Injectable } from '@angular/core';\r\nimport { BaseApiHttpService } from 'app/course/learning-paths/services/base-api-http.service';\r\nimport {\r\n    CompetencyRelationDTO,\r\n    CompetencyWithTailRelationDTO,\r\n    CourseCompetency,\r\n    CourseCompetencyImportOptionsDTO,\r\n    UpdateCourseCompetencyRelationDTO,\r\n} from 'app/entities/competency.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseCompetencyApiService extends BaseApiHttpService {\r\n    private readonly basePath = `atlas/courses/$courseId/course-competencies`;\r\n\r\n    private getPath(courseId: number): string {\r\n        return this.basePath.replace('$courseId', courseId.toString());\r\n    }\r\n\r\n    async importAllByCourseId(courseId: number, courseCompetencyImportOptions: CourseCompetencyImportOptionsDTO): Promise<CompetencyWithTailRelationDTO[]> {\r\n        return await this.post<CompetencyWithTailRelationDTO[]>(`${this.getPath(courseId)}/import-all`, courseCompetencyImportOptions);\r\n    }\r\n\r\n    async createCourseCompetencyRelation(courseId: number, relation: CompetencyRelationDTO): Promise<CompetencyRelationDTO> {\r\n        return await this.post<CompetencyRelationDTO>(`${this.getPath(courseId)}/relations`, relation);\r\n    }\r\n\r\n    async updateCourseCompetencyRelation(courseId: number, relationId: number, updateCourseCompetencyRelationDTO: UpdateCourseCompetencyRelationDTO): Promise<void> {\r\n        return await this.patch<void>(`${this.getPath(courseId)}/relations/${relationId}`, updateCourseCompetencyRelationDTO);\r\n    }\r\n\r\n    async deleteCourseCompetencyRelation(courseId: number, relationId: number): Promise<void> {\r\n        return await this.delete<void>(`${this.getPath(courseId)}/relations/${relationId}`);\r\n    }\r\n\r\n    async getCourseCompetencyRelationsByCourseId(courseId: number): Promise<CompetencyRelationDTO[]> {\r\n        return await this.get<CompetencyRelationDTO[]>(`${this.getPath(courseId)}/relations`);\r\n    }\r\n\r\n    async getCourseCompetencyRelations(courseId: number): Promise<CompetencyRelationDTO[]> {\r\n        return await this.get<CompetencyRelationDTO[]>(`${this.getPath(courseId)}/relations`);\r\n    }\r\n\r\n    async getCourseCompetenciesByCourseId(courseId: number): Promise<CourseCompetency[]> {\r\n        return await this.get<CompetencyRelationDTO[]>(`${this.getPath(courseId)}`);\r\n    }\r\n}\r\n", "import { Component, Input, inject } from '@angular/core';\r\nimport { Course, CourseForImportDTO } from 'app/entities/course.model';\r\nimport { Column, ImportComponent } from 'app/shared/import/import.component';\r\n\r\nimport { CourseCompetencyType } from 'app/entities/competency.model';\r\nimport { NgbPagination, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CourseForImportDTOPagingService } from 'app/course/course-for-import-dto-paging-service';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nconst tableColumns: Column<Course>[] = [\r\n    {\r\n        name: 'TITLE',\r\n        getProperty(entity: Course) {\r\n            return entity.title;\r\n        },\r\n    },\r\n    {\r\n        name: 'SHORT_NAME',\r\n        getProperty(entity: Course) {\r\n            return entity.shortName;\r\n        },\r\n    },\r\n    {\r\n        name: 'SEMESTER',\r\n        getProperty(entity: Course) {\r\n            return entity.semester;\r\n        },\r\n    },\r\n];\r\n\r\nexport type ImportAllFromCourseResult = {\r\n    courseForImportDTO: CourseForImportDTO;\r\n    importRelations: boolean;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-import-all-competencies',\r\n    templateUrl: './import-all-competencies.component.html',\r\n    imports: [\r\n        NgbPagination,\r\n        ButtonComponent,\r\n        TranslateDirective,\r\n        ArtemisTranslatePipe,\r\n        SortByDirective,\r\n        SortDirective,\r\n        FontAwesomeModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        NgbTypeaheadModule,\r\n    ],\r\n})\r\nexport class ImportAllCompetenciesComponent extends ImportComponent<CourseForImportDTO> {\r\n    //import relations by default\r\n    protected importRelations = true;\r\n\r\n    @Input() public competencyType: CourseCompetencyType | 'courseCompetency' = CourseCompetencyType.COMPETENCY;\r\n\r\n    constructor() {\r\n        const pagingService = inject(CourseForImportDTOPagingService);\r\n        super(pagingService);\r\n        this.columns = tableColumns;\r\n    }\r\n\r\n    /**\r\n     * Closes the modal in which the import component is opened. Returns the selected item **and if relations should be imported**\r\n     *\r\n     * @param item The item which was selected by the user for the import.\r\n     */\r\n    override selectImport(item: CourseForImportDTO) {\r\n        this.activeModal.close({ courseForImportDTO: item, importRelations: this.importRelations } as ImportAllFromCourseResult);\r\n    }\r\n}\r\n", "<form>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" [jhiTranslate]=\"'artemisApp.' + competencyType + '.importAll.title'\"></h4>\r\n        <button (click)=\"clear()\" aria-hidden=\"true\" class=\"btn-close\" data-dismiss=\"modal\" type=\"button\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"form-group form-inline\">\r\n            <span jhiTranslate=\"artemisApp.competency.importAll.search\"></span>\r\n            <input [(ngModel)]=\"searchTerm\" class=\"form-control ms-2\" name=\"searchCourse\" type=\"text\" />\r\n            <span class=\"ms-3\" jhiTranslate=\"artemisApp.competency.import.importRelations\"></span>\r\n            <input type=\"checkbox\" class=\"ms-2\" [(ngModel)]=\"importRelations\" name=\"importRelations\" />\r\n            @if (loading) {\r\n                <span class=\"ms-3\" jhiTranslate=\"loading\"></span>\r\n            }\r\n        </div>\r\n        <table class=\"table table-striped align-middle flex\">\r\n            <thead class=\"thead-dark\">\r\n                <!-- ID column, always present -->\r\n                <tr (sortChange)=\"sortRows()\" [(ascending)]=\"listSorting\" [(predicate)]=\"sortedColumn\" class=\"flex-row\" jhiSort>\r\n                    <th class=\"col-1\" jhiSortBy=\"ID\">\r\n                        <span>#</span>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                    @for (column of columns; track column) {\r\n                        <th class=\"col-4\" [jhiSortBy]=\"column.name\">\r\n                            <span>{{ 'artemisApp.competency.importAll.table.' + column.name | artemisTranslate }}</span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                    }\r\n                    <th class=\"col-1\"></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (course of content.resultsOnPage; track trackId($index, course)) {\r\n                    <tr class=\"flex-row\">\r\n                        <td class=\"col-1\">\r\n                            <span>{{ course.id }}</span>\r\n                        </td>\r\n                        @for (column of columns; track column) {\r\n                            <td class=\"text-break col-4\">\r\n                                <ngb-highlight [result]=\"column.getProperty(course)\" [term]=\"searchTerm\" />\r\n                            </td>\r\n                        }\r\n                        <td class=\"col-1\">\r\n                            <jhi-button (onClick)=\"selectImport(course)\" [disabled]=\"disabledIds.includes(course.id!)\" [title]=\"'artemisApp.competency.importAll.table.doImport'\" />\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n        <div class=\"d-flex justify-content-between p-2\">\r\n            <ngb-pagination (pageChange)=\"onPageChange($event)\" [(page)]=\"state.page\" [collectionSize]=\"total\" [maxSize]=\"10\" [pageSize]=\"state.pageSize\" [rotate]=\"true\" />\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, inject, model } from '@angular/core';\r\nimport { CompetencyService } from 'app/course/competencies/competency.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CompetencyWithTailRelationDTO, CourseCompetency, CourseCompetencyType, getIcon } from 'app/entities/competency.model';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Subject } from 'rxjs';\r\nimport { faFileImport, faPencilAlt, faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbModal, NgbProgressbar } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ImportAllCompetenciesComponent, ImportAllFromCourseResult } from 'app/course/competencies/competency-management/import-all-competencies.component';\r\nimport { PrerequisiteService } from 'app/course/competencies/prerequisite.service';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-competency-management-table',\r\n    templateUrl: './competency-management-table.component.html',\r\n    imports: [\r\n        NgbProgressbar,\r\n        NgbDropdown,\r\n        NgbDropdownMenu,\r\n        NgbDropdownToggle,\r\n        HtmlForMarkdownPipe,\r\n        TranslateDirective,\r\n        FontAwesomeModule,\r\n        DeleteButtonDirective,\r\n        ArtemisTranslatePipe,\r\n        RouterModule,\r\n        ArtemisDatePipe,\r\n    ],\r\n})\r\nexport class CompetencyManagementTableComponent implements OnInit, OnDestroy {\r\n    @Input() courseId: number;\r\n    @Input() courseCompetencies: CourseCompetency[] = [];\r\n    @Input() competencyType: CourseCompetencyType;\r\n    @Input() standardizedCompetenciesEnabled: boolean;\r\n\r\n    allCompetencies = model.required<CourseCompetency[]>();\r\n\r\n    @Output() competencyDeleted = new EventEmitter<number>();\r\n\r\n    service: CompetencyService | PrerequisiteService;\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError = this.dialogErrorSource.asObservable();\r\n\r\n    // Injected services\r\n    private readonly competencyService: CompetencyService = inject(CompetencyService);\r\n    private readonly prerequisiteService: PrerequisiteService = inject(PrerequisiteService);\r\n    private readonly alertService: AlertService = inject(AlertService);\r\n    private readonly modalService: NgbModal = inject(NgbModal);\r\n\r\n    readonly faFileImport = faFileImport;\r\n    readonly faPlus = faPlus;\r\n    readonly faPencilAlt = faPencilAlt;\r\n    readonly faTrash = faTrash;\r\n\r\n    readonly getIcon = getIcon;\r\n\r\n    ngOnInit(): void {\r\n        if (this.competencyType === CourseCompetencyType.COMPETENCY) {\r\n            this.service = this.competencyService;\r\n        } else {\r\n            this.service = this.prerequisiteService;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Opens a modal for selecting a course to import all competencies from.\r\n     */\r\n    openImportAllModal() {\r\n        const modalRef = this.modalService.open(ImportAllCompetenciesComponent, { size: 'lg', backdrop: 'static' });\r\n        //unary operator is necessary as otherwise courseId is seen as a string and will not match.\r\n        modalRef.componentInstance.disabledIds = [+this.courseId];\r\n        modalRef.componentInstance.competencyType = this.competencyType;\r\n        modalRef.result.then((result: ImportAllFromCourseResult) => {\r\n            const courseTitle = result.courseForImportDTO.title ?? '';\r\n\r\n            this.service\r\n                .importAll(this.courseId, result.courseForImportDTO.id!, result.importRelations)\r\n                .pipe(\r\n                    filter((res: HttpResponse<Array<CompetencyWithTailRelationDTO>>) => res.ok),\r\n                    map((res: HttpResponse<Array<CompetencyWithTailRelationDTO>>) => res.body),\r\n                )\r\n                .subscribe({\r\n                    next: (res: Array<CompetencyWithTailRelationDTO>) => {\r\n                        if (res.length > 0) {\r\n                            this.alertService.success(`artemisApp.${this.competencyType}.importAll.success`, { noOfCompetencies: res.length, courseTitle: courseTitle });\r\n                            this.updateDataAfterImportAll(res);\r\n                        } else {\r\n                            this.alertService.warning(`artemisApp.${this.competencyType}.importAll.warning`, { courseTitle: courseTitle });\r\n                        }\r\n                    },\r\n                    error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the component and its relation chart with the new data from the importAll modal\r\n     * @param res Array of DTOs containing the new competencies and relations\r\n     * @private\r\n     */\r\n    updateDataAfterImportAll(res: Array<CompetencyWithTailRelationDTO>) {\r\n        const importedCompetencies = res.map((dto) => dto.competency).filter((element): element is CourseCompetency => !!element);\r\n        const newCourseCompetencies = importedCompetencies.filter((competency) => !this.courseCompetencies.some((existingCompetency) => existingCompetency.id === competency.id));\r\n        this.courseCompetencies.push(...newCourseCompetencies);\r\n        this.allCompetencies.update((allCourseCompetencies) => allCourseCompetencies.concat(importedCompetencies));\r\n    }\r\n\r\n    /**\r\n     * Delete a competency (and its relations)\r\n     *\r\n     * @param competencyId the id of the competency\r\n     */\r\n    deleteCompetency(competencyId: number) {\r\n        this.service.delete(competencyId, this.courseId).subscribe({\r\n            next: () => {\r\n                this.dialogErrorSource.next('');\r\n                this.competencyDeleted.next(competencyId);\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n}\r\n", "<div class=\"d-flex flex-wrap mt-4\">\r\n    <h2 [jhiTranslate]=\"'artemisApp.' + competencyType + '.title'\"></h2>\r\n    <div class=\"ms-auto justify-content-end\">\r\n        <div ngbDropdown class=\"d-inline\">\r\n            <button id=\"importCompetenciesDropdown\" class=\"btn btn-primary\" ngbDropdownToggle>\r\n                <fa-icon [icon]=\"faFileImport\" />\r\n                {{ 'artemisApp.' + competencyType + '.manage.importButton' | artemisTranslate }}\r\n            </button>\r\n            <div ngbDropdownMenu aria-labelledby=\"importCompetenciesDropdown\">\r\n                <button class=\"btn\" id=\"competencyImportAllButton\" (click)=\"openImportAllModal()\" ngbDropdownItem>\r\n                    <fa-icon [icon]=\"faFileImport\" />\r\n                    <span [jhiTranslate]=\"'artemisApp.' + competencyType + '.manage.importAllButton'\"></span>\r\n                </button>\r\n                <a class=\"btn\" [routerLink]=\"['/course-management', courseId, competencyType + '-management', 'import']\" ngbDropdownItem>\r\n                    <fa-icon [icon]=\"faFileImport\" />\r\n                    <span [jhiTranslate]=\"'artemisApp.' + competencyType + '.manage.importFromCoursesButton'\"></span>\r\n                </a>\r\n                @if (standardizedCompetenciesEnabled) {\r\n                    <a class=\"btn\" [routerLink]=\"['/course-management', courseId, competencyType + '-management', 'import-standardized']\" ngbDropdownItem>\r\n                        <fa-icon [icon]=\"faFileImport\" />\r\n                        <span [jhiTranslate]=\"'artemisApp.' + competencyType + '.manage.importStandardizedButton'\"></span>\r\n                    </a>\r\n                }\r\n            </div>\r\n        </div>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['/course-management', courseId, competencyType + '-management', 'create']\">\r\n            <fa-icon [icon]=\"faPlus\" />\r\n            <span [jhiTranslate]=\"'artemisApp.' + competencyType + '.manage.createButton'\"></span>\r\n        </a>\r\n    </div>\r\n</div>\r\n<div class=\"container-fluid overflow-auto\">\r\n    @if (courseCompetencies.length) {\r\n        <table class=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"col\">\r\n                        <span jhiTranslate=\"artemisApp.competency.title\"></span>\r\n                    </th>\r\n                    <th class=\"col\">\r\n                        <span jhiTranslate=\"artemisApp.competency.description\"></span>\r\n                    </th>\r\n                    <th class=\"col\">\r\n                        <span jhiTranslate=\"artemisApp.competency.taxonomy\"></span>\r\n                    </th>\r\n                    <th class=\"d-none col-lg d-lg-table-cell\">\r\n                        <span jhiTranslate=\"artemisApp.competency.softDueDate\"></span>\r\n                    </th>\r\n                    <th class=\"d-none col-lg d-lg-table-cell\">\r\n                        <span jhiTranslate=\"artemisApp.competency.masteredStudents\"></span>\r\n                    </th>\r\n                    <th class=\"d-none col-lg d-lg-table-cell\">\r\n                        <span jhiTranslate=\"artemisApp.competency.optional\"></span>\r\n                    </th>\r\n                    <th class=\"col\"></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @for (competency of courseCompetencies; track competency.id; let i = $index) {\r\n                    <tr>\r\n                        <td class=\"col\">\r\n                            <a [routerLink]=\"['/courses', courseId, 'competencies', competency.id]\">{{ competency.title }}</a>\r\n                        </td>\r\n                        <td class=\"col markdown-preview\" [innerHTML]=\"competency.description | htmlForMarkdown\"></td>\r\n                        <td class=\"col\">\r\n                            <div>\r\n                                <fa-icon [icon]=\"getIcon(competency.taxonomy)\" [fixedWidth]=\"true\" container=\"body\" />\r\n                                {{ 'artemisApp.courseCompetency.taxonomies.' + (competency.taxonomy ?? 'none') | artemisTranslate }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"d-none col-lg d-lg-table-cell\">\r\n                            {{ competency.softDueDate | artemisDate }}\r\n                        </td>\r\n                        <td class=\"d-none col-lg d-lg-table-cell\">\r\n                            <ngb-progressbar\r\n                                type=\"primary\"\r\n                                [showValue]=\"true\"\r\n                                [value]=\"competency.courseProgress?.numberOfMasteredStudents ?? 0\"\r\n                                [max]=\"competency.courseProgress?.numberOfStudents ?? 0\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"col\">\r\n                            <span [jhiTranslate]=\"'global.generic.' + (competency.optional ? 'yes' : 'no')\"></span>\r\n                        </td>\r\n                        <td class=\"col\">\r\n                            <div class=\"d-flex justify-content-end\">\r\n                                <a class=\"btn btn-sm btn-primary me-1\" [routerLink]=\"['/course-management', courseId, competencyType + '-management', competency.id, 'edit']\">\r\n                                    <fa-icon [icon]=\"faPencilAlt\" />\r\n                                    <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.edit\"></span>\r\n                                </a>\r\n                                <button\r\n                                    jhiDeleteButton\r\n                                    [entityTitle]=\"competency.title ?? ''\"\r\n                                    [deleteQuestion]=\"'artemisApp.' + competencyType + '.competencyCard.delete.question'\"\r\n                                    [deleteConfirmationText]=\"'artemisApp.' + competencyType + '.competencyCard.delete.typeNameToConfirm'\"\r\n                                    (delete)=\"deleteCompetency(competency.id!)\"\r\n                                    [dialogError]=\"dialogError\"\r\n                                >\r\n                                    <fa-icon [icon]=\"faTrash\" />\r\n                                </button>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    } @else {\r\n        <span [jhiTranslate]=\"'artemisApp.' + competencyType + '.manage.empty'\"></span>\r\n    }\r\n</div>\r\n", "import { Component, computed, effect, inject, input, model, signal } from '@angular/core';\r\nimport { CompetencyRelationDTO, CompetencyRelationType, CourseCompetency, UpdateCourseCompetencyRelationDTO } from 'app/entities/competency.model';\r\n\r\nimport { CourseCompetencyApiService } from 'app/course/competencies/services/course-competency-api.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'jhi-course-competency-relation-form',\r\n    templateUrl: './course-competency-relation-form.component.html',\r\n    styleUrl: './course-competency-relation-form.component.scss',\r\n    imports: [TranslateDirective, CommonModule, FontAwesomeModule, FormsModule],\r\n})\r\nexport class CourseCompetencyRelationFormComponent {\r\n    protected readonly faSpinner = faSpinner;\r\n\r\n    protected readonly competencyRelationType = CompetencyRelationType;\r\n\r\n    private readonly courseCompetencyApiService = inject(CourseCompetencyApiService);\r\n    private readonly alertService = inject(AlertService);\r\n\r\n    readonly courseId = input.required<number>();\r\n    readonly courseCompetencies = input.required<CourseCompetency[]>();\r\n    readonly relations = model.required<CompetencyRelationDTO[]>();\r\n    readonly selectedRelationId = model.required<number | undefined>();\r\n\r\n    readonly headCompetencyId = signal<number | undefined>(undefined);\r\n    readonly tailCompetencyId = signal<number | undefined>(undefined);\r\n    readonly relationType = model<CompetencyRelationType | undefined>(undefined);\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n\r\n    readonly relationAlreadyExists = computed(() => this.getRelation(this.headCompetencyId(), this.tailCompetencyId()) !== undefined);\r\n    readonly exactRelationAlreadyExists = computed(() => this.getExactRelation(this.headCompetencyId(), this.tailCompetencyId(), this.relationType()) !== undefined);\r\n\r\n    private readonly selectableTailCourseCompetencyIds = computed(() => {\r\n        if (this.headCompetencyId() && this.relationType()) {\r\n            return this.getSelectableTailCompetencyIds(this.headCompetencyId()!, this.relationType()!);\r\n        }\r\n        return this.courseCompetencies().map(({ id }) => id!);\r\n    });\r\n\r\n    readonly showCircularDependencyError = computed(() => this.tailCompetencyId() && !this.selectableTailCourseCompetencyIds().includes(this.tailCompetencyId()!));\r\n\r\n    constructor() {\r\n        effect(() => this.selectRelation(this.selectedRelationId()));\r\n    }\r\n\r\n    protected isCourseCompetencySelectable(courseCompetencyId: number): boolean {\r\n        return this.selectableTailCourseCompetencyIds().includes(courseCompetencyId);\r\n    }\r\n\r\n    private selectRelation(relationId?: number): void {\r\n        const relation = this.relations().find(({ id }) => id === relationId);\r\n        if (relation) {\r\n            this.headCompetencyId.set(relation?.headCompetencyId);\r\n            this.tailCompetencyId.set(relation?.tailCompetencyId);\r\n            this.relationType.set(relation?.relationType);\r\n        }\r\n    }\r\n\r\n    public selectCourseCompetency(courseCompetencyId: number): void {\r\n        if (!this.headCompetencyId()) {\r\n            this.selectHeadCourseCompetency(courseCompetencyId);\r\n        } else if (!this.tailCompetencyId()) {\r\n            this.selectTailCourseCompetency(courseCompetencyId);\r\n        } else {\r\n            this.selectHeadCourseCompetency(courseCompetencyId);\r\n        }\r\n    }\r\n\r\n    protected selectHeadCourseCompetency(headId: number) {\r\n        this.headCompetencyId.set(headId);\r\n        this.tailCompetencyId.set(undefined);\r\n        this.selectedRelationId.set(undefined);\r\n    }\r\n\r\n    protected selectTailCourseCompetency(tailId: number) {\r\n        this.tailCompetencyId.set(tailId);\r\n        const existingRelation = this.getRelation(this.headCompetencyId(), this.tailCompetencyId());\r\n        if (existingRelation) {\r\n            this.selectedRelationId.set(existingRelation.id);\r\n        } else {\r\n            this.selectedRelationId.set(undefined);\r\n        }\r\n    }\r\n\r\n    protected async createRelation(): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const courseCompetencyRelation = await this.courseCompetencyApiService.createCourseCompetencyRelation(this.courseId(), {\r\n                headCompetencyId: this.headCompetencyId()!,\r\n                tailCompetencyId: Number(this.tailCompetencyId()!),\r\n                relationType: this.relationType()!,\r\n            });\r\n            this.relations.update((relations) => [...relations, courseCompetencyRelation]);\r\n            this.selectedRelationId.set(courseCompetencyRelation.id!);\r\n        } catch (error) {\r\n            this.alertService.error(error.message);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    protected getExactRelation(headCompetencyId?: number, tailCompetencyId?: number, relationType?: CompetencyRelationType): CompetencyRelationDTO | undefined {\r\n        return this.relations().find(\r\n            (relation) => relation.headCompetencyId === headCompetencyId && relation.tailCompetencyId === tailCompetencyId && relation.relationType === relationType,\r\n        );\r\n    }\r\n\r\n    protected getRelation(headCompetencyId?: number, tailCompetencyId?: number): CompetencyRelationDTO | undefined {\r\n        return this.relations().find((relation) => relation.headCompetencyId === headCompetencyId && relation.tailCompetencyId === tailCompetencyId);\r\n    }\r\n\r\n    protected async updateRelation(): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const newRelationType = this.relationType()!;\r\n            await this.courseCompetencyApiService.updateCourseCompetencyRelation(this.courseId(), this.selectedRelationId()!, <UpdateCourseCompetencyRelationDTO>{\r\n                newRelationType: newRelationType,\r\n            });\r\n            this.relations.update((relations) =>\r\n                relations.map((relation) => {\r\n                    if (relation.id === this.selectedRelationId()) {\r\n                        return { ...relation, relationType: newRelationType };\r\n                    }\r\n                    return relation;\r\n                }),\r\n            );\r\n        } catch (error) {\r\n            this.alertService.error(error.message);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    protected async deleteRelation(): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const deletedRelation = this.relations().find(\r\n                ({ headCompetencyId, tailCompetencyId, relationType }) =>\r\n                    headCompetencyId == this.headCompetencyId() && tailCompetencyId == this.tailCompetencyId() && relationType === this.relationType(),\r\n            );\r\n            await this.courseCompetencyApiService.deleteCourseCompetencyRelation(this.courseId(), deletedRelation!.id!);\r\n            this.relations.update((relations) => relations.filter(({ id }) => id !== deletedRelation!.id));\r\n            this.selectedRelationId.set(undefined);\r\n        } catch (error) {\r\n            this.alertService.error(error.message);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to get the selectable tail competency ids for the given head\r\n     * competency and relation type without creating a cyclic dependency\r\n     *\r\n     * @param headCompetencyId The selected head competency id\r\n     * @param relationType The selected relation type\r\n     * @private\r\n     *\r\n     * @returns The selectable tail competency ids\r\n     */\r\n    private getSelectableTailCompetencyIds(headCompetencyId: number, relationType: CompetencyRelationType): number[] {\r\n        return this.courseCompetencies()\r\n            .map(({ id }) => id!)\r\n            .filter((id) => id !== headCompetencyId) // Exclude the head itself\r\n            .filter((id) => {\r\n                let relations = this.relations();\r\n                const existingRelation = this.getRelation(headCompetencyId, id);\r\n                if (existingRelation) {\r\n                    relations = relations.filter((relation) => relation.id !== existingRelation.id);\r\n                }\r\n                const potentialRelation: CompetencyRelationDTO = {\r\n                    headCompetencyId: headCompetencyId,\r\n                    tailCompetencyId: id,\r\n                    relationType: relationType,\r\n                };\r\n                return !this.detectCycleInRelations(relations.concat(potentialRelation), this.courseCompetencies().length);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Function to detect cycles in the competency relations\r\n     * @param relations The list of competency relations\r\n     * @param numOfCompetencies The total number of competencies\r\n     * @private\r\n     *\r\n     * @returns True if a cycle is detected, false otherwise\r\n     */\r\n    private detectCycleInRelations(relations: CompetencyRelationDTO[], numOfCompetencies: number): boolean {\r\n        // Create a map to store the competency IDs and map them to incremental indices\r\n        const idToIndexMap = new Map<number, number>();\r\n        let currentIndex = 0;\r\n\r\n        // map the competency IDs to incremental indices\r\n        relations.forEach((relation) => {\r\n            const tail = relation.tailCompetencyId!;\r\n            const head = relation.headCompetencyId!;\r\n\r\n            if (!idToIndexMap.has(tail)) {\r\n                idToIndexMap.set(tail, currentIndex++);\r\n            }\r\n            if (!idToIndexMap.has(head)) {\r\n                idToIndexMap.set(head, currentIndex++);\r\n            }\r\n        });\r\n\r\n        const unionFind = new UnionFind(numOfCompetencies);\r\n\r\n        // Apply Union-Find based on the MATCHES relations\r\n        relations.forEach((relation) => {\r\n            if (relation.relationType === CompetencyRelationType.MATCHES) {\r\n                const tailIndex = idToIndexMap.get(relation.tailCompetencyId!);\r\n                const headIndex = idToIndexMap.get(relation.headCompetencyId!);\r\n\r\n                if (tailIndex !== undefined && headIndex !== undefined) {\r\n                    // Perform union operation to group matching course competencies into sets\r\n                    unionFind.union(tailIndex, headIndex);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Build the reduced graph for EXTENDS and ASSUMES relations\r\n        const reducedGraph: number[][] = Array.from({ length: numOfCompetencies }, () => []);\r\n\r\n        relations.forEach((relation) => {\r\n            const tail = unionFind.find(idToIndexMap.get(relation.tailCompetencyId!)!);\r\n            const head = unionFind.find(idToIndexMap.get(relation.headCompetencyId!)!);\r\n\r\n            if (relation.relationType === CompetencyRelationType.EXTENDS || relation.relationType === CompetencyRelationType.ASSUMES) {\r\n                reducedGraph[tail].push(head);\r\n            }\r\n        });\r\n\r\n        return this.hasCycle(reducedGraph, numOfCompetencies);\r\n    }\r\n\r\n    private hasCycle(graph: number[][], noOfCourseCompetencies: number): boolean {\r\n        const visited: boolean[] = Array(noOfCourseCompetencies).fill(false);\r\n        const recursionStack: boolean[] = Array(noOfCourseCompetencies).fill(false);\r\n\r\n        // Depth-first search to detect cycles\r\n        const depthFirstSearch = (v: number): boolean => {\r\n            visited[v] = true;\r\n            recursionStack[v] = true;\r\n\r\n            for (const neighbor of graph[v] || []) {\r\n                if (!visited[neighbor]) {\r\n                    if (depthFirstSearch(neighbor)) return true;\r\n                } else if (recursionStack[neighbor]) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            recursionStack[v] = false;\r\n            return false;\r\n        };\r\n\r\n        for (let node = 0; node < noOfCourseCompetencies; node++) {\r\n            if (!visited[node]) {\r\n                if (depthFirstSearch(node)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// Union-Find (Disjoint Set) class (https://en.wikipedia.org/wiki/Disjoint-set_data_structure -> union by rank)\r\nexport class UnionFind {\r\n    parent: number[];\r\n    rank: number[];\r\n\r\n    constructor(size: number) {\r\n        this.parent = Array.from({ length: size }, (_, index) => index);\r\n        this.rank = Array(size).fill(1);\r\n    }\r\n\r\n    // Find the representative of the set that contains the `competencyId`\r\n    public find(competencyId: number): number {\r\n        if (this.parent[competencyId] !== competencyId) {\r\n            this.parent[competencyId] = this.find(this.parent[competencyId]); // Path compression\r\n        }\r\n        return this.parent[competencyId];\r\n    }\r\n\r\n    // Union the sets containing `tailCompetencyId` and `headCompetencyId`\r\n    public union(tailCompetencyId: number, headCompetencyId: number) {\r\n        const rootU = this.find(tailCompetencyId);\r\n        const rootV = this.find(headCompetencyId);\r\n        if (rootU !== rootV) {\r\n            // Union by rank\r\n            if (this.rank[rootU] > this.rank[rootV]) {\r\n                this.parent[rootV] = rootU;\r\n            } else if (this.rank[rootU] < this.rank[rootV]) {\r\n                this.parent[rootU] = rootV;\r\n            } else {\r\n                this.parent[rootV] = rootU;\r\n                this.rank[rootU] += 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "<div class=\"course-competency-relation-form-container row m-0 p-3 align-items-end\">\r\n    <div class=\"form-group col m-0 ps-0\">\r\n        <label for=\"head\" jhiTranslate=\"artemisApp.courseCompetency.relations.form.headCourseCompetencyLabel\"></label>\r\n        <select\r\n            [ngClass]=\"{ 'border-danger': showCircularDependencyError() }\"\r\n            class=\"form-select mt-1\"\r\n            id=\"head\"\r\n            name=\"head\"\r\n            [ngModel]=\"headCompetencyId()\"\r\n            (ngModelChange)=\"selectHeadCourseCompetency($event)\"\r\n        >\r\n            <option [value]=\"undefined\" disabled jhiTranslate=\"artemisApp.courseCompetency.relations.form.headCourseCompetencyDefaultOption\"></option>\r\n            @for (courseCompetency of courseCompetencies(); track courseCompetency.id) {\r\n                <option [ngValue]=\"courseCompetency.id\">{{ courseCompetency.title }}</option>\r\n            }\r\n        </select>\r\n    </div>\r\n    <div class=\"form-group col m-0\">\r\n        <label for=\"type\" jhiTranslate=\"artemisApp.courseCompetency.relations.form.relationTypeLabel\"></label>\r\n        <select [ngClass]=\"{ 'border-danger': showCircularDependencyError() }\" class=\"form-select mt-1\" id=\"type\" name=\"type\" [(ngModel)]=\"relationType\">\r\n            <option [value]=\"undefined\" disabled jhiTranslate=\"artemisApp.courseCompetency.relations.form.relationTypeDefaultOption\"></option>\r\n            @for (relationType of competencyRelationType | keyvalue; track relationType) {\r\n                <option [value]=\"relationType.value\" [jhiTranslate]=\"'artemisApp.courseCompetency.relations.relationTypes.' + relationType.value\"></option>\r\n            }\r\n        </select>\r\n    </div>\r\n    <div class=\"form-group col m-0\">\r\n        <label for=\"tail\" jhiTranslate=\"artemisApp.courseCompetency.relations.form.tailCourseCompetencyLabel\"></label>\r\n        <select\r\n            [ngClass]=\"{ 'border-danger': showCircularDependencyError() }\"\r\n            class=\"form-select mt-1\"\r\n            id=\"tail\"\r\n            name=\"tail\"\r\n            [ngModel]=\"tailCompetencyId()\"\r\n            (ngModelChange)=\"selectTailCourseCompetency($event)\"\r\n        >\r\n            <option [value]=\"undefined\" disabled jhiTranslate=\"artemisApp.courseCompetency.relations.form.tailCourseCompetencyDefaultOption\"></option>\r\n            @for (courseCompetency of courseCompetencies(); track courseCompetency.id) {\r\n                <option [disabled]=\"!isCourseCompetencySelectable(courseCompetency.id!)\" [ngValue]=\"courseCompetency.id\">{{ courseCompetency.title }}</option>\r\n            }\r\n        </select>\r\n    </div>\r\n    <div class=\"col-2 pe-0 d-flex justify-content-end\">\r\n        @if (exactRelationAlreadyExists()) {\r\n            <button (click)=\"deleteRelation()\" class=\"btn btn-danger\">\r\n                @if (isLoading()) {\r\n                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                }\r\n                <span jhiTranslate=\"artemisApp.courseCompetency.relations.form.deleteRelationButtonLabel\"></span>\r\n            </button>\r\n        } @else if (relationAlreadyExists()) {\r\n            <button (click)=\"updateRelation()\" class=\"btn btn-info\" [disabled]=\"showCircularDependencyError()\">\r\n                @if (isLoading()) {\r\n                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                }\r\n                <span jhiTranslate=\"artemisApp.courseCompetency.relations.form.updateRelationButtonLabel\"></span>\r\n            </button>\r\n        } @else {\r\n            <button (click)=\"createRelation()\" [disabled]=\"showCircularDependencyError() || !tailCompetencyId() || !headCompetencyId() || !relationType()\" class=\"btn btn-primary\">\r\n                @if (isLoading()) {\r\n                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                }\r\n                <span jhiTranslate=\"artemisApp.courseCompetency.relations.form.createRelationButtonLabel\"></span>\r\n            </button>\r\n        }\r\n    </div>\r\n    @if (showCircularDependencyError()) {\r\n        <small class=\"p-0 mt-2 text-danger\" jhiTranslate=\"artemisApp.courseCompetency.relations.form.cyclicDependencyError\"></small>\r\n    }\r\n</div>\r\n", "import { AfterViewInit, Component, ElementRef, computed, inject, input, output } from '@angular/core';\r\nimport { SizeUpdate } from 'app/course/learning-paths/components/competency-node/competency-node.component';\r\nimport { Node } from '@swimlane/ngx-graph';\r\nimport { CourseCompetencyType } from 'app/entities/competency.model';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-competency-relation-node',\r\n    imports: [NgClass, TranslateDirective, NgbTooltipModule, ArtemisTranslatePipe],\r\n    templateUrl: './course-competency-relation-node.component.html',\r\n    styleUrl: './course-competency-relation-node.component.scss',\r\n})\r\nexport class CourseCompetencyRelationNodeComponent implements AfterViewInit {\r\n    protected readonly CourseCompetencyType = CourseCompetencyType;\r\n    // height of node element in pixels\r\n    private readonly nodeHeight = 45.59;\r\n\r\n    private readonly element = inject(ElementRef);\r\n\r\n    courseCompetencyNode = input.required<Node>();\r\n    readonly courseCompetencyType = computed(() => this.courseCompetencyNode().data.type!);\r\n\r\n    readonly onSizeSet = output<SizeUpdate>();\r\n\r\n    ngAfterViewInit(): void {\r\n        this.setDimensions(this.element);\r\n    }\r\n\r\n    setDimensions(element: ElementRef): void {\r\n        const width: number = element.nativeElement.offsetWidth;\r\n        const height = this.nodeHeight;\r\n        this.onSizeSet.emit({ id: `${this.courseCompetencyNode().id}`, dimension: { height, width } });\r\n    }\r\n}\r\n", "<div class=\"d-inline-block competency-node\">\r\n    <div\r\n        class=\"progress-container d-inline-block\"\r\n        [ngClass]=\"{\r\n            'competency-container': courseCompetencyType() === CourseCompetencyType.COMPETENCY,\r\n            'prerequisite-container': courseCompetencyType() === CourseCompetencyType.PREREQUISITE,\r\n        }\"\r\n        [ngbTooltip]=\"'artemisApp.courseCompetency.relations.graph.tooltips.' + this.courseCompetencyType() | artemisTranslate\"\r\n    >\r\n        <small>\r\n            <strong [jhiTranslate]=\"'artemisApp.courseCompetency.relations.graph.nodeTypes.' + this.courseCompetencyType()\"></strong>\r\n        </small>\r\n    </div>\r\n    <span class=\"d-inline-block ms-1\"\r\n        ><strong>{{ courseCompetencyNode().label }}</strong></span\r\n    >\r\n</div>\r\n", "import { Component, computed, effect, input, model, output, signal } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faFileImport } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbAccordionModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompetencyRelationDTO, CourseCompetency } from 'app/entities/competency.model';\r\n\r\nimport { Edge, NgxGraphModule, Node } from '@swimlane/ngx-graph';\r\nimport { Subject } from 'rxjs';\r\nimport { SizeUpdate } from 'app/course/learning-paths/components/competency-node/competency-node.component';\r\nimport { CourseCompetencyRelationNodeComponent } from 'app/course/competencies/components/course-competency-relation-node/course-competency-relation-node.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-course-competencies-relation-graph',\r\n    imports: [FontAwesomeModule, NgbAccordionModule, NgxGraphModule, CourseCompetencyRelationNodeComponent, ArtemisTranslatePipe],\r\n    templateUrl: './course-competencies-relation-graph.component.html',\r\n    styleUrl: './course-competencies-relation-graph.component.scss',\r\n})\r\nexport class CourseCompetenciesRelationGraphComponent {\r\n    protected readonly faFileImport = faFileImport;\r\n\r\n    readonly courseCompetencies = input.required<CourseCompetency[]>();\r\n    readonly relations = input.required<CompetencyRelationDTO[]>();\r\n\r\n    readonly selectedRelationId = model.required<number | undefined>();\r\n\r\n    readonly onCourseCompetencySelection = output<number>();\r\n\r\n    readonly update$ = new Subject<boolean>();\r\n    readonly center$ = new Subject<boolean>();\r\n\r\n    readonly nodes = signal<Node[]>([]);\r\n\r\n    readonly edges = computed<Edge[]>(() => {\r\n        return this.relations().map((relation) => ({\r\n            id: `edge-${relation.id}`,\r\n            source: `${relation.headCompetencyId}`,\r\n            target: `${relation.tailCompetencyId}`,\r\n            label: relation.relationType,\r\n            data: {\r\n                id: relation.id,\r\n            },\r\n        }));\r\n    });\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            return this.nodes.set(\r\n                this.courseCompetencies().map(\r\n                    (courseCompetency): Node => ({\r\n                        id: courseCompetency.id!.toString(),\r\n                        label: courseCompetency.title,\r\n                        data: {\r\n                            id: courseCompetency.id,\r\n                            type: courseCompetency.type,\r\n                        },\r\n                    }),\r\n                ),\r\n            );\r\n        });\r\n    }\r\n\r\n    protected selectRelation(relationId: number): void {\r\n        this.selectedRelationId.set(relationId);\r\n    }\r\n\r\n    protected setNodeDimension(sizeUpdate: SizeUpdate): void {\r\n        this.nodes.update((nodes) =>\r\n            nodes.map((node) => {\r\n                if (node.id === sizeUpdate.id) {\r\n                    node.dimension = sizeUpdate.dimension;\r\n                }\r\n                return node;\r\n            }),\r\n        );\r\n    }\r\n}\r\n", "<div class=\"course-competencies-graph-container h-100\" xmlns:svg=\"http://www.w3.org/2000/svg\">\r\n    <ngx-graph\r\n        [nodes]=\"nodes()\"\r\n        [links]=\"edges()\"\r\n        layout=\"dagreCluster\"\r\n        [draggingEnabled]=\"false\"\r\n        [showMiniMap]=\"true\"\r\n        [miniMapMaxWidth]=\"200\"\r\n        [miniMapMaxHeight]=\"150\"\r\n        [update$]=\"update$\"\r\n        [center$]=\"center$\"\r\n    >\r\n        <ng-template #defsTemplate>\r\n            <svg:marker id=\"arrow\" viewBox=\"0 -5 10 10\" refX=\"8\" refY=\"0\" markerWidth=\"4\" markerHeight=\"4\" orient=\"auto\">\r\n                <svg:path d=\"M0,-5L10,0L0,5\" class=\"arrow-head\" />\r\n            </svg:marker>\r\n        </ng-template>\r\n        <ng-template #nodeTemplate let-node>\r\n            <svg:g [attr.width]=\"node.dimension.width\" [attr.height]=\"node.dimension.height\" (click)=\"onCourseCompetencySelection.emit(node.data.id)\">\r\n                <svg:foreignObject class=\"node\" [attr.width]=\"node.dimension.width\" [attr.height]=\"node.dimension.height\">\r\n                    <jhi-course-competency-relation-node [courseCompetencyNode]=\"node\" (onSizeSet)=\"setNodeDimension($event)\" />\r\n                </svg:foreignObject>\r\n            </svg:g>\r\n        </ng-template>\r\n        <ng-template #linkTemplate let-link>\r\n            <svg:g class=\"edge\" (click)=\"selectRelation(link.data.id)\">\r\n                <svg:path class=\"line\" [class.selected]=\"selectedRelationId() === link.data.id\" stroke-width=\"2\" marker-end=\"url(#arrow)\" />\r\n                <svg:text class=\"edge-label\" text-anchor=\"middle\">\r\n                    <textPath class=\"text-path\" [attr.href]=\"'#' + link.id\" [style.dominant-baseline]=\"link.dominantBaseline\" startOffset=\"50%\">\r\n                        {{ ('artemisApp.courseCompetency.relations.relationTypes.' + link.label | artemisTranslate).toUpperCase() }}\r\n                    </textPath>\r\n                </svg:text>\r\n            </svg:g>\r\n        </ng-template>\r\n    </ngx-graph>\r\n</div>\r\n", "import { Component, effect, inject, input, signal, viewChild } from '@angular/core';\r\nimport { CourseCompetencyApiService } from 'app/course/competencies/services/course-competency-api.service';\r\nimport { CompetencyRelationDTO, CourseCompetency } from 'app/entities/competency.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\n\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CourseCompetencyRelationFormComponent } from 'app/course/competencies/components/course-competency-relation-form/course-competency-relation-form.component';\r\nimport { CourseCompetenciesRelationGraphComponent } from '../course-competencies-relation-graph/course-competencies-relation-graph.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-course-competencies-relation-modal',\r\n    imports: [CourseCompetenciesRelationGraphComponent, CourseCompetencyRelationFormComponent, TranslateDirective],\r\n    templateUrl: './course-competencies-relation-modal.component.html',\r\n    styleUrl: './course-competencies-relation-modal.component.scss',\r\n})\r\nexport class CourseCompetenciesRelationModalComponent {\r\n    private readonly courseCompetencyApiService = inject(CourseCompetencyApiService);\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly activeModal = inject(NgbActiveModal);\r\n\r\n    private readonly courseCompetencyRelationFormComponent = viewChild.required(CourseCompetencyRelationFormComponent);\r\n\r\n    readonly courseId = input.required<number>();\r\n    readonly courseCompetencies = input.required<CourseCompetency[]>();\r\n\r\n    readonly selectedRelationId = signal<number | undefined>(undefined);\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    readonly relations = signal<CompetencyRelationDTO[]>([]);\r\n\r\n    constructor() {\r\n        effect(() => this.loadRelations(this.courseId()));\r\n    }\r\n\r\n    private async loadRelations(courseId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const relations = await this.courseCompetencyApiService.getCourseCompetencyRelationsByCourseId(courseId);\r\n            this.relations.set(relations);\r\n        } catch (error) {\r\n            onError(this.alertService, error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    protected selectCourseCompetency(courseCompetencyId: number) {\r\n        this.courseCompetencyRelationFormComponent().selectCourseCompetency(courseCompetencyId);\r\n    }\r\n\r\n    protected closeModal(): void {\r\n        this.activeModal.close();\r\n    }\r\n}\r\n", "<div class=\"course-competencies-graph-modal\">\r\n    <div class=\"col p-3\">\r\n        <div class=\"row m-0\">\r\n            <span class=\"col p-0 h5 m-0 align-self-center\" jhiTranslate=\"artemisApp.courseCompetency.relations.modalTitle\"></span>\r\n            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"closeModal()\"></button>\r\n        </div>\r\n    </div>\r\n    <hr class=\"m-0\" />\r\n    <div class=\"course-competencies-graph-modal-body h-100\">\r\n        @if (isLoading()) {\r\n            <div class=\"row justify-content-center m-4\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                    <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n                </div>\r\n            </div>\r\n        } @else {\r\n            <div class=\"p-3\">\r\n                <jhi-course-competency-relation-form\r\n                    [(selectedRelationId)]=\"selectedRelationId\"\r\n                    [courseId]=\"courseId()\"\r\n                    [(relations)]=\"relations\"\r\n                    [courseCompetencies]=\"courseCompetencies()\"\r\n                />\r\n            </div>\r\n            <jhi-course-competencies-relation-graph\r\n                [(selectedRelationId)]=\"selectedRelationId\"\r\n                [relations]=\"relations()\"\r\n                [courseCompetencies]=\"courseCompetencies()\"\r\n                (onCourseCompetencySelection)=\"selectCourseCompetency($event)\"\r\n            />\r\n        }\r\n    </div>\r\n</div>\r\n", "import { Component, inject } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-course-competency-explanation-modal',\r\n    imports: [TranslateDirective, FontAwesomeModule],\r\n    templateUrl: './course-competency-explanation-modal.component.html',\r\n    styleUrl: './course-competency-explanation-modal.component.scss',\r\n})\r\nexport class CourseCompetencyExplanationModalComponent {\r\n    protected readonly closeIcon = faXmark;\r\n\r\n    protected readonly DOCUMENTATION_LINK = 'https://docs.artemis.cit.tum.de/user/adaptive-learning/';\r\n\r\n    private readonly activeModal = inject(NgbActiveModal);\r\n\r\n    protected closeModal(): void {\r\n        this.activeModal.close();\r\n    }\r\n}\r\n", "<div class=\"course-competency-explanation-modal\">\r\n    <div class=\"col p-3\">\r\n        <div class=\"row m-0\">\r\n            <span class=\"col p-0 h5 m-0 align-self-center\" jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.title\"></span>\r\n            <fa-icon id=\"close-button\" (click)=\"closeModal()\" [icon]=\"closeIcon\" class=\"col-md-auto h5 clickable m-0 p-1 pe-0\" />\r\n        </div>\r\n    </div>\r\n    <hr class=\"m-0\" />\r\n    <div class=\"h-100 p-3\">\r\n        <div>\r\n            <h5 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.adaptiveLearning.title1\"></h5>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.adaptiveLearning.paragraph1\"></p>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.adaptiveLearning.paragraph2\"></p>\r\n\r\n            <h5 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.adaptiveLearning.title2\"></h5>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.adaptiveLearning.paragraph3\"></p>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.adaptiveLearning.paragraph4\"></p>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n            <h5 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyCreation.title\"></h5>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyCreation.paragraph1\"></p>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyCreation.paragraph2\"></p>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyCreation.paragraph3\"></p>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyCreation.paragraph4\"></p>\r\n            <div class=\"explanation-model-gif\">\r\n                <video controls preload=\"metadata\" aria-label=\"Tutorial: Creating course competencies\" poster=\"public/videos/course-competencies/create-competencies-poster.jpg\">\r\n                    <source src=\"public/videos/course-competencies/create-competencies.mp4\" type=\"video/mp4\" />\r\n                    <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationVideoParagraph.first\"></p>\r\n                    <a href=\"public/videos/course-competencies/create-competencies.mp4\"\r\n                        ><p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationVideoParagraph.link\"></p\r\n                    ></a>\r\n                    <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationVideoParagraph.last\"></p>\r\n                </video>\r\n            </div>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyCreation.paragraph5\" [translateValues]=\"{ link: DOCUMENTATION_LINK }\"></p>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n            <h5 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.title\"></h5>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.paragraph1\"></p>\r\n\r\n            <strong><p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.paragraph2\"></p> </strong>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.paragraph3\"></p>\r\n            <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.paragraph4\"></p>\r\n            <div class=\"explanation-model-gif\">\r\n                <video\r\n                    controls\r\n                    preload=\"metadata\"\r\n                    aria-label=\"Tutorial: Creating course competency relations\"\r\n                    poster=\"public/videos/course-competencies/create-course-competency-relations-poster.jpg\"\r\n                >\r\n                    <source src=\"public/videos/course-competencies/create-course-competency-relations.mp4\" type=\"video/mp4\" />\r\n                    <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationVideoParagraph.first\"></p>\r\n                    <a href=\"public/videos/course-competencies/create-competencies.mp4\"\r\n                        ><p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationVideoParagraph.link\"></p\r\n                    ></a>\r\n                    <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationVideoParagraph.last\"></p>\r\n                </video>\r\n            </div>\r\n            <div class=\"mt-3\">\r\n                <h6 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationTitle1\"></h6>\r\n                <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationParagraph1\"></p>\r\n                <strong><p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.exampleLabel\"></p> </strong>\r\n                <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationParagraph2\"></p>\r\n            </div>\r\n            <div>\r\n                <h6 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationTitle2\"></h6>\r\n                <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationParagraph3\"></p>\r\n                <strong><p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.exampleLabel\"></p> </strong>\r\n                <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationParagraph4\"></p>\r\n            </div>\r\n            <div>\r\n                <h6 jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationTitle3\"></h6>\r\n                <p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationParagraph5\"></p>\r\n                <strong><p jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.exampleLabel\"></p> </strong>\r\n                <p class=\"mb-0\" jhiTranslate=\"artemisApp.courseCompetency.featureExplanation.courseCompetencyRelations.relationParagraph6\"></p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, OnInit, computed, effect, inject, signal, untracked } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CompetencyWithTailRelationDTO, CourseCompetency, CourseCompetencyType, getIcon } from 'app/entities/competency.model';\r\nimport { firstValueFrom, map } from 'rxjs';\r\nimport { faCircleQuestion, faEdit, faFileImport, faPencilAlt, faPlus, faRobot, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { IrisSettingsService } from 'app/iris/settings/shared/iris-settings.service';\r\nimport { PROFILE_IRIS } from 'app/app.constants';\r\nimport { FeatureToggle, FeatureToggleService } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport {\r\n    ImportAllCourseCompetenciesModalComponent,\r\n    ImportAllCourseCompetenciesResult,\r\n} from 'app/course/competencies/components/import-all-course-competencies-modal/import-all-course-competencies-modal.component';\r\nimport { CourseCompetencyApiService } from 'app/course/competencies/services/course-competency-api.service';\r\nimport { CompetencyManagementTableComponent } from 'app/course/competencies/competency-management/competency-management-table.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\nimport { CourseCompetenciesRelationModalComponent } from 'app/course/competencies/components/course-competencies-relation-modal/course-competencies-relation-modal.component';\r\nimport { CourseCompetencyExplanationModalComponent } from 'app/course/competencies/components/course-competency-explanation-modal/course-competency-explanation-modal.component';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\n\r\n@Component({\r\n    selector: 'jhi-competency-management',\r\n    templateUrl: './competency-management.component.html',\r\n    imports: [CompetencyManagementTableComponent, TranslateDirective, FontAwesomeModule, RouterModule],\r\n})\r\nexport class CompetencyManagementComponent implements OnInit {\r\n    protected readonly faEdit = faEdit;\r\n    protected readonly faPlus = faPlus;\r\n    protected readonly faFileImport = faFileImport;\r\n    protected readonly faTrash = faTrash;\r\n    protected readonly faPencilAlt = faPencilAlt;\r\n    protected readonly faRobot = faRobot;\r\n    protected readonly faCircleQuestion = faCircleQuestion;\r\n\r\n    readonly getIcon = getIcon;\r\n    readonly documentationType: DocumentationType = 'Competencies';\r\n    readonly CourseCompetencyType = CourseCompetencyType;\r\n\r\n    private readonly activatedRoute = inject(ActivatedRoute);\r\n    private readonly courseCompetencyApiService = inject(CourseCompetencyApiService);\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly modalService = inject(NgbModal);\r\n    private readonly profileService = inject(ProfileService);\r\n    private readonly irisSettingsService = inject(IrisSettingsService);\r\n    private readonly featureToggleService = inject(FeatureToggleService);\r\n\r\n    readonly courseId = toSignal(this.activatedRoute.parent!.params.pipe(map((params) => Number(params.courseId))), { requireSync: true });\r\n    readonly isLoading = signal<boolean>(false);\r\n\r\n    readonly courseCompetencies = signal<CourseCompetency[]>([]);\r\n    competencies = computed(() => this.courseCompetencies().filter((cc) => cc.type === CourseCompetencyType.COMPETENCY));\r\n    prerequisites = computed(() => this.courseCompetencies().filter((cc) => cc.type === CourseCompetencyType.PREREQUISITE));\r\n\r\n    private readonly irisEnabled = toSignal(this.profileService.getProfileInfo().pipe(map((profileInfo) => profileInfo?.activeProfiles?.includes(PROFILE_IRIS))), {\r\n        initialValue: false,\r\n    });\r\n\r\n    irisCompetencyGenerationEnabled = signal<boolean>(false);\r\n    standardizedCompetenciesEnabled = toSignal(this.featureToggleService.getFeatureToggleActive(FeatureToggle.StandardizedCompetencies), { requireSync: true });\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const courseId = this.courseId();\r\n            untracked(async () => await this.loadCourseCompetencies(courseId));\r\n        });\r\n        effect(() => {\r\n            const irisEnabled = this.irisEnabled();\r\n            untracked(async () => {\r\n                if (irisEnabled) {\r\n                    await this.loadIrisEnabled();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const lastVisit = sessionStorage.getItem('lastTimeVisitedCourseCompetencyExplanation');\r\n        if (!lastVisit) {\r\n            this.openCourseCompetencyExplanation();\r\n        }\r\n        sessionStorage.setItem('lastTimeVisitedCourseCompetencyExplanation', Date.now().toString());\r\n    }\r\n\r\n    private async loadIrisEnabled() {\r\n        try {\r\n            const combinedCourseSettings = await firstValueFrom(this.irisSettingsService.getCombinedCourseSettings(this.courseId()));\r\n            this.irisCompetencyGenerationEnabled.set(combinedCourseSettings?.irisCompetencyGenerationSettings?.enabled ?? false);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        }\r\n    }\r\n\r\n    private async loadCourseCompetencies(courseId: number) {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const courseCompetencies = await this.courseCompetencyApiService.getCourseCompetenciesByCourseId(courseId);\r\n            this.courseCompetencies.set(courseCompetencies);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    protected openCourseCompetenciesRelationModal(): void {\r\n        const modalRef = this.modalService.open(CourseCompetenciesRelationModalComponent, {\r\n            size: 'xl',\r\n            backdrop: 'static',\r\n            windowClass: 'course-competencies-relation-graph-modal',\r\n        });\r\n        modalRef.componentInstance.courseId = signal<number>(this.courseId());\r\n        modalRef.componentInstance.courseCompetencies = signal<CourseCompetency[]>(this.courseCompetencies());\r\n    }\r\n\r\n    /**\r\n     * Opens a modal for selecting a course to import all competencies from.\r\n     */\r\n    async openImportAllModal() {\r\n        const modalRef = this.modalService.open(ImportAllCourseCompetenciesModalComponent, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n        });\r\n        modalRef.componentInstance.courseId = signal<number>(this.courseId());\r\n        const importResults: ImportAllCourseCompetenciesResult | undefined = await modalRef.result;\r\n        if (!importResults) {\r\n            return;\r\n        }\r\n        const courseTitle = importResults.course.title ?? '';\r\n        try {\r\n            const importedCompetencies = await this.courseCompetencyApiService.importAllByCourseId(this.courseId(), importResults.courseCompetencyImportOptions);\r\n            if (importedCompetencies.length) {\r\n                this.alertService.success(`artemisApp.courseCompetency.importAll.success`, {\r\n                    noOfCompetencies: importedCompetencies.length,\r\n                    courseTitle: courseTitle,\r\n                });\r\n                this.updateDataAfterImportAll(importedCompetencies);\r\n            } else {\r\n                this.alertService.warning(`artemisApp.courseCompetency.importAll.warning`, { courseTitle: courseTitle });\r\n            }\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the component with the new data from the importAll modal\r\n     * @param res Array of DTOs containing the new competencies\r\n     * @private\r\n     */\r\n    updateDataAfterImportAll(res: Array<CompetencyWithTailRelationDTO>) {\r\n        const importedCourseCompetencies = res.map((dto) => dto.competency!);\r\n        const newCourseCompetencies = importedCourseCompetencies.filter(\r\n            (competency) => !this.courseCompetencies().some((existingCompetency) => existingCompetency.id === competency.id),\r\n        );\r\n        this.courseCompetencies.update((courseCompetencies) => courseCompetencies.concat(newCourseCompetencies));\r\n    }\r\n\r\n    onRemoveCompetency(competencyId: number) {\r\n        this.courseCompetencies.update((courseCompetencies) => courseCompetencies.filter((cc) => cc.id !== competencyId));\r\n    }\r\n\r\n    openCourseCompetencyExplanation(): void {\r\n        this.modalService.open(CourseCompetencyExplanationModalComponent, {\r\n            size: 'xl',\r\n            backdrop: 'static',\r\n            windowClass: 'course-competency-explanation-modal',\r\n        });\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex flex-wrap mt-4\">\r\n        <div class=\"d-flex justify-content-center align-items-center\">\r\n            <h2 class=\"m-0\" jhiTranslate=\"artemisApp.competency.manage.title\"></h2>\r\n            <button class=\"ms-3 btn btn-sm btn-warning\" (click)=\"openCourseCompetencyExplanation()\">\r\n                <fa-icon [icon]=\"faCircleQuestion\" />\r\n                <span jhiTranslate=\"artemisApp.courseCompetency.manage.helpButton\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"ms-auto justify-content-end\">\r\n            @if (irisCompetencyGenerationEnabled()) {\r\n                <a class=\"btn btn-primary\" id=\"generateButton\" [routerLink]=\"['/course-management', courseId(), 'competency-management', 'generate']\">\r\n                    <fa-icon [icon]=\"faRobot\" />\r\n                    <span jhiTranslate=\"artemisApp.competency.manage.generateButton\"></span>\r\n                </a>\r\n            }\r\n            <button class=\"btn btn-primary\" id=\"openCourseCompetencyRelationsButton\" (click)=\"openCourseCompetenciesRelationModal()\">\r\n                <fa-icon [icon]=\"faEdit\" />\r\n                <span jhiTranslate=\"artemisApp.courseCompetency.manage.editRelationsButton\"></span>\r\n            </button>\r\n            <button class=\"btn btn-primary\" id=\"courseCompetencyImportAllButton\" (click)=\"openImportAllModal()\">\r\n                <fa-icon [icon]=\"faFileImport\" />\r\n                <span jhiTranslate=\"artemisApp.courseCompetency.manage.importAllButton\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    @if (isLoading()) {\r\n        <div class=\"d-flex justify-content-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n            </div>\r\n        </div>\r\n    }\r\n    <jhi-competency-management-table\r\n        [courseId]=\"courseId()\"\r\n        [(allCompetencies)]=\"courseCompetencies\"\r\n        [courseCompetencies]=\"competencies()\"\r\n        [competencyType]=\"CourseCompetencyType.COMPETENCY\"\r\n        [standardizedCompetenciesEnabled]=\"standardizedCompetenciesEnabled()\"\r\n        (competencyDeleted)=\"onRemoveCompetency($event)\"\r\n    />\r\n    <jhi-competency-management-table\r\n        [courseId]=\"courseId()\"\r\n        [(allCompetencies)]=\"courseCompetencies\"\r\n        [courseCompetencies]=\"prerequisites()\"\r\n        [competencyType]=\"CourseCompetencyType.PREREQUISITE\"\r\n        [standardizedCompetenciesEnabled]=\"standardizedCompetenciesEnabled()\"\r\n        (competencyDeleted)=\"onRemoveCompetency($event)\"\r\n    />\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "faSpinner", "\u0275\u0275elementContainer", "\u0275\u0275elementStart", "\u0275\u0275listener", "column_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setSortedColumn", "name", "\u0275\u0275template", "ImportTableComponent_For_37_ng_container_7_Template", "\u0275\u0275elementEnd", "columnBaseTranslationKey", "sortIcon_r5", "\u0275\u0275pureFunction3", "_c1", "sortedColumn", "sortingOrder", "column_r7", "getProperty", "entity_r8", "searchTerm", "\u0275\u0275repeaterCreate", "ImportTableComponent_For_45_For_10_Template", "\u0275\u0275repeaterTrackByIdentity", "_r6", "selectRow", "\u0275\u0275textInterpolate", "id", "\u0275\u0275repeater", "columns", "numberOfColumns", "faSort", "sortingOrder_r9", "SortingOrder", "DESCENDING", "faSortDown", "faSortUp", "ImportTableComponent_ng_template_52_Conditional_1_Template", "ImportTableComponent_ng_template_52_Conditional_2_Template", "\u0275\u0275conditional", "sortedColumn_r10", "currentSortedColumn_r11", "ImportTableComponent", "alertService", "inject", "AlertService", "pagingService", "PagingService", "input", "required", "disabledIds", "computed", "length", "onRowSelection", "output", "isLoading", "signal", "searchResult", "undefined", "resultsOnPage", "DEFAULT_SORTING_ORDER", "ASCENDING", "PAGE_SIZE", "page", "pageSize", "asReadonly", "collectionSize", "numberOfPages", "constructor", "effect", "untracked", "__async", "loadData", "set", "searchState", "result", "lastValueFrom", "search", "filteredResults", "filterSearchResult", "error", "onError", "debouncedDataLoad", "BaseApiHttpService", "debounce", "bind", "searchResults", "__spreadProps", "__spreadValues", "filter", "entity", "includes", "setPage", "item", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ImportTableComponent_Conditional_8_Template", "\u0275\u0275twoWayListener", "$event", "i0", "_r1", "\u0275\u0275twoWayBindingSet", "ImportTableComponent_ng_container_32_Template", "ImportTableComponent_For_37_Template", "ImportTableComponent_For_45_Template", "_forTrack0", "ImportTableComponent_ForEmpty_46_Template", "ImportTableComponent_ng_template_52_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "\u0275\u0275pureFunction2", "_c0", "NgbPagination", "ArtemisTranslatePipe", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "NgbTypeaheadModule", "NgbHighlight", "CommonModule", "NgTemplateOutlet", "styles", "CourseForImportDTOPagingService", "PagingService", "http", "inject", "HttpClient", "RESOURCE_URL", "constructor", "search", "pageable", "params", "createHttpParams", "get", "observe", "pipe", "map", "resp", "body", "factory", "\u0275fac", "providedIn", "\u0275\u0275elementContainer", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "setting_r3", "\u0275\u0275restoreView", "_r2", "setting", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleImportSetting", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "value_r5", "label_r6", "faQuestionCircle", "\u0275\u0275pipeBind1", "tooltip_r7", "CourseCompetencyImportSettings", "importRelations", "importExercises", "importLectures", "referenceDate", "undefined", "isReleaseDate", "ImportCourseCompetenciesSettingsComponent", "faCalendarAlt", "faCircleXmark", "importSettings", "model", "required", "computed", "update", "settings", "__spreadProps", "__spreadValues", "setReferenceDate", "dateEvent", "Date", "value", "setReferenceDateType", "event", "target", "JSON", "parse", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275declareLet", "\u0275\u0275template", "ImportCourseCompetenciesSettingsComponent_ng_container_6_Template", "ImportCourseCompetenciesSettingsComponent_ng_container_8_Template", "ImportCourseCompetenciesSettingsComponent_ng_container_10_Template", "$event", "i0", "_r1", "ImportCourseCompetenciesSettingsComponent_ng_template_71_Template", "\u0275\u0275templateRefExtractor", "importSettingTemplate_r9", "\u0275\u0275pureFunction3", "_c0", "baseTranslationKey_r10", "_c1", "_c2", "dt_r8", "\u0275\u0275classProp", "NgbTooltipModule", "NgbTooltip", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "CommonModule", "NgTemplateOutlet", "FontAwesomeModule", "FaIconComponent", "OwlDateTimeModule", "OwlDateTimeTriggerDirective", "OwlDateTimeInputDirective", "OwlDateTimeComponent", "OwlNativeDateTimeModule", "ArtemisTranslatePipe", "TranslateDirective", "styles", "tableColumns", "name", "getProperty", "entity", "title", "shortName", "semester", "ImportAllCourseCompetenciesModalComponent", "closeIcon", "faXmark", "activeModal", "inject", "NgbActiveModal", "courseId", "input", "required", "disabledIds", "computed", "importSettings", "signal", "CourseCompetencyImportSettings", "selectCourse", "course", "courseCompetencyImportOptions", "__spreadValues", "sourceCourseId", "id", "close", "closeModal", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "provide", "PagingService", "useClass", "CourseForImportDTOPagingService", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275twoWayProperty", "ImportTableComponent", "ImportCourseCompetenciesSettingsComponent", "FaIconComponent", "TranslateDirective", "encapsulation", "CourseCompetencyApiService", "BaseApiHttpService", "basePath", "getPath", "courseId", "replace", "toString", "importAllByCourseId", "courseCompetencyImportOptions", "__async", "post", "createCourseCompetencyRelation", "relation", "updateCourseCompetencyRelation", "relationId", "updateCourseCompetencyRelationDTO", "patch", "deleteCourseCompetencyRelation", "delete", "getCourseCompetencyRelationsByCourseId", "get", "getCourseCompetencyRelations", "getCourseCompetenciesByCourseId", "__ngFactoryType__", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "column_r1", "name", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "ctx_r1", "faSort", "column_r4", "getProperty", "course_r5", "searchTerm", "\u0275\u0275repeaterCreate", "ImportAllCompetenciesComponent_For_47_For_10_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectImport", "id", "\u0275\u0275repeater", "columns", "disabledIds", "includes", "tableColumns", "entity", "title", "shortName", "semester", "ImportAllCompetenciesComponent", "ImportComponent", "importRelations", "competencyType", "CourseCompetencyType", "COMPETENCY", "constructor", "pagingService", "inject", "CourseForImportDTOPagingService", "item", "activeModal", "close", "courseForImportDTO", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "clear", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275template", "ImportAllCompetenciesComponent_Conditional_21_Template", "sortRows", "listSorting", "sortedColumn", "ImportAllCompetenciesComponent_For_39_Template", "ImportAllCompetenciesComponent_For_47_Template", "trackId", "onPageChange", "state", "page", "\u0275\u0275twoWayProperty", "\u0275\u0275conditional", "loading", "content", "resultsOnPage", "total", "pageSize", "NgbPagination", "ButtonComponent", "TranslateDirective", "ArtemisTranslatePipe", "SortByDirective", "SortDirective", "FontAwesomeModule", "FaIconComponent", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "CommonModule", "NgbTypeaheadModule", "NgbHighlight", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c2", "ctx_r0", "courseId", "competencyType", "faFileImport", "\u0275\u0275listener", "competency_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "deleteCompetency", "id", "_c3", "\u0275\u0275textInterpolate", "title", "\u0275\u0275pipeBind1", "description", "\u0275\u0275sanitizeHtml", "getIcon", "taxonomy", "\u0275\u0275textInterpolate1", "tmp_17_0", "undefined", "softDueDate", "tmp_20_0", "courseProgress", "numberOfMasteredStudents", "tmp_21_0", "numberOfStudents", "optional", "\u0275\u0275pureFunction3", "_c4", "faPencilAlt", "tmp_25_0", "dialogError", "faTrash", "\u0275\u0275repeaterCreate", "CompetencyManagementTableComponent_Conditional_44_For_44_Template", "_forTrack0", "\u0275\u0275repeater", "courseCompetencies", "CompetencyManagementTableComponent", "standardizedCompetenciesEnabled", "allCompetencies", "model", "required", "competencyDeleted", "EventEmitter", "service", "dialogErrorSource", "Subject", "asObservable", "competencyService", "inject", "CompetencyService", "prerequisiteService", "PrerequisiteService", "alertService", "AlertService", "modalService", "NgbModal", "faPlus", "ngOnInit", "CourseCompetencyType", "COMPETENCY", "ngOnDestroy", "unsubscribe", "openImportAllModal", "modalRef", "open", "ImportAllCompetenciesComponent", "size", "backdrop", "componentInstance", "disabledIds", "result", "then", "courseTitle", "courseForImportDTO", "importAll", "importRelations", "pipe", "filter", "res", "ok", "map", "body", "subscribe", "next", "length", "success", "noOfCompetencies", "updateDataAfterImportAll", "warning", "error", "onError", "importedCompetencies", "dto", "competency", "element", "newCourseCompetencies", "some", "existingCompetency", "push", "update", "allCourseCompetencies", "concat", "competencyId", "delete", "message", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CompetencyManagementTableComponent_Conditional_30_Template", "CompetencyManagementTableComponent_Conditional_44_Template", "CompetencyManagementTableComponent_Conditional_45_Template", "_c0", "\u0275\u0275conditional", "_c1", "NgbProgressbar", "NgbDropdown", "NgbDropdownMenu", "NgbDropdownToggle", "HtmlForMarkdownPipe", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "DeleteButtonDirective", "ArtemisTranslatePipe", "RouterModule", "RouterLink", "ArtemisDatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "courseCompetency_r1", "id", "\u0275\u0275textInterpolate", "title", "\u0275\u0275element", "relationType_r2", "value", "ctx_r3", "isCourseCompetencySelectable", "courseCompetency_r3", "faSpinner", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r5", "\u0275\u0275nextContext", "\u0275\u0275resetView", "deleteRelation", "\u0275\u0275template", "CourseCompetencyRelationFormComponent_Conditional_41_Conditional_3_Template", "\u0275\u0275conditional", "isLoading", "_r6", "updateRelation", "CourseCompetencyRelationFormComponent_Conditional_42_Conditional_3_Template", "showCircularDependencyError", "_r7", "createRelation", "CourseCompetencyRelationFormComponent_Conditional_43_Conditional_3_Template", "tailCompetencyId", "headCompetencyId", "relationType", "CourseCompetencyRelationFormComponent", "competencyRelationType", "CompetencyRelationType", "courseCompetencyApiService", "inject", "CourseCompetencyApiService", "alertService", "AlertService", "courseId", "input", "required", "courseCompetencies", "relations", "model", "selectedRelationId", "signal", "undefined", "relationAlreadyExists", "computed", "getRelation", "exactRelationAlreadyExists", "getExactRelation", "selectableTailCourseCompetencyIds", "getSelectableTailCompetencyIds", "map", "includes", "constructor", "effect", "selectRelation", "courseCompetencyId", "relationId", "relation", "find", "set", "selectCourseCompetency", "selectHeadCourseCompetency", "selectTailCourseCompetency", "headId", "tailId", "existingRelation", "__async", "courseCompetencyRelation", "createCourseCompetencyRelation", "Number", "update", "error", "message", "newRelationType", "updateCourseCompetencyRelation", "__spreadProps", "__spreadValues", "deletedRelation", "deleteCourseCompetencyRelation", "filter", "potentialRelation", "detectCycleInRelations", "concat", "length", "numOfCompetencies", "idToIndexMap", "Map", "currentIndex", "forEach", "tail", "head", "has", "unionFind", "UnionFind", "MATCHES", "tailIndex", "get", "headIndex", "union", "reducedGraph", "Array", "from", "EXTENDS", "ASSUMES", "push", "hasCycle", "graph", "noOfCourseCompetencies", "visited", "fill", "recursionStack", "depthFirstSearch", "v", "neighbor", "node", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "$event", "\u0275\u0275repeaterCreate", "CourseCompetencyRelationFormComponent_For_11_Template", "_forTrack0", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "CourseCompetencyRelationFormComponent_For_23_Template", "\u0275\u0275repeaterTrackByIdentity", "CourseCompetencyRelationFormComponent_For_36_Template", "CourseCompetencyRelationFormComponent_Conditional_41_Template", "CourseCompetencyRelationFormComponent_Conditional_42_Template", "CourseCompetencyRelationFormComponent_Conditional_43_Template", "CourseCompetencyRelationFormComponent_Conditional_45_Template", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275repeater", "\u0275\u0275twoWayProperty", "\u0275\u0275pipeBind1", "TranslateDirective", "CommonModule", "NgClass", "KeyValuePipe", "FontAwesomeModule", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "styles", "parent", "rank", "size", "_", "index", "competencyId", "rootU", "rootV", "CourseCompetencyRelationNodeComponent", "CourseCompetencyType", "nodeHeight", "element", "inject", "ElementRef", "courseCompetencyNode", "input", "required", "courseCompetencyType", "computed", "data", "type", "onSizeSet", "output", "ngAfterViewInit", "setDimensions", "width", "nativeElement", "offsetWidth", "height", "emit", "id", "dimension", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "COMPETENCY", "PREREQUISITE", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "label", "NgClass", "TranslateDirective", "NgbTooltipModule", "NgbTooltip", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "node_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onCourseCompetencySelection", "emit", "data", "id", "$event", "setNodeDimension", "\u0275\u0275advance", "\u0275\u0275property", "link_r5", "_r4", "selectRelation", "\u0275\u0275classProp", "selectedRelationId", "\u0275\u0275styleProp", "dominantBaseline", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "label", "toUpperCase", "CourseCompetenciesRelationGraphComponent", "faFileImport", "courseCompetencies", "input", "required", "relations", "model", "output", "update$", "Subject", "center$", "nodes", "signal", "edges", "computed", "map", "relation", "source", "headCompetencyId", "target", "tailCompetencyId", "relationType", "constructor", "effect", "set", "courseCompetency", "toString", "title", "type", "relationId", "sizeUpdate", "update", "node", "dimension", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CourseCompetenciesRelationGraphComponent_ng_template_4_Template", "\u0275\u0275templateRefExtractor", "CourseCompetenciesRelationGraphComponent_ng_template_7_Template", "CourseCompetenciesRelationGraphComponent_ng_template_10_Template", "FontAwesomeModule", "NgbAccordionModule", "NgxGraphModule", "GraphComponent", "CourseCompetencyRelationNodeComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "selectedRelationId", "\u0275\u0275resetView", "relations", "\u0275\u0275listener", "selectCourseCompetency", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "courseId", "courseCompetencies", "CourseCompetenciesRelationModalComponent", "courseCompetencyApiService", "inject", "CourseCompetencyApiService", "alertService", "AlertService", "activeModal", "NgbActiveModal", "courseCompetencyRelationFormComponent", "viewChild", "required", "CourseCompetencyRelationFormComponent", "input", "signal", "undefined", "isLoading", "constructor", "effect", "loadRelations", "__async", "set", "getCourseCompetencyRelationsByCourseId", "error", "onError", "courseCompetencyId", "closeModal", "close", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "CourseCompetenciesRelationModalComponent_Conditional_16_Template", "CourseCompetenciesRelationModalComponent_Conditional_17_Template", "\u0275\u0275conditional", "CourseCompetenciesRelationGraphComponent", "TranslateDirective", "styles", "CourseCompetencyExplanationModalComponent", "closeIcon", "faXmark", "DOCUMENTATION_LINK", "activeModal", "inject", "NgbActiveModal", "closeModal", "close", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "ctx_r0", "courseId", "faRobot", "CompetencyManagementComponent", "faEdit", "faPlus", "faFileImport", "faTrash", "faPencilAlt", "faCircleQuestion", "getIcon", "documentationType", "CourseCompetencyType", "activatedRoute", "inject", "ActivatedRoute", "courseCompetencyApiService", "CourseCompetencyApiService", "alertService", "AlertService", "modalService", "NgbModal", "profileService", "ProfileService", "irisSettingsService", "IrisSettingsService", "featureToggleService", "FeatureToggleService", "toSignal", "parent", "params", "pipe", "map", "Number", "requireSync", "isLoading", "signal", "courseCompetencies", "competencies", "computed", "filter", "cc", "type", "COMPETENCY", "prerequisites", "PREREQUISITE", "irisEnabled", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "PROFILE_IRIS", "initialValue", "irisCompetencyGenerationEnabled", "standardizedCompetenciesEnabled", "getFeatureToggleActive", "FeatureToggle", "StandardizedCompetencies", "constructor", "effect", "untracked", "__async", "loadCourseCompetencies", "loadIrisEnabled", "ngOnInit", "sessionStorage", "getItem", "openCourseCompetencyExplanation", "setItem", "Date", "now", "toString", "combinedCourseSettings", "firstValueFrom", "getCombinedCourseSettings", "set", "irisCompetencyGenerationSettings", "enabled", "error", "getCourseCompetenciesByCourseId", "openCourseCompetenciesRelationModal", "modalRef", "open", "CourseCompetenciesRelationModalComponent", "size", "backdrop", "windowClass", "componentInstance", "openImportAllModal", "ImportAllCourseCompetenciesModalComponent", "importResults", "result", "courseTitle", "course", "title", "importedCompetencies", "importAllByCourseId", "courseCompetencyImportOptions", "length", "success", "noOfCompetencies", "updateDataAfterImportAll", "warning", "res", "newCourseCompetencies", "dto", "competency", "some", "existingCompetency", "id", "update", "concat", "onRemoveCompetency", "competencyId", "CourseCompetencyExplanationModalComponent", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275template", "CompetencyManagementComponent_Conditional_18_Template", "CompetencyManagementComponent_Conditional_35_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275conditional", "\u0275\u0275twoWayProperty", "CompetencyManagementTableComponent", "TranslateDirective", "FontAwesomeModule", "FaIconComponent", "RouterModule", "RouterLink", "encapsulation"]
}
