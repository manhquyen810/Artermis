{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/consistency-check/consistency-check.service.ts", "src/main/webapp/app/shared/consistency-check/consistency-check.component.ts", "src/main/webapp/app/shared/consistency-check/consistency-check.component.html", "src/main/webapp/app/exercises/programming/manage/reset/programming-exercise-reset-dialog.component.ts", "src/main/webapp/app/exercises/programming/manage/reset/programming-exercise-reset-dialog.component.html", "src/main/webapp/app/exercises/programming/manage/reset/programming-exercise-reset-button.directive.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ConsistencyCheckError } from 'app/entities/consistency-check-result.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ConsistencyCheckService {\r\n    private http = inject(HttpClient);\r\n\r\n    private readonly RESOURCE_URL = 'api/exercise/programming-exercises';\r\n\r\n    /**\r\n     * Request consistency checks for a given programming exercise\r\n     * @param exerciseId id of the programming exercise to check\r\n     */\r\n    checkConsistencyForProgrammingExercise(exerciseId: number) {\r\n        return this.http.get<ConsistencyCheckError[]>(`${this.RESOURCE_URL}/${exerciseId}/consistency-check`, { responseType: 'json' });\r\n    }\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ConsistencyCheckService } from 'app/shared/consistency-check/consistency-check.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ConsistencyCheckError } from 'app/entities/consistency-check-result.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { getCourseId } from 'app/entities/exercise.model';\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'jhi-consistency-check',\r\n    templateUrl: './consistency-check.component.html',\r\n    imports: [TranslateDirective, FaIconComponent, RouterLink],\r\n})\r\nexport class ConsistencyCheckComponent implements OnInit {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private consistencyCheckService = inject(ConsistencyCheckService);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() exercisesToCheck: ProgrammingExercise[];\r\n\r\n    inconsistencies: ConsistencyCheckError[] = [];\r\n    isLoading = true;\r\n\r\n    // Icons\r\n    faTimes = faTimes;\r\n    faCheck = faCheck;\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        let exercisesRemaining = this.exercisesToCheck.length;\r\n        this.exercisesToCheck.forEach((exercise) => {\r\n            const course = getCourseId(exercise);\r\n            this.consistencyCheckService.checkConsistencyForProgrammingExercise(exercise.id!).subscribe({\r\n                next: (inconsistencies) => {\r\n                    this.inconsistencies = this.inconsistencies.concat(inconsistencies);\r\n                    this.inconsistencies.map((inconsistency) => (inconsistency.programmingExerciseCourseId = course || undefined));\r\n                    if (--exercisesRemaining === 0) {\r\n                        this.isLoading = false;\r\n                    }\r\n                },\r\n                error: (err) => {\r\n                    this.alertService.error(err);\r\n                    this.isLoading = false;\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.activeModal.close();\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.consistencyCheck.title\"></h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"closeModal()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"justify-content-center p-1\">\r\n            <span jhiTranslate=\"artemisApp.consistencyCheck.text\"></span>\r\n            <br />\r\n            <small jhiTranslate=\"artemisApp.consistencyCheck.warning\"></small>\r\n            @if (isLoading) {\r\n                <div class=\"d-flex justify-content-center m-5\">\r\n                    <div class=\"spinner-border\" role=\"status\">\r\n                        <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n                    </div>\r\n                </div>\r\n            } @else {\r\n                <div class=\"mt-3 text-center\">\r\n                    @if (inconsistencies?.length) {\r\n                        <div>\r\n                            <span class=\"h1 text-danger\"><fa-icon [icon]=\"faTimes\" /></span>\r\n                            <br />\r\n                            <span jhiTranslate=\"artemisApp.consistencyCheck.inconsistenciesFound\"></span>\r\n                        </div>\r\n                    } @else {\r\n                        <div>\r\n                            <span class=\"h1 text-success\"><fa-icon [icon]=\"faCheck\" /></span>\r\n                            <br />\r\n                            <span jhiTranslate=\"artemisApp.consistencyCheck.noInconsistencies\"></span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n            @if (!isLoading && inconsistencies?.length) {\r\n                <div class=\"table-responsive p-1 my-5\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><span jhiTranslate=\"artemisApp.programmingExercise.detail.title\"></span></th>\r\n                                <th><span jhiTranslate=\"artemisApp.consistencyCheck.error.type\"></span></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            @for (error of inconsistencies; let index = $index; track index) {\r\n                                <tr>\r\n                                    <td>\r\n                                        <a [routerLink]=\"['/course-management', error.programmingExerciseCourseId, 'programming-exercises', error.programmingExercise!.id]\">\r\n                                            <span>{{ error.programmingExercise!.title }}</span>\r\n                                        </a>\r\n                                        @if (error.programmingExerciseCourseId === undefined) {\r\n                                            <span>{{ error.programmingExercise!.title }}</span>\r\n                                        }\r\n                                    </td>\r\n                                    <td>\r\n                                        <span [jhiTranslate]=\"'artemisApp.consistencyCheck.error.' + error.type\"></span>\r\n                                    </td>\r\n                                </tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n</div>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseResetOptions, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { faBan, faCircleNotch, faSpinner, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { PROFILE_AEOLUS, PROFILE_LOCALCI } from 'app/app.constants';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-reset-dialog',\r\n    templateUrl: './programming-exercise-reset-dialog.component.html',\r\n    styles: ['textarea { width: 100%; }'],\r\n    imports: [FormsModule, TranslateDirective, FaIconComponent],\r\n})\r\nexport class ProgrammingExerciseResetDialogComponent implements OnInit {\r\n    private alertService = inject(AlertService);\r\n    private profileService = inject(ProfileService);\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    activeModal = inject(NgbActiveModal);\r\n\r\n    readonly FeatureToggle = FeatureToggle;\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n\r\n    programmingExerciseResetOptions: ProgrammingExerciseResetOptions;\r\n    isLoading = false;\r\n    resetInProgress: boolean;\r\n    confirmText: string;\r\n\r\n    versionControlName?: string;\r\n    continuousIntegrationName?: string;\r\n    hasCustomizedBuildPlans = false;\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faCircleNotch = faCircleNotch;\r\n    faSpinner = faSpinner;\r\n    faUndo = faUndo;\r\n\r\n    ngOnInit() {\r\n        this.isLoading = true;\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            if (profileInfo) {\r\n                this.versionControlName = profileInfo.versionControlName;\r\n                this.continuousIntegrationName = profileInfo.continuousIntegrationName;\r\n                this.hasCustomizedBuildPlans = profileInfo?.activeProfiles.includes(PROFILE_LOCALCI) || profileInfo?.activeProfiles.includes(PROFILE_AEOLUS);\r\n            }\r\n        });\r\n        this.resetInProgress = false;\r\n        this.programmingExerciseResetOptions = {\r\n            deleteBuildPlans: false,\r\n            deleteRepositories: false,\r\n            deleteParticipationsSubmissionsAndResults: false,\r\n            recreateBuildPlans: false,\r\n        };\r\n        this.isLoading = false;\r\n    }\r\n\r\n    /**\r\n     * Closes the active modal dialog and dismisses it with a 'cancel' reason\r\n     */\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    /**\r\n     * Resets the programming exercise with the given reset options\r\n     */\r\n    resetProgrammingExercise() {\r\n        if (!this.programmingExercise.id) {\r\n            return;\r\n        }\r\n\r\n        this.resetInProgress = true;\r\n        this.programmingExerciseService.reset(this.programmingExercise.id, this.programmingExerciseResetOptions).subscribe({\r\n            next: this.handleResetResponse,\r\n            error: () => {\r\n                this.alertService.error('artemisApp.programmingExercise.reset.errorMessage');\r\n                this.resetInProgress = false;\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Handles the reset response by showing a success message, dismissing the active modal dialog, and resetting the resetInProgress flag.\r\n     */\r\n    handleResetResponse = () => {\r\n        this.alertService.success('artemisApp.programmingExercise.reset.successMessage');\r\n        this.activeModal.dismiss(true);\r\n        this.resetInProgress = false;\r\n    };\r\n\r\n    /**\r\n     * Check if all security checks are fulfilled and the user can submit the reset\r\n     * @returns {boolean} true if the user can submit, false otherwise\r\n     */\r\n    get canSubmit(): boolean {\r\n        return this.confirmText === this.programmingExercise.title && this.hasSelectedOptions && !this.resetInProgress;\r\n    }\r\n\r\n    /**\r\n     * Check if any reset options are selected\r\n     * @returns {boolean} true if at least one reset option is selected, false otherwise\r\n     */\r\n    get hasSelectedOptions(): boolean {\r\n        return (\r\n            this.programmingExerciseResetOptions.deleteBuildPlans ||\r\n            this.programmingExerciseResetOptions.deleteRepositories ||\r\n            this.programmingExerciseResetOptions.deleteParticipationsSubmissionsAndResults ||\r\n            this.programmingExerciseResetOptions.recreateBuildPlans\r\n        );\r\n    }\r\n}\r\n", "@if (!isLoading) {\r\n    <form name=\"resetForm\" role=\"form\" (ngSubmit)=\"resetProgrammingExercise()\" #resetForm=\"ngForm\">\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" jhiTranslate=\"entity.resetProgrammingExercise.title\"></h4>\r\n            <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" (click)=\"clear()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <p [jhiTranslate]=\"'artemisApp.programmingExercise.reset.pleaseSelectOperations'\" [translateValues]=\"{ title: programmingExercise.title }\">\r\n                Please select the operations you want to perform on <strong>{{ programmingExercise.title }}</strong\r\n                >:\r\n            </p>\r\n            <ul class=\"list-unstyled\">\r\n                @if (programmingExercise.isAtLeastInstructor) {\r\n                    <li>\r\n                        <div class=\"checkbox\">\r\n                            <label class=\"control-label\">\r\n                                <input\r\n                                    class=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    name=\"deleteBuildPlans\"\r\n                                    [(ngModel)]=\"this.programmingExerciseResetOptions.deleteBuildPlans\"\r\n                                    (ngModelChange)=\"\r\n                                        this.programmingExerciseResetOptions.deleteRepositories =\r\n                                            this.programmingExerciseResetOptions.deleteBuildPlans && this.programmingExerciseResetOptions.deleteRepositories\r\n                                    \"\r\n                                />\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.reset.deleteBuildPlans.title\" [translateValues]=\"{ ciPlatform: continuousIntegrationName }\">\r\n                                    Delete student build plans (on {{ continuousIntegrationName }})\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                    </li>\r\n                }\r\n                @if (programmingExercise.isAtLeastInstructor && this.programmingExerciseResetOptions.deleteBuildPlans && !this.programmingExerciseResetOptions.deleteRepositories) {\r\n                    <div class=\"alert alert-info my-2\">\r\n                        <span jhiTranslate=\"artemisApp.programmingExercise.reset.deleteBuildPlans.info\"></span>\r\n                    </div>\r\n                }\r\n                @if (programmingExercise.isAtLeastInstructor) {\r\n                    <li>\r\n                        <div class=\"checkbox\">\r\n                            <label class=\"control-label\">\r\n                                <input\r\n                                    class=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    name=\"deleteRepositories\"\r\n                                    [(ngModel)]=\"this.programmingExerciseResetOptions.deleteRepositories\"\r\n                                    (ngModelChange)=\"this.programmingExerciseResetOptions.deleteBuildPlans = !!$event || this.programmingExerciseResetOptions.deleteBuildPlans\"\r\n                                />\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.reset.deleteRepositories.title\" [translateValues]=\"{ vcPlatform: versionControlName }\">\r\n                                    Delete student repositories (on {{ versionControlName }}).\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                    </li>\r\n                }\r\n                @if (programmingExercise.isAtLeastInstructor) {\r\n                    <li>\r\n                        <div class=\"checkbox\">\r\n                            <label class=\"control-label\">\r\n                                <input\r\n                                    class=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    name=\"deleteParticipationsSubmissionsAndResults\"\r\n                                    [(ngModel)]=\"this.programmingExerciseResetOptions.deleteParticipationsSubmissionsAndResults\"\r\n                                />\r\n                                <span jhiTranslate=\"artemisApp.programmingExercise.reset.deleteParticipationsSubmissionsAndResults\"></span>\r\n                            </label>\r\n                        </div>\r\n                    </li>\r\n                }\r\n                @if (\r\n                    programmingExercise.isAtLeastInstructor &&\r\n                    !this.programmingExerciseResetOptions.deleteRepositories &&\r\n                    this.programmingExerciseResetOptions.deleteParticipationsSubmissionsAndResults\r\n                ) {\r\n                    <div class=\"alert alert-warning my-2\">\r\n                        <span\r\n                            jhiTranslate=\"artemisApp.programmingExercise.reset.artefactsWarning\"\r\n                            [translateValues]=\"{ vcPlatform: versionControlName, ciPlatform: continuousIntegrationName }\"\r\n                        >\r\n                            Deleting student participations, submissions, and results without removing the associated repositories and build plans may lead to undeleted artifacts\r\n                            on\r\n                            {{ versionControlName }} and {{ continuousIntegrationName }}. Please carefully review if this is the desired action before proceeding.\r\n                        </span>\r\n                    </div>\r\n                }\r\n                @if (programmingExercise.isAtLeastEditor) {\r\n                    <li>\r\n                        <div class=\"checkbox\">\r\n                            <label class=\"control-label\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"recreateBuildPlans\" [(ngModel)]=\"this.programmingExerciseResetOptions.recreateBuildPlans\" />\r\n                                <span\r\n                                    [jhiTranslate]=\"\r\n                                        hasCustomizedBuildPlans\r\n                                            ? 'artemisApp.programmingExercise.reset.recreateCustomizedBuildPlans'\r\n                                            : 'artemisApp.programmingExercise.reset.recreateBuildPlans'\r\n                                    \"\r\n                                ></span>\r\n                            </label>\r\n                        </div>\r\n                    </li>\r\n                }\r\n            </ul>\r\n            <div class=\"form-group\">\r\n                <label\r\n                    for=\"confirm-exercise-name\"\r\n                    class=\"text-danger\"\r\n                    [jhiTranslate]=\"'artemisApp.programmingExercise.reset.question'\"\r\n                    [translateValues]=\"{ title: programmingExercise.title }\"\r\n                >\r\n                    Please type in the name to confirm\r\n                </label>\r\n                <input id=\"confirm-exercise-name\" type=\"text\" class=\"form-control\" name=\"confirmExerciseName\" [(ngModel)]=\"confirmText\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"clear()\" [disabled]=\"resetInProgress\">\r\n                <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n            </button>\r\n            <div [style.cursor]=\"resetForm.form.invalid || !this.canSubmit ? 'not-allowed' : 'pointer'\">\r\n                <button type=\"submit\" class=\"btn btn-danger\" [disabled]=\"resetForm.form.invalid || !this.canSubmit\">\r\n                    @if (resetInProgress) {\r\n                        <span><fa-icon [icon]=\"faSpinner\" animation=\"spin\" />&nbsp;</span>\r\n                    }\r\n                    <fa-icon [icon]=\"faUndo\" />&nbsp;\r\n                    <span jhiTranslate=\"entity.action.reset\"></span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n} @else {\r\n    <div class=\"d-flex justify-content-center mt-4 mb-4\">\r\n        <fa-icon [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n    </div>\r\n}\r\n", "import { Directive, ElementRef, HostListener, Input, OnInit, Renderer2, inject } from '@angular/core';\r\nimport { ProgrammingExerciseResetDialogComponent } from 'app/exercises/programming/manage/reset/programming-exercise-reset-dialog.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\n\r\n@Directive({ selector: '[jhiProgrammingExerciseResetButton]' })\r\nexport class ProgrammingExerciseResetButtonDirective implements OnInit {\r\n    private modalService = inject(NgbModal);\r\n    private renderer = inject(Renderer2);\r\n    private elementRef = inject(ElementRef);\r\n\r\n    @Input() programmingExercise: ProgrammingExercise;\r\n\r\n    ngOnInit() {\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'btn');\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'btn-danger');\r\n        this.renderer.addClass(this.elementRef.nativeElement, 'btn-sm');\r\n    }\r\n\r\n    /**\r\n     * Function is executed when a MouseEvent is registered. Opens the reset Dialog\r\n     * @param event\r\n     */\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef = this.modalService.open(ProgrammingExerciseResetDialogComponent, { keyboard: true, size: 'lg' });\r\n        modalRef.componentInstance.programmingExercise = this.programmingExercise;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ConsistencyCheckService", "http", "inject", "HttpClient", "RESOURCE_URL", "checkConsistencyForProgrammingExercise", "exerciseId", "get", "responseType", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faTimes", "faCheck", "\u0275\u0275template", "ConsistencyCheckComponent_Conditional_20_Conditional_3_Template", "ConsistencyCheckComponent_Conditional_20_Conditional_4_Template", "\u0275\u0275conditional", "inconsistencies", "length", "\u0275\u0275textInterpolate", "error_r2", "programmingExercise", "title", "ConsistencyCheckComponent_Conditional_21_For_20_Conditional_11_Template", "\u0275\u0275pureFunction2", "_c0", "programmingExerciseCourseId", "id", "undefined", "type", "\u0275\u0275repeaterCreate", "ConsistencyCheckComponent_Conditional_21_For_20_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "ConsistencyCheckComponent", "activeModal", "inject", "NgbActiveModal", "consistencyCheckService", "ConsistencyCheckService", "alertService", "AlertService", "exercisesToCheck", "isLoading", "ngOnInit", "exercisesRemaining", "forEach", "exercise", "course", "getCourseId", "checkConsistencyForProgrammingExercise", "subscribe", "next", "concat", "map", "inconsistency", "error", "err", "closeModal", "close", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "ConsistencyCheckComponent_Conditional_19_Template", "ConsistencyCheckComponent_Conditional_20_Template", "ConsistencyCheckComponent_Conditional_21_Template", "TranslateDirective", "FaIconComponent", "RouterLink", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "programmingExerciseResetOptions", "deleteBuildPlans", "\u0275\u0275resetView", "\u0275\u0275listener", "deleteRepositories", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "continuousIntegrationName", "\u0275\u0275textInterpolate1", "\u0275\u0275element", "_r4", "_c2", "versionControlName", "_r5", "deleteParticipationsSubmissionsAndResults", "\u0275\u0275pureFunction2", "_c3", "\u0275\u0275textInterpolate2", "_r6", "recreateBuildPlans", "hasCustomizedBuildPlans", "faSpinner", "_r1", "resetProgrammingExercise", "clear", "\u0275\u0275template", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_21_Template", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_22_Template", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_23_Template", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_24_Template", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_25_Template", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_26_Template", "confirmText", "ProgrammingExerciseResetDialogComponent_Conditional_0_Conditional_50_Template", "_c0", "programmingExercise", "title", "\u0275\u0275textInterpolate", "\u0275\u0275conditional", "isAtLeastInstructor", "isAtLeastEditor", "resetInProgress", "faBan", "\u0275\u0275styleProp", "resetForm_r7", "form", "invalid", "canSubmit", "faUndo", "faCircleNotch", "ProgrammingExerciseResetDialogComponent", "alertService", "inject", "AlertService", "profileService", "ProfileService", "programmingExerciseService", "ProgrammingExerciseService", "activeModal", "NgbActiveModal", "FeatureToggle", "isLoading", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "activeProfiles", "includes", "PROFILE_LOCALCI", "PROFILE_AEOLUS", "dismiss", "id", "reset", "next", "handleResetResponse", "error", "success", "hasSelectedOptions", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "ProgrammingExerciseResetDialogComponent_Conditional_0_Template", "ProgrammingExerciseResetDialogComponent_Conditional_1_Template", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "TranslateDirective", "FaIconComponent", "styles", "ProgrammingExerciseResetButtonDirective", "modalService", "inject", "NgbModal", "renderer", "Renderer2", "elementRef", "ElementRef", "programmingExercise", "ngOnInit", "addClass", "nativeElement", "onClick", "event", "stopPropagation", "modalRef", "open", "ProgrammingExerciseResetDialogComponent", "keyboard", "size", "componentInstance", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event"]
}
