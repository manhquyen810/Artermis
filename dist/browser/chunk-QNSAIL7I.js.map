{
  "version": 3,
  "sources": ["src/main/webapp/app/iris/iris-guard.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\n\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_IRIS } from 'app/app.constants';\r\nimport { first, lastValueFrom, of, switchMap } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class IrisGuard implements CanActivate {\r\n    private profileService = inject(ProfileService);\r\n    private router = inject(Router);\r\n\r\n    /**\r\n     * Check if the client can activate a route.\r\n     * @return true if Iris is enabled for this instance, false otherwise\r\n     */\r\n    canActivate(): Promise<boolean> {\r\n        return lastValueFrom(\r\n            this.profileService.getProfileInfo().pipe(\r\n                first(),\r\n                switchMap((profileInfo) => {\r\n                    if (profileInfo.activeProfiles.includes(PROFILE_IRIS)) {\r\n                        return of(true);\r\n                    }\r\n                    this.router.navigate(['/']);\r\n                    return of(false);\r\n                }),\r\n            ),\r\n        );\r\n    }\r\n}\r\n"],
  "mappings": "uMAUA,IAAaA,GAAS,IAAA,CAAhB,MAAOA,CAAS,CACVC,eAAiBC,EAAOC,CAAc,EACtCC,OAASF,EAAOG,CAAM,EAM9BC,aAAW,CACP,OAAOC,EACH,KAAKN,eAAeO,eAAc,EAAGC,KACjCC,EAAK,EACLC,EAAWC,GACHA,EAAYC,eAAeC,SAASC,CAAY,EACzCC,EAAG,EAAI,GAElB,KAAKZ,OAAOa,SAAS,CAAC,GAAG,CAAC,EACnBD,EAAG,EAAK,EAClB,CAAC,CACL,CAET,4CArBShB,EAAS,6BAATA,EAASkB,QAATlB,EAASmB,UAAAC,WAFN,MAAM,CAAA,SAETpB,CAAS,GAAA",
  "names": ["IrisGuard", "profileService", "inject", "ProfileService", "router", "Router", "canActivate", "lastValueFrom", "getProfileInfo", "pipe", "first", "switchMap", "profileInfo", "activeProfiles", "includes", "PROFILE_IRIS", "of", "navigate", "factory", "\u0275fac", "providedIn"]
}
