{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\"]\n  }],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\"syntax\", \"import\", \"weak\", \"public\", \"package\", \"option\", \"repeated\", \"oneof\", \"map\", \"reserved\", \"to\", \"max\", \"enum\", \"message\", \"service\", \"rpc\", \"stream\", \"returns\", \"package\", \"optional\", \"true\", \"false\"],\n  builtinTypes: [\"double\", \"float\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"bool\", \"string\", \"bytes\"],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, [/syntax/, \"keyword\"], [/=/, \"operators\"], [/;/, \"delimiter\"], [/(\")(proto3)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto3\"\n    }]], [/(\")(proto2)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto2\"\n    }]], [\n    // If no `syntax` provided, regarded as proto2\n    /.*?/, {\n      token: \"\",\n      switchTo: \"@topLevel.proto2\"\n    }]],\n    topLevel: [\n    // whitespace\n    {\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/[;.]/, \"delimiter\"], [/@fullIdentifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        enum: {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        service: {\n          token: \"keyword\",\n          next: \"@serviceDecl.$S2\"\n        },\n        extend: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@extendDecl.$S2\"\n            }\n          }\n        },\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }]],\n    enumDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@enumBody.$S2\"\n    }]],\n    enumBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/@identifier/, \"identifier\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    messageDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }]],\n    messageBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [\"(map)(s*)(<)\", [\"keyword\", \"white\", {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@map.$S2\"\n    }]], [/@identifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        enum: {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        oneof: {\n          token: \"keyword\",\n          next: \"@oneofDecl.$S2\"\n        },\n        extensions: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@reserved.$S2\"\n            }\n          }\n        },\n        reserved: {\n          token: \"keyword\",\n          next: \"@reserved.$S2\"\n        },\n        \"(?:repeated|optional)\": {\n          token: \"keyword\",\n          next: \"@field.$S2\"\n        },\n        required: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@field.$S2\"\n            }\n          }\n        },\n        \"$S2==proto3\": {\n          token: \"@rematch\",\n          next: \"@field.$S2\"\n        }\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    extendDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@extendBody.$S2\"\n    }]],\n    extendBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    options: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/\\]/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    option: [{\n      include: \"@whitespace\"\n    }, [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\", \"@pop\"]],\n    oneofDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@oneofBody.$S2\"\n    }]],\n    oneofBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    reserved: [{\n      include: \"@whitespace\"\n    }, [/,/, \"delimiter\"], [/;/, \"delimiter\", \"@pop\"], {\n      include: \"@constant\"\n    }, [/to\\b|max\\b/, \"keyword\"]],\n    map: [{\n      include: \"@whitespace\"\n    }, [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/,/, \"delimiter\"], [/>/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"identifier\"\n    }]],\n    field: [{\n      include: \"@whitespace\"\n    }, [\"group\", {\n      cases: {\n        \"$S2==proto2\": {\n          token: \"keyword\",\n          switchTo: \"@groupDecl.$S2\"\n        }\n      }\n    }], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", {\n      token: \"delimiter\",\n      next: \"@pop\"\n    }]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }]],\n    groupDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [\"=\", \"operator\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }], {\n      include: \"@constant\"\n    }],\n    type: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\", \"@pop\"], [/./, \"delimiter\"]],\n    identifier: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@serviceBody.$S2\"\n    }]],\n    serviceBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/rpc\\b/, \"keyword\", \"@rpc.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    rpc: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@request.$S2\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@methodOptions.$S2\"\n    }], [/;/, \"delimiter\", \"@pop\"]],\n    request: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@returns.$S2\"\n    }]],\n    returns: [{\n      include: \"@whitespace\"\n    }, [/returns\\b/, \"keyword\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@response.$S2\"\n    }]],\n    response: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@rpc.$S2\"\n    }]],\n    methodOptions: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [\"option\", \"keyword\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"],\n    // nested comment\n    [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    stringSingle: [[/[^\\\\']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    constant: [[\"@boolLit\", \"keyword.constant\"], [\"@hexLit\", \"number.hex\"], [\"@octalLit\", \"number.octal\"], [\"@decimalLit\", \"number\"], [\"@floatLit\", \"number.float\"], [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\n    // non-terminated string\n    [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringSingle\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@prototext\"\n    }], [/identifier/, \"identifier\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    prototext: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/@identifier/, \"identifier\"], [/[:;]/, \"delimiter\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["namedLiterals","conf","language"],"x_google_ignoreList":[0]}