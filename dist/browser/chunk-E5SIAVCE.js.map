{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/exam/exam-page.model.ts", "src/main/webapp/app/exam/participate/exercises/exam-page.component.ts", "src/main/webapp/app/exam/participate/exercises/exam-submission.component.ts", "src/main/webapp/app/exam/participate/exercises/exercise-save-button/exercise-save-button.component.ts", "src/main/webapp/app/exam/participate/exercises/exercise-save-button/exercise-save-button.component.html", "src/main/webapp/app/exam/participate/exercises/modeling/modeling-exam-submission.component.ts", "src/main/webapp/app/exam/participate/exercises/modeling/modeling-exam-submission.component.html", "src/main/webapp/app/exam/participate/exercises/quiz/quiz-exam-submission.component.ts", "src/main/webapp/app/exam/participate/exercises/quiz/quiz-exam-submission.component.html", "src/main/webapp/app/exam/participate/exercises/text/text-exam-submission.component.ts", "src/main/webapp/app/exam/participate/exercises/text/text-exam-submission.component.html", "src/main/webapp/app/exam/participate/exercises/file-upload/file-upload-exam-submission.component.ts", "src/main/webapp/app/exam/participate/exercises/file-upload/file-upload-exam-submission.component.html", "src/main/webapp/app/exam/participate/events/exam-live-events-overlay.component.ts", "src/main/webapp/app/exam/participate/events/exam-live-events-overlay.component.html", "src/main/webapp/app/exam/participate/events/exam-live-events-button.component.ts", "src/main/webapp/app/exam/participate/events/exam-live-events-button.component.html", "src/main/webapp/app/exam/participate/timer/exam-timer.component.ts", "src/main/webapp/app/exam/participate/timer/exam-timer.component.html"],
  "sourcesContent": ["import { Exercise } from 'app/entities/exercise.model';\r\n\r\nexport class ExamPage {\r\n    public isOverviewPage?: boolean;\r\n    public exercise?: Exercise;\r\n\r\n    constructor() {\r\n        this.isOverviewPage = false;\r\n        this.exercise = undefined;\r\n    }\r\n}\r\n", "import { ChangeDetectorRef, Directive, inject } from '@angular/core';\r\n\r\n@Directive()\r\nexport abstract class ExamPageComponent {\r\n    protected changeDetectorReference = inject(ChangeDetectorRef);\r\n\r\n    /**\r\n     * Should be called when the component becomes active / visible. It activates Angular's change detection for this component.\r\n     * We disabled Angular's change detection for invisible components, because of performance reasons. Here it is activated again,\r\n     * that means once the component becomes active / visible, Angular will check for changes in the application state and update\r\n     * the view if necessary. The performance improvement comes from not checking the components for updates while being invisible\r\n     * For further customisation, individual submission components can override.\r\n     */\r\n    onActivate(): void {\r\n        this.changeDetectorReference.reattach();\r\n    }\r\n\r\n    /**\r\n     * Should be called when the component becomes deactivated / not visible. It deactivates Angular's change detection.\r\n     * Angular change detection is responsible for synchronizing the view with the application state (often done over bindings)\r\n     * We disabled Angular's change detection for invisible components for performance reasons. That means, that the component\r\n     * will not be checked for updates and also will not be updated when it is invisible. Note: This works recursively, that means\r\n     * subcomponents will also not be able to check for updates and update the view according to the application state.\r\n     * For further customisation, individual submission components can override.\r\n     */\r\n    onDeactivate(): void {\r\n        this.changeDetectorReference.detach();\r\n    }\r\n}\r\n", "import { Submission } from 'app/entities/submission.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ExamPageComponent } from 'app/exam/participate/exercises/exam-page.component';\r\nimport { Directive, input } from '@angular/core';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\n\r\n@Directive()\r\nexport abstract class ExamSubmissionComponent extends ExamPageComponent {\r\n    abstract exerciseType: ExerciseType;\r\n    /**\r\n     * checks whether the component has unsaved changes.\r\n     * It is called in the periodic update timer to determine, if the component needs an update\r\n     */\r\n    abstract hasUnsavedChanges(): boolean;\r\n\r\n    /**\r\n     * updates the submission with the values from the displayed content.\r\n     * This is called when the submission is saved, so that the latest state is synchronized with the server\r\n     */\r\n    abstract updateSubmissionFromView(): void;\r\n\r\n    /**\r\n     * takes the current values from the submission and displays them\r\n     * This is called when a component is initialized, because we want to display the state of the submission.\r\n     * In case the submission has not been edited it is an empty submission.\r\n     */\r\n    abstract updateViewFromSubmission(): void;\r\n\r\n    abstract getSubmission(): Submission | undefined;\r\n    abstract getExerciseId(): number | undefined;\r\n    abstract getExercise(): Exercise;\r\n    readonly = input(false);\r\n    examTimeline = input(false);\r\n    // needs to be public so that it can be accessed in the tests\r\n    submissionVersion: SubmissionVersion;\r\n    abstract setSubmissionVersion(submissionVersion: SubmissionVersion): void;\r\n}\r\n", "import { Component, input, output } from '@angular/core';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { faFloppyDisk } from '@fortawesome/free-solid-svg-icons';\r\nimport { facSaveSuccess } from 'app/icons/icons';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-save-button',\r\n    templateUrl: './exercise-save-button.component.html',\r\n    styleUrls: ['./exercise-save-button.component.scss'],\r\n    imports: [FaIconComponent, TranslateDirective],\r\n})\r\nexport class ExerciseSaveButtonComponent {\r\n    protected readonly faFloppyDisk = faFloppyDisk;\r\n    protected readonly facSaveSuccess = facSaveSuccess;\r\n\r\n    submission = input<Submission>();\r\n    save = output<void>();\r\n\r\n    onSave() {\r\n        this.save.emit();\r\n    }\r\n}\r\n", "<button id=\"save-exam\" type=\"submit\" [disabled]=\"submission()?.isSynced\" class=\"btn btn-primary\" (click)=\"onSave()\">\r\n    <fa-icon class=\"saved\" [fixedWidth]=\"true\" [icon]=\"submission()?.submitted && submission()?.isSynced ? facSaveSuccess : faFloppyDisk\" />\r\n    <span\r\n        class=\"d-none d-sm-inline\"\r\n        [jhiTranslate]=\"submission()?.submitted && submission()?.isSynced ? 'artemisApp.examParticipation.exerciseSaved' : 'artemisApp.examParticipation.saveExercise'\"\r\n    >\r\n    </span>\r\n</button>\r\n", "import { ChangeDetectionStrategy, Component, OnInit, input, output, viewChild } from '@angular/core';\r\nimport { UMLModel } from '@ls1intum/apollon';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\r\nimport { ExamSubmissionComponent } from 'app/exam/participate/exercises/exam-submission.component';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore } from 'app/entities/exercise.model';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { IncludedInScoreBadgeComponent } from 'app/exercises/shared/exercise-headers/included-in-score-badge.component';\r\nimport { ExerciseSaveButtonComponent } from '../exercise-save-button/exercise-save-button.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { FullscreenComponent } from 'app/shared/fullscreen/fullscreen.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ExamExerciseUpdateHighlighterComponent } from '../exam-exercise-update-highlighter/exam-exercise-update-highlighter.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-submission-exam',\r\n    templateUrl: './modeling-exam-submission.component.html',\r\n    providers: [{ provide: ExamSubmissionComponent, useExisting: ModelingExamSubmissionComponent }],\r\n    styleUrls: ['./modeling-exam-submission.component.scss'],\r\n    // change deactivation must be triggered manually\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        TranslateDirective,\r\n        IncludedInScoreBadgeComponent,\r\n        ExerciseSaveButtonComponent,\r\n        ResizeableContainerComponent,\r\n        FullscreenComponent,\r\n        ModelingEditorComponent,\r\n        FaIconComponent,\r\n        ExamExerciseUpdateHighlighterComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ModelingExamSubmissionComponent extends ExamSubmissionComponent implements OnInit {\r\n    exerciseType = ExerciseType.MODELING;\r\n\r\n    modelingEditor = viewChild.required(ModelingEditorComponent);\r\n\r\n    // IMPORTANT: this reference must be contained in this.studentParticipation.submissions[0] otherwise the parent component will not be able to react to changes\r\n    studentSubmission = input.required<ModelingSubmission>();\r\n    problemStatementHtml: string;\r\n\r\n    exercise = input.required<ModelingExercise>();\r\n    umlModel: UMLModel; // input model for Apollon+\r\n\r\n    // explicitly needed to track if submission.isSynced is changed, otherwise component\r\n    // does not update the state due to onPush strategy\r\n    isSubmissionSynced = input<boolean>();\r\n    saveCurrentExercise = output<void>();\r\n\r\n    explanationText: string; // current explanation text\r\n\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n\r\n    // Icons\r\n    protected readonly faListAlt = faListAlt;\r\n\r\n    ngOnInit(): void {\r\n        // show submission answers in UI\r\n        this.problemStatementHtml = htmlForMarkdown(this.exercise()?.problemStatement);\r\n        this.updateViewFromSubmission();\r\n    }\r\n\r\n    /**\r\n     * Updates the problem statement html of the currently loaded modeling exercise which is part of the user's student exam.\r\n     * @param newProblemStatementHtml is the updated problem statement html that should be displayed to the user.\r\n     */\r\n    updateProblemStatement(newProblemStatementHtml: string): void {\r\n        this.problemStatementHtml = newProblemStatementHtml;\r\n        this.changeDetectorReference.detectChanges();\r\n    }\r\n\r\n    getSubmission(): Submission {\r\n        return this.studentSubmission();\r\n    }\r\n\r\n    getExerciseId(): number | undefined {\r\n        return this.exercise().id;\r\n    }\r\n\r\n    getExercise(): Exercise {\r\n        return this.exercise();\r\n    }\r\n\r\n    updateViewFromSubmission(): void {\r\n        if (this.studentSubmission()) {\r\n            if (this.studentSubmission()!.model) {\r\n                // Updates the Apollon editor model state (view) with the latest modeling submission\r\n                this.umlModel = JSON.parse(this.studentSubmission()!.model!);\r\n            }\r\n            // Updates explanation text with the latest submission\r\n            this.explanationText = this.studentSubmission()!.explanationText ?? '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the model of the submission with the current Apollon editor model state (view)\r\n     * Updates the explanation text of the submission with the current explanation\r\n     */\r\n    public updateSubmissionFromView(): void {\r\n        if (!this.modelingEditor() || !this.modelingEditor().getCurrentModel()) {\r\n            return;\r\n        }\r\n        const currentApollonModel = this.modelingEditor().getCurrentModel();\r\n        const diagramJson = JSON.stringify(currentApollonModel);\r\n\r\n        if (this.studentSubmission()) {\r\n            if (diagramJson) {\r\n                this.studentSubmission()!.model = diagramJson;\r\n            }\r\n            this.studentSubmission()!.explanationText = this.explanationText;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether there are pending changes in the current model. Returns true if there are unsaved changes (i.e. the submission is NOT synced), false otherwise.\r\n     */\r\n    public hasUnsavedChanges(): boolean {\r\n        return !this.studentSubmission()!.isSynced!;\r\n    }\r\n\r\n    /**\r\n     * The exercise is still active if it's due date hasn't passed yet.\r\n     */\r\n    get isActive(): boolean {\r\n        return this.exercise() && (!this.exercise().dueDate || dayjs(this.exercise().dueDate).isSameOrAfter(dayjs()));\r\n    }\r\n\r\n    modelChanged(_model: UMLModel) {\r\n        this.studentSubmission()!.isSynced = false;\r\n    }\r\n\r\n    // Changes isSynced to false and updates explanation text\r\n    explanationChanged(explanation: string) {\r\n        this.studentSubmission()!.isSynced = false;\r\n        this.explanationText = explanation;\r\n    }\r\n\r\n    async setSubmissionVersion(submission: SubmissionVersion): Promise<void> {\r\n        this.submissionVersion = submission;\r\n        await this.updateViewFromSubmissionVersion();\r\n    }\r\n\r\n    /**\r\n     * Updates the model and explanation text with the latest submission version.\r\n     * It extracts the model and explanation text from the submission version and updates the view.\r\n     */\r\n    private async updateViewFromSubmissionVersion() {\r\n        if (this.submissionVersion?.content) {\r\n            // we need these string operations because we store the string in the database as concatenation of Model: <model>; Explanation: <explanation>\r\n            // and need to remove the content that was added before the string is saved to the db to get valid JSON\r\n            let model = this.submissionVersion.content.substring(0, this.submissionVersion.content.indexOf('; Explanation:'));\r\n            // if we do not wait here for apollon, the redux store might be undefined\r\n            await this.modelingEditor()!.apollonEditor!.nextRender;\r\n            model = model.replace('Model: ', '');\r\n            // updates the Apollon editor model state (view) with the latest modeling submission\r\n            this.umlModel = JSON.parse(model);\r\n            // same as above regarding the string operations\r\n            const numberOfCharactersToSkip = 13; // Explanation:  is 13 characters long\r\n            this.explanationText = this.submissionVersion.content.substring(this.submissionVersion.content.indexOf('Explanation:') + numberOfCharactersToSkip) ?? '';\r\n\r\n            // if we do not call this, apollon doesn't show the updated model\r\n            this.changeDetectorReference.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger save action in exam participation component\r\n     */\r\n    notifyTriggerSave() {\r\n        this.saveCurrentExercise.emit();\r\n    }\r\n}\r\n", "@if (exercise()) {\r\n    <div class=\"d-flex justify-content-between align-items-center\">\r\n        <h3 class=\"text-align-left fw-normal mb-0\">\r\n            <span>\r\n                {{ exercise().exerciseGroup?.title }}\r\n            </span>\r\n            <span\r\n                [jhiTranslate]=\"exercise().bonusPoints ? 'artemisApp.examParticipation.bonus' : 'artemisApp.examParticipation.points'\"\r\n                [translateValues]=\"{ points: exercise().maxPoints, bonusPoints: exercise().bonusPoints }\"\r\n            >\r\n            </span>\r\n            @if (exercise().includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n                <jhi-included-in-score-badge [includedInOverallScore]=\"exercise().includedInOverallScore\" />\r\n            }\r\n        </h3>\r\n        <jhi-exercise-save-button [submission]=\"studentSubmission()\" (save)=\"notifyTriggerSave()\" />\r\n    </div>\r\n    <hr />\r\n\r\n    <jhi-resizeable-container class=\"col-12\" [examTimeline]=\"examTimeline()\">\r\n        <!--region Left Panel-->\r\n        <span class=\"exercise-title\" left-header>{{ examTimeline() ? exercise().title : ('artemisApp.exam.yourSolution' | artemisTranslate) }}</span>\r\n        <div left-body class=\"submission-container d-flex flex-column ps-2 mt-3 w-100\">\r\n            <jhi-fullscreen>\r\n                <div class=\"row flex-grow-1\">\r\n                    @if (studentSubmission() && isActive) {\r\n                        <div class=\"col-12 editor-large\">\r\n                            <jhi-modeling-editor\r\n                                [umlModel]=\"umlModel\"\r\n                                [diagramType]=\"exercise().diagramType!\"\r\n                                (onModelChanged)=\"modelChanged($event)\"\r\n                                [readOnly]=\"readonly()\"\r\n                                [withExplanation]=\"true\"\r\n                                [explanation]=\"explanationText\"\r\n                                (explanationChange)=\"explanationChanged($event)\"\r\n                            />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </jhi-fullscreen>\r\n        </div>\r\n        <!--endregion-->\r\n        <!--region Right Panel-->\r\n        <fa-icon right-header [icon]=\"faListAlt\" />&nbsp;\r\n        <span right-header jhiTranslate=\"artemisApp.modelingSubmission.problemStatement\"></span>\r\n        <!-- problem statement update & difference highlighter -->\r\n        <ng-container right-body>\r\n            @if (exercise()) {\r\n                <jhi-exam-exercise-update-highlighter [exercise]=\"exercise()\" (problemStatementUpdateEvent)=\"updateProblemStatement($event)\" />\r\n            }\r\n            @if (problemStatementHtml) {\r\n                <p class=\"mb-3 markdown-preview\">\r\n                    <span [innerHTML]=\"problemStatementHtml\"></span>\r\n                </p>\r\n            }\r\n        </ng-container>\r\n        <!--endregion-->\r\n    </jhi-resizeable-container>\r\n}\r\n", "import { Component, OnInit, inject, input, output, viewChildren } from '@angular/core';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore } from 'app/entities/exercise.model';\r\nimport { AbstractQuizSubmission } from 'app/entities/quiz/abstract-quiz-exam-submission.model';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\nimport { DragAndDropSubmittedAnswer } from 'app/entities/quiz/drag-and-drop-submitted-answer.model';\r\nimport { MultipleChoiceSubmittedAnswer } from 'app/entities/quiz/multiple-choice-submitted-answer.model';\r\nimport { QuizConfiguration } from 'app/entities/quiz/quiz-configuration.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { ShortAnswerSubmittedAnswer } from 'app/entities/quiz/short-answer-submitted-answer.model';\r\nimport { ShortAnswerSubmittedText } from 'app/entities/quiz/short-answer-submitted-text.model';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { ExamSubmissionComponent } from 'app/exam/participate/exercises/exam-submission.component';\r\nimport { DragAndDropQuestionComponent } from 'app/exercises/quiz/shared/questions/drag-and-drop-question/drag-and-drop-question.component';\r\nimport { MultipleChoiceQuestionComponent } from 'app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-question.component';\r\nimport { ShortAnswerQuestionComponent } from 'app/exercises/quiz/shared/questions/short-answer-question/short-answer-question.component';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { ArtemisQuizService } from 'app/shared/quiz/quiz.service';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport * as smoothscroll from 'smoothscroll-polyfill';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { IncludedInScoreBadgeComponent } from 'app/exercises/shared/exercise-headers/included-in-score-badge.component';\r\nimport { ExerciseSaveButtonComponent } from '../exercise-save-button/exercise-save-button.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-submission-exam',\r\n    templateUrl: './quiz-exam-submission.component.html',\r\n    providers: [{ provide: ExamSubmissionComponent, useExisting: QuizExamSubmissionComponent }],\r\n    styleUrls: ['./quiz-exam-submission.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        IncludedInScoreBadgeComponent,\r\n        ExerciseSaveButtonComponent,\r\n        NgbTooltip,\r\n        NgClass,\r\n        MultipleChoiceQuestionComponent,\r\n        DragAndDropQuestionComponent,\r\n        ShortAnswerQuestionComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class QuizExamSubmissionComponent extends ExamSubmissionComponent implements OnInit {\r\n    private quizService = inject(ArtemisQuizService);\r\n\r\n    exerciseType = ExerciseType.QUIZ;\r\n\r\n    // make constants available to html for comparison\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly ButtonType = ButtonType;\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n\r\n    mcQuestionComponents = viewChildren(MultipleChoiceQuestionComponent);\r\n\r\n    dndQuestionComponents = viewChildren(DragAndDropQuestionComponent);\r\n\r\n    shortAnswerQuestionComponents = viewChildren(ShortAnswerQuestionComponent);\r\n\r\n    // IMPORTANT: this reference must be contained in this.studentParticipation.submissions[0] otherwise the parent component will not be able to react to changes\r\n    studentSubmission = input.required<AbstractQuizSubmission>();\r\n    exercise = input<QuizExercise>();\r\n    examTimeline = input(false);\r\n    quizConfiguration = input.required<QuizConfiguration>();\r\n\r\n    saveCurrentExercise = output<void>();\r\n\r\n    selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n    dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n    shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n    ngOnInit(): void {\r\n        smoothscroll.polyfill();\r\n        this.initQuiz();\r\n        this.updateViewFromSubmission();\r\n    }\r\n\r\n    getSubmission(): Submission {\r\n        return this.studentSubmission();\r\n    }\r\n\r\n    getExerciseId(): number | undefined {\r\n        return this.quizConfiguration().id;\r\n    }\r\n\r\n    getExercise(): Exercise {\r\n        return this.quizConfiguration() as Exercise;\r\n    }\r\n\r\n    /**\r\n     * Initialize the selections / mappings for each question with an empty array\r\n     */\r\n    initQuiz() {\r\n        // randomize order\r\n        // in the exam timeline, we do not want to randomize the order as this makes it difficult to view the changes between submissions.\r\n        if (!this.examTimeline()) {\r\n            this.quizService.randomizeOrder(this.quizConfiguration().quizQuestions, this.quizConfiguration().randomizeQuestionOrder);\r\n        }\r\n        // prepare selection arrays for each question\r\n        this.selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n        this.dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n        this.shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n        const quizQuestions = this.quizConfiguration().quizQuestions;\r\n\r\n        if (quizQuestions) {\r\n            quizQuestions.forEach((question) => {\r\n                switch (question.type) {\r\n                    case QuizQuestionType.MULTIPLE_CHOICE:\r\n                        // add the array of selected options to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.selectedAnswerOptions.set(question.id!, []);\r\n                        break;\r\n                    case QuizQuestionType.DRAG_AND_DROP:\r\n                        // add the array of mappings to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.dragAndDropMappings.set(question.id!, []);\r\n                        break;\r\n                    case QuizQuestionType.SHORT_ANSWER:\r\n                        // add the array of submitted texts to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        this.shortAnswerSubmittedTexts.set(question.id!, []);\r\n                        break;\r\n                    default:\r\n                        captureException('Unknown question type: ' + question);\r\n                        break;\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * By clicking on the bubble of the progress navigation towards the corresponding question of the quiz is triggered\r\n     * @param questionId\r\n     */\r\n    navigateToQuestion(questionId: number): void {\r\n        // get html element for question\r\n        const element = document.getElementById('question' + questionId);\r\n        if (element) {\r\n            element.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'start',\r\n                inline: 'nearest',\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * applies the data from the model to the UI (reverse of updateSubmissionFromView):\r\n     *\r\n     * Sets the checkmarks (selected answers) for all questions according to the submission data\r\n     * this needs to be done when we get new submission data, e.g. through the websocket connection\r\n     */\r\n    updateViewFromSubmission() {\r\n        // create dictionaries (key: questionID, value: Array of selected answerOptions / mappings)\r\n        // for the submittedAnswers to hand the selected options / mappings in individual arrays to the question components\r\n        this.selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n        this.dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n        this.shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n        const quizQuestions = this.quizConfiguration().quizQuestions;\r\n        if (quizQuestions?.length) {\r\n            // iterate through all questions of this quiz\r\n            quizQuestions.forEach((question) => {\r\n                // find the submitted answer that belongs to this question, only when submitted answers already exist\r\n                const submittedAnswer = this.studentSubmission()?.submittedAnswers?.find((answer) => {\r\n                    return answer.quizQuestion?.id === question.id;\r\n                });\r\n\r\n                switch (question.type) {\r\n                    case QuizQuestionType.MULTIPLE_CHOICE:\r\n                        // add the array of selected options to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        if (submittedAnswer) {\r\n                            const selectedOptions = (submittedAnswer as MultipleChoiceSubmittedAnswer).selectedOptions;\r\n                            // needs to be cloned, because of two-way binding, otherwise -> instant update in submission\r\n                            this.selectedAnswerOptions.set(question.id!, selectedOptions ? cloneDeep(selectedOptions) : []);\r\n                        } else {\r\n                            // not found, set to empty array\r\n                            this.selectedAnswerOptions.set(question.id!, []);\r\n                        }\r\n                        break;\r\n                    case QuizQuestionType.DRAG_AND_DROP:\r\n                        // add the array of mappings to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        if (submittedAnswer) {\r\n                            const mappings = (submittedAnswer as DragAndDropSubmittedAnswer).mappings;\r\n                            // needs to be cloned, because of two-way binding, otherwise -> instant update in submission\r\n                            this.dragAndDropMappings.set(question.id!, mappings ? cloneDeep(mappings) : []);\r\n                        } else {\r\n                            // not found, set to empty array\r\n                            this.dragAndDropMappings.set(question.id!, []);\r\n                        }\r\n                        break;\r\n                    case QuizQuestionType.SHORT_ANSWER:\r\n                        // add the array of submitted texts to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                        if (submittedAnswer) {\r\n                            const submittedTexts = (submittedAnswer as ShortAnswerSubmittedAnswer).submittedTexts;\r\n                            // needs to be cloned, because of two-way binding, otherwise -> instant update in submission\r\n                            this.shortAnswerSubmittedTexts.set(question.id!, submittedTexts ? cloneDeep(submittedTexts) : []);\r\n                        } else {\r\n                            // not found, set to empty array\r\n                            this.shortAnswerSubmittedTexts.set(question.id!, []);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        captureException('Unknown question type: ' + question);\r\n                        break;\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback method to be triggered when the user changes any of the answers in the quiz (in sub components based on the question type)\r\n     */\r\n    onSelectionChanged() {\r\n        this.studentSubmission().isSynced = false;\r\n    }\r\n\r\n    /**\r\n     * return true if the user changed any answer in the quiz\r\n     */\r\n    hasUnsavedChanges(): boolean {\r\n        return !this.studentSubmission().isSynced!;\r\n    }\r\n\r\n    /**\r\n     * updates the model according to UI state (reverse of updateViewFromSubmission):\r\n     *\r\n     * Creates the submission from the user's selection\r\n     * this needs to be done when we want to send the submission\r\n     * either for saving (through websocket)\r\n     * or for submitting (through REST call)\r\n     */\r\n    updateSubmissionFromView(): void {\r\n        // convert the selection dictionary (key: questionID, value: Array of selected answerOptions / mappings)\r\n        // into an array of submittedAnswer objects and save it as the submittedAnswers of the submission\r\n        this.studentSubmission().submittedAnswers = [];\r\n\r\n        // for multiple-choice questions\r\n        this.selectedAnswerOptions.forEach((answerOptions, questionID) => {\r\n            // find the question object for the given question id\r\n            const question = this.quizConfiguration().quizQuestions?.find(function (selectedQuestion) {\r\n                return selectedQuestion.id === Number(questionID);\r\n            });\r\n            if (!question) {\r\n                captureException('question not found for ID: ' + questionID);\r\n                return;\r\n            }\r\n            // generate the submittedAnswer object\r\n            const mcSubmittedAnswer = new MultipleChoiceSubmittedAnswer();\r\n            mcSubmittedAnswer.quizQuestion = question;\r\n            mcSubmittedAnswer.selectedOptions = answerOptions;\r\n            this.studentSubmission().submittedAnswers!.push(mcSubmittedAnswer);\r\n        }, this);\r\n\r\n        // for drag-and-drop questions\r\n        this.dragAndDropMappings.forEach((mappings, questionID) => {\r\n            // find the question object for the given question id\r\n            const question = this.quizConfiguration().quizQuestions?.find(function (localQuestion) {\r\n                return localQuestion.id === Number(questionID);\r\n            });\r\n            if (!question) {\r\n                captureException('question not found for ID: ' + questionID);\r\n                return;\r\n            }\r\n            // generate the submittedAnswer object\r\n            const dndSubmittedAnswer = new DragAndDropSubmittedAnswer();\r\n            dndSubmittedAnswer.quizQuestion = question;\r\n            dndSubmittedAnswer.mappings = mappings;\r\n            this.studentSubmission().submittedAnswers!.push(dndSubmittedAnswer);\r\n        }, this);\r\n        // for short-answer questions\r\n        this.shortAnswerSubmittedTexts.forEach((submittedTexts, questionID) => {\r\n            // find the question object for the given question id\r\n            const question = this.quizConfiguration().quizQuestions?.find(function (localQuestion) {\r\n                return localQuestion.id === Number(questionID);\r\n            });\r\n            if (!question) {\r\n                captureException('question not found for ID: ' + questionID);\r\n                return;\r\n            }\r\n            // generate the submittedAnswer object\r\n            const shortAnswerSubmittedAnswer = new ShortAnswerSubmittedAnswer();\r\n            shortAnswerSubmittedAnswer.quizQuestion = question;\r\n            shortAnswerSubmittedAnswer.submittedTexts = submittedTexts;\r\n            this.studentSubmission().submittedAnswers!.push(shortAnswerSubmittedAnswer);\r\n        }, this);\r\n    }\r\n\r\n    updateViewFromSubmissionVersion(): void {\r\n        this.studentSubmission().submittedAnswers = JSON.parse(this.submissionVersion.content);\r\n        this.updateViewFromSubmission();\r\n    }\r\n\r\n    setSubmissionVersion(submissionVersion: SubmissionVersion): void {\r\n        this.submissionVersion = submissionVersion;\r\n        this.updateViewFromSubmissionVersion();\r\n    }\r\n\r\n    /**\r\n     * Trigger save action in exam participation component\r\n     */\r\n    notifyTriggerSave() {\r\n        this.saveCurrentExercise.emit();\r\n    }\r\n}\r\n", "<div class=\"d-flex justify-content-between align-items-center\">\r\n    <h3 class=\"text-align-left fw-normal mb-0\">\r\n        <span>\r\n            {{ quizConfiguration().exerciseGroup?.title }}\r\n        </span>\r\n        <span jhiTranslate=\"artemisApp.examParticipation.points\" [translateValues]=\"{ points: quizConfiguration().maxPoints }\"></span>\r\n        @if (quizConfiguration().includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n            <jhi-included-in-score-badge [includedInOverallScore]=\"quizConfiguration().includedInOverallScore\" />\r\n        }\r\n    </h3>\r\n    <jhi-exercise-save-button [submission]=\"studentSubmission()\" (save)=\"notifyTriggerSave()\" />\r\n</div>\r\n<hr />\r\n\r\n<div class=\"w-auto m-0 pb-5\">\r\n    @if (quizConfiguration().quizQuestions && !examTimeline()) {\r\n        <div class=\"position-fixed d-flex align-items-center justify-content-center\">\r\n            <div class=\"p-0 col-md-auto quiz-navigation sticky-top\">\r\n                <div class=\"stepwizardquiz col-6\">\r\n                    @for (question of quizConfiguration().quizQuestions; track question; let i = $index) {\r\n                        <div class=\"stepwizardquiz__step mb-3\">\r\n                            @if (question.type === DRAG_AND_DROP) {\r\n                                <span\r\n                                    class=\"btn btn-light btn-circle stepbutton stepwizardquiz-circle draganddropcolor-question\"\r\n                                    (click)=\"navigateToQuestion(question.id!)\"\r\n                                    [ngbTooltip]=\"!!dragAndDropMappings.get(question.id!)?.length ? tooltipExplanationTranslate : tooltipNotExplanationTranslate\"\r\n                                    [ngClass]=\"!!dragAndDropMappings.get(question.id!)?.length ? 'changed-question' : ''\"\r\n                                >\r\n                                    <b class=\"fa\">DD</b>\r\n                                </span>\r\n                            }\r\n                            @if (question.type === MULTIPLE_CHOICE) {\r\n                                <span\r\n                                    class=\"btn btn-light btn-circle stepbutton stepwizardquiz-circle multiplechoicecolor-question\"\r\n                                    (click)=\"navigateToQuestion(question.id!)\"\r\n                                    [ngbTooltip]=\"!!selectedAnswerOptions.get(question.id!)?.length ? tooltipExplanationTranslate : tooltipNotExplanationTranslate\"\r\n                                    [ngClass]=\"!!selectedAnswerOptions.get(question.id!)?.length ? 'changed-question' : ''\"\r\n                                >\r\n                                    <b class=\"fa\">MC</b>\r\n                                </span>\r\n                            }\r\n                            @if (question.type === SHORT_ANSWER) {\r\n                                <span\r\n                                    class=\"btn btn-light btn-circle stepbutton stepwizardquiz-circle shortanswercolor-question\"\r\n                                    (click)=\"navigateToQuestion(question.id!)\"\r\n                                    [ngbTooltip]=\"!!shortAnswerSubmittedTexts.get(question.id!)?.length ? tooltipExplanationTranslate : tooltipNotExplanationTranslate\"\r\n                                    [ngClass]=\"!!shortAnswerSubmittedTexts.get(question.id!)?.length ? 'changed-question' : ''\"\r\n                                >\r\n                                    <b class=\"fa\">SA</b>\r\n                                </span>\r\n                            }\r\n                            <ng-template #tooltipExplanationTranslate>{{ 'artemisApp.quizExercise.explanationAnswered' | artemisTranslate }} </ng-template>\r\n                            <ng-template #tooltipNotExplanationTranslate>{{ 'artemisApp.quizExercise.explanationNotAnswered' | artemisTranslate }} </ng-template>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (quizConfiguration().quizQuestions) {\r\n        <div class=\"ms-5\">\r\n            @for (question of quizConfiguration().quizQuestions; track question; let i = $index) {\r\n                <div>\r\n                    <!-- TODO: Map vs Array consistency -->\r\n                    @if (question.type === MULTIPLE_CHOICE) {\r\n                        <jhi-multiple-choice-question\r\n                            id=\"question{{ question.id }}\"\r\n                            [question]=\"question\"\r\n                            [selectedAnswerOptions]=\"selectedAnswerOptions.get(question.id!)!\"\r\n                            (selectedAnswerOptionsChange)=\"selectedAnswerOptions.set(question.id!, $event)\"\r\n                            [fnOnSelection]=\"onSelectionChanged.bind(this)\"\r\n                            [quizQuestions]=\"quizConfiguration().quizQuestions\"\r\n                            [questionIndex]=\"i + 1\"\r\n                            [clickDisabled]=\"readonly()\"\r\n                        />\r\n                    }\r\n                    <!-- TODO: Map vs Array consistency -->\r\n                    @if (question.type === DRAG_AND_DROP) {\r\n                        <jhi-drag-and-drop-question\r\n                            id=\"question{{ question.id }}\"\r\n                            [question]=\"question\"\r\n                            [mappings]=\"dragAndDropMappings.get(question.id!)!\"\r\n                            (mappingsChange)=\"dragAndDropMappings.set(question.id!, $event)\"\r\n                            [onMappingUpdate]=\"onSelectionChanged.bind(this)\"\r\n                            [questionIndex]=\"i + 1\"\r\n                            [clickDisabled]=\"readonly()\"\r\n                        />\r\n                    }\r\n                    <!-- TODO: Map vs Array consistency -->\r\n                    @if (question.type === SHORT_ANSWER) {\r\n                        <jhi-short-answer-question\r\n                            id=\"question{{ question.id }}\"\r\n                            [question]=\"question\"\r\n                            [submittedTexts]=\"shortAnswerSubmittedTexts.get(question.id!)!\"\r\n                            (submittedTextsChange)=\"shortAnswerSubmittedTexts.set(question.id!, $event)\"\r\n                            [fnOnSubmittedTextUpdate]=\"onSelectionChanged.bind(this)\"\r\n                            [questionIndex]=\"i + 1\"\r\n                            [clickDisabled]=\"readonly()\"\r\n                        />\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, OnInit, inject, input, output } from '@angular/core';\r\nimport { TextEditorService } from 'app/exercises/text/participate/text-editor.service';\r\nimport { Subject } from 'rxjs';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { StringCountService } from 'app/exercises/text/participate/string-count.service';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore } from 'app/entities/exercise.model';\r\nimport { ExamSubmissionComponent } from 'app/exam/participate/exercises/exam-submission.component';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { faListAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { MAX_SUBMISSION_TEXT_LENGTH } from 'app/shared/constants/input.constants';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { IncludedInScoreBadgeComponent } from 'app/exercises/shared/exercise-headers/included-in-score-badge.component';\r\nimport { ExerciseSaveButtonComponent } from '../exercise-save-button/exercise-save-button.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ExamExerciseUpdateHighlighterComponent } from '../exam-exercise-update-highlighter/exam-exercise-update-highlighter.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { onTextEditorTab } from 'app/utils/text.utils';\r\n\r\n@Component({\r\n    selector: 'jhi-text-editor-exam',\r\n    templateUrl: './text-exam-submission.component.html',\r\n    providers: [{ provide: ExamSubmissionComponent, useExisting: TextExamSubmissionComponent }],\r\n    styleUrls: ['./text-exam-submission.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        IncludedInScoreBadgeComponent,\r\n        ExerciseSaveButtonComponent,\r\n        ResizeableContainerComponent,\r\n        FormsModule,\r\n        FaIconComponent,\r\n        ExamExerciseUpdateHighlighterComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class TextExamSubmissionComponent extends ExamSubmissionComponent implements OnInit {\r\n    private textService = inject(TextEditorService);\r\n    private stringCountService = inject(StringCountService);\r\n\r\n    exerciseType = ExerciseType.TEXT;\r\n\r\n    // IMPORTANT: this reference must be contained in this.studentParticipation.submissions[0] otherwise the parent component will not be able to react to changes\r\n    studentSubmission = input.required<TextSubmission>();\r\n    exercise = input.required<Exercise>();\r\n\r\n    saveCurrentExercise = output<void>();\r\n\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    readonly maxCharacterCount = MAX_SUBMISSION_TEXT_LENGTH;\r\n\r\n    // answer represents the view state\r\n    answer: string;\r\n    problemStatementHtml: string;\r\n    private textEditorInput = new Subject<string>();\r\n\r\n    // Icons\r\n    protected readonly faListAlt = faListAlt;\r\n\r\n    // used in the html template\r\n    protected readonly onTextEditorTab = onTextEditorTab;\r\n\r\n    ngOnInit(): void {\r\n        // show submission answers in UI\r\n        this.problemStatementHtml = htmlForMarkdown(this.exercise()?.problemStatement);\r\n        this.updateViewFromSubmission();\r\n    }\r\n\r\n    getExerciseId(): number | undefined {\r\n        return this.exercise().id;\r\n    }\r\n\r\n    getExercise(): Exercise {\r\n        return this.exercise();\r\n    }\r\n\r\n    updateProblemStatement(newProblemStatementHtml: string): void {\r\n        this.problemStatementHtml = newProblemStatementHtml;\r\n        this.changeDetectorReference.detectChanges();\r\n    }\r\n\r\n    getSubmission(): Submission {\r\n        return this.studentSubmission();\r\n    }\r\n\r\n    updateViewFromSubmission(): void {\r\n        this.answer = this.studentSubmission().text ?? '';\r\n    }\r\n\r\n    public hasUnsavedChanges(): boolean {\r\n        return !this.studentSubmission().isSynced!;\r\n    }\r\n\r\n    public updateSubmissionFromView(): void {\r\n        this.studentSubmission().text = this.answer;\r\n        this.studentSubmission().language = this.textService.predictLanguage(this.answer);\r\n    }\r\n\r\n    get wordCount(): number {\r\n        return this.stringCountService.countWords(this.answer);\r\n    }\r\n\r\n    get characterCount(): number {\r\n        return this.stringCountService.countCharacters(this.answer);\r\n    }\r\n\r\n    onTextEditorInput(event: Event) {\r\n        this.studentSubmission().isSynced = false;\r\n        this.textEditorInput.next((<HTMLTextAreaElement>event.target).value);\r\n    }\r\n\r\n    private updateViewFromSubmissionVersion() {\r\n        if (this.submissionVersion?.content) {\r\n            this.answer = this.submissionVersion.content;\r\n        } else {\r\n            // the content of the submission version can be undefined if an empty submission was saved\r\n            this.answer = '';\r\n        }\r\n    }\r\n\r\n    setSubmissionVersion(submissionVersion: SubmissionVersion): void {\r\n        this.submissionVersion = submissionVersion;\r\n        this.updateViewFromSubmissionVersion();\r\n    }\r\n\r\n    /**\r\n     * Trigger save action in exam participation component\r\n     */\r\n    notifyTriggerSave() {\r\n        this.saveCurrentExercise.emit();\r\n    }\r\n}\r\n", "@if (exercise()) {\r\n    <div class=\"d-flex justify-content-between align-items-center\">\r\n        <h3 class=\"text-align-left fw-normal mb-0\">\r\n            <span>\r\n                {{ exercise().exerciseGroup?.title }}\r\n            </span>\r\n            <span\r\n                [jhiTranslate]=\"exercise().bonusPoints ? 'artemisApp.examParticipation.bonus' : 'artemisApp.examParticipation.points'\"\r\n                [translateValues]=\"{ points: exercise().maxPoints, bonusPoints: exercise().bonusPoints }\"\r\n            >\r\n            </span>\r\n            @if (exercise().includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n                <jhi-included-in-score-badge [includedInOverallScore]=\"exercise().includedInOverallScore\" />\r\n            }\r\n        </h3>\r\n        <jhi-exercise-save-button [submission]=\"studentSubmission()\" (save)=\"notifyTriggerSave()\" />\r\n    </div>\r\n    <hr />\r\n    <!--resizable container-->\r\n    <jhi-resizeable-container class=\"col-12\" [examTimeline]=\"examTimeline()\">\r\n        <!--region Left Panel-->\r\n        <span class=\"exercise-title\" left-header>{{ examTimeline() ? exercise().title : ('artemisApp.exam.yourSolution' | artemisTranslate) }}</span>\r\n        <div left-body class=\"text-editor-grid mt-4 ps-2 pb-2 w-100\">\r\n            <div class=\"grid-area-main\">\r\n                <div>\r\n                    <span class=\"badge bg-primary mb-2\" jhiTranslate=\"artemisApp.textExercise.wordCount\" [translateValues]=\"{ count: wordCount }\"></span>\r\n                    <span class=\"badge bg-primary mb-2\" jhiTranslate=\"artemisApp.textExercise.characterCount\" [translateValues]=\"{ count: characterCount }\"></span>\r\n                </div>\r\n                <ng-container>\r\n                    <textarea\r\n                        #textEditor\r\n                        id=\"text-editor\"\r\n                        class=\"text-editor-textarea\"\r\n                        [maxLength]=\"maxCharacterCount\"\r\n                        [(ngModel)]=\"answer\"\r\n                        [readOnly]=\"readonly() || !studentSubmission()\"\r\n                        [disabled]=\"readonly() || !studentSubmission()\"\r\n                        (keydown.tab)=\"onTextEditorTab(textEditor, $event)\"\r\n                        (input)=\"onTextEditorInput($event)\"\r\n                    ></textarea>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n        <!--endregion-->\r\n        <!--region Right Panel-->\r\n        <fa-icon right-header [icon]=\"faListAlt\" />&nbsp;\r\n        <span right-header jhiTranslate=\"artemisApp.exercise.problemStatement\"></span>\r\n        <!-- problem statement update & difference highlighter -->\r\n        <ng-container right-body>\r\n            @if (exercise()) {\r\n                <jhi-exam-exercise-update-highlighter [exercise]=\"exercise()\" (problemStatementUpdateEvent)=\"updateProblemStatement($event)\" />\r\n            }\r\n            @if (problemStatementHtml) {\r\n                <p class=\"markdown-preview mb-3\">\r\n                    <span [innerHTML]=\"problemStatementHtml\"></span>\r\n                </p>\r\n            }\r\n        </ng-container>\r\n        <!--endregion-->\r\n    </jhi-resizeable-container>\r\n}\r\n", "import { Component, ElementRef, OnInit, inject, input, model, viewChild } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\r\nimport { MAX_SUBMISSION_FILE_SIZE } from 'app/shared/constants/input.constants';\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { FileService } from 'app/shared/http/file.service';\r\nimport { FileUploadSubmission } from 'app/entities/file-upload-submission.model';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ExamSubmissionComponent } from 'app/exam/participate/exercises/exam-submission.component';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore } from 'app/entities/exercise.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { SubmissionVersion } from 'app/entities/submission-version.model';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { IncludedInScoreBadgeComponent } from 'app/exercises/shared/exercise-headers/included-in-score-badge.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ExamExerciseUpdateHighlighterComponent } from '../exam-exercise-update-highlighter/exam-exercise-update-highlighter.component';\r\nimport { UpperCasePipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-file-upload-submission-exam',\r\n    templateUrl: './file-upload-exam-submission.component.html',\r\n    providers: [{ provide: ExamSubmissionComponent, useExisting: FileUploadExamSubmissionComponent }],\r\n    imports: [\r\n        TranslateDirective,\r\n        IncludedInScoreBadgeComponent,\r\n        ResizeableContainerComponent,\r\n        FaIconComponent,\r\n        ExamExerciseUpdateHighlighterComponent,\r\n        UpperCasePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class FileUploadExamSubmissionComponent extends ExamSubmissionComponent implements OnInit {\r\n    private fileUploadSubmissionService = inject(FileUploadSubmissionService);\r\n    private alertService = inject(AlertService);\r\n    private translateService = inject(TranslateService);\r\n    private fileService = inject(FileService);\r\n\r\n    exerciseType = ExerciseType.FILE_UPLOAD;\r\n\r\n    fileInput = viewChild<ElementRef>('fileInput');\r\n\r\n    studentSubmission = model.required<FileUploadSubmission>();\r\n    exercise = input.required<FileUploadExercise>();\r\n    problemStatementHtml: string;\r\n\r\n    submittedFileName: string;\r\n    submittedFileExtension: string;\r\n    participation: StudentParticipation;\r\n    result: Result;\r\n    submissionFile?: File;\r\n\r\n    readonly ButtonType = ButtonType;\r\n\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    filePath?: string;\r\n\r\n    // Icons\r\n    farListAlt = faListAlt;\r\n\r\n    /**\r\n     * Initializes data for file upload editor\r\n     */\r\n    ngOnInit() {\r\n        // show submission answers in UI\r\n        this.problemStatementHtml = htmlForMarkdown(this.exercise()?.problemStatement);\r\n        this.updateViewFromSubmission();\r\n    }\r\n\r\n    /**\r\n     * Updates the problem statement html of the currently loaded file upload exercise which is part of the user's student exam.\r\n     * @param newProblemStatementHtml is the updated problem statement html that should be displayed to the user.\r\n     */\r\n    updateProblemStatement(newProblemStatementHtml: string): void {\r\n        this.problemStatementHtml = newProblemStatementHtml;\r\n        this.changeDetectorReference.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Sets file submission for exercise\r\n     * Here the file selected with the -browse- button is handled.\r\n     * @param event {object} Event object which contains the uploaded file\r\n     */\r\n    setFileSubmissionForExercise(event: any): void {\r\n        if (event.target.files.length) {\r\n            const fileList: FileList = event.target.files;\r\n            const submissionFile = fileList[0];\r\n            const allowedFileExtensions = this.exercise().filePattern!.split(',');\r\n            if (!allowedFileExtensions.some((extension) => submissionFile.name.toLowerCase().endsWith(extension))) {\r\n                this.alertService.error('artemisApp.fileUploadSubmission.fileExtensionError');\r\n            } else if (submissionFile.size > MAX_SUBMISSION_FILE_SIZE) {\r\n                this.alertService.error('artemisApp.fileUploadSubmission.fileTooBigError', { fileName: submissionFile.name });\r\n            } else {\r\n                this.submissionFile = submissionFile;\r\n                this.studentSubmission().isSynced = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    downloadFile(filePath: string) {\r\n        this.fileService.downloadFile(filePath);\r\n    }\r\n\r\n    /**\r\n     * The exercise is still active if it's due date hasn't passed yet.\r\n     */\r\n    get isActive(): boolean {\r\n        return this.exercise() && (!this.exercise().dueDate || dayjs(this.exercise().dueDate).isSameOrAfter(dayjs()));\r\n    }\r\n\r\n    getExerciseId(): number | undefined {\r\n        return this.exercise().id;\r\n    }\r\n    getExercise(): Exercise {\r\n        return this.exercise();\r\n    }\r\n\r\n    public hasUnsavedChanges(): boolean {\r\n        return !this.studentSubmission().isSynced!;\r\n    }\r\n\r\n    getSubmission(): Submission {\r\n        return this.studentSubmission();\r\n    }\r\n\r\n    updateSubmissionFromView(): void {\r\n        // we do nothing here as the new file path comes from the server\r\n    }\r\n\r\n    /**\r\n     *  Here the new filePath, which was received from the server, is used to display the name and type of the just uploaded file.\r\n     */\r\n    updateViewFromSubmission(): void {\r\n        if ((this.studentSubmission().isSynced && this.studentSubmission().filePath) || (this.examTimeline() && this.studentSubmission().filePath)) {\r\n            // clear submitted file so that it is not displayed in the input (this might be confusing)\r\n            this.submissionFile = undefined;\r\n            const filePath = this.studentSubmission()!.filePath!.split('/');\r\n            this.submittedFileName = filePath.last()!;\r\n            const fileName = this.submittedFileName.split('.');\r\n            this.submittedFileExtension = fileName.last()!;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Here we send the submissionFile obtained in setFileSubmissionForExercise() to the server with the update method. The server returns the path to the file, and we\r\n     *  set it in the submission.\r\n     */\r\n    saveUploadedFile() {\r\n        if (!this.submissionFile) {\r\n            return;\r\n        }\r\n        this.fileUploadSubmissionService.update(this.studentSubmission() as FileUploadSubmission, this.exercise().id!, this.submissionFile).subscribe({\r\n            next: (res) => {\r\n                const submissionFromServer = res.body!;\r\n                this.studentSubmission().filePath = submissionFromServer.filePath;\r\n                this.studentSubmission().isSynced = true;\r\n                this.studentSubmission().submitted = true;\r\n                this.updateViewFromSubmission();\r\n            },\r\n            error: () => this.onError(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Pass on an error to the browser console and the alertService.\r\n     */\r\n    private onError() {\r\n        this.alertService.error(this.translateService.instant('error.fileUploadSavingError'));\r\n    }\r\n\r\n    setSubmissionVersion(submissionVersion: SubmissionVersion): void {\r\n        // if we do not assign the parameter, eslint will complain because either the parameter is unused or if we suppress this with ts-ignore that ts-ignore shadows compilation errors.\r\n        this.submissionVersion = submissionVersion;\r\n        // submission versions are not supported for file upload exercises\r\n        throw new Error('Submission versions are not supported for file upload exercises.');\r\n    }\r\n}\r\n", "@if (exercise()) {\r\n    <h3 class=\"text-align-left fw-normal\">\r\n        <span>\r\n            {{ exercise().exerciseGroup?.title }}\r\n        </span>\r\n        <span\r\n            [jhiTranslate]=\"exercise().bonusPoints ? 'artemisApp.examParticipation.bonus' : 'artemisApp.examParticipation.points'\"\r\n            [translateValues]=\"{ points: exercise().maxPoints, bonusPoints: exercise().bonusPoints }\"\r\n        >\r\n        </span>\r\n        @if (exercise().includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n            <jhi-included-in-score-badge [includedInOverallScore]=\"exercise().includedInOverallScore\" />\r\n        }\r\n    </h3>\r\n    <hr />\r\n    <jhi-resizeable-container [examTimeline]=\"examTimeline()\">\r\n        <!--region Left Panel-->\r\n        <span class=\"exercise-title\" left-header>{{ examTimeline() ? exercise().title : ('artemisApp.exam.yourSolution' | artemisTranslate) }}</span>\r\n        <div left-body class=\"px-2 pb-2 w-100\">\r\n            <div class=\"row\">\r\n                @if (isActive && !result && exercise() && studentSubmission() && !readonly()) {\r\n                    <div class=\"col-12 col-md-10\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"fileUploadInput\" class=\"form-control-label\" jhiTranslate=\"artemisApp.fileUploadSubmission.selectFile\"></label>\r\n                            <div class=\"input-group background-file\">\r\n                                <div class=\"custom-file overflow-ellipsis\">\r\n                                    <input #fileInput id=\"fileUploadInput\" type=\"file\" class=\"custom-file-input\" (change)=\"setFileSubmissionForExercise($event)\" />\r\n                                </div>\r\n                                <div class=\"col-4\">\r\n                                    <button\r\n                                        class=\"btn btn-primary\"\r\n                                        id=\"file-upload-submit\"\r\n                                        (click)=\"saveUploadedFile()\"\r\n                                        jhiTranslate=\"artemisApp.examParticipation.uploadFile\"\r\n                                    ></button>\r\n                                </div>\r\n                            </div>\r\n                            <p class=\"d-inline-block\" jhiTranslate=\"artemisApp.fileUploadExercise.supportedFileExtensions\"></p>\r\n                            @for (extension of exercise().filePattern!.split(','); track extension) {\r\n                                <div class=\"d-inline-block\">\r\n                                    <span class=\"ms-1 badge bg-info\">\r\n                                        {{ extension | uppercase }}\r\n                                    </span>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n            @if (submittedFileName && studentSubmission()?.filePath) {\r\n                <div class=\"card-text\">\r\n                    <h6 jhiTranslate=\"artemisApp.fileUploadSubmission.submittedFile\" [translateValues]=\"{ filename: submittedFileName }\"></h6>\r\n                    <a class=\"text-primary\" (click)=\"downloadFile(studentSubmission()!.filePath!)\" jhiTranslate=\"artemisApp.fileUploadSubmission.download\"></a>\r\n                    @if (submittedFileExtension) {\r\n                        <span class=\"ms-2 badge bg-info\">\r\n                            {{ submittedFileExtension | uppercase }}\r\n                        </span>\r\n                    }\r\n                </div>\r\n            }\r\n            @if (!submittedFileName && examTimeline()) {\r\n                <div>\r\n                    <h6 jhiTranslate=\"artemisApp.timeline.fileUploadNotSubmitted\"></h6>\r\n                </div>\r\n            }\r\n        </div>\r\n        <!--endregion-->\r\n        <!--region Right Panel-->\r\n        <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n        <span id=\"problem-statement\" right-header jhiTranslate=\"artemisApp.exercise.problemStatement\"></span>\r\n        <ng-container right-body>\r\n            <!-- problem statement update & difference highlighter -->\r\n            @if (exercise()) {\r\n                <jhi-exam-exercise-update-highlighter [exercise]=\"exercise()\" (problemStatementUpdateEvent)=\"updateProblemStatement($event)\" />\r\n            }\r\n            @if (problemStatementHtml) {\r\n                <p class=\"mb-3 markdown-preview\">\r\n                    <span [innerHTML]=\"problemStatementHtml\"></span>\r\n                </p>\r\n            }\r\n        </ng-container>\r\n        <!--endregion-->\r\n    </jhi-resizeable-container>\r\n}\r\n", "import { Component, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { ExamLiveEventComponent } from 'app/exam/shared/events/exam-live-event.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { ExamLiveEvent, ExamLiveEventType, ExamParticipationLiveEventsService, ProblemStatementUpdateEvent } from 'app/exam/participate/exam-participation-live-events.service';\r\nimport { USER_DISPLAY_RELEVANT_EVENTS, USER_DISPLAY_RELEVANT_EVENTS_REOPEN } from 'app/exam/participate/events/exam-live-events-button.component';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExamExerciseUpdateService } from 'app/exam/manage/exam-exercise-update.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-live-events-overlay',\r\n    templateUrl: './exam-live-events-overlay.component.html',\r\n    styleUrls: ['./exam-live-events-overlay.component.scss'],\r\n    imports: [ExamLiveEventComponent, FaIconComponent, TranslateDirective],\r\n})\r\nexport class ExamLiveEventsOverlayComponent implements OnInit, OnDestroy {\r\n    private liveEventsService = inject(ExamParticipationLiveEventsService);\r\n    private activeModal = inject(NgbActiveModal);\r\n    private examExerciseUpdateService = inject(ExamExerciseUpdateService);\r\n\r\n    private allLiveEventsSubscription?: Subscription;\r\n    private newLiveEventsSubscription?: Subscription;\r\n\r\n    unacknowledgedEvents: ExamLiveEvent[] = [];\r\n    eventsToDisplay?: ExamLiveEvent[];\r\n    events: ExamLiveEvent[] = [];\r\n\r\n    @Input() examStartDate: dayjs.Dayjs;\r\n    // Icons\r\n    faCheck = faCheck;\r\n\r\n    protected readonly ExamLiveEventType = ExamLiveEventType;\r\n\r\n    ngOnDestroy(): void {\r\n        this.allLiveEventsSubscription?.unsubscribe();\r\n        this.newLiveEventsSubscription?.unsubscribe();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.allLiveEventsSubscription = this.liveEventsService.observeAllEvents(USER_DISPLAY_RELEVANT_EVENTS_REOPEN).subscribe((events: ExamLiveEvent[]) => {\r\n            // display the problem statements events only after the start of the exam\r\n            this.events = events.filter((event) => !(event.eventType === ExamLiveEventType.PROBLEM_STATEMENT_UPDATE && event.createdDate.isBefore(this.examStartDate)));\r\n            if (!this.eventsToDisplay) {\r\n                this.updateEventsToDisplay();\r\n            }\r\n        });\r\n\r\n        this.newLiveEventsSubscription = this.liveEventsService.observeNewEventsAsUser(USER_DISPLAY_RELEVANT_EVENTS, this.examStartDate).subscribe((event: ExamLiveEvent) => {\r\n            this.unacknowledgedEvents.unshift(event);\r\n            this.updateEventsToDisplay();\r\n        });\r\n    }\r\n\r\n    acknowledgeEvent(event: ExamLiveEvent) {\r\n        this.liveEventsService.acknowledgeEvent(event, true);\r\n        this.unacknowledgedEvents = this.unacknowledgedEvents.filter((e) => e.id !== event.id);\r\n        if (this.unacknowledgedEvents.length === 0) {\r\n            this.closeOverlay();\r\n            setTimeout(() => this.updateEventsToDisplay(), 250);\r\n        } else {\r\n            this.updateEventsToDisplay();\r\n        }\r\n    }\r\n\r\n    navigateToExercise(event: ExamLiveEvent) {\r\n        this.acknowledgeEvent(event);\r\n        const problemStatementUpdateEvent = event as ProblemStatementUpdateEvent;\r\n        const exerciseId = problemStatementUpdateEvent.exerciseId;\r\n        this.examExerciseUpdateService.navigateToExamExercise(exerciseId);\r\n    }\r\n\r\n    acknowledgeAllUnacknowledgedEvents() {\r\n        this.unacknowledgedEvents.forEach((event) => this.liveEventsService.acknowledgeEvent(event, true));\r\n        this.unacknowledgedEvents = [];\r\n        this.closeOverlay();\r\n        setTimeout(() => this.updateEventsToDisplay(), 250);\r\n    }\r\n\r\n    closeOverlay() {\r\n        this.activeModal.close('cancel');\r\n    }\r\n\r\n    updateEventsToDisplay() {\r\n        this.eventsToDisplay = this.unacknowledgedEvents.length > 0 ? this.unacknowledgedEvents : this.events;\r\n    }\r\n}\r\n", "<div class=\"overlay-wrapper\">\r\n    <div class=\"events-wrapper\">\r\n        @for (event of eventsToDisplay; track event) {\r\n            <jhi-exam-live-event\r\n                [event]=\"event\"\r\n                [showAcknowledge]=\"unacknowledgedEvents.includes(event)\"\r\n                (onAcknowledge)=\"acknowledgeEvent(event)\"\r\n                (onNavigate)=\"navigateToExercise(event)\"\r\n            />\r\n        }\r\n    </div>\r\n    @if (unacknowledgedEvents.length === 0) {\r\n        <button class=\"btn btn-primary w-100 mt-2\" (click)=\"closeOverlay()\">Close</button>\r\n    }\r\n    @if (unacknowledgedEvents.length > 1) {\r\n        <button class=\"btn btn-primary w-100 mt-2\" (click)=\"acknowledgeAllUnacknowledgedEvents()\">\r\n            <fa-icon [icon]=\"faCheck\" />\r\n            <span jhiTranslate=\"artemisApp.exam.events.acknowledgeAll\"></span>\r\n        </button>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnDestroy, OnInit, ViewEncapsulation, inject } from '@angular/core';\r\nimport { faBullhorn } from '@fortawesome/free-solid-svg-icons';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Subscription, from } from 'rxjs';\r\nimport { ExamLiveEvent, ExamLiveEventType, ExamParticipationLiveEventsService } from 'app/exam/participate/exam-participation-live-events.service';\r\nimport { ExamLiveEventsOverlayComponent } from 'app/exam/participate/events/exam-live-events-overlay.component';\r\nimport dayjs from 'dayjs/esm';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\nexport const USER_DISPLAY_RELEVANT_EVENTS = [\r\n    ExamLiveEventType.EXAM_WIDE_ANNOUNCEMENT,\r\n    ExamLiveEventType.WORKING_TIME_UPDATE,\r\n    ExamLiveEventType.EXAM_ATTENDANCE_CHECK,\r\n    ExamLiveEventType.PROBLEM_STATEMENT_UPDATE,\r\n];\r\nexport const USER_DISPLAY_RELEVANT_EVENTS_REOPEN = [ExamLiveEventType.EXAM_WIDE_ANNOUNCEMENT, ExamLiveEventType.WORKING_TIME_UPDATE, ExamLiveEventType.PROBLEM_STATEMENT_UPDATE];\r\n\r\n@Component({\r\n    selector: 'jhi-exam-live-events-button',\r\n    templateUrl: './exam-live-events-button.component.html',\r\n    styleUrls: ['./exam-live-events-button.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [FaIconComponent],\r\n})\r\nexport class ExamLiveEventsButtonComponent implements OnInit, OnDestroy {\r\n    private alertService = inject(AlertService);\r\n    private modalService = inject(NgbModal);\r\n    private liveEventsService = inject(ExamParticipationLiveEventsService);\r\n\r\n    private modalRef?: NgbModalRef;\r\n    private liveEventsSubscription?: Subscription;\r\n    private allEventsSubscription?: Subscription;\r\n    eventCount = 0;\r\n    @Input() examStartDate: dayjs.Dayjs;\r\n\r\n    // Icons\r\n    faBullhorn = faBullhorn;\r\n\r\n    ngOnInit(): void {\r\n        this.allEventsSubscription = this.liveEventsService.observeAllEvents(USER_DISPLAY_RELEVANT_EVENTS_REOPEN).subscribe((events: ExamLiveEvent[]) => {\r\n            // do not count the problem statements events that are made before the start of the exam\r\n            const filteredEvents = events.filter((event) => !(event.eventType === ExamLiveEventType.PROBLEM_STATEMENT_UPDATE && event.createdDate.isBefore(this.examStartDate)));\r\n            this.eventCount = filteredEvents.length;\r\n        });\r\n\r\n        this.liveEventsSubscription = this.liveEventsService.observeNewEventsAsUser(USER_DISPLAY_RELEVANT_EVENTS, this.examStartDate).subscribe(() => {\r\n            // If any unacknowledged event comes in, open the dialog to display it\r\n            if (!this.modalRef) {\r\n                this.openDialog();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.liveEventsSubscription?.unsubscribe();\r\n        this.allEventsSubscription?.unsubscribe();\r\n    }\r\n\r\n    openDialog(event?: MouseEvent) {\r\n        event?.preventDefault();\r\n\r\n        this.alertService.closeAll();\r\n        this.modalRef = this.modalService.open(ExamLiveEventsOverlayComponent, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n            animation: false,\r\n            centered: true,\r\n            windowClass: 'live-events-modal-window',\r\n        });\r\n\r\n        this.modalRef.componentInstance.examStartDate = this.examStartDate;\r\n\r\n        from(this.modalRef.result).subscribe(() => (this.modalRef = undefined));\r\n    }\r\n}\r\n", "@if (eventCount) {\r\n    <button class=\"btn btn-md btn-info\" (click)=\"openDialog($event)\">\r\n        <fa-icon [icon]=\"faBullhorn\" />\r\n        <span>({{ eventCount }})</span>\r\n    </button>\r\n}\r\n", "import { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, inject } from '@angular/core';\r\nimport { Observable, Subject, timer } from 'rxjs';\r\nimport { distinctUntilChanged, first, map, takeUntil } from 'rxjs/operators';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-timer',\r\n    templateUrl: './exam-timer.component.html',\r\n    styleUrls: ['./exam-timer.scss'],\r\n    imports: [AsyncPipe, ArtemisTranslatePipe],\r\n})\r\nexport class ExamTimerComponent implements OnInit, OnDestroy {\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    @HostBinding('class.row') readonly row = true;\r\n\r\n    @Input()\r\n    endDate: dayjs.Dayjs;\r\n\r\n    @Input()\r\n    criticalTime: plugin.Duration;\r\n\r\n    @Input()\r\n    isEndView = false;\r\n\r\n    @Output()\r\n    timerAboutToEnd: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    isCriticalTime: boolean;\r\n\r\n    destroy$: Subject<boolean> = new Subject<boolean>();\r\n    private timer: Observable<plugin.Duration> = timer(0, 100).pipe(map(() => dayjs.duration(this.endDate.diff(this.serverDateService.now()))));\r\n\r\n    displayTime$ = this.timer.pipe(\r\n        map((timeLeft: plugin.Duration) => this.updateDisplayTime(timeLeft)),\r\n        distinctUntilChanged(),\r\n    );\r\n\r\n    timePipe: ArtemisDurationFromSecondsPipe = new ArtemisDurationFromSecondsPipe();\r\n\r\n    constructor() {\r\n        this.timer\r\n            .pipe(\r\n                map((timeLeft: plugin.Duration) => timeLeft.asSeconds()),\r\n                distinctUntilChanged(),\r\n                first((durationInSeconds) => durationInSeconds <= 1),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => {\r\n                this.timerAboutToEnd.emit();\r\n                // if timer is displayed and duration is already over\r\n                // -> display at least one display time, that's why we use setTimeout\r\n                setTimeout(() => this.destroy$.next(true));\r\n            });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const duration = dayjs.duration(this.endDate.diff(this.serverDateService.now()));\r\n        this.setIsCriticalTime(duration);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n    }\r\n\r\n    updateDisplayTime(timeDiff: plugin.Duration) {\r\n        // update isCriticalTime\r\n        this.setIsCriticalTime(timeDiff);\r\n\r\n        if (timeDiff.asMilliseconds() < 0) {\r\n            return this.timePipe.transform(0, true);\r\n        } else {\r\n            return this.timePipe.transform(round(timeDiff.asSeconds()), true);\r\n        }\r\n    }\r\n\r\n    setIsCriticalTime(timeDiff: plugin.Duration) {\r\n        const clonedTimeDiff = cloneDeep(timeDiff);\r\n        if (this.criticalTime && clonedTimeDiff.subtract(this.criticalTime).asMilliseconds() < 0) {\r\n            this.isCriticalTime = true;\r\n        }\r\n    }\r\n}\r\n", "<div class=\"col-auto mb-0 timer px-1\">\r\n    {{ 'artemisApp.examParticipation.' + (isEndView ? 'timerEndView' : 'timer') | artemisTranslate }}\r\n</div>\r\n<div class=\"col-auto text-overflow remaining-time m-0 px-0\" [class.critical]=\"isCriticalTime\" id=\"displayTime\">\r\n    {{ displayTime$ | async }}\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["ExamPage", "isOverviewPage", "exercise", "constructor", "undefined", "ExamPageComponent", "changeDetectorReference", "inject", "ChangeDetectorRef", "onActivate", "reattach", "onDeactivate", "detach", "ExamSubmissionComponent", "ExamPageComponent", "readonly", "input", "examTimeline", "submissionVersion", "__ngFactoryType__", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "ExerciseSaveButtonComponent", "faFloppyDisk", "facSaveSuccess", "submission", "input", "save", "output", "onSave", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275property", "tmp_0_0", "isSynced", "\u0275\u0275advance", "tmp_2_0", "submitted", "tmp_3_0", "FaIconComponent", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "exercise", "includedInOverallScore", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "modelChanged", "explanationChanged", "\u0275\u0275elementEnd", "umlModel", "diagramType", "readonly", "explanationText", "_r4", "updateProblemStatement", "problemStatementHtml", "\u0275\u0275sanitizeHtml", "\u0275\u0275template", "ModelingExamSubmissionComponent_Conditional_0_Conditional_11_Template", "_r1", "notifyTriggerSave", "ModelingExamSubmissionComponent_Conditional_0_Conditional_31_Template", "\u0275\u0275elementContainerStart", "ModelingExamSubmissionComponent_Conditional_0_Conditional_44_Template", "ModelingExamSubmissionComponent_Conditional_0_Conditional_45_Template", "\u0275\u0275textInterpolate1", "tmp_1_0", "exerciseGroup", "title", "bonusPoints", "\u0275\u0275pureFunction2", "_c0", "maxPoints", "\u0275\u0275conditional", "IncludedInOverallScore", "INCLUDED_COMPLETELY", "studentSubmission", "examTimeline", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "isActive", "faListAlt", "ModelingExamSubmissionComponent", "ExamSubmissionComponent", "exerciseType", "ExerciseType", "MODELING", "modelingEditor", "viewChild", "required", "ModelingEditorComponent", "input", "isSubmissionSynced", "saveCurrentExercise", "output", "ngOnInit", "htmlForMarkdown", "problemStatement", "updateViewFromSubmission", "newProblemStatementHtml", "changeDetectorReference", "detectChanges", "getSubmission", "getExerciseId", "id", "getExercise", "model", "JSON", "parse", "updateSubmissionFromView", "getCurrentModel", "currentApollonModel", "diagramJson", "stringify", "hasUnsavedChanges", "isSynced", "dueDate", "dayjs", "isSameOrAfter", "_model", "explanation", "setSubmissionVersion", "submission", "__async", "submissionVersion", "updateViewFromSubmissionVersion", "content", "substring", "indexOf", "apollonEditor", "nextRender", "replace", "numberOfCharactersToSkip", "emit", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "provide", "useExisting", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "ModelingExamSubmissionComponent_Conditional_0_Template", "TranslateDirective", "IncludedInScoreBadgeComponent", "ExerciseSaveButtonComponent", "ResizeableContainerComponent", "FullscreenComponent", "FaIconComponent", "ExamExerciseUpdateHighlighterComponent", "ArtemisTranslatePipe", "styles", "changeDetection", "smoothscroll", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "quizConfiguration", "includedInOverallScore", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "question_r3", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "navigateToQuestion", "id", "\u0275\u0275elementEnd", "tmp_15_0", "dragAndDropMappings", "get", "length", "tooltipExplanationTranslate_r4", "tooltipNotExplanationTranslate_r5", "tmp_16_0", "_r6", "selectedAnswerOptions", "_r7", "shortAnswerSubmittedTexts", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275template", "QuizExamSubmissionComponent_Conditional_18_For_8_Conditional_3_Template", "QuizExamSubmissionComponent_Conditional_18_For_8_Conditional_4_Template", "QuizExamSubmissionComponent_Conditional_18_For_8_Conditional_5_Template", "QuizExamSubmissionComponent_Conditional_18_For_8_ng_template_6_Template", "\u0275\u0275templateRefExtractor", "QuizExamSubmissionComponent_Conditional_18_For_8_ng_template_9_Template", "\u0275\u0275conditional", "type", "DRAG_AND_DROP", "MULTIPLE_CHOICE", "SHORT_ANSWER", "\u0275\u0275repeaterCreate", "QuizExamSubmissionComponent_Conditional_18_For_8_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "quizQuestions", "$event", "_r8", "question_r9", "set", "\u0275\u0275propertyInterpolate1", "onSelectionChanged", "bind", "\u0275$index_95_r11", "readonly", "_r12", "_r13", "QuizExamSubmissionComponent_Conditional_19_For_4_Conditional_4_Template", "QuizExamSubmissionComponent_Conditional_19_For_4_Conditional_5_Template", "QuizExamSubmissionComponent_Conditional_19_For_4_Conditional_6_Template", "QuizExamSubmissionComponent_Conditional_19_For_4_Template", "QuizExamSubmissionComponent", "ExamSubmissionComponent", "quizService", "inject", "ArtemisQuizService", "exerciseType", "ExerciseType", "QUIZ", "QuizQuestionType", "ButtonSize", "ButtonType", "IncludedInOverallScore", "mcQuestionComponents", "viewChildren", "MultipleChoiceQuestionComponent", "dndQuestionComponents", "DragAndDropQuestionComponent", "shortAnswerQuestionComponents", "ShortAnswerQuestionComponent", "studentSubmission", "input", "required", "exercise", "examTimeline", "saveCurrentExercise", "output", "Map", "ngOnInit", "polyfill", "initQuiz", "updateViewFromSubmission", "getSubmission", "getExerciseId", "getExercise", "randomizeOrder", "randomizeQuestionOrder", "forEach", "question", "captureException", "questionId", "element", "document", "getElementById", "scrollIntoView", "behavior", "block", "inline", "submittedAnswer", "submittedAnswers", "find", "answer", "quizQuestion", "selectedOptions", "cloneDeep", "mappings", "submittedTexts", "isSynced", "hasUnsavedChanges", "updateSubmissionFromView", "answerOptions", "questionID", "selectedQuestion", "Number", "mcSubmittedAnswer", "MultipleChoiceSubmittedAnswer", "push", "localQuestion", "dndSubmittedAnswer", "DragAndDropSubmittedAnswer", "shortAnswerSubmittedAnswer", "ShortAnswerSubmittedAnswer", "updateViewFromSubmissionVersion", "JSON", "parse", "submissionVersion", "content", "setSubmissionVersion", "notifyTriggerSave", "emit", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "provide", "useExisting", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "QuizExamSubmissionComponent_Conditional_9_Template", "QuizExamSubmissionComponent_Conditional_18_Template", "QuizExamSubmissionComponent_Conditional_19_Template", "tmp_0_0", "exerciseGroup", "title", "\u0275\u0275pureFunction1", "_c0", "maxPoints", "INCLUDED_COMPLETELY", "TranslateDirective", "IncludedInScoreBadgeComponent", "ExerciseSaveButtonComponent", "NgbTooltip", "NgClass", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "exercise", "includedInOverallScore", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateProblemStatement", "\u0275\u0275elementEnd", "problemStatementHtml", "\u0275\u0275sanitizeHtml", "\u0275\u0275template", "TextExamSubmissionComponent_Conditional_0_Conditional_11_Template", "_r1", "notifyTriggerSave", "\u0275\u0275elementContainerStart", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "answer", "textEditor_r3", "\u0275\u0275reference", "onTextEditorTab", "onTextEditorInput", "TextExamSubmissionComponent_Conditional_0_Conditional_54_Template", "TextExamSubmissionComponent_Conditional_0_Conditional_55_Template", "\u0275\u0275textInterpolate1", "tmp_2_0", "exerciseGroup", "title", "bonusPoints", "\u0275\u0275pureFunction2", "_c0", "maxPoints", "\u0275\u0275conditional", "IncludedInOverallScore", "INCLUDED_COMPLETELY", "studentSubmission", "examTimeline", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275pureFunction1", "_c1", "wordCount", "characterCount", "maxCharacterCount", "\u0275\u0275twoWayProperty", "readonly", "faListAlt", "TextExamSubmissionComponent", "ExamSubmissionComponent", "textService", "inject", "TextEditorService", "stringCountService", "StringCountService", "exerciseType", "ExerciseType", "TEXT", "input", "required", "saveCurrentExercise", "output", "MAX_SUBMISSION_TEXT_LENGTH", "textEditorInput", "Subject", "ngOnInit", "htmlForMarkdown", "problemStatement", "updateViewFromSubmission", "getExerciseId", "id", "getExercise", "newProblemStatementHtml", "changeDetectorReference", "detectChanges", "getSubmission", "text", "hasUnsavedChanges", "isSynced", "updateSubmissionFromView", "language", "predictLanguage", "countWords", "countCharacters", "event", "next", "target", "value", "updateViewFromSubmissionVersion", "submissionVersion", "content", "setSubmissionVersion", "emit", "__ngFactoryType__", "selectors", "inputs", "outputs", "features", "\u0275\u0275ProvidersFeature", "provide", "useExisting", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "TextExamSubmissionComponent_Conditional_0_Template", "TranslateDirective", "IncludedInScoreBadgeComponent", "ExerciseSaveButtonComponent", "ResizeableContainerComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "FaIconComponent", "ExamExerciseUpdateHighlighterComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "includedInOverallScore", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "extension_r3", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setFileSubmissionForExercise", "saveUploadedFile", "\u0275\u0275repeaterCreate", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_24_For_24_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "filePattern", "split", "submittedFileExtension", "_r4", "downloadFile", "studentSubmission", "filePath", "\u0275\u0275template", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_26_Conditional_7_Template", "\u0275\u0275pureFunction1", "_c2", "submittedFileName", "\u0275\u0275conditional", "_r5", "updateProblemStatement", "problemStatementHtml", "\u0275\u0275sanitizeHtml", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_9_Template", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_24_Template", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_26_Template", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_27_Template", "\u0275\u0275elementContainerStart", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_38_Template", "FileUploadExamSubmissionComponent_Conditional_0_Conditional_39_Template", "tmp_1_0", "exerciseGroup", "title", "bonusPoints", "\u0275\u0275pureFunction2", "_c1", "maxPoints", "IncludedInOverallScore", "INCLUDED_COMPLETELY", "examTimeline", "\u0275\u0275textInterpolate", "isActive", "result", "readonly", "tmp_8_0", "farListAlt", "FileUploadExamSubmissionComponent", "ExamSubmissionComponent", "fileUploadSubmissionService", "inject", "FileUploadSubmissionService", "alertService", "AlertService", "translateService", "TranslateService", "fileService", "FileService", "exerciseType", "ExerciseType", "FILE_UPLOAD", "fileInput", "viewChild", "model", "required", "input", "participation", "submissionFile", "ButtonType", "faListAlt", "ngOnInit", "htmlForMarkdown", "problemStatement", "updateViewFromSubmission", "newProblemStatementHtml", "changeDetectorReference", "detectChanges", "event", "target", "files", "length", "some", "extension", "name", "toLowerCase", "endsWith", "size", "MAX_SUBMISSION_FILE_SIZE", "error", "fileName", "isSynced", "dueDate", "dayjs", "isSameOrAfter", "getExerciseId", "id", "getExercise", "hasUnsavedChanges", "getSubmission", "updateSubmissionFromView", "undefined", "last", "update", "subscribe", "next", "res", "submissionFromServer", "body", "submitted", "onError", "instant", "setSubmissionVersion", "submissionVersion", "Error", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "provide", "useExisting", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "FileUploadExamSubmissionComponent_Conditional_0_Template", "TranslateDirective", "IncludedInScoreBadgeComponent", "ResizeableContainerComponent", "FaIconComponent", "ExamExerciseUpdateHighlighterComponent", "UpperCasePipe", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "event_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "acknowledgeEvent", "navigateToExercise", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "unacknowledgedEvents", "includes", "_r4", "closeOverlay", "_r5", "acknowledgeAllUnacknowledgedEvents", "\u0275\u0275element", "faCheck", "ExamLiveEventsOverlayComponent", "liveEventsService", "inject", "ExamParticipationLiveEventsService", "activeModal", "NgbActiveModal", "examExerciseUpdateService", "ExamExerciseUpdateService", "allLiveEventsSubscription", "newLiveEventsSubscription", "eventsToDisplay", "events", "examStartDate", "ExamLiveEventType", "ngOnDestroy", "unsubscribe", "ngOnInit", "observeAllEvents", "USER_DISPLAY_RELEVANT_EVENTS_REOPEN", "subscribe", "filter", "event", "eventType", "PROBLEM_STATEMENT_UPDATE", "createdDate", "isBefore", "updateEventsToDisplay", "observeNewEventsAsUser", "USER_DISPLAY_RELEVANT_EVENTS", "unshift", "e", "id", "length", "setTimeout", "exerciseId", "navigateToExamExercise", "forEach", "close", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "ExamLiveEventsOverlayComponent_For_5_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275template", "ExamLiveEventsOverlayComponent_Conditional_7_Template", "ExamLiveEventsOverlayComponent_Conditional_8_Template", "\u0275\u0275repeater", "\u0275\u0275conditional", "ExamLiveEventComponent", "FaIconComponent", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openDialog", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faBullhorn", "\u0275\u0275textInterpolate1", "eventCount", "USER_DISPLAY_RELEVANT_EVENTS", "ExamLiveEventType", "EXAM_WIDE_ANNOUNCEMENT", "WORKING_TIME_UPDATE", "EXAM_ATTENDANCE_CHECK", "PROBLEM_STATEMENT_UPDATE", "USER_DISPLAY_RELEVANT_EVENTS_REOPEN", "ExamLiveEventsButtonComponent", "alertService", "inject", "AlertService", "modalService", "NgbModal", "liveEventsService", "ExamParticipationLiveEventsService", "modalRef", "liveEventsSubscription", "allEventsSubscription", "examStartDate", "ngOnInit", "observeAllEvents", "subscribe", "events", "filteredEvents", "filter", "event", "eventType", "createdDate", "isBefore", "length", "observeNewEventsAsUser", "ngOnDestroy", "unsubscribe", "preventDefault", "closeAll", "open", "ExamLiveEventsOverlayComponent", "size", "backdrop", "animation", "centered", "windowClass", "componentInstance", "from", "result", "undefined", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ExamLiveEventsButtonComponent_Conditional_0_Template", "\u0275\u0275conditional", "FaIconComponent", "styles", "encapsulation", "ExamTimerComponent", "serverDateService", "inject", "ArtemisServerDateService", "row", "endDate", "criticalTime", "isEndView", "timerAboutToEnd", "EventEmitter", "isCriticalTime", "destroy$", "Subject", "timer", "pipe", "map", "dayjs", "duration", "diff", "now", "displayTime$", "timeLeft", "updateDisplayTime", "distinctUntilChanged", "timePipe", "ArtemisDurationFromSecondsPipe", "constructor", "asSeconds", "first", "durationInSeconds", "takeUntil", "subscribe", "emit", "setTimeout", "next", "ngOnInit", "setIsCriticalTime", "ngOnDestroy", "timeDiff", "asMilliseconds", "transform", "round", "clonedTimeDiff", "cloneDeep", "subtract", "selectors", "hostVars", "hostBindings", "rf", "ctx", "\u0275\u0275classProp", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "AsyncPipe", "ArtemisTranslatePipe", "styles"]
}
