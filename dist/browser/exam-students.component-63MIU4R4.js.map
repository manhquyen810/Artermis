{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/students/upload-images/students-upload-images-dialog.component.ts", "src/main/webapp/app/exam/manage/students/upload-images/students-upload-images-dialog.component.html", "src/main/webapp/app/exam/manage/students/upload-images/students-upload-images-button.component.ts", "src/main/webapp/app/exam/manage/students/exam-students.component.ts", "src/main/webapp/app/exam/manage/students/exam-students.component.html"],
  "sourcesContent": ["import { Component, Input, OnDestroy, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { faArrowRight, faBan, faCheck, faCircleNotch, faSpinner, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nclass NotFoundExamUserType {\r\n    numberOfUsersNotFound: number;\r\n    numberOfImagesSaved: number;\r\n    listOfExamUserRegistrationNumbers: string[];\r\n}\r\n@Component({\r\n    selector: 'jhi-student-upload-images-dialog',\r\n    templateUrl: './students-upload-images-dialog.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [FormsModule, TranslateDirective, HelpIconComponent, FaIconComponent, NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class StudentsUploadImagesDialogComponent implements OnDestroy {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n    private examManagementService = inject(ExamManagementService);\r\n\r\n    readonly ActionType = ActionType;\r\n\r\n    @ViewChild('importForm', { static: false }) importForm: NgForm;\r\n    notFoundUsers?: NotFoundExamUserType;\r\n    file: File;\r\n\r\n    @Input() courseId: number;\r\n    @Input() exam: Exam | undefined;\r\n\r\n    isParsing = false;\r\n    hasParsed = false;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faSpinner = faSpinner;\r\n    faCheck = faCheck;\r\n    faCircleNotch = faCircleNotch;\r\n    faUpload = faUpload;\r\n    faArrowRight = faArrowRight;\r\n\r\n    ngOnDestroy(): void {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n\r\n    onFinish() {\r\n        this.activeModal.close();\r\n    }\r\n\r\n    private resetDialog() {\r\n        this.isParsing = false;\r\n        this.notFoundUsers = undefined;\r\n        this.hasParsed = false;\r\n    }\r\n\r\n    onPDFFileSelect(event: any) {\r\n        if (event.target.files.length > 0) {\r\n            this.resetDialog();\r\n            this.file = event.target.files[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse pdf file and save images of registered students\r\n     */\r\n    parsePDFFile() {\r\n        this.isParsing = true;\r\n        if (this.exam?.id) {\r\n            const formData: FormData = new FormData();\r\n            formData.append('file', this.file);\r\n\r\n            this.examManagementService.saveImages(this.courseId, this.exam.id, formData).subscribe({\r\n                next: (res: any) => {\r\n                    if (res) {\r\n                        this.notFoundUsers = res.body;\r\n                        this.isParsing = false;\r\n                        this.hasParsed = true;\r\n                    }\r\n                },\r\n                error: (res: HttpErrorResponse) => {\r\n                    if (res.error.params === 'file' && res?.error?.title) {\r\n                        this.alertService.error(res.error.title);\r\n                    } else {\r\n                        onError(this.alertService, res);\r\n                    }\r\n                    this.isParsing = false;\r\n                    this.hasParsed = false;\r\n                },\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<form id=\"userImportDialogForm\" name=\"importForm\" role=\"form\" novalidate>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">\r\n            <span [jhiTranslate]=\"'artemisApp.exam.examUsers.dialogTitle'\"> Upload images for registered students: </span>\r\n        </h4>\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"form-group\">\r\n            <p class=\"intro-text\" jhiTranslate=\"artemisApp.exam.examUsers.introText\"></p>\r\n            <p class=\"intro-text\" jhiTranslate=\"artemisApp.exam.examUsers.pdfExampleText\"></p>\r\n        </div>\r\n        <div class=\"d-flex justify-content-center align-items-center\">\r\n            <img class=\"border\" width=\"300\" src=\"/content/images/upload_student_images_pdf_example_img.png\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <div class=\"d-flex align-items-end\">\r\n                <div>\r\n                    <label for=\"importPDF\" class=\"label-narrow font-weight-bold\" jhiTranslate=\"artemisApp.exam.examUsers.pdfFile.label\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.exam.examUsers.pdfFile.tooltip\" class=\"me-1\" />\r\n                </div>\r\n                @if (isParsing) {\r\n                    <fa-icon class=\"loading-spinner ms-1\" [icon]=\"faSpinner\" animation=\"spin\" />\r\n                }\r\n            </div>\r\n            <div class=\"mt-2\">\r\n                <input id=\"importPDF\" type=\"file\" accept=\".pdf\" (change)=\"onPDFFileSelect($event)\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer justify-content-between\">\r\n        @if ((notFoundUsers?.numberOfUsersNotFound ?? 0 > 0) || notFoundUsers?.numberOfImagesSaved === 0) {\r\n            <div class=\"flex-shrink-0 me-2 d-flex\">\r\n                @if (hasParsed) {\r\n                    <div>\r\n                        <div class=\"ms-2\">\r\n                            <strong jhiTranslate=\"artemisApp.importUsers.numberOfUsersNotImported\"></strong>\r\n                            <span\r\n                                ><b style=\"color: red\">{{ notFoundUsers?.numberOfUsersNotFound }}</b></span\r\n                            >\r\n                        </div>\r\n                        <div class=\"ms-2\">\r\n                            <strong>{{ 'artemisApp.exam.examUsers.numberOfImagesSaved' | artemisTranslate }}:</strong>\r\n                            <span\r\n                                ><b style=\"color: green\">{{ notFoundUsers?.numberOfImagesSaved }}</b></span\r\n                            >\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        @if ((notFoundUsers?.numberOfImagesSaved ?? 0 > 0) && notFoundUsers?.numberOfUsersNotFound === 0) {\r\n            <div class=\"flex-shrink-0 me-2 d-flex\">\r\n                @if (hasParsed) {\r\n                    <div>\r\n                        <div class=\"ms-2\">\r\n                            <strong style=\"color: green\" jhiTranslate=\"artemisApp.exam.examUsers.allImagesSaved\"></strong>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        <div class=\"flex-grow-1 d-flex justify-content-end\">\r\n            @if (!hasParsed) {\r\n                <button type=\"button\" class=\"btn btn-secondary cancel me-2\" data-dismiss=\"modal\" (click)=\"clear()\">\r\n                    <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n                </button>\r\n            }\r\n            @if (!hasParsed) {\r\n                <button type=\"submit\" id=\"import\" name=\"importButton\" class=\"btn btn-primary\" [disabled]=\"!file || isParsing\" (click)=\"parsePDFFile()\">\r\n                    <fa-icon [icon]=\"faUpload\" class=\"me-2\" />\r\n                    <span jhiTranslate=\"artemisApp.exam.examUsers.saveImages\"></span>\r\n                    <fa-icon class=\"ms-1\" [hidden]=\"!isParsing\" animation=\"spin\" [icon]=\"faCircleNotch\" />\r\n                </button>\r\n            } @else {\r\n                <button [ngClass]=\"hasParsed && notFoundUsers?.numberOfUsersNotFound === 0 ? 'btn btn-success' : 'btn btn-danger'\" id=\"finish-button\" (click)=\"onFinish()\">\r\n                    <fa-icon [icon]=\"faCheck\" class=\"me-2\" />\r\n                    <span jhiTranslate=\"entity.action.finish\"></span>\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { StudentsUploadImagesDialogComponent } from 'app/exam/manage/students/upload-images/students-upload-images-dialog.component';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { faPlus, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-student-upload-images-button',\r\n    template: `\r\n        <jhi-button\r\n            [btnType]=\"ButtonType.PRIMARY\"\r\n            [btnSize]=\"buttonSize\"\r\n            [icon]=\"faUpload\"\r\n            [title]=\"'artemisApp.exam.examUsers.uploadImage'\"\r\n            (onClick)=\"openUploadImagesDialog($event)\"\r\n        />\r\n    `,\r\n    imports: [ButtonComponent],\r\n})\r\nexport class StudentsUploadImagesButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n\r\n    @Input() courseId: number;\r\n    @Input() exam: Exam;\r\n    @Input() buttonSize: ButtonSize = ButtonSize.MEDIUM;\r\n\r\n    @Output() uploadDone: EventEmitter<void> = new EventEmitter();\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n    faUpload = faUpload;\r\n\r\n    /**\r\n     * Open up upload dialog for exam users image upload\r\n     * @param {Event} event - Mouse Event which invoked the opening\r\n     */\r\n    openUploadImagesDialog(event: MouseEvent) {\r\n        event.stopPropagation();\r\n        const modalRef: NgbModalRef = this.modalService.open(StudentsUploadImagesDialogComponent, { keyboard: true, size: 'lg', backdrop: 'static' });\r\n        modalRef.componentInstance.courseId = this.courseId;\r\n        modalRef.componentInstance.exam = this.exam;\r\n        modalRef.result.then(\r\n            () => this.uploadDone.emit(),\r\n            () => {},\r\n        );\r\n    }\r\n}\r\n", "import { Component, OnDestroy, OnInit, ViewChild, ViewEncapsulation, inject } from '@angular/core';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ExamUser } from 'app/entities/exam/exam-user.model';\r\nimport { Observable, Subject, Subscription, of } from 'rxjs';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ActionType } from 'app/shared/delete-dialog/delete-dialog.model';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { DataTableComponent } from 'app/shared/data-table/data-table.component';\r\nimport { iconsAsHTML } from 'app/utils/icons.utils';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faCheck, faInfoCircle, faPlus, faTimes, faUpload, faUserSlash, faUserTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { UsersImportButtonComponent } from 'app/shared/user-import/users-import-button.component';\r\nimport { StudentsUploadImagesButtonComponent } from './upload-images/students-upload-images-button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { NgxDatatableModule } from '@siemens/ngx-datatable';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nconst cssClasses = {\r\n    alreadyRegistered: 'already-registered',\r\n    newlyRegistered: 'newly-registered',\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-exam-students',\r\n    templateUrl: './exam-students.component.html',\r\n    styleUrls: ['./exam-students.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        TranslateDirective,\r\n        UsersImportButtonComponent,\r\n        StudentsUploadImagesButtonComponent,\r\n        FaIconComponent,\r\n        RouterLink,\r\n        DeleteButtonDirective,\r\n        DataTableComponent,\r\n        NgxDatatableModule,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ExamStudentsComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n    private examManagementService = inject(ExamManagementService);\r\n    private userService = inject(UserService);\r\n    private accountService = inject(AccountService);\r\n    private studentExamService = inject(StudentExamService);\r\n\r\n    @ViewChild(DataTableComponent) dataTable: DataTableComponent;\r\n\r\n    readonly ButtonType = ButtonType;\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly ActionType = ActionType;\r\n    readonly missingImage = '/content/images/missing_image.png';\r\n\r\n    courseId: number;\r\n    exam: Exam;\r\n    isTestExam: boolean;\r\n    allRegisteredUsers: ExamUser[] = [];\r\n    filteredUsersSize = 0;\r\n    paramSub: Subscription;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    isLoading = false;\r\n    hasExamStarted = false;\r\n    hasExamEnded = false;\r\n    isSearching = false;\r\n    searchFailed = false;\r\n    searchNoResults = false;\r\n    isTransitioning = false;\r\n    rowClass: string | undefined = undefined;\r\n\r\n    isAdmin = false;\r\n\r\n    // Icons\r\n    faPlus = faPlus;\r\n    faUserSlash = faUserSlash;\r\n    faUserTimes = faUserTimes;\r\n    faInfoCircle = faInfoCircle;\r\n    faUpload = faUpload;\r\n    faCheck = faCheck;\r\n    faTimes = faTimes;\r\n\r\n    ngOnInit() {\r\n        this.isLoading = true;\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.isAdmin = this.accountService.isAdmin();\r\n        this.route.data.subscribe(({ exam }: { exam: Exam }) => {\r\n            this.setUpExamInformation(exam);\r\n        });\r\n    }\r\n\r\n    reloadExamWithRegisteredUsers() {\r\n        this.isLoading = true;\r\n        this.examManagementService.find(this.courseId, this.exam.id!, true).subscribe((examResponse: HttpResponse<Exam>) => {\r\n            this.setUpExamInformation(examResponse.body!);\r\n        });\r\n    }\r\n\r\n    private setUpExamInformation(exam: Exam) {\r\n        this.exam = exam;\r\n        this.hasExamStarted = exam.startDate?.isBefore(dayjs()) || false;\r\n        this.hasExamEnded = exam.endDate?.isBefore(dayjs()) || false;\r\n\r\n        if (this.hasExamEnded) {\r\n            this.studentExamService.findAllForExam(this.courseId, exam.id!).subscribe((res) => {\r\n                const studentExams = res.body;\r\n                this.allRegisteredUsers =\r\n                    exam.examUsers?.map((examUser) => {\r\n                        const studentExam = studentExams?.filter((studentExam) => studentExam.user?.id === examUser.user!.id).first();\r\n                        return {\r\n                            ...examUser.user!,\r\n                            ...examUser,\r\n                            didExamUserAttendExam: !!studentExam?.started,\r\n                        };\r\n                    }) || [];\r\n            });\r\n        } else {\r\n            this.allRegisteredUsers =\r\n                exam.examUsers?.map((examUser) => {\r\n                    return {\r\n                        ...examUser.user!,\r\n                        ...examUser,\r\n                    };\r\n                }) || [];\r\n        }\r\n        this.isTestExam = this.exam.testExam!;\r\n        this.isLoading = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Receives the search text and filter results from DataTableComponent, modifies them and returns the result which will be used by ngbTypeahead.\r\n     *\r\n     * @param stream$ stream of searches of the format {text, entities} where entities are the results\r\n     * @return stream of users for the autocomplete\r\n     */\r\n    searchAllUsers = (stream$: Observable<{ text: string; entities: User[] }>): Observable<User[]> => {\r\n        return stream$.pipe(\r\n            switchMap(({ text: loginOrName }) => {\r\n                this.searchFailed = false;\r\n                this.searchNoResults = false;\r\n                if (loginOrName.length < 3) {\r\n                    return of([]);\r\n                }\r\n                this.isSearching = true;\r\n                return this.userService\r\n                    .search(loginOrName)\r\n                    .pipe(map((usersResponse) => usersResponse.body!))\r\n                    .pipe(\r\n                        tap((users) => {\r\n                            if (users.length === 0) {\r\n                                this.searchNoResults = true;\r\n                            }\r\n                        }),\r\n                        catchError(() => {\r\n                            this.searchFailed = true;\r\n                            return of([]);\r\n                        }),\r\n                    );\r\n            }),\r\n            tap(() => {\r\n                this.isSearching = false;\r\n            }),\r\n            tap((users) => {\r\n                setTimeout(() => {\r\n                    for (let i = 0; i < this.dataTable.typeaheadButtons.length; i++) {\r\n                        const isAlreadyInCourseGroup = this.allRegisteredUsers.map((user) => user.id).includes(users[i].id);\r\n                        const button = this.dataTable.typeaheadButtons[i];\r\n                        const hasIcon = button.querySelector('fa-icon');\r\n                        if (!hasIcon) {\r\n                            button.insertAdjacentHTML('beforeend', iconsAsHTML[isAlreadyInCourseGroup ? 'users' : 'users-plus']);\r\n                        }\r\n                        if (isAlreadyInCourseGroup) {\r\n                            button.classList.add(cssClasses.alreadyRegistered);\r\n                        }\r\n                    }\r\n                });\r\n            }),\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Receives the user that was selected in the autocomplete and the callback from DataTableComponent.\r\n     * The callback inserts the search term of the selected entity into the search field and updates the displayed users.\r\n     *\r\n     * @param user The selected user from the autocomplete suggestions\r\n     * @param callback Function that can be called with the selected user to trigger the DataTableComponent default behavior\r\n     */\r\n    onAutocompleteSelect = (user: User, callback: (user: User) => void): void => {\r\n        // If the user is not registered for this exam yet, perform the server call to add them\r\n        if (!this.allRegisteredUsers.map((eu) => eu.user!.id).includes(user.id) && user.login) {\r\n            this.isTransitioning = true;\r\n            this.examManagementService.addStudentToExam(this.courseId, this.exam.id!, user.login).subscribe({\r\n                next: () => {\r\n                    this.isTransitioning = false;\r\n                    this.reloadExamWithRegisteredUsers();\r\n                    // Flash green background color to signal to the user that this student was registered\r\n                    this.flashRowClass(cssClasses.newlyRegistered);\r\n                },\r\n                error: (error: HttpErrorResponse) => {\r\n                    if (error.status === 403) {\r\n                        this.onError(`artemisApp.exam.error.${error.error.errorKey}`);\r\n                    }\r\n                    this.isTransitioning = false;\r\n                },\r\n            });\r\n        } else {\r\n            // Hand back over to the data table\r\n            callback(user);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Unregister student from exam\r\n     *\r\n     * @param examUser User that should be removed from the exam\r\n     * @param event generated by the jhiDeleteButton. Has the property deleteParticipationsAndSubmission, reflecting the checkbox choice of the user\r\n     */\r\n    removeFromExam(examUser: ExamUser, event: { [key: string]: boolean }) {\r\n        this.examManagementService.removeStudentFromExam(this.courseId, this.exam.id!, examUser.user!.login!, event.deleteParticipationsAndSubmission).subscribe({\r\n            next: () => {\r\n                this.allRegisteredUsers = this.allRegisteredUsers.filter((eu) => eu.user!.login !== examUser.user!.login);\r\n                this.dialogErrorSource.next('');\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unregister all students from the exam\r\n     */\r\n    removeAllStudents(event: { [key: string]: boolean }) {\r\n        this.examManagementService.removeAllStudentsFromExam(this.courseId, this.exam.id!, event.deleteParticipationsAndSubmission).subscribe({\r\n            next: () => {\r\n                this.allRegisteredUsers = [];\r\n                this.dialogErrorSource.next('');\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the number of filtered users\r\n     *\r\n     * @param filteredUsersSize Total number of users after filters have been applied\r\n     */\r\n    handleUsersSizeChange = (filteredUsersSize: number) => {\r\n        this.filteredUsersSize = filteredUsersSize;\r\n    };\r\n\r\n    /**\r\n     * Formats the results in the autocomplete overlay.\r\n     *\r\n     * @param user\r\n     */\r\n    searchResultFormatter = (user: User) => {\r\n        const { name, login } = user;\r\n        return `${name} (${login})`;\r\n    };\r\n\r\n    /**\r\n     * Converts a user object to a string that can be searched for. This is\r\n     * used by the autocomplete select inside the data table.\r\n     *\r\n     * @param user User\r\n     */\r\n    searchTextFromUser = (user: User): string => {\r\n        return user.login || '';\r\n    };\r\n\r\n    /**\r\n     * Can be used to highlight rows temporarily by flashing a certain css class\r\n     *\r\n     * @param className Name of the class to be applied to all rows\r\n     */\r\n    flashRowClass = (className: string) => {\r\n        this.rowClass = className;\r\n        setTimeout(() => (this.rowClass = undefined), 500);\r\n    };\r\n\r\n    /**\r\n     * Show an error as an alert in the top of the editor html.\r\n     * Used by other components to display errors.\r\n     * The error must already be provided translated by the emitting component.\r\n     */\r\n    onError(error: string) {\r\n        this.alertService.error(error);\r\n        this.isTransitioning = false;\r\n    }\r\n\r\n    /**\r\n     * Registers all students who are enrolled in the course for the exam\r\n     */\r\n    registerAllStudentsFromCourse() {\r\n        if (this.exam?.id) {\r\n            this.examManagementService.addAllStudentsOfCourseToExam(this.courseId, this.exam.id).subscribe({\r\n                next: () => {\r\n                    this.reloadExamWithRegisteredUsers();\r\n                },\r\n                error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex justify-content-between align-items-center border-bottom pb-2 mb-3\">\r\n        <div class=\"mb-0\">\r\n            <h3>\r\n                <span jhiTranslate=\"artemisApp.examManagement.students\"></span>\r\n                <span class=\"text-body-secondary\">({{ exam.title }})</span>\r\n            </h3>\r\n        </div>\r\n        <div>\r\n            <span [jhiTranslate]=\"'artemisApp.examManagement.examStudents.registeredStudents'\">Registered students</span>:\r\n            <span class=\"badge bg-primary text-white\" id=\"#registered-users\"> {{ allRegisteredUsers.length }}</span>\r\n            @if (filteredUsersSize < allRegisteredUsers.length) {\r\n                <span class=\"text-body-secondary\">\r\n                    (<span [jhiTranslate]=\"'artemisApp.examManagement.examStudents.searchResults'\">search results</span>: {{ filteredUsersSize }}\r\n                    )\r\n                </span>\r\n            }\r\n            @if (!isTestExam) {\r\n                <jhi-user-import-button class=\"ms-4\" [courseId]=\"courseId\" [exam]=\"exam\" [examUserMode]=\"true\" (importDone)=\"reloadExamWithRegisteredUsers()\" />\r\n            }\r\n            @if (!isTestExam) {\r\n                <jhi-student-upload-images-button [courseId]=\"courseId\" [exam]=\"exam\" (uploadDone)=\"reloadExamWithRegisteredUsers()\" />\r\n            }\r\n            @if (!isTestExam) {\r\n                <button\r\n                    class=\"btn btn btn-primary ms-auto\"\r\n                    id=\"register-course-students\"\r\n                    (click)=\"registerAllStudentsFromCourse()\"\r\n                    title=\"{{ 'artemisApp.examManagement.examStudents.registerAllFromCourseTooltip' | artemisTranslate }}\"\r\n                >\r\n                    <fa-icon [icon]=\"faPlus\" [fixedWidth]=\"true\" />&nbsp;\r\n                    <span jhiTranslate=\"artemisApp.examManagement.examStudents.registerAllFromCourse\"></span>\r\n                </button>\r\n            }\r\n            @if (!isTestExam && hasExamStarted) {\r\n                <a\r\n                    [routerLink]=\"['/course-management', courseId, 'exams', exam.id, 'students', 'verify-attendance']\"\r\n                    class=\"btn btn-info ms-auto\"\r\n                    title=\"{{ 'artemisApp.examManagement.examStudents.verifyAttendanceTooltip' | artemisTranslate }}\"\r\n                >\r\n                    <fa-icon [icon]=\"faCheck\" />\r\n                    <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.examManagement.examStudents.verifyAttendanceBtn\"></span>\r\n                </a>\r\n            }\r\n            @if (!isTestExam) {\r\n                <button\r\n                    [disabled]=\"isLoading\"\r\n                    [actionType]=\"ActionType.Remove\"\r\n                    [entityTitle]=\"exam.title || ''\"\r\n                    [renderButtonText]=\"false\"\r\n                    [buttonSize]=\"ButtonSize.MEDIUM\"\r\n                    jhiDeleteButton\r\n                    class=\"btn btn-primary ms-auto\"\r\n                    deleteQuestion=\"artemisApp.studentExams.removeAllStudents.question\"\r\n                    (delete)=\"removeAllStudents($event)\"\r\n                    [dialogError]=\"dialogError$\"\r\n                    [additionalChecks]=\"{\r\n                        deleteParticipationsAndSubmission: 'artemisApp.examManagement.examStudents.removeFromExam.deleteParticipationsAndSubmission',\r\n                    }\"\r\n                    deleteConfirmationText=\"artemisApp.studentExams.removeAllStudents.confirmationText\"\r\n                >\r\n                    <span jhiTranslate=\"artemisApp.studentExams.removeAllStudents.title\"></span>\r\n                    <fa-icon [icon]=\"faUserSlash\" />\r\n                </button>\r\n            }\r\n        </div>\r\n    </div>\r\n    <jhi-data-table\r\n        [isLoading]=\"isLoading\"\r\n        [isSearching]=\"isSearching\"\r\n        [searchFailed]=\"searchFailed\"\r\n        [searchNoResults]=\"searchNoResults\"\r\n        [isTransitioning]=\"isTransitioning\"\r\n        entityType=\"examStudents\"\r\n        [allEntities]=\"allRegisteredUsers\"\r\n        entitiesPerPageTranslation=\"artemisApp.examManagement.examStudents.usersPerPage\"\r\n        showAllEntitiesTranslation=\"artemisApp.examManagement.examStudents.showAllUsers\"\r\n        searchNoResultsTranslation=\"artemisApp.examManagement.examStudents.searchNoResults\"\r\n        searchPlaceholderTranslation=\"artemisApp.examManagement.examStudents.searchForUsers\"\r\n        [searchFields]=\"['login', 'name']\"\r\n        [searchTextFromEntity]=\"searchTextFromUser\"\r\n        [searchResultFormatter]=\"searchResultFormatter\"\r\n        [onSearchWrapper]=\"searchAllUsers\"\r\n        [onAutocompleteSelectWrapper]=\"onAutocompleteSelect\"\r\n        (entitiesSizeChange)=\"handleUsersSizeChange($event)\"\r\n    >\r\n        <ng-template let-settings=\"settings\" let-controls=\"controls\">\r\n            <ngx-datatable\r\n                id=\"registered-students\"\r\n                class=\"bootstrap\"\r\n                [limit]=\"settings.limit\"\r\n                [sortType]=\"settings.sortType\"\r\n                [columnMode]=\"settings.columnMode\"\r\n                [headerHeight]=\"settings.headerHeight\"\r\n                [footerHeight]=\"settings.footerHeight\"\r\n                [rowHeight]=\"settings.rowHeight\"\r\n                [rows]=\"settings.rows\"\r\n                [rowClass]=\"settings.rowClass\"\r\n                [scrollbarH]=\"settings.scrollbarH\"\r\n            >\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"60\" [width]=\"80\" [maxWidth]=\"100\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('id')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"global.field.id\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('id')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (isAdmin) {\r\n                            <a routerLink=\"/admin/user-management/{{ value?.login }}\">{{ value?.id }}</a>\r\n                        } @else {\r\n                            {{ value?.id }}\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"60\" [width]=\"80\" [maxWidth]=\"100\">\r\n                    <ng-template ngx-datatable-header-template />\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <img [id]=\"value?.id\" class=\"img-fluid\" [src]=\"value?.studentImagePath ? value?.studentImagePath : missingImage\" />\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"150\" [width]=\"150\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('login')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.examManagement.examStudents.login\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('login')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (isAdmin) {\r\n                            <a routerLink=\"/admin/user-management/{{ value?.login }}\">{{ value?.login }}</a>\r\n                        } @else {\r\n                            {{ value?.login }}\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"name\" [minWidth]=\"120\" [width]=\"120\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('name')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.examManagement.examStudents.name\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('name')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"email\" [minWidth]=\"150\" [width]=\"150\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('email')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.examManagement.examStudents.email\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('email')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"visibleRegistrationNumber\" [minWidth]=\"100\" [width]=\"100\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\" (click)=\"controls.onSort('visibleRegistrationNumber')\">\r\n                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.examManagement.examStudents.registrationNumber\"></span>\r\n                            <fa-icon [icon]=\"controls.iconForSortPropField('visibleRegistrationNumber')\" />\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        <span>{{ value }}</span>\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"100\" [width]=\"100\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\">\r\n                            <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exam.examUsers.room\"></span>\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (value.actualRoom) {\r\n                            <div>\r\n                                <del title=\"{{ 'artemisApp.exam.examUsers.plannedRoom' | artemisTranslate }}\">{{ value.plannedRoom }}</del>\r\n                                <span class=\"ml-1\" title=\"{{ 'artemisApp.exam.examUsers.actualRoom' | artemisTranslate }}\">{{ value.actualRoom }}</span>\r\n                            </div>\r\n                        }\r\n                        @if (value.plannedRoom && !value.actualRoom) {\r\n                            <div>\r\n                                <span class=\"ml-1\" title=\"{{ 'artemisApp.exam.examUsers.plannedRoom' | artemisTranslate }}\">{{ value.plannedRoom }}</span>\r\n                            </div>\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                <ngx-datatable-column prop=\"\" [minWidth]=\"100\" [width]=\"100\">\r\n                    <ng-template ngx-datatable-header-template>\r\n                        <span class=\"datatable-header-cell-wrapper\">\r\n                            <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exam.examUsers.seat\"></span>\r\n                        </span>\r\n                    </ng-template>\r\n                    <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                        @if (value.actualSeat) {\r\n                            <div>\r\n                                <del title=\"{{ 'artemisApp.exam.examUsers.plannedSeat' | artemisTranslate }}\">{{ value.plannedSeat }}</del>\r\n                                <span class=\"ml-1\" title=\"{{ 'artemisApp.exam.examUsers.actualSeat' | artemisTranslate }}\">{{ value.actualSeat }}</span>\r\n                            </div>\r\n                        }\r\n                        @if (value.plannedSeat && !value.actualSeat) {\r\n                            <div>\r\n                                <span class=\"ml-1\" title=\"{{ 'artemisApp.exam.examUsers.plannedSeat' | artemisTranslate }}\">{{ value.plannedSeat }}</span>\r\n                            </div>\r\n                        }\r\n                    </ng-template>\r\n                </ngx-datatable-column>\r\n                @if (hasExamEnded) {\r\n                    <ngx-datatable-column prop=\"\" [minWidth]=\"70\" [width]=\"70\">\r\n                        <ng-template ngx-datatable-header-template>\r\n                            <span class=\"datatable-header-cell-wrapper\" title=\"{{ 'artemisApp.exam.examUsers.attendanceStatusTitle' | artemisTranslate }}\">\r\n                                <span class=\"datatable-header-cell-label bold\" jhiTranslate=\"artemisApp.exam.examUsers.attendanceStatus\"></span>\r\n                            </span>\r\n                        </ng-template>\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            @if (\r\n                                value.didExamUserAttendExam &&\r\n                                hasExamEnded &&\r\n                                (!value.didCheckLogin || !value.didCheckImage || !value.didCheckName || !value.didCheckRegistrationNumber || !value.signingImagePath)\r\n                            ) {\r\n                                <div title=\"{{ 'artemisApp.exam.examUsers.attendanceCheckFailed' | artemisTranslate }}\">\r\n                                    <fa-icon [icon]=\"faTimes\" style=\"color: red\" class=\"fa-2x\" />\r\n                                </div>\r\n                            }\r\n                            @if (\r\n                                value.didExamUserAttendExam &&\r\n                                value.didCheckLogin &&\r\n                                value.didCheckImage &&\r\n                                value.didCheckName &&\r\n                                value.didCheckRegistrationNumber &&\r\n                                value.signingImagePath &&\r\n                                hasExamEnded\r\n                            ) {\r\n                                <div title=\"{{ 'artemisApp.exam.examUsers.attendanceCheckPassed' | artemisTranslate }}\">\r\n                                    <fa-icon [icon]=\"faCheck\" style=\"color: green\" class=\"fa-2x\" />\r\n                                </div>\r\n                            }\r\n                            @if (!value.didExamUserAttendExam) {\r\n                                <div title=\"{{ 'artemisApp.exam.examUsers.didNotAttend' | artemisTranslate }}\">\r\n                                    <fa-icon [icon]=\"faUserTimes\" class=\"fa-2x\" />\r\n                                </div>\r\n                            }\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n                @if (!isTestExam) {\r\n                    <ngx-datatable-column prop=\"\" [minWidth]=\"100\" [width]=\"100\">\r\n                        <ng-template ngx-datatable-header-template />\r\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                            <div class=\"w-100 text-end\">\r\n                                <button\r\n                                    jhiDeleteButton\r\n                                    [actionType]=\"ActionType.Remove\"\r\n                                    [entityTitle]=\"value.login\"\r\n                                    deleteQuestion=\"artemisApp.examManagement.examStudents.removeFromExam.modalQuestion\"\r\n                                    deleteConfirmationText=\"artemisApp.examManagement.examStudents.removeFromExam.typeNameToConfirm\"\r\n                                    (delete)=\"removeFromExam(value, $event)\"\r\n                                    [additionalChecks]=\"{\r\n                                        deleteParticipationsAndSubmission: 'artemisApp.examManagement.examStudents.removeFromExam.deleteParticipationsAndSubmission',\r\n                                    }\"\r\n                                    [dialogError]=\"dialogError$\"\r\n                                    [requireConfirmationOnlyForAdditionalChecks]=\"true\"\r\n                                >\r\n                                    <fa-icon [icon]=\"faUserSlash\" class=\"me-1\" />\r\n                                </button>\r\n                            </div>\r\n                        </ng-template>\r\n                    </ngx-datatable-column>\r\n                }\r\n            </ngx-datatable>\r\n        </ng-template>\r\n    </jhi-data-table>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faSpinner", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate", "notFoundUsers", "numberOfUsersNotFound", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "numberOfImagesSaved", "\u0275\u0275template", "StudentsUploadImagesDialogComponent_Conditional_49_Conditional_3_Template", "\u0275\u0275conditional", "hasParsed", "StudentsUploadImagesDialogComponent_Conditional_50_Conditional_3_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clear", "faBan", "_r3", "parsePDFFile", "file", "isParsing", "faUpload", "faCircleNotch", "_r4", "onFinish", "faCheck", "StudentsUploadImagesDialogComponent", "activeModal", "inject", "NgbActiveModal", "alertService", "AlertService", "examManagementService", "ExamManagementService", "ActionType", "importForm", "notFoundUsers", "file", "courseId", "exam", "isParsing", "hasParsed", "dialogErrorSource", "Subject", "dialogError$", "asObservable", "faBan", "faSpinner", "faCheck", "faCircleNotch", "faUpload", "faArrowRight", "ngOnDestroy", "unsubscribe", "clear", "dismiss", "onFinish", "close", "resetDialog", "undefined", "onPDFFileSelect", "event", "target", "files", "length", "parsePDFFile", "id", "formData", "FormData", "append", "saveImages", "subscribe", "next", "res", "body", "error", "params", "title", "onError", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275template", "StudentsUploadImagesDialogComponent_Conditional_38_Template", "$event", "StudentsUploadImagesDialogComponent_Conditional_49_Template", "StudentsUploadImagesDialogComponent_Conditional_50_Template", "StudentsUploadImagesDialogComponent_Conditional_53_Template", "StudentsUploadImagesDialogComponent_Conditional_54_Template", "StudentsUploadImagesDialogComponent_Conditional_55_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275conditional", "tmp_2_0", "numberOfUsersNotFound", "numberOfImagesSaved", "tmp_3_0", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "NgForm", "TranslateDirective", "HelpIconComponent", "FaIconComponent", "NgClass", "ArtemisTranslatePipe", "encapsulation", "StudentsUploadImagesButtonComponent", "modalService", "inject", "NgbModal", "ButtonType", "ButtonSize", "courseId", "exam", "buttonSize", "MEDIUM", "uploadDone", "EventEmitter", "faPlus", "faUpload", "openUploadImagesDialog", "event", "stopPropagation", "modalRef", "open", "StudentsUploadImagesDialogComponent", "keyboard", "size", "backdrop", "componentInstance", "result", "then", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "PRIMARY", "ButtonComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275textInterpolate1", "ctx_r0", "filteredUsersSize", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "reloadExamWithRegisteredUsers", "courseId", "exam", "_r3", "_r4", "registerAllStudentsFromCourse", "\u0275\u0275element", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "faPlus", "\u0275\u0275pureFunction2", "_c1", "id", "faCheck", "$event", "_r5", "removeAllStudents", "isLoading", "ActionType", "Remove", "title", "ButtonSize", "MEDIUM", "dialogError$", "\u0275\u0275pureFunction0", "_c2", "faUserSlash", "_r6", "controls_r7", "controls", "onSort", "iconForSortPropField", "\u0275\u0275propertyInterpolate1", "value_r8", "login", "\u0275\u0275textInterpolate", "\u0275\u0275template", "ExamStudentsComponent_ng_template_33_ng_template_7_Conditional_1_Template", "ExamStudentsComponent_ng_template_33_ng_template_7_Conditional_2_Template", "\u0275\u0275conditional", "isAdmin", "value_r9", "studentImagePath", "missingImage", "\u0275\u0275sanitizeUrl", "_r10", "value_r11", "ExamStudentsComponent_ng_template_33_ng_template_21_Conditional_1_Template", "ExamStudentsComponent_ng_template_33_ng_template_21_Conditional_2_Template", "_r12", "value_r13", "_r14", "value_r15", "_r16", "value_r17", "value_r18", "plannedRoom", "actualRoom", "ExamStudentsComponent_ng_template_33_ng_template_49_Conditional_1_Template", "ExamStudentsComponent_ng_template_33_ng_template_49_Conditional_2_Template", "value_r19", "plannedSeat", "actualSeat", "ExamStudentsComponent_ng_template_33_ng_template_56_Conditional_1_Template", "ExamStudentsComponent_ng_template_33_ng_template_56_Conditional_2_Template", "faTimes", "faUserTimes", "ExamStudentsComponent_ng_template_33_Conditional_59_ng_template_5_Conditional_1_Template", "ExamStudentsComponent_ng_template_33_Conditional_59_ng_template_5_Conditional_2_Template", "ExamStudentsComponent_ng_template_33_Conditional_59_ng_template_5_Conditional_3_Template", "value_r20", "didExamUserAttendExam", "hasExamEnded", "didCheckLogin", "didCheckImage", "didCheckName", "didCheckRegistrationNumber", "signingImagePath", "ExamStudentsComponent_ng_template_33_Conditional_59_ng_template_3_Template", "ExamStudentsComponent_ng_template_33_Conditional_59_ng_template_5_Template", "value_r22", "_r21", "value", "removeFromExam", "ExamStudentsComponent_ng_template_33_Conditional_60_ng_template_3_Template", "ExamStudentsComponent_ng_template_33_Conditional_60_ng_template_5_Template", "ExamStudentsComponent_ng_template_33_ng_template_5_Template", "ExamStudentsComponent_ng_template_33_ng_template_7_Template", "ExamStudentsComponent_ng_template_33_ng_template_12_Template", "ExamStudentsComponent_ng_template_33_ng_template_14_Template", "ExamStudentsComponent_ng_template_33_ng_template_19_Template", "ExamStudentsComponent_ng_template_33_ng_template_21_Template", "ExamStudentsComponent_ng_template_33_ng_template_26_Template", "ExamStudentsComponent_ng_template_33_ng_template_28_Template", "ExamStudentsComponent_ng_template_33_ng_template_33_Template", "ExamStudentsComponent_ng_template_33_ng_template_35_Template", "ExamStudentsComponent_ng_template_33_ng_template_40_Template", "ExamStudentsComponent_ng_template_33_ng_template_42_Template", "ExamStudentsComponent_ng_template_33_ng_template_47_Template", "ExamStudentsComponent_ng_template_33_ng_template_49_Template", "ExamStudentsComponent_ng_template_33_ng_template_54_Template", "ExamStudentsComponent_ng_template_33_ng_template_56_Template", "ExamStudentsComponent_ng_template_33_Conditional_59_Template", "ExamStudentsComponent_ng_template_33_Conditional_60_Template", "settings_r23", "limit", "sortType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "rows", "rowClass", "scrollbarH", "isTestExam", "cssClasses", "alreadyRegistered", "newlyRegistered", "ExamStudentsComponent", "route", "inject", "ActivatedRoute", "alertService", "AlertService", "examManagementService", "ExamManagementService", "userService", "UserService", "accountService", "AccountService", "studentExamService", "StudentExamService", "dataTable", "ButtonType", "allRegisteredUsers", "paramSub", "dialogErrorSource", "Subject", "asObservable", "hasExamStarted", "isSearching", "searchFailed", "searchNoResults", "isTransitioning", "undefined", "faInfoCircle", "faUpload", "ngOnInit", "Number", "snapshot", "paramMap", "get", "data", "subscribe", "setUpExamInformation", "find", "examResponse", "body", "startDate", "isBefore", "dayjs", "endDate", "findAllForExam", "res", "studentExams", "examUsers", "map", "examUser", "studentExam", "filter", "user", "first", "__spreadProps", "__spreadValues", "started", "testExam", "ngOnDestroy", "unsubscribe", "searchAllUsers", "stream$", "pipe", "switchMap", "text", "loginOrName", "length", "of", "search", "usersResponse", "tap", "users", "catchError", "setTimeout", "i", "typeaheadButtons", "isAlreadyInCourseGroup", "includes", "button", "querySelector", "insertAdjacentHTML", "iconsAsHTML", "classList", "add", "onAutocompleteSelect", "callback", "eu", "addStudentToExam", "next", "flashRowClass", "error", "status", "onError", "errorKey", "event", "removeStudentFromExam", "deleteParticipationsAndSubmission", "message", "removeAllStudentsFromExam", "handleUsersSizeChange", "searchResultFormatter", "name", "searchTextFromUser", "className", "addAllStudentsOfCourseToExam", "selectors", "viewQuery", "rf", "ctx", "DataTableComponent", "ExamStudentsComponent_Conditional_23_Template", "ExamStudentsComponent_Conditional_24_Template", "ExamStudentsComponent_Conditional_25_Template", "ExamStudentsComponent_Conditional_26_Template", "ExamStudentsComponent_Conditional_27_Template", "ExamStudentsComponent_Conditional_28_Template", "ExamStudentsComponent_ng_template_33_Template", "_c0", "TranslateDirective", "UsersImportButtonComponent", "StudentsUploadImagesButtonComponent", "FaIconComponent", "RouterLink", "DeleteButtonDirective", "NgxDatatableModule", "DatatableComponent", "DataTableColumnDirective", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
