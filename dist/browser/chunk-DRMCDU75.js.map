{
  "version": 3,
  "sources": ["src/main/webapp/app/utils/navigation.utils.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Params, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { filter, skip, take } from 'rxjs/operators';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ArtemisNavigationUtilService {\r\n    private router = inject(Router);\r\n    private location = inject(Location);\r\n\r\n    private onFirstPage = true;\r\n\r\n    constructor() {\r\n        const router = this.router;\r\n\r\n        router.events\r\n            .pipe(\r\n                filter((e) => e instanceof NavigationEnd),\r\n                skip(1),\r\n                take(1),\r\n            )\r\n            .subscribe(() => {\r\n                this.onFirstPage = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Navigates to the last page if possible or to the fallback url if not\r\n     * @param fallbackUrl Url to navigate to if current page is first navigation\r\n     */\r\n    navigateBack(fallbackUrl?: (string | number)[]) {\r\n        if (!this.onFirstPage) {\r\n            this.location.back();\r\n        } else if (fallbackUrl) {\r\n            this.router.navigate(fallbackUrl);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigates to the last page if possible or to the fallback url if not. If the optional element is present, it is appended to the fallback url\r\n     * @param fallbackUrl Url to navigate to if current page is first navigation\r\n     * @param optionalLastElement last element of the url or nothing\r\n     */\r\n    navigateBackWithOptional(fallbackUrl: string[], optionalLastElement: string | undefined) {\r\n        if (optionalLastElement) {\r\n            fallbackUrl.push(optionalLastElement);\r\n        }\r\n        this.navigateBack(fallbackUrl);\r\n    }\r\n\r\n    /**\r\n     * Navigate to exercise detail page after creating or editing it.\r\n     * @param exercise the updated or created exercise\r\n     */\r\n    navigateForwardFromExerciseUpdateOrCreation(exercise?: Exercise) {\r\n        if (exercise?.exerciseGroup?.exam?.course?.id) {\r\n            // If an exercise group is set we are in exam mode\r\n            this.router.navigate([\r\n                'course-management',\r\n                exercise.exerciseGroup.exam.course.id,\r\n                'exams',\r\n                exercise.exerciseGroup.exam.id!,\r\n                'exercise-groups',\r\n                exercise.exerciseGroup.id!,\r\n                exercise.type! + '-exercises',\r\n                exercise.id,\r\n            ]);\r\n        } else if (exercise?.course?.id) {\r\n            this.router.navigate(['course-management', exercise.course.id, exercise.type! + '-exercises', exercise.id]);\r\n        } else {\r\n            // Fallback\r\n            this.navigateBack();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate to exercise detail page if cancelling the update or creation\r\n     * Either\r\n     * - move back in the history\r\n     * - if in exam mode, go to the exercise group view\r\n     * - go to exercises overview\r\n     * @param exercise the updated or created exercise\r\n     */\r\n    navigateBackFromExerciseUpdate(exercise?: Exercise) {\r\n        let fallback: (string | number)[] | undefined = undefined;\r\n        if (exercise?.exerciseGroup?.exam?.course?.id) {\r\n            // If an exercise group is set we are in exam mode\r\n            fallback = ['/course-management', exercise.exerciseGroup.exam.course.id, 'exams', exercise.exerciseGroup.exam.id!, 'exercise-groups'];\r\n        } else if (exercise?.course?.id) {\r\n            fallback = ['/course-management', exercise.course.id, 'exercises'];\r\n        }\r\n        this.navigateBack(fallback);\r\n    }\r\n\r\n    replaceNewWithIdInUrl(url: string, id: number) {\r\n        const newUrl = url.slice(0, -3) + id;\r\n        const regex = /http(s)?:\\/\\/([a-zA-Z0-9.:]*)(?<rest>\\/.*)/;\r\n        this.location.go(newUrl.match(regex)!.groups!.rest);\r\n    }\r\n\r\n    /**\r\n     * Opens the target page in a new tab\r\n     * @param route the target route\r\n     * @param params the query params of the target route\r\n     */\r\n    routeInNewTab(route: any[], params?: Params): void {\r\n        const url = this.router.serializeUrl(this.router.createUrlTree(route, params));\r\n        window.open(url, '_blank');\r\n    }\r\n}\r\n\r\nexport const getLinkToSubmissionAssessment = (\r\n    exerciseType: ExerciseType,\r\n    courseId: number,\r\n    exerciseId: number,\r\n    participationId: number | undefined,\r\n    submissionId: number | 'new',\r\n    examId: number | undefined,\r\n    exerciseGroupId: number | undefined,\r\n    resultId?: number,\r\n): string[] => {\r\n    if (examId && exerciseGroupId) {\r\n        const route = [\r\n            '/course-management',\r\n            courseId.toString(),\r\n            'exams',\r\n            examId.toString(),\r\n            'exercise-groups',\r\n            exerciseGroupId.toString(),\r\n            exerciseType + '-exercises',\r\n            exerciseId.toString(),\r\n            'submissions',\r\n            submissionId.toString(),\r\n            'assessment',\r\n        ];\r\n        if (resultId) {\r\n            route[route.length - 1] += 's';\r\n            route.push(resultId.toString());\r\n        }\r\n        return route;\r\n    } else {\r\n        return ['/course-management', courseId.toString(), exerciseType + '-exercises', exerciseId.toString(), 'submissions', submissionId.toString(), 'assessment'];\r\n    }\r\n};\r\n\r\nexport const getExerciseDashboardLink = (courseId: number, exerciseId: number, examId = 0, isTestRun = false): string[] => {\r\n    if (isTestRun) {\r\n        return ['/course-management', courseId.toString(), 'exams', examId.toString(), 'test-runs', 'assess'];\r\n    }\r\n\r\n    return examId > 0\r\n        ? ['/course-management', courseId.toString(), 'exams', examId.toString(), 'assessment-dashboard', exerciseId.toString()]\r\n        : ['/course-management', courseId.toString(), 'assessment-dashboard', exerciseId.toString()];\r\n};\r\n\r\nexport const getLocalRepositoryLink = (\r\n    courseId: number,\r\n    exerciseId: number,\r\n    repositoryType: RepositoryType,\r\n    participationId: number,\r\n    exerciseGroupId: number = 0,\r\n    examId = 0,\r\n): string[] => {\r\n    const suffix = ['programming-exercises', exerciseId.toString(), 'repository', repositoryType, participationId.toString()];\r\n\r\n    return examId > 0\r\n        ? ['/course-management', courseId.toString(), 'exams', examId.toString(), 'exercise-groups', exerciseGroupId.toString(), ...suffix]\r\n        : ['/course-management', courseId.toString(), ...suffix];\r\n};\r\n\r\n/**\r\n * A generic method which navigates into a subpage of an exam exercise\r\n * @router the router th component uses to navigate into different webpages\r\n * @subPage the subpage of an exercise which we want to navigate into, e.g. scores\r\n */\r\nexport const navigateToExamExercise = (\r\n    navigationUtilService: ArtemisNavigationUtilService,\r\n    courseId: number,\r\n    examId: number,\r\n    exerciseGroupId: number,\r\n    exerciseType: ExerciseType,\r\n    exerciseId: number,\r\n    subPage: string,\r\n): void => {\r\n    setTimeout(() => {\r\n        navigationUtilService.routeInNewTab(['course-management', courseId, 'exams', examId, 'exercise-groups', exerciseGroupId, `${exerciseType}-exercises`, exerciseId, subPage]);\r\n    }, 1000);\r\n};\r\n\r\n/**\r\n * Checks router hierarchy to find a given paramKey, starting from the current ActivatedRouteSnapshot\r\n * and traversing the parents.\r\n * @param route the active route\r\n * @param paramKey the desired key of route.snapshot.params\r\n */\r\nexport const findParamInRouteHierarchy = (route: ActivatedRoute, paramKey: string): string | undefined => {\r\n    let currentRoute: ActivatedRoute | null = route;\r\n    while (currentRoute) {\r\n        const paramValue = currentRoute.snapshot.params[paramKey];\r\n        if (paramValue !== undefined) {\r\n            return paramValue;\r\n        }\r\n        currentRoute = currentRoute.parent;\r\n    }\r\n    return undefined;\r\n};\r\n"],
  "mappings": "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",
  "names": ["ArtemisNavigationUtilService", "router", "inject", "Router", "location", "Location", "onFirstPage", "constructor", "events", "pipe", "filter", "e", "NavigationEnd", "skip", "take", "subscribe", "navigateBack", "fallbackUrl", "navigate", "back", "navigateBackWithOptional", "optionalLastElement", "push", "navigateForwardFromExerciseUpdateOrCreation", "exercise", "exerciseGroup", "exam", "course", "id", "type", "navigateBackFromExerciseUpdate", "fallback", "replaceNewWithIdInUrl", "url", "newUrl", "slice", "regex", "go", "match", "groups", "rest", "routeInNewTab", "route", "params", "serializeUrl", "createUrlTree", "window", "open", "factory", "\u0275fac", "providedIn", "getLinkToSubmissionAssessment", "exerciseType", "courseId", "exerciseId", "participationId", "submissionId", "examId", "exerciseGroupId", "resultId", "toString", "length", "getExerciseDashboardLink", "isTestRun", "getLocalRepositoryLink", "repositoryType", "suffix", "navigateToExamExercise", "navigationUtilService", "subPage", "setTimeout", "findParamInRouteHierarchy", "paramKey", "currentRoute", "paramValue", "snapshot", "undefined", "parent"]
}
