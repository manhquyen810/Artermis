{
  "version": 3,
  "sources": ["src/main/webapp/app/course/learning-paths/services/base-api-http.service.ts"],
  "sourcesContent": ["import { HttpMethod } from 'app/admin/metrics/metrics.model';\r\nimport { inject } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\n\r\nexport abstract class BaseApiHttpService {\r\n    private readonly httpClient: HttpClient = inject(HttpClient);\r\n\r\n    private readonly baseUrl = 'api';\r\n\r\n    /**\r\n     * Debounce a function call to prevent it from being called multiple times in a short period.\r\n     * @param callback The function to debounce.\r\n     * @param delay The delay in milliseconds to wait before calling the function.\r\n     */\r\n    public static debounce<T extends unknown[]>(callback: (...args: T) => void, delay: number): (...args: T) => void {\r\n        let timer: NodeJS.Timeout | undefined;\r\n        return function (...args: T) {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n            timer = setTimeout(() => {\r\n                callback(...args);\r\n            }, delay);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Constructs a request which interprets the body as a JavaScript object and returns\r\n     * the response body as a Promise in the requested type.\r\n     *\r\n     * @param method  The HTTP method.\r\n     * @param url     The endpoint URL excluding the base server url (/api).\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     * @return  A `Promise` of the response body of type `T`.\r\n     * @throws {HttpErrorResponse} If the request fails.\r\n     */\r\n    private async request<T>(\r\n        method: HttpMethod,\r\n        url: string,\r\n        options?: {\r\n            body?: any;\r\n            headers?:\r\n                | HttpHeaders\r\n                | {\r\n                      [header: string]: string | string[];\r\n                  };\r\n            params?:\r\n                | HttpParams\r\n                | {\r\n                      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n                  };\r\n            responseType?: 'json' | 'text';\r\n        },\r\n    ): Promise<T> {\r\n        try {\r\n            const response = await lastValueFrom(\r\n                this.httpClient.request(method, `${this.baseUrl}/${url}`, {\r\n                    observe: 'body',\r\n                    ...options,\r\n                    responseType: options?.responseType ?? 'json',\r\n                }),\r\n            );\r\n            return response as T;\r\n        } catch (error) {\r\n            throw error as HttpErrorResponse;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a `HttpParams` object from the given `SearchTermPageableSearch` object.\r\n     * @param pageable The pageable object to create the `HttpParams` object from.\r\n     * @protected\r\n     *\r\n     * @return The `HttpParams` object.\r\n     */\r\n    protected createHttpSearchParams(pageable: SearchTermPageableSearch): HttpParams {\r\n        return new HttpParams()\r\n            .set('pageSize', String(pageable.pageSize))\r\n            .set('page', String(pageable.page))\r\n            .set('sortingOrder', pageable.sortingOrder)\r\n            .set('searchTerm', pageable.searchTerm)\r\n            .set('sortedColumn', pageable.sortedColumn);\r\n    }\r\n\r\n    /**\r\n     * Constructs a `GET` request that interprets the body as JSON and\r\n     * returns a Promise of an object of type `T`.\r\n     *\r\n     * @param url     The endpoint URL excluding the base server url (/api).\r\n     * @param options The HTTP options to send with the request.\r\n     * @protected\r\n     *\r\n     * @return A `Promise` of type `Object` (T),\r\n     * @throws {HttpErrorResponse} If the request fails.\r\n     */\r\n    protected async get<T>(\r\n        url: string,\r\n        options?: {\r\n            headers?:\r\n                | HttpHeaders\r\n                | {\r\n                      [header: string]: string | string[];\r\n                  };\r\n            params?:\r\n                | HttpParams\r\n                | {\r\n                      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n                  };\r\n            responseType?: 'json' | 'text';\r\n        },\r\n    ): Promise<T> {\r\n        return await this.request<T>(HttpMethod.Get, url, options);\r\n    }\r\n\r\n    /**\r\n     * Constructs a `POST` request that interprets the body as JSON and\r\n     * returns a Promise of an object of type `T`.\r\n     *\r\n     * @param url The endpoint URL excluding the base server url (/api).\r\n     * @param body The content to include in the body of the request.\r\n     * @param options The HTTP options to send with the request.\r\n     * @protected\r\n     *\r\n     * @return A `Promise` of type `Object` (T),\r\n     * @throws {HttpErrorResponse} If the request fails.\r\n     */\r\n    protected async post<T>(\r\n        url: string,\r\n        body?: any,\r\n        options?: {\r\n            headers?:\r\n                | HttpHeaders\r\n                | {\r\n                      [header: string]: string | string[];\r\n                  };\r\n            params?:\r\n                | HttpParams\r\n                | {\r\n                      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n                  };\r\n            responseType?: 'json' | 'text';\r\n        },\r\n    ): Promise<T> {\r\n        return await this.request<T>(HttpMethod.Post, url, { body: body, ...options });\r\n    }\r\n\r\n    /**\r\n     * Constructs a `DELETE` request that interprets the body as JSON and\r\n     * returns a Promise of an object of type `T`.\r\n     *\r\n     * @param url The endpoint URL excluding the base server url (/api).\r\n     * @param options The HTTP options to send with the request.\r\n     * @protected\r\n     *\r\n     * @return A `Promise` of type `Object` (T),\r\n     * @throws {HttpErrorResponse} If the request fails.\r\n     */\r\n    protected async delete<T>(\r\n        url: string,\r\n        options?: {\r\n            headers?:\r\n                | HttpHeaders\r\n                | {\r\n                      [header: string]: string | string[];\r\n                  };\r\n            params?:\r\n                | HttpParams\r\n                | {\r\n                      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n                  };\r\n            responseType?: 'json' | 'text';\r\n        },\r\n    ): Promise<T> {\r\n        return await this.request<T>(HttpMethod.Delete, url, options);\r\n    }\r\n\r\n    /**\r\n     * Constructs a `PATCH` request that interprets the body as JSON and\r\n     * returns a Promise of an object of type `T`.\r\n     *\r\n     * @param url The endpoint URL excluding the base server url (/api).\r\n     * @param body The content to include in the body of the request.\r\n     * @param options The HTTP options to send with the request.\r\n     * @protected\r\n     *\r\n     * @return A `Promise` of type `Object` (T),\r\n     */\r\n    protected async patch<T>(\r\n        url: string,\r\n        body?: any,\r\n        options?: {\r\n            headers?:\r\n                | HttpHeaders\r\n                | {\r\n                      [header: string]: string | string[];\r\n                  };\r\n            params?:\r\n                | HttpParams\r\n                | {\r\n                      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n                  };\r\n            responseType?: 'json' | 'text';\r\n        },\r\n    ): Promise<T> {\r\n        return await this.request<T>(HttpMethod.Patch, url, { body: body, ...options });\r\n    }\r\n\r\n    /**\r\n     * Constructs a `PUT` request that interprets the body as JSON and\r\n     * returns a Promise of an object of type `T`.\r\n     *\r\n     * @param url The endpoint URL excluding the base server url (/api).\r\n     * @param body The content to include in the body of the request.\r\n     * @param options The HTTP options to send with the request.\r\n     * @protected\r\n     *\r\n     * @return A `Promise` of type `Object` (T),\r\n     */\r\n    protected async put<T>(\r\n        url: string,\r\n        body?: any,\r\n        options?: {\r\n            headers?:\r\n                | HttpHeaders\r\n                | {\r\n                      [header: string]: string | string[];\r\n                  };\r\n            params?:\r\n                | HttpParams\r\n                | {\r\n                      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n                  };\r\n            responseType?: 'json' | 'text';\r\n        },\r\n    ): Promise<T> {\r\n        return await this.request<T>(HttpMethod.Put, url, { body: body, ...options });\r\n    }\r\n}\r\n"],
  "mappings": "6LAMM,IAAgBA,EAAhB,KAAkC,CACnBC,WAAyBC,EAAOC,CAAU,EAE1CC,QAAU,MAOpB,OAAOC,SAA8BC,EAAgCC,EAAa,CACrF,IAAIC,EACJ,OAAO,YAAaC,EAAO,CACnBD,GACAE,aAAaF,CAAK,EAEtBA,EAAQG,WAAW,IAAK,CACpBL,EAAS,GAAGG,CAAI,CACpB,EAAGF,CAAK,CACZ,CACJ,CAacK,QACVC,EACAC,EACAC,EAaC,QAAAC,EAAA,sBAED,GAAI,CAQA,OAPiB,MAAMC,EACnB,KAAKhB,WAAWW,QAAQC,EAAQ,GAAG,KAAKT,OAAO,IAAIU,CAAG,GAAII,EAAAC,EAAA,CACtDC,QAAS,QACNL,GAFmD,CAGtDM,aAAcN,GAASM,cAAgB,QAC1C,CAAC,CAGV,OAASC,EAAO,CACZ,MAAMA,CACV,CACJ,GASUC,uBAAuBC,EAAkC,CAC/D,OAAO,IAAIC,EAAU,EAChBC,IAAI,WAAYC,OAAOH,EAASI,QAAQ,CAAC,EACzCF,IAAI,OAAQC,OAAOH,EAASK,IAAI,CAAC,EACjCH,IAAI,eAAgBF,EAASM,YAAY,EACzCJ,IAAI,aAAcF,EAASO,UAAU,EACrCL,IAAI,eAAgBF,EAASQ,YAAY,CAClD,CAagBC,IACZnB,EACAC,EAYC,QAAAC,EAAA,sBAED,OAAO,MAAM,KAAKJ,QAAWsB,EAAWC,IAAKrB,EAAKC,CAAO,CAC7D,GAcgBqB,KACZtB,EACAuB,EACAtB,EAYC,QAAAC,EAAA,sBAED,OAAO,MAAM,KAAKJ,QAAWsB,EAAWI,KAAMxB,EAAKK,EAAA,CAAEkB,KAAMA,GAAStB,EAAS,CACjF,GAagBwB,OACZzB,EACAC,EAYC,QAAAC,EAAA,sBAED,OAAO,MAAM,KAAKJ,QAAWsB,EAAWM,OAAQ1B,EAAKC,CAAO,CAChE,GAagB0B,MACZ3B,EACAuB,EACAtB,EAYC,QAAAC,EAAA,sBAED,OAAO,MAAM,KAAKJ,QAAWsB,EAAWQ,MAAO5B,EAAKK,EAAA,CAAEkB,KAAMA,GAAStB,EAAS,CAClF,GAagB4B,IACZ7B,EACAuB,EACAtB,EAYC,QAAAC,EAAA,sBAED,OAAO,MAAM,KAAKJ,QAAWsB,EAAWU,IAAK9B,EAAKK,EAAA,CAAEkB,KAAMA,GAAStB,EAAS,CAChF",
  "names": ["BaseApiHttpService", "httpClient", "inject", "HttpClient", "baseUrl", "debounce", "callback", "delay", "timer", "args", "clearTimeout", "setTimeout", "request", "method", "url", "options", "__async", "lastValueFrom", "__spreadProps", "__spreadValues", "observe", "responseType", "error", "createHttpSearchParams", "pageable", "HttpParams", "set", "String", "pageSize", "page", "sortingOrder", "searchTerm", "sortedColumn", "get", "HttpMethod", "Get", "post", "body", "Post", "delete", "Delete", "patch", "Patch", "put", "Put"]
}
