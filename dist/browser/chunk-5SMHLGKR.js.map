{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/create/create-course-competency.component.ts"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { finalize, switchMap, take } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { LectureService } from 'app/lecture/lecture.service';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class CreateCourseCompetencyComponent implements OnInit {\r\n    protected activatedRoute = inject(ActivatedRoute);\r\n    protected router = inject(Router);\r\n    protected alertService = inject(AlertService);\r\n    protected lectureService = inject(LectureService);\r\n\r\n    readonly documentationType: DocumentationType = 'Competencies';\r\n\r\n    isLoading: boolean;\r\n    courseId: number;\r\n    lecturesWithLectureUnits: Lecture[] = [];\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.activatedRoute\r\n            .parent!.parent!.paramMap.pipe(\r\n                take(1),\r\n                switchMap((params) => {\r\n                    this.courseId = Number(params.get('courseId'));\r\n                    return this.lectureService.findAllByCourseId(this.courseId, true);\r\n                }),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (lectureResult) => {\r\n                    if (lectureResult.body) {\r\n                        this.lecturesWithLectureUnits = lectureResult.body;\r\n                        for (const lecture of this.lecturesWithLectureUnits) {\r\n                            // server will send undefined instead of empty array, therefore we set it here as it is easier to handle\r\n                            if (!lecture.lectureUnits) {\r\n                                lecture.lectureUnits = [];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n}\r\n"],
  "mappings": "+OAaA,IAAsBA,GAA+B,IAAA,CAA/C,MAAgBA,CAA+B,CACvCC,eAAiBC,EAAOC,CAAc,EACtCC,OAASF,EAAOG,CAAM,EACtBC,aAAeJ,EAAOK,CAAY,EAClCC,eAAiBN,EAAOO,CAAc,EAEvCC,kBAAuC,eAEhDC,UACAC,SACAC,yBAAsC,CAAA,EAEtCC,UAAQ,CACJ,KAAKH,UAAY,GACjB,KAAKV,eACAc,OAAQA,OAAQC,SAASC,KACtBC,EAAK,CAAC,EACNC,EAAWC,IACP,KAAKR,SAAWS,OAAOD,EAAOE,IAAI,UAAU,CAAC,EACtC,KAAKd,eAAee,kBAAkB,KAAKX,SAAU,EAAI,EACnE,EACDY,EAAS,IAAK,CACV,KAAKb,UAAY,EACrB,CAAC,CAAC,EAELc,UAAU,CACPC,KAAOC,GAAiB,CACpB,GAAIA,EAAcC,KAAM,CACpB,KAAKf,yBAA2Bc,EAAcC,KAC9C,QAAWC,KAAW,KAAKhB,yBAElBgB,EAAQC,eACTD,EAAQC,aAAe,CAAA,EAGnC,CACJ,EACAC,MAAQC,GAA2BC,EAAQ,KAAK3B,aAAc0B,CAAG,EACpE,CACT,4CAvCkBhC,EAA+B,2BAA/BA,EAA+BkC,UAAA,CAAA,CAAA,cAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAA,EAAAC,cAAA,CAAA,CAAA,SAA/BxC,CAA+B,GAAA",
  "names": ["CreateCourseCompetencyComponent", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "alertService", "AlertService", "lectureService", "LectureService", "documentationType", "isLoading", "courseId", "lecturesWithLectureUnits", "ngOnInit", "parent", "paramMap", "pipe", "take", "switchMap", "params", "Number", "get", "findAllByCourseId", "finalize", "subscribe", "next", "lectureResult", "body", "lecture", "lectureUnits", "error", "res", "onError", "selectors", "decls", "vars", "template", "rf", "ctx", "encapsulation"]
}
