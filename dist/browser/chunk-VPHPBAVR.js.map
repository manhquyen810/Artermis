{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/pipes/artemis-duration-from-seconds.pipe.ts"],
  "sourcesContent": ["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ntype Duration = {\r\n    days: number;\r\n    hours: number;\r\n    minutes: number;\r\n    seconds: number;\r\n};\r\n\r\n@Pipe({ name: 'artemisDurationFromSeconds' })\r\nexport class ArtemisDurationFromSecondsPipe implements PipeTransform {\r\n    private readonly SECONDS_IN_DAY = 60 * 60 * 24;\r\n    private readonly SECONDS_IN_HOUR = 60 * 60;\r\n    private readonly SECONDS_IN_MINUTE = 60;\r\n\r\n    /**\r\n     * Convert seconds to a human-readable duration format:\r\n     * If short is true: \"xx unit yy unit\", where the two highest units are shown.\r\n     * If the time is between 10 minutes and one hour, only the minutes are shown.\r\n     *\r\n     * Otherwise: \"1d 11h 7min 6s\", where the zero-valued parts are left out,\r\n     * except in case of `seconds=0`, which will be shown as \"0s\".\r\n     *\r\n     * Only positive durations are supported.\r\n     * Negative ones will be shown as zero seconds.\r\n     *\r\n     * @param seconds the number of seconds that are turned into a human-readable format\r\n     * @param short allows the format to be shortened\r\n     */\r\n    transform(seconds: number, short = false): string {\r\n        seconds = Math.max(0, seconds ?? 0);\r\n\r\n        const duration = this.secondsToDuration(seconds);\r\n\r\n        if (short) {\r\n            return ArtemisDurationFromSecondsPipe.handleShortFormat(duration);\r\n        } else {\r\n            return ArtemisDurationFromSecondsPipe.handleLongFormat(duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the duration in seconds into a duration of full days, hours, minutes, and seconds.\r\n     * @param seconds the total seconds of the duration.\r\n     */\r\n    public secondsToDuration(seconds: number): Duration {\r\n        const days = Math.floor(seconds / this.SECONDS_IN_DAY);\r\n        const hours = Math.floor((seconds % this.SECONDS_IN_DAY) / this.SECONDS_IN_HOUR);\r\n        const minutes = Math.floor((seconds % this.SECONDS_IN_HOUR) / this.SECONDS_IN_MINUTE);\r\n        seconds = seconds % this.SECONDS_IN_MINUTE;\r\n\r\n        return {\r\n            days,\r\n            hours,\r\n            minutes,\r\n            seconds,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts the duration into its total number of seconds.\r\n     * @param duration for which the total number of seconds should be determined.\r\n     */\r\n    public durationToSeconds(duration: Duration): number {\r\n        return duration.days * this.SECONDS_IN_DAY + duration.hours * this.SECONDS_IN_HOUR + duration.minutes * this.SECONDS_IN_MINUTE + duration.seconds;\r\n    }\r\n\r\n    /**\r\n     * Converts the given duration into a human-readable short format as required by {@link transform}.\r\n     * @param duration that should be converted into a human-readable format.\r\n     */\r\n    private static handleShortFormat(duration: Duration): string {\r\n        if (duration.days > 0) {\r\n            return `${duration.days}d ${duration.hours}h`;\r\n        } else if (duration.hours > 0) {\r\n            return `${duration.hours}h ${duration.minutes}min`;\r\n        } else if (duration.minutes >= 10) {\r\n            return `${duration.minutes}min`;\r\n        } else {\r\n            return `${duration.minutes}min ${duration.seconds}s`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the given duration into a human-readable long format as required by {@link transform}.\r\n     * @param duration that should be converted into a human-readable format.\r\n     */\r\n    private static handleLongFormat(duration: Duration): string {\r\n        const result = [];\r\n\r\n        if (duration.days > 0) {\r\n            result.push(`${duration.days}d`);\r\n        }\r\n        if (duration.hours > 0) {\r\n            result.push(`${duration.hours}h`);\r\n        }\r\n        if (duration.minutes > 0) {\r\n            result.push(`${duration.minutes}min`);\r\n        }\r\n        if (duration.seconds > 0 || result.length === 0) {\r\n            result.push(`${duration.seconds}s`);\r\n        }\r\n\r\n        return result.join(' ');\r\n    }\r\n}\r\n"],
  "mappings": "yCAUA,IAAaA,GAA8B,IAAA,CAArC,MAAOA,CAA8B,CACtBC,eAAiB,GAAK,GAAK,GAC3BC,gBAAkB,GAAK,GACvBC,kBAAoB,GAgBrCC,UAAUC,EAAiBC,EAAQ,GAAK,CACpCD,EAAUE,KAAKC,IAAI,EAAGH,GAAW,CAAC,EAElC,IAAMI,EAAW,KAAKC,kBAAkBL,CAAO,EAE/C,OAAIC,EACON,EAA+BW,kBAAkBF,CAAQ,EAEzDT,EAA+BY,iBAAiBH,CAAQ,CAEvE,CAMOC,kBAAkBL,EAAe,CACpC,IAAMQ,EAAON,KAAKO,MAAMT,EAAU,KAAKJ,cAAc,EAC/Cc,EAAQR,KAAKO,MAAOT,EAAU,KAAKJ,eAAkB,KAAKC,eAAe,EACzEc,EAAUT,KAAKO,MAAOT,EAAU,KAAKH,gBAAmB,KAAKC,iBAAiB,EACpFE,OAAAA,EAAUA,EAAU,KAAKF,kBAElB,CACHU,KAAAA,EACAE,MAAAA,EACAC,QAAAA,EACAX,QAAAA,EAER,CAMOY,kBAAkBR,EAAkB,CACvC,OAAOA,EAASI,KAAO,KAAKZ,eAAiBQ,EAASM,MAAQ,KAAKb,gBAAkBO,EAASO,QAAU,KAAKb,kBAAoBM,EAASJ,OAC9I,CAMQ,OAAOM,kBAAkBF,EAAkB,CAC/C,OAAIA,EAASI,KAAO,EACT,GAAGJ,EAASI,IAAI,KAAKJ,EAASM,KAAK,IACnCN,EAASM,MAAQ,EACjB,GAAGN,EAASM,KAAK,KAAKN,EAASO,OAAO,MACtCP,EAASO,SAAW,GACpB,GAAGP,EAASO,OAAO,MAEnB,GAAGP,EAASO,OAAO,OAAOP,EAASJ,OAAO,GAEzD,CAMQ,OAAOO,iBAAiBH,EAAkB,CAC9C,IAAMS,EAAS,CAAA,EAEf,OAAIT,EAASI,KAAO,GAChBK,EAAOC,KAAK,GAAGV,EAASI,IAAI,GAAG,EAE/BJ,EAASM,MAAQ,GACjBG,EAAOC,KAAK,GAAGV,EAASM,KAAK,GAAG,EAEhCN,EAASO,QAAU,GACnBE,EAAOC,KAAK,GAAGV,EAASO,OAAO,KAAK,GAEpCP,EAASJ,QAAU,GAAKa,EAAOE,SAAW,IAC1CF,EAAOC,KAAK,GAAGV,EAASJ,OAAO,GAAG,EAG/Ba,EAAOG,KAAK,GAAG,CAC1B,4CA9FSrB,EAA8B,8DAA9BA,EAA8BsB,KAAA,EAAA,CAAA,SAA9BtB,CAA8B,GAAA",
  "names": ["ArtemisDurationFromSecondsPipe", "SECONDS_IN_DAY", "SECONDS_IN_HOUR", "SECONDS_IN_MINUTE", "transform", "seconds", "short", "Math", "max", "duration", "secondsToDuration", "handleShortFormat", "handleLongFormat", "days", "floor", "hours", "minutes", "durationToSeconds", "result", "push", "length", "join", "pure"]
}
