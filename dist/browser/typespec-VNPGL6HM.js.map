{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/typespec/typespec.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/typespec/typespec.ts\nvar bounded = text => `\\\\b${text}\\\\b`;\nvar notBefore = regex => `(?!${regex})`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar directive = bounded(`[_a-zA-Z-0-9]+`);\nvar keywords = [\"import\", \"model\", \"scalar\", \"namespace\", \"op\", \"interface\", \"union\", \"using\", \"is\", \"extends\", \"enum\", \"alias\", \"return\", \"void\", \"if\", \"else\", \"projection\", \"dec\", \"extern\", \"fn\"];\nvar namedLiterals = [\"true\", \"false\", \"null\", \"unknown\", \"never\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  indentationRules: {\n    decreaseIndentPattern: new RegExp(\"^((?!.*?/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\"),\n    increaseIndentPattern: new RegExp(\"^((?!//).)*(\\\\{([^}\\\"'`/]*|(\\\\t|[ ])*//.*)|\\\\([^)\\\"'`/]*|\\\\[[^\\\\]\\\"'`/]*)$\"),\n    // e.g.  * ...| or */| or *-----*/|\n    unIndentedLinePattern: new RegExp(\"^(\\\\t|[ ])*[ ]\\\\*[^/]*\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*([ ]([^\\\\*]|\\\\*(?!/))*)?$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".tsp\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  symbols: /[=:;<>]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|\"|\\\\\\${)`,\n  tokenizer: {\n    root: [{\n      include: \"@expression\"\n    }, {\n      include: \"@whitespace\"\n    }],\n    stringVerbatim: [{\n      regex: `(|\"|\"\")[^\"]`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: `\"\"\"${notBefore(`\"`)}`,\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    stringLiteral: [{\n      regex: `\\\\\\${`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `[^\\\\\\\\\"$]+`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: \"@escapes\",\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: `\\\\\\\\.`,\n      action: {\n        token: \"string.escape.invalid\"\n      }\n    }, {\n      regex: `\"`,\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    bracketCounting: [{\n      regex: `{`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `}`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@pop\"\n      }\n    }, {\n      include: \"@expression\"\n    }],\n    comment: [{\n      regex: `[^\\\\*]+`,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: `\\\\*\\\\/`,\n      action: {\n        token: \"comment\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: `[\\\\/*]`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    whitespace: [{\n      regex: nonCommentWs\n    }, {\n      regex: `\\\\/\\\\*`,\n      action: {\n        token: \"comment\",\n        next: \"@comment\"\n      }\n    }, {\n      regex: `\\\\/\\\\/.*$`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    expression: [{\n      regex: `\"\"\"`,\n      action: {\n        token: \"string\",\n        next: \"@stringVerbatim\"\n      }\n    }, {\n      regex: `\"${notBefore(`\"\"`)}`,\n      action: {\n        token: \"string\",\n        next: \"@stringLiteral\"\n      }\n    }, {\n      regex: numericLiteral,\n      action: {\n        token: \"number\"\n      }\n    }, {\n      regex: identifier,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@namedLiterals\": {\n            token: \"keyword\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: `@${identifier}`,\n      action: {\n        token: \"tag\"\n      }\n    }, {\n      regex: `#${directive}`,\n      action: {\n        token: \"directive\"\n      }\n    }]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["bounded","text","notBefore","regex","identifierStart","identifierContinue","identifier","directive","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","language"],"x_google_ignoreList":[0]}