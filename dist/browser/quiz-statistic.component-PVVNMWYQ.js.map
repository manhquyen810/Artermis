{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component.ts", "src/main/webapp/app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component.html"],
  "sourcesContent": ["import { ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { AbstractQuizStatisticComponent } from 'app/exercises/quiz/manage/statistics/quiz-statistics';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { calculateMaxScore } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistics.utils';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { QuizStatisticsFooterComponent } from '../quiz-statistics-footer/quiz-statistics-footer.component';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-statistic',\r\n    templateUrl: './quiz-statistic.component.html',\r\n    styleUrls: ['../quiz-point-statistic/quiz-point-statistic.component.scss', '../../../../../shared/chart/vertical-bar-chart.scss'],\r\n    imports: [TranslateDirective, BarChartModule, FaIconComponent, QuizStatisticsFooterComponent],\r\n})\r\nexport class QuizStatisticComponent extends AbstractQuizStatisticComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private accountService = inject(AccountService);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private websocketService = inject(WebsocketService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    quizExercise: QuizExercise;\r\n\r\n    label: string[] = [];\r\n    backgroundColor: string[] = [];\r\n    ratedAverage: number;\r\n    unratedAverage: number;\r\n\r\n    maxScore: number;\r\n    websocketChannelForData: string;\r\n\r\n    // Icons\r\n    faSync = faSync;\r\n\r\n    ngOnInit() {\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.setAxisLabels('showStatistic.quizStatistic.xAxes', 'showStatistic.quizStatistic.yAxes');\r\n            this.ngxData[this.ngxData.length - 1].name = this.translateService.instant('showStatistic.quizStatistic.average');\r\n            this.ngxData = [...this.ngxData];\r\n        });\r\n        this.route.params.subscribe((params) => {\r\n            // use different REST-call if the User is a Student\r\n            if (this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n                this.quizExerciseService.find(params['exerciseId']).subscribe((res: HttpResponse<QuizExercise>) => {\r\n                    this.loadQuizSuccess(res.body!);\r\n                });\r\n            }\r\n\r\n            // subscribe websocket for new statistical data\r\n            this.websocketChannelForData = '/topic/statistic/' + params['exerciseId'];\r\n            this.websocketService.subscribe(this.websocketChannelForData);\r\n\r\n            // ask for new Data if the websocket for new statistical data was notified\r\n            this.websocketService.receive(this.websocketChannelForData).subscribe(() => {\r\n                if (this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n                    this.quizExerciseService.find(params['exerciseId']).subscribe((res) => {\r\n                        this.loadQuizSuccess(res.body!);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.websocketService.unsubscribe(this.websocketChannelForData);\r\n    }\r\n\r\n    /**\r\n     * This functions loads the Quiz, which is necessary to build the Web-Template\r\n     * And it loads the new Data if the Websocket has been notified\r\n     *\r\n     * @param quiz the quizExercise, which this quiz-statistic presents.\r\n     */\r\n    loadQuizSuccess(quiz: QuizExercise) {\r\n        // if the Student finds a way to the Website -> the Student will be sent back to Courses\r\n        if (!this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n            this.router.navigate(['/courses']);\r\n        }\r\n        this.quizExercise = quiz;\r\n        this.maxScore = calculateMaxScore(this.quizExercise);\r\n        this.loadData();\r\n    }\r\n\r\n    /**\r\n     * load the Data from the Json-entity to the chart: myChart\r\n     */\r\n    loadData() {\r\n        // reset old data\r\n        this.label = [];\r\n        this.backgroundColor = [];\r\n        this.ratedData = [];\r\n        this.unratedData = [];\r\n        this.ratedAverage = 0;\r\n        this.unratedAverage = 0;\r\n\r\n        // set data based on the CorrectCounters in the QuestionStatistics\r\n        for (let i = 0; i < this.quizExercise.quizQuestions!.length; i++) {\r\n            const question = this.quizExercise.quizQuestions![i];\r\n            const statistic = question.quizQuestionStatistic!;\r\n            const ratedCounter = statistic.ratedCorrectCounter!;\r\n            const unratedCounter = statistic.unRatedCorrectCounter!;\r\n            this.label.push(i + 1 + '.');\r\n            this.backgroundColor.push('#5bc0de');\r\n            this.ratedData.push(ratedCounter);\r\n            this.unratedData.push(unratedCounter);\r\n            this.ratedAverage = this.ratedAverage + ratedCounter * question.points!;\r\n            this.unratedAverage = this.unratedAverage + unratedCounter * question.points!;\r\n        }\r\n\r\n        // set Background for invalid questions = grey\r\n        for (let i = 0; i < this.quizExercise.quizQuestions!.length; i++) {\r\n            if (this.quizExercise.quizQuestions![i].invalid) {\r\n                this.backgroundColor[i] = '#949494';\r\n            }\r\n        }\r\n\r\n        // add data for the last bar (Average)\r\n        this.backgroundColor.push('#1e3368');\r\n        /*\r\n         * we do not use roundScoreSpecifiedByCourseSettings() here as it is not necessary to make the rounding of the average correct solutions\r\n         * in a quiz dependent of the individual course settings\r\n         */\r\n        this.ratedData.push(round(this.ratedAverage / this.maxScore, 2));\r\n        this.unratedData.push(round(this.unratedAverage / this.maxScore, 2));\r\n\r\n        // add Text for last label based on the language\r\n        const lastLabel = this.translateService.instant('artemisApp.showStatistic.quizStatistic.average');\r\n        this.label.push(lastLabel);\r\n        this.chartLabels = this.label;\r\n        this.ngxColor.domain = this.backgroundColor;\r\n\r\n        // load data into chart\r\n        this.loadDataInDiagram();\r\n    }\r\n\r\n    /**\r\n     * updates the chart by setting the data set, re-calculating the height and calling update on the chart view child\r\n     */\r\n    loadDataInDiagram(): void {\r\n        this.setData(this.quizExercise.quizPointStatistic!);\r\n        this.pushDataToNgxEntry(this.changeDetector);\r\n        this.setAxisLabels('artemisApp.showStatistic.quizStatistic.xAxes', 'artemisApp.showStatistic.quizStatistic.yAxes');\r\n    }\r\n}\r\n", "@if (quizExercise) {\r\n    <div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-8 offset-md-2 text-center\">\r\n                <h3>{{ quizExercise.title }}</h3>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-4 text-start\">\r\n                        <h4 jhiTranslate=\"artemisApp.showStatistic.quizQuestions\"></h4>\r\n                        @if (quizExercise.quizQuestions) {\r\n                            <ol>\r\n                                @for (question of quizExercise.quizQuestions; track question) {\r\n                                    <li class=\"question-title\">\r\n                                        <p>\r\n                                            <span\r\n                                                >{{ question.title }}&nbsp;\r\n                                                @if (question.invalid) {\r\n                                                    <span class=\"invalid-question\" jhiTranslate=\"artemisApp.showStatistic.invalid\"></span>\r\n                                                }\r\n                                                &nbsp;({{ question.points }}P)</span\r\n                                            >\r\n                                        </p>\r\n                                    </li>\r\n                                }\r\n                            </ol>\r\n                        }\r\n                    </div>\r\n                    <div #containerRef class=\"col-md-8 text-center\">\r\n                        <p>&nbsp;</p>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-7 text-start\">\r\n                                <p id=\"text\" class=\"chart-title-text\">\r\n                                    @if (rated) {\r\n                                        <span jhiTranslate=\"artemisApp.showStatistic.quizStatistic.titleRated\"></span>\r\n                                    }\r\n                                    @if (!rated) {\r\n                                        <span jhiTranslate=\"artemisApp.showStatistic.quizStatistic.titleUnrated\"></span>\r\n                                    }\r\n                                </p>\r\n                            </div>\r\n                            <div class=\"col-md-5 text-end\">\r\n                                <p class=\"chart-title-text\">\r\n                                    <span>{{ participants }} </span><span jhiTranslate=\"artemisApp.showStatistic.participants\"></span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <ngx-charts-bar-vertical\r\n                            [view]=\"[containerRef.offsetWidth, 500]\"\r\n                            [results]=\"ngxData\"\r\n                            [scheme]=\"ngxColor\"\r\n                            [showDataLabel]=\"true\"\r\n                            [showXAxisLabel]=\"true\"\r\n                            [showYAxisLabel]=\"true\"\r\n                            [xAxisLabel]=\"xAxisLabel\"\r\n                            [yAxisLabel]=\"yAxisLabel\"\r\n                            [xAxis]=\"true\"\r\n                            [yAxis]=\"true\"\r\n                            [yScaleMax]=\"maxScale\"\r\n                            [tooltipDisabled]=\"true\"\r\n                            [dataLabelFormatting]=\"bindFormatting\"\r\n                            [roundEdges]=\"false\"\r\n                        />\r\n                        <div class=\"col-md-12 text-center button-row\">\r\n                            <button (click)=\"switchRated()\" type=\"button\" class=\"btn btn-primary\">\r\n                                <fa-icon [icon]=\"faSync\" />&nbsp;\r\n                                @if (rated) {\r\n                                    <span jhiTranslate=\"artemisApp.showStatistic.switchToUnrated\"></span>\r\n                                }\r\n                                @if (!rated) {\r\n                                    <span jhiTranslate=\"artemisApp.showStatistic.switchToRated\"></span>\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                        <p>&nbsp;</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <jhi-quiz-statistics-footer [isQuizStatistic]=\"true\" />\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275template", "QuizStatisticComponent_Conditional_0_Conditional_16_For_4_Conditional_7_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "question_r2", "title", "\u0275\u0275conditional", "invalid", "points", "\u0275\u0275repeaterCreate", "QuizStatisticComponent_Conditional_0_Conditional_16_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "ctx_r2", "quizExercise", "quizQuestions", "QuizStatisticComponent_Conditional_0_Conditional_16_Template", "QuizStatisticComponent_Conditional_0_Conditional_30_Template", "QuizStatisticComponent_Conditional_0_Conditional_31_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "switchRated", "QuizStatisticComponent_Conditional_0_Conditional_53_Template", "QuizStatisticComponent_Conditional_0_Conditional_54_Template", "\u0275\u0275textInterpolate", "rated", "participants", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "containerRef_r4", "offsetWidth", "ngxData", "ngxColor", "xAxisLabel", "yAxisLabel", "maxScale", "bindFormatting", "faSync", "QuizStatisticComponent", "AbstractQuizStatisticComponent", "route", "inject", "ActivatedRoute", "router", "Router", "accountService", "AccountService", "quizExerciseService", "QuizExerciseService", "websocketService", "WebsocketService", "changeDetector", "ChangeDetectorRef", "label", "backgroundColor", "ratedAverage", "unratedAverage", "maxScore", "websocketChannelForData", "ngOnInit", "translateService", "onLangChange", "subscribe", "setAxisLabels", "length", "name", "instant", "params", "hasAnyAuthorityDirect", "Authority", "ADMIN", "INSTRUCTOR", "EDITOR", "TA", "find", "res", "loadQuizSuccess", "body", "receive", "detectChanges", "ngOnDestroy", "unsubscribe", "quiz", "navigate", "calculateMaxScore", "loadData", "ratedData", "unratedData", "i", "question", "statistic", "quizQuestionStatistic", "ratedCounter", "ratedCorrectCounter", "unratedCounter", "unRatedCorrectCounter", "push", "round", "lastLabel", "chartLabels", "domain", "loadDataInDiagram", "setData", "quizPointStatistic", "pushDataToNgxEntry", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "QuizStatisticComponent_Conditional_0_Template", "TranslateDirective", "BarChartModule", "BarVerticalComponent", "FaIconComponent", "QuizStatisticsFooterComponent", "styles"]
}
