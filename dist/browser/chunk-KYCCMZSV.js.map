{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/pipes/artemis-time-ago.pipe.ts"],
  "sourcesContent": ["import { ChangeDetectorRef, NgZone, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport { isDate } from 'app/shared/util/utils';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\n\r\n@Pipe({\r\n    name: 'artemisTimeAgo',\r\n    pure: false,\r\n})\r\nexport class ArtemisTimeAgoPipe implements PipeTransform, OnDestroy {\r\n    private cdRef = inject(ChangeDetectorRef);\r\n    private ngZone = inject(NgZone);\r\n    private translateService = inject(TranslateService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    private currentTimer: number | null;\r\n\r\n    private lastTime: number;\r\n    private lastValue: dayjs.ConfigType;\r\n    private lastOmitSuffix?: boolean;\r\n    private lastLocale: string;\r\n    private lastText: string;\r\n    private formatFn: (m: dayjs.Dayjs) => string;\r\n\r\n    format(date: dayjs.Dayjs) {\r\n        return date.locale(this.lastLocale).from(this.serverDateService.now(), this.lastOmitSuffix);\r\n    }\r\n\r\n    transform(value: dayjs.ConfigType, omitSuffix?: boolean, formatFn?: (m: dayjs.Dayjs) => string): string {\r\n        if (this.hasChanged(value, omitSuffix)) {\r\n            this.lastTime = getTime(value);\r\n            this.lastValue = value;\r\n            this.lastOmitSuffix = omitSuffix;\r\n            this.lastLocale = this.translateService.currentLang;\r\n            this.formatFn = formatFn || this.format.bind(this);\r\n            this.removeTimer();\r\n            this.createTimer();\r\n            this.lastText = this.formatFn(dayjs(value));\r\n        } else {\r\n            this.createTimer();\r\n        }\r\n\r\n        return this.lastText;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.removeTimer();\r\n    }\r\n\r\n    private createTimer() {\r\n        if (this.currentTimer) {\r\n            return;\r\n        }\r\n\r\n        const dayjsInstance = dayjs(this.lastValue);\r\n        const timeToUpdate = getSecondsUntilUpdate(dayjsInstance) * 1000;\r\n\r\n        this.currentTimer = this.ngZone.runOutsideAngular(() => {\r\n            if (typeof window !== 'undefined') {\r\n                return window.setTimeout(() => {\r\n                    this.lastText = this.formatFn(dayjs(this.lastValue));\r\n\r\n                    this.currentTimer = null;\r\n                    this.ngZone.run(() => this.cdRef.markForCheck());\r\n                }, timeToUpdate);\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeTimer() {\r\n        if (this.currentTimer) {\r\n            window.clearTimeout(this.currentTimer);\r\n            this.currentTimer = null;\r\n        }\r\n    }\r\n\r\n    private hasChanged(value: dayjs.ConfigType, omitSuffix?: boolean): boolean {\r\n        return getTime(value) !== this.lastTime || this.translateService.currentLang !== this.lastLocale || omitSuffix !== this.lastOmitSuffix;\r\n    }\r\n}\r\n\r\nfunction getTime(value: dayjs.ConfigType): number {\r\n    if (isDate(value)) {\r\n        return (value as Date).getTime();\r\n    } else if (dayjs.isDayjs(value)) {\r\n        return value.valueOf();\r\n    } else {\r\n        return dayjs(value).valueOf();\r\n    }\r\n}\r\n\r\nfunction getSecondsUntilUpdate(dayjsInstance: dayjs.Dayjs) {\r\n    const howOld = Math.abs(dayjs().diff(dayjsInstance, 'minute'));\r\n    if (howOld < 1) {\r\n        return 1;\r\n    } else if (howOld < 60) {\r\n        return 30;\r\n    } else if (howOld < 180) {\r\n        return 300;\r\n    } else {\r\n        return 3600;\r\n    }\r\n}\r\n"],
  "mappings": "iOAUA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACnBC,MAAQC,EAAOC,CAAiB,EAChCC,OAASF,EAAOG,CAAM,EACtBC,iBAAmBJ,EAAOK,CAAgB,EAC1CC,kBAAoBN,EAAOO,CAAwB,EAEnDC,aAEAC,SACAC,UACAC,eACAC,WACAC,SACAC,SAERC,OAAOC,EAAiB,CACpB,OAAOA,EAAKC,OAAO,KAAKL,UAAU,EAAEM,KAAK,KAAKZ,kBAAkBa,IAAG,EAAI,KAAKR,cAAc,CAC9F,CAEAS,UAAUC,EAAyBC,EAAsBR,EAAqC,CAC1F,OAAI,KAAKS,WAAWF,EAAOC,CAAU,GACjC,KAAKb,SAAWe,EAAQH,CAAK,EAC7B,KAAKX,UAAYW,EACjB,KAAKV,eAAiBW,EACtB,KAAKV,WAAa,KAAKR,iBAAiBqB,YACxC,KAAKX,SAAWA,GAAY,KAAKC,OAAOW,KAAK,IAAI,EACjD,KAAKC,YAAW,EAChB,KAAKC,YAAW,EAChB,KAAKf,SAAW,KAAKC,SAASe,EAAMR,CAAK,CAAC,GAE1C,KAAKO,YAAW,EAGb,KAAKf,QAChB,CAEAiB,aAAW,CACP,KAAKH,YAAW,CACpB,CAEQC,aAAW,CACf,GAAI,KAAKpB,aACL,OAGJ,IAAMuB,EAAgBF,EAAM,KAAKnB,SAAS,EACpCsB,EAAeC,EAAsBF,CAAa,EAAI,IAE5D,KAAKvB,aAAe,KAAKN,OAAOgC,kBAAkB,IAC1C,OAAOC,OAAW,IACXA,OAAOC,WAAW,IAAK,CAC1B,KAAKvB,SAAW,KAAKC,SAASe,EAAM,KAAKnB,SAAS,CAAC,EAEnD,KAAKF,aAAe,KACpB,KAAKN,OAAOmC,IAAI,IAAM,KAAKtC,MAAMuC,aAAY,CAAE,CACnD,EAAGN,CAAY,EAER,IAEd,CACL,CAEQL,aAAW,CACX,KAAKnB,eACL2B,OAAOI,aAAa,KAAK/B,YAAY,EACrC,KAAKA,aAAe,KAE5B,CAEQe,WAAWF,EAAyBC,EAAoB,CAC5D,OAAOE,EAAQH,CAAK,IAAM,KAAKZ,UAAY,KAAKL,iBAAiBqB,cAAgB,KAAKb,YAAcU,IAAe,KAAKX,cAC5H,4CAvESb,EAAkB,kDAAlBA,EAAkB0C,KAAA,EAAA,CAAA,SAAlB1C,CAAkB,GAAA,EA0E/B,SAAS0B,EAAQH,EAAuB,CACpC,OAAIoB,EAAOpB,CAAK,EACJA,EAAeG,QAAO,EACvBK,EAAMa,QAAQrB,CAAK,EACnBA,EAAMsB,QAAO,EAEbd,EAAMR,CAAK,EAAEsB,QAAO,CAEnC,CAEA,SAASV,EAAsBF,EAA0B,CACrD,IAAMa,EAASC,KAAKC,IAAIjB,EAAK,EAAGkB,KAAKhB,EAAe,QAAQ,CAAC,EAC7D,OAAIa,EAAS,EACF,EACAA,EAAS,GACT,GACAA,EAAS,IACT,IAEA,IAEf",
  "names": ["ArtemisTimeAgoPipe", "cdRef", "inject", "ChangeDetectorRef", "ngZone", "NgZone", "translateService", "TranslateService", "serverDateService", "ArtemisServerDateService", "currentTimer", "lastTime", "lastValue", "lastOmitSuffix", "lastLocale", "lastText", "formatFn", "format", "date", "locale", "from", "now", "transform", "value", "omitSuffix", "hasChanged", "getTime", "currentLang", "bind", "removeTimer", "createTimer", "dayjs", "ngOnDestroy", "dayjsInstance", "timeToUpdate", "getSecondsUntilUpdate", "runOutsideAngular", "window", "setTimeout", "run", "markForCheck", "clearTimeout", "pure", "isDate", "isDayjs", "valueOf", "howOld", "Math", "abs", "diff"]
}
