{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/standardized-competencies/standardized-competency-filter-page.component.ts", "src/main/webapp/app/shared/standardized-competencies/standardized-competency.service.ts", "src/main/webapp/app/shared/standardized-competencies/standardized-competency-filter.component.ts", "src/main/webapp/app/shared/standardized-competencies/standardized-competency-filter.component.html"],
  "sourcesContent": ["import { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { Component } from '@angular/core';\r\nimport { MatTreeNestedDataSource } from '@angular/material/tree';\r\nimport { KnowledgeAreaDTO, KnowledgeAreaForTree, StandardizedCompetencyDTO } from 'app/entities/competency/standardized-competency.model';\r\n\r\n/**\r\n * An abstract component that provides the logic to filter a {@link KnowledgeAreaTreeComponent} by competency title and knowledge area.\r\n * One way to set such filters is the {@link StandardizedCompetencyFilterComponent}\r\n *\r\n */\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class StandardizedCompetencyFilterPageComponent {\r\n    protected knowledgeAreaFilter?: KnowledgeAreaDTO;\r\n    protected competencyTitleFilter = '';\r\n\r\n    protected knowledgeAreasForSelect: KnowledgeAreaDTO[] = [];\r\n    /**\r\n     * A map of id -> KnowledgeAreaForTree. Contains all knowledge areas of the tree structure.\r\n     * <p>\r\n     * <b>Make sure not to remove any or to replace them with copies!</b>\r\n     */\r\n    protected knowledgeAreaMap = new Map<number, KnowledgeAreaForTree>();\r\n\r\n    // data and control for the tree structure\r\n    protected dataSource = new MatTreeNestedDataSource<KnowledgeAreaForTree>();\r\n    protected treeControl = new NestedTreeControl<KnowledgeAreaForTree>((node) => node.children);\r\n\r\n    /**\r\n     * Filters out all knowledge areas except for the one specified in the {@link knowledgeAreaFilter} and its direct ancestors.\r\n     * If the filter is empty, all knowledge areas are shown again\r\n     *\r\n     * @param knowledgeAreaFilter the knowledge area to filter by (or undefined)\r\n     * @param forceRefresh if the filter should be applied even if it did not change\r\n     */\r\n    protected filterByKnowledgeArea(knowledgeAreaFilter: KnowledgeAreaDTO | undefined, forceRefresh = true) {\r\n        if (knowledgeAreaFilter?.id === this.knowledgeAreaFilter?.id && !forceRefresh) {\r\n            return;\r\n        }\r\n\r\n        this.knowledgeAreaFilter = knowledgeAreaFilter;\r\n        const filteredKnowledgeArea = this.getKnowledgeAreaByIdIfExists(this.knowledgeAreaFilter?.id);\r\n        if (!filteredKnowledgeArea) {\r\n            this.setVisibilityOfAllKnowledgeAreas(true);\r\n        } else {\r\n            this.setVisibilityOfAllKnowledgeAreas(false);\r\n            this.setVisibilityOfSelfAndDescendants(filteredKnowledgeArea, true);\r\n            this.setVisibleAndExpandSelfAndAncestors(filteredKnowledgeArea);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Filters standardized competencies to only display the ones with titles containing the {@link competencyTitleFilter}.\r\n     * Expands all knowledge areas containing matches (and their direct ancestors) to display these matches.\r\n     * If the filter is empty all competencies are shown again.\r\n     *\r\n     * @param competencyTitleFilter the new title filter\r\n     */\r\n    protected filterByCompetencyTitle(competencyTitleFilter: string) {\r\n        if (competencyTitleFilter === this.competencyTitleFilter) {\r\n            return;\r\n        }\r\n        this.competencyTitleFilter = competencyTitleFilter;\r\n        const trimmedFilter = this.competencyTitleFilter?.trim();\r\n\r\n        if (!trimmedFilter) {\r\n            this.setVisibilityOfAllCompetencies(true);\r\n        } else {\r\n            this.treeControl.collapseAll();\r\n            this.dataSource.data.forEach((knowledgeArea) => this.filterCompetenciesForSelfAndChildren(knowledgeArea, trimmedFilter));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recursively filters standardized competencies of a knowledge area and its descendants. Only competencies with titles matching the given filter are kept visible.\r\n     * If the knowledge area or one of its descendants contains a match, expands itself.\r\n     *\r\n     * @param knowledgeArea the knowledge area to filter\r\n     * @param filter the filter string. **It is expected to be not empty!**\r\n     * @private\r\n     */\r\n    private filterCompetenciesForSelfAndChildren(knowledgeArea: KnowledgeAreaForTree, filter: string) {\r\n        let hasMatch = false;\r\n        for (const competency of knowledgeArea.competencies ?? []) {\r\n            if (this.competencyMatchesFilter(competency, filter)) {\r\n                hasMatch = true;\r\n                competency.isVisible = true;\r\n            } else {\r\n                competency.isVisible = false;\r\n            }\r\n        }\r\n        for (const child of knowledgeArea.children ?? []) {\r\n            if (this.filterCompetenciesForSelfAndChildren(child, filter)) {\r\n                hasMatch = true;\r\n            }\r\n        }\r\n        if (hasMatch) {\r\n            this.treeControl.expand(knowledgeArea);\r\n        }\r\n        return hasMatch;\r\n    }\r\n\r\n    /**\r\n     * Checks if the title of a competency matches a filter.\r\n     *\r\n     * @param competency the competency to check\r\n     * @param filter the filter string **It is expected to be not empty!**\r\n     * @private\r\n     */\r\n    protected competencyMatchesFilter(competency: StandardizedCompetencyDTO, filter: string) {\r\n        if (!competency.title) {\r\n            return false;\r\n        }\r\n\r\n        const titleLower = competency.title.toLowerCase();\r\n        const filterLower = filter.toLowerCase();\r\n\r\n        return titleLower.includes(filterLower);\r\n    }\r\n\r\n    // utility functions to set the visibility of tree objects\r\n\r\n    /**\r\n     * Recursively sets visible and expands a knowledge area aswell as all its ancestors.\r\n     * This guarantees that it shows up as expanded in the tree structure, even when it is nested.\r\n     *\r\n     * @param knowledgeArea the knowledge area to set visible\r\n     * @private\r\n     */\r\n    private setVisibleAndExpandSelfAndAncestors(knowledgeArea: KnowledgeAreaForTree) {\r\n        knowledgeArea.isVisible = true;\r\n        this.treeControl.expand(knowledgeArea);\r\n        const parent = this.getKnowledgeAreaByIdIfExists(knowledgeArea.parentId);\r\n        if (parent) {\r\n            this.setVisibleAndExpandSelfAndAncestors(parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recursively sets visibility of a knowledge area as well as all its descendants.\r\n     *\r\n     * @param knowledgeArea the knowledge area to set visible\r\n     * @param isVisible if the knowledge areas should be set visible\r\n     * @private\r\n     */\r\n    private setVisibilityOfSelfAndDescendants(knowledgeArea: KnowledgeAreaForTree, isVisible: boolean) {\r\n        knowledgeArea.isVisible = true;\r\n        knowledgeArea.children?.forEach((knowledgeArea) => this.setVisibilityOfSelfAndDescendants(knowledgeArea, isVisible));\r\n    }\r\n\r\n    private setVisibilityOfAllKnowledgeAreas(isVisible: boolean) {\r\n        this.knowledgeAreaMap.forEach((knowledgeArea) => (knowledgeArea.isVisible = isVisible));\r\n    }\r\n\r\n    private setVisibilityOfAllCompetencies(isVisible: boolean) {\r\n        for (const knowledgeArea of this.knowledgeAreaMap.values()) {\r\n            knowledgeArea.competencies?.forEach((competency) => (competency.isVisible = isVisible));\r\n        }\r\n    }\r\n\r\n    // Utility functions\r\n    protected getKnowledgeAreaByIdIfExists(id: number | undefined) {\r\n        if (id === undefined) {\r\n            return undefined;\r\n        }\r\n        return this.knowledgeAreaMap.get(id);\r\n    }\r\n\r\n    // Functions to initialize data structures\r\n\r\n    /**\r\n     * Recursively adds a knowledge area and its descendants to the {@link knowledgeAreaMap}\r\n     *\r\n     * @param knowledgeArea the knowledge area to add\r\n     * @private\r\n     */\r\n    protected addSelfAndDescendantsToMap(knowledgeArea: KnowledgeAreaForTree) {\r\n        if (knowledgeArea.id !== undefined) {\r\n            this.knowledgeAreaMap.set(knowledgeArea.id, knowledgeArea);\r\n        }\r\n        for (const child of knowledgeArea.children ?? []) {\r\n            this.addSelfAndDescendantsToMap(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recursively adds a knowledge area and its descendants to the {@link knowledgeAreasForSelect} array\r\n     *\r\n     * @param knowledgeArea\r\n     * @private\r\n     */\r\n    protected addSelfAndDescendantsToSelectArray(knowledgeArea: KnowledgeAreaForTree) {\r\n        this.knowledgeAreasForSelect.push({\r\n            id: knowledgeArea.id,\r\n            title: '\\xa0'.repeat(knowledgeArea.level * 2) + knowledgeArea.title,\r\n        });\r\n        for (const child of knowledgeArea.children ?? []) {\r\n            this.addSelfAndDescendantsToSelectArray(child);\r\n        }\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { KnowledgeAreaDTO, Source, StandardizedCompetency } from 'app/entities/competency/standardized-competency.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class StandardizedCompetencyService {\r\n    private httpClient = inject(HttpClient);\r\n\r\n    private resourceURL = 'api/atlas/standardized-competencies';\r\n\r\n    getStandardizedCompetency(competencyId: number) {\r\n        return this.httpClient.get<StandardizedCompetency>(`${this.resourceURL}/${competencyId}`, { observe: 'response' });\r\n    }\r\n\r\n    getAllForTreeView() {\r\n        return this.httpClient.get<KnowledgeAreaDTO[]>(`${this.resourceURL}/for-tree-view`, { observe: 'response' });\r\n    }\r\n\r\n    getSources() {\r\n        return this.httpClient.get<Source[]>(`${this.resourceURL}/sources`, { observe: 'response' });\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { KnowledgeAreaDTO } from 'app/entities/competency/standardized-competency.model';\r\nimport { Subject, debounceTime } from 'rxjs';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-standardized-competency-filter',\r\n    templateUrl: './standardized-competency-filter.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective],\r\n})\r\nexport class StandardizedCompetencyFilterComponent implements OnInit, OnDestroy {\r\n    @Input() competencyTitleFilter: string;\r\n    @Input() knowledgeAreaFilter?: KnowledgeAreaDTO;\r\n    @Input() knowledgeAreasForSelect: KnowledgeAreaDTO[] = [];\r\n\r\n    @Output() competencyTitleFilterChange = new EventEmitter<string>();\r\n    @Output() knowledgeAreaFilterChange = new EventEmitter<KnowledgeAreaDTO>();\r\n\r\n    protected titleFilterSubject = new Subject<void>();\r\n\r\n    ngOnInit(): void {\r\n        this.titleFilterSubject.pipe(debounceTime(500)).subscribe(() => this.competencyTitleFilterChange.emit(this.competencyTitleFilter));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.titleFilterSubject.unsubscribe();\r\n    }\r\n}\r\n", "<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        <h5 class=\"mb-0\" jhiTranslate=\"artemisApp.standardizedCompetency.manage.filter\"></h5>\r\n    </div>\r\n    <div class=\"card-body row pb-0\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"title-filter\" jhiTranslate=\"artemisApp.standardizedCompetency.model.title\"> </label>\r\n            <input id=\"title-filter\" class=\"form-control\" [(ngModel)]=\"competencyTitleFilter\" (input)=\"titleFilterSubject.next()\" />\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"knowledge-area-filter\" jhiTranslate=\"artemisApp.standardizedCompetency.model.knowledgeArea\"></label>\r\n            <select [(ngModel)]=\"knowledgeAreaFilter\" (ngModelChange)=\"knowledgeAreaFilterChange.emit(knowledgeAreaFilter)\" class=\"form-select\" id=\"knowledge-area-filter\">\r\n                <option [ngValue]=\"undefined\"></option>\r\n                @for (knowledgeArea of knowledgeAreasForSelect; track knowledgeArea.id) {\r\n                    <option [ngValue]=\"knowledgeArea\">\r\n                        {{ knowledgeArea.title }}\r\n                    </option>\r\n                }\r\n            </select>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["StandardizedCompetencyFilterPageComponent", "knowledgeAreaFilter", "competencyTitleFilter", "knowledgeAreasForSelect", "knowledgeAreaMap", "Map", "dataSource", "MatTreeNestedDataSource", "treeControl", "NestedTreeControl", "node", "children", "filterByKnowledgeArea", "forceRefresh", "id", "filteredKnowledgeArea", "getKnowledgeAreaByIdIfExists", "setVisibilityOfAllKnowledgeAreas", "setVisibilityOfSelfAndDescendants", "setVisibleAndExpandSelfAndAncestors", "filterByCompetencyTitle", "trimmedFilter", "trim", "collapseAll", "data", "forEach", "knowledgeArea", "filterCompetenciesForSelfAndChildren", "setVisibilityOfAllCompetencies", "filter", "hasMatch", "competency", "competencies", "competencyMatchesFilter", "isVisible", "child", "expand", "title", "titleLower", "toLowerCase", "filterLower", "includes", "parent", "parentId", "values", "undefined", "get", "addSelfAndDescendantsToMap", "set", "addSelfAndDescendantsToSelectArray", "push", "repeat", "level", "selectors", "decls", "vars", "template", "rf", "ctx", "encapsulation", "StandardizedCompetencyService", "httpClient", "inject", "HttpClient", "resourceURL", "getStandardizedCompetency", "competencyId", "get", "observe", "getAllForTreeView", "getSources", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "knowledgeArea_r1", "\u0275\u0275textInterpolate1", "title", "StandardizedCompetencyFilterComponent", "competencyTitleFilter", "knowledgeAreaFilter", "knowledgeAreasForSelect", "competencyTitleFilterChange", "EventEmitter", "knowledgeAreaFilterChange", "titleFilterSubject", "Subject", "ngOnInit", "pipe", "debounceTime", "subscribe", "emit", "ngOnDestroy", "unsubscribe", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275listener", "next", "\u0275\u0275repeaterCreate", "StandardizedCompetencyFilterComponent_For_26_Template", "_forTrack0", "\u0275\u0275twoWayProperty", "undefined", "\u0275\u0275repeater", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "ReactiveFormsModule", "TranslateDirective", "encapsulation"]
}
