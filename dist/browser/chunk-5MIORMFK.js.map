{
  "version": 3,
  "sources": ["src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/textUnit.service.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\r\n\r\ntype EntityResponseType = HttpResponse<TextUnit>;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TextUnitService {\r\n    private httpClient = inject(HttpClient);\r\n    private lectureUnitService = inject(LectureUnitService);\r\n\r\n    private resourceURL = 'api/lecture';\r\n\r\n    create(textUnit: TextUnit, lectureId: number): Observable<EntityResponseType> {\r\n        return this.httpClient\r\n            .post<TextUnit>(`${this.resourceURL}/lectures/${lectureId}/text-units`, textUnit, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n\r\n    findById(textUnitId: number, lectureId: number) {\r\n        return this.httpClient\r\n            .get<TextUnit>(`${this.resourceURL}/lectures/${lectureId}/text-units/${textUnitId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n\r\n    update(textUnit: TextUnit, lectureId: number): Observable<EntityResponseType> {\r\n        return this.httpClient\r\n            .put<TextUnit>(`${this.resourceURL}/lectures/${lectureId}/text-units`, textUnit, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n}\r\n", "import { Component, OnChanges, OnDestroy, OnInit, computed, inject, input, output, viewChild } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { CompetencyLectureUnitLink } from 'app/entities/competency.model';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CompetencySelectionComponent } from 'app/shared/competency-selection/competency-selection.component';\r\nimport { MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface TextUnitFormData {\r\n    name?: string;\r\n    releaseDate?: dayjs.Dayjs;\r\n    content?: string;\r\n    competencyLinks?: CompetencyLectureUnitLink[];\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-text-unit-form',\r\n    templateUrl: './text-unit-form.component.html',\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateDirective,\r\n        FormDateTimePickerComponent,\r\n        CompetencySelectionComponent,\r\n        MarkdownEditorMonacoComponent,\r\n        FaIconComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class TextUnitFormComponent implements OnInit, OnChanges, OnDestroy {\r\n    private router = inject(Router);\r\n    private translateService = inject(TranslateService);\r\n\r\n    protected readonly faTimes = faTimes;\r\n\r\n    formData = input<TextUnitFormData>();\r\n\r\n    isEditMode = input<boolean>(false);\r\n    formSubmitted = output<TextUnitFormData>();\r\n\r\n    hasCancelButton = input<boolean>(false);\r\n    onCancel = output<void>();\r\n\r\n    datePickerComponent = viewChild(FormDateTimePickerComponent);\r\n\r\n    // not included in reactive form\r\n    content: string | undefined;\r\n    contentLoadedFromCache = false;\r\n    firstMarkdownChangeHappened = false;\r\n\r\n    private readonly formBuilder = inject(FormBuilder);\r\n\r\n    form: FormGroup = this.formBuilder.group({\r\n        name: [undefined as string | undefined, [Validators.required, Validators.maxLength(255)]],\r\n        releaseDate: [undefined as dayjs.Dayjs | undefined],\r\n        competencyLinks: [undefined as CompetencyLectureUnitLink[] | undefined],\r\n    });\r\n\r\n    private readonly statusChanges = toSignal(this.form.statusChanges ?? 'INVALID');\r\n    isFormValid = computed(() => this.statusChanges() === 'VALID' && this.datePickerComponent()?.isValid());\r\n\r\n    private markdownChanges = new Subject<string>();\r\n    private markdownChangesSubscription: Subscription;\r\n\r\n    get nameControl() {\r\n        return this.form.get('name');\r\n    }\r\n\r\n    get releaseDateControl() {\r\n        return this.form.get('releaseDate');\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isEditMode() && this.formData()) {\r\n            this.setFormValues(this.formData()!);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.markdownChangesSubscription.unsubscribe();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (window.localStorage && window.localStorage.getItem(this.router.url)) {\r\n            const cache = JSON.parse(window.localStorage.getItem(this.router.url)!);\r\n\r\n            if (confirm(this.translateService.instant('artemisApp.textUnit.cachedMarkdown') + ' ' + cache.date)) {\r\n                this.content = cache.markdown!;\r\n                this.contentLoadedFromCache = true;\r\n            }\r\n        }\r\n        this.markdownChangesSubscription = this.markdownChanges.pipe(debounceTime(500)).subscribe((markdown) => {\r\n            // so we do not overwrite the cache immediately we ignore the initial markdown change\r\n            if (this.firstMarkdownChangeHappened) {\r\n                this.writeToLocalStorage(markdown);\r\n            } else {\r\n                this.firstMarkdownChangeHappened = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private setFormValues(formData: TextUnitFormData) {\r\n        this.form.patchValue(formData);\r\n        if (!this.contentLoadedFromCache) {\r\n            this.content = formData.content;\r\n        }\r\n    }\r\n\r\n    submitForm() {\r\n        const textUnitFormData: TextUnitFormData = { ...this.form.value };\r\n        textUnitFormData.content = this.content;\r\n        if (window.localStorage) {\r\n            localStorage.removeItem(this.router.url);\r\n        }\r\n        this.formSubmitted.emit(textUnitFormData);\r\n    }\r\n\r\n    onMarkdownChange(markdown: string) {\r\n        this.markdownChanges.next(markdown);\r\n    }\r\n\r\n    private writeToLocalStorage(markdown: string) {\r\n        if (window.localStorage) {\r\n            const cache = { markdown, date: dayjs().format('MMM DD YYYY, HH:mm:ss') };\r\n            localStorage.setItem(this.router.url, JSON.stringify(cache));\r\n        }\r\n    }\r\n\r\n    cancelForm() {\r\n        this.onCancel.emit();\r\n    }\r\n}\r\n", "<form class=\"row\">\r\n    <div class=\"col-12\">\r\n        @if (form) {\r\n            <form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\" for=\"name\">{{ 'artemisApp.textUnit.createTextUnit.name' | artemisTranslate }}*</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        id=\"name\"\r\n                        formControlName=\"name\"\r\n                        [placeholder]=\"'artemisApp.textUnit.createTextUnit.namePlaceHolder' | artemisTranslate\"\r\n                    />\r\n                    @if (nameControl?.invalid && (nameControl?.dirty || nameControl?.touched)) {\r\n                        <div class=\"alert alert-danger\">\r\n                            @if (nameControl?.errors?.required) {\r\n                                <div jhiTranslate=\"artemisApp.textUnit.createTextUnit.nameRequiredValidationError\"></div>\r\n                            }\r\n                            @if (nameControl?.errors?.maxlength) {\r\n                                <div jhiTranslate=\"artemisApp.textUnit.createTextUnit.nameMaxLengthValidationError\"></div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <jhi-date-time-picker id=\"pick-releaseDate\" [labelName]=\"'artemisApp.lectureUnit.releaseDate' | artemisTranslate\" formControlName=\"releaseDate\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <jhi-competency-selection\r\n                        id=\"competencies\"\r\n                        [labelName]=\"'artemisApp.competency.link.title' | artemisTranslate\"\r\n                        [labelTooltip]=\"'artemisApp.competency.link.lectureUnit' | artemisTranslate\"\r\n                        formControlName=\"competencyLinks\"\r\n                    />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label class=\"d-block\" for=\"content\" jhiTranslate=\"artemisApp.textUnit.createTextUnit.content\"></label>\r\n                    <small id=\"contentHelp\" class=\"form-text mb-1 text-body-secondary\">\r\n                        {{ 'artemisApp.textUnit.markdownHelp' | artemisTranslate }}\r\n                        <a href=\"https://guides.github.com/features/mastering-markdown/\"> GitHub Markdown Guide</a>\r\n                    </small>\r\n                    <!-- not included in reactive form -->\r\n                    <jhi-markdown-editor-monaco\r\n                        aria-describedby=\"contentHelp\"\r\n                        id=\"content\"\r\n                        class=\"markdown-editor\"\r\n                        [(markdown)]=\"content\"\r\n                        (markdownChange)=\"onMarkdownChange($event)\"\r\n                    />\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <button id=\"submitButton\" class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!isFormValid()\">\r\n                            <span jhiTranslate=\"entity.action.submit\"></span>\r\n                        </button>\r\n                        @if (hasCancelButton()) {\r\n                            <button type=\"button\" (click)=\"cancelForm()\" class=\"btn btn-secondary\">\r\n                                <fa-icon [icon]=\"faTimes\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        }\r\n    </div>\r\n</form>\r\n"],
  "mappings": "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",
  "names": ["TextUnitService", "httpClient", "inject", "HttpClient", "lectureUnitService", "LectureUnitService", "resourceURL", "create", "textUnit", "lectureId", "post", "observe", "pipe", "map", "res", "convertLectureUnitResponseDatesFromServer", "findById", "textUnitId", "get", "update", "put", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275template", "TextUnitFormComponent_Conditional_4_Conditional_12_Conditional_3_Template", "TextUnitFormComponent_Conditional_4_Conditional_12_Conditional_4_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275conditional", "ctx_r1", "nameControl", "errors", "required", "maxlength", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "cancelForm", "\u0275\u0275property", "faTimes", "_r1", "submitForm", "TextUnitFormComponent_Conditional_4_Conditional_12_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "content", "onMarkdownChange", "TextUnitFormComponent_Conditional_4_Conditional_51_Template", "form", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "invalid", "dirty", "touched", "\u0275\u0275twoWayProperty", "isFormValid", "hasCancelButton", "TextUnitFormComponent", "router", "inject", "Router", "translateService", "TranslateService", "formData", "input", "isEditMode", "formSubmitted", "output", "onCancel", "datePickerComponent", "viewChild", "FormDateTimePickerComponent", "contentLoadedFromCache", "firstMarkdownChangeHappened", "formBuilder", "FormBuilder", "group", "name", "undefined", "Validators", "maxLength", "releaseDate", "competencyLinks", "statusChanges", "toSignal", "computed", "isValid", "markdownChanges", "Subject", "markdownChangesSubscription", "get", "releaseDateControl", "ngOnChanges", "setFormValues", "ngOnDestroy", "unsubscribe", "ngOnInit", "window", "localStorage", "getItem", "url", "cache", "JSON", "parse", "confirm", "instant", "date", "markdown", "pipe", "debounceTime", "subscribe", "writeToLocalStorage", "patchValue", "textUnitFormData", "__spreadValues", "value", "removeItem", "emit", "next", "dayjs", "format", "setItem", "stringify", "selectors", "viewQuery", "rf", "ctx", "TextUnitFormComponent_Conditional_4_Template", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgForm", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "CompetencySelectionComponent", "MarkdownEditorMonacoComponent", "FaIconComponent", "ArtemisTranslatePipe", "encapsulation"]
}
