{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/difficulty-picker/difficulty-picker.component.ts", "src/main/webapp/app/exercises/shared/difficulty-picker/difficulty-picker.component.html", "src/main/webapp/app/exercises/shared/exercise-title-channel-name/exercise-title-channel-name.component.ts", "src/main/webapp/app/exercises/shared/exercise-title-channel-name/exercise-title-channel-name.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { DifficultyLevel, Exercise } from 'app/entities/exercise.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-difficulty-picker',\r\n    templateUrl: './difficulty-picker.component.html',\r\n    styles: ['div { cursor: pointer; }'],\r\n    imports: [TranslateDirective, NgClass],\r\n})\r\nexport class DifficultyPickerComponent {\r\n    readonly DifficultyLevel = DifficultyLevel;\r\n\r\n    @Input() exercise: Exercise;\r\n    @Output() ngModelChange = new EventEmitter();\r\n\r\n    /**\r\n     * Sets the difficulty level of an exercise and emits the changes to the parent component to notice changes\r\n     * @param level chosen level of difficulty {DifficultyLevel}\r\n     */\r\n    setDifficulty(level?: DifficultyLevel) {\r\n        this.exercise.difficulty = level;\r\n        this.ngModelChange.emit();\r\n    }\r\n}\r\n", "<div class=\"btn-group\">\r\n    <div\r\n        class=\"btn\"\r\n        [ngClass]=\"{ 'btn-primary selected': !exercise.difficulty, 'btn-default': exercise.difficulty }\"\r\n        (click)=\"setDifficulty(undefined)\"\r\n        jhiTranslate=\"artemisApp.exercise.noLevel\"\r\n    ></div>\r\n    <div\r\n        class=\"btn\"\r\n        [ngClass]=\"{ 'btn-success selected': exercise.difficulty === DifficultyLevel.EASY, 'btn-default': exercise.difficulty !== DifficultyLevel.EASY }\"\r\n        (click)=\"setDifficulty(DifficultyLevel.EASY)\"\r\n        jhiTranslate=\"artemisApp.exercise.easy\"\r\n    ></div>\r\n    <div\r\n        class=\"btn btn-default\"\r\n        [ngClass]=\"{ 'btn-warning selected': exercise.difficulty === DifficultyLevel.MEDIUM, 'btn-default': exercise.difficulty !== DifficultyLevel.MEDIUM }\"\r\n        (click)=\"setDifficulty(DifficultyLevel.MEDIUM)\"\r\n        jhiTranslate=\"artemisApp.exercise.medium\"\r\n    ></div>\r\n    <div\r\n        class=\"btn btn-default\"\r\n        [ngClass]=\"{ 'btn-danger selected': exercise.difficulty === DifficultyLevel.HARD, 'btn-default': exercise.difficulty !== DifficultyLevel.HARD }\"\r\n        (click)=\"setDifficulty(DifficultyLevel.HARD)\"\r\n        jhiTranslate=\"artemisApp.exercise.hard\"\r\n    ></div>\r\n</div>\r\n", "import { Component, Input, OnChanges, SimpleChanges, ViewChild, effect, inject, input, output, signal } from '@angular/core';\r\nimport { Course, isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { TitleChannelNameComponent } from 'app/shared/form/title-channel-name/title-channel-name.component';\r\nimport { ProgrammingExerciseInputField } from 'app/exercises/programming/manage/update/programming-exercise-update.helper';\r\nimport { CourseExistingExerciseDetailsType, ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-title-channel-name',\r\n    templateUrl: './exercise-title-channel-name.component.html',\r\n    imports: [TitleChannelNameComponent],\r\n})\r\nexport class ExerciseTitleChannelNameComponent implements OnChanges {\r\n    course = input<Course>();\r\n    isEditFieldDisplayedRecord = input<Record<ProgrammingExerciseInputField, boolean>>();\r\n    courseId = input<number>();\r\n\r\n    @Input() exercise: Exercise;\r\n    @Input() titlePattern: string;\r\n    @Input() minTitleLength: number;\r\n    @Input() isExamMode: boolean;\r\n    @Input() isImport: boolean;\r\n    @Input() hideTitleLabel: boolean;\r\n\r\n    @ViewChild(TitleChannelNameComponent) titleChannelNameComponent: TitleChannelNameComponent;\r\n\r\n    onTitleChange = output<string>();\r\n    onChannelNameChange = output<string>();\r\n\r\n    alreadyUsedExerciseNames = signal<Set<string>>(new Set());\r\n\r\n    hideChannelNameInput = false;\r\n\r\n    constructor() {\r\n        const exerciseService = inject(ExerciseService);\r\n        effect(\r\n            function fetchExistingExerciseNamesOnInit() {\r\n                const courseId = this.courseId() ?? this.course()?.id;\r\n                if (courseId && this.exercise.type) {\r\n                    exerciseService.getExistingExerciseDetailsInCourse(courseId, this.exercise.type).subscribe((exerciseDetails: CourseExistingExerciseDetailsType) => {\r\n                        this.alreadyUsedExerciseNames.set(exerciseDetails.exerciseTitles ?? new Set());\r\n                    });\r\n                }\r\n            }.bind(this),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.exercise || changes.course || changes.isExamMode || this.isImport) {\r\n            this.hideChannelNameInput = !this.requiresChannelName(this.exercise, this.course(), this.isExamMode, this.isImport);\r\n        }\r\n    }\r\n\r\n    updateTitle(newTitle: string) {\r\n        this.exercise.title = newTitle;\r\n        this.onTitleChange.emit(newTitle);\r\n    }\r\n\r\n    updateChannelName(newName: string) {\r\n        this.exercise.channelName = newName;\r\n        this.onChannelNameChange.emit(newName);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the provided exercises should have a channel name. This is not the case, if messaging in the course\r\n     * is disabled or if it is an exam exercise.\r\n     * If messaging is enabled, a channel name should exist for newly created and imported exercises.\r\n     *\r\n     * @param exercise      the exercise under consideration\r\n     * @param course        the current course context (might differ from the exercise in case of import)\r\n     * @param isExamMode    true if the exercise should be an exam exercise\r\n     * @param isImport      true if the exercise is being imported\r\n     * @return boolean      true if the channel name is required, else false\r\n     */\r\n    private requiresChannelName(exercise: Exercise, course: Course | undefined, isExamMode: boolean, isImport: boolean): boolean {\r\n        // not required if messaging is disabled or exam mode\r\n        if (!isCommunicationEnabled(course) || isExamMode) {\r\n            return false;\r\n        }\r\n\r\n        // required on create or import (messaging is enabled)\r\n        const isCreate = exercise.id === undefined;\r\n        if (isCreate || isImport) {\r\n            return true;\r\n        }\r\n\r\n        // when editing, it is required if the exercise has a channel\r\n        return exercise.channelName !== undefined;\r\n    }\r\n}\r\n", "<jhi-title-channel-name\r\n    [title]=\"exercise.title\"\r\n    [channelName]=\"exercise.channelName\"\r\n    (titleChange)=\"updateTitle($event)\"\r\n    (channelNameChange)=\"updateChannelName($event)\"\r\n    channelNamePrefix=\"exercise-\"\r\n    [titlePattern]=\"titlePattern\"\r\n    [hideTitleLabel]=\"hideTitleLabel\"\r\n    [emphasizeLabels]=\"true\"\r\n    [hideChannelName]=\"hideChannelNameInput\"\r\n    [minTitleLength]=\"minTitleLength\"\r\n    [initChannelName]=\"isImport || exercise.id === undefined\"\r\n    [isEditFieldDisplayedRecord]=\"isEditFieldDisplayedRecord()\"\r\n    [alreadyUsedTitles]=\"alreadyUsedExerciseNames()\"\r\n/>\r\n"],
  "mappings": "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",
  "names": ["DifficultyPickerComponent", "DifficultyLevel", "exercise", "ngModelChange", "EventEmitter", "setDifficulty", "level", "difficulty", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275listener", "undefined", "\u0275\u0275elementEnd", "EASY", "MEDIUM", "HARD", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "_c1", "_c2", "_c3", "TranslateDirective", "NgClass", "styles", "ExerciseTitleChannelNameComponent", "course", "input", "isEditFieldDisplayedRecord", "courseId", "exercise", "titlePattern", "minTitleLength", "isExamMode", "isImport", "hideTitleLabel", "titleChannelNameComponent", "onTitleChange", "output", "onChannelNameChange", "alreadyUsedExerciseNames", "signal", "Set", "hideChannelNameInput", "constructor", "exerciseService", "inject", "ExerciseService", "effect", "id", "type", "getExistingExerciseDetailsInCourse", "subscribe", "exerciseDetails", "set", "exerciseTitles", "bind", "ngOnChanges", "changes", "requiresChannelName", "updateTitle", "newTitle", "title", "emit", "updateChannelName", "newName", "channelName", "isCommunicationEnabled", "undefined", "selectors", "viewQuery", "rf", "ctx", "TitleChannelNameComponent", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275property", "encapsulation"]
}
