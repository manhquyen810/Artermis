{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/shared/working-time-control/working-time-control.component.ts", "src/main/webapp/app/exam/shared/working-time-control/working-time-control.component.html"],
  "sourcesContent": ["import { Component, Input, inject } from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\nimport { getRelativeWorkingTimeExtension } from 'app/exam/participate/exam.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-working-time-control',\r\n    templateUrl: './working-time-control.component.html',\r\n    styleUrls: ['./working-time-control.component.scss'],\r\n    providers: [\r\n        ArtemisDurationFromSecondsPipe,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            multi: true,\r\n            useExisting: WorkingTimeControlComponent,\r\n        },\r\n    ],\r\n    imports: [TranslateDirective, FormsModule],\r\n})\r\nexport class WorkingTimeControlComponent implements ControlValueAccessor {\r\n    private artemisDurationFromSecondsPipe = inject(ArtemisDurationFromSecondsPipe);\r\n\r\n    // Control disabled state\r\n    @Input() disabled = false;\r\n    @Input() allowNegative = false;\r\n\r\n    // Whether the percentage-based working time extension control should be shown\r\n    @Input() relative = false;\r\n\r\n    // Labels for the working time duration inputs\r\n    @Input() durationLabelText?: string;\r\n    @Input() relativeLabelText?: string;\r\n\r\n    @Input()\r\n    set exam(exam: Exam | undefined) {\r\n        this.currentExam = exam;\r\n        this.initWorkingTimeFromCurrentExam();\r\n    }\r\n\r\n    get exam(): Exam | undefined {\r\n        return this.currentExam;\r\n    }\r\n\r\n    // The exam for which the working time should be updated\r\n    // Used to calculate the relative working time extension\r\n    private currentExam?: Exam;\r\n\r\n    workingTime = {\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        percent: 0,\r\n    };\r\n\r\n    private touched = false;\r\n    private onTouched = () => {};\r\n    private onChange: (_: number) => void = () => {};\r\n\r\n    /**\r\n     * Updates the working time duration inputs whenever\r\n     * the value of the form control changes.\r\n     * @param seconds\r\n     */\r\n    writeValue(seconds: number | undefined | null) {\r\n        if (typeof seconds === 'number') {\r\n            this.workingTimeSeconds = seconds;\r\n        }\r\n    }\r\n\r\n    registerOnChange(onChange: any) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    registerOnTouched(onTouched: any) {\r\n        this.onTouched = onTouched;\r\n    }\r\n\r\n    setDisabledState(disabled: boolean) {\r\n        this.disabled = disabled;\r\n    }\r\n\r\n    private markAsTouched() {\r\n        if (!this.touched) {\r\n            this.onTouched();\r\n            this.touched = true;\r\n        }\r\n    }\r\n\r\n    set workingTimeSeconds(seconds: number) {\r\n        this.setWorkingTimeDuration(seconds);\r\n        this.updateWorkingTimePercentFromDuration();\r\n    }\r\n\r\n    /**\r\n     * The seconds of the current working time duration.\r\n     */\r\n    get workingTimeSeconds(): number {\r\n        return this.artemisDurationFromSecondsPipe.durationToSeconds({\r\n            days: 0,\r\n            hours: this.workingTime.hours,\r\n            minutes: this.workingTime.minutes,\r\n            seconds: this.workingTime.seconds,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the controls based on the working time of the student exam.\r\n     */\r\n    private initWorkingTimeFromCurrentExam() {\r\n        if (this.exam) {\r\n            // this.setWorkingTimeDuration(examWorkingTime(this.exam)!);\r\n            this.updateWorkingTimePercentFromDuration();\r\n            this.emitWorkingTimeChange();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the working time duration values of the control whenever the percent value was changed.\r\n     * After the update, the onChange callback is called with the new working time in seconds.\r\n     */\r\n    onPercentChanged() {\r\n        this.markAsTouched();\r\n        this.updateWorkingTimeDurationFromPercent();\r\n        this.emitWorkingTimeChange();\r\n    }\r\n\r\n    /**\r\n     * Updates the working time percent value of the control whenever the duration values were changed.\r\n     * After the update, the onChange callback is called with the new working time in seconds.\r\n     */\r\n    onDurationChanged() {\r\n        this.markAsTouched();\r\n        this.updateWorkingTimePercentFromDuration();\r\n        this.emitWorkingTimeChange();\r\n    }\r\n\r\n    /**\r\n     * Updates the working time percent value of the control based on the current working time duration.\r\n     * @private\r\n     */\r\n    private updateWorkingTimePercentFromDuration() {\r\n        if (this.exam) {\r\n            this.workingTime.percent = getRelativeWorkingTimeExtension(this.exam, this.workingTimeSeconds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the working time duration values of the control based on the current working time percent.\r\n     * @private\r\n     */\r\n    private updateWorkingTimeDurationFromPercent() {\r\n        if (this.exam) {\r\n            const regularWorkingTime = this.exam.workingTime!;\r\n            const absoluteWorkingTimeSeconds = round(regularWorkingTime * (1.0 + this.workingTime.percent / 100), 0);\r\n            this.setWorkingTimeDuration(absoluteWorkingTimeSeconds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the working time duration values of the respective controls by\r\n     * converting the given seconds into hours, minutes and seconds.\r\n     * @param seconds the total number of seconds of working time.\r\n     * @private\r\n     */\r\n    private setWorkingTimeDuration(seconds: number) {\r\n        const workingTime = this.artemisDurationFromSecondsPipe.secondsToDuration(seconds);\r\n        this.workingTime.hours = workingTime.days * 24 + workingTime.hours;\r\n        this.workingTime.minutes = workingTime.minutes;\r\n        this.workingTime.seconds = workingTime.seconds;\r\n    }\r\n\r\n    /**\r\n     * Calls the onChange callback with the current working time in seconds.\r\n     * @private\r\n     */\r\n    private emitWorkingTimeChange() {\r\n        this.onChange(this.workingTimeSeconds);\r\n    }\r\n}\r\n", "<div class=\"d-flex flex-column gap-1 working-time-control\">\r\n    <div class=\"d-flex flex-column gap-1\">\r\n        @if (durationLabelText) {\r\n            <label for=\"workingTimeHours\" class=\"me-4\" [jhiTranslate]=\"durationLabelText\"></label>\r\n        }\r\n        <div class=\"input-group\">\r\n            <input\r\n                [(ngModel)]=\"workingTime.hours\"\r\n                (ngModelChange)=\"onDurationChanged()\"\r\n                [disabled]=\"disabled\"\r\n                id=\"workingTimeHours\"\r\n                name=\"hours\"\r\n                type=\"number\"\r\n                class=\"text-center form-control form-number-input\"\r\n                [min]=\"allowNegative ? null : 0\"\r\n                step=\"1\"\r\n                required\r\n            />\r\n            <label for=\"workingTimeHours\" class=\"input-group-text\">h</label>\r\n            <input\r\n                [(ngModel)]=\"workingTime.minutes\"\r\n                (ngModelChange)=\"onDurationChanged()\"\r\n                [disabled]=\"disabled\"\r\n                id=\"workingTimeMinutes\"\r\n                name=\"minutes\"\r\n                type=\"number\"\r\n                class=\"text-center form-control form-number-input\"\r\n                [min]=\"allowNegative ? -59 : 0\"\r\n                max=\"59\"\r\n                step=\"1\"\r\n                required\r\n            />\r\n            <label for=\"workingTimeMinutes\" class=\"input-group-text\">min</label>\r\n            <input\r\n                [(ngModel)]=\"workingTime.seconds\"\r\n                (ngModelChange)=\"onDurationChanged()\"\r\n                [disabled]=\"disabled\"\r\n                id=\"workingTimeSeconds\"\r\n                name=\"seconds\"\r\n                type=\"number\"\r\n                class=\"text-center form-control form-number-input\"\r\n                [min]=\"allowNegative ? -59 : 0\"\r\n                max=\"59\"\r\n                step=\"1\"\r\n                required\r\n            />\r\n            <label for=\"workingTimeSeconds\" class=\"input-group-text\">s</label>\r\n        </div>\r\n    </div>\r\n    @if (exam && relative) {\r\n        <div class=\"d-flex flex-column gap-1\">\r\n            @if (relativeLabelText) {\r\n                <label for=\"workingTimePercent\" class=\"me-4 flex-fill\" [jhiTranslate]=\"relativeLabelText\"></label>\r\n            }\r\n            <div class=\"input-group\">\r\n                <input\r\n                    [(ngModel)]=\"workingTime.percent\"\r\n                    (ngModelChange)=\"onPercentChanged()\"\r\n                    [disabled]=\"disabled\"\r\n                    id=\"workingTimePercent\"\r\n                    name=\"percent\"\r\n                    type=\"number\"\r\n                    class=\"text-center form-control form-number-input\"\r\n                    [min]=\"allowNegative ? -100 : 0\"\r\n                    step=\".01\"\r\n                    required\r\n                />\r\n                <label for=\"workingTimePercent\" class=\"input-group-text\">%</label>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "durationLabelText", "relativeLabelText", "\u0275\u0275elementStart", "\u0275\u0275template", "WorkingTimeControlComponent_Conditional_24_Conditional_3_Template", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "workingTime", "percent", "\u0275\u0275resetView", "\u0275\u0275listener", "onPercentChanged", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "\u0275\u0275twoWayProperty", "disabled", "allowNegative", "WorkingTimeControlComponent", "artemisDurationFromSecondsPipe", "inject", "ArtemisDurationFromSecondsPipe", "relative", "exam", "currentExam", "initWorkingTimeFromCurrentExam", "hours", "minutes", "seconds", "touched", "onTouched", "onChange", "writeValue", "workingTimeSeconds", "registerOnChange", "registerOnTouched", "setDisabledState", "markAsTouched", "setWorkingTimeDuration", "updateWorkingTimePercentFromDuration", "durationToSeconds", "days", "emitWorkingTimeChange", "updateWorkingTimeDurationFromPercent", "onDurationChanged", "getRelativeWorkingTimeExtension", "regularWorkingTime", "absoluteWorkingTimeSeconds", "round", "secondsToDuration", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "provide", "NG_VALUE_ACCESSOR", "multi", "useExisting", "decls", "vars", "consts", "template", "rf", "ctx", "WorkingTimeControlComponent_Conditional_4_Template", "WorkingTimeControlComponent_Conditional_24_Template", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "RequiredValidator", "MinValidator", "MaxValidator", "NgModel", "styles"]
}
