{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/exercise-details/request-feedback-button/request-feedback-button.component.ts", "src/main/webapp/app/overview/exercise-details/request-feedback-button/request-feedback-button.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, TemplateRef, inject, input, output } from '@angular/core';\r\nimport { Subscription, filter, skip } from 'rxjs';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faPenSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_ATHENA } from 'app/app.constants';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { CourseExerciseService } from 'app/exercises/shared/course-exercises/course-exercise.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { isExamExercise } from 'app/shared/util/utils';\r\nimport { ExerciseDetailsType, ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-request-feedback-button',\r\n    imports: [NgbTooltipModule, FontAwesomeModule, ArtemisTranslatePipe, TranslateDirective],\r\n    templateUrl: './request-feedback-button.component.html',\r\n})\r\nexport class RequestFeedbackButtonComponent implements OnInit, OnDestroy {\r\n    faPenSquare = faPenSquare;\r\n    athenaEnabled = false;\r\n    requestFeedbackEnabled = false;\r\n    isExamExercise: boolean;\r\n    participation?: StudentParticipation;\r\n    hasUserAcceptedExternalLLMUsage: boolean;\r\n    currentFeedbackRequestCount = 0;\r\n    feedbackRequestLimit = 10; // remark: this will be defined by the instructor and fetched\r\n\r\n    isSubmitted = input<boolean>();\r\n    pendingChanges = input<boolean>(false);\r\n    hasAthenaResultForLatestSubmission = input<boolean>(false);\r\n    isGeneratingFeedback = input<boolean>();\r\n    smallButtons = input<boolean>(false);\r\n    exercise = input.required<Exercise>();\r\n    generatingFeedback = output<void>();\r\n\r\n    private profileService = inject(ProfileService);\r\n    private alertService = inject(AlertService);\r\n    private courseExerciseService = inject(CourseExerciseService);\r\n    private translateService = inject(TranslateService);\r\n    private exerciseService = inject(ExerciseService);\r\n    private participationService = inject(ParticipationService);\r\n    private accountService = inject(AccountService);\r\n    private userService = inject(UserService);\r\n    private modalService = inject(NgbModal);\r\n    private participationWebsocketService = inject(ParticipationWebsocketService);\r\n\r\n    private athenaResultUpdateListener?: Subscription;\r\n    private acceptSubscription?: Subscription;\r\n\r\n    protected readonly ExerciseType = ExerciseType;\r\n\r\n    ngOnInit() {\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.athenaEnabled = profileInfo.activeProfiles?.includes(PROFILE_ATHENA);\r\n        });\r\n        this.isExamExercise = isExamExercise(this.exercise());\r\n        if (this.isExamExercise || !this.exercise().id) {\r\n            return;\r\n        }\r\n        this.requestFeedbackEnabled = this.exercise().allowFeedbackRequests ?? false;\r\n        this.updateParticipation();\r\n        this.setUserAcceptedExternalLLMUsage();\r\n    }\r\n    ngOnDestroy(): void {\r\n        this.athenaResultUpdateListener?.unsubscribe();\r\n        this.acceptSubscription?.unsubscribe();\r\n    }\r\n\r\n    private updateParticipation() {\r\n        if (this.exercise().id) {\r\n            this.exerciseService.getExerciseDetails(this.exercise().id!).subscribe({\r\n                next: (exerciseResponse: HttpResponse<ExerciseDetailsType>) => {\r\n                    this.participation = this.participationService.getSpecificStudentParticipation(exerciseResponse.body!.exercise.studentParticipations ?? [], false);\r\n                    if (this.participation) {\r\n                        this.currentFeedbackRequestCount =\r\n                            this.participation.results?.filter((result) => result.assessmentType == AssessmentType.AUTOMATIC_ATHENA && result.successful == true).length ?? 0;\r\n                        this.subscribeToResultUpdates();\r\n                    }\r\n                },\r\n                error: (error: HttpErrorResponse) => {\r\n                    this.alertService.error(`artemisApp.${error.error.entityName}.errors.${error.error.errorKey}`);\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    setUserAcceptedExternalLLMUsage(): void {\r\n        this.hasUserAcceptedExternalLLMUsage = !!this.accountService.userIdentity?.externalLLMUsageAccepted;\r\n    }\r\n\r\n    acceptExternalLLMUsage(modal: any) {\r\n        this.acceptSubscription?.unsubscribe();\r\n        this.acceptSubscription = this.userService.acceptExternalLLMUsage().subscribe(() => {\r\n            this.hasUserAcceptedExternalLLMUsage = true;\r\n            this.accountService.setUserAcceptedExternalLLMUsage();\r\n            modal.close();\r\n        });\r\n\r\n        // Proceed with feedback request after accepting\r\n        if (this.assureConditionsSatisfied()) {\r\n            this.processFeedbackRequest();\r\n        }\r\n    }\r\n\r\n    requestAIFeedback(content: TemplateRef<any>) {\r\n        if (!this.hasUserAcceptedExternalLLMUsage) {\r\n            this.modalService.open(content, { ariaLabelledBy: 'modal-title' });\r\n            return;\r\n        }\r\n        this.requestFeedback();\r\n    }\r\n\r\n    private subscribeToResultUpdates() {\r\n        if (!this.participation?.id) {\r\n            return;\r\n        }\r\n\r\n        // Subscribe to result updates for this participation\r\n        this.athenaResultUpdateListener = this.participationWebsocketService\r\n            .subscribeForLatestResultOfParticipation(this.participation.id, true)\r\n            .pipe(\r\n                skip(1), // Skip initial value\r\n                filter((result): result is Result => !!result),\r\n                filter((result) => result.assessmentType === AssessmentType.AUTOMATIC_ATHENA),\r\n            )\r\n            .subscribe(this.handleAthenaAssessment.bind(this));\r\n    }\r\n\r\n    private handleAthenaAssessment(result: Result) {\r\n        if (result.completionDate && result.successful) {\r\n            this.currentFeedbackRequestCount += 1;\r\n        }\r\n    }\r\n\r\n    requestFeedback() {\r\n        if (!this.assureConditionsSatisfied()) {\r\n            return;\r\n        }\r\n        this.processFeedbackRequest();\r\n    }\r\n\r\n    private processFeedbackRequest() {\r\n        this.courseExerciseService.requestFeedback(this.exercise().id!).subscribe({\r\n            next: (participation: StudentParticipation) => {\r\n                if (participation) {\r\n                    this.generatingFeedback.emit();\r\n                    this.alertService.success('artemisApp.exercise.feedbackRequestSent');\r\n                }\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.alertService.error(`artemisApp.exercise.${error.error.errorKey}`);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if the conditions for requesting automatic non-graded feedback are satisfied.\r\n     * The student can request automatic non-graded feedback under the following conditions:\r\n     * 1. They have a graded submission.\r\n     * 2. The deadline for the exercise has not been exceeded.\r\n     * 3. There is no already pending feedback request.\r\n     * @returns {boolean} `true` if all conditions are satisfied, otherwise `false`.\r\n     */\r\n    assureConditionsSatisfied(): boolean {\r\n        return this.exercise().type === ExerciseType.PROGRAMMING || this.assureTextModelingConditions();\r\n    }\r\n\r\n    /**\r\n     * Special conditions for text exercises.\r\n     * Not more than 1 request per submission.\r\n     * No request with pending changes (these would be overwritten after participation update)\r\n     */\r\n    assureTextModelingConditions(): boolean {\r\n        if (this.hasAthenaResultForLatestSubmission()) {\r\n            const submitFirstWarning = this.translateService.instant('artemisApp.exercise.submissionAlreadyHasAthenaResult');\r\n            this.alertService.warning(submitFirstWarning);\r\n            return false;\r\n        }\r\n        if (this.pendingChanges()) {\r\n            const pendingChangesMessage = this.translateService.instant('artemisApp.exercise.feedbackRequestPendingChanges');\r\n            this.alertService.warning(pendingChangesMessage);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "@if (!isExamExercise && requestFeedbackEnabled) {\r\n    @if (athenaEnabled) {\r\n        @if (exercise().type === ExerciseType.TEXT || exercise().type === ExerciseType.MODELING) {\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"requestAIFeedback(popup)\"\r\n                [class.btn-sm]=\"smallButtons()\"\r\n                [disabled]=\"!isSubmitted() || isGeneratingFeedback()\"\r\n                [id]=\"'request-feedback-' + exercise().id\"\r\n                [ngbTooltip]=\"'artemisApp.exerciseActions.requestAutomaticFeedbackTooltip' | artemisTranslate\"\r\n            >\r\n                <fa-icon [icon]=\"faPenSquare\" [fixedWidth]=\"true\" />\r\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exerciseActions.requestAutomaticFeedback\"></span>\r\n                <span\r\n                    class=\"badge\"\r\n                    [class.bg-warning]=\"this.currentFeedbackRequestCount < this.feedbackRequestLimit\"\r\n                    [class.bg-danger]=\"this.currentFeedbackRequestCount >= this.feedbackRequestLimit\"\r\n                >\r\n                    {{ this.currentFeedbackRequestCount }} / {{ this.feedbackRequestLimit }}\r\n                </span>\r\n            </button>\r\n        } @else {\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"requestAIFeedback(popup)\"\r\n                [class.btn-sm]=\"smallButtons()\"\r\n                [id]=\"'request-feedback-' + exercise().id\"\r\n                [ngbTooltip]=\"'artemisApp.exerciseActions.requestAutomaticFeedbackTooltip' | artemisTranslate\"\r\n            >\r\n                <fa-icon [icon]=\"faPenSquare\" [fixedWidth]=\"true\" />\r\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exerciseActions.requestAutomaticFeedback\"></span>\r\n                <span\r\n                    class=\"badge\"\r\n                    [class.bg-warning]=\"this.currentFeedbackRequestCount < this.feedbackRequestLimit\"\r\n                    [class.bg-danger]=\"this.currentFeedbackRequestCount >= this.feedbackRequestLimit\"\r\n                >\r\n                    {{ this.currentFeedbackRequestCount }} / {{ this.feedbackRequestLimit }}\r\n                </span>\r\n            </button>\r\n        }\r\n    } @else {\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            (click)=\"requestFeedback()\"\r\n            [class.btn-sm]=\"smallButtons()\"\r\n            [id]=\"'request-feedback-' + exercise().id\"\r\n            [ngbTooltip]=\"'artemisApp.exerciseActions.requestManualFeedbackTooltip' | artemisTranslate\"\r\n        >\r\n            <fa-icon [icon]=\"faPenSquare\" [fixedWidth]=\"true\" />\r\n            <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exerciseActions.requestManualFeedback\"></span>\r\n        </a>\r\n    }\r\n}\r\n\r\n<ng-template #popup let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"modal-title\" jhiTranslate=\"artemisApp.exerciseActions.externalLLMUsage.popUpLabel\"></h4>\r\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\"></button>\r\n    </div>\r\n    <div class=\"modal-body\" jhiTranslate=\"artemisApp.exerciseActions.externalLLMUsage.popUpMessage\"></div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"modal.dismiss('decline')\" jhiTranslate=\"artemisApp.exerciseActions.externalLLMUsage.decline\"></button>\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"acceptExternalLLMUsage(modal)\" jhiTranslate=\"artemisApp.exerciseActions.externalLLMUsage.accept\"></button>\r\n    </div>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "popup_r3", "\u0275\u0275reference", "\u0275\u0275resetView", "requestAIFeedback", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classProp", "smallButtons", "\u0275\u0275property", "isSubmitted", "isGeneratingFeedback", "exercise", "id", "\u0275\u0275pipeBind1", "faPenSquare", "currentFeedbackRequestCount", "feedbackRequestLimit", "\u0275\u0275textInterpolate2", "_r4", "\u0275\u0275template", "RequestFeedbackButtonComponent_Conditional_0_Conditional_1_Conditional_1_Template", "RequestFeedbackButtonComponent_Conditional_0_Conditional_1_Conditional_2_Template", "\u0275\u0275conditional", "type", "ExerciseType", "TEXT", "MODELING", "_r5", "requestFeedback", "RequestFeedbackButtonComponent_Conditional_0_Conditional_1_Template", "RequestFeedbackButtonComponent_Conditional_0_Conditional_2_Template", "athenaEnabled", "modal_r7", "_r6", "$implicit", "dismiss", "acceptExternalLLMUsage", "RequestFeedbackButtonComponent", "requestFeedbackEnabled", "isExamExercise", "participation", "hasUserAcceptedExternalLLMUsage", "input", "pendingChanges", "hasAthenaResultForLatestSubmission", "required", "generatingFeedback", "output", "profileService", "inject", "ProfileService", "alertService", "AlertService", "courseExerciseService", "CourseExerciseService", "translateService", "TranslateService", "exerciseService", "ExerciseService", "participationService", "ParticipationService", "accountService", "AccountService", "userService", "UserService", "modalService", "NgbModal", "participationWebsocketService", "ParticipationWebsocketService", "athenaResultUpdateListener", "acceptSubscription", "ngOnInit", "getProfileInfo", "subscribe", "profileInfo", "activeProfiles", "includes", "PROFILE_ATHENA", "allowFeedbackRequests", "updateParticipation", "setUserAcceptedExternalLLMUsage", "ngOnDestroy", "unsubscribe", "getExerciseDetails", "next", "exerciseResponse", "getSpecificStudentParticipation", "body", "studentParticipations", "results", "filter", "result", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "successful", "length", "subscribeToResultUpdates", "error", "entityName", "errorKey", "userIdentity", "externalLLMUsageAccepted", "modal", "close", "assureConditionsSatisfied", "processFeedbackRequest", "content", "open", "ariaLabelledBy", "subscribeForLatestResultOfParticipation", "pipe", "skip", "handleAthenaAssessment", "bind", "completionDate", "emit", "success", "PROGRAMMING", "assureTextModelingConditions", "submitFirstWarning", "instant", "warning", "pendingChangesMessage", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "RequestFeedbackButtonComponent_Conditional_0_Template", "RequestFeedbackButtonComponent_ng_template_1_Template", "\u0275\u0275templateRefExtractor", "NgbTooltipModule", "NgbTooltip", "FontAwesomeModule", "FaIconComponent", "ArtemisTranslatePipe", "TranslateDirective", "encapsulation"]
}
