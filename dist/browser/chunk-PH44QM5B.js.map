{
  "version": 3,
  "sources": ["src/main/webapp/app/utils/color.utils.ts"],
  "sourcesContent": ["import { deterministicRandomValueFromString } from 'app/utils/text.utils';\r\n\r\n/**\r\n * Returns a background color hue for a given string.\r\n * @param {string | undefined} seed - The string used to determine the random value.\r\n */\r\nexport const getBackgroundColorHue = (seed: string | undefined): string => {\r\n    if (seed === undefined) {\r\n        seed = Math.random().toString();\r\n    }\r\n    const hue = deterministicRandomValueFromString(seed) * 360;\r\n    return `hsl(${hue}, 50%, 50%)`; // Return an HSL color string\r\n};\r\n\r\n/**\r\n * Returns the brightness of a color. The calculation is based on https://www.w3.org/TR/AERT/#color-contrast\r\n * @param {string} color - The color in hex format.\r\n * @returns {number} - The brightness of the color.\r\n */\r\nexport const getColorBrightness = (color: string): number => {\r\n    // Remove the hash at the start if it's there\r\n    color = color.replace('#', '');\r\n\r\n    // Parse the r, g, b values\r\n    const r = parseInt(color.substring(0, 2), 16);\r\n    const g = parseInt(color.substring(2, 4), 16);\r\n    const b = parseInt(color.substring(4, 6), 16);\r\n\r\n    // Calculate the brightness\r\n    return (r * 299 + g * 587 + b * 114) / 1000;\r\n};\r\n\r\n/**\r\n * Determines if a color is dark based on its brightness.\r\n * @param {string} color - The color in hex format.\r\n * @returns {boolean} - True if the color is dark, otherwise false.\r\n */\r\nexport const isColorDark = (color: string): boolean => {\r\n    return getColorBrightness(color) < 128;\r\n};\r\n\r\n/**\r\n * Returns either black or white depending on the background color brightness.\r\n * @param {string} color - The background color in hex format.\r\n * @returns {string} - 'black' if the background color is light, 'white' if the background color is dark.\r\n */\r\nexport const getContrastingTextColor = (color: string): string => {\r\n    return isColorDark(color) ? 'white' : 'black';\r\n};\r\n"],
  "mappings": "wCAMO,IAAMA,EAAyBC,IAC9BA,IAASC,SACTD,EAAOE,KAAKC,OAAM,EAAGC,SAAQ,GAG1B,OADKC,EAAmCL,CAAI,EAAI,GACtC,eAQRM,EAAsBC,GAAyB,CAExDA,EAAQA,EAAMC,QAAQ,IAAK,EAAE,EAG7B,IAAMC,EAAIC,SAASH,EAAMI,UAAU,EAAG,CAAC,EAAG,EAAE,EACtCC,EAAIF,SAASH,EAAMI,UAAU,EAAG,CAAC,EAAG,EAAE,EACtCE,EAAIH,SAASH,EAAMI,UAAU,EAAG,CAAC,EAAG,EAAE,EAG5C,OAAQF,EAAI,IAAMG,EAAI,IAAMC,EAAI,KAAO,GAC3C,EAOaC,EAAeP,GACjBD,EAAmBC,CAAK,EAAI,IAQ1BQ,EAA2BR,GAC7BO,EAAYP,CAAK,EAAI,QAAU",
  "names": ["getBackgroundColorHue", "seed", "undefined", "Math", "random", "toString", "deterministicRandomValueFromString", "getColorBrightness", "color", "replace", "r", "parseInt", "substring", "g", "b", "isColorDark", "getContrastingTextColor"]
}
