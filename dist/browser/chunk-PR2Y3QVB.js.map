{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/participate/exam.utils.ts"],
  "sourcesContent": ["import { Exam } from 'app/entities/exam/exam.model';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { ServerDateService } from 'app/shared/server-date.service';\r\n\r\n/**\r\n * Calculates the individual end time based on the studentExam\r\n *\r\n * @param exam\r\n * @param studentExam\r\n * @return {dayjs.Dayjs | undefined}\r\n */\r\nexport const endTime = (exam: Exam, studentExam: StudentExam): dayjs.Dayjs | undefined => {\r\n    if (!exam) {\r\n        return undefined;\r\n    }\r\n    if (studentExam && studentExam.workingTime && exam.startDate) {\r\n        return dayjs(exam.startDate).add(studentExam.workingTime, 'seconds');\r\n    }\r\n    return exam.endDate;\r\n};\r\n\r\n/**\r\n * Calculates the working time of the exam in seconds.\r\n * If either the exam or the exam dates are not set, undefined is returned.\r\n *\r\n * @param exam\r\n * @return {number | undefined}\r\n */\r\nexport const examWorkingTime = (exam?: Exam): number | undefined => normalWorkingTime(exam?.startDate, exam?.endDate);\r\n\r\n/**\r\n * Calculates the time between start and end date in seconds.\r\n * If either the start or end date is not set, undefined is returned.\r\n *\r\n * @param startDate\r\n * @param endDate\r\n * @return {number | undefined}\r\n */\r\nexport const normalWorkingTime = (startDate?: dayjs.Dayjs, endDate?: dayjs.Dayjs): number | undefined =>\r\n    startDate && endDate ? dayjs(endDate).diff(startDate, 'seconds') : undefined;\r\n\r\n/**\r\n * Calculates the additional working time in seconds\r\n *\r\n * @param exam\r\n * @param studentExam\r\n * @return {number} The additional working time in seconds\r\n */\r\nexport const getAdditionalWorkingTime = (exam: Exam, studentExam: StudentExam): number => {\r\n    if (exam && exam.endDate && exam.startDate && studentExam && studentExam.workingTime) {\r\n        const personalEndDate = dayjs(exam.startDate).add(studentExam.workingTime, 'seconds');\r\n        return personalEndDate.diff(exam.endDate, 'seconds');\r\n    }\r\n    return 0;\r\n};\r\n\r\n/**\r\n * Calculates the relative difference in percent points between the regular working time of the exam and the individual working time for the student.\r\n *\r\n * E.g., for a regular working time of \"1h\" and a student working time of \"1h30min\" the difference is +50.\r\n * @param exam The exam which the student exam belongs to.\r\n * @param studentExamWorkingTime The individual working time of a student exam.\r\n * @return The relative working time extension in percent points rounded to two digits after the decimal separator.\r\n */\r\nexport const getRelativeWorkingTimeExtension = (exam: Exam, studentExamWorkingTime: number): number => {\r\n    const regularExamDuration = examWorkingTime(exam)!;\r\n    return round((studentExamWorkingTime / regularExamDuration - 1.0) * 100, 2);\r\n};\r\n\r\n/**\r\n * Determines if the exam spans multiple days\r\n *\r\n * @param exam\r\n * @param studentExam\r\n * @return {boolean}\r\n */\r\nexport const isExamOverMultipleDays = (exam: Exam, studentExam: StudentExam): boolean => {\r\n    if (!exam || !exam.startDate || !exam.endDate) {\r\n        return false;\r\n    }\r\n    const endDate = endTime(exam, studentExam)!;\r\n\r\n    return !endDate.isSame(exam.startDate, 'day');\r\n};\r\n\r\nexport function isExamResultPublished(isTestRun: boolean, exam: Exam | undefined, serverDateService: ServerDateService) {\r\n    if (isTestRun) {\r\n        return true;\r\n    }\r\n\r\n    return exam?.publishResultsDate && dayjs(exam.publishResultsDate).isBefore(serverDateService.now());\r\n}\r\n"],
  "mappings": "gFAaO,IAAMA,EAAUA,CAACC,EAAYC,IAAqD,CACrF,GAAKD,EAGL,OAAIC,GAAeA,EAAYC,aAAeF,EAAKG,UACxCC,EAAMJ,EAAKG,SAAS,EAAEE,IAAIJ,EAAYC,YAAa,SAAS,EAEhEF,EAAKM,OAChB,EASaC,EAAmBP,GAAoCQ,EAAkBR,GAAMG,UAAWH,GAAMM,OAAO,EAUvGE,EAAoBA,CAACL,EAAyBG,IACvDH,GAAaG,EAAUF,EAAME,CAAO,EAAEG,KAAKN,EAAW,SAAS,EAAIO,OAS1DC,EAA2BA,CAACX,EAAYC,IAC7CD,GAAQA,EAAKM,SAAWN,EAAKG,WAAaF,GAAeA,EAAYC,YAC7CE,EAAMJ,EAAKG,SAAS,EAAEE,IAAIJ,EAAYC,YAAa,SAAS,EAC7DO,KAAKT,EAAKM,QAAS,SAAS,EAEhD,EAWEM,EAAkCA,CAACZ,EAAYa,IAA0C,CAClG,IAAMC,EAAsBP,EAAgBP,CAAI,EAChD,OAAOe,GAAOF,EAAyBC,EAAsB,GAAO,IAAK,CAAC,CAC9E,EASaE,EAAyBA,CAAChB,EAAYC,IAC3C,CAACD,GAAQ,CAACA,EAAKG,WAAa,CAACH,EAAKM,QAC3B,GAIJ,CAFSP,EAAQC,EAAMC,CAAW,EAEzBgB,OAAOjB,EAAKG,UAAW,KAAK,EAG1C,SAAUe,EAAsBC,EAAoBnB,EAAwBoB,EAAoC,CAClH,OAAID,EACO,GAGJnB,GAAMqB,oBAAsBjB,EAAMJ,EAAKqB,kBAAkB,EAAEC,SAASF,EAAkBG,IAAG,CAAE,CACtG",
  "names": ["endTime", "exam", "studentExam", "workingTime", "startDate", "dayjs", "add", "endDate", "examWorkingTime", "normalWorkingTime", "diff", "undefined", "getAdditionalWorkingTime", "getRelativeWorkingTimeExtension", "studentExamWorkingTime", "regularExamDuration", "round", "isExamOverMultipleDays", "isSame", "isExamResultPublished", "isTestRun", "serverDateService", "publishResultsDate", "isBefore", "now"]
}
