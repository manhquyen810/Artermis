{
  "version": 3,
  "sources": ["src/main/webapp/app/course/learning-paths/services/learning-path-navigation.service.ts", "src/main/webapp/app/course/learning-paths/components/learning-path-nav-overview-learning-objects/learning-path-nav-overview-learning-objects.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-path-nav-overview-learning-objects/learning-path-nav-overview-learning-objects.component.html", "src/main/webapp/app/course/learning-paths/components/learning-path-nav-overview/learning-path-nav-overview.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-path-nav-overview/learning-path-nav-overview.component.html", "src/main/webapp/app/course/learning-paths/components/learning-path-student-nav/learning-path-student-nav.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-path-student-nav/learning-path-student-nav.component.html", "src/main/webapp/app/course/learning-paths/components/learning-path-lecture-unit/learning-path-lecture-unit.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-path-lecture-unit/learning-path-lecture-unit.component.html", "src/main/webapp/app/course/learning-paths/components/learning-path-exercise/learning-path-exercise.component.ts", "src/main/webapp/app/course/learning-paths/components/learning-path-exercise/learning-path-exercise.component.html", "src/main/webapp/app/course/learning-paths/pages/learning-path-student-page/learning-path-student-page.component.ts", "src/main/webapp/app/course/learning-paths/pages/learning-path-student-page/learning-path-student-page.component.html"],
  "sourcesContent": ["import { Injectable, computed, inject, signal } from '@angular/core';\r\nimport { LearningPathNavigationDTO, LearningPathNavigationObjectDTO } from 'app/entities/competency/learning-path.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LearningPathNavigationService {\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly alertService = inject(AlertService);\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n\r\n    readonly learningPathNavigation = signal<LearningPathNavigationDTO | undefined>(undefined);\r\n    readonly currentLearningObject = computed(() => this.learningPathNavigation()?.currentLearningObject);\r\n\r\n    readonly isCurrentLearningObjectCompleted = signal<boolean>(false);\r\n\r\n    async loadLearningPathNavigation(learningPathId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const learningPathNavigation = await this.learningPathApiService.getLearningPathNavigation(learningPathId);\r\n            this.learningPathNavigation.set(learningPathNavigation);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    async loadRelativeLearningPathNavigation(learningPathId: number, selectedLearningObject: LearningPathNavigationObjectDTO): Promise<void> {\r\n        try {\r\n            const learningPathNavigation = await this.learningPathApiService.getRelativeLearningPathNavigation(\r\n                learningPathId,\r\n                selectedLearningObject.id,\r\n                selectedLearningObject.type,\r\n                selectedLearningObject.competencyId,\r\n            );\r\n            this.learningPathNavigation.set(learningPathNavigation);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        }\r\n    }\r\n\r\n    completeLearningPath(): void {\r\n        this.learningPathNavigation.set({ predecessorLearningObject: this.currentLearningObject(), progress: 100 });\r\n    }\r\n\r\n    setCurrentLearningObjectCompletion(completed: boolean): void {\r\n        this.isCurrentLearningObjectCompleted.set(completed);\r\n    }\r\n}\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, input, output, signal, untracked } from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { LearningPathNavigationService } from 'app/course/learning-paths/services/learning-path-navigation.service';\r\nimport { LearningPathNavigationObjectDTO } from 'app/entities/competency/learning-path.model';\r\nimport { faCheckCircle, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbAccordionModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-nav-overview-learning-objects',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [NgbAccordionModule, FontAwesomeModule, TranslateDirective, NgClass],\r\n    templateUrl: './learning-path-nav-overview-learning-objects.component.html',\r\n    styleUrl: './learning-path-nav-overview-learning-objects.component.scss',\r\n})\r\nexport class LearningPathNavOverviewLearningObjectsComponent {\r\n    protected readonly faCheckCircle = faCheckCircle;\r\n    protected readonly faLock = faLock;\r\n\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly learningPathNavigationService = inject(LearningPathNavigationService);\r\n\r\n    readonly learningPathId = input.required<number>();\r\n    readonly competencyId = input.required<number>();\r\n    // competency id of current competency of learning path (not the one of the selected learning object)\r\n    readonly currentCompetencyIdOnPath = input.required();\r\n    readonly currentLearningObject = this.learningPathNavigationService.currentLearningObject;\r\n\r\n    readonly isLoading = signal<boolean>(false);\r\n    readonly learningObjects = signal<LearningPathNavigationObjectDTO[] | undefined>(undefined);\r\n\r\n    readonly nextLearningObjectOnPath = computed(() =>\r\n        this.competencyId() === this.currentCompetencyIdOnPath() ? this.learningObjects()?.find((learningObject) => !learningObject.completed) : undefined,\r\n    );\r\n\r\n    readonly onLearningObjectSelected = output<void>();\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            untracked(() => this.loadLearningObjects());\r\n        });\r\n    }\r\n\r\n    async loadLearningObjects(): Promise<void> {\r\n        if (this.learningObjects()) {\r\n            return;\r\n        }\r\n        try {\r\n            this.isLoading.set(true);\r\n            const learningObjects = await this.learningPathApiService.getLearningPathCompetencyLearningObjects(this.learningPathId(), this.competencyId());\r\n            this.learningObjects.set(learningObjects);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    async selectLearningObject(learningObject: LearningPathNavigationObjectDTO): Promise<void> {\r\n        if (!learningObject.unreleased) {\r\n            await this.learningPathNavigationService.loadRelativeLearningPathNavigation(this.learningPathId(), learningObject);\r\n            this.onLearningObjectSelected.emit();\r\n        }\r\n    }\r\n}\r\n", "<div class=\"bg-light\">\r\n    @if (learningObjects()) {\r\n        @for (learningObject of learningObjects(); let last = $last; track learningObject) {\r\n            <div\r\n                (click)=\"selectLearningObject(learningObject)\"\r\n                class=\"row p-3 m-0 align-items-center\"\r\n                [ngClass]=\"{\r\n                    'selected-learning-object': currentLearningObject()?.id === learningObject.id && currentLearningObject()?.type === learningObject.type,\r\n                    clickable: !learningObject.unreleased,\r\n                }\"\r\n            >\r\n                @if (learningObject.unreleased) {\r\n                    <span class=\"col-md-auto p-0 text-muted\" jhiTranslate=\"artemisApp.learningPath.navigation.overview.unreleasedLearningObjectLabel\"></span>\r\n                    <fa-icon [icon]=\"faLock\" class=\"col-md-auto text-muted\" />\r\n                } @else {\r\n                    <span class=\"col-md-auto p-0\">{{ learningObject.name }}</span>\r\n                }\r\n                @if (learningObject.completed) {\r\n                    <fa-icon [icon]=\"faCheckCircle\" class=\"col-md-auto text-success\" />\r\n                } @else if (nextLearningObjectOnPath()?.id === learningObject.id) {\r\n                    <div class=\"ms-2 col-md-auto next-learning-object-container\">\r\n                        <small class=\"font-bold\"\r\n                            ><strong><span jhiTranslate=\"artemisApp.learningPath.navigation.overview.nextLearningObjectOnPathLabel\"></span></strong\r\n                        ></small>\r\n                    </div>\r\n                }\r\n            </div>\r\n            @if (!last) {\r\n                <hr class=\"m-0 p-0\" />\r\n            }\r\n        } @empty {\r\n            <div class=\"p-3 empty-learning-objects-label\">\r\n                <em\r\n                    ><small><span jhiTranslate=\"artemisApp.learningPath.navigation.overview.emptyLearningObjectsLabel\"></span></small\r\n                ></em>\r\n            </div>\r\n        }\r\n    } @else {\r\n        <div class=\"row justify-content-center p-2\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, input, output, signal, untracked, viewChild } from '@angular/core';\r\nimport { NgbAccordionDirective, NgbAccordionModule, NgbDropdownModule, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { LearningPathCompetencyDTO } from 'app/entities/competency/learning-path.model';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { CompetencyGraphModalComponent } from 'app/course/learning-paths/components/competency-graph-modal/competency-graph-modal.component';\r\nimport { LearningPathNavOverviewLearningObjectsComponent } from 'app/course/learning-paths/components/learning-path-nav-overview-learning-objects/learning-path-nav-overview-learning-objects.component';\r\nimport { LearningPathNavigationService } from 'app/course/learning-paths/services/learning-path-navigation.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-nav-overview',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [FontAwesomeModule, NgbDropdownModule, NgbAccordionModule, LearningPathNavOverviewLearningObjectsComponent, TranslateDirective],\r\n    templateUrl: './learning-path-nav-overview.component.html',\r\n    styleUrl: './learning-path-nav-overview.component.scss',\r\n})\r\nexport class LearningPathNavOverviewComponent {\r\n    protected readonly faCheckCircle = faCheckCircle;\r\n\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly modalService = inject(NgbModal);\r\n    private readonly learningPathApiService = inject(LearningPathApiService);\r\n    private readonly learningPathNavigationService = inject(LearningPathNavigationService);\r\n\r\n    readonly learningPathId = input.required<number>();\r\n\r\n    readonly competencyAccordion = viewChild.required(NgbAccordionDirective);\r\n\r\n    readonly onLearningObjectSelected = output<void>();\r\n    readonly isLoading = signal(false);\r\n    readonly competencies = signal<LearningPathCompetencyDTO[]>([]);\r\n\r\n    // competency id of currently selected learning object\r\n    readonly currentCompetencyId = computed(() => this.learningPathNavigationService.currentLearningObject()?.competencyId);\r\n    // current competency of learning path (not the one of the selected learning object)\r\n    readonly currentCompetencyOnPath = computed(() => this.competencies()?.find((competency) => competency.masteryProgress < 1));\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const learningPathId = this.learningPathId();\r\n            untracked(() => this.loadCompetencies(learningPathId));\r\n        });\r\n    }\r\n\r\n    async loadCompetencies(learningPathId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const competencies = await this.learningPathApiService.getLearningPathCompetencies(learningPathId);\r\n            this.competencies.set(competencies);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    selectLearningObject(): void {\r\n        this.onLearningObjectSelected.emit();\r\n        this.competencyAccordion().collapseAll();\r\n    }\r\n\r\n    openCompetencyGraph(): void {\r\n        CompetencyGraphModalComponent.openCompetencyGraphModal(this.modalService, this.learningPathId(), undefined);\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"row justify-content-between align-items-center w-100 m-0 p-3\">\r\n        <span jhiTranslate=\"artemisApp.learningPath.navigation.overview.title\" class=\"col-md-auto p-0 fw-bold\"></span>\r\n        <div class=\"col-md-auto p-0\">\r\n            <button (click)=\"openCompetencyGraph()\" id=\"open-competency-graph-button\" type=\"button\" class=\"btn btn-outline-secondary\">\r\n                <span jhiTranslate=\"artemisApp.learningPath.navigation.overview.showCompetenciesGraphButton\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <hr class=\"m-0\" />\r\n    @if (isLoading()) {\r\n        <div class=\"row justify-content-center m-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n            </div>\r\n        </div>\r\n    } @else if (competencies()) {\r\n        <div ngbAccordion class=\"nav-overview-competencies accordion-flush\">\r\n            @for (competency of competencies(); track competency.id) {\r\n                <div ngbAccordionItem [collapsed]=\"currentCompetencyId() !== competency.id\">\r\n                    <div ngbAccordionHeader>\r\n                        <button ngbAccordionButton class=\"row px-3 m-0\">\r\n                            <span class=\"col-md-auto p-0 fw-bold\">{{ competency.title }}</span>\r\n                            @if (competency.masteryProgress === 1) {\r\n                                <fa-icon [icon]=\"faCheckCircle\" class=\"col-md-auto text-success\" />\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                    <div ngbAccordionCollapse>\r\n                        <div ngbAccordionBody class=\"p-0 overflow-hidden\">\r\n                            <ng-template>\r\n                                <jhi-learning-path-nav-overview-learning-objects\r\n                                    (onLearningObjectSelected)=\"selectLearningObject()\"\r\n                                    [learningPathId]=\"learningPathId()\"\r\n                                    [competencyId]=\"competency.id\"\r\n                                    [currentCompetencyIdOnPath]=\"currentCompetencyOnPath()?.id\"\r\n                                />\r\n                            </ng-template>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { LearningPathNavigationObjectDTO } from 'app/entities/competency/learning-path.model';\r\n\r\nimport { NgbAccordionModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faCheckCircle, faChevronDown, faChevronLeft, faChevronRight, faFlag, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { LearningPathNavOverviewComponent } from 'app/course/learning-paths/components/learning-path-nav-overview/learning-path-nav-overview.component';\r\nimport { LearningPathNavigationService } from 'app/course/learning-paths/services/learning-path-navigation.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-student-nav',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [NgbDropdownModule, NgbAccordionModule, FontAwesomeModule, LearningPathNavOverviewComponent, TranslateDirective],\r\n    templateUrl: './learning-path-student-nav.component.html',\r\n    styleUrl: './learning-path-student-nav.component.scss',\r\n})\r\nexport class LearningPathNavComponent {\r\n    protected readonly faChevronDown = faChevronDown;\r\n    protected readonly faCheckCircle = faCheckCircle;\r\n    protected readonly faFlag = faFlag;\r\n    protected readonly faSpinner = faSpinner;\r\n    protected readonly faChevronLeft = faChevronLeft;\r\n    protected readonly faChevronRight = faChevronRight;\r\n\r\n    private learningPathNavigationService = inject(LearningPathNavigationService);\r\n\r\n    readonly learningPathId = input.required<number>();\r\n\r\n    readonly isLoading = this.learningPathNavigationService.isLoading;\r\n    readonly isLoadingPredecessor = signal<boolean>(false);\r\n    readonly isLoadingSuccessor = signal<boolean>(false);\r\n\r\n    private readonly learningPathNavigation = this.learningPathNavigationService.learningPathNavigation;\r\n    readonly learningPathProgress = computed(() => this.learningPathNavigation()?.progress ?? 0);\r\n    readonly predecessorLearningObject = computed(() => this.learningPathNavigation()?.predecessorLearningObject);\r\n    readonly currentLearningObject = computed(() => this.learningPathNavigation()?.currentLearningObject);\r\n    readonly successorLearningObject = computed(() => this.learningPathNavigation()?.successorLearningObject);\r\n\r\n    readonly isDropdownOpen = signal<boolean>(false);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const learningPathId = this.learningPathId();\r\n            untracked(() => this.learningPathNavigationService.loadLearningPathNavigation(learningPathId));\r\n        });\r\n    }\r\n\r\n    async selectLearningObject(selectedLearningObject: LearningPathNavigationObjectDTO, isSuccessor: boolean): Promise<void> {\r\n        const loadingSpinner = isSuccessor ? this.isLoadingSuccessor : this.isLoadingPredecessor;\r\n        loadingSpinner.set(true);\r\n        await this.learningPathNavigationService.loadRelativeLearningPathNavigation(this.learningPathId(), selectedLearningObject);\r\n        loadingSpinner.set(false);\r\n    }\r\n\r\n    completeLearningPath(): void {\r\n        this.learningPathNavigationService.completeLearningPath();\r\n    }\r\n\r\n    setIsDropdownOpen(isOpen: boolean): void {\r\n        this.isDropdownOpen.set(isOpen);\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"row justify-content-between\">\r\n        <div class=\"col-4\">\r\n            <div class=\"row justify-content-start align-items-center\">\r\n                @if (predecessorLearningObject(); as predecessorLearningObject) {\r\n                    <div class=\"col-md-auto\">\r\n                        <button\r\n                            id=\"previous-button\"\r\n                            (click)=\"selectLearningObject(predecessorLearningObject, false)\"\r\n                            type=\"button\"\r\n                            class=\"btn btn-secondary d-flex justify-content-center\"\r\n                        >\r\n                            <div class=\"me-1 loading-icon-container\">\r\n                                @if (isLoadingPredecessor()) {\r\n                                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                                } @else {\r\n                                    <fa-icon [icon]=\"faChevronLeft\" />\r\n                                }\r\n                            </div>\r\n                            <span jhiTranslate=\"artemisApp.learningPath.navigation.previousButton\"></span>\r\n                        </button>\r\n                    </div>\r\n                    <span class=\"col ps-3 text-truncate text-secondary\">{{ predecessorLearningObject.name }}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n        <div ngbDropdown class=\"col-4 dropdown\" (openChange)=\"setIsDropdownOpen($event)\" #navOverview=\"ngbDropdown\">\r\n            <div type=\"button\" class=\"row justify-content-center align-items-center h-100\" id=\"navigation-overview\" ngbDropdownToggle>\r\n                @if (currentLearningObject()) {\r\n                    <span class=\"col-md-auto fw-bold\">\r\n                        {{ currentLearningObject()?.name }}\r\n                    </span>\r\n                } @else {\r\n                    <span class=\"col-md-auto fw-bold\" jhiTranslate=\"artemisApp.learningPath.navigation.recapLabel\"></span>\r\n                }\r\n                <fa-icon [icon]=\"faChevronDown\" class=\"col-md-auto ps-0\" />\r\n            </div>\r\n            <div ngbDropdownMenu class=\"mt-3 col p-0\" aria-labelledby=\"navigation-overview\">\r\n                @if (isDropdownOpen()) {\r\n                    <jhi-learning-path-nav-overview (onLearningObjectSelected)=\"navOverview.close()\" [learningPathId]=\"learningPathId()\" />\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <div class=\"row justify-content-end align-items-center\">\r\n                @if (successorLearningObject(); as successorLearningObject) {\r\n                    <span class=\"col text-end pe-3 text-truncate text-secondary\">{{ successorLearningObject.name }}</span>\r\n                    <div class=\"col-md-auto\">\r\n                        <button id=\"next-button\" (click)=\"selectLearningObject(successorLearningObject, true)\" type=\"button\" class=\"btn btn-primary d-flex justify-content-center\">\r\n                            <span jhiTranslate=\"artemisApp.learningPath.navigation.nextButton\"></span>\r\n                            <div class=\"ms-1 loading-icon-container\">\r\n                                @if (isLoadingSuccessor()) {\r\n                                    <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                                } @else {\r\n                                    <fa-icon [icon]=\"faChevronRight\" />\r\n                                }\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                } @else if (currentLearningObject() && !successorLearningObject()) {\r\n                    <div class=\"col-md-auto\">\r\n                        <button id=\"complete-button\" (click)=\"completeLearningPath()\" type=\"button\" class=\"btn btn-primary\">\r\n                            <fa-icon [icon]=\"faFlag\" />\r\n                            <span jhiTranslate=\"artemisApp.learningPath.navigation.completeButton\"></span>\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"progress my-3\" role=\"progressbar\" style=\"height: 2px\">\r\n        <div class=\"progress-bar\" [style.width.%]=\"learningPathProgress()\"></div>\r\n    </div>\r\n</div>\r\n", "import { ChangeDetectionStrategy, Component, computed, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { LectureUnit, LectureUnitType } from 'app/entities/lecture-unit/lectureUnit.model';\r\nimport { LectureUnitCompletionEvent } from 'app/overview/course-lectures/course-lecture-details.component';\r\nimport { LearningPathNavigationService } from 'app/course/learning-paths/services/learning-path-navigation.service';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { VideoUnitComponent } from 'app/overview/course-lectures/video-unit/video-unit.component';\r\nimport { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\r\nimport { AttachmentUnitComponent } from 'app/overview/course-lectures/attachment-unit/attachment-unit.component';\r\nimport { OnlineUnitComponent } from 'app/overview/course-lectures/online-unit/online-unit.component';\r\nimport { isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { DiscussionSectionComponent } from 'app/overview/discussion-section/discussion-section.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ExerciseUnitComponent } from 'app/overview/course-lectures/exercise-unit/exercise-unit.component';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-lecture-unit',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [VideoUnitComponent, TextUnitComponent, AttachmentUnitComponent, OnlineUnitComponent, DiscussionSectionComponent, TranslateDirective, ExerciseUnitComponent],\r\n    templateUrl: './learning-path-lecture-unit.component.html',\r\n})\r\nexport class LearningPathLectureUnitComponent {\r\n    protected readonly LectureUnitType = LectureUnitType;\r\n\r\n    private readonly lectureUnitService = inject(LectureUnitService);\r\n    private readonly learningPathNavigationService = inject(LearningPathNavigationService);\r\n    private readonly alertService = inject(AlertService);\r\n\r\n    readonly lectureUnitId = input.required<number>();\r\n    readonly isLoading = signal<boolean>(false);\r\n    readonly lectureUnit = signal<LectureUnit | undefined>(undefined);\r\n\r\n    readonly lecture = computed(() => this.lectureUnit()?.lecture);\r\n\r\n    readonly isCommunicationEnabled = computed(() => isCommunicationEnabled(this.lecture()?.course));\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const lectureUnitId = this.lectureUnitId();\r\n            untracked(() => this.loadLectureUnit(lectureUnitId));\r\n        });\r\n    }\r\n\r\n    async loadLectureUnit(lectureUnitId: number): Promise<void> {\r\n        try {\r\n            this.isLoading.set(true);\r\n            const lectureUnit = await lastValueFrom(this.lectureUnitService.getLectureUnitById(lectureUnitId));\r\n            this.lectureUnit.set(lectureUnit);\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLoading.set(false);\r\n        }\r\n    }\r\n\r\n    setLearningObjectCompletion(completionEvent: LectureUnitCompletionEvent): void {\r\n        this.lectureUnitService.completeLectureUnit(this.lectureUnit()!.lecture!, completionEvent);\r\n        if (this.lectureUnit()?.completed === completionEvent.completed) {\r\n            this.learningPathNavigationService.setCurrentLearningObjectCompletion(completionEvent.completed);\r\n        }\r\n    }\r\n}\r\n", "@if (isLoading()) {\r\n    <div class=\"row justify-content-center m-4\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n            <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n        </div>\r\n    </div>\r\n}\r\n@if (lectureUnit(); as lectureUnit) {\r\n    <div class=\"row m-0\">\r\n        <div class=\"col p-0\">\r\n            @switch (lectureUnit.type) {\r\n                @case (LectureUnitType.VIDEO) {\r\n                    <jhi-video-unit [lectureUnit]=\"lectureUnit\" (onCompletion)=\"setLearningObjectCompletion($event)\" />\r\n                }\r\n                @case (LectureUnitType.TEXT) {\r\n                    <jhi-text-unit [lectureUnit]=\"lectureUnit\" (onCompletion)=\"setLearningObjectCompletion($event)\" />\r\n                }\r\n                @case (LectureUnitType.ATTACHMENT) {\r\n                    <jhi-attachment-unit [lectureUnit]=\"lectureUnit\" (onCompletion)=\"setLearningObjectCompletion($event)\" />\r\n                }\r\n                @case (LectureUnitType.EXERCISE) {\r\n                    <jhi-exercise-unit [exerciseUnit]=\"lectureUnit\" />\r\n                }\r\n                @case (LectureUnitType.ONLINE) {\r\n                    <jhi-online-unit [lectureUnit]=\"lectureUnit\" (onCompletion)=\"setLearningObjectCompletion($event)\" />\r\n                }\r\n            }\r\n        </div>\r\n        @if (isCommunicationEnabled()) {\r\n            <div class=\"col-md-auto p-0 ms-2\">\r\n                <jhi-discussion-section [lecture]=\"this.lecture()\" />\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n", "import { ChangeDetectionStrategy, Component, ViewContainerRef, effect, inject, input } from '@angular/core';\r\nimport { CourseExerciseDetailsComponent } from 'app/overview/exercise-details/course-exercise-details.component';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-exercise',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './learning-path-exercise.component.html',\r\n})\r\nexport class LearningPathExerciseComponent {\r\n    public readonly courseId = input.required<number>();\r\n    public readonly exerciseId = input.required<number>();\r\n\r\n    private readonly viewContainerRef = inject(ViewContainerRef);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            this.viewContainerRef.clear();\r\n            // The exercise component can not be directly added to the template as before rendering the learning path mode\r\n            // has to be activated. This is done by setting the learningPathMode property of the exercise component to true.\r\n            const exerciseComponent = this.viewContainerRef.createComponent(CourseExerciseDetailsComponent);\r\n            exerciseComponent.instance.courseId = this.courseId();\r\n            exerciseComponent.instance.exerciseId = this.exerciseId();\r\n            exerciseComponent.instance.learningPathMode = true;\r\n        });\r\n    }\r\n}\r\n", "<ng-content />\r\n", "import { ChangeDetectionStrategy, Component, effect, inject, signal, untracked } from '@angular/core';\r\nimport { LearningObjectType, LearningPathDTO } from 'app/entities/competency/learning-path.model';\r\nimport { map } from 'rxjs';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { LearningPathNavComponent } from 'app/course/learning-paths/components/learning-path-student-nav/learning-path-student-nav.component';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { LearningPathLectureUnitComponent } from 'app/course/learning-paths/components/learning-path-lecture-unit/learning-path-lecture-unit.component';\r\nimport { LearningPathExerciseComponent } from 'app/course/learning-paths/components/learning-path-exercise/learning-path-exercise.component';\r\nimport { LearningPathApiService } from 'app/course/learning-paths/services/learning-path-api.service';\r\nimport { LearningPathNavigationService } from 'app/course/learning-paths/services/learning-path-navigation.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-learning-path-student-page',\r\n    templateUrl: './learning-path-student-page.component.html',\r\n    styleUrl: './learning-path-student-page.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [LearningPathNavComponent, LearningPathLectureUnitComponent, LearningPathExerciseComponent, TranslateDirective],\r\n})\r\nexport class LearningPathStudentPageComponent {\r\n    protected readonly LearningObjectType = LearningObjectType;\r\n\r\n    private readonly learningApiService = inject(LearningPathApiService);\r\n    private readonly learningPathNavigationService = inject(LearningPathNavigationService);\r\n    private readonly alertService = inject(AlertService);\r\n    private readonly activatedRoute = inject(ActivatedRoute);\r\n\r\n    readonly isLearningPathLoading = signal(false);\r\n    readonly learningPath = signal<LearningPathDTO | undefined>(undefined);\r\n    readonly courseId = toSignal(this.activatedRoute.parent!.params.pipe(map((params) => Number(params.courseId))), { requireSync: true });\r\n    readonly currentLearningObject = this.learningPathNavigationService.currentLearningObject;\r\n    readonly isLearningPathNavigationLoading = this.learningPathNavigationService.isLoading;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            const courseId = this.courseId();\r\n            untracked(() => this.loadLearningPath(courseId));\r\n        });\r\n    }\r\n\r\n    private async loadLearningPath(courseId: number): Promise<void> {\r\n        try {\r\n            this.isLearningPathLoading.set(true);\r\n            const learningPath = await this.learningApiService.getLearningPathForCurrentUser(courseId);\r\n            this.learningPath.set(learningPath);\r\n        } catch (error) {\r\n            // If learning path does not exist (404) ignore the error\r\n            if (error.status != 404) {\r\n                onError(this.alertService, error);\r\n            }\r\n        } finally {\r\n            this.isLearningPathLoading.set(false);\r\n        }\r\n    }\r\n\r\n    async startLearningPath(): Promise<void> {\r\n        try {\r\n            this.isLearningPathLoading.set(true);\r\n            if (!this.learningPath()) {\r\n                const learningPath = await this.learningApiService.generateLearningPathForCurrentUser(this.courseId());\r\n                this.learningPath.set(learningPath);\r\n            }\r\n            await this.learningApiService.startLearningPathForCurrentUser(this.learningPath()!.id);\r\n            this.learningPath.update((learningPath) => ({ ...learningPath!, startedByStudent: true }));\r\n        } catch (error) {\r\n            this.alertService.error(error);\r\n        } finally {\r\n            this.isLearningPathLoading.set(false);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"col learning-path-student-page\">\r\n    @if (isLearningPathLoading()) {\r\n        <div class=\"row justify-content-center align-items-center h-100\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n            </div>\r\n        </div>\r\n    } @else if (learningPath() && learningPath()!.startedByStudent) {\r\n        <jhi-learning-path-student-nav [learningPathId]=\"learningPath()!.id\" />\r\n        <div class=\"learning-path-student-content\">\r\n            @if (currentLearningObject()?.type === LearningObjectType.LECTURE) {\r\n                <jhi-learning-path-lecture-unit [lectureUnitId]=\"currentLearningObject()!.id\" />\r\n            } @else if (currentLearningObject()?.type === LearningObjectType.EXERCISE) {\r\n                <jhi-learning-path-exercise [courseId]=\"courseId()\" [exerciseId]=\"currentLearningObject()!.id\" />\r\n            } @else if (!isLearningPathNavigationLoading()) {\r\n                <div class=\"row align-items-center justify-content-center h-100 w-100\">\r\n                    <div class=\"learning-path-no-content-container\">\r\n                        <h3 class=\"mb-3\" jhiTranslate=\"artemisApp.learningPath.completion.title\"></h3>\r\n                        <div jhiTranslate=\"artemisApp.learningPath.completion.description\"></div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    } @else {\r\n        <div class=\"row align-items-center justify-content-center h-100 w-100\">\r\n            <div class=\"learning-path-no-content-container\">\r\n                <h3 class=\"mb-3\" jhiTranslate=\"artemisApp.learningPath.generation.title\"></h3>\r\n                <div jhiTranslate=\"artemisApp.learningPath.generation.description\"></div>\r\n                <button\r\n                    (click)=\"startLearningPath()\"\r\n                    type=\"button\"\r\n                    class=\"mt-4 btn btn-primary\"\r\n                    id=\"start-learning-path-button\"\r\n                    jhiTranslate=\"artemisApp.learningPath.generation.generateButton\"\r\n                ></button>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["LearningPathNavigationService", "learningPathApiService", "inject", "LearningPathApiService", "alertService", "AlertService", "isLoading", "signal", "learningPathNavigation", "undefined", "currentLearningObject", "computed", "isCurrentLearningObjectCompleted", "loadLearningPathNavigation", "learningPathId", "__async", "set", "getLearningPathNavigation", "error", "loadRelativeLearningPathNavigation", "selectedLearningObject", "getRelativeLearningPathNavigation", "id", "type", "competencyId", "completeLearningPath", "predecessorLearningObject", "progress", "setCurrentLearningObjectCompletion", "completed", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "faLock", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate", "learningObject_r2", "name", "faCheckCircle", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectLearningObject", "\u0275\u0275template", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_For_2_Conditional_3_Template", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_For_2_Conditional_4_Template", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_For_2_Conditional_5_Template", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_For_2_Conditional_6_Template", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_For_2_Conditional_8_Template", "\u0275\u0275pureFunction2", "_c0", "tmp_12_0", "currentLearningObject", "id", "type", "unreleased", "\u0275\u0275conditional", "completed", "tmp_14_0", "nextLearningObjectOnPath", "\u0275$index_6_r4", "\u0275$count_6_r5", "\u0275\u0275repeaterCreate", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_ForEmpty_3_Template", "\u0275\u0275repeater", "learningObjects", "LearningPathNavOverviewLearningObjectsComponent", "alertService", "inject", "AlertService", "learningPathApiService", "LearningPathApiService", "learningPathNavigationService", "LearningPathNavigationService", "learningPathId", "input", "required", "competencyId", "currentCompetencyIdOnPath", "isLoading", "signal", "undefined", "computed", "find", "learningObject", "onLearningObjectSelected", "output", "constructor", "effect", "untracked", "loadLearningObjects", "__async", "set", "getLearningPathCompetencyLearningObjects", "error", "loadRelativeLearningPathNavigation", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "LearningPathNavOverviewLearningObjectsComponent_Conditional_2_Template", "LearningPathNavOverviewLearningObjectsComponent_Conditional_3_Template", "NgbAccordionModule", "FontAwesomeModule", "FaIconComponent", "TranslateDirective", "NgClass", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faCheckCircle", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectLearningObject", "learningPathId", "competency_r3", "id", "tmp_14_0", "currentCompetencyOnPath", "\u0275\u0275template", "LearningPathNavOverviewComponent_Conditional_18_For_4_Conditional_10_Template", "LearningPathNavOverviewComponent_Conditional_18_For_4_ng_template_17_Template", "currentCompetencyId", "\u0275\u0275textInterpolate", "title", "\u0275\u0275conditional", "masteryProgress", "\u0275\u0275repeaterCreate", "LearningPathNavOverviewComponent_Conditional_18_For_4_Template", "_forTrack0", "\u0275\u0275repeater", "competencies", "LearningPathNavOverviewComponent", "alertService", "inject", "AlertService", "modalService", "NgbModal", "learningPathApiService", "LearningPathApiService", "learningPathNavigationService", "LearningPathNavigationService", "input", "required", "competencyAccordion", "viewChild", "NgbAccordionDirective", "onLearningObjectSelected", "output", "isLoading", "signal", "computed", "currentLearningObject", "competencyId", "find", "competency", "constructor", "effect", "untracked", "loadCompetencies", "__async", "set", "getLearningPathCompetencies", "error", "emit", "collapseAll", "openCompetencyGraph", "CompetencyGraphModalComponent", "openCompetencyGraphModal", "undefined", "selectors", "viewQuery", "rf", "ctx", "LearningPathNavOverviewComponent_Conditional_17_Template", "LearningPathNavOverviewComponent_Conditional_18_Template", "FontAwesomeModule", "FaIconComponent", "NgbDropdownModule", "NgbAccordionModule", "NgbAccordionButton", "NgbAccordionItem", "NgbAccordionHeader", "NgbAccordionBody", "NgbAccordionCollapse", "LearningPathNavOverviewLearningObjectsComponent", "TranslateDirective", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r3", "faSpinner", "faChevronLeft", "\u0275\u0275elementStart", "\u0275\u0275listener", "predecessorLearningObject_r3", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectLearningObject", "\u0275\u0275template", "LearningPathNavComponent_Conditional_8_Conditional_7_Template", "LearningPathNavComponent_Conditional_8_Conditional_8_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "isLoadingPredecessor", "\u0275\u0275textInterpolate", "ctx", "name", "\u0275\u0275textInterpolate1", "tmp_2_0", "currentLearningObject", "_r5", "navOverview_r6", "\u0275\u0275reference", "close", "learningPathId", "faChevronRight", "successorLearningObject_r8", "_r7", "LearningPathNavComponent_Conditional_30_Conditional_12_Template", "LearningPathNavComponent_Conditional_30_Conditional_13_Template", "isLoadingSuccessor", "_r9", "completeLearningPath", "faFlag", "LearningPathNavComponent", "faChevronDown", "faCheckCircle", "learningPathNavigationService", "inject", "LearningPathNavigationService", "input", "required", "isLoading", "signal", "learningPathNavigation", "learningPathProgress", "computed", "progress", "predecessorLearningObject", "successorLearningObject", "isDropdownOpen", "constructor", "effect", "untracked", "loadLearningPathNavigation", "selectedLearningObject", "isSuccessor", "__async", "loadingSpinner", "set", "loadRelativeLearningPathNavigation", "setIsDropdownOpen", "isOpen", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "LearningPathNavComponent_Conditional_8_Template", "$event", "i0", "_r1", "LearningPathNavComponent_Conditional_16_Template", "LearningPathNavComponent_Conditional_17_Template", "LearningPathNavComponent_Conditional_23_Template", "LearningPathNavComponent_Conditional_30_Template", "LearningPathNavComponent_Conditional_31_Template", "tmp_1_0", "tmp_5_0", "\u0275\u0275styleProp", "NgbDropdownModule", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbAccordionModule", "FontAwesomeModule", "FaIconComponent", "LearningPathNavOverviewComponent", "TranslateDirective", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setLearningObjectCompletion", "\u0275\u0275advance", "\u0275\u0275property", "lectureUnit_r3", "_r4", "_r5", "_r6", "lecture", "\u0275\u0275template", "LearningPathLectureUnitComponent_Conditional_1_Case_5_Template", "LearningPathLectureUnitComponent_Conditional_1_Case_6_Template", "LearningPathLectureUnitComponent_Conditional_1_Case_7_Template", "LearningPathLectureUnitComponent_Conditional_1_Case_8_Template", "LearningPathLectureUnitComponent_Conditional_1_Case_9_Template", "LearningPathLectureUnitComponent_Conditional_1_Conditional_12_Template", "\u0275\u0275conditional", "tmp_2_0", "ctx", "type", "LectureUnitType", "VIDEO", "TEXT", "ATTACHMENT", "EXERCISE", "ONLINE", "isCommunicationEnabled", "LearningPathLectureUnitComponent", "lectureUnitService", "inject", "LectureUnitService", "learningPathNavigationService", "LearningPathNavigationService", "alertService", "AlertService", "lectureUnitId", "input", "required", "isLoading", "signal", "lectureUnit", "undefined", "computed", "course", "constructor", "effect", "untracked", "loadLectureUnit", "__async", "set", "lastValueFrom", "getLectureUnitById", "error", "completionEvent", "completeLectureUnit", "completed", "setCurrentLearningObjectCompletion", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "LearningPathLectureUnitComponent_Conditional_0_Template", "LearningPathLectureUnitComponent_Conditional_1_Template", "tmp_1_0", "VideoUnitComponent", "TextUnitComponent", "AttachmentUnitComponent", "OnlineUnitComponent", "DiscussionSectionComponent", "TranslateDirective", "ExerciseUnitComponent", "encapsulation", "changeDetection", "LearningPathExerciseComponent", "courseId", "input", "required", "exerciseId", "viewContainerRef", "inject", "ViewContainerRef", "constructor", "effect", "clear", "exerciseComponent", "createComponent", "CourseExerciseDetailsComponent", "instance", "learningPathMode", "selectors", "inputs", "ngContentSelectors", "_c0", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275projection", "\u0275\u0275text", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "currentLearningObject", "id", "courseId", "\u0275\u0275template", "LearningPathStudentPageComponent_Conditional_3_Conditional_5_Template", "LearningPathStudentPageComponent_Conditional_3_Conditional_6_Template", "LearningPathStudentPageComponent_Conditional_3_Conditional_7_Template", "learningPath", "\u0275\u0275conditional", "tmp_2_0", "type", "LearningObjectType", "LECTURE", "EXERCISE", "isLearningPathNavigationLoading", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "startLearningPath", "LearningPathStudentPageComponent", "learningApiService", "inject", "LearningPathApiService", "learningPathNavigationService", "LearningPathNavigationService", "alertService", "AlertService", "activatedRoute", "ActivatedRoute", "isLearningPathLoading", "signal", "undefined", "toSignal", "parent", "params", "pipe", "map", "Number", "requireSync", "isLoading", "constructor", "effect", "untracked", "loadLearningPath", "__async", "set", "getLearningPathForCurrentUser", "error", "status", "onError", "generateLearningPathForCurrentUser", "startLearningPathForCurrentUser", "update", "__spreadProps", "__spreadValues", "startedByStudent", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "LearningPathStudentPageComponent_Conditional_2_Template", "LearningPathStudentPageComponent_Conditional_3_Template", "LearningPathStudentPageComponent_Conditional_4_Template", "LearningPathNavComponent", "LearningPathLectureUnitComponent", "LearningPathExerciseComponent", "TranslateDirective", "styles", "changeDetection"]
}
