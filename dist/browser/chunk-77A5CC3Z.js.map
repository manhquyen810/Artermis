{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/example-submission.model.ts", "src/main/webapp/app/exercises/shared/example-submission/example-submission-assess-command.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { TutorParticipation } from 'app/entities/participation/tutor-participation.model';\r\n\r\nexport class ExampleSubmission implements BaseEntity {\r\n    public id?: number;\r\n\r\n    public usedForTutorial?: boolean;\r\n    public exercise?: Exercise;\r\n    public submission?: Submission;\r\n    public tutorParticipations?: TutorParticipation[];\r\n    public assessmentExplanation?: string;\r\n}\r\n\r\nexport enum ExampleSubmissionMode {\r\n    READ_AND_CONFIRM = 'readConfirm',\r\n    ASSESS_CORRECTLY = 'assessCorrectly',\r\n}\r\n", "import { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { FeedbackCorrectionError } from 'app/entities/feedback.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { TutorParticipationService } from '../dashboards/tutor/tutor-participation.service';\r\nimport { ExampleSubmission } from 'app/entities/example-submission.model';\r\n\r\nexport interface FeedbackMarker {\r\n    markWrongFeedback(errors: FeedbackCorrectionError[]): void;\r\n    markAllFeedbackToCorrect(): void;\r\n}\r\n\r\nexport class ExampleSubmissionAssessCommand {\r\n    constructor(\r\n        private tutorParticipationService: TutorParticipationService,\r\n        private alertService: AlertService,\r\n        private feedbackMarker: FeedbackMarker,\r\n    ) {}\r\n\r\n    assessExampleSubmission(exampleSubmission: ExampleSubmission, exerciseId: number) {\r\n        this.tutorParticipationService.assessExampleSubmission(exampleSubmission, exerciseId).subscribe({\r\n            next: () => this.onSuccess(),\r\n            error: (error: HttpErrorResponse) => this.onFailure(error),\r\n        });\r\n    }\r\n\r\n    private onSuccess() {\r\n        this.feedbackMarker.markAllFeedbackToCorrect();\r\n        this.alertService.success('artemisApp.exampleSubmission.correctTutorAssessment');\r\n    }\r\n\r\n    private onFailure(error: HttpErrorResponse) {\r\n        const errorType = error.headers.get('x-artemisapp-error');\r\n\r\n        if (errorType === 'error.invalid_assessment') {\r\n            this.feedbackMarker.markAllFeedbackToCorrect();\r\n\r\n            // Mark all wrongly made feedbacks accordingly.\r\n            const correctionErrors: FeedbackCorrectionError[] = JSON.parse(error['error']['title'])['errors'];\r\n            this.feedbackMarker.markWrongFeedback(correctionErrors);\r\n\r\n            const msg = correctionErrors.length === 0 ? 'artemisApp.exampleSubmission.submissionValidation.missing' : 'artemisApp.exampleSubmission.submissionValidation.wrong';\r\n            this.alertService.error(msg, { mistakeCount: correctionErrors.length });\r\n        } else {\r\n            onError(this.alertService, error);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "wCAKM,IAAOA,EAAP,KAAwB,CACnBC,GAEAC,gBACAC,SACAC,WACAC,oBACAC,uBAGCC,EAAZ,SAAYA,EAAqB,CAC7BA,OAAAA,EAAA,iBAAA,cACAA,EAAA,iBAAA,kBAFQA,CAGZ,EAHYA,GAAqB,CAAA,CAAA,ECH3B,IAAOC,EAAP,KAAqC,CAE3BC,0BACAC,aACAC,eAHZC,YACYH,EACAC,EACAC,EAA8B,CAF9B,KAAAF,0BAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,eAAAA,CACT,CAEHE,wBAAwBC,EAAsCC,EAAkB,CAC5E,KAAKN,0BAA0BI,wBAAwBC,EAAmBC,CAAU,EAAEC,UAAU,CAC5FC,KAAMA,IAAM,KAAKC,UAAS,EAC1BC,MAAQA,GAA6B,KAAKC,UAAUD,CAAK,EAC5D,CACL,CAEQD,WAAS,CACb,KAAKP,eAAeU,yBAAwB,EAC5C,KAAKX,aAAaY,QAAQ,qDAAqD,CACnF,CAEQF,UAAUD,EAAwB,CAGtC,GAFkBA,EAAMI,QAAQC,IAAI,oBAAoB,IAEtC,2BAA4B,CAC1C,KAAKb,eAAeU,yBAAwB,EAG5C,IAAMI,EAA8CC,KAAKC,MAAMR,EAAM,MAAS,KAAQ,EAAE,OACxF,KAAKR,eAAeiB,kBAAkBH,CAAgB,EAEtD,IAAMI,EAAMJ,EAAiBK,SAAW,EAAI,4DAA8D,0DAC1G,KAAKpB,aAAaS,MAAMU,EAAK,CAAEE,aAAcN,EAAiBK,MAAM,CAAE,CAC1E,MACIE,EAAQ,KAAKtB,aAAcS,CAAK,CAExC",
  "names": ["ExampleSubmission", "id", "usedForTutorial", "exercise", "submission", "tutorParticipations", "assessmentExplanation", "ExampleSubmissionMode", "ExampleSubmissionAssessCommand", "tutorParticipationService", "alertService", "feedbackMarker", "constructor", "assessExampleSubmission", "exampleSubmission", "exerciseId", "subscribe", "next", "onSuccess", "error", "onFailure", "markAllFeedbackToCorrect", "success", "headers", "get", "correctionErrors", "JSON", "parse", "markWrongFeedback", "msg", "length", "mistakeCount", "onError"]
}
