{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/coffee/coffee.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: [\"###\", \"###\"],\n    lineComment: \"#\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".coffee\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: [\"and\", \"or\", \"is\", \"isnt\", \"not\", \"on\", \"yes\", \"@\", \"no\", \"off\", \"true\", \"false\", \"null\", \"this\", \"new\", \"delete\", \"typeof\", \"in\", \"instanceof\", \"return\", \"throw\", \"break\", \"continue\", \"debugger\", \"if\", \"else\", \"switch\", \"for\", \"while\", \"do\", \"try\", \"catch\", \"finally\", \"class\", \"extends\", \"super\", \"undefined\", \"then\", \"unless\", \"until\", \"loop\", \"of\", \"by\", \"when\"],\n  // we include these common regular expressions\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/\\@[a-zA-Z_]\\w*/, \"variable.predefined\"], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        this: \"variable.predefined\",\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"\"\n      }\n    }],\n    // whitespace\n    [/[ \\t\\r\\n]+/, \"\"],\n    // Comments\n    [/###/, \"comment\", \"@comment\"], [/#.*$/, \"comment\"],\n    // regular expressions\n    [\"///\", {\n      token: \"regexp\",\n      next: \"@hereregexp\"\n    }], [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]], [/(\\()(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]], [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\=)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\[)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]], [/(\\!)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\&)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\|)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\?)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\{)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]], [/(\\;)(\\s*)(@regEx)/, [\"\", \"\", \"regexp\"]],\n    // delimiters\n    [/}/, {\n      cases: {\n        \"$S2==interpolatedstring\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"@brackets\"\n      }\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, \"delimiter\"],\n    // numbers\n    [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/0[0-7]+(?!\\d)/, \"number.octal\"], [/\\d+/, \"number\"],\n    // delimiter: after number because of .\\d floats\n    [/[,.]/, \"delimiter\"],\n    // strings:\n    [/\"\"\"/, \"string\", '@herestring.\"\"\"'], [/'''/, \"string\", \"@herestring.'''\"], [/\"/, {\n      cases: {\n        \"@eos\": \"string\",\n        \"@default\": {\n          token: \"string\",\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        \"@eos\": \"string\",\n        \"@default\": {\n          token: \"string\",\n          next: \"@string.'\"\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\./, \"string.escape.invalid\"], [/\\./, \"string.escape.invalid\"], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: \"string\",\n          next: \"root.interpolatedstring\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/[\"']/, {\n      cases: {\n        \"$#==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/#/, \"string\"]],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        \"$1==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/[^#\\\\'\"]+/, \"string\"], [/['\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\./, \"string.escape.invalid\"], [/#{/, {\n      token: \"string.quote\",\n      next: \"root.interpolatedstring\"\n    }], [/#/, \"string\"]],\n    comment: [[/[^#]+/, \"comment\"], [/###/, \"comment\", \"@pop\"], [/#/, \"comment\"]],\n    hereregexp: [[/[^\\\\\\/#]+/, \"regexp\"], [/\\\\./, \"regexp\"], [/#.*$/, \"comment\"], [\"///[igm]*\", {\n      token: \"regexp\",\n      next: \"@pop\"\n    }], [/\\//, \"regexp\"]]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["conf","language"],"x_google_ignoreList":[0]}