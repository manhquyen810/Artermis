{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/pipes/html-for-markdown.pipe.ts"],
  "sourcesContent": ["import { Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport type { PluginSimple } from 'markdown-it';\r\n\r\n@Pipe({\r\n    name: 'htmlForMarkdown',\r\n})\r\nexport class HtmlForMarkdownPipe implements PipeTransform {\r\n    private readonly markdownService = inject(ArtemisMarkdownService);\r\n\r\n    /**\r\n     * Converts markdown into html, sanitizes it and then declares it as safe to bypass further security.\r\n     * @param {string} markdown the original markdown text\r\n     * @param {PluginSimple[]} extensions to use for markdown parsing\r\n     * @param {string[]} allowedHtmlTags to allow during sanitization\r\n     * @param {string[]} allowedHtmlAttributes to allow during sanitization\r\n     * @returns {string} the resulting html as a SafeHtml object that can be inserted into the angular template\r\n     */\r\n    transform(\r\n        markdown?: string,\r\n        extensions: PluginSimple[] = [],\r\n        allowedHtmlTags: string[] | undefined = undefined,\r\n        allowedHtmlAttributes: string[] | undefined = undefined,\r\n    ): SafeHtml {\r\n        return this.markdownService.safeHtmlForMarkdown(markdown, extensions, allowedHtmlTags, allowedHtmlAttributes);\r\n    }\r\n}\r\n"],
  "mappings": "yFAQA,IAAaA,GAAmB,IAAA,CAA1B,MAAOA,CAAmB,CACXC,gBAAkBC,EAAOC,CAAsB,EAUhEC,UACIC,EACAC,EAA6B,CAAA,EAC7BC,EAAwCC,OACxCC,EAA8CD,OAAS,CAEvD,OAAO,KAAKP,gBAAgBS,oBAAoBL,EAAUC,EAAYC,EAAiBE,CAAqB,CAChH,4CAlBST,EAAmB,mDAAnBA,EAAmBW,KAAA,EAAA,CAAA,SAAnBX,CAAmB,GAAA",
  "names": ["HtmlForMarkdownPipe", "markdownService", "inject", "ArtemisMarkdownService", "transform", "markdown", "extensions", "allowedHtmlTags", "undefined", "allowedHtmlAttributes", "safeHtmlForMarkdown", "pure"]
}
