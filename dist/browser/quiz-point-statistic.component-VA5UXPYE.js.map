{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/statistics/quiz-point-statistic/quiz-point-statistic.component.ts", "src/main/webapp/app/exercises/quiz/manage/statistics/quiz-point-statistic/quiz-point-statistic.component.html"],
  "sourcesContent": ["import { ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AbstractQuizStatisticComponent } from 'app/exercises/quiz/manage/statistics/quiz-statistics';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { PointCounter } from 'app/entities/quiz/point-counter.model';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { QuizPointStatistic } from 'app/entities/quiz/quiz-point-statistic.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { blueColor } from 'app/exercises/quiz/manage/statistics/question-statistic.component';\r\nimport { UI_RELOAD_TIME } from 'app/shared/constants/exercise-exam-constants';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { calculateMaxScore } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistics.utils';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { QuizStatisticsFooterComponent } from '../quiz-statistics-footer/quiz-statistics-footer.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-point-statistic',\r\n    templateUrl: './quiz-point-statistic.component.html',\r\n    styleUrls: ['./quiz-point-statistic.component.scss', '../../../../../shared/chart/vertical-bar-chart.scss'],\r\n    imports: [FaIconComponent, TranslateDirective, BarChartModule, QuizStatisticsFooterComponent, ArtemisTranslatePipe],\r\n})\r\nexport class QuizPointStatisticComponent extends AbstractQuizStatisticComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private accountService = inject(AccountService);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private websocketService = inject(WebsocketService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    readonly round = round;\r\n\r\n    quizExercise: QuizExercise;\r\n    quizPointStatistic: QuizPointStatistic;\r\n\r\n    labels: string[] = [];\r\n\r\n    label: string[] = [];\r\n    backgroundColor: string[] = [];\r\n\r\n    maxScore: number;\r\n    websocketChannelForData: string;\r\n    quizExerciseChannel: string;\r\n\r\n    // variables for ngx-charts\r\n    legend = false;\r\n    showXAxisLabel = true;\r\n    showYAxisLabel = true;\r\n    xAxis = true;\r\n    yAxis = true;\r\n    roundEdges = true;\r\n    showDataLabel = true;\r\n    height = 500;\r\n    animations = false;\r\n\r\n    // timer\r\n    waitingForQuizStart = false;\r\n    remainingTimeText = '?';\r\n    remainingTimeSeconds = 0;\r\n    interval: any;\r\n\r\n    // Icons\r\n    faSync = faSync;\r\n\r\n    ngOnInit() {\r\n        this.translateService.onLangChange.subscribe(() => {\r\n            this.setAxisLabels('showStatistic.quizPointStatistic.xAxes', 'showStatistic.quizPointStatistic.yAxes');\r\n        });\r\n        this.route.params.subscribe((params) => {\r\n            // use different REST-call if the User is a Student\r\n            if (this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n                this.quizExerciseService.find(params['exerciseId']).subscribe((res) => {\r\n                    this.loadQuizSuccess(res.body!);\r\n                });\r\n            }\r\n\r\n            // subscribe websocket for new statistical data\r\n            this.websocketChannelForData = '/topic/statistic/' + params['exerciseId'];\r\n            this.websocketService.subscribe(this.websocketChannelForData);\r\n\r\n            if (!this.quizExerciseChannel) {\r\n                this.quizExerciseChannel = '/topic/courses/' + params['courseId'] + '/quizExercises';\r\n\r\n                // quizExercise channel => react to changes made to quizExercise (e.g. start date)\r\n                this.websocketService.subscribe(this.quizExerciseChannel);\r\n                this.websocketService.receive(this.quizExerciseChannel).subscribe((quiz) => {\r\n                    if (this.waitingForQuizStart && params['exerciseId'] === quiz.id) {\r\n                        this.loadQuizSuccess(quiz);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // ask for new Data if the websocket for new statistical data was notified\r\n            this.websocketService.receive(this.websocketChannelForData).subscribe((quiz) => {\r\n                this.loadNewData(quiz.quizPointStatistic);\r\n            });\r\n        });\r\n\r\n        // update displayed times in UI regularly\r\n        this.interval = setInterval(() => {\r\n            this.updateDisplayedTimes();\r\n        }, UI_RELOAD_TIME);\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * updates all displayed (relative) times in the UI\r\n     */\r\n    updateDisplayedTimes() {\r\n        const translationBasePath = 'artemisApp.showStatistic.';\r\n        // update remaining time\r\n        if (this.quizExercise && this.quizExercise.dueDate) {\r\n            const endDate = this.quizExercise.dueDate;\r\n            if (endDate.isAfter(this.serverDateService.now())) {\r\n                // quiz is still running => calculate remaining seconds and generate text based on that\r\n                this.remainingTimeSeconds = endDate.diff(this.serverDateService.now(), 'seconds');\r\n                this.remainingTimeText = this.relativeTimeText(this.remainingTimeSeconds);\r\n            } else {\r\n                // quiz is over => set remaining seconds to negative, to deactivate 'Submit' button\r\n                this.remainingTimeSeconds = -1;\r\n                this.remainingTimeText = this.translateService.instant(translationBasePath + 'quizHasEnded');\r\n            }\r\n        } else {\r\n            // remaining time is unknown => Set remaining seconds to 0, to keep 'Submit' button enabled\r\n            this.remainingTimeSeconds = 0;\r\n            this.remainingTimeText = '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Express the given timespan as humanized text\r\n     *\r\n     * @param remainingTimeSeconds the amount of seconds to display\r\n     * @return humanized text for the given amount of seconds\r\n     */\r\n    relativeTimeText(remainingTimeSeconds: number) {\r\n        if (remainingTimeSeconds > 210) {\r\n            return Math.ceil(remainingTimeSeconds / 60) + ' min';\r\n        } else if (remainingTimeSeconds > 59) {\r\n            return Math.floor(remainingTimeSeconds / 60) + ' min ' + (remainingTimeSeconds % 60) + ' s';\r\n        } else {\r\n            return remainingTimeSeconds + ' s';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        clearInterval(this.interval);\r\n        this.websocketService.unsubscribe(this.websocketChannelForData);\r\n    }\r\n\r\n    /**\r\n     * load the new quizPointStatistic from the server if the Websocket has been notified\r\n     *\r\n     * @param statistic the new quizPointStatistic from the server with the new Data.\r\n     */\r\n    loadNewData(statistic: QuizPointStatistic) {\r\n        // if the Student finds a way to the Website\r\n        //      -> the Student will be sent back to Courses\r\n        if (!this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n            this.router.navigate(['courses']);\r\n        }\r\n        this.quizPointStatistic = statistic;\r\n        this.loadData();\r\n    }\r\n\r\n    /**\r\n     * This functions loads the Quiz, which is necessary to build the Web-Template\r\n     *\r\n     * @param quizExercise the quizExercise, which this quiz-point-statistic presents.\r\n     */\r\n    loadQuizSuccess(quizExercise: QuizExercise) {\r\n        // if the Student finds a way to the Website\r\n        //      -> the Student will be sent back to Courses\r\n        if (!this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n            this.router.navigate(['courses']);\r\n        }\r\n        this.quizExercise = quizExercise;\r\n        this.waitingForQuizStart = !this.quizExercise.quizStarted;\r\n        this.quizPointStatistic = this.quizExercise.quizPointStatistic!;\r\n        this.maxScore = calculateMaxScore(this.quizExercise);\r\n\r\n        this.loadData();\r\n    }\r\n\r\n    /**\r\n     * load the Data from the Json-entity to the chart: myChart\r\n     */\r\n    loadData() {\r\n        // reset old data\r\n        this.label = [];\r\n        this.backgroundColor = [];\r\n        this.ratedData = [];\r\n        this.unratedData = [];\r\n        // set data based on the pointCounters\r\n        this.order(this.quizPointStatistic.pointCounters!).forEach((pointCounter, index) => {\r\n            /*\r\n            The label represents the value range covered by the corresponding bar.\r\n            As we round the individual student scores to integers for the statistic,\r\n            each bar covers the range from integer - 0.5 to integer + 0.5, the lower border is always included.\r\n            Ex.: integer 2: chart bar summarizes all values between [1.5 - 2.5)\r\n            We additionally have to make sure that the range is limited by the maximum and minimum reachable points in the quiz\r\n            (no negative points are achievable and the maximum points are defined by the quiz itself)\r\n            Lastly, the last bar in the chart also covers the maximum points, that is why we change the upper border notation in this case from ')' to ']'\r\n             */\r\n            let label = '[' + Math.max(pointCounter.points! - 0.5, 0) + ' - ' + Math.min(pointCounter.points! + 0.5, this.maxScore);\r\n            label += index !== this.quizPointStatistic.pointCounters!.length - 1 ? ')' : ']';\r\n            this.label.push(label);\r\n            this.ratedData.push(pointCounter.ratedCounter!);\r\n            this.unratedData.push(pointCounter.unRatedCounter!);\r\n            this.backgroundColor.push(blueColor);\r\n        });\r\n\r\n        this.chartLabels = this.label;\r\n        this.ngxColor.domain = this.backgroundColor;\r\n\r\n        // load data into the chart\r\n        this.loadDataInDiagram();\r\n    }\r\n\r\n    /**\r\n     * check if the rated or unrated\r\n     * load the rated or unrated data into the diagram\r\n     */\r\n    loadDataInDiagram(): void {\r\n        this.setData(this.quizPointStatistic);\r\n        this.pushDataToNgxEntry(this.changeDetector);\r\n\r\n        // add Axes-labels based on selected language\r\n        this.setAxisLabels('artemisApp.showStatistic.quizPointStatistic.xAxes', 'artemisApp.showStatistic.quizPointStatistic.yAxes');\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Recalculate the complete statistic on the server in case something went wrong with it\r\n     *\r\n     */\r\n    recalculate() {\r\n        this.quizExerciseService.recalculate(this.quizExercise.id!).subscribe((res) => {\r\n            this.loadQuizSuccess(res.body!);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * order the point cursors ascending\r\n     */\r\n    order(pointCursors: Array<PointCounter>) {\r\n        // TODO: use sorting service\r\n        return pointCursors.sort((a: PointCounter, b: PointCounter) => {\r\n            if (a.points! < b.points!) {\r\n                return -1;\r\n            }\r\n            if (a.points! > b.points!) {\r\n                return 1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n", "@if (quizExercise) {\r\n    <div class=\"row\">\r\n        <div class=\"col-md-8 offset-md-2 text-center\">\r\n            <h3>{{ quizExercise.title }}</h3>\r\n            @if (quizExercise.isAtLeastTutor) {\r\n                <button class=\"btn btn-primary btn-sm float-end\" (click)=\"recalculate()\">\r\n                    <fa-icon [icon]=\"faSync\" [fixedWidth]=\"true\" />&nbsp;{{ 'artemisApp.showStatistic.recalculateStatistics' | artemisTranslate }}\r\n                </button>\r\n            }\r\n            <div #containerRef class=\"text-center\">\r\n                <p class=\"text-start\" class=\"chart-title-text\">\r\n                    <span jhiTranslate=\"artemisApp.showStatistic.quizPointStatistic.maxScore\"></span><span>{{ maxScore }}</span>\r\n                </p>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-7 text-start\">\r\n                        <p class=\"chart-title-text\">\r\n                            @if (rated) {\r\n                                <span jhiTranslate=\"artemisApp.showStatistic.quizPointStatistic.titleRated\"></span>\r\n                            }\r\n                            @if (!rated) {\r\n                                <span jhiTranslate=\"artemisApp.showStatistic.quizPointStatistic.titleUnrated\"></span>\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"col-md-5 text-end\">\r\n                        <p class=\"chart-title-text\">\r\n                            <span>{{ participants }} </span><span jhiTranslate=\"artemisApp.showStatistic.participants\"></span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <ngx-charts-bar-vertical\r\n                    [view]=\"[containerRef.offsetWidth, height]\"\r\n                    [results]=\"ngxData\"\r\n                    [scheme]=\"ngxColor\"\r\n                    [xAxisLabel]=\"xAxisLabel\"\r\n                    [yAxisLabel]=\"yAxisLabel\"\r\n                    [legend]=\"false\"\r\n                    [showXAxisLabel]=\"true\"\r\n                    [showYAxisLabel]=\"true\"\r\n                    [xAxis]=\"true\"\r\n                    [yAxis]=\"true\"\r\n                    [yScaleMax]=\"maxScale\"\r\n                    [roundEdges]=\"false\"\r\n                    [showDataLabel]=\"true\"\r\n                    [dataLabelFormatting]=\"bindFormatting\"\r\n                    [tooltipDisabled]=\"true\"\r\n                />\r\n                <div class=\"text-center button-row\">\r\n                    <button (click)=\"switchRated()\" type=\"button\" class=\"btn btn-primary\">\r\n                        <fa-icon [icon]=\"faSync\" />&nbsp;\r\n                        @if (rated) {\r\n                            <span jhiTranslate=\"artemisApp.showStatistic.switchToUnrated\"></span>\r\n                        }\r\n                        @if (!rated) {\r\n                            <span jhiTranslate=\"artemisApp.showStatistic.switchToRated\"></span>\r\n                        }\r\n                    </button>\r\n                    <p>&nbsp;</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <jhi-quiz-statistics-footer [isQuizPointStatistic]=\"true\" />\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "recalculate", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faSync", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275template", "QuizPointStatisticComponent_Conditional_0_Conditional_8_Template", "QuizPointStatisticComponent_Conditional_0_Conditional_25_Template", "QuizPointStatisticComponent_Conditional_0_Conditional_26_Template", "_r1", "switchRated", "QuizPointStatisticComponent_Conditional_0_Conditional_48_Template", "QuizPointStatisticComponent_Conditional_0_Conditional_49_Template", "\u0275\u0275textInterpolate", "quizExercise", "title", "\u0275\u0275conditional", "isAtLeastTutor", "maxScore", "rated", "participants", "\u0275\u0275pureFunction2", "_c0", "containerRef_r4", "offsetWidth", "height", "ngxData", "ngxColor", "xAxisLabel", "yAxisLabel", "maxScale", "bindFormatting", "QuizPointStatisticComponent", "AbstractQuizStatisticComponent", "route", "inject", "ActivatedRoute", "router", "Router", "accountService", "AccountService", "quizExerciseService", "QuizExerciseService", "websocketService", "WebsocketService", "changeDetector", "ChangeDetectorRef", "serverDateService", "ArtemisServerDateService", "round", "quizPointStatistic", "labels", "label", "backgroundColor", "websocketChannelForData", "quizExerciseChannel", "legend", "showXAxisLabel", "showYAxisLabel", "xAxis", "yAxis", "roundEdges", "showDataLabel", "animations", "waitingForQuizStart", "remainingTimeText", "remainingTimeSeconds", "interval", "ngOnInit", "translateService", "onLangChange", "subscribe", "setAxisLabels", "params", "hasAnyAuthorityDirect", "Authority", "ADMIN", "INSTRUCTOR", "EDITOR", "TA", "find", "res", "loadQuizSuccess", "body", "receive", "quiz", "id", "loadNewData", "setInterval", "updateDisplayedTimes", "UI_RELOAD_TIME", "detectChanges", "translationBasePath", "dueDate", "endDate", "isAfter", "now", "diff", "relativeTimeText", "instant", "Math", "ceil", "floor", "ngOnDestroy", "clearInterval", "unsubscribe", "statistic", "navigate", "loadData", "quizStarted", "calculateMaxScore", "ratedData", "unratedData", "order", "pointCounters", "forEach", "pointCounter", "index", "max", "points", "min", "length", "push", "ratedCounter", "unRatedCounter", "blueColor", "chartLabels", "domain", "loadDataInDiagram", "setData", "pushDataToNgxEntry", "pointCursors", "sort", "a", "b", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "QuizPointStatisticComponent_Conditional_0_Template", "FaIconComponent", "TranslateDirective", "BarChartModule", "BarVerticalComponent", "QuizStatisticsFooterComponent", "ArtemisTranslatePipe", "styles"]
}
