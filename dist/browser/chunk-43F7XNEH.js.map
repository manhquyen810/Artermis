{
  "version": 3,
  "sources": ["src/main/webapp/app/grading-system/grading-key-overview/grading-key-helper.ts", "src/main/webapp/app/grading-system/grading-key-overview/grading-key/grading-key-table.component.ts", "src/main/webapp/app/grading-system/grading-key-overview/grading-key/grading-key-table.component.html"],
  "sourcesContent": ["import { findParamInRouteHierarchy } from 'app/utils/navigation.utils';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nexport type GradingKeyUrlParams = {\r\n    courseId: number;\r\n    examId?: number;\r\n    isExam: boolean;\r\n    forBonus: boolean;\r\n    studentGradeOrBonusPointsOrGradeBonus?: string;\r\n};\r\n\r\nexport function loadGradingKeyUrlParams(route: ActivatedRoute): GradingKeyUrlParams {\r\n    // Note: This component is used in multiple routes, so it can be lazy loaded. Also, courseId and examId can be\r\n    // found on different levels of hierarchy tree (on the same level or a parent or a grandparent, etc.).\r\n    const courseId = Number(findParamInRouteHierarchy(route, 'courseId'));\r\n    let examId = undefined;\r\n    let isExam = false;\r\n\r\n    const examIdParam = findParamInRouteHierarchy(route, 'examId');\r\n    if (examIdParam) {\r\n        examId = Number(examIdParam);\r\n        isExam = true;\r\n    }\r\n    const forBonus = !!route.snapshot.data['forBonus'];\r\n\r\n    /** If needed queryParam is available, it is available on {@link GradingKeyOverviewComponent} so no need to traverse the hierarchy like params above. */\r\n    const studentGradeOrBonusPointsOrGradeBonus = route.snapshot.queryParams['grade'];\r\n\r\n    return {\r\n        courseId,\r\n        examId,\r\n        forBonus,\r\n        isExam,\r\n        studentGradeOrBonusPointsOrGradeBonus: studentGradeOrBonusPointsOrGradeBonus,\r\n    };\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { GradeStep, GradeStepsDTO } from 'app/entities/grade-step.model';\r\nimport { GradeType, GradingScale } from 'app/entities/grading-scale.model';\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { GradeEditMode } from 'app/grading-system/base-grading-system/base-grading-system.component';\r\nimport { BonusService } from 'app/grading-system/bonus/bonus.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { ScoresStorageService } from 'app/course/course-scores/scores-storage.service';\r\nimport { ScoreType } from 'app/shared/constants/score-type.constants';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { loadGradingKeyUrlParams } from 'app/grading-system/grading-key-overview/grading-key-helper';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { GradeStepBoundsPipe } from 'app/shared/pipes/grade-step-bounds.pipe';\r\nimport { SafeHtmlPipe } from 'app/shared/pipes/safe-html.pipe';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\n@Component({\r\n    selector: 'jhi-grade-key-table',\r\n    templateUrl: './grading-key-table.component.html',\r\n    styleUrls: ['../grading-key-overview.scss'],\r\n    imports: [TranslateDirective, ArtemisTranslatePipe, GradeStepBoundsPipe, SafeHtmlPipe, HelpIconComponent],\r\n})\r\nexport class GradingKeyTableComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private gradingSystemService = inject(GradingSystemService);\r\n    private bonusService = inject(BonusService);\r\n    private scoresStorageService = inject(ScoresStorageService);\r\n\r\n    readonly faChevronLeft = faChevronLeft;\r\n\r\n    readonly GradeEditMode = GradeEditMode;\r\n\r\n    @Input() studentGradeOrBonusPointsOrGradeBonus?: string;\r\n    @Input() forBonus?: boolean;\r\n\r\n    plagiarismGrade: string;\r\n    noParticipationGrade: string;\r\n\r\n    isExam = false;\r\n\r\n    courseId?: number;\r\n    examId?: number;\r\n\r\n    title?: string;\r\n    gradeSteps: GradeStep[] = [];\r\n    isBonus = false;\r\n\r\n    hasPointsSet = false;\r\n\r\n    ngOnInit(): void {\r\n        const { courseId, examId, forBonus, isExam, studentGradeOrBonusPointsOrGradeBonus } = loadGradingKeyUrlParams(this.route);\r\n        this.courseId = courseId;\r\n        this.examId = examId;\r\n        this.forBonus = this.forBonus || forBonus;\r\n        this.isExam = isExam;\r\n        this.studentGradeOrBonusPointsOrGradeBonus = this.studentGradeOrBonusPointsOrGradeBonus || studentGradeOrBonusPointsOrGradeBonus;\r\n\r\n        this.findGradeSteps(this.courseId, this.examId).subscribe((gradeSteps) => {\r\n            if (gradeSteps) {\r\n                this.title = gradeSteps.title;\r\n                this.isBonus = gradeSteps.gradeType === GradeType.BONUS;\r\n                this.gradeSteps = this.gradingSystemService.sortGradeSteps(gradeSteps.gradeSteps);\r\n                this.plagiarismGrade = gradeSteps.plagiarismGrade;\r\n                this.noParticipationGrade = gradeSteps.noParticipationGrade;\r\n                if (gradeSteps.maxPoints !== undefined) {\r\n                    if (!this.isExam) {\r\n                        let maxPoints = 0;\r\n                        const totalScoresForCourse = this.scoresStorageService.getStoredTotalScores(this.courseId!);\r\n                        if (totalScoresForCourse) {\r\n                            maxPoints = totalScoresForCourse[ScoreType.REACHABLE_POINTS];\r\n                        }\r\n                        this.gradingSystemService.setGradePoints(this.gradeSteps, maxPoints);\r\n                    } else {\r\n                        // for exams the max points filed should equal the total max points (otherwise exams can't be started)\r\n                        this.gradingSystemService.setGradePoints(this.gradeSteps, gradeSteps.maxPoints!);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.hasPointsSet = this.gradingSystemService.hasPointsSet(this.gradeSteps);\r\n    }\r\n\r\n    private findGradeSteps(courseId: number, examId?: number): Observable<GradeStepsDTO | undefined> {\r\n        if (!this.forBonus) {\r\n            return this.gradingSystemService.findGradeSteps(courseId, examId);\r\n        } else {\r\n            // examId must be present if forBonus is true.\r\n            return this.bonusService.findBonusForExam(courseId, examId!, true).pipe(\r\n                map((bonusResponse) => {\r\n                    const source = bonusResponse.body?.sourceGradingScale;\r\n                    if (!source) {\r\n                        return undefined;\r\n                    }\r\n                    return {\r\n                        title: this.gradingSystemService.getGradingScaleTitle(source)!,\r\n                        gradeType: source.gradeType,\r\n                        gradeSteps: source.gradeSteps,\r\n                        maxPoints: this.gradingSystemService.getGradingScaleMaxPoints(source),\r\n                        plagiarismGrade: source.plagiarismGrade || GradingScale.DEFAULT_PLAGIARISM_GRADE,\r\n                        noParticipationGrade: source.noParticipationGrade || GradingScale.DEFAULT_NO_PARTICIPATION_GRADE,\r\n                        presentationsNumber: source.presentationsNumber,\r\n                        presentationsWeight: source.presentationsWeight,\r\n                    };\r\n                }),\r\n            );\r\n        }\r\n    }\r\n}\r\n", "<div>\r\n    <div>\r\n        <table class=\"table table-striped w-auto mx-auto\">\r\n            <thead>\r\n                <tr>\r\n                    <th jhiTranslate=\"{{ isBonus ? 'artemisApp.exam.examSummary.bonus' : 'artemisApp.exam.examSummary.grade' }}\"></th>\r\n                    <th jhiTranslate=\"artemisApp.exam.examSummary.interval\"></th>\r\n                    @if (hasPointsSet) {\r\n                        <th jhiTranslate=\"artemisApp.exam.examSummary.intervalPoints\"></th>\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @if (plagiarismGrade === studentGradeOrBonusPointsOrGradeBonus) {\r\n                    <tr [class.highlighted]=\"plagiarismGrade === studentGradeOrBonusPointsOrGradeBonus\">\r\n                        <td>\r\n                            {{ plagiarismGrade }}\r\n                            <jhi-help-icon placement=\"auto\" text=\"artemisApp.gradingSystem.plagiarismGradeHelp\" />\r\n                        </td>\r\n                        <!-- &mdash; is used to indicate that this special grade does not correspond to a numeric interval. -->\r\n                        <td>&mdash;</td>\r\n                        @if (hasPointsSet) {\r\n                            <td>&mdash;</td>\r\n                        }\r\n                    </tr>\r\n                }\r\n                @if (noParticipationGrade === studentGradeOrBonusPointsOrGradeBonus) {\r\n                    <tr [class.highlighted]=\"noParticipationGrade === studentGradeOrBonusPointsOrGradeBonus\">\r\n                        <td>\r\n                            {{ noParticipationGrade }}\r\n                            <jhi-help-icon placement=\"auto\" text=\"artemisApp.gradingSystem.noParticipationGradeHelp\" />\r\n                        </td>\r\n                        <!-- &mdash; is used to indicate that this special grade does not correspond to a numeric interval. -->\r\n                        <td>&mdash;</td>\r\n                        @if (hasPointsSet) {\r\n                            <td>&mdash;</td>\r\n                        }\r\n                    </tr>\r\n                }\r\n                @for (gradeStep of gradeSteps; track gradeStep; let last = $last) {\r\n                    <tr [class.highlighted]=\"gradeStep.gradeName === studentGradeOrBonusPointsOrGradeBonus || +gradeStep.gradeName === +studentGradeOrBonusPointsOrGradeBonus!\">\r\n                        <td>{{ gradeStep.gradeName }}</td>\r\n                        <td>\r\n                            <span [innerHTML]=\"gradeStep | gradeStepBounds: GradeEditMode.PERCENTAGE : last | safeHtml\"></span>\r\n                        </td>\r\n                        @if (hasPointsSet) {\r\n                            <td>\r\n                                <span [innerHTML]=\"gradeStep | gradeStepBounds: GradeEditMode.POINTS : last | safeHtml\"></span>\r\n                            </td>\r\n                        }\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div>\r\n        <h6 jhiTranslate=\"artemisApp.gradingSystem.overview.intervals.title\"></h6>\r\n        <ul>\r\n            <li><span style=\"font-weight: bold\">[a, b)</span>: {{ 'artemisApp.gradingSystem.overview.intervals.leftInclusiveRightExclusive' | artemisTranslate }}</li>\r\n            <li><span style=\"font-weight: bold\">(a, b]</span>: {{ 'artemisApp.gradingSystem.overview.intervals.leftExclusiveRightInclusive' | artemisTranslate }}</li>\r\n            <li><span style=\"font-weight: bold\">[a, b]</span>: {{ 'artemisApp.gradingSystem.overview.intervals.bothInclusive' | artemisTranslate }}</li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["loadGradingKeyUrlParams", "route", "courseId", "Number", "findParamInRouteHierarchy", "examId", "isExam", "examIdParam", "forBonus", "snapshot", "data", "studentGradeOrBonusPointsOrGradeBonus", "queryParams", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "GradingKeyTableComponent_Conditional_19_Conditional_12_Template", "\u0275\u0275advance", "\u0275\u0275classProp", "ctx_r0", "plagiarismGrade", "studentGradeOrBonusPointsOrGradeBonus", "\u0275\u0275textInterpolate1", "\u0275\u0275conditional", "hasPointsSet", "GradingKeyTableComponent_Conditional_20_Conditional_12_Template", "noParticipationGrade", "\u0275\u0275property", "\u0275\u0275pipeBind1", "\u0275\u0275pipeBind3", "gradeStep_r3", "GradeEditMode", "POINTS", "\u0275$index_80_r4", "\u0275$count_80_r5", "\u0275\u0275sanitizeHtml", "GradingKeyTableComponent_For_22_Conditional_13_Template", "gradeName", "\u0275\u0275textInterpolate", "PERCENTAGE", "GradingKeyTableComponent", "route", "inject", "ActivatedRoute", "gradingSystemService", "GradingSystemService", "bonusService", "BonusService", "scoresStorageService", "ScoresStorageService", "faChevronLeft", "forBonus", "isExam", "courseId", "examId", "title", "gradeSteps", "isBonus", "ngOnInit", "loadGradingKeyUrlParams", "findGradeSteps", "subscribe", "gradeType", "GradeType", "BONUS", "sortGradeSteps", "maxPoints", "undefined", "setGradePoints", "totalScoresForCourse", "getStoredTotalScores", "ScoreType", "REACHABLE_POINTS", "findBonusForExam", "pipe", "map", "bonusResponse", "source", "body", "sourceGradingScale", "getGradingScaleTitle", "getGradingScaleMaxPoints", "GradingScale", "DEFAULT_PLAGIARISM_GRADE", "DEFAULT_NO_PARTICIPATION_GRADE", "presentationsNumber", "presentationsWeight", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "GradingKeyTableComponent_Conditional_14_Template", "GradingKeyTableComponent_Conditional_19_Template", "GradingKeyTableComponent_Conditional_20_Template", "\u0275\u0275repeaterCreate", "GradingKeyTableComponent_For_22_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275propertyInterpolate", "\u0275\u0275repeater", "TranslateDirective", "ArtemisTranslatePipe", "GradeStepBoundsPipe", "SafeHtmlPipe", "HelpIconComponent", "styles"]
}
