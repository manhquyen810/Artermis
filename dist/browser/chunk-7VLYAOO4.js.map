{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/orion/orion-connector.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ExerciseView, OrionState } from 'app/shared/orion/orion';\r\nimport { Router } from '@angular/router';\r\nimport { stringifyCircular } from 'app/shared/util/utils';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { OrionTutorAssessmentComponent } from 'app/orion/assessment/orion-tutor-assessment.component';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Annotation } from 'app/exercises/programming/shared/code-editor/monaco/code-editor-monaco.component';\r\nimport { RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\n\r\n/**\r\n * Return the global native browser window object with any type to prevent type errors\r\n */\r\nfunction theWindow(): any {\r\n    return window;\r\n}\r\n\r\n/**\r\n * This is the main interface between an IDE (e.g. IntelliJ) and this webapp. If a student has the Orion plugin\r\n * installed (https://github.com/ls1intum/Orion), this service will be used for communication between the\r\n * IDE Artemis itself.\r\n *\r\n * The communication itself is bidirectional, meaning that the IDE can call Typescript code\r\n * using the by the JavaUpcallBridge interface defined methods. On the other side, the Angular app can execute\r\n * Kotlin/Java code inside the IDE by calling the JavaDowncallBridge interface.\r\n *\r\n * In order to be always available, it is essential that this service gets instantiated right after loading the app\r\n * in the browser. This service has to always be available in the native window object, so that if an IDE is connected,\r\n * it can find the object during the integrated IDE browser instantiation.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrionConnectorService {\r\n    private router = inject(Router);\r\n    private alertService = inject(AlertService);\r\n\r\n    private orionState: OrionState;\r\n    private orionStateSubject: BehaviorSubject<OrionState>;\r\n\r\n    // When loaded, the AssessmentComponent registers here to receive updates from the plugin\r\n    activeAssessmentComponent: OrionTutorAssessmentComponent | undefined = undefined;\r\n\r\n    static initConnector(connector: OrionConnectorService) {\r\n        theWindow().artemisClientConnector = connector;\r\n        connector.orionState = { opened: -1, view: ExerciseView.STUDENT, cloning: false, building: false };\r\n        connector.orionStateSubject = new BehaviorSubject<OrionState>(connector.orionState);\r\n    }\r\n\r\n    /**\r\n     * Login to the Git client within the IDE with the same credentials as used for Artemis\r\n     *\r\n     * @param username The username of the current user\r\n     * @param password The password of the current user. This is stored safely in the IDE's password safe\r\n     */\r\n    login(username: string, password: string) {\r\n        theWindow().orionSharedUtilConnector.login(username, password);\r\n    }\r\n\r\n    /**\r\n     * \"Imports\" a project/exercise by cloning th repository on the local machine of the user and opening the new project.\r\n     *\r\n     * @param repository The full URL of the repository of a programming exercise\r\n     * @param exercise The exercise for which the repository should get cloned.\r\n     */\r\n    importParticipation(repository: string, exercise: ProgrammingExercise) {\r\n        theWindow().orionExerciseConnector.importParticipation(repository, stringifyCircular(exercise));\r\n    }\r\n\r\n    /**\r\n     * Submits all changes on the local machine of the user by staging and committing every file. Afterwards, all commits\r\n     * get pushed to the remote master branch\r\n     */\r\n    submit() {\r\n        theWindow().orionVCSConnector.submit();\r\n    }\r\n\r\n    /**\r\n     * Get the state object of the IDE. The IDE sets different internal states in this object, e.g. the ID of the currently\r\n     * opened exercise\r\n     *\r\n     * @return An observable containing the internal state of the IDE\r\n     */\r\n    state(): Observable<OrionState> {\r\n        return this.orionStateSubject;\r\n    }\r\n\r\n    /**\r\n     * Logs a message to the debug console of the opened IDE\r\n     *\r\n     * @param message The message to log in the development environment\r\n     */\r\n    log(message: string) {\r\n        theWindow().orionSharedUtilConnector.log(message);\r\n    }\r\n\r\n    /**\r\n     * Gets called by the IDE. Informs the Angular app about a newly opened exercise.\r\n     *\r\n     * @param opened The ID of the exercise that was opened by the user.\r\n     * @param viewString ExerciseView which is currently open in the IDE as string. Must be one of the keys of ExerciseView\r\n     */\r\n    onExerciseOpened(opened: number, viewString: keyof typeof ExerciseView): void {\r\n        const view = ExerciseView[viewString];\r\n        this.setIDEStateParameter({ view });\r\n        this.setIDEStateParameter({ opened });\r\n    }\r\n\r\n    /**\r\n     * Notify the IDE that a new build has started\r\n     */\r\n    onBuildStarted(problemStatement: string) {\r\n        theWindow().orionBuildConnector.onBuildStarted(problemStatement);\r\n    }\r\n\r\n    /**\r\n     * Notify the IDE that a build finished and all results have been sent\r\n     */\r\n    onBuildFinished() {\r\n        theWindow().orionBuildConnector.onBuildFinished();\r\n    }\r\n\r\n    /**\r\n     * Notify the IDE that a build failed. Alternative to onBuildFinished\r\n     * Transforms the annotations to the format used by orion:\r\n     * { errors: { [fileName: string]: Annotation[] }; timestamp: number }\r\n     *\r\n     * @param buildErrors All compile errors for the current build\r\n     */\r\n    onBuildFailed(buildErrors: Array<Annotation>) {\r\n        theWindow().orionBuildConnector.onBuildFailed(\r\n            JSON.stringify({\r\n                errors: buildErrors.reduce(\r\n                    // Group annotations by filename\r\n                    (buildLogErrors: Record<string, Annotation[]>, { fileName, timestamp, ...rest }) => ({\r\n                        ...buildLogErrors,\r\n                        [fileName]: [...(buildLogErrors[fileName] || []), { ...rest, ts: timestamp }],\r\n                    }),\r\n                    {},\r\n                ),\r\n                timestamp: buildErrors.length > 0 ? buildErrors[0].timestamp : Date.now(),\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Notifies the IDE about a completed test (both positive or negative). In the case of an error,\r\n     * you can also send a message containing some information about why the test failed.\r\n     *\r\n     * @param success True if the test was successful, false otherwise\r\n     * @param message A detail message explaining the test result\r\n     * @param testName The name of finished test\r\n     */\r\n    onTestResult(success: boolean, testName: string, message: string) {\r\n        theWindow().orionBuildConnector.onTestResult(success, testName, message);\r\n    }\r\n\r\n    /**\r\n     * Notifies Artemis if the IDE is currently building (and testing) the checked out exercise\r\n     *\r\n     * @param building True, a building process is currently open, false otherwise\r\n     */\r\n    isBuilding(building: boolean): void {\r\n        this.setIDEStateParameter({ building });\r\n    }\r\n\r\n    /**\r\n     * Notifies Artemis if the IDE is in the process of importing (i.e. cloning) an exercise.\r\n     *\r\n     * @param cloning True, if there is an open clone process, false otherwise\r\n     */\r\n    isCloning(cloning: boolean): void {\r\n        this.setIDEStateParameter({ cloning });\r\n    }\r\n\r\n    private setIDEStateParameter(patch: Partial<OrionState>) {\r\n        Object.assign(this.orionState, patch);\r\n        this.orionStateSubject.next(this.orionState);\r\n    }\r\n\r\n    /**\r\n     * Gets triggered if a build/test run was started from inside the IDE. This means that we have to navigate\r\n     * to the related exercise page in order to listen for any new results\r\n     *\r\n     * @param courseId\r\n     * @param exerciseId\r\n     */\r\n    startedBuildInOrion(courseId: number, exerciseId: number) {\r\n        this.router.navigateByUrl(`/courses/${courseId}/exercises/${exerciseId}?withIdeSubmit=true`);\r\n    }\r\n\r\n    /**\r\n     * Updates the assessment of the currently open submission\r\n     * @param submissionId Id of the open submission, for validation\r\n     * @param feedback all inline feedback, as JSON\r\n     */\r\n    updateAssessment(submissionId: number, feedback: string) {\r\n        if (this.activeAssessmentComponent) {\r\n            const feedbackAsArray = JSON.parse(feedback) as Feedback[];\r\n            this.activeAssessmentComponent!.updateFeedback(submissionId, feedbackAsArray);\r\n        } else {\r\n            this.alertService.error('artemisApp.orion.assessment.updateFailed');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the given exercise in the IDE as an instructor. This will trigger the import of the exercise\r\n     * (if it is not already imported) and opens the created project afterwards.\r\n     *\r\n     * @param exercise The exercise to be imported\r\n     */\r\n    editExercise(exercise: ProgrammingExercise): void {\r\n        this.isCloning(true);\r\n        theWindow().orionExerciseConnector.editExercise(stringifyCircular(exercise));\r\n    }\r\n\r\n    /**\r\n     * Selects an instructor repository in the IDE. The selected repository will be used for all future actions\r\n     * that reference an instructor repo s.a. submitting the code.\r\n     *\r\n     * @param repository The repository to be selected for all future interactions\r\n     */\r\n    selectRepository(repository: RepositoryType): void {\r\n        theWindow().orionVCSConnector.selectRepository(repository);\r\n    }\r\n\r\n    /**\r\n     * Orders the plugin to run the maven test command locally\r\n     */\r\n    buildAndTestLocally(): void {\r\n        theWindow().orionBuildConnector.buildAndTestLocally();\r\n    }\r\n\r\n    /**\r\n     * Assess the exercise as a tutor. Triggers downloading/opening the exercise as tutor\r\n     *\r\n     * @param exercise The exercise to be imported\r\n     */\r\n    assessExercise(exercise: ProgrammingExercise): void {\r\n        this.isCloning(true);\r\n        theWindow().orionExerciseConnector.assessExercise(stringifyCircular(exercise));\r\n    }\r\n\r\n    /**\r\n     * Downloads a submission into the opened tutor project\r\n     *\r\n     * @param submissionId id of the submission, used to navigate to the corresponding URL\r\n     * @param correctionRound correction round, also needed to navigate to the correct URL\r\n     * @param _testRun test run flag, also needed for navigation\r\n     * @param base64data the student's submission as base64\r\n     */\r\n    downloadSubmission(submissionId: number, correctionRound: number, _testRun: boolean, base64data: string) {\r\n        // Uncomment this line to also transfer the testRun flag.\r\n        // THIS IS A BREAKING CHANGE that will require all users to upgrade their Orion to a compatible version!\r\n        // Also change in orion.ts\r\n        // theWindow().orionExerciseConnector.downloadSubmission(String(submissionId), String(correctionRound), testRun, base64data);\r\n        theWindow().orionExerciseConnector.downloadSubmission(String(submissionId), String(correctionRound), base64data);\r\n    }\r\n\r\n    /**\r\n     * Initializes the feedback comments.\r\n     *\r\n     * @param submissionId if of the submission, for validation purposes\r\n     * @param feedback current feedback\r\n     */\r\n    initializeAssessment(submissionId: number, feedback: Array<Feedback>) {\r\n        theWindow().orionExerciseConnector.initializeAssessment(String(submissionId), stringifyCircular(feedback));\r\n    }\r\n\r\n    /**\r\n     * Initializes the test repository\r\n     *\r\n     * @param exercise the current programming exercise\r\n     */\r\n    initializeTestRepository(exercise: ProgrammingExercise) {\r\n        if (exercise.testRepositoryUri !== undefined) {\r\n            theWindow().orionExerciseConnector.initializeTestRepository(exercise.testRepositoryUri);\r\n        } else {\r\n            theWindow().orionExerciseConnector.initializeTestRepository('null');\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["theWindow", "window", "OrionConnectorService", "router", "inject", "Router", "alertService", "AlertService", "orionState", "orionStateSubject", "activeAssessmentComponent", "undefined", "initConnector", "connector", "artemisClientConnector", "opened", "view", "ExerciseView", "STUDENT", "cloning", "building", "BehaviorSubject", "login", "username", "password", "orionSharedUtilConnector", "importParticipation", "repository", "exercise", "orionExerciseConnector", "stringifyCircular", "submit", "orionVCSConnector", "state", "log", "message", "onExerciseOpened", "viewString", "setIDEStateParameter", "onBuildStarted", "problemStatement", "orionBuildConnector", "onBuildFinished", "onBuildFailed", "buildErrors", "JSON", "stringify", "errors", "reduce", "buildLogErrors", "_a", "_b", "fileName", "timestamp", "rest", "__spreadProps", "__spreadValues", "ts", "length", "Date", "now", "onTestResult", "success", "testName", "isBuilding", "isCloning", "patch", "Object", "assign", "next", "startedBuildInOrion", "courseId", "exerciseId", "navigateByUrl", "updateAssessment", "submissionId", "feedback", "feedbackAsArray", "parse", "updateFeedback", "error", "editExercise", "selectRepository", "buildAndTestLocally", "assessExercise", "downloadSubmission", "correctionRound", "_testRun", "base64data", "String", "initializeAssessment", "initializeTestRepository", "testRepositoryUri", "factory", "\u0275fac", "providedIn"]
}
