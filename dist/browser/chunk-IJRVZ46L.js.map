{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/quiz/quiz-question.model.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { QuizQuestionStatistic } from 'app/entities/quiz/quiz-question-statistic.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { CanBecomeInvalid } from 'app/entities/quiz/drop-location.model';\r\nimport { QuizGroup } from 'app/entities/quiz/quiz-group.model';\r\n\r\nexport enum ScoringType {\r\n    ALL_OR_NOTHING = 'ALL_OR_NOTHING',\r\n    PROPORTIONAL_WITH_PENALTY = 'PROPORTIONAL_WITH_PENALTY',\r\n    PROPORTIONAL_WITHOUT_PENALTY = 'PROPORTIONAL_WITHOUT_PENALTY',\r\n}\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with the ones defined in Question.java\r\nexport enum QuizQuestionType {\r\n    MULTIPLE_CHOICE = 'multiple-choice',\r\n    DRAG_AND_DROP = 'drag-and-drop',\r\n    SHORT_ANSWER = 'short-answer',\r\n}\r\n\r\nexport interface ExerciseHintExplanationInterface {\r\n    text?: string;\r\n    hint?: string;\r\n    explanation?: string;\r\n}\r\n\r\nexport class RenderedQuizQuestionMarkDownElement {\r\n    text: SafeHtml;\r\n    hint: SafeHtml;\r\n    explanation: SafeHtml;\r\n    renderedSubElements: RenderedQuizQuestionMarkDownElement[] = [];\r\n}\r\n\r\nexport abstract class QuizQuestion implements BaseEntity, CanBecomeInvalid, ExerciseHintExplanationInterface {\r\n    public id?: number;\r\n    public title?: string;\r\n    public text?: string;\r\n    public hint?: string;\r\n    public explanation?: string;\r\n    public points?: number;\r\n    public scoringType?: ScoringType;\r\n    public randomizeOrder = true; // default value\r\n    public invalid = false; // default value\r\n    public quizQuestionStatistic?: QuizQuestionStatistic;\r\n    public exercise?: QuizExercise;\r\n    public exportQuiz = false; // default value\r\n    public type?: QuizQuestionType;\r\n    public quizGroup?: QuizGroup;\r\n\r\n    protected constructor(type: QuizQuestionType) {\r\n        this.type = type;\r\n    }\r\n}\r\n"],
  "mappings": "AAOA,IAAYA,EAAZ,SAAYA,EAAW,CACnBA,OAAAA,EAAA,eAAA,iBACAA,EAAA,0BAAA,4BACAA,EAAA,6BAAA,+BAHQA,CAIZ,EAJYA,GAAW,CAAA,CAAA,EAOXC,EAAZ,SAAYA,EAAgB,CACxBA,OAAAA,EAAA,gBAAA,kBACAA,EAAA,cAAA,gBACAA,EAAA,aAAA,eAHQA,CAIZ,EAJYA,GAAgB,CAAA,CAAA,EAYfC,EAAP,KAA0C,CAC5CC,KACAC,KACAC,YACAC,oBAA6D,CAAA,GAG3CC,EAAhB,KAA4B,CACvBC,GACAC,MACAN,KACAC,KACAC,YACAK,OACAC,YACAC,eAAiB,GACjBC,QAAU,GACVC,sBACAC,SACAC,WAAa,GACbC,KACAC,UAEPC,YAAsBF,EAAsB,CACxC,KAAKA,KAAOA,CAChB",
  "names": ["ScoringType", "QuizQuestionType", "RenderedQuizQuestionMarkDownElement", "text", "hint", "explanation", "renderedSubElements", "QuizQuestion", "id", "title", "points", "scoringType", "randomizeOrder", "invalid", "quizQuestionStatistic", "exercise", "exportQuiz", "type", "quizGroup", "constructor"]
}
