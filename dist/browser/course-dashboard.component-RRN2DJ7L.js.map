{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-dashboard/course-dashboard.service.ts", "src/main/webapp/app/iris/course-chatbot/course-chatbot.component.ts", "src/main/webapp/app/iris/course-chatbot/course-chatbot.component.html", "src/main/webapp/app/overview/course-dashboard/course-exercise-performance/course-exercise-performance.component.ts", "src/main/webapp/app/overview/course-dashboard/course-exercise-performance/course-exercise-performance.component.html", "src/main/webapp/app/overview/course-dashboard/course-exercise-lateness/course-exercise-lateness.component.ts", "src/main/webapp/app/overview/course-dashboard/course-exercise-lateness/course-exercise-lateness.component.html", "src/main/webapp/app/course/competencies/judgement-of-learning-rating/judgement-of-learning-rating.component.ts", "src/main/webapp/app/course/competencies/judgement-of-learning-rating/judgement-of-learning-rating.component.html", "src/main/webapp/app/course/competencies/competency-accordion/competency-accordion.component.ts", "src/main/webapp/app/course/competencies/competency-accordion/competency-accordion.component.html", "src/main/webapp/app/overview/course-dashboard/course-dashboard.component.ts", "src/main/webapp/app/overview/course-dashboard/course-dashboard.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\nimport { CompetencyMetrics, ExerciseInformation, LectureUnitInformation, StudentMetrics } from 'app/entities/student-metrics.model';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { LectureUnitType } from 'app/entities/lecture-unit/lectureUnit.model';\r\nimport { CompetencyJol } from 'app/entities/competency.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CourseDashboardService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/atlas/metrics';\r\n\r\n    getCourseMetricsForUser(courseId: number): Observable<HttpResponse<StudentMetrics>> {\r\n        return this.http.get<StudentMetrics>(`${this.resourceUrl}/course/${courseId}/student`, { observe: 'response' }).pipe(\r\n            map((response) => {\r\n                if (response.body) {\r\n                    if (response.body.exerciseMetrics && response.body.exerciseMetrics.exerciseInformation) {\r\n                        response.body.exerciseMetrics.exerciseInformation = this.convertToExerciseInformation(\r\n                            response.body.exerciseMetrics.exerciseInformation,\r\n                            response.body.exerciseMetrics?.categories ?? {},\r\n                            response.body.exerciseMetrics.teamId,\r\n                        );\r\n                    }\r\n                    if (response.body.lectureUnitStudentMetricsDTO && response.body.lectureUnitStudentMetricsDTO.lectureUnitInformation) {\r\n                        response.body.lectureUnitStudentMetricsDTO.lectureUnitInformation = this.convertToLectureUnitInformation(\r\n                            response.body.lectureUnitStudentMetricsDTO.lectureUnitInformation,\r\n                        );\r\n                    }\r\n                    if (response.body.competencyMetrics && response.body.competencyMetrics.competencyInformation) {\r\n                        response.body.competencyMetrics.competencyInformation = this.convertToCompetencyInformation(response.body.competencyMetrics.competencyInformation);\r\n                        response.body.competencyMetrics.currentJolValues = this.filterJolWhereMasteryChanged(response.body.competencyMetrics);\r\n                    }\r\n                }\r\n                return response;\r\n            }),\r\n        );\r\n    }\r\n\r\n    private convertToExerciseInformation(\r\n        exerciseInformation: { [key: string]: any },\r\n        categories: { [key: string]: any },\r\n        teamId?: { [key: string]: number },\r\n    ): { [key: string]: ExerciseInformation } {\r\n        return Object.keys(exerciseInformation).reduce(\r\n            (acc, key) => {\r\n                const exerciseCategories = categories[key]?.map((category: string) => JSON.parse(category) as ExerciseCategory) || [];\r\n                const exercise = exerciseInformation[key];\r\n                acc[key] = {\r\n                    ...exercise,\r\n                    startDate: dayjs(exercise.start),\r\n                    dueDate: exercise.due ? dayjs(exercise.due) : undefined,\r\n                    type: this.mapToExerciseType(exercise.type),\r\n                    categories: exerciseCategories,\r\n                    studentAssignedTeamId: teamId ? teamId?.[key] : undefined,\r\n                };\r\n                return acc;\r\n            },\r\n            {} as { [key: string]: ExerciseInformation },\r\n        );\r\n    }\r\n\r\n    private convertToLectureUnitInformation(lectureUnitInformation: { [key: string]: any }): { [key: string]: LectureUnitInformation } {\r\n        return Object.keys(lectureUnitInformation).reduce(\r\n            (acc, key) => {\r\n                const lectureUnit = lectureUnitInformation[key];\r\n                acc[key] = {\r\n                    ...lectureUnit,\r\n                    releaseDate: dayjs(lectureUnit.releaseDate),\r\n                    type: this.mapToLectureUnitType(lectureUnit.type),\r\n                };\r\n                return acc;\r\n            },\r\n            {} as { [key: string]: LectureUnitInformation },\r\n        );\r\n    }\r\n\r\n    private filterJolWhereMasteryChanged(competencyMetrics: CompetencyMetrics): { [key: string]: CompetencyJol } {\r\n        return Object.fromEntries(\r\n            Object.entries(competencyMetrics.currentJolValues ?? {}).filter(([key, value]) => {\r\n                const progress = competencyMetrics?.progress?.[Number(key)] ?? 0;\r\n                const confidence = competencyMetrics?.confidence?.[Number(key)] ?? 1;\r\n                return value.competencyProgress === progress && value.competencyConfidence === confidence;\r\n            }),\r\n        );\r\n    }\r\n\r\n    private convertToCompetencyInformation(competencyInformation: { [key: string]: any }): { [key: string]: any } {\r\n        return Object.keys(competencyInformation).reduce(\r\n            (acc, key) => {\r\n                const competency = competencyInformation[key];\r\n                acc[key] = {\r\n                    ...competency,\r\n                    softDueDate: competency.softDueDate ? dayjs(competency.softDueDate) : undefined,\r\n                };\r\n                return acc;\r\n            },\r\n            {} as { [key: string]: any },\r\n        );\r\n    }\r\n\r\n    private mapToExerciseType(type: string): ExerciseType {\r\n        switch (type) {\r\n            case 'de.tum.cit.aet.artemis.programming.domain.ProgrammingExercise':\r\n                return ExerciseType.PROGRAMMING;\r\n            case 'de.tum.cit.aet.artemis.modeling.domain.ModelingExercise':\r\n                return ExerciseType.MODELING;\r\n            case 'de.tum.cit.aet.artemis.quiz.domain.QuizExercise':\r\n                return ExerciseType.QUIZ;\r\n            case 'de.tum.cit.aet.artemis.text.domain.TextExercise':\r\n                return ExerciseType.TEXT;\r\n            case 'de.tum.cit.aet.artemis.fileupload.domain.FileUploadExercise':\r\n                return ExerciseType.FILE_UPLOAD;\r\n            default:\r\n                throw new Error(`Unknown exercise type: ${type}`);\r\n        }\r\n    }\r\n\r\n    private mapToLectureUnitType(type: string): LectureUnitType {\r\n        switch (type) {\r\n            case 'de.tum.cit.aet.artemis.lecture.domain.AttachmentUnit':\r\n                return LectureUnitType.ATTACHMENT;\r\n            case 'de.tum.cit.aet.artemis.lecture.domain.ExerciseUnit':\r\n                return LectureUnitType.EXERCISE;\r\n            case 'de.tum.cit.aet.artemis.lecture.domain.TextUnit':\r\n                return LectureUnitType.TEXT;\r\n            case 'de.tum.cit.aet.artemis.lecture.domain.VideoUnit':\r\n                return LectureUnitType.VIDEO;\r\n            case 'de.tum.cit.aet.artemis.lecture.domain.OnlineUnit':\r\n                return LectureUnitType.ONLINE;\r\n            default:\r\n                throw new Error(`Unknown lecture unit type: ${type}`);\r\n        }\r\n    }\r\n}\r\n", "import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\r\nimport { ChatServiceMode, IrisChatService } from 'app/iris/iris-chat.service';\r\nimport { IrisBaseChatbotComponent } from '../base-chatbot/iris-base-chatbot.component';\r\n\r\n@Component({\r\n    selector: 'jhi-course-chatbot',\r\n    templateUrl: './course-chatbot.component.html',\r\n    styleUrl: './course-chatbot.component.scss',\r\n    imports: [IrisBaseChatbotComponent],\r\n})\r\nexport class CourseChatbotComponent implements OnChanges {\r\n    chatService = inject(IrisChatService);\r\n\r\n    @Input() courseId?: number;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.courseId) {\r\n            this.chatService.switchTo(ChatServiceMode.COURSE, this.courseId);\r\n        }\r\n    }\r\n}\r\n", "@if (courseId) {\r\n    <jhi-iris-base-chatbot />\r\n}\r\n", "import { Component, Input, OnChanges, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Color, LineChartModule, ScaleType } from '@swimlane/ngx-charts';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { NgxChartsMultiSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { Subscription } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface ExercisePerformance {\r\n    exerciseId: number;\r\n    title: string;\r\n    shortName?: string;\r\n    score?: number;\r\n    averageScore?: number;\r\n}\r\n\r\nconst YOUR_GRAPH_COLOR = GraphColors.BLUE;\r\nconst AVERAGE_GRAPH_COLOR = GraphColors.YELLOW;\r\n\r\n@Component({\r\n    selector: 'jhi-course-exercise-performance',\r\n    templateUrl: './course-exercise-performance.component.html',\r\n    styleUrls: ['./course-exercise-performance.component.scss'],\r\n    imports: [TranslateDirective, HelpIconComponent, LineChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class CourseExercisePerformanceComponent implements OnInit, OnChanges, OnDestroy {\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() exercisePerformance: ExercisePerformance[] = [];\r\n\r\n    yourScoreLabel: string;\r\n    averageScoreLabel: string;\r\n    ngxData: NgxChartsMultiSeriesDataEntry[];\r\n    ngxColor: Color = {\r\n        name: 'Performance in Exercises',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [YOUR_GRAPH_COLOR, AVERAGE_GRAPH_COLOR],\r\n    };\r\n    yScaleMax = 100;\r\n\r\n    private translateServiceSubscription: Subscription;\r\n\r\n    protected readonly YOUR_GRAPH_COLOR = YOUR_GRAPH_COLOR;\r\n    protected readonly AVERAGE_GRAPH_COLOR = AVERAGE_GRAPH_COLOR;\r\n\r\n    constructor() {\r\n        this.translateServiceSubscription = this.translateService.onLangChange.subscribe(() => {\r\n            this.setupChart();\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setupChart();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.translateServiceSubscription.unsubscribe();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.setupChart();\r\n    }\r\n\r\n    /**\r\n     * This getter checks if there is data available for the chart.\r\n     * It checks if `ngxData` is defined, if it has at least one entry, and if at least one of those entries has a non-empty `series` array.\r\n     * @returns {boolean} - Returns true if data is available for the chart, false otherwise.\r\n     */\r\n    get isDataAvailable(): boolean {\r\n        return this.ngxData && this.ngxData.length > 0 && this.ngxData.some((data) => data.series.length > 0);\r\n    }\r\n\r\n    /**\r\n     * This method is responsible for setting up the chart that displays the performance of the exercises.\r\n     * It translates the labels for the chart, prepares the data for the chart, and calculates the maximum value for the y-axis.\r\n     */\r\n    private setupChart(): void {\r\n        this.yourScoreLabel = this.translateService.instant('artemisApp.courseStudentDashboard.exercisePerformance.yourScoreLabel');\r\n        this.averageScoreLabel = this.translateService.instant('artemisApp.courseStudentDashboard.exercisePerformance.averageScoreLabel');\r\n\r\n        this.ngxData = [\r\n            {\r\n                name: this.yourScoreLabel,\r\n                series: this.exercisePerformance.map((performance) => {\r\n                    return {\r\n                        name: performance.shortName?.toUpperCase() || performance.title,\r\n                        value: round(performance.score || 0, 1), // If the score is undefined, set it to 0\r\n                        extra: {\r\n                            title: performance.title,\r\n                        },\r\n                    };\r\n                }),\r\n            },\r\n            {\r\n                name: this.averageScoreLabel,\r\n                series: this.exercisePerformance.map((performance) => {\r\n                    return {\r\n                        name: performance.shortName?.toUpperCase() || performance.title,\r\n                        value: round(performance.averageScore || 0, 1),\r\n                        extra: {\r\n                            title: performance.title,\r\n                        },\r\n                    };\r\n                }),\r\n            },\r\n        ];\r\n\r\n        // Round the maximum score up to the next multiple of 10\r\n        const maxScore = Math.max(...this.ngxData.flatMap((data) => data.series.map((series) => series.value)));\r\n        this.yScaleMax = Math.max(100, Math.ceil(maxScore / 10) * 10);\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex flex-wrap justify-content-between align-items-baseline gap-2\">\r\n        <div class=\"d-flex gap-2 align-items-baseline\">\r\n            <h4 jhiTranslate=\"artemisApp.courseStudentDashboard.exercisePerformance.title\"></h4>\r\n            <jhi-help-icon text=\"artemisApp.courseStudentDashboard.exercisePerformance.info\" />\r\n        </div>\r\n        @if (isDataAvailable) {\r\n            <!-- Legend-->\r\n            <div class=\"d-flex gap-3\">\r\n                <div class=\"d-flex align-items-center gap-1\">\r\n                    <span class=\"tooltip-label\" [style.background-color]=\"YOUR_GRAPH_COLOR\"></span>\r\n                    <span jhiTranslate=\"artemisApp.courseStudentDashboard.exercisePerformance.yourScoreLabel\"></span>\r\n                </div>\r\n                <div class=\"d-flex align-items-center gap-1\">\r\n                    <span class=\"tooltip-label\" [style.background-color]=\"AVERAGE_GRAPH_COLOR\"></span>\r\n                    <span jhiTranslate=\"artemisApp.courseStudentDashboard.exercisePerformance.averageScoreLabel\"></span>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (isDataAvailable) {\r\n        <div #containerRef class=\"mt-2 justify-content-center\">\r\n            <ngx-charts-line-chart\r\n                [view]=\"[containerRef.offsetWidth, 200]\"\r\n                [results]=\"ngxData\"\r\n                [scheme]=\"ngxColor\"\r\n                [legend]=\"false\"\r\n                [maxXAxisTickLength]=\"6\"\r\n                [xAxis]=\"true\"\r\n                [xAxisLabel]=\"'artemisApp.courseStudentDashboard.exercisePerformance.xAxisLabel' | artemisTranslate\"\r\n                [showXAxisLabel]=\"true\"\r\n                [yAxis]=\"true\"\r\n                [yAxisLabel]=\"'artemisApp.courseStudentDashboard.exercisePerformance.yAxisLabel' | artemisTranslate\"\r\n                [showYAxisLabel]=\"true\"\r\n                [yScaleMin]=\"0\"\r\n                [yScaleMax]=\"yScaleMax\"\r\n            >\r\n                <ng-template #tooltipTemplate let-model=\"model\">\r\n                    <div class=\"d-flex flex-column align-items-start py-2\">\r\n                        <b class=\"mb-1\">{{ model.extra.title }}</b>\r\n                        {{ model.series }}: {{ model.value }}%\r\n                    </div>\r\n                </ng-template>\r\n                <ng-template #seriesTooltipTemplate let-model=\"model\">\r\n                    @if (!model.isEmpty) {\r\n                        <div class=\"d-flex flex-column align-items-start py-2\">\r\n                            <b class=\"mb-1\">{{ model[0].extra.title }}</b>\r\n                            @for (entry of model; track entry) {\r\n                                <div class=\"d-flex align-items-center gap-1\">\r\n                                    <span class=\"tooltip-label\" [style.background-color]=\"entry.color\"></span>\r\n                                    {{ entry.series }}: {{ entry.value }}%\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </ng-template>\r\n            </ngx-charts-line-chart>\r\n        </div>\r\n    } @else {\r\n        <div class=\"mt-2\" jhiTranslate=\"artemisApp.courseStudentDashboard.exercisePerformance.noData\"></div>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnChanges, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Color, LineChartModule, ScaleType } from '@swimlane/ngx-charts';\r\nimport { GraphColors } from 'app/entities/statistics.model';\r\nimport { NgxChartsMultiSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { Subscription } from 'rxjs';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface ExerciseLateness {\r\n    exerciseId: number;\r\n    title: string;\r\n    shortName?: string;\r\n    relativeLatestSubmission?: number;\r\n    relativeAverageLatestSubmission?: number;\r\n}\r\n\r\nconst YOUR_GRAPH_COLOR = GraphColors.BLUE;\r\nconst AVERAGE_GRAPH_COLOR = GraphColors.YELLOW;\r\n\r\n@Component({\r\n    selector: 'jhi-course-exercise-lateness',\r\n    templateUrl: './course-exercise-lateness.component.html',\r\n    styleUrls: ['./course-exercise-lateness.component.scss'],\r\n    imports: [TranslateDirective, HelpIconComponent, LineChartModule, ArtemisTranslatePipe],\r\n})\r\nexport class CourseExerciseLatenessComponent implements OnInit, OnChanges, OnDestroy {\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() exerciseLateness: ExerciseLateness[] = [];\r\n\r\n    yourLatenessLabel: string;\r\n    averageLatenessLabel: string;\r\n    ngxData: NgxChartsMultiSeriesDataEntry[];\r\n\r\n    ngxColor: Color = {\r\n        name: 'Lateness in Exercises',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [YOUR_GRAPH_COLOR, AVERAGE_GRAPH_COLOR],\r\n    };\r\n    yScaleMax = 100;\r\n\r\n    private translateServiceSubscription: Subscription;\r\n\r\n    protected readonly YOUR_GRAPH_COLOR = YOUR_GRAPH_COLOR;\r\n    protected readonly AVERAGE_GRAPH_COLOR = AVERAGE_GRAPH_COLOR;\r\n\r\n    constructor() {\r\n        this.translateServiceSubscription = this.translateService.onLangChange.subscribe(() => {\r\n            this.setupChart();\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setupChart();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.translateServiceSubscription.unsubscribe();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.setupChart();\r\n    }\r\n\r\n    /**\r\n     * This getter checks if there is data available for the chart.\r\n     * It checks if `ngxData` is defined, if it has at least one entry, and if at least one of those entries has a non-empty `series` array.\r\n     * @returns {boolean} - Returns true if data is available for the chart, false otherwise.\r\n     */\r\n    get isDataAvailable(): boolean {\r\n        return this.ngxData && this.ngxData.length > 0 && this.ngxData.some((data) => data.series.length > 0);\r\n    }\r\n\r\n    /**\r\n     * This method is responsible for setting up the chart that displays the lateness of the exercises.\r\n     * It translates the labels for the chart, prepares the data for the chart, and calculates the maximum value for the y-axis.\r\n     */\r\n    private setupChart(): void {\r\n        this.yourLatenessLabel = this.translateService.instant('artemisApp.courseStudentDashboard.exerciseLateness.yourLatenessLabel');\r\n        this.averageLatenessLabel = this.translateService.instant('artemisApp.courseStudentDashboard.exerciseLateness.averageLatenessLabel');\r\n\r\n        this.ngxData = [\r\n            {\r\n                name: this.yourLatenessLabel,\r\n                series: this.exerciseLateness.map((lateness) => {\r\n                    return {\r\n                        name: lateness.shortName?.toUpperCase() || lateness.title,\r\n                        value: round(lateness.relativeLatestSubmission || 100, 1), // If there is no data, we assume the submission is late\r\n                        extra: {\r\n                            title: lateness.title,\r\n                        },\r\n                    };\r\n                }),\r\n            },\r\n            {\r\n                name: this.averageLatenessLabel,\r\n                series: this.exerciseLateness.map((lateness) => {\r\n                    return {\r\n                        name: lateness.shortName?.toUpperCase() || lateness.title,\r\n                        value: round(lateness.relativeAverageLatestSubmission || 100, 1),\r\n                        extra: {\r\n                            title: lateness.title,\r\n                        },\r\n                    };\r\n                }),\r\n            },\r\n        ];\r\n\r\n        // Round the maximum score up to the next multiple of 10\r\n        const maxRelativeTime = Math.max(...this.ngxData.flatMap((data) => data.series.map((series) => series.value)));\r\n        this.yScaleMax = Math.max(100, Math.ceil(maxRelativeTime / 10) * 10);\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"d-flex flex-wrap justify-content-between align-items-baseline gap-2\">\r\n        <div class=\"d-flex gap-2 align-items-baseline\">\r\n            <h4 jhiTranslate=\"artemisApp.courseStudentDashboard.exerciseLateness.title\"></h4>\r\n            <jhi-help-icon text=\"artemisApp.courseStudentDashboard.exerciseLateness.info\" />\r\n        </div>\r\n        @if (isDataAvailable) {\r\n            <!-- Legend-->\r\n            <div class=\"d-flex gap-3\">\r\n                <div class=\"d-flex align-items-center gap-1\">\r\n                    <span class=\"tooltip-label\" [style.background-color]=\"YOUR_GRAPH_COLOR\"></span>\r\n                    <span jhiTranslate=\"artemisApp.courseStudentDashboard.exerciseLateness.yourLatenessLabel\"></span>\r\n                </div>\r\n                <div class=\"d-flex align-items-center gap-1\">\r\n                    <span class=\"tooltip-label\" [style.background-color]=\"AVERAGE_GRAPH_COLOR\"></span>\r\n                    <span jhiTranslate=\"artemisApp.courseStudentDashboard.exerciseLateness.averageLatenessLabel\"></span>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n    @if (isDataAvailable) {\r\n        <div #containerRef class=\"mt-2 justify-content-center\">\r\n            <ngx-charts-line-chart\r\n                [view]=\"[containerRef.offsetWidth, 200]\"\r\n                [results]=\"ngxData\"\r\n                [scheme]=\"ngxColor\"\r\n                [legend]=\"false\"\r\n                [maxXAxisTickLength]=\"6\"\r\n                [xAxis]=\"true\"\r\n                [xAxisLabel]=\"'artemisApp.courseStudentDashboard.exerciseLateness.xAxisLabel' | artemisTranslate\"\r\n                [showXAxisLabel]=\"true\"\r\n                [yAxis]=\"true\"\r\n                [yAxisLabel]=\"'artemisApp.courseStudentDashboard.exerciseLateness.yAxisLabel' | artemisTranslate\"\r\n                [showYAxisLabel]=\"true\"\r\n                [yScaleMin]=\"0\"\r\n                [yScaleMax]=\"yScaleMax\"\r\n            >\r\n                <ng-template #tooltipTemplate let-model=\"model\">\r\n                    <div class=\"d-flex flex-column align-items-start py-2\">\r\n                        <b class=\"mb-1\">{{ model.extra.title }}</b>\r\n                        {{ model.series }}: {{ model.value }}%\r\n                    </div>\r\n                </ng-template>\r\n                <ng-template #seriesTooltipTemplate let-model=\"model\">\r\n                    @if (!model.isEmpty) {\r\n                        <div class=\"d-flex flex-column align-items-start py-2\">\r\n                            <b class=\"mb-1\">{{ model[0].extra.title }}</b>\r\n                            @for (entry of model; track entry) {\r\n                                <div class=\"d-flex align-items-center gap-1\">\r\n                                    <span class=\"tooltip-label\" [style.background-color]=\"entry.color\"></span>\r\n                                    {{ entry.series }}: {{ entry.value }}%\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </ng-template>\r\n            </ngx-charts-line-chart>\r\n        </div>\r\n    } @else {\r\n        <div class=\"mt-2\" jhiTranslate=\"artemisApp.courseStudentDashboard.exerciseLateness.noData\"></div>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { StarRatingComponent } from 'app/exercises/shared/rating/star-rating/star-rating.component';\r\n\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\nimport { CourseCompetencyService } from 'app/course/competencies/course-competency.service';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-judgement-of-learning-rating',\r\n    imports: [StarRatingComponent, HelpIconComponent, TranslateDirective],\r\n    templateUrl: './judgement-of-learning-rating.component.html',\r\n})\r\nexport class JudgementOfLearningRatingComponent {\r\n    private courseCompetencyService = inject(CourseCompetencyService);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() courseId: number | undefined;\r\n    @Input() competencyId: number;\r\n    @Input() rating: number | undefined;\r\n    @Input() mastery: number | undefined;\r\n\r\n    @Output() ratingChange = new EventEmitter<number>();\r\n\r\n    /**\r\n     * Handle the event when a new rating is selected.\r\n     * @param event - starRating component that holds the new rating value\r\n     */\r\n    onRate(event: { oldValue: number; newValue: number; starRating: StarRatingComponent }) {\r\n        if (this.rating !== undefined || this.courseId === undefined) {\r\n            return;\r\n        }\r\n\r\n        const newRating = event.newValue;\r\n\r\n        this.courseCompetencyService.setJudgementOfLearning(this.courseId, this.competencyId, newRating).subscribe(\r\n            () => {\r\n                this.rating = newRating;\r\n                this.ratingChange.emit(newRating);\r\n            },\r\n            () => {\r\n                this.alertService.error('artemisApp.courseStudentDashboard.judgementOfLearning.error');\r\n            },\r\n        );\r\n    }\r\n}\r\n", "<!-- eslint-disable @angular-eslint/template/eqeqeq -->\r\n<div class=\"alert alert-info\">\r\n    <div class=\"d-flex gap-1 align-items-center\">\r\n        <b>\r\n            <span jhiTranslate=\"artemisApp.courseStudentDashboard.judgementOfLearning.title\"></span>\r\n        </b>\r\n        <jhi-help-icon text=\"artemisApp.courseStudentDashboard.judgementOfLearning.info\" />\r\n    </div>\r\n    <star-rating\r\n        checkedColor=\"var(--yellow)\"\r\n        uncheckedColor=\"var(--gray-500)\"\r\n        [value]=\"rating ?? 0\"\r\n        [size]=\"'24'\"\r\n        [readOnly]=\"rating != undefined\"\r\n        [totalStars]=\"5\"\r\n        (rate)=\"onRate($event)\"\r\n    />\r\n    @if (rating != undefined && mastery != undefined) {\r\n        <div class=\"mt-2\">\r\n            <span jhiTranslate=\"artemisApp.courseStudentDashboard.judgementOfLearning.artemisRating\"></span>\r\n            <star-rating checkedColor=\"var(--info)\" uncheckedColor=\"var(--gray-500)\" [value]=\"(mastery / 100) * 5\" [size]=\"'24'\" [readOnly]=\"true\" [totalStars]=\"5\" />\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, inject } from '@angular/core';\r\nimport { faFile, faFilePdf, faList } from '@fortawesome/free-solid-svg-icons';\r\nimport { MIN_SCORE_GREEN } from 'app/app.constants';\r\nimport { Competency, CompetencyJol, CompetencyProgress, getConfidence, getIcon, getMastery, getProgress } from 'app/entities/competency.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { CompetencyInformation, LectureUnitInformation, StudentMetrics } from 'app/entities/student-metrics.model';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { LectureUnitType, lectureUnitIcons, lectureUnitTooltips } from 'app/entities/lecture-unit/lectureUnit.model';\r\nimport { isStartPracticeAvailable } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbProgressbar, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompetencyRingsComponent } from '../competency-rings/competency-rings.component';\r\nimport { JudgementOfLearningRatingComponent } from '../judgement-of-learning-rating/judgement-of-learning-rating.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CourseExerciseRowComponent } from 'app/overview/course-exercises/course-exercise-row.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport interface CompetencyAccordionToggleEvent {\r\n    opened: boolean;\r\n    index: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-competency-accordion',\r\n    templateUrl: './competency-accordion.component.html',\r\n    styleUrl: './competency-accordion.component.scss',\r\n    imports: [\r\n        FaIconComponent,\r\n        NgbTooltip,\r\n        NgbProgressbar,\r\n        CompetencyRingsComponent,\r\n        JudgementOfLearningRatingComponent,\r\n        TranslateDirective,\r\n        CourseExerciseRowComponent,\r\n        RouterLink,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class CompetencyAccordionComponent implements OnChanges {\r\n    private router = inject(Router);\r\n\r\n    @Input() course: Course | undefined;\r\n    @Input() competency: CompetencyInformation;\r\n    @Input() metrics: StudentMetrics;\r\n    @Input() index: number;\r\n    @Input() openedIndex: number | undefined;\r\n\r\n    @Output() accordionToggle = new EventEmitter<CompetencyAccordionToggleEvent>();\r\n\r\n    open = false;\r\n    nextExercises: Exercise[] = [];\r\n    nextLectureUnits: LectureUnitInformation[] = [];\r\n    exercisesProgress?: number;\r\n    lectureUnitsProgress?: number;\r\n    confidence: number = 1;\r\n    mastery: number = 0;\r\n    progress: number = 0;\r\n    jolRating?: number;\r\n    promptForRating = false;\r\n\r\n    protected readonly faList = faList;\r\n    protected readonly faFile = faFile;\r\n    protected readonly faFilePdf = faFilePdf;\r\n    protected readonly lectureUnitIcons = lectureUnitIcons;\r\n    protected readonly lectureUnitTooltips = lectureUnitTooltips;\r\n    protected readonly LectureUnitType = LectureUnitType;\r\n    protected readonly getIcon = getIcon;\r\n    protected readonly getProgress = getProgress;\r\n    protected readonly getConfidence = getConfidence;\r\n    protected readonly getMastery = getMastery;\r\n    protected readonly round = round;\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.openedIndex && this.index !== this.openedIndex) {\r\n            this.open = false;\r\n        }\r\n        if (changes.metrics) {\r\n            this.setNextExercises();\r\n            this.setNextLessonUnits();\r\n            this.calculateProgressValues();\r\n\r\n            const courseCompetencies = Object.values(this.metrics.competencyMetrics?.competencyInformation ?? {}).map((competency) => {\r\n                return {\r\n                    ...competency,\r\n                    userProgress: [\r\n                        {\r\n                            progress: this.metrics.competencyMetrics?.progress?.[competency.id] ?? 0,\r\n                            confidence: this.metrics.competencyMetrics?.confidence?.[competency.id] ?? 1,\r\n                        },\r\n                    ],\r\n                } satisfies Competency;\r\n            });\r\n            this.promptForRating = CompetencyJol.shouldPromptForJol(\r\n                this.competency satisfies Competency,\r\n                {\r\n                    progress: this.metrics.competencyMetrics?.progress?.[this.competency.id],\r\n                    confidence: this.metrics.competencyMetrics?.confidence?.[this.competency.id],\r\n                },\r\n                courseCompetencies,\r\n            );\r\n        }\r\n    }\r\n\r\n    setNextExercises() {\r\n        if (!this.metrics) {\r\n            this.nextExercises = [];\r\n        }\r\n\r\n        const courseExercises = this.course?.exercises ?? [];\r\n        const exerciseIdToExercise = Object.fromEntries(courseExercises.map((exercise) => [exercise.id, exercise] as [number, Exercise]));\r\n        const activeCompetencyExercises = (this.metrics.competencyMetrics?.exercises?.[this.competency.id] ?? [])\r\n            .flatMap((exerciseId) => [exerciseIdToExercise[exerciseId]])\r\n            .filter((exercise) => exercise.releaseDate?.isBefore(dayjs()))\r\n            .filter((exercise) => exercise.dueDate?.isAfter(dayjs()) || isStartPracticeAvailable(exercise));\r\n\r\n        const exerciseIdToMaxScore = Object.fromEntries(\r\n            activeCompetencyExercises.map((exercise) => {\r\n                const score =\r\n                    exercise.studentParticipations?.flatMap((participation) => participation.results ?? []).reduce((max, result) => Math.max(max, result.score ?? 0), -1) ?? 0;\r\n                return [exercise.id, score] as [number, number];\r\n            }),\r\n        );\r\n\r\n        const completionThreshold = MIN_SCORE_GREEN;\r\n        this.nextExercises = activeCompetencyExercises\r\n            .filter((exercise) => exercise.id && exerciseIdToMaxScore[exercise.id] <= completionThreshold)\r\n            .sort((a, b) => {\r\n                const scoreA = a.id ? (exerciseIdToMaxScore[a.id] ?? 0) : 0;\r\n                const scoreB = b.id ? (exerciseIdToMaxScore[b.id] ?? 0) : 0;\r\n\r\n                if (scoreA !== scoreB) {\r\n                    return scoreA - scoreB;\r\n                }\r\n                const dueDateA = a.dueDate ?? a.startDate;\r\n                const dueDateB = b.dueDate ?? b.startDate;\r\n                return dueDateA?.diff(dueDateB) ?? 0;\r\n            })\r\n            .slice(0, 5);\r\n    }\r\n\r\n    setNextLessonUnits() {\r\n        if (!this.metrics) {\r\n            this.nextLectureUnits = [];\r\n        }\r\n\r\n        const completedLectureUnits = this.metrics.lectureUnitStudentMetricsDTO?.completed ?? [];\r\n        const competencyLectureUnits = this.metrics.competencyMetrics?.lectureUnits?.[this.competency.id] ?? [];\r\n        this.nextLectureUnits = competencyLectureUnits\r\n            .filter((lectureUnitId) => !completedLectureUnits.includes(lectureUnitId))\r\n            .flatMap((lectureUnitId) => this.metrics.lectureUnitStudentMetricsDTO?.lectureUnitInformation?.[lectureUnitId] ?? [])\r\n            .filter((lectureUnit) => lectureUnit.releaseDate?.isBefore(dayjs()))\r\n            .sort((a, b) => (a.releaseDate?.isBefore(b?.releaseDate) ? -1 : 1))\r\n            .slice(0, Math.max(0, 5 - this.nextExercises.length));\r\n    }\r\n\r\n    calculateProgressValues() {\r\n        const jol = this.metrics.competencyMetrics?.currentJolValues?.[this.competency.id];\r\n        this.jolRating = jol?.jolValue;\r\n        this.exercisesProgress = this.calculateExercisesProgress();\r\n        this.lectureUnitsProgress = this.calculateLectureUnitsProgress();\r\n        const userProgress = this.getUserProgress();\r\n        if (this.jolRating !== undefined) {\r\n            this.progress = this.getProgress(userProgress);\r\n            this.confidence = this.getConfidence(userProgress);\r\n            this.mastery = this.getMastery(userProgress);\r\n        } else {\r\n            this.progress = 0;\r\n            this.confidence = 1;\r\n            this.mastery = 0;\r\n        }\r\n    }\r\n\r\n    calculateExercisesProgress(): number | undefined {\r\n        if (!this.metrics.exerciseMetrics) {\r\n            return undefined;\r\n        }\r\n\r\n        const competencyExercises = this.metrics.competencyMetrics?.exercises?.[this.competency.id];\r\n\r\n        if (competencyExercises === undefined || competencyExercises.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const competencyPoints = competencyExercises\r\n            ?.map((exercise) => ((this.metrics.exerciseMetrics?.score?.[exercise] ?? 0) * (this.metrics.exerciseMetrics?.exerciseInformation?.[exercise]?.maxPoints ?? 0)) / 100)\r\n            .reduce((a, b) => a + b, 0);\r\n        const competencyMaxPoints = competencyExercises\r\n            ?.map((exercise) => this.metrics.exerciseMetrics?.exerciseInformation?.[exercise]?.maxPoints ?? 0)\r\n            .reduce((a, b) => a + b, 0);\r\n\r\n        const progress = (competencyPoints / competencyMaxPoints) * 100;\r\n        return round(progress, 1);\r\n    }\r\n\r\n    calculateLectureUnitsProgress(): number | undefined {\r\n        if (!this.metrics.lectureUnitStudentMetricsDTO) {\r\n            return undefined;\r\n        }\r\n\r\n        const competencyLectureUnits = this.metrics.competencyMetrics?.lectureUnits?.[this.competency.id];\r\n        const releasedLectureUnits = competencyLectureUnits?.filter((lectureUnitId) =>\r\n            this.metrics.lectureUnitStudentMetricsDTO?.lectureUnitInformation?.[lectureUnitId]?.releaseDate?.isBefore(dayjs()),\r\n        );\r\n        if (releasedLectureUnits === undefined || releasedLectureUnits.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const completedLectureUnits = releasedLectureUnits?.filter((lectureUnitId) => this.metrics.lectureUnitStudentMetricsDTO?.completed?.includes(lectureUnitId)).length ?? 0;\r\n        const progress = (completedLectureUnits / releasedLectureUnits.length) * 100;\r\n        return round(progress, 1);\r\n    }\r\n\r\n    getUserProgress(): CompetencyProgress {\r\n        const progress = this.metrics.competencyMetrics?.progress?.[this.competency.id] ?? 0;\r\n        const confidence = this.metrics.competencyMetrics?.confidence?.[this.competency.id] ?? 1;\r\n        return { progress, confidence };\r\n    }\r\n\r\n    toggle() {\r\n        this.open = !this.open;\r\n        this.accordionToggle.emit({ opened: this.open, index: this.index });\r\n    }\r\n\r\n    onRatingChange(newRating: number) {\r\n        if (this.metrics.competencyMetrics) {\r\n            this.metrics.competencyMetrics.currentJolValues = {\r\n                ...this.metrics.competencyMetrics.currentJolValues,\r\n                [this.competency.id]: {\r\n                    competencyId: this.competency.id,\r\n                    jolValue: newRating,\r\n                    judgementTime: dayjs().toString(),\r\n                    competencyProgress: this.progress,\r\n                    competencyConfidence: this.confidence,\r\n                },\r\n            };\r\n            this.calculateProgressValues();\r\n        }\r\n    }\r\n\r\n    navigateToCompetencyDetailPage(event: Event) {\r\n        event.stopPropagation();\r\n        this.router.navigate(['/courses', this.course!.id, 'competencies', this.competency.id]);\r\n    }\r\n}\r\n", "<div>\r\n    <button\r\n        [id]=\"'competency-accordion-' + competency.id\"\r\n        class=\"competency-accordion-header d-flex flex-column flex-sm-row align-items-start align-items-sm-center justify-between gap-2 px-4\"\r\n        [class.closed]=\"!open\"\r\n        (click)=\"toggle()\"\r\n    >\r\n        <h4 class=\"fw-medium mb-0 py-2 col-sm-6 d-flex gap-2\">\r\n            @if (competency.taxonomy) {\r\n                <fa-icon\r\n                    [icon]=\"getIcon(competency.taxonomy)\"\r\n                    [fixedWidth]=\"true\"\r\n                    [ngbTooltip]=\"'artemisApp.courseCompetency.taxonomies.' + competency.taxonomy | artemisTranslate\"\r\n                    container=\"body\"\r\n                />\r\n            }\r\n            {{ competency.title }}\r\n        </h4>\r\n        <div class=\"w-100 d-flex align-items-center gap-4\">\r\n            <div class=\"w-100 d-flex flex-column gap-2\">\r\n                @if (exercisesProgress !== undefined) {\r\n                    <div class=\"d-flex gap-3 align-items-center justify-content-center\">\r\n                        <fa-icon [icon]=\"faList\" [ngbTooltip]=\"'artemisApp.studentAnalyticsDashboard.competencyAccordion.exercises' | artemisTranslate\" />\r\n                        <ngb-progressbar\r\n                            class=\"w-100\"\r\n                            type=\"success overflow-visible\"\r\n                            [value]=\"exercisesProgress\"\r\n                            [max]=\"100\"\r\n                            height=\"0.75rem\"\r\n                            [ngbTooltip]=\"'artemisApp.studentAnalyticsDashboard.competencyAccordion.exerciseProgress' | artemisTranslate: { progress: exercisesProgress }\"\r\n                        />\r\n                    </div>\r\n                }\r\n                @if (lectureUnitsProgress !== undefined) {\r\n                    <div class=\"d-flex gap-3 align-items-center justify-content-center\">\r\n                        <fa-icon [icon]=\"faFilePdf\" [ngbTooltip]=\"'artemisApp.studentAnalyticsDashboard.competencyAccordion.lectures' | artemisTranslate\" />\r\n                        <ngb-progressbar\r\n                            class=\"w-100\"\r\n                            type=\"success overflow-visible\"\r\n                            [value]=\"lectureUnitsProgress\"\r\n                            [max]=\"100\"\r\n                            height=\"0.75rem\"\r\n                            [ngbTooltip]=\"'artemisApp.studentAnalyticsDashboard.competencyAccordion.lectureProgress' | artemisTranslate: { progress: lectureUnitsProgress }\"\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div class=\"competency-rings-container py-2\">\r\n                <jhi-competency-rings\r\n                    [class.muted-competency-rings]=\"promptForRating && this.jolRating === undefined\"\r\n                    [progress]=\"this.progress\"\r\n                    [mastery]=\"this.mastery\"\r\n                    [hideProgress]=\"promptForRating && this.jolRating === undefined\"\r\n                    [playAnimation]=\"false\"\r\n                />\r\n            </div>\r\n        </div>\r\n    </button>\r\n    <div [class.competency-accordion-body-open]=\"open\" [class.competency-accordion-body-closed]=\"!open\" class=\"competency-accordion-body\">\r\n        @if (promptForRating) {\r\n            <div [class.pb-1]=\"course && (nextExercises.length > 0 || nextLectureUnits.length > 0)\">\r\n                <jhi-judgement-of-learning-rating\r\n                    [competencyId]=\"competency.id\"\r\n                    [courseId]=\"course?.id\"\r\n                    [mastery]=\"mastery\"\r\n                    [rating]=\"jolRating\"\r\n                    (ratingChange)=\"onRatingChange($event)\"\r\n                />\r\n            </div>\r\n        }\r\n        @if (course) {\r\n            @if (nextLectureUnits.length > 0 || nextExercises.length > 0) {\r\n                <h5 class=\"fw-medium fs-5 mt-1\" jhiTranslate=\"artemisApp.studentAnalyticsDashboard.competencyAccordion.nextActivities\"></h5>\r\n            }\r\n            @if (nextExercises.length > 0) {\r\n                @for (exercise of nextExercises; track exercise) {\r\n                    <jhi-course-exercise-row [course]=\"course\" [exercise]=\"exercise\" />\r\n                }\r\n            }\r\n            @if (nextLectureUnits.length > 0) {\r\n                @for (lectureUnit of nextLectureUnits; track lectureUnit) {\r\n                    <div class=\"lecture-unit-container d-flex align-items-center my-2 px-2 position-relative\">\r\n                        <a class=\"stretched-link\" [routerLink]=\"['/courses', course.id, 'lectures', lectureUnit.lectureId]\"></a>\r\n                        <div class=\"m-0 fs-5 fw-medium px-2\">\r\n                            <fa-icon\r\n                                class=\"me-2\"\r\n                                [icon]=\"lectureUnit.type === LectureUnitType.ATTACHMENT ? faFile : lectureUnitIcons[lectureUnit.type]\"\r\n                                [ngbTooltip]=\"lectureUnitTooltips[lectureUnit.type] | artemisTranslate\"\r\n                            />\r\n                            {{ lectureUnit.lectureTitle }}\r\n                            -\r\n                            {{ lectureUnit.name }}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            }\r\n            @if (nextExercises.length === 0 && nextLectureUnits.length === 0) {\r\n                <div class=\"alert alert-success\" jhiTranslate=\"artemisApp.studentAnalyticsDashboard.competencyAccordion.congratulations\"></div>\r\n            }\r\n        }\r\n        <button\r\n            (click)=\"navigateToCompetencyDetailPage($event)\"\r\n            class=\"btn btn-primary w-100 my-2\"\r\n            jhiTranslate=\"artemisApp.studentAnalyticsDashboard.button.viewLecturesAndExercises\"\r\n        ></button>\r\n    </div>\r\n</div>\r\n", "import { Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChildren, inject } from '@angular/core';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { CourseDashboardService } from 'app/overview/course-dashboard/course-dashboard.service';\r\nimport { CompetencyInformation, ExerciseMetrics, StudentMetrics } from 'app/entities/student-metrics.model';\r\nimport { ExerciseLateness } from 'app/overview/course-dashboard/course-exercise-lateness/course-exercise-lateness.component';\r\nimport { ExercisePerformance } from 'app/overview/course-dashboard/course-exercise-performance/course-exercise-performance.component';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { IrisSettingsService } from 'app/iris/settings/shared/iris-settings.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { PROFILE_ATLAS, PROFILE_IRIS } from 'app/app.constants';\r\nimport { CompetencyAccordionToggleEvent } from 'app/course/competencies/competency-accordion/competency-accordion.component';\r\nimport { CourseChatbotComponent } from 'app/iris/course-chatbot/course-chatbot.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbProgressbar } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CourseExercisePerformanceComponent } from './course-exercise-performance/course-exercise-performance.component';\r\nimport { CourseExerciseLatenessComponent } from './course-exercise-lateness/course-exercise-lateness.component';\r\nimport { CompetencyAccordionComponent } from 'app/course/competencies/competency-accordion/competency-accordion.component';\r\nimport { FeatureToggleHideDirective } from 'app/shared/feature-toggle/feature-toggle-hide.directive';\r\nimport { FeatureOverlayComponent } from 'app/shared/components/feature-overlay/feature-overlay.component';\r\n\r\n@Component({\r\n    selector: 'jhi-course-dashboard',\r\n    templateUrl: './course-dashboard.component.html',\r\n    styleUrls: ['./course-dashboard.component.scss'],\r\n    imports: [\r\n        CourseChatbotComponent,\r\n        TranslateDirective,\r\n        NgbProgressbar,\r\n        CourseExercisePerformanceComponent,\r\n        CourseExerciseLatenessComponent,\r\n        CompetencyAccordionComponent,\r\n        FeatureToggleHideDirective,\r\n        FeatureOverlayComponent,\r\n    ],\r\n})\r\nexport class CourseDashboardComponent implements OnInit, OnDestroy {\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private alertService = inject(AlertService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private courseDashboardService = inject(CourseDashboardService);\r\n    private irisSettingsService = inject(IrisSettingsService);\r\n    private profileService = inject(ProfileService);\r\n\r\n    courseId: number;\r\n    exerciseId: number;\r\n    points: number = 0;\r\n    maxPoints: number = 0;\r\n    progress: number = 0;\r\n    isLoading = false;\r\n    hasExercises = false;\r\n    hasCompetencies = false;\r\n    exerciseLateness?: ExerciseLateness[];\r\n    exercisePerformance?: ExercisePerformance[];\r\n    irisEnabled = false;\r\n    atlasEnabled = false;\r\n    studentMetrics?: StudentMetrics;\r\n\r\n    private paramSubscription?: Subscription;\r\n    private courseUpdatesSubscription?: Subscription;\r\n    private metricsSubscription?: Subscription;\r\n\r\n    public competencies: CompetencyInformation[] = [];\r\n    public openedAccordionIndex?: number;\r\n\r\n    public course?: Course;\r\n\r\n    protected readonly FeatureToggle = FeatureToggle;\r\n    protected readonly round = round;\r\n\r\n    @ViewChildren('competencyAccordionElement', { read: ElementRef }) competencyAccordions: QueryList<ElementRef>;\r\n\r\n    ngOnInit(): void {\r\n        this.paramSubscription = this.route?.parent?.params.subscribe((params) => {\r\n            this.courseId = parseInt(params['courseId'], 10);\r\n\r\n            this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n                if (profileInfo?.activeProfiles.includes(PROFILE_IRIS)) {\r\n                    this.irisSettingsService.getCombinedCourseSettings(this.courseId).subscribe((settings) => {\r\n                        this.irisEnabled = !!settings?.irisCourseChatSettings?.enabled;\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        this.setCourse(this.courseStorageService.getCourse(this.courseId));\r\n\r\n        this.courseUpdatesSubscription = this.courseStorageService.subscribeToCourseUpdates(this.courseId).subscribe((course: Course) => {\r\n            this.setCourse(course);\r\n        });\r\n\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => (this.atlasEnabled = profileInfo.activeProfiles.includes(PROFILE_ATLAS)));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.paramSubscription?.unsubscribe();\r\n        this.courseUpdatesSubscription?.unsubscribe();\r\n        this.metricsSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Loads the metrics for the course\r\n     */\r\n    loadMetrics() {\r\n        if (this.metricsSubscription) {\r\n            this.metricsSubscription.unsubscribe();\r\n        }\r\n\r\n        this.isLoading = true;\r\n        this.metricsSubscription = this.courseDashboardService.getCourseMetricsForUser(this.courseId).subscribe({\r\n            next: (response) => {\r\n                if (response.body) {\r\n                    this.studentMetrics = response.body;\r\n                    const lectureUnitMetrics = response.body.lectureUnitStudentMetricsDTO ?? {};\r\n\r\n                    // Exercise metrics\r\n                    const exerciseMetrics = response.body.exerciseMetrics ?? {};\r\n                    // Sorted exercises that have a due date in the past\r\n                    let sortedExerciseIds = Object.values(exerciseMetrics?.exerciseInformation ?? {})\r\n                        .filter((exercise) => exercise.dueDate && exercise.dueDate.isBefore(dayjs()))\r\n                        .sort((a, b) => ((a.dueDate ?? a.startDate).isBefore(b.dueDate) ? -1 : 1))\r\n                        .map((exercise) => exercise.id);\r\n\r\n                    // Limit the number of exercises to the last 10\r\n                    sortedExerciseIds = sortedExerciseIds.slice(-10);\r\n\r\n                    this.hasExercises = sortedExerciseIds.length > 0;\r\n                    this.setOverallPerformance(sortedExerciseIds, exerciseMetrics);\r\n                    this.setExercisePerformance(sortedExerciseIds, exerciseMetrics);\r\n                    this.setExerciseLateness(sortedExerciseIds, exerciseMetrics);\r\n\r\n                    // Competency metrics\r\n                    const competencyMetrics = response.body.competencyMetrics ?? {};\r\n                    this.competencies = Object.values(competencyMetrics.competencyInformation ?? {})\r\n                        .filter((competency) => {\r\n                            // Has at least one exercise that has started\r\n                            const exerciseIds = competencyMetrics.exercises?.[competency.id] ?? [];\r\n                            for (const exerciseId of exerciseIds) {\r\n                                const exercise = exerciseMetrics.exerciseInformation?.[exerciseId];\r\n                                if (exercise && exercise.startDate.isBefore(dayjs())) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n\r\n                            // Or has at least one lecture unit that has been released\r\n                            const lectureUnitIds = competencyMetrics.lectureUnits?.[competency.id] ?? [];\r\n                            for (const lectureUnitId of lectureUnitIds) {\r\n                                const lectureUnit = lectureUnitMetrics.lectureUnitInformation?.[lectureUnitId];\r\n                                if (lectureUnit && lectureUnit.releaseDate && lectureUnit.releaseDate.isBefore(dayjs())) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        })\r\n                        .sort((a, b) => {\r\n                            return a.id < b.id ? -1 : 1;\r\n                        });\r\n\r\n                    this.hasCompetencies = this.competencies.length > 0;\r\n                }\r\n                this.isLoading = false;\r\n            },\r\n            error: (errorResponse: HttpErrorResponse) => {\r\n                onError(this.alertService, errorResponse);\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method sets the overall performance, i.e. the points and max points.\r\n     *\r\n     * @param exerciseIds - An array of relevant exercise IDs\r\n     * @param exerciseMetrics - An object containing metrics related to exercises.\r\n     */\r\n    private setOverallPerformance(exerciseIds: number[], exerciseMetrics: ExerciseMetrics) {\r\n        const relevantExercises = Object.values(exerciseMetrics?.exerciseInformation ?? {}).filter((exercise) => exerciseIds.includes(exercise.id));\r\n        const points = relevantExercises.reduce((sum, exercise) => sum + ((exerciseMetrics.score?.[exercise.id] || 0) / 100) * exercise.maxPoints, 0);\r\n        this.points = round(points, 1);\r\n\r\n        const maxPoints = relevantExercises.reduce((sum, exercise) => sum + exercise.maxPoints, 0);\r\n        this.maxPoints = round(maxPoints, 1);\r\n        this.progress = round((points / maxPoints) * 100, 1);\r\n    }\r\n\r\n    /**\r\n     * This method sets the exercise performance data for the course dashboard from the given exercise metrics.\r\n     *\r\n     * @param sortedExerciseIds - An array of exercise IDs sorted in a specific order.\r\n     * @param exerciseMetrics - An object containing metrics related to exercises.\r\n     */\r\n    private setExercisePerformance(sortedExerciseIds: number[], exerciseMetrics: ExerciseMetrics) {\r\n        this.exercisePerformance = sortedExerciseIds.flatMap((exerciseId) => {\r\n            const exerciseInformation = exerciseMetrics?.exerciseInformation?.[exerciseId];\r\n            return exerciseInformation\r\n                ? [\r\n                      {\r\n                          exerciseId: exerciseId,\r\n                          title: exerciseInformation.title,\r\n                          shortName: exerciseInformation.shortName,\r\n                          score: exerciseMetrics.score?.[exerciseId],\r\n                          averageScore: exerciseMetrics.averageScore?.[exerciseId],\r\n                      },\r\n                  ]\r\n                : [];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method sets the exercise lateness data for the course dashboard from the given exercise metrics.\r\n     *\r\n     * @param sortedExerciseIds - An array of exercise IDs sorted in a specific order.\r\n     * @param exerciseMetrics - An object containing metrics related to exercises.\r\n     */\r\n    private setExerciseLateness(sortedExerciseIds: number[], exerciseMetrics: ExerciseMetrics) {\r\n        this.exerciseLateness = sortedExerciseIds.flatMap((exerciseId) => {\r\n            const exerciseInformation = exerciseMetrics?.exerciseInformation?.[exerciseId];\r\n            return exerciseInformation\r\n                ? [\r\n                      {\r\n                          exerciseId: exerciseId,\r\n                          title: exerciseInformation.title,\r\n                          shortName: exerciseInformation.shortName,\r\n                          relativeLatestSubmission: exerciseMetrics.latestSubmission?.[exerciseId],\r\n                          relativeAverageLatestSubmission: exerciseMetrics.averageLatestSubmission?.[exerciseId],\r\n                      },\r\n                  ]\r\n                : [];\r\n        });\r\n    }\r\n\r\n    private setCourse(course?: Course) {\r\n        const shouldLoadMetrics = this.course?.id !== course?.id;\r\n        this.course = course;\r\n        if (this.course && shouldLoadMetrics) {\r\n            this.loadMetrics();\r\n        }\r\n    }\r\n\r\n    handleToggle(event: CompetencyAccordionToggleEvent) {\r\n        this.openedAccordionIndex = event.opened ? event.index : undefined;\r\n    }\r\n\r\n    navigateToLearningPaths() {\r\n        this.router.navigate(['courses', this.courseId, 'learning-path']);\r\n    }\r\n}\r\n", "@if (irisEnabled) {\r\n    <div class=\"chat-container\">\r\n        <jhi-course-chatbot [courseId]=\"courseId\" />\r\n    </div>\r\n}\r\n<div class=\"stats-container\">\r\n    @if (isLoading) {\r\n        <div class=\"d-flex justify-content-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n            </div>\r\n        </div>\r\n    } @else {\r\n        @if (hasExercises) {\r\n            @if (points > 0 || maxPoints > 0) {\r\n                <div class=\"d-sm-flex gap-3 align-items-baseline\">\r\n                    <h4 jhiTranslate=\"artemisApp.courseStudentDashboard.overallPerformance.title\"></h4>\r\n                    <div class=\"flex-grow-1\">\r\n                        <ngb-progressbar type=\"success overflow-visible\" [value]=\"points\" [max]=\"maxPoints\" height=\"1.75rem\">\r\n                            <span class=\"fs-5 mx-2\">{{ points }} / {{ maxPoints }} ({{ progress }}%)</span>\r\n                        </ngb-progressbar>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <jhi-course-exercise-performance [exercisePerformance]=\"exercisePerformance || []\" />\r\n            <jhi-course-exercise-lateness [exerciseLateness]=\"exerciseLateness || []\" />\r\n        } @else {\r\n            <div jhiTranslate=\"artemisApp.courseStudentDashboard.noMetrics\"></div>\r\n        }\r\n        @if (hasCompetencies) {\r\n            <div class=\"competency-accordion-container justify-content-center align-items-center w-100\">\r\n                <h3 jhiTranslate=\"artemisApp.studentAnalyticsDashboard.competencyAccordion.title\"></h3>\r\n                <div class=\"competencies d-flex flex-column gap-2\">\r\n                    @if (studentMetrics) {\r\n                        @for (competency of competencies; track competency.id; let i = $index) {\r\n                            <jhi-competency-accordion\r\n                                #competencyAccordionElement\r\n                                [course]=\"course\"\r\n                                [competency]=\"competency\"\r\n                                [metrics]=\"studentMetrics\"\r\n                                [index]=\"i\"\r\n                                [openedIndex]=\"openedAccordionIndex\"\r\n                                (accordionToggle)=\"handleToggle($event)\"\r\n                            />\r\n                        }\r\n                    }\r\n                </div>\r\n            </div>\r\n        } @else {\r\n            <div jhiTranslate=\"artemisApp.studentAnalyticsDashboard.competencyAccordion.noData\"></div>\r\n        }\r\n        @if (this.course?.learningPathsEnabled || false) {\r\n            <jhi-feature-overlay [enabled]=\"atlasEnabled\">\r\n                <div class=\"competency-accordion-container row justify-content-center w-100\" [jhiFeatureToggleHide]=\"FeatureToggle.LearningPaths\">\r\n                    <button class=\"btn btn-primary mt-2\" (click)=\"navigateToLearningPaths()\" jhiTranslate=\"artemisApp.studentAnalyticsDashboard.button.showLearningPath\"></button>\r\n                </div>\r\n            </jhi-feature-overlay>\r\n        }\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["CourseDashboardService", "http", "inject", "HttpClient", "resourceUrl", "getCourseMetricsForUser", "courseId", "get", "observe", "pipe", "map", "response", "body", "exerciseMetrics", "exerciseInformation", "convertToExerciseInformation", "categories", "teamId", "lectureUnitStudentMetricsDTO", "lectureUnitInformation", "convertToLectureUnitInformation", "competencyMetrics", "competencyInformation", "convertToCompetencyInformation", "currentJolValues", "filterJolWhereMasteryChanged", "Object", "keys", "reduce", "acc", "key", "exerciseCategories", "category", "JSON", "parse", "exercise", "__spreadProps", "__spreadValues", "startDate", "dayjs", "start", "dueDate", "due", "undefined", "type", "mapToExerciseType", "studentAssignedTeamId", "lectureUnit", "releaseDate", "mapToLectureUnitType", "fromEntries", "entries", "filter", "value", "progress", "Number", "confidence", "competencyProgress", "competencyConfidence", "competency", "softDueDate", "ExerciseType", "PROGRAMMING", "MODELING", "QUIZ", "TEXT", "FILE_UPLOAD", "Error", "LectureUnitType", "ATTACHMENT", "EXERCISE", "VIDEO", "ONLINE", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "CourseChatbotComponent", "chatService", "inject", "IrisChatService", "courseId", "ngOnChanges", "changes", "switchTo", "ChatServiceMode", "COURSE", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275template", "CourseChatbotComponent_Conditional_0_Template", "\u0275\u0275conditional", "IrisBaseChatbotComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleProp", "ctx_r0", "YOUR_GRAPH_COLOR", "AVERAGE_GRAPH_COLOR", "\u0275\u0275textInterpolate", "model_r2", "extra", "title", "\u0275\u0275textInterpolate2", "series", "value", "entry_r3", "color", "\u0275\u0275repeaterCreate", "CourseExercisePerformanceComponent_Conditional_13_ng_template_11_Conditional_1_For_7_Template", "\u0275\u0275repeaterTrackByIdentity", "model_r4", "\u0275\u0275repeater", "\u0275\u0275template", "CourseExercisePerformanceComponent_Conditional_13_ng_template_11_Conditional_1_Template", "\u0275\u0275conditional", "isEmpty", "CourseExercisePerformanceComponent_Conditional_13_ng_template_8_Template", "\u0275\u0275templateRefExtractor", "CourseExercisePerformanceComponent_Conditional_13_ng_template_11_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "containerRef_r5", "offsetWidth", "ngxData", "ngxColor", "\u0275\u0275pipeBind1", "yScaleMax", "GraphColors", "BLUE", "YELLOW", "CourseExercisePerformanceComponent", "translateService", "inject", "TranslateService", "exercisePerformance", "yourScoreLabel", "averageScoreLabel", "name", "selectable", "group", "ScaleType", "Ordinal", "domain", "translateServiceSubscription", "constructor", "onLangChange", "subscribe", "setupChart", "ngOnInit", "ngOnDestroy", "unsubscribe", "ngOnChanges", "isDataAvailable", "length", "some", "data", "instant", "map", "performance", "shortName", "toUpperCase", "round", "score", "averageScore", "maxScore", "Math", "max", "flatMap", "ceil", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "CourseExercisePerformanceComponent_Conditional_11_Template", "CourseExercisePerformanceComponent_Conditional_13_Template", "CourseExercisePerformanceComponent_Conditional_14_Template", "TranslateDirective", "HelpIconComponent", "LineChartModule", "LineChartComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleProp", "ctx_r0", "YOUR_GRAPH_COLOR", "AVERAGE_GRAPH_COLOR", "\u0275\u0275textInterpolate", "model_r2", "extra", "title", "\u0275\u0275textInterpolate2", "series", "value", "entry_r3", "color", "\u0275\u0275repeaterCreate", "CourseExerciseLatenessComponent_Conditional_13_ng_template_11_Conditional_1_For_7_Template", "\u0275\u0275repeaterTrackByIdentity", "model_r4", "\u0275\u0275repeater", "\u0275\u0275template", "CourseExerciseLatenessComponent_Conditional_13_ng_template_11_Conditional_1_Template", "\u0275\u0275conditional", "isEmpty", "CourseExerciseLatenessComponent_Conditional_13_ng_template_8_Template", "\u0275\u0275templateRefExtractor", "CourseExerciseLatenessComponent_Conditional_13_ng_template_11_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "containerRef_r5", "offsetWidth", "ngxData", "ngxColor", "\u0275\u0275pipeBind1", "yScaleMax", "GraphColors", "BLUE", "YELLOW", "CourseExerciseLatenessComponent", "translateService", "inject", "TranslateService", "exerciseLateness", "yourLatenessLabel", "averageLatenessLabel", "name", "selectable", "group", "ScaleType", "Ordinal", "domain", "translateServiceSubscription", "constructor", "onLangChange", "subscribe", "setupChart", "ngOnInit", "ngOnDestroy", "unsubscribe", "ngOnChanges", "isDataAvailable", "length", "some", "data", "instant", "map", "lateness", "shortName", "toUpperCase", "round", "relativeLatestSubmission", "relativeAverageLatestSubmission", "maxRelativeTime", "Math", "max", "flatMap", "ceil", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "CourseExerciseLatenessComponent_Conditional_11_Template", "CourseExerciseLatenessComponent_Conditional_13_Template", "CourseExerciseLatenessComponent_Conditional_14_Template", "TranslateDirective", "HelpIconComponent", "LineChartModule", "LineChartComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "mastery", "JudgementOfLearningRatingComponent", "courseCompetencyService", "inject", "CourseCompetencyService", "alertService", "AlertService", "courseId", "competencyId", "rating", "ratingChange", "EventEmitter", "onRate", "event", "undefined", "newRating", "newValue", "setJudgementOfLearning", "subscribe", "emit", "error", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275template", "JudgementOfLearningRatingComponent_Conditional_15_Template", "tmp_0_0", "\u0275\u0275conditional", "StarRatingComponent", "HelpIconComponent", "TranslateDirective", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "getIcon", "competency", "taxonomy", "\u0275\u0275pipeBind1", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "faList", "exercisesProgress", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "faFilePdf", "lectureUnitsProgress", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onRatingChange", "\u0275\u0275classProp", "course", "nextExercises", "length", "nextLectureUnits", "id", "mastery", "jolRating", "exercise_r3", "\u0275\u0275repeaterCreate", "CompetencyAccordionComponent_Conditional_26_Conditional_2_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "\u0275\u0275pureFunction2", "_c1", "lectureUnit_r4", "lectureId", "type", "LectureUnitType", "ATTACHMENT", "faFile", "lectureUnitIcons", "lectureUnitTooltips", "\u0275\u0275textInterpolate2", "lectureTitle", "name", "CompetencyAccordionComponent_Conditional_26_Conditional_3_For_2_Template", "\u0275\u0275template", "CompetencyAccordionComponent_Conditional_26_Conditional_1_Template", "CompetencyAccordionComponent_Conditional_26_Conditional_2_Template", "CompetencyAccordionComponent_Conditional_26_Conditional_3_Template", "CompetencyAccordionComponent_Conditional_26_Conditional_4_Template", "\u0275\u0275conditional", "CompetencyAccordionComponent", "router", "inject", "Router", "metrics", "index", "openedIndex", "accordionToggle", "EventEmitter", "open", "confidence", "progress", "promptForRating", "getProgress", "getConfidence", "getMastery", "round", "ngOnChanges", "changes", "setNextExercises", "setNextLessonUnits", "calculateProgressValues", "courseCompetencies", "Object", "values", "competencyMetrics", "competencyInformation", "map", "__spreadProps", "__spreadValues", "userProgress", "CompetencyJol", "shouldPromptForJol", "courseExercises", "exercises", "exerciseIdToExercise", "fromEntries", "exercise", "activeCompetencyExercises", "flatMap", "exerciseId", "filter", "releaseDate", "isBefore", "dayjs", "dueDate", "isAfter", "isStartPracticeAvailable", "exerciseIdToMaxScore", "score", "studentParticipations", "participation", "results", "reduce", "max", "result", "Math", "completionThreshold", "MIN_SCORE_GREEN", "sort", "a", "b", "scoreA", "scoreB", "dueDateA", "startDate", "dueDateB", "diff", "slice", "completedLectureUnits", "lectureUnitStudentMetricsDTO", "completed", "competencyLectureUnits", "lectureUnits", "lectureUnitId", "includes", "lectureUnitInformation", "lectureUnit", "jol", "currentJolValues", "jolValue", "calculateExercisesProgress", "calculateLectureUnitsProgress", "getUserProgress", "undefined", "exerciseMetrics", "competencyExercises", "competencyPoints", "exerciseInformation", "maxPoints", "competencyMaxPoints", "releasedLectureUnits", "toggle", "emit", "opened", "newRating", "competencyId", "judgementTime", "toString", "competencyProgress", "competencyConfidence", "navigateToCompetencyDetailPage", "event", "stopPropagation", "navigate", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "CompetencyAccordionComponent_Conditional_6_Template", "CompetencyAccordionComponent_Conditional_13_Template", "CompetencyAccordionComponent_Conditional_14_Template", "CompetencyAccordionComponent_Conditional_25_Template", "CompetencyAccordionComponent_Conditional_26_Template", "\u0275\u0275textInterpolate1", "title", "FaIconComponent", "NgbTooltip", "NgbProgressbar", "CompetencyRingsComponent", "JudgementOfLearningRatingComponent", "TranslateDirective", "CourseExerciseRowComponent", "RouterLink", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "courseId", "points", "maxPoints", "\u0275\u0275textInterpolate3", "progress", "\u0275\u0275template", "CourseDashboardComponent_Conditional_4_Conditional_1_Conditional_1_Template", "\u0275\u0275conditional", "exercisePerformance", "\u0275\u0275pureFunction0", "_c1", "exerciseLateness", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "handleToggle", "course", "competency_r3", "studentMetrics", "\u0275$index_75_r4", "openedAccordionIndex", "\u0275\u0275repeaterCreate", "CourseDashboardComponent_Conditional_4_Conditional_3_Conditional_7_For_2_Template", "_forTrack0", "\u0275\u0275repeater", "competencies", "CourseDashboardComponent_Conditional_4_Conditional_3_Conditional_7_Template", "_r5", "navigateToLearningPaths", "atlasEnabled", "FeatureToggle", "LearningPaths", "CourseDashboardComponent_Conditional_4_Conditional_1_Template", "CourseDashboardComponent_Conditional_4_Conditional_2_Template", "CourseDashboardComponent_Conditional_4_Conditional_3_Template", "CourseDashboardComponent_Conditional_4_Conditional_4_Template", "CourseDashboardComponent_Conditional_4_Conditional_5_Template", "hasExercises", "hasCompetencies", "learningPathsEnabled", "CourseDashboardComponent", "courseStorageService", "inject", "CourseStorageService", "alertService", "AlertService", "route", "ActivatedRoute", "router", "Router", "courseDashboardService", "CourseDashboardService", "irisSettingsService", "IrisSettingsService", "profileService", "ProfileService", "exerciseId", "isLoading", "irisEnabled", "paramSubscription", "courseUpdatesSubscription", "metricsSubscription", "round", "competencyAccordions", "ngOnInit", "parent", "params", "subscribe", "parseInt", "getProfileInfo", "profileInfo", "activeProfiles", "includes", "PROFILE_IRIS", "getCombinedCourseSettings", "settings", "irisCourseChatSettings", "enabled", "setCourse", "getCourse", "subscribeToCourseUpdates", "PROFILE_ATLAS", "ngOnDestroy", "unsubscribe", "loadMetrics", "getCourseMetricsForUser", "next", "response", "body", "lectureUnitMetrics", "lectureUnitStudentMetricsDTO", "exerciseMetrics", "sortedExerciseIds", "Object", "values", "exerciseInformation", "filter", "exercise", "dueDate", "isBefore", "dayjs", "sort", "a", "b", "startDate", "map", "id", "slice", "length", "setOverallPerformance", "setExercisePerformance", "setExerciseLateness", "competencyMetrics", "competencyInformation", "competency", "exerciseIds", "exercises", "lectureUnitIds", "lectureUnits", "lectureUnitId", "lectureUnit", "lectureUnitInformation", "releaseDate", "error", "errorResponse", "onError", "relevantExercises", "reduce", "sum", "score", "flatMap", "title", "shortName", "averageScore", "relativeLatestSubmission", "latestSubmission", "relativeAverageLatestSubmission", "averageLatestSubmission", "shouldLoadMetrics", "event", "opened", "index", "undefined", "navigate", "selectors", "viewQuery", "rf", "ctx", "ElementRef", "CourseDashboardComponent_Conditional_0_Template", "CourseDashboardComponent_Conditional_3_Template", "CourseDashboardComponent_Conditional_4_Template", "CourseChatbotComponent", "TranslateDirective", "NgbProgressbar", "CourseExercisePerformanceComponent", "CourseExerciseLatenessComponent", "CompetencyAccordionComponent", "FeatureToggleHideDirective", "FeatureOverlayComponent", "styles"]
}
