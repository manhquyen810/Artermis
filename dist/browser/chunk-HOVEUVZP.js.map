{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/category-selector/category-selector.component.ts", "src/main/webapp/app/shared/category-selector/category-selector.component.html"],
  "sourcesContent": ["import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { ColorSelectorComponent } from 'app/shared/color-selector/color-selector.component';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { MatAutocomplete, MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\nimport { COMMA, ENTER, TAB } from '@angular/cdk/keycodes';\r\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatChipGrid, MatChipInput, MatChipInputEvent, MatChipRemove, MatChipRow } from '@angular/material/chips';\r\nimport { Observable, map, startWith } from 'rxjs';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaqCategory } from 'app/entities/faq-category.model';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { AsyncPipe, NgStyle } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\nconst DEFAULT_COLORS = ['#6ae8ac', '#9dca53', '#94a11c', '#691b0b', '#ad5658', '#1b97ca', '#0d3cc2', '#0ab84f'];\r\n\r\n@Component({\r\n    selector: 'jhi-category-selector',\r\n    templateUrl: './category-selector.component.html',\r\n    styleUrls: ['./category-selector.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        MatFormField,\r\n        MatChipGrid,\r\n        MatChipRow,\r\n        NgStyle,\r\n        MatChipRemove,\r\n        FaIconComponent,\r\n        FormsModule,\r\n        MatAutocompleteTrigger,\r\n        MatChipInput,\r\n        ReactiveFormsModule,\r\n        MatAutocomplete,\r\n        MatOption,\r\n        ColorSelectorComponent,\r\n        AsyncPipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class CategorySelectorComponent implements OnChanges {\r\n    protected readonly faTimes = faTimes;\r\n    protected readonly separatorKeysCodes = [ENTER, COMMA, TAB];\r\n    private readonly COLOR_SELECTOR_HEIGHT = 150;\r\n\r\n    /** the selected categories, which can be manipulated by the user in the UI */\r\n    @Input() categories: ExerciseCategory[] | FaqCategory[];\r\n    /** the existing categories used for auto-completion, might include duplicates */\r\n    @Input() existingCategories: ExerciseCategory[] | FaqCategory[];\r\n\r\n    @ViewChild(ColorSelectorComponent, { static: false }) colorSelector: ColorSelectorComponent;\r\n    @ViewChild('categoryInput') categoryInput: ElementRef<HTMLInputElement>;\r\n    @ViewChild(MatAutocompleteTrigger) autocompleteTrigger: MatAutocompleteTrigger;\r\n\r\n    @Output() selectedCategories = new EventEmitter<ExerciseCategory[]>();\r\n\r\n    categoryColors = DEFAULT_COLORS;\r\n    selectedCategory: ExerciseCategory;\r\n    uniqueCategoriesForAutocomplete: Observable<string[]>;\r\n\r\n    categoryCtrl = new FormControl<string | undefined>(undefined);\r\n\r\n    ngOnChanges() {\r\n        this.uniqueCategoriesForAutocomplete = this.categoryCtrl.valueChanges.pipe(\r\n            startWith(undefined),\r\n            map((userInput: string | undefined) => (userInput ? this.filterCategories(userInput) : this.existingCategoriesAsStringArray().slice())),\r\n            // remove duplicated values\r\n            map((categories: string[]) => [...new Set(categories)]),\r\n            // remove categories that have already been selected in the exercise\r\n            map((categories: string[]) => categories.filter((category) => !this.categoriesAsStringArray().includes(category.toLowerCase()))),\r\n        );\r\n    }\r\n\r\n    private categoriesAsStringArray(): string[] {\r\n        if (!this.categories) {\r\n            return [];\r\n        }\r\n        return this.categories.map((exerciseCategory) => exerciseCategory.category?.toLowerCase() ?? '');\r\n    }\r\n\r\n    private existingCategoriesAsStringArray(): string[] {\r\n        if (!this.existingCategories) {\r\n            return [];\r\n        }\r\n        return this.existingCategories.map((exerciseCategory) => exerciseCategory.category?.toLowerCase() ?? '');\r\n    }\r\n\r\n    // if the user types in something, we need to filter for the matching categories\r\n    private filterCategories(value: string): string[] {\r\n        const filterValue = value.toLowerCase();\r\n        return this.existingCategories.filter((category) => category.category!.toLowerCase().includes(filterValue)).map((category) => category.category!.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * open colorSelector for tagItem\r\n     * @param {MouseEvent} event\r\n     * @param {ExerciseCategory} tagItem\r\n     */\r\n    openColorSelector(event: MouseEvent, tagItem: ExerciseCategory) {\r\n        this.selectedCategory = tagItem;\r\n        this.colorSelector.openColorSelector(event, undefined, this.COLOR_SELECTOR_HEIGHT);\r\n    }\r\n\r\n    /**\r\n     * set color of selected category\r\n     * @param {string} selectedColor\r\n     */\r\n    onSelectedColor(selectedColor: string): void {\r\n        this.selectedCategory.color = selectedColor;\r\n        this.categories = this.categories.map((category) => {\r\n            if (category.category === this.selectedCategory.category) {\r\n                return this.selectedCategory;\r\n            }\r\n            return category;\r\n        });\r\n        this.selectedCategories.emit(this.categories);\r\n    }\r\n\r\n    /**\r\n     * set color if not selected and add exerciseCategory\r\n     * @param event a new category was added\r\n     */\r\n    onItemAdd(event: MatChipInputEvent) {\r\n        const categoryString = (event.value || '').trim();\r\n        // prevent adding duplicated categories\r\n        const categoryArray = this.categoriesAsStringArray();\r\n        if (categoryString && !categoryArray.includes(categoryString) && categoryArray.length < 2) {\r\n            let category = this.findExistingCategory(categoryString);\r\n            if (!category) {\r\n                category = this.createCategory(categoryString);\r\n            }\r\n            category.category = categoryString;\r\n            if (!category.color) {\r\n                category.color = this.chooseRandomColor();\r\n            }\r\n            if (this.categories) {\r\n                this.categories.push(category);\r\n            } else {\r\n                this.categories = [category];\r\n            }\r\n            this.selectedCategories.emit(this.categories);\r\n        }\r\n        // Clear the input value\r\n        event.chipInput!.clear();\r\n        this.categoryCtrl.setValue(null);\r\n        this.autocompleteTrigger.closePanel();\r\n    }\r\n\r\n    private createCategory(categoryString: string): ExerciseCategory {\r\n        return new ExerciseCategory(categoryString, this.chooseRandomColor());\r\n    }\r\n\r\n    private chooseRandomColor(): string {\r\n        const randomIndex = Math.floor(Math.random() * this.categoryColors.length);\r\n        return this.categoryColors[randomIndex];\r\n    }\r\n\r\n    // only invoked for autocomplete\r\n    onItemSelect(event: MatAutocompleteSelectedEvent): void {\r\n        const categoryString = (event.option.value || '').trim();\r\n        const categoryArray = this.categoriesAsStringArray();\r\n        if (categoryString && !categoryArray.includes(categoryString) && categoryArray.length < 2) {\r\n            // check if there is an existing category and reuse the same color\r\n            let category = this.findExistingCategory(categoryString);\r\n            if (!category) {\r\n                category = this.createCategory(categoryString);\r\n            }\r\n\r\n            this.categories.push(category);\r\n            this.selectedCategories.emit(this.categories);\r\n        }\r\n        this.categoryInput.nativeElement.value = '';\r\n        this.categoryCtrl.setValue(null);\r\n    }\r\n\r\n    private findExistingCategory(categoryString: string): ExerciseCategory | undefined {\r\n        return this.existingCategories.find((existingCategory) => existingCategory.category?.toLowerCase() === categoryString.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * cancel colorSelector and remove exerciseCategory\r\n     * @param {ExerciseCategory} categoryToRemove\r\n     */\r\n    onItemRemove(categoryToRemove: ExerciseCategory): void {\r\n        this.colorSelector.cancelColorSelector();\r\n        this.categories = this.categories.filter((exerciseCategory) => exerciseCategory.category !== categoryToRemove.category);\r\n        this.selectedCategories.emit(this.categories);\r\n    }\r\n}\r\n", "<mat-form-field class=\"category-chip-list\" appearance=\"outline\">\r\n    <mat-chip-grid #chipList aria-label=\"Category selection\">\r\n        @for (category of categories; track category) {\r\n            <mat-chip-row (removed)=\"onItemRemove(category)\" class=\"category-chip\">\r\n                <div class=\"custom-tag\" [ngStyle]=\"{ backgroundColor: category.color }\">\r\n                    <span class=\"category-name\" (click)=\"openColorSelector($event, category)\">\r\n                        {{ category.category }}\r\n                    </span>\r\n                    <button matChipRemove class=\"remove-button\">\r\n                        <fa-icon [icon]=\"faTimes\" class=\"category-chip-remove\" />\r\n                    </button>\r\n                </div>\r\n            </mat-chip-row>\r\n        }\r\n        <input\r\n            id=\"field_categories\"\r\n            [hidden]=\"categories && categories.length >= 2\"\r\n            class=\"category-chip-input\"\r\n            #categoryInput\r\n            [placeholder]=\"'artemisApp.exercise.tagPlaceholder' | artemisTranslate\"\r\n            [formControl]=\"categoryCtrl\"\r\n            [matAutocomplete]=\"auto\"\r\n            [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            (matChipInputTokenEnd)=\"onItemAdd($event)\"\r\n        />\r\n    </mat-chip-grid>\r\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onItemSelect($event)\">\r\n        @for (category of uniqueCategoriesForAutocomplete | async; track category) {\r\n            <mat-option [value]=\"category\" class=\"tag-option\">\r\n                {{ category }}\r\n            </mat-option>\r\n        }\r\n    </mat-autocomplete>\r\n</mat-form-field>\r\n<jhi-color-selector [tagColors]=\"categoryColors\" (selectedColor)=\"onSelectedColor($event)\" />\r\n"],
  "mappings": "+wBCGYA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,eAAA,CAAA,EAAcC,EAAA,UAAA,UAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAWF,EAAAG,aAAAP,CAAA,CAAsB,CAAA,CAAA,EAC3CH,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EAA4BC,EAAA,QAAA,SAAAS,EAAA,CAAA,IAAAR,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAK,kBAAAD,EAAAR,CAAA,CAAmC,CAAA,CAAA,EACpEH,EAAA,CAAA,EACJa,EAAA,EACAb,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EACID,EAAA,EAAA;yBAAA,EAAAc,EAAA,GAAA,UAAA,EAAA,EACJd,EAAA,GAAA;qBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;SAAA,kCATgCe,EAAA,CAAA,EAAAC,EAAA,UAAAC,EAAA,EAAAC,GAAAf,EAAAgB,KAAA,CAAA,EAEhBJ,EAAA,CAAA,EAAAK,EAAA;0BAAAjB,EAAAkB,SAAA;qBAAA,EAGSN,EAAA,CAAA,EAAAC,EAAA,OAAAT,EAAAe,OAAA,6BAoBrBtB,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,aAAA,EAAA,EACID,EAAA,CAAA,EACJa,EAAA,EACJb,EAAA,EAAA;SAAA,0BAHgBe,EAAA,EAAAC,EAAA,QAAAO,CAAA,EACRR,EAAA,EAAAK,EAAA;kBAAAG,EAAA;aAAA,GDdhB,IAAMC,GAAiB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,SAAS,EAyBjGC,IAAyB,IAAA,CAAhC,MAAOA,CAAyB,CACfH,QAAUA,EACVI,mBAAqB,CAACC,GAAOC,IAAOC,CAAG,EACzCC,sBAAwB,IAGhCC,WAEAC,mBAE6CC,cAC1BC,cACOC,oBAEzBC,mBAAqB,IAAIC,EAEnCC,eAAiBd,GACjBe,iBACAC,gCAEAC,aAAe,IAAIC,EAAgCC,MAAS,EAE5DC,aAAW,CACP,KAAKJ,gCAAkC,KAAKC,aAAaI,aAAaC,KAClEC,EAAUJ,MAAS,EACnBK,EAAKC,GAAmCA,EAAY,KAAKC,iBAAiBD,CAAS,EAAI,KAAKE,gCAA+B,EAAGC,MAAK,CAAG,EAEtIJ,EAAKjB,GAAyB,CAAC,GAAG,IAAIsB,IAAItB,CAAU,CAAC,CAAC,EAEtDiB,EAAKjB,GAAyBA,EAAWuB,OAAQjC,GAAa,CAAC,KAAKkC,wBAAuB,EAAGC,SAASnC,EAASoC,YAAW,CAAE,CAAC,CAAC,CAAC,CAExI,CAEQF,yBAAuB,CAC3B,OAAK,KAAKxB,WAGH,KAAKA,WAAWiB,IAAKU,GAAqBA,EAAiBrC,UAAUoC,YAAW,GAAM,EAAE,EAFpF,CAAA,CAGf,CAEQN,iCAA+B,CACnC,OAAK,KAAKnB,mBAGH,KAAKA,mBAAmBgB,IAAKU,GAAqBA,EAAiBrC,UAAUoC,YAAW,GAAM,EAAE,EAF5F,CAAA,CAGf,CAGQP,iBAAiBS,EAAa,CAClC,IAAMC,EAAcD,EAAMF,YAAW,EACrC,OAAO,KAAKzB,mBAAmBsB,OAAQjC,GAAaA,EAASA,SAAUoC,YAAW,EAAGD,SAASI,CAAW,CAAC,EAAEZ,IAAK3B,GAAaA,EAASA,SAAUoC,YAAW,CAAE,CAClK,CAOA7C,kBAAkBiD,EAAmBC,EAAyB,CAC1D,KAAKvB,iBAAmBuB,EACxB,KAAK7B,cAAcrB,kBAAkBiD,EAAOlB,OAAW,KAAKb,qBAAqB,CACrF,CAMAiC,gBAAgBC,EAAqB,CACjC,KAAKzB,iBAAiBpB,MAAQ6C,EAC9B,KAAKjC,WAAa,KAAKA,WAAWiB,IAAK3B,GAC/BA,EAASA,WAAa,KAAKkB,iBAAiBlB,SACrC,KAAKkB,iBAETlB,CACV,EACD,KAAKe,mBAAmB6B,KAAK,KAAKlC,UAAU,CAChD,CAMAmC,UAAUL,EAAwB,CAC9B,IAAMM,GAAkBN,EAAMF,OAAS,IAAIS,KAAI,EAEzCC,EAAgB,KAAKd,wBAAuB,EAClD,GAAIY,GAAkB,CAACE,EAAcb,SAASW,CAAc,GAAKE,EAAcC,OAAS,EAAG,CACvF,IAAIjD,EAAW,KAAKkD,qBAAqBJ,CAAc,EAClD9C,IACDA,EAAW,KAAKmD,eAAeL,CAAc,GAEjD9C,EAASA,SAAW8C,EACf9C,EAASF,QACVE,EAASF,MAAQ,KAAKsD,kBAAiB,GAEvC,KAAK1C,WACL,KAAKA,WAAW2C,KAAKrD,CAAQ,EAE7B,KAAKU,WAAa,CAACV,CAAQ,EAE/B,KAAKe,mBAAmB6B,KAAK,KAAKlC,UAAU,CAChD,CAEA8B,EAAMc,UAAWC,MAAK,EACtB,KAAKnC,aAAaoC,SAAS,IAAI,EAC/B,KAAK1C,oBAAoB2C,WAAU,CACvC,CAEQN,eAAeL,EAAsB,CACzC,OAAO,IAAIY,EAAiBZ,EAAgB,KAAKM,kBAAiB,CAAE,CACxE,CAEQA,mBAAiB,CACrB,IAAMO,EAAcC,KAAKC,MAAMD,KAAKE,OAAM,EAAK,KAAK7C,eAAegC,MAAM,EACzE,OAAO,KAAKhC,eAAe0C,CAAW,CAC1C,CAGAI,aAAavB,EAAmC,CAC5C,IAAMM,GAAkBN,EAAMwB,OAAO1B,OAAS,IAAIS,KAAI,EAChDC,EAAgB,KAAKd,wBAAuB,EAClD,GAAIY,GAAkB,CAACE,EAAcb,SAASW,CAAc,GAAKE,EAAcC,OAAS,EAAG,CAEvF,IAAIjD,EAAW,KAAKkD,qBAAqBJ,CAAc,EAClD9C,IACDA,EAAW,KAAKmD,eAAeL,CAAc,GAGjD,KAAKpC,WAAW2C,KAAKrD,CAAQ,EAC7B,KAAKe,mBAAmB6B,KAAK,KAAKlC,UAAU,CAChD,CACA,KAAKG,cAAcoD,cAAc3B,MAAQ,GACzC,KAAKlB,aAAaoC,SAAS,IAAI,CACnC,CAEQN,qBAAqBJ,EAAsB,CAC/C,OAAO,KAAKnC,mBAAmBuD,KAAMC,GAAqBA,EAAiBnE,UAAUoC,YAAW,IAAOU,EAAeV,YAAW,CAAE,CACvI,CAMA/C,aAAa+E,EAAkC,CAC3C,KAAKxD,cAAcyD,oBAAmB,EACtC,KAAK3D,WAAa,KAAKA,WAAWuB,OAAQI,GAAqBA,EAAiBrC,WAAaoE,EAAiBpE,QAAQ,EACtH,KAAKe,mBAAmB6B,KAAK,KAAKlC,UAAU,CAChD,4CAnJSN,EAAyB,2BAAzBA,EAAyBkE,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,MAUvBE,EAAsB,CAAA,YAEtBC,EAAsB,CAAA,24BCrDrC/F,EAAA,EAAA,iBAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,gBAAA,EAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAiG,EAAA,EAAAC,GAAA,GAAA,EAAA,KAAA,KAAAC,CAAA,EAYAlG,EAAA,EAAA,QAAA,EAAA,CAAA,0BAUIC,EAAA,uBAAA,SAAAS,EAAA,CAAAyF,OAAAhG,EAAAiG,CAAA,EAAA5F,EAAwBqF,EAAA5B,UAAAvD,CAAA,CAAiB,CAAA,CAAA,EAV7CE,EAAA,EAYJb,EAAA,GAAA;KAAA,EAAAa,EAAA,EACAb,EAAA,GAAA;KAAA,EAAAC,EAAA,GAAA,mBAAA,EAAA,CAAA,EAA0CC,EAAA,iBAAA,SAAAS,EAAA,CAAAyF,OAAAhG,EAAAiG,CAAA,EAAA5F,EAAkBqF,EAAAV,aAAAzE,CAAA,CAAoB,CAAA,CAAA,EAC5EX,EAAA,GAAA;SAAA,EAAAiG,EAAA,GAAAK,GAAA,EAAA,EAAA,KAAA,KAAAH,CAAA,gBAKJtF,EAAA,EACJb,EAAA,GAAA;CAAA,EAAAa,EAAA,EACAb,EAAA,GAAA;CAAA,EAAAC,EAAA,GAAA,qBAAA,CAAA,EAAiDC,EAAA,gBAAA,SAAAS,EAAA,CAAAyF,OAAAhG,EAAAiG,CAAA,EAAA5F,EAAiBqF,EAAA/B,gBAAApD,CAAA,CAAuB,CAAA,CAAA,EAAzFE,EAAA,EACAb,EAAA,GAAA;CAAA,6BAlCQe,EAAA,CAAA,EAAAwF,EAAAT,EAAA/D,UAAA,EAcIhB,EAAA,CAAA,EAAAC,EAAA,SAAA8E,EAAA/D,YAAA+D,EAAA/D,WAAAuC,QAAA,CAAA,EAA+C,cAAAkC,EAAA,EAAA,EAAA,oCAAA,CAAA,EAGwB,cAAAV,EAAArD,YAAA,EAC3C,kBAAAgE,CAAA,EACJ,kBAAAC,CAAA,EACI,gCAAAZ,EAAApE,kBAAA,EAMhCX,EAAA,CAAA,EAAAwF,EAAAC,EAAA,GAAA,EAAAV,EAAAtD,+BAAA,CAAA,EAOYzB,EAAA,CAAA,EAAAC,EAAA,YAAA8E,EAAAxD,cAAA,kBDXZqE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAWC,EAAAC,EACXnB,EACAoB,GACAC,EAAmBC,EACnBC,GACAC,EACAzB,EACA0B,EACAC,CAAoB,EAAAC,OAAA,CAAA;CAAA,EAAAC,cAAA,CAAA,CAAA,SAGfnG,CAAyB,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "category_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onItemRemove", "$event", "openColorSelector", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "color", "\u0275\u0275textInterpolate1", "category", "faTimes", "category_r5", "DEFAULT_COLORS", "CategorySelectorComponent", "separatorKeysCodes", "ENTER", "COMMA", "TAB", "COLOR_SELECTOR_HEIGHT", "categories", "existingCategories", "colorSelector", "categoryInput", "autocompleteTrigger", "selectedCategories", "EventEmitter", "categoryColors", "selectedCategory", "uniqueCategoriesForAutocomplete", "categoryCtrl", "FormControl", "undefined", "ngOnChanges", "valueChanges", "pipe", "startWith", "map", "userInput", "filterCategories", "existingCategoriesAsStringArray", "slice", "Set", "filter", "categoriesAsStringArray", "includes", "toLowerCase", "exerciseCategory", "value", "filterValue", "event", "tagItem", "onSelectedColor", "selectedColor", "emit", "onItemAdd", "categoryString", "trim", "categoryArray", "length", "findExistingCategory", "createCategory", "chooseRandomColor", "push", "chipInput", "clear", "setValue", "closePanel", "ExerciseCategory", "randomIndex", "Math", "floor", "random", "onItemSelect", "option", "nativeElement", "find", "existingCategory", "categoryToRemove", "cancelColorSelector", "selectors", "viewQuery", "rf", "ctx", "ColorSelectorComponent", "MatAutocompleteTrigger", "\u0275\u0275repeaterCreate", "CategorySelectorComponent_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "i0", "_r1", "CategorySelectorComponent_For_16_Template", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "auto_r7", "chipList_r6", "MatFormField", "MatChipGrid", "MatChipRow", "NgStyle", "MatChipRemove", "FaIconComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "MatChipInput", "ReactiveFormsModule", "FormControlDirective", "MatAutocomplete", "MatOption", "AsyncPipe", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
