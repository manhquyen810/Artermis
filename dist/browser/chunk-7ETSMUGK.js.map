{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/exams/exam-import/exam-import-paging.service.ts", "src/main/webapp/app/exam/manage/exams/exam-import/exam-import.component.ts", "src/main/webapp/app/exam/manage/exams/exam-import/exam-import.component.html"],
  "sourcesContent": ["import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { PagingService } from 'app/exercises/shared/manage/paging.service';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\ntype EntityResponseType = SearchResult<Exam>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExamImportPagingService extends PagingService<Exam> {\r\n    private http = inject(HttpClient);\r\n\r\n    private static readonly RESOURCE_URL = 'api/exam/exams';\r\n\r\n    /**\r\n     * Method to get (possible) exams for import from the server\r\n     * @param pageable object specifying search parameters\r\n     * @param options withExercises if only exams with exercises should be included in the results\r\n     */\r\n    override search(pageable: SearchTermPageableSearch, options: { withExercises: boolean }): Observable<EntityResponseType> {\r\n        const params = this.createHttpParams(pageable);\r\n        return this.http\r\n            .get(`${ExamImportPagingService.RESOURCE_URL}?withExercises=${options.withExercises}`, { params, observe: 'response' })\r\n            .pipe(map((resp: HttpResponse<EntityResponseType>) => resp && resp.body!));\r\n    }\r\n}\r\n", "import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Component, inject, signal, viewChild } from '@angular/core';\r\nimport { NgbHighlight, NgbPagination } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExerciseGroup } from 'app/entities/exercise-group.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { ExamExerciseImportComponent } from 'app/exam/manage/exams/exam-exercise-import/exam-exercise-import.component';\r\nimport { ImportComponent } from 'app/shared/import/import.component';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { ExamImportPagingService } from 'app/exam/manage/exams/exam-import/exam-import-paging.service';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-import',\r\n    templateUrl: './exam-import.component.html',\r\n    imports: [FormsModule, TranslateDirective, SortDirective, SortByDirective, FaIconComponent, NgbHighlight, ButtonComponent, NgbPagination, ExamExerciseImportComponent],\r\n})\r\nexport class ExamImportComponent extends ImportComponent<Exam> {\r\n    private examManagementService = inject(ExamManagementService);\r\n    private alertService = inject(AlertService);\r\n\r\n    // boolean to indicate, if the import modal should include the exerciseGroup selection subsequently.\r\n    subsequentExerciseGroupSelection = signal<boolean>(false);\r\n    // Values to specify the target of the exercise group import\r\n    targetCourseId = signal<number | undefined>(undefined);\r\n    targetExamId = signal<number | undefined>(undefined);\r\n\r\n    examExerciseImportComponent = viewChild.required(ExamExerciseImportComponent);\r\n\r\n    exam?: Exam;\r\n    isImportingExercises = false;\r\n    isImportInSameCourse = false;\r\n\r\n    constructor() {\r\n        const pagingService = inject(ExamImportPagingService);\r\n        super(pagingService);\r\n    }\r\n\r\n    /**\r\n     * After the user has chosen an Exam, this method is called to load the exercise groups for the selected exam\r\n     * @param exam the exam for which the exercise groups should be loaded\r\n     */\r\n    openExerciseSelection(exam: Exam) {\r\n        this.examManagementService.findWithExercisesAndWithoutCourseId(exam.id!).subscribe({\r\n            next: (examRes: HttpResponse<Exam>) => {\r\n                this.exam = examRes.body!;\r\n                this.isImportInSameCourse = this.exam.course?.id === this.targetCourseId();\r\n            },\r\n            error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method to map the Map<ExerciseGroup, Set<Exercises>> selectedExercises to an ExerciseGroup[] with Exercises[] each\r\n     * and to perform the REST-Call to import the ExerciseGroups to the specified exam.\r\n     * Called once when user is importing the exam\r\n     */\r\n    performImportOfExerciseGroups() {\r\n        if (this.subsequentExerciseGroupSelection() && this.exam && this.targetExamId() && this.targetCourseId()) {\r\n            // The validation of the selected exercises is only called when the user desires to import the exam\r\n            if (!this.examExerciseImportComponent().validateUserInput()) {\r\n                this.alertService.error('artemisApp.examManagement.exerciseGroup.importModal.invalidExerciseConfiguration');\r\n                return;\r\n            }\r\n            this.isImportingExercises = true;\r\n            // The child component provides us with the selected exercise groups and exercises\r\n            this.exam.exerciseGroups = this.examExerciseImportComponent().mapSelectedExercisesToExerciseGroups();\r\n            this.examManagementService.importExerciseGroup(this.targetCourseId()!, this.targetExamId()!, this.exam.exerciseGroups!).subscribe({\r\n                next: (httpResponse: HttpResponse<ExerciseGroup[]>) => {\r\n                    this.isImportingExercises = false;\r\n                    // Close-Variant 2: Provide the component with all the exercise groups and exercises of the exam\r\n                    this.activeModal.close(httpResponse.body!);\r\n                },\r\n                error: (httpErrorResponse: HttpErrorResponse) => {\r\n                    // Case: Server-Site Validation of the Programming Exercises failed\r\n                    const errorKey = httpErrorResponse.error?.errorKey;\r\n                    if (errorKey === 'invalidKey') {\r\n                        // The Server sends back all the exercise groups and exercises and removed the shortName / title for all conflicting programming exercises\r\n                        this.exam!.exerciseGroups = httpErrorResponse.error.params.exerciseGroups!;\r\n                        // The updateMapsAfterRejectedImport Method is called to update the displayed exercises in the child component\r\n                        this.examExerciseImportComponent().updateMapsAfterRejectedImportDueToInvalidProjectKey();\r\n                        const numberOfInvalidProgrammingExercises = httpErrorResponse.error.numberOfInvalidProgrammingExercises;\r\n                        this.alertService.error('artemisApp.examManagement.exerciseGroup.importModal.invalidKey', { number: numberOfInvalidProgrammingExercises });\r\n                    } else if (errorKey === 'duplicatedProgrammingExerciseShortName' || errorKey === 'duplicatedProgrammingExerciseTitle') {\r\n                        this.exam!.exerciseGroups = httpErrorResponse.error.params.exerciseGroups!;\r\n                        this.examExerciseImportComponent().updateMapsAfterRejectedImportDueToDuplicatedShortNameOrTitle();\r\n                        this.alertService.error('artemisApp.examManagement.exerciseGroup.importModal.' + errorKey);\r\n                    } else {\r\n                        onError(this.alertService, httpErrorResponse);\r\n                    }\r\n                    this.isImportingExercises = false;\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    protected override createOptions(): object {\r\n        return { withExercises: this.subsequentExerciseGroupSelection() };\r\n    }\r\n}\r\n", "<form>\r\n    <div class=\"modal-header\">\r\n        @if (!subsequentExerciseGroupSelection()) {\r\n            <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.examManagement.importExam\"></h4>\r\n        }\r\n        @if (subsequentExerciseGroupSelection()) {\r\n            <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.examManagement.exerciseGroup.import\"></h4>\r\n        }\r\n        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <!-- State 1: Selection of an exam for import -->\r\n    @if (!exam) {\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-group form-inline\">\r\n                <span jhiTranslate=\"artemisApp.examManagement.import.search\"></span>:\r\n                <input class=\"form-control ms-2\" type=\"text\" name=\"searchExcercise\" [(ngModel)]=\"searchTerm\" />\r\n                @if (loading) {\r\n                    <span class=\"ms-3\" jhiTranslate=\"artemisApp.exercise.import.loading\"></span>\r\n                }\r\n            </div>\r\n            <table class=\"table table-striped flex\">\r\n                <thead class=\"thead-dark\">\r\n                    <tr jhiSort [(predicate)]=\"sortedColumn\" [(ascending)]=\"listSorting\" (sortChange)=\"sortRows()\" class=\"flex-row\">\r\n                        <th jhiSortBy=\"ID\" class=\"col-1\">\r\n                            <span>#</span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"TITLE\" class=\"col-4\">\r\n                            <span jhiTranslate=\"artemisApp.exercise.import.table.title\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"COURSE_TITLE\" class=\"col-4\">\r\n                            <span jhiTranslate=\"artemisApp.exercise.import.table.course\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th jhiSortBy=\"EXAM_MODE\" class=\"col-4\">\r\n                            <span jhiTranslate=\"artemisApp.examManagement.testExam.examMode\"></span>\r\n                            <fa-icon [icon]=\"faSort\" />\r\n                        </th>\r\n                        <th class=\"col-1\"></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (exam of content.resultsOnPage; track trackId($index, exam)) {\r\n                        <tr class=\"flex-row\">\r\n                            <td class=\"col-1\">\r\n                                <span [class.ngb-highlight]=\"'' + exam.id === searchTerm\"> {{ exam.id }}</span>\r\n                            </td>\r\n                            <td class=\"text-break col-4\">\r\n                                <ngb-highlight [result]=\"exam.title\" [term]=\"searchTerm\" />\r\n                            </td>\r\n                            <td class=\"text-break col-4\">\r\n                                <ngb-highlight [result]=\"exam.course!.title\" [term]=\"searchTerm\" />\r\n                            </td>\r\n                            <td class=\"text-break col-2\">\r\n                                @if (!exam.testExam) {\r\n                                    <span class=\"badge bg-success\" jhiTranslate=\"artemisApp.examManagement.testExam.realExam\"></span>\r\n                                }\r\n                                @if (exam.testExam) {\r\n                                    <span class=\"badge bg-primary\" jhiTranslate=\"artemisApp.examManagement.testExam.testExam\"></span>\r\n                                }\r\n                            </td>\r\n                            <td class=\"col-1\">\r\n                                @if (!subsequentExerciseGroupSelection()) {\r\n                                    <jhi-button (onClick)=\"selectImport(exam)\" [title]=\"'artemisApp.exercise.import.table.doImport'\" />\r\n                                }\r\n                                @if (subsequentExerciseGroupSelection()) {\r\n                                    <jhi-button (onClick)=\"openExerciseSelection(exam)\" [title]=\"'artemisApp.examManagement.exerciseGroup.selectExerciseGroup'\" />\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div class=\"d-flex justify-content-between p-2\">\r\n                <ngb-pagination [maxSize]=\"10\" [rotate]=\"true\" [collectionSize]=\"total\" [(page)]=\"state.page\" [pageSize]=\"state.pageSize\" (pageChange)=\"onPageChange($event)\" />\r\n            </div>\r\n        </div>\r\n    }\r\n    <!-- State 2: Selection of exercises to be imported after an exam was selected -->\r\n    @if (exam && subsequentExerciseGroupSelection()) {\r\n        <div class=\"modal-body\">\r\n            <div class=\"form-group form-inline\">\r\n                @if (!isImportingExercises) {\r\n                    <p jhiTranslate=\"artemisApp.examManagement.exerciseGroup.selectExerciseGroupExplanation\"></p>\r\n                }\r\n                @if (isImportingExercises) {\r\n                    <p jhiTranslate=\"artemisApp.examManagement.exerciseGroup.importModal.isImporting\"></p>\r\n                }\r\n            </div>\r\n            <jhi-exam-exercise-import [exam]=\"exam!\" [importInSameCourse]=\"isImportInSameCourse\" />\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <jhi-button\r\n                (onClick)=\"performImportOfExerciseGroups()\"\r\n                [title]=\"'artemisApp.exercise.import.table.doImport'\"\r\n                [disabled]=\"isImportingExercises\"\r\n                [isLoading]=\"isImportingExercises\"\r\n            />\r\n        </div>\r\n    }\r\n</form>\r\n"],
  "mappings": "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",
  "names": ["ExamImportPagingService", "PagingService", "http", "inject", "HttpClient", "RESOURCE_URL", "search", "pageable", "options", "params", "createHttpParams", "get", "withExercises", "observe", "pipe", "map", "resp", "body", "__ngFactoryType__", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "exam_r4", "\u0275\u0275nextContext", "$implicit", "ctx_r1", "\u0275\u0275resetView", "selectImport", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "_r5", "openExerciseSelection", "\u0275\u0275template", "ExamImportComponent_Conditional_10_For_53_Conditional_21_Template", "ExamImportComponent_Conditional_10_For_53_Conditional_22_Template", "ExamImportComponent_Conditional_10_For_53_Conditional_26_Template", "ExamImportComponent_Conditional_10_For_53_Conditional_27_Template", "\u0275\u0275classProp", "id", "searchTerm", "\u0275\u0275textInterpolate1", "title", "course", "\u0275\u0275conditional", "testExam", "subsequentExerciseGroupSelection", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "ExamImportComponent_Conditional_10_Conditional_9_Template", "sortedColumn", "listSorting", "sortRows", "\u0275\u0275repeaterCreate", "ExamImportComponent_Conditional_10_For_53_Template", "\u0275\u0275componentInstance", "trackId", "state", "page", "onPageChange", "\u0275\u0275twoWayProperty", "loading", "faSort", "\u0275\u0275repeater", "content", "resultsOnPage", "total", "pageSize", "ExamImportComponent_Conditional_11_Conditional_5_Template", "ExamImportComponent_Conditional_11_Conditional_6_Template", "_r6", "performImportOfExerciseGroups", "isImportingExercises", "exam", "isImportInSameCourse", "ExamImportComponent", "ImportComponent", "examManagementService", "inject", "ExamManagementService", "alertService", "AlertService", "signal", "targetCourseId", "undefined", "targetExamId", "examExerciseImportComponent", "viewChild", "required", "ExamExerciseImportComponent", "constructor", "pagingService", "ExamImportPagingService", "findWithExercisesAndWithoutCourseId", "subscribe", "next", "examRes", "body", "error", "res", "onError", "validateUserInput", "exerciseGroups", "mapSelectedExercisesToExerciseGroups", "importExerciseGroup", "httpResponse", "activeModal", "close", "httpErrorResponse", "errorKey", "params", "updateMapsAfterRejectedImportDueToInvalidProjectKey", "numberOfInvalidProgrammingExercises", "number", "updateMapsAfterRejectedImportDueToDuplicatedShortNameOrTitle", "createOptions", "withExercises", "selectors", "viewQuery", "rf", "ctx", "ExamImportComponent_Conditional_4_Template", "ExamImportComponent_Conditional_5_Template", "clear", "ExamImportComponent_Conditional_10_Template", "ExamImportComponent_Conditional_11_Template", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "TranslateDirective", "SortDirective", "SortByDirective", "FaIconComponent", "NgbHighlight", "ButtonComponent", "NgbPagination", "encapsulation"]
}
