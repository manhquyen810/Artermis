{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/navigate-back.util.ts", "src/main/webapp/app/assessment/assessment.service.ts", "src/main/webapp/app/assessment/assessment-header/assessment-header.component.ts", "src/main/webapp/app/assessment/assessment-header/assessment-header.component.html", "src/main/webapp/app/assessment/assessment-complaint-alert/assessment-complaint-alert.component.ts", "src/main/webapp/app/assessment/assessment-complaint-alert/assessment-complaint-alert.component.html", "src/main/webapp/app/entities/assessment-note.model.ts", "src/main/webapp/app/assessment/assessment-note/assessment-note.component.ts", "src/main/webapp/app/assessment/assessment-note/assessment-note.component.html", "src/main/webapp/app/entities/complaint-response.model.ts", "src/main/webapp/app/entities/complaint-response-dto.model.ts", "src/main/webapp/app/complaints/complaints-for-tutor/complaints-for-tutor.component.ts", "src/main/webapp/app/complaints/complaints-for-tutor/complaints-for-tutor.component.html", "src/main/webapp/app/assessment/assessment-layout/assessment-layout.component.ts", "src/main/webapp/app/assessment/assessment-layout/assessment-layout.component.html"],
  "sourcesContent": ["import { Location } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Exercise, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\n\r\n/**\r\n * Navigate from Assessment Editor to Dashboard:\r\n *   1. For Team Exercises: Navigate to Team Dashboard with all Submissions of the Team\r\n *   2. For Regular Exercises: Navigate to the Exercise Assessment Dashboard\r\n *   Fallback: If we do not know the exercise, we navigate back in the browser's history.\r\n *\r\n * @param location: Angular wrapper for interacting with Browser URL and History\r\n * @param router: Angular router to navigate to URL\r\n * @param exercise: Exercise currently assessed\r\n * @param submission: Submission currently assessed\r\n * @param isTestRun: flag to determine if it is an exam test run\r\n */\r\nexport function assessmentNavigateBack(location: Location, router: Router, exercise?: Exercise, submission?: Submission, isTestRun = false) {\r\n    if (exercise) {\r\n        const course = getCourseFromExercise(exercise);\r\n\r\n        if (isTestRun) {\r\n            const exam = exercise.exerciseGroup!.exam!;\r\n            router.navigateByUrl(`/course-management/${course?.id}/exams/${exam.id}/test-assessment-dashboard/${exercise.id}`);\r\n        } else {\r\n            if (exercise.exerciseGroup) {\r\n                const exam = exercise.exerciseGroup!.exam!;\r\n                router.navigateByUrl(`/course-management/${course?.id}/exams/${exam.id}/assessment-dashboard/${exercise.id}`);\r\n            } else if (exercise.teamMode && submission) {\r\n                const teamId = (submission.participation as StudentParticipation).team?.id;\r\n                router.navigateByUrl(`/courses/${course?.id}/exercises/${exercise.id}/teams/${teamId}`);\r\n            } else {\r\n                router.navigateByUrl(`/course-management/${course?.id}/assessment-dashboard/${exercise.id}`);\r\n            }\r\n        }\r\n    } else {\r\n        location.back();\r\n    }\r\n}\r\n", "import { Exercise } from 'app/entities/exercise.model';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { Result } from 'app/entities/result.model';\r\n\r\n/**\r\n * For team exercises, the team tutor is the assessor and handles both complaints and feedback requests himself\r\n * For individual exercises, complaints are handled by a secondary reviewer and feedback requests by the assessor himself\r\n * For exam test runs, the original assessor is allowed to respond to complaints.\r\n */\r\nexport const isAllowedToRespondToComplaintAction = (isTestRun: boolean, isAssessor: boolean, complaint: Complaint, exercise?: Exercise): boolean => {\r\n    if (exercise?.isAtLeastInstructor) {\r\n        return true;\r\n    }\r\n    if (exercise?.teamMode || isTestRun) {\r\n        return isAssessor;\r\n    }\r\n    if (exercise?.assessmentType === AssessmentType.AUTOMATIC && complaint.result && complaint.result.assessor === undefined) {\r\n        return true;\r\n    }\r\n    return complaint!.complaintType === ComplaintType.COMPLAINT ? !isAssessor : isAssessor;\r\n};\r\n\r\n/**\r\n * During assessment, modifying the feedback should be allowed.\r\n * After the assessment, modification should be allowed if the assessment due date hasn't passed yet. After that, it should be prevented.\r\n * If a feedback request was filed, the feedback should not be modifiable.\r\n * If a complaint was filed, the feedback should be only modifiable if the user is allowed to handle the complaint.\r\n */\r\nexport const isAllowedToModifyFeedback = (\r\n    isTestRun: boolean,\r\n    isAssessor: boolean,\r\n    hasAssessmentDueDatePassed: boolean,\r\n    result?: Result,\r\n    complaint?: Complaint,\r\n    exercise?: Exercise,\r\n): boolean => {\r\n    if (exercise?.isAtLeastInstructor) {\r\n        return true;\r\n    }\r\n    if (!result) {\r\n        return false;\r\n    }\r\n    if (!result.completionDate) {\r\n        return true;\r\n    }\r\n    if (complaint) {\r\n        return complaint.complaintType === ComplaintType.COMPLAINT && isAllowedToRespondToComplaintAction(isTestRun, isAssessor, complaint, exercise);\r\n    }\r\n    return !hasAssessmentDueDatePassed;\r\n};\r\n", "import { Component, EventEmitter, HostListener, Input, Output, inject } from '@angular/core';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { TextAssessmentAnalytics } from 'app/exercises/text/assess/analytics/text-assesment-analytics.service';\r\nimport { TextAssessmentEventType } from 'app/entities/text/text-assesment-event.model';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { ComplaintType } from 'app/entities/complaint.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { faSave, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSquareCaretRight } from '@fortawesome/free-regular-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbAlert, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { AssessmentWarningComponent } from '../assessment-warning/assessment-warning.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n/**\r\n * The <jhi-assessment-header> component is used in the shared assessment layout.\r\n * It displays a header bar above the assessment editor with information of locking, as well as offering save/submit/etc buttons.\r\n * This guarantees a unified look and feel for both interfaces.\r\n * Depending Components need to perform actions based on the save/submit/cancel/nextSubmission/navigateBack outputs.\r\n */\r\n@Component({\r\n    selector: 'jhi-assessment-header',\r\n    templateUrl: './assessment-header.component.html',\r\n    styleUrls: ['./assessment-header.component.scss'],\r\n    imports: [TranslateDirective, NgbAlert, NgbTooltip, FaIconComponent, RouterLink, AssessmentWarningComponent, ArtemisTranslatePipe],\r\n})\r\nexport class AssessmentHeaderComponent {\r\n    textAssessmentAnalytics = inject(TextAssessmentAnalytics);\r\n    protected route = inject(ActivatedRoute);\r\n    private translateService = inject(TranslateService);\r\n\r\n    @Input() isLoading: boolean;\r\n    @Input() saveBusy: boolean;\r\n    @Input() submitBusy: boolean;\r\n    @Input() cancelBusy: boolean;\r\n    @Input() nextSubmissionBusy: boolean;\r\n    @Input() correctionRound = 0; // correctionRound defaults to 0\r\n\r\n    @Input() isTeamMode: boolean;\r\n    @Input() isAssessor: boolean;\r\n    @Input() isTestRun = false;\r\n    @Input() exerciseDashboardLink: string[];\r\n    @Input() canOverride: boolean;\r\n\r\n    @Input() exercise?: Exercise;\r\n    @Input() result?: Result;\r\n    @Input() isIllegalSubmission: boolean;\r\n    @Input() hasComplaint = false;\r\n    @Input() hasMoreFeedbackRequest = false;\r\n    @Input() complaintHandled = false;\r\n    @Input() complaintType?: ComplaintType;\r\n    @Input() assessmentsAreValid: boolean;\r\n    @Input() hasAssessmentDueDatePassed: boolean;\r\n    @Input() isProgrammingExercise = false; // remove once diff view activated for programming exercises\r\n\r\n    @Output() save = new EventEmitter<void>();\r\n    @Output() onSubmit = new EventEmitter<void>();\r\n    @Output() onCancel = new EventEmitter<void>();\r\n    @Output() nextSubmission = new EventEmitter<void>();\r\n    @Output() highlightDifferencesChange = new EventEmitter<boolean>();\r\n    @Output() useAsExampleSubmission = new EventEmitter<void>();\r\n\r\n    private _highlightDifferences: boolean;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly ComplaintType = ComplaintType;\r\n    readonly AssessmentType = AssessmentType;\r\n\r\n    // Icons\r\n    faSpinner = faSpinner;\r\n    faSave = faSave;\r\n    faSquareCaretRight = faSquareCaretRight;\r\n\r\n    @Input() set highlightDifferences(highlightDifferences: boolean) {\r\n        this._highlightDifferences = highlightDifferences;\r\n        this.highlightDifferencesChange.emit(this.highlightDifferences);\r\n    }\r\n\r\n    constructor() {\r\n        this.textAssessmentAnalytics.setComponentRoute(this.route);\r\n    }\r\n\r\n    get highlightDifferences() {\r\n        return this._highlightDifferences;\r\n    }\r\n\r\n    get overrideVisible() {\r\n        return this.result?.completionDate && this.canOverride;\r\n    }\r\n\r\n    get assessNextVisible() {\r\n        return this.result?.completionDate && (this.isAssessor || this.exercise?.isAtLeastInstructor) && !this.hasComplaint && !this.isTeamMode && !this.isTestRun;\r\n    }\r\n\r\n    get saveDisabled() {\r\n        // if there is no 'save' button\r\n        if (this.result?.completionDate) {\r\n            return true;\r\n        } else if (Result.hasNonEmptyAssessmentNote(this.result)) {\r\n            return this.saveDisabledWithAssessmentNotePresent;\r\n        } else {\r\n            return this.saveDisabledWithoutAssessmentNotePresent;\r\n        }\r\n    }\r\n\r\n    get saveDisabledWithAssessmentNotePresent() {\r\n        // this is almost identical to submitDisabled, but without the assessmentsAreValid check\r\n        // otherwise, we wouldn't be able to save the assessment note without making prior changes to the feedback\r\n        return !this.isAssessor || this.saveBusy || this.submitBusy || this.cancelBusy;\r\n    }\r\n\r\n    get saveDisabledWithoutAssessmentNotePresent() {\r\n        return !this.assessmentsAreValid || this.saveDisabledWithAssessmentNotePresent;\r\n    }\r\n\r\n    get submitDisabled() {\r\n        return !this.assessmentsAreValid || !this.isAssessor || this.saveBusy || this.submitBusy || this.cancelBusy;\r\n    }\r\n\r\n    get overrideDisabled() {\r\n        if (this.overrideVisible) {\r\n            return !this.assessmentsAreValid || this.submitBusy;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    get assessNextDisabled() {\r\n        if (this.assessNextVisible) {\r\n            return this.nextSubmissionBusy || this.submitBusy;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    @HostListener('document:keydown.control.s', ['$event'])\r\n    saveOnControlAndS(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n        if (!this.saveDisabled) {\r\n            this.save.emit();\r\n        }\r\n    }\r\n\r\n    @HostListener('document:keydown.control.enter', ['$event'])\r\n    submitOnControlAndEnter(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n        if (!this.overrideDisabled) {\r\n            this.onSubmit.emit();\r\n        } else if (!this.submitDisabled) {\r\n            this.onSubmit.emit();\r\n            this.sendSubmitAssessmentEventToAnalytics();\r\n        }\r\n    }\r\n\r\n    @HostListener('document:keydown.control.shift.arrowRight', ['$event'])\r\n    assessNextOnControlShiftAndArrowRight(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n        if (!this.assessNextDisabled) {\r\n            this.nextSubmission.emit();\r\n            this.sendAssessNextEventToAnalytics();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * In ExamMode:\r\n     * Highlight the difference between the first and second correction round\r\n     */\r\n    public toggleHighlightDifferences() {\r\n        this.highlightDifferences = !this.highlightDifferences;\r\n        this.highlightDifferencesChange.emit(this.highlightDifferences);\r\n    }\r\n\r\n    /**\r\n     * Sends and assessment event for the submit button using the analytics service in case the exercise type is TEXT\r\n     */\r\n    sendSubmitAssessmentEventToAnalytics() {\r\n        if (this.exercise?.type === ExerciseType.TEXT) {\r\n            this.textAssessmentAnalytics.sendAssessmentEvent(TextAssessmentEventType.SUBMIT_ASSESSMENT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends and assessment event for the assess next button using the analytics service in case the exercise type is TEXT\r\n     */\r\n    sendAssessNextEventToAnalytics() {\r\n        if (this.exercise?.type === ExerciseType.TEXT) {\r\n            this.textAssessmentAnalytics.sendAssessmentEvent(TextAssessmentEventType.ASSESS_NEXT_SUBMISSION);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens dialog to verify that instructor wants to use current submission as example submission\r\n     */\r\n    onUseAsExampleSolutionClicked() {\r\n        const verificationMessage = this.translateService.instant('artemisApp.assessment.useAsExampleSubmissionVerificationQuestion');\r\n        if (confirm(verificationMessage)) {\r\n            this.useAsExampleSubmission.emit();\r\n        }\r\n    }\r\n}\r\n", "<h3 class=\"top-container flex-wrap flex-lg-nowrap\">\r\n    <!--back button only used in assessment dashboard-->\r\n    <div class=\"row-container me-2\">\r\n        @if (isTestRun) {\r\n            <span jhiTranslate=\"artemisApp.assessment.testRunAssessment\"></span>\r\n        } @else {\r\n            <span jhiTranslate=\"artemisApp.assessment.assessment\"></span>\r\n        }\r\n        @if (isIllegalSubmission) {\r\n            <span class=\"badge bg-danger ms-3\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.assessmentIllegalSubmission\"></span>\r\n        }\r\n    </div>\r\n    @if (hasAssessmentDueDatePassed && !result?.completionDate) {\r\n        <ngb-alert [style.fontSize]=\"'65%'\" [type]=\"'warning'\" (close)=\"hasAssessmentDueDatePassed = false\" jhiTranslate=\"artemisApp.assessment.assessmentDueDateIsOver\" />\r\n    }\r\n    @if (!isLoading) {\r\n        <div class=\"row-container flex-wrap flex-lg-nowrap\">\r\n            @if (!isAssessor && !hasComplaint) {\r\n                <span\r\n                    id=\"assessmentLocked\"\r\n                    class=\"text-danger m-2\"\r\n                    style=\"font-size: 65%\"\r\n                    jhiTranslate=\"artemisApp.assessment.assessmentLocked\"\r\n                    [translateValues]=\"{ otherUser: result?.assessor?.name + ' (' + result?.assessor?.login + ')' }\"\r\n                ></span>\r\n            }\r\n            @if (\r\n                isAssessor &&\r\n                exercise &&\r\n                !exercise.isAtLeastInstructor &&\r\n                hasComplaint &&\r\n                complaintType !== ComplaintType.COMPLAINT &&\r\n                !complaintHandled &&\r\n                exercise.assessmentType !== AssessmentType.AUTOMATIC\r\n            ) {\r\n                <span id=\"moreFeedbackRequest\" class=\"m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.moreFeedbackRequest\"></span>\r\n            }\r\n            @if (\r\n                isAssessor &&\r\n                exercise &&\r\n                !exercise.isAtLeastInstructor &&\r\n                hasComplaint &&\r\n                complaintType !== ComplaintType.COMPLAINT &&\r\n                exercise.assessmentType === AssessmentType.AUTOMATIC &&\r\n                !complaintHandled &&\r\n                !exercise.teamMode\r\n            ) {\r\n                <span id=\"automaticAssessmentFeedbackRequest\" class=\"m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.automaticAssessmentFeedbackRequest\"></span>\r\n            }\r\n            @if (isAssessor && exercise && !exercise.isAtLeastInstructor && hasComplaint && complaintType === ComplaintType.COMPLAINT && !complaintHandled && exercise.teamMode) {\r\n                <span id=\"teamComplaint\" class=\"m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.teamComplaint\"></span>\r\n            }\r\n            @if (\r\n                isAssessor &&\r\n                exercise &&\r\n                !exercise.isAtLeastInstructor &&\r\n                hasComplaint &&\r\n                complaintType === ComplaintType.COMPLAINT &&\r\n                exercise.assessmentType === AssessmentType.AUTOMATIC &&\r\n                !complaintHandled &&\r\n                !exercise.teamMode\r\n            ) {\r\n                <span id=\"automaticAssessmentComplaint\" class=\"m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.automaticAssessmentComplaint\"></span>\r\n            }\r\n            @if (\r\n                isAssessor &&\r\n                exercise &&\r\n                !exercise.isAtLeastInstructor &&\r\n                hasComplaint &&\r\n                exercise.assessmentType !== AssessmentType.AUTOMATIC &&\r\n                complaintType === ComplaintType.COMPLAINT &&\r\n                !complaintHandled &&\r\n                !exercise.teamMode\r\n            ) {\r\n                <span id=\"assessmentReadOnlyUnhandledComplaint\" class=\"m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.assessmentReadOnlyUnhandledComplaint\"></span>\r\n            }\r\n            @if (isAssessor && exercise && !exercise.isAtLeastInstructor && hasComplaint && complaintHandled && !exercise.teamMode) {\r\n                <span id=\"assessmentReadOnlyHandled\" class=\"m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.assessmentReadOnlyHandledComplaint\"></span>\r\n            }\r\n            @if (isAssessor && (!hasComplaint || exercise?.isAtLeastInstructor)) {\r\n                <span id=\"assessmentLockedCurrentUser\" class=\"text-danger m-2\" style=\"font-size: 65%\" jhiTranslate=\"artemisApp.assessment.assessmentLockedCurrentUser\"></span>\r\n            }\r\n            <!-- Highlight the difference between first and second correction -->\r\n            @if (!isProgrammingExercise && result && correctionRound > 0) {\r\n                <button class=\"btn ms-2 btn-primary\" (click)=\"toggleHighlightDifferences()\" [disabled]=\"saveBusy || submitBusy || cancelBusy\">\r\n                    @if (!highlightDifferences) {\r\n                        <span\r\n                            ngbTooltip=\"{{ 'artemisApp.assessment.diffView.highlightAssessmentDiffTooltipOn' | artemisTranslate }}\"\r\n                            jhiTranslate=\"artemisApp.assessment.diffView.differenceActivate\"\r\n                        ></span>\r\n                    }\r\n                    @if (highlightDifferences) {\r\n                        <span\r\n                            ngbTooltip=\"{{ 'artemisApp.assessment.diffView.highlightAssessmentDiffTooltipOff' | artemisTranslate }}\"\r\n                            jhiTranslate=\"artemisApp.assessment.diffView.differenceDeactivate\"\r\n                        ></span>\r\n                    }\r\n                </button>\r\n            }\r\n            <br />\r\n            <div class=\"d-flex flex-wrap flex-lg-nowrap\">\r\n                @if (!result?.completionDate) {\r\n                    <button\r\n                        class=\"btn m-1 btn-primary\"\r\n                        (click)=\"save.emit()\"\r\n                        [disabled]=\"saveDisabled\"\r\n                        [ngbTooltip]=\"('artemisApp.assessment.button.control' | artemisTranslate) + ' + S'\"\r\n                    >\r\n                        @if (saveBusy) {\r\n                            <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                        }\r\n                        <fa-icon [icon]=\"faSave\" />\r\n                        <span jhiTranslate=\"entity.action.save\"></span>\r\n                    </button>\r\n                    <button\r\n                        id=\"submit\"\r\n                        class=\"btn m-1 btn-success\"\r\n                        (click)=\"onSubmit.emit(); sendSubmitAssessmentEventToAnalytics()\"\r\n                        [disabled]=\"submitDisabled\"\r\n                        [ngbTooltip]=\"('artemisApp.assessment.button.control' | artemisTranslate) + ' + Enter'\"\r\n                    >\r\n                        @if (submitBusy) {\r\n                            <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                        }\r\n                        <span jhiTranslate=\"entity.action.submit\"></span>\r\n                    </button>\r\n                    @if (!isTestRun) {\r\n                        <button\r\n                            class=\"btn m-1 btn-danger\"\r\n                            (click)=\"onCancel.emit()\"\r\n                            [disabled]=\"!(exercise?.isAtLeastInstructor || isAssessor) || saveBusy || submitBusy || cancelBusy\"\r\n                        >\r\n                            @if (cancelBusy) {\r\n                                <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                            }\r\n                            <span jhiTranslate=\"entity.action.cancel\"></span>\r\n                        </button>\r\n                    }\r\n                }\r\n                @if (overrideVisible) {\r\n                    <button\r\n                        class=\"btn m-1 btn-danger\"\r\n                        (click)=\"onSubmit.emit()\"\r\n                        [disabled]=\"overrideDisabled\"\r\n                        [ngbTooltip]=\"('artemisApp.assessment.button.control' | artemisTranslate) + ' + Enter'\"\r\n                    >\r\n                        @if (submitBusy) {\r\n                            <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                        }\r\n                        <span jhiTranslate=\"artemisApp.assessment.button.overrideAssessment\"></span>\r\n                    </button>\r\n                }\r\n                @if (result?.completionDate && exercise?.isAtLeastInstructor && (exercise!.type === ExerciseType.MODELING || exercise!.type === ExerciseType.TEXT)) {\r\n                    <button class=\"btn m-1 btn-primary\" id=\"useAsExampleSubmission\" (click)=\"onUseAsExampleSolutionClicked()\">\r\n                        @if (submitBusy) {\r\n                            <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                        }\r\n                        <span jhiTranslate=\"artemisApp.assessment.button.useAsExampleSubmission\"></span>\r\n                    </button>\r\n                }\r\n                <ng-template #nextSubmissionShortcut>\r\n                    {{ 'artemisApp.assessment.button.control' | artemisTranslate }} + Shift + <fa-icon [icon]=\"faSquareCaretRight\" />\r\n                </ng-template>\r\n                @if (assessNextVisible) {\r\n                    <button\r\n                        class=\"btn m-1 btn-success\"\r\n                        id=\"assessNextButton\"\r\n                        [disabled]=\"assessNextDisabled\"\r\n                        (click)=\"nextSubmission.emit(); sendAssessNextEventToAnalytics()\"\r\n                        [ngbTooltip]=\"nextSubmissionShortcut\"\r\n                    >\r\n                        @if (nextSubmissionBusy) {\r\n                            <fa-icon [icon]=\"faSpinner\" animation=\"spin\" />\r\n                        }\r\n                        <span jhiTranslate=\"artemisApp.assessment.button.nextSubmission\"></span>\r\n                    </button>\r\n                }\r\n                <a [routerLink]=\"exerciseDashboardLink\" class=\"btn m-1 btn-info\">\r\n                    <span jhiTranslate=\"entity.action.exerciseDashboard\"></span>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    }\r\n</h3>\r\n@if (exercise) {\r\n    <jhi-assessment-warning [exercise]=\"exercise\" />\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n/**\r\n * This shows an alert, notifying the assessor on possible complaints at the bottom of the page.\r\n */\r\n@Component({\r\n    selector: 'jhi-assessment-complaint-alert',\r\n    templateUrl: './assessment-complaint-alert.component.html',\r\n    styleUrls: [],\r\n    imports: [TranslateDirective],\r\n})\r\nexport class AssessmentComplaintAlertComponent {\r\n    ComplaintType = ComplaintType;\r\n\r\n    @Input() complaint?: Complaint;\r\n}\r\n", "@if (complaint) {\r\n    @if (complaint?.complaintType === ComplaintType.COMPLAINT) {\r\n        <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.complaint.hint\"></div>\r\n    }\r\n    @if (complaint?.complaintType === ComplaintType.MORE_FEEDBACK) {\r\n        <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.moreFeedback.hint\"></div>\r\n    }\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { User } from 'app/core/user/user.model';\r\n\r\nexport class AssessmentNote implements BaseEntity {\r\n    public id?: number;\r\n\r\n    public creator?: User;\r\n    public createdDate?: Date;\r\n    public lastUpdatedDate?: Date;\r\n    public note?: string;\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { AssessmentNote } from 'app/entities/assessment-note.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-assessment-note',\r\n    templateUrl: './assessment-note.component.html',\r\n    styleUrls: ['./assessment-note.component.scss'],\r\n    imports: [TranslateDirective],\r\n})\r\nexport class AssessmentNoteComponent {\r\n    private _assessmentNote: AssessmentNote;\r\n    @Output() onAssessmentNoteChange = new EventEmitter<AssessmentNote>();\r\n\r\n    @Input() set assessmentNote(assessmentNote: AssessmentNote | undefined) {\r\n        if (assessmentNote === undefined) {\r\n            this._assessmentNote = new AssessmentNote();\r\n        } else {\r\n            this._assessmentNote = assessmentNote;\r\n        }\r\n    }\r\n\r\n    get assessmentNote(): AssessmentNote {\r\n        return this._assessmentNote;\r\n    }\r\n\r\n    /**\r\n     * Called whenever an input is made on the internal tutor note text box.\r\n     * @param event the input event containing the text of the note\r\n     */\r\n    onAssessmentNoteInput(event: any) {\r\n        this._assessmentNote.note = event.target.value;\r\n        this.onAssessmentNoteChange.emit(this._assessmentNote);\r\n    }\r\n}\r\n", "<h4 class=\"col-12\" jhiTranslate=\"artemisApp.assessment.detail.assessmentNote\">Assessment Notes</h4>\r\n<textarea class=\"form-control\" (input)=\"onAssessmentNoteInput($event)\" [textContent]=\"assessmentNote?.note ?? ''\" name=\"assessment_note\" id=\"assessment_note\"></textarea>\r\n", "import dayjs from 'dayjs/esm';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { Complaint } from 'app/entities/complaint.model';\r\n\r\nexport class ComplaintResponse implements BaseEntity {\r\n    public id?: number;\r\n\r\n    public responseText?: string;\r\n    public submittedTime?: dayjs.Dayjs;\r\n    public complaint?: Complaint;\r\n    public reviewer?: User;\r\n    // transient property that will be calculated on the server\r\n    public isCurrentlyLocked?: boolean;\r\n    // transient property that will be calculated on the server\r\n    public lockEndDate?: dayjs.Dayjs;\r\n}\r\n", "export enum ComplaintAction {\r\n    REFRESH_LOCK = 'REFRESH_LOCK',\r\n    RESOLVE_COMPLAINT = 'RESOLVE_COMPLAINT',\r\n}\r\n\r\nexport class ComplaintResponseUpdateDTO {\r\n    public responseText?: string;\r\n    public complaintIsAccepted?: boolean;\r\n    public action?: ComplaintAction;\r\n}\r\n", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ComplaintResponseService } from 'app/complaints/complaint-response.service';\r\nimport { ComplaintResponse } from 'app/entities/complaint-response.model';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { Exercise, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Router } from '@angular/router';\r\nimport { assessmentNavigateBack } from 'app/exercises/shared/navigate-back.util';\r\nimport { Location } from '@angular/common';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { isAllowedToRespondToComplaintAction } from 'app/assessment/assessment.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ComplaintAction, ComplaintResponseUpdateDTO } from 'app/entities/complaint-response-dto.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TextareaCounterComponent } from 'app/shared/textarea/textarea-counter.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\n\r\nexport type AssessmentAfterComplaint = { complaintResponse: ComplaintResponse; onSuccess: () => void; onError: () => void };\r\n\r\n@Component({\r\n    selector: 'jhi-complaints-for-tutor-form',\r\n    templateUrl: './complaints-for-tutor.component.html',\r\n    imports: [TranslateDirective, FormsModule, ArtemisTranslatePipe, TextareaCounterComponent, ArtemisDatePipe],\r\n})\r\nexport class ComplaintsForTutorComponent implements OnInit {\r\n    private alertService = inject(AlertService);\r\n    private complaintResponseService = inject(ComplaintResponseService);\r\n    private router = inject(Router);\r\n    private location = inject(Location);\r\n\r\n    @Input() complaint: Complaint;\r\n    @Input() isTestRun = false;\r\n    @Input() isAssessor = false;\r\n    @Input() zeroIndent = true;\r\n    @Input() exercise: Exercise | undefined;\r\n    @Input() submission: Submission | undefined;\r\n    // Indicates that the assessment should be updated after a complaint. Includes the corresponding complaint\r\n    // that should be sent to the server along with the assessment update.\r\n    @Output() updateAssessmentAfterComplaint = new EventEmitter<AssessmentAfterComplaint>();\r\n    complaintText?: string;\r\n    handled: boolean;\r\n    complaintResponse: ComplaintResponse = new ComplaintResponse();\r\n    complaintResponseUpdate: ComplaintResponseUpdateDTO;\r\n    ComplaintType = ComplaintType;\r\n    isLoading = false;\r\n    showLockDuration = false;\r\n    lockedByCurrentUser = false;\r\n    isLockedForLoggedInUser = false;\r\n    course?: Course;\r\n    maxComplaintResponseTextLimit: number;\r\n\r\n    ngOnInit(): void {\r\n        this.course = getCourseFromExercise(this.exercise!);\r\n\r\n        this.maxComplaintResponseTextLimit = this.course?.maxComplaintResponseTextLimit ?? 0;\r\n        if (this.exercise?.exerciseGroup) {\r\n            // Exams should always allow at least 2000 characters\r\n            this.maxComplaintResponseTextLimit = Math.max(2000, this.maxComplaintResponseTextLimit);\r\n        }\r\n\r\n        if (this.complaint) {\r\n            this.complaintText = this.complaint.complaintText;\r\n            this.handled = this.complaint.accepted !== undefined;\r\n            if (this.handled) {\r\n                this.complaintResponse = this.complaint.complaintResponse!;\r\n                this.lockedByCurrentUser = false;\r\n                this.showLockDuration = false;\r\n            } else {\r\n                if (this.isAllowedToRespond) {\r\n                    if (this.complaint.complaintResponse) {\r\n                        this.complaintResponseUpdate = new ComplaintResponseUpdateDTO();\r\n                        this.complaintResponseUpdate.action = ComplaintAction.REFRESH_LOCK;\r\n                        this.refreshLock();\r\n                    } else {\r\n                        this.createLock();\r\n                    }\r\n                } else {\r\n                    this.alertService.error('artemisApp.locks.notAllowedToRespond');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createLock() {\r\n        this.isLoading = true;\r\n        this.complaintResponseService\r\n            .createLock(this.complaint.id!)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (response) => {\r\n                    this.complaintResponse = response.body!;\r\n                    this.complaint = this.complaintResponse.complaint!;\r\n                    this.lockedByCurrentUser = true;\r\n                    this.showLockDuration = true;\r\n                    this.alertService.success('artemisApp.locks.acquired');\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.onError(err);\r\n                },\r\n            });\r\n    }\r\n\r\n    private refreshLock() {\r\n        this.complaintResponse = this.complaint.complaintResponse!;\r\n        this.showLockDuration = true;\r\n        // if a lock exists we have to check if it affects the currently logged-in user\r\n        this.isLockedForLoggedInUser = this.complaintResponseService.isComplaintResponseLockedForLoggedInUser(this.complaintResponse, this.exercise!);\r\n        if (!this.isLockedForLoggedInUser) {\r\n            // update the lock\r\n            this.isLoading = true;\r\n            this.complaintResponseService\r\n                .refreshLockOrResolveComplaint(this.complaintResponseUpdate, this.complaint.id!)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe({\r\n                    next: (response) => {\r\n                        this.complaintResponse = response.body!;\r\n                        this.complaint = this.complaintResponse.complaint!;\r\n                        this.lockedByCurrentUser = true;\r\n                        this.alertService.success('artemisApp.locks.acquired');\r\n                    },\r\n                    error: (err: HttpErrorResponse) => {\r\n                        this.onError(err);\r\n                    },\r\n                });\r\n        } else {\r\n            this.lockedByCurrentUser = false;\r\n        }\r\n    }\r\n\r\n    navigateBack() {\r\n        assessmentNavigateBack(this.location, this.router, this.exercise, this.submission, this.isTestRun);\r\n    }\r\n\r\n    removeLock() {\r\n        this.complaintResponseService.removeLock(this.complaint.id!).subscribe({\r\n            next: () => {\r\n                this.alertService.success('artemisApp.locks.lockRemoved');\r\n                this.navigateBack();\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.onError(err);\r\n            },\r\n        });\r\n    }\r\n\r\n    respondToComplaint(acceptComplaint: boolean): void {\r\n        if (!this.complaintResponse.responseText || this.complaintResponse.responseText.length <= 0) {\r\n            this.alertService.error('artemisApp.complaintResponse.noText');\r\n            return;\r\n        }\r\n        if (this.complaintResponse.responseText.length > this.maxComplaintResponseTextLimit) {\r\n            this.alertService.error('artemisApp.complaint.exceededComplaintResponseTextLimit', {\r\n                maxComplaintRespondTextLimit: this.maxComplaintResponseTextLimit,\r\n            });\r\n            return;\r\n        }\r\n        if (!this.isAllowedToRespond) {\r\n            return;\r\n        }\r\n\r\n        this.complaintResponse.complaint = this.complaint;\r\n        this.complaintResponse.complaint.complaintResponse = undefined; // breaking circular structure\r\n        this.complaintResponse.complaint!.accepted = acceptComplaint;\r\n\r\n        if (acceptComplaint && this.complaint.complaintType === ComplaintType.COMPLAINT) {\r\n            // Tell the parent (assessment) component to update the corresponding result if the complaint was accepted.\r\n            // The complaint is sent along with the assessment update by the parent to avoid additional requests.\r\n            this.isLoading = true;\r\n            this.updateAssessmentAfterComplaint.emit({\r\n                complaintResponse: this.complaintResponse,\r\n                onSuccess: () => {\r\n                    this.isLoading = false;\r\n                    this.handled = true;\r\n                    this.showLockDuration = false;\r\n                    this.lockedByCurrentUser = false;\r\n                },\r\n                onError: () => {\r\n                    this.isLoading = false;\r\n                },\r\n            });\r\n        } else {\r\n            // If the complaint was rejected, or it was a more feedback request, just the complaint response is updated.\r\n            this.complaintResponseUpdate = new ComplaintResponseUpdateDTO();\r\n            this.complaintResponseUpdate.action = ComplaintAction.RESOLVE_COMPLAINT;\r\n            this.complaintResponseUpdate.responseText = this.complaintResponse.responseText;\r\n            this.complaintResponseUpdate.complaintIsAccepted = this.complaintResponse.complaint.accepted;\r\n            this.resolveComplaint();\r\n        }\r\n    }\r\n\r\n    private resolveComplaint() {\r\n        this.isLoading = true;\r\n        this.complaintResponseService\r\n            .refreshLockOrResolveComplaint(this.complaintResponseUpdate, this.complaintResponse.complaint!.id)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (response) => {\r\n                    this.handled = true;\r\n                    if (this.complaint.complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                        this.alertService.success('artemisApp.moreFeedbackResponse.created');\r\n                    } else {\r\n                        this.alertService.success('artemisApp.complaintResponse.created');\r\n                    }\r\n                    this.complaintResponse = response.body!;\r\n                    this.complaint = this.complaintResponse.complaint!;\r\n                    this.isLockedForLoggedInUser = false;\r\n                    this.showLockDuration = false;\r\n                    this.lockedByCurrentUser = false;\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.onError(err);\r\n                },\r\n            });\r\n    }\r\n\r\n    onError(httpErrorResponse: HttpErrorResponse) {\r\n        const error = httpErrorResponse.error;\r\n        if (error && error.errorKey && error.errorKey === 'complaintLock') {\r\n            this.alertService.error(error.message, error.params);\r\n        } else {\r\n            this.alertService.error('error.unexpectedError', {\r\n                error: httpErrorResponse.message,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For team exercises, the team tutor is the assessor and handles both complaints and feedback requests himself\r\n     * For individual exercises, complaints are handled by a secondary reviewer and feedback requests by the assessor himself\r\n     * For exam test runs, the original assessor is allowed to respond to complaints.\r\n     */\r\n    get isAllowedToRespond(): boolean {\r\n        return isAllowedToRespondToComplaintAction(this.isTestRun, this.isAssessor, this.complaint, this.exercise);\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the length of the entered text.\r\n     */\r\n    complaintResponseTextLength(): number {\r\n        const textArea: HTMLTextAreaElement = document.querySelector('#responseTextArea') as HTMLTextAreaElement;\r\n        return textArea.value.length;\r\n    }\r\n}\r\n", "@if (isLoading) {\r\n    <div class=\"d-flex justify-content-center\">\r\n        <div class=\"spinner-border\" role=\"status\">\r\n            <span class=\"sr-only\" jhiTranslate=\"loading\"></span>\r\n        </div>\r\n    </div>\r\n}\r\n@if (!isLoading && complaint) {\r\n    <h3 [jhiTranslate]=\"complaint.complaintType === ComplaintType.MORE_FEEDBACK ? 'artemisApp.moreFeedback.review' : 'artemisApp.complaint.review'\"></h3>\r\n}\r\n@if (!isLoading && complaint) {\r\n    <div class=\"col-12 mt-2\" [class.px-0]=\"zeroIndent\">\r\n        @if (handled) {\r\n            <div\r\n                class=\"alert alert-info\"\r\n                [jhiTranslate]=\"complaint.complaintType === ComplaintType.MORE_FEEDBACK ? 'artemisApp.moreFeedback.alreadyHandled' : 'artemisApp.complaint.complaintAlreadyHandled'\"\r\n            ></div>\r\n        }\r\n        <div class=\"mt-3 mb-3\">\r\n            @if (showLockDuration) {\r\n                <div id=\"lockDuration\" class=\"alert alert-info\">\r\n                    @if (lockedByCurrentUser) {\r\n                        {{ 'artemisApp.locks.lockInformationYou' | artemisTranslate: { endDate: this.complaintResponse.lockEndDate | artemisDate } }}\r\n                    } @else {\r\n                        {{\r\n                            'artemisApp.locks.lockInformation'\r\n                                | artemisTranslate: { user: this.complaintResponse?.reviewer?.login, endDate: this.complaintResponse.lockEndDate | artemisDate }\r\n                        }}\r\n                    }\r\n                </div>\r\n            }\r\n            @if (lockedByCurrentUser) {\r\n                <button id=\"lockButton\" class=\"btn btn-secondary\" (click)=\"removeLock()\" jhiTranslate=\"artemisApp.locks.removeButton\"></button>\r\n            }\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-md-6\">\r\n                <h4>\r\n                    <span [jhiTranslate]=\"complaint.complaintType === ComplaintType.MORE_FEEDBACK ? 'artemisApp.moreFeedback.title' : 'artemisApp.complaint.title'\"></span>\r\n                    @if (handled) {\r\n                        <small>\r\n                            @if (complaint?.accepted) {\r\n                                <span class=\"badge bg-success\">\r\n                                    &nbsp;{{\r\n                                        complaint.complaintType === ComplaintType.MORE_FEEDBACK\r\n                                            ? ('artemisApp.moreFeedback.accepted' | artemisTranslate)\r\n                                            : ('artemisApp.complaint.accepted' | artemisTranslate)\r\n                                    }}&nbsp;\r\n                                </span>\r\n                            }\r\n                            @if (!complaint?.accepted) {\r\n                                <span class=\"badge bg-danger\"> &nbsp;{{ 'artemisApp.complaint.rejected' | artemisTranslate }}&nbsp; </span>\r\n                            }\r\n                        </small>\r\n                    }\r\n                </h4>\r\n                <textarea id=\"complaintTextArea\" class=\"col-12 px-1\" rows=\"4\" [(ngModel)]=\"complaintText\" [readonly]=\"true\" [disabled]=\"true\"></textarea>\r\n            </div>\r\n            @if (handled || isAllowedToRespond) {\r\n                <div class=\"col-12 col-md-6\">\r\n                    <h3\r\n                        [jhiTranslate]=\"complaint.complaintType === ComplaintType.MORE_FEEDBACK ? 'artemisApp.moreFeedbackResponse.title' : 'artemisApp.complaintResponse.title'\"\r\n                    ></h3>\r\n                    <div class=\"d-flex flex-column\">\r\n                        <textarea\r\n                            id=\"responseTextArea\"\r\n                            class=\"col-12 px-1\"\r\n                            rows=\"4\"\r\n                            [maxlength]=\"maxComplaintResponseTextLimit\"\r\n                            [(ngModel)]=\"complaintResponse.responseText\"\r\n                            [readonly]=\"handled || isLockedForLoggedInUser\"\r\n                            [disabled]=\"handled || isLockedForLoggedInUser\"\r\n                            ondrop=\"return false;\"\r\n                        >\r\n                        </textarea>\r\n                        <jhi-textarea-counter [maxLength]=\"maxComplaintResponseTextLimit\" [content]=\"complaintResponse.responseText\" [visible]=\"!handled\" />\r\n                    </div>\r\n                    @if (!handled && complaint.complaintType === ComplaintType.COMPLAINT) {\r\n                        <div class=\"d-flex flex-wrap gap-1 justify-content-between mt-1\">\r\n                            <button\r\n                                id=\"acceptComplaintButton\"\r\n                                type=\"button\"\r\n                                class=\"btn btn-success btn-block\"\r\n                                (click)=\"respondToComplaint(true)\"\r\n                                [disabled]=\"isLockedForLoggedInUser || complaintResponseTextLength() > maxComplaintResponseTextLimit\"\r\n                                title=\"{{ 'artemisApp.complaintResponse.updateAssessmentTooltip' | artemisTranslate }}\"\r\n                            >\r\n                                {{ 'artemisApp.complaintResponse.updateAssessment' | artemisTranslate }}\r\n                            </button>\r\n                            <button\r\n                                id=\"rejectComplaintButton\"\r\n                                type=\"button\"\r\n                                class=\"btn btn-danger btn-block\"\r\n                                (click)=\"respondToComplaint(false)\"\r\n                                [disabled]=\"isLockedForLoggedInUser || complaintResponseTextLength() > maxComplaintResponseTextLimit\"\r\n                                title=\"{{ 'artemisApp.complaintResponse.rejectComplaintTooltip' | artemisTranslate }}\"\r\n                            >\r\n                                {{ 'artemisApp.complaintResponse.rejectComplaint' | artemisTranslate }}\r\n                            </button>\r\n                            <!-- empty div to create additional spacing after the last button, but only for sm or up -->\r\n                            <div class=\"d-none d-sm-block\"></div>\r\n                        </div>\r\n                    }\r\n                    @if (!complaint.accepted && complaint.complaintType === ComplaintType.MORE_FEEDBACK) {\r\n                        <div class=\"row justify-content-end mt-3\">\r\n                            <div class=\"col-12\">\r\n                                <button\r\n                                    id=\"respondToMoreFeedbackButton\"\r\n                                    type=\"button\"\r\n                                    class=\"btn btn-success btn-block\"\r\n                                    [disabled]=\"isLockedForLoggedInUser\"\r\n                                    (click)=\"respondToComplaint(true)\"\r\n                                    title=\"{{ 'artemisApp.moreFeedbackResponse.sendResponseTooltip' | artemisTranslate }}\"\r\n                                    jhiTranslate=\"artemisApp.moreFeedbackResponse.provideFeedback\"\r\n                                ></button>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n", "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { AssessmentAfterComplaint } from 'app/complaints/complaints-for-tutor/complaints-for-tutor.component';\r\nimport { AssessmentNote } from 'app/entities/assessment-note.model';\r\nimport { AssessmentHeaderComponent } from '../assessment-header/assessment-header.component';\r\nimport { AssessmentComplaintAlertComponent } from '../assessment-complaint-alert/assessment-complaint-alert.component';\r\nimport { AssessmentNoteComponent } from '../assessment-note/assessment-note.component';\r\nimport { ComplaintsForTutorComponent } from '../../complaints/complaints-for-tutor/complaints-for-tutor.component';\r\n\r\n/**\r\n * The <jhi-assessment-layout> component provides the basic layout for an assessment page.\r\n * It shows the header, alerts for complaints on top and the complaint form at the bottom of the page.\r\n * The actual assessment needs to be inserted using content projection.\r\n * Components using this component need to provide Inputs and handle Outputs. This component does not perform assessment logic.\r\n */\r\n@Component({\r\n    selector: 'jhi-assessment-layout',\r\n    templateUrl: './assessment-layout.component.html',\r\n    styleUrls: ['./assessment-layout.component.scss'],\r\n    imports: [AssessmentHeaderComponent, AssessmentComplaintAlertComponent, AssessmentNoteComponent, ComplaintsForTutorComponent],\r\n})\r\nexport class AssessmentLayoutComponent {\r\n    @HostBinding('class.assessment-container') readonly assessmentContainerClass = true;\r\n\r\n    @Output() navigateBack = new EventEmitter<void>();\r\n    MORE_FEEDBACK = ComplaintType.MORE_FEEDBACK;\r\n    @Input() isLoading: boolean;\r\n    @Input() saveBusy: boolean;\r\n    @Input() submitBusy: boolean;\r\n    @Input() cancelBusy: boolean;\r\n    @Input() nextSubmissionBusy: boolean;\r\n    @Input() correctionRound: number;\r\n\r\n    @Input() isTeamMode: boolean;\r\n    @Input() isAssessor: boolean;\r\n    @Input() canOverride: boolean;\r\n    @Input() isTestRun = false;\r\n    @Input() isIllegalSubmission: boolean;\r\n    @Input() exerciseDashboardLink: string[];\r\n\r\n    @Input() result?: Result;\r\n    @Input() assessmentsAreValid: boolean;\r\n    @Input() complaint?: Complaint;\r\n    @Input() exercise?: Exercise;\r\n    @Input() submission?: Submission;\r\n    @Input() hasAssessmentDueDatePassed: boolean;\r\n    @Input() isProgrammingExercise: boolean; // remove once diff view activated for programming exercises\r\n\r\n    private _highlightDifferences: boolean;\r\n\r\n    @Input() set highlightDifferences(highlightDifferences: boolean) {\r\n        this._highlightDifferences = highlightDifferences;\r\n        this.highlightDifferencesChange.emit(this.highlightDifferences);\r\n    }\r\n\r\n    get highlightDifferences() {\r\n        return this._highlightDifferences;\r\n    }\r\n\r\n    setAssessmentNoteForResult(assessmentNote: AssessmentNote) {\r\n        if (this.result) {\r\n            this.result.assessmentNote = assessmentNote;\r\n        }\r\n    }\r\n\r\n    @Output() save = new EventEmitter<void>();\r\n    @Output() onSubmit = new EventEmitter<void>();\r\n    @Output() onCancel = new EventEmitter<void>();\r\n    @Output() nextSubmission = new EventEmitter<void>();\r\n    @Output() updateAssessmentAfterComplaint = new EventEmitter<AssessmentAfterComplaint>();\r\n    @Output() highlightDifferencesChange = new EventEmitter<boolean>();\r\n    @Output() useAsExampleSubmission = new EventEmitter<void>();\r\n}\r\n", "<jhi-assessment-header\r\n    (navigateBack)=\"navigateBack.emit()\"\r\n    [isLoading]=\"isLoading\"\r\n    [saveBusy]=\"saveBusy\"\r\n    [submitBusy]=\"submitBusy\"\r\n    [cancelBusy]=\"cancelBusy\"\r\n    [nextSubmissionBusy]=\"nextSubmissionBusy\"\r\n    [isTeamMode]=\"isTeamMode\"\r\n    [isAssessor]=\"isAssessor\"\r\n    [isTestRun]=\"isTestRun\"\r\n    [isIllegalSubmission]=\"isIllegalSubmission\"\r\n    [exerciseDashboardLink]=\"exerciseDashboardLink\"\r\n    [canOverride]=\"canOverride\"\r\n    [assessmentsAreValid]=\"assessmentsAreValid\"\r\n    [hasAssessmentDueDatePassed]=\"hasAssessmentDueDatePassed\"\r\n    [exercise]=\"exercise\"\r\n    [result]=\"result\"\r\n    [correctionRound]=\"correctionRound\"\r\n    [isProgrammingExercise]=\"isProgrammingExercise\"\r\n    (save)=\"save.emit()\"\r\n    (onSubmit)=\"onSubmit.emit()\"\r\n    (onCancel)=\"onCancel.emit()\"\r\n    [(highlightDifferences)]=\"highlightDifferences\"\r\n    (nextSubmission)=\"nextSubmission.emit()\"\r\n    [hasComplaint]=\"!!complaint\"\r\n    [hasMoreFeedbackRequest]=\"complaint?.complaintType === MORE_FEEDBACK\"\r\n    [complaintHandled]=\"!!complaint ? complaint.accepted !== undefined : false\"\r\n    [complaintType]=\"complaint?.complaintType\"\r\n    (useAsExampleSubmission)=\"useAsExampleSubmission.emit()\"\r\n/>\r\n<jhi-assessment-complaint-alert [complaint]=\"complaint\" />\r\n<ng-content />\r\n<jhi-assessment-note [assessmentNote]=\"result?.assessmentNote\" (onAssessmentNoteChange)=\"setAssessmentNoteForResult($event)\" />\r\n@if (complaint) {\r\n    <jhi-complaints-for-tutor-form\r\n        class=\"row mt-4\"\r\n        [zeroIndent]=\"false\"\r\n        [complaint]=\"complaint!\"\r\n        [exercise]=\"exercise\"\r\n        [isAssessor]=\"isAssessor\"\r\n        [submission]=\"submission\"\r\n        [isTestRun]=\"isTestRun\"\r\n        (updateAssessmentAfterComplaint)=\"updateAssessmentAfterComplaint.emit($event)\"\r\n    />\r\n}\r\n"],
  "mappings": "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",
  "names": ["assessmentNavigateBack", "location", "router", "exercise", "submission", "isTestRun", "course", "getCourseFromExercise", "exam", "exerciseGroup", "navigateByUrl", "id", "teamMode", "teamId", "participation", "team", "back", "isAllowedToRespondToComplaintAction", "isTestRun", "isAssessor", "complaint", "exercise", "isAtLeastInstructor", "teamMode", "assessmentType", "AssessmentType", "AUTOMATIC", "result", "assessor", "undefined", "complaintType", "ComplaintType", "COMPLAINT", "isAllowedToModifyFeedback", "hasAssessmentDueDatePassed", "completionDate", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "hasAssessmentDueDatePassed", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleProp", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "result", "assessor", "name", "login", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "_r3", "toggleHighlightDifferences", "\u0275\u0275template", "AssessmentHeaderComponent_Conditional_10_Conditional_11_Conditional_3_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_11_Conditional_4_Template", "saveBusy", "submitBusy", "cancelBusy", "\u0275\u0275conditional", "highlightDifferences", "faSpinner", "_r5", "onCancel", "emit", "AssessmentHeaderComponent_Conditional_10_Conditional_16_Conditional_17_Conditional_3_Template", "exercise", "isAtLeastInstructor", "isAssessor", "_r4", "save", "AssessmentHeaderComponent_Conditional_10_Conditional_16_Conditional_4_Template", "onSubmit", "sendSubmitAssessmentEventToAnalytics", "AssessmentHeaderComponent_Conditional_10_Conditional_16_Conditional_13_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_16_Conditional_17_Template", "saveDisabled", "faSave", "submitDisabled", "isTestRun", "_r6", "AssessmentHeaderComponent_Conditional_10_Conditional_17_Conditional_4_Template", "overrideDisabled", "_r7", "onUseAsExampleSolutionClicked", "AssessmentHeaderComponent_Conditional_10_Conditional_18_Conditional_3_Template", "\u0275\u0275textInterpolate1", "faSquareCaretRight", "_r8", "nextSubmission", "sendAssessNextEventToAnalytics", "AssessmentHeaderComponent_Conditional_10_Conditional_22_Conditional_3_Template", "assessNextDisabled", "nextSubmissionShortcut_r9", "nextSubmissionBusy", "AssessmentHeaderComponent_Conditional_10_Conditional_3_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_4_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_5_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_6_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_7_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_8_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_9_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_10_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_11_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_16_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_17_Template", "AssessmentHeaderComponent_Conditional_10_Conditional_18_Template", "AssessmentHeaderComponent_Conditional_10_ng_template_19_Template", "\u0275\u0275templateRefExtractor", "AssessmentHeaderComponent_Conditional_10_Conditional_22_Template", "hasComplaint", "complaintType", "ComplaintType", "COMPLAINT", "complaintHandled", "assessmentType", "AssessmentType", "AUTOMATIC", "teamMode", "isProgrammingExercise", "correctionRound", "completionDate", "overrideVisible", "type", "ExerciseType", "MODELING", "TEXT", "assessNextVisible", "exerciseDashboardLink", "AssessmentHeaderComponent", "textAssessmentAnalytics", "inject", "TextAssessmentAnalytics", "route", "ActivatedRoute", "translateService", "TranslateService", "isLoading", "isTeamMode", "canOverride", "isIllegalSubmission", "hasMoreFeedbackRequest", "assessmentsAreValid", "EventEmitter", "highlightDifferencesChange", "useAsExampleSubmission", "_highlightDifferences", "constructor", "setComponentRoute", "Result", "hasNonEmptyAssessmentNote", "saveDisabledWithAssessmentNotePresent", "saveDisabledWithoutAssessmentNotePresent", "saveOnControlAndS", "event", "preventDefault", "submitOnControlAndEnter", "assessNextOnControlShiftAndArrowRight", "sendAssessmentEvent", "TextAssessmentEventType", "SUBMIT_ASSESSMENT", "ASSESS_NEXT_SUBMISSION", "verificationMessage", "instant", "confirm", "selectors", "hostBindings", "rf", "ctx", "$event", "\u0275\u0275resolveDocument", "AssessmentHeaderComponent_Conditional_5_Template", "AssessmentHeaderComponent_Conditional_6_Template", "AssessmentHeaderComponent_Conditional_7_Template", "AssessmentHeaderComponent_Conditional_9_Template", "AssessmentHeaderComponent_Conditional_10_Template", "AssessmentHeaderComponent_Conditional_12_Template", "TranslateDirective", "NgbAlert", "NgbTooltip", "FaIconComponent", "RouterLink", "AssessmentWarningComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275template", "AssessmentComplaintAlertComponent_Conditional_0_Conditional_1_Template", "AssessmentComplaintAlertComponent_Conditional_0_Conditional_2_Template", "\u0275\u0275advance", "\u0275\u0275conditional", "ctx_r0", "complaint", "complaintType", "ComplaintType", "COMPLAINT", "MORE_FEEDBACK", "AssessmentComplaintAlertComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "AssessmentComplaintAlertComponent_Conditional_0_Template", "TranslateDirective", "encapsulation", "AssessmentNote", "id", "creator", "createdDate", "lastUpdatedDate", "note", "AssessmentNoteComponent", "_assessmentNote", "onAssessmentNoteChange", "EventEmitter", "assessmentNote", "undefined", "AssessmentNote", "onAssessmentNoteInput", "event", "note", "target", "value", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "$event", "\u0275\u0275advance", "\u0275\u0275property", "tmp_0_0", "TranslateDirective", "styles", "ComplaintResponse", "id", "responseText", "submittedTime", "complaint", "reviewer", "isCurrentlyLocked", "lockEndDate", "ComplaintAction", "ComplaintResponseUpdateDTO", "responseText", "complaintIsAccepted", "action", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "complaint", "complaintType", "ComplaintType", "MORE_FEEDBACK", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pipeBind1", "complaintResponse", "lockEndDate", "\u0275\u0275pureFunction2", "_c1", "reviewer", "login", "\u0275\u0275template", "ComplaintsForTutorComponent_Conditional_2_Conditional_6_Conditional_3_Template", "ComplaintsForTutorComponent_Conditional_2_Conditional_6_Conditional_4_Template", "\u0275\u0275conditional", "lockedByCurrentUser", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "removeLock", "ComplaintsForTutorComponent_Conditional_2_Conditional_17_Conditional_3_Template", "ComplaintsForTutorComponent_Conditional_2_Conditional_17_Conditional_4_Template", "accepted", "_r5", "respondToComplaint", "\u0275\u0275propertyInterpolate", "isLockedForLoggedInUser", "complaintResponseTextLength", "maxComplaintResponseTextLimit", "_r6", "\u0275\u0275twoWayListener", "$event", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "responseText", "ComplaintsForTutorComponent_Conditional_2_Conditional_22_Conditional_13_Template", "ComplaintsForTutorComponent_Conditional_2_Conditional_22_Conditional_14_Template", "\u0275\u0275twoWayProperty", "handled", "COMPLAINT", "ComplaintsForTutorComponent_Conditional_2_Conditional_3_Template", "ComplaintsForTutorComponent_Conditional_2_Conditional_6_Template", "ComplaintsForTutorComponent_Conditional_2_Conditional_7_Template", "ComplaintsForTutorComponent_Conditional_2_Conditional_17_Template", "_r2", "complaintText", "ComplaintsForTutorComponent_Conditional_2_Conditional_22_Template", "\u0275\u0275classProp", "zeroIndent", "showLockDuration", "isAllowedToRespond", "ComplaintsForTutorComponent", "alertService", "inject", "AlertService", "complaintResponseService", "ComplaintResponseService", "router", "Router", "location", "Location", "isTestRun", "isAssessor", "exercise", "submission", "updateAssessmentAfterComplaint", "EventEmitter", "ComplaintResponse", "complaintResponseUpdate", "isLoading", "course", "ngOnInit", "getCourseFromExercise", "exerciseGroup", "Math", "max", "undefined", "ComplaintResponseUpdateDTO", "action", "ComplaintAction", "REFRESH_LOCK", "refreshLock", "createLock", "error", "id", "pipe", "finalize", "subscribe", "next", "response", "body", "success", "err", "onError", "isComplaintResponseLockedForLoggedInUser", "refreshLockOrResolveComplaint", "navigateBack", "assessmentNavigateBack", "acceptComplaint", "length", "maxComplaintRespondTextLimit", "emit", "onSuccess", "RESOLVE_COMPLAINT", "complaintIsAccepted", "resolveComplaint", "httpErrorResponse", "errorKey", "message", "params", "isAllowedToRespondToComplaintAction", "document", "querySelector", "value", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "ComplaintsForTutorComponent_Conditional_0_Template", "ComplaintsForTutorComponent_Conditional_1_Template", "ComplaintsForTutorComponent_Conditional_2_Template", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "MaxLengthValidator", "NgModel", "ArtemisTranslatePipe", "TextareaCounterComponent", "ArtemisDatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateAssessmentAfterComplaint", "emit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "complaint", "exercise", "isAssessor", "submission", "isTestRun", "AssessmentLayoutComponent", "assessmentContainerClass", "navigateBack", "EventEmitter", "MORE_FEEDBACK", "ComplaintType", "isLoading", "saveBusy", "submitBusy", "cancelBusy", "nextSubmissionBusy", "correctionRound", "isTeamMode", "canOverride", "isIllegalSubmission", "exerciseDashboardLink", "result", "assessmentsAreValid", "hasAssessmentDueDatePassed", "isProgrammingExercise", "_highlightDifferences", "highlightDifferences", "highlightDifferencesChange", "setAssessmentNoteForResult", "assessmentNote", "save", "onSubmit", "onCancel", "nextSubmission", "useAsExampleSubmission", "selectors", "hostVars", "hostBindings", "rf", "ctx", "\u0275\u0275classProp", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275element", "\u0275\u0275projection", "\u0275\u0275template", "AssessmentLayoutComponent_Conditional_8_Template", "\u0275\u0275twoWayProperty", "complaintType", "accepted", "undefined", "\u0275\u0275conditional", "AssessmentHeaderComponent", "AssessmentComplaintAlertComponent", "AssessmentNoteComponent", "ComplaintsForTutorComponent", "styles"]
}
