{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/constants/user-settings.constants.ts", "src/main/webapp/app/shared/user-settings/notification-settings/notification-settings-structure.ts", "src/main/webapp/app/shared/user-settings/science-settings/science-settings-structure.ts", "src/main/webapp/app/shared/user-settings/user-settings.service.ts"],
  "sourcesContent": ["export enum UserSettingsCategory {\r\n    NOTIFICATION_SETTINGS = 'NOTIFICATION_SETTINGS',\r\n    SCIENCE_SETTINGS = 'SCIENCE_SETTINGS',\r\n}\r\n\r\n/**\r\n * UserSettings Category__SettingsGroup__SettingId\r\n */\r\nexport enum SettingId {\r\n    // notification settings settingIds\r\n\r\n    // weekly summary\r\n    NOTIFICATION__WEEKLY_SUMMARY__BASIC_WEEKLY_SUMMARY = 'notification.weekly-summary.basic-weekly-summary',\r\n\r\n    // course wide discussion notification setting group\r\n    NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_COURSE_POST = 'notification.course-wide-discussion.new-course-post',\r\n    NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_REPLY_FOR_COURSE_POST = 'notification.course-wide-discussion.new-reply-for-course-post',\r\n    NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_ANNOUNCEMENT_POST = 'notification.course-wide-discussion.new-announcement-post',\r\n\r\n    // exercise notification setting group\r\n    NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_SUBMISSION_ASSESSED = 'notification.exercise-notification.exercise-submission-assessed',\r\n    NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_RELEASED = 'notification.exercise-notification.exercise-released',\r\n    NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_OPEN_FOR_PRACTICE = 'notification.exercise-notification.exercise-open-for-practice',\r\n    NOTIFICATION__EXERCISE_NOTIFICATION__FILE_SUBMISSION_SUCCESSFUL = 'notification.exercise-notification.file-submission-successful',\r\n    NOTIFICATION__EXERCISE_NOTIFICATION__NEW_EXERCISE_POST = 'notification.exercise-notification.new-exercise-post',\r\n    NOTIFICATION__EXERCISE_NOTIFICATION__NEW_REPLY_FOR_EXERCISE_POST = 'notification.exercise-notification.new-reply-for-exercise-post',\r\n\r\n    // lecture notification setting group\r\n    NOTIFICATION__LECTURE_NOTIFICATION__ATTACHMENT_CHANGES = 'notification.lecture-notification.attachment-changes',\r\n    NOTIFICATION__LECTURE_NOTIFICATION__NEW_LECTURE_POST = 'notification.lecture-notification.new-lecture-post',\r\n    NOTIFICATION__LECTURE_NOTIFICATION__NEW_REPLY_FOR_LECTURE_POST = 'notification.lecture-notification.new-reply-for-lecture-post',\r\n\r\n    // exam notification setting group\r\n    NOTIFICATION__EXAM_NOTIFICATION__NEW_EXAM_POST = 'notification.exam-notification.new-exam-post',\r\n    NOTIFICATION__EXAM_NOTIFICATION__NEW_REPLY_FOR_EXAM_POST = 'notification.exam-notification.new-reply-for-exam-post',\r\n\r\n    // tutorial group notification setting group\r\n    NOTIFICATION__TUTORIAL_GROUP_NOTIFICATION__TUTORIAL_GROUP_REGISTRATION = 'notification.tutorial-group-notification.tutorial-group-registration',\r\n    NOTIFICATION__TUTORIAL_GROUP_NOTIFICATION__TUTORIAL_GROUP_DELETE_UPDATE = 'notification.tutorial-group-notification.tutorial-group-delete-update',\r\n\r\n    // tutor notification setting group\r\n    NOTIFICATION__TUTOR_NOTIFICATION__TUTORIAL_GROUP_REGISTRATION = 'notification.tutor-notification.tutorial-group-registration',\r\n    NOTIFICATION__TUTOR_NOTIFICATION__TUTORIAL_GROUP_ASSIGN_UNASSIGN = 'notification.tutor-notification.tutorial-group-assign-unassign',\r\n\r\n    // editor notification setting group\r\n    NOTIFICATION__EDITOR_NOTIFICATION__PROGRAMMING_TEST_CASES_CHANGED = 'notification.editor-notification.programming-test-cases-changed',\r\n\r\n    // instructor notification setting group\r\n    NOTIFICATION__INSTRUCTOR_NOTIFICATION__COURSE_AND_EXAM_ARCHIVING_STARTED = 'notification.instructor-notification.course-and-exam-archiving-started',\r\n\r\n    // user notification setting group\r\n    NOTIFICATION__USER_NOTIFICATION__CONVERSATION_MESSAGE = 'notification.user-notification.conversation-message',\r\n    NOTIFICATION__USER_NOTIFICATION__NEW_REPLY_IN_CONVERSATION_MESSAGE = 'notification.user-notification.new-reply-in-conversation',\r\n    NOTIFICATION__USER_NOTIFICATION__USER_MENTION = 'notification.user-notification.user-mention',\r\n\r\n    // science settings settingIds\r\n\r\n    // science\r\n    SCIENCE__GENERAL__ACTIVITY_TRACKING = 'science.general.activity-tracking',\r\n}\r\n", "import { Authority } from 'app/shared/constants/authority.constants';\r\nimport { SettingId, UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { Setting, UserSettingsStructure } from '../user-settings.model';\r\n\r\nexport interface NotificationSetting extends Setting {\r\n    // Status indicating if the settings was activated for a specific communication channel by the user or the default settings\r\n    webapp?: boolean;\r\n    email?: boolean;\r\n\r\n    // 'x-Support' indicates if the corresponding checkbox is visible in the UI\r\n    // e.g. announcements should always generate a webapp notification -> webappSupport=false\r\n    // If left undefined webappSupport will count as true/activated (to make the structure file more lightweight)\r\n    webappSupport?: boolean;\r\n    // If left undefined emailSupport will count as false/deactivated\r\n    emailSupport?: boolean;\r\n}\r\n\r\nexport const notificationSettingsStructure: UserSettingsStructure<NotificationSetting> = {\r\n    category: UserSettingsCategory.NOTIFICATION_SETTINGS,\r\n    groups: [\r\n        {\r\n            key: 'weeklySummary',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'basicWeeklySummary',\r\n                    descriptionKey: 'basicWeeklySummaryDescription',\r\n                    settingId: SettingId.NOTIFICATION__WEEKLY_SUMMARY__BASIC_WEEKLY_SUMMARY,\r\n                    emailSupport: true,\r\n                    webappSupport: false,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'courseWideDiscussionNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'newCoursePost',\r\n                    descriptionKey: 'newCoursePostDescription',\r\n                    settingId: SettingId.NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_COURSE_POST,\r\n                },\r\n                {\r\n                    key: 'newReplyForCoursePost',\r\n                    descriptionKey: 'newReplyForCoursePostDescription',\r\n                    settingId: SettingId.NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_REPLY_FOR_COURSE_POST,\r\n                },\r\n                {\r\n                    key: 'newAnnouncementPost',\r\n                    descriptionKey: 'newAnnouncementPostDescription',\r\n                    settingId: SettingId.NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_ANNOUNCEMENT_POST,\r\n                    emailSupport: true,\r\n                    webappSupport: false,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'exerciseNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'exerciseReleased',\r\n                    descriptionKey: 'exerciseReleasedDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_RELEASED,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'exerciseOpenForPractice',\r\n                    descriptionKey: 'exerciseOpenForPracticeDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_OPEN_FOR_PRACTICE,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'exerciseSubmissionAssessed',\r\n                    descriptionKey: 'exerciseSubmissionAssessedDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_SUBMISSION_ASSESSED,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'fileSubmissionSuccessful',\r\n                    descriptionKey: 'fileSubmissionSuccessfulDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXERCISE_NOTIFICATION__FILE_SUBMISSION_SUCCESSFUL,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'newExercisePost',\r\n                    descriptionKey: 'newExercisePostDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXERCISE_NOTIFICATION__NEW_EXERCISE_POST,\r\n                },\r\n                {\r\n                    key: 'newReplyForExercisePost',\r\n                    descriptionKey: 'newReplyForExercisePostDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXERCISE_NOTIFICATION__NEW_REPLY_FOR_EXERCISE_POST,\r\n                },\r\n                // quizStartReminder is not necessary here. Only relevant on push devices (android, iOS)\r\n            ],\r\n        },\r\n        {\r\n            key: 'lectureNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'attachmentChanges',\r\n                    descriptionKey: 'attachmentChangesDescription',\r\n                    settingId: SettingId.NOTIFICATION__LECTURE_NOTIFICATION__ATTACHMENT_CHANGES,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'newLecturePost',\r\n                    descriptionKey: 'newLecturePostDescription',\r\n                    settingId: SettingId.NOTIFICATION__LECTURE_NOTIFICATION__NEW_LECTURE_POST,\r\n                },\r\n                {\r\n                    key: 'newReplyForLecturePost',\r\n                    descriptionKey: 'newReplyForLecturePostDescription',\r\n                    settingId: SettingId.NOTIFICATION__LECTURE_NOTIFICATION__NEW_REPLY_FOR_LECTURE_POST,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'examNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'newExamPost',\r\n                    descriptionKey: 'newExamPostDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXAM_NOTIFICATION__NEW_EXAM_POST,\r\n                },\r\n                {\r\n                    key: 'newReplyForExamPost',\r\n                    descriptionKey: 'newReplyForExamPostDescription',\r\n                    settingId: SettingId.NOTIFICATION__EXAM_NOTIFICATION__NEW_REPLY_FOR_EXAM_POST,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'userMentionNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'newUserMention',\r\n                    descriptionKey: 'newUserMentionDescription',\r\n                    settingId: SettingId.NOTIFICATION__USER_NOTIFICATION__USER_MENTION,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'conversationNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'newConversationMessages',\r\n                    descriptionKey: 'newConversationMessageDescription',\r\n                    settingId: SettingId.NOTIFICATION__USER_NOTIFICATION__CONVERSATION_MESSAGE,\r\n                    emailSupport: false,\r\n                },\r\n                {\r\n                    key: 'newReplyMessage',\r\n                    descriptionKey: 'conversationNewReplyMessageDescription',\r\n                    settingId: SettingId.NOTIFICATION__USER_NOTIFICATION__NEW_REPLY_IN_CONVERSATION_MESSAGE,\r\n                    emailSupport: false,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'tutorialGroupNotifications',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'registrationTutorialGroup',\r\n                    descriptionKey: 'registrationTutorialGroupStudentDescription',\r\n                    settingId: SettingId.NOTIFICATION__TUTORIAL_GROUP_NOTIFICATION__TUTORIAL_GROUP_REGISTRATION,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'tutorialGroupUpdateDelete',\r\n                    descriptionKey: 'tutorialGroupUpdateDeleteDescription',\r\n                    settingId: SettingId.NOTIFICATION__TUTORIAL_GROUP_NOTIFICATION__TUTORIAL_GROUP_DELETE_UPDATE,\r\n                    emailSupport: true,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'tutorNotifications',\r\n            restrictionLevels: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR],\r\n            settings: [\r\n                {\r\n                    key: 'registrationTutorialGroup',\r\n                    descriptionKey: 'registrationTutorialGroupTutorDescription',\r\n                    settingId: SettingId.NOTIFICATION__TUTOR_NOTIFICATION__TUTORIAL_GROUP_REGISTRATION,\r\n                    emailSupport: true,\r\n                },\r\n                {\r\n                    key: 'assignUnassignTutorialGroup',\r\n                    descriptionKey: 'assignUnassignTutorialGroupDescription',\r\n                    settingId: SettingId.NOTIFICATION__TUTOR_NOTIFICATION__TUTORIAL_GROUP_ASSIGN_UNASSIGN,\r\n                    emailSupport: true,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'editorNotifications',\r\n            restrictionLevels: [Authority.EDITOR, Authority.INSTRUCTOR],\r\n            settings: [\r\n                {\r\n                    key: 'programmingTestCasesChanged',\r\n                    descriptionKey: 'programmingTestCasesChangedDescription',\r\n                    settingId: SettingId.NOTIFICATION__EDITOR_NOTIFICATION__PROGRAMMING_TEST_CASES_CHANGED,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            key: 'instructorNotifications',\r\n            restrictionLevels: [Authority.INSTRUCTOR],\r\n            settings: [\r\n                {\r\n                    key: 'courseAndExamArchivingStarted',\r\n                    descriptionKey: 'courseAndExamArchivingStartedDescription',\r\n                    settingId: SettingId.NOTIFICATION__INSTRUCTOR_NOTIFICATION__COURSE_AND_EXAM_ARCHIVING_STARTED,\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n", "import { Authority } from 'app/shared/constants/authority.constants';\r\nimport { SettingId, UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { Setting, UserSettingsStructure } from '../user-settings.model';\r\n\r\nexport interface ScienceSetting extends Setting {\r\n    active?: boolean;\r\n}\r\n\r\nexport const scienceSettingsStructure: UserSettingsStructure<ScienceSetting> = {\r\n    category: UserSettingsCategory.SCIENCE_SETTINGS,\r\n    groups: [\r\n        {\r\n            key: 'general',\r\n            restrictionLevels: [Authority.USER],\r\n            settings: [\r\n                {\r\n                    key: 'activity',\r\n                    descriptionKey: 'activityDescription',\r\n                    settingId: SettingId.SCIENCE__GENERAL__ACTIVITY_TRACKING,\r\n                    active: true,\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { NotificationSetting, notificationSettingsStructure } from 'app/shared/user-settings/notification-settings/notification-settings-structure';\r\nimport { UserSettingsCategory } from 'app/shared/constants/user-settings.constants';\r\nimport { Setting, SettingGroup, UserSettingsStructure } from 'app/shared/user-settings/user-settings.model';\r\nimport { ScienceSetting, scienceSettingsStructure } from 'app/shared/user-settings/science-settings/science-settings-structure';\r\nimport { User } from 'app/core/user/user.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserSettingsService {\r\n    private http = inject(HttpClient);\r\n\r\n    public notificationSettingsResourceUrl = 'api/communication/notification-settings';\r\n    public scienceSettingsResourceUrl = 'api/atlas/science-settings';\r\n    public profilePictureResourceUrl = 'api/core/account/profile-picture';\r\n    private applyNewChangesSource = new Subject<string>();\r\n    userSettingsChangeEvent = this.applyNewChangesSource.asObservable();\r\n    error?: string;\r\n\r\n    // load methods\r\n\r\n    /**\r\n     * GET call to the server to receive the stored settings of the current user\r\n     * or default settings if the user has not yet changed the settings\r\n     * @param category limits the server call to only search for settings based on the provided category\r\n     * @return the saved user settings which were found in the database or default settings or error\r\n     */\r\n    public loadSettings(category: UserSettingsCategory): Observable<HttpResponse<Setting[]>> {\r\n        switch (category) {\r\n            case UserSettingsCategory.NOTIFICATION_SETTINGS: {\r\n                return this.http.get<NotificationSetting[]>(this.notificationSettingsResourceUrl, { observe: 'response' });\r\n            }\r\n            case UserSettingsCategory.SCIENCE_SETTINGS: {\r\n                return this.http.get<ScienceSetting[]>(this.scienceSettingsResourceUrl, { observe: 'response' });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called after a successful server call to load user settings\r\n     * The fetched settings are used to update the given settings structure\r\n     * @param receivedSettingsFromServer were loaded from the server to update provided settings structure\r\n     * @param category decided what settings structure to use\r\n     * @return updated settings structure based on loaded settings\r\n     */\r\n    public loadSettingsSuccessAsSettingsStructure(receivedSettingsFromServer: Setting[], category: UserSettingsCategory): UserSettingsStructure<Setting> {\r\n        const settingsResult = UserSettingsService.loadSettingsStructure(category);\r\n        this.updateSettingsStructure(receivedSettingsFromServer, settingsResult);\r\n        return settingsResult;\r\n    }\r\n\r\n    /**\r\n     * Is called after a successful server call to load user settings\r\n     * The fetched settings are used to create the settings structure needed for the template\r\n     * Afterwards the settings structure is used to extract updated individual settings\r\n     * @param receivedSettingsFromServer were loaded from the server to update provided settings structure\r\n     * @param category decided what settings structure to use\r\n     * @return all individual settings based on the updated settings structure\r\n     */\r\n    public loadSettingsSuccessAsIndividualSettings(receivedSettingsFromServer: Setting[], category: UserSettingsCategory): Setting[] {\r\n        const settingsResult = this.loadSettingsSuccessAsSettingsStructure(receivedSettingsFromServer, category);\r\n        return this.extractIndividualSettingsFromSettingsStructure(settingsResult);\r\n    }\r\n\r\n    // save methods\r\n\r\n    /**\r\n     * Saves all settings to the database.\r\n     * @param settings all settings of the given settings structure\r\n     * @param category limits the server call to only search for settings based on the provided category\r\n     * @return all saved user settings which were found in the database (for validation) or error\r\n     */\r\n    public saveSettings(settings: Setting[], category: UserSettingsCategory): Observable<HttpResponse<Setting[]>> {\r\n        switch (category) {\r\n            case UserSettingsCategory.NOTIFICATION_SETTINGS: {\r\n                return this.http.put<Setting[]>(this.notificationSettingsResourceUrl, settings, { observe: 'response' });\r\n            }\r\n            case UserSettingsCategory.SCIENCE_SETTINGS: {\r\n                return this.http.put<Setting[]>(this.scienceSettingsResourceUrl, settings, { observe: 'response' });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called after a successful server call to save settings\r\n     * The fetched individual settings are used to update the given (current) settings structure (for validation)\r\n     * @param settingsStructureToUpdate (usually the current settings structure prior to saving)\r\n     * @param receivedSettingsFromServer were loaded from the server to update provided settings structure\r\n     * @return updated UserSettings structure based on loaded individual settings\r\n     */\r\n    public saveSettingsSuccess(settingsStructureToUpdate: UserSettingsStructure<Setting>, receivedSettingsFromServer: Setting[]): UserSettingsStructure<Setting> {\r\n        this.updateSettingsStructure(receivedSettingsFromServer, settingsStructureToUpdate);\r\n        return settingsStructureToUpdate;\r\n    }\r\n\r\n    // auxiliary methods\r\n\r\n    /**\r\n     * Extracts the individual settings out of the UserSetting structure (hierarchy).\r\n     * @param settingsStructure where the settings should be extracted from\r\n     * @return setting array based on the provided settings structure\r\n     */\r\n    public extractIndividualSettingsFromSettingsStructure(settingsStructure: UserSettingsStructure<Setting>): Setting[] {\r\n        const settingAccumulator: Setting[] = [];\r\n        settingsStructure.groups.forEach((group: SettingGroup<Setting>) => {\r\n            group.settings.forEach((setting: Setting) => {\r\n                // sets changed flag to false after update\r\n                setting.changed = false;\r\n                settingAccumulator.push(setting);\r\n            });\r\n        });\r\n        return settingAccumulator;\r\n    }\r\n\r\n    /**\r\n     * Updates the provided settings structure based on the new individual settings\r\n     * @param newSettings received from the server\r\n     * @param settingsStructureToUpdate will be updated by replacing or merging matching settings\r\n     */\r\n    private updateSettingsStructure(newSettings: Setting[], settingsStructureToUpdate: UserSettingsStructure<Setting>): void {\r\n        for (let i = 0; i < settingsStructureToUpdate.groups.length; i++) {\r\n            for (let j = 0; j < settingsStructureToUpdate.groups[i].settings.length; j++) {\r\n                const currentSetting = settingsStructureToUpdate.groups[i].settings[j];\r\n                const matchingSetting = newSettings.find((newSetting) => newSetting.settingId === currentSetting.settingId);\r\n                if (matchingSetting != undefined) {\r\n                    Object.assign(settingsStructureToUpdate.groups[i].settings[j], matchingSetting);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Provides the foundation for further modification and to be displayed in the template.\r\n     * @param category defines what settings structure to return\r\n     * @return the settings structure based on the provided category\r\n     */\r\n    private static loadSettingsStructure(category: UserSettingsCategory): UserSettingsStructure<Setting> {\r\n        switch (category) {\r\n            case UserSettingsCategory.NOTIFICATION_SETTINGS: {\r\n                return notificationSettingsStructure;\r\n            }\r\n            case UserSettingsCategory.SCIENCE_SETTINGS: {\r\n                return scienceSettingsStructure;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends messages to subscribed observers.\r\n     * If a fitting message is received, specific observers will react to the changed settings they are affected by.\r\n     * E.g. notification-settings component starts an event to reload the notifications displayed in the notification side bar\r\n     */\r\n    public sendApplyChangesEvent(message: string): void {\r\n        this.applyNewChangesSource.next(message);\r\n    }\r\n\r\n    public updateProfilePicture(file: Blob) {\r\n        const formData = new FormData();\r\n        formData.append('file', file, 'placeholderName.jpeg');\r\n\r\n        return this.http.put<User>(`${this.profilePictureResourceUrl}`, formData, { observe: 'response' });\r\n    }\r\n\r\n    public removeProfilePicture() {\r\n        return this.http.delete<User>(`${this.profilePictureResourceUrl}`, { observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["UserSettingsCategory", "SettingId", "notificationSettingsStructure", "category", "UserSettingsCategory", "NOTIFICATION_SETTINGS", "groups", "key", "restrictionLevels", "Authority", "USER", "settings", "descriptionKey", "settingId", "SettingId", "NOTIFICATION__WEEKLY_SUMMARY__BASIC_WEEKLY_SUMMARY", "emailSupport", "webappSupport", "NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_COURSE_POST", "NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_REPLY_FOR_COURSE_POST", "NOTIFICATION__COURSE_WIDE_DISCUSSION__NEW_ANNOUNCEMENT_POST", "NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_RELEASED", "NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_OPEN_FOR_PRACTICE", "NOTIFICATION__EXERCISE_NOTIFICATION__EXERCISE_SUBMISSION_ASSESSED", "NOTIFICATION__EXERCISE_NOTIFICATION__FILE_SUBMISSION_SUCCESSFUL", "NOTIFICATION__EXERCISE_NOTIFICATION__NEW_EXERCISE_POST", "NOTIFICATION__EXERCISE_NOTIFICATION__NEW_REPLY_FOR_EXERCISE_POST", "NOTIFICATION__LECTURE_NOTIFICATION__ATTACHMENT_CHANGES", "NOTIFICATION__LECTURE_NOTIFICATION__NEW_LECTURE_POST", "NOTIFICATION__LECTURE_NOTIFICATION__NEW_REPLY_FOR_LECTURE_POST", "NOTIFICATION__EXAM_NOTIFICATION__NEW_EXAM_POST", "NOTIFICATION__EXAM_NOTIFICATION__NEW_REPLY_FOR_EXAM_POST", "NOTIFICATION__USER_NOTIFICATION__USER_MENTION", "NOTIFICATION__USER_NOTIFICATION__CONVERSATION_MESSAGE", "NOTIFICATION__USER_NOTIFICATION__NEW_REPLY_IN_CONVERSATION_MESSAGE", "NOTIFICATION__TUTORIAL_GROUP_NOTIFICATION__TUTORIAL_GROUP_REGISTRATION", "NOTIFICATION__TUTORIAL_GROUP_NOTIFICATION__TUTORIAL_GROUP_DELETE_UPDATE", "TA", "EDITOR", "INSTRUCTOR", "NOTIFICATION__TUTOR_NOTIFICATION__TUTORIAL_GROUP_REGISTRATION", "NOTIFICATION__TUTOR_NOTIFICATION__TUTORIAL_GROUP_ASSIGN_UNASSIGN", "NOTIFICATION__EDITOR_NOTIFICATION__PROGRAMMING_TEST_CASES_CHANGED", "NOTIFICATION__INSTRUCTOR_NOTIFICATION__COURSE_AND_EXAM_ARCHIVING_STARTED", "scienceSettingsStructure", "category", "UserSettingsCategory", "SCIENCE_SETTINGS", "groups", "key", "restrictionLevels", "Authority", "USER", "settings", "descriptionKey", "settingId", "SettingId", "SCIENCE__GENERAL__ACTIVITY_TRACKING", "active", "UserSettingsService", "http", "inject", "HttpClient", "notificationSettingsResourceUrl", "scienceSettingsResourceUrl", "profilePictureResourceUrl", "applyNewChangesSource", "Subject", "userSettingsChangeEvent", "asObservable", "error", "loadSettings", "category", "UserSettingsCategory", "NOTIFICATION_SETTINGS", "get", "observe", "SCIENCE_SETTINGS", "loadSettingsSuccessAsSettingsStructure", "receivedSettingsFromServer", "settingsResult", "loadSettingsStructure", "updateSettingsStructure", "loadSettingsSuccessAsIndividualSettings", "extractIndividualSettingsFromSettingsStructure", "saveSettings", "settings", "put", "saveSettingsSuccess", "settingsStructureToUpdate", "settingsStructure", "settingAccumulator", "groups", "forEach", "group", "setting", "changed", "push", "newSettings", "i", "length", "j", "currentSetting", "matchingSetting", "find", "newSetting", "settingId", "undefined", "Object", "assign", "notificationSettingsStructure", "scienceSettingsStructure", "sendApplyChangesEvent", "message", "next", "updateProfilePicture", "file", "formData", "FormData", "append", "removeProfilePicture", "delete", "factory", "\u0275fac", "providedIn"]
}
