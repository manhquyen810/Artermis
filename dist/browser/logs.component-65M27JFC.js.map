{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/logs/log.model.ts", "src/main/webapp/app/admin/logs/logs.service.ts", "src/main/webapp/app/admin/logs/logs.component.ts", "src/main/webapp/app/admin/logs/logs.component.html"],
  "sourcesContent": ["export type Level = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\r\n\r\nexport interface Logger {\r\n    configuredLevel: Level | undefined;\r\n    effectiveLevel: Level;\r\n}\r\n\r\nexport interface LoggersResponse {\r\n    levels: Level[];\r\n    loggers: { [key: string]: Logger };\r\n}\r\n\r\nexport class Log {\r\n    constructor(\r\n        public name: string,\r\n        public level: Level,\r\n    ) {}\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Level, LoggersResponse } from './log.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LogsService {\r\n    private http = inject(HttpClient);\r\n\r\n    changeLevel(name: string, configuredLevel: Level): Observable<any> {\r\n        return this.http.post(`management/loggers/${name}`, { configuredLevel });\r\n    }\r\n\r\n    /**\r\n     * Sends a GET request to retrieve all logs\r\n     */\r\n    findAll(): Observable<LoggersResponse> {\r\n        return this.http.get<LoggersResponse>('management/loggers');\r\n    }\r\n}\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\r\nimport { Level, Log, LoggersResponse } from 'app/admin/logs/log.model';\r\nimport { LogsService } from 'app/admin/logs/logs.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass, SlicePipe } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'jhi-logs',\r\n    templateUrl: './logs.component.html',\r\n    styleUrls: ['./logs.component.scss'],\r\n    imports: [TranslateDirective, FormsModule, SortDirective, SortByDirective, FaIconComponent, NgClass, SlicePipe],\r\n})\r\nexport class LogsComponent implements OnInit {\r\n    private logsService = inject(LogsService);\r\n\r\n    loggers?: Log[];\r\n    filteredAndOrderedLoggers?: Log[];\r\n    filter = '';\r\n    orderProp: keyof Log = 'name';\r\n    ascending = true;\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n\r\n    /**\r\n     * Subscribe to the logsService to retrieve all logs\r\n     */\r\n    ngOnInit() {\r\n        this.findAndExtractLoggers();\r\n    }\r\n\r\n    /**\r\n     * Changes the log level for the log with the name {@param name}\r\n     *\r\n     * @param name  name of the log\r\n     * @param level log level (TRACE, DEBUG, INFO, WARN, ERROR)\r\n     */\r\n    changeLevel(name: string, level: Level): void {\r\n        this.logsService.changeLevel(name, level).subscribe(() => this.findAndExtractLoggers());\r\n    }\r\n\r\n    filterAndSort(): void {\r\n        this.filteredAndOrderedLoggers = this.loggers!.filter((logger) => !this.filter || logger.name.toLowerCase().includes(this.filter.toLowerCase())).sort((a, b) => {\r\n            if (a[this.orderProp] < b[this.orderProp]) {\r\n                return this.ascending ? -1 : 1;\r\n            } else if (a[this.orderProp] > b[this.orderProp]) {\r\n                return this.ascending ? 1 : -1;\r\n            } else if (this.orderProp === 'level') {\r\n                return a.name < b.name ? -1 : 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private findAndExtractLoggers(): void {\r\n        this.logsService.findAll().subscribe((response: LoggersResponse) => {\r\n            this.loggers = Object.entries(response.loggers).map(([key, logger]) => new Log(key, logger.effectiveLevel));\r\n            this.filterAndSort();\r\n        });\r\n    }\r\n}\r\n", "@if (loggers) {\r\n    <div class=\"table-responsive\">\r\n        <h2 id=\"logs-page-heading\" jhiTranslate=\"logs.title\" data-cy=\"logsPageHeading\"></h2>\r\n        <p jhiTranslate=\"logs.nbloggers\" [translateValues]=\"{ total: loggers.length }\">There are {{ loggers.length }} loggers.</p>\r\n        <span jhiTranslate=\"logs.filter\"></span>\r\n        <input type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterAndSort()\" class=\"form-control\" />\r\n        <table class=\"table table-sm table-striped table-bordered\" aria-describedby=\"logs-page-heading\">\r\n            <thead>\r\n                <tr jhiSort [(predicate)]=\"orderProp\" [(ascending)]=\"ascending\" (sortChange)=\"filterAndSort()\">\r\n                    <th jhiSortBy=\"name\" scope=\"col\"><span jhiTranslate=\"logs.table.name\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                    <th jhiSortBy=\"level\" scope=\"col\"><span jhiTranslate=\"logs.table.level\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                </tr>\r\n            </thead>\r\n            @for (logger of filteredAndOrderedLoggers; track logger) {\r\n                <tr>\r\n                    <td>\r\n                        <small>{{ logger.name | slice: 0 : 140 }}</small>\r\n                    </td>\r\n                    <td>\r\n                        <button (click)=\"changeLevel(logger.name, 'TRACE')\" [ngClass]=\"logger.level === 'TRACE' ? 'btn-primary' : 'btn-light'\" class=\"btn btn-sm\">TRACE</button>\r\n                        <button (click)=\"changeLevel(logger.name, 'DEBUG')\" [ngClass]=\"logger.level === 'DEBUG' ? 'btn-success' : 'btn-light'\" class=\"btn btn-sm\">DEBUG</button>\r\n                        <button (click)=\"changeLevel(logger.name, 'INFO')\" [ngClass]=\"logger.level === 'INFO' ? 'btn-info' : 'btn-light'\" class=\"btn btn-sm\">INFO</button>\r\n                        <button (click)=\"changeLevel(logger.name, 'WARN')\" [ngClass]=\"logger.level === 'WARN' ? 'btn-warning' : 'btn-light'\" class=\"btn btn-sm\">WARN</button>\r\n                        <button (click)=\"changeLevel(logger.name, 'ERROR')\" [ngClass]=\"logger.level === 'ERROR' ? 'btn-danger' : 'btn-light'\" class=\"btn btn-sm\">ERROR</button>\r\n                        <button (click)=\"changeLevel(logger.name, 'OFF')\" [ngClass]=\"logger.level === 'OFF' ? 'btn-secondary' : 'btn-light'\" class=\"btn btn-sm\">OFF</button>\r\n                    </td>\r\n                </tr>\r\n            }\r\n        </table>\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["Log", "name", "level", "constructor", "LogsService", "http", "inject", "HttpClient", "changeLevel", "name", "configuredLevel", "post", "findAll", "get", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "logger_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "changeLevel", "name", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind3", "\u0275\u0275property", "level", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "filter", "filterAndSort", "orderProp", "ascending", "\u0275\u0275repeaterCreate", "LogsComponent_Conditional_0_For_31_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275pureFunction1", "_c0", "loggers", "length", "\u0275\u0275textInterpolate1", "\u0275\u0275twoWayProperty", "faSort", "\u0275\u0275repeater", "filteredAndOrderedLoggers", "LogsComponent", "logsService", "inject", "LogsService", "ngOnInit", "findAndExtractLoggers", "subscribe", "logger", "toLowerCase", "includes", "sort", "a", "b", "findAll", "response", "Object", "entries", "map", "key", "Log", "effectiveLevel", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "LogsComponent_Conditional_0_Template", "\u0275\u0275conditional", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "SortDirective", "SortByDirective", "FaIconComponent", "NgClass", "SlicePipe", "styles"]
}
