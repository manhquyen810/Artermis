{
  "version": 3,
  "sources": ["src/main/webapp/app/overview/course-overview-guard.ts", "src/main/webapp/app/overview/courses.route.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Course, isCommunicationEnabled } from 'app/entities/course.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { CourseOverviewRoutePath } from 'app/overview/courses.route';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CourseOverviewGuard implements CanActivate {\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private router = inject(Router);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    /**\r\n     * Check if the client can activate a course overview route.\r\n     * @return true if the client is allowed to access the route, false otherwise\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n        const courseIdString = route.parent?.paramMap.get('courseId');\r\n        if (!courseIdString) {\r\n            return of(false);\r\n        }\r\n        const courseIdNumber = parseInt(courseIdString, 10);\r\n\r\n        const path = route.routeConfig?.path;\r\n        if (!path) {\r\n            return of(false);\r\n        }\r\n        //we need to load the course from the server to check if the user has access to the requested route. The course in the cache might not be sufficient (e.g. misses exams or lectures)\r\n        return this.courseManagementService.findOneForDashboard(courseIdNumber).pipe(\r\n            switchMap((res) => {\r\n                if (res.body) {\r\n                    // Store course in cache\r\n                    this.courseStorageService.updateCourse(res.body);\r\n                }\r\n                // Flatten the result to return Observable<boolean> directly\r\n                return this.handleReturn(this.courseStorageService.getCourse(courseIdNumber), path);\r\n            }),\r\n        );\r\n    }\r\n\r\n    handleReturn = (course?: Course, type?: string): Observable<boolean> => {\r\n        let hasAccess: boolean;\r\n        switch (type) {\r\n            // Should always be accessible\r\n            case CourseOverviewRoutePath.EXERCISES:\r\n                hasAccess = true;\r\n                break;\r\n            case CourseOverviewRoutePath.LECTURES:\r\n                hasAccess = !!course?.lectures;\r\n                break;\r\n            case CourseOverviewRoutePath.EXAMS:\r\n                hasAccess = this.hasVisibleExams(course);\r\n                break;\r\n            case CourseOverviewRoutePath.COMPETENCIES:\r\n                hasAccess = !!(course?.numberOfCompetencies || course?.numberOfPrerequisites);\r\n                break;\r\n            case CourseOverviewRoutePath.TUTORIAL_GROUPS:\r\n                hasAccess = !!course?.numberOfTutorialGroups;\r\n                break;\r\n            case CourseOverviewRoutePath.DASHBOARD:\r\n                hasAccess = course?.studentCourseAnalyticsDashboardEnabled ?? false;\r\n                break;\r\n            case CourseOverviewRoutePath.FAQ:\r\n                hasAccess = course?.faqEnabled ?? false;\r\n                break;\r\n            case CourseOverviewRoutePath.LEARNING_PATH:\r\n                hasAccess = course?.learningPathsEnabled ?? false;\r\n                break;\r\n            case CourseOverviewRoutePath.COMMUNICATION:\r\n                hasAccess = isCommunicationEnabled(course);\r\n                break;\r\n            default:\r\n                hasAccess = false;\r\n        }\r\n        if (!hasAccess) {\r\n            // Default route, redirect to exercises if the user does not have access to the requested route\r\n            this.router.navigate([`/courses/${course?.id}/exercises`]);\r\n        }\r\n        return of(hasAccess);\r\n    };\r\n\r\n    hasVisibleExams(course?: Course): boolean {\r\n        if (course?.exams) {\r\n            for (const exam of course.exams) {\r\n                if (exam.visibleDate && dayjs(exam.visibleDate).isBefore(this.serverDateService.now())) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "import { Routes } from '@angular/router';\r\n\r\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\n\r\nimport { PendingChangesGuard } from 'app/shared/guard/pending-changes.guard';\r\n\r\nimport { CourseOverviewGuard } from 'app/overview/course-overview-guard';\r\n\r\nexport enum CourseOverviewRoutePath {\r\n    DASHBOARD = 'dashboard',\r\n    EXERCISES = 'exercises',\r\n    EXAMS = 'exams',\r\n    COMPETENCIES = 'competencies',\r\n    TUTORIAL_GROUPS = 'tutorial-groups',\r\n    FAQ = 'faq',\r\n    LEARNING_PATH = 'learning-path',\r\n    LECTURES = 'lectures',\r\n    ENROLL = 'enroll',\r\n    ARCHIVE = 'archive',\r\n    STATISTICS = 'statistics',\r\n    COMMUNICATION = 'communication',\r\n}\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        loadComponent: () => import('app/overview/courses.component').then((m) => m.CoursesComponent),\r\n        data: {\r\n            authorities: [Authority.USER],\r\n            pageTitle: 'overview.title',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        path: CourseOverviewRoutePath.ENROLL,\r\n        loadComponent: () => import('app/overview/course-registration/course-registration.component').then((m) => m.CourseRegistrationComponent),\r\n        data: {\r\n            authorities: [Authority.USER],\r\n            pageTitle: 'artemisApp.studentDashboard.enroll.title',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        path: CourseOverviewRoutePath.ARCHIVE,\r\n        loadComponent: () => import('./course-archive/course-archive.component').then((m) => m.CourseArchiveComponent),\r\n        data: {\r\n            authorities: [Authority.USER],\r\n            pageTitle: 'overview.archive',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    // /courses/:courseId/register is special,\r\n    // because we won't have access to the course object before the user is registered,\r\n    // so we need to load it outside the normal course routing\r\n    {\r\n        path: ':courseId/register',\r\n        loadComponent: () =>\r\n            import('app/overview/course-registration/course-registration-detail/course-registration-detail.component').then((m) => m.CourseRegistrationDetailComponent),\r\n        data: {\r\n            authorities: [Authority.USER],\r\n            pageTitle: 'artemisApp.studentDashboard.enroll.title',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        path: ':courseId',\r\n        loadComponent: () => import('./course-overview.component').then((m) => m.CourseOverviewComponent),\r\n        data: {\r\n            authorities: [Authority.USER],\r\n            pageTitle: 'overview.course',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n        children: [\r\n            {\r\n                path: CourseOverviewRoutePath.EXERCISES,\r\n                loadComponent: () => import('app/overview/course-exercises/course-exercises.component').then((m) => m.CourseExercisesComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.exercises',\r\n                    hasSidebar: true,\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n\r\n                children: [\r\n                    {\r\n                        path: ':exerciseId',\r\n                        data: {\r\n                            authorities: [Authority.USER],\r\n                            pageTitle: 'overview.exercises',\r\n                            hasSidebar: true,\r\n                            showRefreshButton: true,\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                        loadComponent: () => import('app/orion/participation/orion-course-exercise-details.component').then((m) => m.OrionCourseExerciseDetailsComponent),\r\n                        pathMatch: 'full',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: 'exercises/text-exercises/:exerciseId',\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.textExercise',\r\n                },\r\n                loadChildren: () => import('../exercises/text/participate/text-editor.route').then((m) => m.textEditorRoute),\r\n            },\r\n            {\r\n                path: 'exercises/programming-exercises/:exerciseId/code-editor/:participationId',\r\n                loadComponent: () => import('app/exercises/programming/participate/code-editor-student-container.component').then((m) => m.CodeEditorStudentContainerComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.programmingExercise',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: 'exercises/:exerciseId/repository',\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.repository',\r\n                },\r\n                loadChildren: () => import('../exercises/programming/participate/programming-repository.route').then((m) => m.routes),\r\n            },\r\n            {\r\n                path: 'exercises/modeling-exercises/:exerciseId',\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.modelingExercise',\r\n                },\r\n                loadChildren: () => import('../exercises/modeling/participate/modeling-participation.route').then((m) => m.routes),\r\n            },\r\n            {\r\n                path: 'exercises/quiz-exercises/:exerciseId',\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.quizExercise',\r\n                },\r\n                loadChildren: () => import('../exercises/quiz/participate/quiz-participation.route').then((m) => m.routes),\r\n            },\r\n            {\r\n                path: 'exercises/file-upload-exercises/:exerciseId/participate/:participationId',\r\n                loadComponent: () => import('app/exercises/file-upload/participate/file-upload-submission.component').then((m) => m.FileUploadSubmissionComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.fileUploadExercise',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n                canDeactivate: [PendingChangesGuard],\r\n            },\r\n\r\n            {\r\n                path: CourseOverviewRoutePath.LECTURES,\r\n                loadComponent: () => import('app/overview/course-lectures/course-lectures.component').then((m) => m.CourseLecturesComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.lectures',\r\n                    hasSidebar: true,\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [UserRouteAccessService, CourseOverviewGuard],\r\n                children: [\r\n                    {\r\n                        path: ':lectureId',\r\n                        data: {\r\n                            authorities: [Authority.USER],\r\n                            pageTitle: 'overview.lectures',\r\n                            hasSidebar: true,\r\n                            showRefreshButton: true,\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                        loadComponent: () => import('app/overview/course-lectures/course-lecture-details.component').then((m) => m.CourseLectureDetailsComponent),\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.STATISTICS,\r\n                loadChildren: () => import('./course-statistics/course-statistics.route').then((m) => m.routes),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.statistics',\r\n                    showRefreshButton: true,\r\n                },\r\n            },\r\n\r\n            {\r\n                path: CourseOverviewRoutePath.COMPETENCIES,\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.competencies',\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [CourseOverviewGuard],\r\n                children: [\r\n                    {\r\n                        path: '',\r\n                        pathMatch: 'full',\r\n                        data: {\r\n                            authorities: [Authority.USER],\r\n                            pageTitle: 'overview.competencies',\r\n                        },\r\n                        loadComponent: () => import('app/overview/course-competencies/course-competencies.component').then((m) => m.CourseCompetenciesComponent),\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: ':competencyId',\r\n                        loadComponent: () => import('app/overview/course-competencies/course-competencies-details.component').then((m) => m.CourseCompetenciesDetailsComponent),\r\n                        data: {\r\n                            authorities: [Authority.USER],\r\n                            pageTitle: 'overview.competencies',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.DASHBOARD,\r\n                pathMatch: 'full',\r\n                loadComponent: () => import('app/overview/course-dashboard/course-dashboard.component').then((m) => m.CourseDashboardComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.dashboard',\r\n                },\r\n                canActivate: [UserRouteAccessService, CourseOverviewGuard],\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.LEARNING_PATH,\r\n                loadComponent: () =>\r\n                    import('app/course/learning-paths/pages/learning-path-student-page/learning-path-student-page.component').then((c) => c.LearningPathStudentPageComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.learningPath',\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [CourseOverviewGuard],\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.COMMUNICATION,\r\n                pathMatch: 'full',\r\n                loadComponent: () => import('app/overview/course-conversations/course-conversations.component').then((m) => m.CourseConversationsComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.communication',\r\n                    hasSidebar: true,\r\n                    showRefreshButton: true,\r\n                },\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.TUTORIAL_GROUPS,\r\n                loadComponent: () => import('./course-tutorial-groups/course-tutorial-groups.component').then((m) => m.CourseTutorialGroupsComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.tutorialGroups',\r\n                    hasSidebar: true,\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [UserRouteAccessService, CourseOverviewGuard],\r\n                children: [\r\n                    {\r\n                        path: ':tutorialGroupId',\r\n                        loadComponent: () =>\r\n                            import('./tutorial-group-details/course-tutorial-group-detail/course-tutorial-group-detail.component').then(\r\n                                (m) => m.CourseTutorialGroupDetailComponent,\r\n                            ),\r\n                        data: {\r\n                            authorities: [Authority.USER],\r\n                            pageTitle: 'overview.tutorialGroups',\r\n                            hasSidebar: true,\r\n                            showRefreshButton: true,\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.EXAMS,\r\n                loadComponent: () => import('./course-exams/course-exams.component').then((m) => m.CourseExamsComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.exams',\r\n                    hasSidebar: true,\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [UserRouteAccessService, CourseOverviewGuard],\r\n                children: [\r\n                    {\r\n                        path: ':examId',\r\n                        loadComponent: () => import('app/exam/participate/exam-participation.component').then((m) => m.ExamParticipationComponent),\r\n                        data: {\r\n                            authorities: [Authority.USER],\r\n                            pageTitle: 'overview.exams',\r\n                            hasSidebar: true,\r\n                            showRefreshButton: true,\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                        canDeactivate: [PendingChangesGuard],\r\n                        loadChildren: () => import('../exam/participate/exam-participation.route').then((m) => m.examParticipationRoute),\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: 'plagiarism-cases/:plagiarismCaseId',\r\n                loadComponent: () =>\r\n                    import('app/course/plagiarism-cases/student-view/detail-view/plagiarism-case-student-detail-view.component').then(\r\n                        (m) => m.PlagiarismCaseStudentDetailViewComponent,\r\n                    ),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.plagiarismCases',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: CourseOverviewRoutePath.FAQ,\r\n                loadComponent: () => import('../overview/course-faq/course-faq.component').then((m) => m.CourseFaqComponent),\r\n                data: {\r\n                    authorities: [Authority.USER],\r\n                    pageTitle: 'overview.faq',\r\n                    hasSidebar: false,\r\n                    showRefreshButton: true,\r\n                },\r\n                canActivate: [CourseOverviewGuard],\r\n            },\r\n            {\r\n                path: '',\r\n                redirectTo: CourseOverviewRoutePath.DASHBOARD, // dashboard will redirect to exercises if not enabled\r\n                pathMatch: 'full',\r\n            },\r\n        ],\r\n    },\r\n];\r\n"],
  "mappings": "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",
  "names": ["CourseOverviewGuard", "courseStorageService", "inject", "CourseStorageService", "courseManagementService", "CourseManagementService", "router", "Router", "serverDateService", "ArtemisServerDateService", "canActivate", "route", "courseIdString", "parent", "paramMap", "get", "of", "courseIdNumber", "parseInt", "path", "routeConfig", "findOneForDashboard", "pipe", "switchMap", "res", "body", "updateCourse", "handleReturn", "getCourse", "course", "type", "hasAccess", "CourseOverviewRoutePath", "EXERCISES", "LECTURES", "lectures", "EXAMS", "hasVisibleExams", "COMPETENCIES", "numberOfCompetencies", "numberOfPrerequisites", "TUTORIAL_GROUPS", "numberOfTutorialGroups", "DASHBOARD", "studentCourseAnalyticsDashboardEnabled", "FAQ", "faqEnabled", "LEARNING_PATH", "learningPathsEnabled", "COMMUNICATION", "isCommunicationEnabled", "navigate", "id", "exams", "exam", "visibleDate", "dayjs", "isBefore", "now", "factory", "\u0275fac", "providedIn", "CourseOverviewRoutePath", "routes", "path", "loadComponent", "then", "m", "CoursesComponent", "data", "authorities", "Authority", "USER", "pageTitle", "canActivate", "UserRouteAccessService", "ENROLL", "CourseRegistrationComponent", "ARCHIVE", "CourseArchiveComponent", "CourseRegistrationDetailComponent", "CourseOverviewComponent", "children", "EXERCISES", "CourseExercisesComponent", "hasSidebar", "showRefreshButton", "OrionCourseExerciseDetailsComponent", "pathMatch", "loadChildren", "textEditorRoute", "CodeEditorStudentContainerComponent", "FileUploadSubmissionComponent", "canDeactivate", "PendingChangesGuard", "LECTURES", "CourseLecturesComponent", "CourseOverviewGuard", "CourseLectureDetailsComponent", "STATISTICS", "COMPETENCIES", "CourseCompetenciesComponent", "CourseCompetenciesDetailsComponent", "DASHBOARD", "CourseDashboardComponent", "LEARNING_PATH", "c", "LearningPathStudentPageComponent", "COMMUNICATION", "CourseConversationsComponent", "TUTORIAL_GROUPS", "CourseTutorialGroupsComponent", "CourseTutorialGroupDetailComponent", "EXAMS", "CourseExamsComponent", "ExamParticipationComponent", "examParticipationRoute", "PlagiarismCaseStudentDetailViewComponent", "FAQ", "CourseFaqComponent", "redirectTo"]
}
