{
  "version": 3,
  "sources": ["src/main/webapp/app/utils/date.utils.ts"],
  "sourcesContent": ["import dayjs from 'dayjs/esm';\r\n\r\n/**\r\n * Converts a date in order to send it to the server\r\n * @param date the date either as proper date or string representation\r\n * @return the json representation of the date or the current representation if the date is not a dayjs date\r\n */\r\nexport function convertDateFromClient(date?: dayjs.Dayjs): string | undefined {\r\n    if (!dayjs(date).isValid()) {\r\n        return undefined;\r\n    }\r\n    return date && dayjs.isDayjs(date) ? date.toJSON() : date;\r\n}\r\n\r\n/**\r\n * converts a date sent by the server to a proper dayjs object\r\n * @param date the date sent by the server\r\n * @return the date as dayjs object if it is defined\r\n */\r\nexport function convertDateFromServer(date?: dayjs.Dayjs): dayjs.Dayjs | undefined {\r\n    return date ? dayjs(date) : undefined;\r\n}\r\n\r\nfunction padWithZero(x: number): string {\r\n    if (x < 10) {\r\n        return '0' + x.toString();\r\n    }\r\n    return x.toString();\r\n}\r\n\r\n/**\r\n * Creates date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\r\n *\r\n * Note: It does this WITHOUT any time zone conversion! The server is responsible for interpreting the date in the correct time zone.\r\n * Note: Useful if you want to send a date exactly to the server as the user has entered it.\r\n *\r\n * Converts to LocalDate in Java on the server side.\r\n *\r\n * @param date date to convert\r\n */\r\nexport function toISO8601DateString(date: Date | undefined | null) {\r\n    if (date) {\r\n        return date.getFullYear() + '-' + padWithZero(date.getMonth() + 1) + '-' + padWithZero(date.getDate());\r\n    } else {\r\n        return date;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a date-time string without a time-zone in the ISO-8601 calendar system , such as 2007-12-03T10:15:30.\r\n *\r\n * Note: It does this WITHOUT any time zone conversion! The server is responsible for interpreting the date in the correct time zone.\r\n * Note: Useful if you want to send a date exactly to the server as the user has entered it.\r\n *\r\n * Converts to LocalDateTime in Java on the server side.\r\n *\r\n * @param date date to convert\r\n */\r\nexport function toISO8601DateTimeString(date: Date | undefined | null) {\r\n    if (date) {\r\n        return toISO8601DateString(date) + 'T' + padWithZero(date.getHours()) + ':' + padWithZero(date.getMinutes()) + ':' + padWithZero(date.getSeconds());\r\n    } else {\r\n        return date;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts dayOfWeek sunday(0) to saturday(6) to dayOfWeek monday(0) to sunday(6)\r\n * @param dayOfWeekZeroSunday dayOfWeek sunday(0) to saturday(6)\r\n */\r\nexport function dayOfWeekZeroSundayToZeroMonday(dayOfWeekZeroSunday: number): number {\r\n    if (dayOfWeekZeroSunday < 0 || dayOfWeekZeroSunday > 6) {\r\n        throw new Error('dayOfWeekZeroSunday must be between 0 and 6');\r\n    }\r\n    return (dayOfWeekZeroSunday + 6) % 7;\r\n}\r\n\r\nexport function isDateLessThanAWeekInTheFuture(date: dayjs.Dayjs, compareTime?: dayjs.Dayjs): boolean {\r\n    const now = compareTime ?? dayjs();\r\n    return date.isBetween(now.add(1, 'week'), now);\r\n}\r\n"],
  "mappings": "wCAOM,SAAUA,EAAsBC,EAAkB,CACpD,GAAKC,EAAMD,CAAI,EAAEE,QAAO,EAGxB,OAAOF,GAAQC,EAAME,QAAQH,CAAI,EAAIA,EAAKI,OAAM,EAAKJ,CACzD,CAOM,SAAUK,EAAsBL,EAAkB,CACpD,OAAOA,EAAOC,EAAMD,CAAI,EAAIM,MAChC,CAEA,SAASC,EAAYC,EAAS,CAC1B,OAAIA,EAAI,GACG,IAAMA,EAAEC,SAAQ,EAEpBD,EAAEC,SAAQ,CACrB,CAYM,SAAUC,EAAoBV,EAA6B,CAC7D,OAAIA,GACOA,EAAKW,YAAW,EAAK,IAAMJ,EAAYP,EAAKY,SAAQ,EAAK,CAAC,EAAI,IAAML,EAAYP,EAAKa,QAAO,CAAE,CAI7G,CAYM,SAAUC,EAAwBd,EAA6B,CACjE,OAAIA,GACOU,EAAoBV,CAAI,EAAI,IAAMO,EAAYP,EAAKe,SAAQ,CAAE,EAAI,IAAMR,EAAYP,EAAKgB,WAAU,CAAE,EAAI,IAAMT,EAAYP,EAAKiB,WAAU,CAAE,CAI1J,CAMM,SAAUC,EAAgCC,EAA2B,CACvE,GAAIA,EAAsB,GAAKA,EAAsB,EACjD,MAAM,IAAIC,MAAM,6CAA6C,EAEjE,OAAQD,EAAsB,GAAK,CACvC,CAEM,SAAUE,EAA+BrB,EAAmBsB,EAAyB,CACvF,IAAMC,EAAMD,GAAerB,EAAK,EAChC,OAAOD,EAAKwB,UAAUD,EAAIE,IAAI,EAAG,MAAM,EAAGF,CAAG,CACjD",
  "names": ["convertDateFromClient", "date", "dayjs", "isValid", "isDayjs", "toJSON", "convertDateFromServer", "undefined", "padWithZero", "x", "toString", "toISO8601DateString", "getFullYear", "getMonth", "getDate", "toISO8601DateTimeString", "getHours", "getMinutes", "getSeconds", "dayOfWeekZeroSundayToZeroMonday", "dayOfWeekZeroSunday", "Error", "isDateLessThanAWeekInTheFuture", "compareTime", "now", "isBetween", "add"]
}
