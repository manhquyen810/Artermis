{
  "version": 3,
  "sources": ["src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-video-unit/edit-video-unit.component.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-video-unit/edit-video-unit.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { VideoUnit } from 'app/entities/lecture-unit/videoUnit.model';\r\nimport { VideoUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/video-unit-form/video-unit-form.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { VideoUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/videoUnit.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { finalize, switchMap, take } from 'rxjs/operators';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { combineLatest } from 'rxjs';\r\nimport { LectureUnitLayoutComponent } from '../lecture-unit-layout/lecture-unit-layout.component';\r\nimport { VideoUnitFormComponent } from '../video-unit-form/video-unit-form.component';\r\n\r\n@Component({\r\n    selector: 'jhi-edit-video-unit',\r\n    templateUrl: './edit-video-unit.component.html',\r\n    imports: [LectureUnitLayoutComponent, VideoUnitFormComponent],\r\n})\r\nexport class EditVideoUnitComponent implements OnInit {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private videoUnitService = inject(VideoUnitService);\r\n    private alertService = inject(AlertService);\r\n\r\n    isLoading = false;\r\n    videoUnit: VideoUnit;\r\n    formData: VideoUnitFormData;\r\n    lectureId: number;\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        const lectureRoute = this.activatedRoute.parent!.parent!;\r\n        combineLatest([this.activatedRoute.paramMap, lectureRoute.paramMap])\r\n            .pipe(\r\n                take(1),\r\n                switchMap(([params, parentParams]) => {\r\n                    const videoUnitId = Number(params.get('videoUnitId'));\r\n                    this.lectureId = Number(parentParams.get('lectureId'));\r\n                    return this.videoUnitService.findById(videoUnitId, this.lectureId);\r\n                }),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (videoUnitResponse: HttpResponse<VideoUnit>) => {\r\n                    this.videoUnit = videoUnitResponse.body!;\r\n\r\n                    this.formData = {\r\n                        name: this.videoUnit.name,\r\n                        description: this.videoUnit.description,\r\n                        releaseDate: this.videoUnit.releaseDate,\r\n                        source: this.videoUnit.source,\r\n                        competencyLinks: this.videoUnit.competencyLinks,\r\n                    };\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n\r\n    updateVideoUnit(formData: VideoUnitFormData) {\r\n        const { name, description, releaseDate, source, competencyLinks } = formData;\r\n        this.videoUnit.name = name;\r\n        this.videoUnit.description = description;\r\n        this.videoUnit.releaseDate = releaseDate;\r\n        this.videoUnit.source = source;\r\n        this.videoUnit.competencyLinks = competencyLinks;\r\n        this.isLoading = true;\r\n        this.videoUnitService\r\n            .update(this.videoUnit, this.lectureId)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                    // navigate back to unit-management from :courseId/lectures/:lectureId/unit-management/video-units/:videoUnitId/edit\r\n                    this.router.navigate(['../../../'], { relativeTo: this.activatedRoute });\r\n                }),\r\n            )\r\n            .subscribe({\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n}\r\n", "<jhi-lecture-unit-layout [isLoading]=\"isLoading\">\r\n    <jhi-video-unit-form [formData]=\"formData\" (formSubmitted)=\"updateVideoUnit($event)\" [isEditMode]=\"true\" />\r\n</jhi-lecture-unit-layout>\r\n"],
  "mappings": "6lDAkBA,IAAaA,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CACvBC,eAAiBC,EAAOC,CAAc,EACtCC,OAASF,EAAOG,CAAM,EACtBC,iBAAmBJ,EAAOK,CAAgB,EAC1CC,aAAeN,EAAOO,CAAY,EAE1CC,UAAY,GACZC,UACAC,SACAC,UAEAC,UAAQ,CACJ,KAAKJ,UAAY,GACjB,IAAMK,EAAe,KAAKd,eAAee,OAAQA,OACjDC,EAAc,CAAC,KAAKhB,eAAeiB,SAAUH,EAAaG,QAAQ,CAAC,EAC9DC,KACGC,EAAK,CAAC,EACNC,EAAU,CAAC,CAACC,EAAQC,CAAY,IAAK,CACjC,IAAMC,EAAcC,OAAOH,EAAOI,IAAI,aAAa,CAAC,EACpD,YAAKb,UAAYY,OAAOF,EAAaG,IAAI,WAAW,CAAC,EAC9C,KAAKpB,iBAAiBqB,SAASH,EAAa,KAAKX,SAAS,CACrE,CAAC,EACDe,EAAS,IAAK,CACV,KAAKlB,UAAY,EACrB,CAAC,CAAC,EAELmB,UAAU,CACPC,KAAOC,GAA8C,CACjD,KAAKpB,UAAYoB,EAAkBC,KAEnC,KAAKpB,SAAW,CACZqB,KAAM,KAAKtB,UAAUsB,KACrBC,YAAa,KAAKvB,UAAUuB,YAC5BC,YAAa,KAAKxB,UAAUwB,YAC5BC,OAAQ,KAAKzB,UAAUyB,OACvBC,gBAAiB,KAAK1B,UAAU0B,gBAExC,EACAC,MAAQC,GAA2BC,EAAQ,KAAKhC,aAAc+B,CAAG,EACpE,CACT,CAEAE,gBAAgB7B,EAA2B,CACvC,GAAM,CAAEqB,KAAAA,EAAMC,YAAAA,EAAaC,YAAAA,EAAaC,OAAAA,EAAQC,gBAAAA,CAAe,EAAKzB,EACpE,KAAKD,UAAUsB,KAAOA,EACtB,KAAKtB,UAAUuB,YAAcA,EAC7B,KAAKvB,UAAUwB,YAAcA,EAC7B,KAAKxB,UAAUyB,OAASA,EACxB,KAAKzB,UAAU0B,gBAAkBA,EACjC,KAAK3B,UAAY,GACjB,KAAKJ,iBACAoC,OAAO,KAAK/B,UAAW,KAAKE,SAAS,EACrCM,KACGS,EAAS,IAAK,CACV,KAAKlB,UAAY,GAEjB,KAAKN,OAAOuC,SAAS,CAAC,WAAW,EAAG,CAAEC,WAAY,KAAK3C,cAAc,CAAE,CAC3E,CAAC,CAAC,EAEL4B,UAAU,CACPS,MAAQC,GAA2BC,EAAQ,KAAKhC,aAAc+B,CAAG,EACpE,CACT,4CA9DSvC,EAAsB,2BAAtBA,EAAsB6C,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,gBAAA,WAAA,YAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IClBnCE,EAAA,EAAA,0BAAA,CAAA,EACIC,EAAA,EAAA;KAAA,EAAAD,EAAA,EAAA,sBAAA,CAAA,EAA2CE,EAAA,gBAAA,SAAAC,EAAA,CAAA,OAAiBJ,EAAAV,gBAAAc,CAAA,CAAuB,CAAA,EAAnFC,EAAA,EACJH,EAAA,EAAA;CAAA,EAAAG,EAAA,EACAH,EAAA,EAAA;CAAA,SAHyBI,EAAA,YAAAN,EAAAzC,SAAA,EACAgD,EAAA,CAAA,EAAAD,EAAA,WAAAN,EAAAvC,QAAA,EAAqB,aAAA,EAAA,kBDehC+C,EAA4BC,CAAsB,EAAAC,cAAA,CAAA,CAAA,SAEnD7D,CAAsB,GAAA",
  "names": ["EditVideoUnitComponent", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "videoUnitService", "VideoUnitService", "alertService", "AlertService", "isLoading", "videoUnit", "formData", "lectureId", "ngOnInit", "lectureRoute", "parent", "combineLatest", "paramMap", "pipe", "take", "switchMap", "params", "parentParams", "videoUnitId", "Number", "get", "findById", "finalize", "subscribe", "next", "videoUnitResponse", "body", "name", "description", "releaseDate", "source", "competencyLinks", "error", "res", "onError", "updateVideoUnit", "update", "navigate", "relativeTo", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275advance", "LectureUnitLayoutComponent", "VideoUnitFormComponent", "encapsulation"]
}
