{
  "version": 3,
  "sources": ["src/main/webapp/app/core/legal/imprint.component.ts"],
  "sourcesContent": ["import { AfterViewInit, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { JhiLanguageHelper } from 'app/core/language/language.helper';\r\nimport { LegalDocumentLanguage } from 'app/entities/legal-document.model';\r\nimport { LegalDocumentService } from 'app/shared/service/legal-document.service';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-imprint',\r\n    template: ` <div [innerHTML]=\"imprint | htmlForMarkdown\"></div> `,\r\n    imports: [HtmlForMarkdownPipe],\r\n})\r\nexport class ImprintComponent implements AfterViewInit, OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private legalDocumentService = inject(LegalDocumentService);\r\n    private languageHelper = inject(JhiLanguageHelper);\r\n\r\n    imprint?: string;\r\n    private languageChangeSubscription?: Subscription;\r\n\r\n    /**\r\n     * On init get the Imprint statement file from the Artemis server and set up a subscription to fetch the file again if the language was changed.\r\n     */\r\n    ngOnInit(): void {\r\n        // Update the view if the language was changed\r\n        this.languageChangeSubscription = this.languageHelper.language.subscribe((lang) => {\r\n            this.legalDocumentService.getImprint(lang as LegalDocumentLanguage).subscribe((imprint) => {\r\n                this.imprint = imprint.text;\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.languageChangeSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * After view initialization scroll the fragment of the current route into view.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        this.route.params.subscribe((params) => {\r\n            try {\r\n                const fragment = document.querySelector('#' + params['fragment']);\r\n                if (fragment !== null) {\r\n                    fragment.scrollIntoView();\r\n                }\r\n            } catch (e) {\r\n                /* empty */\r\n            }\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "wjBAaA,IAAaA,GAAgB,IAAA,CAAvB,MAAOA,CAAgB,CACjBC,MAAQC,EAAOC,CAAc,EAC7BC,qBAAuBF,EAAOG,CAAoB,EAClDC,eAAiBJ,EAAOK,CAAiB,EAEjDC,QACQC,2BAKRC,UAAQ,CAEJ,KAAKD,2BAA6B,KAAKH,eAAeK,SAASC,UAAWC,GAAQ,CAC9E,KAAKT,qBAAqBU,WAAWD,CAA6B,EAAED,UAAWJ,GAAW,CACtF,KAAKA,QAAUA,EAAQO,IAC3B,CAAC,CACL,CAAC,CACL,CAEAC,aAAW,CACP,KAAKP,4BAA4BQ,YAAW,CAChD,CAKAC,iBAAe,CACX,KAAKjB,MAAMkB,OAAOP,UAAWO,GAAU,CACnC,GAAI,CACA,IAAMC,EAAWC,SAASC,cAAc,IAAMH,EAAO,QAAW,EAC5DC,IAAa,MACbA,EAASG,eAAc,CAE/B,MAAY,CACR,CAER,CAAC,CACL,4CAtCSvB,EAAgB,2BAAhBA,EAAgBwB,UAAA,CAAA,CAAA,aAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,WAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IAHbE,EAAA,EAAA,GAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,yBAAoDD,EAAA,EAAA,GAAA,SAA/CE,EAAA,EAAAC,EAAA,YAAAC,EAAA,EAAA,EAAAL,EAAAtB,OAAA,EAAA4B,CAAA,kBACPC,CAAmB,EAAAC,cAAA,CAAA,CAAA,SAEpBtC,CAAgB,GAAA",
  "names": ["ImprintComponent", "route", "inject", "ActivatedRoute", "legalDocumentService", "LegalDocumentService", "languageHelper", "JhiLanguageHelper", "imprint", "languageChangeSubscription", "ngOnInit", "language", "subscribe", "lang", "getImprint", "text", "ngOnDestroy", "unsubscribe", "ngAfterViewInit", "params", "fragment", "document", "querySelector", "scrollIntoView", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "\u0275\u0275sanitizeHtml", "HtmlForMarkdownPipe", "encapsulation"]
}
