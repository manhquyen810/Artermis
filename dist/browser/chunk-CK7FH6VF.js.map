{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/participation/student-participation.model.ts", "src/main/webapp/app/entities/participation/programming-exercise-student-participation.model.ts", "src/main/webapp/app/complaints/complaint-response.service.ts", "src/main/webapp/app/exercises/shared/submission/submission.service.ts", "src/main/webapp/app/exercises/shared/participation/participation.service.ts", "src/main/webapp/app/exercises/shared/exercise/exercise.service.ts"],
  "sourcesContent": ["import { User } from 'app/core/user/user.model';\r\nimport { Team } from 'app/entities/team.model';\r\nimport { Participation, ParticipationType } from 'app/entities/participation/participation.model';\r\n\r\nexport class StudentParticipation extends Participation {\r\n    public student?: User;\r\n    public team?: Team;\r\n    public testRun?: boolean;\r\n\r\n    constructor(type?: ParticipationType) {\r\n        super(type ?? ParticipationType.STUDENT);\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the participation is used for practicing in a course exercise. This is the case if testRun is set to true\r\n * @param studentParticipation the participation to check\r\n */\r\nexport function isPracticeMode(studentParticipation: StudentParticipation | undefined): boolean | undefined {\r\n    return studentParticipation?.testRun;\r\n}\r\n\r\n/**\r\n * Stores whether the participation is used for practicing in a course exercise.\r\n * @param studentParticipation the participation that should store if it is used for practicing\r\n * @param practiceMode true, if it is used for practicing\r\n */\r\nexport function setPracticeMode(studentParticipation: StudentParticipation | undefined, practiceMode: boolean) {\r\n    if (studentParticipation) {\r\n        studentParticipation.testRun = practiceMode;\r\n    }\r\n}\r\n", "import { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ParticipationType } from 'app/entities/participation/participation.model';\r\n\r\nexport class ProgrammingExerciseStudentParticipation extends StudentParticipation {\r\n    public repositoryUri?: string;\r\n    public buildPlanId?: string;\r\n    public branch?: string;\r\n    public locked?: boolean;\r\n\r\n    // helper attribute\r\n    public buildPlanUrl?: string;\r\n    public userIndependentRepositoryUri?: string;\r\n    public vcsAccessToken?: string;\r\n\r\n    constructor() {\r\n        super(ParticipationType.PROGRAMMING);\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ComplaintResponse } from 'app/entities/complaint-response.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { ComplaintResponseUpdateDTO } from 'app/entities/complaint-response-dto.model';\r\n\r\ntype EntityResponseType = HttpResponse<ComplaintResponse>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComplaintResponseService {\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n\r\n    private resourceUrl = 'api/assessment/complaints';\r\n\r\n    /**\r\n     * Checks if a complaint response is locked for the currently logged-in user\r\n     *\r\n     * A complaint response is never locked for the creator of the complaint response and for instructors\r\n     *\r\n     * @param complaintResponse complaint response to check the lock status for\r\n     * @param exercise exercise used to find out if currently logged-in user is instructor\r\n     */\r\n    isComplaintResponseLockedForLoggedInUser(complaintResponse: ComplaintResponse, exercise: Exercise): boolean {\r\n        return !this.accountService.isAtLeastInstructorForExercise(exercise) && this.isComplaintResponseLockedByOtherUser(complaintResponse);\r\n    }\r\n\r\n    /**\r\n     * Checks if the lock on a complaint response is active and if NOT the currently logged-in user is the creator of the lock\r\n     * @param complaintResponse complaint response to check\r\n     */\r\n    isComplaintResponseLockedByOtherUser(complaintResponse: ComplaintResponse): boolean {\r\n        return (\r\n            !!complaintResponse.isCurrentlyLocked && complaintResponse.submittedTime === undefined && complaintResponse.reviewer?.login !== this.accountService.userIdentity?.login\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if the lock on a complaint response is active and if the currently logged-in user is the creator of the lock\r\n     * @param complaintResponse complaint response to check\r\n     */\r\n    isComplaintResponseLockedByLoggedInUser(complaintResponse: ComplaintResponse): boolean {\r\n        return (\r\n            !!complaintResponse.isCurrentlyLocked && complaintResponse.submittedTime === undefined && complaintResponse.reviewer?.login === this.accountService.userIdentity?.login\r\n        );\r\n    }\r\n\r\n    removeLock(complaintId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${complaintId}/response`, { observe: 'response' });\r\n    }\r\n\r\n    createLock(complaintId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .post<ComplaintResponse>(`${this.resourceUrl}/${complaintId}/response`, {}, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertComplaintResponseEntityResponseDatesFromServer(res)));\r\n    }\r\n\r\n    refreshLockOrResolveComplaint(complaintResponseUpdate: ComplaintResponseUpdateDTO, complaintId: number | undefined): Observable<EntityResponseType> {\r\n        return this.http.patch<ComplaintResponse>(`${this.resourceUrl}/${complaintId}/response`, complaintResponseUpdate, { observe: 'response' });\r\n    }\r\n\r\n    public convertComplaintResponseEntityResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.convertComplaintResponseDatesFromServer(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public convertComplaintResponseDatesFromServer(complaintResponse: ComplaintResponse): ComplaintResponse {\r\n        if (complaintResponse) {\r\n            complaintResponse.submittedTime = convertDateFromServer(complaintResponse.submittedTime);\r\n            complaintResponse.lockEndDate = convertDateFromServer(complaintResponse.lockEndDate);\r\n        }\r\n        return complaintResponse;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Submission, getLatestSubmissionResult, setLatestSubmissionResult } from 'app/entities/submission.model';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { Complaint } from 'app/entities/complaint.model';\r\nimport { ComplaintResponseService } from 'app/complaints/complaint-response.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { ParticipationService } from 'app/exercises/shared/participation/participation.service';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\n\r\nexport type EntityResponseType = HttpResponse<Submission>;\r\nexport type EntityArrayResponseType = HttpResponse<Submission[]>;\r\n\r\nexport class SubmissionWithComplaintDTO {\r\n    public submission: Submission;\r\n    public complaint: Complaint;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SubmissionService {\r\n    private http = inject(HttpClient);\r\n    private complaintResponseService = inject(ComplaintResponseService);\r\n    private accountService = inject(AccountService);\r\n\r\n    public resourceUrl = 'api/exercise/submissions';\r\n    public resourceUrlParticipation = 'api/exercise/participations';\r\n\r\n    /**\r\n     * Delete an existing submission\r\n     * @param submissionId - The id of the submission to be deleted\r\n     * @param req - A request with additional options in it\r\n     */\r\n    delete(submissionId: number, req?: any): Observable<HttpResponse<void>> {\r\n        const options = createRequestOption(req);\r\n        return this.http.delete<void>(`${this.resourceUrl}/${submissionId}`, { params: options, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find all submissions of a given participation\r\n     * @param {number} participationId - The id of the participation to be searched for\r\n     */\r\n    findAllSubmissionsOfParticipation(participationId: number): Observable<EntityArrayResponseType> {\r\n        return this.http.get<Submission[]>(`${this.resourceUrlParticipation}/${participationId}/submissions`, { observe: 'response' }).pipe(\r\n            map((res) => this.convertSubmissionArrayResponseDatesFromServer(res)),\r\n            filter((res) => !!res.body),\r\n            tap((res) =>\r\n                res.body!.forEach((submission) => {\r\n                    SubmissionService.reconnectSubmissionAndResult(submission);\r\n                    this.setSubmissionAccessRights(submission);\r\n                }),\r\n            ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Find the submissions with complaints for a tutor for a specified exercise (complaintType == 'COMPLAINT').\r\n     * @param exerciseId\r\n     */\r\n    getSubmissionsWithComplaintsForTutor(exerciseId: number): Observable<HttpResponse<SubmissionWithComplaintDTO[]>> {\r\n        return this.http\r\n            .get<SubmissionWithComplaintDTO[]>(`api/exercise/exercises/${exerciseId}/submissions-with-complaints`, { observe: 'response' })\r\n            .pipe(map((res) => this.convertDTOsFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Find more feedback requests for tutor in this exercise.\r\n     * @param exerciseId\r\n     */\r\n    getSubmissionsWithMoreFeedbackRequestsForTutor(exerciseId: number): Observable<HttpResponse<SubmissionWithComplaintDTO[]>> {\r\n        return this.http\r\n            .get<SubmissionWithComplaintDTO[]>(`api/exercise/exercises/${exerciseId}/more-feedback-requests-with-complaints`, { observe: 'response' })\r\n            .pipe(map((res) => this.convertDTOsFromServer(res)));\r\n    }\r\n\r\n    protected convertDTOsFromServer(res: HttpResponse<SubmissionWithComplaintDTO[]>) {\r\n        if (res.body) {\r\n            res.body.forEach((dto) => {\r\n                dto.submission = SubmissionService.convertSubmissionDateFromServer(dto.submission)!;\r\n                dto.complaint = this.convertComplaintDatesFromServer(dto.complaint);\r\n                this.setSubmissionAccessRights(dto.submission);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public static convertSubmissionDateFromServer(submission: Submission | undefined) {\r\n        if (submission) {\r\n            submission.submissionDate = convertDateFromServer(submission.submissionDate);\r\n            this.reconnectSubmissionAndResult(submission);\r\n        }\r\n        return submission;\r\n    }\r\n\r\n    convertComplaintDatesFromServer(complaint: Complaint) {\r\n        complaint.submittedTime = convertDateFromServer(complaint.submittedTime);\r\n        if (complaint.complaintResponse) {\r\n            this.complaintResponseService.convertComplaintResponseDatesFromServer(complaint.complaintResponse);\r\n        }\r\n        return complaint;\r\n    }\r\n\r\n    /**\r\n     * reconnect submission and result\r\n     * @param submission\r\n     */\r\n    private static reconnectSubmissionAndResult(submission: Submission) {\r\n        const result = getLatestSubmissionResult(submission);\r\n        if (result) {\r\n            setLatestSubmissionResult(submission, result);\r\n            result.submission = submission;\r\n        }\r\n    }\r\n\r\n    convertResultArrayDatesFromServer(results?: Result[]) {\r\n        const convertedResults: Result[] = [];\r\n        if (results != undefined && results.length > 0) {\r\n            results.forEach((result: Result) => {\r\n                result.completionDate = convertDateFromServer(result.completionDate);\r\n                convertedResults.push(result);\r\n            });\r\n        }\r\n        return convertedResults;\r\n    }\r\n\r\n    convertSubmissionArrayDatesFromServer(submissions?: Submission[]) {\r\n        const convertedSubmissions: Submission[] = [];\r\n        if (submissions != undefined && submissions.length > 0) {\r\n            submissions.forEach((submission: Submission) => {\r\n                if (submission !== null) {\r\n                    submission.submissionDate = convertDateFromServer(submission.submissionDate);\r\n                    SubmissionService.reconnectSubmissionAndResult(submission);\r\n                    convertedSubmissions.push(submission);\r\n                }\r\n            });\r\n        }\r\n        return convertedSubmissions;\r\n    }\r\n\r\n    protected convertSubmissionArrayResponseDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            this.convertSubmissionArrayDatesFromServer(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    getTestRunSubmissionsForExercise(exerciseId: number): Observable<HttpResponse<Submission[]>> {\r\n        return this.http\r\n            .get<TextSubmission[]>(`api/exercise/exercises/${exerciseId}/test-run-submissions`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: HttpResponse<TextSubmission[]>) => this.convertArrayResponse(res)));\r\n    }\r\n\r\n    public convertResponse(res: EntityResponseType): EntityResponseType {\r\n        const body: Submission = this.convertSubmissionFromServer(res.body!);\r\n        return res.clone({ body });\r\n    }\r\n\r\n    public convertArrayResponse<T extends Submission>(res: HttpResponse<T[]>): HttpResponse<T[]> {\r\n        const jsonResponse: T[] = res.body!;\r\n        const body: T[] = [];\r\n        for (let i = 0; i < jsonResponse.length; i++) {\r\n            body.push(this.convertSubmissionFromServer(jsonResponse[i]));\r\n        }\r\n        return res.clone({ body });\r\n    }\r\n\r\n    public convertSubmissionResponseFromServer<T extends Submission>(response: HttpResponse<T>): HttpResponse<T> {\r\n        const submission = response.body!;\r\n        setLatestSubmissionResult(submission, getLatestSubmissionResult(submission));\r\n        this.setSubmissionAccessRights(submission);\r\n        SubmissionService.convertConnectedParticipationFromServer(submission);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Sets the result and the access rights for the submission.\r\n     *\r\n     * @param submission\r\n     * @return convertedSubmission with set result and access rights\r\n     */\r\n    public convertSubmissionFromServer<T extends Submission>(submission: T): T {\r\n        const convertedSubmission = this.convert(submission);\r\n        setLatestSubmissionResult(convertedSubmission, getLatestSubmissionResult(convertedSubmission));\r\n        this.setSubmissionAccessRights(convertedSubmission);\r\n        SubmissionService.convertConnectedParticipationFromServer(convertedSubmission);\r\n        return convertedSubmission;\r\n    }\r\n\r\n    /**\r\n     * Convert a Submission to a JSON which can be sent to the server.\r\n     */\r\n    public convert<T extends Submission>(submission: T): T {\r\n        return Object.assign({}, submission);\r\n    }\r\n\r\n    /**\r\n     * Sets the access rights for the exercise that is referenced by the participation of the submission.\r\n     *\r\n     * @param submission\r\n     * @return submission with set access rights\r\n     */\r\n    public setSubmissionAccessRights(submission: Submission): Submission {\r\n        if (submission.participation?.exercise) {\r\n            this.accountService.setAccessRightsForExerciseAndReferencedCourse(submission.participation.exercise);\r\n        }\r\n        return submission;\r\n    }\r\n\r\n    /**\r\n     * Converts the participation that is connected to the given submission from server to client format.\r\n     * @param submission to which the conversion should be applied.\r\n     */\r\n    private static convertConnectedParticipationFromServer(submission: Submission): Submission {\r\n        if (submission.participation) {\r\n            submission.participation = ParticipationService.convertParticipationDatesFromServer(submission.participation);\r\n            ExerciseService.convertExerciseDatesFromServer(submission.participation?.exercise);\r\n        }\r\n        return submission;\r\n    }\r\n\r\n    /**\r\n     * Sets the transient property copiedFeedback for feedbacks when comparing a submissions results of two correction rounds\r\n     * copiedFeedback indicates if the feedback is directly copied and unmodified compared to the first correction round\r\n     *\r\n     * @param correctionRound current correction round\r\n     * @param submission current submission\r\n     */\r\n    public handleFeedbackCorrectionRoundTag(correctionRound: number, submission: Submission) {\r\n        if (correctionRound > 0 && submission?.results && submission.results.length > 1) {\r\n            const firstResult = submission!.results![0] as Result;\r\n            const secondCorrectionFeedback1 = submission!.results![1].feedbacks as Feedback[];\r\n            secondCorrectionFeedback1!.forEach((secondFeedback) => {\r\n                firstResult.feedbacks!.forEach((firstFeedback) => {\r\n                    if (secondFeedback.copiedFeedbackId === undefined && this.areFeedbacksCopies(firstFeedback, secondFeedback)) {\r\n                        secondFeedback.copiedFeedbackId = firstFeedback.id;\r\n                    } else if (secondFeedback.copiedFeedbackId === firstFeedback.id && !this.areFeedbacksCopies(firstFeedback, secondFeedback)) {\r\n                        secondFeedback.copiedFeedbackId = undefined;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if one of the two Feedback instances directly copied from the other and unmodified\r\n     * by comparing a set of fields for equality.\r\n     * @param firstFeedback\r\n     * @param secondFeedback\r\n     * @returns true if the compared set of fields match, false otherwise.\r\n     */\r\n    private areFeedbacksCopies(firstFeedback: Feedback, secondFeedback: Feedback) {\r\n        return (\r\n            secondFeedback.type === firstFeedback.type &&\r\n            secondFeedback.credits === firstFeedback.credits &&\r\n            secondFeedback.detailText === firstFeedback.detailText &&\r\n            secondFeedback.reference === firstFeedback.reference &&\r\n            secondFeedback.text === firstFeedback.text\r\n        );\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { Participation, ParticipationType } from 'app/entities/participation/participation.model';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport dayjs from 'dayjs/esm';\r\n\r\nexport type EntityResponseType = HttpResponse<StudentParticipation>;\r\nexport type EntityArrayResponseType = HttpResponse<StudentParticipation[]>;\r\nexport type EntityBlobResponseType = HttpResponse<Blob>;\r\nexport type BuildArtifact = {\r\n    fileName: string;\r\n    fileContent: Blob;\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ParticipationService {\r\n    private http = inject(HttpClient);\r\n    private submissionService = inject(SubmissionService);\r\n    private accountService = inject(AccountService);\r\n\r\n    public resourceUrl = 'api/exercise/participations';\r\n\r\n    update(exercise: Exercise, participation: StudentParticipation): Observable<EntityResponseType> {\r\n        const copy = this.convertParticipationForServer(participation, exercise);\r\n        return this.http\r\n            .put<StudentParticipation>(`api/exercise/exercises/${exercise.id}/participations`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processParticipationEntityResponseType(res)));\r\n    }\r\n\r\n    updateIndividualDueDates(exercise: Exercise, participations: StudentParticipation[]): Observable<EntityArrayResponseType> {\r\n        const copies = participations.map((participation) => this.convertParticipationForServer(participation, exercise));\r\n        return this.http\r\n            .put<StudentParticipation[]>(`api/exercise/exercises/${exercise.id}/participations/update-individual-due-date`, copies, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processParticipationEntityArrayResponseType(res)));\r\n    }\r\n\r\n    private convertParticipationForServer(participation: StudentParticipation, exercise: Exercise): StudentParticipation {\r\n        // make sure participation and exercise are connected, because this is expected by the server\r\n        participation.exercise = ExerciseService.convertExerciseFromClient(exercise);\r\n        return this.convertParticipationDatesFromClient(participation);\r\n    }\r\n\r\n    find(participationId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<StudentParticipation>(`${this.resourceUrl}/${participationId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processParticipationEntityResponseType(res)));\r\n    }\r\n\r\n    /*\r\n     * Finds one participation for the currently logged-in user for the given exercise in the given course\r\n     */\r\n    findParticipationForCurrentUser(exerciseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<StudentParticipation>(`api/exercise/exercises/${exerciseId}/participation`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processParticipationEntityResponseType(res)));\r\n    }\r\n\r\n    /**\r\n     * starts the student participation for the quiz exercise with the identifier quizExerciseId\r\n     * @param quizExerciseId The unique identifier of the quiz exercise\r\n     */\r\n    startQuizParticipation(quizExerciseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .post<StudentParticipation>(`api/quiz/quiz-exercises/${quizExerciseId}/start-participation`, {}, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processParticipationEntityResponseType(res)));\r\n    }\r\n\r\n    findAllParticipationsByExercise(exerciseId: number, withLatestResults = false): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption({ withLatestResults });\r\n        return this.http\r\n            .get<StudentParticipation[]>(`api/exercise/exercises/${exerciseId}/participations`, {\r\n                params: options,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processParticipationEntityArrayResponseType(res)));\r\n    }\r\n\r\n    delete(participationId: number, req?: any): Observable<HttpResponse<any>> {\r\n        const options = createRequestOption(req);\r\n        return this.http.delete<void>(`${this.resourceUrl}/${participationId}`, { params: options, observe: 'response' });\r\n    }\r\n\r\n    deleteForGuidedTour(participationId: number, req?: any): Observable<HttpResponse<any>> {\r\n        const options = createRequestOption(req);\r\n        return this.http.delete<void>(`api/exercise/guided-tour/participations/${participationId}`, { params: options, observe: 'response' });\r\n    }\r\n\r\n    cleanupBuildPlan(participation: StudentParticipation): Observable<EntityResponseType> {\r\n        const copy = this.convertParticipationDatesFromClient(participation);\r\n        return this.http\r\n            .put<StudentParticipation>(`${this.resourceUrl}/${participation.id}/cleanup-build-plan`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertParticipationResponseDatesFromServer(res)));\r\n    }\r\n\r\n    downloadArtifact(participationId: number): Observable<BuildArtifact> {\r\n        return this.http.get(`${this.resourceUrl}/${participationId}/build-artifact`, { observe: 'response', responseType: 'blob' }).pipe(\r\n            map((res: EntityBlobResponseType) => {\r\n                const fileNameCandidate = (res.headers.get('content-disposition') || '').split('filename=')[1];\r\n                const fileName = fileNameCandidate ? fileNameCandidate.replace(/\"/g, '') : 'artifact';\r\n                return { fileName, fileContent: res.body } as BuildArtifact;\r\n            }),\r\n        );\r\n    }\r\n\r\n    shouldPreferPractice(exercise?: Exercise): boolean {\r\n        return !!exercise?.dueDate && dayjs().isAfter(exercise.dueDate);\r\n    }\r\n\r\n    getBuildJobIdsForResultsOfParticipation(participationId: number): Observable<{ [key: string]: string }> {\r\n        return this.http.get<{ [key: string]: string }>(`api/assessment/participations/${participationId}/results/build-job-ids`);\r\n    }\r\n\r\n    protected convertParticipationDatesFromClient(participation: StudentParticipation): StudentParticipation {\r\n        // return a copy of the object\r\n        return Object.assign({}, participation, {\r\n            initializationDate: convertDateFromClient(participation.initializationDate),\r\n            individualDueDate: convertDateFromClient(participation.individualDueDate),\r\n        });\r\n    }\r\n\r\n    protected convertParticipationResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            ParticipationService.convertParticipationDatesFromServer(res.body);\r\n            res.body.results = this.submissionService.convertResultArrayDatesFromServer(res.body.results);\r\n            res.body.submissions = this.submissionService.convertSubmissionArrayDatesFromServer(res.body.submissions);\r\n            res.body.exercise = ExerciseService.convertExerciseDatesFromServer(res.body.exercise);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertParticipationResponseArrayDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((participation: StudentParticipation) => {\r\n                ParticipationService.convertParticipationDatesFromServer(participation);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Converts the dates that are part of the participation into a usable format.\r\n     *\r\n     * Does not convert dates in dependant attributes (e.g. results, submissions)!\r\n     * @param participation for which the dates should be converted into the dayjs format.\r\n     */\r\n    public static convertParticipationDatesFromServer(participation?: Participation) {\r\n        if (participation) {\r\n            participation.initializationDate = convertDateFromServer(participation.initializationDate);\r\n            participation.individualDueDate = convertDateFromServer(participation.individualDueDate);\r\n            if (participation.exercise) {\r\n                participation.exercise = ExerciseService.convertExerciseDatesFromServer(participation.exercise);\r\n            }\r\n        }\r\n        return participation;\r\n    }\r\n\r\n    public static convertParticipationArrayDatesFromServer(participations?: StudentParticipation[]) {\r\n        const convertedParticipations: StudentParticipation[] = [];\r\n        if (participations?.length) {\r\n            participations.forEach((participation: StudentParticipation) => {\r\n                convertedParticipations.push(ParticipationService.convertParticipationDatesFromServer(participation)!);\r\n            });\r\n        }\r\n        return convertedParticipations;\r\n    }\r\n\r\n    public mergeStudentParticipations(participations: StudentParticipation[]): StudentParticipation[] {\r\n        const mergedParticipations: StudentParticipation[] = [];\r\n\r\n        if (participations?.length) {\r\n            const nonTestRunParticipations = participations.filter((participation: StudentParticipation) => !participation.testRun);\r\n            const testRunParticipations = participations.filter((participation: StudentParticipation) => participation.testRun);\r\n\r\n            if (participations[0].type === ParticipationType.STUDENT) {\r\n                if (nonTestRunParticipations.length) {\r\n                    const combinedParticipation = new StudentParticipation();\r\n                    this.mergeResultsAndSubmissions(combinedParticipation, nonTestRunParticipations);\r\n                    mergedParticipations.push(combinedParticipation);\r\n                }\r\n                if (testRunParticipations.length) {\r\n                    const combinedParticipationTestRun = new StudentParticipation();\r\n                    this.mergeResultsAndSubmissions(combinedParticipationTestRun, testRunParticipations);\r\n                    mergedParticipations.push(combinedParticipationTestRun);\r\n                }\r\n            } else if (participations[0].type === ParticipationType.PROGRAMMING) {\r\n                if (nonTestRunParticipations.length) {\r\n                    const combinedParticipation = this.mergeProgrammingParticipations(nonTestRunParticipations as ProgrammingExerciseStudentParticipation[]);\r\n                    mergedParticipations.push(combinedParticipation);\r\n                }\r\n                if (testRunParticipations.length) {\r\n                    const combinedParticipationTestRun = this.mergeProgrammingParticipations(testRunParticipations as ProgrammingExerciseStudentParticipation[]);\r\n                    mergedParticipations.push(combinedParticipationTestRun);\r\n                }\r\n            }\r\n        }\r\n        return mergedParticipations;\r\n    }\r\n\r\n    private mergeProgrammingParticipations(participations: ProgrammingExerciseStudentParticipation[]): ProgrammingExerciseStudentParticipation {\r\n        const combinedParticipation = new ProgrammingExerciseStudentParticipation();\r\n        if (participations?.length) {\r\n            combinedParticipation.repositoryUri = participations[0].repositoryUri;\r\n            combinedParticipation.buildPlanId = participations[0].buildPlanId;\r\n            combinedParticipation.buildPlanUrl = participations[0].buildPlanUrl;\r\n            this.mergeResultsAndSubmissions(combinedParticipation, participations);\r\n        }\r\n        return combinedParticipation;\r\n    }\r\n\r\n    private mergeResultsAndSubmissions(combinedParticipation: StudentParticipation, participations: StudentParticipation[]) {\r\n        combinedParticipation.id = participations[0].id;\r\n        combinedParticipation.initializationState = participations[0].initializationState;\r\n        combinedParticipation.initializationDate = participations[0].initializationDate;\r\n        combinedParticipation.individualDueDate = participations[0].individualDueDate;\r\n        combinedParticipation.presentationScore = participations[0].presentationScore;\r\n        combinedParticipation.exercise = participations[0].exercise;\r\n        combinedParticipation.type = participations[0].type;\r\n        combinedParticipation.testRun = participations[0].testRun;\r\n\r\n        if (participations[0].student) {\r\n            combinedParticipation.student = participations[0].student;\r\n        }\r\n        if (participations[0].team) {\r\n            combinedParticipation.team = participations[0].team;\r\n        }\r\n        if (participations[0].participantIdentifier) {\r\n            combinedParticipation.participantIdentifier = participations[0].participantIdentifier;\r\n        }\r\n        if (participations[0].participantName) {\r\n            combinedParticipation.participantName = participations[0].participantName;\r\n        }\r\n\r\n        participations.forEach((participation) => {\r\n            if (participation.results) {\r\n                combinedParticipation.results = combinedParticipation.results ? combinedParticipation.results.concat(participation.results) : participation.results;\r\n            }\r\n            if (participation.submissions) {\r\n                combinedParticipation.submissions = combinedParticipation.submissions\r\n                    ? combinedParticipation.submissions.concat(participation.submissions)\r\n                    : participation.submissions;\r\n            }\r\n        });\r\n\r\n        // make sure that results and submissions are connected with the participation because some components need this\r\n        if (combinedParticipation.results?.length) {\r\n            combinedParticipation.results.forEach((result) => {\r\n                result.participation = combinedParticipation;\r\n            });\r\n        }\r\n        if (combinedParticipation.submissions?.length) {\r\n            combinedParticipation.submissions.forEach((submission) => {\r\n                submission.participation = combinedParticipation;\r\n            });\r\n        }\r\n    }\r\n\r\n    public getSpecificStudentParticipation(studentParticipations: StudentParticipation[], testRun: boolean): StudentParticipation | undefined {\r\n        return studentParticipations.filter((participation) => !!participation.testRun === testRun).first();\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Participation EntityArrayResponses.\r\n     * @param participationRes\r\n     */\r\n    private processParticipationEntityArrayResponseType(participationRes: EntityArrayResponseType): EntityArrayResponseType {\r\n        this.convertParticipationResponseArrayDatesFromServer(participationRes);\r\n        this.setAccessRightsParticipationEntityArrayResponseType(participationRes);\r\n        return participationRes;\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Participation EntityResponses.\r\n     * @param participationRes\r\n     */\r\n    private processParticipationEntityResponseType(participationRes: EntityResponseType): EntityResponseType {\r\n        this.convertParticipationResponseDatesFromServer(participationRes);\r\n        this.setAccessRightsParticipationEntityResponseType(participationRes);\r\n        return participationRes;\r\n    }\r\n\r\n    private setAccessRightsParticipationEntityResponseType(res: EntityResponseType): EntityResponseType {\r\n        if (res.body?.exercise) {\r\n            this.accountService.setAccessRightsForExercise(res.body.exercise);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private setAccessRightsParticipationEntityArrayResponseType(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((participation) => {\r\n                if (participation.exercise) {\r\n                    this.accountService.setAccessRightsForExercise(participation.exercise);\r\n                }\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore } from 'app/entities/exercise.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { ParticipationService } from '../participation/participation.service';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { StatsForDashboard } from 'app/course/dashboards/stats-for-dashboard.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { PlagiarismCaseInfo } from 'app/exercises/shared/plagiarism/types/PlagiarismCaseInfo';\r\nimport { IrisExerciseSettings } from 'app/entities/iris/settings/iris-settings.model';\r\n\r\nexport type EntityResponseType = HttpResponse<Exercise>;\r\nexport type EntityArrayResponseType = HttpResponse<Exercise[]>;\r\nexport type ExampleSolutionInfo = {\r\n    modelingExercise?: ModelingExercise;\r\n    exampleSolution?: SafeHtml;\r\n    exampleSolutionUML?: any;\r\n    programmingExercise?: ProgrammingExercise;\r\n    exampleSolutionPublished: boolean;\r\n};\r\n\r\nexport type EntityDetailsResponseType = HttpResponse<ExerciseDetailsType>;\r\nexport type ExerciseDetailsType = {\r\n    exercise: Exercise;\r\n    irisSettings?: IrisExerciseSettings;\r\n    plagiarismCaseInfo?: PlagiarismCaseInfo;\r\n};\r\n\r\nexport type CourseExistingExerciseDetailsType = {\r\n    exerciseTitles?: Set<string>;\r\n    shortNames?: Set<string>;\r\n};\r\n\r\nexport interface ExerciseServicable<T extends Exercise> {\r\n    create(exercise: T): Observable<HttpResponse<T>>;\r\n\r\n    import?(exercise: T): Observable<HttpResponse<T>>;\r\n\r\n    update(exercise: T, req?: any): Observable<HttpResponse<T>>;\r\n\r\n    reevaluateAndUpdate(exercise: T, req?: any): Observable<HttpResponse<T>>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExerciseService {\r\n    private http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n    private translateService = inject(TranslateService);\r\n    private entityTitleService = inject(EntityTitleService);\r\n\r\n    public resourceUrl = 'api/exercise/exercises';\r\n    public adminResourceUrl = 'api/exercise/admin/exercises';\r\n    public courseResourceUrl = 'api/core/courses';\r\n\r\n    /**\r\n     * Persist a new exercise\r\n     * @param { Exercise } exercise - Exercise that will be persisted\r\n     * return\r\n     */\r\n    create(exercise: Exercise): Observable<EntityResponseType> {\r\n        const copy = ExerciseService.convertExerciseDatesFromClient(exercise);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http.post<Exercise>(this.resourceUrl, copy, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Update existing exercise\r\n     * @param { Exercise } exercise - Exercise that will be updated\r\n     */\r\n    update(exercise: Exercise): Observable<EntityResponseType> {\r\n        const copy = ExerciseService.convertExerciseDatesFromClient(exercise);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http.put<Exercise>(this.resourceUrl, copy, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Validates if the dates are correct\r\n     */\r\n    validateDate(exercise: Exercise) {\r\n        exercise.dueDateError = this.hasDueDateError(exercise);\r\n        exercise.startDateError = this.hasStartDateError(exercise);\r\n        exercise.assessmentDueDateError = this.hasAssessmentDueDateError(exercise);\r\n\r\n        exercise.exampleSolutionPublicationDateError = this.hasExampleSolutionPublicationDateError(exercise);\r\n        exercise.exampleSolutionPublicationDateWarning = this.hasExampleSolutionPublicationDateWarning(exercise);\r\n    }\r\n\r\n    hasStartDateError(exercise: Exercise) {\r\n        return exercise.startDate && exercise.releaseDate && dayjs(exercise.startDate).isBefore(exercise.releaseDate);\r\n    }\r\n\r\n    hasDueDateError(exercise: Exercise) {\r\n        const relevantDateBefore = exercise.startDate ?? exercise.releaseDate;\r\n        return relevantDateBefore && exercise.dueDate && dayjs(exercise.dueDate).isBefore(relevantDateBefore);\r\n    }\r\n\r\n    private hasAssessmentDueDateError(exercise: Exercise) {\r\n        if (exercise.releaseDate && exercise.assessmentDueDate) {\r\n            if (exercise.dueDate) {\r\n                return dayjs(exercise.assessmentDueDate).isBefore(exercise.dueDate) || dayjs(exercise.assessmentDueDate).isBefore(exercise.releaseDate);\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (exercise.assessmentDueDate) {\r\n            if (exercise.dueDate) {\r\n                return dayjs(exercise.assessmentDueDate).isBefore(exercise.dueDate);\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hasExampleSolutionPublicationDateError(exercise: Exercise) {\r\n        if (exercise.exampleSolutionPublicationDate) {\r\n            return (\r\n                dayjs(exercise.exampleSolutionPublicationDate).isBefore(exercise.startDate ?? exercise.releaseDate) ||\r\n                (dayjs(exercise.exampleSolutionPublicationDate).isBefore(exercise.dueDate) && exercise.includedInOverallScore !== IncludedInOverallScore.NOT_INCLUDED)\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hasExampleSolutionPublicationDateWarning(exercise: Exercise) {\r\n        if (exercise.exampleSolutionPublicationDate && !dayjs(exercise.exampleSolutionPublicationDate).isSameOrAfter(exercise.dueDate || null)) {\r\n            if (!exercise.dueDate || exercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get exercise with exerciseId from server\r\n     * @param exerciseId - Exercise that should be loaded\r\n     */\r\n    find(exerciseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<Exercise>(`${this.resourceUrl}/${exerciseId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Get exercise details including all results for the currently logged-in user\r\n     * @param exerciseId - Id of the exercise to get the repos from\r\n     */\r\n    getExerciseDetails(exerciseId: number): Observable<EntityDetailsResponseType> {\r\n        return this.http.get<ExerciseDetailsType>(`${this.resourceUrl}/${exerciseId}/details`, { observe: 'response' }).pipe(\r\n            map((res: EntityDetailsResponseType) => {\r\n                if (res.body) {\r\n                    res.body.exercise = ExerciseService.convertExerciseDatesFromServer(res.body.exercise)!;\r\n                    ExerciseService.parseExerciseCategories(res.body.exercise);\r\n                    // Make sure to set the access rights for the exercise\r\n                    this.accountService.setAccessRightsForExerciseAndReferencedCourse(res.body.exercise);\r\n                    // insert an empty list to avoid additional calls in case the list is empty on the server (because then it would be undefined in the client)\r\n                    if (res.body.exercise.posts === undefined) {\r\n                        res.body.exercise.posts = [];\r\n                    }\r\n                }\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get basic exercise information for the purpose of displaying its example solution. If the example solution is not yet\r\n     * published, returns error.\r\n     * @param exerciseId - Id of the exercise to get the example solution\r\n     */\r\n    getExerciseForExampleSolution(exerciseId: number): Observable<EntityResponseType> {\r\n        return this.http.get<Exercise>(`${this.resourceUrl}/${exerciseId}/example-solution`, { observe: 'response' }).pipe(\r\n            tap((res: EntityResponseType) => {\r\n                this.processExerciseEntityResponse(res);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Resets an exercise with exerciseId by deleting all its participations.\r\n     * @param exerciseId - Id of exercise that should be reset\r\n     */\r\n    reset(exerciseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${exerciseId}/reset`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Evaluate the quiz exercise\r\n     * @param quizExerciseId id of the quiz exercise to be evaluated\r\n     * @returns void\r\n     */\r\n    evaluateQuizExercise(quizExerciseId: number): Observable<HttpResponse<void>> {\r\n        return this.http.post<any>(`api/quiz/quiz-exercises/${quizExerciseId}/evaluate`, {}, { observe: 'response' });\r\n    }\r\n\r\n    getUpcomingExercises(): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Exercise[]>(`${this.adminResourceUrl}/upcoming`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.processExerciseEntityArrayResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Returns all exercises of the given exercises parameter which have no due date or a due date in the future within delayInDays days\r\n     * The returned exercises are sorted by due date, with the earliest due date being sorted first, and no due date sorted last\r\n     *\r\n     * @param { Exercise[] } exercises - The exercises to filter and sort\r\n     * @param delayInDays - The amount of days an exercise can be due into the future, defaults to seven\r\n     */\r\n    getNextExercisesForDays(exercises: Exercise[], delayInDays: number = 7): Exercise[] {\r\n        return exercises\r\n            .filter((exercise) => {\r\n                if (!exercise.dueDate) {\r\n                    return true;\r\n                }\r\n\r\n                const dueDate = exercise.dueDate!;\r\n                return dayjs().isBefore(dueDate) && dayjs().add(delayInDays, 'day').isSameOrAfter(dueDate);\r\n            })\r\n            .sort((exerciseA: Exercise, exerciseB: Exercise) => {\r\n                if (!exerciseA.dueDate) {\r\n                    // If A has no due date, sort B first\r\n                    return 1;\r\n                } else if (!exerciseB.dueDate) {\r\n                    // If B has no due date, sort A first\r\n                    return -1;\r\n                } else {\r\n                    // Sort the one with the next due date first\r\n                    return exerciseA.dueDate.isBefore(exerciseB.dueDate) ? -1 : 1;\r\n                }\r\n            });\r\n    }\r\n\r\n    getExistingExerciseDetailsInCourse(courseId: number, exerciseType: ExerciseType): Observable<CourseExistingExerciseDetailsType> {\r\n        return this.http\r\n            .get<CourseExistingExerciseDetailsType>(`${this.courseResourceUrl}/${courseId}/existing-exercise-details?exerciseType=${exerciseType}`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                map((response) => {\r\n                    const details = response.body!;\r\n                    return {\r\n                        exerciseTitles: new Set(details.exerciseTitles ?? []),\r\n                        shortNames: new Set(details.shortNames ?? []),\r\n                    } as CourseExistingExerciseDetailsType;\r\n                }),\r\n            );\r\n    }\r\n\r\n    isActiveQuiz(exercise: QuizExercise) {\r\n        return (\r\n            exercise?.quizBatches?.some((batch) => batch.started) ||\r\n            exercise.studentParticipations?.[0]?.initializationState === InitializationState.INITIALIZED ||\r\n            exercise.studentParticipations?.[0]?.initializationState === InitializationState.FINISHED\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Converts all dates of a server-exercise to the client timezone\r\n     * @param { Exercise } exercise - Exercise from server whose date is adjusted\r\n     * @returns { Exercise } - Exercise with adjusted times\r\n     */\r\n    static convertExerciseDatesFromServer(exercise?: Exercise): Exercise | undefined {\r\n        if (exercise) {\r\n            exercise.releaseDate = convertDateFromServer(exercise.releaseDate);\r\n            exercise.startDate = convertDateFromServer(exercise.startDate);\r\n            exercise.dueDate = convertDateFromServer(exercise.dueDate);\r\n            exercise.assessmentDueDate = convertDateFromServer(exercise.assessmentDueDate);\r\n            exercise.studentParticipations = ParticipationService.convertParticipationArrayDatesFromServer(exercise.studentParticipations);\r\n        }\r\n        return exercise;\r\n    }\r\n\r\n    /**\r\n     * Converts all dates of server-exercises to the client timezone\r\n     * @param { Exercise[] } exercises - Array of server-exercises whose date are adjusted\r\n     * @returns { Exercise[] } - Array of exercises with adjusted times\r\n     */\r\n    static convertExercisesDateFromServer(exercises?: Exercise[]): Exercise[] {\r\n        const convertedExercises: Exercise[] = [];\r\n        if (exercises && exercises.length > 0) {\r\n            exercises.forEach((exercise: Exercise) => {\r\n                const convertedExercise = ExerciseService.convertExerciseDatesFromServer(exercise);\r\n                if (convertedExercise) {\r\n                    convertedExercises.push(convertedExercise);\r\n                }\r\n            });\r\n        }\r\n        return convertedExercises;\r\n    }\r\n\r\n    /**\r\n     * Converts all dates of a client-exercise to the server timezone\r\n     * @param { Exercise } exercise - Exercise from client whose date is adjusted\r\n     */\r\n    static convertExerciseDatesFromClient<E extends Exercise>(exercise: E): E {\r\n        return Object.assign({}, exercise, {\r\n            releaseDate: convertDateFromClient(exercise.releaseDate),\r\n            startDate: convertDateFromClient(exercise.startDate),\r\n            dueDate: convertDateFromClient(exercise.dueDate),\r\n            assessmentDueDate: convertDateFromClient(exercise.assessmentDueDate),\r\n            exampleSolutionPublicationDate: convertDateFromClient(exercise.exampleSolutionPublicationDate),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Replace dates in http-response including an exercise with the corresponding client time.\r\n     * @param res - Response from server including one exercise\r\n     */\r\n    static convertExerciseResponseDatesFromServer<ERT extends EntityResponseType>(res: ERT): ERT {\r\n        if (res.body) {\r\n            res.body.releaseDate = convertDateFromServer(res.body.releaseDate);\r\n            res.body.startDate = convertDateFromServer(res.body.startDate);\r\n            res.body.dueDate = convertDateFromServer(res.body.dueDate);\r\n            res.body.assessmentDueDate = convertDateFromServer(res.body.assessmentDueDate);\r\n            res.body.exampleSolutionPublicationDate = convertDateFromServer(res.body.exampleSolutionPublicationDate);\r\n            res.body.studentParticipations = ParticipationService.convertParticipationArrayDatesFromServer(res.body.studentParticipations);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Replace dates in http-response including an array of exercises with the corresponding client time\r\n     * @param res - Response from server including an array of exercise\r\n     */\r\n    static convertExerciseArrayDatesFromServer<E extends Exercise, EART extends EntityArrayResponseType>(res: EART): EART {\r\n        if (res.body) {\r\n            res.body.forEach((exercise: E) => {\r\n                ExerciseService.convertExerciseDatesFromServer(exercise);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Converts the exercise category json string into ExerciseCategory objects (if it exists).\r\n     * @param res the response\r\n     */\r\n    static convertExerciseCategoriesFromServer<ERT extends EntityResponseType>(res: ERT): ERT {\r\n        if (res.body && res.body.categories) {\r\n            ExerciseService.parseExerciseCategories(res.body);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Converts an exercises' categories into a json string (to send them to the server). Does nothing if no categories exist\r\n     * @param exercise the exercise\r\n     */\r\n    static stringifyExerciseCategories(exercise: Exercise) {\r\n        return exercise.categories?.map((category) => JSON.stringify(category) as unknown as ExerciseCategory);\r\n    }\r\n\r\n    /**\r\n     * Converts the exercise category json strings into ExerciseCategory objects (if it exists).\r\n     * @param res the response\r\n     */\r\n    static convertExerciseCategoryArrayFromServer<E extends Exercise, EART extends EntityArrayResponseType>(res: EART): EART {\r\n        if (res.body) {\r\n            res.body.forEach((exercise: E) => ExerciseService.parseExerciseCategories(exercise));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Parses the exercise categories JSON string into {@link ExerciseCategory} objects.\r\n     * @param exercise - the exercise\r\n     */\r\n    static parseExerciseCategories(exercise?: Exercise) {\r\n        if (exercise?.categories) {\r\n            exercise.categories = exercise.categories.map((category) => {\r\n                const categoryObj = JSON.parse(category as unknown as string);\r\n                return new ExerciseCategory(categoryObj.category, categoryObj.color);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create Array of exercise categories from array of strings\r\n     * @param categories that are converted to categories\r\n     */\r\n    convertExerciseCategoriesAsStringFromServer(categories: string[]): ExerciseCategory[] {\r\n        return categories.map((category) => JSON.parse(category));\r\n    }\r\n\r\n    /**\r\n     * Prepare client-exercise to be uploaded to the server\r\n     * @param exercise - Exercise that will be modified\r\n     */\r\n    static convertExerciseFromClient<E extends Exercise>(exercise: E): Exercise {\r\n        let copy = Object.assign(exercise, {});\r\n        copy = ExerciseService.convertExerciseDatesFromClient(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        if (copy.course) {\r\n            copy.course.exercises = [];\r\n            copy.course.lectures = [];\r\n        }\r\n        copy.studentParticipations = [];\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Get the \"exerciseId\" exercise with data useful for tutors.\r\n     * @param exerciseId - Id of exercise to retrieve\r\n     */\r\n    getForTutors(exerciseId: number): Observable<HttpResponse<Exercise>> {\r\n        return this.http\r\n            .get<Exercise>(`${this.resourceUrl}/${exerciseId}/for-assessment-dashboard`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Retrieve a collection of useful statistics for the tutor exercise dashboard of the exercise with the given exerciseId\r\n     * @param exerciseId - Id of exercise to retrieve the stats for\r\n     */\r\n    getStatsForTutors(exerciseId: number): Observable<HttpResponse<StatsForDashboard>> {\r\n        return this.http.get<StatsForDashboard>(`${this.resourceUrl}/${exerciseId}/stats-for-assessment-dashboard`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Makes sure that bonus points are zero and respect the constraint by includedInOverallScore\r\n     * @param exercise exercise for which to set the bonus points\r\n     */\r\n    static setBonusPointsConstrainedByIncludedInOverallScore(exercise: Exercise) {\r\n        if (exercise.bonusPoints === undefined || exercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n            exercise.bonusPoints = 0;\r\n        }\r\n        return exercise;\r\n    }\r\n\r\n    isIncludedInScore(exercise?: Exercise) {\r\n        if (!exercise?.includedInOverallScore) {\r\n            return '';\r\n        }\r\n        switch (exercise.includedInOverallScore) {\r\n            case IncludedInOverallScore.INCLUDED_AS_BONUS:\r\n                return this.translateService.instant('artemisApp.exercise.bonus');\r\n            case IncludedInOverallScore.INCLUDED_COMPLETELY:\r\n                return this.translateService.instant('artemisApp.exercise.yes');\r\n            case IncludedInOverallScore.NOT_INCLUDED:\r\n                return this.translateService.instant('artemisApp.exercise.no');\r\n        }\r\n    }\r\n\r\n    toggleSecondCorrection(exerciseId: number): Observable<boolean> {\r\n        return this.http.put<boolean>(`${this.resourceUrl}/${exerciseId}/toggle-second-correction`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Exercise EntityResponses.\r\n     * @param exerciseRes\r\n     */\r\n    public processExerciseEntityResponse(exerciseRes: EntityResponseType): EntityResponseType {\r\n        ExerciseService.convertExerciseResponseDatesFromServer(exerciseRes);\r\n        ExerciseService.convertExerciseCategoriesFromServer(exerciseRes);\r\n        this.setAccessRightsExerciseEntityResponseType(exerciseRes);\r\n        this.sendExerciseTitleToTitleService(exerciseRes?.body ?? undefined);\r\n        return exerciseRes;\r\n    }\r\n\r\n    /**\r\n     * This method bundles recurring conversion steps for Exercise EntityArrayResponses.\r\n     * @param exerciseResArray\r\n     */\r\n    public processExerciseEntityArrayResponse(exerciseResArray: EntityArrayResponseType): EntityArrayResponseType {\r\n        ExerciseService.convertExerciseArrayDatesFromServer(exerciseResArray);\r\n        ExerciseService.convertExerciseCategoryArrayFromServer(exerciseResArray);\r\n        this.setAccessRightsExerciseEntityArrayResponseType(exerciseResArray);\r\n        exerciseResArray?.body?.forEach((exercise) => {\r\n            this.sendExerciseTitleToTitleService(exercise);\r\n        });\r\n        return exerciseResArray;\r\n    }\r\n\r\n    public setAccessRightsExerciseEntityArrayResponseType(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((exercise: Exercise) => {\r\n                this.accountService.setAccessRightsForExerciseAndReferencedCourse(exercise);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public setAccessRightsExerciseEntityResponseType(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            this.accountService.setAccessRightsForExerciseAndReferencedCourse(res.body as Exercise);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public sendExerciseTitleToTitleService(exercise?: Exercise) {\r\n        if (exercise) {\r\n            this.entityTitleService.setExerciseTitle(exercise);\r\n        }\r\n        if (exercise?.course) {\r\n            this.entityTitleService.setTitle(EntityType.COURSE, [exercise.course.id], exercise.course.title);\r\n        }\r\n    }\r\n\r\n    public getLatestDueDate(exerciseId: number): Observable<dayjs.Dayjs | undefined> {\r\n        return this.http\r\n            .get<dayjs.Dayjs>(`${this.resourceUrl}/${exerciseId}/latest-due-date`, { observe: 'response' })\r\n            .pipe(map((res: HttpResponse<dayjs.Dayjs>) => (res.body ? dayjs(res.body) : undefined)));\r\n    }\r\n\r\n    private static isExampleSolutionPublished(exercise: Exercise) {\r\n        let exampleSolutionPublicationDate;\r\n        if (exercise.exerciseGroup) {\r\n            exampleSolutionPublicationDate = exercise.exerciseGroup.exam?.exampleSolutionPublicationDate;\r\n        } else {\r\n            exampleSolutionPublicationDate = exercise.exampleSolutionPublicationDate;\r\n        }\r\n\r\n        return exampleSolutionPublicationDate && !dayjs().isBefore(exampleSolutionPublicationDate);\r\n    }\r\n\r\n    /**\r\n     * Returns an ExampleSolutionInfo object containing the processed example solution and related fields\r\n     * if exampleSolution exists on the exercise. The example solution is processed (parsed, sanitized, etc.)\r\n     * depending on the exercise type.\r\n     *\r\n     * @param exercise Exercise model that may have an exampleSolution.\r\n     * @param artemisMarkdown An ArtemisMarkdownService instance so we don't need to include it in the same bundle with ExerciseService when compiling.\r\n     */\r\n    static extractExampleSolutionInfo(exercise: Exercise, artemisMarkdown: ArtemisMarkdownService): ExampleSolutionInfo {\r\n        // ArtemisMarkdownService is expected as a parameter as opposed to a dependency in the constructor because doing\r\n        // that increased initial bundle size from 2.31 MB to 3.75 MB and caused production build to fail with error since\r\n        // it exceeded maximum budget.\r\n\r\n        if (!ExerciseService.isExampleSolutionPublished(exercise)) {\r\n            return { exampleSolutionPublished: false };\r\n        }\r\n\r\n        let modelingExercise = undefined;\r\n        let exampleSolution = undefined;\r\n        let exampleSolutionUML = undefined;\r\n        let programmingExercise = undefined;\r\n\r\n        switch (exercise.type) {\r\n            case ExerciseType.MODELING:\r\n                modelingExercise = exercise as ModelingExercise;\r\n                if (modelingExercise.exampleSolutionModel) {\r\n                    exampleSolutionUML = JSON.parse(modelingExercise.exampleSolutionModel);\r\n                }\r\n                break;\r\n            case ExerciseType.TEXT:\r\n            case ExerciseType.FILE_UPLOAD:\r\n                const textOrFileUploadExercise = exercise as TextExercise & FileUploadExercise;\r\n                if (textOrFileUploadExercise.exampleSolution) {\r\n                    exampleSolution = artemisMarkdown.safeHtmlForMarkdown(textOrFileUploadExercise.exampleSolution);\r\n                }\r\n                break;\r\n            case ExerciseType.PROGRAMMING:\r\n                programmingExercise = exercise as ProgrammingExercise;\r\n                break;\r\n        }\r\n\r\n        return {\r\n            modelingExercise,\r\n            exampleSolution,\r\n            exampleSolutionUML,\r\n            programmingExercise,\r\n            exampleSolutionPublished: true,\r\n        };\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["StudentParticipation", "Participation", "student", "team", "testRun", "constructor", "type", "ParticipationType", "STUDENT", "isPracticeMode", "studentParticipation", "ProgrammingExerciseStudentParticipation", "StudentParticipation", "repositoryUri", "buildPlanId", "branch", "locked", "buildPlanUrl", "userIndependentRepositoryUri", "vcsAccessToken", "constructor", "ParticipationType", "PROGRAMMING", "ComplaintResponseService", "http", "inject", "HttpClient", "accountService", "AccountService", "resourceUrl", "isComplaintResponseLockedForLoggedInUser", "complaintResponse", "exercise", "isAtLeastInstructorForExercise", "isComplaintResponseLockedByOtherUser", "isCurrentlyLocked", "submittedTime", "undefined", "reviewer", "login", "userIdentity", "isComplaintResponseLockedByLoggedInUser", "removeLock", "complaintId", "delete", "observe", "createLock", "post", "pipe", "map", "res", "convertComplaintResponseEntityResponseDatesFromServer", "refreshLockOrResolveComplaint", "complaintResponseUpdate", "patch", "body", "convertComplaintResponseDatesFromServer", "convertDateFromServer", "lockEndDate", "factory", "\u0275fac", "providedIn", "SubmissionService", "http", "inject", "HttpClient", "complaintResponseService", "ComplaintResponseService", "accountService", "AccountService", "resourceUrl", "resourceUrlParticipation", "delete", "submissionId", "req", "options", "createRequestOption", "params", "observe", "findAllSubmissionsOfParticipation", "participationId", "get", "pipe", "map", "res", "convertSubmissionArrayResponseDatesFromServer", "filter", "body", "tap", "forEach", "submission", "reconnectSubmissionAndResult", "setSubmissionAccessRights", "getSubmissionsWithComplaintsForTutor", "exerciseId", "convertDTOsFromServer", "getSubmissionsWithMoreFeedbackRequestsForTutor", "dto", "convertSubmissionDateFromServer", "complaint", "convertComplaintDatesFromServer", "submissionDate", "convertDateFromServer", "submittedTime", "complaintResponse", "convertComplaintResponseDatesFromServer", "result", "getLatestSubmissionResult", "setLatestSubmissionResult", "convertResultArrayDatesFromServer", "results", "convertedResults", "undefined", "length", "completionDate", "push", "convertSubmissionArrayDatesFromServer", "submissions", "convertedSubmissions", "getTestRunSubmissionsForExercise", "convertArrayResponse", "convertResponse", "convertSubmissionFromServer", "clone", "jsonResponse", "i", "convertSubmissionResponseFromServer", "response", "convertConnectedParticipationFromServer", "convertedSubmission", "convert", "Object", "assign", "participation", "exercise", "setAccessRightsForExerciseAndReferencedCourse", "ParticipationService", "convertParticipationDatesFromServer", "ExerciseService", "convertExerciseDatesFromServer", "handleFeedbackCorrectionRoundTag", "correctionRound", "firstResult", "feedbacks", "secondFeedback", "firstFeedback", "copiedFeedbackId", "areFeedbacksCopies", "id", "type", "credits", "detailText", "reference", "text", "factory", "\u0275fac", "providedIn", "ParticipationService", "http", "inject", "HttpClient", "submissionService", "SubmissionService", "accountService", "AccountService", "resourceUrl", "update", "exercise", "participation", "copy", "convertParticipationForServer", "put", "id", "observe", "pipe", "map", "res", "processParticipationEntityResponseType", "updateIndividualDueDates", "participations", "copies", "processParticipationEntityArrayResponseType", "ExerciseService", "convertExerciseFromClient", "convertParticipationDatesFromClient", "find", "participationId", "get", "findParticipationForCurrentUser", "exerciseId", "startQuizParticipation", "quizExerciseId", "post", "findAllParticipationsByExercise", "withLatestResults", "options", "createRequestOption", "params", "delete", "req", "deleteForGuidedTour", "cleanupBuildPlan", "convertParticipationResponseDatesFromServer", "downloadArtifact", "responseType", "fileNameCandidate", "headers", "split", "fileName", "replace", "fileContent", "body", "shouldPreferPractice", "dueDate", "dayjs", "isAfter", "getBuildJobIdsForResultsOfParticipation", "Object", "assign", "initializationDate", "convertDateFromClient", "individualDueDate", "convertParticipationDatesFromServer", "results", "convertResultArrayDatesFromServer", "submissions", "convertSubmissionArrayDatesFromServer", "convertExerciseDatesFromServer", "convertParticipationResponseArrayDatesFromServer", "forEach", "convertDateFromServer", "convertParticipationArrayDatesFromServer", "convertedParticipations", "length", "push", "mergeStudentParticipations", "mergedParticipations", "nonTestRunParticipations", "filter", "testRun", "testRunParticipations", "type", "ParticipationType", "STUDENT", "combinedParticipation", "StudentParticipation", "mergeResultsAndSubmissions", "combinedParticipationTestRun", "PROGRAMMING", "mergeProgrammingParticipations", "ProgrammingExerciseStudentParticipation", "repositoryUri", "buildPlanId", "buildPlanUrl", "initializationState", "presentationScore", "student", "team", "participantIdentifier", "participantName", "concat", "result", "submission", "getSpecificStudentParticipation", "studentParticipations", "first", "participationRes", "setAccessRightsParticipationEntityArrayResponseType", "setAccessRightsParticipationEntityResponseType", "setAccessRightsForExercise", "factory", "\u0275fac", "providedIn", "ExerciseService", "http", "inject", "HttpClient", "accountService", "AccountService", "translateService", "TranslateService", "entityTitleService", "EntityTitleService", "resourceUrl", "adminResourceUrl", "courseResourceUrl", "create", "exercise", "copy", "convertExerciseDatesFromClient", "categories", "stringifyExerciseCategories", "post", "observe", "pipe", "map", "res", "processExerciseEntityResponse", "update", "put", "validateDate", "dueDateError", "hasDueDateError", "startDateError", "hasStartDateError", "assessmentDueDateError", "hasAssessmentDueDateError", "exampleSolutionPublicationDateError", "hasExampleSolutionPublicationDateError", "exampleSolutionPublicationDateWarning", "hasExampleSolutionPublicationDateWarning", "startDate", "releaseDate", "dayjs", "isBefore", "relevantDateBefore", "dueDate", "assessmentDueDate", "exampleSolutionPublicationDate", "includedInOverallScore", "IncludedInOverallScore", "NOT_INCLUDED", "isSameOrAfter", "find", "exerciseId", "get", "getExerciseDetails", "body", "convertExerciseDatesFromServer", "parseExerciseCategories", "setAccessRightsForExerciseAndReferencedCourse", "posts", "undefined", "getExerciseForExampleSolution", "tap", "reset", "delete", "evaluateQuizExercise", "quizExerciseId", "getUpcomingExercises", "processExerciseEntityArrayResponse", "getNextExercisesForDays", "exercises", "delayInDays", "filter", "add", "sort", "exerciseA", "exerciseB", "getExistingExerciseDetailsInCourse", "courseId", "exerciseType", "response", "details", "exerciseTitles", "Set", "shortNames", "isActiveQuiz", "quizBatches", "some", "batch", "started", "studentParticipations", "initializationState", "InitializationState", "INITIALIZED", "FINISHED", "convertDateFromServer", "ParticipationService", "convertParticipationArrayDatesFromServer", "convertExercisesDateFromServer", "convertedExercises", "length", "forEach", "convertedExercise", "push", "Object", "assign", "convertDateFromClient", "convertExerciseResponseDatesFromServer", "convertExerciseArrayDatesFromServer", "convertExerciseCategoriesFromServer", "category", "JSON", "stringify", "convertExerciseCategoryArrayFromServer", "categoryObj", "parse", "ExerciseCategory", "color", "convertExerciseCategoriesAsStringFromServer", "convertExerciseFromClient", "course", "lectures", "getForTutors", "getStatsForTutors", "setBonusPointsConstrainedByIncludedInOverallScore", "bonusPoints", "INCLUDED_COMPLETELY", "isIncludedInScore", "INCLUDED_AS_BONUS", "instant", "toggleSecondCorrection", "exerciseRes", "setAccessRightsExerciseEntityResponseType", "sendExerciseTitleToTitleService", "exerciseResArray", "setAccessRightsExerciseEntityArrayResponseType", "setExerciseTitle", "setTitle", "EntityType", "COURSE", "id", "title", "getLatestDueDate", "isExampleSolutionPublished", "exerciseGroup", "exam", "extractExampleSolutionInfo", "artemisMarkdown", "exampleSolutionPublished", "modelingExercise", "exampleSolution", "exampleSolutionUML", "programmingExercise", "type", "ExerciseType", "MODELING", "exampleSolutionModel", "TEXT", "FILE_UPLOAD", "textOrFileUploadExercise", "safeHtmlForMarkdown", "PROGRAMMING", "factory", "\u0275fac", "providedIn"]
}
