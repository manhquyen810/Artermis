{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/quiz/quiz.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { InitializationState } from 'app/entities/participation/participation.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ArtemisQuizService {\r\n    /**\r\n     * Randomize the order of the questions\r\n     * (and answerOptions or dragItems within each question)\r\n     * if randomizeOrder is true\r\n     *\r\n     * @param quizQuestions {object} the quizQuestions to be randomized\r\n     * @param randomizeQuestionOrder {object} the flag whether or not to randomize the quiz questions\r\n     */\r\n    randomizeOrder(quizQuestions: QuizQuestion[] | undefined, randomizeQuestionOrder: boolean | undefined) {\r\n        if (quizQuestions) {\r\n            // shuffle questions\r\n            if (randomizeQuestionOrder) {\r\n                quizQuestions?.shuffle();\r\n            }\r\n\r\n            // shuffle answerOptions / dragItems within questions\r\n            quizQuestions.forEach((question) => {\r\n                if (question.randomizeOrder) {\r\n                    if (question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n                        (question as MultipleChoiceQuestion).answerOptions?.shuffle();\r\n                    } else if (question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n                        (question as DragAndDropQuestion).dragItems?.shuffle();\r\n                    } else if (question.type === QuizQuestionType.SHORT_ANSWER) {\r\n                        // nothing to do here\r\n                    } else {\r\n                        captureException(new Error('Unknown question type: ' + question));\r\n                    }\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    static isUninitialized(quizExercise: QuizExercise): boolean {\r\n        return ArtemisQuizService.notEndedSubmittedOrFinished(quizExercise) && ArtemisQuizService.startedQuizBatch(quizExercise);\r\n    }\r\n\r\n    static notStarted(quizExercise: QuizExercise): boolean {\r\n        return ArtemisQuizService.notEndedSubmittedOrFinished(quizExercise) && !ArtemisQuizService.startedQuizBatch(quizExercise);\r\n    }\r\n\r\n    private static notEndedSubmittedOrFinished(quizExercise: QuizExercise): boolean {\r\n        return (\r\n            !quizExercise.quizEnded &&\r\n            (!quizExercise.studentParticipations?.[0]?.initializationState ||\r\n                ![InitializationState.INITIALIZED, InitializationState.FINISHED].includes(quizExercise.studentParticipations[0].initializationState))\r\n        );\r\n    }\r\n\r\n    private static startedQuizBatch(quizExercise: QuizExercise): boolean {\r\n        return !!quizExercise.quizBatches?.some((batch) => batch.started);\r\n    }\r\n}\r\n"],
  "mappings": "iKASA,IAAaA,GAAkB,IAAA,CAAzB,MAAOA,CAAkB,CAS3BC,eAAeC,EAA2CC,EAA2C,CAC7FD,IAEIC,GACAD,GAAeE,QAAO,EAI1BF,EAAcG,QAASC,GAAY,CAC3BA,EAASL,iBACLK,EAASC,OAASC,EAAiBC,gBAClCH,EAAoCI,eAAeN,QAAO,EACpDE,EAASC,OAASC,EAAiBG,cACzCL,EAAiCM,WAAWR,QAAO,EAC7CE,EAASC,OAASC,EAAiBK,cAG1CC,EAAiB,IAAIC,MAAM,0BAA4BT,CAAQ,CAAC,EAG5E,EAAG,IAAI,EAEf,CAEA,OAAOU,gBAAgBC,EAA0B,CAC7C,OAAOjB,EAAmBkB,4BAA4BD,CAAY,GAAKjB,EAAmBmB,iBAAiBF,CAAY,CAC3H,CAEA,OAAOG,WAAWH,EAA0B,CACxC,OAAOjB,EAAmBkB,4BAA4BD,CAAY,GAAK,CAACjB,EAAmBmB,iBAAiBF,CAAY,CAC5H,CAEQ,OAAOC,4BAA4BD,EAA0B,CACjE,MACI,CAACA,EAAaI,YACb,CAACJ,EAAaK,wBAAwB,CAAC,GAAGC,qBACvC,CAAC,CAACC,EAAoBC,YAAaD,EAAoBE,QAAQ,EAAEC,SAASV,EAAaK,sBAAsB,CAAC,EAAEC,mBAAmB,EAE/I,CAEQ,OAAOJ,iBAAiBF,EAA0B,CACtD,MAAO,CAAC,CAACA,EAAaW,aAAaC,KAAMC,GAAUA,EAAMC,OAAO,CACpE,4CAnDS/B,EAAkB,6BAAlBA,EAAkBgC,QAAlBhC,EAAkBiC,UAAAC,WADL,MAAM,CAAA,SACnBlC,CAAkB,GAAA",
  "names": ["ArtemisQuizService", "randomizeOrder", "quizQuestions", "randomizeQuestionOrder", "shuffle", "forEach", "question", "type", "QuizQuestionType", "MULTIPLE_CHOICE", "answerOptions", "DRAG_AND_DROP", "dragItems", "SHORT_ANSWER", "captureException", "Error", "isUninitialized", "quizExercise", "notEndedSubmittedOrFinished", "startedQuizBatch", "notStarted", "quizEnded", "studentParticipations", "initializationState", "InitializationState", "INITIALIZED", "FINISHED", "includes", "quizBatches", "some", "batch", "started", "factory", "\u0275fac", "providedIn"]
}
