{
  "version": 3,
  "sources": ["src/main/webapp/app/course/tutorial-groups/tutorial-groups-management/tutorial-groups-configuration/crud/edit-tutorial-groups-configuration/edit-tutorial-groups-configuration.component.ts", "src/main/webapp/app/course/tutorial-groups/tutorial-groups-management/tutorial-groups-configuration/crud/edit-tutorial-groups-configuration/edit-tutorial-groups-configuration.component.html"],
  "sourcesContent": ["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { TutorialGroupsConfiguration } from 'app/entities/tutorial-group/tutorial-groups-configuration.model';\r\nimport { TutorialGroupsConfigurationFormData } from 'app/course/tutorial-groups/tutorial-groups-management/tutorial-groups-configuration/crud/tutorial-groups-configuration-form/tutorial-groups-configuration-form.component';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TutorialGroupsConfigurationService } from 'app/course/tutorial-groups/services/tutorial-groups-configuration.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Subject, combineLatest } from 'rxjs';\r\nimport { finalize, switchMap, take, takeUntil } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseStorageService } from 'app/course/manage/course-storage.service';\r\nimport { LoadingIndicatorContainerComponent } from 'app/shared/loading-indicator-container/loading-indicator-container.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { TutorialGroupsConfigurationFormComponent } from '../tutorial-groups-configuration-form/tutorial-groups-configuration-form.component';\r\n\r\n@Component({\r\n    selector: 'jhi-edit-tutorial-groups-configuration',\r\n    templateUrl: './edit-tutorial-groups-configuration.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [LoadingIndicatorContainerComponent, TranslateDirective, TutorialGroupsConfigurationFormComponent],\r\n})\r\nexport class EditTutorialGroupsConfigurationComponent implements OnInit, OnDestroy {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private tutorialGroupsConfigurationService = inject(TutorialGroupsConfigurationService);\r\n    private courseStorageService = inject(CourseStorageService);\r\n    private alertService = inject(AlertService);\r\n    private cdr = inject(ChangeDetectorRef);\r\n\r\n    ngUnsubscribe = new Subject<void>();\r\n\r\n    isLoading = false;\r\n    tutorialGroupsConfiguration: TutorialGroupsConfiguration;\r\n    formData: TutorialGroupsConfigurationFormData;\r\n    course: Course;\r\n    tutorialGroupConfigurationId: number;\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        combineLatest([this.activatedRoute.paramMap, this.activatedRoute.data])\r\n            .pipe(\r\n                take(1),\r\n                switchMap(([params, { course }]) => {\r\n                    this.tutorialGroupConfigurationId = Number(params.get('tutorialGroupsConfigurationId'));\r\n                    this.course = course;\r\n                    return this.tutorialGroupsConfigurationService.getOneOfCourse(this.course.id!);\r\n                }),\r\n                finalize(() => (this.isLoading = false)),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (tutorialGroupsConfigurationResult) => {\r\n                    if (tutorialGroupsConfigurationResult.body) {\r\n                        this.tutorialGroupsConfiguration = tutorialGroupsConfigurationResult.body;\r\n                        this.formData = {\r\n                            period: [\r\n                                this.tutorialGroupsConfiguration.tutorialPeriodStartInclusive!.toDate(),\r\n                                this.tutorialGroupsConfiguration.tutorialPeriodEndInclusive!.toDate(),\r\n                            ],\r\n                            useTutorialGroupChannels: this.tutorialGroupsConfiguration.useTutorialGroupChannels,\r\n                            usePublicTutorialGroupChannels: this.tutorialGroupsConfiguration.usePublicTutorialGroupChannels,\r\n                        };\r\n                    }\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    updateTutorialGroupsConfiguration(formData: TutorialGroupsConfigurationFormData) {\r\n        const { period, useTutorialGroupChannels, usePublicTutorialGroupChannels } = formData;\r\n\r\n        this.isLoading = true;\r\n        this.tutorialGroupsConfiguration.useTutorialGroupChannels = useTutorialGroupChannels;\r\n        this.tutorialGroupsConfiguration.usePublicTutorialGroupChannels = usePublicTutorialGroupChannels;\r\n        this.tutorialGroupsConfigurationService\r\n            .update(this.course.id!, this.tutorialGroupConfigurationId, this.tutorialGroupsConfiguration, period ?? [])\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                    this.router.navigate(['/course-management', this.course.id!, 'tutorial-groups']);\r\n                }),\r\n                takeUntil(this.ngUnsubscribe),\r\n            )\r\n            .subscribe({\r\n                next: (resp) => {\r\n                    const updatedConfiguration = resp.body!;\r\n                    this.course.tutorialGroupsConfiguration = updatedConfiguration;\r\n                    this.courseStorageService.updateCourse(this.course);\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            })\r\n            .add(() => this.cdr.detectChanges());\r\n    }\r\n}\r\n", "<jhi-loading-indicator-container [isLoading]=\"isLoading\">\r\n    <h3 jhiTranslate=\"artemisApp.pages.editTutorialGroupsConfiguration.title\"></h3>\r\n    <jhi-tutorial-groups-configuration-form [formData]=\"formData\" [isEditMode]=\"true\" (formSubmitted)=\"updateTutorialGroupsConfiguration($event)\" [course]=\"course\" />\r\n</jhi-loading-indicator-container>\r\n"],
  "mappings": "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",
  "names": ["EditTutorialGroupsConfigurationComponent", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "tutorialGroupsConfigurationService", "TutorialGroupsConfigurationService", "courseStorageService", "CourseStorageService", "alertService", "AlertService", "cdr", "ChangeDetectorRef", "ngUnsubscribe", "Subject", "isLoading", "tutorialGroupsConfiguration", "formData", "course", "tutorialGroupConfigurationId", "ngOnInit", "combineLatest", "paramMap", "data", "pipe", "take", "switchMap", "params", "Number", "get", "getOneOfCourse", "id", "finalize", "takeUntil", "subscribe", "next", "tutorialGroupsConfigurationResult", "body", "period", "tutorialPeriodStartInclusive", "toDate", "tutorialPeriodEndInclusive", "useTutorialGroupChannels", "usePublicTutorialGroupChannels", "error", "res", "onError", "add", "detectChanges", "ngOnDestroy", "complete", "updateTutorialGroupsConfiguration", "update", "navigate", "resp", "updatedConfiguration", "updateCourse", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275advance", "LoadingIndicatorContainerComponent", "TranslateDirective", "TutorialGroupsConfigurationFormComponent", "encapsulation", "changeDetection"]
}
