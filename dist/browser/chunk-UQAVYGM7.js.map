{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/shared/testExam-workingTime/test-exam-working-time.component.ts", "src/main/webapp/app/exam/shared/testExam-workingTime/test-exam-working-time.component.html"],
  "sourcesContent": ["import { Component, Input, OnInit } from '@angular/core';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { round } from 'app/shared/util/utils';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-test-exam-working-time',\r\n    templateUrl: './test-exam-working-time.component.html',\r\n    providers: [],\r\n    imports: [ArtemisDurationFromSecondsPipe],\r\n})\r\nexport class TestExamWorkingTimeComponent implements OnInit {\r\n    @Input() studentExam: StudentExam;\r\n\r\n    percentUsedWorkingTime = 0;\r\n    usedWorkingTime = 0;\r\n\r\n    /**\r\n     * This component is used to display the used working time and the percentage relative to the default working time for\r\n     * a test exam.\r\n     */\r\n    ngOnInit() {\r\n        if (\r\n            this.studentExam.exam!.testExam &&\r\n            this.studentExam.started &&\r\n            this.studentExam.submitted &&\r\n            this.studentExam.workingTime &&\r\n            this.studentExam.startedDate &&\r\n            this.studentExam.submissionDate\r\n        ) {\r\n            const regularExamDuration = this.studentExam.workingTime;\r\n            // As students may submit during the grace period, the workingTime is limited to the regular exam duration\r\n            this.usedWorkingTime = Math.min(regularExamDuration, dayjs(this.studentExam.submissionDate).diff(dayjs(this.studentExam.startedDate), 'seconds'));\r\n            // As students may submit during the grace period, the percentage is limited to 100%\r\n            this.percentUsedWorkingTime = Math.min(100, round((this.usedWorkingTime / regularExamDuration) * 100, 2));\r\n        }\r\n    }\r\n}\r\n", "<span>\r\n    {{ usedWorkingTime | artemisDurationFromSeconds }}\r\n    @if (!!percentUsedWorkingTime) {\r\n        ({{ percentUsedWorkingTime }}&thinsp;%)\r\n    }\r\n</span>\r\n"],
  "mappings": "iRCGQA,EAAA,CAAA,iBAAAC,EAAA;WAAAC,EAAAC,uBAAA;KAAA,GDSR,IAAaC,GAA4B,IAAA,CAAnC,MAAOA,CAA4B,CAC5BC,YAETF,uBAAyB,EACzBG,gBAAkB,EAMlBC,UAAQ,CACJ,GACI,KAAKF,YAAYG,KAAMC,UACvB,KAAKJ,YAAYK,SACjB,KAAKL,YAAYM,WACjB,KAAKN,YAAYO,aACjB,KAAKP,YAAYQ,aACjB,KAAKR,YAAYS,eACnB,CACE,IAAMC,EAAsB,KAAKV,YAAYO,YAE7C,KAAKN,gBAAkBU,KAAKC,IAAIF,EAAqBG,EAAM,KAAKb,YAAYS,cAAc,EAAEK,KAAKD,EAAM,KAAKb,YAAYQ,WAAW,EAAG,SAAS,CAAC,EAEhJ,KAAKV,uBAAyBa,KAAKC,IAAI,IAAKG,EAAO,KAAKd,gBAAkBS,EAAuB,IAAK,CAAC,CAAC,CAC5G,CACJ,4CAzBSX,EAA4B,2BAA5BA,EAA4BiB,UAAA,CAAA,CAAA,4BAAA,CAAA,EAAAC,OAAA,CAAAjB,YAAA,aAAA,EAAAkB,SAAA,CAAAC,EAH1B,CAAA,CAAE,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICTjBE,EAAA,EAAA,MAAA,EACI9B,EAAA,CAAA,oCACA+B,EAAA,EAAAC,EAAA,EAAA,CAAA,EAGJC,EAAA,EACAjC,EAAA,EAAA;CAAA,SALIkC,EAAA,EAAAjC,EAAA;MAAAkC,EAAA,EAAA,EAAAN,EAAAvB,eAAA,EAAA;KAAA,EACA4B,EAAA,CAAA,EAAAE,EAAAP,EAAA1B,uBAAA,EAAA,EAAA,kBDQUkC,CAA8B,EAAAC,cAAA,CAAA,CAAA,SAE/BlC,CAA4B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275textInterpolate1", "ctx_r0", "percentUsedWorkingTime", "TestExamWorkingTimeComponent", "studentExam", "usedWorkingTime", "ngOnInit", "exam", "testExam", "started", "submitted", "workingTime", "startedDate", "submissionDate", "regularExamDuration", "Math", "min", "dayjs", "diff", "round", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275template", "TestExamWorkingTimeComponent_Conditional_3_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "ArtemisDurationFromSecondsPipe", "encapsulation"]
}
