{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-student-repo-download.component.ts", "src/main/webapp/app/exercises/programming/shared/actions/programming-exercise-student-repo-download.component.html", "src/main/webapp/app/localvc/repository-view/repository-view.component.ts", "src/main/webapp/app/localvc/repository-view/repository-view.component.html"],
  "sourcesContent": ["import { Component, Input, inject } from '@angular/core';\r\nimport { ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { downloadZipFileFromResponse } from 'app/shared/util/download.util';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport { take } from 'rxjs';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exercise-student-repo-download',\r\n    templateUrl: './programming-exercise-student-repo-download.component.html',\r\n    imports: [ButtonComponent],\r\n})\r\nexport class ProgrammingExerciseStudentRepoDownloadComponent {\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private alertService = inject(AlertService);\r\n\r\n    ButtonType = ButtonType;\r\n    ButtonSize = ButtonSize;\r\n    readonly FeatureToggle = FeatureToggle;\r\n\r\n    @Input()\r\n    exerciseId: number;\r\n\r\n    @Input()\r\n    participationId: number;\r\n\r\n    @Input()\r\n    buttonSize: ButtonSize = ButtonSize.SMALL;\r\n\r\n    @Input()\r\n    title = 'artemisApp.programmingExercise.export.downloadRepo';\r\n\r\n    // Icons\r\n    faDownload = faDownload;\r\n\r\n    exportRepository() {\r\n        if (this.exerciseId && this.participationId) {\r\n            this.programmingExerciseService\r\n                .exportStudentRepository(this.exerciseId, this.participationId)\r\n                .pipe(take(1))\r\n                .subscribe((response) => {\r\n                    downloadZipFileFromResponse(response);\r\n                    this.alertService.success('artemisApp.programmingExercise.export.successMessageRepo');\r\n                });\r\n        }\r\n    }\r\n}\r\n", "<jhi-button\r\n    [disabled]=\"!exerciseId || !participationId\"\r\n    [btnType]=\"ButtonType.INFO\"\r\n    [btnSize]=\"buttonSize\"\r\n    [shouldSubmit]=\"false\"\r\n    [featureToggle]=\"[FeatureToggle.ProgrammingExercises, FeatureToggle.Exports]\"\r\n    [icon]=\"faDownload\"\r\n    [title]=\"title\"\r\n    (onClick)=\"exportRepository()\"\r\n/>\r\n", "import { Component, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { DomainService } from 'app/exercises/programming/shared/code-editor/service/code-editor-domain.service';\r\nimport { ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { DomainType, RepositoryType } from 'app/exercises/programming/shared/code-editor/model/code-editor.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { CodeEditorContainerComponent } from 'app/exercises/programming/shared/code-editor/container/code-editor-container.component';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { FeatureToggle } from 'app/shared/feature-toggle/feature-toggle.service';\r\nimport { faClockRotateLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { ButtonComponent, ButtonSize, ButtonType } from 'app/shared/components/button.component';\r\nimport { Feedback } from 'app/entities/feedback.model';\r\nimport { PROFILE_LOCALVC } from 'app/app.constants';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ResultComponent } from 'app/exercises/shared/result/result.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { ProgrammingExerciseStudentRepoDownloadComponent } from 'app/exercises/programming/shared/actions/programming-exercise-student-repo-download.component';\r\nimport { ProgrammingExerciseInstructorRepoDownloadComponent } from 'app/exercises/programming/shared/actions/programming-exercise-instructor-repo-download.component';\r\nimport { ProgrammingExerciseInstructionComponent } from 'app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component';\r\n\r\n@Component({\r\n    selector: 'jhi-repository-view',\r\n    templateUrl: './repository-view.component.html',\r\n    imports: [\r\n        CodeEditorContainerComponent,\r\n        TranslateDirective,\r\n        ButtonComponent,\r\n        ResultComponent,\r\n        RouterLink,\r\n        FaIconComponent,\r\n        CodeButtonComponent,\r\n        ProgrammingExerciseStudentRepoDownloadComponent,\r\n        ProgrammingExerciseInstructorRepoDownloadComponent,\r\n        ProgrammingExerciseInstructionComponent,\r\n    ],\r\n})\r\nexport class RepositoryViewComponent implements OnInit, OnDestroy {\r\n    private accountService = inject(AccountService);\r\n    domainService = inject(DomainService);\r\n    private route = inject(ActivatedRoute);\r\n    private profileService = inject(ProfileService);\r\n    private programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private router = inject(Router);\r\n\r\n    @ViewChild(CodeEditorContainerComponent, { static: false }) codeEditorContainer: CodeEditorContainerComponent;\r\n\r\n    PROGRAMMING = ExerciseType.PROGRAMMING;\r\n    protected readonly FeatureToggle = FeatureToggle;\r\n    protected readonly ButtonSize = ButtonSize;\r\n    protected readonly ButtonType = ButtonType;\r\n\r\n    readonly getCourseFromExercise = getCourseFromExercise;\r\n\r\n    paramSub: Subscription;\r\n    participation: ProgrammingExerciseStudentParticipation;\r\n    exercise: ProgrammingExercise;\r\n    userId: number;\r\n    // Fatal error state: when the participation can't be retrieved, the code editor is unusable for the student\r\n    loadingParticipation = false;\r\n    participationCouldNotBeFetched = false;\r\n    showEditorInstructions = true;\r\n    routeCommitHistory: string;\r\n    vcsAccessLogRoute: string;\r\n    repositoryUri: string;\r\n    repositoryType: RepositoryType;\r\n    enableVcsAccessLog = false;\r\n    isInCourseManagement = false;\r\n    allowVcsAccessLog = false;\r\n    result: Result;\r\n    resultHasInlineFeedback = false;\r\n    showInlineFeedback = false;\r\n    localVcEnabled = false;\r\n\r\n    faClockRotateLeft = faClockRotateLeft;\r\n    participationWithLatestResultSub: Subscription;\r\n    differentParticipationSub: Subscription;\r\n\r\n    /**\r\n     * Unsubscribe from all subscriptions when the component is destroyed\r\n     */\r\n    ngOnDestroy() {\r\n        this.paramSub?.unsubscribe();\r\n        this.participationWithLatestResultSub?.unsubscribe();\r\n        this.differentParticipationSub?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * On init, subscribe to the route params to get the participation and exercise id\r\n     * If the participation id is present, load the participation with the latest result\r\n     * If the participation id is not present, load the template, solution or test participation\r\n     */\r\n    ngOnInit(): void {\r\n        // Used to check if the assessor is the current user\r\n        this.accountService.identity().then((user) => {\r\n            this.userId = user!.id!;\r\n        });\r\n        this.routeCommitHistory = this.router.url + '/commit-history';\r\n        this.paramSub = this.route.params.subscribe((params) => {\r\n            this.loadingParticipation = true;\r\n            this.participationCouldNotBeFetched = false;\r\n            const exerciseId = Number(params['exerciseId']);\r\n            const repositoryId = Number(params['repositoryId']);\r\n            this.repositoryType = params['repositoryType'] ?? RepositoryType.USER;\r\n            this.vcsAccessLogRoute = this.router.url + '/vcs-access-log';\r\n            this.enableVcsAccessLog = this.router.url.includes('course-management') && params['repositoryType'] !== RepositoryType.TESTS;\r\n            if (this.repositoryType === RepositoryType.USER) {\r\n                this.loadStudentParticipation(repositoryId);\r\n            } else if (this.repositoryType === RepositoryType.AUXILIARY) {\r\n                this.loadAuxiliaryRepository(exerciseId, repositoryId);\r\n            } else {\r\n                this.loadDifferentParticipation(this.repositoryType, exerciseId);\r\n            }\r\n        });\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            this.localVcEnabled = profileInfo.activeProfiles.includes(PROFILE_LOCALVC);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load the template, solution or test participation. Set the domain and repositoryUri accordingly.\r\n     * If the participation can't be fetched, set the error state. The test repository does not have a participation.\r\n     * Only the domain is set.\r\n     * @param repositoryType The instructor repository type.\r\n     * @param exerciseId The id of the exercise\r\n     */\r\n    private loadDifferentParticipation(repositoryType: RepositoryType, exerciseId: number) {\r\n        this.differentParticipationSub = this.programmingExerciseService\r\n            .findWithTemplateAndSolutionParticipationAndLatestResults(exerciseId)\r\n            .pipe(\r\n                tap((exerciseResponse) => {\r\n                    this.exercise = exerciseResponse.body!;\r\n                    if (repositoryType === RepositoryType.TEMPLATE) {\r\n                        this.participation = this.exercise.templateParticipation!;\r\n                        this.domainService.setDomain([DomainType.PARTICIPATION, this.exercise.templateParticipation!]);\r\n                        this.repositoryUri = this.participation.repositoryUri!;\r\n                    } else if (repositoryType === RepositoryType.SOLUTION) {\r\n                        this.participation = this.exercise.solutionParticipation!;\r\n                        this.domainService.setDomain([DomainType.PARTICIPATION, this.exercise.solutionParticipation!]);\r\n                        this.repositoryUri = this.participation.repositoryUri!;\r\n                    } else if (repositoryType === RepositoryType.TESTS) {\r\n                        this.domainService.setDomain([DomainType.TEST_REPOSITORY, this.exercise]);\r\n                        this.repositoryUri = this.exercise.testRepositoryUri!;\r\n                    } else {\r\n                        this.participationCouldNotBeFetched = true;\r\n                        this.loadingParticipation = false;\r\n                    }\r\n                    this.allowVcsAccessLog = this.accountService.isAtLeastInstructorInCourse(this.getCourseFromExercise(this.exercise));\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.loadingParticipation = false;\r\n                },\r\n                error: () => {\r\n                    this.participationCouldNotBeFetched = true;\r\n                    this.loadingParticipation = false;\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load the participation with the latest result. Set the domain and repositoryUri accordingly.\r\n     * @param participationId the id of the participation to load\r\n     */\r\n    private loadStudentParticipation(participationId: number) {\r\n        this.participationWithLatestResultSub = this.getParticipationWithLatestResult(participationId)\r\n            .pipe(\r\n                tap((participationWithResults) => {\r\n                    this.domainService.setDomain([DomainType.PARTICIPATION, participationWithResults]);\r\n                    this.participation = participationWithResults;\r\n                    this.exercise = this.participation.exercise as ProgrammingExercise;\r\n                    this.allowVcsAccessLog = this.accountService.isAtLeastInstructorInCourse(this.getCourseFromExercise(this.exercise));\r\n                    this.repositoryUri = this.participation.repositoryUri!;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.loadingParticipation = false;\r\n                },\r\n                error: () => {\r\n                    this.participationCouldNotBeFetched = true;\r\n                    this.loadingParticipation = false;\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load the participation from server with the latest result. Set the result and participation accordingly.\r\n     * @param participationId the id of the participation to load\r\n     */\r\n    private getParticipationWithLatestResult(participationId: number): Observable<ProgrammingExerciseStudentParticipation> {\r\n        return this.programmingExerciseParticipationService.getStudentParticipationWithLatestResult(participationId).pipe(\r\n            map((participation: ProgrammingExerciseStudentParticipation) => {\r\n                if (participation.results?.length) {\r\n                    // connect result and participation\r\n                    participation.results[0].participation = participation;\r\n                    this.result = participation.results[0];\r\n                    this.resultHasInlineFeedback = this.result.feedbacks?.some((feedback) => Feedback.getReferenceLine(feedback) !== undefined) ?? false;\r\n                }\r\n                return participation;\r\n            }),\r\n        );\r\n    }\r\n\r\n    private loadAuxiliaryRepository(exerciseId: number, auxiliaryRepositoryId: number) {\r\n        this.programmingExerciseService\r\n            .findWithAuxiliaryRepository(exerciseId)\r\n            .pipe(\r\n                tap((exerciseResponse) => {\r\n                    this.exercise = exerciseResponse.body!;\r\n                    const auxiliaryRepo = this.exercise.auxiliaryRepositories?.find((repo) => repo.id === auxiliaryRepositoryId);\r\n                    if (auxiliaryRepo) {\r\n                        this.domainService.setDomain([DomainType.AUXILIARY_REPOSITORY, auxiliaryRepo]);\r\n                        this.repositoryUri = auxiliaryRepo.repositoryUri!;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.loadingParticipation = false;\r\n                },\r\n                error: () => {\r\n                    this.participationCouldNotBeFetched = true;\r\n                },\r\n            });\r\n    }\r\n}\r\n", "<ng-container>\r\n    @if (!loadingParticipation && !participationCouldNotBeFetched) {\r\n        <jhi-code-editor-container\r\n            [forRepositoryView]=\"true\"\r\n            [showInlineFeedback]=\"showInlineFeedback\"\r\n            [editable]=\"false\"\r\n            [buildable]=\"false\"\r\n            [participation]=\"participation\"\r\n            [showEditorInstructions]=\"showEditorInstructions\"\r\n            [allowHiddenFiles]=\"true\"\r\n            [isTutorAssessment]=\"true\"\r\n            [readOnlyManualFeedback]=\"true\"\r\n            [course]=\"getCourseFromExercise(exercise)\"\r\n        >\r\n            <div editorTitle>\r\n                <h1 jhiTranslate=\"artemisApp.repository.source\"></h1>\r\n            </div>\r\n            <div class=\"d-flex ps-3\" editorTitleActions>\r\n                @if (resultHasInlineFeedback) {\r\n                    <jhi-button\r\n                        [btnType]=\"ButtonType.PRIMARY_OUTLINE\"\r\n                        [title]=\"'artemisApp.repository.toggleInlineFeedback.' + (showInlineFeedback ? 'hide' : 'show')\"\r\n                        (onClick)=\"showInlineFeedback = !showInlineFeedback\"\r\n                    />\r\n                }\r\n            </div>\r\n            <div editorToolbar style=\"text-align: right\">\r\n                @if (result) {\r\n                    <jhi-result [result]=\"result\" [showUngradedResults]=\"true\" [showBadge]=\"true\" [exercise]=\"exercise\" style=\"padding-right: 20px\" />\r\n                }\r\n                @if (routeCommitHistory) {\r\n                    <a [routerLink]=\"routeCommitHistory\" class=\"btn btn-primary\">\r\n                        <fa-icon [icon]=\"faClockRotateLeft\" />\r\n                        <span jhiTranslate=\"artemisApp.repository.commitHistory.openCommitHistory\"></span>\r\n                    </a>\r\n                }\r\n                @if (vcsAccessLogRoute && enableVcsAccessLog && allowVcsAccessLog && localVcEnabled) {\r\n                    <a [routerLink]=\"vcsAccessLogRoute\" class=\"btn btn-primary\">\r\n                        <fa-icon [icon]=\"faClockRotateLeft\" />\r\n                        <span jhiTranslate=\"artemisApp.repository.vcsAccessLog.openVcsAccessLog\"></span>\r\n                    </a>\r\n                }\r\n\r\n                @if (exercise?.allowOfflineIde) {\r\n                    <jhi-code-button\r\n                        [loading]=\"!!exercise.loading\"\r\n                        [smallButtons]=\"false\"\r\n                        [participations]=\"[participation]\"\r\n                        [exercise]=\"exercise\"\r\n                        [repositoryUri]=\"repositoryUri\"\r\n                        [routerLinkForRepositoryView]=\"[]\"\r\n                    />\r\n                }\r\n\r\n                @if (exercise.id) {\r\n                    @if (repositoryType === 'USER') {\r\n                        <jhi-programming-exercise-student-repo-download [buttonSize]=\"ButtonSize.MEDIUM\" [exerciseId]=\"exercise.id\" [participationId]=\"participation.id!\" />\r\n                    } @else {\r\n                        <jhi-programming-exercise-instructor-repo-download [repositoryType]=\"repositoryType\" [exerciseId]=\"exercise.id\" [buttonSize]=\"ButtonSize.MEDIUM\" />\r\n                    }\r\n                }\r\n            </div>\r\n            <jhi-programming-exercise-instructions\r\n                editorSidebar\r\n                [exercise]=\"exercise\"\r\n                [participation]=\"participation\"\r\n                [personalParticipation]=\"true\"\r\n                class=\"instructions-wrapper__content card-body p-0\"\r\n            />\r\n        </jhi-code-editor-container>\r\n    }\r\n</ng-container>\r\n"],
  "mappings": "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",
  "names": ["ProgrammingExerciseStudentRepoDownloadComponent", "programmingExerciseService", "inject", "ProgrammingExerciseService", "alertService", "AlertService", "ButtonType", "ButtonSize", "FeatureToggle", "exerciseId", "participationId", "buttonSize", "SMALL", "title", "faDownload", "exportRepository", "exportStudentRepository", "pipe", "take", "subscribe", "response", "downloadZipFileFromResponse", "success", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275property", "INFO", "\u0275\u0275pureFunction2", "_c0", "ProgrammingExercises", "Exports", "ButtonComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "showInlineFeedback", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ButtonType", "PRIMARY_OUTLINE", "\u0275\u0275element", "result", "exercise", "routeCommitHistory", "faClockRotateLeft", "vcsAccessLogRoute", "loading", "\u0275\u0275pureFunction1", "_c0", "participation", "repositoryUri", "\u0275\u0275pureFunction0", "_c1", "ButtonSize", "MEDIUM", "id", "repositoryType", "\u0275\u0275template", "RepositoryViewComponent_Conditional_2_Conditional_18_Conditional_1_Template", "RepositoryViewComponent_Conditional_2_Conditional_18_Conditional_2_Template", "\u0275\u0275conditional", "RepositoryViewComponent_Conditional_2_Conditional_10_Template", "RepositoryViewComponent_Conditional_2_Conditional_14_Template", "RepositoryViewComponent_Conditional_2_Conditional_15_Template", "RepositoryViewComponent_Conditional_2_Conditional_16_Template", "RepositoryViewComponent_Conditional_2_Conditional_17_Template", "RepositoryViewComponent_Conditional_2_Conditional_18_Template", "showEditorInstructions", "getCourseFromExercise", "resultHasInlineFeedback", "enableVcsAccessLog", "allowVcsAccessLog", "localVcEnabled", "allowOfflineIde", "RepositoryViewComponent", "accountService", "inject", "AccountService", "domainService", "DomainService", "route", "ActivatedRoute", "profileService", "ProfileService", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "programmingExerciseService", "ProgrammingExerciseService", "router", "Router", "codeEditorContainer", "PROGRAMMING", "ExerciseType", "FeatureToggle", "paramSub", "userId", "loadingParticipation", "participationCouldNotBeFetched", "isInCourseManagement", "participationWithLatestResultSub", "differentParticipationSub", "ngOnDestroy", "unsubscribe", "ngOnInit", "identity", "then", "user", "url", "params", "subscribe", "exerciseId", "Number", "repositoryId", "RepositoryType", "USER", "includes", "TESTS", "loadStudentParticipation", "AUXILIARY", "loadAuxiliaryRepository", "loadDifferentParticipation", "getProfileInfo", "profileInfo", "activeProfiles", "PROFILE_LOCALVC", "findWithTemplateAndSolutionParticipationAndLatestResults", "pipe", "tap", "exerciseResponse", "body", "TEMPLATE", "templateParticipation", "setDomain", "DomainType", "PARTICIPATION", "SOLUTION", "solutionParticipation", "TEST_REPOSITORY", "testRepositoryUri", "isAtLeastInstructorInCourse", "next", "error", "participationId", "getParticipationWithLatestResult", "participationWithResults", "getStudentParticipationWithLatestResult", "map", "results", "length", "feedbacks", "some", "feedback", "Feedback", "getReferenceLine", "undefined", "auxiliaryRepositoryId", "findWithAuxiliaryRepository", "auxiliaryRepo", "auxiliaryRepositories", "find", "repo", "AUXILIARY_REPOSITORY", "selectors", "viewQuery", "rf", "ctx", "CodeEditorContainerComponent", "\u0275\u0275elementContainerStart", "RepositoryViewComponent_Conditional_2_Template", "TranslateDirective", "ButtonComponent", "ResultComponent", "RouterLink", "FaIconComponent", "CodeButtonComponent", "ProgrammingExerciseStudentRepoDownloadComponent", "ProgrammingExerciseInstructorRepoDownloadComponent", "ProgrammingExerciseInstructionComponent", "encapsulation"]
}
