{
  "version": 3,
  "sources": ["src/main/webapp/app/course/plagiarism-cases/instructor-view/plagiarism-cases-instructor-view.component.ts", "src/main/webapp/app/course/plagiarism-cases/instructor-view/plagiarism-cases-instructor-view.component.html"],
  "sourcesContent": ["import { HttpResponse } from '@angular/common/http';\r\nimport { Component, ElementRef, OnInit, effect, inject, viewChildren } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { PlagiarismCasesService } from 'app/course/plagiarism-cases/shared/plagiarism-cases.service';\r\nimport { PlagiarismCase } from 'app/exercises/shared/plagiarism/types/PlagiarismCase';\r\nimport { Exercise, getExerciseUrlSegment, getIcon } from 'app/entities/exercise.model';\r\nimport { downloadFile } from 'app/shared/util/download.util';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { GroupedPlagiarismCases } from 'app/exercises/shared/plagiarism/types/GroupedPlagiarismCase';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ProgressBarComponent } from 'app/shared/dashboards/tutor-participation-graph/progress-bar/progress-bar.component';\r\nimport { PlagiarismCaseVerdictComponent } from '../shared/verdict/plagiarism-case-verdict.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-plagiarism-cases-instructor-view',\r\n    templateUrl: './plagiarism-cases-instructor-view.component.html',\r\n    styleUrls: ['./plagiarism-cases-instructor-view.component.scss'],\r\n    imports: [\r\n        TranslateDirective,\r\n        DocumentationButtonComponent,\r\n        FaIconComponent,\r\n        RouterLink,\r\n        ProgressBarComponent,\r\n        PlagiarismCaseVerdictComponent,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class PlagiarismCasesInstructorViewComponent implements OnInit {\r\n    private plagiarismCasesService = inject(PlagiarismCasesService);\r\n    private route = inject(ActivatedRoute);\r\n    private alertService = inject(AlertService);\r\n\r\n    courseId: number;\r\n    examId?: number;\r\n    plagiarismCases: PlagiarismCase[] = [];\r\n    groupedPlagiarismCases: GroupedPlagiarismCases;\r\n    exercisesWithPlagiarismCases: Exercise[] = [];\r\n\r\n    exerciseWithPlagCasesElements = viewChildren<ElementRef>('plagExerciseElement');\r\n\r\n    // method called as html template variable, angular only recognises reference variables in html if they are a property\r\n    // of the corresponding component class\r\n    getExerciseUrlSegment = getExerciseUrlSegment;\r\n\r\n    readonly getIcon = getIcon;\r\n    readonly documentationType: DocumentationType = 'PlagiarismChecks';\r\n\r\n    constructor() {\r\n        // effect needs to be in constructor context, due to the possibility of ngOnInit being called from a non-injection\r\n        //context\r\n        effect(() => {\r\n            const exerciseId = Number(this.route.snapshot.queryParamMap?.get('exerciseId'));\r\n            if (exerciseId) {\r\n                this.scrollToExerciseAfterViewInit(exerciseId);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\r\n        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\r\n        const plagiarismCasesForInstructor$ = this.examId\r\n            ? this.plagiarismCasesService.getExamPlagiarismCasesForInstructor(this.courseId, this.examId)\r\n            : this.plagiarismCasesService.getCoursePlagiarismCasesForInstructor(this.courseId);\r\n\r\n        plagiarismCasesForInstructor$.subscribe({\r\n            next: (res: HttpResponse<PlagiarismCase[]>) => {\r\n                this.plagiarismCases = res.body!;\r\n                this.groupedPlagiarismCases = this.getGroupedPlagiarismCasesByExercise(this.plagiarismCases);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * scroll to the exercise with\r\n     */\r\n    scrollToExerciseAfterViewInit(exerciseId: number) {\r\n        const element = this.exerciseWithPlagCasesElements().find((elem) => elem.nativeElement.id === 'exercise-with-plagiarism-case-' + exerciseId);\r\n        if (element) {\r\n            element.nativeElement.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'start',\r\n                inline: 'nearest',\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * calculate the total number of plagiarism cases\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return number of plagiarism cases in course or exam\r\n     */\r\n    numberOfCases(plagiarismCases: PlagiarismCase[]): number {\r\n        return plagiarismCases.length;\r\n    }\r\n\r\n    /**\r\n     * calculate the number of plagiarism cases with a verdict\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return number of plagiarism cases with a verdict in course or exam\r\n     */\r\n    numberOfCasesWithVerdict(plagiarismCases: PlagiarismCase[]): number {\r\n        return plagiarismCases.filter((plagiarismCase) => !!plagiarismCase.verdict).length;\r\n    }\r\n\r\n    /**\r\n     * calculate the percentage of plagiarism cases with a verdict\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return percentage of plagiarism cases with a verdict in course or exam\r\n     */\r\n    percentageOfCasesWithVerdict(plagiarismCases: PlagiarismCase[]): number {\r\n        return (this.numberOfCasesWithVerdict(plagiarismCases) / this.numberOfCases(plagiarismCases)) * 100 || 0;\r\n    }\r\n\r\n    /**\r\n     * calculate the number of plagiarism cases with a post\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return number of plagiarism cases with a post in course or exam\r\n     */\r\n    numberOfCasesWithPost(plagiarismCases: PlagiarismCase[]): number {\r\n        return plagiarismCases.filter((plagiarismCase) => !!plagiarismCase.post).length;\r\n    }\r\n\r\n    /**\r\n     * calculate the percentage of plagiarism cases with a post\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return percentage of plagiarism cases with a post in course or exam\r\n     */\r\n    percentageOfCasesWithPost(plagiarismCases: PlagiarismCase[]): number {\r\n        return (this.numberOfCasesWithPost(plagiarismCases) / this.numberOfCases(plagiarismCases)) * 100 || 0;\r\n    }\r\n\r\n    /**\r\n     * calculate the number of plagiarism cases with an answer by the student in course or exam\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return number of plagiarism cases with an answer by the student in course or exam\r\n     */\r\n    numberOfCasesWithStudentAnswer(plagiarismCases: PlagiarismCase[]): number {\r\n        return plagiarismCases.filter((plagiarismCase) => this.hasStudentAnswer(plagiarismCase)).length;\r\n    }\r\n\r\n    /**\r\n     * calculate the percentage of plagiarism cases with an answer by the student in course or exam\r\n     * @param plagiarismCases plagiarismCases in the course or exam\r\n     * @return percentage of plagiarism cases with an answer by the student in course or exam\r\n     */\r\n    percentageOfCasesWithStudentAnswer(plagiarismCases: PlagiarismCase[]): number {\r\n        return (this.numberOfCasesWithStudentAnswer(plagiarismCases) / this.numberOfCasesWithPost(plagiarismCases)) * 100 || 0;\r\n    }\r\n\r\n    /**\r\n     * check if the student of a plagiarism case was already notified and has responded\r\n     * @param plagiarismCase plagiarismCase to check\r\n     * @return whether the student has responded or not\r\n     */\r\n    hasStudentAnswer(plagiarismCase: PlagiarismCase): boolean {\r\n        return !!plagiarismCase.post && !!plagiarismCase.post.answers && plagiarismCase.post.answers.some((answer) => answer.author?.id === plagiarismCase.student?.id);\r\n    }\r\n\r\n    /**\r\n     * set placeholder for undefined values and sanitize the operators away\r\n     * @param value to be sanitized or replaced with -\r\n     * @private\r\n     */\r\n    private sanitizeCSVField(value: any): string {\r\n        if (value === null || value === undefined) {\r\n            // used as placeholder for null or if the passed value does not exist\r\n            return '-';\r\n        }\r\n        // sanitize the operators away in case they appear in the values\r\n        return String(value).replace(/;/g, '\";\"');\r\n    }\r\n\r\n    /**\r\n     * export the cases in CSV format\r\n     */\r\n    exportPlagiarismCases(): void {\r\n        const headers = ['Student Login', 'Matr. Nr.', 'Exercise', 'Verdict', 'Verdict Date', 'Verdict By'];\r\n        const blobParts: string[] = [headers.join(';') + '\\n'];\r\n        this.plagiarismCases.reduce((acc, plagiarismCase) => {\r\n            const fields = [\r\n                this.sanitizeCSVField(plagiarismCase.student?.login),\r\n                this.sanitizeCSVField(plagiarismCase.student?.visibleRegistrationNumber),\r\n                this.sanitizeCSVField(plagiarismCase.exercise?.title),\r\n            ];\r\n            if (plagiarismCase.verdict) {\r\n                fields.push(\r\n                    this.sanitizeCSVField(plagiarismCase.verdict),\r\n                    this.sanitizeCSVField(plagiarismCase.verdictDate),\r\n                    this.sanitizeCSVField(plagiarismCase.verdictBy?.name),\r\n                );\r\n            } else {\r\n                fields.push('No verdict yet', '-', '-');\r\n            }\r\n            acc.push(fields.join(';') + '\\n');\r\n            return acc;\r\n        }, blobParts);\r\n\r\n        try {\r\n            downloadFile(new Blob(blobParts, { type: 'text/csv' }), 'plagiarism-cases.csv');\r\n        } catch (error) {\r\n            this.alertService.error('artemisApp.plagiarism.plagiarismCases.export.error');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * groups plagiarism cases by exercise for view\r\n     * @param cases to be grouped by exerises\r\n     * @private return object containing grouped cases\r\n     */\r\n    private getGroupedPlagiarismCasesByExercise(cases: PlagiarismCase[]): GroupedPlagiarismCases {\r\n        return cases.reduce((acc: { [exerciseId: number]: PlagiarismCase[] }, plagiarismCase: PlagiarismCase) => {\r\n            const caseExerciseId = plagiarismCase.exercise?.id;\r\n            if (caseExerciseId === undefined) {\r\n                return acc;\r\n            }\r\n\r\n            // Group initialization\r\n            if (!acc[caseExerciseId]) {\r\n                acc[caseExerciseId] = [];\r\n                this.exercisesWithPlagiarismCases.push(plagiarismCase.exercise!);\r\n            }\r\n\r\n            // Grouping\r\n            acc[caseExerciseId].push(plagiarismCase);\r\n\r\n            return acc;\r\n        }, {});\r\n    }\r\n}\r\n", "<div class=\"d-flex align-items-center\">\r\n    <h3 jhiTranslate=\"artemisApp.plagiarism.cases.plagiarismCases\"></h3>\r\n    <jhi-documentation-button [type]=\"documentationType\" />\r\n</div>\r\n<h4 jhiTranslate=\"artemisApp.plagiarism.cases.pageSubtitle\"></h4>\r\n@if (plagiarismCases && plagiarismCases.length > 0) {\r\n    <div>\r\n        <div class=\"plagiarism-cases--toolbar row mb-3\">\r\n            <div class=\"col-auto\">\r\n                <button class=\"btn btn-primary\" (click)=\"exportPlagiarismCases()\" jhiTranslate=\"artemisApp.plagiarism.cases.exportCsv\"></button>\r\n            </div>\r\n        </div>\r\n        @for (exercise of exercisesWithPlagiarismCases; track exercise.id; let exerciseIndex = $index) {\r\n            <div #plagExerciseElement class=\"card mb-2\" [id]=\"'exercise-with-plagiarism-case-' + exercise.id\">\r\n                <div class=\"card-header\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-3\">\r\n                            <h5 class=\"mb-0\">\r\n                                @if (exercise.type) {\r\n                                    <fa-icon [icon]=\"getIcon(exercise.type)\" />\r\n                                }\r\n                                {{ exercise.title }}\r\n                                <small>\r\n                                    <a\r\n                                        id=\"plagiarism-detection-link-{{ exercise.id }}\"\r\n                                        [routerLink]=\"['/course-management', courseId, getExerciseUrlSegment(exercise.type), exercise.id, 'plagiarism']\"\r\n                                        jhiTranslate=\"artemisApp.plagiarism.plagiarismCases.viewComparisons\"\r\n                                    >\r\n                                    </a>\r\n                                </small>\r\n                            </h5>\r\n                        </div>\r\n                        <div class=\"col-3\">\r\n                            <jhi-progress-bar\r\n                                [denominator]=\"numberOfCases(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [numerator]=\"numberOfCasesWithPost(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [percentage]=\"percentageOfCasesWithPost(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [tooltip]=\"'artemisApp.plagiarism.plagiarismCases.casesWithPost' | artemisTranslate\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"col-3\">\r\n                            <jhi-progress-bar\r\n                                [denominator]=\"numberOfCasesWithPost(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [numerator]=\"numberOfCasesWithStudentAnswer(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [percentage]=\"percentageOfCasesWithStudentAnswer(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [tooltip]=\"'artemisApp.plagiarism.plagiarismCases.casesWithStudentAnswer' | artemisTranslate\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"col-3\">\r\n                            <jhi-progress-bar\r\n                                [denominator]=\"numberOfCases(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [numerator]=\"numberOfCasesWithVerdict(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [percentage]=\"percentageOfCasesWithVerdict(groupedPlagiarismCases[exercise!.id!])\"\r\n                                [tooltip]=\"'artemisApp.plagiarism.plagiarismCases.casesWithVerdict' | artemisTranslate\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    @for (plagiarismCase of groupedPlagiarismCases[exercise!.id!]; track plagiarismCase; let plagiarismCaseIndex = $index) {\r\n                        <div class=\"row mb-3\">\r\n                            @if (plagiarismCase.student) {\r\n                                <div class=\"col-1 text-center\">\r\n                                    <a [routerLink]=\"['/course-management', courseId, 'plagiarism-cases', plagiarismCase.id]\">\r\n                                        {{ plagiarismCase.student.name }} ({{ plagiarismCase.student.login }})\r\n                                    </a>\r\n                                </div>\r\n                            }\r\n                            @if (plagiarismCase.plagiarismSubmissions) {\r\n                                <div class=\"col-2 text-center\">\r\n                                    <span>\r\n                                        {{\r\n                                            'artemisApp.plagiarism.plagiarismCases.appearsInComparisons' | artemisTranslate: { count: plagiarismCase.plagiarismSubmissions?.length }\r\n                                        }}\r\n                                    </span>\r\n                                </div>\r\n                            }\r\n\r\n                            @if (plagiarismCase.post) {\r\n                                <div class=\"col-3 text-center\">\r\n                                    {{ 'artemisApp.plagiarism.plagiarismCases.notifiedAt' | artemisTranslate }} {{ plagiarismCase.post.creationDate | artemisDate }}\r\n                                </div>\r\n                            }\r\n                            @if (!plagiarismCase.post) {\r\n                                <div class=\"col-3 text-center\" jhiTranslate=\"artemisApp.plagiarism.plagiarismCases.notNotified\"></div>\r\n                            }\r\n                            @if (hasStudentAnswer(plagiarismCase)) {\r\n                                <div class=\"col-3 text-center\" jhiTranslate=\"artemisApp.plagiarism.plagiarismCases.respondedByStudent\"></div>\r\n                            }\r\n                            @if (!hasStudentAnswer(plagiarismCase)) {\r\n                                <div class=\"col-3 text-center\" jhiTranslate=\"artemisApp.plagiarism.plagiarismCases.notResponded\"></div>\r\n                            }\r\n                            <div class=\"col-3\">\r\n                                <jhi-plagiarism-case-verdict [plagiarismCase]=\"plagiarismCase\" [hideDetails]=\"true\" />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n} @else {\r\n    {{ 'artemisApp.plagiarism.plagiarismCases.' + (this.examId ? 'noExamCases' : 'noCourseCases') | artemisTranslate }}\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "getIcon", "exercise_r3", "type", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275pureFunction2", "_c2", "courseId", "plagiarismCase_r4", "id", "\u0275\u0275textInterpolate2", "student", "name", "login", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c3", "plagiarismSubmissions", "length", "\u0275\u0275pipeBind1", "post", "creationDate", "\u0275\u0275template", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Conditional_3_Template", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Conditional_4_Template", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Conditional_5_Template", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Conditional_6_Template", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Conditional_7_Template", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Conditional_8_Template", "\u0275\u0275conditional", "hasStudentAnswer", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_Conditional_12_Template", "\u0275\u0275repeaterCreate", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_For_45_Template", "\u0275\u0275repeaterTrackByIdentity", "title", "\u0275\u0275propertyInterpolate1", "\u0275\u0275pureFunction3", "_c1", "getExerciseUrlSegment", "numberOfCases", "groupedPlagiarismCases", "numberOfCasesWithPost", "percentageOfCasesWithPost", "numberOfCasesWithStudentAnswer", "percentageOfCasesWithStudentAnswer", "numberOfCasesWithVerdict", "percentageOfCasesWithVerdict", "\u0275\u0275repeater", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "exportPlagiarismCases", "PlagiarismCasesInstructorViewComponent_Conditional_9_For_12_Template", "_forTrack0", "exercisesWithPlagiarismCases", "examId", "PlagiarismCasesInstructorViewComponent", "plagiarismCasesService", "inject", "PlagiarismCasesService", "route", "ActivatedRoute", "alertService", "AlertService", "plagiarismCases", "exerciseWithPlagCasesElements", "viewChildren", "documentationType", "constructor", "effect", "exerciseId", "Number", "snapshot", "queryParamMap", "get", "scrollToExerciseAfterViewInit", "ngOnInit", "paramMap", "getExamPlagiarismCasesForInstructor", "getCoursePlagiarismCasesForInstructor", "subscribe", "next", "res", "body", "getGroupedPlagiarismCasesByExercise", "element", "find", "elem", "nativeElement", "scrollIntoView", "behavior", "block", "inline", "filter", "plagiarismCase", "verdict", "answers", "some", "answer", "author", "sanitizeCSVField", "value", "String", "replace", "blobParts", "join", "reduce", "acc", "fields", "visibleRegistrationNumber", "exercise", "push", "verdictDate", "verdictBy", "downloadFile", "Blob", "error", "cases", "caseExerciseId", "undefined", "selectors", "viewQuery", "rf", "ctx", "PlagiarismCasesInstructorViewComponent_Conditional_9_Template", "PlagiarismCasesInstructorViewComponent_Conditional_10_Template", "TranslateDirective", "DocumentationButtonComponent", "FaIconComponent", "RouterLink", "ProgressBarComponent", "PlagiarismCaseVerdictComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "encapsulation"]
}
