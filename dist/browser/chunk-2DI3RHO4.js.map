{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/statistics-graph/statistics.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Graphs, SpanType, StatisticsView } from 'app/entities/statistics.model';\r\nimport { CourseManagementStatisticsDTO } from 'app/course/manage/course-management-statistics-dto';\r\nimport { ExerciseManagementStatisticsDto } from 'app/exercises/shared/statistics/exercise-management-statistics-dto';\r\nimport { map } from 'rxjs/operators';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { convertDateFromServer } from 'app/utils/date.utils';\r\nimport { ExerciseCategory } from 'app/entities/exercise-category.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StatisticsService {\r\n    private http = inject(HttpClient);\r\n\r\n    private basePath = 'management/statistics/';\r\n    private resourceUrl = 'api/core/' + this.basePath;\r\n    private adminResourceUrl = 'api/core/admin/' + this.basePath;\r\n\r\n    /**\r\n     * Sends a GET request to retrieve the data for a graph based on the graphType in the last *span* days and the given period\r\n     */\r\n    getChartData(span: SpanType, periodIndex: number, graphType: Graphs): Observable<number[]> {\r\n        const params = new HttpParams()\r\n            .set('span', '' + span)\r\n            .set('periodIndex', '' + periodIndex)\r\n            .set('graphType', '' + graphType);\r\n        return this.http.get<number[]>(`${this.adminResourceUrl}data`, { params });\r\n    }\r\n\r\n    /**\r\n     * Sends a GET request to retrieve the data for a graph based on the graphType in the last *span* days, the given period and the id of the entity (e.g. course, exercise)\r\n     */\r\n    getChartDataForContent(span: SpanType, periodIndex: number, graphType: Graphs, view: StatisticsView, entityId: number): Observable<number[]> {\r\n        const params = new HttpParams()\r\n            .set('span', '' + span)\r\n            .set('periodIndex', '' + periodIndex)\r\n            .set('graphType', '' + graphType)\r\n            .set('view', '' + view)\r\n            .set('entityId', '' + entityId);\r\n        return this.http.get<number[]>(`${this.resourceUrl}data-for-content`, { params });\r\n    }\r\n\r\n    /**\r\n     * Sends a GET request to retrieve data needed for the course statistics\r\n     */\r\n    getCourseStatistics(courseId: number): Observable<CourseManagementStatisticsDTO> {\r\n        const params = new HttpParams().set('courseId', '' + courseId);\r\n        return this.http.get<CourseManagementStatisticsDTO>(`${this.resourceUrl}course-statistics`, { params }).pipe(\r\n            map((res: CourseManagementStatisticsDTO) => {\r\n                StatisticsService.convertExerciseCategoriesOfCourseManagementStatisticsFromServer(res);\r\n                return StatisticsService.convertCourseManagementStatisticDatesFromServer(res);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends a GET request to retrieve data needed for the exercise statistics\r\n     */\r\n    getExerciseStatistics(exerciseId: number): Observable<ExerciseManagementStatisticsDto> {\r\n        const params = new HttpParams().set('exerciseId', '' + exerciseId);\r\n        return this.http\r\n            .get<ExerciseManagementStatisticsDto>(`${this.resourceUrl}exercise-statistics`, { params })\r\n            .pipe(map((res: ExerciseManagementStatisticsDto) => StatisticsService.calculatePercentagesForExerciseStatistics(res)));\r\n    }\r\n\r\n    private static calculatePercentagesForExerciseStatistics(stats: ExerciseManagementStatisticsDto): ExerciseManagementStatisticsDto {\r\n        stats.participationsInPercent = stats.numberOfStudentsOrTeamsInCourse > 0 ? round((stats.numberOfParticipations / stats.numberOfStudentsOrTeamsInCourse) * 100, 1) : 0;\r\n        stats.resolvedPostsInPercent = stats.numberOfPosts > 0 ? round((stats.numberOfResolvedPosts / stats.numberOfPosts) * 100, 1) : 0;\r\n        stats.absoluteAveragePoints = round((stats.averageScoreOfExercise * stats.maxPointsOfExercise) / 100, 1);\r\n        return stats;\r\n    }\r\n\r\n    private static convertCourseManagementStatisticDatesFromServer(dto: CourseManagementStatisticsDTO): CourseManagementStatisticsDTO {\r\n        dto.averageScoresOfExercises.forEach((averageScores) => {\r\n            averageScores.releaseDate = convertDateFromServer(averageScores.releaseDate);\r\n        });\r\n        return dto;\r\n    }\r\n\r\n    private static convertExerciseCategoriesOfCourseManagementStatisticsFromServer(res: CourseManagementStatisticsDTO): CourseManagementStatisticsDTO {\r\n        res.averageScoresOfExercises.forEach((avgScoresOfExercise) => {\r\n            avgScoresOfExercise.categories = avgScoresOfExercise.categories?.map((category) => new ExerciseCategory(category.category, category.color));\r\n        });\r\n        return res;\r\n    }\r\n}\r\n"],
  "mappings": "+NAYA,IAAaA,GAAiB,IAAA,CAAxB,MAAOA,CAAiB,CAClBC,KAAOC,EAAOC,CAAU,EAExBC,SAAW,yBACXC,YAAc,YAAc,KAAKD,SACjCE,iBAAmB,kBAAoB,KAAKF,SAKpDG,aAAaC,EAAgBC,EAAqBC,EAAiB,CAC/D,IAAMC,EAAS,IAAIC,EAAU,EACxBC,IAAI,OAAQ,GAAKL,CAAI,EACrBK,IAAI,cAAe,GAAKJ,CAAW,EACnCI,IAAI,YAAa,GAAKH,CAAS,EACpC,OAAO,KAAKT,KAAKa,IAAc,GAAG,KAAKR,gBAAgB,OAAQ,CAAEK,OAAAA,CAAM,CAAE,CAC7E,CAKAI,uBAAuBP,EAAgBC,EAAqBC,EAAmBM,EAAsBC,EAAgB,CACjH,IAAMN,EAAS,IAAIC,EAAU,EACxBC,IAAI,OAAQ,GAAKL,CAAI,EACrBK,IAAI,cAAe,GAAKJ,CAAW,EACnCI,IAAI,YAAa,GAAKH,CAAS,EAC/BG,IAAI,OAAQ,GAAKG,CAAI,EACrBH,IAAI,WAAY,GAAKI,CAAQ,EAClC,OAAO,KAAKhB,KAAKa,IAAc,GAAG,KAAKT,WAAW,mBAAoB,CAAEM,OAAAA,CAAM,CAAE,CACpF,CAKAO,oBAAoBC,EAAgB,CAChC,IAAMR,EAAS,IAAIC,EAAU,EAAGC,IAAI,WAAY,GAAKM,CAAQ,EAC7D,OAAO,KAAKlB,KAAKa,IAAmC,GAAG,KAAKT,WAAW,oBAAqB,CAAEM,OAAAA,CAAM,CAAE,EAAES,KACpGC,EAAKC,IACDtB,EAAkBuB,gEAAgED,CAAG,EAC9EtB,EAAkBwB,gDAAgDF,CAAG,EAC/E,CAAC,CAEV,CAKAG,sBAAsBC,EAAkB,CACpC,IAAMf,EAAS,IAAIC,EAAU,EAAGC,IAAI,aAAc,GAAKa,CAAU,EACjE,OAAO,KAAKzB,KACPa,IAAqC,GAAG,KAAKT,WAAW,sBAAuB,CAAEM,OAAAA,CAAM,CAAE,EACzFS,KAAKC,EAAKC,GAAyCtB,EAAkB2B,0CAA0CL,CAAG,CAAC,CAAC,CAC7H,CAEQ,OAAOK,0CAA0CC,EAAsC,CAC3FA,OAAAA,EAAMC,wBAA0BD,EAAME,gCAAkC,EAAIC,EAAOH,EAAMI,uBAAyBJ,EAAME,gCAAmC,IAAK,CAAC,EAAI,EACrKF,EAAMK,uBAAyBL,EAAMM,cAAgB,EAAIH,EAAOH,EAAMO,sBAAwBP,EAAMM,cAAiB,IAAK,CAAC,EAAI,EAC/HN,EAAMQ,sBAAwBL,EAAOH,EAAMS,uBAAyBT,EAAMU,oBAAuB,IAAK,CAAC,EAChGV,CACX,CAEQ,OAAOJ,gDAAgDe,EAAkC,CAC7FA,OAAAA,EAAIC,yBAAyBC,QAASC,GAAiB,CACnDA,EAAcC,YAAcC,EAAsBF,EAAcC,WAAW,CAC/E,CAAC,EACMJ,CACX,CAEQ,OAAOhB,gEAAgED,EAAkC,CAC7GA,OAAAA,EAAIkB,yBAAyBC,QAASI,GAAuB,CACzDA,EAAoBC,WAAaD,EAAoBC,YAAYzB,IAAK0B,GAAa,IAAIC,EAAiBD,EAASA,SAAUA,EAASE,KAAK,CAAC,CAC9I,CAAC,EACM3B,CACX,4CAzEStB,EAAiB,6BAAjBA,EAAiBkD,QAAjBlD,EAAiBmD,UAAAC,WADJ,MAAM,CAAA,SACnBpD,CAAiB,GAAA",
  "names": ["StatisticsService", "http", "inject", "HttpClient", "basePath", "resourceUrl", "adminResourceUrl", "getChartData", "span", "periodIndex", "graphType", "params", "HttpParams", "set", "get", "getChartDataForContent", "view", "entityId", "getCourseStatistics", "courseId", "pipe", "map", "res", "convertExerciseCategoriesOfCourseManagementStatisticsFromServer", "convertCourseManagementStatisticDatesFromServer", "getExerciseStatistics", "exerciseId", "calculatePercentagesForExerciseStatistics", "stats", "participationsInPercent", "numberOfStudentsOrTeamsInCourse", "round", "numberOfParticipations", "resolvedPostsInPercent", "numberOfPosts", "numberOfResolvedPosts", "absoluteAveragePoints", "averageScoreOfExercise", "maxPointsOfExercise", "dto", "averageScoresOfExercises", "forEach", "averageScores", "releaseDate", "convertDateFromServer", "avgScoresOfExercise", "categories", "category", "ExerciseCategory", "color", "factory", "\u0275fac", "providedIn"]
}
