{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/layouts/navbar/entity-title.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { captureException } from '@sentry/angular';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { EMPTY, Observable, ReplaySubject, Subject } from 'rxjs';\r\n\r\nexport enum EntityType {\r\n    COURSE = 'COURSE',\r\n    EXERCISE = 'EXERCISE',\r\n    LECTURE = 'LECTURE',\r\n    COMPETENCY = 'COMPETENCY',\r\n    DIAGRAM = 'DIAGRAM',\r\n    ORGANIZATION = 'ORGANIZATION',\r\n    EXAM = 'EXAM',\r\n    TUTORIAL_GROUP = 'TUTORIAL_GROUP',\r\n}\r\n\r\nconst FETCH_FALLBACK_TIMEOUT = 3000;\r\n\r\n/**\r\n * Provides titles for entities, currently used by breadcrumbs\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class EntityTitleService {\r\n    private http = inject(HttpClient);\r\n\r\n    private readonly titleSubjects = new Map<string, { subject: Subject<string>; timeout?: ReturnType<typeof setTimeout> }>();\r\n\r\n    /**\r\n     * Returns an observable that will provide the title of the entity.\r\n     * The observable will yield the title immediately if it has already been set. Otherwise, it will wait until the title is provided.\r\n     * Fires a request to fetch the title after FETCH_FALLBACK_TIMEOUT ms if the title is not provided from elsewhere until that time.\r\n     *\r\n     * @param type the entity type\r\n     * @param ids the ids that identify the entity. Mostly one ID, for exercise hints provide the exercise id as second item in the array.\r\n     */\r\n    public getTitle(type: EntityType, ids: number[]): Observable<string> {\r\n        // We want to be very defensive here, therefore we wrap everything in a try/catch and return EMPTY if an error occurs\r\n        try {\r\n            if (!type || !ids?.length || ids.some((id) => !id && id !== 0)) {\r\n                captureException(new Error(`Supplied invalid parameters to getTitle() of EntityTitleService: Type=${type}, ids=${ids}`));\r\n                return EMPTY;\r\n            }\r\n\r\n            const mapKey = EntityTitleService.createMapKey(type, ids);\r\n\r\n            const { subject } = this.titleSubjects.computeIfAbsent(mapKey, () => ({\r\n                timeout: setTimeout(() => this.fetchTitle(type, ids), FETCH_FALLBACK_TIMEOUT),\r\n                subject: new ReplaySubject<string>(1),\r\n            }));\r\n\r\n            return subject.asObservable();\r\n        } catch (e) {\r\n            captureException(e);\r\n            return EMPTY;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the title of the provided entity.\r\n     * Will not set the title if falsy values are passed.\r\n     *\r\n     * @param type the type of the entity\r\n     * @param ids the ids that identify the entity. Mostly one ID, for exercise hints provide the exercise id as second item in the array.\r\n     * @param title the title of the entity\r\n     */\r\n    public setTitle(type: EntityType, ids: (number | undefined)[], title: string | undefined) {\r\n        // We want to be very defensive here, therefore we wrap everything in a try/catch\r\n        try {\r\n            if (!ids?.length || ids.some((id) => !id && id !== 0) || !title) {\r\n                captureException(new Error(`Supplied invalid parameters to setTitle() of EntityTitleService: Type=${type}, ids=${ids}, title=${title}`));\r\n                return;\r\n            }\r\n\r\n            const mapKey = EntityTitleService.createMapKey(type, ids as number[]);\r\n\r\n            const { subject, timeout } = this.titleSubjects.computeIfAbsent(mapKey, () => ({\r\n                subject: new ReplaySubject<string>(1),\r\n            }));\r\n\r\n            subject.next(title!);\r\n\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n        } catch (e) {\r\n            captureException(e);\r\n        }\r\n    }\r\n\r\n    public setExerciseTitle(exercise: Exercise) {\r\n        // we only want to show the exercise group name as exercise name to the students for exam exercises.\r\n        // for tutors and more privileged users, we want to show the exercise title\r\n        if (exercise.exerciseGroup && !exercise?.isAtLeastTutor) {\r\n            this.setTitle(EntityType.EXERCISE, [exercise.id], exercise.exerciseGroup.title);\r\n        } else {\r\n            this.setTitle(EntityType.EXERCISE, [exercise.id], exercise.title);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches the title of the given entity from the server.\r\n     *\r\n     * @param type the type of the entity\r\n     * @param ids the ids that identify the entity. Mostly one ID, for exercise hints provide the exercise id as second item in the array.\r\n     */\r\n    private fetchTitle(type: EntityType, ids: number[]): void {\r\n        let resourceUrl = 'api/';\r\n        switch (type) {\r\n            case EntityType.COURSE:\r\n                resourceUrl += 'core/courses';\r\n                break;\r\n            case EntityType.EXERCISE:\r\n                resourceUrl += 'exercise/exercises';\r\n                break;\r\n            case EntityType.LECTURE:\r\n                resourceUrl += 'lecture/lectures';\r\n                break;\r\n            case EntityType.COMPETENCY:\r\n                resourceUrl += 'atlas/competencies';\r\n                break;\r\n            case EntityType.DIAGRAM:\r\n                resourceUrl += 'modeling/apollon-diagrams';\r\n                break;\r\n            case EntityType.EXAM:\r\n                resourceUrl += 'exam/exams';\r\n                break;\r\n            case EntityType.ORGANIZATION:\r\n                resourceUrl += 'core/organizations';\r\n                break;\r\n            case EntityType.TUTORIAL_GROUP:\r\n                resourceUrl += 'tutorialgroup/tutorial-groups';\r\n                break;\r\n        }\r\n\r\n        this.http.get(`${resourceUrl}/${ids[0]}/title`, { observe: 'response', responseType: 'text' }).subscribe((response: HttpResponse<string>) => {\r\n            if (response.body) {\r\n                this.setTitle(type, ids, response.body);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds a single string ID from the type and numeric IDs.\r\n     *\r\n     * @param type the type of the entity\r\n     * @param ids the ids that identify the entity. Mostly one ID, for exercise hints provide the exercise id as second item in the array.\r\n     */\r\n    private static createMapKey(type: EntityType, ids: number[]) {\r\n        return `${type}-${ids.join('-')}`;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["EntityType", "FETCH_FALLBACK_TIMEOUT", "EntityTitleService", "http", "inject", "HttpClient", "titleSubjects", "Map", "getTitle", "type", "ids", "length", "some", "id", "captureException", "Error", "EMPTY", "mapKey", "createMapKey", "subject", "computeIfAbsent", "timeout", "setTimeout", "fetchTitle", "ReplaySubject", "asObservable", "e", "setTitle", "title", "next", "clearTimeout", "setExerciseTitle", "exercise", "exerciseGroup", "isAtLeastTutor", "EXERCISE", "resourceUrl", "COURSE", "LECTURE", "COMPETENCY", "DIAGRAM", "EXAM", "ORGANIZATION", "TUTORIAL_GROUP", "get", "observe", "responseType", "subscribe", "response", "body", "join", "factory", "\u0275fac", "providedIn"]
}
