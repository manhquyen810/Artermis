{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/participation/participation.utils.ts", "src/main/webapp/app/exercises/shared/result/result.utils.ts", "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise.utils.ts"],
  "sourcesContent": ["import { Participation, getExercise } from 'app/entities/participation/participation.model';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { getExerciseDueDate } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { SimpleChanges } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { orderBy as _orderBy } from 'lodash-es';\r\nimport { isAIResultAndIsBeingProcessed } from 'app/exercises/shared/result/result.utils';\r\n\r\n/**\r\n * Check if the participation has changed.\r\n * This includes the first change (undefined -> participation)!\r\n * @param changes\r\n */\r\nexport const hasParticipationChanged = (changes: SimpleChanges) => {\r\n    return (\r\n        changes.participation &&\r\n        changes.participation.currentValue &&\r\n        (!changes.participation.previousValue || changes.participation.previousValue.id !== changes.participation.currentValue.id)\r\n    );\r\n};\r\nexport const hasTemplateParticipationChanged = (changes: SimpleChanges) => {\r\n    return (\r\n        changes.templateParticipation &&\r\n        changes.templateParticipation.currentValue &&\r\n        (!changes.templateParticipation.previousValue || changes.templateParticipation.previousValue.id !== changes.templateParticipation.currentValue.id)\r\n    );\r\n};\r\nexport const hasSolutionParticipationChanged = (changes: SimpleChanges) => {\r\n    return (\r\n        changes.solutionParticipation &&\r\n        changes.solutionParticipation.currentValue &&\r\n        (!changes.solutionParticipation.previousValue || changes.solutionParticipation.previousValue.id !== changes.solutionParticipation.currentValue.id)\r\n    );\r\n};\r\n/**\r\n * Checks if given participation is related to a programming or quiz exercise.\r\n *\r\n * @param participation\r\n */\r\nexport const isProgrammingOrQuiz = (participation: Participation) => {\r\n    if (!participation) {\r\n        return false;\r\n    }\r\n    const exercise = getExercise(participation);\r\n    return exercise && (exercise.type === ExerciseType.PROGRAMMING || exercise.type === ExerciseType.QUIZ);\r\n};\r\n/**\r\n * Checks if given participation is related to a modeling, text or file-upload exercise.\r\n *\r\n * @param participation\r\n */\r\nexport const isModelingOrTextOrFileUpload = (participation: Participation) => {\r\n    if (!participation) {\r\n        return false;\r\n    }\r\n    const exercise = getExercise(participation);\r\n    return exercise && (exercise.type === ExerciseType.MODELING || exercise.type === ExerciseType.TEXT || exercise.type === ExerciseType.FILE_UPLOAD);\r\n};\r\n/**\r\n * Checks if given participation has results.\r\n *\r\n * @param participation\r\n * @return {boolean}\r\n */\r\nexport const hasResults = (participation: Participation) => {\r\n    return participation.results?.length;\r\n};\r\n/**\r\n * Check if a given participation is in due time of the given exercise based on its submission at index position 0.\r\n * Before the method is called, it must be ensured that the submission at index position 0 is suitable to check if\r\n * the participation is in due time of the exercise.\r\n *\r\n * @param participation\r\n * @param exercise\r\n */\r\nexport const isParticipationInDueTime = (participation: Participation, exercise: Exercise): boolean => {\r\n    // If the exercise has no dueDate set, every submission is in time.\r\n    if (!exercise.dueDate) {\r\n        return true;\r\n    }\r\n\r\n    // If the participation has no submission, it cannot be in due time.\r\n    if (participation.submissions == undefined || participation.submissions.length <= 0) {\r\n        return false;\r\n    }\r\n\r\n    // If the submissionDate is before the dueDate of the exercise, the submission is in time.\r\n    const submission = participation.submissions[0];\r\n    if (submission.submissionDate) {\r\n        submission.submissionDate = dayjs(submission.submissionDate);\r\n        return submission.submissionDate.isBefore(getExerciseDueDate(exercise, participation));\r\n    }\r\n\r\n    // If the submission has no submissionDate set, the submission cannot be in time.\r\n    return false;\r\n};\r\n\r\n/**\r\n * Returns the latest result of a given student participation.\r\n *\r\n * @param participation\r\n * @param showUngradedResults\r\n */\r\nexport function getLatestResultOfStudentParticipation(\r\n    participation: StudentParticipation | undefined,\r\n    showUngradedResults: boolean,\r\n    showAthenaPreliminaryFeedback: boolean = false,\r\n): Result | undefined {\r\n    if (!participation) {\r\n        return undefined;\r\n    }\r\n\r\n    // Sort participation results by completionDate desc.\r\n    if (participation.results) {\r\n        participation.results = _orderBy(participation.results, 'completionDate', 'desc');\r\n    }\r\n\r\n    // The latest result is the first rated result in the sorted array (=newest) or any result if the option is active to show ungraded results.\r\n    const latestResult = participation.results?.find(\r\n        (result) => showUngradedResults || result.rated === true || (showAthenaPreliminaryFeedback && isAIResultAndIsBeingProcessed(result)),\r\n    );\r\n    // Make sure that the participation result is connected to the newest result.\r\n    return latestResult ? { ...latestResult, participation: participation } : undefined;\r\n}\r\n", "import { Result } from 'app/entities/result.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Feedback, FeedbackType } from 'app/entities/feedback.model';\r\nimport { MIN_SCORE_GREEN, MIN_SCORE_ORANGE } from 'app/app.constants';\r\nimport { isProgrammingExerciseStudentParticipation, isResultPreliminary } from 'app/exercises/programming/shared/utils/programming-exercise.utils';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { Submission, SubmissionExerciseType } from 'app/entities/submission.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faCheckCircle, faQuestionCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\nimport { isModelingOrTextOrFileUpload, isParticipationInDueTime, isProgrammingOrQuiz } from 'app/exercises/shared/participation/participation.utils';\r\nimport { getExerciseDueDate } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { Participation, ParticipationType } from 'app/entities/participation/participation.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ResultWithPointsPerGradingCriterion } from 'app/entities/result-with-points-per-grading-criterion.model';\r\nimport { TestCaseResult } from 'app/entities/programming/test-case-result.model';\r\n\r\n/**\r\n * Enumeration object representing the possible options that\r\n * the status of the result's template can be in.\r\n */\r\nexport enum ResultTemplateStatus {\r\n    /**\r\n     * An automatic result is currently being generated and should be available soon.\r\n     * This is currently only relevant for programming exercises.\r\n     */\r\n    IS_BUILDING = 'IS_BUILDING',\r\n    /**\r\n     * Submission is currently queued and will be processed soon.\r\n     * This is currently only relevant for programming exercises.\r\n     */\r\n    IS_QUEUED = 'IS_QUEUED',\r\n    /**\r\n     * An automatic feedback suggestion is currently being generated and should be available soon.\r\n     * This is currently only relevant for programming exercises.\r\n     */\r\n    IS_GENERATING_FEEDBACK = 'IS_GENERATING_FEEDBACK',\r\n    /**\r\n     * An automatic feedback suggestion has failed.\r\n     * This is currently only relevant for programming exercises.\r\n     */\r\n    FEEDBACK_GENERATION_FAILED = 'FEEDBACK_GENERATION_FAILED',\r\n    /**\r\n     * The generation of an automatic feedback suggestion was in progress, but did not return a result.\r\n     * This is currently only relevant for programming exercises.\r\n     */\r\n    FEEDBACK_GENERATION_TIMED_OUT = 'FEEDBACK_GENERATION_TIMED_OUT',\r\n    /**\r\n     * A regular, finished result is available.\r\n     * Can be rated (counts toward the score) or not rated (after the due date for practice).\r\n     */\r\n    HAS_RESULT = 'HAS_RESULT',\r\n    /**\r\n     * There is no result or submission status that could be shown, e.g. because the student just started with the exercise.\r\n     */\r\n    NO_RESULT = 'NO_RESULT',\r\n    /**\r\n     * Submitted and the student can still continue to submit.\r\n     */\r\n    SUBMITTED = 'SUBMITTED',\r\n    /**\r\n     * Submitted and the student can no longer submit, but a result is not yet available.\r\n     */\r\n    SUBMITTED_WAITING_FOR_GRADING = 'SUBMITTED_WAITING_FOR_GRADING',\r\n    /**\r\n     * The student started the exercise but submitted too late.\r\n     * Feedback is not yet available, and a future result will not count toward the score.\r\n     */\r\n    LATE_NO_FEEDBACK = 'LATE_NO_FEEDBACK',\r\n    /**\r\n     * The student started the exercise and submitted too late, but feedback is available.\r\n     */\r\n    LATE = 'LATE',\r\n    /**\r\n     * No latest result available, e.g. because building took too long and the webapp did not receive it in time.\r\n     * This is a distinct state because we want the student to know about this problematic state\r\n     * and not confuse them by showing a previous result that does not match the latest submission.\r\n     */\r\n    MISSING = 'MISSING',\r\n}\r\n\r\n/**\r\n * Information about a missing result to communicate problems and give hints how to respond.\r\n */\r\nexport enum MissingResultInformation {\r\n    NONE = 'NONE',\r\n    FAILED_PROGRAMMING_SUBMISSION_ONLINE_IDE = 'FAILED_PROGRAMMING_SUBMISSION_ONLINE_IDE',\r\n    FAILED_PROGRAMMING_SUBMISSION_OFFLINE_IDE = 'FAILED_PROGRAMMING_SUBMISSION_OFFLINE_IDE',\r\n}\r\n\r\n/**\r\n * Check if the given result was initialized and has a score\r\n *\r\n * @param result\r\n */\r\nexport const initializedResultWithScore = (result?: Result) => {\r\n    return result?.score !== undefined;\r\n};\r\n\r\n/**\r\n * Prepare a result that contains a participation which is needed in the rating component\r\n */\r\nexport const addParticipationToResult = (result: Result | undefined, participation: StudentParticipation) => {\r\n    const ratingResult = cloneDeep(result);\r\n    if (ratingResult) {\r\n        const ratingParticipation = cloneDeep(participation);\r\n        // remove circular dependency\r\n        ratingParticipation.exercise!.studentParticipations = [];\r\n        ratingResult.participation = ratingParticipation;\r\n    }\r\n    return ratingResult;\r\n};\r\n\r\n/**\r\n * searches for all manual unreferenced feedback in an array of feedbacks of a result\r\n * @param feedbacks the feedback of a result\r\n * @returns an array with the unreferenced feedback of the result\r\n */\r\nexport const getManualUnreferencedFeedback = (feedbacks: Feedback[] | undefined): Feedback[] | undefined => {\r\n    return feedbacks ? feedbacks.filter((feedbackElement) => !feedbackElement.reference && feedbackElement.type === FeedbackType.MANUAL_UNREFERENCED) : undefined;\r\n};\r\n\r\n/**\r\n * searches for all unreferenced feedback in an array of feedbacks of a result\r\n * @param feedbacks the feedback of a result\r\n * @returns an array with the unreferenced feedback of the result\r\n */\r\nexport const getUnreferencedFeedback = (feedbacks: Feedback[] | undefined): Feedback[] | undefined => {\r\n    return feedbacks\r\n        ? feedbacks.filter(\r\n              (feedbackElement) => !feedbackElement.reference && (feedbackElement.type === FeedbackType.MANUAL_UNREFERENCED || feedbackElement.type === FeedbackType.AUTOMATIC),\r\n          )\r\n        : undefined;\r\n};\r\n\r\nexport function isAIResultAndFailed(result: Result | undefined): boolean {\r\n    return (result && isAthenaAIResult(result) && result.successful === false) ?? false;\r\n}\r\n\r\nexport function isAIResultAndTimedOut(result: Result | undefined): boolean {\r\n    return (result && isAthenaAIResult(result) && result.successful === undefined && result.completionDate && dayjs().isAfter(result.completionDate)) ?? false;\r\n}\r\n\r\nexport function isAIResultAndProcessed(result: Result | undefined): boolean {\r\n    return (result && isAthenaAIResult(result) && result.successful === true) ?? false;\r\n}\r\n\r\nexport function isAIResultAndIsBeingProcessed(result: Result | undefined): boolean {\r\n    return (result && isAthenaAIResult(result) && result.successful === undefined && result.completionDate && dayjs().isSameOrBefore(result.completionDate)) ?? false;\r\n}\r\n\r\n/**\r\n * Checks whether the result is generated by Athena AI.\r\n *\r\n * @return true if the result is an automatic Athena AI result\r\n */\r\nexport function isAthenaAIResult(result: Result): boolean {\r\n    return result.assessmentType === AssessmentType.AUTOMATIC_ATHENA;\r\n}\r\n\r\nexport const evaluateTemplateStatus = (\r\n    exercise: Exercise | undefined,\r\n    participation: Participation | undefined,\r\n    result: Result | undefined,\r\n    isBuilding: boolean,\r\n    missingResultInfo = MissingResultInformation.NONE,\r\n    isQueued = false,\r\n): ResultTemplateStatus => {\r\n    // Fallback if participation is not set\r\n    if (!participation || !exercise) {\r\n        if (!result) {\r\n            return ResultTemplateStatus.NO_RESULT;\r\n        } else {\r\n            return ResultTemplateStatus.HAS_RESULT;\r\n        }\r\n    }\r\n\r\n    // If there is a problem, it has priority, and we show that instead\r\n    if (missingResultInfo !== MissingResultInformation.NONE) {\r\n        return ResultTemplateStatus.MISSING;\r\n    }\r\n\r\n    // Evaluate status for modeling, text and file-upload exercises\r\n    if (isModelingOrTextOrFileUpload(participation)) {\r\n        // Based on its submission we test if the participation is in due time of the given exercise.\r\n\r\n        const inDueTime = isParticipationInDueTime(participation, exercise);\r\n        const dueDate = getExerciseDueDate(exercise, participation);\r\n        const assessmentDueDate = exercise.assessmentDueDate;\r\n\r\n        if (inDueTime && initializedResultWithScore(result)) {\r\n            // Submission is in due time of exercise and has a result with score\r\n            if (!assessmentDueDate || assessmentDueDate.isBefore(dayjs()) || !isManualResult(result)) {\r\n                // the assessment due date has passed (or there was none) (or it is not manual feedback)\r\n                if (result?.assessmentType === AssessmentType.AUTOMATIC_ATHENA && result?.successful === undefined) {\r\n                    return ResultTemplateStatus.IS_GENERATING_FEEDBACK;\r\n                } else if (result?.assessmentType === AssessmentType.AUTOMATIC_ATHENA && result?.successful === false) {\r\n                    return ResultTemplateStatus.FEEDBACK_GENERATION_FAILED;\r\n                }\r\n                return ResultTemplateStatus.HAS_RESULT;\r\n            } else {\r\n                // the assessment period is still active\r\n                return ResultTemplateStatus.SUBMITTED_WAITING_FOR_GRADING;\r\n            }\r\n        } else if (inDueTime && !initializedResultWithScore(result)) {\r\n            // Submission is in due time of exercise and doesn't have a result with score.\r\n            if (!dueDate || dueDate.isSameOrAfter(dayjs())) {\r\n                // the due date is in the future (or there is none) => the exercise is still ongoing\r\n                return ResultTemplateStatus.SUBMITTED;\r\n            } else if (!assessmentDueDate || assessmentDueDate.isSameOrAfter(dayjs()) || isManualResult(result)) {\r\n                // the due date is over, further submissions are no longer possible, waiting for grading\r\n                return ResultTemplateStatus.SUBMITTED_WAITING_FOR_GRADING;\r\n            } else {\r\n                // the due date is over, further submissions are no longer possible, no result after assessment due date\r\n                // TODO why is this distinct from the case above? The submission can still be graded and often is.\r\n                return ResultTemplateStatus.NO_RESULT;\r\n            }\r\n        } else if (initializedResultWithScore(result) && (!assessmentDueDate || assessmentDueDate.isBefore(dayjs()) || !isManualResult(result))) {\r\n            // Submission is not in due time of exercise, has a result with score and there is no assessmentDueDate for the exercise or it lies in the past.\r\n            // TODO handle external submissions with new status \"External\"\r\n            return ResultTemplateStatus.LATE;\r\n        } else {\r\n            // Submission is not in due time of exercise and there is actually no feedback for the submission or the feedback should not be displayed yet.\r\n            return ResultTemplateStatus.LATE_NO_FEEDBACK;\r\n        }\r\n    }\r\n\r\n    // Evaluate status for programming and quiz exercises\r\n    if (isProgrammingOrQuiz(participation)) {\r\n        if (isQueued) {\r\n            return ResultTemplateStatus.IS_QUEUED;\r\n        } else if (isBuilding) {\r\n            return ResultTemplateStatus.IS_BUILDING;\r\n        } else if (isAIResultAndIsBeingProcessed(result)) {\r\n            return ResultTemplateStatus.IS_GENERATING_FEEDBACK;\r\n        } else if (isAIResultAndProcessed(result)) {\r\n            return ResultTemplateStatus.HAS_RESULT;\r\n        } else if (isAIResultAndFailed(result)) {\r\n            return ResultTemplateStatus.FEEDBACK_GENERATION_FAILED;\r\n        } else if (isAIResultAndTimedOut(result)) {\r\n            return ResultTemplateStatus.FEEDBACK_GENERATION_TIMED_OUT;\r\n        } else if (initializedResultWithScore(result)) {\r\n            return ResultTemplateStatus.HAS_RESULT;\r\n        } else {\r\n            return ResultTemplateStatus.NO_RESULT;\r\n        }\r\n    }\r\n\r\n    return ResultTemplateStatus.NO_RESULT;\r\n};\r\n\r\n/**\r\n * Checks if only compilation was tested. This is the case, when a successful result is present with 0 of 0 passed tests\r\n * This could be because all test cases are only visible after the due date.\r\n */\r\nexport const isOnlyCompilationTested = (result: Result | undefined, templateStatus: ResultTemplateStatus): boolean => {\r\n    const zeroTests = !result?.testCaseCount;\r\n    const isProgrammingExercise: boolean = result?.participation?.exercise?.type === ExerciseType.PROGRAMMING;\r\n    return (\r\n        templateStatus !== ResultTemplateStatus.NO_RESULT &&\r\n        templateStatus !== ResultTemplateStatus.IS_BUILDING &&\r\n        !isBuildFailed(result?.submission) &&\r\n        zeroTests &&\r\n        isProgrammingExercise\r\n    );\r\n};\r\n\r\n/**\r\n * Get the css class for the entire text as a string\r\n *\r\n * @return {string} the css class\r\n */\r\nexport const getTextColorClass = (result: Result | undefined, templateStatus: ResultTemplateStatus) => {\r\n    if (!result) {\r\n        return 'text-secondary';\r\n    }\r\n\r\n    if (result.assessmentType === AssessmentType.AUTOMATIC_ATHENA) {\r\n        if (isAIResultAndIsBeingProcessed(result)) {\r\n            return 'text-primary';\r\n        }\r\n        if (isAIResultAndFailed(result)) {\r\n            return 'text-danger';\r\n        }\r\n        return 'text-secondary';\r\n    }\r\n\r\n    if (templateStatus === ResultTemplateStatus.LATE) {\r\n        return 'result-late';\r\n    }\r\n\r\n    if (isBuildFailedAndResultIsAutomatic(result)) {\r\n        return 'text-danger';\r\n    }\r\n\r\n    if (resultIsPreliminary(result)) {\r\n        return 'text-secondary';\r\n    }\r\n\r\n    if (result?.score === undefined) {\r\n        return result?.successful ? 'text-success' : 'text-danger';\r\n    }\r\n\r\n    if (isOnlyCompilationTested(result, templateStatus)) {\r\n        return 'text-success';\r\n    }\r\n\r\n    if (result.score >= MIN_SCORE_GREEN) {\r\n        return 'text-success';\r\n    }\r\n\r\n    if (result.score >= MIN_SCORE_ORANGE) {\r\n        return 'result-orange';\r\n    }\r\n\r\n    return 'text-danger';\r\n};\r\n\r\n/**\r\n * Get the icon type for the result icon as an array\r\n *\r\n */\r\nexport const getResultIconClass = (result: Result | undefined, templateStatus: ResultTemplateStatus): IconProp => {\r\n    if (!result) {\r\n        return faQuestionCircle;\r\n    }\r\n\r\n    if (result.assessmentType === AssessmentType.AUTOMATIC_ATHENA) {\r\n        // result loading\r\n        if (result.successful === undefined) {\r\n            return faCircleNotch;\r\n        }\r\n        // result done successfuly\r\n        if (result.successful) {\r\n            return faCheckCircle;\r\n        }\r\n        // generating failed\r\n        return faTimesCircle;\r\n    }\r\n\r\n    if (isBuildFailedAndResultIsAutomatic(result) || isAIResultAndFailed(result)) {\r\n        return faTimesCircle;\r\n    }\r\n\r\n    if (isAIResultAndIsBeingProcessed(result)) {\r\n        return faCircleNotch;\r\n    }\r\n\r\n    if (resultIsPreliminary(result) || isAIResultAndTimedOut(result)) {\r\n        return faQuestionCircle;\r\n    }\r\n\r\n    if (isOnlyCompilationTested(result, templateStatus)) {\r\n        return faCheckCircle;\r\n    }\r\n\r\n    if (result?.score == undefined) {\r\n        return result?.successful ? faCheckCircle : faTimesCircle;\r\n    }\r\n    if (result.score >= MIN_SCORE_GREEN) {\r\n        return faCheckCircle;\r\n    }\r\n    return faTimesCircle;\r\n};\r\n\r\n/**\r\n * Returns true if the specified result is preliminary.\r\n * @param result the result. It must include a participation and exercise.\r\n */\r\nexport const resultIsPreliminary = (result: Result) => {\r\n    const exerciseType = result.participation?.exercise?.type;\r\n    if (exerciseType === ExerciseType.TEXT || exerciseType === ExerciseType.MODELING) {\r\n        return result.assessmentType === AssessmentType.AUTOMATIC_ATHENA;\r\n    } else\r\n        return (\r\n            result.participation &&\r\n            isProgrammingExerciseStudentParticipation(result.participation) &&\r\n            isResultPreliminary(result, result.participation.exercise as ProgrammingExercise)\r\n        );\r\n};\r\n\r\n/**\r\n * Returns true if the specified result is a student Participation\r\n * @param result the result.\r\n */\r\nexport const isStudentParticipation = (result: Result) => {\r\n    return Boolean(result.participation && result.participation.type !== ParticipationType.TEMPLATE && result.participation.type !== ParticipationType.SOLUTION);\r\n};\r\n\r\n/**\r\n * Returns true if the submission of the result is of type programming, is automatic, and\r\n * its build has failed.\r\n * @param result\r\n */\r\nexport const isBuildFailedAndResultIsAutomatic = (result: Result) => {\r\n    return isBuildFailed(result.submission) && !isManualResult(result);\r\n};\r\n\r\n/**\r\n * Returns true if the specified submission is a programming submissions that has a failed\r\n * build.\r\n * @param submission the submission\r\n */\r\nexport const isBuildFailed = (submission?: Submission) => {\r\n    const isProgrammingSubmission = submission && submission.submissionExerciseType === SubmissionExerciseType.PROGRAMMING;\r\n    return isProgrammingSubmission && (submission as ProgrammingSubmission).buildFailed;\r\n};\r\n\r\n/**\r\n * Returns true if the specified result is not automatic.\r\n * @param result the result.\r\n */\r\nexport const isManualResult = (result?: Result) => {\r\n    return result?.assessmentType !== AssessmentType.AUTOMATIC && result?.assessmentType !== AssessmentType.AUTOMATIC_ATHENA;\r\n};\r\n\r\n/**\r\n * Retrieves a list of test cases names contained in a result's feedback list.\r\n *\r\n * @param results list of results to extract the test case names from\r\n * @return list of extracted test case names\r\n */\r\nexport function getTestCaseNamesFromResults(results: ResultWithPointsPerGradingCriterion[]): string[] {\r\n    const testCasesNames: Set<string> = new Set();\r\n    results.forEach((result) => {\r\n        if (!result.result.feedbacks) {\r\n            return [];\r\n        }\r\n        result.result.feedbacks.forEach((feedback) => {\r\n            if (Feedback.isTestCaseFeedback(feedback)) {\r\n                testCasesNames.add(feedback.testCase?.testName ?? 'Test ' + (result.result.feedbacks!.indexOf(feedback) + 1));\r\n            }\r\n        });\r\n    });\r\n    return Array.from(testCasesNames);\r\n}\r\n\r\n/**\r\n * Extracts test case results from a given result and returns them.\r\n * If no feedback is found in the result an empty array is returned\r\n * @param result from which the test case results should be extracted\r\n * @param testCaseNames list containing the test names\r\n * @param withFeedback if true, the feedback's full text is included in case of failed test case\r\n */\r\nexport function getTestCaseResults(result: ResultWithPointsPerGradingCriterion, testCaseNames: string[], withFeedback?: boolean): TestCaseResult[] {\r\n    const testCaseResults: TestCaseResult[] = [];\r\n\r\n    testCaseNames.forEach((testName) => {\r\n        const feedback = getFeedbackByTestCase(testName, result.result.feedbacks);\r\n\r\n        let resultText;\r\n        if (feedback?.positive) {\r\n            resultText = 'Passed';\r\n        } else {\r\n            resultText = !!withFeedback && feedback?.detailText ? `Failed: \"${feedback.detailText}\"` : 'Failed';\r\n        }\r\n        testCaseResults.push({ testName, testResult: resultText } as TestCaseResult);\r\n    });\r\n    return testCaseResults;\r\n}\r\n\r\n/**\r\n * Retrieves a feedback object from a result's feedback list by a given test case name.\r\n *\r\n * If no feedback is found for the given test case name, null is returned.\r\n * @param feedbacks the list of result feedbacks to search in\r\n * @param testCase the name of the test case to search for\r\n */\r\nexport function getFeedbackByTestCase(testCase: string, feedbacks?: Feedback[]): Feedback | null {\r\n    if (!feedbacks) {\r\n        return null;\r\n    }\r\n    const i = feedbacks.findIndex((feedback) => feedback.testCase?.testName?.localeCompare(testCase) === 0);\r\n    return i !== -1 ? feedbacks[i] : null;\r\n}\r\n\r\n/**\r\n * Removes references from the {@link Participation}, {@link Submission}, and {@link Feedback} back to the result itself.\r\n *\r\n * To be used before sending data to the server.\r\n * Otherwise, no valid JSON can be constructed.\r\n *\r\n * @param result Some result.\r\n */\r\nexport function breakCircularResultBackReferences(result: Result) {\r\n    if (result.participation?.results) {\r\n        result.participation.results = [];\r\n    }\r\n    if (result.submission?.participation?.results) {\r\n        result.submission.participation.results = [];\r\n    }\r\n    if (result.submission?.results) {\r\n        result.submission.results = [];\r\n    }\r\n    if (result.feedbacks) {\r\n        result.feedbacks.forEach((feedback) => (feedback.result = undefined));\r\n    }\r\n}\r\n", "import { Result } from 'app/entities/result.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Participation, ParticipationType } from 'app/entities/participation/participation.model';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { SubmissionType } from 'app/entities/submission.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { isPracticeMode } from 'app/entities/participation/student-participation.model';\r\nimport { isAIResultAndFailed, isAIResultAndIsBeingProcessed, isAIResultAndProcessed, isAIResultAndTimedOut } from 'app/exercises/shared/result/result.utils';\r\n\r\nexport const createBuildPlanUrl = (template: string, projectKey: string, buildPlanId: string): string | undefined => {\r\n    if (template && projectKey && buildPlanId) {\r\n        return template.replace('{buildPlanId}', buildPlanId).replace('{projectKey}', projectKey);\r\n    }\r\n};\r\n\r\nexport const createCommitUrl = (\r\n    template: string | undefined,\r\n    projectKey: string | undefined,\r\n    participation: Participation | undefined,\r\n    submission: ProgrammingSubmission | undefined,\r\n): string | undefined => {\r\n    const projectKeyLowerCase = projectKey?.toLowerCase();\r\n    let repoSlugPostfix: string | undefined = undefined;\r\n    if (participation?.type === ParticipationType.PROGRAMMING) {\r\n        const studentParticipation = participation as ProgrammingExerciseStudentParticipation;\r\n        if (studentParticipation.repositoryUri) {\r\n            repoSlugPostfix = studentParticipation.participantIdentifier;\r\n            if (isPracticeMode(studentParticipation)) {\r\n                repoSlugPostfix = 'practice-' + repoSlugPostfix;\r\n            }\r\n        }\r\n    } else if (participation?.type === ParticipationType.TEMPLATE) {\r\n        // In case of a test submisson, we need to use the test repository\r\n        repoSlugPostfix = submission?.type === SubmissionType.TEST ? 'tests' : 'exercise';\r\n    } else if (participation?.type === ParticipationType.SOLUTION) {\r\n        // In case of a test submisson, we need to use the test repository\r\n        repoSlugPostfix = submission?.type === SubmissionType.TEST ? 'tests' : 'solution';\r\n    }\r\n    if (repoSlugPostfix && template && projectKeyLowerCase) {\r\n        return template\r\n            .replace('{projectKey}', projectKeyLowerCase)\r\n            .replace('{repoSlug}', projectKeyLowerCase + '-' + repoSlugPostfix)\r\n            .replace('{commitHash}', submission?.commitHash ?? '');\r\n    }\r\n};\r\n\r\n/**\r\n * A result is preliminary if:\r\n * - The programming exercise buildAndTestAfterDueDate is set\r\n * - The submission date of the result / result completionDate is before the buildAndTestAfterDueDate\r\n *\r\n * Note: We check some error cases in this method as a undefined value for the given parameters, because the clients using this method might unwillingly provide them (result component).\r\n *\r\n * @param latestResult Result with attached Submission - if submission is undefined, method will use the result completionDate as a reference.\r\n * @param programmingExercise ProgrammingExercise\r\n */\r\nexport const isResultPreliminary = (latestResult: Result, programmingExercise?: ProgrammingExercise) => {\r\n    if (!programmingExercise) {\r\n        return false;\r\n    }\r\n    if (isAIResultAndProcessed(latestResult)) {\r\n        return true;\r\n    }\r\n    if (isAIResultAndIsBeingProcessed(latestResult) || isAIResultAndTimedOut(latestResult) || isAIResultAndFailed(latestResult)) {\r\n        return false;\r\n    }\r\n    if (latestResult.participation?.type === ParticipationType.PROGRAMMING && isPracticeMode(latestResult.participation)) {\r\n        return false;\r\n    }\r\n\r\n    let resultCompletionDate = latestResult.completionDate;\r\n    // We use the result completion date\r\n    if (!resultCompletionDate) {\r\n        // in the unlikely case the completion date is not set yet (this should not happen), it is preliminary\r\n        return true;\r\n    }\r\n    // If not a dayjs date already, try to convert it (e.g. when it is a string).\r\n    if (resultCompletionDate && !dayjs.isDayjs(resultCompletionDate)) {\r\n        resultCompletionDate = dayjs(resultCompletionDate);\r\n    }\r\n    // When the result completionDate is invalid, we have to return here (edge case, every result should have a valid completionDate).\r\n    if (!resultCompletionDate.isValid()) {\r\n        return true;\r\n    }\r\n    // If an exercise's assessment type is not automatic the last result is supposed to be manually assessed\r\n    if (programmingExercise.assessmentType !== AssessmentType.AUTOMATIC) {\r\n        // either the semi-automatic result is not yet available as last result (then it is preliminary), or it is already available (then it still can be changed)\r\n        if (programmingExercise.assessmentDueDate) {\r\n            return dayjs().isBefore(dayjs(programmingExercise.assessmentDueDate));\r\n        }\r\n        // in case the assessment due date is not set, the assessment type of the latest result is checked. If it is automatic the result is still preliminary.\r\n        return latestResult.assessmentType === AssessmentType.AUTOMATIC;\r\n    }\r\n    // When the due date for the automatic building and testing is available but not reached, the result is preliminary\r\n    if (programmingExercise.buildAndTestStudentSubmissionsAfterDueDate) {\r\n        return resultCompletionDate.isBefore(dayjs(programmingExercise.buildAndTestStudentSubmissionsAfterDueDate));\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const isProgrammingExerciseStudentParticipation = (participation: Participation) => {\r\n    return participation && participation.type === ParticipationType.PROGRAMMING;\r\n};\r\n\r\nexport const isProgrammingExerciseParticipation = (participation: Participation | undefined): boolean => {\r\n    return (participation?.type && [ParticipationType.PROGRAMMING, ParticipationType.TEMPLATE, ParticipationType.SOLUTION].includes(participation.type)) || false;\r\n};\r\n\r\n/**\r\n * The due date has passed if:\r\n * - The dueDate is set and the buildAndTestAfterDueDate is not set and the dueDate has passed.\r\n * - The dueDate is set and the buildAndTestAfterDueDate is set and the buildAndTestAfterDueDate has passed.\r\n *\r\n * @param exercise\r\n */\r\nexport const hasDueDatePassed = (exercise: ProgrammingExercise) => {\r\n    // If there is no due date, the due date can't pass.\r\n    if (!exercise.dueDate && !exercise.buildAndTestStudentSubmissionsAfterDueDate) {\r\n        return false;\r\n    }\r\n    // The first priority is the buildAndTestAfterDueDate if it is set.\r\n    let referenceDate = exercise.buildAndTestStudentSubmissionsAfterDueDate || exercise.dueDate!;\r\n    if (!dayjs.isDayjs(referenceDate)) {\r\n        referenceDate = dayjs(referenceDate);\r\n    }\r\n    return referenceDate.isBefore(dayjs());\r\n};\r\n"],
  "mappings": "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",
  "names": ["hasParticipationChanged", "changes", "participation", "currentValue", "previousValue", "id", "hasTemplateParticipationChanged", "templateParticipation", "hasSolutionParticipationChanged", "solutionParticipation", "isProgrammingOrQuiz", "exercise", "getExercise", "type", "ExerciseType", "PROGRAMMING", "QUIZ", "isModelingOrTextOrFileUpload", "MODELING", "TEXT", "FILE_UPLOAD", "isParticipationInDueTime", "participation", "exercise", "dueDate", "submissions", "undefined", "length", "submission", "submissionDate", "dayjs", "isBefore", "getExerciseDueDate", "getLatestResultOfStudentParticipation", "showUngradedResults", "showAthenaPreliminaryFeedback", "results", "_orderBy", "latestResult", "find", "result", "rated", "isAIResultAndIsBeingProcessed", "__spreadProps", "__spreadValues", "ResultTemplateStatus", "MissingResultInformation", "initializedResultWithScore", "result", "score", "undefined", "addParticipationToResult", "participation", "ratingResult", "cloneDeep", "ratingParticipation", "exercise", "studentParticipations", "getManualUnreferencedFeedback", "feedbacks", "filter", "feedbackElement", "reference", "type", "FeedbackType", "MANUAL_UNREFERENCED", "getUnreferencedFeedback", "AUTOMATIC", "isAIResultAndFailed", "isAthenaAIResult", "successful", "isAIResultAndTimedOut", "completionDate", "dayjs", "isAfter", "isAIResultAndProcessed", "isAIResultAndIsBeingProcessed", "isSameOrBefore", "assessmentType", "AssessmentType", "AUTOMATIC_ATHENA", "evaluateTemplateStatus", "isBuilding", "missingResultInfo", "NONE", "isQueued", "HAS_RESULT", "NO_RESULT", "MISSING", "isModelingOrTextOrFileUpload", "inDueTime", "isParticipationInDueTime", "dueDate", "getExerciseDueDate", "assessmentDueDate", "isBefore", "isManualResult", "IS_GENERATING_FEEDBACK", "FEEDBACK_GENERATION_FAILED", "SUBMITTED_WAITING_FOR_GRADING", "isSameOrAfter", "SUBMITTED", "LATE", "LATE_NO_FEEDBACK", "isProgrammingOrQuiz", "IS_QUEUED", "IS_BUILDING", "FEEDBACK_GENERATION_TIMED_OUT", "isOnlyCompilationTested", "templateStatus", "zeroTests", "testCaseCount", "isProgrammingExercise", "ExerciseType", "PROGRAMMING", "isBuildFailed", "submission", "getTextColorClass", "isBuildFailedAndResultIsAutomatic", "resultIsPreliminary", "MIN_SCORE_GREEN", "MIN_SCORE_ORANGE", "getResultIconClass", "faCircleNotch", "faCheckCircle", "faTimesCircle", "faQuestionCircle", "exerciseType", "TEXT", "MODELING", "isProgrammingExerciseStudentParticipation", "isResultPreliminary", "isStudentParticipation", "Boolean", "ParticipationType", "TEMPLATE", "SOLUTION", "submissionExerciseType", "buildFailed", "getTestCaseNamesFromResults", "results", "testCasesNames", "Set", "forEach", "feedback", "Feedback", "isTestCaseFeedback", "add", "testCase", "testName", "indexOf", "Array", "from", "getTestCaseResults", "testCaseNames", "withFeedback", "testCaseResults", "getFeedbackByTestCase", "resultText", "positive", "detailText", "push", "testResult", "i", "findIndex", "localeCompare", "breakCircularResultBackReferences", "createBuildPlanUrl", "template", "projectKey", "buildPlanId", "replace", "createCommitUrl", "participation", "submission", "projectKeyLowerCase", "toLowerCase", "repoSlugPostfix", "type", "ParticipationType", "PROGRAMMING", "studentParticipation", "repositoryUri", "participantIdentifier", "isPracticeMode", "TEMPLATE", "SOLUTION", "commitHash", "isResultPreliminary", "latestResult", "programmingExercise", "isAIResultAndProcessed", "isAIResultAndIsBeingProcessed", "isAIResultAndTimedOut", "isAIResultAndFailed", "resultCompletionDate", "completionDate", "dayjs", "isDayjs", "isValid", "assessmentType", "AssessmentType", "AUTOMATIC", "assessmentDueDate", "isBefore", "buildAndTestStudentSubmissionsAfterDueDate", "isProgrammingExerciseStudentParticipation", "isProgrammingExerciseParticipation", "includes", "hasDueDatePassed", "exercise", "dueDate", "referenceDate"]
}
