{
  "version": 3,
  "sources": ["src/main/webapp/app/admin/system-notification-management/system-notification-management-update.component.ts", "src/main/webapp/app/admin/system-notification-management/system-notification-management-update.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { faBan, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { SystemNotification, SystemNotificationType } from 'app/entities/system-notification.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { AdminSystemNotificationService } from 'app/shared/notification/system-notification/admin-system-notification.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-system-notification-management-update',\r\n    templateUrl: './system-notification-management-update.component.html',\r\n    imports: [FormsModule, ReactiveFormsModule, TranslateDirective, FormDateTimePickerComponent, FaIconComponent, ArtemisTranslatePipe],\r\n})\r\nexport class SystemNotificationManagementUpdateComponent implements OnInit {\r\n    private systemNotificationService = inject(AdminSystemNotificationService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n\r\n    notification: SystemNotification;\r\n    isSaving: boolean;\r\n\r\n    systemNotificationTypes = [\r\n        { name: 'INFO', value: SystemNotificationType.INFO },\r\n        { name: 'WARNING', value: SystemNotificationType.WARNING },\r\n    ];\r\n\r\n    form: FormGroup;\r\n\r\n    // Icons\r\n    faSave = faSave;\r\n    faBan = faBan;\r\n\r\n    /**\r\n     * Loads notification from route data\r\n     */\r\n    ngOnInit() {\r\n        this.isSaving = false;\r\n        // create a new notification, and only overwrite it if we fetch a notification to edit\r\n        this.notification = new SystemNotification();\r\n        this.route.parent!.data.subscribe(({ notification }) => {\r\n            if (notification) {\r\n                this.notification = notification.body ? notification.body : notification;\r\n            }\r\n        });\r\n\r\n        this.form = new FormGroup(\r\n            {\r\n                id: new FormControl(this.notification.id),\r\n                title: new FormControl(this.notification.title, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]),\r\n                text: new FormControl(this.notification.text),\r\n                type: new FormControl(this.notification.type, [Validators.required]),\r\n                notificationDate: new FormControl(this.notification.notificationDate, [Validators.required]),\r\n                expireDate: new FormControl(this.notification.expireDate, [Validators.required]),\r\n            },\r\n            { validators: this.validateDates.bind(this) },\r\n        );\r\n    }\r\n\r\n    private validateDates() {\r\n        const notificationDateControl = this.form?.get('notificationDate');\r\n        const expireDateControl = this.form?.get('expireDate');\r\n        const notificationDate = this.form?.get('notificationDate')?.value as dayjs.Dayjs | null;\r\n        const expireDate = this.form?.get('expireDate')?.value as dayjs.Dayjs | null;\r\n\r\n        if (!notificationDate || !expireDate || expireDate.isAfter(notificationDate)) {\r\n            [notificationDateControl, expireDateControl].forEach((control) => {\r\n                const errors = { ...(control?.errors ?? {}) };\r\n                delete errors.expireMustBeAfterNotification;\r\n                const isEmpty = Object.keys(errors).length === 0;\r\n                control?.setErrors(isEmpty ? null : errors);\r\n            });\r\n        } else {\r\n            [notificationDateControl, expireDateControl].forEach((control) => {\r\n                const errors = { ...(control?.errors ?? {}), expireMustBeAfterNotification: true };\r\n                control?.setErrors(errors);\r\n            });\r\n        }\r\n    }\r\n\r\n    get expireDate() {\r\n        return this.form?.get('expireDate');\r\n    }\r\n\r\n    /**\r\n     * Returns to the overview of system notifications\r\n     */\r\n    goToOverview() {\r\n        this.router.navigate(['admin', 'system-notification-management']);\r\n    }\r\n\r\n    /**\r\n     * Either creates or updates the notification, when the form is submitted\r\n     */\r\n    save() {\r\n        this.isSaving = true;\r\n        const toSave = {\r\n            ...this.notification,\r\n            ...this.form.getRawValue(),\r\n        };\r\n        if (this.notification.id) {\r\n            this.systemNotificationService.update(toSave).subscribe({\r\n                next: () => this.onSaveSuccess(),\r\n                error: () => this.onSaveError(),\r\n            });\r\n        } else {\r\n            this.systemNotificationService.create(toSave).subscribe({\r\n                next: () => this.onSaveSuccess(),\r\n                error: () => this.onSaveError(),\r\n            });\r\n        }\r\n    }\r\n\r\n    private onSaveSuccess() {\r\n        this.isSaving = false;\r\n        this.goToOverview();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        <form name=\"editForm\" role=\"form\" (ngSubmit)=\"save()\" #editForm=\"ngForm\" [formGroup]=\"form\">\r\n            <h2 id=\"myNotificationLabel\" jhiTranslate=\"artemisApp.systemNotification.createOrEditLabel\"></h2>\r\n            <div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"title\" class=\"form-control-label\" jhiTranslate=\"artemisApp.systemNotification.title\"></label>\r\n                    <input id=\"title\" type=\"text\" class=\"form-control\" name=\"title\" formControlName=\"title\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"text\" class=\"form-control-label\" jhiTranslate=\"artemisApp.systemNotification.text\"></label>\r\n                    <input id=\"text\" type=\"text\" class=\"form-control\" name=\"text\" formControlName=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"type\" jhiTranslate=\"artemisApp.systemNotification.type\"></label>\r\n                    <select id=\"type\" class=\"form-select\" name=\"type\" formControlName=\"type\">\r\n                        @for (systemNotificationType of systemNotificationTypes; track systemNotificationType) {\r\n                            <option [value]=\"systemNotificationType.value\">{{ systemNotificationType.name }}</option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <jhi-date-time-picker\r\n                        [labelName]=\"'artemisApp.systemNotification.notificationDate' | artemisTranslate\"\r\n                        formControlName=\"notificationDate\"\r\n                        [shouldDisplayTimeZoneWarning]=\"false\"\r\n                        name=\"notificationDate\"\r\n                    />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <jhi-date-time-picker\r\n                        [labelName]=\"'artemisApp.systemNotification.expireDate' | artemisTranslate\"\r\n                        formControlName=\"expireDate\"\r\n                        [shouldDisplayTimeZoneWarning]=\"false\"\r\n                        name=\"expireDate\"\r\n                    />\r\n                    @if (expireDate?.errors?.expireMustBeAfterNotification) {\r\n                        <span class=\"text-danger\" jhiTranslate=\"error.systemNotificationNeedsNotificationBeforeExpiration\"></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button id=\"cancelButton\" type=\"button\" class=\"btn btn-secondary\" (click)=\"goToOverview()\">\r\n                    <fa-icon [icon]=\"faBan\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span>\r\n                </button>\r\n                <button id=\"saveButton\" type=\"submit\" [disabled]=\"editForm.form.invalid || isSaving\" class=\"btn btn-primary\">\r\n                    <fa-icon [icon]=\"faSave\" />&nbsp;<span jhiTranslate=\"entity.action.save\"></span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "systemNotificationType_r2", "value", "\u0275\u0275textInterpolate", "name", "\u0275\u0275element", "SystemNotificationManagementUpdateComponent", "systemNotificationService", "inject", "AdminSystemNotificationService", "route", "ActivatedRoute", "router", "Router", "notification", "isSaving", "systemNotificationTypes", "form", "faSave", "faBan", "ngOnInit", "SystemNotification", "parent", "data", "subscribe", "body", "FormGroup", "id", "FormControl", "title", "Validators", "required", "minLength", "maxLength", "text", "type", "notificationDate", "expireDate", "validators", "validateDates", "bind", "notificationDateControl", "get", "expireDateControl", "isAfter", "forEach", "control", "errors", "__spreadValues", "expireMustBeAfterNotification", "isEmpty", "Object", "keys", "length", "setErrors", "__spreadProps", "goToOverview", "navigate", "save", "toSave", "getRawValue", "update", "next", "onSaveSuccess", "error", "onSaveError", "create", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275repeaterCreate", "SystemNotificationManagementUpdateComponent_For_32_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275template", "SystemNotificationManagementUpdateComponent_Conditional_46_Template", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "editForm_r3", "invalid", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "FormDateTimePickerComponent", "FaIconComponent", "ArtemisTranslatePipe", "encapsulation"]
}
