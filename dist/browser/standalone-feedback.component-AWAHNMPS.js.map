{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/feedback/standalone-feedback/standalone-feedback.component.ts", "src/main/webapp/app/exercises/shared/feedback/standalone-feedback/standalone-feedback.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ExerciseDetailsType, ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { ExerciseCacheService } from 'app/exercises/shared/exercise/exercise-cache.service';\r\nimport { ResultTemplateStatus, evaluateTemplateStatus } from 'app/exercises/shared/result/result.utils';\r\nimport { FeedbackComponent } from '../feedback.component';\r\n\r\n@Component({\r\n    selector: 'jhi-standalone-feedback',\r\n    templateUrl: './standalone-feedback.component.html',\r\n    styleUrls: ['./../feedback.scss', 'standalone-feedback.scss'],\r\n    imports: [FeedbackComponent],\r\n})\r\nexport class StandaloneFeedbackComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private exerciseService = inject(ExerciseService);\r\n    private exerciseCacheService = inject(ExerciseCacheService, { optional: true });\r\n\r\n    exercise?: Exercise;\r\n    result?: Result;\r\n\r\n    showMissingAutomaticFeedbackInformation = false;\r\n    messageKey?: string;\r\n    exerciseType?: ExerciseType;\r\n\r\n    latestDueDate?: dayjs.Dayjs;\r\n\r\n    ngOnInit(): void {\r\n        this.route.params.subscribe((params) => {\r\n            const exerciseId = parseInt(params['exerciseId'], 10);\r\n            const participationId = parseInt(params['participationId'], 10);\r\n            const resultId = parseInt(params['resultId'], 10);\r\n\r\n            this.exerciseService.getExerciseDetails(exerciseId).subscribe((exerciseResponse: HttpResponse<ExerciseDetailsType>) => {\r\n                this.exercise = exerciseResponse.body!.exercise;\r\n                const participation = this.exercise?.studentParticipations?.find((participation) => participation.id === participationId);\r\n                if (participation) {\r\n                    participation.exercise = this.exercise;\r\n                }\r\n\r\n                const relevantResult = participation?.results?.find((result) => result.id == resultId);\r\n                if (relevantResult) {\r\n                    relevantResult.participation = participation;\r\n                }\r\n\r\n                this.result = relevantResult;\r\n\r\n                // We set isBuilding here to false. It is the mobile applications responsibility to make the user aware if a participation is being built\r\n                const templateStatus = evaluateTemplateStatus(this.exercise, participation, relevantResult, false);\r\n                if (templateStatus == ResultTemplateStatus.MISSING) {\r\n                    this.messageKey = 'artemisApp.result.notLatestSubmission';\r\n                } else {\r\n                    this.messageKey = undefined;\r\n                }\r\n\r\n                this.setup();\r\n            });\r\n\r\n            (this.exerciseCacheService ?? this.exerciseService).getLatestDueDate(exerciseId).subscribe((latestDueDate) => {\r\n                this.latestDueDate = latestDueDate;\r\n                this.setup();\r\n            });\r\n        });\r\n    }\r\n\r\n    private setup() {\r\n        if (this.exercise && this.result) {\r\n            this.exerciseType = this.exercise.type!;\r\n\r\n            if (this.latestDueDate) {\r\n                this.showMissingAutomaticFeedbackInformation = dayjs().isBefore(this.latestDueDate);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "@if (exercise && result && exerciseType) {\r\n    <jhi-result-detail\r\n        [exercise]=\"exercise\"\r\n        [result]=\"result\"\r\n        [showScoreChart]=\"true\"\r\n        [exerciseType]=\"exerciseType\"\r\n        [latestDueDate]=\"latestDueDate\"\r\n        [messageKey]=\"messageKey\"\r\n        [showMissingAutomaticFeedbackInformation]=\"showMissingAutomaticFeedbackInformation\"\r\n        class=\"modal-padding\"\r\n    />\r\n}\r\n"],
  "mappings": "i2DCCIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,oBAAA,CAAA,EAUJD,EAAA,EAAA;CAAA,kBATQE,EAAA,EAAAC,EAAA,WAAAC,EAAAC,QAAA,EAAqB,SAAAD,EAAAE,MAAA,EACJ,iBAAA,EAAA,EACM,eAAAF,EAAAG,YAAA,EACM,gBAAAH,EAAAI,aAAA,EACE,aAAAJ,EAAAK,UAAA,EACN,0CAAAL,EAAAM,uCAAA,GDUjC,IAAaC,GAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAC5BC,MAAQC,EAAOC,CAAc,EAC7BC,gBAAkBF,EAAOG,CAAe,EACxCC,qBAAuBJ,EAAOK,EAAsB,CAAEC,SAAU,EAAI,CAAE,EAE9Ed,SACAC,OAEAI,wCAA0C,GAC1CD,WACAF,aAEAC,cAEAY,UAAQ,CACJ,KAAKR,MAAMS,OAAOC,UAAWD,GAAU,CACnC,IAAME,EAAaC,SAASH,EAAO,WAAe,EAAE,EAC9CI,EAAkBD,SAASH,EAAO,gBAAoB,EAAE,EACxDK,EAAWF,SAASH,EAAO,SAAa,EAAE,EAEhD,KAAKN,gBAAgBY,mBAAmBJ,CAAU,EAAED,UAAWM,GAAuD,CAClH,KAAKvB,SAAWuB,EAAiBC,KAAMxB,SACvC,IAAMyB,EAAgB,KAAKzB,UAAU0B,uBAAuBC,KAAMF,GAAkBA,EAAcG,KAAOR,CAAe,EACpHK,IACAA,EAAczB,SAAW,KAAKA,UAGlC,IAAM6B,EAAiBJ,GAAeK,SAASH,KAAM1B,GAAWA,EAAO2B,IAAMP,CAAQ,EACjFQ,IACAA,EAAeJ,cAAgBA,GAGnC,KAAKxB,OAAS4B,EAGSE,EAAuB,KAAK/B,SAAUyB,EAAeI,EAAgB,EAAK,GAC3EG,EAAqBC,QACvC,KAAK7B,WAAa,wCAElB,KAAKA,WAAa8B,OAGtB,KAAKC,MAAK,CACd,CAAC,GAEA,KAAKvB,sBAAwB,KAAKF,iBAAiB0B,iBAAiBlB,CAAU,EAAED,UAAWd,GAAiB,CACzG,KAAKA,cAAgBA,EACrB,KAAKgC,MAAK,CACd,CAAC,CACL,CAAC,CACL,CAEQA,OAAK,CACL,KAAKnC,UAAY,KAAKC,SACtB,KAAKC,aAAe,KAAKF,SAASqC,KAE9B,KAAKlC,gBACL,KAAKE,wCAA0CiC,EAAK,EAAGC,SAAS,KAAKpC,aAAa,GAG9F,4CA5DSG,EAA2B,2BAA3BA,EAA2BkC,UAAA,CAAA,CAAA,yBAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,WAAA,SAAA,iBAAA,eAAA,gBAAA,aAAA,yCAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCjBxCE,EAAA,EAAAC,EAAA,EAAA,CAAA,OAAAC,EAAAH,EAAA9C,UAAA8C,EAAA7C,QAAA6C,EAAA5C,aAAA,EAAA,EAAA,iBDecgD,CAAiB,EAAAC,OAAA,CAAA,y3BAAA,kGAAA,CAAA,CAAA,SAElB7C,CAA2B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "result", "exerciseType", "latestDueDate", "messageKey", "showMissingAutomaticFeedbackInformation", "StandaloneFeedbackComponent", "route", "inject", "ActivatedRoute", "exerciseService", "ExerciseService", "exerciseCacheService", "ExerciseCacheService", "optional", "ngOnInit", "params", "subscribe", "exerciseId", "parseInt", "participationId", "resultId", "getExerciseDetails", "exerciseResponse", "body", "participation", "studentParticipations", "find", "id", "relevantResult", "results", "evaluateTemplateStatus", "ResultTemplateStatus", "MISSING", "undefined", "setup", "getLatestDueDate", "type", "dayjs", "isBefore", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "StandaloneFeedbackComponent_Conditional_0_Template", "\u0275\u0275conditional", "FeedbackComponent", "styles"]
}
