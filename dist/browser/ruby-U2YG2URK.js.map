{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [[\"(\", \")\"], [\"{\", \"}\"], [\"[\", \"]\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\"__LINE__\", \"__ENCODING__\", \"__FILE__\", \"BEGIN\", \"END\", \"alias\", \"and\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"end\", \"ensure\", \"for\", \"false\", \"if\", \"in\", \"module\", \"next\", \"nil\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\"],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\"require\", \"public\", \"private\", \"include\", \"extend\", \"attr_reader\", \"protected\", \"private_class_method\", \"protected_class_method\", \"new\"],\n  // these are closed by 'end' (if, while and until are handled separately)\n  declarations: [\"module\", \"class\", \"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\"^\", \"&\", \"|\", \"<=>\", \"==\", \"===\", \"!~\", \"=~\", \">\", \">=\", \"<\", \"<=\", \"<<\", \">>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"~\", \"+@\", \"-@\", \"[]\", \"[]=\", \"`\", \"+=\", \"-=\", \"*=\", \"**=\", \"/=\", \"^=\", \"%=\", \"<<=\", \">>=\", \"&=\", \"&&=\", \"||=\", \"|=\"],\n  brackets: [{\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  // escape sequences\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    // Main entry.\n    // root.<decl> where decl is the current opening declaration (like 'class')\n    root: [\n    // identifiers and keywords\n    // most complexity here is due to matching 'end' correctly with declarations.\n    // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n    [/^(\\s*)([a-z_]\\w*[!?=]?)/, [\"white\", {\n      cases: {\n        \"for|until|while\": {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@declarations\": {\n          token: \"keyword.$2\",\n          next: \"@root.$2\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }]], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        \"if|unless|while|until\": {\n          token: \"keyword.$0x\",\n          next: \"@modifier.$0x\"\n        },\n        for: {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@linedecls\": {\n          token: \"keyword.$0\",\n          next: \"@root.$0\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"],\n    // constant\n    [/\\$[\\w]*/, \"global.constant\"],\n    // global\n    [/@[\\w]*/, \"namespace.instance.identifier\"],\n    // instance\n    [/@@@[\\w]*/, \"namespace.class.identifier\"],\n    // class\n    // here document\n    [/<<[-~](@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/[ \\t\\r\\n]+<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/^<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }],\n    // whitespace\n    {\n      include: \"@whitespace\"\n    },\n    // strings\n    [/\"/, {\n      token: \"string.d.delim\",\n      next: '@dstring.d.\"'\n    }], [/'/, {\n      token: \"string.sq.delim\",\n      next: \"@sstring.sq\"\n    }],\n    // % literals. For efficiency, rematch in the 'pstring' state\n    [/%([rsqxwW]|Q?)/, {\n      token: \"@rematch\",\n      next: \"pstring\"\n    }],\n    // commands and symbols\n    [/`/, {\n      token: \"string.x.delim\",\n      next: \"@dstring.x.`\"\n    }], [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"], [/:\"/, {\n      token: \"string.s.delim\",\n      next: '@dstring.s.\"'\n    }], [/:'/, {\n      token: \"string.s.delim\",\n      next: \"@sstring.s\"\n    }],\n    // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n    [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, {\n      token: \"regexp.delim\",\n      next: \"@regexp\"\n    }],\n    // delimiters and operators\n    [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@keywordops\": \"keyword\",\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }], [/[;,]/, \"delimiter\"],\n    // numbers\n    [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"], [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"], [/0[bB][01](_?[01])*/, \"number.binary\"], [/0[dD]@decpart/, \"number\"], [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\n      cases: {\n        $1: \"number.float\",\n        \"@default\": \"number\"\n      }\n    }]],\n    // used to not treat a 'do' as a block opener if it occurs on the same\n    // line as a 'do' statement: 'while|until|for'\n    // dodecl.<decl> where decl is the declarations started, like 'while'\n    dodecl: [[/^/, {\n      token: \"\",\n      switchTo: \"@root.$S2\"\n    }],\n    // get out of do-skipping mode on a new line\n    [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        // end on same line\n        do: {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        // do on same line: not an open bracket here\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        // other declaration on same line: rematch\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    // used to prevent potential modifiers ('if|until|while|unless') to match\n    // with 'end' keywords.\n    // modifier.<decl>x where decl is the declaration starter, like 'if'\n    modifier: [[/^/, \"\", \"@pop\"],\n    // it was a modifier: get out of modifier mode on a new line\n    [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        // end on same line\n        \"then|else|elsif|do\": {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        // real declaration and not a modifier\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        // other declaration => not a modifier\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    // single quote strings (also used for symbols)\n    // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\n    sstring: [[/[^\\\\']+/, \"string.$S2\"], [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.invalid\"], [/'/, {\n      token: \"string.$S2.delim\",\n      next: \"@pop\"\n    }]],\n    // double quoted \"string\".\n    // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n    // and delim is the ending delimiter (\" or `)\n    dstring: [[/[^\\\\`\"#]+/, \"string.$S2\"], [/#/, \"string.$S2.escape\", \"@interpolated\"], [/\\\\$/, \"string.$S2.escape\"], [/@escapes/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape.invalid\"], [/[`\"]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    // literal documents\n    // heredoc.<close> where close is the closing delimiter\n    heredoc: [[/^(\\s*)(@heredelim)$/, {\n      cases: {\n        \"$2==$S2\": [\"string.heredoc\", {\n          token: \"string.heredoc.delimiter\",\n          next: \"@pop\"\n        }],\n        \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n      }\n    }], [/.*/, \"string.heredoc\"]],\n    // interpolated sequence\n    interpolated: [[/\\$\\w*/, \"global.constant\", \"@pop\"], [/@\\w*/, \"namespace.class.identifier\", \"@pop\"], [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"], [/[{]/, {\n      token: \"string.escape.curly\",\n      switchTo: \"@interpolated_compound\"\n    }], [\"\", \"\", \"@pop\"]\n    // just a # is interpreted as a #\n    ],\n    // any code\n    interpolated_compound: [[/[}]/, {\n      token: \"string.escape.curly\",\n      next: \"@pop\"\n    }], {\n      include: \"@root\"\n    }],\n    // %r quoted regexp\n    // pregexp.<open>.<close> where open/close are the open/close delimiter\n    pregexp: [{\n      include: \"@whitespace\"\n    },\n    // turns out that you can quote using regex control characters, aargh!\n    // for example; %r|kgjgaj| is ok (even though | is used for alternation)\n    // so, we need to match those first\n    [/[^\\(\\{\\[\\\\]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"regexp.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S2\": {\n          token: \"regexp.delim\",\n          next: \"@push\"\n        },\n        // nested delimiters are allowed..\n        \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n        \"~@regexpctl\": \"regexp.escape.control\",\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexcontrol\"\n    }],\n    // We match regular expression quite precisely\n    regexp: [{\n      include: \"@regexcontrol\"\n    }, [/[^\\\\\\/]/, \"regexp\"], [\"/[ixmp]*\", {\n      token: \"regexp.delim\"\n    }, \"@pop\"]],\n    regexcontrol: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\", \"@brackets.regexp.escape.control\"]], [/(\\[)(\\^?)/, [\"@brackets.regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]], [/\\(\\?#/, {\n      token: \"regexp.escape.control\",\n      next: \"@regexpcomment\"\n    }], [/[()]/, \"@brackets.regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/#/, \"regexp.escape\", \"@interpolated\"]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]],\n    regexpcomment: [[/[^)]+/, \"comment\"], [/\\)/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\"\n    }]],\n    // % quoted strings\n    // A bit repetitive since we need to often special case the kind of ending delimiter\n    pstring: [[/%([qws])\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.(.)\"\n    }], [/%([qws])\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.[.]\"\n    }], [/%([qws])\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.{.}\"\n    }], [/%([qws])</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.<.>\"\n    }], [/%([qws])(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.$2.$2\"\n    }], [/%r\\(/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.(.)\"\n    }], [/%r\\[/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.[.]\"\n    }], [/%r\\{/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.{.}\"\n    }], [/%r</, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.<.>\"\n    }], [/%r(@delim)/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.$1.$1\"\n    }], [/%(x|W|Q?)\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.(.)\"\n    }], [/%(x|W|Q?)\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.[.]\"\n    }], [/%(x|W|Q?)\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.{.}\"\n    }], [/%(x|W|Q?)</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.<.>\"\n    }], [/%(x|W|Q?)(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.$2.$2\"\n    }], [/%([rqwsxW]|Q?)./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }],\n    // recover\n    [/./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }]\n    // recover\n    ],\n    // non-expanded quoted string.\n    // qstring.<kind>.<open>.<close>\n    //  kind = q|w|s  (single quote, array, symbol)\n    //  open = open delimiter\n    //  close = close delimiter\n    qstring: [[/\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape\"], [/./, {\n      cases: {\n        \"$#==$S4\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@push\"\n        },\n        // nested delimiters are allowed..\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    // expanded quoted string.\n    // qqstring.<kind>.<open>.<close>\n    //  kind = Q|W|x  (double quote, array, command)\n    //  open = open delimiter\n    //  close = close delimiter\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], {\n      include: \"@qstring\"\n    }],\n    // whitespace & comments\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/^\\s*=begin\\b/, \"comment\", \"@comment\"], [/#.*$/, \"comment\"]],\n    comment: [[/[^=]+/, \"comment\"], [/^\\s*=begin\\b/, \"comment.invalid\"],\n    // nested comment\n    [/^\\s*=end\\b.*/, \"comment\", \"@pop\"], [/[=]/, \"comment\"]]\n  }\n};\nexport { conf, language };"],"mappings":"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","names":["conf","language"],"x_google_ignoreList":[0]}