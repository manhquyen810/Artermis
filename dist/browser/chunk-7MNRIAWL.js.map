{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/file-upload/participate/file-upload-submission.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FileUploadSubmission } from 'app/entities/file-upload-submission.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { stringifyCircular } from 'app/shared/util/utils';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\n\r\nexport type EntityResponseType = HttpResponse<FileUploadSubmission>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileUploadSubmissionService {\r\n    private http = inject(HttpClient);\r\n    private submissionService = inject(SubmissionService);\r\n\r\n    /**\r\n     * Updates File Upload submission on the server\r\n     * @param fileUploadSubmission that will be updated on the server\r\n     * @param exerciseId id of the exercise\r\n     * @param submissionFile the file submitted that will for the exercise\r\n     */\r\n    update(fileUploadSubmission: FileUploadSubmission, exerciseId: number, submissionFile: File): Observable<HttpResponse<FileUploadSubmission>> {\r\n        const copy = this.submissionService.convert(fileUploadSubmission);\r\n        const formData = new FormData();\r\n        const submissionBlob = new Blob([stringifyCircular(copy)], { type: 'application/json' });\r\n        formData.append('file', submissionFile);\r\n        formData.append('submission', submissionBlob);\r\n        return this.http\r\n            .post<FileUploadSubmission>(`api/fileupload/exercises/${exerciseId}/file-upload-submissions`, formData, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.submissionService.convertSubmissionResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Returns File Upload submission from the server\r\n     * @param fileUploadSubmissionId the id of the File Upload submission\r\n     * @param correctionRound\r\n     * @param resultId\r\n     */\r\n    get(fileUploadSubmissionId: number, correctionRound = 0, resultId?: number): Observable<HttpResponse<FileUploadSubmission>> {\r\n        const url = `api/fileupload/file-upload-submissions/${fileUploadSubmissionId}`;\r\n        let params = new HttpParams();\r\n        if (resultId && resultId > 0) {\r\n            // in case resultId is set, we do not need the correction round\r\n            params = params.set('resultId', resultId!.toString());\r\n        } else {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        return this.http\r\n            .get<FileUploadSubmission>(url, { params, observe: 'response' })\r\n            .pipe(map((res: HttpResponse<FileUploadSubmission>) => this.submissionService.convertSubmissionResponseFromServer(res)));\r\n    }\r\n\r\n    /**\r\n     * Returns File Upload submissions for exercise from the server\r\n     * @param exerciseId the id of the exercise\r\n     * @param req request parameters\r\n     * @param correctionRound for which to get the Submissions\r\n     */\r\n    getSubmissions(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }, correctionRound = 0): Observable<HttpResponse<FileUploadSubmission[]>> {\r\n        const url = `api/fileupload/exercises/${exerciseId}/file-upload-submissions`;\r\n        let params = createRequestOption(req);\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        return this.http\r\n            .get<FileUploadSubmission[]>(url, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: HttpResponse<FileUploadSubmission[]>) => this.submissionService.convertArrayResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Returns next File Upload submission without assessment from the server\r\n     * @param exerciseId the id of the exercise\r\n     * @param lock\r\n     * @param correctionRound for which to get the Submissions\r\n     */\r\n    getSubmissionWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound = 0): Observable<FileUploadSubmission | undefined> {\r\n        const url = `api/fileupload/exercises/${exerciseId}/file-upload-submission-without-assessment`;\r\n        let params = new HttpParams();\r\n        if (correctionRound !== 0) {\r\n            params = params.set('correction-round', correctionRound.toString());\r\n        }\r\n        if (lock) {\r\n            params = params.set('lock', 'true');\r\n        }\r\n\r\n        return this.http.get<FileUploadSubmission | undefined>(url, { params }).pipe(\r\n            map((res?: FileUploadSubmission) => {\r\n                if (!res) {\r\n                    return undefined;\r\n                }\r\n                return this.submissionService.convertSubmissionFromServer(res);\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns data for File Upload editor from the server\r\n     * @param participationId the id of the participation\r\n     */\r\n    getDataForFileUploadEditor(participationId: number): Observable<FileUploadSubmission> {\r\n        return this.http\r\n            .get<FileUploadSubmission>(`api/fileupload/participations/${participationId}/file-upload-editor`, { responseType: 'json' })\r\n            .pipe(map((res: FileUploadSubmission) => this.submissionService.convertSubmissionFromServer(res)));\r\n    }\r\n}\r\n"],
  "mappings": "0NAaA,IAAaA,GAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAC5BC,KAAOC,EAAOC,CAAU,EACxBC,kBAAoBF,EAAOG,CAAiB,EAQpDC,OAAOC,EAA4CC,EAAoBC,EAAoB,CACvF,IAAMC,EAAO,KAAKN,kBAAkBO,QAAQJ,CAAoB,EAC1DK,EAAW,IAAIC,SACfC,EAAiB,IAAIC,KAAK,CAACC,EAAkBN,CAAI,CAAC,EAAG,CAAEO,KAAM,kBAAkB,CAAE,EACvFL,OAAAA,EAASM,OAAO,OAAQT,CAAc,EACtCG,EAASM,OAAO,aAAcJ,CAAc,EACrC,KAAKb,KACPkB,KAA2B,4BAA4BX,CAAU,2BAA4BI,EAAU,CACpGQ,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA4B,KAAKnB,kBAAkBoB,oCAAoCD,CAAG,CAAC,CAAC,CAC/G,CAQAE,IAAIC,EAAgCC,EAAkB,EAAGC,EAAiB,CACtE,IAAMC,EAAM,0CAA0CH,CAAsB,GACxEI,EAAS,IAAIC,EACjB,OAAIH,GAAYA,EAAW,EAEvBE,EAASA,EAAOE,IAAI,WAAYJ,EAAUK,SAAQ,CAAE,EAEpDH,EAASA,EAAOE,IAAI,mBAAoBL,EAAgBM,SAAQ,CAAE,EAE/D,KAAKhC,KACPwB,IAA0BI,EAAK,CAAEC,OAAAA,EAAQV,QAAS,UAAU,CAAE,EAC9DC,KAAKC,EAAKC,GAA4C,KAAKnB,kBAAkBoB,oCAAoCD,CAAG,CAAC,CAAC,CAC/H,CAQAW,eAAe1B,EAAoB2B,EAA6DR,EAAkB,EAAC,CAC/G,IAAME,EAAM,4BAA4BrB,CAAU,2BAC9CsB,EAASM,EAAoBD,CAAG,EACpC,OAAIR,IAAoB,IACpBG,EAASA,EAAOE,IAAI,mBAAoBL,EAAgBM,SAAQ,CAAE,GAE/D,KAAKhC,KACPwB,IAA4BI,EAAK,CAC9BC,OAAAA,EACAV,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA8C,KAAKnB,kBAAkBiC,qBAAqBd,CAAG,CAAC,CAAC,CAClH,CAQAe,+BAA+B9B,EAAoB+B,EAAgBZ,EAAkB,EAAC,CAClF,IAAME,EAAM,4BAA4BrB,CAAU,6CAC9CsB,EAAS,IAAIC,EACjB,OAAIJ,IAAoB,IACpBG,EAASA,EAAOE,IAAI,mBAAoBL,EAAgBM,SAAQ,CAAE,GAElEM,IACAT,EAASA,EAAOE,IAAI,OAAQ,MAAM,GAG/B,KAAK/B,KAAKwB,IAAsCI,EAAK,CAAEC,OAAAA,CAAM,CAAE,EAAET,KACpEC,EAAKC,GAA8B,CAC/B,GAAKA,EAGL,OAAO,KAAKnB,kBAAkBoC,4BAA4BjB,CAAG,CACjE,CAAC,CAAC,CAEV,CAMAkB,2BAA2BC,EAAuB,CAC9C,OAAO,KAAKzC,KACPwB,IAA0B,iCAAiCiB,CAAe,sBAAuB,CAAEC,aAAc,MAAM,CAAE,EACzHtB,KAAKC,EAAKC,GAA8B,KAAKnB,kBAAkBoC,4BAA4BjB,CAAG,CAAC,CAAC,CACzG,4CAjGSvB,EAA2B,6BAA3BA,EAA2B4C,QAA3B5C,EAA2B6C,UAAAC,WADd,MAAM,CAAA,SACnB9C,CAA2B,GAAA",
  "names": ["FileUploadSubmissionService", "http", "inject", "HttpClient", "submissionService", "SubmissionService", "update", "fileUploadSubmission", "exerciseId", "submissionFile", "copy", "convert", "formData", "FormData", "submissionBlob", "Blob", "stringifyCircular", "type", "append", "post", "observe", "pipe", "map", "res", "convertSubmissionResponseFromServer", "get", "fileUploadSubmissionId", "correctionRound", "resultId", "url", "params", "HttpParams", "set", "toString", "getSubmissions", "req", "createRequestOption", "convertArrayResponse", "getSubmissionWithoutAssessment", "lock", "convertSubmissionFromServer", "getDataForFileUploadEditor", "participationId", "responseType", "factory", "\u0275fac", "providedIn"]
}
