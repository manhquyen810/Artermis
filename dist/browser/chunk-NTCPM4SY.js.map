{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/statistics/quiz-statistics.ts", "src/main/webapp/app/exercises/quiz/shared/quiz-statistic-util.service.ts", "src/main/webapp/app/exercises/quiz/manage/statistics/quiz-statistics-footer/quiz-statistics-footer.component.ts", "src/main/webapp/app/exercises/quiz/manage/statistics/quiz-statistics-footer/quiz-statistics-footer.component.html"],
  "sourcesContent": ["import { ChangeDetectorRef, Component, inject } from '@angular/core';\r\nimport { Color, ScaleType } from '@swimlane/ngx-charts';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { QuizStatistic } from 'app/entities/quiz/quiz-statistic.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgxChartsSingleSeriesDataEntry } from 'app/shared/chart/ngx-charts-datatypes';\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class AbstractQuizStatisticComponent {\r\n    protected translateService = inject(TranslateService);\r\n    data: number[] = [];\r\n    ratedData: number[] = [];\r\n    unratedData: number[] = [];\r\n    rated = true;\r\n    participants: number;\r\n\r\n    ngxData: NgxChartsSingleSeriesDataEntry[] = [];\r\n    ngxColor = {\r\n        name: 'quiz statistics',\r\n        selectable: true,\r\n        group: ScaleType.Ordinal,\r\n        domain: [],\r\n    } as Color;\r\n    bindFormatting = this.formatDataLabel.bind(this);\r\n    xAxisLabel: string;\r\n    yAxisLabel: string;\r\n    maxScale: number;\r\n    chartLabels: string[] = [];\r\n    totalParticipants = 0;\r\n\r\n    /**\r\n     * Depending on if the rated or unrated results should be displayed,\r\n     * The amount of participants as well as the corresponding scores are set\r\n     * @param statistic the statistic containing amount of participation\r\n     */\r\n    protected setData(statistic: QuizStatistic): void {\r\n        if (this.rated) {\r\n            this.participants = statistic.participantsRated!;\r\n            // if rated is true use the rated Data and add the rated CorrectCounter\r\n            this.data = [];\r\n            this.data = [...this.ratedData];\r\n        } else {\r\n            this.participants = statistic.participantsUnrated!;\r\n            // if rated is false use the unrated Data and add the unrated CorrectCounter\r\n            this.data = [];\r\n            this.data = [...this.unratedData];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates dedicated objects of type NgxChartsSingleSeriesDataEntry that can be processed by ngx-charts\r\n     * in order to visualize the scores and calculates the maximum value on the y-axis\r\n     * in order to ensure a shapely display.\r\n     */\r\n    protected pushDataToNgxEntry(changeDetector: ChangeDetectorRef): void {\r\n        this.ngxData = [];\r\n        this.data.forEach((score, index) => {\r\n            this.ngxData.push({ name: this.chartLabels[index], value: score });\r\n        });\r\n        this.maxScale = this.calculateHeightOfChartData(this.data);\r\n        this.ngxData = [...this.ngxData];\r\n        changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * switch between showing and hiding the solution in the chart\r\n     *  1. change the amount of  participants\r\n     *  2. change the bar-Data\r\n     */\r\n    switchRated(): void {\r\n        this.rated = !this.rated;\r\n        this.loadDataInDiagram();\r\n    }\r\n\r\n    /**\r\n     * Modifies the datalabel for each bar to the following pattern:\r\n     * absolute value (absolute value/amount of participants)\r\n     * @param absoluteValue the absolute value represented by the corresponding bar\r\n     * @returns string of the following pattern: absolute value (relative value)\r\n     */\r\n    protected formatDataLabel(absoluteValue: number): string {\r\n        const relativeValue = (absoluteValue / this.totalParticipants) * 100;\r\n        if (isNaN(relativeValue)) {\r\n            return absoluteValue + ' (0%)';\r\n        } else {\r\n            return absoluteValue + ' (' + round((absoluteValue / this.participants) * 100, 1) + '%)';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the maximum value on the y-axis on a chart depending on the data to display\r\n     * @param data the array of data that is to display by the chart\r\n     * @returns height of the chart\r\n     */\r\n    private calculateHeightOfChartData(data: number[]): number {\r\n        const max = Math.max(...data);\r\n        // we provide 300 as buffer at the top to display labels\r\n        const height = Math.ceil((max + 1) / 10) * 10;\r\n        if (height < 10) {\r\n            return height + 3;\r\n        } else if (height < 1000) {\r\n            // add 25%, round to the next 10\r\n            return Math.ceil(height * 0.125) * 10;\r\n        } else {\r\n            // add 25%, round to the next 100\r\n            return Math.ceil(height * 0.0125) * 100;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the axis labels given the translation paths\r\n     * @param xAxisLabel translation path for x-axis label\r\n     * @param yAxisLabel translation path for y-axis label\r\n     */\r\n    setAxisLabels(xAxisLabel: string, yAxisLabel: string): void {\r\n        this.xAxisLabel = this.translateService.instant(xAxisLabel);\r\n        this.yAxisLabel = this.translateService.instant(yAxisLabel);\r\n    }\r\n\r\n    /**\r\n     * check if the rated or unrated\r\n     * load the rated or unrated data into the diagram\r\n     */\r\n    abstract loadDataInDiagram(): void;\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { getCourseId } from 'app/entities/exercise.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuizStatisticUtil {\r\n    private router = inject(Router);\r\n\r\n    /**\r\n     * Gets the URL to the quiz exercise detail/edit view\r\n     * which is used as basis for all quiz related subroutes.\r\n     *\r\n     * @param quizExercise the exercise to get the URL for\r\n     * @returns string the URL to the quiz depending on if it is in an exam or not\r\n     */\r\n    getBaseUrlForQuizExercise(quizExercise: QuizExercise): string {\r\n        const courseId = getCourseId(quizExercise);\r\n\r\n        // Test if we're a course exercise\r\n        if (!quizExercise.exerciseGroup) {\r\n            return `/course-management/${courseId}/quiz-exercises/${quizExercise.id}`;\r\n        }\r\n\r\n        // Otherwise, we are in the exam mode\r\n        const examId = quizExercise.exerciseGroup!.exam!.id!;\r\n        const groupId = quizExercise.exerciseGroup!.id!;\r\n        return `/course-management/${courseId}/exams/${examId}/exercise-groups/${groupId}/quiz-exercises/${quizExercise.id}`;\r\n    }\r\n\r\n    /**\r\n     * go to the Template with the previous QuizStatistic\r\n     * if first QuizQuestionStatistic -> go to the quiz-statistic\r\n     *\r\n     * @param quizExercise: the quizExercise with all statistics\r\n     * @param question: the question of the current statistic\r\n     */\r\n    previousStatistic(quizExercise: QuizExercise, question: QuizQuestion) {\r\n        const baseUrl = this.getBaseUrlForQuizExercise(quizExercise);\r\n\r\n        // find position in quiz\r\n        const index = quizExercise.quizQuestions!.findIndex(function (quiz) {\r\n            return quiz.id === question.id;\r\n        });\r\n        // go to quiz-statistic if the position = 0\r\n        if (index === 0) {\r\n            this.router.navigateByUrl(baseUrl + '/quiz-point-statistic');\r\n        } else {\r\n            // go to previous Question-statistic\r\n            this.navigateToStatisticOf(quizExercise, quizExercise.quizQuestions![index - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * go to the Template with the next QuizStatistic\r\n     * if last QuizQuestionStatistic -> go to the Quiz-point-statistic\r\n     *\r\n     * @param quizExercise: the quizExercise with all statistics\r\n     * @param question: the question of the current statistic\r\n     */\r\n    nextStatistic(quizExercise: QuizExercise, question: QuizQuestion) {\r\n        const baseUrl = this.getBaseUrlForQuizExercise(quizExercise);\r\n\r\n        // find position in quiz\r\n        const index = quizExercise.quizQuestions!.findIndex(function (quiz) {\r\n            return quiz.id === question.id;\r\n        });\r\n        // go to quiz-statistic if the position = last position\r\n        if (index === quizExercise.quizQuestions!.length - 1) {\r\n            this.router.navigateByUrl(baseUrl + '/quiz-point-statistic');\r\n        } else {\r\n            // go to next Question-statistic\r\n            this.navigateToStatisticOf(quizExercise, quizExercise.quizQuestions![index + 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uses the router to navigate to the statistics page depending on the question type\r\n     * @param quizExercise Quiz exercise to which the quiz question belongs\r\n     * @param question Question for which to navigate to the statistics\r\n     */\r\n    navigateToStatisticOf(quizExercise: QuizExercise, question: QuizQuestion) {\r\n        const baseUrl = this.getBaseUrlForQuizExercise(quizExercise);\r\n\r\n        if (question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n            this.router.navigateByUrl(baseUrl + `/mc-question-statistic/${question.id}`);\r\n        } else if (question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n            this.router.navigateByUrl(baseUrl + `/dnd-question-statistic/${question.id}`);\r\n        } else if (question.type === QuizQuestionType.SHORT_ANSWER) {\r\n            this.router.navigateByUrl(baseUrl + `/sa-question-statistic/${question.id}`);\r\n        }\r\n    }\r\n}\r\n", "import { Component, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { QuizStatisticUtil } from 'app/exercises/quiz/shared/quiz-statistic-util.service';\r\nimport { ShortAnswerQuestionUtil } from 'app/exercises/quiz/shared/short-answer-question-util.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { QuizExerciseService } from 'app/exercises/quiz/manage/quiz-exercise.service';\r\nimport { MultipleChoiceQuestionStatistic } from 'app/entities/quiz/multiple-choice-question-statistic.model';\r\nimport { QuizPointStatistic } from 'app/entities/quiz/quiz-point-statistic.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { UI_RELOAD_TIME } from 'app/shared/constants/exercise-exam-constants';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgClass } from '@angular/common';\r\nimport { JhiConnectionStatusComponent } from 'app/shared/connection-status/connection-status.component';\r\nimport { TruncatePipe } from 'app/shared/pipes/truncate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-statistics-footer',\r\n    templateUrl: './quiz-statistics-footer.component.html',\r\n    providers: [QuizStatisticUtil, ShortAnswerQuestionUtil],\r\n    styleUrls: ['./quiz-statistics-footer.component.scss', '../../../shared/quiz.scss'],\r\n    imports: [NgbDropdown, NgbDropdownToggle, FaIconComponent, TranslateDirective, NgbDropdownMenu, RouterLink, NgClass, JhiConnectionStatusComponent, TruncatePipe],\r\n})\r\nexport class QuizStatisticsFooterComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private accountService = inject(AccountService);\r\n    private translateService = inject(TranslateService);\r\n    private quizExerciseService = inject(QuizExerciseService);\r\n    private quizStatisticUtil = inject(QuizStatisticUtil);\r\n    private websocketService = inject(WebsocketService);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    @Input() isQuizPointStatistic: boolean;\r\n    @Input() isQuizStatistic: boolean;\r\n\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n\r\n    quizExercise: QuizExercise;\r\n    question: QuizQuestion;\r\n    quizPointStatistic: QuizPointStatistic;\r\n    questionStatistic: MultipleChoiceQuestionStatistic;\r\n    questionIdParam: number;\r\n    private websocketChannelForData: string;\r\n    // timer\r\n    waitingForQuizStart = false;\r\n    remainingTimeText = '?';\r\n    remainingTimeSeconds = 0;\r\n    interval: any;\r\n\r\n    // Icons\r\n    farListAlt = faListAlt;\r\n\r\n    ngOnInit() {\r\n        this.route.params.subscribe((params) => {\r\n            this.questionIdParam = +params['questionId'];\r\n            if (this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n                this.quizExerciseService.find(params['exerciseId']).subscribe((res: HttpResponse<QuizExercise>) => {\r\n                    this.loadQuiz(res.body!);\r\n                });\r\n            }\r\n        });\r\n\r\n        // update displayed times in UI regularly\r\n        this.interval = setInterval(() => {\r\n            this.updateDisplayedTimes();\r\n        }, UI_RELOAD_TIME);\r\n    }\r\n\r\n    /**\r\n     * updates all displayed (relative) times in the UI\r\n     */\r\n    updateDisplayedTimes() {\r\n        const translationBasePath = 'artemisApp.showStatistic.';\r\n        // update remaining time\r\n        if (this.quizExercise && this.quizExercise.dueDate) {\r\n            const endDate = this.quizExercise.dueDate;\r\n            if (endDate.isAfter(this.serverDateService.now())) {\r\n                // quiz is still running => calculate remaining seconds and generate text based on that\r\n                this.remainingTimeSeconds = endDate.diff(this.serverDateService.now(), 'seconds');\r\n                this.remainingTimeText = this.relativeTimeText(this.remainingTimeSeconds);\r\n            } else {\r\n                // quiz is over => set remaining seconds to negative, to deactivate 'Submit' button\r\n                this.remainingTimeSeconds = -1;\r\n                this.remainingTimeText = this.translateService.instant(translationBasePath + 'quizHasEnded');\r\n            }\r\n        } else {\r\n            // remaining time is unknown => Set remaining seconds to 0, to keep 'Submit' button enabled\r\n            this.remainingTimeSeconds = 0;\r\n            this.remainingTimeText = '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Express the given timespan as humanized text\r\n     *\r\n     * @param remainingTimeSeconds the amount of seconds to display\r\n     * @return humanized text for the given amount of seconds\r\n     */\r\n    relativeTimeText(remainingTimeSeconds: number) {\r\n        if (remainingTimeSeconds > 210) {\r\n            return Math.ceil(remainingTimeSeconds / 60) + ' min';\r\n        } else if (remainingTimeSeconds > 59) {\r\n            return Math.floor(remainingTimeSeconds / 60) + ' min ' + (remainingTimeSeconds % 60) + ' s';\r\n        } else {\r\n            return remainingTimeSeconds + ' s';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        clearInterval(this.interval);\r\n        this.websocketService.unsubscribe(this.websocketChannelForData);\r\n    }\r\n\r\n    /**\r\n     * This functions loads the Quiz, which is necessary to build the Web-Template\r\n     * And it loads the new Data if the Websocket has been notified\r\n     *\r\n     * @param quiz the quizExercise, which this quiz-statistic presents.\r\n     */\r\n    loadQuiz(quiz: QuizExercise) {\r\n        // if the Student finds a way to the Website -> the Student will be sent back to Courses\r\n        if (!this.accountService.hasAnyAuthorityDirect([Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA])) {\r\n            this.router.navigate(['/courses']);\r\n        }\r\n        this.quizExercise = quiz;\r\n        const updatedQuestion = this.quizExercise.quizQuestions?.filter((question) => this.questionIdParam === question.id)[0];\r\n        this.question = updatedQuestion as QuizQuestion;\r\n        this.waitingForQuizStart = !this.quizExercise.quizStarted;\r\n    }\r\n\r\n    /**\r\n     * This function navigates to the previous quiz question statistic.\r\n     * If the current page shows the first quiz question statistic then it will navigate to the quiz statistic\r\n     */\r\n    previousStatistic() {\r\n        const baseUrl = this.quizStatisticUtil.getBaseUrlForQuizExercise(this.quizExercise);\r\n\r\n        if (this.isQuizStatistic) {\r\n            this.router.navigateByUrl(baseUrl + `/quiz-point-statistic`);\r\n        } else if (this.isQuizPointStatistic) {\r\n            if (!this.quizExercise.quizQuestions || this.quizExercise.quizQuestions.length === 0) {\r\n                this.router.navigateByUrl(baseUrl + `/quiz-statistic`);\r\n            } else {\r\n                // go to previous question-statistic\r\n                this.quizStatisticUtil.navigateToStatisticOf(this.quizExercise, this.quizExercise.quizQuestions.last()!);\r\n            }\r\n        } else {\r\n            this.quizStatisticUtil.previousStatistic(this.quizExercise, this.question);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function navigates to the next quiz question statistic.\r\n     * If the current page shows the last quiz question statistic then it will navigate to the quiz point statistic\r\n     */\r\n    nextStatistic() {\r\n        const baseUrl = this.quizStatisticUtil.getBaseUrlForQuizExercise(this.quizExercise);\r\n\r\n        if (this.isQuizPointStatistic) {\r\n            this.router.navigateByUrl(baseUrl + `/quiz-statistic`);\r\n        } else if (this.isQuizStatistic) {\r\n            // go to quiz-statistic if the position = last position\r\n            if (!this.quizExercise.quizQuestions || this.quizExercise.quizQuestions.length === 0) {\r\n                this.router.navigateByUrl(baseUrl + `/quiz-point-statistic`);\r\n            } else {\r\n                // go to next question-statistic\r\n                this.quizStatisticUtil.navigateToStatisticOf(this.quizExercise, this.quizExercise.quizQuestions[0]);\r\n            }\r\n        } else {\r\n            this.quizStatisticUtil.nextStatistic(this.quizExercise, this.question);\r\n        }\r\n    }\r\n}\r\n", "<div class=\"quiz-statistic-footer\">\r\n    <div class=\"container\">\r\n        <div class=\"edit-quiz-footer-content row\">\r\n            <div class=\"form-group col-sm\">\r\n                <div class=\"d-inline-block\" ngbDropdown placement=\"top-right auto\">\r\n                    <button class=\"btn btn-primary btn-sm\" ngbDropdownToggle>\r\n                        <fa-icon [icon]=\"farListAlt\" />\r\n                        <span class=\"hidden-xs hidden-sm\" jhiTranslate=\"artemisApp.showStatistic.chooseStatistic\"></span>\r\n                        <span class=\"caret\"></span>\r\n                    </button>\r\n                    @if (quizExercise) {\r\n                        <div ngbDropdownMenu>\r\n                            @if (!quizExercise.exerciseGroup) {\r\n                                <button\r\n                                    class=\"dropdown-item\"\r\n                                    routerLink=\"/course-management/{{ quizExercise.course!.id }}/quiz-exercises/{{ quizExercise.id }}/quiz-point-statistic\"\r\n                                    jhiTranslate=\"artemisApp.showStatistic.quizPointStatisticTitle\"\r\n                                ></button>\r\n                            }\r\n                            @if (quizExercise.exerciseGroup) {\r\n                                <button\r\n                                    class=\"dropdown-item\"\r\n                                    routerLink=\"/course-management/{{ quizExercise.exerciseGroup.exam!.course!.id }}/exams/{{\r\n                                        quizExercise.exerciseGroup.exam!.id\r\n                                    }}/exercise-groups/{{ quizExercise.exerciseGroup.id }}/quiz-exercises/{{ quizExercise.id }}/quiz-point-statistic\"\r\n                                    jhiTranslate=\"artemisApp.showStatistic.quizPointStatisticTitle\"\r\n                                ></button>\r\n                            }\r\n                            @if (!quizExercise.exerciseGroup) {\r\n                                <button\r\n                                    class=\"dropdown-item\"\r\n                                    routerLink=\"/course-management/{{ quizExercise.course!.id }}/quiz-exercises/{{ quizExercise.id }}/quiz-statistic\"\r\n                                    jhiTranslate=\"artemisApp.showStatistic.quizStatisticTitle\"\r\n                                ></button>\r\n                            }\r\n                            @if (quizExercise.exerciseGroup) {\r\n                                <button\r\n                                    class=\"dropdown-item\"\r\n                                    routerLink=\"/course-management/{{ quizExercise.exerciseGroup.exam!.course!.id }}/exams/{{\r\n                                        quizExercise.exerciseGroup.exam!.id\r\n                                    }}/exercise-groups/{{ quizExercise.exerciseGroup.id }}/quiz-exercises/{{ quizExercise.id }}/quiz-statistic\"\r\n                                    jhiTranslate=\"artemisApp.showStatistic.quizStatisticTitle\"\r\n                                ></button>\r\n                            }\r\n                            @if (quizExercise.quizQuestions) {\r\n                                <div>\r\n                                    @for (question of quizExercise.quizQuestions; track question; let i = $index) {\r\n                                        <div>\r\n                                            @if (question.type === MULTIPLE_CHOICE && !quizExercise.exerciseGroup) {\r\n                                                <button\r\n                                                    class=\"dropdown-item\"\r\n                                                    routerLink=\"/course-management/{{ quizExercise.course!.id }}/quiz-exercises/{{ quizExercise.id }}/mc-question-statistic/{{\r\n                                                        question.id\r\n                                                    }}\"\r\n                                                >\r\n                                                    {{ i + 1 }}. {{ question.title || '' | truncate }}\r\n                                                </button>\r\n                                            }\r\n                                            @if (question.type === MULTIPLE_CHOICE && quizExercise.exerciseGroup) {\r\n                                                <button\r\n                                                    class=\"dropdown-item\"\r\n                                                    routerLink=\"/course-management/{{ quizExercise.exerciseGroup.exam!.course!.id }}/exams/{{\r\n                                                        quizExercise.exerciseGroup.exam!.id\r\n                                                    }}/exercise-groups/{{ quizExercise.exerciseGroup.id }}/quiz-exercises/{{ quizExercise.id }}/mc-question-statistic/{{\r\n                                                        question.id\r\n                                                    }}\"\r\n                                                >\r\n                                                    {{ i + 1 }}. {{ question.title || '' | truncate }}\r\n                                                </button>\r\n                                            }\r\n                                            @if (question.type === DRAG_AND_DROP && !quizExercise.exerciseGroup) {\r\n                                                <button\r\n                                                    class=\"dropdown-item\"\r\n                                                    routerLink=\"/course-management/{{ quizExercise.course!.id }}/quiz-exercises/{{ quizExercise.id }}/dnd-question-statistic/{{\r\n                                                        question.id\r\n                                                    }}\"\r\n                                                >\r\n                                                    {{ i + 1 }}. {{ question.title || '' | truncate }}\r\n                                                </button>\r\n                                            }\r\n                                            @if (question.type === DRAG_AND_DROP && quizExercise.exerciseGroup) {\r\n                                                <button\r\n                                                    class=\"dropdown-item\"\r\n                                                    routerLink=\"/course-management/{{ quizExercise.exerciseGroup.exam!.course!.id }}/exams/{{\r\n                                                        quizExercise.exerciseGroup.exam!.id\r\n                                                    }}/exercise-groups/{{ quizExercise.exerciseGroup.id }}/quiz-exercises/{{ quizExercise.id }}/dnd-question-statistic/{{\r\n                                                        question.id\r\n                                                    }}\"\r\n                                                >\r\n                                                    {{ i + 1 }}. {{ question.title || '' | truncate }}\r\n                                                </button>\r\n                                            }\r\n                                            @if (question.type === SHORT_ANSWER && !quizExercise.exerciseGroup) {\r\n                                                <button\r\n                                                    class=\"dropdown-item\"\r\n                                                    routerLink=\"/course-management/{{ quizExercise.course!.id }}/quiz-exercises/{{ quizExercise.id }}/sa-question-statistic/{{\r\n                                                        question.id\r\n                                                    }}\"\r\n                                                >\r\n                                                    {{ i + 1 }}. {{ question.title || '' | truncate }}\r\n                                                </button>\r\n                                            }\r\n                                            @if (question.type === SHORT_ANSWER && quizExercise.exerciseGroup) {\r\n                                                <button\r\n                                                    class=\"dropdown-item\"\r\n                                                    routerLink=\"/course-management/{{ quizExercise.exerciseGroup.exam!.course!.id }}/exams/{{\r\n                                                        quizExercise.exerciseGroup.exam!.id\r\n                                                    }}/exercise-groups/{{ quizExercise.exerciseGroup.id }}/quiz-exercises/{{ quizExercise.id }}/sa-question-statistic/{{\r\n                                                        question.id\r\n                                                    }}\"\r\n                                                >\r\n                                                    {{ i + 1 }}. {{ question.title || '' | truncate }}\r\n                                                </button>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            @if (isQuizPointStatistic) {\r\n                <div id=\"remaining-time\" class=\"form-group col-sm\">\r\n                    @if (waitingForQuizStart) {\r\n                        <div>\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.waitingForStart\"></span>\r\n                        </div>\r\n                    }\r\n                    @if (!waitingForQuizStart) {\r\n                        <div>\r\n                            <span jhiTranslate=\"artemisApp.quizExercise.remainingTime\" class=\"colon-suffix\"></span>\r\n                            <span\r\n                                id=\"remaining-time-value\"\r\n                                [ngClass]=\"{\r\n                                    'time-critical': remainingTimeSeconds < 60 || remainingTimeSeconds < quizExercise.duration! / 4,\r\n                                    'time-warning': remainingTimeSeconds < 120 || remainingTimeSeconds < quizExercise.duration! / 2,\r\n                                }\"\r\n                            >\r\n                                {{ remainingTimeText }}\r\n                            </span>\r\n                        </div>\r\n                    }\r\n                    @if (waitingForQuizStart || remainingTimeSeconds >= 0) {\r\n                        <jhi-connection-status />\r\n                    }\r\n                </div>\r\n            }\r\n            <div class=\"form-group col-sm\">\r\n                @if (quizExercise) {\r\n                    <div class=\"btn-group flex-btn-group-container\">\r\n                        <button (click)=\"previousStatistic()\" jhiTranslate=\"artemisApp.showStatistic.previousStatistic\" class=\"btn btn-default\"></button>\r\n                        <button (click)=\"nextStatistic()\" jhiTranslate=\"artemisApp.showStatistic.nextStatistic\" class=\"btn btn-default\"></button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["AbstractQuizStatisticComponent", "translateService", "inject", "TranslateService", "data", "ratedData", "unratedData", "rated", "participants", "ngxData", "ngxColor", "name", "selectable", "group", "ScaleType", "Ordinal", "domain", "bindFormatting", "formatDataLabel", "bind", "xAxisLabel", "yAxisLabel", "maxScale", "chartLabels", "totalParticipants", "setData", "statistic", "participantsRated", "participantsUnrated", "pushDataToNgxEntry", "changeDetector", "forEach", "score", "index", "push", "value", "calculateHeightOfChartData", "detectChanges", "switchRated", "loadDataInDiagram", "absoluteValue", "relativeValue", "isNaN", "round", "max", "Math", "height", "ceil", "setAxisLabels", "instant", "selectors", "decls", "vars", "template", "rf", "ctx", "encapsulation", "QuizStatisticUtil", "router", "inject", "Router", "getBaseUrlForQuizExercise", "quizExercise", "courseId", "getCourseId", "exerciseGroup", "id", "examId", "exam", "groupId", "previousStatistic", "question", "baseUrl", "index", "quizQuestions", "findIndex", "quiz", "navigateByUrl", "navigateToStatisticOf", "nextStatistic", "length", "type", "QuizQuestionType", "MULTIPLE_CHOICE", "DRAG_AND_DROP", "SHORT_ANSWER", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate2", "ctx_r0", "quizExercise", "course", "id", "\u0275\u0275propertyInterpolate4", "exerciseGroup", "exam", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275propertyInterpolate3", "question_r3", "\u0275\u0275textInterpolate2", "\u0275$index_59_r4", "\u0275\u0275pipeBind1", "title", "\u0275\u0275propertyInterpolate5", "\u0275\u0275template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Conditional_3_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Conditional_4_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Conditional_5_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Conditional_6_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Conditional_7_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Conditional_8_Template", "\u0275\u0275conditional", "type", "MULTIPLE_CHOICE", "DRAG_AND_DROP", "SHORT_ANSWER", "\u0275\u0275repeaterCreate", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "quizQuestions", "QuizStatisticsFooterComponent_Conditional_19_Conditional_3_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_4_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_5_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_6_Template", "QuizStatisticsFooterComponent_Conditional_19_Conditional_7_Template", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "remainingTimeSeconds", "duration", "\u0275\u0275textInterpolate1", "remainingTimeText", "QuizStatisticsFooterComponent_Conditional_22_Conditional_3_Template", "QuizStatisticsFooterComponent_Conditional_22_Conditional_4_Template", "QuizStatisticsFooterComponent_Conditional_22_Conditional_5_Template", "waitingForQuizStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r5", "\u0275\u0275nextContext", "\u0275\u0275resetView", "previousStatistic", "nextStatistic", "QuizStatisticsFooterComponent", "route", "inject", "ActivatedRoute", "router", "Router", "accountService", "AccountService", "translateService", "TranslateService", "quizExerciseService", "QuizExerciseService", "quizStatisticUtil", "QuizStatisticUtil", "websocketService", "WebsocketService", "serverDateService", "ArtemisServerDateService", "isQuizPointStatistic", "isQuizStatistic", "QuizQuestionType", "question", "quizPointStatistic", "questionStatistic", "questionIdParam", "websocketChannelForData", "interval", "farListAlt", "faListAlt", "ngOnInit", "params", "subscribe", "hasAnyAuthorityDirect", "Authority", "ADMIN", "INSTRUCTOR", "EDITOR", "TA", "find", "res", "loadQuiz", "body", "setInterval", "updateDisplayedTimes", "UI_RELOAD_TIME", "translationBasePath", "dueDate", "endDate", "isAfter", "now", "diff", "relativeTimeText", "instant", "Math", "ceil", "floor", "ngOnDestroy", "clearInterval", "unsubscribe", "quiz", "navigate", "updatedQuestion", "filter", "quizStarted", "baseUrl", "getBaseUrlForQuizExercise", "navigateByUrl", "length", "navigateToStatisticOf", "last", "selectors", "inputs", "features", "\u0275\u0275ProvidersFeature", "ShortAnswerQuestionUtil", "decls", "vars", "consts", "template", "rf", "ctx", "QuizStatisticsFooterComponent_Conditional_19_Template", "QuizStatisticsFooterComponent_Conditional_22_Template", "QuizStatisticsFooterComponent_Conditional_25_Template", "NgbDropdown", "NgbDropdownToggle", "FaIconComponent", "TranslateDirective", "NgbDropdownMenu", "RouterLink", "NgClass", "JhiConnectionStatusComponent", "TruncatePipe", "styles"]
}
