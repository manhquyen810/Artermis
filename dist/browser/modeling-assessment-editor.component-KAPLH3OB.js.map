{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/modeling/assess/modeling-assessment-editor/modeling-assessment-editor.component.ts", "src/main/webapp/app/exercises/modeling/assess/modeling-assessment-editor/modeling-assessment-editor.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { UnreferencedFeedbackComponent } from 'app/exercises/shared/unreferenced-feedback/unreferenced-feedback.component';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { UMLDiagramType, UMLModel } from '@ls1intum/apollon';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { getPositiveAndCappedTotalScore, getTotalMaxPoints } from 'app/exercises/shared/exercise/exercise.utils';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\r\nimport { Feedback, FeedbackHighlightColor, FeedbackType } from 'app/entities/feedback.model';\r\nimport { Complaint, ComplaintType } from 'app/entities/complaint.model';\r\nimport { ModelingAssessmentService } from 'app/exercises/modeling/assess/modeling-assessment.service';\r\nimport { assessmentNavigateBack } from 'app/exercises/shared/navigate-back.util';\r\nimport { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\r\nimport { Submission, getSubmissionResultByCorrectionRound, getSubmissionResultById } from 'app/entities/submission.model';\r\nimport { getExerciseDashboardLink, getLinkToSubmissionAssessment } from 'app/utils/navigation.utils';\r\nimport { ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\nimport { ExampleSubmissionService } from 'app/exercises/shared/example-submission/example-submission.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { isAllowedToModifyFeedback } from 'app/assessment/assessment.service';\r\nimport { AssessmentAfterComplaint } from 'app/complaints/complaints-for-tutor/complaints-for-tutor.component';\r\nimport { AthenaService } from 'app/assessment/athena.service';\r\nimport { faCircleNotch, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { AssessmentLayoutComponent } from 'app/assessment/assessment-layout/assessment-layout.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { ModelingAssessmentComponent } from '../modeling-assessment.component';\r\nimport { CollapsableAssessmentInstructionsComponent } from 'app/assessment/assessment-instructions/collapsable-assessment-instructions/collapsable-assessment-instructions.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-assessment-editor',\r\n    templateUrl: './modeling-assessment-editor.component.html',\r\n    styleUrls: ['./modeling-assessment-editor.component.scss'],\r\n    imports: [\r\n        AssessmentLayoutComponent,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        FaIconComponent,\r\n        ModelingAssessmentComponent,\r\n        CollapsableAssessmentInstructionsComponent,\r\n        UnreferencedFeedbackComponent,\r\n        RouterLink,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ModelingAssessmentEditorComponent implements OnInit {\r\n    private alertService = inject(AlertService);\r\n    private router = inject(Router);\r\n    private route = inject(ActivatedRoute);\r\n    private modelingSubmissionService = inject(ModelingSubmissionService);\r\n    private modelingAssessmentService = inject(ModelingAssessmentService);\r\n    private accountService = inject(AccountService);\r\n    private location = inject(Location);\r\n    private translateService = inject(TranslateService);\r\n    private complaintService = inject(ComplaintService);\r\n    private structuredGradingCriterionService = inject(StructuredGradingCriterionService);\r\n    private submissionService = inject(SubmissionService);\r\n    private exampleSubmissionService = inject(ExampleSubmissionService);\r\n    private athenaService = inject(AthenaService);\r\n\r\n    totalScore = 0;\r\n    submission?: ModelingSubmission;\r\n    model?: UMLModel;\r\n    modelingExercise?: ModelingExercise;\r\n    course?: Course;\r\n    result?: Result;\r\n    referencedFeedback: Feedback[] = [];\r\n    unreferencedFeedback: Feedback[] = [];\r\n    automaticFeedback: Feedback[] = [];\r\n    feedbackSuggestions: Feedback[] = []; // all pending Athena feedback suggestions (neither accepted nor rejected yet)\r\n    highlightedElements: Map<string, string>; // map elementId -> highlight color\r\n    highlightMissingFeedback = false;\r\n\r\n    assessmentsAreValid = false;\r\n    nextSubmissionBusy: boolean;\r\n    courseId: number;\r\n    examId = 0;\r\n    exerciseId: number;\r\n    exerciseGroupId: number;\r\n    exerciseDashboardLink: string[];\r\n    userId: number;\r\n    isAssessor = false;\r\n    complaint: Complaint;\r\n    ComplaintType = ComplaintType;\r\n    isLoading = true;\r\n    isTestRun = false;\r\n    hasAutomaticFeedback = false;\r\n    hasAssessmentDueDatePassed: boolean;\r\n    correctionRound = 0;\r\n    resultId: number;\r\n    loadingInitialSubmission = true;\r\n    highlightDifferences = false;\r\n    resizeOptions = { verticalResize: true };\r\n    isApollonModelLoaded = false;\r\n\r\n    private cancelConfirmationText: string;\r\n\r\n    protected readonly faCircleNotch = faCircleNotch;\r\n    protected readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    constructor() {\r\n        const translateService = this.translateService;\r\n\r\n        translateService.get('artemisApp.modelingAssessmentEditor.messages.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\r\n    }\r\n\r\n    /**\r\n     * Retrieve all feedback for the current exercise regardless of whether it is referenced or unreferenced\r\n     */\r\n    private get feedback(): Feedback[] {\r\n        return [...this.referencedFeedback, ...this.unreferencedFeedback];\r\n    }\r\n\r\n    /**\r\n     * Retrieve unreferenced entries from the feedback suggestions loaded from Athena.\r\n     * The suggestions are displayed in cards underneath the modeling editor canvas.\r\n     */\r\n    get unreferencedFeedbackSuggestions(): Feedback[] {\r\n        return this.feedbackSuggestions.filter((feedback) => !feedback.reference);\r\n    }\r\n\r\n    /**\r\n     * Retrieve whether feedback suggestions are enabled based on whether a feedback suggestions module is set on the\r\n     * current modeling exercise.\r\n     */\r\n    get isFeedbackSuggestionsEnabled(): boolean {\r\n        return Boolean(this.modelingExercise?.feedbackSuggestionModule);\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Used to check if the assessor is the current user\r\n        this.accountService.identity().then((user) => {\r\n            this.userId = user!.id!;\r\n        });\r\n\r\n        this.route.queryParamMap.subscribe((queryParams) => {\r\n            this.isTestRun = queryParams.get('testRun') === 'true';\r\n            this.correctionRound = Number(queryParams.get('correction-round'));\r\n        });\r\n        this.route.paramMap.subscribe((params) => {\r\n            this.courseId = Number(params.get('courseId'));\r\n            this.exerciseId = Number(params.get('exerciseId'));\r\n            if (params.has('examId')) {\r\n                this.examId = Number(params.get('examId'));\r\n                this.exerciseGroupId = Number(params.get('exerciseGroupId'));\r\n            }\r\n\r\n            this.exerciseDashboardLink = getExerciseDashboardLink(this.courseId, this.exerciseId, this.examId, this.isTestRun);\r\n\r\n            const submissionId = params.get('submissionId');\r\n            this.resultId = Number(params.get('resultId')) || 0;\r\n            if (submissionId === 'new') {\r\n                this.loadRandomSubmission(this.exerciseId);\r\n            } else {\r\n                this.loadSubmission(Number(submissionId));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load the feedback suggestions for the current submission from Athena.\r\n     * @param exercise The current exercise\r\n     * @param submission The current submission\r\n     */\r\n    private async loadFeedbackSuggestions(exercise: ModelingExercise, submission: Submission): Promise<Feedback[]> {\r\n        try {\r\n            return (await firstValueFrom(this.athenaService.getModelingFeedbackSuggestions(exercise, submission))) ?? [];\r\n        } catch (error) {\r\n            this.alertService.error('artemisApp.modelingAssessmentEditor.messages.loadFeedbackSuggestionsFailed');\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the modeling submission for a given ID\r\n     * @param submissionId The ID of the modeling submission that should be loaded\r\n     */\r\n    private loadSubmission(submissionId: number): void {\r\n        this.modelingSubmissionService.getSubmission(submissionId, this.correctionRound, this.resultId).subscribe({\r\n            next: (submission: ModelingSubmission) => {\r\n                this.handleReceivedSubmission(submission);\r\n                this.validateFeedback();\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.handleErrorResponse(error);\r\n            },\r\n        });\r\n    }\r\n\r\n    private loadRandomSubmission(exerciseId: number): void {\r\n        this.modelingSubmissionService.getSubmissionWithoutAssessment(exerciseId, true, this.correctionRound).subscribe({\r\n            next: async (submission?: ModelingSubmission) => {\r\n                if (!submission) {\r\n                    // there are no unassessed submissions\r\n                    this.submission = undefined;\r\n                    return;\r\n                }\r\n\r\n                await this.handleReceivedSubmission(submission);\r\n                this.validateFeedback();\r\n\r\n                // Update the url with the new id, without reloading the page, to make the history consistent\r\n                const newUrl = window.location.hash.replace('#', '').replace('new', `${this.submission!.id}`);\r\n                this.location.go(newUrl);\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.handleErrorResponse(error);\r\n            },\r\n        });\r\n    }\r\n\r\n    private async handleReceivedSubmission(submission: ModelingSubmission): Promise<void> {\r\n        this.loadingInitialSubmission = false;\r\n        this.submission = submission;\r\n        const studentParticipation = this.submission.participation as StudentParticipation;\r\n        this.modelingExercise = studentParticipation.exercise as ModelingExercise;\r\n        this.course = getCourseFromExercise(this.modelingExercise);\r\n        if (this.resultId > 0) {\r\n            this.result = getSubmissionResultById(submission, this.resultId);\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            this.correctionRound = submission.results?.findIndex((result) => result.id === this.resultId)!;\r\n        } else {\r\n            this.result = getSubmissionResultByCorrectionRound(this.submission, this.correctionRound);\r\n        }\r\n        this.hasAssessmentDueDatePassed = !!this.modelingExercise?.assessmentDueDate && dayjs(this.modelingExercise.assessmentDueDate).isBefore(dayjs());\r\n\r\n        if (this.submission.model) {\r\n            this.model = JSON.parse(this.submission.model);\r\n        } else {\r\n            this.alertService.closeAll();\r\n            this.alertService.warning('artemisApp.modelingAssessmentEditor.messages.noModel');\r\n        }\r\n\r\n        this.checkPermissions();\r\n        this.getComplaint();\r\n\r\n        if (this.result && this.submission?.participation) {\r\n            this.submission.participation.results = [this.result];\r\n            this.result.participation = this.submission.participation;\r\n        }\r\n\r\n        if (!this.modelingExercise.diagramType) {\r\n            this.modelingExercise.diagramType = UMLDiagramType.ClassDiagram;\r\n        }\r\n\r\n        if (this.result?.feedbacks) {\r\n            this.result = this.modelingAssessmentService.convertResult(this.result);\r\n        } else if (this.result) {\r\n            this.result.feedbacks = [];\r\n        }\r\n\r\n        // Only load suggestions for new assessments, they don't make sense later.\r\n        // The assessment is new if it only contains automatic feedback.\r\n        if (this.modelingExercise.feedbackSuggestionModule && (this.result?.feedbacks?.length ?? 0) === this.automaticFeedback.length) {\r\n            this.feedbackSuggestions = await this.loadFeedbackSuggestions(this.modelingExercise, this.submission);\r\n\r\n            if (this.result) {\r\n                this.result.feedbacks = [...(this.result?.feedbacks || []), ...this.feedbackSuggestions.filter((feedback) => Boolean(feedback.reference))];\r\n            }\r\n        }\r\n\r\n        this.handleFeedback(this.result?.feedbacks);\r\n\r\n        if ((!this.result?.assessor || this.result.assessor.id === this.userId) && !this.result?.completionDate) {\r\n            this.alertService.closeAll();\r\n            this.alertService.info('artemisApp.modelingAssessmentEditor.messages.lock');\r\n        }\r\n\r\n        this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission);\r\n\r\n        this.isLoading = false;\r\n    }\r\n\r\n    /**\r\n     * Show a set of feedbacks and feedback suggestions in the Apollon modeling editor\r\n     * @param feedbacks The feedbacks to show in the editor\r\n     */\r\n    private updateApollonEditorWithFeedback(feedbacks: Feedback[]): void {\r\n        this.referencedFeedback = feedbacks.filter((feedbackElement) => feedbackElement.reference);\r\n\r\n        if (!this.isApollonModelLoaded) {\r\n            this.isApollonModelLoaded = true;\r\n            this.calculateTotalScore();\r\n            this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission!);\r\n        }\r\n\r\n        this.validateFeedback();\r\n    }\r\n\r\n    private getComplaint(): void {\r\n        if (!this.submission) {\r\n            return;\r\n        }\r\n        this.complaintService.findBySubmissionId(this.submission.id!).subscribe({\r\n            next: (res) => {\r\n                if (!res.body) {\r\n                    return;\r\n                }\r\n                this.complaint = res.body;\r\n            },\r\n            error: () => {\r\n                this.onError();\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks the given feedback list for unreferenced feedback. The remaining list is then assigned to the\r\n     * referencedFeedback variable containing only feedback elements with a reference and valid score.\r\n     * Additionally, it checks if the feedback list contains any automatic feedback elements and sets the hasAutomaticFeedback flag accordingly.\r\n     * Afterward, it triggers the highlighting of feedback elements, if necessary.\r\n     */\r\n    private handleFeedback(feedback?: Feedback[]): void {\r\n        if (!feedback || feedback.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.referencedFeedback = feedback.filter((feedbackElement) => feedbackElement.reference);\r\n        this.unreferencedFeedback = feedback.filter((feedbackElement) => !feedbackElement.reference);\r\n\r\n        this.hasAutomaticFeedback = feedback.some((feedbackItem) => feedbackItem.type === FeedbackType.AUTOMATIC);\r\n        this.highlightAutomaticFeedback();\r\n\r\n        if (this.highlightMissingFeedback) {\r\n            this.highlightElementsWithMissingFeedback();\r\n        }\r\n\r\n        this.calculateTotalScore();\r\n    }\r\n\r\n    private checkPermissions(): void {\r\n        this.isAssessor = this.result?.assessor?.id === this.userId;\r\n    }\r\n\r\n    /**\r\n     * Boolean which determines whether the user can override a result.\r\n     * If no exercise is loaded, for example during loading between exercises, we return false.\r\n     * Instructors can always override a result.\r\n     * Tutors can override their own results within the assessment due date, if there is no complaint about their assessment.\r\n     * They cannot override a result anymore, if there is a complaint. Another tutor must handle the complaint.\r\n     */\r\n    get canOverride(): boolean {\r\n        if (this.modelingExercise) {\r\n            if (this.modelingExercise.isAtLeastInstructor) {\r\n                // Instructors can override any assessment at any time.\r\n                return true;\r\n            }\r\n            if (this.complaint && this.isAssessor) {\r\n                // If there is a complaint, the original assessor cannot override the result anymore.\r\n                return false;\r\n            }\r\n            let isBeforeAssessmentDueDate = true;\r\n            // Add check as the assessmentDueDate must not be set for exercises\r\n            if (this.modelingExercise.assessmentDueDate) {\r\n                isBeforeAssessmentDueDate = dayjs().isBefore(this.modelingExercise.assessmentDueDate!);\r\n            }\r\n            // tutors are allowed to override one of their assessments before the assessment due date.\r\n            return this.isAssessor && isBeforeAssessmentDueDate;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Remove a feedback suggestion because it was accepted or discarded.\r\n     * @param feedback Feedback suggestion to remove\r\n     */\r\n    removeSuggestion(feedback: Feedback) {\r\n        this.feedbackSuggestions = this.feedbackSuggestions.filter((feedbackSuggestion) => feedbackSuggestion !== feedback);\r\n    }\r\n\r\n    get readOnly(): boolean {\r\n        return !isAllowedToModifyFeedback(this.isTestRun, this.isAssessor, this.hasAssessmentDueDatePassed, this.result, this.complaint, this.modelingExercise);\r\n    }\r\n\r\n    private handleErrorResponse(error: HttpErrorResponse): void {\r\n        this.loadingInitialSubmission = false;\r\n        this.submission = undefined;\r\n\r\n        this.isLoading = false;\r\n        if (error.error && error.error.errorKey === 'lockedSubmissionsLimitReached') {\r\n            this.navigateBack();\r\n        } else {\r\n            this.onError();\r\n        }\r\n    }\r\n\r\n    onError(): void {\r\n        this.submission = undefined;\r\n        this.modelingExercise = undefined;\r\n        this.result = undefined;\r\n        this.model = undefined;\r\n        this.alertService.closeAll();\r\n        this.alertService.error('artemisApp.modelingAssessmentEditor.messages.loadSubmissionFailed');\r\n    }\r\n\r\n    onSaveAssessment() {\r\n        if (!this.modelingAssessmentService.isFeedbackTextValid(this.feedback)) {\r\n            this.alertService.error('artemisApp.modelingAssessmentEditor.messages.feedbackTextTooLong');\r\n            return;\r\n        }\r\n\r\n        this.modelingAssessmentService.saveAssessment(this.result!.id!, this.feedback, this.submission!.id!, this.result!.assessmentNote?.note).subscribe({\r\n            next: (result: Result) => {\r\n                this.result = result;\r\n                this.handleFeedback(this.result.feedbacks);\r\n                this.alertService.closeAll();\r\n                this.alertService.success('artemisApp.modelingAssessmentEditor.messages.saveSuccessful');\r\n            },\r\n            error: () => {\r\n                this.alertService.closeAll();\r\n                this.alertService.error('artemisApp.modelingAssessmentEditor.messages.saveFailed');\r\n            },\r\n        });\r\n    }\r\n\r\n    onSubmitAssessment() {\r\n        if ((this.model && this.referencedFeedback.length < Object.keys(this.model.elements).length) || !this.assessmentsAreValid) {\r\n            const confirmationMessage = this.translateService.instant('artemisApp.modelingAssessmentEditor.messages.confirmSubmission');\r\n\r\n            // if the assessment is before the assessment due date, don't show the confirm submission button\r\n            const isBeforeAssessmentDueDate = this.modelingExercise?.assessmentDueDate && dayjs().isBefore(this.modelingExercise.assessmentDueDate);\r\n            if (isBeforeAssessmentDueDate) {\r\n                this.submitAssessment();\r\n            } else {\r\n                const confirm = window.confirm(confirmationMessage);\r\n                if (confirm) {\r\n                    this.submitAssessment();\r\n                } else {\r\n                    this.highlightMissingFeedback = true;\r\n                    this.highlightElementsWithMissingFeedback();\r\n                }\r\n            }\r\n        } else {\r\n            this.submitAssessment();\r\n        }\r\n    }\r\n\r\n    private submitAssessment() {\r\n        if (!this.modelingAssessmentService.isFeedbackTextValid(this.feedback)) {\r\n            this.alertService.error('artemisApp.modelingAssessmentEditor.messages.feedbackTextTooLong');\r\n            return;\r\n        }\r\n\r\n        this.modelingAssessmentService.saveAssessment(this.result!.id!, this.feedback, this.submission!.id!, this.result!.assessmentNote?.note, true).subscribe({\r\n            next: (result: Result) => {\r\n                result.participation!.results = [result];\r\n                this.result = result;\r\n\r\n                this.alertService.closeAll();\r\n                this.alertService.success('artemisApp.modelingAssessmentEditor.messages.submitSuccessful');\r\n\r\n                this.highlightMissingFeedback = false;\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                let errorMessage = 'artemisApp.modelingAssessmentEditor.messages.submitFailed';\r\n                if (error.error && error.error.entityName && error.error.message) {\r\n                    errorMessage = `artemisApp.${error.error.entityName}.${error.error.message}`;\r\n                }\r\n                this.alertService.closeAll();\r\n                this.alertService.error(errorMessage);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends the current (updated) assessment to the server to update the original assessment after a complaint was accepted.\r\n     * The corresponding complaint response is sent along with the updated assessment to prevent additional requests.\r\n     *\r\n     * @param assessmentAfterComplaint the response to the complaint that is sent to the server along with the assessment update along with onSuccess and onError callbacks\r\n     */\r\n    onUpdateAssessmentAfterComplaint(assessmentAfterComplaint: AssessmentAfterComplaint): void {\r\n        this.validateFeedback();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.modelingAssessment.invalidAssessments');\r\n            assessmentAfterComplaint.onError();\r\n            return;\r\n        }\r\n        this.modelingAssessmentService\r\n            .updateAssessmentAfterComplaint(this.feedback, assessmentAfterComplaint.complaintResponse, this.submission!.id!, this.result?.assessmentNote?.note)\r\n            .subscribe({\r\n                next: (response) => {\r\n                    assessmentAfterComplaint.onSuccess();\r\n                    this.result = response.body!;\r\n                    // reconnect\r\n                    this.result.participation!.results = [this.result];\r\n                    this.alertService.closeAll();\r\n                    this.alertService.success('artemisApp.modelingAssessmentEditor.messages.updateAfterComplaintSuccessful');\r\n                },\r\n                error: (httpErrorResponse: HttpErrorResponse) => {\r\n                    assessmentAfterComplaint.onError();\r\n                    this.alertService.closeAll();\r\n                    const error = httpErrorResponse.error;\r\n                    if (error && error.errorKey && error.errorKey === 'complaintLock') {\r\n                        this.alertService.error(error.message, error.params);\r\n                    } else {\r\n                        this.alertService.error('artemisApp.modelingAssessmentEditor.messages.updateAfterComplaintFailed');\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancel the current assessment and navigate back to the exercise dashboard.\r\n     */\r\n    onCancelAssessment() {\r\n        const confirmCancel = window.confirm(this.cancelConfirmationText);\r\n        if (confirmCancel) {\r\n            this.modelingAssessmentService.cancelAssessment(this.submission!.id!).subscribe(() => {\r\n                this.navigateBack();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change handler for feedback changes coming from the Apollon modeling editor. Whenever an assessment is altered\r\n     * in the editor, this method is invoked and the assessment component updated to show the new entries.\r\n     * @param feedback The feedback present in the editor.\r\n     */\r\n    onFeedbackChanged(feedback: Feedback[]) {\r\n        this.updateApollonEditorWithFeedback(feedback);\r\n    }\r\n\r\n    assessNext() {\r\n        this.isLoading = true;\r\n        this.nextSubmissionBusy = true;\r\n        this.modelingSubmissionService.getSubmissionWithoutAssessment(this.modelingExercise!.id!, true, this.correctionRound).subscribe({\r\n            next: (submission?: ModelingSubmission) => {\r\n                if (!submission) {\r\n                    // there are no unassessed submissions\r\n                    this.submission = undefined;\r\n                    return;\r\n                }\r\n\r\n                this.nextSubmissionBusy = false;\r\n                this.isLoading = false;\r\n\r\n                // navigate to root and then to new assessment page to trigger re-initialization of the components\r\n                const url = getLinkToSubmissionAssessment(ExerciseType.MODELING, this.courseId, this.exerciseId, undefined, submission.id!, this.examId, this.exerciseGroupId);\r\n                this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => this.router.navigate(url, { queryParams: { 'correction-round': this.correctionRound } }));\r\n            },\r\n            error: (error: HttpErrorResponse) => {\r\n                this.nextSubmissionBusy = false;\r\n                this.handleErrorResponse(error);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validates the feedback:\r\n     *   - There must be any form of feedback, either unreferencing feedback or feedback referencing a model element or both\r\n     *   - Each reference feedback must have a score that is a valid number\r\n     */\r\n    validateFeedback() {\r\n        this.calculateTotalScore();\r\n        const hasReferencedFeedback = Feedback.haveCredits(this.referencedFeedback);\r\n        const hasUnreferencedFeedback = Feedback.haveCreditsAndComments(this.unreferencedFeedback);\r\n        // When unreferenced feedback is set, it has to be valid (score + detailed text)\r\n        this.assessmentsAreValid = (hasReferencedFeedback && this.unreferencedFeedback.length === 0) || hasUnreferencedFeedback;\r\n        this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission!);\r\n    }\r\n\r\n    navigateBack() {\r\n        assessmentNavigateBack(this.location, this.router, this.modelingExercise, this.submission, this.isTestRun);\r\n    }\r\n\r\n    /**\r\n     * Add all elements for which no corresponding feedback element exist to the map of highlighted elements. To make sure that we do not have outdated elements in the map, all\r\n     * elements with the corresponding \"missing feedback color\" get removed first.\r\n     */\r\n    private highlightElementsWithMissingFeedback() {\r\n        if (!this.model) {\r\n            return;\r\n        }\r\n\r\n        this.highlightedElements = this.highlightedElements\r\n            ? this.removeHighlightedFeedbackOfColor(this.highlightedElements, FeedbackHighlightColor.RED)\r\n            : new Map<string, string>();\r\n\r\n        const referenceIds = this.referencedFeedback.map((feedback) => feedback.referenceId);\r\n        for (const element of Object.values(this.model.elements)) {\r\n            if (!referenceIds.includes(element.id)) {\r\n                this.highlightedElements.set(element.id, FeedbackHighlightColor.RED);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add all automatic feedback elements to the map of highlighted elements. To make sure that we do not have outdated elements in the map, all elements with the corresponding\r\n     * \"automatic feedback color\" get removed first. The automatic feedback will not be highlighted anymore after the assessment has been completed.\r\n     */\r\n    private highlightAutomaticFeedback() {\r\n        if (this.result && this.result.completionDate) {\r\n            return;\r\n        }\r\n\r\n        this.highlightedElements = this.highlightedElements\r\n            ? this.removeHighlightedFeedbackOfColor(this.highlightedElements, FeedbackHighlightColor.CYAN)\r\n            : new Map<string, string>();\r\n\r\n        for (const feedbackItem of this.referencedFeedback) {\r\n            if (feedbackItem.type === FeedbackType.AUTOMATIC && feedbackItem.referenceId) {\r\n                this.highlightedElements.set(feedbackItem.referenceId, FeedbackHighlightColor.CYAN);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all elements with the given highlight color from the map of highlighted feedback elements.\r\n     *\r\n     * @param highlightedElements the map of highlighted feedback elements\r\n     * @param color the color of the elements that should be removed\r\n     */\r\n    private removeHighlightedFeedbackOfColor(highlightedElements: Map<string, string>, color: string) {\r\n        return new Map<string, string>([...highlightedElements].filter(([, value]) => value !== color));\r\n    }\r\n\r\n    /**\r\n     * Calculates the total score of the current assessment.\r\n     * This function originally checked whether the total score is negative\r\n     * or greater than the max. score, but we decided to remove the restriction\r\n     * and instead set the score boundaries on the server.\r\n     */\r\n    calculateTotalScore() {\r\n        const maxPoints = getTotalMaxPoints(this.modelingExercise!);\r\n        const creditsTotalScore = this.structuredGradingCriterionService.computeTotalScore(this.feedback);\r\n        this.totalScore = getPositiveAndCappedTotalScore(creditsTotalScore, maxPoints);\r\n    }\r\n\r\n    /**\r\n     * Invokes exampleSubmissionService when useAsExampleSubmission is emitted in assessment-layout\r\n     */\r\n    useStudentSubmissionAsExampleSubmission(): void {\r\n        if (this.submission && this.modelingExercise) {\r\n            this.exampleSubmissionService.import(this.submission.id!, this.modelingExercise.id!).subscribe({\r\n                next: () => this.alertService.success('artemisApp.exampleSubmission.submitSuccessful'),\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<jhi-assessment-layout\r\n    (navigateBack)=\"navigateBack()\"\r\n    [isLoading]=\"isLoading\"\r\n    [nextSubmissionBusy]=\"nextSubmissionBusy\"\r\n    [isTeamMode]=\"!!modelingExercise?.teamMode\"\r\n    [isAssessor]=\"isAssessor\"\r\n    [isTestRun]=\"isTestRun\"\r\n    [exerciseDashboardLink]=\"exerciseDashboardLink\"\r\n    [canOverride]=\"canOverride\"\r\n    [result]=\"result\"\r\n    [assessmentsAreValid]=\"assessmentsAreValid\"\r\n    [complaint]=\"complaint\"\r\n    [exercise]=\"modelingExercise\"\r\n    [submission]=\"submission\"\r\n    [hasAssessmentDueDatePassed]=\"hasAssessmentDueDatePassed\"\r\n    (save)=\"onSaveAssessment()\"\r\n    (onSubmit)=\"onSubmitAssessment()\"\r\n    (onCancel)=\"onCancelAssessment()\"\r\n    (nextSubmission)=\"assessNext()\"\r\n    (updateAssessmentAfterComplaint)=\"onUpdateAssessmentAfterComplaint($event)\"\r\n    [(highlightDifferences)]=\"highlightDifferences\"\r\n    [correctionRound]=\"correctionRound\"\r\n    (useAsExampleSubmission)=\"useStudentSubmissionAsExampleSubmission()\"\r\n>\r\n    @if (submission) {\r\n        @if (hasAutomaticFeedback && isAssessor && !result?.completionDate && !isFeedbackSuggestionsEnabled) {\r\n            <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.modelingAssessmentEditor.automaticAssessmentAvailable\"></div>\r\n        }\r\n        @if (hasAutomaticFeedback && isAssessor && !result?.completionDate && isFeedbackSuggestionsEnabled) {\r\n            <div class=\"alert alert-info\">\r\n                <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.generativeAIAssessmentAvailable\"></span>\r\n                <span style=\"float: right\" [ngbTooltip]=\"'artemisApp.modelingAssessmentEditor.generativeAIAssessmentInfo' | artemisTranslate\" tooltipClass=\"tooltip-wide\">\r\n                    <fa-icon [icon]=\"faQuestionCircle\" size=\"lg\" />\r\n                </span>\r\n            </div>\r\n        }\r\n        @if (isLoading && isFeedbackSuggestionsEnabled) {\r\n            <div class=\"alert\">\r\n                <fa-icon [icon]=\"faCircleNotch\" size=\"lg\" animation=\"spin\" class=\"me-2\" />\r\n                <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.automaticAssessmentLoading\"></span>\r\n            </div>\r\n        }\r\n        <div class=\"editor-container flex-grow-1\">\r\n            @if (submission) {\r\n                <jhi-modeling-assessment\r\n                    [diagramType]=\"modelingExercise?.diagramType\"\r\n                    [maxScore]=\"modelingExercise?.maxPoints || 0\"\r\n                    [maxBonusPoints]=\"modelingExercise?.bonusPoints || 0\"\r\n                    [totalScore]=\"totalScore\"\r\n                    [umlModel]=\"model!\"\r\n                    [readOnly]=\"readOnly\"\r\n                    [resultFeedbacks]=\"result?.feedbacks || []\"\r\n                    [highlightedElements]=\"highlightedElements\"\r\n                    (feedbackChanged)=\"onFeedbackChanged($event)\"\r\n                    [explanation]=\"submission?.explanationText || ''\"\r\n                    [highlightDifferences]=\"highlightDifferences\"\r\n                    [elementCounts]=\"submission && submission.similarElements\"\r\n                    [resizeOptions]=\"resizeOptions\"\r\n                    [course]=\"course\"\r\n                />\r\n            }\r\n            @if (modelingExercise) {\r\n                <jhi-collapsable-assessment-instructions [readOnly]=\"false\" [exercise]=\"modelingExercise\" [collapsed]=\"false\" />\r\n            }\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n            @if (result && result.id) {\r\n                <jhi-unreferenced-feedback\r\n                    [(feedbacks)]=\"unreferencedFeedback\"\r\n                    [feedbackSuggestions]=\"unreferencedFeedbackSuggestions\"\r\n                    (feedbacksChange)=\"validateFeedback()\"\r\n                    [readOnly]=\"readOnly\"\r\n                    [highlightDifferences]=\"highlightDifferences\"\r\n                    (onAcceptSuggestion)=\"removeSuggestion($event)\"\r\n                    (onDiscardSuggestion)=\"removeSuggestion($event)\"\r\n                    [resultId]=\"result.id\"\r\n                />\r\n            }\r\n            @if ((hasAutomaticFeedback || highlightMissingFeedback) && !result?.completionDate) {\r\n                <div class=\"col-md-6\">\r\n                    <h4 jhiTranslate=\"artemisApp.modelingAssessmentEditor.highlightingColors.title\"></h4>\r\n                    @if (hasAutomaticFeedback) {\r\n                        <div class=\"row\">\r\n                            <div class=\"mx-3 mb-2 highlighting-item color-cyan\"></div>\r\n                            <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.highlightingColors.automaticAssessment\"></span>\r\n                        </div>\r\n                    }\r\n                    @if (highlightMissingFeedback) {\r\n                        <div class=\"row\">\r\n                            <div class=\"mx-3 mb-2 highlighting-item color-red\"></div>\r\n                            <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.highlightingColors.missingAssessment\"></span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    } @else {\r\n        @if (!loadingInitialSubmission) {\r\n            <div class=\"alert alert-warning text-center mt-4\" role=\"alert\">\r\n                <p jhiTranslate=\"artemisApp.modelingAssessment.notFound\"></p>\r\n                <a [routerLink]=\"exerciseDashboardLink\" class=\"btn btn-info btn-sm me-1 mb-1 assessment-dashboard\">\r\n                    <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.exerciseDashboard\"></span>\r\n                </a>\r\n            </div>\r\n        }\r\n    }\r\n</jhi-assessment-layout>\r\n<ng-template #assessment>\r\n    @if (hasAutomaticFeedback && isAssessor && !result?.completionDate && !isFeedbackSuggestionsEnabled) {\r\n        <div class=\"alert alert-info\" jhiTranslate=\"artemisApp.modelingAssessmentEditor.automaticAssessmentAvailable\"></div>\r\n    }\r\n    @if (hasAutomaticFeedback && isAssessor && !result?.completionDate && isFeedbackSuggestionsEnabled) {\r\n        <div class=\"alert alert-info\">\r\n            <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.generativeAIAssessmentAvailable\"></span>\r\n            <span style=\"float: right\" [ngbTooltip]=\"'artemisApp.modelingAssessmentEditor.generativeAIAssessmentInfo' | artemisTranslate\" tooltipClass=\"tooltip-wide\">\r\n                <fa-icon [icon]=\"faQuestionCircle\" size=\"lg\" />\r\n            </span>\r\n        </div>\r\n    }\r\n    @if (isLoading && isFeedbackSuggestionsEnabled) {\r\n        <div class=\"alert\">\r\n            <fa-icon [icon]=\"faCircleNotch\" size=\"lg\" animation=\"spin\" class=\"me-2\" />\r\n            <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.automaticAssessmentLoading\"></span>\r\n        </div>\r\n    }\r\n    <div class=\"editor-container flex-grow-1\">\r\n        @if (submission) {\r\n            <jhi-modeling-assessment\r\n                [diagramType]=\"modelingExercise?.diagramType\"\r\n                [maxScore]=\"modelingExercise?.maxPoints || 0\"\r\n                [maxBonusPoints]=\"modelingExercise?.bonusPoints || 0\"\r\n                [totalScore]=\"totalScore\"\r\n                [umlModel]=\"model!\"\r\n                [readOnly]=\"readOnly\"\r\n                [resultFeedbacks]=\"result?.feedbacks || []\"\r\n                [highlightedElements]=\"highlightedElements\"\r\n                (feedbackChanged)=\"onFeedbackChanged($event)\"\r\n                [explanation]=\"submission?.explanationText || ''\"\r\n                [highlightDifferences]=\"highlightDifferences\"\r\n                [elementCounts]=\"submission && submission.similarElements\"\r\n                [resizeOptions]=\"resizeOptions\"\r\n                [course]=\"course\"\r\n            />\r\n        }\r\n        @if (modelingExercise) {\r\n            <jhi-collapsable-assessment-instructions [readOnly]=\"false\" [exercise]=\"modelingExercise\" [collapsed]=\"false\" />\r\n        }\r\n    </div>\r\n    <div class=\"row mt-3\">\r\n        @if (result && result.id) {\r\n            <jhi-unreferenced-feedback\r\n                [(feedbacks)]=\"unreferencedFeedback\"\r\n                (feedbacksChange)=\"validateFeedback()\"\r\n                [readOnly]=\"readOnly\"\r\n                [highlightDifferences]=\"highlightDifferences\"\r\n                [resultId]=\"result.id\"\r\n            />\r\n        }\r\n        @if ((hasAutomaticFeedback || highlightMissingFeedback) && !result?.completionDate) {\r\n            <div class=\"col-md-6\">\r\n                <h4 jhiTranslate=\"artemisApp.modelingAssessmentEditor.highlightingColors.title\"></h4>\r\n                @if (hasAutomaticFeedback) {\r\n                    <div class=\"row\">\r\n                        <div class=\"mx-3 mb-2 highlighting-item color-cyan\"></div>\r\n                        <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.highlightingColors.automaticAssessment\"></span>\r\n                    </div>\r\n                }\r\n                @if (highlightMissingFeedback) {\r\n                    <div class=\"row\">\r\n                        <div class=\"mx-3 mb-2 highlighting-item color-red\"></div>\r\n                        <span jhiTranslate=\"artemisApp.modelingAssessmentEditor.highlightingColors.missingAssessment\"></span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</ng-template>\r\n"],
  "mappings": "85HC0BYA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;SAAA,6BAEIA,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACAD,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,0BACIF,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EACJD,EAAA,EAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,mBAJmCI,EAAA,CAAA,EAAAC,EAAA,aAAAC,EAAA,EAAA,EAAA,gEAAA,CAAA,EACdF,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAC,gBAAA,6BAKjBR,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACAD,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,mBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAE,aAAA,sCAMTT,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,0BAAA,EAAA,EASIQ,EAAA,kBAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAN,EAAAO,EAAA,CAAA,EAAA,OAAAC,EAAmBR,EAAAS,kBAAAL,CAAA,CAAyB,CAAA,CAAA,EAThDR,EAAA,EAgBJH,EAAA,EAAA;aAAA,qBAfQI,EAAA,EAAAC,EAAA,cAAAE,EAAAU,kBAAA,KAAA,KAAAV,EAAAU,iBAAAC,WAAA,EAA6C,YAAAX,EAAAU,kBAAA,KAAA,KAAAV,EAAAU,iBAAAE,YAAA,CAAA,EACA,kBAAAZ,EAAAU,kBAAA,KAAA,KAAAV,EAAAU,iBAAAG,cAAA,CAAA,EACQ,aAAAb,EAAAc,UAAA,EAC5B,WAAAd,EAAAe,KAAA,EACN,WAAAf,EAAAgB,QAAA,EACE,mBAAAhB,EAAAiB,QAAA,KAAA,KAAAjB,EAAAiB,OAAAC,YAAAC,EAAA,GAAAC,EAAA,CAAA,EACsB,sBAAApB,EAAAqB,mBAAA,EACA,eAAArB,EAAAsB,YAAA,KAAA,KAAAtB,EAAAsB,WAAAC,kBAAA,EAAA,EAEM,uBAAAvB,EAAAwB,oBAAA,EACJ,gBAAAxB,EAAAsB,YAAAtB,EAAAsB,WAAAG,eAAA,EACa,gBAAAzB,EAAA0B,aAAA,EAC3B,SAAA1B,EAAA2B,MAAA,6BAKnClC,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,0CAAA,EAAA,EACJD,EAAA,EAAA;aAAA,mBAD6CI,EAAA,EAAAC,EAAA,WAAA,EAAA,EAAkB,WAAAE,EAAAU,gBAAA,EAA8B,YAAA,EAAA,sCAKzFjB,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,4BAAA,EAAA,EACIiC,EAAA,kBAAA,SAAAxB,EAAA,CAAAC,EAAAwB,CAAA,EAAA,IAAA7B,EAAAO,EAAA,CAAA,EAAAuB,OAAAC,EAAA/B,EAAAgC,qBAAA5B,CAAA,IAAAJ,EAAAgC,qBAAA5B,GAAAI,EAAAJ,CAAA,CAAA,CAAA,EAEAD,EAAA,kBAAA,UAAA,CAAAE,EAAAwB,CAAA,EAAA,IAAA7B,EAAAO,EAAA,CAAA,EAAA,OAAAC,EAAmBR,EAAAiC,iBAAA,CAAkB,CAAA,CAAA,EAAC,qBAAA,SAAA7B,EAAA,CAAAC,EAAAwB,CAAA,EAAA,IAAA7B,EAAAO,EAAA,CAAA,EAAA,OAAAC,EAGhBR,EAAAkC,iBAAA9B,CAAA,CAAwB,CAAA,CAAA,EAAC,sBAAA,SAAAA,EAAA,CAAAC,EAAAwB,CAAA,EAAA,IAAA7B,EAAAO,EAAA,CAAA,EAAA,OAAAC,EACxBR,EAAAkC,iBAAA9B,CAAA,CAAwB,CAAA,CAAA,EAPnDR,EAAA,EAUJH,EAAA,EAAA;aAAA,qBATQI,EAAA,EAAAsC,EAAA,YAAAnC,EAAAgC,oBAAA,EACAlC,EAAA,sBAAAE,EAAAoC,+BAAA,EAAuD,WAAApC,EAAAgB,QAAA,EAElC,uBAAAhB,EAAAwB,oBAAA,EACwB,WAAAxB,EAAAiB,OAAAoB,EAAA,0BAUzC5C,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;qBAAA,0BAEIA,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;qBAAA,6BAbJA,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,KAAA,EAAA,EACAD,EAAA,EAAA;qBAAA,EAAA6C,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA4B,EAAAC,GAAA,EAAA,CAAA,EAYhC5C,EAAA,EACJH,EAAA,EAAA;aAAA,mBAbQI,EAAA,CAAA,EAAA4C,EAAAzC,EAAA0C,qBAAA,EAAA,EAAA,EAMA7C,EAAA,EAAA4C,EAAAzC,EAAA2C,yBAAA,EAAA,EAAA,6BA9DZlD,EAAA,EAAA;SAAA,EAAA6C,EAAA,EAAAM,GAAA,EAAA,CAAA,EAAsG,EAAAC,GAAA,GAAA,CAAA,EAGD,EAAAC,GAAA,EAAA,CAAA,EAcrGnD,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAA6C,EAAA,EAAAS,GAAA,EAAA,EAAA,EAAkB,EAAAC,GAAA,EAAA,CAAA,EAqBtBpD,EAAA,EACAH,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,GAAA;aAAA,EAAA6C,EAAA,GAAAW,GAAA,EAAA,CAAA,EAA2B,GAAAC,GAAA,EAAA,CAAA,EA6B/BtD,EAAA,EACJH,EAAA,GAAA;KAAA,kBAvEII,EAAA,EAAA4C,EAAAzC,EAAA0C,sBAAA1C,EAAAmD,YAAA,EAAAnD,EAAAiB,QAAA,MAAAjB,EAAAiB,OAAAmC,iBAAA,CAAApD,EAAAqD,6BAAA,EAAA,EAAA,EAGAxD,EAAA,EAAA4C,EAAAzC,EAAA0C,sBAAA1C,EAAAmD,YAAA,EAAAnD,EAAAiB,QAAA,MAAAjB,EAAAiB,OAAAmC,iBAAApD,EAAAqD,6BAAA,EAAA,EAAA,EAQAxD,EAAA,EAAA4C,EAAAzC,EAAAsD,WAAAtD,EAAAqD,6BAAA,EAAA,EAAA,EAOIxD,EAAA,CAAA,EAAA4C,EAAAzC,EAAAsB,WAAA,EAAA,EAAA,EAkBAzB,EAAA,EAAA4C,EAAAzC,EAAAU,iBAAA,EAAA,EAAA,EAKAb,EAAA,CAAA,EAAA4C,EAAAzC,EAAAiB,QAAAjB,EAAAiB,OAAAoB,GAAA,GAAA,EAAA,EAYAxC,EAAA,EAAA4C,GAAAzC,EAAA0C,sBAAA1C,EAAA2C,2BAAA,EAAA3C,EAAAiB,QAAA,MAAAjB,EAAAiB,OAAAmC,gBAAA,GAAA,EAAA,6BAoBA3D,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,IAAA,EAAA,EACAD,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,IAAA,EAAA,EACIF,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,mBAJWI,EAAA,CAAA,EAAAC,EAAA,aAAAE,EAAAuD,qBAAA,6BAHX9D,EAAA,EAAA;SAAA,EAAA6C,EAAA,EAAAkB,GAAA,GAAA,CAAA,kBAAA3D,EAAA,EAAA4C,EAAAzC,EAAAyD,yBAAA,GAAA,CAAA,0BAYAhE,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;KAAA,6BAEIA,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACAD,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,0BACIF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EACJD,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,mBAJmCI,EAAA,CAAA,EAAAC,EAAA,aAAAC,EAAA,EAAA,EAAA,gEAAA,CAAA,EACdF,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAC,gBAAA,6BAKjBR,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACAD,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,mBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAE,aAAA,sCAMTT,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,0BAAA,EAAA,EASIQ,EAAA,kBAAA,SAAAC,EAAA,CAAAC,EAAAqD,CAAA,EAAA,IAAA1D,EAAAO,EAAA,CAAA,EAAA,OAAAC,EAAmBR,EAAAS,kBAAAL,CAAA,CAAyB,CAAA,CAAA,EAThDR,EAAA,EAgBJH,EAAA,EAAA;SAAA,qBAfQI,EAAA,EAAAC,EAAA,cAAAE,EAAAU,kBAAA,KAAA,KAAAV,EAAAU,iBAAAC,WAAA,EAA6C,YAAAX,EAAAU,kBAAA,KAAA,KAAAV,EAAAU,iBAAAE,YAAA,CAAA,EACA,kBAAAZ,EAAAU,kBAAA,KAAA,KAAAV,EAAAU,iBAAAG,cAAA,CAAA,EACQ,aAAAb,EAAAc,UAAA,EAC5B,WAAAd,EAAAe,KAAA,EACN,WAAAf,EAAAgB,QAAA,EACE,mBAAAhB,EAAAiB,QAAA,KAAA,KAAAjB,EAAAiB,OAAAC,YAAAC,EAAA,GAAAC,EAAA,CAAA,EACsB,sBAAApB,EAAAqB,mBAAA,EACA,eAAArB,EAAAsB,YAAA,KAAA,KAAAtB,EAAAsB,WAAAC,kBAAA,EAAA,EAEM,uBAAAvB,EAAAwB,oBAAA,EACJ,gBAAAxB,EAAAsB,YAAAtB,EAAAsB,WAAAG,eAAA,EACa,gBAAAzB,EAAA0B,aAAA,EAC3B,SAAA1B,EAAA2B,MAAA,6BAKnClC,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,0CAAA,EAAA,EACJD,EAAA,EAAA;SAAA,mBAD6CI,EAAA,EAAAC,EAAA,WAAA,EAAA,EAAkB,WAAAE,EAAAU,gBAAA,EAA8B,YAAA,EAAA,sCAKzFjB,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,4BAAA,EAAA,EACIiC,EAAA,kBAAA,SAAAxB,EAAA,CAAAC,EAAAsD,CAAA,EAAA,IAAA3D,EAAAO,EAAA,CAAA,EAAAuB,OAAAC,EAAA/B,EAAAgC,qBAAA5B,CAAA,IAAAJ,EAAAgC,qBAAA5B,GAAAI,EAAAJ,CAAA,CAAA,CAAA,EACAD,EAAA,kBAAA,UAAA,CAAAE,EAAAsD,CAAA,EAAA,IAAA3D,EAAAO,EAAA,CAAA,EAAA,OAAAC,EAAmBR,EAAAiC,iBAAA,CAAkB,CAAA,CAAA,EAFzCrC,EAAA,EAOJH,EAAA,EAAA;SAAA,qBANQI,EAAA,EAAAsC,EAAA,YAAAnC,EAAAgC,oBAAA,EAEAlC,EAAA,WAAAE,EAAAgB,QAAA,EAAqB,uBAAAhB,EAAAwB,oBAAA,EACwB,WAAAxB,EAAAiB,OAAAoB,EAAA,0BAQzC5C,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;iBAAA,0BAEIA,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;iBAAA,6BAbJA,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,KAAA,EAAA,EACAD,EAAA,EAAA;iBAAA,EAAA6C,EAAA,EAAAsB,GAAA,EAAA,CAAA,EAA4B,EAAAC,GAAA,EAAA,CAAA,EAYhCjE,EAAA,EACJH,EAAA,EAAA;SAAA,mBAbQI,EAAA,CAAA,EAAA4C,EAAAzC,EAAA0C,qBAAA,EAAA,EAAA,EAMA7C,EAAA,EAAA4C,EAAAzC,EAAA2C,yBAAA,EAAA,EAAA,6BA3DZlD,EAAA,EAAA;KAAA,EAAA6C,EAAA,EAAAwB,GAAA,EAAA,CAAA,EAAsG,EAAAC,GAAA,GAAA,CAAA,EAGD,EAAAC,GAAA,EAAA,CAAA,EAcrGrE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;SAAA,EAAA6C,EAAA,EAAA2B,GAAA,EAAA,EAAA,EAAkB,EAAAC,GAAA,EAAA,CAAA,EAqBtBtE,EAAA,EACAH,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,GAAA;SAAA,EAAA6C,EAAA,GAAA6B,GAAA,EAAA,CAAA,EAA2B,GAAAC,GAAA,EAAA,CAAA,EA0B/BxE,EAAA,EACJH,EAAA,GAAA;CAAA,kBApEII,EAAA,EAAA4C,EAAAzC,EAAA0C,sBAAA1C,EAAAmD,YAAA,EAAAnD,EAAAiB,QAAA,MAAAjB,EAAAiB,OAAAmC,iBAAA,CAAApD,EAAAqD,6BAAA,EAAA,EAAA,EAGAxD,EAAA,EAAA4C,EAAAzC,EAAA0C,sBAAA1C,EAAAmD,YAAA,EAAAnD,EAAAiB,QAAA,MAAAjB,EAAAiB,OAAAmC,iBAAApD,EAAAqD,6BAAA,EAAA,EAAA,EAQAxD,EAAA,EAAA4C,EAAAzC,EAAAsD,WAAAtD,EAAAqD,6BAAA,EAAA,EAAA,EAOIxD,EAAA,CAAA,EAAA4C,EAAAzC,EAAAsB,WAAA,EAAA,EAAA,EAkBAzB,EAAA,EAAA4C,EAAAzC,EAAAU,iBAAA,EAAA,EAAA,EAKAb,EAAA,CAAA,EAAA4C,EAAAzC,EAAAiB,QAAAjB,EAAAiB,OAAAoB,GAAA,GAAA,EAAA,EASAxC,EAAA,EAAA4C,GAAAzC,EAAA0C,sBAAA1C,EAAA2C,2BAAA,EAAA3C,EAAAiB,QAAA,MAAAjB,EAAAiB,OAAAmC,gBAAA,GAAA,EAAA,GDpGR,IAAaiB,IAAiC,IAAA,CAAxC,MAAOA,CAAiC,CAClCC,aAAeC,EAAOC,CAAY,EAClCC,OAASF,EAAOG,CAAM,EACtBC,MAAQJ,EAAOK,CAAc,EAC7BC,0BAA4BN,EAAOO,EAAyB,EAC5DC,0BAA4BR,EAAOS,EAAyB,EAC5DC,eAAiBV,EAAOW,CAAc,EACtCC,SAAWZ,EAAOa,CAAQ,EAC1BC,iBAAmBd,EAAOe,CAAgB,EAC1CC,iBAAmBhB,EAAOiB,EAAgB,EAC1CC,kCAAoClB,EAAOmB,EAAiC,EAC5EC,kBAAoBpB,EAAOqB,CAAiB,EAC5CC,yBAA2BtB,EAAOuB,EAAwB,EAC1DC,cAAgBxB,EAAOyB,EAAa,EAE5ClF,WAAa,EACbQ,WACAP,MACAL,iBACAiB,OACAV,OACAgF,mBAAiC,CAAA,EACjCjE,qBAAmC,CAAA,EACnCkE,kBAAgC,CAAA,EAChCC,oBAAkC,CAAA,EAClC9E,oBACAsB,yBAA2B,GAE3ByD,oBAAsB,GACtBC,mBACAC,SACAC,OAAS,EACTC,WACAC,gBACAlD,sBACAmD,OACAvD,WAAa,GACbwD,UACAC,cAAgBA,GAChBtD,UAAY,GACZuD,UAAY,GACZnE,qBAAuB,GACvBoE,2BACAC,gBAAkB,EAClBC,SACAvD,yBAA2B,GAC3BjC,qBAAuB,GACvBE,cAAgB,CAAEuF,eAAgB,EAAI,EACtCC,qBAAuB,GAEfC,uBAEWjH,cAAgBA,EAChBD,iBAAmBA,EAEtCmH,aAAA,CAC6B,KAAK/B,iBAEbgC,IAAI,4DAA4D,EAAEC,UAAWC,GAAU,KAAKJ,uBAAyBI,CAAK,CAC/I,CAKA,IAAYC,UAAQ,CAChB,MAAO,CAAC,GAAG,KAAKvB,mBAAoB,GAAG,KAAKjE,oBAAoB,CACpE,CAMA,IAAII,iCAA+B,CAC/B,OAAO,KAAK+D,oBAAoBsB,OAAQD,GAAa,CAACA,EAASE,SAAS,CAC5E,CAMA,IAAIrE,8BAA4B,CAC5B,MAAOsE,EAAQ,KAAKjH,kBAAkBkH,wBAC1C,CAEAC,UAAQ,CAEJ,KAAK5C,eAAe6C,SAAQ,EAAGC,KAAMC,GAAQ,CACzC,KAAKtB,OAASsB,EAAM3F,EACxB,CAAC,EAED,KAAKsC,MAAMsD,cAAcX,UAAWY,GAAe,CAC/C,KAAKrB,UAAYqB,EAAYb,IAAI,SAAS,IAAM,OAChD,KAAKN,gBAAkBoB,OAAOD,EAAYb,IAAI,kBAAkB,CAAC,CACrE,CAAC,EACD,KAAK1C,MAAMyD,SAASd,UAAWe,GAAU,CACrC,KAAK/B,SAAW6B,OAAOE,EAAOhB,IAAI,UAAU,CAAC,EAC7C,KAAKb,WAAa2B,OAAOE,EAAOhB,IAAI,YAAY,CAAC,EAC7CgB,EAAOC,IAAI,QAAQ,IACnB,KAAK/B,OAAS4B,OAAOE,EAAOhB,IAAI,QAAQ,CAAC,EACzC,KAAKZ,gBAAkB0B,OAAOE,EAAOhB,IAAI,iBAAiB,CAAC,GAG/D,KAAK9D,sBAAwBgF,GAAyB,KAAKjC,SAAU,KAAKE,WAAY,KAAKD,OAAQ,KAAKM,SAAS,EAEjH,IAAM2B,EAAeH,EAAOhB,IAAI,cAAc,EAC9C,KAAKL,SAAWmB,OAAOE,EAAOhB,IAAI,UAAU,CAAC,GAAK,EAC9CmB,IAAiB,MACjB,KAAKC,qBAAqB,KAAKjC,UAAU,EAEzC,KAAKkC,eAAeP,OAAOK,CAAY,CAAC,CAEhD,CAAC,CACL,CAOcG,wBAAwBC,EAA4BtH,EAAsB,QAAAuH,EAAA,sBACpF,GAAI,CACA,OAAQ,MAAMC,EAAe,KAAK/C,cAAcgD,+BAA+BH,EAAUtH,CAAU,CAAC,IAAM,CAAA,CAC9G,MAAgB,CACZ,YAAKgD,aAAa0E,MAAM,4EAA4E,EAC7F,CAAA,CACX,CACJ,GAMQN,eAAeF,EAAoB,CACvC,KAAK3D,0BAA0BoE,cAAcT,EAAc,KAAKzB,gBAAiB,KAAKC,QAAQ,EAAEM,UAAU,CACtG4B,KAAO5H,GAAkC,CACrC,KAAK6H,yBAAyB7H,CAAU,EACxC,KAAKW,iBAAgB,CACzB,EACA+G,MAAQA,GAA4B,CAChC,KAAKI,oBAAoBJ,CAAK,CAClC,EACH,CACL,CAEQP,qBAAqBjC,EAAkB,CAC3C,KAAK3B,0BAA0BwE,+BAA+B7C,EAAY,GAAM,KAAKO,eAAe,EAAEO,UAAU,CAC5G4B,KAAa5H,GAAmCuH,EAAA,sBAC5C,GAAI,CAACvH,EAAY,CAEb,KAAKA,WAAagI,OAClB,MACJ,CAEA,MAAM,KAAKH,yBAAyB7H,CAAU,EAC9C,KAAKW,iBAAgB,EAGrB,IAAMsH,EAASC,OAAOrE,SAASsE,KAAKC,QAAQ,IAAK,EAAE,EAAEA,QAAQ,MAAO,GAAG,KAAKpI,WAAYe,EAAE,EAAE,EAC5F,KAAK8C,SAASwE,GAAGJ,CAAM,CAC3B,GACAP,MAAQA,GAA4B,CAChC,KAAKI,oBAAoBJ,CAAK,CAClC,EACH,CACL,CAEcG,yBAAyB7H,EAA8B,QAAAuH,EAAA,sBACjE,KAAKpF,yBAA2B,GAChC,KAAKnC,WAAaA,EAClB,IAAMsI,EAAuB,KAAKtI,WAAWuI,cAC7C,KAAKnJ,iBAAmBkJ,EAAqBhB,SAC7C,KAAKjH,OAASmI,EAAsB,KAAKpJ,gBAAgB,EACrD,KAAKsG,SAAW,GAChB,KAAK/F,OAAS8I,EAAwBzI,EAAY,KAAK0F,QAAQ,EAE/D,KAAKD,gBAAkBzF,EAAW0I,SAASC,UAAWhJ,GAAWA,EAAOoB,KAAO,KAAK2E,QAAQ,GAE5F,KAAK/F,OAASiJ,EAAqC,KAAK5I,WAAY,KAAKyF,eAAe,EAE5F,KAAKD,2BAA6B,CAAC,CAAC,KAAKpG,kBAAkByJ,mBAAqBC,EAAM,KAAK1J,iBAAiByJ,iBAAiB,EAAEE,SAASD,EAAK,CAAE,EAE3I,KAAK9I,WAAWP,MAChB,KAAKA,MAAQuJ,KAAKC,MAAM,KAAKjJ,WAAWP,KAAK,GAE7C,KAAKuD,aAAakG,SAAQ,EAC1B,KAAKlG,aAAamG,QAAQ,sDAAsD,GAGpF,KAAKC,iBAAgB,EACrB,KAAKC,aAAY,EAEb,KAAK1J,QAAU,KAAKK,YAAYuI,gBAChC,KAAKvI,WAAWuI,cAAcG,QAAU,CAAC,KAAK/I,MAAM,EACpD,KAAKA,OAAO4I,cAAgB,KAAKvI,WAAWuI,eAG3C,KAAKnJ,iBAAiBC,cACvB,KAAKD,iBAAiBC,YAAciK,GAAeC,cAGnD,KAAK5J,QAAQC,UACb,KAAKD,OAAS,KAAK8D,0BAA0B+F,cAAc,KAAK7J,MAAM,EAC/D,KAAKA,SACZ,KAAKA,OAAOC,UAAY,CAAA,GAKxB,KAAKR,iBAAiBkH,2BAA6B,KAAK3G,QAAQC,WAAW6J,QAAU,KAAO,KAAK7E,kBAAkB6E,SACnH,KAAK5E,oBAAsB,MAAM,KAAKwC,wBAAwB,KAAKjI,iBAAkB,KAAKY,UAAU,EAEhG,KAAKL,SACL,KAAKA,OAAOC,UAAY,CAAC,GAAI,KAAKD,QAAQC,WAAa,CAAA,EAAK,GAAG,KAAKiF,oBAAoBsB,OAAQD,GAAaG,EAAQH,EAASE,SAAU,CAAC,IAIjJ,KAAKsD,eAAe,KAAK/J,QAAQC,SAAS,GAErC,CAAC,KAAKD,QAAQgK,UAAY,KAAKhK,OAAOgK,SAAS5I,KAAO,KAAKqE,SAAW,CAAC,KAAKzF,QAAQmC,iBACrF,KAAKkB,aAAakG,SAAQ,EAC1B,KAAKlG,aAAa4G,KAAK,mDAAmD,GAG9E,KAAKvF,kBAAkBwF,iCAAiC,KAAKpE,gBAAiB,KAAKzF,UAAU,EAE7F,KAAKgC,UAAY,EACrB,GAMQ8H,gCAAgClK,EAAqB,CACzD,KAAK+E,mBAAqB/E,EAAUuG,OAAQ4D,GAAoBA,EAAgB3D,SAAS,EAEpF,KAAKR,uBACN,KAAKA,qBAAuB,GAC5B,KAAKoE,oBAAmB,EACxB,KAAK3F,kBAAkBwF,iCAAiC,KAAKpE,gBAAiB,KAAKzF,UAAW,GAGlG,KAAKW,iBAAgB,CACzB,CAEQ0I,cAAY,CACX,KAAKrJ,YAGV,KAAKiE,iBAAiBgG,mBAAmB,KAAKjK,WAAWe,EAAG,EAAEiF,UAAU,CACpE4B,KAAOsC,GAAO,CACLA,EAAIC,OAGT,KAAK9E,UAAY6E,EAAIC,KACzB,EACAzC,MAAOA,IAAK,CACR,KAAK0C,QAAO,CAChB,EACH,CACL,CAQQV,eAAexD,EAAqB,CACpC,CAACA,GAAYA,EAASuD,SAAW,IAIrC,KAAK9E,mBAAqBuB,EAASC,OAAQ4D,GAAoBA,EAAgB3D,SAAS,EACxF,KAAK1F,qBAAuBwF,EAASC,OAAQ4D,GAAoB,CAACA,EAAgB3D,SAAS,EAE3F,KAAKhF,qBAAuB8E,EAASmE,KAAMC,GAAiBA,EAAaC,OAASC,EAAaC,SAAS,EACxG,KAAKC,2BAA0B,EAE3B,KAAKrJ,0BACL,KAAKsJ,qCAAoC,EAG7C,KAAKX,oBAAmB,EAC5B,CAEQZ,kBAAgB,CACpB,KAAKvH,WAAa,KAAKlC,QAAQgK,UAAU5I,KAAO,KAAKqE,MACzD,CASA,IAAIwF,aAAW,CACX,GAAI,KAAKxL,iBAAkB,CACvB,GAAI,KAAKA,iBAAiByL,oBAEtB,MAAO,GAEX,GAAI,KAAKxF,WAAa,KAAKxD,WAEvB,MAAO,GAEX,IAAIiJ,EAA4B,GAEhC,OAAI,KAAK1L,iBAAiByJ,oBACtBiC,EAA4BhC,EAAK,EAAGC,SAAS,KAAK3J,iBAAiByJ,iBAAkB,GAGlF,KAAKhH,YAAciJ,CAC9B,CACA,MAAO,EACX,CAMAlK,iBAAiBsF,EAAkB,CAC/B,KAAKrB,oBAAsB,KAAKA,oBAAoBsB,OAAQ4E,GAAuBA,IAAuB7E,CAAQ,CACtH,CAEA,IAAIxG,UAAQ,CACR,MAAO,CAACsL,GAA0B,KAAKzF,UAAW,KAAK1D,WAAY,KAAK2D,2BAA4B,KAAK7F,OAAQ,KAAK0F,UAAW,KAAKjG,gBAAgB,CAC1J,CAEQ0I,oBAAoBJ,EAAwB,CAChD,KAAKvF,yBAA2B,GAChC,KAAKnC,WAAagI,OAElB,KAAKhG,UAAY,GACb0F,EAAMA,OAASA,EAAMA,MAAMuD,WAAa,gCACxC,KAAKC,aAAY,EAEjB,KAAKd,QAAO,CAEpB,CAEAA,SAAO,CACH,KAAKpK,WAAagI,OAClB,KAAK5I,iBAAmB4I,OACxB,KAAKrI,OAASqI,OACd,KAAKvI,MAAQuI,OACb,KAAKhF,aAAakG,SAAQ,EAC1B,KAAKlG,aAAa0E,MAAM,mEAAmE,CAC/F,CAEAyD,kBAAgB,CACZ,GAAI,CAAC,KAAK1H,0BAA0B2H,oBAAoB,KAAKlF,QAAQ,EAAG,CACpE,KAAKlD,aAAa0E,MAAM,kEAAkE,EAC1F,MACJ,CAEA,KAAKjE,0BAA0B4H,eAAe,KAAK1L,OAAQoB,GAAK,KAAKmF,SAAU,KAAKlG,WAAYe,GAAK,KAAKpB,OAAQ2L,gBAAgBC,IAAI,EAAEvF,UAAU,CAC9I4B,KAAOjI,GAAkB,CACrB,KAAKA,OAASA,EACd,KAAK+J,eAAe,KAAK/J,OAAOC,SAAS,EACzC,KAAKoD,aAAakG,SAAQ,EAC1B,KAAKlG,aAAawI,QAAQ,6DAA6D,CAC3F,EACA9D,MAAOA,IAAK,CACR,KAAK1E,aAAakG,SAAQ,EAC1B,KAAKlG,aAAa0E,MAAM,yDAAyD,CACrF,EACH,CACL,CAEA+D,oBAAkB,CACd,GAAK,KAAKhM,OAAS,KAAKkF,mBAAmB8E,OAASiC,OAAOC,KAAK,KAAKlM,MAAMmM,QAAQ,EAAEnC,QAAW,CAAC,KAAK3E,oBAAqB,CACvH,IAAM+G,EAAsB,KAAK9H,iBAAiB+H,QAAQ,gEAAgE,EAGxF,KAAK1M,kBAAkByJ,mBAAqBC,EAAK,EAAGC,SAAS,KAAK3J,iBAAiByJ,iBAAiB,EAElI,KAAKkD,iBAAgB,EAEL7D,OAAO8D,QAAQH,CAAmB,EAE9C,KAAKE,iBAAgB,GAErB,KAAK1K,yBAA2B,GAChC,KAAKsJ,qCAAoC,EAGrD,MACI,KAAKoB,iBAAgB,CAE7B,CAEQA,kBAAgB,CACpB,GAAI,CAAC,KAAKtI,0BAA0B2H,oBAAoB,KAAKlF,QAAQ,EAAG,CACpE,KAAKlD,aAAa0E,MAAM,kEAAkE,EAC1F,MACJ,CAEA,KAAKjE,0BAA0B4H,eAAe,KAAK1L,OAAQoB,GAAK,KAAKmF,SAAU,KAAKlG,WAAYe,GAAK,KAAKpB,OAAQ2L,gBAAgBC,KAAM,EAAI,EAAEvF,UAAU,CACpJ4B,KAAOjI,GAAkB,CACrBA,EAAO4I,cAAeG,QAAU,CAAC/I,CAAM,EACvC,KAAKA,OAASA,EAEd,KAAKqD,aAAakG,SAAQ,EAC1B,KAAKlG,aAAawI,QAAQ,+DAA+D,EAEzF,KAAKnK,yBAA2B,EACpC,EACAqG,MAAQA,GAA4B,CAChC,IAAIuE,EAAe,4DACfvE,EAAMA,OAASA,EAAMA,MAAMwE,YAAcxE,EAAMA,MAAMyE,UACrDF,EAAe,cAAcvE,EAAMA,MAAMwE,UAAU,IAAIxE,EAAMA,MAAMyE,OAAO,IAE9E,KAAKnJ,aAAakG,SAAQ,EAC1B,KAAKlG,aAAa0E,MAAMuE,CAAY,CACxC,EACH,CACL,CAQAG,iCAAiCC,EAAkD,CAE/E,GADA,KAAK1L,iBAAgB,EACjB,CAAC,KAAKmE,oBAAqB,CAC3B,KAAK9B,aAAa0E,MAAM,kDAAkD,EAC1E2E,EAAyBjC,QAAO,EAChC,MACJ,CACA,KAAK3G,0BACA6I,+BAA+B,KAAKpG,SAAUmG,EAAyBE,kBAAmB,KAAKvM,WAAYe,GAAK,KAAKpB,QAAQ2L,gBAAgBC,IAAI,EACjJvF,UAAU,CACP4B,KAAO4E,GAAY,CACfH,EAAyBI,UAAS,EAClC,KAAK9M,OAAS6M,EAASrC,KAEvB,KAAKxK,OAAO4I,cAAeG,QAAU,CAAC,KAAK/I,MAAM,EACjD,KAAKqD,aAAakG,SAAQ,EAC1B,KAAKlG,aAAawI,QAAQ,6EAA6E,CAC3G,EACA9D,MAAQgF,GAAwC,CAC5CL,EAAyBjC,QAAO,EAChC,KAAKpH,aAAakG,SAAQ,EAC1B,IAAMxB,EAAQgF,EAAkBhF,MAC5BA,GAASA,EAAMuD,UAAYvD,EAAMuD,WAAa,gBAC9C,KAAKjI,aAAa0E,MAAMA,EAAMyE,QAASzE,EAAMX,MAAM,EAEnD,KAAK/D,aAAa0E,MAAM,yEAAyE,CAEzG,EACH,CACT,CAKAiF,oBAAkB,CACQzE,OAAO8D,QAAQ,KAAKnG,sBAAsB,GAE5D,KAAKpC,0BAA0BmJ,iBAAiB,KAAK5M,WAAYe,EAAG,EAAEiF,UAAU,IAAK,CACjF,KAAKkF,aAAY,CACrB,CAAC,CAET,CAOA/L,kBAAkB+G,EAAoB,CAClC,KAAK4D,gCAAgC5D,CAAQ,CACjD,CAEA2G,YAAU,CACN,KAAK7K,UAAY,GACjB,KAAK+C,mBAAqB,GAC1B,KAAKxB,0BAA0BwE,+BAA+B,KAAK3I,iBAAkB2B,GAAK,GAAM,KAAK0E,eAAe,EAAEO,UAAU,CAC5H4B,KAAO5H,GAAmC,CACtC,GAAI,CAACA,EAAY,CAEb,KAAKA,WAAagI,OAClB,MACJ,CAEA,KAAKjD,mBAAqB,GAC1B,KAAK/C,UAAY,GAGjB,IAAM8K,EAAMC,GAA8BC,EAAaC,SAAU,KAAKjI,SAAU,KAAKE,WAAY8C,OAAWhI,EAAWe,GAAK,KAAKkE,OAAQ,KAAKE,eAAe,EAC7J,KAAKhC,OAAO+J,cAAc,IAAK,CAAEC,mBAAoB,EAAI,CAAE,EAAE1G,KAAK,IAAM,KAAKtD,OAAOiK,SAASN,EAAK,CAAElG,YAAa,CAAE,mBAAoB,KAAKnB,eAAe,CAAE,CAAE,CAAC,CACpK,EACAiC,MAAQA,GAA4B,CAChC,KAAK3C,mBAAqB,GAC1B,KAAK+C,oBAAoBJ,CAAK,CAClC,EACH,CACL,CAOA/G,kBAAgB,CACZ,KAAKqJ,oBAAmB,EACxB,IAAMqD,EAAwBC,EAASC,YAAY,KAAK5I,kBAAkB,EACpE6I,EAA0BF,EAASG,uBAAuB,KAAK/M,oBAAoB,EAEzF,KAAKoE,oBAAuBuI,GAAyB,KAAK3M,qBAAqB+I,SAAW,GAAM+D,EAChG,KAAKnJ,kBAAkBwF,iCAAiC,KAAKpE,gBAAiB,KAAKzF,UAAW,CAClG,CAEAkL,cAAY,CACRwC,GAAuB,KAAK7J,SAAU,KAAKV,OAAQ,KAAK/D,iBAAkB,KAAKY,WAAY,KAAKuF,SAAS,CAC7G,CAMQoF,sCAAoC,CACxC,GAAI,CAAC,KAAKlL,MACN,OAGJ,KAAKM,oBAAsB,KAAKA,oBAC1B,KAAK4N,iCAAiC,KAAK5N,oBAAqB6N,EAAuBC,GAAG,EAC1F,IAAIC,IAEV,IAAMC,EAAe,KAAKpJ,mBAAmBqJ,IAAK9H,GAAaA,EAAS+H,WAAW,EACnF,QAAWC,KAAWxC,OAAOyC,OAAO,KAAK1O,MAAMmM,QAAQ,EAC9CmC,EAAaK,SAASF,EAAQnN,EAAE,GACjC,KAAKhB,oBAAoBsO,IAAIH,EAAQnN,GAAI6M,EAAuBC,GAAG,CAG/E,CAMQnD,4BAA0B,CAC9B,GAAI,OAAK/K,QAAU,KAAKA,OAAOmC,gBAI/B,MAAK/B,oBAAsB,KAAKA,oBAC1B,KAAK4N,iCAAiC,KAAK5N,oBAAqB6N,EAAuBU,IAAI,EAC3F,IAAIR,IAEV,QAAWxD,KAAgB,KAAK3F,mBACxB2F,EAAaC,OAASC,EAAaC,WAAaH,EAAa2D,aAC7D,KAAKlO,oBAAoBsO,IAAI/D,EAAa2D,YAAaL,EAAuBU,IAAI,EAG9F,CAQQX,iCAAiC5N,EAA0CwO,EAAa,CAC5F,OAAO,IAAIT,IAAoB,CAAC,GAAG/N,CAAmB,EAAEoG,OAAO,CAAC,CAAA,CAAGqI,CAAK,IAAMA,IAAUD,CAAK,CAAC,CAClG,CAQAvE,qBAAmB,CACf,IAAM1K,EAAYmP,GAAkB,KAAKrP,gBAAiB,EACpDsP,EAAoB,KAAKvK,kCAAkCwK,kBAAkB,KAAKzI,QAAQ,EAChG,KAAK1G,WAAaoP,GAA+BF,EAAmBpP,CAAS,CACjF,CAKAuP,yCAAuC,CAC/B,KAAK7O,YAAc,KAAKZ,kBACxB,KAAKmF,yBAAyBuK,OAAO,KAAK9O,WAAWe,GAAK,KAAK3B,iBAAiB2B,EAAG,EAAEiF,UAAU,CAC3F4B,KAAMA,IAAM,KAAK5E,aAAawI,QAAQ,+CAA+C,EACrF9D,MAAQA,GAA6B0C,EAAQ,KAAKpH,aAAc0E,CAAK,EACxE,CAET,4CAjlBS3E,EAAiC,2BAAjCA,EAAiCgM,UAAA,CAAA,CAAA,gCAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,aAAA,EAAA,EAAA,CAAA,EAAA,eAAA,OAAA,WAAA,WAAA,iBAAA,iCAAA,6BAAA,yBAAA,YAAA,qBAAA,aAAA,aAAA,YAAA,wBAAA,cAAA,SAAA,sBAAA,YAAA,WAAA,aAAA,6BAAA,uBAAA,iBAAA,EAAA,CAAA,EAAA,mBAAA,aAAA,EAAA,CAAA,EAAA,MAAA,MAAA,EAAA,CAAA,eAAA,mEAAA,EAAA,QAAA,YAAA,EAAA,CAAA,EAAA,QAAA,YAAA,EAAA,CAAA,eAAA,qEAAA,EAAA,CAAA,eAAA,eAAA,EAAA,QAAA,QAAA,EAAA,YAAA,EAAA,CAAA,OAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,OAAA,KAAA,YAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,CAAA,eAAA,gEAAA,EAAA,CAAA,EAAA,kBAAA,cAAA,WAAA,iBAAA,aAAA,WAAA,WAAA,kBAAA,sBAAA,cAAA,uBAAA,gBAAA,gBAAA,QAAA,EAAA,CAAA,EAAA,WAAA,WAAA,WAAA,EAAA,CAAA,EAAA,kBAAA,qBAAA,sBAAA,YAAA,sBAAA,WAAA,uBAAA,UAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,eAAA,8DAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,OAAA,OAAA,oBAAA,YAAA,EAAA,CAAA,eAAA,4EAAA,EAAA,CAAA,EAAA,OAAA,OAAA,oBAAA,WAAA,EAAA,CAAA,eAAA,0EAAA,EAAA,CAAA,OAAA,QAAA,EAAA,QAAA,gBAAA,cAAA,MAAA,EAAA,CAAA,eAAA,wCAAA,EAAA,CAAA,EAAA,MAAA,WAAA,SAAA,OAAA,OAAA,uBAAA,EAAA,YAAA,EAAA,CAAA,eAAA,kCAAA,EAAA,SAAA,aAAA,EAAA,CAAA,EAAA,kBAAA,YAAA,WAAA,uBAAA,UAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAA,GAAAD,EAAA,EAAA,WC1D9C/Q,EAAA,EAAA,wBAAA,CAAA,EACIQ,EAAA,eAAA,UAAA,CAAA2B,OAAAzB,EAAAuQ,CAAA,EAAApQ,EAAgBmQ,EAAAnE,aAAA,CAAc,CAAA,CAAA,EAAC,OAAA,UAAA,CAAA1K,OAAAzB,EAAAuQ,CAAA,EAAApQ,EAcvBmQ,EAAAlE,iBAAA,CAAkB,CAAA,CAAA,EAAC,WAAA,UAAA,CAAA3K,OAAAzB,EAAAuQ,CAAA,EAAApQ,EACfmQ,EAAA5D,mBAAA,CAAoB,CAAA,CAAA,EAAC,WAAA,UAAA,CAAAjL,OAAAzB,EAAAuQ,CAAA,EAAApQ,EACrBmQ,EAAA1C,mBAAA,CAAoB,CAAA,CAAA,EAAC,iBAAA,UAAA,CAAAnM,OAAAzB,EAAAuQ,CAAA,EAAApQ,EACfmQ,EAAAxC,WAAA,CAAY,CAAA,CAAA,EAAC,iCAAA,SAAA/N,EAAA,CAAA0B,OAAAzB,EAAAuQ,CAAA,EAAApQ,EACGmQ,EAAAjD,iCAAAtN,CAAA,CAAwC,CAAA,CAAA,EAC1EwB,EAAA,6BAAA,SAAAxB,EAAA,CAAA0B,OAAAzB,EAAAuQ,CAAA,EAAA7O,EAAA4O,EAAAnP,qBAAApB,CAAA,IAAAuQ,EAAAnP,qBAAApB,GAAAI,EAAAJ,CAAA,CAAA,CAAA,EAEAD,EAAA,yBAAA,UAAA,CAAA2B,OAAAzB,EAAAuQ,CAAA,EAAApQ,EAA0BmQ,EAAAR,wCAAA,CAAyC,CAAA,CAAA,EAEnE1Q,EAAA,EAAA;KAAA,EAAA6C,EAAA,EAAAuO,GAAA,GAAA,CAAA,EAAkB,EAAAC,GAAA,EAAA,CAAA,EAkFtBlR,EAAA,EACAH,EAAA,EAAA;CAAA,EAAA6C,EAAA,EAAAyO,GAAA,GAAA,EAAA,cAAA,KAAA,EAAAC,CAAA,EAsEAvR,EAAA,EAAA;CAAA,QA/KIK,EAAA,YAAA6Q,EAAArN,SAAA,EAAuB,qBAAAqN,EAAAtK,kBAAA,EACkB,aAAA,CAAA,EAAAsK,EAAAjQ,kBAAA,MAAAiQ,EAAAjQ,iBAAAuQ,SAAA,EACE,aAAAN,EAAAxN,UAAA,EAClB,YAAAwN,EAAA9J,SAAA,EACF,wBAAA8J,EAAApN,qBAAA,EACwB,cAAAoN,EAAAzE,WAAA,EACpB,SAAAyE,EAAA1P,MAAA,EACV,sBAAA0P,EAAAvK,mBAAA,EAC0B,YAAAuK,EAAAhK,SAAA,EACpB,WAAAgK,EAAAjQ,gBAAA,EACM,aAAAiQ,EAAArP,UAAA,EACJ,6BAAAqP,EAAA7J,0BAAA,EAOzB3E,EAAA,uBAAAwO,EAAAnP,oBAAA,EACA1B,EAAA,kBAAA6Q,EAAA5J,eAAA,EAGAlH,EAAA,CAAA,EAAA4C,EAAAkO,EAAArP,WAAA,EAAA,CAAA,kBDuBI4P,GACAC,GACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACAC,CAAoB,EAAAC,OAAA,CAAA,kvBAAA,CAAA,CAAA,SAGftN,CAAiC,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "ctx_r1", "faQuestionCircle", "faCircleNotch", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onFeedbackChanged", "modelingExercise", "diagramType", "maxPoints", "bonusPoints", "totalScore", "model", "readOnly", "result", "feedbacks", "\u0275\u0275pureFunction0", "_c0", "highlightedElements", "submission", "explanationText", "highlightDifferences", "similarElements", "resizeOptions", "course", "\u0275\u0275twoWayListener", "_r4", "i0", "\u0275\u0275twoWayBindingSet", "unreferencedFeedback", "validateFeedback", "removeSuggestion", "\u0275\u0275twoWayProperty", "unreferencedFeedbackSuggestions", "id", "\u0275\u0275template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_12_Conditional_5_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_12_Conditional_6_Template", "\u0275\u0275conditional", "hasAutomaticFeedback", "highlightMissingFeedback", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_1_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_2_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_3_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_6_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_7_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_11_Template", "ModelingAssessmentEditorComponent_Conditional_2_Conditional_12_Template", "isAssessor", "completionDate", "isFeedbackSuggestionsEnabled", "isLoading", "exerciseDashboardLink", "ModelingAssessmentEditorComponent_Conditional_3_Conditional_1_Template", "loadingInitialSubmission", "_r5", "_r6", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_12_Conditional_5_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_12_Conditional_6_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_1_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_2_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_3_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_6_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_7_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_11_Template", "ModelingAssessmentEditorComponent_ng_template_5_Conditional_12_Template", "ModelingAssessmentEditorComponent", "alertService", "inject", "AlertService", "router", "Router", "route", "ActivatedRoute", "modelingSubmissionService", "ModelingSubmissionService", "modelingAssessmentService", "ModelingAssessmentService", "accountService", "AccountService", "location", "Location", "translateService", "TranslateService", "complaintService", "ComplaintService", "structuredGradingCriterionService", "StructuredGradingCriterionService", "submissionService", "SubmissionService", "exampleSubmissionService", "ExampleSubmissionService", "athenaService", "AthenaService", "referencedFeedback", "automaticFeedback", "feedbackSuggestions", "assessmentsAreValid", "nextSubmissionBusy", "courseId", "examId", "exerciseId", "exerciseGroupId", "userId", "complaint", "ComplaintType", "isTestRun", "hasAssessmentDueDatePassed", "correctionRound", "resultId", "verticalResize", "isApollonModelLoaded", "cancelConfirmationText", "constructor", "get", "subscribe", "text", "feedback", "filter", "reference", "Boolean", "feedbackSuggestionModule", "ngOnInit", "identity", "then", "user", "queryParamMap", "queryParams", "Number", "paramMap", "params", "has", "getExerciseDashboardLink", "submissionId", "loadRandomSubmission", "loadSubmission", "loadFeedbackSuggestions", "exercise", "__async", "firstValueFrom", "getModelingFeedbackSuggestions", "error", "getSubmission", "next", "handleReceivedSubmission", "handleErrorResponse", "getSubmissionWithoutAssessment", "undefined", "newUrl", "window", "hash", "replace", "go", "studentParticipation", "participation", "getCourseFromExercise", "getSubmissionResultById", "results", "findIndex", "getSubmissionResultByCorrectionRound", "assessmentDueDate", "dayjs", "isBefore", "JSON", "parse", "closeAll", "warning", "checkPermissions", "getComplaint", "UMLDiagramType", "ClassDiagram", "convertResult", "length", "handleFeedback", "assessor", "info", "handleFeedbackCorrectionRoundTag", "updateApollonEditorWithFeedback", "feedbackElement", "calculateTotalScore", "findBySubmissionId", "res", "body", "onError", "some", "feedbackItem", "type", "FeedbackType", "AUTOMATIC", "highlightAutomaticFeedback", "highlightElementsWithMissingFeedback", "canOverride", "isAtLeastInstructor", "isBeforeAssessmentDueDate", "feedbackSuggestion", "isAllowedToModifyFeedback", "errorKey", "navigateBack", "onSaveAssessment", "isFeedbackTextValid", "saveAssessment", "assessmentNote", "note", "success", "onSubmitAssessment", "Object", "keys", "elements", "confirmationMessage", "instant", "submitAssessment", "confirm", "errorMessage", "entityName", "message", "onUpdateAssessmentAfterComplaint", "assessmentAfterComplaint", "updateAssessmentAfterComplaint", "complaintResponse", "response", "onSuccess", "httpErrorResponse", "onCancelAssessment", "cancelAssessment", "assessNext", "url", "getLinkToSubmissionAssessment", "ExerciseType", "MODELING", "navigateByUrl", "skipLocationChange", "navigate", "hasReferencedFeedback", "Feedback", "haveCredits", "hasUnreferencedFeedback", "haveCreditsAndComments", "assessmentNavigateBack", "removeHighlightedFeedbackOfColor", "FeedbackHighlightColor", "RED", "Map", "referenceIds", "map", "referenceId", "element", "values", "includes", "set", "CYAN", "color", "value", "getTotalMaxPoints", "creditsTotalScore", "computeTotalScore", "getPositiveAndCappedTotalScore", "useStudentSubmissionAsExampleSubmission", "import", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "ModelingAssessmentEditorComponent_Conditional_2_Template", "ModelingAssessmentEditorComponent_Conditional_3_Template", "ModelingAssessmentEditorComponent_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "teamMode", "AssessmentLayoutComponent", "TranslateDirective", "NgbTooltip", "FaIconComponent", "ModelingAssessmentComponent", "CollapsableAssessmentInstructionsComponent", "UnreferencedFeedbackComponent", "RouterLink", "ArtemisTranslatePipe", "styles"]
}
