{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/data-table/data-table.component.ts", "src/main/webapp/app/shared/data-table/data-table.component.html"],
  "sourcesContent": ["import {\r\n    Component,\r\n    ContentChild,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    inject,\r\n} from '@angular/core';\r\nimport { debounceTime, distinctUntilChanged, map, tap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { ColumnMode, SortType } from '@siemens/ngx-datatable';\r\nimport { flatten, get, isNumber } from 'lodash-es';\r\nimport { BaseEntity, StringBaseEntity } from 'app/shared/model/base-entity';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { faCircleNotch, faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../language/translate.directive';\r\nimport { NgTemplateOutlet } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from '../pipes/artemis-translate.pipe';\r\n\r\n/**\r\n * Enum for ascending and descending order.\r\n * @readonly\r\n * @enum {string}\r\n */\r\nenum SortOrder {\r\n    ASC = 'asc',\r\n    DESC = 'desc',\r\n}\r\n\r\n/**\r\n * Enum for the sort icon.\r\n * @readonly\r\n * @enum {string}\r\n */\r\nconst SortIcon = {\r\n    NONE: faSort,\r\n    ASC: faSortUp,\r\n    DESC: faSortDown,\r\n};\r\n\r\nconst SortOrderIcon = {\r\n    [SortOrder.ASC]: SortIcon.ASC,\r\n    [SortOrder.DESC]: SortIcon.DESC,\r\n};\r\n\r\ntype SortProp = {\r\n    field: string;\r\n    order: SortOrder;\r\n};\r\n\r\ntype PagingValue = number | 'all';\r\n\r\n@Component({\r\n    selector: 'jhi-data-table',\r\n    templateUrl: './data-table.component.html',\r\n    styleUrls: ['data-table.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        NgbDropdownButtonItem,\r\n        NgbDropdownItem,\r\n        NgbTypeahead,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgTemplateOutlet,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class DataTableComponent implements OnInit, OnChanges {\r\n    private sortService = inject(SortService);\r\n    private localStorage = inject(LocalStorageService);\r\n\r\n    /**\r\n     * @property templateRef Ref to the content child of this component (which is ngx-datatable)\r\n     */\r\n    @ContentChild(TemplateRef, { read: TemplateRef, static: false }) templateRef: TemplateRef<any>;\r\n\r\n    /**\r\n     * @property ngbTypeahead Ref to the autocomplete component from Angular\r\n     */\r\n    @ViewChild('ngbTypeahead', { static: false }) ngbTypeahead: ElementRef;\r\n\r\n    /**\r\n     * @property isLoading Loading state of the data that is fetched by the ancestral component\r\n     * @property isSearching Whether to show a spinner inside of the input field on the right side (indicating a server search)\r\n     * @property searchFailed Whether to show a badge that indicates that the search has failed\r\n     * @property searchNoResults Whether to show a badge that indicates that the search did not return any results\r\n     * @property isTransitioning Loading overlay on top of the table indicating that the content is changing\r\n     * @property showPageSizeDropdown Flag whether to show the \"entities per page\" dropdown\r\n     * @property showSearchField Flag whether to show the search input field\r\n     * @property entityType Entity identifier (e.g. 'result' or 'participation') used as a key to differentiate from other tables\r\n     * @property allEntities List of all entities that should be displayed in the table (one entity per row)\r\n     * @property entitiesPerPageTranslation Translation string that has the variable {{ number }} in it (e.g. 'artemisApp.exercise.resultsPerPage')\r\n     * @property showAllEntitiesTranslation Translation string if all entities should be displayed (e.g. 'artemisApp.exercise.showAll')\r\n     * @property searchNoResultsTranslation Translation string that has the variable {{ length }} in it (default: 'artemisApp.dataTable.search.noResults')\r\n     * @property searchPlaceholderTranslation Translation string that is used for the placeholder in the search input field\r\n     * @property minQueryLengthHintTranslation Translation string that is used to inform the user about the min. number of characters that must be input to trigger a search\r\n     * @property searchFields Fields of entity whose values will be compared to the user's search string (allows nested attributes, e.g. ['student.login', 'student.name'])\r\n     * @property searchEnabled Flag whether searching is enabled (default: true)\r\n     * @property searchEntityFilterEnabled Flag whether searching should cause a filtering of the entities (default: true)\r\n     * @function searchTextFromEntity Function that takes an entity and returns a text that is inserted into the search input field when clicking on an autocomplete suggestion\r\n     * @function searchResultFormatter Function that takes an entity and returns the text for the autocomplete suggestion result row\r\n     * @function onSearchWrapper Wrapper around the onSearch method that can be used to modify the items displayed in the autocomplete\r\n     * @function onAutocompleteSelectWrapper Wrapper that can be used to hook into the process when an entity was selected in the autocomplete\r\n     * @function customFilter Function that takes an entity and returns true or false depending on whether this entity should be shown (combine with customFilterKey)\r\n     * @property customFilterKey Filter state of an ancestral component which triggers a table re-rendering if it changes\r\n     */\r\n    @Input() isLoading = false;\r\n    @Input() isSearching = false;\r\n    @Input() searchFailed = false;\r\n    @Input() searchNoResults = false;\r\n    @Input() isTransitioning = false;\r\n    @Input() showPageSizeDropdown = true;\r\n    @Input() showSearchField = true;\r\n    @Input() entityType = 'entity';\r\n    @Input() allEntities: (BaseEntity | StringBaseEntity)[] = [];\r\n    @Input() entitiesPerPageTranslation: string;\r\n    @Input() showAllEntitiesTranslation: string;\r\n    @Input() searchNoResultsTranslation = 'artemisApp.dataTable.search.noResults';\r\n    @Input() searchPlaceholderTranslation: string;\r\n    @Input() minQueryLengthHintTranslation = 'artemisApp.dataTable.search.minQueryLengthHint';\r\n    @Input() searchFields: string[] = [];\r\n    @Input() searchEnabled = true;\r\n    @Input() searchEntityFilterEnabled = true;\r\n    @Input() searchTextFromEntity: (entity: BaseEntity | StringBaseEntity) => string = entityToString;\r\n    @Input() searchResultFormatter: (entity: BaseEntity | StringBaseEntity) => string = entityToString;\r\n    @Input() onSearchWrapper: (stream: Observable<{ text: string; entities: (BaseEntity | StringBaseEntity)[] }>) => Observable<(BaseEntity | StringBaseEntity)[]> =\r\n        onSearchDefaultWrapper;\r\n    @Input() onAutocompleteSelectWrapper: (entity: BaseEntity | StringBaseEntity, callback: (entity: BaseEntity | StringBaseEntity) => void) => void =\r\n        onAutocompleteSelectDefaultWrapper;\r\n    @Input() customFilter: (entity: BaseEntity | StringBaseEntity) => boolean = () => true;\r\n    @Input() customFilterKey: any = {};\r\n\r\n    /**\r\n     * @property entitiesSizeChange Emits an event when the number of entities displayed changes (e.g. by filtering)\r\n     */\r\n    @Output() entitiesSizeChange = new EventEmitter<number>();\r\n\r\n    /**\r\n     * @property PAGING_VALUES Possible values for the number of entities shown per page of the table\r\n     * @property DEFAULT_PAGING_VALUE Default number of entities shown per page if the user has no value set for this yet in local storage\r\n     */\r\n    readonly PAGING_VALUES: PagingValue[] = [10, 20, 50, 100, 200, 500, 1000, 'all'];\r\n    readonly DEFAULT_PAGING_VALUE = 50;\r\n\r\n    /**\r\n     * @property isRendering Rendering state of the table (used for conditional display of the loading indicator)\r\n     * @property entities (Sorted) List of entities that are shown in the table (is a subset of allEntities after filters were applied)\r\n     * @property pagingValue Current number (or 'all') of entities displayed per page (can be changed and saved to local storage by the user)\r\n     * @property entityCriteria Contains a list of search terms\r\n     */\r\n    isRendering: boolean;\r\n    entities: (BaseEntity | StringBaseEntity)[];\r\n    pagingValue: PagingValue;\r\n    entityCriteria: {\r\n        textSearch: string[];\r\n        sortProp: SortProp;\r\n    };\r\n\r\n    /**\r\n     * @property searchQueryTooShort Whether the entered search term\r\n     * @property MIN_SEARCH_QUERY_LENGTH Minimum number of characters before a search is triggered\r\n     */\r\n    searchQueryTooShort: boolean;\r\n    readonly MIN_SEARCH_QUERY_LENGTH = 3;\r\n\r\n    // Icons\r\n    faCircleNotch = faCircleNotch;\r\n\r\n    constructor() {\r\n        this.entities = [];\r\n        this.entityCriteria = {\r\n            textSearch: [],\r\n            sortProp: { field: 'id', order: SortOrder.ASC },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook called by Angular to indicate that Angular is done creating the component\r\n     */\r\n    ngOnInit() {\r\n        this.pagingValue = this.getCachedEntitiesPerPage();\r\n\r\n        // explicitly bind these callbacks to their current context\r\n        // so that they can be used from child components\r\n        this.onSort = this.onSort.bind(this);\r\n        this.iconForSortPropField = this.iconForSortPropField.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Method is called when Inputs of this component have changed.\r\n     *\r\n     * @param changes List of Inputs that were changed\r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.allEntities || changes.customFilterKey) {\r\n            this.updateEntities();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This context will be passed down to templateRef and will be\r\n     * available for binding by the local template let declarations\r\n     */\r\n    get context() {\r\n        return {\r\n            settings: {\r\n                limit: this.pageLimit,\r\n                sortType: SortType.multi,\r\n                columnMode: ColumnMode.force,\r\n                headerHeight: 50,\r\n                footerHeight: 50,\r\n                rowHeight: 'auto',\r\n                rows: this.entities,\r\n                rowClass: '',\r\n                scrollbarH: true,\r\n            },\r\n            controls: {\r\n                iconForSortPropField: this.iconForSortPropField,\r\n                onSort: this.onSort,\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The component is preparing if the data is loading (managed by the parent component)\r\n     * or rendering (managed by this component).\r\n     */\r\n    get isPreparing() {\r\n        return this.isLoading || this.isRendering;\r\n    }\r\n\r\n    /**\r\n     * Number of entities displayed per page. Can be undefined to show all entities without pagination.\r\n     */\r\n    get pageLimit() {\r\n        return isNumber(this.pagingValue) ? this.pagingValue : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the translation based on whether a limited number of entities is displayed or all\r\n     *\r\n     * @param quantifier Number of entities per page or 'all'\r\n     */\r\n    perPageTranslation(quantifier: PagingValue) {\r\n        return isNumber(quantifier) ? this.entitiesPerPageTranslation : this.showAllEntitiesTranslation;\r\n    }\r\n\r\n    /**\r\n     * Key that is used for storing this \"items per page\" setting in local storage\r\n     */\r\n    private get perPageCacheKey() {\r\n        return `${this.entityType}-items-per-page`;\r\n    }\r\n\r\n    /**\r\n     * Get \"items per page\" setting from local storage. If it does not exist, use the default.\r\n     */\r\n    private getCachedEntitiesPerPage = () => {\r\n        const cachedValue = this.localStorage.retrieve(this.perPageCacheKey);\r\n        if (cachedValue) {\r\n            const parsedValue = parseInt(cachedValue, 10) || cachedValue;\r\n            if (this.PAGING_VALUES.includes(parsedValue as any)) {\r\n                return parsedValue as PagingValue;\r\n            }\r\n        }\r\n        return this.DEFAULT_PAGING_VALUE;\r\n    };\r\n\r\n    /**\r\n     * Set the number of entities shown per page (and persist it in local storage).\r\n     * Since the rendering takes a bit, show the loading animation until it completes.\r\n     *\r\n     * @param paging Number of entities per page\r\n     */\r\n    setEntitiesPerPage = (paging: PagingValue) => {\r\n        this.isRendering = true;\r\n        setTimeout(() => {\r\n            this.pagingValue = paging;\r\n            this.isRendering = false;\r\n        }, 500);\r\n        this.localStorage.store(this.perPageCacheKey, paging.toString());\r\n    };\r\n\r\n    /**\r\n     * Updates the UI with all available filter/sort settings.\r\n     * First performs the filtering, then sorts the remaining entities.\r\n     */\r\n    private updateEntities() {\r\n        const searchPredicate = (entity: BaseEntity | StringBaseEntity) => {\r\n            return !this.searchEntityFilterEnabled || this.filterEntityByTextSearch(this.entityCriteria.textSearch, entity, this.searchFields);\r\n        };\r\n        const filteredEntities = this.allEntities.filter((entity) => this.customFilter(entity) && searchPredicate(entity));\r\n        this.entities = this.sortService.sortByProperty(filteredEntities, this.entityCriteria.sortProp.field, this.entityCriteria.sortProp.order === SortOrder.ASC);\r\n        // defer execution of change emit to prevent ExpressionChangedAfterItHasBeenCheckedError, see explanation at https://blog.angular-university.io/angular-debugging/\r\n        setTimeout(() => this.entitiesSizeChange.emit(this.entities.length));\r\n    }\r\n\r\n    /**\r\n     * Filter the given entities by the provided search words.\r\n     * Returns entities that match any of the provides search words, if searchWords is empty returns all entities.\r\n     *\r\n     * @param searchWords list of student logins or names\r\n     * @param entity BaseEntity | StringBaseEntity\r\n     * @param searchFields list of paths in entity to search\r\n     */\r\n    private filterEntityByTextSearch = (searchWords: string[], entity: BaseEntity | StringBaseEntity, searchFields: string[]) => {\r\n        // When no search word is inputted, we return all entities.\r\n        if (!searchWords.length) {\r\n            return true;\r\n        }\r\n        // Otherwise we do a fuzzy search on the inputted search words.\r\n        const containsSearchWord = (fieldValue: string) => searchWords.some(this.foundIn(fieldValue));\r\n        return this.entityFieldValues(entity, searchFields).some(containsSearchWord);\r\n    };\r\n\r\n    /**\r\n     * Returns the values that the given entity has in the given fields\r\n     *\r\n     * @param entity Entity whose field values are extracted\r\n     * @param fields Fields to extract from entity (can be paths such as \"student.login\")\r\n     */\r\n    private entityFieldValues = (entity: BaseEntity | StringBaseEntity, fields: string[]) => {\r\n        return flatten(fields.map((field) => this.collectEntityFieldValues(entity, field))).filter(Boolean) as string[];\r\n    };\r\n\r\n    /**\r\n     * Returns the values that the given entity has in the given field.\r\n     * Usually, this will be one value but if the field path contains an array, the rest of the path will be resolved for each array element.\r\n     * Values are merged recursively into a flat list.\r\n     *\r\n     * @param entity Entity whose field values are extracted\r\n     * @param field Field to extract from entity (can be paths such as \"student.login\" or array path such as \"students.login\")\r\n     */\r\n    private collectEntityFieldValues = (entity: BaseEntity | StringBaseEntity, field: string): any[] => {\r\n        const separator = '.';\r\n        const [head, ...tail] = field.split(separator);\r\n        if (tail.length > 0) {\r\n            const resolved = get(entity, head);\r\n            if (Array.isArray(resolved)) {\r\n                return flatten(resolved.map((subEntity) => this.collectEntityFieldValues(subEntity, tail.join(separator))));\r\n            }\r\n            return this.collectEntityFieldValues(resolved, tail.join(separator));\r\n        }\r\n        return [get(entity, head, false)];\r\n    };\r\n\r\n    /**\r\n     * Performs a case-insensitive search of \"word\" inside of \"text\".\r\n     * If \"word\" consists of multiple segments separated by a space, each one of them must appear in \"text\".\r\n     * This relaxation has the benefit that searching for \"Max Mustermann\" will still find \"Max Gregor Mustermann\".\r\n     * Additionally, the wildcard symbols \"*\" and \"?\" are supported.\r\n     *\r\n     * @param text string that is searched for param \"word\"\r\n     */\r\n    private foundIn = (text: string) => (word: string) => {\r\n        const segments = word.toLowerCase().split(' ');\r\n        return (\r\n            text &&\r\n            word &&\r\n            segments.every((segment) => {\r\n                const regex = segment\r\n                    .replace(/[.+\\-^${}()|[\\]\\\\]/g, '\\\\$&') // escape\r\n                    .replace(/\\*/g, '.*') // multiple characters\r\n                    .replace(/\\?/g, '.'); // single character\r\n                return new RegExp(regex).test(text.toLowerCase());\r\n            })\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Splits the provides search words by comma and updates the autocompletion overlay.\r\n     * Also updates the available entities in the UI.\r\n     *\r\n     * @param text$ stream of text input.\r\n     */\r\n    onSearch = (text$: Observable<string>): Observable<(BaseEntity | StringBaseEntity)[]> => {\r\n        return this.onSearchWrapper(\r\n            text$.pipe(\r\n                debounceTime(200),\r\n                distinctUntilChanged(),\r\n                tap(() => {\r\n                    this.searchQueryTooShort = false;\r\n                }),\r\n                map((text) => {\r\n                    const searchWords = text.split(',').map((word) => word.trim());\r\n                    // When the entity field is cleared, we translate the resulting empty string to an empty array (otherwise no entities would be found).\r\n                    return { text, searchWords: searchWords.length === 1 && !searchWords[0] ? [] : searchWords };\r\n                }),\r\n                // For available entities in table.\r\n                tap(({ searchWords }) => {\r\n                    this.entityCriteria.textSearch = searchWords;\r\n                    this.updateEntities();\r\n                }),\r\n                // For autocomplete.\r\n                map(({ text, searchWords }) => {\r\n                    // We only execute the autocomplete for the last keyword in the provided list.\r\n                    const lastSearchWord = searchWords.last();\r\n                    // Don't execute autocomplete for less than two inputted characters.\r\n                    if (!lastSearchWord || lastSearchWord.length < this.MIN_SEARCH_QUERY_LENGTH) {\r\n                        this.searchQueryTooShort = true;\r\n                        return { text, entities: [] };\r\n                    }\r\n                    return {\r\n                        text,\r\n                        entities: this.entities.filter((entity) => {\r\n                            const fieldValues = this.entityFieldValues(entity, this.searchFields);\r\n                            return fieldValues.some((fieldValue) => this.foundIn(fieldValue)(lastSearchWord));\r\n                        }),\r\n                    };\r\n                }),\r\n            ),\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Function that is called when the search input emits a blur event.\r\n     * Can be used to clear up search-related info messages.\r\n     */\r\n    onSearchInputBlur() {\r\n        this.searchQueryTooShort = false;\r\n    }\r\n\r\n    /**\r\n     * Property that exposes the typeahead buttons (= autocomplete suggestion options) as DOM elements\r\n     */\r\n    get typeaheadButtons() {\r\n        return get(this.ngbTypeahead, 'nativeElement.nextSibling.children', []);\r\n    }\r\n\r\n    /**\r\n     * Method is called when user clicks on an autocomplete suggestion. The input method\r\n     * searchTextFromEntity determines how the entity is converted to a searchable string.\r\n     *\r\n     * @param entity Entity that was selected via autocomplete\r\n     */\r\n    onAutocompleteSelect = (entity: BaseEntity | StringBaseEntity) => {\r\n        this.entityCriteria.textSearch[this.entityCriteria.textSearch.length - 1] = this.searchTextFromEntity(entity);\r\n        this.onAutocompleteSelectWrapper(entity, this.filterAfterAutocompleteSelect);\r\n    };\r\n\r\n    /**\r\n     * Method updates the displayed entities (will be only one entity if the search text is unique per entity).\r\n     */\r\n    filterAfterAutocompleteSelect = () => {\r\n        this.updateEntities();\r\n    };\r\n\r\n    /**\r\n     * Formats the search input.\r\n     */\r\n    searchInputFormatter = () => {\r\n        return this.entityCriteria.textSearch.join(', ');\r\n    };\r\n\r\n    /**\r\n     * Sets the selected sort field, then updates the available entities in the UI.\r\n     * Toggles the order direction (asc, desc) when the field has not changed.\r\n     *\r\n     * @param field Entity field\r\n     */\r\n    onSort(field: string) {\r\n        const sameField = this.entityCriteria.sortProp && this.entityCriteria.sortProp.field === field;\r\n        const order = sameField ? this.invertSort(this.entityCriteria.sortProp.order) : SortOrder.ASC;\r\n        this.entityCriteria.sortProp = { field, order };\r\n        this.updateEntities();\r\n    }\r\n\r\n    /**\r\n     * Returns the opposite sort order of the given sort order.\r\n     *\r\n     * @param order SortOrder\r\n     */\r\n    private invertSort = (order: SortOrder) => {\r\n        return order === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\r\n    };\r\n\r\n    /**\r\n     * Returns the Font Awesome icon name for a column header's sorting icon\r\n     * based on the currently active sortProp field and order.\r\n     *\r\n     * @param field Entity field\r\n     */\r\n    iconForSortPropField(field: string) {\r\n        if (this.entityCriteria.sortProp.field !== field) {\r\n            return SortIcon.NONE;\r\n        }\r\n        return SortOrderIcon[this.entityCriteria.sortProp.order];\r\n    }\r\n}\r\n\r\nconst entityToString = (entity: BaseEntity | StringBaseEntity) => entity.id!.toString();\r\n\r\n/**\r\n * Default on search wrapper that simply strips the search text and passes on the results.\r\n * This can be customized by supplying your own onSearchWrapper as an Input that e.g. modifies the results.\r\n * Just copy the default wrapper below into your consumer component (that uses this component) as a blueprint and adapt it.\r\n *\r\n * @param stream$ stream of searches of the format {text, entities} where entities are the results\r\n */\r\nconst onSearchDefaultWrapper = (stream$: Observable<{ text: string; entities: (BaseEntity | StringBaseEntity)[] }>): Observable<(BaseEntity | StringBaseEntity)[]> => {\r\n    return stream$.pipe(\r\n        map(({ entities }) => {\r\n            return entities;\r\n        }),\r\n    );\r\n};\r\n\r\n/**\r\n * Default on autocomplete select wrapper that simply calls the provided callback (which is this components onAutocompleteSelect).\r\n * This can be customized by supplying your own onAutocompleteSelectWrapper as an Input that changes or adds behavior.\r\n * Just copy the default wrapper below into your consumer component (that uses this component) as a blueprint and adapt it.\r\n *\r\n * @param entity The selected entity from the autocomplete suggestions\r\n * @param callback Function that can be called with the selected entity to trigger this component's default behavior for on select\r\n */\r\nconst onAutocompleteSelectDefaultWrapper = (entity: BaseEntity | StringBaseEntity, callback: (entity: BaseEntity | StringBaseEntity) => void): void => {\r\n    callback(entity);\r\n};\r\n", "<div>\r\n    @if (showPageSizeDropdown || showSearchField) {\r\n        <div class=\"d-flex mb-2 gap-1 flex-column flex-md-row\">\r\n            @if (showPageSizeDropdown) {\r\n                <div ngbDropdown class=\"d-inline-block me-2\">\r\n                    <button class=\"btn btn-outline-primary w-100\" id=\"dropdownBasic1\" ngbDropdownToggle>\r\n                        {{ perPageTranslation(pagingValue) | artemisTranslate: { number: pagingValue } }}\r\n                    </button>\r\n                    <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\">\r\n                        @for (pagingOption of PAGING_VALUES; track pagingOption) {\r\n                            <button (click)=\"setEntitiesPerPage(pagingOption)\" [class.selected]=\"pagingOption === pagingValue\" ngbDropdownItem>\r\n                                {{ perPageTranslation(pagingOption) | artemisTranslate: { number: pagingOption } }}\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            @if (searchEnabled) {\r\n                <div class=\"search-container\">\r\n                    <input\r\n                        #ngbTypeahead\r\n                        id=\"typeahead-basic\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        (selectItem)=\"onAutocompleteSelect($event.item)\"\r\n                        [placeholder]=\"searchPlaceholderTranslation | artemisTranslate\"\r\n                        [ngbTypeahead]=\"onSearch\"\r\n                        [resultFormatter]=\"searchResultFormatter\"\r\n                        [inputFormatter]=\"searchInputFormatter\"\r\n                        (blur)=\"onSearchInputBlur()\"\r\n                    />\r\n                    <div class=\"search-info\" [class.active]=\"isSearching\">\r\n                        <fa-icon size=\"lg\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n                    </div>\r\n                    <div class=\"search-info\" [class.active]=\"searchFailed\">\r\n                        <span class=\"badge bg-danger\" jhiTranslate=\"artemisApp.dataTable.search.failed\"></span>\r\n                    </div>\r\n                    <div class=\"search-info\" [class.active]=\"searchNoResults\">\r\n                        <span class=\"badge bg-warning\" [jhiTranslate]=\"searchNoResultsTranslation\"> No results </span>\r\n                    </div>\r\n                    <div class=\"search-info\" [class.active]=\"searchQueryTooShort\">\r\n                        <span class=\"badge bg-info\" [jhiTranslate]=\"minQueryLengthHintTranslation\" [translateValues]=\"{ length: MIN_SEARCH_QUERY_LENGTH }\">\r\n                            Please enter at least {{ MIN_SEARCH_QUERY_LENGTH }} characters\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    @if (entities && !isPreparing) {\r\n        <div class=\"table-responsive data-table-container\">\r\n            <ng-container *ngTemplateOutlet=\"templateRef; context: context\" />\r\n            <div class=\"transitioning-container\" [class.active]=\"isTransitioning\">\r\n                <fa-icon size=\"lg\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n            </div>\r\n        </div>\r\n    } @else {\r\n        <div class=\"loading-container d-flex justify-content-center align-items-center\">\r\n            <fa-icon size=\"lg\" [icon]=\"faCircleNotch\" animation=\"spin\" />\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "pagingOption_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "setEntitiesPerPage", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classProp", "pagingValue", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "perPageTranslation", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275repeaterCreate", "DataTableComponent_Conditional_2_Conditional_3_For_10_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "PAGING_VALUES", "$event", "_r4", "onAutocompleteSelect", "item", "onSearchInputBlur", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275pipeBind1", "searchPlaceholderTranslation", "onSearch", "searchResultFormatter", "searchInputFormatter", "isSearching", "faCircleNotch", "searchFailed", "searchNoResults", "searchNoResultsTranslation", "searchQueryTooShort", "minQueryLengthHintTranslation", "_c2", "MIN_SEARCH_QUERY_LENGTH", "\u0275\u0275template", "DataTableComponent_Conditional_2_Conditional_3_Template", "DataTableComponent_Conditional_2_Conditional_4_Template", "\u0275\u0275conditional", "showPageSizeDropdown", "searchEnabled", "\u0275\u0275elementContainer", "DataTableComponent_Conditional_3_ng_container_3_Template", "templateRef", "context", "isTransitioning", "SortOrder", "SortIcon", "NONE", "faSort", "ASC", "faSortUp", "DESC", "faSortDown", "SortOrderIcon", "DataTableComponent", "sortService", "inject", "SortService", "localStorage", "LocalStorageService", "ngbTypeahead", "isLoading", "showSearchField", "entityType", "allEntities", "entitiesPerPageTranslation", "showAllEntitiesTranslation", "searchFields", "searchEntityFilterEnabled", "searchTextFromEntity", "entityToString", "onSearchWrapper", "onSearchDefaultWrapper", "onAutocompleteSelectWrapper", "onAutocompleteSelectDefaultWrapper", "customFilter", "customFilterKey", "entitiesSizeChange", "EventEmitter", "DEFAULT_PAGING_VALUE", "isRendering", "entities", "entityCriteria", "constructor", "textSearch", "sortProp", "field", "order", "ngOnInit", "getCachedEntitiesPerPage", "onSort", "bind", "iconForSortPropField", "ngOnChanges", "changes", "updateEntities", "settings", "limit", "pageLimit", "sortType", "SortType", "multi", "columnMode", "ColumnMode", "force", "headerHeight", "footerHeight", "rowHeight", "rows", "rowClass", "scrollbarH", "controls", "isPreparing", "isNumber", "undefined", "quantifier", "perPageCacheKey", "cachedValue", "retrieve", "parsedValue", "parseInt", "includes", "paging", "setTimeout", "store", "toString", "searchPredicate", "entity", "filterEntityByTextSearch", "filteredEntities", "filter", "sortByProperty", "emit", "length", "searchWords", "containsSearchWord", "fieldValue", "some", "foundIn", "entityFieldValues", "fields", "flatten", "map", "collectEntityFieldValues", "Boolean", "separator", "head", "tail", "split", "resolved", "get", "Array", "isArray", "subEntity", "join", "text", "word", "segments", "toLowerCase", "every", "segment", "regex", "replace", "RegExp", "test", "text$", "pipe", "debounceTime", "distinctUntilChanged", "tap", "trim", "lastSearchWord", "last", "typeaheadButtons", "filterAfterAutocompleteSelect", "invertSort", "selectors", "contentQueries", "rf", "ctx", "dirIndex", "TemplateRef", "DataTableComponent_Conditional_2_Template", "DataTableComponent_Conditional_3_Template", "DataTableComponent_Conditional_4_Template", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbDropdownButtonItem", "NgbDropdownItem", "NgbTypeahead", "FaIconComponent", "TranslateDirective", "NgTemplateOutlet", "ArtemisTranslatePipe", "styles", "encapsulation", "id", "stream$", "callback"]
}
