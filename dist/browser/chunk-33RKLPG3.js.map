{
  "version": 3,
  "sources": ["src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/exerciseUnit.service.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-exercise-unit/create-exercise-unit.component.ts", "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-exercise-unit/create-exercise-unit.component.html"],
  "sourcesContent": ["import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ExerciseUnit } from 'app/entities/lecture-unit/exerciseUnit.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\n\r\ntype EntityResponseType = HttpResponse<ExerciseUnit>;\r\ntype EntityArrayResponseType = HttpResponse<ExerciseUnit[]>;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ExerciseUnitService {\r\n    private httpClient = inject(HttpClient);\r\n    private lectureUnitService = inject(LectureUnitService);\r\n\r\n    private resourceURL = 'api/lecture';\r\n\r\n    create(exerciseUnit: ExerciseUnit, lectureId: number): Observable<EntityResponseType> {\r\n        if (exerciseUnit.exercise) {\r\n            exerciseUnit.exercise.categories = ExerciseService.stringifyExerciseCategories(exerciseUnit.exercise);\r\n        }\r\n\r\n        return this.httpClient\r\n            .post<ExerciseUnit>(`${this.resourceURL}/lectures/${lectureId}/exercise-units`, exerciseUnit, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n\r\n    findAllByLectureId(lectureId: number): Observable<EntityArrayResponseType> {\r\n        return this.httpClient\r\n            .get<ExerciseUnit[]>(`${this.resourceURL}/lectures/${lectureId}/exercise-units`, { observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.lectureUnitService.convertLectureUnitResponseArrayDatesFromServer(res)));\r\n    }\r\n}\r\n", "import { Component, Input, OnInit, inject, input, output } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ExerciseUnit } from 'app/entities/lecture-unit/exerciseUnit.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { concatMap, finalize, switchMap, take } from 'rxjs/operators';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { combineLatest, forkJoin, from } from 'rxjs';\r\nimport { ExerciseUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/exerciseUnit.service';\r\nimport { faSort, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-create-exercise-unit',\r\n    templateUrl: './create-exercise-unit.component.html',\r\n    styleUrls: ['./create-exercise-unit.component.scss'],\r\n    imports: [TranslateDirective, FaIconComponent, SortDirective, SortByDirective, ArtemisTranslatePipe],\r\n})\r\nexport class CreateExerciseUnitComponent implements OnInit {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private alertService = inject(AlertService);\r\n    private sortService = inject(SortService);\r\n    private exerciseUnitService = inject(ExerciseUnitService);\r\n\r\n    protected readonly faTimes = faTimes;\r\n    protected readonly faSort = faSort;\r\n\r\n    @Input() lectureId: number | undefined;\r\n    @Input() courseId: number | undefined;\r\n    hasCancelButton = input<boolean>();\r\n    shouldNavigateOnSubmit = input<boolean>(true);\r\n\r\n    onCancel = output<void>();\r\n    onExerciseUnitCreated = output<void>();\r\n\r\n    predicate = 'type';\r\n    reverse = false;\r\n    isLoading = false;\r\n\r\n    exercisesAvailableForUnitCreation: Exercise[] = [];\r\n    exercisesToCreateUnitFor: Exercise[] = [];\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        const lectureRoute = this.activatedRoute.parent!.parent!;\r\n        combineLatest([lectureRoute.paramMap, lectureRoute.parent!.paramMap])\r\n            .pipe(\r\n                take(1),\r\n                switchMap(([params, parentParams]) => {\r\n                    this.lectureId ??= Number(params.get('lectureId'));\r\n                    this.courseId ??= Number(parentParams.get('courseId'));\r\n\r\n                    const courseObservable = this.courseManagementService.findWithExercises(this.courseId);\r\n                    const exerciseUnitObservable = this.exerciseUnitService.findAllByLectureId(this.lectureId);\r\n                    return forkJoin([courseObservable, exerciseUnitObservable]);\r\n                }),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: ([courseResult, exerciseUnitResult]) => {\r\n                    const allExercisesOfCourse = courseResult?.body?.exercises ? courseResult?.body?.exercises : [];\r\n                    const idsOfExercisesAlreadyConnectedToUnit = exerciseUnitResult?.body\r\n                        ? exerciseUnitResult?.body?.map((exerciseUnit: ExerciseUnit) => exerciseUnit.exercise?.id)\r\n                        : [];\r\n                    this.exercisesAvailableForUnitCreation = allExercisesOfCourse.filter((exercise: Exercise) => !idsOfExercisesAlreadyConnectedToUnit.includes(exercise.id));\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n\r\n    createExerciseUnits() {\r\n        const exerciseUnitsToCreate = this.exercisesToCreateUnitFor.map((exercise: Exercise) => {\r\n            const unit = new ExerciseUnit();\r\n            unit.exercise = exercise;\r\n            return unit;\r\n        });\r\n\r\n        from(exerciseUnitsToCreate)\r\n            .pipe(\r\n                concatMap((unit) => this.exerciseUnitService.create(unit, this.lectureId!)),\r\n                finalize(() => {\r\n                    if (this.shouldNavigateOnSubmit()) {\r\n                        this.router.navigate(['../../'], { relativeTo: this.activatedRoute });\r\n                    } else {\r\n                        this.onExerciseUnitCreated.emit();\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe({\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n\r\n    sortRows() {\r\n        this.sortService.sortByProperty(this.exercisesAvailableForUnitCreation, this.predicate, this.reverse);\r\n    }\r\n\r\n    selectExerciseForUnitCreation(exercise: Exercise) {\r\n        if (this.isExerciseSelectedForUnitCreation(exercise)) {\r\n            this.exercisesToCreateUnitFor.forEach((selectedExercise, index) => {\r\n                if (selectedExercise === exercise) {\r\n                    this.exercisesToCreateUnitFor.splice(index, 1);\r\n                }\r\n            });\r\n        } else {\r\n            this.exercisesToCreateUnitFor.push(exercise);\r\n        }\r\n    }\r\n\r\n    isExerciseSelectedForUnitCreation(exercise: Exercise) {\r\n        return this.exercisesToCreateUnitFor.includes(exercise);\r\n    }\r\n\r\n    cancelForm() {\r\n        this.onCancel.emit();\r\n    }\r\n}\r\n", "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12 mx-auto\">\r\n            <h2 jhiTranslate=\"artemisApp.exerciseUnit.createExerciseUnit.headline\"></h2>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6 mx-auto\">\r\n            <p jhiTranslate=\"artemisApp.exerciseUnit.createExerciseUnit.description\"></p>\r\n        </div>\r\n        <div class=\"col-sm-6 mx-auto text-end\">\r\n            @if (hasCancelButton()) {\r\n                <button type=\"button\" (click)=\"cancelForm()\" class=\"btn btn-secondary\"><fa-icon [icon]=\"faTimes\" />&nbsp;<span jhiTranslate=\"entity.action.cancel\"></span></button>\r\n            }\r\n            <button\r\n                id=\"createButton\"\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                [disabled]=\"exercisesToCreateUnitFor.length === 0\"\r\n                (click)=\"createExerciseUnits()\"\r\n                jhiTranslate=\"entity.action.submit\"\r\n            ></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-12 mx-auto\">\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-bordered\">\r\n                    <thead class=\"thead-dark\">\r\n                        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"reverse\" (sortChange)=\"sortRows()\">\r\n                            <th jhiSortBy=\"id\">\r\n                                id\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"type\">\r\n                                <span jhiTranslate=\"artemisApp.exercise.type\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"title\">\r\n                                <span jhiTranslate=\"artemisApp.exercise.title\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"shortName\">\r\n                                <span jhiTranslate=\"artemisApp.exercise.shortName\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"releaseDate\">\r\n                                <span jhiTranslate=\"artemisApp.exercise.releaseDate\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"dueDate\">\r\n                                <span jhiTranslate=\"artemisApp.exercise.dueDate\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                            <th jhiSortBy=\"assessmentDueDate\">\r\n                                <span jhiTranslate=\"artemisApp.exercise.assessmentDueDate\"></span>\r\n                                <fa-icon [icon]=\"faSort\" />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (exercise of exercisesAvailableForUnitCreation; track exercise) {\r\n                            <tr\r\n                                (click)=\"selectExerciseForUnitCreation(exercise)\"\r\n                                [class.table-primary]=\"isExerciseSelectedForUnitCreation(exercise)\"\r\n                                id=\"exercise-{{ exercise.id }}\"\r\n                            >\r\n                                <td>{{ exercise.id ? exercise.id : '' }}</td>\r\n                                <td>{{ exercise.type ? exercise.type : '' }}</td>\r\n                                <td>{{ exercise.title ? exercise.title : '' }}</td>\r\n                                <td>{{ exercise.shortName ? exercise.shortName : '' }}</td>\r\n                                <td>{{ exercise.releaseDate ? exercise.releaseDate.format('MMM DD YYYY, HH:mm:ss') : '' }}</td>\r\n                                <td>{{ exercise.dueDate ? exercise.dueDate.format('MMM DD YYYY, HH:mm:ss') : '' }}</td>\r\n                                <td>{{ exercise.assessmentDueDate ? exercise.assessmentDueDate.format('MMM DD YYYY, HH:mm:ss') : '' }}</td>\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["ExerciseUnitService", "httpClient", "inject", "HttpClient", "lectureUnitService", "LectureUnitService", "resourceURL", "create", "exerciseUnit", "lectureId", "exercise", "categories", "ExerciseService", "stringifyExerciseCategories", "post", "observe", "pipe", "map", "res", "convertLectureUnitResponseDatesFromServer", "findAllByLectureId", "get", "convertLectureUnitResponseArrayDatesFromServer", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "cancelForm", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faTimes", "exercise_r4", "_r3", "$implicit", "selectExerciseForUnitCreation", "\u0275\u0275classProp", "isExerciseSelectedForUnitCreation", "\u0275\u0275propertyInterpolate1", "id", "\u0275\u0275textInterpolate", "type", "title", "shortName", "releaseDate", "format", "dueDate", "assessmentDueDate", "CreateExerciseUnitComponent", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "courseManagementService", "CourseManagementService", "alertService", "AlertService", "sortService", "SortService", "exerciseUnitService", "ExerciseUnitService", "faSort", "lectureId", "courseId", "hasCancelButton", "input", "shouldNavigateOnSubmit", "onCancel", "output", "onExerciseUnitCreated", "predicate", "reverse", "isLoading", "exercisesAvailableForUnitCreation", "exercisesToCreateUnitFor", "ngOnInit", "lectureRoute", "parent", "combineLatest", "paramMap", "pipe", "take", "switchMap", "params", "parentParams", "Number", "get", "courseObservable", "findWithExercises", "exerciseUnitObservable", "findAllByLectureId", "forkJoin", "finalize", "subscribe", "next", "courseResult", "exerciseUnitResult", "allExercisesOfCourse", "body", "exercises", "idsOfExercisesAlreadyConnectedToUnit", "map", "exerciseUnit", "exercise", "filter", "includes", "error", "res", "onError", "createExerciseUnits", "exerciseUnitsToCreate", "unit", "ExerciseUnit", "from", "concatMap", "create", "navigate", "relativeTo", "emit", "sortRows", "sortByProperty", "forEach", "selectedExercise", "index", "splice", "push", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "CreateExerciseUnitComponent_Conditional_19_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275repeaterCreate", "CreateExerciseUnitComponent_For_88_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275conditional", "length", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "TranslateDirective", "FaIconComponent", "SortDirective", "SortByDirective", "styles"]
}
