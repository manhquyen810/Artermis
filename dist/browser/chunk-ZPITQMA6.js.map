{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/course.model.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { DueDateStat } from 'app/course/dashboards/due-date-stat.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { Competency } from 'app/entities/competency.model';\r\nimport { Organization } from 'app/entities/organization.model';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { OnlineCourseConfiguration } from 'app/entities/online-course-configuration.model';\r\nimport { TutorialGroup } from 'app/entities/tutorial-group/tutorial-group.model';\r\nimport { TutorialGroupsConfiguration } from 'app/entities/tutorial-group/tutorial-groups-configuration.model';\r\nimport { LearningPath } from 'app/entities/competency/learning-path.model';\r\nimport { Prerequisite } from 'app/entities/prerequisite.model';\r\nimport { Faq } from 'app/entities/faq.model';\r\n\r\nexport enum CourseInformationSharingConfiguration {\r\n    COMMUNICATION_AND_MESSAGING = 'COMMUNICATION_AND_MESSAGING',\r\n    COMMUNICATION_ONLY = 'COMMUNICATION_ONLY',\r\n    DISABLED = 'DISABLED',\r\n}\r\n\r\n/**\r\n * Note: Keep in sync with method in CourseRepository.java\r\n */\r\nexport function isCommunicationEnabled(course: Course | undefined) {\r\n    const config = course?.courseInformationSharingConfiguration;\r\n    return config === CourseInformationSharingConfiguration.COMMUNICATION_AND_MESSAGING || config === CourseInformationSharingConfiguration.COMMUNICATION_ONLY;\r\n}\r\n\r\nexport function isFaqEnabled(course: Course | undefined) {\r\n    return course?.faqEnabled;\r\n}\r\n\r\n/**\r\n * Note: Keep in sync with method in CourseRepository.java\r\n */\r\nexport function isMessagingEnabled(course: Course | undefined) {\r\n    const config = course?.courseInformationSharingConfiguration;\r\n    return config === CourseInformationSharingConfiguration.COMMUNICATION_AND_MESSAGING;\r\n}\r\n\r\nexport const enum Language {\r\n    ENGLISH = 'ENGLISH',\r\n    GERMAN = 'GERMAN',\r\n}\r\nexport class Course implements BaseEntity {\r\n    public id?: number;\r\n    public title?: string;\r\n    public description?: string;\r\n    public studentCourseAnalyticsDashboardEnabled?: boolean;\r\n    public shortName?: string;\r\n    public studentGroupName?: string;\r\n    public teachingAssistantGroupName?: string;\r\n    public editorGroupName?: string;\r\n    public instructorGroupName?: string;\r\n    public startDate?: dayjs.Dayjs;\r\n    public endDate?: dayjs.Dayjs;\r\n    public enrollmentStartDate?: dayjs.Dayjs;\r\n    public enrollmentEndDate?: dayjs.Dayjs;\r\n    public unenrollmentEndDate?: dayjs.Dayjs;\r\n    public semester?: string;\r\n    public testCourse?: boolean;\r\n    public language?: Language;\r\n    public defaultProgrammingLanguage?: ProgrammingLanguage;\r\n    public color?: string;\r\n    public courseIcon?: string;\r\n    public onlineCourse?: boolean;\r\n    public faqEnabled?: boolean;\r\n    public enrollmentEnabled?: boolean;\r\n    public enrollmentConfirmationMessage?: string;\r\n    public unenrollmentEnabled?: boolean;\r\n    public presentationScore?: number;\r\n    public maxComplaints?: number;\r\n    public maxTeamComplaints?: number;\r\n    public maxComplaintTimeDays?: number;\r\n    public maxComplaintTextLimit?: number;\r\n    public maxComplaintResponseTextLimit?: number;\r\n    public complaintsEnabled?: boolean;\r\n    public posts?: Post[];\r\n    public requestMoreFeedbackEnabled?: boolean;\r\n    public maxRequestMoreFeedbackTimeDays?: number;\r\n    public maxPoints?: number;\r\n    public accuracyOfScores?: number;\r\n    public restrictedAthenaModulesAccess?: boolean;\r\n    public tutorialGroupsConfiguration?: TutorialGroupsConfiguration;\r\n    // Note: Currently just used in the scope of the tutorial groups feature\r\n    public timeZone?: string;\r\n\r\n    // the following values are only used in course administration\r\n    public numberOfStudents?: number;\r\n    public numberOfTeachingAssistants?: number;\r\n    public numberOfEditors?: number;\r\n    public numberOfInstructors?: number;\r\n\r\n    // helper attributes to determine if certain tabs in the client are shown\r\n    public numberOfLectures?: number;\r\n    public numberOfExams?: number;\r\n    public numberOfTutorialGroups?: number;\r\n    public numberOfCompetencies?: number;\r\n    public numberOfPrerequisites?: number;\r\n\r\n    public exercises?: Exercise[];\r\n    public lectures?: Lecture[];\r\n    public faqs?: Faq[];\r\n    public competencies?: Competency[];\r\n    public prerequisites?: Prerequisite[];\r\n    public learningPathsEnabled?: boolean;\r\n    public learningPaths?: LearningPath[];\r\n    public exams?: Exam[];\r\n    public organizations?: Organization[];\r\n    public tutorialGroups?: TutorialGroup[];\r\n    public onlineCourseConfiguration?: OnlineCourseConfiguration;\r\n    public courseInformationSharingConfiguration?: CourseInformationSharingConfiguration;\r\n    public courseInformationSharingMessagingCodeOfConduct?: string;\r\n\r\n    // helper attributes\r\n    public isAtLeastTutor?: boolean;\r\n    public isAtLeastEditor?: boolean;\r\n    public isAtLeastInstructor?: boolean;\r\n    public relativeScore?: number;\r\n    public absoluteScore?: number;\r\n    public maxScore?: number;\r\n\r\n    public courseArchivePath?: string;\r\n\r\n    constructor() {\r\n        this.onlineCourse = false; // default value\r\n        this.isAtLeastTutor = false; // default value\r\n        this.isAtLeastEditor = false; // default value\r\n        this.isAtLeastInstructor = false; // default value\r\n\r\n        this.enrollmentEnabled = false; // default value\r\n        this.presentationScore = 0; // default value\r\n        this.maxComplaints = 3; // default value\r\n        this.maxTeamComplaints = 3; // default value\r\n        this.maxComplaintTimeDays = 7; // default value\r\n        this.maxComplaintTextLimit = 2000; // default value\r\n        this.maxComplaintResponseTextLimit = 2000; // default value\r\n        this.complaintsEnabled = true; // default value\r\n        this.requestMoreFeedbackEnabled = true; // default value\r\n        this.maxRequestMoreFeedbackTimeDays = 7; // default value\r\n        this.accuracyOfScores = 1; // default value\r\n        this.restrictedAthenaModulesAccess = false; // default value\r\n        this.courseInformationSharingConfiguration = CourseInformationSharingConfiguration.COMMUNICATION_AND_MESSAGING; // default value\r\n    }\r\n\r\n    /**\r\n     * Correctly initializes a class instance from a typecasted object.\r\n     * Returns a 'real' class instance that supports all class methods.\r\n     * @param object The typecasted object\r\n     * @returns The class instance\r\n     */\r\n    static from(object: Course): Course {\r\n        const course = Object.assign(new Course(), object);\r\n        if (course.exercises) {\r\n            course.exercises.forEach((exercise) => {\r\n                exercise.numberOfSubmissions = Object.assign(new DueDateStat(), exercise.numberOfSubmissions);\r\n                exercise.totalNumberOfAssessments = Object.assign(new DueDateStat(), exercise.totalNumberOfAssessments);\r\n            });\r\n        }\r\n        return course;\r\n    }\r\n}\r\n\r\nexport class CourseForImportDTO {\r\n    id?: number;\r\n    title?: string;\r\n    shortName?: string;\r\n    semester?: string;\r\n}\r\n\r\nexport const enum CourseGroup {\r\n    STUDENTS = 'students',\r\n    TUTORS = 'tutors',\r\n    EDITORS = 'editors',\r\n    INSTRUCTORS = 'instructors',\r\n}\r\n\r\nexport const courseGroups = [CourseGroup.STUDENTS, CourseGroup.TUTORS, CourseGroup.EDITORS, CourseGroup.INSTRUCTORS];\r\n"],
  "mappings": "wCAiBA,IAAYA,EAAZ,SAAYA,EAAqC,CAC7CA,OAAAA,EAAA,4BAAA,8BACAA,EAAA,mBAAA,qBACAA,EAAA,SAAA,WAHQA,CAIZ,EAJYA,GAAqC,CAAA,CAAA,EAS3C,SAAUC,EAAuBC,EAA0B,CAC7D,IAAMC,EAASD,GAAQE,sCACvB,OAAOD,IAAWH,EAAsCK,6BAA+BF,IAAWH,EAAsCM,kBAC5I,CAEM,SAAUC,EAAaL,EAA0B,CACnD,OAAOA,GAAQM,UACnB,CAKM,SAAUC,EAAmBP,EAA0B,CAEzD,OADeA,GAAQE,wCACLJ,EAAsCK,2BAC5D,CAMM,IAAOK,EAAP,MAAOA,CAAM,CACRC,GACAC,MACAC,YACAC,uCACAC,UACAC,iBACAC,2BACAC,gBACAC,oBACAC,UACAC,QACAC,oBACAC,kBACAC,oBACAC,SACAC,WACAC,SACAC,2BACAC,MACAC,WACAC,aACAvB,WACAwB,kBACAC,8BACAC,oBACAC,kBACAC,cACAC,kBACAC,qBACAC,sBACAC,8BACAC,kBACAC,MACAC,2BACAC,+BACAC,UACAC,iBACAC,8BACAC,4BAEAC,SAGAC,iBACAC,2BACAC,gBACAC,oBAGAC,iBACAC,cACAC,uBACAC,qBACAC,sBAEAC,UACAC,SACAC,KACAC,aACAC,cACAC,qBACAC,cACAC,MACAC,cACAC,eACAC,0BACAjE,sCACAkE,+CAGAC,eACAC,gBACAC,oBACAC,cACAC,cACAC,SAEAC,kBAEPC,aAAA,CACI,KAAK/C,aAAe,GACpB,KAAKwC,eAAiB,GACtB,KAAKC,gBAAkB,GACvB,KAAKC,oBAAsB,GAE3B,KAAKzC,kBAAoB,GACzB,KAAKG,kBAAoB,EACzB,KAAKC,cAAgB,EACrB,KAAKC,kBAAoB,EACzB,KAAKC,qBAAuB,EAC5B,KAAKC,sBAAwB,IAC7B,KAAKC,8BAAgC,IACrC,KAAKC,kBAAoB,GACzB,KAAKE,2BAA6B,GAClC,KAAKC,+BAAiC,EACtC,KAAKE,iBAAmB,EACxB,KAAKC,8BAAgC,GACrC,KAAK3C,sCAAwCJ,EAAsCK,2BACvF,CAQA,OAAO0E,KAAKC,EAAc,CACtB,IAAM9E,EAAS+E,OAAOC,OAAO,IAAIxE,EAAUsE,CAAM,EACjD,OAAI9E,EAAOyD,WACPzD,EAAOyD,UAAUwB,QAASC,GAAY,CAClCA,EAASC,oBAAsBJ,OAAOC,OAAO,IAAII,EAAeF,EAASC,mBAAmB,EAC5FD,EAASG,yBAA2BN,OAAOC,OAAO,IAAII,EAAeF,EAASG,wBAAwB,CAC1G,CAAC,EAEErF,CACX,GAiBG,IAAMsF,EAAe,CAAA,WAAA,SAAA,UAAA,aAAA",
  "names": ["CourseInformationSharingConfiguration", "isCommunicationEnabled", "course", "config", "courseInformationSharingConfiguration", "COMMUNICATION_AND_MESSAGING", "COMMUNICATION_ONLY", "isFaqEnabled", "faqEnabled", "isMessagingEnabled", "Course", "id", "title", "description", "studentCourseAnalyticsDashboardEnabled", "shortName", "studentGroupName", "teachingAssistantGroupName", "editorGroupName", "instructorGroupName", "startDate", "endDate", "enrollmentStartDate", "enrollmentEndDate", "unenrollmentEndDate", "semester", "testCourse", "language", "defaultProgrammingLanguage", "color", "courseIcon", "onlineCourse", "enrollmentEnabled", "enrollmentConfirmationMessage", "unenrollmentEnabled", "presentationScore", "maxComplaints", "maxTeamComplaints", "maxComplaintTimeDays", "maxComplaintTextLimit", "maxComplaintResponseTextLimit", "complaintsEnabled", "posts", "requestMoreFeedbackEnabled", "maxRequestMoreFeedbackTimeDays", "maxPoints", "accuracyOfScores", "restrictedAthenaModulesAccess", "tutorialGroupsConfiguration", "timeZone", "numberOfStudents", "numberOfTeachingAssistants", "numberOfEditors", "numberOfInstructors", "numberOfLectures", "numberOfExams", "numberOfTutorialGroups", "numberOfCompetencies", "numberOfPrerequisites", "exercises", "lectures", "faqs", "competencies", "prerequisites", "learningPathsEnabled", "learningPaths", "exams", "organizations", "tutorialGroups", "onlineCourseConfiguration", "courseInformationSharingMessagingCodeOfConduct", "isAtLeastTutor", "isAtLeastEditor", "isAtLeastInstructor", "relativeScore", "absoluteScore", "maxScore", "courseArchivePath", "constructor", "from", "object", "Object", "assign", "forEach", "exercise", "numberOfSubmissions", "DueDateStat", "totalNumberOfAssessments", "courseGroups"]
}
