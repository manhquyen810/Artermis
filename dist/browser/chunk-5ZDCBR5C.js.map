{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/participate/general-information/exam-general-information.component.ts", "src/main/webapp/app/exam/participate/general-information/exam-general-information.component.html", "src/main/webapp/app/exam/participate/summary/collapsible-card.component.ts", "src/main/webapp/app/exam/participate/summary/collapsible-card.component.html", "src/main/webapp/app/exam/participate/summary/result-overview/exam-result-overview.component.ts", "src/main/webapp/app/exam/participate/summary/result-overview/exam-result-overview.component.html", "src/main/webapp/app/exam/participate/summary/exercises/header/exam-result-summary-exercise-card-header.component.ts", "src/main/webapp/app/exam/participate/summary/exercises/header/exam-result-summary-exercise-card-header.component.html", "src/main/webapp/app/exam/participate/summary/exercises/text-exam-summary/text-exam-summary.component.ts", "src/main/webapp/app/exam/participate/summary/exercises/text-exam-summary/text-exam-summary.component.html", "src/main/webapp/app/exam/participate/summary/exercises/modeling-exam-summary/modeling-exam-summary.component.ts", "src/main/webapp/app/exam/participate/summary/exercises/modeling-exam-summary/modeling-exam-summary.component.html", "src/main/webapp/app/exam/participate/summary/exercises/quiz-exam-summary/quiz-exam-summary.component.ts", "src/main/webapp/app/exam/participate/summary/exercises/quiz-exam-summary/quiz-exam-summary.component.html", "src/main/webapp/app/exam/participate/summary/exercises/file-upload-exam-summary/file-upload-exam-summary.component.ts", "src/main/webapp/app/exam/participate/summary/exercises/file-upload-exam-summary/file-upload-exam-summary.component.html", "src/main/webapp/app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component.ts", "src/main/webapp/app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component.html", "src/main/webapp/app/exam/participate/summary/exam-result-summary.component.ts", "src/main/webapp/app/exam/participate/summary/exam-result-summary.component.html"],
  "sourcesContent": ["import { Component, Input, OnChanges } from '@angular/core';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { endTime, examWorkingTime, getAdditionalWorkingTime, isExamOverMultipleDays } from 'app/exam/participate/exam.utils';\r\nimport { StudentExamWorkingTimeComponent } from 'app/exam/shared/student-exam-working-time/student-exam-working-time.component';\r\nimport { TestExamWorkingTimeComponent } from 'app/exam/shared/testExam-workingTime/test-exam-working-time.component';\r\nimport dayjs from 'dayjs/esm';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDurationFromSecondsPipe } from 'app/shared/pipes/artemis-duration-from-seconds.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-general-information',\r\n    styleUrls: ['./exam-general-information.component.scss'],\r\n    templateUrl: './exam-general-information.component.html',\r\n    imports: [TranslateDirective, StudentExamWorkingTimeComponent, TestExamWorkingTimeComponent, ArtemisDatePipe, ArtemisTranslatePipe, ArtemisDurationFromSecondsPipe],\r\n})\r\nexport class ExamGeneralInformationComponent implements OnChanges {\r\n    @Input() exam: Exam;\r\n    @Input() studentExam: StudentExam;\r\n    @Input() reviewIsOpen = false;\r\n\r\n    /**\r\n     * The exam cover will contain e.g. the number of exercises which is hidden in the exam summary as\r\n     * the information is shown in the {@link ExamResultOverviewComponent}\r\n     */\r\n    @Input() displayOnExamCover = false;\r\n\r\n    examEndDate?: dayjs.Dayjs;\r\n    normalWorkingTime?: number;\r\n    additionalWorkingTime?: number;\r\n    isExamOverMultipleDays: boolean;\r\n    isTestExam?: boolean;\r\n    currentDate?: dayjs.Dayjs;\r\n\r\n    ngOnChanges() {\r\n        this.examEndDate = endTime(this.exam, this.studentExam);\r\n        this.normalWorkingTime = examWorkingTime(this.exam);\r\n        this.additionalWorkingTime = getAdditionalWorkingTime(this.exam, this.studentExam);\r\n        this.isExamOverMultipleDays = isExamOverMultipleDays(this.exam, this.studentExam);\r\n        this.isTestExam = this.exam?.testExam;\r\n        if (this.isTestExam) {\r\n            this.currentDate = dayjs();\r\n        }\r\n    }\r\n}\r\n", "<div>\r\n    @if (!displayOnExamCover) {\r\n        <h3 id=\"general-information-title\" jhiTranslate=\"artemisApp.exam.examSummary.generalInformation\"></h3>\r\n    }\r\n    <div class=\"ml-4 mt-3 mb-4\">\r\n        <table class=\"table table-borderless mx-auto d-block\">\r\n            <tbody>\r\n                @if (isTestExam) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.examManagement.testExam.examMode' | artemisTranslate }}:</th>\r\n                        <td>\r\n                            <span class=\"badge bg-primary\" jhiTranslate=\"artemisApp.examManagement.testExam.testExam\"></span>\r\n                        </td>\r\n                    </tr>\r\n                }\r\n                @if (exam?.moduleNumber) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.examManagement.moduleNumber' | artemisTranslate }}:</th>\r\n                        <td>{{ exam.moduleNumber }}</td>\r\n                    </tr>\r\n                }\r\n                @if (exam?.courseName) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.exam.course' | artemisTranslate }}:</th>\r\n                        <td>{{ exam.courseName }}</td>\r\n                    </tr>\r\n                }\r\n                @if (exam?.examiner) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.examManagement.examiner' | artemisTranslate }}:</th>\r\n                        <td>{{ exam.examiner }}</td>\r\n                    </tr>\r\n                }\r\n                @if (exam?.title) {\r\n                    <tr id=\"exam-title\">\r\n                        <th>{{ 'artemisApp.examManagement.examTitle' | artemisTranslate }}:</th>\r\n                        <td>{{ exam.title }}</td>\r\n                    </tr>\r\n                }\r\n                @if (exam && !isTestExam && exam.startDate) {\r\n                    @if (isExamOverMultipleDays) {\r\n                        <tr>\r\n                            <th>{{ 'artemisApp.exam.time' | artemisTranslate }}:</th>\r\n                            <td>\r\n                                {{ exam.startDate | artemisDate: 'long-date' }} {{ exam.startDate | artemisDate: 'time' }} &nbsp;-&nbsp;{{ examEndDate | artemisDate: 'long-date' }}\r\n                                {{ examEndDate | artemisDate: 'time' }}\r\n                            </td>\r\n                        </tr>\r\n                    } @else {\r\n                        <tr class=\"mb-2\">\r\n                            <th>{{ 'artemisApp.exam.date' | artemisTranslate }}:</th>\r\n                            <td>{{ exam.startDate | artemisDate: 'long-date' }}</td>\r\n                        </tr>\r\n                        <tr class=\"mb-2\">\r\n                            <th>{{ 'artemisApp.exam.workingTime' | artemisTranslate }}:</th>\r\n                            <td>{{ exam.startDate | artemisDate: 'time' }} - {{ examEndDate | artemisDate: 'time' }}</td>\r\n                        </tr>\r\n                    }\r\n                    @if (exam.endDate && studentExam?.workingTime) {\r\n                        <tr>\r\n                            <th>{{ 'artemisApp.exam.duration' | artemisTranslate }}:</th>\r\n                            <td><jhi-student-exam-working-time [studentExam]=\"studentExam\" /></td>\r\n                        </tr>\r\n                    }\r\n                }\r\n                @if (displayOnExamCover) {\r\n                    @if (exam.examMaxPoints) {\r\n                        <tr>\r\n                            <th>{{ 'artemisApp.exam.points' | artemisTranslate }}:</th>\r\n                            <td>{{ exam.examMaxPoints }}</td>\r\n                        </tr>\r\n                    }\r\n                    @if (exam.numberOfExercisesInExam) {\r\n                        <tr>\r\n                            <th>{{ 'artemisApp.exam.exercises' | artemisTranslate }}:</th>\r\n                            <td>{{ exam.numberOfExercisesInExam }}</td>\r\n                        </tr>\r\n                    }\r\n                }\r\n                @if (exam && studentExam?.ended && (exam.examStudentReviewStart || exam.examStudentReviewEnd)) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.exam.examStudentReviewTimespan' | artemisTranslate }}:&nbsp;</th>\r\n                        <td class=\"d-flex align-items-center\">\r\n                            @if (exam.examStudentReviewStart) {\r\n                                <span> {{ exam.examStudentReviewStart | artemisDate }} </span>\r\n                            }\r\n                            @if (exam.examStudentReviewStart && exam.examStudentReviewEnd) {\r\n                                <span>&nbsp;-&nbsp;</span>\r\n                            }\r\n                            @if (exam.examStudentReviewEnd) {\r\n                                <span>{{ exam.examStudentReviewEnd | artemisDate }}</span>\r\n                            }\r\n                            @if (reviewIsOpen) {\r\n                                <div class=\"mx-2 badge bg-success\" jhiTranslate=\"artemisApp.exam.studentReviewEnabled\"></div>\r\n                            }\r\n                        </td>\r\n                    </tr>\r\n                }\r\n                @if (studentExam?.user?.name) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.exam.examinedStudent' | artemisTranslate }}:</th>\r\n                        <td>{{ studentExam!.user!.name }}</td>\r\n                    </tr>\r\n                }\r\n                <!-- For test exams, the currentDate (analogous to the real exam) and the workingTime should be displayed -->\r\n                @if (exam && isTestExam) {\r\n                    <tr>\r\n                        <th>{{ 'artemisApp.exam.date' | artemisTranslate }}:</th>\r\n                        <td>{{ currentDate! | artemisDate: 'long-date' }}</td>\r\n                    </tr>\r\n                    @if (exam?.workingTime) {\r\n                        <tr>\r\n                            <th>{{ 'artemisApp.exam.workingTime' | artemisTranslate }}:</th>\r\n                            <td>{{ exam.workingTime! | artemisDurationFromSeconds }}</td>\r\n                            <td></td>\r\n                        </tr>\r\n                    }\r\n                    @if (studentExam.submitted && studentExam.submissionDate && studentExam.startedDate) {\r\n                        <tr>\r\n                            <th>{{ 'artemisApp.exam.overview.testExam.workingTimeCalculated' | artemisTranslate }} :</th>\r\n                            <td>\r\n                                <jhi-test-exam-working-time [studentExam]=\"studentExam\" />\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'jhi-collapsible-card',\r\n    templateUrl: './collapsible-card.component.html',\r\n    styleUrls: ['../../../course/manage/course-exercise-card.component.scss', '../../../exercises/quiz/shared/quiz.scss', 'exam-result-summary.component.scss'],\r\n    imports: [FaIconComponent, NgbCollapse],\r\n})\r\nexport class CollapsibleCardComponent {\r\n    @Input() isCardContentCollapsed: boolean;\r\n    @Input() toggleCollapse: () => void;\r\n\r\n    faAngleRight = faAngleRight;\r\n}\r\n", "<div class=\"question card\">\r\n    <div class=\"card-header d-flex align-items-center justify-content-between\" (click)=\"toggleCollapse()\">\r\n        <ng-content select=\".header\" />\r\n        <button class=\"btn rotate-icon\" [class.rotated]=\"!isCardContentCollapsed\" [attr.aria-expanded]=\"isCardContentCollapsed\" [attr.aria-controls]=\"isCardContentCollapsed\">\r\n            <fa-icon size=\"2x\" [icon]=\"faAngleRight\" />\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"card-body question-card-body\" [ngbCollapse]=\"isCardContentCollapsed\">\r\n        <ng-content select=\".collapsible-content\" />\r\n    </div>\r\n</div>\r\n", "import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, inject } from '@angular/core';\r\nimport { IncludedInOverallScore } from 'app/entities/exercise.model';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { GradeType } from 'app/entities/grading-scale.model';\r\nimport { faAward, faClipboard } from '@fortawesome/free-solid-svg-icons';\r\nimport { StudentExamWithGradeDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { BonusStrategy } from 'app/entities/bonus.model';\r\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { roundScorePercentSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { captureException } from '@sentry/angular';\r\nimport { isExamResultPublished } from 'app/exam/participate/exam.utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CollapsibleCardComponent } from '../collapsible-card.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NoDataComponent } from 'app/shared/no-data-component';\r\nimport { GradingKeyTableComponent } from 'app/grading-system/grading-key-overview/grading-key/grading-key-table.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\ntype ExerciseInfo = {\r\n    icon: IconProp;\r\n    achievedPercentage?: number;\r\n    colorClass?: string;\r\n};\r\n\r\ntype ResultOverviewSection = 'grading-table' | 'grading-key' | 'bonus-grading-key';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-result-overview',\r\n    styleUrls: ['./exam-result-overview.component.scss'],\r\n    templateUrl: './exam-result-overview.component.html',\r\n    imports: [TranslateDirective, CollapsibleCardComponent, NgClass, FaIconComponent, NoDataComponent, GradingKeyTableComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ExamResultOverviewComponent implements OnInit, OnChanges {\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n    exerciseService = inject(ExerciseService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    readonly BonusStrategy = BonusStrategy;\r\n\r\n    @Input() studentExamWithGrade: StudentExamWithGradeDTO;\r\n    @Input() isGradingKeyCollapsed = true;\r\n    @Input() isBonusGradingKeyCollapsed = true;\r\n    @Input() exerciseInfos: Record<number, ExerciseInfo>;\r\n    @Input() isTestRun = false;\r\n\r\n    gradingScaleExists = false;\r\n    isBonus = false;\r\n    hasPassed = false;\r\n    grade?: string;\r\n\r\n    // Icons\r\n    faClipboard = faClipboard;\r\n    faAward = faAward;\r\n    faChevronRight = faChevronRight;\r\n\r\n    showIncludedInScoreColumn = false;\r\n    /**\r\n     * the max. achievable (normal) points. It is possible to exceed this value if there are bonus points.\r\n     */\r\n    maxPoints = 0;\r\n    overallAchievedPoints = 0;\r\n    overallAchievedPercentageRoundedByCourseSettings = 0;\r\n    isBonusGradingKeyDisplayed = false;\r\n\r\n    /**\r\n     * The points summary table will only be shown if:\r\n     * - exam.publishResultsDate is set\r\n     * - we are after the exam.publishResultsDate\r\n     * - at least one exercise has a result\r\n     * - it is a test run (results are published immediately)\r\n     */\r\n    showResultOverview = false;\r\n\r\n    isCollapsed: Record<ResultOverviewSection, boolean> = {\r\n        'grading-table': false,\r\n        'grading-key': true,\r\n        'bonus-grading-key': true,\r\n    };\r\n\r\n    ngOnInit() {\r\n        if (this.areResultsPublished()) {\r\n            this.setExamGrade();\r\n        }\r\n\r\n        this.updateLocalVariables();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.updateLocalVariables();\r\n    }\r\n\r\n    private areResultsPublished() {\r\n        return isExamResultPublished(this.isTestRun, this.studentExamWithGrade?.studentExam?.exam, this.serverDateService);\r\n    }\r\n\r\n    private updateLocalVariables() {\r\n        this.showResultOverview = !!(this.areResultsPublished() && this.hasAtLeastOneResult());\r\n        this.showIncludedInScoreColumn = this.containsExerciseThatIsNotIncludedCompletely();\r\n        this.maxPoints = this.studentExamWithGrade?.maxPoints ?? 0;\r\n        this.isBonusGradingKeyDisplayed = this.studentExamWithGrade.studentResult.gradeWithBonus?.bonusGrade != undefined;\r\n\r\n        this.overallAchievedPoints = this.getOverallAchievedPoints();\r\n        this.overallAchievedPercentageRoundedByCourseSettings = this.getOverallAchievedPercentageRoundedByCourseSettings();\r\n    }\r\n\r\n    /**\r\n     * used as fallback if not pre-calculated by the server\r\n     */\r\n    private sumExerciseScores() {\r\n        return (this.studentExamWithGrade.studentExam?.exercises ?? []).reduce((exerciseScoreSum, exercise) => {\r\n            const achievedPoints = this.studentExamWithGrade?.achievedPointsPerExercise?.[exercise.id!] ?? 0;\r\n            return exerciseScoreSum + achievedPoints;\r\n        }, 0);\r\n    }\r\n\r\n    private getOverallAchievedPoints() {\r\n        const overallAchievedPoints = this.studentExamWithGrade?.studentResult.overallPointsAchieved;\r\n        if (overallAchievedPoints === undefined || overallAchievedPoints === 0) {\r\n            return this.sumExerciseScores();\r\n        }\r\n\r\n        return overallAchievedPoints;\r\n    }\r\n\r\n    private getOverallAchievedPercentageRoundedByCourseSettings() {\r\n        let overallScoreAchieved = this.studentExamWithGrade.studentResult.overallScoreAchieved;\r\n        if (overallScoreAchieved === undefined || overallScoreAchieved === 0) {\r\n            overallScoreAchieved = this.summedAchievedExerciseScorePercentage();\r\n        }\r\n\r\n        return roundScorePercentSpecifiedByCourseSettings(overallScoreAchieved / 100, this.studentExamWithGrade.studentExam?.exam?.course);\r\n    }\r\n\r\n    /**\r\n     * used as fallback if not pre-calculated by the server\r\n     */\r\n    private summedAchievedExerciseScorePercentage() {\r\n        let summedPercentages = 0;\r\n        let numberOfExercises = 0;\r\n\r\n        Object.entries(this.exerciseInfos).forEach(([, exerciseInfo]) => {\r\n            summedPercentages += exerciseInfo.achievedPercentage ?? 0;\r\n            numberOfExercises++;\r\n        });\r\n\r\n        if (numberOfExercises === 0) {\r\n            return 0;\r\n        }\r\n\r\n        return summedPercentages / numberOfExercises;\r\n    }\r\n\r\n    /**\r\n     * If all exercises are included in the overall score, we do not need to show the column\r\n     * -> displayed if at least one exercise is not included in the overall score\r\n     */\r\n    containsExerciseThatIsNotIncludedCompletely(): boolean {\r\n        for (const exercise of this.studentExamWithGrade?.studentExam?.exercises ?? []) {\r\n            if (exercise.includedInOverallScore !== IncludedInOverallScore.INCLUDED_COMPLETELY) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets the student's exam grade if a grading scale exists for the exam\r\n     */\r\n    setExamGrade() {\r\n        if (this.studentExamWithGrade?.studentResult?.overallGrade != undefined) {\r\n            this.gradingScaleExists = true;\r\n            this.grade = this.studentExamWithGrade.studentResult.overallGrade;\r\n            this.isBonus = this.studentExamWithGrade.gradeType === GradeType.BONUS;\r\n            this.hasPassed = !!this.studentExamWithGrade.studentResult.hasPassed;\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the sum of max. achievable normal and bonus points. It is not possible to exceed this value.\r\n     */\r\n    getMaxNormalAndBonusPointsSum(): number {\r\n        const maxAchievableBonusPoints = this.studentExamWithGrade?.maxBonusPoints ?? 0;\r\n        return this.maxPoints + maxAchievableBonusPoints;\r\n    }\r\n\r\n    scrollToExercise(exerciseId?: number) {\r\n        if (exerciseId === undefined) {\r\n            return;\r\n        }\r\n\r\n        const searchedId = `exercise-${exerciseId}`;\r\n        const targetElement = document.getElementById(searchedId);\r\n\r\n        if (targetElement) {\r\n            targetElement.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'start',\r\n                inline: 'nearest',\r\n            });\r\n        } else {\r\n            const errorMessage = 'Cannot scroll to exercise, could not find exercise with corresponding id';\r\n            captureException(new Error(errorMessage), {\r\n                extra: {\r\n                    exerciseId,\r\n                    searchedId,\r\n                    targetElement,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private hasAtLeastOneResult(): boolean {\r\n        const exercises = this.studentExamWithGrade?.studentExam?.exercises;\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n        if (exercises?.length! > 0) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            return exercises!.some((exercise) => exercise.studentParticipations?.[0]?.results?.length! > 0);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    toggleCollapse(resultOverviewSection: ResultOverviewSection) {\r\n        return () => (this.isCollapsed[resultOverviewSection] = !this.isCollapsed[resultOverviewSection]);\r\n    }\r\n}\r\n", "@if (showResultOverview) {\r\n    <div>\r\n        <h3 jhiTranslate=\"artemisApp.exam.examSummary.points.overview\"></h3>\r\n\r\n        <jhi-collapsible-card [isCardContentCollapsed]=\"isCollapsed['grading-table']\" [toggleCollapse]=\"toggleCollapse('grading-table')\">\r\n            <div class=\"header h5\" jhiTranslate=\"artemisApp.exam.examSummary.resultTable\"></div>\r\n\r\n            <div class=\"container exam-points-summary-container collapsible-content\">\r\n                <table class=\"table table-striped table-hover\" id=\"result-overview-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\" jhiTranslate=\"artemisApp.exam.examSummary.points.exercise\"></th>\r\n                            @if (showIncludedInScoreColumn) {\r\n                                <th scope=\"col\" jhiTranslate=\"artemisApp.exercise.includedInOverallScore\"></th>\r\n                            }\r\n                            <th scope=\"col\" jhiTranslate=\"artemisApp.exam.examSummary.points.yourPoints\"></th>\r\n                            <th scope=\"col\" jhiTranslate=\"artemisApp.exam.examSummary.points.maxPoints\"></th>\r\n                            <th scope=\"col\" jhiTranslate=\"artemisApp.exam.examSummary.points.achievedPercentage\"></th>\r\n                            @if (studentExamWithGrade?.maxBonusPoints) {\r\n                                <th scope=\"col\" jhiTranslate=\"artemisApp.exam.examSummary.points.maxBonus\"></th>\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (exercise of studentExamWithGrade?.studentExam?.exercises; track exercise; let exerciseIndex = $index) {\r\n                            <tr\r\n                                [ngClass]=\"{\r\n                                    'font-italic text-danger font-weight-bold': exercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED,\r\n                                    'font-italic text-warning font-weight-bold': exercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_AS_BONUS,\r\n                                }\"\r\n                                (click)=\"scrollToExercise(exercise.id)\"\r\n                                [class.not-included-in-score]=\"exercise.includedInOverallScore === IncludedInOverallScore.NOT_INCLUDED\"\r\n                            >\r\n                                <th scope=\"row\">{{ exerciseIndex + 1 }}</th>\r\n                                <td>\r\n                                    &nbsp;\r\n                                    @if (exercise?.type && exerciseInfos[exercise.id!] !== undefined) {\r\n                                        <div class=\"icon-container\">\r\n                                            <fa-icon [icon]=\"exerciseInfos[exercise.id!].icon\" class=\"icon\" />\r\n                                        </div>\r\n                                    }\r\n                                    &nbsp;\r\n                                    <span>{{ exercise?.exerciseGroup?.title ?? '-' }}</span>\r\n                                </td>\r\n                                @if (showIncludedInScoreColumn) {\r\n                                    <td class=\"text-center\">{{ exerciseService.isIncludedInScore(exercise) }}</td>\r\n                                }\r\n                                <td class=\"text-center\">\r\n                                    {{ studentExamWithGrade?.achievedPointsPerExercise?.[exercise.id!] ?? 0 }}\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                    @if (exercise.maxPoints !== undefined) {\r\n                                        <span>{{ exercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_AS_BONUS ? 0 : exercise.maxPoints }}</span>\r\n                                    }\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                    @if (exerciseInfos[exercise.id!] !== undefined && exerciseInfos[exercise.id!].achievedPercentage !== undefined) {\r\n                                        <span [class]=\"exerciseInfos[exercise.id!].colorClass\"> {{ exerciseInfos[exercise.id!].achievedPercentage }} % </span>\r\n                                    } @else {\r\n                                        -\r\n                                    }\r\n                                </td>\r\n                                @if (studentExamWithGrade?.maxBonusPoints) {\r\n                                    <td>\r\n                                        @if (exercise.bonusPoints !== undefined) {\r\n                                            <span>{{\r\n                                                exercise.includedInOverallScore === IncludedInOverallScore.INCLUDED_AS_BONUS ? exercise.maxPoints : exercise.bonusPoints\r\n                                            }}</span>\r\n                                        }\r\n                                    </td>\r\n                                }\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                    <tfoot class=\"total-footer\">\r\n                        <tr>\r\n                            <th scope=\"row\" colspan=\"2\" jhiTranslate=\"artemisApp.exam.examSummary.points.total\"></th>\r\n                            @if (showIncludedInScoreColumn) {\r\n                                <td class=\"text-center\">-</td>\r\n                            }\r\n                            <th class=\"text-center\">\r\n                                {{ overallAchievedPoints }}\r\n                            </th>\r\n                            <th class=\"text-center\">\r\n                                {{ maxPoints }}\r\n                            </th>\r\n                            <th class=\"text-center\">\r\n                                @if (studentExamWithGrade.studentResult.overallScoreAchieved !== undefined) {\r\n                                    <span [class]=\"hasPassed ? 'text-success' : 'text-danger'\"> {{ overallAchievedPercentageRoundedByCourseSettings }} % </span>\r\n                                } @else {\r\n                                    <jhi-no-data />\r\n                                }\r\n                            </th>\r\n                            @if (studentExamWithGrade?.maxBonusPoints) {\r\n                                <th>\r\n                                    {{ studentExamWithGrade?.maxBonusPoints }}\r\n                                </th>\r\n                            }\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n                <div class=\"mx-4 my-auto\">\r\n                    <div class=\"h5\">\r\n                        @if (studentExamWithGrade?.maxBonusPoints) {\r\n                            {{\r\n                                'artemisApp.exam.examSummary.points.youAchievedWithBonus'\r\n                                    | artemisTranslate\r\n                                        : {\r\n                                              achievedPoints: overallAchievedPoints,\r\n                                              normalPoints: maxPoints,\r\n                                          }\r\n                            }}\r\n                        }\r\n                        @if (studentExamWithGrade?.maxBonusPoints) {\r\n                            {{\r\n                                'artemisApp.exam.examSummary.points.youAchieved'\r\n                                    | artemisTranslate\r\n                                        : {\r\n                                              achievedPoints: overallAchievedPoints,\r\n                                              normalPoints: maxPoints,\r\n                                          }\r\n                            }}\r\n                        }\r\n                        @if (studentExamWithGrade.studentResult.gradeWithBonus !== undefined) {\r\n                            {{\r\n                                'artemisApp.exam.examSummary.points.youAchievedFromBonus.' + studentExamWithGrade.studentResult.gradeWithBonus.bonusStrategy\r\n                                    | artemisTranslate\r\n                                        : {\r\n                                              achievedBonus: studentExamWithGrade.studentResult.gradeWithBonus.bonusGrade,\r\n                                              bonusFromTitle: studentExamWithGrade.studentResult.gradeWithBonus.bonusFromTitle,\r\n                                          }\r\n                            }}\r\n                        }\r\n                    </div>\r\n                    @if (studentExamWithGrade?.studentResult?.gradeWithBonus?.finalGrade) {\r\n                        <div class=\"h5\">\r\n                            <span jhiTranslate=\"artemisApp.exam.examSummary.gradeBeforeBonus\"></span>\r\n                            {{ studentExamWithGrade.studentResult.overallGrade }}\r\n                        </div>\r\n                        <div class=\"h5\">\r\n                            <span jhiTranslate=\"artemisApp.exam.examSummary.gradeAfterBonus\"></span>\r\n                            {{ studentExamWithGrade.studentResult.gradeWithBonus?.finalGrade }}\r\n                        </div>\r\n                    } @else {\r\n                        <div class=\"h5\">\r\n                            <span jhiTranslate=\"artemisApp.exam.examSummary.grade\"></span>\r\n                            {{ studentExamWithGrade.studentResult.overallGrade }}\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </jhi-collapsible-card>\r\n\r\n        @if (gradingScaleExists) {\r\n            <jhi-collapsible-card [isCardContentCollapsed]=\"isCollapsed['grading-key']\" [toggleCollapse]=\"toggleCollapse('grading-key')\">\r\n                <div class=\"header h5\">\r\n                    <fa-icon [icon]=\"faClipboard\" /> &nbsp;\r\n                    <span jhiTranslate=\"artemisApp.exam.examSummary.gradeKey\"></span>\r\n                </div>\r\n\r\n                <div class=\"collapsible-content\">\r\n                    <jhi-grade-key-table [studentGradeOrBonusPointsOrGradeBonus]=\"grade\" />\r\n                </div>\r\n            </jhi-collapsible-card>\r\n\r\n            @if (isBonusGradingKeyDisplayed) {\r\n                <jhi-collapsible-card [isCardContentCollapsed]=\"isCollapsed['bonus-grading-key']\" [toggleCollapse]=\"toggleCollapse('bonus-grading-key')\">\r\n                    <div class=\"header h5\">\r\n                        <fa-icon [icon]=\"faAward\" />&nbsp;\r\n                        <span jhiTranslate=\"artemisApp.exam.examSummary.bonusGradeKey\"></span>\r\n                    </div>\r\n\r\n                    <div class=\"collapsible-content\">\r\n                        <jhi-grade-key-table\r\n                            [studentGradeOrBonusPointsOrGradeBonus]=\"'' + (studentExamWithGrade.studentResult.gradeWithBonus?.bonusGrade ?? 0)\"\r\n                            [forBonus]=\"true\"\r\n                        />\r\n                    </div>\r\n                </jhi-collapsible-card>\r\n            }\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ResultSummaryExerciseInfo } from 'app/exam/participate/summary/exam-result-summary.component';\r\nimport { SubmissionType } from 'app/entities/submission.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgClass } from '@angular/common';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-result-summary-exercise-card-header',\r\n    templateUrl: './exam-result-summary-exercise-card-header.component.html',\r\n    imports: [FaIconComponent, NgClass, TranslateDirective, ArtemisTranslatePipe],\r\n})\r\nexport class ExamResultSummaryExerciseCardHeaderComponent {\r\n    @Input() index: number;\r\n    @Input() exercise: Exercise;\r\n    @Input() exerciseInfo?: ResultSummaryExerciseInfo;\r\n    @Input() resultsPublished: boolean;\r\n\r\n    readonly SUBMISSION_TYPE_ILLEGAL = SubmissionType.ILLEGAL;\r\n}\r\n", "<div class=\"d-flex align-items-center\">\r\n    <div class=\"d-flex align-items-center\">\r\n        <h5 class=\"mb-0\" [id]=\"'exercise-group-title-' + exercise.id\">\r\n            #{{ index + 1 }} &nbsp;\r\n            @if (exercise?.type && exerciseInfo?.icon) {\r\n                <fa-icon [icon]=\"exerciseInfo!.icon\" />\r\n            }\r\n            &nbsp;\r\n            {{ exercise.exerciseGroup?.title }}\r\n        </h5>\r\n        <div class=\"ms-3\" id=\"exercise-result-score\">\r\n            @if (resultsPublished && exerciseInfo?.achievedPoints !== undefined) {\r\n                <div class=\"d-flex\">\r\n                    [{{ exerciseInfo?.achievedPoints }} / {{ exercise.maxPoints }} {{ 'artemisApp.examParticipation.exercisePoints' | artemisTranslate }}]\r\n                    <div style=\"margin-left: 1em\">\r\n                        @if (exerciseInfo?.resultIconClass) {\r\n                            <fa-icon [ngClass]=\"exerciseInfo?.colorClass\" [icon]=\"exerciseInfo?.resultIconClass!\" size=\"lg\" />\r\n                        }\r\n                        @if (exerciseInfo?.achievedPercentage !== undefined) {\r\n                            <span data-testid=\"achieved-percentage\" [class]=\"exerciseInfo!.colorClass\"> {{ exerciseInfo!.achievedPercentage }}% </span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            } @else {\r\n                [{{ exercise.maxPoints }} {{ 'artemisApp.examParticipation.exercisePoints' | artemisTranslate }}]\r\n            }\r\n        </div>\r\n    </div>\r\n    @if (exercise.studentParticipations?.[0]?.submissions?.[0]?.type === SUBMISSION_TYPE_ILLEGAL) {\r\n        <div>\r\n            <span class=\"badge bg-danger\" jhiTranslate=\"artemisApp.assessment.assessmentIllegalSubmission\"></span>\r\n        </div>\r\n    }\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { TextEditorComponent } from 'app/exercises/text/participate/text-editor.component';\r\n\r\n@Component({\r\n    selector: 'jhi-text-exam-summary',\r\n    templateUrl: './text-exam-summary.component.html',\r\n    imports: [TextEditorComponent],\r\n})\r\nexport class TextExamSummaryComponent {\r\n    @Input() exercise: Exercise;\r\n    @Input() submission: TextSubmission;\r\n    @Input() expandProblemStatement = false;\r\n    @Input() isAfterResultsArePublished = false;\r\n}\r\n", "<div>\r\n    @if (exercise?.studentParticipations?.length && exercise?.studentParticipations?.[0]?.id) {\r\n        <jhi-text-editor\r\n            [participationId]=\"exercise.studentParticipations![0].id\"\r\n            [displayHeader]=\"false\"\r\n            [expandProblemStatement]=\"expandProblemStatement\"\r\n            [inputExercise]=\"isAfterResultsArePublished ? undefined : exercise\"\r\n            [inputParticipation]=\"isAfterResultsArePublished ? undefined : exercise.studentParticipations![0]\"\r\n            [inputSubmission]=\"isAfterResultsArePublished ? undefined : submission\"\r\n            [isExamSummary]=\"true\"\r\n        />\r\n    } @else {\r\n        <div>No submission</div>\r\n    }\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { ModelingSubmission } from 'app/entities/modeling-submission.model';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ModelingSubmissionComponent } from 'app/exercises/modeling/participate/modeling-submission.component';\r\n\r\n@Component({\r\n    selector: 'jhi-modeling-exam-summary',\r\n    templateUrl: './modeling-exam-summary.component.html',\r\n    imports: [ModelingSubmissionComponent],\r\n})\r\nexport class ModelingExamSummaryComponent {\r\n    @Input() exercise: ModelingExercise;\r\n    @Input() submission: ModelingSubmission;\r\n    @Input() isPrinting = false;\r\n    @Input() expandProblemStatement = false;\r\n    @Input() isAfterResultsArePublished = false;\r\n}\r\n", "<div>\r\n    @if (exercise?.studentParticipations?.length && exercise?.studentParticipations?.[0]?.id) {\r\n        <jhi-modeling-submission\r\n            [participationId]=\"exercise.studentParticipations![0].id\"\r\n            [displayHeader]=\"false\"\r\n            [isPrinting]=\"isPrinting\"\r\n            [expandProblemStatement]=\"expandProblemStatement\"\r\n            [inputExercise]=\"isAfterResultsArePublished ? undefined : exercise\"\r\n            [inputSubmission]=\"isAfterResultsArePublished ? undefined : submission\"\r\n            [inputParticipation]=\"isAfterResultsArePublished ? undefined : exercise.studentParticipations![0]\"\r\n            [isExamSummary]=\"true\"\r\n        />\r\n    } @else {\r\n        <div>No submission</div>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnChanges, inject } from '@angular/core';\r\nimport dayjs from 'dayjs/esm';\r\nimport { QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { QuizSubmission } from 'app/entities/quiz/quiz-submission.model';\r\nimport { AnswerOption } from 'app/entities/quiz/answer-option.model';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\nimport { ShortAnswerSubmittedText } from 'app/entities/quiz/short-answer-submitted-text.model';\r\nimport { MultipleChoiceSubmittedAnswer } from 'app/entities/quiz/multiple-choice-submitted-answer.model';\r\nimport { DragAndDropSubmittedAnswer } from 'app/entities/quiz/drag-and-drop-submitted-answer.model';\r\nimport { ShortAnswerSubmittedAnswer } from 'app/entities/quiz/short-answer-submitted-answer.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { roundValueSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { QuizParticipation } from 'app/entities/quiz/quiz-participation.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { MultipleChoiceQuestionComponent } from 'app/exercises/quiz/shared/questions/multiple-choice-question/multiple-choice-question.component';\r\nimport { DragAndDropQuestionComponent } from 'app/exercises/quiz/shared/questions/drag-and-drop-question/drag-and-drop-question.component';\r\nimport { ShortAnswerQuestionComponent } from 'app/exercises/quiz/shared/questions/short-answer-question/short-answer-question.component';\r\nimport { captureException } from '@sentry/angular';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-exam-summary',\r\n    templateUrl: './quiz-exam-summary.component.html',\r\n    imports: [TranslateDirective, MultipleChoiceQuestionComponent, DragAndDropQuestionComponent, ShortAnswerQuestionComponent],\r\n})\r\nexport class QuizExamSummaryComponent implements OnChanges {\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n\r\n    readonly DRAG_AND_DROP = QuizQuestionType.DRAG_AND_DROP;\r\n    readonly MULTIPLE_CHOICE = QuizQuestionType.MULTIPLE_CHOICE;\r\n    readonly SHORT_ANSWER = QuizQuestionType.SHORT_ANSWER;\r\n\r\n    selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n    dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n    shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n    @Input() quizParticipation: QuizParticipation;\r\n    @Input() submission: QuizSubmission;\r\n    @Input() resultsPublished: boolean;\r\n    @Input() exam: Exam;\r\n\r\n    result?: Result;\r\n\r\n    ngOnChanges() {\r\n        this.updateViewFromSubmission();\r\n        if (this.quizParticipation.studentParticipations) {\r\n            this.result =\r\n                this.quizParticipation.studentParticipations.length > 0 && this.quizParticipation.studentParticipations[0].results?.length\r\n                    ? this.quizParticipation.studentParticipations[0].results[0]\r\n                    : undefined;\r\n        } else {\r\n            this.result = this.submission.results?.length ? this.submission.results[0] : undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * applies the data from the model to the UI (reverse of updateSubmissionFromView):\r\n     *\r\n     * Sets the checkmarks (selected answers) for all questions according to the submission data\r\n     * this needs to be done when we get new submission data, e.g. through the websocket connection\r\n     */\r\n    updateViewFromSubmission() {\r\n        // create dictionaries (key: questionID, value: Array of selected answerOptions / mappings)\r\n        // for the submittedAnswers to hand the selected options / mappings in individual arrays to the question components\r\n        this.selectedAnswerOptions = new Map<number, AnswerOption[]>();\r\n        this.dragAndDropMappings = new Map<number, DragAndDropMapping[]>();\r\n        this.shortAnswerSubmittedTexts = new Map<number, ShortAnswerSubmittedText[]>();\r\n\r\n        if (this.quizParticipation.quizQuestions && this.submission) {\r\n            // iterate through all questions of this quiz\r\n            this.quizParticipation.quizQuestions.forEach((question) => {\r\n                // find the submitted answer that belongs to this question, only when submitted answers already exist\r\n                const submittedAnswer = this.submission.submittedAnswers\r\n                    ? this.submission.submittedAnswers.find((answer) => {\r\n                          return answer.quizQuestion!.id === question.id;\r\n                      })\r\n                    : undefined;\r\n\r\n                if (question.type === QuizQuestionType.MULTIPLE_CHOICE) {\r\n                    // add the array of selected options to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                    if (submittedAnswer) {\r\n                        const selectedOptions = (submittedAnswer as MultipleChoiceSubmittedAnswer).selectedOptions;\r\n                        this.selectedAnswerOptions.set(question.id!, selectedOptions ? selectedOptions : []);\r\n                    } else {\r\n                        // not found, set to empty array\r\n                        this.selectedAnswerOptions.set(question.id!, []);\r\n                    }\r\n                } else if (question.type === QuizQuestionType.DRAG_AND_DROP) {\r\n                    // add the array of mappings to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                    if (submittedAnswer) {\r\n                        const mappings = (submittedAnswer as DragAndDropSubmittedAnswer).mappings;\r\n                        this.dragAndDropMappings.set(question.id!, mappings ? mappings : []);\r\n                    } else {\r\n                        // not found, set to empty array\r\n                        this.dragAndDropMappings.set(question.id!, []);\r\n                    }\r\n                } else if (question.type === QuizQuestionType.SHORT_ANSWER) {\r\n                    // add the array of submitted texts to the dictionary (add an empty array, if there is no submittedAnswer for this question)\r\n                    if (submittedAnswer) {\r\n                        const submittedTexts = (submittedAnswer as ShortAnswerSubmittedAnswer).submittedTexts;\r\n                        this.shortAnswerSubmittedTexts.set(question.id!, submittedTexts ? submittedTexts : []);\r\n                    } else {\r\n                        // not found, set to empty array\r\n                        this.shortAnswerSubmittedTexts.set(question.id!, []);\r\n                    }\r\n                } else {\r\n                    captureException('Unknown question type: ' + question);\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    getScoreForQuizQuestion(quizQuestionId?: number) {\r\n        if (this.submission && this.submission.submittedAnswers && this.submission.submittedAnswers.length > 0) {\r\n            const submittedAnswer = this.submission.submittedAnswers.find((answer) => {\r\n                return answer && answer.quizQuestion ? answer.quizQuestion.id === quizQuestionId : false;\r\n            });\r\n            if (submittedAnswer && submittedAnswer.scoreInPoints !== undefined) {\r\n                return roundValueSpecifiedByCourseSettings(submittedAnswer.scoreInPoints, this.exam.course);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * We only show the notice when there is a publishResultsDate that has already passed by now and the result is missing\r\n     */\r\n    get showMissingResultsNotice(): boolean {\r\n        if (this.exam && this.exam.publishResultsDate && this.quizParticipation.studentParticipations && this.quizParticipation.studentParticipations.length > 0) {\r\n            return dayjs(this.exam.publishResultsDate).isBefore(this.serverDateService.now()) && !this.result;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "@if (quizParticipation.quizQuestions && quizParticipation.quizQuestions.length > 0) {\r\n    <div class=\"quiz-container\">\r\n        @if (showMissingResultsNotice) {\r\n            <div class=\"alert alert-info mb-2\" jhiTranslate=\"artemisApp.exam.examSummary.missingResultNotice\"></div>\r\n        }\r\n        @for (question of quizParticipation.quizQuestions!; track question; let i = $index) {\r\n            <div class=\"quiz-content\">\r\n                @if (question.type === MULTIPLE_CHOICE) {\r\n                    <jhi-multiple-choice-question\r\n                        id=\"question{{ i }}\"\r\n                        class=\"quiz-question\"\r\n                        [question]=\"question\"\r\n                        [selectedAnswerOptions]=\"selectedAnswerOptions.get(question.id!)!\"\r\n                        [clickDisabled]=\"true\"\r\n                        [showResult]=\"resultsPublished && !showMissingResultsNotice\"\r\n                        [quizQuestions]=\"quizParticipation.quizQuestions\"\r\n                        [submittedResult]=\"result!\"\r\n                        [forceSampleSolution]=\"false\"\r\n                        [questionIndex]=\"i + 1\"\r\n                        [score]=\"getScoreForQuizQuestion(question.id!)\"\r\n                    />\r\n                }\r\n                @if (question.type === DRAG_AND_DROP) {\r\n                    <jhi-drag-and-drop-question\r\n                        id=\"question{{ i }}\"\r\n                        class=\"quiz-question\"\r\n                        [question]=\"question\"\r\n                        [mappings]=\"dragAndDropMappings.get(question.id!)!\"\r\n                        [clickDisabled]=\"true\"\r\n                        [showResult]=\"resultsPublished && !showMissingResultsNotice\"\r\n                        [forceSampleSolution]=\"false\"\r\n                        [questionIndex]=\"i + 1\"\r\n                        [score]=\"getScoreForQuizQuestion(question.id!)\"\r\n                    />\r\n                }\r\n                @if (question.type === SHORT_ANSWER) {\r\n                    <jhi-short-answer-question\r\n                        id=\"question{{ i }}\"\r\n                        class=\"quiz-question\"\r\n                        [question]=\"question\"\r\n                        [submittedTexts]=\"shortAnswerSubmittedTexts.get(question.id!)!\"\r\n                        [clickDisabled]=\"true\"\r\n                        [showResult]=\"resultsPublished && !showMissingResultsNotice\"\r\n                        [forceSampleSolution]=\"false\"\r\n                        [questionIndex]=\"i + 1\"\r\n                        [score]=\"getScoreForQuizQuestion(question.id!)\"\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { FileUploadSubmission } from 'app/entities/file-upload-submission.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { FileUploadSubmissionComponent } from 'app/exercises/file-upload/participate/file-upload-submission.component';\r\n\r\n@Component({\r\n    selector: 'jhi-file-upload-exam-summary',\r\n    templateUrl: './file-upload-exam-summary.component.html',\r\n    imports: [FileUploadSubmissionComponent],\r\n})\r\nexport class FileUploadExamSummaryComponent {\r\n    @Input() submission: FileUploadSubmission;\r\n    @Input() exercise: Exercise;\r\n    @Input() expandProblemStatement = false;\r\n    @Input() isAfterResultsArePublished = false;\r\n}\r\n", "<div>\r\n    @if (exercise?.studentParticipations?.length && exercise?.studentParticipations?.[0]?.id) {\r\n        <jhi-file-upload-submission\r\n            [participationId]=\"exercise.studentParticipations![0].id\"\r\n            [displayHeader]=\"false\"\r\n            [expandProblemStatement]=\"expandProblemStatement\"\r\n            [displayedInExamSummary]=\"true\"\r\n            [inputExercise]=\"isAfterResultsArePublished ? undefined : exercise\"\r\n            [inputSubmission]=\"isAfterResultsArePublished ? undefined : submission\"\r\n            [inputParticipation]=\"isAfterResultsArePublished ? undefined : exercise.studentParticipations![0]\"\r\n        />\r\n    } @else {\r\n        <div>No submission</div>\r\n    }\r\n</div>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { ProgrammingSubmission } from 'app/entities/programming/programming-submission.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { MissingResultInformation, evaluateTemplateStatus } from 'app/exercises/shared/result/result.utils';\r\nimport { FeedbackComponentPreparedParams, prepareFeedbackComponentParameters } from 'app/exercises/shared/feedback/feedback.utils';\r\nimport { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\nimport { ExerciseCacheService } from 'app/exercises/shared/exercise/exercise-cache.service';\r\nimport { ProfileService } from 'app/shared/layouts/profiles/profile.service';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { createCommitUrl } from 'app/exercises/programming/shared/utils/programming-exercise.utils';\r\nimport { Router } from '@angular/router';\r\nimport { PROFILE_LOCALVC } from 'app/app.constants';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { CodeButtonComponent } from 'app/shared/components/code-button/code-button.component';\r\nimport { FeedbackComponent } from 'app/exercises/shared/feedback/feedback.component';\r\nimport { ProgrammingExerciseInstructionComponent } from 'app/exercises/programming/shared/instructions-render/programming-exercise-instruction.component';\r\nimport { ComplaintsStudentViewComponent } from 'app/complaints/complaints-for-students/complaints-student-view.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-programming-exam-summary',\r\n    templateUrl: './programming-exam-summary.component.html',\r\n    imports: [TranslateDirective, CodeButtonComponent, FeedbackComponent, ProgrammingExerciseInstructionComponent, ComplaintsStudentViewComponent, ArtemisTranslatePipe],\r\n})\r\nexport class ProgrammingExamSummaryComponent implements OnInit {\r\n    private exerciseService = inject(ExerciseService);\r\n    private exerciseCacheService = inject(ExerciseCacheService, { optional: true });\r\n    private profileService = inject(ProfileService);\r\n    private router = inject(Router);\r\n\r\n    @Input() exercise: ProgrammingExercise;\r\n\r\n    @Input() participation: ProgrammingExerciseStudentParticipation;\r\n\r\n    @Input() submission: ProgrammingSubmission;\r\n\r\n    @Input() isTestRun = false;\r\n\r\n    @Input() exam: Exam;\r\n\r\n    @Input() isAfterStudentReviewStart = false;\r\n\r\n    @Input() resultsPublished = false;\r\n\r\n    @Input() isPrinting = false;\r\n\r\n    @Input() isAfterResultsArePublished = false;\r\n\r\n    @Input() instructorView = false;\r\n\r\n    readonly PROGRAMMING: ExerciseType = ExerciseType.PROGRAMMING;\r\n\r\n    protected readonly AssessmentType = AssessmentType;\r\n    protected readonly ProgrammingExercise = ProgrammingExercise;\r\n    protected readonly ExerciseType = ExerciseType;\r\n\r\n    result: Result | undefined;\r\n\r\n    feedbackComponentParameters: FeedbackComponentPreparedParams;\r\n\r\n    commitUrl: string | undefined;\r\n    commitHash: string | undefined;\r\n\r\n    routerLink: string;\r\n    localVCEnabled = false;\r\n    isInCourseManagement = false;\r\n\r\n    ngOnInit() {\r\n        this.routerLink = this.router.url;\r\n        this.result = this.participation.results?.[0];\r\n        this.commitHash = this.submission?.commitHash?.slice(0, 11);\r\n        this.isInCourseManagement = this.router.url.includes('course-management');\r\n        const isBuilding = false;\r\n        const missingResultInfo = MissingResultInformation.NONE;\r\n\r\n        const templateStatus = evaluateTemplateStatus(this.exercise, this.participation, this.participation.results?.[0], isBuilding, missingResultInfo);\r\n\r\n        if (this.result) {\r\n            this.feedbackComponentParameters = prepareFeedbackComponentParameters(\r\n                this.exercise,\r\n                this.result,\r\n                this.participation,\r\n                templateStatus,\r\n                this.exam.latestIndividualEndDate,\r\n                this.exerciseCacheService ?? this.exerciseService,\r\n            );\r\n        }\r\n\r\n        this.updateCommitUrl();\r\n    }\r\n\r\n    private updateCommitUrl() {\r\n        // Get active profiles, to distinguish between VC systems for the commit link of the result\r\n        this.profileService.getProfileInfo().subscribe((profileInfo) => {\r\n            const commitHashURLTemplate = profileInfo?.commitHashURLTemplate;\r\n            this.commitUrl = createCommitUrl(commitHashURLTemplate, this.exercise.projectKey, this.participation, this.submission);\r\n            this.localVCEnabled = profileInfo.activeProfiles?.includes(PROFILE_LOCALVC);\r\n        });\r\n    }\r\n}\r\n", "<ng-container>\r\n    <div>\r\n        <div class=\"row gx-5\">\r\n            <div class=\"col-md-4\">\r\n                <div class=\"mb-4\">\r\n                    @if (submission) {\r\n                        <h5 jhiTranslate=\"artemisApp.exam.examSummary.yourSubmission\"></h5>\r\n                    }\r\n                    <h1>Programming exam summary</h1>\r\n                    <jhi-code-button\r\n                        [smallButtons]=\"true\"\r\n                        [participations]=\"[participation]\"\r\n                        [repositoryUri]=\"participation?.userIndependentRepositoryUri ?? ''\"\r\n                        [routerLinkForRepositoryView]=\"\r\n                            isInCourseManagement\r\n                                ? ['..', 'programming-exercises', exercise.id!, 'repository', 'USER', participation.id!]\r\n                                : [routerLink, 'exercises', exercise.id!, 'repository', participation.id!]\r\n                        \"\r\n                    />\r\n                    <br />\r\n                    <span>\r\n                        @if (submission) {\r\n                            <span jhiTranslate=\"artemisApp.exam.examSummary.submissionLinkedToCommit\"></span>\r\n                        }\r\n                        @if (commitUrl) {\r\n                            <a [href]=\"commitUrl\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {{ commitHash || ('artemisApp.exam.examSummary.noCommitHash' | artemisTranslate) }}\r\n                            </a>\r\n                        } @else {\r\n                            {{ commitHash || ('artemisApp.exam.examSummary.noCommitHash' | artemisTranslate) }}\r\n                        }\r\n                    </span>\r\n                </div>\r\n                @if (isAfterResultsArePublished) {\r\n                    @if (submission) {\r\n                        <h5 jhiTranslate=\"artemisApp.exam.examSummary.assessment\"></h5>\r\n                    }\r\n                    @if (feedbackComponentParameters && feedbackComponentParameters.result) {\r\n                        <jhi-result-detail\r\n                            [exercise]=\"feedbackComponentParameters.exercise\"\r\n                            [result]=\"feedbackComponentParameters.result\"\r\n                            [showScoreChart]=\"false\"\r\n                            [exerciseType]=\"feedbackComponentParameters.exerciseType ?? ExerciseType.PROGRAMMING\"\r\n                            [latestDueDate]=\"feedbackComponentParameters.latestDueDate\"\r\n                            [messageKey]=\"feedbackComponentParameters.messageKey\"\r\n                            [showMissingAutomaticFeedbackInformation]=\"feedbackComponentParameters.showMissingAutomaticFeedbackInformation ?? false\"\r\n                            [isExamReviewPage]=\"true\"\r\n                            [isPrinting]=\"isPrinting\"\r\n                        />\r\n                    }\r\n                }\r\n            </div>\r\n            <div class=\"col-md-8\">\r\n                <h5 jhiTranslate=\"artemisApp.exam.examSummary.problemStatement\"></h5>\r\n                @if (exercise.problemStatement) {\r\n                    <jhi-programming-exercise-instructions [exercise]=\"exercise\" [participation]=\"participation\" [personalParticipation]=\"!instructorView\" />\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    @if ((exercise.assessmentType === AssessmentType.SEMI_AUTOMATIC || exercise.allowComplaintsForAutomaticAssessments) && submission && isAfterStudentReviewStart) {\r\n        <jhi-complaint-student-view\r\n            class=\"mb-2 mt-2 ms-3\"\r\n            [exercise]=\"exercise\"\r\n            [participation]=\"participation\"\r\n            [result]=\"participation.results?.[0] ?? submission?.results?.[0]\"\r\n            [exam]=\"exam\"\r\n            [testRun]=\"isTestRun!\"\r\n        />\r\n    }\r\n</ng-container>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { StudentExam } from 'app/entities/student-exam.model';\r\nimport { Exercise, ExerciseType, IncludedInOverallScore, getIcon } from 'app/entities/exercise.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { ArtemisServerDateService } from 'app/shared/server-date.service';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { ThemeService } from 'app/core/theme/theme.service';\r\nimport { ExerciseResult, StudentExamWithGradeDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\r\nimport { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\r\nimport { PlagiarismCasesService } from 'app/course/plagiarism-cases/shared/plagiarism-cases.service';\r\nimport { PlagiarismCaseInfo } from 'app/exercises/shared/plagiarism/types/PlagiarismCaseInfo';\r\nimport { PlagiarismVerdict } from 'app/exercises/shared/plagiarism/types/PlagiarismVerdict';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { roundScorePercentSpecifiedByCourseSettings } from 'app/shared/util/utils';\r\nimport { getLatestResultOfStudentParticipation } from 'app/exercises/shared/participation/participation.utils';\r\nimport { evaluateTemplateStatus, getResultIconClass, getTextColorClass } from 'app/exercises/shared/result/result.utils';\r\nimport { Submission } from 'app/entities/submission.model';\r\nimport { Participation } from 'app/entities/participation/participation.model';\r\nimport { faArrowUp, faEye, faEyeSlash, faFolderOpen, faInfoCircle, faPrint } from '@fortawesome/free-solid-svg-icons';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { captureException } from '@sentry/angular';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { isExamResultPublished } from 'app/exam/participate/exam.utils';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ExamGeneralInformationComponent } from '../general-information/exam-general-information.component';\r\nimport { ExamResultOverviewComponent } from './result-overview/exam-result-overview.component';\r\nimport { CollapsibleCardComponent } from './collapsible-card.component';\r\nimport { ExamResultSummaryExerciseCardHeaderComponent } from './exercises/header/exam-result-summary-exercise-card-header.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { ProgrammingExerciseExampleSolutionRepoDownloadComponent } from 'app/exercises/programming/shared/actions/programming-exercise-example-solution-repo-download.component';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExampleSolutionComponent } from 'app/exercises/shared/example-solution/example-solution.component';\r\nimport { TextExamSummaryComponent } from './exercises/text-exam-summary/text-exam-summary.component';\r\nimport { ModelingExamSummaryComponent } from './exercises/modeling-exam-summary/modeling-exam-summary.component';\r\nimport { QuizExamSummaryComponent } from './exercises/quiz-exam-summary/quiz-exam-summary.component';\r\nimport { FileUploadExamSummaryComponent } from './exercises/file-upload-exam-summary/file-upload-exam-summary.component';\r\nimport { ComplaintsStudentViewComponent } from 'app/complaints/complaints-for-students/complaints-student-view.component';\r\nimport { ProgrammingExamSummaryComponent } from './exercises/programming-exam-summary/programming-exam-summary.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\nexport type ResultSummaryExerciseInfo = {\r\n    icon: IconProp;\r\n    isCollapsed: boolean;\r\n    achievedPoints?: number;\r\n    achievedPercentage?: number;\r\n    colorClass?: string;\r\n    resultIconClass?: IconProp;\r\n\r\n    submission?: Submission;\r\n    participation?: Participation;\r\n    displayExampleSolution: boolean;\r\n    releaseTestsWithExampleSolution: boolean;\r\n};\r\n\r\ntype StateBeforeResetting = {\r\n    exerciseInfos: Record<number, ResultSummaryExerciseInfo>;\r\n    isGradingKeyCollapsed: boolean;\r\n    isBonusGradingKeyCollapsed: boolean;\r\n};\r\n\r\n@Component({\r\n    selector: 'jhi-exam-participation-summary',\r\n    templateUrl: './exam-result-summary.component.html',\r\n    styleUrls: ['../../../course/manage/course-exercise-card.component.scss', '../../../exercises/quiz/shared/quiz.scss', 'exam-result-summary.component.scss'],\r\n    imports: [\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        ExamGeneralInformationComponent,\r\n        ExamResultOverviewComponent,\r\n        CollapsibleCardComponent,\r\n        ExamResultSummaryExerciseCardHeaderComponent,\r\n        NgClass,\r\n        RouterLink,\r\n        ProgrammingExerciseExampleSolutionRepoDownloadComponent,\r\n        NgbTooltip,\r\n        ExampleSolutionComponent,\r\n        TextExamSummaryComponent,\r\n        ModelingExamSummaryComponent,\r\n        QuizExamSummaryComponent,\r\n        FileUploadExamSummaryComponent,\r\n        ComplaintsStudentViewComponent,\r\n        ProgrammingExamSummaryComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ExamResultSummaryComponent implements OnInit {\r\n    private route = inject(ActivatedRoute);\r\n    private serverDateService = inject(ArtemisServerDateService);\r\n    private themeService = inject(ThemeService);\r\n    private examParticipationService = inject(ExamParticipationService);\r\n    private plagiarismCasesService = inject(PlagiarismCasesService);\r\n    private alertService = inject(AlertService);\r\n\r\n    // make constants available to html for comparison\r\n    readonly TEXT = ExerciseType.TEXT;\r\n    readonly QUIZ = ExerciseType.QUIZ;\r\n    readonly MODELING = ExerciseType.MODELING;\r\n    readonly PROGRAMMING = ExerciseType.PROGRAMMING;\r\n    readonly FILE_UPLOAD = ExerciseType.FILE_UPLOAD;\r\n    readonly AssessmentType = AssessmentType;\r\n    readonly IncludedInOverallScore = IncludedInOverallScore;\r\n    readonly PlagiarismVerdict = PlagiarismVerdict;\r\n\r\n    faFolderOpen = faFolderOpen;\r\n    faInfoCircle = faInfoCircle;\r\n    faPrint = faPrint;\r\n    faEye = faEye;\r\n    faEyeSlash = faEyeSlash;\r\n    faArrowUp = faArrowUp;\r\n\r\n    /**\r\n     * Current student's exam.\r\n     */\r\n    private _studentExam: StudentExam;\r\n\r\n    plagiarismCaseInfos: { [exerciseId: number]: PlagiarismCaseInfo } = {};\r\n    exampleSolutionPublished = false;\r\n\r\n    get studentExam(): StudentExam {\r\n        return this._studentExam;\r\n    }\r\n\r\n    @Input()\r\n    set studentExam(studentExam: StudentExam) {\r\n        this._studentExam = studentExam;\r\n        if (this.studentExamGradeInfoDTO) {\r\n            this.studentExamGradeInfoDTO.studentExam = studentExam;\r\n        }\r\n        this.tryLoadPlagiarismCaseInfosForStudent();\r\n    }\r\n\r\n    /**\r\n     * Grade info for current student's exam.\r\n     */\r\n    studentExamGradeInfoDTO: StudentExamWithGradeDTO;\r\n\r\n    isGradingKeyCollapsed = true;\r\n    isBonusGradingKeyCollapsed = true;\r\n\r\n    @Input()\r\n    instructorView = false;\r\n\r\n    courseId: number;\r\n\r\n    isTestRun = false;\r\n    isTestExam = false;\r\n\r\n    testRunConduction = false;\r\n    testExamConduction = false;\r\n\r\n    examWithOnlyIdAndStudentReviewPeriod: Exam;\r\n\r\n    isBeforeStudentReviewEnd = false;\r\n    /**\r\n     * Used to decide whether to instantiate the ComplaintInteractionComponent. We always instantiate the component if\r\n     * the review dates are set and the review start date has passed.\r\n     */\r\n    isAfterStudentReviewStart = false;\r\n\r\n    exerciseInfos: Record<number, ResultSummaryExerciseInfo>;\r\n\r\n    /**\r\n     * Passed to components with overlapping elements to ensure that the overlapping\r\n     * elements are displayed in a different order for printing.\r\n     */\r\n    isPrinting = false;\r\n\r\n    /**\r\n     * Passed to components where the problem statement might be expanded or collapsed to ensure that\r\n     * the problem statement is expanded while printing\r\n     */\r\n    expandProblemStatement = false;\r\n\r\n    /**\r\n     * Initialise the courseId from the current url\r\n     */\r\n    ngOnInit(): void {\r\n        // flags required to display test runs correctly\r\n        this.isTestRun = this.route.snapshot.url[1]?.toString() === 'test-runs';\r\n        this.isTestExam = this.studentExam.exam!.testExam!;\r\n        this.testRunConduction = this.isTestRun && this.route.snapshot.url[3]?.toString() === 'conduction';\r\n        this.testExamConduction = this.isTestExam && !this.studentExam.submitted;\r\n        this.courseId = Number(this.route.snapshot?.paramMap?.get('courseId') || this.route.parent?.parent?.snapshot.paramMap.get('courseId'));\r\n        if (!this.studentExam?.id) {\r\n            throw new Error('studentExam.id should be present to fetch grade info');\r\n        }\r\n        if (!this.studentExam?.exam?.id) {\r\n            throw new Error('studentExam.exam.id should be present to fetch grade info');\r\n        }\r\n        if (!this.studentExam?.user?.id) {\r\n            throw new Error('studentExam.user.id should be present to fetch grade info');\r\n        }\r\n\r\n        if (isExamResultPublished(this.isTestRun, this.studentExam.exam, this.serverDateService)) {\r\n            this.examParticipationService\r\n                .loadStudentExamGradeInfoForSummary(this.courseId, this.studentExam.exam.id, this.studentExam.id, this.studentExam.user.id)\r\n                .subscribe((studentExamWithGrade: StudentExamWithGradeDTO) => {\r\n                    studentExamWithGrade.studentExam = this.studentExam;\r\n                    this.studentExamGradeInfoDTO = studentExamWithGrade;\r\n                    this.exerciseInfos = this.getExerciseInfos(studentExamWithGrade);\r\n                });\r\n        }\r\n\r\n        this.exampleSolutionPublished = !!this.studentExam.exam?.exampleSolutionPublicationDate && dayjs().isAfter(this.studentExam.exam.exampleSolutionPublicationDate);\r\n\r\n        this.exerciseInfos = this.getExerciseInfos();\r\n\r\n        this.setExamWithOnlyIdAndStudentReviewPeriod();\r\n\r\n        this.isBeforeStudentReviewEnd = this.getIsBeforeStudentReviewEnd();\r\n        this.isAfterStudentReviewStart = this.getIsAfterStudentReviewStart();\r\n    }\r\n\r\n    get resultsArePublished(): boolean | any {\r\n        if (this.isTestRun || this.isTestExam) {\r\n            return true;\r\n        }\r\n\r\n        if (this.testRunConduction || this.testExamConduction) {\r\n            return false;\r\n        }\r\n\r\n        if (this.studentExam?.exam?.publishResultsDate) {\r\n            return dayjs(this.studentExam.exam.publishResultsDate).isBefore(dayjs());\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private tryLoadPlagiarismCaseInfosForStudent() {\r\n        // If the exam has not yet ended, or we're only a few minutes after the end, we can assume that there are no plagiarism cases yet.\r\n        // We should avoid trying to load them to reduce server load.\r\n        if (this.studentExam?.exam?.endDate) {\r\n            const endDateWithTimeExtension = dayjs(this.studentExam.exam.endDate).add(2, 'hours');\r\n            if (dayjs().isBefore(endDateWithTimeExtension)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const exerciseIds = this.studentExam?.exercises?.map((exercise) => exercise.id!);\r\n        if (exerciseIds?.length && this.courseId) {\r\n            this.plagiarismCasesService.getPlagiarismCaseInfosForStudent(this.courseId, exerciseIds).subscribe((res) => {\r\n                this.plagiarismCaseInfos = res.body ?? {};\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * called for exportPDF Button\r\n     */\r\n    async printPDF() {\r\n        const stateBeforeResetting = this.expandExercisesAndGradingKeysBeforePrinting();\r\n\r\n        this.isPrinting = true;\r\n        this.expandProblemStatement = true;\r\n\r\n        await this.themeService.print();\r\n\r\n        this.isPrinting = false;\r\n        this.expandProblemStatement = false;\r\n\r\n        this.resetExpandingExercisesAndGradingKeys(stateBeforeResetting);\r\n    }\r\n\r\n    scrollToOverviewOrTop() {\r\n        const searchedId = 'exam-summary-result-overview';\r\n        // go to result overview if it exists, otherwise go to top\r\n        const targetElement = document.getElementById(searchedId) || document.getElementById('exam-results-title');\r\n\r\n        if (targetElement) {\r\n            targetElement.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'start',\r\n                inline: 'nearest',\r\n            });\r\n        }\r\n    }\r\n\r\n    private expandExercisesAndGradingKeysBeforePrinting() {\r\n        const stateBeforeResetting = {\r\n            exerciseInfos: cloneDeep(this.exerciseInfos),\r\n            isGradingKeyCollapsed: cloneDeep(this.isGradingKeyCollapsed),\r\n            isBonusGradingKeyCollapsed: cloneDeep(this.isBonusGradingKeyCollapsed),\r\n        };\r\n\r\n        this.expandExercises();\r\n\r\n        this.isGradingKeyCollapsed = false;\r\n        this.isBonusGradingKeyCollapsed = false;\r\n\r\n        return stateBeforeResetting;\r\n    }\r\n\r\n    private resetExpandingExercisesAndGradingKeys(stateBeforeResetting: StateBeforeResetting) {\r\n        this.exerciseInfos = stateBeforeResetting.exerciseInfos;\r\n        this.isGradingKeyCollapsed = stateBeforeResetting.isGradingKeyCollapsed;\r\n        this.isBonusGradingKeyCollapsed = stateBeforeResetting.isBonusGradingKeyCollapsed;\r\n    }\r\n\r\n    private expandExercises() {\r\n        Object.entries(this.exerciseInfos).forEach((exerciseInfo: [string, ResultSummaryExerciseInfo]) => {\r\n            exerciseInfo[1].isCollapsed = false;\r\n        });\r\n    }\r\n\r\n    public generateLink(exercise: Exercise) {\r\n        if (exercise?.studentParticipations?.length) {\r\n            return ['/courses', this.courseId, `${exercise.type}-exercises`, exercise.id, 'participate', exercise.studentParticipations[0].id];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * @param exercise\r\n     * returns the students' submission for the exercise, undefined if no participation could be found\r\n     */\r\n    getSubmissionForExercise(exercise: Exercise) {\r\n        return exercise?.studentParticipations?.[0]?.submissions?.[0];\r\n    }\r\n\r\n    /**\r\n     * @param exercise\r\n     * returns the students' submission for the exercise, undefined if no participation could be found\r\n     */\r\n    getParticipationForExercise(exercise: Exercise) {\r\n        return exercise.studentParticipations?.[0] || undefined;\r\n    }\r\n\r\n    /**\r\n     * We only need to pass these values to the ComplaintInteractionComponent\r\n     */\r\n    setExamWithOnlyIdAndStudentReviewPeriod() {\r\n        const exam = new Exam();\r\n        exam.id = this.studentExam?.exam?.id;\r\n        exam.examStudentReviewStart = this.studentExam?.exam?.examStudentReviewStart;\r\n        exam.examStudentReviewEnd = this.studentExam?.exam?.examStudentReviewEnd;\r\n        exam.course = this.studentExam?.exam?.course;\r\n        this.examWithOnlyIdAndStudentReviewPeriod = exam;\r\n    }\r\n\r\n    private getIsAfterStudentReviewStart() {\r\n        if (this.isTestRun || this.isTestExam) {\r\n            return true;\r\n        }\r\n        if (this.studentExam?.exam?.examStudentReviewStart && this.studentExam.exam.examStudentReviewEnd) {\r\n            return this.serverDateService.now().isAfter(this.studentExam.exam.examStudentReviewStart);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getIsBeforeStudentReviewEnd() {\r\n        if (this.isTestRun || this.isTestExam) {\r\n            return true;\r\n        }\r\n        if (this.studentExam?.exam?.examStudentReviewStart && this.studentExam.exam.examStudentReviewEnd) {\r\n            return this.serverDateService.now().isBefore(this.studentExam.exam.examStudentReviewEnd);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getExerciseInfos(studentExamWithGrade?: StudentExamWithGradeDTO): Record<number, ResultSummaryExerciseInfo> {\r\n        const exerciseInfos: Record<number, ResultSummaryExerciseInfo> = {};\r\n        for (const exercise of this.studentExam?.exercises ?? []) {\r\n            if (exercise.id === undefined) {\r\n                this.alertService.error('artemisApp.exam.error.cannotDisplayExerciseDetails', { exerciseGroupTitle: exercise.exerciseGroup?.title });\r\n                const errorMessage = 'Cannot getExerciseInfos as exerciseId is undefined';\r\n                captureException(new Error(errorMessage), {\r\n                    extra: {\r\n                        exercise,\r\n                    },\r\n                });\r\n                continue;\r\n            }\r\n\r\n            const { textColorClass, resultIconClass } = this.getTextColorAndIconClassByExercise(exercise);\r\n\r\n            exerciseInfos[exercise.id] = {\r\n                icon: getIcon(exercise.type),\r\n                isCollapsed: false,\r\n                achievedPoints: this.getPointsByExerciseIdFromExam(exercise.id, studentExamWithGrade),\r\n                achievedPercentage: this.getAchievedPercentageByExerciseId(exercise.id, studentExamWithGrade),\r\n                colorClass: textColorClass,\r\n                resultIconClass: resultIconClass,\r\n\r\n                submission: this.getSubmissionForExercise(exercise),\r\n                participation: this.getParticipationForExercise(exercise),\r\n                displayExampleSolution: false,\r\n                releaseTestsWithExampleSolution: exercise.type === ExerciseType.PROGRAMMING && !!(exercise as ProgrammingExercise).releaseTestsWithExampleSolution,\r\n            };\r\n        }\r\n        return exerciseInfos;\r\n    }\r\n\r\n    private getPointsByExerciseIdFromExam(exerciseId: number, studentExamWithGrade?: StudentExamWithGradeDTO): number | undefined {\r\n        if (!studentExamWithGrade) {\r\n            return undefined;\r\n        }\r\n\r\n        for (const achievedPointsPerExerciseKey in this.studentExamGradeInfoDTO?.achievedPointsPerExercise) {\r\n            if (Number(achievedPointsPerExerciseKey) === exerciseId) {\r\n                return this.studentExamGradeInfoDTO.achievedPointsPerExercise[achievedPointsPerExerciseKey];\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getExerciseResultByExerciseId(exerciseId?: number): ExerciseResult | undefined {\r\n        if (exerciseId === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const exerciseGroupResultMapping = this.studentExamGradeInfoDTO?.studentResult?.exerciseGroupIdToExerciseResult;\r\n        let exerciseResult = undefined;\r\n\r\n        for (const key in exerciseGroupResultMapping) {\r\n            if (key in exerciseGroupResultMapping && exerciseGroupResultMapping[key].exerciseId === exerciseId) {\r\n                exerciseResult = exerciseGroupResultMapping[key];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return exerciseResult;\r\n    }\r\n\r\n    toggleShowSampleSolution(exerciseId?: number) {\r\n        if (exerciseId === undefined) {\r\n            this.alertService.error('artemisApp.exam.error.cannotShowExampleSolution');\r\n            const errorMessage = 'Cannot show sample solution because exercise id is undefined';\r\n            captureException(new Error(errorMessage), {\r\n                extra: {\r\n                    exerciseId,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this.exerciseInfos[exerciseId].displayExampleSolution = !this.exerciseInfos[exerciseId].displayExampleSolution;\r\n    }\r\n\r\n    private calculateAchievedPercentageFromScoreAndMaxPoints(achievedPoints?: number, maxScore?: number, course?: Course) {\r\n        const canCalculatePercentage = maxScore !== undefined && achievedPoints !== undefined;\r\n        if (canCalculatePercentage) {\r\n            return roundScorePercentSpecifiedByCourseSettings(achievedPoints! / maxScore, course);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getAchievedPercentageFromResult(result: ExerciseResult, course?: Course) {\r\n        if (result.achievedScore !== undefined) {\r\n            return roundScorePercentSpecifiedByCourseSettings(result.achievedScore / 100, course);\r\n        }\r\n\r\n        return this.calculateAchievedPercentageFromScoreAndMaxPoints(result.achievedPoints, result.maxScore, course);\r\n    }\r\n\r\n    /**\r\n     * This should only be needed when unsubmitted exercises are viewed, otherwise the results should be set\r\n     */\r\n    private getAchievedPercentageFromExamResults(exerciseId?: number, studentExamWithGrade?: StudentExamWithGradeDTO | undefined, course?: Course) {\r\n        if (exerciseId === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const maxPoints = studentExamWithGrade?.studentExam?.exercises?.find((exercise) => exercise.id === exerciseId)?.maxPoints;\r\n        const achievedPoints = this.getPointsByExerciseIdFromExam(exerciseId, studentExamWithGrade);\r\n\r\n        return this.calculateAchievedPercentageFromScoreAndMaxPoints(achievedPoints, maxPoints, course);\r\n    }\r\n\r\n    getAchievedPercentageByExerciseId(exerciseId?: number, studentExamWithGrade?: StudentExamWithGradeDTO | undefined): number | undefined {\r\n        const result = this.getExerciseResultByExerciseId(exerciseId);\r\n        const course = this.studentExamGradeInfoDTO?.studentExam?.exam?.course;\r\n\r\n        if (result === undefined) {\r\n            return this.getAchievedPercentageFromExamResults(exerciseId, studentExamWithGrade, course);\r\n        }\r\n\r\n        return this.getAchievedPercentageFromResult(result, course);\r\n    }\r\n\r\n    getTextColorAndIconClassByExercise(exercise: Exercise) {\r\n        const participation = exercise.studentParticipations![0];\r\n        const showUngradedResults = false;\r\n        const result = getLatestResultOfStudentParticipation(participation, showUngradedResults);\r\n\r\n        const isBuilding = false;\r\n        const templateStatus = evaluateTemplateStatus(exercise, participation, result, isBuilding);\r\n\r\n        return {\r\n            textColorClass: getTextColorClass(result, templateStatus),\r\n            resultIconClass: getResultIconClass(result, templateStatus),\r\n        };\r\n    }\r\n\r\n    toggleCollapseExercise(exerciseInfo: ResultSummaryExerciseInfo) {\r\n        return () => (exerciseInfo!.isCollapsed = !exerciseInfo!.isCollapsed);\r\n    }\r\n\r\n    protected readonly getIcon = getIcon;\r\n}\r\n", "<div id=\"exam-results-title\">\r\n    <h2>\r\n        <ng-container>\r\n            {{ 'artemisApp.exam.examSummary.examResults' | artemisTranslate }}\r\n        </ng-container>\r\n        <button id=\"exportToPDFButton\" class=\"btn btn-primary float-end\" (click)=\"printPDF()\">\r\n            <fa-icon [icon]=\"faPrint\" />\r\n            <span jhiTranslate=\"artemisApp.exam.examSummary.exportPDF\"></span>\r\n        </button>\r\n    </h2>\r\n</div>\r\n@if (studentExam && !studentExam.submitted) {\r\n    <div class=\"alert alert-danger text-center\">\r\n        <strong jhiTranslate=\"artemisApp.exam.examSummary.youAreViewingAnUnsubmittedExam\"></strong>\r\n    </div>\r\n}\r\n@if (studentExam?.exam) {\r\n    <div>\r\n        <jhi-exam-general-information\r\n            [exam]=\"studentExam.exam!\"\r\n            [studentExam]=\"studentExam\"\r\n            [reviewIsOpen]=\"(studentExam?.exam || false) && isBeforeStudentReviewEnd && isAfterStudentReviewStart && !isTestRun\"\r\n        />\r\n    </div>\r\n}\r\n@if (studentExam && studentExam.exercises && studentExam.exam?.course && studentExamGradeInfoDTO) {\r\n    <div class=\"mb-4\" id=\"exam-summary-result-overview\">\r\n        <jhi-exam-result-overview\r\n            [studentExamWithGrade]=\"studentExamGradeInfoDTO!\"\r\n            [isGradingKeyCollapsed]=\"isGradingKeyCollapsed\"\r\n            [isBonusGradingKeyCollapsed]=\"isBonusGradingKeyCollapsed\"\r\n            [exerciseInfos]=\"exerciseInfos\"\r\n            [isTestRun]=\"isTestRun\"\r\n        />\r\n    </div>\r\n}\r\n@if (!resultsArePublished) {\r\n    <div class=\"mb-0\">\r\n        <fa-icon [icon]=\"faInfoCircle\" class=\"info-icon\" />\r\n        {{ 'artemisApp.exam.resultInformation' | artemisTranslate }}\r\n    </div>\r\n}\r\n<h3 jhiTranslate=\"artemisApp.exam.exercises\"></h3>\r\n@for (exercise of studentExam?.exercises; track exercise; let i = $index) {\r\n    <div [id]=\"'exercise-' + exercise.id\">\r\n        <jhi-collapsible-card [isCardContentCollapsed]=\"exerciseInfos[exercise.id!].isCollapsed\" [toggleCollapse]=\"toggleCollapseExercise(exerciseInfos[exercise.id!])\">\r\n            <div class=\"header\">\r\n                <jhi-result-summary-exercise-card-header [index]=\"i\" [exercise]=\"exercise\" [exerciseInfo]=\"exerciseInfos[exercise.id!]\" [resultsPublished]=\"resultsArePublished\" />\r\n            </div>\r\n            <div class=\"collapsible-content\">\r\n                <div class=\"clearfix\">\r\n                    <span class=\"exercise-buttons\">\r\n                        @if (plagiarismCaseInfos[exercise.id!]) {\r\n                            <a\r\n                                class=\"btn ms-2 float-end\"\r\n                                [ngClass]=\"plagiarismCaseInfos[exercise.id!]!.verdict === PlagiarismVerdict.NO_PLAGIARISM ? 'btn-info' : 'btn-danger'\"\r\n                                [routerLink]=\"['/courses', courseId, 'plagiarism-cases', plagiarismCaseInfos[exercise.id!]!.id]\"\r\n                            >\r\n                                <span\r\n                                    [jhiTranslate]=\"\r\n                                        'artemisApp.plagiarism.plagiarismCases.' +\r\n                                        (plagiarismCaseInfos[exercise.id!]!.verdict === PlagiarismVerdict.NO_PLAGIARISM ? 'resolvedPlagiarismCase' : 'plagiarismCase')\r\n                                    \"\r\n                                >\r\n                                    Plagiarism Case\r\n                                </span>\r\n                            </a>\r\n                        }\r\n                        @if (exampleSolutionPublished) {\r\n                            @if (exerciseInfos[exercise.id!].displayExampleSolution) {\r\n                                <span class=\"alert alert-info p-1\" jhiTranslate=\"artemisApp.exam.examSummary.youAreViewingTheExampleSolution\"></span>\r\n                            }\r\n                            @if (exercise.type !== QUIZ && exercise.type !== PROGRAMMING) {\r\n                                <button\r\n                                    [id]=\"'show-sample-solution-button-' + exercise.id\"\r\n                                    class=\"btn float-end\"\r\n                                    [class]=\"exerciseInfos[exercise.id!].displayExampleSolution ? 'btn-primary' : 'btn-outline-primary'\"\r\n                                    (click)=\"toggleShowSampleSolution(exercise.id)\"\r\n                                >\r\n                                    <fa-icon [icon]=\"!exerciseInfos[exercise.id!].displayExampleSolution ? faEye : faEyeSlash\" class=\"info-icon\" />\r\n                                    @if (!exerciseInfos[exercise.id!].displayExampleSolution) {\r\n                                        <span>&nbsp;{{ 'artemisApp.exam.examSummary.showExampleSolution' | artemisTranslate }}&nbsp;</span>\r\n                                    } @else {\r\n                                        {{ 'artemisApp.exam.examSummary.hideExampleSolution' | artemisTranslate }}\r\n                                    }\r\n                                </button>\r\n                            }\r\n                            @if (exercise.type === PROGRAMMING) {\r\n                                <jhi-programming-exercise-example-solution-repo-download\r\n                                    class=\"ms-2 float-end\"\r\n                                    [exerciseId]=\"exercise.id!\"\r\n                                    [title]=\"'artemisApp.programmingExercise.export.downloadExampleSolution'\"\r\n                                    [displayedOnExamSummary]=\"true\"\r\n                                />\r\n                                @if (exerciseInfos[exercise.id!].releaseTestsWithExampleSolution) {\r\n                                    <jhi-programming-exercise-example-solution-repo-download\r\n                                        class=\"ms-2 float-end\"\r\n                                        [exerciseId]=\"exercise.id!\"\r\n                                        [includeTests]=\"true\"\r\n                                        [title]=\"'artemisApp.programmingExercise.export.downloadTestsWithExampleSolution'\"\r\n                                        [displayedOnExamSummary]=\"true\"\r\n                                        ngbTooltip=\"{{ 'artemisApp.programmingExercise.studentDownloadTestsTooltip' | artemisTranslate }}\"\r\n                                    />\r\n                                }\r\n                            }\r\n                        }\r\n                    </span>\r\n                </div>\r\n                @if (exercise.type !== PROGRAMMING) {\r\n                    <ng-container class=\"pt-2\">\r\n                        @if (exerciseInfos[exercise.id!].displayExampleSolution) {\r\n                            <div>\r\n                                @if (exercise.id !== undefined) {\r\n                                    <jhi-example-solution [exerciseId]=\"exercise.id\" [displayHeader]=\"false\" />\r\n                                }\r\n                            </div>\r\n                        } @else {\r\n                            @if (exerciseInfos[exercise.id!]?.participation) {\r\n                                @if (!exerciseInfos[exercise.id!]?.submission?.submitted) {\r\n                                    <div class=\"mb-3\" jhiTranslate=\"artemisApp.exam.examSummary.noSubmissionFound\"></div>\r\n                                }\r\n                                @switch (exercise.type) {\r\n                                    @case (TEXT) {\r\n                                        <jhi-text-exam-summary\r\n                                            [exercise]=\"exercise\"\r\n                                            [submission]=\"exerciseInfos[exercise.id!]!.submission!\"\r\n                                            [expandProblemStatement]=\"expandProblemStatement\"\r\n                                            [isAfterResultsArePublished]=\"resultsArePublished\"\r\n                                        />\r\n                                    }\r\n                                    @case (MODELING) {\r\n                                        <jhi-modeling-exam-summary\r\n                                            [exercise]=\"exercise\"\r\n                                            [submission]=\"exerciseInfos[exercise.id!]!.submission!\"\r\n                                            [isPrinting]=\"isPrinting\"\r\n                                            [expandProblemStatement]=\"expandProblemStatement\"\r\n                                            [isAfterResultsArePublished]=\"resultsArePublished\"\r\n                                        />\r\n                                    }\r\n                                    @case (QUIZ) {\r\n                                        <jhi-quiz-exam-summary\r\n                                            [quizParticipation]=\"exercise\"\r\n                                            [exam]=\"studentExam.exam!\"\r\n                                            [submission]=\"exerciseInfos[exercise.id!]!.submission!\"\r\n                                            [resultsPublished]=\"resultsArePublished\"\r\n                                        />\r\n                                    }\r\n                                    @case (FILE_UPLOAD) {\r\n                                        <jhi-file-upload-exam-summary\r\n                                            [submission]=\"exerciseInfos[exercise.id!]!.submission!\"\r\n                                            [exercise]=\"exercise\"\r\n                                            [expandProblemStatement]=\"expandProblemStatement\"\r\n                                            [isAfterResultsArePublished]=\"resultsArePublished\"\r\n                                        />\r\n                                    }\r\n                                }\r\n                                @if (\r\n                                    exerciseInfos[exercise.id!]?.submission &&\r\n                                    exercise.type !== QUIZ &&\r\n                                    isAfterStudentReviewStart &&\r\n                                    exerciseInfos[exercise.id!]?.submission?.submitted\r\n                                ) {\r\n                                    <jhi-complaint-student-view\r\n                                        class=\"mb-2 mt-2 ms-3\"\r\n                                        [exercise]=\"exercise\"\r\n                                        [participation]=\"exerciseInfos[exercise.id!]!.participation!\"\r\n                                        [result]=\"exerciseInfos[exercise.id!]!.participation!.results?.[0]\"\r\n                                        [exam]=\"examWithOnlyIdAndStudentReviewPeriod\"\r\n                                        [testRun]=\"isTestRun\"\r\n                                    />\r\n                                }\r\n                            }\r\n                        }\r\n                        <!-- Show submission of student - if no submission found -> display that student did not participate -->\r\n                    </ng-container>\r\n                }\r\n                @if (exercise.type === PROGRAMMING) {\r\n                    <!--  relax condition for programming exercises for the case that we get a submissions from websockets, but last changes in exam were not submitted -->\r\n                    @if (!exerciseInfos[exercise.id!]?.submission) {\r\n                        <div class=\"mb-3\" jhiTranslate=\"artemisApp.exam.examSummary.noSubmissionFound\"></div>\r\n                    }\r\n                    @if (exerciseInfos[exercise.id!]?.participation) {\r\n                        <jhi-programming-exam-summary\r\n                            [exercise]=\"exercise\"\r\n                            [participation]=\"exerciseInfos[exercise.id!]!.participation!\"\r\n                            [submission]=\"exerciseInfos[exercise.id!]!.submission!\"\r\n                            [isTestRun]=\"isTestRun\"\r\n                            [exam]=\"examWithOnlyIdAndStudentReviewPeriod\"\r\n                            [isAfterStudentReviewStart]=\"isAfterStudentReviewStart\"\r\n                            [resultsPublished]=\"resultsArePublished\"\r\n                            [isPrinting]=\"isPrinting\"\r\n                            [isAfterResultsArePublished]=\"resultsArePublished\"\r\n                            [instructorView]=\"instructorView\"\r\n                        />\r\n                    }\r\n                }\r\n            </div>\r\n        </jhi-collapsible-card>\r\n    </div>\r\n}\r\n<button class=\"btn btn-light mx-auto d-block\" (click)=\"scrollToOverviewOrTop()\" id=\"back-to-overview-button\">\r\n    <fa-icon [icon]=\"faArrowUp\" />\r\n    <span>&nbsp; {{ 'artemisApp.exam.examSummary.backToOverview' | artemisTranslate }}&nbsp; </span>\r\n</button>\r\n"],
  "mappings": "skFCEQA,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,KAAA,CAAA,EACJD,EAAA,EAAA;KAAA,0BAKgBA,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAuEG,EAAA,EAC3EH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACJD,EAAA,GAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,SALYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,6CAAA,EAAA,GAAA,6BAORN,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAkEG,EAAA,EACtEH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAAuBG,EAAA,EAC/BH,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,kBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,wCAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAC,KAAAC,YAAA,6BAIRV,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAkDG,EAAA,EACtDH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAAqBG,EAAA,EAC7BH,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,kBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,wBAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAC,KAAAE,UAAA,6BAIRX,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAA8DG,EAAA,EAClEH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAAmBG,EAAA,EAC3BH,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,kBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,oCAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAC,KAAAG,QAAA,6BAIRZ,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,KAAA,CAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAA+DG,EAAA,EACnEH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAAgBG,EAAA,EACxBH,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,kBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,qCAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAC,KAAAI,KAAA,6BAKJb,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAgDG,EAAA,EACpDH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,CAAA,iFAEJG,EAAA,EACJH,EAAA,GAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBANYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,sBAAA,EAAA,GAAA,EAEAF,EAAA,CAAA,EAAAU,GAAA;kCAAAC,EAAA,EAAA,EAAAP,EAAAC,KAAAO,UAAA,WAAA,EAAA,IAAAD,EAAA,GAAA,GAAAP,EAAAC,KAAAO,UAAA,MAAA,EAAA,aAAAD,EAAA,GAAA,GAAAP,EAAAS,YAAA,WAAA,EAAA;kCAAAF,EAAA,GAAA,GAAAP,EAAAS,YAAA,MAAA,EAAA;6BAAA,6BAKRjB,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,KAAA,CAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAgDG,EAAA,EACpDH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,qBAA+CG,EAAA,EACvDH,EAAA,GAAA;yBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;yBAAA,EAAAE,EAAA,GAAA,KAAA,CAAA,EACIF,EAAA,GAAA;6BAAA,EAAAE,EAAA,GAAA,IAAA,EAAIF,EAAA,EAAA,2BAAuDG,EAAA,EAC3DH,EAAA,GAAA;6BAAA,EAAAE,EAAA,GAAA,IAAA,EAAIF,EAAA,EAAA,0CAAoFG,EAAA,EAC5FH,EAAA,GAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBAPYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,sBAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAQ,EAAA,EAAA,EAAAP,EAAAC,KAAAO,UAAA,WAAA,CAAA,EAGAZ,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,GAAA,GAAA,6BAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAc,EAAA,GAAAH,EAAA,GAAA,GAAAP,EAAAC,KAAAO,UAAA,MAAA,EAAA,MAAAD,EAAA,GAAA,GAAAP,EAAAS,YAAA,MAAA,EAAA,EAAA,6BAIRjB,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAoDG,EAAA,EACxDH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAID,EAAA,EAAA,gCAAA,CAAA,EAA6DE,EAAA,EACrEH,EAAA,EAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,0BAAA,EAAA,GAAA,EAC+BF,EAAA,CAAA,EAAAe,EAAA,cAAAX,EAAAY,WAAA,6BArB3CpB,EAAA,EAAA;qBAAA,EAAAqB,EAAA,EAAAC,GAAA,GAAA,EAAA,EAA8B,EAAAC,GAAA,GAAA,EAAA,EAQrB,EAAAC,GAAA,GAAA,CAAA,kBARTpB,EAAA,EAAAqB,EAAAjB,EAAAkB,uBAAA,EAAA,CAAA,EAkBAtB,EAAA,CAAA,EAAAqB,EAAAjB,EAAAC,KAAAkB,UAAAnB,EAAAY,aAAA,MAAAZ,EAAAY,YAAAQ,aAAA,EAAA,EAAA,6BASI5B,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAkDG,EAAA,EACtDH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAAwBG,EAAA,EAChCH,EAAA,EAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,wBAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAC,KAAAoB,aAAA,6BAIR7B,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAqDG,EAAA,EACzDH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAAkCG,EAAA,EAC1CH,EAAA,EAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,2BAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAC,KAAAqB,uBAAA,6BATZ9B,EAAA,EAAA;qBAAA,EAAAqB,EAAA,EAAAU,GAAA,GAAA,CAAA,EAA0B,EAAAC,GAAA,GAAA,CAAA,kBAA1B5B,EAAA,EAAAqB,EAAAjB,EAAAC,KAAAoB,cAAA,EAAA,EAAA,EAMAzB,EAAA,EAAAqB,EAAAjB,EAAAC,KAAAqB,wBAAA,EAAA,EAAA,6BAYY9B,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,MAAA,EAAOF,EAAA,CAAA,qBAAgDG,EAAA,EAC3DH,EAAA,EAAA;6BAAA,mBADWI,EAAA,CAAA,EAAAC,EAAA,IAAAC,EAAA,EAAA,EAAAE,EAAAC,KAAAwB,sBAAA,EAAA,GAAA,0BAGPjC,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,MAAA,EAAMF,EAAA,EAAA,WAAA,EAAaG,EAAA,EACvBH,EAAA,EAAA;6BAAA,6BAEIA,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,MAAA,EAAMF,EAAA,CAAA,qBAA6CG,EAAA,EACvDH,EAAA,EAAA;6BAAA,mBADUI,EAAA,CAAA,EAAAG,EAAAD,EAAA,EAAA,EAAAE,EAAAC,KAAAyB,oBAAA,CAAA,0BAGNlC,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;6BAAA,6BAdRA,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAA2EG,EAAA,EAC/EH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,KAAA,CAAA,EACIF,EAAA,EAAA;6BAAA,EAAAqB,EAAA,EAAAc,GAAA,EAAA,CAAA,EAAmC,GAAAC,GAAA,EAAA,CAAA,EAG6B,GAAAC,GAAA,EAAA,CAAA,EAG/B,GAAAC,GAAA,EAAA,CAAA,EAMrCnC,EAAA,EACJH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,kBAhBYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,2CAAA,EAAA,OAAA,EAEAF,EAAA,CAAA,EAAAqB,EAAAjB,EAAAC,KAAAwB,uBAAA,EAAA,EAAA,EAGA7B,EAAA,EAAAqB,EAAAjB,EAAAC,KAAAwB,wBAAAzB,EAAAC,KAAAyB,qBAAA,GAAA,EAAA,EAGA9B,EAAA,EAAAqB,EAAAjB,EAAAC,KAAAyB,qBAAA,GAAA,EAAA,EAGA9B,EAAA,EAAAqB,EAAAjB,EAAA+B,aAAA,GAAA,EAAA,6BAORvC,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAA2DG,EAAA,EAC/DH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,EAA6BG,EAAA,EACrCH,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,kBAHYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,iCAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAC,EAAAY,YAAAoB,KAAAC,IAAA,6BAUJzC,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAuDG,EAAA,EAC3DH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,oCAAoDG,EAAA,EACxDH,EAAA,GAAA;6BAAA,EAAAC,EAAA,GAAA,IAAA,EACJD,EAAA,GAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBAJYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,6BAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAD,EAAA,EAAA,EAAAE,EAAAC,KAAAmB,WAAA,CAAA,6BAKR5B,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAoFG,EAAA,EACxFH,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,6BAAA,CAAA,EACJD,EAAA,GAAA;6BAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBALYI,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,yDAAA,EAAA,IAAA,EAE4BF,EAAA,CAAA,EAAAe,EAAA,cAAAX,EAAAY,WAAA,6BAfxCpB,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,0BAAgDG,EAAA,EACpDH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,IAAA,EAAIF,EAAA,CAAA,qBAA6CG,EAAA,EACrDH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;qBAAA,EAAAqB,EAAA,GAAAqB,GAAA,GAAA,CAAA,EAAyB,GAAAC,GAAA,GAAA,CAAA,kBAHjBvC,EAAA,CAAA,EAAAC,EAAA,GAAAC,EAAA,EAAA,EAAA,sBAAA,EAAA,GAAA,EACAF,EAAA,CAAA,EAAAG,EAAAQ,EAAA,EAAA,EAAAP,EAAAoC,YAAA,WAAA,CAAA,EAERxC,EAAA,CAAA,EAAAqB,EAAAjB,EAAAC,MAAA,MAAAD,EAAAC,KAAAmB,YAAA,GAAA,EAAA,EAOAxB,EAAA,EAAAqB,EAAAjB,EAAAY,YAAAyB,WAAArC,EAAAY,YAAA0B,gBAAAtC,EAAAY,YAAA2B,YAAA,GAAA,EAAA,GDnGpB,IAAaC,IAA+B,IAAA,CAAtC,MAAOA,CAA+B,CAC/BvC,KACAW,YACAmB,aAAe,GAMfU,mBAAqB,GAE9BhC,YACAiC,kBACAC,sBACAzB,uBACA0B,WACAR,YAEAS,aAAW,CACP,KAAKpC,YAAcqC,GAAQ,KAAK7C,KAAM,KAAKW,WAAW,EACtD,KAAK8B,kBAAoBK,GAAgB,KAAK9C,IAAI,EAClD,KAAK0C,sBAAwBK,GAAyB,KAAK/C,KAAM,KAAKW,WAAW,EACjF,KAAKM,uBAAyBA,GAAuB,KAAKjB,KAAM,KAAKW,WAAW,EAChF,KAAKgC,WAAa,KAAK3C,MAAMgD,SACzB,KAAKL,aACL,KAAKR,YAAcc,EAAK,EAEhC,4CA3BSV,EAA+B,2BAA/BA,EAA+BW,UAAA,CAAA,CAAA,8BAAA,CAAA,EAAAC,OAAA,CAAAnD,KAAA,OAAAW,YAAA,cAAAmB,aAAA,eAAAU,mBAAA,oBAAA,EAAAY,SAAA,CAAAC,CAAA,EAAAC,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,OAAA,OAAA,MAAA,EAAA,CAAA,EAAA,QAAA,mBAAA,UAAA,SAAA,EAAA,CAAA,KAAA,4BAAA,eAAA,gDAAA,EAAA,CAAA,eAAA,8CAAA,EAAA,QAAA,YAAA,EAAA,CAAA,KAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,SAAA,oBAAA,EAAA,CAAA,eAAA,uCAAA,EAAA,OAAA,QAAA,YAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IClB5CjE,EAAA,EAAA,KAAA,EACIF,EAAA,EAAA;KAAA,EAAAqB,EAAA,EAAAgD,GAAA,EAAA,CAAA,EAGAnE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,QAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,EACIF,EAAA,EAAA;iBAAA,EAAAqB,EAAA,EAAAiD,GAAA,GAAA,CAAA,EAAkB,GAAAC,GAAA,GAAA,CAAA,EAQQ,GAAAC,GAAA,GAAA,CAAA,EAMF,GAAAC,GAAA,GAAA,CAAA,EAMF,GAAAC,GAAA,GAAA,CAAA,EAMH,GAAAC,GAAA,EAAA,CAAA,EAM0B,GAAAC,GAAA,EAAA,CAAA,EA0BnB,GAAAC,GAAA,GAAA,CAAA,EAcsE,GAAAC,GAAA,GAAA,CAAA,EAmBjE,GAAAC,GAAA,GAAA,CAAA,EA4BnC5E,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;CAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;CAAA,SAjIII,EAAA,CAAA,EAAAqB,EAAA2C,EAAAnB,mBAAA,GAAA,CAAA,EAMY7C,EAAA,CAAA,EAAAqB,EAAA2C,EAAAhB,WAAA,EAAA,EAAA,EAQAhD,EAAA,EAAAqB,EAAA2C,EAAA3D,MAAA,MAAA2D,EAAA3D,KAAAC,aAAA,GAAA,EAAA,EAMAN,EAAA,EAAAqB,EAAA2C,EAAA3D,MAAA,MAAA2D,EAAA3D,KAAAE,WAAA,GAAA,EAAA,EAMAP,EAAA,EAAAqB,EAAA2C,EAAA3D,MAAA,MAAA2D,EAAA3D,KAAAG,SAAA,GAAA,EAAA,EAMAR,EAAA,EAAAqB,EAAA2C,EAAA3D,MAAA,MAAA2D,EAAA3D,KAAAI,MAAA,GAAA,EAAA,EAMAT,EAAA,EAAAqB,EAAA2C,EAAA3D,MAAA,CAAA2D,EAAAhB,YAAAgB,EAAA3D,KAAAO,UAAA,GAAA,EAAA,EA0BAZ,EAAA,EAAAqB,EAAA2C,EAAAnB,mBAAA,GAAA,EAAA,EAcA7C,EAAA,EAAAqB,EAAA2C,EAAA3D,OAAA2D,EAAAhD,aAAA,MAAAgD,EAAAhD,YAAA4D,SAAAZ,EAAA3D,KAAAwB,wBAAAmC,EAAA3D,KAAAyB,sBAAA,GAAA,EAAA,EAmBA9B,EAAA,EAAAqB,EAAA2C,EAAAA,EAAAhD,aAAA,MAAAgD,EAAAhD,YAAAoB,MAAA,OAAA4B,EAAAhD,YAAAoB,KAAAC,KAAA,GAAA,EAAA,EAOArC,EAAA,EAAAqB,EAAA2C,EAAA3D,MAAA2D,EAAAhB,WAAA,GAAA,EAAA,kBDzFF6B,EAAoBC,GAAiCC,GAA8BC,GAAiBC,EAAsBC,EAA8B,EAAAC,OAAA,CAAA,8EAAA,CAAA,CAAA,SAEzJvC,CAA+B,GAAA,kGEP/BwC,IAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACxBC,uBACAC,eAETC,aAAeA,8CAJNH,EAAwB,2BAAxBA,EAAwBI,UAAA,CAAA,CAAA,sBAAA,CAAA,EAAAC,OAAA,CAAAJ,uBAAA,yBAAAC,eAAA,gBAAA,EAAAI,mBAAAC,GAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,WAAA,MAAA,EAAA,CAAA,EAAA,cAAA,SAAA,qBAAA,0BAAA,EAAA,OAAA,EAAA,CAAA,EAAA,MAAA,aAAA,EAAA,CAAA,OAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,qBAAA,EAAA,aAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,WCXrCE,EAAA,EAAA,MAAA,CAAA,EACIC,EAAA,EAAA;KAAA,EAAAD,EAAA,EAAA,MAAA,CAAA,EAA2EE,EAAA,QAAA,UAAA,CAAA,OAASH,EAAAX,eAAA,CAAgB,CAAA,EAChGa,EAAA,EAAA;SAAA,EAAAE,GAAA,CAAA,EACAF,EAAA,EAAA;SAAA,EAAAD,EAAA,EAAA,SAAA,CAAA,EACIC,EAAA,EAAA;aAAA,EAAAG,EAAA,EAAA,UAAA,CAAA,EACJH,EAAA,EAAA;SAAA,EAAAI,EAAA,EACJJ,EAAA,GAAA;KAAA,EAAAI,EAAA,EAEAJ,EAAA,GAAA;;KAAA,EAAAD,EAAA,GAAA,MAAA,CAAA,EACIC,EAAA,GAAA;SAAA,EAAAE,GAAA,GAAA,CAAA,EACJF,EAAA,GAAA;KAAA,EAAAI,EAAA,EACJJ,EAAA,GAAA;CAAA,EAAAI,EAAA,EACAJ,EAAA,GAAA;CAAA,SATwCK,EAAA,CAAA,EAAAC,EAAA,UAAA,CAAAR,EAAAZ,sBAAA,yFACTmB,EAAA,CAAA,EAAAE,EAAA,OAAAT,EAAAV,YAAA,EAIeiB,EAAA,CAAA,EAAAE,EAAA,cAAAT,EAAAZ,sBAAA,kBDChCsB,EAAiBC,EAAW,EAAAC,OAAA,CAAA,ybAAA,wrFAAA,mQAAA,CAAA,CAAA,SAE7BzB,CAAwB,GAAA,mOGGL0B,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,KAAA,EAAA,EACJD,EAAA,EAAA;6BAAA,0BAKIA,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,KAAA,EAAA,EACJD,EAAA,EAAA;6BAAA,6BAiBYA,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;6CAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EACJD,EAAA,EAAA;yCAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;qCAAA,mCAFiBI,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAC,cAAAC,EAAAC,EAAA,EAAAC,IAAA,6BAOjBV,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,KAAA,EAAA,EAAwBF,EAAA,CAAA,EAAiDG,EAAA,EAC7EH,EAAA,EAAA;iCAAA,mCAD4BI,EAAA,CAAA,EAAAO,EAAAL,EAAAM,gBAAAC,kBAAAL,CAAA,CAAA,6BAOpBR,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,MAAA,EAAMF,EAAA,CAAA,EAA2GG,EAAA,EACrHH,EAAA,EAAA;qCAAA,mCADUI,EAAA,CAAA,EAAAO,EAAAH,EAAAM,yBAAAR,EAAAS,uBAAAC,kBAAA,EAAAR,EAAAS,SAAA,6BAKNjB,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,MAAA,EAAwDF,EAAA,CAAA,EAAuDG,EAAA,EACnHH,EAAA,EAAA;qCAAA,mCADUI,EAAA,EAAAc,EAAAZ,EAAAC,cAAAC,EAAAC,EAAA,EAAAU,UAAA,EAAkDf,EAAA,EAAAgB,EAAA,IAAAd,EAAAC,cAAAC,EAAAC,EAAA,EAAAY,mBAAA,KAAA,yBAExDrB,EAAA,EAAA;;qCAAA,4BAMIA,EAAA,EAAA;6CAAA,EAAAE,EAAA,EAAA,MAAA,EAAMF,EAAA,CAAA,EAEJG,EAAA,EACNH,EAAA,EAAA;yCAAA,oCAHUI,EAAA,CAAA,EAAAO,EAAAH,EAAAM,yBAAAR,EAAAS,uBAAAC,kBAAAR,EAAAS,UAAAT,EAAAc,WAAA,6BAFdtB,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;yCAAA,EAAAuB,EAAA,EAAAC,GAAA,EAAA,CAAA,EAKJrB,EAAA,EACJH,EAAA,EAAA;iCAAA,4BANQI,EAAA,CAAA,EAAAqB,EAAAjB,EAAAc,cAAAI,OAAA,EAAA,EAAA,sCAvCZ1B,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,KAAA,EAAA,EAKIyB,EAAA,QAAA,UAAA,CAAA,IAAAnB,EAAAoB,EAAAC,CAAA,EAAAC,UAAAxB,EAAAyB,EAAA,CAAA,EAAA,OAAAC,EAAS1B,EAAA2B,iBAAAzB,EAAAC,EAAA,CAA6B,CAAA,CAAA,EAGtCT,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,KAAA,EAAA,EAAgBF,EAAA,CAAA,EAAuBG,EAAA,EACvCH,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,EAAA;;qCAAA,EACAuB,EAAA,EAAAW,GAAA,EAAA,CAAA,EAMAhC,EAAA,EAAA,MAAA,EAAMF,EAAA,EAAA,EAA2CG,EAAA,EACrDH,EAAA,GAAA;iCAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;iCAAA,EAAAuB,EAAA,GAAAY,GAAA,EAAA,CAAA,EAGAjC,EAAA,GAAA,KAAA,EAAA,EACIF,EAAA,EAAA,EACJG,EAAA,EACAH,EAAA,GAAA;iCAAA,EAAAE,EAAA,GAAA,KAAA,EAAA,EACIF,EAAA,GAAA;qCAAA,EAAAuB,EAAA,GAAAa,GAAA,EAAA,CAAA,EAGJjC,EAAA,EACAH,EAAA,GAAA;iCAAA,EAAAE,EAAA,GAAA,KAAA,EAAA,EACIF,EAAA,GAAA;qCAAA,EAAAuB,EAAA,GAAAc,GAAA,EAAA,CAAA,EAAiH,GAAAC,GAAA,EAAA,CAAA,EAKrHnC,EAAA,EACAH,EAAA,GAAA;iCAAA,EAAAuB,EAAA,GAAAgB,GAAA,EAAA,CAAA,EASJpC,EAAA,EACJH,EAAA,GAAA;yBAAA,kDAzCQI,EAAA,EAAAoC,EAAA,wBAAAhC,EAAAM,yBAAAR,EAAAS,uBAAA0B,YAAA,EALApC,EAAA,UAAAqC,EAAA,GAAAC,GAAAnC,EAAAM,yBAAAR,EAAAS,uBAAA0B,aAAAjC,EAAAM,yBAAAR,EAAAS,uBAAAC,iBAAA,CAAA,EAOgBZ,EAAA,CAAA,EAAAO,EAAAiC,EAAA,CAAA,EAGZxC,EAAA,CAAA,EAAAqB,EAAAjB,GAAA,MAAAA,EAAAqC,MAAAvC,EAAAC,cAAAC,EAAAC,EAAA,IAAAiB,OAAA,EAAA,EAAA,EAMMtB,EAAA,CAAA,EAAAO,GAAAmC,EAAAtC,GAAA,MAAAA,EAAAuC,eAAA,KAAA,KAAAvC,EAAAuC,cAAAC,SAAA,MAAAF,IAAApB,OAAAoB,EAAA,GAAA,EAEV1C,EAAA,CAAA,EAAAqB,EAAAnB,EAAA2C,0BAAA,GAAA,EAAA,EAII7C,EAAA,CAAA,EAAAgB,EAAA;uCAAA8B,EAAA5C,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAC,2BAAA,KAAA,KAAA9C,EAAA6C,qBAAAC,0BAAA5C,EAAAC,EAAA,KAAA,MAAAyC,IAAAxB,OAAAwB,EAAA,EAAA;iCAAA,EAGA9C,EAAA,CAAA,EAAAqB,EAAAjB,EAAAS,YAAAS,OAAA,GAAA,EAAA,EAKAtB,EAAA,CAAA,EAAAqB,EAAAnB,EAAAC,cAAAC,EAAAC,EAAA,IAAAiB,QAAApB,EAAAC,cAAAC,EAAAC,EAAA,EAAAY,qBAAAK,OAAA,GAAA,EAAA,EAMJtB,EAAA,CAAA,EAAAqB,EAAAnB,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAE,eAAA,GAAA,EAAA,0BAgBArD,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,KAAA,EAAA,EAAwBF,EAAA,EAAA,GAAA,EAACG,EAAA,EAC7BH,EAAA,EAAA;6BAAA,6BASQA,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,MAAA,EAA4DF,EAAA,CAAA,EAAyDG,EAAA,EACzHH,EAAA,EAAA;iCAAA,mBADUI,EAAA,EAAAc,EAAAZ,EAAAgD,UAAA,eAAA,aAAA,EAAsDlD,EAAA,EAAAgB,EAAA,IAAAd,EAAAiD,iDAAA,KAAA,0BAE5DvD,EAAA,EAAA;qCAAA,EAAAC,EAAA,EAAA,aAAA,EACJD,EAAA,EAAA;iCAAA,6BAGAA,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,IAAA,EACIF,EAAA,CAAA,EACJG,EAAA,EACJH,EAAA,EAAA;6BAAA,mBAFQI,EAAA,CAAA,EAAAgB,EAAA;sCAAAd,EAAA6C,sBAAA,KAAA,KAAA7C,EAAA6C,qBAAAE,eAAA;iCAAA,6BASRrD,EAAA,CAAA,2CAAAoB,EAAA;8BAAAoC,EAAA,EAAA,EAAA,0DAAAd,EAAA,EAAAe,GAAAnD,EAAAoD,sBAAApD,EAAAW,SAAA,CAAA,EAAA;yBAAA,6BAUAjB,EAAA,CAAA,2CAAAoB,EAAA;8BAAAoC,EAAA,EAAA,EAAA,iDAAAd,EAAA,EAAAe,GAAAnD,EAAAoD,sBAAApD,EAAAW,SAAA,CAAA,EAAA;yBAAA,6BAUAjB,EAAA,CAAA,2CAAAoB,EAAA;8BAAAoC,EAAA,EAAA,EAAA,2DAAAlD,EAAA6C,qBAAAQ,cAAAC,eAAAC,cAAAnB,EAAA,EAAAoB,GAAAxD,EAAA6C,qBAAAQ,cAAAC,eAAAG,WAAAzD,EAAA6C,qBAAAQ,cAAAC,eAAAI,cAAA,CAAA,EAAA;yBAAA,6BAWJhE,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACAD,EAAA,CAAA,EACJG,EAAA,EACAH,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACAD,EAAA,CAAA,EACJG,EAAA,EACJH,EAAA,GAAA;qBAAA,mBANQI,EAAA,CAAA,EAAAgB,EAAA;8BAAAd,EAAA6C,qBAAAQ,cAAAM,aAAA;yBAAA,EAIA7D,EAAA,CAAA,EAAAgB,EAAA;8BAAAd,EAAA6C,qBAAAQ,cAAAC,gBAAA,KAAA,KAAAtD,EAAA6C,qBAAAQ,cAAAC,eAAAM,WAAA;yBAAA,6BAGJlE,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EACAD,EAAA,CAAA,EACJG,EAAA,EACJH,EAAA,EAAA;qBAAA,mBAFQI,EAAA,CAAA,EAAAgB,EAAA;8BAAAd,EAAA6C,qBAAAQ,cAAAM,aAAA;yBAAA,6BAoBZjE,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,uBAAA,CAAA,EACIF,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EAA4BD,EAAA,EAAA;yBAAA,EAC5BC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,EAAAG,EAAA,EAEAH,EAAA,EAAA;;qBAAA,EAAAE,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,sBAAA,EAAA,EAIJD,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,qBAb0BI,EAAA,EAAAC,EAAA,yBAAAC,EAAA6D,YAAA,mBAAA,CAAA,EAA2D,iBAAA7D,EAAA8D,eAAA,mBAAA,CAAA,EAEhEhE,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAA+D,OAAA,EAMLjE,EAAA,CAAA,EAAAC,EAAA,wCAAA,KAAAiE,EAAAhE,EAAA6C,qBAAAQ,cAAAC,gBAAA,KAAA,KAAAtD,EAAA6C,qBAAAQ,cAAAC,eAAAG,cAAA,MAAAO,IAAA5C,OAAA4C,EAAA,EAAA,EAAmH,WAAA,EAAA,6BApBnItE,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,uBAAA,CAAA,EACIF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,UAAA,EAAA,EAAiCD,EAAA,EAAA;qBAAA,EACjCC,EAAA,EAAA,OAAA,EAAA,EACJD,EAAA,EAAA;iBAAA,EAAAG,EAAA,EAEAH,EAAA,EAAA;;iBAAA,EAAAE,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,sBAAA,EAAA,EACJD,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EAEAH,EAAA,GAAA;;aAAA,EAAAuB,EAAA,GAAAgD,GAAA,GAAA,CAAA,mBAXsBnE,EAAA,EAAAC,EAAA,yBAAAC,EAAA6D,YAAA,aAAA,CAAA,EAAqD,iBAAA7D,EAAA8D,eAAA,aAAA,CAAA,EAE1DhE,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAkE,WAAA,EAKYpE,EAAA,CAAA,EAAAC,EAAA,wCAAAC,EAAAmE,KAAA,EAI7BrE,EAAA,CAAA,EAAAqB,EAAAnB,EAAAoE,2BAAA,GAAA,EAAA,6BArKR1E,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,KAAA,EACIF,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,KAAA,CAAA,EAEAD,EAAA,EAAA;;SAAA,EAAAE,EAAA,EAAA,uBAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EAEAD,EAAA,EAAA;;aAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,QAAA,CAAA,EACIF,EAAA,GAAA;qBAAA,EAAAE,EAAA,GAAA,OAAA,EACIF,EAAA,GAAA;yBAAA,EAAAE,EAAA,GAAA,IAAA,EACIF,EAAA,GAAA;6BAAA,EAAAE,EAAA,GAAA,KAAA,CAAA,EAAgBF,EAAA,GAAA,GAAA,EAACG,EAAA,EACjBH,EAAA,GAAA;6BAAA,EAAAC,EAAA,GAAA,KAAA,CAAA,EACAD,EAAA,GAAA;6BAAA,EAAAuB,EAAA,GAAAoD,GAAA,EAAA,CAAA,EAGA1E,EAAA,GAAA,KAAA,CAAA,EACAD,EAAA,GAAA;6BAAA,EAAAC,EAAA,GAAA,KAAA,CAAA,EACAD,EAAA,GAAA;6BAAA,EAAAC,EAAA,GAAA,KAAA,CAAA,EACAD,EAAA,GAAA;6BAAA,EAAAuB,EAAA,GAAAqD,GAAA,EAAA,CAAA,EAGJzE,EAAA,EACJH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;qBAAA,EAAAE,EAAA,GAAA,OAAA,EACIF,EAAA,GAAA;yBAAA,EAAA6E,EAAA,GAAAC,GAAA,GAAA,GAAA,KAAA,KAAAC,CAAA,EAiDJ5E,EAAA,EACAH,EAAA,GAAA;qBAAA,EAAAE,EAAA,GAAA,QAAA,EAAA,EACIF,EAAA,GAAA;yBAAA,EAAAE,EAAA,GAAA,IAAA,EACIF,EAAA,GAAA;6BAAA,EAAAC,EAAA,GAAA,KAAA,EAAA,EACAD,EAAA,GAAA;6BAAA,EAAAuB,EAAA,GAAAyD,GAAA,EAAA,CAAA,EAGA9E,EAAA,GAAA,KAAA,EAAA,EACIF,EAAA,EAAA,EACJG,EAAA,EACAH,EAAA,GAAA;6BAAA,EAAAE,EAAA,GAAA,KAAA,EAAA,EACIF,EAAA,EAAA,EACJG,EAAA,EACAH,EAAA,GAAA;6BAAA,EAAAE,EAAA,GAAA,KAAA,EAAA,EACIF,EAAA,GAAA;iCAAA,EAAAuB,EAAA,GAAA0D,GAAA,EAAA,CAAA,EAA6E,GAAAC,GAAA,EAAA,CAAA,EAKjF/E,EAAA,EACAH,EAAA,GAAA;6BAAA,EAAAuB,EAAA,GAAA4D,GAAA,EAAA,CAAA,EAKJhF,EAAA,EACJH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;qBAAA,EAAAE,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;yBAAA,EAAAuB,EAAA,GAAA6D,GAAA,EAAA,CAAA,EAA4C,GAAAC,GAAA,EAAA,CAAA,EAUA,GAAAC,GAAA,EAAA,CAAA,EAoBhDnF,EAAA,EACAH,EAAA,GAAA;qBAAA,EAAAuB,EAAA,GAAAgE,GAAA,GAAA,CAAA,EAAuE,GAAAC,GAAA,EAAA,CAAA,EAe3ErF,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EAEAH,EAAA,GAAA;;SAAA,EAAAuB,EAAA,GAAAkE,GAAA,GAAA,CAAA,EA4BJtF,EAAA,EACJH,EAAA,GAAA;CAAA,kBAnL8BI,EAAA,CAAA,EAAAC,EAAA,yBAAAC,EAAA6D,YAAA,eAAA,CAAA,EAAuD,iBAAA7D,EAAA8D,eAAA,eAAA,CAAA,EASzDhE,EAAA,EAAA,EAAAqB,EAAAnB,EAAA2C,0BAAA,GAAA,EAAA,EAMA7C,EAAA,CAAA,EAAAqB,EAAAnB,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAE,eAAA,GAAA,EAAA,EAMJjD,EAAA,CAAA,EAAAsF,EAAApF,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAwC,aAAA,KAAA,KAAArF,EAAA6C,qBAAAwC,YAAAC,SAAA,EAqDIxF,EAAA,CAAA,EAAAqB,EAAAnB,EAAA2C,0BAAA,GAAA,EAAA,EAII7C,EAAA,CAAA,EAAAgB,EAAA;kCAAAd,EAAAoD,sBAAA;6BAAA,EAGAtD,EAAA,CAAA,EAAAgB,EAAA;kCAAAd,EAAAW,UAAA;6BAAA,EAGAb,EAAA,CAAA,EAAAqB,EAAAnB,EAAA6C,qBAAAQ,cAAAkC,uBAAAnE,OAAA,GAAA,EAAA,EAMJtB,EAAA,CAAA,EAAAqB,EAAAnB,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAE,eAAA,GAAA,EAAA,EAUJjD,EAAA,CAAA,EAAAqB,EAAAnB,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAE,eAAA,GAAA,EAAA,EAUAjD,EAAA,EAAAqB,EAAAnB,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAE,eAAA,GAAA,EAAA,EAUAjD,EAAA,EAAAqB,EAAAnB,EAAA6C,qBAAAQ,cAAAC,iBAAAlC,OAAA,GAAA,EAAA,EAWJtB,EAAA,CAAA,EAAAqB,EAAAnB,EAAAA,EAAA6C,sBAAA,MAAA7C,EAAA6C,qBAAAQ,eAAA,MAAArD,EAAA6C,qBAAAQ,cAAAC,gBAAA,OAAAtD,EAAA6C,qBAAAQ,cAAAC,eAAAM,WAAA,GAAA,EAAA,EAmBZ9D,EAAA,CAAA,EAAAqB,EAAAnB,EAAAwF,mBAAA,GAAA,EAAA,GDvHR,IAAaC,IAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAC5BC,kBAAoBC,EAAOC,CAAwB,EAC3DtF,gBAAkBqF,EAAOE,CAAe,EAChCC,eAAiBH,EAAOI,EAAiB,EAExCtF,uBAAyBA,EACzBuF,cAAgBA,GAEhBnD,qBACAoD,sBAAwB,GACxBC,2BAA6B,GAC7BjG,cACAkG,UAAY,GAErBX,mBAAqB,GACrBY,QAAU,GACVpD,UAAY,GACZmB,MAGAD,YAAcA,GACdH,QAAUA,GACVsC,eAAiBA,GAEjB1D,0BAA4B,GAI5BhC,UAAY,EACZyC,sBAAwB,EACxBH,iDAAmD,EACnDmB,2BAA6B,GAS7BkC,mBAAqB,GAErBzC,YAAsD,CAClD,gBAAiB,GACjB,cAAe,GACf,oBAAqB,IAGzB0C,UAAQ,CACA,KAAKC,oBAAmB,GACxB,KAAKC,aAAY,EAGrB,KAAKC,qBAAoB,CAC7B,CAEAC,aAAW,CACP,KAAKD,qBAAoB,CAC7B,CAEQF,qBAAmB,CACvB,OAAOI,GAAsB,KAAKT,UAAW,KAAKtD,sBAAsBwC,aAAawB,KAAM,KAAKnB,iBAAiB,CACrH,CAEQgB,sBAAoB,CACxB,KAAKJ,mBAAqB,CAAC,EAAE,KAAKE,oBAAmB,GAAM,KAAKM,oBAAmB,GACnF,KAAKnE,0BAA4B,KAAKoE,4CAA2C,EACjF,KAAKpG,UAAY,KAAKkC,sBAAsBlC,WAAa,EACzD,KAAKyD,2BAA6B,KAAKvB,qBAAqBQ,cAAcC,gBAAgBG,YAAcrC,KAExG,KAAKgC,sBAAwB,KAAK4D,yBAAwB,EAC1D,KAAK/D,iDAAmD,KAAKgE,oDAAmD,CACpH,CAKQC,mBAAiB,CACrB,OAAQ,KAAKrE,qBAAqBwC,aAAaC,WAAa,CAAA,GAAI6B,OAAO,CAACC,EAAkBC,IAAY,CAClG,IAAMC,EAAiB,KAAKzE,sBAAsBC,4BAA4BuE,EAASlH,EAAG,GAAK,EAC/F,OAAOiH,EAAmBE,CAC9B,EAAG,CAAC,CACR,CAEQN,0BAAwB,CAC5B,IAAM5D,EAAwB,KAAKP,sBAAsBQ,cAAckE,sBACvE,OAAInE,IAA0BhC,QAAagC,IAA0B,EAC1D,KAAK8D,kBAAiB,EAG1B9D,CACX,CAEQ6D,qDAAmD,CACvD,IAAI1B,EAAuB,KAAK1C,qBAAqBQ,cAAckC,qBACnE,OAAIA,IAAyBnE,QAAamE,IAAyB,KAC/DA,EAAuB,KAAKiC,sCAAqC,GAG9DC,EAA2ClC,EAAuB,IAAK,KAAK1C,qBAAqBwC,aAAawB,MAAMa,MAAM,CACrI,CAKQF,uCAAqC,CACzC,IAAIG,EAAoB,EACpBC,EAAoB,EAOxB,OALAC,OAAOC,QAAQ,KAAK7H,aAAa,EAAE8H,QAAQ,CAAC,CAAA,CAAGC,CAAY,IAAK,CAC5DL,GAAqBK,EAAajH,oBAAsB,EACxD6G,GACJ,CAAC,EAEGA,IAAsB,EACf,EAGJD,EAAoBC,CAC/B,CAMAb,6CAA2C,CACvC,QAAWM,KAAY,KAAKxE,sBAAsBwC,aAAaC,WAAa,CAAA,EACxE,GAAI+B,EAAS7G,yBAA2BC,EAAuBwH,oBAC3D,MAAO,GAIf,MAAO,EACX,CAKAxB,cAAY,CACJ,KAAK5D,sBAAsBQ,eAAeM,cAAgBvC,OAC1D,KAAKoE,mBAAqB,GAC1B,KAAKrB,MAAQ,KAAKtB,qBAAqBQ,cAAcM,aACrD,KAAKyC,QAAU,KAAKvD,qBAAqBqF,YAAcC,GAAUC,MACjE,KAAKpF,UAAY,CAAC,CAAC,KAAKH,qBAAqBQ,cAAcL,UAC3D,KAAK8C,eAAeuC,cAAa,EAEzC,CAKAC,+BAA6B,CACzB,IAAMC,EAA2B,KAAK1F,sBAAsBE,gBAAkB,EAC9E,OAAO,KAAKpC,UAAY4H,CAC5B,CAEA5G,iBAAiB6G,EAAmB,CAChC,GAAIA,IAAepH,OACf,OAGJ,IAAMqH,EAAa,YAAYD,CAAU,GACnCE,EAAgBC,SAASC,eAAeH,CAAU,EAExD,GAAIC,EACAA,EAAcG,eAAe,CACzBC,SAAU,SACVC,MAAO,QACPC,OAAQ,UACX,MACE,CACH,IAAMC,EAAe,2EACrBC,EAAiB,IAAIC,MAAMF,CAAY,EAAG,CACtCG,MAAO,CACHZ,WAAAA,EACAC,WAAAA,EACAC,cAAAA,GAEP,CACL,CACJ,CAEQ5B,qBAAmB,CACvB,IAAMxB,EAAY,KAAKzC,sBAAsBwC,aAAaC,UAE1D,OAAIA,GAAW+D,OAAU,EAEd/D,EAAWgE,KAAMjC,GAAaA,EAASkC,wBAAwB,CAAC,GAAGC,SAASH,OAAU,CAAC,EAE3F,EACX,CAEAvF,eAAe2F,EAA4C,CACvD,MAAO,IAAO,KAAK5F,YAAY4F,CAAqB,EAAI,CAAC,KAAK5F,YAAY4F,CAAqB,CACnG,4CAlMShE,EAA2B,2BAA3BA,EAA2BiE,UAAA,CAAA,CAAA,0BAAA,CAAA,EAAAC,OAAA,CAAA9G,qBAAA,uBAAAoD,sBAAA,wBAAAC,2BAAA,6BAAAjG,cAAA,gBAAAkG,UAAA,WAAA,EAAAyD,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,eAAA,6CAAA,EAAA,CAAA,EAAA,yBAAA,gBAAA,EAAA,CAAA,eAAA,0CAAA,EAAA,SAAA,IAAA,EAAA,CAAA,EAAA,YAAA,gCAAA,qBAAA,EAAA,CAAA,KAAA,wBAAA,EAAA,QAAA,gBAAA,aAAA,EAAA,CAAA,QAAA,KAAA,EAAA,CAAA,QAAA,MAAA,eAAA,6CAAA,EAAA,CAAA,QAAA,MAAA,eAAA,+CAAA,EAAA,CAAA,QAAA,MAAA,eAAA,8CAAA,EAAA,CAAA,QAAA,MAAA,eAAA,uDAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,MAAA,UAAA,IAAA,eAAA,0CAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,OAAA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,QAAA,MAAA,eAAA,4CAAA,EAAA,CAAA,QAAA,MAAA,eAAA,6CAAA,EAAA,CAAA,EAAA,QAAA,SAAA,EAAA,CAAA,QAAA,KAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,CAAA,eAAA,8CAAA,EAAA,CAAA,eAAA,6CAAA,EAAA,CAAA,eAAA,mCAAA,EAAA,CAAA,EAAA,SAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,eAAA,sCAAA,EAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,uCAAA,EAAA,CAAA,eAAA,2CAAA,EAAA,CAAA,EAAA,wCAAA,UAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCnCxCjJ,EAAA,EAAAmJ,GAAA,GAAA,EAAA,OAAAjJ,EAAAgJ,EAAA7D,mBAAA,EAAA,EAAA,iBDiCc+D,EAAoBC,GAA0BC,EAASC,EAAiBC,GAAiBC,GAA0BC,CAAoB,EAAAC,OAAA,CAAA,+0BAAA,CAAA,CAAA,SAExInF,CAA2B,GAAA,4BG9BxBoF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EACJD,EAAA,EAAA;aAAA,kBADaE,EAAA,EAAAC,EAAA,OAAAC,EAAAC,aAAAC,IAAA,6BAWGN,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EACJD,EAAA,EAAA;yBAAA,mBADaE,EAAA,EAAAC,EAAA,UAAAC,EAAAC,cAAA,KAAA,KAAAD,EAAAC,aAAAE,UAAA,EAAoC,OAAAH,EAAAC,cAAA,KAAA,KAAAD,EAAAC,aAAAG,eAAA,6BAG7CR,EAAA,EAAA;6BAAA,EAAAS,EAAA,EAAA,OAAA,CAAA,EAA4ET,EAAA,CAAA,EAAwCU,EAAA,EACxHV,EAAA,EAAA;yBAAA,mBAD4CE,EAAA,EAAAS,EAAAP,EAAAC,aAAAE,UAAA,EAAoCL,EAAA,EAAAU,EAAA,IAAAR,EAAAC,aAAAQ,mBAAA,IAAA,6BAPxFb,EAAA,EAAA;iBAAA,EAAAS,EAAA,EAAA,MAAA,CAAA,EACIT,EAAA,CAAA,0BACAS,EAAA,EAAA,MAAA,CAAA,EACIT,EAAA,EAAA;yBAAA,EAAAc,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAqC,EAAAC,GAAA,EAAA,CAAA,EAMzCN,EAAA,EACJV,EAAA,EAAA;iBAAA,EAAAU,EAAA,EACJV,EAAA,EAAA;aAAA,kBAVQE,EAAA,CAAA,EAAAe,GAAA;uBAAAb,EAAAC,cAAA,KAAA,KAAAD,EAAAC,aAAAa,eAAA,MAAAd,EAAAe,SAAAC,UAAA,IAAAC,EAAA,EAAA,EAAA,6CAAA,EAAA;qBAAA,EAEInB,EAAA,CAAA,EAAAoB,EAAAlB,EAAAC,cAAA,MAAAD,EAAAC,aAAAG,gBAAA,EAAA,EAAA,EAGAN,EAAA,EAAAoB,GAAAlB,EAAAC,cAAA,KAAA,KAAAD,EAAAC,aAAAQ,sBAAAU,OAAA,EAAA,EAAA,6BAMRvB,EAAA,CAAA,0CAAAwB,EAAA;mBAAApB,EAAAe,SAAAC,UAAA,IAAAC,EAAA,EAAA,EAAA,6CAAA,EAAA;aAAA,0BAKRrB,EAAA,EAAA;SAAA,EAAAS,EAAA,EAAA,KAAA,EACIT,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACJD,EAAA,EAAA;SAAA,EAAAU,EAAA,EACJV,EAAA,EAAA;KAAA,GDlBJ,IAAayB,IAA4C,IAAA,CAAnD,MAAOA,CAA4C,CAC5CC,MACAP,SACAd,aACAsB,iBAEAC,wBAAuB,qDANvBH,EAA4C,2BAA5CA,EAA4CI,UAAA,CAAA,CAAA,yCAAA,CAAA,EAAAC,OAAA,CAAAJ,MAAA,QAAAP,SAAA,WAAAd,aAAA,eAAAsB,iBAAA,kBAAA,EAAAI,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,SAAA,oBAAA,EAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,KAAA,wBAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,cAAA,KAAA,EAAA,CAAA,OAAA,KAAA,EAAA,UAAA,MAAA,EAAA,CAAA,cAAA,qBAAA,EAAA,CAAA,eAAA,oDAAA,EAAA,QAAA,WAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICdzD1B,EAAA,EAAA,MAAA,CAAA,EACIT,EAAA,EAAA;KAAA,EAAAS,EAAA,EAAA,MAAA,CAAA,EACIT,EAAA,EAAA;SAAA,EAAAS,EAAA,EAAA,KAAA,CAAA,EACIT,EAAA,CAAA,EACAc,EAAA,EAAAuB,GAAA,EAAA,CAAA,EAGArC,EAAA,CAAA,EAEJU,EAAA,EACAV,EAAA,EAAA;SAAA,EAAAS,EAAA,EAAA,MAAA,CAAA,EACIT,EAAA,GAAA;aAAA,EAAAc,EAAA,GAAAwB,GAAA,GAAA,CAAA,EAAsE,GAAAC,GAAA,EAAA,CAAA,EAe1E7B,EAAA,EACJV,EAAA,GAAA;KAAA,EAAAU,EAAA,EACAV,EAAA,GAAA;KAAA,EAAAc,EAAA,GAAA0B,GAAA,EAAA,CAAA,EAKJ9B,EAAA,EACAV,EAAA,GAAA;CAAA,SAhCyBE,EAAA,CAAA,EAAAC,EAAA,KAAA,wBAAAiC,EAAAjB,SAAAsB,EAAA,EACbvC,EAAA,EAAAU,EAAA;eAAAwB,EAAAV,MAAA,EAAA;aAAA,EACAxB,EAAA,EAAAoB,EAAAc,EAAAjB,UAAA,MAAAiB,EAAAjB,SAAAuB,OAAAN,EAAA/B,cAAA,MAAA+B,EAAA/B,aAAAC,MAAA,EAAA,EAAA,EAGAJ,EAAA,EAAAU,EAAA;;cAAAwB,EAAAjB,SAAAwB,eAAA,KAAA,KAAAP,EAAAjB,SAAAwB,cAAAC,MAAA;SAAA,EAIA1C,EAAA,CAAA,EAAAoB,EAAAc,EAAAT,mBAAAS,EAAA/B,cAAA,KAAA,KAAA+B,EAAA/B,aAAAa,kBAAAK,OAAA,GAAA,EAAA,EAiBRrB,EAAA,CAAA,EAAAoB,GAAAc,EAAAjB,SAAA0B,uBAAA,MAAAT,EAAAjB,SAAA0B,sBAAA,CAAA,GAAA,MAAAT,EAAAjB,SAAA0B,sBAAA,CAAA,EAAAC,aAAA,MAAAV,EAAAjB,SAAA0B,sBAAA,CAAA,EAAAC,YAAA,CAAA,GAAA,KAAA,KAAAV,EAAAjB,SAAA0B,sBAAA,CAAA,EAAAC,YAAA,CAAA,EAAAJ,QAAAN,EAAAR,wBAAA,GAAA,EAAA,kBDhBUmB,EAAiBC,EAASC,EAAoBC,CAAoB,EAAAC,cAAA,CAAA,CAAA,SAEnE1B,CAA4C,GAAA,4BGZjD2B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,kBAAA,CAAA,EASJD,EAAA,EAAA;KAAA,kBARQE,EAAA,EAAAC,EAAA,kBAAAC,EAAAC,SAAAC,sBAAA,CAAA,EAAAC,EAAA,EAAyD,gBAAA,EAAA,EAClC,yBAAAH,EAAAI,sBAAA,EAC0B,gBAAAJ,EAAAK,2BAAAC,OAAAN,EAAAC,QAAA,EACkB,qBAAAD,EAAAK,2BAAAC,OAAAN,EAAAC,SAAAC,sBAAA,CAAA,CAAA,EAC+B,kBAAAF,EAAAK,2BAAAC,OAAAN,EAAAO,UAAA,EAC3B,gBAAA,EAAA,0BAI3EX,EAAA,EAAA;SAAA,EAAAY,EAAA,EAAA,KAAA,EAAKZ,EAAA,EAAA,eAAA,EAAaa,EAAA,EACtBb,EAAA,EAAA;KAAA,GDHJ,IAAac,IAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACxBT,SACAM,WACAH,uBAAyB,GACzBC,2BAA6B,8CAJ7BK,EAAwB,2BAAxBA,EAAwBC,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,OAAA,CAAAX,SAAA,WAAAM,WAAA,aAAAH,uBAAA,yBAAAC,2BAAA,4BAAA,EAAAQ,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,kBAAA,gBAAA,yBAAA,gBAAA,qBAAA,kBAAA,eAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICVrCT,EAAA,EAAA,KAAA,EACIZ,EAAA,EAAA;KAAA,EAAAuB,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA2F,EAAAC,GAAA,EAAA,CAAA,EAa/FZ,EAAA,EACAb,EAAA,EAAA;CAAA,SAdIE,EAAA,CAAA,EAAAwB,EAAAJ,EAAAA,EAAAjB,UAAA,MAAAiB,EAAAjB,SAAAC,uBAAA,OAAAgB,EAAAjB,SAAAC,sBAAAqB,SAAAL,EAAAA,EAAAjB,UAAA,MAAAiB,EAAAjB,SAAAC,uBAAA,MAAAgB,EAAAjB,SAAAC,sBAAA,CAAA,GAAA,OAAAgB,EAAAjB,SAAAC,sBAAA,CAAA,EAAAC,IAAA,EAAA,CAAA,kBDOUqB,EAAmB,EAAAC,cAAA,CAAA,CAAA,SAEpBf,CAAwB,GAAA,4BGR7BgB,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,0BAAA,CAAA,EAUJD,EAAA,EAAA;KAAA,kBATQE,EAAA,EAAAC,EAAA,kBAAAC,EAAAC,SAAAC,sBAAA,CAAA,EAAAC,EAAA,EAAyD,gBAAA,EAAA,EAClC,aAAAH,EAAAI,UAAA,EACE,yBAAAJ,EAAAK,sBAAA,EACwB,gBAAAL,EAAAM,2BAAAC,OAAAP,EAAAC,QAAA,EACkB,kBAAAD,EAAAM,2BAAAC,OAAAP,EAAAQ,UAAA,EACI,qBAAAR,EAAAM,2BAAAC,OAAAP,EAAAC,SAAAC,sBAAA,CAAA,CAAA,EAC2B,gBAAA,EAAA,0BAItGN,EAAA,EAAA;SAAA,EAAAa,EAAA,EAAA,KAAA,EAAKb,EAAA,EAAA,eAAA,EAAac,EAAA,EACtBd,EAAA,EAAA;KAAA,GDJJ,IAAae,IAA4B,IAAA,CAAnC,MAAOA,CAA4B,CAC5BV,SACAO,WACAJ,WAAa,GACbC,uBAAyB,GACzBC,2BAA6B,8CAL7BK,EAA4B,2BAA5BA,EAA4BC,UAAA,CAAA,CAAA,2BAAA,CAAA,EAAAC,OAAA,CAAAZ,SAAA,WAAAO,WAAA,aAAAJ,WAAA,aAAAC,uBAAA,yBAAAC,2BAAA,4BAAA,EAAAQ,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,kBAAA,gBAAA,aAAA,yBAAA,gBAAA,kBAAA,qBAAA,eAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICVzCT,EAAA,EAAA,KAAA,EACIb,EAAA,EAAA;KAAA,EAAAwB,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA2F,EAAAC,GAAA,EAAA,CAAA,EAc/FZ,EAAA,EACAd,EAAA,EAAA;CAAA,SAfIE,EAAA,CAAA,EAAAyB,EAAAJ,EAAAA,EAAAlB,UAAA,MAAAkB,EAAAlB,SAAAC,uBAAA,OAAAiB,EAAAlB,SAAAC,sBAAAsB,SAAAL,EAAAA,EAAAlB,UAAA,MAAAkB,EAAAlB,SAAAC,uBAAA,MAAAiB,EAAAlB,SAAAC,sBAAA,CAAA,GAAA,OAAAiB,EAAAlB,SAAAC,sBAAA,CAAA,EAAAC,IAAA,EAAA,CAAA,kBDOUsB,EAA2B,EAAAC,cAAA,CAAA,CAAA,SAE5Bf,CAA4B,GAAA,yBGP7BgB,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;SAAA,6BAIYA,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,+BAAA,CAAA,EAaJD,EAAA,EAAA;iBAAA,kDAZQE,EAAA,EAAAC,EAAA,KAAA,WAAAC,EAAA,EAAA,EAEAC,EAAA,WAAAC,CAAA,EAAqB,wBAAAC,EAAAC,sBAAAC,IAAAH,EAAAI,EAAA,CAAA,EAC6C,gBAAA,EAAA,EAC5C,aAAAH,EAAAI,kBAAA,CAAAJ,EAAAK,wBAAA,EACsC,gBAAAL,EAAAM,kBAAAC,aAAA,EACX,kBAAAP,EAAAQ,MAAA,EACtB,sBAAA,EAAA,EACE,gBAAAX,EAAA,CAAA,EACN,QAAAG,EAAAS,wBAAAV,EAAAI,EAAA,CAAA,6BAK3BV,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,6BAAA,CAAA,EAWJD,EAAA,EAAA;iBAAA,kDAVQE,EAAA,EAAAC,EAAA,KAAA,WAAAC,EAAA,EAAA,EAEAC,EAAA,WAAAC,CAAA,EAAqB,WAAAC,EAAAU,oBAAAR,IAAAH,EAAAI,EAAA,CAAA,EAC8B,gBAAA,EAAA,EAC7B,aAAAH,EAAAI,kBAAA,CAAAJ,EAAAK,wBAAA,EACsC,sBAAA,EAAA,EAC/B,gBAAAR,EAAA,CAAA,EACN,QAAAG,EAAAS,wBAAAV,EAAAI,EAAA,CAAA,6BAK3BV,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,4BAAA,CAAA,EAWJD,EAAA,EAAA;iBAAA,kDAVQE,EAAA,EAAAC,EAAA,KAAA,WAAAC,EAAA,EAAA,EAEAC,EAAA,WAAAC,CAAA,EAAqB,iBAAAC,EAAAW,0BAAAT,IAAAH,EAAAI,EAAA,CAAA,EAC0C,gBAAA,EAAA,EACzC,aAAAH,EAAAI,kBAAA,CAAAJ,EAAAK,wBAAA,EACsC,sBAAA,EAAA,EAC/B,gBAAAR,EAAA,CAAA,EACN,QAAAG,EAAAS,wBAAAV,EAAAI,EAAA,CAAA,6BAtCnCV,EAAA,EAAA;aAAA,EAAAmB,EAAA,EAAA,MAAA,CAAA,EACInB,EAAA,EAAA;iBAAA,EAAAoB,EAAA,EAAAC,GAAA,EAAA,EAAA,EAAyC,EAAAC,GAAA,EAAA,CAAA,EAeF,EAAAC,GAAA,EAAA,CAAA,EA0B3CC,EAAA,EACJxB,EAAA,EAAA;SAAA,iCA1CQE,EAAA,CAAA,EAAAuB,EAAAnB,EAAAoB,OAAAnB,EAAAoB,gBAAA,EAAA,EAAA,EAeAzB,EAAA,EAAAuB,EAAAnB,EAAAoB,OAAAnB,EAAAqB,cAAA,EAAA,EAAA,EAaA1B,EAAA,EAAAuB,EAAAnB,EAAAoB,OAAAnB,EAAAsB,aAAA,EAAA,EAAA,6BAlCZ7B,EAAA,EAAA;KAAA,EAAAmB,EAAA,EAAA,MAAA,CAAA,EACInB,EAAA,EAAA;SAAA,EAAAoB,EAAA,EAAAU,GAAA,EAAA,CAAA,EAGAC,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,EA6CJT,EAAA,EACJxB,EAAA,EAAA;CAAA,kBAjDQE,EAAA,CAAA,EAAAuB,EAAAlB,EAAAK,yBAAA,EAAA,EAAA,EAGAV,EAAA,EAAAgC,EAAA3B,EAAAM,kBAAAC,aAAA,GDqBR,IAAaqB,IAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACzBC,kBAAoBC,EAAOC,CAAwB,EAElDV,cAAgBW,EAAiBX,cACjCD,gBAAkBY,EAAiBZ,gBACnCE,aAAeU,EAAiBV,aAEzCrB,sBAAwB,IAAIgC,IAC5BvB,oBAAsB,IAAIuB,IAC1BtB,0BAA4B,IAAIsB,IAEvB3B,kBACA4B,WACA9B,iBACA+B,KAET3B,OAEA4B,aAAW,CACP,KAAKC,yBAAwB,EACzB,KAAK/B,kBAAkBgC,sBACvB,KAAK9B,OACD,KAAKF,kBAAkBgC,sBAAsBC,OAAS,GAAK,KAAKjC,kBAAkBgC,sBAAsB,CAAC,EAAEE,SAASD,OAC9G,KAAKjC,kBAAkBgC,sBAAsB,CAAC,EAAEE,QAAQ,CAAC,EACzDC,OAEV,KAAKjC,OAAS,KAAK0B,WAAWM,SAASD,OAAS,KAAKL,WAAWM,QAAQ,CAAC,EAAIC,MAErF,CAQAJ,0BAAwB,CAGpB,KAAKpC,sBAAwB,IAAIgC,IACjC,KAAKvB,oBAAsB,IAAIuB,IAC/B,KAAKtB,0BAA4B,IAAIsB,IAEjC,KAAK3B,kBAAkBC,eAAiB,KAAK2B,YAE7C,KAAK5B,kBAAkBC,cAAcmC,QAASC,GAAY,CAEtD,IAAMC,EAAkB,KAAKV,WAAWW,iBAClC,KAAKX,WAAWW,iBAAiBC,KAAMC,GAC5BA,EAAOC,aAAc7C,KAAOwC,EAASxC,EAC/C,EACDsC,OAEN,GAAIE,EAASxB,OAASa,EAAiBZ,gBAEnC,GAAIwB,EAAiB,CACjB,IAAMK,EAAmBL,EAAkDK,gBAC3E,KAAKhD,sBAAsBiD,IAAIP,EAASxC,GAAK8C,GAAoC,CAAA,CAAE,CACvF,MAEI,KAAKhD,sBAAsBiD,IAAIP,EAASxC,GAAK,CAAA,CAAE,UAE5CwC,EAASxB,OAASa,EAAiBX,cAE1C,GAAIuB,EAAiB,CACjB,IAAMO,EAAYP,EAA+CO,SACjE,KAAKzC,oBAAoBwC,IAAIP,EAASxC,GAAKgD,GAAsB,CAAA,CAAE,CACvE,MAEI,KAAKzC,oBAAoBwC,IAAIP,EAASxC,GAAK,CAAA,CAAE,UAE1CwC,EAASxB,OAASa,EAAiBV,aAE1C,GAAIsB,EAAiB,CACjB,IAAMQ,EAAkBR,EAA+CQ,eACvE,KAAKzC,0BAA0BuC,IAAIP,EAASxC,GAAKiD,GAAkC,CAAA,CAAE,CACzF,MAEI,KAAKzC,0BAA0BuC,IAAIP,EAASxC,GAAK,CAAA,CAAE,OAGvDkD,EAAiB,0BAA4BV,CAAQ,CAE7D,EAAG,IAAI,CAEf,CAEAlC,wBAAwB6C,EAAuB,CAC3C,GAAI,KAAKpB,YAAc,KAAKA,WAAWW,kBAAoB,KAAKX,WAAWW,iBAAiBN,OAAS,EAAG,CACpG,IAAMK,EAAkB,KAAKV,WAAWW,iBAAiBC,KAAMC,GACpDA,GAAUA,EAAOC,aAAeD,EAAOC,aAAa7C,KAAOmD,EAAiB,EACtF,EACD,GAAIV,GAAmBA,EAAgBW,gBAAkBd,OACrD,OAAOe,GAAoCZ,EAAgBW,cAAe,KAAKpB,KAAKsB,MAAM,CAElG,CACA,MAAO,EACX,CAKA,IAAIpD,0BAAwB,CACxB,OAAI,KAAK8B,MAAQ,KAAKA,KAAKuB,oBAAsB,KAAKpD,kBAAkBgC,uBAAyB,KAAKhC,kBAAkBgC,sBAAsBC,OAAS,EAC5IoB,EAAM,KAAKxB,KAAKuB,kBAAkB,EAAEE,SAAS,KAAK/B,kBAAkBgC,IAAG,CAAE,GAAK,CAAC,KAAKrD,OAExF,EACX,4CA3GSoB,EAAwB,2BAAxBA,EAAwBkC,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,OAAA,CAAAzD,kBAAA,oBAAA4B,WAAA,aAAA9B,iBAAA,mBAAA+B,KAAA,MAAA,EAAA6B,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,CAAA,eAAA,kDAAA,EAAA,QAAA,aAAA,MAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,KAAA,WAAA,wBAAA,gBAAA,aAAA,gBAAA,kBAAA,sBAAA,gBAAA,OAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,KAAA,WAAA,WAAA,gBAAA,aAAA,sBAAA,gBAAA,OAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,KAAA,WAAA,iBAAA,gBAAA,aAAA,sBAAA,gBAAA,OAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GC1BrCzD,EAAA,EAAA2D,GAAA,EAAA,CAAA,OAAAtD,EAAAqD,EAAAjE,kBAAAC,eAAAgE,EAAAjE,kBAAAC,cAAAgC,OAAA,EAAA,EAAA,EAAA,iBDwBckC,EAAoBC,GAAiCC,GAA8BC,EAA4B,EAAAC,cAAA,CAAA,CAAA,SAEhHjD,CAAwB,GAAA,4BGxB7BkD,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,6BAAA,CAAA,EASJD,EAAA,EAAA;KAAA,kBARQE,EAAA,EAAAC,EAAA,kBAAAC,EAAAC,SAAAC,sBAAA,CAAA,EAAAC,EAAA,EAAyD,gBAAA,EAAA,EAClC,yBAAAH,EAAAI,sBAAA,EAC0B,yBAAA,EAAA,EAClB,gBAAAJ,EAAAK,2BAAAC,OAAAN,EAAAC,QAAA,EACoC,kBAAAD,EAAAK,2BAAAC,OAAAN,EAAAO,UAAA,EACI,qBAAAP,EAAAK,2BAAAC,OAAAN,EAAAC,SAAAC,sBAAA,CAAA,CAAA,0BAI3EN,EAAA,EAAA;SAAA,EAAAY,EAAA,EAAA,KAAA,EAAKZ,EAAA,EAAA,eAAA,EAAaa,EAAA,EACtBb,EAAA,EAAA;KAAA,GDHJ,IAAac,IAA8B,IAAA,CAArC,MAAOA,CAA8B,CAC9BH,WACAN,SACAG,uBAAyB,GACzBC,2BAA6B,8CAJ7BK,EAA8B,2BAA9BA,EAA8BC,UAAA,CAAA,CAAA,8BAAA,CAAA,EAAAC,OAAA,CAAAL,WAAA,aAAAN,SAAA,WAAAG,uBAAA,yBAAAC,2BAAA,4BAAA,EAAAQ,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,kBAAA,gBAAA,yBAAA,yBAAA,gBAAA,kBAAA,oBAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICV3CT,EAAA,EAAA,KAAA,EACIZ,EAAA,EAAA;KAAA,EAAAuB,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA2F,EAAAC,GAAA,EAAA,CAAA,EAa/FZ,EAAA,EACAb,EAAA,EAAA;CAAA,SAdIE,EAAA,CAAA,EAAAwB,EAAAJ,EAAAA,EAAAjB,UAAA,MAAAiB,EAAAjB,SAAAC,uBAAA,OAAAgB,EAAAjB,SAAAC,sBAAAqB,SAAAL,EAAAA,EAAAjB,UAAA,MAAAiB,EAAAjB,SAAAC,uBAAA,MAAAgB,EAAAjB,SAAAC,sBAAA,CAAA,GAAA,OAAAgB,EAAAjB,SAAAC,sBAAA,CAAA,EAAAC,IAAA,EAAA,CAAA,kBDOUqB,EAA6B,EAAAC,cAAA,CAAA,CAAA,SAE9Bf,CAA8B,GAAA,qJGJnBgB,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,KAAA,CAAA,EACJD,EAAA,EAAA;qBAAA,0BAeQA,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACJD,EAAA,EAAA;yBAAA,6BAEIA,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,IAAA,CAAA,EACIF,EAAA,CAAA,0BACJG,EAAA,EACJH,EAAA,EAAA;yBAAA,kBAHOI,EAAA,EAAAC,EAAA,OAAAC,EAAAC,UAAAC,EAAA,EACCJ,EAAA,EAAAK,EAAA;kCAAAH,EAAAI,YAAAC,EAAA,EAAA,EAAA,0CAAA,EAAA;6BAAA,6BAGJX,EAAA,CAAA,0CAAAS,EAAA;8BAAAH,EAAAI,YAAAC,EAAA,EAAA,EAAA,0CAAA,EAAA;yBAAA,0BAMJX,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,KAAA,CAAA,EACJD,EAAA,EAAA;qBAAA,6BAEIA,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,oBAAA,EAAA,EAWJD,EAAA,EAAA;qBAAA,uBAVQI,EAAA,EAAAC,EAAA,WAAAC,EAAAM,4BAAAC,QAAA,EAAiD,SAAAP,EAAAM,4BAAAE,MAAA,EACJ,iBAAA,EAAA,EACrB,gBAAAC,EAAAT,EAAAM,4BAAAI,gBAAA,MAAAD,IAAAE,OAAAF,EAAAT,EAAAY,aAAAC,WAAA,EAC6D,gBAAAb,EAAAM,4BAAAQ,aAAA,EAC1B,aAAAd,EAAAM,4BAAAS,UAAA,EACN,2CAAAC,EAAAhB,EAAAM,4BAAAW,2CAAA,MAAAD,IAAAL,OAAAK,EAAA,EAAA,EACmE,mBAAA,EAAA,EAC/F,aAAAhB,EAAAkB,UAAA,6BAZjCxB,EAAA,EAAA;qBAAA,EAAAyB,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAkB,EAAAC,GAAA,EAAA,CAAA,kBAAlBvB,EAAA,EAAAwB,EAAAtB,EAAAuB,WAAA,EAAA,EAAA,EAGAzB,EAAA,EAAAwB,EAAAtB,EAAAM,6BAAAN,EAAAM,4BAAAE,OAAA,EAAA,EAAA,6BAkBAd,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,wCAAA,EAAA,EACJD,EAAA,EAAA;iBAAA,kBAD2CI,EAAA,EAAAC,EAAA,WAAAC,EAAAO,QAAA,EAAqB,gBAAAP,EAAAwB,aAAA,EAAgC,wBAAA,CAAAxB,EAAAyB,cAAA,6BAMxG/B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,6BAAA,EAAA,EAQJD,EAAA,EAAA;KAAA,oBANQI,EAAA,EAAAC,EAAA,WAAAC,EAAAO,QAAA,EAAqB,gBAAAP,EAAAwB,aAAA,EACU,UAAAE,EAAA1B,EAAAwB,cAAAG,SAAA,KAAA,KAAA3B,EAAAwB,cAAAG,QAAA,CAAA,KAAA,MAAAD,IAAAf,OAAAe,EAAA1B,EAAAuB,YAAA,MAAAvB,EAAAuB,WAAAI,SAAA,KAAA,KAAA3B,EAAAuB,WAAAI,QAAA,CAAA,CAAA,EACkC,OAAA3B,EAAA4B,IAAA,EACpD,UAAA5B,EAAA6B,SAAA,GDtCzB,IAAaC,IAA+B,IAAA,CAAtC,MAAOA,CAA+B,CAChCC,gBAAkBC,EAAOC,CAAe,EACxCC,qBAAuBF,EAAOG,GAAsB,CAAEC,SAAU,EAAI,CAAE,EACtEC,eAAiBL,EAAOM,EAAc,EACtCC,OAASP,EAAOQ,EAAM,EAErBjC,SAEAiB,cAEAD,WAEAM,UAAY,GAEZD,KAEAa,0BAA4B,GAE5BC,iBAAmB,GAEnBxB,WAAa,GAEbyB,2BAA6B,GAE7BlB,eAAiB,GAEjBZ,YAA4BD,EAAaC,YAE/B+B,eAAiBA,EACjBC,oBAAsBA,GACtBjC,aAAeA,EAElCJ,OAEAF,4BAEAL,UACAG,WAEA0C,WACAC,eAAiB,GACjBC,qBAAuB,GAEvBC,UAAQ,CACJ,KAAKH,WAAa,KAAKP,OAAOW,IAC9B,KAAK1C,OAAS,KAAKgB,cAAcG,UAAU,CAAC,EAC5C,KAAKvB,WAAa,KAAKmB,YAAYnB,YAAY+C,MAAM,EAAG,EAAE,EAC1D,KAAKH,qBAAuB,KAAKT,OAAOW,IAAIE,SAAS,mBAAmB,EACxE,IAAMC,EAAa,GACbC,EAAoBC,GAAyBC,KAE7CC,EAAiBC,GAAuB,KAAKnD,SAAU,KAAKiB,cAAe,KAAKA,cAAcG,UAAU,CAAC,EAAG0B,EAAYC,CAAiB,EAE3I,KAAK9C,SACL,KAAKF,4BAA8BqD,GAC/B,KAAKpD,SACL,KAAKC,OACL,KAAKgB,cACLiC,EACA,KAAK7B,KAAKgC,wBACV,KAAK1B,sBAAwB,KAAKH,eAAe,GAIzD,KAAK8B,gBAAe,CACxB,CAEQA,iBAAe,CAEnB,KAAKxB,eAAeyB,eAAc,EAAGC,UAAWC,GAAe,CAC3D,IAAMC,EAAwBD,GAAaC,sBAC3C,KAAKhE,UAAYiE,GAAgBD,EAAuB,KAAK1D,SAAS4D,WAAY,KAAK3C,cAAe,KAAKD,UAAU,EACrH,KAAKwB,eAAiBiB,EAAYI,gBAAgBhB,SAASiB,EAAe,CAC9E,CAAC,CACL,4CA1ESvC,EAA+B,2BAA/BA,EAA+BwC,UAAA,CAAA,CAAA,8BAAA,CAAA,EAAAC,OAAA,CAAAhE,SAAA,WAAAiB,cAAA,gBAAAD,WAAA,aAAAM,UAAA,YAAAD,KAAA,OAAAa,0BAAA,4BAAAC,iBAAA,mBAAAxB,WAAA,aAAAyB,2BAAA,6BAAAlB,eAAA,gBAAA,EAAA+C,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,MAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,eAAA,iBAAA,gBAAA,6BAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,eAAA,8CAAA,EAAA,CAAA,eAAA,4CAAA,EAAA,CAAA,eAAA,sDAAA,EAAA,CAAA,SAAA,SAAA,MAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,eAAA,wCAAA,EAAA,CAAA,EAAA,WAAA,SAAA,iBAAA,eAAA,gBAAA,aAAA,0CAAA,mBAAA,YAAA,EAAA,CAAA,EAAA,WAAA,gBAAA,uBAAA,EAAA,CAAA,EAAA,OAAA,OAAA,OAAA,EAAA,WAAA,gBAAA,SAAA,OAAA,SAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,IC5B5CE,EAAA,CAAA,EACIpF,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,KAAA,EACIF,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;qBAAA,EAAAyB,EAAA,GAAA4D,GAAA,EAAA,CAAA,EAGAnF,EAAA,GAAA,IAAA,EAAIF,EAAA,GAAA,0BAAA,EAAwBG,EAAA,EAC5BH,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,kBAAA,CAAA,EAUAD,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,IAAA,EACAD,EAAA,GAAA;qBAAA,EAAAE,EAAA,GAAA,MAAA,EACIF,EAAA,GAAA;yBAAA,EAAAyB,EAAA,GAAA6D,GAAA,EAAA,CAAA,EAAkB,GAAAC,GAAA,EAAA,CAAA,EAGD,GAAAC,GAAA,EAAA,CAAA,EAOrBrF,EAAA,EACJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;iBAAA,EAAAyB,EAAA,GAAAgE,GAAA,EAAA,CAAA,EAkBJtF,EAAA,EACAH,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,MAAA,CAAA,EACIF,EAAA,GAAA;iBAAA,EAAAC,EAAA,GAAA,KAAA,CAAA,EACAD,EAAA,GAAA;iBAAA,EAAAyB,EAAA,GAAAiE,GAAA,EAAA,CAAA,EAGJvF,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;KAAA,EAAAyB,EAAA,GAAAkE,GAAA,EAAA,CAAA,MAWJ3F,EAAA,GAAA;CAAA,cAlEoBI,EAAA,EAAA,EAAAwB,EAAAuD,EAAAtD,WAAA,GAAA,EAAA,EAKIzB,EAAA,CAAA,EAAAC,EAAA,eAAA,EAAA,EAAqB,iBAAAuF,GAAA,GAAAC,GAAAV,EAAArD,aAAA,CAAA,EACa,iBAAAE,EAAAmD,EAAArD,eAAA,KAAA,KAAAqD,EAAArD,cAAAgE,gCAAA,MAAA9D,IAAAf,OAAAe,EAAA,EAAA,EACiC,8BAAAmD,EAAA7B,qBAAAyC,EAAA,GAAAC,GAAAb,EAAAtE,SAAAoF,GAAAd,EAAArD,cAAAmE,EAAA,EAAAC,GAAA,GAAAC,GAAAhB,EAAA/B,WAAA+B,EAAAtE,SAAAoF,GAAAd,EAAArD,cAAAmE,EAAA,CAAA,EASnE7F,EAAA,CAAA,EAAAwB,EAAAuD,EAAAtD,WAAA,GAAA,EAAA,EAGAzB,EAAA,EAAAwB,EAAAuD,EAAA5E,UAAA,GAAA,EAAA,EASRH,EAAA,CAAA,EAAAwB,EAAAuD,EAAAlC,2BAAA,GAAA,EAAA,EAqBA7C,EAAA,CAAA,EAAAwB,EAAAuD,EAAAtE,SAAAuF,iBAAA,GAAA,EAAA,EAMZhG,EAAA,CAAA,EAAAwB,GAAAuD,EAAAtE,SAAAwF,iBAAAlB,EAAAjC,eAAAoD,gBAAAnB,EAAAtE,SAAA0F,yCAAApB,EAAAtD,YAAAsD,EAAApC,0BAAA,GAAA,EAAA,kBDlCUyD,EAAoBC,GAAqBC,GAAmBC,GAAyCC,GAAgCC,CAAoB,EAAAC,cAAA,CAAA,CAAA,SAE1J1E,CAA+B,GAAA,2EGhBxC2E,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,SAAA,CAAA,EACJF,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,6BAEIA,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,+BAAA,CAAA,EAKJF,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,kBALYI,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAC,YAAAC,IAAA,EAA0B,cAAAF,EAAAC,WAAA,EACC,iBAAAD,EAAAC,aAAA,KAAA,KAAAD,EAAAC,YAAAC,OAAA,KAAAF,EAAAG,0BAAAH,EAAAI,2BAAA,CAAAJ,EAAAK,SAAA,6BAMnCX,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,2BAAA,EAAA,EAOJF,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,kBAPYI,EAAA,CAAA,EAAAC,EAAA,uBAAAC,EAAAM,uBAAA,EAAiD,wBAAAN,EAAAO,qBAAA,EACF,6BAAAP,EAAAQ,0BAAA,EACU,gBAAAR,EAAAS,aAAA,EAC1B,YAAAT,EAAAK,SAAA,6BAMvCX,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,CAAA,0BACJG,EAAA,EACJH,EAAA,EAAA;CAAA,kBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAU,YAAA,EACTZ,EAAA,EAAAa,EAAA;UAAAC,EAAA,EAAA,EAAA,mCAAA,EAAA;KAAA,6BAcoBlB,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,IAAA,EAAA,EAKID,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EAMID,EAAA,EAAA;;iCAAA,EACJG,EAAA,EACJH,EAAA,EAAA;6BAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;yBAAA,kCAZQI,EAAA,EAAAC,EAAA,UAAAC,EAAAa,oBAAAC,EAAAC,EAAA,EAAAC,UAAAhB,EAAAiB,kBAAAC,cAAA,WAAA,YAAA,EAAsH,aAAAC,EAAA,EAAAC,GAAApB,EAAAqB,SAAArB,EAAAa,oBAAAC,EAAAC,EAAA,EAAAA,EAAA,CAAA,EAIlHjB,EAAA,CAAA,EAAAC,EAAA,eAAA,0CAAAC,EAAAa,oBAAAC,EAAAC,EAAA,EAAAC,UAAAhB,EAAAiB,kBAAAC,cAAA,yBAAA,iBAAA,0BAWJxB,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;6BAAA,0BAUYA,EAAA,EAAA;yCAAA,EAAAC,EAAA,EAAA,MAAA,EAAMD,EAAA,CAAA,0BAAsFG,EAAA,EAChGH,EAAA,EAAA;qCAAA,SADUI,EAAA,CAAA,EAAAa,EAAA,OAAAC,EAAA,EAAA,EAAA,iDAAA,EAAA,MAAA,0BAENlB,EAAA,CAAA,gCAAAiB,EAAA;0CAAAC,EAAA,EAAA,EAAA,iDAAA,EAAA;qCAAA,qCAVRlB,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAII2B,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAV,EAAAW,EAAA,CAAA,EAAAC,UAAA1B,EAAAyB,EAAA,EAAA,OAAAE,EAAS3B,EAAA4B,yBAAAd,EAAAC,EAAA,CAAqC,CAAA,CAAA,EAE9CrB,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;qCAAA,EAAAmC,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA2D,EAAAC,GAAA,EAAA,CAAA,EAK/DlC,EAAA,EACJH,EAAA,EAAA;6BAAA,qCAVQI,EAAA,EAAAkC,EAAAhC,EAAAS,cAAAK,EAAAC,EAAA,EAAAkB,uBAAA,cAAA,qBAAA,EAFAlC,EAAA,KAAA,+BAAAe,EAAAC,EAAA,EAKSjB,EAAA,CAAA,EAAAC,EAAA,OAAAC,EAAAS,cAAAK,EAAAC,EAAA,EAAAkB,uBAAAjC,EAAAkC,WAAAlC,EAAAmC,KAAA,EACTrC,EAAA,CAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,EAAAkB,uBAAA,EAAA,CAAA,6BAeAvC,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,0DAAA,EAAA,0BAQJF,EAAA,EAAA;iCAAA,6BAFQI,EAAA,EAAAuC,GAAA,aAAAzB,EAAA,EAAA,EAAA,4DAAA,CAAA,EAJAb,EAAA,aAAAe,EAAAC,EAAA,EAA2B,eAAA,EAAA,EACN,QAAA,wEAAA,EAC6D,yBAAA,EAAA,6BAX1FrB,EAAA,EAAA;iCAAA,EAAAE,EAAA,EAAA,0DAAA,EAAA,EAMAF,EAAA,EAAA;iCAAA,EAAAmC,EAAA,EAAAS,GAAA,EAAA,CAAA,mCAJIxC,EAAA,EAAAC,EAAA,aAAAe,EAAAC,EAAA,EAA2B,QAAA,+DAAA,EAC8C,yBAAA,EAAA,EAG7EjB,EAAA,CAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,EAAAwB,gCAAA,EAAA,EAAA,6BAzBJ7C,EAAA,EAAA;6BAAA,EAAAmC,EAAA,EAAAW,GAAA,EAAA,CAAA,EAA0D,EAAAC,GAAA,EAAA,CAAA,EAGK,EAAAC,GAAA,EAAA,CAAA,kCAH/D5C,EAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,EAAAkB,uBAAA,EAAA,EAAA,EAGAnC,EAAA,EAAAsC,EAAAtB,EAAA6B,OAAA3C,EAAA4C,MAAA9B,EAAA6B,OAAA3C,EAAA6C,YAAA,EAAA,EAAA,EAeA/C,EAAA,EAAAsC,EAAAtB,EAAA6B,OAAA3C,EAAA6C,YAAA,EAAA,EAAA,6BA0BQnD,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,uBAAA,EAAA,EACJF,EAAA,EAAA;iCAAA,6BAD0BI,EAAA,EAAAC,EAAA,aAAAe,EAAAC,EAAA,EAA0B,gBAAA,EAAA,6BAFxDrB,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;iCAAA,EAAAmC,EAAA,EAAAiB,GAAA,EAAA,CAAA,EAGJjD,EAAA,EACJH,EAAA,EAAA;yBAAA,6BAJQI,EAAA,CAAA,EAAAsC,EAAAtB,EAAAC,KAAAgC,OAAA,EAAA,EAAA,0BAOIrD,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACJF,EAAA,EAAA;iCAAA,6BAGQA,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,wBAAA,EAAA,EAMJF,EAAA,EAAA;qCAAA,mCALQI,EAAA,EAAAC,EAAA,WAAAe,CAAA,EAAqB,aAAAd,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,UAAA,EACkC,yBAAAhD,EAAAiD,sBAAA,EACN,6BAAAjD,EAAAkD,mBAAA,6BAKrDxD,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,4BAAA,EAAA,EAOJF,EAAA,EAAA;qCAAA,mCANQI,EAAA,EAAAC,EAAA,WAAAe,CAAA,EAAqB,aAAAd,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,UAAA,EACkC,aAAAhD,EAAAmD,UAAA,EAC9B,yBAAAnD,EAAAiD,sBAAA,EACwB,6BAAAjD,EAAAkD,mBAAA,6BAKrDxD,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,wBAAA,EAAA,EAMJF,EAAA,EAAA;qCAAA,mCALQI,EAAA,EAAAC,EAAA,oBAAAe,CAAA,EAA8B,OAAAd,EAAAC,YAAAC,IAAA,EACJ,aAAAF,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,UAAA,EAC6B,mBAAAhD,EAAAkD,mBAAA,6BAK3DxD,EAAA,EAAA;yCAAA,EAAAE,EAAA,EAAA,+BAAA,EAAA,EAMJF,EAAA,EAAA;qCAAA,mCALQI,EAAA,EAAAC,EAAA,aAAAC,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,UAAA,EAAuD,WAAAlC,CAAA,EAClC,yBAAAd,EAAAiD,sBAAA,EAC4B,6BAAAjD,EAAAkD,mBAAA,6BAWzDxD,EAAA,EAAA;qCAAA,EAAAE,EAAA,EAAA,6BAAA,EAAA,EAQJF,EAAA,EAAA;iCAAA,mCANQI,EAAA,EAAAC,EAAA,WAAAe,CAAA,EAAqB,gBAAAd,EAAAS,cAAAK,EAAAC,EAAA,EAAAqC,aAAA,EACwC,SAAApD,EAAAS,cAAAK,EAAAC,EAAA,EAAAqC,cAAAC,SAAA,KAAA,KAAArD,EAAAS,cAAAK,EAAAC,EAAA,EAAAqC,cAAAC,QAAA,CAAA,CAAA,EACM,OAAArD,EAAAsD,oCAAA,EACtB,UAAAtD,EAAAK,SAAA,6BAjDrDX,EAAA,EAAA;iCAAA,EAAAmC,EAAA,EAAA0B,GAAA,EAAA,CAAA,EAA2D,EAAAC,GAAA,EAAA,CAAA,EAIzC,EAAAC,GAAA,EAAA,CAAA,EAQI,EAAAC,GAAA,EAAA,CAAA,EASJ,EAAAC,GAAA,EAAA,CAAA,EAiBlBjE,EAAA,EAAA;iCAAA,EAAAmC,EAAA,EAAA+B,GAAA,EAAA,CAAA,qCAtCA9D,EAAA,EAAAsC,EAAApC,EAAAA,EAAAS,cAAAK,EAAAC,EAAA,GAAA,MAAAf,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,YAAA,OAAAhD,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,WAAAa,UAAA,GAAA,CAAA,EAGA/D,EAAA,EAAAsC,GAAA0B,EAAAhD,EAAA6B,QAAA3C,EAAA+D,KAAA,EAAAD,IAAA9D,EAAAgE,SAAA,EAAAF,IAAA9D,EAAA4C,KAAA,EAAAkB,IAAA9D,EAAAiE,YAAA,EAAA,EAAA,EAmCAnE,EAAA,CAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,GAAA,MAAAf,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,YAAAlC,EAAA6B,OAAA3C,EAAA4C,MAAA5C,EAAAI,4BAAAJ,EAAAA,EAAAS,cAAAK,EAAAC,EAAA,GAAA,MAAAf,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,YAAA,OAAAhD,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,WAAAa,WAAA,EAAA,EAAA,6BAvCJnE,EAAA,EAAA;6BAAA,EAAAmC,EAAA,EAAAqC,GAAA,EAAA,CAAA,mCAAApE,EAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,GAAA,MAAAf,EAAAS,cAAAK,EAAAC,EAAA,EAAAqC,cAAA,EAAA,EAAA,6BARR1D,EAAA,EAAA;qBAAA,EAAAyE,EAAA,EAAA,EAAA,EACIzE,EAAA,EAAA;yBAAA,EAAAmC,EAAA,EAAAuC,GAAA,EAAA,CAAA,EAA0D,EAAAC,GAAA,EAAA,CAAA,MAiElE3E,EAAA,EAAA;iBAAA,kCAjEQI,EAAA,CAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,EAAAkB,uBAAA,EAAA,CAAA,0BAqEAvC,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACJF,EAAA,EAAA;qBAAA,6BAEIA,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,+BAAA,EAAA,EAYJF,EAAA,EAAA;qBAAA,mCAXQI,EAAA,EAAAC,EAAA,WAAAe,CAAA,EAAqB,gBAAAd,EAAAS,cAAAK,EAAAC,EAAA,EAAAqC,aAAA,EACwC,aAAApD,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,UAAA,EACN,YAAAhD,EAAAK,SAAA,EAChC,OAAAL,EAAAsD,oCAAA,EACsB,4BAAAtD,EAAAI,yBAAA,EACU,mBAAAJ,EAAAkD,mBAAA,EACf,aAAAlD,EAAAmD,UAAA,EACf,6BAAAnD,EAAAkD,mBAAA,EACyB,iBAAAlD,EAAAsE,cAAA,6BAd1D5E,EAAA,EAAA;qBAAA,EACAA,EAAA,EAAA;qBAAA,EAAAmC,EAAA,EAAA0C,GAAA,EAAA,CAAA,EAAgD,EAAAC,GAAA,EAAA,EAAA,kCAAhD1E,EAAA,CAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,GAAA,MAAAf,EAAAS,cAAAK,EAAAC,EAAA,EAAAiC,WAAA,GAAA,CAAA,EAGAlD,EAAA,EAAAsC,EAAApC,EAAAS,cAAAK,EAAAC,EAAA,GAAA,MAAAf,EAAAS,cAAAK,EAAAC,EAAA,EAAAqC,cAAA,EAAA,EAAA,6BAzIhB1D,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,uBAAA,EAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,0CAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACAH,EAAA,EAAA;aAAA,EAAAC,EAAA,GAAA,MAAA,EAAA,EACID,EAAA,GAAA;iBAAA,EAAAC,EAAA,GAAA,MAAA,EAAA,EACID,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,OAAA,EAAA,EACID,EAAA,GAAA;yBAAA,EAAAmC,EAAA,GAAA4C,GAAA,EAAA,CAAA,EAAyC,GAAAC,GAAA,EAAA,CAAA,EAsD7C7E,EAAA,EACJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;iBAAA,EAAAmC,EAAA,GAAA8C,GAAA,EAAA,CAAA,EAAqC,GAAAC,GAAA,EAAA,CAAA,EAwFzC/E,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;CAAA,2CA3JSI,EAAA,EAAAC,EAAA,KAAA,YAAAe,EAAAC,EAAA,EACqBjB,EAAA,CAAA,EAAAC,EAAA,yBAAAC,EAAAS,cAAAK,EAAAC,EAAA,EAAA8D,WAAA,EAAkE,iBAAA7E,EAAA8E,uBAAA9E,EAAAS,cAAAK,EAAAC,EAAA,CAAA,CAAA,EAEvCjB,EAAA,CAAA,EAAAC,EAAA,QAAAgF,CAAA,EAAW,WAAAjE,CAAA,EAAsB,eAAAd,EAAAS,cAAAK,EAAAC,EAAA,CAAA,EAA6C,mBAAAf,EAAAkD,mBAAA,EAK/GpD,EAAA,CAAA,EAAAsC,EAAApC,EAAAa,oBAAAC,EAAAC,EAAA,EAAA,GAAA,EAAA,EAgBAjB,EAAA,EAAAsC,EAAApC,EAAAgF,yBAAA,GAAA,EAAA,EAwCRlF,EAAA,CAAA,EAAAsC,EAAAtB,EAAA6B,OAAA3C,EAAA6C,YAAA,GAAA,EAAA,EAoEA/C,EAAA,EAAAsC,EAAAtB,EAAA6B,OAAA3C,EAAA6C,YAAA,GAAA,EAAA,GDtFhB,IAAaoC,IAA0B,IAAA,CAAjC,MAAOA,CAA0B,CAC3BC,MAAQC,EAAOC,EAAc,EAC7BC,kBAAoBF,EAAOG,CAAwB,EACnDC,aAAeJ,EAAOK,EAAY,EAClCC,yBAA2BN,EAAOO,EAAwB,EAC1DC,uBAAyBR,EAAOS,EAAsB,EACtDC,aAAeV,EAAOW,EAAY,EAGjC/B,KAAOgC,EAAahC,KACpBnB,KAAOmD,EAAanD,KACpBoB,SAAW+B,EAAa/B,SACxBnB,YAAckD,EAAalD,YAC3BoB,YAAc8B,EAAa9B,YAC3B+B,eAAiBA,EACjBC,uBAAyBA,EACzBhF,kBAAoBA,GAE7BiF,aAAeA,GACfxF,aAAeA,GACfyF,QAAUA,GACVhE,MAAQA,GACRD,WAAaA,GACbkE,UAAYA,GAKJC,aAERxF,oBAAoE,CAAA,EACpEmE,yBAA2B,GAE3B,IAAI/E,aAAW,CACX,OAAO,KAAKoG,YAChB,CAEA,IACIpG,YAAYA,EAAwB,CACpC,KAAKoG,aAAepG,EAChB,KAAKK,0BACL,KAAKA,wBAAwBL,YAAcA,GAE/C,KAAKqG,qCAAoC,CAC7C,CAKAhG,wBAEAC,sBAAwB,GACxBC,2BAA6B,GAG7B8D,eAAiB,GAEjBjD,SAEAhB,UAAY,GACZkG,WAAa,GAEbC,kBAAoB,GACpBC,mBAAqB,GAErBnD,qCAEAnD,yBAA2B,GAK3BC,0BAA4B,GAE5BK,cAMA0C,WAAa,GAMbF,uBAAyB,GAKzByD,UAAQ,CAOJ,GALA,KAAKrG,UAAY,KAAK6E,MAAMyB,SAASC,IAAI,CAAC,GAAGC,SAAQ,IAAO,YAC5D,KAAKN,WAAa,KAAKtG,YAAYC,KAAM4G,SACzC,KAAKN,kBAAoB,KAAKnG,WAAa,KAAK6E,MAAMyB,SAASC,IAAI,CAAC,GAAGC,SAAQ,IAAO,aACtF,KAAKJ,mBAAqB,KAAKF,YAAc,CAAC,KAAKtG,YAAY4D,UAC/D,KAAKxC,SAAW0F,OAAO,KAAK7B,MAAMyB,UAAUK,UAAUC,IAAI,UAAU,GAAK,KAAK/B,MAAMgC,QAAQA,QAAQP,SAASK,SAASC,IAAI,UAAU,CAAC,EACjI,CAAC,KAAKhH,aAAac,GACnB,MAAM,IAAIoG,MAAM,sDAAsD,EAE1E,GAAI,CAAC,KAAKlH,aAAaC,MAAMa,GACzB,MAAM,IAAIoG,MAAM,2DAA2D,EAE/E,GAAI,CAAC,KAAKlH,aAAamH,MAAMrG,GACzB,MAAM,IAAIoG,MAAM,2DAA2D,EAG3EE,GAAsB,KAAKhH,UAAW,KAAKJ,YAAYC,KAAM,KAAKmF,iBAAiB,GACnF,KAAKI,yBACA6B,mCAAmC,KAAKjG,SAAU,KAAKpB,YAAYC,KAAKa,GAAI,KAAKd,YAAYc,GAAI,KAAKd,YAAYmH,KAAKrG,EAAE,EACzHwG,UAAWC,GAAiD,CACzDA,EAAqBvH,YAAc,KAAKA,YACxC,KAAKK,wBAA0BkH,EAC/B,KAAK/G,cAAgB,KAAKgH,iBAAiBD,CAAoB,CACnE,CAAC,EAGT,KAAKxC,yBAA2B,CAAC,CAAC,KAAK/E,YAAYC,MAAMwH,gCAAkCC,EAAK,EAAGC,QAAQ,KAAK3H,YAAYC,KAAKwH,8BAA8B,EAE/J,KAAKjH,cAAgB,KAAKgH,iBAAgB,EAE1C,KAAKI,wCAAuC,EAE5C,KAAK1H,yBAA2B,KAAK2H,4BAA2B,EAChE,KAAK1H,0BAA4B,KAAK2H,6BAA4B,CACtE,CAEA,IAAI7E,qBAAmB,CACnB,OAAI,KAAK7C,WAAa,KAAKkG,WAChB,GAGP,KAAKC,mBAAqB,KAAKC,mBACxB,GAGP,KAAKxG,aAAaC,MAAM8H,mBACjBL,EAAM,KAAK1H,YAAYC,KAAK8H,kBAAkB,EAAEC,SAASN,EAAK,CAAE,EAGpE,EACX,CAEQrB,sCAAoC,CAGxC,GAAI,KAAKrG,aAAaC,MAAMgI,QAAS,CACjC,IAAMC,EAA2BR,EAAM,KAAK1H,YAAYC,KAAKgI,OAAO,EAAEE,IAAI,EAAG,OAAO,EACpF,GAAIT,EAAK,EAAGM,SAASE,CAAwB,EACzC,MAER,CAEA,IAAME,EAAc,KAAKpI,aAAaqI,WAAWC,IAAKC,GAAaA,EAASzH,EAAG,EAC3EsH,GAAaI,QAAU,KAAKpH,UAC5B,KAAKsE,uBAAuB+C,iCAAiC,KAAKrH,SAAUgH,CAAW,EAAEd,UAAWoB,GAAO,CACvG,KAAK9H,oBAAsB8H,EAAIC,MAAQ,CAAA,CAC3C,CAAC,CAET,CAKMC,UAAQ,QAAAC,GAAA,sBACV,IAAMC,EAAuB,KAAKC,4CAA2C,EAE7E,KAAK7F,WAAa,GAClB,KAAKF,uBAAyB,GAE9B,MAAM,KAAKsC,aAAa0D,MAAK,EAE7B,KAAK9F,WAAa,GAClB,KAAKF,uBAAyB,GAE9B,KAAKiG,sCAAsCH,CAAoB,CACnE,GAEAI,uBAAqB,CAGjB,IAAMC,EAAgBC,SAASC,eAFZ,8BAEqC,GAAKD,SAASC,eAAe,oBAAoB,EAErGF,GACAA,EAAcG,eAAe,CACzBC,SAAU,SACVC,MAAO,QACPC,OAAQ,UACX,CAET,CAEQV,6CAA2C,CAC/C,IAAMD,EAAuB,CACzBtI,cAAekJ,EAAU,KAAKlJ,aAAa,EAC3CF,sBAAuBoJ,EAAU,KAAKpJ,qBAAqB,EAC3DC,2BAA4BmJ,EAAU,KAAKnJ,0BAA0B,GAGzE,YAAKoJ,gBAAe,EAEpB,KAAKrJ,sBAAwB,GAC7B,KAAKC,2BAA6B,GAE3BuI,CACX,CAEQG,sCAAsCH,EAA0C,CACpF,KAAKtI,cAAgBsI,EAAqBtI,cAC1C,KAAKF,sBAAwBwI,EAAqBxI,sBAClD,KAAKC,2BAA6BuI,EAAqBvI,0BAC3D,CAEQoJ,iBAAe,CACnBC,OAAOC,QAAQ,KAAKrJ,aAAa,EAAEsJ,QAASC,GAAqD,CAC7FA,EAAa,CAAC,EAAEnF,YAAc,EAClC,CAAC,CACL,CAEOoF,aAAazB,EAAkB,CAClC,GAAIA,GAAU0B,uBAAuBzB,OACjC,MAAO,CAAC,WAAY,KAAKpH,SAAU,GAAGmH,EAAS7F,IAAI,aAAc6F,EAASzH,GAAI,cAAeyH,EAAS0B,sBAAsB,CAAC,EAAEnJ,EAAE,CAGzI,CAMAoJ,yBAAyB3B,EAAkB,CACvC,OAAOA,GAAU0B,wBAAwB,CAAC,GAAGE,cAAc,CAAC,CAChE,CAMAC,4BAA4B7B,EAAkB,CAC1C,OAAOA,EAAS0B,wBAAwB,CAAC,GAAKnH,MAClD,CAKA8E,yCAAuC,CACnC,IAAM3H,EAAO,IAAIoK,GACjBpK,EAAKa,GAAK,KAAKd,aAAaC,MAAMa,GAClCb,EAAKqK,uBAAyB,KAAKtK,aAAaC,MAAMqK,uBACtDrK,EAAKsK,qBAAuB,KAAKvK,aAAaC,MAAMsK,qBACpDtK,EAAKuK,OAAS,KAAKxK,aAAaC,MAAMuK,OACtC,KAAKnH,qCAAuCpD,CAChD,CAEQ6H,8BAA4B,CAChC,OAAI,KAAK1H,WAAa,KAAKkG,WAChB,GAEP,KAAKtG,aAAaC,MAAMqK,wBAA0B,KAAKtK,YAAYC,KAAKsK,qBACjE,KAAKnF,kBAAkBqF,IAAG,EAAG9C,QAAQ,KAAK3H,YAAYC,KAAKqK,sBAAsB,EAErF,EACX,CAEQzC,6BAA2B,CAC/B,OAAI,KAAKzH,WAAa,KAAKkG,WAChB,GAEP,KAAKtG,aAAaC,MAAMqK,wBAA0B,KAAKtK,YAAYC,KAAKsK,qBACjE,KAAKnF,kBAAkBqF,IAAG,EAAGzC,SAAS,KAAKhI,YAAYC,KAAKsK,oBAAoB,EAEpF,EACX,CAEQ/C,iBAAiBD,EAA8C,CACnE,IAAM/G,EAA2D,CAAA,EACjE,QAAW+H,KAAY,KAAKvI,aAAaqI,WAAa,CAAA,EAAI,CACtD,GAAIE,EAASzH,KAAOgC,OAAW,CAC3B,KAAK8C,aAAa8E,MAAM,qDAAsD,CAAEC,mBAAoBpC,EAASqC,eAAeC,KAAK,CAAE,EACnI,IAAMC,EAAe,qDACrBC,EAAiB,IAAI7D,MAAM4D,CAAY,EAAG,CACtCE,MAAO,CACHzC,SAAAA,GAEP,EACD,QACJ,CAEA,GAAM,CAAE0C,eAAAA,EAAgBC,gBAAAA,CAAe,EAAK,KAAKC,mCAAmC5C,CAAQ,EAE5F/H,EAAc+H,EAASzH,EAAE,EAAI,CACzBsK,KAAMC,GAAQ9C,EAAS7F,IAAI,EAC3BkC,YAAa,GACb0G,eAAgB,KAAKC,8BAA8BhD,EAASzH,GAAIyG,CAAoB,EACpFiE,mBAAoB,KAAKC,kCAAkClD,EAASzH,GAAIyG,CAAoB,EAC5FmE,WAAYT,EACZC,gBAAiBA,EAEjBnI,WAAY,KAAKmH,yBAAyB3B,CAAQ,EAClDpF,cAAe,KAAKiH,4BAA4B7B,CAAQ,EACxDvG,uBAAwB,GACxBM,gCAAiCiG,EAAS7F,OAASoD,EAAalD,aAAe,CAAC,CAAE2F,EAAiCjG,gCAE3H,CACA,OAAO9B,CACX,CAEQ+K,8BAA8BI,EAAoBpE,EAA8C,CACpG,GAAKA,GAIL,QAAWqE,KAAgC,KAAKvL,yBAAyBwL,0BACrE,GAAI/E,OAAO8E,CAA4B,IAAMD,EACzC,OAAO,KAAKtL,wBAAwBwL,0BAA0BD,CAA4B,EAKtG,CAEQE,8BAA8BH,EAAmB,CACrD,GAAIA,IAAe7I,OACf,OAGJ,IAAMiJ,EAA6B,KAAK1L,yBAAyB2L,eAAeC,gCAC5EC,EAEJ,QAAWC,KAAOJ,EACd,GAAII,KAAOJ,GAA8BA,EAA2BI,CAAG,EAAER,aAAeA,EAAY,CAChGO,EAAiBH,EAA2BI,CAAG,EAC/C,KACJ,CAGJ,OAAOD,CACX,CAEAvK,yBAAyBgK,EAAmB,CACxC,GAAIA,IAAe7I,OAAW,CAC1B,KAAK8C,aAAa8E,MAAM,iDAAiD,EACzE,IAAMI,EAAe,+DACrBC,EAAiB,IAAI7D,MAAM4D,CAAY,EAAG,CACtCE,MAAO,CACHW,WAAAA,GAEP,EAED,MACJ,CAEA,KAAKnL,cAAcmL,CAAU,EAAE3J,uBAAyB,CAAC,KAAKxB,cAAcmL,CAAU,EAAE3J,sBAC5F,CAEQoK,iDAAiDd,EAAyBe,EAAmB7B,EAAe,CAEhH,GAD+B6B,IAAavJ,QAAawI,IAAmBxI,OAExE,OAAOwJ,EAA2ChB,EAAkBe,EAAU7B,CAAM,CAI5F,CAEQ+B,gCAAgCC,EAAwBhC,EAAe,CAC3E,OAAIgC,EAAOC,gBAAkB3J,OAClBwJ,EAA2CE,EAAOC,cAAgB,IAAKjC,CAAM,EAGjF,KAAK4B,iDAAiDI,EAAOlB,eAAgBkB,EAAOH,SAAU7B,CAAM,CAC/G,CAKQkC,qCAAqCf,EAAqBpE,EAA4DiD,EAAe,CACzI,GAAImB,IAAe7I,OACf,OAGJ,IAAM6J,EAAYpF,GAAsBvH,aAAaqI,WAAWuE,KAAMrE,GAAaA,EAASzH,KAAO6K,CAAU,GAAGgB,UAC1GrB,EAAiB,KAAKC,8BAA8BI,EAAYpE,CAAoB,EAE1F,OAAO,KAAK6E,iDAAiDd,EAAgBqB,EAAWnC,CAAM,CAClG,CAEAiB,kCAAkCE,EAAqBpE,EAA0D,CAC7G,IAAMiF,EAAS,KAAKV,8BAA8BH,CAAU,EACtDnB,EAAS,KAAKnK,yBAAyBL,aAAaC,MAAMuK,OAEhE,OAAIgC,IAAW1J,OACJ,KAAK4J,qCAAqCf,EAAYpE,EAAsBiD,CAAM,EAGtF,KAAK+B,gCAAgCC,EAAQhC,CAAM,CAC9D,CAEAW,mCAAmC5C,EAAkB,CACjD,IAAMpF,EAAgBoF,EAAS0B,sBAAuB,CAAC,EAEjDuC,EAASK,GAAsC1J,EADzB,EAC2D,EAGjF2J,EAAiBC,GAAuBxE,EAAUpF,EAAeqJ,EADpD,EACsE,EAEzF,MAAO,CACHvB,eAAgB+B,GAAkBR,EAAQM,CAAc,EACxD5B,gBAAiB+B,GAAmBT,EAAQM,CAAc,EAElE,CAEAjI,uBAAuBkF,EAAuC,CAC1D,MAAO,IAAOA,EAAcnF,YAAc,CAACmF,EAAcnF,WAC7D,CAEmByG,QAAUA,8CAhapBrG,EAA0B,2BAA1BA,EAA0BkI,UAAA,CAAA,CAAA,gCAAA,CAAA,EAAAC,OAAA,CAAAnN,YAAA,cAAAqE,eAAA,gBAAA,EAAA+I,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,KAAA,oBAAA,EAAA,CAAA,KAAA,oBAAA,EAAA,MAAA,cAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,eAAA,uCAAA,EAAA,CAAA,eAAA,2BAAA,EAAA,CAAA,KAAA,0BAAA,EAAA,MAAA,YAAA,UAAA,UAAA,EAAA,OAAA,EAAA,CAAA,EAAA,QAAA,eAAA,aAAA,EAAA,CAAA,eAAA,4DAAA,EAAA,CAAA,EAAA,OAAA,cAAA,cAAA,EAAA,CAAA,KAAA,+BAAA,EAAA,MAAA,EAAA,CAAA,EAAA,uBAAA,wBAAA,6BAAA,gBAAA,WAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,yBAAA,gBAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,QAAA,WAAA,eAAA,kBAAA,EAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,MAAA,OAAA,YAAA,EAAA,UAAA,YAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,eAAA,8DAAA,EAAA,QAAA,aAAA,KAAA,EAAA,CAAA,EAAA,MAAA,YAAA,EAAA,QAAA,IAAA,EAAA,CAAA,EAAA,OAAA,YAAA,EAAA,aAAA,QAAA,wBAAA,EAAA,CAAA,EAAA,OAAA,YAAA,EAAA,aAAA,eAAA,QAAA,yBAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,aAAA,eAAA,EAAA,CAAA,eAAA,gDAAA,EAAA,MAAA,EAAA,CAAA,EAAA,WAAA,aAAA,yBAAA,4BAAA,EAAA,CAAA,EAAA,WAAA,aAAA,aAAA,yBAAA,4BAAA,EAAA,CAAA,EAAA,oBAAA,OAAA,aAAA,kBAAA,EAAA,CAAA,EAAA,aAAA,WAAA,yBAAA,4BAAA,EAAA,CAAA,EAAA,OAAA,OAAA,OAAA,EAAA,WAAA,gBAAA,SAAA,OAAA,SAAA,EAAA,CAAA,EAAA,WAAA,gBAAA,aAAA,YAAA,OAAA,4BAAA,mBAAA,aAAA,6BAAA,gBAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IC1FvC9N,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,IAAA,EACID,EAAA,EAAA;SAAA,EAAAyE,EAAA,CAAA,EACIzE,EAAA,CAAA,8BAEJA,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EAAiE2B,EAAA,QAAA,UAAA,CAAA,OAASoM,EAAA7E,SAAA,CAAU,CAAA,EAChFnJ,EAAA,EAAA;aAAA,EAAAE,EAAA,GAAA,UAAA,CAAA,EACAF,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,OAAA,CAAA,EACJF,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;CAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;CAAA,EAAAmC,EAAA,GAAA8L,GAAA,EAAA,CAAA,EAA6C,GAAAC,GAAA,EAAA,CAAA,EAKpB,GAAAC,GAAA,EAAA,CAAA,EAS0E,GAAAC,GAAA,EAAA,CAAA,EAiBnGlO,EAAA,GAAA,KAAA,CAAA,EACAF,EAAA,GAAA;CAAA,EAAAqO,EAAA,GAAAC,GAAA,GAAA,GAAA,KAAA,KAAAC,CAAA,EA6JAtO,EAAA,GAAA,SAAA,CAAA,EAA8C2B,EAAA,QAAA,UAAA,CAAA,OAASoM,EAAAvE,sBAAA,CAAuB,CAAA,EAC1EzJ,EAAA,GAAA;KAAA,EAAAE,EAAA,GAAA,UAAA,CAAA,EACAF,EAAA,GAAA;KAAA,EAAAC,EAAA,GAAA,MAAA,EAAMD,EAAA,EAAA,2BAAmFG,EAAA,EAC7FH,EAAA,GAAA;CAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;CAAA,SAzMYI,EAAA,CAAA,EAAAa,EAAA;cAAAC,EAAA,EAAA,EAAA,yCAAA,EAAA;SAAA,EAGSd,EAAA,CAAA,EAAAC,EAAA,OAAA2N,EAAAvH,OAAA,EAKrBrG,EAAA,CAAA,EAAAsC,EAAAsL,EAAAzN,aAAA,CAAAyN,EAAAzN,YAAA4D,UAAA,GAAA,EAAA,EAKA/D,EAAA,EAAAsC,EAAAsL,EAAAzN,aAAA,MAAAyN,EAAAzN,YAAAC,KAAA,GAAA,EAAA,EASAJ,EAAA,EAAAsC,EAAAsL,EAAAzN,aAAAyN,EAAAzN,YAAAqI,YAAAoF,EAAAzN,YAAAC,MAAA,MAAAwN,EAAAzN,YAAAC,KAAAuK,SAAAiD,EAAApN,wBAAA,GAAA,EAAA,EAWAR,EAAA,EAAAsC,EAAAsL,EAAAxK,oBAAA,GAAA,EAAA,EAOApD,EAAA,CAAA,EAAAoO,EAAAR,EAAAzN,aAAA,KAAA,KAAAyN,EAAAzN,YAAAqI,SAAA,EA8JaxI,EAAA,CAAA,EAAAC,EAAA,OAAA2N,EAAAtH,SAAA,EACHtG,EAAA,CAAA,EAAAa,EAAA,QAAAC,EAAA,GAAA,GAAA,4CAAA,EAAA,OAAA,kBDpIFuN,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,CAAoB,EAAAC,OAAA,CAAA,ybAAA,wrFAAA,mQAAA,CAAA,CAAA,SAGfpK,CAA0B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "ctx_r0", "exam", "moduleNumber", "courseName", "examiner", "title", "\u0275\u0275textInterpolate4", "\u0275\u0275pipeBind2", "startDate", "examEndDate", "\u0275\u0275textInterpolate2", "\u0275\u0275property", "studentExam", "\u0275\u0275template", "ExamGeneralInformationComponent_Conditional_14_Conditional_1_Template", "ExamGeneralInformationComponent_Conditional_14_Conditional_2_Template", "ExamGeneralInformationComponent_Conditional_14_Conditional_3_Template", "\u0275\u0275conditional", "isExamOverMultipleDays", "endDate", "workingTime", "examMaxPoints", "numberOfExercisesInExam", "ExamGeneralInformationComponent_Conditional_15_Conditional_1_Template", "ExamGeneralInformationComponent_Conditional_15_Conditional_2_Template", "examStudentReviewStart", "examStudentReviewEnd", "ExamGeneralInformationComponent_Conditional_16_Conditional_9_Template", "ExamGeneralInformationComponent_Conditional_16_Conditional_10_Template", "ExamGeneralInformationComponent_Conditional_16_Conditional_11_Template", "ExamGeneralInformationComponent_Conditional_16_Conditional_12_Template", "reviewIsOpen", "user", "name", "ExamGeneralInformationComponent_Conditional_18_Conditional_12_Template", "ExamGeneralInformationComponent_Conditional_18_Conditional_13_Template", "currentDate", "submitted", "submissionDate", "startedDate", "ExamGeneralInformationComponent", "displayOnExamCover", "normalWorkingTime", "additionalWorkingTime", "isTestExam", "ngOnChanges", "endTime", "examWorkingTime", "getAdditionalWorkingTime", "testExam", "dayjs", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ExamGeneralInformationComponent_Conditional_2_Template", "ExamGeneralInformationComponent_Conditional_9_Template", "ExamGeneralInformationComponent_Conditional_10_Template", "ExamGeneralInformationComponent_Conditional_11_Template", "ExamGeneralInformationComponent_Conditional_12_Template", "ExamGeneralInformationComponent_Conditional_13_Template", "ExamGeneralInformationComponent_Conditional_14_Template", "ExamGeneralInformationComponent_Conditional_15_Template", "ExamGeneralInformationComponent_Conditional_16_Template", "ExamGeneralInformationComponent_Conditional_17_Template", "ExamGeneralInformationComponent_Conditional_18_Template", "ended", "TranslateDirective", "StudentExamWorkingTimeComponent", "TestExamWorkingTimeComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "ArtemisDurationFromSecondsPipe", "styles", "CollapsibleCardComponent", "isCardContentCollapsed", "toggleCollapse", "faAngleRight", "selectors", "inputs", "ngContentSelectors", "_c1", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275listener", "\u0275\u0275projection", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275classProp", "\u0275\u0275property", "FaIconComponent", "NgbCollapse", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r2", "exerciseInfos", "exercise_r2", "id", "icon", "\u0275\u0275textInterpolate", "exerciseService", "isIncludedInScore", "includedInOverallScore", "IncludedInOverallScore", "INCLUDED_AS_BONUS", "maxPoints", "\u0275\u0275classMap", "colorClass", "\u0275\u0275textInterpolate1", "achievedPercentage", "bonusPoints", "\u0275\u0275template", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_26_Conditional_3_Template", "\u0275\u0275conditional", "undefined", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "scrollToExercise", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_8_Template", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_13_Template", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_19_Template", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_23_Template", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_24_Template", "ExamResultOverviewComponent_Conditional_0_For_35_Conditional_26_Template", "\u0275\u0275classProp", "NOT_INCLUDED", "\u0275\u0275pureFunction2", "_c0", "\u0275$index_58_r4", "type", "tmp_16_0", "exerciseGroup", "title", "showIncludedInScoreColumn", "tmp_18_0", "studentExamWithGrade", "achievedPointsPerExercise", "maxBonusPoints", "hasPassed", "overallAchievedPercentageRoundedByCourseSettings", "\u0275\u0275pipeBind2", "_c1", "overallAchievedPoints", "studentResult", "gradeWithBonus", "bonusStrategy", "_c2", "bonusGrade", "bonusFromTitle", "overallGrade", "finalGrade", "isCollapsed", "toggleCollapse", "faAward", "tmp_6_0", "ExamResultOverviewComponent_Conditional_0_Conditional_72_Conditional_16_Template", "faClipboard", "grade", "isBonusGradingKeyDisplayed", "ExamResultOverviewComponent_Conditional_0_Conditional_22_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_29_Template", "\u0275\u0275repeaterCreate", "ExamResultOverviewComponent_Conditional_0_For_35_Template", "\u0275\u0275repeaterTrackByIdentity", "ExamResultOverviewComponent_Conditional_0_Conditional_43_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_52_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_53_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_55_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_63_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_64_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_65_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_67_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_68_Template", "ExamResultOverviewComponent_Conditional_0_Conditional_72_Template", "\u0275\u0275repeater", "studentExam", "exercises", "overallScoreAchieved", "gradingScaleExists", "ExamResultOverviewComponent", "serverDateService", "inject", "ArtemisServerDateService", "ExerciseService", "changeDetector", "ChangeDetectorRef", "BonusStrategy", "isGradingKeyCollapsed", "isBonusGradingKeyCollapsed", "isTestRun", "isBonus", "faChevronRight", "showResultOverview", "ngOnInit", "areResultsPublished", "setExamGrade", "updateLocalVariables", "ngOnChanges", "isExamResultPublished", "exam", "hasAtLeastOneResult", "containsExerciseThatIsNotIncludedCompletely", "getOverallAchievedPoints", "getOverallAchievedPercentageRoundedByCourseSettings", "sumExerciseScores", "reduce", "exerciseScoreSum", "exercise", "achievedPoints", "overallPointsAchieved", "summedAchievedExerciseScorePercentage", "roundScorePercentSpecifiedByCourseSettings", "course", "summedPercentages", "numberOfExercises", "Object", "entries", "forEach", "exerciseInfo", "INCLUDED_COMPLETELY", "gradeType", "GradeType", "BONUS", "detectChanges", "getMaxNormalAndBonusPointsSum", "maxAchievableBonusPoints", "exerciseId", "searchedId", "targetElement", "document", "getElementById", "scrollIntoView", "behavior", "block", "inline", "errorMessage", "captureException", "Error", "extra", "length", "some", "studentParticipations", "results", "resultOverviewSection", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ExamResultOverviewComponent_Conditional_0_Template", "TranslateDirective", "CollapsibleCardComponent", "NgClass", "FaIconComponent", "NoDataComponent", "GradingKeyTableComponent", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exerciseInfo", "icon", "colorClass", "resultIconClass", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275classMap", "\u0275\u0275textInterpolate1", "achievedPercentage", "\u0275\u0275template", "ExamResultSummaryExerciseCardHeaderComponent_Conditional_11_Conditional_6_Template", "ExamResultSummaryExerciseCardHeaderComponent_Conditional_11_Conditional_7_Template", "\u0275\u0275textInterpolate3", "achievedPoints", "exercise", "maxPoints", "\u0275\u0275pipeBind1", "\u0275\u0275conditional", "undefined", "\u0275\u0275textInterpolate2", "ExamResultSummaryExerciseCardHeaderComponent", "index", "resultsPublished", "SUBMISSION_TYPE_ILLEGAL", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "ExamResultSummaryExerciseCardHeaderComponent_Conditional_6_Template", "ExamResultSummaryExerciseCardHeaderComponent_Conditional_11_Template", "ExamResultSummaryExerciseCardHeaderComponent_Conditional_12_Template", "ExamResultSummaryExerciseCardHeaderComponent_Conditional_15_Template", "id", "type", "exerciseGroup", "title", "studentParticipations", "submissions", "FaIconComponent", "NgClass", "TranslateDirective", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "studentParticipations", "id", "expandProblemStatement", "isAfterResultsArePublished", "undefined", "submission", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "TextExamSummaryComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "TextExamSummaryComponent_Conditional_2_Template", "TextExamSummaryComponent_Conditional_3_Template", "\u0275\u0275conditional", "length", "TextEditorComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "studentParticipations", "id", "isPrinting", "expandProblemStatement", "isAfterResultsArePublished", "undefined", "submission", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "ModelingExamSummaryComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ModelingExamSummaryComponent_Conditional_2_Template", "ModelingExamSummaryComponent_Conditional_3_Template", "\u0275\u0275conditional", "length", "ModelingSubmissionComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "\u0275$index_11_r3", "\u0275\u0275property", "question_r2", "ctx_r3", "selectedAnswerOptions", "get", "id", "resultsPublished", "showMissingResultsNotice", "quizParticipation", "quizQuestions", "result", "getScoreForQuizQuestion", "dragAndDropMappings", "shortAnswerSubmittedTexts", "\u0275\u0275elementStart", "\u0275\u0275template", "QuizExamSummaryComponent_Conditional_0_For_5_Conditional_3_Template", "QuizExamSummaryComponent_Conditional_0_For_5_Conditional_4_Template", "QuizExamSummaryComponent_Conditional_0_For_5_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275conditional", "type", "MULTIPLE_CHOICE", "DRAG_AND_DROP", "SHORT_ANSWER", "QuizExamSummaryComponent_Conditional_0_Conditional_3_Template", "\u0275\u0275repeaterCreate", "QuizExamSummaryComponent_Conditional_0_For_5_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "QuizExamSummaryComponent", "serverDateService", "inject", "ArtemisServerDateService", "QuizQuestionType", "Map", "submission", "exam", "ngOnChanges", "updateViewFromSubmission", "studentParticipations", "length", "results", "undefined", "forEach", "question", "submittedAnswer", "submittedAnswers", "find", "answer", "quizQuestion", "selectedOptions", "set", "mappings", "submittedTexts", "captureException", "quizQuestionId", "scoreInPoints", "roundValueSpecifiedByCourseSettings", "course", "publishResultsDate", "dayjs", "isBefore", "now", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "QuizExamSummaryComponent_Conditional_0_Template", "TranslateDirective", "MultipleChoiceQuestionComponent", "DragAndDropQuestionComponent", "ShortAnswerQuestionComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exercise", "studentParticipations", "id", "expandProblemStatement", "isAfterResultsArePublished", "undefined", "submission", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "FileUploadExamSummaryComponent", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "FileUploadExamSummaryComponent_Conditional_2_Template", "FileUploadExamSummaryComponent_Conditional_3_Template", "\u0275\u0275conditional", "length", "FileUploadSubmissionComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "commitUrl", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate1", "commitHash", "\u0275\u0275pipeBind1", "feedbackComponentParameters", "exercise", "result", "tmp_5_0", "exerciseType", "undefined", "ExerciseType", "PROGRAMMING", "latestDueDate", "messageKey", "tmp_8_0", "showMissingAutomaticFeedbackInformation", "isPrinting", "\u0275\u0275template", "ProgrammingExamSummaryComponent_Conditional_25_Conditional_1_Template", "ProgrammingExamSummaryComponent_Conditional_25_Conditional_2_Template", "\u0275\u0275conditional", "submission", "participation", "instructorView", "tmp_3_0", "results", "exam", "isTestRun", "ProgrammingExamSummaryComponent", "exerciseService", "inject", "ExerciseService", "exerciseCacheService", "ExerciseCacheService", "optional", "profileService", "ProfileService", "router", "Router", "isAfterStudentReviewStart", "resultsPublished", "isAfterResultsArePublished", "AssessmentType", "ProgrammingExercise", "routerLink", "localVCEnabled", "isInCourseManagement", "ngOnInit", "url", "slice", "includes", "isBuilding", "missingResultInfo", "MissingResultInformation", "NONE", "templateStatus", "evaluateTemplateStatus", "prepareFeedbackComponentParameters", "latestIndividualEndDate", "updateCommitUrl", "getProfileInfo", "subscribe", "profileInfo", "commitHashURLTemplate", "createCommitUrl", "projectKey", "activeProfiles", "PROFILE_LOCALVC", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementContainerStart", "ProgrammingExamSummaryComponent_Conditional_10_Template", "ProgrammingExamSummaryComponent_Conditional_20_Template", "ProgrammingExamSummaryComponent_Conditional_21_Template", "ProgrammingExamSummaryComponent_Conditional_22_Template", "ProgrammingExamSummaryComponent_Conditional_25_Template", "ProgrammingExamSummaryComponent_Conditional_31_Template", "ProgrammingExamSummaryComponent_Conditional_35_Template", "\u0275\u0275pureFunction1", "_c0", "userIndependentRepositoryUri", "\u0275\u0275pureFunction2", "_c1", "id", "\u0275\u0275pureFunction3", "_c2", "problemStatement", "assessmentType", "SEMI_AUTOMATIC", "allowComplaintsForAutomaticAssessments", "TranslateDirective", "CodeButtonComponent", "FeedbackComponent", "ProgrammingExerciseInstructionComponent", "ComplaintsStudentViewComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "studentExam", "exam", "isBeforeStudentReviewEnd", "isAfterStudentReviewStart", "isTestRun", "studentExamGradeInfoDTO", "isGradingKeyCollapsed", "isBonusGradingKeyCollapsed", "exerciseInfos", "faInfoCircle", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "plagiarismCaseInfos", "exercise_r2", "id", "verdict", "PlagiarismVerdict", "NO_PLAGIARISM", "\u0275\u0275pureFunction2", "_c0", "courseId", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "toggleShowSampleSolution", "\u0275\u0275template", "ExamResultSummaryComponent_For_24_Conditional_17_Conditional_2_Conditional_5_Template", "ExamResultSummaryComponent_For_24_Conditional_17_Conditional_2_Conditional_6_Template", "\u0275\u0275classMap", "displayExampleSolution", "faEyeSlash", "faEye", "\u0275\u0275conditional", "\u0275\u0275propertyInterpolate", "ExamResultSummaryComponent_For_24_Conditional_17_Conditional_3_Conditional_3_Template", "releaseTestsWithExampleSolution", "ExamResultSummaryComponent_For_24_Conditional_17_Conditional_1_Template", "ExamResultSummaryComponent_For_24_Conditional_17_Conditional_2_Template", "ExamResultSummaryComponent_For_24_Conditional_17_Conditional_3_Template", "type", "QUIZ", "PROGRAMMING", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_3_Conditional_3_Template", "undefined", "submission", "expandProblemStatement", "resultsArePublished", "isPrinting", "participation", "results", "examWithOnlyIdAndStudentReviewPeriod", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Conditional_1_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Case_2_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Case_3_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Case_4_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Case_5_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Conditional_7_Template", "submitted", "tmp_15_0", "TEXT", "MODELING", "FILE_UPLOAD", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Conditional_1_Template", "\u0275\u0275elementContainerStart", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_3_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Conditional_4_Template", "instructorView", "ExamResultSummaryComponent_For_24_Conditional_21_Conditional_2_Template", "ExamResultSummaryComponent_For_24_Conditional_21_Conditional_3_Template", "ExamResultSummaryComponent_For_24_Conditional_16_Template", "ExamResultSummaryComponent_For_24_Conditional_17_Template", "ExamResultSummaryComponent_For_24_Conditional_20_Template", "ExamResultSummaryComponent_For_24_Conditional_21_Template", "isCollapsed", "toggleCollapseExercise", "\u0275$index_64_r4", "exampleSolutionPublished", "ExamResultSummaryComponent", "route", "inject", "ActivatedRoute", "serverDateService", "ArtemisServerDateService", "themeService", "ThemeService", "examParticipationService", "ExamParticipationService", "plagiarismCasesService", "PlagiarismCasesService", "alertService", "AlertService", "ExerciseType", "AssessmentType", "IncludedInOverallScore", "faFolderOpen", "faPrint", "faArrowUp", "_studentExam", "tryLoadPlagiarismCaseInfosForStudent", "isTestExam", "testRunConduction", "testExamConduction", "ngOnInit", "snapshot", "url", "toString", "testExam", "Number", "paramMap", "get", "parent", "Error", "user", "isExamResultPublished", "loadStudentExamGradeInfoForSummary", "subscribe", "studentExamWithGrade", "getExerciseInfos", "exampleSolutionPublicationDate", "dayjs", "isAfter", "setExamWithOnlyIdAndStudentReviewPeriod", "getIsBeforeStudentReviewEnd", "getIsAfterStudentReviewStart", "publishResultsDate", "isBefore", "endDate", "endDateWithTimeExtension", "add", "exerciseIds", "exercises", "map", "exercise", "length", "getPlagiarismCaseInfosForStudent", "res", "body", "printPDF", "__async", "stateBeforeResetting", "expandExercisesAndGradingKeysBeforePrinting", "print", "resetExpandingExercisesAndGradingKeys", "scrollToOverviewOrTop", "targetElement", "document", "getElementById", "scrollIntoView", "behavior", "block", "inline", "cloneDeep", "expandExercises", "Object", "entries", "forEach", "exerciseInfo", "generateLink", "studentParticipations", "getSubmissionForExercise", "submissions", "getParticipationForExercise", "Exam", "examStudentReviewStart", "examStudentReviewEnd", "course", "now", "error", "exerciseGroupTitle", "exerciseGroup", "title", "errorMessage", "captureException", "extra", "textColorClass", "resultIconClass", "getTextColorAndIconClassByExercise", "icon", "getIcon", "achievedPoints", "getPointsByExerciseIdFromExam", "achievedPercentage", "getAchievedPercentageByExerciseId", "colorClass", "exerciseId", "achievedPointsPerExerciseKey", "achievedPointsPerExercise", "getExerciseResultByExerciseId", "exerciseGroupResultMapping", "studentResult", "exerciseGroupIdToExerciseResult", "exerciseResult", "key", "calculateAchievedPercentageFromScoreAndMaxPoints", "maxScore", "roundScorePercentSpecifiedByCourseSettings", "getAchievedPercentageFromResult", "result", "achievedScore", "getAchievedPercentageFromExamResults", "maxPoints", "find", "getLatestResultOfStudentParticipation", "templateStatus", "evaluateTemplateStatus", "getTextColorClass", "getResultIconClass", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "ExamResultSummaryComponent_Conditional_17_Template", "ExamResultSummaryComponent_Conditional_18_Template", "ExamResultSummaryComponent_Conditional_19_Template", "ExamResultSummaryComponent_Conditional_20_Template", "\u0275\u0275repeaterCreate", "ExamResultSummaryComponent_For_24_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "FaIconComponent", "TranslateDirective", "ExamGeneralInformationComponent", "ExamResultOverviewComponent", "CollapsibleCardComponent", "ExamResultSummaryExerciseCardHeaderComponent", "NgClass", "RouterLink", "ProgrammingExerciseExampleSolutionRepoDownloadComponent", "NgbTooltip", "ExampleSolutionComponent", "TextExamSummaryComponent", "ModelingExamSummaryComponent", "QuizExamSummaryComponent", "FileUploadExamSummaryComponent", "ComplaintsStudentViewComponent", "ProgrammingExamSummaryComponent", "ArtemisTranslatePipe", "styles"]
}
