{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/http/file.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ProgrammingLanguage, ProjectType } from 'app/entities/programming/programming-exercise.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileService {\r\n    private http = inject(HttpClient);\r\n    private resourceUrl = 'api/core/files';\r\n\r\n    /**\r\n     * Fetches the template file for the given programming language\r\n     * @param {ProgrammingLanguage} language\r\n     * @param {ProjectType} projectType (if available)\r\n     * @returns json test file\r\n     */\r\n    getTemplateFile(language: ProgrammingLanguage, projectType?: ProjectType): Observable<string> {\r\n        const urlParts: string[] = [language];\r\n        if (projectType) {\r\n            urlParts.push(projectType);\r\n        }\r\n        return this.http.get<string>(`${this.resourceUrl}/templates/` + urlParts.join('/'), { responseType: 'text' as 'json' });\r\n    }\r\n\r\n    /**\r\n     * Fetches the file from the given path and returns it as a File object with a unique file name.\r\n     * @param filePath path of the file\r\n     * @param mapOfFiles optional map to check if the generated file name already exists\r\n     */\r\n    async getFile(filePath: string, mapOfFiles?: Map<string, { path?: string; file: File }>): Promise<File> {\r\n        const blob = await lastValueFrom(this.http.get(filePath, { responseType: 'blob' }));\r\n        const file = new File([blob], this.getUniqueFileName(this.getExtension(filePath), mapOfFiles));\r\n        return Promise.resolve(file);\r\n    }\r\n\r\n    /**\r\n     * Fetches the template code of conduct\r\n     * @returns markdown file\r\n     */\r\n    getTemplateCodeOfConduct(): Observable<HttpResponse<string>> {\r\n        return this.http.get<string>(`${this.resourceUrl}/templates/code-of-conduct`, { observe: 'response', responseType: 'text' as 'json' });\r\n    }\r\n\r\n    /**\r\n     * Downloads the file from the provided downloadUrl.\r\n     *\r\n     * @param downloadUrl url that is stored in the attachment model\r\n     */\r\n    downloadFile(downloadUrl: string) {\r\n        const downloadUrlComponents = downloadUrl.split('/');\r\n        // take the last element\r\n        const fileName = downloadUrlComponents.pop()!;\r\n        const restOfUrl = downloadUrlComponents.join('/');\r\n        const normalizedDownloadUrl = restOfUrl + '/' + encodeURIComponent(fileName);\r\n        const newWindow = window.open('about:blank');\r\n        newWindow!.location.href = normalizedDownloadUrl;\r\n        return newWindow;\r\n    }\r\n\r\n    /**\r\n     * Downloads the file from the provided downloadUrl and the attachment name\r\n     *\r\n     * @param downloadUrl url that is stored in the attachment model\r\n     * @param downloadName the name given to the attachment\r\n     */\r\n    downloadFileByAttachmentName(downloadUrl: string, downloadName: string) {\r\n        const normalizedDownloadUrl = this.createAttachmentFileUrl(downloadUrl, downloadName, true);\r\n        const newWindow = window.open('about:blank');\r\n        newWindow!.location.href = normalizedDownloadUrl;\r\n        return newWindow;\r\n    }\r\n\r\n    /**\r\n     * Creates the URL to download a attachment file\r\n     *\r\n     * @param downloadUrl url that is stored in the attachment model\r\n     * @param downloadName the name given to the attachment\r\n     * @param encodeName whether or not to encode the downloadName\r\n     */\r\n    createAttachmentFileUrl(downloadUrl: string, downloadName: string, encodeName: boolean) {\r\n        const downloadUrlComponents = downloadUrl.split('/');\r\n        // take the last element\r\n        const extension = downloadUrlComponents.pop()!.split('.').pop();\r\n        const restOfUrl = downloadUrlComponents.join('/');\r\n        const encodedDownloadName = encodeName ? encodeURIComponent(downloadName + '.' + extension) : downloadName + '.' + extension;\r\n        return restOfUrl + '/' + encodedDownloadName;\r\n    }\r\n\r\n    /**\r\n     * Downloads the merged PDF file.\r\n     *\r\n     * @param lectureId the id of the lecture\r\n     */\r\n    downloadMergedFile(lectureId: number): Observable<HttpResponse<Blob>> {\r\n        return this.http.get(`${this.resourceUrl}/attachments/lecture/${lectureId}/merge-pdf`, {\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the file extension of the given filename.\r\n     *\r\n     * @param filename the filename\r\n     */\r\n    getExtension(filename: string): string {\r\n        return filename.split('.').pop()!;\r\n    }\r\n\r\n    /**\r\n     * Returns a unique file name with the given extension.\r\n     *\r\n     * @param extension the file extension to add\r\n     * @param mapOfFiles optional map to check if the generated file name already exists\r\n     */\r\n    getUniqueFileName(extension: string, mapOfFiles?: Map<string, { path?: string; file: File }>): string {\r\n        let name;\r\n        do {\r\n            name = uuid() + '.' + extension;\r\n        } while (mapOfFiles && mapOfFiles.has(name));\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Removes the prefix from the file name, and replaces underscore with spaces\r\n     * @param link\r\n     */\r\n    replaceAttachmentPrefixAndUnderscores(link: string): string {\r\n        return link.replace(/AttachmentUnit_\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-\\d{3}_/, '').replace(/_/g, ' ');\r\n    }\r\n}\r\n"],
  "mappings": "gLASA,IAAaA,GAAW,IAAA,CAAlB,MAAOA,CAAW,CACZC,KAAOC,EAAOC,CAAU,EACxBC,YAAc,iBAQtBC,gBAAgBC,EAA+BC,EAAyB,CACpE,IAAMC,EAAqB,CAACF,CAAQ,EACpC,OAAIC,GACAC,EAASC,KAAKF,CAAW,EAEtB,KAAKN,KAAKS,IAAY,GAAG,KAAKN,WAAW,cAAgBI,EAASG,KAAK,GAAG,EAAG,CAAEC,aAAc,MAAgB,CAAE,CAC1H,CAOMC,QAAQC,EAAkBC,EAAuD,QAAAC,EAAA,sBACnF,IAAMC,EAAO,MAAMC,EAAc,KAAKjB,KAAKS,IAAII,EAAU,CAAEF,aAAc,MAAM,CAAE,CAAC,EAC5EO,EAAO,IAAIC,KAAK,CAACH,CAAI,EAAG,KAAKI,kBAAkB,KAAKC,aAAaR,CAAQ,EAAGC,CAAU,CAAC,EAC7F,OAAOQ,QAAQC,QAAQL,CAAI,CAC/B,GAMAM,0BAAwB,CACpB,OAAO,KAAKxB,KAAKS,IAAY,GAAG,KAAKN,WAAW,6BAA8B,CAAEsB,QAAS,WAAYd,aAAc,MAAgB,CAAE,CACzI,CAOAe,aAAaC,EAAmB,CAC5B,IAAMC,EAAwBD,EAAYE,MAAM,GAAG,EAE7CC,EAAWF,EAAsBG,IAAG,EAEpCC,EADYJ,EAAsBlB,KAAK,GAAG,EACN,IAAMuB,mBAAmBH,CAAQ,EACrEI,EAAYC,OAAOC,KAAK,aAAa,EAC3CF,OAAAA,EAAWG,SAASC,KAAON,EACpBE,CACX,CAQAK,6BAA6BZ,EAAqBa,EAAoB,CAClE,IAAMR,EAAwB,KAAKS,wBAAwBd,EAAaa,EAAc,EAAI,EACpFN,EAAYC,OAAOC,KAAK,aAAa,EAC3CF,OAAAA,EAAWG,SAASC,KAAON,EACpBE,CACX,CASAO,wBAAwBd,EAAqBa,EAAsBE,EAAmB,CAClF,IAAMd,EAAwBD,EAAYE,MAAM,GAAG,EAE7Cc,EAAYf,EAAsBG,IAAG,EAAIF,MAAM,GAAG,EAAEE,IAAG,EACvDa,EAAYhB,EAAsBlB,KAAK,GAAG,EAC1CmC,EAAsBH,EAAaT,mBAAmBO,EAAe,IAAMG,CAAS,EAAIH,EAAe,IAAMG,EACnH,OAAOC,EAAY,IAAMC,CAC7B,CAOAC,mBAAmBC,EAAiB,CAChC,OAAO,KAAK/C,KAAKS,IAAI,GAAG,KAAKN,WAAW,wBAAwB4C,CAAS,aAAc,CACnFtB,QAAS,WACTd,aAAc,OACjB,CACL,CAOAU,aAAa2B,EAAgB,CACzB,OAAOA,EAASnB,MAAM,GAAG,EAAEE,IAAG,CAClC,CAQAX,kBAAkBuB,EAAmB7B,EAAuD,CACxF,IAAImC,EACJ,GACIA,EAAOC,EAAI,EAAK,IAAMP,QACjB7B,GAAcA,EAAWqC,IAAIF,CAAI,GAC1C,OAAOA,CACX,CAMAG,sCAAsCC,EAAY,CAC9C,OAAOA,EAAKC,QAAQ,4DAA6D,EAAE,EAAEA,QAAQ,KAAM,GAAG,CAC1G,4CA3HSvD,EAAW,6BAAXA,EAAWwD,QAAXxD,EAAWyD,UAAAC,WADE,MAAM,CAAA,SACnB1D,CAAW,GAAA",
  "names": ["FileService", "http", "inject", "HttpClient", "resourceUrl", "getTemplateFile", "language", "projectType", "urlParts", "push", "get", "join", "responseType", "getFile", "filePath", "mapOfFiles", "__async", "blob", "lastValueFrom", "file", "File", "getUniqueFileName", "getExtension", "Promise", "resolve", "getTemplateCodeOfConduct", "observe", "downloadFile", "downloadUrl", "downloadUrlComponents", "split", "fileName", "pop", "normalizedDownloadUrl", "encodeURIComponent", "newWindow", "window", "open", "location", "href", "downloadFileByAttachmentName", "downloadName", "createAttachmentFileUrl", "encodeName", "extension", "restOfUrl", "encodedDownloadName", "downloadMergedFile", "lectureId", "filename", "name", "uuid", "has", "replaceAttachmentPrefixAndUnderscores", "link", "replace", "factory", "\u0275fac", "providedIn"]
}
