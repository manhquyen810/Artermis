{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/file-upload/manage/file-upload-exercise.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { ExerciseServicable, ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\r\n\r\nexport type EntityResponseType = HttpResponse<FileUploadExercise>;\r\nexport type EntityArrayResponseType = HttpResponse<FileUploadExercise[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileUploadExerciseService implements ExerciseServicable<FileUploadExercise> {\r\n    private http = inject(HttpClient);\r\n    private exerciseService = inject(ExerciseService);\r\n\r\n    private resourceUrl = 'api/fileupload/file-upload-exercises';\r\n\r\n    /**\r\n     * Sends request to create new file upload exercise\r\n     * @param fileUploadExercise that will be sent to the server\r\n     */\r\n    create(fileUploadExercise: FileUploadExercise): Observable<EntityResponseType> {\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(fileUploadExercise);\r\n        copy = FileUploadExerciseService.formatFilePattern(copy);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .post<FileUploadExercise>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Sends request to update file upload exercise on the server\r\n     * @param fileUploadExercise that we want to update to\r\n     * @param req request options passed to the server\r\n     */\r\n    update(fileUploadExercise: FileUploadExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(fileUploadExercise);\r\n        copy = FileUploadExerciseService.formatFilePattern(copy);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .put<FileUploadExercise>(`${this.resourceUrl}/${fileUploadExercise.id!}`, copy, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Sends request to get exercise by its id\r\n     * @param exerciseId id of the exercise\r\n     */\r\n    find(exerciseId: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<FileUploadExercise>(`${this.resourceUrl}/${exerciseId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Sends request to get all available file upload exercises\r\n     * @param req request options passed to the server\r\n     */\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<FileUploadExercise[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.exerciseService.processExerciseEntityArrayResponse(res)));\r\n    }\r\n\r\n    /**\r\n     * Sends request to delete file upload exercise by its id\r\n     * @param exerciseId id of the exercise\r\n     */\r\n    delete(exerciseId: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete(`${this.resourceUrl}/${exerciseId}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Re-evaluates and updates a file upload exercise.\r\n     *\r\n     * @param fileUploadExercise that should be updated of type {FileUploadExercise}\r\n     * @param req optional request options\r\n     */\r\n    reevaluateAndUpdate(fileUploadExercise: FileUploadExercise, req?: any): Observable<EntityResponseType> {\r\n        const options = createRequestOption(req);\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(fileUploadExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .put<FileUploadExercise>(`${this.resourceUrl}/${fileUploadExercise.id}/re-evaluate`, copy, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n\r\n    private static formatFilePattern(fileUploadExercise: FileUploadExercise): FileUploadExercise {\r\n        fileUploadExercise.filePattern = fileUploadExercise.filePattern!.replace(/\\s/g, '').toLowerCase();\r\n        return fileUploadExercise;\r\n    }\r\n\r\n    /**\r\n     * Imports a file upload exercise by cloning the entity itself plus example solutions and example submissions\r\n     *\r\n     * @param adaptedSourceFileUploadExercise The exercise that should be imported, including adapted values for the\r\n     * new exercise. E.g. with another title than the original exercise. Old values that should get discarded\r\n     * (like the old ID) will be handled by the server.\r\n     */\r\n    import(adaptedSourceFileUploadExercise: FileUploadExercise) {\r\n        let copy = ExerciseService.convertExerciseDatesFromClient(adaptedSourceFileUploadExercise);\r\n        copy = ExerciseService.setBonusPointsConstrainedByIncludedInOverallScore(copy);\r\n        copy.categories = ExerciseService.stringifyExerciseCategories(copy);\r\n        return this.http\r\n            .post<FileUploadExercise>(`${this.resourceUrl}/import/${adaptedSourceFileUploadExercise.id}`, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.exerciseService.processExerciseEntityResponse(res)));\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["FileUploadExerciseService", "http", "inject", "HttpClient", "exerciseService", "ExerciseService", "resourceUrl", "create", "fileUploadExercise", "copy", "convertExerciseDatesFromClient", "formatFilePattern", "setBonusPointsConstrainedByIncludedInOverallScore", "categories", "stringifyExerciseCategories", "post", "observe", "pipe", "map", "res", "processExerciseEntityResponse", "update", "req", "options", "createRequestOption", "put", "id", "params", "find", "exerciseId", "get", "query", "processExerciseEntityArrayResponse", "delete", "reevaluateAndUpdate", "filePattern", "replace", "toLowerCase", "import", "adaptedSourceFileUploadExercise", "factory", "\u0275fac", "providedIn"]
}
