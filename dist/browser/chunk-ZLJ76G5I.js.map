{
  "version": 3,
  "sources": ["src/main/webapp/app/lecture/lecture.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\r\nimport { convertDateFromClient, convertDateFromServer } from 'app/utils/date.utils';\r\nimport { EntityTitleService, EntityType } from 'app/shared/layouts/navbar/entity-title.service';\r\nimport { IngestionState } from 'app/entities/lecture-unit/attachmentUnit.model';\r\n\r\ntype EntityResponseType = HttpResponse<Lecture>;\r\ntype EntityArrayResponseType = HttpResponse<Lecture[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LectureService {\r\n    protected http = inject(HttpClient);\r\n    private accountService = inject(AccountService);\r\n    private lectureUnitService = inject(LectureUnitService);\r\n    private entityTitleService = inject(EntityTitleService);\r\n\r\n    public resourceUrl = 'api/lecture/lectures';\r\n\r\n    create(lecture: Lecture): Observable<EntityResponseType> {\r\n        const copy = this.convertLectureDatesFromClient(lecture);\r\n        return this.http.post<Lecture>(this.resourceUrl, copy, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.convertLectureResponseDatesFromServer(res)));\r\n    }\r\n\r\n    update(lecture: Lecture): Observable<EntityResponseType> {\r\n        const copy = this.convertLectureDatesFromClient(lecture);\r\n        return this.http.put<Lecture>(this.resourceUrl, copy, { observe: 'response' }).pipe(map((res: EntityResponseType) => this.convertLectureResponseDatesFromServer(res)));\r\n    }\r\n\r\n    find(lectureId: number): Observable<EntityResponseType> {\r\n        return this.http.get<Lecture>(`${this.resourceUrl}/${lectureId}`, { observe: 'response' }).pipe(\r\n            map((res: EntityResponseType) => {\r\n                this.convertLectureResponseDatesFromServer(res);\r\n                this.setAccessRightsLecture(res.body);\r\n                this.sendTitlesToEntityTitleService(res?.body);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    findWithDetails(lectureId: number): Observable<EntityResponseType> {\r\n        return this.http.get<Lecture>(`${this.resourceUrl}/${lectureId}/details`, { observe: 'response' }).pipe(\r\n            map((res: EntityResponseType) => {\r\n                if (res.body) {\r\n                    // insert an empty list to avoid additional calls in case the list is empty on the server (because then it would be undefined in the client)\r\n                    if (res.body.posts === undefined) {\r\n                        res.body.posts = [];\r\n                    }\r\n                }\r\n                this.convertLectureResponseDatesFromServer(res);\r\n                this.setAccessRightsLecture(res.body);\r\n                this.sendTitlesToEntityTitleService(res?.body);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    findWithDetailsWithSlides(lectureId: number): Observable<EntityResponseType> {\r\n        return this.http.get<Lecture>(`${this.resourceUrl}/${lectureId}/details-with-slides`, { observe: 'response' }).pipe(\r\n            map((res: EntityResponseType) => {\r\n                if (res.body) {\r\n                    // insert an empty list to avoid additional calls in case the list is empty on the server (because then it would be undefined in the client)\r\n                    if (res.body.posts === undefined) {\r\n                        res.body.posts = [];\r\n                    }\r\n                }\r\n                this.convertLectureResponseDatesFromServer(res);\r\n                this.setAccessRightsLecture(res.body);\r\n                this.sendTitlesToEntityTitleService(res?.body);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http.get<Lecture[]>(this.resourceUrl, { params: options, observe: 'response' }).pipe(\r\n            map((res: EntityArrayResponseType) => this.convertLectureArrayResponseDatesFromServer(res)),\r\n            tap((res: EntityArrayResponseType) => res?.body?.forEach(this.sendTitlesToEntityTitleService.bind(this))),\r\n        );\r\n    }\r\n\r\n    findAllByCourseId(courseId: number, withLectureUnits = false): Observable<EntityArrayResponseType> {\r\n        const params = new HttpParams().set('withLectureUnits', withLectureUnits ? '1' : '0');\r\n        return this.http\r\n            .get<Lecture[]>(`api/lecture/courses/${courseId}/lectures`, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                map((res: EntityArrayResponseType) => this.convertLectureArrayResponseDatesFromServer(res)),\r\n                map((res: EntityArrayResponseType) => this.setAccessRightsLectureEntityArrayResponseType(res)),\r\n                tap((res: EntityArrayResponseType) => res?.body?.forEach(this.sendTitlesToEntityTitleService.bind(this))),\r\n            );\r\n    }\r\n\r\n    findAllByCourseIdWithSlides(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.http\r\n            .get<Lecture[]>(`api/lecture/courses/${courseId}/lectures-with-slides`, {\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                map((res: EntityArrayResponseType) => this.convertLectureArrayResponseDatesFromServer(res)),\r\n                map((res: EntityArrayResponseType) => this.setAccessRightsLectureEntityArrayResponseType(res)),\r\n                tap((res: EntityArrayResponseType) => res?.body?.forEach(this.sendTitlesToEntityTitleService.bind(this))),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * triggers the ingestion of All the lectures inside the course specified or one lecture inside of the course\r\n     *\r\n     * @param courseId Course containing the lecture(s)\r\n     * @param lectureId The lecture to be ingested in pyris\r\n     */\r\n    ingestLecturesInPyris(courseId: number, lectureId?: number): Observable<HttpResponse<void>> {\r\n        let params = new HttpParams();\r\n        if (lectureId !== undefined) {\r\n            params = params.set('lectureId', lectureId.toString());\r\n        }\r\n        return this.http.post<void>(`api/lecture/courses/${courseId}/ingest`, null, {\r\n            params: params,\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch the ingestion state of all the lectures inside the course specified\r\n     * @param courseId\r\n     */\r\n    getIngestionState(courseId: number): Observable<HttpResponse<Record<number, IngestionState>>> {\r\n        return this.http.get<Record<number, IngestionState>>(`api/iris/courses/${courseId}/lectures/ingestion-state`, { observe: 'response' });\r\n    }\r\n    /**\r\n     * Clones and imports the lecture to the course\r\n     *\r\n     * @param courseId Course to import the lecture into\r\n     * @param lectureId Lecture to be cloned and imported\r\n     */\r\n    import(courseId: number, lectureId: number): Observable<EntityResponseType> {\r\n        const params = new HttpParams().set('courseId', courseId);\r\n        return this.http\r\n            .post<Lecture>(`${this.resourceUrl}/import/${lectureId}`, null, {\r\n                params,\r\n                observe: 'response',\r\n            })\r\n            .pipe(\r\n                map((res: EntityResponseType) => {\r\n                    this.convertLectureResponseDatesFromServer(res);\r\n                    this.setAccessRightsLecture(res.body);\r\n                    this.sendTitlesToEntityTitleService(res?.body);\r\n                    return res;\r\n                }),\r\n            );\r\n    }\r\n\r\n    delete(lectureId: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${lectureId}`, { observe: 'response' });\r\n    }\r\n\r\n    protected convertLectureDatesFromClient(lecture: Lecture): Lecture {\r\n        const copy: Lecture = Object.assign({}, lecture, {\r\n            startDate: convertDateFromClient(lecture.startDate),\r\n            endDate: convertDateFromClient(lecture.endDate),\r\n            visibleDate: convertDateFromClient(lecture.visibleDate),\r\n        });\r\n        if (copy.lectureUnits) {\r\n            copy.lectureUnits = this.lectureUnitService.convertLectureUnitArrayDatesFromClient(copy.lectureUnits);\r\n        }\r\n        if (copy.course) {\r\n            copy.course.exercises = undefined;\r\n            copy.course.lectures = undefined;\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    protected convertLectureResponseDatesFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.startDate = convertDateFromServer(res.body.startDate);\r\n            res.body.endDate = convertDateFromServer(res.body.endDate);\r\n            res.body.visibleDate = convertDateFromServer(res.body.visibleDate);\r\n            if (res.body.lectureUnits) {\r\n                res.body.lectureUnits = this.lectureUnitService.convertLectureUnitArrayDatesFromServer(res.body.lectureUnits);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertLectureArrayResponseDatesFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.map((lecture: Lecture) => {\r\n                return this.convertLectureDatesFromServer(lecture);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private setAccessRightsLectureEntityArrayResponseType<ERT extends EntityArrayResponseType>(res: ERT): ERT {\r\n        if (res.body) {\r\n            res.body.forEach((lecture: Lecture) => {\r\n                this.setAccessRightsLecture(lecture);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Besides the within the lecture included variables for access rights the access rights of the\r\n     * respective course are set as well.\r\n     *\r\n     * @param lecture for which the access rights shall be set\r\n     * @return lecture that with set access rights if the course was set\r\n     */\r\n    private setAccessRightsLecture(lecture: Lecture | null) {\r\n        if (lecture) {\r\n            if (lecture.course) {\r\n                this.accountService.setAccessRightsForCourse(lecture.course);\r\n                lecture.isAtLeastEditor = lecture.course.isAtLeastEditor;\r\n                lecture.isAtLeastInstructor = lecture.course.isAtLeastInstructor;\r\n            }\r\n        }\r\n        return lecture;\r\n    }\r\n\r\n    public convertLectureDatesFromServer(lecture?: Lecture) {\r\n        if (lecture) {\r\n            lecture.startDate = convertDateFromServer(lecture.startDate);\r\n            lecture.endDate = convertDateFromServer(lecture.endDate);\r\n            lecture.visibleDate = convertDateFromServer(lecture.visibleDate);\r\n            if (lecture.lectureUnits) {\r\n                lecture.lectureUnits = this.lectureUnitService.convertLectureUnitArrayDatesFromServer(lecture.lectureUnits);\r\n            }\r\n        }\r\n        return lecture;\r\n    }\r\n\r\n    public convertLectureArrayDatesFromServer(lectures?: Lecture[]) {\r\n        if (lectures) {\r\n            return lectures.map((lecture) => {\r\n                return this.convertLectureDatesFromServer(lecture)!;\r\n            });\r\n        }\r\n    }\r\n\r\n    private sendTitlesToEntityTitleService(lecture: Lecture | undefined | null) {\r\n        this.entityTitleService.setTitle(EntityType.LECTURE, [lecture?.id], lecture?.title);\r\n    }\r\n}\r\n"],
  "mappings": "gUAgBA,IAAaA,GAAc,IAAA,CAArB,MAAOA,CAAc,CACbC,KAAOC,EAAOC,CAAU,EAC1BC,eAAiBF,EAAOG,CAAc,EACtCC,mBAAqBJ,EAAOK,CAAkB,EAC9CC,mBAAqBN,EAAOO,CAAkB,EAE/CC,YAAc,uBAErBC,OAAOC,EAAgB,CACnB,IAAMC,EAAO,KAAKC,8BAA8BF,CAAO,EACvD,OAAO,KAAKX,KAAKc,KAAc,KAAKL,YAAaG,EAAM,CAAEG,QAAS,UAAU,CAAE,EAAEC,KAAKC,EAAKC,GAA4B,KAAKC,sCAAsCD,CAAG,CAAC,CAAC,CAC1K,CAEAE,OAAOT,EAAgB,CACnB,IAAMC,EAAO,KAAKC,8BAA8BF,CAAO,EACvD,OAAO,KAAKX,KAAKqB,IAAa,KAAKZ,YAAaG,EAAM,CAAEG,QAAS,UAAU,CAAE,EAAEC,KAAKC,EAAKC,GAA4B,KAAKC,sCAAsCD,CAAG,CAAC,CAAC,CACzK,CAEAI,KAAKC,EAAiB,CAClB,OAAO,KAAKvB,KAAKwB,IAAa,GAAG,KAAKf,WAAW,IAAIc,CAAS,GAAI,CAAER,QAAS,UAAU,CAAE,EAAEC,KACvFC,EAAKC,IACD,KAAKC,sCAAsCD,CAAG,EAC9C,KAAKO,uBAAuBP,EAAIQ,IAAI,EACpC,KAAKC,+BAA+BT,GAAKQ,IAAI,EACtCR,EACV,CAAC,CAEV,CAEAU,gBAAgBL,EAAiB,CAC7B,OAAO,KAAKvB,KAAKwB,IAAa,GAAG,KAAKf,WAAW,IAAIc,CAAS,WAAY,CAAER,QAAS,UAAU,CAAE,EAAEC,KAC/FC,EAAKC,IACGA,EAAIQ,MAEAR,EAAIQ,KAAKG,QAAUC,SACnBZ,EAAIQ,KAAKG,MAAQ,CAAA,GAGzB,KAAKV,sCAAsCD,CAAG,EAC9C,KAAKO,uBAAuBP,EAAIQ,IAAI,EACpC,KAAKC,+BAA+BT,GAAKQ,IAAI,EACtCR,EACV,CAAC,CAEV,CAEAa,0BAA0BR,EAAiB,CACvC,OAAO,KAAKvB,KAAKwB,IAAa,GAAG,KAAKf,WAAW,IAAIc,CAAS,uBAAwB,CAAER,QAAS,UAAU,CAAE,EAAEC,KAC3GC,EAAKC,IACGA,EAAIQ,MAEAR,EAAIQ,KAAKG,QAAUC,SACnBZ,EAAIQ,KAAKG,MAAQ,CAAA,GAGzB,KAAKV,sCAAsCD,CAAG,EAC9C,KAAKO,uBAAuBP,EAAIQ,IAAI,EACpC,KAAKC,+BAA+BT,GAAKQ,IAAI,EACtCR,EACV,CAAC,CAEV,CAEAc,MAAMC,EAAS,CACX,IAAMC,EAAUC,EAAoBF,CAAG,EACvC,OAAO,KAAKjC,KAAKwB,IAAe,KAAKf,YAAa,CAAE2B,OAAQF,EAASnB,QAAS,UAAU,CAAE,EAAEC,KACxFC,EAAKC,GAAiC,KAAKmB,2CAA2CnB,CAAG,CAAC,EAC1FoB,EAAKpB,GAAiCA,GAAKQ,MAAMa,QAAQ,KAAKZ,+BAA+Ba,KAAK,IAAI,CAAC,CAAC,CAAC,CAEjH,CAEAC,kBAAkBC,EAAkBC,EAAmB,GAAK,CACxD,IAAMP,EAAS,IAAIQ,EAAU,EAAGC,IAAI,mBAAoBF,EAAmB,IAAM,GAAG,EACpF,OAAO,KAAK3C,KACPwB,IAAe,uBAAuBkB,CAAQ,YAAa,CACxDN,OAAAA,EACArB,QAAS,WACZ,EACAC,KACGC,EAAKC,GAAiC,KAAKmB,2CAA2CnB,CAAG,CAAC,EAC1FD,EAAKC,GAAiC,KAAK4B,8CAA8C5B,CAAG,CAAC,EAC7FoB,EAAKpB,GAAiCA,GAAKQ,MAAMa,QAAQ,KAAKZ,+BAA+Ba,KAAK,IAAI,CAAC,CAAC,CAAC,CAErH,CAEAO,4BAA4BL,EAAgB,CACxC,OAAO,KAAK1C,KACPwB,IAAe,uBAAuBkB,CAAQ,wBAAyB,CACpE3B,QAAS,WACZ,EACAC,KACGC,EAAKC,GAAiC,KAAKmB,2CAA2CnB,CAAG,CAAC,EAC1FD,EAAKC,GAAiC,KAAK4B,8CAA8C5B,CAAG,CAAC,EAC7FoB,EAAKpB,GAAiCA,GAAKQ,MAAMa,QAAQ,KAAKZ,+BAA+Ba,KAAK,IAAI,CAAC,CAAC,CAAC,CAErH,CAQAQ,sBAAsBN,EAAkBnB,EAAkB,CACtD,IAAIa,EAAS,IAAIQ,EACjB,OAAIrB,IAAcO,SACdM,EAASA,EAAOS,IAAI,YAAatB,EAAU0B,SAAQ,CAAE,GAElD,KAAKjD,KAAKc,KAAW,uBAAuB4B,CAAQ,UAAW,KAAM,CACxEN,OAAQA,EACRrB,QAAS,WACZ,CACL,CAMAmC,kBAAkBR,EAAgB,CAC9B,OAAO,KAAK1C,KAAKwB,IAAoC,oBAAoBkB,CAAQ,4BAA6B,CAAE3B,QAAS,UAAU,CAAE,CACzI,CAOAoC,OAAOT,EAAkBnB,EAAiB,CACtC,IAAMa,EAAS,IAAIQ,EAAU,EAAGC,IAAI,WAAYH,CAAQ,EACxD,OAAO,KAAK1C,KACPc,KAAc,GAAG,KAAKL,WAAW,WAAWc,CAAS,GAAI,KAAM,CAC5Da,OAAAA,EACArB,QAAS,WACZ,EACAC,KACGC,EAAKC,IACD,KAAKC,sCAAsCD,CAAG,EAC9C,KAAKO,uBAAuBP,EAAIQ,IAAI,EACpC,KAAKC,+BAA+BT,GAAKQ,IAAI,EACtCR,EACV,CAAC,CAEd,CAEAkC,OAAO7B,EAAiB,CACpB,OAAO,KAAKvB,KAAKoD,OAAY,GAAG,KAAK3C,WAAW,IAAIc,CAAS,GAAI,CAAER,QAAS,UAAU,CAAE,CAC5F,CAEUF,8BAA8BF,EAAgB,CACpD,IAAMC,EAAgByC,OAAOC,OAAO,CAAA,EAAI3C,EAAS,CAC7C4C,UAAWC,EAAsB7C,EAAQ4C,SAAS,EAClDE,QAASD,EAAsB7C,EAAQ8C,OAAO,EAC9CC,YAAaF,EAAsB7C,EAAQ+C,WAAW,EACzD,EACD,OAAI9C,EAAK+C,eACL/C,EAAK+C,aAAe,KAAKtD,mBAAmBuD,uCAAuChD,EAAK+C,YAAY,GAEpG/C,EAAKiD,SACLjD,EAAKiD,OAAOC,UAAYhC,OACxBlB,EAAKiD,OAAOE,SAAWjC,QAEpBlB,CACX,CAEUO,sCAAsCD,EAAuB,CACnE,OAAIA,EAAIQ,OACJR,EAAIQ,KAAK6B,UAAYS,EAAsB9C,EAAIQ,KAAK6B,SAAS,EAC7DrC,EAAIQ,KAAK+B,QAAUO,EAAsB9C,EAAIQ,KAAK+B,OAAO,EACzDvC,EAAIQ,KAAKgC,YAAcM,EAAsB9C,EAAIQ,KAAKgC,WAAW,EAC7DxC,EAAIQ,KAAKiC,eACTzC,EAAIQ,KAAKiC,aAAe,KAAKtD,mBAAmB4D,uCAAuC/C,EAAIQ,KAAKiC,YAAY,IAG7GzC,CACX,CAEUmB,2CAA2CnB,EAA4B,CAC7E,OAAIA,EAAIQ,MACJR,EAAIQ,KAAKT,IAAKN,GACH,KAAKuD,8BAA8BvD,CAAO,CACpD,EAEEO,CACX,CAEQ4B,8CAAmF5B,EAAQ,CAC/F,OAAIA,EAAIQ,MACJR,EAAIQ,KAAKa,QAAS5B,GAAoB,CAClC,KAAKc,uBAAuBd,CAAO,CACvC,CAAC,EAEEO,CACX,CASQO,uBAAuBd,EAAuB,CAClD,OAAIA,GACIA,EAAQkD,SACR,KAAK1D,eAAegE,yBAAyBxD,EAAQkD,MAAM,EAC3DlD,EAAQyD,gBAAkBzD,EAAQkD,OAAOO,gBACzCzD,EAAQ0D,oBAAsB1D,EAAQkD,OAAOQ,qBAG9C1D,CACX,CAEOuD,8BAA8BvD,EAAiB,CAClD,OAAIA,IACAA,EAAQ4C,UAAYS,EAAsBrD,EAAQ4C,SAAS,EAC3D5C,EAAQ8C,QAAUO,EAAsBrD,EAAQ8C,OAAO,EACvD9C,EAAQ+C,YAAcM,EAAsBrD,EAAQ+C,WAAW,EAC3D/C,EAAQgD,eACRhD,EAAQgD,aAAe,KAAKtD,mBAAmB4D,uCAAuCtD,EAAQgD,YAAY,IAG3GhD,CACX,CAEO2D,mCAAmCP,EAAoB,CAC1D,GAAIA,EACA,OAAOA,EAAS9C,IAAKN,GACV,KAAKuD,8BAA8BvD,CAAO,CACpD,CAET,CAEQgB,+BAA+BhB,EAAmC,CACtE,KAAKJ,mBAAmBgE,SAASC,EAAWC,QAAS,CAAC9D,GAAS+D,EAAE,EAAG/D,GAASgE,KAAK,CACtF,4CA1OS5E,EAAc,6BAAdA,EAAc6E,QAAd7E,EAAc8E,UAAAC,WADD,MAAM,CAAA,SACnB/E,CAAc,GAAA",
  "names": ["LectureService", "http", "inject", "HttpClient", "accountService", "AccountService", "lectureUnitService", "LectureUnitService", "entityTitleService", "EntityTitleService", "resourceUrl", "create", "lecture", "copy", "convertLectureDatesFromClient", "post", "observe", "pipe", "map", "res", "convertLectureResponseDatesFromServer", "update", "put", "find", "lectureId", "get", "setAccessRightsLecture", "body", "sendTitlesToEntityTitleService", "findWithDetails", "posts", "undefined", "findWithDetailsWithSlides", "query", "req", "options", "createRequestOption", "params", "convertLectureArrayResponseDatesFromServer", "tap", "forEach", "bind", "findAllByCourseId", "courseId", "withLectureUnits", "HttpParams", "set", "setAccessRightsLectureEntityArrayResponseType", "findAllByCourseIdWithSlides", "ingestLecturesInPyris", "toString", "getIngestionState", "import", "delete", "Object", "assign", "startDate", "convertDateFromClient", "endDate", "visibleDate", "lectureUnits", "convertLectureUnitArrayDatesFromClient", "course", "exercises", "lectures", "convertDateFromServer", "convertLectureUnitArrayDatesFromServer", "convertLectureDatesFromServer", "setAccessRightsForCourse", "isAtLeastEditor", "isAtLeastInstructor", "convertLectureArrayDatesFromServer", "setTitle", "EntityType", "LECTURE", "id", "title", "factory", "\u0275fac", "providedIn"]
}
