{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/feature-toggle/feature-toggle.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { WebsocketService } from 'app/core/websocket/websocket.service';\r\nimport { distinctUntilChanged, map, tap } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * FeatureToggles\r\n * @readonly\r\n * @enum {string}\r\n */\r\nexport enum FeatureToggle {\r\n    ProgrammingExercises = 'ProgrammingExercises',\r\n    PlagiarismChecks = 'PlagiarismChecks',\r\n    Exports = 'Exports',\r\n    TutorialGroups = 'TutorialGroups',\r\n    LearningPaths = 'LearningPaths',\r\n    Science = 'Science',\r\n    StandardizedCompetencies = 'StandardizedCompetencies',\r\n    StudentCourseAnalyticsDashboard = 'StudentCourseAnalyticsDashboard',\r\n}\r\nexport type ActiveFeatureToggles = Array<FeatureToggle>;\r\n\r\nconst defaultActiveFeatureState: ActiveFeatureToggles = Object.values(FeatureToggle);\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeatureToggleService {\r\n    private websocketService = inject(WebsocketService);\r\n    private http = inject(HttpClient);\r\n\r\n    private readonly TOPIC = `/topic/management/feature-toggles`;\r\n    private subject: BehaviorSubject<ActiveFeatureToggles>;\r\n    private subscriptionInitialized = false;\r\n\r\n    constructor() {\r\n        this.subject = new BehaviorSubject<ActiveFeatureToggles>(defaultActiveFeatureState);\r\n    }\r\n\r\n    /**\r\n     * This method is only supposed to be called by the account service once the user is logged in!\r\n     */\r\n    public subscribeFeatureToggleUpdates() {\r\n        if (!this.subscriptionInitialized) {\r\n            this.websocketService.subscribe(this.TOPIC);\r\n            this.websocketService\r\n                .receive(this.TOPIC)\r\n                .pipe(tap((activeFeatures) => this.notifySubscribers(activeFeatures)))\r\n                .subscribe();\r\n            this.subscriptionInitialized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is only supposed to be called by the account service once the user is logged out!\r\n     */\r\n    public unsubscribeFeatureToggleUpdates() {\r\n        if (this.subscriptionInitialized) {\r\n            this.websocketService.unsubscribe(this.TOPIC);\r\n            this.subscriptionInitialized = false;\r\n        }\r\n    }\r\n\r\n    private notifySubscribers(activeFeatures: ActiveFeatureToggles) {\r\n        this.subject.next(activeFeatures);\r\n    }\r\n\r\n    /**\r\n     * Set the initial value of the feature toggles. Use with care as the set value will be sent to all subscribers!\r\n     * The feature toggle value updates are transmitted from the server to the client with a websocket,\r\n     * so there should be no reason to set the values manually, other than on initialization.\r\n     * @param activeFeatures\r\n     */\r\n    initializeFeatureToggles(activeFeatures: ActiveFeatureToggles) {\r\n        this.notifySubscribers(activeFeatures);\r\n    }\r\n\r\n    /**\r\n     * Getter method for the feature toggles as an observable.\r\n     */\r\n    getFeatureToggles() {\r\n        return this.subject.asObservable().pipe(distinctUntilChanged());\r\n    }\r\n\r\n    /**\r\n     * Getter method for the active features toggles as an observable.\r\n     * Will check that the passed feature is enabled\r\n     */\r\n    getFeatureToggleActive(feature: FeatureToggle) {\r\n        return this.getFeatureTogglesActive([feature]);\r\n    }\r\n\r\n    /**\r\n     * Getter method for the active features toggles as an observable.\r\n     * Will check that all passed features are enabled\r\n     */\r\n    getFeatureTogglesActive(features: FeatureToggle[]) {\r\n        return this.subject.asObservable().pipe(\r\n            map((activeFeatures) => features.every((feature) => activeFeatures.includes(feature))),\r\n            distinctUntilChanged(),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Setter method for the state of a feature toggle.\r\n     */\r\n    setFeatureToggleState(featureToggle: FeatureToggle, active: boolean) {\r\n        const url = '/api/core/admin/feature-toggle';\r\n        const toggleParam = { [featureToggle]: active };\r\n        return this.http.put(url, toggleParam);\r\n    }\r\n}\r\n"],
  "mappings": "8JAWA,IAAYA,EAAZ,SAAYA,EAAa,CACrBA,OAAAA,EAAA,qBAAA,uBACAA,EAAA,iBAAA,mBACAA,EAAA,QAAA,UACAA,EAAA,eAAA,iBACAA,EAAA,cAAA,gBACAA,EAAA,QAAA,UACAA,EAAA,yBAAA,2BACAA,EAAA,gCAAA,kCARQA,CASZ,EATYA,GAAa,CAAA,CAAA,EAYnBC,EAAkDC,OAAOC,OAAOH,CAAa,EAGtEI,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,iBAAmBC,EAAOC,CAAgB,EAC1CC,KAAOF,EAAOG,CAAU,EAEfC,MAAQ,oCACjBC,QACAC,wBAA0B,GAElCC,aAAA,CACI,KAAKF,QAAU,IAAIG,EAAsCb,CAAyB,CACtF,CAKOc,+BAA6B,CAC3B,KAAKH,0BACN,KAAKP,iBAAiBW,UAAU,KAAKN,KAAK,EAC1C,KAAKL,iBACAY,QAAQ,KAAKP,KAAK,EAClBQ,KAAKC,EAAKC,GAAmB,KAAKC,kBAAkBD,CAAc,CAAC,CAAC,EACpEJ,UAAS,EACd,KAAKJ,wBAA0B,GAEvC,CAKOU,iCAA+B,CAC9B,KAAKV,0BACL,KAAKP,iBAAiBkB,YAAY,KAAKb,KAAK,EAC5C,KAAKE,wBAA0B,GAEvC,CAEQS,kBAAkBD,EAAoC,CAC1D,KAAKT,QAAQa,KAAKJ,CAAc,CACpC,CAQAK,yBAAyBL,EAAoC,CACzD,KAAKC,kBAAkBD,CAAc,CACzC,CAKAM,mBAAiB,CACb,OAAO,KAAKf,QAAQgB,aAAY,EAAGT,KAAKU,EAAoB,CAAE,CAClE,CAMAC,uBAAuBC,EAAsB,CACzC,OAAO,KAAKC,wBAAwB,CAACD,CAAO,CAAC,CACjD,CAMAC,wBAAwBC,EAAyB,CAC7C,OAAO,KAAKrB,QAAQgB,aAAY,EAAGT,KAC/Be,EAAKb,GAAmBY,EAASE,MAAOJ,GAAYV,EAAee,SAASL,CAAO,CAAC,CAAC,EACrFF,EAAoB,CAAE,CAE9B,CAKAQ,sBAAsBC,EAA8BC,EAAe,CAC/D,IAAMC,EAAM,iCACNC,EAAc,CAAE,CAACH,CAAa,EAAGC,CAAM,EAC7C,OAAO,KAAK9B,KAAKiC,IAAIF,EAAKC,CAAW,CACzC,4CAnFSpC,EAAoB,6BAApBA,EAAoBsC,QAApBtC,EAAoBuC,UAAAC,WADP,MAAM,CAAA,SACnBxC,CAAoB,GAAA",
  "names": ["FeatureToggle", "defaultActiveFeatureState", "Object", "values", "FeatureToggleService", "websocketService", "inject", "WebsocketService", "http", "HttpClient", "TOPIC", "subject", "subscriptionInitialized", "constructor", "BehaviorSubject", "subscribeFeatureToggleUpdates", "subscribe", "receive", "pipe", "tap", "activeFeatures", "notifySubscribers", "unsubscribeFeatureToggleUpdates", "unsubscribe", "next", "initializeFeatureToggles", "getFeatureToggles", "asObservable", "distinctUntilChanged", "getFeatureToggleActive", "feature", "getFeatureTogglesActive", "features", "map", "every", "includes", "setFeatureToggleState", "featureToggle", "active", "url", "toggleParam", "put", "factory", "\u0275fac", "providedIn"]
}
