{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/qsharp/qsharp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  keywords: [\"namespace\", \"open\", \"import\", \"export\", \"as\", \"operation\", \"function\", \"body\", \"adjoint\", \"newtype\", \"struct\", \"controlled\", \"if\", \"elif\", \"else\", \"repeat\", \"until\", \"fixup\", \"for\", \"in\", \"while\", \"return\", \"fail\", \"within\", \"apply\", \"Adjoint\", \"Controlled\", \"Adj\", \"Ctl\", \"is\", \"self\", \"auto\", \"distribute\", \"invert\", \"intrinsic\", \"let\", \"set\", \"w/\", \"new\", \"not\", \"and\", \"or\", \"use\", \"borrow\", \"using\", \"borrowing\", \"mutable\", \"internal\"],\n  typeKeywords: [\"Unit\", \"Int\", \"BigInt\", \"Double\", \"Bool\", \"String\", \"Qubit\", \"Result\", \"Pauli\", \"Range\"],\n  invalidKeywords: [\"abstract\", \"base\", \"bool\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"checked\", \"class\", \"const\", \"continue\", \"decimal\", \"default\", \"delegate\", \"do\", \"double\", \"enum\", \"event\", \"explicit\", \"extern\", \"finally\", \"fixed\", \"float\", \"foreach\", \"goto\", \"implicit\", \"int\", \"interface\", \"lock\", \"long\", \"null\", \"object\", \"operator\", \"out\", \"override\", \"params\", \"private\", \"protected\", \"public\", \"readonly\", \"ref\", \"sbyte\", \"sealed\", \"short\", \"sizeof\", \"stackalloc\", \"static\", \"string\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"unit\", \"ulong\", \"unchecked\", \"unsafe\", \"ushort\", \"virtual\", \"void\", \"volatile\"],\n  constants: [\"true\", \"false\", \"PauliI\", \"PauliX\", \"PauliY\", \"PauliZ\", \"One\", \"Zero\"],\n  builtin: [\"X\", \"Y\", \"Z\", \"H\", \"HY\", \"S\", \"T\", \"SWAP\", \"CNOT\", \"CCNOT\", \"MultiX\", \"R\", \"RFrac\", \"Rx\", \"Ry\", \"Rz\", \"R1\", \"R1Frac\", \"Exp\", \"ExpFrac\", \"Measure\", \"M\", \"MultiM\", \"Message\", \"Length\", \"Assert\", \"AssertProb\", \"AssertEqual\"],\n  operators: [\"and=\", \"<-\", \"->\", \"*\", \"*=\", \"@\", \"!\", \"^\", \"^=\", \":\", \"::\", \".\", \"..\", \"==\", \"...\", \"=\", \"=>\", \">\", \">=\", \"<\", \"<=\", \"-\", \"-=\", \"!=\", \"or=\", \"%\", \"%=\", \"|\", \"+\", \"+=\", \"?\", \"/\", \"/=\", \"&&&\", \"&&&=\", \"^^^\", \"^^^=\", \">>>\", \">>>=\", \"<<<\", \"<<<=\", \"|||\", \"|||=\", \"~~~\", \"_\", \"w/\", \"w/=\"],\n  namespaceFollows: [\"namespace\", \"open\"],\n  importsFollows: [\"import\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n  escapes: /\\\\[\\s\\S]/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_$][\\w$]*/, {\n      cases: {\n        \"@namespaceFollows\": {\n          token: \"keyword.$0\",\n          next: \"@namespace\"\n        },\n        \"@importsFollows\": {\n          token: \"keyword.$0\",\n          next: \"@imports\"\n        },\n        \"@typeKeywords\": \"type\",\n        \"@keywords\": \"keyword\",\n        \"@constants\": \"constant\",\n        \"@builtin\": \"keyword\",\n        \"@invalidKeywords\": \"invalid\",\n        \"@default\": \"identifier\"\n      }\n    }],\n    // whitespace\n    {\n      include: \"@whitespace\"\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/\\d+/, \"number\"],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, \"delimiter\"],\n    // strings\n    //[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-terminated string\n    [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    namespace: [{\n      include: \"@whitespace\"\n    }, [/[A-Za-z]\\w*/, \"namespace\"], [/[\\.]/, \"delimiter\"], [\"\", \"\", \"@pop\"]],\n    imports: [{\n      include: \"@whitespace\"\n    }, [/[A-Za-z]\\w*(?=\\.)/, \"namespace\"], [/[A-Za-z]\\w*/, \"identifier\"], [/\\*/, \"wildcard\"], [/[\\.,]/, \"delimiter\"], [\"\", \"\", \"@pop\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/(\\/\\/).*/, \"comment\"]]\n  }\n};\nexport { conf, language };"],"mappings":"4BAQA,IAAIA,EAAO,CACT,SAAU,CACR,YAAa,IACf,EACA,SAAU,CAAC,CAAC,IAAK,GAAG,EAAG,CAAC,IAAK,GAAG,EAAG,CAAC,IAAK,GAAG,CAAC,EAC7C,iBAAkB,CAAC,CACjB,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,IACP,MAAO,CAAC,SAAU,SAAS,CAC7B,CAAC,EACD,iBAAkB,CAAC,CACjB,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,EAAG,CACD,KAAM,IACN,MAAO,GACT,CAAC,CACH,EACIC,EAAW,CAEb,SAAU,CAAC,YAAa,OAAQ,SAAU,SAAU,KAAM,YAAa,WAAY,OAAQ,UAAW,UAAW,SAAU,aAAc,KAAM,OAAQ,OAAQ,SAAU,QAAS,QAAS,MAAO,KAAM,QAAS,SAAU,OAAQ,SAAU,QAAS,UAAW,aAAc,MAAO,MAAO,KAAM,OAAQ,OAAQ,aAAc,SAAU,YAAa,MAAO,MAAO,KAAM,MAAO,MAAO,MAAO,KAAM,MAAO,SAAU,QAAS,YAAa,UAAW,UAAU,EACnc,aAAc,CAAC,OAAQ,MAAO,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,QAAS,OAAO,EACvG,gBAAiB,CAAC,WAAY,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,UAAW,QAAS,QAAS,WAAY,UAAW,UAAW,WAAY,KAAM,SAAU,OAAQ,QAAS,WAAY,SAAU,UAAW,QAAS,QAAS,UAAW,OAAQ,WAAY,MAAO,YAAa,OAAQ,OAAQ,OAAQ,SAAU,WAAY,MAAO,WAAY,SAAU,UAAW,YAAa,SAAU,WAAY,MAAO,QAAS,SAAU,QAAS,SAAU,aAAc,SAAU,SAAU,SAAU,OAAQ,QAAS,MAAO,SAAU,OAAQ,QAAS,YAAa,SAAU,SAAU,UAAW,OAAQ,UAAU,EAC7mB,UAAW,CAAC,OAAQ,QAAS,SAAU,SAAU,SAAU,SAAU,MAAO,MAAM,EAClF,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,OAAQ,OAAQ,QAAS,SAAU,IAAK,QAAS,KAAM,KAAM,KAAM,KAAM,SAAU,MAAO,UAAW,UAAW,IAAK,SAAU,UAAW,SAAU,SAAU,aAAc,aAAa,EACvO,UAAW,CAAC,OAAQ,KAAM,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,IAAK,KAAM,KAAK,EACzS,iBAAkB,CAAC,YAAa,MAAM,EACtC,eAAgB,CAAC,QAAQ,EACzB,QAAS,2BACT,QAAS,WAET,UAAW,CACT,KAAM,CAEN,CAAC,mBAAoB,CACnB,MAAO,CACL,oBAAqB,CACnB,MAAO,aACP,KAAM,YACR,EACA,kBAAmB,CACjB,MAAO,aACP,KAAM,UACR,EACA,gBAAiB,OACjB,YAAa,UACb,aAAc,WACd,WAAY,UACZ,mBAAoB,UACpB,WAAY,YACd,CACF,CAAC,EAED,CACE,QAAS,aACX,EAEA,CAAC,aAAc,WAAW,EAAG,CAAC,WAAY,CACxC,MAAO,CACL,aAAc,WACd,WAAY,EACd,CACF,CAAC,EAED,CAAC,2BAA4B,cAAc,EAAG,CAAC,MAAO,QAAQ,EAE9D,CAAC,QAAS,WAAW,EAGrB,CAAC,IAAK,CACJ,MAAO,eACP,QAAS,QACT,KAAM,SACR,CAAC,CAAC,EACF,OAAQ,CAAC,CAAC,UAAW,QAAQ,EAAG,CAAC,WAAY,eAAe,EAAG,CAAC,IAAK,CACnE,MAAO,eACP,QAAS,SACT,KAAM,MACR,CAAC,CAAC,EACF,UAAW,CAAC,CACV,QAAS,aACX,EAAG,CAAC,cAAe,WAAW,EAAG,CAAC,OAAQ,WAAW,EAAG,CAAC,GAAI,GAAI,MAAM,CAAC,EACxE,QAAS,CAAC,CACR,QAAS,aACX,EAAG,CAAC,oBAAqB,WAAW,EAAG,CAAC,cAAe,YAAY,EAAG,CAAC,KAAM,UAAU,EAAG,CAAC,QAAS,WAAW,EAAG,CAAC,GAAI,GAAI,MAAM,CAAC,EAClI,WAAY,CAAC,CAAC,aAAc,OAAO,EAAG,CAAC,WAAY,SAAS,CAAC,CAC/D,CACF","names":["conf","language"],"x_google_ignoreList":[0]}