{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/exercise-scores/exercise-scores-export-button.component.ts", "src/main/webapp/app/exercises/shared/exercise-scores/exercise-scores-export-button.component.html"],
  "sourcesContent": ["import { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { roundValueSpecifiedByCourseSettings, scrollToTopOfPage } from 'app/shared/util/utils';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\r\nimport { Exercise, ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { ResultService } from 'app/exercises/shared/result/result.service';\r\nimport { getTestCaseNamesFromResults, getTestCaseResults } from 'app/exercises/shared/result/result.utils';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\r\nimport { ResultWithPointsPerGradingCriterion } from 'app/entities/result-with-points-per-grading-criterion.model';\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport { download, generateCsv, mkConfig } from 'export-to-csv';\r\nimport { TestCaseResult } from 'app/entities/programming/test-case-result.model';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-scores-export-button',\r\n    templateUrl: './exercise-scores-export-button.component.html',\r\n    imports: [NgbDropdown, NgbDropdownToggle, FaIconComponent, TranslateDirective, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem, NgbTooltip, ArtemisTranslatePipe],\r\n})\r\nexport class ExerciseScoresExportButtonComponent implements OnInit {\r\n    private resultService = inject(ResultService);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() exercises: Exercise[] = []; // Used to export multiple scores together\r\n    @Input() exercise: Exercise | ProgrammingExercise;\r\n\r\n    isProgrammingExerciseResults = false;\r\n\r\n    // Icons\r\n    faDownload = faDownload;\r\n\r\n    ngOnInit(): void {\r\n        this.isProgrammingExerciseResults = this.exercises.concat(this.exercise).every((exercise) => exercise?.type === ExerciseType.PROGRAMMING);\r\n    }\r\n\r\n    /**\r\n     * Exports the exercise results as a CSV file.\r\n     * @param withTestCases parameter that includes test cases info in the exported CSV file\r\n     * @param withFeedback parameter including the feedback's full text in case of failed test case\r\n     */\r\n    exportResults(withTestCases: boolean, withFeedback: boolean) {\r\n        if (this.exercises.length === 0 && this.exercise !== undefined) {\r\n            this.exercises = this.exercises.concat(this.exercise);\r\n        }\r\n\r\n        this.exercises.forEach((exercise) => this.constructCSV(exercise, withTestCases, withFeedback));\r\n    }\r\n\r\n    /**\r\n     * Builds the CSV with results and triggers the download to the user for it.\r\n     * @param exercise for which the results should be exported.\r\n     * @param withTestCases optional parameter that includes test cases info in the exported CSV file\r\n     * @param withFeedback optional parameter including the feedback's full text in case of failed test case\r\n     */\r\n    private constructCSV(exercise: Exercise, withTestCases?: boolean, withFeedback?: boolean) {\r\n        this.resultService.getResultsWithPointsPerGradingCriterion(exercise).subscribe((data) => {\r\n            const results: ResultWithPointsPerGradingCriterion[] = data.body || [];\r\n            if (results.length === 0) {\r\n                this.alertService.warning(`artemisApp.exercise.export.results.emptyError`, { exercise: exercise.title });\r\n                scrollToTopOfPage();\r\n                return;\r\n            }\r\n            const isTeamExercise = !!(results[0].result.participation! as StudentParticipation).team;\r\n            const gradingCriteria: GradingCriterion[] = ExerciseScoresExportButtonComponent.sortedGradingCriteria(exercise);\r\n\r\n            let keys;\r\n            let rows;\r\n            if (withTestCases) {\r\n                const testCasesNames = getTestCaseNamesFromResults(results);\r\n                keys = ExerciseScoresRowBuilder.keys(exercise, isTeamExercise, gradingCriteria, testCasesNames);\r\n                rows = results.map((resultWithPoints) => {\r\n                    const studentParticipation = resultWithPoints.result.participation! as StudentParticipation;\r\n                    const testCaseResults = getTestCaseResults(resultWithPoints, testCasesNames, withFeedback);\r\n                    return new ExerciseScoresRowBuilder(exercise, gradingCriteria, studentParticipation, resultWithPoints, testCaseResults).build();\r\n                });\r\n            } else {\r\n                keys = ExerciseScoresRowBuilder.keys(exercise, isTeamExercise, gradingCriteria);\r\n                rows = results.map((resultWithPoints) => {\r\n                    const studentParticipation = resultWithPoints.result.participation! as StudentParticipation;\r\n                    return new ExerciseScoresRowBuilder(exercise, gradingCriteria, studentParticipation, resultWithPoints).build();\r\n                });\r\n            }\r\n            const fileNamePrefix = exercise.shortName ?? exercise.title?.split(/\\s+/).join('_');\r\n\r\n            if (withFeedback) {\r\n                ExerciseScoresExportButtonComponent.exportAsCsv(`${fileNamePrefix}-results-scores`, keys, rows, ',');\r\n            } else {\r\n                ExerciseScoresExportButtonComponent.exportAsCsv(`${fileNamePrefix}-results-scores`, keys, rows);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggers the download as CSV for the exercise results.\r\n     * @param filename The filename the results should be downloaded as.\r\n     * @param keys The column names in the CSV.\r\n     * @param rows The actual data rows in the CSV.\r\n     * @param fieldSeparator Optional parameter for exporting the CSV file using a custom separator symbol\r\n     */\r\n    private static exportAsCsv(filename: string, keys: string[], rows: ExerciseScoresRow[], fieldSeparator = ';') {\r\n        const options = {\r\n            fieldSeparator,\r\n            quoteStrings: true,\r\n            quoteCharacter: '\"',\r\n            decimalSeparator: 'locale',\r\n            showLabels: true,\r\n            showTitle: false,\r\n            filename,\r\n            useTextFile: false,\r\n            useBom: true,\r\n            columnHeaders: keys,\r\n        };\r\n\r\n        const csvExportConfig = mkConfig(options);\r\n        const csvData = generateCsv(csvExportConfig)(rows);\r\n        download(csvExportConfig)(csvData);\r\n    }\r\n\r\n    /**\r\n     * Sorts the list of grading criteria for the given exercise by title ascending.\r\n     * @param exercise which has a list of grading criteria.\r\n     */\r\n    private static sortedGradingCriteria(exercise: Exercise): GradingCriterion[] {\r\n        return (\r\n            exercise.gradingCriteria?.sort((crit1, crit2) => {\r\n                if (crit1.title < crit2.title) {\r\n                    return -1;\r\n                } else if (crit1.title > crit2.title) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }) || []\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * A data row in the CSV file.\r\n *\r\n * For a list of all possible keys see {@link ExerciseScoresRowBuilder.keys}.\r\n */\r\ntype ExerciseScoresRow = any;\r\n\r\nclass ExerciseScoresRowBuilder {\r\n    private readonly exercise: Exercise;\r\n    private readonly gradingCriteria: GradingCriterion[];\r\n    private readonly participation: StudentParticipation;\r\n    private readonly resultWithPoints: ResultWithPointsPerGradingCriterion;\r\n    private readonly testCaseResults?: TestCaseResult[];\r\n\r\n    private csvRow: ExerciseScoresRow = {};\r\n\r\n    constructor(\r\n        exercise: Exercise,\r\n        gradingCriteria: GradingCriterion[],\r\n        participation: StudentParticipation,\r\n        resultWithPoints: ResultWithPointsPerGradingCriterion,\r\n        testCaseResults?: TestCaseResult[],\r\n    ) {\r\n        this.exercise = exercise;\r\n        this.gradingCriteria = gradingCriteria;\r\n        this.participation = participation;\r\n        this.resultWithPoints = resultWithPoints;\r\n        this.testCaseResults = testCaseResults;\r\n    }\r\n\r\n    /**\r\n     * Builds the actual data row that should be exported as part of the CSV.\r\n     */\r\n    public build(): ExerciseScoresRow {\r\n        this.setName();\r\n\r\n        const score = roundValueSpecifiedByCourseSettings(this.resultWithPoints.result.score, getCourseFromExercise(this.exercise));\r\n        this.set('Score', score);\r\n        this.set('Points', this.resultWithPoints.totalPoints);\r\n\r\n        this.setGradingCriteriaPoints();\r\n        this.setProgrammingExerciseInformation();\r\n        this.setTeamInformation();\r\n\r\n        if (this.testCaseResults) {\r\n            this.setTestCaseResults();\r\n        }\r\n\r\n        return this.csvRow;\r\n    }\r\n\r\n    /**\r\n     * Stores the given value under the key in the row.\r\n     * @param key Which should be associated with the given value.\r\n     * @param value That should be placed in the row. Replaced by the empty string if undefined.\r\n     */\r\n    private set<T>(key: string, value: T) {\r\n        this.csvRow[key] = value ?? '';\r\n    }\r\n\r\n    /**\r\n     * Sets the student or team name information in the row.\r\n     */\r\n    private setName() {\r\n        if (this.participation.team) {\r\n            this.set('Team Name', this.participation.participantName);\r\n            this.set('Team Short Name', this.participation.participantIdentifier);\r\n        } else {\r\n            this.set('Name', this.participation.participantName);\r\n            this.set('Username', this.participation.participantIdentifier);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the points for each grading criterion in the row.\r\n     */\r\n    private setGradingCriteriaPoints() {\r\n        let unnamedCriterionIndex = 1;\r\n        this.gradingCriteria.forEach((criterion) => {\r\n            const pointsPerCriterion = this.resultWithPoints.pointsPerCriterion;\r\n            const points = pointsPerCriterion instanceof Map ? pointsPerCriterion.get(criterion.id!) || 0 : +(pointsPerCriterion[criterion.id!] || 0);\r\n            if (criterion.title) {\r\n                this.set(criterion.title, points);\r\n            } else {\r\n                this.set(`Unnamed Criterion ${unnamedCriterionIndex}`, points);\r\n                unnamedCriterionIndex += 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds information specific to programming exercises to the row.\r\n     */\r\n    private setProgrammingExerciseInformation() {\r\n        if (this.exercise.type === ExerciseType.PROGRAMMING) {\r\n            const repoLink = (this.participation as ProgrammingExerciseStudentParticipation).repositoryUri;\r\n            this.set('Repo Link', repoLink);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds information specific to a team participation to the row.\r\n     */\r\n    private setTeamInformation() {\r\n        if (this.participation.team) {\r\n            const students = `${this.participation.team?.students?.map((s) => s.name).join(', ')}`;\r\n            this.set('Students', students);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds information about each exercise's test case result.\r\n     */\r\n    private setTestCaseResults() {\r\n        this.testCaseResults!.forEach((testResult) => {\r\n            this.set(testResult.testName, testResult.testResult);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * CSV columns [alternative column name for team exercises]:\r\n     * - Name [Team Name]\r\n     * - Username [Team Short Name]\r\n     * - Score\r\n     * - Points\r\n     * - for each grading criterion `c` of the exercise: `c.title`\r\n     *   (sorted by title, contains the total points given in this grading category)\r\n     * - Repo Link (only for programming exercises)\r\n     * - Students (only for team exercises; comma-separated list of students in the team)\r\n     *\r\n     * @param exercise The exercise for which results should be exported.\r\n     * @param isTeamExercise True, if the students participate in teams in this exercise.\r\n     * @param gradingCriteria The grading criteria that can be used in this exercise.\r\n     * @param testCases Optional columns representing each exercise test case\r\n     */\r\n    public static keys(exercise: Exercise, isTeamExercise: boolean, gradingCriteria: GradingCriterion[], testCases?: string[]): Array<string> {\r\n        const columns = [];\r\n\r\n        if (isTeamExercise) {\r\n            columns.push('Team Name', 'Team Short Name');\r\n        } else {\r\n            columns.push('Name', 'Username');\r\n        }\r\n\r\n        columns.push('Score', 'Points');\r\n\r\n        let unnamedCriterionIndex = 1;\r\n        gradingCriteria.forEach((criterion) => {\r\n            if (criterion.title) {\r\n                columns.push(criterion.title);\r\n            } else {\r\n                columns.push(`Unnamed Criterion ${unnamedCriterionIndex}`);\r\n                unnamedCriterionIndex += 1;\r\n            }\r\n        });\r\n\r\n        if (exercise.type === ExerciseType.PROGRAMMING) {\r\n            columns.push('Repo Link');\r\n        }\r\n\r\n        if (isTeamExercise) {\r\n            columns.push('Students');\r\n        }\r\n\r\n        testCases?.forEach((testCase) => {\r\n            columns.push(testCase);\r\n        });\r\n\r\n        return columns;\r\n    }\r\n}\r\n", "@if (isProgrammingExerciseResults) {\r\n    <div ngbDropdown class=\"d-inline\">\r\n        <button id=\"export-results-dropdown\" class=\"btn btn-info btn-sm me-1\" ngbDropdownToggle>\r\n            <fa-icon [icon]=\"faDownload\" />\r\n            <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exercise.export.results.title\"></span>\r\n        </button>\r\n        <div ngbDropdownMenu=\"export-results-dropdown\">\r\n            <button ngbDropdownItem (click)=\"exportResults(false, false)\" jhiTranslate=\"artemisApp.exercise.export.results.withoutTestCases\"></button>\r\n            <button\r\n                ngbTooltip=\"{{ 'artemisApp.exercise.export.results.withTestCasesTooltip' | artemisTranslate }}\"\r\n                placement=\"left\"\r\n                ngbDropdownItem\r\n                (click)=\"exportResults(true, false)\"\r\n                jhiTranslate=\"artemisApp.exercise.export.results.withTestCases\"\r\n            ></button>\r\n            <button\r\n                ngbTooltip=\"{{ 'artemisApp.exercise.export.results.withTestCasesAndFeedbackTooltip' | artemisTranslate }}\"\r\n                placement=\"left\"\r\n                ngbDropdownItem\r\n                (click)=\"exportResults(true, true)\"\r\n                jhiTranslate=\"artemisApp.exercise.export.results.withTestCasesAndFeedback\"\r\n            >\r\n                With test cases<br />and feedback\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n@if (!isProgrammingExerciseResults) {\r\n    <button class=\"btn btn-info btn-sm me-1\" (click)=\"exportResults(false, false)\">\r\n        <fa-icon [icon]=\"faDownload\" />\r\n        <span class=\"d-none d-md-inline\" jhiTranslate=\"artemisApp.exercise.export.results.title\"></span>\r\n    </button>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "exportResults", "\u0275\u0275advance", "\u0275\u0275property", "faDownload", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "_r3", "ExerciseScoresExportButtonComponent", "resultService", "inject", "ResultService", "alertService", "AlertService", "exercises", "exercise", "isProgrammingExerciseResults", "ngOnInit", "concat", "every", "type", "ExerciseType", "PROGRAMMING", "withTestCases", "withFeedback", "length", "undefined", "forEach", "constructCSV", "getResultsWithPointsPerGradingCriterion", "subscribe", "data", "results", "body", "warning", "title", "scrollToTopOfPage", "isTeamExercise", "result", "participation", "team", "gradingCriteria", "sortedGradingCriteria", "keys", "rows", "testCasesNames", "getTestCaseNamesFromResults", "ExerciseScoresRowBuilder", "map", "resultWithPoints", "studentParticipation", "testCaseResults", "getTestCaseResults", "build", "fileNamePrefix", "shortName", "split", "join", "exportAsCsv", "filename", "fieldSeparator", "csvExportConfig", "mkConfig", "quoteStrings", "quoteCharacter", "decimalSeparator", "showLabels", "showTitle", "useTextFile", "useBom", "columnHeaders", "csvData", "generateCsv", "download", "sort", "crit1", "crit2", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ExerciseScoresExportButtonComponent_Conditional_0_Template", "ExerciseScoresExportButtonComponent_Conditional_1_Template", "\u0275\u0275conditional", "NgbDropdown", "NgbDropdownToggle", "FaIconComponent", "TranslateDirective", "NgbDropdownMenu", "NgbDropdownButtonItem", "NgbDropdownItem", "NgbTooltip", "ArtemisTranslatePipe", "encapsulation", "csvRow", "constructor", "setName", "score", "roundValueSpecifiedByCourseSettings", "getCourseFromExercise", "set", "totalPoints", "setGradingCriteriaPoints", "setProgrammingExerciseInformation", "setTeamInformation", "setTestCaseResults", "key", "value", "participantName", "participantIdentifier", "unnamedCriterionIndex", "criterion", "pointsPerCriterion", "points", "Map", "get", "id", "repoLink", "repositoryUri", "students", "s", "name", "testResult", "testName", "testCases", "columns", "push", "testCase"]
}
