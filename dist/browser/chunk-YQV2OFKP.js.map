{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/edit/edit-course-competency.component.ts"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { LectureService } from 'app/lecture/lecture.service';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { LectureUnitType } from 'app/entities/lecture-unit/lectureUnit.model';\r\n\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class EditCourseCompetencyComponent implements OnInit {\r\n    protected activatedRoute = inject(ActivatedRoute);\r\n    protected lectureService = inject(LectureService);\r\n    protected router = inject(Router);\r\n    protected alertService = inject(AlertService);\r\n\r\n    isLoading = false;\r\n    lecturesWithLectureUnits: Lecture[] = [];\r\n    courseId: number;\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.activatedRoute.parent?.parent?.paramMap\r\n            .pipe(\r\n                take(1),\r\n                switchMap((parentParams) => {\r\n                    this.courseId = Number(parentParams.get('courseId'));\r\n\r\n                    return this.lectureService.findAllByCourseId(this.courseId, true);\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (lecturesResult) => {\r\n                    if (lecturesResult.body) {\r\n                        this.lecturesWithLectureUnits = lecturesResult.body;\r\n                        for (const lecture of this.lecturesWithLectureUnits) {\r\n                            // server will send undefined instead of empty array, therefore we set it here as it is easier to handle\r\n                            if (!lecture.lectureUnits) {\r\n                                lecture.lectureUnits = [];\r\n                            } else {\r\n                                lecture.lectureUnits = lecture.lectureUnits.filter((lectureUnit) => lectureUnit.type !== LectureUnitType.EXERCISE);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n        // this.isLoading = false; is done in subclasses\r\n    }\r\n}\r\n"],
  "mappings": "+QAaA,IAAsBA,GAA6B,IAAA,CAA7C,MAAgBA,CAA6B,CACrCC,eAAiBC,EAAOC,CAAc,EACtCC,eAAiBF,EAAOG,CAAc,EACtCC,OAASJ,EAAOK,CAAM,EACtBC,aAAeN,EAAOO,CAAY,EAE5CC,UAAY,GACZC,yBAAsC,CAAA,EACtCC,SAEAC,UAAQ,CACJ,KAAKH,UAAY,GACjB,KAAKT,eAAea,QAAQA,QAAQC,SAC/BC,KACGC,EAAK,CAAC,EACNC,EAAWC,IACP,KAAKP,SAAWQ,OAAOD,EAAaE,IAAI,UAAU,CAAC,EAE5C,KAAKjB,eAAekB,kBAAkB,KAAKV,SAAU,EAAI,EACnE,CAAC,EAELW,UAAU,CACPC,KAAOC,GAAkB,CACrB,GAAIA,EAAeC,KAAM,CACrB,KAAKf,yBAA2Bc,EAAeC,KAC/C,QAAWC,KAAW,KAAKhB,yBAElBgB,EAAQC,aAGTD,EAAQC,aAAeD,EAAQC,aAAaC,OAAQC,GAAgBA,EAAYC,OAASC,EAAgBC,QAAQ,EAFjHN,EAAQC,aAAe,CAAA,CAKnC,CACJ,EACAM,MAAQC,GAA2BC,EAAQ,KAAK5B,aAAc2B,CAAG,EACpE,CAET,4CAtCkBnC,EAA6B,2BAA7BA,EAA6BqC,UAAA,CAAA,CAAA,cAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAA,EAAAC,cAAA,CAAA,CAAA,SAA7B3C,CAA6B,GAAA",
  "names": ["EditCourseCompetencyComponent", "activatedRoute", "inject", "ActivatedRoute", "lectureService", "LectureService", "router", "Router", "alertService", "AlertService", "isLoading", "lecturesWithLectureUnits", "courseId", "ngOnInit", "parent", "paramMap", "pipe", "take", "switchMap", "parentParams", "Number", "get", "findAllByCourseId", "subscribe", "next", "lecturesResult", "body", "lecture", "lectureUnits", "filter", "lectureUnit", "type", "LectureUnitType", "EXERCISE", "error", "res", "onError", "selectors", "decls", "vars", "template", "rf", "ctx", "encapsulation"]
}
