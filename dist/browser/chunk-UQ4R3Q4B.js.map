{
  "version": 3,
  "sources": ["src/main/webapp/app/core/user/admin-user.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { createRequestOption } from 'app/shared/util/request.util';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { UserFilter } from 'app/admin/user-management/user-management.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AdminUserService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/core/admin/users';\r\n\r\n    /**\r\n     * Create a user on the server.\r\n     * @param user The user to create.\r\n     * @return Observable<HttpResponse<User>> with the created user as body.\r\n     */\r\n    create(user: User): Observable<HttpResponse<User>> {\r\n        return this.http.post<User>(this.resourceUrl, user, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Import a list of users from ldap to artemis\r\n     * @param users The list of users to be imported.\r\n     * @return Observable<HttpResponse<User[]>> with not found Users\r\n     */\r\n    importAll(users: Partial<User>[]): Observable<HttpResponse<User[]>> {\r\n        return this.http.post<User[]>(`${this.resourceUrl}/import`, users, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Update a user on the server.\r\n     * @param user The user to update.\r\n     * @return Observable<HttpResponse<User>> with the updated user as body.\r\n     */\r\n    update(user: User): Observable<HttpResponse<User>> {\r\n        return this.http.put<User>(this.resourceUrl, user, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Submit a query for a given request.\r\n     * @param req The query request\r\n     * @param filter additional filter\r\n     * @return Observable<HttpResponse<User[]>> with the list of users that match the query as body.\r\n     */\r\n    query(req?: any, filter?: UserFilter): Observable<HttpResponse<User[]>> {\r\n        let options = createRequestOption(req);\r\n        if (filter) {\r\n            options = filter.adjustOptions(options);\r\n        }\r\n        return this.http.get<User[]>(this.resourceUrl, { params: options, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Submit a query for all logins of not enrolled users (no admins)\r\n     * @return Observable<HttpResponse<string[]>> with the sorted list of all logins of not enrolled users\r\n     */\r\n    queryNotEnrolledUsers(): Observable<HttpResponse<string[]>> {\r\n        return this.http.get<string[]>(`${this.resourceUrl}/not-enrolled`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Find a user on the server.\r\n     * @param login The login of the user to find.\r\n     * @return Observable<HttpResponse<User>> with the found user as body.\r\n     */\r\n    findUser(login: string): Observable<User> {\r\n        return this.http.get<User>(`${this.resourceUrl}/${login}`);\r\n    }\r\n\r\n    /**\r\n     * Call the LDAP server to update the info of a user on the server.\r\n     * @param userId The id of the user to be updated from the LDAP server.\r\n     * @return Observable<User> with the updated user as body.\r\n     */\r\n    syncLdap(userId: number): Observable<User> {\r\n        return this.http.put<User>(`${this.resourceUrl}/${userId}/sync-ldap`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Delete a user on the server.\r\n     * @param login The login of the user to delete.\r\n     * @return Observable<HttpResponse<void>>\r\n     */\r\n    deleteUser(login: string): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Delete users on the server.\r\n     * @param logins The logins of the users to delete.\r\n     * @return Observable<HttpResponse<void>>\r\n     */\r\n    deleteUsers(logins: string[]): Observable<HttpResponse<void>> {\r\n        return this.http.delete<void>(`${this.resourceUrl}`, { body: logins, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Get the authorities.\r\n     */\r\n    authorities(): Observable<string[]> {\r\n        return this.http.get<string[]>(`${this.resourceUrl}/authorities`);\r\n    }\r\n}\r\n"],
  "mappings": "iIASA,IAAaA,GAAgB,IAAA,CAAvB,MAAOA,CAAgB,CACjBC,KAAOC,EAAOC,CAAU,EAEzBC,YAAc,uBAOrBC,OAAOC,EAAU,CACb,OAAO,KAAKL,KAAKM,KAAW,KAAKH,YAAaE,EAAM,CAAEE,QAAS,UAAU,CAAE,CAC/E,CAOAC,UAAUC,EAAsB,CAC5B,OAAO,KAAKT,KAAKM,KAAa,GAAG,KAAKH,WAAW,UAAWM,EAAO,CAAEF,QAAS,UAAU,CAAE,CAC9F,CAOAG,OAAOL,EAAU,CACb,OAAO,KAAKL,KAAKW,IAAU,KAAKR,YAAaE,EAAM,CAAEE,QAAS,UAAU,CAAE,CAC9E,CAQAK,MAAMC,EAAWC,EAAmB,CAChC,IAAIC,EAAUC,EAAoBH,CAAG,EACrC,OAAIC,IACAC,EAAUD,EAAOG,cAAcF,CAAO,GAEnC,KAAKf,KAAKkB,IAAY,KAAKf,YAAa,CAAEgB,OAAQJ,EAASR,QAAS,UAAU,CAAE,CAC3F,CAMAa,uBAAqB,CACjB,OAAO,KAAKpB,KAAKkB,IAAc,GAAG,KAAKf,WAAW,gBAAiB,CAAEI,QAAS,UAAU,CAAE,CAC9F,CAOAc,SAASC,EAAa,CAClB,OAAO,KAAKtB,KAAKkB,IAAU,GAAG,KAAKf,WAAW,IAAImB,CAAK,EAAE,CAC7D,CAOAC,SAASC,EAAc,CACnB,OAAO,KAAKxB,KAAKW,IAAU,GAAG,KAAKR,WAAW,IAAIqB,CAAM,aAAc,CAAEjB,QAAS,UAAU,CAAE,CACjG,CAOAkB,WAAWH,EAAa,CACpB,OAAO,KAAKtB,KAAK0B,OAAa,GAAG,KAAKvB,WAAW,IAAImB,CAAK,GAAI,CAAEf,QAAS,UAAU,CAAE,CACzF,CAOAoB,YAAYC,EAAgB,CACxB,OAAO,KAAK5B,KAAK0B,OAAa,GAAG,KAAKvB,WAAW,GAAI,CAAE0B,KAAMD,EAAQrB,QAAS,UAAU,CAAE,CAC9F,CAKAuB,aAAW,CACP,OAAO,KAAK9B,KAAKkB,IAAc,GAAG,KAAKf,WAAW,cAAc,CACpE,4CA/FSJ,EAAgB,6BAAhBA,EAAgBgC,QAAhBhC,EAAgBiC,UAAAC,WADH,MAAM,CAAA,SACnBlC,CAAgB,GAAA",
  "names": ["AdminUserService", "http", "inject", "HttpClient", "resourceUrl", "create", "user", "post", "observe", "importAll", "users", "update", "put", "query", "req", "filter", "options", "createRequestOption", "adjustOptions", "get", "params", "queryNotEnrolledUsers", "findUser", "login", "syncLdap", "userId", "deleteUser", "delete", "deleteUsers", "logins", "body", "authorities", "factory", "\u0275fac", "providedIn"]
}
