{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise-detail.component.ts", "src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise-detail.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { NonProgrammingExerciseDetailCommonActionsComponent } from 'app/exercises/shared/exercise-detail-common-actions/non-programming-exercise-detail-common-actions.component';\r\nimport { ExerciseDetailStatisticsComponent } from 'app/exercises/shared/statistics/exercise-detail-statistics.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { TextExerciseService } from './text-exercise.service';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { AssessmentType } from 'app/entities/assessment-type.model';\r\nimport { ExerciseManagementStatisticsDto } from 'app/exercises/shared/statistics/exercise-management-statistics-dto';\r\nimport { StatisticsService } from 'app/shared/statistics-graph/statistics.service';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { DocumentationType } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { DetailOverviewSection, DetailType } from 'app/detail-overview-list/detail-overview-list.component';\r\nimport {\r\n    getExerciseGeneralDetailsSection,\r\n    getExerciseGradingDefaultDetails,\r\n    getExerciseGradingInstructionsCriteriaDetails,\r\n    getExerciseMarkdownSolution,\r\n    getExerciseModeDetailSection,\r\n    getExerciseProblemDetailSection,\r\n} from 'app/exercises/shared/utils';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DocumentationButtonComponent } from 'app/shared/components/documentation-button/documentation-button.component';\r\nimport { DetailOverviewListComponent } from 'app/detail-overview-list/detail-overview-list.component';\r\n\r\n@Component({\r\n    selector: 'jhi-text-exercise-detail',\r\n    templateUrl: './text-exercise-detail.component.html',\r\n    imports: [TranslateDirective, DocumentationButtonComponent, NonProgrammingExerciseDetailCommonActionsComponent, ExerciseDetailStatisticsComponent, DetailOverviewListComponent],\r\n})\r\nexport class TextExerciseDetailComponent implements OnInit, OnDestroy {\r\n    private route = inject(ActivatedRoute);\r\n    private eventManager = inject(EventManager);\r\n    private artemisMarkdownService = inject(ArtemisMarkdownService);\r\n    private textExerciseService = inject(TextExerciseService);\r\n    private statisticsService = inject(StatisticsService);\r\n\r\n    readonly documentationType: DocumentationType = 'Text';\r\n\r\n    readonly AssessmentType = AssessmentType;\r\n    readonly ExerciseType = ExerciseType;\r\n    readonly dayjs = dayjs;\r\n\r\n    textExercise: TextExercise;\r\n    course?: Course;\r\n    isExamExercise: boolean;\r\n    formattedProblemStatement: SafeHtml | null;\r\n    formattedExampleSolution: SafeHtml | null;\r\n    formattedGradingInstructions: SafeHtml | null;\r\n\r\n    doughnutStats: ExerciseManagementStatisticsDto;\r\n    detailOverviewSections: DetailOverviewSection[];\r\n\r\n    private subscription: Subscription;\r\n    private eventSubscriber: Subscription;\r\n\r\n    /**\r\n     * Loads the text exercise and subscribes to changes of it on component initialization.\r\n     */\r\n    ngOnInit() {\r\n        // TODO: route determines whether the component is in exam mode\r\n        this.subscription = this.route.params.subscribe((params) => {\r\n            this.load(params['exerciseId']);\r\n        });\r\n        this.registerChangeInTextExercises();\r\n    }\r\n\r\n    /**\r\n     * Requests the text exercise referenced by the given exerciseId.\r\n     * @param exerciseId of the text exercise of type {number}\r\n     */\r\n    load(exerciseId: number) {\r\n        // TODO: Use a separate find method for exam exercises containing course, exam, exerciseGroup and exercise exerciseId\r\n        this.textExerciseService.find(exerciseId).subscribe((textExerciseResponse: HttpResponse<TextExercise>) => {\r\n            this.textExercise = textExerciseResponse.body!;\r\n            this.isExamExercise = !!this.textExercise.exerciseGroup;\r\n            this.course = this.isExamExercise ? this.textExercise.exerciseGroup?.exam?.course : this.textExercise.course;\r\n\r\n            this.formattedGradingInstructions = this.artemisMarkdownService.safeHtmlForMarkdown(this.textExercise.gradingInstructions);\r\n            this.formattedProblemStatement = this.artemisMarkdownService.safeHtmlForMarkdown(this.textExercise.problemStatement);\r\n            this.formattedExampleSolution = this.artemisMarkdownService.safeHtmlForMarkdown(this.textExercise.exampleSolution);\r\n            this.detailOverviewSections = this.getExerciseDetailSections();\r\n        });\r\n        this.statisticsService.getExerciseStatistics(exerciseId).subscribe((statistics: ExerciseManagementStatisticsDto) => {\r\n            this.doughnutStats = statistics;\r\n        });\r\n    }\r\n\r\n    getExerciseDetailSections(): DetailOverviewSection[] {\r\n        const exercise = this.textExercise;\r\n        const generalSection = getExerciseGeneralDetailsSection(exercise);\r\n        const modeSection = getExerciseModeDetailSection(exercise);\r\n        const problemSection = getExerciseProblemDetailSection(this.formattedProblemStatement, this.textExercise);\r\n        const solutionSection = getExerciseMarkdownSolution(exercise, this.formattedExampleSolution);\r\n        const defaultGradingDetails = getExerciseGradingDefaultDetails(exercise);\r\n        const gradingInstructionsCriteriaDetails = getExerciseGradingInstructionsCriteriaDetails(exercise, this.formattedGradingInstructions);\r\n        return [\r\n            generalSection,\r\n            modeSection,\r\n            problemSection,\r\n            solutionSection,\r\n            {\r\n                headline: 'artemisApp.exercise.sections.grading',\r\n                details: [\r\n                    ...defaultGradingDetails,\r\n                    { type: DetailType.Boolean, title: 'artemisApp.exercise.feedbackSuggestionsEnabled', data: { boolean: !!exercise.feedbackSuggestionModule } },\r\n                    { type: DetailType.Boolean, title: 'artemisApp.programmingExercise.timeline.manualFeedbackRequests', data: { boolean: exercise.allowFeedbackRequests } },\r\n                    ...gradingInstructionsCriteriaDetails,\r\n                ],\r\n            },\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from changes of text exercise on destruction of component.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n        this.eventManager.destroy(this.eventSubscriber);\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the text exercise.\r\n     */\r\n    registerChangeInTextExercises() {\r\n        this.eventSubscriber = this.eventManager.subscribe('textExerciseListModification', () => this.load(this.textExercise.id!));\r\n    }\r\n}\r\n", "<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8\">\r\n        @if (textExercise) {\r\n            <div>\r\n                <div class=\"d-flex align-items-center\">\r\n                    <h2><span jhiTranslate=\"artemisApp.textExercise.detail.title\"></span> {{ textExercise.id }}</h2>\r\n                    <jhi-documentation-button [type]=\"documentationType\" />\r\n                </div>\r\n                <hr />\r\n                <div class=\"text-start\">\r\n                    @if (course) {\r\n                        <jhi-non-programming-exercise-detail-common-actions [isExamExercise]=\"isExamExercise\" [course]=\"course\" [exercise]=\"textExercise\" />\r\n                    }\r\n                </div>\r\n                @if (!textExercise.releaseDate || dayjs(textExercise.releaseDate).isBefore(dayjs())) {\r\n                    <div class=\"mt-3\">\r\n                        <jhi-exercise-detail-statistics\r\n                            [exercise]=\"textExercise\"\r\n                            [doughnutStats]=\"doughnutStats\"\r\n                            [exerciseType]=\"ExerciseType.TEXT\"\r\n                            class=\"d-flex justify-content-around\"\r\n                        />\r\n                    </div>\r\n                }\r\n                @if (detailOverviewSections) {\r\n                    <jhi-detail-overview-list [sections]=\"detailOverviewSections\" />\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "isExamExercise", "course", "textExercise", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "doughnutStats", "ExerciseType", "TEXT", "detailOverviewSections", "\u0275\u0275template", "TextExerciseDetailComponent_Conditional_4_Conditional_16_Template", "TextExerciseDetailComponent_Conditional_4_Conditional_18_Template", "TextExerciseDetailComponent_Conditional_4_Conditional_19_Template", "\u0275\u0275textInterpolate1", "id", "documentationType", "\u0275\u0275conditional", "releaseDate", "dayjs", "isBefore", "TextExerciseDetailComponent", "route", "inject", "ActivatedRoute", "eventManager", "EventManager", "artemisMarkdownService", "ArtemisMarkdownService", "textExerciseService", "TextExerciseService", "statisticsService", "StatisticsService", "AssessmentType", "formattedProblemStatement", "formattedExampleSolution", "formattedGradingInstructions", "subscription", "eventSubscriber", "ngOnInit", "params", "subscribe", "load", "registerChangeInTextExercises", "exerciseId", "find", "textExerciseResponse", "body", "exerciseGroup", "exam", "safeHtmlForMarkdown", "gradingInstructions", "problemStatement", "exampleSolution", "getExerciseDetailSections", "getExerciseStatistics", "statistics", "exercise", "generalSection", "getExerciseGeneralDetailsSection", "modeSection", "getExerciseModeDetailSection", "problemSection", "getExerciseProblemDetailSection", "solutionSection", "getExerciseMarkdownSolution", "defaultGradingDetails", "getExerciseGradingDefaultDetails", "gradingInstructionsCriteriaDetails", "getExerciseGradingInstructionsCriteriaDetails", "headline", "details", "type", "DetailType", "Boolean", "title", "data", "boolean", "feedbackSuggestionModule", "allowFeedbackRequests", "ngOnDestroy", "unsubscribe", "destroy", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "TextExerciseDetailComponent_Conditional_4_Template", "TranslateDirective", "DocumentationButtonComponent", "NonProgrammingExerciseDetailCommonActionsComponent", "ExerciseDetailStatisticsComponent", "DetailOverviewListComponent", "encapsulation"]
}
