{
  "version": 3,
  "sources": ["src/main/webapp/app/course/tutorial-groups/tutorial-groups-management/tutorial-group-management-resolve.service.ts", "src/main/webapp/app/faq/faq-resolve.service.ts", "src/main/webapp/app/course/manage/course-management.route.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { Observable, filter, map, pipe } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TutorialGroupManagementResolve implements Resolve<Course> {\r\n    private service = inject(CourseManagementService);\r\n    private router = inject(Router);\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Course> {\r\n        return this.service.find(route.params['courseId']).pipe(\r\n            filter((response: HttpResponse<Course>) => response.ok),\r\n            map((course: HttpResponse<Course>) => course.body!),\r\n            pipe(\r\n                tap((course: Course) => {\r\n                    // special case edit configuration\r\n                    if (course.tutorialGroupsConfiguration) {\r\n                        const editUrl = '/course-management/' + course.id + '/tutorial-groups/configuration/' + course.tutorialGroupsConfiguration.id + '/edit';\r\n                        if (state.url === editUrl) {\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    // user has not completed all necessary configuration steps\r\n                    if (!course.tutorialGroupsConfiguration || !course.timeZone) {\r\n                        this.router.navigate(['/course-management', course.id!, 'tutorial-groups-checklist']);\r\n                    }\r\n                }),\r\n            ),\r\n        );\r\n    }\r\n}\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { FaqService } from 'app/faq/faq.service';\r\nimport { Faq } from 'app/entities/faq.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FaqResolve implements Resolve<Faq> {\r\n    private faqService = inject(FaqService);\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<Faq> {\r\n        const faqId = route.params['faqId'];\r\n        const courseId = route.params['courseId'];\r\n        if (faqId) {\r\n            return this.faqService.find(courseId, faqId).pipe(\r\n                filter((response: HttpResponse<Faq>) => response.ok),\r\n                map((faq: HttpResponse<Faq>) => faq.body!),\r\n            );\r\n        }\r\n        return of(new Faq());\r\n    }\r\n}\r\n", "import { Routes } from '@angular/router';\r\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { CourseManagementResolve } from 'app/course/manage/course-management-resolve.service';\r\nimport { TutorialGroupManagementResolve } from 'app/course/tutorial-groups/tutorial-groups-management/tutorial-group-management-resolve.service';\r\nimport { PendingChangesGuard } from 'app/shared/guard/pending-changes.guard';\r\nimport { LocalCIGuard } from 'app/localci/localci-guard.service';\r\nimport { IrisGuard } from 'app/iris/iris-guard.service';\r\nimport { FaqResolve } from 'app/faq/faq-resolve.service';\r\nimport { ExerciseAssessmentDashboardComponent } from 'app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component';\r\nimport { isOrion } from 'app/shared/orion/orion';\r\nimport { OrionExerciseAssessmentDashboardComponent } from 'app/orion/assessment/orion-exercise-assessment-dashboard.component';\r\n\r\nexport const courseManagementState: Routes = [\r\n    {\r\n        path: '',\r\n        loadComponent: () => import('./course-management.component').then((m) => m.CourseManagementComponent),\r\n        data: {\r\n            authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n            pageTitle: 'artemisApp.course.home.title',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        path: 'new',\r\n        loadComponent: () => import('./course-update.component').then((m) => m.CourseUpdateComponent),\r\n        data: {\r\n            authorities: [Authority.ADMIN],\r\n            pageTitle: 'global.generic.create',\r\n        },\r\n        canActivate: [UserRouteAccessService],\r\n    },\r\n    {\r\n        path: '',\r\n        loadComponent: () => import('app/course/manage/course-management-tab-bar/course-management-tab-bar.component').then((m) => m.CourseManagementTabBarComponent),\r\n        children: [\r\n            {\r\n                path: ':courseId',\r\n                loadComponent: () => import('./detail/course-detail.component').then((m) => m.CourseDetailComponent),\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                },\r\n                data: {\r\n                    authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.course.home.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/grading-system',\r\n                loadComponent: () => import('app/grading-system/grading-system.component').then((m) => m.GradingSystemComponent),\r\n                data: {\r\n                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.course.gradingSystem',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n                loadChildren: () => import('app/grading-system/grading-system.route').then((m) => m.gradingSystemState),\r\n            },\r\n            {\r\n                path: ':courseId/iris-settings',\r\n                loadComponent: () => import('app/iris/settings/iris-course-settings-update/iris-course-settings-update.component').then((m) => m.IrisCourseSettingsUpdateComponent),\r\n                data: {\r\n                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.iris.settings.title.course',\r\n                },\r\n                canActivate: [UserRouteAccessService, IrisGuard],\r\n                canDeactivate: [PendingChangesGuard],\r\n            },\r\n            {\r\n                path: ':courseId/lectures',\r\n                loadChildren: () => import('app/lecture/lecture.route').then((m) => m.lectureRoute),\r\n            },\r\n            {\r\n                path: ':courseId/tutorial-groups',\r\n                resolve: {\r\n                    course: TutorialGroupManagementResolve,\r\n                },\r\n                loadChildren: () => import('app/course/tutorial-groups/tutorial-groups-management/tutorial-groups-management.route').then((m) => m.tutorialGroupManagementRoutes),\r\n            },\r\n            {\r\n                path: ':courseId/assessment-dashboard/:exerciseId',\r\n                loadComponent: () => (isOrion ? OrionExerciseAssessmentDashboardComponent : ExerciseAssessmentDashboardComponent),\r\n                data: {\r\n                    authorities: [Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA],\r\n                    pageTitle: 'artemisApp.exerciseAssessmentDashboard.home.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/assessment-dashboard',\r\n                loadComponent: () => import('app/course/dashboards/assessment-dashboard/assessment-dashboard.component').then((m) => m.AssessmentDashboardComponent),\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                },\r\n                data: {\r\n                    authorities: [Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA],\r\n                    pageTitle: 'artemisApp.assessmentDashboard.home.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/scores',\r\n                loadComponent: () => import('app/course/course-scores/course-scores.component').then((m) => m.CourseScoresComponent),\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                },\r\n                data: {\r\n                    authorities: [Authority.ADMIN, Authority.INSTRUCTOR, Authority.EDITOR, Authority.TA],\r\n                    pageTitle: 'artemisApp.instructorDashboard.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/plagiarism-cases',\r\n                loadChildren: () => import('app/course/plagiarism-cases/instructor-view/plagiarism-instructor-view.route').then((m) => m.plagiarismInstructorRoutes),\r\n            },\r\n            {\r\n                path: ':courseId/exams/:examId/plagiarism-cases',\r\n                loadChildren: () => import('../plagiarism-cases/instructor-view/plagiarism-instructor-view.route').then((m) => m.plagiarismInstructorRoutes),\r\n            },\r\n            {\r\n                path: ':courseId/exams',\r\n                loadChildren: () => import('../../exam/manage/exam-management.route').then((m) => m.examManagementRoute),\r\n            },\r\n            {\r\n                path: ':courseId/tutorial-groups-checklist',\r\n                loadComponent: () =>\r\n                    import('app/course/tutorial-groups/tutorial-groups-management/tutorial-groups-checklist/tutorial-groups-checklist.component').then(\r\n                        (m) => m.TutorialGroupsChecklistComponent,\r\n                    ),\r\n                data: {\r\n                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.pages.checklist.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/create-tutorial-groups-configuration',\r\n                loadComponent: () =>\r\n                    import(\r\n                        'app/course/tutorial-groups/tutorial-groups-management/tutorial-groups-configuration/crud/create-tutorial-groups-configuration/create-tutorial-groups-configuration.component'\r\n                    ).then((m) => m.CreateTutorialGroupsConfigurationComponent),\r\n                data: {\r\n                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.pages.createTutorialGroupsConfiguration.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/lti-configuration',\r\n                loadComponent: () => import('app/course/manage/course-lti-configuration/course-lti-configuration.component').then((m) => m.CourseLtiConfigurationComponent),\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                },\r\n                data: {\r\n                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.lti.home.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                path: ':courseId/lti-configuration/edit',\r\n                loadComponent: () =>\r\n                    import('app/course/manage/course-lti-configuration/edit-course-lti-configuration.component').then((m) => m.EditCourseLtiConfigurationComponent),\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                },\r\n                data: {\r\n                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                    pageTitle: 'artemisApp.lti.home.title',\r\n                },\r\n                canActivate: [UserRouteAccessService],\r\n            },\r\n            {\r\n                // Create a new path without a component defined to prevent resolver caching and the CourseDetailComponent from being always rendered\r\n                path: ':courseId',\r\n                resolve: {\r\n                    course: CourseManagementResolve,\r\n                },\r\n                children: [\r\n                    {\r\n                        path: 'exercises',\r\n                        loadComponent: () => import('app/orion/management/orion-course-management-exercises.component').then((m) => m.OrionCourseManagementExercisesComponent),\r\n                        data: {\r\n                            authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.course.exercises',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'course-statistics',\r\n                        loadComponent: () => import('./course-management-statistics.component').then((m) => m.CourseManagementStatisticsComponent),\r\n                        data: {\r\n                            authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.courseStatistics.statistics',\r\n                            breadcrumbLabelVariable: '',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'edit',\r\n                        loadComponent: () => import('./course-update.component').then((m) => m.CourseUpdateComponent),\r\n                        data: {\r\n                            authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.course.home.editLabel',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'groups/:courseGroup',\r\n                        loadComponent: () => import('app/course/manage/course-group-membership/course-group-membership.component').then((m) => m.CourseGroupMembershipComponent),\r\n                        data: {\r\n                            authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.userManagement.groups',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'ratings',\r\n                        loadComponent: () => import('app/exercises/shared/rating/rating-list/rating-list.component').then((m) => m.RatingListComponent),\r\n                        data: {\r\n                            authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.ratingList.pageTitle',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'competency-management',\r\n                        loadComponent: () => import('app/course/competencies/competency-management/competency-management.component').then((m) => m.CompetencyManagementComponent),\r\n                        data: {\r\n                            authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.competency.manage.title',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/complaints/list-of-complaints/list-of-complaints.route').then((m) => m.listOfComplaintsRoute),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/assessment/assessment-locks/assessment-locks.route').then((m) => m.assessmentLocksRoute),\r\n                    },\r\n                    // we have to define the redirects here. When we define them in the child routes, the redirect doesn't work\r\n                    {\r\n                        path: 'text-exercises',\r\n                        redirectTo: 'exercises',\r\n                    },\r\n                    {\r\n                        path: 'modeling-exercises',\r\n                        redirectTo: 'exercises',\r\n                    },\r\n                    {\r\n                        path: 'file-upload-exercises',\r\n                        redirectTo: 'exercises',\r\n                    },\r\n                    {\r\n                        path: 'quiz-exercises',\r\n                        redirectTo: 'exercises',\r\n                    },\r\n                    {\r\n                        path: 'programming-exercises',\r\n                        redirectTo: 'exercises',\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/text/manage/text-exercise/text-exercise.route').then((m) => m.textExerciseRoute),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/programming/manage/programming-exercise-management.route').then((m) => m.routes),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/quiz/manage/quiz-management.route').then((m) => m.quizManagementRoute),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/file-upload/manage/file-upload-exercise-management.route').then((m) => m.routes),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/modeling/manage/modeling-exercise.route').then((m) => m.routes),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/shared/exercise-scores/exercise-scores.route').then((m) => m.routes),\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        loadChildren: () => import('app/exercises/shared/participation/participation.route').then((m) => m.routes),\r\n                    },\r\n                    {\r\n                        // Create a new path without a component defined to prevent the CompetencyManagementComponent from being always rendered\r\n                        path: 'competency-management',\r\n                        data: {\r\n                            pageTitle: 'artemisApp.competency.manage.title',\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: 'create',\r\n                                loadComponent: () => import('app/course/competencies/create/create-competency.component').then((m) => m.CreateCompetencyComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.competency.create.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                            },\r\n                            {\r\n                                path: ':competencyId/edit',\r\n                                loadComponent: () => import('app/course/competencies/edit/edit-competency.component').then((m) => m.EditCompetencyComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.competency.editCompetency.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                            },\r\n                            {\r\n                                path: 'import',\r\n                                loadComponent: () => import('app/course/competencies/import/import-competencies.component').then((m) => m.ImportCompetenciesComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.competency.import.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                                canDeactivate: [PendingChangesGuard],\r\n                            },\r\n                            {\r\n                                path: 'import-standardized',\r\n                                loadComponent: () =>\r\n                                    import('app/course/competencies/import-standardized-competencies/course-import-standardized-competencies.component').then(\r\n                                        (m) => m.CourseImportStandardizedCompetenciesComponent,\r\n                                    ),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.competency.import.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                                canDeactivate: [PendingChangesGuard],\r\n                            },\r\n                            {\r\n                                path: 'generate',\r\n                                loadComponent: () =>\r\n                                    import('app/course/competencies/generate-competencies/generate-competencies.component').then((m) => m.GenerateCompetenciesComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.competency.generate.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService, IrisGuard],\r\n                                canDeactivate: [PendingChangesGuard],\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: 'prerequisite-management',\r\n                        redirectTo: 'competency-management',\r\n                        pathMatch: 'full',\r\n                    },\r\n                    {\r\n                        path: 'prerequisite-management',\r\n                        data: {\r\n                            pageTitle: 'artemisApp.prerequisite.manage.title',\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: 'create',\r\n                                loadComponent: () => import('app/course/competencies/create/create-prerequisite.component').then((m) => m.CreatePrerequisiteComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.prerequisite.createPrerequisite.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                            },\r\n                            {\r\n                                path: ':prerequisiteId/edit',\r\n                                loadComponent: () => import('app/course/competencies/edit/edit-prerequisite.component').then((m) => m.EditPrerequisiteComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.prerequisite.editPrerequisite.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                            },\r\n                            {\r\n                                path: 'import',\r\n                                loadComponent: () => import('app/course/competencies/import/import-prerequisites.component').then((m) => m.ImportPrerequisitesComponent),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.prerequisite.import.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                                canDeactivate: [PendingChangesGuard],\r\n                            },\r\n                            {\r\n                                path: 'import-standardized',\r\n                                loadComponent: () =>\r\n                                    import('app/course/competencies/import-standardized-competencies/course-import-standardized-prerequisites.component').then(\r\n                                        (m) => m.CourseImportStandardizedPrerequisitesComponent,\r\n                                    ),\r\n                                data: {\r\n                                    authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.prerequisite.import.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                                canDeactivate: [PendingChangesGuard],\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: 'learning-path-management',\r\n                        loadComponent: () =>\r\n                            import('app/course/learning-paths/pages/learning-path-instructor-page/learning-path-instructor-page.component').then(\r\n                                (m) => m.LearningPathInstructorPageComponent,\r\n                            ),\r\n                        data: {\r\n                            authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.learningPath.manageLearningPaths.title',\r\n                        },\r\n                        canActivate: [UserRouteAccessService],\r\n                    },\r\n                    {\r\n                        path: 'build-queue',\r\n                        loadComponent: () => import('app/localci/build-queue/build-queue.component').then((m) => m.BuildQueueComponent),\r\n                        data: {\r\n                            authorities: [Authority.INSTRUCTOR, Authority.ADMIN],\r\n                            pageTitle: 'artemisApp.buildQueue.title',\r\n                        },\r\n                        canActivate: [UserRouteAccessService, LocalCIGuard],\r\n                    },\r\n                    {\r\n                        path: 'faqs',\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                loadComponent: () => import('app/faq/faq.component').then((m) => m.FaqComponent),\r\n                                resolve: {\r\n                                    course: CourseManagementResolve,\r\n                                },\r\n                                data: {\r\n                                    authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                    pageTitle: 'artemisApp.faq.home.title',\r\n                                },\r\n                                canActivate: [UserRouteAccessService],\r\n                            },\r\n                            {\r\n                                // Create a new path without a component defined to prevent the FAQ from being always rendered\r\n                                path: '',\r\n                                resolve: {\r\n                                    course: CourseManagementResolve,\r\n                                },\r\n                                children: [\r\n                                    {\r\n                                        path: 'new',\r\n                                        loadComponent: () => import('app/faq/faq-update.component').then((m) => m.FaqUpdateComponent),\r\n                                        data: {\r\n                                            authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                            pageTitle: 'global.generic.create',\r\n                                        },\r\n                                        canActivate: [UserRouteAccessService],\r\n                                    },\r\n                                    {\r\n                                        path: ':faqId',\r\n                                        resolve: {\r\n                                            faq: FaqResolve,\r\n                                        },\r\n                                        children: [\r\n                                            {\r\n                                                path: 'edit',\r\n                                                loadComponent: () => import('app/faq/faq-update.component').then((m) => m.FaqUpdateComponent),\r\n                                                data: {\r\n                                                    authorities: [Authority.TA, Authority.EDITOR, Authority.INSTRUCTOR, Authority.ADMIN],\r\n                                                    pageTitle: 'global.generic.edit',\r\n                                                },\r\n                                                canActivate: [UserRouteAccessService],\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ],\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\n"],
  "mappings": "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",
  "names": ["TutorialGroupManagementResolve", "service", "inject", "CourseManagementService", "router", "Router", "resolve", "route", "state", "find", "params", "pipe", "filter", "response", "ok", "map", "course", "body", "tap", "tutorialGroupsConfiguration", "editUrl", "id", "url", "timeZone", "navigate", "factory", "\u0275fac", "providedIn", "FaqResolve", "faqService", "inject", "FaqService", "resolve", "route", "faqId", "params", "courseId", "find", "pipe", "filter", "response", "ok", "map", "faq", "body", "of", "Faq", "factory", "\u0275fac", "providedIn", "courseManagementState", "path", "loadComponent", "then", "m", "CourseManagementComponent", "data", "authorities", "Authority", "TA", "EDITOR", "INSTRUCTOR", "ADMIN", "pageTitle", "canActivate", "UserRouteAccessService", "CourseUpdateComponent", "CourseManagementTabBarComponent", "children", "CourseDetailComponent", "resolve", "course", "CourseManagementResolve", "GradingSystemComponent", "loadChildren", "gradingSystemState", "IrisCourseSettingsUpdateComponent", "IrisGuard", "canDeactivate", "PendingChangesGuard", "lectureRoute", "TutorialGroupManagementResolve", "tutorialGroupManagementRoutes", "isOrion", "OrionExerciseAssessmentDashboardComponent", "ExerciseAssessmentDashboardComponent", "AssessmentDashboardComponent", "CourseScoresComponent", "plagiarismInstructorRoutes", "examManagementRoute", "TutorialGroupsChecklistComponent", "CreateTutorialGroupsConfigurationComponent", "CourseLtiConfigurationComponent", "EditCourseLtiConfigurationComponent", "OrionCourseManagementExercisesComponent", "CourseManagementStatisticsComponent", "breadcrumbLabelVariable", "CourseGroupMembershipComponent", "RatingListComponent", "CompetencyManagementComponent", "listOfComplaintsRoute", "assessmentLocksRoute", "redirectTo", "textExerciseRoute", "routes", "quizManagementRoute", "CreateCompetencyComponent", "EditCompetencyComponent", "ImportCompetenciesComponent", "CourseImportStandardizedCompetenciesComponent", "GenerateCompetenciesComponent", "pathMatch", "CreatePrerequisiteComponent", "EditPrerequisiteComponent", "ImportPrerequisitesComponent", "CourseImportStandardizedPrerequisitesComponent", "LearningPathInstructorPageComponent", "BuildQueueComponent", "LocalCIGuard", "FaqComponent", "FaqUpdateComponent", "faq", "FaqResolve"]
}
