{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/competency.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Competency, CompetencyImportResponseDTO, CompetencyWithTailRelationDTO, CourseCompetency, CourseCompetencyImportOptionsDTO } from 'app/entities/competency.model';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { CourseCompetencyService } from 'app/course/competencies/course-competency.service';\r\n\r\ntype EntityResponseType = HttpResponse<Competency>;\r\ntype EntityArrayResponseType = HttpResponse<Competency[]>;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CompetencyService extends CourseCompetencyService {\r\n    getAllForCourse(courseId: number): Observable<EntityArrayResponseType> {\r\n        return this.httpClient.get<Competency[]>(`${this.resourceURL}/courses/${courseId}/competencies`, { observe: 'response' }).pipe(\r\n            map((res: EntityArrayResponseType) => this.convertArrayResponseDatesFromServer(res)),\r\n            tap((res: EntityArrayResponseType) => res?.body?.forEach(this.sendTitlesToEntityTitleService.bind(this))),\r\n        );\r\n    }\r\n\r\n    findById(competencyId: number, courseId: number) {\r\n        return this.httpClient.get<Competency>(`${this.resourceURL}/courses/${courseId}/competencies/${competencyId}`, { observe: 'response' }).pipe(\r\n            map((res: EntityResponseType) => {\r\n                this.convertCompetencyResponseFromServer(res);\r\n                this.sendTitlesToEntityTitleService(res?.body);\r\n                return res;\r\n            }),\r\n        );\r\n    }\r\n\r\n    create(competency: Competency, courseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convertCompetencyFromClient(competency);\r\n        return this.httpClient.post<Competency>(`${this.resourceURL}/courses/${courseId}/competencies`, copy, { observe: 'response' });\r\n    }\r\n\r\n    createBulk(competencies: Competency[], courseId: number) {\r\n        const copy = competencies.map((competency) => this.convertCompetencyFromClient(competency));\r\n        return this.httpClient.post<Competency[]>(`${this.resourceURL}/courses/${courseId}/competencies/bulk`, copy, { observe: 'response' });\r\n    }\r\n\r\n    import(courseCompetency: CourseCompetency, courseId: number): Observable<EntityResponseType> {\r\n        return this.httpClient.post<Competency>(`${this.resourceURL}/courses/${courseId}/competencies/import`, courseCompetency.id, { observe: 'response' });\r\n    }\r\n\r\n    importBulk(courseCompetencies: CourseCompetency[], courseId: number, importRelations: boolean) {\r\n        const courseCompetencyIds = courseCompetencies.map((competency) => competency.id);\r\n        const params = new HttpParams().set('importRelations', importRelations);\r\n        return this.httpClient.post<Array<CompetencyWithTailRelationDTO>>(\r\n            `${this.resourceURL}/courses/${courseId}/competencies/import/bulk`,\r\n            {\r\n                sourceCourseId: courseId,\r\n                importRelations: importRelations,\r\n                importExercises: false,\r\n                importLectures: false,\r\n                competencyIds: courseCompetencyIds,\r\n            } as CourseCompetencyImportOptionsDTO,\r\n            {\r\n                params: params,\r\n                observe: 'response',\r\n            },\r\n        );\r\n    }\r\n\r\n    importAll(courseId: number, sourceCourseId: number, importRelations: boolean) {\r\n        return this.httpClient.post<Array<CompetencyWithTailRelationDTO>>(\r\n            `${this.resourceURL}/courses/${courseId}/competencies/import-all`,\r\n            {\r\n                importExercises: false,\r\n                importRelations: importRelations,\r\n                sourceCourseId: sourceCourseId,\r\n                importLectures: false,\r\n            } as CourseCompetencyImportOptionsDTO,\r\n            {\r\n                observe: 'response',\r\n            },\r\n        );\r\n    }\r\n\r\n    importStandardizedCompetencies(competencyIdsToImport: number[], courseId: number) {\r\n        return this.httpClient.post<Array<CompetencyImportResponseDTO>>(`${this.resourceURL}/courses/${courseId}/competencies/import-standardized`, competencyIdsToImport, {\r\n            observe: 'response',\r\n        });\r\n    }\r\n\r\n    update(competency: Competency, courseId: number): Observable<EntityResponseType> {\r\n        const copy = this.convertCompetencyFromClient(competency);\r\n        return this.httpClient.put(`${this.resourceURL}/courses/${courseId}/competencies`, copy, { observe: 'response' });\r\n    }\r\n\r\n    delete(competencyId: number, courseId: number) {\r\n        return this.httpClient.delete(`${this.resourceURL}/courses/${courseId}/competencies/${competencyId}`, { observe: 'response' });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["CompetencyService", "CourseCompetencyService", "getAllForCourse", "courseId", "httpClient", "get", "resourceURL", "observe", "pipe", "map", "res", "convertArrayResponseDatesFromServer", "tap", "body", "forEach", "sendTitlesToEntityTitleService", "bind", "findById", "competencyId", "convertCompetencyResponseFromServer", "create", "competency", "copy", "convertCompetencyFromClient", "post", "createBulk", "competencies", "import", "courseCompetency", "id", "importBulk", "courseCompetencies", "importRelations", "courseCompetencyIds", "params", "HttpParams", "set", "sourceCourseId", "importExercises", "importLectures", "competencyIds", "importAll", "importStandardizedCompetencies", "competencyIdsToImport", "update", "put", "delete", "__ngFactoryType__", "factory", "\u0275fac", "providedIn"]
}
