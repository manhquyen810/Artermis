{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/programming/manage/services/cached-repository-files.service.ts", "src/main/webapp/app/exercises/programming/git-diff-report/git-diff-report-modal.component.ts", "src/main/webapp/app/exercises/programming/git-diff-report/git-diff-report-modal.component.html"],
  "sourcesContent": ["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * This service is used to pass cached repository files between parent and child components where we cannot rely on Angular event binding.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CachedRepositoryFilesService {\r\n    cachedRepositoryFilesChanged = new EventEmitter<Map<string, Map<string, string>>>();\r\n\r\n    getCachedRepositoryFilesObservable(): Observable<Map<string, Map<string, string>>> {\r\n        return this.cachedRepositoryFilesChanged.asObservable();\r\n    }\r\n\r\n    emitCachedRepositoryFiles(data: Map<string, Map<string, string>>) {\r\n        this.cachedRepositoryFilesChanged.emit(data);\r\n    }\r\n}\r\n", "import { ChangeDetectionStrategy, Component, effect, inject, input, signal, untracked } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ProgrammingExerciseGitDiffReport } from 'app/entities/programming-exercise-git-diff-report.model';\r\nimport { ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\r\nimport { ProgrammingExerciseParticipationService } from 'app/exercises/programming/manage/services/programming-exercise-participation.service';\r\nimport { CachedRepositoryFilesService } from 'app/exercises/programming/manage/services/cached-repository-files.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { GitDiffReportComponent } from 'app/exercises/programming/git-diff-report/git-diff-report.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-git-diff-report-modal',\r\n    templateUrl: './git-diff-report-modal.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [GitDiffReportComponent, TranslateDirective],\r\n})\r\nexport class GitDiffReportModalComponent {\r\n    static readonly WINDOW_CLASS = 'diff-view-modal';\r\n\r\n    private readonly activeModal = inject(NgbActiveModal);\r\n    private readonly programmingExerciseService = inject(ProgrammingExerciseService);\r\n    private readonly programmingExerciseParticipationService = inject(ProgrammingExerciseParticipationService);\r\n    private readonly cachedRepositoryFilesService = inject(CachedRepositoryFilesService);\r\n\r\n    readonly report = input.required<ProgrammingExerciseGitDiffReport>();\r\n    readonly diffForTemplateAndSolution = input<boolean>(true);\r\n    readonly cachedRepositoryFiles = input<Map<string, Map<string, string>>>(new Map<string, Map<string, string>>());\r\n\r\n    readonly errorWhileFetchingRepos = signal<boolean>(false);\r\n    readonly leftCommitFileContentByPath = signal<Map<string, string> | undefined>(undefined);\r\n    readonly rightCommitFileContentByPath = signal<Map<string, string> | undefined>(undefined);\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            // We call the signal here to ensure the effect always runs when the report changes.\r\n            this.report();\r\n            const diffBetweenTemplateAndSolution = this.diffForTemplateAndSolution();\r\n            untracked(async () => {\r\n                if (diffBetweenTemplateAndSolution) {\r\n                    await this.loadFilesForTemplateAndSolution();\r\n                } else {\r\n                    await this.loadRepositoryFilesForParticipationsFromCacheIfAvailable();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private async loadFilesForTemplateAndSolution(): Promise<void> {\r\n        await this.fetchTemplateRepoFiles();\r\n        await this.fetchSolutionRepoFiles();\r\n    }\r\n\r\n    private async fetchSolutionRepoFiles(): Promise<void> {\r\n        try {\r\n            const solutionRepoFiles = await firstValueFrom(this.programmingExerciseService.getSolutionRepositoryTestFilesWithContent(this.report().programmingExercise.id!));\r\n            this.rightCommitFileContentByPath.set(solutionRepoFiles);\r\n        } catch (e) {\r\n            this.errorWhileFetchingRepos.set(true);\r\n        }\r\n    }\r\n\r\n    private async loadRepositoryFilesForParticipationsFromCacheIfAvailable(): Promise<void> {\r\n        if (this.report().participationIdForLeftCommit) {\r\n            const key = this.report().leftCommitHash!;\r\n            if (this.cachedRepositoryFiles().has(key)) {\r\n                this.leftCommitFileContentByPath.set(this.cachedRepositoryFiles().get(key)!);\r\n                await this.loadParticipationRepoFilesAtRightCommitFromCacheIfAvailable();\r\n            } else {\r\n                await this.fetchParticipationRepoFilesAtLeftCommit();\r\n            }\r\n        } else {\r\n            await this.loadTemplateRepoFilesFromCacheIfAvailable();\r\n            await this.loadParticipationRepoFilesAtRightCommitFromCacheIfAvailable();\r\n        }\r\n    }\r\n\r\n    private async fetchParticipationRepoFilesAtLeftCommit(): Promise<void> {\r\n        try {\r\n            const filesWithContent =\r\n                (await firstValueFrom(\r\n                    this.programmingExerciseParticipationService.getParticipationRepositoryFilesWithContentAtCommit(\r\n                        this.report().participationIdForLeftCommit!,\r\n                        this.report().leftCommitHash!,\r\n                    ),\r\n                )) ?? new Map<string, string>();\r\n            this.leftCommitFileContentByPath.set(filesWithContent);\r\n            this.cachedRepositoryFiles().set(this.report().leftCommitHash!, filesWithContent);\r\n            this.cachedRepositoryFilesService.emitCachedRepositoryFiles(this.cachedRepositoryFiles());\r\n            await this.loadParticipationRepoFilesAtRightCommitFromCacheIfAvailable();\r\n        } catch (e) {\r\n            this.errorWhileFetchingRepos.set(true);\r\n        }\r\n    }\r\n\r\n    private async loadTemplateRepoFilesFromCacheIfAvailable(): Promise<void> {\r\n        const key = this.calculateTemplateMapKey();\r\n        if (this.cachedRepositoryFiles().has(key)) {\r\n            this.leftCommitFileContentByPath.set(this.cachedRepositoryFiles().get(key)!);\r\n        } else {\r\n            await this.fetchTemplateRepoFiles();\r\n        }\r\n    }\r\n\r\n    private async loadParticipationRepoFilesAtRightCommitFromCacheIfAvailable(): Promise<void> {\r\n        const key = this.report().rightCommitHash!;\r\n        if (this.cachedRepositoryFiles().has(key)) {\r\n            this.rightCommitFileContentByPath.set(this.cachedRepositoryFiles().get(key)!);\r\n        } else {\r\n            await this.fetchParticipationRepoFilesAtRightCommit();\r\n        }\r\n    }\r\n\r\n    private async fetchTemplateRepoFiles(): Promise<void> {\r\n        const key = this.calculateTemplateMapKey();\r\n        try {\r\n            const response =\r\n                (await firstValueFrom(this.programmingExerciseService.getTemplateRepositoryTestFilesWithContent(this.report().programmingExercise.id!))) ??\r\n                new Map<string, string>();\r\n            this.leftCommitFileContentByPath.set(response);\r\n            this.cachedRepositoryFiles().set(key, response);\r\n            this.cachedRepositoryFilesService.emitCachedRepositoryFiles(this.cachedRepositoryFiles());\r\n        } catch (e) {\r\n            this.errorWhileFetchingRepos.set(true);\r\n        }\r\n    }\r\n\r\n    private async fetchParticipationRepoFilesAtRightCommit(): Promise<void> {\r\n        try {\r\n            const filesWithContent =\r\n                (await firstValueFrom(\r\n                    this.programmingExerciseParticipationService.getParticipationRepositoryFilesWithContentAtCommit(\r\n                        this.report().participationIdForRightCommit!,\r\n                        this.report().rightCommitHash!,\r\n                    ),\r\n                )) ?? new Map<string, string>();\r\n            this.rightCommitFileContentByPath.set(filesWithContent);\r\n            this.cachedRepositoryFiles().set(this.report().rightCommitHash!, filesWithContent);\r\n            this.cachedRepositoryFilesService.emitCachedRepositoryFiles(this.cachedRepositoryFiles());\r\n        } catch (e) {\r\n            this.errorWhileFetchingRepos.set(true);\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        this.activeModal.dismiss();\r\n    }\r\n\r\n    private calculateTemplateMapKey() {\r\n        return this.report().programmingExercise.id! + '-template';\r\n    }\r\n}\r\n", "<div>\r\n    <div class=\"modal-header\">\r\n        <h3\r\n            class=\"modal-title\"\r\n            jhiTranslate=\"{{ diffForTemplateAndSolution() ? 'artemisApp.programmingExercise.diffReport.title' : 'artemisApp.programmingExercise.diffReport.titleForSubmissions' }}\"\r\n        ></h3>\r\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"close()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        @if (leftCommitFileContentByPath() && rightCommitFileContentByPath()) {\r\n            <div class=\"row mb-2\">\r\n                <jhi-git-diff-report\r\n                    [report]=\"report()\"\r\n                    [diffForTemplateAndSolution]=\"diffForTemplateAndSolution()\"\r\n                    [templateFileContentByPath]=\"leftCommitFileContentByPath()!\"\r\n                    [solutionFileContentByPath]=\"rightCommitFileContentByPath()!\"\r\n                />\r\n            </div>\r\n        } @else {\r\n            @if (!errorWhileFetchingRepos()) {\r\n                <div class=\"text-center\">\r\n                    <span class=\"spinner-border spinner-border-lg\" role=\"status\" aria-hidden=\"true\">\r\n                        <span class=\"sr-only\">Loading...</span>\r\n                    </span>\r\n                </div>\r\n            }\r\n        }\r\n        @if (errorWhileFetchingRepos()) {\r\n            <div>\r\n                <div class=\"alert alert-danger\">\r\n                    <div jhiTranslate=\"artemisApp.programmingExercise.diffReport.errorWhileFetchingRepos\"></div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "gbASA,IAAaA,GAA4B,IAAA,CAAnC,MAAOA,CAA4B,CACrCC,6BAA+B,IAAIC,EAEnCC,oCAAkC,CAC9B,OAAO,KAAKF,6BAA6BG,aAAY,CACzD,CAEAC,0BAA0BC,EAAsC,CAC5D,KAAKL,6BAA6BM,KAAKD,CAAI,CAC/C,4CATSN,EAA4B,6BAA5BA,EAA4BQ,QAA5BR,EAA4BS,UAAAC,WAFzB,MAAM,CAAA,SAETV,CAA4B,GAAA,2BEC7BW,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,sBAAA,CAAA,EAMJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,kBANYI,EAAA,CAAA,EAAAC,EAAA,SAAAC,EAAAC,OAAA,CAAA,EAAmB,6BAAAD,EAAAE,2BAAA,CAAA,EACwC,4BAAAF,EAAAG,4BAAA,CAAA,EACC,4BAAAH,EAAAI,6BAAA,CAAA,yBAMhEV,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EAAsBD,EAAA,EAAA,YAAA,EAAUG,EAAA,EACpCH,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;aAAA,4BANAA,EAAA,EAAA;aAAA,EAAAW,EAAA,EAAAC,EAAA,GAAA,CAAA,kBAAAR,EAAA,EAAAS,EAAAP,EAAAQ,wBAAA,EAAA,GAAA,CAAA,yBASAd,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACJF,EAAA,EAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,GDjBR,IAAae,GAA2B,IAAA,CAAlC,MAAOA,CAA2B,CACpC,OAAgBC,aAAe,kBAEdC,YAAcC,EAAOC,CAAc,EACnCC,2BAA6BF,EAAOG,CAA0B,EAC9DC,wCAA0CJ,EAAOK,CAAuC,EACxFC,6BAA+BN,EAAOO,CAA4B,EAE1ElB,OAASmB,EAAMC,SAAQ,EACvBnB,2BAA6BkB,EAAe,EAAI,EAChDE,sBAAwBF,EAAwC,IAAIG,GAAkC,EAEtGf,wBAA0BgB,EAAgB,EAAK,EAC/CrB,4BAA8BqB,EAAwCC,MAAS,EAC/ErB,6BAA+BoB,EAAwCC,MAAS,EAEzFC,aAAA,CACIC,EAAO,IAAK,CAER,KAAK1B,OAAM,EACX,IAAM2B,EAAiC,KAAK1B,2BAA0B,EACtE2B,EAAU,IAAWC,EAAA,sBACbF,EACA,MAAM,KAAKG,gCAA+B,EAE1C,MAAM,KAAKC,yDAAwD,CAE3E,EAAC,CACL,CAAC,CACL,CAEcD,iCAA+B,QAAAD,EAAA,sBACzC,MAAM,KAAKG,uBAAsB,EACjC,MAAM,KAAKC,uBAAsB,CACrC,GAEcA,wBAAsB,QAAAJ,EAAA,sBAChC,GAAI,CACA,IAAMK,EAAoB,MAAMC,EAAe,KAAKtB,2BAA2BuB,0CAA0C,KAAKpC,OAAM,EAAGqC,oBAAoBC,EAAG,CAAC,EAC/J,KAAKnC,6BAA6BoC,IAAIL,CAAiB,CAC3D,MAAY,CACR,KAAK3B,wBAAwBgC,IAAI,EAAI,CACzC,CACJ,GAEcR,0DAAwD,QAAAF,EAAA,sBAClE,GAAI,KAAK7B,OAAM,EAAGwC,6BAA8B,CAC5C,IAAMC,EAAM,KAAKzC,OAAM,EAAG0C,eACtB,KAAKrB,sBAAqB,EAAGsB,IAAIF,CAAG,GACpC,KAAKvC,4BAA4BqC,IAAI,KAAKlB,sBAAqB,EAAGuB,IAAIH,CAAG,CAAE,EAC3E,MAAM,KAAKI,4DAA2D,GAEtE,MAAM,KAAKC,wCAAuC,CAE1D,MACI,MAAM,KAAKC,0CAAyC,EACpD,MAAM,KAAKF,4DAA2D,CAE9E,GAEcC,yCAAuC,QAAAjB,EAAA,sBACjD,GAAI,CACA,IAAMmB,GACD,MAAMb,EACH,KAAKpB,wCAAwCkC,mDACzC,KAAKjD,OAAM,EAAGwC,6BACd,KAAKxC,OAAM,EAAG0C,cAAe,CAChC,IACC,IAAIpB,IACd,KAAKpB,4BAA4BqC,IAAIS,CAAgB,EACrD,KAAK3B,sBAAqB,EAAGkB,IAAI,KAAKvC,OAAM,EAAG0C,eAAiBM,CAAgB,EAChF,KAAK/B,6BAA6BiC,0BAA0B,KAAK7B,sBAAqB,CAAE,EACxF,MAAM,KAAKwB,4DAA2D,CAC1E,MAAY,CACR,KAAKtC,wBAAwBgC,IAAI,EAAI,CACzC,CACJ,GAEcQ,2CAAyC,QAAAlB,EAAA,sBACnD,IAAMY,EAAM,KAAKU,wBAAuB,EACpC,KAAK9B,sBAAqB,EAAGsB,IAAIF,CAAG,EACpC,KAAKvC,4BAA4BqC,IAAI,KAAKlB,sBAAqB,EAAGuB,IAAIH,CAAG,CAAE,EAE3E,MAAM,KAAKT,uBAAsB,CAEzC,GAEca,6DAA2D,QAAAhB,EAAA,sBACrE,IAAMY,EAAM,KAAKzC,OAAM,EAAGoD,gBACtB,KAAK/B,sBAAqB,EAAGsB,IAAIF,CAAG,EACpC,KAAKtC,6BAA6BoC,IAAI,KAAKlB,sBAAqB,EAAGuB,IAAIH,CAAG,CAAE,EAE5E,MAAM,KAAKY,yCAAwC,CAE3D,GAEcrB,wBAAsB,QAAAH,EAAA,sBAChC,IAAMY,EAAM,KAAKU,wBAAuB,EACxC,GAAI,CACA,IAAMG,GACD,MAAMnB,EAAe,KAAKtB,2BAA2B0C,0CAA0C,KAAKvD,OAAM,EAAGqC,oBAAoBC,EAAG,CAAC,IACtI,IAAIhB,IACR,KAAKpB,4BAA4BqC,IAAIe,CAAQ,EAC7C,KAAKjC,sBAAqB,EAAGkB,IAAIE,EAAKa,CAAQ,EAC9C,KAAKrC,6BAA6BiC,0BAA0B,KAAK7B,sBAAqB,CAAE,CAC5F,MAAY,CACR,KAAKd,wBAAwBgC,IAAI,EAAI,CACzC,CACJ,GAEcc,0CAAwC,QAAAxB,EAAA,sBAClD,GAAI,CACA,IAAMmB,GACD,MAAMb,EACH,KAAKpB,wCAAwCkC,mDACzC,KAAKjD,OAAM,EAAGwD,8BACd,KAAKxD,OAAM,EAAGoD,eAAgB,CACjC,IACC,IAAI9B,IACd,KAAKnB,6BAA6BoC,IAAIS,CAAgB,EACtD,KAAK3B,sBAAqB,EAAGkB,IAAI,KAAKvC,OAAM,EAAGoD,gBAAkBJ,CAAgB,EACjF,KAAK/B,6BAA6BiC,0BAA0B,KAAK7B,sBAAqB,CAAE,CAC5F,MAAY,CACR,KAAKd,wBAAwBgC,IAAI,EAAI,CACzC,CACJ,GAEAkB,OAAK,CACD,KAAK/C,YAAYgD,QAAO,CAC5B,CAEQP,yBAAuB,CAC3B,OAAO,KAAKnD,OAAM,EAAGqC,oBAAoBC,GAAM,WACnD,4CArIS9B,EAA2B,2BAA3BA,EAA2BmD,UAAA,CAAA,CAAA,2BAAA,CAAA,EAAAC,OAAA,CAAA5D,OAAA,CAAA,EAAA,QAAA,EAAAC,2BAAA,CAAA,EAAA,4BAAA,EAAAoB,sBAAA,CAAA,EAAA,uBAAA,CAAA,EAAAwC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,cAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,aAAA,QAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,MAAA,MAAA,EAAA,CAAA,EAAA,SAAA,6BAAA,4BAAA,2BAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,OAAA,SAAA,cAAA,OAAA,EAAA,iBAAA,mBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,QAAA,cAAA,EAAA,CAAA,eAAA,mEAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IChBxCvE,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,KAAA,CAAA,EAIAF,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EAA2DyE,EAAA,QAAA,UAAA,CAAA,OAASD,EAAAT,MAAA,CAAO,CAAA,EAAE7D,EAAA,EACjFH,EAAA,EAAA;KAAA,EAAAG,EAAA,EACAH,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,GAAA;SAAA,EAAAW,EAAA,GAAAgE,EAAA,EAAA,CAAA,EAAuE,GAAAC,EAAA,EAAA,CAAA,EAS9D,GAAAC,EAAA,EAAA,CAAA,EAgBb1E,EAAA,EACJH,EAAA,GAAA;CAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;CAAA,SAhCYI,EAAA,CAAA,EAAA0E,EAAA,eAAAL,EAAAjE,2BAAA,EAAA,kDAAA,+DAAA,EAKJJ,EAAA,CAAA,EAAAS,EAAA4D,EAAAhE,4BAAA,GAAAgE,EAAA/D,6BAAA,EAAA,GAAA,EAAA,EAkBAN,EAAA,CAAA,EAAAS,EAAA4D,EAAA3D,wBAAA,EAAA,GAAA,EAAA,kBDbMiE,EAAwBC,CAAkB,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SAE3CnE,CAA2B,GAAA",
  "names": ["CachedRepositoryFilesService", "cachedRepositoryFilesChanged", "EventEmitter", "getCachedRepositoryFilesObservable", "asObservable", "emitCachedRepositoryFiles", "data", "emit", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "report", "diffForTemplateAndSolution", "leftCommitFileContentByPath", "rightCommitFileContentByPath", "\u0275\u0275template", "GitDiffReportModalComponent_Conditional_12_Conditional_1_Template", "\u0275\u0275conditional", "errorWhileFetchingRepos", "GitDiffReportModalComponent", "WINDOW_CLASS", "activeModal", "inject", "NgbActiveModal", "programmingExerciseService", "ProgrammingExerciseService", "programmingExerciseParticipationService", "ProgrammingExerciseParticipationService", "cachedRepositoryFilesService", "CachedRepositoryFilesService", "input", "required", "cachedRepositoryFiles", "Map", "signal", "undefined", "constructor", "effect", "diffBetweenTemplateAndSolution", "untracked", "__async", "loadFilesForTemplateAndSolution", "loadRepositoryFilesForParticipationsFromCacheIfAvailable", "fetchTemplateRepoFiles", "fetchSolutionRepoFiles", "solutionRepoFiles", "firstValueFrom", "getSolutionRepositoryTestFilesWithContent", "programmingExercise", "id", "set", "participationIdForLeftCommit", "key", "leftCommitHash", "has", "get", "loadParticipationRepoFilesAtRightCommitFromCacheIfAvailable", "fetchParticipationRepoFilesAtLeftCommit", "loadTemplateRepoFilesFromCacheIfAvailable", "filesWithContent", "getParticipationRepositoryFilesWithContentAtCommit", "emitCachedRepositoryFiles", "calculateTemplateMapKey", "rightCommitHash", "fetchParticipationRepoFilesAtRightCommit", "response", "getTemplateRepositoryTestFilesWithContent", "participationIdForRightCommit", "close", "dismiss", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "GitDiffReportModalComponent_Conditional_11_Template", "GitDiffReportModalComponent_Conditional_12_Template", "GitDiffReportModalComponent_Conditional_13_Template", "\u0275\u0275propertyInterpolate", "GitDiffReportComponent", "TranslateDirective", "encapsulation", "changeDetection"]
}
