{
  "version": 3,
  "sources": ["src/main/webapp/app/exam/manage/exams/exam-checklist-component/exam-checklist.service.ts"],
  "sourcesContent": ["import { HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ExamChecklist } from 'app/entities/exam/exam-checklist.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\nimport { ExamManagementService } from 'app/exam/manage/exam-management.service';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExamChecklistService {\r\n    private examService = inject(ExamManagementService);\r\n\r\n    /**\r\n     * indicates whether all student exams are generated\r\n     * @param exam the corresponding exam\r\n     * @param examChecklist the examChecklist for the exam\r\n     */\r\n    checkAllExamsGenerated(exam: Exam, examChecklist: ExamChecklist): boolean {\r\n        return examChecklist.numberOfGeneratedStudentExams === exam.numberOfExamUsers;\r\n    }\r\n\r\n    /**\r\n     * Fetches examChecklist from the Server\r\n     * @param exam exam the checklist should be fetched\r\n     * @returns examChecklist as Observable\r\n     */\r\n    getExamStatistics(exam: Exam): Observable<ExamChecklist> {\r\n        return this.examService.getExamStatistics(exam.course!.id!, exam.id!).pipe(\r\n            filter((res) => !!res.body),\r\n            map((examStatistics: HttpResponse<ExamChecklist>) => examStatistics.body!),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * indicates whether the max points of the exam can be reached by the current configuration\r\n     * @param pointsExercisesEqual flag indicating whether within every exercise groups the max points equal\r\n     * @param exam the corresponding exam\r\n     */\r\n    checkTotalPointsMandatory(pointsExercisesEqual: boolean, exam: Exam): boolean {\r\n        let totalPointsMandatory = false;\r\n        let totalPointsMandatoryOptional = false;\r\n        let sumPointsExerciseGroupsMandatory = 0;\r\n        let sumPointsExerciseGroupsOptional = 0;\r\n\r\n        // calculate mandatory points and optional points\r\n        if (pointsExercisesEqual) {\r\n            exam.exerciseGroups!.forEach((exerciseGroup) => {\r\n                if (exerciseGroup!.exercises && exerciseGroup.exercises.length !== 0) {\r\n                    if (exerciseGroup.isMandatory) {\r\n                        sumPointsExerciseGroupsMandatory += exerciseGroup!.exercises![0]!.maxPoints!;\r\n                    } else {\r\n                        sumPointsExerciseGroupsOptional += exerciseGroup!.exercises![0]!.maxPoints!;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (sumPointsExerciseGroupsMandatory <= exam.examMaxPoints!) {\r\n                totalPointsMandatory = true;\r\n            }\r\n            if (sumPointsExerciseGroupsMandatory + sumPointsExerciseGroupsOptional >= exam.examMaxPoints!) {\r\n                totalPointsMandatoryOptional = true;\r\n            }\r\n        }\r\n        return totalPointsMandatory && totalPointsMandatoryOptional;\r\n    }\r\n\r\n    /**\r\n     * indicates whether the max points within every exercise group equal\r\n     * @param exam the corresponding exam\r\n     */\r\n    checkPointsExercisesEqual(exam: Exam): boolean {\r\n        let pointsExercisesEqual = true;\r\n        if (!exam.exerciseGroups) {\r\n            return false;\r\n        }\r\n        exam.exerciseGroups?.forEach((exerciseGroup) => {\r\n            let maxPoints = 0;\r\n            if (exerciseGroup.exercises && exerciseGroup.exercises!.length !== 0) {\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n                maxPoints = exerciseGroup.exercises?.[0].maxPoints!;\r\n            }\r\n            return exerciseGroup.exercises?.some((exercise) => {\r\n                if (exercise.maxPoints !== maxPoints) {\r\n                    pointsExercisesEqual = false;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n        });\r\n        return pointsExercisesEqual;\r\n    }\r\n\r\n    /**\r\n     * Method to calculate the number of Points in an exam\r\n     * @param pointsExercisesEqual flag indicating whether within every exercise groups the max points equal\r\n     * @param exam the corresponding exam\r\n     */\r\n    calculateExercisePoints(pointsExercisesEqual: boolean, exam: Exam): number {\r\n        let sumPointsExerciseGroups = 0;\r\n        if (pointsExercisesEqual) {\r\n            exam.exerciseGroups!.forEach((exerciseGroup) => {\r\n                if (exerciseGroup!.exercises && exerciseGroup.exercises.length !== 0) {\r\n                    sumPointsExerciseGroups += exerciseGroup!.exercises![0]!.maxPoints!;\r\n                }\r\n            });\r\n        }\r\n        return sumPointsExerciseGroups;\r\n    }\r\n\r\n    /**\r\n     * indicates whether every exercise group of an exam contains at least one exercise\r\n     * @param exam the corresponding exam\r\n     */\r\n    checkEachGroupContainsExercise(exam: Exam): boolean {\r\n        if (!exam.exerciseGroups) {\r\n            return false;\r\n        }\r\n        let allGroupsContainExercise = true;\r\n        exam.exerciseGroups!.some((exerciseGroup) => {\r\n            if (!exerciseGroup.exercises || exerciseGroup.exercises.length === 0) {\r\n                allGroupsContainExercise = false;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return allGroupsContainExercise;\r\n    }\r\n\r\n    /**\r\n     * indicates whether an exam has at least one exercise group\r\n     * @param exam the corresponding exam\r\n     */\r\n    checkAtLeastOneExerciseGroup(exam: Exam): boolean {\r\n        return (exam.exerciseGroups && exam.exerciseGroups.length > 0) ?? false;\r\n    }\r\n\r\n    /**\r\n     * indicates whether the number of exam exercises is in range between the number of mandatory exercise groups and the number of all exercise groups\r\n     * @param exam the corresponding exam\r\n     */\r\n    checkNumberOfExerciseGroups(exam: Exam): boolean {\r\n        const numberOfMandatoryExerciseGroups = exam.exerciseGroups?.filter((group) => group.isMandatory).length ?? 0;\r\n        return (\r\n            (exam.exerciseGroups && numberOfMandatoryExerciseGroups <= (exam.numberOfExercisesInExam ?? 0) && (exam.numberOfExercisesInExam ?? 0) <= exam.exerciseGroups.length) ??\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * indicates whether at least one student is registered for an exam\r\n     * @param exam the corresponding exam\r\n     */\r\n    checkAtLeastOneRegisteredStudent(exam: Exam): boolean {\r\n        return !!exam.numberOfExamUsers && exam.numberOfExamUsers > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the topic to get updates of submitted exams.\r\n     * @param exam corresponding exam\r\n     */\r\n    getSubmittedTopic(exam: Exam) {\r\n        return `/topic/exam/${exam.id}/submitted`;\r\n    }\r\n\r\n    /**\r\n     * Returns the topic to get updates of started exams\r\n     * @param exam corresponding exam\r\n     */\r\n    getStartedTopic(exam: Exam) {\r\n        return `/topic/exam/${exam.id}/started`;\r\n    }\r\n}\r\n"],
  "mappings": "uGASA,IAAaA,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,YAAcC,EAAOC,CAAqB,EAOlDC,uBAAuBC,EAAYC,EAA4B,CAC3D,OAAOA,EAAcC,gCAAkCF,EAAKG,iBAChE,CAOAC,kBAAkBJ,EAAU,CACxB,OAAO,KAAKJ,YAAYQ,kBAAkBJ,EAAKK,OAAQC,GAAKN,EAAKM,EAAG,EAAEC,KAClEC,EAAQC,GAAQ,CAAC,CAACA,EAAIC,IAAI,EAC1BC,EAAKC,GAAgDA,EAAeF,IAAK,CAAC,CAElF,CAOAG,0BAA0BC,EAA+Bd,EAAU,CAC/D,IAAIe,EAAuB,GACvBC,EAA+B,GAC/BC,EAAmC,EACnCC,EAAkC,EAGtC,OAAIJ,IACAd,EAAKmB,eAAgBC,QAASC,GAAiB,CACvCA,EAAeC,WAAaD,EAAcC,UAAUC,SAAW,IAC3DF,EAAcG,YACdP,GAAoCI,EAAeC,UAAW,CAAC,EAAGG,UAElEP,GAAmCG,EAAeC,UAAW,CAAC,EAAGG,UAG7E,CAAC,EAEGR,GAAoCjB,EAAK0B,gBACzCX,EAAuB,IAEvBE,EAAmCC,GAAmClB,EAAK0B,gBAC3EV,EAA+B,KAGhCD,GAAwBC,CACnC,CAMAW,0BAA0B3B,EAAU,CAChC,IAAIc,EAAuB,GAC3B,OAAKd,EAAKmB,gBAGVnB,EAAKmB,gBAAgBC,QAASC,GAAiB,CAC3C,IAAII,EAAY,EAChB,OAAIJ,EAAcC,WAAaD,EAAcC,UAAWC,SAAW,IAE/DE,EAAYJ,EAAcC,YAAY,CAAC,EAAEG,WAEtCJ,EAAcC,WAAWM,KAAMC,GAC9BA,EAASJ,YAAcA,GACvBX,EAAuB,GAChB,IAEJ,EACV,CACL,CAAC,EACMA,GAhBI,EAiBf,CAOAgB,wBAAwBhB,EAA+Bd,EAAU,CAC7D,IAAI+B,EAA0B,EAC9B,OAAIjB,GACAd,EAAKmB,eAAgBC,QAASC,GAAiB,CACvCA,EAAeC,WAAaD,EAAcC,UAAUC,SAAW,IAC/DQ,GAA2BV,EAAeC,UAAW,CAAC,EAAGG,UAEjE,CAAC,EAEEM,CACX,CAMAC,+BAA+BhC,EAAU,CACrC,GAAI,CAACA,EAAKmB,eACN,MAAO,GAEX,IAAIc,EAA2B,GAC/BjC,OAAAA,EAAKmB,eAAgBS,KAAMP,GACnB,CAACA,EAAcC,WAAaD,EAAcC,UAAUC,SAAW,GAC/DU,EAA2B,GACpB,IAEJ,EACV,EACMA,CACX,CAMAC,6BAA6BlC,EAAU,CACnC,OAAQA,EAAKmB,gBAAkBnB,EAAKmB,eAAeI,OAAS,IAAM,EACtE,CAMAY,4BAA4BnC,EAAU,CAClC,IAAMoC,EAAkCpC,EAAKmB,gBAAgBX,OAAQ6B,GAAUA,EAAMb,WAAW,EAAED,QAAU,EAC5G,OACKvB,EAAKmB,gBAAkBiB,IAAoCpC,EAAKsC,yBAA2B,KAAOtC,EAAKsC,yBAA2B,IAAMtC,EAAKmB,eAAeI,SAC7J,EAER,CAMAgB,iCAAiCvC,EAAU,CACvC,MAAO,CAAC,CAACA,EAAKG,mBAAqBH,EAAKG,kBAAoB,CAChE,CAMAqC,kBAAkBxC,EAAU,CACxB,MAAO,eAAeA,EAAKM,EAAE,YACjC,CAMAmC,gBAAgBzC,EAAU,CACtB,MAAO,eAAeA,EAAKM,EAAE,UACjC,4CAjKSX,EAAoB,6BAApBA,EAAoB+C,QAApB/C,EAAoBgD,UAAAC,WADP,MAAM,CAAA,SACnBjD,CAAoB,GAAA",
  "names": ["ExamChecklistService", "examService", "inject", "ExamManagementService", "checkAllExamsGenerated", "exam", "examChecklist", "numberOfGeneratedStudentExams", "numberOfExamUsers", "getExamStatistics", "course", "id", "pipe", "filter", "res", "body", "map", "examStatistics", "checkTotalPointsMandatory", "pointsExercisesEqual", "totalPointsMandatory", "totalPointsMandatoryOptional", "sumPointsExerciseGroupsMandatory", "sumPointsExerciseGroupsOptional", "exerciseGroups", "forEach", "exerciseGroup", "exercises", "length", "isMandatory", "maxPoints", "examMaxPoints", "checkPointsExercisesEqual", "some", "exercise", "calculateExercisePoints", "sumPointsExerciseGroups", "checkEachGroupContainsExercise", "allGroupsContainExercise", "checkAtLeastOneExerciseGroup", "checkNumberOfExerciseGroups", "numberOfMandatoryExerciseGroups", "group", "numberOfExercisesInExam", "checkAtLeastOneRegisteredStudent", "getSubmittedTopic", "getStartedTopic", "factory", "\u0275fac", "providedIn"]
}
