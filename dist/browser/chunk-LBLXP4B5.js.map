{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/components/confirm-autofocus-button.component.ts", "src/main/webapp/app/shared/components/confirm-autofocus-button.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, inject } from '@angular/core';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport { ConfirmAutofocusModalComponent } from 'app/shared/components/confirm-autofocus-modal.component';\r\nimport { ButtonComponent } from './button.component';\r\n\r\n@Component({\r\n    selector: 'jhi-confirm-button',\r\n    templateUrl: './confirm-autofocus-button.component.html',\r\n    imports: [ButtonComponent],\r\n})\r\nexport class ConfirmAutofocusButtonComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    @Input() icon: IconProp;\r\n    @Input() title: string;\r\n    @Input() tooltip: string;\r\n    @Input() disabled = false;\r\n    @Input() isLoading = false;\r\n\r\n    @Input() confirmationTitle: string;\r\n    @Input() confirmationTitleTranslationParams?: Record<string, string>;\r\n    @Input() confirmationText: string;\r\n    @Input() translateText?: boolean;\r\n    @Input() textIsMarkdown?: boolean;\r\n    @Output() onConfirm = new EventEmitter<void>();\r\n    @Output() onCancel = new EventEmitter<void>();\r\n\r\n    @ViewChild('content') content?: TemplateRef<any>;\r\n\r\n    /**\r\n     * open confirmation modal with text and title\r\n     */\r\n    onOpenConfirmationModal() {\r\n        const modalRef: NgbModalRef = this.modalService.open(ConfirmAutofocusModalComponent, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n        });\r\n        if (this.textIsMarkdown === true) {\r\n            modalRef.componentInstance.text = htmlForMarkdown(this.confirmationText);\r\n            modalRef.componentInstance.textIsMarkdown = true;\r\n        } else {\r\n            modalRef.componentInstance.text = this.confirmationText;\r\n            modalRef.componentInstance.textIsMarkdown = false;\r\n        }\r\n        modalRef.componentInstance.title = this.confirmationTitle;\r\n        modalRef.componentInstance.titleTranslationParams = this.confirmationTitleTranslationParams;\r\n        if (this.translateText !== undefined) {\r\n            modalRef.componentInstance.translateText = this.translateText;\r\n        } else {\r\n            modalRef.componentInstance.translateText = false;\r\n        }\r\n        modalRef.componentInstance.contentRef = this.content;\r\n        modalRef.result.then(\r\n            () => {\r\n                this.onConfirm.emit();\r\n            },\r\n            () => {\r\n                this.onCancel.emit();\r\n            },\r\n        );\r\n    }\r\n}\r\n", "<jhi-button [icon]=\"icon\" [title]=\"title\" [tooltip]=\"tooltip\" [disabled]=\"disabled\" [isLoading]=\"isLoading\" (onClick)=\"onOpenConfirmationModal()\" />\r\n<ng-template #content>\r\n    <ng-content />\r\n</ng-template>\r\n"],
  "mappings": "iYCEIA,EAAA,EAAA;KAAA,EAAAC,EAAA,CAAA,EACJD,EAAA,EAAA;CAAA,GDSA,IAAaE,GAA+B,IAAA,CAAtC,MAAOA,CAA+B,CAChCC,aAAeC,EAAOC,CAAQ,EAE7BC,KACAC,MACAC,QACAC,SAAW,GACXC,UAAY,GAEZC,kBACAC,mCACAC,iBACAC,cACAC,eACCC,UAAY,IAAIC,EAChBC,SAAW,IAAID,EAEHE,QAKtBC,yBAAuB,CACnB,IAAMC,EAAwB,KAAKlB,aAAamB,KAAKC,EAAgC,CACjFC,KAAM,KACNC,SAAU,SACb,EACG,KAAKV,iBAAmB,IACxBM,EAASK,kBAAkBC,KAAOC,EAAgB,KAAKf,gBAAgB,EACvEQ,EAASK,kBAAkBX,eAAiB,KAE5CM,EAASK,kBAAkBC,KAAO,KAAKd,iBACvCQ,EAASK,kBAAkBX,eAAiB,IAEhDM,EAASK,kBAAkBnB,MAAQ,KAAKI,kBACxCU,EAASK,kBAAkBG,uBAAyB,KAAKjB,mCACrD,KAAKE,gBAAkBgB,OACvBT,EAASK,kBAAkBZ,cAAgB,KAAKA,cAEhDO,EAASK,kBAAkBZ,cAAgB,GAE/CO,EAASK,kBAAkBK,WAAa,KAAKZ,QAC7CE,EAASW,OAAOC,KACZ,IAAK,CACD,KAAKjB,UAAUkB,KAAI,CACvB,EACA,IAAK,CACD,KAAKhB,SAASgB,KAAI,CACtB,CAAC,CAET,4CAlDShC,EAA+B,2BAA/BA,EAA+BiC,UAAA,CAAA,CAAA,oBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,+jBCZ5CE,EAAA,EAAA,aAAA,CAAA,EAA4GC,EAAA,UAAA,UAAA,CAAAC,OAAAC,EAAAC,CAAA,EAAAC,EAAWN,EAAAlB,wBAAA,CAAyB,CAAA,CAAA,EAAhJyB,EAAA,EACA7C,EAAA,EAAA;CAAA,EAAA8C,EAAA,EAAAC,EAAA,EAAA,EAAA,cAAA,KAAA,EAAAC,CAAA,EAGAhD,EAAA,EAAA;CAAA,OAJYiD,EAAA,OAAAX,EAAAhC,IAAA,EAAa,QAAAgC,EAAA/B,KAAA,EAAgB,UAAA+B,EAAA9B,OAAA,EAAoB,WAAA8B,EAAA7B,QAAA,EAAsB,YAAA6B,EAAA5B,SAAA,iBDUrEwC,CAAe,EAAAC,cAAA,CAAA,CAAA,SAEhBjD,CAA+B,GAAA",
  "names": ["\u0275\u0275text", "\u0275\u0275projection", "ConfirmAutofocusButtonComponent", "modalService", "inject", "NgbModal", "icon", "title", "tooltip", "disabled", "isLoading", "confirmationTitle", "confirmationTitleTranslationParams", "confirmationText", "translateText", "textIsMarkdown", "onConfirm", "EventEmitter", "onCancel", "content", "onOpenConfirmationModal", "modalRef", "open", "ConfirmAutofocusModalComponent", "size", "backdrop", "componentInstance", "text", "htmlForMarkdown", "titleTranslationParams", "undefined", "contentRef", "result", "then", "emit", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "\u0275\u0275template", "ConfirmAutofocusButtonComponent_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275property", "ButtonComponent", "encapsulation"]
}
