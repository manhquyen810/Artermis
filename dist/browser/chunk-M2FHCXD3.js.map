{"version":3,"sources":["src/main/webapp/app/exam/manage/exam-exercise-update.service.ts","node_modules/html-diff-ts/lib/esm/types.js","node_modules/html-diff-ts/lib/esm/Match.js","node_modules/html-diff-ts/lib/esm/Utils.js","node_modules/html-diff-ts/lib/esm/MatchFinder.js","node_modules/html-diff-ts/lib/esm/Operation.js","node_modules/html-diff-ts/lib/esm/MatchOptions.js","node_modules/html-diff-ts/lib/esm/WordSplitter.js","node_modules/html-diff-ts/lib/esm/Diff.js","node_modules/html-diff-ts/lib/esm/index.mjs","src/main/webapp/app/exam/participate/exercises/exam-exercise-update-highlighter/exam-exercise-update-highlighter.component.ts","src/main/webapp/app/exam/participate/exercises/exam-exercise-update-highlighter/exam-exercise-update-highlighter.component.html"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\n\r\nexport interface ExamExerciseUpdate {\r\n    exerciseId: number;\r\n    problemStatement: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExamExerciseUpdateService {\r\n    private examExerciseIdAndProblemStatementSource = new Subject<ExamExerciseUpdate>();\r\n    currentExerciseIdAndProblemStatement = this.examExerciseIdAndProblemStatementSource.asObservable();\r\n\r\n    private examExerciseIdForNavigationSource = new BehaviorSubject<number>(-1);\r\n    currentExerciseIdForNavigation = this.examExerciseIdForNavigationSource.asObservable();\r\n\r\n    navigateToExamExercise(exerciseId: number) {\r\n        this.examExerciseIdForNavigationSource.next(exerciseId);\r\n    }\r\n\r\n    updateLiveExamExercise(exerciseId: number, problemStatement: string) {\r\n        this.examExerciseIdAndProblemStatementSource.next({ exerciseId, problemStatement });\r\n    }\r\n}\r\n","export var Mode = /*#__PURE__*/function (Mode) {\n  Mode[Mode[\"character\"] = 0] = \"character\";\n  Mode[Mode[\"tag\"] = 1] = \"tag\";\n  Mode[Mode[\"whitespace\"] = 2] = \"whitespace\";\n  Mode[Mode[\"number\"] = 3] = \"number\";\n  Mode[Mode[\"entity\"] = 4] = \"entity\";\n  return Mode;\n}(Mode || {});\nexport var Action = /*#__PURE__*/function (Action) {\n  Action[Action[\"equal\"] = 0] = \"equal\";\n  Action[Action[\"delete\"] = 1] = \"delete\";\n  Action[Action[\"insert\"] = 2] = \"insert\";\n  Action[Action[\"none\"] = 3] = \"none\";\n  Action[Action[\"replace\"] = 4] = \"replace\";\n  return Action;\n}(Action || {});\n\n","class Match {\n  startInOld;\n  startInNew;\n  size;\n  constructor(startInOld, startInNew, size) {\n    this.startInOld = startInOld;\n    this.startInNew = startInNew;\n    this.size = size;\n  }\n  get endInOld() {\n    return this.startInOld + this.size;\n  }\n  get endInNew() {\n    return this.startInNew + this.size;\n  }\n}\n\nexport { Match as default };","const tagRegex = /^\\s*<\\/?[^>]+>\\s*$/;\nconst tagWordRegex = /<[^\\s>]+/;\nconst whitespaceRegex = /^(\\s|&nbsp;)+$/;\nconst wordRegex = /[\\w\\#@]+/;\nconst specialCaseWordTags = ['<img'];\nfunction isTag(item) {\n  if (specialCaseWordTags.some(re => item !== null && item.startsWith(re))) {\n    return false;\n  }\n  return tagRegex.test(item);\n}\nfunction stripTagAttributes(word) {\n  let tags = tagWordRegex.exec(word) || [''];\n  word = tags[0] + (word.endsWith('/>') ? '/>' : '>');\n  return word;\n}\nfunction wrapText(text, tagName, cssClass) {\n  return ['<', tagName, ' class=\"', cssClass, '\">', text, '</', tagName, '>'].join('');\n}\nfunction isStartOfTag(val) {\n  return val === '<';\n}\nfunction isEndOfTag(val) {\n  return val === '>';\n}\nfunction isStartOfEntity(val) {\n  return val === '&';\n}\nfunction isEndOfEntity(val) {\n  return val === ';';\n}\nfunction isWhiteSpace(value) {\n  return whitespaceRegex.test(value);\n}\nfunction stripAnyAttributes(word) {\n  if (isTag(word)) {\n    return stripTagAttributes(word);\n  }\n  return word;\n}\nfunction isNumber(text) {\n  return /^\\d$/.test(text);\n}\nfunction isWord(text) {\n  return wordRegex.test(text);\n}\nexport { isTag, stripTagAttributes, wrapText, isStartOfTag, isEndOfTag, isStartOfEntity, isEndOfEntity, isWhiteSpace, stripAnyAttributes, isWord, isNumber };\n","import Match from './Match';\nimport * as Utils from './Utils';\nfunction putNewWord(block, word, blockSize) {\n  block.push(word);\n  if (block.length > blockSize) {\n    block.shift();\n  }\n  if (block.length !== blockSize) {\n    return null;\n  }\n  return block.join('');\n}\n// Finds the longest match in given texts. It uses indexing with fixed granularity that is used to compare blocks of text.\nclass MatchFinder {\n  oldWords;\n  newWords;\n  startInOld;\n  endInOld;\n  startInNew;\n  endInNew;\n  options;\n  wordIndices;\n  constructor({\n    oldWords,\n    newWords,\n    startInOld,\n    endInOld,\n    startInNew,\n    endInNew,\n    options\n  }) {\n    this.oldWords = oldWords;\n    this.newWords = newWords;\n    this.startInOld = startInOld;\n    this.endInOld = endInOld;\n    this.startInNew = startInNew;\n    this.endInNew = endInNew;\n    this.options = options;\n    this.wordIndices = new Map();\n  }\n  indexNewWords() {\n    this.wordIndices = new Map();\n    let block = [];\n    for (let i = this.startInNew; i < this.endInNew; i++) {\n      // if word is a tag, we should ignore attributes as attribute changes are not supported (yet)\n      let word = this.normalizeForIndex(this.newWords[i]);\n      let key = putNewWord(block, word, this.options.blockSize);\n      if (key === null) {\n        continue;\n      }\n      if (this.wordIndices.has(key)) {\n        this.wordIndices.get(key).push(i);\n      } else {\n        this.wordIndices.set(key, [i]);\n      }\n    }\n  }\n  // Converts the word to index-friendly value so it can be compared with other similar words\n  normalizeForIndex(word) {\n    word = Utils.stripAnyAttributes(word);\n    if (this.options.ignoreWhitespaceDifferences && Utils.isWhiteSpace(word)) {\n      return ' ';\n    }\n    return word;\n  }\n  findMatch() {\n    this.indexNewWords();\n    this.removeRepeatingWords();\n    if (this.wordIndices.size === 0) {\n      return null;\n    }\n    let bestMatchInOld = this.startInOld;\n    let bestMatchInNew = this.startInNew;\n    let bestMatchSize = 0;\n    let matchLengthAt = new Map();\n    const blockSize = this.options.blockSize;\n    let block = [];\n    for (let indexInOld = this.startInOld; indexInOld < this.endInOld; indexInOld++) {\n      let word = this.normalizeForIndex(this.oldWords[indexInOld]);\n      let index = putNewWord(block, word, blockSize);\n      if (index === null) {\n        continue;\n      }\n      let newMatchLengthAt = new Map();\n      if (!this.wordIndices.has(index)) {\n        matchLengthAt = newMatchLengthAt;\n        continue;\n      }\n      for (let indexInNew of this.wordIndices.get(index)) {\n        let newMatchLength = (matchLengthAt.has(indexInNew - 1) ? matchLengthAt.get(indexInNew - 1) : 0) + 1;\n        newMatchLengthAt.set(indexInNew, newMatchLength);\n        if (newMatchLength > bestMatchSize) {\n          bestMatchInOld = indexInOld - newMatchLength - blockSize + 2;\n          bestMatchInNew = indexInNew - newMatchLength - blockSize + 2;\n          bestMatchSize = newMatchLength;\n        }\n      }\n      matchLengthAt = newMatchLengthAt;\n    }\n    return bestMatchSize !== 0 ? new Match(bestMatchInOld, bestMatchInNew, bestMatchSize + blockSize - 1) : null;\n  }\n  // This method removes words that occur too many times. This way it reduces total count of comparison operations\n  // and as result the diff algoritm takes less time. But the side effect is that it may detect false differences of\n  // the repeating words.\n  removeRepeatingWords() {\n    let threshold = this.newWords.length + this.options.repeatingWordsAccuracy;\n    let repeatingWords = Array.from(this.wordIndices.entries()).filter(i => i[1].length > threshold).map(i => i[0]);\n    for (let w of repeatingWords) {\n      this.wordIndices.delete(w);\n    }\n  }\n}\n\nexport { MatchFinder as default };","class Operation {\n  action;\n  startInOld;\n  endInOld;\n  startInNew;\n  endInNew;\n  constructor({\n    action,\n    startInOld,\n    endInOld,\n    startInNew,\n    endInNew\n  }) {\n    this.action = action;\n    this.startInOld = startInOld;\n    this.endInOld = endInOld;\n    this.startInNew = startInNew;\n    this.endInNew = endInNew;\n  }\n}\n\nexport { Operation as default };","export default {\n  blockSize: 0,\n  repeatingWordsAccuracy: 0.0,\n  ignoreWhitespaceDifferences: false\n};\n","import { Mode } from './types';\nimport * as Utils from './Utils';\nclass WordSplitter {\n  static state = {\n    mode: Mode.character,\n    currentWord: [],\n    words: []\n  };\n  static blockLocations;\n  static prepare() {\n    this.state = {\n      mode: Mode.character,\n      currentWord: [],\n      words: []\n    };\n    this.blockLocations = [];\n  }\n  static convertHtmlToListOfWords(text, blockExpressions = []) {\n    this.prepare();\n    this.findBlocks(text, blockExpressions);\n    const isBlockCheckRequired = !!this.blockLocations.length;\n    let isGrouping = false;\n    let groupingUntil = -1;\n    let blockLocation;\n    for (let idx = 0; idx < text.length; idx++) {\n      var character = text[idx];\n      // Don't bother executing block checks if we don't have any blocks to check for!\n      if (isBlockCheckRequired) {\n        // Check if we have completed grouping a text sequence/block\n        if (groupingUntil === idx) {\n          groupingUntil = -1;\n          isGrouping = false;\n          this.state.currentWord.push(character);\n          const originalWord = this.state.currentWord.join('');\n          if (blockLocation?.targetBoundaries) {\n            const newWord = originalWord.slice(blockLocation?.targetBoundaries.starts, blockLocation?.targetBoundaries.ends);\n            this.state.words.push([newWord, originalWord]);\n          } else {\n            this.state.words.push([originalWord]);\n          }\n          this.state.currentWord = [];\n          this.state.mode = Mode.character;\n          blockLocation = undefined;\n          continue;\n        }\n        // Check if we need to group the next text sequence/block;\n        let newBlockLocation = this.blockLocations.find(el => el.wordBoundaries.starts === idx);\n        if (newBlockLocation) {\n          blockLocation = newBlockLocation;\n          if (this.state.currentWord.length !== 0) {\n            this.state.words.push([this.state.currentWord.join('')]);\n            this.state.currentWord = [];\n          }\n          isGrouping = true;\n          groupingUntil = blockLocation.wordBoundaries.ends;\n        }\n        // if we are grouping, then we don't care about what type of character we have, it's going to be treated as a word\n        if (isGrouping) {\n          this.state.currentWord.push(character);\n          this.state.mode = Mode.character;\n          continue;\n        }\n      }\n      switch (this.state.mode) {\n        case Mode.character:\n          if (Utils.isStartOfTag(character)) {\n            this.addClearWordSwitchMode('<', Mode.tag);\n          } else if (Utils.isStartOfEntity(character)) {\n            this.addClearWordSwitchMode(character, Mode.entity);\n          } else if (Utils.isWhiteSpace(character)) {\n            this.addClearWordSwitchMode(character, Mode.whitespace);\n          } else if (Utils.isNumber(character)) {\n            this.addClearWordSwitchMode(character, Mode.number);\n          } else if (Utils.isWord(character) && (this.state.currentWord.length === 0 || Utils.isWord(this.state.currentWord[this.state.currentWord.length - 1]))) {\n            this.state.currentWord.push(character);\n          } else {\n            this.addClearWordSwitchMode(character, Mode.character);\n          }\n          break;\n        case Mode.tag:\n          if (Utils.isEndOfTag(character)) {\n            this.state.currentWord.push(character);\n            this.state.words.push([this.state.currentWord.join('')]);\n            this.state.currentWord = [];\n            this.state.mode = Mode.character;\n          } else {\n            this.state.currentWord.push(character);\n          }\n          break;\n        case Mode.number:\n          this.state.words.push([this.state.currentWord.join('')]);\n          this.state.currentWord = [];\n          if (Utils.isStartOfTag(character)) {\n            this.addClearWordSwitchMode(character, Mode.tag);\n          } else if (Utils.isStartOfEntity(character)) {\n            this.addClearWordSwitchMode(character, Mode.entity);\n          } else if (Utils.isNumber(character)) {\n            this.addClearWordSwitchMode(character, Mode.number);\n          } else if (Utils.isWhiteSpace(character)) {\n            this.state.currentWord.push(character);\n          } else {\n            this.addClearWordSwitchMode(character, Mode.character);\n          }\n          break;\n        case Mode.whitespace:\n          if (Utils.isStartOfTag(character)) {\n            this.addClearWordSwitchMode(character, Mode.tag);\n          } else if (Utils.isStartOfEntity(character)) {\n            this.addClearWordSwitchMode(character, Mode.entity);\n          } else if (Utils.isNumber(character)) {\n            this.addClearWordSwitchMode(character, Mode.number);\n          } else if (Utils.isWhiteSpace(character)) {\n            this.state.currentWord.push(character);\n          } else {\n            this.addClearWordSwitchMode(character, Mode.character);\n          }\n          break;\n        case Mode.entity:\n          if (Utils.isStartOfTag(character)) {\n            this.addClearWordSwitchMode(character, Mode.tag);\n          } else if (Utils.isNumber(character)) {\n            this.addClearWordSwitchMode(character, Mode.number);\n          } else if (Utils.isWhiteSpace(character)) {\n            this.addClearWordSwitchMode(character, Mode.whitespace);\n          } else if (Utils.isEndOfEntity(character)) {\n            let switchToNextMode = true;\n            if (this.state.currentWord.length !== 0) {\n              this.state.currentWord.push(character);\n              this.state.words.push([this.state.currentWord.join('')]);\n            }\n            if (switchToNextMode) {\n              this.state.currentWord = [];\n              this.state.mode = Mode.character;\n            }\n          } else if (Utils.isWord(character)) {\n            this.state.currentWord.push(character);\n          } else {\n            this.addClearWordSwitchMode(character, Mode.character);\n          }\n          break;\n      }\n    }\n    if (this.state.currentWord.length !== 0) {\n      this.state.words.push([this.state.currentWord.join('')]);\n    }\n    return this.state.words;\n  }\n  static addClearWordSwitchMode(character, mode) {\n    if (this.state.currentWord.length !== 0) {\n      this.state.words.push([this.state.currentWord.join('')]);\n    }\n    this.state.currentWord = [character];\n    this.state.mode = mode;\n  }\n  static findBlocks(text, blockExpressions) {\n    blockExpressions.forEach(exp => {\n      const matches = text.matchAll(exp.exp);\n      for (let match of matches) {\n        if (match.index !== undefined) {\n          if (this.blockLocations.find(el => el.wordBoundaries.starts <= (match.index || 0) && (match.index || 0) <= el.wordBoundaries.ends)) {\n            throw new Error('One or more block expressions result in a text sequence that overlaps. Current expression: ' + exp.exp.toString());\n          }\n          const target = exp.compareBy && [...match[0].matchAll(exp.compareBy)][0];\n          if (target && target.index !== undefined) {\n            this.blockLocations.push({\n              wordBoundaries: {\n                starts: match.index,\n                ends: match.index + match[0].length - 1\n              },\n              targetBoundaries: {\n                starts: target.index,\n                ends: target.index + target[0].length\n              }\n            });\n          } else {\n            this.blockLocations.push({\n              wordBoundaries: {\n                starts: match.index,\n                ends: match.index + match[0].length - 1\n              }\n            });\n          }\n        }\n      }\n    });\n  }\n}\nexport default WordSplitter;\n","import { Action } from './types';\nimport Match from './Match';\nimport MatchFinder from './MatchFinder';\nimport Operation from './Operation';\nimport MatchOptions from './MatchOptions';\nimport WordSplitter from './WordSplitter';\nimport * as Utils from './Utils';\n// This value defines balance between speed and memory utilization. The higher it is the faster it works and more memory consumes.\nconst MatchGranuarityMaximum = 4;\nconst specialCaseClosingTags = new Map([['</strong>', 0], ['</em>', 0], ['</b>', 0], ['</i>', 0], ['</big>', 0], ['</small>', 0], ['</u>', 0], ['</sub>', 0], ['</strike>', 0], ['</s>', 0], ['</dfn>', 0]]);\nconst specialCaseOpeningTagRegex = /<((strong)|(b)|(i)|(dfn)|(em)|(big)|(small)|(u)|(sub)|(sup)|(strike)|(s))[\\>\\s]+/gi;\nclass HtmlDiff {\n  content;\n  newText;\n  oldText;\n  specialTagDiffStack;\n  newWords;\n  oldWords;\n  orinalWordsInNew;\n  orinalWordsInOld;\n  matchGranularity;\n  blockExpressions;\n  repeatingWordsAccuracy;\n  ignoreWhiteSpaceDifferences;\n  orphanMatchThreshold;\n  constructor(oldText, newText) {\n    this.content = [];\n    this.newText = newText;\n    this.oldText = oldText;\n    this.specialTagDiffStack = [];\n    this.newWords = [];\n    this.orinalWordsInNew = new Map();\n    this.oldWords = [];\n    this.orinalWordsInOld = new Map();\n    this.matchGranularity = 0;\n    this.blockExpressions = [];\n    this.repeatingWordsAccuracy = 1.0;\n    this.ignoreWhiteSpaceDifferences = false;\n    this.orphanMatchThreshold = 0.0;\n    this.addBlockExpression = this.addBlockExpression.bind(this);\n  }\n  diff() {\n    if (this.oldText === this.newText) {\n      return this.newText;\n    }\n    this.splitInputsIntoWords();\n    this.matchGranularity = Math.min(MatchGranuarityMaximum, this.oldWords.length, this.newWords.length);\n    let operations = this.operations();\n    // set original words\n    this.orinalWordsInOld.forEach((value, key) => {\n      this.oldWords[key] = value;\n    });\n    this.orinalWordsInNew.forEach((value, key) => {\n      this.newWords[key] = value;\n    });\n    for (let item of operations) {\n      this.performOperation(item);\n    }\n    return this.content.join('');\n  }\n  addBlockExpression(exp) {\n    this.blockExpressions.push(exp);\n  }\n  splitInputsIntoWords() {\n    const words = WordSplitter.convertHtmlToListOfWords(this.oldText, this.blockExpressions);\n    words.forEach((el, idx) => {\n      el[1] && this.orinalWordsInOld.set(idx, el[1]);\n    });\n    this.oldWords = words.map(el => el[0]);\n    //free memory, allow it for GC\n    this.oldText = '';\n    const newWords = WordSplitter.convertHtmlToListOfWords(this.newText, this.blockExpressions);\n    newWords.forEach((el, idx) => el[1] && this.orinalWordsInNew.set(idx, el[1]));\n    this.newWords = newWords.map(el => el[0]);\n    //free memory, allow it for GC\n    this.newText = '';\n  }\n  performOperation(opp) {\n    switch (opp.action) {\n      case Action.equal:\n        this.processEqualOperation(opp);\n        break;\n      case Action.delete:\n        this.processDeleteOperation(opp, 'diffdel');\n        break;\n      case Action.insert:\n        this.processInsertOperation(opp, 'diffins');\n        break;\n      case Action.none:\n        break;\n      case Action.replace:\n        this.processReplaceOperation(opp);\n        break;\n    }\n  }\n  processReplaceOperation(opp) {\n    this.processDeleteOperation(opp, 'diffmod');\n    this.processInsertOperation(opp, 'diffmod');\n  }\n  processInsertOperation(opp, cssClass) {\n    let text = this.newWords.filter((s, pos) => pos >= opp.startInNew && pos < opp.endInNew);\n    this.insertTag('ins', cssClass, text);\n  }\n  processDeleteOperation(opp, cssClass) {\n    let text = this.oldWords.filter((s, pos) => pos >= opp.startInOld && pos < opp.endInOld);\n    this.insertTag('del', cssClass, text);\n  }\n  processEqualOperation(opp) {\n    let result = this.newWords.filter((s, pos) => pos >= opp.startInNew && pos < opp.endInNew);\n    this.content.push(result.join(''));\n  }\n  insertTag(tag, cssClass, content) {\n    let length, nonTags, position, rendering, tags;\n    rendering = '';\n    position = 0;\n    length = content.length;\n    while (true) {\n      if (position >= length) {\n        break;\n      }\n      nonTags = this.consecutiveWhere(position, content, x => !Utils.isTag(x));\n      position += nonTags.length;\n      if (nonTags.length !== 0) {\n        rendering += `<${tag} class=\"${cssClass}\">${nonTags.join('')}</${tag}>`;\n      }\n      if (position >= length) {\n        break;\n      }\n      tags = this.consecutiveWhere(position, content, Utils.isTag);\n      position += tags.length;\n      rendering += tags.join('');\n    }\n    this.content.push(rendering);\n  }\n  consecutiveWhere(start, content, predicate) {\n    let answer, i, index, lastMatchingIndex, len, token;\n    content = content.slice(start, +content.length + 1 || 9e9);\n    lastMatchingIndex = void 0;\n    for (index = i = 0, len = content.length; i < len; index = ++i) {\n      token = content[index];\n      answer = predicate(token);\n      if (answer === true) {\n        lastMatchingIndex = index;\n      }\n      if (answer === false) {\n        break;\n      }\n    }\n    if (lastMatchingIndex != null) {\n      return content.slice(0, +lastMatchingIndex + 1 || 9e9);\n    }\n    return [];\n  }\n  operations() {\n    let positionInOld = 0;\n    let positionInNew = 0;\n    let operations = [];\n    let matches = this.matchingBlocks();\n    matches.push(new Match(this.oldWords.length, this.newWords.length, 0));\n    let matchesWithoutOrphans = this.removeOrphans(matches);\n    for (let match of matchesWithoutOrphans) {\n      let matchStartsAtCurrentPositionInOld = positionInOld === match.startInOld;\n      let matchStartsAtCurrentPositionInNew = positionInNew === match.startInNew;\n      let action;\n      if (!matchStartsAtCurrentPositionInOld && !matchStartsAtCurrentPositionInNew) {\n        action = Action.replace;\n      } else if (matchStartsAtCurrentPositionInOld && !matchStartsAtCurrentPositionInNew) {\n        action = Action.insert;\n      } else if (!matchStartsAtCurrentPositionInOld) {\n        action = Action.delete;\n      } else {\n        action = Action.none;\n      }\n      if (action !== Action.none) {\n        operations.push(new Operation({\n          action,\n          startInOld: positionInOld,\n          endInOld: match.startInOld,\n          startInNew: positionInNew,\n          endInNew: match.startInNew\n        }));\n      }\n      if (match.size !== 0) {\n        operations.push(new Operation({\n          action: Action.equal,\n          startInOld: match.startInOld,\n          endInOld: match.endInOld,\n          startInNew: match.startInNew,\n          endInNew: match.endInNew\n        }));\n      }\n      positionInOld = match.endInOld;\n      positionInNew = match.endInNew;\n    }\n    return operations;\n  }\n  *removeOrphans(matches) {\n    let prev = null;\n    let curr = null;\n    for (let next of matches) {\n      if (curr === null) {\n        prev = new Match(0, 0, 0);\n        curr = next;\n        continue;\n      }\n      if (prev?.endInOld === curr.startInOld && prev.endInNew === curr.startInNew || curr.endInOld === next.startInOld && curr.endInNew === next.startInNew) {\n        yield curr;\n        curr = next;\n        continue;\n      }\n      let sumLength = (t, n) => t + n.length;\n      let oldDistanceInChars = this.oldWords.slice(prev?.endInOld, next.startInOld).reduce(sumLength, 0);\n      let newDistanceInChars = this.newWords.slice(prev?.endInNew, next.startInNew).reduce(sumLength, 0);\n      let currMatchLengthInChars = this.newWords.slice(curr.startInNew, curr.endInNew).reduce(sumLength, 0);\n      if (currMatchLengthInChars > Math.max(oldDistanceInChars, newDistanceInChars) * this.orphanMatchThreshold) {\n        yield curr;\n      }\n      prev = curr;\n      curr = next;\n    }\n    yield curr;\n  }\n  matchingBlocks() {\n    let matchingBlocks = [];\n    this.findMatchingBlocks({\n      startInOld: 0,\n      endInOld: this.oldWords.length,\n      startInNew: 0,\n      endInNew: this.newWords.length,\n      matchingBlocks\n    });\n    return matchingBlocks;\n  }\n  findMatchingBlocks({\n    startInOld,\n    endInOld,\n    startInNew,\n    endInNew,\n    matchingBlocks\n  }) {\n    let match = this.findMatch({\n      startInOld,\n      endInOld,\n      startInNew,\n      endInNew\n    });\n    if (match !== null) {\n      if (startInOld < match.startInOld && startInNew < match.startInNew) {\n        this.findMatchingBlocks({\n          startInOld,\n          endInOld: match.startInOld,\n          startInNew,\n          endInNew: match.startInNew,\n          matchingBlocks\n        });\n      }\n      matchingBlocks.push(match);\n      if (match.endInOld < endInOld && match.endInNew < endInNew) {\n        this.findMatchingBlocks({\n          startInOld: match.endInOld,\n          endInOld,\n          startInNew: match.endInNew,\n          endInNew,\n          matchingBlocks\n        });\n      }\n    }\n  }\n  findMatch({\n    startInOld,\n    endInOld,\n    startInNew,\n    endInNew\n  }) {\n    for (let i = this.matchGranularity; i > 0; i--) {\n      let options = MatchOptions;\n      options.blockSize = i;\n      options.repeatingWordsAccuracy = this.repeatingWordsAccuracy;\n      options.ignoreWhitespaceDifferences = this.ignoreWhiteSpaceDifferences;\n      let finder = new MatchFinder({\n        oldWords: this.oldWords,\n        newWords: this.newWords,\n        startInOld,\n        endInOld,\n        startInNew,\n        endInNew,\n        options\n      });\n      let match = finder.findMatch();\n      if (match !== null) {\n        return match;\n      }\n    }\n    return null;\n  }\n}\nexport default HtmlDiff;\n","import HtmlDiff from './Diff';\nconst diff = (oldText, newText, {\n  blocksExpression\n} = {}) => {\n  const finder = new HtmlDiff(oldText, newText);\n  if (blocksExpression) {\n    blocksExpression.forEach(block => finder.addBlockExpression(block));\n  }\n  return finder.diff();\n};\nexport default diff;\n","import { Component, OnDestroy, OnInit, inject, input, output } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { ExamExerciseUpdateService } from 'app/exam/manage/exam-exercise-update.service';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { htmlForMarkdown } from 'app/shared/util/markdown.conversion.util';\r\nimport diff from 'html-diff-ts';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-exam-exercise-update-highlighter',\r\n    templateUrl: './exam-exercise-update-highlighter.component.html',\r\n    styleUrls: ['./exam-exercise-update-highlighter.component.scss'],\r\n    imports: [ArtemisTranslatePipe],\r\n})\r\nexport class ExamExerciseUpdateHighlighterComponent implements OnInit, OnDestroy {\r\n    private examExerciseUpdateService = inject(ExamExerciseUpdateService);\r\n\r\n    subscriptionToLiveExamExerciseUpdates: Subscription;\r\n    themeSubscription: Subscription;\r\n    updatedProblemStatementHTML: string;\r\n    updatedProblemStatementWithHighlightedDifferencesHTML: string;\r\n    outdatedProblemStatement: string;\r\n    updatedProblemStatement: string;\r\n    showHighlightedDifferences = true;\r\n    isHidden = true;\r\n    exercise = input.required<Exercise>();\r\n\r\n    problemStatementUpdateEvent = output<string>();\r\n\r\n    ngOnInit(): void {\r\n        this.subscriptionToLiveExamExerciseUpdates = this.examExerciseUpdateService.currentExerciseIdAndProblemStatement.subscribe((update) => {\r\n            if (update) {\r\n                this.updateExerciseProblemStatementById(update.exerciseId, update.problemStatement);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptionToLiveExamExerciseUpdates?.unsubscribe();\r\n        this.themeSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Switches the view between the new(updated) problem statement without the difference\r\n     * with the view showing the difference between the new and old problem statement and vice versa.\r\n     */\r\n    toggleHighlightedProblemStatement(event: MouseEvent): void {\r\n        // prevents the jhi-resizeable-container from collapsing the right panel on a button click\r\n        event.stopPropagation();\r\n        let problemStatementToEmit;\r\n        if (this.showHighlightedDifferences) {\r\n            problemStatementToEmit = this.updatedProblemStatementHTML;\r\n        } else {\r\n            problemStatementToEmit = this.updatedProblemStatementWithHighlightedDifferencesHTML;\r\n        }\r\n        this.showHighlightedDifferences = !this.showHighlightedDifferences;\r\n        this.problemStatementUpdateEvent.emit(problemStatementToEmit);\r\n    }\r\n\r\n    /**\r\n     * Updates the problem statement of the provided exercises based on its id.\r\n     * Also calls the method to highlight the differences between the old and new problem statement.\r\n     * @param exerciseId is the id of the exercise which problem statement should be updated.\r\n     * @param updatedProblemStatement is the new problem statement that should replace the old one.\r\n     */\r\n    updateExerciseProblemStatementById(exerciseId: number, updatedProblemStatement: string) {\r\n        if (updatedProblemStatement != undefined && exerciseId === this.exercise().id) {\r\n            this.outdatedProblemStatement = this.exercise().problemStatement!;\r\n            this.updatedProblemStatement = updatedProblemStatement;\r\n            this.exercise().problemStatement = updatedProblemStatement;\r\n            this.showHighlightedDifferences = true;\r\n            // Highlighting of the changes in the problem statement of a programming exercise id handled\r\n            // in ProgrammingExerciseInstructionComponent\r\n            if (this.exercise().type !== ExerciseType.PROGRAMMING) {\r\n                this.highlightProblemStatementDifferences();\r\n            }\r\n            this.isHidden = false;\r\n            this.problemStatementUpdateEvent.emit(this.updatedProblemStatementWithHighlightedDifferencesHTML);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the difference between the old and new (updated) problem statement and displays this difference.\r\n     */\r\n    highlightProblemStatementDifferences() {\r\n        const outdatedProblemStatementHTML = htmlForMarkdown(this.outdatedProblemStatement);\r\n        const updatedProblemStatementHTML = htmlForMarkdown(this.updatedProblemStatement);\r\n        this.updatedProblemStatementHTML = updatedProblemStatementHTML;\r\n        this.updatedProblemStatementWithHighlightedDifferencesHTML = diff(outdatedProblemStatementHTML, updatedProblemStatementHTML);\r\n    }\r\n}\r\n","<button id=\"highlightDiffButton\" class=\"btn py-0 px-2 mt-0 mb-0 ms-2\" [hidden]=\"isHidden\" (click)=\"toggleHighlightedProblemStatement($event)\">\r\n    {{\r\n        showHighlightedDifferences ? ('artemisApp.exam.problemStatementUpdate.showNew' | artemisTranslate) : ('artemisApp.exam.problemStatementUpdate.showDiff' | artemisTranslate)\r\n    }}\r\n</button>\r\n"],"mappings":"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","names":["ExamExerciseUpdateService","examExerciseIdAndProblemStatementSource","Subject","currentExerciseIdAndProblemStatement","asObservable","examExerciseIdForNavigationSource","BehaviorSubject","currentExerciseIdForNavigation","navigateToExamExercise","exerciseId","next","updateLiveExamExercise","problemStatement","factory","ɵfac","providedIn","Mode","Action","Match","startInOld","startInNew","size","tagRegex","tagWordRegex","whitespaceRegex","wordRegex","specialCaseWordTags","isTag","item","re","stripTagAttributes","word","isStartOfTag","val","isEndOfTag","isStartOfEntity","isEndOfEntity","isWhiteSpace","value","whitespaceRegex","stripAnyAttributes","word","isTag","stripTagAttributes","isNumber","text","isWord","wordRegex","putNewWord","block","word","blockSize","MatchFinder","oldWords","newWords","startInOld","endInOld","startInNew","endInNew","options","i","key","stripAnyAttributes","isWhiteSpace","bestMatchInOld","bestMatchInNew","bestMatchSize","matchLengthAt","indexInOld","index","newMatchLengthAt","indexInNew","newMatchLength","Match","threshold","repeatingWords","w","Operation","action","startInOld","endInOld","startInNew","endInNew","MatchOptions_default","WordSplitter","Mode","text","blockExpressions","isBlockCheckRequired","isGrouping","groupingUntil","blockLocation","idx","character","originalWord","newWord","newBlockLocation","el","isStartOfTag","isStartOfEntity","isWhiteSpace","isNumber","isWord","isEndOfTag","isEndOfEntity","switchToNextMode","mode","exp","matches","match","target","WordSplitter_default","MatchGranuarityMaximum","HtmlDiff","oldText","newText","MatchGranuarityMaximum","operations","value","key","item","exp","words","WordSplitter_default","el","idx","newWords","opp","Action","cssClass","text","s","pos","result","tag","content","length","nonTags","position","rendering","tags","x","isTag","start","predicate","answer","i","index","lastMatchingIndex","len","token","positionInOld","positionInNew","matches","Match","matchesWithoutOrphans","match","matchStartsAtCurrentPositionInOld","matchStartsAtCurrentPositionInNew","action","Operation","prev","curr","next","sumLength","t","n","oldDistanceInChars","newDistanceInChars","matchingBlocks","startInOld","endInOld","startInNew","endInNew","options","MatchOptions_default","MatchFinder","Diff_default","diff","oldText","newText","blocksExpression","finder","Diff_default","block","esm_default","ExamExerciseUpdateHighlighterComponent","examExerciseUpdateService","inject","ExamExerciseUpdateService","subscriptionToLiveExamExerciseUpdates","themeSubscription","updatedProblemStatementHTML","updatedProblemStatementWithHighlightedDifferencesHTML","outdatedProblemStatement","updatedProblemStatement","showHighlightedDifferences","isHidden","exercise","input","required","problemStatementUpdateEvent","output","ngOnInit","currentExerciseIdAndProblemStatement","subscribe","update","updateExerciseProblemStatementById","exerciseId","problemStatement","ngOnDestroy","unsubscribe","toggleHighlightedProblemStatement","event","stopPropagation","problemStatementToEmit","emit","undefined","id","type","ExerciseType","PROGRAMMING","highlightProblemStatementDifferences","outdatedProblemStatementHTML","htmlForMarkdown","diff","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵlistener","$event","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","ArtemisTranslatePipe","styles"],"x_google_ignoreList":[1,2,3,4,5,6,7,8,9]}