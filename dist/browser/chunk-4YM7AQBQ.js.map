{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/legal-document.model.ts", "src/main/webapp/app/shared/service/legal-document.service.ts"],
  "sourcesContent": ["/**\r\n * An enum representing the languages that are used for legal documents (privacy statement, imprint)\r\n */\r\nexport enum LegalDocumentLanguage {\r\n    GERMAN = 'de',\r\n    ENGLISH = 'en',\r\n}\r\n\r\n/**\r\n * An enum representing the types of legal documents (privacy statement, imprint)\r\n */\r\nexport enum LegalDocumentType {\r\n    PRIVACY_STATEMENT = 'privacy-statement',\r\n    IMPRINT = 'imprint',\r\n}\r\n\r\n/**\r\n * A class representing a legal document (privacy statement, imprint)\r\n */\r\nexport class LegalDocument {\r\n    language: LegalDocumentLanguage;\r\n    text?: string;\r\n    type: LegalDocumentType;\r\n    constructor(type: LegalDocumentType, language: LegalDocumentLanguage) {\r\n        this.type = type;\r\n        this.language = language;\r\n    }\r\n}\r\n", "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { PrivacyStatement } from 'app/entities/privacy-statement.model';\r\nimport { Observable } from 'rxjs';\r\nimport { LegalDocument, LegalDocumentLanguage, LegalDocumentType } from 'app/entities/legal-document.model';\r\nimport { Imprint } from 'app/entities/imprint.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LegalDocumentService {\r\n    private http = inject(HttpClient);\r\n\r\n    private resourceUrlPublicPrivacyStatement = 'api/core/public/privacy-statement';\r\n    private resourceUrlPublicImprint = 'api/core/public/imprint';\r\n    private resourceUrlImprintForUpdate = 'api/core/admin/imprint-for-update';\r\n    private resourceUrlPrivacyStatementForUpdate = 'api/core/admin/privacy-statement-for-update';\r\n    private resourceUrlImprintUpdate = 'api/core/admin/imprint';\r\n    private resourceUrlPrivacyStatementUpdate = 'api/core/admin/privacy-statement';\r\n\r\n    getPrivacyStatement(language: LegalDocumentLanguage): Observable<PrivacyStatement> {\r\n        return this.getRequestToResource(language, LegalDocumentType.PRIVACY_STATEMENT) as Observable<PrivacyStatement>;\r\n    }\r\n\r\n    getPrivacyStatementForUpdate(language: LegalDocumentLanguage): Observable<PrivacyStatement> {\r\n        return this.getRequestForUpdateToResource(language, LegalDocumentType.PRIVACY_STATEMENT) as Observable<PrivacyStatement>;\r\n    }\r\n\r\n    updatePrivacyStatement(privacyStatement: PrivacyStatement): Observable<PrivacyStatement> {\r\n        return this.putRequestToResource(privacyStatement, LegalDocumentType.PRIVACY_STATEMENT) as Observable<PrivacyStatement>;\r\n    }\r\n\r\n    getImprint(language: LegalDocumentLanguage): Observable<Imprint> {\r\n        return this.getRequestToResource(language, LegalDocumentType.IMPRINT) as Observable<Imprint>;\r\n    }\r\n\r\n    getImprintForUpdate(language: LegalDocumentLanguage): Observable<Imprint> {\r\n        return this.getRequestForUpdateToResource(language, LegalDocumentType.IMPRINT) as Observable<Imprint>;\r\n    }\r\n\r\n    updateImprint(imprint: Imprint): Observable<Imprint> {\r\n        return this.putRequestToResource(imprint, LegalDocumentType.IMPRINT) as Observable<Imprint>;\r\n    }\r\n\r\n    private getRequestToResource(language: LegalDocumentLanguage, type: LegalDocumentType): Observable<LegalDocument> {\r\n        let resourceUrl = this.resourceUrlPublicPrivacyStatement;\r\n        if (type === LegalDocumentType.IMPRINT) {\r\n            resourceUrl = this.resourceUrlPublicImprint;\r\n        }\r\n        return this.http.get<LegalDocument>(resourceUrl, {\r\n            params: new HttpParams().set('language', language),\r\n        });\r\n    }\r\n\r\n    private getRequestForUpdateToResource(language: LegalDocumentLanguage, type: LegalDocumentType): Observable<LegalDocument> {\r\n        let resourceUrl = this.resourceUrlPrivacyStatementForUpdate;\r\n        if (type === LegalDocumentType.IMPRINT) {\r\n            resourceUrl = this.resourceUrlImprintForUpdate;\r\n        }\r\n        return this.http.get<LegalDocument>(resourceUrl, {\r\n            params: new HttpParams().set('language', language),\r\n        });\r\n    }\r\n\r\n    private putRequestToResource(legalDocument: LegalDocument, type: LegalDocumentType): Observable<LegalDocument> {\r\n        let resourceUrl = this.resourceUrlPrivacyStatementUpdate;\r\n        if (type === LegalDocumentType.IMPRINT) {\r\n            resourceUrl = this.resourceUrlImprintUpdate;\r\n        }\r\n        return this.http.put<LegalDocument>(resourceUrl, legalDocument);\r\n    }\r\n}\r\n"],
  "mappings": "gGAGA,IAAYA,EAAZ,SAAYA,EAAqB,CAC7BA,OAAAA,EAAA,OAAA,KACAA,EAAA,QAAA,KAFQA,CAGZ,EAHYA,GAAqB,CAAA,CAAA,EAQrBC,EAAZ,SAAYA,EAAiB,CACzBA,OAAAA,EAAA,kBAAA,oBACAA,EAAA,QAAA,UAFQA,CAGZ,EAHYA,GAAiB,CAAA,CAAA,EAQhBC,EAAP,KAAoB,CACtBC,SACAC,KACAC,KACAC,YAAYD,EAAyBF,EAA+B,CAChE,KAAKE,KAAOA,EACZ,KAAKF,SAAWA,CACpB,GChBJ,IAAaI,GAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,KAAOC,EAAOC,CAAU,EAExBC,kCAAoC,oCACpCC,yBAA2B,0BAC3BC,4BAA8B,oCAC9BC,qCAAuC,8CACvCC,yBAA2B,yBAC3BC,kCAAoC,mCAE5CC,oBAAoBC,EAA+B,CAC/C,OAAO,KAAKC,qBAAqBD,EAAUE,EAAkBC,iBAAiB,CAClF,CAEAC,6BAA6BJ,EAA+B,CACxD,OAAO,KAAKK,8BAA8BL,EAAUE,EAAkBC,iBAAiB,CAC3F,CAEAG,uBAAuBC,EAAkC,CACrD,OAAO,KAAKC,qBAAqBD,EAAkBL,EAAkBC,iBAAiB,CAC1F,CAEAM,WAAWT,EAA+B,CACtC,OAAO,KAAKC,qBAAqBD,EAAUE,EAAkBQ,OAAO,CACxE,CAEAC,oBAAoBX,EAA+B,CAC/C,OAAO,KAAKK,8BAA8BL,EAAUE,EAAkBQ,OAAO,CACjF,CAEAE,cAAcC,EAAgB,CAC1B,OAAO,KAAKL,qBAAqBK,EAASX,EAAkBQ,OAAO,CACvE,CAEQT,qBAAqBD,EAAiCc,EAAuB,CACjF,IAAIC,EAAc,KAAKtB,kCACvB,OAAIqB,IAASZ,EAAkBQ,UAC3BK,EAAc,KAAKrB,0BAEhB,KAAKJ,KAAK0B,IAAmBD,EAAa,CAC7CE,OAAQ,IAAIC,EAAU,EAAGC,IAAI,WAAYnB,CAAQ,EACpD,CACL,CAEQK,8BAA8BL,EAAiCc,EAAuB,CAC1F,IAAIC,EAAc,KAAKnB,qCACvB,OAAIkB,IAASZ,EAAkBQ,UAC3BK,EAAc,KAAKpB,6BAEhB,KAAKL,KAAK0B,IAAmBD,EAAa,CAC7CE,OAAQ,IAAIC,EAAU,EAAGC,IAAI,WAAYnB,CAAQ,EACpD,CACL,CAEQQ,qBAAqBY,EAA8BN,EAAuB,CAC9E,IAAIC,EAAc,KAAKjB,kCACvB,OAAIgB,IAASZ,EAAkBQ,UAC3BK,EAAc,KAAKlB,0BAEhB,KAAKP,KAAK+B,IAAmBN,EAAaK,CAAa,CAClE,4CA5DS/B,EAAoB,6BAApBA,EAAoBiC,QAApBjC,EAAoBkC,UAAAC,WAFjB,MAAM,CAAA,SAETnC,CAAoB,GAAA",
  "names": ["LegalDocumentLanguage", "LegalDocumentType", "LegalDocument", "language", "text", "type", "constructor", "LegalDocumentService", "http", "inject", "HttpClient", "resourceUrlPublicPrivacyStatement", "resourceUrlPublicImprint", "resourceUrlImprintForUpdate", "resourceUrlPrivacyStatementForUpdate", "resourceUrlImprintUpdate", "resourceUrlPrivacyStatementUpdate", "getPrivacyStatement", "language", "getRequestToResource", "LegalDocumentType", "PRIVACY_STATEMENT", "getPrivacyStatementForUpdate", "getRequestForUpdateToResource", "updatePrivacyStatement", "privacyStatement", "putRequestToResource", "getImprint", "IMPRINT", "getImprintForUpdate", "updateImprint", "imprint", "type", "resourceUrl", "get", "params", "HttpParams", "set", "legalDocument", "put", "factory", "\u0275fac", "providedIn"]
}
