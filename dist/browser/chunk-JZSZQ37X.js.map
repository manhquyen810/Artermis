{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/link-preview/services/link-preview.service.ts", "src/main/webapp/app/shared/link-preview/services/linkify.service.ts", "src/main/webapp/app/shared/metis/posting-create-edit.directive.ts", "src/main/webapp/app/shared/metis/posting-create-edit-modal/posting-create-edit-modal.directive.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/communication/channel-reference.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/communication/user-mention.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/communication/exercise-reference.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/communication/faq-reference.action.ts", "src/main/webapp/app/shared/metis/posting-content/enlarge-slide-image/enlarge-slide-image.component.ts", "src/main/webapp/app/shared/metis/posting-content/enlarge-slide-image/enlarge-slide-image.component.html", "src/main/webapp/app/shared/pipes/html-for-posting-markdown.pipe.ts", "src/main/webapp/app/shared/metis/posting-content/posting-content-part/posting-content-part.components.ts", "src/main/webapp/app/shared/metis/posting-content/posting-content-part/posting-content-part.component.html", "src/main/webapp/app/shared/link-preview/components/link-preview/link-preview.component.ts", "src/main/webapp/app/shared/link-preview/components/link-preview/link-preview.component.html", "src/main/webapp/app/shared/link-preview/components/link-preview-container/link-preview-container.component.ts", "src/main/webapp/app/shared/link-preview/components/link-preview-container/link-preview-container.component.html", "src/main/webapp/app/shared/metis/posting-content/posting-content.components.ts", "src/main/webapp/app/shared/metis/posting-content/posting-content.component.html", "src/main/webapp/app/shared/metis/posting-markdown-editor/posting-markdown-editor.component.ts", "src/main/webapp/app/shared/metis/posting-markdown-editor/posting-markdown-editor.component.html", "src/main/webapp/app/shared/metis/posting-create-edit-modal/post-create-edit-modal/post-tag-selector/post-tag-selector.component.ts", "src/main/webapp/app/shared/metis/posting-create-edit-modal/post-create-edit-modal/post-tag-selector/post-tag-selector.component.html", "src/main/webapp/app/shared/metis/posting-create-edit-modal/post-create-edit-modal/post-create-edit-modal.component.ts", "src/main/webapp/app/shared/metis/posting-create-edit-modal/post-create-edit-modal/post-create-edit-modal.component.html", "src/main/webapp/app/shared/metis/posting.directive.ts", "src/main/webapp/app/shared/metis/posting-create-edit-modal/answer-post-create-edit-modal/answer-post-create-edit-modal.component.ts", "src/main/webapp/app/shared/metis/posting-create-edit-modal/answer-post-create-edit-modal/answer-post-create-edit-modal.component.html", "src/main/webapp/app/shared/metis/emoji/emoji.component.ts", "src/main/webapp/app/shared/metis/emoji/emoji.component.html", "src/main/webapp/app/shared/metis/posting-header/posting-header.component.ts", "src/main/webapp/app/shared/metis/posting-header/posting-header.component.html", "src/main/webapp/app/entities/metis/reaction.model.ts", "src/main/webapp/app/shared/pipes/reacting-users-on-posting.pipe.ts", "src/main/webapp/app/overview/course-conversations/dialogs/forward-message-dialog/forward-message-dialog.component.ts", "src/main/webapp/app/overview/course-conversations/dialogs/forward-message-dialog/forward-message-dialog.component.html", "src/main/webapp/app/shared/metis/posting-reactions-bar/posting-reactions-bar.component.ts", "src/main/webapp/app/shared/metis/posting-reactions-bar/posting-reactions-bar.component.html", "src/main/webapp/app/shared/metis/answer-post/answer-post.component.ts", "src/main/webapp/app/shared/metis/answer-post/answer-post.component.html", "src/main/webapp/app/shared/metis/posting-footer/posting-footer.component.ts", "src/main/webapp/app/shared/metis/posting-footer/posting-footer.component.html", "src/main/webapp/app/shared/metis/message/message-inline-input/message-inline-input.component.ts", "src/main/webapp/app/shared/metis/message/message-inline-input/message-inline-input.component.html", "src/main/webapp/app/shared/metis/forwarded-message/forwarded-message.component.ts", "src/main/webapp/app/shared/metis/forwarded-message/forwarded-message.component.html", "src/main/webapp/app/shared/metis/post/post.component.ts", "src/main/webapp/app/shared/metis/post/post.component.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { shareReplay } from 'rxjs/operators';\r\nimport { Link } from 'app/shared/link-preview/services/linkify.service';\r\n\r\nexport interface LinkPreview {\r\n    title: string;\r\n    description: string;\r\n    image: string;\r\n    url: string;\r\n    shouldPreviewBeShown?: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LinkPreviewService {\r\n    private http = inject(HttpClient);\r\n\r\n    public resourceUrl = 'api/communication/link-preview';\r\n\r\n    // object used to store the link preview data as observables, with the URL of the link as the key\r\n    private cache: { [url: string]: Observable<LinkPreview> } = {};\r\n\r\n    links: Link[] = [];\r\n\r\n    fetchLink(url: string): Observable<LinkPreview> {\r\n        if (this.cache[url]) {\r\n            return this.cache[url];\r\n        }\r\n\r\n        // Encode the URL to ensure special characters are properly handled\r\n        const encodedUrl = encodeURIComponent(url);\r\n        const params = new HttpParams().set('url', encodedUrl);\r\n\r\n        const preview$ = this.http.get<LinkPreview>(this.resourceUrl, { params }).pipe(shareReplay(1));\r\n\r\n        this.cache[url] = preview$;\r\n        return preview$;\r\n    }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\n\r\nexport interface Link {\r\n    type: string;\r\n    value: string;\r\n    isLink?: boolean;\r\n    href: string;\r\n    start?: number;\r\n    end?: number;\r\n    isLinkPreviewRemoved?: boolean;\r\n}\r\n\r\n// Regular expression pattern to match URLs\r\nexport const urlRegex = /https?:\\/\\/[^\\s/$.?#>][^\\s>]*?(?=\\s|[\\])]|$)/g;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LinkifyService {\r\n    /**\r\n     * Find any links in a given text as a string\r\n     *\r\n     * @param text - the string to find some links\r\n     */\r\n    find(text: string): Link[] {\r\n        const linkableItems: Link[] = [];\r\n\r\n        // Find all URL matches in the text (in the content of the post)\r\n        let match;\r\n        while ((match = urlRegex.exec(text)) !== null) {\r\n            const url = match[0];\r\n            const start = match.index;\r\n            const end = start + url.length;\r\n\r\n            // Check if url is wrapped in <> tags\r\n            const isRemoved = text[start - 1] === '<' && text[end] === '>';\r\n            const linkableItem: Link = {\r\n                type: 'url',\r\n                value: url,\r\n                isLink: true,\r\n                href: url,\r\n                start,\r\n                end,\r\n                isLinkPreviewRemoved: isRemoved,\r\n            };\r\n\r\n            if (!isRemoved) {\r\n                linkableItems.push(linkableItem);\r\n            }\r\n        }\r\n        return linkableItems;\r\n    }\r\n}\r\n", "import { Directive, EventEmitter, Input, OnChanges, OnInit, Output, inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { PostingEditType } from 'app/shared/metis/metis.util';\r\n\r\nimport { MarkdownEditorHeight } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\n\r\n// Note: this number should be the same as in Posting.java\r\nconst MAX_CONTENT_LENGTH = 5000;\r\n\r\n@Directive()\r\nexport abstract class PostingCreateEditDirective<T extends Posting> implements OnInit, OnChanges {\r\n    protected metisService = inject(MetisService);\r\n    protected modalService = inject(NgbModal);\r\n    protected formBuilder = inject(FormBuilder);\r\n\r\n    @Input() posting: T;\r\n    @Output() onCreate: EventEmitter<T> = new EventEmitter<T>();\r\n    @Output() isModalOpen = new EventEmitter<void>();\r\n\r\n    modalRef?: NgbModalRef;\r\n    isLoading = false;\r\n    maxContentLength = MAX_CONTENT_LENGTH;\r\n    editorHeight = MarkdownEditorHeight.INLINE;\r\n    content: string;\r\n    formGroup: FormGroup;\r\n\r\n    readonly EditType = PostingEditType;\r\n\r\n    get editType(): PostingEditType {\r\n        return this.posting.id ? PostingEditType.UPDATE : PostingEditType.CREATE;\r\n    }\r\n\r\n    /**\r\n     * on initialization: sets the content, and the modal title (edit or create)\r\n     */\r\n    ngOnInit(): void {\r\n        this.content = this.posting.content ?? '';\r\n    }\r\n\r\n    /**\r\n     * on changes: sets the content, and the modal title (edit or create), resets the form\r\n     */\r\n    ngOnChanges() {\r\n        this.content = this.posting?.content ?? '';\r\n        this.resetFormGroup();\r\n    }\r\n\r\n    /**\r\n     * checks if the form group is valid, changes the clicked button to indicate a loading process,\r\n     * set the input content (updated or new; of post and answer post) delegates to the corresponding method\r\n     */\r\n    confirm(): void {\r\n        if (this.isLoading) return;\r\n        if (this.formGroup.valid) {\r\n            this.isLoading = true;\r\n            if (this.editType === PostingEditType.UPDATE) {\r\n                this.updatePosting();\r\n            } else if (this.editType === PostingEditType.CREATE) {\r\n                this.createPosting();\r\n            }\r\n        }\r\n    }\r\n\r\n    abstract resetFormGroup(): void;\r\n\r\n    abstract createPosting(): void;\r\n\r\n    abstract updatePosting(): void;\r\n}\r\n", "import { Directive, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { PostingCreateEditDirective } from 'app/shared/metis/posting-create-edit.directive';\r\n\r\n@Directive()\r\nexport abstract class PostingCreateEditModalDirective<T extends Posting> extends PostingCreateEditDirective<T> implements OnInit, OnChanges {\r\n    @ViewChild('postingEditor') postingEditor: TemplateRef<any>;\r\n    modalTitle: string;\r\n\r\n    /**\r\n     * on initialization: sets the content, and the modal title (edit or create)\r\n     */\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.updateModalTitle();\r\n    }\r\n\r\n    /**\r\n     * on changes: sets the content, and the modal title (edit or create), resets the form\r\n     */\r\n    ngOnChanges() {\r\n        super.ngOnChanges();\r\n        this.updateModalTitle();\r\n    }\r\n\r\n    abstract open(): void;\r\n\r\n    abstract updateModalTitle(): void;\r\n}\r\n", "import { faHashtag } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { ChannelIdAndNameDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { Disposable } from 'app/shared/monaco-editor/model/actions/monaco-editor.util';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\nimport { TextEditorRange } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-range.model';\r\nimport { TextEditorCompletionItem, TextEditorCompletionItemKind } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-completion-item.model';\r\n\r\n/**\r\n * Action to insert a reference to a channel into the editor. Users that type a # will see a list of available channels to reference.\r\n */\r\nexport class ChannelReferenceAction extends TextEditorAction {\r\n    static readonly ID = 'channel-reference.action';\r\n    static readonly DEFAULT_INSERT_TEXT = '#';\r\n\r\n    cachedChannels?: ChannelIdAndNameDTO[];\r\n    disposableCompletionProvider?: Disposable;\r\n\r\n    constructor(\r\n        private readonly metisService: MetisService,\r\n        private readonly channelService: ChannelService,\r\n    ) {\r\n        super(ChannelReferenceAction.ID, 'artemisApp.metis.editor.channel', faHashtag);\r\n    }\r\n\r\n    /**\r\n     * Registers this action in the provided editor. This will register a completion provider that shows the available channels.\r\n     * @param editor The editor to register the action in.\r\n     * @param translateService The translate service to use for translations, e.g. the label.\r\n     */\r\n    register(editor: TextEditor, translateService: TranslateService) {\r\n        super.register(editor, translateService);\r\n        this.disposableCompletionProvider = this.registerCompletionProviderForCurrentModel<ChannelIdAndNameDTO>(\r\n            editor,\r\n            this.fetchChannels.bind(this),\r\n            (channel: ChannelIdAndNameDTO, range: TextEditorRange) =>\r\n                new TextEditorCompletionItem(`#${channel.name}`, this.label, `[channel]${channel.name}(${channel.id})[/channel]`, TextEditorCompletionItemKind.Default, range),\r\n            '#',\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Inserts the text '#' into the editor and focuses it. This method will trigger the completion provider to show the available channels.\r\n     * @param editor The editor to type the text into.\r\n     */\r\n    run(editor: TextEditor) {\r\n        this.replaceTextAtCurrentSelection(editor, ChannelReferenceAction.DEFAULT_INSERT_TEXT);\r\n        editor.triggerCompletion();\r\n        editor.focus();\r\n    }\r\n\r\n    async fetchChannels(): Promise<ChannelIdAndNameDTO[]> {\r\n        if (!this.cachedChannels) {\r\n            const response = await firstValueFrom(this.channelService.getPublicChannelsOfCourse(this.metisService.getCourse().id!));\r\n            this.cachedChannels = response.body!;\r\n        }\r\n        return this.cachedChannels;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n        this.disposableCompletionProvider?.dispose();\r\n        this.cachedChannels = undefined;\r\n    }\r\n}\r\n", "import { faAt } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { UserNameAndLoginDTO } from 'app/core/user/user.model';\r\nimport { Disposable } from 'app/shared/monaco-editor/model/actions/monaco-editor.util';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\nimport { TextEditorRange } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-range.model';\r\nimport { TextEditorCompletionItem, TextEditorCompletionItemKind } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-completion-item.model';\r\n\r\n/**\r\n * Action to insert a user mention into the editor. Users that type a @ will see a list of available users to mention.\r\n * Users will be fetched repeatedly as the user types to provide up-to-date results.\r\n */\r\nexport class UserMentionAction extends TextEditorAction {\r\n    disposableCompletionProvider?: Disposable;\r\n\r\n    static readonly ID = 'user-mention.action';\r\n    static readonly DEFAULT_INSERT_TEXT = '@';\r\n\r\n    constructor(\r\n        private readonly courseManagementService: CourseManagementService,\r\n        private readonly metisService: MetisService,\r\n    ) {\r\n        super(UserMentionAction.ID, 'artemisApp.metis.editor.user', faAt);\r\n    }\r\n\r\n    /**\r\n     * Registers this action in the provided editor. This will register a completion provider that shows the available users.\r\n     * @param editor The editor to register the action in.\r\n     * @param translateService The translate service to use for translations, e.g. the label.\r\n     */\r\n    register(editor: TextEditor, translateService: TranslateService) {\r\n        super.register(editor, translateService);\r\n        this.disposableCompletionProvider = this.registerCompletionProviderForCurrentModel<UserNameAndLoginDTO>(\r\n            editor,\r\n            this.loadUsersForSearchTerm.bind(this),\r\n            (user: UserNameAndLoginDTO, range: TextEditorRange) =>\r\n                new TextEditorCompletionItem(`@${user.name}`, this.label, `[user]${user.name}(${user.login})[/user]`, TextEditorCompletionItemKind.User, range),\r\n            '@',\r\n            true,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Inserts the text '@' into the editor and focuses it. This method will trigger the completion provider to show the available users.\r\n     * @param editor The editor to insert the text into.\r\n     */\r\n    run(editor: TextEditor) {\r\n        this.replaceTextAtCurrentSelection(editor, UserMentionAction.DEFAULT_INSERT_TEXT);\r\n        editor.triggerCompletion();\r\n        editor.focus();\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n        this.disposableCompletionProvider?.dispose();\r\n    }\r\n\r\n    async loadUsersForSearchTerm(searchTerm: string): Promise<UserNameAndLoginDTO[]> {\r\n        const response = await firstValueFrom(this.courseManagementService.searchMembersForUserMentions(this.metisService.getCourse().id!, searchTerm));\r\n        return response.body ?? [];\r\n    }\r\n}\r\n", "import { TranslateService } from '@ngx-translate/core';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { TextEditorDomainActionWithOptions } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action-with-options.model';\r\nimport { ValueItem } from 'app/shared/markdown-editor/value-item.model';\r\nimport { Disposable } from 'app/shared/monaco-editor/model/actions/monaco-editor.util';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\nimport { TextEditorCompletionItem, TextEditorCompletionItemKind } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-completion-item.model';\r\nimport { TextEditorRange } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-range.model';\r\n\r\n/**\r\n * Action to insert a reference to an exercise into the editor. Users that type a / will see a list of available exercises to reference.\r\n */\r\nexport class ExerciseReferenceAction extends TextEditorDomainActionWithOptions {\r\n    static readonly ID = 'exercise-reference.action';\r\n    static readonly DEFAULT_INSERT_TEXT = '/exercise';\r\n\r\n    disposableCompletionProvider?: Disposable;\r\n\r\n    constructor(private readonly metisService: MetisService) {\r\n        super(ExerciseReferenceAction.ID, 'artemisApp.metis.editor.exercise');\r\n    }\r\n\r\n    /**\r\n     * Registers this action in the provided editor. This will register a completion provider that shows the available exercises.\r\n     * @param editor The editor to register the completion provider for.\r\n     * @param translateService The translate service to use for translations.\r\n     */\r\n    register(editor: TextEditor, translateService: TranslateService): void {\r\n        super.register(editor, translateService);\r\n        const exercises = this.metisService.getCourse().exercises ?? [];\r\n        this.setValues(\r\n            exercises.map((exercise) => ({\r\n                id: exercise.id!.toString(),\r\n                value: exercise.title!,\r\n                type: exercise.type,\r\n            })),\r\n        );\r\n\r\n        this.disposableCompletionProvider = this.registerCompletionProviderForCurrentModel<ValueItem>(\r\n            editor,\r\n            () => Promise.resolve(this.getValues()),\r\n            (item: ValueItem, range: TextEditorRange) =>\r\n                new TextEditorCompletionItem(\r\n                    `/exercise ${item.value}`,\r\n                    item.type,\r\n                    `[${item.type}]${item.value}(${this.metisService.getLinkForExercise(item.id)})[/${item.type}]`,\r\n                    TextEditorCompletionItemKind.Default,\r\n                    range,\r\n                ),\r\n            '/',\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Inserts the text '/exercise' into the editor and focuses it. This method will trigger the completion provider to show the available exercises.\r\n     * @param editor The editor to insert the text into.\r\n     */\r\n    run(editor: TextEditor): void {\r\n        this.replaceTextAtCurrentSelection(editor, ExerciseReferenceAction.DEFAULT_INSERT_TEXT);\r\n        editor.triggerCompletion();\r\n        editor.focus();\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n        this.disposableCompletionProvider?.dispose();\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return '[exercise]';\r\n    }\r\n}\r\n", "import { TranslateService } from '@ngx-translate/core';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { TextEditorDomainActionWithOptions } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action-with-options.model';\r\nimport { ValueItem } from 'app/shared/markdown-editor/value-item.model';\r\nimport { Disposable } from 'app/shared/monaco-editor/model/actions/monaco-editor.util';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\nimport { TextEditorCompletionItem, TextEditorCompletionItemKind } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-completion-item.model';\r\nimport { TextEditorRange } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-range.model';\r\n\r\n/**\r\n * Action to insert a reference to a faq into the editor. Users that type a / will see a list of available faqs to reference.\r\n */\r\nexport class FaqReferenceAction extends TextEditorDomainActionWithOptions {\r\n    static readonly ID = 'faq-reference.action';\r\n    static readonly DEFAULT_INSERT_TEXT = '/faq';\r\n\r\n    disposableCompletionProvider?: Disposable;\r\n\r\n    constructor(private readonly metisService: MetisService) {\r\n        super(FaqReferenceAction.ID, 'artemisApp.metis.editor.faq');\r\n    }\r\n\r\n    /**\r\n     * Registers this action in the provided editor. This will register a completion provider that shows the available faqs.\r\n     * @param editor The editor to register the completion provider for.\r\n     * @param translateService The translate service to use for translations.\r\n     */\r\n    register(editor: TextEditor, translateService: TranslateService): void {\r\n        super.register(editor, translateService);\r\n        const faqs = this.metisService.getCourse().faqs ?? [];\r\n        this.setValues(\r\n            faqs.map((faq) => ({\r\n                id: faq.id!.toString(),\r\n                value: faq.questionTitle!,\r\n                type: 'faq',\r\n            })),\r\n        );\r\n\r\n        this.disposableCompletionProvider = this.registerCompletionProviderForCurrentModel<ValueItem>(\r\n            editor,\r\n            () => Promise.resolve(this.getValues()),\r\n            (item: ValueItem, range: TextEditorRange) =>\r\n                new TextEditorCompletionItem(\r\n                    `/faq ${item.value}`,\r\n                    item.type,\r\n                    `[${item.type}]${item.value}(${this.metisService.getLinkForFaq()}?faqId=${item.id})[/${item.type}]`,\r\n                    TextEditorCompletionItemKind.Default,\r\n                    range,\r\n                ),\r\n            '/',\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Inserts the text '/faq' into the editor and focuses it. This method will trigger the completion provider to show the available faqs.\r\n     * @param editor The editor to insert the text into.\r\n     */\r\n    run(editor: TextEditor): void {\r\n        this.replaceTextAtCurrentSelection(editor, FaqReferenceAction.DEFAULT_INSERT_TEXT);\r\n        editor.triggerCompletion();\r\n        editor.focus();\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n        this.disposableCompletionProvider?.dispose();\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return '[faq]';\r\n    }\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\nexport interface DialogData {\r\n    slideToReference: string;\r\n}\r\n\r\n@Component({ templateUrl: './enlarge-slide-image.component.html' })\r\nexport class EnlargeSlideImageComponent {\r\n    data = inject<DialogData>(MAT_DIALOG_DATA);\r\n}\r\n", "<div>\r\n    <img [style.max-height.vh]=\"95\" class=\"img-fluid\" [src]=\"data.slideToReference\" alt=\"\" />\r\n</div>\r\n", "import { Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\n\r\n@Pipe({\r\n    name: 'htmlForPostingMarkdown',\r\n})\r\nexport class HtmlForPostingMarkdownPipe implements PipeTransform {\r\n    private readonly markdownService = inject(ArtemisMarkdownService);\r\n\r\n    /**\r\n     * Converts markdown used in posting content into html, sanitizes it and then declares it as safe to bypass further security.\r\n     * @param {string} markdown the original markdown text\r\n     * @param {boolean} contentBeforeReference to indicate if this is markdown content before a possible reference or after\r\n     * @param {string[]} allowedHtmlTags to allow during sanitization\r\n     * @param {string[]} allowedHtmlAttributes to allow during sanitization\r\n     * @returns {string} the resulting html as a SafeHtml object that can be inserted into the angular template\r\n     */\r\n    transform(\r\n        markdown?: string,\r\n        contentBeforeReference = true,\r\n        allowedHtmlTags: string[] | undefined = undefined,\r\n        allowedHtmlAttributes: string[] | undefined = undefined,\r\n    ): SafeHtml {\r\n        return this.markdownService.safeHtmlForPostingMarkdown(markdown, contentBeforeReference, allowedHtmlTags, allowedHtmlAttributes);\r\n    }\r\n}\r\n", "import { Component, OnChanges, OnInit, inject, input, output } from '@angular/core';\r\nimport { PostingContentPart, ReferenceType } from '../../metis.util';\r\nimport { FileService } from 'app/shared/http/file.service';\r\n\r\nimport {\r\n    faAt,\r\n    faBan,\r\n    faChalkboardUser,\r\n    faCheckDouble,\r\n    faFile,\r\n    faFileUpload,\r\n    faFont,\r\n    faHashtag,\r\n    faKeyboard,\r\n    faMessage,\r\n    faPaperclip,\r\n    faProjectDiagram,\r\n    faQuestion,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { EnlargeSlideImageComponent } from 'app/shared/metis/posting-content/enlarge-slide-image/enlarge-slide-image.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { RouterLink } from '@angular/router';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { HtmlForPostingMarkdownPipe } from 'app/shared/pipes/html-for-posting-markdown.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\n@Component({\r\n    selector: 'jhi-posting-content-part',\r\n    templateUrl: './posting-content-part.component.html',\r\n    styleUrls: ['./../../metis.component.scss'],\r\n    imports: [RouterLink, FaIconComponent, HtmlForPostingMarkdownPipe, TranslateDirective],\r\n})\r\nexport class PostingContentPartComponent implements OnInit, OnChanges {\r\n    private fileService = inject(FileService);\r\n    private dialog = inject(MatDialog);\r\n    private accountService = inject(AccountService);\r\n\r\n    postingContentPart = input<PostingContentPart>();\r\n    userReferenceClicked = output<string>();\r\n    channelReferenceClicked = output<number>();\r\n\r\n    imageNotFound = false;\r\n    hasClickedUserReference = false;\r\n\r\n    // Only allow certain html tags and attributes\r\n    allowedHtmlTags: string[] = ['a', 'b', 'br', 'blockquote', 'code', 'del', 'em', 'i', 'ins', 'mark', 'p', 'pre', 'small', 's', 'span', 'strong', 'sub', 'sup'];\r\n    allowedHtmlAttributes: string[] = ['href'];\r\n\r\n    // icons\r\n    protected readonly faFile = faFile;\r\n    protected readonly faBan = faBan;\r\n    protected readonly faAt = faAt;\r\n    protected readonly faHashtag = faHashtag;\r\n    protected readonly faQuestion = faQuestion;\r\n\r\n    protected readonly ReferenceType = ReferenceType;\r\n    processedContentBeforeReference: string;\r\n    processedContentAfterReference: string;\r\n\r\n    ngOnInit() {\r\n        this.processContent();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.processContent();\r\n    }\r\n\r\n    /**\r\n     * Opens an attachment with the given URL in a new window\r\n     *\r\n     * @param attachmentUrl URL of the attachment to be displayed\r\n     */\r\n    openAttachment(attachmentUrl: string): void {\r\n        this.fileService.downloadFile(attachmentUrl);\r\n    }\r\n\r\n    toggleImageNotFound(): void {\r\n        this.imageNotFound = true;\r\n    }\r\n\r\n    processContent() {\r\n        if (this.postingContentPart()?.contentBeforeReference) {\r\n            this.processedContentBeforeReference = this.escapeNumberedList(this.postingContentPart()?.contentBeforeReference || '');\r\n            this.processedContentBeforeReference = this.escapeUnorderedList(this.processedContentBeforeReference);\r\n        }\r\n\r\n        if (this.postingContentPart()?.contentAfterReference) {\r\n            this.processedContentAfterReference = this.escapeNumberedList(this.postingContentPart()?.contentAfterReference || '');\r\n            this.processedContentAfterReference = this.escapeUnorderedList(this.processedContentAfterReference);\r\n        }\r\n    }\r\n\r\n    escapeNumberedList(content: string): string {\r\n        return content.replace(/^(\\s*\\d+)\\. /gm, '$1\\\\.  ');\r\n    }\r\n\r\n    escapeUnorderedList(content: string): string {\r\n        return content.replace(/^(- )/gm, '\\\\$1');\r\n    }\r\n\r\n    /**\r\n     * Opens a dialog to display the image in full size\r\n     *\r\n     * @param slideToReference {string} the reference to the slide\r\n     */\r\n    enlargeImage(slideToReference: string) {\r\n        this.dialog.open(EnlargeSlideImageComponent, {\r\n            data: { slideToReference },\r\n            maxWidth: '95vw',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get an icon for the type of the given exercise reference.\r\n     * @param reference {ReferenceType}\r\n     */\r\n    referenceIcon(reference: ReferenceType): IconProp {\r\n        switch (reference) {\r\n            case ReferenceType.POST:\r\n                return faMessage;\r\n            case ReferenceType.LECTURE:\r\n                return faChalkboardUser;\r\n            case ReferenceType.PROGRAMMING:\r\n                return faKeyboard;\r\n            case ReferenceType.MODELING:\r\n                return faProjectDiagram;\r\n            case ReferenceType.QUIZ:\r\n                return faCheckDouble;\r\n            case ReferenceType.TEXT:\r\n                return faFont;\r\n            case ReferenceType.FILE_UPLOAD:\r\n                return faFileUpload;\r\n            case ReferenceType.SLIDE:\r\n                return faFile;\r\n            case ReferenceType.FAQ:\r\n                return faQuestion;\r\n            default:\r\n                return faPaperclip;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit an event if the clicked user reference is different from the current user\r\n     *\r\n     * @param referenceUserLogin login of the referenced user\r\n     */\r\n    onClickUserReference(referenceUserLogin: string | undefined) {\r\n        if (!this.hasClickedUserReference && referenceUserLogin && referenceUserLogin !== this.accountService.userIdentity?.login) {\r\n            this.hasClickedUserReference = true;\r\n            this.userReferenceClicked.emit(referenceUserLogin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit an event if the clicked channel reference is clicked\r\n     *\r\n     * @param channelId login of the referenced user\r\n     */\r\n    onClickChannelReference(channelId: number | undefined) {\r\n        if (channelId) {\r\n            this.channelReferenceClicked.emit(channelId);\r\n        }\r\n    }\r\n}\r\n", "@if (postingContentPart()?.contentBeforeReference) {\r\n    <span\r\n        class=\"markdown-preview\"\r\n        style=\"white-space: pre-wrap\"\r\n        [innerHTML]=\"processedContentBeforeReference | htmlForPostingMarkdown: true : allowedHtmlTags : allowedHtmlAttributes\"\r\n    ></span>\r\n}\r\n@if (postingContentPart()?.linkToReference) {\r\n    <a class=\"reference\" [routerLink]=\"postingContentPart()?.linkToReference\" [queryParams]=\"postingContentPart()?.queryParams\">\r\n        <fa-icon class=\"px-1\" [icon]=\"referenceIcon(postingContentPart()?.referenceType!)\" />{{ postingContentPart()?.referenceStr }}\r\n    </a>\r\n}\r\n@if (postingContentPart()?.referenceType === ReferenceType.POST && !postingContentPart()?.linkToReference) {\r\n    <a class=\"reference\"> <fa-icon class=\"px-1\" [icon]=\"referenceIcon(postingContentPart()?.referenceType!)\" />{{ postingContentPart()?.referenceStr }} </a>\r\n}\r\n@if (postingContentPart()?.referenceType === ReferenceType.USER) {\r\n    <a class=\"reference\" (click)=\"onClickUserReference(postingContentPart()?.queryParams?.referenceUserLogin)\">\r\n        <fa-icon class=\"px-1\" [icon]=\"faAt\" />{{ postingContentPart()?.referenceStr }}\r\n    </a>\r\n}\r\n@if (postingContentPart()?.referenceType === ReferenceType.CHANNEL) {\r\n    <a class=\"reference\" (click)=\"onClickChannelReference(postingContentPart()?.queryParams?.channelId)\">\r\n        <fa-icon class=\"px-1\" [icon]=\"faHashtag\" />{{ postingContentPart()?.referenceStr }}\r\n    </a>\r\n}\r\n@if (postingContentPart()?.attachmentToReference) {\r\n    <a class=\"reference\" (click)=\"openAttachment(postingContentPart()?.attachmentToReference || '')\">\r\n        <fa-icon class=\"px-1\" [icon]=\"faFile\" />{{ postingContentPart()?.referenceStr }}\r\n    </a>\r\n}\r\n@if (postingContentPart()?.slideToReference) {\r\n    <div style=\"max-width: 400px\">\r\n        <a class=\"reference\" (click)=\"enlargeImage(postingContentPart()?.slideToReference || '')\">\r\n            @if (postingContentPart()?.slideToReference && !imageNotFound) {\r\n                <img\r\n                    class=\"img-fluid rounded-sm border mt-1 mb-1\"\r\n                    [src]=\"postingContentPart()?.slideToReference\"\r\n                    [alt]=\"postingContentPart()?.referenceStr\"\r\n                    [title]=\"postingContentPart()?.referenceStr\"\r\n                    (error)=\"toggleImageNotFound()\"\r\n                    height=\"auto\"\r\n                    width=\"100%\"\r\n                />\r\n            }\r\n        </a>\r\n        @if (imageNotFound) {\r\n            <div class=\"card\">\r\n                <h5 class=\"card-body\"><fa-icon class=\"px-1\" [icon]=\"faBan\" /><span jhiTranslate=\"artemisApp.markdownEditor.preview.slideNotFound\"></span></h5>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n@if (postingContentPart()?.imageToReference) {\r\n    <div [style.user-select]=\"'none'\" [style.max-width.px]=\"400\">\r\n        @if (postingContentPart()?.imageToReference && !imageNotFound) {\r\n            <a class=\"reference\" (click)=\"enlargeImage(postingContentPart()?.imageToReference || '')\">\r\n                <img\r\n                    class=\"img-fluid rounded-sm border mt-1 mb-1\"\r\n                    [src]=\"postingContentPart()?.imageToReference\"\r\n                    [alt]=\"postingContentPart()?.referenceStr\"\r\n                    [title]=\"postingContentPart()?.referenceStr\"\r\n                    (error)=\"toggleImageNotFound()\"\r\n                    height=\"auto\"\r\n                    width=\"100%\"\r\n                />\r\n            </a>\r\n        } @else if (imageNotFound) {\r\n            <div class=\"card\">\r\n                <h5 class=\"card-body\"><fa-icon class=\"px-1\" [icon]=\"faBan\" /><span jhiTranslate=\"artemisApp.markdownEditor.preview.imageNotFound\"></span></h5>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n@if (postingContentPart()?.contentAfterReference) {\r\n    <span\r\n        class=\"markdown-preview\"\r\n        style=\"white-space: pre-wrap\"\r\n        [innerHTML]=\"processedContentAfterReference | htmlForPostingMarkdown: false : allowedHtmlTags : allowedHtmlAttributes\"\r\n    ></span>\r\n}\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { ConfirmIconComponent } from 'app/shared/confirm-icon/confirm-icon.component';\r\nimport { LinkPreview } from 'app/shared/link-preview/services/link-preview.service';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { urlRegex } from 'app/shared/link-preview/services/linkify.service';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-link-preview',\r\n    templateUrl: './link-preview.component.html',\r\n    styleUrls: ['./link-preview.component.scss'],\r\n    imports: [ConfirmIconComponent, NgClass, ArtemisTranslatePipe],\r\n})\r\nexport class LinkPreviewComponent implements OnInit {\r\n    private metisService = inject(MetisService);\r\n\r\n    @Input() linkPreview: LinkPreview;\r\n    @Input() posting?: Posting;\r\n    @Input() showLoadingsProgress: boolean;\r\n    @Input() loaded: boolean;\r\n    @Input() hasError: boolean;\r\n    @Input() isReply?: boolean;\r\n    @Input() multiple?: boolean;\r\n\r\n    isAuthorOfOriginalPost: boolean;\r\n\r\n    faTimes = faTimes;\r\n\r\n    ngOnInit() {\r\n        this.isAuthorOfOriginalPost = this.metisService.metisUserIsAuthorOfPosting(this.posting!);\r\n    }\r\n\r\n    /**\r\n     * Removes the link preview from the list of link previews\r\n     *\r\n     * @param {LinkPreview} linkPreview the link preview to be removed\r\n     */\r\n    removeLinkPreview(linkPreview: LinkPreview) {\r\n        const urlToSearchFor = linkPreview.url;\r\n\r\n        if (this.posting) {\r\n            // Find all URL matches in the text (in the content of the post)\r\n            let match;\r\n            let modifiedContent = this.posting.content!;\r\n            while ((match = urlRegex.exec(modifiedContent)) !== null) {\r\n                const url = match[0];\r\n                const start = match.index;\r\n                const end = start + url.length;\r\n\r\n                if (url === urlToSearchFor || url.includes(urlToSearchFor)) {\r\n                    // wrap the URL in <>\r\n                    modifiedContent = modifiedContent.substring(0, start) + `<${url}>` + modifiedContent.substring(end);\r\n                }\r\n            }\r\n\r\n            this.posting.content = modifiedContent;\r\n\r\n            if (this.isReply) {\r\n                this.metisService.updateAnswerPost(this.posting).subscribe({\r\n                    next: () => {},\r\n                });\r\n            } else {\r\n                this.metisService.updatePost(this.posting).subscribe({\r\n                    next: () => {},\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n", "@if (!this.linkPreview && !this.loaded && this.showLoadingsProgress) {\r\n    @if (!hasError) {\r\n        <div class=\"loading-container\">\r\n            <!-- Loading template -->\r\n            <div class=\"loading-spinner\">\r\n                <div class=\"spinner\"></div>\r\n            </div>\r\n        </div>\r\n    }\r\n} @else {\r\n    @if (linkPreview && linkPreview.shouldPreviewBeShown) {\r\n        <div class=\"preview-container\">\r\n            <!-- Link preview template -->\r\n            <div class=\"preview-card\">\r\n                @if (isAuthorOfOriginalPost) {\r\n                    <jhi-confirm-icon\r\n                        class=\"close-button\"\r\n                        iconSize=\"sm\"\r\n                        (confirmEvent)=\"removeLinkPreview(linkPreview)\"\r\n                        [ngClass]=\"'faTimes clickable icon'\"\r\n                        [initialIcon]=\"faTimes\"\r\n                        [initialTooltip]=\"'artemisApp.metis.removeLinkPreview' | artemisTranslate\"\r\n                        [confirmTooltip]=\"'artemisApp.metis.confirmRemoveLinkPreview' | artemisTranslate\"\r\n                    />\r\n                }\r\n                <div class=\"left-border\">\r\n                    <div class=\"preview-content\">\r\n                        <h2 class=\"preview-title\">{{ linkPreview.title }}</h2>\r\n                        <p class=\"preview-description\">{{ linkPreview.description }}</p>\r\n                    </div>\r\n                    @if (linkPreview.image && !multiple) {\r\n                        <div class=\"preview-image\">\r\n                            <img [src]=\"linkPreview.image\" alt=\"Preview Image\" />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n", "import { ChangeDetectionStrategy, Component, OnChanges, OnInit, inject, input, signal } from '@angular/core';\r\nimport { LinkPreview, LinkPreviewService } from 'app/shared/link-preview/services/link-preview.service';\r\nimport { Link, LinkifyService } from 'app/shared/link-preview/services/linkify.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { LinkPreviewComponent } from '../link-preview/link-preview.component';\r\n\r\n@Component({\r\n    selector: 'jhi-link-preview-container',\r\n    templateUrl: './link-preview-container.component.html',\r\n    styleUrls: ['./link-preview-container.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [LinkPreviewComponent],\r\n})\r\nexport class LinkPreviewContainerComponent implements OnInit, OnChanges {\r\n    private readonly linkPreviewService: LinkPreviewService = inject(LinkPreviewService);\r\n    private readonly linkifyService: LinkifyService = inject(LinkifyService);\r\n\r\n    readonly data = input<string>();\r\n    readonly author = input<User>();\r\n    readonly posting = input<Posting>();\r\n    readonly isEdited = input<boolean>();\r\n    readonly isReply = input<boolean>();\r\n\r\n    readonly linkPreviews = signal<LinkPreview[]>([]);\r\n    readonly hasError = signal<boolean>(false);\r\n    readonly loaded = signal<boolean>(false);\r\n    readonly showLoadingsProgress = signal<boolean>(true);\r\n    readonly multiple = signal<boolean>(false);\r\n\r\n    ngOnInit() {\r\n        this.findPreviews();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.reloadLinkPreviews();\r\n    }\r\n\r\n    private reloadLinkPreviews() {\r\n        this.loaded.set(false);\r\n        this.showLoadingsProgress.set(true);\r\n        this.linkPreviews.set([]); // Clear the existing link previews\r\n        this.findPreviews();\r\n    }\r\n\r\n    private findPreviews() {\r\n        const links: Link[] = this.linkifyService.find(this.data() ?? '');\r\n        // TODO: The limit of 5 link previews should be configurable (maybe in course level)\r\n        links\r\n            .filter((link) => !link.isLinkPreviewRemoved)\r\n            .slice(0, 5)\r\n            .forEach((link) => {\r\n                this.linkPreviewService.fetchLink(link.href).subscribe({\r\n                    next: (linkPreview) => {\r\n                        linkPreview.shouldPreviewBeShown = !!(linkPreview.url && linkPreview.title && linkPreview.description && linkPreview.image);\r\n\r\n                        const existingLinkPreviewIndex = this.linkPreviews().findIndex((preview) => preview.url === linkPreview.url);\r\n                        if (existingLinkPreviewIndex !== -1) {\r\n                            this.linkPreviews.update((previews) => {\r\n                                const existingLinkPreview = previews[existingLinkPreviewIndex];\r\n                                Object.assign(existingLinkPreview, linkPreview);\r\n                                return previews;\r\n                            });\r\n                        } else {\r\n                            this.linkPreviews.set([...this.linkPreviews(), linkPreview]);\r\n                        }\r\n\r\n                        this.hasError.set(false);\r\n                        this.loaded.set(true);\r\n                        this.showLoadingsProgress.set(false);\r\n                        this.multiple.set(this.linkPreviews().length > 1);\r\n                    },\r\n                });\r\n            });\r\n    }\r\n\r\n    trackLinks(index: number, preview: LinkPreview) {\r\n        return preview?.url;\r\n    }\r\n}\r\n", "@for (preview of linkPreviews(); track trackLinks($index, preview)) {\r\n    <div>\r\n        <jhi-link-preview\r\n            [linkPreview]=\"preview\"\r\n            [showLoadingsProgress]=\"showLoadingsProgress()\"\r\n            [hasError]=\"hasError()\"\r\n            [loaded]=\"loaded()\"\r\n            [posting]=\"posting()\"\r\n            [isReply]=\"isReply()\"\r\n            [multiple]=\"multiple()\"\r\n        />\r\n    </div>\r\n}\r\n", "import { ChangeDetectionStrategy, Component, OnChanges, OnDestroy, OnInit, inject, input, output, signal } from '@angular/core';\r\nimport { Params } from '@angular/router';\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { PatternMatch, PostingContentPart, ReferenceType } from '../metis.util';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgStyle } from '@angular/common';\r\nimport { PostingContentPartComponent } from './posting-content-part/posting-content-part.components';\r\nimport { LinkPreviewContainerComponent } from '../../link-preview/components/link-preview-container/link-preview-container.component';\r\n\r\n@Component({\r\n    selector: 'jhi-posting-content',\r\n    templateUrl: './posting-content.component.html',\r\n    styleUrls: ['./posting-content.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [TranslateDirective, FaIconComponent, NgStyle, PostingContentPartComponent, LinkPreviewContainerComponent],\r\n})\r\nexport class PostingContentComponent implements OnInit, OnChanges, OnDestroy {\r\n    private metisService = inject(MetisService);\r\n\r\n    content = input<string | undefined>();\r\n    previewMode = input<boolean | undefined>();\r\n    author = input<User | undefined>();\r\n    isEdited = input<boolean>(false);\r\n    posting = input<Posting | undefined>();\r\n    isReply = input<boolean | undefined>();\r\n\r\n    userReferenceClicked = output<string>();\r\n    channelReferenceClicked = output<number>();\r\n\r\n    isDeleted = input<boolean>(false);\r\n    isSubscribeToMetis = input<boolean>(true);\r\n    deleteTimerInSeconds = input<number>(0);\r\n    onUndoDeleteEvent = output<void>();\r\n\r\n    showContent = false;\r\n    currentlyLoadedPosts: Post[] = [];\r\n    postingContentParts = signal<PostingContentPart[]>([]);\r\n\r\n    private postsSubscription: Subscription;\r\n\r\n    // Directory for attachments. If the endpoint of the file service changes, this needs to be adapted\r\n    private readonly ATTACHMENT_DIR = 'api/core/files/attachments/';\r\n\r\n    // Icons\r\n    faAngleUp = faAngleUp;\r\n    faAngleDown = faAngleDown;\r\n\r\n    /**\r\n     * on initialization: calculate posting parts to be displayed\r\n     */\r\n    ngOnInit(): void {\r\n        if (!this.isSubscribeToMetis()) {\r\n            const patternMatches: PatternMatch[] = this.getPatternMatches();\r\n            this.computePostingContentParts(patternMatches);\r\n        } else {\r\n            this.computeContentPartsOfPosts();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on changes: update posting parts to be displayed\r\n     */\r\n    ngOnChanges() {\r\n        if (!this.isSubscribeToMetis()) {\r\n            this.computeContentPartsOfPosts();\r\n        }\r\n\r\n        const patternMatches: PatternMatch[] = this.getPatternMatches();\r\n        this.computePostingContentParts(patternMatches);\r\n    }\r\n\r\n    /**\r\n     * on initialization & on changes: subscribes to the currently loaded posts in the context, to be available for possible references,\r\n     * computes the PostingContentParts for rendering\r\n     */\r\n    private computeContentPartsOfPosts() {\r\n        this.postsSubscription = this.metisService.posts.subscribe((posts: Post[]) => {\r\n            this.currentlyLoadedPosts = posts;\r\n            const patternMatches: PatternMatch[] = this.getPatternMatches();\r\n            this.computePostingContentParts(patternMatches);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * on leaving the page, the modal should be closed, subscriptions unsubscribed\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.postsSubscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * computes an array of PostingContentPart objects by splitting up the posting content by post references (denoted by #{PostId}).\r\n     */\r\n    computePostingContentParts(patternMatches: PatternMatch[]): void {\r\n        this.postingContentParts.set([]);\r\n        // if there are references found in the posting content, we need to create a PostingContentPart per reference match\r\n        if (patternMatches && patternMatches.length > 0) {\r\n            patternMatches.forEach((patternMatch: PatternMatch, index: number) => {\r\n                if (this.content() === undefined) {\r\n                    return;\r\n                }\r\n\r\n                const referencedId = this.content()!.substring(patternMatch.startIndex + 1, patternMatch.endIndex); // e.g. post id 6\r\n                const referenceType = patternMatch.referenceType;\r\n                let referenceStr; // e.g. '#6', 'Lecture-1.pdf', 'Modeling Exercise'\r\n                let linkToReference;\r\n                let attachmentToReference;\r\n                let slideToReference;\r\n                let queryParams;\r\n                let imageToReference;\r\n                if (ReferenceType.POST === referenceType) {\r\n                    // if the referenced Id is within the currently loaded posts, we can create the context-specific link to that post\r\n                    // by invoking the respective metis service methods for link and query params and passing the post object;\r\n                    // if not, we do not want to fetch the post from the DB and rather always navigate to the course discussion page with the referenceStr as search text\r\n                    const referencedPostInLoadedPosts = this.currentlyLoadedPosts.find((post: Post) => post.id! === +referencedId);\r\n                    referenceStr = this.content()!.substring(patternMatch.startIndex, patternMatch.endIndex);\r\n                    if (isCommunicationEnabled(this.metisService.getCourse())) {\r\n                        linkToReference = this.metisService.getLinkForPost();\r\n                        queryParams = referencedPostInLoadedPosts ? this.metisService.getQueryParamsForPost(referencedPostInLoadedPosts) : ({ searchText: referenceStr } as Params);\r\n                    }\r\n                } else if (\r\n                    ReferenceType.LECTURE === referenceType ||\r\n                    ReferenceType.PROGRAMMING === referenceType ||\r\n                    ReferenceType.MODELING === referenceType ||\r\n                    ReferenceType.QUIZ === referenceType ||\r\n                    ReferenceType.TEXT === referenceType ||\r\n                    ReferenceType.FILE_UPLOAD === referenceType\r\n                ) {\r\n                    // reference opening tag: [{referenceType}] (wrapped between 2 characters)\r\n                    // reference closing tag: [/referenceType] (wrapped between 3 characters)\r\n                    // referenceStr: string to be displayed for the reference\r\n                    // linkToReference: link to be navigated to on reference click\r\n                    referenceStr = this.content()!.substring(this.content()!.indexOf(']', patternMatch.startIndex)! + 1, this.content()!.indexOf('(', patternMatch.startIndex)!);\r\n                    linkToReference = [\r\n                        this.content()!.substring(this.content()!.indexOf('(', patternMatch.startIndex)! + 1, this.content()!.indexOf(')', patternMatch.startIndex)),\r\n                    ];\r\n                } else if (ReferenceType.FAQ === referenceType) {\r\n                    referenceStr = this.content()!.substring(\r\n                        this.content()!.indexOf(']', patternMatch.startIndex)! + 1,\r\n                        this.content()!.indexOf('(/courses', patternMatch.startIndex)!,\r\n                    );\r\n                    linkToReference = [\r\n                        this.content()!.substring(this.content()!.indexOf('(/courses', patternMatch.startIndex)! + 1, this.content()!.indexOf('?faqId', patternMatch.startIndex)),\r\n                    ];\r\n                    queryParams = { faqId: this.content()!.substring(this.content()!.indexOf('=') + 1, this.content()!.indexOf(')')) } as Params;\r\n                } else if (ReferenceType.ATTACHMENT === referenceType || ReferenceType.ATTACHMENT_UNITS === referenceType) {\r\n                    // referenceStr: string to be displayed for the reference\r\n                    // attachmentToReference: location of attachment to be opened on reference click\r\n                    // attachmentRefDir: directory of the attachment\r\n                    referenceStr = this.content()!.substring(this.content()!.indexOf(']', patternMatch.startIndex)! + 1, this.content()!.indexOf('(', patternMatch.startIndex)!);\r\n                    const attachmentRefDir = this.ATTACHMENT_DIR;\r\n                    attachmentToReference =\r\n                        attachmentRefDir +\r\n                        this.content()!.substring(this.content()!.indexOf('(', patternMatch.startIndex)! + 1, this.content()!.indexOf(')', patternMatch.startIndex));\r\n                } else if (ReferenceType.SLIDE === referenceType) {\r\n                    // referenceStr: string to be displayed for the reference\r\n                    // slideToReference: location of attachment to be opened on reference click\r\n                    referenceStr = this.content()!.substring(this.content()!.indexOf(']', patternMatch.startIndex)! + 1, this.content()!.indexOf('(', patternMatch.startIndex)!);\r\n                    const attachmentUnitRefDir = this.ATTACHMENT_DIR;\r\n                    slideToReference =\r\n                        attachmentUnitRefDir +\r\n                        this.content()!.substring(this.content()!.indexOf('(', patternMatch.startIndex)! + 1, this.content()!.indexOf(')', patternMatch.startIndex));\r\n                } else if (ReferenceType.USER === referenceType) {\r\n                    // referenceStr: string to be displayed for the reference\r\n                    referenceStr = this.content()!.substring(this.content()!.indexOf(']', patternMatch.startIndex)! + 1, this.content()!.indexOf('(', patternMatch.startIndex)!);\r\n                    queryParams = {\r\n                        referenceUserLogin: this.content()!.substring(\r\n                            this.content()!.indexOf('(', patternMatch.startIndex)! + 1,\r\n                            this.content()!.indexOf(')', patternMatch.startIndex),\r\n                        ),\r\n                    } as Params;\r\n                } else if (ReferenceType.CHANNEL === referenceType) {\r\n                    // referenceStr: string to be displayed for the reference\r\n                    referenceStr = this.content()!.substring(this.content()!.indexOf(']', patternMatch.startIndex)! + 1, this.content()!.indexOf('(', patternMatch.startIndex)!);\r\n                    const channelId = parseInt(\r\n                        this.content()!.substring(this.content()!.indexOf('(', patternMatch.startIndex)! + 1, this.content()!.indexOf(')', patternMatch.startIndex)),\r\n                    );\r\n                    queryParams = {\r\n                        channelId: isNaN(channelId) ? undefined : channelId,\r\n                    } as Params;\r\n                } else if (ReferenceType.IMAGE === referenceType) {\r\n                    // get filename of the image\r\n                    referenceStr = this.content()!.substring(this.content()!.indexOf('![') + 2, this.content()!.indexOf('](', patternMatch.startIndex));\r\n                    imageToReference = this.content()!.substring(this.content()!.indexOf('(', patternMatch.startIndex)! + 1, this.content()!.indexOf(')', patternMatch.startIndex));\r\n                }\r\n\r\n                // determining the endIndex of the content after the reference\r\n                let endIndexOfContentAfterReference;\r\n                // if current match is not the last match in the array, i.e. there is another match\r\n                if (index < patternMatches.length - 1) {\r\n                    // endIndex of the content after the reference equals the startIndex of the subsequent match\r\n                    endIndexOfContentAfterReference = patternMatches[index + 1].startIndex;\r\n                    // if current match is the only or last one in patternMatches\r\n                } else {\r\n                    // endIndex of the content after the reference equals the end of the post content\r\n                    endIndexOfContentAfterReference = this.content()!.length;\r\n                }\r\n\r\n                // building the PostingContentPart object\r\n                const contentPart: PostingContentPart = {\r\n                    contentBeforeReference: index === 0 ? this.content()!.substring(0, patternMatch.startIndex) : undefined, // only defined for the first match\r\n                    linkToReference,\r\n                    attachmentToReference,\r\n                    slideToReference,\r\n                    queryParams,\r\n                    referenceStr,\r\n                    referenceType,\r\n                    imageToReference,\r\n                    contentAfterReference: this.content()!.substring(patternMatch.endIndex, endIndexOfContentAfterReference),\r\n                };\r\n                this.postingContentParts.set([...this.postingContentParts(), contentPart]);\r\n            });\r\n            // if there are no post references in the content, the whole content is represented by a single PostingContentPart,\r\n            // with contentBeforeReferenced represents the post content\r\n        } else {\r\n            const contentLink: PostingContentPart = {\r\n                contentBeforeReference: this.content()!,\r\n                linkToReference: undefined,\r\n                queryParams: undefined,\r\n                referenceStr: undefined,\r\n                referenceType: undefined,\r\n                contentAfterReference: undefined,\r\n            };\r\n            this.postingContentParts.set([...this.postingContentParts(), contentLink]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * searches a regex pattern within a string and returns an array containing a PatternMatch Object per match\r\n     */\r\n    getPatternMatches(): PatternMatch[] {\r\n        // Group 1: reference pattern for Posts: #{PostId} Ex: (#45)\r\n        // Group 2: reference pattern for Programming Exercises\r\n        // Group 3: reference pattern for Modeling Exercises\r\n        // Group 4: reference pattern for Text Exercises\r\n        // Group 5: reference pattern for File Upload Exercises\r\n        // Group 6: reference pattern for Lectures\r\n        // Group 7: reference pattern for Lecture Attachments\r\n        // Group 8: reference pattern for Lecture Units\r\n        // Group 9: reference pattern for Users\r\n        // Group 10: pattern for embedded images\r\n        // Group 11: reference pattern for FAQ\r\n        // globally searched for, i.e. no return after first match\r\n        const pattern =\r\n            /(?<POST>#\\d+)|(?<PROGRAMMING>\\[programming].*?\\[\\/programming])|(?<MODELING>\\[modeling].*?\\[\\/modeling])|(?<QUIZ>\\[quiz].*?\\[\\/quiz])|(?<TEXT>\\[text].*?\\[\\/text])|(?<FILE_UPLOAD>\\[file-upload].*?\\[\\/file-upload])|(?<LECTURE>\\[lecture].*?\\[\\/lecture])|(?<ATTACHMENT>\\[attachment].*?\\[\\/attachment])|(?<ATTACHMENT_UNITS>\\[lecture-unit].*?\\[\\/lecture-unit])|(?<SLIDE>\\[slide].*?\\[\\/slide])|(?<USER>\\[user].*?\\[\\/user])|(?<CHANNEL>\\[channel].*?\\[\\/channel])|(?<IMAGE>!\\[.*?]\\(.*?\\))|(?<FAQ>\\[faq].*?\\[\\/faq])/g;\r\n\r\n        // array with PatternMatch objects per reference found in the posting content\r\n        const patternMatches: PatternMatch[] = [];\r\n\r\n        // find start and end index of referenced posts in content, for each reference save [startIndexOfReference, endIndexOfReference] in the referenceIndicesArray\r\n        let match = pattern.exec(this.content()!);\r\n        while (match) {\r\n            let group: ReferenceType | undefined = undefined;\r\n\r\n            for (const groupsKey in match.groups) {\r\n                if (match.groups[groupsKey]) {\r\n                    group = ReferenceType[groupsKey as keyof typeof ReferenceType];\r\n                }\r\n            }\r\n            if (group) {\r\n                patternMatches.push({\r\n                    startIndex: match.index,\r\n                    endIndex: pattern.lastIndex,\r\n                    referenceType: group!,\r\n                } as PatternMatch);\r\n            }\r\n\r\n            match = pattern.exec(this.content()!);\r\n        }\r\n        return patternMatches;\r\n    }\r\n\r\n    contentPartTrack(index: number) {\r\n        return this.posting()?.id + '_' + index;\r\n    }\r\n}\r\n", "@if (isDeleted()) {\r\n    <span class=\"posting-content-undo-delete d-inline-flex align-items-center\">\r\n        <span class=\"text-secondary\" jhiTranslate=\"artemisApp.metis.post.deletedContent\" [translateValues]=\"{ progress: deleteTimerInSeconds() }\"></span>\r\n        <button class=\"btn btn-outline-primary btn-sm ms-2 position-relative\" (click)=\"onUndoDeleteEvent.emit()\">\r\n            <span class=\"post-delete-button-label\" jhiTranslate=\"artemisApp.metis.post.undoDelete\"></span>\r\n            <span class=\"post-delete-button-background\"></span>\r\n        </button>\r\n    </span>\r\n} @else {\r\n    <!-- in preview mode (showing similar posts during creation): content can be expanded and collapsed shown -->\r\n    @if (previewMode()) {\r\n        <div class=\"pb-1\">\r\n            <span class=\"clickable p-0\">\r\n                <fa-icon [icon]=\"showContent ? faAngleUp : faAngleDown\" [size]=\"'xs'\" [ngStyle]=\"{ color: '#6a737d' }\" (click)=\"showContent = !showContent\" />\r\n            </span>\r\n            <span class=\"toggle-content\" jhiTranslate=\"{{ showContent ? 'artemisApp.metis.post.collapseContent' : 'artemisApp.metis.post.showContent' }}\"></span>\r\n            @if (showContent) {\r\n                <div>\r\n                    @for (postingContentPart of postingContentParts(); track contentPartTrack($index)) {\r\n                        <jhi-posting-content-part\r\n                            [postingContentPart]=\"postingContentPart\"\r\n                            (userReferenceClicked)=\"userReferenceClicked.emit($event)\"\r\n                            (channelReferenceClicked)=\"channelReferenceClicked.emit($event)\"\r\n                        />\r\n                    }\r\n                    @if (isEdited()) {\r\n                        <span class=\"edited-text\" jhiTranslate=\"artemisApp.metis.edited\"></span>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    <!-- not in preview mode: content always shown -->\r\n    @if (!previewMode()) {\r\n        <div class=\"pb-1\">\r\n            @for (postingContentPart of postingContentParts(); track contentPartTrack($index)) {\r\n                <jhi-posting-content-part\r\n                    [postingContentPart]=\"postingContentPart\"\r\n                    (userReferenceClicked)=\"userReferenceClicked.emit($event)\"\r\n                    (channelReferenceClicked)=\"channelReferenceClicked.emit($event)\"\r\n                />\r\n            }\r\n            @if (isEdited()) {\r\n                <span class=\"edited-text\" jhiTranslate=\"artemisApp.metis.edited\"></span>\r\n            }\r\n            <jhi-link-preview-container [data]=\"content()\" [author]=\"author()\" [posting]=\"posting()\" [isEdited]=\"isEdited()\" [isReply]=\"isReply()\" />\r\n        </div>\r\n    }\r\n}\r\n", "import {\r\n    AfterContentChecked,\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnInit,\r\n    Output,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    computed,\r\n    forwardRef,\r\n    inject,\r\n    input,\r\n} from '@angular/core';\r\nimport monaco from 'monaco-editor';\r\nimport { ViewContainerRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { LectureService } from 'app/lecture/lecture.service';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { ChannelService } from 'app/shared/metis/conversations/channel.service';\r\nimport { isCommunicationEnabled, isFaqEnabled } from 'app/entities/course.model';\r\nimport { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { BoldAction } from 'app/shared/monaco-editor/model/actions/bold.action';\r\nimport { ItalicAction } from 'app/shared/monaco-editor/model/actions/italic.action';\r\nimport { UnderlineAction } from 'app/shared/monaco-editor/model/actions/underline.action';\r\nimport { QuoteAction } from 'app/shared/monaco-editor/model/actions/quote.action';\r\nimport { CodeAction } from 'app/shared/monaco-editor/model/actions/code.action';\r\nimport { CodeBlockAction } from 'app/shared/monaco-editor/model/actions/code-block.action';\r\nimport { MarkdownEditorHeight, MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { ChannelReferenceAction } from 'app/shared/monaco-editor/model/actions/communication/channel-reference.action';\r\nimport { UserMentionAction } from 'app/shared/monaco-editor/model/actions/communication/user-mention.action';\r\nimport { ExerciseReferenceAction } from 'app/shared/monaco-editor/model/actions/communication/exercise-reference.action';\r\nimport { LectureAttachmentReferenceAction } from 'app/shared/monaco-editor/model/actions/communication/lecture-attachment-reference.action';\r\nimport { FaqReferenceAction } from 'app/shared/monaco-editor/model/actions/communication/faq-reference.action';\r\nimport { UrlAction } from 'app/shared/monaco-editor/model/actions/url.action';\r\nimport { AttachmentAction } from 'app/shared/monaco-editor/model/actions/attachment.action';\r\nimport { ConversationDTO } from 'app/entities/metis/conversation/conversation.model';\r\nimport { EmojiAction } from 'app/shared/monaco-editor/model/actions/emoji.action';\r\nimport { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';\r\nimport { BulletedListAction } from 'app/shared/monaco-editor/model/actions/bulleted-list.action';\r\nimport { OrderedListAction } from 'app/shared/monaco-editor/model/actions/ordered-list.action';\r\nimport { StrikethroughAction } from 'app/shared/monaco-editor/model/actions/strikethrough.action';\r\nimport { PostingContentComponent } from '../posting-content/posting-content.components';\r\nimport { NgStyle } from '@angular/common';\r\nimport { FileService } from 'app/shared/http/file.service';\r\nimport { PostingEditType } from '../metis.util';\r\n\r\n@Component({\r\n    selector: 'jhi-posting-markdown-editor',\r\n    templateUrl: './posting-markdown-editor.component.html',\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => PostingMarkdownEditorComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [MarkdownEditorMonacoComponent, PostingContentComponent, NgStyle],\r\n})\r\nexport class PostingMarkdownEditorComponent implements OnInit, ControlValueAccessor, AfterContentChecked, AfterViewInit {\r\n    private cdref = inject(ChangeDetectorRef);\r\n    private metisService = inject(MetisService);\r\n    private fileService = inject(FileService);\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private lectureService = inject(LectureService);\r\n    private channelService = inject(ChannelService);\r\n    viewContainerRef = inject(ViewContainerRef);\r\n    private positionBuilder = inject(OverlayPositionBuilder);\r\n\r\n    @ViewChild(MarkdownEditorMonacoComponent, { static: true }) markdownEditor: MarkdownEditorMonacoComponent;\r\n\r\n    @Input() maxContentLength: number;\r\n    @Input() editorHeight: MarkdownEditorHeight = MarkdownEditorHeight.INLINE;\r\n    @Input() isInputLengthDisplayed = true;\r\n    @Input() suppressNewlineOnEnter = true;\r\n\r\n    isButtonLoading = input<boolean>(false);\r\n    isFormGroupValid = input<boolean>(false);\r\n    editType = input<PostingEditType>();\r\n\r\n    readonly EditType = PostingEditType.CREATE;\r\n    /**\r\n     * For AnswerPosts, the MetisService may not always have an active conversation (e.g. when in the 'all messages' view).\r\n     * In this case, file uploads have to rely on the parent post to determine the course.\r\n     */\r\n    readonly activeConversation = input<ConversationDTO>();\r\n    @Output() valueChange = new EventEmitter();\r\n    lectureAttachmentReferenceAction: LectureAttachmentReferenceAction;\r\n    defaultActions: TextEditorAction[];\r\n    content?: string;\r\n    previewMode = false;\r\n    fallbackConversationId = computed<number | undefined>(() => this.activeConversation()?.id);\r\n\r\n    protected readonly MarkdownEditorHeight = MarkdownEditorHeight;\r\n    private overlay = inject(Overlay);\r\n\r\n    /**\r\n     * on initialization: sets commands that will be available as formatting buttons during creation/editing of postings\r\n     */\r\n    ngOnInit(): void {\r\n        const messagingOnlyActions = isCommunicationEnabled(this.metisService.getCourse())\r\n            ? [new UserMentionAction(this.courseManagementService, this.metisService), new ChannelReferenceAction(this.metisService, this.channelService)]\r\n            : [];\r\n\r\n        const faqAction = isFaqEnabled(this.metisService.getCourse()) ? [new FaqReferenceAction(this.metisService)] : [];\r\n\r\n        this.defaultActions = [\r\n            new BoldAction(),\r\n            new ItalicAction(),\r\n            new UnderlineAction(),\r\n            new StrikethroughAction(),\r\n            new EmojiAction(this.viewContainerRef, this.overlay, this.positionBuilder),\r\n            new BulletedListAction(),\r\n            new OrderedListAction(),\r\n            new QuoteAction(),\r\n            new CodeAction(),\r\n            new CodeBlockAction(),\r\n            new UrlAction(),\r\n            new AttachmentAction(),\r\n            ...messagingOnlyActions,\r\n            new ExerciseReferenceAction(this.metisService),\r\n            ...faqAction,\r\n        ];\r\n\r\n        this.lectureAttachmentReferenceAction = new LectureAttachmentReferenceAction(this.metisService, this.lectureService, this.fileService);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.markdownEditor.enableTextFieldMode();\r\n\r\n        const editor = this.markdownEditor.monacoEditor;\r\n        if (editor) {\r\n            editor.onDidChangeModelContent((event: monaco.editor.IModelContentChangedEvent) => {\r\n                const position = editor.getPosition();\r\n                if (!position) {\r\n                    return;\r\n                }\r\n\r\n                const model = editor.getModel();\r\n                if (!model) {\r\n                    return;\r\n                }\r\n\r\n                const lineContent = model.getLineContent(position.lineNumber).trimStart();\r\n                const hasPrefix = lineContent.startsWith('- ') || /^\\s*1\\. /.test(lineContent);\r\n                if (hasPrefix && event.changes.length === 1 && (event.changes[0].text.startsWith('- ') || event.changes[0].text.startsWith('1. '))) {\r\n                    return;\r\n                }\r\n\r\n                if (hasPrefix) {\r\n                    this.handleKeyDown(model, position.lineNumber);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private handleKeyDown(model: monaco.editor.ITextModel, lineNumber: number): void {\r\n        const lineContent = model.getLineContent(lineNumber).trimStart();\r\n\r\n        if (lineContent.startsWith('- ')) {\r\n            this.markdownEditor.handleActionClick(new MouseEvent('click'), this.defaultActions.find((action) => action instanceof BulletedListAction)!);\r\n        } else if (/^\\d+\\. /.test(lineContent)) {\r\n            this.markdownEditor.handleActionClick(new MouseEvent('click'), this.defaultActions.find((action) => action instanceof OrderedListAction)!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * this lifecycle hook is required to avoid causing \"Expression has changed after it was checked\"-error when dismissing all changes in the markdown editor\r\n     * on dismissing the edit-create-modal -> we do not want to store changes in the create-edit-modal that are not saved\r\n     */\r\n    ngAfterContentChecked() {\r\n        this.cdref.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * the callback function to register on UI change\r\n     */\r\n    onChange = (_val: string) => {};\r\n\r\n    /**\r\n     * emits the value change from component\r\n     */\r\n    valueChanged() {\r\n        this.valueChange.emit();\r\n    }\r\n\r\n    /**\r\n     * writes the current value of a form group into the `content` variable,\r\n     * i.e. sets the value programmatically\r\n     * @param value\r\n     */\r\n    writeValue(value: any): void {\r\n        this.content = value ?? '';\r\n    }\r\n\r\n    /**\r\n     * upon UI element value changes, this method is triggered (required)\r\n     * @param fn\r\n     */\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n     * upon touching the element, this method gets triggered (required)\r\n     */\r\n    registerOnTouched(): void {}\r\n\r\n    /**\r\n     * changes in bound markdown content\r\n     * @param newValue\r\n     */\r\n    updateField(newValue: string) {\r\n        this.content = newValue;\r\n        this.onChange(this.content);\r\n        this.valueChanged();\r\n    }\r\n\r\n    onKeyDown(event: KeyboardEvent) {\r\n        // Prevent a newline from being added to the text when pressing enter\r\n        if (this.suppressNewlineOnEnter && event.key === 'Enter' && !event.shiftKey) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n}\r\n", "<div class=\"col-12\">\r\n    <jhi-markdown-editor-monaco\r\n        class=\"markdown-editor background-editor-color w-100\"\r\n        [markdown]=\"content\"\r\n        (markdownChange)=\"updateField($event)\"\r\n        (onEditSelect)=\"previewMode = false\"\r\n        (onPreviewSelect)=\"previewMode = true\"\r\n        [metaActions]=\"[]\"\r\n        [headerActions]=\"undefined\"\r\n        [defaultActions]=\"defaultActions\"\r\n        [lectureReferenceAction]=\"lectureAttachmentReferenceAction\"\r\n        [enableFileUpload]=\"true\"\r\n        [useCommunicationForFileUpload]=\"true\"\r\n        [fallbackConversationId]=\"fallbackConversationId()\"\r\n        [colorAction]=\"undefined\"\r\n        [enableResize]=\"false\"\r\n        [showDefaultPreview]=\"false\"\r\n        [useDefaultMarkdownEditorOptions]=\"false\"\r\n        [linkEditorHeightToContentHeight]=\"true\"\r\n        [initialEditorHeight]=\"editorHeight\"\r\n        [resizableMinHeight]=\"editorHeight\"\r\n        [resizableMaxHeight]=\"MarkdownEditorHeight.MEDIUM\"\r\n        (keydown)=\"onKeyDown($event)\"\r\n        [isButtonLoading]=\"isButtonLoading()\"\r\n        [isFormGroupValid]=\"isFormGroupValid()\"\r\n        [editType]=\"editType()\"\r\n        [isInCommunication]=\"true\"\r\n    >\r\n        <ng-container id=\"previewMonaco\">\r\n            @if (previewMode) {\r\n                <jhi-posting-content [content]=\"content\" />\r\n            }\r\n            <hr />\r\n        </ng-container>\r\n        <!-- End of Preview-->\r\n    </jhi-markdown-editor-monaco>\r\n</div>\r\n@if (isInputLengthDisplayed || (content?.length ?? 0) > maxContentLength) {\r\n    <div class=\"col mt-1 text-end\">\r\n        <p class=\"small my-0 ms-2\" [ngStyle]=\"{ color: content?.length! > maxContentLength || content?.length! === 0 ? 'red' : 'inherit' }\">\r\n            {{ content?.length ?? 0 }} / {{ maxContentLength }}\r\n        </p>\r\n    </div>\r\n}\r\n", "import { AfterContentChecked, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, ViewChild, inject } from '@angular/core';\r\nimport { Observable, Subscription, map, startWith } from 'rxjs';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { COMMA, ENTER, TAB } from '@angular/cdk/keycodes';\r\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatChipGrid, MatChipInput, MatChipInputEvent, MatChipRemove, MatChipRow } from '@angular/material/chips';\r\nimport { MatAutocomplete, MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-post-tag-selector',\r\n    templateUrl: './post-tag-selector.component.html',\r\n    styleUrls: ['./post-tag-selector.component.scss'],\r\n    imports: [\r\n        MatFormField,\r\n        MatChipGrid,\r\n        MatChipRow,\r\n        MatChipRemove,\r\n        FaIconComponent,\r\n        FormsModule,\r\n        MatAutocompleteTrigger,\r\n        MatChipInput,\r\n        ReactiveFormsModule,\r\n        MatAutocomplete,\r\n        MatOption,\r\n        AsyncPipe,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class PostTagSelectorComponent implements OnInit, OnChanges, OnDestroy, AfterContentChecked {\r\n    private metisService = inject(MetisService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    @Input() postTags?: string[];\r\n\r\n    @Output() postTagsChange = new EventEmitter<string[]>();\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef<HTMLInputElement>;\r\n\r\n    existingPostTags: Observable<string[]>;\r\n    tags: string[];\r\n\r\n    separatorKeysCodes = [ENTER, COMMA, TAB];\r\n    tagCtrl = new FormControl<string | undefined>(undefined);\r\n\r\n    private tagsSubscription: Subscription;\r\n\r\n    // Icons\r\n    faTimes = faTimes;\r\n\r\n    /**\r\n     * on initialization: subscribes to existing post tags used in this course (will be shown in dropdown of tag selector),\r\n     * copies the input post tags to string tags, so that they are shown in the selector\r\n     */\r\n    ngOnInit(): void {\r\n        this.tagsSubscription = this.metisService.tags.subscribe((tags: string[]) => {\r\n            this.existingPostTags = this.tagCtrl.valueChanges.pipe(\r\n                startWith(undefined),\r\n                map((category: string | undefined) => (category ? this._filter(category) : tags.slice())),\r\n            );\r\n        });\r\n        this.tags = this.postTags ? this.postTags : [];\r\n    }\r\n\r\n    private _filter(value: string): string[] {\r\n        const filterValue = value.toLowerCase();\r\n        return this.tags.filter((tag) => tag.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n    /**\r\n     * on changes: updates tags (selected in selector) and post tags (input)\r\n     */\r\n    ngOnChanges() {\r\n        this.tags = this.postTags ? this.postTags : [];\r\n    }\r\n\r\n    /**\r\n     * this lifecycle hook is required to avoid causing \"Expression has changed after it was checked\"-error when dismissing all changes in the tag-selector\r\n     * on dismissing the edit-create-modal -> we do not want to store changes in the create-edit-modal that are not saved\r\n     */\r\n    ngAfterContentChecked() {\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Called when the user selects a tag\r\n     * @param event a new tag was added\r\n     */\r\n    onItemAdd(event: MatChipInputEvent) {\r\n        const tagString = (event.value || '').trim();\r\n        // also test for duplicated tag\r\n        if (tagString && !this.tags?.includes(tagString) && this.tags?.length < 3) {\r\n            if (!this.tags) {\r\n                this.tags = [];\r\n            }\r\n            this.tags.push(tagString);\r\n            this.postTagsChange.emit(this.tags);\r\n        }\r\n\r\n        // Clear the input value\r\n        event.chipInput!.clear();\r\n        this.tagCtrl.setValue(null);\r\n    }\r\n\r\n    onItemSelect(event: MatAutocompleteSelectedEvent): void {\r\n        if (!this.tags?.includes(event.option.viewValue) && this.tags?.length < 3) {\r\n            if (!this.tags) {\r\n                this.tags = [];\r\n            }\r\n            this.tags.push(event.option.viewValue);\r\n            this.postTagsChange.emit(this.tags);\r\n        }\r\n        this.tagInput.nativeElement.value = '';\r\n        this.tagCtrl.setValue(null);\r\n    }\r\n\r\n    /**\r\n     * cancel colorSelector and remove exerciseCategory\r\n     * @param {string} tagToRemove\r\n     */\r\n    onItemRemove(tagToRemove: string) {\r\n        this.tags = this.tags.filter((tag) => tag !== tagToRemove);\r\n        this.postTagsChange.emit(this.tags);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.tagsSubscription.unsubscribe();\r\n    }\r\n}\r\n", "<mat-form-field class=\"post-tag-list\" appearance=\"outline\">\r\n    <mat-chip-grid #chipList aria-label=\"Tag selection\">\r\n        @for (tag of tags; track tag) {\r\n            <mat-chip-row (removed)=\"onItemRemove(tag)\" class=\"post-tag\">\r\n                <div class=\"custom-tag\">\r\n                    {{ tag }}\r\n                    <button matChipRemove>\r\n                        <fa-icon [icon]=\"faTimes\" class=\"post-tag-remove\" />\r\n                    </button>\r\n                </div>\r\n            </mat-chip-row>\r\n        }\r\n        <input\r\n            [hidden]=\"tags && tags.length >= 3\"\r\n            class=\"post-tag-input\"\r\n            [placeholder]=\"'artemisApp.metis.post.tagPlaceholder' | artemisTranslate\"\r\n            #tagInput\r\n            [formControl]=\"tagCtrl\"\r\n            [matAutocomplete]=\"auto\"\r\n            [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            (matChipInputTokenEnd)=\"onItemAdd($event)\"\r\n        />\r\n    </mat-chip-grid>\r\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onItemSelect($event)\">\r\n        @for (tag of existingPostTags | async; track tag) {\r\n            <mat-option [value]=\"tag\" class=\"tag-option\">\r\n                {{ tag }}\r\n            </mat-option>\r\n        }\r\n    </mat-autocomplete>\r\n</mat-form-field>\r\n", "import { Component, OnChanges, OnInit, input } from '@angular/core';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { PostingButtonComponent } from 'app/shared/metis/posting-button/posting-button.component';\r\nimport { PostingCreateEditModalDirective } from 'app/shared/metis/posting-create-edit-modal/posting-create-edit-modal.directive';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { PageType, PostContentValidationPattern, PostTitleValidationPattern, PostingEditType } from 'app/shared/metis/metis.util';\r\nimport { Conversation } from 'app/entities/metis/conversation/conversation.model';\r\nimport { getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { PostingMarkdownEditorComponent } from 'app/shared/metis/posting-markdown-editor/posting-markdown-editor.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { PostTagSelectorComponent } from './post-tag-selector/post-tag-selector.component';\r\n\r\nconst TITLE_MAX_LENGTH = 200;\r\n\r\nexport interface ContextSelectorOption {\r\n    conversation?: Conversation;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-post-create-edit-modal',\r\n    templateUrl: './post-create-edit-modal.component.html',\r\n    styleUrls: ['../../metis.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateDirective,\r\n        HelpIconComponent,\r\n        PostTagSelectorComponent,\r\n        PostingMarkdownEditorComponent,\r\n        PostingButtonComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class PostCreateEditModalComponent extends PostingCreateEditModalDirective<Post> implements OnInit, OnChanges {\r\n    isCommunicationPage = input<boolean>(false);\r\n\r\n    exercises?: Exercise[];\r\n    lectures?: Lecture[];\r\n    tags: string[];\r\n    course: Course;\r\n    pageType: PageType;\r\n    isAtLeastTutorInCourse: boolean;\r\n    isAtLeastInstructorInCourse: boolean;\r\n    currentContextSelectorOption: ContextSelectorOption;\r\n    similarPosts: Post[] = [];\r\n\r\n    readonly PageType = PageType;\r\n    readonly EditType = PostingEditType;\r\n    protected readonly getAsChannel = getAsChannelDTO;\r\n\r\n    // Icons\r\n    faAngleUp = faAngleUp;\r\n    faAngleDown = faAngleDown;\r\n\r\n    /**\r\n     * on initialization: reset all input field of the modal, determine the post context;\r\n     * subscribe to the form control changes of the context selector in order to show the Announcement info box on selection;\r\n     * authorize the user by invoking the metis service\r\n     */\r\n    ngOnInit(): void {\r\n        this.resetCurrentContextSelectorOption();\r\n        super.ngOnInit();\r\n        this.course = this.metisService.getCourse();\r\n        this.lectures = this.course.lectures;\r\n        this.exercises = this.course.exercises;\r\n        this.isAtLeastTutorInCourse = this.metisService.metisUserIsAtLeastTutorInCourse();\r\n        this.isAtLeastInstructorInCourse = this.metisService.metisUserIsAtLeastInstructorInCourse();\r\n    }\r\n\r\n    /**\r\n     * on initialization: reset all input field of the modal, determine the post context;\r\n     */\r\n    ngOnChanges() {\r\n        super.ngOnChanges();\r\n    }\r\n\r\n    /**\r\n     * opens the modal to edit or create a post\r\n     */\r\n    open(): void {\r\n        this.modalRef = this.modalService.open(this.postingEditor, {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n            beforeDismiss: () => {\r\n                // when cancelling the create or update action, we do not want to store the current values\r\n                // but rather reset the formGroup values so when re-opening the modal we do not show the previously unsaved changes\r\n                this.resetFormGroup();\r\n                return true;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * resets the pageType, initialContext, post tags, post title, and post content\r\n     */\r\n    resetFormGroup(): void {\r\n        this.pageType = this.metisService.getPageType();\r\n        this.tags = this.posting?.tags ?? [];\r\n        this.similarPosts = [];\r\n        this.posting.title = this.posting.title ?? '';\r\n        this.resetCurrentContextSelectorOption();\r\n        this.formGroup = this.formBuilder.group(this.postValidator());\r\n        this.formGroup.controls['context'].valueChanges.subscribe((context: ContextSelectorOption) => {\r\n            this.currentContextSelectorOption = context;\r\n            this.similarPosts = [];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service after setting the title and current date as creation date of the new answer post,\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    createPosting(): void {\r\n        this.posting = this.setPostProperties(this.posting);\r\n        this.metisService.createPost(this.posting).subscribe({\r\n            next: (post: Post) => {\r\n                this.isLoading = false;\r\n                this.modalRef?.close();\r\n                this.onCreate.emit(post);\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service after setting the title of the updated post\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    updatePosting(): void {\r\n        this.posting = this.setPostProperties(this.posting);\r\n        this.metisService.updatePost(this.posting).subscribe({\r\n            next: () => {\r\n                this.isLoading = false;\r\n                this.modalRef?.close();\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * updates the title in accordance with the current use case (edit or create)\r\n     */\r\n    updateModalTitle(): void {\r\n        if (this.editType === this.EditType.UPDATE) {\r\n            this.modalTitle = 'artemisApp.metis.editPosting';\r\n        } else if (this.editType === this.EditType.CREATE) {\r\n            this.modalTitle = 'artemisApp.metis.' + (getAsChannelDTO(this.posting.conversation)?.isAnnouncementChannel ? 'createModalTitleAnnouncement' : 'createModalTitlePost');\r\n        }\r\n    }\r\n\r\n    private setPostProperties(post: Post): Post {\r\n        post.title = this.formGroup.get('title')?.value;\r\n        post.tags = this.tags;\r\n        post.content = this.formGroup.get('content')?.value;\r\n        const currentContextSelectorOption: ContextSelectorOption = {\r\n            ...this.formGroup.get('context')?.value,\r\n        };\r\n        post = {\r\n            ...post,\r\n            ...currentContextSelectorOption,\r\n        };\r\n        if (currentContextSelectorOption.conversation) {\r\n            post.conversation = currentContextSelectorOption.conversation;\r\n        }\r\n        return post;\r\n    }\r\n\r\n    private resetCurrentContextSelectorOption(): void {\r\n        this.currentContextSelectorOption = { conversation: this.posting.conversation };\r\n    }\r\n\r\n    private postValidator() {\r\n        return {\r\n            // the pattern ensures that the title and content must include at least one non-whitespace character\r\n            title: [this.posting.title, [Validators.required, Validators.maxLength(TITLE_MAX_LENGTH), PostTitleValidationPattern]],\r\n            content: [this.posting.content, [Validators.required, Validators.maxLength(this.maxContentLength), PostContentValidationPattern]],\r\n            context: [this.currentContextSelectorOption, [Validators.required]],\r\n        };\r\n    }\r\n}\r\n", "<ng-template #postingEditor let-d=\"dismiss\">\r\n    <form [formGroup]=\"formGroup\" (ngSubmit)=\"confirm()\">\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\">{{ modalTitle | artemisTranslate }}</h4>\r\n            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"d('Cross click')\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <!-- info if announcement is created-->\r\n            @if (this.editType === EditType.CREATE && isCommunicationPage() && getAsChannel(posting.conversation)?.isAnnouncementChannel) {\r\n                <div class=\"alert alert-warning\" jhiTranslate=\"artemisApp.metis.post.announcementHint\"></div>\r\n            }\r\n            <!-- title -->\r\n            <div class=\"position-relative mb-3\">\r\n                <div>\r\n                    <label for=\"title\" class=\"mb-1\" jhiTranslate=\"artemisApp.metis.post.title\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.metis.post.titleTooltip\" />\r\n                </div>\r\n                <div>\r\n                    <input id=\"title\" formControlName=\"title\" type=\"text\" class=\"form-control\" name=\"title\" />\r\n                </div>\r\n            </div>\r\n            <!-- tags -->\r\n            @if (pageType !== PageType.PLAGIARISM_CASE_INSTRUCTOR && pageType !== PageType.PLAGIARISM_CASE_STUDENT && !isCommunicationPage() && !posting.conversation) {\r\n                <div class=\"position-relative mb-3\">\r\n                    <div>\r\n                        <label jhiTranslate=\"artemisApp.metis.post.tags\"></label>\r\n                        <jhi-help-icon text=\"artemisApp.metis.post.tagsTooltip\" />\r\n                    </div>\r\n                    <div>\r\n                        <jhi-post-tag-selector [(postTags)]=\"tags\" />\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div class=\"position-relative mb-1\">\r\n                <div>\r\n                    <label class=\"mb-1\" jhiTranslate=\"artemisApp.metis.post.content\"></label>\r\n                    <jhi-help-icon text=\"artemisApp.metis.post.contentTooltip\" />\r\n                </div>\r\n                <div class=\"row mb-2\">\r\n                    <jhi-posting-markdown-editor\r\n                        formControlName=\"content\"\r\n                        [editorHeight]=\"editorHeight\"\r\n                        [maxContentLength]=\"maxContentLength\"\r\n                        [suppressNewlineOnEnter]=\"false\"\r\n                        [isButtonLoading]=\"isLoading\"\r\n                        [isFormGroupValid]=\"formGroup.valid\"\r\n                        [editType]=\"editType\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        @if (editType === EditType.UPDATE) {\r\n            <div class=\"modal-footer\">\r\n                <button\r\n                    jhi-posting-button\r\n                    [buttonLoading]=\"isLoading\"\r\n                    [disabled]=\"isLoading || !formGroup.valid\"\r\n                    [buttonLabel]=\"'artemisApp.conversationsLayout.saveMessage' | artemisTranslate\"\r\n                    class=\"btn btn-sm btn-outline-primary\"\r\n                    id=\"save\"\r\n                    type=\"submit\"\r\n                ></button>\r\n            </div>\r\n        }\r\n    </form>\r\n</ng-template>\r\n", "import { Posting } from 'app/entities/metis/posting.model';\r\nimport { ChangeDetectorRef, Directive, Input, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { DisplayPriority } from 'app/shared/metis/metis.util';\r\nimport { faBookmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { faBookmark as farBookmark } from '@fortawesome/free-regular-svg-icons';\r\nimport { isMessagingEnabled } from 'app/entities/course.model';\r\nimport { OneToOneChatService } from 'app/shared/metis/conversations/one-to-one-chat.service';\r\nimport { MetisConversationService } from 'app/shared/metis/metis-conversation.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Directive()\r\nexport abstract class PostingDirective<T extends Posting> implements OnInit, OnDestroy {\r\n    @Input() posting: T;\r\n    @Input() isCommunicationPage: boolean;\r\n    @Input() showChannelReference?: boolean;\r\n\r\n    @Input() hasChannelModerationRights = false;\r\n    @Input() isThreadSidebar: boolean;\r\n    abstract get reactionsBar(): any;\r\n    showDropdown = false;\r\n    dropdownPosition = { x: 0, y: 0 };\r\n    showReactionSelector = false;\r\n    clickPosition = { x: 0, y: 0 };\r\n\r\n    isAnswerPost = false;\r\n    isDeleted = false;\r\n    readonly timeToDeleteInSeconds = 6;\r\n    deleteTimerInSeconds = 6;\r\n    deleteTimer: NodeJS.Timeout | undefined;\r\n    deleteInterval: NodeJS.Timeout | undefined;\r\n\r\n    content?: string;\r\n\r\n    protected oneToOneChatService = inject(OneToOneChatService);\r\n    protected metisConversationService = inject(MetisConversationService);\r\n    protected metisService = inject(MetisService);\r\n    protected changeDetector = inject(ChangeDetectorRef);\r\n    protected router = inject(Router);\r\n\r\n    // Icons\r\n    farBookmark = farBookmark;\r\n    faBookmark = faBookmark;\r\n\r\n    ngOnInit(): void {\r\n        this.content = this.posting.content;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.deleteTimer !== undefined) {\r\n            clearTimeout(this.deleteTimer);\r\n            this.deletePostingWithoutTimeout();\r\n        }\r\n\r\n        if (this.deleteInterval !== undefined) {\r\n            clearInterval(this.deleteInterval);\r\n        }\r\n    }\r\n\r\n    onDeleteEvent(isDelete: boolean) {\r\n        this.isDeleted = isDelete;\r\n\r\n        if (this.deleteTimer !== undefined) {\r\n            clearTimeout(this.deleteTimer);\r\n        }\r\n\r\n        if (this.deleteInterval !== undefined) {\r\n            clearInterval(this.deleteInterval);\r\n        }\r\n\r\n        if (isDelete) {\r\n            this.deleteTimerInSeconds = this.timeToDeleteInSeconds;\r\n\r\n            this.deleteTimer = setTimeout(\r\n                () => {\r\n                    this.deletePostingWithoutTimeout();\r\n                },\r\n                // We add a tiny buffer to make it possible for the user to react a bit longer than the ui displays (+1000)\r\n                this.deleteTimerInSeconds * 1000 + 1000,\r\n            );\r\n\r\n            this.deleteInterval = setInterval(() => {\r\n                this.deleteTimerInSeconds = Math.max(0, this.deleteTimerInSeconds - 1);\r\n                this.changeDetector.detectChanges();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    editPosting() {\r\n        this.reactionsBar.editPosting();\r\n        this.showDropdown = false;\r\n    }\r\n\r\n    togglePin() {\r\n        this.reactionsBar.togglePin();\r\n        this.showDropdown = false;\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    deletePost() {\r\n        this.reactionsBar.deletePosting();\r\n        this.showDropdown = false;\r\n    }\r\n\r\n    forwardMessage() {\r\n        this.reactionsBar.forwardMessage();\r\n    }\r\n\r\n    checkIfPinned(): DisplayPriority {\r\n        return this.reactionsBar.checkIfPinned();\r\n    }\r\n\r\n    selectReaction(event: any) {\r\n        this.reactionsBar.selectReaction(event);\r\n        this.showReactionSelector = false;\r\n    }\r\n\r\n    addReaction(event: MouseEvent) {\r\n        event.preventDefault();\r\n        this.showDropdown = false;\r\n\r\n        this.clickPosition = {\r\n            x: event.clientX,\r\n            y: event.clientY,\r\n        };\r\n\r\n        this.showReactionSelector = true;\r\n    }\r\n\r\n    toggleEmojiSelect() {\r\n        this.showReactionSelector = !this.showReactionSelector;\r\n    }\r\n\r\n    protected toggleSavePost() {\r\n        if (this.posting.isSaved) {\r\n            this.metisService.removeSavedPost(this.posting);\r\n            this.posting.isSaved = false;\r\n        } else {\r\n            this.metisService.savePost(this.posting);\r\n            this.posting.isSaved = true;\r\n        }\r\n    }\r\n\r\n    private deletePostingWithoutTimeout() {\r\n        if (this.isAnswerPost) {\r\n            this.metisService.deleteAnswerPost(this.posting);\r\n        } else {\r\n            this.metisService.deletePost(this.posting);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a or navigate to one-to-one chat with the referenced user\r\n     *\r\n     * @param referencedUserLogin login of the referenced user\r\n     */\r\n    onUserReferenceClicked(referencedUserLogin: string) {\r\n        const course = this.metisService.course;\r\n        if (isMessagingEnabled(course)) {\r\n            if (this.isCommunicationPage) {\r\n                this.metisConversationService.createOneToOneChat(referencedUserLogin).subscribe();\r\n            } else {\r\n                this.oneToOneChatService.create(course.id!, referencedUserLogin).subscribe((res) => {\r\n                    this.router.navigate(['courses', course.id, 'communication'], {\r\n                        queryParams: {\r\n                            conversationId: res.body!.id,\r\n                        },\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a or navigate to one-to-one chat with the referenced user\r\n     */\r\n    onUserNameClicked() {\r\n        if (!this.posting.author?.id) {\r\n            return;\r\n        }\r\n\r\n        const referencedUserId = this.posting.author?.id;\r\n\r\n        const course = this.metisService.course;\r\n        if (isMessagingEnabled(course)) {\r\n            if (this.isCommunicationPage) {\r\n                this.metisConversationService.createOneToOneChatWithId(referencedUserId).subscribe();\r\n            } else {\r\n                this.oneToOneChatService.createWithId(course.id!, referencedUserId).subscribe((res) => {\r\n                    this.router.navigate(['courses', course.id, 'communication'], {\r\n                        queryParams: {\r\n                            conversationId: res.body!.id,\r\n                        },\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { Component, ViewContainerRef, ViewEncapsulation, input, output } from '@angular/core';\r\nimport { PostingButtonComponent } from 'app/shared/metis/posting-button/posting-button.component';\r\nimport { PostingCreateEditModalDirective } from 'app/shared/metis/posting-create-edit-modal/posting-create-edit-modal.directive';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { PostContentValidationPattern } from 'app/shared/metis/metis.util';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { PostingMarkdownEditorComponent } from 'app/shared/metis/posting-markdown-editor/posting-markdown-editor.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-answer-post-create-edit-modal',\r\n    templateUrl: './answer-post-create-edit-modal.component.html',\r\n    styleUrls: ['answer-post-create-edit-modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [FormsModule, ReactiveFormsModule, PostingMarkdownEditorComponent, PostingButtonComponent, ArtemisTranslatePipe],\r\n})\r\nexport class AnswerPostCreateEditModalComponent extends PostingCreateEditModalDirective<AnswerPost> {\r\n    createEditAnswerPostContainerRef = input<ViewContainerRef>();\r\n    postingUpdated = output<Posting>();\r\n    isInputOpen = false;\r\n\r\n    /**\r\n     * renders the ng-template to edit or create an answerPost\r\n     */\r\n    open(): void {\r\n        this.close();\r\n        this.createEditAnswerPostContainerRef()?.createEmbeddedView(this.postingEditor);\r\n        this.isInputOpen = true;\r\n    }\r\n\r\n    /**\r\n     * clears the container to remove the input field when the user clicks cancel\r\n     */\r\n    close(): void {\r\n        this.createEditAnswerPostContainerRef()?.clear();\r\n        this.resetFormGroup();\r\n        this.isInputOpen = false;\r\n    }\r\n\r\n    /**\r\n     * resets the answer post content\r\n     */\r\n    resetFormGroup(): void {\r\n        this.posting = this.posting || { content: '' };\r\n        this.formGroup = this.formBuilder.group({\r\n            // the pattern ensures that the content must include at least one non-whitespace character\r\n            content: [this.posting.content, [Validators.required, Validators.maxLength(this.maxContentLength), PostContentValidationPattern]],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service after setting current date as creation date of the new answer post,\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    createPosting(): void {\r\n        this.posting.content = this.formGroup.get('content')?.value;\r\n        this.metisService.createAnswerPost(this.posting).subscribe({\r\n            next: (answerPost: AnswerPost) => {\r\n                this.resetFormGroup();\r\n                this.isLoading = false;\r\n                this.onCreate.emit(answerPost);\r\n                this.createEditAnswerPostContainerRef()?.clear();\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service with the updated answer post\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    updatePosting(): void {\r\n        this.posting.content = this.formGroup.get('content')?.value;\r\n        this.metisService.updateAnswerPost(this.posting).subscribe({\r\n            next: (updatedPost: AnswerPost) => {\r\n                this.postingUpdated.emit(updatedPost);\r\n                this.isLoading = false;\r\n                this.isInputOpen = false;\r\n                this.createEditAnswerPostContainerRef()?.clear();\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * updates the title in accordance with the current use case (edit or create)\r\n     */\r\n    updateModalTitle(): void {\r\n        if (this.editType === this.EditType.UPDATE) {\r\n            this.modalTitle = 'artemisApp.metis.editPosting';\r\n        } else if (this.editType === this.EditType.CREATE) {\r\n            this.modalTitle = 'artemisApp.metis.createModalTitleAnswer';\r\n        }\r\n    }\r\n}\r\n", "<ng-template #postingEditor>\r\n    <form [formGroup]=\"formGroup\" (ngSubmit)=\"confirm()\">\r\n        <div>\r\n            <jhi-posting-markdown-editor\r\n                formControlName=\"content\"\r\n                [editorHeight]=\"editorHeight\"\r\n                [maxContentLength]=\"maxContentLength\"\r\n                [isInputLengthDisplayed]=\"false\"\r\n                (keydown.enter)=\"confirm()\"\r\n                [isButtonLoading]=\"isLoading\"\r\n                [isFormGroupValid]=\"formGroup.valid\"\r\n                [editType]=\"editType\"\r\n            />\r\n            <div class=\"col mt-1 text-end\">\r\n                <button jhi-posting-button [buttonLabel]=\"'artemisApp.metis.cancel' | artemisTranslate\" class=\"btn btn-sm btn-outline-secondary\" (click)=\"close()\"></button>\r\n                <button\r\n                    jhi-posting-button\r\n                    [buttonLoading]=\"isLoading\"\r\n                    [disabled]=\"isLoading || !formGroup.valid\"\r\n                    [buttonLabel]=\"'artemisApp.metis.savePosting' | artemisTranslate\"\r\n                    id=\"save\"\r\n                    class=\"btn btn-sm btn-outline-primary\"\r\n                    type=\"submit\"\r\n                ></button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</ng-template>\r\n", "import { Component, computed, inject, input } from '@angular/core';\r\nimport { EmojiModule } from '@ctrl/ngx-emoji-mart/ngx-emoji';\r\nimport { Theme, ThemeService } from 'app/core/theme/theme.service';\r\nimport { EmojiUtils } from 'app/shared/metis/emoji/emoji.utils';\r\n\r\n@Component({\r\n    selector: 'jhi-emoji',\r\n    templateUrl: './emoji.component.html',\r\n    styleUrls: ['./emoji.component.scss'],\r\n    imports: [EmojiModule],\r\n})\r\nexport class EmojiComponent {\r\n    private themeService = inject(ThemeService);\r\n\r\n    utils = EmojiUtils;\r\n    emoji = input<string>('');\r\n\r\n    dark = computed(() => this.themeService.currentTheme() === Theme.DARK);\r\n}\r\n", "<!-- Using two instances to 'rerender' if the theme changes -->\r\n@if (!dark()) {\r\n    <ngx-emoji [backgroundImageFn]=\"utils.EMOJI_SHEET_URL\" class=\"emoji\" [emoji]=\"emoji()\" [size]=\"16\" />\r\n} @else {\r\n    <ngx-emoji [imageUrlFn]=\"utils.singleDarkModeEmojiUrlFn\" [backgroundImageFn]=\"utils.EMOJI_SHEET_URL\" class=\"emoji\" [emoji]=\"emoji()\" [size]=\"16\" />\r\n}\r\n", "import { Component, OnChanges, OnInit, computed, inject, input, output } from '@angular/core';\r\nimport { EmojiComponent } from 'app/shared/metis/emoji/emoji.component';\r\nimport { faCheckSquare, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { CachingStrategy } from 'app/shared/image/secured-image.component';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { tap } from 'rxjs';\r\nimport { faUser, faUserCheck, faUserGraduate } from '@fortawesome/free-solid-svg-icons';\r\nimport { DisplayPriority, UserRole } from 'app/shared/metis/metis.util';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { ProfilePictureComponent } from '../../profile-picture/profile-picture.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-posting-header',\r\n    templateUrl: './posting-header.component.html',\r\n    styleUrls: ['../metis.component.scss'],\r\n    imports: [ProfilePictureComponent, NgClass, FaIconComponent, NgbTooltip, TranslateDirective, ArtemisDatePipe, ArtemisTranslatePipe, EmojiComponent],\r\n})\r\nexport class PostingHeaderComponent implements OnInit, OnChanges {\r\n    lastReadDate = input<dayjs.Dayjs>();\r\n    posting = input<Posting>();\r\n    readOnlyMode = input<boolean>(false);\r\n    previewMode = input<boolean>(false);\r\n    hasChannelModerationRights = input<boolean>(false);\r\n    isCommunicationPage = input<boolean>();\r\n    isDeleted = input<boolean>(false);\r\n\r\n    isModalOpen = output<void>();\r\n    readonly onUserNameClicked = output<void>();\r\n\r\n    isAtLeastInstructorInCourse: boolean;\r\n    isAtLeastTutorInCourse: boolean;\r\n    isAuthorOfPosting: boolean;\r\n    postingIsOfToday: boolean;\r\n    todayFlag?: string;\r\n    userAuthorityIcon: IconProp;\r\n    userAuthority: string;\r\n    userRoleBadge: string;\r\n    userAuthorityTooltip: string;\r\n    currentUser?: User;\r\n\r\n    // Icons\r\n    readonly faPencilAlt = faPencilAlt;\r\n    readonly faCheckSquare = faCheckSquare;\r\n\r\n    private metisService = inject(MetisService);\r\n    private accountService = inject(AccountService);\r\n\r\n    isPostResolved = computed<boolean>(() => {\r\n        const posting = this.posting();\r\n        return this.isPost(posting) && posting.resolved === true;\r\n    });\r\n\r\n    isPostPinned = computed<boolean>(() => {\r\n        const posting = this.posting();\r\n        return this.isPost(posting) && posting.displayPriority == DisplayPriority.PINNED;\r\n    });\r\n\r\n    /**\r\n     * on initialization: determines if user is author of posting by invoking the metis service,\r\n     * determines if posting is of today and sets the today flag to be shown in the header of the posting\r\n     * determines icon and tooltip for authority type of the author\r\n     */\r\n    ngOnInit(): void {\r\n        this.accountService\r\n            .getAuthenticationState()\r\n            .pipe(\r\n                tap((user: User) => {\r\n                    this.currentUser = user;\r\n                    this.setUserProperties();\r\n                }),\r\n            )\r\n            .subscribe();\r\n        this.postingIsOfToday = dayjs().isSame(this.posting()?.creationDate, 'day');\r\n        this.todayFlag = this.getTodayFlag();\r\n    }\r\n\r\n    private isPost(posting: Posting | AnswerPost | undefined): posting is Post {\r\n        return posting !== undefined && 'resolved' in posting;\r\n    }\r\n\r\n    /**\r\n     * on changes: re-evaluates authority roles\r\n     */\r\n    ngOnChanges() {\r\n        this.setUserProperties();\r\n        this.setUserAuthorityIconAndTooltip();\r\n    }\r\n\r\n    get isAfter(): boolean | undefined {\r\n        return this.posting()?.creationDate?.isAfter(this.lastReadDate());\r\n    }\r\n\r\n    get authorOfPosting(): User | undefined {\r\n        return this.posting()?.author;\r\n    }\r\n\r\n    get creationDate(): dayjs.Dayjs | undefined {\r\n        return this.posting()?.creationDate;\r\n    }\r\n\r\n    /**\r\n     * sets a flag that replaces the date by \"Today\" in the posting's header if applicable\r\n     */\r\n    getTodayFlag(): string | undefined {\r\n        if (this.postingIsOfToday) {\r\n            return 'artemisApp.metis.today';\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets various user properties related to the posting and course.\r\n     * Checks if the current user is the author of the posting and sets the `isAuthorOfPosting` flag accordingly.\r\n     * Calls `setUserAuthorityIconAndTooltip()` to set the user's authority icon and tooltip based on their role.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    setUserProperties(): void {\r\n        this.isAuthorOfPosting = this.metisService.metisUserIsAuthorOfPosting(this.posting()!);\r\n        this.setUserAuthorityIconAndTooltip();\r\n    }\r\n\r\n    /**\r\n     * assigns suitable icon and tooltip for the author's authority type\r\n     */\r\n    setUserAuthorityIconAndTooltip(): void {\r\n        const toolTipTranslationPath = 'artemisApp.metis.userAuthorityTooltips.';\r\n        const roleBadgeTranslationPath = 'artemisApp.metis.userRoles.';\r\n        this.userAuthorityIcon = faUser;\r\n        if (this.posting()?.authorRole === UserRole.USER) {\r\n            this.userAuthority = 'student';\r\n            this.userRoleBadge = roleBadgeTranslationPath + this.userAuthority;\r\n            this.userAuthorityTooltip = toolTipTranslationPath + this.userAuthority;\r\n        } else if (this.posting()?.authorRole === UserRole.INSTRUCTOR) {\r\n            this.userAuthorityIcon = faUserGraduate;\r\n            this.userAuthority = 'instructor';\r\n            this.userRoleBadge = roleBadgeTranslationPath + this.userAuthority;\r\n            this.userAuthorityTooltip = toolTipTranslationPath + this.userAuthority;\r\n        } else if (this.posting()?.authorRole === UserRole.TUTOR) {\r\n            this.userAuthorityIcon = faUserCheck;\r\n            this.userAuthority = 'tutor';\r\n            this.userRoleBadge = roleBadgeTranslationPath + this.userAuthority;\r\n            this.userAuthorityTooltip = toolTipTranslationPath + this.userAuthority;\r\n        } else {\r\n            this.userAuthority = 'student';\r\n            this.userRoleBadge = 'artemisApp.metis.userRoles.deleted';\r\n            this.userAuthorityTooltip = 'artemisApp.metis.userAuthorityTooltips.deleted';\r\n        }\r\n    }\r\n\r\n    protected userNameClicked() {\r\n        if (this.isAuthorOfPosting || !this.posting()?.authorRole) {\r\n            return;\r\n        }\r\n\r\n        this.onUserNameClicked.emit();\r\n    }\r\n\r\n    protected readonly CachingStrategy = CachingStrategy;\r\n}\r\n", "<div class=\"d-flex justify-content-between\" style=\"padding-top: 0.25rem\">\r\n    <div id=\"header-author-date\" class=\"post-header-author-date d-flex align-items-start gap-2 flex-wrap\">\r\n        @if (authorOfPosting) {\r\n            <span class=\"d-inline-flex align-items-start gap-2 flex-wrap\">\r\n                <jhi-profile-picture\r\n                    imageSizeInRem=\"2.15\"\r\n                    fontSizeInRem=\"0.9\"\r\n                    imageId=\"post-profile-picture\"\r\n                    defaultPictureId=\"post-default-profile-picture\"\r\n                    [isGray]=\"isDeleted()\"\r\n                    [authorId]=\"authorOfPosting.id\"\r\n                    [authorName]=\"authorOfPosting.name\"\r\n                    [imageUrl]=\"authorOfPosting.imageUrl\"\r\n                    [isEditable]=\"currentUser !== undefined && authorOfPosting.id === currentUser.id\"\r\n                />\r\n                <span class=\"fs-small d-inline-flex flex-column align-items-start\">\r\n                    <span class=\"fw-semibold\" [ngClass]=\"{ clickable: !isAuthorOfPosting && posting()?.authorRole }\" (click)=\"userNameClicked()\">{{ authorOfPosting.name }}</span>\r\n                    <span class=\"fs-x-small mt-1 text-body-secondary\">\r\n                        <span class=\"me-1 fs-x-small\" [ngClass]=\"'post-authority-icon-' + userAuthority\" id=\"role-badge\">\r\n                            <fa-icon [icon]=\"userAuthorityIcon\" />\r\n                        </span>\r\n                        <span ngbTooltip=\"{{ userAuthorityTooltip | artemisTranslate }}\" [jhiTranslate]=\"userRoleBadge\"></span>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        }\r\n        <span class=\"post-header-date-separator\">-</span>\r\n        <span class=\"post-header-date\">\r\n            @if (postingIsOfToday) {\r\n                <span [jhiTranslate]=\"todayFlag ?? ''\" id=\"today-flag\" class=\"fs-small\"></span>,\r\n            }\r\n            <span class=\"post-header-date fs-small\" [disableTooltip]=\"postingIsOfToday\" ngbTooltip=\"{{ creationDate | artemisDate: 'time' }}\">\r\n                {{ postingIsOfToday ? (creationDate | artemisDate: 'time') : (creationDate | artemisDate: 'short-date') + ' - ' + (creationDate | artemisDate: 'time') }}\r\n            </span>\r\n        </span>\r\n        @if (isPostResolved()) {\r\n            <fa-icon\r\n                [icon]=\"faCheckSquare\"\r\n                iconSize=\"xs\"\r\n                class=\"col-auto pe-0 resolved px-1\"\r\n                [ngbTooltip]=\"'artemisApp.metis.post.postMarkedAsResolvedTooltip' | artemisTranslate\"\r\n            />\r\n        }\r\n        @if (isPostPinned()) {\r\n            <jhi-emoji class=\"fs-x-small\" emoji=\"pushpin\" />\r\n        }\r\n        @if ((!!isCommunicationPage() && !lastReadDate()) || (lastReadDate() && creationDate && isAfter && !isAuthorOfPosting)) {\r\n            <span jhiTranslate=\"global.generic.new\" class=\"badge bg-secondary hideAfter5Seconds\"></span>\r\n        }\r\n    </div>\r\n</div>\r\n", "import { User } from 'app/core/user/user.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\n\r\nexport class Reaction {\r\n    public id?: number;\r\n    public user?: User;\r\n    public creationDate?: dayjs.Dayjs;\r\n    public emojiId?: string;\r\n    public post?: Post;\r\n    public answerPost?: AnswerPost;\r\n}\r\n", "import { Pipe, PipeTransform, inject } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport const USER_COUNT_LIMIT = 10;\r\nexport const PLACEHOLDER_USER_REACTED = 'REPLACE_WITH_TRANSLATED_YOU';\r\n\r\n/**\r\n * Pipe to show list of reacting users when hovering over emojis.\r\n */\r\n@Pipe({ name: 'reactingUsersOnPosting' })\r\nexport class ReactingUsersOnPostingPipe implements PipeTransform {\r\n    private translateService = inject(TranslateService);\r\n\r\n    /**\r\n     * Transforms a given name list of reacting users to a prosaic, translated string\r\n     * @param {string[]} reactingUsers users that are reacting with a certain emoji on a posting\r\n     * @returns {Observable<string>} observable of concatenated, translated (and shortened if required) string of reacting users\r\n     */\r\n    transform(reactingUsers: string[]): Observable<string> {\r\n        return new Observable((observer: any) => {\r\n            observer.next(this.updateReactingUsersString(reactingUsers));\r\n            this.translateService.onLangChange.subscribe(() => {\r\n                observer.next(this.updateReactingUsersString(reactingUsers));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Manipulates the `reactingUsersString` variable taking into account the language, if the string has to be stripped,\r\n     * and if the currently logged-in user is addressed directly ('you' instead of name)\r\n     * @param {string[]} reactingUsers\r\n     */\r\n    private updateReactingUsersString(reactingUsers: string[]): string {\r\n        // determine if the list includes the currently logged-in user\r\n        if (reactingUsers.includes(PLACEHOLDER_USER_REACTED)) {\r\n            if (reactingUsers.length === 1) {\r\n                // set \"you\" as ready-to-use reacting users string\r\n                return this.translateService.instant('artemisApp.metis.you');\r\n            }\r\n            // if more than the currently logged-in user reacted,\r\n            // remove placeholder and replace it with directly addressing currently logged-in user\r\n            reactingUsers = reactingUsers.filter((user) => user !== PLACEHOLDER_USER_REACTED);\r\n            reactingUsers = [this.translateService.instant('artemisApp.metis.you')].concat(reactingUsers);\r\n        }\r\n        // determine if list has to be trimmed\r\n        const numberOfReactingUsers = reactingUsers.length;\r\n        if (numberOfReactingUsers > USER_COUNT_LIMIT) {\r\n            // prepare trimmed list\r\n            reactingUsers = reactingUsers.slice(0, USER_COUNT_LIMIT);\r\n            return reactingUsers.join(', ') + this.translateService.instant('artemisApp.metis.reactedTooltipTrimmed', { number: numberOfReactingUsers - USER_COUNT_LIMIT });\r\n        } else {\r\n            // prepare list\r\n            let listOfReactingUsers = reactingUsers.join(', ') + this.translateService.instant('artemisApp.metis.reactedTooltip');\r\n            // replace last comma by \"and\"\r\n            const lastCommaIndex = listOfReactingUsers.lastIndexOf(',');\r\n            if (lastCommaIndex > -1) {\r\n                const beforeLastComma = listOfReactingUsers.substring(0, lastCommaIndex);\r\n                const afterLastComma = listOfReactingUsers.substring(lastCommaIndex + 2, listOfReactingUsers.length);\r\n                listOfReactingUsers = beforeLastComma + this.translateService.instant('artemisApp.metis.and') + afterLastComma;\r\n            }\r\n            return listOfReactingUsers;\r\n        }\r\n    }\r\n}\r\n", "import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, HostListener, OnInit, Renderer2, inject, input, signal, viewChild } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { BoldAction } from 'app/shared/monaco-editor/model/actions/bold.action';\r\nimport { ItalicAction } from 'app/shared/monaco-editor/model/actions/italic.action';\r\nimport { UnderlineAction } from 'app/shared/monaco-editor/model/actions/underline.action';\r\nimport { QuoteAction } from 'app/shared/monaco-editor/model/actions/quote.action';\r\nimport { CodeAction } from 'app/shared/monaco-editor/model/actions/code.action';\r\nimport { CodeBlockAction } from 'app/shared/monaco-editor/model/actions/code-block.action';\r\nimport { UrlAction } from 'app/shared/monaco-editor/model/actions/url.action';\r\nimport { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { MarkdownEditorHeight, MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { UserPublicInfoDTO } from 'app/core/user/user.model';\r\nimport { CourseManagementService } from 'app/course/manage/course-management.service';\r\nimport { catchError, map, of } from 'rxjs';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ProfilePictureComponent } from 'app/shared/profile-picture/profile-picture.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { PostingContentComponent } from 'app/shared/metis/posting-content/posting-content.components';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { LinkPreviewService } from 'app/shared/link-preview/services/link-preview.service';\r\nimport { LinkifyService } from 'app/shared/link-preview/services/linkify.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\n\r\ninterface CombinedOption {\r\n    id: number;\r\n    name: string;\r\n    type: string;\r\n    img: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-forward-message-dialog',\r\n    templateUrl: './forward-message-dialog.component.html',\r\n    styleUrls: ['./forward-message-dialog.component.scss'],\r\n    imports: [ArtemisTranslatePipe, ProfilePictureComponent, NgClass, PostingContentComponent, MarkdownEditorMonacoComponent, FormsModule, TranslateDirective],\r\n    providers: [MetisService, LinkPreviewService, LinkifyService],\r\n})\r\nexport class ForwardMessageDialogComponent implements OnInit, AfterViewInit {\r\n    channels = signal<ChannelDTO[] | []>([]);\r\n    users = signal<UserPublicInfoDTO[] | []>([]);\r\n    postToForward = signal<Post | undefined>(undefined);\r\n    courseId = signal<number | undefined>(undefined);\r\n    editorHeight = input<MarkdownEditorHeight>(MarkdownEditorHeight.INLINE);\r\n    filteredChannels: ChannelDTO[] = [];\r\n    filteredUsers: UserPublicInfoDTO[] = [];\r\n    selectedChannels: ChannelDTO[] = [];\r\n    selectedUsers: UserPublicInfoDTO[] = [];\r\n    combinedOptions: CombinedOption[] = [];\r\n    filteredOptions: CombinedOption[] = [];\r\n    defaultActions: TextEditorAction[];\r\n    searchTerm: string = '';\r\n    newPost = new Post();\r\n    isInputFocused = false;\r\n    showDropdown = false;\r\n    showFullForwardedMessage = false;\r\n    isContentLong = false;\r\n\r\n    protected activeModal = inject(NgbActiveModal);\r\n    protected searchInput = viewChild<ElementRef>('searchInput');\r\n    protected messageContent = viewChild<ElementRef>('messageContent');\r\n\r\n    private courseManagementService = inject(CourseManagementService);\r\n    private cdr = inject(ChangeDetectorRef);\r\n    private renderer = inject(Renderer2);\r\n\r\n    ngOnInit(): void {\r\n        this.filteredChannels = this.channels() || [];\r\n        this.defaultActions = [new BoldAction(), new ItalicAction(), new UnderlineAction(), new QuoteAction(), new CodeAction(), new CodeBlockAction(), new UrlAction()];\r\n        this.filteredUsers = this.users();\r\n\r\n        this.combinedOptions = [\r\n            ...this.channels()\r\n                .filter((channel: ChannelDTO) => channel.name !== undefined)\r\n                .map((channel) => ({\r\n                    id: channel.id!,\r\n                    name: channel.name!,\r\n                    type: 'channel',\r\n                    img: '',\r\n                })),\r\n            ...this.users().map((user) => ({\r\n                id: user.id!,\r\n                name: user.name!,\r\n                type: 'user',\r\n                img: user.imageUrl!,\r\n            })),\r\n        ];\r\n\r\n        this.filterOptions();\r\n        this.focusInput();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            this.checkIfContentOverflows();\r\n        }, 0);\r\n    }\r\n\r\n    checkIfContentOverflows(): void {\r\n        if (this.messageContent) {\r\n            const nativeElement = this.messageContent()!.nativeElement;\r\n            this.isContentLong = nativeElement.scrollHeight > nativeElement.clientHeight;\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    toggleShowFullForwardedMessage(): void {\r\n        this.showFullForwardedMessage = !this.showFullForwardedMessage;\r\n    }\r\n\r\n    updateField(content: string): void {\r\n        this.newPost.content = content;\r\n    }\r\n\r\n    filterItems(event: Event): void {\r\n        this.searchTerm = (event.target as HTMLInputElement).value;\r\n        this.filterOptions();\r\n    }\r\n\r\n    filterOptions(): void {\r\n        if (this.searchTerm) {\r\n            const lowerCaseSearchTerm = this.searchTerm.toLowerCase();\r\n\r\n            if (lowerCaseSearchTerm.length >= 3) {\r\n                this.courseManagementService\r\n                    .searchUsers(this.courseId()!, lowerCaseSearchTerm, ['students', 'tutors', 'instructors'])\r\n                    .pipe(\r\n                        map((response) => response.body || []),\r\n                        map((users) => users.filter((user) => !this.selectedUsers.find((selectedUser) => selectedUser.id === user.id))),\r\n                        catchError(() => {\r\n                            return of([]);\r\n                        }),\r\n                    )\r\n                    .subscribe((users) => {\r\n                        this.filteredUsers = users;\r\n                        this.updateCombinedOptions();\r\n                        this.cdr.detectChanges();\r\n                    });\r\n            } else {\r\n                this.filteredUsers = [];\r\n            }\r\n\r\n            this.filteredChannels = this.channels().filter((channel: ChannelDTO) => channel.name?.toLowerCase().includes(lowerCaseSearchTerm));\r\n            this.updateCombinedOptions();\r\n        } else {\r\n            this.filteredUsers = [...this.users()];\r\n            this.filteredChannels = [...this.channels()];\r\n            this.updateCombinedOptions();\r\n        }\r\n    }\r\n\r\n    private updateCombinedOptions(): void {\r\n        this.filteredOptions = [\r\n            ...this.filteredChannels.map((channel) => ({\r\n                id: channel.id!,\r\n                name: channel.name!,\r\n                type: 'channel',\r\n                img: '',\r\n            })),\r\n            ...this.filteredUsers.map((user) => ({\r\n                id: user.id!,\r\n                name: user.name!,\r\n                type: 'user',\r\n                img: user.imageUrl!,\r\n            })),\r\n        ];\r\n    }\r\n\r\n    selectOption(option: CombinedOption): void {\r\n        if (option.type === 'channel') {\r\n            const existing = this.selectedChannels.find((c) => (c as ChannelDTO).id === option.id);\r\n            if (!existing) {\r\n                const channel = this.channels()?.find((c) => (c as ChannelDTO).id === option.id);\r\n                if (channel) {\r\n                    this.selectedChannels.push(channel);\r\n                }\r\n            }\r\n        } else if (option.type === 'user') {\r\n            const existing = this.selectedUsers.find((user) => user.id === option.id);\r\n            if (!existing) {\r\n                const user = this.filteredUsers.find((user) => user.id === option.id);\r\n                if (user) {\r\n                    this.selectedUsers.push(user);\r\n                }\r\n            }\r\n        }\r\n        this.searchTerm = '';\r\n        this.filterOptions();\r\n        this.showDropdown = false;\r\n        this.focusInput();\r\n    }\r\n\r\n    removeSelectedChannel(channel: ChannelDTO): void {\r\n        const index = this.selectedChannels.findIndex((c) => c.id === channel.id);\r\n        if (index > -1) {\r\n            this.selectedChannels.splice(index, 1);\r\n        }\r\n        this.focusInput();\r\n    }\r\n\r\n    removeSelectedUser(user: UserPublicInfoDTO): void {\r\n        const index = this.selectedUsers.findIndex((u) => u.id === user.id);\r\n        if (index > -1) {\r\n            this.selectedUsers.splice(index, 1);\r\n        }\r\n        this.focusInput();\r\n    }\r\n\r\n    send(): void {\r\n        const selectedItems = {\r\n            channels: this.selectedChannels,\r\n            users: this.selectedUsers,\r\n            messageContent: this.newPost.content,\r\n        };\r\n        this.activeModal.close(selectedItems);\r\n    }\r\n\r\n    hasSelections(): boolean {\r\n        return this.selectedChannels.length > 0 || this.selectedUsers.length > 0;\r\n    }\r\n\r\n    onInputFocus(): void {\r\n        this.isInputFocused = true;\r\n        this.showDropdown = true;\r\n    }\r\n\r\n    onInputBlur(): void {\r\n        this.isInputFocused = false;\r\n        this.showDropdown = false;\r\n    }\r\n\r\n    focusInput(): void {\r\n        if (this.searchInput) {\r\n            this.renderer.selectRootElement(this.searchInput()!.nativeElement, true).focus();\r\n        }\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    onClickOutside(event: Event): void {\r\n        if (this.searchInput && !this.searchInput()!.nativeElement.contains(event.target)) {\r\n            this.showDropdown = false;\r\n        }\r\n    }\r\n\r\n    protected readonly MarkdownEditorHeight = MarkdownEditorHeight;\r\n}\r\n", "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.metis.forward.forwardMessage\"></h4>\r\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"activeModal.dismiss()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"autocomplete-container mt-1 mb-2 form-group\">\r\n        <div class=\"tag-input-container form-control\" (click)=\"focusInput()\">\r\n            @for (channel of selectedChannels; track channel) {\r\n                <ng-container>\r\n                    <span class=\"badge bg-primary me-1\">\r\n                        {{ channel.name }}\r\n                        <button type=\"button\" class=\"btn-close btn-close-white btn-sm ms-1\" aria-label=\"Remove\" (click)=\"removeSelectedChannel(channel)\"></button>\r\n                    </span>\r\n                </ng-container>\r\n            }\r\n            @for (user of selectedUsers; track user) {\r\n                <ng-container>\r\n                    <span class=\"badge bg-secondary me-1\">\r\n                        {{ user.name }}\r\n                        <button type=\"button\" class=\"btn-close btn-close-white btn-sm ms-1\" aria-label=\"Remove\" (click)=\"removeSelectedUser(user)\"></button>\r\n                    </span>\r\n                </ng-container>\r\n            }\r\n            <input\r\n                #searchInput\r\n                type=\"text\"\r\n                class=\"tag-input\"\r\n                placeholder=\"{{ 'artemisApp.metis.forward.searchBar' | artemisTranslate }}\"\r\n                [(ngModel)]=\"searchTerm\"\r\n                (input)=\"filterItems($event)\"\r\n                (focus)=\"onInputFocus()\"\r\n                (blur)=\"onInputBlur()\"\r\n            />\r\n        </div>\r\n        @if (showDropdown && filteredOptions.length > 0) {\r\n            <ul class=\"list-group autocomplete-dropdown\" tabindex=\"0\">\r\n                @for (option of filteredOptions; track option) {\r\n                    <li\r\n                        class=\"list-group-item list-group-item-action\"\r\n                        [ngClass]=\"{ 'channel-option': option.type === 'channel', 'chat-option': option.type === 'chat' }\"\r\n                        (mousedown)=\"selectOption(option)\"\r\n                    >\r\n                        @if (option.type === 'channel') {\r\n                            <span class=\"me-2\">#</span>\r\n                        } @else {\r\n                            <jhi-profile-picture\r\n                                imageSizeInRem=\"1.5\"\r\n                                fontSizeInRem=\"0.6\"\r\n                                imageId=\"user-profile-picture\"\r\n                                defaultPictureId=\"user-default-profile-picture\"\r\n                                [authorId]=\"postToForward()?.author?.id\"\r\n                                [authorName]=\"postToForward()?.author?.name\"\r\n                                [imageUrl]=\"option.img\"\r\n                                style=\"margin-right: 0.2rem\"\r\n                            />\r\n                        }\r\n                        {{ option.name }}\r\n                    </li>\r\n                }\r\n            </ul>\r\n        }\r\n    </div>\r\n\r\n    <h5 jhiTranslate=\"artemisApp.metis.forward.addMessage\"></h5>\r\n    <jhi-markdown-editor-monaco\r\n        class=\"markdown-editor background-editor-color w-100\"\r\n        [markdown]=\"newPost.content\"\r\n        (markdownChange)=\"updateField($event)\"\r\n        [enableResize]=\"false\"\r\n        [enableFileUpload]=\"false\"\r\n        [showDefaultPreview]=\"true\"\r\n        [colorAction]=\"undefined\"\r\n        [headerActions]=\"undefined\"\r\n        [metaActions]=\"[]\"\r\n        [defaultActions]=\"defaultActions\"\r\n        [initialEditorHeight]=\"editorHeight()\"\r\n        [resizableMinHeight]=\"editorHeight()\"\r\n        [resizableMaxHeight]=\"MarkdownEditorHeight.MEDIUM\"\r\n    />\r\n\r\n    @if (postToForward()) {\r\n        <div class=\"forwarded-message-container\">\r\n            <div class=\"left-border-line\"></div>\r\n            <div class=\"forwarded-message-content\">\r\n                <div class=\"forwarded-message-header\">\r\n                    <jhi-profile-picture\r\n                        imageSizeInRem=\"1.5\"\r\n                        fontSizeInRem=\"0.6\"\r\n                        imageId=\"user-profile-picture\"\r\n                        defaultPictureId=\"user-default-profile-picture\"\r\n                        [authorId]=\"postToForward()?.author?.id\"\r\n                        [authorName]=\"postToForward()?.author?.name\"\r\n                        [imageUrl]=\"postToForward()?.author?.imageUrl\"\r\n                        style=\"margin-right: 0.2rem\"\r\n                    />\r\n                    <span class=\"forwarded-message-author\">{{ postToForward()?.author?.name }}</span>\r\n                </div>\r\n                <div class=\"forwarded-message-body\" [ngClass]=\"{ expanded: showFullForwardedMessage }\" id=\"messageContent\" #messageContent>\r\n                    <jhi-posting-content\r\n                        [previewMode]=\"false\"\r\n                        [content]=\"postToForward()?.content!\"\r\n                        [author]=\"postToForward()?.author!\"\r\n                        [isEdited]=\"!!postToForward()?.updatedDate\"\r\n                        [posting]=\"postToForward()!\"\r\n                        [isReply]=\"false\"\r\n                        [isSubscribeToMetis]=\"false\"\r\n                    />\r\n                </div>\r\n                @if (isContentLong) {\r\n                    <button type=\"button\" class=\"btn btn-link p-0\" style=\"width: fit-content\" (click)=\"toggleShowFullForwardedMessage()\">\r\n                        {{ showFullForwardedMessage ? ('artemisApp.metis.forward.showLess' | artemisTranslate) : ('artemisApp.metis.forward.showMore' | artemisTranslate) }}\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!hasSelections()\" (click)=\"send()\" jhiTranslate=\"artemisApp.conversationsLayout.sendMessage\"></button>\r\n</div>\r\n", "import { Component, OnChanges, OnInit, inject, input, output, viewChild } from '@angular/core';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { EmojiData } from '@ctrl/ngx-emoji-mart/ngx-emoji';\r\nimport { Reaction } from 'app/entities/metis/reaction.model';\r\nimport { PLACEHOLDER_USER_REACTED, ReactingUsersOnPostingPipe } from 'app/shared/pipes/reacting-users-on-posting.pipe';\r\nimport { faArrowRight, faBookmark, faCheck, faPencilAlt, faShare, faSmile, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { EmojiComponent } from 'app/shared/metis/emoji/emoji.component';\r\nimport { EmojiPickerComponent } from 'app/shared/metis/emoji/emoji-picker.component';\r\nimport { ConfirmIconComponent } from 'app/shared/confirm-icon/confirm-icon.component';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { AsyncPipe, KeyValuePipe, NgClass } from '@angular/common';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { DisplayPriority } from '../metis.util';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { Conversation, ConversationDTO, ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ChannelDTO, getAsChannelDTO, isChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { isGroupChatDTO } from 'app/entities/metis/conversation/group-chat.model';\r\nimport { isOneToOneChatDTO } from 'app/entities/metis/conversation/one-to-one-chat.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { PostCreateEditModalComponent } from 'app/shared/metis/posting-create-edit-modal/post-create-edit-modal/post-create-edit-modal.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport dayjs from 'dayjs/esm';\r\nimport { ConversationService } from 'app/shared/metis/conversations/conversation.service';\r\nimport { MetisConversationService } from '../metis-conversation.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { map } from 'rxjs';\r\nimport { ForwardMessageDialogComponent } from 'app/overview/course-conversations/dialogs/forward-message-dialog/forward-message-dialog.component';\r\nimport { UserPublicInfoDTO } from 'app/core/user/user.model';\r\n\r\nconst PIN_EMOJI_ID = 'pushpin';\r\nconst ARCHIVE_EMOJI_ID = 'open_file_folder';\r\nconst HEAVY_MULTIPLICATION_ID = 'heavy_multiplication_x';\r\n\r\nconst SPEECH_BALLOON_UNICODE = '1F4AC';\r\nconst ARCHIVE_EMOJI_UNICODE = '1F4C2';\r\nconst PIN_EMOJI_UNICODE = '1F4CC';\r\nconst HEAVY_MULTIPLICATION_UNICODE = '2716';\r\n\r\n/**\r\n * event triggered by the emoji mart component, including EmojiData\r\n */\r\ninterface ReactionEvent {\r\n    $event: Event;\r\n    emoji?: EmojiData;\r\n}\r\n\r\n/**\r\n * represents the amount of users that reacted\r\n * hasReacted indicates if the currently logged-in user is among those counted users\r\n */\r\ninterface ReactionMetaData {\r\n    count: number;\r\n    hasReacted: boolean;\r\n    reactingUsers: string[];\r\n}\r\n\r\n/**\r\n * data structure used for displaying emoji reactions with metadata on postings\r\n */\r\ninterface ReactionMetaDataMap {\r\n    [emojiId: string]: ReactionMetaData;\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-posting-reactions-bar',\r\n    templateUrl: './posting-reactions-bar.component.html',\r\n    styleUrls: ['./posting-reactions-bar.component.scss'],\r\n    imports: [\r\n        NgbTooltip,\r\n        EmojiComponent,\r\n        CdkOverlayOrigin,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        CdkConnectedOverlay,\r\n        EmojiPickerComponent,\r\n        ConfirmIconComponent,\r\n        AsyncPipe,\r\n        KeyValuePipe,\r\n        ArtemisTranslatePipe,\r\n        ReactingUsersOnPostingPipe,\r\n        NgClass,\r\n        PostCreateEditModalComponent,\r\n    ],\r\n})\r\nexport class PostingReactionsBarComponent<T extends Posting> implements OnInit, OnChanges {\r\n    readonly onBookmarkClicked = output<void>();\r\n    readonly DisplayPriority = DisplayPriority;\r\n    readonly faBookmark = faBookmark;\r\n    readonly faSmile = faSmile;\r\n    readonly faCheck = faCheck;\r\n    readonly faPencilAlt = faPencilAlt;\r\n    readonly faArrowRight = faArrowRight;\r\n    readonly faTrash = faTrashAlt;\r\n    readonly faShare = faShare;\r\n\r\n    pinEmojiId: string = PIN_EMOJI_ID;\r\n    archiveEmojiId: string = ARCHIVE_EMOJI_ID;\r\n    closeCrossId: string = HEAVY_MULTIPLICATION_ID;\r\n    showReactionSelector = false;\r\n    isAtLeastTutorInCourse: boolean;\r\n    isAuthorOfPosting: boolean;\r\n    isAuthorOfOriginalPost: boolean;\r\n    isAnswerOfAnnouncement: boolean;\r\n    isAtLeastInstructorInCourse: boolean;\r\n    mayEdit: boolean;\r\n    mayDelete: boolean;\r\n    pinTooltip: string;\r\n    displayPriority: DisplayPriority;\r\n    canPin = false;\r\n    channels: ChannelDTO[] = [];\r\n    users: UserPublicInfoDTO[] = [];\r\n    posting = input<T>();\r\n    isThreadSidebar = input<boolean>();\r\n    isEmojiCount = input<boolean>(false);\r\n    isReadOnlyMode = input<boolean>(false);\r\n    openPostingCreateEditModal = output<void>();\r\n    closePostingCreateEditModal = output<void>();\r\n    reactionsUpdated = output<Reaction[]>();\r\n    isModalOpen = output<void>();\r\n    mayDeleteOutput = output<boolean>();\r\n    mayEditOutput = output<boolean>();\r\n    canPinOutput = output<boolean>();\r\n    showAnswers = input<boolean>();\r\n    sortedAnswerPosts = input<AnswerPost[]>();\r\n    isCommunicationPage = input<boolean>();\r\n    lastReadDate = input<dayjs.Dayjs>();\r\n    previewMode = input<boolean>();\r\n    hoverBar = input<boolean>(true);\r\n    showAnswersChange = output<boolean>();\r\n    isLastAnswer = input<boolean>(false);\r\n    postingUpdated = output<void>();\r\n    openThread = output<void>();\r\n    originalPostDetails = input<Posting>();\r\n    course = input<Course>();\r\n    isDeleteEvent = output<boolean>();\r\n    createEditModal = viewChild.required<PostCreateEditModalComponent>('createEditModal');\r\n\r\n    private metisService = inject(MetisService);\r\n    private accountService = inject(AccountService);\r\n    private conversationService = inject(ConversationService);\r\n    private modalService = inject(NgbModal);\r\n    private metisConversationService = inject(MetisConversationService);\r\n\r\n    /**\r\n     * on initialization: updates the current posting and its reactions,\r\n     * invokes metis service to check user authority\r\n     */\r\n    ngOnInit() {\r\n        this.updatePostingWithReactions();\r\n        this.isAuthorOfPosting = this.metisService.metisUserIsAuthorOfPosting(this.posting() as Posting);\r\n        this.isAtLeastTutorInCourse = this.metisService.metisUserIsAtLeastTutorInCourse();\r\n        this.isAtLeastInstructorInCourse = this.metisService.metisUserIsAtLeastInstructorInCourse();\r\n        this.isAnswerOfAnnouncement =\r\n            this.getPostingType() === 'answerPost' ? (getAsChannelDTO((this.posting() as AnswerPost).post?.conversation)?.isAnnouncementChannel ?? false) : false;\r\n        this.isAuthorOfOriginalPost = this.getPostingType() === 'answerPost' ? this.metisService.metisUserIsAuthorOfPosting((this.posting() as AnswerPost).post!) : false;\r\n\r\n        if (this.getPostingType() === 'post') {\r\n            const currentConversation = this.metisService.getCurrentConversation();\r\n            this.setCanPin(currentConversation);\r\n            this.resetTooltipsAndPriority();\r\n        }\r\n        this.setMayDelete();\r\n        this.setMayEdit();\r\n    }\r\n\r\n    /**\r\n     * on changes: updates the current posting and its reactions,\r\n     * invokes metis service to check user authority\r\n     */\r\n    ngOnChanges() {\r\n        this.updatePostingWithReactions();\r\n        this.isAtLeastTutorInCourse = this.metisService.metisUserIsAtLeastTutorInCourse();\r\n        if (this.getPostingType() === 'post') {\r\n            this.resetTooltipsAndPriority();\r\n        }\r\n        this.setMayDelete();\r\n        this.setMayEdit();\r\n    }\r\n\r\n    /*\r\n     * icons (as svg paths) to be used as category preview image in emoji mart selector\r\n     */\r\n    categoriesIcons: { [key: string]: string } = {\r\n        // category 'recent' (would show recently used emojis) is overwritten by a preselected set of emojis for that course,\r\n        // therefore category icon is an asterisk (indicating customization) instead of a clock (indicating the \"recently used\"-use case)\r\n        recent: `M10 1h3v21h-3zm10.186 4l1.5 2.598L3.5 18.098 2 15.5zM2 7.598L3.5 5l18.186 10.5-1.5 2.598z`,\r\n    };\r\n\r\n    /**\r\n     * Checks whether the user can pin the message in the conversation\r\n     *\r\n     * @param currentConversation the conversation the post belongs to\r\n     */\r\n    setCanPin(currentConversation: ConversationDTO | undefined) {\r\n        if (!currentConversation) {\r\n            this.canPin = this.metisService.metisUserIsAtLeastTutorInCourse();\r\n            return;\r\n        }\r\n\r\n        if (isChannelDTO(currentConversation)) {\r\n            this.canPin = currentConversation.hasChannelModerationRights ?? false;\r\n        } else if (isGroupChatDTO(currentConversation)) {\r\n            this.canPin = currentConversation.creator?.id === this.accountService.userIdentity?.id;\r\n        } else if (isOneToOneChatDTO(currentConversation)) {\r\n            this.canPin = true;\r\n        }\r\n        this.canPinOutput.emit(this.canPin);\r\n    }\r\n\r\n    private resetTooltipsAndPriority() {\r\n        this.displayPriority = (this.posting() as Post).displayPriority!;\r\n        this.pinTooltip = this.getPinTooltip();\r\n    }\r\n\r\n    getShowNewMessageIcon(): boolean {\r\n        let showIcon = false;\r\n        // iterate over all answer posts\r\n        (this.sortedAnswerPosts() as unknown as AnswerPost[]).forEach((answerPost: Posting) => {\r\n            // check if the answer post is newer than the last read date\r\n            const isAuthor = this.metisService.metisUserIsAuthorOfPosting(answerPost);\r\n            const lastReadDate = this.lastReadDate?.();\r\n            const creationDate = answerPost.creationDate;\r\n\r\n            if (lastReadDate && creationDate) {\r\n                const lastReadDateDayJs = dayjs(lastReadDate);\r\n                if (!isAuthor && creationDate.isAfter(lastReadDateDayJs)) {\r\n                    showIcon = true;\r\n                }\r\n            }\r\n        });\r\n        return showIcon;\r\n    }\r\n\r\n    /**\r\n     * provides the tooltip for the pin icon dependent on the user authority and the pin state of a posting\r\n     *\r\n     */\r\n    getPinTooltip(): string {\r\n        if (this.canPin && this.displayPriority === DisplayPriority.PINNED) {\r\n            return 'artemisApp.metis.removePinPostTooltip';\r\n        }\r\n        if (this.canPin && this.displayPriority !== DisplayPriority.PINNED) {\r\n            return 'artemisApp.metis.pinPostTooltip';\r\n        }\r\n        return 'artemisApp.metis.pinnedPostTooltip';\r\n    }\r\n\r\n    /**\r\n     * currently predefined fixed set of emojis that should be used within a course,\r\n     * they will be listed on first page of the emoji-mart selector\r\n     */\r\n    selectedCourseEmojis = ['smile', 'joy', 'sunglasses', 'tada', 'rocket', 'heavy_plus_sign', 'thumbsup', 'memo', 'coffee', 'recycle'];\r\n\r\n    /**\r\n     * emojis that have a predefined meaning, i.e. pin and archive emoji,\r\n     * should not appear in the emoji-mart selector\r\n     */\r\n    emojisToShowFilter: (emoji: string | EmojiData) => boolean = (emoji) => {\r\n        if (typeof emoji === 'string') {\r\n            return emoji !== PIN_EMOJI_UNICODE && emoji !== ARCHIVE_EMOJI_UNICODE && emoji !== SPEECH_BALLOON_UNICODE && emoji !== HEAVY_MULTIPLICATION_UNICODE;\r\n        } else {\r\n            return (\r\n                emoji.unified !== PIN_EMOJI_UNICODE &&\r\n                emoji.unified !== ARCHIVE_EMOJI_UNICODE &&\r\n                emoji.unified !== SPEECH_BALLOON_UNICODE &&\r\n                emoji.unified !== HEAVY_MULTIPLICATION_UNICODE\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * map that lists associated reaction (by emojiId) for the current posting together with its count\r\n     * and a flag that indicates if the current user has used this reaction\r\n     */\r\n    reactionMetaDataMap: ReactionMetaDataMap = {};\r\n\r\n    /**\r\n     * builds and returns a Reaction model out of an emojiId and thereby sets the answerPost property properly\r\n     * @param emojiId emojiId to build the model for\r\n     */\r\n    buildReaction(emojiId: string): Reaction {\r\n        const reaction = new Reaction();\r\n        reaction.emojiId = emojiId;\r\n        if (this.getPostingType() === 'answerPost') {\r\n            reaction.answerPost = this.posting() as AnswerPost;\r\n        } else {\r\n            reaction.post = this.posting() as Post;\r\n        }\r\n        return reaction;\r\n    }\r\n\r\n    /**\r\n     * updates the reaction based on the ReactionEvent emitted by the emoji-mart selector component\r\n     */\r\n    selectReaction(reactionEvent: ReactionEvent): void {\r\n        if (reactionEvent.emoji != undefined) {\r\n            this.addOrRemoveReaction(reactionEvent.emoji.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * opens the emoji selector overlay if user clicks the '.reaction-button'\r\n     * closes the emoji selector overly if user clicks the '.reaction-button' again or somewhere outside the overlay\r\n     */\r\n    toggleEmojiSelect() {\r\n        this.showReactionSelector = !this.showReactionSelector;\r\n    }\r\n\r\n    /**\r\n     * updates the reaction based when a displayed emoji reaction is clicked,\r\n     * i.e. when agree on an existing reaction (+1) or removing own reactions (-1)\r\n     */\r\n    updateReaction(emojiId: string): void {\r\n        if (emojiId != undefined) {\r\n            this.addOrRemoveReaction(emojiId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * adds or removes a reaction by invoking the metis service,\r\n     * depending on if the current user already reacted with the given emojiId (remove) or not (add)\r\n     * @param emojiId emojiId representing the reaction to be added/removed\r\n     */\r\n    addOrRemoveReaction(emojiId: string): void {\r\n        const existingReactionIdx = (this.posting() as Posting).reactions\r\n            ? (this.posting() as Posting).reactions!.findIndex((reaction) => reaction.user?.id === this.metisService.getUser().id && reaction.emojiId === emojiId)\r\n            : -1;\r\n        if ((this.posting() as Posting).reactions && existingReactionIdx > -1) {\r\n            const reactionToDelete = (this.posting() as Posting).reactions![existingReactionIdx];\r\n            this.metisService.deleteReaction(reactionToDelete).subscribe(() => {\r\n                (this.posting() as Posting).reactions = (this.posting() as Posting).reactions?.filter((reaction) => reaction.id !== reactionToDelete.id);\r\n                this.updatePostingWithReactions();\r\n                this.showReactionSelector = false;\r\n                this.reactionsUpdated.emit((this.posting() as Posting).reactions!);\r\n            });\r\n        } else {\r\n            const reactionToCreate = this.buildReaction(emojiId);\r\n            this.metisService.createReaction(reactionToCreate).subscribe(() => {\r\n                this.updatePostingWithReactions();\r\n                this.showReactionSelector = false;\r\n                this.reactionsUpdated.emit((this.posting() as Posting).reactions || []);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * updates the posting's reactions by calling the build function for the reactionMetaDataMap if there are any reaction on the posting\r\n     */\r\n    updatePostingWithReactions(): void {\r\n        if ((this.posting() as Posting).reactions && (this.posting() as Posting).reactions!.length > 0) {\r\n            // filter out emoji for pin and archive as they should not be listed in the reactionMetaDataMap\r\n            const filteredReactions = (this.posting() as Posting).reactions!.filter(\r\n                (reaction: Reaction) => reaction.emojiId !== this.pinEmojiId || reaction.emojiId !== this.archiveEmojiId,\r\n            );\r\n            this.reactionMetaDataMap = this.buildReactionMetaDataMap(filteredReactions);\r\n        } else {\r\n            this.reactionMetaDataMap = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * builds the ReactionMetaDataMap data structure out of a given array of reactions\r\n     * @param reactions array of reactions associated to the current posting\r\n     */\r\n    buildReactionMetaDataMap(reactions: Reaction[]): ReactionMetaDataMap {\r\n        return reactions.reduce((metaDataMap: ReactionMetaDataMap, reaction: Reaction) => {\r\n            const hasReacted = reaction.user?.id === this.metisService.getUser().id;\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            const reactingUser = hasReacted ? PLACEHOLDER_USER_REACTED : reaction.user?.name!;\r\n            const reactionMetaData: ReactionMetaData = {\r\n                count: metaDataMap[reaction.emojiId!] ? metaDataMap[reaction.emojiId!].count + 1 : 1,\r\n                hasReacted: metaDataMap[reaction.emojiId!] ? metaDataMap[reaction.emojiId!].hasReacted || hasReacted : hasReacted,\r\n                reactingUsers: metaDataMap[reaction.emojiId!] ? metaDataMap[reaction.emojiId!].reactingUsers.concat(reactingUser) : [reactingUser],\r\n            };\r\n            return { ...metaDataMap, [reaction.emojiId!]: reactionMetaData };\r\n        }, {});\r\n    }\r\n\r\n    protected bookmarkPosting() {\r\n        this.onBookmarkClicked.emit();\r\n    }\r\n\r\n    isAnyReactionCountAboveZero(): boolean {\r\n        return Object.values(this.reactionMetaDataMap).some((reaction) => reaction.count >= 1);\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service to delete posting\r\n     */\r\n    deletePosting(): void {\r\n        this.isDeleteEvent.emit(true);\r\n    }\r\n\r\n    /**\r\n     * changes the state of the displayPriority property on a post to PINNED by invoking the metis service\r\n     * in case the displayPriority is already set to PINNED, it will be changed to NONE\r\n     */\r\n    togglePin() {\r\n        if (this.canPin) {\r\n            if (this.displayPriority === DisplayPriority.PINNED) {\r\n                this.displayPriority = DisplayPriority.NONE;\r\n            } else {\r\n                this.displayPriority = DisplayPriority.PINNED;\r\n            }\r\n            (this.posting() as Post).displayPriority = this.displayPriority;\r\n            this.metisService.updatePostDisplayPriority((this.posting() as Posting).id!, this.displayPriority).subscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toggles the resolvesPost property of an answer post if the user is at least tutor in a course or the user is the author of the original post,\r\n     * delegates the update to the metis service\r\n     */\r\n    toggleResolvesPost(): void {\r\n        if (this.isAtLeastTutorInCourse || this.isAuthorOfOriginalPost) {\r\n            (this.posting() as AnswerPost).resolvesPost = !(this.posting() as AnswerPost).resolvesPost;\r\n            this.metisService.updateAnswerPost(this.posting() as AnswerPost).subscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the post is pinned.\r\n     * Used in posting.directive.ts to determine the pin status for the dropdown menu.\r\n     *\r\n     * @returns {DisplayPriority} The display priority of the post.\r\n     */\r\n    checkIfPinned(): DisplayPriority {\r\n        return this.displayPriority;\r\n    }\r\n\r\n    openAnswerView() {\r\n        this.showAnswersChange.emit(true);\r\n        this.openPostingCreateEditModal.emit();\r\n    }\r\n\r\n    closeAnswerView() {\r\n        this.showAnswersChange.emit(false);\r\n        this.closePostingCreateEditModal.emit();\r\n    }\r\n\r\n    setMayEdit(): void {\r\n        this.mayEdit = this.isAuthorOfPosting;\r\n        this.mayEditOutput.emit(this.mayEdit);\r\n    }\r\n\r\n    editPosting() {\r\n        if (this.getPostingType() === 'post') {\r\n            if ((this.posting() as Post)!.title != '') {\r\n                this.createEditModal().open();\r\n            } else {\r\n                this.isModalOpen.emit();\r\n            }\r\n        } else {\r\n            this.openPostingCreateEditModal.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forwards the current post to another conversation.\r\n     * Uses openForwardMessageView from PostingsReactionsBarDirective to show the forward dialog.\r\n     */\r\n    forwardMessage(): void {\r\n        const isAnswer = this.getPostingType() === 'answerPost';\r\n        if (!this.posting()!.content || this.posting()!.content === '') {\r\n            this.openForwardMessageView(this.originalPostDetails()!, isAnswer);\r\n        } else {\r\n            this.openForwardMessageView(this.posting()!, isAnswer);\r\n        }\r\n    }\r\n\r\n    openForwardMessageView(post: Posting, isAnswer: boolean): void {\r\n        if (!this.course()?.id) {\r\n            return;\r\n        }\r\n        this.channels = [];\r\n        this.users = [];\r\n\r\n        this.conversationService\r\n            .getConversationsOfUser(this.course()!.id!)\r\n            .pipe(map((response) => response.body || []))\r\n            .subscribe({\r\n                next: (conversations) => {\r\n                    conversations.forEach((conversation) => {\r\n                        if (conversation.type === ConversationType.CHANNEL && !(conversation as ChannelDTO).isAnnouncementChannel) {\r\n                            this.channels.push(conversation as ChannelDTO);\r\n                        }\r\n                    });\r\n\r\n                    const modalRef = this.modalService.open(ForwardMessageDialogComponent, {\r\n                        size: 'lg',\r\n                        backdrop: 'static',\r\n                    });\r\n\r\n                    modalRef.componentInstance.users.set([]);\r\n                    modalRef.componentInstance.channels.set(this.channels);\r\n                    modalRef.componentInstance.postToForward.set(post);\r\n                    modalRef.componentInstance.courseId.set(this.course()?.id);\r\n\r\n                    modalRef.result.then(async (selection: { channels: Conversation[]; users: UserPublicInfoDTO[]; messageContent: string }) => {\r\n                        if (selection) {\r\n                            const allSelections: Conversation[] = [...selection.channels];\r\n                            const userLogins = selection.users.map((user) => user.login!);\r\n\r\n                            if (userLogins.length > 0) {\r\n                                let newConversation: Conversation | null = null;\r\n\r\n                                if (userLogins.length === 1) {\r\n                                    try {\r\n                                        const response = await this.metisConversationService.createDirectConversation(userLogins[0]).toPromise();\r\n                                        newConversation = (response?.body ?? null) as Conversation;\r\n                                        if (newConversation) {\r\n                                            allSelections.push(newConversation);\r\n                                        }\r\n                                    } catch (error) {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    try {\r\n                                        const response = await this.metisConversationService.createGroupConversation(userLogins).toPromise();\r\n                                        if (response && response.body) {\r\n                                            newConversation = response.body as Conversation;\r\n                                            allSelections.push(newConversation);\r\n                                        }\r\n                                    } catch (error) {\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            allSelections.forEach((conversation) => {\r\n                                if (conversation && conversation.id) {\r\n                                    this.forwardPost(post, conversation, selection.messageContent, isAnswer);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n            });\r\n    }\r\n\r\n    forwardPost(post: Posting, conversation: Conversation, content: string, isAnswer: boolean): void {\r\n        this.metisService.createForwardedMessages([post], conversation, isAnswer, content).subscribe({});\r\n    }\r\n\r\n    setMayDelete(): void {\r\n        const conversation = this.getConversation();\r\n        const channel = getAsChannelDTO(conversation);\r\n\r\n        const isAnswerOfAnnouncement = this.getPostingType() === 'answerPost' ? (channel?.isAnnouncementChannel ?? false) : false;\r\n        const isCourseWide = channel?.isCourseWide ?? false;\r\n\r\n        const canDeleteAnnouncement = isAnswerOfAnnouncement ? this.isAtLeastInstructorInCourse : true;\r\n        const mayDeleteOtherUsers =\r\n            (isCourseWide && this.isAtLeastTutorInCourse) || (getAsChannelDTO(this.metisService.getCurrentConversation())?.hasChannelModerationRights ?? false);\r\n\r\n        this.mayDelete = !this.isReadOnlyMode() && !this.previewMode() && (this.isAuthorOfPosting || mayDeleteOtherUsers) && canDeleteAnnouncement;\r\n        this.mayDeleteOutput.emit(this.mayDelete);\r\n    }\r\n\r\n    private getConversation(): Conversation | undefined {\r\n        if (this.getPostingType() === 'answerPost') {\r\n            return (this.posting() as AnswerPost).post?.conversation;\r\n        } else {\r\n            return (this.posting() as Post).conversation;\r\n        }\r\n    }\r\n\r\n    getPostingType(): 'post' | 'answerPost' {\r\n        return this.posting() && 'post' in this.posting()! ? 'answerPost' : 'post';\r\n    }\r\n\r\n    getSaved(): boolean {\r\n        return <boolean>(this.posting() as Posting)?.isSaved;\r\n    }\r\n\r\n    getResolvesPost(): boolean {\r\n        return <boolean>(this.posting() as AnswerPost)?.resolvesPost;\r\n    }\r\n}\r\n", "<div class=\"d-flex flex-wrap gap-2 fs-xx-small align-items-center\" [style.width]=\"getPostingType() === 'post' ? 'max-content' : ''\">\r\n    @if (getPostingType() === 'post') {\r\n        @if (hoverBar() && sortedAnswerPosts()?.length === 0) {\r\n            <div>\r\n                <button class=\"reaction-button clickable reply-btn\" (click)=\"isCommunicationPage() ? openThread.emit() : openAnswerView()\">\r\n                    <fa-icon class=\"fa-xs align-self-center\" [icon]=\"faArrowRight\" />\r\n                    <span jhiTranslate=\"artemisApp.conversationsLayout.threadSideBar.reply\" class=\"emoji-count px-2\"></span>\r\n                </button>\r\n            </div>\r\n        }\r\n        @if (!isCommunicationPage() && sortedAnswerPosts()?.length) {\r\n            @if (showAnswers()) {\r\n                <div>\r\n                    <button class=\"reaction-button clickable collapse-answers-btn\" [class.reaction-button--reacted]=\"showAnswers()\" (click)=\"closeAnswerView()\">\r\n                        <jhi-emoji [emoji]=\"closeCrossId\" />\r\n                        <span jhiTranslate=\"artemisApp.metis.collapseAnswers\" class=\"emoji-count\"></span>\r\n                    </button>\r\n                </div>\r\n            } @else {\r\n                <div>\r\n                    <button class=\"reaction-button clickable expand-answers-btn\" (click)=\"openAnswerView()\">\r\n                        <fa-icon class=\"fa-xs align-self-center\" [icon]=\"faArrowRight\" />\r\n                        <span class=\"emoji-count\">{{\r\n                            sortedAnswerPosts()?.length === 1\r\n                                ? ('artemisApp.metis.showSingleAnswer' | artemisTranslate)\r\n                                : ('artemisApp.metis.showMultipleAnswers' | artemisTranslate: { number: sortedAnswerPosts()?.length })\r\n                        }}</span>\r\n                    </button>\r\n                </div>\r\n            }\r\n        } @else if (!isThreadSidebar() && !showAnswers() && sortedAnswerPosts()?.length) {\r\n            <div>\r\n                <button class=\"reaction-button clickable expand-answers-btn\" (click)=\"openThread.emit()\">\r\n                    <fa-icon [icon]=\"faArrowRight\" />\r\n                    <span class=\"emoji-count px-2\">{{\r\n                        sortedAnswerPosts()?.length === 1\r\n                            ? ('artemisApp.metis.showSingleAnswer' | artemisTranslate)\r\n                            : ('artemisApp.metis.showMultipleAnswers' | artemisTranslate: { number: sortedAnswerPosts()?.length })\r\n                    }}</span>\r\n                </button>\r\n            </div>\r\n        }\r\n    }\r\n\r\n    @for (reactionMetaData of reactionMetaDataMap | keyvalue; track reactionMetaData) {\r\n        @if (isEmojiCount()) {\r\n            <div>\r\n                <button\r\n                    [disabled]=\"isReadOnlyMode()\"\r\n                    class=\"reaction-button clickable\"\r\n                    [class.reaction-button--reacted]=\"reactionMetaData.value.hasReacted\"\r\n                    (click)=\"updateReaction(reactionMetaData.key)\"\r\n                    [ngbTooltip]=\"reactionMetaData.value.reactingUsers | reactingUsersOnPosting | async\"\r\n                >\r\n                    <div class=\"emoji-container\">\r\n                        <jhi-emoji [emoji]=\"reactionMetaData.key\" />\r\n                        <span class=\"emoji-count\" [class.reaction-count--reacted]=\"reactionMetaData.value.hasReacted\">\r\n                            {{ reactionMetaData.value.count }}\r\n                        </span>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n        }\r\n    }\r\n\r\n    <div [hidden]=\"isReadOnlyMode()\">\r\n        <!-- Emoji picker -->\r\n        @if ((isAnyReactionCountAboveZero() && isEmojiCount()) || !isEmojiCount()) {\r\n            <ng-container>\r\n                <button class=\"reaction-button clickable px-2 fs-small\" (click)=\"showReactionSelector = !showReactionSelector\" cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\">\r\n                    <fa-icon\r\n                        [icon]=\"getPostingType() === 'post' ? faSmile : faSmile\"\r\n                        [class.open-selector]=\"showReactionSelector\"\r\n                        [title]=\"'artemisApp.metis.chooseReaction' | artemisTranslate\"\r\n                    />\r\n                </button>\r\n\r\n                <ng-template\r\n                    cdkConnectedOverlay\r\n                    [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n                    [cdkConnectedOverlayBackdropClass]=\"'cdk-overlay-transparent-backdrop'\"\r\n                    [cdkConnectedOverlayOrigin]=\"trigger\"\r\n                    [cdkConnectedOverlayOpen]=\"showReactionSelector\"\r\n                    (backdropClick)=\"toggleEmojiSelect()\"\r\n                >\r\n                    <jhi-emoji-picker\r\n                        [emojisToShowFilter]=\"emojisToShowFilter\"\r\n                        (emojiSelect)=\"selectReaction($event)\"\r\n                        [categoriesIcons]=\"categoriesIcons\"\r\n                        [recent]=\"selectedCourseEmojis\"\r\n                    />\r\n                </ng-template>\r\n            </ng-container>\r\n        }\r\n\r\n        <!-- Edit button -->\r\n        @if (!isEmojiCount() && mayEdit) {\r\n            <button class=\"reaction-button clickable px-2 fs-small edit\" (click)=\"editPosting()\" [ngbTooltip]=\"'artemisApp.metis.editPosting' | artemisTranslate\">\r\n                <fa-icon [icon]=\"faPencilAlt\" />\r\n            </button>\r\n        }\r\n        <jhi-post-create-edit-modal #createEditModal [posting]=\"posting()!\" [isCommunicationPage]=\"isCommunicationPage()!\" (isModalOpen)=\"isModalOpen.emit()\" />\r\n        <!-- Delete button -->\r\n        @if (!isEmojiCount() && mayDelete) {\r\n            <button class=\"reaction-button clickable fs-small\">\r\n                <jhi-confirm-icon\r\n                    iconSize=\"sm\"\r\n                    (confirmEvent)=\"deletePosting()\"\r\n                    [initialTooltip]=\"'artemisApp.metis.deleteAnswer' | artemisTranslate\"\r\n                    [confirmTooltip]=\"'artemisApp.metis.confirmDeleteAnswer' | artemisTranslate\"\r\n                />\r\n            </button>\r\n        }\r\n\r\n        <!-- Resolve post button -->\r\n        @if (getPostingType() === 'answerPost' && !isEmojiCount()) {\r\n            @if (!isAnswerOfAnnouncement && (isAtLeastTutorInCourse || isAuthorOfOriginalPost)) {\r\n                <button\r\n                    class=\"reaction-button clickable px-2 fs-small resolve\"\r\n                    id=\"toggleElement\"\r\n                    [ngClass]=\"isAtLeastTutorInCourse || isAuthorOfOriginalPost ? 'clickable' : ''\"\r\n                    (click)=\"toggleResolvesPost()\"\r\n                >\r\n                    @if (getResolvesPost()) {\r\n                        <fa-icon\r\n                            class=\"resolved\"\r\n                            [icon]=\"faCheck\"\r\n                            [ngbTooltip]=\"\r\n                                isAtLeastTutorInCourse || isAuthorOfOriginalPost\r\n                                    ? ('artemisApp.metis.unmarkAsResolvingAnswerTooltip' | artemisTranslate)\r\n                                    : ('artemisApp.metis.resolvingAnswerTooltip' | artemisTranslate)\r\n                            \"\r\n                        />\r\n                    } @else {\r\n                        @if (isAtLeastTutorInCourse || isAuthorOfOriginalPost) {\r\n                            <fa-icon class=\"icon notResolved\" [icon]=\"faCheck\" [ngbTooltip]=\"'artemisApp.metis.markAsResolvingAnswerTooltip' | artemisTranslate\" />\r\n                        }\r\n                    }\r\n                </button>\r\n            }\r\n        }\r\n\r\n        <!-- Pin button -->\r\n        @if (getPostingType() === 'post' && !isEmojiCount() && (displayPriority === DisplayPriority.PINNED || canPin)) {\r\n            <button\r\n                class=\"reaction-button pin clickable fs-small\"\r\n                [class.reaction-button--not-hoverable]=\"!canPin\"\r\n                [class.reaction-button--reacted]=\"displayPriority === DisplayPriority.PINNED && canPin\"\r\n                [disabled]=\"!canPin || isReadOnlyMode()\"\r\n                (click)=\"canPin && togglePin()\"\r\n            >\r\n                <jhi-emoji class=\"fs-x-small\" [emoji]=\"pinEmojiId\" [ngbTooltip]=\"pinTooltip | artemisTranslate\" />\r\n            </button>\r\n        }\r\n\r\n        @if (!isEmojiCount()) {\r\n            <!-- Save button -->\r\n            <button\r\n                class=\"reaction-button clickable px-2 fs-small bookmark\"\r\n                (click)=\"bookmarkPosting()\"\r\n                [ngbTooltip]=\"(getSaved() ? 'artemisApp.metis.post.removeBookmarkPost' : 'artemisApp.metis.post.bookmarkPost') | artemisTranslate\"\r\n            >\r\n                <fa-icon [icon]=\"getSaved() ? faBookmark : faBookmark\" />\r\n            </button>\r\n            <!-- Forward button -->\r\n            <button\r\n                class=\"reaction-button clickable px-2 fs-small forward\"\r\n                [disabled]=\"isReadOnlyMode()\"\r\n                (click)=\"forwardMessage()\"\r\n                [ngbTooltip]=\"'artemisApp.metis.post.forwardMessage' | artemisTranslate\"\r\n            >\r\n                <fa-icon [icon]=\"faShare\" cdkOverlayOrigin />\r\n            </button>\r\n        }\r\n    </div>\r\n\r\n    <!-- New message badge -->\r\n    @if (getPostingType() === 'post' && isEmojiCount() && getShowNewMessageIcon()) {\r\n        <div jhiTranslate=\"global.generic.new\" class=\"badge bg-secondary hideAfter5Seconds\"></div>\r\n    }\r\n</div>\r\n", "import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostListener,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Renderer2,\r\n    ViewContainerRef,\r\n    inject,\r\n    input,\r\n    output,\r\n    viewChild,\r\n} from '@angular/core';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { PostingDirective } from 'app/shared/metis/posting.directive';\r\nimport dayjs from 'dayjs/esm';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { Reaction } from 'app/entities/metis/reaction.model';\r\nimport { faBookmark, faPencilAlt, faShare, faSmile, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { DOCUMENT, NgClass, NgStyle } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PostingHeaderComponent } from '../posting-header/posting-header.component';\r\nimport { PostingContentComponent } from '../posting-content/posting-content.components';\r\nimport { AnswerPostCreateEditModalComponent } from '../posting-create-edit-modal/answer-post-create-edit-modal/answer-post-create-edit-modal.component';\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { EmojiPickerComponent } from '../emoji/emoji-picker.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { captureException } from '@sentry/angular';\r\nimport { PostingReactionsBarComponent } from 'app/shared/metis/posting-reactions-bar/posting-reactions-bar.component';\r\nimport { Course } from 'app/entities/course.model';\r\n\r\n@Component({\r\n    selector: 'jhi-answer-post',\r\n    templateUrl: './answer-post.component.html',\r\n    styleUrls: ['./answer-post.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    animations: [\r\n        trigger('fade', [\r\n            transition(':enter', [style({ opacity: 0 }), animate('300ms ease-in', style({ opacity: 1 }))]),\r\n            transition(':leave', [animate('300ms ease-out', style({ opacity: 0 }))]),\r\n        ]),\r\n    ],\r\n    imports: [\r\n        NgClass,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        PostingHeaderComponent,\r\n        PostingContentComponent,\r\n        PostingReactionsBarComponent,\r\n        AnswerPostCreateEditModalComponent,\r\n        NgStyle,\r\n        CdkOverlayOrigin,\r\n        CdkConnectedOverlay,\r\n        EmojiPickerComponent,\r\n        ArtemisDatePipe,\r\n    ],\r\n})\r\nexport class AnswerPostComponent extends PostingDirective<AnswerPost> implements OnInit, OnChanges, OnDestroy {\r\n    changeDetector = inject(ChangeDetectorRef);\r\n    renderer = inject(Renderer2);\r\n    private document = inject<Document>(DOCUMENT);\r\n\r\n    lastReadDate = input<dayjs.Dayjs | undefined>(undefined);\r\n    isLastAnswer = input<boolean>(false);\r\n    isReadOnlyMode = input<boolean>(false);\r\n    isConsecutive = input<boolean>(false);\r\n\r\n    openPostingCreateEditModal = output<void>();\r\n    userReferenceClicked = output<string>();\r\n    channelReferenceClicked = output<number>();\r\n\r\n    containerRef = viewChild.required('createEditAnswerPostContainer', { read: ViewContainerRef });\r\n    reactionsBarComponent = viewChild<PostingReactionsBarComponent<AnswerPost>>(PostingReactionsBarComponent);\r\n\r\n    isAnswerPost = true;\r\n    course: Course;\r\n\r\n    // Icons\r\n    faBookmark = faBookmark;\r\n\r\n    readonly faPencilAlt = faPencilAlt;\r\n    readonly faShare = faShare;\r\n    readonly faSmile = faSmile;\r\n    readonly faTrash = faTrash;\r\n    static activeDropdownPost: AnswerPostComponent | null = null;\r\n    mayEdit = false;\r\n    mayDelete = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.course = this.metisService.getCourse();\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.assignPostingToAnswerPost();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.assignPostingToAnswerPost();\r\n    }\r\n\r\n    get reactionsBar() {\r\n        return this.reactionsBarComponent();\r\n    }\r\n\r\n    onPostingUpdated(updatedPosting: AnswerPost) {\r\n        this.posting = updatedPosting;\r\n    }\r\n\r\n    onReactionsUpdated(updatedReactions: Reaction[]) {\r\n        this.posting = { ...this.posting, reactions: updatedReactions };\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    onClickOutside() {\r\n        this.showDropdown = false;\r\n        this.enableBodyScroll();\r\n    }\r\n\r\n    private disableBodyScroll() {\r\n        const mainContainer = this.document.querySelector('.thread-answer-post');\r\n        if (mainContainer) {\r\n            this.renderer.setStyle(mainContainer, 'overflow', 'hidden');\r\n        }\r\n    }\r\n\r\n    enableBodyScroll() {\r\n        const mainContainer = this.document.querySelector('.thread-answer-post');\r\n        if (mainContainer) {\r\n            this.renderer.setStyle(mainContainer, 'overflow-y', 'auto');\r\n        }\r\n    }\r\n\r\n    onMayDelete(value: boolean) {\r\n        this.mayDelete = value;\r\n    }\r\n\r\n    onMayEdit(value: boolean) {\r\n        this.mayEdit = value;\r\n    }\r\n\r\n    onRightClick(event: MouseEvent) {\r\n        const targetElement = event.target as HTMLElement;\r\n        let isPointerCursor: boolean;\r\n        try {\r\n            isPointerCursor = window.getComputedStyle(targetElement).cursor === 'pointer';\r\n        } catch (error) {\r\n            captureException(error);\r\n            isPointerCursor = true;\r\n        }\r\n\r\n        if (!isPointerCursor) {\r\n            event.preventDefault();\r\n\r\n            if (AnswerPostComponent.activeDropdownPost !== this) {\r\n                AnswerPostComponent.cleanupActiveDropdown();\r\n            }\r\n\r\n            AnswerPostComponent.activeDropdownPost = this;\r\n\r\n            this.dropdownPosition = {\r\n                x: event.clientX,\r\n                y: event.clientY,\r\n            };\r\n\r\n            this.showDropdown = true;\r\n            this.adjustDropdownPosition();\r\n            this.disableBodyScroll();\r\n        }\r\n    }\r\n\r\n    adjustDropdownPosition() {\r\n        const dropdownWidth = 200;\r\n        const screenWidth = window.innerWidth;\r\n\r\n        if (this.dropdownPosition.x + dropdownWidth > screenWidth) {\r\n            this.dropdownPosition.x = screenWidth - dropdownWidth - 10;\r\n        }\r\n    }\r\n\r\n    private static cleanupActiveDropdown(): void {\r\n        if (AnswerPostComponent.activeDropdownPost) {\r\n            AnswerPostComponent.activeDropdownPost.showDropdown = false;\r\n            AnswerPostComponent.activeDropdownPost.enableBodyScroll();\r\n            AnswerPostComponent.activeDropdownPost.changeDetector.detectChanges();\r\n            AnswerPostComponent.activeDropdownPost = null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (AnswerPostComponent.activeDropdownPost === this) {\r\n            AnswerPostComponent.cleanupActiveDropdown();\r\n        }\r\n    }\r\n\r\n    private assignPostingToAnswerPost() {\r\n        // This is needed because otherwise instanceof returns 'object'.\r\n        if (this.posting && !(this.posting instanceof AnswerPost)) {\r\n            this.posting = Object.assign(new AnswerPost(), this.posting);\r\n        }\r\n    }\r\n}\r\n", "<div\r\n    [id]=\"'item-' + posting.id\"\r\n    class=\"answer-post hover-container\"\r\n    [ngClass]=\"{ 'module-bg rounded-2': isCommunicationPage, 'is-saved': !isConsecutive() && posting.isSaved, 'non-consecutive': !isConsecutive() }\"\r\n>\r\n    @if (posting.isSaved) {\r\n        <div class=\"post-is-saved-message post-content-padding fs-xx-small py-1\" [ngClass]=\"{ 'is-saved': isConsecutive() && posting.isSaved }\">\r\n            <div class=\"post-is-saved-message-content\">\r\n                <fa-icon [icon]=\"faBookmark\" />\r\n                <span class=\"text-secondary\" jhiTranslate=\"artemisApp.metis.post.saved\"></span>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (isConsecutive()) {\r\n        <span class=\"post-time fs-small\" ngbTooltip=\"{{ posting.creationDate | artemisDate: 'time' }}\">\r\n            {{ posting.creationDate | artemisDate: 'time' }}\r\n        </span>\r\n    }\r\n    @if (!isConsecutive()) {\r\n        <div class=\"ps-3\">\r\n            <jhi-posting-header\r\n                [posting]=\"posting\"\r\n                [readOnlyMode]=\"isReadOnlyMode()\"\r\n                [isCommunicationPage]=\"isCommunicationPage\"\r\n                [lastReadDate]=\"lastReadDate()\"\r\n                [isDeleted]=\"isDeleted\"\r\n                (onUserNameClicked)=\"onUserNameClicked()\"\r\n            />\r\n        </div>\r\n    }\r\n    @if (!createAnswerPostModal.isInputOpen) {\r\n        <div class=\"message-container post-content-padding\" [ngClass]=\"{ 'is-saved': isConsecutive() && posting.isSaved }\" (contextmenu)=\"onRightClick($event)\">\r\n            <div class=\"message-content\" [class.force-hover]=\"showDropdown\">\r\n                <jhi-posting-content\r\n                    [content]=\"posting.content\"\r\n                    [isEdited]=\"!!posting.updatedDate\"\r\n                    [author]=\"posting.author\"\r\n                    [posting]=\"posting\"\r\n                    [isReply]=\"true\"\r\n                    [isDeleted]=\"isDeleted\"\r\n                    [deleteTimerInSeconds]=\"deleteTimerInSeconds\"\r\n                    (onUndoDeleteEvent)=\"onDeleteEvent(false)\"\r\n                    (userReferenceClicked)=\"onUserReferenceClicked($event)\"\r\n                    (channelReferenceClicked)=\"channelReferenceClicked.emit($event)\"\r\n                />\r\n                <div class=\"post-content-padding hover-actions\">\r\n                    <jhi-posting-reactions-bar\r\n                        [isReadOnlyMode]=\"isReadOnlyMode()\"\r\n                        [course]=\"course\"\r\n                        [posting]=\"posting\"\r\n                        [isLastAnswer]=\"isLastAnswer()\"\r\n                        [isThreadSidebar]=\"isThreadSidebar\"\r\n                        (openPostingCreateEditModal)=\"createAnswerPostModal.open()\"\r\n                        (reactionsUpdated)=\"onReactionsUpdated($event)\"\r\n                        (mayDeleteOutput)=\"onMayDelete($event)\"\r\n                        (mayEditOutput)=\"onMayEdit($event)\"\r\n                        (isDeleteEvent)=\"onDeleteEvent(true)\"\r\n                        (onBookmarkClicked)=\"toggleSavePost()\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    <div class=\"post-content-padding\">\r\n        <ng-container #createEditAnswerPostContainer />\r\n    </div>\r\n    @if (!isDeleted) {\r\n        <div class=\"post-content-padding post-reactions-bar\" [ngClass]=\"{ 'is-saved': posting.isSaved && isConsecutive() }\" @fade>\r\n            <jhi-posting-reactions-bar\r\n                [isReadOnlyMode]=\"isReadOnlyMode()\"\r\n                [posting]=\"posting\"\r\n                [isLastAnswer]=\"isLastAnswer()\"\r\n                [isThreadSidebar]=\"isThreadSidebar\"\r\n                (openPostingCreateEditModal)=\"createAnswerPostModal.open()\"\r\n                (reactionsUpdated)=\"onReactionsUpdated($event)\"\r\n                [isEmojiCount]=\"true\"\r\n                (onBookmarkClicked)=\"toggleSavePost()\"\r\n            />\r\n        </div>\r\n    }\r\n</div>\r\n<jhi-answer-post-create-edit-modal #createAnswerPostModal [posting]=\"posting\" (postingUpdated)=\"onPostingUpdated($event)\" [createEditAnswerPostContainerRef]=\"containerRef()\" />\r\n\r\n<!-- Right-Click Dropdown -->\r\n@if (showDropdown) {\r\n    <div [ngStyle]=\"{ position: 'fixed', 'top.px': dropdownPosition.y, 'left.px': dropdownPosition.x }\" class=\"dropdown-menu show\">\r\n        <button class=\"dropdown-item d-flex\" (click)=\"addReaction($event)\">\r\n            <fa-icon [icon]=\"faSmile\" class=\"item-icon\" />\r\n            <span jhiTranslate=\"artemisApp.metis.post.addReaction\"></span>\r\n        </button>\r\n        @if (mayEdit) {\r\n            <button class=\"dropdown-item d-flex\" (click)=\"editPosting()\">\r\n                <fa-icon [icon]=\"faPencilAlt\" class=\"item-icon\" />\r\n                <span jhiTranslate=\"artemisApp.metis.post.editMessage\"></span>\r\n            </button>\r\n        }\r\n        @if (mayDelete) {\r\n            <button class=\"dropdown-item d-flex\" (click)=\"deletePost()\">\r\n                <fa-icon [icon]=\"faTrash\" class=\"item-icon\" />\r\n                <span jhiTranslate=\"artemisApp.metis.post.deleteMessage\"></span>\r\n            </button>\r\n        }\r\n        <button class=\"dropdown-item d-flex\" (click)=\"toggleSavePost()\">\r\n            <fa-icon [icon]=\"posting.isSaved ? faBookmark : farBookmark\" class=\"item-icon\" />\r\n            <span [jhiTranslate]=\"posting.isSaved ? 'artemisApp.metis.post.removeBookmarkPost' : 'artemisApp.metis.post.bookmarkPost'\"></span>\r\n        </button>\r\n        <button class=\"dropdown-item d-flex forward\" (click)=\"forwardMessage()\">\r\n            <fa-icon [icon]=\"faShare\" class=\"item-icon\" />\r\n            <span jhiTranslate=\"artemisApp.metis.post.forwardMessage\"></span>\r\n        </button>\r\n    </div>\r\n}\r\n\r\n<div #emojiPickerTrigger=\"cdkOverlayOrigin\" cdkOverlayOrigin [ngStyle]=\"{ position: 'fixed', 'top.px': clickPosition.y, 'left.px': clickPosition.x }\"></div>\r\n\r\n<ng-template\r\n    cdkConnectedOverlay\r\n    [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n    [cdkConnectedOverlayBackdropClass]=\"'cdk-overlay-transparent-backdrop'\"\r\n    [cdkConnectedOverlayOrigin]=\"emojiPickerTrigger\"\r\n    [cdkConnectedOverlayOpen]=\"showReactionSelector\"\r\n    (backdropClick)=\"toggleEmojiSelect()\"\r\n>\r\n    <jhi-emoji-picker (emojiSelect)=\"selectReaction($event)\" />\r\n</ng-template>\r\n", "import { AfterContentChecked, ChangeDetectorRef, Component, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild, ViewContainerRef, inject, input, output } from '@angular/core';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AnswerPostCreateEditModalComponent } from 'app/shared/metis/posting-create-edit-modal/answer-post-create-edit-modal/answer-post-create-edit-modal.component';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { AnswerPostComponent } from '../answer-post/answer-post.component';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\n\r\ninterface PostGroup {\r\n    author: User | undefined;\r\n    posts: AnswerPost[];\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-posting-footer',\r\n    templateUrl: './posting-footer.component.html',\r\n    imports: [AnswerPostComponent, AnswerPostCreateEditModalComponent, ArtemisTranslatePipe],\r\n})\r\nexport class PostingFooterComponent implements OnInit, OnDestroy, AfterContentChecked, OnChanges {\r\n    lastReadDate = input<dayjs.Dayjs | undefined>();\r\n    readOnlyMode = input<boolean>(false);\r\n    previewMode = input<boolean>(false);\r\n    modalRef = input<NgbModalRef | undefined>();\r\n    hasChannelModerationRights = input<boolean>(false);\r\n    showAnswers = input<boolean>(false);\r\n    isCommunicationPage = input<boolean>(false);\r\n    sortedAnswerPosts = input<AnswerPost[]>([]);\r\n    isThreadSidebar = input<boolean>(false);\r\n    posting = input<Posting>();\r\n\r\n    // Output Signals\r\n    openThread = output<void>();\r\n    userReferenceClicked = output<string>();\r\n    channelReferenceClicked = output<number>();\r\n\r\n    @ViewChild(AnswerPostCreateEditModalComponent) answerPostCreateEditModal?: AnswerPostCreateEditModalComponent;\r\n    @ViewChild('createEditAnswerPostContainer', { read: ViewContainerRef }) containerRef!: ViewContainerRef;\r\n    @ViewChild('createAnswerPostModal') createAnswerPostModalComponent!: AnswerPostCreateEditModalComponent;\r\n\r\n    createdAnswerPost: AnswerPost;\r\n    isAtLeastTutorInCourse = false;\r\n    courseId!: number;\r\n    groupedAnswerPosts: PostGroup[] = [];\r\n\r\n    private metisService = inject(MetisService);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    ngOnInit(): void {\r\n        this.courseId = this.metisService.getCourse().id!;\r\n        this.isAtLeastTutorInCourse = this.metisService.metisUserIsAtLeastTutorInCourse();\r\n        this.createdAnswerPost = this.createEmptyAnswerPost();\r\n        this.groupAnswerPosts();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['sortedAnswerPosts']) {\r\n            this.groupAnswerPosts();\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.answerPostCreateEditModal?.createEditAnswerPostContainerRef()?.clear();\r\n    }\r\n\r\n    /**\r\n     * this lifecycle hook is required to avoid causing \"Expression has changed after it was checked\"-error when dismissing all changes in the tag-selector\r\n     * on dismissing the edit-create-modal -> we do not want to store changes in the create-edit-modal that are not saved\r\n     */\r\n    ngAfterContentChecked() {\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * creates empty default answer post that is needed on initialization of a newly opened modal to edit or create an answer post, with accordingly set resolvesPost flag\r\n     * @return AnswerPost created empty default answer post\r\n     */\r\n    createEmptyAnswerPost(): AnswerPost {\r\n        const answerPost = new AnswerPost();\r\n        answerPost.content = '';\r\n        answerPost.post = this.posting();\r\n        answerPost.resolvesPost = this.isAtLeastTutorInCourse;\r\n        return answerPost;\r\n    }\r\n\r\n    groupAnswerPosts(): void {\r\n        if (!this.sortedAnswerPosts() || this.sortedAnswerPosts().length === 0) {\r\n            this.groupedAnswerPosts = [];\r\n            return;\r\n        }\r\n\r\n        const sortedAnswerPosts = this.sortedAnswerPosts().slice().reverse();\r\n\r\n        const sortedPosts = sortedAnswerPosts.sort((a, b) => {\r\n            return a.creationDate!.valueOf() - b.creationDate!.valueOf();\r\n        });\r\n\r\n        const groups: PostGroup[] = [];\r\n        let currentGroup: PostGroup = {\r\n            author: sortedPosts[0].author,\r\n            posts: [{ ...sortedPosts[0], isConsecutive: false }],\r\n        };\r\n\r\n        for (let i = 1; i < sortedPosts.length; i++) {\r\n            const currentPost = sortedPosts[i];\r\n            const lastPostInGroup = currentGroup.posts[currentGroup.posts.length - 1];\r\n\r\n            let timeDiff = Number.MAX_SAFE_INTEGER;\r\n            if (currentPost.creationDate && lastPostInGroup.creationDate) {\r\n                timeDiff = currentPost.creationDate.diff(lastPostInGroup.creationDate, 'minute');\r\n            }\r\n\r\n            if (currentPost.author?.id === currentGroup.author?.id && timeDiff < 5 && timeDiff >= 0) {\r\n                currentGroup.posts.push({ ...currentPost, isConsecutive: true }); // consecutive post\r\n            } else {\r\n                groups.push(currentGroup);\r\n                currentGroup = {\r\n                    author: currentPost.author,\r\n                    posts: [{ ...currentPost, isConsecutive: false }],\r\n                };\r\n            }\r\n        }\r\n\r\n        groups.push(currentGroup);\r\n        this.groupedAnswerPosts = groups;\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    trackGroupByFn(_: number, group: PostGroup): number {\r\n        return group.posts[0].id!;\r\n    }\r\n\r\n    trackPostByFn(_: number, post: AnswerPost): number {\r\n        return post.id!;\r\n    }\r\n\r\n    isLastPost(group: PostGroup, answerPost: AnswerPost): boolean {\r\n        const lastPostInGroup = group.posts[group.posts.length - 1];\r\n        return lastPostInGroup.id === answerPost.id;\r\n    }\r\n\r\n    /**\r\n     * Open create answer modal\r\n     */\r\n    openCreateAnswerPostModal() {\r\n        this.createAnswerPostModalComponent?.open();\r\n    }\r\n\r\n    /**\r\n     * Close create answer modal\r\n     */\r\n    closeCreateAnswerPostModal() {\r\n        this.createAnswerPostModalComponent?.close();\r\n    }\r\n\r\n    protected postsTrackByFn(_index: number, post: Post): number {\r\n        return post.id!;\r\n    }\r\n}\r\n", "@if (showAnswers()) {\r\n    <div class=\"d-flex align-items-center mb-1 mx-3\">\r\n        <div class=\"fs-x-small fw-900 me-2\">\r\n            {{\r\n                sortedAnswerPosts().length === 1\r\n                    ? ('artemisApp.metis.singleAnswer' | artemisTranslate)\r\n                    : ('artemisApp.metis.multipleAnswers' | artemisTranslate: { number: sortedAnswerPosts().length })\r\n            }}\r\n        </div>\r\n        <div class=\"flex-grow-1\">\r\n            <hr class=\"m-0\" />\r\n        </div>\r\n    </div>\r\n    <ng-container class=\"list-answer-post\">\r\n        @for (group of groupedAnswerPosts; track trackGroupByFn($index, group)) {\r\n            @for (answerPost of group.posts; track trackPostByFn($index, answerPost)) {\r\n                <jhi-answer-post\r\n                    [lastReadDate]=\"lastReadDate()\"\r\n                    [isReadOnlyMode]=\"readOnlyMode()\"\r\n                    [posting]=\"answerPost\"\r\n                    [isConsecutive]=\"answerPost.isConsecutive || false\"\r\n                    [isLastAnswer]=\"isLastPost(group, answerPost)\"\r\n                    [isCommunicationPage]=\"isCommunicationPage()\"\r\n                    [isThreadSidebar]=\"isThreadSidebar()\"\r\n                    (openPostingCreateEditModal)=\"createAnswerPostModal.open()\"\r\n                    (userReferenceClicked)=\"userReferenceClicked.emit($event)\"\r\n                    (channelReferenceClicked)=\"channelReferenceClicked.emit($event)\"\r\n                    [hasChannelModerationRights]=\"hasChannelModerationRights()\"\r\n                />\r\n            }\r\n        }\r\n    </ng-container>\r\n}\r\n<div class=\"new-reply-inline-input\">\r\n    <!-- rendered during the first reply to a post -->\r\n    <ng-container #createEditAnswerPostContainer />\r\n    <jhi-answer-post-create-edit-modal\r\n        #createAnswerPostModal\r\n        [posting]=\"createdAnswerPost\"\r\n        [createEditAnswerPostContainerRef]=\"containerRef\"\r\n        (onCreate)=\"createdAnswerPost = createEmptyAnswerPost(); showAnswers()\"\r\n    />\r\n</div>\r\n", "import { Component, OnInit, ViewEncapsulation, inject } from '@angular/core';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { PostContentValidationPattern } from 'app/shared/metis/metis.util';\r\nimport { PostingButtonComponent } from 'app/shared/metis/posting-button/posting-button.component';\r\nimport { PostingCreateEditDirective } from 'app/shared/metis/posting-create-edit.directive';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { PostingMarkdownEditorComponent } from '../../posting-markdown-editor/posting-markdown-editor.component';\r\n\r\n@Component({\r\n    selector: 'jhi-message-inline-input',\r\n    templateUrl: './message-inline-input.component.html',\r\n    styleUrls: ['./message-inline-input.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [FormsModule, ReactiveFormsModule, PostingMarkdownEditorComponent, TranslateDirective, PostingButtonComponent, ArtemisTranslatePipe],\r\n})\r\nexport class MessageInlineInputComponent extends PostingCreateEditDirective<Post | AnswerPost> implements OnInit {\r\n    private localStorageService = inject(LocalStorageService);\r\n\r\n    warningDismissed = false;\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.warningDismissed = !!this.localStorageService.retrieve('chatWarningDismissed');\r\n    }\r\n\r\n    /**\r\n     * resets the answer post content\r\n     */\r\n    resetFormGroup(): void {\r\n        this.formGroup = this.formBuilder.group({\r\n            // the pattern ensures that the content must include at least one non-whitespace character\r\n            content: [this.posting.content, [Validators.required, Validators.maxLength(this.maxContentLength), PostContentValidationPattern]],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service after setting the title and current date as creation date of the new answer post,\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    createPosting(): void {\r\n        this.posting.content = this.formGroup.get('content')?.value;\r\n        this.metisService.createPost(this.posting).subscribe({\r\n            next: (post: Post) => {\r\n                this.isLoading = false;\r\n                this.onCreate.emit(post);\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * invokes the metis service with the updated answer post\r\n     * ends the process successfully by closing the modal and stopping the button's loading animation\r\n     */\r\n    updatePosting(): void {\r\n        this.posting.content = this.formGroup.get('content')?.value;\r\n        this.metisService.updatePost(this.posting).subscribe({\r\n            next: () => {\r\n                this.isLoading = false;\r\n                this.isModalOpen.emit();\r\n            },\r\n            error: () => {\r\n                this.isLoading = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    closeAlert() {\r\n        this.warningDismissed = true;\r\n        this.localStorageService.store('chatWarningDismissed', true);\r\n    }\r\n}\r\n", "<form [formGroup]=\"formGroup\" (ngSubmit)=\"confirm()\">\r\n    <div class=\"message-inline-input-form__wrapper\">\r\n        <jhi-posting-markdown-editor\r\n            formControlName=\"content\"\r\n            [editorHeight]=\"editorHeight\"\r\n            [maxContentLength]=\"maxContentLength\"\r\n            [isInputLengthDisplayed]=\"false\"\r\n            (keydown.enter)=\"confirm()\"\r\n            [isButtonLoading]=\"isLoading\"\r\n            [isFormGroupValid]=\"formGroup.valid\"\r\n            [editType]=\"editType\"\r\n        />\r\n        <div class=\"col mt-1 text-end\">\r\n            @if (!warningDismissed) {\r\n                <div class=\"alert alert-warning alert-dismissible text-start fade show\" role=\"alert\">\r\n                    <button type=\"button\" class=\"btn-close\" (click)=\"closeAlert()\" aria-label=\"Close\"></button>\r\n                    <h4 class=\"alert-heading\" jhiTranslate=\"artemisApp.messageWarning.headerText\"></h4>\r\n                    <p jhiTranslate=\"artemisApp.messageWarning.mainParagraph\"></p>\r\n                    <hr />\r\n                    <p class=\"mb-0\" jhiTranslate=\"artemisApp.messageWarning.lastParagraph\"></p>\r\n                </div>\r\n            }\r\n            @if (editType === EditType.UPDATE) {\r\n                <button\r\n                    jhi-posting-button\r\n                    [buttonLabel]=\"'artemisApp.metis.cancel' | artemisTranslate\"\r\n                    class=\"btn btn-sm btn-outline-secondary\"\r\n                    (click)=\"isModalOpen.emit()\"\r\n                ></button>\r\n                <button\r\n                    jhi-posting-button\r\n                    [buttonLoading]=\"isLoading\"\r\n                    [disabled]=\"isLoading || !formGroup.valid\"\r\n                    [buttonLabel]=\"'artemisApp.conversationsLayout.saveMessage' | artemisTranslate\"\r\n                    class=\"btn btn-sm btn-outline-primary\"\r\n                    id=\"save\"\r\n                    type=\"submit\"\r\n                ></button>\r\n            }\r\n        </div>\r\n    </div>\r\n</form>\r\n", "import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, effect, inject, input, output, viewChild } from '@angular/core';\r\nimport { faShare } from '@fortawesome/free-solid-svg-icons';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Conversation } from 'app/entities/metis/conversation/conversation.model';\r\nimport { ProfilePictureComponent } from 'app/shared/profile-picture/profile-picture.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { PostingContentComponent } from 'app/shared/metis/posting-content/posting-content.components';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { NgClass } from '@angular/common';\r\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-forwarded-message',\r\n    templateUrl: './forwarded-message.component.html',\r\n    styleUrls: ['./forwarded-message.component.scss'],\r\n    imports: [ProfilePictureComponent, TranslateDirective, NgClass, FaIconComponent, NgbTooltip, PostingContentComponent, ArtemisTranslatePipe, ArtemisDatePipe],\r\n})\r\nexport class ForwardedMessageComponent implements AfterViewInit {\r\n    readonly faShare = faShare;\r\n    readonly onNavigateToPost = output<Posting>();\r\n\r\n    sourceName: string | undefined = '';\r\n    todayFlag?: string;\r\n    originalPostDetails = input<Posting>();\r\n    messageContent = viewChild<ElementRef>('messageContent');\r\n    isContentLong = false;\r\n    showFullForwardedMessage = false;\r\n    postingIsOfToday = false;\r\n\r\n    protected viewButtonVisible = false;\r\n\r\n    private cdr = inject(ChangeDetectorRef);\r\n    private conversation: Conversation | undefined;\r\n    private isAnswerPost = false;\r\n\r\n    constructor() {\r\n        effect(() => {\r\n            try {\r\n                const post = this.originalPostDetails();\r\n                if (post) {\r\n                    this.isAnswerPost = 'post' in post;\r\n                    this.conversation = this.isAnswerPost ? (post as AnswerPost).post?.conversation : (post as Post).conversation;\r\n                    this.updateSourceName();\r\n                    this.isChannel();\r\n                    this.postingIsOfToday = dayjs().isSame(post.creationDate, 'day');\r\n                    this.todayFlag = this.getTodayFlag();\r\n                } else {\r\n                    this.sourceName = '';\r\n                    this.conversation = undefined;\r\n                    this.viewButtonVisible = false;\r\n                    this.postingIsOfToday = false;\r\n                    this.todayFlag = undefined;\r\n                }\r\n            } catch (error) {\r\n                this.sourceName = '';\r\n                this.conversation = undefined;\r\n                this.viewButtonVisible = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            this.checkIfContentOverflows();\r\n        }, 0);\r\n    }\r\n\r\n    toggleShowFullForwardedMessage(): void {\r\n        this.showFullForwardedMessage = !this.showFullForwardedMessage;\r\n    }\r\n\r\n    checkIfContentOverflows(): void {\r\n        if (this.messageContent()) {\r\n            const nativeElement = this.messageContent()?.nativeElement;\r\n            this.isContentLong = nativeElement.scrollHeight > nativeElement.clientHeight;\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets a flag that replaces the date by \"Today\" in the posting's header if applicable\r\n     */\r\n    getTodayFlag(): string | undefined {\r\n        if (this.postingIsOfToday) {\r\n            return 'artemisApp.metis.today';\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    isChannel() {\r\n        if (this.conversation?.type?.valueOf() === 'channel') {\r\n            this.viewButtonVisible = true;\r\n        }\r\n    }\r\n\r\n    onTriggerNavigateToPost() {\r\n        if (this.originalPostDetails() === undefined) {\r\n            return;\r\n        }\r\n        this.onNavigateToPost.emit(this.originalPostDetails()!);\r\n    }\r\n\r\n    updateSourceName() {\r\n        if (!this.conversation) {\r\n            this.sourceName = '';\r\n        } else if (this.conversation?.type?.valueOf() === 'channel') {\r\n            if (this.isAnswerPost) {\r\n                this.sourceName = (this.conversation as any)?.name ? `a thread in #${(this.conversation as any)?.name} |` : 'a thread in #unknown |';\r\n            } else {\r\n                this.sourceName = (this.conversation as any)?.name ? `#${(this.conversation as any)?.name} |` : '#unknown |';\r\n            }\r\n        } else if (this.conversation?.type?.valueOf() === 'oneToOneChat') {\r\n            this.sourceName = this.isAnswerPost ? 'a thread in a direct message ' : 'a direct message ';\r\n        } else {\r\n            this.sourceName = this.isAnswerPost ? 'a thread in a group message ' : 'a group message ';\r\n        }\r\n    }\r\n}\r\n", "<div class=\"forwarded-message-container\">\r\n    <div class=\"left-border-line\"></div>\r\n    <div class=\"forwarded-message-content\">\r\n        <span class=\"forwarded-message-channel fs-x-small d-flex align-items-center\">\r\n            <fa-icon [icon]=\"faShare\" class=\"item-icon\" style=\"margin-right: 0.3rem\" />\r\n            {{ 'artemisApp.metis.forward.forwardedFrom' | artemisTranslate }} {{ sourceName }}\r\n            @if (viewButtonVisible) {\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn btn-link p-0\"\r\n                    style=\"width: fit-content; font-size: 0.7rem; margin-left: 0.2rem\"\r\n                    (click)=\"onTriggerNavigateToPost()\"\r\n                    jhiTranslate=\"artemisApp.metis.forward.viewConversation\"\r\n                ></button>\r\n            }\r\n        </span>\r\n        <div class=\"forwarded-message-header\">\r\n            <jhi-profile-picture\r\n                imageSizeInRem=\"1.5\"\r\n                fontSizeInRem=\"0.6\"\r\n                imageId=\"user-profile-picture\"\r\n                defaultPictureId=\"user-default-profile-picture\"\r\n                [authorId]=\"originalPostDetails()?.author?.id\"\r\n                [authorName]=\"originalPostDetails()?.author?.name\"\r\n                [imageUrl]=\"originalPostDetails()?.author?.imageUrl\"\r\n                style=\"margin-right: 0.2rem\"\r\n            />\r\n            <span class=\"forwarded-message-author\">{{ originalPostDetails()?.author?.name }}</span>\r\n            <span class=\"post-header-date-separator\">-</span>\r\n            <span class=\"post-header-date\">\r\n                @if (postingIsOfToday) {\r\n                    <span [jhiTranslate]=\"todayFlag ?? ''\" id=\"today-flag\" class=\"fs-x-small\"></span>\r\n                }\r\n                <span class=\"fs-x-small\" [disableTooltip]=\"postingIsOfToday\" ngbTooltip=\"{{ originalPostDetails()?.creationDate | artemisDate: 'time' }}\">\r\n                    {{ postingIsOfToday ? (originalPostDetails()?.creationDate | artemisDate: 'time') : (originalPostDetails()?.creationDate | artemisDate: 'short-date') }}\r\n                </span>\r\n            </span>\r\n        </div>\r\n        <div class=\"forwarded-message-body\" id=\"messageContent\" #messageContent [ngClass]=\"{ expanded: showFullForwardedMessage }\">\r\n            <jhi-posting-content\r\n                [previewMode]=\"false\"\r\n                [content]=\"originalPostDetails()!.content!\"\r\n                [author]=\"originalPostDetails()!.author!\"\r\n                [isEdited]=\"!!originalPostDetails()!.updatedDate\"\r\n                [posting]=\"originalPostDetails()!\"\r\n                [isReply]=\"false\"\r\n                [isSubscribeToMetis]=\"false\"\r\n            />\r\n        </div>\r\n        @if (isContentLong) {\r\n            <button type=\"button\" class=\"btn btn-link p-0\" style=\"width: fit-content; font-size: 0.7rem\" (click)=\"toggleShowFullForwardedMessage()\">\r\n                {{ showFullForwardedMessage ? ('artemisApp.metis.forward.showLess' | artemisTranslate) : ('artemisApp.metis.forward.showMore' | artemisTranslate) }}\r\n            </button>\r\n        }\r\n    </div>\r\n</div>\r\n", "import {\r\n    AfterContentChecked,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostListener,\r\n    OnChanges,\r\n    OnInit,\r\n    Renderer2,\r\n    inject,\r\n    input,\r\n    model,\r\n    output,\r\n    viewChild,\r\n} from '@angular/core';\r\nimport { Post } from 'app/entities/metis/post.model';\r\nimport { PostingDirective } from 'app/shared/metis/posting.directive';\r\nimport { MetisService } from 'app/shared/metis/metis.service';\r\nimport { NgbModalRef, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ContextInformation, DisplayPriority, PageType, RouteComponents } from '../metis.util';\r\nimport { faBookmark, faBullhorn, faComments, faPencilAlt, faShare, faSmile, faThumbtack, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Course, isCommunicationEnabled } from 'app/entities/course.model';\r\nimport { PostingFooterComponent } from 'app/shared/metis/posting-footer/posting-footer.component';\r\nimport { getAsChannelDTO } from 'app/entities/metis/conversation/channel.model';\r\nimport { AnswerPost } from 'app/entities/metis/answer-post.model';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { DOCUMENT, NgClass, NgStyle } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { PostingHeaderComponent } from '../posting-header/posting-header.component';\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { PostingContentComponent } from '../posting-content/posting-content.components';\r\nimport { MessageInlineInputComponent } from '../message/message-inline-input/message-inline-input.component';\r\nimport { EmojiPickerComponent } from '../emoji/emoji-picker.component';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\nimport { ArtemisTranslatePipe } from '../../pipes/artemis-translate.pipe';\r\nimport { PostingReactionsBarComponent } from 'app/shared/metis/posting-reactions-bar/posting-reactions-bar.component';\r\nimport { Posting } from 'app/entities/metis/posting.model';\r\nimport { throwError } from 'rxjs';\r\nimport { ForwardedMessageComponent } from 'app/shared/metis/forwarded-message/forwarded-message.component';\r\n\r\n@Component({\r\n    selector: 'jhi-post',\r\n    templateUrl: './post.component.html',\r\n    styleUrls: ['./post.component.scss', './../metis.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    animations: [\r\n        trigger('fade', [\r\n            transition(':enter', [style({ opacity: 0 }), animate('300ms ease-in', style({ opacity: 1 }))]),\r\n            transition(':leave', [animate('300ms ease-out', style({ opacity: 0 }))]),\r\n        ]),\r\n    ],\r\n    imports: [\r\n        NgClass,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        PostingHeaderComponent,\r\n        RouterLinkActive,\r\n        RouterLink,\r\n        PostingContentComponent,\r\n        PostingReactionsBarComponent,\r\n        MessageInlineInputComponent,\r\n        PostingFooterComponent,\r\n        NgStyle,\r\n        CdkOverlayOrigin,\r\n        CdkConnectedOverlay,\r\n        EmojiPickerComponent,\r\n        ArtemisDatePipe,\r\n        ArtemisTranslatePipe,\r\n        ForwardedMessageComponent,\r\n    ],\r\n})\r\nexport class PostComponent extends PostingDirective<Post> implements OnInit, OnChanges, AfterContentChecked {\r\n    metisService = inject(MetisService);\r\n    changeDetector = inject(ChangeDetectorRef);\r\n    renderer = inject(Renderer2);\r\n    private document = inject<Document>(DOCUMENT);\r\n\r\n    lastReadDate = input<dayjs.Dayjs | undefined>(undefined);\r\n    readOnlyMode = input<boolean>(false);\r\n    previewMode = input<boolean>(false);\r\n    // if the post is previewed in the create/edit modal,\r\n    // we need to pass the ref in order to close it when navigating to the previewed post via post title\r\n    modalRef = input<NgbModalRef | undefined>(undefined);\r\n    showAnswers = model<boolean>(false);\r\n\r\n    openThread = output<void>();\r\n\r\n    postFooterComponent = viewChild<PostingFooterComponent>('postFooter');\r\n    reactionsBarComponent = viewChild.required<PostingReactionsBarComponent<Post>>(PostingReactionsBarComponent);\r\n\r\n    static activeDropdownPost: PostComponent | undefined = undefined;\r\n\r\n    showReactionSelector = false;\r\n    displayInlineInput = false;\r\n    routerLink: RouteComponents;\r\n    queryParams = {};\r\n    showAnnouncementIcon = false;\r\n    sortedAnswerPosts: AnswerPost[];\r\n    createdAnswerPost: AnswerPost;\r\n    isAtLeastTutorInCourse: boolean;\r\n\r\n    pageType: PageType;\r\n    contextInformation: ContextInformation;\r\n    readonly PageType = PageType;\r\n    readonly DisplayPriority = DisplayPriority;\r\n    mayEdit = false;\r\n    mayDelete = false;\r\n    canPin = false;\r\n    originalPostDetails: Post | AnswerPost | undefined = undefined;\r\n    readonly onNavigateToPost = output<Posting>();\r\n\r\n    // Icons\r\n    readonly faBullhorn = faBullhorn;\r\n    readonly faComments = faComments;\r\n    readonly faPencilAlt = faPencilAlt;\r\n    readonly faSmile = faSmile;\r\n    readonly faTrash = faTrash;\r\n    readonly faThumbtack = faThumbtack;\r\n    readonly faBookmark = faBookmark;\r\n    readonly faShare = faShare;\r\n\r\n    isConsecutive = input<boolean>(false);\r\n    forwardedPosts = input<Post[]>([]);\r\n    forwardedAnswerPosts = input<AnswerPost[]>([]);\r\n    dropdownPosition = { x: 0, y: 0 };\r\n    course: Course;\r\n\r\n    constructor() {\r\n        super();\r\n        this.course = this.metisService.getCourse() ?? throwError('Course not found');\r\n    }\r\n\r\n    get reactionsBar() {\r\n        return this.reactionsBarComponent();\r\n    }\r\n\r\n    isPinned(): boolean {\r\n        return this.posting.displayPriority === DisplayPriority.PINNED;\r\n    }\r\n\r\n    onMayEdit(value: boolean) {\r\n        this.mayEdit = value;\r\n    }\r\n\r\n    onMayDelete(value: boolean) {\r\n        this.mayDelete = value;\r\n    }\r\n\r\n    onCanPin(value: boolean) {\r\n        this.canPin = value;\r\n    }\r\n\r\n    onRightClick(event: MouseEvent) {\r\n        const targetElement = event.target as HTMLElement;\r\n        const isPointerCursor = window.getComputedStyle(targetElement).cursor === 'pointer';\r\n\r\n        if (!isPointerCursor) {\r\n            event.preventDefault();\r\n\r\n            if (PostComponent.activeDropdownPost && PostComponent.activeDropdownPost !== this) {\r\n                PostComponent.activeDropdownPost.showDropdown = false;\r\n                PostComponent.activeDropdownPost.enableBodyScroll();\r\n                PostComponent.activeDropdownPost.changeDetector.detectChanges();\r\n            }\r\n\r\n            PostComponent.activeDropdownPost = this;\r\n\r\n            this.dropdownPosition = {\r\n                x: event.clientX,\r\n                y: event.clientY,\r\n            };\r\n\r\n            this.showDropdown = true;\r\n            this.adjustDropdownPosition();\r\n            this.disableBodyScroll();\r\n        }\r\n    }\r\n\r\n    adjustDropdownPosition() {\r\n        const dropdownWidth = 200;\r\n        const screenWidth = window.innerWidth;\r\n\r\n        if (this.dropdownPosition.x + dropdownWidth > screenWidth) {\r\n            this.dropdownPosition.x = screenWidth - dropdownWidth - 10;\r\n        }\r\n    }\r\n\r\n    disableBodyScroll() {\r\n        const mainContainer = this.document.querySelector('.posting-infinite-scroll-container');\r\n        if (mainContainer) {\r\n            this.renderer.setStyle(mainContainer, 'overflow', 'hidden');\r\n        }\r\n    }\r\n\r\n    enableBodyScroll() {\r\n        const mainContainer = this.document.querySelector('.posting-infinite-scroll-container');\r\n        if (mainContainer) {\r\n            this.renderer.setStyle(mainContainer, 'overflow-y', 'auto');\r\n        }\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    onClickOutside() {\r\n        this.showDropdown = false;\r\n        this.enableBodyScroll();\r\n    }\r\n\r\n    /**\r\n     * on initialization: evaluates post context and page type\r\n     */\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.pageType = this.metisService.getPageType();\r\n        this.contextInformation = this.metisService.getContextInformation(this.posting);\r\n        this.isAtLeastTutorInCourse = this.metisService.metisUserIsAtLeastTutorInCourse();\r\n        this.sortAnswerPosts();\r\n        this.assignPostingToPost();\r\n        this.fetchForwardedMessages();\r\n    }\r\n\r\n    fetchForwardedMessages(): void {\r\n        try {\r\n            if (this.forwardedPosts().length > 0) {\r\n                const forwardedMessage = this.forwardedPosts()[0];\r\n\r\n                if (forwardedMessage?.id) {\r\n                    this.originalPostDetails = forwardedMessage;\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            }\r\n            if (this.forwardedAnswerPosts().length > 0) {\r\n                const forwardedMessage = this.forwardedAnswerPosts()[0];\r\n\r\n                if (forwardedMessage?.id) {\r\n                    this.originalPostDetails = forwardedMessage;\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            throw new Error(error.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on changed: re-evaluates context information\r\n     */\r\n    ngOnChanges() {\r\n        this.contextInformation = this.metisService.getContextInformation(this.posting);\r\n        this.routerLink = this.metisService.getLinkForPost();\r\n        this.queryParams = this.metisService.getQueryParamsForPost(this.posting);\r\n        this.showAnnouncementIcon = (getAsChannelDTO(this.posting.conversation)?.isAnnouncementChannel && this.showChannelReference) ?? false;\r\n        this.sortAnswerPosts();\r\n        this.assignPostingToPost();\r\n    }\r\n\r\n    /**\r\n     * this lifecycle hook is required to avoid causing \"Expression has changed after it was checked\"-error when\r\n     * dismissing the edit-create-modal -> we do not want to store changes in the create-edit-modal that are not saved\r\n     */\r\n    ngAfterContentChecked() {\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * ensures that only when clicking on context without having control key pressed,\r\n     * the modal is dismissed (closed and cleared)\r\n     */\r\n    onNavigateToContext($event: MouseEvent) {\r\n        if (!$event.metaKey) {\r\n            this.modalRef()?.dismiss();\r\n            this.metisConversationService.setActiveConversation(this.contextInformation.queryParams!['conversationId']);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open create answer modal\r\n     */\r\n    openCreateAnswerPostModal() {\r\n        this.postFooterComponent()?.openCreateAnswerPostModal();\r\n    }\r\n\r\n    /**\r\n     * Close create answer modal\r\n     */\r\n    closeCreateAnswerPostModal() {\r\n        this.postFooterComponent()?.closeCreateAnswerPostModal();\r\n    }\r\n\r\n    /**\r\n     * sorts answerPosts by two criteria\r\n     * 1. criterion: resolvesPost -> true comes first\r\n     * 2. criterion: creationDate -> most recent comes at the end (chronologically from top to bottom)\r\n     */\r\n    sortAnswerPosts(): void {\r\n        if (!this.posting.answers) {\r\n            this.sortedAnswerPosts = [];\r\n            return;\r\n        }\r\n        this.sortedAnswerPosts = this.posting.answers.sort(\r\n            (answerPostA, answerPostB) =>\r\n                Number(answerPostB.resolvesPost) - Number(answerPostA.resolvesPost) || answerPostA.creationDate!.valueOf() - answerPostB.creationDate!.valueOf(),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Navigate to the referenced channel\r\n     *\r\n     * @param channelId id of the referenced channel\r\n     */\r\n    onChannelReferenceClicked(channelId: number) {\r\n        const course = this.metisService.getCourse();\r\n        if (isCommunicationEnabled(course)) {\r\n            if (this.isCommunicationPage) {\r\n                this.metisConversationService.setActiveConversation(channelId);\r\n            } else {\r\n                this.router.navigate(['courses', course.id, 'communication'], {\r\n                    queryParams: {\r\n                        conversationId: channelId,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignPostingToPost() {\r\n        // This is needed because otherwise instanceof returns 'object'.\r\n        if (this.posting && !(this.posting instanceof Post)) {\r\n            this.posting = Object.assign(new Post(), this.posting);\r\n        }\r\n    }\r\n\r\n    protected onTriggerNavigateToPost(post: Posting) {\r\n        this.onNavigateToPost.emit(post);\r\n    }\r\n}\r\n", "<div\r\n    class=\"post hover-container\"\r\n    [ngClass]=\"{ 'mx-0': !isThreadSidebar, 'pinned-message': isPinned(), 'is-saved': !isConsecutive() && posting.isSaved, 'non-consecutive': !isConsecutive() }\"\r\n>\r\n    @if (posting.isSaved) {\r\n        <div class=\"post-is-saved-message post-content-padding fs-xx-small py-1\" [ngClass]=\"{ 'is-saved': isConsecutive() && posting.isSaved }\">\r\n            <div class=\"post-is-saved-message-content\">\r\n                <fa-icon [icon]=\"faBookmark\" />\r\n                <span class=\"text-secondary\" jhiTranslate=\"artemisApp.metis.post.saved\"></span>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (isConsecutive()) {\r\n        <span class=\"post-time fs-small\" ngbTooltip=\"{{ posting.creationDate | artemisDate: 'time' }}\">\r\n            {{ posting.creationDate | artemisDate: 'time' }}\r\n        </span>\r\n    }\r\n    @if (!isConsecutive()) {\r\n        <div class=\"ps-3\">\r\n            <jhi-posting-header\r\n                [previewMode]=\"previewMode()\"\r\n                [readOnlyMode]=\"readOnlyMode()\"\r\n                [posting]=\"posting\"\r\n                [isDeleted]=\"isDeleted\"\r\n                [isCommunicationPage]=\"isCommunicationPage\"\r\n                (isModalOpen)=\"displayInlineInput = true\"\r\n                (onUserNameClicked)=\"onUserNameClicked()\"\r\n                [lastReadDate]=\"lastReadDate()\"\r\n            />\r\n        </div>\r\n    }\r\n    <div class=\"align-items-center\">\r\n        <div>\r\n            <div class=\"post-context-information-wrap post-content-padding\" [ngClass]=\"{ 'is-saved': isConsecutive() && posting.isSaved }\">\r\n                @if (showAnnouncementIcon) {\r\n                    <fa-icon\r\n                        [icon]=\"faBullhorn\"\r\n                        iconSize=\"xs\"\r\n                        class=\"pe-0 ms-1 announcement-icon\"\r\n                        [ngbTooltip]=\"'artemisApp.metis.post.postMarkedAsAnnouncementTooltip' | artemisTranslate\"\r\n                    />\r\n                }\r\n                <!-- in the course all-messages as well as in the preview mode during similarity check, the context (lecture, exercise, course-wide topic) is shown -->\r\n                <!-- not shown in course messages page -->\r\n                @if (showChannelReference && (pageType === PageType.OVERVIEW || previewMode()) && contextInformation.displayName !== '') {\r\n                    <span>\r\n                        @if (contextInformation.routerLinkComponents) {\r\n                            <a\r\n                                class=\"linked-context-information ms-1\"\r\n                                [routerLink]=\"contextInformation.routerLinkComponents\"\r\n                                [queryParams]=\"contextInformation.queryParams\"\r\n                                (click)=\"onNavigateToContext($event)\"\r\n                                routerLinkActive=\"active\"\r\n                                >{{ contextInformation.displayName }}</a\r\n                            >\r\n                        }\r\n                        @if (!contextInformation.routerLinkComponents) {\r\n                            <span class=\"context-information ms-1\">{{ contextInformation.displayName }}:</span>\r\n                        }\r\n                    </span>\r\n                }\r\n                <!-- post title not shown for plagiarism cases -->\r\n                @if (pageType !== PageType.PLAGIARISM_CASE_INSTRUCTOR && pageType !== PageType.PLAGIARISM_CASE_STUDENT) {\r\n                    <span>\r\n                        @if (posting.title?.length) {\r\n                            <span class=\"post-title ms-1\">{{ posting.title }}</span>\r\n                        }\r\n                    </span>\r\n                }\r\n            </div>\r\n            @if (!displayInlineInput) {\r\n                <div\r\n                    class=\"message-container post-content-padding\"\r\n                    [ngClass]=\"{ 'is-saved': isConsecutive() && posting.isSaved }\"\r\n                    [class.force-hover]=\"showDropdown\"\r\n                    (contextmenu)=\"onRightClick($event)\"\r\n                >\r\n                    <div class=\"message-content\" [ngClass]=\"{ 'mx-0': !isThreadSidebar }\">\r\n                        <jhi-posting-content\r\n                            [previewMode]=\"previewMode()\"\r\n                            [content]=\"posting.content\"\r\n                            [author]=\"posting.author\"\r\n                            [isEdited]=\"!!posting.updatedDate\"\r\n                            [posting]=\"posting\"\r\n                            [isReply]=\"false\"\r\n                            [isDeleted]=\"isDeleted\"\r\n                            [deleteTimerInSeconds]=\"deleteTimerInSeconds\"\r\n                            (onUndoDeleteEvent)=\"onDeleteEvent(false)\"\r\n                            (userReferenceClicked)=\"onUserReferenceClicked($event)\"\r\n                            (channelReferenceClicked)=\"onChannelReferenceClicked($event)\"\r\n                        />\r\n                        @if (originalPostDetails) {\r\n                            <jhi-forwarded-message [originalPostDetails]=\"originalPostDetails\" (onNavigateToPost)=\"onTriggerNavigateToPost(originalPostDetails)\" />\r\n                        }\r\n                        <div class=\"hover-actions\" [ngClass]=\"{ 'mb-2': previewMode() }\">\r\n                            @if (!previewMode()) {\r\n                                <!-- Post reactions (that appear when post is hovered) -->\r\n                                <jhi-posting-reactions-bar\r\n                                    [lastReadDate]=\"lastReadDate()\"\r\n                                    [isReadOnlyMode]=\"readOnlyMode()\"\r\n                                    [previewMode]=\"previewMode()\"\r\n                                    [course]=\"course\"\r\n                                    [posting]=\"posting\"\r\n                                    [(showAnswers)]=\"showAnswers\"\r\n                                    [sortedAnswerPosts]=\"sortedAnswerPosts\"\r\n                                    [isCommunicationPage]=\"isCommunicationPage\"\r\n                                    [isThreadSidebar]=\"isThreadSidebar\"\r\n                                    (openPostingCreateEditModal)=\"openCreateAnswerPostModal()\"\r\n                                    (openThread)=\"openThread.emit()\"\r\n                                    (isModalOpen)=\"displayInlineInput = true\"\r\n                                    (mayEditOutput)=\"onMayEdit($event)\"\r\n                                    (mayDeleteOutput)=\"onMayDelete($event)\"\r\n                                    (canPinOutput)=\"onCanPin($event)\"\r\n                                    [originalPostDetails]=\"originalPostDetails\"\r\n                                    (isDeleteEvent)=\"onDeleteEvent(true)\"\r\n                                    (onBookmarkClicked)=\"toggleSavePost()\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    @if (!isDeleted && displayInlineInput && !readOnlyMode()) {\r\n        <div class=\"post-content-padding\">\r\n            <jhi-message-inline-input [posting]=\"posting\" (isModalOpen)=\"displayInlineInput = false\" />\r\n        </div>\r\n    }\r\n    @if (!isDeleted) {\r\n        <div class=\"post-content-padding justify-content-between post-reactions-bar\" [ngClass]=\"{ 'mb-2': previewMode(), 'is-saved': posting.isSaved && isConsecutive() }\">\r\n            <!-- Post reactions -->\r\n            @if (!previewMode()) {\r\n                <jhi-posting-reactions-bar\r\n                    [lastReadDate]=\"lastReadDate()\"\r\n                    [isReadOnlyMode]=\"readOnlyMode()\"\r\n                    [previewMode]=\"previewMode()\"\r\n                    [posting]=\"posting\"\r\n                    [(showAnswers)]=\"showAnswers\"\r\n                    [sortedAnswerPosts]=\"sortedAnswerPosts\"\r\n                    [isCommunicationPage]=\"isCommunicationPage\"\r\n                    [isThreadSidebar]=\"isThreadSidebar\"\r\n                    (openPostingCreateEditModal)=\"openCreateAnswerPostModal()\"\r\n                    (closePostingCreateEditModal)=\"closeCreateAnswerPostModal()\"\r\n                    (openThread)=\"openThread.emit()\"\r\n                    (isModalOpen)=\"displayInlineInput = true\"\r\n                    [isEmojiCount]=\"true\"\r\n                    [hoverBar]=\"false\"\r\n                    (onBookmarkClicked)=\"toggleSavePost()\"\r\n                />\r\n            }\r\n        </div>\r\n    }\r\n</div>\r\n<jhi-posting-footer\r\n    #postFooter\r\n    [readOnlyMode]=\"readOnlyMode()\"\r\n    [modalRef]=\"modalRef()\"\r\n    [previewMode]=\"previewMode() || pageType === PageType.PLAGIARISM_CASE_STUDENT\"\r\n    [posting]=\"posting\"\r\n    [showAnswers]=\"showAnswers()\"\r\n    [isCommunicationPage]=\"isCommunicationPage\"\r\n    [isThreadSidebar]=\"isThreadSidebar\"\r\n    [sortedAnswerPosts]=\"sortedAnswerPosts\"\r\n    (openThread)=\"openThread.emit()\"\r\n    [lastReadDate]=\"lastReadDate()\"\r\n    (userReferenceClicked)=\"onUserReferenceClicked($event)\"\r\n    (channelReferenceClicked)=\"onChannelReferenceClicked($event)\"\r\n    [hasChannelModerationRights]=\"hasChannelModerationRights\"\r\n/>\r\n\r\n<!-- Right-Click Dropdown -->\r\n@if (showDropdown) {\r\n    <div [ngStyle]=\"{ position: 'fixed', 'top.px': dropdownPosition.y, 'left.px': dropdownPosition.x }\" class=\"dropdown-menu show\">\r\n        <button class=\"dropdown-item d-flex\" (click)=\"addReaction($event)\">\r\n            <fa-icon [icon]=\"faSmile\" class=\"item-icon\" />\r\n            <span jhiTranslate=\"artemisApp.metis.post.addReaction\"></span>\r\n        </button>\r\n        @if (canPin) {\r\n            <button class=\"dropdown-item d-flex\" (click)=\"togglePin()\">\r\n                <fa-icon [icon]=\"faThumbtack\" class=\"item-icon\" />\r\n                <span [jhiTranslate]=\"checkIfPinned() === DisplayPriority.PINNED ? 'artemisApp.metis.post.unpinMessage' : 'artemisApp.metis.post.pinMessage'\"></span>\r\n            </button>\r\n        }\r\n        @if (mayEdit) {\r\n            <button class=\"dropdown-item d-flex editIcon\" (click)=\"editPosting()\">\r\n                <fa-icon [icon]=\"faPencilAlt\" class=\"item-icon\" />\r\n                <span jhiTranslate=\"artemisApp.metis.post.editMessage\"></span>\r\n            </button>\r\n        }\r\n        @if (mayDelete) {\r\n            <button class=\"dropdown-item d-flex deleteIcon\" (click)=\"deletePost()\">\r\n                <fa-icon [icon]=\"faTrash\" class=\"item-icon\" />\r\n                <span jhiTranslate=\"artemisApp.metis.post.deleteMessage\"></span>\r\n            </button>\r\n        }\r\n        <button class=\"dropdown-item d-flex\" (click)=\"isCommunicationPage ? openThread.emit() : reactionsBarComponent()?.openAnswerView()\">\r\n            <fa-icon [icon]=\"faComments\" class=\"item-icon\" />\r\n            <span jhiTranslate=\"artemisApp.metis.post.replyMessage\"></span>\r\n        </button>\r\n        <button class=\"dropdown-item d-flex\" (click)=\"toggleSavePost()\">\r\n            <fa-icon [icon]=\"posting.isSaved ? faBookmark : farBookmark\" class=\"item-icon\" />\r\n            <span [jhiTranslate]=\"posting.isSaved ? 'artemisApp.metis.post.removeBookmarkPost' : 'artemisApp.metis.post.bookmarkPost'\"></span>\r\n        </button>\r\n        <button class=\"dropdown-item d-flex forward\" (click)=\"forwardMessage()\">\r\n            <fa-icon [icon]=\"faShare\" class=\"item-icon\" />\r\n            <span jhiTranslate=\"artemisApp.metis.post.forwardMessage\"></span>\r\n        </button>\r\n    </div>\r\n}\r\n\r\n<div #emojiPickerTrigger=\"cdkOverlayOrigin\" cdkOverlayOrigin [ngStyle]=\"{ position: 'fixed', 'top.px': clickPosition.y, 'left.px': clickPosition.x }\"></div>\r\n\r\n<ng-template\r\n    cdkConnectedOverlay\r\n    [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n    [cdkConnectedOverlayBackdropClass]=\"'cdk-overlay-transparent-backdrop'\"\r\n    [cdkConnectedOverlayOrigin]=\"emojiPickerTrigger\"\r\n    [cdkConnectedOverlayOpen]=\"showReactionSelector\"\r\n    (backdropClick)=\"toggleEmojiSelect()\"\r\n>\r\n    @if (!readOnlyMode()) {\r\n        <jhi-emoji-picker (emojiSelect)=\"selectReaction($event)\" />\r\n    }\r\n</ng-template>\r\n"],
  "mappings": "48FAeA,IAAaA,IAAkB,IAAA,CAAzB,MAAOA,CAAkB,CACnBC,KAAOC,EAAOC,EAAU,EAEzBC,YAAc,iCAGbC,MAAoD,CAAA,EAE5DC,MAAgB,CAAA,EAEhBC,UAAUC,EAAW,CACjB,GAAI,KAAKH,MAAMG,CAAG,EACd,OAAO,KAAKH,MAAMG,CAAG,EAIzB,IAAMC,EAAaC,mBAAmBF,CAAG,EACnCG,EAAS,IAAIC,GAAU,EAAGC,IAAI,MAAOJ,CAAU,EAE/CK,EAAW,KAAKb,KAAKc,IAAiB,KAAKX,YAAa,CAAEO,OAAAA,CAAM,CAAE,EAAEK,KAAKC,GAAY,CAAC,CAAC,EAE7F,YAAKZ,MAAMG,CAAG,EAAIM,EACXA,CACX,4CAvBSd,EAAkB,8BAAlBA,EAAkBkB,QAAlBlB,EAAkBmB,UAAAC,WADL,MAAM,CAAA,SACnBpB,CAAkB,GAAA,ECFxB,IAAMqB,GAAW,gDAGXC,IAAc,IAAA,CAArB,MAAOA,CAAc,CAMvBC,KAAKC,EAAY,CACb,IAAMC,EAAwB,CAAA,EAG1BC,EACJ,MAAQA,EAAQL,GAASM,KAAKH,CAAI,KAAO,MAAM,CAC3C,IAAMI,EAAMF,EAAM,CAAC,EACbG,EAAQH,EAAMI,MACdC,EAAMF,EAAQD,EAAII,OAGlBC,EAAYT,EAAKK,EAAQ,CAAC,IAAM,KAAOL,EAAKO,CAAG,IAAM,IACrDG,EAAqB,CACvBC,KAAM,MACNC,MAAOR,EACPS,OAAQ,GACRC,KAAMV,EACNC,MAAAA,EACAE,IAAAA,EACAQ,qBAAsBN,GAGrBA,GACDR,EAAce,KAAKN,CAAY,CAEvC,CACA,OAAOT,CACX,4CAjCSH,EAAc,8BAAdA,EAAcmB,QAAdnB,EAAcoB,UAAAC,WADD,MAAM,CAAA,SACnBrB,CAAc,GAAA,ECN3B,IAAMsB,GAAqB,IAGLC,IAA0B,IAAA,CAA1C,MAAgBA,CAA0B,CAClCC,aAAeC,EAAOC,CAAY,EAClCC,aAAeF,EAAOG,EAAQ,EAC9BC,YAAcJ,EAAOK,EAAW,EAEjCC,QACCC,SAA4B,IAAIC,GAChCC,YAAc,IAAID,GAE5BE,SACAC,UAAY,GACZC,iBAAmBf,GACnBgB,aAAeC,GAAqBC,OACpCC,QACAC,UAESC,SAAWC,GAEpB,IAAIC,UAAQ,CACR,OAAO,KAAKd,QAAQe,GAAKF,GAAgBG,OAASH,GAAgBI,MACtE,CAKAC,UAAQ,CACJ,KAAKR,QAAU,KAAKV,QAAQU,SAAW,EAC3C,CAKAS,aAAW,CACP,KAAKT,QAAU,KAAKV,SAASU,SAAW,GACxC,KAAKU,eAAc,CACvB,CAMAC,SAAO,CACC,KAAKhB,WACL,KAAKM,UAAUW,QACf,KAAKjB,UAAY,GACb,KAAKS,WAAaD,GAAgBG,OAClC,KAAKO,cAAa,EACX,KAAKT,WAAaD,GAAgBI,QACzC,KAAKO,cAAa,EAG9B,4CAnDkBhC,EAA0B,4BAA1BA,EAA0BiC,OAAA,CAAAzB,QAAA,SAAA,EAAA0B,QAAA,CAAAzB,SAAA,WAAAE,YAAA,aAAA,EAAAwB,SAAA,CAAAC,CAAA,CAAA,CAAA,SAA1BpC,CAA0B,GAAA,2BCR1BqC,IAAmD,IAAA,CAAnE,MAAgBA,UAA2DC,EAA6B,CAC9EC,cAC5BC,WAKAC,UAAQ,CACJ,MAAMA,SAAQ,EACd,KAAKC,iBAAgB,CACzB,CAKAC,aAAW,CACP,MAAMA,YAAW,EACjB,KAAKD,iBAAgB,CACzB,iEAlBkBL,CAA+B,IAAAO,GAA/BP,CAA+B,CAAA,CAAA,GAAA,4BAA/BA,EAA+BQ,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,uFAA/BT,CAAmD,GAAA,ECUzE,IAAaW,IAAuB,IAAA,CAA9B,MAAOA,UAA+BC,EAAgB,CAQnCC,aACAC,eARrB,OAAgBC,GAAK,2BACrB,OAAgBC,oBAAsB,IAEtCC,eACAC,6BAEAC,YACqBN,EACAC,EAA8B,CAE/C,MAAMH,EAAuBI,GAAI,kCAAmCK,EAAS,EAH5D,KAAAP,aAAAA,EACA,KAAAC,eAAAA,CAGrB,CAOAO,SAASC,EAAoBC,EAAkC,CAC3D,MAAMF,SAASC,EAAQC,CAAgB,EACvC,KAAKL,6BAA+B,KAAKM,0CACrCF,EACA,KAAKG,cAAcC,KAAK,IAAI,EAC5B,CAACC,EAA8BC,IAC3B,IAAIC,GAAyB,IAAIF,EAAQG,IAAI,GAAI,KAAKC,MAAO,YAAYJ,EAAQG,IAAI,IAAIH,EAAQK,EAAE,cAAeC,GAA6BC,QAASN,CAAK,EACjK,GAAG,CAEX,CAMAO,IAAIb,EAAkB,CAClB,KAAKc,8BAA8Bd,EAAQX,EAAuBK,mBAAmB,EACrFM,EAAOe,kBAAiB,EACxBf,EAAOgB,MAAK,CAChB,CAEMb,eAAa,QAAAc,GAAA,sBACf,GAAI,CAAC,KAAKtB,eAAgB,CACtB,IAAMuB,EAAW,MAAMC,GAAe,KAAK3B,eAAe4B,0BAA0B,KAAK7B,aAAa8B,UAAS,EAAGX,EAAG,CAAC,EACtH,KAAKf,eAAiBuB,EAASI,IACnC,CACA,OAAO,KAAK3B,cAChB,GAEA4B,SAAO,CACH,MAAMA,QAAO,EACb,KAAK3B,8BAA8B2B,QAAO,EAC1C,KAAK5B,eAAiB6B,MAC1B,SApDSnC,CAAuB,GAAA,ECCpC,IAAaoC,IAAkB,IAAA,CAAzB,MAAOA,UAA0BC,EAAgB,CAO9BC,wBACAC,aAPrBC,6BAEA,OAAgBC,GAAK,sBACrB,OAAgBC,oBAAsB,IAEtCC,YACqBL,EACAC,EAA0B,CAE3C,MAAMH,EAAkBK,GAAI,+BAAgCG,EAAI,EAH/C,KAAAN,wBAAAA,EACA,KAAAC,aAAAA,CAGrB,CAOAM,SAASC,EAAoBC,EAAkC,CAC3D,MAAMF,SAASC,EAAQC,CAAgB,EACvC,KAAKP,6BAA+B,KAAKQ,0CACrCF,EACA,KAAKG,uBAAuBC,KAAK,IAAI,EACrC,CAACC,EAA2BC,IACxB,IAAIC,GAAyB,IAAIF,EAAKG,IAAI,GAAI,KAAKC,MAAO,SAASJ,EAAKG,IAAI,IAAIH,EAAKK,KAAK,WAAYC,GAA6BC,KAAMN,CAAK,EAClJ,IACA,EAAI,CAEZ,CAMAO,IAAIb,EAAkB,CAClB,KAAKc,8BAA8Bd,EAAQV,EAAkBM,mBAAmB,EAChFI,EAAOe,kBAAiB,EACxBf,EAAOgB,MAAK,CAChB,CAEAC,SAAO,CACH,MAAMA,QAAO,EACb,KAAKvB,8BAA8BuB,QAAO,CAC9C,CAEMd,uBAAuBe,EAAkB,QAAAC,GAAA,sBAE3C,OADiB,MAAMC,GAAe,KAAK5B,wBAAwB6B,6BAA6B,KAAK5B,aAAa6B,UAAS,EAAGC,GAAKL,CAAU,CAAC,GAC9HM,MAAQ,CAAA,CAC5B,WAhDSlC,CAAkB,GAAA,ECJ/B,IAAamC,IAAwB,IAAA,CAA/B,MAAOA,UAAgCC,EAAiC,CAM7CC,aAL7B,OAAgBC,GAAK,4BACrB,OAAgBC,oBAAsB,YAEtCC,6BAEAC,YAA6BJ,EAA0B,CACnD,MAAMF,EAAwBG,GAAI,kCAAkC,EAD3C,KAAAD,aAAAA,CAE7B,CAOAK,SAASC,EAAoBC,EAAkC,CAC3D,MAAMF,SAASC,EAAQC,CAAgB,EACvC,IAAMC,EAAY,KAAKR,aAAaS,UAAS,EAAGD,WAAa,CAAA,EAC7D,KAAKE,UACDF,EAAUG,IAAKC,IAAc,CACzBC,GAAID,EAASC,GAAIC,SAAQ,EACzBC,MAAOH,EAASI,MAChBC,KAAML,EAASK,MACjB,CAAC,EAGP,KAAKd,6BAA+B,KAAKe,0CACrCZ,EACA,IAAMa,QAAQC,QAAQ,KAAKC,UAAS,CAAE,EACtC,CAACC,EAAiBC,IACd,IAAIC,GACA,aAAaF,EAAKP,KAAK,GACvBO,EAAKL,KACL,IAAIK,EAAKL,IAAI,IAAIK,EAAKP,KAAK,IAAI,KAAKf,aAAayB,mBAAmBH,EAAKT,EAAE,CAAC,MAAMS,EAAKL,IAAI,IAC3FS,GAA6BC,QAC7BJ,CAAK,EAEb,GAAG,CAEX,CAMAK,IAAItB,EAAkB,CAClB,KAAKuB,8BAA8BvB,EAAQR,EAAwBI,mBAAmB,EACtFI,EAAOwB,kBAAiB,EACxBxB,EAAOyB,MAAK,CAChB,CAEAC,SAAO,CACH,MAAMA,QAAO,EACb,KAAK7B,8BAA8B6B,QAAO,CAC9C,CAEAC,sBAAoB,CAChB,MAAO,YACX,SA1DSnC,CAAwB,GAAA,ECArC,IAAaoC,IAAmB,IAAA,CAA1B,MAAOA,UAA2BC,EAAiC,CAMxCC,aAL7B,OAAgBC,GAAK,uBACrB,OAAgBC,oBAAsB,OAEtCC,6BAEAC,YAA6BJ,EAA0B,CACnD,MAAMF,EAAmBG,GAAI,6BAA6B,EADjC,KAAAD,aAAAA,CAE7B,CAOAK,SAASC,EAAoBC,EAAkC,CAC3D,MAAMF,SAASC,EAAQC,CAAgB,EACvC,IAAMC,EAAO,KAAKR,aAAaS,UAAS,EAAGD,MAAQ,CAAA,EACnD,KAAKE,UACDF,EAAKG,IAAKC,IAAS,CACfC,GAAID,EAAIC,GAAIC,SAAQ,EACpBC,MAAOH,EAAII,cACXC,KAAM,OACR,CAAC,EAGP,KAAKd,6BAA+B,KAAKe,0CACrCZ,EACA,IAAMa,QAAQC,QAAQ,KAAKC,UAAS,CAAE,EACtC,CAACC,EAAiBC,IACd,IAAIC,GACA,QAAQF,EAAKP,KAAK,GAClBO,EAAKL,KACL,IAAIK,EAAKL,IAAI,IAAIK,EAAKP,KAAK,IAAI,KAAKf,aAAayB,cAAa,CAAE,UAAUH,EAAKT,EAAE,MAAMS,EAAKL,IAAI,IAChGS,GAA6BC,QAC7BJ,CAAK,EAEb,GAAG,CAEX,CAMAK,IAAItB,EAAkB,CAClB,KAAKuB,8BAA8BvB,EAAQR,EAAmBI,mBAAmB,EACjFI,EAAOwB,kBAAiB,EACxBxB,EAAOyB,MAAK,CAChB,CAEAC,SAAO,CACH,MAAMA,QAAO,EACb,KAAK7B,8BAA8B6B,QAAO,CAC9C,CAEAC,sBAAoB,CAChB,MAAO,OACX,SA1DSnC,CAAmB,GAAA,ECJhC,IAAaoC,IAA0B,IAAA,CAAjC,MAAOA,CAA0B,CACnCC,KAAOC,EAAmBC,EAAe,6CADhCH,EAA0B,2BAA1BA,EAA0BI,UAAA,CAAA,CAAA,cAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,MAAA,GAAA,EAAA,YAAA,EAAA,KAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICRvCE,EAAA,EAAA,KAAA,EACIC,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACJD,EAAA,EAAA;CAAA,EAAAE,EAAA,EACAF,EAAA,EAAA;CAAA,SAFSG,EAAA,CAAA,EAAAC,GAAA,aAAA,GAAA,IAAA,EAA6CC,EAAA,MAAAP,EAAAT,KAAAiB,iBAAAC,EAAA,6BDOzCnB,CAA0B,GAAA,EEDvC,IAAaoB,IAA0B,IAAA,CAAjC,MAAOA,CAA0B,CAClBC,gBAAkBC,EAAOC,EAAsB,EAUhEC,UACIC,EACAC,EAAyB,GACzBC,EAAwCC,OACxCC,EAA8CD,OAAS,CAEvD,OAAO,KAAKP,gBAAgBS,2BAA2BL,EAAUC,EAAwBC,EAAiBE,CAAqB,CACnI,4CAlBST,EAA0B,2DAA1BA,EAA0BW,KAAA,EAAA,CAAA,SAA1BX,CAA0B,GAAA,4BENnCY,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,gCAKJD,EAAA,EAAA;CAAA,kBAFQE,EAAA,EAAAC,EAAA,YAAAC,GAAA,EAAA,EAAAC,EAAAC,gCAAA,GAAAD,EAAAE,gBAAAF,EAAAG,qBAAA,EAAAC,EAAA,6BAIJT,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EACIV,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EAAqFD,EAAA,CAAA,EACzFW,EAAA,EACJX,EAAA,EAAA;CAAA,0BAHyBE,EAAA,EAAAC,EAAA,cAAAS,EAAAP,EAAAQ,mBAAA,IAAA,KAAA,KAAAD,EAAAE,eAAA,EAAoD,eAAAC,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAAC,WAAA,EAC/Cd,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAY,eAAAC,EAAAb,EAAAQ,mBAAA,IAAA,KAAA,KAAAK,EAAAC,aAAA,CAAA,EAA+DjB,EAAA,EAAAkB,EAAA,IAAAC,EAAAhB,EAAAQ,mBAAA,IAAA,KAAA,KAAAQ,EAAAC,aAAA;KAAA,6BAIzFtB,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EAAsBV,EAAA,EAAA,GAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EAAqFD,EAAA,CAAA,EAAyCW,EAAA,EACxJX,EAAA,EAAA;CAAA,sBADgDE,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAY,eAAAL,EAAAP,EAAAQ,mBAAA,IAAA,KAAA,KAAAD,EAAAO,aAAA,CAAA,EAA+DjB,EAAA,EAAAkB,EAAA,IAAAL,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAAO,aAAA,GAAA,sCAG3GtB,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EAAqBa,EAAA,QAAA,UAAA,CAAA,IAAAR,EAAAS,EAAAC,CAAA,EAAA,IAAApB,EAAAqB,EAAA,EAAA,OAAAC,EAAStB,EAAAuB,sBAAAb,EAAqBV,EAAAQ,mBAAA,IAAoB,MAAAE,EAAAC,aAAA,KAAA,KAAAD,EAAAC,YAAAa,kBAAA,CAAkC,CAAA,CAAA,EACrG7B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EAAsCD,EAAA,CAAA,EAC1CW,EAAA,EACJX,EAAA,EAAA;CAAA,sBAF8BE,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAyB,IAAA,EAAgB5B,EAAA,EAAAkB,EAAA,IAAAL,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAAO,aAAA;KAAA,sCAI1CtB,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EAAqBa,EAAA,QAAA,UAAA,CAAA,IAAAR,EAAAS,EAAAO,CAAA,EAAA,IAAA1B,EAAAqB,EAAA,EAAA,OAAAC,EAAStB,EAAA2B,yBAAAjB,EAAwBV,EAAAQ,mBAAA,IAAoB,MAAAE,EAAAC,aAAA,KAAA,KAAAD,EAAAC,YAAAiB,SAAA,CAAyB,CAAA,CAAA,EAC/FjC,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EAA2CD,EAAA,CAAA,EAC/CW,EAAA,EACJX,EAAA,EAAA;CAAA,sBAF8BE,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAA6B,SAAA,EAAqBhC,EAAA,EAAAkB,EAAA,IAAAL,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAAO,aAAA;KAAA,sCAI/CtB,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EAAqBa,EAAA,QAAA,UAAA,CAAA,IAAAR,EAAAS,EAAAW,CAAA,EAAA,IAAA9B,EAAAqB,EAAA,EAAA,OAAAC,EAAStB,EAAA+B,iBAAArB,EAAeV,EAAAQ,mBAAA,IAAoB,KAAA,KAAAE,EAAAsB,wBAA2B,EAAE,CAAC,CAAA,CAAA,EAC3FrC,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EAAwCD,EAAA,CAAA,EAC5CW,EAAA,EACJX,EAAA,EAAA;CAAA,sBAF8BE,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAiC,MAAA,EAAkBpC,EAAA,EAAAkB,EAAA,IAAAL,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAAO,aAAA;KAAA,sCAOhCtB,EAAA,EAAA;iBAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EAKIa,EAAA,QAAA,UAAA,CAAAC,EAAAe,CAAA,EAAA,IAAAlC,EAAAqB,EAAA,CAAA,EAAA,OAAAC,EAAStB,EAAAmC,oBAAA,CAAqB,CAAA,CAAA,EALlC7B,EAAA,EASJX,EAAA,EAAA;aAAA,2BAPQE,EAAA,EAAAC,EAAA,OAAAY,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAA0B,iBAAAC,EAAA,EAA8C,OAAAxB,EAAAb,EAAAQ,mBAAA,IAAA,KAAA,KAAAK,EAAAI,YAAA,EACJ,SAAAD,EAAAhB,EAAAQ,mBAAA,IAAA,KAAA,KAAAQ,EAAAC,YAAA,6BASlDtB,EAAA,EAAA;aAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EACIV,EAAA,EAAA;iBAAA,EAAAU,EAAA,EAAA,KAAA,CAAA,EAAsBT,EAAA,EAAA,UAAA,CAAA,EAAuC,EAAA,OAAA,CAAA,EAA4EU,EAAA,EAC7IX,EAAA,EAAA;aAAA,EAAAW,EAAA,EACJX,EAAA,EAAA;SAAA,mBAFoDE,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAsC,KAAA,sCAhBxD3C,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EACIV,EAAA,EAAA;SAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EAAqBa,EAAA,QAAA,UAAA,CAAA,IAAAR,EAAAS,EAAAoB,CAAA,EAAA,IAAAvC,EAAAqB,EAAA,EAAA,OAAAC,EAAStB,EAAAwC,eAAA9B,EAAaV,EAAAQ,mBAAA,IAAoB,KAAA,KAAAE,EAAA0B,mBAAsB,EAAE,CAAC,CAAA,CAAA,EACpFzC,EAAA,EAAA;aAAA,EAAA8C,EAAA,EAAAC,GAAA,EAAA,CAAA,EAWJpC,EAAA,EACAX,EAAA,EAAA;SAAA,EAAA8C,EAAA,EAAAE,GAAA,EAAA,CAAA,EAKJrC,EAAA,EACJX,EAAA,EAAA;CAAA,sBAlBYE,EAAA,CAAA,EAAA+C,GAAArC,EAAAP,EAAAQ,mBAAA,IAAA,MAAAD,EAAA6B,kBAAA,CAAApC,EAAA6C,cAAA,EAAA,EAAA,EAYJhD,EAAA,CAAA,EAAA+C,EAAA5C,EAAA6C,cAAA,EAAA,EAAA,sCAWIlD,EAAA,EAAA;aAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EAAqBa,EAAA,QAAA,UAAA,CAAA,IAAAL,EAAAM,EAAA2B,CAAA,EAAA,IAAA9C,EAAAqB,EAAA,CAAA,EAAA,OAAAC,EAAStB,EAAAwC,eAAA3B,EAAab,EAAAQ,mBAAA,IAAoB,KAAA,KAAAK,EAAAkC,mBAAsB,EAAE,CAAC,CAAA,CAAA,EACpFpD,EAAA,EAAA;iBAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EAKIa,EAAA,QAAA,UAAA,CAAAC,EAAA2B,CAAA,EAAA,IAAA9C,EAAAqB,EAAA,CAAA,EAAA,OAAAC,EAAStB,EAAAmC,oBAAA,CAAqB,CAAA,CAAA,EALlC7B,EAAA,EASJX,EAAA,EAAA;aAAA,EAAAW,EAAA,EACJX,EAAA,EAAA;SAAA,2BARYE,EAAA,CAAA,EAAAC,EAAA,OAAAY,EAAAV,EAAAQ,mBAAA,IAAA,KAAA,KAAAE,EAAAqC,iBAAAV,EAAA,EAA8C,OAAAxB,EAAAb,EAAAQ,mBAAA,IAAA,KAAA,KAAAK,EAAAI,YAAA,EACJ,SAAAD,EAAAhB,EAAAQ,mBAAA,IAAA,KAAA,KAAAQ,EAAAC,YAAA,6BAQlDtB,EAAA,EAAA;aAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EACIV,EAAA,EAAA;iBAAA,EAAAU,EAAA,EAAA,KAAA,CAAA,EAAsBT,EAAA,EAAA,UAAA,CAAA,EAAuC,EAAA,OAAA,EAAA,EAA4EU,EAAA,EAC7IX,EAAA,EAAA;aAAA,EAAAW,EAAA,EACJX,EAAA,EAAA;SAAA,mBAFoDE,EAAA,CAAA,EAAAC,EAAA,OAAAE,EAAAsC,KAAA,6BAfxD3C,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,KAAA,EACIV,EAAA,EAAA;SAAA,EAAA8C,EAAA,EAAAO,GAAA,EAAA,CAAA,EAAgE,EAAAC,GAAA,EAAA,CAAA,EAiBpE3C,EAAA,EACJX,EAAA,EAAA;CAAA,oBAnBSE,EAAA,EAAAqD,GAAA,cAAA,MAAA,EAA4B,YAAA,IAAA,IAAA,EAC7BrD,EAAA,CAAA,EAAA+C,GAAA/B,EAAAb,EAAAQ,mBAAA,IAAA,MAAAK,EAAAkC,kBAAA,CAAA/C,EAAA6C,cAAA,EAAA7C,EAAA6C,cAAA,EAAA,EAAA,6BAqBJlD,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,gCAKJD,EAAA,EAAA;CAAA,kBAFQE,EAAA,EAAAC,EAAA,YAAAC,GAAA,EAAA,EAAAC,EAAAmD,+BAAA,GAAAnD,EAAAE,gBAAAF,EAAAG,qBAAA,EAAAC,EAAA,GD7CR,IAAagD,IAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAC5BC,YAAcC,EAAOC,EAAW,EAChCC,OAASF,EAAOG,EAAS,EACzBC,eAAiBJ,EAAOK,EAAc,EAE9CnD,mBAAqBoD,EAAK,EAC1BC,qBAAuBC,EAAM,EAC7BC,wBAA0BD,EAAM,EAEhCjB,cAAgB,GAChBmB,wBAA0B,GAG1B9D,gBAA4B,CAAC,IAAK,IAAK,KAAM,aAAc,OAAQ,MAAO,KAAM,IAAK,MAAO,OAAQ,IAAK,MAAO,QAAS,IAAK,OAAQ,SAAU,MAAO,KAAK,EAC5JC,sBAAkC,CAAC,MAAM,EAGtB8B,OAASA,GACTK,MAAQA,GACRb,KAAOA,GACPI,UAAYA,GACZoC,WAAaA,GAEbC,cAAgBA,EACnCjE,gCACAkD,+BAEAgB,UAAQ,CACJ,KAAKC,eAAc,CACvB,CAEAC,aAAW,CACP,KAAKD,eAAc,CACvB,CAOArC,eAAeuC,EAAqB,CAChC,KAAKjB,YAAYkB,aAAaD,CAAa,CAC/C,CAEAnC,qBAAmB,CACf,KAAKU,cAAgB,EACzB,CAEAuB,gBAAc,CACN,KAAK5D,mBAAkB,GAAIgE,yBAC3B,KAAKvE,gCAAkC,KAAKwE,mBAAmB,KAAKjE,mBAAkB,GAAIgE,wBAA0B,EAAE,EACtH,KAAKvE,gCAAkC,KAAKyE,oBAAoB,KAAKzE,+BAA+B,GAGpG,KAAKO,mBAAkB,GAAImE,wBAC3B,KAAKxB,+BAAiC,KAAKsB,mBAAmB,KAAKjE,mBAAkB,GAAImE,uBAAyB,EAAE,EACpH,KAAKxB,+BAAiC,KAAKuB,oBAAoB,KAAKvB,8BAA8B,EAE1G,CAEAsB,mBAAmBG,EAAe,CAC9B,OAAOA,EAAQC,QAAQ,iBAAkB,SAAS,CACtD,CAEAH,oBAAoBE,EAAe,CAC/B,OAAOA,EAAQC,QAAQ,UAAW,MAAM,CAC5C,CAOArC,aAAaJ,EAAwB,CACjC,KAAKoB,OAAOsB,KAAKC,GAA4B,CACzCC,KAAM,CAAE5C,iBAAAA,CAAgB,EACxB6C,SAAU,OACb,CACL,CAMArE,cAAcsE,EAAwB,CAClC,OAAQA,EAAS,CACb,KAAKhB,EAAciB,KACf,OAAOC,GACX,KAAKlB,EAAcmB,QACf,OAAOC,GACX,KAAKpB,EAAcqB,YACf,OAAOC,GACX,KAAKtB,EAAcuB,SACf,OAAOC,GACX,KAAKxB,EAAcyB,KACf,OAAOC,GACX,KAAK1B,EAAc2B,KACf,OAAOC,GACX,KAAK5B,EAAc6B,YACf,OAAOC,GACX,KAAK9B,EAAc+B,MACf,OAAOhE,GACX,KAAKiC,EAAcgC,IACf,OAAOjC,GACX,QACI,OAAOkC,EACf,CACJ,CAOA5E,qBAAqBC,EAAsC,CACnD,CAAC,KAAKwC,yBAA2BxC,GAAsBA,IAAuB,KAAKkC,eAAe0C,cAAcC,QAChH,KAAKrC,wBAA0B,GAC/B,KAAKH,qBAAqByC,KAAK9E,CAAkB,EAEzD,CAOAG,wBAAwBC,EAA6B,CAC7CA,GACA,KAAKmC,wBAAwBuC,KAAK1E,CAAS,CAEnD,4CAlISwB,EAA2B,2BAA3BA,EAA2BmD,UAAA,CAAA,CAAA,0BAAA,CAAA,EAAAC,OAAA,CAAAhG,mBAAA,CAAA,EAAA,oBAAA,CAAA,EAAAiG,QAAA,CAAA5C,qBAAA,uBAAAE,wBAAA,yBAAA,EAAA2C,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,mBAAA,EAAA,cAAA,WAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,aAAA,aAAA,EAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,OAAA,EAAA,CAAA,SAAA,OAAA,QAAA,OAAA,EAAA,YAAA,aAAA,SAAA,OAAA,OAAA,EAAA,QAAA,MAAA,MAAA,OAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,eAAA,iDAAA,EAAA,CAAA,eAAA,iDAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,GClCxCvE,EAAA,EAAAyE,GAAA,EAAA,CAAA,EAAoD,EAAAC,GAAA,EAAA,CAAA,EAOP,EAAAC,GAAA,EAAA,CAAA,EAK+D,EAAAC,GAAA,EAAA,CAAA,EAG1C,EAAAC,GAAA,EAAA,CAAA,EAKG,EAAAC,GAAA,EAAA,CAAA,EAKlB,EAAAC,GAAA,EAAA,CAAA,EAKL,EAAAC,GAAA,EAAA,CAAA,EAuBA,EAAAC,GAAA,EAAA,CAAA,gCArD9C9E,GAAA+E,EAAAV,EAAAzG,mBAAA,IAAA,MAAAmH,EAAAnD,uBAAA,EAAA,EAAA,EAOA3E,EAAA,EAAA+C,GAAArC,EAAA0G,EAAAzG,mBAAA,IAAA,MAAAD,EAAAE,gBAAA,EAAA,EAAA,EAKAZ,EAAA,EAAA+C,IAAAlC,EAAAuG,EAAAzG,mBAAA,IAAA,KAAA,KAAAE,EAAAI,iBAAAmG,EAAA/C,cAAAiB,MAAA,GAAAzE,EAAAuG,EAAAzG,mBAAA,IAAA,MAAAE,EAAAD,iBAAA,EAAA,EAAA,EAGAZ,EAAA,EAAA+C,IAAA/B,EAAAoG,EAAAzG,mBAAA,IAAA,KAAA,KAAAK,EAAAC,iBAAAmG,EAAA/C,cAAA0D,KAAA,EAAA,EAAA,EAKA/H,EAAA,EAAA+C,IAAA5B,EAAAiG,EAAAzG,mBAAA,IAAA,KAAA,KAAAQ,EAAAF,iBAAAmG,EAAA/C,cAAA2D,QAAA,EAAA,EAAA,EAKAhI,EAAA,EAAA+C,GAAAkF,EAAAb,EAAAzG,mBAAA,IAAA,MAAAsH,EAAA9F,sBAAA,EAAA,EAAA,EAKAnC,EAAA,EAAA+C,GAAAmF,GAAAd,EAAAzG,mBAAA,IAAA,MAAAuH,GAAA3F,iBAAA,EAAA,EAAA,EAuBAvC,EAAA,EAAA+C,GAAAoF,GAAAf,EAAAzG,mBAAA,IAAA,MAAAwH,GAAAjF,iBAAA,EAAA,EAAA,EAsBAlD,EAAA,EAAA+C,GAAAqF,GAAAhB,EAAAzG,mBAAA,IAAA,MAAAyH,GAAAtD,sBAAA,EAAA,EAAA,kBD3CcuD,GAAYC,EAAiBC,GAA4BC,CAAkB,EAAAC,OAAA,CAAA,6rDAAA,CAAA,CAAA,SAE5ElF,CAA2B,GAAA,yBGhChCmF,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EACAA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,6BAPAA,EAAA,EAAA;KAAA,EAAAI,EAAA,EAAAC,GAAA,GAAA,CAAA,kBAAAC,EAAA,EAAAC,EAAAC,EAAAC,SAAA,GAAA,CAAA,sCAcgBT,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,mBAAA,CAAA,kDAGIS,EAAA,eAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAJ,EAAAK,EAAA,CAAA,EAAA,OAAAC,EAAgBN,EAAAO,kBAAAP,EAAAQ,WAAA,CAA8B,CAAA,CAAA,EAHlDb,EAAA,EASJH,EAAA,EAAA;iBAAA,qBALQM,EAAA,EAAAW,EAAA,UAAA,wBAAA,EAAoC,cAAAT,EAAAU,OAAA,EACb,iBAAAC,EAAA,EAAA,EAAA,oCAAA,CAAA,EACmD,iBAAAA,EAAA,EAAA,EAAA,2CAAA,CAAA,6BAU1EnB,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACJF,EAAA,EAAA;yBAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;qBAAA,mBAFaM,EAAA,CAAA,EAAAW,EAAA,MAAAT,EAAAQ,YAAAI,MAAAC,EAAA,6BArBzBrB,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EACAA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAI,EAAA,EAAAkB,GAAA,EAAA,CAAA,EAWArB,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,KAAA,CAAA,EAA0BD,EAAA,EAAA,EAAuBG,EAAA,EACjDH,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,IAAA,CAAA,EAA+BD,EAAA,EAAA,EAA6BG,EAAA,EAChEH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;qBAAA,EAAAI,EAAA,GAAAmB,GAAA,EAAA,CAAA,EAKJpB,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,mBAxBYM,EAAA,CAAA,EAAAC,EAAAC,EAAAgB,uBAAA,EAAA,EAAA,EAakClB,EAAA,CAAA,EAAAmB,EAAAjB,EAAAQ,YAAAU,KAAA,EACKpB,EAAA,CAAA,EAAAmB,EAAAjB,EAAAQ,YAAAW,WAAA,EAEnCrB,EAAA,CAAA,EAAAC,EAAAC,EAAAQ,YAAAI,OAAA,CAAAZ,EAAAoB,SAAA,GAAA,EAAA,6BApBhB5B,EAAA,EAAA;KAAA,EAAAI,EAAA,EAAAyB,GAAA,GAAA,CAAA,kBAAAvB,EAAA,EAAAC,EAAAC,EAAAQ,aAAAR,EAAAQ,YAAAc,qBAAA,EAAA,EAAA,GDMJ,IAAaC,IAAoB,IAAA,CAA3B,MAAOA,CAAoB,CACrBC,aAAeC,EAAOC,CAAY,EAEjClB,YACAmB,QACAC,qBACAC,OACA5B,SACA6B,QACAV,SAETJ,uBAEAN,QAAUA,GAEVqB,UAAQ,CACJ,KAAKf,uBAAyB,KAAKQ,aAAaQ,2BAA2B,KAAKL,OAAQ,CAC5F,CAOApB,kBAAkBC,EAAwB,CACtC,IAAMyB,EAAiBzB,EAAY0B,IAEnC,GAAI,KAAKP,QAAS,CAEd,IAAIQ,EACAC,EAAkB,KAAKT,QAAQU,QACnC,MAAQF,EAAQG,GAASC,KAAKH,CAAe,KAAO,MAAM,CACtD,IAAMF,EAAMC,EAAM,CAAC,EACbK,EAAQL,EAAMM,MACdC,EAAMF,EAAQN,EAAIS,QAEpBT,IAAQD,GAAkBC,EAAIU,SAASX,CAAc,KAErDG,EAAkBA,EAAgBS,UAAU,EAAGL,CAAK,EAAI,IAAIN,CAAG,IAAME,EAAgBS,UAAUH,CAAG,EAE1G,CAEA,KAAKf,QAAQU,QAAUD,EAEnB,KAAKN,QACL,KAAKN,aAAasB,iBAAiB,KAAKnB,OAAO,EAAEoB,UAAU,CACvDC,KAAMA,IAAK,CAAE,EAChB,EAED,KAAKxB,aAAayB,WAAW,KAAKtB,OAAO,EAAEoB,UAAU,CACjDC,KAAMA,IAAK,CAAE,EAChB,CAET,CACJ,4CAtDSzB,EAAoB,2BAApBA,EAAoB2B,UAAA,CAAA,CAAA,kBAAA,CAAA,EAAAC,OAAA,CAAA3C,YAAA,cAAAmB,QAAA,UAAAC,qBAAA,uBAAAC,OAAA,SAAA5B,SAAA,WAAA6B,QAAA,UAAAV,SAAA,UAAA,EAAAgC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,mBAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,mBAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,eAAA,EAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,WAAA,KAAA,EAAA,eAAA,EAAA,eAAA,UAAA,cAAA,iBAAA,gBAAA,EAAA,CAAA,EAAA,eAAA,EAAA,CAAA,MAAA,gBAAA,EAAA,KAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GChBjC5D,EAAA,EAAA8D,GAAA,EAAA,CAAA,EAAsE,EAAAC,GAAA,EAAA,CAAA,OAAtE5D,EAAA,CAAA0D,EAAAjD,aAAA,CAAAiD,EAAA5B,QAAA4B,EAAA7B,qBAAA,EAAA,CAAA,iBDccgC,GAAsBC,EAASC,CAAoB,EAAAC,OAAA,CAAA,+iDAAA,CAAA,CAAA,SAEpDxC,CAAoB,GAAA,4BGf7ByC,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,mBAAA,CAAA,EASJF,EAAA,EAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;CAAA,gCATYI,EAAA,CAAA,EAAAC,EAAA,cAAAC,CAAA,EAAuB,uBAAAC,EAAAC,qBAAA,CAAA,EACwB,WAAAD,EAAAE,SAAA,CAAA,EACxB,SAAAF,EAAAG,OAAA,CAAA,EACJ,UAAAH,EAAAI,QAAA,CAAA,EACE,UAAAJ,EAAAK,QAAA,CAAA,EACA,WAAAL,EAAAM,SAAA,CAAA,GDMjC,IAAaC,IAA6B,IAAA,CAApC,MAAOA,CAA6B,CACrBC,mBAAyCC,EAAOC,EAAkB,EAClEC,eAAiCF,EAAOG,EAAc,EAE9DC,KAAOC,EAAK,EACZC,OAASD,EAAK,EACdV,QAAUU,EAAK,EACfE,SAAWF,EAAK,EAChBT,QAAUS,EAAK,EAEfG,aAAeC,EAAsB,CAAA,CAAE,EACvChB,SAAWgB,EAAgB,EAAK,EAChCf,OAASe,EAAgB,EAAK,EAC9BjB,qBAAuBiB,EAAgB,EAAI,EAC3CZ,SAAWY,EAAgB,EAAK,EAEzCC,UAAQ,CACJ,KAAKC,aAAY,CACrB,CAEAC,aAAW,CACP,KAAKC,mBAAkB,CAC3B,CAEQA,oBAAkB,CACtB,KAAKnB,OAAOoB,IAAI,EAAK,EACrB,KAAKtB,qBAAqBsB,IAAI,EAAI,EAClC,KAAKN,aAAaM,IAAI,CAAA,CAAE,EACxB,KAAKH,aAAY,CACrB,CAEQA,cAAY,CACM,KAAKT,eAAea,KAAK,KAAKX,KAAI,GAAM,EAAE,EAG3DY,OAAQC,GAAS,CAACA,EAAKC,oBAAoB,EAC3CC,MAAM,EAAG,CAAC,EACVC,QAASH,GAAQ,CACd,KAAKlB,mBAAmBsB,UAAUJ,EAAKK,IAAI,EAAEC,UAAU,CACnDC,KAAOC,GAAe,CAClBA,EAAYC,qBAAuB,CAAC,EAAED,EAAYE,KAAOF,EAAYG,OAASH,EAAYI,aAAeJ,EAAYK,OAErH,IAAMC,EAA2B,KAAKvB,aAAY,EAAGwB,UAAWC,GAAYA,EAAQN,MAAQF,EAAYE,GAAG,EACvGI,IAA6B,GAC7B,KAAKvB,aAAa0B,OAAQC,GAAY,CAClC,IAAMC,EAAsBD,EAASJ,CAAwB,EAC7DM,cAAOC,OAAOF,EAAqBX,CAAW,EACvCU,CACX,CAAC,EAED,KAAK3B,aAAaM,IAAI,CAAC,GAAG,KAAKN,aAAY,EAAIiB,CAAW,CAAC,EAG/D,KAAKhC,SAASqB,IAAI,EAAK,EACvB,KAAKpB,OAAOoB,IAAI,EAAI,EACpB,KAAKtB,qBAAqBsB,IAAI,EAAK,EACnC,KAAKjB,SAASiB,IAAI,KAAKN,aAAY,EAAG+B,OAAS,CAAC,CACpD,EACH,CACL,CAAC,CACT,CAEAC,WAAWC,EAAeR,EAAoB,CAC1C,OAAOA,GAASN,GACpB,4CAhES7B,EAA6B,2BAA7BA,EAA6B4C,UAAA,CAAA,CAAA,4BAAA,CAAA,EAAAC,OAAA,CAAAvC,KAAA,CAAA,EAAA,MAAA,EAAAE,OAAA,CAAA,EAAA,QAAA,EAAAX,QAAA,CAAA,EAAA,SAAA,EAAAY,SAAA,CAAA,EAAA,UAAA,EAAAX,QAAA,CAAA,EAAA,SAAA,CAAA,EAAAgD,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,cAAA,uBAAA,WAAA,SAAA,UAAA,UAAA,UAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCd1CE,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAF,EAAAX,WAAA,EAAA,OAAAc,EAAAH,EAAA3C,aAAA,CAAc,iBDYA+C,EAAoB,EAAAC,OAAA,CAAA,iCAAA,EAAAC,gBAAA,CAAA,CAAA,SAErB3D,CAA6B,GAAA,yFGbtC4D,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EACAF,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EAAsEE,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAG,kBAAAC,KAAA,CAAwB,CAAA,CAAA,EACnGV,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EACAF,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EACJF,EAAA,GAAA;SAAA,EAAAW,EAAA,EACJX,EAAA,GAAA;KAAA,EAAAW,EAAA,EACJX,EAAA,GAAA;CAAA,oBANyFY,EAAA,CAAA,EAAAC,EAAA,kBAAAC,EAAA,EAAAC,GAAAT,EAAAU,qBAAA,CAAA,CAAA,sCAiBjEhB,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,2BAAA,CAAA,EAEIE,EAAA,uBAAA,SAAAc,EAAA,CAAAb,EAAAc,CAAA,EAAA,IAAAZ,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAAwBF,EAAAa,qBAAAT,KAAAO,CAAA,CAAiC,CAAA,CAAA,EAAC,0BAAA,SAAAA,EAAA,CAAAb,EAAAc,CAAA,EAAA,IAAAZ,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAC/BF,EAAAc,wBAAAV,KAAAO,CAAA,CAAoC,CAAA,CAAA,EAHnEN,EAAA,EAKJX,EAAA,EAAA;qBAAA,4BAJQY,EAAA,EAAAC,EAAA,qBAAAQ,CAAA,0BAMJrB,EAAA,EAAA;yBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;qBAAA,6BAVJA,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;qBAAA,EAAAsB,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,GAAA,EAAAC,iBAAA,EAAA,EAOAC,EAAA,EAAAC,GAAA,EAAA,CAAA,EAGJhB,EAAA,EACJX,EAAA,EAAA;aAAA,mBAXQY,EAAA,CAAA,EAAAgB,EAAAtB,EAAAuB,oBAAA,CAAqB,EAOrBjB,EAAA,CAAA,EAAAkB,EAAAxB,EAAAyB,SAAA,EAAA,EAAA,EAAA,sCAdZ/B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,UAAA,CAAA,EAAuGE,EAAA,QAAA,UAAA,CAAAC,EAAA4B,CAAA,EAAA,IAAA1B,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAAAF,EAAA2B,YAAA,CAAA3B,EAAA2B,WAAA,CAAA,CAAA,EAAvGtB,EAAA,EACJX,EAAA,EAAA;aAAA,EAAAW,EAAA,EACAX,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EACAF,EAAA,EAAA;aAAA,EAAA0B,EAAA,GAAAQ,GAAA,EAAA,CAAA,EAcJvB,EAAA,EACJX,EAAA,GAAA;KAAA,qBAlBqBY,EAAA,CAAA,EAAAC,EAAA,OAAAP,EAAA2B,YAAA3B,EAAA6B,UAAA7B,EAAA8B,WAAA,EAA8C,OAAA,IAAA,EAAc,UAAAC,GAAA,EAAAC,EAAA,CAAA,EAE5C1B,EAAA,CAAA,EAAA2B,EAAA,eAAAjC,EAAA2B,YAAA,wCAAA,mCAAA,EAC7BrB,EAAA,CAAA,EAAAkB,EAAAxB,EAAA2B,YAAA,GAAA,EAAA,sCAoBIjC,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,2BAAA,CAAA,EAEIE,EAAA,uBAAA,SAAAc,EAAA,CAAAb,EAAAoC,CAAA,EAAA,IAAAlC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAAwBF,EAAAa,qBAAAT,KAAAO,CAAA,CAAiC,CAAA,CAAA,EAAC,0BAAA,SAAAA,EAAA,CAAAb,EAAAoC,CAAA,EAAA,IAAAlC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAC/BF,EAAAc,wBAAAV,KAAAO,CAAA,CAAoC,CAAA,CAAA,EAHnEN,EAAA,EAKJX,EAAA,EAAA;aAAA,4BAJQY,EAAA,EAAAC,EAAA,qBAAA4B,CAAA,0BAMJzC,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,6BAVJA,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAsB,EAAA,EAAAoB,GAAA,EAAA,EAAA,KAAA,KAAAlB,GAAA,EAAAC,iBAAA,EAAA,EAOAC,EAAA,EAAAiB,GAAA,EAAA,CAAA,EAGAzC,EAAA,EAAA,6BAAA,EAAA,EACJF,EAAA,EAAA;SAAA,EAAAW,EAAA,EACJX,EAAA,EAAA;KAAA,mBAZQY,EAAA,CAAA,EAAAgB,EAAAtB,EAAAuB,oBAAA,CAAqB,EAOrBjB,EAAA,CAAA,EAAAkB,EAAAxB,EAAAyB,SAAA,EAAA,EAAA,EAAA,EAG4BnB,EAAA,EAAAC,EAAA,OAAAP,EAAAsC,QAAA,CAAA,EAAkB,SAAAtC,EAAAuC,OAAA,CAAA,EAAoB,UAAAvC,EAAAwC,QAAA,CAAA,EAAsB,WAAAxC,EAAAyB,SAAA,CAAA,EAAwB,UAAAzB,EAAAyC,QAAA,CAAA,6BApCxH/C,EAAA,EAAA;KAAA,EACAA,EAAA,EAAA;KAAA,EAAA0B,EAAA,EAAAsB,GAAA,GAAA,CAAA,EAAqB,EAAAC,GAAA,EAAA,CAAA,kBAArBrC,EAAA,CAAA,EAAAkB,EAAAxB,EAAA4C,YAAA,EAAA,EAAA,EAAA,EAuBAtC,EAAA,EAAAkB,EAAAxB,EAAA4C,YAAA,EAAA,GAAA,CAAA,GDVJ,IAAaC,IAAuB,IAAA,CAA9B,MAAOA,CAAuB,CACxBC,aAAeC,EAAOC,CAAY,EAE1CV,QAAUW,EAAK,EACfL,YAAcK,EAAK,EACnBV,OAASU,EAAK,EACdxB,SAAWwB,EAAe,EAAK,EAC/BT,QAAUS,EAAK,EACfR,QAAUQ,EAAK,EAEfpC,qBAAuBqC,EAAM,EAC7BpC,wBAA0BoC,EAAM,EAEhCC,UAAYF,EAAe,EAAK,EAChCG,mBAAqBH,EAAe,EAAI,EACxCvC,qBAAuBuC,EAAc,CAAC,EACtC9C,kBAAoB+C,EAAM,EAE1BvB,YAAc,GACd0B,qBAA+B,CAAA,EAC/B9B,oBAAsB+B,EAA6B,CAAA,CAAE,EAE7CC,kBAGSC,eAAiB,8BAGlC3B,UAAYA,GACZC,YAAcA,GAKd2B,UAAQ,CACJ,GAAK,KAAKL,mBAAkB,EAIxB,KAAKM,2BAA0B,MAJH,CAC5B,IAAMC,EAAiC,KAAKC,kBAAiB,EAC7D,KAAKC,2BAA2BF,CAAc,CAClD,CAGJ,CAKAG,aAAW,CACF,KAAKV,mBAAkB,GACxB,KAAKM,2BAA0B,EAGnC,IAAMC,EAAiC,KAAKC,kBAAiB,EAC7D,KAAKC,2BAA2BF,CAAc,CAClD,CAMQD,4BAA0B,CAC9B,KAAKH,kBAAoB,KAAKT,aAAaiB,MAAMC,UAAWD,GAAiB,CACzE,KAAKV,qBAAuBU,EAC5B,IAAMJ,EAAiC,KAAKC,kBAAiB,EAC7D,KAAKC,2BAA2BF,CAAc,CAClD,CAAC,CACL,CAKAM,aAAW,CACP,KAAKV,mBAAmBW,YAAW,CACvC,CAKAL,2BAA2BF,EAA8B,CAGrD,GAFA,KAAKpC,oBAAoB4C,IAAI,CAAA,CAAE,EAE3BR,GAAkBA,EAAeS,OAAS,EAC1CT,EAAeU,QAAQ,CAACC,EAA4BC,IAAiB,CACjE,GAAI,KAAKjC,QAAO,IAAOkC,OACnB,OAGJ,IAAMC,EAAe,KAAKnC,QAAO,EAAIoC,UAAUJ,EAAaK,WAAa,EAAGL,EAAaM,QAAQ,EAC3FC,EAAgBP,EAAaO,cAC/BC,EACAC,EACAC,EACAC,EACAC,GACAC,GACJ,GAAIC,EAAcC,OAASR,EAAe,CAItC,IAAMS,GAA8B,KAAKjC,qBAAqBkC,KAAMC,IAAeA,GAAKC,KAAQ,CAAChB,CAAY,EAC7GK,EAAe,KAAKxC,QAAO,EAAIoC,UAAUJ,EAAaK,WAAYL,EAAaM,QAAQ,EACnFc,GAAuB,KAAK5C,aAAa6C,UAAS,CAAE,IACpDZ,EAAkB,KAAKjC,aAAa8C,eAAc,EAClDV,GAAcI,GAA8B,KAAKxC,aAAa+C,sBAAsBP,EAA2B,EAAK,CAAEQ,WAAYhB,CAAY,EAEtJ,SACIM,EAAcW,UAAYlB,GAC1BO,EAAcY,cAAgBnB,GAC9BO,EAAca,WAAapB,GAC3BO,EAAcc,OAASrB,GACvBO,EAAce,OAAStB,GACvBO,EAAcgB,cAAgBvB,EAM9BC,EAAe,KAAKxC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAE,EAC3JI,EAAkB,CACd,KAAKzC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAC,CAAC,UAEzIS,EAAckB,MAAQzB,EAC7BC,EAAe,KAAKxC,QAAO,EAAIoC,UAC3B,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EACzD,KAAKrC,QAAO,EAAI+D,QAAQ,YAAa/B,EAAaK,UAAU,CAAE,EAElEI,EAAkB,CACd,KAAKzC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,YAAa/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,SAAU/B,EAAaK,UAAU,CAAC,CAAC,EAE7JO,GAAc,CAAEqB,MAAO,KAAKjE,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,GAAG,EAAI,EAAG,KAAK/D,QAAO,EAAI+D,QAAQ,GAAG,CAAC,CAAC,UACzGjB,EAAcoB,aAAe3B,GAAiBO,EAAcqB,mBAAqB5B,EAIxFC,EAAe,KAAKxC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAE,EAE3JK,EADyB,KAAKxB,eAG1B,KAAKlB,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAC,UACxIS,EAAcsB,QAAU7B,EAG/BC,EAAe,KAAKxC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAE,EAE3JM,EAD6B,KAAKzB,eAG9B,KAAKlB,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAC,UACxIS,EAAcuB,OAAS9B,EAE9BC,EAAe,KAAKxC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAE,EAC3JO,GAAc,CACV0B,mBAAoB,KAAKtE,QAAO,EAAIoC,UAChC,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EACzD,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAC,WAGtDS,EAAcyB,UAAYhC,EAAe,CAEhDC,EAAe,KAAKxC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAE,EAC3J,IAAMmC,GAAYC,SACd,KAAKzE,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAC,CAAC,EAEhJO,GAAc,CACV4B,UAAWE,MAAMF,EAAS,EAAItC,OAAYsC,GAElD,MAAW1B,EAAc6B,QAAUpC,IAE/BC,EAAe,KAAKxC,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAI,EAAI,EAAG,KAAK/D,QAAO,EAAI+D,QAAQ,KAAM/B,EAAaK,UAAU,CAAC,EAClIQ,GAAmB,KAAK7C,QAAO,EAAIoC,UAAU,KAAKpC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,EAAK,EAAG,KAAKrC,QAAO,EAAI+D,QAAQ,IAAK/B,EAAaK,UAAU,CAAC,GAIlK,IAAIuC,GAEA3C,EAAQZ,EAAeS,OAAS,EAEhC8C,GAAkCvD,EAAeY,EAAQ,CAAC,EAAEI,WAI5DuC,GAAkC,KAAK5E,QAAO,EAAI8B,OAItD,IAAM+C,GAAkC,CACpCC,uBAAwB7C,IAAU,EAAI,KAAKjC,QAAO,EAAIoC,UAAU,EAAGJ,EAAaK,UAAU,EAAIH,OAC9FO,gBAAAA,EACAC,sBAAAA,EACAC,iBAAAA,EACAC,YAAAA,GACAJ,aAAAA,EACAD,cAAAA,EACAM,iBAAAA,GACAkC,sBAAuB,KAAK/E,QAAO,EAAIoC,UAAUJ,EAAaM,SAAUsC,EAA+B,GAE3G,KAAK3F,oBAAoB4C,IAAI,CAAC,GAAG,KAAK5C,oBAAmB,EAAI4F,EAAW,CAAC,CAC7E,CAAC,MAGE,CACH,IAAMG,EAAkC,CACpCF,uBAAwB,KAAK9E,QAAO,EACpCyC,gBAAiBP,OACjBU,YAAaV,OACbM,aAAcN,OACdK,cAAeL,OACf6C,sBAAuB7C,QAE3B,KAAKjD,oBAAoB4C,IAAI,CAAC,GAAG,KAAK5C,oBAAmB,EAAI+F,CAAW,CAAC,CAC7E,CACJ,CAKA1D,mBAAiB,CAab,IAAM2D,EACF,4fAGE5D,EAAiC,CAAA,EAGnC6D,EAAQD,EAAQE,KAAK,KAAKnF,QAAO,CAAG,EACxC,KAAOkF,GAAO,CACV,IAAIE,EAEJ,QAAWC,KAAaH,EAAMI,OACtBJ,EAAMI,OAAOD,CAAS,IACtBD,EAAQtC,EAAcuC,CAAuC,GAGjED,GACA/D,EAAekE,KAAK,CAChBlD,WAAY6C,EAAMjD,MAClBK,SAAU2C,EAAQO,UAClBjD,cAAe6C,EACF,EAGrBF,EAAQD,EAAQE,KAAK,KAAKnF,QAAO,CAAG,CACxC,CACA,OAAOqB,CACX,CAEAxC,iBAAiBoD,EAAa,CAC1B,OAAO,KAAK/B,QAAO,GAAIiD,GAAK,IAAMlB,CACtC,4CAlQS1B,EAAuB,2BAAvBA,EAAuBkF,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,OAAA,CAAA1F,QAAA,CAAA,EAAA,SAAA,EAAAM,YAAA,CAAA,EAAA,aAAA,EAAAL,OAAA,CAAA,EAAA,QAAA,EAAAd,SAAA,CAAA,EAAA,UAAA,EAAAe,QAAA,CAAA,EAAA,SAAA,EAAAC,QAAA,CAAA,EAAA,SAAA,EAAAU,UAAA,CAAA,EAAA,WAAA,EAAAC,mBAAA,CAAA,EAAA,oBAAA,EAAA1C,qBAAA,CAAA,EAAA,sBAAA,CAAA,EAAAuH,QAAA,CAAApH,qBAAA,uBAAAC,wBAAA,0BAAAX,kBAAA,mBAAA,EAAA+H,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,8BAAA,gBAAA,oBAAA,EAAA,CAAA,eAAA,uCAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,MAAA,sBAAA,SAAA,OAAA,oBAAA,EAAA,OAAA,EAAA,CAAA,eAAA,mCAAA,EAAA,0BAAA,EAAA,CAAA,EAAA,+BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,KAAA,EAAA,CAAA,EAAA,QAAA,OAAA,OAAA,SAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,CAAA,EAAA,uBAAA,0BAAA,oBAAA,EAAA,CAAA,eAAA,0BAAA,EAAA,aAAA,EAAA,CAAA,EAAA,OAAA,SAAA,UAAA,WAAA,SAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCvBpCpH,EAAA,EAAAsH,GAAA,GAAA,CAAA,EAAmB,EAAAC,GAAA,EAAA,CAAA,OAAnBnH,EAAAiH,EAAAtF,UAAA,EAAA,EAAA,CAAA,iBDqBcyF,EAAoBC,EAAiBC,GAASC,GAA6BC,EAA6B,EAAAC,OAAA,CAAA,27DAAA,EAAAC,gBAAA,CAAA,CAAA,SAEzGrG,CAAuB,GAAA,4DGOpBsG,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,sBAAA,CAAA,EACJD,EAAA,EAAA;aAAA,kBADyBE,EAAA,EAAAC,EAAA,UAAAC,EAAAC,OAAA,6BAQjCL,EAAA,EAAA;KAAA,EAAAM,EAAA,EAAA,MAAA,CAAA,EACIN,EAAA,EAAA;SAAA,EAAAM,EAAA,EAAA,IAAA,CAAA,EACIN,EAAA,CAAA,EACJO,EAAA,EACJP,EAAA,EAAA;KAAA,EAAAO,EAAA,EACJP,EAAA,EAAA;CAAA,oBAJmCE,EAAA,CAAA,EAAAC,EAAA,UAAAK,EAAA,EAAAC,IAAAL,EAAAC,SAAA,KAAA,KAAAD,EAAAC,QAAAK,QAAAN,EAAAO,mBAAAP,EAAAC,SAAA,KAAA,KAAAD,EAAAC,QAAAK,UAAA,EAAA,MAAA,SAAA,CAAA,EACvBR,EAAA,EAAAU,GAAA;eAAAC,EAAAT,EAAAC,SAAA,KAAA,KAAAD,EAAAC,QAAAK,UAAA,MAAAG,IAAAC,OAAAD,EAAA,EAAA,MAAAT,EAAAO,iBAAA;SAAA,GDyBZ,IAAaI,IAA8B,IAAA,CAArC,MAAOA,CAA8B,CAC/BC,MAAQC,EAAOC,CAAiB,EAChCC,aAAeF,EAAOG,CAAY,EAClCC,YAAcJ,EAAOK,EAAW,EAChCC,wBAA0BN,EAAOO,EAAuB,EACxDC,eAAiBR,EAAOS,EAAc,EACtCC,eAAiBV,EAAOW,EAAc,EAC9CC,iBAAmBZ,EAAOa,EAAgB,EAClCC,gBAAkBd,EAAOe,EAAsB,EAEKC,eAEnDtB,iBACAuB,aAAqCC,GAAqBC,OAC1DC,uBAAyB,GACzBC,uBAAyB,GAElCC,gBAAkBC,EAAe,EAAK,EACtCC,iBAAmBD,EAAe,EAAK,EACvCE,SAAWF,EAAK,EAEPG,SAAWC,GAAgBC,OAK3BC,mBAAqBN,EAAK,EACzBO,YAAc,IAAIC,GAC5BC,iCACAC,eACA7C,QACA8C,YAAc,GACdC,uBAAyBC,GAA6B,IAAM,KAAKP,mBAAkB,GAAIQ,EAAE,EAEtEnB,qBAAuBA,GAClCoB,QAAUtC,EAAOuC,EAAO,EAKhCC,UAAQ,CACJ,IAAMC,EAAuBC,GAAuB,KAAKxC,aAAayC,UAAS,CAAE,EAC3E,CAAC,IAAIC,GAAkB,KAAKtC,wBAAyB,KAAKJ,YAAY,EAAG,IAAI2C,GAAuB,KAAK3C,aAAc,KAAKQ,cAAc,CAAC,EAC3I,CAAA,EAEAoC,EAAYC,GAAa,KAAK7C,aAAayC,UAAS,CAAE,EAAI,CAAC,IAAIK,GAAmB,KAAK9C,YAAY,CAAC,EAAI,CAAA,EAE9G,KAAK+B,eAAiB,CAClB,IAAIgB,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GAAY,KAAKzC,iBAAkB,KAAK0B,QAAS,KAAKxB,eAAe,EACzE,IAAIwC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,GAAGnB,EACH,IAAIoB,GAAwB,KAAK3D,YAAY,EAC7C,GAAG4C,CAAS,EAGhB,KAAKd,iCAAmC,IAAI8B,GAAiC,KAAK5D,aAAc,KAAKM,eAAgB,KAAKJ,WAAW,CACzI,CAEA2D,iBAAe,CACX,KAAK/C,eAAegD,oBAAmB,EAEvC,IAAMC,EAAS,KAAKjD,eAAekD,aAC/BD,GACAA,EAAOE,wBAAyBC,GAAkD,CAC9E,IAAMC,EAAWJ,EAAOK,YAAW,EACnC,GAAI,CAACD,EACD,OAGJ,IAAME,EAAQN,EAAOO,SAAQ,EAC7B,GAAI,CAACD,EACD,OAGJ,IAAME,EAAcF,EAAMG,eAAeL,EAASM,UAAU,EAAEC,UAAS,EACjEC,EAAYJ,EAAYK,WAAW,IAAI,GAAK,WAAWC,KAAKN,CAAW,EACzEI,GAAaT,EAAMY,QAAQvF,SAAW,IAAM2E,EAAMY,QAAQ,CAAC,EAAEC,KAAKH,WAAW,IAAI,GAAKV,EAAMY,QAAQ,CAAC,EAAEC,KAAKH,WAAW,KAAK,IAI5HD,GACA,KAAKK,cAAcX,EAAOF,EAASM,UAAU,CAErD,CAAC,CAET,CAEQO,cAAcX,EAAiCI,EAAkB,CACrE,IAAMF,EAAcF,EAAMG,eAAeC,CAAU,EAAEC,UAAS,EAE1DH,EAAYK,WAAW,IAAI,EAC3B,KAAK9D,eAAemE,kBAAkB,IAAIC,WAAW,OAAO,EAAG,KAAKnD,eAAeoD,KAAMC,GAAWA,aAAkBhC,EAAkB,CAAE,EACnI,UAAUyB,KAAKN,CAAW,GACjC,KAAKzD,eAAemE,kBAAkB,IAAIC,WAAW,OAAO,EAAG,KAAKnD,eAAeoD,KAAMC,GAAWA,aAAkB/B,EAAiB,CAAE,CAEjJ,CAMAgC,uBAAqB,CACjB,KAAKxF,MAAMyF,cAAa,CAC5B,CAKAC,SAAYC,GAAgB,CAAE,EAK9BC,cAAY,CACR,KAAK7D,YAAY8D,KAAI,CACzB,CAOAC,WAAWC,EAAU,CACjB,KAAK1G,QAAU0G,GAAS,EAC5B,CAMAC,iBAAiBC,EAAO,CACpB,KAAKP,SAAWO,CACpB,CAKAC,mBAAiB,CAAU,CAM3BC,YAAYC,EAAgB,CACxB,KAAK/G,QAAU+G,EACf,KAAKV,SAAS,KAAKrG,OAAO,EAC1B,KAAKuG,aAAY,CACrB,CAEAS,UAAUhC,EAAoB,CAEtB,KAAK/C,wBAA0B+C,EAAMiC,MAAQ,SAAW,CAACjC,EAAMkC,UAC/DlC,EAAMmC,eAAc,CAE5B,4CApKSzG,EAA8B,2BAA9BA,EAA8B0G,UAAA,CAAA,CAAA,6BAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,MAU5BE,GAA6B,CAAA,kaArB7B,CACP,CACIC,QAASC,GACTC,YAAaC,GAAW,IAAMlH,CAA8B,EAC5DmH,MAAO,GACV,CACJ,CAAA,EAAAC,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,kBAAA,0BAAA,QAAA,EAAA,iBAAA,eAAA,kBAAA,UAAA,WAAA,cAAA,gBAAA,iBAAA,yBAAA,mBAAA,gCAAA,yBAAA,cAAA,eAAA,qBAAA,kCAAA,kCAAA,sBAAA,qBAAA,qBAAA,kBAAA,mBAAA,WAAA,mBAAA,EAAA,CAAA,KAAA,eAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,MAAA,OAAA,UAAA,EAAA,CAAA,EAAA,QAAA,OAAA,OAAA,EAAA,SAAA,CAAA,EAAAC,SAAA,SAAAX,EAAAC,EAAA,IAAAD,EAAA,IC5DLrH,EAAA,EAAA,MAAA,CAAA,EACIN,EAAA,EAAA;KAAA,EAAAM,EAAA,EAAA,6BAAA,CAAA,EAGIiI,EAAA,iBAAA,SAAAC,EAAA,CAAA,OAAkBZ,EAAAT,YAAAqB,CAAA,CAAmB,CAAA,EAAC,eAAA,UAAA,CAAA,OAAAZ,EAAAzE,YACR,EAAK,CAAA,EAAC,kBAAA,UAAA,CAAA,OAAAyE,EAAAzE,YACH,EAAI,CAAA,EAAC,UAAA,SAAAqF,EAAA,CAAA,OAgB3BZ,EAAAP,UAAAmB,CAAA,CAAiB,CAAA,EAM5BxI,EAAA,EAAA;SAAA,EAAAyI,GAAA,EAAA,CAAA,EACIzI,EAAA,EAAA;aAAA,EAAA0I,EAAA,EAAAC,GAAA,EAAA,CAAA,EAGA1I,EAAA,EAAA,IAAA,EACJD,EAAA,EAAA;SAAA,OACAA,EAAA,EAAA;SAAA,EACJA,EAAA,GAAA;KAAA,EAAAO,EAAA,EACJP,EAAA,GAAA;CAAA,EAAAO,EAAA,EACAP,EAAA,GAAA;CAAA,EAAA0I,EAAA,GAAAE,GAAA,EAAA,CAAA,cAlCQ1I,EAAA,CAAA,EAAAC,EAAA,WAAAyH,EAAAvH,OAAA,EAAoB,cAAAwI,GAAA,GAAAC,EAAA,CAAA,EAIF,gBAAAhI,MAAA,EACS,iBAAA8G,EAAA1E,cAAA,EACM,yBAAA0E,EAAA3E,gCAAA,EAC0B,mBAAA,EAAA,EAClC,gCAAA,EAAA,EACa,yBAAA2E,EAAAxE,uBAAA,CAAA,EACa,cAAAtC,MAAA,EAC1B,eAAA,EAAA,EACH,qBAAA,EAAA,EACM,kCAAA,EAAA,EACa,kCAAA,EAAA,EACD,sBAAA8G,EAAA1F,YAAA,EACJ,qBAAA0F,EAAA1F,YAAA,EACD,qBAAA0F,EAAAzF,qBAAA4G,MAAA,EACe,kBAAAnB,EAAArF,gBAAA,CAAA,EAEb,mBAAAqF,EAAAnF,iBAAA,CAAA,EACE,WAAAmF,EAAAlF,SAAA,CAAA,EAChB,oBAAA,EAAA,EAInBxC,EAAA,CAAA,EAAA8I,EAAApB,EAAAzE,YAAA,EAAA,EAAA,EAQZjD,EAAA,CAAA,EAAA8I,EAAApB,EAAAvF,0BAAA4G,EAAArB,EAAAvH,SAAA,KAAA,KAAAuH,EAAAvH,QAAAK,UAAA,MAAAuI,IAAAnI,OAAAmI,EAAA,GAAArB,EAAAjH,iBAAA,GAAA,EAAA,kBD0BckH,GAA+BqB,GAAyBC,EAAO,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SAEhEtI,CAA8B,GAAA,yDG9D/BuI,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,eAAA,CAAA,EAAcC,EAAA,UAAA,UAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAWF,EAAAG,aAAAP,CAAA,CAAiB,CAAA,CAAA,EACtCH,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,CAAA,EACAC,EAAA,EAAA,SAAA,CAAA,EACID,EAAA,EAAA;yBAAA,EAAAW,EAAA,EAAA,UAAA,EAAA,EACJX,EAAA,EAAA;qBAAA,EAAAY,EAAA,EACJZ,EAAA,EAAA;iBAAA,EAAAY,EAAA,EACJZ,EAAA,GAAA;aAAA,EAAAY,EAAA,EACJZ,EAAA,GAAA;SAAA,kCANYa,EAAA,CAAA,EAAAC,EAAA;sBAAAX,EAAA;qBAAA,EAEaU,EAAA,CAAA,EAAAE,EAAA,OAAAR,EAAAS,OAAA,6BAmBrBhB,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,aAAA,EAAA,EACID,EAAA,CAAA,EACJY,EAAA,EACJZ,EAAA,EAAA;SAAA,0BAHgBa,EAAA,EAAAE,EAAA,QAAAE,CAAA,EACRJ,EAAA,EAAAC,EAAA;kBAAAG,EAAA;aAAA,GDOhB,IAAaC,IAAwB,IAAA,CAA/B,MAAOA,CAAwB,CACzBC,aAAeC,EAAOC,CAAY,EAClCC,eAAiBF,EAAOG,CAAiB,EAExCC,SAECC,eAAiB,IAAIC,GAERC,SAEvBC,iBACAC,KAEAC,mBAAqB,CAACC,GAAOC,IAAOC,CAAG,EACvCC,QAAU,IAAIC,GAAgCC,MAAS,EAE/CC,iBAGRrB,QAAUA,GAMVsB,UAAQ,CACJ,KAAKD,iBAAmB,KAAKlB,aAAaU,KAAKU,UAAWV,GAAkB,CACxE,KAAKD,iBAAmB,KAAKM,QAAQM,aAAaC,KAC9CC,GAAUN,MAAS,EACnBO,GAAKC,GAAkCA,EAAW,KAAKC,QAAQD,CAAQ,EAAIf,EAAKiB,MAAK,CAAG,CAAC,CAEjG,CAAC,EACD,KAAKjB,KAAO,KAAKL,SAAW,KAAKA,SAAW,CAAA,CAChD,CAEQqB,QAAQE,EAAa,CACzB,IAAMC,EAAcD,EAAME,YAAW,EACrC,OAAO,KAAKpB,KAAKqB,OAAQC,GAAQA,EAAIF,YAAW,EAAGG,SAASJ,CAAW,CAAC,CAC5E,CAKAK,aAAW,CACP,KAAKxB,KAAO,KAAKL,SAAW,KAAKA,SAAW,CAAA,CAChD,CAMA8B,uBAAqB,CACjB,KAAKhC,eAAeiC,cAAa,CACrC,CAMAC,UAAUC,EAAwB,CAC9B,IAAMC,GAAaD,EAAMV,OAAS,IAAIY,KAAI,EAEtCD,GAAa,CAAC,KAAK7B,MAAMuB,SAASM,CAAS,GAAK,KAAK7B,MAAM+B,OAAS,IAC/D,KAAK/B,OACN,KAAKA,KAAO,CAAA,GAEhB,KAAKA,KAAKgC,KAAKH,CAAS,EACxB,KAAKjC,eAAeqC,KAAK,KAAKjC,IAAI,GAItC4B,EAAMM,UAAWC,MAAK,EACtB,KAAK9B,QAAQ+B,SAAS,IAAI,CAC9B,CAEAC,aAAaT,EAAmC,CACxC,CAAC,KAAK5B,MAAMuB,SAASK,EAAMU,OAAOC,SAAS,GAAK,KAAKvC,MAAM+B,OAAS,IAC/D,KAAK/B,OACN,KAAKA,KAAO,CAAA,GAEhB,KAAKA,KAAKgC,KAAKJ,EAAMU,OAAOC,SAAS,EACrC,KAAK3C,eAAeqC,KAAK,KAAKjC,IAAI,GAEtC,KAAKF,SAAS0C,cAActB,MAAQ,GACpC,KAAKb,QAAQ+B,SAAS,IAAI,CAC9B,CAMAvD,aAAa4D,EAAmB,CAC5B,KAAKzC,KAAO,KAAKA,KAAKqB,OAAQC,GAAQA,IAAQmB,CAAW,EACzD,KAAK7C,eAAeqC,KAAK,KAAKjC,IAAI,CACtC,CAEA0C,aAAW,CACP,KAAKlC,iBAAiBmC,YAAW,CACrC,4CAlGStD,EAAwB,2BAAxBA,EAAwBuD,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,6nBClCrC1E,EAAA,EAAA,iBAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,gBAAA,EAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAA6E,EAAA,EAAAC,GAAA,GAAA,EAAA,KAAA,KAAAC,EAAA,EAUA9E,EAAA,EAAA,QAAA,EAAA,CAAA,0BASIC,EAAA,uBAAA,SAAA8E,EAAA,CAAAC,OAAA7E,EAAA8E,CAAA,EAAAzE,EAAwBmE,EAAApB,UAAAwB,CAAA,CAAiB,CAAA,CAAA,EAT7CpE,EAAA,EAWJZ,EAAA,GAAA;KAAA,EAAAY,EAAA,EACAZ,EAAA,GAAA;KAAA,EAAAC,EAAA,GAAA,mBAAA,EAAA,CAAA,EAA0CC,EAAA,iBAAA,SAAA8E,EAAA,CAAAC,OAAA7E,EAAA8E,CAAA,EAAAzE,EAAkBmE,EAAAV,aAAAc,CAAA,CAAoB,CAAA,CAAA,EAC5EhF,EAAA,GAAA;SAAA,EAAA6E,EAAA,GAAAM,GAAA,EAAA,EAAA,KAAA,KAAAJ,EAAA,gBAKJnE,EAAA,EACJZ,EAAA,GAAA;CAAA,EAAAY,EAAA,EACAZ,EAAA,GAAA;CAAA,6BA9BQa,EAAA,CAAA,EAAAuE,EAAAR,EAAA/C,IAAA,EAWIhB,EAAA,CAAA,EAAAE,EAAA,SAAA6D,EAAA/C,MAAA+C,EAAA/C,KAAA+B,QAAA,CAAA,EAAmC,cAAAyB,EAAA,EAAA,EAAA,sCAAA,CAAA,EAEsC,cAAAT,EAAA1C,OAAA,EAElD,kBAAAoD,CAAA,EACC,kBAAAC,CAAA,EACI,gCAAAX,EAAA9C,kBAAA,EAMhCjB,EAAA,CAAA,EAAAuE,EAAAC,EAAA,GAAA,EAAAT,EAAAhD,gBAAA,CAAA,kBDNA4D,GACAC,GACAC,GACAC,GACAC,EACAC,GAAWC,GAAAC,GACXC,GACAC,GACAC,GAAmBC,GACnBC,GACAC,GACAC,GACAC,CAAoB,EAAAC,OAAA,CAAA,y+BAAA,CAAA,CAAA,SAGftF,CAAwB,GAAA,yBGzBrBuF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACJD,EAAA,EAAA;aAAA,sCAaIA,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,KAAA,EACIF,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,QAAA,EAAA,EACAD,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,gBAAA,EAAA,EACJD,EAAA,EAAA;qBAAA,EAAAG,EAAA,EACAH,EAAA,EAAA;qBAAA,EAAAE,EAAA,GAAA,KAAA,EACIF,EAAA,GAAA;yBAAA,EAAAE,EAAA,GAAA,wBAAA,EAAA,EAAuBE,GAAA,iBAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,CAAA,EAAAC,OAAAC,GAAAH,EAAAI,KAAAP,CAAA,IAAAG,EAAAI,KAAAP,GAAAQ,EAAAR,CAAA,CAAA,CAAA,EAAvBF,EAAA,EACJH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,qBAHmCc,EAAA,EAAA,EAAAC,GAAA,WAAAP,EAAAI,IAAA,6BAuBnCZ,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,0BASJD,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,mBARYc,EAAA,CAAA,EAAAE,EAAA,gBAAAR,EAAAS,SAAA,EAA2B,WAAAT,EAAAS,WAAA,CAAAT,EAAAU,UAAAC,KAAA,EACe,cAAAC,EAAA,EAAA,EAAA,4CAAA,CAAA,sCAvD1DpB,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,OAAA,CAAA,EAA8BmB,EAAA,WAAA,UAAA,CAAAf,EAAAgB,CAAA,EAAA,IAAAd,EAAAC,EAAA,EAAA,OAAAI,EAAYL,EAAAe,QAAA,CAAS,CAAA,CAAA,EAC/CvB,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,KAAA,CAAA,EAAwBF,EAAA,CAAA,0BAAmCG,EAAA,EAC3DH,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,SAAA,CAAA,EAA2DmB,EAAA,QAAA,UAAA,CAAA,IAAAG,EAAAlB,EAAAgB,CAAA,EAAAG,QAAA,OAAAZ,EAASW,EAAE,aAAa,CAAC,CAAA,CAAA,EAAErB,EAAA,EAC1FH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;SAAA,EAAAE,EAAA,GAAA,MAAA,CAAA,EACIF,EAAA,GAAA;aAAA,EACAA,EAAA,GAAA;aAAA,EAAA0B,EAAA,GAAAC,GAAA,EAAA,CAAA,EAIAzB,EAAA,GAAA,MAAA,CAAA,EACIF,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,KAAA,EACIF,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,QAAA,CAAA,EACAD,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,gBAAA,CAAA,EACJD,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,KAAA,EACIF,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,QAAA,CAAA,EACJD,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;aAAA,EACAA,EAAA,GAAA;aAAA,EAAA0B,EAAA,GAAAE,GAAA,GAAA,CAAA,EAWA1B,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,KAAA,EACIF,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,QAAA,EAAA,EACAD,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,gBAAA,EAAA,EACJD,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;qBAAA,EAAAC,EAAA,GAAA,8BAAA,EAAA,EASJD,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;SAAA,EAAA0B,EAAA,GAAAG,GAAA,EAAA,CAAA,EAaJ1B,EAAA,EACJH,EAAA,GAAA;CAAA,sBAhEUc,EAAA,EAAAE,EAAA,YAAAR,EAAAU,SAAA,EAE0BJ,EAAA,CAAA,EAAAgB,EAAAV,EAAA,EAAA,GAAAZ,EAAAuB,UAAA,CAAA,EAKxBjB,EAAA,CAAA,EAAAkB,EAAAxB,EAAAyB,WAAAzB,EAAA0B,SAAAC,QAAA3B,EAAA4B,oBAAA,KAAAC,EAAA7B,EAAA8B,aAAA9B,EAAA+B,QAAAC,YAAA,IAAA,MAAAH,EAAAI,uBAAA,GAAA,EAAA,EAcA3B,EAAA,EAAA,EAAAkB,EAAAxB,EAAAkC,WAAAlC,EAAAmC,SAAAC,4BAAApC,EAAAkC,WAAAlC,EAAAmC,SAAAE,yBAAA,CAAArC,EAAA4B,oBAAA,GAAA,CAAA5B,EAAA+B,QAAAC,aAAA,GAAA,EAAA,EAmBY1B,EAAA,EAAA,EAAAE,EAAA,eAAAR,EAAAsC,YAAA,EAA6B,mBAAAtC,EAAAuC,gBAAA,EACQ,yBAAA,EAAA,EACL,kBAAAvC,EAAAS,SAAA,EACH,mBAAAT,EAAAU,UAAAC,KAAA,EACO,WAAAX,EAAAyB,QAAA,EAMpDnB,EAAA,CAAA,EAAAkB,EAAAxB,EAAAyB,WAAAzB,EAAA0B,SAAAc,OAAA,GAAA,EAAA,GDjCR,IAAMC,GAAmB,IAqBZC,IAA6B,IAAA,CAApC,MAAOA,UAAqCC,EAAqC,CACnFf,oBAAsBgB,EAAe,EAAK,EAE1CC,UACAC,SACA1C,KACA2C,OACAb,SACAc,uBACAC,4BACAC,6BACAC,aAAuB,CAAA,EAEdhB,SAAWA,GACXT,SAAW0B,GACDtB,aAAeuB,GAGlCC,UAAYA,GACZC,YAAcA,GAOdC,UAAQ,CACJ,KAAKC,kCAAiC,EACtC,MAAMD,SAAQ,EACd,KAAKT,OAAS,KAAKW,aAAaC,UAAS,EACzC,KAAKb,SAAW,KAAKC,OAAOD,SAC5B,KAAKD,UAAY,KAAKE,OAAOF,UAC7B,KAAKG,uBAAyB,KAAKU,aAAaE,gCAA+B,EAC/E,KAAKX,4BAA8B,KAAKS,aAAaG,qCAAoC,CAC7F,CAKAC,aAAW,CACP,MAAMA,YAAW,CACrB,CAKAC,MAAI,CACA,KAAKC,SAAW,KAAKC,aAAaF,KAAK,KAAKG,cAAe,CACvDC,KAAM,KACNC,SAAU,SACVC,cAAeA,KAGX,KAAKC,eAAc,EACZ,IAEd,CACL,CAKAA,gBAAc,CACV,KAAKpC,SAAW,KAAKwB,aAAaa,YAAW,EAC7C,KAAKnE,KAAO,KAAK2B,SAAS3B,MAAQ,CAAA,EAClC,KAAK+C,aAAe,CAAA,EACpB,KAAKpB,QAAQyC,MAAQ,KAAKzC,QAAQyC,OAAS,GAC3C,KAAKf,kCAAiC,EACtC,KAAK/C,UAAY,KAAK+D,YAAYC,MAAM,KAAKC,cAAa,CAAE,EAC5D,KAAKjE,UAAUkE,SAAS,QAAWC,aAAaC,UAAWC,GAAkC,CACzF,KAAK7B,6BAA+B6B,EACpC,KAAK5B,aAAe,CAAA,CACxB,CAAC,CACL,CAMA6B,eAAa,CACT,KAAKjD,QAAU,KAAKkD,kBAAkB,KAAKlD,OAAO,EAClD,KAAK2B,aAAawB,WAAW,KAAKnD,OAAO,EAAE+C,UAAU,CACjDK,KAAOC,GAAc,CACjB,KAAK3E,UAAY,GACjB,KAAKuD,UAAUqB,MAAK,EACpB,KAAKC,SAASC,KAAKH,CAAI,CAC3B,EACAI,MAAOA,IAAK,CACR,KAAK/E,UAAY,EACrB,EACH,CACL,CAMAgF,eAAa,CACT,KAAK1D,QAAU,KAAKkD,kBAAkB,KAAKlD,OAAO,EAClD,KAAK2B,aAAagC,WAAW,KAAK3D,OAAO,EAAE+C,UAAU,CACjDK,KAAMA,IAAK,CACP,KAAK1E,UAAY,GACjB,KAAKuD,UAAUqB,MAAK,CACxB,EACAG,MAAOA,IAAK,CACR,KAAK/E,UAAY,EACrB,EACH,CACL,CAKAkF,kBAAgB,CACR,KAAKlE,WAAa,KAAKC,SAASc,OAChC,KAAKjB,WAAa,+BACX,KAAKE,WAAa,KAAKC,SAASC,SACvC,KAAKJ,WAAa,qBAAuB8B,GAAgB,KAAKtB,QAAQC,YAAY,GAAGC,sBAAwB,+BAAiC,wBAEtJ,CAEQgD,kBAAkBG,EAAU,CAChCA,EAAKZ,MAAQ,KAAK9D,UAAUkF,IAAI,OAAO,GAAGC,MAC1CT,EAAKhF,KAAO,KAAKA,KACjBgF,EAAKU,QAAU,KAAKpF,UAAUkF,IAAI,SAAS,GAAGC,MAC9C,IAAM3C,EAAsD6C,EAAA,GACrD,KAAKrF,UAAUkF,IAAI,SAAS,GAAGC,OAEtCT,OAAAA,EAAOW,IAAA,GACAX,GACAlC,GAEHA,EAA6BlB,eAC7BoD,EAAKpD,aAAekB,EAA6BlB,cAE9CoD,CACX,CAEQ3B,mCAAiC,CACrC,KAAKP,6BAA+B,CAAElB,aAAc,KAAKD,QAAQC,YAAY,CACjF,CAEQ2C,eAAa,CACjB,MAAO,CAEHH,MAAO,CAAC,KAAKzC,QAAQyC,MAAO,CAACwB,EAAWC,SAAUD,EAAWE,UAAUzD,EAAgB,EAAG0D,EAA0B,CAAC,EACrHL,QAAS,CAAC,KAAK/D,QAAQ+D,QAAS,CAACE,EAAWC,SAAUD,EAAWE,UAAU,KAAK3D,gBAAgB,EAAG6D,EAA4B,CAAC,EAChIrB,QAAS,CAAC,KAAK7B,6BAA8B,CAAC8C,EAAWC,QAAQ,CAAC,EAE1E,iEArJSvD,CAA4B,IAAA2D,GAA5B3D,CAA4B,CAAA,CAAA,GAAA,2BAA5BA,EAA4B4D,UAAA,CAAA,CAAA,4BAAA,CAAA,EAAAC,OAAA,CAAA3E,oBAAA,CAAA,EAAA,qBAAA,CAAA,EAAA4E,SAAA,CAAAC,EAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,gBAAA,EAAA,EAAA,CAAA,EAAA,WAAA,WAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,OAAA,SAAA,aAAA,QAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,oBAAA,MAAA,EAAA,CAAA,MAAA,QAAA,eAAA,8BAAA,EAAA,MAAA,EAAA,CAAA,OAAA,oCAAA,EAAA,CAAA,KAAA,QAAA,kBAAA,QAAA,OAAA,OAAA,OAAA,QAAA,EAAA,cAAA,EAAA,CAAA,EAAA,oBAAA,MAAA,EAAA,CAAA,eAAA,gCAAA,EAAA,MAAA,EAAA,CAAA,OAAA,sCAAA,EAAA,CAAA,EAAA,MAAA,MAAA,EAAA,CAAA,kBAAA,UAAA,EAAA,eAAA,mBAAA,yBAAA,kBAAA,mBAAA,UAAA,EAAA,CAAA,eAAA,yCAAA,EAAA,QAAA,eAAA,EAAA,CAAA,eAAA,4BAAA,EAAA,CAAA,OAAA,mCAAA,EAAA,CAAA,EAAA,iBAAA,UAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,qBAAA,GAAA,KAAA,OAAA,OAAA,SAAA,EAAA,MAAA,SAAA,sBAAA,EAAA,gBAAA,WAAA,aAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICvCzC7F,EAAA,EAAA+F,GAAA,GAAA,GAAA,cAAA,KAAA,EAAAC,EAAA,EAkEA1H,EAAA,EAAA;CAAA,kBDrCQ2H,GAAWC,GAAAC,GAAAC,GAAAC,GACXC,GAAmBC,GAAAC,GACnBC,EACAC,GACAC,GACAC,GACAC,GACAC,CAAoB,EAAAC,OAAA,CAAA,6rDAAA,CAAA,CAAA,SAGfvF,CAA6B,GAAA,EE3B1C,IAAsBwF,IAAgB,IAAA,CAAhC,MAAgBA,CAAgB,CACzBC,QACAC,oBACAC,qBAEAC,2BAA6B,GAC7BC,gBAETC,aAAe,GACfC,iBAAmB,CAAEC,EAAG,EAAGC,EAAG,CAAC,EAC/BC,qBAAuB,GACvBC,cAAgB,CAAEH,EAAG,EAAGC,EAAG,CAAC,EAE5BG,aAAe,GACfC,UAAY,GACHC,sBAAwB,EACjCC,qBAAuB,EACvBC,YACAC,eAEAC,QAEUC,oBAAsBC,EAAOC,EAAmB,EAChDC,yBAA2BF,EAAOG,EAAwB,EAC1DC,aAAeJ,EAAOK,CAAY,EAClCC,eAAiBN,EAAOO,CAAiB,EACzCC,OAASR,EAAOS,EAAM,EAGhCC,YAAcA,GACdC,WAAaA,GAEbC,UAAQ,CACJ,KAAKd,QAAU,KAAKjB,QAAQiB,OAChC,CAEAe,aAAW,CACH,KAAKjB,cAAgBkB,SACrBC,aAAa,KAAKnB,WAAW,EAC7B,KAAKoB,4BAA2B,GAGhC,KAAKnB,iBAAmBiB,QACxBG,cAAc,KAAKpB,cAAc,CAEzC,CAEAqB,cAAcC,EAAiB,CAC3B,KAAK1B,UAAY0B,EAEb,KAAKvB,cAAgBkB,QACrBC,aAAa,KAAKnB,WAAW,EAG7B,KAAKC,iBAAmBiB,QACxBG,cAAc,KAAKpB,cAAc,EAGjCsB,IACA,KAAKxB,qBAAuB,KAAKD,sBAEjC,KAAKE,YAAcwB,WACf,IAAK,CACD,KAAKJ,4BAA2B,CACpC,EAEA,KAAKrB,qBAAuB,IAAO,GAAI,EAG3C,KAAKE,eAAiBwB,YAAY,IAAK,CACnC,KAAK1B,qBAAuB2B,KAAKC,IAAI,EAAG,KAAK5B,qBAAuB,CAAC,EACrE,KAAKW,eAAekB,cAAa,CACrC,EAAG,GAAI,EAEf,CAEAC,aAAW,CACP,KAAKC,aAAaD,YAAW,EAC7B,KAAKvC,aAAe,EACxB,CAEAyC,WAAS,CACL,KAAKD,aAAaC,UAAS,EAC3B,KAAKzC,aAAe,GACpB,KAAKoB,eAAekB,cAAa,CACrC,CAEAI,YAAU,CACN,KAAKF,aAAaG,cAAa,EAC/B,KAAK3C,aAAe,EACxB,CAEA4C,gBAAc,CACV,KAAKJ,aAAaI,eAAc,CACpC,CAEAC,eAAa,CACT,OAAO,KAAKL,aAAaK,cAAa,CAC1C,CAEAC,eAAeC,EAAU,CACrB,KAAKP,aAAaM,eAAeC,CAAK,EACtC,KAAK3C,qBAAuB,EAChC,CAEA4C,YAAYD,EAAiB,CACzBA,EAAME,eAAc,EACpB,KAAKjD,aAAe,GAEpB,KAAKK,cAAgB,CACjBH,EAAG6C,EAAMG,QACT/C,EAAG4C,EAAMI,SAGb,KAAK/C,qBAAuB,EAChC,CAEAgD,mBAAiB,CACb,KAAKhD,qBAAuB,CAAC,KAAKA,oBACtC,CAEUiD,gBAAc,CAChB,KAAK1D,QAAQ2D,SACb,KAAKpC,aAAaqC,gBAAgB,KAAK5D,OAAO,EAC9C,KAAKA,QAAQ2D,QAAU,KAEvB,KAAKpC,aAAasC,SAAS,KAAK7D,OAAO,EACvC,KAAKA,QAAQ2D,QAAU,GAE/B,CAEQxB,6BAA2B,CAC3B,KAAKxB,aACL,KAAKY,aAAauC,iBAAiB,KAAK9D,OAAO,EAE/C,KAAKuB,aAAawB,WAAW,KAAK/C,OAAO,CAEjD,CAOA+D,uBAAuBC,EAA2B,CAC9C,IAAMC,EAAS,KAAK1C,aAAa0C,OAC7BC,GAAmBD,CAAM,IACrB,KAAKhE,oBACL,KAAKoB,yBAAyB8C,mBAAmBH,CAAmB,EAAEI,UAAS,EAE/E,KAAKlD,oBAAoBmD,OAAOJ,EAAOK,GAAKN,CAAmB,EAAEI,UAAWG,GAAO,CAC/E,KAAK5C,OAAO6C,SAAS,CAAC,UAAWP,EAAOK,GAAI,eAAe,EAAG,CAC1DG,YAAa,CACTC,eAAgBH,EAAII,KAAML,IAEjC,CACL,CAAC,EAGb,CAKAM,mBAAiB,CACb,GAAI,CAAC,KAAK5E,QAAQ6E,QAAQP,GACtB,OAGJ,IAAMQ,EAAmB,KAAK9E,QAAQ6E,QAAQP,GAExCL,EAAS,KAAK1C,aAAa0C,OAC7BC,GAAmBD,CAAM,IACrB,KAAKhE,oBACL,KAAKoB,yBAAyB0D,yBAAyBD,CAAgB,EAAEV,UAAS,EAElF,KAAKlD,oBAAoB8D,aAAaf,EAAOK,GAAKQ,CAAgB,EAAEV,UAAWG,GAAO,CAClF,KAAK5C,OAAO6C,SAAS,CAAC,UAAWP,EAAOK,GAAI,eAAe,EAAG,CAC1DG,YAAa,CACTC,eAAgBH,EAAII,KAAML,IAEjC,CACL,CAAC,EAGb,4CAzLkBvE,EAAgB,4BAAhBA,EAAgBkF,OAAA,CAAAjF,QAAA,UAAAC,oBAAA,sBAAAC,qBAAA,uBAAAC,2BAAA,6BAAAC,gBAAA,iBAAA,CAAA,CAAA,SAAhBL,CAAgB,GAAA,qCEXlCmF,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EAA8BC,EAAA,WAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAYF,EAAAG,QAAA,CAAS,CAAA,CAAA,EAC/CR,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,8BAAA,CAAA,EAKIC,EAAA,gBAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAAiBF,EAAAG,QAAA,CAAS,CAAA,CAAA,EAL9BC,EAAA,EAUAT,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,2BAAiIC,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAK,MAAA,CAAO,CAAA,CAAA,EAAED,EAAA,EACnJT,EAAA,GAAA;iBAAA,EAAAW,EAAA,GAAA,SAAA,CAAA,2BASJX,EAAA,GAAA;aAAA,EAAAS,EAAA,EACJT,EAAA,GAAA;SAAA,EAAAS,EAAA,EACJT,EAAA,GAAA;KAAA,EAAAS,EAAA,EACJT,EAAA,GAAA;CAAA,oBA1BUY,EAAA,EAAAC,EAAA,YAAAR,EAAAS,SAAA,EAIMF,EAAA,CAAA,EAAAC,EAAA,eAAAR,EAAAU,YAAA,EAA6B,mBAAAV,EAAAW,gBAAA,EACQ,yBAAA,EAAA,EACL,kBAAAX,EAAAY,SAAA,EAEH,mBAAAZ,EAAAS,UAAAI,KAAA,EACO,WAAAb,EAAAc,QAAA,EAITP,EAAA,CAAA,EAAAC,EAAA,cAAAO,EAAA,GAAA,GAAA,yBAAA,CAAA,EAGvBR,EAAA,CAAA,EAAAC,EAAA,gBAAAR,EAAAY,SAAA,EAA2B,WAAAZ,EAAAY,WAAA,CAAAZ,EAAAS,UAAAI,KAAA,EACe,cAAAE,EAAA,GAAA,GAAA,8BAAA,CAAA,GDD9D,IAAaC,IAAmC,IAAA,CAA1C,MAAOA,UAA2CC,EAA2C,CAC/FC,iCAAmCC,EAAK,EACxCC,eAAiBC,EAAM,EACvBC,YAAc,GAKdC,MAAI,CACA,KAAKlB,MAAK,EACV,KAAKa,iCAAgC,GAAIM,mBAAmB,KAAKC,aAAa,EAC9E,KAAKH,YAAc,EACvB,CAKAjB,OAAK,CACD,KAAKa,iCAAgC,GAAIQ,MAAK,EAC9C,KAAKC,eAAc,EACnB,KAAKL,YAAc,EACvB,CAKAK,gBAAc,CACV,KAAKC,QAAU,KAAKA,SAAW,CAAEC,QAAS,EAAE,EAC5C,KAAKpB,UAAY,KAAKqB,YAAYC,MAAM,CAEpCF,QAAS,CAAC,KAAKD,QAAQC,QAAS,CAACG,EAAWC,SAAUD,EAAWE,UAAU,KAAKvB,gBAAgB,EAAGwB,EAA4B,CAAC,EACnI,CACL,CAMAC,eAAa,CACT,KAAKR,QAAQC,QAAU,KAAKpB,UAAU4B,IAAI,SAAS,GAAGC,MACtD,KAAKC,aAAaC,iBAAiB,KAAKZ,OAAO,EAAEa,UAAU,CACvDC,KAAOC,GAA0B,CAC7B,KAAKhB,eAAc,EACnB,KAAKf,UAAY,GACjB,KAAKgC,SAASC,KAAKF,CAAU,EAC7B,KAAKzB,iCAAgC,GAAIQ,MAAK,CAClD,EACAoB,MAAOA,IAAK,CACR,KAAKlC,UAAY,EACrB,EACH,CACL,CAMAmC,eAAa,CACT,KAAKnB,QAAQC,QAAU,KAAKpB,UAAU4B,IAAI,SAAS,GAAGC,MACtD,KAAKC,aAAaS,iBAAiB,KAAKpB,OAAO,EAAEa,UAAU,CACvDC,KAAOO,GAA2B,CAC9B,KAAK7B,eAAeyB,KAAKI,CAAW,EACpC,KAAKrC,UAAY,GACjB,KAAKU,YAAc,GACnB,KAAKJ,iCAAgC,GAAIQ,MAAK,CAClD,EACAoB,MAAOA,IAAK,CACR,KAAKlC,UAAY,EACrB,EACH,CACL,CAKAsC,kBAAgB,CACR,KAAKpC,WAAa,KAAKqC,SAASC,OAChC,KAAKC,WAAa,+BACX,KAAKvC,WAAa,KAAKqC,SAASG,SACvC,KAAKD,WAAa,0CAE1B,iEAjFSrC,CAAkC,IAAAuC,GAAlCvC,CAAkC,CAAA,CAAA,GAAA,2BAAlCA,EAAkCwC,UAAA,CAAA,CAAA,mCAAA,CAAA,EAAAC,OAAA,CAAAvC,iCAAA,CAAA,EAAA,kCAAA,CAAA,EAAAwC,QAAA,CAAAtC,eAAA,gBAAA,EAAAuC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,gBAAA,EAAA,EAAA,CAAA,EAAA,WAAA,WAAA,EAAA,CAAA,kBAAA,UAAA,EAAA,gBAAA,eAAA,mBAAA,yBAAA,kBAAA,mBAAA,UAAA,EAAA,CAAA,EAAA,MAAA,OAAA,UAAA,EAAA,CAAA,qBAAA,GAAA,EAAA,MAAA,SAAA,wBAAA,EAAA,QAAA,aAAA,EAAA,CAAA,qBAAA,GAAA,KAAA,OAAA,OAAA,SAAA,EAAA,MAAA,SAAA,sBAAA,EAAA,gBAAA,WAAA,aAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICjB/CE,EAAA,EAAAC,GAAA,GAAA,GAAA,cAAA,KAAA,EAAAC,EAAA,EA4BA1E,EAAA,EAAA;CAAA,kBDbc2E,GAAWC,GAAAC,GAAAC,GAAEC,GAAmBC,GAAAC,GAAEC,GAAgCC,GAAwBC,CAAoB,EAAAC,OAAA,CAAA;CAAA,EAAAC,cAAA,CAAA,CAAA,SAE/GjE,CAAmC,GAAA,4BGf5CkE,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,YAAA,CAAA,EACJD,EAAA,EAAA;CAAA,kBADeE,EAAA,EAAAC,EAAA,oBAAAC,EAAAC,MAAAC,eAAA,EAA2C,QAAAF,EAAAG,MAAA,CAAA,EAAgC,OAAA,EAAA,6BAEtFP,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,YAAA,CAAA,EACJD,EAAA,EAAA;CAAA,kBADeE,EAAA,EAAAC,EAAA,aAAAC,EAAAC,MAAAG,wBAAA,EAA6C,oBAAAJ,EAAAC,MAAAC,eAAA,EAA4C,QAAAF,EAAAG,MAAA,CAAA,EAAgC,OAAA,EAAA,GDOxI,IAAaE,IAAc,IAAA,CAArB,MAAOA,CAAc,CACfC,aAAeC,EAAOC,EAAY,EAE1CP,MAAQQ,GACRN,MAAQO,EAAc,EAAE,EAExBC,KAAOC,GAAS,IAAM,KAAKN,aAAaO,aAAY,IAAOC,GAAMC,IAAI,6CAN5DV,EAAc,2BAAdA,EAAcW,UAAA,CAAA,CAAA,WAAA,CAAA,EAAAC,OAAA,CAAAd,MAAA,CAAA,EAAA,OAAA,CAAA,EAAAe,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,QAAA,EAAA,oBAAA,QAAA,MAAA,EAAA,CAAA,EAAA,QAAA,EAAA,aAAA,oBAAA,QAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICV3B1B,EAAA,EAAA;CAAA,EAAA4B,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAe,EAAAC,GAAA,EAAA,CAAA,SAAf5B,EAAA,EAAA6B,EAAAJ,EAAAZ,KAAA,EAAA,EAAA,CAAA,kBDQciB,GAAWvB,EAAA,EAAAwB,OAAA,CAAA,8CAAA,CAAA,CAAA,SAEZxB,CAAc,GAAA,+DGRfyB,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,sBAAA,CAAA,EAWAF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EAAiGE,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAG,gBAAA,CAAiB,CAAA,CAAA,EAAET,EAAA,CAAA,EAA0BU,EAAA,EACvJV,EAAA,EAAA;qBAAA,EAAAC,EAAA,GAAA,OAAA,CAAA,EACID,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,OAAA,EAAA,EACID,EAAA,GAAA;6BAAA,EAAAE,EAAA,GAAA,UAAA,EAAA,EACJF,EAAA,GAAA;yBAAA,EAAAU,EAAA,EACAV,EAAA,GAAA;yBAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,2BACJF,EAAA,GAAA;qBAAA,EAAAU,EAAA,EACJV,EAAA,GAAA;iBAAA,EAAAU,EAAA,EACJV,EAAA,GAAA;aAAA,EAAAU,EAAA,EACJV,EAAA,GAAA;SAAA,sBAhBYW,EAAA,CAAA,EAAAC,EAAA,SAAAN,EAAAO,UAAA,CAAA,EAAsB,WAAAP,EAAAQ,gBAAAC,EAAA,EACS,aAAAT,EAAAQ,gBAAAE,IAAA,EACI,WAAAV,EAAAQ,gBAAAG,QAAA,EACE,aAAAX,EAAAY,cAAAC,QAAAb,EAAAQ,gBAAAC,KAAAT,EAAAY,YAAAH,EAAA,EAIXJ,EAAA,CAAA,EAAAC,EAAA,UAAAQ,EAAA,GAAAC,GAAA,CAAAf,EAAAgB,qBAAAC,EAAAjB,EAAAkB,QAAA,IAAA,KAAA,KAAAD,EAAAE,WAAA,CAAA,EAAmGd,EAAA,EAAAe,EAAApB,EAAAQ,gBAAAE,IAAA,EAE3FL,EAAA,CAAA,EAAAC,EAAA,UAAA,uBAAAN,EAAAqB,aAAA,EACjBhB,EAAA,CAAA,EAAAC,EAAA,OAAAN,EAAAsB,iBAAA,EAEPjB,EAAA,CAAA,EAAAkB,EAAA,aAAAC,EAAA,GAAA,GAAAxB,EAAAyB,oBAAA,CAAA,EAA2DnB,EAAA,eAAAN,EAAA0B,aAAA,6BAQzEhC,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EAA+EF,EAAA,EAAA;aAAA,oBAAzEW,EAAA,EAAAC,EAAA,gBAAAqB,EAAA3B,EAAA4B,aAAA,MAAAD,IAAAd,OAAAc,EAAA,EAAA,6BAOVjC,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,0BAMJF,EAAA,EAAA;SAAA,kBALQW,EAAA,EAAAC,EAAA,OAAAN,EAAA6B,aAAA,EAAsB,aAAAL,EAAA,EAAA,EAAA,mDAAA,CAAA,0BAO1B9B,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,YAAA,EAAA,EACJF,EAAA,EAAA;SAAA,0BAEIA,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;SAAA,GDnBR,IAAaoC,IAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAC/BC,aAAeC,EAAK,EACpBd,QAAUc,EAAK,EACfC,aAAeD,EAAe,EAAK,EACnCE,YAAcF,EAAe,EAAK,EAClCG,2BAA6BH,EAAe,EAAK,EACjDI,oBAAsBJ,EAAK,EAC3BzB,UAAYyB,EAAe,EAAK,EAEhCK,YAAcC,EAAM,EACXC,kBAAoBD,EAAM,EAEnCE,4BACAC,uBACAzB,kBACA0B,iBACAd,UACAN,kBACAD,cACAK,cACAD,qBACAb,YAGS+B,YAAcA,GACdd,cAAgBA,GAEjBe,aAAeC,EAAOC,CAAY,EAClCC,eAAiBF,EAAOG,EAAc,EAE9CC,eAAiBC,GAAkB,IAAK,CACpC,IAAMhC,EAAU,KAAKA,QAAO,EAC5B,OAAO,KAAKiC,OAAOjC,CAAO,GAAKA,EAAQkC,WAAa,EACxD,CAAC,EAEDC,aAAeH,GAAkB,IAAK,CAClC,IAAMhC,EAAU,KAAKA,QAAO,EAC5B,OAAO,KAAKiC,OAAOjC,CAAO,GAAKA,EAAQoC,iBAAmBC,EAAgBC,MAC9E,CAAC,EAODC,UAAQ,CACJ,KAAKV,eACAW,uBAAsB,EACtBC,KACGC,GAAKC,GAAc,CACf,KAAKjD,YAAciD,EACnB,KAAKC,kBAAiB,CAC1B,CAAC,CAAC,EAELC,UAAS,EACd,KAAKrB,iBAAmBsB,GAAK,EAAGC,OAAO,KAAK/C,QAAO,GAAIgD,aAAc,KAAK,EAC1E,KAAKtC,UAAY,KAAKuC,aAAY,CACtC,CAEQhB,OAAOjC,EAAyC,CACpD,OAAOA,IAAYL,QAAa,aAAcK,CAClD,CAKAkD,aAAW,CACP,KAAKN,kBAAiB,EACtB,KAAKO,+BAA8B,CACvC,CAEA,IAAIC,SAAO,CACP,OAAO,KAAKpD,QAAO,GAAIgD,cAAcI,QAAQ,KAAKvC,aAAY,CAAE,CACpE,CAEA,IAAIvB,iBAAe,CACf,OAAO,KAAKU,QAAO,GAAIqD,MAC3B,CAEA,IAAIL,cAAY,CACZ,OAAO,KAAKhD,QAAO,GAAIgD,YAC3B,CAKAC,cAAY,CACR,GAAI,KAAKzB,iBACL,MAAO,wBAIf,CASAoB,mBAAiB,CACb,KAAK9C,kBAAoB,KAAK4B,aAAa4B,2BAA2B,KAAKtD,QAAO,CAAG,EACrF,KAAKmD,+BAA8B,CACvC,CAKAA,gCAA8B,CAC1B,IAAMI,EAAyB,0CACzBC,EAA2B,8BACjC,KAAKpD,kBAAoBqD,GACrB,KAAKzD,QAAO,GAAIC,aAAeyD,GAASC,MACxC,KAAKxD,cAAgB,UACrB,KAAKK,cAAgBgD,EAA2B,KAAKrD,cACrD,KAAKI,qBAAuBgD,EAAyB,KAAKpD,eACnD,KAAKH,QAAO,GAAIC,aAAeyD,GAASE,YAC/C,KAAKxD,kBAAoByD,GACzB,KAAK1D,cAAgB,aACrB,KAAKK,cAAgBgD,EAA2B,KAAKrD,cACrD,KAAKI,qBAAuBgD,EAAyB,KAAKpD,eACnD,KAAKH,QAAO,GAAIC,aAAeyD,GAASI,OAC/C,KAAK1D,kBAAoB2D,GACzB,KAAK5D,cAAgB,QACrB,KAAKK,cAAgBgD,EAA2B,KAAKrD,cACrD,KAAKI,qBAAuBgD,EAAyB,KAAKpD,gBAE1D,KAAKA,cAAgB,UACrB,KAAKK,cAAgB,qCACrB,KAAKD,qBAAuB,iDAEpC,CAEUtB,iBAAe,CACjB,KAAKa,mBAAqB,CAAC,KAAKE,QAAO,GAAIC,YAI/C,KAAKoB,kBAAkB2C,KAAI,CAC/B,CAEmBC,gBAAkBA,8CA9I5BrD,EAAsB,2BAAtBA,EAAsBsD,UAAA,CAAA,CAAA,oBAAA,CAAA,EAAAC,OAAA,CAAAtD,aAAA,CAAA,EAAA,cAAA,EAAAb,QAAA,CAAA,EAAA,SAAA,EAAAe,aAAA,CAAA,EAAA,cAAA,EAAAC,YAAA,CAAA,EAAA,aAAA,EAAAC,2BAAA,CAAA,EAAA,4BAAA,EAAAC,oBAAA,CAAA,EAAA,qBAAA,EAAA7B,UAAA,CAAA,EAAA,WAAA,CAAA,EAAA+E,QAAA,CAAAjD,YAAA,cAAAE,kBAAA,mBAAA,EAAAgD,SAAA,CAAAC,CAAA,EAAAC,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,SAAA,0BAAA,EAAA,cAAA,SAAA,EAAA,CAAA,KAAA,qBAAA,EAAA,0BAAA,SAAA,oBAAA,QAAA,WAAA,EAAA,CAAA,EAAA,4BAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,mBAAA,WAAA,EAAA,iBAAA,YAAA,EAAA,CAAA,EAAA,gBAAA,oBAAA,QAAA,WAAA,EAAA,CAAA,iBAAA,OAAA,gBAAA,MAAA,UAAA,uBAAA,mBAAA,+BAAA,EAAA,SAAA,WAAA,aAAA,WAAA,YAAA,EAAA,CAAA,EAAA,WAAA,gBAAA,cAAA,mBAAA,EAAA,CAAA,EAAA,cAAA,EAAA,QAAA,SAAA,EAAA,CAAA,EAAA,aAAA,OAAA,qBAAA,EAAA,CAAA,KAAA,aAAA,EAAA,OAAA,aAAA,EAAA,SAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,aAAA,cAAA,EAAA,CAAA,KAAA,aAAA,EAAA,WAAA,EAAA,cAAA,EAAA,CAAA,WAAA,KAAA,EAAA,WAAA,OAAA,WAAA,OAAA,EAAA,OAAA,YAAA,EAAA,CAAA,QAAA,UAAA,EAAA,YAAA,EAAA,CAAA,eAAA,qBAAA,EAAA,QAAA,eAAA,mBAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IC7BnClG,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAqG,EAAA,EAAAC,GAAA,GAAA,EAAA,EAwBArG,EAAA,EAAA,OAAA,CAAA,EAAyCD,EAAA,EAAA,GAAA,EAACU,EAAA,EAC1CV,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAqG,EAAA,GAAAE,GAAA,EAAA,CAAA,EAGAtG,EAAA,GAAA,OAAA,CAAA,sBACID,EAAA,EAAA,8DACJU,EAAA,EACJV,EAAA,GAAA;SAAA,EAAAU,EAAA,EACAV,EAAA,GAAA;SAAA,EAAAqG,EAAA,GAAAG,GAAA,EAAA,CAAA,EAAwB,GAAAC,GAAA,EAAA,CAAA,EAQF,GAAAC,GAAA,EAAA,CAAA,EAM1BhG,EAAA,EACJV,EAAA,GAAA;CAAA,EAAAU,EAAA,EACAV,EAAA,GAAA;CAAA,SAjDQW,EAAA,CAAA,EAAAgG,EAAAP,EAAAtF,gBAAA,EAAA,EAAA,EA0BIH,EAAA,CAAA,EAAAgG,EAAAP,EAAApD,iBAAA,GAAA,EAAA,EAG4ErC,EAAA,EAAAkB,EAAA,aAAA+E,EAAA,GAAA,EAAAR,EAAA5B,aAAA,MAAA,CAAA,EAApC5D,EAAA,iBAAAwF,EAAApD,gBAAA,EACpCrC,EAAA,CAAA,EAAAkG,EAAA;kBAAAT,EAAApD,iBAAA4D,EAAA,GAAA,GAAAR,EAAA5B,aAAA,MAAA,EAAAoC,EAAA,GAAA,GAAAR,EAAA5B,aAAA,YAAA,EAAA,MAAAoC,EAAA,GAAA,GAAAR,EAAA5B,aAAA,MAAA,EAAA;aAAA,EAGR7D,EAAA,CAAA,EAAAgG,EAAAP,EAAA7C,eAAA,EAAA,GAAA,EAAA,EAQA5C,EAAA,EAAAgG,EAAAP,EAAAzC,aAAA,EAAA,GAAA,EAAA,EAGAhD,EAAA,EAAAgG,EAAAP,EAAA1D,oBAAA,GAAA,CAAA0D,EAAA/D,aAAA,GAAA+D,EAAA/D,aAAA,GAAA+D,EAAA5B,cAAA4B,EAAAxB,SAAA,CAAAwB,EAAA9E,kBAAA,GAAA,EAAA,kBDnBMwF,GAAyBC,EAASC,EAAiBC,GAAYC,EAAoBC,GAAiBC,EAAsBC,EAAc,EAAAC,OAAA,CAAA,6rDAAA,CAAA,CAAA,SAEzIlF,CAAsB,GAAA,EExB7B,IAAOmF,GAAP,KAAe,CACVC,GACAC,KACAC,aACAC,QACAC,KACAC,YCPJ,IAAMC,GAAmB,GACnBC,GAA2B,8BAM3BC,IAA0B,IAAA,CAAjC,MAAOA,CAA0B,CAC3BC,iBAAmBC,EAAOC,EAAgB,EAOlDC,UAAUC,EAAuB,CAC7B,OAAO,IAAIC,GAAYC,GAAiB,CACpCA,EAASC,KAAK,KAAKC,0BAA0BJ,CAAa,CAAC,EAC3D,KAAKJ,iBAAiBS,aAAaC,UAAU,IAAK,CAC9CJ,EAASC,KAAK,KAAKC,0BAA0BJ,CAAa,CAAC,CAC/D,CAAC,CACL,CAAC,CACL,CAOQI,0BAA0BJ,EAAuB,CAErD,GAAIA,EAAcO,SAASb,EAAwB,EAAG,CAClD,GAAIM,EAAcQ,SAAW,EAEzB,OAAO,KAAKZ,iBAAiBa,QAAQ,sBAAsB,EAI/DT,EAAgBA,EAAcU,OAAQC,GAASA,IAASjB,EAAwB,EAChFM,EAAgB,CAAC,KAAKJ,iBAAiBa,QAAQ,sBAAsB,CAAC,EAAEG,OAAOZ,CAAa,CAChG,CAEA,IAAMa,EAAwBb,EAAcQ,OAC5C,GAAIK,EAAwBpB,GAExBO,OAAAA,EAAgBA,EAAcc,MAAM,EAAGrB,EAAgB,EAChDO,EAAce,KAAK,IAAI,EAAI,KAAKnB,iBAAiBa,QAAQ,yCAA0C,CAAEO,OAAQH,EAAwBpB,EAAgB,CAAE,EAC3J,CAEH,IAAIwB,EAAsBjB,EAAce,KAAK,IAAI,EAAI,KAAKnB,iBAAiBa,QAAQ,iCAAiC,EAE9GS,EAAiBD,EAAoBE,YAAY,GAAG,EAC1D,GAAID,EAAiB,GAAI,CACrB,IAAME,EAAkBH,EAAoBI,UAAU,EAAGH,CAAc,EACjEI,EAAiBL,EAAoBI,UAAUH,EAAiB,EAAGD,EAAoBT,MAAM,EACnGS,EAAsBG,EAAkB,KAAKxB,iBAAiBa,QAAQ,sBAAsB,EAAIa,CACpG,CACA,OAAOL,CACX,CACJ,4CApDStB,EAA0B,2DAA1BA,EAA0B4B,KAAA,EAAA,CAAA,SAA1B5B,CAA0B,GAAA,kKEHvB6B,EAAA,EAAA;iBAAA,EAAAC,GAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACIF,EAAA,CAAA,EACAE,EAAA,EAAA,SAAA,EAAA,EAAwFC,EAAA,QAAA,UAAA,CAAA,IAAAC,EAAAC,EAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAG,sBAAAP,CAAA,CAA8B,CAAA,CAAA,EAAEQ,EAAA,EACrIZ,EAAA,EAAA;qBAAA,EAAAY,EAAA,EACJZ,EAAA,EAAA;iBAAA,OACJA,EAAA,EAAA;aAAA,4BAJYa,EAAA,CAAA,EAAAC,EAAA;0BAAAV,EAAAW,KAAA;yBAAA,sCAMRf,EAAA,EAAA;iBAAA,EAAAC,GAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACIF,EAAA,CAAA,EACAE,EAAA,EAAA,SAAA,EAAA,EAAwFC,EAAA,QAAA,UAAA,CAAA,IAAAa,EAAAX,EAAAY,CAAA,EAAAV,UAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAU,mBAAAF,CAAA,CAAwB,CAAA,CAAA,EAAEJ,EAAA,EAC/HZ,EAAA,EAAA;qBAAA,EAAAY,EAAA,EACJZ,EAAA,EAAA;iBAAA,OACJA,EAAA,EAAA;aAAA,4BAJYa,EAAA,CAAA,EAAAC,EAAA;0BAAAE,EAAAD,KAAA;yBAAA,0BAyBIf,EAAA,EAAA;6BAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EAAmBF,EAAA,EAAA,GAAA,EAACY,EAAA,EACxBZ,EAAA,EAAA;yBAAA,6BACIA,EAAA,EAAA;6BAAA,EAAAmB,EAAA,EAAA,sBAAA,EAAA,EAUJnB,EAAA,EAAA;yBAAA,uCALQa,EAAA,EAAAO,EAAA,YAAAC,EAAAb,EAAAc,cAAA,IAAA,MAAAD,EAAAE,QAAA,KAAA,KAAAF,EAAAE,OAAAC,EAAA,EAAwC,cAAAC,EAAAjB,EAAAc,cAAA,IAAA,MAAAG,EAAAF,QAAA,KAAA,KAAAE,EAAAF,OAAAR,IAAA,EACI,WAAAW,EAAAC,GAAA,sCAdxD3B,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,KAAA,EAAA,EAGIC,EAAA,YAAA,UAAA,CAAA,IAAAuB,EAAArB,EAAAuB,CAAA,EAAArB,UAAAC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAAaF,EAAAqB,aAAAH,CAAA,CAAoB,CAAA,CAAA,EAEjC1B,EAAA,EAAA;yBAAA,EAAA8B,EAAA,EAAAC,GAAA,EAAA,CAAA,EAAiC,EAAAC,GAAA,EAAA,CAAA,EAcjChC,EAAA,CAAA,EACJY,EAAA,EACJZ,EAAA,EAAA;iBAAA,4BAnBQa,EAAA,EAAAO,EAAA,UAAAa,GAAA,EAAAC,GAAAR,EAAAS,OAAA,UAAAT,EAAAS,OAAA,MAAA,CAAA,EAGAtB,EAAA,CAAA,EAAAuB,EAAAV,EAAAS,OAAA,UAAA,EAAA,CAAA,EAcAtB,EAAA,CAAA,EAAAC,EAAA;0BAAAY,EAAAX,KAAA;qBAAA,6BArBZf,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,KAAA,EAAA,EACIF,EAAA,EAAA;iBAAA,EAAAqC,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,EAAA,EAuBJ3B,EAAA,EACJZ,EAAA,EAAA;SAAA,kBAxBQa,EAAA,CAAA,EAAA2B,EAAAhC,EAAAiC,eAAA,sCAyEIzC,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,SAAA,EAAA,EAA0EC,EAAA,QAAA,UAAA,CAAAE,EAAAqC,CAAA,EAAA,IAAAlC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAmC,+BAAA,CAAgC,CAAA,CAAA,EAC/G3C,EAAA,CAAA,kDACJY,EAAA,EACJZ,EAAA,EAAA;iBAAA,qBAFQa,EAAA,CAAA,EAAAC,EAAA;0BAAAN,EAAAoC,yBAAAC,EAAA,EAAA,EAAA,mCAAA,EAAAA,EAAA,EAAA,EAAA,mCAAA,EAAA;qBAAA,6BA7BhB7C,EAAA,EAAA;SAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;aAAA,EAAAmB,EAAA,EAAA,MAAA,EAAA,EACAnB,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,MAAA,EAAA,EACIF,EAAA,EAAA;qBAAA,EAAAmB,EAAA,EAAA,sBAAA,EAAA,EAUAnB,EAAA,GAAA;qBAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,EAAuCF,EAAA,EAAA,EAAmCY,EAAA,EAC9EZ,EAAA,GAAA;iBAAA,EAAAY,EAAA,EACAZ,EAAA,GAAA;iBAAA,EAAAE,EAAA,GAAA,MAAA,GAAA,CAAA,EACIF,EAAA,GAAA;qBAAA,EAAAmB,EAAA,GAAA,sBAAA,EAAA,EASJnB,EAAA,GAAA;iBAAA,EAAAY,EAAA,EACAZ,EAAA,GAAA;iBAAA,EAAA8B,EAAA,GAAAgB,GAAA,EAAA,CAAA,EAKJlC,EAAA,EACJZ,EAAA,GAAA;SAAA,EAAAY,EAAA,EACJZ,EAAA,GAAA;KAAA,gCAzBoBa,EAAA,CAAA,EAAAO,EAAA,YAAA2B,EAAAvC,EAAAc,cAAA,IAAA,MAAAyB,EAAAxB,QAAA,KAAA,KAAAwB,EAAAxB,OAAAC,EAAA,EAAwC,cAAAwB,EAAAxC,EAAAc,cAAA,IAAA,MAAA0B,EAAAzB,QAAA,KAAA,KAAAyB,EAAAzB,OAAAR,IAAA,EACI,YAAAkC,EAAAzC,EAAAc,cAAA,IAAA,MAAA2B,EAAA1B,QAAA,KAAA,KAAA0B,EAAA1B,OAAA2B,QAAA,EAITrC,EAAA,CAAA,EAAAsC,GAAAC,EAAA5C,EAAAc,cAAA,IAAA,MAAA8B,EAAA7B,QAAA,KAAA,KAAA6B,EAAA7B,OAAAR,IAAA,EAEPF,EAAA,CAAA,EAAAO,EAAA,UAAAiC,EAAA,GAAAC,GAAA9C,EAAAoC,wBAAA,CAAA,EAE5B/B,EAAA,CAAA,EAAAO,EAAA,cAAA,EAAA,EAAqB,WAAAmC,EAAA/C,EAAAc,cAAA,IAAA,KAAA,KAAAiC,EAAAC,OAAA,EACgB,UAAAC,EAAAjD,EAAAc,cAAA,IAAA,KAAA,KAAAmC,EAAAlC,MAAA,EACF,WAAA,CAAA,GAAAmC,EAAAlD,EAAAc,cAAA,IAAA,MAAAoC,EAAAC,YAAA,EACQ,UAAAnD,EAAAc,cAAA,CAAA,EACf,UAAA,EAAA,EACX,qBAAA,EAAA,EAIzBT,EAAA,CAAA,EAAAuB,EAAA5B,EAAAoD,cAAA,GAAA,EAAA,GDpEhB,IAAaC,IAA6B,IAAA,CAApC,MAAOA,CAA6B,CACtCC,SAAWC,EAA0B,CAAA,CAAE,EACvCC,MAAQD,EAAiC,CAAA,CAAE,EAC3CzC,cAAgByC,EAAyBE,MAAS,EAClDC,SAAWH,EAA2BE,MAAS,EAC/CE,aAAeC,EAA4BC,GAAqBC,MAAM,EACtEC,iBAAiC,CAAA,EACjCC,cAAqC,CAAA,EACrCC,iBAAiC,CAAA,EACjCC,cAAqC,CAAA,EACrCC,gBAAoC,CAAA,EACpClC,gBAAoC,CAAA,EACpCmC,eACAC,WAAqB,GACrBC,QAAU,IAAIC,GACdC,eAAiB,GACjBC,aAAe,GACfrC,yBAA2B,GAC3BgB,cAAgB,GAENsB,YAAcC,EAAOC,EAAc,EACnCC,YAAcC,EAAsB,aAAa,EACjDC,eAAiBD,EAAsB,gBAAgB,EAEzDE,wBAA0BL,EAAOM,EAAuB,EACxDC,IAAMP,EAAOQ,CAAiB,EAC9BC,SAAWT,EAAOU,EAAS,EAEnCC,UAAQ,CACJ,KAAKvB,iBAAmB,KAAKT,SAAQ,GAAM,CAAA,EAC3C,KAAKc,eAAiB,CAAC,IAAImB,GAAc,IAAIC,GAAgB,IAAIC,GAAmB,IAAIC,GAAe,IAAIC,GAAc,IAAIC,GAAmB,IAAIC,EAAW,EAC/J,KAAK7B,cAAgB,KAAKR,MAAK,EAE/B,KAAKW,gBAAkB,CACnB,GAAG,KAAKb,SAAQ,EACXwC,OAAQC,GAAwBA,EAAQxF,OAASkD,MAAS,EAC1DuC,IAAKD,IAAa,CACf/E,GAAI+E,EAAQ/E,GACZT,KAAMwF,EAAQxF,KACdoB,KAAM,UACNR,IAAK,IACP,EACN,GAAG,KAAKqC,MAAK,EAAGwC,IAAKC,IAAU,CAC3BjF,GAAIiF,EAAKjF,GACTT,KAAM0F,EAAK1F,KACXoB,KAAM,OACNR,IAAK8E,EAAKvD,UACZ,CAAC,EAGP,KAAKwD,cAAa,EAClB,KAAKC,WAAU,CACnB,CAEAC,iBAAe,CACXC,WAAW,IAAK,CACZ,KAAKC,wBAAuB,CAChC,EAAG,CAAC,CACR,CAEAA,yBAAuB,CACnB,GAAI,KAAKvB,eAAgB,CACrB,IAAMwB,EAAgB,KAAKxB,eAAc,EAAIwB,cAC7C,KAAKnD,cAAgBmD,EAAcC,aAAeD,EAAcE,aAChE,KAAKvB,IAAIwB,cAAa,CAC1B,CACJ,CAEAvE,gCAA8B,CAC1B,KAAKC,yBAA2B,CAAC,KAAKA,wBAC1C,CAEAuE,YAAY3D,EAAe,CACvB,KAAKsB,QAAQtB,QAAUA,CAC3B,CAEA4D,YAAYC,EAAY,CACpB,KAAKxC,WAAcwC,EAAMC,OAA4BC,MACrD,KAAKb,cAAa,CACtB,CAEAA,eAAa,CACT,GAAI,KAAK7B,WAAY,CACjB,IAAM2C,EAAsB,KAAK3C,WAAW4C,YAAW,EAEnDD,EAAoBE,QAAU,EAC9B,KAAKlC,wBACAmC,YAAY,KAAKzD,SAAQ,EAAKsD,EAAqB,CAAC,WAAY,SAAU,aAAa,CAAC,EACxFI,KACGpB,GAAKqB,GAAaA,EAASC,MAAQ,CAAA,CAAE,EACrCtB,GAAKxC,GAAUA,EAAMsC,OAAQG,GAAS,CAAC,KAAK/B,cAAcqD,KAAMC,GAAiBA,EAAaxG,KAAOiF,EAAKjF,EAAE,CAAC,CAAC,EAC9GyG,GAAW,IACAC,GAAG,CAAA,CAAE,CACf,CAAC,EAELC,UAAWnE,GAAS,CACjB,KAAKQ,cAAgBR,EACrB,KAAKoE,sBAAqB,EAC1B,KAAK1C,IAAIwB,cAAa,CAC1B,CAAC,EAEL,KAAK1C,cAAgB,CAAA,EAGzB,KAAKD,iBAAmB,KAAKT,SAAQ,EAAGwC,OAAQC,GAAwBA,EAAQxF,MAAM0G,YAAW,EAAGY,SAASb,CAAmB,CAAC,EACjI,KAAKY,sBAAqB,CAC9B,MACI,KAAK5D,cAAgB,CAAC,GAAG,KAAKR,MAAK,CAAE,EACrC,KAAKO,iBAAmB,CAAC,GAAG,KAAKT,SAAQ,CAAE,EAC3C,KAAKsE,sBAAqB,CAElC,CAEQA,uBAAqB,CACzB,KAAK3F,gBAAkB,CACnB,GAAG,KAAK8B,iBAAiBiC,IAAKD,IAAa,CACvC/E,GAAI+E,EAAQ/E,GACZT,KAAMwF,EAAQxF,KACdoB,KAAM,UACNR,IAAK,IACP,EACF,GAAG,KAAK6C,cAAcgC,IAAKC,IAAU,CACjCjF,GAAIiF,EAAKjF,GACTT,KAAM0F,EAAK1F,KACXoB,KAAM,OACNR,IAAK8E,EAAKvD,UACZ,CAAC,CAEX,CAEArB,aAAayG,EAAsB,CAC/B,GAAIA,EAAOnG,OAAS,WAEhB,GAAI,CADa,KAAKsC,iBAAiBsD,KAAMQ,GAAOA,EAAiB/G,KAAO8G,EAAO9G,EAAE,EACtE,CACX,IAAM+E,EAAU,KAAKzC,SAAQ,GAAIiE,KAAMQ,GAAOA,EAAiB/G,KAAO8G,EAAO9G,EAAE,EAC3E+E,GACA,KAAK9B,iBAAiB+D,KAAKjC,CAAO,CAE1C,UACO+B,EAAOnG,OAAS,QAEnB,CADa,KAAKuC,cAAcqD,KAAMtB,GAASA,EAAKjF,KAAO8G,EAAO9G,EAAE,EACzD,CACX,IAAMiF,EAAO,KAAKjC,cAAcuD,KAAMtB,GAASA,EAAKjF,KAAO8G,EAAO9G,EAAE,EAChEiF,GACA,KAAK/B,cAAc8D,KAAK/B,CAAI,CAEpC,CAEJ,KAAK5B,WAAa,GAClB,KAAK6B,cAAa,EAClB,KAAKzB,aAAe,GACpB,KAAK0B,WAAU,CACnB,CAEAhG,sBAAsB4F,EAAmB,CACrC,IAAMkC,EAAQ,KAAKhE,iBAAiBiE,UAAWH,GAAMA,EAAE/G,KAAO+E,EAAQ/E,EAAE,EACpEiH,EAAQ,IACR,KAAKhE,iBAAiBkE,OAAOF,EAAO,CAAC,EAEzC,KAAK9B,WAAU,CACnB,CAEAzF,mBAAmBuF,EAAuB,CACtC,IAAMgC,EAAQ,KAAK/D,cAAcgE,UAAWE,GAAMA,EAAEpH,KAAOiF,EAAKjF,EAAE,EAC9DiH,EAAQ,IACR,KAAK/D,cAAciE,OAAOF,EAAO,CAAC,EAEtC,KAAK9B,WAAU,CACnB,CAEAkC,MAAI,CACA,IAAMC,EAAgB,CAClBhF,SAAU,KAAKW,iBACfT,MAAO,KAAKU,cACZa,eAAgB,KAAKT,QAAQtB,SAEjC,KAAK0B,YAAY6D,MAAMD,CAAa,CACxC,CAEAE,eAAa,CACT,OAAO,KAAKvE,iBAAiBiD,OAAS,GAAK,KAAKhD,cAAcgD,OAAS,CAC3E,CAEAuB,cAAY,CACR,KAAKjE,eAAiB,GACtB,KAAKC,aAAe,EACxB,CAEAiE,aAAW,CACP,KAAKlE,eAAiB,GACtB,KAAKC,aAAe,EACxB,CAEA0B,YAAU,CACF,KAAKtB,aACL,KAAKO,SAASuD,kBAAkB,KAAK9D,YAAW,EAAI0B,cAAe,EAAI,EAAEqC,MAAK,CAEtF,CAGAC,eAAehC,EAAY,CACnB,KAAKhC,aAAe,CAAC,KAAKA,YAAW,EAAI0B,cAAcuC,SAASjC,EAAMC,MAAM,IAC5E,KAAKrC,aAAe,GAE5B,CAEmBZ,qBAAuBA,8CA9MjCR,EAA6B,2BAA7BA,EAA6B0F,UAAA,CAAA,CAAA,4BAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,gGAA7BtJ,EAAA,QAAA,SAAAwJ,EAAA,CAAA,OAAAD,EAAAL,eAAAM,CAAA,CAAsB,EAAA,GAAAC,EAAA,yDAFpB,CAACC,EAAcC,GAAoBC,EAAc,CAAC,CAAA,EAAAC,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,cAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,eAAA,0CAAA,EAAA,aAAA,EAAA,CAAA,OAAA,SAAA,aAAA,QAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,yBAAA,OAAA,OAAA,YAAA,EAAA,CAAA,EAAA,sBAAA,eAAA,EAAA,OAAA,EAAA,CAAA,OAAA,OAAA,EAAA,YAAA,EAAA,gBAAA,QAAA,QAAA,OAAA,cAAA,SAAA,EAAA,CAAA,eAAA,qCAAA,EAAA,CAAA,EAAA,kBAAA,0BAAA,QAAA,EAAA,iBAAA,WAAA,eAAA,mBAAA,qBAAA,cAAA,gBAAA,cAAA,iBAAA,sBAAA,qBAAA,oBAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,eAAA,6CAAA,EAAA,MAAA,cAAA,EAAA,QAAA,UAAA,EAAA,CAAA,EAAA,QAAA,aAAA,MAAA,EAAA,CAAA,OAAA,SAAA,aAAA,SAAA,EAAA,YAAA,kBAAA,SAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,QAAA,eAAA,MAAA,EAAA,CAAA,WAAA,IAAA,EAAA,aAAA,uBAAA,EAAA,CAAA,EAAA,kBAAA,yBAAA,EAAA,YAAA,SAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,MAAA,gBAAA,MAAA,UAAA,uBAAA,mBAAA,+BAAA,EAAA,eAAA,SAAA,EAAA,WAAA,aAAA,UAAA,EAAA,CAAA,EAAA,6BAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,2BAAA,EAAA,CAAA,EAAA,0BAAA,EAAA,CAAA,EAAA,0BAAA,EAAA,CAAA,KAAA,iBAAA,EAAA,yBAAA,EAAA,SAAA,EAAA,CAAA,EAAA,cAAA,UAAA,SAAA,WAAA,UAAA,UAAA,oBAAA,EAAA,CAAA,OAAA,SAAA,EAAA,MAAA,WAAA,MAAA,EAAA,QAAA,cAAA,EAAA,OAAA,CAAA,EAAAC,SAAA,SAAAV,EAAAC,EAAA,CAAA,GAAAD,EAAA,EAAA,WCtCjEvJ,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;KAAA,EAAAmB,EAAA,EAAA,KAAA,CAAA,EACAnB,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,SAAA,CAAA,EAA2DC,EAAA,QAAA,UAAA,CAAAiK,OAAA/J,EAAAgK,CAAA,EAAA3J,EAASgJ,EAAAxE,YAAAoF,QAAA,CAAqB,CAAA,CAAA,EAAE1J,EAAA,EAC/FZ,EAAA,EAAA;CAAA,EAAAY,EAAA,EACAZ,EAAA,EAAA;CAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,EAAA;KAAA,EAAAE,EAAA,EAAA,MAAA,CAAA,EACIF,EAAA,GAAA;SAAA,EAAAE,EAAA,GAAA,MAAA,CAAA,EAA8CC,EAAA,QAAA,UAAA,CAAAiK,OAAA/J,EAAAgK,CAAA,EAAA3J,EAASgJ,EAAA/C,WAAA,CAAY,CAAA,CAAA,EAC/D3G,EAAA,GAAA;aAAA,EAAAqC,EAAA,GAAAkI,GAAA,EAAA,EAAA,KAAA,KAAAhI,EAAA,EAQAF,EAAA,GAAAmI,GAAA,EAAA,EAAA,KAAA,KAAAjI,EAAA,EAQArC,EAAA,GAAA,QAAA,EAAA,CAAA,2BAKIuK,GAAA,gBAAA,SAAAd,EAAA,CAAAS,OAAA/J,EAAAgK,CAAA,EAAAK,GAAAhB,EAAA7E,WAAA8E,CAAA,IAAAD,EAAA7E,WAAA8E,GAAAjJ,EAAAiJ,CAAA,CAAA,CAAA,EACAxJ,EAAA,QAAA,SAAAwJ,EAAA,CAAAS,OAAA/J,EAAAgK,CAAA,EAAA3J,EAASgJ,EAAAtC,YAAAuC,CAAA,CAAmB,CAAA,CAAA,EAAC,QAAA,UAAA,CAAAS,OAAA/J,EAAAgK,CAAA,EAAA3J,EACpBgJ,EAAAT,aAAA,CAAc,CAAA,CAAA,EAAC,OAAA,UAAA,CAAAmB,OAAA/J,EAAAgK,CAAA,EAAA3J,EAChBgJ,EAAAR,YAAA,CAAa,CAAA,CAAA,EARzBtI,EAAA,EAUJZ,EAAA,GAAA;SAAA,EAAAY,EAAA,EACAZ,EAAA,GAAA;SAAA,EAAA8B,EAAA,GAAA6I,GAAA,EAAA,CAAA,EA2BJ/J,EAAA,EAEAZ,EAAA,GAAA;;KAAA,EAAAmB,EAAA,GAAA,KAAA,CAAA,EACAnB,EAAA,GAAA;KAAA,EAAAE,EAAA,GAAA,6BAAA,EAAA,EAGIC,EAAA,iBAAA,SAAAwJ,EAAA,CAAAS,OAAA/J,EAAAgK,CAAA,EAAA3J,EAAkBgJ,EAAAvC,YAAAwC,CAAA,CAAmB,CAAA,CAAA,EAHzC/I,EAAA,EAgBAZ,EAAA,GAAA;;KAAA,EAAA8B,EAAA,GAAA8I,GAAA,GAAA,EAAA,EAoCJhK,EAAA,EACAZ,EAAA,GAAA;CAAA,EAAAE,EAAA,GAAA,MAAA,EAAA,EACIF,EAAA,GAAA;KAAA,EAAAE,EAAA,GAAA,SAAA,EAAA,EAA4EC,EAAA,QAAA,UAAA,CAAAiK,OAAA/J,EAAAgK,CAAA,EAAA3J,EAASgJ,EAAAb,KAAA,CAAM,CAAA,CAAA,EAA4DjI,EAAA,EAC3JZ,EAAA,GAAA;CAAA,EAAAY,EAAA,EACAZ,EAAA,GAAA;CAAA,QAjHYa,EAAA,EAAA,EAAA2B,EAAAkH,EAAAjF,gBAAA,EAQA5D,EAAA,CAAA,EAAA2B,EAAAkH,EAAAhF,aAAA,EAYI7D,EAAA,CAAA,EAAAgK,EAAA,cAAAhI,EAAA,GAAA,GAAA,oCAAA,CAAA,EACAiI,GAAA,UAAApB,EAAA7E,UAAA,EAMRhE,EAAA,CAAA,EAAAuB,EAAAsH,EAAAzE,cAAAyE,EAAAjH,gBAAAiF,OAAA,EAAA,GAAA,EAAA,EAgCA7G,EAAA,CAAA,EAAAO,EAAA,WAAAsI,EAAA5E,QAAAtB,OAAA,EAA4B,eAAA,EAAA,EAEN,mBAAA,EAAA,EACI,qBAAA,EAAA,EACC,cAAAS,MAAA,EACF,gBAAAA,MAAA,EACE,cAAA8G,GAAA,GAAAC,EAAA,CAAA,EACT,iBAAAtB,EAAA9E,cAAA,EACe,sBAAA8E,EAAAvF,aAAA,CAAA,EACK,qBAAAuF,EAAAvF,aAAA,CAAA,EACD,qBAAAuF,EAAArF,qBAAA4G,MAAA,EAIzCpK,EAAA,CAAA,EAAAuB,EAAAsH,EAAApI,cAAA,EAAA,GAAA,EAAA,EAsC8CT,EAAA,CAAA,EAAAO,EAAA,WAAA,CAAAsI,EAAAV,cAAA,CAAA,kBDjFpCkC,EAAsBC,GAAyBC,EAASC,GAAyBC,GAA+BC,GAAWC,GAAAC,GAAAC,GAAEC,CAAkB,EAAAC,OAAA,CAAA,wzEAAA,CAAA,CAAA,SAGhJ/H,CAA6B,GAAA,mFGrC9BgI,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EAAoDC,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAG,oBAAA,EAAwBH,EAAAI,WAAAC,KAAA,EAAoBL,EAAAM,eAAA,CAAgB,CAAA,CAAA,EACrHX,EAAA,EAAA;qBAAA,EAAAY,EAAA,EAAA,UAAA,CAAA,EACAZ,EAAA,EAAA;qBAAA,EAAAY,EAAA,EAAA,OAAA,CAAA,EACJZ,EAAA,EAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,EAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;SAAA,qBAJqDc,EAAA,CAAA,EAAAC,EAAA,OAAAV,EAAAW,YAAA,sCAO7ChB,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EAAgHC,EAAA,QAAA,UAAA,CAAAC,EAAAc,CAAA,EAAA,IAAAZ,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAa,gBAAA,CAAiB,CAAA,CAAA,EACtIlB,EAAA,EAAA;yBAAA,EAAAY,EAAA,EAAA,YAAA,CAAA,EACAZ,EAAA,EAAA;yBAAA,EAAAY,EAAA,EAAA,OAAA,EAAA,EACJZ,EAAA,EAAA;qBAAA,EAAAa,EAAA,EACJb,EAAA,EAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;aAAA,qBALuEc,EAAA,CAAA,EAAAK,GAAA,2BAAAd,EAAAe,YAAA,CAAA,EAChDN,EAAA,CAAA,EAAAC,EAAA,QAAAV,EAAAgB,YAAA,sCAKnBrB,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAA6DC,EAAA,QAAA,UAAA,CAAAC,EAAAmB,CAAA,EAAA,IAAAjB,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAM,eAAA,CAAgB,CAAA,CAAA,EAClFX,EAAA,EAAA;yBAAA,EAAAY,EAAA,EAAA,UAAA,CAAA,EACAZ,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EAA0BD,EAAA,CAAA,mDAIxBa,EAAA,EACNb,EAAA,GAAA;qBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;aAAA,uBARqDc,EAAA,CAAA,EAAAC,EAAA,OAAAV,EAAAW,YAAA,EACfF,EAAA,CAAA,EAAAS,IAAAC,EAAAnB,EAAAoB,kBAAA,IAAA,KAAA,KAAAD,EAAAE,UAAA,EAAAC,EAAA,EAAA,EAAA,mCAAA,EAAAC,EAAA,GAAA,EAAA,uCAAAC,EAAA,EAAAC,IAAAN,EAAAnB,EAAAoB,kBAAA,IAAA,KAAA,KAAAD,EAAAE,MAAA,CAAA,CAAA,6BAXtC1B,EAAA,EAAA;aAAA,EAAA+B,EAAA,EAAAC,GAAA,GAAA,CAAA,EAAqB,EAAAC,GAAA,GAAA,CAAA,mBAArBnB,EAAA,EAAAoB,EAAA7B,EAAAe,YAAA,EAAA,EAAA,CAAA,sCAoBApB,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAA6DC,EAAA,QAAA,UAAA,CAAAC,EAAAgC,CAAA,EAAA,IAAA9B,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAAI,WAAAC,KAAA,CAAiB,CAAA,CAAA,EACnFV,EAAA,EAAA;qBAAA,EAAAY,EAAA,EAAA,UAAA,EAAA,EACAZ,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EAA+BD,EAAA,CAAA,mDAI7Ba,EAAA,EACNb,EAAA,GAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;SAAA,uBARqBc,EAAA,CAAA,EAAAC,EAAA,OAAAV,EAAAW,YAAA,EACsBF,EAAA,CAAA,EAAAS,IAAAa,EAAA/B,EAAAoB,kBAAA,IAAA,KAAA,KAAAW,EAAAV,UAAA,EAAAC,EAAA,EAAA,EAAA,mCAAA,EAAAC,EAAA,GAAA,EAAA,uCAAAC,EAAA,EAAAC,IAAAM,EAAA/B,EAAAoB,kBAAA,IAAA,KAAA,KAAAW,EAAAV,MAAA,CAAA,CAAA,6BAhC3C1B,EAAA,EAAA;SAAA,EAAA+B,EAAA,EAAAM,GAAA,GAAA,CAAA,EAAuD,EAAAC,GAAA,EAAA,CAAA,EAQM,EAAAC,GAAA,GAAA,CAAA,sBAR7DzB,EAAA,EAAAoB,EAAA7B,EAAAmC,SAAA,KAAAC,EAAApC,EAAAoB,kBAAA,IAAA,KAAA,KAAAgB,EAAAf,UAAA,EAAA,EAAA,EAAA,EAQAZ,EAAA,EAAAoB,EAAA,CAAA7B,EAAAG,oBAAA,KAAAkC,EAAArC,EAAAoB,kBAAA,IAAA,MAAAiB,EAAAhB,QAAA,EAAA,CAAArB,EAAAsC,gBAAA,GAAA,CAAAtC,EAAAe,YAAA,KAAAsB,EAAArC,EAAAoB,kBAAA,IAAA,MAAAiB,EAAAhB,QAAA,EAAA,EAAA,sCAoCI1B,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,6CAIIC,EAAA,QAAA,UAAA,CAAAC,EAAAyC,CAAA,EAAA,IAAAC,EAAAvC,EAAA,EAAAwC,UAAAzC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAA0C,eAAAF,EAAAG,GAAA,CAAoC,CAAA,CAAA,EAG7ChD,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;yBAAA,EAAAY,EAAA,EAAA,YAAA,CAAA,EACAZ,EAAA,GAAA;yBAAA,EAAAC,EAAA,GAAA,OAAA,EAAA,EACID,EAAA,EAAA,EACJa,EAAA,EACJb,EAAA,GAAA;qBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;iBAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;SAAA,oCAZYc,EAAA,CAAA,EAAAK,GAAA,2BAAA0B,EAAAI,MAAAC,UAAA,EAFAnC,EAAA,WAAAV,EAAA8C,eAAA,CAAA,EAA6B,aAAAxB,EAAA,EAAA,GAAAA,EAAA,EAAA,EAAAkB,EAAAI,MAAAG,aAAA,CAAA,CAAA,EAOdtC,EAAA,CAAA,EAAAC,EAAA,QAAA8B,EAAAG,GAAA,EACelC,EAAA,CAAA,EAAAK,GAAA,0BAAA0B,EAAAI,MAAAC,UAAA,EACtBpC,EAAA,EAAAuC,EAAA;8BAAAR,EAAAI,MAAAK,MAAA;yBAAA,6BAZpBtD,EAAA,EAAA;SAAA,EAAA+B,EAAA,EAAAwB,GAAA,GAAA,EAAA,kBAAAzC,EAAA,EAAAoB,EAAA7B,EAAAmD,aAAA,EAAA,EAAA,EAAA,sCAwCYxD,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,mBAAA,EAAA,EAEIC,EAAA,cAAA,SAAAuD,EAAA,CAAAtD,EAAAuD,CAAA,EAAA,IAAArD,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAAeF,EAAAsD,eAAAF,CAAA,CAAsB,CAAA,CAAA,EAFzC5C,EAAA,EAMJb,EAAA,EAAA;iBAAA,qBALQc,EAAA,EAAAC,EAAA,qBAAAV,EAAAuD,kBAAA,EAAyC,kBAAAvD,EAAAwD,eAAA,EAEN,SAAAxD,EAAAyD,oBAAA,sCApB/C9D,EAAA,EAAA;aAAA,EAAA+D,GAAA,CAAA,EACI/D,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,GAAA,CAAA,EAAwDC,EAAA,QAAA,UAAA,CAAAC,EAAA6D,CAAA,EAAA,IAAA3D,EAAAC,EAAA,EAAA,OAAAC,EAAAF,EAAA4D,qBAAA,CAAA5D,EAAA4D,oBAAA,CAAA,CAAA,EACpDjE,EAAA,EAAA;qBAAA,EAAAY,EAAA,EAAA,UAAA,EAAA,0BAKJZ,EAAA,EAAA;iBAAA,EAAAa,EAAA,EAEAb,EAAA,EAAA;;iBAAA,EAAA+B,EAAA,GAAAmC,GAAA,EAAA,EAAA,cAAA,EAAA,EAMIhE,EAAA,gBAAA,UAAA,CAAAC,EAAA6D,CAAA,EAAA,IAAA3D,EAAAC,EAAA,EAAA,OAAAC,EAAiBF,EAAA8D,kBAAA,CAAmB,CAAA,CAAA,EAS5CnE,EAAA,GAAA;aAAA,OACJA,EAAA,GAAA;SAAA,2BArBgBc,EAAA,CAAA,EAAAK,GAAA,gBAAAd,EAAA4D,oBAAA,EADAlD,EAAA,QAAAV,EAAA+D,eAAA,IAAA,OAAA/D,EAAAgE,QAAA,EAAwD,QAAA1C,EAAA,EAAA,EAAA,iCAAA,CAAA,EAQ5Db,EAAA,CAAA,EAAAC,EAAA,iCAAA,EAAA,EAAuC,mCAAA,kCAAA,EACgC,4BAAAuD,CAAA,EAClC,0BAAAjE,EAAA4D,oBAAA,sCAgB7CjE,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,0BAA6DC,EAAA,QAAA,UAAA,CAAAC,EAAAoE,CAAA,EAAA,IAAAlE,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAmE,YAAA,CAAa,CAAA,CAAA,EAC/ExE,EAAA,EAAA;iBAAA,EAAAY,EAAA,EAAA,UAAA,EAAA,EACJZ,EAAA,EAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,EAAA;SAAA,oBAHyFc,EAAA,EAAAC,EAAA,aAAAY,EAAA,EAAA,EAAA,8BAAA,CAAA,EACxEb,EAAA,CAAA,EAAAC,EAAA,OAAAV,EAAAoE,WAAA,sCAMbzE,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,mBAAA,EAAA,kDAEIC,EAAA,eAAA,UAAA,CAAAC,EAAAuE,CAAA,EAAA,IAAArE,EAAAC,EAAA,EAAA,OAAAC,EAAgBF,EAAAsE,cAAA,CAAe,CAAA,CAAA,EAFnC9D,EAAA,EAMJb,EAAA,EAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,EAAA;SAAA,QAJYc,EAAA,CAAA,EAAAC,EAAA,iBAAAY,EAAA,EAAA,EAAA,+BAAA,CAAA,EAAqE,iBAAAA,EAAA,EAAA,EAAA,sCAAA,CAAA,6BAgBjE3B,EAAA,EAAA;yBAAA,EAAAY,EAAA,EAAA,UAAA,EAAA,kDASJZ,EAAA,EAAA;qBAAA,mBAPQc,EAAA,EAAAC,EAAA,OAAAV,EAAAuE,OAAA,EAAgB,aAAAvE,EAAAwE,wBAAAxE,EAAAyE,uBAAAnD,EAAA,EAAA,EAAA,iDAAA,EAAAA,EAAA,EAAA,EAAA,yCAAA,CAAA,6BAShB3B,EAAA,EAAA;6BAAA,EAAAY,EAAA,EAAA,UAAA,EAAA,0BACJZ,EAAA,EAAA;yBAAA,mBADsCc,EAAA,EAAAC,EAAA,OAAAV,EAAAuE,OAAA,EAAgB,aAAAjD,EAAA,EAAA,EAAA,+CAAA,CAAA,6BADtD3B,EAAA,EAAA;yBAAA,EAAA+B,EAAA,EAAAgD,GAAA,EAAA,CAAA,mBAAAjE,EAAA,EAAAoB,EAAA7B,EAAAwE,wBAAAxE,EAAAyE,uBAAA,EAAA,EAAA,sCAjBR9E,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAIIC,EAAA,QAAA,UAAA,CAAAC,EAAA6E,CAAA,EAAA,IAAA3E,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAASF,EAAA4E,mBAAA,CAAoB,CAAA,CAAA,EAE7BjF,EAAA,EAAA;qBAAA,EAAA+B,EAAA,EAAAmD,GAAA,EAAA,CAAA,EAAyB,EAAAC,GAAA,EAAA,CAAA,EAe7BtE,EAAA,EACJb,EAAA,EAAA;aAAA,qBAnBQc,EAAA,EAAAC,EAAA,UAAAV,EAAAwE,wBAAAxE,EAAAyE,uBAAA,YAAA,EAAA,EAGAhE,EAAA,CAAA,EAAAoB,EAAA7B,EAAA+E,gBAAA,EAAA,EAAA,CAAA,6BAPRpF,EAAA,EAAA;aAAA,EAAA+B,EAAA,EAAAsD,GAAA,EAAA,CAAA,kBAAAvE,EAAA,EAAAoB,EAAA,CAAA7B,EAAAiF,yBAAAjF,EAAAwE,wBAAAxE,EAAAyE,wBAAA,EAAA,EAAA,sCA4BA9E,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAKIC,EAAA,QAAA,UAAA,CAAAC,EAAAoF,CAAA,EAAA,IAAAlF,EAAAC,EAAA,EAAA,OAAAC,EAAAF,EAAAmF,QAAmBnF,EAAAoF,UAAA,CAAW,CAAA,CAAA,EAE9BzF,EAAA,EAAA;iBAAA,EAAAY,EAAA,EAAA,YAAA,EAAA,0BACJZ,EAAA,EAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,EAAA;SAAA,oBAPQc,EAAA,EAAAK,GAAA,iCAAA,CAAAd,EAAAmF,MAAA,EAAgD,2BAAAnF,EAAAqF,kBAAArF,EAAAsF,gBAAAC,QAAAvF,EAAAmF,MAAA,EAEhDzE,EAAA,WAAA,CAAAV,EAAAmF,QAAAnF,EAAA8C,eAAA,CAAA,EAG8BrC,EAAA,CAAA,EAAAC,EAAA,QAAAV,EAAAwF,UAAA,EAAoB,aAAAlE,EAAA,EAAA,EAAAtB,EAAAyF,UAAA,CAAA,sCAKtD9F,EAAA,EAAA;aAAA,EACAA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,0BAEIC,EAAA,QAAA,UAAA,CAAAC,EAAA4F,CAAA,EAAA,IAAA1F,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAA2F,gBAAA,CAAiB,CAAA,CAAA,EAG1BhG,EAAA,EAAA;iBAAA,EAAAY,EAAA,EAAA,UAAA,EAAA,EACJZ,EAAA,EAAA;aAAA,EAAAa,EAAA,EACAb,EAAA,EAAA;aAAA,EACAA,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,2BAGIC,EAAA,QAAA,UAAA,CAAAC,EAAA4F,CAAA,EAAA,IAAA1F,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAA4F,eAAA,CAAgB,CAAA,CAAA,EAGzBjG,EAAA,GAAA;iBAAA,EAAAY,EAAA,GAAA,UAAA,EAAA,EACJZ,EAAA,GAAA;aAAA,EAAAa,EAAA,EACJb,EAAA,GAAA;SAAA,oBAbQc,EAAA,CAAA,EAAAC,EAAA,aAAAY,EAAA,EAAA,EAAAtB,EAAA6F,SAAA,EAAA,2CAAA,oCAAA,CAAA,EAESpF,EAAA,CAAA,EAAAC,EAAA,QAAAV,EAAA6F,SAAA,EAAA7F,EAAA8F,WAAA,EAKTrF,EAAA,CAAA,EAAAC,EAAA,WAAAV,EAAA8C,eAAA,CAAA,EAA6B,aAAAxB,EAAA,GAAA,EAAA,sCAAA,CAAA,EAIpBb,EAAA,CAAA,EAAAC,EAAA,OAAAV,EAAA+F,OAAA,0BAOjBpG,EAAA,EAAA;SAAA,EAAAY,EAAA,EAAA,MAAA,EAAA,EACJZ,EAAA,EAAA;KAAA,GDlJJ,IAAMqG,GAAe,UACfC,GAAmB,mBACnBC,GAA0B,yBAE1BC,GAAyB,QACzBC,GAAwB,QACxBC,GAAoB,QACpBC,GAA+B,OAgDxBC,IAA4B,IAAA,CAAnC,MAAOA,CAA4B,CAC5BC,kBAAoBC,EAAM,EAC1BnB,gBAAkBA,EAClBQ,WAAaA,GACb9B,QAAUA,GACVO,QAAUA,GACVH,YAAcA,GACdzD,aAAeA,GACf+F,QAAUC,GACVZ,QAAUA,GAEnBP,WAAqBQ,GACrBY,eAAyBX,GACzBjF,aAAuBkF,GACvBtC,qBAAuB,GACvBY,uBACAqC,kBACApC,uBACAQ,uBACA6B,4BACAC,QACAC,UACAvB,WACAJ,gBACAF,OAAS,GACT8B,SAAyB,CAAA,EACzBC,MAA6B,CAAA,EAC7BC,QAAUC,EAAK,EACf9E,gBAAkB8E,EAAK,EACvBjE,aAAeiE,EAAe,EAAK,EACnCtE,eAAiBsE,EAAe,EAAK,EACrCC,2BAA6BZ,EAAM,EACnCa,4BAA8Bb,EAAM,EACpCc,iBAAmBd,EAAM,EACzBe,YAAcf,EAAM,EACpBgB,gBAAkBhB,EAAM,EACxBiB,cAAgBjB,EAAM,EACtBkB,aAAelB,EAAM,EACrB1F,YAAcqG,EAAK,EACnBhG,kBAAoBgG,EAAK,EACzBjH,oBAAsBiH,EAAK,EAC3BQ,aAAeR,EAAK,EACpBS,YAAcT,EAAK,EACnBjF,SAAWiF,EAAe,EAAI,EAC9BU,kBAAoBrB,EAAM,EAC1BsB,aAAeX,EAAe,EAAK,EACnCY,eAAiBvB,EAAM,EACvBrG,WAAaqG,EAAM,EACnBwB,oBAAsBb,EAAK,EAC3Bc,OAASd,EAAK,EACde,cAAgB1B,EAAM,EACtB2B,gBAAkBC,EAAUC,SAAuC,iBAAiB,EAE5EC,aAAeC,EAAOC,CAAY,EAClCC,eAAiBF,EAAOG,EAAc,EACtCC,oBAAsBJ,EAAOK,EAAmB,EAChDC,aAAeN,EAAOO,EAAQ,EAC9BC,yBAA2BR,EAAOS,EAAwB,EAMlEC,UAAQ,CASJ,GARA,KAAKC,2BAA0B,EAC/B,KAAKtC,kBAAoB,KAAK0B,aAAaa,2BAA2B,KAAKjC,QAAO,CAAa,EAC/F,KAAK3C,uBAAyB,KAAK+D,aAAac,gCAA+B,EAC/E,KAAKvC,4BAA8B,KAAKyB,aAAae,qCAAoC,EACzF,KAAKrE,uBACD,KAAKlB,eAAc,IAAO,aAAgBwF,GAAiB,KAAKpC,QAAO,EAAkBqC,MAAMC,YAAY,GAAGC,uBAAyB,GAAS,GACpJ,KAAKjF,uBAAyB,KAAKV,eAAc,IAAO,aAAe,KAAKwE,aAAaa,2BAA4B,KAAKjC,QAAO,EAAkBqC,IAAK,EAAI,GAExJ,KAAKzF,eAAc,IAAO,OAAQ,CAClC,IAAM4F,EAAsB,KAAKpB,aAAaqB,uBAAsB,EACpE,KAAKC,UAAUF,CAAmB,EAClC,KAAKG,yBAAwB,CACjC,CACA,KAAKC,aAAY,EACjB,KAAKC,WAAU,CACnB,CAMAC,aAAW,CACP,KAAKd,2BAA0B,EAC/B,KAAK3E,uBAAyB,KAAK+D,aAAac,gCAA+B,EAC3E,KAAKtF,eAAc,IAAO,QAC1B,KAAK+F,yBAAwB,EAEjC,KAAKC,aAAY,EACjB,KAAKC,WAAU,CACnB,CAKAxG,gBAA6C,CAGzC0G,OAAQ,6FAQZL,UAAUF,EAAgD,CACtD,GAAI,CAACA,EAAqB,CACtB,KAAKxE,OAAS,KAAKoD,aAAac,gCAA+B,EAC/D,MACJ,CAEIc,GAAaR,CAAmB,EAChC,KAAKxE,OAASwE,EAAoBS,4BAA8B,GACzDC,GAAeV,CAAmB,EACzC,KAAKxE,OAASwE,EAAoBW,SAASC,KAAO,KAAK7B,eAAe8B,cAAcD,GAC7EE,GAAkBd,CAAmB,IAC5C,KAAKxE,OAAS,IAElB,KAAKwC,aAAatH,KAAK,KAAK8E,MAAM,CACtC,CAEQ2E,0BAAwB,CAC5B,KAAKzE,gBAAmB,KAAK8B,QAAO,EAAY9B,gBAChD,KAAKI,WAAa,KAAKiF,cAAa,CACxC,CAEAC,uBAAqB,CACjB,IAAIC,EAAW,GAEd,YAAKxJ,kBAAiB,EAA+ByJ,QAASC,GAAuB,CAElF,IAAMC,EAAW,KAAKxC,aAAaa,2BAA2B0B,CAAU,EAClElD,EAAe,KAAKA,eAAc,EAClCoD,EAAeF,EAAWE,aAEhC,GAAIpD,GAAgBoD,EAAc,CAC9B,IAAMC,EAAoBC,GAAMtD,CAAY,EACxC,CAACmD,GAAYC,EAAaG,QAAQF,CAAiB,IACnDL,EAAW,GAEnB,CACJ,CAAC,EACMA,CACX,CAMAF,eAAa,CACT,OAAI,KAAKvF,QAAU,KAAKE,kBAAoBC,EAAgBC,OACjD,wCAEP,KAAKJ,QAAU,KAAKE,kBAAoBC,EAAgBC,OACjD,kCAEJ,oCACX,CAMA9B,qBAAuB,CAAC,QAAS,MAAO,aAAc,OAAQ,SAAU,kBAAmB,WAAY,OAAQ,SAAU,SAAS,EAMlIF,mBAA8D6H,GACtD,OAAOA,GAAU,SACVA,IAAU/E,IAAqB+E,IAAUhF,IAAyBgF,IAAUjF,IAA0BiF,IAAU9E,GAGnH8E,EAAMC,UAAYhF,IAClB+E,EAAMC,UAAYjF,IAClBgF,EAAMC,UAAYlF,IAClBiF,EAAMC,UAAY/E,GAS9BgF,oBAA2C,CAAA,EAM3CC,cAAcC,EAAe,CACzB,IAAMC,EAAW,IAAIC,GACrBD,OAAAA,EAASD,QAAUA,EACf,KAAKzH,eAAc,IAAO,aAC1B0H,EAASX,WAAa,KAAK3D,QAAO,EAElCsE,EAASjC,KAAO,KAAKrC,QAAO,EAEzBsE,CACX,CAKAnI,eAAeqI,EAA4B,CACnCA,EAAcP,OAASQ,MACvB,KAAKC,oBAAoBF,EAAcP,MAAMb,EAAE,CAEvD,CAMAzG,mBAAiB,CACb,KAAKF,qBAAuB,CAAC,KAAKA,oBACtC,CAMAlB,eAAe8I,EAAe,CACtBA,GAAWI,MACX,KAAKC,oBAAoBL,CAAO,CAExC,CAOAK,oBAAoBL,EAAe,CAC/B,IAAMM,EAAuB,KAAK3E,QAAO,EAAe4E,UACjD,KAAK5E,QAAO,EAAe4E,UAAWC,UAAWP,GAAaA,EAASQ,MAAM1B,KAAO,KAAKhC,aAAa2D,QAAO,EAAG3B,IAAMkB,EAASD,UAAYA,CAAO,EACnJ,GACN,GAAK,KAAKrE,QAAO,EAAe4E,WAAaD,EAAsB,GAAI,CACnE,IAAMK,EAAoB,KAAKhF,QAAO,EAAe4E,UAAWD,CAAmB,EACnF,KAAKvD,aAAa6D,eAAeD,CAAgB,EAAEE,UAAU,IAAK,CAC7D,KAAKlF,QAAO,EAAe4E,UAAa,KAAK5E,QAAO,EAAe4E,WAAWO,OAAQb,GAAaA,EAASlB,KAAO4B,EAAiB5B,EAAE,EACvI,KAAKpB,2BAA0B,EAC/B,KAAKvF,qBAAuB,GAC5B,KAAK2D,iBAAiBlH,KAAM,KAAK8G,QAAO,EAAe4E,SAAU,CACrE,CAAC,CACL,KAAO,CACH,IAAMQ,EAAmB,KAAKhB,cAAcC,CAAO,EACnD,KAAKjD,aAAaiE,eAAeD,CAAgB,EAAEF,UAAU,IAAK,CAC9D,KAAKlD,2BAA0B,EAC/B,KAAKvF,qBAAuB,GAC5B,KAAK2D,iBAAiBlH,KAAM,KAAK8G,QAAO,EAAe4E,WAAa,CAAA,CAAE,CAC1E,CAAC,CACL,CACJ,CAKA5C,4BAA0B,CACtB,GAAK,KAAKhC,QAAO,EAAe4E,WAAc,KAAK5E,QAAO,EAAe4E,UAAW1K,OAAS,EAAG,CAE5F,IAAMoL,EAAqB,KAAKtF,QAAO,EAAe4E,UAAWO,OAC5Db,GAAuBA,EAASD,UAAY,KAAKhG,YAAciG,EAASD,UAAY,KAAK5E,cAAc,EAE5G,KAAK0E,oBAAsB,KAAKoB,yBAAyBD,CAAiB,CAC9E,MACI,KAAKnB,oBAAsB,CAAA,CAEnC,CAMAoB,yBAAyBX,EAAqB,CAC1C,OAAOA,EAAUY,OAAO,CAACC,EAAkCnB,IAAsB,CAC7E,IAAM5I,EAAa4I,EAASQ,MAAM1B,KAAO,KAAKhC,aAAa2D,QAAO,EAAG3B,GAE/DsC,EAAehK,EAAaiK,GAA2BrB,EAASQ,MAAMc,KACtEC,EAAqC,CACvC/J,MAAO2J,EAAYnB,EAASD,OAAQ,EAAIoB,EAAYnB,EAASD,OAAQ,EAAEvI,MAAQ,EAAI,EACnFJ,WAAY+J,EAAYnB,EAASD,OAAQ,GAAIoB,EAAYnB,EAASD,OAAQ,EAAE3I,YAAcA,EAC1FE,cAAe6J,EAAYnB,EAASD,OAAQ,EAAIoB,EAAYnB,EAASD,OAAQ,EAAEzI,cAAckK,OAAOJ,CAAY,EAAI,CAACA,CAAY,GAErI,OAAOK,GAAAC,EAAA,GAAKP,GAAL,CAAkB,CAACnB,EAASD,OAAQ,EAAGwB,CAAgB,EAClE,EAAG,CAAA,CAAE,CACT,CAEUrH,iBAAe,CACrB,KAAKa,kBAAkBnG,KAAI,CAC/B,CAEA+M,6BAA2B,CACvB,OAAOC,OAAOC,OAAO,KAAKhC,mBAAmB,EAAEiC,KAAM9B,GAAaA,EAASxI,OAAS,CAAC,CACzF,CAKAqB,eAAa,CACT,KAAK6D,cAAc9H,KAAK,EAAI,CAChC,CAMA+E,WAAS,CACD,KAAKD,SACD,KAAKE,kBAAoBC,EAAgBC,OACzC,KAAKF,gBAAkBC,EAAgBkI,KAEvC,KAAKnI,gBAAkBC,EAAgBC,OAE1C,KAAK4B,QAAO,EAAY9B,gBAAkB,KAAKA,gBAChD,KAAKkD,aAAakF,0BAA2B,KAAKtG,QAAO,EAAeoD,GAAK,KAAKlF,eAAe,EAAEgH,UAAS,EAEpH,CAMAzH,oBAAkB,EACV,KAAKJ,wBAA0B,KAAKC,0BACnC,KAAK0C,QAAO,EAAkBuG,aAAe,CAAE,KAAKvG,QAAO,EAAkBuG,aAC9E,KAAKnF,aAAaoF,iBAAiB,KAAKxG,QAAO,CAAgB,EAAEkF,UAAS,EAElF,CAQAuB,eAAa,CACT,OAAO,KAAKvI,eAChB,CAEA/E,gBAAc,CACV,KAAKwH,kBAAkBzH,KAAK,EAAI,EAChC,KAAKgH,2BAA2BhH,KAAI,CACxC,CAEAQ,iBAAe,CACX,KAAKiH,kBAAkBzH,KAAK,EAAK,EACjC,KAAKiH,4BAA4BjH,KAAI,CACzC,CAEA2J,YAAU,CACN,KAAKjD,QAAU,KAAKF,kBACpB,KAAKa,cAAcrH,KAAK,KAAK0G,OAAO,CACxC,CAEA5C,aAAW,CACH,KAAKJ,eAAc,IAAO,OACrB,KAAKoD,QAAO,EAAa0G,OAAS,GACnC,KAAKzF,gBAAe,EAAG0F,KAAI,EAE3B,KAAKtG,YAAYnH,KAAI,EAGzB,KAAKgH,2BAA2BhH,KAAI,CAE5C,CAMAuF,gBAAc,CACV,IAAMmI,EAAW,KAAKhK,eAAc,IAAO,aACvC,CAAC,KAAKoD,QAAO,EAAI6G,SAAW,KAAK7G,QAAO,EAAI6G,UAAY,GACxD,KAAKC,uBAAuB,KAAKhG,oBAAmB,EAAK8F,CAAQ,EAEjE,KAAKE,uBAAuB,KAAK9G,QAAO,EAAK4G,CAAQ,CAE7D,CAEAE,uBAAuBzE,EAAeuE,EAAiB,CAC9C,KAAK7F,OAAM,GAAIqC,KAGpB,KAAKtD,SAAW,CAAA,EAChB,KAAKC,MAAQ,CAAA,EAEb,KAAK0B,oBACAsF,uBAAuB,KAAKhG,OAAM,EAAIqC,EAAG,EACzC4D,KAAKC,GAAKC,GAAaA,EAASC,MAAQ,CAAA,CAAE,CAAC,EAC3CjC,UAAU,CACPkC,KAAOC,GAAiB,CACpBA,EAAc3D,QAASpB,GAAgB,CAC/BA,EAAagF,OAASC,GAAiBC,SAAW,CAAElF,EAA4BC,uBAChF,KAAKzC,SAAS2H,KAAKnF,CAA0B,CAErD,CAAC,EAED,IAAMoF,EAAW,KAAK/F,aAAagF,KAAKgB,GAA+B,CACnEC,KAAM,KACNC,SAAU,SACb,EAEDH,EAASI,kBAAkB/H,MAAMgI,IAAI,CAAA,CAAE,EACvCL,EAASI,kBAAkBhI,SAASiI,IAAI,KAAKjI,QAAQ,EACrD4H,EAASI,kBAAkBE,cAAcD,IAAI1F,CAAI,EACjDqF,EAASI,kBAAkBG,SAASF,IAAI,KAAKhH,OAAM,GAAIqC,EAAE,EAEzDsE,EAASQ,OAAOC,KAAYC,GAA+FC,GAAA,sBACvH,GAAID,EAAW,CACX,IAAME,EAAgC,CAAC,GAAGF,EAAUtI,QAAQ,EACtDyI,EAAaH,EAAUrI,MAAMkH,IAAKnC,GAASA,EAAK0D,KAAM,EAE5D,GAAID,EAAWrO,OAAS,EAAG,CACvB,IAAIuO,EAAuC,KAE3C,GAAIF,EAAWrO,SAAW,EACtB,GAAI,CAEAuO,GADiB,MAAM,KAAK5G,yBAAyB6G,yBAAyBH,EAAW,CAAC,CAAC,EAAEI,UAAS,IACzExB,MAAQ,KACjCsB,GACAH,EAAcb,KAAKgB,CAAe,CAE1C,MAAgB,CACZ,MACJ,KAEA,IAAI,CACA,IAAMvB,EAAW,MAAM,KAAKrF,yBAAyB+G,wBAAwBL,CAAU,EAAEI,UAAS,EAC9FzB,GAAYA,EAASC,OACrBsB,EAAkBvB,EAASC,KAC3BmB,EAAcb,KAAKgB,CAAe,EAE1C,MAAgB,CACZ,MACJ,CAER,CAEAH,EAAc5E,QAASpB,GAAgB,CAC/BA,GAAgBA,EAAac,IAC7B,KAAKyF,YAAYxG,EAAMC,EAAc8F,EAAUU,eAAgBlC,CAAQ,CAE/E,CAAC,CACL,CACJ,EAAC,CACL,EACH,EACT,CAEAiC,YAAYxG,EAAeC,EAA4BuE,EAAiBD,EAAiB,CACrF,KAAKxF,aAAa2H,wBAAwB,CAAC1G,CAAI,EAAGC,EAAcsE,EAAUC,CAAO,EAAE3B,UAAU,CAAA,CAAE,CACnG,CAEAtC,cAAY,CACR,IAAMN,EAAe,KAAK0G,gBAAe,EACnCC,EAAU7G,GAAgBE,CAAY,EAEtCxE,EAAyB,KAAKlB,eAAc,IAAO,aAAgBqM,GAAS1G,uBAAyB,GAAS,GAC9G2G,EAAeD,GAASC,cAAgB,GAExCC,EAAwBrL,EAAyB,KAAK6B,4BAA8B,GACpFyJ,EACDF,GAAgB,KAAK7L,yBAA4B+E,GAAgB,KAAKhB,aAAaqB,uBAAsB,CAAE,GAAGQ,4BAA8B,IAEjJ,KAAKpD,UAAY,CAAC,KAAKlE,eAAc,GAAM,CAAC,KAAK+E,YAAW,IAAO,KAAKhB,mBAAqB0J,IAAwBD,EACrH,KAAK7I,gBAAgBpH,KAAK,KAAK2G,SAAS,CAC5C,CAEQmJ,iBAAe,CACnB,OAAI,KAAKpM,eAAc,IAAO,aAClB,KAAKoD,QAAO,EAAkBqC,MAAMC,aAEpC,KAAKtC,QAAO,EAAYsC,YAExC,CAEA1F,gBAAc,CACV,OAAO,KAAKoD,QAAO,GAAM,SAAU,KAAKA,QAAO,EAAM,aAAe,MACxE,CAEAtB,UAAQ,CACJ,OAAiB,KAAKsB,QAAO,GAAgBqJ,OACjD,CAEAzL,iBAAe,CACX,OAAiB,KAAKoC,QAAO,GAAmBuG,YACpD,4CA7eSnH,EAA4B,2BAA5BA,EAA4BkK,UAAA,CAAA,CAAA,2BAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,2yFCxFzC/Q,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAA+B,EAAA,EAAAmP,GAAA,EAAA,CAAA,EA2CAC,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,EAAA,kBAqBApR,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EACAA,EAAA,EAAA;SAAA,EAAA+B,EAAA,EAAAuP,GAAA,GAAA,EAAA,EAA4E,GAAAC,GAAA,EAAA,CAAA,EAkC5EtR,EAAA,GAAA,6BAAA,EAAA,CAAA,EAAmHC,EAAA,cAAA,UAAA,CAAAsR,OAAArR,EAAAsR,CAAA,EAAAlR,EAAe0Q,EAAApJ,YAAAnH,KAAA,CAAkB,CAAA,CAAA,EAApJG,EAAA,EACAb,EAAA,GAAA;SAAA,EACAA,EAAA,GAAA;SAAA,EAAA+B,EAAA,GAAA2P,GAAA,EAAA,CAAA,EAAoC,GAAAC,GAAA,EAAA,CAAA,EAYwB,GAAAC,GAAA,EAAA,CAAA,EA4BoD,GAAAC,GAAA,GAAA,CAAA,EA+BpHhR,EAAA,EAEAb,EAAA,GAAA;;KAAA,EACAA,EAAA,GAAA;KAAA,EAAA+B,EAAA,GAAA+P,GAAA,EAAA,CAAA,EAGJjR,EAAA,EACAb,EAAA,GAAA;CAAA,QArLmE+R,GAAA,QAAAd,EAAA7M,eAAA,IAAA,OAAA,cAAA,EAAA,EAC/DtD,EAAA,CAAA,EAAAoB,EAAA+O,EAAA7M,eAAA,IAAA,OAAA,EAAA,EAAA,EA2CAtD,EAAA,EAAAkR,EAAArQ,EAAA,EAAA,GAAAsP,EAAAtF,mBAAA,CAAA,EAqBK7K,EAAA,CAAA,EAAAC,EAAA,SAAAkQ,EAAA9N,eAAA,CAAA,EAEDrC,EAAA,CAAA,EAAAoB,EAAA+O,EAAAxD,4BAAA,GAAAwD,EAAAzN,aAAA,GAAA,CAAAyN,EAAAzN,aAAA,EAAA,EAAA,EAAA,EA6BA1C,EAAA,EAAAoB,EAAA,CAAA+O,EAAAzN,aAAA,GAAAyN,EAAA7J,QAAA,GAAA,EAAA,EAK6CtG,EAAA,EAAAC,EAAA,UAAAkQ,EAAAzJ,QAAA,CAAA,EAAsB,sBAAAyJ,EAAAzQ,oBAAA,CAAA,EAEnEM,EAAA,CAAA,EAAAoB,EAAA,CAAA+O,EAAAzN,aAAA,GAAAyN,EAAA5J,UAAA,GAAA,EAAA,EAYAvG,EAAA,EAAAoB,EAAA+O,EAAA7M,eAAA,IAAA,cAAA,CAAA6M,EAAAzN,aAAA,EAAA,GAAA,EAAA,EA4BA1C,EAAA,EAAAoB,EAAA+O,EAAA7M,eAAA,IAAA,QAAA,CAAA6M,EAAAzN,aAAA,IAAAyN,EAAAvL,kBAAAuL,EAAAtL,gBAAAC,QAAAqL,EAAAzL,QAAA,GAAA,EAAA,EAYA1E,EAAA,EAAAoB,EAAA+O,EAAAzN,aAAA,EAAA,GAAA,EAAA,EAsBJ1C,EAAA,CAAA,EAAAoB,EAAA+O,EAAA7M,eAAA,IAAA,QAAA6M,EAAAzN,aAAA,GAAAyN,EAAAjG,sBAAA,EAAA,GAAA,EAAA,kBDzGIiH,GACAC,GACAC,GACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,EACAC,EAA4B,EAAAC,OAAA,CAAA,y4FAAA,CAAA,CAAA,SAGvBnM,CAA4B,GAAA,2NGlFjCoM,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,kBAN6EI,EAAA,EAAAC,EAAA,UAAAC,EAAA,EAAAC,GAAAC,EAAAC,cAAA,GAAAD,EAAAE,QAAAC,OAAA,CAAA,EAExDP,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAI,UAAA,6BAMjBZ,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,qBACID,EAAA,CAAA,qBACJG,EAAA,EACJH,EAAA,EAAA;KAAA,kBAHqCI,EAAA,EAAAS,EAAA,aAAAC,EAAA,EAAA,EAAAN,EAAAE,QAAAK,aAAA,MAAA,CAAA,EAC7BX,EAAA,CAAA,EAAAY,EAAA;cAAAF,EAAA,EAAA,EAAAN,EAAAE,QAAAK,aAAA,MAAA,EAAA;SAAA,sCAIJf,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,qBAAA,EAAA,EAMIgB,EAAA,oBAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAX,EAAAY,EAAA,EAAA,OAAAC,EAAqBb,EAAAc,kBAAA,CAAmB,CAAA,CAAA,EAN5CnB,EAAA,EAQJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,oBARYI,EAAA,CAAA,EAAAC,EAAA,UAAAG,EAAAE,OAAA,EAAmB,eAAAF,EAAAe,eAAA,CAAA,EACc,sBAAAf,EAAAgB,mBAAA,EACU,eAAAhB,EAAAiB,aAAA,CAAA,EACZ,YAAAjB,EAAAkB,SAAA,sCAOvC1B,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EAAmHgB,EAAA,cAAA,SAAAU,EAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAAeb,EAAAqB,aAAAF,CAAA,CAAoB,CAAA,CAAA,EAClJ3B,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,sBAAA,EAAA,EAQIgB,EAAA,oBAAA,UAAA,CAAAC,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAAqBb,EAAAsB,cAAc,EAAK,CAAC,CAAA,CAAA,EAAC,uBAAA,SAAAH,EAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAClBb,EAAAuB,uBAAAJ,CAAA,CAA8B,CAAA,CAAA,EAAC,0BAAA,SAAAA,EAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAC5Bb,EAAAwB,wBAAAC,KAAAN,CAAA,CAAoC,CAAA,CAAA,EAVnExB,EAAA,EAYAH,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,4BAAA,EAAA,EAMIgB,EAAA,6BAAA,UAAA,CAAAC,EAAAU,CAAA,EAAAR,EAAA,EAAA,IAAAc,EAAAC,EAAA,EAAA,EAAA,OAAAd,EAA8Ba,EAAAE,KAAA,CAA4B,CAAA,CAAA,EAAC,mBAAA,SAAAT,EAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EACvCb,EAAA6B,mBAAAV,CAAA,CAA0B,CAAA,CAAA,EAAC,kBAAA,SAAAA,EAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAC5Bb,EAAA8B,YAAAX,CAAA,CAAmB,CAAA,CAAA,EAAC,gBAAA,SAAAA,EAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EACtBb,EAAA+B,UAAAZ,CAAA,CAAiB,CAAA,CAAA,EAAC,gBAAA,UAAA,CAAAT,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAClBb,EAAAsB,cAAc,EAAI,CAAC,CAAA,CAAA,EAAC,oBAAA,UAAA,CAAAZ,EAAAU,CAAA,EAAA,IAAApB,EAAAY,EAAA,EAAA,OAAAC,EAChBb,EAAAgC,eAAA,CAAgB,CAAA,CAAA,EAXzCrC,EAAA,EAaJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,oBA/BwDI,EAAA,EAAAC,EAAA,UAAAC,EAAA,GAAAC,GAAAC,EAAAC,cAAA,GAAAD,EAAAE,QAAAC,OAAA,CAAA,EACnBP,EAAA,CAAA,EAAAqC,GAAA,cAAAjC,EAAAkC,YAAA,EAErBtC,EAAA,CAAA,EAAAC,EAAA,UAAAG,EAAAE,QAAAiC,OAAA,EAA2B,WAAA,CAAA,CAAAnC,EAAAE,QAAAkC,WAAA,EACO,SAAApC,EAAAE,QAAAmC,MAAA,EACT,UAAArC,EAAAE,OAAA,EACN,UAAA,EAAA,EACH,YAAAF,EAAAkB,SAAA,EACO,uBAAAlB,EAAAsC,oBAAA,EAQnB1C,EAAA,CAAA,EAAAC,EAAA,iBAAAG,EAAAe,eAAA,CAAA,EAAmC,SAAAf,EAAAuC,MAAA,EAClB,UAAAvC,EAAAE,OAAA,EACE,eAAAF,EAAAwC,aAAA,CAAA,EACY,kBAAAxC,EAAAyC,eAAA,sCAiB/CjD,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,4BAAA,EAAA,EAKIgB,EAAA,6BAAA,UAAA,CAAAC,EAAAgC,CAAA,EAAA9B,EAAA,EAAA,IAAAc,EAAAC,EAAA,EAAA,EAAA,OAAAd,EAA8Ba,EAAAE,KAAA,CAA4B,CAAA,CAAA,EAAC,mBAAA,SAAAT,EAAA,CAAAT,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,EAAA,OAAAC,EACvCb,EAAA6B,mBAAAV,CAAA,CAA0B,CAAA,CAAA,EAAC,oBAAA,UAAA,CAAAT,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,EAAA,OAAAC,EAE1Bb,EAAAgC,eAAA,CAAgB,CAAA,CAAA,EARzCrC,EAAA,EAUJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,oBAZyDI,EAAA,EAAAC,EAAA,UAAAC,EAAA,EAAAC,GAAAC,EAAAE,QAAAC,SAAAH,EAAAC,cAAA,CAAA,CAAA,EAA8D,QAAA0C,MAAA,EAE3G/C,EAAA,CAAA,EAAAC,EAAA,iBAAAG,EAAAe,eAAA,CAAA,EAAmC,UAAAf,EAAAE,OAAA,EAChB,eAAAF,EAAAwC,aAAA,CAAA,EACY,kBAAAxC,EAAAyC,eAAA,EACI,eAAA,EAAA,sCAmBvCjD,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,UAAA,CAAAC,EAAAkC,CAAA,EAAA,IAAA5C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAASb,EAAA6C,YAAA,CAAa,CAAA,CAAA,EACvDrD,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,qBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAA8C,WAAA,sCAKbtD,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,UAAA,CAAAC,EAAAqC,CAAA,EAAA,IAAA/C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAASb,EAAAgD,WAAA,CAAY,CAAA,CAAA,EACtDxD,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,qBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAiD,OAAA,sCAbrBzD,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,SAAAU,EAAA,CAAAT,EAAAwC,CAAA,EAAA,IAAAlD,EAAAY,EAAA,EAAA,OAAAC,EAASb,EAAAmD,YAAAhC,CAAA,CAAmB,CAAA,CAAA,EAC7D3B,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,EAAA;SAAA,EAAA4D,EAAA,GAAAC,GAAA,EAAA,CAAA,EAAe,GAAAC,GAAA,EAAA,CAAA,EAYf7D,EAAA,GAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,UAAA,CAAAC,EAAAwC,CAAA,EAAA,IAAAlD,EAAAY,EAAA,EAAA,OAAAC,EAASb,EAAAgC,eAAA,CAAgB,CAAA,CAAA,EAC1DxC,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,UAAA,EAAA,EACAF,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,EACJF,EAAA,GAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,SAAA,EAAA,EAA6CgB,EAAA,QAAA,UAAA,CAAAC,EAAAwC,CAAA,EAAA,IAAAlD,EAAAY,EAAA,EAAA,OAAAC,EAASb,EAAAuD,eAAA,CAAgB,CAAA,CAAA,EAClE/D,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,UAAA,EAAA,EACAF,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,EACJF,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;CAAA,oBA1BSI,EAAA,EAAAC,EAAA,UAAA2D,GAAA,EAAAC,GAAAzD,EAAA0D,iBAAAC,EAAA3D,EAAA0D,iBAAAE,CAAA,CAAA,EAEYhE,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAA6D,OAAA,EAGbjE,EAAA,CAAA,EAAAkE,EAAA9D,EAAA+D,QAAA,GAAA,EAAA,EAMAnE,EAAA,EAAAkE,EAAA9D,EAAAgE,UAAA,GAAA,EAAA,EAOapE,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAE,QAAAC,QAAAH,EAAAI,WAAAJ,EAAAiE,WAAA,EACHrE,EAAA,CAAA,EAAAC,EAAA,eAAAG,EAAAE,QAAAC,QAAA,2CAAA,oCAAA,EAGGP,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAkE,OAAA,sCAgBjB1E,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,mBAAA,EAAA,EAAkBgB,EAAA,cAAA,SAAAU,EAAA,CAAAT,EAAAyD,CAAA,EAAA,IAAAnE,EAAAY,EAAA,EAAA,OAAAC,EAAeb,EAAAoE,eAAAjD,CAAA,CAAsB,CAAA,CAAA,EAAvDxB,EAAA,EACJH,EAAA,EAAA;CAAA,GD9DA,IAAa6E,IAAoB,IAAA,CAA3B,MAAOA,UAA4BC,EAA4B,CACjEC,eAAiBC,EAAOC,CAAiB,EACzCC,SAAWF,EAAOG,EAAS,EACnBC,SAAWJ,EAAiBK,EAAQ,EAE5C5D,aAAe6D,EAA+BnC,MAAS,EACvDH,aAAesC,EAAe,EAAK,EACnC/D,eAAiB+D,EAAe,EAAK,EACrC7E,cAAgB6E,EAAe,EAAK,EAEpCC,2BAA6BC,EAAM,EACnCC,qBAAuBD,EAAM,EAC7BxD,wBAA0BwD,EAAM,EAEhCE,aAAeC,EAAUC,SAAS,gCAAiC,CAAEC,KAAMC,EAAgB,CAAE,EAC7FC,sBAAwBJ,EAAoDK,EAA4B,EAExGC,aAAe,GACflD,OAGAnC,WAAaA,GAEJ0C,YAAcA,GACdoB,QAAUA,GACVL,QAAUA,GACVZ,QAAUA,GACnB,OAAOyC,mBAAiD,KACxD3B,QAAU,GACVC,UAAY,GAEZ2B,aAAA,CACI,MAAK,EACL,KAAKpD,OAAS,KAAKqD,aAAaC,UAAS,CAC7C,CAEAC,UAAQ,CACJ,MAAMA,SAAQ,EACd,KAAKC,0BAAyB,CAClC,CAEAC,aAAW,CACP,KAAKD,0BAAyB,CAClC,CAEA,IAAIE,cAAY,CACZ,OAAO,KAAKV,sBAAqB,CACrC,CAEAW,iBAAiBC,EAA0B,CACvC,KAAKjG,QAAUiG,CACnB,CAEAtE,mBAAmBuE,EAA4B,CAC3C,KAAKlG,QAAUmG,GAAAC,EAAA,GAAK,KAAKpG,SAAV,CAAmBqG,UAAWH,CAAgB,EACjE,CAGAI,gBAAc,CACV,KAAKtE,aAAe,GACpB,KAAKuE,iBAAgB,CACzB,CAEQC,mBAAiB,CACrB,IAAMC,EAAgB,KAAK/B,SAASgC,cAAc,qBAAqB,EACnED,GACA,KAAKjC,SAASmC,SAASF,EAAe,WAAY,QAAQ,CAElE,CAEAF,kBAAgB,CACZ,IAAME,EAAgB,KAAK/B,SAASgC,cAAc,qBAAqB,EACnED,GACA,KAAKjC,SAASmC,SAASF,EAAe,aAAc,MAAM,CAElE,CAEA7E,YAAYgF,EAAc,CACtB,KAAK9C,UAAY8C,CACrB,CAEA/E,UAAU+E,EAAc,CACpB,KAAK/C,QAAU+C,CACnB,CAEAzF,aAAa0F,EAAiB,CAC1B,IAAMC,EAAgBD,EAAME,OACxBC,EACJ,GAAI,CACAA,EAAkBC,OAAOC,iBAAiBJ,CAAa,EAAEK,SAAW,SACxE,OAASC,EAAO,CACZC,GAAiBD,CAAK,EACtBJ,EAAkB,EACtB,CAEKA,IACDH,EAAMS,eAAc,EAEhBnD,EAAoBqB,qBAAuB,MAC3CrB,EAAoBoD,sBAAqB,EAG7CpD,EAAoBqB,mBAAqB,KAEzC,KAAKhC,iBAAmB,CACpBE,EAAGmD,EAAMW,QACT/D,EAAGoD,EAAMY,SAGb,KAAKzF,aAAe,GACpB,KAAK0F,uBAAsB,EAC3B,KAAKlB,kBAAiB,EAE9B,CAEAkB,wBAAsB,CAElB,IAAMC,EAAcV,OAAOW,WAEvB,KAAKpE,iBAAiBE,EAAImE,IAAgBF,IAC1C,KAAKnE,iBAAiBE,EAAIiE,EAAcE,IAAgB,GAEhE,CAEQ,OAAON,uBAAqB,CAC5BpD,EAAoBqB,qBACpBrB,EAAoBqB,mBAAmBxD,aAAe,GACtDmC,EAAoBqB,mBAAmBe,iBAAgB,EACvDpC,EAAoBqB,mBAAmBnB,eAAeyD,cAAa,EACnE3D,EAAoBqB,mBAAqB,KAEjD,CAEAuC,aAAW,CACH5D,EAAoBqB,qBAAuB,MAC3CrB,EAAoBoD,sBAAqB,CAEjD,CAEQ1B,2BAAyB,CAEzB,KAAK7F,SAAW,EAAE,KAAKA,mBAAmBgI,MAC1C,KAAKhI,QAAUiI,OAAOC,OAAO,IAAIF,GAAc,KAAKhI,OAAO,EAEnE,4CAhJSmE,EAAmB,2BAAnBA,EAAmBgE,UAAA,CAAA,CAAA,iBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,0BAc+CjD,EAAgB,4BACfE,GAA4B,CAAA,+CAf/F/E,EAAA,QAAA,SAAAU,EAAA,CAAA,OAAAqH,EAAAhC,eAAArF,CAAA,CAAsB,EAAA,GAAAsH,EAAA,qvEC9DnChJ,EAAA,EAAA,MAAA,CAAA,EAKID,EAAA,EAAA;KAAA,EAAA4D,EAAA,EAAAsF,GAAA,GAAA,CAAA,EAAuB,EAAAC,GAAA,EAAA,CAAA,EAQA,EAAAC,GAAA,EAAA,CAAA,EAKC,EAAAC,GAAA,GAAA,EAAA,EA6CxBpJ,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAsJ,GAAA,EAAA,KAAA,CAAA,EACJtJ,EAAA,GAAA;KAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;KAAA,EAAA4D,EAAA,GAAA2F,GAAA,EAAA,CAAA,EAcJpJ,EAAA,EACAH,EAAA,GAAA;CAAA,EAAAC,EAAA,GAAA,oCAAA,EAAA,CAAA,EAA8EgB,EAAA,iBAAA,SAAAU,EAAA,CAAA6H,OAAAtI,EAAAuI,CAAA,EAAApI,EAAkB2H,EAAAtC,iBAAA/E,CAAA,CAAwB,CAAA,CAAA,EAAxHxB,EAAA,EAEAH,EAAA,GAAA;;CAAA,EACAA,EAAA,GAAA;CAAA,EAAA4D,EAAA,GAAA8F,GAAA,GAAA,EAAA,EA6BAxJ,EAAA,GAAA,MAAA,EAAA,CAAA,EAEAF,EAAA,GAAA;;CAAA,EAAA4D,EAAA,GAAA+F,GAAA,EAAA,EAAA,cAAA,CAAA,EAMI1I,EAAA,gBAAA,UAAA,CAAAuI,OAAAtI,EAAAuI,CAAA,EAAApI,EAAiB2H,EAAAY,kBAAA,CAAmB,CAAA,CAAA,EAIxC5J,EAAA,GAAA;CAAA,8BA5HIK,EAAA,KAAA,QAAA2I,EAAAtI,QAAAmJ,EAAA,EAA2B,UAAAC,GAAA,GAAAC,GAAAf,EAAAxH,oBAAA,CAAAwH,EAAAvI,cAAA,GAAAuI,EAAAtI,QAAAC,QAAA,CAAAqI,EAAAvI,cAAA,CAAA,CAAA,EAI3BL,EAAA,CAAA,EAAAkE,EAAA0E,EAAAtI,QAAAC,QAAA,EAAA,EAAA,EAQAP,EAAA,EAAAkE,EAAA0E,EAAAvI,cAAA,EAAA,EAAA,EAAA,EAKAL,EAAA,EAAAkE,EAAA0E,EAAAvI,cAAA,EAAA,GAAA,CAAA,EAYAL,EAAA,EAAAkE,EAAApC,EAAA8H,YAAA,GAAA,CAAA,EAoCA5J,EAAA,CAAA,EAAAkE,EAAA0E,EAAAtH,UAAA,GAAA,EAAA,EAesDtB,EAAA,CAAA,EAAAC,EAAA,UAAA2I,EAAAtI,OAAA,EAAmB,mCAAAsI,EAAAtD,aAAA,CAAA,EAG7EtF,EAAA,CAAA,EAAAkE,EAAA0E,EAAAtG,aAAA,GAAA,EAAA,EA6B6DtC,EAAA,EAAAC,EAAA,UAAA2D,GAAA,GAAAC,GAAA+E,EAAAiB,cAAA9F,EAAA6E,EAAAiB,cAAA7F,CAAA,CAAA,EAIzDhE,EAAA,CAAA,EAAAC,EAAA,iCAAA,EAAA,EAAuC,mCAAA,kCAAA,EACgC,4BAAA6J,CAAA,EACvB,0BAAAlB,EAAAmB,oBAAA,kBDxE5CC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAzE,GACA0E,GACAC,GACAC,GACAC,GACAC,GACAC,EAAe,EAAAC,OAAA,CAAA,mvHAAA,EAAAC,KAAA,CAAAC,UAnBP,CACRC,GAAQ,OAAQ,CACZC,GAAW,SAAU,CAACC,GAAM,CAAEC,QAAS,CAAC,CAAE,EAAGC,GAAQ,gBAAiBF,GAAM,CAAEC,QAAS,CAAC,CAAE,CAAC,CAAC,CAAC,EAC7FF,GAAW,SAAU,CAACG,GAAQ,iBAAkBF,GAAM,CAAEC,QAAS,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAC3E,CAAC,CACL,EAAAE,gBAAA,CAAA,CAAA,SAiBQ3G,CAAoB,GAAA,8HG9CjB4G,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,kBAAA,CAAA,EAQIC,EAAA,6BAAA,UAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,CAAA,EAAA,IAAAC,EAAAC,EAAA,CAAA,EAAA,OAAAC,EAA8BF,EAAAG,KAAA,CAA4B,CAAA,CAAA,EAAC,uBAAA,SAAAC,EAAA,CAAAP,EAAAC,CAAA,EAAA,IAAAO,EAAAN,EAAA,CAAA,EAAA,OAAAG,EACnCG,EAAAC,qBAAAC,KAAAH,CAAA,CAAiC,CAAA,CAAA,EAAC,0BAAA,SAAAA,EAAA,CAAAP,EAAAC,CAAA,EAAA,IAAAO,EAAAN,EAAA,CAAA,EAAA,OAAAG,EAC/BG,EAAAG,wBAAAD,KAAAH,CAAA,CAAoC,CAAA,CAAA,EAVnEK,EAAA,EAaJf,EAAA,EAAA;aAAA,mDAZQgB,EAAA,EAAAC,EAAA,eAAAN,EAAAO,aAAA,CAAA,EAA+B,iBAAAP,EAAAQ,aAAA,CAAA,EACE,UAAAC,CAAA,EACX,gBAAAA,EAAAC,eAAA,EAAA,EAC6B,eAAAV,EAAAW,WAAAC,EAAAH,CAAA,CAAA,EACL,sBAAAT,EAAAa,oBAAA,CAAA,EACD,kBAAAb,EAAAc,gBAAA,CAAA,EACR,6BAAAd,EAAAe,2BAAA,CAAA,6BAR7C1B,EAAA,EAAA;aAAA,EAAA2B,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,KAAAC,GAAA,EAAAC,cAAA,EAAA,0BAAAd,EAAA,EAAAe,EAAAR,EAAAS,KAAA,6BAdRhC,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,CAAA,kDAKJe,EAAA,EACAf,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAiC,EAAA,GAAA,KAAA,CAAA,EACJjC,EAAA,GAAA;SAAA,EAAAe,EAAA,EACJf,EAAA,GAAA;KAAA,EAAAe,EAAA,EACAf,EAAA,GAAA;KAAA,EAAAkC,GAAA,GAAA,CAAA,EACIlC,EAAA,GAAA;SAAA,EAAA2B,EAAA,GAAAQ,GAAA,EAAA,EAAA,KAAA,KAAAN,GAAA,EAAAO,eAAA,EAAA,OAkBRpC,EAAA,GAAA;CAAA,kBA7BYgB,EAAA,CAAA,EAAAqB,EAAA;cAAA1B,EAAA2B,kBAAA,EAAAC,SAAA,EAAAC,EAAA,EAAA,EAAA,+BAAA,EAAAC,EAAA,EAAA,EAAA,mCAAAC,EAAA,EAAAC,GAAAhC,EAAA2B,kBAAA,EAAAC,MAAA,CAAA,EAAA;SAAA,EAWJvB,EAAA,EAAA,EAAAe,EAAApB,EAAAiC,kBAAA,GDQR,IAAaC,IAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAC/B3B,aAAe4B,EAAK,EACpB3B,aAAe2B,EAAe,EAAK,EACnCC,YAAcD,EAAe,EAAK,EAClCE,SAAWF,EAAK,EAChBpB,2BAA6BoB,EAAe,EAAK,EACjDG,YAAcH,EAAe,EAAK,EAClCtB,oBAAsBsB,EAAe,EAAK,EAC1CR,kBAAoBQ,EAAoB,CAAA,CAAE,EAC1CrB,gBAAkBqB,EAAe,EAAK,EACtCI,QAAUJ,EAAK,EAGfK,WAAaC,EAAM,EACnBxC,qBAAuBwC,EAAM,EAC7BtC,wBAA0BsC,EAAM,EAEeC,0BACyBC,aACpCC,+BAEpCC,kBACAC,uBAAyB,GACzBC,SACAd,mBAAkC,CAAA,EAE1Be,aAAeC,EAAOC,CAAY,EAClCC,eAAiBF,EAAOG,CAAiB,EAEjDC,UAAQ,CACJ,KAAKN,SAAW,KAAKC,aAAaM,UAAS,EAAGC,GAC9C,KAAKT,uBAAyB,KAAKE,aAAaQ,gCAA+B,EAC/E,KAAKX,kBAAoB,KAAKY,sBAAqB,EACnD,KAAKC,iBAAgB,CACzB,CAEAC,YAAYC,EAAsB,CAC1BA,EAAQ,oBACR,KAAKF,iBAAgB,EACrB,KAAKP,eAAeU,cAAa,EAEzC,CAEAC,aAAW,CACP,KAAKpB,2BAA2BqB,iCAAgC,GAAIC,MAAK,CAC7E,CAMAC,uBAAqB,CACjB,KAAKd,eAAeU,cAAa,CACrC,CAMAJ,uBAAqB,CACjB,IAAMS,EAAa,IAAIC,GACvBD,OAAAA,EAAWE,QAAU,GACrBF,EAAWG,KAAO,KAAK9B,QAAO,EAC9B2B,EAAWI,aAAe,KAAKxB,uBACxBoB,CACX,CAEAR,kBAAgB,CACZ,GAAI,CAAC,KAAK/B,kBAAiB,GAAM,KAAKA,kBAAiB,EAAGC,SAAW,EAAG,CACpE,KAAKK,mBAAqB,CAAA,EAC1B,MACJ,CAIA,IAAMsC,EAFoB,KAAK5C,kBAAiB,EAAG6C,MAAK,EAAGC,QAAO,EAE5BC,KAAK,CAACC,EAAGC,IACpCD,EAAEE,aAAcC,QAAO,EAAKF,EAAEC,aAAcC,QAAO,CAC7D,EAEKC,EAAsB,CAAA,EACxBC,EAA0B,CAC1BC,OAAQV,EAAY,CAAC,EAAEU,OACvB5D,MAAO,CAAC6D,GAAAC,EAAA,GAAKZ,EAAY,CAAC,GAAlB,CAAqB7D,cAAe,EAAK,EAAE,GAGvD,QAAS0E,EAAI,EAAGA,EAAIb,EAAY3C,OAAQwD,IAAK,CACzC,IAAMC,EAAcd,EAAYa,CAAC,EAC3BE,EAAkBN,EAAa3D,MAAM2D,EAAa3D,MAAMO,OAAS,CAAC,EAEpE2D,EAAWC,OAAOC,iBAClBJ,EAAYR,cAAgBS,EAAgBT,eAC5CU,EAAWF,EAAYR,aAAaa,KAAKJ,EAAgBT,aAAc,QAAQ,GAG/EQ,EAAYJ,QAAQ1B,KAAOyB,EAAaC,QAAQ1B,IAAMgC,EAAW,GAAKA,GAAY,EAClFP,EAAa3D,MAAMsE,KAAKT,GAAAC,EAAA,GAAKE,GAAL,CAAkB3E,cAAe,EAAI,EAAE,GAE/DqE,EAAOY,KAAKX,CAAY,EACxBA,EAAe,CACXC,OAAQI,EAAYJ,OACpB5D,MAAO,CAAC6D,GAAAC,EAAA,GAAKE,GAAL,CAAkB3E,cAAe,EAAK,EAAE,GAG5D,CAEAqE,EAAOY,KAAKX,CAAY,EACxB,KAAK/C,mBAAqB8C,EAC1B,KAAK5B,eAAeU,cAAa,CACrC,CAEApC,eAAemE,EAAWC,EAAgB,CACtC,OAAOA,EAAMxE,MAAM,CAAC,EAAEkC,EAC1B,CAEApC,cAAcyE,EAAWvB,EAAgB,CACrC,OAAOA,EAAKd,EAChB,CAEA5C,WAAWkF,EAAkB3B,EAAsB,CAE/C,OADwB2B,EAAMxE,MAAMwE,EAAMxE,MAAMO,OAAS,CAAC,EACnC2B,KAAOW,EAAWX,EAC7C,CAKAuC,2BAAyB,CACrB,KAAKlD,gCAAgC9C,KAAI,CAC7C,CAKAiG,4BAA0B,CACtB,KAAKnD,gCAAgCoD,MAAK,CAC9C,CAEUC,eAAeC,EAAgB7B,EAAU,CAC/C,OAAOA,EAAKd,EAChB,4CA3ISrB,EAAsB,2BAAtBA,EAAsBiE,UAAA,CAAA,CAAA,oBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,OAiBpBE,GAAkC,CAAA,UACOC,EAAgB,kuCCxCxEC,EAAA,EAAAC,GAAA,GAAA,CAAA,EAiCApH,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EACAA,EAAA,EAAA;KAAA,EAAAsH,GAAA,EAAA,KAAA,CAAA,EACAtH,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,oCAAA,EAAA,CAAA,EAIIC,EAAA,WAAA,UAAA,CAAAqH,OAAApH,EAAAqH,CAAA,EAAAP,EAAAzD,kBAAgCyD,EAAA7C,sBAAA,EAAuB5D,EAAEyG,EAAAhE,YAAA,CAAa,CAAA,CAAA,EAJ1ElC,EAAA,EAMJf,EAAA,EAAA;CAAA,EAAAe,EAAA,EACAf,EAAA,GAAA;CAAA,QA3CAyH,EAAAR,EAAAhE,YAAA,EAAA,EAAA,EAAA,EAsCQjC,EAAA,CAAA,EAAAC,EAAA,UAAAgG,EAAAzD,iBAAA,EAA6B,mCAAAyD,EAAA3D,YAAA,kBDlBvBoE,GAAqBR,GAAoCS,CAAoB,EAAAC,cAAA,CAAA,CAAA,SAE9E/E,CAAsB,GAAA,qCGRnBgF,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,EAAwCC,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAG,WAAA,CAAY,CAAA,CAAA,EAAqBC,EAAA,EAClFT,EAAA,EAAA;qBAAA,EAAAU,EAAA,EAAA,KAAA,CAAA,EACAV,EAAA,EAAA;qBAAA,EAAAU,EAAA,EAAA,IAAA,CAAA,EACAV,EAAA,EAAA;qBAAA,EAAAU,EAAA,EAAA,IAAA,EACAV,EAAA,GAAA;qBAAA,EAAAU,EAAA,GAAA,IAAA,CAAA,EACJV,EAAA,GAAA;iBAAA,EAAAS,EAAA,EACJT,EAAA,GAAA;aAAA,sCAEIA,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,CAAA,0BAIIC,EAAA,QAAA,UAAA,CAAAC,EAAAQ,CAAA,EAAA,IAAAN,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAO,YAAAC,KAAA,CAAkB,CAAA,CAAA,EAC9BJ,EAAA,EACDT,EAAA,EAAA;iBAAA,EAAAU,EAAA,EAAA,SAAA,EAAA,0BASJV,EAAA,EAAA;aAAA,oBAbQc,EAAA,EAAAC,EAAA,cAAAC,EAAA,EAAA,EAAA,yBAAA,CAAA,EAMAF,EAAA,CAAA,EAAAC,EAAA,gBAAAV,EAAAY,SAAA,EAA2B,WAAAZ,EAAAY,WAAA,CAAAZ,EAAAa,UAAAC,KAAA,EACe,cAAAH,EAAA,EAAA,EAAA,4CAAA,CAAA,GDb9D,IAAaI,IAA4B,IAAA,CAAnC,MAAOA,UAAoCC,EAA6C,CAClFC,oBAAsBC,EAAOC,EAAmB,EAExDC,iBAAmB,GAEnBC,UAAQ,CACJ,MAAMA,SAAQ,EACd,KAAKD,iBAAmB,CAAC,CAAC,KAAKH,oBAAoBK,SAAS,sBAAsB,CACtF,CAKAC,gBAAc,CACV,KAAKV,UAAY,KAAKW,YAAYC,MAAM,CAEpCC,QAAS,CAAC,KAAKC,QAAQD,QAAS,CAACE,EAAWC,SAAUD,EAAWE,UAAU,KAAKC,gBAAgB,EAAGC,EAA4B,CAAC,EACnI,CACL,CAMAC,eAAa,CACT,KAAKN,QAAQD,QAAU,KAAKb,UAAUqB,IAAI,SAAS,GAAGC,MACtD,KAAKC,aAAaC,WAAW,KAAKV,OAAO,EAAEW,UAAU,CACjDC,KAAOC,GAAc,CACjB,KAAK5B,UAAY,GACjB,KAAK6B,SAASjC,KAAKgC,CAAI,CAC3B,EACAE,MAAOA,IAAK,CACR,KAAK9B,UAAY,EACrB,EACH,CACL,CAMA+B,eAAa,CACT,KAAKhB,QAAQD,QAAU,KAAKb,UAAUqB,IAAI,SAAS,GAAGC,MACtD,KAAKC,aAAaQ,WAAW,KAAKjB,OAAO,EAAEW,UAAU,CACjDC,KAAMA,IAAK,CACP,KAAK3B,UAAY,GACjB,KAAKL,YAAYC,KAAI,CACzB,EACAkC,MAAOA,IAAK,CACR,KAAK9B,UAAY,EACrB,EACH,CACL,CAEAT,YAAU,CACN,KAAKiB,iBAAmB,GACxB,KAAKH,oBAAoB4B,MAAM,uBAAwB,EAAI,CAC/D,iEAzDS9B,CAA2B,IAAA+B,GAA3B/B,CAA2B,CAAA,CAAA,GAAA,2BAA3BA,EAA2BgC,UAAA,CAAA,CAAA,0BAAA,CAAA,EAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,WAAA,WAAA,EAAA,CAAA,EAAA,oCAAA,EAAA,CAAA,kBAAA,UAAA,EAAA,gBAAA,eAAA,mBAAA,yBAAA,kBAAA,mBAAA,UAAA,EAAA,CAAA,EAAA,MAAA,OAAA,UAAA,EAAA,CAAA,OAAA,QAAA,EAAA,QAAA,gBAAA,oBAAA,aAAA,OAAA,MAAA,EAAA,CAAA,OAAA,SAAA,aAAA,QAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,eAAA,uCAAA,EAAA,eAAA,EAAA,CAAA,eAAA,yCAAA,EAAA,CAAA,eAAA,0CAAA,EAAA,MAAA,EAAA,CAAA,qBAAA,GAAA,EAAA,MAAA,SAAA,wBAAA,EAAA,QAAA,aAAA,EAAA,CAAA,qBAAA,GAAA,KAAA,OAAA,OAAA,SAAA,EAAA,MAAA,SAAA,sBAAA,EAAA,gBAAA,WAAA,aAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICnBxC1D,EAAA,EAAA,OAAA,CAAA,EAA8BC,EAAA,WAAA,UAAA,CAAA,OAAY0D,EAAAC,QAAA,CAAS,CAAA,EAC/C7D,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,8BAAA,CAAA,EAKIC,EAAA,gBAAA,UAAA,CAAA,OAAiB0D,EAAAC,QAAA,CAAS,CAAA,EAL9BpD,EAAA,EAUAT,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAA8D,EAAA,EAAAC,GAAA,GAAA,CAAA,EAAyB,EAAAC,GAAA,EAAA,CAAA,EA0B7BvD,EAAA,EACJT,EAAA,GAAA;KAAA,EAAAS,EAAA,EACJT,EAAA,GAAA;CAAA,EAAAS,EAAA,EACAT,EAAA,GAAA;CAAA,SA1CMe,EAAA,YAAA6C,EAAA1C,SAAA,EAIMJ,EAAA,CAAA,EAAAC,EAAA,eAAA6C,EAAAK,YAAA,EAA6B,mBAAAL,EAAAxB,gBAAA,EACQ,yBAAA,EAAA,EACL,kBAAAwB,EAAA3C,SAAA,EAEH,mBAAA2C,EAAA1C,UAAAC,KAAA,EACO,WAAAyC,EAAAM,QAAA,EAIpCpD,EAAA,CAAA,EAAAqD,EAAAP,EAAAnC,iBAAA,GAAA,CAAA,EASAX,EAAA,EAAAqD,EAAAP,EAAAM,WAAAN,EAAAQ,SAAAC,OAAA,EAAA,EAAA,kBDLEC,GAAWC,GAAAC,GAAAC,GAAEC,GAAmBC,GAAAC,GAAEC,GAAgCC,EAAoBC,GAAwBC,CAAoB,EAAAC,OAAA,CAAA;CAAA,EAAAC,cAAA,CAAA,CAAA,SAEnI9D,CAA4B,GAAA,oFGZzB+D,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAIIC,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAG,wBAAA,CAAyB,CAAA,CAAA,EAErCC,EAAA,EACLT,EAAA,EAAA;aAAA,6BAiBQA,EAAA,EAAA;qBAAA,EAAAU,EAAA,EAAA,OAAA,EAAA,EACJV,EAAA,EAAA;iBAAA,oBADUW,EAAA,EAAAC,EAAA,gBAAAC,EAAAR,EAAAS,aAAA,MAAAD,IAAAE,OAAAF,EAAA,EAAA,sCAmBdb,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAA6FC,EAAA,QAAA,UAAA,CAAAC,EAAAa,CAAA,EAAA,IAAAX,EAAAC,EAAA,EAAA,OAAAC,EAASF,EAAAY,+BAAA,CAAgC,CAAA,CAAA,EAClIjB,EAAA,CAAA,kDACJS,EAAA,EACJT,EAAA,EAAA;SAAA,oBAFQW,EAAA,CAAA,EAAAO,EAAA;kBAAAb,EAAAc,yBAAAC,EAAA,EAAA,EAAA,mCAAA,EAAAA,EAAA,EAAA,EAAA,mCAAA,EAAA;aAAA,GD7BhB,IAAaC,IAAyB,IAAA,CAAhC,MAAOA,CAAyB,CACzBC,QAAUA,GACVC,iBAAmBC,EAAM,EAElCC,WAAiC,GACjCX,UACAY,oBAAsBC,EAAK,EAC3BC,eAAiBC,EAAsB,gBAAgB,EACvDC,cAAgB,GAChBX,yBAA2B,GAC3BY,iBAAmB,GAETC,kBAAoB,GAEtBC,IAAMC,EAAOC,CAAiB,EAC9BC,aACAC,aAAe,GAEvBC,aAAA,CACIC,GAAO,IAAK,CACR,GAAI,CACA,IAAMC,EAAO,KAAKd,oBAAmB,EACjCc,GACA,KAAKH,aAAe,SAAUG,EAC9B,KAAKJ,aAAe,KAAKC,aAAgBG,EAAoBA,MAAMJ,aAAgBI,EAAcJ,aACjG,KAAKK,iBAAgB,EACrB,KAAKC,UAAS,EACd,KAAKX,iBAAmBY,GAAK,EAAGC,OAAOJ,EAAKK,aAAc,KAAK,EAC/D,KAAK/B,UAAY,KAAKgC,aAAY,IAElC,KAAKrB,WAAa,GAClB,KAAKW,aAAerB,OACpB,KAAKiB,kBAAoB,GACzB,KAAKD,iBAAmB,GACxB,KAAKjB,UAAYC,OAEzB,MAAgB,CACZ,KAAKU,WAAa,GAClB,KAAKW,aAAerB,OACpB,KAAKiB,kBAAoB,EAC7B,CACJ,CAAC,CACL,CAEAe,iBAAe,CACXC,WAAW,IAAK,CACZ,KAAKC,wBAAuB,CAChC,EAAG,CAAC,CACR,CAEAhC,gCAA8B,CAC1B,KAAKE,yBAA2B,CAAC,KAAKA,wBAC1C,CAEA8B,yBAAuB,CACnB,GAAI,KAAKrB,eAAc,EAAI,CACvB,IAAMsB,EAAgB,KAAKtB,eAAc,GAAIsB,cAC7C,KAAKpB,cAAgBoB,EAAcC,aAAeD,EAAcE,aAChE,KAAKnB,IAAIoB,cAAa,CAC1B,CACJ,CAKAP,cAAY,CACR,GAAI,KAAKf,iBACL,MAAO,wBAIf,CAEAW,WAAS,CACD,KAAKN,cAAckB,MAAMC,QAAO,IAAO,YACvC,KAAKvB,kBAAoB,GAEjC,CAEAxB,yBAAuB,CACf,KAAKkB,oBAAmB,IAAOX,QAGnC,KAAKQ,iBAAiBiC,KAAK,KAAK9B,oBAAmB,CAAG,CAC1D,CAEAe,kBAAgB,CACP,KAAKL,aAEC,KAAKA,cAAckB,MAAMC,QAAO,IAAO,UAC1C,KAAKlB,aACL,KAAKZ,WAAc,KAAKW,cAAsBqB,KAAO,gBAAiB,KAAKrB,cAAsBqB,IAAI,KAAO,yBAE5G,KAAKhC,WAAc,KAAKW,cAAsBqB,KAAO,IAAK,KAAKrB,cAAsBqB,IAAI,KAAO,aAE7F,KAAKrB,cAAckB,MAAMC,QAAO,IAAO,eAC9C,KAAK9B,WAAa,KAAKY,aAAe,gCAAkC,oBAExE,KAAKZ,WAAa,KAAKY,aAAe,+BAAiC,mBAVvE,KAAKZ,WAAa,EAY1B,4CApGSJ,EAAyB,2BAAzBA,EAAyBqC,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,6vCCtBtC3D,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;KAAA,EAAAU,EAAA,EAAA,MAAA,CAAA,EACAV,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,OAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAU,EAAA,EAAA,UAAA,CAAA,EACAV,EAAA,CAAA,2BACA8D,EAAA,GAAAC,GAAA,EAAA,CAAA,EASJtD,EAAA,EACAT,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,MAAA,CAAA,EACID,EAAA,GAAA;aAAA,EAAAU,EAAA,GAAA,sBAAA,CAAA,EAUAV,EAAA,GAAA;aAAA,EAAAC,EAAA,GAAA,OAAA,CAAA,EAAuCD,EAAA,EAAA,EAAyCS,EAAA,EAChFT,EAAA,GAAA;aAAA,EAAAC,EAAA,GAAA,OAAA,CAAA,EAAyCD,EAAA,GAAA,GAAA,EAACS,EAAA,EAC1CT,EAAA,GAAA;aAAA,EAAAC,EAAA,GAAA,OAAA,EAAA,EACID,EAAA,GAAA;iBAAA,EAAA8D,EAAA,GAAAE,GAAA,EAAA,CAAA,EAGA/D,EAAA,GAAA,OAAA,EAAA,sBACID,EAAA,EAAA,0CACJS,EAAA,EACJT,EAAA,GAAA;aAAA,EAAAS,EAAA,EACJT,EAAA,GAAA;SAAA,EAAAS,EAAA,EACAT,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,MAAA,GAAA,CAAA,EACID,EAAA,GAAA;aAAA,EAAAU,EAAA,GAAA,sBAAA,EAAA,EASJV,EAAA,GAAA;SAAA,EAAAS,EAAA,EACAT,EAAA,GAAA;SAAA,EAAA8D,EAAA,GAAAG,GAAA,EAAA,CAAA,EAKJxD,EAAA,EACJT,EAAA,GAAA;CAAA,EAAAS,EAAA,EACAT,EAAA,GAAA;CAAA,wBApDqBW,EAAA,CAAA,EAAAC,EAAA,OAAAiD,EAAAvC,OAAA,EACTX,EAAA,EAAAuD,GAAA;cAAA9C,EAAA,GAAA,GAAA,wCAAA,EAAA,IAAAyC,EAAApC,WAAA;aAAA,EACAd,EAAA,CAAA,EAAAwD,EAAAN,EAAA7B,kBAAA,GAAA,EAAA,EAgBIrB,EAAA,CAAA,EAAAC,EAAA,YAAAwD,EAAAP,EAAAnC,oBAAA,IAAA,MAAA0C,EAAAC,QAAA,KAAA,KAAAD,EAAAC,OAAAC,EAAA,EAA8C,cAAAC,EAAAV,EAAAnC,oBAAA,IAAA,MAAA6C,EAAAF,QAAA,KAAA,KAAAE,EAAAF,OAAAZ,IAAA,EACI,YAAAe,EAAAX,EAAAnC,oBAAA,IAAA,MAAA8C,EAAAH,QAAA,KAAA,KAAAG,EAAAH,OAAAI,QAAA,EAIf9D,EAAA,CAAA,EAAA+D,GAAAC,EAAAd,EAAAnC,oBAAA,IAAA,MAAAiD,EAAAN,QAAA,KAAA,KAAAM,EAAAN,OAAAZ,IAAA,EAGnC9C,EAAA,CAAA,EAAAwD,EAAAN,EAAA9B,iBAAA,GAAA,EAAA,EAG6DpB,EAAA,EAAAiE,EAAA,aAAAC,EAAA,GAAA,IAAAC,EAAAjB,EAAAnC,oBAAA,IAAA,KAAA,KAAAoD,EAAAjC,aAAA,MAAA,CAAA,EAApCjC,EAAA,iBAAAiD,EAAA9B,gBAAA,EACrBpB,EAAA,CAAA,EAAAO,EAAA;sBAAA2C,EAAA9B,iBAAA8C,EAAA,GAAA,IAAAE,EAAAlB,EAAAnC,oBAAA,IAAA,KAAA,KAAAqD,EAAAlC,aAAA,MAAA,EAAAgC,EAAA,GAAA,IAAAE,EAAAlB,EAAAnC,oBAAA,IAAA,KAAA,KAAAqD,EAAAlC,aAAA,YAAA,EAAA;iBAAA,EAI4DlC,EAAA,CAAA,EAAAC,EAAA,UAAAoE,EAAA,GAAAC,GAAApB,EAAA1C,wBAAA,CAAA,EAEhER,EAAA,CAAA,EAAAC,EAAA,cAAA,EAAA,EAAqB,UAAAiD,EAAAnC,oBAAA,EAAAwD,OAAA,EACsB,SAAArB,EAAAnC,oBAAA,EAAA2C,MAAA,EACF,WAAA,CAAA,CAAAR,EAAAnC,oBAAA,EAAAyD,WAAA,EACQ,UAAAtB,EAAAnC,oBAAA,CAAA,EACf,UAAA,EAAA,EACjB,qBAAA,EAAA,EAIzBf,EAAA,CAAA,EAAAwD,EAAAN,EAAA/B,cAAA,GAAA,EAAA,kBD7BMsD,GAAyBC,EAAoBC,EAASC,EAAiBC,GAAYC,GAAyBC,EAAsBC,EAAe,EAAAC,OAAA,CAAA,m3BAAA,CAAA,CAAA,SAElJvE,CAAyB,GAAA,wRGjB9BwE,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,kBAN6EI,EAAA,EAAAC,EAAA,UAAAC,EAAA,EAAAC,GAAAC,EAAAC,cAAA,GAAAD,EAAAE,QAAAC,OAAA,CAAA,EAExDP,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAI,UAAA,6BAMjBZ,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,qBACID,EAAA,CAAA,qBACJG,EAAA,EACJH,EAAA,EAAA;KAAA,kBAHqCI,EAAA,EAAAS,EAAA,aAAAC,EAAA,EAAA,EAAAN,EAAAE,QAAAK,aAAA,MAAA,CAAA,EAC7BX,EAAA,CAAA,EAAAY,EAAA;cAAAF,EAAA,EAAA,EAAAN,EAAAE,QAAAK,aAAA,MAAA,EAAA;SAAA,sCAIJf,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,qBAAA,EAAA,EAMIgB,EAAA,cAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAX,EAAAY,EAAA,EAAA,OAAAC,EAAAb,EAAAc,mBAAoC,EAAI,CAAA,CAAA,EAAC,oBAAA,UAAA,CAAAJ,EAAAC,CAAA,EAAA,IAAAX,EAAAY,EAAA,EAAA,OAAAC,EACpBb,EAAAe,kBAAA,CAAmB,CAAA,CAAA,EAP5CpB,EAAA,EAUJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,oBAVYI,EAAA,CAAA,EAAAC,EAAA,cAAAG,EAAAgB,YAAA,CAAA,EAA6B,eAAAhB,EAAAiB,aAAA,CAAA,EACE,UAAAjB,EAAAE,OAAA,EACZ,YAAAF,EAAAkB,SAAA,EACI,sBAAAlB,EAAAmB,mBAAA,EACoB,eAAAnB,EAAAoB,aAAA,CAAA,6BAWvC5B,EAAA,EAAA;qBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,0BAMJF,EAAA,EAAA;iBAAA,kBALQI,EAAA,EAAAC,EAAA,OAAAG,EAAAqB,UAAA,EAAmB,aAAAC,EAAA,EAAA,EAAA,uDAAA,CAAA,sCAWf9B,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,IAAA,EAAA,EAIIgB,EAAA,QAAA,SAAAc,EAAA,CAAAb,EAAAc,CAAA,EAAA,IAAAxB,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAASb,EAAAyB,oBAAAF,CAAA,CAA2B,CAAA,CAAA,EAEnC/B,EAAA,CAAA,EAAoCG,EAAA,EAE7CH,EAAA,EAAA;yBAAA,qBANQI,EAAA,EAAAC,EAAA,aAAAG,EAAA0B,mBAAAC,oBAAA,EAAsD,cAAA3B,EAAA0B,mBAAAE,WAAA,EAIrDhC,EAAA,EAAAiC,EAAA7B,EAAA0B,mBAAAI,WAAA,6BAILtC,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EAAuCD,EAAA,CAAA,EAAqCG,EAAA,EAChFH,EAAA,EAAA;yBAAA,mBAD2CI,EAAA,CAAA,EAAAY,EAAA,GAAAR,EAAA0B,mBAAAI,YAAA,GAAA,6BAZ/CtC,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,MAAA,EACID,EAAA,EAAA;yBAAA,EAAAuC,EAAA,EAAAC,GAAA,EAAA,CAAA,EAA+C,EAAAC,GAAA,EAAA,CAAA,EAanDtC,EAAA,EACJH,EAAA,EAAA;iBAAA,kBAdQI,EAAA,CAAA,EAAAsC,EAAAlC,EAAA0B,mBAAAC,qBAAA,EAAA,EAAA,EAUA/B,EAAA,EAAAsC,EAAAlC,EAAA0B,mBAAAC,qBAAA,GAAA,CAAA,6BASInC,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,OAAA,EAAA,EAA8BD,EAAA,CAAA,EAAmBG,EAAA,EACrDH,EAAA,EAAA;yBAAA,mBADkCI,EAAA,CAAA,EAAAiC,EAAA7B,EAAAE,QAAAiC,KAAA,6BAFtC3C,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,MAAA,EACID,EAAA,EAAA;yBAAA,EAAAuC,EAAA,EAAAK,GAAA,EAAA,CAAA,EAGJzC,EAAA,EACJH,EAAA,EAAA;iBAAA,kBAJQI,EAAA,CAAA,EAAAsC,EAAAlC,EAAAE,QAAAiC,OAAA,MAAAnC,EAAAE,QAAAiC,MAAAE,OAAA,EAAA,EAAA,sCA4BI7C,EAAA,EAAA;6BAAA,EAAAC,EAAA,EAAA,wBAAA,EAAA,EAAmEgB,EAAA,mBAAA,UAAA,CAAAC,EAAA4B,CAAA,EAAA,IAAAtC,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAAoBb,EAAAuC,wBAAAvC,EAAAwC,mBAAA,CAA4C,CAAA,CAAA,EAAnI7C,EAAA,EACJH,EAAA,EAAA;yBAAA,qBAD2BI,EAAA,EAAAC,EAAA,sBAAAG,EAAAwC,mBAAA,sCAInBhD,EAAA,EAAA;iCAAA,EACAA,EAAA,EAAA;iCAAA,EAAAC,EAAA,EAAA,4BAAA,EAAA,EAMIgD,GAAA,oBAAA,SAAAlB,EAAA,CAAAb,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA+B,OAAAC,GAAA5C,EAAA6C,YAAAtB,CAAA,IAAAvB,EAAA6C,YAAAtB,GAAAV,EAAAU,CAAA,CAAA,CAAA,EAIAd,EAAA,6BAAA,UAAA,CAAAC,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAA8Bb,EAAA8C,0BAAA,CAA2B,CAAA,CAAA,EAAC,aAAA,UAAA,CAAApC,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAC5Cb,EAAA+C,WAAAC,KAAA,CAAiB,CAAA,CAAA,EAAC,cAAA,UAAA,CAAAtC,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAAAb,EAAAc,mBACI,EAAI,CAAA,CAAA,EAAC,gBAAA,SAAAS,EAAA,CAAAb,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EACxBb,EAAAiD,UAAA1B,CAAA,CAAiB,CAAA,CAAA,EAAC,kBAAA,SAAAA,EAAA,CAAAb,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAChBb,EAAAkD,YAAA3B,CAAA,CAAmB,CAAA,CAAA,EAAC,eAAA,SAAAA,EAAA,CAAAb,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EACvBb,EAAAmD,SAAA5B,CAAA,CAAgB,CAAA,CAAA,EAAC,gBAAA,UAAA,CAAAb,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAEhBb,EAAAoD,cAAc,EAAI,CAAC,CAAA,CAAA,EAAC,oBAAA,UAAA,CAAA1C,EAAAgC,CAAA,EAAA,IAAA1C,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAChBb,EAAAqD,eAAA,CAAgB,CAAA,CAAA,EAlBzC1D,EAAA,EAoBJH,EAAA,EAAA;6BAAA,qBAnBQI,EAAA,CAAA,EAAAC,EAAA,eAAAG,EAAAoB,aAAA,CAAA,EAA+B,iBAAApB,EAAAiB,aAAA,CAAA,EACE,cAAAjB,EAAAgB,YAAA,CAAA,EACJ,SAAAhB,EAAAsD,MAAA,EACZ,UAAAtD,EAAAE,OAAA,EAEjBqD,GAAA,cAAAvD,EAAA6C,WAAA,EACAhD,EAAA,oBAAAG,EAAAwD,iBAAA,EAAuC,sBAAAxD,EAAAmB,mBAAA,EACI,kBAAAnB,EAAAyD,eAAA,EACR,sBAAAzD,EAAAwC,mBAAA,sCAnCvDhD,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EAIIgB,EAAA,cAAA,SAAAc,EAAA,CAAAb,EAAAgD,CAAA,EAAA,IAAA1D,EAAAY,EAAA,EAAA,OAAAC,EAAeb,EAAA2D,aAAApC,CAAA,CAAoB,CAAA,CAAA,EAEnC/B,EAAA,EAAA;qBAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;yBAAA,EAAAC,EAAA,EAAA,sBAAA,EAAA,EASIgB,EAAA,oBAAA,UAAA,CAAAC,EAAAgD,CAAA,EAAA,IAAA1D,EAAAY,EAAA,EAAA,OAAAC,EAAqBb,EAAAoD,cAAc,EAAK,CAAC,CAAA,CAAA,EAAC,uBAAA,SAAA7B,EAAA,CAAAb,EAAAgD,CAAA,EAAA,IAAA1D,EAAAY,EAAA,EAAA,OAAAC,EAClBb,EAAA4D,uBAAArC,CAAA,CAA8B,CAAA,CAAA,EAAC,0BAAA,SAAAA,EAAA,CAAAb,EAAAgD,CAAA,EAAA,IAAA1D,EAAAY,EAAA,EAAA,OAAAC,EAC5Bb,EAAA6D,0BAAAtC,CAAA,CAAiC,CAAA,CAAA,EAXhE5B,EAAA,EAaAH,EAAA,EAAA;yBAAA,EAAAuC,EAAA,EAAA+B,GAAA,EAAA,CAAA,EAGArE,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;6BAAA,EAAAuC,EAAA,GAAAgC,GAAA,EAAA,EAAA,EAuBJpE,EAAA,EACJH,EAAA,GAAA;qBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;iBAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;aAAA,oBA/CQI,EAAA,EAAAoE,GAAA,cAAAhE,EAAAiE,YAAA,EADApE,EAAA,UAAAC,EAAA,GAAAC,GAAAC,EAAAC,cAAA,GAAAD,EAAAE,QAAAC,OAAA,CAAA,EAI6BP,EAAA,CAAA,EAAAC,EAAA,UAAAC,EAAA,GAAAoE,GAAA,CAAAlE,EAAAyD,eAAA,CAAA,EAErB7D,EAAA,CAAA,EAAAC,EAAA,cAAAG,EAAAgB,YAAA,CAAA,EAA6B,UAAAhB,EAAAE,QAAAiE,OAAA,EACF,SAAAnE,EAAAE,QAAAkE,MAAA,EACF,WAAA,CAAA,CAAApE,EAAAE,QAAAmE,WAAA,EACS,UAAArE,EAAAE,OAAA,EACf,UAAA,EAAA,EACF,YAAAF,EAAAkB,SAAA,EACM,uBAAAlB,EAAAsE,oBAAA,EAM3B1E,EAAA,CAAA,EAAAsC,EAAAlC,EAAAwC,oBAAA,EAAA,EAAA,EAG2B5C,EAAA,EAAAC,EAAA,UAAAC,EAAA,GAAAyE,GAAAvE,EAAAgB,YAAA,CAAA,CAAA,EACvBpB,EAAA,CAAA,EAAAsC,EAAAlC,EAAAgB,YAAA,EAAA,GAAA,EAAA,sCA8BpBxB,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,2BAAA,EAAA,EAA8CgB,EAAA,cAAA,UAAA,CAAAC,EAAA8D,CAAA,EAAA,IAAAxE,EAAAY,EAAA,EAAA,OAAAC,EAAAb,EAAAc,mBAAoC,EAAK,CAAA,CAAA,EAAvFnB,EAAA,EACJH,EAAA,EAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;KAAA,oBAFkCI,EAAA,CAAA,EAAAC,EAAA,UAAAG,EAAAE,OAAA,sCAOtBV,EAAA,EAAA;iBAAA,EAAAC,EAAA,EAAA,4BAAA,EAAA,EAKIgD,GAAA,oBAAA,SAAAlB,EAAA,CAAAb,EAAA+D,CAAA,EAAA,IAAAzE,EAAAY,EAAA,CAAA,EAAA+B,OAAAC,GAAA5C,EAAA6C,YAAAtB,CAAA,IAAAvB,EAAA6C,YAAAtB,GAAAV,EAAAU,CAAA,CAAA,CAAA,EAIAd,EAAA,6BAAA,UAAA,CAAAC,EAAA+D,CAAA,EAAA,IAAAzE,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAA8Bb,EAAA8C,0BAAA,CAA2B,CAAA,CAAA,EAAC,8BAAA,UAAA,CAAApC,EAAA+D,CAAA,EAAA,IAAAzE,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAC3Bb,EAAA0E,2BAAA,CAA4B,CAAA,CAAA,EAAC,aAAA,UAAA,CAAAhE,EAAA+D,CAAA,EAAA,IAAAzE,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAC9Cb,EAAA+C,WAAAC,KAAA,CAAiB,CAAA,CAAA,EAAC,cAAA,UAAA,CAAAtC,EAAA+D,CAAA,EAAA,IAAAzE,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAAAb,EAAAc,mBACI,EAAI,CAAA,CAAA,EAAC,oBAAA,UAAA,CAAAJ,EAAA+D,CAAA,EAAA,IAAAzE,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAGpBb,EAAAqD,eAAA,CAAgB,CAAA,CAAA,EAfzC1D,EAAA,EAiBJH,EAAA,EAAA;aAAA,qBAhBQI,EAAA,EAAAC,EAAA,eAAAG,EAAAoB,aAAA,CAAA,EAA+B,iBAAApB,EAAAiB,aAAA,CAAA,EACE,cAAAjB,EAAAgB,YAAA,CAAA,EACJ,UAAAhB,EAAAE,OAAA,EAE7BqD,GAAA,cAAAvD,EAAA6C,WAAA,EACAhD,EAAA,oBAAAG,EAAAwD,iBAAA,EAAuC,sBAAAxD,EAAAmB,mBAAA,EACI,kBAAAnB,EAAAyD,eAAA,EACR,eAAA,EAAA,EAKd,WAAA,EAAA,6BAhBjCjE,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;aAAA,EACAA,EAAA,EAAA;aAAA,EAAAuC,EAAA,EAAA4C,GAAA,EAAA,EAAA,EAmBJhF,EAAA,EACJH,EAAA,EAAA;KAAA,kBAtBiFI,EAAA,EAAAC,EAAA,UAAA+E,GAAA,EAAAC,GAAA7E,EAAAgB,YAAA,EAAAhB,EAAAE,QAAAC,SAAAH,EAAAC,cAAA,CAAA,CAAA,EAEzEL,EAAA,CAAA,EAAAsC,EAAAlC,EAAAgB,YAAA,EAAA,GAAA,CAAA,sCA+CAxB,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,UAAA,CAAAC,EAAAoE,CAAA,EAAA,IAAA9E,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAASb,EAAA+E,UAAA,CAAW,CAAA,CAAA,EACrDvF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,qBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAgF,WAAA,EACHpF,EAAA,CAAA,EAAAC,EAAA,eAAAG,EAAAiF,cAAA,IAAAjF,EAAAkF,gBAAAC,OAAA,qCAAA,kCAAA,sCAIV3F,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAA8CgB,EAAA,QAAA,UAAA,CAAAC,EAAA0E,CAAA,EAAA,IAAApF,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAASb,EAAAqF,YAAA,CAAa,CAAA,CAAA,EAChE7F,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,qBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAsF,WAAA,sCAKb9F,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAAgDgB,EAAA,QAAA,UAAA,CAAAC,EAAA6E,CAAA,EAAA,IAAAvF,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAASb,EAAAwF,WAAA,CAAY,CAAA,CAAA,EACjEhG,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;iBAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;aAAA,EAAAG,EAAA,EACJH,EAAA,EAAA;SAAA,qBAHiBI,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAyF,OAAA,sCAnBrBjG,EAAA,EAAA;KAAA,EAAAC,EAAA,EAAA,MAAA,EAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,SAAAc,EAAA,CAAAb,EAAAgF,CAAA,EAAA,IAAA1F,EAAAY,EAAA,EAAA,OAAAC,EAASb,EAAA2F,YAAApE,CAAA,CAAmB,CAAA,CAAA,EAC7D/B,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,UAAA,EAAA,EACAF,EAAA,EAAA;aAAA,EAAAE,EAAA,EAAA,OAAA,EAAA,EACJF,EAAA,EAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,EAAA;SAAA,EAAAuC,EAAA,GAAA6D,GAAA,EAAA,CAAA,EAAc,GAAAC,GAAA,EAAA,CAAA,EAMC,GAAAC,GAAA,EAAA,CAAA,EAYfrG,EAAA,GAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,UAAA,CAAA,IAAAsF,EAAArF,EAAAgF,CAAA,EAAA,IAAA1F,EAAAY,EAAA,EAAA,OAAAC,EAAAb,EAAAmB,oBAA+BnB,EAAA+C,WAAAC,KAAA,GAAiB+C,EAAG/F,EAAAgG,sBAAA,IAAuB,KAAA,KAAAD,EAAAE,eAAA,CAAA,CAAA,CAAA,EAC3GzG,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,UAAA,EAAA,EACAF,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,EACJF,EAAA,GAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,SAAA,EAAA,EAAqCgB,EAAA,QAAA,UAAA,CAAAC,EAAAgF,CAAA,EAAA,IAAA1F,EAAAY,EAAA,EAAA,OAAAC,EAASb,EAAAqD,eAAA,CAAgB,CAAA,CAAA,EAC1D7D,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,UAAA,EAAA,EACAF,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,EACJF,EAAA,GAAA;SAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;SAAA,EAAAC,EAAA,GAAA,SAAA,EAAA,EAA6CgB,EAAA,QAAA,UAAA,CAAAC,EAAAgF,CAAA,EAAA,IAAA1F,EAAAY,EAAA,EAAA,OAAAC,EAASb,EAAAkG,eAAA,CAAgB,CAAA,CAAA,EAClE1G,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,UAAA,EAAA,EACAF,EAAA,GAAA;aAAA,EAAAE,EAAA,GAAA,OAAA,EAAA,EACJF,EAAA,GAAA;SAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACJH,EAAA,GAAA;CAAA,oBApCSI,EAAA,EAAAC,EAAA,UAAA+E,GAAA,EAAAuB,GAAAnG,EAAAoG,iBAAAC,EAAArG,EAAAoG,iBAAAE,CAAA,CAAA,EAEY1G,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAuG,OAAA,EAGb3G,EAAA,CAAA,EAAAsC,EAAAlC,EAAAwG,OAAA,GAAA,EAAA,EAMA5G,EAAA,EAAAsC,EAAAlC,EAAAyG,QAAA,GAAA,EAAA,EAMA7G,EAAA,EAAAsC,EAAAlC,EAAA0G,UAAA,GAAA,EAAA,EAOa9G,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAA2G,UAAA,EAIA/G,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAAE,QAAAC,QAAAH,EAAAI,WAAAJ,EAAA4G,WAAA,EACHhH,EAAA,CAAA,EAAAC,EAAA,eAAAG,EAAAE,QAAAC,QAAA,2CAAA,oCAAA,EAGGP,EAAA,CAAA,EAAAC,EAAA,OAAAG,EAAA6G,OAAA,sCAiBbrH,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,mBAAA,EAAA,EAAkBgB,EAAA,cAAA,SAAAc,EAAA,CAAAb,EAAAoG,CAAA,EAAA,IAAA9G,EAAAY,EAAA,CAAA,EAAA,OAAAC,EAAeb,EAAA+G,eAAAxF,CAAA,CAAsB,CAAA,CAAA,EAAvD5B,EAAA,EACJH,EAAA,EAAA;KAAA,6BAFAA,EAAA,EAAA;KAAA,EAAAuC,EAAA,EAAAiF,GAAA,EAAA,CAAA,kBAAApH,EAAA,EAAAsC,EAAAlC,EAAAiB,aAAA,EAAA,GAAA,CAAA,GDlJE,IAAOgG,GAAP,MAAOA,UAAsBC,EAAsB,CACrDC,aAAeC,EAAOC,CAAY,EAClCC,eAAiBF,EAAOG,CAAiB,EACzCC,SAAWJ,EAAOK,EAAS,EACnBC,SAAWN,EAAiBO,EAAQ,EAE5CvG,aAAewG,EAA+BC,MAAS,EACvD5G,aAAe2G,EAAe,EAAK,EACnC5G,YAAc4G,EAAe,EAAK,EAGlCE,SAAWF,EAA+BC,MAAS,EACnDhF,YAAckF,GAAe,EAAK,EAElChF,WAAaiF,EAAM,EAEnBC,oBAAsBC,EAAkC,YAAY,EACpElC,sBAAwBkC,EAAUC,SAA6CC,EAA4B,EAE3G,OAAOC,mBAAgDR,OAEvDS,qBAAuB,GACvBxH,mBAAqB,GACrByH,WACA3G,YAAc,CAAA,EACd4G,qBAAuB,GACvBhF,kBACAiF,kBACAC,uBAEAC,SACAjH,mBACSkH,SAAWA,GACX1D,gBAAkBA,EAC3BuB,QAAU,GACVC,UAAY,GACZF,OAAS,GACThE,oBAAqDqF,OAC5CgB,iBAAmBb,EAAM,EAGzB3G,WAAaA,GACbsF,WAAaA,GACbrB,YAAcA,GACdiB,QAAUA,GACVd,QAAUA,GACVT,YAAcA,GACd5E,WAAaA,GACbyG,QAAUA,GAEnB5G,cAAgB2H,EAAe,EAAK,EACpCkB,eAAiBlB,EAAc,CAAA,CAAE,EACjCmB,qBAAuBnB,EAAoB,CAAA,CAAE,EAC7CxB,iBAAmB,CAAEE,EAAG,EAAGD,EAAG,CAAC,EAC/B/C,OAEA0F,aAAA,CACI,MAAK,EACL,KAAK1F,OAAS,KAAK6D,aAAa8B,UAAS,GAAMC,GAAW,kBAAkB,CAChF,CAEA,IAAIC,cAAY,CACZ,OAAO,KAAKnD,sBAAqB,CACrC,CAEAoD,UAAQ,CACJ,OAAO,KAAKlJ,QAAQmJ,kBAAoBnE,EAAgBC,MAC5D,CAEAlC,UAAUqG,EAAc,CACpB,KAAK7C,QAAU6C,CACnB,CAEApG,YAAYoG,EAAc,CACtB,KAAK5C,UAAY4C,CACrB,CAEAnG,SAASmG,EAAc,CACnB,KAAK9C,OAAS8C,CAClB,CAEA3F,aAAa4F,EAAiB,CAC1B,IAAMC,EAAgBD,EAAME,OACJC,OAAOC,iBAAiBH,CAAa,EAAEI,SAAW,YAGtEL,EAAMM,eAAc,EAEhB5C,EAAcoB,oBAAsBpB,EAAcoB,qBAAuB,OACzEpB,EAAcoB,mBAAmBpE,aAAe,GAChDgD,EAAcoB,mBAAmByB,iBAAgB,EACjD7C,EAAcoB,mBAAmBf,eAAeyC,cAAa,GAGjE9C,EAAcoB,mBAAqB,KAEnC,KAAKjC,iBAAmB,CACpBE,EAAGiD,EAAMS,QACT3D,EAAGkD,EAAMU,SAGb,KAAKhG,aAAe,GACpB,KAAKiG,uBAAsB,EAC3B,KAAKC,kBAAiB,EAE9B,CAEAD,wBAAsB,CAElB,IAAME,EAAcV,OAAOW,WAEvB,KAAKjE,iBAAiBE,EAAIgE,IAAgBF,IAC1C,KAAKhE,iBAAiBE,EAAI8D,EAAcE,IAAgB,GAEhE,CAEAH,mBAAiB,CACb,IAAMI,EAAgB,KAAK7C,SAAS8C,cAAc,oCAAoC,EAClFD,GACA,KAAK/C,SAASiD,SAASF,EAAe,WAAY,QAAQ,CAElE,CAEAT,kBAAgB,CACZ,IAAMS,EAAgB,KAAK7C,SAAS8C,cAAc,oCAAoC,EAClFD,GACA,KAAK/C,SAASiD,SAASF,EAAe,aAAc,MAAM,CAElE,CAGAG,gBAAc,CACV,KAAKzG,aAAe,GACpB,KAAK6F,iBAAgB,CACzB,CAKAa,UAAQ,CACJ,MAAMA,SAAQ,EACd,KAAKhC,SAAW,KAAKxB,aAAayD,YAAW,EAC7C,KAAKlJ,mBAAqB,KAAKyF,aAAa0D,sBAAsB,KAAK3K,OAAO,EAC9E,KAAKwI,uBAAyB,KAAKvB,aAAa2D,gCAA+B,EAC/E,KAAKC,gBAAe,EACpB,KAAKC,oBAAmB,EACxB,KAAKC,uBAAsB,CAC/B,CAEAA,wBAAsB,CAClB,GAAI,CACA,GAAI,KAAKnC,eAAc,EAAGzG,OAAS,EAAG,CAClC,IAAM6I,EAAmB,KAAKpC,eAAc,EAAG,CAAC,EAE5CoC,GAAkBC,KAClB,KAAK3I,oBAAsB0I,EAC3B,KAAK5D,eAAe8D,aAAY,EAExC,CACA,GAAI,KAAKrC,qBAAoB,EAAG1G,OAAS,EAAG,CACxC,IAAM6I,EAAmB,KAAKnC,qBAAoB,EAAG,CAAC,EAElDmC,GAAkBC,KAClB,KAAK3I,oBAAsB0I,EAC3B,KAAK5D,eAAe8D,aAAY,EAExC,CACJ,OAASC,EAAO,CACZ,MAAM,IAAIC,MAAMD,EAAME,SAAQ,CAAE,CACpC,CACJ,CAKAC,aAAW,CACP,KAAK9J,mBAAqB,KAAKyF,aAAa0D,sBAAsB,KAAK3K,OAAO,EAC9E,KAAKqI,WAAa,KAAKpB,aAAasE,eAAc,EAClD,KAAK7J,YAAc,KAAKuF,aAAauE,sBAAsB,KAAKxL,OAAO,EACvE,KAAKsI,sBAAwBmD,GAAgB,KAAKzL,QAAQ0L,YAAY,GAAGC,uBAAyB,KAAKC,uBAAyB,GAChI,KAAKf,gBAAe,EACpB,KAAKC,oBAAmB,CAC5B,CAMAe,uBAAqB,CACjB,KAAKzE,eAAeyC,cAAa,CACrC,CAMAtI,oBAAoBF,EAAkB,CAC7BA,EAAOyK,UACR,KAAKlE,SAAQ,GAAImE,QAAO,EACxB,KAAKC,yBAAyBC,sBAAsB,KAAKzK,mBAAmBE,YAAa,cAAiB,EAElH,CAKAkB,2BAAyB,CACrB,KAAKmF,oBAAmB,GAAInF,0BAAyB,CACzD,CAKA4B,4BAA0B,CACtB,KAAKuD,oBAAmB,GAAIvD,2BAA0B,CAC1D,CAOAqG,iBAAe,CACX,GAAI,CAAC,KAAK7K,QAAQkM,QAAS,CACvB,KAAK5I,kBAAoB,CAAA,EACzB,MACJ,CACA,KAAKA,kBAAoB,KAAKtD,QAAQkM,QAAQC,KAC1C,CAACC,EAAaC,IACVC,OAAOD,EAAYE,YAAY,EAAID,OAAOF,EAAYG,YAAY,GAAKH,EAAY/L,aAAcmM,QAAO,EAAKH,EAAYhM,aAAcmM,QAAO,CAAE,CAE5J,CAOA7I,0BAA0B8I,EAAiB,CACvC,IAAMrJ,EAAS,KAAK6D,aAAa8B,UAAS,EACtC2D,GAAuBtJ,CAAM,IACzB,KAAKnC,oBACL,KAAK+K,yBAAyBC,sBAAsBQ,CAAS,EAE7D,KAAKE,OAAOC,SAAS,CAAC,UAAWxJ,EAAO6H,GAAI,eAAe,EAAG,CAC1DvJ,YAAa,CACTmL,eAAgBJ,GAEvB,EAGb,CAEQ3B,qBAAmB,CAEnB,KAAK9K,SAAW,EAAE,KAAKA,mBAAmB8M,MAC1C,KAAK9M,QAAU+M,OAAOC,OAAO,IAAIF,GAAQ,KAAK9M,OAAO,EAE7D,CAEUqC,wBAAwB4K,EAAa,CAC3C,KAAKtE,iBAAiB7F,KAAKmK,CAAI,CACnC,4CAtQSlG,EAAa,2BAAbA,EAAamG,UAAA,CAAA,CAAA,UAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,4DAiByDlF,GAA4B,CAAA,+CAjBlG3H,EAAA,QAAA,SAAAc,EAAA,CAAA,OAAAgM,EAAA7C,eAAAnJ,CAAA,CAAsB,EAAA,GAAAiM,EAAA,qzGC3EnC/N,EAAA,EAAA,MAAA,CAAA,EAIID,EAAA,EAAA;KAAA,EAAAuC,EAAA,EAAA0L,GAAA,GAAA,CAAA,EAAuB,EAAAC,GAAA,EAAA,CAAA,EAQA,EAAAC,GAAA,EAAA,CAAA,EAmBvBlO,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,EAAA;SAAA,EAAAC,EAAA,EAAA,KAAA,EACID,EAAA,EAAA;aAAA,EAAAC,EAAA,EAAA,MAAA,CAAA,EACID,EAAA,GAAA;iBAAA,EAAAuC,EAAA,GAAA6L,GAAA,EAAA,CAAA,EAA4B,GAAAC,GAAA,EAAA,CAAA,EAU8F,GAAAC,GAAA,EAAA,CAAA,EAyB9HnO,EAAA,EACAH,EAAA,GAAA;aAAA,EAAAuC,EAAA,GAAAgM,GAAA,GAAA,EAAA,EAoDJpO,EAAA,EACJH,EAAA,GAAA;KAAA,EAAAG,EAAA,EACAH,EAAA,GAAA;KAAA,EAAAuC,EAAA,GAAAiM,GAAA,EAAA,CAAA,EAA2D,GAAAC,GAAA,EAAA,CAAA,EA6B/DtO,EAAA,EACAH,EAAA,GAAA;CAAA,EAAAC,EAAA,GAAA,qBAAA,EAAA,CAAA,EAUIgB,EAAA,aAAA,UAAA,CAAAkC,OAAAjC,EAAAwN,CAAA,EAAArN,EAAc0M,EAAAxK,WAAAC,KAAA,CAAiB,CAAA,CAAA,EAAC,uBAAA,SAAAzB,EAAA,CAAAoB,OAAAjC,EAAAwN,CAAA,EAAArN,EAER0M,EAAA3J,uBAAArC,CAAA,CAA8B,CAAA,CAAA,EAAC,0BAAA,SAAAA,EAAA,CAAAoB,OAAAjC,EAAAwN,CAAA,EAAArN,EAC5B0M,EAAA1J,0BAAAtC,CAAA,CAAiC,CAAA,CAAA,EAbhE5B,EAAA,EAiBAH,EAAA,GAAA;;CAAA,EACAA,EAAA,GAAA;CAAA,EAAAuC,EAAA,GAAAoM,GAAA,GAAA,EAAA,EAuCAzO,EAAA,GAAA,MAAA,EAAA,CAAA,EAEAF,EAAA,GAAA;;CAAA,EAAAuC,EAAA,GAAAqM,GAAA,EAAA,EAAA,cAAA,CAAA,EAMI3N,EAAA,gBAAA,UAAA,CAAAkC,OAAAjC,EAAAwN,CAAA,EAAArN,EAAiB0M,EAAAc,kBAAA,CAAmB,CAAA,CAAA,EAMxC7O,EAAA,GAAA;CAAA,sBA/NIK,EAAA,UAAAyO,GAAA,GAAAC,GAAA,CAAAhB,EAAA9J,gBAAA8J,EAAAnE,SAAA,EAAA,CAAAmE,EAAAtN,cAAA,GAAAsN,EAAArN,QAAAC,QAAA,CAAAoN,EAAAtN,cAAA,CAAA,CAAA,EAEAL,EAAA,CAAA,EAAAsC,EAAAqL,EAAArN,QAAAC,QAAA,EAAA,EAAA,EAQAP,EAAA,EAAAsC,EAAAqL,EAAAtN,cAAA,EAAA,EAAA,EAAA,EAKAL,EAAA,EAAAsC,EAAAqL,EAAAtN,cAAA,EAAA,GAAA,CAAA,EAgBwEL,EAAA,CAAA,EAAAC,EAAA,UAAAC,EAAA,GAAAC,GAAAwN,EAAAtN,cAAA,GAAAsN,EAAArN,QAAAC,OAAA,CAAA,EAC5DP,EAAA,CAAA,EAAAsC,EAAAqL,EAAA/E,qBAAA,GAAA,EAAA,EAUA5I,EAAA,EAAAsC,EAAAqL,EAAAzB,uBAAAyB,EAAA5E,WAAA4E,EAAA3E,SAAA4F,UAAAjB,EAAAvM,YAAA,IAAAuM,EAAA7L,mBAAAI,cAAA,GAAA,GAAA,EAAA,EAkBAlC,EAAA,EAAAsC,EAAAqL,EAAA5E,WAAA4E,EAAA3E,SAAA6F,4BAAAlB,EAAA5E,WAAA4E,EAAA3E,SAAA8F,wBAAA,GAAA,EAAA,EAQJ9O,EAAA,CAAA,EAAAsC,EAAAqL,EAAAzM,mBAAA,GAAA,EAAA,EAsDRlB,EAAA,CAAA,EAAAsC,EAAA,CAAAqL,EAAArM,WAAAqM,EAAAzM,oBAAA,CAAAyM,EAAAtM,aAAA,EAAA,GAAA,EAAA,EAKArB,EAAA,EAAAsC,EAAAqL,EAAArM,UAAA,GAAA,EAAA,EA2BAtB,EAAA,CAAA,EAAAC,EAAA,eAAA0N,EAAAtM,aAAA,CAAA,EAA+B,WAAAsM,EAAAzF,SAAA,CAAA,EACR,cAAAyF,EAAAvM,YAAA,GAAAuM,EAAA5E,WAAA4E,EAAA3E,SAAA8F,uBAAA,EACuD,UAAAnB,EAAArN,OAAA,EAC3D,cAAAqN,EAAA1K,YAAA,CAAA,EACU,sBAAA0K,EAAApM,mBAAA,EACc,kBAAAoM,EAAA9J,eAAA,EACR,oBAAA8J,EAAA/J,iBAAA,EACI,eAAA+J,EAAAnM,aAAA,CAAA,EAER,6BAAAmM,EAAAoB,0BAAA,EAOnC/O,EAAA,CAAA,EAAAsC,EAAAqL,EAAAtJ,aAAA,GAAA,EAAA,EAuC6DrE,EAAA,EAAAC,EAAA,UAAA+E,GAAA,GAAAuB,GAAAoH,EAAAqB,cAAAvI,EAAAkH,EAAAqB,cAAAtI,CAAA,CAAA,EAIzD1G,EAAA,CAAA,EAAAC,EAAA,iCAAA,EAAA,EAAuC,mCAAA,kCAAA,EACgC,4BAAAgP,CAAA,EACvB,0BAAAtB,EAAAjF,oBAAA,kBDlK5CwG,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAjH,GACAkH,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,EAAyB,EAAAC,OAAA,CAAA,61HAAA,6rDAAA,EAAAC,KAAA,CAAAC,UAxBjB,CACRC,GAAQ,OAAQ,CACZC,GAAW,SAAU,CAACC,GAAM,CAAEC,QAAS,CAAC,CAAE,EAAGC,GAAQ,gBAAiBF,GAAM,CAAEC,QAAS,CAAC,CAAE,CAAC,CAAC,CAAC,EAC7FF,GAAW,SAAU,CAACG,GAAQ,iBAAkBF,GAAM,CAAEC,QAAS,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAC3E,CAAC,CACL,EAAAE,gBAAA,CAAA,CAAA",
  "names": ["LinkPreviewService", "http", "inject", "HttpClient", "resourceUrl", "cache", "links", "fetchLink", "url", "encodedUrl", "encodeURIComponent", "params", "HttpParams", "set", "preview$", "get", "pipe", "shareReplay", "factory", "\u0275fac", "providedIn", "urlRegex", "LinkifyService", "find", "text", "linkableItems", "match", "exec", "url", "start", "index", "end", "length", "isRemoved", "linkableItem", "type", "value", "isLink", "href", "isLinkPreviewRemoved", "push", "factory", "\u0275fac", "providedIn", "MAX_CONTENT_LENGTH", "PostingCreateEditDirective", "metisService", "inject", "MetisService", "modalService", "NgbModal", "formBuilder", "FormBuilder", "posting", "onCreate", "EventEmitter", "isModalOpen", "modalRef", "isLoading", "maxContentLength", "editorHeight", "MarkdownEditorHeight", "INLINE", "content", "formGroup", "EditType", "PostingEditType", "editType", "id", "UPDATE", "CREATE", "ngOnInit", "ngOnChanges", "resetFormGroup", "confirm", "valid", "updatePosting", "createPosting", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "PostingCreateEditModalDirective", "PostingCreateEditDirective", "postingEditor", "modalTitle", "ngOnInit", "updateModalTitle", "ngOnChanges", "__ngFactoryType__", "viewQuery", "rf", "ctx", "ChannelReferenceAction", "TextEditorAction", "metisService", "channelService", "ID", "DEFAULT_INSERT_TEXT", "cachedChannels", "disposableCompletionProvider", "constructor", "faHashtag", "register", "editor", "translateService", "registerCompletionProviderForCurrentModel", "fetchChannels", "bind", "channel", "range", "TextEditorCompletionItem", "name", "label", "id", "TextEditorCompletionItemKind", "Default", "run", "replaceTextAtCurrentSelection", "triggerCompletion", "focus", "__async", "response", "firstValueFrom", "getPublicChannelsOfCourse", "getCourse", "body", "dispose", "undefined", "UserMentionAction", "TextEditorAction", "courseManagementService", "metisService", "disposableCompletionProvider", "ID", "DEFAULT_INSERT_TEXT", "constructor", "faAt", "register", "editor", "translateService", "registerCompletionProviderForCurrentModel", "loadUsersForSearchTerm", "bind", "user", "range", "TextEditorCompletionItem", "name", "label", "login", "TextEditorCompletionItemKind", "User", "run", "replaceTextAtCurrentSelection", "triggerCompletion", "focus", "dispose", "searchTerm", "__async", "firstValueFrom", "searchMembersForUserMentions", "getCourse", "id", "body", "ExerciseReferenceAction", "TextEditorDomainActionWithOptions", "metisService", "ID", "DEFAULT_INSERT_TEXT", "disposableCompletionProvider", "constructor", "register", "editor", "translateService", "exercises", "getCourse", "setValues", "map", "exercise", "id", "toString", "value", "title", "type", "registerCompletionProviderForCurrentModel", "Promise", "resolve", "getValues", "item", "range", "TextEditorCompletionItem", "getLinkForExercise", "TextEditorCompletionItemKind", "Default", "run", "replaceTextAtCurrentSelection", "triggerCompletion", "focus", "dispose", "getOpeningIdentifier", "FaqReferenceAction", "TextEditorDomainActionWithOptions", "metisService", "ID", "DEFAULT_INSERT_TEXT", "disposableCompletionProvider", "constructor", "register", "editor", "translateService", "faqs", "getCourse", "setValues", "map", "faq", "id", "toString", "value", "questionTitle", "type", "registerCompletionProviderForCurrentModel", "Promise", "resolve", "getValues", "item", "range", "TextEditorCompletionItem", "getLinkForFaq", "TextEditorCompletionItemKind", "Default", "run", "replaceTextAtCurrentSelection", "triggerCompletion", "focus", "dispose", "getOpeningIdentifier", "EnlargeSlideImageComponent", "data", "inject", "MAT_DIALOG_DATA", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleProp", "\u0275\u0275property", "slideToReference", "\u0275\u0275sanitizeUrl", "HtmlForPostingMarkdownPipe", "markdownService", "inject", "ArtemisMarkdownService", "transform", "markdown", "contentBeforeReference", "allowedHtmlTags", "undefined", "allowedHtmlAttributes", "safeHtmlForPostingMarkdown", "pure", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind4", "ctx_r0", "processedContentBeforeReference", "allowedHtmlTags", "allowedHtmlAttributes", "\u0275\u0275sanitizeHtml", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "tmp_1_0", "postingContentPart", "linkToReference", "tmp_2_0", "queryParams", "referenceIcon", "tmp_3_0", "referenceType", "\u0275\u0275textInterpolate1", "tmp_4_0", "referenceStr", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onClickUserReference", "referenceUserLogin", "faAt", "_r3", "onClickChannelReference", "channelId", "faHashtag", "_r4", "openAttachment", "attachmentToReference", "faFile", "_r6", "toggleImageNotFound", "slideToReference", "\u0275\u0275sanitizeUrl", "faBan", "_r5", "enlargeImage", "\u0275\u0275template", "PostingContentPartComponent_Conditional_6_Conditional_5_Template", "PostingContentPartComponent_Conditional_6_Conditional_7_Template", "\u0275\u0275conditional", "imageNotFound", "_r7", "imageToReference", "PostingContentPartComponent_Conditional_7_Conditional_3_Template", "PostingContentPartComponent_Conditional_7_Conditional_4_Template", "\u0275\u0275styleProp", "processedContentAfterReference", "PostingContentPartComponent", "fileService", "inject", "FileService", "dialog", "MatDialog", "accountService", "AccountService", "input", "userReferenceClicked", "output", "channelReferenceClicked", "hasClickedUserReference", "faQuestion", "ReferenceType", "ngOnInit", "processContent", "ngOnChanges", "attachmentUrl", "downloadFile", "contentBeforeReference", "escapeNumberedList", "escapeUnorderedList", "contentAfterReference", "content", "replace", "open", "EnlargeSlideImageComponent", "data", "maxWidth", "reference", "POST", "faMessage", "LECTURE", "faChalkboardUser", "PROGRAMMING", "faKeyboard", "MODELING", "faProjectDiagram", "QUIZ", "faCheckDouble", "TEXT", "faFont", "FILE_UPLOAD", "faFileUpload", "SLIDE", "FAQ", "faPaperclip", "userIdentity", "login", "emit", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "PostingContentPartComponent_Conditional_0_Template", "PostingContentPartComponent_Conditional_1_Template", "PostingContentPartComponent_Conditional_2_Template", "PostingContentPartComponent_Conditional_3_Template", "PostingContentPartComponent_Conditional_4_Template", "PostingContentPartComponent_Conditional_5_Template", "PostingContentPartComponent_Conditional_6_Template", "PostingContentPartComponent_Conditional_7_Template", "PostingContentPartComponent_Conditional_8_Template", "tmp_0_0", "USER", "CHANNEL", "tmp_5_0", "tmp_6_0", "tmp_7_0", "tmp_8_0", "RouterLink", "FaIconComponent", "HtmlForPostingMarkdownPipe", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275template", "LinkPreviewComponent_Conditional_0_Conditional_1_Template", "\u0275\u0275advance", "\u0275\u0275conditional", "ctx_r0", "hasError", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "removeLinkPreview", "linkPreview", "\u0275\u0275property", "faTimes", "\u0275\u0275pipeBind1", "image", "\u0275\u0275sanitizeUrl", "LinkPreviewComponent_Conditional_1_Conditional_1_Conditional_6_Template", "LinkPreviewComponent_Conditional_1_Conditional_1_Conditional_18_Template", "isAuthorOfOriginalPost", "\u0275\u0275textInterpolate", "title", "description", "multiple", "LinkPreviewComponent_Conditional_1_Conditional_1_Template", "shouldPreviewBeShown", "LinkPreviewComponent", "metisService", "inject", "MetisService", "posting", "showLoadingsProgress", "loaded", "isReply", "ngOnInit", "metisUserIsAuthorOfPosting", "urlToSearchFor", "url", "match", "modifiedContent", "content", "urlRegex", "exec", "start", "index", "end", "length", "includes", "substring", "updateAnswerPost", "subscribe", "next", "updatePost", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "LinkPreviewComponent_Conditional_0_Template", "LinkPreviewComponent_Conditional_1_Template", "ConfirmIconComponent", "NgClass", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "preview_r1", "ctx_r1", "showLoadingsProgress", "hasError", "loaded", "posting", "isReply", "multiple", "LinkPreviewContainerComponent", "linkPreviewService", "inject", "LinkPreviewService", "linkifyService", "LinkifyService", "data", "input", "author", "isEdited", "linkPreviews", "signal", "ngOnInit", "findPreviews", "ngOnChanges", "reloadLinkPreviews", "set", "find", "filter", "link", "isLinkPreviewRemoved", "slice", "forEach", "fetchLink", "href", "subscribe", "next", "linkPreview", "shouldPreviewBeShown", "url", "title", "description", "image", "existingLinkPreviewIndex", "findIndex", "preview", "update", "previews", "existingLinkPreview", "Object", "assign", "length", "trackLinks", "index", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "LinkPreviewContainerComponent_For_1_Template", "\u0275\u0275repeater", "LinkPreviewComponent", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onUndoDeleteEvent", "emit", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "deleteTimerInSeconds", "$event", "_r4", "userReferenceClicked", "channelReferenceClicked", "postingContentPart_r5", "\u0275\u0275repeaterCreate", "PostingContentComponent_Conditional_1_Conditional_2_Conditional_10_For_4_Template", "\u0275\u0275componentInstance", "contentPartTrack", "\u0275\u0275template", "PostingContentComponent_Conditional_1_Conditional_2_Conditional_10_Conditional_5_Template", "\u0275\u0275repeater", "postingContentParts", "\u0275\u0275conditional", "isEdited", "_r3", "showContent", "PostingContentComponent_Conditional_1_Conditional_2_Conditional_10_Template", "faAngleUp", "faAngleDown", "\u0275\u0275pureFunction0", "_c1", "\u0275\u0275propertyInterpolate", "_r6", "postingContentPart_r7", "PostingContentComponent_Conditional_1_Conditional_3_For_4_Template", "PostingContentComponent_Conditional_1_Conditional_3_Conditional_5_Template", "content", "author", "posting", "isReply", "PostingContentComponent_Conditional_1_Conditional_2_Template", "PostingContentComponent_Conditional_1_Conditional_3_Template", "previewMode", "PostingContentComponent", "metisService", "inject", "MetisService", "input", "output", "isDeleted", "isSubscribeToMetis", "currentlyLoadedPosts", "signal", "postsSubscription", "ATTACHMENT_DIR", "ngOnInit", "computeContentPartsOfPosts", "patternMatches", "getPatternMatches", "computePostingContentParts", "ngOnChanges", "posts", "subscribe", "ngOnDestroy", "unsubscribe", "set", "length", "forEach", "patternMatch", "index", "undefined", "referencedId", "substring", "startIndex", "endIndex", "referenceType", "referenceStr", "linkToReference", "attachmentToReference", "slideToReference", "queryParams", "imageToReference", "ReferenceType", "POST", "referencedPostInLoadedPosts", "find", "post", "id", "isCommunicationEnabled", "getCourse", "getLinkForPost", "getQueryParamsForPost", "searchText", "LECTURE", "PROGRAMMING", "MODELING", "QUIZ", "TEXT", "FILE_UPLOAD", "indexOf", "FAQ", "faqId", "ATTACHMENT", "ATTACHMENT_UNITS", "SLIDE", "USER", "referenceUserLogin", "CHANNEL", "channelId", "parseInt", "isNaN", "IMAGE", "endIndexOfContentAfterReference", "contentPart", "contentBeforeReference", "contentAfterReference", "contentLink", "pattern", "match", "exec", "group", "groupsKey", "groups", "push", "lastIndex", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "PostingContentComponent_Conditional_0_Template", "PostingContentComponent_Conditional_1_Template", "TranslateDirective", "FaIconComponent", "NgStyle", "PostingContentPartComponent", "LinkPreviewContainerComponent", "styles", "changeDetection", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "content", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275pureFunction1", "_c1", "length", "maxContentLength", "\u0275\u0275textInterpolate2", "tmp_2_0", "undefined", "PostingMarkdownEditorComponent", "cdref", "inject", "ChangeDetectorRef", "metisService", "MetisService", "fileService", "FileService", "courseManagementService", "CourseManagementService", "lectureService", "LectureService", "channelService", "ChannelService", "viewContainerRef", "ViewContainerRef", "positionBuilder", "OverlayPositionBuilder", "markdownEditor", "editorHeight", "MarkdownEditorHeight", "INLINE", "isInputLengthDisplayed", "suppressNewlineOnEnter", "isButtonLoading", "input", "isFormGroupValid", "editType", "EditType", "PostingEditType", "CREATE", "activeConversation", "valueChange", "EventEmitter", "lectureAttachmentReferenceAction", "defaultActions", "previewMode", "fallbackConversationId", "computed", "id", "overlay", "Overlay", "ngOnInit", "messagingOnlyActions", "isCommunicationEnabled", "getCourse", "UserMentionAction", "ChannelReferenceAction", "faqAction", "isFaqEnabled", "FaqReferenceAction", "BoldAction", "ItalicAction", "UnderlineAction", "StrikethroughAction", "EmojiAction", "BulletedListAction", "OrderedListAction", "QuoteAction", "CodeAction", "CodeBlockAction", "UrlAction", "AttachmentAction", "ExerciseReferenceAction", "LectureAttachmentReferenceAction", "ngAfterViewInit", "enableTextFieldMode", "editor", "monacoEditor", "onDidChangeModelContent", "event", "position", "getPosition", "model", "getModel", "lineContent", "getLineContent", "lineNumber", "trimStart", "hasPrefix", "startsWith", "test", "changes", "text", "handleKeyDown", "handleActionClick", "MouseEvent", "find", "action", "ngAfterContentChecked", "detectChanges", "onChange", "_val", "valueChanged", "emit", "writeValue", "value", "registerOnChange", "fn", "registerOnTouched", "updateField", "newValue", "onKeyDown", "key", "shiftKey", "preventDefault", "selectors", "viewQuery", "rf", "ctx", "MarkdownEditorMonacoComponent", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "multi", "decls", "vars", "consts", "template", "\u0275\u0275listener", "$event", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "PostingMarkdownEditorComponent_Conditional_6_Template", "PostingMarkdownEditorComponent_Conditional_13_Template", "\u0275\u0275pureFunction0", "_c0", "MEDIUM", "\u0275\u0275conditional", "tmp_21_0", "PostingContentComponent", "NgStyle", "encapsulation", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "tag_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onItemRemove", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275property", "faTimes", "tag_r5", "PostTagSelectorComponent", "metisService", "inject", "MetisService", "changeDetector", "ChangeDetectorRef", "postTags", "postTagsChange", "EventEmitter", "tagInput", "existingPostTags", "tags", "separatorKeysCodes", "ENTER", "COMMA", "TAB", "tagCtrl", "FormControl", "undefined", "tagsSubscription", "ngOnInit", "subscribe", "valueChanges", "pipe", "startWith", "map", "category", "_filter", "slice", "value", "filterValue", "toLowerCase", "filter", "tag", "includes", "ngOnChanges", "ngAfterContentChecked", "detectChanges", "onItemAdd", "event", "tagString", "trim", "length", "push", "emit", "chipInput", "clear", "setValue", "onItemSelect", "option", "viewValue", "nativeElement", "tagToRemove", "ngOnDestroy", "unsubscribe", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275repeaterCreate", "PostTagSelectorComponent_For_6_Template", "\u0275\u0275repeaterTrackByIdentity", "$event", "i0", "_r1", "PostTagSelectorComponent_For_16_Template", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "auto_r7", "chipList_r6", "MatFormField", "MatChipGrid", "MatChipRow", "MatChipRemove", "FaIconComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "MatAutocompleteTrigger", "MatChipInput", "ReactiveFormsModule", "FormControlDirective", "MatAutocomplete", "MatOption", "AsyncPipe", "ArtemisTranslatePipe", "styles", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r4", "ctx_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "tags", "\u0275\u0275resetView", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "isLoading", "formGroup", "valid", "\u0275\u0275pipeBind1", "\u0275\u0275listener", "_r1", "confirm", "d_r3", "dismiss", "\u0275\u0275template", "PostCreateEditModalComponent_ng_template_0_Conditional_15_Template", "PostCreateEditModalComponent_ng_template_0_Conditional_32_Template", "PostCreateEditModalComponent_ng_template_0_Conditional_49_Template", "\u0275\u0275textInterpolate", "modalTitle", "\u0275\u0275conditional", "editType", "EditType", "CREATE", "isCommunicationPage", "tmp_5_0", "getAsChannel", "posting", "conversation", "isAnnouncementChannel", "pageType", "PageType", "PLAGIARISM_CASE_INSTRUCTOR", "PLAGIARISM_CASE_STUDENT", "editorHeight", "maxContentLength", "UPDATE", "TITLE_MAX_LENGTH", "PostCreateEditModalComponent", "PostingCreateEditModalDirective", "input", "exercises", "lectures", "course", "isAtLeastTutorInCourse", "isAtLeastInstructorInCourse", "currentContextSelectorOption", "similarPosts", "PostingEditType", "getAsChannelDTO", "faAngleUp", "faAngleDown", "ngOnInit", "resetCurrentContextSelectorOption", "metisService", "getCourse", "metisUserIsAtLeastTutorInCourse", "metisUserIsAtLeastInstructorInCourse", "ngOnChanges", "open", "modalRef", "modalService", "postingEditor", "size", "backdrop", "beforeDismiss", "resetFormGroup", "getPageType", "title", "formBuilder", "group", "postValidator", "controls", "valueChanges", "subscribe", "context", "createPosting", "setPostProperties", "createPost", "next", "post", "close", "onCreate", "emit", "error", "updatePosting", "updatePost", "updateModalTitle", "get", "value", "content", "__spreadValues", "Validators", "required", "maxLength", "PostTitleValidationPattern", "PostContentValidationPattern", "__ngFactoryType__", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "PostCreateEditModalComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TranslateDirective", "HelpIconComponent", "PostTagSelectorComponent", "PostingMarkdownEditorComponent", "PostingButtonComponent", "ArtemisTranslatePipe", "styles", "PostingDirective", "posting", "isCommunicationPage", "showChannelReference", "hasChannelModerationRights", "isThreadSidebar", "showDropdown", "dropdownPosition", "x", "y", "showReactionSelector", "clickPosition", "isAnswerPost", "isDeleted", "timeToDeleteInSeconds", "deleteTimerInSeconds", "deleteTimer", "deleteInterval", "content", "oneToOneChatService", "inject", "OneToOneChatService", "metisConversationService", "MetisConversationService", "metisService", "MetisService", "changeDetector", "ChangeDetectorRef", "router", "Router", "farBookmark", "faBookmark", "ngOnInit", "ngOnDestroy", "undefined", "clearTimeout", "deletePostingWithoutTimeout", "clearInterval", "onDeleteEvent", "isDelete", "setTimeout", "setInterval", "Math", "max", "detectChanges", "editPosting", "reactionsBar", "togglePin", "deletePost", "deletePosting", "forwardMessage", "checkIfPinned", "selectReaction", "event", "addReaction", "preventDefault", "clientX", "clientY", "toggleEmojiSelect", "toggleSavePost", "isSaved", "removeSavedPost", "savePost", "deleteAnswerPost", "onUserReferenceClicked", "referencedUserLogin", "course", "isMessagingEnabled", "createOneToOneChat", "subscribe", "create", "id", "res", "navigate", "queryParams", "conversationId", "body", "onUserNameClicked", "author", "referencedUserId", "createOneToOneChatWithId", "createWithId", "inputs", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "confirm", "\u0275\u0275elementEnd", "close", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "formGroup", "editorHeight", "maxContentLength", "isLoading", "valid", "editType", "\u0275\u0275pipeBind1", "AnswerPostCreateEditModalComponent", "PostingCreateEditModalDirective", "createEditAnswerPostContainerRef", "input", "postingUpdated", "output", "isInputOpen", "open", "createEmbeddedView", "postingEditor", "clear", "resetFormGroup", "posting", "content", "formBuilder", "group", "Validators", "required", "maxLength", "PostContentValidationPattern", "createPosting", "get", "value", "metisService", "createAnswerPost", "subscribe", "next", "answerPost", "onCreate", "emit", "error", "updatePosting", "updateAnswerPost", "updatedPost", "updateModalTitle", "EditType", "UPDATE", "modalTitle", "CREATE", "__ngFactoryType__", "selectors", "inputs", "outputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "AnswerPostCreateEditModalComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "FormsModule", "\u0275NgNoValidate", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PostingMarkdownEditorComponent", "PostingButtonComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "utils", "EMOJI_SHEET_URL", "emoji", "singleDarkModeEmojiUrlFn", "EmojiComponent", "themeService", "inject", "ThemeService", "EmojiUtils", "input", "dark", "computed", "currentTheme", "Theme", "DARK", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "EmojiComponent_Conditional_1_Template", "EmojiComponent_Conditional_2_Template", "\u0275\u0275conditional", "EmojiModule", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "userNameClicked", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "isDeleted", "authorOfPosting", "id", "name", "imageUrl", "currentUser", "undefined", "\u0275\u0275pureFunction1", "_c0", "isAuthorOfPosting", "tmp_6_0", "posting", "authorRole", "\u0275\u0275textInterpolate", "userAuthority", "userAuthorityIcon", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "userAuthorityTooltip", "userRoleBadge", "tmp_1_0", "todayFlag", "faCheckSquare", "PostingHeaderComponent", "lastReadDate", "input", "readOnlyMode", "previewMode", "hasChannelModerationRights", "isCommunicationPage", "isModalOpen", "output", "onUserNameClicked", "isAtLeastInstructorInCourse", "isAtLeastTutorInCourse", "postingIsOfToday", "faPencilAlt", "metisService", "inject", "MetisService", "accountService", "AccountService", "isPostResolved", "computed", "isPost", "resolved", "isPostPinned", "displayPriority", "DisplayPriority", "PINNED", "ngOnInit", "getAuthenticationState", "pipe", "tap", "user", "setUserProperties", "subscribe", "dayjs", "isSame", "creationDate", "getTodayFlag", "ngOnChanges", "setUserAuthorityIconAndTooltip", "isAfter", "author", "metisUserIsAuthorOfPosting", "toolTipTranslationPath", "roleBadgeTranslationPath", "faUser", "UserRole", "USER", "INSTRUCTOR", "faUserGraduate", "TUTOR", "faUserCheck", "emit", "CachingStrategy", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "PostingHeaderComponent_Conditional_4_Template", "PostingHeaderComponent_Conditional_10_Template", "PostingHeaderComponent_Conditional_19_Template", "PostingHeaderComponent_Conditional_20_Template", "PostingHeaderComponent_Conditional_21_Template", "\u0275\u0275conditional", "\u0275\u0275pipeBind2", "\u0275\u0275textInterpolate1", "ProfilePictureComponent", "NgClass", "FaIconComponent", "NgbTooltip", "TranslateDirective", "ArtemisDatePipe", "ArtemisTranslatePipe", "EmojiComponent", "styles", "Reaction", "id", "user", "creationDate", "emojiId", "post", "answerPost", "USER_COUNT_LIMIT", "PLACEHOLDER_USER_REACTED", "ReactingUsersOnPostingPipe", "translateService", "inject", "TranslateService", "transform", "reactingUsers", "Observable", "observer", "next", "updateReactingUsersString", "onLangChange", "subscribe", "includes", "length", "instant", "filter", "user", "concat", "numberOfReactingUsers", "slice", "join", "number", "listOfReactingUsers", "lastCommaIndex", "lastIndexOf", "beforeLastComma", "substring", "afterLastComma", "pure", "\u0275\u0275text", "\u0275\u0275elementContainerStart", "\u0275\u0275elementStart", "\u0275\u0275listener", "channel_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "removeSelectedChannel", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "name", "user_r6", "_r5", "removeSelectedUser", "\u0275\u0275element", "\u0275\u0275property", "tmp_13_0", "postToForward", "author", "id", "tmp_14_0", "option_r8", "img", "_r7", "selectOption", "\u0275\u0275template", "ForwardMessageDialogComponent_Conditional_22_For_4_Conditional_3_Template", "ForwardMessageDialogComponent_Conditional_22_For_4_Conditional_4_Template", "\u0275\u0275pureFunction2", "_c3", "type", "\u0275\u0275conditional", "\u0275\u0275repeaterCreate", "ForwardMessageDialogComponent_Conditional_22_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "filteredOptions", "_r9", "toggleShowFullForwardedMessage", "showFullForwardedMessage", "\u0275\u0275pipeBind1", "ForwardMessageDialogComponent_Conditional_28_Conditional_21_Template", "tmp_3_0", "tmp_4_0", "tmp_5_0", "imageUrl", "\u0275\u0275textInterpolate", "tmp_6_0", "\u0275\u0275pureFunction1", "_c4", "tmp_9_0", "content", "tmp_10_0", "tmp_11_0", "updatedDate", "isContentLong", "ForwardMessageDialogComponent", "channels", "signal", "users", "undefined", "courseId", "editorHeight", "input", "MarkdownEditorHeight", "INLINE", "filteredChannels", "filteredUsers", "selectedChannels", "selectedUsers", "combinedOptions", "defaultActions", "searchTerm", "newPost", "Post", "isInputFocused", "showDropdown", "activeModal", "inject", "NgbActiveModal", "searchInput", "viewChild", "messageContent", "courseManagementService", "CourseManagementService", "cdr", "ChangeDetectorRef", "renderer", "Renderer2", "ngOnInit", "BoldAction", "ItalicAction", "UnderlineAction", "QuoteAction", "CodeAction", "CodeBlockAction", "UrlAction", "filter", "channel", "map", "user", "filterOptions", "focusInput", "ngAfterViewInit", "setTimeout", "checkIfContentOverflows", "nativeElement", "scrollHeight", "clientHeight", "detectChanges", "updateField", "filterItems", "event", "target", "value", "lowerCaseSearchTerm", "toLowerCase", "length", "searchUsers", "pipe", "response", "body", "find", "selectedUser", "catchError", "of", "subscribe", "updateCombinedOptions", "includes", "option", "c", "push", "index", "findIndex", "splice", "u", "send", "selectedItems", "close", "hasSelections", "onInputFocus", "onInputBlur", "selectRootElement", "focus", "onClickOutside", "contains", "selectors", "viewQuery", "rf", "ctx", "$event", "\u0275\u0275resolveDocument", "MetisService", "LinkPreviewService", "LinkifyService", "decls", "vars", "consts", "template", "i0", "_r1", "dismiss", "ForwardMessageDialogComponent_For_14_Template", "ForwardMessageDialogComponent_For_16_Template", "\u0275\u0275twoWayListener", "\u0275\u0275twoWayBindingSet", "ForwardMessageDialogComponent_Conditional_22_Template", "ForwardMessageDialogComponent_Conditional_28_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275twoWayProperty", "\u0275\u0275pureFunction0", "_c2", "MEDIUM", "ArtemisTranslatePipe", "ProfilePictureComponent", "NgClass", "PostingContentComponent", "MarkdownEditorMonacoComponent", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "TranslateDirective", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "isCommunicationPage", "openThread", "emit", "openAnswerView", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "faArrowRight", "_r4", "closeAnswerView", "\u0275\u0275classProp", "showAnswers", "closeCrossId", "_r5", "\u0275\u0275textInterpolate", "tmp_5_0", "sortedAnswerPosts", "length", "\u0275\u0275pipeBind1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275template", "PostingReactionsBarComponent_Conditional_2_Conditional_2_Conditional_1_Template", "PostingReactionsBarComponent_Conditional_2_Conditional_2_Conditional_2_Template", "\u0275\u0275conditional", "_r6", "tmp_4_0", "PostingReactionsBarComponent_Conditional_2_Conditional_1_Template", "PostingReactionsBarComponent_Conditional_2_Conditional_2_Template", "PostingReactionsBarComponent_Conditional_2_Conditional_3_Template", "hoverBar", "tmp_2_0", "tmp_3_0", "isThreadSidebar", "_r7", "reactionMetaData_r8", "$implicit", "updateReaction", "key", "value", "hasReacted", "isReadOnlyMode", "reactingUsers", "\u0275\u0275textInterpolate1", "count", "PostingReactionsBarComponent_For_4_Conditional_1_Template", "isEmojiCount", "$event", "_r10", "selectReaction", "emojisToShowFilter", "categoriesIcons", "selectedCourseEmojis", "\u0275\u0275elementContainerStart", "_r9", "showReactionSelector", "PostingReactionsBarComponent_Conditional_9_ng_template_10_Template", "toggleEmojiSelect", "getPostingType", "faSmile", "trigger_r11", "_r12", "editPosting", "faPencilAlt", "_r13", "deletePosting", "faCheck", "isAtLeastTutorInCourse", "isAuthorOfOriginalPost", "PostingReactionsBarComponent_Conditional_16_Conditional_1_Conditional_4_Conditional_1_Template", "_r14", "toggleResolvesPost", "PostingReactionsBarComponent_Conditional_16_Conditional_1_Conditional_3_Template", "PostingReactionsBarComponent_Conditional_16_Conditional_1_Conditional_4_Template", "getResolvesPost", "PostingReactionsBarComponent_Conditional_16_Conditional_1_Template", "isAnswerOfAnnouncement", "_r15", "canPin", "togglePin", "displayPriority", "DisplayPriority", "PINNED", "pinEmojiId", "pinTooltip", "_r16", "bookmarkPosting", "forwardMessage", "getSaved", "faBookmark", "faShare", "PIN_EMOJI_ID", "ARCHIVE_EMOJI_ID", "HEAVY_MULTIPLICATION_ID", "SPEECH_BALLOON_UNICODE", "ARCHIVE_EMOJI_UNICODE", "PIN_EMOJI_UNICODE", "HEAVY_MULTIPLICATION_UNICODE", "PostingReactionsBarComponent", "onBookmarkClicked", "output", "faTrash", "faTrashAlt", "archiveEmojiId", "isAuthorOfPosting", "isAtLeastInstructorInCourse", "mayEdit", "mayDelete", "channels", "users", "posting", "input", "openPostingCreateEditModal", "closePostingCreateEditModal", "reactionsUpdated", "isModalOpen", "mayDeleteOutput", "mayEditOutput", "canPinOutput", "lastReadDate", "previewMode", "showAnswersChange", "isLastAnswer", "postingUpdated", "originalPostDetails", "course", "isDeleteEvent", "createEditModal", "viewChild", "required", "metisService", "inject", "MetisService", "accountService", "AccountService", "conversationService", "ConversationService", "modalService", "NgbModal", "metisConversationService", "MetisConversationService", "ngOnInit", "updatePostingWithReactions", "metisUserIsAuthorOfPosting", "metisUserIsAtLeastTutorInCourse", "metisUserIsAtLeastInstructorInCourse", "getAsChannelDTO", "post", "conversation", "isAnnouncementChannel", "currentConversation", "getCurrentConversation", "setCanPin", "resetTooltipsAndPriority", "setMayDelete", "setMayEdit", "ngOnChanges", "recent", "isChannelDTO", "hasChannelModerationRights", "isGroupChatDTO", "creator", "id", "userIdentity", "isOneToOneChatDTO", "getPinTooltip", "getShowNewMessageIcon", "showIcon", "forEach", "answerPost", "isAuthor", "creationDate", "lastReadDateDayJs", "dayjs", "isAfter", "emoji", "unified", "reactionMetaDataMap", "buildReaction", "emojiId", "reaction", "Reaction", "reactionEvent", "undefined", "addOrRemoveReaction", "existingReactionIdx", "reactions", "findIndex", "user", "getUser", "reactionToDelete", "deleteReaction", "subscribe", "filter", "reactionToCreate", "createReaction", "filteredReactions", "buildReactionMetaDataMap", "reduce", "metaDataMap", "reactingUser", "PLACEHOLDER_USER_REACTED", "name", "reactionMetaData", "concat", "__spreadProps", "__spreadValues", "isAnyReactionCountAboveZero", "Object", "values", "some", "NONE", "updatePostDisplayPriority", "resolvesPost", "updateAnswerPost", "checkIfPinned", "title", "open", "isAnswer", "content", "openForwardMessageView", "getConversationsOfUser", "pipe", "map", "response", "body", "next", "conversations", "type", "ConversationType", "CHANNEL", "push", "modalRef", "ForwardMessageDialogComponent", "size", "backdrop", "componentInstance", "set", "postToForward", "courseId", "result", "then", "selection", "__async", "allSelections", "userLogins", "login", "newConversation", "createDirectConversation", "toPromise", "createGroupConversation", "forwardPost", "messageContent", "createForwardedMessages", "getConversation", "channel", "isCourseWide", "canDeleteAnnouncement", "mayDeleteOtherUsers", "isSaved", "selectors", "viewQuery", "rf", "ctx", "PostingReactionsBarComponent_Conditional_2_Template", "\u0275\u0275repeaterCreate", "PostingReactionsBarComponent_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "PostingReactionsBarComponent_Conditional_9_Template", "PostingReactionsBarComponent_Conditional_10_Template", "i0", "_r1", "PostingReactionsBarComponent_Conditional_15_Template", "PostingReactionsBarComponent_Conditional_16_Template", "PostingReactionsBarComponent_Conditional_17_Template", "PostingReactionsBarComponent_Conditional_18_Template", "PostingReactionsBarComponent_Conditional_21_Template", "\u0275\u0275styleProp", "\u0275\u0275repeater", "NgbTooltip", "EmojiComponent", "CdkOverlayOrigin", "FaIconComponent", "TranslateDirective", "CdkConnectedOverlay", "EmojiPickerComponent", "ConfirmIconComponent", "AsyncPipe", "KeyValuePipe", "ArtemisTranslatePipe", "ReactingUsersOnPostingPipe", "NgClass", "PostCreateEditModalComponent", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c3", "ctx_r1", "isConsecutive", "posting", "isSaved", "faBookmark", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind2", "creationDate", "\u0275\u0275textInterpolate1", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onUserNameClicked", "isReadOnlyMode", "isCommunicationPage", "lastReadDate", "isDeleted", "$event", "_r4", "onRightClick", "onDeleteEvent", "onUserReferenceClicked", "channelReferenceClicked", "emit", "createAnswerPostModal_r5", "\u0275\u0275reference", "open", "onReactionsUpdated", "onMayDelete", "onMayEdit", "toggleSavePost", "\u0275\u0275classProp", "showDropdown", "content", "updatedDate", "author", "deleteTimerInSeconds", "course", "isLastAnswer", "isThreadSidebar", "_r6", "undefined", "_r8", "editPosting", "faPencilAlt", "_r9", "deletePost", "faTrash", "_r7", "addReaction", "\u0275\u0275template", "AnswerPostComponent_Conditional_18_Conditional_10_Template", "AnswerPostComponent_Conditional_18_Conditional_11_Template", "forwardMessage", "\u0275\u0275pureFunction2", "_c2", "dropdownPosition", "y", "x", "faSmile", "\u0275\u0275conditional", "mayEdit", "mayDelete", "farBookmark", "faShare", "_r10", "selectReaction", "AnswerPostComponent", "PostingDirective", "changeDetector", "inject", "ChangeDetectorRef", "renderer", "Renderer2", "document", "DOCUMENT", "input", "openPostingCreateEditModal", "output", "userReferenceClicked", "containerRef", "viewChild", "required", "read", "ViewContainerRef", "reactionsBarComponent", "PostingReactionsBarComponent", "isAnswerPost", "activeDropdownPost", "constructor", "metisService", "getCourse", "ngOnInit", "assignPostingToAnswerPost", "ngOnChanges", "reactionsBar", "onPostingUpdated", "updatedPosting", "updatedReactions", "__spreadProps", "__spreadValues", "reactions", "onClickOutside", "enableBodyScroll", "disableBodyScroll", "mainContainer", "querySelector", "setStyle", "value", "event", "targetElement", "target", "isPointerCursor", "window", "getComputedStyle", "cursor", "error", "captureException", "preventDefault", "cleanupActiveDropdown", "clientX", "clientY", "adjustDropdownPosition", "screenWidth", "innerWidth", "dropdownWidth", "detectChanges", "ngOnDestroy", "AnswerPost", "Object", "assign", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275resolveDocument", "AnswerPostComponent_Conditional_2_Template", "AnswerPostComponent_Conditional_3_Template", "AnswerPostComponent_Conditional_4_Template", "AnswerPostComponent_Conditional_5_Template", "\u0275\u0275elementContainer", "AnswerPostComponent_Conditional_12_Template", "i0", "_r1", "AnswerPostComponent_Conditional_18_Template", "AnswerPostComponent_ng_template_22_Template", "toggleEmojiSelect", "id", "\u0275\u0275pureFunction3", "_c1", "isInputOpen", "clickPosition", "emojiPickerTrigger_r11", "showReactionSelector", "NgClass", "FaIconComponent", "TranslateDirective", "NgbTooltip", "PostingHeaderComponent", "PostingContentComponent", "AnswerPostCreateEditModalComponent", "NgStyle", "CdkOverlayOrigin", "CdkConnectedOverlay", "EmojiPickerComponent", "ArtemisDatePipe", "styles", "data", "animation", "trigger", "transition", "style", "opacity", "animate", "changeDetection", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "createAnswerPostModal_r3", "\u0275\u0275reference", "\u0275\u0275resetView", "open", "$event", "ctx_r3", "userReferenceClicked", "emit", "channelReferenceClicked", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "lastReadDate", "readOnlyMode", "answerPost_r5", "isConsecutive", "isLastPost", "group_r6", "isCommunicationPage", "isThreadSidebar", "hasChannelModerationRights", "\u0275\u0275repeaterCreate", "PostingFooterComponent_Conditional_0_For_17_For_2_Template", "\u0275\u0275componentInstance", "trackPostByFn", "\u0275\u0275repeater", "posts", "\u0275\u0275element", "\u0275\u0275elementContainerStart", "PostingFooterComponent_Conditional_0_For_17_Template", "trackGroupByFn", "\u0275\u0275textInterpolate1", "sortedAnswerPosts", "length", "\u0275\u0275pipeBind1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c2", "groupedAnswerPosts", "PostingFooterComponent", "input", "previewMode", "modalRef", "showAnswers", "posting", "openThread", "output", "answerPostCreateEditModal", "containerRef", "createAnswerPostModalComponent", "createdAnswerPost", "isAtLeastTutorInCourse", "courseId", "metisService", "inject", "MetisService", "changeDetector", "ChangeDetectorRef", "ngOnInit", "getCourse", "id", "metisUserIsAtLeastTutorInCourse", "createEmptyAnswerPost", "groupAnswerPosts", "ngOnChanges", "changes", "detectChanges", "ngOnDestroy", "createEditAnswerPostContainerRef", "clear", "ngAfterContentChecked", "answerPost", "AnswerPost", "content", "post", "resolvesPost", "sortedPosts", "slice", "reverse", "sort", "a", "b", "creationDate", "valueOf", "groups", "currentGroup", "author", "__spreadProps", "__spreadValues", "i", "currentPost", "lastPostInGroup", "timeDiff", "Number", "MAX_SAFE_INTEGER", "diff", "push", "_", "group", "openCreateAnswerPostModal", "closeCreateAnswerPostModal", "close", "postsTrackByFn", "_index", "selectors", "viewQuery", "rf", "ctx", "AnswerPostCreateEditModalComponent", "ViewContainerRef", "\u0275\u0275template", "PostingFooterComponent_Conditional_0_Template", "\u0275\u0275elementContainer", "i0", "_r1", "\u0275\u0275conditional", "AnswerPostComponent", "ArtemisTranslatePipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "closeAlert", "\u0275\u0275elementEnd", "\u0275\u0275element", "_r3", "isModalOpen", "emit", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "isLoading", "formGroup", "valid", "MessageInlineInputComponent", "PostingCreateEditDirective", "localStorageService", "inject", "LocalStorageService", "warningDismissed", "ngOnInit", "retrieve", "resetFormGroup", "formBuilder", "group", "content", "posting", "Validators", "required", "maxLength", "maxContentLength", "PostContentValidationPattern", "createPosting", "get", "value", "metisService", "createPost", "subscribe", "next", "post", "onCreate", "error", "updatePosting", "updatePost", "store", "__ngFactoryType__", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "confirm", "\u0275\u0275template", "MessageInlineInputComponent_Conditional_8_Template", "MessageInlineInputComponent_Conditional_9_Template", "editorHeight", "editType", "\u0275\u0275conditional", "EditType", "UPDATE", "FormsModule", "\u0275NgNoValidate", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PostingMarkdownEditorComponent", "TranslateDirective", "PostingButtonComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onTriggerNavigateToPost", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "tmp_2_0", "todayFlag", "undefined", "_r3", "toggleShowFullForwardedMessage", "\u0275\u0275textInterpolate1", "showFullForwardedMessage", "\u0275\u0275pipeBind1", "ForwardedMessageComponent", "faShare", "onNavigateToPost", "output", "sourceName", "originalPostDetails", "input", "messageContent", "viewChild", "isContentLong", "postingIsOfToday", "viewButtonVisible", "cdr", "inject", "ChangeDetectorRef", "conversation", "isAnswerPost", "constructor", "effect", "post", "updateSourceName", "isChannel", "dayjs", "isSame", "creationDate", "getTodayFlag", "ngAfterViewInit", "setTimeout", "checkIfContentOverflows", "nativeElement", "scrollHeight", "clientHeight", "detectChanges", "type", "valueOf", "emit", "name", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "ForwardedMessageComponent_Conditional_11_Template", "ForwardedMessageComponent_Conditional_25_Template", "ForwardedMessageComponent_Conditional_40_Template", "\u0275\u0275textInterpolate2", "\u0275\u0275conditional", "tmp_4_0", "author", "id", "tmp_5_0", "tmp_6_0", "imageUrl", "\u0275\u0275textInterpolate", "tmp_7_0", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind2", "tmp_9_0", "tmp_11_0", "\u0275\u0275pureFunction1", "_c1", "content", "updatedDate", "ProfilePictureComponent", "TranslateDirective", "NgClass", "FaIconComponent", "NgbTooltip", "PostingContentComponent", "ArtemisTranslatePipe", "ArtemisDatePipe", "styles", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c2", "ctx_r1", "isConsecutive", "posting", "isSaved", "faBookmark", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind2", "creationDate", "\u0275\u0275textInterpolate1", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "displayInlineInput", "onUserNameClicked", "previewMode", "readOnlyMode", "isDeleted", "isCommunicationPage", "lastReadDate", "faBullhorn", "\u0275\u0275pipeBind1", "$event", "_r4", "onNavigateToContext", "contextInformation", "routerLinkComponents", "queryParams", "\u0275\u0275textInterpolate", "displayName", "\u0275\u0275template", "PostComponent_Conditional_12_Conditional_3_Template", "PostComponent_Conditional_12_Conditional_4_Template", "\u0275\u0275conditional", "title", "PostComponent_Conditional_13_Conditional_3_Template", "length", "_r6", "onTriggerNavigateToPost", "originalPostDetails", "\u0275\u0275twoWayListener", "_r7", "i0", "\u0275\u0275twoWayBindingSet", "showAnswers", "openCreateAnswerPostModal", "openThread", "emit", "onMayEdit", "onMayDelete", "onCanPin", "onDeleteEvent", "toggleSavePost", "course", "\u0275\u0275twoWayProperty", "sortedAnswerPosts", "isThreadSidebar", "_r5", "onRightClick", "onUserReferenceClicked", "onChannelReferenceClicked", "PostComponent_Conditional_15_Conditional_7_Template", "PostComponent_Conditional_15_Conditional_10_Template", "\u0275\u0275classProp", "showDropdown", "_c4", "content", "author", "updatedDate", "deleteTimerInSeconds", "_c5", "_r8", "_r9", "closeCreateAnswerPostModal", "PostComponent_Conditional_19_Conditional_4_Template", "\u0275\u0275pureFunction2", "_c6", "_r11", "togglePin", "faThumbtack", "checkIfPinned", "DisplayPriority", "PINNED", "_r12", "editPosting", "faPencilAlt", "_r13", "deletePost", "faTrash", "_r10", "addReaction", "PostComponent_Conditional_25_Conditional_10_Template", "PostComponent_Conditional_25_Conditional_11_Template", "PostComponent_Conditional_25_Conditional_12_Template", "tmp_4_0", "reactionsBarComponent", "openAnswerView", "forwardMessage", "_c3", "dropdownPosition", "y", "x", "faSmile", "canPin", "mayEdit", "mayDelete", "faComments", "farBookmark", "faShare", "_r14", "selectReaction", "PostComponent_ng_template_29_Conditional_1_Template", "PostComponent", "PostingDirective", "metisService", "inject", "MetisService", "changeDetector", "ChangeDetectorRef", "renderer", "Renderer2", "document", "DOCUMENT", "input", "undefined", "modalRef", "model", "output", "postFooterComponent", "viewChild", "required", "PostingReactionsBarComponent", "activeDropdownPost", "showReactionSelector", "routerLink", "showAnnouncementIcon", "createdAnswerPost", "isAtLeastTutorInCourse", "pageType", "PageType", "onNavigateToPost", "forwardedPosts", "forwardedAnswerPosts", "constructor", "getCourse", "throwError", "reactionsBar", "isPinned", "displayPriority", "value", "event", "targetElement", "target", "window", "getComputedStyle", "cursor", "preventDefault", "enableBodyScroll", "detectChanges", "clientX", "clientY", "adjustDropdownPosition", "disableBodyScroll", "screenWidth", "innerWidth", "dropdownWidth", "mainContainer", "querySelector", "setStyle", "onClickOutside", "ngOnInit", "getPageType", "getContextInformation", "metisUserIsAtLeastTutorInCourse", "sortAnswerPosts", "assignPostingToPost", "fetchForwardedMessages", "forwardedMessage", "id", "markForCheck", "error", "Error", "toString", "ngOnChanges", "getLinkForPost", "getQueryParamsForPost", "getAsChannelDTO", "conversation", "isAnnouncementChannel", "showChannelReference", "ngAfterContentChecked", "metaKey", "dismiss", "metisConversationService", "setActiveConversation", "answers", "sort", "answerPostA", "answerPostB", "Number", "resolvesPost", "valueOf", "channelId", "isCommunicationEnabled", "router", "navigate", "conversationId", "Post", "Object", "assign", "post", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275resolveDocument", "PostComponent_Conditional_2_Template", "PostComponent_Conditional_3_Template", "PostComponent_Conditional_4_Template", "PostComponent_Conditional_11_Template", "PostComponent_Conditional_12_Template", "PostComponent_Conditional_13_Template", "PostComponent_Conditional_15_Template", "PostComponent_Conditional_18_Template", "PostComponent_Conditional_19_Template", "_r1", "PostComponent_Conditional_25_Template", "PostComponent_ng_template_29_Template", "toggleEmojiSelect", "\u0275\u0275pureFunction4", "_c1", "OVERVIEW", "PLAGIARISM_CASE_INSTRUCTOR", "PLAGIARISM_CASE_STUDENT", "hasChannelModerationRights", "clickPosition", "emojiPickerTrigger_r15", "NgClass", "FaIconComponent", "TranslateDirective", "NgbTooltip", "PostingHeaderComponent", "RouterLinkActive", "RouterLink", "PostingContentComponent", "MessageInlineInputComponent", "PostingFooterComponent", "NgStyle", "CdkOverlayOrigin", "CdkConnectedOverlay", "EmojiPickerComponent", "ArtemisDatePipe", "ArtemisTranslatePipe", "ForwardedMessageComponent", "styles", "data", "animation", "trigger", "transition", "style", "opacity", "animate", "changeDetection"]
}
