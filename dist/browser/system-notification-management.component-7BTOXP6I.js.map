{
  "version": 3,
  "sources": ["src/main/webapp/app/core/util/parse-links.service.ts", "src/main/webapp/app/admin/system-notification-management/system-notification-management.component.ts", "src/main/webapp/app/admin/system-notification-management/system-notification-management.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * A utility service for link parsing. Note: this class comes from the jhipster template\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ParseLinks {\r\n    /**\r\n     * Method to parse the links\r\n     */\r\n    parse(header: string): { [key: string]: number } {\r\n        if (header.length === 0) {\r\n            throw new Error('input must not be of zero length');\r\n        }\r\n\r\n        // Split parts by comma\r\n        const parts: string[] = header.split(',');\r\n        const links: { [key: string]: number } = {};\r\n\r\n        // Parse each part into a named link\r\n        parts.forEach((part) => {\r\n            const section: string[] = part.split(';');\r\n\r\n            if (section.length !== 2) {\r\n                throw new Error('section could not be split on \";\"');\r\n            }\r\n\r\n            const url: string = section[0].replace(/<(.*)>/, '$1').trim();\r\n            const queryString: { [key: string]: string | undefined } = {};\r\n\r\n            url.replace(/([^?=&]+)(=([^&]*))?/g, ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\r\n                if ($1 !== undefined) {\r\n                    queryString[$1] = $3;\r\n                }\r\n                return $3 ?? '';\r\n            });\r\n\r\n            if (queryString.page !== undefined) {\r\n                const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\r\n                links[name] = parseInt(queryString.page, 10);\r\n            }\r\n        });\r\n        return links;\r\n    }\r\n}\r\n", "import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport dayjs from 'dayjs/esm';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { SystemNotification } from 'app/entities/system-notification.model';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/constants/pagination.constants';\r\nimport { SystemNotificationService } from 'app/shared/notification/system-notification/system-notification.service';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { EventManager } from 'app/core/util/event-manager.service';\r\nimport { ParseLinks } from 'app/core/util/parse-links.service';\r\nimport { faEye, faPlus, faSort, faTimes, faWrench } from '@fortawesome/free-solid-svg-icons';\r\nimport { AdminSystemNotificationService } from 'app/shared/notification/system-notification/admin-system-notification.service';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { ItemCountComponent } from 'app/shared/pagination/item-count.component';\r\nimport { NgbPagination } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\r\n\r\nenum NotificationState {\r\n    SCHEDULED = 'SCHEDULED',\r\n    ACTIVE = 'ACTIVE',\r\n    EXPIRED = 'EXPIRED',\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-system-notification-management',\r\n    templateUrl: './system-notification-management.component.html',\r\n    imports: [TranslateDirective, RouterLink, FaIconComponent, SortDirective, SortByDirective, DeleteButtonDirective, ItemCountComponent, NgbPagination, ArtemisDatePipe],\r\n})\r\nexport class SystemNotificationManagementComponent implements OnInit, OnDestroy {\r\n    private systemNotificationService = inject(SystemNotificationService);\r\n    private adminSystemNotificationService = inject(AdminSystemNotificationService);\r\n    private alertService = inject(AlertService);\r\n    private accountService = inject(AccountService);\r\n    private parseLinks = inject(ParseLinks);\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private eventManager = inject(EventManager);\r\n\r\n    readonly SCHEDULED = NotificationState.SCHEDULED;\r\n    readonly ACTIVE = NotificationState.ACTIVE;\r\n    readonly EXPIRED = NotificationState.EXPIRED;\r\n\r\n    currentAccount: User;\r\n    notifications: SystemNotification[];\r\n    error: string;\r\n    success: string;\r\n    routeData: Subscription;\r\n    links: any;\r\n    predicate = 'notificationDate';\r\n    previousPage: number;\r\n    reverse: boolean;\r\n\r\n    // page information\r\n    page = 1; // We are at page 1 by default.\r\n    itemsPerPage = ITEMS_PER_PAGE;\r\n    totalItems = 0;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    // Icons\r\n    faSort = faSort;\r\n    faPlus = faPlus;\r\n    faTimes = faTimes;\r\n    faEye = faEye;\r\n    faWrench = faWrench;\r\n\r\n    constructor() {\r\n        this.routeData = this.activatedRoute.data.subscribe((data) => {\r\n            const pagingParams = data['pagingParams'];\r\n            if (pagingParams) {\r\n                this.page = pagingParams.page;\r\n                this.previousPage = pagingParams.page;\r\n                this.reverse = pagingParams.ascending;\r\n                this.predicate = pagingParams.predicate;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes current account and system notifications\r\n     */\r\n    ngOnInit() {\r\n        this.accountService.identity().then((user: User) => {\r\n            this.currentAccount = user!;\r\n            this.loadAll();\r\n            this.registerChangeInUsers();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from routeData on component destruction\r\n     */\r\n    ngOnDestroy() {\r\n        this.routeData.unsubscribe();\r\n        this.dialogErrorSource.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Reloads notifications changes whenever notification list is modified\r\n     */\r\n    registerChangeInUsers() {\r\n        this.eventManager.subscribe('notificationListModification', () => this.loadAll());\r\n    }\r\n\r\n    /**\r\n     * Deletes notification\r\n     * @param notificationId the id of the notification that we want to delete\r\n     */\r\n    deleteNotification(notificationId: number) {\r\n        this.adminSystemNotificationService.delete(notificationId).subscribe({\r\n            next: () => {\r\n                this.eventManager.broadcast({\r\n                    name: 'notificationListModification',\r\n                    content: 'Deleted a system notification',\r\n                });\r\n                this.dialogErrorSource.next('');\r\n            },\r\n            error: (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads system notifications\r\n     */\r\n    loadAll() {\r\n        this.systemNotificationService\r\n            .query({\r\n                page: this.page - 1,\r\n                size: this.itemsPerPage,\r\n                sort: this.sort(),\r\n            })\r\n            .subscribe({\r\n                next: (res: HttpResponse<SystemNotification[]>) => this.onSuccess(res.body!, res.headers),\r\n                error: (res: HttpErrorResponse) => onError(this.alertService, res),\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the unique identifier for items in the collection\r\n     * @param index of a user in the collection\r\n     * @param item current notification\r\n     */\r\n    trackIdentity(index: number, item: SystemNotification) {\r\n        return item.id ?? -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if notification is currently active, expired or scheduled\r\n     * @param systemNotification which relevance will be checked\r\n     */\r\n    getNotificationState(systemNotification: SystemNotification): NotificationState {\r\n        if (systemNotification.notificationDate!.isAfter(dayjs())) {\r\n            return NotificationState.SCHEDULED;\r\n        } else if (systemNotification.expireDate?.isAfter(dayjs()) ?? true) {\r\n            return NotificationState.ACTIVE;\r\n        } else {\r\n            return NotificationState.EXPIRED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts parameters by specified order\r\n     */\r\n    sort() {\r\n        const result = [];\r\n        if (this.predicate) {\r\n            result.push(this.predicate + ',' + (this.reverse ? 'asc' : 'desc'));\r\n        }\r\n        if (this.predicate !== 'id') {\r\n            result.push('id');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Loads specified page, if it is not the same as previous one\r\n     * @param page number of the page that will be loaded\r\n     */\r\n    loadPage(page: number) {\r\n        if (page !== this.previousPage) {\r\n            this.previousPage = page;\r\n            this.transition();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transitions to another page and/or sorting order\r\n     */\r\n    transition() {\r\n        this.router.navigate(['/admin/system-notification-management'], {\r\n            queryParams: {\r\n                page: this.page,\r\n                sort: this.predicate + ',' + (this.reverse ? 'asc' : 'desc'),\r\n            },\r\n        });\r\n        this.loadAll();\r\n    }\r\n\r\n    private onSuccess(data: SystemNotification[], headers: HttpHeaders) {\r\n        this.links = this.parseLinks.parse(headers.get('link')!);\r\n        this.totalItems = Number(headers.get('X-Total-Count')!);\r\n        this.notifications = data;\r\n    }\r\n}\r\n", "<div>\r\n    <h2>\r\n        <span id=\"system-notification-management-page-heading\" jhiTranslate=\"artemisApp.systemNotification.systemNotifications\"></span>\r\n        <a class=\"btn btn-primary float-end jh-create-entity\" [routerLink]=\"['./new']\">\r\n            <fa-icon [icon]=\"faPlus\" /> <span jhiTranslate=\"artemisApp.systemNotification.createLabel\"></span>\r\n        </a>\r\n    </h2>\r\n    @if (notifications) {\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"reverse\" (sortChange)=\"transition()\">\r\n                        <th jhiSortBy=\"id\"><span jhiTranslate=\"global.field.id\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"title\"><span jhiTranslate=\"artemisApp.systemNotification.title\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"text\"><span jhiTranslate=\"artemisApp.systemNotification.text\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"type\"><span jhiTranslate=\"artemisApp.systemNotification.type\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                        <th></th>\r\n                        <th jhiSortBy=\"notificationDate\"><span jhiTranslate=\"artemisApp.systemNotification.notificationDate\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                        <th jhiSortBy=\"expireDate\"><span jhiTranslate=\"artemisApp.systemNotification.expireDate\"></span> <fa-icon [icon]=\"faSort\" /></th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @for (notification of notifications; track trackIdentity($index, notification)) {\r\n                        <tr>\r\n                            <td>{{ notification.id }}</td>\r\n                            <td>{{ notification.title }}</td>\r\n                            <td>{{ notification.text }}</td>\r\n                            <td>{{ notification.type }}</td>\r\n                            <td>\r\n                                @switch (getNotificationState(notification)) {\r\n                                    @case (ACTIVE) {\r\n                                        <span class=\"badge bg-success\" jhiTranslate=\"artemisApp.systemNotification.active\"></span>\r\n                                    }\r\n                                    @case (EXPIRED) {\r\n                                        <span class=\"badge bg-danger\" jhiTranslate=\"artemisApp.systemNotification.expired\"></span>\r\n                                    }\r\n                                    @case (SCHEDULED) {\r\n                                        <span class=\"badge bg-info\" jhiTranslate=\"artemisApp.systemNotification.scheduled\"></span>\r\n                                    }\r\n                                }\r\n                            </td>\r\n                            <td>{{ notification.notificationDate | artemisDate }}</td>\r\n                            <td>{{ notification.expireDate | artemisDate }}</td>\r\n                            <td class=\"text-end\">\r\n                                <div class=\"btn-group flex-btn-group-container\">\r\n                                    <a id=\"viewButton\" [routerLink]=\"['./', notification.id]\" class=\"btn btn-info btn-sm\">\r\n                                        <fa-icon [icon]=\"faEye\" />\r\n                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.view\"></span>\r\n                                    </a>\r\n                                    <a id=\"editButton\" [routerLink]=\"['./', notification.id, 'edit']\" queryParamsHandling=\"merge\" class=\"btn btn-warning btn-sm\">\r\n                                        <fa-icon [icon]=\"faWrench\" />\r\n                                        <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.edit\"></span>\r\n                                    </a>\r\n                                    <button\r\n                                        jhiDeleteButton\r\n                                        [entityTitle]=\"!!notification.title ? notification.title : ''\"\r\n                                        deleteQuestion=\"artemisApp.systemNotification.delete.question\"\r\n                                        (delete)=\"deleteNotification(notification.id!)\"\r\n                                        [dialogError]=\"dialogError$\"\r\n                                    >\r\n                                        <fa-icon [icon]=\"faTimes\" />\r\n                                    </button>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <div>\r\n            <div class=\"row justify-content-center\">\r\n                <jhi-item-count [params]=\"{ page: page, totalItems: totalItems, itemsPerPage: itemsPerPage }\" />\r\n            </div>\r\n            <div class=\"row justify-content-center\">\r\n                <ngb-pagination\r\n                    id=\"pagination\"\r\n                    [collectionSize]=\"totalItems\"\r\n                    [(page)]=\"page\"\r\n                    [pageSize]=\"itemsPerPage\"\r\n                    [maxSize]=\"5\"\r\n                    [rotate]=\"true\"\r\n                    [boundaryLinks]=\"true\"\r\n                    (pageChange)=\"loadPage(page)\"\r\n                />\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["ParseLinks", "parse", "header", "length", "Error", "parts", "split", "links", "forEach", "part", "section", "url", "replace", "trim", "queryString", "$0", "$1", "$2", "$3", "undefined", "page", "name", "parseInt", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "SystemNotificationManagementComponent_Conditional_14_For_48_Case_17_Template", "SystemNotificationManagementComponent_Conditional_14_For_48_Case_18_Template", "SystemNotificationManagementComponent_Conditional_14_For_48_Case_19_Template", "\u0275\u0275listener", "notification_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "deleteNotification", "id", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "title", "text", "type", "\u0275\u0275conditional", "tmp_15_0", "getNotificationState", "ACTIVE", "EXPIRED", "SCHEDULED", "\u0275\u0275pipeBind1", "notificationDate", "expireDate", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c2", "faEye", "_c3", "faWrench", "dialogError$", "faTimes", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "predicate", "reverse", "transition", "\u0275\u0275repeaterCreate", "SystemNotificationManagementComponent_Conditional_14_For_48_Template", "\u0275\u0275componentInstance", "trackIdentity", "page", "loadPage", "\u0275\u0275twoWayProperty", "faSort", "\u0275\u0275repeater", "notifications", "\u0275\u0275pureFunction3", "_c1", "totalItems", "itemsPerPage", "NotificationState", "SystemNotificationManagementComponent", "systemNotificationService", "inject", "SystemNotificationService", "adminSystemNotificationService", "AdminSystemNotificationService", "alertService", "AlertService", "accountService", "AccountService", "parseLinks", "ParseLinks", "activatedRoute", "ActivatedRoute", "router", "Router", "eventManager", "EventManager", "currentAccount", "error", "success", "routeData", "links", "previousPage", "ITEMS_PER_PAGE", "dialogErrorSource", "Subject", "asObservable", "faPlus", "constructor", "data", "subscribe", "pagingParams", "ascending", "ngOnInit", "identity", "then", "user", "loadAll", "registerChangeInUsers", "ngOnDestroy", "unsubscribe", "notificationId", "delete", "next", "broadcast", "name", "content", "message", "query", "size", "sort", "res", "onSuccess", "body", "headers", "onError", "index", "item", "systemNotification", "isAfter", "dayjs", "result", "push", "navigate", "queryParams", "parse", "get", "Number", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "SystemNotificationManagementComponent_Conditional_14_Template", "\u0275\u0275pureFunction0", "_c0", "TranslateDirective", "RouterLink", "FaIconComponent", "SortDirective", "SortByDirective", "DeleteButtonDirective", "ItemCountComponent", "NgbPagination", "ArtemisDatePipe", "encapsulation"]
}
