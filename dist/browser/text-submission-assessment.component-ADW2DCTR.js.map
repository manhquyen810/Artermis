{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/text/assess/text-submission-assessment.component.ts", "src/main/webapp/app/exercises/text/assess/text-submission-assessment.component.html"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { UnreferencedFeedbackComponent } from 'app/exercises/shared/unreferenced-feedback/unreferenced-feedback.component';\r\nimport dayjs from 'dayjs/esm';\r\nimport { StudentParticipation } from 'app/entities/participation/student-participation.model';\r\nimport { TextSubmission } from 'app/entities/text/text-submission.model';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { Result } from 'app/entities/result.model';\r\nimport { Complaint } from 'app/entities/complaint.model';\r\nimport { ComplaintService } from 'app/complaints/complaint.service';\r\nimport { TextAssessmentService } from 'app/exercises/text/assess/text-assessment.service';\r\nimport { Feedback, FeedbackType } from 'app/entities/feedback.model';\r\nimport { notUndefined, onError } from 'app/shared/util/global.utils';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NEW_ASSESSMENT_PATH } from 'app/exercises/text/assess/text-submission-assessment.route';\r\nimport { assessmentNavigateBack } from 'app/exercises/shared/navigate-back.util';\r\nimport {\r\n    getLatestSubmissionResult,\r\n    getSubmissionResultByCorrectionRound,\r\n    getSubmissionResultById,\r\n    setLatestSubmissionResult,\r\n    setSubmissionResultByCorrectionRound,\r\n} from 'app/entities/submission.model';\r\nimport { TextAssessmentBaseComponent } from 'app/exercises/text/assess/text-assessment-base.component';\r\nimport { getExerciseDashboardLink, getLinkToSubmissionAssessment } from 'app/utils/navigation.utils';\r\nimport { ExerciseType, getCourseFromExercise } from 'app/entities/exercise.model';\r\nimport { SubmissionService } from 'app/exercises/shared/submission/submission.service';\r\nimport { ExampleSubmissionService } from 'app/exercises/shared/example-submission/example-submission.service';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { isAllowedToModifyFeedback } from 'app/assessment/assessment.service';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { AssessmentAfterComplaint } from 'app/complaints/complaints-for-tutor/complaints-for-tutor.component';\r\nimport { TextBlockRef } from 'app/entities/text/text-block-ref.model';\r\nimport { AthenaService } from 'app/assessment/athena.service';\r\nimport { TextBlock } from 'app/entities/text/text-block.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { AssessmentLayoutComponent } from 'app/assessment/assessment-layout/assessment-layout.component';\r\nimport { ResizeableContainerComponent } from 'app/shared/resizeable-container/resizeable-container.component';\r\nimport { ScoreDisplayComponent } from 'app/shared/score-display/score-display.component';\r\nimport { TextAssessmentAreaComponent } from './text-assessment-area/text-assessment-area.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { AssessmentInstructionsComponent } from 'app/assessment/assessment-instructions/assessment-instructions/assessment-instructions.component';\r\n\r\n@Component({\r\n    selector: 'jhi-text-submission-assessment',\r\n    templateUrl: './text-submission-assessment.component.html',\r\n    styleUrls: ['./text-submission-assessment.component.scss'],\r\n    imports: [\r\n        AssessmentLayoutComponent,\r\n        ResizeableContainerComponent,\r\n        ScoreDisplayComponent,\r\n        TextAssessmentAreaComponent,\r\n        FaIconComponent,\r\n        TranslateDirective,\r\n        AssessmentInstructionsComponent,\r\n        UnreferencedFeedbackComponent,\r\n        RouterLink,\r\n    ],\r\n})\r\nexport class TextSubmissionAssessmentComponent extends TextAssessmentBaseComponent implements OnInit, OnDestroy {\r\n    private activatedRoute = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private location = inject(Location);\r\n    private route = inject(ActivatedRoute);\r\n    private complaintService = inject(ComplaintService);\r\n    private submissionService = inject(SubmissionService);\r\n    private exampleSubmissionService = inject(ExampleSubmissionService);\r\n    private athenaService = inject(AthenaService);\r\n    private translateService = inject(TranslateService);\r\n\r\n    /*\r\n     * The instance of this component is REUSED for multiple assessments if using the \"Assess Next\" button!\r\n     * All properties must be initialized with a default value (or null) in the resetComponent() method.\r\n     * For traceability: Keep order in resetComponent() consistent with declaration.\r\n     */\r\n\r\n    participation?: StudentParticipation;\r\n    result?: Result;\r\n    unreferencedFeedback: Feedback[];\r\n    complaint?: Complaint;\r\n    totalScore: number;\r\n    isTestRun = false;\r\n    isLoading: boolean;\r\n    saveBusy: boolean;\r\n    submitBusy: boolean;\r\n    cancelBusy: boolean;\r\n    nextSubmissionBusy: boolean;\r\n    isAssessor: boolean;\r\n    assessmentsAreValid: boolean;\r\n    noNewSubmissions: boolean;\r\n    hasAssessmentDueDatePassed: boolean;\r\n    correctionRound: number = 0;\r\n    resultId: number;\r\n    loadingInitialSubmission = true;\r\n    highlightDifferences = false;\r\n\r\n    /*\r\n     * Non-reset properties:\r\n     * These properties are not reset on purpose, as they cannot change between assessments.\r\n     */\r\n    private cancelConfirmationText: string;\r\n\r\n    // ExerciseId is updated from Route Subscription directly.\r\n    exerciseId: number;\r\n    courseId: number;\r\n    course?: Course;\r\n    examId = 0;\r\n    exerciseGroupId: number;\r\n    exerciseDashboardLink: string[];\r\n    isExamMode = false;\r\n\r\n    private feedbackSuggestionsObservable?: Subscription;\r\n\r\n    private get referencedFeedback(): Feedback[] {\r\n        return this.textBlockRefs.map(({ feedback }) => feedback).filter(notUndefined) as Feedback[];\r\n    }\r\n\r\n    private get assessments(): Feedback[] {\r\n        return [...this.referencedFeedback, ...this.unreferencedFeedback];\r\n    }\r\n\r\n    // Icons\r\n    farListAlt = faListAlt;\r\n\r\n    constructor() {\r\n        super();\r\n        this.translateService.get('artemisApp.textAssessment.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\r\n        this.resetComponent();\r\n    }\r\n\r\n    /**\r\n     * This method is called before the component is REUSED!\r\n     * All properties MUST be set to a default value (e.g. null) to prevent data corruption by state leaking into following new assessments.\r\n     */\r\n    private resetComponent(): void {\r\n        this.participation = undefined;\r\n        this.submission = undefined;\r\n        this.exercise = undefined;\r\n        this.result = undefined;\r\n        this.unreferencedFeedback = [];\r\n        this.textBlockRefs = [];\r\n        this.unusedTextBlockRefs = [];\r\n        this.complaint = undefined;\r\n        this.totalScore = 0;\r\n\r\n        this.isLoading = true;\r\n        this.saveBusy = false;\r\n        this.submitBusy = false;\r\n        this.cancelBusy = false;\r\n        this.nextSubmissionBusy = false;\r\n        this.isAssessor = false;\r\n        this.assessmentsAreValid = false;\r\n        this.noNewSubmissions = false;\r\n        this.highlightDifferences = false;\r\n    }\r\n\r\n    /**\r\n     * Life cycle hook to indicate component creation is done\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        await super.ngOnInit();\r\n        this.route.queryParamMap.subscribe((queryParams) => {\r\n            this.isTestRun = queryParams.get('testRun') === 'true';\r\n            this.correctionRound = Number(queryParams.get('correction-round'));\r\n        });\r\n\r\n        this.activatedRoute.paramMap.subscribe((paramMap) => {\r\n            this.exerciseId = Number(paramMap.get('exerciseId'));\r\n            this.resultId = Number(paramMap.get('resultId')) || 0;\r\n            this.courseId = Number(paramMap.get('courseId'));\r\n            if (paramMap.has('examId')) {\r\n                this.examId = Number(paramMap.get('examId'));\r\n                this.exerciseGroupId = Number(paramMap.get('exerciseGroupId'));\r\n                this.isExamMode = true;\r\n            }\r\n            this.exerciseDashboardLink = getExerciseDashboardLink(this.courseId, this.exerciseId, this.examId, this.isTestRun);\r\n        });\r\n        this.activatedRoute.data.subscribe(({ studentParticipation }) => {\r\n            this.setPropertiesFromServerResponse(studentParticipation);\r\n            this.validateFeedback();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.feedbackSuggestionsObservable?.unsubscribe();\r\n    }\r\n\r\n    private setPropertiesFromServerResponse(studentParticipation?: StudentParticipation) {\r\n        this.resetComponent();\r\n        this.loadingInitialSubmission = false;\r\n        if (!studentParticipation) {\r\n            // Show \"No New Submission\" banner on .../submissions/new/assessment route\r\n            this.noNewSubmissions = this.isNewAssessmentRoute;\r\n            return;\r\n        }\r\n\r\n        this.participation = studentParticipation;\r\n        this.submission = this.participation?.submissions?.last() as TextSubmission;\r\n        this.exercise = this.participation?.exercise as TextExercise;\r\n        this.course = getCourseFromExercise(this.exercise);\r\n        setLatestSubmissionResult(this.submission, getLatestSubmissionResult(this.submission));\r\n\r\n        if (this.resultId > 0) {\r\n            this.result = getSubmissionResultById(this.submission, this.resultId);\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            this.correctionRound = this.submission.results?.findIndex((result) => result.id === this.resultId)!;\r\n        } else {\r\n            this.result = getSubmissionResultByCorrectionRound(this.submission, this.correctionRound);\r\n        }\r\n\r\n        this.hasAssessmentDueDatePassed = !!this.exercise!.assessmentDueDate && dayjs(this.exercise!.assessmentDueDate).isBefore(dayjs());\r\n\r\n        this.prepareTextBlocksAndFeedbacks();\r\n        this.getComplaint();\r\n        this.updateUrlIfNeeded();\r\n\r\n        this.checkPermissions(this.result);\r\n        this.totalScore = this.computeTotalScore(this.assessments);\r\n        this.isLoading = false;\r\n\r\n        this.loadFeedbackSuggestions();\r\n\r\n        this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission);\r\n    }\r\n\r\n    private updateUrlIfNeeded() {\r\n        if (this.isNewAssessmentRoute) {\r\n            // Update the url with the new id, without reloading the page, to make the history consistent\r\n            const newUrl = this.router\r\n                .createUrlTree(\r\n                    getLinkToSubmissionAssessment(\r\n                        ExerciseType.TEXT,\r\n                        this.courseId,\r\n                        this.exerciseId,\r\n                        this.participation!.id!,\r\n                        this.submission!.id!,\r\n                        this.examId,\r\n                        this.exerciseGroupId,\r\n                    ),\r\n                )\r\n                .toString();\r\n            this.location.go(newUrl);\r\n        }\r\n    }\r\n\r\n    private get isNewAssessmentRoute(): boolean {\r\n        return this.activatedRoute.routeConfig?.path === NEW_ASSESSMENT_PATH;\r\n    }\r\n\r\n    private checkPermissions(result?: Result): void {\r\n        this.isAssessor = result?.assessor?.id === this.userId;\r\n    }\r\n\r\n    /**\r\n     * Adds a TextBlockRef, adjusting existing automatic text blocks to fit around the new text block if necessary (and possible).\r\n     * Example: There already are 2 text blocks:\r\n     *          - block 1 from index 0 to 10 (automatically generated)\r\n     *          - block 2 from index 10 to 20 (automatically generated)\r\n     *          Now, we add a new text block ref with feedback from index 5 to 15.\r\n     *          Then, we have three text blocks: 0-5, 5-15, 15-20.\r\n     * If the split conflicts with a manual feedback, we don't add the TextBlockRef at all.\r\n     *\r\n     * @param refToAdd The TextBlockRef to add (text block + feedback on it)\r\n     */\r\n    private addAutomaticTextBlockRef(refToAdd: TextBlockRef) {\r\n        const newTextBlockRefs: TextBlockRef[] = [];\r\n        const [start, end] = [refToAdd.block!.startIndex!, refToAdd.block!.endIndex!];\r\n        for (const existingBlockRef of this.textBlockRefs) {\r\n            const [exStart, exEnd] = [existingBlockRef.block!.startIndex!, existingBlockRef.block!.endIndex!];\r\n            if (exStart === start && exEnd === end) {\r\n                // existing: |---|\r\n                // to add:   |---|\r\n                // -> replace existing block (don't add existing one)\r\n            } else if (exEnd <= start || exStart >= end) {\r\n                // existing: |---|  or   |---|\r\n                // to add:         |---|\r\n                // -> no overlap, just add\r\n                newTextBlockRefs.push(existingBlockRef);\r\n            } else {\r\n                if (exStart < start) {\r\n                    // Existing text block starts before text block to add\r\n                    if (exEnd > end) {\r\n                        // existing: |----------|\r\n                        // to add:      |---|\r\n                        // ->        |--|---|---|\r\n                        //          (|ex|add|new|)\r\n                        // (split into three text blocks)\r\n                        const newBlockRef = new TextBlockRef(new TextBlock(), undefined);\r\n                        newBlockRef.block!.startIndex = end;\r\n                        newBlockRef.block!.endIndex = exEnd;\r\n                        newBlockRef.block!.submissionId = this.submission?.id;\r\n\r\n                        existingBlockRef.block!.endIndex = start;\r\n                        newTextBlockRefs.push(existingBlockRef);\r\n                        newTextBlockRefs.push(newBlockRef);\r\n                    } else {\r\n                        // existing: |-----|\r\n                        // to add:      |-----|\r\n                        // ->        |--|-----|\r\n                        // (\"squish\" the existing text block)\r\n                        existingBlockRef.block!.endIndex = start;\r\n                        newTextBlockRefs.push(existingBlockRef);\r\n                    }\r\n                } else if (exEnd > end) {\r\n                    // existing:       |-----|\r\n                    // to add:    |------|\r\n                    // ->         |------|---|\r\n                    // (\"squish\" the existing text block)\r\n                    existingBlockRef.block!.startIndex = end;\r\n                    newTextBlockRefs.push(existingBlockRef);\r\n                } else if (exEnd == end) {\r\n                    // existing:       |-----|\r\n                    // to add:    |----------|\r\n                    // ->         |-add--|ex-|\r\n                    // (\"squish\" the new text block)\r\n                    refToAdd.block!.endIndex = exStart;\r\n                    newTextBlockRefs.push(existingBlockRef);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Add the text block to add\r\n        newTextBlockRefs.push(refToAdd);\r\n\r\n        // Sort the new text block refs by their start index\r\n        newTextBlockRefs.sort((ref1, ref2) => ref1.block!.startIndex! - ref2.block!.startIndex!);\r\n\r\n        // Update the text on all text block refs\r\n        for (const blockRef of newTextBlockRefs) {\r\n            blockRef.block!.text = this.submission!.text!.substring(blockRef.block!.startIndex!, blockRef.block!.endIndex!);\r\n        }\r\n\r\n        this.textBlockRefs = newTextBlockRefs;\r\n        this.submission!.blocks = this.textBlockRefs.map((blockRef) => blockRef.block!);\r\n        this.result!.feedbacks = this.textBlockRefs.map((blockRef) => blockRef.feedback).filter((feedback) => feedback != undefined) as Feedback[];\r\n    }\r\n\r\n    /**\r\n     * Start loading feedback suggestions from Athena\r\n     * (only if this is a fresh submission, i.e. no assessments exist yet)\r\n     */\r\n    loadFeedbackSuggestions(): void {\r\n        if (this.assessments.length > 0) {\r\n            return;\r\n        }\r\n        this.feedbackSuggestionsObservable = this.athenaService.getTextFeedbackSuggestions(this.exercise!, this.submission!).subscribe((feedbackSuggestions) => {\r\n            feedbackSuggestions.forEach((suggestion) => {\r\n                if (suggestion instanceof TextBlockRef) {\r\n                    // referenced feedback suggestion - add to existing text blocks but avoid conflicts\r\n                    this.addAutomaticTextBlockRef(suggestion);\r\n                } else {\r\n                    // unreferenced feedback suggestion - we can just add it\r\n                    this.result!.feedbacks ??= [];\r\n                    this.result!.feedbacks = [...this.result!.feedbacks, suggestion];\r\n                    // the unreferencedFeedback variable does not auto-update and needs to be updated manually\r\n                    this.unreferencedFeedback = [...this.unreferencedFeedback, suggestion];\r\n                }\r\n            });\r\n            this.validateFeedback();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save the assessment\r\n     */\r\n    save(): void {\r\n        this.saveBusy = true;\r\n        this.assessmentsService.save(this.participation!.id!, this.result!.id!, this.assessments, this.textBlocksWithFeedback, this.result!.assessmentNote?.note).subscribe({\r\n            next: (response) => this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.saveSuccessful'),\r\n            error: (error: HttpErrorResponse) => this.handleError(error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Submit the assessment\r\n     */\r\n    submit(): void {\r\n        if (!this.result?.id) {\r\n            return; // We need to have saved the result before\r\n        }\r\n\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.textAssessment.error.invalidAssessments');\r\n            return;\r\n        }\r\n\r\n        this.submitBusy = true;\r\n        this.assessmentsService.submit(this.participation!.id!, this.result!.id!, this.assessments, this.textBlocksWithFeedback, this.result!.assessmentNote?.note).subscribe({\r\n            next: (response) => this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.submitSuccessful'),\r\n            error: (error: HttpErrorResponse) => this.handleError(error),\r\n        });\r\n    }\r\n\r\n    protected handleSaveOrSubmitSuccessWithAlert(response: HttpResponse<Result>, translationKey: string): void {\r\n        super.handleSaveOrSubmitSuccessWithAlert(response, translationKey);\r\n        this.result = response.body!;\r\n        setSubmissionResultByCorrectionRound(this.submission!, this.result, this.correctionRound);\r\n        this.saveBusy = this.submitBusy = false;\r\n    }\r\n\r\n    /**\r\n     * Cancel the assessment\r\n     */\r\n    cancel(): void {\r\n        const confirmCancel = window.confirm(this.cancelConfirmationText);\r\n        this.cancelBusy = true;\r\n        if (confirmCancel && this.exercise && this.submission) {\r\n            this.assessmentsService.cancelAssessment(this.participation!.id!, this.submission!.id!).subscribe(() => this.navigateBack());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Go to next submission\r\n     */\r\n    async nextSubmission(): Promise<void> {\r\n        const url = getLinkToSubmissionAssessment(ExerciseType.TEXT, this.courseId, this.exerciseId, this.participation!.id!, 'new', this.examId, this.exerciseGroupId);\r\n        this.nextSubmissionBusy = true;\r\n        await this.router.navigate(url, { queryParams: { 'correction-round': this.correctionRound } });\r\n    }\r\n\r\n    /**\r\n     * Sends the current (updated) assessment to the server to update the original assessment after a complaint was accepted.\r\n     * The corresponding complaint response is sent along with the updated assessment to prevent additional requests.\r\n     *\r\n     * @param assessmentAfterComplaint the response to the complaint that is sent to the server along with the assessment update along with onSuccess and onError callbacks\r\n     */\r\n    updateAssessmentAfterComplaint(assessmentAfterComplaint: AssessmentAfterComplaint): void {\r\n        this.validateFeedback();\r\n        if (!this.assessmentsAreValid) {\r\n            this.alertService.error('artemisApp.textAssessment.error.invalidAssessments');\r\n            assessmentAfterComplaint.onError();\r\n            return;\r\n        }\r\n\r\n        this.assessmentsService\r\n            .updateAssessmentAfterComplaint(\r\n                this.assessments,\r\n                this.textBlocksWithFeedback,\r\n                assessmentAfterComplaint.complaintResponse,\r\n                this.submission?.id!, // eslint-disable-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n                this.participation?.id!, // eslint-disable-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n                this.result?.assessmentNote?.note,\r\n            )\r\n            .subscribe({\r\n                next: (response) => {\r\n                    assessmentAfterComplaint.onSuccess();\r\n                    this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.updateAfterComplaintSuccessful');\r\n                },\r\n                error: (httpErrorResponse: HttpErrorResponse) => {\r\n                    assessmentAfterComplaint.onError();\r\n                    this.alertService.closeAll();\r\n                    const error = httpErrorResponse.error;\r\n                    if (error && error.errorKey && error.errorKey === 'complaintLock') {\r\n                        this.alertService.error(error.message, error.params);\r\n                    } else {\r\n                        this.alertService.error('artemisApp.textAssessment.updateAfterComplaintFailed');\r\n                    }\r\n                },\r\n            });\r\n    }\r\n\r\n    navigateBack() {\r\n        assessmentNavigateBack(this.location, this.router, this.exercise!, this.submission!, this.isTestRun);\r\n    }\r\n\r\n    /**\r\n     * Validate the feedback of the assessment\r\n     */\r\n    validateFeedback(): void {\r\n        const hasReferencedFeedback = Feedback.haveCredits(this.referencedFeedback);\r\n        const hasUnreferencedFeedback = Feedback.haveCreditsAndComments(this.unreferencedFeedback);\r\n        // When unreferenced feedback is set, it has to be valid (score + detailed text)\r\n        this.assessmentsAreValid = (hasReferencedFeedback && this.unreferencedFeedback.length === 0) || hasUnreferencedFeedback;\r\n\r\n        this.totalScore = this.computeTotalScore(this.assessments);\r\n        this.submissionService.handleFeedbackCorrectionRoundTag(this.correctionRound, this.submission!);\r\n    }\r\n\r\n    private prepareTextBlocksAndFeedbacks(): void {\r\n        if (!this.result) {\r\n            return;\r\n        }\r\n        const feedbacks = this.result.feedbacks || [];\r\n        this.unreferencedFeedback = feedbacks.filter((feedbackElement) => feedbackElement.reference == undefined && feedbackElement.type === FeedbackType.MANUAL_UNREFERENCED);\r\n\r\n        const matchBlocksWithFeedbacks = TextAssessmentService.matchBlocksWithFeedbacks(this.submission?.blocks || [], feedbacks);\r\n        this.sortAndSetTextBlockRefs(matchBlocksWithFeedbacks, this.textBlockRefs, this.unusedTextBlockRefs, this.submission);\r\n    }\r\n\r\n    private getComplaint(): void {\r\n        if (!this.submission) {\r\n            return;\r\n        }\r\n\r\n        this.isLoading = true;\r\n        this.complaintService.findBySubmissionId(this.submission.id!).subscribe({\r\n            next: (res) => {\r\n                if (!res.body) {\r\n                    return;\r\n                }\r\n                this.complaint = res.body;\r\n                this.isLoading = false;\r\n            },\r\n            error: (err: HttpErrorResponse) => {\r\n                this.handleError(err.error);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Boolean which determines whether the user can override a result.\r\n     * If no exercise is loaded, for example during loading between exercises, we return false.\r\n     * Instructors can always override a result.\r\n     * Tutors can override their own results within the assessment due date, if there is no complaint about their assessment.\r\n     * They cannot override a result anymore, if there is a complaint. Another tutor must handle the complaint.\r\n     */\r\n    get canOverride(): boolean {\r\n        if (this.exercise) {\r\n            if (this.exercise.isAtLeastInstructor) {\r\n                // Instructors can override any assessment at any time.\r\n                return true;\r\n            }\r\n            if (this.complaint && this.isAssessor) {\r\n                // If there is a complaint, the original assessor cannot override the result anymore.\r\n                return false;\r\n            }\r\n            let isBeforeAssessmentDueDate = true;\r\n            // Add check as the assessmentDueDate must not be set for exercises\r\n            if (this.exercise.assessmentDueDate) {\r\n                isBeforeAssessmentDueDate = dayjs().isBefore(this.exercise.assessmentDueDate!);\r\n            }\r\n            // tutors are allowed to override one of their assessments before the assessment due date.\r\n            return this.isAssessor && isBeforeAssessmentDueDate;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    get readOnly(): boolean {\r\n        return !isAllowedToModifyFeedback(this.isTestRun, this.isAssessor, this.hasAssessmentDueDatePassed, this.result, this.complaint, this.exercise);\r\n    }\r\n\r\n    protected handleError(error: HttpErrorResponse): void {\r\n        super.handleError(error);\r\n        this.saveBusy = this.submitBusy = false;\r\n    }\r\n\r\n    /**\r\n     * Invokes exampleSubmissionService when useAsExampleSubmission is emitted in assessment-layout\r\n     */\r\n    useStudentSubmissionAsExampleSubmission(): void {\r\n        if (this.submission && this.exercise) {\r\n            this.exampleSubmissionService.import(this.submission.id!, this.exercise.id!).subscribe({\r\n                next: () => this.alertService.success('artemisApp.exampleSubmission.submitSuccessful'),\r\n                error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<jhi-assessment-layout\r\n    (navigateBack)=\"navigateBack()\"\r\n    [isLoading]=\"isLoading\"\r\n    [saveBusy]=\"saveBusy\"\r\n    [submitBusy]=\"submitBusy\"\r\n    [cancelBusy]=\"cancelBusy\"\r\n    [nextSubmissionBusy]=\"nextSubmissionBusy\"\r\n    [isTeamMode]=\"!!exercise?.teamMode\"\r\n    [isAssessor]=\"isAssessor\"\r\n    [canOverride]=\"canOverride\"\r\n    [result]=\"result\"\r\n    [assessmentsAreValid]=\"assessmentsAreValid\"\r\n    [complaint]=\"complaint\"\r\n    [exercise]=\"exercise\"\r\n    [submission]=\"submission\"\r\n    [isTestRun]=\"isTestRun\"\r\n    [exerciseDashboardLink]=\"exerciseDashboardLink\"\r\n    [hasAssessmentDueDatePassed]=\"hasAssessmentDueDatePassed\"\r\n    [correctionRound]=\"correctionRound\"\r\n    (save)=\"save()\"\r\n    (onSubmit)=\"submit()\"\r\n    (onCancel)=\"cancel()\"\r\n    (nextSubmission)=\"nextSubmission()\"\r\n    [(highlightDifferences)]=\"highlightDifferences\"\r\n    (updateAssessmentAfterComplaint)=\"updateAssessmentAfterComplaint($event)\"\r\n    (useAsExampleSubmission)=\"useStudentSubmissionAsExampleSubmission()\"\r\n>\r\n    @if (submission) {\r\n        <div class=\"row\">\r\n            <jhi-resizeable-container class=\"col-12\">\r\n                <!--region Left Panel-->\r\n                <jhi-score-display left-header [maxPoints]=\"exercise?.maxPoints || 0\" [maxBonusPoints]=\"exercise?.bonusPoints || 0\" [score]=\"totalScore\" [course]=\"course\" />\r\n                <jhi-text-assessment-area\r\n                    left-body\r\n                    [submission]=\"submission!\"\r\n                    [(textBlockRefs)]=\"textBlockRefs\"\r\n                    [readOnly]=\"readOnly\"\r\n                    [highlightDifferences]=\"highlightDifferences\"\r\n                    (textBlockRefsChange)=\"validateFeedback()\"\r\n                    (textBlockRefsAddedRemoved)=\"recalculateTextBlockRefs()\"\r\n                    [criteria]=\"exercise!.gradingCriteria\"\r\n                />\r\n                <!--endregion-->\r\n                <!--region Right Panel-->\r\n                <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n                <span right-header jhiTranslate=\"artemisApp.textAssessment.instructions\"></span>\r\n                <div right-body class=\"alert alert-info text-center mb-4\" role=\"alert\" jhiTranslate=\"artemisApp.textAssessment.assessmentInstruction\"></div>\r\n                <jhi-assessment-instructions id=\"instructions-card\" right-body [exercise]=\"exercise!\" class=\"markdown-preview\" />\r\n                <!--endregion-->\r\n            </jhi-resizeable-container>\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n            @if (result && result.id) {\r\n                <jhi-unreferenced-feedback\r\n                    [(feedbacks)]=\"unreferencedFeedback\"\r\n                    [highlightDifferences]=\"highlightDifferences\"\r\n                    (feedbacksChange)=\"validateFeedback()\"\r\n                    [readOnly]=\"readOnly\"\r\n                    [useDefaultFeedbackSuggestionBadgeText]=\"true\"\r\n                    [resultId]=\"result.id\"\r\n                />\r\n            }\r\n        </div>\r\n    } @else {\r\n        @if (!loadingInitialSubmission) {\r\n            <div>\r\n                @if (noNewSubmissions) {\r\n                    <div class=\"alert alert-warning text-center mt-4\" role=\"alert\">\r\n                        <p jhiTranslate=\"artemisApp.textAssessment.notFound\"></p>\r\n                        <a [routerLink]=\"exerciseDashboardLink\" class=\"btn btn-info btn-sm me-1 mb-1 assessment-dashboard\">\r\n                            <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.exerciseDashboard\"></span>\r\n                        </a>\r\n                    </div>\r\n                }\r\n                @if (!noNewSubmissions) {\r\n                    <p>No Submission for specified ID</p>\r\n                }\r\n            </div>\r\n        }\r\n    }\r\n</jhi-assessment-layout>\r\n<ng-template #assessment>\r\n    <div class=\"row\">\r\n        <jhi-resizeable-container class=\"col-12\">\r\n            <!--region Left Panel-->\r\n            <jhi-score-display left-header [maxPoints]=\"exercise?.maxPoints || 0\" [maxBonusPoints]=\"exercise?.bonusPoints || 0\" [score]=\"totalScore\" [course]=\"course\" />\r\n            <jhi-text-assessment-area\r\n                left-body\r\n                [submission]=\"submission!\"\r\n                [(textBlockRefs)]=\"textBlockRefs\"\r\n                [readOnly]=\"readOnly\"\r\n                [highlightDifferences]=\"highlightDifferences\"\r\n                (textBlockRefsChange)=\"validateFeedback()\"\r\n                (textBlockRefsAddedRemoved)=\"recalculateTextBlockRefs()\"\r\n                [criteria]=\"exercise!.gradingCriteria\"\r\n            />\r\n            <!--endregion-->\r\n            <!--region Right Panel-->\r\n            <fa-icon right-header [icon]=\"farListAlt\" />&nbsp;\r\n            <span right-header jhiTranslate=\"artemisApp.textAssessment.instructions\"></span>\r\n            <div right-body class=\"alert alert-info text-center mb-4\" role=\"alert\" jhiTranslate=\"artemisApp.textAssessment.assessmentInstruction\"></div>\r\n            <jhi-assessment-instructions id=\"instructions-card\" right-body [exercise]=\"exercise!\" class=\"markdown-preview\" />\r\n            <!--endregion-->\r\n        </jhi-resizeable-container>\r\n    </div>\r\n    <div class=\"row mt-3\">\r\n        @if (result && result.id) {\r\n            <jhi-unreferenced-feedback\r\n                [(feedbacks)]=\"unreferencedFeedback\"\r\n                [highlightDifferences]=\"highlightDifferences\"\r\n                (feedbacksChange)=\"validateFeedback()\"\r\n                [readOnly]=\"readOnly\"\r\n                [useDefaultFeedbackSuggestionBadgeText]=\"true\"\r\n                [resultId]=\"result.id\"\r\n            />\r\n        }\r\n    </div>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r4", "ctx_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "unreferencedFeedback", "\u0275\u0275resetView", "\u0275\u0275listener", "validateFeedback", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "highlightDifferences", "readOnly", "result", "id", "\u0275\u0275element", "_r2", "textBlockRefs", "recalculateTextBlockRefs", "\u0275\u0275template", "TextSubmissionAssessmentComponent_Conditional_2_Conditional_25_Template", "exercise", "maxPoints", "bonusPoints", "totalScore", "course", "submission", "gradingCriteria", "farListAlt", "\u0275\u0275conditional", "exerciseDashboardLink", "TextSubmissionAssessmentComponent_Conditional_3_Conditional_1_Conditional_3_Template", "TextSubmissionAssessmentComponent_Conditional_3_Conditional_1_Conditional_4_Template", "noNewSubmissions", "TextSubmissionAssessmentComponent_Conditional_3_Conditional_1_Template", "loadingInitialSubmission", "_r6", "_r5", "TextSubmissionAssessmentComponent_ng_template_5_Conditional_25_Template", "TextSubmissionAssessmentComponent", "TextAssessmentBaseComponent", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "location", "Location", "route", "complaintService", "ComplaintService", "submissionService", "SubmissionService", "exampleSubmissionService", "ExampleSubmissionService", "athenaService", "AthenaService", "translateService", "TranslateService", "participation", "complaint", "isTestRun", "isLoading", "saveBusy", "submitBusy", "cancelBusy", "nextSubmissionBusy", "isAssessor", "assessmentsAreValid", "hasAssessmentDueDatePassed", "correctionRound", "resultId", "cancelConfirmationText", "exerciseId", "courseId", "examId", "exerciseGroupId", "isExamMode", "feedbackSuggestionsObservable", "referencedFeedback", "map", "feedback", "filter", "notUndefined", "assessments", "faListAlt", "constructor", "get", "subscribe", "text", "resetComponent", "undefined", "unusedTextBlockRefs", "ngOnInit", "__async", "__superGet", "queryParamMap", "queryParams", "Number", "paramMap", "has", "getExerciseDashboardLink", "data", "studentParticipation", "setPropertiesFromServerResponse", "ngOnDestroy", "unsubscribe", "isNewAssessmentRoute", "submissions", "last", "getCourseFromExercise", "setLatestSubmissionResult", "getLatestSubmissionResult", "getSubmissionResultById", "results", "findIndex", "getSubmissionResultByCorrectionRound", "assessmentDueDate", "dayjs", "isBefore", "prepareTextBlocksAndFeedbacks", "getComplaint", "updateUrlIfNeeded", "checkPermissions", "computeTotalScore", "loadFeedbackSuggestions", "handleFeedbackCorrectionRoundTag", "newUrl", "createUrlTree", "getLinkToSubmissionAssessment", "ExerciseType", "TEXT", "toString", "go", "routeConfig", "path", "NEW_ASSESSMENT_PATH", "assessor", "userId", "addAutomaticTextBlockRef", "refToAdd", "newTextBlockRefs", "start", "end", "block", "startIndex", "endIndex", "existingBlockRef", "exStart", "exEnd", "push", "newBlockRef", "TextBlockRef", "TextBlock", "submissionId", "sort", "ref1", "ref2", "blockRef", "substring", "blocks", "feedbacks", "length", "getTextFeedbackSuggestions", "feedbackSuggestions", "forEach", "suggestion", "save", "assessmentsService", "textBlocksWithFeedback", "assessmentNote", "note", "next", "response", "handleSaveOrSubmitSuccessWithAlert", "error", "handleError", "submit", "alertService", "translationKey", "body", "setSubmissionResultByCorrectionRound", "cancel", "confirmCancel", "window", "confirm", "cancelAssessment", "navigateBack", "nextSubmission", "url", "navigate", "updateAssessmentAfterComplaint", "assessmentAfterComplaint", "onError", "complaintResponse", "onSuccess", "httpErrorResponse", "closeAll", "errorKey", "message", "params", "assessmentNavigateBack", "hasReferencedFeedback", "Feedback", "haveCredits", "hasUnreferencedFeedback", "haveCreditsAndComments", "feedbackElement", "reference", "type", "FeedbackType", "MANUAL_UNREFERENCED", "matchBlocksWithFeedbacks", "TextAssessmentService", "sortAndSetTextBlockRefs", "findBySubmissionId", "res", "err", "canOverride", "isAtLeastInstructor", "isBeforeAssessmentDueDate", "isAllowedToModifyFeedback", "useStudentSubmissionAsExampleSubmission", "import", "success", "selectors", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "TextSubmissionAssessmentComponent_Conditional_2_Template", "TextSubmissionAssessmentComponent_Conditional_3_Template", "TextSubmissionAssessmentComponent_ng_template_5_Template", "\u0275\u0275templateRefExtractor", "teamMode", "AssessmentLayoutComponent", "ResizeableContainerComponent", "ScoreDisplayComponent", "TextAssessmentAreaComponent", "FaIconComponent", "TranslateDirective", "AssessmentInstructionsComponent", "UnreferencedFeedbackComponent", "RouterLink", "styles"]
}
