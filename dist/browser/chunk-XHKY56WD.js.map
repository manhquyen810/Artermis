{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/shared/manage/exercise-paging.service.ts", "src/main/webapp/app/exercises/file-upload/manage/file-upload-exercise-paging.service.ts", "src/main/webapp/app/exercises/modeling/manage/modeling-exercise-paging.service.ts", "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-paging.service.ts", "src/main/webapp/app/exercises/programming/manage/services/code-analysis-paging.service.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-paging.service.ts", "src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise-paging.service.ts", "src/main/webapp/app/shared/pipes/exercise-course-title.pipe.ts", "src/main/webapp/app/exercises/shared/import/exercise-import.component.ts", "src/main/webapp/app/exercises/shared/import/exercise-import.component.html", "src/main/webapp/app/exercises/shared/import/from-file/exercise-import-from-file.component.ts", "src/main/webapp/app/exercises/shared/import/from-file/exercise-import-from-file.component.html", "src/main/webapp/app/exercises/shared/import/exercise-import-tabs.component.ts", "src/main/webapp/app/exercises/shared/import/exercise-import-tabs.component.html", "src/main/webapp/app/exercises/shared/import/exercise-import-wrapper/exercise-import-wrapper.component.ts", "src/main/webapp/app/exercises/shared/import/exercise-import-wrapper/exercise-import-wrapper.component.html"],
  "sourcesContent": ["import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { PagingService } from 'app/exercises/shared/manage/paging.service';\r\nimport { SearchResult, SearchTermPageableSearch } from 'app/shared/table/pageable-table';\r\nimport { Observable, map } from 'rxjs';\r\n\r\nexport abstract class ExercisePagingService<T extends Exercise> extends PagingService<T> {\r\n    protected constructor(\r\n        protected http: HttpClient,\r\n        protected resourceUrl: string,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Allows to search for exercises matching the given criteria\r\n     * @param pageable the search settings like search term and sort order\r\n     * @param options special parameters for exercise search:\r\n     * - isCourseFilter if course exercises should be included\r\n     * - isExamFilter if exam exercises should be included\r\n     * - programmingLanguage set to a language if only programming exercises of this language should be included. undefined for other exercise types.\r\n     */\r\n    public override search(\r\n        pageable: SearchTermPageableSearch,\r\n        options: { isCourseFilter: boolean; isExamFilter: boolean; programmingLanguage?: ProgrammingLanguage },\r\n    ): Observable<SearchResult<T>> {\r\n        let params = this.createHttpParams(pageable);\r\n        params = params.set('isCourseFilter', String(options.isCourseFilter)).set('isExamFilter', String(options.isExamFilter));\r\n        if (options.programmingLanguage) {\r\n            params = params.set('programmingLanguage', options.programmingLanguage);\r\n        }\r\n        return this.http.get(`${this.resourceUrl}`, { params, observe: 'response' }).pipe(map((resp: HttpResponse<SearchResult<T>>) => resp && resp.body!));\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\nimport { FileUploadExercise } from 'app/entities/file-upload-exercise.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileUploadExercisePagingService extends ExercisePagingService<FileUploadExercise> {\r\n    private static readonly RESOURCE_URL = 'api/fileupload/file-upload-exercises';\r\n\r\n    constructor() {\r\n        const http = inject(HttpClient);\r\n\r\n        super(http, FileUploadExercisePagingService.RESOURCE_URL);\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ModelingExercise } from 'app/entities/modeling-exercise.model';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ModelingExercisePagingService extends ExercisePagingService<ModelingExercise> {\r\n    private static readonly RESOURCE_URL = 'api/modeling/modeling-exercises';\r\n\r\n    constructor() {\r\n        const http = inject(HttpClient);\r\n\r\n        super(http, ModelingExercisePagingService.RESOURCE_URL);\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProgrammingExercisePagingService extends ExercisePagingService<ProgrammingExercise> {\r\n    public static readonly RESOURCE_URL = 'api/programming/programming-exercises';\r\n\r\n    constructor() {\r\n        const http = inject(HttpClient);\r\n\r\n        super(http, ProgrammingExercisePagingService.RESOURCE_URL);\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { ProgrammingExercise } from 'app/entities/programming/programming-exercise.model';\r\nimport { ProgrammingExercisePagingService } from 'app/exercises/programming/manage/services/programming-exercise-paging.service';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeAnalysisPagingService extends ExercisePagingService<ProgrammingExercise> {\r\n    constructor() {\r\n        const http = inject(HttpClient);\r\n\r\n        super(http, ProgrammingExercisePagingService.RESOURCE_URL + '/with-sca');\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuizExercisePagingService extends ExercisePagingService<QuizExercise> {\r\n    private static readonly RESOURCE_URL = 'api/quiz/quiz-exercises';\r\n\r\n    constructor() {\r\n        const http = inject(HttpClient);\r\n\r\n        super(http, QuizExercisePagingService.RESOURCE_URL);\r\n    }\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { TextExercise } from 'app/entities/text/text-exercise.model';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TextExercisePagingService extends ExercisePagingService<TextExercise> {\r\n    private static readonly RESOURCE_URL = 'api/text/text-exercises';\r\n\r\n    constructor() {\r\n        const http = inject(HttpClient);\r\n        super(http, TextExercisePagingService.RESOURCE_URL);\r\n    }\r\n}\r\n", "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\n\r\n@Pipe({ name: 'courseTitle' })\r\nexport class ExerciseCourseTitlePipe implements PipeTransform {\r\n    /**\r\n     * Returns the course title of the exercise via the exerciseGroup or the usual course member\r\n     *\r\n     * @param exercise for which the course title should be retrieved\r\n     * @returns title of the exercise course\r\n     */\r\n    transform(exercise: Exercise): string {\r\n        return exercise?.exerciseGroup?.exam?.course?.title || exercise?.course?.title || '';\r\n    }\r\n}\r\n", "import { Component, Injector, Input, OnInit, inject } from '@angular/core';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ProgrammingExercise, ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { FileUploadExercisePagingService } from 'app/exercises/file-upload/manage/file-upload-exercise-paging.service';\r\nimport { ModelingExercisePagingService } from 'app/exercises/modeling/manage/modeling-exercise-paging.service';\r\nimport { CodeAnalysisPagingService } from 'app/exercises/programming/manage/services/code-analysis-paging.service';\r\nimport { ProgrammingExercisePagingService } from 'app/exercises/programming/manage/services/programming-exercise-paging.service';\r\nimport { QuizExercisePagingService } from 'app/exercises/quiz/manage/quiz-exercise-paging.service';\r\nimport { ExercisePagingService } from 'app/exercises/shared/manage/exercise-paging.service';\r\nimport { TextExercisePagingService } from 'app/exercises/text/manage/text-exercise/text-exercise-paging.service';\r\nimport { ImportComponent } from 'app/shared/import/import.component';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbHighlight, NgbPagination } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { ExerciseCourseTitlePipe } from 'app/shared/pipes/exercise-course-title.pipe';\r\n\r\nconst DEFAULT_SORT_COLUMN = 'ID';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-import',\r\n    templateUrl: './exercise-import.component.html',\r\n    imports: [TranslateDirective, FormsModule, SortDirective, SortByDirective, FaIconComponent, NgbHighlight, ButtonComponent, NgbPagination, ExerciseCourseTitlePipe],\r\n})\r\nexport class ExerciseImportComponent extends ImportComponent<Exercise> implements OnInit {\r\n    private injector = inject(Injector);\r\n\r\n    readonly ExerciseType = ExerciseType;\r\n\r\n    @Input() exerciseType?: ExerciseType;\r\n\r\n    /**\r\n     * The programming language is only set when filtering for exercises with SCA enabled.\r\n     * In this case we only want to display exercises with the given language\r\n     */\r\n    @Input()\r\n    programmingLanguage?: ProgrammingLanguage;\r\n\r\n    isCourseFilter = true;\r\n    isExamFilter = true;\r\n\r\n    titleKey: string;\r\n\r\n    constructor() {\r\n        // The exercise import component does not know yet which paging service to use\r\n        // This gets determined based on the exercise type, which is not set when invoking the constructor\r\n        // Therefore we temporally use this empty paging service which directly gets overwritten in ngOnInit().\r\n        super(undefined);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.exerciseType) {\r\n            return;\r\n        }\r\n        this.pagingService = this.getPagingService();\r\n        if (this.programmingLanguage) {\r\n            this.titleKey = 'artemisApp.programmingExercise.configureGrading.categories.importLabel';\r\n        } else {\r\n            this.titleKey =\r\n                this.exerciseType === ExerciseType.FILE_UPLOAD ? `artemisApp.fileUploadExercise.home.importLabel` : `artemisApp.${this.exerciseType}Exercise.home.importLabel`;\r\n        }\r\n\r\n        super.ngOnInit();\r\n    }\r\n\r\n    private getPagingService(): ExercisePagingService<Exercise> {\r\n        switch (this.exerciseType) {\r\n            case ExerciseType.MODELING:\r\n                return this.injector.get(ModelingExercisePagingService);\r\n            case ExerciseType.PROGRAMMING:\r\n                if (this.programmingLanguage) {\r\n                    return this.injector.get(CodeAnalysisPagingService);\r\n                }\r\n                return this.injector.get(ProgrammingExercisePagingService);\r\n            case ExerciseType.QUIZ:\r\n                return this.injector.get(QuizExercisePagingService);\r\n            case ExerciseType.TEXT:\r\n                return this.injector.get(TextExercisePagingService);\r\n            case ExerciseType.FILE_UPLOAD:\r\n                return this.injector.get(FileUploadExercisePagingService);\r\n            default:\r\n                throw new Error('Unsupported exercise type: ' + this.exerciseType);\r\n        }\r\n    }\r\n\r\n    protected createOptions(): object {\r\n        return { isCourseFilter: this.isCourseFilter, isExamFilter: this.isExamFilter, programmingLanguage: this.programmingLanguage };\r\n    }\r\n\r\n    override set sortedColumn(sortedColumn: string) {\r\n        if (sortedColumn === 'COURSE_TITLE') {\r\n            if (this.isExamFilter && !this.isCourseFilter) {\r\n                sortedColumn = 'EXAM_TITLE';\r\n            }\r\n            // sort by course / exam title is not possible if course and exam exercises are mixed\r\n        }\r\n        this.setSearchParam({ sortedColumn });\r\n    }\r\n\r\n    // When overriding the setter, we also need to override the getter.\r\n    // Otherwise typescript will always return undefined when using the getter.\r\n    override get sortedColumn(): string {\r\n        return this.state.sortedColumn;\r\n    }\r\n\r\n    onCourseFilterChange() {\r\n        this.isCourseFilter = !this.isCourseFilter;\r\n        this.resetSortOnFilterChange();\r\n        this.search.next();\r\n    }\r\n\r\n    onExamFilterChange() {\r\n        this.isExamFilter = !this.isExamFilter;\r\n        this.resetSortOnFilterChange();\r\n        this.search.next();\r\n    }\r\n\r\n    // reset to default search option when mixing course and exam exercises.\r\n    // This avoids exercises still being filtered out by the sortedColum even if the filter is not set.\r\n    private resetSortOnFilterChange() {\r\n        if (this.sortedColumn === 'COURSE_TITLE' || this.sortedColumn === 'EXAM_TITLE') {\r\n            this.sortedColumn = DEFAULT_SORT_COLUMN;\r\n        }\r\n    }\r\n\r\n    asProgrammingExercise(exercise: Exercise): ProgrammingExercise {\r\n        return exercise as ProgrammingExercise;\r\n    }\r\n}\r\n", "<div class=\"modal-body\">\r\n    <div class=\"form-group form-inline\">\r\n        <span jhiTranslate=\"artemisApp.exercise.import.search\"></span>:\r\n        <input class=\"form-control mx-2\" type=\"text\" name=\"searchExcercise\" [(ngModel)]=\"searchTerm\" />\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"courseFilter\" [checked]=\"isCourseFilter\" [disabled]=\"!isExamFilter\" (change)=\"onCourseFilterChange()\" />\r\n            <label class=\"form-check-label\" for=\"courseFilter\" jhiTranslate=\"artemisApp.exercise.import.searchInCourses\"></label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"examFilter\" [checked]=\"isExamFilter\" [disabled]=\"!isCourseFilter\" (change)=\"onExamFilterChange()\" />\r\n            <label class=\"form-check-label\" for=\"examFilter\" jhiTranslate=\"artemisApp.exercise.import.searchInExams\"></label>\r\n        </div>\r\n        @if (loading) {\r\n            <span class=\"ms-3\" jhiTranslate=\"artemisApp.exercise.import.loading\"></span>\r\n        }\r\n    </div>\r\n    <table class=\"table table-striped flex\">\r\n        <thead class=\"thead-dark\">\r\n            <tr jhiSort [(predicate)]=\"sortedColumn\" [(ascending)]=\"listSorting\" (sortChange)=\"sortRows()\" class=\"flex-row\">\r\n                <th jhiSortBy=\"ID\" class=\"col-1\">\r\n                    <span>#</span>\r\n                    <fa-icon [icon]=\"faSort\" />\r\n                </th>\r\n                <th jhiSortBy=\"TITLE\" class=\"col-4\">\r\n                    <span jhiTranslate=\"artemisApp.exercise.import.table.title\"></span>\r\n                    <fa-icon [icon]=\"faSort\" />\r\n                </th>\r\n                @if (this.exerciseType === ExerciseType.PROGRAMMING) {\r\n                    <th jhiSortBy=\"PROGRAMMING_LANGUAGE\" class=\"col-2\">\r\n                        <span jhiTranslate=\"artemisApp.exercise.import.table.language\"></span>\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    </th>\r\n                }\r\n                <th jhiSortBy=\"COURSE_TITLE\" class=\"col-4\">\r\n                    <span [hidden]=\"!isCourseFilter\" jhiTranslate=\"artemisApp.exercise.import.table.course\"></span>\r\n                    <span [hidden]=\"!(isCourseFilter && isExamFilter)\"> | </span>\r\n                    <span [hidden]=\"!isExamFilter\" jhiTranslate=\"artemisApp.exercise.import.table.exam\"></span>\r\n                    @if (!(isCourseFilter && isExamFilter)) {\r\n                        <fa-icon [icon]=\"faSort\" />\r\n                    }\r\n                </th>\r\n                <th class=\"col-2\" [hidden]=\"!(isCourseFilter && isExamFilter)\">\r\n                    <span jhiTranslate=\"artemisApp.exercise.import.table.examQuestion\"></span>\r\n                </th>\r\n                <th class=\"col-1\"></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @for (exercise of content.resultsOnPage; track trackId($index, exercise)) {\r\n                <tr [class]=\"'flex-row exercise-' + exercise.id\">\r\n                    <td class=\"col-1\">\r\n                        <span [class.ngb-highlight]=\"'' + exercise.id === searchTerm\"> {{ exercise.id }}</span>\r\n                    </td>\r\n                    <td class=\"text-break col-4\">\r\n                        <ngb-highlight [result]=\"exercise.title\" [term]=\"searchTerm\" />\r\n                    </td>\r\n                    @if (exerciseType === ExerciseType.PROGRAMMING) {\r\n                        <td class=\"text-break col-3\">\r\n                            <span>{{ asProgrammingExercise(exercise)?.programmingLanguage }}</span>\r\n                        </td>\r\n                    }\r\n                    <td class=\"text-break col-4\">\r\n                        <ngb-highlight [result]=\"exercise | courseTitle\" [term]=\"searchTerm\" />\r\n                    </td>\r\n                    <td class=\"col-2\" [hidden]=\"!(isCourseFilter && isExamFilter)\">\r\n                        <div style=\"text-align: center; vertical-align: middle\">\r\n                            @if (exercise.exerciseGroup) {\r\n                                <fa-icon [icon]=\"faCheck\" />\r\n                            }\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"col-1\">\r\n                        <jhi-button (onClick)=\"selectImport(exercise)\" class=\"import\" [title]=\"'artemisApp.exercise.import.table.doImport'\" />\r\n                    </td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n    <div class=\"d-flex justify-content-between p-2\">\r\n        <ngb-pagination [maxSize]=\"10\" [rotate]=\"true\" [collectionSize]=\"total\" [(page)]=\"state.page\" [pageSize]=\"state.pageSize\" (pageChange)=\"onPageChange($event)\" />\r\n    </div>\r\n</div>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Exercise, ExerciseType } from 'app/entities/exercise.model';\r\nimport { ProgrammingExerciseBuildConfig } from 'app/entities/programming/programming-exercise-build.config';\r\nimport { MAX_FILE_SIZE } from 'app/shared/constants/input.constants';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { ProgrammingExercise, copyBuildConfigFromExerciseJson } from 'app/entities/programming/programming-exercise.model';\r\nimport JSZip from 'jszip';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-import-from-file',\r\n    templateUrl: './exercise-import-from-file.component.html',\r\n    imports: [ButtonComponent, HelpIconComponent],\r\n})\r\nexport class ExerciseImportFromFileComponent implements OnInit {\r\n    private activeModal = inject(NgbActiveModal);\r\n    private alertService = inject(AlertService);\r\n\r\n    @Input() exerciseType: ExerciseType;\r\n    @Input() exercise: Exercise;\r\n\r\n    titleKey: string;\r\n    fileForImport?: File;\r\n    //Icons\r\n    faUpload = faUpload;\r\n\r\n    ngOnInit(): void {\r\n        this.titleKey =\r\n            this.exerciseType === ExerciseType.FILE_UPLOAD ? `artemisApp.fileUploadExercise.importFromFile.title` : `artemisApp.${this.exerciseType}Exercise.importFromFile.title`;\r\n    }\r\n\r\n    /** uploads the zip file and extracts the minimal information required to fill the exercise-update component, it's async, so one can conveniently use await **/\r\n    async uploadExercise() {\r\n        const jsonRegex = new RegExp('.*.json');\r\n        const zip = await JSZip.loadAsync(this.fileForImport as File);\r\n        const jsonFiles = zip.file(jsonRegex);\r\n        if (jsonFiles.length !== 1) {\r\n            this.alertService.error('artemisApp.programmingExercise.importFromFile.noExerciseDetailsJsonAtRootLevel');\r\n            return;\r\n        }\r\n        const exerciseDetails = await jsonFiles[0].async('string');\r\n\r\n        const exerciseJson = JSON.parse(exerciseDetails) as Exercise;\r\n        if (exerciseJson.type !== this.exerciseType) {\r\n            this.alertService.error('artemisApp.exercise.importFromFile.exerciseTypeDoesntMatch');\r\n            return;\r\n        }\r\n        switch (this.exerciseType) {\r\n            case ExerciseType.PROGRAMMING:\r\n                this.exercise = JSON.parse(exerciseDetails as string) as ProgrammingExercise;\r\n                const progEx = this.exercise as ProgrammingExercise;\r\n                // This is needed to make sure that old exported programming exercises can be imported\r\n                if (!progEx.buildConfig) {\r\n                    progEx.buildConfig = copyBuildConfigFromExerciseJson(exerciseJson as ProgrammingExerciseBuildConfig);\r\n                }\r\n                if (progEx.auxiliaryRepositories) {\r\n                    progEx.auxiliaryRepositories!.forEach((repo, index) => {\r\n                        progEx.auxiliaryRepositories![index].id = undefined;\r\n                    });\r\n                }\r\n                this.exercise = progEx;\r\n                break;\r\n            default:\r\n                this.alertService.error('artemisApp.exercise.importFromFile.notSupportedExerciseType', {\r\n                    exerciseType: this.exerciseType,\r\n                });\r\n                return;\r\n        }\r\n        this.exercise.id = undefined;\r\n        this.exercise.zipFileForImport = this.fileForImport as File;\r\n\r\n        this.openImport(this.exercise);\r\n    }\r\n\r\n    /** sets the zip file that is selected in the file input dialog **/\r\n    setFileForExerciseImport(event: any): void {\r\n        if (event.target.files.length) {\r\n            const fileList: FileList = event.target.files;\r\n            if (fileList.length != 1) {\r\n                this.alertService.error('artemisApp.programmingExercise.importFromFile.fileCountError');\r\n                return;\r\n            }\r\n            const exerciseFile = fileList[0];\r\n            if (!exerciseFile.name.toLowerCase().endsWith('.zip')) {\r\n                this.alertService.error('artemisApp.programmingExercise.importFromFile.fileExtensionError');\r\n                return;\r\n            } else if (exerciseFile.size > MAX_FILE_SIZE) {\r\n                this.alertService.error('artemisApp.programmingExercise.importFromFile.fileTooBigError', { fileName: exerciseFile.name });\r\n                return;\r\n            } else {\r\n                this.fileForImport = exerciseFile;\r\n            }\r\n        }\r\n    }\r\n\r\n    openImport(exercise: Exercise) {\r\n        this.activeModal.close(exercise);\r\n    }\r\n}\r\n", "<div class=\"modal-body\">\r\n    <input type=\"file\" accept=\"application/zip\" (change)=\"setFileForExerciseImport($event)\" style=\"margin-right: -10px; padding-right: -10px\" />\r\n    <jhi-button\r\n        id=\"upload-exercise-btn\"\r\n        [disabled]=\"fileForImport === undefined\"\r\n        [icon]=\"faUpload\"\r\n        [title]=\"'artemisApp.programmingExercise.importFromFile.uploadForImport'\"\r\n        (onClick)=\"uploadExercise()\"\r\n    />\r\n    <jhi-help-icon text=\"artemisApp.programmingExercise.importFromFile.description\" style=\"margin-left: 15px\" />\r\n</div>\r\n", "import { Component, Input } from '@angular/core';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { NgbNav, NgbNavContent, NgbNavItem, NgbNavItemRole, NgbNavLink, NgbNavLinkBase, NgbNavOutlet } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ExerciseImportComponent } from './exercise-import.component';\r\nimport { ExerciseImportFromFileComponent } from './from-file/exercise-import-from-file.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-import-tabs',\r\n    templateUrl: './exercise-import-tabs.component.html',\r\n    imports: [\r\n        NgbNav,\r\n        NgbNavItem,\r\n        NgbNavItemRole,\r\n        NgbNavLink,\r\n        NgbNavLinkBase,\r\n        TranslateDirective,\r\n        NgbNavContent,\r\n        ExerciseImportComponent,\r\n        ExerciseImportFromFileComponent,\r\n        NgbNavOutlet,\r\n    ],\r\n})\r\nexport class ExerciseImportTabsComponent {\r\n    activeTab = 1;\r\n    @Input() exerciseType: ExerciseType;\r\n}\r\n", "<ul ngbNav #nav=\"ngbNav\" [(activeId)]=\"activeTab\" class=\"nav-tabs\">\r\n    <li [ngbNavItem]=\"1\">\r\n        <a id=\"tab1\" ngbNavLink jhiTranslate=\"artemisApp.exercise.import.tabTitle\"></a>\r\n        <ng-template ngbNavContent>\r\n            <jhi-exercise-import [exerciseType]=\"exerciseType\" />\r\n        </ng-template>\r\n    </li>\r\n    <li id=\"tab2\" [ngbNavItem]=\"2\">\r\n        <a ngbNavLink jhiTranslate=\"artemisApp.exercise.importFromFile.tabTitle\"></a>\r\n        <ng-template ngbNavContent>\r\n            <jhi-exercise-import-from-file [exerciseType]=\"exerciseType\" />\r\n        </ng-template>\r\n    </li>\r\n</ul>\r\n\r\n<div [ngbNavOutlet]=\"nav\" class=\"mt-2\"></div>\r\n", "import { Component, Input, OnInit, inject } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ExerciseType } from 'app/entities/exercise.model';\r\nimport { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { ExerciseImportTabsComponent } from '../exercise-import-tabs.component';\r\nimport { ExerciseImportComponent } from '../exercise-import.component';\r\n\r\n@Component({\r\n    selector: 'jhi-exercise-import-wrapper',\r\n    templateUrl: './exercise-import-wrapper.component.html',\r\n    imports: [FormsModule, TranslateDirective, ExerciseImportTabsComponent, ExerciseImportComponent],\r\n})\r\nexport class ExerciseImportWrapperComponent implements OnInit {\r\n    private activeModal = inject(NgbActiveModal);\r\n\r\n    readonly ExerciseType = ExerciseType;\r\n\r\n    @Input()\r\n    exerciseType: ExerciseType;\r\n    titleKey: string;\r\n    @Input()\r\n    programmingLanguage?: ProgrammingLanguage;\r\n\r\n    ngOnInit(): void {\r\n        if (this.programmingLanguage) {\r\n            this.titleKey = 'artemisApp.programmingExercise.configureGrading.categories.importLabel';\r\n        } else if (this.exerciseType === ExerciseType.FILE_UPLOAD) {\r\n            this.titleKey = 'artemisApp.fileUploadExercise.home.importLabel';\r\n        } else {\r\n            this.titleKey = `artemisApp.${this.exerciseType}Exercise.home.importLabel`;\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.activeModal.dismiss('cancel');\r\n    }\r\n}\r\n", "<form>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" jhiTranslate=\"{{ titleKey }}\"></h4>\r\n        <button type=\"button\" id=\"cancel-btn\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clear()\"></button>\r\n    </div>\r\n    <!-- imports from file are currently only supported for programming exercises, for the other exercise types we need to show the import dialog as it was before -->\r\n    @if (exerciseType === ExerciseType.PROGRAMMING && !programmingLanguage) {\r\n        <jhi-exercise-import-tabs id=\"exercise-import-tabs\" [exerciseType]=\"exerciseType\" />\r\n    }\r\n    @if (exerciseType !== ExerciseType.PROGRAMMING || programmingLanguage) {\r\n        <jhi-exercise-import id=\"exercise-import\" [exerciseType]=\"exerciseType\" [programmingLanguage]=\"programmingLanguage\" />\r\n    }\r\n</form>\r\n"],
  "mappings": "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",
  "names": ["ExercisePagingService", "PagingService", "http", "resourceUrl", "constructor", "search", "pageable", "options", "params", "createHttpParams", "set", "String", "isCourseFilter", "isExamFilter", "programmingLanguage", "get", "observe", "pipe", "map", "resp", "body", "FileUploadExercisePagingService", "ExercisePagingService", "RESOURCE_URL", "constructor", "http", "inject", "HttpClient", "factory", "\u0275fac", "providedIn", "ModelingExercisePagingService", "ExercisePagingService", "RESOURCE_URL", "constructor", "http", "inject", "HttpClient", "factory", "\u0275fac", "providedIn", "ProgrammingExercisePagingService", "ExercisePagingService", "RESOURCE_URL", "constructor", "http", "inject", "HttpClient", "factory", "\u0275fac", "providedIn", "CodeAnalysisPagingService", "ExercisePagingService", "constructor", "http", "inject", "HttpClient", "ProgrammingExercisePagingService", "RESOURCE_URL", "factory", "\u0275fac", "providedIn", "QuizExercisePagingService", "ExercisePagingService", "RESOURCE_URL", "constructor", "http", "inject", "HttpClient", "factory", "\u0275fac", "providedIn", "TextExercisePagingService", "ExercisePagingService", "RESOURCE_URL", "constructor", "http", "inject", "HttpClient", "factory", "\u0275fac", "providedIn", "ExerciseCourseTitlePipe", "transform", "exercise", "exerciseGroup", "exam", "course", "title", "pure", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "faSort", "\u0275\u0275textInterpolate", "tmp_11_0", "asProgrammingExercise", "exercise_r3", "programmingLanguage", "faCheck", "\u0275\u0275template", "ExerciseImportComponent_For_69_Conditional_14_Template", "ExerciseImportComponent_For_69_Conditional_25_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "selectImport", "\u0275\u0275classMap", "id", "\u0275\u0275classProp", "searchTerm", "\u0275\u0275textInterpolate1", "title", "\u0275\u0275conditional", "exerciseType", "ExerciseType", "PROGRAMMING", "\u0275\u0275pipeBind1", "isCourseFilter", "isExamFilter", "exerciseGroup", "DEFAULT_SORT_COLUMN", "ExerciseImportComponent", "ImportComponent", "injector", "inject", "Injector", "titleKey", "constructor", "undefined", "ngOnInit", "pagingService", "getPagingService", "FILE_UPLOAD", "MODELING", "get", "ModelingExercisePagingService", "CodeAnalysisPagingService", "ProgrammingExercisePagingService", "QUIZ", "QuizExercisePagingService", "TEXT", "TextExercisePagingService", "FileUploadExercisePagingService", "Error", "createOptions", "sortedColumn", "setSearchParam", "state", "onCourseFilterChange", "resetSortOnFilterChange", "search", "next", "onExamFilterChange", "exercise", "selectors", "inputs", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "ExerciseImportComponent_Conditional_22_Template", "listSorting", "sortRows", "ExerciseImportComponent_Conditional_45_Template", "ExerciseImportComponent_Conditional_55_Template", "\u0275\u0275repeaterCreate", "ExerciseImportComponent_For_69_Template", "trackId", "page", "onPageChange", "\u0275\u0275twoWayProperty", "loading", "\u0275\u0275repeater", "content", "resultsOnPage", "total", "pageSize", "TranslateDirective", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "SortDirective", "SortByDirective", "FaIconComponent", "NgbHighlight", "ButtonComponent", "NgbPagination", "ExerciseCourseTitlePipe", "encapsulation", "import_jszip", "ExerciseImportFromFileComponent", "activeModal", "inject", "NgbActiveModal", "alertService", "AlertService", "exerciseType", "exercise", "titleKey", "fileForImport", "faUpload", "ngOnInit", "ExerciseType", "FILE_UPLOAD", "uploadExercise", "__async", "jsonRegex", "RegExp", "jsonFiles", "JSZip", "loadAsync", "file", "length", "error", "exerciseDetails", "async", "exerciseJson", "JSON", "parse", "type", "PROGRAMMING", "progEx", "buildConfig", "copyBuildConfigFromExerciseJson", "auxiliaryRepositories", "forEach", "repo", "index", "id", "undefined", "zipFileForImport", "openImport", "setFileForExerciseImport", "event", "target", "files", "fileList", "exerciseFile", "name", "toLowerCase", "endsWith", "size", "MAX_FILE_SIZE", "fileName", "close", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275listener", "$event", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ButtonComponent", "HelpIconComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "exerciseType", "ExerciseImportTabsComponent", "activeTab", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275twoWayBindingSet", "\u0275\u0275resetView", "\u0275\u0275template", "ExerciseImportTabsComponent_ng_template_7_Template", "\u0275\u0275elementEnd", "ExerciseImportTabsComponent_ng_template_14_Template", "\u0275\u0275twoWayProperty", "nav_r3", "NgbNav", "NgbNavItem", "NgbNavItemRole", "NgbNavLink", "NgbNavLinkBase", "TranslateDirective", "NgbNavContent", "ExerciseImportComponent", "ExerciseImportFromFileComponent", "NgbNavOutlet", "encapsulation", "\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "exerciseType", "programmingLanguage", "ExerciseImportWrapperComponent", "activeModal", "inject", "NgbActiveModal", "ExerciseType", "titleKey", "ngOnInit", "FILE_UPLOAD", "clear", "dismiss", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275template", "ExerciseImportWrapperComponent_Conditional_10_Template", "ExerciseImportWrapperComponent_Conditional_11_Template", "\u0275\u0275propertyInterpolate", "\u0275\u0275conditional", "PROGRAMMING", "FormsModule", "\u0275NgNoValidate", "NgControlStatusGroup", "NgForm", "TranslateDirective", "ExerciseImportTabsComponent", "ExerciseImportComponent", "encapsulation"]
}
