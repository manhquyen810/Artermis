{
  "version": 3,
  "sources": ["src/main/webapp/app/exercises/quiz/manage/statistics/multiple-choice-question-statistic/multiple-choice-question-statistic.component.ts", "src/main/webapp/app/exercises/quiz/manage/statistics/multiple-choice-question-statistic/multiple-choice-question-statistic.component.html"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { QuizStatisticUtil } from 'app/exercises/quiz/shared/quiz-statistic-util.service';\r\nimport { ArtemisMarkdownService } from 'app/shared/markdown.service';\r\nimport { MultipleChoiceQuestionStatistic } from 'app/entities/quiz/multiple-choice-question-statistic.model';\r\nimport { MultipleChoiceQuestion } from 'app/entities/quiz/multiple-choice-question.model';\r\nimport { QuizExercise } from 'app/entities/quiz/quiz-exercise.model';\r\nimport { QuestionStatisticComponent, blueColor, greenColor, redColor } from 'app/exercises/quiz/manage/statistics/question-statistic.component';\r\nimport { faCheckCircle, faSync, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { BarChartModule } from '@swimlane/ngx-charts';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { QuizStatisticsFooterComponent } from '../quiz-statistics-footer/quiz-statistics-footer.component';\r\n\r\n@Component({\r\n    selector: 'jhi-multiple-choice-question-statistic',\r\n    templateUrl: './multiple-choice-question-statistic.component.html',\r\n    styleUrls: ['../quiz-point-statistic/quiz-point-statistic.component.scss', '../../../../../shared/chart/vertical-bar-chart.scss'],\r\n    providers: [QuizStatisticUtil],\r\n    imports: [TranslateDirective, BarChartModule, FaIconComponent, QuizStatisticsFooterComponent],\r\n})\r\nexport class MultipleChoiceQuestionStatisticComponent extends QuestionStatisticComponent {\r\n    private artemisMarkdown = inject(ArtemisMarkdownService);\r\n    declare question: MultipleChoiceQuestion;\r\n\r\n    answerTextRendered: SafeHtml[];\r\n\r\n    // Icons\r\n    faSync = faSync;\r\n    faCheckCircle = faCheckCircle;\r\n    faTimesCircle = faTimesCircle;\r\n\r\n    loadQuiz(quiz: QuizExercise, refresh: boolean) {\r\n        const updatedQuestion = super.loadQuizCommon(quiz);\r\n        if (!updatedQuestion) {\r\n            return;\r\n        }\r\n\r\n        // load Layout only at the opening (not if the websocket refreshed the data)\r\n        if (!refresh) {\r\n            // render Markdown-text\r\n            this.questionTextRendered = this.artemisMarkdown.safeHtmlForMarkdown(this.question.text);\r\n            this.answerTextRendered = this.question.answerOptions!.map((answer) => this.artemisMarkdown.safeHtmlForMarkdown(answer.text));\r\n            this.loadLayout();\r\n        }\r\n        this.loadData();\r\n    }\r\n\r\n    /**\r\n     * build the Chart-Layout based on the the Json-entity (questionStatistic)\r\n     */\r\n    loadLayout() {\r\n        this.resetLabelsColors();\r\n        const answerOptions = this.question.answerOptions!;\r\n\r\n        // set label and background-Color based on the AnswerOptions\r\n        answerOptions.forEach((_answerOption, i) => {\r\n            this.labels.push(this.getLetter(i) + '.');\r\n            this.backgroundColors.push(blueColor);\r\n        });\r\n        this.addLastBarLayout(this.question.answerOptions!.length);\r\n        this.loadInvalidLayout(this.question.answerOptions!);\r\n        this.loadSolutionLayout();\r\n    }\r\n\r\n    /**\r\n     * load Layout for showSolution\r\n     */\r\n    loadSolutionLayout() {\r\n        // add correct-text to the label based on the language\r\n        const correctLabel = this.translateService.instant('artemisApp.showStatistic.questionStatistic.correct');\r\n        const incorrectLabel = this.translateService.instant('artemisApp.showStatistic.questionStatistic.incorrect');\r\n        this.question.answerOptions!.forEach((answerOption, i) => {\r\n            if (answerOption.isCorrect === true) {\r\n                // check if the answer is valid and if true: change solution-label and -color\r\n                if (!answerOption.invalid) {\r\n                    this.backgroundSolutionColors[i] = greenColor;\r\n                    this.solutionLabels[i] = this.getLetter(i) + '. (' + correctLabel + ')';\r\n                }\r\n            }\r\n            if (answerOption.isCorrect === false) {\r\n                // check if the answer is valid and if false: change solution-label and -color\r\n                if (!answerOption.invalid) {\r\n                    this.backgroundSolutionColors[i] = redColor;\r\n                    this.solutionLabels[i] = this.getLetter(i) + '. (' + incorrectLabel + ')';\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * load the Data from the Json-entity to the chart: myChart\r\n     */\r\n    loadData() {\r\n        this.resetData();\r\n\r\n        // set data based on the answerCounters for each AnswerOption\r\n        this.question.answerOptions!.forEach((answerOption) => {\r\n            const answerOptionCounter = (this.questionStatistic as MultipleChoiceQuestionStatistic).answerCounters!.filter(\r\n                (answerCounter) => answerOption.id === answerCounter.answer!.id,\r\n            )[0];\r\n            this.addData(answerOptionCounter.ratedCounter!, answerOptionCounter.unRatedCounter!);\r\n        });\r\n        this.updateData();\r\n    }\r\n}\r\n", "@if (quizExercise) {\r\n    <div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-8 offset-md-2 text-center\">\r\n                <h3>{{ quizExercise.title }}</h3>\r\n                <div class=\"row\">\r\n                    @if (question) {\r\n                        <div class=\"col-md-4 text-start\">\r\n                            <h3>\r\n                                {{ question.title }}\r\n                                @if (question.invalid) {\r\n                                    <span class=\"invalid-question\" jhiTranslate=\"artemisApp.showStatistic.invalid\"></span>\r\n                                }\r\n                            </h3>\r\n                            <h4 [innerHTML]=\"questionTextRendered\"></h4>\r\n                            @if (question.answerOptions) {\r\n                                <ol type=\"A\">\r\n                                    @for (answer of question.answerOptions; track answer; let i = $index) {\r\n                                        <li>\r\n                                            <span class=\"d-flex\" [innerHTML]=\"answerTextRendered[i]\"></span>&nbsp;\r\n                                            @if (answer.invalid) {\r\n                                                <span class=\"invalid-question\" jhiTranslate=\"artemisApp.showStatistic.invalid\"></span>\r\n                                            }\r\n                                        </li>\r\n                                    }\r\n                                </ol>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <div #containerRef class=\"col-md-8 text-center\">\r\n                        <p>&nbsp;</p>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-7 text-start\">\r\n                                <p id=\"text\" class=\"chart-title-text\">\r\n                                    @if (rated) {\r\n                                        <span jhiTranslate=\"artemisApp.showStatistic.questionStatistic.titleRated\"></span>\r\n                                    }\r\n                                    @if (!rated) {\r\n                                        <span jhiTranslate=\"artemisApp.showStatistic.questionStatistic.titleUnrated\"></span>\r\n                                    }\r\n                                </p>\r\n                            </div>\r\n                            <div class=\"col-md-5 text-end\">\r\n                                <p class=\"chart-title-text\">\r\n                                    <span>{{ participants }} </span><span jhiTranslate=\"artemisApp.showStatistic.participants\"></span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <ngx-charts-bar-vertical\r\n                            [view]=\"[containerRef.offsetWidth, 350]\"\r\n                            [results]=\"ngxData\"\r\n                            [scheme]=\"ngxColor\"\r\n                            [showDataLabel]=\"true\"\r\n                            [showXAxisLabel]=\"true\"\r\n                            [showYAxisLabel]=\"true\"\r\n                            [xAxisLabel]=\"xAxisLabel\"\r\n                            [yAxisLabel]=\"yAxisLabel\"\r\n                            [xAxis]=\"true\"\r\n                            [yAxis]=\"true\"\r\n                            [yScaleMax]=\"maxScale\"\r\n                            [tooltipDisabled]=\"true\"\r\n                            [rotateXAxisTicks]=\"true\"\r\n                            [maxXAxisTickLength]=\"17\"\r\n                            [dataLabelFormatting]=\"bindFormatting\"\r\n                            [roundEdges]=\"false\"\r\n                        />\r\n                        <div class=\"col-md-12 text-center button-row\">\r\n                            <button (click)=\"switchSolution()\" type=\"button\" class=\"btn btn-primary\">\r\n                                @if (showSolution) {\r\n                                    <fa-icon [icon]=\"faCheckCircle\" />\r\n                                }\r\n                                @if (!showSolution) {\r\n                                    <fa-icon [icon]=\"faTimesCircle\" />\r\n                                }\r\n                                @if (showSolution) {\r\n                                    <span jhiTranslate=\"artemisApp.showStatistic.hideSolution\"></span>\r\n                                }\r\n                                @if (!showSolution) {\r\n                                    <span jhiTranslate=\"artemisApp.showStatistic.showSolution\"></span>\r\n                                }\r\n                            </button>\r\n                            <button (click)=\"switchRated()\" type=\"button\" class=\"btn btn-primary\">\r\n                                <fa-icon [icon]=\"faSync\" />\r\n                                @if (rated) {\r\n                                    <span jhiTranslate=\"artemisApp.showStatistic.switchToUnrated\"></span>\r\n                                }\r\n                                @if (!rated) {\r\n                                    <span jhiTranslate=\"artemisApp.showStatistic.switchToRated\"></span>\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                        <p>&nbsp;</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <jhi-quiz-statistics-footer />\r\n    </div>\r\n}\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275text", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_12_Conditional_9_For_4_Conditional_5_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r3", "answerTextRendered", "\u0275$index_41_r3", "\u0275\u0275sanitizeHtml", "\u0275\u0275conditional", "answer_r2", "invalid", "\u0275\u0275repeaterCreate", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_12_Conditional_9_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "question", "answerOptions", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_12_Conditional_5_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_12_Conditional_9_Template", "\u0275\u0275textInterpolate1", "title", "questionTextRendered", "faCheckCircle", "faTimesCircle", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_12_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_25_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_26_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "switchSolution", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_46_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_47_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_48_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_49_Template", "switchRated", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_55_Template", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Conditional_56_Template", "\u0275\u0275textInterpolate", "quizExercise", "rated", "participants", "\u0275\u0275pureFunction1", "_c0", "containerRef_r5", "offsetWidth", "ngxData", "ngxColor", "xAxisLabel", "yAxisLabel", "maxScale", "bindFormatting", "showSolution", "faSync", "MultipleChoiceQuestionStatisticComponent", "QuestionStatisticComponent", "artemisMarkdown", "inject", "ArtemisMarkdownService", "loadQuiz", "quiz", "refresh", "loadQuizCommon", "safeHtmlForMarkdown", "text", "map", "answer", "loadLayout", "loadData", "resetLabelsColors", "forEach", "_answerOption", "i", "labels", "push", "getLetter", "backgroundColors", "blueColor", "addLastBarLayout", "length", "loadInvalidLayout", "loadSolutionLayout", "correctLabel", "translateService", "instant", "incorrectLabel", "answerOption", "isCorrect", "backgroundSolutionColors", "greenColor", "solutionLabels", "redColor", "resetData", "answerOptionCounter", "questionStatistic", "answerCounters", "filter", "answerCounter", "id", "addData", "ratedCounter", "unRatedCounter", "updateData", "__ngFactoryType__", "selectors", "features", "\u0275\u0275ProvidersFeature", "QuizStatisticUtil", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "MultipleChoiceQuestionStatisticComponent_Conditional_0_Template", "TranslateDirective", "BarChartModule", "BarVerticalComponent", "FaIconComponent", "QuizStatisticsFooterComponent", "styles"]
}
