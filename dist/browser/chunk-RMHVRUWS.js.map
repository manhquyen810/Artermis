{
  "version": 3,
  "sources": ["src/main/webapp/app/course/competencies/import/import-course-competencies.component.ts", "src/main/webapp/app/course/competencies/import/import-competencies-table.component.ts", "src/main/webapp/app/course/competencies/import/import-competencies-table.component.html", "src/main/webapp/app/course/competencies/import/competency-search.component.ts", "src/main/webapp/app/course/competencies/import/competency-search.component.html"],
  "sourcesContent": ["import { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\r\nimport { CourseCompetencyFilter, PageableSearch, SearchResult, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { CourseCompetency, CourseCompetencyType } from 'app/entities/competency.model';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\nimport { SortService } from 'app/shared/service/sort.service';\r\nimport { onError } from 'app/shared/util/global.utils';\r\nimport { Component, HostListener, OnInit, inject } from '@angular/core';\r\nimport { faBan, faFileImport, faSave, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CourseCompetencyService } from 'app/course/competencies/course-competency.service';\r\n\r\n/**\r\n * An abstract component used to import course competencies. Its concrete implementations are\r\n * {@link ImportCompetenciesComponent} and {@link ImportPrerequisitesComponent}\r\n */\r\n@Component({\r\n    template: '',\r\n})\r\nexport abstract class ImportCourseCompetenciesComponent implements OnInit, ComponentCanDeactivate {\r\n    // this attribute has to be set when using the common template (import-course-competencies.component.html)\r\n    abstract entityType: string;\r\n    // set this attribute to hide the options to import relation\r\n    allowRelationImport = false;\r\n\r\n    courseId: number;\r\n    isLoading = false;\r\n    isSubmitted = false;\r\n    importRelations = true;\r\n    showAdvancedSearch = false;\r\n    disabledIds: number[] = [];\r\n    searchedCourseCompetencies: SearchResult<CourseCompetency> = { resultsOnPage: [], numberOfPages: 0 };\r\n    selectedCourseCompetencies: SearchResult<CourseCompetency> = { resultsOnPage: [], numberOfPages: 0 };\r\n\r\n    //filter and search objects for the course competency search.\r\n    filter: CourseCompetencyFilter = {\r\n        courseTitle: '',\r\n        description: '',\r\n        semester: '',\r\n        title: '',\r\n    };\r\n    search: PageableSearch = {\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortingOrder: SortingOrder.DESCENDING,\r\n        sortedColumn: 'ID',\r\n    };\r\n\r\n    //search object for the selected course competencies. As we don't want pagination page and pageSize are 0\r\n    selectedCourseCompetenciesSearch: PageableSearch = {\r\n        page: 0,\r\n        pageSize: 0,\r\n        sortingOrder: SortingOrder.DESCENDING,\r\n        sortedColumn: 'ID',\r\n    };\r\n\r\n    //Icons\r\n    protected readonly faBan = faBan;\r\n    protected readonly faSave = faSave;\r\n    protected readonly faFileImport = faFileImport;\r\n    protected readonly faTrash = faTrash;\r\n    //Other constants\r\n    protected readonly ButtonType = ButtonType;\r\n    //used for sorting of the selected course competencies\r\n    protected readonly columnMapping: { [key: string]: string } = {\r\n        ID: 'id',\r\n        TITLE: 'title',\r\n        DESCRIPTION: 'description',\r\n        COURSE_TITLE: 'course.title',\r\n        SEMESTER: 'course.semester',\r\n    };\r\n\r\n    protected readonly activatedRoute: ActivatedRoute = inject(ActivatedRoute);\r\n    protected readonly router: Router = inject(Router);\r\n    protected readonly courseCompetencyService: CourseCompetencyService = inject(CourseCompetencyService);\r\n    protected readonly alertService: AlertService = inject(AlertService);\r\n    private readonly translateService: TranslateService = inject(TranslateService);\r\n    private readonly sortingService: SortService = inject(SortService);\r\n\r\n    ngOnInit(): void {\r\n        this.courseId = Number(this.activatedRoute.snapshot.paramMap.get('courseId'));\r\n        // load competencies and prerequisites of this course to disable their import buttons\r\n        const courseCompetencySubscription = this.courseCompetencyService.getAllForCourse(this.courseId);\r\n        courseCompetencySubscription.subscribe({\r\n            next: (courseCompetenciesResponse) => {\r\n                const courseCompetencies = courseCompetenciesResponse.body ?? [];\r\n                this.disabledIds = courseCompetencies\r\n                    .flatMap((courseCompetency) => {\r\n                        switch (courseCompetency.type) {\r\n                            case CourseCompetencyType.COMPETENCY:\r\n                                return [courseCompetency.id];\r\n                            case CourseCompetencyType.PREREQUISITE:\r\n                                return [courseCompetency.id, courseCompetency.linkedCourseCompetency?.id];\r\n                        }\r\n                    })\r\n                    .filter((id): id is number => !!id);\r\n                this.performSearch();\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Submits the course competencies to import and if successful, should navigate back\r\n     */\r\n    abstract onSubmit(): void;\r\n\r\n    /**\r\n     * Callback that updates the filter for the competency search and fetches new data from the server.\r\n     *\r\n     * @param filter the new filter\r\n     */\r\n    filterChange(filter: CourseCompetencyFilter) {\r\n        this.filter = filter;\r\n        //navigate back to the first page when the filter changes\r\n        this.search.page = 1;\r\n        this.performSearch();\r\n    }\r\n\r\n    /**\r\n     * Callback that updates the pagination/sorting for the competency search and fetches new data from the server.\r\n     *\r\n     * @param search the new pagination/sorting\r\n     */\r\n    searchChange(search: PageableSearch) {\r\n        this.search = search;\r\n        this.performSearch();\r\n    }\r\n\r\n    /**\r\n     * Fetches a page of course competencies matching a PageableSearch from the server.\r\n     *\r\n     */\r\n    performSearch() {\r\n        this.isLoading = true;\r\n        this.courseCompetencyService.getForImport({ ...this.filter, ...this.search }).subscribe({\r\n            next: (res) => {\r\n                this.searchedCourseCompetencies = res;\r\n                this.isLoading = false;\r\n            },\r\n            error: (error: HttpErrorResponse) => onError(this.alertService, error),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback that sorts the selected course competencies\r\n     *\r\n     * @param search the PageableSearch object with the updated sorting data\r\n     */\r\n    sortSelected(search: PageableSearch) {\r\n        this.selectedCourseCompetencies.resultsOnPage = this.sortingService.sortByProperty(\r\n            this.selectedCourseCompetencies.resultsOnPage,\r\n            this.columnMapping[search.sortedColumn],\r\n            search.sortingOrder === SortingOrder.ASCENDING,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback to add a course competency to the selected list\r\n     *\r\n     * @param competency the competency to add\r\n     */\r\n    selectCompetency(competency: CourseCompetency) {\r\n        if (competency.id) {\r\n            this.disabledIds.push(competency.id);\r\n        }\r\n        this.selectedCourseCompetencies.resultsOnPage.push(competency);\r\n        this.sortSelected(this.selectedCourseCompetenciesSearch);\r\n    }\r\n\r\n    /**\r\n     * Callback to remove a course competency from the selected list\r\n     *\r\n     * @param competency the competency to remove\r\n     */\r\n    removeCompetency(competency: CourseCompetency) {\r\n        if (competency.id) {\r\n            this.disabledIds = this.disabledIds.filter((id) => id !== competency.id);\r\n        }\r\n        this.selectedCourseCompetencies.resultsOnPage = this.selectedCourseCompetencies.resultsOnPage.filter((c) => c.id !== competency.id);\r\n    }\r\n\r\n    /**\r\n     * Only allows submitting if at least one competency has been selected for import\r\n     */\r\n    isSubmitPossible() {\r\n        return this.selectedCourseCompetencies.resultsOnPage.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Cancels the import and navigates back\r\n     */\r\n    onCancel() {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    /**\r\n     * Only allow to leave page after submitting or if no pending changes exist\r\n     */\r\n    canDeactivate() {\r\n        return this.isSubmitted || (!this.isLoading && this.selectedCourseCompetencies.resultsOnPage.length === 0);\r\n    }\r\n\r\n    get canDeactivateWarning(): string {\r\n        return this.translateService.instant('pendingChanges');\r\n    }\r\n\r\n    /**\r\n     * Displays the alert for confirming refreshing or closing the page if there are unsaved changes\r\n     * NOTE: while the beforeunload event might be deprecated in the future, it is currently the only way to display a confirmation dialog when the user tries to leave the page\r\n     * @param event the beforeunload event\r\n     */\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event: BeforeUnloadEvent) {\r\n        if (!this.canDeactivate()) {\r\n            event.preventDefault();\r\n            return this.canDeactivateWarning;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import { Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\r\nimport { PageableSearch, SearchResult, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { Competency } from 'app/entities/competency.model';\r\nimport { SortDirective } from 'app/shared/sort/sort.directive';\r\nimport { SortByDirective } from 'app/shared/sort/sort-by.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { NgTemplateOutlet } from '@angular/common';\r\nimport { NgbPagination } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HtmlForMarkdownPipe } from 'app/shared/pipes/html-for-markdown.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-import-competencies-table',\r\n    templateUrl: './import-competencies-table.component.html',\r\n    imports: [SortDirective, SortByDirective, FaIconComponent, TranslateDirective, NgTemplateOutlet, NgbPagination, HtmlForMarkdownPipe],\r\n})\r\nexport class ImportCompetenciesTableComponent implements OnInit {\r\n    @Input() content: SearchResult<Competency>;\r\n    @Input() search: PageableSearch;\r\n    @Input() displayPagination = true;\r\n\r\n    @Output() searchChange = new EventEmitter<PageableSearch>();\r\n\r\n    @ContentChild(TemplateRef) buttonsTemplate: TemplateRef<any>;\r\n\r\n    ascending: boolean;\r\n\r\n    // Icons\r\n    readonly faSort = faSort;\r\n\r\n    ngOnInit() {\r\n        this.ascending = this.search.sortingOrder === SortingOrder.ASCENDING;\r\n    }\r\n\r\n    /**\r\n     * Callback function for when the user navigates through the page results\r\n     *\r\n     * @param pageNumber The current page number\r\n     */\r\n    onPageChange(pageNumber: number) {\r\n        this.search.page = pageNumber;\r\n        this.searchChange.emit(this.search);\r\n    }\r\n\r\n    /**\r\n     * Callback function for when the user changes the sort\r\n     * @param change an object containing the column to sort by and boolean if the sort is ascending\r\n     */\r\n    onSortChange(change: { predicate: string; ascending: boolean }) {\r\n        this.search.sortedColumn = change.predicate;\r\n        this.search.sortingOrder = change.ascending ? SortingOrder.ASCENDING : SortingOrder.DESCENDING;\r\n        this.searchChange.emit(this.search);\r\n    }\r\n}\r\n", "<table class=\"table table-striped align-middle flex\">\r\n    <thead class=\"thead-dark\">\r\n        <tr (sortChange)=\"onSortChange($event)\" [(ascending)]=\"ascending\" [(predicate)]=\"search.sortedColumn\" class=\"flex-row\" jhiSort>\r\n            <th jhiSortBy=\"ID\" class=\"col-0.5\">\r\n                <span>#</span>\r\n                <fa-icon [icon]=\"faSort\" />\r\n            </th>\r\n            <th jhiSortBy=\"TITLE\" class=\"col-2\">\r\n                <span [jhiTranslate]=\"'artemisApp.competency.import.table.TITLE'\"></span>\r\n                <fa-icon [icon]=\"faSort\" />\r\n            </th>\r\n            <!-- do not allow sorting by description -->\r\n            <th class=\"col-6\">\r\n                <span [jhiTranslate]=\"'artemisApp.competency.import.table.DESCRIPTION'\"></span>\r\n            </th>\r\n            <th jhiSortBy=\"COURSE_TITLE\" class=\"col-2\">\r\n                <span [jhiTranslate]=\"'artemisApp.competency.import.table.COURSE_TITLE'\"></span>\r\n                <fa-icon [icon]=\"faSort\" />\r\n            </th>\r\n            <th jhiSortBy=\"SEMESTER\" class=\"col-0.5\">\r\n                <span [jhiTranslate]=\"'artemisApp.competency.import.table.SEMESTER'\"></span>\r\n                <fa-icon [icon]=\"faSort\" />\r\n            </th>\r\n            <!-- column for buttons -->\r\n            <th class=\"col-1\"></th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        @for (competency of content.resultsOnPage; track competency.id) {\r\n            <tr>\r\n                <td class=\"col-0.5\">{{ competency.id }}</td>\r\n                <td class=\"col-2\">{{ competency.title }}</td>\r\n                <td class=\"markdown-preview col-6\" [innerHTML]=\"competency.description | htmlForMarkdown\"></td>\r\n                <td class=\"col-2\">{{ competency.course?.title }}</td>\r\n                <td class=\"col-0.5\">{{ competency.course?.semester }}</td>\r\n                <td class=\"col-1\">\r\n                    <ng-container *ngTemplateOutlet=\"buttonsTemplate; context: { competency: competency }\" />\r\n                </td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n</table>\r\n@if (displayPagination) {\r\n    <div class=\"d-flex justify-content-between p-2\">\r\n        <ngb-pagination\r\n            (pageChange)=\"onPageChange($event)\"\r\n            [(page)]=\"search.page\"\r\n            [collectionSize]=\"search.pageSize * content.numberOfPages\"\r\n            [maxSize]=\"10\"\r\n            [pageSize]=\"search.pageSize\"\r\n            [rotate]=\"true\"\r\n        />\r\n    </div>\r\n}\r\n", "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonType } from 'app/shared/components/button.component';\r\nimport { getSemesters } from 'app/utils/semester-utils';\r\nimport { CourseCompetencyFilter } from 'app/shared/table/pageable-table';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ButtonComponent } from 'app/shared/components/button.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-competency-search',\r\n    templateUrl: './competency-search.component.html',\r\n    imports: [TranslateDirective, FormsModule, NgbCollapse, ButtonComponent, FaIconComponent],\r\n})\r\nexport class CompetencySearchComponent {\r\n    @Input() search: CourseCompetencyFilter;\r\n    @Output() searchChange = new EventEmitter<CourseCompetencyFilter>();\r\n\r\n    advancedSearchEnabled = false;\r\n\r\n    //Icons\r\n    protected readonly faChevronDown = faChevronDown;\r\n    protected readonly faChevronUp = faChevronUp;\r\n\r\n    //Other constants for HTML\r\n    protected readonly ButtonType = ButtonType;\r\n    protected readonly semesters = getSemesters();\r\n\r\n    /**\r\n     * Toggles advanced search (expands component to show more search fields)\r\n     */\r\n    toggleAdvancedSearch() {\r\n        this.advancedSearchEnabled = !this.advancedSearchEnabled;\r\n    }\r\n\r\n    /**\r\n     * Resets all filters to default values\r\n     */\r\n    reset() {\r\n        this.search = {\r\n            title: '',\r\n            description: '',\r\n            courseTitle: '',\r\n            semester: '',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sends an updated filter through the event emitter\r\n     * Triggered every time the user manually presses Enter or the search button\r\n     */\r\n    performSearch() {\r\n        if (this.advancedSearchEnabled) {\r\n            this.searchChange.emit(this.search);\r\n        } else {\r\n            //only search with competency title if advancedSearch is disabled\r\n            this.searchChange.emit({\r\n                title: this.search.title,\r\n                description: '',\r\n                courseTitle: '',\r\n                semester: '',\r\n            });\r\n        }\r\n    }\r\n}\r\n", "<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        <h5 class=\"mb-0\" jhiTranslate=\"artemisApp.competency.import.search.title\"></h5>\r\n    </div>\r\n    <div class=\"card-body pb-1\">\r\n        <div class=\"form-group\">\r\n            <label for=\"competency-title-input\" jhiTranslate=\"artemisApp.competency.import.search.labelCompetencyTitle\"></label>\r\n            <input id=\"competency-title-input\" class=\"form-control\" [(ngModel)]=\"search.title\" (keydown.enter)=\"performSearch()\" />\r\n        </div>\r\n        <div [ngbCollapse]=\"!advancedSearchEnabled\">\r\n            <div class=\"form-group\">\r\n                <label for=\"competency-description-input\" jhiTranslate=\"artemisApp.competency.import.search.labelCompetencyDescription\"></label>\r\n                <textarea id=\"competency-description-input\" rows=\"3\" class=\"form-control\" [(ngModel)]=\"search.description\" (keydown.enter)=\"performSearch()\"></textarea>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"form-group col\">\r\n                    <label for=\"course-title-input\" jhiTranslate=\"artemisApp.competency.import.search.labelCourseTitle\"></label>\r\n                    <input id=\"course-title-input\" class=\"form-control\" [(ngModel)]=\"search.courseTitle\" (keydown.enter)=\"performSearch()\" />\r\n                </div>\r\n                <div class=\"form-group col\">\r\n                    <label for=\"course-semester-select\" jhiTranslate=\"artemisApp.competency.import.search.labelCourseSemester\"></label>\r\n                    <select id=\"course-semester-select\" class=\"form-select\" [(ngModel)]=\"search.semester\" (keydown.enter)=\"performSearch()\">\r\n                        @for (semester of semesters; track semester) {\r\n                            <option [value]=\"semester\">{{ semester }}</option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"d-flex justify-content-end flex-wrap\">\r\n            <jhi-button id=\"resetFilterButton\" class=\"me-2\" [btnType]=\"ButtonType.SECONDARY\" [title]=\"'entity.action.reset'\" (click)=\"reset()\" />\r\n            <jhi-button id=\"submitFilterButton\" [btnType]=\"ButtonType.PRIMARY\" [title]=\"'entity.action.search'\" (click)=\"performSearch()\" />\r\n        </div>\r\n        <div class=\"d-flex flex-row justify-content-center\">\r\n            <div id=\"toggleAdvancedSearch\" class=\"clickable\" (click)=\"toggleAdvancedSearch()\">\r\n                <fa-icon [icon]=\"advancedSearchEnabled ? faChevronUp : faChevronDown\" />\r\n                <span\r\n                    jhiTranslate=\"{{ advancedSearchEnabled ? 'artemisApp.competency.import.search.hideAdvancedSearch' : 'artemisApp.competency.import.search.showAdvancedSearch' }}\"\r\n                ></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["ImportCourseCompetenciesComponent", "allowRelationImport", "courseId", "isLoading", "isSubmitted", "importRelations", "showAdvancedSearch", "disabledIds", "searchedCourseCompetencies", "resultsOnPage", "numberOfPages", "selectedCourseCompetencies", "filter", "courseTitle", "description", "semester", "title", "search", "page", "pageSize", "sortingOrder", "SortingOrder", "DESCENDING", "sortedColumn", "selectedCourseCompetenciesSearch", "faBan", "faSave", "faFileImport", "faTrash", "ButtonType", "columnMapping", "ID", "TITLE", "DESCRIPTION", "COURSE_TITLE", "SEMESTER", "activatedRoute", "inject", "ActivatedRoute", "router", "Router", "courseCompetencyService", "CourseCompetencyService", "alertService", "AlertService", "translateService", "TranslateService", "sortingService", "SortService", "ngOnInit", "Number", "snapshot", "paramMap", "get", "getAllForCourse", "subscribe", "next", "courseCompetenciesResponse", "courseCompetencies", "body", "flatMap", "courseCompetency", "type", "CourseCompetencyType", "COMPETENCY", "id", "PREREQUISITE", "linkedCourseCompetency", "performSearch", "error", "onError", "filterChange", "searchChange", "getForImport", "__spreadValues", "res", "sortSelected", "sortByProperty", "ASCENDING", "selectCompetency", "competency", "push", "removeCompetency", "c", "isSubmitPossible", "length", "onCancel", "navigate", "relativeTo", "canDeactivate", "canDeactivateWarning", "instant", "unloadNotification", "event", "preventDefault", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275resolveWindow", "\u0275\u0275elementContainer", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275template", "ImportCompetenciesTableComponent_For_49_ng_container_20_Template", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "competency_r1", "id", "title", "\u0275\u0275property", "\u0275\u0275pipeBind1", "description", "\u0275\u0275sanitizeHtml", "course", "semester", "ctx_r1", "buttonsTemplate", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onPageChange", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "search", "page", "\u0275\u0275twoWayProperty", "pageSize", "content", "numberOfPages", "ImportCompetenciesTableComponent", "displayPagination", "searchChange", "EventEmitter", "ascending", "faSort", "ngOnInit", "sortingOrder", "SortingOrder", "ASCENDING", "pageNumber", "emit", "onSortChange", "change", "sortedColumn", "predicate", "DESCENDING", "selectors", "contentQueries", "rf", "ctx", "dirIndex", "TemplateRef", "\u0275\u0275repeaterCreate", "ImportCompetenciesTableComponent_For_49_Template", "_forTrack0", "ImportCompetenciesTableComponent_Conditional_52_Template", "\u0275\u0275repeater", "resultsOnPage", "\u0275\u0275conditional", "SortDirective", "SortByDirective", "FaIconComponent", "TranslateDirective", "NgTemplateOutlet", "NgbPagination", "HtmlForMarkdownPipe", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "semester_r1", "\u0275\u0275textInterpolate", "CompetencySearchComponent", "search", "searchChange", "EventEmitter", "advancedSearchEnabled", "faChevronDown", "faChevronUp", "ButtonType", "semesters", "getSemesters", "toggleAdvancedSearch", "reset", "title", "description", "courseTitle", "semester", "performSearch", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275listener", "\u0275\u0275repeaterCreate", "CompetencySearchComponent_For_41_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275twoWayProperty", "\u0275\u0275repeater", "SECONDARY", "PRIMARY", "\u0275\u0275propertyInterpolate", "TranslateDirective", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "NgbCollapse", "ButtonComponent", "FaIconComponent", "encapsulation"]
}
