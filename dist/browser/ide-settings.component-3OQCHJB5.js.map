{
  "version": 3,
  "sources": ["src/main/webapp/app/shared/user-settings/ide-preferences/ide.model.ts", "src/main/webapp/app/shared/user-settings/ide-preferences/ide-settings.component.ts", "src/main/webapp/app/shared/user-settings/ide-preferences/ide-settings.component.html"],
  "sourcesContent": ["import { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\n\r\nexport interface Ide {\r\n    name: string;\r\n    deepLink: string;\r\n}\r\n\r\nexport function ideEquals(a: Ide | undefined, b: Ide | undefined): boolean {\r\n    if (!a || !b) {\r\n        return false;\r\n    }\r\n    return a.deepLink == b.deepLink;\r\n}\r\n\r\nexport interface IdeMappingDTO {\r\n    programmingLanguage: ProgrammingLanguage;\r\n    ide: Ide;\r\n}\r\n", "import { ChangeDetectionStrategy, Component, OnInit, WritableSignal, inject, signal } from '@angular/core';\r\nimport { ProgrammingLanguage } from 'app/entities/programming/programming-exercise.model';\r\nimport { Ide, ideEquals } from 'app/shared/user-settings/ide-preferences/ide.model';\r\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { IdeSettingsService } from 'app/shared/user-settings/ide-preferences/ide-settings.service';\r\nimport { TranslateDirective } from '../../language/translate.directive';\r\nimport { HelpIconComponent } from '../../components/help-icon.component';\r\nimport { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { NgbDropdown, NgbDropdownButtonItem, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'jhi-ide-preferences',\r\n    templateUrl: './ide-settings.component.html',\r\n    styleUrls: ['./ide-settings.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n        TranslateDirective,\r\n        HelpIconComponent,\r\n        NgTemplateOutlet,\r\n        FaIconComponent,\r\n        NgbDropdown,\r\n        NgbDropdownToggle,\r\n        NgbDropdownMenu,\r\n        NgbDropdownButtonItem,\r\n        NgbDropdownItem,\r\n        NgClass,\r\n    ],\r\n})\r\nexport class IdeSettingsComponent implements OnInit {\r\n    private ideSettingsService = inject(IdeSettingsService);\r\n\r\n    protected readonly ProgrammingLanguage = ProgrammingLanguage;\r\n    protected readonly faPlus = faPlus;\r\n    protected readonly faTrash = faTrash;\r\n    PREDEFINED_IDE: Ide[] = [{ name: 'VS Code', deepLink: 'vscode://vscode.git/clone?url={cloneUrl}' }];\r\n\r\n    programmingLanguageToIde: WritableSignal<Map<ProgrammingLanguage, Ide>> = signal(new Map([[ProgrammingLanguage.EMPTY, this.PREDEFINED_IDE[0]]]));\r\n\r\n    assignedProgrammingLanguages: ProgrammingLanguage[] = [];\r\n    // languages that have no IDE assigned yet\r\n    remainingProgrammingLanguages: ProgrammingLanguage[] = Object.values(ProgrammingLanguage).filter((x) => x !== ProgrammingLanguage.EMPTY);\r\n\r\n    ngOnInit() {\r\n        this.ideSettingsService.loadPredefinedIdes().subscribe((predefinedIde) => {\r\n            this.PREDEFINED_IDE = predefinedIde;\r\n        });\r\n\r\n        this.ideSettingsService.loadIdePreferences(true).then((programmingLanguageToIdeMap) => {\r\n            if (!programmingLanguageToIdeMap.has(ProgrammingLanguage.EMPTY)) {\r\n                programmingLanguageToIdeMap.set(ProgrammingLanguage.EMPTY, this.PREDEFINED_IDE[0]);\r\n            }\r\n\r\n            this.programmingLanguageToIde.set(programmingLanguageToIdeMap);\r\n\r\n            // initialize assigned programming languages\r\n            this.assignedProgrammingLanguages = Array.from(programmingLanguageToIdeMap.keys()).filter((x: ProgrammingLanguage) => x !== ProgrammingLanguage.EMPTY);\r\n\r\n            // initialize remaining programming languages\r\n            this.remainingProgrammingLanguages = Array.from(\r\n                Object.values(ProgrammingLanguage).filter((x) => !this.assignedProgrammingLanguages.includes(x) && x !== ProgrammingLanguage.EMPTY),\r\n            );\r\n        });\r\n    }\r\n\r\n    addProgrammingLanguage(programmingLanguage: ProgrammingLanguage) {\r\n        this.ideSettingsService.saveIdePreference(programmingLanguage, this.PREDEFINED_IDE[0]).subscribe((ide) => {\r\n            this.programmingLanguageToIde.update((map) => new Map(map.set(programmingLanguage, ide)));\r\n\r\n            this.assignedProgrammingLanguages.push(programmingLanguage);\r\n            this.remainingProgrammingLanguages = this.remainingProgrammingLanguages.filter((x) => x !== programmingLanguage);\r\n        });\r\n    }\r\n\r\n    changeIde(programmingLanguage: ProgrammingLanguage, ide: Ide) {\r\n        this.ideSettingsService.saveIdePreference(programmingLanguage, ide).subscribe((ide) => {\r\n            this.programmingLanguageToIde.update((map) => new Map(map.set(programmingLanguage, ide)));\r\n        });\r\n    }\r\n\r\n    removeProgrammingLanguage(programmingLanguage: ProgrammingLanguage) {\r\n        this.ideSettingsService.deleteIdePreference(programmingLanguage).subscribe(() => {\r\n            const programmingLanguageToIdeMap: Map<ProgrammingLanguage, Ide> = new Map(this.programmingLanguageToIde());\r\n            programmingLanguageToIdeMap.delete(programmingLanguage);\r\n\r\n            this.programmingLanguageToIde.set(programmingLanguageToIdeMap);\r\n\r\n            this.remainingProgrammingLanguages.push(programmingLanguage);\r\n            this.assignedProgrammingLanguages = this.assignedProgrammingLanguages.filter((x) => x !== programmingLanguage);\r\n        });\r\n    }\r\n\r\n    isIdeOfProgrammingLanguage(programmingLanguage: ProgrammingLanguage, ide: Ide): boolean {\r\n        return ideEquals(this.programmingLanguageToIde().get(programmingLanguage), ide);\r\n    }\r\n}\r\n", "<h1 jhiTranslate=\"artemisApp.userSettings.categories.IDE_PREFERENCES\"></h1>\r\n<div class=\"list-group d-block\">\r\n    <div class=\"list-group-item pb-3\">\r\n        <dt>\r\n            <span jhiTranslate=\"artemisApp.userSettings.idePreferencesPage.description\"></span>\r\n            <jhi-help-icon placement=\"right auto\" text=\"artemisApp.userSettings.idePreferencesPage.jetbrainsHelp\" />\r\n        </dt>\r\n        <h5 class=\"py-2\" jhiTranslate=\"artemisApp.userSettings.idePreferencesPage.default\"></h5>\r\n        <ng-container *ngTemplateOutlet=\"ideButtonRow; context: { language: ProgrammingLanguage.EMPTY }\" />\r\n    </div>\r\n    <!-- Display each customized Programming Language -->\r\n    @for (programmingLanguage of assignedProgrammingLanguages; track programmingLanguage) {\r\n        <div class=\"list-group-item pb-3\">\r\n            <div class=\"item-container d-flex flex-row justify-content-between align-items-center pb-2\">\r\n                <h5>\r\n                    {{ programmingLanguage }}\r\n                </h5>\r\n                <button class=\"btn btn-sm btn-outline-danger\" (click)=\"removeProgrammingLanguage(programmingLanguage)\">\r\n                    <fa-icon [icon]=\"faTrash\" />\r\n                </button>\r\n            </div>\r\n            <ng-container *ngTemplateOutlet=\"ideButtonRow; context: { language: programmingLanguage }\" />\r\n        </div>\r\n    }\r\n    <!-- Display plus button to add Programming Language with drop down menu -->\r\n    @if (remainingProgrammingLanguages.length) {\r\n        <div class=\"list-group-item\">\r\n            <div ngbDropdown class=\"d-inline-block\">\r\n                <button type=\"button\" class=\"btn btn-primary\" id=\"dropdown\" ngbDropdownToggle>\r\n                    <fa-icon [icon]=\"faPlus\" />\r\n                </button>\r\n                <div ngbDropdownMenu aria-labelledby=\"dropdown\">\r\n                    @for (programmingLanguage of remainingProgrammingLanguages; track programmingLanguage) {\r\n                        <button ngbDropdownItem (click)=\"addProgrammingLanguage(programmingLanguage)\">\r\n                            {{ programmingLanguage }}\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\r\n\r\n<ng-template #ideButtonRow let-programmingLanguage=\"language\">\r\n    <div class=\"btn-group\">\r\n        @for (ide of PREDEFINED_IDE; track ide) {\r\n            <div\r\n                class=\"btn\"\r\n                [ngClass]=\"isIdeOfProgrammingLanguage(programmingLanguage, ide) ? 'btn-primary selected' : 'btn-default'\"\r\n                (click)=\"changeIde(programmingLanguage, ide)\"\r\n            >\r\n                {{ ide.name }}\r\n            </div>\r\n        }\r\n    </div>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["ideEquals", "a", "b", "deepLink", "\u0275\u0275elementContainer", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275listener", "programmingLanguage_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "removeProgrammingLanguage", "\u0275\u0275element", "\u0275\u0275template", "IdeSettingsComponent_For_20_ng_container_14_Template", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275property", "faTrash", "ideButtonRow_r4", "\u0275\u0275pureFunction1", "_c0", "programmingLanguage_r6", "_r5", "addProgrammingLanguage", "\u0275\u0275repeaterCreate", "IdeSettingsComponent_Conditional_21_For_13_Template", "\u0275\u0275repeaterTrackByIdentity", "faPlus", "\u0275\u0275repeater", "remainingProgrammingLanguages", "ide_r8", "_r7", "programmingLanguage_r9", "language", "changeIde", "isIdeOfProgrammingLanguage", "name", "IdeSettingsComponent_ng_template_23_For_4_Template", "PREDEFINED_IDE", "IdeSettingsComponent", "ideSettingsService", "inject", "IdeSettingsService", "ProgrammingLanguage", "deepLink", "programmingLanguageToIde", "signal", "Map", "EMPTY", "assignedProgrammingLanguages", "Object", "values", "filter", "x", "ngOnInit", "loadPredefinedIdes", "subscribe", "predefinedIde", "loadIdePreferences", "then", "programmingLanguageToIdeMap", "has", "set", "Array", "from", "keys", "includes", "programmingLanguage", "saveIdePreference", "ide", "update", "map", "push", "deleteIdePreference", "delete", "ideEquals", "get", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "IdeSettingsComponent_ng_container_15_Template", "IdeSettingsComponent_For_20_Template", "IdeSettingsComponent_Conditional_21_Template", "IdeSettingsComponent_ng_template_23_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275conditional", "length", "TranslateDirective", "HelpIconComponent", "NgTemplateOutlet", "FaIconComponent", "NgbDropdown", "NgbDropdownToggle", "NgbDropdownMenu", "NgbDropdownButtonItem", "NgbDropdownItem", "NgClass", "styles", "changeDetection"]
}
