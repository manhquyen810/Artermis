{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/quiz/drag-and-drop-question.model.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/quiz/wrong-multiple-choice-answer.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/quiz/correct-multiple-choice-answer.action.ts", "src/main/webapp/app/exercises/quiz/manage/drag-and-drop-question/drag-and-drop-mouse-event.class.ts", "src/main/webapp/app/entities/quiz/drag-state.enum.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/exercise-generation/svg-renderer.ts", "src/main/webapp/app/exercises/quiz/manage/apollon-diagrams/exercise-generation/quiz-exercise-generator.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-scoring-info-modal/quiz-scoring-info-modal.component.ts", "src/main/webapp/app/exercises/quiz/manage/quiz-scoring-info-modal/quiz-scoring-info-modal.component.html", "src/main/webapp/app/exercises/quiz/manage/drag-and-drop-question/drag-and-drop-question-edit.component.ts", "src/main/webapp/app/exercises/quiz/manage/drag-and-drop-question/drag-and-drop-question-edit.component.html", "src/main/webapp/app/entities/quiz/short-answer-mapping.model.ts", "src/main/webapp/app/entities/quiz/short-answer-spot.model.ts", "src/main/webapp/app/entities/quiz/short-answer-solution.model.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/quiz/insert-short-answer-spot.action.ts", "src/main/webapp/app/shared/monaco-editor/model/actions/quiz/insert-short-answer-option.action.ts", "src/main/webapp/app/exercises/quiz/manage/match-percentage-info-modal/match-percentage-info-modal.component.ts", "src/main/webapp/app/exercises/quiz/manage/match-percentage-info-modal/match-percentage-info-modal.component.html", "src/main/webapp/app/exercises/quiz/manage/short-answer-question/short-answer-question-edit.component.ts", "src/main/webapp/app/exercises/quiz/manage/short-answer-question/short-answer-question-edit.component.html"],
  "sourcesContent": ["import { QuizQuestion, QuizQuestionType } from 'app/entities/quiz/quiz-question.model';\r\nimport { DropLocation } from 'app/entities/quiz/drop-location.model';\r\nimport { DragItem } from 'app/entities/quiz/drag-item.model';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\n\r\nexport class DragAndDropQuestion extends QuizQuestion {\r\n    public importedFiles?: Map<string, Blob>;\r\n    public backgroundFilePath?: string;\r\n    public dropLocations?: DropLocation[];\r\n    public dragItems?: DragItem[];\r\n    public correctMappings?: DragAndDropMapping[];\r\n\r\n    constructor() {\r\n        super(QuizQuestionType.DRAG_AND_DROP);\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class WrongMultipleChoiceAnswerAction extends TextEditorDomainAction {\r\n    static readonly ID = 'incorrect-multiple-choice-answer.action';\r\n    static readonly IDENTIFIER = '[wrong]';\r\n    static readonly TEXT = 'Enter a wrong answer option here';\r\n\r\n    constructor() {\r\n        super(WrongMultipleChoiceAnswerAction.ID, 'artemisApp.multipleChoiceQuestion.editor.addInCorrectAnswerOption');\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, WrongMultipleChoiceAnswerAction.TEXT);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return WrongMultipleChoiceAnswerAction.IDENTIFIER;\r\n    }\r\n}\r\n", "import { TextEditorDomainAction } from 'app/shared/monaco-editor/model/actions/text-editor-domain-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\nexport class CorrectMultipleChoiceAnswerAction extends TextEditorDomainAction {\r\n    static readonly ID = 'artemisApp.multipleChoiceQuestion.editor.addCorrectAnswerOption';\r\n    static readonly IDENTIFIER = '[correct]';\r\n    static readonly TEXT = 'Enter a correct answer option here';\r\n\r\n    constructor() {\r\n        super(CorrectMultipleChoiceAnswerAction.ID, 'artemisApp.multipleChoiceQuestion.editor.addCorrectAnswerOption');\r\n    }\r\n\r\n    run(editor: TextEditor): void {\r\n        this.addTextWithDomainActionIdentifier(editor, CorrectMultipleChoiceAnswerAction.TEXT);\r\n    }\r\n\r\n    getOpeningIdentifier(): string {\r\n        return CorrectMultipleChoiceAnswerAction.IDENTIFIER;\r\n    }\r\n}\r\n", "export class DragAndDropMouseEvent {\r\n    x: number;\r\n    y: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    startX: number;\r\n    startY: number;\r\n}\r\n", "/**\r\n * Enum for the different drag operations\r\n *\r\n * @type {{NONE: number, CREATE: number, MOVE: number, RESIZE_BOTH: number, RESIZE_X: number, RESIZE_Y: number}}\r\n */\r\nexport enum DragState {\r\n    NONE = 0,\r\n    CREATE,\r\n    MOVE,\r\n    RESIZE_BOTH,\r\n    RESIZE_X,\r\n    RESIZE_Y,\r\n}\r\n", "import { SVG } from '@ls1intum/apollon';\r\n\r\n/**\r\n * Converts svg to png.\r\n */\r\nexport function convertRenderedSVGToPNG(renderedSVG: SVG): Promise<Blob> {\r\n    return new Promise((resolve, reject) => {\r\n        const { width, height } = renderedSVG.clip;\r\n\r\n        const blob = new Blob([renderedSVG.svg], { type: 'image/svg+xml' });\r\n        const blobUrl = URL.createObjectURL(blob);\r\n\r\n        const image = new Image();\r\n        image.width = width;\r\n        image.height = height;\r\n        image.src = blobUrl;\r\n\r\n        image.onload = () => {\r\n            // Important Notice: canvas is intentionally a variable because of optimization steps in Webpack\r\n            // In the resulting JS production code, the function 'toPNGBlob' below is inlined and as part of\r\n            // the typeof comparison, canvas somehow needs to be reassigned to itself which produces a run-time\r\n            // error, when canvas is defined as const. Unfortunately, this error does not occur during development\r\n            const canvas = document.createElement('canvas');\r\n            canvas.style.width = `${width}px`;\r\n            canvas.style.height = `${height}px`;\r\n\r\n            const scale = 1.5;\r\n            canvas.width = width * scale;\r\n            canvas.height = height * scale;\r\n\r\n            const context = canvas.getContext('2d')!;\r\n            context.scale(scale, scale);\r\n            context.drawImage(image, 0, 0);\r\n\r\n            toPNGBlob(canvas, resolve);\r\n        };\r\n\r\n        image.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n\r\n/**\r\n * Fallback for HTMLCanvasElement.toBlob().\r\n */\r\n// Some browsers (such as IE or Edge) don't support the HTMLCanvasElement.toBlob() method,\r\n// so we use the (much more inefficient) toDataURL() method as a fallback\r\nfunction toPNGBlob(canvas: HTMLCanvasElement, callback: (blob: Blob) => void) {\r\n    if (typeof canvas.toBlob === 'function') {\r\n        canvas.toBlob(callback);\r\n    } else {\r\n        setTimeout(() => {\r\n            const binaryRepresentation = window.atob(canvas.toDataURL().split(',')[1]);\r\n            const length = binaryRepresentation.length;\r\n            const buffer = new Uint8Array(length);\r\n\r\n            for (let i = 0; i < length; i++) {\r\n                buffer[i] = binaryRepresentation.charCodeAt(i);\r\n            }\r\n\r\n            callback(new Blob([buffer], { type: 'image/png' }));\r\n        });\r\n    }\r\n}\r\n", "import { ApollonEditor, SVG, UMLElementType, UMLModel, UMLModelElement, UMLRelationshipType } from '@ls1intum/apollon';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { convertRenderedSVGToPNG } from 'app/exercises/quiz/manage/apollon-diagrams/exercise-generation/svg-renderer';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { ScoringType } from 'app/entities/quiz/quiz-question.model';\r\nimport { DragItem } from 'app/entities/quiz/drag-item.model';\r\nimport { DropLocation } from 'app/entities/quiz/drop-location.model';\r\nimport { round } from 'app/shared/util/utils';\r\n\r\n// Drop locations in quiz exercises are relatively positioned and sized using integers in the interval [0, 200]\r\nexport const MAX_SIZE_UNIT = 200;\r\n\r\n/**\r\n * Generates a new Drag and Drop Quiz Exercise based on a UML model.\r\n *\r\n * @param {Course} course The selected `Course` in which the new `QuizExercise` should be created.\r\n * @param {string} title The title of the new `QuizExercise`.\r\n * @param {UMLModel} model The complete UML model the quiz exercise is based on.\r\n */\r\nexport async function generateDragAndDropQuizExercise(course: Course, title: string, model: UMLModel): Promise<DragAndDropQuestion> {\r\n    const interactiveElements = [\r\n        ...Object.entries(model.interactive.elements)\r\n            .filter(([, include]) => include)\r\n            .map(([id]) => id),\r\n        ...Object.entries(model.interactive.relationships)\r\n            .filter(([, include]) => include)\r\n            .map(([id]) => id),\r\n    ];\r\n    const elements = [...Object.values(model.elements), ...Object.values(model.relationships)];\r\n\r\n    // Render the diagram's background image and store it\r\n    const renderedDiagram = await ApollonEditor.exportModelAsSvg(model, {\r\n        keepOriginalSize: true,\r\n        exclude: interactiveElements,\r\n    });\r\n    const diagramBackground = await convertRenderedSVGToPNG(renderedDiagram);\r\n    const files = new Map<string, Blob>();\r\n    files.set('diagram-background.png', diagramBackground);\r\n\r\n    const dragItems = new Map<string, DragItem>();\r\n    const dropLocations = new Map<string, DropLocation>();\r\n\r\n    // Create Drag Items and Drop Locations\r\n    for (const elementId of interactiveElements) {\r\n        const element = elements.find((elem) => elem.id === elementId);\r\n        if (!element) {\r\n            continue;\r\n        }\r\n        const { dragItem, dropLocation } = await generateDragAndDropItem(element, model, renderedDiagram.clip, files);\r\n        dragItems.set(element.id, dragItem!);\r\n        dropLocations.set(element.id, dropLocation!);\r\n    }\r\n\r\n    // Create all possible correct mappings between drag items and drop locations\r\n    const correctMappings = createCorrectMappings(dragItems, dropLocations, model);\r\n\r\n    // Generate a drag-and-drop question object\r\n    const dragAndDropQuestion = createDragAndDropQuestion(title, 'diagram-background.png', [...dragItems.values()], [...dropLocations.values()], correctMappings);\r\n    dragAndDropQuestion.importedFiles = files;\r\n\r\n    return dragAndDropQuestion;\r\n}\r\n\r\n/**\r\n * Create a new Drag and Drop Quiz Exercise `DragAndDropQuestion`.\r\n *\r\n * @param {string} title The title of the new `DragAndDropQuestion`.\r\n * @param {string} backgroundFilePath The path to the `DragAndDropQuestion`'s background image.\r\n * @param {DragItem[]} dragItems A list of all available `DragItem`s.\r\n * @param {DropLocation[]} dropLocations A list of all available `DropLocation`s.\r\n * @param {DragAndDropMapping[]} correctMappings A list of mappings between `DragItem`s and `DropLocation`s.\r\n *\r\n * @return {QuizExercise} A new Drag and Drop `QuizExercise`.\r\n */\r\nfunction createDragAndDropQuestion(\r\n    title?: string,\r\n    backgroundFilePath?: string,\r\n    dragItems?: DragItem[],\r\n    dropLocations?: DropLocation[],\r\n    correctMappings?: DragAndDropMapping[],\r\n): DragAndDropQuestion {\r\n    const dragAndDropQuestion = new DragAndDropQuestion();\r\n    dragAndDropQuestion.title = title;\r\n    dragAndDropQuestion.text = 'Fill the empty spaces in the UML diagram by dragging and dropping the elements below the diagram into the correct places.';\r\n    dragAndDropQuestion.scoringType = ScoringType.PROPORTIONAL_WITH_PENALTY;\r\n    dragAndDropQuestion.points = 1;\r\n    dragAndDropQuestion.backgroundFilePath = backgroundFilePath;\r\n    dragAndDropQuestion.dropLocations = dropLocations;\r\n    dragAndDropQuestion.dragItems = dragItems;\r\n    dragAndDropQuestion.correctMappings = correctMappings;\r\n    return dragAndDropQuestion;\r\n}\r\n\r\n/**\r\n * Convenience function to create a mapping of a `DragItem` and a `DropLocation` for any particular element.\r\n *\r\n * For each image based drag item the image needs to be uploaded first, therefore the result is returned asynchronously.\r\n *\r\n * @param {UMLModelElement} element A particular element of the UML model.\r\n * @param {UMLModel} model The complete UML model.\r\n * @param svgSize actual size of the generated svg\r\n * @param files a map of files that should be uploaded\r\n *\r\n * @return {Promise<DragAndDropMapping>} A Promise resolving to a Drag and Drop mapping\r\n */\r\nasync function generateDragAndDropItem(\r\n    element: UMLModelElement,\r\n    model: UMLModel,\r\n    svgSize: { width: number; height: number },\r\n    files: Map<string, Blob>,\r\n): Promise<DragAndDropMapping> {\r\n    const textualElementTypes: UMLElementType[] = [UMLElementType.ClassAttribute, UMLElementType.ClassMethod, UMLElementType.ObjectAttribute, UMLElementType.ObjectMethod];\r\n    if (element.type in UMLRelationshipType) {\r\n        return generateDragAndDropItemForRelationship(element, model, svgSize, files);\r\n    } else if (textualElementTypes.includes(element.type as UMLElementType)) {\r\n        return generateDragAndDropItemForText(element, model, svgSize);\r\n    } else {\r\n        return generateDragAndDropItemForElement(element, model, svgSize, files);\r\n    }\r\n}\r\n\r\n/**\r\n * Create a mapping of a `DragItem` and a `DropLocation` for a `UMLElement`.\r\n *\r\n * @param {UMLModelElement} element An element of the UML model.\r\n * @param {UMLModel} model The complete UML model.\r\n * @param svgSize actual size of the generated svg\r\n * @param files a map of files that should be uploaded\r\n *\r\n * @return {Promise<DragAndDropMapping>} A Promise resolving to a Drag and Drop mapping\r\n */\r\nexport async function generateDragAndDropItemForElement(\r\n    element: UMLModelElement,\r\n    model: UMLModel,\r\n    svgSize: { width: number; height: number },\r\n    files: Map<string, Blob>,\r\n): Promise<DragAndDropMapping> {\r\n    const renderedElement: SVG = await ApollonEditor.exportModelAsSvg(model, { include: [element.id] });\r\n    const image = await convertRenderedSVGToPNG(renderedElement);\r\n    const imageName = `element-${element.id}.png`;\r\n    files.set(imageName, image);\r\n    const dragItem = new DragItem();\r\n    dragItem.pictureFilePath = imageName;\r\n    const dropLocation = computeDropLocation(renderedElement.clip, svgSize);\r\n\r\n    return new DragAndDropMapping(dragItem, dropLocation);\r\n}\r\n\r\n/**\r\n * Create a mapping of a `DragItem` and a `DropLocation` for a textual based `UMLElement`.\r\n *\r\n * @param {UMLModelElement} element A textual based element of the UML model.\r\n * @param {UMLModel} model The complete UML model.\r\n * @param svgSize actual size of the generated svg\r\n *\r\n * @return {Promise<DragAndDropMapping>} A Promise resolving to a Drag and Drop mapping\r\n */\r\nasync function generateDragAndDropItemForText(element: UMLModelElement, model: UMLModel, svgSize: { width: number; height: number }): Promise<DragAndDropMapping> {\r\n    const dragItem = new DragItem();\r\n    dragItem.text = element.name;\r\n    const dropLocation = computeDropLocation(element.bounds, svgSize);\r\n\r\n    return new DragAndDropMapping(dragItem, dropLocation);\r\n}\r\n\r\n/**\r\n * Create a mapping of a `DragItem` and a `DropLocation` for a `UMLRelationship`.\r\n *\r\n * @param {UMLModelElement} element A relationship of the UML model.\r\n * @param {UMLModel} model The complete UML model.\r\n * @param svgSize actual size of the generated svg\r\n * @param files a map of files that should be uploaded\r\n *\r\n * @return {Promise<DragAndDropMapping>} A Promise resolving to a Drag and Drop mapping\r\n */\r\nasync function generateDragAndDropItemForRelationship(\r\n    element: UMLModelElement,\r\n    model: UMLModel,\r\n    svgSize: { width: number; height: number },\r\n    files: Map<string, Blob>,\r\n): Promise<DragAndDropMapping> {\r\n    const MIN_SIZE = 30;\r\n\r\n    let margin = {};\r\n    if (element.bounds.width < MIN_SIZE) {\r\n        const delta = MIN_SIZE - element.bounds.width;\r\n        margin = { ...margin, right: delta / 2, left: delta / 2 };\r\n    }\r\n    if (element.bounds.height < MIN_SIZE) {\r\n        const delta = MIN_SIZE - element.bounds.height;\r\n        margin = { ...margin, top: delta / 2, bottom: delta / 2 };\r\n    }\r\n\r\n    const renderedElement: SVG = await ApollonEditor.exportModelAsSvg(model, { margin, include: [element.id] });\r\n    const image = await convertRenderedSVGToPNG(renderedElement);\r\n    const imageName = `relationship-${element.id}.png`;\r\n    files.set(imageName, image);\r\n\r\n    const dragItem = new DragItem();\r\n    dragItem.pictureFilePath = imageName;\r\n    const dropLocation = computeDropLocation(renderedElement.clip, svgSize);\r\n\r\n    return new DragAndDropMapping(dragItem, dropLocation);\r\n}\r\n\r\n/**\r\n * Create a Drag and Drop Quiz Exercise `DropLocation` for an `Element`.\r\n *\r\n * Based on the total size of the complete UML model and the boundaries of an element a drop location is computed. Instead of absolute values\r\n * for position and size, `DropLocation`s use percentage values to the base of `MAX_SIZE_UNIT`.\r\n *\r\n * @param elementLocation The position and size of an element.\r\n * @param totalSize The total size of the UML model.\r\n *\r\n * @return {DropLocation} A Drag and Drop Quiz Exercise `DropLocation`.\r\n */\r\nexport function computeDropLocation(\r\n    elementLocation: { x: number; y: number; width: number; height: number },\r\n    totalSize: { x?: number; y?: number; width: number; height: number },\r\n): DropLocation {\r\n    const dropLocation = new DropLocation();\r\n    // round to second decimal\r\n    dropLocation.posX = round(((elementLocation.x - (totalSize.x ?? 0)) / totalSize.width) * MAX_SIZE_UNIT, 2);\r\n    dropLocation.posY = round(((elementLocation.y - (totalSize.y ?? 0)) / totalSize.height) * MAX_SIZE_UNIT, 2);\r\n    dropLocation.width = round((elementLocation.width / totalSize.width) * MAX_SIZE_UNIT, 2);\r\n    dropLocation.height = round((elementLocation.height / totalSize.height) * MAX_SIZE_UNIT, 2);\r\n    return dropLocation;\r\n}\r\n\r\n/**\r\n * Creates all permutations for correct `DragAndDropMapping` between `DragItem`s and `DropLocation`s.\r\n *\r\n * @param {Map<string, DragItem>} dragItems A mapping of element ids to drag items.\r\n * @param {Map<string, DropLocation>} dropLocations A mapping of element ids to drop locations.\r\n * @param {UMLModel} model The complete UML model.\r\n *\r\n * @return {DragAndDropMapping} A list of all possible `DragAndDropMapping`s.\r\n */\r\nfunction createCorrectMappings(dragItems: Map<string, DragItem>, dropLocations: Map<string, DropLocation>, model: UMLModel): DragAndDropMapping[] {\r\n    const textualElementTypes: UMLElementType[] = [UMLElementType.ClassAttribute, UMLElementType.ClassMethod, UMLElementType.ObjectAttribute];\r\n    const mappings = new Map<string, DragAndDropMapping[]>();\r\n    const textualElements = Object.values(model.elements).filter((element) => textualElementTypes.includes(element.type));\r\n\r\n    // Create all one-on-one mappings\r\n    for (const [dragItemElementId, dragItem] of dragItems.entries()) {\r\n        for (const [dropLocationElementId, dropLocation] of dropLocations.entries()) {\r\n            if (dragItemElementId === dropLocationElementId) {\r\n                const mapping = new DragAndDropMapping(dragItem, dropLocation);\r\n                mappings.set(dragItemElementId, [mapping]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create all mapping permutations for textual based elements within the same parent and same type\r\n    for (const [dragItemElementId, dragItem] of dragItems.entries()) {\r\n        const dragElement = textualElements.find((element) => element.id === dragItemElementId);\r\n        if (!dragElement || !dragElement.owner) {\r\n            continue;\r\n        }\r\n        const dragElementSiblings = textualElements.filter((element) => element.owner === dragElement.owner && element.type === dragElement.type);\r\n        for (const dragElementSibling of dragElementSiblings) {\r\n            if (dragElementSibling.id === dragItemElementId) {\r\n                continue;\r\n            }\r\n            if (mappings.has(dragElementSibling.id)) {\r\n                const mapping = new DragAndDropMapping(dragItem, dropLocations.get(dragElementSibling.id)!);\r\n                mappings.set(dragItemElementId, [...mappings.get(dragItemElementId)!, mapping]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const intermediateMappings = new Map(mappings);\r\n\r\n    // Create all mapping permutations for textual based elements with the same name and different parents\r\n    for (const [dragItemElementId, dragItem] of dragItems.entries()) {\r\n        const dragElement = textualElements.find((element) => element.id === dragItemElementId);\r\n        if (!dragElement || !dragElement.name) {\r\n            continue;\r\n        }\r\n        for (const [dropLocationElementId] of dropLocations.entries()) {\r\n            const dropElement = textualElements.find((element) => element.id === dropLocationElementId);\r\n            if (!dropElement || dropElement.id === dragElement.id || dropElement.owner === dragElement.owner || dropElement.name !== dragElement.name) {\r\n                continue;\r\n            }\r\n            if (intermediateMappings.has(dropLocationElementId)) {\r\n                const currentMappings = [...intermediateMappings.get(dropLocationElementId)!];\r\n                for (const currentMapping of currentMappings) {\r\n                    const mapping = new DragAndDropMapping(dragItem, currentMapping.dropLocation);\r\n                    mappings.set(dragItemElementId, [...mappings.get(dragItemElementId)!, mapping]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Array<DragAndDropMapping>().concat(...mappings.values());\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-quiz-scoring-info-modal',\r\n    templateUrl: './quiz-scoring-info-modal.component.html',\r\n    imports: [TranslateDirective, FaIconComponent],\r\n})\r\nexport class QuizScoringInfoModalComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    // Icons\r\n    farQuestionCircle = faQuestionCircle;\r\n\r\n    /**\r\n     * Open a large modal with the given content.\r\n     * @param content the content to display\r\n     */\r\n    open(content: any) {\r\n        this.modalService.open(content, { size: 'lg' });\r\n    }\r\n}\r\n", "<ng-template #info let-c=\"close\" let-d=\"dismiss\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.quizExercise.scoringTypeExplanation.title\"></h4>\r\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"d()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <table class=\"table\">\r\n            <tr>\r\n                <th jhiTranslate=\"artemisApp.quizExercise.scoringType.all_or_nothing\"></th>\r\n                <td jhiTranslate=\"artemisApp.quizExercise.scoringTypeExplanation.all_or_nothing\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <th jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_with_penalty\"></th>\r\n                <td jhiTranslate=\"artemisApp.quizExercise.scoringTypeExplanation.proportional_with_penalty\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <th jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_without_penalty\"></th>\r\n                <td jhiTranslate=\"artemisApp.quizExercise.scoringTypeExplanation.proportional_without_penalty\"></td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"c()\">Close</button>\r\n    </div>\r\n</ng-template>\r\n<div>\r\n    <button class=\"btn\" (click)=\"open(info)\"><fa-icon [icon]=\"farQuestionCircle\" /></button>\r\n</div>\r\n", "import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    inject,\r\n} from '@angular/core';\r\nimport { DragAndDropQuestionUtil } from 'app/exercises/quiz/shared/drag-and-drop-question-util.service';\r\nimport { DragAndDropMouseEvent } from 'app/exercises/quiz/manage/drag-and-drop-question/drag-and-drop-mouse-event.class';\r\nimport { DragState } from 'app/entities/quiz/drag-state.enum';\r\nimport { NgbCollapse, NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { DragAndDropMapping } from 'app/entities/quiz/drag-and-drop-mapping.model';\r\nimport { DragAndDropQuestion } from 'app/entities/quiz/drag-and-drop-question.model';\r\nimport { DragItem } from 'app/entities/quiz/drag-item.model';\r\nimport { DropLocation } from 'app/entities/quiz/drop-location.model';\r\nimport { QuizQuestionEdit } from 'app/exercises/quiz/manage/quiz-question-edit.interface';\r\nimport { DragAndDropQuestionComponent } from 'app/exercises/quiz/shared/questions/drag-and-drop-question/drag-and-drop-question.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { round } from 'app/shared/util/utils';\r\nimport { MAX_SIZE_UNIT } from 'app/exercises/quiz/manage/apollon-diagrams/exercise-generation/quiz-exercise-generator';\r\nimport { debounceTime, filter } from 'rxjs/operators';\r\nimport { ImageLoadingStatus, SecuredImageComponent } from 'app/shared/image/secured-image.component';\r\nimport { generateExerciseHintExplanation } from 'app/shared/util/markdown.util';\r\nimport { faFileImage } from '@fortawesome/free-regular-svg-icons';\r\nimport { CdkDrag, CdkDragDrop, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup } from '@angular/cdk/drag-drop';\r\nimport { MAX_QUIZ_QUESTION_POINTS } from 'app/shared/constants/input.constants';\r\nimport { FileService } from 'app/shared/http/file.service';\r\nimport { QuizHintAction } from 'app/shared/monaco-editor/model/actions/quiz/quiz-hint.action';\r\nimport { QuizExplanationAction } from 'app/shared/monaco-editor/model/actions/quiz/quiz-explanation.action';\r\nimport { MarkdownEditorMonacoComponent, TextWithDomainAction } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { QuizScoringInfoModalComponent } from '../quiz-scoring-info-modal/quiz-scoring-info-modal.component';\r\nimport { NgClass, NgStyle, NgTemplateOutlet } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport {\r\n    faAngleDown,\r\n    faAngleRight,\r\n    faBan,\r\n    faBars,\r\n    faChevronDown,\r\n    faChevronUp,\r\n    faCopy,\r\n    faEye,\r\n    faFont,\r\n    faPencilAlt,\r\n    faPlus,\r\n    faScissors,\r\n    faTrash,\r\n    faUndo,\r\n    faUnlink,\r\n    faUpload,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n    selector: 'jhi-drag-and-drop-question-edit',\r\n    templateUrl: './drag-and-drop-question-edit.component.html',\r\n    providers: [DragAndDropQuestionUtil],\r\n    styleUrls: ['./drag-and-drop-question-edit.component.scss', '../quiz-exercise.scss', '../../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        FaIconComponent,\r\n        FormsModule,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        NgbCollapse,\r\n        QuizScoringInfoModalComponent,\r\n        MarkdownEditorMonacoComponent,\r\n        CdkDropListGroup,\r\n        SecuredImageComponent,\r\n        NgClass,\r\n        CdkDropList,\r\n        NgStyle,\r\n        CdkDrag,\r\n        CdkDragPreview,\r\n        NgTemplateOutlet,\r\n        CdkDragPlaceholder,\r\n        DragAndDropQuestionComponent,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class DragAndDropQuestionEditComponent implements OnInit, OnChanges, AfterViewInit, QuizQuestionEdit {\r\n    private dragAndDropQuestionUtil = inject(DragAndDropQuestionUtil);\r\n    private modalService = inject(NgbModal);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n    private fileService = inject(FileService);\r\n\r\n    @ViewChild('clickLayer', { static: false }) private clickLayer: ElementRef;\r\n    @ViewChild('backgroundImage ', { static: false }) private backgroundImage: SecuredImageComponent;\r\n    @ViewChild('markdownEditor', { static: false }) private markdownEditor: MarkdownEditorMonacoComponent;\r\n\r\n    @Input() question: DragAndDropQuestion;\r\n    @Input() questionIndex: number;\r\n    @Input() reEvaluationInProgress: boolean;\r\n    @Input() filePool = new Map<string, { path?: string; file: File }>();\r\n\r\n    @Output() questionUpdated = new EventEmitter<void>();\r\n    @Output() questionDeleted = new EventEmitter<void>();\r\n    /** Question move up and down are used for re-evaluate **/\r\n    @Output() questionMoveUp = new EventEmitter<void>();\r\n    @Output() questionMoveDown = new EventEmitter<void>();\r\n    @Output() addNewFile = new EventEmitter<{ fileName: string; path?: string; file: File }>();\r\n    @Output() removeFile = new EventEmitter<string>();\r\n\r\n    questionEditorText = '';\r\n    backupQuestion: DragAndDropQuestion;\r\n    filePreviewPaths: Map<string, string> = new Map<string, string>();\r\n    dropAllowed = false;\r\n    showPreview = false;\r\n    readonly CLICK_LAYER_DIMENSION: number = 200;\r\n    /** Status boolean for collapse status **/\r\n    isQuestionCollapsed = false;\r\n\r\n    /**\r\n     * Keep track of what the current drag action is doing\r\n     * @type {number}\r\n     */\r\n    draggingState: number = DragState.NONE;\r\n\r\n    /**\r\n     * Keep track of the currently dragged drop location\r\n     * @type {DropLocation}\r\n     */\r\n    currentDropLocation?: DropLocation;\r\n\r\n    /**\r\n     * Keep track of the current mouse location\r\n     * @type {DragAndDropMouseEvent}\r\n     */\r\n    mouse: DragAndDropMouseEvent;\r\n\r\n    hintAction = new QuizHintAction();\r\n    explanationAction = new QuizExplanationAction();\r\n\r\n    dragAndDropDomainActions = [this.explanationAction, this.hintAction];\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faPlus = faPlus;\r\n    faTrash = faTrash;\r\n    faUndo = faUndo;\r\n    faFont = faFont;\r\n    faEye = faEye;\r\n    faChevronUp = faChevronUp;\r\n    faChevronDown = faChevronDown;\r\n    faPencilAlt = faPencilAlt;\r\n    faBars = faBars;\r\n    faUnlink = faUnlink;\r\n    faCopy = faCopy;\r\n    farFileImage = faFileImage;\r\n    faAngleRight = faAngleRight;\r\n    faAngleDown = faAngleDown;\r\n    faUpload = faUpload;\r\n    faScissors = faScissors;\r\n\r\n    readonly MAX_POINTS = MAX_QUIZ_QUESTION_POINTS;\r\n\r\n    /**\r\n     * Actions when initializing component.\r\n     */\r\n    ngOnInit(): void {\r\n        // create deep copy as backup\r\n        this.backupQuestion = cloneDeep(this.question);\r\n\r\n        /** Initialize DropLocation and MouseEvent objects **/\r\n        this.currentDropLocation = new DropLocation();\r\n        this.mouse = new DragAndDropMouseEvent();\r\n        this.questionEditorText = generateExerciseHintExplanation(this.question);\r\n\r\n        // check if question was generated with an ApollonDiagram\r\n        if (this.question.importedFiles) {\r\n            this.setBackgroundFile({ target: { files: [new File([this.question.importedFiles.get('diagram-background.png')!], 'diagram-background.png')] } });\r\n            for (const dragItem of this.question.dragItems ?? []) {\r\n                if (dragItem.pictureFilePath && this.question.importedFiles.has(dragItem.pictureFilePath)) {\r\n                    this.changeToPictureDragItem(dragItem, {\r\n                        target: { files: [new File([this.question.importedFiles.get(dragItem.pictureFilePath!)!], dragItem.pictureFilePath!)] },\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Watch for any changes to the question model and notify listener\r\n     * @param changes {SimpleChanges}\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        /** Check if previousValue wasn't null to avoid firing at component initialization **/\r\n        if (changes.question && changes.question.previousValue) {\r\n            this.questionUpdated.emit();\r\n        }\r\n        /** Update backupQuestion if the question changed **/\r\n        if (changes.question && changes.question.currentValue) {\r\n            this.backupQuestion = cloneDeep(this.question);\r\n        }\r\n\r\n        if (!this.filePool || this.filePool.size == 0) {\r\n            return;\r\n        }\r\n\r\n        this.filePool.forEach((value, fileName) => {\r\n            if (value.path && !this.filePreviewPaths.has(fileName)) {\r\n                this.filePreviewPaths.set(fileName, value.path);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.question.backgroundFilePath && !this.filePreviewPaths.has(this.question.backgroundFilePath)) {\r\n            this.filePreviewPaths.set(this.question.backgroundFilePath, this.question.backgroundFilePath);\r\n            // Trigger image render with the question background file path in order to adjust the click layer.\r\n            setTimeout(() => {\r\n                this.changeDetector.markForCheck();\r\n                this.changeDetector.detectChanges();\r\n            }, 0);\r\n        }\r\n\r\n        if (this.question.dragItems) {\r\n            for (const dragItem in this.question.dragItems) {\r\n                const path = this.question.dragItems[dragItem].pictureFilePath;\r\n                if (path && !this.filePreviewPaths.has(path)) {\r\n                    this.filePreviewPaths.set(path, path);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.backgroundImage.endLoadingProcess\r\n            .pipe(\r\n                filter((loadingStatus) => loadingStatus === ImageLoadingStatus.SUCCESS),\r\n                // Some time until image render. Need to wait until image width is computed.\r\n                debounceTime(300),\r\n            )\r\n            .subscribe(() => this.adjustClickLayerWidth());\r\n        // render import images on UI immediatly\r\n        this.makeFileMapPreview();\r\n        // Trigger click layer width adjustment upon window resize.\r\n        window.onresize = () => this.adjustClickLayerWidth();\r\n    }\r\n\r\n    /**\r\n     * Adjusts the click-layer width to equal the background image width.\r\n     */\r\n    adjustClickLayerWidth() {\r\n        // Make the background image visible upon successful image load. Initially it is set to hidden and not\r\n        // conditionally loaded via '*ngIf' because otherwise the reference would be undefined and hence we\r\n        // wouldn't be able to subscribe to the loading process updates.\r\n        this.backgroundImage.element.nativeElement.style.visibility = 'visible';\r\n\r\n        // Adjust the click layer to correspond to the area of the background image.\r\n        this.clickLayer.nativeElement.style.width = `${this.backgroundImage.element.nativeElement.offsetWidth}px`;\r\n        this.clickLayer.nativeElement.style.left = `${this.backgroundImage.element.nativeElement.offsetLeft}px`;\r\n    }\r\n\r\n    /**\r\n     * This function opens the modal for the help dialog.\r\n     */\r\n    open(content: any) {\r\n        this.modalService.open(content, { size: 'lg' });\r\n    }\r\n\r\n    /**\r\n     * Handles drag-available UI\r\n     */\r\n    drag(): void {\r\n        this.dropAllowed = true;\r\n    }\r\n\r\n    /**\r\n     * Handles drag-available UI\r\n     */\r\n    drop(): void {\r\n        this.dropAllowed = false;\r\n    }\r\n\r\n    /**\r\n     * This method takes the files and creates preview objects so that images\r\n     * are rendered immediately on the UI after importing\r\n     */\r\n    makeFileMapPreview() {\r\n        if (this.filePool) {\r\n            this.filePool.forEach((value, key) => {\r\n                this.filePreviewPaths.set(key, URL.createObjectURL(value.file));\r\n            });\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * event {object} Event object which contains the uploaded file\r\n     */\r\n    setBackgroundFile(event: any): void {\r\n        const fileList: FileList = event.target.files as FileList;\r\n        if (fileList.length) {\r\n            const file = fileList[0];\r\n            this.setBackgroundFileFromFile(file);\r\n        }\r\n    }\r\n\r\n    setBackgroundFileFromFile(file: File) {\r\n        if (this.question.backgroundFilePath) {\r\n            this.removeFile.emit(this.question.backgroundFilePath);\r\n        }\r\n\r\n        const fileName = this.fileService.getUniqueFileName(this.fileService.getExtension(file.name), this.filePool);\r\n        this.question.backgroundFilePath = fileName;\r\n        this.filePreviewPaths.set(fileName, URL.createObjectURL(file));\r\n        this.addNewFile.emit({ fileName, file });\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * React to mousemove events on the entire page to update:\r\n     * - mouse object (always)\r\n     * - current drop location (only while dragging)\r\n     * @param event {object} Mouse move event\r\n     */\r\n    mouseMove(event: MouseEvent): void {\r\n        // Update mouse x and y value\r\n        const backgroundElement = this.clickLayer.nativeElement as HTMLElement;\r\n        const backgroundOffsetLeft = backgroundElement.getBoundingClientRect().x + window.scrollX;\r\n        const backgroundOffsetTop = backgroundElement.getBoundingClientRect().y + window.scrollY;\r\n        const backgroundWidth = backgroundElement.offsetWidth;\r\n        const backgroundHeight = backgroundElement.offsetHeight;\r\n        this.mouseMoveAction(event, backgroundOffsetLeft, backgroundOffsetTop, backgroundWidth, backgroundHeight);\r\n    }\r\n\r\n    private mouseMoveAction(event: MouseEvent, backgroundOffsetLeft: number, backgroundOffsetTop: number, backgroundWidth: number, backgroundHeight: number) {\r\n        if (event.pageX) {\r\n            this.mouse.x = event.pageX - backgroundOffsetLeft;\r\n            this.mouse.y = event.pageY - backgroundOffsetTop;\r\n        } else if (event.clientX) {\r\n            this.mouse.x = event.clientX - backgroundOffsetLeft;\r\n            this.mouse.y = event.clientY - backgroundOffsetTop;\r\n        }\r\n        this.mouse.x = Math.min(Math.max(0, this.mouse.x), backgroundWidth);\r\n        this.mouse.y = Math.min(Math.max(0, this.mouse.y), backgroundHeight);\r\n\r\n        if (this.draggingState !== DragState.NONE) {\r\n            switch (this.draggingState) {\r\n                case DragState.CREATE:\r\n                case DragState.RESIZE_BOTH:\r\n                    // Update current drop location's position and size\r\n                    this.currentDropLocation!.posX = round((MAX_SIZE_UNIT * Math.min(this.mouse.x, this.mouse.startX)) / backgroundWidth);\r\n                    this.currentDropLocation!.posY = round((MAX_SIZE_UNIT * Math.min(this.mouse.y, this.mouse.startY)) / backgroundHeight);\r\n                    this.currentDropLocation!.width = round((MAX_SIZE_UNIT * Math.abs(this.mouse.x - this.mouse.startX)) / backgroundWidth);\r\n                    this.currentDropLocation!.height = round((MAX_SIZE_UNIT * Math.abs(this.mouse.y - this.mouse.startY)) / backgroundHeight);\r\n                    break;\r\n                case DragState.MOVE:\r\n                    // update current drop location's position\r\n                    this.currentDropLocation!.posX = round(\r\n                        Math.min(Math.max(0, (MAX_SIZE_UNIT * (this.mouse.x + this.mouse.offsetX)) / backgroundWidth), MAX_SIZE_UNIT - this.currentDropLocation!.width!),\r\n                    );\r\n                    this.currentDropLocation!.posY = round(\r\n                        Math.min(Math.max(0, (MAX_SIZE_UNIT * (this.mouse.y + this.mouse.offsetY)) / backgroundHeight), MAX_SIZE_UNIT - this.currentDropLocation!.height!),\r\n                    );\r\n                    break;\r\n                case DragState.RESIZE_X:\r\n                    // Update current drop location's position and size (only x-axis)\r\n                    this.currentDropLocation!.posX = round((MAX_SIZE_UNIT * Math.min(this.mouse.x, this.mouse.startX)) / backgroundWidth);\r\n                    this.currentDropLocation!.width = round((MAX_SIZE_UNIT * Math.abs(this.mouse.x - this.mouse.startX)) / backgroundWidth);\r\n                    break;\r\n                case DragState.RESIZE_Y:\r\n                    // update current drop location's position and size (only y-axis)\r\n                    this.currentDropLocation!.posY = round((MAX_SIZE_UNIT * Math.min(this.mouse.y, this.mouse.startY)) / backgroundHeight);\r\n                    this.currentDropLocation!.height = round((MAX_SIZE_UNIT * Math.abs(this.mouse.y - this.mouse.startY)) / backgroundHeight);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * React to mouseup events to finish dragging operations\r\n     */\r\n    mouseUp(): void {\r\n        if (this.draggingState !== DragState.NONE) {\r\n            switch (this.draggingState) {\r\n                case DragState.CREATE:\r\n                    const backgroundElement = this.clickLayer.nativeElement as HTMLElement;\r\n                    const backgroundWidth = backgroundElement.offsetWidth;\r\n                    const backgroundHeight = backgroundElement.offsetHeight;\r\n                    if ((this.currentDropLocation!.width! / MAX_SIZE_UNIT) * backgroundWidth < 14 && (this.currentDropLocation!.height! / MAX_SIZE_UNIT) * backgroundHeight < 14) {\r\n                        // Remove drop Location if too small (assume it was an accidental click/drag),\r\n                        this.deleteDropLocation(this.currentDropLocation!);\r\n                    } else {\r\n                        // Notify parent of new drop location\r\n                        this.questionUpdated.emit();\r\n                    }\r\n                    break;\r\n                case DragState.MOVE:\r\n                case DragState.RESIZE_BOTH:\r\n                case DragState.RESIZE_X:\r\n                case DragState.RESIZE_Y:\r\n                    // Notify parent of changed drop location\r\n                    this.questionUpdated.emit();\r\n                    break;\r\n            }\r\n        }\r\n        // Update state\r\n        this.draggingState = DragState.NONE;\r\n        this.currentDropLocation = undefined;\r\n    }\r\n\r\n    /**\r\n     * React to mouse down events on the background to start dragging\r\n     */\r\n    backgroundMouseDown(): void {\r\n        if (this.question.backgroundFilePath && this.draggingState === DragState.NONE) {\r\n            // Save current mouse position as starting position\r\n            this.mouse.startX = this.mouse.x;\r\n            this.mouse.startY = this.mouse.y;\r\n\r\n            // Create new drop location\r\n            this.currentDropLocation = new DropLocation();\r\n            this.currentDropLocation.posX = this.mouse.x;\r\n            this.currentDropLocation.posY = this.mouse.y;\r\n            this.currentDropLocation.width = 0;\r\n            this.currentDropLocation.height = 0;\r\n\r\n            // Add drop location to question\r\n            if (!this.question.dropLocations) {\r\n                this.question.dropLocations = [];\r\n            }\r\n            this.question.dropLocations.push(this.currentDropLocation);\r\n\r\n            // Update state\r\n            this.draggingState = DragState.CREATE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * React to mousedown events on a drop location to start moving it\r\n     * @param dropLocation {object} the drop location to move\r\n     */\r\n    dropLocationMouseDown(dropLocation: DropLocation): void {\r\n        if (this.draggingState === DragState.NONE) {\r\n            const backgroundElement = this.clickLayer.nativeElement as HTMLElement;\r\n            const backgroundWidth = backgroundElement.offsetWidth;\r\n            const backgroundHeight = backgroundElement.offsetHeight;\r\n\r\n            const dropLocationX = (dropLocation.posX! / MAX_SIZE_UNIT) * backgroundWidth;\r\n            const dropLocationY = (dropLocation.posY! / MAX_SIZE_UNIT) * backgroundHeight;\r\n\r\n            // Save offset of mouse in drop location\r\n            this.mouse.offsetX = dropLocationX - this.mouse.x;\r\n            this.mouse.offsetY = dropLocationY - this.mouse.y;\r\n\r\n            // Update state\r\n            this.currentDropLocation = dropLocation;\r\n            this.draggingState = DragState.MOVE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete the given drop location\r\n     * @param dropLocationToDelete {object} the drop location to delete\r\n     */\r\n    deleteDropLocation(dropLocationToDelete: DropLocation): void {\r\n        this.question.dropLocations = this.question.dropLocations!.filter((dropLocation) => dropLocation !== dropLocationToDelete);\r\n        this.deleteMappingsForDropLocation(dropLocationToDelete);\r\n    }\r\n\r\n    /**\r\n     * Add an identical drop location to the question\r\n     * @param dropLocation {object} the drop location to duplicate\r\n     */\r\n    duplicateDropLocation(dropLocation: DropLocation): void {\r\n        const duplicatedDropLocation = new DropLocation();\r\n        duplicatedDropLocation.posX = dropLocation.posX! + dropLocation.width! < 197 ? dropLocation.posX! + 3 : Math.max(0, dropLocation.posX! - 3);\r\n        duplicatedDropLocation.posY = dropLocation.posY! + dropLocation.height! < 197 ? dropLocation.posY! + 3 : Math.max(0, dropLocation.posY! - 3);\r\n        duplicatedDropLocation.width = dropLocation.width;\r\n        duplicatedDropLocation.height = dropLocation.height;\r\n        this.question.dropLocations!.push(duplicatedDropLocation);\r\n    }\r\n\r\n    /**\r\n     * React to mousedown events on the resize handles to start resizing the drop location\r\n     * @param dropLocation {object} the drop location that will be resized\r\n     * @param resizeLocationY {string} 'top', 'middle' or 'bottom'\r\n     * @param resizeLocationX {string} 'left', 'center' or 'right'\r\n     */\r\n    resizeMouseDown(dropLocation: DropLocation, resizeLocationY: string, resizeLocationX: string): void {\r\n        if (this.draggingState === DragState.NONE) {\r\n            const backgroundElement = this.clickLayer.nativeElement as HTMLElement;\r\n            const backgroundWidth = backgroundElement.offsetWidth;\r\n            const backgroundHeight = backgroundElement.offsetHeight;\r\n\r\n            // Update state\r\n            this.draggingState = DragState.RESIZE_BOTH; // Default is both, will be overwritten later, if needed\r\n            this.currentDropLocation = dropLocation;\r\n\r\n            switch (resizeLocationY) {\r\n                case 'top':\r\n                    // Use opposite end as startY\r\n                    this.mouse.startY = ((dropLocation.posY! + dropLocation.height!) / MAX_SIZE_UNIT) * backgroundHeight;\r\n                    break;\r\n                case 'middle':\r\n                    // Limit to x-axis, startY will not be used\r\n                    this.draggingState = DragState.RESIZE_X;\r\n                    break;\r\n                case 'bottom':\r\n                    // Use opposite end as startY\r\n                    this.mouse.startY = (dropLocation.posY! / MAX_SIZE_UNIT) * backgroundHeight;\r\n                    break;\r\n            }\r\n\r\n            switch (resizeLocationX) {\r\n                case 'left':\r\n                    // Use opposite end as startX\r\n                    this.mouse.startX = ((dropLocation.posX! + dropLocation.width!) / MAX_SIZE_UNIT) * backgroundWidth;\r\n                    break;\r\n                case 'center':\r\n                    // Limit to y-axis, startX will not be used\r\n                    this.draggingState = DragState.RESIZE_Y;\r\n                    break;\r\n                case 'right':\r\n                    // Use opposite end as startX\r\n                    this.mouse.startX = (dropLocation.posX! / MAX_SIZE_UNIT) * backgroundWidth;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an empty Text Drag Item to the question\r\n     */\r\n    addTextDragItem(): void {\r\n        // Add drag item to question\r\n        if (!this.question.dragItems) {\r\n            this.question.dragItems = [];\r\n        }\r\n        const dragItem = new DragItem();\r\n        dragItem.text = 'Text';\r\n        this.question.dragItems.push(dragItem);\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Add a Picture Drag Item with the selected file as its picture to the question\r\n     */\r\n    createImageDragItem(event: any): DragItem | undefined {\r\n        const dragItemFile = this.getFileFromEvent(event);\r\n        if (!dragItemFile) {\r\n            return undefined;\r\n        }\r\n        return this.createImageDragItemFromFile(dragItemFile);\r\n    }\r\n\r\n    createImageDragItemFromFile(dragItemFile: File): DragItem {\r\n        const fileName = this.fileService.getUniqueFileName(this.fileService.getExtension(dragItemFile.name), this.filePool);\r\n        this.addNewFile.emit({ fileName, file: dragItemFile });\r\n        this.filePreviewPaths.set(fileName, URL.createObjectURL(dragItemFile));\r\n\r\n        const dragItem = new DragItem();\r\n        dragItem.pictureFilePath = fileName;\r\n        // Add drag item to question\r\n        if (!this.question.dragItems) {\r\n            this.question.dragItems = [];\r\n        }\r\n        this.question.dragItems.push(dragItem);\r\n\r\n        this.questionUpdated.emit();\r\n        return dragItem;\r\n    }\r\n\r\n    /**\r\n     * Delete the drag item from the question\r\n     * @param dragItemToDelete {object} the drag item that should be deleted\r\n     */\r\n    deleteDragItem(dragItemToDelete: DragItem): void {\r\n        this.question.dragItems = this.question.dragItems!.filter((dragItem) => dragItem !== dragItemToDelete);\r\n        if (dragItemToDelete.pictureFilePath) {\r\n            this.removeFile.emit(dragItemToDelete.pictureFilePath);\r\n            this.filePreviewPaths.delete(dragItemToDelete.pictureFilePath);\r\n        }\r\n        this.deleteMappingsForDragItem(dragItemToDelete);\r\n    }\r\n\r\n    /**\r\n     * React to a drag item being dropped on a drop location\r\n     * @param dropLocation {object} the drop location involved\r\n     * @param dropEvent {object} an event containing the drag item involved (can be a copy at this point)\r\n     */\r\n    onDragDrop(dropLocation: DropLocation, dropEvent: CdkDragDrop<DragItem, DragItem>): void {\r\n        const dragItem = dropEvent.item.data as DragItem;\r\n        // Replace dragItem with original (because it may be a copy)\r\n        const questionDragItem = this.question.dragItems!.find((originalDragItem) =>\r\n            dragItem.id ? originalDragItem.id === dragItem.id : originalDragItem.tempID === dragItem.tempID,\r\n        );\r\n\r\n        if (!questionDragItem) {\r\n            // Drag item was not found in question => do nothing\r\n            return;\r\n        }\r\n\r\n        if (!this.question.correctMappings) {\r\n            this.question.correctMappings = [];\r\n        }\r\n\r\n        // Check if this mapping already exists\r\n        if (\r\n            !this.question.correctMappings.some(\r\n                (existingMapping) =>\r\n                    this.dragAndDropQuestionUtil.isSameEntityWithTempId(existingMapping.dropLocation, dropLocation) &&\r\n                    this.dragAndDropQuestionUtil.isSameEntityWithTempId(existingMapping.dragItem, questionDragItem),\r\n            )\r\n        ) {\r\n            // Mapping doesn't exit yet => add this mapping\r\n            const dndMapping = new DragAndDropMapping(questionDragItem, dropLocation);\r\n            this.question.correctMappings.push(dndMapping);\r\n\r\n            // Notify parent of changes\r\n            this.questionUpdated.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the mapping index for the given mapping\r\n     * @param mapping {object} the mapping we want to get an index for\r\n     * @return {number} the index of the mapping (starting with 1), or 0 if unassigned\r\n     */\r\n    getMappingIndex(mapping: DragAndDropMapping): number {\r\n        const visitedDropLocations: DropLocation[] = [];\r\n        // Save reference to this due nested some calls\r\n        if (\r\n            this.question.correctMappings!.some((correctMapping) => {\r\n                if (\r\n                    !visitedDropLocations.some((dropLocation: DropLocation) => {\r\n                        return this.dragAndDropQuestionUtil.isSameEntityWithTempId(dropLocation, correctMapping.dropLocation);\r\n                    })\r\n                ) {\r\n                    visitedDropLocations.push(correctMapping.dropLocation!);\r\n                }\r\n                return this.dragAndDropQuestionUtil.isSameEntityWithTempId(correctMapping.dropLocation, mapping.dropLocation);\r\n            })\r\n        ) {\r\n            return visitedDropLocations.length;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all mappings that involve the given drop location\r\n     * @param dropLocation {object} the drop location for which we want to get all mappings\r\n     * @return {Array} all mappings that belong to the given drop location\r\n     */\r\n    getMappingsForDropLocation(dropLocation: DropLocation): DragAndDropMapping[] {\r\n        if (!this.question.correctMappings) {\r\n            this.question.correctMappings = [];\r\n        }\r\n        return this.question.correctMappings.filter((mapping) => this.dragAndDropQuestionUtil.isSameEntityWithTempId(mapping.dropLocation, dropLocation));\r\n    }\r\n\r\n    /**\r\n     * Get all mappings that involve the given drag item\r\n     * @param dragItem {object} the drag item for which we want to get all mappings\r\n     * @return {Array} all mappings that belong to the given drag item\r\n     */\r\n    getMappingsForDragItem(dragItem: DragItem): DragAndDropMapping[] {\r\n        if (!this.question.correctMappings) {\r\n            this.question.correctMappings = [];\r\n        }\r\n        return (\r\n            this.question.correctMappings\r\n                .filter((mapping) => this.dragAndDropQuestionUtil.isSameEntityWithTempId(mapping.dragItem, dragItem))\r\n                /** Moved the sorting from the template to the function call **/\r\n                .sort((m1, m2) => this.getMappingIndex(m1) - this.getMappingIndex(m2))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete all mappings for the given drop location\r\n     * @param dropLocation {object} the drop location for which we want to delete all mappings\r\n     */\r\n    deleteMappingsForDropLocation(dropLocation: DropLocation): void {\r\n        if (!this.question.correctMappings) {\r\n            this.question.correctMappings = [];\r\n        }\r\n        this.question.correctMappings = this.question.correctMappings.filter((mapping) => !this.dragAndDropQuestionUtil.isSameEntityWithTempId(mapping.dropLocation, dropLocation));\r\n        // Notify parent of changes\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Delete all mappings for the given drag item\r\n     * @param dragItem {object} the drag item for which we want to delete all mappings\r\n     */\r\n    deleteMappingsForDragItem(dragItem: DragItem): void {\r\n        if (!this.question.correctMappings) {\r\n            this.question.correctMappings = [];\r\n        }\r\n        this.question.correctMappings = this.question.correctMappings.filter((mapping) => !this.dragAndDropQuestionUtil.isSameEntityWithTempId(mapping.dragItem, dragItem));\r\n        // Notify parent of changes\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Delete the given mapping from the question\r\n     * @param mappingToDelete {object} the mapping to delete\r\n     */\r\n    deleteMapping(mappingToDelete: DragAndDropMapping): void {\r\n        if (!this.question.correctMappings) {\r\n            this.question.correctMappings = [];\r\n        }\r\n        this.question.correctMappings = this.question.correctMappings.filter((mapping) => mapping !== mappingToDelete);\r\n        // Notify parent of changes\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Move this question one position up\r\n     */\r\n    moveUpQuestion(): void {\r\n        this.questionMoveUp.emit();\r\n    }\r\n\r\n    /**\r\n     * Move this question one position down\r\n     */\r\n    moveDownQuestion(): void {\r\n        this.questionMoveDown.emit();\r\n    }\r\n\r\n    /**\r\n     * Delete this question from the quiz\r\n     */\r\n    deleteQuestion(): void {\r\n        this.filePreviewPaths.forEach((_, fileName) => this.removeFile.emit(fileName));\r\n        this.questionDeleted.emit();\r\n    }\r\n\r\n    /**\r\n     * Change Picture-Drag-Item to Text-Drag-Item with text: 'Text'\r\n     * @param dragItem {dragItem} the dragItem, which will be changed\r\n     */\r\n    changeToTextDragItem(dragItem: DragItem): void {\r\n        this.removeFile.emit(dragItem.pictureFilePath!);\r\n        this.filePreviewPaths.delete(dragItem.pictureFilePath!);\r\n        dragItem.pictureFilePath = undefined;\r\n        dragItem.text = 'Text';\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * Change Text-Drag-Item to Picture-Drag-Item with PictureFile: this.dragItemFile\r\n     * @param dragItem {dragItem} the dragItem, which will be changed\r\n     * @param event file upload event\r\n     */\r\n    changeToPictureDragItem(dragItem: DragItem, event: any): void {\r\n        const dragItemFile = this.getFileFromEvent(event);\r\n        if (!dragItemFile) {\r\n            return;\r\n        }\r\n\r\n        const fileName = this.fileService.getUniqueFileName(this.fileService.getExtension(dragItemFile.name), this.filePool);\r\n\r\n        this.addNewFile.emit({ fileName, file: dragItemFile });\r\n        this.filePreviewPaths.set(fileName, URL.createObjectURL(dragItemFile));\r\n        dragItem.text = undefined;\r\n        dragItem.pictureFilePath = fileName;\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    private getFileFromEvent(event: any): File | undefined {\r\n        const fileList = event.target.files as FileList;\r\n        if (!fileList.length) {\r\n            return undefined;\r\n        }\r\n        return fileList[0];\r\n    }\r\n\r\n    /**\r\n     * Resets the question title\r\n     */\r\n    resetQuestionTitle(): void {\r\n        this.question.title = this.backupQuestion.title;\r\n    }\r\n\r\n    /**\r\n     * Resets the question text\r\n     */\r\n    resetQuestionText(): void {\r\n        this.question.text = this.backupQuestion.text;\r\n        this.question.explanation = this.backupQuestion.explanation;\r\n        this.question.hint = this.backupQuestion.hint;\r\n        this.questionEditorText = generateExerciseHintExplanation(this.question);\r\n    }\r\n\r\n    /**\r\n     * Resets the whole question\r\n     */\r\n    resetQuestion(): void {\r\n        this.question.title = this.backupQuestion.title;\r\n        this.question.invalid = this.backupQuestion.invalid;\r\n        this.question.randomizeOrder = this.backupQuestion.randomizeOrder;\r\n        this.question.scoringType = this.backupQuestion.scoringType;\r\n        this.resetBackground();\r\n        this.question.dropLocations = cloneDeep(this.backupQuestion.dropLocations);\r\n        this.question.dragItems = cloneDeep(this.backupQuestion.dragItems);\r\n        this.question.correctMappings = cloneDeep(this.backupQuestion.correctMappings);\r\n        this.resetQuestionText();\r\n    }\r\n\r\n    /**\r\n     * Resets background-picture\r\n     */\r\n    resetBackground(): void {\r\n        this.removeFile.emit(this.question.backgroundFilePath!);\r\n        this.question.backgroundFilePath = this.backupQuestion.backgroundFilePath;\r\n    }\r\n\r\n    /**\r\n     * Resets the dropLocation\r\n     * @param dropLocation {dropLocation} the dropLocation, which will be reset\r\n     */\r\n    resetDropLocation(dropLocation: DropLocation): void {\r\n        // Find matching DropLocation in backupQuestion\r\n        const backupDropLocation = this.backupQuestion.dropLocations!.find((currentDL) => currentDL.id === dropLocation.id)!;\r\n        // Find current index of our DropLocation\r\n        const dropLocationIndex = this.question.dropLocations!.indexOf(dropLocation);\r\n        // Remove current DropLocation at given index and insert the backup at the same position\r\n        this.question.dropLocations!.splice(dropLocationIndex, 1);\r\n        this.question.dropLocations!.splice(dropLocationIndex, 0, backupDropLocation);\r\n    }\r\n\r\n    /**\r\n     * Resets the dragItem\r\n     * @param dragItem {dragItem} the dragItem, which will be reset\r\n     */\r\n    resetDragItem(dragItem: DragItem): void {\r\n        // Find matching DragItem in backupQuestion\r\n        const backupDragItem = this.backupQuestion.dragItems!.find((currentDI) => currentDI.id === dragItem.id)!;\r\n        // Find current index of our DragItem\r\n        const dragItemIndex = this.question.dragItems!.indexOf(dragItem);\r\n        // Remove current DragItem at given index and insert the backup at the same position\r\n        this.question.dragItems!.splice(dragItemIndex, 1);\r\n        this.question.dragItems!.splice(dragItemIndex, 0, backupDragItem);\r\n        if (dragItem.pictureFilePath) {\r\n            this.removeFile.emit(dragItem.pictureFilePath);\r\n            this.filePreviewPaths.delete(dragItem.pictureFilePath);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggles the preview in the template\r\n     */\r\n    togglePreview(): void {\r\n        this.showPreview = !this.showPreview;\r\n        this.prepareForSave();\r\n    }\r\n\r\n    /**\r\n     * Detect of text changes in the markdown editor\r\n     * 1. Parse the text in the editor to get the newest values\r\n     * 2. Notify the parent component to check the validity of the text\r\n     * @param value the new value of the markdown editor\r\n     */\r\n    changesInMarkdown(value: string): void {\r\n        this.questionEditorText = value;\r\n        this.prepareForSave();\r\n        this.questionUpdated.emit();\r\n        this.changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Creates the drag and drop problem statement from the parsed markdown text, assigning the question text, explanation, and hint according to the domain actions found.\r\n     * @param textWithDomainActions The parsed markdown text with the corresponding domain actions.\r\n     */\r\n    domainActionsFound(textWithDomainActions: TextWithDomainAction[]): void {\r\n        this.cleanupQuestion();\r\n        for (const { text, action } of textWithDomainActions) {\r\n            if (action === undefined && text.length > 0) {\r\n                this.question.text = text;\r\n            }\r\n            if (action instanceof QuizExplanationAction) {\r\n                this.question.explanation = text;\r\n            } else if (action instanceof QuizHintAction) {\r\n                this.question.hint = text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function cleanupQuestion\r\n     * @desc Clear the question to avoid double assignments of one attribute\r\n     */\r\n    private cleanupQuestion() {\r\n        this.question.text = undefined;\r\n        this.question.explanation = undefined;\r\n        this.question.hint = undefined;\r\n    }\r\n\r\n    /**\r\n     * Triggers the saving process by cleaning up the question and calling the markdown parse function\r\n     * to get the newest values in the editor to update the question attributes\r\n     */\r\n    prepareForSave(): void {\r\n        this.cleanupQuestion();\r\n        this.markdownEditor.parseMarkdown();\r\n    }\r\n\r\n    /**\r\n     * Create new drag items for each drop location in the background image\r\n     */\r\n    getImagesFromDropLocations() {\r\n        for (const someLocation of this.question.dropLocations!) {\r\n            // only crop if there is not mapping to this drop location\r\n            if (this.getMappingsForDropLocation(someLocation).length == 0) {\r\n                const image = new Image();\r\n                let dataUrl: string = '';\r\n                let bgWidth;\r\n                let bgHeight;\r\n                image.onload = () => {\r\n                    bgHeight = image.height;\r\n                    bgWidth = image.width;\r\n\r\n                    const canvas = document.createElement('canvas');\r\n                    const context = canvas.getContext('2d');\r\n\r\n                    if (context) {\r\n                        // The click layer is 200x200 so it need to be rescaled to the image\r\n                        const scalarHeight = bgHeight / this.CLICK_LAYER_DIMENSION;\r\n                        const scalarWidth = bgWidth / this.CLICK_LAYER_DIMENSION;\r\n                        canvas.width = someLocation.width! * scalarWidth;\r\n                        canvas.height = someLocation.height! * scalarHeight;\r\n                        context.drawImage(\r\n                            image,\r\n                            someLocation.posX! * scalarWidth,\r\n                            someLocation.posY! * scalarHeight,\r\n                            someLocation.width! * scalarWidth,\r\n                            someLocation.height! * scalarHeight,\r\n                            0,\r\n                            0,\r\n                            someLocation.width! * scalarWidth,\r\n                            someLocation.height! * scalarHeight,\r\n                        );\r\n\r\n                        dataUrl = canvas.toDataURL('image/png');\r\n                        const dragItemCreated = this.createImageDragItemFromFile(this.dataUrlToFile(dataUrl, 'placeholder' + someLocation.posX!))!;\r\n                        const dndMapping = new DragAndDropMapping(dragItemCreated, someLocation);\r\n                        this.question.correctMappings!.push(dndMapping);\r\n                    }\r\n                };\r\n                image.src = this.backgroundImage.src;\r\n            }\r\n        }\r\n        this.blankOutBackgroundImage();\r\n    }\r\n\r\n    /**\r\n     * Takes all drop locations and replaces their location with a white rectangle on the background image\r\n     */\r\n    blankOutBackgroundImage() {\r\n        const backgroundBlankingCanvas = document.createElement('canvas');\r\n        const backgroundBlankingContext = backgroundBlankingCanvas.getContext('2d');\r\n        const image = new Image();\r\n        let bgWidth;\r\n        let bgHeight;\r\n        image.onload = () => {\r\n            bgHeight = image.height;\r\n            bgWidth = image.width;\r\n\r\n            backgroundBlankingCanvas.width = bgWidth;\r\n            backgroundBlankingCanvas.height = bgHeight;\r\n            if (backgroundBlankingContext) {\r\n                const scalarHeight = bgHeight / this.CLICK_LAYER_DIMENSION;\r\n                const scalarWidth = bgWidth / this.CLICK_LAYER_DIMENSION;\r\n\r\n                backgroundBlankingContext.drawImage(image, 0, 0);\r\n                backgroundBlankingContext.fillStyle = 'white';\r\n\r\n                for (const someLocation of this.question.dropLocations!) {\r\n                    // Draw a white rectangle over the specified box location\r\n                    backgroundBlankingContext.fillRect(\r\n                        someLocation.posX! * scalarWidth,\r\n                        someLocation.posY! * scalarHeight,\r\n                        someLocation.width! * scalarWidth,\r\n                        someLocation.height! * scalarHeight,\r\n                    );\r\n                }\r\n                const dataUrlCanvas = backgroundBlankingCanvas.toDataURL('image/png');\r\n                this.setBackgroundFileFromFile(this.dataUrlToFile(dataUrlCanvas, 'background'));\r\n            }\r\n        };\r\n        image.src = this.backgroundImage.src;\r\n    }\r\n\r\n    /**\r\n     * Turns a data url into a blob\r\n     * @param dataUrl the data url string for which the file should be created\r\n     * @returns returns a blob created from the data url\r\n     */\r\n    dataUrlToBlob(dataUrl: string): Blob {\r\n        // Separate metadata from base64-encoded content\r\n        const byteString = window.atob(dataUrl.split(',')[1]);\r\n        // Isolate the MIME type (e.g \"image/png\")\r\n        const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];\r\n        const ab = new ArrayBuffer(byteString.length);\r\n        const ia = new Uint8Array(ab);\r\n        for (let i = 0; i < byteString.length; i++) {\r\n            ia[i] = byteString.charCodeAt(i);\r\n        }\r\n        return new Blob([ab], { type: mimeString });\r\n    }\r\n\r\n    /**\r\n     * Creates a File object from  a blob given through a dataUrl\r\n     * @param dataUrl the data url string for which the file should be created\r\n     * @param fileName the name of the file to be created\r\n     * @returns returns a new file created from the data url\r\n     */\r\n    dataUrlToFile(dataUrl: string, fileName: string): File {\r\n        const blob = this.dataUrlToBlob(dataUrl);\r\n        return new File([blob], fileName, { type: blob.type });\r\n    }\r\n}\r\n", "<div class=\"edit-dnd-question\" [hidden]=\"showPreview\" (mousemove)=\"mouseMove($event)\" (mouseup)=\"mouseUp()\">\r\n    @if (!reEvaluationInProgress) {\r\n        <div class=\"question-options card-header question-card-header\">\r\n            <button\r\n                class=\"btn question-collapse\"\r\n                (click)=\"isQuestionCollapsed = !isQuestionCollapsed\"\r\n                [attr.aria-expanded]=\"!isQuestionCollapsed\"\r\n                [attr.aria-controls]=\"'collapseQuestion' + questionIndex\"\r\n            >\r\n                <fa-icon size=\"3x\" [icon]=\"isQuestionCollapsed ? faAngleRight : faAngleDown\" />\r\n            </button>\r\n            <div class=\"form-group question-title\">\r\n                <input\r\n                    class=\"form-control\"\r\n                    id=\"drag-and-drop-question-title\"\r\n                    [(ngModel)]=\"question.title\"\r\n                    (ngModelChange)=\"questionUpdated.emit()\"\r\n                    placeholder=\"{{ 'artemisApp.quizExercise.placeholder.shortQuestionTitle' | artemisTranslate }}\"\r\n                />\r\n            </div>\r\n            <div class=\"question-card-header-inputs\">\r\n                <div class=\"form-group question-score\">\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n                    <input class=\"form-control\" title=\"score\" type=\"number\" min=\"0\" [max]=\"MAX_POINTS\" [(ngModel)]=\"question.points\" (ngModelChange)=\"questionUpdated.emit()\" />\r\n                </div>\r\n                <div class=\"question-type\">\r\n                    <h3 class=\"mb-0\"><span class=\"badge bg-warning align-text-top\">DnD</span></h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (reEvaluationInProgress) {\r\n        <div class=\"question-options card-header question-card-header-reevaluation\">\r\n            <div class=\"row\">\r\n                <div class=\"col-3 col-lg-1 mt-1\">\r\n                    <button\r\n                        class=\"btn question-collapse\"\r\n                        (click)=\"isQuestionCollapsed = !isQuestionCollapsed\"\r\n                        [attr.aria-expanded]=\"!isQuestionCollapsed\"\r\n                        [attr.aria-controls]=\"'collapseQuestion' + questionIndex\"\r\n                    >\r\n                        <fa-icon size=\"3x\" [icon]=\"isQuestionCollapsed ? faAngleRight : faAngleDown\" />\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-9 col-lg-8 text-start mt-3\">\r\n                    <div class=\"input-group row\">\r\n                        <div class=\"col-10 col-lg-11\">\r\n                            <input\r\n                                class=\"form-control\"\r\n                                [(ngModel)]=\"question.title\"\r\n                                placeholder=\"{{ 'artemisApp.quizExercise.placeholder.shortQuestionTitle' | artemisTranslate }}\"\r\n                                attr.aria-label=\"{{ 'artemisApp.quizExercise.placeholder.shortQuestionTitle' | artemisTranslate }}\"\r\n                                style=\"width: 100%\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"col-2 col-lg-1\">\r\n                            <span class=\"input-group-btn\">\r\n                                <button\r\n                                    class=\"btn btn-outline-secondary\"\r\n                                    type=\"button\"\r\n                                    (click)=\"resetQuestionTitle()\"\r\n                                    [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.resetQuestionTitle' | artemisTranslate\"\r\n                                >\r\n                                    <fa-icon [icon]=\"faUndo\" />\r\n                                </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-3 col-lg-1 mt-lg-3\">\r\n                    <div class=\"question-type\">\r\n                        <h3 class=\"mb-0\"><span class=\"badge bg-warning align-text-top\" style=\"width: 60px\">DnD</span></h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-9 col-lg-2 text-end mt-lg-3\">\r\n                    <button\r\n                        id=\"move-up-button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        (click)=\"moveUpQuestion()\"\r\n                        [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.moveUp' | artemisTranslate\"\r\n                    >\r\n                        <fa-icon [icon]=\"faChevronUp\" />\r\n                    </button>\r\n                    <button\r\n                        id=\"move-down-button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        (click)=\"moveDownQuestion()\"\r\n                        [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.moveDown' | artemisTranslate\"\r\n                    >\r\n                        <fa-icon [icon]=\"faChevronDown\" />\r\n                    </button>\r\n                    <button\r\n                        id=\"reset-button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        (click)=\"resetQuestion()\"\r\n                        [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.resetQuestion' | artemisTranslate\"\r\n                    >\r\n                        <fa-icon [icon]=\"faUndo\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    <div class=\"card-body question-card-body\" [ngbCollapse]=\"isQuestionCollapsed\" id=\"collapseQuestion{{ questionIndex }}\">\r\n        @if (!reEvaluationInProgress) {\r\n            <div class=\"question-options\">\r\n                <div class=\"form-group\">\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.scoringType\" class=\"colon-suffix no-flex-shrink\"></span>\r\n                    <select class=\"form-select\" [(ngModel)]=\"question.scoringType\" (ngModelChange)=\"questionUpdated.emit()\" title=\"scoring type\">\r\n                        <option value=\"ALL_OR_NOTHING\" jhiTranslate=\"artemisApp.quizExercise.scoringType.all_or_nothing\"></option>\r\n                        <option value=\"PROPORTIONAL_WITH_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_with_penalty\"></option>\r\n                        <option value=\"PROPORTIONAL_WITHOUT_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_without_penalty\"></option>\r\n                    </select>\r\n                    <jhi-quiz-scoring-info-modal />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <div class=\"form-check custom-control custom-checkbox\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"{{ 'cbRandomizeOrderDnD' + questionIndex }}\"\r\n                            [(ngModel)]=\"question.randomizeOrder\"\r\n                            class=\"form-check-input custom-control-input\"\r\n                        />\r\n                        <label\r\n                            class=\"form-check-label custom-control-label\"\r\n                            for=\"{{ 'cbRandomizeOrderDnD' + questionIndex }}\"\r\n                            jhiTranslate=\"artemisApp.dragAndDropQuestion.randomizeOrder\"\r\n                        ></label>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <div class=\"delete-button\" (click)=\"deleteQuestion()\">\r\n                        <fa-icon [icon]=\"faTrash\" size=\"2x\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (reEvaluationInProgress) {\r\n            <div class=\"question-options\" class=\"row align-items-center\" style=\"width: 100%\">\r\n                <div class=\"col-12 col-lg-4\">\r\n                    <div class=\"form-group\">\r\n                        <span jhiTranslate=\"artemisApp.quizQuestion.scoringType\" class=\"colon-suffix no-flex-shrink\"></span>\r\n                        <select class=\"form-select\" [(ngModel)]=\"question.scoringType\" (ngModelChange)=\"questionUpdated.emit()\" title=\"scoring type\">\r\n                            <option value=\"ALL_OR_NOTHING\" jhiTranslate=\"artemisApp.quizExercise.scoringType.all_or_nothing\"></option>\r\n                            <option value=\"PROPORTIONAL_WITH_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_with_penalty\"></option>\r\n                            <option value=\"PROPORTIONAL_WITHOUT_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_without_penalty\"></option>\r\n                        </select>\r\n                        <jhi-quiz-scoring-info-modal />\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-lg-2\">\r\n                    <div class=\"form-group\">\r\n                        <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n                        <input class=\"form-control point-input\" title=\"score\" type=\"number\" [value]=\"question.points\" disabled style=\"width: 100%\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-lg-3\">\r\n                    <div class=\"form-group\">\r\n                        <div class=\"form-check custom-control custom-checkbox\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"{{ 'cbRandomizeOrderDnD' + questionIndex }}\"\r\n                                [(ngModel)]=\"question.randomizeOrder\"\r\n                                class=\"form-check-input custom-control-input\"\r\n                            />\r\n                            <label\r\n                                class=\"form-check-label custom-control-label\"\r\n                                for=\"{{ 'cbRandomizeOrderDnD' + questionIndex }}\"\r\n                                jhiTranslate=\"artemisApp.dragAndDropQuestion.randomizeOrder\"\r\n                            ></label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-lg-3 row justify-content-lg-end align-items-start\">\r\n                    <div class=\"col-8 form-group\">\r\n                        <button\r\n                            class=\"btn btn-outline-secondary invalid-button\"\r\n                            [hidden]=\"question.invalid\"\r\n                            (click)=\"question.invalid = true\"\r\n                            jhiTranslate=\"artemisApp.quizExercise.re-evaluate.setQuestionInvalid\"\r\n                        ></button>\r\n                        <button\r\n                            class=\"btn btn-outline-secondary invalid-button\"\r\n                            [hidden]=\"!question.invalid\"\r\n                            [disabled]=\"question.invalid\"\r\n                            jhiTranslate=\"artemisApp.quizExercise.re-evaluate.questionIsInvalid\"\r\n                        ></button>\r\n                    </div>\r\n                    <div class=\"col-2\">\r\n                        <div class=\"re-evaluate-button\" id=\"delete-button\" class=\"delete-button\" (click)=\"deleteQuestion()\">\r\n                            <fa-icon [icon]=\"faTrash\" size=\"2x\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        <div class=\"markupEditorArea\">\r\n            @if (!reEvaluationInProgress) {\r\n                <div class=\"question-content\">\r\n                    <jhi-markdown-editor-monaco\r\n                        #markdownEditor\r\n                        [markdown]=\"questionEditorText\"\r\n                        [showPreviewButton]=\"false\"\r\n                        [domainActions]=\"dragAndDropDomainActions\"\r\n                        (markdownChange)=\"changesInMarkdown($event)\"\r\n                        (textWithDomainActionsFound)=\"domainActionsFound($event)\"\r\n                        class=\"h-auto\"\r\n                    />\r\n                </div>\r\n            } @else {\r\n                <div class=\"markupEditorArea\">\r\n                    <div class=\"question-content row\">\r\n                        <div class=\"col-10 col-lg-11\">\r\n                            <!-- TODO: Fix file upload    -->\r\n                            <jhi-markdown-editor-monaco\r\n                                #markdownEditor\r\n                                [markdown]=\"questionEditorText\"\r\n                                [showPreviewButton]=\"false\"\r\n                                [domainActions]=\"dragAndDropDomainActions\"\r\n                                (markdownChange)=\"changesInMarkdown($event)\"\r\n                                (textWithDomainActionsFound)=\"domainActionsFound($event)\"\r\n                                [enableFileUpload]=\"false\"\r\n                                class=\"h-auto\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"col-2 col-lg-1\">\r\n                            <span class=\"input-group-btn\" style=\"vertical-align: top\">\r\n                                <button\r\n                                    class=\"btn btn-outline-secondary\"\r\n                                    type=\"button\"\r\n                                    (click)=\"resetQuestionText()\"\r\n                                    [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.resetQuestionText' | artemisTranslate\"\r\n                                >\r\n                                    <fa-icon [icon]=\"faUndo\" />\r\n                                </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n        <hr />\r\n        <!--    TODO: Fix the background change for reevaluation -->\r\n        @if (!reEvaluationInProgress) {\r\n            <div class=\"question-options row d-flex justify-content-start\">\r\n                <div class=\"input-group col-lg-7 col-md-8 col-sm-8 col-xs-10 drag-item-file\">\r\n                    <div class=\"input-group-prepend\">\r\n                        <button class=\"btn btn-outline-secondary\" id=\"background-file-input-button\" (click)=\"backgroundFileInput.click()\">\r\n                            <fa-icon [icon]=\"faPlus\" />\r\n                            @if (!reEvaluationInProgress) {\r\n                                <span jhiTranslate=\"artemisApp.dragAndDropQuestion.selectBackgroundPicture\" class=\"no-flex-shrink\"></span>\r\n                            }\r\n                            @if (reEvaluationInProgress) {\r\n                                <span jhiTranslate=\"artemisApp.dragAndDropQuestion.changeBackgroundPicture\" class=\"no-flex-shrink\"></span>\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                    <input #backgroundFileInput id=\"backgroundFileInput{{ questionIndex }}\" type=\"file\" accept=\"image/*\" [hidden]=\"true\" (change)=\"setBackgroundFile($event)\" />\r\n                </div>\r\n                @if (reEvaluationInProgress) {\r\n                    <button class=\"btn btn-outline-secondary btn-lg\" type=\"button\" (click)=\"resetBackground()\">\r\n                        <fa-icon [icon]=\"faUndo\" />\r\n                    </button>\r\n                }\r\n            </div>\r\n        }\r\n        @if (!question.backgroundFilePath) {\r\n            <div class=\"dnd-instructions\">\r\n                <span jhiTranslate=\"artemisApp.dragAndDropQuestion.uploadBackgroundInstructions\"></span>\r\n            </div>\r\n        }\r\n        @if (question.backgroundFilePath && !reEvaluationInProgress) {\r\n            <div class=\"dnd-instructions\">\r\n                <span jhiTranslate=\"artemisApp.dragAndDropQuestion.drawOnBackgroundInstructions\"></span>\r\n            </div>\r\n        }\r\n        <div cdkDropListGroup>\r\n            <div class=\"row\">\r\n                <div class=\"background-area\">\r\n                    <jhi-secured-image\r\n                        #backgroundImage\r\n                        [src]=\"filePreviewPaths.get(question.backgroundFilePath!) || ''\"\r\n                        [alt]=\"'artemisApp.dragAndDropQuestion.noBackgroundPicture' | artemisTranslate\"\r\n                        style=\"visibility: hidden\"\r\n                    />\r\n                    <div #clickLayer class=\"click-layer\" (mousedown)=\"backgroundMouseDown()\" [ngClass]=\"{ disabled: !question.backgroundFilePath }\">\r\n                        @for (dropLocation of question.dropLocations; track dropLocation) {\r\n                            <div\r\n                                id=\"drop-location\"\r\n                                class=\"drop-location\"\r\n                                [ngClass]=\"dropAllowed ? 'drop-allowed' : ''\"\r\n                                [ngStyle]=\"{\r\n                                    top: dropLocation.posY! / 2 + '%',\r\n                                    left: dropLocation.posX! / 2 + '%',\r\n                                    width: dropLocation.width! / 2 + '%',\r\n                                    height: dropLocation.height! / 2 + '%',\r\n                                }\"\r\n                                (mousedown)=\"dropLocationMouseDown(dropLocation)\"\r\n                                (cdkDropListDropped)=\"onDragDrop(dropLocation, $event)\"\r\n                                cdkDropList\r\n                            >\r\n                                <div class=\"dimensions\">{{ dropLocation.width }}x{{ dropLocation.height }}</div>\r\n                                <div class=\"drop-location-buttons\">\r\n                                    @if (reEvaluationInProgress && !dropLocation.invalid) {\r\n                                        <div class=\"re-evaluate-button\" title=\"Set invalid\" (click)=\"dropLocation.invalid = true\">\r\n                                            <fa-icon [icon]=\"faBan\" size=\"lg\" />\r\n                                        </div>\r\n                                    }\r\n                                    @if (reEvaluationInProgress) {\r\n                                        <div class=\"re-evaluate-button\" title=\"Reset\" (click)=\"resetDropLocation(dropLocation)\">\r\n                                            <fa-icon [icon]=\"faUndo\" size=\"lg\" />\r\n                                        </div>\r\n                                    }\r\n                                    @if (!reEvaluationInProgress) {\r\n                                        <div class=\"duplicate-button\" title=\"Duplicate\" (click)=\"duplicateDropLocation(dropLocation)\">\r\n                                            <fa-icon [icon]=\"faCopy\" size=\"lg\" />\r\n                                        </div>\r\n                                    }\r\n                                    <div [ngClass]=\"reEvaluationInProgress ? 're-evaluate-button' : 'delete-button'\" title=\"Delete\" (click)=\"deleteDropLocation(dropLocation)\">\r\n                                        <fa-icon [icon]=\"faTrash\" size=\"lg\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"resize top left\" (mousedown)=\"resizeMouseDown(dropLocation, 'top', 'left')\"></div>\r\n                                <div class=\"resize top center\" (mousedown)=\"resizeMouseDown(dropLocation, 'top', 'center')\"></div>\r\n                                <div class=\"resize top right\" (mousedown)=\"resizeMouseDown(dropLocation, 'top', 'right')\"></div>\r\n                                <div class=\"resize middle left\" (mousedown)=\"resizeMouseDown(dropLocation, 'middle', 'left')\"></div>\r\n                                <div class=\"resize middle right\" (mousedown)=\"resizeMouseDown(dropLocation, 'middle', 'right')\"></div>\r\n                                <div class=\"resize bottom left\" (mousedown)=\"resizeMouseDown(dropLocation, 'bottom', 'left')\"></div>\r\n                                <div class=\"resize bottom center\" (mousedown)=\"resizeMouseDown(dropLocation, 'bottom', 'center')\"></div>\r\n                                <div class=\"resize bottom right\" (mousedown)=\"resizeMouseDown(dropLocation, 'bottom', 'right')\"></div>\r\n                                @if (getMappingsForDropLocation(dropLocation).length) {\r\n                                    <div [ngClass]=\"'mapping-number mapping-color-' + (getMappingIndex(getMappingsForDropLocation(dropLocation)[0]) % 8)\">\r\n                                        {{ getMappingIndex(getMappingsForDropLocation(dropLocation)[0]) }}\r\n                                        <div class=\"unlink-mapping\" (click)=\"deleteMappingsForDropLocation(dropLocation)\">\r\n                                            <fa-icon [icon]=\"faUnlink\" size=\"lg\" />\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            @if (!question.dragItems || !question.dragItems.length) {\r\n                <div class=\"dnd-instructions\">\r\n                    <span jhiTranslate=\"artemisApp.dragAndDropQuestion.addDragItemsInstructions\"></span>\r\n                </div>\r\n            }\r\n            @if (question.dragItems && question.dragItems.length) {\r\n                <div class=\"dnd-instructions\">\r\n                    <span jhiTranslate=\"artemisApp.dragAndDropQuestion.addMappingsInstructions\"></span>\r\n                </div>\r\n            }\r\n            @if (question.dragItems && question.dragItems.length) {\r\n                <div cdkDropList cdkDropListOrientation=\"horizontal\" class=\"drag-items\">\r\n                    @for (dragItem of question.dragItems; track dragItem; let i = $index) {\r\n                        <div class=\"drag-item\" id=\"drag-item-{{ i }}\" cdkDrag [cdkDragDisabled]=\"false\" [cdkDragData]=\"dragItem\">\r\n                            @if (dragItem.pictureFilePath) {\r\n                                <div>\r\n                                    <jhi-secured-image [src]=\"filePreviewPaths.get(dragItem.pictureFilePath)!\" />\r\n                                </div>\r\n                            }\r\n                            @if (!dragItem.pictureFilePath) {\r\n                                <div>\r\n                                    <textarea id=\"drag-item-{{ i }}-text\" [(ngModel)]=\"dragItem.text\" (ngModelChange)=\"questionUpdated.emit()\"></textarea>\r\n                                </div>\r\n                            }\r\n                            @if (!reEvaluationInProgress) {\r\n                                <div class=\"delete-button\" title=\"Delete\" (click)=\"deleteDragItem(dragItem)\">\r\n                                    <fa-icon [icon]=\"faTrash\" size=\"lg\" />\r\n                                </div>\r\n                            }\r\n                            @if (reEvaluationInProgress) {\r\n                                <div class=\"delete-button\">\r\n                                    @if (dragItem.pictureFilePath) {\r\n                                        <div class=\"re-evaluate-button\" title=\"Change to Text Drag Item\" (click)=\"changeToTextDragItem(dragItem)\">\r\n                                            <fa-icon [icon]=\"faFont\" size=\"lg\" />\r\n                                        </div>\r\n                                    }\r\n                                    <div class=\"re-evaluate-button\" title=\"Change to Picture Drag Item\" (click)=\"reevalChangeToImageInput.click()\">\r\n                                        <input #reevalChangeToImageInput [hidden]=\"true\" type=\"file\" accept=\"image/*\" (change)=\"changeToPictureDragItem(dragItem, $event)\" />\r\n                                        <fa-icon [icon]=\"farFileImage\" size=\"lg\" />\r\n                                    </div>\r\n                                    @if (!dragItem.invalid) {\r\n                                        <div class=\"re-evaluate-button\" title=\"Set invalid\" (click)=\"dragItem.invalid = true\">\r\n                                            <fa-icon [icon]=\"faBan\" size=\"lg\" />\r\n                                        </div>\r\n                                    }\r\n                                    <div class=\"re-evaluate-button\" title=\"Reset\" (click)=\"resetDragItem(dragItem)\">\r\n                                        <fa-icon [icon]=\"faUndo\" size=\"lg\" />\r\n                                    </div>\r\n                                    <div class=\"re-evaluate-button\" title=\"Delete\" (click)=\"deleteDragItem(dragItem)\">\r\n                                        <fa-icon [icon]=\"faTrash\" size=\"lg\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div class=\"drag-handle drag-handle-wrapper\" title=\"Move\">\r\n                                <fa-icon [icon]=\"faBars\" class=\"drag-handle\" size=\"lg\" />\r\n                            </div>\r\n                            @if (reEvaluationInProgress) {\r\n                                <div class=\"dimensions\">\r\n                                    @if (dragItem.invalid) {\r\n                                        <span style=\"color: red\" jhiTranslate=\"artemisApp.quizQuestion.invalid\"></span>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            <div class=\"mapping-numbers-wrapper\">\r\n                                @for (mapping of getMappingsForDragItem(dragItem); track mapping) {\r\n                                    <div [ngClass]=\"'mapping-number mapping-color-' + (getMappingIndex(mapping) % 8)\">\r\n                                        {{ getMappingIndex(mapping) }}\r\n                                        <div class=\"unlink-mapping\" (click)=\"deleteMapping(mapping)\">\r\n                                            <fa-icon [icon]=\"faUnlink\" size=\"lg\" />\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            <div class=\"placeholder-dnd\" *cdkDragPreview matchSize>\r\n                                <ng-template *ngTemplateOutlet=\"preview\" />\r\n                            </div>\r\n                            <div *cdkDragPlaceholder></div>\r\n                            <ng-template #preview>\r\n                                <div style=\"border: 1px solid; background: #fafafa; padding: 4px 2px 2px 2px\">\r\n                                    <div title=\"Move\">\r\n                                        <fa-icon [icon]=\"faBars\" size=\"lg\" />\r\n                                    </div>\r\n                                    @if (dragItem.pictureFilePath) {\r\n                                        <div>\r\n                                            <jhi-secured-image [src]=\"filePreviewPaths.get(dragItem.pictureFilePath) || ''\" />\r\n                                        </div>\r\n                                    }\r\n                                    @if (!dragItem.pictureFilePath) {\r\n                                        <div>\r\n                                            <textarea disabled [(ngModel)]=\"dragItem.text\" (ngModelChange)=\"questionUpdated.emit()\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n        <!--    TODO: Fix the item input for reevaluation -->\r\n        @if (!reEvaluationInProgress) {\r\n            <div class=\"question-options row d-flex justify-content-start\">\r\n                <div class=\"col-lg-7 col-md-8 col-sm-8 col-xs-10 drag-item-file\">\r\n                    <button class=\"btn btn-outline-secondary me-2\" (click)=\"dragItemFileInput.click()\">\r\n                        <fa-icon [icon]=\"faPlus\" />\r\n                        @if (reEvaluationInProgress) {\r\n                            <span jhiTranslate=\"artemisApp.dragAndDropQuestion.changeDragItemPicture\"></span>\r\n                        }\r\n                        @if (!reEvaluationInProgress) {\r\n                            <span jhiTranslate=\"artemisApp.dragAndDropQuestion.addDragItemPicture\"></span>\r\n                        }\r\n                    </button>\r\n                    <input #dragItemFileInput id=\"dragItemFileInput{{ questionIndex }}\" type=\"file\" accept=\"image/*\" [hidden]=\"true\" (change)=\"createImageDragItem($event)\" />\r\n                    <button class=\"btn btn-outline-secondary me-2\" id=\"add-text-drag-item\" (click)=\"addTextDragItem()\">\r\n                        <fa-icon [icon]=\"faPlus\" />\r\n                        <span jhiTranslate=\"artemisApp.dragAndDropQuestion.addDragItemText\"></span>\r\n                    </button>\r\n                    <button\r\n                        class=\"btn btn-outline-secondary\"\r\n                        id=\"crop-drag-item\"\r\n                        [ngbTooltip]=\"'artemisApp.dragAndDropQuestion.cutImagesFromDropLocationTip' | artemisTranslate\"\r\n                        (click)=\"getImagesFromDropLocations()\"\r\n                    >\r\n                        <fa-icon [icon]=\"faScissors\" />\r\n                        <span jhiTranslate=\"artemisApp.dragAndDropQuestion.cutImagesFromDropLocation\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (!reEvaluationInProgress) {\r\n            <hr />\r\n            <div class=\"question-options\">\r\n                <div ngbTooltip=\"{{ 'artemisApp.dragAndDropQuestion.disabledPreviewTooltip' | artemisTranslate }}\" [disableTooltip]=\"!!question.backgroundFilePath\">\r\n                    <button class=\"btn btn-outline-secondary\" [disabled]=\"!question.backgroundFilePath\" (click)=\"togglePreview()\">\r\n                        <fa-icon [icon]=\"faEye\" />\r\n                        <span jhiTranslate=\"entity.action.preview\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n@if (!reEvaluationInProgress && showPreview) {\r\n    <div class=\"preview-dnd-question\">\r\n        <jhi-drag-and-drop-question [question]=\"question\" [mappings]=\"[]\" [questionIndex]=\"questionIndex\" [filePreviewPaths]=\"filePreviewPaths\" />\r\n        <hr />\r\n        <div class=\"btn btn-outline-secondary\" (click)=\"togglePreview()\">\r\n            <fa-icon [icon]=\"faPencilAlt\" />\r\n            <span jhiTranslate=\"entity.action.edit\"></span>\r\n        </div>\r\n    </div>\r\n}\r\n", "import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { ShortAnswerSpot } from 'app/entities/quiz/short-answer-spot.model';\r\nimport { ShortAnswerSolution } from 'app/entities/quiz/short-answer-solution.model';\r\nimport { CanBecomeInvalid } from 'app/entities/quiz/drop-location.model';\r\n\r\nexport class ShortAnswerMapping implements BaseEntity, CanBecomeInvalid {\r\n    public id?: number;\r\n    public shortAnswerSpotIndex?: number;\r\n    public shortAnswerSolutionIndex?: number;\r\n    public invalid = false; // default value\r\n    public solution?: ShortAnswerSolution;\r\n    public spot?: ShortAnswerSpot;\r\n    public question?: ShortAnswerQuestion;\r\n\r\n    constructor(spot: ShortAnswerSpot | undefined, solution: ShortAnswerSolution | undefined) {\r\n        this.spot = spot;\r\n        this.solution = solution;\r\n    }\r\n}\r\n", "import { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { BaseEntityWithTempId, CanBecomeInvalid } from 'app/entities/quiz/drop-location.model';\r\n\r\nexport class ShortAnswerSpot extends BaseEntityWithTempId implements CanBecomeInvalid {\r\n    public width?: number;\r\n    public spotNr?: number;\r\n    public invalid = false; // default value\r\n    public question?: ShortAnswerQuestion;\r\n\r\n    public posX?: number;\r\n    public posY?: number;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n", "import { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { BaseEntityWithTempId, CanBecomeInvalid } from 'app/entities/quiz/drop-location.model';\r\n\r\nexport class ShortAnswerSolution extends BaseEntityWithTempId implements CanBecomeInvalid {\r\n    public text?: string;\r\n    public invalid = false; // default value\r\n    public question?: ShortAnswerQuestion;\r\n\r\n    public posX?: number;\r\n    public posY?: number;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n", "import { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { InsertShortAnswerOptionAction } from 'app/shared/monaco-editor/model/actions/quiz/insert-short-answer-option.action';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\n\r\n/**\r\n * Action to insert a short answer spot at the current cursor position.\r\n * After inserting the spot, this action also inserts an option linked to the spot.\r\n */\r\nexport class InsertShortAnswerSpotAction extends TextEditorAction {\r\n    static readonly ID = 'insert-short-answer-spot.action';\r\n    spotNumber = 1;\r\n\r\n    /**\r\n     * @param insertShortAnswerOptionAction The action to insert a short answer option. This action will be executed after inserting the spot. Must be registered in the same editor.\r\n     */\r\n    constructor(readonly insertShortAnswerOptionAction: InsertShortAnswerOptionAction) {\r\n        super(InsertShortAnswerSpotAction.ID, 'artemisApp.shortAnswerQuestion.editor.addSpot', undefined);\r\n    }\r\n\r\n    /**\r\n     * Inserts a spot at the current cursor position (if no text is selected) or replaces the selected text with a spot.\r\n     * Then, it inserts an option linked to the spot. If the selected text is not empty, it will be used as the option's text.\r\n     * @param editor The editor to insert the spot in.\r\n     */\r\n    run(editor: TextEditor): void {\r\n        // Changes to the editor contents will trigger an update of the spot number. We keep it stored here to use it when inserting the spot.\r\n        const number = this.spotNumber;\r\n        const text = `[-spot ${number}]`;\r\n        const selectedText = this.getSelectedText(editor);\r\n        this.replaceTextAtCurrentSelection(editor, text);\r\n        this.insertShortAnswerOptionAction.executeInCurrentEditor({ spotNumber: number, optionText: selectedText });\r\n    }\r\n}\r\n", "import { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { TextEditor } from 'app/shared/monaco-editor/model/actions/adapter/text-editor.interface';\r\nimport { makeTextEditorRange } from 'app/shared/monaco-editor/model/actions/adapter/text-editor-range.model';\r\n\r\ninterface InsertShortAnswerOptionArgs {\r\n    spotNumber?: number;\r\n    optionText?: string;\r\n}\r\n\r\n/**\r\n * Action to insert a short answer option ([-option #] Option text) at the end of the editor.\r\n */\r\nexport class InsertShortAnswerOptionAction extends TextEditorAction {\r\n    static readonly ID = 'insert-short-answer-option.action';\r\n    static readonly DEFAULT_TEXT = 'Enter an answer option here and ensure the spot number is correct.';\r\n    static readonly DEFAULT_TEXT_SHORT = 'Enter an answer option here.';\r\n\r\n    constructor() {\r\n        super(InsertShortAnswerOptionAction.ID, 'artemisApp.shortAnswerQuestion.editor.addOption', undefined);\r\n        this.id = InsertShortAnswerOptionAction.ID;\r\n        this.translationKey = 'artemisApp.shortAnswerQuestion.editor.addOption';\r\n    }\r\n\r\n    executeInCurrentEditor(args?: InsertShortAnswerOptionArgs) {\r\n        super.executeInCurrentEditor(args);\r\n    }\r\n\r\n    /**\r\n     * Inserts a short answer option at the end of the editor. This option has the format [-option #] Option text, where # is the spot number.\r\n     * @param editor The editor to insert the option in.\r\n     * @param args The optional arguments for the action. Can include a spot number (will be # otherwise) and the option text (if blank/absent, the default text will be used).\r\n     */\r\n    run(editor: TextEditor, args?: InsertShortAnswerOptionArgs): void {\r\n        // Note that even if the optionText is provided, it may be blank. This is why we use || instead of ?? here.\r\n        const optionText = args?.optionText || InsertShortAnswerOptionAction.DEFAULT_TEXT;\r\n        let insertedText: string;\r\n        if (args?.spotNumber) {\r\n            insertedText = `\\n[-option ${args.spotNumber}] ${optionText}`;\r\n        } else {\r\n            insertedText = `\\n[-option #] ${optionText}`;\r\n        }\r\n        // Add additional spacing if the last line is not also an option\r\n        if (!this.getLineText(editor, this.getLineCount(editor))?.startsWith('[-option')) {\r\n            insertedText = `\\n\\n${insertedText}`;\r\n        }\r\n        this.insertTextAtPosition(editor, this.getEndPosition(editor), insertedText);\r\n        // For convenience, we want to select the option text if it is the default text\r\n        if (optionText === InsertShortAnswerOptionAction.DEFAULT_TEXT) {\r\n            const newEndPosition = this.getEndPosition(editor);\r\n            const selection = makeTextEditorRange(\r\n                newEndPosition.getLineNumber(),\r\n                newEndPosition.getColumn() - InsertShortAnswerOptionAction.DEFAULT_TEXT.length,\r\n                newEndPosition.getLineNumber(),\r\n                newEndPosition.getColumn(),\r\n            );\r\n            this.setSelection(editor, selection);\r\n        }\r\n        editor.focus();\r\n    }\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'jhi-match-percentage-info-modal',\r\n    templateUrl: './match-percentage-info-modal.component.html',\r\n    imports: [TranslateDirective, FaIconComponent],\r\n})\r\nexport class MatchPercentageInfoModalComponent {\r\n    private modalService = inject(NgbModal);\r\n\r\n    // Icons\r\n    farQuestionCircle = faQuestionCircle;\r\n\r\n    /**\r\n     * Open a large modal with the given content.\r\n     * @param content the content to display\r\n     */\r\n    open(content: any) {\r\n        this.modalService.open(content, { size: 'lg' });\r\n    }\r\n}\r\n", "<ng-template #info let-c=\"close\" let-d=\"dismiss\">\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" jhiTranslate=\"artemisApp.quizExercise.matchingInfoModalTitle\"></h4>\r\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"d()\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <table class=\"table\">\r\n            <tr>\r\n                <th jhiTranslate=\"artemisApp.quizExercise.matchLetterCase.title\"></th>\r\n                <td jhiTranslate=\"artemisApp.quizExercise.matchLetterCase.explanation\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <th jhiTranslate=\"artemisApp.quizExercise.matchPercentage.explanationTitle\"></th>\r\n                <td jhiTranslate=\"artemisApp.quizExercise.matchPercentage.explanation\"></td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"c()\">Close</button>\r\n    </div>\r\n</ng-template>\r\n<div>\r\n    <button class=\"btn\" (click)=\"open(info)\"><fa-icon [icon]=\"farQuestionCircle\" /></button>\r\n</div>\r\n", "import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    inject,\r\n} from '@angular/core';\r\nimport { ShortAnswerQuestionUtil } from 'app/exercises/quiz/shared/short-answer-question-util.service';\r\nimport { NgbCollapse, NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ShortAnswerQuestion } from 'app/entities/quiz/short-answer-question.model';\r\nimport { ShortAnswerMapping } from 'app/entities/quiz/short-answer-mapping.model';\r\nimport { QuizQuestionEdit } from 'app/exercises/quiz/manage/quiz-question-edit.interface';\r\nimport { ShortAnswerSpot } from 'app/entities/quiz/short-answer-spot.model';\r\nimport { ShortAnswerSolution } from 'app/entities/quiz/short-answer-solution.model';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { QuizQuestion } from 'app/entities/quiz/quiz-question.model';\r\nimport { markdownForHtml } from 'app/shared/util/markdown.conversion.util';\r\nimport { generateExerciseHintExplanation, parseExerciseHintExplanation } from 'app/shared/util/markdown.util';\r\nimport { faAngleDown, faAngleRight, faBan, faBars, faChevronDown, faChevronUp, faTrash, faUndo, faUnlink } from '@fortawesome/free-solid-svg-icons';\r\nimport { MAX_QUIZ_QUESTION_POINTS, MAX_QUIZ_SHORT_ANSWER_TEXT_LENGTH } from 'app/shared/constants/input.constants';\r\nimport { MarkdownEditorHeight, MarkdownEditorMonacoComponent } from 'app/shared/markdown-editor/monaco/markdown-editor-monaco.component';\r\nimport { BoldAction } from 'app/shared/monaco-editor/model/actions/bold.action';\r\nimport { ItalicAction } from 'app/shared/monaco-editor/model/actions/italic.action';\r\nimport { UnderlineAction } from 'app/shared/monaco-editor/model/actions/underline.action';\r\nimport { CodeAction } from 'app/shared/monaco-editor/model/actions/code.action';\r\nimport { UrlAction } from 'app/shared/monaco-editor/model/actions/url.action';\r\nimport { OrderedListAction } from 'app/shared/monaco-editor/model/actions/ordered-list.action';\r\nimport { BulletedListAction } from 'app/shared/monaco-editor/model/actions/bulleted-list.action';\r\nimport { StrikethroughAction } from 'app/shared/monaco-editor/model/actions/strikethrough.action';\r\nimport { InsertShortAnswerSpotAction } from 'app/shared/monaco-editor/model/actions/quiz/insert-short-answer-spot.action';\r\nimport { TextEditorAction } from 'app/shared/monaco-editor/model/actions/text-editor-action.model';\r\nimport { InsertShortAnswerOptionAction } from 'app/shared/monaco-editor/model/actions/quiz/insert-short-answer-option.action';\r\nimport { SHORT_ANSWER_QUIZ_QUESTION_EDITOR_OPTIONS } from 'app/shared/monaco-editor/monaco-editor-option.helper';\r\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { QuizScoringInfoModalComponent } from '../quiz-scoring-info-modal/quiz-scoring-info-modal.component';\r\nimport { MatchPercentageInfoModalComponent } from '../match-percentage-info-modal/match-percentage-info-modal.component';\r\nimport { CdkDrag, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup } from '@angular/cdk/drag-drop';\r\nimport { NgClass } from '@angular/common';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\n\r\n@Component({\r\n    selector: 'jhi-short-answer-question-edit',\r\n    templateUrl: './short-answer-question-edit.component.html',\r\n    styleUrls: ['./short-answer-question-edit.component.scss', '../quiz-exercise.scss', '../../shared/quiz.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        FaIconComponent,\r\n        FormsModule,\r\n        TranslateDirective,\r\n        NgbTooltip,\r\n        NgbCollapse,\r\n        QuizScoringInfoModalComponent,\r\n        MatchPercentageInfoModalComponent,\r\n        MarkdownEditorMonacoComponent,\r\n        CdkDropListGroup,\r\n        CdkDropList,\r\n        NgClass,\r\n        CdkDrag,\r\n        CdkDragPlaceholder,\r\n        CdkDragPreview,\r\n        ArtemisTranslatePipe,\r\n    ],\r\n})\r\nexport class ShortAnswerQuestionEditComponent implements OnInit, OnChanges, AfterViewInit, QuizQuestionEdit {\r\n    shortAnswerQuestionUtil = inject(ShortAnswerQuestionUtil);\r\n    private modalService = inject(NgbModal);\r\n    private changeDetector = inject(ChangeDetectorRef);\r\n\r\n    @ViewChild('questionEditor', { static: false }) private questionEditor: MarkdownEditorMonacoComponent;\r\n    @ViewChild('question', { static: false }) questionElement: ElementRef;\r\n\r\n    markdownActions: TextEditorAction[];\r\n    insertShortAnswerOptionAction = new InsertShortAnswerOptionAction();\r\n    insertShortAnswerSpotAction = new InsertShortAnswerSpotAction(this.insertShortAnswerOptionAction);\r\n\r\n    shortAnswerQuestion: ShortAnswerQuestion;\r\n\r\n    @Input()\r\n    set question(quizQuestion: QuizQuestion) {\r\n        this.shortAnswerQuestion = quizQuestion as ShortAnswerQuestion;\r\n    }\r\n\r\n    @Input()\r\n    questionIndex: number;\r\n    @Input()\r\n    reEvaluationInProgress: boolean;\r\n\r\n    @Output()\r\n    questionUpdated = new EventEmitter();\r\n    @Output()\r\n    questionDeleted = new EventEmitter();\r\n    /** Question move up and down are used for re-evaluate **/\r\n    @Output()\r\n    questionMoveUp = new EventEmitter();\r\n    @Output()\r\n    questionMoveDown = new EventEmitter();\r\n\r\n    readonly MAX_CHARACTER_COUNT = MAX_QUIZ_SHORT_ANSWER_TEXT_LENGTH;\r\n\r\n    questionEditorText = '';\r\n    showVisualMode: boolean;\r\n\r\n    /** Status boolean for collapse status **/\r\n    isQuestionCollapsed: boolean;\r\n\r\n    /** Variables needed for the setup of editorText **/\r\n    // equals the highest spotNr\r\n    numberOfSpot = 1;\r\n    // has all solution options with their mapping (each spotNr)\r\n    optionsWithID: string[] = [];\r\n\r\n    /** For visual mode **/\r\n    textParts: (string | undefined)[][];\r\n\r\n    backupQuestion: ShortAnswerQuestion;\r\n\r\n    // Icons\r\n    faBan = faBan;\r\n    faTrash = faTrash;\r\n    faUndo = faUndo;\r\n    faChevronUp = faChevronUp;\r\n    faChevronDown = faChevronDown;\r\n    faBars = faBars;\r\n    faUnlink = faUnlink;\r\n    faAngleRight = faAngleRight;\r\n    faAngleDown = faAngleDown;\r\n\r\n    protected readonly MAX_POINTS = MAX_QUIZ_QUESTION_POINTS;\r\n    protected readonly MarkdownEditorHeight = MarkdownEditorHeight;\r\n\r\n    ngOnInit(): void {\r\n        this.markdownActions = [\r\n            new BoldAction(),\r\n            new ItalicAction(),\r\n            new UnderlineAction(),\r\n            new StrikethroughAction(),\r\n            new CodeAction(),\r\n            new UrlAction(),\r\n            new BulletedListAction(),\r\n            new OrderedListAction(),\r\n            this.insertShortAnswerSpotAction,\r\n            this.insertShortAnswerOptionAction,\r\n        ];\r\n\r\n        // create deepcopy\r\n        this.backupQuestion = cloneDeep(this.shortAnswerQuestion);\r\n\r\n        /** We create now the structure on how to display the text of the question\r\n         * 1. The question text is split at every new line. The first element of the array would be then the first line of the question text.\r\n         * 2. Now each line of the question text will be divided into each word (we use whitespace and the borders of spots as separator, see regex).\r\n         */\r\n        this.textParts = this.parseQuestionTextIntoTextBlocks(this.shortAnswerQuestion.text!);\r\n\r\n        /** Assign status booleans and strings **/\r\n        this.showVisualMode = false;\r\n        this.isQuestionCollapsed = false;\r\n    }\r\n\r\n    /**\r\n     * @function ngOnChanges\r\n     * @desc Watch for any changes to the question model and notify listener\r\n     * @param changes {SimpleChanges}\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        /** Check if previousValue wasn't null to avoid firing at component initialization **/\r\n        if (changes.question && changes.question.previousValue) {\r\n            this.questionUpdated.emit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function ngAfterViewInit\r\n     * @desc Setup the question editor\r\n     */\r\n    ngAfterViewInit(): void {\r\n        if (!this.reEvaluationInProgress) {\r\n            requestAnimationFrame(this.setupQuestionEditor.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses the text taken as parameter into text blocks\r\n     * @param text the text which should be parsed\r\n     */\r\n    private parseQuestionTextIntoTextBlocks(text: string): string[][] {\r\n        const returnValue: string[][] = [];\r\n        const lineText = text.split(/\\n+/g);\r\n        lineText.forEach((line) => {\r\n            const textParts = this.shortAnswerQuestionUtil.divideQuestionTextIntoTextParts(line)[0];\r\n            let parsedLine: string[] = [];\r\n            textParts.forEach((block) => {\r\n                if (block.includes('[-spot ', 0)) {\r\n                    parsedLine.push(block);\r\n                } else {\r\n                    let blockSplit = block.split(/\\s+/g);\r\n                    blockSplit = blockSplit.filter((ele) => ele !== '');\r\n                    if (blockSplit.length > 0) {\r\n                        parsedLine = parsedLine.concat(blockSplit);\r\n                    }\r\n                }\r\n            });\r\n            // add indentation\r\n            if (parsedLine.length > 0) {\r\n                const indentation = this.shortAnswerQuestionUtil.getIndentation(line);\r\n                parsedLine[0] = indentation.concat(parsedLine[0]);\r\n            }\r\n            returnValue.push(parsedLine);\r\n        });\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @function setupQuestionEditor\r\n     * @desc Set up Question text editor\r\n     */\r\n    setupQuestionEditor(): void {\r\n        // Sets the counter to the highest spotNr and generates solution options with their mapping (each spotNr)\r\n        this.numberOfSpot = this.shortAnswerQuestion.spots!.length + 1;\r\n        this.questionEditor.applyOptionPreset(SHORT_ANSWER_QUIZ_QUESTION_EDITOR_OPTIONS);\r\n        // Generate markdown from question and show result in editor\r\n        this.questionEditorText = this.generateMarkdown();\r\n        this.changeDetector.detectChanges();\r\n        this.parseMarkdown(this.questionEditorText);\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * @function setOptionsWithID\r\n     * @desc Set up of all solution option with their mapping (spotNr)\r\n     */\r\n    setOptionsWithID() {\r\n        this.optionsWithID = [];\r\n        this.shortAnswerQuestion.solutions!.forEach((solution) => {\r\n            let option = '[-option ';\r\n            let firstSolution = true;\r\n            const spotsForSolution = this.shortAnswerQuestionUtil.getAllSpotsForSolutions(this.shortAnswerQuestion.correctMappings, solution);\r\n            spotsForSolution!.forEach((spotForSolution) => {\r\n                if (!spotForSolution) {\r\n                    return;\r\n                }\r\n                if (firstSolution) {\r\n                    option += this.shortAnswerQuestion.spots?.filter((spot) => this.shortAnswerQuestionUtil.isSameSpot(spot, spotForSolution))[0].spotNr;\r\n                    firstSolution = false;\r\n                } else {\r\n                    option += ',' + this.shortAnswerQuestion.spots?.filter((spot) => this.shortAnswerQuestionUtil.isSameSpot(spot, spotForSolution))[0].spotNr;\r\n                }\r\n            });\r\n            option += option === '[-option ' ? '#]' : ']';\r\n            this.optionsWithID.push(option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @function generateMarkdown\r\n     * @desc Generate the markdown text for this question\r\n     * 1. First the question text, hint, and explanation are added using ArtemisMarkdown\r\n     * 2. After an empty line, the solutions are added\r\n     * 3. For each solution: text is added using ArtemisMarkdown\r\n     */\r\n    generateMarkdown(): string {\r\n        this.setOptionsWithID();\r\n        let markdownText = generateExerciseHintExplanation(this.shortAnswerQuestion);\r\n\r\n        if (this.shortAnswerQuestion.solutions?.length) {\r\n            markdownText += '\\n\\n\\n' + this.shortAnswerQuestion.solutions.map((solution, index) => this.optionsWithID[index] + ' ' + solution.text!.trim()).join('\\n');\r\n        }\r\n        return markdownText;\r\n    }\r\n\r\n    /**\r\n     * @function parseMarkdown\r\n     * @param text {string} the Markdown text to parse\r\n     * @desc Parse the markdown and apply the result to the question's data\r\n     * The markdown rules are as follows:\r\n     *\r\n     * 1. Text is split at [-option\r\n     *    => The first part (any text before the first [-option ) is the question text\r\n     * 2. The questionText is split further at [-spot to determine all spots and spotNr.\r\n     * 3. The question text is split into text, hint, and explanation using ArtemisMarkdown\r\n     * 4. For every solution (Parts after each \"[-option \" and \"]\":\r\n     *    4.a) Same treatment as the question text for text, hint, and explanation\r\n     *    4.b) Is used to create the mappings\r\n     *\r\n     * Note: Existing IDs for solutions and spots are reused in the original order.\r\n     */\r\n    parseMarkdown(text: string): void {\r\n        // First split up by \"[-option \" tag and separate first part of the split as text and second part as solutionParts\r\n        const questionParts = text.split(/\\[-option /g);\r\n        const questionText = questionParts[0];\r\n\r\n        // Split into spots to generate this structure: {\"1\",\"2\",\"3\"}\r\n        const spotParts = questionText\r\n            .split(/\\[-spot/g)\r\n            .map((splitText) => splitText.split(/\\]/g))\r\n            .slice(1)\r\n            .map((sliceText) => sliceText[0]);\r\n\r\n        // Split new created Array by \"]\" to generate this structure: {\"1,2\", \" SolutionText\"}\r\n        const solutionParts = questionParts.map((questionPart) => questionPart.split(/\\]/g)).slice(1);\r\n\r\n        // Split question into main text, hint and explanation\r\n        parseExerciseHintExplanation(questionText, this.shortAnswerQuestion);\r\n\r\n        // Extract existing solutions IDs\r\n        const existingSolutionIDs = this.shortAnswerQuestion.solutions!.filter((solution) => solution.id !== undefined).map((solution) => solution.id);\r\n        this.shortAnswerQuestion.solutions = [];\r\n        this.shortAnswerQuestion.correctMappings = [];\r\n\r\n        // Extract existing spot IDs\r\n        const existingSpotIDs = this.shortAnswerQuestion.spots!.filter((spot) => spot.id !== undefined).map((spot) => spot.id);\r\n        this.shortAnswerQuestion.spots = [];\r\n\r\n        // setup spots\r\n        for (const spotID of spotParts) {\r\n            const spot = new ShortAnswerSpot();\r\n            spot.width = 15;\r\n\r\n            // Assign existing ID if available\r\n            if (this.shortAnswerQuestion.spots.length < existingSpotIDs.length) {\r\n                spot.id = existingSpotIDs[this.shortAnswerQuestion.spots.length];\r\n            }\r\n            spot.spotNr = +spotID.trim();\r\n            this.shortAnswerQuestion.spots.push(spot);\r\n        }\r\n\r\n        // Work on solution\r\n        for (const solutionText of solutionParts) {\r\n            // Find the box (text in-between the parts)\r\n            const solution = new ShortAnswerSolution();\r\n            solution.text = solutionText[1].trim();\r\n\r\n            // Assign existing ID if available\r\n            if (this.shortAnswerQuestion.solutions.length < existingSolutionIDs.length) {\r\n                solution.id = existingSolutionIDs[this.shortAnswerQuestion.solutions.length];\r\n            }\r\n            this.shortAnswerQuestion.solutions.push(solution);\r\n\r\n            // create mapping according to this structure: {spot(s), solution} -> {\"1,2\", \" SolutionText\"}\r\n            this.createMapping(solutionText[0], solution);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function creates the mapping. It differentiates 2 cases one solution To one spot (case 1) and\r\n     * one solution to many spots.\r\n     */\r\n    private createMapping(spots: string, solution: ShortAnswerSolution) {\r\n        const spotIds = spots.split(',').map(Number);\r\n\r\n        for (const id of spotIds) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n            const spotForMapping = this.shortAnswerQuestion.spots?.find((spot) => spot.spotNr === id)!;\r\n            this.shortAnswerQuestion.correctMappings!.push(new ShortAnswerMapping(spotForMapping, solution));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function opens the modal for the help dialog.\r\n     */\r\n    open(content: any) {\r\n        this.modalService.open(content, { size: 'lg' });\r\n    }\r\n\r\n    /**\r\n     * @function addSpotAtCursor\r\n     * @desc Add the markdown for a spot at the current cursor location and\r\n     * an option connected to the spot below the last visible row\r\n     */\r\n    addSpotAtCursor(): void {\r\n        this.insertShortAnswerSpotAction.executeInCurrentEditor({ spotNumber: this.numberOfSpot });\r\n    }\r\n\r\n    /**\r\n     * add the markdown for a solution option below the last visible row, which is connected to a spot in the given editor\r\n     *\r\n     * @param numberOfSpot the number of the spot to which the option should be connected\r\n     * @param optionText the text of the option\r\n     */\r\n    addOptionToSpot(numberOfSpot: number, optionText: string) {\r\n        this.insertShortAnswerOptionAction.executeInCurrentEditor({ spotNumber: numberOfSpot, optionText });\r\n    }\r\n\r\n    /**\r\n     * @function addOption\r\n     * @desc Add the markdown for a solution option below the last visible row\r\n     */\r\n    addOption(): void {\r\n        this.insertShortAnswerOptionAction.executeInCurrentEditor();\r\n    }\r\n\r\n    /**\r\n     * For Visual Mode\r\n     */\r\n\r\n    /**\r\n     * @function addSpotAtCursorVisualMode\r\n     * @desc Add an input field on the current selected location and add the solution option accordingly\r\n     */\r\n    addSpotAtCursorVisualMode(): void {\r\n        // check if selection is on the correct div\r\n        const wrapperDiv = this.questionElement.nativeElement;\r\n        const selection = window.getSelection()!;\r\n        const child = selection.anchorNode;\r\n\r\n        if (!wrapperDiv.contains(child)) {\r\n            return;\r\n        }\r\n\r\n        // ID 'element-row-column' is divided into array of [row, column]\r\n        const selectedTextRowColumn = selection.focusNode!.parentNode!.parentElement!.id.split('-').slice(1);\r\n\r\n        const row = Number(selectedTextRowColumn[0]);\r\n        const column = Number(selectedTextRowColumn[1]);\r\n\r\n        if (selectedTextRowColumn.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // get the right range for text with markdown\r\n        const range = selection.getRangeAt(0);\r\n        const preCaretRange = range.cloneRange();\r\n        const element = selection.focusNode!.parentNode!.parentElement!.firstElementChild!;\r\n        preCaretRange.selectNodeContents(element);\r\n        preCaretRange.setEnd(range.endContainer, range.endOffset);\r\n\r\n        // We need the innerHTML from the content of preCaretRange to create the overall startOfRage of the selected element\r\n        const container = document.createElement('div');\r\n        container.appendChild(preCaretRange.cloneContents());\r\n        const htmlContent = container.innerHTML;\r\n\r\n        const startOfRange = markdownForHtml(htmlContent).length - selection.toString().length;\r\n        const endOfRange = startOfRange + selection.toString().length;\r\n\r\n        const markedTextHTML = this.textParts[row][column];\r\n        const markedText = markdownForHtml(markedTextHTML!).substring(startOfRange, endOfRange);\r\n\r\n        const currentSpotNumber = this.numberOfSpot;\r\n\r\n        // split text before first option tag\r\n        const questionText = this.questionEditor.monacoEditor\r\n            .getText()\r\n            .split(/\\[-option /g)[0]\r\n            .trim();\r\n        this.textParts = this.shortAnswerQuestionUtil.divideQuestionTextIntoTextParts(questionText);\r\n        const textOfSelectedRow = this.textParts[row][column];\r\n        this.textParts[row][column] = textOfSelectedRow?.substring(0, startOfRange) + '[-spot ' + currentSpotNumber + ']' + textOfSelectedRow?.substring(endOfRange);\r\n\r\n        // recreation of question text from array and update textParts and parse textParts to html\r\n        this.shortAnswerQuestion.text = this.textParts.map((textPart) => textPart.join(' ')).join('\\n');\r\n        const textParts = this.shortAnswerQuestionUtil.divideQuestionTextIntoTextParts(this.shortAnswerQuestion.text);\r\n        this.textParts = this.shortAnswerQuestionUtil.transformTextPartsIntoHTML(textParts);\r\n        this.setQuestionEditorValue(this.generateMarkdown());\r\n        this.addOptionToSpot(currentSpotNumber, markedText);\r\n        this.parseMarkdown(this.questionEditor.monacoEditor.getText());\r\n\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * @function addTextSolution\r\n     * @desc Add an empty Text solution to the question\r\n     */\r\n    addTextSolution(): void {\r\n        // Add solution to question\r\n        if (!this.shortAnswerQuestion.solutions) {\r\n            this.shortAnswerQuestion.solutions = [];\r\n        }\r\n        const solution = new ShortAnswerSolution();\r\n        solution.text = InsertShortAnswerOptionAction.DEFAULT_TEXT_SHORT;\r\n        this.insertShortAnswerOptionAction.executeInCurrentEditor({ optionText: solution.text });\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    /**\r\n     * @function deleteSolution\r\n     * @desc Delete the solution from the question\r\n     * @param solutionToDelete {object} the solution that should be deleted\r\n     */\r\n    deleteSolution(solutionToDelete: ShortAnswerSolution): void {\r\n        this.shortAnswerQuestion.solutions = this.shortAnswerQuestion.solutions?.filter((solution) => solution !== solutionToDelete);\r\n        this.deleteMappingsForSolution(solutionToDelete);\r\n        this.questionEditorText = this.generateMarkdown();\r\n    }\r\n\r\n    /**\r\n     * @function onDragDrop\r\n     * @desc React to a solution being dropped on a spot\r\n     * @param spot {object} the spot involved\r\n     * @param dragEvent {object} the solution involved (may be a copy at this point)\r\n     */\r\n    onDragDrop(spot: ShortAnswerSpot, dragEvent: any): void {\r\n        let dragItem = dragEvent.item.data;\r\n        // Replace dragItem with original (because it may be a copy)\r\n        dragItem = this.shortAnswerQuestion.solutions?.find((originalDragItem) =>\r\n            dragItem.id ? originalDragItem.id === dragItem.id : originalDragItem.tempID === dragItem.tempID,\r\n        );\r\n\r\n        if (!dragItem) {\r\n            // Drag item was not found in question => do nothing\r\n            return;\r\n        }\r\n\r\n        if (!this.shortAnswerQuestion.correctMappings) {\r\n            this.shortAnswerQuestion.correctMappings = [];\r\n        }\r\n\r\n        // Check if this mapping already exists\r\n        if (\r\n            !this.shortAnswerQuestion.correctMappings.some(\r\n                (existingMapping) =>\r\n                    this.shortAnswerQuestionUtil.isSameSpot(existingMapping.spot, spot) && this.shortAnswerQuestionUtil.isSameSolution(existingMapping.solution, dragItem),\r\n            )\r\n        ) {\r\n            this.deleteMapping(this.getMappingsForSolution(dragItem).filter((mapping) => mapping.spot === undefined)[0]);\r\n            // Mapping doesn't exit yet => add this mapping\r\n            const saMapping = new ShortAnswerMapping(spot, dragItem);\r\n            this.shortAnswerQuestion.correctMappings.push(saMapping);\r\n\r\n            // Notify parent of changes\r\n            this.questionUpdated.emit();\r\n        }\r\n        this.questionEditorText = this.generateMarkdown();\r\n    }\r\n\r\n    /**\r\n     * @function getMappingIndex\r\n     * @desc Get the mapping index for the given mapping\r\n     * @param mapping {object} the mapping we want to get an index for\r\n     * @return {number} the index of the mapping (starting with 1), or 0 if unassigned\r\n     */\r\n    getMappingIndex(mapping: ShortAnswerMapping): number {\r\n        const visitedSpots: ShortAnswerSpot[] = [];\r\n        // Save reference to this due to nested some calls\r\n        if (\r\n            this.shortAnswerQuestion.correctMappings?.some((correctMapping) => {\r\n                if (\r\n                    !visitedSpots.some((spot: ShortAnswerSpot) => {\r\n                        return this.shortAnswerQuestionUtil.isSameSpot(spot, correctMapping.spot);\r\n                    })\r\n                ) {\r\n                    visitedSpots.push(correctMapping.spot!);\r\n                }\r\n                return this.shortAnswerQuestionUtil.isSameSpot(correctMapping.spot, mapping.spot);\r\n            })\r\n        ) {\r\n            return visitedSpots.length;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function getMappingsForSolution\r\n     * @desc Get all mappings that involve the given solution\r\n     * @param solution {object} the solution for which we want to get all mappings\r\n     * @return {Array} all mappings that belong to the given solution\r\n     */\r\n    getMappingsForSolution(solution: ShortAnswerSolution): ShortAnswerMapping[] {\r\n        if (!this.shortAnswerQuestion.correctMappings) {\r\n            this.shortAnswerQuestion.correctMappings = [];\r\n        }\r\n        return (\r\n            this.shortAnswerQuestion.correctMappings\r\n                .filter((mapping) => this.shortAnswerQuestionUtil.isSameSolution(mapping.solution, solution))\r\n                /** Moved the sorting from the template to the function call*/\r\n                .sort((m1, m2) => this.getMappingIndex(m1) - this.getMappingIndex(m2))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @function deleteMappingsForSolution\r\n     * @desc Delete all mappings for the given solution\r\n     * @param solution {object} the solution for which we want to delete all mappings\r\n     */\r\n    deleteMappingsForSolution(solution: ShortAnswerSolution): void {\r\n        if (!this.shortAnswerQuestion.correctMappings) {\r\n            this.shortAnswerQuestion.correctMappings = [];\r\n        }\r\n        this.shortAnswerQuestion.correctMappings = this.shortAnswerQuestion.correctMappings.filter(\r\n            (mapping) => !this.shortAnswerQuestionUtil.isSameSolution(mapping.solution, solution),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @function deleteMapping\r\n     * @desc Delete the given mapping from the question\r\n     * @param mappingToDelete {object} the mapping to delete\r\n     */\r\n    deleteMapping(mappingToDelete: ShortAnswerMapping): void {\r\n        if (!this.shortAnswerQuestion.correctMappings) {\r\n            this.shortAnswerQuestion.correctMappings = [];\r\n        }\r\n        this.shortAnswerQuestion.correctMappings = this.shortAnswerQuestion.correctMappings.filter((mapping) => mapping !== mappingToDelete);\r\n        this.questionEditorText = this.generateMarkdown();\r\n    }\r\n\r\n    /**\r\n     * @function deleteQuestion\r\n     * @desc Delete this question from the quiz\r\n     */\r\n    deleteQuestion(): void {\r\n        this.questionDeleted.emit();\r\n    }\r\n\r\n    /**\r\n     * @function togglePreview\r\n     * @desc Toggles the preview in the template\r\n     */\r\n    togglePreview(): void {\r\n        this.showVisualMode = !this.showVisualMode;\r\n        const textParts = this.shortAnswerQuestionUtil.divideQuestionTextIntoTextParts(this.shortAnswerQuestion.text!);\r\n        this.textParts = this.shortAnswerQuestionUtil.transformTextPartsIntoHTML(textParts);\r\n\r\n        this.setQuestionEditorValue(this.generateMarkdown());\r\n    }\r\n\r\n    /**\r\n     * For Re-evaluate\r\n     */\r\n\r\n    /**\r\n     * @function moveUp\r\n     * @desc Move this question one position up so that it is visible further up in the UI\r\n     */\r\n    moveUp() {\r\n        this.questionMoveUp.emit();\r\n    }\r\n\r\n    /**\r\n     * @function moveDown\r\n     * @desc Move this question one position down so that it is visible further down in the UI\r\n     */\r\n    moveDown() {\r\n        this.questionMoveDown.emit();\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @desc Resets the question title by using the title of the backupQuestion (which has the original title of the question)\r\n     */\r\n    resetQuestionTitle() {\r\n        this.shortAnswerQuestion.title = this.backupQuestion.title;\r\n    }\r\n\r\n    /**\r\n     * @function resetQuestionText\r\n     * @desc Resets the question text by using the text of the backupQuestion (which has the original text of the question)\r\n     */\r\n    resetQuestionText() {\r\n        this.shortAnswerQuestion.text = this.backupQuestion.text;\r\n        this.shortAnswerQuestion.spots = cloneDeep(this.backupQuestion.spots);\r\n        this.textParts = this.parseQuestionTextIntoTextBlocks(this.shortAnswerQuestion.text!);\r\n        this.shortAnswerQuestion.explanation = this.backupQuestion.explanation;\r\n        this.shortAnswerQuestion.hint = this.backupQuestion.hint;\r\n    }\r\n\r\n    /**\r\n     * @function resetQuestion\r\n     * @desc Resets the whole question by using the backupQuestion (which is the original question)\r\n     */\r\n    resetQuestion() {\r\n        this.resetQuestionTitle();\r\n        this.shortAnswerQuestion.invalid = this.backupQuestion.invalid;\r\n        this.shortAnswerQuestion.randomizeOrder = this.backupQuestion.randomizeOrder;\r\n        this.shortAnswerQuestion.scoringType = this.backupQuestion.scoringType;\r\n        this.shortAnswerQuestion.solutions = cloneDeep(this.backupQuestion.solutions);\r\n        this.shortAnswerQuestion.correctMappings = cloneDeep(this.backupQuestion.correctMappings);\r\n        this.shortAnswerQuestion.spots = cloneDeep(this.backupQuestion.spots);\r\n        this.resetQuestionText();\r\n    }\r\n\r\n    /**\r\n     * @function resetSpot\r\n     * @desc Resets the spot by using the spot of the backupQuestion (which has the original spot of the question)\r\n     * @param spot {spot} the spot, which will be reset\r\n     */\r\n    resetSpot(spot: ShortAnswerSpot): void {\r\n        // Find matching spot in backupQuestion\r\n        const backupSpot = this.backupQuestion.spots!.find((currentSpot) => currentSpot.id === spot.id)!;\r\n        // Find current index of our spot\r\n        const spotIndex = this.shortAnswerQuestion.spots!.indexOf(spot);\r\n        // Remove current spot at given index and insert the backup at the same position\r\n        this.shortAnswerQuestion.spots!.splice(spotIndex, 1);\r\n        this.shortAnswerQuestion.spots!.splice(spotIndex, 0, backupSpot);\r\n    }\r\n\r\n    /**\r\n     * @function deleteSpot\r\n     * @desc Delete the given spot by filtering every spot except the spot to be delete\r\n     * @param spotToDelete {object} the spot to delete\r\n     */\r\n    deleteSpot(spotToDelete: ShortAnswerSpot): void {\r\n        this.shortAnswerQuestion.spots = this.shortAnswerQuestion.spots?.filter((spot) => spot !== spotToDelete);\r\n        this.deleteMappingsForSpot(spotToDelete);\r\n\r\n        this.textParts = this.parseQuestionTextIntoTextBlocks(this.shortAnswerQuestion.text!);\r\n\r\n        this.textParts = this.textParts.map((part) => part.filter((text) => !text || !text.includes('[-spot ' + spotToDelete.spotNr + ']')));\r\n\r\n        this.shortAnswerQuestion.text = this.textParts.map((textPart) => textPart.join(' ')).join('\\n');\r\n    }\r\n\r\n    /**\r\n     * @function deleteMappingsForSpot\r\n     * @desc Delete all mappings for the given spot by filtering all mappings which do not include the spot\r\n     * @param spot {object} the spot for which we want to delete all mappings\r\n     */\r\n    deleteMappingsForSpot(spot: ShortAnswerSpot): void {\r\n        if (!this.shortAnswerQuestion.correctMappings) {\r\n            this.shortAnswerQuestion.correctMappings = [];\r\n        }\r\n        this.shortAnswerQuestion.correctMappings = this.shortAnswerQuestion.correctMappings.filter((mapping) => !this.shortAnswerQuestionUtil.isSameSpot(mapping.spot, spot));\r\n    }\r\n\r\n    /**\r\n     * @function setQuestionText\r\n     * @desc sets the new text as question.text and updates the UI (through textParts)\r\n     * @param textPartId\r\n     */\r\n    setQuestionText(textPartId: string): void {\r\n        const rowColumn: string[] = textPartId.split('-').slice(1);\r\n        this.textParts[Number(rowColumn[0])][Number(rowColumn[1])] = (<HTMLInputElement>document.getElementById(textPartId)).value;\r\n        this.shortAnswerQuestion.text = this.textParts.map((textPart) => textPart.join(' ')).join('\\n');\r\n        this.textParts = this.parseQuestionTextIntoTextBlocks(this.shortAnswerQuestion.text);\r\n    }\r\n\r\n    /**\r\n     * @function prepareForSave\r\n     * @desc reset the question and calls the parsing method of the markdown editor\r\n     */\r\n    prepareForSave(): void {}\r\n\r\n    /**\r\n     * @function toggleExactMatchCheckbox\r\n     * @desc Sets the similarity value to 100 if the checkbox was checked or to 85 if it was unchecked\r\n     * @param checked\r\n     */\r\n    toggleExactMatchCheckbox(checked: boolean): void {\r\n        this.shortAnswerQuestion.similarityValue = checked ? 100 : 85;\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    onTextChange(newText: string) {\r\n        this.parseMarkdown(this.questionEditorText);\r\n        this.numberOfSpot = this.getHighestSpotNumbers(newText) + 1;\r\n        this.insertShortAnswerSpotAction.spotNumber = this.numberOfSpot;\r\n        this.questionUpdated.emit();\r\n    }\r\n\r\n    getHighestSpotNumbers(text: string): number {\r\n        const regex = /\\[-spot (\\d+)\\]/g;\r\n        let highest = 0;\r\n        let result = regex.exec(text);\r\n        while (result) {\r\n            const currentNumber = +result[1];\r\n            if (result.length > 0 && currentNumber > highest) {\r\n                highest = currentNumber;\r\n            }\r\n            result = regex.exec(text);\r\n        }\r\n        return highest;\r\n    }\r\n\r\n    setQuestionEditorValue(text: string): void {\r\n        this.questionEditor.markdown = text;\r\n    }\r\n}\r\n", "<div class=\"edit-sa-question\">\r\n    @if (!reEvaluationInProgress) {\r\n        <div class=\"question-options card-header question-card-header\">\r\n            <button\r\n                class=\"btn question-collapse\"\r\n                (click)=\"isQuestionCollapsed = !isQuestionCollapsed\"\r\n                [attr.aria-expanded]=\"!isQuestionCollapsed\"\r\n                [attr.aria-controls]=\"'collapseQuestion' + questionIndex\"\r\n            >\r\n                <fa-icon size=\"3x\" [icon]=\"isQuestionCollapsed ? faAngleRight : faAngleDown\" />\r\n            </button>\r\n            <div class=\"form-group question-title\">\r\n                <input\r\n                    id=\"short-answer-question-title\"\r\n                    class=\"form-control\"\r\n                    [(ngModel)]=\"shortAnswerQuestion.title\"\r\n                    (ngModelChange)=\"questionUpdated.emit()\"\r\n                    placeholder=\"{{ 'artemisApp.quizExercise.placeholder.questionTitle' | artemisTranslate }}\"\r\n                />\r\n            </div>\r\n            <div class=\"question-card-header-inputs\">\r\n                <div class=\"form-group question-score\">\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n                    <input\r\n                        class=\"form-control\"\r\n                        title=\"score\"\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        [max]=\"MAX_POINTS\"\r\n                        [(ngModel)]=\"shortAnswerQuestion.points\"\r\n                        (ngModelChange)=\"questionUpdated.emit()\"\r\n                    />\r\n                </div>\r\n                <div class=\"question-type\">\r\n                    <h3 class=\"mb-0\"><span class=\"badge bg-success align-text-top\">SA</span></h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (reEvaluationInProgress) {\r\n        <div class=\"question-options card-header question-card-header-reevaluation\">\r\n            <div class=\"row\">\r\n                <div class=\"col-3 col-lg-1 mt-1\">\r\n                    <button\r\n                        class=\"btn question-collapse\"\r\n                        (click)=\"isQuestionCollapsed = !isQuestionCollapsed\"\r\n                        [attr.aria-expanded]=\"!isQuestionCollapsed\"\r\n                        [attr.aria-controls]=\"'collapseQuestion' + questionIndex\"\r\n                    >\r\n                        <fa-icon size=\"3x\" [icon]=\"isQuestionCollapsed ? faAngleRight : faAngleDown\" />\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-9 col-lg-8 text-start mt-3\">\r\n                    <div class=\"input-group row\">\r\n                        <div class=\"col-10 col-lg-11\">\r\n                            <input\r\n                                class=\"form-control\"\r\n                                [(ngModel)]=\"shortAnswerQuestion.title\"\r\n                                placeholder=\"{{ 'artemisApp.quizExercise.placeholder.shortQuestionTitle' | artemisTranslate }}\"\r\n                                attr.aria-label=\"{{ 'artemisApp.quizExercise.placeholder.shortQuestionTitle' | artemisTranslate }}\"\r\n                                style=\"width: 100%\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"col-2 col-lg-1\">\r\n                            <span class=\"input-group-btn\">\r\n                                <button\r\n                                    class=\"btn btn-outline-secondary\"\r\n                                    type=\"button\"\r\n                                    (click)=\"resetQuestionTitle()\"\r\n                                    [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.resetQuestionTitle' | artemisTranslate\"\r\n                                >\r\n                                    <fa-icon [icon]=\"faUndo\" />\r\n                                </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-3 col-lg-1 mt-lg-3\">\r\n                    <div class=\"question-type\">\r\n                        <h3 class=\"mb-0\"><span class=\"badge bg-success align-text-top\" style=\"width: 60px\">SA</span></h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-9 col-lg-2 text-end mt-lg-3\">\r\n                    <button\r\n                        id=\"move-up-button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        (click)=\"moveUp()\"\r\n                        [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.moveUp' | artemisTranslate\"\r\n                    >\r\n                        <fa-icon [icon]=\"faChevronUp\" />\r\n                    </button>\r\n                    <button\r\n                        id=\"move-down-button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        (click)=\"moveDown()\"\r\n                        [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.moveDown' | artemisTranslate\"\r\n                    >\r\n                        <fa-icon [icon]=\"faChevronDown\" />\r\n                    </button>\r\n                    <button\r\n                        id=\"reset-button\"\r\n                        class=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        (click)=\"resetQuestion()\"\r\n                        [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.resetQuestion' | artemisTranslate\"\r\n                    >\r\n                        <fa-icon [icon]=\"faUndo\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    <div class=\"card-body question-card-body\" [ngbCollapse]=\"isQuestionCollapsed\" id=\"collapseQuestion{{ questionIndex }}\">\r\n        @if (!reEvaluationInProgress) {\r\n            <div class=\"question-options\">\r\n                <div class=\"form-group\">\r\n                    <span jhiTranslate=\"artemisApp.quizQuestion.scoringType\" class=\"colon-suffix no-flex-shrink\"></span>\r\n                    <select class=\"form-select\" [(ngModel)]=\"shortAnswerQuestion.scoringType\" (ngModelChange)=\"questionUpdated.emit()\" title=\"scoring type\">\r\n                        <option value=\"ALL_OR_NOTHING\" jhiTranslate=\"artemisApp.quizExercise.scoringType.all_or_nothing\"></option>\r\n                        <option value=\"PROPORTIONAL_WITH_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_with_penalty\"></option>\r\n                        <option value=\"PROPORTIONAL_WITHOUT_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_without_penalty\"></option>\r\n                    </select>\r\n                    <jhi-quiz-scoring-info-modal />\r\n                </div>\r\n                <div class=\"form-group match-percentage-container\">\r\n                    <span class=\"colon-suffix no-flex-shrink\" jhiTranslate=\"artemisApp.quizExercise.answerMatching.title\"></span>\r\n                    <div class=\"slider-container\">\r\n                        <div class=\"slider-with-label\">\r\n                            <input\r\n                                type=\"range\"\r\n                                name=\"similarity-slider\"\r\n                                min=\"50\"\r\n                                max=\"100\"\r\n                                step=\"1\"\r\n                                value=\"85\"\r\n                                id=\"{{ 'matchPercentageSlider' + questionIndex }}\"\r\n                                [(ngModel)]=\"shortAnswerQuestion.similarityValue\"\r\n                                (ngModelChange)=\"questionUpdated.emit()\"\r\n                            />\r\n                            <p>{{ shortAnswerQuestion.similarityValue }} %</p>\r\n                        </div>\r\n                    </div>\r\n                    <jhi-match-percentage-info-modal />\r\n                    <div class=\"form-group form-check custom-control custom-checkbox\">\r\n                        <input\r\n                            #inputElement\r\n                            type=\"checkbox\"\r\n                            id=\"{{ 'cbMatchAnswersExactly' + questionIndex }}\"\r\n                            class=\"form-check-input custom-control-input\"\r\n                            [checked]=\"shortAnswerQuestion.similarityValue === 100\"\r\n                            (change)=\"toggleExactMatchCheckbox(inputElement.checked)\"\r\n                        />\r\n                        <label\r\n                            class=\"form-check-label custom-control-label\"\r\n                            for=\"{{ 'cbMatchAnswersExactly' + questionIndex }}\"\r\n                            jhiTranslate=\"artemisApp.quizExercise.matchPercentage.title\"\r\n                        ></label>\r\n                    </div>\r\n                    <div class=\"form-group form-check custom-control custom-checkbox\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"{{ 'cbMatchLetterCase' + questionIndex }}\"\r\n                            class=\"form-check-input custom-control-input\"\r\n                            [(ngModel)]=\"shortAnswerQuestion.matchLetterCase\"\r\n                            (ngModelChange)=\"questionUpdated.emit()\"\r\n                        />\r\n                        <label\r\n                            class=\"form-check-label custom-control-label\"\r\n                            for=\"{{ 'cbMatchLetterCase' + questionIndex }}\"\r\n                            jhiTranslate=\"artemisApp.quizExercise.matchLetterCase.title\"\r\n                        ></label>\r\n                    </div>\r\n                </div>\r\n                @if (!reEvaluationInProgress) {\r\n                    <div class=\"form-group\">\r\n                        <div class=\"delete-button\" (click)=\"deleteQuestion()\">\r\n                            <fa-icon [icon]=\"faTrash\" size=\"2x\" />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n        @if (reEvaluationInProgress) {\r\n            <div class=\"question-options question-options-reevaluation row align-items-center\" style=\"width: 100%\">\r\n                <div class=\"col-12 col-lg-4\">\r\n                    <div class=\"form-group\">\r\n                        <span jhiTranslate=\"artemisApp.quizQuestion.scoringType\" class=\"colon-suffix no-flex-shrink\"></span>\r\n                        <select class=\"form-select\" [(ngModel)]=\"shortAnswerQuestion.scoringType\" (ngModelChange)=\"questionUpdated.emit()\" title=\"scoring type\">\r\n                            <option value=\"ALL_OR_NOTHING\" jhiTranslate=\"artemisApp.quizExercise.scoringType.all_or_nothing\"></option>\r\n                            <option value=\"PROPORTIONAL_WITH_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_with_penalty\"></option>\r\n                            <option value=\"PROPORTIONAL_WITHOUT_PENALTY\" jhiTranslate=\"artemisApp.quizExercise.scoringType.proportional_without_penalty\"></option>\r\n                        </select>\r\n                        <jhi-quiz-scoring-info-modal />\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-lg-2\">\r\n                    <div class=\"form-group\">\r\n                        <span jhiTranslate=\"artemisApp.quizQuestion.score\" class=\"colon-suffix\"></span>\r\n                        <input class=\"form-control point-input\" title=\"score\" type=\"number\" [value]=\"shortAnswerQuestion.points\" disabled style=\"width: 100%\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-lg-6 row justify-content-lg-end align-items-start\">\r\n                    <div class=\"col-8 col-lg-4 form-group\">\r\n                        <button\r\n                            class=\"btn btn-outline-secondary invalid-button\"\r\n                            [hidden]=\"shortAnswerQuestion.invalid\"\r\n                            (click)=\"shortAnswerQuestion.invalid = true\"\r\n                            jhiTranslate=\"artemisApp.quizExercise.re-evaluate.setQuestionInvalid\"\r\n                        ></button>\r\n                        <button\r\n                            class=\"btn btn-outline-secondary invalid-button\"\r\n                            [hidden]=\"!shortAnswerQuestion.invalid\"\r\n                            [disabled]=\"shortAnswerQuestion.invalid\"\r\n                            jhiTranslate=\"artemisApp.quizExercise.re-evaluate.questionIsInvalid\"\r\n                        ></button>\r\n                    </div>\r\n                    <div class=\"col-2 col-lg-1\">\r\n                        <div class=\"re-evaluate-button\" id=\"delete-button\" class=\"delete-button\" (click)=\"deleteQuestion()\">\r\n                            <fa-icon [icon]=\"faTrash\" size=\"2x\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 row align-items-center justify-content-center justify-content-lg-start\">\r\n                    <div class=\"col-lg-6 row\">\r\n                        <div class=\"col-12 col-lg-4 form-group mt-1\">\r\n                            <span class=\"colon-suffix no-flex-shrink\" jhiTranslate=\"artemisApp.quizExercise.answerMatching.title\"></span>\r\n                        </div>\r\n                        <div class=\"col-12 col-lg-7\">\r\n                            <div class=\"slider-container\">\r\n                                <div style=\"display: flex\">\r\n                                    <input\r\n                                        type=\"range\"\r\n                                        name=\"similarity-slider\"\r\n                                        min=\"50\"\r\n                                        max=\"100\"\r\n                                        step=\"1\"\r\n                                        value=\"85\"\r\n                                        id=\"{{ 'matchPercentageSlider' + questionIndex }}\"\r\n                                        [(ngModel)]=\"shortAnswerQuestion.similarityValue\"\r\n                                        (ngModelChange)=\"questionUpdated.emit()\"\r\n                                        style=\"width: 60%\"\r\n                                    />\r\n                                    <p style=\"margin: 0.5rem\">{{ shortAnswerQuestion.similarityValue }} %</p>\r\n                                    <jhi-match-percentage-info-modal />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12 col-lg-3\" style=\"padding: 0 0.5rem\">\r\n                        <div class=\"form-check custom-control custom-checkbox\">\r\n                            <input\r\n                                #inputElement\r\n                                type=\"checkbox\"\r\n                                id=\"{{ 'cbMatchAnswersExactly' + questionIndex }}\"\r\n                                class=\"custom-control-input\"\r\n                                [checked]=\"shortAnswerQuestion.similarityValue === 100\"\r\n                                (change)=\"toggleExactMatchCheckbox(inputElement.checked)\"\r\n                            />\r\n                            <label\r\n                                class=\"form-check-label custom-control-label\"\r\n                                for=\"{{ 'cbMatchAnswersExactly' + questionIndex }}\"\r\n                                jhiTranslate=\"artemisApp.quizExercise.matchPercentage.title\"\r\n                            ></label>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12 col-lg-3\" style=\"padding: 0 0.5rem\">\r\n                        <div class=\"form-check custom-control custom-checkbox\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"{{ 'cbMatchLetterCase' + questionIndex }}\"\r\n                                class=\"custom-control-input\"\r\n                                [(ngModel)]=\"shortAnswerQuestion.matchLetterCase\"\r\n                                (ngModelChange)=\"questionUpdated.emit()\"\r\n                            />\r\n                            <label\r\n                                class=\"form-check-label custom-control-label\"\r\n                                for=\"{{ 'cbMatchLetterCase' + questionIndex }}\"\r\n                                jhiTranslate=\"artemisApp.quizExercise.matchLetterCase.title\"\r\n                            ></label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        <div class=\"markupEditorArea\" [hidden]=\"showVisualMode\">\r\n            @if (!reEvaluationInProgress) {\r\n                <div class=\"question-content\">\r\n                    <jhi-markdown-editor-monaco\r\n                        #questionEditor\r\n                        [enableResize]=\"false\"\r\n                        [enableFileUpload]=\"false\"\r\n                        [showPreviewButton]=\"false\"\r\n                        [defaultActions]=\"markdownActions\"\r\n                        [colorAction]=\"undefined\"\r\n                        [initialEditorHeight]=\"'external'\"\r\n                        [useDefaultMarkdownEditorOptions]=\"false\"\r\n                        [(markdown)]=\"questionEditorText\"\r\n                        (markdownChange)=\"onTextChange($event)\"\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n        @if (showVisualMode || reEvaluationInProgress) {\r\n            <div class=\"edit-sa-question\" style=\"padding: 20px\" cdkDropListGroup>\r\n                <h4 jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.visualModeHeadline\"></h4>\r\n                @if (!reEvaluationInProgress) {\r\n                    <span jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.visualModeExplanation\"></span>\r\n                }\r\n                <hr />\r\n                @if (!reEvaluationInProgress) {\r\n                    <div class=\"btn btn-outline-secondary\" jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.addSpot\" (click)=\"addSpotAtCursorVisualMode()\"></div>\r\n                }\r\n                @if (!reEvaluationInProgress) {\r\n                    <hr />\r\n                }\r\n                <div style=\"display: flex\">\r\n                    <div #question class=\"sa-question\">\r\n                        @for (textPart of textParts; track textPart; let i = $index) {\r\n                            <div class=\"short-answer-question-display\">\r\n                                @for (element of textPart; track element; let j = $index) {\r\n                                    <div class=\"short-answer-question-display__element\">\r\n                                        @if (!shortAnswerQuestionUtil.isInputField(element || '') && !reEvaluationInProgress) {\r\n                                            <div id=\"element-{{ i }}-{{ j }}\" class=\"short-answer-question-container\" [innerHTML]=\"element\"></div>\r\n                                        }\r\n                                        @if (!shortAnswerQuestionUtil.isInputField(element || '') && reEvaluationInProgress) {\r\n                                            <input\r\n                                                class=\"short-answer-question-container__input\"\r\n                                                id=\"element-{{ i }}-{{ j }}-textInput\"\r\n                                                value=\"{{ element }}\"\r\n                                                size=\"{{ (element?.length || 0) + 1 }}\"\r\n                                                type=\"text\"\r\n                                                [maxLength]=\"MAX_CHARACTER_COUNT\"\r\n                                                (change)=\"setQuestionText('element-' + i + '-' + j + '-textInput')\"\r\n                                            />\r\n                                        }\r\n                                        @if (shortAnswerQuestionUtil.isInputField(element || '')) {\r\n                                            <div class=\"short-answer-question-container\">\r\n                                                <div\r\n                                                    class=\"short-answer-question-container__div-input\"\r\n                                                    cdkDropList\r\n                                                    (cdkDropListDropped)=\"\r\n                                                        onDragDrop(shortAnswerQuestionUtil.getSpot(shortAnswerQuestionUtil.getSpotNr(element || ''), shortAnswerQuestion), $event)\r\n                                                    \"\r\n                                                ></div>\r\n                                                @if (reEvaluationInProgress) {\r\n                                                    <div style=\"position: absolute; top: -8px; right: -4px; display: inline-flex\">\r\n                                                        @if (!shortAnswerQuestionUtil.getSpot(shortAnswerQuestionUtil.getSpotNr(element || ''), shortAnswerQuestion).invalid) {\r\n                                                            <div\r\n                                                                class=\"re-evaluate-button\"\r\n                                                                title=\"Set invalid\"\r\n                                                                (click)=\"\r\n                                                                    shortAnswerQuestionUtil.getSpot(shortAnswerQuestionUtil.getSpotNr(element || ''), shortAnswerQuestion).invalid =\r\n                                                                        true\r\n                                                                \"\r\n                                                            >\r\n                                                                <fa-icon [icon]=\"faBan\" size=\"lg\" />\r\n                                                            </div>\r\n                                                        }\r\n                                                        <div\r\n                                                            class=\"re-evaluate-button\"\r\n                                                            title=\"Reset\"\r\n                                                            (click)=\"\r\n                                                                resetSpot(shortAnswerQuestionUtil.getSpot(shortAnswerQuestionUtil.getSpotNr(element || ''), shortAnswerQuestion))\r\n                                                            \"\r\n                                                        >\r\n                                                            <fa-icon [icon]=\"faUndo\" size=\"lg\" />\r\n                                                        </div>\r\n                                                        <div\r\n                                                            [ngClass]=\"reEvaluationInProgress ? 're-evaluate-button' : 'delete-button'\"\r\n                                                            title=\"Delete\"\r\n                                                            (click)=\"\r\n                                                                deleteSpot(shortAnswerQuestionUtil.getSpot(shortAnswerQuestionUtil.getSpotNr(element || ''), shortAnswerQuestion))\r\n                                                            \"\r\n                                                        >\r\n                                                            <fa-icon [icon]=\"faTrash\" size=\"lg\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                }\r\n                                                <div [ngClass]=\"'mapping-number mapping-color-' + (shortAnswerQuestionUtil.getSpotNr(element || '') % 8)\">\r\n                                                    {{ shortAnswerQuestionUtil.getSpotNr(element || '') }}\r\n                                                </div>\r\n                                            </div>\r\n                                        }\r\n                                        &nbsp;\r\n                                    </div>\r\n                                }\r\n                                <br />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    @if (reEvaluationInProgress) {\r\n                        <span class=\"input-group-btn\" style=\"vertical-align: top\">\r\n                            <button\r\n                                class=\"btn btn-outline-secondary\"\r\n                                type=\"button\"\r\n                                (click)=\"resetQuestionText()\"\r\n                                [ngbTooltip]=\"'artemisApp.quizExercise.re-evaluate.resetQuestionText' | artemisTranslate\"\r\n                            >\r\n                                <fa-icon [icon]=\"faUndo\" />\r\n                            </button>\r\n                        </span>\r\n                    }\r\n                </div>\r\n                <hr />\r\n                @if (!shortAnswerQuestion.solutions || !shortAnswerQuestion.solutions.length) {\r\n                    <div class=\"dnd-instructions\">\r\n                        <span jhiTranslate=\"artemisApp.dragAndDropQuestion.addDragItemsInstructions\"></span>\r\n                    </div>\r\n                }\r\n                @if (shortAnswerQuestion.solutions && shortAnswerQuestion.solutions.length) {\r\n                    <div class=\"dnd-instructions\">\r\n                        <span jhiTranslate=\"artemisApp.dragAndDropQuestion.addMappingsInstructions\"></span>\r\n                    </div>\r\n                }\r\n                @if (shortAnswerQuestion.solutions && shortAnswerQuestion.solutions.length) {\r\n                    <div class=\"drag-items\" cdkDropList cdkDropListOrientation=\"horizontal\">\r\n                        @for (solution of shortAnswerQuestion.solutions; track solution) {\r\n                            <div class=\"drag-item\" cdkDrag [cdkDragDisabled]=\"false\" [cdkDragData]=\"solution\">\r\n                                <div>\r\n                                    <textarea [(ngModel)]=\"solution.text\" (ngModelChange)=\"questionUpdated.emit()\"></textarea>\r\n                                </div>\r\n                                <div class=\"delete-button\" title=\"Delete\" (click)=\"deleteSolution(solution)\">\r\n                                    <fa-icon [icon]=\"faTrash\" size=\"lg\" />\r\n                                </div>\r\n                                <div class=\"drag-handle drag-handle-wrapper\" title=\"Move\">\r\n                                    <fa-icon [icon]=\"faBars\" class=\"drag-handle\" size=\"lg\" />\r\n                                </div>\r\n                                <div class=\"mapping-numbers-wrapper\">\r\n                                    @for (mapping of getMappingsForSolution(solution); track mapping) {\r\n                                        <div>\r\n                                            @if (mapping.spot !== undefined) {\r\n                                                <div [ngClass]=\"'mapping-number mapping-color-' + ((mapping.spot!.spotNr || 0) % 8)\">\r\n                                                    {{ mapping.spot.spotNr }}\r\n                                                    <div class=\"unlink-mapping\" (click)=\"deleteMapping(mapping)\">\r\n                                                        <fa-icon [icon]=\"faUnlink\" size=\"lg\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                <div *cdkDragPlaceholder></div>\r\n                                <div *cdkDragPreview style=\"border: 1px solid; background: #fafafa; padding: 4px 2px 2px 2px\">\r\n                                    <div title=\"Move\">\r\n                                        <fa-icon [icon]=\"faBars\" class=\"drag-handle\" size=\"lg\" />\r\n                                    </div>\r\n                                    <div>\r\n                                        <textarea disabled [(ngModel)]=\"solution.text\" (ngModelChange)=\"questionUpdated.emit()\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n                <div class=\"question-options row d-flex justify-content-start\">\r\n                    <ng-container>\r\n                        <div class=\"question-options\">\r\n                            <div class=\"col\">\r\n                                <button class=\"btn btn-outline-secondary\" (click)=\"addTextSolution()\">\r\n                                    <i class=\"fa fa-plus\"></i>\r\n                                    <span jhiTranslate=\"artemisApp.shortAnswerQuestion.addShortAnswerSolution\"></span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n        }\r\n        <hr />\r\n        @if (!showVisualMode && !reEvaluationInProgress) {\r\n            <div class=\"toolbar\">\r\n                <div class=\"btn-group\">\r\n                    <div class=\"btn btn-outline-secondary active\" jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.text\"></div>\r\n                    <div\r\n                        class=\"btn btn-outline-secondary\"\r\n                        id=\"short-answer-show-visual\"\r\n                        jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.visual\"\r\n                        (click)=\"togglePreview()\"\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        }\r\n        @if (showVisualMode && !reEvaluationInProgress) {\r\n            <div class=\"toolbar\">\r\n                <div class=\"btn-group\">\r\n                    <div class=\"btn btn-outline-secondary\" id=\"short-answer-show-text\" jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.text\" (click)=\"togglePreview()\"></div>\r\n                    <div class=\"btn btn-outline-secondary active\" jhiTranslate=\"artemisApp.shortAnswerQuestion.editor.visual\"></div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["DragAndDropQuestion", "QuizQuestion", "importedFiles", "backgroundFilePath", "dropLocations", "dragItems", "correctMappings", "constructor", "QuizQuestionType", "DRAG_AND_DROP", "WrongMultipleChoiceAnswerAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "CorrectMultipleChoiceAnswerAction", "TextEditorDomainAction", "ID", "IDENTIFIER", "TEXT", "constructor", "run", "editor", "addTextWithDomainActionIdentifier", "getOpeningIdentifier", "DragAndDropMouseEvent", "x", "y", "offsetX", "offsetY", "startX", "startY", "DragState", "convertRenderedSVGToPNG", "renderedSVG", "Promise", "resolve", "reject", "width", "height", "clip", "blob", "Blob", "svg", "type", "blobUrl", "URL", "createObjectURL", "image", "Image", "src", "onload", "canvas", "document", "createElement", "style", "scale", "context", "getContext", "drawImage", "toPNGBlob", "onerror", "error", "callback", "toBlob", "setTimeout", "binaryRepresentation", "window", "atob", "toDataURL", "split", "length", "buffer", "Uint8Array", "i", "charCodeAt", "MAX_SIZE_UNIT", "generateDragAndDropQuizExercise", "course", "title", "model", "__async", "interactiveElements", "Object", "entries", "interactive", "elements", "filter", "include", "map", "id", "relationships", "values", "renderedDiagram", "ApollonEditor", "exportModelAsSvg", "keepOriginalSize", "exclude", "diagramBackground", "convertRenderedSVGToPNG", "files", "Map", "set", "dragItems", "dropLocations", "elementId", "element", "find", "elem", "dragItem", "dropLocation", "generateDragAndDropItem", "clip", "correctMappings", "createCorrectMappings", "dragAndDropQuestion", "createDragAndDropQuestion", "importedFiles", "backgroundFilePath", "DragAndDropQuestion", "text", "scoringType", "ScoringType", "PROPORTIONAL_WITH_PENALTY", "points", "svgSize", "textualElementTypes", "UMLElementType", "ClassAttribute", "ClassMethod", "ObjectAttribute", "ObjectMethod", "type", "UMLRelationshipType", "generateDragAndDropItemForRelationship", "includes", "generateDragAndDropItemForText", "generateDragAndDropItemForElement", "renderedElement", "image", "imageName", "DragItem", "pictureFilePath", "computeDropLocation", "DragAndDropMapping", "name", "bounds", "margin", "width", "MIN_SIZE", "delta", "__spreadProps", "__spreadValues", "right", "left", "height", "top", "bottom", "elementLocation", "totalSize", "DropLocation", "posX", "round", "x", "posY", "y", "mappings", "textualElements", "dragItemElementId", "dropLocationElementId", "mapping", "dragElement", "owner", "dragElementSiblings", "dragElementSibling", "has", "get", "intermediateMappings", "dropElement", "currentMappings", "currentMapping", "Array", "concat", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275listener", "d_r3", "\u0275\u0275restoreView", "_r2", "dismiss", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "c_r4", "close", "QuizScoringInfoModalComponent", "modalService", "inject", "NgbModal", "farQuestionCircle", "faQuestionCircle", "open", "content", "size", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "QuizScoringInfoModalComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "_r1", "info_r5", "\u0275\u0275reference", "\u0275\u0275advance", "\u0275\u0275property", "TranslateDirective", "FaIconComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "isQuestionCollapsed", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "question", "title", "questionUpdated", "emit", "points", "\u0275\u0275advance", "\u0275\u0275property", "faAngleRight", "faAngleDown", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "MAX_POINTS", "_r4", "resetQuestionTitle", "moveUpQuestion", "moveDownQuestion", "resetQuestion", "faUndo", "faChevronUp", "faChevronDown", "_r5", "scoringType", "randomizeOrder", "deleteQuestion", "questionIndex", "faTrash", "_r6", "invalid", "_r7", "changesInMarkdown", "domainActionsFound", "questionEditorText", "dragAndDropDomainActions", "_r8", "resetQuestionText", "_r11", "resetBackground", "_r9", "backgroundFileInput_r10", "\u0275\u0275reference", "click", "\u0275\u0275template", "DragAndDropQuestionEditComponent_Conditional_16_Conditional_11_Template", "DragAndDropQuestionEditComponent_Conditional_16_Conditional_12_Template", "setBackgroundFile", "DragAndDropQuestionEditComponent_Conditional_16_Conditional_19_Template", "faPlus", "\u0275\u0275conditional", "reEvaluationInProgress", "\u0275\u0275propertyInterpolate1", "_r14", "dropLocation_r13", "$implicit", "faBan", "_r15", "resetDropLocation", "_r16", "duplicateDropLocation", "faCopy", "_r17", "deleteMappingsForDropLocation", "getMappingIndex", "getMappingsForDropLocation", "\u0275\u0275textInterpolate1", "faUnlink", "_r12", "dropLocationMouseDown", "onDragDrop", "DragAndDropQuestionEditComponent_For_33_Conditional_8_Template", "DragAndDropQuestionEditComponent_For_33_Conditional_9_Template", "DragAndDropQuestionEditComponent_For_33_Conditional_10_Template", "deleteDropLocation", "resizeMouseDown", "DragAndDropQuestionEditComponent_For_33_Conditional_33_Template", "dropAllowed", "\u0275\u0275pureFunction4", "_c4", "posY", "posX", "width", "height", "\u0275\u0275textInterpolate2", "length", "filePreviewPaths", "get", "dragItem_r18", "pictureFilePath", "_r19", "text", "\u0275$index_534_r21", "_r22", "deleteDragItem", "_r24", "changeToTextDragItem", "faFont", "_r26", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_6_Conditional_3_Template", "_r23", "reevalChangeToImageInput_r25", "changeToPictureDragItem", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_6_Conditional_12_Template", "resetDragItem", "farFileImage", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_12_Conditional_3_Template", "mapping_r28", "_r27", "deleteMapping", "DragAndDropQuestionEditComponent_Conditional_41_For_4_div_18_2_ng_template_0_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_div_18_2_Template", "preview_r29", "_r30", "DragAndDropQuestionEditComponent_Conditional_41_For_4_ng_template_22_Conditional_8_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_ng_template_22_Conditional_9_Template", "faBars", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_3_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_4_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_5_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_6_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Conditional_12_Template", "\u0275\u0275repeaterCreate", "DragAndDropQuestionEditComponent_Conditional_41_For_4_For_16_Template", "\u0275\u0275repeaterTrackByIdentity", "DragAndDropQuestionEditComponent_Conditional_41_For_4_div_18_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_div_20_Template", "DragAndDropQuestionEditComponent_Conditional_41_For_4_ng_template_22_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275repeater", "getMappingsForDragItem", "DragAndDropQuestionEditComponent_Conditional_41_For_4_Template", "dragItems", "_r31", "dragItemFileInput_r32", "DragAndDropQuestionEditComponent_Conditional_44_Conditional_9_Template", "DragAndDropQuestionEditComponent_Conditional_44_Conditional_10_Template", "createImageDragItem", "addTextDragItem", "getImagesFromDropLocations", "faScissors", "_r33", "togglePreview", "backgroundFilePath", "faEye", "_r34", "\u0275\u0275pureFunction0", "_c5", "faPencilAlt", "DragAndDropQuestionEditComponent", "dragAndDropQuestionUtil", "inject", "DragAndDropQuestionUtil", "modalService", "NgbModal", "changeDetector", "ChangeDetectorRef", "fileService", "FileService", "clickLayer", "backgroundImage", "markdownEditor", "filePool", "Map", "EventEmitter", "questionDeleted", "questionMoveUp", "questionMoveDown", "addNewFile", "removeFile", "backupQuestion", "showPreview", "CLICK_LAYER_DIMENSION", "draggingState", "DragState", "NONE", "currentDropLocation", "mouse", "hintAction", "QuizHintAction", "explanationAction", "QuizExplanationAction", "faFileImage", "faUpload", "MAX_QUIZ_QUESTION_POINTS", "ngOnInit", "cloneDeep", "DropLocation", "DragAndDropMouseEvent", "generateExerciseHintExplanation", "importedFiles", "target", "files", "File", "dragItem", "has", "ngOnChanges", "changes", "previousValue", "currentValue", "size", "forEach", "value", "fileName", "path", "set", "ngAfterViewInit", "setTimeout", "markForCheck", "detectChanges", "endLoadingProcess", "pipe", "filter", "loadingStatus", "debounceTime", "subscribe", "adjustClickLayerWidth", "makeFileMapPreview", "window", "onresize", "element", "nativeElement", "style", "visibility", "offsetWidth", "left", "offsetLeft", "open", "content", "drag", "drop", "key", "URL", "createObjectURL", "file", "event", "fileList", "setBackgroundFileFromFile", "getUniqueFileName", "getExtension", "name", "mouseMove", "backgroundElement", "backgroundOffsetLeft", "getBoundingClientRect", "x", "scrollX", "backgroundOffsetTop", "y", "scrollY", "backgroundWidth", "backgroundHeight", "offsetHeight", "mouseMoveAction", "pageX", "pageY", "clientX", "clientY", "Math", "min", "max", "CREATE", "RESIZE_BOTH", "round", "MAX_SIZE_UNIT", "startX", "startY", "abs", "MOVE", "offsetX", "offsetY", "RESIZE_X", "RESIZE_Y", "mouseUp", "undefined", "backgroundMouseDown", "dropLocations", "push", "dropLocation", "dropLocationX", "dropLocationY", "dropLocationToDelete", "duplicatedDropLocation", "resizeLocationY", "resizeLocationX", "DragItem", "dragItemFile", "getFileFromEvent", "createImageDragItemFromFile", "dragItemToDelete", "delete", "deleteMappingsForDragItem", "dropEvent", "item", "data", "questionDragItem", "find", "originalDragItem", "id", "tempID", "correctMappings", "some", "existingMapping", "isSameEntityWithTempId", "dndMapping", "DragAndDropMapping", "mapping", "visitedDropLocations", "correctMapping", "sort", "m1", "m2", "mappingToDelete", "_", "explanation", "hint", "backupDropLocation", "currentDL", "dropLocationIndex", "indexOf", "splice", "backupDragItem", "currentDI", "dragItemIndex", "prepareForSave", "textWithDomainActions", "cleanupQuestion", "action", "parseMarkdown", "someLocation", "image", "Image", "dataUrl", "bgWidth", "bgHeight", "onload", "canvas", "document", "createElement", "context", "getContext", "scalarHeight", "scalarWidth", "drawImage", "toDataURL", "dragItemCreated", "dataUrlToFile", "src", "blankOutBackgroundImage", "backgroundBlankingCanvas", "backgroundBlankingContext", "fillStyle", "fillRect", "dataUrlCanvas", "dataUrlToBlob", "byteString", "atob", "split", "mimeString", "ab", "ArrayBuffer", "ia", "Uint8Array", "i", "charCodeAt", "Blob", "type", "blob", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "_r1", "DragAndDropQuestionEditComponent_Conditional_2_Template", "DragAndDropQuestionEditComponent_Conditional_3_Template", "DragAndDropQuestionEditComponent_Conditional_6_Template", "DragAndDropQuestionEditComponent_Conditional_7_Template", "DragAndDropQuestionEditComponent_Conditional_10_Template", "DragAndDropQuestionEditComponent_Conditional_11_Template", "DragAndDropQuestionEditComponent_Conditional_16_Template", "DragAndDropQuestionEditComponent_Conditional_17_Template", "DragAndDropQuestionEditComponent_Conditional_18_Template", "DragAndDropQuestionEditComponent_For_33_Template", "DragAndDropQuestionEditComponent_Conditional_39_Template", "DragAndDropQuestionEditComponent_Conditional_40_Template", "DragAndDropQuestionEditComponent_Conditional_41_Template", "DragAndDropQuestionEditComponent_Conditional_44_Template", "DragAndDropQuestionEditComponent_Conditional_45_Template", "DragAndDropQuestionEditComponent_Conditional_48_Template", "\u0275\u0275pureFunction1", "_c3", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "MinValidator", "MaxValidator", "NgModel", "TranslateDirective", "NgbTooltip", "NgbCollapse", "QuizScoringInfoModalComponent", "MarkdownEditorMonacoComponent", "CdkDropListGroup", "SecuredImageComponent", "NgClass", "CdkDropList", "NgStyle", "CdkDrag", "CdkDragPreview", "NgTemplateOutlet", "CdkDragPlaceholder", "DragAndDropQuestionComponent", "ArtemisTranslatePipe", "styles", "encapsulation", "ShortAnswerMapping", "id", "shortAnswerSpotIndex", "shortAnswerSolutionIndex", "invalid", "solution", "spot", "question", "constructor", "ShortAnswerSpot", "BaseEntityWithTempId", "width", "spotNr", "invalid", "question", "posX", "posY", "constructor", "ShortAnswerSolution", "BaseEntityWithTempId", "text", "invalid", "question", "posX", "posY", "constructor", "InsertShortAnswerSpotAction", "TextEditorAction", "insertShortAnswerOptionAction", "ID", "spotNumber", "constructor", "undefined", "run", "editor", "number", "text", "selectedText", "getSelectedText", "replaceTextAtCurrentSelection", "executeInCurrentEditor", "optionText", "InsertShortAnswerOptionAction", "TextEditorAction", "ID", "DEFAULT_TEXT", "DEFAULT_TEXT_SHORT", "constructor", "undefined", "id", "translationKey", "executeInCurrentEditor", "args", "run", "editor", "optionText", "insertedText", "spotNumber", "getLineText", "getLineCount", "startsWith", "insertTextAtPosition", "getEndPosition", "newEndPosition", "selection", "makeTextEditorRange", "getLineNumber", "getColumn", "length", "setSelection", "focus", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275listener", "d_r3", "\u0275\u0275restoreView", "_r2", "dismiss", "\u0275\u0275resetView", "\u0275\u0275elementEnd", "c_r4", "close", "MatchPercentageInfoModalComponent", "modalService", "inject", "NgbModal", "farQuestionCircle", "faQuestionCircle", "open", "content", "size", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "MatchPercentageInfoModalComponent_ng_template_0_Template", "\u0275\u0275templateRefExtractor", "_r1", "info_r5", "\u0275\u0275reference", "\u0275\u0275advance", "\u0275\u0275property", "TranslateDirective", "FaIconComponent", "encapsulation", "\u0275\u0275text", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "isQuestionCollapsed", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "shortAnswerQuestion", "title", "questionUpdated", "emit", "points", "\u0275\u0275advance", "\u0275\u0275property", "faAngleRight", "faAngleDown", "\u0275\u0275propertyInterpolate", "\u0275\u0275pipeBind1", "\u0275\u0275twoWayProperty", "MAX_POINTS", "_r3", "resetQuestionTitle", "moveUp", "moveDown", "resetQuestion", "faUndo", "faChevronUp", "faChevronDown", "_r6", "deleteQuestion", "faTrash", "_r4", "scoringType", "similarityValue", "inputElement_r5", "\u0275\u0275reference", "toggleExactMatchCheckbox", "checked", "matchLetterCase", "\u0275\u0275template", "ShortAnswerQuestionEditComponent_Conditional_6_Conditional_52_Template", "questionIndex", "\u0275\u0275textInterpolate1", "\u0275\u0275conditional", "reEvaluationInProgress", "_r7", "invalid", "inputElement_r8", "_r9", "questionEditorText", "onTextChange", "markdownActions", "undefined", "_r11", "addSpotAtCursorVisualMode", "\u0275\u0275propertyInterpolate2", "\u0275$index_417_r15", "\u0275$index_422_r14", "element_r13", "\u0275\u0275sanitizeHtml", "_r16", "$index", "setQuestionText", "length", "MAX_CHARACTER_COUNT", "_r19", "$implicit", "shortAnswerQuestionUtil", "getSpot", "getSpotNr", "faBan", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_For_4_Conditional_5_Conditional_5_Conditional_3_Template", "_r18", "resetSpot", "deleteSpot", "_r17", "onDragDrop", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_For_4_Conditional_5_Conditional_5_Template", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_For_4_Conditional_3_Template", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_For_4_Conditional_4_Template", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_For_4_Conditional_5_Template", "isInputField", "\u0275\u0275repeaterCreate", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_For_4_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "textPart_r20", "_r21", "resetQuestionText", "_r24", "mapping_r25", "deleteMapping", "spot", "spotNr", "faUnlink", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_24_For_4_For_21_Conditional_3_Template", "_r26", "solution_r23", "text", "faBars", "_r22", "deleteSolution", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_24_For_4_For_21_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_24_For_4_div_23_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_24_For_4_div_25_Template", "getMappingsForSolution", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_24_For_4_Template", "solutions", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_5_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_8_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_9_Template", "ShortAnswerQuestionEditComponent_Conditional_12_For_16_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_18_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_22_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_23_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Conditional_24_Template", "\u0275\u0275elementContainerStart", "_r10", "addTextSolution", "textParts", "_r27", "togglePreview", "_r28", "ShortAnswerQuestionEditComponent", "inject", "ShortAnswerQuestionUtil", "modalService", "NgbModal", "changeDetector", "ChangeDetectorRef", "questionEditor", "questionElement", "insertShortAnswerOptionAction", "InsertShortAnswerOptionAction", "insertShortAnswerSpotAction", "InsertShortAnswerSpotAction", "question", "quizQuestion", "EventEmitter", "questionDeleted", "questionMoveUp", "questionMoveDown", "MAX_QUIZ_SHORT_ANSWER_TEXT_LENGTH", "showVisualMode", "numberOfSpot", "optionsWithID", "backupQuestion", "MAX_QUIZ_QUESTION_POINTS", "MarkdownEditorHeight", "ngOnInit", "BoldAction", "ItalicAction", "UnderlineAction", "StrikethroughAction", "CodeAction", "UrlAction", "BulletedListAction", "OrderedListAction", "cloneDeep", "parseQuestionTextIntoTextBlocks", "ngOnChanges", "changes", "previousValue", "ngAfterViewInit", "requestAnimationFrame", "setupQuestionEditor", "bind", "returnValue", "lineText", "split", "forEach", "line", "divideQuestionTextIntoTextParts", "parsedLine", "block", "includes", "push", "blockSplit", "filter", "ele", "concat", "indentation", "getIndentation", "spots", "applyOptionPreset", "SHORT_ANSWER_QUIZ_QUESTION_EDITOR_OPTIONS", "generateMarkdown", "detectChanges", "parseMarkdown", "setOptionsWithID", "solution", "option", "firstSolution", "getAllSpotsForSolutions", "correctMappings", "spotForSolution", "isSameSpot", "markdownText", "generateExerciseHintExplanation", "map", "index", "trim", "join", "questionParts", "questionText", "spotParts", "splitText", "slice", "sliceText", "solutionParts", "questionPart", "parseExerciseHintExplanation", "existingSolutionIDs", "id", "existingSpotIDs", "spotID", "ShortAnswerSpot", "width", "solutionText", "ShortAnswerSolution", "createMapping", "spotIds", "Number", "spotForMapping", "find", "ShortAnswerMapping", "open", "content", "size", "addSpotAtCursor", "executeInCurrentEditor", "spotNumber", "addOptionToSpot", "optionText", "addOption", "wrapperDiv", "nativeElement", "selection", "window", "getSelection", "child", "anchorNode", "contains", "selectedTextRowColumn", "focusNode", "parentNode", "parentElement", "row", "column", "range", "getRangeAt", "preCaretRange", "cloneRange", "element", "firstElementChild", "selectNodeContents", "setEnd", "endContainer", "endOffset", "container", "document", "createElement", "appendChild", "cloneContents", "htmlContent", "innerHTML", "startOfRange", "markdownForHtml", "toString", "endOfRange", "markedTextHTML", "markedText", "substring", "currentSpotNumber", "monacoEditor", "getText", "textOfSelectedRow", "textPart", "transformTextPartsIntoHTML", "setQuestionEditorValue", "DEFAULT_TEXT_SHORT", "solutionToDelete", "deleteMappingsForSolution", "dragEvent", "dragItem", "item", "data", "originalDragItem", "tempID", "some", "existingMapping", "isSameSolution", "mapping", "saMapping", "getMappingIndex", "visitedSpots", "correctMapping", "sort", "m1", "m2", "mappingToDelete", "explanation", "hint", "randomizeOrder", "backupSpot", "currentSpot", "spotIndex", "indexOf", "splice", "spotToDelete", "deleteMappingsForSpot", "part", "textPartId", "rowColumn", "getElementById", "value", "prepareForSave", "newText", "getHighestSpotNumbers", "regex", "highest", "result", "exec", "currentNumber", "markdown", "selectors", "viewQuery", "rf", "ctx", "ShortAnswerQuestionEditComponent_Conditional_2_Template", "ShortAnswerQuestionEditComponent_Conditional_3_Template", "ShortAnswerQuestionEditComponent_Conditional_6_Template", "ShortAnswerQuestionEditComponent_Conditional_7_Template", "ShortAnswerQuestionEditComponent_Conditional_10_Template", "ShortAnswerQuestionEditComponent_Conditional_12_Template", "ShortAnswerQuestionEditComponent_Conditional_15_Template", "ShortAnswerQuestionEditComponent_Conditional_16_Template", "\u0275\u0275propertyInterpolate1", "FaIconComponent", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "RangeValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "MinValidator", "MaxValidator", "NgModel", "TranslateDirective", "NgbTooltip", "NgbCollapse", "QuizScoringInfoModalComponent", "MatchPercentageInfoModalComponent", "MarkdownEditorMonacoComponent", "CdkDropListGroup", "CdkDropList", "NgClass", "CdkDrag", "CdkDragPlaceholder", "CdkDragPreview", "ArtemisTranslatePipe", "styles", "encapsulation"]
}
