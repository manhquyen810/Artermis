{
  "version": 3,
  "sources": ["src/main/webapp/app/grading-system/bonus/bonus.component.ts", "src/main/webapp/app/grading-system/bonus/bonus.component.html"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { ModePickerComponent } from 'app/exercises/shared/mode-picker/mode-picker.component';\r\nimport { BonusService } from 'app/grading-system/bonus/bonus.service';\r\nimport { GradingSystemService } from 'app/grading-system/grading-system.service';\r\nimport { GradingScale } from 'app/entities/grading-scale.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Bonus, BonusExample, BonusStrategy } from 'app/entities/bonus.model';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\nimport { faExclamationTriangle, faPlus, faQuestionCircle, faSave, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { GradeStep, GradeStepsDTO } from 'app/entities/grade-step.model';\r\nimport { ButtonSize } from 'app/shared/components/button.component';\r\nimport { Subject, forkJoin, of } from 'rxjs';\r\nimport { SearchTermPageableSearch, SortingOrder } from 'app/shared/table/pageable-table';\r\nimport { GradeEditMode } from 'app/grading-system/base-grading-system/base-grading-system.component';\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\nimport { SafeHtmlPipe } from 'app/shared/pipes/safe-html.pipe';\r\nimport { GradeStepBoundsPipe } from 'app/shared/pipes/grade-step-bounds.pipe';\r\nimport { ArtemisTranslatePipe } from 'app/shared/pipes/artemis-translate.pipe';\r\nimport { TranslateDirective } from 'app/shared/language/translate.directive';\r\nimport { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HelpIconComponent } from 'app/shared/components/help-icon.component';\r\n\r\nexport enum BonusStrategyOption {\r\n    GRADES,\r\n    POINTS,\r\n}\r\n\r\nexport enum BonusStrategyDiscreteness {\r\n    DISCRETE,\r\n    CONTINUOUS,\r\n}\r\n\r\n@Component({\r\n    selector: 'jhi-bonus',\r\n    templateUrl: './bonus.component.html',\r\n    styleUrls: ['./bonus.component.scss'],\r\n    imports: [\r\n        SafeHtmlPipe,\r\n        GradeStepBoundsPipe,\r\n        ModePickerComponent,\r\n        ArtemisTranslatePipe,\r\n        TranslateDirective,\r\n        DeleteButtonDirective,\r\n        FontAwesomeModule,\r\n        NgbTooltipModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        HelpIconComponent,\r\n    ],\r\n})\r\nexport class BonusComponent implements OnInit {\r\n    private bonusService = inject(BonusService);\r\n    private gradingSystemService = inject(GradingSystemService);\r\n    private route = inject(ActivatedRoute);\r\n    private router = inject(Router);\r\n    private alertService = inject(AlertService);\r\n\r\n    readonly CALCULATION_PLUS = 1;\r\n    readonly CALCULATION_MINUS = -1;\r\n\r\n    // Icons\r\n    readonly faSave = faSave;\r\n    readonly faPlus = faPlus;\r\n    readonly faTimes = faTimes;\r\n    readonly faExclamationTriangle = faExclamationTriangle;\r\n    readonly faQuestionCircle = faQuestionCircle;\r\n\r\n    readonly ButtonSize = ButtonSize;\r\n    readonly GradeEditMode = GradeEditMode;\r\n    readonly BonusStrategyOption = BonusStrategyOption;\r\n    readonly BonusStrategy = BonusStrategy;\r\n\r\n    readonly bonusStrategyOptions = [BonusStrategyOption.GRADES, BonusStrategyOption.POINTS].map((bonusStrategyOption) => ({\r\n        value: bonusStrategyOption,\r\n        labelKey: 'artemisApp.bonus.bonusStrategy.' + BonusStrategyOption[bonusStrategyOption].toLowerCase(),\r\n        btnClass: 'btn-secondary',\r\n    }));\r\n\r\n    readonly bonusStrategyDiscreteness = [BonusStrategyDiscreteness.CONTINUOUS].map((bonusStrategyDiscreteness) => ({\r\n        value: bonusStrategyDiscreteness,\r\n        labelKey: 'artemisApp.bonus.discreteness.' + BonusStrategyDiscreteness[bonusStrategyDiscreteness].toLowerCase(),\r\n        btnClass: 'btn-secondary',\r\n    }));\r\n\r\n    readonly calculationSigns = [\r\n        {\r\n            value: this.CALCULATION_MINUS,\r\n            label: 'âˆ’',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n        {\r\n            value: this.CALCULATION_PLUS,\r\n            label: '+',\r\n            btnClass: 'btn-secondary',\r\n        },\r\n    ];\r\n\r\n    sourceGradingScales: GradingScale[] = [];\r\n\r\n    bonusToGradeStepsDTO: GradeStepsDTO;\r\n\r\n    isLoading = false;\r\n    private courseId: number;\r\n    private examId: number;\r\n\r\n    private dialogErrorSource = new Subject<string>();\r\n    dialogError$ = this.dialogErrorSource.asObservable();\r\n\r\n    currentBonusStrategyOption?: BonusStrategyOption;\r\n    currentBonusStrategyDiscreteness?: BonusStrategyDiscreteness;\r\n\r\n    examples: BonusExample[] = [];\r\n    dynamicExample = new BonusExample(0, 0);\r\n\r\n    bonus = new Bonus();\r\n    hasBonusStrategyWeightMismatch = false;\r\n\r\n    private state: SearchTermPageableSearch = {\r\n        page: 1,\r\n        pageSize: 100,\r\n        searchTerm: '',\r\n        sortingOrder: SortingOrder.DESCENDING,\r\n        sortedColumn: 'ID',\r\n    };\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n\r\n        const paramMap = this.route.snapshot.paramMap;\r\n        this.courseId = Number(paramMap.get('courseId'));\r\n        this.examId = Number(paramMap.get('examId'));\r\n\r\n        forkJoin([\r\n            this.bonusService.findBonusForExam(this.courseId, this.examId).pipe(\r\n                tap((bonusResponse) => {\r\n                    this.setBonus(bonusResponse.body || new Bonus());\r\n                }),\r\n                catchError((error) => {\r\n                    if (error?.status === 404) {\r\n                        return of(undefined);\r\n                    }\r\n                    throw error;\r\n                }),\r\n            ),\r\n            this.gradingSystemService.findWithBonusGradeTypeForInstructor(this.state).pipe(\r\n                tap((gradingScales) => {\r\n                    this.sourceGradingScales = gradingScales.body?.resultsOnPage || [];\r\n                }),\r\n            ),\r\n            this.gradingSystemService.findGradeSteps(this.courseId, this.examId).pipe(\r\n                tap((gradeSteps) => {\r\n                    if (gradeSteps) {\r\n                        this.bonusToGradeStepsDTO = gradeSteps;\r\n                        this.gradingSystemService.sortGradeSteps(gradeSteps.gradeSteps);\r\n                        this.gradingSystemService.setGradePoints(gradeSteps.gradeSteps, gradeSteps.maxPoints!);\r\n                    } else {\r\n                        throw new Error(`No grade steps found for bonus calculation. Bonus to course id \"${this.courseId}\", exam id \"${this.examId}\"`);\r\n                    }\r\n                }),\r\n                catchError((error) => {\r\n                    this.alertService.error(error.message);\r\n                    this.navigateToExam();\r\n                    throw new Error(`No grade scale found for bonus calculation. Bonus to course id \"${this.courseId}\", exam id \"${this.examId}\"`);\r\n                }),\r\n            ),\r\n        ])\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe(() => {\r\n                this.setSourceGradingScale();\r\n            });\r\n    }\r\n\r\n    private navigateToExam() {\r\n        this.router.navigate(['course-management', this.courseId, 'exams', this.examId]);\r\n    }\r\n\r\n    private setSourceGradingScale() {\r\n        if (this.bonus.sourceGradingScale) {\r\n            const sourceGradingScale = this.sourceGradingScales.find((gradingScale) => gradingScale.id === this.bonus.sourceGradingScale!.id);\r\n            if (!sourceGradingScale) {\r\n                throw new Error(`sourceGradingScale not found for id: ${this.bonus.sourceGradingScale.id}`);\r\n            }\r\n            this.bonus.sourceGradingScale = sourceGradingScale;\r\n            this.onBonusSourceChange(sourceGradingScale);\r\n        }\r\n    }\r\n\r\n    generateExamples() {\r\n        if (this.bonus.sourceGradingScale && this.bonus.bonusStrategy) {\r\n            this.hasBonusStrategyWeightMismatch = this.checkBonusStrategyWeightMismatch(this.bonus.bonusStrategy, this.bonus.weight!, this.bonusToGradeStepsDTO.gradeSteps);\r\n            this.examples = !this.hasBonusStrategyWeightMismatch ? this.bonusService.generateBonusExamples(this.bonus, this.bonusToGradeStepsDTO) : [];\r\n        } else {\r\n            this.hasBonusStrategyWeightMismatch = false;\r\n            this.examples = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given bonus strategy and weight combination would result in a worse grade for student, which is counter-intuitive for a bonus.\r\n     * Warning: Assumes bonusToGradeSteps are sorted.\r\n     *\r\n     * @param bonusStrategy current bonus strategy\r\n     * @param weight current weight\r\n     * @param bonusToGradeSteps grade steps belonging to bonusTo grading scale, assumed to be sorted.\r\n     */\r\n    private checkBonusStrategyWeightMismatch(bonusStrategy: BonusStrategy, weight: number, bonusToGradeSteps: GradeStep[]) {\r\n        switch (bonusStrategy) {\r\n            case BonusStrategy.POINTS:\r\n                return weight < 0;\r\n            case BonusStrategy.GRADES_CONTINUOUS:\r\n            case BonusStrategy.GRADES_DISCRETE:\r\n                const maxGradeValue = this.gradingSystemService.getNumericValueForGradeName(this.gradingSystemService.maxGrade(bonusToGradeSteps));\r\n                const firstGradeValue = this.gradingSystemService.getNumericValueForGradeName(bonusToGradeSteps[0]?.gradeName);\r\n                return this.bonusService.doesBonusExceedMax(firstGradeValue!, maxGradeValue!, weight);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    setBonus(bonus: Bonus) {\r\n        this.bonus = bonus;\r\n        switch (bonus.bonusStrategy) {\r\n            case BonusStrategy.POINTS:\r\n                this.currentBonusStrategyOption = BonusStrategyOption.POINTS;\r\n                this.currentBonusStrategyDiscreteness = undefined;\r\n                break;\r\n            case BonusStrategy.GRADES_CONTINUOUS:\r\n                this.currentBonusStrategyOption = BonusStrategyOption.GRADES;\r\n                this.currentBonusStrategyDiscreteness = BonusStrategyDiscreteness.CONTINUOUS;\r\n                break;\r\n            case BonusStrategy.GRADES_DISCRETE:\r\n                this.currentBonusStrategyOption = BonusStrategyOption.GRADES;\r\n                this.currentBonusStrategyDiscreteness = BonusStrategyDiscreteness.DISCRETE;\r\n                break;\r\n            default:\r\n                this.currentBonusStrategyOption = undefined;\r\n                this.currentBonusStrategyDiscreteness = undefined;\r\n        }\r\n    }\r\n\r\n    onBonusStrategyInputChange() {\r\n        this.bonus.bonusStrategy = this.convertFromInputsToBonusStrategy(this.currentBonusStrategyOption, this.currentBonusStrategyDiscreteness);\r\n        this.generateExamples();\r\n        this.refreshDynamicExample();\r\n    }\r\n\r\n    onWeightChange() {\r\n        this.generateExamples();\r\n        this.refreshDynamicExample();\r\n    }\r\n\r\n    convertFromInputsToBonusStrategy(\r\n        bonusStrategyOption: BonusStrategyOption | undefined,\r\n        bonusStrategyDiscreteness: BonusStrategyDiscreteness | undefined,\r\n    ): BonusStrategy | undefined {\r\n        if (bonusStrategyOption === BonusStrategyOption.POINTS) {\r\n            return BonusStrategy.POINTS;\r\n        } else if (bonusStrategyOption === BonusStrategyOption.GRADES) {\r\n            switch (bonusStrategyDiscreteness) {\r\n                case BonusStrategyDiscreteness.CONTINUOUS:\r\n                case undefined: // undefined case also returns GRADES_CONTINUOUS because GRADES_DISCRETE is not implemented yet.\r\n                    return BonusStrategy.GRADES_CONTINUOUS;\r\n                case BonusStrategyDiscreteness.DISCRETE:\r\n                    return BonusStrategy.GRADES_DISCRETE;\r\n                default:\r\n                    return undefined;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    save(): void {\r\n        this.isLoading = true;\r\n        const saveObservable = this.bonus.id\r\n            ? this.bonusService.updateBonus(this.courseId, this.examId, this.bonus)\r\n            : this.bonusService.createBonusForExam(this.courseId, this.examId, this.bonus);\r\n\r\n        saveObservable\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((bonusResponse) => (this.bonus.id = bonusResponse.body?.id));\r\n    }\r\n\r\n    delete() {\r\n        if (!this.bonus.id) {\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        this.bonusService\r\n            .deleteBonus(this.courseId, this.examId, this.bonus.id)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe({\r\n                next: (bonusResponse) => {\r\n                    this.setBonus(bonusResponse.body || new Bonus());\r\n                    this.dialogErrorSource.next('');\r\n                },\r\n                error: (error) => this.dialogErrorSource.next(error.message),\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @see GradingSystemService.getGradingScaleTitle\r\n     * @param gradingScale\r\n     */\r\n    getGradingScaleTitle(gradingScale: GradingScale): string | undefined {\r\n        return this.gradingSystemService.getGradingScaleTitle(gradingScale);\r\n    }\r\n\r\n    /**\r\n     * @see GradingSystemService.getGradingScaleMaxPoints\r\n     * @param gradingScale\r\n     */\r\n    getGradingScaleMaxPoints(gradingScale?: GradingScale): number {\r\n        return this.gradingSystemService.getGradingScaleMaxPoints(gradingScale);\r\n    }\r\n\r\n    /**\r\n     * @see GradingSystemService.hasPointsSet\r\n     */\r\n    hasPointsSet(): boolean {\r\n        return !!this.bonus.sourceGradingScale?.gradeSteps && this.gradingSystemService.hasPointsSet(this.bonus.sourceGradingScale.gradeSteps);\r\n    }\r\n\r\n    /**\r\n     * Calculate points for each grade step of the selected gradingScale if they are not already calculated before\r\n     * to display in the table and sort the grading steps for matching.\r\n     * @param gradingScale the selected bonus source grading scale\r\n     */\r\n    private setBonusSourcePoints(gradingScale: GradingScale) {\r\n        if (!this.gradingSystemService.hasPointsSet(gradingScale.gradeSteps)) {\r\n            this.gradingSystemService.setGradePoints(gradingScale.gradeSteps, this.getGradingScaleMaxPoints(gradingScale));\r\n        }\r\n        this.gradingSystemService.sortGradeSteps(gradingScale.gradeSteps);\r\n    }\r\n\r\n    calculateDynamicExample() {\r\n        this.bonusService.calculateFinalGrade(this.dynamicExample, this.bonus, this.bonusToGradeStepsDTO);\r\n    }\r\n\r\n    private refreshDynamicExample() {\r\n        if (this.dynamicExample.finalGrade == undefined) {\r\n            // Do not recalculate if it has not been calculated already.\r\n            return;\r\n        }\r\n        this.calculateDynamicExample();\r\n    }\r\n\r\n    onBonusSourceChange(gradingScale: GradingScale) {\r\n        this.setBonusSourcePoints(gradingScale);\r\n        this.generateExamples();\r\n        this.refreshDynamicExample();\r\n    }\r\n\r\n    /**\r\n     * Gets the sign of the bonus calculation to display inside the formula.\r\n     * @param weight a positive or negative number\r\n     */\r\n    getCalculationSign(weight: number): string {\r\n        return weight > 0 ? '+' : 'âˆ’';\r\n    }\r\n\r\n    maxPossibleGrade() {\r\n        return this.gradingSystemService.maxGrade(this.bonusToGradeStepsDTO.gradeSteps);\r\n    }\r\n}\r\n", "<ng-template #helpTextTemplate let-translationKey=\"translationKey\">\r\n    <ng-template #tipContent><span [innerHTML]=\"translationKey | artemisTranslate | safeHtml\"></span></ng-template>\r\n    @if (bonus.id) {\r\n        <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary\" placement=\"right auto\" [ngbTooltip]=\"tipContent\" />\r\n    }\r\n    @if (!bonus.id) {\r\n        <div class=\"d-flex align-items-baseline\">\r\n            <fa-icon [icon]=\"faQuestionCircle\" class=\"text-secondary\" />\r\n            <label [innerHTML]=\"translationKey | artemisTranslate | safeHtml\" class=\"ps-1 pb-1\"></label>\r\n        </div>\r\n    }\r\n</ng-template>\r\n<article class=\"bonus-form-start\">\r\n    <h2 jhiTranslate=\"artemisApp.bonus.title\"></h2>\r\n    <div class=\"row mt-4\">\r\n        <div class=\"bonus-form-step col-1\"></div>\r\n        <div class=\"form-group col\">\r\n            <label class=\"no-flex-shrink h5\" jhiTranslate=\"artemisApp.bonus.bonusStrategy.title\"></label>\r\n            <ng-container [ngTemplateOutlet]=\"helpTextTemplate\" [ngTemplateOutletContext]=\"{ translationKey: 'artemisApp.bonus.bonusStrategy.helpText' }\" />\r\n            <jhi-mode-picker class=\"d-block mt-1\" [options]=\"bonusStrategyOptions\" [(value)]=\"currentBonusStrategyOption\" (valueChange)=\"onBonusStrategyInputChange()\" />\r\n        </div>\r\n    </div>\r\n    @if (bonus.id || currentBonusStrategyOption !== undefined) {\r\n        <div class=\"row mt-4\">\r\n            <div class=\"bonus-form-step col-1\"></div>\r\n            <div class=\"form-group col\">\r\n                <label class=\"no-flex-shrink h5\" jhiTranslate=\"artemisApp.bonus.calculation.title\"></label>\r\n                <ng-container [ngTemplateOutlet]=\"helpTextTemplate\" [ngTemplateOutletContext]=\"{ translationKey: 'artemisApp.bonus.calculation.helpText' }\" />\r\n                <jhi-mode-picker class=\"d-block mt-1\" [options]=\"calculationSigns\" [(value)]=\"bonus.weight\" (valueChange)=\"onWeightChange()\" />\r\n            </div>\r\n        </div>\r\n    }\r\n    @if (bonus.id || bonus.weight !== undefined) {\r\n        <div class=\"row mt-4\">\r\n            <div class=\"bonus-form-step col-1\"></div>\r\n            <div class=\"form-group col\">\r\n                <label class=\"no-flex-shrink h5\" jhiTranslate=\"artemisApp.bonus.bonusSource.title\"></label>\r\n                <ng-container [ngTemplateOutlet]=\"helpTextTemplate\" [ngTemplateOutletContext]=\"{ translationKey: 'artemisApp.bonus.bonusSource.helpText' }\" />\r\n                <select\r\n                    class=\"form-select mt-1\"\r\n                    [(ngModel)]=\"bonus.sourceGradingScale\"\r\n                    (ngModelChange)=\"onBonusSourceChange($event)\"\r\n                    [title]=\"'artemisApp.bonus.bonusSource.title' | artemisTranslate\"\r\n                >\r\n                    @for (sourceGradingScale of sourceGradingScales; track sourceGradingScale) {\r\n                        <option [ngValue]=\"sourceGradingScale\">{{ getGradingScaleTitle(sourceGradingScale) }}</option>\r\n                    }\r\n                </select>\r\n            </div>\r\n        </div>\r\n    }\r\n    <div class=\"bonus-calculated\">\r\n        @if (bonus.sourceGradingScale?.gradeSteps) {\r\n            <div class=\"mb-0 ms-2 fs-6 fw-bold no-flex-shrink\">\r\n                <span>{{ 'artemisApp.bonus.bonusSource.maxPoints' | artemisTranslate }}: {{ getGradingScaleMaxPoints(bonus.sourceGradingScale) }}</span>\r\n                @if (bonus.sourceGradingScale?.course) {\r\n                    <jhi-help-icon text=\"artemisApp.bonus.bonusSource.maxPointsCourseHelpText\" />\r\n                }\r\n            </div>\r\n            <div class=\"mb-4 fs-6\">\r\n                <table class=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th jhiTranslate=\"artemisApp.exam.examSummary.bonus\"></th>\r\n                            <th jhiTranslate=\"artemisApp.exam.examSummary.interval\"></th>\r\n                            @if (hasPointsSet()) {\r\n                                <th jhiTranslate=\"artemisApp.exam.examSummary.intervalPoints\"></th>\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        @for (gradeStep of bonus.sourceGradingScale?.gradeSteps; track gradeStep; let i = $index; let last = $last) {\r\n                            <tr>\r\n                                <td>{{ gradeStep.gradeName }}</td>\r\n                                <td>\r\n                                    <span [innerHTML]=\"gradeStep | gradeStepBounds: GradeEditMode.PERCENTAGE : last | safeHtml\"></span>\r\n                                </td>\r\n                                @if (hasPointsSet()) {\r\n                                    <td>\r\n                                        <span [innerHTML]=\"gradeStep | gradeStepBounds: GradeEditMode.POINTS : last | safeHtml\"></span>\r\n                                    </td>\r\n                                }\r\n                            </tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        }\r\n        @if (bonus.bonusStrategy && bonus.sourceGradingScale && bonus.weight) {\r\n            <h5 class=\"mb-0\" jhiTranslate=\"artemisApp.bonus.formula.title\"></h5>\r\n            @if (bonus.bonusStrategy && bonus.weight && bonusToGradeStepsDTO) {\r\n                <div class=\"fs-3 mb-4\">\r\n                    <div class=\"d-flex pb-2 align-items-center\">\r\n                        <div class=\"pe-2\">\r\n                            <strong\r\n                                [innerHTML]=\"\r\n                                    'artemisApp.bonus.formula.' + (bonus.bonusStrategy === BonusStrategy.POINTS ? 'examPoints' : 'examGrade') | artemisTranslate | safeHtml\r\n                                \"\r\n                                >Exam<br />Grade</strong\r\n                            >\r\n                        </div>\r\n                        <div class=\"p-2\">\r\n                            <strong class=\"calculation-sign\">{{ getCalculationSign(bonus.weight) }}</strong>\r\n                        </div>\r\n                        <div class=\"p-2\"><strong [innerHTML]=\"'artemisApp.bonus.formula.bonusGrade' | artemisTranslate | safeHtml\"></strong></div>\r\n                        <div class=\"p-2\"><strong class=\"calculation-sign\">=</strong></div>\r\n                        <div class=\"p-2\">\r\n                            <strong\r\n                                [innerHTML]=\"\r\n                                    'artemisApp.bonus.formula.' + (bonus.bonusStrategy === BonusStrategy.POINTS ? 'finalPoints' : 'finalGrade') | artemisTranslate | safeHtml\r\n                                \"\r\n                            ></strong>\r\n                        </div>\r\n                    </div>\r\n                    @if (bonus.bonusStrategy === BonusStrategy.POINTS) {\r\n                        <div class=\"row fs-6 ps-2\" jhiTranslate=\"artemisApp.bonus.formula.finalGradeFromPoints\"></div>\r\n                    }\r\n                    <div class=\"row fs-6 ps-2\" jhiTranslate=\"artemisApp.bonus.formula.finalGradeLimit\" [translateValues]=\"{ maxPossibleGrade: maxPossibleGrade() }\"></div>\r\n                </div>\r\n            }\r\n            @if (hasBonusStrategyWeightMismatch) {\r\n                <div class=\"alert alert-warning\" jhiTranslate=\"artemisApp.bonus.warnStrategyWeightMismatch\"></div>\r\n            }\r\n            @if (examples.length) {\r\n                <div>\r\n                    <h5 jhiTranslate=\"artemisApp.bonus.examples.title\"></h5>\r\n                    <p class=\"mb-1\" jhiTranslate=\"artemisApp.bonus.examples.helpText\"></p>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th jhiTranslate=\"artemisApp.bonus.examples.examPoints\"></th>\r\n                                <th jhiTranslate=\"artemisApp.bonus.examples.examGrade\"></th>\r\n                                <th jhiTranslate=\"artemisApp.bonus.examples.bonusSourceStudentPoints\"></th>\r\n                                <th jhiTranslate=\"artemisApp.bonus.examples.bonusGrade\"></th>\r\n                                @if (currentBonusStrategyOption === BonusStrategyOption.POINTS) {\r\n                                    <th jhiTranslate=\"artemisApp.bonus.examples.finalPoints\"></th>\r\n                                }\r\n                                <th jhiTranslate=\"artemisApp.bonus.examples.finalGrade\"></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            @for (example of examples; track example) {\r\n                                <tr>\r\n                                    <td>{{ example.studentPointsOfBonusTo }}</td>\r\n                                    <td>{{ example.examGrade }}</td>\r\n                                    <td>{{ example.studentPointsOfBonusSource ?? ('artemisApp.bonus.examples.any' | artemisTranslate) }}</td>\r\n                                    <td>{{ example.bonusGrade }}</td>\r\n                                    @if (bonus.bonusStrategy === BonusStrategy.POINTS) {\r\n                                        <td>\r\n                                            {{ example.studentPointsOfBonusTo }} {{ getCalculationSign(bonus.weight!) }} {{ example.bonusGrade }} = {{ example.finalPoints }}\r\n                                            @if (example.exceedsMax) {\r\n                                                <fa-icon\r\n                                                    [icon]=\"faExclamationTriangle\"\r\n                                                    class=\"text-warning\"\r\n                                                    [ngbTooltip]=\"'artemisApp.bonus.examples.exceedsMax' | artemisTranslate\"\r\n                                                />\r\n                                            }\r\n                                        </td>\r\n                                    }\r\n                                    <td>\r\n                                        @if (bonus.bonusStrategy === BonusStrategy.GRADES_CONTINUOUS) {\r\n                                            {{ example.examGrade }} {{ getCalculationSign(bonus.weight!) }} {{ example.bonusGrade }} =\r\n                                        }\r\n                                        {{ example.finalGrade }}\r\n                                        @if (bonus.bonusStrategy !== BonusStrategy.POINTS && example.exceedsMax) {\r\n                                            <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning\" [ngbTooltip]=\"'artemisApp.bonus.examples.exceedsMax' | artemisTranslate\" />\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            }\r\n                            <tr>\r\n                                <td class=\"ps-0\">\r\n                                    <input\r\n                                        [(ngModel)]=\"dynamicExample.studentPointsOfBonusTo\"\r\n                                        (change)=\"calculateDynamicExample()\"\r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        min=\"0\"\r\n                                        class=\"dynamic-example\"\r\n                                    />\r\n                                </td>\r\n                                <td>{{ dynamicExample.examGrade }}</td>\r\n                                <td class=\"ps-0\">\r\n                                    <input\r\n                                        [(ngModel)]=\"dynamicExample.studentPointsOfBonusSource\"\r\n                                        (change)=\"calculateDynamicExample()\"\r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        min=\"0\"\r\n                                        class=\"dynamic-example\"\r\n                                    />\r\n                                </td>\r\n                                <td>{{ dynamicExample.bonusGrade }}</td>\r\n                                @if (bonus.bonusStrategy === BonusStrategy.POINTS) {\r\n                                    <td>\r\n                                        @if (dynamicExample.finalPoints !== undefined) {\r\n                                            {{ dynamicExample.studentPointsOfBonusTo }} {{ getCalculationSign(bonus.weight!) }} {{ dynamicExample.bonusGrade }} =\r\n                                            {{ dynamicExample.finalPoints }}\r\n                                            @if (dynamicExample.exceedsMax) {\r\n                                                <fa-icon\r\n                                                    [icon]=\"faExclamationTriangle\"\r\n                                                    class=\"text-warning\"\r\n                                                    [ngbTooltip]=\"'artemisApp.bonus.examples.exceedsMax' | artemisTranslate\"\r\n                                                />\r\n                                            }\r\n                                        }\r\n                                    </td>\r\n                                }\r\n                                <td>\r\n                                    @if (bonus.bonusStrategy === BonusStrategy.GRADES_CONTINUOUS && dynamicExample.finalGrade) {\r\n                                        {{ dynamicExample.examGrade }} {{ getCalculationSign(bonus.weight!) }} {{ dynamicExample.bonusGrade }}\r\n                                        =\r\n                                    }\r\n                                    {{ dynamicExample.finalGrade }}\r\n                                    @if (bonus.bonusStrategy !== BonusStrategy.POINTS && dynamicExample.exceedsMax) {\r\n                                        <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-warning\" [ngbTooltip]=\"'artemisApp.bonus.examples.exceedsMax' | artemisTranslate\" />\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n            <div>\r\n                <button (click)=\"save()\" [disabled]=\"isLoading\" class=\"btn btn-primary mr-1 mb-1\" type=\"button\">\r\n                    <fa-icon [icon]=\"faSave\" />&nbsp;<span jhiTranslate=\"entity.action.save\"></span>\r\n                </button>\r\n                @if (bonus.id) {\r\n                    <button\r\n                        class=\"mb-1\"\r\n                        jhiDeleteButton\r\n                        [entityTitle]=\"''\"\r\n                        [buttonSize]=\"ButtonSize.MEDIUM\"\r\n                        deleteQuestion=\"artemisApp.bonus.deleteQuestion\"\r\n                        (delete)=\"delete()\"\r\n                        [dialogError]=\"dialogError$\"\r\n                        [disabled]=\"isLoading\"\r\n                    >\r\n                        <fa-icon [icon]=\"faTimes\"><span jhiTranslate=\"entity.action.delete\"></span></fa-icon>\r\n                    </button>\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n</article>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275pipeBind1", "translationKey_r2", "\u0275\u0275sanitizeHtml", "\u0275\u0275text", "\u0275\u0275advance", "ctx_r3", "faQuestionCircle", "tipContent_r3", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275template", "BonusComponent_ng_template_0_ng_template_1_Template", "\u0275\u0275templateRefExtractor", "BonusComponent_ng_template_0_Conditional_4_Template", "BonusComponent_ng_template_0_Conditional_5_Template", "\u0275\u0275conditional", "bonus", "id", "\u0275\u0275elementContainer", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r5", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "weight", "\u0275\u0275resetView", "\u0275\u0275listener", "onWeightChange", "helpTextTemplate_r6", "\u0275\u0275pureFunction0", "_c1", "calculationSigns", "\u0275\u0275twoWayProperty", "sourceGradingScale_r8", "\u0275\u0275textInterpolate", "getGradingScaleTitle", "_r7", "sourceGradingScale", "onBonusSourceChange", "\u0275\u0275repeaterCreate", "BonusComponent_Conditional_22_For_15_Template", "\u0275\u0275repeaterTrackByIdentity", "_c2", "\u0275\u0275repeater", "sourceGradingScales", "\u0275\u0275pipeBind3", "gradeStep_r10", "GradeEditMode", "POINTS", "\u0275$index_156_r11", "\u0275$count_156_r12", "BonusComponent_Conditional_25_For_27_Conditional_13_Template", "gradeName", "PERCENTAGE", "hasPointsSet", "BonusComponent_Conditional_25_Conditional_7_Template", "BonusComponent_Conditional_25_Conditional_21_Template", "BonusComponent_Conditional_25_For_27_Template", "\u0275\u0275textInterpolate2", "getGradingScaleMaxPoints", "course", "gradeSteps", "BonusComponent_Conditional_26_Conditional_3_Conditional_38_Template", "bonusStrategy", "BonusStrategy", "getCalculationSign", "\u0275\u0275pureFunction1", "_c3", "maxPossibleGrade", "faExclamationTriangle", "BonusComponent_Conditional_26_Conditional_5_For_29_Conditional_16_Conditional_3_Template", "\u0275\u0275textInterpolate4", "example_r15", "studentPointsOfBonusTo", "bonusGrade", "finalPoints", "exceedsMax", "\u0275\u0275textInterpolate3", "examGrade", "BonusComponent_Conditional_26_Conditional_5_For_29_Conditional_16_Template", "BonusComponent_Conditional_26_Conditional_5_For_29_Conditional_19_Template", "BonusComponent_Conditional_26_Conditional_5_For_29_Conditional_21_Template", "tmp_15_0", "studentPointsOfBonusSource", "undefined", "GRADES_CONTINUOUS", "\u0275\u0275textInterpolate1", "finalGrade", "BonusComponent_Conditional_26_Conditional_5_Conditional_48_Conditional_3_Conditional_1_Template", "dynamicExample", "BonusComponent_Conditional_26_Conditional_5_Conditional_48_Conditional_3_Template", "BonusComponent_Conditional_26_Conditional_5_Conditional_21_Template", "BonusComponent_Conditional_26_Conditional_5_For_29_Template", "_r14", "calculateDynamicExample", "BonusComponent_Conditional_26_Conditional_5_Conditional_48_Template", "BonusComponent_Conditional_26_Conditional_5_Conditional_51_Template", "BonusComponent_Conditional_26_Conditional_5_Conditional_53_Template", "currentBonusStrategyOption", "BonusStrategyOption", "examples", "_r16", "delete", "ButtonSize", "MEDIUM", "dialogError$", "isLoading", "faTimes", "BonusComponent_Conditional_26_Conditional_3_Template", "BonusComponent_Conditional_26_Conditional_4_Template", "BonusComponent_Conditional_26_Conditional_5_Template", "_r13", "save", "BonusComponent_Conditional_26_Conditional_15_Template", "bonusToGradeStepsDTO", "hasBonusStrategyWeightMismatch", "length", "faSave", "BonusStrategyDiscreteness", "BonusComponent", "bonusService", "inject", "BonusService", "gradingSystemService", "GradingSystemService", "route", "ActivatedRoute", "router", "Router", "alertService", "AlertService", "CALCULATION_PLUS", "CALCULATION_MINUS", "faPlus", "bonusStrategyOptions", "GRADES", "map", "bonusStrategyOption", "value", "labelKey", "toLowerCase", "btnClass", "bonusStrategyDiscreteness", "CONTINUOUS", "label", "courseId", "examId", "dialogErrorSource", "Subject", "asObservable", "currentBonusStrategyDiscreteness", "BonusExample", "Bonus", "state", "page", "pageSize", "searchTerm", "sortingOrder", "SortingOrder", "DESCENDING", "sortedColumn", "ngOnInit", "paramMap", "snapshot", "Number", "get", "forkJoin", "findBonusForExam", "pipe", "tap", "bonusResponse", "setBonus", "body", "catchError", "error", "status", "of", "findWithBonusGradeTypeForInstructor", "gradingScales", "resultsOnPage", "findGradeSteps", "sortGradeSteps", "setGradePoints", "maxPoints", "Error", "message", "navigateToExam", "finalize", "subscribe", "setSourceGradingScale", "navigate", "find", "gradingScale", "generateExamples", "checkBonusStrategyWeightMismatch", "generateBonusExamples", "bonusToGradeSteps", "GRADES_DISCRETE", "maxGradeValue", "getNumericValueForGradeName", "maxGrade", "firstGradeValue", "doesBonusExceedMax", "DISCRETE", "onBonusStrategyInputChange", "convertFromInputsToBonusStrategy", "refreshDynamicExample", "updateBonus", "createBonusForExam", "deleteBonus", "next", "setBonusSourcePoints", "calculateFinalGrade", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "BonusComponent_ng_template_0_Template", "_r1", "BonusComponent_Conditional_21_Template", "BonusComponent_Conditional_22_Template", "BonusComponent_Conditional_25_Template", "BonusComponent_Conditional_26_Template", "_c0", "SafeHtmlPipe", "GradeStepBoundsPipe", "ModePickerComponent", "ArtemisTranslatePipe", "TranslateDirective", "DeleteButtonDirective", "FontAwesomeModule", "FaIconComponent", "NgbTooltipModule", "NgbTooltip", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "MinValidator", "NgModel", "CommonModule", "NgTemplateOutlet", "HelpIconComponent", "styles"]
}
