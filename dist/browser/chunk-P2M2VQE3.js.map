{
  "version": 3,
  "sources": ["src/main/webapp/app/entities/metis/conversation/conversation.model.ts", "src/main/webapp/app/entities/metis/conversation/channel.model.ts"],
  "sourcesContent": ["import { BaseEntity } from 'app/shared/model/base-entity';\r\nimport dayjs from 'dayjs/esm';\r\nimport { Course } from 'app/entities/course.model';\r\nimport { ConversationParticipant } from 'app/entities/metis/conversation/conversation-participant.model';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { ConversationUserDTO } from 'app/entities/metis/conversation/conversation-user-dto.model';\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with\r\n// the ones defined in Conversation.java and ConversationDTO.java\r\nexport enum ConversationType {\r\n    GROUP_CHAT = 'groupChat',\r\n    CHANNEL = 'channel',\r\n    ONE_TO_ONE = 'oneToOneChat',\r\n}\r\n/**\r\n * Entity\r\n */\r\nexport abstract class Conversation implements BaseEntity {\r\n    public type?: ConversationType;\r\n    public id?: number;\r\n    public conversationParticipants?: ConversationParticipant[];\r\n    public course?: Course;\r\n    public creator?: User;\r\n    public creationDate?: dayjs.Dayjs;\r\n    public lastMessageDate?: dayjs.Dayjs;\r\n    public title?: string;\r\n\r\n    protected constructor(type: ConversationType) {\r\n        this.type = type;\r\n    }\r\n}\r\n\r\n/**\r\n * DTO\r\n */\r\nexport abstract class ConversationDTO {\r\n    public type?: ConversationType;\r\n    public id?: number;\r\n    public creationDate?: dayjs.Dayjs;\r\n    public lastMessageDate?: dayjs.Dayjs;\r\n    public lastReadDate?: dayjs.Dayjs;\r\n    public unreadMessagesCount?: number;\r\n    public isMember?: boolean;\r\n    public numberOfMembers?: number;\r\n    public creator?: ConversationUserDTO;\r\n    public isCreator?: boolean;\r\n    public isFavorite?: boolean;\r\n    public isHidden?: boolean;\r\n    public isMuted?: boolean;\r\n    public hasUnreadMessage?: boolean;\r\n\r\n    protected constructor(type: ConversationType) {\r\n        this.type = type;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if a notification, due to this conversation, should notify its recipients.\r\n * @param conversation a conversation\r\n */\r\nexport function shouldNotifyRecipient(conversation: ConversationDTO): boolean {\r\n    return !conversation.isMuted && !conversation.isHidden;\r\n}\r\n", "import { Conversation, ConversationDTO, ConversationType } from 'app/entities/metis/conversation/conversation.model';\r\nimport { Exercise } from 'app/entities/exercise.model';\r\nimport { Lecture } from 'app/entities/lecture.model';\r\nimport { Exam } from 'app/entities/exam/exam.model';\r\n\r\n// IMPORTANT NOTICE: The following strings have to be consistent with\r\n// the types defined in ChannelSubType.java\r\nexport enum ChannelSubType {\r\n    GENERAL = 'general',\r\n    EXERCISE = 'exercise',\r\n    LECTURE = 'lecture',\r\n    EXAM = 'exam',\r\n    FEEDBACK_DISCUSSION = 'feedbackDiscussion',\r\n}\r\n\r\n/**\r\n * Entity\r\n */\r\nexport class Channel extends Conversation {\r\n    public name?: string; // max 30 characters\r\n    public description?: string; // max 250 characters\r\n    public topic?: string; // max 250 characters;\r\n    public isPublic = false; // default value\r\n    public isAnnouncementChannel = false; // default value\r\n    public isArchived = false; // default value\r\n    public isCourseWide = false; // default value\r\n\r\n    public exercise?: Exercise;\r\n    public lecture?: Lecture;\r\n    public exam?: Exam;\r\n\r\n    constructor() {\r\n        super(ConversationType.CHANNEL);\r\n    }\r\n}\r\n\r\n/**\r\n * DTO\r\n */\r\nexport class ChannelDTO extends ConversationDTO {\r\n    public subType?: ChannelSubType;\r\n    public subTypeReferenceId?: number;\r\n    public name?: string;\r\n    public description?: string;\r\n    public topic?: string;\r\n    public isPublic = false; // default value\r\n    public isAnnouncementChannel = false; // default value\r\n    public isArchived = false; // default value\r\n    public isChannelModerator = false; // default value\r\n    public hasChannelModerationRights = false; // default value\r\n    public isCourseWide = false; // default value\r\n\r\n    public tutorialGroupId?: number;\r\n\r\n    public tutorialGroupTitle?: string;\r\n\r\n    constructor() {\r\n        super(ConversationType.CHANNEL);\r\n    }\r\n}\r\n\r\n/**\r\n * A DTO representing a channel which contains only the id and name\r\n */\r\nexport class ChannelIdAndNameDTO {\r\n    public id?: number;\r\n    public name?: string;\r\n}\r\n\r\nexport function isChannelDTO(conversation: ConversationDTO | Conversation): conversation is ChannelDTO {\r\n    return conversation.type === ConversationType.CHANNEL;\r\n}\r\n\r\nexport function getAsChannelDTO(conversation: ConversationDTO | Conversation | undefined): ChannelDTO | undefined {\r\n    if (!conversation) {\r\n        return undefined;\r\n    }\r\n    return isChannelDTO(conversation) ? conversation : undefined;\r\n}\r\n"],
  "mappings": "AASA,IAAYA,EAAZ,SAAYA,EAAgB,CACxBA,OAAAA,EAAA,WAAA,YACAA,EAAA,QAAA,UACAA,EAAA,WAAA,eAHQA,CAIZ,EAJYA,GAAgB,CAAA,CAAA,EAQNC,EAAhB,KAA4B,CACvBC,KACAC,GACAC,yBACAC,OACAC,QACAC,aACAC,gBACAC,MAEPC,YAAsBR,EAAsB,CACxC,KAAKA,KAAOA,CAChB,GAMkBS,EAAhB,KAA+B,CAC1BT,KACAC,GACAI,aACAC,gBACAI,aACAC,oBACAC,SACAC,gBACAT,QACAU,UACAC,WACAC,SACAC,QACAC,iBAEPV,YAAsBR,EAAsB,CACxC,KAAKA,KAAOA,CAChB,GAOE,SAAUmB,EAAsBC,EAA6B,CAC/D,MAAO,CAACA,EAAaH,SAAW,CAACG,EAAaJ,QAClD,CCvDA,IAAYK,EAAZ,SAAYA,EAAc,CACtBA,OAAAA,EAAA,QAAA,UACAA,EAAA,SAAA,WACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OACAA,EAAA,oBAAA,qBALQA,CAMZ,EANYA,GAAc,CAAA,CAAA,EAWbC,EAAP,cAAuBC,CAAY,CAC9BC,KACAC,YACAC,MACAC,SAAW,GACXC,sBAAwB,GACxBC,WAAa,GACbC,aAAe,GAEfC,SACAC,QACAC,KAEPC,aAAA,CACI,MAAMC,EAAiBC,OAAO,CAClC,GAMSC,EAAP,cAA0BC,CAAe,CACpCC,QACAC,mBACAhB,KACAC,YACAC,MACAC,SAAW,GACXC,sBAAwB,GACxBC,WAAa,GACbY,mBAAqB,GACrBC,2BAA6B,GAC7BZ,aAAe,GAEfa,gBAEAC,mBAEPV,aAAA,CACI,MAAMC,EAAiBC,OAAO,CAClC,GAWE,SAAUS,EAAaC,EAA4C,CACrE,OAAOA,EAAaC,OAASC,EAAiBC,OAClD,CAEM,SAAUC,EAAgBJ,EAAwD,CACpF,GAAKA,EAGL,OAAOD,EAAaC,CAAY,EAAIA,EAAeK,MACvD",
  "names": ["ConversationType", "Conversation", "type", "id", "conversationParticipants", "course", "creator", "creationDate", "lastMessageDate", "title", "constructor", "ConversationDTO", "lastReadDate", "unreadMessagesCount", "isMember", "numberOfMembers", "isCreator", "isFavorite", "isHidden", "isMuted", "hasUnreadMessage", "shouldNotifyRecipient", "conversation", "ChannelSubType", "Channel", "Conversation", "name", "description", "topic", "isPublic", "isAnnouncementChannel", "isArchived", "isCourseWide", "exercise", "lecture", "exam", "constructor", "ConversationType", "CHANNEL", "ChannelDTO", "ConversationDTO", "subType", "subTypeReferenceId", "isChannelModerator", "hasChannelModerationRights", "tutorialGroupId", "tutorialGroupTitle", "isChannelDTO", "conversation", "type", "ConversationType", "CHANNEL", "getAsChannelDTO", "undefined"]
}
