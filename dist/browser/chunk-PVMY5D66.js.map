{
  "version": 3,
  "sources": ["src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/attachmentUnit.service.ts"],
  "sourcesContent": ["import { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\r\nimport { AttachmentUnit } from 'app/entities/lecture-unit/attachmentUnit.model';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { LectureUnitInformationDTO } from 'app/lecture/lecture-unit/lecture-unit-management/attachment-units/attachment-units.component';\r\n\r\ntype EntityResponseType = HttpResponse<AttachmentUnit>;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AttachmentUnitService {\r\n    private httpClient = inject(HttpClient);\r\n    private lectureUnitService = inject(LectureUnitService);\r\n\r\n    private resourceURL = 'api/lecture';\r\n\r\n    findById(attachmentUnitId: number, lectureId: number) {\r\n        return this.httpClient\r\n            .get<AttachmentUnit>(`${this.resourceURL}/lectures/${lectureId}/attachment-units/${attachmentUnitId}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n\r\n    create(formData: FormData, lectureId: number): Observable<EntityResponseType> {\r\n        /** Ngsw-worker is bypassed temporarily to fix Chromium file upload issue\r\n         * See: https://issues.chromium.org/issues/374550348\r\n         **/\r\n        return this.httpClient\r\n            .post<AttachmentUnit>(`${this.resourceURL}/lectures/${lectureId}/attachment-units?keepFilename=true`, formData, {\r\n                headers: { 'ngsw-bypass': 'true' },\r\n                observe: 'response',\r\n            })\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n\r\n    update(lectureId: number, attachmentUnitId: number, formData: FormData, notificationText?: string): Observable<EntityResponseType> {\r\n        /** Ngsw-worker is bypassed temporarily to fix Chromium file upload issue\r\n         * See: https://issues.chromium.org/issues/374550348\r\n         **/\r\n        return this.httpClient\r\n            .put<AttachmentUnit>(\r\n                `${this.resourceURL}/lectures/${lectureId}/attachment-units/${attachmentUnitId}?keepFilename=true` +\r\n                    (notificationText ? `&notificationText=${notificationText}` : ''),\r\n                formData,\r\n                { headers: { 'ngsw-bypass': 'true' }, observe: 'response' },\r\n            )\r\n            .pipe(map((res: EntityResponseType) => this.lectureUnitService.convertLectureUnitResponseDatesFromServer(res)));\r\n    }\r\n\r\n    getSplitUnitsData(lectureId: number, filename: string) {\r\n        return this.httpClient.get<LectureUnitInformationDTO>(`${this.resourceURL}/lectures/${lectureId}/attachment-units/data/${filename}`, { observe: 'response' });\r\n    }\r\n\r\n    createUnits(lectureId: number, filename: string, lectureUnitInformation: LectureUnitInformationDTO) {\r\n        return this.httpClient.post(`${this.resourceURL}/lectures/${lectureId}/attachment-units/split/${filename}`, lectureUnitInformation, { observe: 'response' });\r\n    }\r\n\r\n    uploadSlidesForProcessing(lectureId: number, file: File) {\r\n        const formData: FormData = new FormData();\r\n        formData.append('file', file);\r\n        return this.httpClient.post<string>(`${this.resourceURL}/lectures/${lectureId}/attachment-units/upload`, formData, { observe: 'response' });\r\n    }\r\n\r\n    getSlidesToRemove(lectureId: number, filename: string, keyPhrases: string) {\r\n        const params = new HttpParams().set('commaSeparatedKeyPhrases', keyPhrases);\r\n        return this.httpClient.get<Array<number>>(`${this.resourceURL}/lectures/${lectureId}/attachment-units/slides-to-remove/${filename}`, { params, observe: 'response' });\r\n    }\r\n\r\n    /**\r\n     * Retrieve the file associated with a given attachment ID as a Blob object\r\n     *\r\n     * @param courseId The ID of the course that the Attachment Unit belongs to\r\n     * @param attachmentUnitId The ID of the attachment to retrieve\r\n     * @returns An Observable that emits the Blob object of the file when the HTTP request completes successfully\r\n     */\r\n    getAttachmentFile(courseId: number, attachmentUnitId: number): Observable<Blob> {\r\n        return this.httpClient.get(`${this.resourceURL}/files/courses/${courseId}/attachment-units/${attachmentUnitId}`, { responseType: 'blob' });\r\n    }\r\n}\r\n"],
  "mappings": "+IAaA,IAAaA,GAAqB,IAAA,CAA5B,MAAOA,CAAqB,CACtBC,WAAaC,EAAOC,CAAU,EAC9BC,mBAAqBF,EAAOG,CAAkB,EAE9CC,YAAc,cAEtBC,SAASC,EAA0BC,EAAiB,CAChD,OAAO,KAAKR,WACPS,IAAoB,GAAG,KAAKJ,WAAW,aAAaG,CAAS,qBAAqBD,CAAgB,GAAI,CAAEG,QAAS,UAAU,CAAE,EAC7HC,KAAKC,EAAKC,GAA4B,KAAKV,mBAAmBW,0CAA0CD,CAAG,CAAC,CAAC,CACtH,CAEAE,OAAOC,EAAoBR,EAAiB,CAIxC,OAAO,KAAKR,WACPiB,KAAqB,GAAG,KAAKZ,WAAW,aAAaG,CAAS,sCAAuCQ,EAAU,CAC5GE,QAAS,CAAE,cAAe,MAAM,EAChCR,QAAS,WACZ,EACAC,KAAKC,EAAKC,GAA4B,KAAKV,mBAAmBW,0CAA0CD,CAAG,CAAC,CAAC,CACtH,CAEAM,OAAOX,EAAmBD,EAA0BS,EAAoBI,EAAyB,CAI7F,OAAO,KAAKpB,WACPqB,IACG,GAAG,KAAKhB,WAAW,aAAaG,CAAS,qBAAqBD,CAAgB,sBACzEa,EAAmB,qBAAqBA,CAAgB,GAAK,IAClEJ,EACA,CAAEE,QAAS,CAAE,cAAe,MAAM,EAAIR,QAAS,UAAU,CAAE,EAE9DC,KAAKC,EAAKC,GAA4B,KAAKV,mBAAmBW,0CAA0CD,CAAG,CAAC,CAAC,CACtH,CAEAS,kBAAkBd,EAAmBe,EAAgB,CACjD,OAAO,KAAKvB,WAAWS,IAA+B,GAAG,KAAKJ,WAAW,aAAaG,CAAS,0BAA0Be,CAAQ,GAAI,CAAEb,QAAS,UAAU,CAAE,CAChK,CAEAc,YAAYhB,EAAmBe,EAAkBE,EAAiD,CAC9F,OAAO,KAAKzB,WAAWiB,KAAK,GAAG,KAAKZ,WAAW,aAAaG,CAAS,2BAA2Be,CAAQ,GAAIE,EAAwB,CAAEf,QAAS,UAAU,CAAE,CAC/J,CAEAgB,0BAA0BlB,EAAmBmB,EAAU,CACnD,IAAMX,EAAqB,IAAIY,SAC/BZ,OAAAA,EAASa,OAAO,OAAQF,CAAI,EACrB,KAAK3B,WAAWiB,KAAa,GAAG,KAAKZ,WAAW,aAAaG,CAAS,2BAA4BQ,EAAU,CAAEN,QAAS,UAAU,CAAE,CAC9I,CAEAoB,kBAAkBtB,EAAmBe,EAAkBQ,EAAkB,CACrE,IAAMC,EAAS,IAAIC,EAAU,EAAGC,IAAI,2BAA4BH,CAAU,EAC1E,OAAO,KAAK/B,WAAWS,IAAmB,GAAG,KAAKJ,WAAW,aAAaG,CAAS,sCAAsCe,CAAQ,GAAI,CAAES,OAAAA,EAAQtB,QAAS,UAAU,CAAE,CACxK,CASAyB,kBAAkBC,EAAkB7B,EAAwB,CACxD,OAAO,KAAKP,WAAWS,IAAI,GAAG,KAAKJ,WAAW,kBAAkB+B,CAAQ,qBAAqB7B,CAAgB,GAAI,CAAE8B,aAAc,MAAM,CAAE,CAC7I,4CAlEStC,EAAqB,6BAArBA,EAAqBuC,QAArBvC,EAAqBwC,UAAAC,WAFlB,MAAM,CAAA,SAETzC,CAAqB,GAAA",
  "names": ["AttachmentUnitService", "httpClient", "inject", "HttpClient", "lectureUnitService", "LectureUnitService", "resourceURL", "findById", "attachmentUnitId", "lectureId", "get", "observe", "pipe", "map", "res", "convertLectureUnitResponseDatesFromServer", "create", "formData", "post", "headers", "update", "notificationText", "put", "getSplitUnitsData", "filename", "createUnits", "lectureUnitInformation", "uploadSlidesForProcessing", "file", "FormData", "append", "getSlidesToRemove", "keyPhrases", "params", "HttpParams", "set", "getAttachmentFile", "courseId", "responseType", "factory", "\u0275fac", "providedIn"]
}
